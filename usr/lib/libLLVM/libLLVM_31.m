uint64_t sub_1CC732868(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  void *v16;
  uint64_t v17;
  void v18[7];

  v18[6] = *MEMORY[0x1E4F143B8];
  v3 = *(_DWORD *)(a2 + 24);
  if (v3 > 1)
  {
    v16 = v18;
    v17 = 0x600000000;
    v5 = v3 - 1;
    if ((int)(v3 - 1) < 0)
    {
      v4 = 0;
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      do
      {
        v7 = *(void *)(*(void *)(a2 + 16) + 8 * v5);
        v8 = *(unsigned int *)(a2 + 88);
        v9 = *(void *)(a2 + 80) + 16 * v8;
        v10 = -16 * v8;
        while (v10 && v5 > *(unsigned int *)(v9 - 8))
        {
          v11 = *(void *)(v9 - 16);
          v9 -= 16;
          v10 += 16;
          if (sub_1CD62B390(v7, v11, *(void *)(a1 + 280), *(void *)(a1 + 304))) {
            goto LABEL_11;
          }
        }
        v12 = v17;
        if (v17 >= HIDWORD(v17)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v16 + v17) = v7;
        LODWORD(v17) = v12 + 1;
LABEL_11:
        ;
      }
      while ((uint64_t)v5-- > 0);
      v4 = 0;
      v14 = v17;
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)a2 = 0;
      if (v14 >= 2) {
        v4 = sub_1CD62B57C(a1, (unsigned int *)&v16);
      }
    }
    if (v16 != v18) {
      free(v16);
    }
  }
  else
  {
    v4 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 88) = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)a2 = 0;
  }
  return v4;
}

uint64_t sub_1CC732A18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CD62C5C4(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1 + 16 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

uint64_t sub_1CC732A44(uint64_t a1, uint64_t a2)
{
  v59[6] = *MEMORY[0x1E4F143B8];
  v54[0] = 0;
  v55 = v57;
  uint64_t v56 = 0x600000000;
  v58[0] = v59;
  v58[1] = (void *)0x300000000;
  uint64_t v3 = a2 + 48;
  unint64_t v4 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (*(unsigned char *)v4 & 4) == 0)
  {
    while ((*(_WORD *)(v4 + 44) & 4) != 0)
      unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 != v3)
  {
    int v5 = 0;
    v6 = (unsigned int *)(a1 + 444);
    v7 = (unsigned int *)(a1 + 440);
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 424);
      uint64_t v8 = *(void *)(a1 + 432);
      if (v8 == v9)
      {
        uint64_t v10 = *v6;
        v11 = (void *)(v8 + 8 * v10);
        if (v10)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * v10;
          while (*(void *)(v8 + v12) != v4)
          {
            v12 += 8;
            if (v13 == v12) {
              goto LABEL_26;
            }
          }
          v11 = (void *)(v8 + v12);
        }
LABEL_26:
        uint64_t v9 = *(void *)(a1 + 432);
      }
      else
      {
        uint64_t v14 = *v7;
        int v15 = v14 - 1;
        unsigned int v16 = (v14 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v11 = (void *)(v8 + 8 * v16);
        uint64_t v17 = *v11;
        if (*v11 == -1)
        {
          v18 = 0;
LABEL_62:
          if (v18) {
            v11 = v18;
          }
          if (*v11 != v4) {
            v11 = (void *)(v8 + 8 * v14);
          }
        }
        else
        {
          v18 = 0;
          int v19 = 1;
          while (v17 != v4)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -2;
            }
            if (v20) {
              v18 = v11;
            }
            unsigned int v21 = v16 + v19++;
            unsigned int v16 = v21 & v15;
            v11 = (void *)(v8 + 8 * (v21 & v15));
            uint64_t v17 = *v11;
            if (*v11 == -1) {
              goto LABEL_62;
            }
          }
        }
      }
      if (v8 == v9) {
        v22 = (unsigned int *)(a1 + 444);
      }
      else {
        v22 = (unsigned int *)(a1 + 440);
      }
      if (v11 != (void *)(v8 + 8 * *v22)) {
        goto LABEL_31;
      }
      v23 = *(unsigned __int16 **)(v4 + 16);
      int v24 = *v23;
      if (!v4 || v24 != 96) {
        break;
      }
      if (sub_1CD62BBD0(a1, v4, (uint64_t)v54)) {
        goto LABEL_31;
      }
      if (!v56)
      {
LABEL_72:
        int v34 = 0;
LABEL_73:
        sub_1CC732A18((uint64_t)v58, v4, v34 - 1);
        goto LABEL_31;
      }
      v35 = (uint64_t *)v55;
      uint64_t v36 = 8 * v56;
      while (!sub_1CD62B390(v4, *v35, *(void *)(a1 + 280), *(void *)(a1 + 304)))
      {
        ++v35;
        v36 -= 8;
        if (!v36)
        {
LABEL_60:
          int v34 = v56;
          goto LABEL_73;
        }
      }
LABEL_74:
      v5 |= sub_1CC732868(a1, (uint64_t)v54);
LABEL_31:
      unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      if (!v4 || (*(unsigned char *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 4) != 0)
          unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v4 == v3) {
        goto LABEL_94;
      }
    }
    if (!v56) {
      goto LABEL_31;
    }
    __int16 v25 = *(_WORD *)(v4 + 44);
    uint64_t v26 = *((void *)v23 + 1);
    if ((v25 & 0xC) != 0 && (v25 & 4) == 0)
    {
      unint64_t v37 = v4;
      if ((v26 & 0x1000000) != 0) {
        goto LABEL_46;
      }
      while ((*(_WORD *)(v37 + 44) & 8) != 0)
      {
        unint64_t v37 = *(void *)(v37 + 8);
        if (*(unsigned char *)(*(void *)(v37 + 16) + 11)) {
          goto LABEL_46;
        }
      }
    }
    else if ((v26 & 0x1000000) != 0)
    {
      goto LABEL_46;
    }
    if ((v24 - 1) <= 1 && (*(unsigned char *)(*(void *)(v4 + 32) + 48) & 1) != 0
      || llvm::MachineInstr::hasOrderedMemoryRef((llvm::MachineInstr *)v4))
    {
LABEL_46:
      v5 |= sub_1CC732868(a1, (uint64_t)v54);
      LODWORD(v56) = 0;
      goto LABEL_31;
    }
    v27 = *(unsigned __int16 **)(v4 + 16);
    unsigned int v28 = *v27 - 1;
    if (v28 <= 1 && (*(unsigned char *)(*(void *)(v4 + 32) + 48) & 8) != 0)
    {
LABEL_56:
      if (!v56) {
        goto LABEL_72;
      }
      v32 = (uint64_t *)v55;
      uint64_t v33 = 8 * v56;
      while (!sub_1CD62B390(v4, *v32, *(void *)(a1 + 280), *(void *)(a1 + 304)))
      {
        ++v32;
        v33 -= 8;
        if (!v33) {
          goto LABEL_60;
        }
      }
      goto LABEL_74;
    }
    unsigned int v29 = *(unsigned __int16 *)(v4 + 44);
    BOOL v20 = (v29 & 0xC) == 0;
    int v30 = (v29 >> 2) & 1;
    if (v20) {
      LOBYTE(v30) = 1;
    }
    uint64_t v31 = *((void *)v27 + 1);
    if (v30)
    {
      if ((v31 & 0x80000) != 0) {
        goto LABEL_56;
      }
    }
    else
    {
      unint64_t v38 = v4;
      if ((v31 & 0x80000) != 0) {
        goto LABEL_56;
      }
      while ((*(_WORD *)(v38 + 44) & 8) != 0)
      {
        unint64_t v38 = *(void *)(v38 + 8);
        if ((*(unsigned char *)(*(void *)(v38 + 16) + 10) & 8) != 0) {
          goto LABEL_56;
        }
      }
    }
    if (v28 > 1 || (*(unsigned char *)(*(void *)(v4 + 32) + 48) & 0x10) == 0)
    {
      if (v30)
      {
        if ((v31 & 0x100000) == 0) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v39 = v4;
        if ((v31 & 0x100000) == 0)
        {
          while ((*(_WORD *)(v39 + 44) & 8) != 0)
          {
            unint64_t v39 = *(void *)(v39 + 8);
            if ((*(unsigned char *)(*(void *)(v39 + 16) + 10) & 0x10) != 0) {
              goto LABEL_56;
            }
          }
          goto LABEL_31;
        }
      }
    }
    goto LABEL_56;
  }
  int v5 = 0;
LABEL_94:
  int v40 = sub_1CC732868(a1, (uint64_t)v54);
  v42 = *(char **)(a1 + 424);
  v41 = *(char **)(a1 + 432);
  uint64_t v43 = 440;
  if (v41 == v42) {
    uint64_t v43 = 444;
  }
  uint64_t v44 = *(unsigned int *)(a1 + v43);
  v45 = *(llvm::MachineInstr ***)(a1 + 432);
  if (v44)
  {
    uint64_t v46 = 0;
    while (*(void *)&v41[v46] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v46 += 8;
      if (8 * v44 == v46) {
        goto LABEL_109;
      }
    }
    v45 = (llvm::MachineInstr **)&v41[v46];
  }
  v47 = &v41[8 * v44];
  if (v45 != (llvm::MachineInstr **)v47)
  {
    v48 = *v45;
LABEL_104:
    llvm::MachineInstr::eraseFromParent(v48);
    v49 = (unint64_t *)(v45 + 1);
    while (v49 != (unint64_t *)v47)
    {
      unint64_t v50 = *v49++;
      v48 = (llvm::MachineInstr *)v50;
      if (v50 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v45 = (llvm::MachineInstr **)(v49 - 1);
        goto LABEL_104;
      }
    }
    v42 = *(char **)(a1 + 424);
    v41 = *(char **)(a1 + 432);
  }
LABEL_109:
  if (v41 == v42) {
    goto LABEL_110;
  }
  uint64_t v52 = *(unsigned int *)(a1 + 440);
  if (v52 < 0x21 || 4 * (*(_DWORD *)(a1 + 444) - *(_DWORD *)(a1 + 448)) >= v52)
  {
    memset(v41, 255, 8 * v52);
LABEL_110:
    *(void *)(a1 + 444) = 0;
    goto LABEL_111;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 424));
LABEL_111:
  if (v58[0] != v59) {
    free(v58[0]);
  }
  if (v55 != v57) {
    free(v55);
  }
  return (v5 | v40) & 1;
}

uint64_t *sub_1CC732F4C(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 80 * v2;
    int v5 = (void *)(v3 + 24);
    do
    {
      if (*((_DWORD *)v5 - 6) <= 0xFFFFFFFD)
      {
        v6 = (void *)*(v5 - 2);
        if (v5 != v6)
        {
          uint64_t v8 = v5;
          uint64_t v9 = v4;
          free(v6);
          int v5 = v8;
          uint64_t v4 = v9;
        }
      }
      v5 += 10;
      v4 -= 80;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CC732FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

_DWORD *sub_1CC73306C(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(80 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 80 * v5;
      do
      {
        *result = -1;
        result += 20;
        v6 -= 80;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC73310C()
{
}

void *sub_1CC733120()
{
  result = operator new(0x10uLL);
  void *result = &unk_1F261CBC8;
  return result;
}

void sub_1CC733158(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261CBC8;
}

uint64_t sub_1CC733180()
{
  return 0;
}

uint64_t sub_1CC733188(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = (uint64_t *)(a3 + 16 * (a5 & 0x7FFFFFFF) + 8);
  if (a5 >= 0) {
    uint64_t v5 = (uint64_t *)(a4 + 8 * a5);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 193 || *(_DWORD *)(v7 + 40) != 3) {
    return 0;
  }
  uint64_t v9 = *(void *)(v7 + 32);
  *a1 = *(_DWORD *)(v9 + 36);
  *a2 = *(_DWORD *)(v9 + 68);
  return 1;
}

uint64_t sub_1CC733210(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (_DWORD *)(a1 + 80 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (_DWORD *)(a1 + 80 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1CC7332AC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD62C410(a1, v4, v4 + 80 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 80 * v10;
    do
    {
      _DWORD *result = -1;
      result += 20;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

void sub_1CC733384(uint64_t a1)
{
}

double sub_1CC733424(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61BF60;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F261CC10;
  *(void *)(a1 + 272) = a1 + 248;
  *(void *)(a1 + 248) = &unk_1F261CCD0;
  return result;
}

uint64_t sub_1CC7334C4(void *a1, uint64_t a2)
{
  v239[32] = *MEMORY[0x1E4F143B8];
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0) {
    goto LABEL_379;
  }
  unsigned int v3 = a1;
  uint64_t v4 = a1[34];
  if (!v4)
  {
    sub_1CB920400();
    goto LABEL_382;
  }
  uint64_t v2 = a2;
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4))
  {
LABEL_379:
    char v207 = 0;
  }
  else
  {
    v3[35] = *(void *)(v2 + 40);
    unint64_t v5 = (void ***)v3[1];
    unint64_t v6 = *v5;
    int v7 = v5[1];
    if (v6 == v7)
    {
LABEL_383:
      uint64_t v9 = 0;
    }
    else
    {
      unsigned int v8 = &llvm::TargetTransformInfoWrapperPass::ID;
      while (*v6 != v8)
      {
LABEL_382:
        v6 += 2;
        if (v6 == v7) {
          goto LABEL_383;
        }
      }
      uint64_t v9 = v6[1];
    }
    uint64_t v10 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(void *, void *))(*(void *)v9 + 96))(v9, &llvm::TargetTransformInfoWrapperPass::ID);
    v3[36] = llvm::TargetTransformInfoWrapperPass::getTTI(v10, *(const Function **)v2);
    uint64_t v234 = 1;
    uint64_t v11 = 8;
    int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v234 + v11) = v12;
      v11 += 16;
    }
    while (v11 != 264);
    v237 = v239;
    uint64_t v238 = 0x2000000000;
    v229 = 0;
    v230 = 0;
    LODWORD(v231) = 0;
    uint64_t v13 = *(void *)(v2 + 328);
    uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 120))(*(void *)(v2 + 16));
    uint64_t v16 = *(void *)(v13 + 48);
    uint64_t v15 = v13 + 48;
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v17 & 4) == 0)
    {
      while ((*(_WORD *)(v17 + 44) & 4) != 0)
        unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
    }
    v221 = v3;
    if (v17 != v15)
    {
      char v18 = 0;
      uint64_t v216 = v15;
      uint64_t v217 = v2;
      while (1)
      {
        if ((*(unsigned int (**)(uint64_t, unint64_t, void))(*(void *)v14 + 1488))(v14, v17, v3[36]))
        {
          uint64_t v19 = *(unsigned int *)(*(void *)(v17 + 32) + 4);
          uint64_t v20 = v3[35];
          unsigned int v21 = (uint64_t *)((v19 & 0x80000000) != 0
                          ? *(void *)(v20 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                          : *(void *)(v20 + 272) + 8 * v19);
          uint64_t v22 = *v21;
          if (*v21) {
            break;
          }
        }
LABEL_16:
        unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
        if (!v17 || (*(unsigned char *)v17 & 4) == 0)
        {
          while ((*(_WORD *)(v17 + 44) & 4) != 0)
            unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v17 == v15)
        {
          uint64_t v134 = (uint64_t)v229;
          goto LABEL_206;
        }
      }
      while ((*(unsigned char *)(v22 + 3) & 1) != 0)
      {
        uint64_t v22 = *(void *)(v22 + 24);
        if (!v22) {
          goto LABEL_16;
        }
      }
      uint64_t v223 = *(unsigned int *)(*(void *)(v17 + 32) + 4);
      unint64_t v224 = ~((unint64_t)(37 * v19) << 32) + (37 * v19);
      uint64_t v218 = v19 & 0x7FFFFFFF;
      unsigned int v215 = (v17 >> 4) ^ (v17 >> 9);
      while (1)
      {
        uint64_t v23 = v22;
        do
          uint64_t v22 = *(void *)(v22 + 24);
        while (v22 && (*(unsigned char *)(v22 + 3) & 1) != 0);
        uint64_t v24 = *(void *)(v23 + 8);
        int v25 = **(unsigned __int16 **)(v24 + 16);
        BOOL v26 = v25 == 69 || v25 == 0;
        v27 = (uint64_t *)(v26
                        ? *(void *)(v24 + 32)
                        + 32 * (((unint64_t)(v23 - *(void *)(v24 + 32)) >> 5) + 1)
                        + 16
                        : v24 + 24);
        uint64_t v28 = *v27;
        if (*v27 != *(void *)(v17 + 24)) {
          break;
        }
        unint64_t v228 = v17;
        if (v234)
        {
          int v104 = 32;
          v105 = &v235;
        }
        else
        {
          int v104 = v236;
          if (!v236)
          {
            v114 = 0;
LABEL_169:
            v115 = sub_1CBAA320C((uint64_t)&v234, (uint64_t)&v228, &v228, v114);
            void *v115 = v228;
            if (v238 >= (unint64_t)HIDWORD(v238)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v237 + v238) = v228;
            LODWORD(v238) = v238 + 1;
            uint64_t v19 = v223;
            goto LABEL_58;
          }
          v105 = v235;
        }
        int v106 = v104 - 1;
        unsigned int v107 = v106 & v215;
        v108 = &v105[v106 & v215];
        uint64_t v109 = *v108;
        if (v17 != *v108)
        {
          v110 = 0;
          int v111 = 1;
          while (v109 != -4096)
          {
            if (v110) {
              BOOL v112 = 0;
            }
            else {
              BOOL v112 = v109 == -8192;
            }
            if (v112) {
              v110 = v108;
            }
            unsigned int v113 = v107 + v111++;
            unsigned int v107 = v113 & v106;
            v108 = &v105[v107];
            uint64_t v109 = *v108;
            if (v17 == *v108) {
              goto LABEL_58;
            }
          }
          if (v110) {
            v114 = v110;
          }
          else {
            v114 = v108;
          }
          goto LABEL_169;
        }
LABEL_58:
        if (!v22) {
          goto LABEL_16;
        }
      }
      if (v25 == 69 || v25 == 0)
      {
        unsigned int v100 = *(_DWORD *)(v24 + 40);
        if (v100 >= 2)
        {
          uint64_t v101 = *(void *)(v24 + 32);
          for (unsigned int i = 1; i < v100; i += 2)
          {
            v103 = (unsigned char *)(v101 + 32 * i);
            if (v103 != (unsigned char *)v23 && !*v103 && *(_DWORD *)(v101 + 32 * i + 4) == *(_DWORD *)(v23 + 4)) {
              goto LABEL_58;
            }
          }
        }
      }
      if (v231)
      {
        unint64_t v30 = v224 + ((unint64_t)((v28 >> 4) ^ (v28 >> 9)) << 32);
        unint64_t v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
        unint64_t v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
        int v33 = v231 - 1;
        unsigned int v34 = (v231 - 1) & (((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~(v32 << 27)));
        v35 = &v229[24 * v34];
        uint64_t v36 = *(void *)v35;
        int v37 = *((_DWORD *)v35 + 2);
        if (v28 == *(void *)v35 && v19 == v37)
        {
LABEL_56:
          if (v35 != &v229[24 * v231])
          {
LABEL_57:
            llvm::MachineOperand::setReg(v23, *((_DWORD *)v35 + 4));
            char v18 = 1;
            goto LABEL_58;
          }
          unsigned int v220 = v28 >> 4;
          uint64_t v225 = *v27;
          unint64_t v227 = 0;
          uint64_t v222 = v23;
          unint64_t v42 = llvm::MachineFunction::CloneMachineInstr((llvm::MachineFunction *)v2, (const llvm::MachineInstr *)v17);
          unint64_t v227 = v42;
          if (v234)
          {
            int v43 = 32;
            v45 = &v235;
            unint64_t v44 = v218;
          }
          else
          {
            int v43 = v236;
            unint64_t v44 = v218;
            if (!v236)
            {
              v55 = 0;
              goto LABEL_76;
            }
            v45 = v235;
          }
          uint64_t v46 = (void *)v225;
          int v47 = v43 - 1;
          unsigned int v48 = v47 & ((v42 >> 4) ^ (v42 >> 9));
          v49 = &v45[v48];
          uint64_t v50 = *v49;
          if (v42 == *v49)
          {
LABEL_78:
            v57 = *(unint64_t **)(v222 + 8);
            uint64_t v58 = v3[35];
            if ((v19 & 0x80000000) != 0) {
              v59 = (uint64_t *)(*(void *)(v58 + 24) + 16 * v44 + 8);
            }
            else {
              v59 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v19);
            }
            uint64_t v60 = *v59;
            if (!v60) {
              goto LABEL_86;
            }
            while ((*(unsigned char *)(v60 + 3) & 1) != 0)
            {
              uint64_t v60 = *(void *)(v60 + 24);
              if (!v60) {
                goto LABEL_86;
              }
            }
            while (1)
            {
              uint64_t v60 = *(void *)(v60 + 24);
              if (!v60) {
                break;
              }
              if ((*(unsigned char *)(v60 + 3) & 1) == 0) {
                goto LABEL_86;
              }
            }
            int v116 = *(unsigned __int16 *)v57[2];
            if (v116 == 69 || v116 == 0)
            {
LABEL_86:
              v61 = v46 + 6;
              v57 = (unint64_t *)v46[7];
              uint64_t v62 = (*(uint64_t (**)(void))(**(void **)(v46[4] + 16) + 104))(*(void *)(v46[4] + 16));
              if (v61 == v57)
              {
                uint64_t v46 = (void *)v225;
              }
              else
              {
                uint64_t v63 = v62;
                uint64_t v46 = (void *)v225;
                while (1)
                {
                  int v64 = *(unsigned __int16 *)v57[2];
                  if (*(_WORD *)v57[2])
                  {
                    if (v64 != 69 && (v64 - 3) >= 4)
                    {
                      int v65 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v63 + 1144))(v63, v57);
                      uint64_t v46 = (void *)v225;
                      if (!v65) {
                        break;
                      }
                    }
                  }
                  if ((*(unsigned char *)v57 & 4) == 0)
                  {
                    while ((*((_WORD *)v57 + 22) & 8) != 0)
                      v57 = (unint64_t *)v57[1];
                  }
                  v57 = (unint64_t *)v57[1];
                  if (v57 == v61)
                  {
                    v57 = v61;
                    break;
                  }
                }
              }
            }
            unint64_t v66 = v227;
            uint64_t v67 = v46[5];
            *(void *)(v227 + 24) = v67;
            uint64_t v68 = *(void *)(v67 + 32);
            uint64_t v69 = *(unsigned int *)(v66 + 40);
            if (v69)
            {
              uint64_t v118 = *(void *)(v66 + 32);
              uint64_t v119 = *(void *)(v68 + 40);
              uint64_t v120 = 32 * v69;
              do
              {
                if (!*(unsigned char *)v118)
                {
                  uint64_t v121 = *(unsigned int *)(v118 + 4);
                  if ((int)v121 >= 0) {
                    v122 = (uint64_t *)(*(void *)(v119 + 272) + 8 * v121);
                  }
                  else {
                    v122 = (uint64_t *)(*(void *)(v119 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v123 = *v122;
                  if (*v122)
                  {
                    uint64_t v124 = *(void *)(v123 + 16);
                    *(void *)(v123 + 16) = v118;
                    *(void *)(v118 + 16) = v124;
                    if (*(unsigned char *)(v118 + 3))
                    {
                      *(void *)(v118 + 24) = v123;
                    }
                    else
                    {
                      *(void *)(v118 + 24) = 0;
                      v122 = (uint64_t *)(v124 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v118 + 16) = v118;
                    *(void *)(v118 + 24) = 0;
                  }
                  uint64_t *v122 = v118;
                }
                v118 += 32;
                v120 -= 32;
              }
              while (v120);
            }
            uint64_t v70 = *(void *)(v68 + 728);
            if (v70) {
              (*(void (**)(uint64_t, unint64_t))(*(void *)v70 + 24))(v70, v66);
            }
            unint64_t v71 = *v57 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v66 = v71 | *(void *)v66 & 7;
            *(void *)(v66 + 8) = v57;
            *(void *)(v71 + 8) = v66;
            unint64_t *v57 = *v57 & 7 | v66;
            uint64_t v72 = v3[35];
            uint64_t v73 = 0;
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v72, "", 0);
            unsigned int v74 = IncompleteVirtualRegister;
            unint64_t v75 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(v72 + 24) + 16 * v75) = *(void *)(*(void *)(v72 + 24) + 16 * v44);
            unint64_t v76 = *(unsigned int *)(v72 + 432);
            if ((v223 & 0x80000000) != 0 && v44 < v76) {
              uint64_t v73 = *(void *)(*(void *)(v72 + 424) + 8 * v44);
            }
            if (v75 >= v76)
            {
              unint64_t v77 = v75 + 1;
              uint64_t v78 = *(void *)(v72 + 440);
              if (v75 >= *(unsigned int *)(v72 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v79 = *(_DWORD *)(v72 + 432);
              if (v77 != v76)
              {
                v80 = (void *)(*(void *)(v72 + 424) + 8 * *(unsigned int *)(v72 + 432));
                unint64_t v81 = ~v75 + v76;
                do
                  *v80++ = v78;
                while (!__CFADD__(v81++, 1));
                int v79 = *(_DWORD *)(v72 + 432);
              }
              *(_DWORD *)(v72 + 432) = v79 + v77 - v76;
            }
            *(void *)(*(void *)(v72 + 424) + 8 * v75) = v73;
            uint64_t v83 = *(void *)(v72 + 8);
            uint64_t v2 = v217;
            if (v83)
            {
              (*(void (**)(uint64_t))(*(void *)v83 + 24))(v83);
              unsigned int v74 = IncompleteVirtualRegister;
            }
            llvm::MachineOperand::setReg(*(void *)(v227 + 32), v74);
            unsigned int v3 = v221;
            uint64_t v15 = v216;
            uint64_t v19 = v223;
            if (v231)
            {
              uint64_t v84 = v225;
              unint64_t v85 = v224 + ((unint64_t)(v220 ^ (v225 >> 9)) << 32);
              unint64_t v86 = (v85 ^ (v85 >> 22)) + ~((v85 ^ (v85 >> 22)) << 13);
              unint64_t v87 = (9 * (v86 ^ (v86 >> 8))) ^ ((9 * (v86 ^ (v86 >> 8))) >> 15);
              int v88 = v231 - 1;
              unsigned int v89 = (v231 - 1) & (((v87 + ~(v87 << 27)) >> 31) ^ (v87 + ~(v87 << 27)));
              v35 = &v229[24 * v89];
              uint64_t v90 = *(void *)v35;
              int v91 = *((_DWORD *)v35 + 2);
              BOOL v92 = v225 == *(void *)v35 && v223 == v91;
              uint64_t v23 = v222;
              if (v92) {
                goto LABEL_57;
              }
              v93 = 0;
              int v94 = 1;
              while (v90 != -4096 || v91 != -1)
              {
                if (v93) {
                  BOOL v95 = 0;
                }
                else {
                  BOOL v95 = v91 == -2;
                }
                if (v95 && v90 == -8192) {
                  v93 = v35;
                }
                unsigned int v97 = v89 + v94++;
                unsigned int v89 = v97 & v88;
                v35 = &v229[24 * (v97 & v88)];
                uint64_t v90 = *(void *)v35;
                int v91 = *((_DWORD *)v35 + 2);
                if (v225 == *(void *)v35 && v223 == v91) {
                  goto LABEL_57;
                }
              }
              if (v93) {
                v35 = v93;
              }
            }
            else
            {
              v35 = 0;
              uint64_t v23 = v222;
              uint64_t v84 = v225;
            }
            if (4 * (int)v230 + 4 >= (3 * v231))
            {
              sub_1CBF8FC94((uint64_t *)&v229, 2 * v231);
              if (v231)
              {
                uint64_t v84 = v225;
                unint64_t v209 = v224 + ((unint64_t)(v220 ^ (v225 >> 9)) << 32);
                unint64_t v210 = (v209 ^ (v209 >> 22)) + ~((v209 ^ (v209 >> 22)) << 13);
                unint64_t v211 = (9 * (v210 ^ (v210 >> 8))) ^ ((9 * (v210 ^ (v210 >> 8))) >> 15);
                int v212 = ((v211 + ~(v211 << 27)) >> 31) ^ (v211 + ~(v211 << 27));
                int v213 = v231 - 1;
                unsigned int v130 = (v231 - 1) & v212;
                v35 = &v229[24 * v130];
                uint64_t v131 = *(void *)v35;
                int v132 = *((_DWORD *)v35 + 2);
                BOOL v214 = v225 == *(void *)v35 && v223 == v132;
                uint64_t v23 = v222;
                if (!v214)
                {
                  v127 = 0;
                  int v129 = 1;
                  while (v131 != -4096 || v132 != -1)
                  {
                    if (v127) {
                      BOOL v125 = 0;
                    }
                    else {
                      BOOL v125 = v132 == -2;
                    }
                    if (v125 && v131 == -8192) {
                      v127 = v35;
                    }
                    unsigned int v128 = v130 + v129++;
                    unsigned int v130 = v128 & v213;
                    v35 = &v229[24 * (v128 & v213)];
                    uint64_t v131 = *(void *)v35;
                    int v132 = *((_DWORD *)v35 + 2);
                    if (v225 == *(void *)v35 && v223 == v132) {
                      goto LABEL_139;
                    }
                  }
                  if (v127) {
                    v35 = v127;
                  }
                }
              }
              else
              {
                v35 = 0;
                uint64_t v23 = v222;
                uint64_t v84 = v225;
              }
            }
            else if ((int)v231 + ~v230 - HIDWORD(v230) <= v231 >> 3)
            {
              sub_1CBF8FC94((uint64_t *)&v229, v231);
              unint64_t v228 = 0;
              sub_1CC734A34((uint64_t)v229, v231, v225, v223, &v228);
              uint64_t v84 = v225;
              uint64_t v23 = v222;
              v35 = (unsigned char *)v228;
            }
LABEL_139:
            LODWORD(v230) = v230 + 1;
            if (*(void *)v35 != -4096 || *((_DWORD *)v35 + 2) != -1) {
              --HIDWORD(v230);
            }
            *(void *)v35 = v84;
            *((_DWORD *)v35 + 2) = v223;
            *((_DWORD *)v35 + 4) = IncompleteVirtualRegister;
            goto LABEL_57;
          }
          v51 = 0;
          int v52 = 1;
          while (v50 != -4096)
          {
            if (v51) {
              BOOL v53 = 0;
            }
            else {
              BOOL v53 = v50 == -8192;
            }
            if (v53) {
              v51 = v49;
            }
            unsigned int v54 = v48 + v52++;
            unsigned int v48 = v54 & v47;
            v49 = &v45[v48];
            uint64_t v50 = *v49;
            if (v42 == *v49) {
              goto LABEL_78;
            }
          }
          if (v51) {
            v55 = v51;
          }
          else {
            v55 = v49;
          }
LABEL_76:
          uint64_t v56 = sub_1CBAA320C((uint64_t)&v234, (uint64_t)&v227, &v227, v55);
          *uint64_t v56 = v227;
          if (v238 >= (unint64_t)HIDWORD(v238)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v237 + v238) = v227;
          LODWORD(v238) = v238 + 1;
          uint64_t v19 = v223;
          uint64_t v46 = (void *)v225;
          goto LABEL_78;
        }
        int v39 = 1;
        while (v36 != -4096 || v37 != -1)
        {
          unsigned int v40 = v34 + v39++;
          unsigned int v34 = v40 & v33;
          v35 = &v229[24 * (v40 & v33)];
          uint64_t v36 = *(void *)v35;
          int v37 = *((_DWORD *)v35 + 2);
          if (v28 == *(void *)v35 && v19 == v37) {
            goto LABEL_56;
          }
        }
      }
      v35 = &v229[24 * v231];
      goto LABEL_56;
    }
    uint64_t v134 = 0;
    char v18 = 0;
LABEL_206:
    MEMORY[0x1D25D9CD0](v134, 8);
    v135 = (char *)v237;
    if (v238)
    {
      char v136 = 0;
      v226 = (char *)v237 + 8 * v238;
      do
      {
        uint64_t v137 = *(void *)v135;
        uint64_t v138 = *(void *)(*(void *)v135 + 24);
        uint64_t v139 = *(unsigned int *)(*(void *)(*(void *)v135 + 32) + 4);
        v229 = v233;
        v230 = v233;
        uint64_t v231 = 32;
        int v232 = 0;
        uint64_t v140 = v221[35];
        if ((v139 & 0x80000000) != 0) {
          v141 = (uint64_t *)(*(void *)(v140 + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
        }
        else {
          v141 = (uint64_t *)(*(void *)(v140 + 272) + 8 * v139);
        }
        uint64_t v142 = *v141;
        if (*v141)
        {
          while ((*(_DWORD *)v142 & 0x81000000) != 0)
          {
            uint64_t v142 = *(void *)(v142 + 24);
            if (!v142) {
              goto LABEL_322;
            }
          }
          unsigned int v143 = 0;
          uint64_t v144 = *(void *)(v142 + 8);
          unsigned int v145 = 32;
          v146 = v233;
          v147 = v233;
LABEL_215:
          int v148 = **(unsigned __int16 **)(v144 + 16);
          if (v148 != 69 && v148 != 0)
          {
            if (v147 == v146)
            {
              if (v143)
              {
                v150 = 0;
                uint64_t v151 = 8 * v143;
                v152 = v146;
                do
                {
                  if (*v152 == v144) {
                    goto LABEL_229;
                  }
                  if (*v152 == -2) {
                    v150 = v152;
                  }
                  ++v152;
                  v151 -= 8;
                }
                while (v151);
                if (v150)
                {
                  void *v150 = v144;
                  --v232;
                  goto LABEL_229;
                }
              }
              if (v145 > v143)
              {
                HIDWORD(v231) = v143 + 1;
                *(void *)&v146[8 * v143] = v144;
                goto LABEL_229;
              }
            }
            if (3 * v145 <= 4 * (v143 - v232))
            {
              if (v145 >= 0x40) {
                v145 *= 2;
              }
              else {
                unsigned int v145 = 128;
              }
            }
            else if (v145 - v143 >= v145 >> 3)
            {
              goto LABEL_236;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v229, v145);
            unsigned int v145 = v231;
            v147 = v230;
LABEL_236:
            unsigned int v154 = v145 - 1;
            unsigned int v155 = (v145 - 1) & ((v144 >> 4) ^ (v144 >> 9));
            v156 = &v147[8 * v155];
            uint64_t v157 = *v156;
            if (*v156 == -1)
            {
              v158 = 0;
LABEL_249:
              if (v158) {
                v156 = v158;
              }
              if (*v156 != v144)
              {
                if (*v156 == -2) {
                  --v232;
                }
                else {
                  ++HIDWORD(v231);
                }
                void *v156 = v144;
              }
            }
            else
            {
              v158 = 0;
              int v159 = 1;
              while (v157 != v144)
              {
                if (v158) {
                  BOOL v160 = 0;
                }
                else {
                  BOOL v160 = v157 == -2;
                }
                if (v160) {
                  v158 = v156;
                }
                unsigned int v161 = v155 + v159++;
                unsigned int v155 = v161 & v154;
                v156 = &v147[8 * (v161 & v154)];
                uint64_t v157 = *v156;
                if (*v156 == -1) {
                  goto LABEL_249;
                }
              }
            }
LABEL_229:
            v146 = v229;
            v147 = v230;
            unsigned int v145 = v231;
            unsigned int v143 = HIDWORD(v231);
            uint64_t v153 = *(void *)(v142 + 8);
            goto LABEL_230;
          }
          uint64_t v153 = v144;
LABEL_230:
          while (1)
          {
            uint64_t v142 = *(void *)(v142 + 24);
            if (!v142) {
              break;
            }
            if ((*(_DWORD *)v142 & 0x81000000) == 0)
            {
              uint64_t v144 = *(void *)(v142 + 8);
              if (v144 != v153) {
                goto LABEL_215;
              }
            }
          }
          if (v143 != v232)
          {
            if (!v137 || (uint64_t v162 = v137, (*(unsigned char *)v137 & 4) == 0))
            {
              uint64_t v162 = v137;
              if ((*(_WORD *)(v137 + 44) & 8) != 0)
              {
                uint64_t v162 = v137;
                do
                  uint64_t v162 = *(void *)(v162 + 8);
                while ((*(_WORD *)(v162 + 44) & 8) != 0);
              }
            }
            uint64_t v163 = *(void *)(v162 + 8);
            if (v163 != v138 + 48)
            {
              int v164 = 0;
              unsigned int v165 = v145 - 1;
              if (v147 == v146) {
                unsigned int v166 = v143;
              }
              else {
                unsigned int v166 = v145;
              }
              v167 = &v147[8 * v166];
              unsigned int v168 = v143;
              v169 = v147;
              while (1)
              {
                if (v169 == v146)
                {
                  v170 = &v146[8 * v168];
                  if (v168)
                  {
                    uint64_t v171 = 0;
                    while (*(void *)&v146[v171] != v163)
                    {
                      v171 += 8;
                      if (8 * v168 == v171) {
                        goto LABEL_269;
                      }
                    }
                    v170 = &v146[v171];
                  }
LABEL_269:
                  v169 = v146;
                }
                else
                {
                  unsigned int v173 = ((v163 >> 4) ^ (v163 >> 9)) & v165;
                  v174 = &v147[8 * v173];
                  uint64_t v175 = *v174;
                  if (*v174 == -1)
                  {
                    v176 = 0;
LABEL_298:
                    if (v176) {
                      v174 = v176;
                    }
                    uint64_t v180 = *v174;
                  }
                  else
                  {
                    v176 = 0;
                    int v177 = 1;
                    while (v175 != v163)
                    {
                      if (v176) {
                        BOOL v178 = 0;
                      }
                      else {
                        BOOL v178 = v175 == -2;
                      }
                      if (v178) {
                        v176 = v174;
                      }
                      unsigned int v179 = v173 + v177++;
                      unsigned int v173 = v179 & v165;
                      v174 = &v147[8 * (v179 & v165)];
                      uint64_t v175 = *v174;
                      if (*v174 == -1) {
                        goto LABEL_298;
                      }
                    }
                    uint64_t v180 = v163;
                  }
                  v170 = v180 == v163 ? v174 : v167;
                  unsigned int v168 = v143;
                  v169 = v147;
                }
                unsigned int v172 = v169 == v146 ? v168 : v145;
                if (v170 != &v169[8 * v172]) {
                  break;
                }
                if (++v164 > dword_1EBCD9FB0)
                {
                  v147 = v169;
                  goto LABEL_320;
                }
                if (!v163 || (*(unsigned char *)v163 & 4) == 0)
                {
                  while ((*(_WORD *)(v163 + 44) & 8) != 0)
                    uint64_t v163 = *(void *)(v163 + 8);
                }
                uint64_t v163 = *(void *)(v163 + 8);
                if (v163 == v138 + 48)
                {
                  uint64_t v163 = v138 + 48;
                  break;
                }
              }
            }
            uint64_t v181 = *(void *)(*(void *)(v137 + 24) + 32);
            if (v181)
            {
              uint64_t v182 = *(void *)(v181 + 728);
              if (v182) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v182 + 32))(v182, v137);
              }
              uint64_t v183 = *(unsigned int *)(v137 + 40);
              if (v183)
              {
                uint64_t v184 = *(void *)(v137 + 32);
                uint64_t v185 = *(void *)(v181 + 40);
                uint64_t v186 = 32 * v183;
                do
                {
                  if (!*(unsigned char *)v184)
                  {
                    uint64_t v187 = *(unsigned int *)(v184 + 4);
                    if ((v187 & 0x80000000) != 0) {
                      v188 = (uint64_t *)(*(void *)(v185 + 24) + 16 * (v187 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v188 = (uint64_t *)(*(void *)(v185 + 272) + 8 * v187);
                    }
                    uint64_t v189 = *v188;
                    uint64_t v191 = *(void *)(v184 + 16);
                    uint64_t v190 = *(void *)(v184 + 24);
                    if (v184 != *v188) {
                      v188 = (uint64_t *)(v191 + 24);
                    }
                    uint64_t *v188 = v190;
                    if (v190) {
                      uint64_t v192 = v190;
                    }
                    else {
                      uint64_t v192 = v189;
                    }
                    *(void *)(v192 + 16) = v191;
                    *(void *)(v184 + 16) = 0;
                    *(void *)(v184 + 24) = 0;
                  }
                  v184 += 32;
                  v186 -= 32;
                }
                while (v186);
              }
            }
            v193 = *(unint64_t **)(v137 + 8);
            unint64_t v194 = *(void *)v137 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v193 = v194 | *v193 & 7;
            *(void *)(v194 + 8) = v193;
            *(void *)v137 &= 7uLL;
            *(void *)(v137 + 8) = 0;
            uint64_t v195 = *(void *)(v138 + 40);
            *(void *)(v137 + 24) = v195;
            uint64_t v196 = *(void *)(v195 + 32);
            uint64_t v197 = *(unsigned int *)(v137 + 40);
            if (v197)
            {
              uint64_t v200 = *(void *)(v137 + 32);
              uint64_t v201 = *(void *)(v196 + 40);
              uint64_t v202 = 32 * v197;
              do
              {
                if (!*(unsigned char *)v200)
                {
                  uint64_t v203 = *(unsigned int *)(v200 + 4);
                  if ((int)v203 >= 0) {
                    v204 = (uint64_t *)(*(void *)(v201 + 272) + 8 * v203);
                  }
                  else {
                    v204 = (uint64_t *)(*(void *)(v201 + 24) + 16 * (v203 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v205 = *v204;
                  if (*v204)
                  {
                    uint64_t v206 = *(void *)(v205 + 16);
                    *(void *)(v205 + 16) = v200;
                    *(void *)(v200 + 16) = v206;
                    if (*(unsigned char *)(v200 + 3))
                    {
                      *(void *)(v200 + 24) = v205;
                    }
                    else
                    {
                      *(void *)(v200 + 24) = 0;
                      v204 = (uint64_t *)(v206 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v200 + 16) = v200;
                    *(void *)(v200 + 24) = 0;
                  }
                  uint64_t *v204 = v200;
                }
                v200 += 32;
                v202 -= 32;
              }
              while (v202);
            }
            uint64_t v198 = *(void *)(v196 + 728);
            if (v198) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v198 + 24))(v198, v137);
            }
            unint64_t v199 = *(void *)v163 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v137 = v199 | *(void *)v137 & 7;
            *(void *)(v137 + 8) = v163;
            *(void *)(v199 + 8) = v137;
            *(void *)uint64_t v163 = *(void *)v163 & 7 | v137;
            char v136 = 1;
            v146 = v229;
            v147 = v230;
          }
LABEL_320:
          if (v147 != v146) {
            free(v147);
          }
        }
LABEL_322:
        v135 += 8;
      }
      while (v135 != v226);
      v135 = (char *)v237;
    }
    else
    {
      char v136 = 0;
    }
    if (v135 != (char *)v239) {
      free(v135);
    }
    char v207 = v18 | v136;
    if ((v234 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v235, 8);
    }
  }
  return v207 & 1;
}

void sub_1CC734738(llvm::Pass *this)
{
  *(void *)this = &unk_1F261CC10;
  uint64_t v2 = (char *)this + 248;
  unsigned int v3 = (char *)*((void *)this + 34);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v4 = (char *)*((void *)this + 22);
  if (v4 != (char *)this + 192) {
    free(v4);
  }
  unint64_t v5 = (char *)*((void *)this + 13);
  if (v5 != (char *)this + 120) {
    free(v5);
  }
  unint64_t v6 = (char *)*((void *)this + 4);
  if (v6 != (char *)this + 48) {
    free(v6);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC734850(llvm::Pass *this)
{
  *(void *)this = &unk_1F261CC10;
  uint64_t v2 = (char *)this + 248;
  unsigned int v3 = (char *)*((void *)this + 34);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v4 = (char *)*((void *)this + 22);
  if (v4 != (char *)this + 192) {
    free(v4);
  }
  unint64_t v5 = (char *)*((void *)this + 13);
  if (v5 != (char *)this + 120) {
    free(v5);
  }
  unint64_t v6 = (char *)*((void *)this + 4);
  if (v6 != (char *)this + 48) {
    free(v6);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC73497C()
{
  return "Localizer";
}

double sub_1CC73498C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

void sub_1CC7349B8()
{
}

void *sub_1CC7349CC()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1F261CCD0;
  return result;
}

void sub_1CC734A04(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261CCD0;
}

uint64_t sub_1CC734A2C()
{
  return 0;
}

uint64_t sub_1CC734A34(uint64_t result, int a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (uint64_t *)(result + 24 * v9);
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (*v10 != a3 || v12 != a4)
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -2;
        }
        if (v16 && v11 == -8192) {
          uint64_t v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        uint64_t v10 = (uint64_t *)(result + 24 * (v18 & v8));
        uint64_t v11 = *v10;
        int v12 = *((_DWORD *)v10 + 2);
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_25;
        }
      }
      if (v14) {
        uint64_t v10 = v14;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_25:
  *a5 = v10;
  return result;
}

uint64_t sub_1CC734B14()
{
  *(void *)&long long v4 = "Max number of unrelated insts to scan over during intra-block localization.";
  *((void *)&v4 + 1) = 75;
  unsigned int v3 = &v2;
  int v1 = 1;
  int v2 = 10000;
  sub_1CD50BCD4((uint64_t)&unk_1EBCD9F30, "localizer-intrablock-scan-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD9F30, &dword_1CB82C000);
}

void sub_1CC734BA0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 || *(void *)(a1 + 152)) && *(_DWORD *)(a1 + 180) != *(_DWORD *)(a1 + 184))
  {
    uint64_t v14 = v18;
    int v15 = v18;
    uint64_t v16 = 4;
    int v17 = 0;
    uint64_t v2 = *(void *)(a1 + 168);
    uint64_t v3 = 176;
    if (v2 == *(void *)(a1 + 160)) {
      uint64_t v3 = 180;
    }
    uint64_t v5 = *(unsigned int *)(a1 + v3);
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      unint64_t v7 = *(uint64_t **)(a1 + 168);
      while ((unint64_t)*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v7;
        v6 -= 8;
        if (!v6) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      unint64_t v7 = *(uint64_t **)(a1 + 168);
    }
    int v8 = (void *)(v2 + 8 * v5);
    if (v7 != v8)
    {
      uint64_t v9 = *v7;
LABEL_15:
      if (*(void *)(v9 + 56))
      {
        if (!llvm::DebugLoc::getLine((llvm::DebugLoc *)(v9 + 56)))
        {
LABEL_31:
          if (v15 != v14) {
            free(v15);
          }
          return;
        }
        if (sub_1CC734CF8(a1 + 88, (llvm::DebugLoc *)(v9 + 56))) {
          sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v14, v9);
        }
      }
      uint64_t v10 = (unint64_t *)(v7 + 1);
      while (v10 != v8)
      {
        unint64_t v11 = *v10++;
        uint64_t v9 = v11;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v7 = (uint64_t *)(v10 - 1);
          goto LABEL_15;
        }
      }
      int v1 = *(_DWORD *)(a1 + 96);
    }
LABEL_24:
    uint64_t v12 = *(void *)(a1 + 152);
    if (v1) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v12 == 0;
    }
    if (!v13)
    {
      if (v12) {
        int v1 = *(void *)(a1 + 152);
      }
      *(_DWORD *)(a1 + 224) += v1;
    }
    goto LABEL_31;
  }
}

uint64_t sub_1CC734CF8(uint64_t a1, llvm::DebugLoc *a2)
{
  if (!*(void *)(a1 + 64))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4)
    {
      uint64_t v5 = *(unsigned __int8 ***)a1;
      uint64_t v6 = *(unsigned __int8 **)a2;
      uint64_t v7 = 8 * v4;
      while (*v5 != v6)
      {
        ++v5;
        v7 -= 8;
        if (!v7) {
          return 0;
        }
      }
      sub_1CD62CB14((uint64_t *)a1, v5);
      return 1;
    }
    return 0;
  }
  uint64_t v9 = sub_1CD62CBA8(a1 + 48, a2);
  if ((uint64_t *)(a1 + 56) == v9) {
    return 0;
  }
  sub_1CD62CC44((uint64_t **)(a1 + 48), v9);
  return 1;
}

uint64_t sub_1CC734D90(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CD18;
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2 != *(void **)(a1 + 160)) {
    free(v2);
  }
  sub_1CC715554(a1 + 136, *(void **)(a1 + 144));
  sub_1CC7155C8((void **)(a1 + 88));
  *(void *)a1 = &unk_1F25F0A58;
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3 != *(void **)(a1 + 8)) {
    free(v3);
  }
  return a1;
}

uint64_t sub_1CC734E30(void *a1, uint64_t a2)
{
  a1[1] = a2;
  a1[5] = 0;
  a1[3] = *(void *)(a2 + 40);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  a1[2] = result;
  unint64_t v11 = 0;
  uint64_t v4 = (unsigned __int8 **)(a1 + 4);
  if (&v11 != a1 + 4)
  {
    uint64_t v5 = *v4;
    if (!*v4)
    {
LABEL_3:
      *uint64_t v4 = 0;
      goto LABEL_4;
    }
    int v6 = *v5;
    if ((v6 - 4) > 0x1E)
    {
      if ((v6 - 3) >= 0xFFFFFFFE) {
        uint64_t v9 = *v4;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v6 - 3) <= 0xFFFFFFFD)
      {
        if (v6 == 3) {
          *((void *)v5 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v8 = (unint64_t)(v9 + 8);
    }
    else
    {
      if ((v5[1] & 0x7F) != 2 && !*((_DWORD *)v5 + 3)) {
        goto LABEL_3;
      }
      uint64_t v7 = *((void *)v5 + 2);
      if ((v7 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v8) {
        goto LABEL_3;
      }
    }
    uint64_t v12 = a1 + 4;
    uint64_t result = sub_1CC5FA668(v8 + 16, &v12);
    uint64_t v10 = v11;
    *uint64_t v4 = v11;
    if (v10) {
      uint64_t result = llvm::MetadataTracking::retrack((uint64_t)&v11, v10, (uint64_t)(a1 + 4));
    }
  }
LABEL_4:
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

llvm::MachineFunction *sub_1CC734F48(void *a1, unsigned int a2)
{
  uint64_t v2 = (llvm::MachineFunction *)a1[1];
  uint64_t v3 = *(void *)(a1[2] + 8) + 48 * a2;
  uint64_t v4 = (unsigned __int8 *)a1[4];
  int v6 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v6, v4, 2);
  }
  llvm::MachineFunction::CreateMachineInstr(v2, v3, &v6, 0);
  if (v6) {
    llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
  return v2;
}

uint64_t sub_1CC734FCC(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = (uint64_t *)a1[6];
  uint64_t v7 = *(void *)(a1[5] + 40);
  *(void *)(a3 + 24) = v7;
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned int *)(a3 + 40);
  if (v9)
  {
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v15 = *(void *)(v8 + 40);
    uint64_t v16 = 32 * v9;
    do
    {
      if (!*(unsigned char *)v14)
      {
        uint64_t v17 = *(unsigned int *)(v14 + 4);
        if ((int)v17 >= 0) {
          unsigned int v18 = (uint64_t *)(*(void *)(v15 + 272) + 8 * v17);
        }
        else {
          unsigned int v18 = (uint64_t *)(*(void *)(v15 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
        }
        uint64_t v19 = *v18;
        if (*v18)
        {
          uint64_t v20 = *(void *)(v19 + 16);
          *(void *)(v19 + 16) = v14;
          *(void *)(v14 + 16) = v20;
          if (*(unsigned char *)(v14 + 3))
          {
            *(void *)(v14 + 24) = v19;
          }
          else
          {
            *(void *)(v14 + 24) = 0;
            unsigned int v18 = (uint64_t *)(v20 + 24);
          }
        }
        else
        {
          *(void *)(v14 + 16) = v14;
          *(void *)(v14 + 24) = 0;
        }
        uint64_t *v18 = v14;
      }
      v14 += 32;
      v16 -= 32;
    }
    while (v16);
  }
  uint64_t v10 = *(void *)(v8 + 728);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a3);
  }
  unint64_t v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
  *(void *)a3 = v11 | *(void *)a3 & 7;
  *(void *)(a3 + 8) = v6;
  *(void *)(v11 + 8) = a3;
  uint64_t *v6 = *v6 & 7 | a3;
  uint64_t v12 = a1[7];
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, a3);
  }
  return a2;
}

llvm::MachineFunction *sub_1CC73512C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v6 = llvm::BuildMI(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 624, 0, a2, a3, a4);
  uint64_t v7 = (unint64_t *)v5;
  uint64_t v8 = *(unint64_t **)(a1 + 48);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 40);
  *(void *)(v5 + 24) = v9;
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int *)(v5 + 40);
  if (v11)
  {
    uint64_t v16 = *(void *)(v5 + 32);
    uint64_t v17 = *(void *)(v10 + 40);
    uint64_t v18 = 32 * v11;
    do
    {
      if (!*(unsigned char *)v16)
      {
        uint64_t v19 = *(unsigned int *)(v16 + 4);
        if ((int)v19 >= 0) {
          uint64_t v20 = (uint64_t *)(*(void *)(v17 + 272) + 8 * v19);
        }
        else {
          uint64_t v20 = (uint64_t *)(*(void *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        }
        uint64_t v21 = *v20;
        if (*v20)
        {
          uint64_t v22 = *(void *)(v21 + 16);
          *(void *)(v21 + 16) = v16;
          *(void *)(v16 + 16) = v22;
          if (*(unsigned char *)(v16 + 3))
          {
            *(void *)(v16 + 24) = v21;
          }
          else
          {
            *(void *)(v16 + 24) = 0;
            uint64_t v20 = (uint64_t *)(v22 + 24);
          }
        }
        else
        {
          *(void *)(v16 + 16) = v16;
          *(void *)(v16 + 24) = 0;
        }
        *uint64_t v20 = v16;
      }
      v16 += 32;
      v18 -= 32;
    }
    while (v18);
  }
  uint64_t v12 = *(void *)(v10 + 728);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v5);
  }
  unint64_t v13 = *v8 & 0xFFFFFFFFFFFFFFF8;
  unint64_t *v7 = v13 | *v7 & 7;
  v7[1] = (unint64_t)v8;
  *(void *)(v13 + 8) = v7;
  *uint64_t v8 = *v8 & 7 | (unint64_t)v7;
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v14 + 24))(v14, v7);
  }
  return v6;
}

llvm::MachineFunction *sub_1CC7352B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (llvm::MachineFunction *)a1[1];
  uint64_t v9 = *(void *)(a1[2] + 8) + 624;
  uint64_t v10 = (unsigned __int8 *)a1[4];
  uint64_t v36 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v36, v10, 2);
  }
  uint64_t v11 = llvm::MachineFunction::CreateMachineInstr(v8, v9, &v36, 0);
  if (v36)
  {
    int v30 = *v36;
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        int v33 = v36;
      }
      else {
        int v33 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
        if (v30 == 3) {
          *((void *)v36 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v32 = (unint64_t)(v33 + 8);
    }
    else
    {
      if ((v36[1] & 0x7F) != 2 && !*((_DWORD *)v36 + 3)) {
        goto LABEL_4;
      }
      uint64_t v31 = *((void *)v36 + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        goto LABEL_4;
      }
    }
    *(void *)&long long v34 = &v36;
    sub_1CC5FA668(v32 + 16, &v34);
  }
LABEL_4:
  int v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 == 5 && *(_WORD *)(a2 + 18) == 48)
  {
    a2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v12 = *(unsigned __int8 *)(a2 + 16);
  }
  switch(v12)
  {
    case 19:
      LODWORD(v34) = 1;
      *((void *)&v34 + 1) = 0;
      *(void *)&long long v35 = 0;
      break;
    case 17:
      int v13 = 3;
      goto LABEL_13;
    case 16:
      if (*(_DWORD *)(a2 + 32) >= 0x41u)
      {
        int v13 = 2;
LABEL_13:
        LODWORD(v34) = v13;
        *((void *)&v34 + 1) = 0;
        *(void *)&long long v35 = a2;
        break;
      }
      uint64_t v14 = *(void *)(a2 + 24);
      LODWORD(v34) = 1;
      *((void *)&v34 + 1) = 0;
      *(void *)&long long v35 = v14;
      break;
    default:
      long long v34 = 0u;
      long long v35 = 0u;
      break;
  }
  llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 1;
  *((void *)&v34 + 1) = 0;
  *(void *)&long long v35 = 0;
  llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 14;
  *((void *)&v34 + 1) = 0;
  *(void *)&long long v35 = a3;
  llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 14;
  *((void *)&v34 + 1) = 0;
  *(void *)&long long v35 = a4;
  llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v34);
  uint64_t v15 = (unint64_t *)a1[6];
  uint64_t v16 = *(void *)(a1[5] + 40);
  *((void *)v11 + 3) = v16;
  uint64_t v17 = *(void *)(v16 + 32);
  uint64_t v18 = *((unsigned int *)v11 + 10);
  if (v18)
  {
    uint64_t v23 = *((void *)v11 + 4);
    uint64_t v24 = *(void *)(v17 + 40);
    uint64_t v25 = 32 * v18;
    do
    {
      if (!*(unsigned char *)v23)
      {
        uint64_t v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0) {
          v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
        }
        else {
          v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        }
        uint64_t v28 = *v27;
        if (*v27)
        {
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 16) = v23;
          *(void *)(v23 + 16) = v29;
          if (*(unsigned char *)(v23 + 3))
          {
            *(void *)(v23 + 24) = v28;
          }
          else
          {
            *(void *)(v23 + 24) = 0;
            v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(void *)(v23 + 16) = v23;
          *(void *)(v23 + 24) = 0;
        }
        uint64_t *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  uint64_t v19 = *(void *)(v17 + 728);
  if (v19) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v19 + 24))(v19, v11);
  }
  unint64_t v20 = *v15 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v11 = v20 | *(void *)v11 & 7;
  *((void *)v11 + 1) = v15;
  *(void *)(v20 + 8) = v11;
  *uint64_t v15 = *v15 & 7 | (unint64_t)v11;
  uint64_t v21 = a1[7];
  if (v21) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v21 + 24))(v21, v11);
  }
  return v8;
}

void sub_1CC7355DC(int *a1, uint64_t a2, llvm::MachineFunction **a3)
{
  int v4 = a1[2];
  switch(v4)
  {
    case 1:
      int v5 = *a1;
      uint64_t v7 = *a3;
      int v6 = a3[1];
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      int v23 = 0x1000000;
      int v24 = v5;
LABEL_3:
      llvm::MachineInstr::addOperand(v6, v7, (const llvm::MachineOperand *)&v23);
      return;
    case 0:
      uint64_t v9 = *(void *)a1;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      unint64_t v11 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v11) = 4;
      unint64_t v12 = *(unsigned int *)(a2 + 432);
      if (v11 >= v12)
      {
        uint64_t v13 = *(void *)(a2 + 440);
        uint64_t v14 = v11 + 1 - v12;
        if (v11 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v15 = *(_DWORD *)(a2 + 432);
        if (v14)
        {
          uint64_t v16 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v17 = ~v11 + v12;
          do
            *v16++ = v13;
          while (!__CFADD__(v17++, 1));
          int v15 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v15 + v14;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v11) = v9;
      uint64_t v19 = *(void *)(a2 + 8);
      if (!v19) {
        goto LABEL_15;
      }
      uint64_t v22 = *(void (**)(void))(*(void *)v19 + 24);
      goto LABEL_19;
    case 2:
      uint64_t v20 = *(void *)a1;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      *(void *)(*(void *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v20 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v21 = *(void *)(a2 + 8);
      if (!v21)
      {
LABEL_15:
        uint64_t v7 = *a3;
        int v6 = a3[1];
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v23 = 0x1000000;
        int v24 = IncompleteVirtualRegister;
        goto LABEL_3;
      }
      uint64_t v22 = *(void (**)(void))(*(void *)v21 + 24);
LABEL_19:
      v22();
      goto LABEL_15;
  }
}

void sub_1CC7357B8(int *a1, llvm::MachineFunction *a2, llvm::MachineInstr *this)
{
  int v3 = a1[4];
  switch(v3)
  {
    case 0:
      int v4 = *a1;
LABEL_3:
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      v7[0] = 0;
      v7[1] = v4;
      uint64_t v10 = 0;
LABEL_4:
      llvm::MachineInstr::addOperand(this, a2, (const llvm::MachineOperand *)v7);
      return;
    case 1:
      int v4 = *(_DWORD *)(*(void *)(*((void *)a1 + 1) + 32) + 4);
      goto LABEL_3;
    case 2:
      int v5 = *a1;
      v7[0] = 18;
      uint64_t v8 = 0;
      LODWORD(v9) = v5;
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(void *)a1;
      v7[0] = 1;
      uint64_t v8 = 0;
      uint64_t v9 = v6;
      goto LABEL_4;
  }
}

llvm::MachineFunction *sub_1CC735850(void *a1, uint64_t *a2, int a3)
{
  uint64_t v6 = (llvm::MachineFunction *)a1[1];
  uint64_t v7 = *(void *)(a1[2] + 8) + 3360;
  uint64_t v8 = (unsigned __int8 *)a1[4];
  unsigned int v40 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v40, v8, 2);
  }
  uint64_t v9 = llvm::MachineFunction::CreateMachineInstr(v6, v7, &v40, 0);
  if (v40) {
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  }
  uint64_t v10 = (unint64_t *)a1[6];
  uint64_t v11 = *(void *)(a1[5] + 40);
  *((void *)v9 + 3) = v11;
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *((unsigned int *)v9 + 10);
  if (v13)
  {
    uint64_t v32 = *((void *)v9 + 4);
    uint64_t v33 = *(void *)(v12 + 40);
    uint64_t v34 = 32 * v13;
    do
    {
      if (!*(unsigned char *)v32)
      {
        uint64_t v35 = *(unsigned int *)(v32 + 4);
        if ((int)v35 >= 0) {
          uint64_t v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
        }
        else {
          uint64_t v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
        }
        uint64_t v37 = *v36;
        if (*v36)
        {
          uint64_t v38 = *(void *)(v37 + 16);
          *(void *)(v37 + 16) = v32;
          *(void *)(v32 + 16) = v38;
          if (*(unsigned char *)(v32 + 3))
          {
            *(void *)(v32 + 24) = v37;
          }
          else
          {
            *(void *)(v32 + 24) = 0;
            uint64_t v36 = (uint64_t *)(v38 + 24);
          }
        }
        else
        {
          *(void *)(v32 + 16) = v32;
          *(void *)(v32 + 24) = 0;
        }
        *uint64_t v36 = v32;
      }
      v32 += 32;
      v34 -= 32;
    }
    while (v34);
  }
  uint64_t v14 = *(void *)(v12 + 728);
  if (v14) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v14 + 24))(v14, v9);
  }
  unint64_t v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v9 = v15 | *(void *)v9 & 7;
  *((void *)v9 + 1) = v10;
  *(void *)(v15 + 8) = v9;
  *uint64_t v10 = *v10 & 7 | (unint64_t)v9;
  uint64_t v16 = a1[7];
  if (v16) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v16 + 24))(v16, v9);
  }
  int v17 = *((_DWORD *)a2 + 2);
  if (v17 != 1)
  {
    uint64_t v20 = a1[3];
    if (v17)
    {
      if (v17 != 2) {
        goto LABEL_13;
      }
      uint64_t v39 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v20, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      *(void *)(*(void *)(v20 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v39 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v31 = *(void *)(v20 + 8);
      if (!v31) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v21 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v20, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      unint64_t v23 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v20 + 24) + 16 * v23) = 4;
      unint64_t v24 = *(unsigned int *)(v20 + 432);
      if (v23 >= v24)
      {
        uint64_t v25 = *(void *)(v20 + 440);
        uint64_t v26 = v23 + 1 - v24;
        if (v23 >= *(unsigned int *)(v20 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v27 = *(_DWORD *)(v20 + 432);
        if (v26)
        {
          uint64_t v28 = (void *)(*(void *)(v20 + 424) + 8 * *(unsigned int *)(v20 + 432));
          uint64_t v29 = ~v23 + v24;
          do
            *v28++ = v25;
          while (!__CFADD__(v29++, 1));
          int v27 = *(_DWORD *)(v20 + 432);
        }
        *(_DWORD *)(v20 + 432) = v27 + v26;
      }
      *(void *)(*(void *)(v20 + 424) + 8 * v23) = v21;
      uint64_t v31 = *(void *)(v20 + 8);
      if (!v31) {
        goto LABEL_24;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
LABEL_24:
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    LODWORD(v40) = 0x1000000;
    HIDWORD(v40) = IncompleteVirtualRegister;
    goto LABEL_12;
  }
  int v18 = *(_DWORD *)a2;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  LODWORD(v40) = 0x1000000;
  HIDWORD(v40) = v18;
LABEL_12:
  llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v40);
LABEL_13:
  LODWORD(v40) = 5;
  uint64_t v41 = 0;
  LODWORD(v42) = a3;
  llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v40);
  return v6;
}

llvm::MachineFunction *sub_1CC735BC8(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (llvm::MachineFunction *)a1[1];
  uint64_t v7 = *(void *)(a1[2] + 8) + 3408;
  uint64_t v8 = (unsigned __int8 *)a1[4];
  uint64_t v40 = (uint64_t)v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v40, v8, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v6, v7, (unsigned __int8 **)&v40, 0);
  if (v40) {
    llvm::MetadataTracking::untrack((uint64_t)&v40, (unsigned __int8 *)v40);
  }
  uint64_t v10 = (unint64_t *)a1[6];
  uint64_t v11 = *(void *)(a1[5] + 40);
  *((void *)MachineInstr + 3) = v11;
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *((unsigned int *)MachineInstr + 10);
  if (v13)
  {
    uint64_t v32 = *((void *)MachineInstr + 4);
    uint64_t v33 = *(void *)(v12 + 40);
    uint64_t v34 = 32 * v13;
    do
    {
      if (!*(unsigned char *)v32)
      {
        uint64_t v35 = *(unsigned int *)(v32 + 4);
        if ((int)v35 >= 0) {
          uint64_t v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
        }
        else {
          uint64_t v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
        }
        uint64_t v37 = *v36;
        if (*v36)
        {
          uint64_t v38 = *(void *)(v37 + 16);
          *(void *)(v37 + 16) = v32;
          *(void *)(v32 + 16) = v38;
          if (*(unsigned char *)(v32 + 3))
          {
            *(void *)(v32 + 24) = v37;
          }
          else
          {
            *(void *)(v32 + 24) = 0;
            uint64_t v36 = (uint64_t *)(v38 + 24);
          }
        }
        else
        {
          *(void *)(v32 + 16) = v32;
          *(void *)(v32 + 24) = 0;
        }
        *uint64_t v36 = v32;
      }
      v32 += 32;
      v34 -= 32;
    }
    while (v34);
  }
  uint64_t v14 = *(void *)(v12 + 728);
  if (v14) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v14 + 24))(v14, MachineInstr);
  }
  unint64_t v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v15 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v10;
  *(void *)(v15 + 8) = MachineInstr;
  *uint64_t v10 = *v10 & 7 | (unint64_t)MachineInstr;
  uint64_t v16 = a1[7];
  if (v16) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v16 + 24))(v16, MachineInstr);
  }
  int v17 = *((_DWORD *)a2 + 2);
  if (v17 != 1)
  {
    uint64_t v20 = a1[3];
    if (v17)
    {
      if (v17 != 2) {
        goto LABEL_13;
      }
      uint64_t v39 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v20, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      *(void *)(*(void *)(v20 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v39 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v31 = *(void *)(v20 + 8);
      if (!v31) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v21 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v20, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      unint64_t v23 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v20 + 24) + 16 * v23) = 4;
      unint64_t v24 = *(unsigned int *)(v20 + 432);
      if (v23 >= v24)
      {
        uint64_t v25 = *(void *)(v20 + 440);
        uint64_t v26 = v23 + 1 - v24;
        if (v23 >= *(unsigned int *)(v20 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v27 = *(_DWORD *)(v20 + 432);
        if (v26)
        {
          uint64_t v28 = (void *)(*(void *)(v20 + 424) + 8 * *(unsigned int *)(v20 + 432));
          uint64_t v29 = ~v23 + v24;
          do
            *v28++ = v25;
          while (!__CFADD__(v29++, 1));
          int v27 = *(_DWORD *)(v20 + 432);
        }
        *(_DWORD *)(v20 + 432) = v27 + v26;
      }
      *(void *)(*(void *)(v20 + 424) + 8 * v23) = v21;
      uint64_t v31 = *(void *)(v20 + 8);
      if (!v31) {
        goto LABEL_24;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
LABEL_24:
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    LODWORD(v40) = 0x1000000;
    HIDWORD(v40) = IncompleteVirtualRegister;
    goto LABEL_12;
  }
  int v18 = *(_DWORD *)a2;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  LODWORD(v40) = 0x1000000;
  HIDWORD(v40) = v18;
LABEL_12:
  llvm::MachineInstr::addOperand(MachineInstr, v6, (const llvm::MachineOperand *)&v40);
LABEL_13:
  uint64_t v41 = 0;
  uint64_t v42 = a3;
  LODWORD(v43) = 0;
  uint64_t v40 = 10;
  llvm::MachineInstr::addOperand(MachineInstr, v6, (const llvm::MachineOperand *)&v40);
  return v6;
}

uint64_t sub_1CC735F44(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  long long v5 = *a3;
  int v6 = *((_DWORD *)a3 + 4);
  long long v7 = *a4;
  int v8 = *((_DWORD *)a4 + 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a1 + 32))(a1, 193, &v9, 1, &v5, 2, 0);
}

uint64_t sub_1CC735FF8@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v33 = a6;
    uint64_t v32 = (llvm::IntegerType *****)result;
    uint64_t v7 = *(void *)(result + 24);
    if ((a3 & 0x80000000) != 0 && (unint64_t v8 = a3 & 0x7FFFFFFF, v8 < *(unsigned int *)(v7 + 432))) {
      uint64_t v9 = *(void *)(*(void *)(v7 + 424) + 8 * v8);
    }
    else {
      uint64_t v9 = 0;
    }
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v7, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    unsigned int v11 = IncompleteVirtualRegister;
    uint64_t v12 = IncompleteVirtualRegister;
    unint64_t v13 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v7 + 24) + 16 * v13) = 4;
    unint64_t v14 = *(unsigned int *)(v7 + 432);
    if (v13 >= v14)
    {
      uint64_t v15 = *(void *)(v7 + 440);
      uint64_t v16 = v13 + 1 - v14;
      if (v13 >= *(unsigned int *)(v7 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v17 = *(_DWORD *)(v7 + 432);
      if (v16)
      {
        int v18 = (void *)(*(void *)(v7 + 424) + 8 * *(unsigned int *)(v7 + 432));
        uint64_t v19 = ~(unint64_t)(IncompleteVirtualRegister & 0x7FFFFFFF) + v14;
        do
          *v18++ = v15;
        while (!__CFADD__(v19++, 1));
        int v17 = *(_DWORD *)(v7 + 432);
      }
      *(_DWORD *)(v7 + 432) = v17 + v16;
      unint64_t v13 = IncompleteVirtualRegister & 0x7FFFFFFF;
    }
    *(void *)(*(void *)(v7 + 424) + 8 * v13) = v9;
    uint64_t v21 = *(void *)(v7 + 8);
    if (v21) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 24))(v21, v12);
    }
    *a2 = v11;
    unint64_t v36 = a4;
    int v37 = 0;
    uint64_t v22 = (llvm::LLVMContext *)(unsigned __int16)(a4 >> 3);
    unint64_t v23 = (llvm::LLVMContext *)(unsigned __int16)(a4 >> 19);
    if ((a4 & 2) == 0) {
      unint64_t v23 = (llvm::LLVMContext *)(a4 >> 19);
    }
    if ((a4 & 4) != 0) {
      uint64_t v22 = v23;
    }
    if (a4) {
      unint64_t v24 = (llvm::LLVMContext *)(a4 >> 3);
    }
    else {
      unint64_t v24 = v22;
    }
    uint64_t v25 = (llvm::ConstantInt *)llvm::IntegerType::get(***v32[1], v24);
    char v6 = 1;
    uint64_t v26 = llvm::ConstantInt::get(v25, a5, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*v32)[2])(v32, &v36, v26);
    int v28 = *(_DWORD *)(*(void *)(v27 + 32) + 4);
    v41[0] = *a2;
    v41[2] = 1;
    LODWORD(v36) = a3;
    int v38 = 0;
    int v39 = v28;
    int v40 = 0;
    uint64_t result = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, void))(*v32)[4])(v32, 193, v41, 1, &v36, 2, 0);
    a6 = v33;
    *uint64_t v33 = result;
    v33[1] = v29;
  }
  else
  {
    char v6 = 0;
    *a2 = a3;
    *(unsigned char *)a6 = 0;
  }
  *((unsigned char *)a6 + 16) = v6;
  return result;
}

uint64_t sub_1CC7362A8(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  char v6 = ****(llvm::IntegerType *****)(a1 + 8);
  int v7 = *((_DWORD *)a2 + 2);
  unint64_t v8 = a2;
  if (v7)
  {
    if (v7 != 1
      || (*(_DWORD *)a2 & 0x80000000) == 0
      || (uint64_t v15 = *(void *)(a1 + 24), v16 = *(_DWORD *)a2 & 0x7FFFFFFF, v16 >= *(_DWORD *)(v15 + 432)))
    {
      unint64_t v9 = 0;
LABEL_12:
      unint64_t v10 = (unsigned __int16)(v9 >> 3);
      goto LABEL_4;
    }
    unint64_t v8 = (unint64_t *)(*(void *)(v15 + 424) + 8 * v16);
  }
  unint64_t v9 = *v8;
  if (v9)
  {
    unint64_t v10 = (v9 >> 3);
    goto LABEL_4;
  }
  if ((v9 & 4) == 0) {
    goto LABEL_12;
  }
  if ((v9 & 2) != 0) {
    unint64_t v10 = (unsigned __int16)(v9 >> 19);
  }
  else {
    unint64_t v10 = (v9 >> 19);
  }
LABEL_4:
  unsigned int v11 = (llvm::ConstantInt *)llvm::IntegerType::get(v6, (llvm::LLVMContext *)v10);
  uint64_t v12 = llvm::ConstantInt::get(v11, a3, (const llvm::APInt *)1);
  unint64_t v13 = *(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a1 + 16);

  return v13(a1, a2, v12);
}

uint64_t sub_1CC7363A4(int *a1, uint64_t a2)
{
  if (a1[4] == 1)
  {
    int v2 = *(_DWORD *)(*(void *)(*((void *)a1 + 1) + 32) + 4);
    if ((v2 & 0x80000000) == 0) {
      return 0;
    }
  }
  else
  {
    int v2 = *a1;
    if ((*a1 & 0x80000000) == 0) {
      return 0;
    }
  }
  unsigned int v3 = v2 & 0x7FFFFFFF;
  if (v3 < *(_DWORD *)(a2 + 432)) {
    return *(void *)(*(void *)(a2 + 424) + 8 * v3);
  }
  return 0;
}

uint64_t sub_1CC7363F0(void *a1, unint64_t a2, int *a3)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  unint64_t v16 = a2;
  uint64_t v4 = a1[3];
  if (a3[4] == 1)
  {
    int v5 = *(_DWORD *)(*(void *)(*((void *)a3 + 1) + 32) + 4);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    int v5 = *a3;
    if ((*a3 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  unsigned int v6 = v5 & 0x7FFFFFFF;
  if (v6 < *(_DWORD *)(v4 + 432))
  {
    int v7 = *(void **)(*(void *)(v4 + 424) + 8 * v6);
    goto LABEL_7;
  }
LABEL_24:
  int v7 = 0;
LABEL_7:
  int v17 = v7;
  unint64_t v9 = sub_1CB8F1DC4((unint64_t *)&v17);
  if (v8 == 1) {
  unint64_t v10 = sub_1CB8F1DC4(&v16);
  }
  if (v11 == 1)
  {
    unint64_t v15 = v10;
    unint64_t v10 = v15;
  }
  unint64_t v12 = (v9 / v10);
  int v17 = v20;
  int v19 = 8;
  if (v12 >= 9)
  {
    int v18 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v9 / v10))
  {
    v20[0] = v16;
    v20[1] = 0;
    if (v12 != 1)
    {
      v20[2] = v16;
      v20[3] = 0;
      if (v12 != 2)
      {
        v20[4] = v16;
        v20[5] = 0;
        if (v12 != 3)
        {
          v20[6] = v16;
          v20[7] = 0;
          if (v12 != 4)
          {
            v20[8] = v16;
            v20[9] = 0;
            if (v12 != 5)
            {
              v20[10] = v16;
              v20[11] = 0;
              if (v12 != 6)
              {
                v20[12] = v16;
                v20[13] = 0;
                if (v12 != 7)
                {
                  v20[14] = v16;
                  v20[15] = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  int v18 = v9 / v10;
  uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, void *))(*a1 + 32))(a1, 74, v17);
  if (v17 != v20) {
    free(v17);
  }
  return v13;
}

uint64_t sub_1CC73661C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(4 * a4) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4)
  {
    int v5 = v9;
    uint64_t v6 = 4 * a4;
    do
    {
      int v7 = *a3++;
      *int v5 = v7;
      v5[4] = 0;
      v5 += 6;
      v6 -= 4;
    }
    while (v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 32))(a1, 76, a2, 1, v9);
}

llvm::MachineFunction *sub_1CC73677C(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = (llvm::MachineFunction *)a1[1];
  uint64_t v5 = *(void *)(a1[2] + 8) + 9696;
  uint64_t v6 = (unsigned __int8 *)a1[4];
  v23[0] = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)v23, v6, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v4, v5, v23, 0);
  if (v23[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v23, v23[0]);
  }
  unint64_t v8 = (unint64_t *)a1[6];
  uint64_t v9 = *(void *)(a1[5] + 40);
  *((void *)MachineInstr + 3) = v9;
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *((unsigned int *)MachineInstr + 10);
  if (v11)
  {
    uint64_t v16 = *((void *)MachineInstr + 4);
    uint64_t v17 = *(void *)(v10 + 40);
    uint64_t v18 = 32 * v11;
    do
    {
      if (!*(unsigned char *)v16)
      {
        uint64_t v19 = *(unsigned int *)(v16 + 4);
        if ((int)v19 >= 0) {
          uint64_t v20 = (uint64_t *)(*(void *)(v17 + 272) + 8 * v19);
        }
        else {
          uint64_t v20 = (uint64_t *)(*(void *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        }
        uint64_t v21 = *v20;
        if (*v20)
        {
          uint64_t v22 = *(void *)(v21 + 16);
          *(void *)(v21 + 16) = v16;
          *(void *)(v16 + 16) = v22;
          if (*(unsigned char *)(v16 + 3))
          {
            *(void *)(v16 + 24) = v21;
          }
          else
          {
            *(void *)(v16 + 24) = 0;
            uint64_t v20 = (uint64_t *)(v22 + 24);
          }
        }
        else
        {
          *(void *)(v16 + 16) = v16;
          *(void *)(v16 + 24) = 0;
        }
        *uint64_t v20 = v16;
      }
      v16 += 32;
      v18 -= 32;
    }
    while (v18);
  }
  uint64_t v12 = *(void *)(v10 + 728);
  if (v12) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v12 + 24))(v12, MachineInstr);
  }
  unint64_t v13 = *v8 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v13 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v8;
  *(void *)(v13 + 8) = MachineInstr;
  *unint64_t v8 = *v8 & 7 | (unint64_t)MachineInstr;
  uint64_t v14 = a1[7];
  if (v14) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v14 + 24))(v14, MachineInstr);
  }
  v23[1] = 0;
  v23[2] = a2;
  LODWORD(v23[0]) = 4;
  llvm::MachineInstr::addOperand(MachineInstr, v4, (const llvm::MachineOperand *)v23);
  return v4;
}

uint64_t sub_1CC73695C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 19, a2, 1, a3, 1, 0);
}

uint64_t sub_1CC736998(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v6 = *((_DWORD *)a2 + 2);
  int v7 = a2;
  if (v6)
  {
    if (v6 != 1
      || (*(_DWORD *)a2 & 0x80000000) == 0
      || (uint64_t v40 = *(void *)(a1 + 24), v41 = *(_DWORD *)a2 & 0x7FFFFFFF, v41 >= *(_DWORD *)(v40 + 432)))
    {
      unint64_t v61 = 0;
      goto LABEL_12;
    }
    int v7 = (unint64_t *)(*(void *)(v40 + 424) + 8 * v41);
  }
  unint64_t v8 = *v7;
  unint64_t v61 = v8;
  unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF9;
  unint64_t v10 = v8 & 4;
  if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && v10 != 0)
  {
    unint64_t v8 = sub_1CBA15978(&v61);
    unint64_t v9 = v61 & 0xFFFFFFFFFFFFFFF9;
    unint64_t v10 = v61 & 4;
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
LABEL_12:
    v59 = *(llvm::MachineFunction **)(a1 + 8);
    uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 8) + 5760;
    uint64_t v14 = *(unsigned __int8 **)(a1 + 32);
    *(void *)&long long v62 = v14;
    if (v14) {
      llvm::MetadataTracking::track((uint64_t)&v62, v14, 2);
    }
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v59, v13, (unsigned __int8 **)&v62, 0);
    if ((void)v62) {
      llvm::MetadataTracking::untrack((uint64_t)&v62, (unsigned __int8 *)v62);
    }
    uint64_t v16 = *(unint64_t **)(a1 + 48);
    uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 40);
    *((void *)MachineInstr + 3) = v17;
    uint64_t v18 = *(void *)(v17 + 32);
    uint64_t v19 = *((unsigned int *)MachineInstr + 10);
    if (v19)
    {
      uint64_t v45 = *((void *)MachineInstr + 4);
      uint64_t v46 = *(void *)(v18 + 40);
      uint64_t v47 = 32 * v19;
      do
      {
        if (!*(unsigned char *)v45)
        {
          uint64_t v48 = *(unsigned int *)(v45 + 4);
          if ((int)v48 >= 0) {
            v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
          }
          else {
            v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
          }
          uint64_t v50 = *v49;
          if (*v49)
          {
            uint64_t v51 = *(void *)(v50 + 16);
            *(void *)(v50 + 16) = v45;
            *(void *)(v45 + 16) = v51;
            if (*(unsigned char *)(v45 + 3))
            {
              *(void *)(v45 + 24) = v50;
            }
            else
            {
              *(void *)(v45 + 24) = 0;
              v49 = (uint64_t *)(v51 + 24);
            }
          }
          else
          {
            *(void *)(v45 + 16) = v45;
            *(void *)(v45 + 24) = 0;
          }
          uint64_t *v49 = v45;
        }
        v45 += 32;
        v47 -= 32;
      }
      while (v47);
    }
    uint64_t v20 = *(void *)(v18 + 728);
    if (v20) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, MachineInstr);
    }
    unint64_t v21 = *v16 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v21 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v16;
    *(void *)(v21 + 8) = MachineInstr;
    *uint64_t v16 = *v16 & 7 | (unint64_t)MachineInstr;
    uint64_t v22 = *(void *)(a1 + 56);
    if (v22) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, MachineInstr);
    }
    uint64_t v60 = 0;
    unint64_t v23 = (unsigned __int8 **)((char *)MachineInstr + 56);
    if (&v60 != (unsigned __int8 **)((char *)MachineInstr + 56))
    {
      unint64_t v24 = *v23;
      if (!*v23)
      {
LABEL_23:
        llvm::LLVMContext *v23 = 0;
        goto LABEL_24;
      }
      int v42 = *v24;
      if ((v42 - 4) > 0x1E)
      {
        if ((v42 - 3) >= 0xFFFFFFFE) {
          BOOL v53 = *v23;
        }
        else {
          BOOL v53 = 0;
        }
        if ((v42 - 3) <= 0xFFFFFFFD)
        {
          if (v42 == 3) {
            *((void *)v24 + 1) = 0;
          }
          goto LABEL_23;
        }
        unint64_t v44 = (unint64_t)(v53 + 8);
      }
      else
      {
        if ((v24[1] & 0x7F) != 2 && !*((_DWORD *)v24 + 3)) {
          goto LABEL_23;
        }
        uint64_t v43 = *((void *)v24 + 2);
        if ((v43 & 4) == 0) {
          goto LABEL_23;
        }
        unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (!v44) {
          goto LABEL_23;
        }
      }
      *(void *)&long long v62 = (char *)MachineInstr + 56;
      sub_1CC5FA668(v44 + 16, &v62);
      unsigned int v54 = v60;
      llvm::LLVMContext *v23 = v60;
      if (v54)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v60, v54, (uint64_t)MachineInstr + 56);
        uint64_t v60 = 0;
      }
    }
LABEL_24:
    int v25 = *((_DWORD *)a2 + 2);
    if (v25 == 1)
    {
      int v26 = *(_DWORD *)a2;
      *((void *)&v62 + 1) = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      LODWORD(v62) = 0x1000000;
      DWORD1(v62) = v26;
LABEL_26:
      llvm::MachineInstr::addOperand(MachineInstr, v59, (const llvm::MachineOperand *)&v62);
LABEL_27:
      LODWORD(v62) = 2;
      *((void *)&v62 + 1) = 0;
      uint64_t v63 = a3;
      llvm::MachineInstr::addOperand(MachineInstr, v59, (const llvm::MachineOperand *)&v62);
      return (uint64_t)v59;
    }
    uint64_t v28 = *(void *)(a1 + 24);
    if (v25)
    {
      if (v25 != 2) {
        goto LABEL_27;
      }
      unint64_t v52 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v28, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      *(void *)(*(void *)(v28 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v52 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v39 = *(void *)(v28 + 8);
      if (!v39) {
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v29 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v28, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      unint64_t v31 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v28 + 24) + 16 * v31) = 4;
      unint64_t v32 = *(unsigned int *)(v28 + 432);
      if (v31 >= v32)
      {
        uint64_t v33 = *(void *)(v28 + 440);
        uint64_t v34 = v31 + 1 - v32;
        if (v31 >= *(unsigned int *)(v28 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v35 = *(_DWORD *)(v28 + 432);
        if (v34)
        {
          unint64_t v36 = (void *)(*(void *)(v28 + 424) + 8 * *(unsigned int *)(v28 + 432));
          uint64_t v37 = ~v31 + v32;
          do
            *v36++ = v33;
          while (!__CFADD__(v37++, 1));
          int v35 = *(_DWORD *)(v28 + 432);
        }
        *(_DWORD *)(v28 + 432) = v35 + v34;
      }
      *(void *)(*(void *)(v28 + 424) + 8 * v31) = v29;
      uint64_t v39 = *(void *)(v28 + 8);
      if (!v39) {
        goto LABEL_39;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
LABEL_39:
    *((void *)&v62 + 1) = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    LODWORD(v62) = 0x1000000;
    DWORD1(v62) = IncompleteVirtualRegister;
    goto LABEL_26;
  }
  v55 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 5760);
  v57 = (llvm::MachineInstr *)v56;
  sub_1CC734FCC((void *)a1, (uint64_t)v55, v56);
  int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(void *)(a1 + 24), v8, (unsigned __int8 *)&unk_1CFBE11C5, 0);
  *((void *)&v62 + 1) = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  LODWORD(v62) = 0x1000000;
  DWORD1(v62) = GenericVirtualRegister;
  llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v62);
  LODWORD(v62) = 2;
  *((void *)&v62 + 1) = 0;
  uint64_t v63 = a3;
  llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v62);
  *(void *)&long long v62 = v55;
  *((void *)&v62 + 1) = v57;
  LODWORD(v63) = 1;
  return sub_1CD62D79C((void *)a1, (uint64_t)a2, &v62);
}

uint64_t sub_1CC736EF8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1)
  {
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v8 < *(_DWORD *)(v7 + 432))
      {
        unint64_t v9 = (unint64_t *)(*(void *)(v7 + 424) + 8 * v8);
        goto LABEL_5;
      }
    }
LABEL_44:
    unint64_t v61 = 0;
    goto LABEL_15;
  }
  unint64_t v9 = a2;
  if (v6) {
    goto LABEL_44;
  }
LABEL_5:
  unint64_t v10 = *v9;
  unint64_t v61 = v10;
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF9;
  unint64_t v12 = v10 & 4;
  if ((v10 & 0xFFFFFFFFFFFFFFF9) != 0 && v12 != 0)
  {
    unint64_t v10 = sub_1CBA15978(&v61);
    unint64_t v11 = v61 & 0xFFFFFFFFFFFFFFF9;
    unint64_t v12 = v61 & 4;
  }
  if (v11) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
LABEL_15:
    v59 = *(llvm::MachineFunction **)(a1 + 8);
    uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8) + 5808;
    uint64_t v16 = *(unsigned __int8 **)(a1 + 32);
    *(void *)&long long v62 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v62, v16, 2);
    }
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v59, v15, (unsigned __int8 **)&v62, 0);
    if ((void)v62) {
      llvm::MetadataTracking::untrack((uint64_t)&v62, (unsigned __int8 *)v62);
    }
    uint64_t v18 = *(unint64_t **)(a1 + 48);
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 40);
    *((void *)MachineInstr + 3) = v19;
    uint64_t v20 = *(void *)(v19 + 32);
    uint64_t v21 = *((unsigned int *)MachineInstr + 10);
    if (v21)
    {
      uint64_t v45 = *((void *)MachineInstr + 4);
      uint64_t v46 = *(void *)(v20 + 40);
      uint64_t v47 = 32 * v21;
      do
      {
        if (!*(unsigned char *)v45)
        {
          uint64_t v48 = *(unsigned int *)(v45 + 4);
          if ((int)v48 >= 0) {
            v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
          }
          else {
            v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
          }
          uint64_t v50 = *v49;
          if (*v49)
          {
            uint64_t v51 = *(void *)(v50 + 16);
            *(void *)(v50 + 16) = v45;
            *(void *)(v45 + 16) = v51;
            if (*(unsigned char *)(v45 + 3))
            {
              *(void *)(v45 + 24) = v50;
            }
            else
            {
              *(void *)(v45 + 24) = 0;
              v49 = (uint64_t *)(v51 + 24);
            }
          }
          else
          {
            *(void *)(v45 + 16) = v45;
            *(void *)(v45 + 24) = 0;
          }
          uint64_t *v49 = v45;
        }
        v45 += 32;
        v47 -= 32;
      }
      while (v47);
    }
    uint64_t v22 = *(void *)(v20 + 728);
    if (v22) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, MachineInstr);
    }
    unint64_t v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v23 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v18;
    *(void *)(v23 + 8) = MachineInstr;
    unint64_t *v18 = *v18 & 7 | (unint64_t)MachineInstr;
    uint64_t v24 = *(void *)(a1 + 56);
    if (v24) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, MachineInstr);
    }
    uint64_t v60 = 0;
    int v25 = (unsigned __int8 **)((char *)MachineInstr + 56);
    if (&v60 != (unsigned __int8 **)((char *)MachineInstr + 56))
    {
      int v26 = *v25;
      if (!*v25)
      {
LABEL_26:
        *int v25 = 0;
        goto LABEL_27;
      }
      int v42 = *v26;
      if ((v42 - 4) > 0x1E)
      {
        if ((v42 - 3) >= 0xFFFFFFFE) {
          BOOL v53 = *v25;
        }
        else {
          BOOL v53 = 0;
        }
        if ((v42 - 3) <= 0xFFFFFFFD)
        {
          if (v42 == 3) {
            *((void *)v26 + 1) = 0;
          }
          goto LABEL_26;
        }
        unint64_t v44 = (unint64_t)(v53 + 8);
      }
      else
      {
        if ((v26[1] & 0x7F) != 2 && !*((_DWORD *)v26 + 3)) {
          goto LABEL_26;
        }
        uint64_t v43 = *((void *)v26 + 2);
        if ((v43 & 4) == 0) {
          goto LABEL_26;
        }
        unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (!v44) {
          goto LABEL_26;
        }
      }
      *(void *)&long long v62 = (char *)MachineInstr + 56;
      sub_1CC5FA668(v44 + 16, &v62);
      unsigned int v54 = v60;
      *int v25 = v60;
      if (v54)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v60, v54, (uint64_t)MachineInstr + 56);
        uint64_t v60 = 0;
      }
    }
LABEL_27:
    int v27 = *((_DWORD *)a2 + 2);
    if (v27 == 1)
    {
      int v28 = *(_DWORD *)a2;
      *((void *)&v62 + 1) = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      LODWORD(v62) = 0x1000000;
      DWORD1(v62) = v28;
LABEL_29:
      llvm::MachineInstr::addOperand(MachineInstr, v59, (const llvm::MachineOperand *)&v62);
LABEL_30:
      LODWORD(v62) = 3;
      *((void *)&v62 + 1) = 0;
      uint64_t v63 = a3;
      llvm::MachineInstr::addOperand(MachineInstr, v59, (const llvm::MachineOperand *)&v62);
      return (uint64_t)v59;
    }
    uint64_t v30 = *(void *)(a1 + 24);
    if (v27)
    {
      if (v27 != 2) {
        goto LABEL_30;
      }
      unint64_t v52 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      *(void *)(*(void *)(v30 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v52 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v41 = *(void *)(v30 + 8);
      if (!v41) {
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v31 = *a2;
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, (unsigned __int8 *)&unk_1CFBE11C5, 0);
      unint64_t v33 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v30 + 24) + 16 * v33) = 4;
      unint64_t v34 = *(unsigned int *)(v30 + 432);
      if (v33 >= v34)
      {
        uint64_t v35 = *(void *)(v30 + 440);
        uint64_t v36 = v33 + 1 - v34;
        if (v33 >= *(unsigned int *)(v30 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v37 = *(_DWORD *)(v30 + 432);
        if (v36)
        {
          int v38 = (void *)(*(void *)(v30 + 424) + 8 * *(unsigned int *)(v30 + 432));
          uint64_t v39 = ~v33 + v34;
          do
            *v38++ = v35;
          while (!__CFADD__(v39++, 1));
          int v37 = *(_DWORD *)(v30 + 432);
        }
        *(_DWORD *)(v30 + 432) = v37 + v36;
      }
      *(void *)(*(void *)(v30 + 424) + 8 * v33) = v31;
      uint64_t v41 = *(void *)(v30 + 8);
      if (!v41) {
        goto LABEL_42;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
LABEL_42:
    *((void *)&v62 + 1) = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    LODWORD(v62) = 0x1000000;
    DWORD1(v62) = IncompleteVirtualRegister;
    goto LABEL_29;
  }
  v55 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 5808);
  v57 = (llvm::MachineInstr *)v56;
  sub_1CC734FCC((void *)a1, (uint64_t)v55, v56);
  int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(void *)(a1 + 24), v10, (unsigned __int8 *)&unk_1CFBE11C5, 0);
  *((void *)&v62 + 1) = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  LODWORD(v62) = 0x1000000;
  DWORD1(v62) = GenericVirtualRegister;
  llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v62);
  LODWORD(v62) = 3;
  *((void *)&v62 + 1) = 0;
  uint64_t v63 = a3;
  llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v62);
  *(void *)&long long v62 = v55;
  *((void *)&v62 + 1) = v57;
  LODWORD(v63) = 1;
  return sub_1CD62D79C((void *)a1, (uint64_t)a2, &v62);
}

uint64_t sub_1CC737454(llvm::ConstantInt *****a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t v5 = llvm::ConstantInt::get(***a1[1], a3, a3);
  int v6 = (*a1)[2];

  return ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, void *))v6)(a1, a2, v5);
}

uint64_t sub_1CC7374CC(uint64_t a1, unint64_t *a2, double a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = a2;
  if (v5)
  {
    if (v5 != 1
      || (*(_DWORD *)a2 & 0x80000000) == 0
      || (uint64_t v13 = *(void *)(a1 + 24), v14 = *(_DWORD *)a2 & 0x7FFFFFFF, v14 >= *(_DWORD *)(v13 + 432)))
    {
      unint64_t v7 = 0;
      uint64_t v8 = ****(llvm::ConstantFP *****)(a1 + 8);
LABEL_12:
      int v9 = (unsigned __int16)(v7 >> 3);
      goto LABEL_4;
    }
    int v6 = (unint64_t *)(*(void *)(v13 + 424) + 8 * v14);
  }
  unint64_t v7 = *v6;
  uint64_t v8 = ****(llvm::ConstantFP *****)(a1 + 8);
  if (v7)
  {
    int v9 = v7 >> 3;
    goto LABEL_4;
  }
  if ((v7 & 4) == 0) {
    goto LABEL_12;
  }
  if ((v7 & 2) != 0) {
    int v9 = (unsigned __int16)(v7 >> 19);
  }
  else {
    int v9 = v7 >> 19;
  }
LABEL_4:
  sub_1CC73D93C(v9, (uint64_t)v15, *(const llvm::APInt **)&a3);
  unint64_t v11 = llvm::ConstantFP::get(v8, (llvm::LLVMContext *)v15, v10);
  if ((_UNKNOWN *)v16 == &unk_1CFB2E344)
  {
    sub_1CB845718(v17);
  }
  else if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && v17[0])
  {
    MEMORY[0x1D25D9CB0](v17[0], 0x1000C8000313F17);
  }
  return (*(uint64_t (**)(uint64_t, unint64_t *, const llvm::detail::DoubleAPFloat *))(*(void *)a1 + 24))(a1, a2, v11);
}

uint64_t sub_1CC73765C(llvm::ConstantFP *****a1, uint64_t a2, llvm::LLVMContext *a3)
{
  int v5 = llvm::ConstantFP::get(***a1[1], a3, a3);
  int v6 = (*a1)[3];

  return ((uint64_t (*)(llvm::ConstantFP *****, uint64_t, const llvm::detail::DoubleAPFloat *))v6)(a1, a2, v5);
}

llvm::MachineFunction *sub_1CC7376D4(void *a1, int *a2, uint64_t a3)
{
  int v6 = (llvm::MachineFunction *)a1[1];
  uint64_t v7 = *(void *)(a1[2] + 8) + 5472;
  uint64_t v8 = (unsigned __int8 *)a1[4];
  unint64_t v29 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v29, v8, 2);
  }
  int v9 = llvm::MachineFunction::CreateMachineInstr(v6, v7, &v29, 0);
  if (v29) {
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  }
  unint64_t v10 = (unint64_t *)a1[6];
  uint64_t v11 = *(void *)(a1[5] + 40);
  *((void *)v9 + 3) = v11;
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *((unsigned int *)v9 + 10);
  if (v13)
  {
    uint64_t v20 = *((void *)v9 + 4);
    uint64_t v21 = *(void *)(v12 + 40);
    uint64_t v22 = 32 * v13;
    do
    {
      if (!*(unsigned char *)v20)
      {
        uint64_t v23 = *(unsigned int *)(v20 + 4);
        if ((int)v23 >= 0) {
          uint64_t v24 = (uint64_t *)(*(void *)(v21 + 272) + 8 * v23);
        }
        else {
          uint64_t v24 = (uint64_t *)(*(void *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        }
        uint64_t v25 = *v24;
        if (*v24)
        {
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = v20;
          *(void *)(v20 + 16) = v26;
          if (*(unsigned char *)(v20 + 3))
          {
            *(void *)(v20 + 24) = v25;
          }
          else
          {
            *(void *)(v20 + 24) = 0;
            uint64_t v24 = (uint64_t *)(v26 + 24);
          }
        }
        else
        {
          *(void *)(v20 + 16) = v20;
          *(void *)(v20 + 24) = 0;
        }
        *uint64_t v24 = v20;
      }
      v20 += 32;
      v22 -= 32;
    }
    while (v22);
  }
  uint64_t v14 = *(void *)(v12 + 728);
  if (v14) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v14 + 24))(v14, v9);
  }
  unint64_t v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v9 = v15 | *(void *)v9 & 7;
  *((void *)v9 + 1) = v10;
  *(void *)(v15 + 8) = v9;
  *unint64_t v10 = *v10 & 7 | (unint64_t)v9;
  uint64_t v16 = a1[7];
  if (v16) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v16 + 24))(v16, v9);
  }
  int v17 = a2[4];
  switch(v17)
  {
    case 0:
      int v18 = *a2;
LABEL_12:
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      LODWORD(v29) = 0;
      HIDWORD(v29) = v18;
      uint64_t v32 = 0;
      break;
    case 1:
      int v18 = *(_DWORD *)(*(void *)(*((void *)a2 + 1) + 32) + 4);
      goto LABEL_12;
    case 2:
      int v27 = *a2;
      LODWORD(v29) = 18;
      uint64_t v30 = 0;
      LODWORD(v31) = v27;
      break;
    case 3:
      uint64_t v28 = *(void *)a2;
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = v28;
      break;
    default:
      goto LABEL_14;
  }
  llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v29);
LABEL_14:
  uint64_t v30 = 0;
  uint64_t v31 = a3;
  LODWORD(v29) = 4;
  llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v29);
  return v6;
}

llvm::MachineFunction *sub_1CC737934(void *a1, unsigned int a2, int *a3, int *a4, llvm::MachineMemOperand *a5)
{
  int v9 = (llvm::MachineFunction *)a1[1];
  uint64_t v10 = *(void *)(a1[2] + 8) + 48 * a2;
  uint64_t v11 = (unsigned __int8 *)a1[4];
  uint64_t v47 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v47, v11, 2);
  }
  uint64_t v12 = llvm::MachineFunction::CreateMachineInstr(v9, v10, &v47, 0);
  if (v47) {
    llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
  }
  uint64_t v13 = (unint64_t *)a1[6];
  uint64_t v14 = *(void *)(a1[5] + 40);
  *((void *)v12 + 3) = v14;
  uint64_t v15 = *(void *)(v14 + 32);
  uint64_t v16 = *((unsigned int *)v12 + 10);
  if (v16)
  {
    uint64_t v36 = *((void *)v12 + 4);
    uint64_t v37 = *(void *)(v15 + 40);
    uint64_t v38 = 32 * v16;
    do
    {
      if (!*(unsigned char *)v36)
      {
        uint64_t v39 = *(unsigned int *)(v36 + 4);
        if ((int)v39 >= 0) {
          uint64_t v40 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v39);
        }
        else {
          uint64_t v40 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        }
        uint64_t v41 = *v40;
        if (*v40)
        {
          uint64_t v42 = *(void *)(v41 + 16);
          *(void *)(v41 + 16) = v36;
          *(void *)(v36 + 16) = v42;
          if (*(unsigned char *)(v36 + 3))
          {
            *(void *)(v36 + 24) = v41;
          }
          else
          {
            *(void *)(v36 + 24) = 0;
            uint64_t v40 = (uint64_t *)(v42 + 24);
          }
        }
        else
        {
          *(void *)(v36 + 16) = v36;
          *(void *)(v36 + 24) = 0;
        }
        *uint64_t v40 = v36;
      }
      v36 += 32;
      v38 -= 32;
    }
    while (v38);
  }
  uint64_t v17 = *(void *)(v15 + 728);
  if (v17) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v17 + 24))(v17, v12);
  }
  unint64_t v18 = *v13 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v12 = v18 | *(void *)v12 & 7;
  *((void *)v12 + 1) = v13;
  *(void *)(v18 + 8) = v12;
  *uint64_t v13 = *v13 & 7 | (unint64_t)v12;
  uint64_t v19 = a1[7];
  if (v19) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v19 + 24))(v19, v12);
  }
  int v20 = a3[2];
  if (v20 == 1)
  {
    int v21 = *a3;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    LODWORD(v47) = 0x1000000;
    HIDWORD(v47) = v21;
LABEL_12:
    llvm::MachineInstr::addOperand(v12, v9, (const llvm::MachineOperand *)&v47);
    goto LABEL_13;
  }
  uint64_t v25 = a1[3];
  if (!v20)
  {
    uint64_t v46 = *(void *)a3;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v25, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    unint64_t v27 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v25 + 24) + 16 * v27) = 4;
    unint64_t v28 = *(unsigned int *)(v25 + 432);
    if (v27 >= v28)
    {
      uint64_t v29 = *(void *)(v25 + 440);
      uint64_t v30 = v27 + 1 - v28;
      if (v27 >= *(unsigned int *)(v25 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v31 = *(_DWORD *)(v25 + 432);
      if (v30)
      {
        uint64_t v32 = (void *)(*(void *)(v25 + 424) + 8 * *(unsigned int *)(v25 + 432));
        uint64_t v33 = ~v27 + v28;
        do
          *v32++ = v29;
        while (!__CFADD__(v33++, 1));
        int v31 = *(_DWORD *)(v25 + 432);
      }
      *(_DWORD *)(v25 + 432) = v31 + v30;
    }
    *(void *)(*(void *)(v25 + 424) + 8 * v27) = v46;
    goto LABEL_28;
  }
  if (v20 == 2)
  {
    uint64_t v44 = *(void *)a3;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v25, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    *(void *)(*(void *)(v25 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v44 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_28:
    uint64_t v35 = *(void *)(v25 + 8);
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
    }
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    LODWORD(v47) = 0x1000000;
    HIDWORD(v47) = IncompleteVirtualRegister;
    goto LABEL_12;
  }
LABEL_13:
  int v22 = a4[4];
  switch(v22)
  {
    case 0:
      int v23 = *a4;
LABEL_15:
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      LODWORD(v47) = 0;
      HIDWORD(v47) = v23;
      uint64_t v50 = 0;
      break;
    case 1:
      int v23 = *(_DWORD *)(*(void *)(*((void *)a4 + 1) + 32) + 4);
      goto LABEL_15;
    case 2:
      int v43 = *a4;
      LODWORD(v47) = 18;
      uint64_t v48 = 0;
      LODWORD(v49) = v43;
      break;
    case 3:
      uint64_t v45 = *(void *)a4;
      LODWORD(v47) = 1;
      uint64_t v48 = 0;
      uint64_t v49 = v45;
      break;
    default:
      goto LABEL_17;
  }
  llvm::MachineInstr::addOperand(v12, v9, (const llvm::MachineOperand *)&v47);
LABEL_17:
  llvm::MachineInstr::addMemOperand(v12, v9, a5);
  return v9;
}

llvm::MachineFunction *sub_1CC737D1C(void *a1, int *a2, int *a3, llvm::MachineMemOperand *a4)
{
  uint64_t v8 = (llvm::MachineFunction *)a1[1];
  uint64_t v9 = *(void *)(a1[2] + 8) + 4608;
  uint64_t v10 = (unsigned __int8 *)a1[4];
  uint64_t v35 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v35, v10, 2);
  }
  uint64_t v11 = llvm::MachineFunction::CreateMachineInstr(v8, v9, &v35, 0);
  if (v35) {
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  }
  uint64_t v12 = (unint64_t *)a1[6];
  uint64_t v13 = *(void *)(a1[5] + 40);
  *((void *)v11 + 3) = v13;
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v15 = *((unsigned int *)v11 + 10);
  if (v15)
  {
    uint64_t v24 = *((void *)v11 + 4);
    uint64_t v25 = *(void *)(v14 + 40);
    uint64_t v26 = 32 * v15;
    do
    {
      if (!*(unsigned char *)v24)
      {
        uint64_t v27 = *(unsigned int *)(v24 + 4);
        if ((int)v27 >= 0) {
          unint64_t v28 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v27);
        }
        else {
          unint64_t v28 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
        }
        uint64_t v29 = *v28;
        if (*v28)
        {
          uint64_t v30 = *(void *)(v29 + 16);
          *(void *)(v29 + 16) = v24;
          *(void *)(v24 + 16) = v30;
          if (*(unsigned char *)(v24 + 3))
          {
            *(void *)(v24 + 24) = v29;
          }
          else
          {
            *(void *)(v24 + 24) = 0;
            unint64_t v28 = (uint64_t *)(v30 + 24);
          }
        }
        else
        {
          *(void *)(v24 + 16) = v24;
          *(void *)(v24 + 24) = 0;
        }
        *unint64_t v28 = v24;
      }
      v24 += 32;
      v26 -= 32;
    }
    while (v26);
  }
  uint64_t v16 = *(void *)(v14 + 728);
  if (v16) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v16 + 24))(v16, v11);
  }
  unint64_t v17 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v11 = v17 | *(void *)v11 & 7;
  *((void *)v11 + 1) = v12;
  *(void *)(v17 + 8) = v11;
  *uint64_t v12 = *v12 & 7 | (unint64_t)v11;
  uint64_t v18 = a1[7];
  if (v18) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v18 + 24))(v18, v11);
  }
  int v19 = a2[4];
  switch(v19)
  {
    case 0:
      int v20 = *a2;
LABEL_12:
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      LODWORD(v35) = 0;
      HIDWORD(v35) = v20;
      uint64_t v38 = 0;
LABEL_13:
      llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v35);
      break;
    case 1:
      int v20 = *(_DWORD *)(*(void *)(*((void *)a2 + 1) + 32) + 4);
      goto LABEL_12;
    case 2:
      int v31 = *a2;
      LODWORD(v35) = 18;
      uint64_t v36 = 0;
      LODWORD(v37) = v31;
      goto LABEL_13;
    case 3:
      uint64_t v33 = *(void *)a2;
      LODWORD(v35) = 1;
      uint64_t v36 = 0;
      uint64_t v37 = v33;
      goto LABEL_13;
  }
  int v21 = a3[4];
  switch(v21)
  {
    case 0:
      int v22 = *a3;
LABEL_16:
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      LODWORD(v35) = 0;
      HIDWORD(v35) = v22;
      uint64_t v38 = 0;
      break;
    case 1:
      int v22 = *(_DWORD *)(*(void *)(*((void *)a3 + 1) + 32) + 4);
      goto LABEL_16;
    case 2:
      int v32 = *a3;
      LODWORD(v35) = 18;
      uint64_t v36 = 0;
      LODWORD(v37) = v32;
      break;
    case 3:
      uint64_t v34 = *(void *)a3;
      LODWORD(v35) = 1;
      uint64_t v36 = 0;
      uint64_t v37 = v34;
      break;
    default:
      goto LABEL_18;
  }
  llvm::MachineInstr::addOperand(v11, v8, (const llvm::MachineOperand *)&v35);
LABEL_18:
  llvm::MachineInstr::addMemOperand(v11, v8, a4);
  return v8;
}

uint64_t sub_1CC737FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 124, a2, 1, a3, 1, 0);
}

uint64_t sub_1CC738034(void *a1, uint64_t a2, unint64_t *a3, int *a4)
{
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v9 = a3;
  if (!v8) {
    goto LABEL_2;
  }
  if (v8 == 1 && (*(_DWORD *)a3 & 0x80000000) != 0)
  {
    uint64_t v31 = a1[3];
    uint64_t v32 = *(_DWORD *)a3 & 0x7FFFFFFF;
    if (v32 < *(_DWORD *)(v31 + 432))
    {
      uint64_t v9 = (unint64_t *)(*(void *)(v31 + 424) + 8 * v32);
LABEL_2:
      unint64_t v10 = *v9;
      goto LABEL_3;
    }
  }
  unint64_t v10 = 0;
LABEL_3:
  unint64_t v37 = v10;
  unint64_t v12 = sub_1CB8F1DC4(&v37);
  if (v11 == 1) {
  uint64_t v13 = a1[3];
  }
  if (a4[4] == 1)
  {
    int v14 = *(_DWORD *)(*(void *)(*((void *)a4 + 1) + 32) + 4);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  else
  {
    int v14 = *a4;
    if ((*a4 & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  unsigned int v15 = v14 & 0x7FFFFFFF;
  if (v15 < *(_DWORD *)(v13 + 432))
  {
    unint64_t v16 = *(void *)(*(void *)(v13 + 424) + 8 * v15);
    goto LABEL_11;
  }
LABEL_38:
  unint64_t v16 = 0;
LABEL_11:
  unint64_t v36 = v16;
  unint64_t v17 = sub_1CB8F1DC4(&v36);
  if (v18 == 1)
  {
    unint64_t v35 = v17;
    unint64_t v17 = v35;
  }
  if (v12 <= v17)
  {
    int v19 = *((_DWORD *)a3 + 2);
    int v20 = a3;
    if (v19)
    {
      if (v19 != 1
        || (*(_DWORD *)a3 & 0x80000000) == 0
        || (uint64_t v33 = a1[3], v34 = *(_DWORD *)a3 & 0x7FFFFFFF, v34 >= *(_DWORD *)(v33 + 432)))
      {
        unint64_t v21 = 0;
LABEL_16:
        unint64_t v37 = v21;
        unint64_t v23 = sub_1CB8F1DC4(&v37);
        if (v22 == 1) {
        uint64_t v24 = a1[3];
        }
        if (a4[4] == 1)
        {
          int v25 = *(_DWORD *)(*(void *)(*((void *)a4 + 1) + 32) + 4);
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_39;
          }
        }
        else
        {
          int v25 = *a4;
          if ((*a4 & 0x80000000) == 0) {
            goto LABEL_39;
          }
        }
        unsigned int v26 = v25 & 0x7FFFFFFF;
        if (v26 < *(_DWORD *)(v24 + 432))
        {
          unint64_t v27 = *(void *)(*(void *)(v24 + 424) + 8 * v26);
LABEL_24:
          unint64_t v36 = v27;
          unint64_t v29 = sub_1CB8F1DC4(&v36);
          if (v28 == 1) {
          if (v23 >= v29)
          }
            a2 = 19;
          else {
            a2 = 119;
          }
          return (*(uint64_t (**)(void *, uint64_t, unint64_t *, uint64_t, int *, uint64_t, void))(*a1 + 32))(a1, a2, a3, 1, a4, 1, 0);
        }
LABEL_39:
        unint64_t v27 = 0;
        goto LABEL_24;
      }
      int v20 = (unint64_t *)(*(void *)(v33 + 424) + 8 * v34);
    }
    unint64_t v21 = *v20;
    goto LABEL_16;
  }
  return (*(uint64_t (**)(void *, uint64_t, unint64_t *, uint64_t, int *, uint64_t, void))(*a1 + 32))(a1, a2, a3, 1, a4, 1, 0);
}

uint64_t sub_1CC7382A0(void *a1, unint64_t *a2, int *a3)
{
  return sub_1CC738034(a1, 126, a2, a3);
}

uint64_t sub_1CC7382B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t sub_1CC7383D8(void *a1, unint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v8 = a1[3];
  if (a3[4] == 1)
  {
    int v9 = *(_DWORD *)(*(void *)(*((void *)a3 + 1) + 32) + 4);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_68;
    }
  }
  else
  {
    int v9 = *a3;
    if ((*a3 & 0x80000000) == 0) {
      goto LABEL_68;
    }
  }
  unsigned int v10 = v9 & 0x7FFFFFFF;
  if (v10 < *(_DWORD *)(v8 + 432))
  {
    unint64_t v11 = *(void *)(*(void *)(v8 + 424) + 8 * v10);
    goto LABEL_7;
  }
LABEL_68:
  unint64_t v11 = 0;
LABEL_7:
  unint64_t v59 = v11;
  int v12 = *((_DWORD *)a2 + 2);
  if (v12 != 1)
  {
    int v14 = a2;
    if (!v12) {
      goto LABEL_11;
    }
LABEL_70:
    unint64_t v15 = 0;
    goto LABEL_12;
  }
  if ((*(_DWORD *)a2 & 0x80000000) == 0) {
    goto LABEL_70;
  }
  uint64_t v13 = *(_DWORD *)a2 & 0x7FFFFFFF;
  if (v13 >= *(_DWORD *)(v8 + 432)) {
    goto LABEL_70;
  }
  int v14 = (unint64_t *)(*(void *)(v8 + 424) + 8 * v13);
LABEL_11:
  unint64_t v15 = *v14;
LABEL_12:
  unint64_t v58 = v15;
  uint64_t v16 = sub_1CB8F1DC4(&v58);
  int v18 = v17;
  if (v16 == sub_1CB8F1DC4(&v59) && v18 == v19) {
    return sub_1CC7382B0((uint64_t)a1);
  }
  int v20 = (llvm::MachineFunction *)a1[1];
  uint64_t v21 = *(void *)(a1[2] + 8) + 3504;
  int v22 = (unsigned __int8 *)a1[4];
  uint64_t v60 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v60, v22, 2);
  }
  unint64_t v23 = llvm::MachineFunction::CreateMachineInstr(v20, v21, &v60, 0);
  if (v60) {
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  }
  uint64_t v24 = (unint64_t *)a1[6];
  uint64_t v25 = *(void *)(a1[5] + 40);
  *((void *)v23 + 3) = v25;
  uint64_t v26 = *(void *)(v25 + 32);
  uint64_t v27 = *((unsigned int *)v23 + 10);
  if (v27)
  {
    uint64_t v47 = *((void *)v23 + 4);
    uint64_t v48 = *(void *)(v26 + 40);
    uint64_t v49 = 32 * v27;
    do
    {
      if (!*(unsigned char *)v47)
      {
        uint64_t v50 = *(unsigned int *)(v47 + 4);
        if ((int)v50 >= 0) {
          uint64_t v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
        }
        else {
          uint64_t v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
        }
        uint64_t v52 = *v51;
        if (*v51)
        {
          uint64_t v53 = *(void *)(v52 + 16);
          *(void *)(v52 + 16) = v47;
          *(void *)(v47 + 16) = v53;
          if (*(unsigned char *)(v47 + 3))
          {
            *(void *)(v47 + 24) = v52;
          }
          else
          {
            *(void *)(v47 + 24) = 0;
            uint64_t v51 = (uint64_t *)(v53 + 24);
          }
        }
        else
        {
          *(void *)(v47 + 16) = v47;
          *(void *)(v47 + 24) = 0;
        }
        uint64_t *v51 = v47;
      }
      v47 += 32;
      v49 -= 32;
    }
    while (v49);
  }
  uint64_t v28 = *(void *)(v26 + 728);
  if (v28) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v28 + 24))(v28, v23);
  }
  unint64_t v29 = *v24 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = v29 | *(void *)v23 & 7;
  *((void *)v23 + 1) = v24;
  *(void *)(v29 + 8) = v23;
  *uint64_t v24 = *v24 & 7 | (unint64_t)v23;
  uint64_t v30 = a1[7];
  if (v30) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, v23);
  }
  int v31 = *((_DWORD *)a2 + 2);
  if (v31 == 1)
  {
    int v32 = *(_DWORD *)a2;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    LODWORD(v60) = 0x1000000;
    HIDWORD(v60) = v32;
LABEL_25:
    llvm::MachineInstr::addOperand(v23, v20, (const llvm::MachineOperand *)&v60);
    goto LABEL_26;
  }
  uint64_t v36 = a1[3];
  if (!v31)
  {
    unint64_t v57 = *a2;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v36, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    unint64_t v38 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v36 + 24) + 16 * v38) = 4;
    unint64_t v39 = *(unsigned int *)(v36 + 432);
    if (v38 >= v39)
    {
      uint64_t v40 = *(void *)(v36 + 440);
      uint64_t v41 = v38 + 1 - v39;
      if (v38 >= *(unsigned int *)(v36 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v42 = *(_DWORD *)(v36 + 432);
      if (v41)
      {
        int v43 = (void *)(*(void *)(v36 + 424) + 8 * *(unsigned int *)(v36 + 432));
        uint64_t v44 = ~v38 + v39;
        do
          *v43++ = v40;
        while (!__CFADD__(v44++, 1));
        int v42 = *(_DWORD *)(v36 + 432);
      }
      *(_DWORD *)(v36 + 432) = v42 + v41;
    }
    *(void *)(*(void *)(v36 + 424) + 8 * v38) = v57;
    goto LABEL_42;
  }
  if (v31 == 2)
  {
    unint64_t v55 = *a2;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v36, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    *(void *)(*(void *)(v36 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v55 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_42:
    uint64_t v46 = *(void *)(v36 + 8);
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 24))(v46);
    }
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    LODWORD(v60) = 0x1000000;
    HIDWORD(v60) = IncompleteVirtualRegister;
    goto LABEL_25;
  }
LABEL_26:
  int v33 = a3[4];
  switch(v33)
  {
    case 0:
      int v34 = *a3;
LABEL_28:
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      LODWORD(v60) = 0;
      HIDWORD(v60) = v34;
      uint64_t v63 = 0;
      break;
    case 1:
      int v34 = *(_DWORD *)(*(void *)(*((void *)a3 + 1) + 32) + 4);
      goto LABEL_28;
    case 2:
      int v54 = *a3;
      LODWORD(v60) = 18;
      uint64_t v61 = 0;
      LODWORD(v62) = v54;
      break;
    case 3:
      uint64_t v56 = *(void *)a3;
      LODWORD(v60) = 1;
      uint64_t v61 = 0;
      uint64_t v62 = v56;
      break;
    default:
      goto LABEL_30;
  }
  llvm::MachineInstr::addOperand(v23, v20, (const llvm::MachineOperand *)&v60);
LABEL_30:
  LODWORD(v60) = 1;
  uint64_t v61 = 0;
  uint64_t v62 = a4;
  llvm::MachineInstr::addOperand(v23, v20, (const llvm::MachineOperand *)&v60);
  return (uint64_t)v20;
}

uint64_t sub_1CC7388A0(void *a1, uint64_t *a2, long long *a3, int *a4, unsigned int a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v10 = *((_DWORD *)a2 + 2);
  if (v10 == 1)
  {
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      uint64_t v11 = a1[3];
      uint64_t v12 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v12 < *(_DWORD *)(v11 + 432))
      {
        uint64_t v13 = (uint64_t *)(*(void *)(v11 + 424) + 8 * v12);
LABEL_5:
        uint64_t v14 = *v13;
        goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
    if (!v10) {
      goto LABEL_5;
    }
  }
  uint64_t v14 = 0;
LABEL_6:
  *(void *)&long long v25 = v14;
  uint64_t v15 = sub_1CB8F1DC4((unint64_t *)&v25);
  int v17 = v16;
  uint64_t v18 = a1[3];
  if (a4[4] == 1)
  {
    int v19 = *(_DWORD *)(*(void *)(*((void *)a4 + 1) + 32) + 4);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_17:
      unint64_t v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    int v19 = *a4;
    if ((*a4 & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  unsigned int v20 = v19 & 0x7FFFFFFF;
  if (v20 >= *(_DWORD *)(v18 + 432)) {
    goto LABEL_17;
  }
  unint64_t v21 = *(void *)(*(void *)(v18 + 424) + 8 * v20);
LABEL_12:
  unint64_t v24 = v21;
  if (v15 == sub_1CB8F1DC4(&v24) && v17 == v22) {
    return sub_1CC7382B0((uint64_t)a1);
  }
  long long v25 = *a3;
  int v26 = *((_DWORD *)a3 + 4);
  long long v27 = *(_OWORD *)a4;
  int v28 = a4[4];
  uint64_t v29 = a5;
  int v30 = 3;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*a1 + 32))(a1, 75, a2, 1, &v25, 3, 0);
}

uint64_t sub_1CC738A60(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v8[16] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(8 * a3) >= 0x41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3)
  {
    uint64_t v4 = v8;
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v6 = *a2++;
      *uint64_t v4 = v6;
      *((_DWORD *)v4 + 2) = 0;
      v4 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 32))(a1, 74, v8);
}

uint64_t sub_1CC738BB8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  v10[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v10;
  uint64_t v9 = 0x800000000;
  sub_1CC73A3BC((uint64_t)&v8, a2, &a2[4 * a3]);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void, uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 74, v8, v9, a4, 1, 0);
  if (v8 != v10) {
    free(v8);
  }
  return v6;
}

uint64_t sub_1CC738CA0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(4 * a4) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4)
  {
    uint64_t v5 = v9;
    uint64_t v6 = 4 * a4;
    do
    {
      int v7 = *a3++;
      *uint64_t v5 = v7;
      v5[4] = 0;
      v5 += 6;
      v6 -= 4;
    }
    while (v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 32))(a1, 77, a2, 1, v9);
}

uint64_t sub_1CC738E00(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(4 * a4) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4)
  {
    uint64_t v5 = v9;
    uint64_t v6 = 4 * a4;
    do
    {
      int v7 = *a3++;
      *uint64_t v5 = v7;
      v5[4] = 0;
      v5 += 6;
      v6 -= 4;
    }
    while (v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 32))(a1, 78, a2, 1, v9);
}

uint64_t sub_1CC738F60(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(4 * a4) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4)
  {
    uint64_t v5 = v9;
    uint64_t v6 = 4 * a4;
    do
    {
      int v7 = *a3++;
      *uint64_t v5 = v7;
      v5[4] = 0;
      v5 += 6;
      v6 -= 4;
    }
    while (v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 32))(a1, 79, a2, 1, v9);
}

llvm::MachineFunction *sub_1CC7390C0(void *a1, int a2, int *a3, uint64_t a4, int a5)
{
  uint64_t v9 = (llvm::MachineFunction *)a1[1];
  uint64_t v10 = 5568;
  if (a5) {
    uint64_t v10 = 5616;
  }
  uint64_t v11 = *(void *)(a1[2] + 8) + v10;
  uint64_t v12 = (unsigned __int8 *)a1[4];
  uint64_t v31 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v31, v12, 2);
  }
  uint64_t v13 = llvm::MachineFunction::CreateMachineInstr(v9, v11, &v31, 0);
  if (v31) {
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  }
  uint64_t v14 = (unint64_t *)a1[6];
  uint64_t v15 = *(void *)(a1[5] + 40);
  *((void *)v13 + 3) = v15;
  uint64_t v16 = *(void *)(v15 + 32);
  uint64_t v17 = *((unsigned int *)v13 + 10);
  if (v17)
  {
    uint64_t v24 = *((void *)v13 + 4);
    uint64_t v25 = *(void *)(v16 + 40);
    uint64_t v26 = 32 * v17;
    do
    {
      if (!*(unsigned char *)v24)
      {
        uint64_t v27 = *(unsigned int *)(v24 + 4);
        if ((int)v27 >= 0) {
          int v28 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v27);
        }
        else {
          int v28 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
        }
        uint64_t v29 = *v28;
        if (*v28)
        {
          uint64_t v30 = *(void *)(v29 + 16);
          *(void *)(v29 + 16) = v24;
          *(void *)(v24 + 16) = v30;
          if (*(unsigned char *)(v24 + 3))
          {
            *(void *)(v24 + 24) = v29;
          }
          else
          {
            *(void *)(v24 + 24) = 0;
            int v28 = (uint64_t *)(v30 + 24);
          }
        }
        else
        {
          *(void *)(v24 + 16) = v24;
          *(void *)(v24 + 24) = 0;
        }
        *int v28 = v24;
      }
      v24 += 32;
      v26 -= 32;
    }
    while (v26);
  }
  uint64_t v18 = *(void *)(v16 + 728);
  if (v18) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v18 + 24))(v18, v13);
  }
  unint64_t v19 = *v14 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v13 = v19 | *(void *)v13 & 7;
  *((void *)v13 + 1) = v14;
  *(void *)(v19 + 8) = v13;
  *uint64_t v14 = *v14 & 7 | (unint64_t)v13;
  uint64_t v20 = a1[7];
  if (v20) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, v13);
  }
  if (a4)
  {
    uint64_t v22 = 4 * a4;
    do
    {
      int v23 = *a3++;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      LODWORD(v31) = 0x1000000;
      HIDWORD(v31) = v23;
      llvm::MachineInstr::addOperand(v13, v9, (const llvm::MachineOperand *)&v31);
      v22 -= 4;
    }
    while (v22);
  }
  LODWORD(v31) = 17;
  uint64_t v32 = 0;
  LODWORD(v33) = a2;
  llvm::MachineInstr::addOperand(v13, v9, (const llvm::MachineOperand *)&v31);
  return v9;
}

uint64_t sub_1CC739300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 179, a2, 1, a3, 1, a4);
}

uint64_t sub_1CC73933C(uint64_t a1, int a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v6[0] = a2;
  v6[4] = 2;
  long long v7 = *a4;
  int v8 = *((_DWORD *)a4 + 4);
  long long v9 = *a5;
  int v10 = *((_DWORD *)a5 + 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 134, a3, 1, v6, 3, 0);
}

uint64_t sub_1CC7393E8(uint64_t a1, int a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v7[0] = a2;
  v7[4] = 2;
  long long v8 = *a4;
  int v9 = *((_DWORD *)a4 + 4);
  long long v10 = *a5;
  int v11 = *((_DWORD *)a5 + 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 135, a3, 1, v7, 3, a6);
}

uint64_t sub_1CC739494(uint64_t a1, uint64_t *a2, long long *a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  long long v7 = *a3;
  int v8 = *((_DWORD *)a3 + 4);
  long long v9 = *a4;
  int v10 = *((_DWORD *)a4 + 4);
  long long v11 = *a5;
  int v12 = *((_DWORD *)a5 + 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 136, &v13, 1, &v7, 3, a6);
}

llvm::MachineFunction *sub_1CC739558(void *a1, int a2, int a3, int a4, int a5, int a6, llvm::MachineMemOperand *a7)
{
  int v14 = (llvm::MachineFunction *)a1[1];
  uint64_t v15 = *(void *)(a1[2] + 8) + 4704;
  uint64_t v16 = (unsigned __int8 *)a1[4];
  uint64_t v33 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v33, v16, 2);
  }
  uint64_t v17 = llvm::MachineFunction::CreateMachineInstr(v14, v15, &v33, 0);
  if (v33) {
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  }
  uint64_t v18 = (unint64_t *)a1[6];
  uint64_t v19 = *(void *)(a1[5] + 40);
  *((void *)v17 + 3) = v19;
  uint64_t v20 = *(void *)(v19 + 32);
  uint64_t v21 = *((unsigned int *)v17 + 10);
  if (v21)
  {
    uint64_t v26 = *((void *)v17 + 4);
    uint64_t v27 = *(void *)(v20 + 40);
    uint64_t v28 = 32 * v21;
    do
    {
      if (!*(unsigned char *)v26)
      {
        uint64_t v29 = *(unsigned int *)(v26 + 4);
        if ((int)v29 >= 0) {
          uint64_t v30 = (uint64_t *)(*(void *)(v27 + 272) + 8 * v29);
        }
        else {
          uint64_t v30 = (uint64_t *)(*(void *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
        }
        uint64_t v31 = *v30;
        if (*v30)
        {
          uint64_t v32 = *(void *)(v31 + 16);
          *(void *)(v31 + 16) = v26;
          *(void *)(v26 + 16) = v32;
          if (*(unsigned char *)(v26 + 3))
          {
            *(void *)(v26 + 24) = v31;
          }
          else
          {
            *(void *)(v26 + 24) = 0;
            uint64_t v30 = (uint64_t *)(v32 + 24);
          }
        }
        else
        {
          *(void *)(v26 + 16) = v26;
          *(void *)(v26 + 24) = 0;
        }
        *uint64_t v30 = v26;
      }
      v26 += 32;
      v28 -= 32;
    }
    while (v28);
  }
  uint64_t v22 = *(void *)(v20 + 728);
  if (v22) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, v17);
  }
  unint64_t v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v17 = v23 | *(void *)v17 & 7;
  *((void *)v17 + 1) = v18;
  *(void *)(v23 + 8) = v17;
  unint64_t *v18 = *v18 & 7 | (unint64_t)v17;
  uint64_t v24 = a1[7];
  if (v24) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, v17);
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  LODWORD(v33) = 0x1000000;
  HIDWORD(v33) = a2;
  llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v33);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  LODWORD(v33) = 0x1000000;
  HIDWORD(v33) = a3;
  llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v33);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  LODWORD(v33) = 0;
  HIDWORD(v33) = a4;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v33);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  LODWORD(v33) = 0;
  HIDWORD(v33) = a5;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v33);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  LODWORD(v33) = 0;
  HIDWORD(v33) = a6;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v33);
  llvm::MachineInstr::addMemOperand(v17, v14, a7);
  return v14;
}

llvm::MachineFunction *sub_1CC7397E0(void *a1, unsigned int a2, int *a3, int *a4, int *a5, llvm::MachineMemOperand *a6)
{
  long long v11 = (llvm::MachineFunction *)a1[1];
  uint64_t v12 = *(void *)(a1[2] + 8) + 48 * a2;
  uint64_t v13 = (unsigned __int8 *)a1[4];
  int v54 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v54, v13, 2);
  }
  int v14 = llvm::MachineFunction::CreateMachineInstr(v11, v12, &v54, 0);
  if (v54) {
    llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
  }
  uint64_t v15 = (unint64_t *)a1[6];
  uint64_t v16 = *(void *)(a1[5] + 40);
  *((void *)v14 + 3) = v16;
  uint64_t v17 = *(void *)(v16 + 32);
  uint64_t v18 = *((unsigned int *)v14 + 10);
  if (v18)
  {
    uint64_t v40 = *((void *)v14 + 4);
    uint64_t v41 = *(void *)(v17 + 40);
    uint64_t v42 = 32 * v18;
    do
    {
      if (!*(unsigned char *)v40)
      {
        uint64_t v43 = *(unsigned int *)(v40 + 4);
        if ((int)v43 >= 0) {
          uint64_t v44 = (uint64_t *)(*(void *)(v41 + 272) + 8 * v43);
        }
        else {
          uint64_t v44 = (uint64_t *)(*(void *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
        }
        uint64_t v45 = *v44;
        if (*v44)
        {
          uint64_t v46 = *(void *)(v45 + 16);
          *(void *)(v45 + 16) = v40;
          *(void *)(v40 + 16) = v46;
          if (*(unsigned char *)(v40 + 3))
          {
            *(void *)(v40 + 24) = v45;
          }
          else
          {
            *(void *)(v40 + 24) = 0;
            uint64_t v44 = (uint64_t *)(v46 + 24);
          }
        }
        else
        {
          *(void *)(v40 + 16) = v40;
          *(void *)(v40 + 24) = 0;
        }
        *uint64_t v44 = v40;
      }
      v40 += 32;
      v42 -= 32;
    }
    while (v42);
  }
  uint64_t v19 = *(void *)(v17 + 728);
  if (v19) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v19 + 24))(v19, v14);
  }
  unint64_t v20 = *v15 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v14 = v20 | *(void *)v14 & 7;
  *((void *)v14 + 1) = v15;
  *(void *)(v20 + 8) = v14;
  *uint64_t v15 = *v15 & 7 | (unint64_t)v14;
  uint64_t v21 = a1[7];
  if (v21) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v21 + 24))(v21, v14);
  }
  int v22 = a3[2];
  if (v22 == 1)
  {
    int v23 = *a3;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    LODWORD(v54) = 0x1000000;
    HIDWORD(v54) = v23;
LABEL_12:
    llvm::MachineInstr::addOperand(v14, v11, (const llvm::MachineOperand *)&v54);
    goto LABEL_13;
  }
  uint64_t v29 = a1[3];
  if (!v22)
  {
    uint64_t v53 = a6;
    uint64_t v52 = *(void *)a3;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    unint64_t v31 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v29 + 24) + 16 * v31) = 4;
    unint64_t v32 = *(unsigned int *)(v29 + 432);
    if (v31 >= v32)
    {
      uint64_t v33 = *(void *)(v29 + 440);
      uint64_t v34 = v31 + 1 - v32;
      if (v31 >= *(unsigned int *)(v29 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v35 = *(_DWORD *)(v29 + 432);
      if (v34)
      {
        uint64_t v36 = (void *)(*(void *)(v29 + 424) + 8 * *(unsigned int *)(v29 + 432));
        uint64_t v37 = ~v31 + v32;
        do
          *v36++ = v33;
        while (!__CFADD__(v37++, 1));
        int v35 = *(_DWORD *)(v29 + 432);
      }
      *(_DWORD *)(v29 + 432) = v35 + v34;
    }
    *(void *)(*(void *)(v29 + 424) + 8 * v31) = v52;
    uint64_t v39 = *(void *)(v29 + 8);
    a6 = v53;
    if (!v39) {
      goto LABEL_32;
    }
    goto LABEL_54;
  }
  if (v22 == 2)
  {
    uint64_t v49 = *(void *)a3;
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, (unsigned __int8 *)&unk_1CFBE11C5, 0);
    *(void *)(*(void *)(v29 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v49 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v39 = *(void *)(v29 + 8);
    if (!v39)
    {
LABEL_32:
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      LODWORD(v54) = 0x1000000;
      HIDWORD(v54) = IncompleteVirtualRegister;
      goto LABEL_12;
    }
LABEL_54:
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
    goto LABEL_32;
  }
LABEL_13:
  int v24 = a4[4];
  switch(v24)
  {
    case 0:
      int v25 = *a4;
LABEL_15:
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      LODWORD(v54) = 0;
      HIDWORD(v54) = v25;
      uint64_t v57 = 0;
LABEL_16:
      llvm::MachineInstr::addOperand(v14, v11, (const llvm::MachineOperand *)&v54);
      break;
    case 1:
      int v25 = *(_DWORD *)(*(void *)(*((void *)a4 + 1) + 32) + 4);
      goto LABEL_15;
    case 2:
      int v47 = *a4;
      LODWORD(v54) = 18;
      uint64_t v55 = 0;
      LODWORD(v56) = v47;
      goto LABEL_16;
    case 3:
      uint64_t v50 = *(void *)a4;
      LODWORD(v54) = 1;
      uint64_t v55 = 0;
      uint64_t v56 = v50;
      goto LABEL_16;
  }
  int v26 = a5[4];
  switch(v26)
  {
    case 0:
      int v27 = *a5;
LABEL_19:
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      LODWORD(v54) = 0;
      HIDWORD(v54) = v27;
      uint64_t v57 = 0;
      break;
    case 1:
      int v27 = *(_DWORD *)(*(void *)(*((void *)a5 + 1) + 32) + 4);
      goto LABEL_19;
    case 2:
      int v48 = *a5;
      LODWORD(v54) = 18;
      uint64_t v55 = 0;
      LODWORD(v56) = v48;
      break;
    case 3:
      uint64_t v51 = *(void *)a5;
      LODWORD(v54) = 1;
      uint64_t v55 = 0;
      uint64_t v56 = v51;
      break;
    default:
      goto LABEL_21;
  }
  llvm::MachineInstr::addOperand(v14, v11, (const llvm::MachineOperand *)&v54);
LABEL_21:
  llvm::MachineInstr::addMemOperand(v14, v11, a6);
  return v11;
}

uint64_t sub_1CC739C54(void *a1, unsigned int a2, unint64_t *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  long long v9 = a5;
  long long v11 = a3;
  if (a2 == 76)
  {
    if (a6 == 1) {
      return sub_1CC7382B0((uint64_t)a1);
    }
    uint64_t v58 = a1[3];
    int v59 = *((_DWORD *)a3 + 2);
    if (v59 == 1)
    {
      if ((*(_DWORD *)a3 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      uint64_t v60 = *(_DWORD *)a3 & 0x7FFFFFFF;
      if (v60 >= *(_DWORD *)(v58 + 432)) {
        goto LABEL_3;
      }
      uint64_t v61 = (uint64_t *)(*(void *)(v58 + 424) + 8 * v60);
    }
    else
    {
      uint64_t v61 = (uint64_t *)a3;
      if (v59) {
        goto LABEL_3;
      }
    }
    uint64_t v62 = *v61;
    if ((v62 & 0xFFFFFFFFFFFFFFF9) == 0 || (v62 & 4) == 0) {
      goto LABEL_3;
    }
    if (a5[4] == 1)
    {
      int v63 = *(_DWORD *)(*(void *)(*((void *)a5 + 1) + 32) + 4);
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_104;
      }
    }
    else
    {
      int v63 = *a5;
      if ((*a5 & 0x80000000) == 0) {
        goto LABEL_104;
      }
    }
    unsigned int v79 = v63 & 0x7FFFFFFF;
    if (v79 < *(_DWORD *)(v58 + 432))
    {
      uint64_t v80 = *(void *)(*(void *)(v58 + 424) + 8 * v79);
      unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF9;
      uint64_t v82 = v80 & 4;
      if (v81 && v82 != 0)
      {
        uint64_t v84 = *(uint64_t (**)(void))(*a1 + 32);
        return v84();
      }
    }
LABEL_104:
    uint64_t v84 = *(uint64_t (**)(void))(*a1 + 32);
    return v84();
  }
  if (a2 == 78)
  {
    uint64_t v64 = a1[3];
    if (a5[4] == 1)
    {
      int v65 = *(_DWORD *)(*(void *)(*((void *)a5 + 1) + 32) + 4);
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_106;
      }
    }
    else
    {
      int v65 = *a5;
      if ((*a5 & 0x80000000) == 0) {
        goto LABEL_106;
      }
    }
    unsigned int v66 = v65 & 0x7FFFFFFF;
    if (v66 < *(_DWORD *)(v64 + 432))
    {
      uint64_t v67 = *(unsigned __int8 **)(*(void *)(v64 + 424) + 8 * v66);
      goto LABEL_82;
    }
LABEL_106:
    uint64_t v67 = 0;
LABEL_82:
    BOOL v95 = v67;
    uint64_t v68 = sub_1CB8F1DC4((unint64_t *)&v95);
    int v70 = v69;
    int v71 = *((_DWORD *)v11 + 2);
    if (v71 == 1)
    {
      if ((*(_DWORD *)v11 & 0x80000000) != 0)
      {
        uint64_t v72 = a1[3];
        uint64_t v73 = *(_DWORD *)v11 & 0x7FFFFFFF;
        if (v73 < *(_DWORD *)(v72 + 432))
        {
          unsigned int v74 = (unint64_t *)(*(void *)(v72 + 424) + 8 * v73);
          goto LABEL_86;
        }
      }
    }
    else
    {
      unsigned int v74 = v11;
      if (!v71)
      {
LABEL_86:
        unint64_t v75 = *v74;
        if ((*v74 & 2) != 0)
        {
          char v87 = 35;
          char v88 = 19;
          if ((v75 & 4) == 0) {
            char v87 = 19;
          }
          unint64_t v89 = v75 >> v87;
          if ((v75 & 4) == 0) {
            char v88 = 3;
          }
          if (v75) {
            char v88 = 3;
          }
          unint64_t v77 = (8 * (unsigned __int16)(v75 >> v88)) & 0xFFFFF8000007FFFFLL | ((v89 & 0xFFFFFF) << 19) | 2;
LABEL_90:
          unint64_t v94 = v77;
          if (v68 != sub_1CB8F1DC4(&v94) || v70 != v78) {
            goto LABEL_3;
          }
          goto LABEL_104;
        }
LABEL_87:
        char v76 = 3;
        if ((v75 & 1) == 0) {
          char v76 = 19;
        }
        unint64_t v77 = v75 & 0x8000000000000000 | (8 * (v75 >> v76)) | 1;
        goto LABEL_90;
      }
    }
    unint64_t v75 = 0;
    goto LABEL_87;
  }
LABEL_3:
  int v14 = (llvm::MachineFunction *)a1[1];
  uint64_t v15 = *(void *)(a1[2] + 8) + 48 * a2;
  uint64_t v16 = (unsigned __int8 *)a1[4];
  BOOL v95 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v95, v16, 2);
  }
  uint64_t v17 = llvm::MachineFunction::CreateMachineInstr(v14, v15, &v95, 0);
  if (v95) {
    llvm::MetadataTracking::untrack((uint64_t)&v95, v95);
  }
  uint64_t v18 = (unint64_t *)a1[6];
  uint64_t v19 = *(void *)(a1[5] + 40);
  *((void *)v17 + 3) = v19;
  uint64_t v20 = *(void *)(v19 + 32);
  uint64_t v21 = *((unsigned int *)v17 + 10);
  if (v21)
  {
    uint64_t v46 = *((void *)v17 + 4);
    uint64_t v47 = *(void *)(v20 + 40);
    uint64_t v48 = 32 * v21;
    do
    {
      if (!*(unsigned char *)v46)
      {
        uint64_t v49 = *(unsigned int *)(v46 + 4);
        if ((int)v49 >= 0) {
          uint64_t v50 = (uint64_t *)(*(void *)(v47 + 272) + 8 * v49);
        }
        else {
          uint64_t v50 = (uint64_t *)(*(void *)(v47 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
        }
        uint64_t v51 = *v50;
        if (*v50)
        {
          uint64_t v52 = *(void *)(v51 + 16);
          *(void *)(v51 + 16) = v46;
          *(void *)(v46 + 16) = v52;
          if (*(unsigned char *)(v46 + 3))
          {
            *(void *)(v46 + 24) = v51;
          }
          else
          {
            *(void *)(v46 + 24) = 0;
            uint64_t v50 = (uint64_t *)(v52 + 24);
          }
        }
        else
        {
          *(void *)(v46 + 16) = v46;
          *(void *)(v46 + 24) = 0;
        }
        *uint64_t v50 = v46;
      }
      v46 += 32;
      v48 -= 32;
    }
    while (v48);
  }
  uint64_t v22 = *(void *)(v20 + 728);
  if (v22) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, v17);
  }
  unint64_t v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v17 = v23 | *(void *)v17 & 7;
  *((void *)v17 + 1) = v18;
  *(void *)(v23 + 8) = v17;
  unint64_t *v18 = *v18 & 7 | (unint64_t)v17;
  uint64_t v24 = a1[7];
  if (v24) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, v17);
  }
  if (a4)
  {
    int v25 = &v11[2 * a4];
    int v26 = &v97;
    do
    {
      int v27 = *((_DWORD *)v11 + 2);
      if (v27 == 1)
      {
        int v28 = *(_DWORD *)v11;
        uint64_t v96 = 0;
        *int v26 = 0;
        v26[1] = 0;
        LODWORD(v95) = 0x1000000;
        HIDWORD(v95) = v28;
        llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v95);
      }
      else
      {
        uint64_t v29 = a1[3];
        v93 = v26;
        if (v27)
        {
          if (v27 == 2)
          {
            BOOL v92 = v25;
            uint64_t v53 = v8;
            unint64_t v54 = *v11;
            int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, (unsigned __int8 *)&unk_1CFBE11C5, 0);
            *(void *)(*(void *)(v29 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v54 & 0xFFFFFFFFFFFFFFFBLL;
            uint64_t v56 = *(void *)(v29 + 8);
            if (v56) {
              (*(void (**)(uint64_t))(*(void *)v56 + 24))(v56);
            }
            uint64_t v96 = 0;
            uint64_t v97 = 0;
            uint64_t v98 = 0;
            LODWORD(v95) = 0x1000000;
            HIDWORD(v95) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v95);
            uint64_t v8 = v53;
            int v25 = v92;
            int v26 = v93;
          }
        }
        else
        {
          uint64_t v91 = a7;
          unint64_t v90 = *v11;
          int v30 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, (unsigned __int8 *)&unk_1CFBE11C5, 0);
          unint64_t v31 = v30 & 0x7FFFFFFF;
          *(void *)(*(void *)(v29 + 24) + 16 * v31) = 4;
          unint64_t v32 = *(unsigned int *)(v29 + 432);
          if (v31 >= v32)
          {
            uint64_t v33 = *(void *)(v29 + 440);
            if (v31 >= *(unsigned int *)(v29 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v34 = *(_DWORD *)(v29 + 432);
            uint64_t v35 = v31 + 1 - v32;
            if (v35)
            {
              uint64_t v36 = (void *)(*(void *)(v29 + 424) + 8 * v32);
              uint64_t v37 = ~v31 + v32;
              do
                *v36++ = v33;
              while (!__CFADD__(v37++, 1));
              int v34 = *(_DWORD *)(v29 + 432);
            }
            *(_DWORD *)(v29 + 432) = v34 + v35;
          }
          *(void *)(*(void *)(v29 + 424) + 8 * v31) = v90;
          uint64_t v39 = *(void *)(v29 + 8);
          int v26 = v93;
          if (v39)
          {
            int v86 = v30;
            (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
            int v30 = v86;
          }
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          uint64_t v98 = 0;
          LODWORD(v95) = 0x1000000;
          HIDWORD(v95) = v30;
          llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v95);
          a7 = v91;
        }
      }
      v11 += 2;
    }
    while (v11 != v25);
  }
  if (v8)
  {
    for (uint64_t i = 24 * v8; i; i -= 24)
    {
      int v41 = v9[4];
      if (v41)
      {
        switch(v41)
        {
          case 1:
            int v43 = *(_DWORD *)(*(void *)(*((void *)v9 + 1) + 32) + 4);
            uint64_t v96 = 0;
            uint64_t v97 = 0;
            LODWORD(v95) = 0;
            HIDWORD(v95) = v43;
            uint64_t v98 = 0;
            break;
          case 2:
            int v45 = *v9;
            LODWORD(v95) = 18;
            uint64_t v96 = 0;
            LODWORD(v97) = v45;
            break;
          case 3:
            uint64_t v57 = *(void *)v9;
            LODWORD(v95) = 1;
            uint64_t v96 = 0;
            uint64_t v97 = v57;
            break;
          default:
            goto LABEL_35;
        }
      }
      else
      {
        int v42 = *v9;
        uint64_t v96 = 0;
        LODWORD(v95) = 0;
        HIDWORD(v95) = v42;
        uint64_t v97 = 0;
        uint64_t v98 = 0;
      }
      llvm::MachineInstr::addOperand(v17, v14, (const llvm::MachineOperand *)&v95);
LABEL_35:
      v9 += 6;
    }
  }
  if ((a7 & 0xFF00000000) != 0) {
    *((_WORD *)v17 + 22) = *((_WORD *)v17 + 22) & 0xC | a7 & 0xFFF3;
  }
  return (uint64_t)v14;
}

uint64_t sub_1CC73A3BC(uint64_t result, char *a2, char *a3)
{
  unsigned int v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 2) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (_DWORD *)(*(void *)result + 16 * v4);
    do
    {
      int v6 = *(_DWORD *)v3;
      v3 += 4;
      *uint64_t v5 = v6;
      v5[2] = 1;
      v5 += 4;
    }
    while (v3 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 2);
  return result;
}

void sub_1CC73A454(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeMachineBlockFrequencyInfoPass(a1, a2);
  llvm::initializeMachineBranchProbabilityInfoPass(a1, v3);
  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC73A504(uint64_t *a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  v29[28] = *MEMORY[0x1E4F143B8];
  *((void *)&v22 + 1) = -1;
  uint64_t v23 = -1;
  *(void *)&long long v22 = -1;
  int v27 = v29;
  uint64_t v28 = 0x400000000;
  uint64_t v7 = *((unsigned int *)a3 + 2);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  int v10 = *a3;
  uint64_t v11 = (uint64_t)&(*a3)[v7];
  do
  {
    uint64_t v12 = *v10;
    sub_1CC73A70C((uint64_t)&v24, a1, a2, *v10, (uint64_t)&v27, (unint64_t *)&v22);
    if (sub_1CD62EDB4((unint64_t *)&v24, (unint64_t *)&v22))
    {
      long long v22 = v24;
      uint64_t v23 = (uint64_t)v25[0];
      uint64_t v13 = *(unsigned int *)(a4 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)a4 - 40;
        uint64_t v15 = 56 * v13;
        do
        {
          sub_1CD6308C0((char **)(v14 + v15));
          v15 -= 56;
        }
        while (v15);
      }
      *(_DWORD *)(a4 + 8) = 0;
      if (v28)
      {
        uint64_t v16 = (uint64_t *)v27;
        uint64_t v17 = 56 * v28;
        do
        {
          sub_1CD62F008((uint64_t *)a4, v16);
          v16 += 7;
          v17 -= 56;
        }
        while (v17);
      }
      uint64_t v9 = v12;
    }
    ++v10;
  }
  while (v10 != (uint64_t *)v11);
  if (!v9)
  {
LABEL_13:
    if (*(_DWORD *)(*(void *)(a1[47] + 112) + 1024) == 1)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = **a3;
      *(void *)&long long v24 = 3;
      WORD4(v24) = 0;
      v25[0] = (char *)v26;
      v25[1] = (char *)0x200000000;
      v26[2] = a1;
      sub_1CD62F008((uint64_t *)a4, (uint64_t *)&v24);
      sub_1CD6308C0(v25);
    }
  }
  uint64_t v18 = v27;
  if (v28)
  {
    uint64_t v19 = (char *)v27 - 40;
    uint64_t v20 = 56 * v28;
    do
    {
      sub_1CD6308C0((char **)&v19[v20]);
      v20 -= 56;
    }
    while (v20);
    uint64_t v18 = v27;
  }
  if (v18 != v29) {
    free(v18);
  }
  return v9;
}

uint64_t sub_1CC73A70C(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v6 = result;
  v79[3] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == -2 || *(void *)(a4 + 8) == 0)
  {
    *(void *)(result + 8) = -1;
    *(void *)(result + 16) = -1;
    *(void *)uint64_t result = -1;
    return result;
  }
  uint64_t v13 = a2[34];
  if (!v13)
  {
    uint64_t v22 = 1;
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(v13 + 248);
  if (!v14) {
    goto LABEL_111;
  }
  int v15 = *(_DWORD *)(v14 + 176);
  if (!v15) {
    goto LABEL_111;
  }
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v14 + 160);
  unsigned int v18 = v15 - 1;
  uint64_t v19 = (v15 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  uint64_t v20 = *(void *)(v17 + 16 * v19);
  if (v20 != v16)
  {
    int v63 = 1;
    while (v20 != -4096)
    {
      int v64 = v19 + v63++;
      uint64_t v19 = v64 & v18;
      uint64_t v20 = *(void *)(v17 + 16 * v19);
      if (v20 == v16) {
        goto LABEL_11;
      }
    }
    goto LABEL_111;
  }
LABEL_11:
  uint64_t v21 = *(unsigned int *)(v17 + 16 * v19 + 8);
  if (v21 == 0xFFFFFFFFLL)
  {
LABEL_111:
    uint64_t v22 = 0;
    goto LABEL_14;
  }
  uint64_t v22 = *(void *)(*(void *)(v14 + 8) + 24 * v21 + 16);
LABEL_14:
  uint64_t v75 = v22;
  uint64_t v73 = *(unsigned int *)(a4 + 4);
  long long v74 = *(unsigned int *)(a4 + 4);
  uint64_t v23 = *(unsigned int *)(a5 + 8);
  if (v23)
  {
    uint64_t v24 = *(void *)a5 - 40;
    uint64_t v25 = 56 * v23;
    do
    {
      uint64_t result = (uint64_t)sub_1CD6308C0((char **)(v24 + v25));
      v25 -= 56;
    }
    while (v25);
  }
  *(_DWORD *)(a5 + 8) = 0;
  if (a6 && (*a6 != v73 || a6[1] || v22 != a6[2]))
  {
    uint64_t result = sub_1CD62EDB4(a6, (unint64_t *)&v74);
    if (result)
    {
      *(_OWORD *)uint64_t v6 = v74;
      *(void *)(v6 + 16) = v75;
      return result;
    }
  }
  uint64_t v68 = a5;
  uint64_t v69 = v22;
  uint64_t v72 = v6;
  int v70 = a6;
  uint64_t v26 = *(unsigned int *)(a4 + 16);
  if (!v26)
  {
LABEL_104:
    *(_OWORD *)uint64_t v72 = v74;
    *(void *)(v72 + 16) = v75;
    return result;
  }
  uint64_t v27 = 0;
  LOBYTE(v71) = 0;
  uint64_t v28 = (char *)&v74 + 8;
  uint64_t v67 = 0;
  while (1)
  {
    uint64_t v29 = *(void *)(a3 + 32);
    uint64_t v30 = v29 + 32 * v27;
    if (*(unsigned char *)v30) {
      goto LABEL_27;
    }
    unsigned int v31 = *(_DWORD *)(v30 + 4);
    if (!v31) {
      goto LABEL_27;
    }
    unint64_t v32 = (_DWORD *)(*(void *)(a4 + 8) + 16 * v27);
    if (v32[2] != 1) {
      break;
    }
    uint64_t result = llvm::RegisterBankInfo::getRegBank(a2[31], v31, a2[32], a2[33]);
    if (result != *(void *)(*(void *)v32 + 8))
    {
      if (result) {
        break;
      }
      LODWORD(v76) = 2;
      HIDWORD(v76) = v27;
      __int16 v77 = 1;
      v78[0] = (char *)v79;
      v78[1] = (char *)0x200000000;
      v79[2] = a2;
      sub_1CD62F008((uint64_t *)v68, &v76);
      uint64_t result = (uint64_t)sub_1CD6308C0(v78);
    }
LABEL_27:
    if (++v27 == v26) {
      goto LABEL_104;
    }
  }
  unsigned int v66 = v28;
  sub_1CD62F658((uint64_t)&v76, a3, v27, a2[33], (uint64_t)a2);
  sub_1CD62F008((uint64_t *)v68, &v76);
  uint64_t result = (uint64_t)sub_1CD6308C0(v78);
  uint64_t v33 = *(void *)v68 + 56 * *(unsigned int *)(v68 + 8);
  if (*(unsigned char *)(v33 - 47))
  {
    int v34 = v32[2];
    if (*(unsigned char *)(v30 + 3))
    {
      if ((*(_DWORD *)(v30 + 4) - 1) >= 0x3FFFFFFF && v34 != 1)
      {
        *(_DWORD *)(v33 - 56) = 3;
        uint64_t v40 = *(unsigned int *)(v33 - 32);
        if (v40)
        {
          uint64_t v41 = 8 * v40;
          uint64_t v42 = *(void *)(v33 - 40) - 8;
          do
          {
            uint64_t result = *(void *)(v42 + v41);
            *(void *)(v42 + v41) = 0;
            if (result) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
            }
            v41 -= 8;
          }
          while (v41);
          LOBYTE(v40) = 0;
        }
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v35 = *(void *)(v29 + 32 * v27 + 8);
      unint64_t v36 = *(void *)(*(void *)(v35 + 16) + 8);
      if ((*(_WORD *)(v35 + 44) & 0xC) != 0 && (*(_WORD *)(v35 + 44) & 4) == 0)
      {
        if ((v36 & 0x200) != 0) {
          goto LABEL_62;
        }
        while ((*(_WORD *)(v35 + 44) & 8) != 0)
        {
          uint64_t v35 = *(void *)(v35 + 8);
          if ((*(unsigned char *)(*(void *)(v35 + 16) + 9) & 2) != 0) {
            goto LABEL_62;
          }
        }
        LOBYTE(v38) = 0;
      }
      else
      {
        uint64_t v38 = (v36 >> 9) & 1;
      }
      if ((v38 & 1) == 0 && v34 == 1)
      {
        *(_DWORD *)(v33 - 56) = 2;
        uint64_t v43 = *(unsigned int *)(v33 - 32);
        if (v43)
        {
          uint64_t v44 = 8 * v43;
          uint64_t v45 = *(void *)(v33 - 40) - 8;
          do
          {
            uint64_t result = *(void *)(v45 + v44);
            *(void *)(v45 + v44) = 0;
            if (result) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
            }
            v44 -= 8;
          }
          while (v44);
        }
        LOBYTE(v40) = 1;
LABEL_61:
        *(_DWORD *)(v33 - 32) = 0;
        *(unsigned char *)(v33 - 48) = v40;
        *(unsigned char *)(v33 - 47) = 0;
      }
    }
  }
LABEL_62:
  if (!*(unsigned char *)(v33 - 48)) {
    goto LABEL_112;
  }
  if ((v70 == 0) | v71 & 1)
  {
    uint64_t v28 = v66;
    goto LABEL_27;
  }
  uint64_t v46 = v33;
  uint64_t result = sub_1CD62ECBC(a2, (_DWORD *)v30, v32);
  uint64_t v28 = v66;
  if (result != 0xFFFFFFFFLL)
  {
    uint64_t v47 = *(unsigned int *)(v46 - 32);
    if (!v47)
    {
      LOBYTE(v71) = 0;
      goto LABEL_27;
    }
    uint64_t v48 = result;
    uint64_t v49 = *(void **)(v46 - 40);
    unint64_t v65 = result + (5 * result + 99) / 0x64uLL;
    uint64_t v50 = 8 * v47 - 8;
    uint64_t v51 = v67;
    while (2)
    {
      if ((*(uint64_t (**)(void))(*(void *)*v49 + 40))())
      {
        uint64_t v52 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*v49 + 48))(*v49, a2);
        uint64_t v53 = v52 * v65;
        if (v52 * v65 >= v65)
        {
          BOOL v54 = __CFADD__(v53, v51);
          v51 += v53;
          if (!v54)
          {
            *((void *)&v74 + 1) = v51;
            uint64_t v55 = v73;
            BOOL v58 = v73 == -2 && v51 == -1 && v69 == -1;
            int v71 = v58;
            uint64_t v67 = v51;
            goto LABEL_94;
          }
        }
      }
      else
      {
        uint64_t v55 = v73 + v48;
        if (!__CFADD__(v73, v48))
        {
          *(void *)&long long v74 = v73 + v48;
          BOOL v61 = v55 == -2 && v51 == -1 && v69 == -1;
          int v71 = v61;
          goto LABEL_94;
        }
      }
      *(void *)unsigned int v66 = -1;
      *((void *)v66 + 1) = -1;
      uint64_t v69 = -1;
      uint64_t v55 = -2;
      *(void *)&long long v74 = -2;
      int v71 = 1;
      uint64_t v67 = -1;
      uint64_t v51 = -1;
LABEL_94:
      uint64_t result = (uint64_t)v70;
      uint64_t v73 = v55;
      if (v55 != *v70 || v51 != v70[1] || v69 != v70[2])
      {
        uint64_t result = sub_1CD62EDB4(v70, (unint64_t *)&v74);
        if (result) {
          goto LABEL_104;
        }
      }
      ++v49;
      int v62 = v71;
      if (!v50) {
        int v62 = 1;
      }
      v50 -= 8;
      if (v62 == 1) {
        goto LABEL_27;
      }
      continue;
    }
  }
LABEL_112:
  *(void *)(v72 + 8) = -1;
  *(void *)(v72 + 16) = -1;
  *(void *)uint64_t v72 = -1;
  return result;
}

uint64_t sub_1CC73AD5C()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = "Mode of the RegBankSelect pass";
  *((void *)&v3 + 1) = 30;
  int v1 = 0;
  int v2 = 1;
  v4[0] = v5;
  v5[0] = "regbankselect-fast";
  v5[1] = 18;
  int v6 = 0;
  uint64_t v7 = "Run the Fast mode (default mapping)";
  uint64_t v8 = 35;
  uint64_t v9 = "regbankselect-greedy";
  uint64_t v10 = 20;
  int v11 = 1;
  uint64_t v12 = "Use the Greedy mode (best local mapping)";
  uint64_t v13 = 40;
  v4[1] = (void *)0x400000002;
  sub_1CD6309EC(&v3, &v2, &v1, (uint64_t)v4);
  if (v4[0] != v5) {
    free(v4[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD62E50C, &qword_1EBCDA008, &dword_1CB82C000);
}

void sub_1CC73AE6C()
{
}

uint64_t sub_1CC73AF08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 184))(*(void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 40);
  int v5 = *(_DWORD *)(v4 + 32);
  if (v5)
  {
    int v6 = 0;
    uint64_t v7 = *(void *)(v4 + 24);
    uint64_t v8 = **(void **)(v3 + 8) | 4;
    do
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * (v6 & 0x7FFFFFFF));
      if ((unint64_t)*v9 <= 7) {
        *uint64_t v9 = v8;
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return 1;
}

const char *sub_1CC73AF98()
{
  return "SingleRegBankSelect";
}

double sub_1CC73AFA8@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 33;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

double sub_1CC73AFD0@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 64;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CC73AFF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(unsigned int *)(a8 + 4);
  uint64_t v15 = v14 & 0x7FFFFFFF;
  uint64_t v16 = (uint64_t *)(a3[3] + 16 * v15);
  unint64_t v17 = *v16 & 0xFFFFFFFFFFFFFFF8;
  if ((*v16 & 4) != 0) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = *v16 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*v16 & 4) != 0)
  {
    if (!v17
      || ((*(void *)(*(void *)(v17 + 24)
                     + (((unint64_t)*(unsigned __int16 *)(*(void *)a7 + 24) >> 3) & 0x1FF8)) >> *(_WORD *)(*(void *)a7 + 24)) & 1) != 0)
    {
      *uint64_t v16 = a7;
      goto LABEL_10;
    }
  }
  else if (sub_1CC38D61C(a3, *(_DWORD *)(a8 + 4), v17, a7, 0))
  {
    goto LABEL_10;
  }
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister((uint64_t)a3, a7, "", 0);
  if (VirtualRegister != v14)
  {
    uint64_t v40 = VirtualRegister;
    uint64_t v41 = *(void *)(a6 + 24);
    if (*(unsigned char *)(a8 + 3))
    {
      uint64_t v45 = a6;
      if ((*(unsigned char *)a6 & 4) == 0)
      {
        uint64_t v45 = a6;
        if ((*(_WORD *)(a6 + 44) & 8) != 0)
        {
          uint64_t v45 = a6;
          do
            uint64_t v45 = *(void *)(v45 + 8);
          while ((*(_WORD *)(v45 + 44) & 8) != 0);
        }
      }
      uint64_t v42 = sub_1CB85AA4C(v41, *(unint64_t **)(v45 + 8), (unsigned __int8 **)(a6 + 56), *(void *)(a4 + 8) + 912, v14);
      uint64_t v44 = v46;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      int v50 = v40;
    }
    else
    {
      uint64_t v42 = sub_1CB85AA4C(v41, (unint64_t *)a6, (unsigned __int8 **)(a6 + 56), *(void *)(a4 + 8) + 912, v40);
      uint64_t v44 = v43;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      int v50 = v14;
    }
    int v49 = 0;
    uint64_t v53 = 0;
    llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v49);
    uint64_t v47 = *(void *)(a1 + 736);
    if (v47) {
      (*(void (**)(uint64_t, void))(*(void *)v47 + 32))(v47, *(void *)(a8 + 8));
    }
    llvm::MachineOperand::setReg(a8, v40);
    uint64_t v48 = *(void *)(a1 + 736);
    if (v48) {
      (*(void (**)(uint64_t, void))(*(void *)v48 + 40))(v48, *(void *)(a8 + 8));
    }
    return v40;
  }
LABEL_10:
  uint64_t v19 = a3[3];
  uint64_t v20 = *(void *)(v19 + 16 * v15);
  if ((v20 & 4) != 0) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v18 != v21)
  {
    uint64_t v22 = *(void *)(a1 + 736);
    if (v22)
    {
      if ((*(unsigned char *)(a8 + 3) & 1) == 0)
      {
        if ((v14 & 0x80000000) != 0) {
          uint64_t v24 = (uint64_t *)(v19 + 16 * v15 + 8);
        }
        else {
          uint64_t v24 = (uint64_t *)(a3[34] + 8 * v14);
        }
        uint64_t v25 = *v24;
        if (v25
          && ((*(unsigned char *)(v25 + 3) & 1) != 0 || (uint64_t v25 = *(void *)(v25 + 24)) != 0 && (*(unsigned char *)(v25 + 3) & 1) != 0))
        {
          uint64_t v26 = *(void *)(v25 + 8);
        }
        else
        {
          uint64_t v26 = 0;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 40))(v22, v26);
      }
      sub_1CC6EE548(v22, (uint64_t)a3, v14);
      uint64_t v27 = *(char **)(v22 + 8);
      uint64_t v28 = *(char **)(v22 + 16);
      uint64_t v29 = 24;
      if (v28 == v27) {
        uint64_t v29 = 28;
      }
      uint64_t v30 = *(unsigned int *)(v22 + v29);
      unsigned int v31 = *(unint64_t **)(v22 + 16);
      if (v30)
      {
        uint64_t v32 = 0;
        while (*(void *)&v28[v32] >= 0xFFFFFFFFFFFFFFFELL)
        {
          v32 += 8;
          if (8 * v30 == v32) {
            goto LABEL_38;
          }
        }
        unsigned int v31 = (unint64_t *)&v28[v32];
      }
      uint64_t v33 = (unint64_t *)&v28[8 * v30];
      if (v31 != v33)
      {
        unint64_t v34 = *v31;
LABEL_33:
        (*(void (**)(uint64_t, unint64_t))(*(void *)v22 + 40))(v22, v34);
        uint64_t v35 = v31 + 1;
        while (v35 != v33)
        {
          unint64_t v36 = *v35++;
          unint64_t v34 = v36;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unsigned int v31 = v35 - 1;
            goto LABEL_33;
          }
        }
        uint64_t v27 = *(char **)(v22 + 8);
        uint64_t v28 = *(char **)(v22 + 16);
      }
LABEL_38:
      if (v28 != v27)
      {
        uint64_t v37 = *(unsigned int *)(v22 + 24);
        if (v37 >= 0x21 && 4 * (*(_DWORD *)(v22 + 28) - *(_DWORD *)(v22 + 32)) < v37)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v22 + 8));
          return v14;
        }
        memset(v28, 255, 8 * v37);
      }
      *(_DWORD *)(v22 + 28) = 0;
      *(_DWORD *)(v22 + 32) = 0;
    }
  }
  return v14;
}

uint64_t sub_1CC73B398(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v15 = *(unsigned int *)(a8 + 4);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, void *, uint64_t))(*(void *)a4 + 16))(a4, a7, a9, a2, a1);
  if (!v16) {
    return v15;
  }
  unint64_t v17 = (void *)v16;
  uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, void *))(*a2 + 568))(a2, a8, a3);
  if (v17 == (void *)v18)
  {
    unint64_t v21 = v17;
  }
  else if (v18 && (uint64_t v24 = a2[30], v25 = (unint64_t)(a2[31] - v24) >> 3, v25))
  {
    unsigned int v26 = 0;
    uint64_t v27 = *(_DWORD **)(v18 + 8);
    uint64_t v28 = (_DWORD *)v17[1];
    while (1)
    {
      unsigned int v29 = *v27 & *v28;
      if (v29) {
        break;
      }
      unint64_t v21 = 0;
      ++v27;
      ++v28;
      v26 += 32;
      if (v26 >= v25) {
        goto LABEL_5;
      }
    }
    unint64_t v21 = *(void **)(v24 + 8 * (__clz(__rbit32(v29)) + v26));
  }
  else
  {
    unint64_t v21 = 0;
  }
LABEL_5:
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v17;
  }
  if (*(unsigned char *)(*v22 + 31)) {
    goto LABEL_9;
  }
  uint64_t v30 = (unsigned int *)v22[1];
  uint64_t v31 = a2[30];
  unint64_t v32 = (unint64_t)(a2[31] - v31) >> 3;
  unsigned int v33 = *v30;
  if (!*v30)
  {
    unsigned int v34 = 0;
    while (1)
    {
      v34 += 32;
      if (v34 >= v32) {
        return v15;
      }
      unsigned int v42 = v30[1];
      ++v30;
      unsigned int v33 = v42;
      if (v42) {
        goto LABEL_21;
      }
    }
  }
  unsigned int v34 = 0;
LABEL_21:
  unsigned int v35 = __clz(__rbit32(v33));
  unsigned int v36 = v35 | v34;
  if ((v35 | v34) == v32) {
    return v15;
  }
  unsigned int v37 = v33 >> v35;
  while (1)
  {
    uint64_t v22 = *(void **)(v31 + 8 * v36);
    if (*(unsigned char *)(*v22 + 31)) {
      break;
    }
    if (v37 <= 1)
    {
      while (1)
      {
        v34 += 32;
        if (v34 >= v32) {
          return v15;
        }
        unsigned int v39 = v30[1];
        ++v30;
        unsigned int v38 = v39;
        if (v39)
        {
          unsigned int v40 = v34;
          goto LABEL_30;
        }
      }
    }
    unsigned int v40 = v36 + 1;
    unsigned int v38 = v37 >> 1;
LABEL_30:
    unsigned int v41 = __clz(__rbit32(v38));
    unsigned int v36 = v41 + v40;
    unsigned int v37 = v38 >> v41;
    if (v36 == v32) {
      return v15;
    }
  }
LABEL_9:

  return sub_1CC73AFF8(a1, v19, a3, a4, v20, a6, (uint64_t)v22, a8);
}

uint64_t sub_1CC73B5D0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1[3] + 32);
  uint64_t v7 = *(void **)(v6 + 40);
  unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands((uint64_t)a1);
  if (NumExplicitOperands)
  {
    unint64_t v9 = 0;
    uint64_t v10 = NumExplicitOperands;
    while (1)
    {
      uint64_t v11 = a1[4] + 32 * v9;
      if (!*(unsigned char *)v11)
      {
        if (*(_DWORD *)(v11 + 4) >> 30) {
          break;
        }
      }
LABEL_4:
      if (++v9 == v10) {
        return 1;
      }
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, unint64_t, void *, uint64_t))(*(void *)a2 + 16))(a2, a1[2], v9, a3, v6);
    if (v12)
    {
      uint64_t v13 = (void *)v12;
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, void *))(*a3 + 568))(a3, v11, v7);
      if (v13 == (void *)v14)
      {
        unint64_t v17 = v13;
      }
      else if (v14 && (uint64_t v21 = a3[30], v22 = (unint64_t)(a3[31] - v21) >> 3, v22))
      {
        unsigned int v23 = 0;
        uint64_t v24 = *(_DWORD **)(v14 + 8);
        unint64_t v25 = (_DWORD *)v13[1];
        while (1)
        {
          unsigned int v26 = *v24 & *v25;
          if (v26) {
            break;
          }
          unint64_t v17 = 0;
          ++v24;
          ++v25;
          v23 += 32;
          if (v23 >= v22) {
            goto LABEL_11;
          }
        }
        unint64_t v17 = *(void **)(v21 + 8 * (__clz(__rbit32(v26)) + v23));
      }
      else
      {
        unint64_t v17 = 0;
      }
LABEL_11:
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = v13;
      }
      if (*(unsigned char *)(*v18 + 31)) {
        goto LABEL_15;
      }
      unsigned int v33 = (unsigned int *)v18[1];
      uint64_t v34 = a3[30];
      unint64_t v35 = (unint64_t)(a3[31] - v34) >> 3;
      unsigned int v36 = *v33;
      if (!*v33)
      {
        unsigned int v37 = 0;
        while (1)
        {
          v37 += 32;
          if (v37 >= v35) {
            goto LABEL_16;
          }
          unsigned int v45 = v33[1];
          ++v33;
          unsigned int v36 = v45;
          if (v45) {
            goto LABEL_36;
          }
        }
      }
      unsigned int v37 = 0;
LABEL_36:
      unsigned int v38 = __clz(__rbit32(v36));
      unsigned int v39 = v38 | v37;
      if ((v38 | v37) != v35)
      {
        unsigned int v40 = v36 >> v38;
        while (1)
        {
          uint64_t v18 = *(void **)(v34 + 8 * v39);
          if (*(unsigned char *)(*v18 + 31)) {
            break;
          }
          if (v40 <= 1)
          {
            while (1)
            {
              v37 += 32;
              if (v37 >= v35) {
                goto LABEL_16;
              }
              unsigned int v42 = v33[1];
              ++v33;
              unsigned int v41 = v42;
              if (v42)
              {
                unsigned int v43 = v37;
                goto LABEL_44;
              }
            }
          }
          unsigned int v43 = v39 + 1;
          unsigned int v41 = v40 >> 1;
LABEL_44:
          unsigned int v44 = __clz(__rbit32(v41));
          unsigned int v39 = v44 + v43;
          unsigned int v40 = v41 >> v44;
          if (v39 == v35) {
            goto LABEL_16;
          }
        }
LABEL_15:
        sub_1CC73AFF8(v6, v15, v7, a2, v16, (uint64_t)a1, (uint64_t)v18, v11);
      }
    }
LABEL_16:
    if ((*(unsigned char *)(v11 + 3) & 1) == 0)
    {
      uint64_t v19 = a1[2];
      if (v9 < *(unsigned __int16 *)(v19 + 2))
      {
        __int16 v20 = *(_WORD *)(*(void *)(v19 + 40) + 6 * v9 + 4);
        if (v20)
        {
          uint64_t v28 = v20 >> 4;
          int v29 = *(_DWORD *)(a1[4] + 32 * v28);
          int v30 = v29 & 0x10000FF;
          int v31 = v29 & 0xF00000;
          if (v30 != 0x1000000 || v31 == 0) {
            llvm::MachineInstr::tieOperands((uint64_t)a1, v28, v9);
          }
        }
      }
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t sub_1CC73B894(int a1, llvm::Value **a2, uint64_t a3, uint64_t ****this, llvm::DiagnosticInfoOptimizationBase *a5)
{
  if (a1) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(_DWORD *)(*(void *)(a3 + 112) + 1024) == 1;
  }
  if (*((void *)a5 + 3)) {
    BOOL v8 = !v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    Name = llvm::Value::getName(*a2);
    __int16 v15 = 1283;
    v14[0] = " (in function: ";
    v14[2] = Name;
    v14[3] = v10;
    v16[0] = v14;
    v16[2] = ")";
    __int16 v17 = 770;
    llvm::Twine::str((llvm::Twine *)v16, v18);
    uint64_t v11 = (void **)v18[0];
    if (v19 >= 0) {
      uint64_t v11 = v18;
    }
    uint64_t v12 = (void *)(v19 & 0x7F);
    if (v19 < 0) {
      uint64_t v12 = v18[1];
    }
    v20[0] = v11;
    v20[1] = v12;
    sub_1CC59ADEC((uint64_t *)a5 + 10, (uint64_t)v20);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  if (v7)
  {
    llvm::DiagnosticInfoOptimizationBase::getMsg(a5, (uint64_t)v14);
    __int16 v17 = 260;
    v16[0] = v14;
    llvm::report_fatal_error((llvm *)v16, (const llvm::Twine *)1);
  }
  return llvm::MachineOptimizationRemarkEmitter::emit(this, a5);
}

void sub_1CC73B9B4(uint64_t a1, uint64_t a2, uint64_t ****a3, const char *a4, uint64_t a5, uint64_t a6, void *a7)
{
  v109[20] = *MEMORY[0x1E4F143B8];
  llvm::DiagnosticLocation::DiagnosticLocation(&v86, (const llvm::DebugLoc *)(a7 + 7));
  uint64_t v14 = a7[3];
  uint64_t v15 = **(void **)(v14 + 32);
  int v93 = 16;
  char v94 = 2;
  uint64_t v95 = v15;
  long long v96 = v86;
  uint64_t v97 = a4;
  uint64_t v98 = "GISelFailure: ";
  uint64_t v99 = 14;
  char v100 = 0;
  char v101 = 0;
  v102 = v104;
  uint64_t v103 = 0x400000000;
  v104[256] = 0;
  int v105 = -1;
  uint64_t v106 = v14;
  BOOL v92 = &unk_1F260B560;
  *(void *)&long long v86 = a5;
  *((void *)&v86 + 1) = a6;
  sub_1CC59ADEC((uint64_t *)&v102, (uint64_t)&v86);
  if (*(_DWORD *)(*(void *)(a2 + 112) + 1024) == 1
    || (!a4 ? (size_t v16 = 0) : (size_t v16 = strlen(a4)),
        (uint64_t v17 = *(void *)****a3, *(void *)(v17 + 128))
     || sub_1CC421DEC(*(void *)(v17 + 72), (uint64_t)a4, v16)))
  {
    *(void *)&long long v86 = ": ";
    *((void *)&v86 + 1) = 2;
    sub_1CC59ADEC((uint64_t *)&v102, (uint64_t)&v86);
    llvm::DiagnosticInfoMIROptimization::MachineArgument::MachineArgument((uint64_t)&v86, "Inst", 4uLL, (llvm::MachineInstr *)a7);
    uint64_t v66 = v87;
    *(_OWORD *)unint64_t v65 = v86;
    long long v86 = 0uLL;
    *(_OWORD *)__p = v88;
    uint64_t v68 = v89;
    uint64_t v87 = 0;
    long long v88 = 0uLL;
    uint64_t v89 = 0;
    long long v69 = v90;
    sub_1CD3D6290((uint64_t)&v92, (long long *)v65);
    if (SHIBYTE(v68) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v89) < 0) {
      operator delete((void *)v88);
    }
    if (SHIBYTE(v87) < 0) {
      operator delete((void *)v86);
    }
    if ((*(_DWORD *)(*(void *)(a1 + 8) + 472) - 26) <= 3)
    {
      *(void *)&long long v86 = "\n";
      *((void *)&v86 + 1) = 1;
      sub_1CC59ADEC((uint64_t *)&v102, (uint64_t)&v86);
      uint64_t v21 = *(void *)(a1 + 40);
      unsigned int v107 = a7;
      sub_1CD6321FC((llvm::SmallPtrSetImplBase *)&v86, (uint64_t *)&v107, 1);
      unsigned int v107 = a7;
      *(_OWORD *)uint64_t v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      sub_1CD632260((uint64_t)v83);
      uint64_t v22 = *((void *)&v85 + 1);
      unsigned int v23 = (uint64_t *)((char *)v83[1] + 8 * (((void)v85 + *((void *)&v85 + 1)) >> 9));
      uint64_t v24 = *v23;
      uint64_t v25 = *v23 + 8 * ((v85 + *((void *)&v85 + 1)) & 0x1FF);
      if ((void *)v84 == v83[1]) {
        uint64_t v25 = 0;
      }
      uint64_t v26 = (v25 - v24) >> 3;
      if (v25 - v24 < -7)
      {
        unint64_t v29 = 510 - v26;
        __int16 v27 = ~(_WORD)v29;
        uint64_t v28 = &v23[-(v29 >> 9)];
      }
      else
      {
        __int16 v27 = v26 + 1;
        uint64_t v28 = &v23[(unint64_t)(v26 + 1) >> 9];
      }
      uint64_t v30 = *v28 + 8 * (v27 & 0x1FF);
      if (v25 != v30)
      {
        int v31 = &v107;
        do
        {
          unint64_t v32 = (void *)(v24 + 4096);
          if (v23 == v28) {
            unint64_t v32 = (void *)v30;
          }
          if ((void *)v25 == v32)
          {
            unint64_t v32 = (void *)v25;
          }
          else
          {
            unsigned int v33 = (void *)v25;
            do
            {
              uint64_t v34 = (uint64_t)*v31++;
              *v33++ = v34;
            }
            while (v33 != v32);
          }
          v22 += ((uint64_t)v32 - v25) >> 3;
          if (v23 == v28) {
            break;
          }
          uint64_t v35 = v23[1];
          ++v23;
          uint64_t v24 = v35;
          uint64_t v25 = v35;
        }
        while (v35 != v30);
        *((void *)&v85 + 1) = v22;
      }
      unsigned int v107 = v109;
      uint64_t v108 = 0x1400000000;
      int v36 = 1;
      while (*((void *)&v85 + 1))
      {
        uint64_t v37 = *(void *)(*(void *)((char *)v83[1] + (((unint64_t)v85 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v85 & 0x1FF));
        *(void *)&long long v85 = v85 + 1;
        --*((void *)&v85 + 1);
        if ((unint64_t)v85 >= 0x400)
        {
          operator delete(*(void **)v83[1]);
          v83[1] = (char *)v83[1] + 8;
          *(void *)&long long v85 = v85 - 512;
        }
        if (v108 >= (unint64_t)HIDWORD(v108)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v107 + v108) = v37;
        LODWORD(v108) = v108 + 1;
        uint64_t v38 = *(void *)(v37 + 32);
        uint64_t v39 = *(void *)(v37 + 16);
        unsigned int v40 = *(unsigned __int8 *)(v39 + 4);
        if ((*(unsigned char *)(v39 + 8) & 2) != 0)
        {
          unsigned int v41 = *(_DWORD *)(v37 + 40);
          if (v41 == v40) {
            goto LABEL_52;
          }
          unsigned int v52 = v40;
          do
          {
            int v53 = *(_DWORD *)(v38 + 32 * v40);
            if ((v53 & 0x10000FF) != 0x1000000) {
              break;
            }
            v52 += (v53 & 0x2000000) == 0;
            if (v41 - 1 == v40) {
              break;
            }
            ++v40;
          }
          while ((v53 & 0x2000000) == 0);
          unsigned int v40 = v52;
        }
        else
        {
          unsigned int v41 = *(_DWORD *)(v37 + 40);
        }
        if (v40 != v41)
        {
          uint64_t v42 = v38 + 32 * v41;
          for (uint64_t i = v38 + 32 * v40; i != v42; i += 32)
          {
            if (*(unsigned char *)i) {
              continue;
            }
            int v44 = *(_DWORD *)(i + 4);
            if ((v44 & 0x80000000) == 0) {
              continue;
            }
            uint64_t v45 = *(void *)(*(void *)(v21 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
            if (!v45) {
              continue;
            }
            if ((*(unsigned char *)(v45 + 3) & 1) == 0)
            {
              uint64_t v45 = *(void *)(v45 + 24);
              if (!v45 || (*(unsigned char *)(v45 + 3) & 1) == 0) {
                continue;
              }
            }
            uint64_t v46 = *(void **)(v45 + 8);
            v78[0] = v46;
            if (!v46) {
              continue;
            }
            if (*((void *)&v86 + 1) != (void)v86) {
              goto LABEL_73;
            }
            uint64_t v47 = HIDWORD(v87);
            if (HIDWORD(v87))
            {
              uint64_t v48 = 0;
              uint64_t v49 = 8 * HIDWORD(v87);
              int v50 = (void *)*((void *)&v86 + 1);
              while ((void *)*v50 != v46)
              {
                if (*v50 == -2) {
                  uint64_t v48 = v50;
                }
                ++v50;
                v49 -= 8;
                if (!v49)
                {
                  if (!v48) {
                    goto LABEL_70;
                  }
                  void *v48 = v46;
                  LODWORD(v88) = v88 - 1;
                  goto LABEL_72;
                }
              }
              continue;
            }
LABEL_70:
            if (HIDWORD(v87) < v87)
            {
              ++HIDWORD(v87);
              *(void *)(*((void *)&v86 + 1) + 8 * v47) = v46;
            }
            else
            {
LABEL_73:
              llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v86, v46);
              if (!v51) {
                continue;
              }
            }
LABEL_72:
            sub_1CD45F140(v83, v78);
          }
        }
LABEL_52:
        if (++v36 == 21) {
          break;
        }
      }
      v78[0] = "Context:\n";
      v78[1] = (void *)9;
      sub_1CC59ADEC((uint64_t *)&v102, (uint64_t)v78);
      BOOL v54 = (llvm::MachineInstr **)v107;
      if (v108)
      {
        unint64_t v55 = 0;
        uint64_t v56 = 8 * v108;
        do
        {
          std::to_string(&v70, v55);
          uint64_t v57 = std::string::insert(&v70, 0, "ContextInst");
          std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)int v71 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          uint64_t v72 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          if (v72 >= 0) {
            int v59 = v71;
          }
          else {
            int v59 = (void **)v71[0];
          }
          if (v72 >= 0) {
            std::string::size_type v60 = HIBYTE(v72) & 0x7F;
          }
          else {
            std::string::size_type v60 = (std::string::size_type)v71[1];
          }
          llvm::DiagnosticInfoMIROptimization::MachineArgument::MachineArgument((uint64_t)v73, (const std::string::value_type *)v59, v60, v54[v55]);
          *(_OWORD *)int v78 = *(_OWORD *)v73;
          uint64_t v79 = v74;
          v73[1] = 0;
          uint64_t v74 = 0;
          v73[0] = 0;
          long long v80 = v75;
          uint64_t v81 = v76;
          long long v75 = 0uLL;
          uint64_t v76 = 0;
          long long v82 = v77;
          uint64_t v61 = sub_1CD3D6290((uint64_t)&v92, (long long *)v78);
          v91[0] = "\n";
          v91[1] = 1;
          sub_1CC59ADEC((uint64_t *)(v61 + 80), (uint64_t)v91);
          if (SHIBYTE(v81) < 0) {
            operator delete((void *)v80);
          }
          if (SHIBYTE(v79) < 0) {
            operator delete(v78[0]);
          }
          if (SHIBYTE(v76) < 0) {
            operator delete((void *)v75);
          }
          if (SHIBYTE(v74) < 0) {
            operator delete(v73[0]);
          }
          if (SHIBYTE(v72) < 0) {
            operator delete(v71[0]);
          }
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          ++v55;
          v56 -= 8;
        }
        while (v56);
        BOOL v54 = (llvm::MachineInstr **)v107;
      }
      if (v54 != v109) {
        free(v54);
      }
      sub_1CD3F260C(v83);
      int v62 = (void **)v83[1];
      int v63 = (void **)v84;
      if (v83[1] != (void *)v84)
      {
        do
        {
          int v64 = *v62++;
          operator delete(v64);
        }
        while (v62 != v63);
        if ((void *)v84 != v83[1]) {
          *(void *)&long long v84 = v84 + (((unint64_t)v83[1] - v84 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if (v83[0]) {
        operator delete(v83[0]);
      }
      if (*((void *)&v86 + 1) != (void)v86) {
        free(*((void **)&v86 + 1));
      }
    }
  }
  **(void **)(a1 + 360) |= 0x10uLL;
  sub_1CC73B894(0, (llvm::Value **)a1, a2, a3, (llvm::DiagnosticInfoOptimizationBase *)&v92);
  BOOL v92 = &unk_1F2616800;
  uint64_t v18 = (char *)v102;
  if (v103)
  {
    unint64_t v19 = (unint64_t)v103 << 6;
    do
    {
      __int16 v20 = (void **)&v18[v19];
      if (v18[v19 - 17] < 0) {
        operator delete(*(v20 - 5));
      }
      if (*((char *)v20 - 41) < 0) {
        operator delete(*(v20 - 8));
      }
      v19 -= 64;
    }
    while (v19);
    uint64_t v18 = (char *)v102;
  }
  if (v18 != v104) {
    free(v18);
  }
}

uint64_t sub_1CC73C210@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v11[0] = &unk_1F261D140;
  v11[1] = sub_1CC73D004;
  uint64_t v12 = v11;
  v9[0] = &unk_1F261D188;
  v9[1] = sub_1CC73D01C;
  uint64_t v10 = v9;
  sub_1CC73CA54((uint64_t)&__src, a1, a2, (uint64_t)v11, (uint64_t)v9, 0, 0);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  uint64_t result = (uint64_t)v12;
  if (v12 == v11)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    uint64_t result = (*(uint64_t (**)(void))(*v12 + 40))();
  }
  if (v8)
  {
    unsigned int v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40) {
      operator new[]();
    }
    *(void *)a3 = __src;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_1CC73C44C@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1F261D140;
  v7[1] = sub_1CC73D004;
  char v8 = v7;
  v5[0] = &unk_1F261D188;
  v5[1] = sub_1CC73D01C;
  uint64_t v6 = v5;
  sub_1CC73CA54(a4, a1, a2, (uint64_t)v7, (uint64_t)v5, a3, 0);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

uint64_t sub_1CC73C5E8@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v11[0] = &unk_1F261D140;
  v11[1] = sub_1CC73D0BC;
  uint64_t v12 = v11;
  v9[0] = &unk_1F261D188;
  v9[1] = sub_1CC73D0D8;
  uint64_t v10 = v9;
  sub_1CC73CA54((uint64_t)&__src, a1, a2, (uint64_t)v11, (uint64_t)v9, 0, 0);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  uint64_t result = (uint64_t)v12;
  if (v12 == v11)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    uint64_t result = (*(uint64_t (**)(void))(*v12 + 40))();
  }
  if (v8)
  {
    unsigned int v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40) {
      operator new[]();
    }
    *(void *)a3 = __src;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_1CC73C824@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1F261D140;
  v8[1] = sub_1CC73D0BC;
  uint64_t v9 = v8;
  v6[0] = &unk_1F261D188;
  v6[1] = sub_1CC73D0D8;
  unsigned int v7 = v6;
  sub_1CC73CA54(a5, a1, a2, (uint64_t)v8, (uint64_t)v6, a3, a4);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

unint64_t sub_1CC73C9C0(unsigned int a1, uint64_t a2)
{
  sub_1CC73C210(a1, a2, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  if (v6 > 0x40)
  {
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
    }
    unint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    unint64_t v3 = (v5 << -(char)v6 >> -(char)v6) & 0xFFFFFFFFFFFFFF00;
    uint64_t v4 = (v5 << -(char)v6 >> -(char)v6);
  }
  return v4 | v3;
}

void sub_1CC73CA54(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  _DWORD v41[4] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  uint64_t v39 = v41;
  uint64_t v40 = 0x400000000;
  int v12 = a6 ^ 1;
  while (1)
  {
    if ((v11 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v11);
    }
    uint64_t v14 = *v13;
    if (!v14) {
      goto LABEL_58;
    }
    if ((*(unsigned char *)(v14 + 3) & 1) == 0)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
        goto LABEL_58;
      }
    }
    unint64_t v15 = *(void *)(v14 + 8);
    if (!v15) {
      goto LABEL_58;
    }
    __src = *(unint64_t **)(v14 + 8);
    uint64_t v16 = *(void *)(a4 + 24);
    if (!v16) {
      goto LABEL_65;
    }
    if (((*(unsigned int (**)(uint64_t, unint64_t **))(*(void *)v16 + 48))(v16, &__src) | v12)) {
      break;
    }
    uint64_t v17 = **(unsigned __int16 **)(v15 + 16);
    switch(**(_WORD **)(v15 + 16))
    {
      case 'v':
        if (a7) {
          goto LABEL_11;
        }
        goto LABEL_58;
      case 'w':
      case '|':
      case '~':
LABEL_11:
        uint64_t v19 = *(void *)(v15 + 32);
        unint64_t v18 = v15 + 32;
        int v20 = *(_DWORD *)(v19 + 4);
        if (v20 < 0 && (uint64_t v21 = v20 & 0x7FFFFFFF, v21 < *(_DWORD *)(a3 + 432))) {
          unint64_t v22 = *(void *)(*(void *)(a3 + 424) + 8 * v21);
        }
        else {
          unint64_t v22 = 0;
        }
        __src = (unint64_t *)v22;
        uint64_t v24 = sub_1CB8F1DC4((unint64_t *)&__src);
        if (v23 == 1) {
        if (v40 >= (unint64_t)HIDWORD(v40))
        }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        *((void *)v39 + v40) = v17 | (v24 << 32);
        LODWORD(v40) = v40 + 1;
        goto LABEL_19;
      case 'x':
      case 'y':
      case 'z':
      case '{':
      case '}':
        goto LABEL_58;
      default:
        if (v17 == 19)
        {
          uint64_t v11 = *(unsigned int *)(*(void *)(v15 + 32) + 36);
          if ((unint64_t)(v11 - 1) <= 0x3FFFFFFE) {
            goto LABEL_58;
          }
        }
        else
        {
          if (v17 != 81) {
            goto LABEL_58;
          }
          unint64_t v18 = v15 + 32;
LABEL_19:
          uint64_t v11 = *(unsigned int *)(*(void *)v18 + 36);
        }
        break;
    }
  }
  __src = (unint64_t *)v15;
  uint64_t v25 = *(void *)(a4 + 24);
  if (!v25) {
    goto LABEL_65;
  }
  if (((*(uint64_t (**)(uint64_t, unint64_t **))(*(void *)v25 + 48))(v25, &__src) & 1) == 0)
  {
LABEL_58:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_59;
  }
  unint64_t v34 = v15;
  uint64_t v26 = *(void *)(a5 + 24);
  if (!v26) {
LABEL_65:
  }
    sub_1CB920400();
  (*(void (**)(unint64_t **__return_ptr))(*(void *)v26 + 48))(&__src);
  if (!v38) {
    goto LABEL_58;
  }
  unsigned int v27 = v40;
  if (v40)
  {
    while (2)
    {
      uint64_t v28 = *((void *)v39 + --v27);
      LODWORD(v40) = v27;
      switch((int)v28)
      {
        case 'v':
        case '|':
          llvm::APInt::sext((uint64_t)&__src, HIDWORD(v28), (uint64_t)&v34);
          goto LABEL_46;
        case 'w':
          if (HIDWORD(v28) <= 0x40)
          {
            if (v37 >= 0x41) {
              p_src = __src;
            }
            else {
              p_src = (unint64_t *)&__src;
            }
            unint64_t v29 = *p_src;
            goto LABEL_43;
          }
          if (v37 != HIDWORD(v28)) {
            operator new[]();
          }
          goto LABEL_57;
        case '~':
          if (HIDWORD(v28) > 0x40)
          {
            if (v37 != HIDWORD(v28)) {
              operator new[]();
            }
LABEL_57:
            sub_1CD0463BC((uint64_t)&v34, (uint64_t)&__src);
          }
          else
          {
            unint64_t v29 = (unint64_t)__src;
LABEL_43:
            unsigned int v35 = HIDWORD(v28);
            unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE4(v28);
            if (!HIDWORD(v28)) {
              unint64_t v31 = 0;
            }
            unint64_t v34 = v31 & v29;
          }
LABEL_46:
          if (v37 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          __src = (unint64_t *)v34;
          unsigned int v37 = v35;
          unsigned int v27 = v40;
LABEL_50:
          if (!v27) {
            break;
          }
          continue;
        default:
          goto LABEL_50;
      }
      break;
    }
  }
  if (v37 >= 0x41) {
    operator new[]();
  }
  unint64_t v32 = (unint64_t)__src;
  *(_DWORD *)(a1 + 8) = v37;
  *(void *)a1 = v32;
  *(_DWORD *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 24) = 1;
LABEL_59:
  if (v39 != v41) {
    free(v39);
  }
}

BOOL sub_1CC73D004(BOOL result)
{
  if (result) {
    return **(unsigned __int16 **)(result + 16) == 120;
  }
  return result;
}

uint64_t sub_1CC73D01C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 32);
  if (*(unsigned char *)(v3 + 32) == 2)
  {
    uint64_t v4 = *(void *)(v3 + 48);
    unsigned int v5 = *(_DWORD *)(v4 + 32);
    *(_DWORD *)(a2 + 8) = v5;
    if (v5 > 0x40) {
      operator new[]();
    }
    *(void *)a2 = *(void *)(v4 + 24);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

BOOL sub_1CC73D0BC(BOOL result)
{
  if (result) {
    return (**(_WORD **)(result + 16) & 0xFFFE) == 120;
  }
  return result;
}

uint64_t sub_1CC73D0D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 32);
  int v4 = *(unsigned __int8 *)(v3 + 32);
  if (v4 == 3)
  {
    uint64_t v7 = *(void *)(v3 + 48);
    uint64_t v9 = *(void **)(v7 + 32);
    char v8 = (llvm::detail::DoubleAPFloat *)(v7 + 32);
    if (v9 == &unk_1CFB2E344) {
      uint64_t result = (uint64_t)llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (llvm::APInt *)&v10);
    }
    else {
      uint64_t result = llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v8, (uint64_t)&v10);
    }
    *(_DWORD *)(a2 + 8) = v11;
    *(void *)a2 = v10;
  }
  else
  {
    if (v4 != 2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      return result;
    }
    uint64_t v5 = *(void *)(v3 + 48);
    unsigned int v6 = *(_DWORD *)(v5 + 32);
    *(_DWORD *)(a2 + 8) = v6;
    if (v6 > 0x40) {
      operator new[]();
    }
    *(void *)a2 = *(void *)(v5 + 24);
  }
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

uint64_t *sub_1CC73D1C8@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  v37[0] = &unk_1F261D140;
  v37[1] = sub_1CC73D5D4;
  char v38 = v37;
  v35[0] = &unk_1F261D188;
  v35[1] = sub_1CC73D0D8;
  int v36 = v35;
  sub_1CC73CA54((uint64_t)&v26, a1, a2, (uint64_t)v37, (uint64_t)v35, a3, 0);
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
  }
  else if (v36)
  {
    (*(void (**)(void))(*v36 + 40))();
  }
  uint64_t result = v38;
  if (v38 == v37)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v38 + 40))(v38);
  }
  if (!v29)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 40) = 0;
    return result;
  }
  unsigned int v7 = v28;
  if ((v28 & 0x80000000) != 0) {
    char v8 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
  }
  else {
    char v8 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v28);
  }
  uint64_t v9 = *v8;
  if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
    uint64_t v9 = *(void *)(v9 + 24);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (**(_WORD **)(v10 + 16) == 121) {
    uint64_t v11 = *(void *)(*(void *)(v10 + 32) + 48);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 32);
  if ((_UNKNOWN *)v12 == &unk_1CFB2E344)
  {
    uint64_t result = (uint64_t *)llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v30, (const llvm::detail::DoubleAPFloat *)(v11 + 32));
    unsigned int v7 = v28;
  }
  else
  {
    uint64_t v30 = *(unsigned int **)(v11 + 32);
    if ((*(_DWORD *)(v12 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v13 = *(unsigned char *)(v11 + 52);
    int v14 = v13 & 7;
    char v33 = v13 & 0xF;
    int v32 = *(_DWORD *)(v11 + 48);
    BOOL v16 = (v13 & 6) != 0 && v14 != 3;
    if (v14 == 1 || v16)
    {
      uint64_t v17 = v30[2];
      if ((v17 - 64) <= 0xFFFFFF7F) {
        unint64_t v18 = result;
      }
      else {
        unint64_t v18 = (uint64_t *)&v31;
      }
      uint64_t v21 = *(uint64_t **)(v11 + 40);
      uint64_t v19 = (uint64_t *)(v11 + 40);
      int v20 = v21;
      if ((*(_DWORD *)(*(v19 - 1) + 8) - 64) < 0xFFFFFF80) {
        uint64_t v19 = v20;
      }
      if (v17 <= 0xFFFFFFBF)
      {
        unint64_t v22 = (unint64_t)(v17 + 64) >> 6;
        do
        {
          uint64_t v23 = *v19++;
          *v18++ = v23;
          --v22;
        }
        while (v22);
      }
    }
  }
  unsigned int v34 = v7;
  if (v30 != (unsigned int *)&unk_1CFB2E344)
  {
    uint64_t v24 = (uint64_t)v31;
    *(void *)(a4 + 8) = v30;
    *(void *)(a4 + 16) = v24;
    *(_DWORD *)(a4 + 24) = v32;
    *(unsigned char *)(a4 + 28) = *(unsigned char *)(a4 + 28) & 0xF0 | v33 & 0xF;
    uint64_t v25 = &unk_1CFB2E394;
    uint64_t v30 = (unsigned int *)&unk_1CFB2E394;
    *(_DWORD *)(a4 + 32) = v7;
    *(unsigned char *)(a4 + 40) = 1;
LABEL_34:
    if ((v25[2] - 64) <= 0xFFFFFF7F)
    {
      uint64_t result = v31;
      if (v31) {
        uint64_t result = (uint64_t *)MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
      }
    }
    goto LABEL_35;
  }
  uint64_t result = llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)(a4 + 8), &v30);
  uint64_t v25 = v30;
  *(_DWORD *)(a4 + 32) = v34;
  *(unsigned char *)(a4 + 40) = 1;
  if (v25 != (_DWORD *)&unk_1CFB2E344) {
    goto LABEL_34;
  }
  uint64_t result = sub_1CB845718((uint64_t *)&v31);
LABEL_35:
  if (v29 && v27 >= 0x41)
  {
    uint64_t result = v26;
    if (v26) {
      return (uint64_t *)MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
  }
  return result;
}

BOOL sub_1CC73D5D4(BOOL result)
{
  if (result) {
    return **(unsigned __int16 **)(result + 16) == 121;
  }
  return result;
}

uint64_t sub_1CC73D5EC(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    int v2 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    int v2 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v3 = *v2;
  if ((*(unsigned char *)(v3 + 3) & 1) == 0) {
    uint64_t v3 = *(void *)(v3 + 24);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (**(_WORD **)(v4 + 16) == 121) {
    return *(void *)(*(void *)(v4 + 32) + 48);
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC73D648@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = a1;
  uint64_t result = llvm::MachineRegisterInfo::getVRegDef(a2, a1);
  int v7 = *(_DWORD *)(*(void *)(result + 32) + 4);
  if (v7 < 0
    && (uint64_t v8 = v7 & 0x7FFFFFFF, v9 = *(unsigned int *)(a2 + 432), v8 < v9)
    && (uint64_t v10 = *(void *)(a2 + 424), (*(void *)(v10 + 8 * v8) & 0xFFFFFFFFFFFFFFF9) != 0))
  {
    while (1)
    {
      unsigned int v11 = **(unsigned __int16 **)(result + 16);
      BOOL v12 = v11 > 0x2C;
      uint64_t v13 = (1 << v11) & 0x1C0000080000;
      if (v12 || v13 == 0) {
        break;
      }
      unsigned int v16 = *(_DWORD *)(*(void *)(result + 32) + 36);
      if ((v16 & 0x80000000) == 0
        || (v16 & 0x7FFFFFFF) >= v9
        || (*(void *)(v10 + 8 * (v16 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0)
      {
        break;
      }
      uint64_t result = llvm::MachineRegisterInfo::getVRegDef(a2, v16);
      unsigned int v4 = v16;
    }
    *(void *)a3 = result;
    *(_DWORD *)(a3 + 8) = v4;
    char v15 = 1;
  }
  else
  {
    char v15 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v15;
  return result;
}

uint64_t sub_1CC73D73C(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    int v2 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    int v2 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v3 = *v2;
  if ((*(unsigned char *)(v3 + 3) & 1) == 0) {
    uint64_t v3 = *(void *)(v3 + 24);
  }
  uint64_t result = *(void *)(v3 + 8);
  int v5 = *(_DWORD *)(*(void *)(result + 32) + 4);
  if ((v5 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v6 = v5 & 0x7FFFFFFF;
  unsigned int v7 = *(_DWORD *)(a2 + 432);
  if (v6 >= v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 424);
  if ((*(void *)(v8 + 8 * v6) & 0xFFFFFFFFFFFFFFF9) == 0) {
    return 0;
  }
  while (1)
  {
    unsigned int v9 = **(unsigned __int16 **)(result + 16);
    BOOL v10 = v9 > 0x2C;
    uint64_t v11 = (1 << v9) & 0x1C0000080000;
    if (v10 || v11 == 0) {
      break;
    }
    int v13 = *(_DWORD *)(*(void *)(result + 32) + 36);
    if ((v13 & 0x80000000) == 0) {
      break;
    }
    uint64_t v14 = v13 & 0x7FFFFFFF;
    if (v14 >= v7 || (*(void *)(v8 + 8 * v14) & 0xFFFFFFFFFFFFFFF9) == 0) {
      break;
    }
    uint64_t result = 0;
    uint64_t v15 = *(void *)(*(void *)(a2 + 24) + 16 * v14 + 8);
    if (v15)
    {
      if ((*(unsigned char *)(v15 + 3) & 1) != 0
        || (result = 0, (uint64_t v15 = *(void *)(v15 + 24)) != 0) && (result = 0, (*(unsigned char *)(v15 + 3) & 1) != 0))
      {
        uint64_t result = *(void *)(v15 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1CC73D838(int a1, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if ((*(unsigned char *)(v4 + 3) & 1) == 0) {
    uint64_t v4 = *(void *)(v4 + 24);
  }
  uint64_t v5 = *(void *)(v4 + 8);
  int v6 = *(_DWORD *)(*(void *)(v5 + 32) + 4);
  if ((v6 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v7 = v6 & 0x7FFFFFFF;
  unsigned int v8 = *(_DWORD *)(a3 + 432);
  if (v7 >= v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(a3 + 424);
  if ((*(void *)(v9 + 8 * v7) & 0xFFFFFFFFFFFFFFF9) == 0) {
    return 0;
  }
  while (1)
  {
    unsigned int v10 = **(unsigned __int16 **)(v5 + 16);
    if (v10 > 0x2C || ((1 << v10) & 0x1C0000080000) == 0) {
      break;
    }
    int v13 = *(_DWORD *)(*(void *)(v5 + 32) + 36);
    if ((v13 & 0x80000000) == 0) {
      break;
    }
    uint64_t v14 = v13 & 0x7FFFFFFF;
    if (v14 >= v8 || (*(void *)(v9 + 8 * v14) & 0xFFFFFFFFFFFFFFF9) == 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v15 = *(void *)(*(void *)(a3 + 24) + 16 * v14 + 8);
    if (v15)
    {
      if ((*(unsigned char *)(v15 + 3) & 1) != 0
        || (uint64_t v5 = 0, (v15 = *(void *)(v15 + 24)) != 0) && (uint64_t v5 = 0, (*(unsigned char *)(v15 + 3) & 1) != 0))
      {
        uint64_t v5 = *(void *)(v15 + 8);
      }
    }
  }
  if (v10 == a1) {
    return v5;
  }
  else {
    return 0;
  }
}

void sub_1CC73D93C(int a1@<W0>, uint64_t a2@<X8>, const llvm::APInt *a3@<D0>)
{
  if (a1 == 32)
  {
    *(float *)&unsigned int v4 = *(double *)&a3;
    int v12 = 32;
    unint64_t v11 = v4;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v7, (const llvm::APInt **)&v11);
    uint64_t v5 = v8;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 24) = v9;
    *(unsigned char *)(a2 + 28) = *(unsigned char *)(a2 + 28) & 0xF0 | v10 & 0xF;
  }
  else if (a1 == 64)
  {
    sub_1CB892E1C(a2, *(double *)&a3);
  }
  else
  {
    int v12 = 64;
    unint64_t v11 = (unint64_t)a3;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v7, (const llvm::APInt **)&v11);
    uint64_t v6 = v8;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = v9;
    *(unsigned char *)(a2 + 28) = *(unsigned char *)(a2 + 28) & 0xF0 | v10 & 0xF;
    llvm::APFloat::convert(a2, &unk_1CFB2E2E0, 1, &v7);
  }
}

void sub_1CC73DA2C(int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = (void (**)(void **))&unk_1F261D140;
  unsigned int v43 = sub_1CC73D0BC;
  int v44 = (void **)&v42;
  uint64_t v39 = (void (**)(void **))&unk_1F261D188;
  uint64_t v40 = sub_1CC73D0D8;
  unsigned int v41 = (void **)&v39;
  sub_1CC73CA54((uint64_t)v36, a3, a4, (uint64_t)&v42, (uint64_t)&v39, 0, 0);
  if (v41 == (void **)&v39)
  {
    v39[4]((void **)&v39);
  }
  else if (v41)
  {
    (*((void (**)(void))*v41 + 5))();
  }
  if (v44 == (void **)&v42)
  {
    v42[4]((void **)&v42);
  }
  else if (v44)
  {
    (*((void (**)(void **))*v44 + 5))(v44);
  }
  if (!v38)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 16) = 0;
    return;
  }
  uint64_t v42 = (void (**)(void **))&unk_1F261D140;
  unsigned int v43 = sub_1CC73D0BC;
  int v44 = (void **)&v42;
  uint64_t v39 = (void (**)(void **))&unk_1F261D188;
  uint64_t v40 = sub_1CC73D0D8;
  unsigned int v41 = (void **)&v39;
  sub_1CC73CA54((uint64_t)&__src, a2, a4, (uint64_t)&v42, (uint64_t)&v39, 0, 0);
  if (v41 == (void **)&v39)
  {
    v39[4]((void **)&v39);
  }
  else if (v41)
  {
    (*((void (**)(void))*v41 + 5))();
  }
  if (v44 == (void **)&v42)
  {
    v42[4]((void **)&v42);
  }
  else if (v44)
  {
    (*((void (**)(void **))*v44 + 5))(v44);
  }
  if (!v35) {
    goto LABEL_11;
  }
  if (a1 >= 127)
  {
    if (a1 > 127)
    {
      if (a1 == 128)
      {
        LODWORD(v43) = v34[0];
        if (v34[0] > 0x40u) {
          operator new[]();
        }
        uint64_t v42 = (void (**)(void **))__src;
        llvm::APInt::lshrInPlace((llvm::APInt *)&v42, (const llvm::APInt *)v36);
      }
      else
      {
        if (a1 != 129)
        {
          switch(a1)
          {
            case 193:
LABEL_68:
              int v16 = v34[0];
              if (v34[0] >= 0x41u) {
                operator new[]();
              }
              unint64_t v17 = (unint64_t)__src + *(void *)v36;
              if (v34[0]) {
LABEL_70:
              }
                unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
              else {
LABEL_48:
              }
                unint64_t v18 = 0;
              *(_DWORD *)(a5 + 8) = v16;
              *(void *)a5 = v18 & v17;
              goto LABEL_25;
            case 195:
              int v24 = llvm::APInt::compareSigned((llvm::APInt *)&__src, (const llvm::APInt *)v36);
              goto LABEL_61;
            case 196:
              int v32 = llvm::APInt::compareSigned((llvm::APInt *)&__src, (const llvm::APInt *)v36);
              goto LABEL_119;
            case 197:
              int v24 = llvm::APInt::compare((llvm::APInt *)&__src, (const llvm::APInt *)v36);
LABEL_61:
              if (v24 >= 0) {
                p_src = (const llvm::APInt *)v36;
              }
              else {
                p_src = (const llvm::APInt *)&__src;
              }
              uint64_t v26 = v34;
              if (v24 >= 0) {
                uint64_t v26 = v37;
              }
              break;
            case 198:
              int v32 = llvm::APInt::compare((llvm::APInt *)&__src, (const llvm::APInt *)v36);
LABEL_119:
              if (v32 <= 0) {
                p_src = (const llvm::APInt *)v36;
              }
              else {
                p_src = (const llvm::APInt *)&__src;
              }
              uint64_t v26 = v34;
              if (v32 <= 0) {
                uint64_t v26 = v37;
              }
              break;
            default:
              goto LABEL_11;
          }
          unsigned int v27 = *v26;
          *(_DWORD *)(a5 + 8) = v27;
          if (v27 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)a5, p_src);
          }
          uint64_t v15 = *(void (***)(void **))p_src;
          goto LABEL_38;
        }
        LODWORD(v43) = v34[0];
        if (v34[0] > 0x40u) {
          operator new[]();
        }
        uint64_t v42 = (void (**)(void **))__src;
        llvm::APInt::ashrInPlace((unsigned int *)&v42, (const llvm::APInt *)v36);
      }
LABEL_42:
      *(_DWORD *)(a5 + 8) = v43;
      uint64_t v15 = v42;
LABEL_38:
      *(void *)a5 = v15;
LABEL_25:
      *(unsigned char *)(a5 + 16) = 1;
      goto LABEL_12;
    }
    LODWORD(v43) = v34[0];
    if (v34[0] > 0x40u) {
      operator new[]();
    }
    int v11 = v34[0];
    uint64_t v42 = (void (**)(void **))__src;
    if (v37[0] >= 0x41u)
    {
      int v19 = 0;
      int64_t v20 = ((unint64_t)v37[0] + 63) >> 6;
      do
      {
        if (v20-- < 1) {
          break;
        }
        unint64_t v22 = *(void *)(*(void *)v36 + 8 * v20);
        v19 += __clz(v22);
      }
      while (!v22);
      unsigned int v23 = v37[0] | 0xFFFFFFC0;
      if ((v37[0] & 0x3F) == 0) {
        unsigned int v23 = 0;
      }
      if (v37[0] - v19 - v23 > 0x40) {
        goto LABEL_34;
      }
      int v12 = **(void ***)v36;
    }
    else
    {
      int v12 = *(void **)v36;
    }
    if ((unint64_t)v12 <= v34[0]) {
      int v11 = (int)v12;
    }
LABEL_34:
    uint64_t v13 = (void)__src << v11;
    if (!v34[0] || v34[0] == v11)
    {
      if (v34[0] == v11) {
        uint64_t v13 = 0;
      }
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v34[0]);
      if (!v34[0]) {
        unint64_t v14 = 0;
      }
    }
    else
    {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v34[0]);
    }
    uint64_t v15 = (void (**)(void **))(v14 & v13);
    *(_DWORD *)(a5 + 8) = v34[0];
    goto LABEL_38;
  }
  switch(a1)
  {
    case '-':
      goto LABEL_68;
    case '.':
      int v16 = v34[0];
      if (v34[0] >= 0x41u) {
        operator new[]();
      }
      unint64_t v17 = (unint64_t)__src - *(void *)v36;
      if (!v34[0]) {
        goto LABEL_48;
      }
      goto LABEL_70;
    case '/':
      llvm::APInt::operator*((uint64_t)&__src, v36, (uint64_t)&v42);
      goto LABEL_42;
    case ';':
      int v28 = v37[0];
      if (v37[0] <= 0x40u)
      {
        if (!*(void *)v36) {
          goto LABEL_11;
        }
        goto LABEL_84;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v36) != v28)
      {
LABEL_84:
        llvm::APInt::sdiv((llvm::APInt *)&__src, (const llvm::APInt *)v36, (uint64_t)&v42);
        goto LABEL_42;
      }
      goto LABEL_11;
    case '<':
      int v29 = v37[0];
      if (v37[0] <= 0x40u)
      {
        if (!*(void *)v36) {
          goto LABEL_11;
        }
        goto LABEL_87;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v36) != v29)
      {
LABEL_87:
        llvm::APInt::udiv((uint64_t)&__src, (const llvm::APInt *)v36, (uint64_t)&v42);
        goto LABEL_42;
      }
      goto LABEL_11;
    case '=':
      int v30 = v37[0];
      if (v37[0] <= 0x40u)
      {
        if (!*(void *)v36) {
          goto LABEL_11;
        }
        goto LABEL_90;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v36) != v30)
      {
LABEL_90:
        llvm::APInt::srem((llvm::APInt *)&__src, (const llvm::APInt *)v36, (uint64_t)&v42);
        goto LABEL_42;
      }
      goto LABEL_11;
    case '>':
      int v31 = v37[0];
      if (v37[0] <= 0x40u)
      {
        if (!*(void *)v36) {
          goto LABEL_11;
        }
        goto LABEL_93;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v36) != v31)
      {
LABEL_93:
        llvm::APInt::urem((llvm::APInt *)&__src, (const llvm::APInt *)v36, (uint64_t)&v42);
        goto LABEL_42;
      }
LABEL_11:
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 16) = 0;
LABEL_12:
      if (v35 && v34[0] >= 0x41u && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v38 && v37[0] >= 0x41u)
      {
        if (*(void *)v36) {
          MEMORY[0x1D25D9CB0](*(void *)v36, 0x1000C8000313F17);
        }
      }
      return;
    case 'A':
      int v9 = v34[0];
      if (v34[0] > 0x40u) {
        operator new[]();
      }
      unint64_t v10 = *(void *)v36 & (unint64_t)__src;
      goto LABEL_24;
    case 'B':
      int v9 = v34[0];
      if (v34[0] > 0x40u) {
        operator new[]();
      }
      unint64_t v10 = *(void *)v36 | (unint64_t)__src;
      goto LABEL_24;
    case 'C':
      int v9 = v34[0];
      if (v34[0] > 0x40u) {
        operator new[]();
      }
      unint64_t v10 = *(void *)v36 ^ (unint64_t)__src;
LABEL_24:
      *(_DWORD *)(a5 + 8) = v9;
      *(void *)a5 = v10;
      goto LABEL_25;
    default:
      goto LABEL_11;
  }
}

uint64_t *sub_1CC73E52C@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v20[3] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a3);
  }
  uint64_t v6 = *v5;
  if ((*(unsigned char *)(v6 + 3) & 1) == 0) {
    uint64_t v6 = *(void *)(v6 + 24);
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (**(_WORD **)(v7 + 16) != 121) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 32) + 48);
  if (!v8) {
    goto LABEL_6;
  }
  if ((a2 & 0x80000000) != 0) {
    int v9 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v9 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a2);
  }
  uint64_t v10 = *v9;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (**(_WORD **)(v11 + 16) == 121 && (uint64_t v12 = *(void *)(*(void *)(v11 + 32) + 48)) != 0)
  {
    unsigned int v14 = result;
    uint64_t v15 = v8;
    sub_1CB87DDC4((uint64_t)v20, (uint64_t *)(v12 + 32));
    int v16 = (void *)(v15 + 24);
    if (v14 == 163)
    {
      sub_1CB88A708((uint64_t)v19, (uint64_t)v16, 1);
LABEL_16:
      sub_1CB9191D4((void *)(a5 + 8), (uint64_t)v20);
      *(unsigned char *)(a5 + 32) = 1;
    }
    else
    {
      switch(v14)
      {
        case 0xA4u:
          sub_1CB9C2E3C((uint64_t)v19, (uint64_t)v16, 1);
          goto LABEL_16;
        case 0xA5u:
          sub_1CB9C2E60((uint64_t)v19, (uint64_t)v16, 1);
          goto LABEL_16;
        case 0xA6u:
        case 0xA7u:
          goto LABEL_23;
        case 0xA8u:
          sub_1CB887A54((uint64_t)v19, (uint64_t)v16, 1);
          goto LABEL_16;
        case 0xA9u:
          sub_1CD472368((uint64_t)v19, (uint64_t)v16);
          goto LABEL_16;
        default:
          if (v14 <= 0xA3)
          {
            switch(v14)
            {
              case 0xB9u:
                sub_1CD47267C((uint64_t)v19, (uint64_t)v16);
                goto LABEL_16;
              case 0xBAu:
              case 0xBDu:
              case 0xBEu:
                goto LABEL_23;
              case 0xBBu:
                sub_1CBFC7114((uint64_t)v19, (uint64_t)v16, (uint64_t)v17);
                goto LABEL_34;
              case 0xBCu:
                sub_1CBFC7220((llvm::detail::IEEEFloat *)v19, v16, (uint64_t)v17);
                goto LABEL_34;
              case 0xBFu:
                sub_1CD472298((uint64_t)v19, (uint64_t)v16, (uint64_t)v17);
                goto LABEL_34;
              case 0xC0u:
                sub_1CD472388((uint64_t)v19, (uint64_t)v16, (uint64_t)v17);
LABEL_34:
                sub_1CB9191D4((void *)(a5 + 8), (uint64_t)v18);
                *(unsigned char *)(a5 + 32) = 1;
                sub_1CB87DEE4(v18);
                break;
              default:
                JUMPOUT(0);
            }
          }
          else
          {
LABEL_23:
            *(unsigned char *)a5 = 0;
            *(unsigned char *)(a5 + 32) = 0;
          }
          break;
      }
    }
    return sub_1CB87DEE4(v20);
  }
  else
  {
LABEL_6:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 32) = 0;
  }
  return result;
}

uint64_t sub_1CC73E808(int a1, unsigned int a2, unsigned int a3, uint64_t a4, llvm::ConstantInt *****a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a3);
  }
  uint64_t v6 = *v5;
  if ((*(unsigned char *)(v6 + 3) & 1) == 0) {
    uint64_t v6 = *(void *)(v6 + 24);
  }
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)(*(void *)(v7 + 32) + 4);
  if ((v8 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v9 = v8 & 0x7FFFFFFF;
  unsigned int v10 = *(_DWORD *)(a4 + 432);
  if (v9 >= v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(a4 + 424);
  if ((*(void *)(v11 + 8 * v9) & 0xFFFFFFFFFFFFFFF9) == 0) {
    return 0;
  }
  while (1)
  {
    int v12 = **(unsigned __int16 **)(v7 + 16);
    if (v12 == 19) {
      goto LABEL_13;
    }
    if (v12 == 77) {
      break;
    }
    if ((v12 - 42) > 2) {
      return 0;
    }
LABEL_13:
    int v14 = *(_DWORD *)(*(void *)(v7 + 32) + 36);
    if ((v14 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v15 = v14 & 0x7FFFFFFF;
    if (v15 >= v10 || (*(void *)(v11 + 8 * v15) & 0xFFFFFFFFFFFFFFF9) == 0) {
      return 0;
    }
    uint64_t v7 = 0;
    uint64_t v16 = *(void *)(*(void *)(a4 + 24) + 16 * v15 + 8);
    if (v16)
    {
      if ((*(unsigned char *)(v16 + 3) & 1) != 0
        || (v7 = 0, (uint64_t v16 = *(void *)(v16 + 24)) != 0) && (v7 = 0, (*(unsigned char *)(v16 + 3) & 1) != 0))
      {
        uint64_t v7 = *(void *)(v16 + 8);
      }
    }
  }
  sub_1CC73D648(a2, a4, (uint64_t)&v38);
  uint64_t result = 0;
  if (!v40[0] || !v38) {
    return result;
  }
  if (**((_WORD **)v38 + 2) != 77) {
    return 0;
  }
  unint64_t v18 = v38;
  uint64_t v19 = *((void *)v38 + 4);
  int v20 = *(_DWORD *)(v19 + 36);
  if (v20 < 0 && (uint64_t v29 = v20 & 0x7FFFFFFF, v29 < v10)) {
    uint64_t v21 = *(void *)(v11 + 8 * v29);
  }
  else {
    uint64_t v21 = 0;
  }
  char v38 = v40;
  uint64_t v39 = 0x1000000000;
  if (v18[10] == 1)
  {
LABEL_34:
    int v25 = *(_DWORD *)(v19 + 4);
    if (v25 < 0 && (uint64_t v30 = v25 & 0x7FFFFFFF, v30 < *(_DWORD *)(a4 + 432))) {
      uint64_t v26 = *(void *)(*(void *)(a4 + 424) + 8 * v30);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v35 = v26;
    unsigned int v36 = 0;
    sub_1CC738CA0((uint64_t)a5, (uint64_t)&v35, (int *)v38, v39);
    uint64_t v28 = *(unsigned int *)(*(void *)(v27 + 32) + 4);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 32 * (v18[10] - 1);
    while (1)
    {
      sub_1CC73DA2C(a1, *(_DWORD *)(*((void *)v18 + 4) + v22 + 36), *(_DWORD *)(*(void *)(v7 + 32) + v22 + 36), a4, (uint64_t)&v35);
      if (!v37) {
        break;
      }
      uint64_t v33 = v21;
      int v34 = 0;
      sub_1CC737454(a5, (uint64_t)&v33, (llvm::LLVMContext *)&v35);
      if (v39 >= HIDWORD(v39)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v38 + v39) = *(_DWORD *)(*(void *)(v24 + 32) + 4);
      LODWORD(v39) = v39 + 1;
      if (v37 && v36 >= 0x41 && v35) {
        MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
      }
      v22 += 32;
      if (v23 == v22)
      {
        uint64_t v19 = *((void *)v18 + 4);
        goto LABEL_34;
      }
    }
    uint64_t v28 = 0;
  }
  if (v38 != v40) {
    free(v38);
  }
  return v28;
}

uint64_t sub_1CC73EB38@<X0>(int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_1CC73C210(a2, a4, (uint64_t)&v21);
  int v11 = v23;
  if (a1 != 125 || !v23)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 16) = 0;
    goto LABEL_4;
  }
  if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a4 + 432))
  {
    unint64_t v12 = *(void *)(*(void *)(a4 + 424) + 8 * (a2 & 0x7FFFFFFF));
    if (a3 > 0x40)
    {
      if (v22 != a3) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v17, (uint64_t)&v21);
    }
    else
    {
      if (v22 >= 0x41) {
        uint64_t v13 = v21;
      }
      else {
        uint64_t v13 = (uint64_t *)&v21;
      }
      uint64_t v14 = *v13;
      unsigned int v18 = a3;
      unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
      if (!a3) {
        unint64_t v15 = 0;
      }
      unint64_t v17 = v15 & v14;
    }
    if (v12)
    {
      unsigned int v16 = v12 >> 3;
      goto LABEL_17;
    }
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unsigned int v16 = (unsigned __int16)(v12 >> 19);
      }
      else {
        unsigned int v16 = v12 >> 19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    llvm::APInt::trunc((uint64_t)&v21, a3, (uint64_t)&v17);
    unint64_t v12 = 0;
  }
  unsigned int v16 = (unsigned __int16)(v12 >> 3);
LABEL_17:
  uint64_t result = llvm::APInt::sext((uint64_t)&v17, v16, (uint64_t)&v19);
  *(_DWORD *)(a5 + 8) = v20;
  *(void *)a5 = v19;
  int v20 = 0;
  *(unsigned char *)(a5 + 16) = 1;
  if (v18 >= 0x41)
  {
    uint64_t result = v17;
    if (v17) {
      uint64_t result = MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
  }
  int v11 = v23;
LABEL_4:
  if (v11 && v22 >= 0x41)
  {
    uint64_t result = (uint64_t)v21;
    if (v21) {
      return MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CC73ED5C@<X0>(int a1@<W0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC73C210(a3, a4, (uint64_t)&v10);
  if (v12)
  {
    FltSemanticForLLT = llvm::getFltSemanticForLLT(a2);
    sub_1CC743148((uint64_t)v14, (uint64_t)FltSemanticForLLT);
    sub_1CBA62404((uint64_t)v13, (uint64_t)&v10, a1 == 182, 1);
    sub_1CB9191D4((void *)(a5 + 8), (uint64_t)v14);
    *(unsigned char *)(a5 + 32) = 1;
    uint64_t result = (uint64_t)sub_1CB87DEE4(v14);
    if (v12 && v11 >= 0x41)
    {
      uint64_t result = v10;
      if (v10) {
        return MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 32) = 0;
  }
  return result;
}

uint64_t sub_1CC73EE64(uint64_t a1, unsigned int a2)
{
  sub_1CC73C210(a2, a1, (uint64_t)&v11);
  if (v13)
  {
    if (v12 > 0x40)
    {
      int v4 = 0;
      int64_t v5 = ((unint64_t)v12 + 63) >> 6;
      while (v5-- >= 1)
      {
        unint64_t v7 = *(void *)(v11 + 8 * v5);
        v4 += __clz(v7);
        if (v7)
        {
          if ((v12 & 0x3F) != 0) {
            unsigned int v8 = v12 | 0xFFFFFFC0;
          }
          else {
            unsigned int v8 = 0;
          }
          unsigned int v2 = v4 + v8;
LABEL_12:
          MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
          goto LABEL_13;
        }
      }
      if ((v12 & 0x3F) != 0) {
        unsigned int v10 = v12 | 0xFFFFFFC0;
      }
      else {
        unsigned int v10 = 0;
      }
      unsigned int v2 = v4 + v10;
      if (v11) {
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v2 = v12 + __clz(v11) - 64;
    }
LABEL_13:
    uint64_t v3 = 0x100000000;
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v2 = 0;
  }
  return v3 | v2;
}

uint64_t sub_1CC73EF40(unint64_t a1, unint64_t a2)
{
  unint64_t v44 = a2;
  unint64_t v45 = a1;
  unsigned int v3 = sub_1CB8F1DC4(&v45);
  if (v2 == 1) {
  unsigned int v4 = sub_1CB8F1DC4(&v44);
  }
  if (v5 == 1)
  {
    unsigned int v12 = v4;
    unsigned int v4 = v12;
  }
  unint64_t v6 = v45;
  if (v3 != v4)
  {
    if ((v45 & 0xFFFFFFFFFFFFFFF9) == 0 || (v45 & 4) == 0)
    {
      if ((v44 & 0xFFFFFFFFFFFFFFF9) == 0 || (v44 & 4) == 0)
      {
        unsigned int v7 = v3;
        if (v4)
        {
          unsigned int v8 = v3;
          unsigned int v9 = v4;
          do
          {
            unsigned int v7 = v9;
            unsigned int v9 = v8 % v9;
            unsigned int v8 = v7;
          }
          while (v9);
        }
        uint64_t v10 = v4 * v3 / v7;
        if (v10 != v3)
        {
          unint64_t v6 = v44;
          if (v10 != v4) {
            return (8 * v10) | 1;
          }
        }
        return v6;
      }
      unsigned int v24 = v3;
      if (v4)
      {
        unsigned int v25 = v3;
        unsigned int v26 = v4;
        do
        {
          unsigned int v24 = v26;
          unsigned int v26 = v25 % v26;
          unsigned int v25 = v24;
        }
        while (v26);
      }
      uint64_t v27 = v4 * v3 / v24 / v3;
      return sub_1CBA5A95C(v27, v6);
    }
    unsigned int v41 = v4;
    uint64_t v43 = sub_1CBA15978(&v45);
    if ((v44 & 0xFFFFFFFFFFFFFFF9) != 0 && (v44 & 4) != 0)
    {
      uint64_t v42 = sub_1CBA15978(&v44);
      uint64_t v13 = sub_1CB8F1DC4((unint64_t *)&v43);
      int v15 = v14;
      if (v13 == sub_1CB8F1DC4((unint64_t *)&v42) && v15 == v16)
      {
        unsigned int v17 = v45;
        if ((v45 & 2) != 0) {
          uint64_t v18 = 0x800000000000000;
        }
        else {
          uint64_t v18 = 0x8000000000000;
        }
        if ((v18 & v45) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
          unsigned int v17 = v45;
        }
        unsigned int v19 = (unsigned __int16)(v17 >> 3);
        unint64_t v20 = v44;
        if ((v44 & 2) != 0) {
          uint64_t v21 = 0x800000000000000;
        }
        else {
          uint64_t v21 = 0x8000000000000;
        }
        if ((v21 & v44) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
          unint64_t v20 = v44;
        }
        unsigned int v22 = (unsigned __int16)(v20 >> 3);
        if ((unsigned __int16)(v20 >> 3))
        {
          do
          {
            unsigned int v23 = v22;
            unsigned int v22 = v19 % v22;
            unsigned int v19 = v23;
          }
          while (v22);
        }
        else
        {
          unsigned int v23 = v19;
        }
        unsigned int v36 = v45;
        uint64_t v37 = 0x800000000000000;
        if ((v45 & 2) != 0) {
          uint64_t v38 = 0x800000000000000;
        }
        else {
          uint64_t v38 = 0x8000000000000;
        }
        unint64_t v39 = v38 & v45;
        if ((v20 & 2) == 0) {
          uint64_t v37 = 0x8000000000000;
        }
        if ((v37 & v20) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
          unint64_t v20 = v44;
        }
        unint64_t v40 = ((unsigned __int16)(v20 >> 3) * (unsigned __int16)(v36 >> 3) / v23) | ((unint64_t)(v39 != 0) << 32);
        unint64_t v6 = sub_1CBA15978(&v45);
        uint64_t v27 = v40;
        return sub_1CBA5A95C(v27, v6);
      }
    }
    else
    {
      uint64_t v29 = sub_1CB8F1DC4((unint64_t *)&v43);
      if (v28 == 1) {
      if (v29 == v41)
      }
        return v45;
    }
    unsigned int v30 = v3;
    if (v41)
    {
      unsigned int v31 = v3;
      unsigned int v32 = v41;
      do
      {
        unsigned int v30 = v32;
        unsigned int v32 = v31 % v32;
        unsigned int v31 = v30;
      }
      while (v32);
    }
    unint64_t v33 = v41 * v3 / v30;
    unint64_t v35 = sub_1CB8F1DC4((unint64_t *)&v43);
    if (v34 == 1) {
    unint64_t v6 = v43;
    }
    uint64_t v27 = v33 / v35;
    return sub_1CBA5A95C(v27, v6);
  }
  return v6;
}

unint64_t sub_1CC73F250(unint64_t result, unint64_t a2)
{
  unint64_t v13 = result;
  if ((result & 0xFFFFFFFFFFFFFFF9) != 0
    && (result & 4) != 0
    && (a2 & 0xFFFFFFFFFFFFFFF9) != 0
    && (a2 & 4) != 0
    && result != a2
    && ((result & 1) != 0
      ? (int v2 = result >> 3)
      : (result & 2) != 0
      ? (int v2 = (unsigned __int16)(result >> 19))
      : (int v2 = result >> 19),
        (a2 & 1) != 0 ? (int v3 = a2 >> 3) : (a2 & 2) != 0 ? (int v3 = (unsigned __int16)(a2 >> 19)) : (int v3 = a2 >> 19),
        v2 == v3))
  {
    uint64_t v4 = 0x8000000000000;
    if ((result & 2) != 0) {
      uint64_t v5 = 0x800000000000000;
    }
    else {
      uint64_t v5 = 0x8000000000000;
    }
    if ((v5 & result) != 0)
    {
      unint64_t v9 = a2;
      unint64_t v11 = result;
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      uint64_t v4 = 0x8000000000000;
      a2 = v9;
      uint64_t result = v11;
    }
    unsigned int v6 = (unsigned __int16)(result >> 3);
    if ((a2 & 2) != 0) {
      uint64_t v4 = 0x800000000000000;
    }
    if ((v4 & a2) != 0)
    {
      unsigned int v10 = (unsigned __int16)(result >> 3);
      unint64_t v12 = result;
      unint64_t v7 = a2;
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
      unsigned int v6 = v10;
      a2 = v7;
      uint64_t result = v12;
    }
    if (v6 % (unsigned __int16)(a2 >> 3))
    {
      uint64_t v8 = (((unsigned __int16)(result >> 3) + (unint64_t)(unsigned __int16)(a2 >> 3) - 1)
                        / (unsigned __int16)(a2 >> 3))
         * (unsigned __int16)(a2 >> 3);
      uint64_t result = sub_1CBA15978(&v13);
      if (v8 != 1) {
        return sub_1CBA5A95C(v8, result);
      }
    }
  }
  else
  {
    return sub_1CC73EF40(result, a2);
  }
  return result;
}

unint64_t sub_1CC73F3C4(unint64_t a1, unint64_t a2)
{
  unint64_t v42 = a2;
  unint64_t v43 = a1;
  unsigned int v3 = sub_1CB8F1DC4(&v43);
  if (v2 == 1) {
  unsigned int v5 = sub_1CB8F1DC4(&v42);
  }
  if (v4 == 1) {
  unint64_t v6 = v43;
  }
  if (v3 == v5) {
    return v6;
  }
  if ((v43 & 0xFFFFFFFFFFFFFFF9) == 0 || (v43 & 4) == 0)
  {
    if ((v42 & 0xFFFFFFFFFFFFFFF9) == 0 || (v42 & 4) == 0) {
      goto LABEL_40;
    }
    uint64_t v41 = sub_1CBA15978(&v42);
    uint64_t v39 = sub_1CB8F1DC4((unint64_t *)&v41);
    if (v38 == 1) {
    if (v39 == v3)
    }
      return v43;
LABEL_40:
    if (v5)
    {
      do
      {
        unsigned int v27 = v5;
        unsigned int v5 = v3 % v5;
        unsigned int v3 = v27;
      }
      while (v5);
    }
    else
    {
      unsigned int v27 = v3;
    }
    return (8 * v27) | 1;
  }
  char v7 = 3;
  if ((v43 & 1) == 0) {
    char v7 = 19;
  }
  unint64_t v8 = v43 >> v7;
  unint64_t v9 = v43 & 0x8000000000000000 | (8 * v8) | 1;
  unint64_t v10 = (v43 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v8) | 2;
  if ((v43 & 2) == 0) {
    unint64_t v10 = v9;
  }
  uint64_t v41 = v10;
  if ((v42 & 0xFFFFFFFFFFFFFFF9) == 0 || (v42 & 4) == 0)
  {
    uint64_t v29 = sub_1CB8F1DC4((unint64_t *)&v41);
    if (v28 == 1) {
    if (v29 == v5)
    }
      return v41;
    goto LABEL_49;
  }
  char v11 = 3;
  if ((v42 & 1) == 0) {
    char v11 = 19;
  }
  unint64_t v12 = v42 >> v11;
  if ((v42 & 2) != 0) {
    unint64_t v13 = (v42 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v12) | 2;
  }
  else {
    unint64_t v13 = v42 & 0x8000000000000000 | (8 * v12) | 1;
  }
  unint64_t v40 = v13;
  uint64_t v14 = sub_1CB8F1DC4((unint64_t *)&v41);
  int v16 = v15;
  if (v14 != sub_1CB8F1DC4(&v40) || v16 != v17)
  {
LABEL_49:
    if (v5)
    {
      do
      {
        unsigned int v30 = v5;
        unsigned int v5 = v3 % v5;
        unsigned int v3 = v30;
      }
      while (v5);
    }
    else
    {
      unsigned int v30 = v3;
    }
    unint64_t v31 = v30;
    uint64_t v33 = sub_1CB8F1DC4((unint64_t *)&v41);
    if (v32 == 1) {
    if (v33 != v31)
    }
    {
      unint64_t v35 = sub_1CB8F1DC4((unint64_t *)&v41);
      if (v34 == 1) {
      if (v35 > v31)
      }
        return (8 * v31) | 1;
      unint64_t v37 = sub_1CB8F1DC4((unint64_t *)&v41);
      if (v36 == 1) {
      unint64_t v6 = v41;
      }
      uint64_t v25 = v31 / v37;
      return sub_1CBA5A95C(v25, v6);
    }
    return v41;
  }
  unsigned int v18 = v43;
  if ((v43 & 2) != 0) {
    uint64_t v19 = 0x800000000000000;
  }
  else {
    uint64_t v19 = 0x8000000000000;
  }
  if ((v19 & v43) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
    unsigned int v18 = v43;
  }
  unsigned int v20 = (unsigned __int16)(v18 >> 3);
  unsigned int v21 = v42;
  if ((v42 & 2) != 0) {
    uint64_t v22 = 0x800000000000000;
  }
  else {
    uint64_t v22 = 0x8000000000000;
  }
  if ((v22 & v42) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v17);
    unsigned int v21 = v42;
  }
  unsigned int v23 = (unsigned __int16)(v21 >> 3);
  if ((unsigned __int16)(v21 >> 3))
  {
    do
    {
      unsigned int v24 = v23;
      unsigned int v23 = v20 % v23;
      unsigned int v20 = v24;
    }
    while (v23);
  }
  else
  {
    unsigned int v24 = v20;
  }
  unint64_t v6 = v41;
  if (v24 != 1)
  {
    uint64_t v25 = v24;
    return sub_1CBA5A95C(v25, v6);
  }
  return v6;
}

uint64_t sub_1CC73F70C(unsigned int a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_1CC73F80C((uint64_t)&v13, a1, a2, a4);
  if (!v16) {
    return 0;
  }
  sub_1CC73C210(v15, a2, (uint64_t)&v17);
  if (v19)
  {
    if (v18 > 0x40)
    {
      if (v17) {
        MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      }
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      unint64_t v9 = (v17 << -(char)v18 >> -(char)v18) & 0xFFFFFFFFFFFFFF00;
      uint64_t v10 = (v17 << -(char)v18 >> -(char)v18);
      uint64_t v6 = 1;
    }
    unint64_t v7 = v10 | v9;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  if (v6) {
    BOOL v11 = v7 == a3;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t v8 = v11;
  if (v14 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  return v8;
}

uint64_t sub_1CC73F80C(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CC73D648(a2, a3, (uint64_t)v33);
  if (v34) {
    BOOL v8 = v33[0] == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_9;
  }
  unint64_t v9 = *(unsigned __int16 **)(v33[0] + 16);
  if (*v9 - 77 >= 2) {
    goto LABEL_9;
  }
  LOBYTE(__s1) = 0;
  unsigned __int8 v30 = 0;
  uint64_t v10 = *(void *)(v33[0] + 32);
  unsigned int v11 = *((unsigned __int8 *)v9 + 4);
  if ((v9[4] & 2) != 0)
  {
    unsigned int v12 = *(_DWORD *)(v33[0] + 40);
    if (v12 == v11) {
      goto LABEL_9;
    }
    unsigned int v22 = *((unsigned __int8 *)v9 + 4);
    do
    {
      int v23 = *(_DWORD *)(v10 + 32 * v11);
      if ((v23 & 0x10000FF) != 0x1000000) {
        break;
      }
      v22 += (v23 & 0x2000000) == 0;
      if (v12 - 1 == v11) {
        break;
      }
      ++v11;
    }
    while ((v23 & 0x2000000) == 0);
    unsigned int v11 = v22;
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(v33[0] + 40);
  }
  if (v11 == v12)
  {
LABEL_9:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return result;
  }
  uint64_t v13 = 32 * v12 - 32 * v11;
  unsigned int v14 = (unsigned int *)(v10 + 32 * v11 + 4);
  while (1)
  {
    unsigned int v16 = *v14;
    v14 += 8;
    uint64_t v15 = v16;
    v33[0] = &unk_1F261D140;
    v33[1] = sub_1CC73D0BC;
    unint64_t v35 = v33;
    v31[0] = &unk_1F261D188;
    v31[1] = sub_1CC73D0D8;
    unsigned int v32 = v31;
    sub_1CC73CA54((uint64_t)&__s2, v16, a3, (uint64_t)v33, (uint64_t)v31, 1, 1);
    if (v32 == v31)
    {
      (*(void (**)(void *))(v31[0] + 32))(v31);
    }
    else if (v32)
    {
      (*(void (**)(void))(*v32 + 40))();
    }
    uint64_t result = (uint64_t)v35;
    if (v35 == v33)
    {
      uint64_t result = (*(uint64_t (**)(void *))(v33[0] + 32))(v33);
    }
    else if (v35)
    {
      uint64_t result = (*(uint64_t (**)(void))(*v35 + 40))();
    }
    if (v26)
    {
      if (!v30) {
        uint64_t result = (uint64_t)sub_1CD63245C((llvm::APInt *)&__s1, (llvm::APInt *)&__s2);
      }
      if (v28 > 0x40)
      {
        uint64_t result = memcmp(__s1, __s2, (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8);
        if (!result)
        {
LABEL_31:
          int v19 = 0;
          goto LABEL_32;
        }
      }
      else if (__s1 == __s2)
      {
        goto LABEL_31;
      }
LABEL_30:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      int v19 = 1;
      goto LABEL_32;
    }
    if (!a4) {
      goto LABEL_30;
    }
    if ((v15 & 0x80000000) != 0) {
      uint64_t v17 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v17 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v15);
    }
    uint64_t v18 = *v17;
    if ((*(unsigned char *)(v18 + 3) & 1) == 0) {
      uint64_t v18 = *(void *)(v18 + 24);
    }
    if (**(_WORD **)(*(void *)(v18 + 8) + 16) != 68) {
      goto LABEL_30;
    }
    int v19 = 3;
LABEL_32:
    if (v26)
    {
      if (v25 >= 0x41)
      {
        uint64_t result = (uint64_t)__s2;
        if (__s2) {
          uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v19 != 3 && v19) {
      break;
    }
    v13 -= 32;
    if (!v13)
    {
      int v20 = v30;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      if (v20)
      {
        int v21 = v29;
        *(_DWORD *)(a1 + 8) = v28;
        *(void *)a1 = __s1;
        *(_DWORD *)(a1 + 16) = v21;
        *(unsigned char *)(a1 + 24) = 1;
      }
      return result;
    }
  }
  if (v30)
  {
    if (v28 >= 0x41)
    {
      uint64_t result = (uint64_t)__s1;
      if (__s1) {
        return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void sub_1CC73FC1C(llvm::MachineInstr *this, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *((void *)this + 2);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 4);
  if ((*(unsigned char *)(v9 + 8) & 2) != 0)
  {
    unsigned int v11 = *((_DWORD *)this + 10);
    if (v11 == v10) {
      goto LABEL_27;
    }
    unsigned int v42 = v10;
    do
    {
      int v43 = *(_DWORD *)(v8 + 32 * v10);
      if ((v43 & 0x10000FF) != 0x1000000) {
        break;
      }
      v42 += (v43 & 0x2000000) == 0;
      if (v11 - 1 == v10) {
        break;
      }
      ++v10;
    }
    while ((v43 & 0x2000000) == 0);
    unsigned int v10 = v42;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 10);
  }
  if (v10 != v11)
  {
    uint64_t v12 = v8 + 32 * v11;
    for (uint64_t i = v8 + 32 * v10; i != v12; i += 32)
    {
      if (*(unsigned char *)i) {
        continue;
      }
      int v14 = *(_DWORD *)(i + 4);
      if ((v14 & 0x80000000) == 0) {
        continue;
      }
      uint64_t v15 = *(void *)(*(void *)(a2 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
      if (v15)
      {
        if ((*(unsigned char *)(v15 + 3) & 1) == 0)
        {
          uint64_t v15 = *(void *)(v15 + 24);
          if (!v15) {
            goto LABEL_10;
          }
          if ((*(unsigned char *)(v15 + 3) & 1) == 0)
          {
            uint64_t v15 = 0;
            goto LABEL_10;
          }
        }
        uint64_t v15 = *(void *)(v15 + 8);
      }
LABEL_10:
      uint64_t v47 = v15;
      __int32 v16 = a4[1].i32[0];
      __int32 v17 = a4[8].i32[0];
      if (!v17)
      {
        unsigned int v27 = 0;
LABEL_24:
        unsigned int v28 = sub_1CB9A052C((uint64_t)&a4[6], (uint64_t)&v47, &v47, v27);
        *unsigned int v28 = v47;
        *((_DWORD *)v28 + 2) = v16;
        unint64_t v29 = a4[1].u32[0];
        if (v29 >= a4[1].u32[1]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a4 + 8 * v29) = v47;
        ++a4[1].i32[0];
        continue;
      }
      int32x2_t v18 = a4[6];
      __int32 v19 = v17 - 1;
      unsigned int v20 = v19 & ((v15 >> 4) ^ (v15 >> 9));
      int v21 = (void *)(*(void *)&v18 + 16 * v20);
      uint64_t v22 = *v21;
      if (*v21 != v15)
      {
        int v23 = 0;
        int v24 = 1;
        while (v22 != -4096)
        {
          if (v23) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v22 == -8192;
          }
          if (v25) {
            int v23 = v21;
          }
          unsigned int v26 = v20 + v24++;
          unsigned int v20 = v26 & v19;
          int v21 = (void *)(*(void *)&v18 + 16 * v20);
          uint64_t v22 = *v21;
          if (*v21 == v15) {
            goto LABEL_26;
          }
        }
        if (v23) {
          unsigned int v27 = v23;
        }
        else {
          unsigned int v27 = v21;
        }
        goto LABEL_24;
      }
LABEL_26:
      ;
    }
  }
LABEL_27:
  int32x2_t v30 = a4[6];
  uint64_t v31 = a4[8].u32[0];
  if (v31)
  {
    LODWORD(v32) = (v31 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v33 = *(void *)&v30 + 16 * v32;
    char v34 = *(llvm::MachineInstr **)v33;
    if (*(llvm::MachineInstr **)v33 == this) {
      goto LABEL_34;
    }
    int v35 = 1;
    while (v34 != (llvm::MachineInstr *)-4096)
    {
      int v36 = v32 + v35++;
      uint64_t v32 = v36 & (v31 - 1);
      char v34 = *(llvm::MachineInstr **)(*(void *)&v30 + 16 * v32);
      if (v34 == this)
      {
        uint64_t v33 = *(void *)&v30 + 16 * v32;
        goto LABEL_34;
      }
    }
  }
  uint64_t v33 = *(void *)&v30 + 16 * v31;
LABEL_34:
  if (v33 != *(void *)&v30 + 16 * v31)
  {
    *(void *)(*(void *)a4 + 8 * *(unsigned int *)(v33 + 8)) = 0;
    *(void *)uint64_t v33 = -8192;
    a4[7] = vadd_s32(a4[7], (int32x2_t)0x1FFFFFFFFLL);
  }
  llvm::MachineInstr::eraseFromParent(this);
  if (a3)
  {
    unint64_t v37 = *(void **)(a3 + 168);
    if (v37 != *(void **)(a3 + 160))
    {
      uint64_t v41 = *(unsigned int *)(a3 + 176);
      if (v41 >= 0x21 && 4 * (*(_DWORD *)(a3 + 180) - *(_DWORD *)(a3 + 184)) < v41)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a3 + 160));
        goto LABEL_39;
      }
      memset(v37, 255, 8 * v41);
    }
    *(_DWORD *)(a3 + 180) = 0;
    *(_DWORD *)(a3 + 184) = 0;
LABEL_39:
    uint64_t v38 = *(unsigned int *)(a3 + 96);
    if (v38)
    {
      uint64_t v44 = 8 * v38;
      uint64_t v45 = *(void *)(a3 + 88) - 8;
      do
      {
        uint64_t v46 = *(unsigned __int8 **)(v45 + v44);
        if (v46) {
          llvm::MetadataTracking::untrack(v45 + v44, v46);
        }
        v44 -= 8;
      }
      while (v44);
    }
    unint64_t v40 = *(void **)(a3 + 144);
    uint64_t v39 = (void *)(a3 + 144);
    *((_DWORD *)v39 - 12) = 0;
    sub_1CC715554((uint64_t)(v39 - 1), v40);
    *(v39 - 1) = v39;
    *uint64_t v39 = 0;
    v39[1] = 0;
  }
}

void sub_1CC73FF6C(llvm::MachineInstr **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = v35;
  uint64_t v34 = 0x400000000;
  unsigned int v38 = 8;
  uint64_t v8 = operator new(0x80uLL, (std::align_val_t)8uLL);
  int v36 = v8;
  unint64_t v37 = 0;
  if (v38)
  {
    uint64_t v9 = 16 * v38;
    do
    {
      *uint64_t v8 = -4096;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  if (a2)
  {
    uint64_t v10 = 8 * a2;
    do
    {
      unsigned int v11 = *a1++;
      sub_1CC73FC1C(v11, a3, a4, (int32x2_t *)&v33);
      v10 -= 8;
    }
    while (v10);
    for (int i = v37; v37; int i = v37)
    {
      unsigned int v13 = v34;
      do
        uint64_t v14 = *((void *)v33 + --v13);
      while (!v14);
      LODWORD(v34) = v13;
      if (v38)
      {
        LODWORD(v15) = (v38 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        __int32 v16 = &v36[2 * v15];
        uint64_t v17 = *v16;
        if (v14 == *v16)
        {
LABEL_16:
          *__int32 v16 = -8192;
          unint64_t v37 = __PAIR64__(HIDWORD(v37), i - 1) + 0x100000000;
        }
        else
        {
          int v18 = 1;
          while (v17 != -4096)
          {
            int v19 = v15 + v18++;
            uint64_t v15 = v19 & (v38 - 1);
            uint64_t v17 = v36[2 * v15];
            if (v14 == v17)
            {
              __int32 v16 = &v36[2 * v15];
              goto LABEL_16;
            }
          }
        }
      }
      unsigned int v20 = **(unsigned __int16 **)(v14 + 16);
      BOOL v21 = v20 > 0x20;
      uint64_t v22 = (1 << v20) & 0x100600000;
      if (v21 || v22 == 0)
      {
        BOOL v32 = 0;
        if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v14, 0, &v32)
          || ((int v30 = **(unsigned __int16 **)(v14 + 16), v30 != 69) ? (v31 = v30 == 0) : (v31 = 1), v31))
        {
          uint64_t v24 = *(unsigned int *)(v14 + 40);
          if (v24)
          {
            BOOL v25 = *(_DWORD **)(v14 + 32);
            unsigned int v26 = &v25[8 * v24];
            while (1)
            {
              if ((*v25 & 0x10000FF) == 0x1000000)
              {
                uint64_t v27 = v25[1];
                if ((v27 - 1) < 0x3FFFFFFF) {
                  goto LABEL_38;
                }
                unsigned int v28 = (uint64_t *)((v27 & 0x80000000) != 0
                                ? *(void *)(a3 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8
                                : *(void *)(a3 + 272) + 8 * v27);
                uint64_t v29 = *v28;
                if (v29) {
                  break;
                }
              }
LABEL_32:
              v25 += 8;
              if (v25 == v26) {
                goto LABEL_33;
              }
            }
            while ((*(_DWORD *)v29 & 0x81000000) != 0)
            {
              uint64_t v29 = *(void *)(v29 + 24);
              if (!v29) {
                goto LABEL_32;
              }
            }
          }
          else
          {
LABEL_33:
            sub_1CC73FC1C((llvm::MachineInstr *)v14, a3, a4, (int32x2_t *)&v33);
          }
        }
      }
LABEL_38:
      ;
    }
  }
  MEMORY[0x1D25D9CD0](v36, 8);
  if (v33 != v35) {
    free(v33);
  }
}

uint64_t sub_1CC740210@<X0>(llvm::APInt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v158 = 1;
  uint64_t v157 = 0;
  unsigned int v156 = 1;
  unint64_t v155 = 0;
  unsigned int v154 = 1;
  uint64_t v153 = 0;
  unsigned int v152 = 1;
  unint64_t v151 = 0;
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unsigned int v148 = v4;
  if (v4 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v147);
  }
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  if (!v4) {
    unint64_t v5 = 0;
  }
  unsigned int v150 = v4;
  if (v4 == a2) {
    uint64_t v149 = 0;
  }
  else {
    uint64_t v149 = v5 >> a2;
  }
  unsigned int v6 = *((_DWORD *)a1 + 2);
  unsigned int v148 = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v147);
  }
  unint64_t v147 = 1 << (v6 - 1);
  unsigned int v7 = *((_DWORD *)a1 + 2);
  unsigned int v146 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v145);
  }
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (!v7) {
    unint64_t v8 = 0;
  }
  unint64_t v145 = v8 & ~(1 << (v7 - 1));
  if (v150) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v150;
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v10 = v9 & (v149 - *(void *)a1);
  unsigned int v142 = v150;
  unint64_t v141 = v10;
  llvm::APInt::urem((llvm::APInt *)&v141, a1, (uint64_t)&v143);
  if (v144 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v143);
  }
  else
  {
    if (v144) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v143 = v11 & ~v143;
  }
  llvm::APInt::operator++((uint64_t)&v143);
  unsigned int v12 = v144;
  if (v144 >= 0x41)
  {
    uint64_t v97 = 0;
    uint64_t v98 = (unint64_t *)v143;
    uint64_t v99 = (uint64_t *)v149;
    unint64_t v100 = ((unint64_t)v144 + 63) >> 6;
    unint64_t v101 = v100;
    do
    {
      uint64_t v102 = *v99++;
      unint64_t v103 = v102 + *v98;
      BOOL v104 = v103 + 1 <= *v98;
      if (v97)
      {
        ++v103;
        uint64_t v97 = v104;
      }
      else
      {
        uint64_t v97 = v103 < *v98;
      }
      *v98++ = v103;
      --v101;
    }
    while (v101);
    *(void *)(v143 + 8 * (v100 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    unsigned int v12 = v144;
    unint64_t v15 = v143;
  }
  else
  {
    unint64_t v13 = v143 + v149;
    if (v144) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v15 = v14 & v13;
    unint64_t v143 = v14 & v13;
  }
  unsigned int v144 = 0;
  if (v158 > 0x40 && v157)
  {
    MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
    uint64_t v157 = v15;
    unsigned int v158 = v12;
    if (v144 >= 0x41 && v143) {
      MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v157 = v15;
    unsigned int v158 = v12;
  }
  if (v142 >= 0x41 && v141) {
    MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
  }
  int v16 = *((_DWORD *)a1 + 2);
  llvm::APInt::udiv((uint64_t)&v147, (const llvm::APInt *)&v157, (uint64_t)&v143);
  if (v156 >= 0x41 && v155) {
    MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
  }
  unint64_t v155 = v143;
  unsigned int v156 = v144;
  llvm::APInt::operator*((uint64_t)&v155, &v157, (uint64_t)&v143);
  if (v144 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v143);
  }
  else
  {
    if (v144) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    }
    else {
      unint64_t v17 = 0;
    }
    unint64_t v143 = v17 & ~v143;
  }
  llvm::APInt::operator++((uint64_t)&v143);
  unsigned int v18 = v144;
  if (v144 >= 0x41)
  {
    uint64_t v105 = 0;
    uint64_t v106 = (unint64_t *)v143;
    unsigned int v107 = (uint64_t *)v147;
    unint64_t v108 = ((unint64_t)v144 + 63) >> 6;
    unint64_t v109 = v108;
    do
    {
      uint64_t v110 = *v107++;
      unint64_t v111 = v110 + *v106;
      BOOL v112 = v111 + 1 <= *v106;
      if (v105)
      {
        ++v111;
        uint64_t v105 = v112;
      }
      else
      {
        uint64_t v105 = v111 < *v106;
      }
      *v106++ = v111;
      --v109;
    }
    while (v109);
    *(void *)(v143 + 8 * (v108 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
    unsigned int v18 = v144;
    unint64_t v21 = v143;
  }
  else
  {
    unint64_t v19 = v143 + v147;
    if (v144) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    }
    else {
      unint64_t v20 = 0;
    }
    unint64_t v21 = v20 & v19;
    unint64_t v143 = v20 & v19;
  }
  unsigned int v144 = 0;
  if (v154 > 0x40 && v153)
  {
    MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
    uint64_t v153 = v21;
    unsigned int v154 = v18;
    if (v144 >= 0x41 && v143) {
      MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v153 = v21;
    unsigned int v154 = v18;
  }
  llvm::APInt::udiv((uint64_t)&v145, a1, (uint64_t)&v143);
  if (v152 >= 0x41 && v151) {
    MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
  }
  unint64_t v151 = v143;
  unsigned int v152 = v144;
  llvm::APInt::operator*((uint64_t)&v151, a1, (uint64_t)&v143);
  if (v144 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v143);
  }
  else
  {
    if (v144) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v143 = v22 & ~v143;
  }
  int v23 = v16 - 1;
  llvm::APInt::operator++((uint64_t)&v143);
  unsigned int v24 = v144;
  if (v144 >= 0x41)
  {
    uint64_t v113 = 0;
    v114 = (unint64_t *)v143;
    v115 = (uint64_t *)v145;
    unint64_t v116 = ((unint64_t)v144 + 63) >> 6;
    unint64_t v117 = v116;
    do
    {
      uint64_t v118 = *v115++;
      unint64_t v119 = v118 + *v114;
      BOOL v120 = v119 + 1 <= *v114;
      if (v113)
      {
        ++v119;
        uint64_t v113 = v120;
      }
      else
      {
        uint64_t v113 = v119 < *v114;
      }
      *v114++ = v119;
      --v117;
    }
    while (v117);
    *(void *)(v143 + 8 * (v116 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
    unsigned int v24 = v144;
    unsigned int v26 = (char *)v143;
  }
  else
  {
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
    if (!v144) {
      unint64_t v25 = 0;
    }
    unsigned int v26 = (char *)(v25 & (v143 + v145));
  }
  BOOL v125 = 0;
  __src = v26;
  unsigned int v27 = 1;
  while (1)
  {
    while (1)
    {
LABEL_44:
      if (v158 >= 0x41) {
        operator new[]();
      }
      unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v158;
      if (!v158) {
        unint64_t v28 = 0;
      }
      unint64_t v29 = v28 & (v157 - v21);
      unsigned int v30 = v154;
      if (v154 > 0x40)
      {
        unint64_t v77 = (((unint64_t)v154 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v77)
          {
            int v31 = 0;
            goto LABEL_51;
          }
          unint64_t v78 = *(void *)(v21 - 8 + v77);
          unint64_t v79 = *(void *)(v29 + v77 - 8);
          v77 -= 8;
        }
        while (v78 == v79);
        if (v78 > v79) {
          int v31 = 1;
        }
        else {
          int v31 = -1;
        }
      }
      else if (v21 < v29)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = v21 > v29;
      }
LABEL_51:
      if (v31 < 0)
      {
        if (v156 >= 0x41) {
          operator new[]();
        }
        unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v156;
        if (!v156) {
          unint64_t v32 = 0;
        }
        unint64_t v155 = v32 & (2 * v155);
        if (v154 >= 0x41) {
          operator new[]();
        }
        if (v154) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v154;
        }
        else {
          unint64_t v33 = 0;
        }
        uint64_t v34 = 2 * v153;
      }
      else
      {
        if (v156 >= 0x41) {
          operator new[]();
        }
        unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v156;
        if (!v156) {
          unint64_t v56 = 0;
        }
        unsigned int v140 = v156;
        unint64_t v139 = v56 & (2 * v155);
        llvm::APInt::operator+=((uint64_t)&v139, 1uLL);
        unsigned int v57 = v140;
        unint64_t v58 = v139;
        unsigned int v140 = 0;
        if (v156 > 0x40)
        {
          if (v155)
          {
            MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
            unint64_t v155 = v58;
            unsigned int v156 = v57;
            if (v140 >= 0x41 && v139) {
              MEMORY[0x1D25D9CB0](v139, 0x1000C8000313F17);
            }
          }
          else
          {
            unint64_t v155 = v139;
            unsigned int v156 = v57;
          }
        }
        else
        {
          unint64_t v155 = v139;
          unsigned int v156 = v57;
        }
        if (v30 >= 0x41) {
          operator new[]();
        }
        if (v30)
        {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
          uint64_t v34 = (v33 & (2 * v153)) - v157;
        }
        else
        {
          unint64_t v33 = 0;
          uint64_t v34 = -v157;
        }
      }
      unint64_t v21 = v33 & v34;
      uint64_t v153 = v33 & v34;
      unsigned int v138 = v24;
      if (v24 > 0x40) {
        operator new[]();
      }
      uint64_t v137 = __src;
      llvm::APInt::operator+=((uint64_t)&v137, 1uLL);
      uint64_t v35 = v138;
      unsigned int v138 = 0;
      unsigned int v36 = *((_DWORD *)a1 + 2);
      if (v36 >= 0x41) {
        operator new[]();
      }
      unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
      if (!v36) {
        unint64_t v37 = 0;
      }
      unint64_t v38 = v37 & (*(void *)a1 - (void)__src);
      if (v35 > 0x40)
      {
        unint64_t v80 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v80)
          {
            int v39 = 0;
            goto LABEL_67;
          }
          unint64_t v81 = *(void *)&v137[v80 - 8];
          unint64_t v82 = *(void *)(v38 + v80 - 8);
          v80 -= 8;
        }
        while (v81 == v82);
        if (v81 > v82) {
          int v39 = 1;
        }
        else {
          int v39 = -1;
        }
      }
      else if ((unint64_t)v137 < v38)
      {
        int v39 = -1;
      }
      else
      {
        int v39 = (unint64_t)v137 > v38;
      }
LABEL_67:
      if (v35 >= 0x41 && v137) {
        MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
      }
      if (v138 >= 0x41 && v137) {
        MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
      }
      unsigned int v40 = v152;
      if (v39 < 0)
      {
        if (v152 > 0x40)
        {
          unint64_t v41 = v151;
          unint64_t v91 = (((unint64_t)v152 + 63) >> 3) & 0x3FFFFFF8;
          while (v91)
          {
            unint64_t v92 = *(void *)(v151 - 8 + v91);
            unint64_t v93 = *(void *)(v147 - 8 + v91);
            v91 -= 8;
            if (v92 != v93)
            {
              if (v92 <= v93) {
                goto LABEL_105;
              }
              break;
            }
          }
        }
        else
        {
          unint64_t v41 = v151;
          if (v151 < v147)
          {
LABEL_72:
            uint64_t v42 = 2 * v41;
            unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
            if (!v40) {
              unint64_t v43 = 0;
            }
            unint64_t v151 = v43 & v42;
            unsigned int v152 = v40;
            if (v24) {
              unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
            }
            else {
              unint64_t v44 = 0;
            }
            unsigned int v132 = v24;
            uint64_t v131 = v44 & (2 * (void)__src);
            llvm::APInt::operator+=((uint64_t)&v131, 1uLL);
            LODWORD(v45) = v132;
            uint64_t v46 = (char *)v131;
            unsigned int v132 = 0;
            goto LABEL_77;
          }
        }
        *(unsigned char *)(a3 + 16) = 1;
LABEL_105:
        if (v40 >= 0x41) {
          operator new[]();
        }
        goto LABEL_72;
      }
      if (v152 > 0x40)
      {
        unint64_t v50 = v151;
        unint64_t v94 = (((unint64_t)v152 + 63) >> 3) & 0x3FFFFFF8;
        while (v94)
        {
          unint64_t v95 = *(void *)(v151 - 8 + v94);
          unint64_t v96 = *(void *)(v145 - 8 + v94);
          v94 -= 8;
          if (v95 != v96)
          {
            if (v95 <= v96) {
              goto LABEL_108;
            }
            break;
          }
        }
      }
      else
      {
        unint64_t v50 = v151;
        if (v151 < v145) {
          goto LABEL_92;
        }
      }
      *(unsigned char *)(a3 + 16) = 1;
LABEL_108:
      if (v40 >= 0x41) {
        operator new[]();
      }
LABEL_92:
      if (v40) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
      }
      else {
        unint64_t v51 = 0;
      }
      unsigned int v136 = v40;
      uint64_t v135 = v51 & (2 * v50);
      llvm::APInt::operator+=((uint64_t)&v135, 1uLL);
      unsigned int v52 = v136;
      unint64_t v53 = v135;
      unsigned int v136 = 0;
      if (v152 > 0x40)
      {
        if (v151)
        {
          MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
          unint64_t v151 = v53;
          unsigned int v152 = v52;
          if (v136 >= 0x41 && v135) {
            MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v151 = v135;
          unsigned int v152 = v52;
        }
      }
      else
      {
        unint64_t v151 = v135;
        unsigned int v152 = v52;
      }
      if (v24) {
        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
      }
      else {
        unint64_t v54 = 0;
      }
      unsigned int v134 = v24;
      uint64_t v133 = v54 & (2 * (void)__src);
      llvm::APInt::operator+=((uint64_t)&v133, 1uLL);
      uint64_t v45 = v134;
      uint64_t v46 = (char *)v133;
      unsigned int v134 = 0;
      if (v45 >= 0x41)
      {
        uint64_t v68 = 0;
        long long v69 = *(unint64_t **)a1;
        unint64_t v70 = (unint64_t)(v45 + 63) >> 6;
        int v71 = (unint64_t *)v133;
        unint64_t v72 = v70;
        do
        {
          unint64_t v73 = *v69++;
          unint64_t v74 = *v71 - v73;
          BOOL v75 = *v71 < v73;
          unint64_t v76 = *v71 + ~v73;
          if (v68)
          {
            uint64_t v68 = v76 >= *v71;
          }
          else
          {
            unint64_t v76 = v74;
            uint64_t v68 = v75;
          }
          *v71++ = v76;
          --v72;
        }
        while (v72);
        *(void *)&v46[8 * (v70 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
      }
      else
      {
        unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
        if (!v45) {
          unint64_t v55 = 0;
        }
        uint64_t v46 = (char *)(v55 & (v133 - *(void *)a1));
      }
      if (v134 < 0x41) {
        goto LABEL_77;
      }
      __src = v46;
      unsigned int v24 = v45;
      if (v133)
      {
        MEMORY[0x1D25D9CB0](v133, 0x1000C8000313F17);
LABEL_77:
        __src = v46;
        unsigned int v24 = v45;
      }
      unsigned int v130 = *((_DWORD *)a1 + 2);
      if (v130 > 0x40) {
        operator new[]();
      }
      int v129 = *(void **)a1;
      llvm::APInt::operator-=((uint64_t)&v129, 1uLL);
      uint64_t v47 = v130;
      uint64_t v48 = v129;
      unsigned int v130 = 0;
      if (v47 >= 0x41)
      {
        uint64_t v59 = 0;
        unint64_t v60 = (unint64_t)(v47 + 63) >> 6;
        uint64_t v61 = v129;
        int v62 = (unint64_t *)__src;
        unint64_t v63 = v60;
        do
        {
          unint64_t v64 = *v62++;
          unint64_t v65 = *v61 - v64;
          BOOL v66 = *v61 < v64;
          unint64_t v67 = *v61 + ~v64;
          if (v59)
          {
            uint64_t v59 = v67 >= *v61;
          }
          else
          {
            unint64_t v67 = v65;
            uint64_t v59 = v66;
          }
          *v61++ = v67;
          --v63;
        }
        while (v63);
        v48[(v60 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
      }
      else
      {
        unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
        if (!v47) {
          unint64_t v49 = 0;
        }
        uint64_t v48 = (void *)(v49 & ((char *)v129 - __src));
      }
      if (v27 >= 0x41 && v125) {
        MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
      }
      if (v130 >= 0x41 && v129) {
        MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
      }
      if (++v23 >= (2 * *((_DWORD *)a1 + 2))) {
        goto LABEL_147;
      }
      unsigned int v27 = v47;
      if (v156 > 0x40) {
        break;
      }
      BOOL v125 = v48;
      if (v155 >= (unint64_t)v48)
      {
        if ((void *)v155 != v48) {
          goto LABEL_147;
        }
        goto LABEL_259;
      }
    }
    unint64_t v83 = ((unint64_t)v156 + 63) >> 3;
    unint64_t v84 = v83 & 0x3FFFFFF8;
    while (v84)
    {
      unint64_t v85 = *(void *)(v155 + v84 - 8);
      unint64_t v86 = *(void *)((char *)v48 + v84 - 8);
      v84 -= 8;
      if (v85 != v86)
      {
        BOOL v125 = v48;
        if (v85 <= v86) {
          goto LABEL_44;
        }
        break;
      }
    }
    if (memcmp((const void *)v155, v48, v83 & 0x3FFFFFF8)) {
      break;
    }
LABEL_259:
    unsigned int v122 = v154;
    if (v154 < 0x41 || v122 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v153) <= 0x40)
    {
      unint64_t v21 = v153;
      uint64_t v123 = &v153;
      if (v122 >= 0x41) {
        uint64_t v123 = (uint64_t *)v153;
      }
      BOOL v125 = v48;
      if (!*v123) {
        continue;
      }
    }
    break;
  }
LABEL_147:
  unsigned int v128 = v152;
  if (v152 > 0x40) {
    operator new[]();
  }
  uint64_t v127 = v151;
  uint64_t result = llvm::APInt::operator+=((uint64_t)&v127, 1uLL);
  unsigned int v88 = v128;
  uint64_t v89 = v127;
  unsigned int v128 = 0;
  uint64_t v90 = a3;
  if (*(_DWORD *)(a3 + 8) > 0x40u)
  {
    uint64_t result = *(void *)a3;
    if (!*(void *)a3)
    {
      uint64_t v90 = a3;
      goto LABEL_149;
    }
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unsigned int v121 = v128;
    uint64_t v90 = a3;
    *(void *)a3 = v89;
    *(_DWORD *)(a3 + 8) = v88;
    if (v121 >= 0x41)
    {
      uint64_t result = v127;
      if (v127) {
        uint64_t result = MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
      }
    }
  }
  else
  {
LABEL_149:
    *(void *)uint64_t v90 = v127;
    *(_DWORD *)(v90 + 8) = v88;
  }
  *(_DWORD *)(v90 + 20) = v23 - *((_DWORD *)a1 + 2);
  if (v146 >= 0x41)
  {
    uint64_t result = v145;
    if (v145) {
      uint64_t result = MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
    }
  }
  if (v148 >= 0x41)
  {
    uint64_t result = v147;
    if (v147) {
      uint64_t result = MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
    }
  }
  if (v150 >= 0x41)
  {
    uint64_t result = v149;
    if (v149) {
      uint64_t result = MEMORY[0x1D25D9CB0](v149, 0x1000C8000313F17);
    }
  }
  if (v24 >= 0x41 && __src) {
    uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v152 >= 0x41)
  {
    uint64_t result = v151;
    if (v151) {
      uint64_t result = MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
    }
  }
  if (v154 >= 0x41)
  {
    uint64_t result = v153;
    if (v153) {
      uint64_t result = MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
    }
  }
  if (v156 >= 0x41)
  {
    uint64_t result = v155;
    if (v155) {
      uint64_t result = MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
    }
  }
  if (v47 >= 0x41 && v48) {
    uint64_t result = MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  if (v158 >= 0x41)
  {
    uint64_t result = v157;
    if (v157) {
      return MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t *sub_1CC741CD8@<X0>(const llvm::APInt *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v120 = 1;
  unint64_t v119 = 0;
  unsigned int v118 = 1;
  unint64_t v117 = 0;
  unsigned int v116 = 1;
  unint64_t v115 = 0;
  int v114 = 1;
  unint64_t v113 = 0;
  unsigned int v112 = 1;
  unint64_t v111 = 0;
  unsigned int v110 = 1;
  __src = 0;
  unsigned int v2 = *((_DWORD *)a1 + 2);
  unsigned int v108 = v2;
  if (v2 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v107);
  }
  uint64_t v107 = 1 << (v2 - 1);
  *(_DWORD *)(a2 + 8) = 1;
  *(void *)a2 = 0;
  sub_1CBF71A98(a1, (llvm::APInt *)&v105);
  if (v120 >= 0x41 && v119) {
    MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
  }
  unint64_t v119 = (unint64_t *)v105;
  unsigned int v120 = v106;
  unsigned int v106 = *((_DWORD *)a1 + 2);
  if (v106 > 0x40) {
    operator new[]();
  }
  unint64_t v105 = *(void *)a1 >> (v106 - 1);
  unsigned int v3 = v106;
  unint64_t v4 = v105 + v107;
  if (v106) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
  }
  else {
    unint64_t v5 = 0;
  }
  unsigned int v6 = (void *)(v5 & v4);
  unint64_t v105 = v5 & v4;
  unsigned int v106 = 0;
  if (v110 > 0x40 && __src)
  {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    __src = v6;
    unsigned int v110 = v3;
    if (v106 >= 0x41 && v105)
    {
      MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
      unsigned int v3 = v110;
    }
  }
  else
  {
    __src = (void *)(v5 & v4);
    unsigned int v110 = v3;
  }
  unsigned int v104 = v3;
  if (v3 > 0x40) {
    operator new[]();
  }
  unint64_t v103 = (uint64_t *)__src;
  llvm::APInt::operator-=((uint64_t)&v103, 1uLL);
  unsigned int v7 = v104;
  unint64_t v8 = v103;
  unsigned int v104 = 0;
  llvm::APInt::urem((llvm::APInt *)&__src, (const llvm::APInt *)&v119, (uint64_t)&v105);
  if (v106 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v105);
  }
  else
  {
    if (v106) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
    }
    else {
      unint64_t v9 = 0;
    }
    unint64_t v105 = v9 & ~v105;
  }
  llvm::APInt::operator++((uint64_t)&v105);
  unsigned int v10 = v106;
  if (v106 >= 0x41)
  {
    uint64_t v63 = 0;
    unint64_t v64 = (unint64_t *)v105;
    unint64_t v65 = ((unint64_t)v106 + 63) >> 6;
    BOOL v66 = v8;
    unint64_t v67 = v65;
    do
    {
      uint64_t v68 = *v66++;
      unint64_t v69 = v68 + *v64;
      BOOL v70 = v69 + 1 <= *v64;
      if (v63)
      {
        ++v69;
        uint64_t v63 = v70;
      }
      else
      {
        uint64_t v63 = v69 < *v64;
      }
      *v64++ = v69;
      --v67;
    }
    while (v67);
    *(void *)(v105 + 8 * (v65 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    unsigned int v10 = v106;
    unint64_t v13 = (unint64_t *)v105;
  }
  else
  {
    unint64_t v11 = (unint64_t)v8 + v105;
    if (v106) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v13 = (unint64_t *)(v12 & v11);
    unint64_t v105 = v12 & v11;
  }
  unsigned int v106 = 0;
  if (v118 > 0x40 && v117)
  {
    MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
    unint64_t v117 = v13;
    unsigned int v118 = v10;
    if (v106 >= 0x41 && v105) {
      MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
    }
  }
  else
  {
    unint64_t v117 = v13;
    unsigned int v118 = v10;
  }
  if (v7 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  int v14 = *((_DWORD *)a1 + 2);
  llvm::APInt::udiv((uint64_t)&v107, (const llvm::APInt *)&v117, (uint64_t)&v105);
  if (v116 >= 0x41 && v115) {
    MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
  }
  unint64_t v115 = v105;
  unsigned int v116 = v106;
  llvm::APInt::operator*((uint64_t)&v115, &v117, (uint64_t)&v105);
  if (v106 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v105);
  }
  else
  {
    if (v106) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v105 = v15 & ~v105;
  }
  llvm::APInt::operator++((uint64_t)&v105);
  unsigned int v16 = v106;
  if (v106 >= 0x41)
  {
    uint64_t v71 = 0;
    unint64_t v72 = (unint64_t *)v105;
    unint64_t v73 = (uint64_t *)v107;
    unint64_t v74 = ((unint64_t)v106 + 63) >> 6;
    unint64_t v75 = v74;
    do
    {
      uint64_t v76 = *v73++;
      unint64_t v77 = v76 + *v72;
      BOOL v78 = v77 + 1 <= *v72;
      if (v71)
      {
        ++v77;
        uint64_t v71 = v78;
      }
      else
      {
        uint64_t v71 = v77 < *v72;
      }
      *v72++ = v77;
      --v75;
    }
    while (v75);
    *(void *)(v105 + 8 * (v74 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    unsigned int v16 = v106;
    unint64_t v18 = v105;
  }
  else
  {
    if (v106) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
    }
    else {
      unint64_t v17 = 0;
    }
    unint64_t v18 = v17 & (v105 + v107);
  }
  unint64_t v113 = v18;
  int v114 = v16;
  llvm::APInt::udiv((uint64_t)&v107, (const llvm::APInt *)&v119, (uint64_t)&v105);
  if (v112 >= 0x41 && v111) {
    MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
  }
  unint64_t v111 = v105;
  unsigned int v112 = v106;
  llvm::APInt::operator*((uint64_t)&v111, &v119, (uint64_t)&v105);
  if (v106 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v105);
  }
  else
  {
    if (v106) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v105 = v19 & ~v105;
  }
  int v92 = v14 - 1;
  llvm::APInt::operator++((uint64_t)&v105);
  unsigned int v20 = v106;
  if (v106 >= 0x41)
  {
    uint64_t v79 = 0;
    unint64_t v80 = (unint64_t *)v105;
    unint64_t v81 = (uint64_t *)v107;
    unint64_t v82 = ((unint64_t)v106 + 63) >> 6;
    unint64_t v83 = v82;
    do
    {
      uint64_t v84 = *v81++;
      unint64_t v85 = v84 + *v80;
      BOOL v86 = v85 + 1 <= *v80;
      if (v79)
      {
        ++v85;
        uint64_t v79 = v86;
      }
      else
      {
        uint64_t v79 = v85 < *v80;
      }
      *v80++ = v85;
      --v83;
    }
    while (v83);
    *(void *)(v105 + 8 * (v82 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    unsigned int v20 = v106;
    unint64_t v22 = v105;
  }
  else
  {
    if (v106) {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
    }
    else {
      unint64_t v21 = 0;
    }
    unint64_t v22 = v21 & (v105 + v107);
  }
  uint64_t v89 = 0;
  unint64_t v23 = v116;
  unsigned int v24 = v20;
  unsigned int v25 = 1;
  while (1)
  {
LABEL_40:
    unsigned int v106 = v23;
    if (v23 > 0x40) {
      operator new[]();
    }
    if (v23 == 1)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 1;
    }
    else
    {
      uint64_t v26 = 2 * v115;
      unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
      if (!v23) {
        unint64_t v27 = 0;
      }
    }
    unint64_t v105 = v27 & v26;
    unint64_t v115 = v27 & v26;
    unsigned int v116 = v106;
    unsigned int v106 = v16;
    if (v16 > 0x40) {
      operator new[]();
    }
    uint64_t v28 = 2 * v18;
    unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    if (!v16) {
      unint64_t v29 = 0;
    }
    if (v16 == 1)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 1;
    }
    unint64_t v30 = v29 & v28;
    unint64_t v105 = v29 & v28;
    unint64_t v113 = v29 & v28;
    unsigned int v31 = v106;
    int v114 = v106;
    if (v106 > 0x40)
    {
      unint64_t v45 = (((unint64_t)v106 + 63) >> 3) & 0x3FFFFFF8;
      while (v45)
      {
        unint64_t v46 = *(void *)(v30 + v45 - 8);
        unint64_t v47 = *(unint64_t *)((char *)v117 + v45 - 8);
        v45 -= 8;
        if (v46 != v47)
        {
          if (v46 <= v47) {
            goto LABEL_51;
          }
          break;
        }
      }
    }
    else if (v30 < (unint64_t)v117)
    {
LABEL_51:
      unint64_t v18 = v30;
      unsigned int v16 = v106;
      goto LABEL_52;
    }
    unsigned int v102 = v116;
    if (v116 > 0x40) {
      operator new[]();
    }
    unint64_t v101 = v115;
    llvm::APInt::operator+=((uint64_t)&v101, 1uLL);
    unsigned int v43 = v102;
    unint64_t v44 = v101;
    unsigned int v102 = 0;
    if (v116 > 0x40 && v115)
    {
      MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
      unint64_t v115 = v44;
      unsigned int v116 = v43;
      if (v102 >= 0x41 && v101) {
        MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
      }
    }
    else
    {
      unint64_t v115 = v101;
      unsigned int v116 = v43;
    }
    unsigned int v100 = v31;
    if (v31 > 0x40) {
      operator new[]();
    }
    unint64_t v99 = v30;
    llvm::APInt::operator-=((uint64_t)&v99, &v117);
    unsigned int v16 = v100;
    unint64_t v18 = v99;
    unsigned int v100 = 0;
    unint64_t v113 = v99;
    int v114 = v16;
    unint64_t v30 = v99;
LABEL_52:
    unsigned int v106 = v112;
    if (v112 > 0x40) {
      operator new[]();
    }
    if (v112 == 1)
    {
      uint64_t v32 = 0;
      unint64_t v33 = 1;
    }
    else
    {
      uint64_t v32 = 2 * v111;
      if (v112) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v112;
      }
      else {
        unint64_t v33 = 0;
      }
    }
    unint64_t v105 = v33 & v32;
    unint64_t v111 = v33 & v32;
    unsigned int v112 = v106;
    unsigned int v106 = v24;
    if (v24 > 0x40) {
      operator new[]();
    }
    uint64_t v34 = 2 * v22;
    unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
    if (!v24) {
      unint64_t v35 = 0;
    }
    if (v24 == 1)
    {
      uint64_t v34 = 0;
      unint64_t v35 = 1;
    }
    unint64_t v22 = v35 & v34;
    unsigned int v24 = v106;
    if (v106 > 0x40)
    {
      unint64_t v48 = (((unint64_t)v106 + 63) >> 3) & 0x3FFFFFF8;
      while (v48)
      {
        unint64_t v49 = *(void *)(v22 - 8 + v48);
        unint64_t v50 = *(unint64_t *)((char *)v119 + v48 - 8);
        v48 -= 8;
        if (v49 != v50)
        {
          if (v49 <= v50) {
            goto LABEL_64;
          }
          break;
        }
      }
    }
    else if (v22 < (unint64_t)v119)
    {
      goto LABEL_64;
    }
    unsigned int v98 = v112;
    if (v112 > 0x40) {
      operator new[]();
    }
    unint64_t v97 = v111;
    llvm::APInt::operator+=((uint64_t)&v97, 1uLL);
    unsigned int v40 = v98;
    unint64_t v41 = v97;
    unsigned int v98 = 0;
    if (v112 > 0x40)
    {
      if (v111)
      {
        MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
        unint64_t v111 = v41;
        unsigned int v112 = v40;
        if (v98 >= 0x41 && v97) {
          MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v111 = v97;
        unsigned int v112 = v40;
      }
    }
    else
    {
      unint64_t v111 = v97;
      unsigned int v112 = v40;
    }
    if (v24 >= 0x41) {
      operator new[]();
    }
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
    if (!v24) {
      unint64_t v42 = 0;
    }
    unint64_t v22 = v42 & (v22 - (void)v119);
LABEL_64:
    unsigned int v36 = v120;
    if (v120 >= 0x41) {
      operator new[]();
    }
    unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v120;
    if (!v120) {
      unint64_t v37 = 0;
    }
    unint64_t v38 = (char *)(v37 & ((unint64_t)v119 - v22));
    if (v25 >= 0x41 && v89) {
      MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
    }
    ++v92;
    unint64_t v23 = v116;
    if (v116 > 0x40) {
      break;
    }
    uint64_t v89 = v38;
    unsigned int v25 = v36;
    if (v115 >= (unint64_t)v38)
    {
      if ((char *)v115 != v38) {
        goto LABEL_111;
      }
LABEL_71:
      if (v16 >= 0x41)
      {
        int v88 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v113);
        int v39 = (void *)v30;
        if (v16 - v88 > 0x40) {
          goto LABEL_111;
        }
      }
      else
      {
        int v39 = &v113;
      }
      unint64_t v18 = v30;
      uint64_t v89 = v38;
      unsigned int v25 = v36;
      if (*v39) {
        goto LABEL_111;
      }
    }
  }
  unint64_t v51 = ((unint64_t)v116 + 63) >> 3;
  unint64_t v52 = v51 & 0x3FFFFFF8;
  while (v52)
  {
    unint64_t v53 = *(void *)(v115 + v52 - 8);
    unint64_t v54 = *(void *)&v38[v52 - 8];
    v52 -= 8;
    if (v53 != v54)
    {
      uint64_t v89 = v38;
      unsigned int v25 = v36;
      if (v53 <= v54) {
        goto LABEL_40;
      }
      break;
    }
  }
  if (!memcmp((const void *)v115, v38, v51 & 0x3FFFFFF8)) {
    goto LABEL_71;
  }
LABEL_111:
  unsigned int v96 = v112;
  if (v112 > 0x40) {
    operator new[]();
  }
  unint64_t v95 = (unint64_t *)v111;
  uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v95, 1uLL);
  unsigned int v56 = v96;
  unsigned int v57 = v95;
  unsigned int v96 = 0;
  if (*(_DWORD *)(a2 + 8) > 0x40u)
  {
    uint64_t result = *(unint64_t **)a2;
    if (*(void *)a2)
    {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      unsigned int v87 = v96;
      *(void *)a2 = v57;
      *(_DWORD *)(a2 + 8) = v56;
      if (v87 >= 0x41)
      {
        uint64_t result = v95;
        if (v95) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      *(void *)a2 = v95;
      *(_DWORD *)(a2 + 8) = v56;
    }
  }
  else
  {
    *(void *)a2 = v95;
    *(_DWORD *)(a2 + 8) = v56;
  }
  unsigned int v58 = *((_DWORD *)a1 + 2);
  char v59 = v58 - 1;
  if (v58 >= 0x41) {
    unint64_t v60 = (const llvm::APInt *)(*(void *)a1 + 8 * ((v58 - 1) >> 6));
  }
  else {
    unint64_t v60 = a1;
  }
  if ((*(void *)v60 >> v59))
  {
    unsigned int v94 = v56;
    if (v56 >= 0x41) {
      operator new[]();
    }
    if (v56) {
      unint64_t v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
    }
    else {
      unint64_t v61 = 0;
    }
    unint64_t v93 = v61 & ~(unint64_t)v57;
    uint64_t result = (unint64_t *)llvm::APInt::operator++((uint64_t)&v93);
    unsigned int v62 = v94;
    unsigned int v94 = 0;
    *(void *)a2 = v93;
    *(_DWORD *)(a2 + 8) = v62;
  }
  *(_DWORD *)(a2 + 16) = v92 - *((_DWORD *)a1 + 2);
  if (v108 >= 0x41)
  {
    uint64_t result = (unint64_t *)v107;
    if (v107) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
    }
  }
  if (v110 >= 0x41)
  {
    uint64_t result = (unint64_t *)__src;
    if (__src) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  if (v24 >= 0x41 && v22) {
    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
  }
  if (v112 >= 0x41)
  {
    uint64_t result = (unint64_t *)v111;
    if (v111) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
    }
  }
  if (v16 >= 0x41 && v30) {
    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  if (v116 >= 0x41)
  {
    uint64_t result = (unint64_t *)v115;
    if (v115) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
    }
  }
  if (v36 >= 0x41 && v38) {
    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
  }
  if (v118 >= 0x41)
  {
    uint64_t result = v117;
    if (v117) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
    }
  }
  if (v120 >= 0x41)
  {
    uint64_t result = v119;
    if (v119) {
      return (unint64_t *)MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CC743148(uint64_t result, uint64_t a2)
{
  if ((_UNKNOWN *)a2 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)result, (uint64_t)&unk_1CFB2E344);
  }
  *(void *)uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(result + 20) = *(unsigned char *)(result + 20) & 0xF0 | 3;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    unsigned int v3 = *(void **)(result + 8);
    *unsigned int v3 = 0;
    uint64_t v4 = result;
    bzero(v3 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v4;
  }
  else
  {
    *(void *)(result + 8) = 0;
  }
  return result;
}

uint64_t sub_1CC743230(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_1CC743240(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t LLVMAGXRuntimeMajorVersion()
{
  return 1;
}

uint64_t LLVMAGXRuntimeMinorVersion()
{
  return 104;
}

uint64_t llvm::LLVMAGXDriverMajorVersionFromMetadata(llvm *this, llvm::Module *a2)
{
  return sub_1CC743264(this, 0);
}

uint64_t sub_1CC743264(llvm::Module *a1, int a2)
{
  unsigned int v16 = "agx.interface";
  __int16 v17 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, &v16);
  if (result)
  {
    uint64_t v4 = *(uint64_t ***)(result + 48);
    if (*((_DWORD *)v4 + 2) != 1) {
      return 0;
    }
    uint64_t v5 = **v4;
    if (*(_DWORD *)(v5 + 8) != 3) {
      return 0;
    }
    unint64_t v8 = *(unsigned char **)(v5 - 24);
    uint64_t v6 = v5 - 24;
    unsigned int v7 = v8;
    if (*v8) {
      return 0;
    }
    uint64_t v9 = *((void *)v7 + 1);
    if (*(void *)v9 != 7) {
      return 0;
    }
    int v10 = *(_DWORD *)(v9 + 24);
    int v11 = *(_DWORD *)(v9 + 27);
    BOOL v12 = v10 == 1936876918 && v11 == 1852795251;
    if (v12
      && (uint64_t v13 = *(void *)(v6 + 8 * (a2 + 1)), *(unsigned char *)v13 == 1)
      && (uint64_t v14 = *(void *)(v13 + 128), *(unsigned char *)(v14 + 16) == 16))
    {
      unint64_t v15 = (unsigned int *)(v14 + 24);
      if (*(_DWORD *)(v14 + 32) >= 0x41u) {
        unint64_t v15 = *(unsigned int **)v15;
      }
      return *v15;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::LLVMAGXDriverMinorVersionFromMetadata(llvm *this, llvm::Module *a2)
{
  return sub_1CC743264(this, 1);
}

uint64_t llvm::LLVMAGXDriverVersionFromMetadata(llvm *this, llvm::Module *a2)
{
  sub_1CBF43AA8((uint64_t)v6);
  sub_1CC743264(this, 0);
  unsigned int v3 = (void *)std::ostream::operator<<();
  sub_1CBF435C4(v3, (uint64_t)".", 1);
  sub_1CC743264(this, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v6[2] = v4;
  void v6[3] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D25D9C00](&v8);
}

void llvm::GetGitHash(unsigned char *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t llvm::AGXPseudoWaitPlacement::needsImplicitUse(llvm::AGXPseudoWaitPlacement *this, llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(llvm::AGXPseudoWaitPlacement *, void))(*(void *)this + 176))(this, *(void *)(*((void *)a2 + 2) + 16));
}

uint64_t llvm::AGXPseudoWaitPlacement::runOnMachineFunction(llvm::AGXPseudoWaitPlacement *this, llvm::MachineFunction *a2)
{
  v129[8] = *MEMORY[0x1E4F143B8];
  *((void *)this + 31) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 104))(*((void *)a2 + 2));
  *((void *)this + 32) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 176))(*((void *)a2 + 2));
  *((void *)this + 33) = *((void *)a2 + 5);
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_162:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LiveIntervals::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_162;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *((void *)this + 34) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LiveIntervals::ID);
  if (*(unsigned char *)(*((void *)this + 33) + 16))
  {
    uint64_t v8 = (char *)a2 + 320;
    uint64_t v9 = *((void *)a2 + 41);
    unint64_t v119 = v8;
    if ((char *)v9 != v8)
    {
      char v117 = 0;
      while (1)
      {
        uint64_t v125 = 1;
        *(void *)&long long v10 = -1;
        *((void *)&v10 + 1) = -1;
        v126[2] = v10;
        v126[3] = v10;
        v126[0] = v10;
        v126[1] = v10;
        __s = (__int32 *)v129;
        size_t __n = 0x1000000000;
        uint64_t v118 = *(void *)(*(void *)(*(void *)(*((void *)this + 34) + 288) + 392)
                         + 16 * *(unsigned int *)(v9 + 24));
        int v11 = (void *)(v9 + 48);
        for (uint64_t i = *(void *)(v9 + 56); (void *)i != v11; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v13 = *(void *)(i + 16);
          uint64_t v14 = *(unsigned __int16 *)(v13 + 2);
          uint64_t v15 = *(unsigned __int8 *)(v13 + 4);
          if ((*(unsigned int (**)(llvm::AGXPseudoWaitPlacement *, uint64_t))(*(void *)this + 184))(this, i))
          {
            BOOL v16 = v15 == 0;
          }
          else
          {
            BOOL v16 = 1;
          }
          if (!v16)
          {
            unint64_t v27 = *(_DWORD **)(i + 32);
            if ((*v27 & 0xFFFFF) == 0)
            {
              int v28 = v27[1];
              uint64_t v29 = *((void *)this + 34);
              uint64_t v30 = v28 & 0x7FFFFFFF;
              unsigned int v31 = (void *)(v29 + 408);
              uint64_t v32 = *(unsigned int *)(v29 + 416);
              if ((v28 & 0x7FFFFFFFu) >= v32)
              {
                sub_1CB9153B8((uint64_t)v31, v30 - v32 + 1, *(void *)(v29 + 424));
LABEL_141:
                operator new();
              }
              uint64_t v33 = *(void *)(*v31 + 8 * v30);
              if (!v33) {
                goto LABEL_141;
              }
              uint64_t v34 = *(void *)(v33 + 104);
              if (v34)
              {
                while ((**(void **)v34 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)v34
                                                                                + 24 * *(unsigned int *)(v34 + 8)
                                                                                - 16) & 0xFFFFFFFFFFFFFFF8))
                {
                  uint64_t v34 = *(void *)(v34 + 104);
                  if (!v34) {
                    goto LABEL_14;
                  }
                }
                LODWORD(v121) = v28;
                sub_1CB8FB8C0((uint64_t)&v125, &v121);
              }
            }
          }
LABEL_14:
          if (__n) {
            BOOL v17 = v14 > v15;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17)
          {
            while (1)
            {
              uint64_t v25 = *(void *)(i + 32);
              int v26 = *(_DWORD *)(v25 + 32 * v15);
              if ((v26 & 0x10000FF) == 0 && (v26 & 0xFFF00) != 0)
              {
                unsigned __int32 v18 = *(_DWORD *)(v25 + 32 * v15 + 4);
                if (v125)
                {
                  int v19 = 16;
                  unsigned int v20 = v126;
                }
                else
                {
                  int v19 = DWORD2(v126[0]);
                  if (!DWORD2(v126[0])) {
                    goto LABEL_30;
                  }
                  unsigned int v20 = *(_OWORD **)&v126[0];
                }
                int v21 = v19 - 1;
                unsigned int v22 = v21 & (37 * v18);
                int v23 = *((_DWORD *)v20 + v22);
                if (v18 != v23)
                {
                  int v24 = 1;
                  do
                  {
                    if (v23 == -1) {
                      goto LABEL_30;
                    }
                    unsigned int v70 = v22 + v24++;
                    unsigned int v22 = v70 & v21;
                    int v23 = *((_DWORD *)v20 + v22);
                  }
                  while (v18 != v23);
                }
                if (llvm::MachineInstr::findRegisterDefOperandIdx(i, v18, 0, 1, *((void *)this + 32)) == -1) {
                  break;
                }
              }
LABEL_30:
              if (++v15 == v14) {
                goto LABEL_18;
              }
            }
            uint64_t v98 = *((void *)this + 34);
            unint64_t v99 = (void *)(v98 + 408);
            unint64_t v100 = *(unsigned int *)(v98 + 416);
            BOOL v86 = (v18 & 0x7FFFFFFF) >= v100;
            unint64_t v101 = (v18 & 0x7FFFFFFF) - v100;
            if (v86)
            {
              sub_1CB9153B8((uint64_t)v99, v101 + 1, *(void *)(v98 + 424));
            }
            else
            {
              uint64_t v54 = *(void *)(*v99 + 8 * (v18 & 0x7FFFFFFF));
              if (v54)
              {
                uint64_t v122 = 0;
                uint64_t v123 = 0;
                uint64_t v124 = 0;
                LODWORD(v121) = 0x2000000;
                HIDWORD(v121) = v18;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)i, *(llvm::MachineFunction **)(*(void *)(i + 24) + 32), (const llvm::MachineOperand *)&v121);
                while (2)
                {
                  uint64_t v54 = *(void *)(v54 + 104);
                  if (!v54)
                  {
                    if (sub_1CC7440E8((uint64_t)&v125, v18))
                    {
                      unsigned int v102 = &__s[__n];
                      unint64_t v103 = wmemchr(__s, v18, __n);
                      if (!v103) {
                        unint64_t v103 = v102;
                      }
                      int v104 = __n;
                      unint64_t v105 = &__s[__n];
                      if (v105 != v103 + 1)
                      {
                        memmove(v103, v103 + 1, (char *)v105 - (char *)(v103 + 1));
                        int v104 = __n;
                      }
                      LODWORD(__n) = v104 - 1;
                      char v117 = 1;
                    }
                    else
                    {
                      char v117 = 1;
                    }
                    goto LABEL_30;
                  }
                  __int16 v55 = *(_WORD *)(i + 44);
                  unint64_t v56 = i;
                  if ((v55 & 4) != 0)
                  {
                    do
                      unint64_t v56 = *(void *)v56 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v56 + 44) & 4) != 0);
                  }
                  uint64_t v57 = i;
                  if ((v55 & 8) != 0)
                  {
                    do
                      uint64_t v57 = *(void *)(v57 + 8);
                    while ((*(_WORD *)(v57 + 44) & 8) != 0);
                  }
                  unint64_t v58 = *(void *)(v57 + 8);
                  if (v56 != v58)
                  {
                    while (1)
                    {
                      unsigned int v59 = **(unsigned __int16 **)(v56 + 16);
                      BOOL v17 = v59 > 0x17;
                      int v60 = (1 << v59) & 0x83E000;
                      if (v17 || v60 == 0) {
                        break;
                      }
                      unint64_t v56 = *(void *)(v56 + 8);
                      if (v56 == v58)
                      {
                        unint64_t v56 = v58;
                        break;
                      }
                    }
                  }
                  uint64_t v62 = *(void *)(*((void *)this + 34) + 288);
                  uint64_t v63 = *(void *)(v62 + 368);
                  uint64_t v64 = *(unsigned int *)(v62 + 384);
                  if (v64)
                  {
                    LODWORD(v65) = ((v56 >> 4) ^ (v56 >> 9)) & (v64 - 1);
                    BOOL v66 = (uint64_t *)(v63 + 16 * v65);
                    uint64_t v67 = *v66;
                    if (v56 == *v66)
                    {
LABEL_76:
                      llvm::LiveRange::extendInBlock(v54, v118, v66[1] & 0xFFFFFFFFFFFFFFF8 | 4);
                      continue;
                    }
                    int v68 = 1;
                    while (v67 != -4096)
                    {
                      int v69 = v65 + v68++;
                      uint64_t v65 = v69 & (v64 - 1);
                      uint64_t v67 = *(void *)(v63 + 16 * v65);
                      if (v56 == v67)
                      {
                        BOOL v66 = (uint64_t *)(v63 + 16 * v65);
                        goto LABEL_76;
                      }
                    }
                  }
                  break;
                }
                BOOL v66 = (uint64_t *)(v63 + 16 * v64);
                goto LABEL_76;
              }
            }
            llvm::LiveIntervals::createInterval();
          }
LABEL_18:
          if (!i || (*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v9);
        unsigned int v36 = (void *)FirstTerminator;
        uint64_t v37 = *(void *)(*((void *)this + 34) + 288);
        if (v11 != (void *)FirstTerminator) {
          break;
        }
        unint64_t v50 = (uint64_t *)(*(void *)(v37 + 392) + 16 * *(unsigned int *)(v9 + 24) + 8);
LABEL_51:
        uint64_t v51 = __n;
        if (__n)
        {
          uint64_t v107 = *v50;
          unint64_t v116 = v107 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v108 = (v107 >> 1) & 3;
          while (2)
          {
            __int32 v71 = __s[v51 - 1];
            sub_1CC7440E8((uint64_t)&v125, v71);
            LODWORD(__n) = __n - 1;
            uint64_t v72 = *((void *)this + 34);
            unint64_t v73 = (void *)(v72 + 408);
            unint64_t v74 = *(unsigned int *)(v72 + 416);
            BOOL v86 = (v71 & 0x7FFFFFFFu) >= v74;
            unint64_t v75 = (v71 & 0x7FFFFFFF) - v74;
            if (v86)
            {
              sub_1CB9153B8((uint64_t)v73, v75 + 1, *(void *)(v72 + 424));
LABEL_157:
              llvm::LiveIntervals::createInterval();
            }
            uint64_t v76 = *(void *)(*v73 + 8 * (v71 & 0x7FFFFFFF));
            if (!v76) {
              goto LABEL_157;
            }
            if (v11 != v36
              && llvm::MachineInstr::findRegisterDefOperandIdx((uint64_t)v36, v71, 0, 1, *((void *)this + 32)) != -1)
            {
              goto LABEL_109;
            }
            unsigned int v77 = *(_DWORD *)(v76 + 8);
            BOOL v78 = *(void **)v76;
            if (v77)
            {
              uint64_t v79 = v78[3 * v77 - 2];
              unsigned int v80 = *(_DWORD *)(v116 + 24) | v108;
              unsigned int v81 = (v79 >> 1) & 3 | *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 24);
              unint64_t v82 = *(void **)v76;
              unint64_t v83 = *(unsigned int *)(v76 + 8);
              if (v80 < v81)
              {
                do
                {
                  unint64_t v84 = v83 >> 1;
                  uint64_t v85 = v82[3 * (v83 >> 1) + 1];
                  LODWORD(v85) = (v85 >> 1) & 3 | *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v83 -= (v83 >> 1) + 1;
                  BOOL v86 = v80 >= v85;
                  if (v80 >= v85) {
                    unint64_t v87 = v84 + 1;
                  }
                  else {
                    unint64_t v87 = 0;
                  }
                  v82 += 3 * v87;
                  if (!v86) {
                    unint64_t v83 = v84;
                  }
                }
                while (v83);
LABEL_96:
                if (v82 != &v78[3 * v77]
                  && ((*v82 >> 1) & 3 | *(_DWORD *)((*v82 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v116 + 24) | v108))
                {
                  unsigned int v120 = 0;
                  unsigned int v121 = 0;
                  int v88 = *(llvm::MachineFunction **)(v9 + 32);
                  uint64_t v89 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v88, *(void *)(*((void *)this + 31) + 8) + 336, &v121, 0);
                  if (v121) {
                    llvm::MetadataTracking::untrack((uint64_t)&v121, v121);
                  }
                  uint64_t v90 = *(void *)(v9 + 40);
                  *(void *)(v89 + 24) = v90;
                  uint64_t v91 = *(void *)(v90 + 32);
                  uint64_t v92 = *(unsigned int *)(v89 + 40);
                  if (v92)
                  {
                    uint64_t v109 = *(void *)(v89 + 32);
                    uint64_t v110 = *(void *)(v91 + 40);
                    uint64_t v111 = 32 * v92;
                    do
                    {
                      if (!*(unsigned char *)v109)
                      {
                        uint64_t v112 = *(unsigned int *)(v109 + 4);
                        if ((int)v112 >= 0) {
                          unint64_t v113 = (uint64_t *)(*(void *)(v110 + 272) + 8 * v112);
                        }
                        else {
                          unint64_t v113 = (uint64_t *)(*(void *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v114 = *v113;
                        if (*v113)
                        {
                          uint64_t v115 = *(void *)(v114 + 16);
                          *(void *)(v114 + 16) = v109;
                          *(void *)(v109 + 16) = v115;
                          if (*(unsigned char *)(v109 + 3))
                          {
                            *(void *)(v109 + 24) = v114;
                          }
                          else
                          {
                            *(void *)(v109 + 24) = 0;
                            unint64_t v113 = (uint64_t *)(v115 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v109 + 16) = v109;
                          *(void *)(v109 + 24) = 0;
                        }
                        *unint64_t v113 = v109;
                      }
                      v109 += 32;
                      v111 -= 32;
                    }
                    while (v111);
                  }
                  uint64_t v93 = *(void *)(v91 + 728);
                  if (v93) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 24))(v93, v89);
                  }
                  unint64_t v94 = *v36 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)uint64_t v89 = v94 | *(void *)v89 & 7;
                  *(void *)(v89 + 8) = v36;
                  *(void *)(v94 + 8) = v89;
                  *unsigned int v36 = *v36 & 7 | v89;
                  if (v120) {
                    llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
                  }
                  uint64_t v122 = 0;
                  uint64_t v123 = 0;
                  uint64_t v124 = 0;
                  LODWORD(v121) = 0x2000000;
                  HIDWORD(v121) = v71;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v88, (const llvm::MachineOperand *)&v121);
                  unint64_t v95 = sub_1CB914C88(*(void *)(*((void *)this + 34) + 288), v89, 0);
                  uint64_t v96 = *(void *)(v76 + 104);
                  if (v96)
                  {
                    unint64_t v97 = v95 & 0xFFFFFFFFFFFFFFF8 | 4;
                    do
                    {
                      llvm::LiveRange::extendInBlock(v96, v118, v97);
                      uint64_t v96 = *(void *)(v96 + 104);
                    }
                    while (v96);
                  }
                  char v117 = 1;
                }
LABEL_109:
                uint64_t v51 = __n;
                if (!__n) {
                  goto LABEL_52;
                }
                continue;
              }
            }
            else
            {
              unsigned int v77 = 0;
            }
            break;
          }
          unint64_t v82 = &v78[3 * v77];
          goto LABEL_96;
        }
LABEL_52:
        if (__s != (__int32 *)v129) {
          free(__s);
        }
        if ((v125 & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)&v126[0], 4);
        }
        uint64_t v9 = *(void *)(v9 + 8);
        if ((char *)v9 == v119) {
          return v117 & 1;
        }
      }
      __int16 v38 = *(_WORD *)(FirstTerminator + 44);
      unint64_t v39 = FirstTerminator;
      if ((v38 & 4) != 0)
      {
        unint64_t v39 = FirstTerminator;
        do
          unint64_t v39 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v39 + 44) & 4) != 0);
      }
      unint64_t v40 = FirstTerminator;
      if ((v38 & 8) != 0)
      {
        unint64_t v40 = FirstTerminator;
        do
          unint64_t v40 = *(void *)(v40 + 8);
        while ((*(_WORD *)(v40 + 44) & 8) != 0);
      }
      unint64_t v41 = *(void *)(v40 + 8);
      if (v39 != v41)
      {
        while (1)
        {
          unsigned int v42 = **(unsigned __int16 **)(v39 + 16);
          BOOL v17 = v42 > 0x17;
          int v43 = (1 << v42) & 0x83E000;
          if (v17 || v43 == 0) {
            break;
          }
          unint64_t v39 = *(void *)(v39 + 8);
          if (v39 == v41)
          {
            unint64_t v39 = v41;
            break;
          }
        }
      }
      uint64_t v45 = *(void *)(v37 + 368);
      uint64_t v46 = *(unsigned int *)(v37 + 384);
      if (v46)
      {
        LODWORD(v47) = ((v39 >> 4) ^ (v39 >> 9)) & (v46 - 1);
        unint64_t v48 = (uint64_t *)(v45 + 16 * v47);
        uint64_t v49 = *v48;
        if (v39 == *v48)
        {
LABEL_50:
          unint64_t v50 = v48 + 1;
          goto LABEL_51;
        }
        int v52 = 1;
        while (v49 != -4096)
        {
          int v53 = v47 + v52++;
          uint64_t v47 = v53 & (v46 - 1);
          uint64_t v49 = *(void *)(v45 + 16 * v47);
          if (v39 == v49)
          {
            unint64_t v48 = (uint64_t *)(v45 + 16 * v47);
            goto LABEL_50;
          }
        }
      }
      unint64_t v48 = (uint64_t *)(v45 + 16 * v46);
      goto LABEL_50;
    }
  }
  char v117 = 0;
  return v117 & 1;
}

const char *sub_1CC7440D8()
{
  return "AGX pseudo wait placement pass";
}

uint64_t sub_1CC7440E8(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 16;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  uint64_t v6 = (int *)(v2 + 4 * v5);
  int v7 = *v6;
  if (*v6 == a2)
  {
LABEL_8:
    int *v6 = -2;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -1)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    int v7 = *(_DWORD *)(v2 + 4 * v5);
    if (v7 == a2)
    {
      uint64_t v6 = (int *)(v2 + 4 * v5);
      goto LABEL_8;
    }
  }
  return 0;
}

void sub_1CC744178(uint64_t a1)
{
}

void sub_1CC74421C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC7442D0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC74437C()
{
  return "AGX pre-RA Analysis pass";
}

uint64_t sub_1CC74438C(uint64_t a1)
{
  *(_DWORD *)(a1 + 264) = 0;
  return 0;
}

uint64_t sub_1CC744398()
{
  return 0;
}

void sub_1CC7443A0(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC74447C(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::LiveIntervals::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::LiveIntervals::ID);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 248) = v8;
  *(void *)(a1 + 256) = v7;
  uint64_t v9 = a2 + 320;
  uint64_t v10 = *(void *)(a2 + 328);
  if (v10 == a2 + 320)
  {
    unsigned int v11 = 0;
    goto LABEL_142;
  }
  unsigned int v11 = 0;
  do
  {
    for (unint64_t i = *(void *)(v10 + 56); i != v10 + 48; unint64_t i = *(void *)(i + 8))
    {
      __int16 v13 = *(_WORD *)(i + 44);
      uint64_t v14 = *(void *)(*(void *)(i + 16) + 8);
      if ((v13 & 0xC) != 0 && (v13 & 4) == 0)
      {
        unint64_t v31 = i;
        if ((v14 & 0x80) != 0)
        {
          uint64_t v16 = *(void *)(v7 + 288);
LABEL_16:
          unint64_t v17 = i;
          goto LABEL_17;
        }
        do
        {
          if ((*(_WORD *)(v31 + 44) & 8) == 0) {
            goto LABEL_130;
          }
          unint64_t v31 = *(void *)(v31 + 8);
        }
        while ((*(unsigned char *)(*(void *)(v31 + 16) + 8) & 0x80) == 0);
      }
      else if ((v14 & 0x80) == 0)
      {
        goto LABEL_130;
      }
      uint64_t v16 = *(void *)(v7 + 288);
      unint64_t v17 = i;
      if ((v13 & 4) == 0) {
        goto LABEL_16;
      }
      do
        unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v17 + 44) & 4) != 0);
LABEL_17:
      unint64_t v18 = i;
      if ((v13 & 8) != 0)
      {
        do
          unint64_t v18 = *(void *)(v18 + 8);
        while ((*(_WORD *)(v18 + 44) & 8) != 0);
      }
      unint64_t v19 = *(void *)(v18 + 8);
      if (v17 != v19)
      {
        while (1)
        {
          unsigned int v20 = **(unsigned __int16 **)(v17 + 16);
          BOOL v21 = v20 > 0x17;
          int v22 = (1 << v20) & 0x83E000;
          if (v21 || v22 == 0) {
            break;
          }
          unint64_t v17 = *(void *)(v17 + 8);
          if (v17 == v19)
          {
            unint64_t v17 = v19;
            break;
          }
        }
      }
      uint64_t v24 = *(void *)(v16 + 368);
      uint64_t v25 = *(unsigned int *)(v16 + 384);
      if (!v25) {
        goto LABEL_35;
      }
      LODWORD(v26) = ((v17 >> 4) ^ (v17 >> 9)) & (v25 - 1);
      unint64_t v27 = (uint64_t *)(v24 + 16 * v26);
      uint64_t v28 = *v27;
      if (v17 != *v27)
      {
        int v29 = 1;
        while (v28 != -4096)
        {
          int v30 = v26 + v29++;
          uint64_t v26 = v30 & (v25 - 1);
          uint64_t v28 = *(void *)(v24 + 16 * v26);
          if (v17 == v28)
          {
            unint64_t v27 = (uint64_t *)(v24 + 16 * v26);
            goto LABEL_36;
          }
        }
LABEL_35:
        unint64_t v27 = (uint64_t *)(v24 + 16 * v25);
      }
LABEL_36:
      int v32 = *(_DWORD *)(v8 + 32);
      if (!v32)
      {
        unsigned int v33 = 0;
        goto LABEL_127;
      }
      unsigned int v33 = 0;
      int v34 = 0;
      uint64_t v35 = v27[1];
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v37 = (v35 >> 1) & 3;
      do
      {
        uint64_t v38 = v34 & 0x7FFFFFFF;
        if (v38 >= *(_DWORD *)(v7 + 416)) {
          goto LABEL_123;
        }
        uint64_t v39 = *(void *)(*(void *)(v7 + 408) + 8 * v38);
        if (!v39) {
          goto LABEL_123;
        }
        unsigned int v40 = *(_DWORD *)(v39 + 8);
        unint64_t v41 = *(void **)v39;
        if (!v40)
        {
          unint64_t v45 = 0;
LABEL_50:
          uint64_t v46 = &v41[3 * v45];
          goto LABEL_51;
        }
        uint64_t v42 = v41[3 * v40 - 2];
        unsigned int v43 = *(_DWORD *)(v36 + 24) | v37;
        unsigned int v44 = (v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24);
        unint64_t v45 = *(unsigned int *)(v39 + 8);
        uint64_t v46 = *(void **)v39;
        unint64_t v47 = v45;
        if (v43 >= v44) {
          goto LABEL_50;
        }
        do
        {
          unint64_t v48 = v47 >> 1;
          uint64_t v49 = v46[3 * (v47 >> 1) + 1];
          LODWORD(v49) = (v49 >> 1) & 3 | *(_DWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 24);
          v47 -= (v47 >> 1) + 1;
          BOOL v50 = v43 >= v49;
          if (v43 >= v49) {
            unint64_t v51 = v48 + 1;
          }
          else {
            unint64_t v51 = 0;
          }
          v46 += 3 * v51;
          if (!v50) {
            unint64_t v47 = v48;
          }
        }
        while (v47);
        unint64_t v45 = *(unsigned int *)(v39 + 8);
LABEL_51:
        int v52 = &v41[3 * v45];
        if (v46 == v52) {
          goto LABEL_123;
        }
        unsigned int v53 = (*v46 >> 1) & 3 | *(_DWORD *)((*v46 & 0xFFFFFFFFFFFFFFF8) + 24);
        unsigned int v54 = *(_DWORD *)(v36 + 24);
        unsigned int v55 = v54 | v37;
        if (v53 > (v54 | v37)) {
          goto LABEL_123;
        }
        if (!v40
          || v54 >= ((*(v52 - 2) >> 1) & 3 | *(_DWORD *)((*(v52 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          goto LABEL_73;
        }
        do
        {
          unint64_t v56 = v41;
          unint64_t v57 = v45 >> 1;
          uint64_t v58 = v41[3 * (v45 >> 1) + 1];
          LODWORD(v58) = (v58 >> 1) & 3 | *(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 24);
          v45 -= (v45 >> 1) + 1;
          BOOL v59 = v54 >= v58;
          if (v54 >= v58) {
            unint64_t v60 = v57 + 1;
          }
          else {
            unint64_t v60 = 0;
          }
          unint64_t v41 = &v56[3 * v60];
          if (!v59) {
            unint64_t v45 = v57;
          }
        }
        while (v45);
        if (v41 == v52)
        {
LABEL_73:
          LOBYTE(v63) = 0;
          uint64_t v64 = 0;
          uint64_t v62 = 0;
          goto LABEL_74;
        }
        unsigned int v61 = *(_DWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (((*v41 >> 1) & 3 | v61) > v54)
        {
          LOBYTE(v63) = 0;
          uint64_t v62 = 0;
        }
        else
        {
          uint64_t v63 = v56[3 * v60 + 1];
          uint64_t v62 = v56[3 * v60 + 2];
          if (v36 == (v63 & 0xFFFFFFFFFFFFFFF8))
          {
            v41 += 3;
            if (v41 == v52) {
              goto LABEL_72;
            }
            unsigned int v61 = *(_DWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 24);
          }
          if (*(void *)(v62 + 8) == v36) {
            uint64_t v62 = 0;
          }
        }
        if (v54 < v61)
        {
LABEL_72:
          uint64_t v64 = 0;
          goto LABEL_74;
        }
        uint64_t v63 = v41[1];
        uint64_t v64 = v41[2];
LABEL_74:
        if ((~(_BYTE)v63 & 6) != 0) {
          uint64_t v65 = v64;
        }
        else {
          uint64_t v65 = 0;
        }
        if (v62 != v65) {
          goto LABEL_123;
        }
        int8x8_t v66 = *(int8x8_t *)((*(void *)(*(void *)(v8 + 24) + 16 * v38) & 0xFFFFFFFFFFFFFFF8) + 24);
        uint64_t v67 = *(void *)(v39 + 104);
        if (!v67)
        {
          int8x8_t v93 = v66;
          goto LABEL_122;
        }
        int8x8_t v68 = 0;
        while (1)
        {
          unsigned int v69 = *(_DWORD *)(v67 + 8);
          unsigned int v70 = *(void **)v67;
          if (!v69)
          {
            unint64_t v73 = 0;
LABEL_90:
            unint64_t v74 = &v70[3 * v73];
            goto LABEL_91;
          }
          uint64_t v71 = v70[3 * v69 - 2];
          unsigned int v72 = (v71 >> 1) & 3 | *(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24);
          unint64_t v73 = *(unsigned int *)(v67 + 8);
          unint64_t v74 = *(void **)v67;
          unint64_t v75 = v73;
          if (v55 >= v72) {
            goto LABEL_90;
          }
          do
          {
            unint64_t v76 = v75 >> 1;
            uint64_t v77 = v74[3 * (v75 >> 1) + 1];
            unsigned int v78 = (v77 >> 1) & 3 | *(_DWORD *)((v77 & 0xFFFFFFFFFFFFFFF8) + 24);
            v75 -= (v75 >> 1) + 1;
            BOOL v79 = v55 >= v78;
            if (v55 >= v78) {
              unint64_t v80 = v76 + 1;
            }
            else {
              unint64_t v80 = 0;
            }
            v74 += 3 * v80;
            if (!v79) {
              unint64_t v75 = v76;
            }
          }
          while (v75);
          unint64_t v73 = *(unsigned int *)(v67 + 8);
LABEL_91:
          unsigned int v81 = &v70[3 * v73];
          if (v74 != v81 && ((*v74 >> 1) & 3 | *(_DWORD *)((*v74 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v55) {
            break;
          }
LABEL_119:
          uint64_t v67 = *(void *)(v67 + 104);
          if (!v67) {
            goto LABEL_120;
          }
        }
        if (!v69
          || v54 >= ((*(v81 - 2) >> 1) & 3 | *(_DWORD *)((*(v81 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          goto LABEL_113;
        }
        do
        {
          unint64_t v82 = v70;
          unint64_t v83 = v73 >> 1;
          uint64_t v84 = v70[3 * (v73 >> 1) + 1];
          LODWORD(v84) = (v84 >> 1) & 3 | *(_DWORD *)((v84 & 0xFFFFFFFFFFFFFFF8) + 24);
          v73 -= (v73 >> 1) + 1;
          BOOL v85 = v54 >= v84;
          if (v54 >= v84) {
            unint64_t v86 = v83 + 1;
          }
          else {
            unint64_t v86 = 0;
          }
          unsigned int v70 = &v82[3 * v86];
          if (!v85) {
            unint64_t v73 = v83;
          }
        }
        while (v73);
        if (v70 == v81)
        {
LABEL_113:
          uint64_t v89 = 0;
          uint64_t v91 = 0;
          LOBYTE(v90) = 0;
          goto LABEL_114;
        }
        unsigned int v87 = *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (((*v70 >> 1) & 3 | v87) > v54)
        {
          LOBYTE(v90) = 0;
          uint64_t v89 = 0;
        }
        else
        {
          int v88 = &v82[3 * v86];
          uint64_t v90 = v88[1];
          uint64_t v89 = v88[2];
          if (v36 == (v90 & 0xFFFFFFFFFFFFFFF8))
          {
            v70 += 3;
            if (v70 != v81)
            {
              unsigned int v87 = *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24);
              goto LABEL_106;
            }
LABEL_112:
            uint64_t v91 = 0;
            goto LABEL_114;
          }
LABEL_106:
          if (*(void *)(v89 + 8) == v36) {
            uint64_t v89 = 0;
          }
        }
        if (v54 < v87) {
          goto LABEL_112;
        }
        uint64_t v90 = v70[1];
        uint64_t v91 = v70[2];
LABEL_114:
        if ((~(_BYTE)v90 & 6) != 0) {
          uint64_t v92 = v91;
        }
        else {
          uint64_t v92 = 0;
        }
        if (v89 != v92) {
          goto LABEL_119;
        }
        *(void *)&v68 |= *(void *)(v67 + 112);
        if (*(void *)&v68 != *(void *)&v66) {
          goto LABEL_119;
        }
        int8x8_t v68 = v66;
LABEL_120:
        int8x8_t v93 = v68;
LABEL_122:
        uint8x8_t v94 = (uint8x8_t)vcnt_s8(v93);
        v94.i16[0] = vaddlv_u8(v94);
        v33 += v94.i32[0];
LABEL_123:
        ++v34;
      }
      while (v34 != v32);
LABEL_127:
      if (v11 <= v33) {
        unsigned int v11 = v33;
      }
      if (i)
      {
LABEL_130:
        if ((*(unsigned char *)i & 4) == 0) {
          goto LABEL_131;
        }
      }
      else
      {
LABEL_131:
        if ((v13 & 8) != 0)
        {
          do
            unint64_t i = *(void *)(i + 8);
          while ((*(_WORD *)(i + 44) & 8) != 0);
        }
      }
    }
    uint64_t v10 = *(void *)(v10 + 8);
  }
  while (v10 != v9);
LABEL_142:
  unsigned int v95 = *(_DWORD *)(a1 + 264);
  if (v95 <= v11) {
    unsigned int v95 = v11;
  }
  *(_DWORD *)(a1 + 264) = v95;
  return 0;
}

void sub_1CC744AF0()
{
}

void llvm::AGXTOCOptimizer::getLiveInRegisters(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int16 **)(a2 + 152);
  uint64_t v5 = *(unsigned __int16 **)(a2 + 160);
  if (v5 != v4)
  {
    if (a4) {
      uint64_t v6 = (uint64_t *)(a4 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *v6;
    uint64_t v8 = v6[6];
    uint64_t v9 = v6[7];
    do
    {
      uint64_t v10 = v7 + 24 * *v4;
      unint64_t v11 = *(unsigned int *)(v10 + 16);
      uint64_t v12 = (v11 >> 3) & 0x1FFFFFFE;
      unsigned __int16 v13 = *(_WORD *)(v8 + v12) + (v11 & 0xF) * *v4;
      uint64_t v14 = (void *)(v9 + 8 * *(unsigned __int16 *)(v10 + 20));
      uint64_t v15 = *a3;
      uint64_t v16 = (unsigned __int16 *)(v8 + 2 + v12);
      do
      {
        if (!*v14 || (*((void *)v4 + 1) & *v14) != 0) {
          *(void *)(v15 + 8 * (v13 >> 6)) |= 1 << v13;
        }
        ++v14;
        int v17 = *v16++;
        v13 += v17;
      }
      while (v17);
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void llvm::AGXTOCOptimizer::collectImplicitDefs(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a2 + 328);
  uint64_t v6 = v5 + 48;
  uint64_t v7 = *(void *)(v5 + 56);
  if (v7 != v6)
  {
    uint64_t v8 = (void *)(a4 + 8);
    if (!a4) {
      uint64_t v8 = 0;
    }
    while (1)
    {
      uint64_t v9 = *(unsigned __int16 **)(v7 + 16);
      uint64_t v10 = *v9 - 9;
      if (v10 > 0x3C) {
        goto LABEL_16;
      }
      if (v10 != 1) {
        break;
      }
      uint64_t v11 = *(unsigned int *)(v7 + 40);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(v7 + 32);
        uint64_t v14 = *a3;
        do
        {
          if (!*(_DWORD *)(v13 + 32 * v12) && (*(_DWORD *)(v13 + 32 * v12) & 0x1000000) != 0)
          {
            unsigned int v15 = *(_DWORD *)(v13 + 32 * v12 + 4);
            if (v15)
            {
              uint64_t v16 = (unsigned __int16 *)(v8[6]
                                       + (((unint64_t)*(unsigned int *)(*v8 + 24 * v15 + 16) >> 3) & 0x1FFFFFFE));
              int v18 = *v16;
              int v17 = v16 + 1;
              int v19 = v18 + (*(_DWORD *)(*v8 + 24 * v15 + 16) & 0xF) * v15;
              do
              {
                *(void *)(v14 + 8 * ((unsigned __int16)v19 >> 6)) |= 1 << v19;
                int v20 = *v17++;
                v19 += v20;
              }
              while (v20);
            }
          }
          ++v12;
        }
        while (v12 != v11);
      }
LABEL_17:
      if ((v9[4] & 0x10) == 0)
      {
        uint64_t v21 = *((unsigned __int8 *)v9 + 4);
        if (v21)
        {
          uint64_t v22 = 0;
          uint64_t v23 = *(void *)(v7 + 32);
          uint64_t v24 = *a5;
          uint64_t v25 = *a3;
          do
          {
            int v26 = *(_DWORD *)(v23 + 32 * v22);
            if ((v26 & 0x20000FF) == 0 && (v26 & 0x1000000) != 0)
            {
              unint64_t v27 = *(unsigned int *)(v23 + 32 * v22 + 4);
              if (v27)
              {
                if (v27 >> 30
                  || *(_DWORD *)(v23 + 32 * v22 + 4) >> 3 >= *(unsigned __int16 *)(v24 + 22)
                  || ((*(unsigned __int8 *)(*(void *)(v24 + 8) + (v27 >> 3)) >> (v27 & 7)) & 1) == 0)
                {
                  uint64_t v28 = (unsigned __int16 *)(v8[6]
                                           + (((unint64_t)*(unsigned int *)(*v8 + 24 * v27 + 16) >> 3) & 0x1FFFFFFE));
                  int v30 = *v28;
                  int v29 = v28 + 1;
                  int v31 = v30 + (*(_DWORD *)(*v8 + 24 * v27 + 16) & 0xF) * v27;
                  do
                  {
                    *(void *)(v25 + 8 * ((unsigned __int16)v31 >> 6)) &= ~(1 << v31);
                    int v32 = *v29++;
                    v31 += v32;
                  }
                  while (v32);
                }
              }
            }
            ++v22;
          }
          while (v22 != v21);
        }
        if (!v7)
        {
LABEL_33:
          while ((*(_WORD *)(v7 + 44) & 8) != 0)
            uint64_t v7 = *(void *)(v7 + 8);
          goto LABEL_34;
        }
      }
LABEL_30:
      if ((*(unsigned char *)v7 & 4) == 0) {
        goto LABEL_33;
      }
LABEL_34:
      uint64_t v7 = *(void *)(v7 + 8);
      if (v7 == v6) {
        return;
      }
    }
    if (((1 << (*v9 - 9)) & 0x1000000000000605) != 0) {
      goto LABEL_30;
    }
LABEL_16:
    if (!*v9) {
      goto LABEL_30;
    }
    goto LABEL_17;
  }
}

void *llvm::AGXTOCOptimizer::findInOptimizableBlocks(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t result = a2;
  if (a2 != a3)
  {
    while (*result != a4)
    {
      result += 10;
      if (result == a3) {
        return a3;
      }
    }
  }
  return result;
}

void llvm::AGXTOCOptimizer::collectOptimizableBlocks(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v274 = *MEMORY[0x1E4F143B8];
  v262 = v266;
  v263 = v266;
  uint64_t v264 = 16;
  int v265 = 0;
  v257 = v261;
  v258 = v261;
  uint64_t v259 = 16;
  int v260 = 0;
  uint64_t v271 = 1;
  for (uint64_t i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&v271 + i) = -4096;
  uint64_t v244 = *(void *)(a2 + 328);
  __dst = v269;
  uint64_t v268 = 0x600000000;
  if (&__dst == (void **)a4 || (uint64_t v10 = *(unsigned int *)(a4 + 8), !v10))
  {
    int v12 = *(_DWORD *)(a4 + 64);
    int v270 = v12;
    uint64_t v13 = v269;
  }
  else
  {
    if (v10 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v269, *(const void **)a4, 8 * *(unsigned int *)(a4 + 8));
    uint64_t v11 = __dst;
    int v12 = *(_DWORD *)(a4 + 64);
    LODWORD(v268) = v10;
    int v270 = v12;
    uint64_t v13 = (char *)__dst + 8 * v10;
    uint64_t v14 = 8 * v10;
    do
    {
      void *v11 = ~*v11;
      ++v11;
      v14 -= 8;
    }
    while (v14);
  }
  int v15 = v12 & 0x3F;
  if (v15) {
    *((void *)v13 - 1) &= ~(-1 << v15);
  }
  uint64_t v16 = *((unsigned int *)a3 + 2);
  if (v16)
  {
    int v17 = *a3;
    uint64_t v18 = 80 * v16;
    do
    {
      int v19 = *(char **)&v17[v18 - 72];
      if (&v17[v18 - 56] != v19) {
        free(v19);
      }
      v18 -= 80;
    }
    while (v18);
  }
  *((_DWORD *)a3 + 2) = 0;
  int v20 = (void *)(a2 + 320);
  unsigned int v21 = -1;
  uint64_t v22 = (void *)(a2 + 320);
  do
  {
    uint64_t v22 = (void *)v22[1];
    ++v21;
  }
  while (v22 != v20);
  uint64_t v23 = v21;
  v248 = a3;
  if (v21)
  {
    unint64_t v24 = *((unsigned int *)a3 + 3);
    if (v21 > v24)
    {
      if (v24 == -1) {
        sub_1CD0A89A8(0xFFFFFFFFuLL);
      }
      unint64_t v224 = (2 * v24) | 1;
      if (v224 <= v21) {
        unint64_t v224 = v21;
      }
      if (v224 >= 0xFFFFFFFF) {
        uint64_t v225 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v225 = v224;
      }
      int v26 = (char *)malloc_type_malloc(80 * v225, 0x4065EBACuLL);
      if (!v26) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      v226 = (char **)*a3;
      uint64_t v227 = *((unsigned int *)a3 + 2);
      if (v227)
      {
        unsigned int v246 = v21;
        uint64_t v243 = (uint64_t)*a3;
        unint64_t v228 = v26;
        uint64_t v229 = 0;
        uint64_t v230 = 80 * v227;
        do
        {
          uint64_t v231 = &v228[v229];
          int v232 = (char *)(v243 + v229);
          *(void *)uint64_t v231 = *(void *)(v243 + v229);
          *(void *)&v228[v229 + 8] = &v228[v229 + 24];
          v233 = (void **)&v228[v229 + 8];
          *((void *)v231 + 2) = 0x600000000;
          unsigned int v234 = *(_DWORD *)(v243 + v229 + 16);
          if (v234) {
            BOOL v235 = v232 == v231;
          }
          else {
            BOOL v235 = 1;
          }
          if (!v235)
          {
            int v236 = (char *)*((void *)v232 + 1);
            if (v232 + 24 == v236)
            {
              if (v234 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(*v233, *((const void **)v232 + 1), 8 * *((unsigned int *)v232 + 4));
              *((_DWORD *)v231 + 4) = v234;
            }
            else
            {
              *v233 = v236;
              *((_DWORD *)v231 + 4) = v234;
              *((_DWORD *)v231 + 5) = *(_DWORD *)(v243 + v229 + 20);
              *((void *)v232 + 1) = v232 + 24;
              *(_DWORD *)(v243 + v229 + 20) = 0;
            }
            *((_DWORD *)v232 + 4) = 0;
          }
          *((_DWORD *)v231 + 18) = *((_DWORD *)v232 + 18);
          v229 += 80;
        }
        while (v230 != v229);
        a3 = v248;
        v226 = (char **)*v248;
        uint64_t v239 = *((unsigned int *)v248 + 2);
        int v26 = v228;
        unsigned int v21 = v246;
        int v20 = (void *)(a2 + 320);
        if (v239)
        {
          v240 = *v248;
          uint64_t v241 = 80 * v239;
          do
          {
            v242 = *(char **)&v240[v241 - 72];
            if (&v240[v241 - 56] != v242) {
              free(v242);
            }
            v241 -= 80;
          }
          while (v241);
          a3 = v248;
          v226 = (char **)*v248;
          int v26 = v228;
          unsigned int v21 = v246;
          int v20 = (void *)(a2 + 320);
        }
      }
      if (v226 != a3 + 2)
      {
        v237 = v20;
        uint64_t v238 = v26;
        free(v226);
        int v26 = v238;
        int v20 = v237;
      }
      *a3 = v26;
      *((_DWORD *)a3 + 3) = v225;
      uint64_t v25 = *((unsigned int *)a3 + 2);
    }
    else
    {
      uint64_t v25 = 0;
      int v26 = *a3;
    }
    if (v25 != v23)
    {
      unint64_t v27 = &v26[80 * v25];
      do
      {
        *(void *)unint64_t v27 = 0;
        *((void *)v27 + 1) = v27 + 24;
        *((void *)v27 + 2) = 0x600000000;
        *((_DWORD *)v27 + 18) = 0;
        v27 += 80;
      }
      while (v27 != &v26[80 * v23]);
    }
    *((_DWORD *)a3 + 2) = v21;
  }
  else
  {
    unsigned int v21 = 0;
  }
  uint64_t v28 = *(void **)(a2 + 328);
  if (v28 != v20)
  {
    int v29 = 0;
    v247 = v20;
    while ((v271 & 1) == 0)
    {
      int v30 = v273;
      if (v273)
      {
        int v31 = v272;
LABEL_32:
        int v32 = v30 - 1;
        unsigned int v33 = v32 & ((v28 >> 4) ^ (v28 >> 9));
        int v34 = (void *)v31[2 * v33];
        if (v34 == v28) {
          goto LABEL_182;
        }
        int v35 = 1;
        while (v34 != (void *)-4096)
        {
          unsigned int v36 = v33 + v35++;
          unsigned int v33 = v36 & v32;
          int v34 = (void *)v31[2 * v33];
          if (v34 == v28) {
            goto LABEL_182;
          }
        }
      }
      uint64_t v37 = (uint64_t)&(*a3)[80 * v29];
      *(void *)uint64_t v37 = v28;
      uint64_t v38 = v37 + 8;
      int v39 = *(_DWORD *)(a5 + 44);
      int v41 = *(_DWORD *)(v37 + 72);
      unsigned int v40 = (int *)(v37 + 72);
      char v42 = v41 & 0x3F;
      uint64_t v43 = *(unsigned int *)(v38 + 8);
      if ((v41 & 0x3F) != 0) {
        *(void *)(*(void *)v38 + 8 * v43 - 8) &= ~(-1 << v42);
      }
      unsigned int v44 = v43;
      *unsigned int v40 = v39;
      unsigned int v45 = v39 + 63;
      if (v43 != (v39 + 63) >> 6)
      {
        uint64_t v46 = v45 >> 6;
        if (v43 > v46)
        {
          *(_DWORD *)(v38 + 8) = v46;
          unsigned int v44 = v45 >> 6;
        }
        else
        {
          if (v46 > *(_DWORD *)(v38 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v46 != v43) {
            bzero((void *)(*(void *)v38 + 8 * v43), 8 * (v46 - v43));
          }
          unsigned int v44 = v46;
          *(_DWORD *)(v38 + 8) = v46;
          int v39 = *v40;
        }
      }
      int v47 = v39 & 0x3F;
      if (v47) {
        *(void *)(*(void *)v38 + 8 * v44 - 8) &= ~(-1 << v47);
      }
      LODWORD(v48) = v29 + 1;
      v252 = v28;
      *((_DWORD *)sub_1CC746188((uint64_t)&v271, (uint64_t *)&v252) + 2) = v29;
      if (((v28[12] - v28[11]) >> 3) < 3)
      {
        ++v29;
        int v20 = v247;
        goto LABEL_182;
      }
      uint64_t v49 = v28[1];
      BOOL v50 = v256;
      v252 = v256;
      v253 = v256;
      uint64_t v254 = 16;
      int v255 = 0;
      unint64_t v51 = *(uint64_t **)(v49 + 64);
      int v52 = *(uint64_t **)(v49 + 72);
      if (v51 == v52) {
        goto LABEL_181;
      }
      unsigned int v53 = 0;
      unsigned int v54 = 16;
      unsigned int v55 = v256;
      do
      {
        uint64_t v56 = *v51;
        if (v50 != v55) {
          goto LABEL_60;
        }
        if (!v53)
        {
LABEL_58:
          if (v54 > v53)
          {
            HIDWORD(v254) = v53 + 1;
            *(void *)&v55[8 * v53] = v56;
            goto LABEL_80;
          }
LABEL_60:
          if (3 * v54 <= 4 * (v53 - v255))
          {
            if (v54 >= 0x40) {
              v54 *= 2;
            }
            else {
              unsigned int v54 = 128;
            }
          }
          else if (v54 - v53 >= v54 >> 3)
          {
            goto LABEL_62;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v252, v54);
          unsigned int v54 = v254;
          BOOL v50 = v253;
LABEL_62:
          unsigned int v60 = v54 - 1;
          unsigned int v61 = (v54 - 1) & ((v56 >> 4) ^ (v56 >> 9));
          uint64_t v62 = &v50[8 * v61];
          uint64_t v63 = *v62;
          if (*v62 == -1)
          {
            uint64_t v64 = 0;
LABEL_74:
            if (v64) {
              uint64_t v62 = v64;
            }
            if (*v62 != v56)
            {
              if (*v62 == -2) {
                --v255;
              }
              else {
                ++HIDWORD(v254);
              }
              *uint64_t v62 = v56;
            }
          }
          else
          {
            uint64_t v64 = 0;
            int v65 = 1;
            while (v63 != v56)
            {
              if (v64) {
                BOOL v66 = 0;
              }
              else {
                BOOL v66 = v63 == -2;
              }
              if (v66) {
                uint64_t v64 = v62;
              }
              unsigned int v67 = v61 + v65++;
              unsigned int v61 = v67 & v60;
              uint64_t v62 = &v50[8 * (v67 & v60)];
              uint64_t v63 = *v62;
              if (*v62 == -1) {
                goto LABEL_74;
              }
            }
          }
          goto LABEL_80;
        }
        unint64_t v57 = 0;
        uint64_t v58 = 8 * v53;
        BOOL v59 = v55;
        while (*v59 != v56)
        {
          if (*v59 == -2) {
            unint64_t v57 = v59;
          }
          ++v59;
          v58 -= 8;
          if (!v58)
          {
            if (!v57) {
              goto LABEL_58;
            }
            void *v57 = v56;
            --v255;
            break;
          }
        }
LABEL_80:
        unsigned int v55 = v252;
        BOOL v50 = v253;
        unsigned int v54 = v254;
        unsigned int v53 = HIDWORD(v254);
        ++v51;
      }
      while (v51 != v52);
      if (HIDWORD(v254) != v255)
      {
        int8x8_t v68 = (uint64_t *)(v28[12] - 8);
        uint64_t v48 = (int)v48;
        while (1)
        {
          uint64_t v69 = *v68;
          uint64_t v70 = (uint64_t)&(*a3)[80 * v48];
          *(void *)uint64_t v70 = *v68;
          uint64_t v71 = v70 + 8;
          int v72 = *(_DWORD *)(a5 + 44);
          int v74 = *(_DWORD *)(v70 + 72);
          unint64_t v73 = (int *)(v70 + 72);
          char v75 = v74 & 0x3F;
          uint64_t v76 = *(unsigned int *)(v71 + 8);
          if ((v74 & 0x3F) != 0) {
            *(void *)(*(void *)v71 + 8 * v76 - 8) &= ~(-1 << v75);
          }
          unsigned int v77 = v76;
          *unint64_t v73 = v72;
          unsigned int v78 = v72 + 63;
          if (v76 != (v72 + 63) >> 6)
          {
            uint64_t v79 = v78 >> 6;
            if (v76 > v79)
            {
              *(_DWORD *)(v71 + 8) = v79;
              unsigned int v77 = v78 >> 6;
            }
            else
            {
              if (v79 > *(_DWORD *)(v71 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v79 != v76) {
                bzero((void *)(*(void *)v71 + 8 * v76), 8 * (v79 - v76));
              }
              unsigned int v77 = v79;
              *(_DWORD *)(v71 + 8) = v79;
              int v72 = *v73;
            }
          }
          int v80 = v72 & 0x3F;
          a3 = v248;
          if (v80) {
            *(void *)(*(void *)v71 + 8 * v77 - 8) &= ~(-1 << v80);
          }
          uint64_t v251 = v69;
          *((_DWORD *)sub_1CC746188((uint64_t)&v271, &v251) + 2) = v48;
          unsigned int v81 = *(void **)(v69 + 88);
          unint64_t v82 = *(void **)(v69 + 96);
          unsigned int v83 = v69 >> 4;
          if (v81 != v82)
          {
            int v84 = v255;
            do
            {
              if (*v81 == v49)
              {
                uint64_t v85 = (uint64_t)v252;
                if (v253 == v252)
                {
                  int v86 = HIDWORD(v254);
                  unsigned int v87 = &v253[8 * HIDWORD(v254)];
                  if (HIDWORD(v254))
                  {
                    uint64_t v88 = 0;
                    while (*(void *)&v253[v88] != v69)
                    {
                      v88 += 8;
                      if (8 * HIDWORD(v254) == v88) {
                        goto LABEL_123;
                      }
                    }
                    unsigned int v87 = &v253[v88];
                  }
LABEL_123:
                  uint64_t v85 = (uint64_t)v253;
                }
                else
                {
                  int v89 = v254 - 1;
                  unsigned int v90 = (v254 - 1) & (v83 ^ (v69 >> 9));
                  unsigned int v87 = &v253[8 * v90];
                  uint64_t v91 = *v87;
                  if (*v87 == -1)
                  {
                    uint64_t v92 = 0;
LABEL_132:
                    if (v92) {
                      unsigned int v87 = v92;
                    }
                    int v86 = HIDWORD(v254);
                    if (*v87 != v69) {
                      unsigned int v87 = &v253[8 * v254];
                    }
                  }
                  else
                  {
                    uint64_t v92 = 0;
                    int v93 = 1;
                    while (v91 != v69)
                    {
                      if (v92) {
                        BOOL v94 = 0;
                      }
                      else {
                        BOOL v94 = v91 == -2;
                      }
                      if (v94) {
                        uint64_t v92 = v87;
                      }
                      unsigned int v95 = v90 + v93++;
                      unsigned int v90 = v95 & v89;
                      unsigned int v87 = &v253[8 * (v95 & v89)];
                      uint64_t v91 = *v87;
                      if (*v87 == -1) {
                        goto LABEL_132;
                      }
                    }
                    int v86 = HIDWORD(v254);
                  }
                }
                if (v253 == (unsigned char *)v85) {
                  int v96 = v86;
                }
                else {
                  int v96 = v254;
                }
                if (v87 != (void *)&v253[8 * v96])
                {
                  *unsigned int v87 = -2;
                  int v255 = ++v84;
                }
              }
              ++v81;
            }
            while (v81 != v82);
          }
          unint64_t v97 = v258;
          uint64_t v98 = HIDWORD(v259);
          if (v258 != v257) {
            break;
          }
          if (HIDWORD(v259))
          {
            unint64_t v99 = 0;
            uint64_t v100 = 8 * HIDWORD(v259);
            unint64_t v101 = (uint64_t *)v258;
            while (*v101 != v69)
            {
              if (*v101 == -2) {
                unint64_t v99 = v101;
              }
              ++v101;
              v100 -= 8;
              if (!v100)
              {
                if (!v99) {
                  goto LABEL_145;
                }
                *unint64_t v99 = v69;
                --v260;
                goto LABEL_169;
              }
            }
            goto LABEL_169;
          }
LABEL_145:
          unsigned int v102 = v259;
          if (HIDWORD(v259) >= v259) {
            goto LABEL_148;
          }
          ++HIDWORD(v259);
          *(void *)&v258[8 * v98] = v69;
LABEL_169:
          ++v48;
          int8x8_t v68 = (uint64_t *)(v69 + 8);
          if (HIDWORD(v254) == v255)
          {
            unsigned int v55 = v252;
            BOOL v50 = v253;
            goto LABEL_179;
          }
        }
        unsigned int v102 = v259;
LABEL_148:
        if (3 * v102 <= 4 * (HIDWORD(v259) - v260))
        {
          if (v102 >= 0x40) {
            v102 *= 2;
          }
          else {
            unsigned int v102 = 128;
          }
        }
        else if (v102 - HIDWORD(v259) >= v102 >> 3)
        {
          goto LABEL_150;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v257, v102);
        unsigned int v102 = v259;
        unint64_t v97 = v258;
LABEL_150:
        unsigned int v103 = v102 - 1;
        unsigned int v104 = (v102 - 1) & (v83 ^ (v69 >> 9));
        unint64_t v105 = &v97[8 * v104];
        uint64_t v106 = *(void *)v105;
        if (*(void *)v105 == -1)
        {
          uint64_t v107 = 0;
LABEL_162:
          if (v107) {
            uint64_t v111 = v107;
          }
          else {
            uint64_t v111 = (uint64_t *)v105;
          }
          if (*v111 != v69)
          {
            if (*v111 == -2) {
              --v260;
            }
            else {
              ++HIDWORD(v259);
            }
            *uint64_t v111 = v69;
          }
        }
        else
        {
          uint64_t v107 = 0;
          int v108 = 1;
          while (v106 != v69)
          {
            if (v107) {
              BOOL v109 = 0;
            }
            else {
              BOOL v109 = v106 == -2;
            }
            if (v109) {
              uint64_t v107 = (uint64_t *)v105;
            }
            unsigned int v110 = v104 + v108++;
            unsigned int v104 = v110 & v103;
            unint64_t v105 = &v97[8 * (v110 & v103)];
            uint64_t v106 = *(void *)v105;
            if (*(void *)v105 == -1) {
              goto LABEL_162;
            }
          }
        }
        goto LABEL_169;
      }
LABEL_179:
      if (v50 != v55) {
        free(v50);
      }
LABEL_181:
      int v20 = v247;
      int v29 = v48;
LABEL_182:
      uint64_t v28 = (void *)v28[1];
      if (v28 == v20)
      {
        unsigned int v21 = *((_DWORD *)a3 + 2);
        goto LABEL_186;
      }
    }
    int v30 = 16;
    int v31 = &v272;
    goto LABEL_32;
  }
LABEL_186:
  if (v21)
  {
    int v112 = 0;
    int v113 = 0;
    uint64_t v114 = (uint64_t *)(a5 + 8);
    if (!a5) {
      uint64_t v114 = 0;
    }
    v250 = v114;
    do
    {
      uint64_t v115 = (uint64_t)*a3;
      unint64_t v116 = (uint64_t *)&(*a3)[80 * v112];
      char v117 = (void *)*v116;
      uint64_t v118 = v262;
      if (v263 == v262)
      {
        int v119 = HIDWORD(v264);
        unsigned int v120 = &v263[8 * HIDWORD(v264)];
        if (HIDWORD(v264))
        {
          uint64_t v121 = 0;
          while (*(void **)&v263[v121] != v117)
          {
            v121 += 8;
            if (8 * HIDWORD(v264) == v121) {
              goto LABEL_209;
            }
          }
          unsigned int v120 = &v263[v121];
        }
LABEL_209:
        uint64_t v118 = v263;
      }
      else
      {
        int v122 = v264 - 1;
        unsigned int v123 = (v264 - 1) & ((v117 >> 4) ^ (v117 >> 9));
        unsigned int v120 = &v263[8 * v123];
        uint64_t v124 = *(void **)v120;
        if (*(void *)v120 == -1)
        {
          uint64_t v125 = 0;
LABEL_341:
          if (v125) {
            unsigned int v120 = v125;
          }
          int v119 = HIDWORD(v264);
          if (*(void **)v120 != v117) {
            unsigned int v120 = &v263[8 * v264];
          }
        }
        else
        {
          uint64_t v125 = 0;
          int v126 = 1;
          while (v124 != v117)
          {
            if (v125) {
              BOOL v127 = 0;
            }
            else {
              BOOL v127 = v124 == (void *)-2;
            }
            if (v127) {
              uint64_t v125 = v120;
            }
            unsigned int v128 = v123 + v126++;
            unsigned int v123 = v128 & v122;
            unsigned int v120 = &v263[8 * (v128 & v122)];
            uint64_t v124 = *(void **)v120;
            if (*(void *)v120 == -1) {
              goto LABEL_341;
            }
          }
          int v119 = HIDWORD(v264);
        }
      }
      if (v263 == v118) {
        int v129 = v119;
      }
      else {
        int v129 = v264;
      }
      if (v120 != &v263[8 * v129])
      {
        *(void *)unsigned int v120 = -2;
        ++v265;
        char v117 = (void *)*v116;
      }
      unsigned int v130 = v257;
      unsigned int v131 = v117 >> 4;
      if (v258 == v257)
      {
        int v132 = HIDWORD(v259);
        uint64_t v133 = &v258[8 * HIDWORD(v259)];
        if (HIDWORD(v259))
        {
          uint64_t v134 = 0;
          while (*(void **)&v258[v134] != v117)
          {
            v134 += 8;
            if (8 * HIDWORD(v259) == v134) {
              goto LABEL_234;
            }
          }
          uint64_t v133 = &v258[v134];
        }
LABEL_234:
        unsigned int v130 = v258;
      }
      else
      {
        int v135 = v259 - 1;
        unsigned int v136 = (v259 - 1) & (v131 ^ (v117 >> 9));
        uint64_t v133 = &v258[8 * v136];
        uint64_t v137 = *(void **)v133;
        if (*(void *)v133 == -1)
        {
          unsigned int v138 = 0;
LABEL_347:
          if (v138) {
            uint64_t v133 = v138;
          }
          int v132 = HIDWORD(v259);
          if (*(void **)v133 != v117) {
            uint64_t v133 = &v258[8 * v259];
          }
        }
        else
        {
          unsigned int v138 = 0;
          int v139 = 1;
          while (v137 != v117)
          {
            if (v138) {
              BOOL v140 = 0;
            }
            else {
              BOOL v140 = v137 == (void *)-2;
            }
            if (v140) {
              unsigned int v138 = v133;
            }
            unsigned int v141 = v136 + v139++;
            unsigned int v136 = v141 & v135;
            uint64_t v133 = &v258[8 * (v141 & v135)];
            uint64_t v137 = *(void **)v133;
            if (*(void *)v133 == -1) {
              goto LABEL_347;
            }
          }
          int v132 = HIDWORD(v259);
        }
      }
      if (v258 == v130) {
        int v142 = v132;
      }
      else {
        int v142 = v259;
      }
      if (v133 == &v258[8 * v142] && ((**(unsigned char **)(*(void *)a6 + 360) & 4) != 0 || HIDWORD(v264) == v265))
      {
        if (v263 == v262) {
          uint64_t v190 = HIDWORD(v264);
        }
        else {
          uint64_t v190 = v264;
        }
        if (v190)
        {
          uint64_t v191 = 8 * v190;
          uint64_t v192 = (unint64_t *)v263;
          while (*v192 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v192;
            v191 -= 8;
            if (!v191) {
              goto LABEL_367;
            }
          }
        }
        else
        {
          uint64_t v192 = (unint64_t *)v263;
        }
        v193 = &v263[8 * v190];
        if (v192 != (unint64_t *)v193)
        {
          unint64_t v194 = *v192;
LABEL_355:
          uint64_t v195 = *(unsigned __int16 **)(v194 + 152);
          uint64_t v196 = *(unsigned __int16 **)(v194 + 160);
          if (v196 != v195)
          {
            uint64_t v197 = *v250;
            uint64_t v198 = v250[6];
            uint64_t v199 = v250[7];
            do
            {
              uint64_t v200 = v197 + 24 * *v195;
              unint64_t v201 = *(unsigned int *)(v200 + 16);
              uint64_t v202 = (v201 >> 3) & 0x1FFFFFFE;
              unsigned __int16 v203 = *(_WORD *)(v198 + v202) + (v201 & 0xF) * *v195;
              v204 = (void *)(v199 + 8 * *(unsigned __int16 *)(v200 + 20));
              uint64_t v205 = *(void *)(v115 + 80 * v112 + 8);
              uint64_t v206 = (unsigned __int16 *)(v198 + 2 + v202);
              do
              {
                if (!*v204 || (*((void *)v195 + 1) & *v204) != 0) {
                  *(void *)(v205 + 8 * (v203 >> 6)) |= 1 << v203;
                }
                ++v204;
                int v207 = *v206++;
                v203 += v207;
              }
              while (v207);
              v195 += 8;
            }
            while (v195 != v196);
          }
          v208 = v192 + 1;
          while (v208 != (unint64_t *)v193)
          {
            unint64_t v209 = *v208++;
            unint64_t v194 = v209;
            if (v209 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v192 = v208 - 1;
              goto LABEL_355;
            }
          }
        }
LABEL_367:
        uint64_t v211 = v117[8];
        uint64_t v210 = v117[9];
        uint64_t v212 = v210 - v211;
        if (((v210 - v211) & 0x7FFFFFFF8) == 8)
        {
          if (v211 != v210)
          {
            uint64_t v213 = 0;
            while (*(void *)(v211 + v213) != v244)
            {
              v213 += 8;
              if (v211 + v213 == v210) {
                goto LABEL_374;
              }
            }
            uint64_t v212 = v213;
          }
LABEL_374:
          if (v211 + v212 != v210 && *(void **)(v244 + 8) == v117)
          {
            uint64_t v214 = v115 + 80 * v112;
            unsigned int v215 = (void **)(v214 + 8);
            unsigned int v216 = *(_DWORD *)(v214 + 16);
            unsigned int v217 = v268;
            if (v268 >= v216) {
              uint64_t v218 = v216;
            }
            else {
              uint64_t v218 = v268;
            }
            if (v218)
            {
              v219 = (uint64_t *)__dst;
              unsigned int v220 = *v215;
              uint64_t v221 = v218;
              do
              {
                uint64_t v222 = *v219++;
                *v220++ &= v222;
                --v221;
              }
              while (v221);
            }
            if (v216 > v217)
            {
              uint64_t v223 = *v215;
              do
              {
                v223[v218] = 0;
                LODWORD(v218) = v218 + 1;
              }
              while (v216 != v218);
            }
          }
        }
      }
      else
      {
        uint64_t v143 = v115 + 80 * v112;
        uint64_t v144 = *(void *)(v143 + 8);
        uint64_t v145 = *(unsigned int *)(v143 + 16);
        if (v145) {
          memset(*(void **)(v143 + 8), 255, 8 * v145);
        }
        if ((*(_DWORD *)(v115 + 80 * v112 + 72) & 0x3F) != 0) {
          *(void *)(v144 + 8 * v145 - 8) &= ~(-1 << (*(_DWORD *)(v115 + 80 * v112 + 72) & 0x3F));
        }
      }
      if (v271)
      {
        int v146 = 16;
        unint64_t v147 = &v272;
      }
      else
      {
        int v146 = v273;
        if (!v273)
        {
          unsigned int v156 = 0;
          goto LABEL_261;
        }
        unint64_t v147 = v272;
      }
      int v148 = v146 - 1;
      unsigned int v149 = v148 & (v131 ^ (v117 >> 9));
      unsigned int v150 = &v147[2 * v149];
      unint64_t v151 = (void *)*v150;
      if (v117 == (void *)*v150) {
        goto LABEL_262;
      }
      unsigned int v152 = 0;
      int v153 = 1;
      while (v151 != (void *)-4096)
      {
        if (v152) {
          BOOL v154 = 0;
        }
        else {
          BOOL v154 = v151 == (void *)-8192;
        }
        if (v154) {
          unsigned int v152 = v150;
        }
        unsigned int v155 = v149 + v153++;
        unsigned int v149 = v155 & v148;
        unsigned int v150 = &v147[2 * v149];
        unint64_t v151 = (void *)*v150;
        if (v117 == (void *)*v150) {
          goto LABEL_262;
        }
      }
      if (v152) {
        unsigned int v156 = v152;
      }
      else {
        unsigned int v156 = v150;
      }
LABEL_261:
      unsigned int v150 = sub_1CC7462F0((uint64_t)&v271, v116, v156);
      void *v150 = *v116;
      *((_DWORD *)v150 + 2) = 0;
      char v117 = (void *)*v116;
LABEL_262:
      unsigned int v158 = (uint64_t *)v117[11];
      uint64_t v157 = (uint64_t *)v117[12];
      if (v158 != v157)
      {
        int v159 = *((_DWORD *)v150 + 2);
        do
        {
          if (v271)
          {
            int v160 = 16;
            unsigned int v161 = &v272;
          }
          else
          {
            int v160 = v273;
            if (!v273)
            {
              v170 = 0;
              goto LABEL_280;
            }
            unsigned int v161 = v272;
          }
          int v162 = v160 - 1;
          unsigned int v163 = ((*v158 >> 4) ^ (*v158 >> 9)) & v162;
          int v164 = &v161[2 * v163];
          uint64_t v165 = *v164;
          if (*v158 == *v164) {
            goto LABEL_281;
          }
          unsigned int v166 = 0;
          int v167 = 1;
          while (v165 != -4096)
          {
            if (v166) {
              BOOL v168 = 0;
            }
            else {
              BOOL v168 = v165 == -8192;
            }
            if (v168) {
              unsigned int v166 = v164;
            }
            unsigned int v169 = v163 + v167++;
            unsigned int v163 = v169 & v162;
            int v164 = &v161[2 * v163];
            uint64_t v165 = *v164;
            if (*v158 == *v164) {
              goto LABEL_281;
            }
          }
          if (v166) {
            v170 = v166;
          }
          else {
            v170 = v164;
          }
LABEL_280:
          int v164 = sub_1CC7462F0((uint64_t)&v271, v158, v170);
          *int v164 = *v158;
          *((_DWORD *)v164 + 2) = 0;
LABEL_281:
          int v171 = *((_DWORD *)v164 + 2);
          if (v171 <= v159)
          {
            BOOL v179 = v171 != 0;
            int v180 = v171 - 1;
            if (!v179) {
              int v180 = 0;
            }
            if (v159 > v113)
            {
              int v113 = v159;
              int v112 = v180;
            }
          }
          else
          {
            uint64_t v172 = *v158;
            unsigned int v173 = v263;
            uint64_t v174 = HIDWORD(v264);
            if (v263 != v262)
            {
              unsigned int v178 = v264;
LABEL_298:
              if (3 * v178 <= 4 * (HIDWORD(v264) - v265))
              {
                if (v178 >= 0x40) {
                  v178 *= 2;
                }
                else {
                  unsigned int v178 = 128;
                }
              }
              else if (v178 - HIDWORD(v264) >= v178 >> 3)
              {
                goto LABEL_300;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v262, v178);
              unsigned int v178 = v264;
              unsigned int v173 = v263;
LABEL_300:
              unsigned int v181 = v178 - 1;
              unsigned int v182 = (v178 - 1) & ((v172 >> 4) ^ (v172 >> 9));
              uint64_t v183 = &v173[8 * v182];
              uint64_t v184 = *(void *)v183;
              if (*(void *)v183 == -1)
              {
                uint64_t v185 = 0;
LABEL_313:
                if (v185) {
                  uint64_t v189 = v185;
                }
                else {
                  uint64_t v189 = (uint64_t *)v183;
                }
                if (*v189 != v172)
                {
                  if (*v189 == -2) {
                    --v265;
                  }
                  else {
                    ++HIDWORD(v264);
                  }
                  *uint64_t v189 = v172;
                }
              }
              else
              {
                uint64_t v185 = 0;
                int v186 = 1;
                while (v184 != v172)
                {
                  if (v185) {
                    BOOL v187 = 0;
                  }
                  else {
                    BOOL v187 = v184 == -2;
                  }
                  if (v187) {
                    uint64_t v185 = (uint64_t *)v183;
                  }
                  unsigned int v188 = v182 + v186++;
                  unsigned int v182 = v188 & v181;
                  uint64_t v183 = &v173[8 * (v188 & v181)];
                  uint64_t v184 = *(void *)v183;
                  if (*(void *)v183 == -1) {
                    goto LABEL_313;
                  }
                }
              }
              goto LABEL_320;
            }
            if (HIDWORD(v264))
            {
              uint64_t v175 = 0;
              uint64_t v176 = 8 * HIDWORD(v264);
              int v177 = (uint64_t *)v263;
              while (*v177 != v172)
              {
                if (*v177 == -2) {
                  uint64_t v175 = v177;
                }
                ++v177;
                v176 -= 8;
                if (!v176)
                {
                  if (!v175) {
                    goto LABEL_290;
                  }
                  *uint64_t v175 = v172;
                  --v265;
                  goto LABEL_320;
                }
              }
              goto LABEL_320;
            }
LABEL_290:
            unsigned int v178 = v264;
            if (HIDWORD(v264) >= v264) {
              goto LABEL_298;
            }
            ++HIDWORD(v264);
            *(void *)&v263[8 * v174] = v172;
          }
LABEL_320:
          ++v158;
        }
        while (v158 != v157);
      }
      ++v112;
      a3 = v248;
    }
    while (v112 != v21);
  }
  if (__dst != v269) {
    free(__dst);
  }
  if ((v271 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v272, 8);
  }
  if (v258 != v257) {
    free(v258);
  }
  if (v263 != v262) {
    free(v263);
  }
}

void *sub_1CC746188(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v13 = 0;
LABEL_17:
      uint64_t v7 = sub_1CC7462F0(a1, a2, v13);
      void *v7 = *a2;
      *((_DWORD *)v7 + 2) = 0;
      return v7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 != *v7)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return v7;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v7;
    }
    goto LABEL_17;
  }
  return v7;
}

uint64_t sub_1CC746258(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC7462F0(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC746468(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 16;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    unsigned int v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (void *)(v10 + 16 * v13);
    uint64_t v14 = *a3;
    if (*a2 != *a3)
    {
      int v15 = 0;
      int v16 = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -8192;
        }
        if (v17) {
          int v15 = a3;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        a3 = (void *)(v10 + 16 * v13);
        uint64_t v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CC746468(a1, v7);
      int v19 = 0;
      sub_1CC746258(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

int *sub_1CC746468(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC746600((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC746600((int *)a1, v14, v7);
}

int *sub_1CC746600(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 66;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 16;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t *)&v8[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::GPUBaseInfo::getDeviceTypeFromTarget(uint64_t a1)
{
  int v1 = *(char *)(*(void *)(*(void *)(a1 + 8) + 16) + 3);
  if (v1 != 49)
  {
    if (v1 == 50)
    {
      char v2 = *(unsigned char *)(a1 + 519);
      int v3 = v2;
      uint64_t v4 = v2 & 0x7F;
      if (v3 < 0) {
        uint64_t v4 = *(void *)(a1 + 504);
      }
      if (!v4) {
        return 4;
      }
      if (v3 >= 0) {
        uint64_t v5 = a1 + 496;
      }
      else {
        uint64_t v5 = *(void *)(a1 + 496);
      }
      if ((unint64_t)(v4 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
      {
        if (*(_WORD *)(v5 + 1) == 13105 && *(unsigned char *)(v5 + 3) == 112) {
          return 8;
        }
LABEL_48:
        if (*(_WORD *)(v5 + 1) != 12337)
        {
          if (*(_WORD *)(v5 + 1) == 12593) {
            return 5;
          }
          if (*(_WORD *)(v5 + 1) == 12849) {
            return 6;
          }
          if (*(_WORD *)(v5 + 1) != 13105)
          {
            uint64_t result = 9;
            if (*(_WORD *)(v5 + 1) != 13361)
            {
              if (*(_WORD *)(v5 + 1) == 13617) {
                return 9;
              }
              else {
                return 0;
              }
            }
            return result;
          }
          return 7;
        }
        return 4;
      }
      if ((unint64_t)(v4 - 3) <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_48;
      }
      return 0;
    }
    char v13 = *(unsigned char *)(a1 + 519);
    int v14 = v13;
    uint64_t v15 = v13 & 0x7F;
    if (v14 < 0) {
      uint64_t v15 = *(void *)(a1 + 504);
    }
    if (v15)
    {
      if (v14 >= 0) {
        uint64_t v16 = a1 + 496;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 496);
      }
      if ((unint64_t)(v15 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        if (v15 != 3) {
          return 0;
        }
      }
      else
      {
        if (*(_WORD *)(v16 + 1) == 14129 && *(unsigned char *)(v16 + 3) == 103) {
          return 13;
        }
        if (*(_WORD *)(v16 + 1) == 14129 && *(unsigned char *)(v16 + 3) == 115) {
          return 13;
        }
        if (*(_WORD *)(v16 + 1) == 14385 && *(unsigned char *)(v16 + 3) == 103) {
          return 15;
        }
      }
      if (*(_WORD *)(v16 + 1) == 13105) {
        return 7;
      }
      if (*(_WORD *)(v16 + 1) != 13617)
      {
        switch(*(_WORD *)(v16 + 1))
        {
          case 0x3631:
            return 11;
          case 0x3731:
            return 12;
          case 0x3831:
            return 14;
        }
        return 0;
      }
    }
    return 10;
  }
  char v8 = *(unsigned char *)(a1 + 519);
  int v9 = v8;
  uint64_t v10 = v8 & 0x7F;
  if (v9 < 0) {
    uint64_t v10 = *(void *)(a1 + 504);
  }
  if (!v10) {
    return 1;
  }
  uint64_t v11 = v9 >= 0 ? a1 + 496 : *(void *)(a1 + 496);
  int v12 = *(char *)(v11 + 1);
  if (v12 == 52) {
    return 1;
  }
  if (v12 == 53) {
    return 2;
  }
  return 3;
}

void sub_1CC746984(uint64_t a1)
{
}

void sub_1CC746A28()
{
}

void sub_1CC746AD0(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC746B84(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC746C30()
{
  return "GPU Control Flow Lowering";
}

void sub_1CC746C40(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
}

uint64_t sub_1CC746CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v721 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(v5 + 48);
  if (!v8)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 216))(*(void *)(v5 + 8), v5 + 128, v5);
    *(void *)(v6 + 48) = v8;
  }
  *(_DWORD *)(v8 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 248) + 8))(*(void *)(v7 + 248), v6);
  uint64_t v9 = *(void *)(v6 + 328);
  if (v9 == v6 + 320 || *(void *)(v9 + 8) == v6 + 320) {
    return 0;
  }
  uint64_t v10 = *(uint64_t **)(v7 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_8:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::MachineLoopInfo::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_8;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::MachineLoopInfo::ID);
  uint64_t v16 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(void))(**(void **)(v6 + 16) + 104))(*(void *)(v6 + 16));
  *(void *)(v7 + 256) = v16;
  v706[0] = &unk_1F261D420;
  v706[1] = (void *)v7;
  v708 = v706;
  llvm::foldBlocksForCFGProcessing(v6, v15, v16, (uint64_t)v706);
  if (v708 == v706)
  {
    (*((void (**)(void **))v706[0] + 4))(v706);
  }
  else if (v708)
  {
    (*((void (**)(void))*v708 + 5))();
  }
  v685 = v687;
  uint64_t v686 = 0x1000000000;
  uint64_t v688 = 1;
  for (uint64_t i = 88; i != 344; i += 16)
    *(void **)((char *)&v685 + i) = (void *)-4096;
  uint64_t v691 = 1;
  for (uint64_t j = 352; j != 864; j += 32)
    *(void **)((char *)&v685 + j) = (void *)-4096;
  v694 = (char *)&v696;
  uint64_t v695 = 0x2000000000;
  uint64_t v638 = v15;
  sub_1CBBF0ADC((uint64_t)&v685, v6, v15);
  if (byte_1EBCDA308)
  {
    v679[0] = "CFGUnloopifier";
    v680[8] = 259;
    __int16 v700 = 257;
    int v19 = *(uint64_t ****)v6;
    if ((*(unsigned char *)(*(void *)v6 + 23) & 0x10) == 0)
    {
      int v30 = 0;
      int v29 = &byte_1CFBCE98E;
LABEL_29:
      v717[0] = 1283;
      v713 = "CFGUnloopifier.";
      uint64_t v715 = (uint64_t)v29;
      v716 = (uint64_t)v30;
      v667 = &v713;
      v669 = ".dot";
      __int16 v671 = 770;
      llvm::Twine::str((llvm::Twine *)&v667, __p);
      int v32 = (void *)HIBYTE(v661);
      if (v661 < 0) {
        int v32 = __p[1];
      }
      LODWORD(v701[0]) = 0;
      if (v32)
      {
        __int16 v709 = 260;
        v706[0] = __p;
        *(void *)&long long v662 = llvm::sys::fs::openFile((unsigned __int8 *)v706, (int *)v701, 0, 2, 1, 438);
        *((void *)&v662 + 1) = v33;
        int v34 = std::generic_category();
        v706[0] = (void *)17;
        v706[1] = (void *)v34;
        int v35 = (llvm *)(*(uint64_t (**)(void, void, void **))(**((void **)&v662 + 1) + 32))(*((void *)&v662 + 1), v662, v706);
        if (v35
          || (int v35 = (llvm *)(*(uint64_t (**)(void *, long long *, void))(*(void *)v706[1] + 40))(v706[1], &v662, LODWORD(v706[0])), v35))
        {
          v572 = (llvm::raw_ostream *)llvm::errs(v35);
          v573 = (void *)*((void *)v572 + 4);
          if (*((void *)v572 + 3) - (void)v573 > 0x17uLL)
          {
            qmemcpy(v573, "file exists, overwriting", 24);
            v574 = (unsigned char *)(*((void *)v572 + 4) + 24);
            *((void *)v572 + 4) = v574;
          }
          else
          {
            v572 = llvm::raw_ostream::write(v572, "file exists, overwriting", 0x18uLL);
            v574 = (unsigned char *)*((void *)v572 + 4);
          }
          v575 = (unsigned char *)*((void *)v572 + 3);
        }
        else
        {
          int v36 = v662;
          uint64_t v37 = (llvm::raw_ostream *)llvm::errs(v35);
          uint64_t v38 = (char *)*((void *)v37 + 4);
          unint64_t v39 = *((void *)v37 + 3) - (void)v38;
          if (v36)
          {
            if (v39 > 0x16)
            {
              qmemcpy(v38, "error writing into file", 23);
              unsigned int v40 = (unsigned char *)(*((void *)v37 + 4) + 23);
              *((void *)v37 + 4) = v40;
            }
            else
            {
              uint64_t v37 = llvm::raw_ostream::write(v37, "error writing into file", 0x17uLL);
              unsigned int v40 = (unsigned char *)*((void *)v37 + 4);
            }
            if (*((unsigned char **)v37 + 3) == v40)
            {
              llvm::raw_ostream::write(v37, "\n", 1uLL);
            }
            else
            {
              *unsigned int v40 = 10;
              ++*((void *)v37 + 4);
            }
LABEL_39:
            if (SHIBYTE(v661) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_41;
          }
          if (v39 > 0x21)
          {
            qmemcpy(v38, "writing to the newly created file ", 34);
            *((void *)v37 + 4) += 34;
          }
          else
          {
            uint64_t v37 = llvm::raw_ostream::write(v37, "writing to the newly created file ", 0x22uLL);
          }
          if (v661 >= 0) {
            v584 = __p;
          }
          else {
            v584 = (void **)__p[0];
          }
          if (v661 >= 0) {
            size_t v585 = HIBYTE(v661) & 0x7F;
          }
          else {
            size_t v585 = (size_t)__p[1];
          }
          v572 = llvm::raw_ostream::write(v37, (const char *)v584, v585);
          v575 = (unsigned char *)*((void *)v572 + 3);
          v574 = (unsigned char *)*((void *)v572 + 4);
        }
        if (v575 == v574)
        {
          llvm::raw_ostream::write(v572, "\n", 1uLL);
        }
        else
        {
          unsigned char *v574 = 10;
          ++*((void *)v572 + 4);
        }
      }
      else
      {
        llvm::Twine::str((llvm::Twine *)v679, v703);
        __int16 v709 = 260;
        v706[0] = v703;
        llvm::createGraphFilename((llvm *)v706, (const llvm::Twine *)v701, (uint64_t)&v662);
        if (SHIBYTE(v661) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v662;
        uint64_t v661 = v663;
        HIBYTE(v663) = 0;
        LOBYTE(v662) = 0;
        if (SHIBYTE(v704[0]) < 0) {
          operator delete(v703[0]);
        }
      }
      v586 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v706, (int)v701[0], 1, 0, 0);
      if (LODWORD(v701[0]) == -1)
      {
        v587 = (llvm::raw_ostream *)llvm::errs(v586);
        uint64_t v588 = *((void *)v587 + 4);
        if ((unint64_t)(*((void *)v587 + 3) - v588) > 0x13)
        {
          *(_DWORD *)(v588 + 16) = 656434540;
          *(_OWORD *)uint64_t v588 = *(_OWORD *)"error opening file '";
          *((void *)v587 + 4) += 20;
        }
        else
        {
          v587 = llvm::raw_ostream::write(v587, "error opening file '", 0x14uLL);
        }
        if (v661 >= 0) {
          v589 = __p;
        }
        else {
          v589 = (void **)__p[0];
        }
        if (v661 >= 0) {
          size_t v590 = HIBYTE(v661) & 0x7F;
        }
        else {
          size_t v590 = (size_t)__p[1];
        }
        v591 = llvm::raw_ostream::write(v587, (const char *)v589, v590);
        v592 = (void *)*((void *)v591 + 4);
        if (*((void *)v591 + 3) - (void)v592 > 0xEuLL)
        {
          qmemcpy(v592, "' for writing!\n", 15);
          *((void *)v591 + 4) += 15;
        }
        else
        {
          llvm::raw_ostream::write(v591, "' for writing!\n", 0xFuLL);
        }
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v706);
      }
      else
      {
        v593 = (llvm *)sub_1CD632900((uint64_t)v706, (uint64_t)&v685, (llvm::Twine *)&v697);
        v594 = (llvm::raw_ostream *)llvm::errs(v593);
        v595 = (void *)*((void *)v594 + 4);
        if (*((void *)v594 + 3) - (void)v595 > 7uLL)
        {
          void *v595 = 0xA202E656E6F6420;
          *((void *)v594 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v594, " done. \n", 8uLL);
        }
        v596 = __p[0];
        int v597 = SHIBYTE(v661);
        __p[1] = 0;
        uint64_t v661 = 0;
        __p[0] = 0;
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v706);
        if (v597 < 0) {
          operator delete(v596);
        }
      }
      goto LABEL_39;
    }
    uint64_t v20 = ***v19;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      unint64_t v24 = (uint64_t ****)(v21 + 16 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v19)
      {
LABEL_28:
        uint64_t v28 = v24[1];
        int v31 = *v28;
        int v29 = (char *)(v28 + 2);
        int v30 = v31;
        goto LABEL_29;
      }
      int v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        uint64_t v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == v19)
        {
          unint64_t v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_28;
        }
      }
    }
    unint64_t v24 = (uint64_t ****)(v21 + 16 * v22);
    goto LABEL_28;
  }
LABEL_41:
  v679[0] = (char *)v680;
  v679[1] = (char *)0x2000000000;
  v681 = v683;
  uint64_t v682 = 0x600000000;
  v683[12] = 0;
  v684 = &v685;
  sub_1CBBF2FC4((uint64_t)v679);
  if (!byte_1EBCDA3C8) {
    goto LABEL_63;
  }
  v697 = "ControlGraph";
  __int16 v700 = 259;
  __int16 v671 = 257;
  int v41 = *(uint64_t ****)v6;
  if ((*(unsigned char *)(*(void *)v6 + 23) & 0x10) != 0)
  {
    uint64_t v42 = ***v41;
    uint64_t v43 = *(void *)(v42 + 152);
    uint64_t v44 = *(unsigned int *)(v42 + 168);
    if (v44)
    {
      LODWORD(v45) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
      uint64_t v46 = (uint64_t ****)(v43 + 16 * v45);
      int v47 = *v46;
      if (*v46 == v41)
      {
LABEL_50:
        BOOL v50 = v46[1];
        unsigned int v53 = *v50;
        unint64_t v51 = (char *)(v50 + 2);
        int v52 = v53;
        goto LABEL_51;
      }
      int v48 = 1;
      while (v47 != (uint64_t ***)-4096)
      {
        int v49 = v45 + v48++;
        uint64_t v45 = v49 & (v44 - 1);
        int v47 = *(uint64_t ****)(v43 + 16 * v45);
        if (v47 == v41)
        {
          uint64_t v46 = (uint64_t ****)(v43 + 16 * v45);
          goto LABEL_50;
        }
      }
    }
    uint64_t v46 = (uint64_t ****)(v43 + 16 * v44);
    goto LABEL_50;
  }
  int v52 = 0;
  unint64_t v51 = &byte_1CFBCE98E;
LABEL_51:
  v665[0] = 1283;
  *(void *)&long long v662 = "ControlGraph.";
  uint64_t v663 = (uint64_t)v51;
  v664 = v52;
  v713 = &v662;
  uint64_t v715 = (uint64_t)".dot";
  v717[0] = 770;
  llvm::Twine::str((llvm::Twine *)&v713, v658);
  unsigned int v54 = (void *)HIBYTE(v659);
  if (v659 < 0) {
    unsigned int v54 = v658[1];
  }
  LODWORD(v718) = 0;
  if (!v54)
  {
    llvm::Twine::str((llvm::Twine *)&v697, v701);
    __int16 v709 = 260;
    v706[0] = v701;
    llvm::createGraphFilename((llvm *)v706, (const llvm::Twine *)&v718, (uint64_t)v703);
    if (SHIBYTE(v659) < 0) {
      operator delete(v658[0]);
    }
    *(_OWORD *)v658 = *(_OWORD *)v703;
    uint64_t v659 = v704[0];
    HIBYTE(v704[0]) = 0;
    LOBYTE(v703[0]) = 0;
    if (SHIBYTE(v702[0]) < 0) {
      operator delete(v701[0]);
    }
    goto LABEL_906;
  }
  __int16 v709 = 260;
  v706[0] = v658;
  v703[0] = (void *)llvm::sys::fs::openFile((unsigned __int8 *)v706, (int *)&v718, 0, 2, 1, 438);
  v703[1] = v55;
  uint64_t v56 = std::generic_category();
  v706[0] = (void *)17;
  v706[1] = (void *)v56;
  unint64_t v57 = (llvm *)(*(uint64_t (**)(void *, void, void **))(*(void *)v703[1] + 32))(v703[1], LODWORD(v703[0]), v706);
  if (v57
    || (unint64_t v57 = (llvm *)(*(uint64_t (**)(void *, void **, void))(*(void *)v706[1] + 40))(v706[1], v703, LODWORD(v706[0])), v57))
  {
    v576 = (llvm::raw_ostream *)llvm::errs(v57);
    v577 = (void *)*((void *)v576 + 4);
    if (*((void *)v576 + 3) - (void)v577 > 0x17uLL)
    {
      qmemcpy(v577, "file exists, overwriting", 24);
      v578 = (unsigned char *)(*((void *)v576 + 4) + 24);
      *((void *)v576 + 4) = v578;
    }
    else
    {
      v576 = llvm::raw_ostream::write(v576, "file exists, overwriting", 0x18uLL);
      v578 = (unsigned char *)*((void *)v576 + 4);
    }
    v579 = (unsigned char *)*((void *)v576 + 3);
    goto LABEL_904;
  }
  int v58 = (int)v703[0];
  BOOL v59 = (llvm::raw_ostream *)llvm::errs(v57);
  unsigned int v60 = (char *)*((void *)v59 + 4);
  unint64_t v61 = *((void *)v59 + 3) - (void)v60;
  if (!v58)
  {
    if (v61 > 0x21)
    {
      qmemcpy(v60, "writing to the newly created file ", 34);
      *((void *)v59 + 4) += 34;
    }
    else
    {
      BOOL v59 = llvm::raw_ostream::write(v59, "writing to the newly created file ", 0x22uLL);
    }
    if (v659 >= 0) {
      v598 = v658;
    }
    else {
      v598 = (void **)v658[0];
    }
    if (v659 >= 0) {
      size_t v599 = HIBYTE(v659) & 0x7F;
    }
    else {
      size_t v599 = (size_t)v658[1];
    }
    v576 = llvm::raw_ostream::write(v59, (const char *)v598, v599);
    v579 = (unsigned char *)*((void *)v576 + 3);
    v578 = (unsigned char *)*((void *)v576 + 4);
LABEL_904:
    if (v579 == v578)
    {
      llvm::raw_ostream::write(v576, "\n", 1uLL);
    }
    else
    {
      unsigned char *v578 = 10;
      ++*((void *)v576 + 4);
    }
LABEL_906:
    v600 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v706, (int)v718, 1, 0, 0);
    if (v718 == -1)
    {
      v601 = (llvm::raw_ostream *)llvm::errs(v600);
      uint64_t v602 = *((void *)v601 + 4);
      if ((unint64_t)(*((void *)v601 + 3) - v602) > 0x13)
      {
        *(_DWORD *)(v602 + 16) = 656434540;
        *(_OWORD *)uint64_t v602 = *(_OWORD *)"error opening file '";
        *((void *)v601 + 4) += 20;
      }
      else
      {
        v601 = llvm::raw_ostream::write(v601, "error opening file '", 0x14uLL);
      }
      if (v659 >= 0) {
        v603 = v658;
      }
      else {
        v603 = (void **)v658[0];
      }
      if (v659 >= 0) {
        size_t v604 = HIBYTE(v659) & 0x7F;
      }
      else {
        size_t v604 = (size_t)v658[1];
      }
      v605 = llvm::raw_ostream::write(v601, (const char *)v603, v604);
      v606 = (void *)*((void *)v605 + 4);
      if (*((void *)v605 + 3) - (void)v606 > 0xEuLL)
      {
        qmemcpy(v606, "' for writing!\n", 15);
        *((void *)v605 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v605, "' for writing!\n", 0xFuLL);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v706);
    }
    else
    {
      v607 = (llvm *)sub_1CD632F2C((uint64_t)v706, (uint64_t)v679, (llvm::Twine *)&v667);
      v608 = (llvm::raw_ostream *)llvm::errs(v607);
      v609 = (void *)*((void *)v608 + 4);
      if (*((void *)v608 + 3) - (void)v609 > 7uLL)
      {
        void *v609 = 0xA202E656E6F6420;
        *((void *)v608 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v608, " done. \n", 8uLL);
      }
      v610 = v658[0];
      int v611 = SHIBYTE(v659);
      v658[1] = 0;
      uint64_t v659 = 0;
      v658[0] = 0;
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v706);
      if (v611 < 0) {
        operator delete(v610);
      }
    }
    goto LABEL_61;
  }
  if (v61 > 0x16)
  {
    qmemcpy(v60, "error writing into file", 23);
    uint64_t v62 = (unsigned char *)(*((void *)v59 + 4) + 23);
    *((void *)v59 + 4) = v62;
  }
  else
  {
    BOOL v59 = llvm::raw_ostream::write(v59, "error writing into file", 0x17uLL);
    uint64_t v62 = (unsigned char *)*((void *)v59 + 4);
  }
  if (*((unsigned char **)v59 + 3) == v62)
  {
    llvm::raw_ostream::write(v59, "\n", 1uLL);
  }
  else
  {
    *uint64_t v62 = 10;
    ++*((void *)v59 + 4);
  }
LABEL_61:
  if (SHIBYTE(v659) < 0) {
    operator delete(v658[0]);
  }
LABEL_63:
  llvm::FlowAnalyzer::FlowAnalyzer((uint64_t)&v667, (uint64_t *)v679, (int **)&v685, v15, *(void *)(v7 + 248), *(llvm::TargetInstrInfo **)(v7 + 256));
  if (!byte_1EBCDA488) {
    goto LABEL_85;
  }
  v697 = "FlowAnalyzer";
  __int16 v700 = 259;
  v717[0] = 257;
  uint64_t v64 = *(uint64_t ****)v6;
  if ((*(unsigned char *)(*(void *)v6 + 23) & 0x10) != 0)
  {
    uint64_t v65 = ***v64;
    uint64_t v66 = *(void *)(v65 + 152);
    uint64_t v67 = *(unsigned int *)(v65 + 168);
    if (v67)
    {
      LODWORD(v68) = (v67 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      uint64_t v69 = (uint64_t ****)(v66 + 16 * v68);
      uint64_t v70 = *v69;
      if (*v69 == v64)
      {
LABEL_72:
        unint64_t v73 = v69[1];
        uint64_t v76 = *v73;
        int v74 = (char *)(v73 + 2);
        char v75 = v76;
        goto LABEL_73;
      }
      int v71 = 1;
      while (v70 != (uint64_t ***)-4096)
      {
        int v72 = v68 + v71++;
        uint64_t v68 = v72 & (v67 - 1);
        uint64_t v70 = *(uint64_t ****)(v66 + 16 * v68);
        if (v70 == v64)
        {
          uint64_t v69 = (uint64_t ****)(v66 + 16 * v68);
          goto LABEL_72;
        }
      }
    }
    uint64_t v69 = (uint64_t ****)(v66 + 16 * v67);
    goto LABEL_72;
  }
  char v75 = 0;
  int v74 = &byte_1CFBCE98E;
LABEL_73:
  __int16 v705 = 1283;
  v703[0] = "FlowAnalyzer.";
  v704[0] = v74;
  v704[1] = v75;
  *(void *)&long long v662 = v703;
  uint64_t v663 = (uint64_t)".dot";
  v665[0] = 770;
  llvm::Twine::str((llvm::Twine *)&v662, v656);
  unsigned int v77 = (void *)HIBYTE(v657);
  if (v657 < 0) {
    unsigned int v77 = v656[1];
  }
  LODWORD(v710) = 0;
  if (!v77)
  {
    llvm::Twine::str((llvm::Twine *)&v697, &v718);
    __int16 v709 = 260;
    v706[0] = &v718;
    llvm::createGraphFilename((llvm *)v706, (const llvm::Twine *)&v710, (uint64_t)v701);
    if (SHIBYTE(v657) < 0) {
      operator delete(v656[0]);
    }
    *(_OWORD *)v656 = *(_OWORD *)v701;
    uint64_t v657 = v702[0];
    HIBYTE(v702[0]) = 0;
    LOBYTE(v701[0]) = 0;
    if ((v720[7] & 0x80000000) != 0) {
      operator delete(v718);
    }
    goto LABEL_933;
  }
  __int16 v709 = 260;
  v706[0] = v656;
  v701[0] = (void *)llvm::sys::fs::openFile((unsigned __int8 *)v706, (int *)&v710, 0, 2, 1, 438);
  v701[1] = v78;
  uint64_t v79 = std::generic_category();
  v706[0] = (void *)17;
  v706[1] = (void *)v79;
  int v80 = (llvm *)(*(uint64_t (**)(void *, void, void **))(*(void *)v701[1] + 32))(v701[1], LODWORD(v701[0]), v706);
  if (v80
    || (int v80 = (llvm *)(*(uint64_t (**)(void *, void **, void))(*(void *)v706[1] + 40))(v706[1], v701, LODWORD(v706[0])), v80))
  {
    v580 = (llvm::raw_ostream *)llvm::errs(v80);
    v581 = (void *)*((void *)v580 + 4);
    if (*((void *)v580 + 3) - (void)v581 > 0x17uLL)
    {
      qmemcpy(v581, "file exists, overwriting", 24);
      v582 = (unsigned char *)(*((void *)v580 + 4) + 24);
      *((void *)v580 + 4) = v582;
    }
    else
    {
      v580 = llvm::raw_ostream::write(v580, "file exists, overwriting", 0x18uLL);
      v582 = (unsigned char *)*((void *)v580 + 4);
    }
    v583 = (unsigned char *)*((void *)v580 + 3);
    goto LABEL_931;
  }
  int v81 = (int)v701[0];
  unint64_t v82 = (llvm::raw_ostream *)llvm::errs(v80);
  unsigned int v83 = (char *)*((void *)v82 + 4);
  unint64_t v84 = *((void *)v82 + 3) - (void)v83;
  if (!v81)
  {
    if (v84 > 0x21)
    {
      qmemcpy(v83, "writing to the newly created file ", 34);
      *((void *)v82 + 4) += 34;
    }
    else
    {
      unint64_t v82 = llvm::raw_ostream::write(v82, "writing to the newly created file ", 0x22uLL);
    }
    if (v657 >= 0) {
      v612 = v656;
    }
    else {
      v612 = (void **)v656[0];
    }
    if (v657 >= 0) {
      size_t v613 = HIBYTE(v657) & 0x7F;
    }
    else {
      size_t v613 = (size_t)v656[1];
    }
    v580 = llvm::raw_ostream::write(v82, (const char *)v612, v613);
    v583 = (unsigned char *)*((void *)v580 + 3);
    v582 = (unsigned char *)*((void *)v580 + 4);
LABEL_931:
    if (v583 == v582)
    {
      llvm::raw_ostream::write(v580, "\n", 1uLL);
    }
    else
    {
      unsigned char *v582 = 10;
      ++*((void *)v580 + 4);
    }
LABEL_933:
    v614 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v706, (int)v710, 1, 0, 0);
    if (v710 == -1)
    {
      v615 = (llvm::raw_ostream *)llvm::errs(v614);
      uint64_t v616 = *((void *)v615 + 4);
      if ((unint64_t)(*((void *)v615 + 3) - v616) > 0x13)
      {
        *(_DWORD *)(v616 + 16) = 656434540;
        *(_OWORD *)uint64_t v616 = *(_OWORD *)"error opening file '";
        *((void *)v615 + 4) += 20;
      }
      else
      {
        v615 = llvm::raw_ostream::write(v615, "error opening file '", 0x14uLL);
      }
      if (v657 >= 0) {
        v617 = v656;
      }
      else {
        v617 = (void **)v656[0];
      }
      if (v657 >= 0) {
        size_t v618 = HIBYTE(v657) & 0x7F;
      }
      else {
        size_t v618 = (size_t)v656[1];
      }
      v619 = llvm::raw_ostream::write(v615, (const char *)v617, v618);
      v620 = (void *)*((void *)v619 + 4);
      if (*((void *)v619 + 3) - (void)v620 > 0xEuLL)
      {
        qmemcpy(v620, "' for writing!\n", 15);
        *((void *)v619 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v619, "' for writing!\n", 0xFuLL);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v706);
    }
    else
    {
      v621 = (llvm *)sub_1CD633488((uint64_t)v706, (uint64_t)&v667, (llvm::Twine *)&v713);
      v622 = (llvm::raw_ostream *)llvm::errs(v621);
      v623 = (void *)*((void *)v622 + 4);
      if (*((void *)v622 + 3) - (void)v623 > 7uLL)
      {
        void *v623 = 0xA202E656E6F6420;
        *((void *)v622 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v622, " done. \n", 8uLL);
      }
      v624 = v656[0];
      int v625 = SHIBYTE(v657);
      v656[1] = 0;
      uint64_t v657 = 0;
      v656[0] = 0;
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v706);
      if (v625 < 0) {
        operator delete(v624);
      }
    }
    goto LABEL_83;
  }
  if (v84 > 0x16)
  {
    qmemcpy(v83, "error writing into file", 23);
    uint64_t v85 = (unsigned char *)(*((void *)v82 + 4) + 23);
    *((void *)v82 + 4) = v85;
  }
  else
  {
    unint64_t v82 = llvm::raw_ostream::write(v82, "error writing into file", 0x17uLL);
    uint64_t v85 = (unsigned char *)*((void *)v82 + 4);
  }
  if (*((unsigned char **)v82 + 3) == v85)
  {
    llvm::raw_ostream::write(v82, "\n", 1uLL);
  }
  else
  {
    *uint64_t v85 = 10;
    ++*((void *)v82 + 4);
  }
LABEL_83:
  if (SHIBYTE(v657) < 0) {
    operator delete(v656[0]);
  }
LABEL_85:
  if (v678 < 0x100) {
    goto LABEL_111;
  }
  unint64_t ShaderID = llvm::AGXIR::getShaderID(*(llvm::AGXIR **)(*(void *)v6 + 40), v63);
  unsigned int v87 = (llvm::raw_ostream *)llvm::errs((llvm *)ShaderID);
  uint64_t v88 = v87;
  int v89 = (_OWORD *)*((void *)v87 + 4);
  if (*((void *)v87 + 3) - (void)v89 > 0xFuLL)
  {
    *int v89 = *(_OWORD *)"Max Unstruct ID ";
    *((void *)v87 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v87, "Max Unstruct ID ", 0x10uLL);
  }
  sub_1CD098D14(v88, v678, 0, 0, 0);
  unsigned int v90 = (void *)*((void *)v88 + 4);
  if (*((void *)v88 + 3) - (void)v90 > 0xCuLL)
  {
    qmemcpy(v90, " in function ", 13);
    *((void *)v88 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v88, " in function ", 0xDuLL);
  }
  uint64_t v91 = *(uint64_t ****)v6;
  if ((*(unsigned char *)(*(void *)v6 + 23) & 0x10) == 0) {
    goto LABEL_100;
  }
  uint64_t v92 = ***v91;
  uint64_t v93 = *(void *)(v92 + 152);
  uint64_t v94 = *(unsigned int *)(v92 + 168);
  if (!v94) {
    goto LABEL_97;
  }
  LODWORD(v95) = (v94 - 1) & ((v91 >> 4) ^ (v91 >> 9));
  int v96 = (uint64_t ****)(v93 + 16 * v95);
  unint64_t v97 = *v96;
  if (*v96 != v91)
  {
    int v98 = 1;
    while (v97 != (uint64_t ***)-4096)
    {
      int v99 = v95 + v98++;
      uint64_t v95 = v99 & (v94 - 1);
      unint64_t v97 = *(uint64_t ****)(v93 + 16 * v95);
      if (v97 == v91)
      {
        int v96 = (uint64_t ****)(v93 + 16 * v95);
        goto LABEL_98;
      }
    }
LABEL_97:
    int v96 = (uint64_t ****)(v93 + 16 * v94);
  }
LABEL_98:
  uint64_t v100 = (size_t *)v96[1];
  size_t v103 = *v100;
  unint64_t v101 = v100 + 2;
  size_t v102 = v103;
  unsigned int v104 = (void *)*((void *)v88 + 4);
  if (v103 <= *((void *)v88 + 3) - (void)v104)
  {
    if (v102)
    {
      memcpy(v104, v101, v102);
      unsigned int v104 = (void *)(*((void *)v88 + 4) + v102);
      *((void *)v88 + 4) = v104;
    }
    goto LABEL_103;
  }
  llvm::raw_ostream::write(v88, (const char *)v101, v102);
LABEL_100:
  unsigned int v104 = (void *)*((void *)v88 + 4);
LABEL_103:
  if (*((void *)v88 + 3) - (void)v104 > 0xAuLL)
  {
    *(_DWORD *)((char *)v104 + 7) = 544367972;
    *unsigned int v104 = *(void *)" in shader ";
    *((void *)v88 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v88, " in shader ", 0xBuLL);
  }
  if ((ShaderID & 0xFF00000000) != 0)
  {
    sub_1CD098D14(v88, ShaderID, 0, 0, 0);
  }
  else
  {
    unint64_t v105 = (_DWORD *)*((void *)v88 + 4);
    if (*((void *)v88 + 3) - (void)v105 > 3uLL)
    {
      _DWORD *v105 = 1701736270;
      *((void *)v88 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v88, "None", 4uLL);
    }
  }
  uint64_t v106 = (void *)*((void *)v88 + 4);
  if (*((void *)v88 + 3) - (void)v106 > 0x18uLL)
  {
    qmemcpy(v106, " exceeds supported limit\n", 25);
    *((void *)v88 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(v88, " exceeds supported limit\n", 0x19uLL);
  }
LABEL_111:
  uint64_t v108 = *(void *)(v7 + 248);
  uint64_t v107 = *(void *)(v7 + 256);
  BOOL v109 = *(llvm::MachineFunction **)(*((void *)v694 + 2) + 32);
  *(void *)&long long v662 = v665;
  *((void *)&v662 + 1) = v665;
  uint64_t v663 = 32;
  LODWORD(v664) = 0;
  uint64_t v110 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(void *)v108 + 8))(v108, v109);
  (*(void (**)(uint64_t, llvm::MachineFunction *))(*(void *)v108 + 24))(v108, v109);
  unsigned int v644 = 0;
  if (*(unsigned __int8 *)(*((void *)v109 + 7) + 62) | v677[128])
  {
    unsigned int v644 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(void *)v108 + 16))(v108, v109);
    (*(void (**)(uint64_t, void))(*(void *)v108 + 48))(v108, *((void *)v109 + 41));
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v108 + 32))(v108, *((void *)v109 + 41), v110, v107);
  v703[0] = v704;
  v703[1] = (void *)0x2000000000;
  int v113 = (uint64_t *)((char *)v685 + 4);
  int v114 = *(_DWORD *)v685;
  uint64_t v115 = v674;
  if (v686 <= 1) {
    int v113 = &v695;
  }
  int v116 = *(_DWORD *)v113;
  v650 = v109;
  unsigned int v654 = v110;
  if (*(_DWORD *)v113 == v114)
  {
    v649 = (uint64_t *)((char *)v109 + 320);
    v701[0] = v702;
    v701[1] = (void *)0x2000000000;
    goto LABEL_202;
  }
  unsigned int v117 = 0;
  do
  {
    --v116;
    if (v117 >= HIDWORD(v703[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v703[0] + v117) = v115[v116];
    unsigned int v117 = ++LODWORD(v703[1]);
  }
  while (v114 != v116);
  v649 = (uint64_t *)((char *)v109 + 320);
  v701[0] = v702;
  for (v701[1] = (void *)0x2000000000; v117; uint64_t v110 = v654)
  {
    int v118 = *((_DWORD *)v703[0] + --v117);
    LODWORD(v703[1]) = v117;
    int v119 = v694;
    if ((v694[48 * v118 + 8] & 0x10) == 0)
    {
      if (LODWORD(v701[1]) >= (unint64_t)HIDWORD(v701[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v701[0] + LODWORD(v701[1])) = v118;
      ++LODWORD(v701[1]);
      unsigned int v120 = &v119[48 * v118];
      unsigned int v123 = (uint64_t *)*((void *)v120 + 2);
      int v122 = (uint64_t **)(v120 + 16);
      uint64_t v121 = v123;
      if (v123[8] != v123[9])
      {
        uint64_t v125 = (char *)v121[20];
        unint64_t v124 = v121[21];
        if ((unint64_t)v125 >= v124)
        {
          BOOL v140 = (char *)v121[19];
          uint64_t v141 = (v125 - v140) >> 4;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 60) {
            goto LABEL_982;
          }
          uint64_t v143 = v124 - (void)v140;
          if (v143 >> 3 > v142) {
            unint64_t v142 = v143 >> 3;
          }
          unint64_t v144 = (unint64_t)v143 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v142;
          if (v144)
          {
            if (v144 >> 60) {
              goto LABEL_983;
            }
            uint64_t v145 = (char *)operator new(16 * v144);
          }
          else
          {
            uint64_t v145 = 0;
          }
          unsigned int v156 = &v145[16 * v141];
          *(_WORD *)unsigned int v156 = v654;
          *((void *)v156 + 1) = -1;
          uint64_t v157 = v156;
          if (v125 != v140)
          {
            do
            {
              *((_OWORD *)v157 - 1) = *((_OWORD *)v125 - 1);
              v157 -= 16;
              v125 -= 16;
            }
            while (v125 != v140);
            uint64_t v125 = (char *)v121[19];
          }
          int v126 = v156 + 16;
          v121[19] = (uint64_t)v157;
          v121[20] = (uint64_t)(v156 + 16);
          v121[21] = (uint64_t)&v145[16 * v144];
          BOOL v109 = v650;
          if (v125) {
            operator delete(v125);
          }
        }
        else
        {
          *(_WORD *)uint64_t v125 = v110;
          *((void *)v125 + 1) = -1;
          int v126 = v125 + 16;
        }
        v121[20] = (uint64_t)v126;
        uint64_t v121 = *v122;
        if (v644)
        {
          int v159 = (char *)v121[20];
          unint64_t v158 = v121[21];
          if ((unint64_t)v159 >= v158)
          {
            unsigned int v161 = (char *)v121[19];
            uint64_t v162 = (v159 - v161) >> 4;
            unint64_t v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) >> 60) {
LABEL_982:
            }
              abort();
            uint64_t v164 = v158 - (void)v161;
            if (v164 >> 3 > v163) {
              unint64_t v163 = v164 >> 3;
            }
            if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v165 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v165 = v163;
            }
            if (v165)
            {
              if (v165 >> 60) {
LABEL_983:
              }
                sub_1CB833614();
              unsigned int v166 = (char *)operator new(16 * v165);
            }
            else
            {
              unsigned int v166 = 0;
            }
            int v167 = &v166[16 * v162];
            *(_WORD *)int v167 = v644;
            *((void *)v167 + 1) = -1;
            BOOL v168 = v167;
            if (v159 != v161)
            {
              do
              {
                *((_OWORD *)v168 - 1) = *((_OWORD *)v159 - 1);
                v168 -= 16;
                v159 -= 16;
              }
              while (v159 != v161);
              int v159 = (char *)v121[19];
            }
            int v160 = v167 + 16;
            v121[19] = (uint64_t)v168;
            v121[20] = (uint64_t)(v167 + 16);
            v121[21] = (uint64_t)&v166[16 * v165];
            BOOL v109 = v650;
            if (v159) {
              operator delete(v159);
            }
          }
          else
          {
            *(_WORD *)int v159 = v644;
            *((void *)v159 + 1) = -1;
            int v160 = v159 + 16;
          }
          v121[20] = (uint64_t)v160;
          uint64_t v121 = *v122;
        }
      }
      unsigned int v169 = (uint64_t *)v121[1];
      if (v649 != v121 && v169 != v649 && v169 != v121)
      {
        uint64_t v172 = *v169;
        uint64_t v173 = *v121;
        *(void *)(v173 + 8) = v169;
        uint64_t *v169 = v173;
        uint64_t v174 = *v649;
        *(void *)(v172 + 8) = v649;
        *uint64_t v121 = v174;
        *(void *)(v174 + 8) = v121;
        uint64_t *v649 = v172;
      }
      goto LABEL_190;
    }
    int v127 = *(_DWORD *)(v638 + 264);
    if (!v127) {
      goto LABEL_137;
    }
    uint64_t v128 = *(void *)&v694[48 * v118 + 16];
    uint64_t v129 = *(void *)(v638 + 248);
    unsigned int v130 = v127 - 1;
    uint64_t v131 = ((v128 >> 4) ^ (v128 >> 9)) & (v127 - 1);
    uint64_t v132 = *(void *)(v129 + 16 * v131);
    if (v128 != v132)
    {
      int v133 = 1;
      while (v132 != -4096)
      {
        int v134 = v131 + v133++;
        uint64_t v131 = v134 & v130;
        uint64_t v132 = *(void *)(v129 + 16 * v131);
        if (v128 == v132) {
          goto LABEL_133;
        }
      }
LABEL_137:
      unsigned int v139 = 0;
      goto LABEL_150;
    }
LABEL_133:
    uint64_t v135 = *(void *)(v129 + 16 * v131 + 8);
    if (!v135) {
      goto LABEL_137;
    }
    if (v688)
    {
      int v137 = 16;
      unsigned int v136 = &v689;
    }
    else
    {
      unsigned int v136 = v689;
      int v137 = v690;
      if (!v690)
      {
        uint64_t v138 = 0;
LABEL_200:
        int v148 = &v136[2 * v138];
        goto LABEL_149;
      }
    }
    int v146 = v137 - 1;
    LODWORD(v147) = (v137 - 1) & ((v135 >> 4) ^ (v135 >> 9));
    int v148 = &v136[2 * v147];
    uint64_t v149 = *v148;
    if (*v148 != v135)
    {
      int v175 = 1;
      while (v149 != -4096)
      {
        int v176 = v147 + v175++;
        uint64_t v147 = v176 & v146;
        uint64_t v149 = v136[2 * v147];
        if (v149 == v135)
        {
          int v148 = &v136[2 * v147];
          goto LABEL_149;
        }
      }
      if (v688)
      {
        unsigned int v136 = &v689;
        uint64_t v138 = 16;
      }
      else
      {
        unsigned int v136 = v689;
        uint64_t v138 = v690;
      }
      goto LABEL_200;
    }
LABEL_149:
    unsigned int v139 = *((_DWORD *)v148 + 2);
LABEL_150:
    int v150 = *((_DWORD *)v685 + v139);
    unsigned int v151 = v139 + 1;
    unsigned int v152 = (uint64_t *)((char *)v685 + 4 * v151);
    BOOL v153 = v151 >= v686;
    BOOL v154 = &v695;
    if (!v153) {
      BOOL v154 = v152;
    }
    int v155 = *(_DWORD *)v154;
    if (*(_DWORD *)v154 != v150)
    {
      do
      {
        --v155;
        if (v117 >= HIDWORD(v703[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v703[0] + v117) = v115[v155];
        unsigned int v117 = ++LODWORD(v703[1]);
      }
      while (v150 != v155);
      continue;
    }
LABEL_190:
    unsigned int v117 = v703[1];
  }
LABEL_202:
  uint64_t v177 = v695;
  int v178 = v695;
  v706[0] = &v707;
  v706[1] = (void *)0x200000000;
  v697 = v699;
  uint64_t v698 = 0x2000000000;
  if (v695 >= 0x21)
  {
    if (v695 <= 0x41uLL) {
      uint64_t v180 = 65;
    }
    else {
      uint64_t v180 = v695;
    }
    unsigned int v181 = (char *)malloc_type_malloc(v180 << 6, 0x4065EBACuLL);
    if (!v181) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned int v182 = v181;
    uint64_t v183 = 0;
    uint64_t v184 = v177 << 6;
    do
    {
      uint64_t v185 = (uint64_t *)&v182[v183];
      *uint64_t v185 = (uint64_t)&v182[v183 + 16];
      v185[1] = 0x200000000;
      if (LODWORD(v706[1])) {
        sub_1CD633BD0(v185, (uint64_t *)v706);
      }
      v183 += 64;
    }
    while (v184 != v183);
    int v186 = (char *)v697;
    if (v698)
    {
      unint64_t v626 = (unint64_t)v698 << 6;
      do
      {
        v627 = *(char **)&v186[v626 - 64];
        if (&v186[v626 - 48] != v627) {
          free(v627);
        }
        v626 -= 64;
      }
      while (v626);
      int v186 = (char *)v697;
      BOOL v109 = v650;
    }
    if (v186 != v699) {
      free(v186);
    }
    v697 = v182;
    HIDWORD(v698) = v180;
    uint64_t v110 = v654;
  }
  else if (v695)
  {
    BOOL v179 = (uint64_t *)v699;
    do
    {
      *BOOL v179 = (uint64_t)(v179 + 2);
      v179[1] = 0x200000000;
      if (LODWORD(v706[1])) {
        BOOL v179 = sub_1CD633BD0(v179, (uint64_t *)v706);
      }
      v179 += 8;
      --v177;
    }
    while (v177);
  }
  LODWORD(v698) = v178;
  if (v706[0] != &v707) {
    free(v706[0]);
  }
  uint64_t v187 = v638;
  uint64_t v636 = LODWORD(v701[1]);
  if (LODWORD(v701[1]))
  {
    uint64_t v188 = 0;
    while (1)
    {
      uint64_t v642 = v188;
      uint64_t v189 = *((unsigned int *)v701[0] + v188);
      uint64_t v190 = v672;
      uint64_t v191 = v694;
      uint64_t v192 = (char *)v672 + 48 * v189;
      unsigned int v195 = *((unsigned __int16 *)v192 + 22);
      v193 = v192 + 44;
      unsigned int v194 = v195;
      if ((v195 & 0x600) == 0)
      {
        unsigned int v196 = *((_DWORD *)v672 + 12 * v189 + 3);
        if (v196 == -1) {
          LOBYTE(v197) = 0;
        }
        else {
          int v197 = *((_DWORD *)v672 + 12 * v196 + 8);
        }
        unsigned int v198 = *((_DWORD *)v672 + 12 * v189 + 4);
        if (v198 == -1) {
          LOBYTE(v199) = 0;
        }
        else {
          int v199 = *((_DWORD *)v672 + 12 * v198 + 8);
        }
        if ((v194 & 2) == 0 && v197 | v199)
        {
          if ((v194 & 4) != 0) {
            unsigned __int8 v200 = v199;
          }
          else {
            unsigned __int8 v200 = v197;
          }
          if ((v194 & 4) == 0) {
            LOBYTE(v197) = v199;
          }
          (*(void (**)(uint64_t, void, uint64_t, void, void, void, uint64_t))(*(void *)v108 + 144))(v108, *(void *)&v694[48 * v189 + 16], v110, v644, v200, v197, v107);
          unsigned int v194 = (unsigned __int16)*v193;
        }
      }
      v651 = v190;
      if ((v194 & 0x30) != 0)
      {
        (*(void (**)(uint64_t, void, uint64_t, void, uint64_t))(*(void *)v108 + 64))(v108, *(void *)&v191[48 * v189 + 16], v110, (v194 >> 2) & 1, v107);
        unsigned int v194 = (unsigned __int16)*v193;
      }
      v647 = v191;
      v640 = v193;
      if ((v194 & 0x400) != 0) {
        break;
      }
LABEL_312:
      if ((v194 & 0x200) != 0)
      {
        uint64_t v281 = *(void *)&v191[48 * v189 + 16];
        uint64_t v282 = *(void *)(v187 + 248);
        int v283 = *(_DWORD *)(v187 + 264);
        if (v283)
        {
          uint64_t v284 = ((v281 >> 4) ^ (v281 >> 9)) & (v283 - 1);
          uint64_t v285 = *(void *)(v282 + 16 * v284);
          if (v281 == v285)
          {
LABEL_320:
            uint64_t v288 = *(void *)(v282 + 16 * v284 + 8);
          }
          else
          {
            int v286 = 1;
            while (v285 != -4096)
            {
              int v287 = v284 + v286++;
              uint64_t v284 = v287 & (v283 - 1);
              uint64_t v285 = *(void *)(v282 + 16 * v284);
              if (v281 == v285) {
                goto LABEL_320;
              }
            }
            uint64_t v288 = 0;
          }
        }
        else
        {
          uint64_t v288 = 0;
        }
        uint64_t v289 = v190[12 * v189 + 3];
        v290 = v679[0];
        v291 = &v679[0][64 * v289];
        unsigned int v292 = *((_DWORD *)v291 + 4);
        uint64_t v293 = v292 == 1 && (*((unsigned char *)v684[108] + 48 * **((unsigned int **)v291 + 1) + 8) & 0x10) != 0 || v292 > 1;
        v294 = v672;
        uint64_t v295 = v190[12 * v189 + 4];
        if (v295 != -1)
        {
          v296 = v694;
          unsigned int v632 = v293;
          uint64_t v629 = v281;
          v630 = v672;
          if (!v283) {
            goto LABEL_333;
          }
          uint64_t v297 = *(void *)&v694[48 * v289 + 16];
          unsigned int v298 = v283 - 1;
          uint64_t v299 = ((v297 >> 4) ^ (v297 >> 9)) & (v283 - 1);
          uint64_t v300 = *(void *)(v282 + 16 * v299);
          if (v297 == v300)
          {
LABEL_332:
            uint64_t v303 = *(void *)(v282 + 16 * v299 + 8);
          }
          else
          {
            int v301 = 1;
            while (v300 != -4096)
            {
              int v302 = v299 + v301++;
              uint64_t v299 = v302 & v298;
              uint64_t v300 = *(void *)(v282 + 16 * v299);
              if (v297 == v300) {
                goto LABEL_332;
              }
            }
LABEL_333:
            uint64_t v303 = 0;
          }
          int v634 = v190[12 * v189 + 3];
          if (v303 == v288) {
            int v304 = v190[12 * v189 + 4];
          }
          else {
            int v304 = v190[12 * v189 + 3];
          }
          uint64_t v631 = v288;
          v305 = sub_1CC74CAE8(v187, (void *)v288, *(void *)&v694[48 * v304 + 16]);
          if (v305)
          {
            if (v688)
            {
              int v307 = 16;
              v306 = &v689;
            }
            else
            {
              v306 = v689;
              int v307 = v690;
              if (!v690)
              {
                uint64_t v308 = 0;
                goto LABEL_449;
              }
            }
            int v313 = v307 - 1;
            LODWORD(v314) = (v307 - 1) & ((v305 >> 4) ^ (v305 >> 9));
            v315 = (uint64_t **)&v306[2 * v314];
            v316 = *v315;
            if (*v315 != v305)
            {
              int v377 = 1;
              while (v316 != (uint64_t *)-4096)
              {
                int v378 = v314 + v377++;
                uint64_t v314 = v378 & v313;
                v316 = (uint64_t *)v306[2 * v314];
                if (v316 == v305)
                {
                  v315 = (uint64_t **)&v306[2 * v314];
                  goto LABEL_348;
                }
              }
              if (v688)
              {
                v306 = &v689;
                uint64_t v308 = 16;
              }
              else
              {
                v306 = v689;
                uint64_t v308 = v690;
              }
LABEL_449:
              v315 = (uint64_t **)&v306[2 * v308];
            }
LABEL_348:
            uint64_t v312 = *((unsigned int *)v315 + 2);
          }
          else
          {
            uint64_t v312 = 0;
          }
          int v317 = *((_DWORD *)v685 + v312);
          uint64_t v318 = *v305;
          if (*v305)
          {
            if (v688)
            {
              int v320 = 16;
              v319 = &v689;
            }
            else
            {
              v319 = v689;
              int v320 = v690;
              if (!v690)
              {
                uint64_t v321 = 0;
                goto LABEL_451;
              }
            }
            int v322 = v320 - 1;
            LODWORD(v323) = (v320 - 1) & ((v318 >> 4) ^ (v318 >> 9));
            v324 = &v319[2 * v323];
            uint64_t v325 = *v324;
            if (*v324 != v318)
            {
              int v379 = 1;
              while (v325 != -4096)
              {
                int v380 = v323 + v379++;
                uint64_t v323 = v380 & v322;
                uint64_t v325 = v319[2 * v323];
                if (v325 == v318)
                {
                  v324 = &v319[2 * v323];
                  goto LABEL_355;
                }
              }
              if (v688)
              {
                v319 = &v689;
                uint64_t v321 = 16;
              }
              else
              {
                v319 = v689;
                uint64_t v321 = v690;
              }
LABEL_451:
              v324 = &v319[2 * v321];
            }
LABEL_355:
            LODWORD(v318) = *((_DWORD *)v324 + 2);
          }
          uint64_t v326 = *(void *)&v296[48 * v317 + 16];
          unint64_t v327 = *((unsigned int *)v685 + v318);
          v328 = (uint64_t *)((char *)v685 + 4 * (v318 + 1));
          if ((int)v318 + 1 >= v686) {
            v328 = &v695;
          }
          unint64_t v329 = *(unsigned int *)v328;
          if (v691)
          {
            int v331 = 16;
            v330 = &v692;
LABEL_360:
            int v332 = v331 - 1;
            v333 = &v330[4 * (v332 & ((v326 >> 4) ^ (v326 >> 9)))];
            uint64_t v334 = *v333;
            if (*v333 != v326)
            {
              int v335 = 1;
              LODWORD(v336) = v332 & ((v326 >> 4) ^ (v326 >> 9));
              while (v334 != -4096)
              {
                int v337 = v336 + v335++;
                uint64_t v336 = v337 & v332;
                uint64_t v334 = v330[4 * v336];
                if (v334 == v326)
                {
                  v333 = &v330[4 * v336];
                  goto LABEL_365;
                }
              }
              if (v691)
              {
                v330 = &v692;
                uint64_t v385 = 16;
              }
              else
              {
                v330 = v692;
                uint64_t v385 = v693;
              }
              goto LABEL_461;
            }
          }
          else
          {
            v330 = v692;
            int v331 = v693;
            if (v693) {
              goto LABEL_360;
            }
            uint64_t v385 = 0;
LABEL_461:
            v333 = &v330[4 * v385];
            BOOL v109 = v650;
          }
LABEL_365:
          v338 = &v692;
          if (v691)
          {
            uint64_t v339 = 16;
          }
          else
          {
            v338 = v692;
            uint64_t v339 = v693;
          }
          if (&v338[4 * v339] == v333)
          {
            LODWORD(v344) = -1;
            uint64_t v341 = (uint64_t)v290;
          }
          else
          {
            uint64_t v340 = *((unsigned int *)v333 + 4);
            uint64_t v341 = (uint64_t)v290;
            if (v340)
            {
              v342 = (unsigned int *)v333[1];
              uint64_t v343 = 4 * v340;
              while (1)
              {
                unint64_t v344 = *v342;
                if (v344 >= v327 && v344 <= v329) {
                  break;
                }
                ++v342;
                v343 -= 4;
                if (!v343) {
                  goto LABEL_377;
                }
              }
            }
            else
            {
LABEL_377:
              LODWORD(v344) = -1;
            }
          }
          uint64_t v346 = v341 + (v295 << 6);
          unsigned int v347 = *(_DWORD *)(v346 + 16);
          if (v347 == 1)
          {
            uint64_t v348 = (uint64_t)v684[108];
            if ((*(unsigned char *)(v348 + 48 * **(unsigned int **)(v346 + 8) + 8) & 0x10) == 0)
            {
              v349 = v190;
              goto LABEL_382;
            }
            v349 = v190;
            BOOL v350 = 1;
          }
          else
          {
            v349 = v190;
            uint64_t v348 = (uint64_t)v684[108];
LABEL_382:
            BOOL v350 = v347 > 1;
          }
          int v351 = v630[12 * v295 + 8];
          char v352 = sub_1CC74CBC4(v341, v348, v344);
          v294 = v630;
          LODWORD(v289) = v634;
          uint64_t v293 = v632;
          uint64_t v288 = v631;
          uint64_t v190 = v349;
          uint64_t v281 = v629;
LABEL_390:
          v358 = (char *)&v294[12 * v317];
          BYTE4(v628) = (v194 & 0x1000) != 0;
          BYTE3(v628) = v352;
          BYTE2(v628) = v351;
          BYTE1(v628) = v350;
          LOBYTE(v628) = v294[12 * v289 + 8];
          uint64_t v110 = v654;
          (*(void (**)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v108 + 88))(v108, v281, **(void **)(v288 + 32), v654, v644, (v194 >> 2) & 1, v190[12 * v189 + 6]+ ((v194 >> 7) & 1)- v190[12 * v189 + 9]- *((_DWORD *)v358 + 6)+ *((_DWORD *)v358 + 9)+ 2 * (*((_DWORD *)v358 + 10) - v190[12 * v189 + 10])- ((*((unsigned __int16 *)v358 + 22) >> 7) & 1), v293, v628, v107);
          uint64_t v187 = v638;
          v193 = v640;
          LOWORD(v194) = *v640;
          uint64_t v191 = v647;
          if ((*v640 & 0x100) == 0) {
            goto LABEL_392;
          }
LABEL_391:
          (*(void (**)(uint64_t, void, uint64_t, void, uint64_t))(*(void *)v108 + 104))(v108, *(void *)&v191[48 * v189 + 16], v110, 0, v107);
          LOWORD(v194) = *v193;
          goto LABEL_392;
        }
        if (v288)
        {
          if (v688)
          {
            int v310 = 16;
            v309 = &v689;
          }
          else
          {
            v309 = v689;
            int v310 = v690;
            if (!v690)
            {
              uint64_t v311 = 0;
              goto LABEL_453;
            }
          }
          int v354 = v310 - 1;
          LODWORD(v355) = (v310 - 1) & ((v288 >> 4) ^ (v288 >> 9));
          v356 = &v309[2 * v355];
          uint64_t v357 = *v356;
          if (*v356 != v288)
          {
            int v381 = 1;
            while (v357 != -4096)
            {
              int v382 = v355 + v381++;
              uint64_t v355 = v382 & v354;
              uint64_t v357 = v309[2 * v355];
              if (v357 == v288)
              {
                v356 = &v309[2 * v355];
                goto LABEL_388;
              }
            }
            if (v688)
            {
              v309 = &v689;
              uint64_t v311 = 16;
            }
            else
            {
              v309 = v689;
              uint64_t v311 = v690;
            }
LABEL_453:
            v356 = &v309[2 * v311];
          }
LABEL_388:
          uint64_t v353 = *((unsigned int *)v356 + 2);
        }
        else
        {
          uint64_t v353 = 0;
        }
        LOBYTE(v351) = 0;
        char v352 = 0;
        BOOL v350 = 0;
        int v317 = *((_DWORD *)v685 + v353);
        goto LABEL_390;
      }
      uint64_t v110 = v654;
      if ((v194 & 0x100) != 0) {
        goto LABEL_391;
      }
LABEL_392:
      if (v194) {
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void))(*(void *)v108 + 96))(v108, *(void *)&v191[48 * v189 + 16], 1, v110, v107, 0);
      }
      v359 = &v651[12 * v189];
      unsigned int v362 = v359[5];
      v361 = v359 + 5;
      unsigned int v360 = v362;
      if (v362 != -1)
      {
        unsigned int v363 = (unsigned __int16)*v193;
        if ((v363 & 1) == 0
          && (int)(((v363 >> 7) & 1)
                 - *((_DWORD *)v672 + 12 * v360 + 6)
                 + *((_DWORD *)v672 + 12 * v360 + 9)
                 + v651[12 * v189 + 6]
                 - v651[12 * v189 + 9]
                 + 2 * (*((_DWORD *)v672 + 12 * v360 + 10) - v651[12 * v189 + 10])) >= 0)
        {
          v364 = *(void **)&v694[48 * v360 + 16];
          v365 = (void *)(*(uint64_t (**)(uint64_t, void, void *, uint64_t))(*(void *)v108 + 120))(v108, *(void *)&v647[48 * v189 + 16], v364, v107);
          if (v365)
          {
            v366 = (char *)v697 + 64 * (unint64_t)*v361;
            v706[0] = v365;
            v706[1] = v364;
            LODWORD(v707) = v189;
            unsigned int v367 = *((_DWORD *)v366 + 2);
            unint64_t v368 = *(void *)v366;
            if (v367 >= *((_DWORD *)v366 + 3))
            {
              BOOL v383 = v368 + 24 * v367 > (unint64_t)v706;
              if (v368 > (unint64_t)v706 || !v383) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v369 = v368 + 24 * *((unsigned int *)v366 + 2);
            long long v370 = *(_OWORD *)v706;
            *(void *)(v369 + 16) = v707;
            *(_OWORD *)uint64_t v369 = v370;
            ++*((_DWORD *)v366 + 2);
          }
        }
      }
      unsigned int v371 = (unsigned __int16)*v193;
      if ((v371 & 0x880) == 0)
      {
        v372 = v647;
        if ((v371 & 0x40) == 0) {
          goto LABEL_403;
        }
LABEL_402:
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v108 + 72))(v108, *(void *)&v372[48 * v189 + 16], v110, v107);
        unsigned int v371 = (unsigned __int16)*v193;
        goto LABEL_403;
      }
      v372 = v647;
      (*(void (**)(uint64_t, void, uint64_t, void, void, void, uint64_t))(*(void *)v108 + 152))(v108, *(void *)&v647[48 * v189 + 16], v110, v644, LOBYTE(v651[12 * v189 + 8]), (v371 >> 11) & 1, v107);
      unsigned int v371 = (unsigned __int16)*v193;
      if ((v371 & 0x40) != 0) {
        goto LABEL_402;
      }
LABEL_403:
      if ((v371 & 8) != 0) {
        (*(void (**)(uint64_t, void, uint64_t, void, uint64_t))(*(void *)v108 + 112))(v108, *(void *)&v372[48 * v189 + 16], v110, v651[12 * v189 + 6] + ((v371 >> 7) & 1) - (v651[12 * v189 + 9] + 2 * v651[12 * v189 + 10]), v107);
      }
      uint64_t v188 = v642 + 1;
      if (v642 + 1 == v636) {
        goto LABEL_469;
      }
    }
    uint64_t v201 = *(void *)&v191[48 * v189 + 16];
    uint64_t v202 = *(void *)(v187 + 248);
    int v203 = *(_DWORD *)(v187 + 264);
    uint64_t v633 = v201;
    if (v203)
    {
      uint64_t v204 = ((v201 >> 4) ^ (v201 >> 9)) & (v203 - 1);
      uint64_t v205 = *(void *)(v202 + 16 * v204);
      if (v201 == v205)
      {
LABEL_248:
        v208 = *(void **)(v202 + 16 * v204 + 8);
      }
      else
      {
        int v206 = 1;
        while (v205 != -4096)
        {
          int v207 = v204 + v206++;
          uint64_t v204 = v207 & (v203 - 1);
          uint64_t v205 = *(void *)(v202 + 16 * v204);
          if (v201 == v205) {
            goto LABEL_248;
          }
        }
        v208 = 0;
      }
    }
    else
    {
      v208 = 0;
    }
    unint64_t v209 = (char *)&v190[12 * v189];
    uint64_t v210 = *((unsigned int *)v209 + 3);
    uint64_t v211 = v694;
    if (v203)
    {
      uint64_t v212 = *(void *)&v694[48 * v210 + 16];
      unsigned int v213 = v203 - 1;
      uint64_t v214 = ((v212 >> 4) ^ (v212 >> 9)) & (v203 - 1);
      uint64_t v215 = *(void *)(v202 + 16 * v214);
      if (v212 == v215)
      {
LABEL_255:
        uint64_t v218 = *(void **)(v202 + 16 * v214 + 8);
      }
      else
      {
        int v216 = 1;
        while (v215 != -4096)
        {
          int v217 = v214 + v216++;
          uint64_t v214 = v217 & v213;
          uint64_t v215 = *(void *)(v202 + 16 * v214);
          if (v212 == v215) {
            goto LABEL_255;
          }
        }
        uint64_t v218 = 0;
      }
      BOOL v219 = v218 == v208;
    }
    else
    {
      BOOL v219 = v208 == 0;
    }
    int v220 = v219;
    uint64_t v221 = v672;
    uint64_t v222 = *((unsigned int *)v209 + 4);
    if (v220) {
      int v223 = *((_DWORD *)v209 + 4);
    }
    else {
      int v223 = *((_DWORD *)v209 + 3);
    }
    unint64_t v224 = sub_1CC74CAE8(v187, v208, *(void *)&v694[48 * v223 + 16]);
    if (!v224)
    {
      uint64_t v228 = 0;
      goto LABEL_272;
    }
    if (v688)
    {
      int v226 = 16;
      uint64_t v225 = &v689;
    }
    else
    {
      uint64_t v225 = v689;
      int v226 = v690;
      if (!v690)
      {
        uint64_t v227 = 0;
        goto LABEL_443;
      }
    }
    int v229 = v226 - 1;
    LODWORD(v230) = (v226 - 1) & ((v224 >> 4) ^ (v224 >> 9));
    uint64_t v231 = (uint64_t **)&v225[2 * v230];
    int v232 = *v231;
    if (*v231 == v224)
    {
LABEL_271:
      uint64_t v228 = *((unsigned int *)v231 + 2);
LABEL_272:
      int v233 = *((_DWORD *)v685 + v228);
      uint64_t v234 = *v224;
      if (!*v224) {
        goto LABEL_279;
      }
      if (v688)
      {
        int v236 = 16;
        BOOL v235 = &v689;
      }
      else
      {
        BOOL v235 = v689;
        int v236 = v690;
        if (!v690)
        {
          uint64_t v237 = 0;
          goto LABEL_445;
        }
      }
      int v238 = v236 - 1;
      LODWORD(v239) = (v236 - 1) & ((v234 >> 4) ^ (v234 >> 9));
      v240 = &v235[2 * v239];
      uint64_t v241 = *v240;
      if (*v240 == v234)
      {
LABEL_278:
        LODWORD(v234) = *((_DWORD *)v240 + 2);
LABEL_279:
        uint64_t v242 = *(void *)&v211[48 * v233 + 16];
        unint64_t v243 = *((unsigned int *)v685 + v234);
        uint64_t v244 = (uint64_t *)((char *)v685 + 4 * (v234 + 1));
        if ((int)v234 + 1 >= v686) {
          uint64_t v244 = &v695;
        }
        unint64_t v245 = *(unsigned int *)v244;
        if (v691)
        {
          int v247 = 16;
          unsigned int v246 = &v692;
        }
        else
        {
          unsigned int v246 = v692;
          int v247 = v693;
          if (!v693)
          {
            uint64_t v384 = 0;
            goto LABEL_458;
          }
        }
        int v248 = v247 - 1;
        v249 = &v246[4 * (v248 & ((v242 >> 4) ^ (v242 >> 9)))];
        uint64_t v250 = *v249;
        if (*v249 == v242) {
          goto LABEL_288;
        }
        int v251 = 1;
        LODWORD(v252) = v248 & ((v242 >> 4) ^ (v242 >> 9));
        while (v250 != -4096)
        {
          int v253 = v252 + v251++;
          uint64_t v252 = v253 & v248;
          uint64_t v250 = v246[4 * v252];
          if (v250 == v242)
          {
            v249 = &v246[4 * v252];
            goto LABEL_288;
          }
        }
        if (v691)
        {
          unsigned int v246 = &v692;
          uint64_t v384 = 16;
        }
        else
        {
          unsigned int v246 = v692;
          uint64_t v384 = v693;
        }
LABEL_458:
        v249 = &v246[4 * v384];
LABEL_288:
        uint64_t v254 = &v692;
        if (v691)
        {
          uint64_t v255 = 16;
        }
        else
        {
          uint64_t v254 = v692;
          uint64_t v255 = v693;
        }
        if (&v254[4 * v255] == v249 || (uint64_t v256 = *((unsigned int *)v249 + 4), !v256))
        {
LABEL_300:
          LODWORD(v259) = -1;
        }
        else
        {
          v257 = (unsigned int *)v249[1];
          uint64_t v258 = 4 * v256;
          while (1)
          {
            unint64_t v259 = *v257;
            if (v259 >= v243 && v259 <= v245) {
              break;
            }
            ++v257;
            v258 -= 4;
            if (!v258) {
              goto LABEL_300;
            }
          }
        }
        v261 = &v190[12 * v189];
        int v262 = v261[6];
        int v263 = v261[9];
        int v264 = v261[10];
        int v265 = (char *)&v221[12 * v233];
        int v266 = *((_DWORD *)v265 + 6);
        int v267 = *((_DWORD *)v265 + 9);
        int v268 = *((_DWORD *)v265 + 10);
        unsigned int v269 = *((unsigned __int16 *)v265 + 22);
        int v270 = &v679[0][64 * v210];
        unsigned int v271 = *((_DWORD *)v270 + 4);
        BOOL v272 = v271 == 1 && (*((unsigned char *)v684[108] + 48 * **((unsigned int **)v270 + 1) + 8) & 0x10) != 0 || v271 > 1;
        int v273 = v221[12 * v210 + 8];
        uint64_t v274 = &v679[0][64 * v222];
        unsigned int v275 = *((_DWORD *)v274 + 4);
        if (v275 == 1)
        {
          uint64_t v276 = (uint64_t)v684[108];
          if ((*(unsigned char *)(v276 + 48 * **((unsigned int **)v274 + 1) + 8) & 0x10) != 0)
          {
            int v277 = v222;
            BOOL v278 = 1;
            goto LABEL_311;
          }
          int v277 = v222;
        }
        else
        {
          int v277 = v222;
          uint64_t v276 = (uint64_t)v684[108];
        }
        BOOL v278 = v275 > 1;
LABEL_311:
        uint64_t v279 = v262 + ((v194 >> 7) & 1) - (v263 + v266) + v267 + 2 * (v268 - v264) - ((v269 >> 7) & 1);
        int v280 = v221[12 * v277 + 8];
        BYTE2(v628) = sub_1CC74CBC4((uint64_t)v679[0], v276, v259);
        BYTE1(v628) = v280;
        LOBYTE(v628) = v278;
        (*(void (**)(uint64_t, uint64_t, void, void, void, uint64_t, BOOL, void, uint64_t, uint64_t))(*(void *)v108 + 80))(v108, v633, v654, v644, (v194 >> 2) & 1, v279, v272, v273, v628, v107);
        uint64_t v187 = v638;
        v193 = v640;
        unsigned int v194 = (unsigned __int16)*v640;
        BOOL v109 = v650;
        uint64_t v191 = v647;
        goto LABEL_312;
      }
      int v375 = 1;
      while (v241 != -4096)
      {
        int v376 = v239 + v375++;
        uint64_t v239 = v376 & v238;
        uint64_t v241 = v235[2 * v239];
        if (v241 == v234)
        {
          v240 = &v235[2 * v239];
          goto LABEL_278;
        }
      }
      if (v688)
      {
        BOOL v235 = &v689;
        uint64_t v237 = 16;
      }
      else
      {
        BOOL v235 = v689;
        uint64_t v237 = v690;
      }
LABEL_445:
      v240 = &v235[2 * v237];
      goto LABEL_278;
    }
    int v373 = 1;
    while (v232 != (uint64_t *)-4096)
    {
      int v374 = v230 + v373++;
      uint64_t v230 = v374 & v229;
      int v232 = (uint64_t *)v225[2 * v230];
      if (v232 == v224)
      {
        uint64_t v231 = (uint64_t **)&v225[2 * v230];
        goto LABEL_271;
      }
    }
    if (v688)
    {
      uint64_t v225 = &v689;
      uint64_t v227 = 16;
    }
    else
    {
      uint64_t v225 = v689;
      uint64_t v227 = v690;
    }
LABEL_443:
    uint64_t v231 = (uint64_t **)&v225[2 * v227];
    goto LABEL_271;
  }
LABEL_469:
  v706[0] = (void *)1;
  uint64_t v386 = -6144;
  do
  {
    *(void **)((char *)&v710 + v386) = (void *)-4096;
    v386 += 192;
  }
  while (v386);
  if (v698)
  {
    uint64_t v387 = 0;
    v388 = (char *)v697;
    v639 = (char *)v697 + 64 * (unint64_t)v698;
    do
    {
      v389 = (char *)v672;
      v390 = (char *)v672 + 48 * v387;
      int v392 = *((_DWORD *)v390 + 9);
      v391 = v390 + 36;
      v394 = (int *)(v391 + 4);
      int v393 = *((_DWORD *)v391 + 1);
      unint64_t v395 = (v392 + 2 * v393);
      if (v392 + 2 * v393)
      {
        v648 = v388;
        v652 = v391;
        v643 = &v694[48 * v387 + 16];
        uint64_t v396 = sub_1CC74CC60((uint64_t)v706, (uint64_t)v643, v111, v112);
        v399 = v652;
        uint64_t v400 = v396;
        v713 = &v715;
        v714 = (void *)0x100000000;
        v716 = 0;
        uint64_t v401 = *(unsigned int *)(v396 + 8);
        uint64_t v645 = v387;
        if (v401 != v395)
        {
          v637 = v389;
          if (v401 <= v395)
          {
            if (*(_DWORD *)(v396 + 12) < v395)
            {
              if (*(void *)v396 <= (unint64_t)&v713 && *(void *)v396 + 32 * v401 > (unint64_t)&v713)
              {
                v431 = (char *)&v713 - *(void *)v396;
                sub_1CC74D300((char **)v396, v395);
                v406 = (void **)&v431[*(void *)v400];
              }
              else
              {
                sub_1CC74D300((char **)v396, v395);
                v406 = &v713;
              }
              v399 = v652;
            }
            else
            {
              v406 = &v713;
            }
            uint64_t v407 = *(unsigned int *)(v400 + 8);
            int v408 = v395 - v401;
            if (v395 != v401)
            {
              int v635 = v395 - v401;
              v409 = (void **)(*(void *)v400 + 32 * v407);
              uint64_t v410 = v401 - v395;
              do
              {
                *v409 = v409 + 2;
                v409[1] = (void *)0x100000000;
                unsigned int v411 = *((_DWORD *)v406 + 2);
                if (v411) {
                  BOOL v412 = v409 == v406;
                }
                else {
                  BOOL v412 = 1;
                }
                if (!v412)
                {
                  if (v411 >= 2) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v409 + 2, *v406, sizeof(void *));
                  *((_DWORD *)v409 + 2) = v411;
                  v399 = v652;
                }
                v409[3] = v406[3];
                v409 += 4;
                BOOL v153 = __CFADD__(v410++, 1);
              }
              while (!v153);
              LODWORD(v407) = *(_DWORD *)(v400 + 8);
              uint64_t v110 = v654;
              uint64_t v387 = v645;
              int v408 = v635;
            }
            int v405 = v407 + v408;
          }
          else
          {
            uint64_t v402 = *(void *)v396 + 32 * v401 - 16;
            uint64_t v403 = 32 * v395 - 32 * v401;
            do
            {
              v404 = *(void **)(v402 - 16);
              if ((void *)v402 != v404)
              {
                free(v404);
                v399 = v652;
              }
              v402 -= 32;
              v403 += 32;
            }
            while (v403);
            int v405 = v395;
            uint64_t v110 = v654;
          }
          *(_DWORD *)(v400 + 8) = v405;
          v389 = v637;
          if (v713 != &v715)
          {
            free(v713);
            v399 = v652;
          }
        }
        v413 = &v389[48 * v387];
        int v415 = *((_DWORD *)v413 + 6);
        v414 = v413 + 24;
        *(_DWORD *)(v400 + 176) = v415 - (*(_DWORD *)v399 + 2 * *v394) + ((*((unsigned __int16 *)v414 + 10) >> 7) & 1);
        unsigned int v416 = *((_DWORD *)v648 + 2);
        if (v416)
        {
          uint64_t v417 = *(void *)v648;
          uint64_t v418 = *(void *)v648 + 24 * v416;
          do
          {
            *(unsigned char *)(v400 + 180) = 1;
            uint64_t v419 = *(unsigned int *)(v417 + 16);
            v420 = (char *)v672 + 48 * v419;
            unsigned int v421 = *((unsigned __int16 *)v420 + 22);
            int v422 = *((_DWORD *)v420 + 6)
                 - (*((_DWORD *)v420 + 9)
                  + *(_DWORD *)v414)
                 + *(_DWORD *)v399
                 + ((v421 >> 7) & 1)
                 + 2 * (*v394 - *((_DWORD *)v420 + 10));
            if (v422)
            {
              if ((v421 & 0x80) != 0
                && v422 > (int)v395
                && (v694[48 * *((unsigned int *)v674 + (*((_DWORD *)v676 + v419) + 1)) + 8] & 0x10) != 0)
              {
                int v422 = v395;
              }
              uint64_t v423 = *(void *)v400 + 32 * (v395 - v422);
              unint64_t v424 = *(unsigned int *)(v423 + 8);
              if (v424 >= *(unsigned int *)(v423 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v423 + 8 * v424) = *(void *)v417;
              ++*(_DWORD *)(v423 + 8);
              BOOL v109 = v650;
              uint64_t v110 = v654;
            }
            v417 += 24;
          }
          while (v417 != v418);
        }
        v425 = (uint64_t *)sub_1CC74CC60((uint64_t)v706, (uint64_t)v643, v397, v398);
        LODWORD(v426) = 0;
        unsigned int v427 = 0;
        uint64_t v428 = *v425;
        uint64_t v387 = v645;
        v388 = v648;
        char v429 = 1;
        do
        {
          if (*(_DWORD *)(v428 + 32 * v427 + 8)) {
            uint64_t v426 = v427;
          }
          else {
            uint64_t v426 = v426;
          }
          if ((v429 & 1) != 0 && (int v430 = *v394) != 0)
          {
            *(_DWORD *)(v428 + 32 * v426 + 28) += v430;
            unsigned int v427 = v427 + 2 * v430 - 1;
          }
          else
          {
            ++*(_DWORD *)(v428 + 32 * v426 + 24);
          }
          char v429 = 0;
          ++v427;
        }
        while (v427 != v395);
      }
      v388 += 64;
      ++v387;
    }
    while (v388 != v639);
  }
  int v432 = (*(unsigned __int16 *)(*(void *)v109 + 18) >> 4) & 0x3FF;
  if (v432) {
    BOOL v433 = v432 == 8;
  }
  else {
    BOOL v433 = 1;
  }
  v434 = &v710;
  if (!v433 && v432 != 255)
  {
    int v554 = (int)v706[0];
    if (LODWORD(v706[0]) <= 1)
    {
      v555 = (void **)v706[1];
      unsigned int v556 = v707;
      if (LODWORD(v706[0])) {
        v557 = &v706[1];
      }
      else {
        v557 = (void **)v706[1];
      }
      if (LODWORD(v706[0])) {
        unsigned int v558 = 32;
      }
      else {
        unsigned int v558 = v707;
      }
      v559 = &v557[24 * v558];
      v560 = v559;
LABEL_821:
      BOOL v561 = v554 == 0;
      if (v554) {
        v562 = &v706[1];
      }
      else {
        v562 = v555;
      }
      if (v561) {
        unsigned int v563 = v556;
      }
      else {
        unsigned int v563 = 32;
      }
      v564 = &v562[24 * v563];
LABEL_828:
      while (v559 != v564)
      {
        if (*((unsigned char *)v559 + 188)) {
          BOOL v565 = *((_DWORD *)v559 + 46) == 0;
        }
        else {
          BOOL v565 = 0;
        }
        if (v565)
        {
          uint64_t v566 = *((unsigned int *)v559 + 4);
          if (v566)
          {
            uint64_t v567 = 0;
            v568 = v559[1];
            v569 = v568 + 6;
            int v570 = -1;
            do
            {
              if (*(unsigned char *)v569)
              {
                if (v570 == -1)
                {
                  int v570 = v567;
                }
                else
                {
                  --v568[8 * v570 + 6];
                  ++*v569;
                  int v570 = -1;
                }
              }
              ++v567;
              v569 += 8;
            }
            while (v566 != v567);
          }
        }
        v571 = v559 + 24;
        v559 = v560;
        if (v571 != v560)
        {
          v559 = v571;
          while (((unint64_t)*v559 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v559 += 24;
            if (v559 == v560)
            {
              v559 = v560;
              goto LABEL_828;
            }
          }
        }
      }
      goto LABEL_531;
    }
    v560 = &v710;
    v555 = &v706[1];
    if (((uint64_t)v706[0] & 1) == 0)
    {
      v555 = (void **)v706[1];
      if (!v707)
      {
        int v554 = 0;
        unsigned int v556 = 0;
        v559 = (void **)v706[1];
        v560 = (void **)v706[1];
        goto LABEL_821;
      }
      v560 = (void **)((char *)v706[1] + 192 * v707);
    }
    int v554 = (uint64_t)v706[0] & 1;
    while (((unint64_t)*v555 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v555 += 24;
      if (v555 == v560)
      {
        v555 = v560;
        break;
      }
    }
    v559 = v555;
    v555 = (void **)v706[1];
    unsigned int v556 = v707;
    goto LABEL_821;
  }
LABEL_531:
  char v435 = (char)v706[0];
  if (LODWORD(v706[0]) <= 1)
  {
    v436 = (void **)v706[1];
    int v437 = v707;
    if (LODWORD(v706[0])) {
      v438 = &v706[1];
    }
    else {
      v438 = (void **)v706[1];
    }
    if (LODWORD(v706[0])) {
      unsigned int v439 = 32;
    }
    else {
      unsigned int v439 = v707;
    }
    v440 = &v438[24 * v439];
    int v441 = (int)v706[0];
    v434 = v440;
    goto LABEL_547;
  }
  v436 = &v706[1];
  if ((uint64_t)v706[0])
  {
LABEL_542:
    int v441 = (uint64_t)v706[0] & 1;
    while (((unint64_t)*v436 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v436 += 24;
      if (v436 == v434)
      {
        v436 = v434;
        break;
      }
    }
    v440 = v436;
    v436 = (void **)v706[1];
    int v437 = v707;
    goto LABEL_547;
  }
  v436 = (void **)v706[1];
  int v441 = v707;
  if (v707)
  {
    v434 = (void **)((char *)v706[1] + 192 * v707);
    goto LABEL_542;
  }
  int v437 = 0;
  v440 = (void **)v706[1];
  v434 = (void **)v706[1];
LABEL_547:
  if (v441)
  {
    v436 = &v706[1];
    unsigned int v442 = 32;
  }
  else
  {
    unsigned int v442 = v437;
  }
  v646 = &v436[24 * v442];
  if (v440 != v646)
  {
    v641 = v434;
    do
    {
      v443 = (llvm::MachineBasicBlock *)*v440;
      if (*((unsigned char *)v440 + 188))
      {
        v713 = &v715;
        v714 = (void *)0x800000000;
        uint64_t v444 = *((unsigned int *)v440 + 4);
        if (v444)
        {
          v445 = 0;
          v446 = (const void **)v440[1];
          v653 = &v446[4 * v444];
          do
          {
            uint64_t v447 = *((unsigned int *)v446 + 2);
            int v448 = (int)v714;
            if ((unint64_t)v714 + v447 > HIDWORD(v714)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v447)
            {
              memcpy((char *)v713 + 8 * v714, *v446, 8 * v447);
              int v448 = (int)v714;
            }
            LODWORD(v714) = v448 + v447;
            if (*((_DWORD *)v446 + 6) || *((_DWORD *)v446 + 7))
            {
              uint64_t v449 = *((void *)v109 + 39);
              if (v449)
              {
                *((void *)v109 + 39) = *(void *)v449;
              }
              else
              {
                *((void *)v109 + 26) += 232;
                uint64_t v450 = *((void *)v109 + 16);
                if (((v450 + 7) & 0xFFFFFFFFFFFFFFF8) - v450 + 232 > *((void *)v109 + 17) - v450)
                {
                  unsigned int v466 = *((_DWORD *)v109 + 38) >> 7;
                  if (v466 >= 0x1E) {
                    LOBYTE(v466) = 30;
                  }
                  uint64_t v467 = 4096 << v466;
                  uint64_t v449 = (uint64_t)operator new(4096 << v466, (std::align_val_t)8uLL);
                  unint64_t v468 = *((unsigned int *)v109 + 38);
                  if (v468 >= *((unsigned int *)v109 + 39)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*((void *)v109 + 18) + 8 * v468) = v449;
                  ++*((_DWORD *)v109 + 38);
                  *((void *)v109 + 16) = v449 + 232;
                  *((void *)v109 + 17) = v449 + v467;
                }
                else
                {
                  uint64_t v449 = (v450 + 7) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)v109 + 16) = v449 + 232;
                }
              }
              *(void *)uint64_t v449 = 0;
              *(void *)(v449 + 8) = 0;
              *(void *)(v449 + 16) = 0;
              *(_DWORD *)(v449 + 24) = -1;
              *(void *)(v449 + 48) = (v449 + 48) | 4;
              *(void *)(v449 + 56) = v449 + 48;
              *(unsigned char *)(v449 + 144) = 0;
              *(_OWORD *)(v449 + 64) = 0u;
              *(_OWORD *)(v449 + 80) = 0u;
              *(_OWORD *)(v449 + 96) = 0u;
              *(_OWORD *)(v449 + 112) = 0u;
              *(_OWORD *)(v449 + 121) = 0u;
              *(void *)(v449 + 160) = 0;
              *(void *)(v449 + 168) = 0;
              *(void *)(v449 + 152) = 0;
              *(unsigned char *)(v449 + 176) = 0;
              *(_DWORD *)(v449 + 187) = 0;
              *(void *)(v449 + 180) = 0;
              *(void *)(v449 + 192) = 0;
              *(_DWORD *)(v449 + 199) = 0;
              *(void *)(v449 + 216) = 0;
              *(void *)(v449 + 224) = 0;
              *(void *)(v449 + 208) = 0;
              *(void *)(v449 + 32) = v109;
              *(void *)(v449 + 40) = v449;
              sub_1CC74D4CC(*((_OWORD **)v443 + 19), *((_OWORD **)v443 + 20), (void *)v449);
              if (v445)
              {
                llvm::MachineBasicBlock::addSuccessor(v445, (void *)v449, -1);
              }
              else
              {
                v451 = (char *)*((void *)v443 + 8);
                v452 = (char *)*((void *)v443 + 9);
                v718 = v720;
                uint64_t v719 = 0x400000000;
                unint64_t v453 = v452 - v451;
                if ((unint64_t)(v452 - v451) >= 0x21) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v454 = (llvm::MachineBasicBlock **)v720;
                if (v451 != v452)
                {
                  v455 = v720;
                  do
                  {
                    uint64_t v456 = *(void *)v451;
                    v451 += 8;
                    *v455++ = v456;
                  }
                  while (v451 != v452);
                  v454 = (llvm::MachineBasicBlock **)v718;
                }
                uint64_t v457 = (v453 >> 3);
                LODWORD(v719) = v457;
                BOOL v109 = v650;
                if (v457)
                {
                  uint64_t v458 = 8 * v457;
                  do
                  {
                    v459 = *v454++;
                    llvm::MachineBasicBlock::replaceSuccessor(v459, v443, (llvm::MachineBasicBlock *)v449);
                    v458 -= 8;
                  }
                  while (v458);
                  v454 = (llvm::MachineBasicBlock **)v718;
                }
                if (v454 != (llvm::MachineBasicBlock **)v720) {
                  free(v454);
                }
              }
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v649, v449);
              v460 = *(_OWORD **)v443;
              *(void *)uint64_t v449 = *(void *)v443;
              *(void *)(v449 + 8) = v443;
              *((void *)v460 + 1) = v449;
              *(void *)v443 = v449;
              if (v714)
              {
                v461 = (uint64_t *)v713;
                uint64_t v462 = 8 * v714;
                do
                {
                  uint64_t v463 = *v461++;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v108 + 128))(v108, v463, v449, v107);
                  v462 -= 8;
                }
                while (v462);
              }
              LODWORD(v714) = 0;
              if (*((_DWORD *)v446 + 7))
              {
                int v464 = 0;
                do
                {
                  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v108 + 104))(v108, v449, v654, 1, v107);
                  ++v464;
                }
                while (v464 != *((_DWORD *)v446 + 7));
              }
              uint64_t v465 = *((unsigned int *)v446 + 6);
              if (v465) {
                (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v108 + 96))(v108, v449, v465, v654, v107, 1);
              }
            }
            else
            {
              uint64_t v449 = (uint64_t)v445;
            }
            v446 += 4;
            v445 = (void *)v449;
          }
          while (v446 != v653);
        }
        else
        {
          uint64_t v449 = 0;
        }
        llvm::MachineBasicBlock::addSuccessor((void *)v449, v443, -1);
        if (v713 != &v715) {
          free(v713);
        }
        uint64_t v110 = v654;
      }
      else
      {
        uint64_t v469 = *((unsigned int *)v440 + 4);
        if (v469)
        {
          v470 = (unsigned int *)v440[1];
          v471 = &v470[8 * v469];
          do
          {
            if (v470[7])
            {
              int v472 = 0;
              do
              {
                (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, uint64_t, uint64_t))(*(void *)v108 + 104))(v108, v443, v110, 1, v107);
                ++v472;
              }
              while (v472 != v470[7]);
            }
            uint64_t v473 = v470[6];
            if (v473) {
              (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v108 + 96))(v108, v443, v473, v110, v107, 1);
            }
            v470 += 8;
          }
          while (v470 != v471);
        }
      }
      v474 = v440 + 24;
      v440 = v641;
      if (v474 != v641)
      {
        v440 = v474;
        while (((unint64_t)*v440 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v440 += 24;
          if (v440 == v641)
          {
            v440 = v641;
            break;
          }
        }
      }
    }
    while (v440 != v646);
    char v435 = (char)v706[0];
    int v437 = v707;
    int v441 = (uint64_t)v706[0] & 1;
  }
  if (v441 | v437)
  {
    v475 = v441 ? &v706[1] : (void **)v706[1];
    unsigned int v476 = v441 ? 32 : v437;
    if (v476)
    {
      v477 = &v475[24 * v476];
      do
      {
        if (((unint64_t)*v475 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v478 = (void **)v475[1];
          uint64_t v479 = *((unsigned int *)v475 + 4);
          if (v479)
          {
            uint64_t v480 = 4 * v479;
            do
            {
              v481 = (void **)v478[v480 - 4];
              if (&v478[v480 - 2] != v481) {
                free(v481);
              }
              v480 -= 4;
            }
            while (v480 * 8);
            v478 = (void **)v475[1];
          }
          if (v478 != v475 + 3) {
            free(v478);
          }
        }
        v475 += 24;
      }
      while (v475 != v477);
      char v435 = (char)v706[0];
    }
  }
  if ((v435 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v706[1], 8);
  }
  v718 = v720;
  uint64_t v719 = 0xA00000000;
  v706[0] = (void *)1;
  for (uint64_t k = 1; k != 65; k += 2)
    v706[k] = (void *)-4096;
  v713 = v717;
  v714 = v717;
  uint64_t v715 = 32;
  LODWORD(v716) = 0;
  uint64_t v483 = *((void *)v109 + 41);
  if ((uint64_t *)v483 != v649)
  {
    while (1)
    {
      v484 = (char *)v714;
      uint64_t v485 = HIDWORD(v715);
      if (v714 != v713)
      {
        unsigned int v489 = v715;
        goto LABEL_651;
      }
      if (!HIDWORD(v715)) {
        break;
      }
      v486 = 0;
      uint64_t v487 = 8 * HIDWORD(v715);
      v488 = (uint64_t *)v714;
      while (*v488 != v483)
      {
        if (*v488 == -2) {
          v486 = v488;
        }
        ++v488;
        v487 -= 8;
        if (!v487)
        {
          if (!v486) {
            goto LABEL_648;
          }
          uint64_t *v486 = v483;
          LODWORD(v716) = v716 - 1;
          break;
        }
      }
LABEL_672:
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v107 + 264))(v107, v483, 0);
      if (v483 + 48 != (*(void *)(v483 + 48) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_736;
      }
      v499 = *(llvm::MachineBasicBlock ***)(v483 + 88);
      if (((*(void *)(v483 + 96) - (void)v499) & 0x7FFFFFFF8) != 8) {
        goto LABEL_736;
      }
      v500 = *v499;
      v501 = *(char **)(v483 + 64);
      v502 = *(char **)(v483 + 72);
      v710 = v712;
      uint64_t v711 = 0x400000000;
      unint64_t v503 = v502 - v501;
      if ((unint64_t)(v502 - v501) >= 0x21) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v504 = (uint64_t *)v712;
      if (v501 != v502)
      {
        v505 = v712;
        do
        {
          uint64_t v506 = *(void *)v501;
          v501 += 8;
          *v505++ = v506;
        }
        while (v501 != v502);
        v504 = (uint64_t *)v710;
      }
      int v507 = *(unsigned __int8 *)(v483 + 185);
      char v508 = *(unsigned char *)(v483 + 185) != 0;
      uint64_t v509 = (v503 >> 3);
      LODWORD(v711) = v509;
      if (v509)
      {
        int v510 = v715 - 1;
        v511 = v504;
        while (1)
        {
          uint64_t v512 = *v511;
          if (*v511 == v483) {
            break;
          }
          if (v714 == v713)
          {
            if (HIDWORD(v715))
            {
              uint64_t v513 = 0;
              while (*(void *)((char *)v714 + v513) != v512)
              {
                v513 += 8;
                if (8 * HIDWORD(v715) == v513)
                {
                  unsigned int v514 = HIDWORD(v715);
                  goto LABEL_702;
                }
              }
              v523 = (char *)v714 + v513;
              unsigned int v514 = HIDWORD(v715);
              v524 = v714;
            }
            else
            {
              unsigned int v514 = 0;
LABEL_702:
              v524 = v714;
              v523 = (char *)v714 + 8 * HIDWORD(v715);
            }
          }
          else
          {
            unsigned int v515 = v510 & ((v512 >> 4) ^ (v512 >> 9));
            v516 = (char *)v714 + 8 * v515;
            uint64_t v517 = *(void *)v516;
            if (*(void *)v516 == -1)
            {
              v518 = 0;
LABEL_704:
              if (v518) {
                v516 = v518;
              }
              uint64_t v522 = *(void *)v516;
            }
            else
            {
              v518 = 0;
              int v519 = 1;
              while (v517 != v512)
              {
                if (v518) {
                  BOOL v520 = 0;
                }
                else {
                  BOOL v520 = v517 == -2;
                }
                if (v520) {
                  v518 = v516;
                }
                unsigned int v521 = v515 + v519++;
                unsigned int v515 = v521 & v510;
                v516 = (char *)v714 + 8 * (v521 & v510);
                uint64_t v517 = *(void *)v516;
                if (*(void *)v516 == -1) {
                  goto LABEL_704;
                }
              }
              uint64_t v522 = *v511;
            }
            if (v522 == v512) {
              v523 = v516;
            }
            else {
              v523 = (char *)v714 + 8 * v715;
            }
            unsigned int v514 = HIDWORD(v715);
            v524 = v713;
          }
          if (v714 != v524) {
            unsigned int v514 = v715;
          }
          v508 |= v523 == (char *)v714 + 8 * v514;
          ++v511;
          if (v523 == (char *)v714 + 8 * v514 || v511 == &v504[v509])
          {
            if (v508) {
              break;
            }
            uint64_t v526 = 8 * v509;
            do
            {
              v527 = (llvm::MachineBasicBlock *)*v504++;
              llvm::MachineBasicBlock::replaceSuccessor(v527, (llvm::MachineBasicBlock *)v483, v500);
              v526 -= 8;
            }
            while (v526);
            goto LABEL_725;
          }
        }
      }
      else if (!v507)
      {
LABEL_725:
        sub_1CC74D4CC(*(_OWORD **)(v483 + 152), *(_OWORD **)(v483 + 160), v500);
        llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)v483, v500, 0);
        if (v719 >= (unint64_t)HIDWORD(v719)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)&v718[8 * v719] = v483;
        LODWORD(v719) = v719 + 1;
        v666 = 0;
        char v529 = sub_1CC74D69C((uint64_t)v706, v483, &v666);
        v530 = v666;
        if ((v529 & 1) == 0)
        {
          if ((uint64_t)v706[0]) {
            unsigned int v531 = 32;
          }
          else {
            unsigned int v531 = v707;
          }
          if (4 * (LODWORD(v706[0]) >> 1) + 4 >= 3 * v531)
          {
            v531 *= 2;
          }
          else if (v531 + ~(LODWORD(v706[0]) >> 1) - HIDWORD(v706[0]) > v531 >> 3)
          {
            goto LABEL_731;
          }
          sub_1CD633CF4((uint64_t)v706, v531);
          v666 = 0;
          sub_1CC74D69C((uint64_t)v706, v483, &v666);
          v530 = v666;
LABEL_731:
          LODWORD(v706[0]) += 2;
          if (*v530 != -4096) {
            --HIDWORD(v706[0]);
          }
          uint64_t *v530 = v483;
          v530[1] = 0;
        }
        v530[1] = (uint64_t)v500;
        v528 = v710;
        if (v710 != v712) {
          goto LABEL_735;
        }
        goto LABEL_736;
      }
      if (v504 != (uint64_t *)v712)
      {
        v528 = v504;
LABEL_735:
        free(v528);
      }
LABEL_736:
      uint64_t v483 = *(void *)(v483 + 8);
      if ((uint64_t *)v483 == v649) {
        goto LABEL_749;
      }
    }
LABEL_648:
    unsigned int v489 = v715;
    if (HIDWORD(v715) < v715)
    {
      ++HIDWORD(v715);
      *((void *)v714 + v485) = v483;
      goto LABEL_672;
    }
LABEL_651:
    if (3 * v489 <= 4 * (HIDWORD(v715) - (int)v716))
    {
      if (v489 >= 0x40) {
        v489 *= 2;
      }
      else {
        unsigned int v489 = 128;
      }
    }
    else if (v489 - HIDWORD(v715) >= v489 >> 3)
    {
      goto LABEL_653;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v713, v489);
    unsigned int v489 = v715;
    v484 = (char *)v714;
LABEL_653:
    unsigned int v490 = v489 - 1;
    unsigned int v491 = (v489 - 1) & ((v483 >> 4) ^ (v483 >> 9));
    v492 = &v484[8 * v491];
    uint64_t v493 = *(void *)v492;
    if (*(void *)v492 == -1)
    {
      v494 = 0;
LABEL_665:
      if (v494) {
        v498 = v494;
      }
      else {
        v498 = (uint64_t *)v492;
      }
      if (*v498 != v483)
      {
        if (*v498 == -2) {
          LODWORD(v716) = v716 - 1;
        }
        else {
          ++HIDWORD(v715);
        }
        uint64_t *v498 = v483;
      }
    }
    else
    {
      v494 = 0;
      int v495 = 1;
      while (v493 != v483)
      {
        if (v494) {
          BOOL v496 = 0;
        }
        else {
          BOOL v496 = v493 == -2;
        }
        if (v496) {
          v494 = (uint64_t *)v492;
        }
        unsigned int v497 = v491 + v495++;
        unsigned int v491 = v497 & v490;
        v492 = &v484[8 * (v497 & v490)];
        uint64_t v493 = *(void *)v492;
        if (*(void *)v492 == -1) {
          goto LABEL_665;
        }
      }
    }
    goto LABEL_672;
  }
LABEL_749:
  uint64_t v655 = v698;
  if (v698)
  {
    uint64_t v532 = 0;
    do
    {
      v533 = (char *)v697 + 64 * v532;
      unsigned int v534 = *((_DWORD *)v533 + 2);
      if (v534)
      {
        v535 = *(void **)v533;
        uint64_t v536 = *(void *)v533 + 24 * v534;
        do
        {
          uint64_t v537 = *v535;
          uint64_t v538 = (*(uint64_t (**)(uint64_t, void))(*(void *)v108 + 136))(v108, *v535);
          v539 = sub_1CC74D600((uint64_t)v706, v538);
          if ((uint64_t)v706[0]) {
            v540 = &v706[1];
          }
          else {
            v540 = (void **)v706[1];
          }
          unsigned int v541 = v707;
          if ((uint64_t)v706[0]) {
            unsigned int v541 = 32;
          }
          v542 = (uint64_t *)&v540[2 * v541];
          while (v542 != v539)
          {
            uint64_t v538 = v539[1];
            v539 = sub_1CC74D600((uint64_t)v706, v538);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v108 + 128))(v108, v537, v538, v107);
          if (((*(void *)(v538 + 72) - *(void *)(v538 + 64)) & 0x7FFFFFFF8) == 8)
          {
            uint64_t v543 = *(void *)(v538 + 16);
            if (!v543 || (*(_WORD *)(v543 + 18) & 0x7FFF) == 0) {
              *(unsigned char *)(v538 + 184) = 1;
            }
          }
          v535 += 3;
        }
        while (v535 != (void *)v536);
      }
      ++v532;
    }
    while (v532 != v655);
  }
  if (v719)
  {
    v544 = (uint64_t **)v718;
    uint64_t v545 = 8 * v719;
    do
    {
      v546 = *v544++;
      uint64_t v547 = v546[4];
      int v548 = v547 + 320;
      *(void *)(*(void *)(v547 + 104) + 8 * *((unsigned int *)v546 + 6)) = 0;
      *((_DWORD *)v546 + 6) = -1;
      uint64_t v549 = *v546;
      v550 = (void *)v546[1];
      void *v550 = *v546;
      *(void *)(v549 + 8) = v550;
      uint64_t *v546 = 0;
      v546[1] = 0;
      llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v548, (llvm::MachineBasicBlock *)v546);
      v545 -= 8;
    }
    while (v545);
  }
  llvm::MachineFunction::RenumberBlocks(v650, 0);
  if (v714 != v713) {
    free(v714);
  }
  if (((uint64_t)v706[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v706[1], 8);
  }
  if (v718 != v720) {
    free(v718);
  }
  v551 = (char *)v697;
  if (v698)
  {
    unint64_t v552 = (unint64_t)v698 << 6;
    do
    {
      v553 = *(char **)&v551[v552 - 64];
      if (&v551[v552 - 48] != v553) {
        free(v553);
      }
      v552 -= 64;
    }
    while (v552);
    v551 = (char *)v697;
  }
  if (v551 != v699) {
    free(v551);
  }
  if (v701[0] != v702) {
    free(v701[0]);
  }
  if (v703[0] != v704) {
    free(v703[0]);
  }
  if (*((void *)&v662 + 1) != (void)v662) {
    free(*((void **)&v662 + 1));
  }
  if (v676 != v677) {
    free(v676);
  }
  if (v674 != &v675) {
    free(v674);
  }
  if (v672 != &v673) {
    free(v672);
  }
  if (v668 != &v670) {
    free(v668);
  }
  if (v681 != v683) {
    free(v681);
  }
  sub_1CBBF3A28(v679);
  sub_1CBBF3AC0(&v694);
  sub_1CBBF3B40((uint64_t)&v691);
  if ((v688 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v689, 8);
  }
  if (v685 != v687) {
    free(v685);
  }
  return 1;
}

void sub_1CC74AEC8()
{
}

void *sub_1CC74AEDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F261D420;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC74AF24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261D420;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC74AF50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 40))();
}

void sub_1CC74AF7C(uint64_t *a1, uint64_t a2)
{
  sub_1CD632B50((char *)v105, a2, a1[1]);
  uint64_t v4 = (llvm::raw_ostream *)*a1;
  uint64_t v5 = *(void *)(*a1 + 32);
  if ((unint64_t)(*(void *)(*a1 + 24) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 101;
    *(_DWORD *)uint64_t v5 = 1685016073;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  uint64_t v6 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 7uLL)
  {
    void *v6 = 0x3D65706168735B20;
    *((void *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  uint64_t v7 = (llvm::raw_ostream *)*a1;
  uint64_t v8 = *(void *)(*a1 + 32);
  unint64_t v9 = *(void *)(*a1 + 24) - v8;
  if (*((unsigned char *)a1 + 16))
  {
    if (v9 <= 4)
    {
      uint64_t v10 = "none,";
      size_t v11 = 5;
      goto LABEL_10;
    }
    *(unsigned char *)(v8 + 4) = 44;
    *(_DWORD *)uint64_t v8 = 1701736302;
    uint64_t v89 = *((void *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      uint64_t v10 = "record,";
      size_t v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)uint64_t v8 = 1868785010;
    uint64_t v89 = *((void *)v7 + 4) + 7;
  }
  *((void *)v7 + 4) = v89;
LABEL_11:
  if (v106 >= 0) {
    size_t v12 = v106 & 0x7F;
  }
  else {
    size_t v12 = (size_t)v105[1];
  }
  if (v12)
  {
    if (v106 >= 0) {
      uint64_t v13 = (const char *)v105;
    }
    else {
      uint64_t v13 = (const char *)v105[0];
    }
    int v14 = llvm::raw_ostream::write((llvm::raw_ostream *)*a1, v13, v12);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *uint64_t v15 = 44;
      ++*((void *)v14 + 4);
    }
  }
  uint64_t v16 = (llvm::raw_ostream *)*a1;
  uint64_t v17 = *(void *)(*a1 + 32);
  if ((unint64_t)(*(void *)(*a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)uint64_t v17 = 1700946284;
    *((void *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*((unsigned char *)a1 + 16))
  {
    uint64_t v21 = *(unsigned int ***)a2;
    uint64_t v22 = *(unsigned int *)(*(void *)a2 + 8);
    if (v22)
    {
      unint64_t v25 = 0;
      int v26 = *v21;
      uint64_t v27 = (uint64_t)&(*v21)[v22];
      uint64_t v28 = v21[108];
      uint64_t v29 = 4 * v22;
      while (1)
      {
        unsigned int v30 = v26[v25 / 4];
        int v31 = &v28[12 * v30];
        if (v31 != (unsigned int *)a2 && *(void *)(a2 + 16) == *(void *)&v28[12 * v30 + 4]) {
          break;
        }
        v25 += 4;
        if (v29 == v25)
        {
          int v31 = 0;
          break;
        }
      }
      BOOL v23 = v31 != 0;
      unsigned int v24 = *(_DWORD *)(a2 + 32);
      do
      {
        while (1)
        {
          unsigned int v32 = *v26;
          if (&v28[12 * *v26] != (unsigned int *)a2) {
            break;
          }
          if (++v26 == (unsigned int *)v27) {
            goto LABEL_41;
          }
        }
        ++v26;
        BOOL v33 = *(void *)(a2 + 16) == *(void *)&v28[12 * v32 + 4] || v26 == (unsigned int *)v27;
      }
      while (!v33);
    }
    else
    {
      BOOL v23 = 0;
      unsigned int v24 = *(_DWORD *)(a2 + 32);
    }
LABEL_41:
    if (v24)
    {
      int v35 = 0;
      uint64_t v36 = *(void *)(a2 + 24);
      uint64_t v37 = v36 + 4 * v24;
      do
      {
        v36 += 4 * !v23;
        unsigned int v24 = v35 + 1;
        BOOL v34 = v36 != v37;
        if (v36 == v37) {
          break;
        }
        BOOL v23 = 0;
        BOOL v33 = v35++ == 63;
      }
      while (!v33);
    }
    else
    {
      BOOL v34 = 0;
    }
    if (v24 <= 1) {
      int v38 = 1;
    }
    else {
      int v38 = v24;
    }
    unint64_t v39 = (llvm::raw_ostream *)*a1;
    unsigned int v40 = *(void **)(*a1 + 32);
    if (*(void *)(*a1 + 24) - (void)v40 > 0x30uLL)
    {
      qmemcpy(v40, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      int v41 = (void *)(*((void *)v39 + 4) + 49);
      *((void *)v39 + 4) = v41;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      int v41 = (void *)*((void *)v39 + 4);
    }
    unint64_t v42 = (v38 + v34);
    if (*((void *)v39 + 3) - (void)v41 > 0x2EuLL)
    {
      qmemcpy(v41, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((void *)v39 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v39, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1CD098D14(v39, v42, 0, 0, 0);
    uint64_t v43 = (_WORD *)*((void *)v39 + 4);
    if (*((void *)v39 + 3) - (void)v43 <= 1uLL)
    {
      uint64_t v20 = "\">";
      unsigned int v18 = v39;
      goto LABEL_56;
    }
    *uint64_t v43 = 15906;
    *((void *)v39 + 4) += 2;
  }
  else
  {
    unsigned int v18 = (llvm::raw_ostream *)*a1;
    int v19 = *(_WORD **)(*a1 + 32);
    if (*(void *)(*a1 + 24) - (void)v19 <= 1uLL)
    {
      uint64_t v20 = "\"{";
LABEL_56:
      llvm::raw_ostream::write(v18, v20, 2uLL);
      goto LABEL_57;
    }
    *int v19 = 31522;
    *((void *)v18 + 4) += 2;
  }
LABEL_57:
  uint64_t v44 = (llvm::raw_ostream *)*a1;
  if (*((unsigned char *)a1 + 16))
  {
    sub_1CD632C30((uint64_t)&__p, a2);
    if (v96 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    if (v96 >= 0) {
      size_t v49 = HIBYTE(v96) & 0x7F;
    }
    else {
      size_t v49 = v95;
    }
    llvm::raw_ostream::write(v44, p_p, v49);
    uint64_t v50 = *((void *)v44 + 4);
    if ((unint64_t)(*((void *)v44 + 3) - v50) > 4)
    {
      *(unsigned char *)(v50 + 4) = 62;
      *(_DWORD *)uint64_t v50 = 1685335868;
      *((void *)v44 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v44, "</td>", 5uLL);
    }
    if (SHIBYTE(v96) < 0)
    {
      int v47 = __p;
      goto LABEL_78;
    }
  }
  else
  {
    sub_1CD632C30((uint64_t)v103, a2);
    llvm::DOT::EscapeString((char *)v103, (uint64_t)&__p);
    if (v96 >= 0) {
      uint64_t v45 = (const char *)&__p;
    }
    else {
      uint64_t v45 = (const char *)__p;
    }
    if (v96 >= 0) {
      size_t v46 = HIBYTE(v96) & 0x7F;
    }
    else {
      size_t v46 = v95;
    }
    llvm::raw_ostream::write(v44, v45, v46);
    if (SHIBYTE(v96) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v104) < 0)
    {
      int v47 = v103[0];
LABEL_78:
      operator delete(v47);
    }
  }
  v103[0] = 0;
  v103[1] = 0;
  uint64_t v104 = 0;
  LODWORD(v95) = 0;
  char v99 = 0;
  uint64_t v100 = 0;
  size_t v102 = v103;
  int v101 = 0;
  __p = &unk_1F2646F30;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  sub_1CD632D58((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&__p, (unsigned int *)a2);
  unint64_t v51 = (llvm::raw_ostream *)*a1;
  int v52 = *(_WORD **)(*a1 + 32);
  unint64_t v53 = *(void *)(*a1 + 24) - (void)v52;
  if (*((unsigned char *)a1 + 16))
  {
    if (v53 <= 0xD)
    {
      unsigned int v54 = "</tr></table>>";
      size_t v55 = 14;
LABEL_84:
      llvm::raw_ostream::write(v51, v54, v55);
      goto LABEL_85;
    }
    qmemcpy(v52, "</tr></table>>", 14);
    uint64_t v88 = *((void *)v51 + 4) + 14;
  }
  else
  {
    if (v53 <= 1)
    {
      unsigned int v54 = "}\"";
      size_t v55 = 2;
      goto LABEL_84;
    }
    *int v52 = 8829;
    uint64_t v88 = *((void *)v51 + 4) + 2;
  }
  *((void *)v51 + 4) = v88;
LABEL_85:
  uint64_t v56 = (llvm::raw_ostream *)*a1;
  uint64_t v57 = *(void *)(*a1 + 32);
  if ((unint64_t)(*(void *)(*a1 + 24) - v57) > 2)
  {
    *(unsigned char *)(v57 + 2) = 10;
    *(_WORD *)uint64_t v57 = 15197;
    *((void *)v56 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v56, "];\n", 3uLL);
  }
  int v58 = *(unsigned int ***)a2;
  uint64_t v59 = *(void *)(a2 + 24);
  uint64_t v60 = *(unsigned int *)(*(void *)a2 + 8);
  if (v60)
  {
    unint64_t v61 = 0;
    uint64_t v62 = *v58;
    uint64_t v63 = (uint64_t)&(*v58)[v60];
    uint64_t v64 = v58[108];
    uint64_t v65 = 4 * v60;
    while (1)
    {
      unsigned int v66 = v62[v61 / 4];
      uint64_t v67 = &v64[12 * v66];
      if (v67 != (unsigned int *)a2 && *(void *)(a2 + 16) == *(void *)&v64[12 * v66 + 4]) {
        break;
      }
      v61 += 4;
      if (v65 == v61)
      {
        uint64_t v67 = 0;
        break;
      }
    }
    BOOL v68 = v67 != 0;
    unsigned int v69 = *(_DWORD *)(a2 + 32);
    do
    {
      while (1)
      {
        unsigned int v70 = *v62;
        if (&v64[12 * *v62] != (unsigned int *)a2) {
          break;
        }
        if (++v62 == (unsigned int *)v63) {
          goto LABEL_104;
        }
      }
      ++v62;
    }
    while (*(void *)(a2 + 16) != *(void *)&v64[12 * v70 + 4] && v62 != (unsigned int *)v63);
  }
  else
  {
    BOOL v68 = 0;
    unsigned int v69 = *(_DWORD *)(a2 + 32);
  }
LABEL_104:
  uint64_t v72 = v59 + 4 * v69;
  if (v69)
  {
    for (int i = 0; i != 64; ++i)
    {
      if (v68)
      {
        uint64_t v74 = *((unsigned int *)v58 + 2);
        if (v74)
        {
          char v75 = *v58;
          uint64_t v76 = (uint64_t)&(*v58)[v74];
          unsigned int v77 = v58[108];
          do
          {
            while (1)
            {
              unsigned int v78 = *v75;
              if (&v77[12 * *v75] != (unsigned int *)a2) {
                break;
              }
              if (++v75 == (unsigned int *)v76) {
                goto LABEL_117;
              }
            }
            ++v75;
          }
          while (*(void *)(a2 + 16) != *(void *)&v77[12 * v78 + 4] && v75 != (unsigned int *)v76);
        }
      }
LABEL_117:
      BOOL v80 = !v68;
      v92[0] = v59;
      v92[1] = v58;
      v92[2] = a2;
      BOOL v93 = v68;
      sub_1CD632E8C((llvm::raw_ostream **)a1, a2, (uint64_t)v92);
      BOOL v68 = 0;
      v59 += 4 * v80;
      if (v59 == v72) {
        break;
      }
    }
  }
  for (; v59 != v72; v59 += 4 * v87)
  {
    if (v68)
    {
      uint64_t v81 = *((unsigned int *)v58 + 2);
      if (v81)
      {
        unint64_t v82 = *v58;
        uint64_t v83 = (uint64_t)&(*v58)[v81];
        unint64_t v84 = v58[108];
        do
        {
          while (1)
          {
            unsigned int v85 = *v82;
            if (&v84[12 * *v82] != (unsigned int *)a2) {
              break;
            }
            if (++v82 == (unsigned int *)v83) {
              goto LABEL_131;
            }
          }
          ++v82;
        }
        while (*(void *)(a2 + 16) != *(void *)&v84[12 * v85 + 4] && v82 != (unsigned int *)v83);
      }
    }
LABEL_131:
    BOOL v87 = !v68;
    v90[0] = v59;
    v90[1] = v58;
    v90[2] = a2;
    BOOL v91 = v68;
    sub_1CD632E8C((llvm::raw_ostream **)a1, a2, (uint64_t)v90);
    BOOL v68 = 0;
  }
  __p = &unk_1F2646B98;
  if (v101 == 1 && v96) {
    MEMORY[0x1D25D9CB0](v96, 0x1000C8077774924);
  }
  if (SHIBYTE(v104) < 0) {
    operator delete(v103[0]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
}

void sub_1CC74B86C(llvm::raw_ostream **a1, unint64_t a2)
{
  sub_1CD632B50((char *)v97, *(void *)(*((void *)a1[1] + 267) + 864) + 48 * *(unsigned int *)(a2 + 32), *((void *)a1[1] + 267));
  uint64_t v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 101;
    *(_DWORD *)uint64_t v5 = 1685016073;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  uint64_t v6 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 7uLL)
  {
    void *v6 = 0x3D65706168735B20;
    *((void *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  uint64_t v7 = *a1;
  uint64_t v8 = *((void *)*a1 + 4);
  unint64_t v9 = *((void *)*a1 + 3) - v8;
  if (*((unsigned char *)a1 + 16))
  {
    if (v9 <= 4)
    {
      uint64_t v10 = "none,";
      size_t v11 = 5;
      goto LABEL_10;
    }
    *(unsigned char *)(v8 + 4) = 44;
    *(_DWORD *)uint64_t v8 = 1701736302;
    uint64_t v70 = *((void *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      uint64_t v10 = "record,";
      size_t v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)uint64_t v8 = 1868785010;
    uint64_t v70 = *((void *)v7 + 4) + 7;
  }
  *((void *)v7 + 4) = v70;
LABEL_11:
  if (v98 >= 0) {
    size_t v12 = v98 & 0x7F;
  }
  else {
    size_t v12 = (size_t)v97[1];
  }
  if (v12)
  {
    if (v98 >= 0) {
      uint64_t v13 = (const char *)v97;
    }
    else {
      uint64_t v13 = (const char *)v97[0];
    }
    int v14 = llvm::raw_ostream::write(*a1, v13, v12);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *uint64_t v15 = 44;
      ++*((void *)v14 + 4);
    }
  }
  uint64_t v16 = *a1;
  uint64_t v17 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)uint64_t v17 = 1700946284;
    *((void *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*((unsigned char *)a1 + 16))
  {
    sub_1CD632FFC((uint64_t)&v91, a2);
    sub_1CD633110((uint64_t)v87, a2);
    unsigned int v21 = 0;
    int v22 = DWORD2(v96);
    uint64_t v23 = v91;
    uint64_t v24 = v95;
    int v25 = BYTE8(v92);
    int v26 = BYTE8(v92);
    uint64_t v27 = v95;
    uint64_t v28 = v91;
    int v29 = DWORD2(v96);
    while (1)
    {
      if (v29 == v90)
      {
        BOOL v30 = v28 == *(void *)v87 && v27 == v89;
        int v31 = !v30;
        if (v30 || v21 == 64)
        {
          BYTE8(v92) = v25;
          *(void *)&long long v91 = v23;
          DWORD2(v96) = v22;
          *(void *)&long long v95 = v24;
          if (v21 <= 1) {
            int v38 = 1;
          }
          else {
            int v38 = v21;
          }
LABEL_64:
          unint64_t v39 = *a1;
          unsigned int v40 = (void *)*((void *)*a1 + 4);
          if (*((void *)*a1 + 3) - (void)v40 > 0x30uLL)
          {
            qmemcpy(v40, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
            int v41 = (void *)(*((void *)v39 + 4) + 49);
            *((void *)v39 + 4) = v41;
          }
          else
          {
            llvm::raw_ostream::write(*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
            int v41 = (void *)*((void *)v39 + 4);
          }
          unint64_t v42 = (v38 + v31);
          if (*((void *)v39 + 3) - (void)v41 > 0x2EuLL)
          {
            qmemcpy(v41, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
            *((void *)v39 + 4) += 47;
          }
          else
          {
            llvm::raw_ostream::write(v39, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
          }
          sub_1CD098D14(v39, v42, 0, 0, 0);
          uint64_t v43 = (_WORD *)*((void *)v39 + 4);
          if (*((void *)v39 + 3) - (void)v43 > 1uLL)
          {
            *uint64_t v43 = 15906;
            *((void *)v39 + 4) += 2;
          }
          else
          {
            uint64_t v20 = "\">";
            unsigned int v18 = v39;
LABEL_70:
            llvm::raw_ostream::write(v18, v20, 2uLL);
          }
          goto LABEL_71;
        }
      }
      else if (v21 == 64)
      {
        BYTE8(v92) = v25;
        *(void *)&long long v91 = v23;
        DWORD2(v96) = v22;
        int v31 = 1;
        int v38 = 64;
        *(void *)&long long v95 = v24;
        goto LABEL_64;
      }
      uint64_t v32 = v28 + 4;
      if (v26) {
        uint64_t v33 = v23;
      }
      else {
        uint64_t v33 = v28 + 4;
      }
      if (v26) {
        int v34 = 0;
      }
      else {
        int v34 = v25;
      }
      if (v26) {
        uint64_t v32 = v28;
      }
      BOOL v35 = v32 == (void)v93;
      if (v32 == (void)v93) {
        int v36 = 1;
      }
      else {
        int v36 = v22;
      }
      if (v32 == (void)v93) {
        uint64_t v32 = v93;
      }
      if (v35) {
        int v37 = 1;
      }
      else {
        int v37 = v29;
      }
      if (v29 == 1) {
        uint64_t v24 = v27 + 4;
      }
      else {
        int v22 = v36;
      }
      if (v29 == 1)
      {
        v27 += 4;
        int v29 = 1;
      }
      else
      {
        uint64_t v23 = v33;
        int v25 = v34;
        int v26 = 0;
        uint64_t v28 = v32;
        int v29 = v37;
      }
      ++v21;
    }
  }
  unsigned int v18 = *a1;
  int v19 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v19 <= 1uLL)
  {
    uint64_t v20 = "\"{";
    goto LABEL_70;
  }
  *int v19 = 31522;
  *((void *)v18 + 4) += 2;
LABEL_71:
  uint64_t v44 = *a1;
  if (*((unsigned char *)a1 + 16))
  {
    sub_1CD632C30((uint64_t)&v91, *(void *)(*((void *)a1[1] + 267) + 864) + 48 * *(unsigned int *)(a2 + 32));
    if ((SBYTE7(v92) & 0x80u) == 0) {
      int v48 = (const char *)&v91;
    }
    else {
      int v48 = (const char *)v91;
    }
    if ((SBYTE7(v92) & 0x80u) == 0) {
      size_t v49 = BYTE7(v92) & 0x7F;
    }
    else {
      size_t v49 = *((void *)&v91 + 1);
    }
    llvm::raw_ostream::write(v44, v48, v49);
    uint64_t v50 = *((void *)v44 + 4);
    if ((unint64_t)(*((void *)v44 + 3) - v50) > 4)
    {
      *(unsigned char *)(v50 + 4) = 62;
      *(_DWORD *)uint64_t v50 = 1685335868;
      *((void *)v44 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v44, "</td>", 5uLL);
    }
    if (SBYTE7(v92) < 0)
    {
      int v47 = (void *)v91;
      goto LABEL_92;
    }
  }
  else
  {
    sub_1CD632C30((uint64_t)v87, *(void *)(*((void *)a1[1] + 267) + 864) + 48 * *(unsigned int *)(a2 + 32));
    llvm::DOT::EscapeString(v87, (uint64_t)&v91);
    if ((SBYTE7(v92) & 0x80u) == 0) {
      uint64_t v45 = (const char *)&v91;
    }
    else {
      uint64_t v45 = (const char *)v91;
    }
    if ((SBYTE7(v92) & 0x80u) == 0) {
      size_t v46 = BYTE7(v92) & 0x7F;
    }
    else {
      size_t v46 = *((void *)&v91 + 1);
    }
    llvm::raw_ostream::write(v44, v45, v46);
    if (SBYTE7(v92) < 0) {
      operator delete((void *)v91);
    }
    if (v88 < 0)
    {
      int v47 = *(void **)v87;
LABEL_92:
      operator delete(v47);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v86 = 0;
  int v77 = 0;
  char v81 = 0;
  uint64_t v82 = 0;
  unint64_t v84 = __p;
  int v83 = 0;
  uint64_t v76 = &unk_1F2646F30;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  sub_1CD633220((uint64_t)a1, (llvm::raw_ostream *)&v76, a2);
  unint64_t v51 = *a1;
  int v52 = (_WORD *)*((void *)*a1 + 4);
  unint64_t v53 = *((void *)*a1 + 3) - (void)v52;
  if (*((unsigned char *)a1 + 16))
  {
    if (v53 <= 0xD)
    {
      unsigned int v54 = "</tr></table>>";
      size_t v55 = 14;
      goto LABEL_98;
    }
    qmemcpy(v52, "</tr></table>>", 14);
    uint64_t v71 = *((void *)v51 + 4) + 14;
  }
  else
  {
    if (v53 <= 1)
    {
      unsigned int v54 = "}\"";
      size_t v55 = 2;
LABEL_98:
      llvm::raw_ostream::write(v51, v54, v55);
      goto LABEL_99;
    }
    *int v52 = 8829;
    uint64_t v71 = *((void *)v51 + 4) + 2;
  }
  *((void *)v51 + 4) = v71;
LABEL_99:
  uint64_t v56 = *a1;
  uint64_t v57 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v57) > 2)
  {
    *(unsigned char *)(v57 + 2) = 10;
    *(_WORD *)uint64_t v57 = 15197;
    *((void *)v56 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v56, "];\n", 3uLL);
  }
  sub_1CD632FFC((uint64_t)&v91, a2);
  unint64_t v73 = a2;
  sub_1CD633110((uint64_t)v87, a2);
  int v58 = DWORD2(v96);
  int v59 = v90;
  uint64_t v60 = v91;
  int v61 = BYTE8(v92);
  uint64_t v62 = *(void *)v87;
  uint64_t v63 = v89;
  uint64_t v64 = v95;
  uint64_t v72 = v93;
  if (DWORD2(v96) != v90 || (void)v91 != *(void *)v87 || (void)v95 != v89)
  {
    int v65 = 63;
    do
    {
      v75[2] = v93;
      v75[3] = v94;
      v75[4] = v95;
      v75[5] = v96;
      v75[0] = v91;
      v75[1] = v92;
      sub_1CD6332A8(a1, v73, (uint64_t)v75);
      if (v58 == 1)
      {
        v64 += 4;
        *(void *)&long long v95 = v64;
      }
      else
      {
        if (v61)
        {
          BYTE8(v92) = 0;
        }
        else
        {
          v60 += 4;
          *(void *)&long long v91 = v60;
        }
        int v61 = 0;
        if (v60 == v72)
        {
          int v58 = 1;
          DWORD2(v96) = 1;
          uint64_t v60 = v72;
        }
      }
      BOOL v67 = v65-- != 0;
      BOOL v69 = v64 == v63 && v60 == v62 && v58 == v59;
    }
    while (!v69 && v67);
  }
  while (v58 != v59 || v60 != v62 || v64 != v63)
  {
    v74[2] = v93;
    v74[3] = v94;
    v74[4] = v95;
    v74[5] = v96;
    v74[0] = v91;
    v74[1] = v92;
    sub_1CD6332A8(a1, v73, (uint64_t)v74);
    if (v58 == 1)
    {
      v64 += 4;
      *(void *)&long long v95 = v64;
    }
    else
    {
      if (v61)
      {
        BYTE8(v92) = 0;
      }
      else
      {
        v60 += 4;
        *(void *)&long long v91 = v60;
      }
      int v61 = 0;
      if (v60 == v72)
      {
        int v58 = 1;
        DWORD2(v96) = 1;
        uint64_t v60 = v72;
      }
    }
  }
  uint64_t v76 = &unk_1F2646B98;
  if (v83 == 1 && v78) {
    MEMORY[0x1D25D9CB0](v78, 0x1000C8077774924);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete(__p[0]);
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
}

void sub_1CC74C130(uint64_t a1, unint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    strcpy((char *)v78, "color=red");
    LOBYTE(v4) = 9;
  }
  else
  {
    LOBYTE(v78[0]) = 0;
  }
  char v79 = v4;
  uint64_t v5 = *(llvm::raw_ostream **)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v6) > 4)
  {
    *(unsigned char *)(v6 + 4) = 101;
    *(_DWORD *)uint64_t v6 = 1685016073;
    *((void *)v5 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v5, a2, 3, 0, 0);
  uint64_t v7 = (void *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v7 > 7uLL)
  {
    void *v7 = 0x3D65706168735B20;
    *((void *)v5 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v5, " [shape=", 8uLL);
  }
  uint64_t v8 = *(llvm::raw_ostream **)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 32);
  unint64_t v10 = *(void *)(*(void *)a1 + 24) - v9;
  if (*(unsigned char *)(a1 + 16))
  {
    if (v10 <= 4)
    {
      size_t v11 = "none,";
      size_t v12 = 5;
      goto LABEL_13;
    }
    *(unsigned char *)(v9 + 4) = 44;
    *(_DWORD *)uint64_t v9 = 1701736302;
    uint64_t v61 = *((void *)v8 + 4) + 5;
  }
  else
  {
    if (v10 <= 6)
    {
      size_t v11 = "record,";
      size_t v12 = 7;
LABEL_13:
      llvm::raw_ostream::write(v8, v11, v12);
      goto LABEL_14;
    }
    *(_DWORD *)(v9 + 3) = 744780399;
    *(_DWORD *)uint64_t v9 = 1868785010;
    uint64_t v61 = *((void *)v8 + 4) + 7;
  }
  *((void *)v8 + 4) = v61;
LABEL_14:
  if (v79 >= 0) {
    size_t v13 = v79 & 0x7F;
  }
  else {
    size_t v13 = (size_t)v78[1];
  }
  if (v13)
  {
    if (v79 >= 0) {
      int v14 = (const char *)v78;
    }
    else {
      int v14 = (const char *)v78[0];
    }
    uint64_t v15 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v14, v13);
    uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
    if (*((unsigned char **)v15 + 3) == v16)
    {
      llvm::raw_ostream::write(v15, ",", 1uLL);
    }
    else
    {
      *uint64_t v16 = 44;
      ++*((void *)v15 + 4);
    }
  }
  uint64_t v17 = *(llvm::raw_ostream **)a1;
  uint64_t v18 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v18) > 5)
  {
    *(_WORD *)(v18 + 4) = 15724;
    *(_DWORD *)uint64_t v18 = 1700946284;
    *((void *)v17 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v17, "label=", 6uLL);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v22 = 0;
    while (2)
    {
      uint64_t v23 = (_DWORD *)(a2 + 12);
      switch(v22)
      {
        case 0:
          goto LABEL_32;
        case 1:
          uint64_t v23 = (_DWORD *)(a2 + 16);
          goto LABEL_32;
        case 2:
          uint64_t v23 = (_DWORD *)(a2 + 20);
LABEL_32:
          if (*v23 == -1) {
            goto LABEL_33;
          }
          int v24 = 0;
          break;
        case 3:
          unsigned int v26 = 0;
LABEL_44:
          int v22 = 4;
          goto LABEL_45;
        default:
LABEL_33:
          ++v22;
          continue;
      }
      break;
    }
LABEL_35:
    ++v22;
    do
    {
      int v25 = (_DWORD *)(a2 + 12);
      switch(v22)
      {
        case 0:
          break;
        case 1:
          int v25 = (_DWORD *)(a2 + 16);
          break;
        case 2:
          int v25 = (_DWORD *)(a2 + 20);
          break;
        case 3:
          unsigned int v26 = v24 + 1;
          goto LABEL_44;
        default:
          goto LABEL_35;
      }
      if (*v25 == -1) {
        goto LABEL_35;
      }
      ++v24;
      ++v22;
    }
    while (v24 != 64);
    unsigned int v26 = 64;
LABEL_45:
    if (v26 <= 1) {
      unsigned int v26 = 1;
    }
    if (v22 == 4) {
      unint64_t v27 = v26;
    }
    else {
      unint64_t v27 = v26 + 1;
    }
    uint64_t v28 = *(llvm::raw_ostream **)a1;
    int v29 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v29 > 0x30uLL)
    {
      qmemcpy(v29, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      BOOL v30 = (void *)(*((void *)v28 + 4) + 49);
      *((void *)v28 + 4) = v30;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      BOOL v30 = (void *)*((void *)v28 + 4);
    }
    if (*((void *)v28 + 3) - (void)v30 > 0x2EuLL)
    {
      qmemcpy(v30, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((void *)v28 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v28, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1CD098D14(v28, v27, 0, 0, 0);
    int v31 = (_WORD *)*((void *)v28 + 4);
    if (*((void *)v28 + 3) - (void)v31 <= 1uLL)
    {
      unsigned int v21 = "\">";
      int v19 = v28;
      goto LABEL_56;
    }
    *int v31 = 15906;
    *((void *)v28 + 4) += 2;
  }
  else
  {
    int v19 = *(llvm::raw_ostream **)a1;
    uint64_t v20 = *(_WORD **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v20 <= 1uLL)
    {
      unsigned int v21 = "\"{";
LABEL_56:
      llvm::raw_ostream::write(v19, v21, 2uLL);
      goto LABEL_57;
    }
    *uint64_t v20 = 31522;
    *((void *)v19 + 4) += 2;
  }
LABEL_57:
  uint64_t v32 = *(llvm::raw_ostream **)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    sub_1CD63355C((uint64_t)&__p, a2, *(void *)(**(void **)(a1 + 8) + 864));
    if (v68 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    if (v68 >= 0) {
      size_t v37 = HIBYTE(v68) & 0x7F;
    }
    else {
      size_t v37 = v67;
    }
    llvm::raw_ostream::write(v32, p_p, v37);
    uint64_t v38 = *((void *)v32 + 4);
    if ((unint64_t)(*((void *)v32 + 3) - v38) > 4)
    {
      *(unsigned char *)(v38 + 4) = 62;
      *(_DWORD *)uint64_t v38 = 1685335868;
      *((void *)v32 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v32, "</td>", 5uLL);
    }
    if (SHIBYTE(v68) < 0)
    {
      BOOL v35 = __p;
      goto LABEL_78;
    }
  }
  else
  {
    sub_1CD63355C((uint64_t)&v75, a2, *(void *)(**(void **)(a1 + 8) + 864));
    llvm::DOT::EscapeString((char *)&v75, (uint64_t)&__p);
    if (v68 >= 0) {
      uint64_t v33 = (const char *)&__p;
    }
    else {
      uint64_t v33 = (const char *)__p;
    }
    if (v68 >= 0) {
      size_t v34 = HIBYTE(v68) & 0x7F;
    }
    else {
      size_t v34 = v67;
    }
    llvm::raw_ostream::write(v32, v33, v34);
    if (SHIBYTE(v68) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v77) < 0)
    {
      BOOL v35 = v75;
LABEL_78:
      operator delete(v35);
    }
  }
  sub_1CD633734((uint64_t)&__p, a2);
  char v39 = HIBYTE(v68);
  size_t v40 = HIBYTE(v68) & 0x7F;
  if (v68 < 0) {
    size_t v40 = v67;
  }
  if (v40)
  {
    int v41 = *(llvm::raw_ostream **)a1;
    unint64_t v42 = *(unsigned char **)(*(void *)a1 + 32);
    if (*(unsigned char **)(*(void *)a1 + 24) == v42)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "|", 1uLL);
    }
    else
    {
      unsigned char *v42 = 124;
      ++*((void *)v41 + 4);
    }
    llvm::DOT::EscapeString((char *)&__p, (uint64_t)&v75);
    if (v77 >= 0) {
      uint64_t v43 = (const char *)&v75;
    }
    else {
      uint64_t v43 = (const char *)v75;
    }
    if (v77 >= 0) {
      size_t v44 = HIBYTE(v77) & 0x7F;
    }
    else {
      size_t v44 = v76;
    }
    llvm::raw_ostream::write(v41, v43, v44);
    if (SHIBYTE(v77) < 0) {
      operator delete(v75);
    }
    char v39 = HIBYTE(v68);
  }
  if (v39 < 0) {
    operator delete(__p);
  }
  char v75 = 0;
  size_t v76 = 0;
  uint64_t v77 = 0;
  LODWORD(v67) = 0;
  char v71 = 0;
  uint64_t v72 = 0;
  uint64_t v74 = &v75;
  int v73 = 0;
  __p = &unk_1F2646F30;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v45 = *(llvm::raw_ostream **)a1;
    size_t v46 = (uint64_t *)(*(void *)a1 + 32);
    int v47 = (_WORD *)*v46;
    unint64_t v48 = *(void *)(*(void *)a1 + 24) - *v46;
    goto LABEL_100;
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
  uint64_t v45 = *(llvm::raw_ostream **)a1;
  size_t v46 = (uint64_t *)(*(void *)a1 + 32);
  int v47 = (_WORD *)*v46;
  unint64_t v48 = *(void *)(*(void *)a1 + 24) - *v46;
  if (!*(unsigned char *)(a1 + 16))
  {
LABEL_100:
    if (v48 <= 1)
    {
      size_t v49 = "}\"";
      size_t v50 = 2;
      goto LABEL_102;
    }
    _WORD *v47 = 8829;
    uint64_t v60 = *v46 + 2;
LABEL_148:
    *size_t v46 = v60;
    goto LABEL_103;
  }
  if (v48 > 0xD)
  {
    qmemcpy(v47, "</tr></table>>", 14);
    uint64_t v60 = *v46 + 14;
    goto LABEL_148;
  }
  size_t v49 = "</tr></table>>";
  size_t v50 = 14;
LABEL_102:
  llvm::raw_ostream::write(v45, v49, v50);
LABEL_103:
  unint64_t v51 = *(llvm::raw_ostream **)a1;
  uint64_t v52 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v52) > 2)
  {
    *(unsigned char *)(v52 + 2) = 10;
    *(_WORD *)uint64_t v52 = 15197;
    *((void *)v51 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v51, "];\n", 3uLL);
  }
  int v53 = 0;
  uint64_t v54 = *(void *)a2;
  while (1)
  {
    size_t v55 = (_DWORD *)(a2 + 12);
    switch(v53)
    {
      case 0:
        goto LABEL_109;
      case 1:
        size_t v55 = (_DWORD *)(a2 + 16);
        goto LABEL_109;
      case 2:
        size_t v55 = (_DWORD *)(a2 + 20);
LABEL_109:
        if (*v55 != -1)
        {
          int v56 = 0;
          int v57 = v53 + 1;
          while (2)
          {
            v64[0] = v54;
            v64[1] = a2;
            int v65 = v57;
            sub_1CD633AF8((llvm::raw_ostream **)a1, a2, (uint64_t)v64);
LABEL_113:
            int v58 = (_DWORD *)(a2 + 12);
            switch(v57)
            {
              case 0:
                goto LABEL_116;
              case 1:
                int v58 = (_DWORD *)(a2 + 16);
                goto LABEL_116;
              case 2:
                int v58 = (_DWORD *)(a2 + 20);
LABEL_116:
                if (*v58 == -1) {
                  goto LABEL_117;
                }
                ++v56;
                ++v57;
                if (v56 == 64)
                {
                  while (2)
                  {
                    v62[0] = v54;
                    v62[1] = a2;
                    int v63 = v57;
                    sub_1CD633AF8((llvm::raw_ostream **)a1, a2, (uint64_t)v62);
LABEL_120:
                    int v59 = (_DWORD *)(a2 + 12);
                    switch(v57)
                    {
                      case 0:
                        goto LABEL_123;
                      case 1:
                        int v59 = (_DWORD *)(a2 + 16);
                        goto LABEL_123;
                      case 2:
                        int v59 = (_DWORD *)(a2 + 20);
LABEL_123:
                        if (*v59 == -1) {
                          goto LABEL_124;
                        }
                        ++v57;
                        continue;
                      case 3:
                        goto LABEL_126;
                      default:
LABEL_124:
                        ++v57;
                        goto LABEL_120;
                    }
                  }
                }
                continue;
              case 3:
                goto LABEL_126;
              default:
LABEL_117:
                ++v57;
                goto LABEL_113;
            }
          }
        }
        break;
      case 3:
LABEL_126:
        __p = &unk_1F2646B98;
        if (v73 == 1 && v68) {
          MEMORY[0x1D25D9CB0](v68, 0x1000C8077774924);
        }
        if (SHIBYTE(v77) < 0) {
          operator delete(v75);
        }
        if (v79 < 0) {
          operator delete(v78[0]);
        }
        return;
      default:
        break;
    }
    ++v53;
  }
}

void *sub_1CC74CAE8(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 264);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 248);
    unsigned int v5 = v3 - 1;
    uint64_t v6 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v7 = *(void *)(v4 + 16 * v6);
    if (v7 == a3)
    {
LABEL_6:
      uint64_t v10 = *(void *)(v4 + 16 * v6 + 8);
      if (v10)
      {
        size_t v11 = *(void **)(v10 + 8);
        size_t v12 = *(void **)(v10 + 16);
        while (v11 != v12)
        {
          if (a2 != (void *)*v11)
          {
            size_t v13 = a2;
            while (v13)
            {
              size_t v13 = (void *)*v13;
              if (v13 == (void *)*v11)
              {
                a2 = (void *)*v11;
                break;
              }
            }
          }
          ++v11;
        }
        return a2;
      }
    }
    else
    {
      int v8 = 1;
      while (v7 != -4096)
      {
        int v9 = v6 + v8++;
        uint64_t v6 = v9 & v5;
        uint64_t v7 = *(void *)(v4 + 16 * v6);
        if (v7 == a3) {
          goto LABEL_6;
        }
      }
    }
  }
  for (uint64_t i = *(void *)(a1 + 272); i != *(void *)(a1 + 280) && *(void **)i != a2; i += 8)
  {
    uint64_t v15 = a2;
    while (v15)
    {
      uint64_t v15 = (void *)*v15;
      if (v15 == *(void **)i) {
        return *(void **)i;
      }
    }
  }
  return a2;
}

uint64_t sub_1CC74CBC4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2 + 48 * a3;
  uint64_t v4 = *(unsigned int *)(v3 + 32);
  if (v4)
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = *(unsigned int **)(v3 + 24);
    uint64_t v8 = 4 * v4 - 4;
    do
    {
      uint64_t v9 = a1 + ((unint64_t)*v7 << 6);
      unsigned int v10 = *(_DWORD *)(v9 + 16);
      BOOL v11 = v10 == 1 && (*(unsigned char *)(a2 + 48 * **(unsigned int **)(v9 + 8) + 8) & 0x10) != 0 || v10 > 1;
      v6 |= v11;
      v5 |= !v11;
      char v12 = v6 & v5;
      if (v6 & v5) {
        break;
      }
      ++v7;
      uint64_t v13 = v8;
      v8 -= 4;
    }
    while (v13);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1CC74CC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  int v6 = v5;
  uint64_t v7 = v4;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v29 = 0;
  char v8 = sub_1CC74CF5C(v4, *v5, &v29);
  uint64_t v9 = v29;
  if (v8) {
    return v9 + 8;
  }
  uint64_t v30 = v29;
  int v10 = *(_DWORD *)v7;
  int v11 = *(_DWORD *)v7 >> 1;
  int v12 = *(_DWORD *)v7 & 1;
  if (v12) {
    unsigned int v13 = 32;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v7 + 16);
  }
  if (4 * v11 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_12;
  }
  if (v13 + ~v11 - *(_DWORD *)(v7 + 4) <= v13 >> 3)
  {
LABEL_12:
    if (v13 >= 0x21)
    {
      unint64_t v16 = (v13 - 1) | ((unint64_t)(v13 - 1) >> 1);
      unint64_t v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
      int v18 = ((v17 | (v17 >> 8)) >> 16) | v17 | (v17 >> 8);
      if ((v18 + 1) > 0x40) {
        unsigned int v13 = v18 + 1;
      }
      else {
        unsigned int v13 = 64;
      }
    }
    if (v12)
    {
      uint64_t v21 = 0;
      int v22 = v31;
      uint64_t v23 = v7 + 8;
      do
      {
        if ((*(void *)v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v24 = (uint64_t)(v22 + 1);
          void *v22 = *(void *)v23;
          v22 += 24;
          sub_1CC74D00C(v24, v23 + 8);
          int v25 = *(char **)(v23 + 8);
          uint64_t v26 = *(unsigned int *)(v23 + 16);
          if (v26)
          {
            uint64_t v27 = 32 * v26;
            do
            {
              uint64_t v28 = *(char **)&v25[v27 - 32];
              if (&v25[v27 - 16] != v28) {
                free(v28);
              }
              v27 -= 32;
            }
            while (v27);
            int v25 = *(char **)(v23 + 8);
          }
          if (v25 != (char *)(v23 + 24)) {
            free(v25);
          }
        }
        ++v21;
        uint64_t v23 = v7 + 8 + 192 * v21;
      }
      while (v21 != 32);
      if (v13 > 0x20)
      {
        *(_DWORD *)v7 &= ~1u;
        *(void *)(v7 + 8) = operator new(192 * v13, (std::align_val_t)8uLL);
        *(void *)(v7 + 16) = v13;
      }
      sub_1CC74D1E0(v7, (uint64_t)v31, (uint64_t)v22);
    }
    else
    {
      uint64_t v19 = *(void *)(v7 + 8);
      unsigned int v20 = *(_DWORD *)(v7 + 16);
      if (v13 > 0x20)
      {
        *(void *)(v7 + 8) = operator new(192 * v13, (std::align_val_t)8uLL);
        *(void *)(v7 + 16) = v13;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v10 | 1;
      }
      sub_1CC74D1E0(v7, v19, v19 + 192 * v20);
      MEMORY[0x1D25D9CD0](v19, 8);
    }
    sub_1CC74CF5C(v7, *v6, &v30);
    int v10 = *(_DWORD *)v7;
    uint64_t v9 = v30;
    int v12 = *(_DWORD *)v7 & 1;
  }
  *(_DWORD *)uint64_t v7 = (v10 & 0xFFFFFFFE | v12) + 2;
  if (*(void *)v9 != -4096) {
    --*(_DWORD *)(v7 + 4);
  }
  uint64_t v14 = *v6;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(void *)(v9 + 184) = 0;
  *(void *)uint64_t v9 = v14;
  *(void *)(v9 + 8) = v9 + 24;
  *(void *)(v9 + 16) = 0x500000000;
  return v9 + 8;
}

uint64_t sub_1CC74CF5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 192 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 192 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC74D00C(uint64_t a1, uint64_t a2)
{
  int v4 = (char *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x500000000;
  if (a1 != a2)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    if (v5)
    {
      unsigned int v6 = *(char **)a2;
      if (*(void *)a2 != a2 + 16)
      {
        int v7 = *(_DWORD *)(a2 + 12);
        *(void *)a1 = v6;
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_25:
        *(_DWORD *)(a2 + 8) = 0;
        goto LABEL_26;
      }
      if (v5 <= 5)
      {
        uint64_t v9 = &v6[32 * v5];
      }
      else
      {
        sub_1CC74D300((char **)a1, *(unsigned int *)(a2 + 8));
        unsigned int v6 = *(char **)a2;
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (!v8)
        {
LABEL_20:
          *(_DWORD *)(a1 + 8) = v5;
          uint64_t v19 = *(unsigned int *)(a2 + 8);
          if (v19)
          {
            uint64_t v20 = 32 * v19;
            do
            {
              uint64_t v21 = *(char **)&v6[v20 - 32];
              if (&v6[v20 - 16] != v21) {
                free(v21);
              }
              v20 -= 32;
            }
            while (v20);
          }
          goto LABEL_25;
        }
        int v4 = *(char **)a1;
        uint64_t v9 = &v6[32 * v8];
      }
      uint64_t v10 = 0;
      do
      {
        int v11 = &v4[v10];
        BOOL v12 = &v6[v10];
        unsigned int v13 = &v4[v10 + 16];
        *(void *)int v11 = v13;
        *((void *)v11 + 1) = 0x100000000;
        if (v6 != v4)
        {
          unsigned int v14 = *((_DWORD *)v12 + 2);
          if (v14)
          {
            uint64_t v15 = &v6[v10];
            uint64_t v17 = (uint64_t)&v6[v10 + 16];
            unint64_t v16 = *(const void **)&v6[v10];
            if ((const void *)v17 == v16)
            {
              if (v14 >= 2) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v13, v16, 8uLL);
              *((_DWORD *)v11 + 2) = v14;
            }
            else
            {
              *(void *)int v11 = v16;
              int v18 = *((_DWORD *)v15 + 3);
              *((_DWORD *)v11 + 2) = v14;
              *((_DWORD *)v11 + 3) = v18;
              *(void *)uint64_t v15 = v17;
              *((_DWORD *)v15 + 3) = 0;
            }
            *((_DWORD *)v12 + 2) = 0;
          }
        }
        *((void *)v11 + 3) = *((void *)v12 + 3);
        v10 += 32;
      }
      while (&v6[v10] != v9);
      unsigned int v6 = *(char **)a2;
      goto LABEL_20;
    }
  }
LABEL_26:
  int v22 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v22;
  return a1;
}

void sub_1CC74D1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 6152);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[24 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 24;
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unint64_t v16 = 0;
      sub_1CC74CF5C(a1, v10, &v16);
      int v11 = v16;
      *unint64_t v16 = *(void *)a2;
      sub_1CC74D00C((uint64_t)(v11 + 1), a2 + 8);
      *(_DWORD *)a1 += 2;
      BOOL v12 = *(char **)(a2 + 8);
      uint64_t v13 = *(unsigned int *)(a2 + 16);
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          uint64_t v15 = *(char **)&v12[v14 - 32];
          if (&v12[v14 - 16] != v15) {
            free(v15);
          }
          v14 -= 32;
        }
        while (v14);
        BOOL v12 = *(char **)(a2 + 8);
      }
      if (v12 != (char *)(a2 + 24)) {
        free(v12);
      }
    }
    a2 += 192;
  }
}

void sub_1CC74D300(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  int v6 = (char *)malloc_type_malloc(32 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unsigned int v7 = v6;
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 32 * v9;
    do
    {
      BOOL v12 = &v7[v10];
      uint64_t v13 = &v8[v10];
      uint64_t v14 = &v7[v10 + 16];
      *(void *)BOOL v12 = v14;
      *((void *)v12 + 1) = 0x100000000;
      if (v8 != v7)
      {
        unsigned int v15 = *((_DWORD *)v13 + 2);
        if (v15)
        {
          unint64_t v16 = &v8[v10];
          uint64_t v18 = (uint64_t)&v8[v10 + 16];
          uint64_t v17 = *(const void **)&v8[v10];
          if ((const void *)v18 == v17)
          {
            if (v15 >= 2) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v14, v17, 8uLL);
            *((_DWORD *)v12 + 2) = v15;
          }
          else
          {
            *(void *)BOOL v12 = v17;
            int v19 = *((_DWORD *)v16 + 3);
            *((_DWORD *)v12 + 2) = v15;
            *((_DWORD *)v12 + 3) = v19;
            *(void *)unint64_t v16 = v18;
            *((_DWORD *)v16 + 3) = 0;
          }
          *((_DWORD *)v13 + 2) = 0;
        }
      }
      *((void *)v12 + 3) = *((void *)v13 + 3);
      v10 += 32;
    }
    while (v11 != v10);
    uint64_t v8 = *a1;
    uint64_t v20 = *((unsigned int *)a1 + 2);
    if (v20)
    {
      uint64_t v21 = 32 * v20;
      do
      {
        int v22 = *(char **)&v8[v21 - 32];
        if (&v8[v21 - 16] != v22) {
          free(v22);
        }
        v21 -= 32;
      }
      while (v21);
      uint64_t v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

void sub_1CC74D4CC(_OWORD *a1, _OWORD *a2, void *a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a1;
    int v6 = (_OWORD *)a3[20];
    do
    {
      unint64_t v7 = a3[21];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v9 = (_OWORD *)a3[19];
        uint64_t v10 = v6 - v9;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          abort();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 60) {
            sub_1CB833614();
          }
          uint64_t v14 = (char *)operator new(16 * v13);
        }
        else
        {
          uint64_t v14 = 0;
        }
        unsigned int v15 = &v14[16 * v10];
        *(_OWORD *)unsigned int v15 = *v5;
        unint64_t v16 = v15;
        if (v6 != v9)
        {
          do
          {
            *((_OWORD *)v16 - 1) = *(v6 - 1);
            v16 -= 16;
            --v6;
          }
          while (v6 != v9);
          int v6 = (_OWORD *)a3[19];
        }
        uint64_t v8 = v15 + 16;
        a3[19] = v16;
        a3[20] = v15 + 16;
        a3[21] = &v14[16 * v13];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        _OWORD *v6 = *v5;
        uint64_t v8 = v6 + 1;
      }
      a3[20] = v8;
      ++v5;
      int v6 = v8;
    }
    while (v5 != a2);
  }
}

uint64_t *sub_1CC74D600(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v2 = 32;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      uint64_t v9 = 0;
      return (uint64_t *)(v3 + 16 * v9);
    }
  }
  int v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v6 = (uint64_t *)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      int v11 = v5 + v8++;
      uint64_t v5 = v11 & v4;
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2) {
        return (uint64_t *)(v3 + 16 * v5);
      }
    }
    if (*(_DWORD *)a1)
    {
      uint64_t v9 = 32;
      uint64_t v3 = a1 + 8;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v9);
  }
  return v6;
}

uint64_t sub_1CC74D69C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC74D740()
{
  int v2 = 1;
  *(void *)&long long v1 = "Print a DAG showing the CFG unloopified representation";
  *((void *)&v1 + 1) = 54;
  sub_1CD4C1500((uint64_t)&unk_1EBCDA288, "print-gpucfglower-cfgunloopifier", &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA288, &dword_1CB82C000);
  int v2 = 1;
  *(void *)&long long v1 = "Print a DAG showing the control graph";
  *((void *)&v1 + 1) = 37;
  sub_1CD4C1500((uint64_t)&unk_1EBCDA348, "print-gpucfglower-controlgraph", &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA348, &dword_1CB82C000);
  int v2 = 1;
  *(void *)&long long v1 = "Print a DAG showing the flow analysis";
  *((void *)&v1 + 1) = 37;
  sub_1CD4C1500((uint64_t)&unk_1EBCDA408, "print-gpucfglower-flowanalyzer", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA408, &dword_1CB82C000);
}

uint64_t llvm::FlowAnalyzer::FlowAnalyzer(uint64_t a1, uint64_t *a2, int **a3, uint64_t a4, uint64_t a5, llvm::TargetInstrInfo *a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0xA00000000;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x2000000000;
  *(void *)(a1 + 1616) = a1 + 1632;
  *(void *)(a1 + 1624) = 0x2000000000;
  *(void *)(a1 + 1760) = a1 + 1776;
  *(void *)(a1 + 1768) = 0x2000000000;
  *(unsigned char *)(a1 + 1904) = 0;
  *(_DWORD *)(a1 + 1908) = 0;
  llvm::FlowAnalyzer::analyze(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6);
  llvm::FlowAnalyzer::optimize(a1, a3, a4, a2, v11, a6);
  return a1;
}

void llvm::FlowAnalyzer::analyze(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a3;
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v143 = (uint64_t *)(a1 + 64);
  uint64_t v131 = (unsigned int *)(a3 + 872);
  unsigned int v11 = *(_DWORD *)(a3 + 872);
  unsigned int v12 = *(_DWORD *)(a1 + 72);
  if (v12 != v11)
  {
    if (v12 <= v11)
    {
      if (*(_DWORD *)(a1 + 76) < v11) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v12 != v11)
      {
        uint64_t v13 = *v143 + 48 * v11;
        uint64_t v14 = *v143 + 48 * v12;
        do
        {
          *(void *)uint64_t v14 = 0;
          *(void *)(v14 + 8) = -1;
          *(void *)(v14 + 16) = -1;
          *(void *)(v14 + 24) = -1;
          *(void *)(v14 + 32) = 0;
          *(_DWORD *)(v14 + 40) = 0;
          *(_WORD *)(v14 + 44) &= 0xE000u;
          v14 += 48;
        }
        while (v14 != v13);
      }
    }
    *(_DWORD *)(a1 + 72) = v11;
  }
  if (v11)
  {
    int v15 = 0;
    uint64_t v16 = *v143;
    uint64_t v17 = *v143 + 48 * v11;
    do
    {
      *(void *)uint64_t v16 = a1;
      *(_DWORD *)(v16 + 8) = v15++;
      v16 += 48;
    }
    while (v16 != v17);
  }
  uint64_t v18 = *v131;
  unsigned int v19 = *(_DWORD *)(a1 + 1768);
  if (v19 != v18)
  {
    if (v19 <= v18)
    {
      if (*(_DWORD *)(a1 + 1772) < v18) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v19 != v18) {
        bzero((void *)(*(void *)(a1 + 1760) + 4 * v19), 4 * (v18 - v19));
      }
    }
    *(_DWORD *)(a1 + 1768) = v18;
  }
  uint64_t v20 = a5;
  uint64_t v21 = a2;
  llvm::FlowAnalyzer::analyzeBranches((void *)a1, (unsigned int *)(a1 + 8), a2, v9, a4, v20, a6);
  llvm::FlowAnalyzer::constructBlockOrder(a1, v9, a4, a2, (void *)(a1 + 8));
  int v22 = *(_DWORD *)(v9 + 872);
  uint64_t v147 = v150;
  int v149 = 6;
  if ((v22 + 63) >= 0x1C0)
  {
    unsigned int v148 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v22 + 63) >= 0x40) {
    bzero(v150, 8 * ((v22 + 63) >> 6));
  }
  unsigned int v148 = (v22 + 63) >> 6;
  v150[12] = v22;
  uint64_t v145 = 0xA00000000;
  uint64_t v130 = *(unsigned int *)(v9 + 8);
  if (v130)
  {
    unint64_t v23 = 0;
    int v135 = 0;
    uint64_t v129 = v9 + 88;
    uint64_t v136 = a4;
    uint64_t v141 = v9;
    do
    {
      uint64_t v24 = *(unsigned int *)(*(void *)v9 + 4 * v23);
      unint64_t v25 = v23 + 1;
      uint64_t v26 = (unsigned int *)(*(void *)v9 + 4 * v25);
      unint64_t v132 = v25;
      if (v25 >= *(unsigned int *)(v9 + 8)) {
        uint64_t v26 = v131;
      }
      unsigned int v142 = *v26;
      uint64_t v27 = *(void *)(v9 + 864);
      uint64_t v28 = *v143;
      uint64_t v29 = v24 + 2 * v24;
      uint64_t v30 = *v143 + 16 * v29;
      *(_DWORD *)(v30 + 24) = 0;
      uint64_t v31 = v30 + 24;
      *(_DWORD *)(v31 + 4) = 0;
      int v32 = *(_DWORD *)(a4 + 264);
      if (v32)
      {
        uint64_t v33 = *(void *)(v27 + 16 * v29 + 16);
        uint64_t v34 = *(void *)(a4 + 248);
        unsigned int v35 = v32 - 1;
        uint64_t v36 = ((v33 >> 4) ^ (v33 >> 9)) & (v32 - 1);
        uint64_t v37 = *(void *)(v34 + 16 * v36);
        if (v33 == v37)
        {
LABEL_30:
          size_t v40 = *(uint64_t **)(v34 + 16 * v36 + 8);
          if (v40)
          {
            uint64_t v41 = *v40;
            if (*v40)
            {
              if (*(_DWORD *)(v9 + 80))
              {
                int v43 = 16;
                uint64_t v42 = v129;
              }
              else
              {
                uint64_t v42 = *(void *)(v9 + 88);
                int v43 = *(_DWORD *)(v9 + 96);
                if (!v43) {
                  goto LABEL_39;
                }
              }
              int v44 = v43 - 1;
              unsigned int v45 = (v43 - 1) & ((v41 >> 4) ^ (v41 >> 9));
              uint64_t v46 = *(void *)(v42 + 16 * v45);
              if (v46 != v41)
              {
                int v127 = 1;
                do
                {
                  if (v46 == -4096) {
                    break;
                  }
                  unsigned int v128 = v45 + v127++;
                  unsigned int v45 = v128 & v44;
                  uint64_t v46 = *(void *)(v42 + 16 * v45);
                }
                while (v46 != v41);
              }
            }
LABEL_39:
            llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
          }
        }
        else
        {
          int v38 = 1;
          while (v37 != -4096)
          {
            int v39 = v36 + v38++;
            uint64_t v36 = v39 & v35;
            uint64_t v37 = *(void *)(v34 + 16 * v36);
            if (v33 == v37) {
              goto LABEL_30;
            }
          }
        }
      }
      unsigned int v47 = *(unsigned __int16 *)(v28 + 48 * v24 + 44);
      int v48 = (v47 >> 7) & 1;
      if ((v47 & 0x30) != 0) {
        ++v48;
      }
      *(_DWORD *)(v31 + 4) = v48;
      unsigned int v49 = v142;
      if (v24 != v142)
      {
        int v137 = v24;
        unsigned int v50 = v24;
        while (1)
        {
          uint64_t v51 = *(void *)(a1 + 1616);
          uint64_t v52 = *(unsigned int *)(v51 + 4 * v50);
          uint64_t v53 = *(void *)(v9 + 864);
          uint64_t v54 = *(void *)(a1 + 64);
          unsigned int v139 = *(_DWORD *)(v53 + 48 * v52 + 32);
          uint64_t v55 = *v21 + (v52 << 6);
          BOOL v140 = *(_DWORD **)(v55 + 40);
          uint64_t v138 = *(unsigned int *)(v55 + 48);
          unsigned int v56 = *(_DWORD *)(*(void *)(a1 + 1760) + 4 * v52) + 1;
          if (v56 < v49)
          {
            unsigned int v57 = *(_DWORD *)(v51 + 4 * v56);
            if ((*(unsigned char *)(v53 + 48 * v57 + 8) & 0x10) != 0)
            {
              *(_WORD *)(v54 + 48 * v52 + 44) |= 8u;
              int v58 = *(_DWORD *)(a4 + 264);
              if (v58)
              {
                uint64_t v59 = *(void *)(v53 + 48 * v57 + 16);
                uint64_t v60 = *(void *)(a4 + 248);
                int v61 = v58 - 1;
                unsigned int v62 = ((v59 >> 4) ^ (v59 >> 9)) & (v58 - 1);
                uint64_t v63 = *(void *)(v60 + 16 * v62);
                if (v59 != v63)
                {
                  int v64 = 1;
                  do
                  {
                    if (v63 == -4096) {
                      break;
                    }
                    unsigned int v65 = v62 + v64++;
                    unsigned int v62 = v65 & v61;
                    uint64_t v63 = *(void *)(v60 + 16 * v62);
                  }
                  while (v59 != v63);
                }
              }
              sub_1CC750BC0();
            }
            unsigned int v49 = v142;
          }
          if (v52 != v137)
          {
            uint64_t v66 = v54 + 48 * v52;
            __int16 v68 = *(_WORD *)(v66 + 44);
            size_t v67 = (_WORD *)(v66 + 44);
            if ((v68 & 0x80) != 0)
            {
              *(_DWORD *)(v54 + 48 * v52 + 32) = ++v135;
              if (llvm::FlowAnalyzer::doesntControlDirectlyNodes(v52, v9, v21)) {
                *v67 |= 1u;
              }
              int v77 = *(_DWORD *)(*(void *)(a1 + 8) + 4 * v52);
              unsigned int v134 = *(_DWORD *)(*(void *)(a1 + 1616)
                               + 4 * (*(_DWORD *)(*(void *)(a1 + 1760) + 4 * v52) - 1));
              uint64_t v78 = *(void *)(a1 + 64);
              int v79 = v145;
              uint64_t v80 = (int *)(v54 + 48 * v52 + 36);
              uint64_t v81 = v78;
              do
              {
                if (!v79) {
                  break;
                }
                unsigned int v82 = v146[v79 - 1];
                if (v82 != v77)
                {
                  if (sub_1CC74F8BC((uint64_t)a2, v146[v79 - 1], v77) == -1) {
                    break;
                  }
                  uint64_t v81 = *v143;
                }
                if ((*(_WORD *)(v81 + 48 * v82 + 44) & 0x80) != 0)
                {
                  *(_DWORD *)(v81 + 48 * v82 + 20) = v52;
                  int v83 = *v80 + 1;
                }
                else
                {
                  int v83 = *v80;
                }
                int *v80 = v83 + 1;
                int v79 = v145 - 1;
                LODWORD(v145) = v145 - 1;
              }
              while (v82 != v77);
              uint64_t v76 = v78 + 48 * v134;
            }
            else
            {
              unsigned int v133 = *(_DWORD *)(*(void *)(a1 + 1616)
                               + 4 * (*(_DWORD *)(*(void *)(a1 + 1760) + 4 * v52) - 1));
              uint64_t v69 = *(void *)(a1 + 64);
              int v70 = v145;
              if (v145)
              {
                char v71 = (int *)(v54 + 48 * v52 + 36);
                do
                {
                  unsigned int v72 = v146[v70 - 1];
                  uint64_t v73 = *v143;
                  if (sub_1CC74F8BC((uint64_t)a2, v52, v72) != -1) {
                    break;
                  }
                  if ((*(_WORD *)(v73 + 48 * v72 + 44) & 0x80) != 0)
                  {
                    *(_DWORD *)(v73 + 48 * v72 + 20) = v52;
                    int v74 = *v71 + 1;
                  }
                  else
                  {
                    int v74 = *v71;
                  }
                  int v70 = v145 - 1;
                  BOOL v75 = v145 == 1;
                  LODWORD(v145) = v145 - 1;
                  *char v71 = v74 + 1;
                }
                while (!v75);
              }
              uint64_t v76 = v69 + 48 * v133;
            }
            *(_DWORD *)(v54 + 48 * v52 + 24) = *(_DWORD *)(v76 + 28);
            a4 = v136;
            uint64_t v9 = v141;
            unsigned int v49 = v142;
            uint64_t v21 = a2;
          }
          llvm::FlowAnalyzer::evaluateSkipTargets((void *)a1, v52, v49, (uint64_t *)&v147, v21);
          uint64_t v84 = v53 + 48 * v52;
          char v87 = *(unsigned char *)(v84 + 8);
          uint64_t v86 = (unsigned __int8 *)(v84 + 8);
          char v85 = v87;
          if ((v87 & 0x10) == 0) {
            break;
          }
          int v96 = *(_DWORD *)(v54 + 48 * v52 + 24)
              - ((*(unsigned __int16 *)(v54 + 48 * v52 + 44) >> 7) & 2);
          unsigned int v49 = v142;
LABEL_123:
          *(_DWORD *)(v54 + 48 * v52 + 28) = v96;
          if (++v50 == v49) {
            goto LABEL_43;
          }
        }
        if ((v85 & 0xA) != 0)
        {
          int v88 = *(_DWORD *)(a4 + 264);
          if (v88)
          {
            uint64_t v89 = *(void *)(v53 + 48 * v52 + 16);
            uint64_t v90 = *(void *)(a4 + 248);
            int v91 = v88 - 1;
            unsigned int v92 = ((v89 >> 4) ^ (v89 >> 9)) & (v88 - 1);
            uint64_t v93 = *(void *)(v90 + 16 * v92);
            if (v89 != v93)
            {
              int v94 = 1;
              do
              {
                if (v93 == -4096) {
                  break;
                }
                unsigned int v95 = v92 + v94++;
                unsigned int v92 = v95 & v91;
                uint64_t v93 = *(void *)(v90 + 16 * v92);
              }
              while (v89 != v93);
            }
          }
          sub_1CC750BC0();
        }
        int v97 = *v86;
        if (v97 == 1)
        {
          unsigned int v49 = v142;
          char v98 = v140;
          if (v139 < 2) {
            goto LABEL_120;
          }
        }
        else
        {
          unsigned int v49 = v142;
          char v98 = v140;
          if ((v97 & 4) == 0 || v139 <= 1) {
            goto LABEL_120;
          }
        }
        uint64_t v99 = v54 + 48 * v52;
        unsigned int v102 = *(_DWORD *)(v99 + 16);
        int v101 = (unsigned int *)(v99 + 16);
        unsigned int v100 = v102;
        unsigned int v103 = *(v101 - 1);
        if (v138)
        {
          uint64_t v104 = 4 * v138;
          uint64_t v105 = 4 * v138;
          char v106 = v98;
          while (*v106 != v103)
          {
            ++v106;
            v105 -= 4;
            if (!v105)
            {
              char v106 = &v98[v138];
              break;
            }
          }
          BOOL v107 = v138 == v106 - v98;
          uint64_t v108 = v98;
          while (*v108 != v100)
          {
            ++v108;
            v104 -= 4;
            if (!v104)
            {
              uint64_t v108 = &v98[v138];
              break;
            }
          }
        }
        else
        {
          BOOL v107 = 1;
          uint64_t v108 = v98;
        }
        uint64_t v109 = v108 - v98;
        __int16 v110 = *(_WORD *)(*v143 + 48 * v100 + 44);
        if ((*(_WORD *)(*v143 + 48 * v103 + 44) & 0x80) != 0)
        {
          unsigned int v49 = v142;
          if ((v110 & 0x80) != 0 || v109 == v138) {
            goto LABEL_120;
          }
        }
        else
        {
          if ((v110 & 0x80) == 0)
          {
            if (v145 >= (unint64_t)HIDWORD(v145)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v146[v145] = v52;
            LODWORD(v145) = v145 + 1;
            char v111 = v109 == v138 || v107;
            uint64_t v112 = v54 + 48 * v52;
            __int16 v115 = *(_WORD *)(v112 + 44);
            int v113 = (_WORD *)(v112 + 44);
            __int16 v114 = v115;
            if (v111)
            {
              *int v113 = v114 | 0x10;
              unsigned int v49 = v142;
            }
            else
            {
              *int v113 = v114 | 0x20;
              unsigned int v116 = *v101;
              unsigned int v49 = v142;
              *(_WORD *)(*v143 + 48 * v116 + 44) |= 0x40u;
            }
            goto LABEL_120;
          }
          unsigned int v49 = v142;
          if (v107)
          {
LABEL_120:
            uint64_t v117 = v54 + 48 * v52;
            int v118 = *(_DWORD *)(v117 + 24);
            unsigned int v119 = *(unsigned __int16 *)(v117 + 44);
            int v121 = *(_DWORD *)(v117 + 36);
            int v120 = *(_DWORD *)(v117 + 40);
            int v122 = v118 - v121 - (v119 & 1);
            BOOL v75 = (v119 & 0x30) == 0;
            unsigned int v123 = v119 >> 7;
            int v124 = (v119 >> 7) & 1;
            int v125 = (v119 >> 2) & 2;
            int v126 = v123 & 2;
            if (!v75) {
              ++v122;
            }
            int v96 = v122 + v124 + v125 - (v126 + 2 * v120);
            a4 = v136;
            uint64_t v9 = v141;
            goto LABEL_123;
          }
        }
        *(_WORD *)(v54 + 48 * v52 + 44) |= 0x10u;
        if (v145 >= (unint64_t)HIDWORD(v145)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v146[v145] = v52;
        LODWORD(v145) = v145 + 1;
        goto LABEL_120;
      }
LABEL_43:
      unint64_t v23 = v132;
    }
    while (v132 != v130);
  }
  if (v147 != v150) {
    free(v147);
  }
}

void llvm::FlowAnalyzer::optimize(uint64_t a1, int **a2, uint64_t a3, void *a4, uint64_t a5, llvm::TargetInstrInfo *a6)
{
  if (*(unsigned char *)(a1 + 1904))
  {
    if (*(void *)(a3 + 272) == *(void *)(a3 + 280)) {
      llvm::FlowAnalyzer::collapseEmptyUnstructuredNodes(a1, a2, a3);
    }
    llvm::FlowAnalyzer::optimizeUnstructuredSkipping((void *)a1, (uint64_t)a2, a4);
    llvm::FlowAnalyzer::optimizeUnstructuredLoops((void *)a1, (uint64_t)a2, a3, a4, v11, a6);
    uint64_t v12 = *(unsigned int *)(a1 + 1624);
    if (v12)
    {
      uint64_t v13 = *(unsigned int **)(a1 + 1616);
      uint64_t v14 = *(void *)(a1 + 64);
      uint64_t v15 = 4 * v12;
      int v16 = 1;
      do
      {
        if ((*(_WORD *)(v14 + 48 * *v13 + 44) & 0x880) != 0) {
          *(_DWORD *)(v14 + 48 * *v13 + 32) = v16++;
        }
        ++v13;
        v15 -= 4;
      }
      while (v15);
    }
    else
    {
      int v16 = 1;
    }
    *(_DWORD *)(a1 + 1908) = v16 - 1;
  }
}

void *llvm::FlowAnalyzer::analyzeBranches(void *result, unsigned int *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v248[3] = *MEMORY[0x1E4F143B8];
  uint64_t v223 = *(unsigned int *)(a4 + 8);
  if (v223)
  {
    uint64_t v7 = a6;
    uint64_t v11 = result;
    unint64_t v12 = 0;
    uint64_t v228 = a4 + 88;
    uint64_t v231 = (int *)(a4 + 872);
    uint64_t v232 = a4 + 352;
    do
    {
      unsigned int v13 = *(_DWORD *)(*(void *)a4 + 4 * v12);
      unint64_t v14 = v12 + 1;
      uint64_t v15 = (int *)(*(void *)a4 + 4 * v14);
      unint64_t v226 = v14;
      if (v14 >= *(unsigned int *)(a4 + 8)) {
        uint64_t v15 = v231;
      }
      int v16 = *v15;
      int v230 = v16;
      while (v13 != v16)
      {
        uint64_t v17 = v13;
        uint64_t v18 = *(void *)(a4 + 864);
        uint64_t v19 = v11[8];
        unint64_t v20 = *a3 + ((unint64_t)v13 << 6);
        int v21 = *(_DWORD *)(v20 + 16);
        if (v21 == 1)
        {
          if ((*(unsigned char *)(*(void *)(a3[267] + 864) + 48 * **(unsigned int **)(v20 + 8) + 8) & 0x10) == 0) {
            goto LABEL_9;
          }
        }
        else if (!v21)
        {
          goto LABEL_9;
        }
        if (!*((unsigned char *)v11 + 1904))
        {
          uint64_t v221 = v11;
          sub_1CBBF39AC(a2, *((unsigned int *)a3 + 2));
          unsigned int v246 = v248;
          uint64_t v247 = 0x500000000;
          uint64_t v207 = *((unsigned int *)a3 + 2);
          if (v207)
          {
            unsigned int v38 = 0;
            uint64_t v36 = 0;
            uint64_t v37 = 16;
            do
            {
              if (!*(_DWORD *)(*a3 + v37))
              {
                if (v38 >= HIDWORD(v247)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v246 + v38) = v36;
                unsigned int v38 = v247 + 1;
                LODWORD(v247) = v247 + 1;
              }
              ++v36;
              v37 += 64;
            }
            while (v207 != v36);
            unsigned int v95 = (unsigned int *)v246;
            if (v38)
            {
              uint64_t v222 = (unsigned int *)v246 + v38;
              do
              {
                unint64_t v55 = *v95;
                uint64_t v56 = *((unsigned int *)a3 + 2);
                uint64_t v242 = v245;
                int v244 = 5;
                uint64_t v227 = v95;
                if (v56 >= 6)
                {
                  int v243 = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v56)
                {
                  bzero(v245, 4 * v56);
                  int v57 = v56;
                }
                else
                {
                  int v57 = 0;
                }
                int v243 = v56;
                uint64_t v239 = v241;
                uint64_t v240 = 0x500000000;
                uint64_t v58 = *(void *)(*a3 + (v55 << 6) + 40);
                BOOL v235 = &v237;
                int v237 = v55;
                uint64_t v238 = v58;
                uint64_t v236 = 0x500000001;
                if ((v57 + 63) >= 0x1C0) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if ((v57 + 63) >= 0x40) {
                  bzero(v233, 8 * ((v57 + 63) >> 6));
                }
                unsigned int v59 = 1;
                int v234 = v57;
                *(void *)&v233[(v55 >> 3) & 0x1FFFFFF8] |= 1 << v55;
                uint64_t v7 = a6;
                do
                {
                  size_t v67 = (char *)v235;
                  __int16 v68 = (char *)v235 + 16 * v59;
                  uint64_t v69 = (unsigned int *)*((void *)v68 - 1);
                  uint64_t v70 = *a3;
                  unint64_t v71 = *a3 + ((unint64_t)*((unsigned int *)v68 - 4) << 6);
                  if (v69 == (unsigned int *)(*(void *)(v71 + 40) + 4 * *(unsigned int *)(v71 + 48)))
                  {
                    LODWORD(v236) = v59 - 1;
                    if (v240 >= (unint64_t)HIDWORD(v240)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(_DWORD *)&v239[4 * v240] = *((_DWORD *)v68 - 4);
                    LODWORD(v240) = v240 + 1;
                    unsigned int v59 = v236;
                  }
                  else
                  {
                    unsigned int v61 = *v69;
                    uint64_t v60 = *v69;
                    *((void *)v68 - 1) = v69 + 1;
                    uint64_t v62 = 1 << v61;
                    unint64_t v63 = (unint64_t)v61 >> 6;
                    uint64_t v64 = *(void *)&v233[8 * v63];
                    if (((1 << v61) & v64) == 0)
                    {
                      *(void *)&v233[8 * v63] = v62 | v64;
                      uint64_t v65 = *(void *)(v70 + (v60 << 6) + 40);
                      if (v59 >= HIDWORD(v236)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v66 = &v67[16 * v59];
                      *(void *)uint64_t v66 = v60;
                      *((void *)v66 + 1) = v65;
                      unsigned int v59 = v236 + 1;
                      LODWORD(v236) = v236 + 1;
                    }
                  }
                }
                while (v59);
                if (v235 != &v237) {
                  free(v235);
                }
                unsigned int v72 = v239;
                uint64_t v73 = v240;
                if (v240)
                {
                  int v74 = &v239[4 * v240 - 4];
                  if (v239 < (unsigned char *)v74)
                  {
                    BOOL v75 = v239 + 4;
                    do
                    {
                      int v76 = *((_DWORD *)v75 - 1);
                      *((_DWORD *)v75 - 1) = *v74;
                      *v74-- = v76;
                      BOOL v77 = v75 >= (unsigned char *)v74;
                      v75 += 4;
                    }
                    while (!v77);
                    uint64_t v73 = v240;
                  }
                }
                if (v73)
                {
                  uint64_t v78 = 0;
                  int v79 = v242;
                  do
                  {
                    v79[v72[v78]] = v78;
                    ++v78;
                  }
                  while (v73 != v78);
                }
                uint64_t v80 = *(void *)a2;
                *(_DWORD *)(*(void *)a2 + 4 * *v72) = *v72;
                int v81 = v240;
                if (v240 != 1)
                {
                  uint64_t v82 = *a3;
                  int v83 = (unsigned int *)v242;
                  uint64_t v84 = 1;
                  do
                  {
                    uint64_t v85 = v72[v84];
                    uint64_t v86 = v82 + (v85 << 6);
                    char v87 = *(unsigned int **)(v86 + 8);
                    unint64_t v88 = v83[*v87];
                    int v89 = *(_DWORD *)(v86 + 16);
                    if (v89 == 1)
                    {
                      unint64_t v90 = v83[*v87];
                    }
                    else
                    {
                      uint64_t v94 = 1;
                      unint64_t v90 = v83[*v87];
                      do
                      {
                        unint64_t v92 = v83[v87[2 * v94]];
                        if (*(_DWORD *)(v80 + 4 * v72[v92]) != -1 && v88 != v92)
                        {
                          do
                          {
                            while (v92 > v88)
                              unint64_t v92 = v83[*(unsigned int *)(v80 + 4 * v72[v92])];
                            while (v88 > v92)
                              unint64_t v88 = v83[*(unsigned int *)(v80 + 4 * v72[v88])];
                            unint64_t v90 = v92;
                          }
                          while (v88 != v92);
                        }
                        ++v94;
                        unint64_t v88 = v90;
                      }
                      while (v89 != v94);
                    }
                    int v91 = v72[v90];
                    if (*(_DWORD *)(v80 + 4 * v85) != v91) {
                      *(_DWORD *)(v80 + 4 * v85) = v91;
                    }
                    ++v84;
                  }
                  while (v81 != v84);
                }
                if (v72 != (_DWORD *)v241) {
                  free(v72);
                }
                if (v242 != v245) {
                  free(v242);
                }
                unsigned int v95 = v227 + 1;
              }
              while (v227 + 1 != v222);
              unsigned int v95 = (unsigned int *)v246;
            }
            else
            {
              uint64_t v7 = a6;
            }
            if (v95 != (unsigned int *)v248) {
              free(v95);
            }
          }
          uint64_t v11 = v221;
        }
        *((unsigned char *)v11 + 1904) = 1;
        if ((*(unsigned char *)(v18 + 48 * v17 + 8) & 0x10) == 0) {
          *(_WORD *)(v19 + 48 * v17 + 44) |= 0x80u;
        }
LABEL_9:
        uint64_t v22 = v18 + 48 * v17;
        uint64_t v24 = *(void *)(v22 + 16);
        uint64_t v23 = v22 + 16;
        uint64_t result = (*(void *(**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 56))(&v235, v7, v24, a7);
        *(_WORD *)(v19 + 48 * v17 + 44) = *(_WORD *)(v19 + 48 * v17 + 44) & 0xFFFB | (4 * (BYTE1(v237) & 0x3F));
        if (!v235)
        {
          int v39 = *(uint64_t **)(*(void *)v23 + 88);
          if (((*(void *)(*(void *)v23 + 96) - (void)v39) & 0x7FFFFFFF8) != 8) {
            goto LABEL_124;
          }
          uint64_t v40 = *v39;
          LODWORD(v41) = *(_DWORD *)(a5 + 264);
          unsigned int v42 = v40 >> 4;
          if (!v41) {
            goto LABEL_151;
          }
          uint64_t v43 = *(void *)(a5 + 248);
          unsigned int v44 = v41 - 1;
          uint64_t v45 = (v42 ^ (v40 >> 9)) & (v41 - 1);
          uint64_t v46 = *(void *)(v43 + 16 * v45);
          if (v40 != v46)
          {
            int v47 = 1;
            while (v46 != -4096)
            {
              int v48 = v45 + v47++;
              uint64_t v45 = v48 & v44;
              uint64_t v46 = *(void *)(v43 + 16 * v45);
              if (v40 == v46) {
                goto LABEL_31;
              }
            }
LABEL_150:
            LODWORD(v41) = 0;
LABEL_151:
            unsigned int v142 = *(_DWORD *)(*(void *)a4 + 4 * v41);
            unsigned int v143 = v41 + 1;
            uint64_t v144 = *(void *)a4 + 4 * v143;
            BOOL v77 = v143 >= *(_DWORD *)(a4 + 8);
            uint64_t v145 = (unsigned int *)v231;
            if (!v77) {
              uint64_t v145 = (unsigned int *)v144;
            }
            unsigned int v146 = *v145;
            int v147 = *(_DWORD *)(a4 + 344);
            if (v147)
            {
              int v149 = 16;
              uint64_t v148 = v232;
LABEL_155:
              unsigned int v150 = v42 ^ (v40 >> 9);
              int v151 = v149 - 1;
              uint64_t v152 = (v149 - 1) & v150;
              BOOL v153 = (uint64_t *)(v148 + 32 * v152);
              uint64_t v154 = *v153;
              if (*v153 != v40)
              {
                int v161 = 1;
                LODWORD(v162) = v152;
                while (v154 != -4096)
                {
                  int v163 = v162 + v161++;
                  uint64_t v162 = v163 & v151;
                  uint64_t v154 = *(void *)(v148 + 32 * v162);
                  if (v154 == v40)
                  {
                    BOOL v153 = (uint64_t *)(v148 + 32 * v162);
                    goto LABEL_156;
                  }
                }
                if (v147)
                {
                  uint64_t v215 = 16;
                  uint64_t v148 = v232;
                }
                else
                {
                  uint64_t v148 = *(void *)(a4 + 352);
                  uint64_t v215 = *(unsigned int *)(a4 + 360);
                }
                goto LABEL_273;
              }
            }
            else
            {
              uint64_t v148 = *(void *)(a4 + 352);
              int v149 = *(_DWORD *)(a4 + 360);
              if (v149) {
                goto LABEL_155;
              }
              uint64_t v215 = 0;
LABEL_273:
              BOOL v153 = (uint64_t *)(v148 + 32 * v215);
              uint64_t v7 = a6;
            }
LABEL_156:
            uint64_t v155 = *(void *)(a4 + 352);
            LODWORD(v156) = *(_DWORD *)(a4 + 360);
            if (v147)
            {
              uint64_t v155 = v232;
              uint64_t v156 = 16;
            }
            else
            {
              uint64_t v156 = v156;
            }
            if ((uint64_t *)(v155 + 32 * v156) != v153)
            {
              uint64_t v157 = *((unsigned int *)v153 + 4);
              if (v157)
              {
                unint64_t v158 = (unsigned int *)v153[1];
                uint64_t v159 = 4 * v157;
                do
                {
                  unsigned int v120 = *v158;
                  if (*v158 >= v142 && v120 <= v146) {
                    break;
                  }
                  ++v158;
                  unsigned int v120 = -1;
                  v159 -= 4;
                }
                while (v159);
                goto LABEL_123;
              }
            }
            goto LABEL_209;
          }
LABEL_31:
          uint64_t v41 = *(uint64_t **)(v43 + 16 * v45 + 8);
          if (!v41) {
            goto LABEL_151;
          }
          int v49 = *(_DWORD *)(a4 + 80);
          if (v49)
          {
            int v51 = 16;
            uint64_t v50 = v228;
          }
          else
          {
            uint64_t v50 = *(void *)(a4 + 88);
            int v51 = *(_DWORD *)(a4 + 96);
            if (!v51)
            {
              uint64_t v218 = 0;
              goto LABEL_204;
            }
          }
          int v96 = v51 - 1;
          LODWORD(v218) = (v51 - 1) & ((v41 >> 4) ^ (v41 >> 9));
          int v97 = (uint64_t **)(v50 + 16 * v218);
          char v98 = *v97;
          if (*v97 != v41)
          {
            int v191 = 1;
            while (v98 != (uint64_t *)-4096)
            {
              int v192 = v218 + v191++;
              uint64_t v218 = v192 & v96;
              char v98 = *(uint64_t **)(v50 + 16 * v218);
              if (v98 == v41) {
                goto LABEL_204;
              }
            }
            if (v49)
            {
              uint64_t v50 = v228;
              uint64_t v218 = 16;
            }
            else
            {
              uint64_t v50 = *(void *)(a4 + 88);
              uint64_t v218 = *(unsigned int *)(a4 + 96);
            }
LABEL_204:
            int v97 = (uint64_t **)(v50 + 16 * v218);
          }
          if (*(void *)v41[4] != v40)
          {
LABEL_101:
            LODWORD(v41) = *((_DWORD *)v97 + 2);
            goto LABEL_151;
          }
          uint64_t v141 = (uint64_t *)*v41;
          if (!*v41) {
            goto LABEL_150;
          }
          if (v49)
          {
            int v198 = 16;
            uint64_t v197 = v228;
LABEL_228:
            int v199 = v198 - 1;
            LODWORD(v200) = (v198 - 1) & ((v141 >> 4) ^ (v141 >> 9));
            int v97 = (uint64_t **)(v197 + 16 * v200);
            uint64_t v201 = *v97;
            if (*v97 == v141) {
              goto LABEL_101;
            }
            int v210 = 1;
            while (v201 != (uint64_t *)-4096)
            {
              int v211 = v200 + v210++;
              uint64_t v200 = v211 & v199;
              uint64_t v201 = *(uint64_t **)(v197 + 16 * v200);
              if (v201 == v141)
              {
                int v97 = (uint64_t **)(v197 + 16 * v200);
                goto LABEL_101;
              }
            }
            if (v49)
            {
              uint64_t v197 = v228;
              uint64_t v212 = 16;
            }
            else
            {
              uint64_t v197 = *(void *)(a4 + 88);
              uint64_t v212 = *(unsigned int *)(a4 + 96);
            }
          }
          else
          {
            uint64_t v197 = *(void *)(a4 + 88);
            int v198 = *(_DWORD *)(a4 + 96);
            if (v198) {
              goto LABEL_228;
            }
            uint64_t v212 = 0;
          }
          int v97 = (uint64_t **)(v197 + 16 * v212);
          goto LABEL_101;
        }
        LODWORD(v25) = *(_DWORD *)(a5 + 264);
        unsigned int v26 = v235 >> 4;
        if (v25)
        {
          uint64_t v27 = *(void *)(a5 + 248);
          unsigned int v28 = v25 - 1;
          uint64_t v29 = (v25 - 1) & (v26 ^ (v235 >> 9));
          uint64_t v30 = *(void **)(v27 + 16 * v29);
          if (v235 != v30)
          {
            int v31 = 1;
            while (v30 != (void *)-4096)
            {
              int v32 = v29 + v31++;
              uint64_t v29 = v32 & v28;
              uint64_t v30 = *(void **)(v27 + 16 * v29);
              if (v235 == v30) {
                goto LABEL_15;
              }
            }
LABEL_107:
            LODWORD(v25) = 0;
            goto LABEL_108;
          }
LABEL_15:
          unint64_t v25 = *(uint64_t **)(v27 + 16 * v29 + 8);
          if (!v25) {
            goto LABEL_108;
          }
          int v33 = *(_DWORD *)(a4 + 80);
          if (v33)
          {
            int v35 = 16;
            uint64_t v34 = v228;
          }
          else
          {
            uint64_t v34 = *(void *)(a4 + 88);
            int v35 = *(_DWORD *)(a4 + 96);
            if (!v35)
            {
              uint64_t v216 = 0;
              goto LABEL_105;
            }
          }
          int v52 = v35 - 1;
          LODWORD(v216) = (v35 - 1) & ((v25 >> 4) ^ (v25 >> 9));
          uint64_t v53 = (uint64_t **)(v34 + 16 * v216);
          uint64_t v54 = *v53;
          if (*v53 != v25)
          {
            int v99 = 1;
            while (v54 != (uint64_t *)-4096)
            {
              int v100 = v216 + v99++;
              uint64_t v216 = v100 & v52;
              uint64_t v54 = *(uint64_t **)(v34 + 16 * v216);
              if (v54 == v25) {
                goto LABEL_105;
              }
            }
            if (v33)
            {
              uint64_t v34 = v228;
              uint64_t v216 = 16;
            }
            else
            {
              uint64_t v34 = *(void *)(a4 + 88);
              uint64_t v216 = *(unsigned int *)(a4 + 96);
            }
LABEL_105:
            uint64_t v53 = (uint64_t **)(v34 + 16 * v216);
          }
          if (*(void **)v25[4] != v235) {
            goto LABEL_40;
          }
          int v101 = (uint64_t *)*v25;
          if (*v25)
          {
            if (v33)
            {
              int v193 = 16;
              uint64_t v194 = v228;
              goto LABEL_199;
            }
            uint64_t v194 = *(void *)(a4 + 88);
            int v193 = *(_DWORD *)(a4 + 96);
            if (!v193)
            {
              uint64_t v219 = 0;
              goto LABEL_258;
            }
LABEL_199:
            int v188 = v193 - 1;
            LODWORD(v189) = (v193 - 1) & ((v101 >> 4) ^ (v101 >> 9));
            uint64_t v53 = (uint64_t **)(v194 + 16 * v189);
            uint64_t v190 = *v53;
            if (*v53 != v101)
            {
              int v208 = 1;
              while (v190 != (uint64_t *)-4096)
              {
                int v209 = v189 + v208++;
                uint64_t v189 = v209 & v188;
                uint64_t v190 = *(uint64_t **)(v194 + 16 * v189);
                if (v190 == v101)
                {
                  uint64_t v53 = (uint64_t **)(v194 + 16 * v189);
                  goto LABEL_40;
                }
              }
              if (v33)
              {
                uint64_t v194 = v228;
                uint64_t v219 = 16;
              }
              else
              {
                uint64_t v194 = *(void *)(a4 + 88);
                uint64_t v219 = *(unsigned int *)(a4 + 96);
              }
LABEL_258:
              uint64_t v53 = (uint64_t **)(v194 + 16 * v219);
            }
LABEL_40:
            LODWORD(v25) = *((_DWORD *)v53 + 2);
            goto LABEL_108;
          }
          goto LABEL_107;
        }
LABEL_108:
        unsigned int v102 = *(_DWORD *)(*(void *)a4 + 4 * v25);
        unsigned int v103 = v25 + 1;
        uint64_t v104 = *(void *)a4 + 4 * v103;
        BOOL v77 = v103 >= *(_DWORD *)(a4 + 8);
        uint64_t v105 = (unsigned int *)v231;
        if (!v77) {
          uint64_t v105 = (unsigned int *)v104;
        }
        unsigned int v106 = *v105;
        int v107 = *(_DWORD *)(a4 + 344);
        if (v107)
        {
          int v109 = 16;
          uint64_t v108 = v232;
        }
        else
        {
          uint64_t v108 = *(void *)(a4 + 352);
          int v109 = *(_DWORD *)(a4 + 360);
          if (!v109)
          {
            uint64_t v213 = 0;
            goto LABEL_269;
          }
        }
        unsigned int v110 = v26 ^ (v235 >> 9);
        int v111 = v109 - 1;
        uint64_t v112 = (v109 - 1) & v110;
        uint64_t v113 = v108 + 32 * v112;
        __int16 v114 = *(void **)v113;
        if (*(void **)v113 == v235) {
          goto LABEL_113;
        }
        int v133 = 1;
        LODWORD(v134) = v112;
        while (v114 != (void *)-4096)
        {
          int v135 = v134 + v133++;
          uint64_t v134 = v135 & v111;
          __int16 v114 = *(void **)(v108 + 32 * v134);
          if (v114 == v235)
          {
            uint64_t v113 = v108 + 32 * v134;
            goto LABEL_113;
          }
        }
        if (v107)
        {
          uint64_t v213 = 16;
          uint64_t v108 = v232;
        }
        else
        {
          uint64_t v108 = *(void *)(a4 + 352);
          uint64_t v213 = *(unsigned int *)(a4 + 360);
        }
LABEL_269:
        uint64_t v113 = v108 + 32 * v213;
        uint64_t v7 = a6;
LABEL_113:
        uint64_t v115 = *(void *)(a4 + 352);
        LODWORD(v116) = *(_DWORD *)(a4 + 360);
        if (v107)
        {
          uint64_t v115 = v232;
          uint64_t v116 = 16;
        }
        else
        {
          uint64_t v116 = v116;
        }
        if (v115 + 32 * v116 != v113)
        {
          uint64_t v117 = *(unsigned int *)(v113 + 16);
          if (v117)
          {
            int v118 = *(unsigned int **)(v113 + 8);
            uint64_t v119 = 4 * v117;
            do
            {
              unsigned int v120 = *v118;
              if (*v118 >= v102 && v120 <= v106) {
                break;
              }
              ++v118;
              unsigned int v120 = -1;
              v119 -= 4;
            }
            while (v119);
            goto LABEL_123;
          }
        }
LABEL_209:
        unsigned int v120 = -1;
LABEL_123:
        *(_DWORD *)(v19 + 48 * v17 + 12) = v120;
LABEL_124:
        if (!v236) {
          goto LABEL_191;
        }
        LODWORD(v122) = *(_DWORD *)(a5 + 264);
        unsigned int v123 = v236 >> 4;
        if (v122)
        {
          uint64_t v124 = *(void *)(a5 + 248);
          unsigned int v125 = v122 - 1;
          uint64_t v126 = (v122 - 1) & (v123 ^ (v236 >> 9));
          uint64_t v127 = *(void *)(v124 + 16 * v126);
          if (v236 != v127)
          {
            int v128 = 1;
            while (v127 != -4096)
            {
              int v129 = v126 + v128++;
              uint64_t v126 = v129 & v125;
              uint64_t v127 = *(void *)(v124 + 16 * v126);
              if (v236 == v127) {
                goto LABEL_130;
              }
            }
LABEL_174:
            LODWORD(v122) = 0;
            goto LABEL_175;
          }
LABEL_130:
          int v122 = *(uint64_t **)(v124 + 16 * v126 + 8);
          if (!v122) {
            goto LABEL_175;
          }
          int v130 = *(_DWORD *)(a4 + 80);
          if (v130)
          {
            int v132 = 16;
            uint64_t v131 = v228;
          }
          else
          {
            uint64_t v131 = *(void *)(a4 + 88);
            int v132 = *(_DWORD *)(a4 + 96);
            if (!v132)
            {
              uint64_t v217 = 0;
              goto LABEL_146;
            }
          }
          int v136 = v132 - 1;
          LODWORD(v217) = (v132 - 1) & ((v122 >> 4) ^ (v122 >> 9));
          int v137 = (uint64_t **)(v131 + 16 * v217);
          uint64_t v138 = *v137;
          if (*v137 != v122)
          {
            int v139 = 1;
            while (v138 != (uint64_t *)-4096)
            {
              int v140 = v217 + v139++;
              uint64_t v217 = v140 & v136;
              uint64_t v138 = *(uint64_t **)(v131 + 16 * v217);
              if (v138 == v122) {
                goto LABEL_146;
              }
            }
            if (v130)
            {
              uint64_t v131 = v228;
              uint64_t v217 = 16;
            }
            else
            {
              uint64_t v131 = *(void *)(a4 + 88);
              uint64_t v217 = *(unsigned int *)(a4 + 96);
            }
LABEL_146:
            int v137 = (uint64_t **)(v131 + 16 * v217);
          }
          if (*(void *)v122[4] != v236) {
            goto LABEL_141;
          }
          uint64_t v164 = (uint64_t *)*v122;
          if (*v122)
          {
            if (v130)
            {
              int v196 = 16;
              uint64_t v195 = v228;
            }
            else
            {
              uint64_t v195 = *(void *)(a4 + 88);
              int v196 = *(_DWORD *)(a4 + 96);
              if (!v196)
              {
                uint64_t v220 = 0;
                goto LABEL_265;
              }
            }
            int v202 = v196 - 1;
            LODWORD(v203) = (v196 - 1) & ((v164 >> 4) ^ (v164 >> 9));
            int v137 = (uint64_t **)(v195 + 16 * v203);
            uint64_t v204 = *v137;
            if (*v137 != v164)
            {
              int v205 = 1;
              while (v204 != (uint64_t *)-4096)
              {
                int v206 = v203 + v205++;
                uint64_t v203 = v206 & v202;
                uint64_t v204 = *(uint64_t **)(v195 + 16 * v203);
                if (v204 == v164)
                {
                  int v137 = (uint64_t **)(v195 + 16 * v203);
                  goto LABEL_141;
                }
              }
              if (v130)
              {
                uint64_t v195 = v228;
                uint64_t v220 = 16;
              }
              else
              {
                uint64_t v195 = *(void *)(a4 + 88);
                uint64_t v220 = *(unsigned int *)(a4 + 96);
              }
LABEL_265:
              int v137 = (uint64_t **)(v195 + 16 * v220);
            }
LABEL_141:
            LODWORD(v122) = *((_DWORD *)v137 + 2);
            goto LABEL_175;
          }
          goto LABEL_174;
        }
LABEL_175:
        unsigned int v165 = *(_DWORD *)(*(void *)a4 + 4 * v122);
        unsigned int v166 = v122 + 1;
        uint64_t v167 = *(void *)a4 + 4 * v166;
        BOOL v77 = v166 >= *(_DWORD *)(a4 + 8);
        BOOL v168 = (unsigned int *)v231;
        if (!v77) {
          BOOL v168 = (unsigned int *)v167;
        }
        unsigned int v169 = *v168;
        int v170 = *(_DWORD *)(a4 + 344);
        if (v170)
        {
          int v172 = 16;
          uint64_t v171 = v232;
        }
        else
        {
          uint64_t v171 = *(void *)(a4 + 352);
          int v172 = *(_DWORD *)(a4 + 360);
          if (!v172)
          {
            uint64_t v214 = 0;
LABEL_271:
            int v176 = (uint64_t *)(v171 + 32 * v214);
            uint64_t v7 = a6;
            goto LABEL_180;
          }
        }
        unsigned int v173 = v123 ^ (v236 >> 9);
        int v174 = v172 - 1;
        uint64_t v175 = (v172 - 1) & v173;
        int v176 = (uint64_t *)(v171 + 32 * v175);
        uint64_t v177 = *v176;
        if (*v176 != v236)
        {
          int v185 = 1;
          LODWORD(v186) = v175;
          while (v177 != -4096)
          {
            int v187 = v186 + v185++;
            uint64_t v186 = v187 & v174;
            uint64_t v177 = *(void *)(v171 + 32 * v186);
            if (v177 == v236)
            {
              int v176 = (uint64_t *)(v171 + 32 * v186);
              goto LABEL_180;
            }
          }
          if (v170)
          {
            uint64_t v214 = 16;
            uint64_t v171 = v232;
          }
          else
          {
            uint64_t v171 = *(void *)(a4 + 352);
            uint64_t v214 = *(unsigned int *)(a4 + 360);
          }
          goto LABEL_271;
        }
LABEL_180:
        uint64_t v178 = *(void *)(a4 + 352);
        LODWORD(v179) = *(_DWORD *)(a4 + 360);
        if (v170)
        {
          uint64_t v178 = v232;
          uint64_t v179 = 16;
        }
        else
        {
          uint64_t v179 = v179;
        }
        if ((uint64_t *)(v178 + 32 * v179) == v176 || (uint64_t v180 = *((unsigned int *)v176 + 4), !v180))
        {
LABEL_218:
          unsigned int v183 = -1;
        }
        else
        {
          unsigned int v181 = (unsigned int *)v176[1];
          uint64_t v182 = 4 * v180;
          while (1)
          {
            unsigned int v183 = *v181;
            if (*v181 >= v165 && v183 <= v169) {
              break;
            }
            ++v181;
            v182 -= 4;
            if (!v182) {
              goto LABEL_218;
            }
          }
        }
        *(_DWORD *)(v19 + 48 * v17 + 16) = v183;
LABEL_191:
        unsigned int v13 = v17 + 1;
        int v16 = v230;
      }
      unint64_t v12 = v226;
    }
    while (v226 != v223);
  }
  return result;
}

uint64_t llvm::FlowAnalyzer::doesntControlDirectlyNodes(unsigned int a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a2 + 864) + 48 * a1;
  uint64_t v5 = *(unsigned int *)(v4 + 32);
  if (!v5) {
    return 1;
  }
  uint64_t v7 = *(unsigned int **)(v4 + 24);
  uint64_t v8 = 4 * v5;
  while (1)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = *a3 + (v9 << 6);
    int v11 = *(_DWORD *)(v10 + 16);
    if (v11 == 1) {
      break;
    }
    if (!v11) {
      goto LABEL_7;
    }
LABEL_8:
    ++v7;
    v8 -= 4;
    if (!v8) {
      return 1;
    }
  }
  if ((*(unsigned char *)(*(void *)(a3[267] + 864) + 48 * **(unsigned int **)(v10 + 8) + 8) & 0x10) != 0) {
    goto LABEL_8;
  }
LABEL_7:
  if (sub_1CC74F8BC((uint64_t)a3, v9, a1) == -1) {
    goto LABEL_8;
  }
  return 0;
}

unint64_t sub_1CC74F8BC(uint64_t a1, int a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v21[0] = a2;
  unsigned int v20 = 10;
  uint64_t v5 = *(unsigned int *)(a1 + 2072);
  if (v5) {
    bzero(*(void **)(a1 + 2064), 8 * v5);
  }
  uint64_t v6 = 0xFFFFFFFFLL;
  unsigned int v7 = 1;
  while (1)
  {
    uint64_t v8 = v21[--v7];
    unsigned int v19 = v7;
    uint64_t v9 = *(void *)a1 + (v8 << 6);
    uint64_t v10 = *(unsigned int *)(v9 + 16);
    if (v10) {
      break;
    }
LABEL_11:
    if (!v7)
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0xFF00000000;
      return v17 | v6 | v16;
    }
  }
  int v11 = *(void **)(v9 + 8);
  uint64_t v12 = 8 * v10;
  while (1)
  {
    unint64_t v13 = *(unsigned int *)v11;
    if (v13 == a3) {
      break;
    }
    uint64_t v14 = *(void *)(a1 + 2064);
    uint64_t v15 = *(void *)(v14 + 8 * (v13 >> 6));
    if ((v15 & (1 << v13)) == 0)
    {
      *(void *)(v14 + 8 * (v13 >> 6)) = v15 | (1 << v13);
      if (v7 >= v20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v21[v7] = v13;
      unsigned int v7 = ++v19;
    }
    ++v11;
    v12 -= 8;
    if (!v12) {
      goto LABEL_11;
    }
  }
  unint64_t v16 = *v11 & 0xFFFFFF0000000000;
  uint64_t v17 = *v11 & 0xFF00000000;
  uint64_t v6 = *v11;
  return v17 | v6 | v16;
}

void llvm::FlowAnalyzer::constructBlockOrder(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = a2;
  v143[16] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 1628) < *(_DWORD *)(a2 + 872)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v121 = *(unsigned int *)(a2 + 8);
  if (v121)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = (int *)(a2 + 872);
    uint64_t v119 = (int *)(a2 + 872);
    do
    {
      unsigned int v124 = v9;
      unint64_t v11 = *(unsigned int *)(*(void *)v6 + 4 * v8);
      unint64_t v12 = v8 + 1;
      unint64_t v13 = (int *)(*(void *)v6 + 4 * v12);
      if (v12 >= *(unsigned int *)(v6 + 8)) {
        unint64_t v13 = v10;
      }
      int v14 = *v13;
      unint64_t v15 = (v14 - v11);
      uint64_t v141 = (char *)v143;
      uint64_t v142 = 0x200000000;
      int v132 = v134;
      uint64_t v133 = 0x2000000000;
      unint64_t v126 = v11;
      int v122 = v14;
      if (v15 >= 0x21)
      {
        if (v15 <= 0x41) {
          uint64_t v103 = 65;
        }
        else {
          uint64_t v103 = (v14 - v11);
        }
        uint64_t v104 = (char *)malloc_type_malloc(24 * v103, 0x4065EBACuLL);
        if (!v104) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v105 = v104;
        uint64_t v106 = 0;
        unint64_t v11 = v126;
        do
        {
          int v107 = &v105[v106];
          *(void *)int v107 = &v105[v106 + 16];
          *((void *)v107 + 1) = 0x200000000;
          if (v142)
          {
            sub_1CD59F0BC((uint64_t)v107, (uint64_t)&v141);
            unint64_t v11 = v126;
          }
          v106 += 24;
        }
        while (24 * v15 != v106);
        uint64_t v108 = v132;
        if (v133)
        {
          uint64_t v116 = 24 * v133;
          do
          {
            uint64_t v117 = *(char **)&v108[v116 - 24];
            if (&v108[v116 - 8] != v117) {
              free(v117);
            }
            v116 -= 24;
          }
          while (v116);
          uint64_t v108 = v132;
          unint64_t v11 = v126;
        }
        if (v108 != v134)
        {
          free(v108);
          unint64_t v11 = v126;
        }
        int v132 = v105;
        HIDWORD(v133) = v103;
      }
      else if (v14 != v11)
      {
        unint64_t v16 = v134;
        uint64_t v17 = (v14 - v11);
        do
        {
          *unint64_t v16 = v16 + 2;
          v16[1] = 0x200000000;
          if (v142)
          {
            unint64_t v16 = (void *)sub_1CD59F0BC((uint64_t)v16, (uint64_t)&v141);
            unint64_t v11 = v126;
          }
          v16 += 3;
          --v17;
        }
        while (v17);
      }
      LODWORD(v133) = v15;
      if (v141 != (char *)v143)
      {
        free(v141);
        unint64_t v11 = v126;
      }
      int v128 = v130;
      uint64_t v129 = 0x2000000000;
      uint64_t v141 = (char *)v143;
      v143[0] = v11;
      uint64_t v142 = 0x1000000001;
      int v135 = v137;
      uint64_t v136 = 0x1000000000;
      int v139 = 0;
      uint64_t v140 = 0;
      unsigned int v18 = 1;
      uint64_t v138 = &v139;
      do
      {
        unsigned int v19 = v141;
        unsigned int v20 = &v141[8 * v18];
        unsigned int v21 = *((_DWORD *)v20 - 2);
        uint64_t v22 = *(v20 - 4);
        uint64_t v23 = *(void *)(v6 + 864) + 48 * v21;
        if (*(_DWORD *)(v23 + 32) != v22)
        {
          uint64_t v24 = *(void *)(v23 + 24);
          uint64_t v25 = *(unsigned int *)(v24 + 4 * v22);
          unsigned int v127 = *(_DWORD *)(v24 + 4 * v22);
          *(v20 - 4) = v22 + 1;
          if (v140)
          {
            for (uint64_t i = v139; i; uint64_t i = (void *)*i)
            {
              unsigned int v27 = *((_DWORD *)i + 7);
              if (v25 >= v27)
              {
                if (v27 >= v25) {
                  goto LABEL_24;
                }
                ++i;
              }
            }
            goto LABEL_22;
          }
          if (!v136) {
            goto LABEL_22;
          }
          unsigned int v28 = v135;
          uint64_t v29 = 4 * v136;
          while (*v28 != v25)
          {
            ++v28;
            v29 -= 4;
            if (!v29) {
              goto LABEL_22;
            }
          }
          if (!v29)
          {
LABEL_22:
            if (v18 >= HIDWORD(v142)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v19[v18] = v25;
            LODWORD(v142) = v142 + 1;
          }
LABEL_24:
          sub_1CC7527EC((uint64_t)&v135, &v127);
          unsigned int v18 = v142;
          continue;
        }
        if (v129 >= (unint64_t)HIDWORD(v129)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v128 + v129) = v21;
        LODWORD(v129) = v129 + 1;
        unsigned int v18 = v142 - 1;
        LODWORD(v142) = v142 - 1;
      }
      while (v18);
      sub_1CB833A08((uint64_t)&v138, v139);
      if (v135 != v137) {
        free(v135);
      }
      unint64_t v123 = v12;
      if (v141 != (char *)v143) {
        free(v141);
      }
      uint64_t v30 = (char *)v128;
      unsigned int v125 = (char *)v128 + 4 * v129;
      unint64_t v31 = v126;
      if (v129)
      {
        while (1)
        {
          uint64_t v32 = *(unsigned int *)v30;
          uint64_t v33 = *a4 + (v32 << 6);
          int v34 = *(_DWORD *)(v33 + 16);
          if (v34 == 1)
          {
            if ((*(unsigned char *)(*(void *)(a4[267] + 864) + 48 * **(unsigned int **)(v33 + 8) + 8) & 0x10) != 0) {
              goto LABEL_57;
            }
          }
          else if (v34)
          {
LABEL_57:
            int v51 = &v132[24 * (*(_DWORD *)(*a5 + 4 * v32) - v31)];
            unint64_t v52 = *((unsigned int *)v51 + 2);
            if (v52 >= *((unsigned int *)v51 + 3)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)v51 + 4 * v52) = v32;
            ++*((_DWORD *)v51 + 2);
          }
          int v35 = a4;
          uint64_t v36 = *(void *)(a1 + 64);
          uint64_t v37 = v6;
          unsigned int v38 = &v132[24 * (v32 - v31)];
          uint64_t v39 = *(void *)(v6 + 864) + 48 * v32;
          uint64_t v40 = *(const void **)(v39 + 24);
          uint64_t v41 = *(unsigned int *)(v39 + 32);
          uint64_t v42 = *((unsigned int *)v38 + 2);
          if (v41 + v42 > (unint64_t)*((unsigned int *)v38 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v43 = *((_DWORD *)v38 + 2);
          if (v41)
          {
            memcpy((void *)(*(void *)v38 + 4 * v43), v40, 4 * v41);
            unint64_t v31 = v126;
            unsigned int v43 = *((_DWORD *)v38 + 2);
          }
          uint64_t v44 = v43 + v41;
          *((_DWORD *)v38 + 2) = v44;
          int v45 = *(_DWORD *)(v36 + 48 * v32 + 16);
          uint64_t v6 = v37;
          if (v45 != -1)
          {
            uint64_t v46 = (_DWORD *)(*(void *)v38 + 4 * v42);
            uint64_t v47 = *(void *)v38 + 4 * v44;
            int v48 = v46;
            if (v42 != v44)
            {
              uint64_t v49 = 4 * v44 - 4 * v42;
              int v48 = (_DWORD *)(*(void *)v38 + 4 * v42);
              do
              {
                if (*v48 == v45) {
                  goto LABEL_52;
                }
                ++v48;
                v49 -= 4;
              }
              while (v49);
              int v48 = (_DWORD *)v47;
            }
LABEL_52:
            if (v48 != (_DWORD *)v47)
            {
              int v50 = *v46;
              *uint64_t v46 = *v48;
              _DWORD *v48 = v50;
            }
          }
          v30 += 4;
          a4 = v35;
          if (v30 == v125)
          {
            uint64_t v30 = (char *)v128;
            break;
          }
        }
      }
      if (v30 != v130)
      {
        free(v30);
        unint64_t v31 = v126;
      }
      uint64_t v141 = (char *)v143;
      v143[0] = v31;
      uint64_t v142 = 0xA00000001;
      uint64_t v10 = v119;
      int v53 = *v119;
      unsigned int v54 = *v119 + 63;
      uint64_t v55 = v54 >> 6;
      int v128 = v130;
      HIDWORD(v129) = 6;
      if (v54 >= 0x1C0)
      {
        LODWORD(v129) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v8 = v123;
      if (v54 >= 0x40)
      {
        bzero(v130, 8 * v55);
        unint64_t v31 = v126;
      }
      unsigned int v56 = 1;
      LODWORD(v129) = v55;
      int v131 = v53;
      *(void *)&v130[(v31 >> 3) & 0x1FFFFFF8] |= 1 << v31;
      while (2)
      {
        int v57 = v141;
        uint64_t v58 = &v141[8 * v56];
        uint64_t v59 = *((unsigned int *)v58 - 2);
        unsigned int v60 = *((_DWORD *)v58 - 1);
        unsigned int v61 = &v132[24 * (v59 - v31)];
        int v62 = *((_DWORD *)v61 + 2);
        if (v62 != v60)
        {
          uint64_t v63 = *(void *)v61;
          uint64_t v64 = v128;
          int v65 = v62 - 1;
          do
          {
            *((_DWORD *)v58 - 1) = v60 + 1;
            unint64_t v66 = *(unsigned int *)(v63 + 4 * v60);
            if ((*(void *)((char *)v64 + ((v66 >> 3) & 0x1FFFFFF8)) >> v66)) {
              uint64_t v67 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v67 = v66;
            }
            if (v65 == v60) {
              break;
            }
            ++v60;
          }
          while (v67 == -1);
          unsigned int v56 = v142;
          if (v67 != -1)
          {
            v64[v67 >> 6] |= 1 << v67;
            if (v56 >= HIDWORD(v142)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v57[v56] = v67;
            unsigned int v56 = v142 + 1;
            LODWORD(v142) = v142 + 1;
          }
          goto LABEL_75;
        }
        uint64_t v68 = *(void *)(v6 + 864);
        uint64_t v69 = *(void *)(a1 + 64);
        int v70 = *(unsigned __int8 *)(v68 + 48 * v59 + 8);
        if ((v70 & 8) != 0)
        {
          uint64_t v75 = *(void *)(v68 + 48 * v59 + 16);
          uint64_t v76 = *(void *)(a3 + 248);
          int v77 = *(_DWORD *)(a3 + 264) - 1;
          unsigned int v78 = ((v75 >> 4) ^ (v75 >> 9)) & v77;
          int v79 = (void *)(v76 + 16 * v78);
          uint64_t v80 = *v79;
          if (v75 != *v79)
          {
            int v81 = 0;
            int v82 = 1;
            while (v80 != -4096)
            {
              if (v81) {
                BOOL v83 = 0;
              }
              else {
                BOOL v83 = v80 == -8192;
              }
              if (v83) {
                int v81 = v79;
              }
              unsigned int v84 = v78 + v82++;
              unsigned int v78 = v84 & v77;
              int v79 = (void *)(v76 + 16 * (v84 & v77));
              uint64_t v80 = *v79;
              if (v75 == *v79) {
                goto LABEL_99;
              }
            }
            if (v81) {
              int v79 = v81;
            }
          }
LABEL_99:
          unsigned int v72 = *(_DWORD *)(v69 + 48 * v59 + 12);
          if (**(void **)(v79[1] + 32) == *(void *)(v68 + 48 * v72 + 16)) {
            goto LABEL_85;
          }
        }
        else if ((v70 & 0x12) == 2)
        {
          int v95 = *(_DWORD *)(a3 + 264);
          if (!v95) {
            goto LABEL_85;
          }
          uint64_t v96 = *(void *)(v68 + 48 * v59 + 16);
          uint64_t v97 = *(void *)(a3 + 248);
          unsigned int v98 = v95 - 1;
          uint64_t v99 = ((v96 >> 4) ^ (v96 >> 9)) & v98;
          uint64_t v100 = *(void *)(v97 + 16 * v99);
          if (v96 == v100)
          {
LABEL_156:
            uint64_t v109 = *(void *)(v97 + 16 * v99 + 8);
          }
          else
          {
            int v101 = 1;
            while (v100 != -4096)
            {
              int v102 = v99 + v101++;
              uint64_t v99 = v102 & v98;
              uint64_t v100 = *(void *)(v97 + 16 * v99);
              if (v96 == v100) {
                goto LABEL_156;
              }
            }
            uint64_t v109 = 0;
          }
          uint64_t v110 = *(void *)(v68 + 48 * *(unsigned int *)(v69 + 48 * v59 + 12) + 16);
          uint64_t v111 = ((v110 >> 4) ^ (v110 >> 9)) & v98;
          uint64_t v112 = *(void *)(v97 + 16 * v111);
          if (v110 == v112)
          {
LABEL_157:
            uint64_t v115 = *(void *)(v97 + 16 * v111 + 8);
          }
          else
          {
            int v113 = 1;
            while (v112 != -4096)
            {
              int v114 = v111 + v113++;
              uint64_t v111 = v114 & v98;
              uint64_t v112 = *(void *)(v97 + 16 * v111);
              if (v110 == v112) {
                goto LABEL_157;
              }
            }
            uint64_t v115 = 0;
          }
          if (v115 == v109) {
            goto LABEL_85;
          }
          unsigned int v72 = *(_DWORD *)(v69 + 48 * v59 + 12);
        }
        else
        {
          if (v70 != 1 && (v70 & 4) == 0) {
            goto LABEL_85;
          }
          if (*(_DWORD *)(v68 + 48 * v59 + 32) < 2u) {
            goto LABEL_85;
          }
          unsigned int v72 = *(_DWORD *)(v69 + 48 * v59 + 12);
          if (v72 == *(_DWORD *)(*(void *)(a1 + 1616) + 4 * *(unsigned int *)(a1 + 1624) - 4)) {
            goto LABEL_85;
          }
        }
        uint64_t v85 = v69 + 48 * v59;
        *(_DWORD *)(v85 + 12) = *(_DWORD *)(v85 + 16);
        *(_DWORD *)(v85 + 16) = v72;
        *(_WORD *)(v85 + 44) ^= 4u;
        unsigned int v56 = v142;
LABEL_85:
        LODWORD(v142) = v56 - 1;
        unint64_t v73 = *(unsigned int *)(a1 + 1624);
        if (v73 >= *(unsigned int *)(a1 + 1628)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)(a1 + 1616) + 4 * v73) = *((_DWORD *)v58 - 2);
        int v74 = *(_DWORD *)(a1 + 1624);
        *(_DWORD *)(a1 + 1624) = v74 + 1;
        *(_DWORD *)(*(void *)(a1 + 1760) + 4 * *((unsigned int *)v58 - 2)) = v122 + v124 + ~v74;
        unsigned int v56 = v142;
LABEL_75:
        if (v56) {
          continue;
        }
        break;
      }
      uint64_t v86 = *(unsigned int *)(a1 + 1624);
      if (v124 != v86)
      {
        uint64_t v87 = *(void *)(a1 + 1616);
        unint64_t v88 = (_DWORD *)(v87 + 4 * v86 - 4);
        if (v87 + 4 * (unint64_t)v124 < (unint64_t)v88)
        {
          unint64_t v89 = v87 + 4 * v124 + 4;
          do
          {
            int v90 = *(_DWORD *)(v89 - 4);
            *(_DWORD *)(v89 - 4) = *v88;
            *v88-- = v90;
            BOOL v91 = v89 >= (unint64_t)v88;
            v89 += 4;
          }
          while (!v91);
          LODWORD(v86) = *(_DWORD *)(a1 + 1624);
        }
      }
      if (v128 != v130) {
        free(v128);
      }
      if (v141 != (char *)v143) {
        free(v141);
      }
      unint64_t v92 = v132;
      if (v133)
      {
        uint64_t v93 = 24 * v133;
        do
        {
          uint64_t v94 = *(char **)&v92[v93 - 24];
          if (&v92[v93 - 8] != v94) {
            free(v94);
          }
          v93 -= 24;
        }
        while (v93);
        unint64_t v92 = v132;
      }
      if (v92 != v134) {
        free(v92);
      }
      unsigned int v9 = v86;
    }
    while (v123 != v121);
  }
}

void llvm::FlowAnalyzer::evaluateSkipTargets(void *a1, unsigned int a2, unsigned int a3, uint64_t *a4, void *a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  uint64_t v6 = a1[8];
  if ((*(_WORD *)(v6 + 48 * a2 + 44) & 0x101) != 0) {
    return;
  }
  uint64_t v7 = v6 + 48 * a2;
  int v9 = *(_DWORD *)(v7 + 20);
  unint64_t v8 = (unsigned int *)(v7 + 20);
  if (v9 != -1) {
    return;
  }
  if ((*(void *)(*a4 + 8 * (a2 >> 6)) >> a2)) {
    return;
  }
  if (!*(_DWORD *)(*a5 + ((unint64_t)a2 << 6) + 16)) {
    return;
  }
  unsigned int v29 = 0;
  unsigned int v15 = *(_DWORD *)(a1[220] + 4 * a2) + 1;
  if (v15 >= a3) {
    return;
  }
  unsigned int v16 = *(_DWORD *)(a1[202] + 4 * v15);
  if (v16 == -1 || v16 == a3) {
    return;
  }
  while (1)
  {
    if (v16 == a2) {
      goto LABEL_38;
    }
    unint64_t v18 = *a5 + ((unint64_t)v16 << 6);
    uint64_t v19 = *(unsigned int *)(v18 + 16);
    uint64_t v20 = *a5 + (v5 << 6);
    if (v19 != *(_DWORD *)(v20 + 16)) {
      goto LABEL_18;
    }
    if (!v19)
    {
LABEL_38:
    {
LABEL_27:
      if (v29 >= 0x10uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
      *(_DWORD *)&v30[4 * v29++] = v16;
    }
    else
    {
      uint64_t v21 = *(void *)(v18 + 8);
      uint64_t v22 = v21 + 8 * v19;
      uint64_t v23 = *(void *)(v20 + 8);
      while (*(_DWORD *)v21 == *(_DWORD *)v23 && *(unsigned __int8 *)(v21 + 4) == *(unsigned __int8 *)(v23 + 4))
      {
        v21 += 8;
        v23 += 8;
        if (v21 == v22) {
          goto LABEL_27;
        }
      }
    }
LABEL_18:
    if ((sub_1CC750908((uint64_t)a5, v16, v5) & 1) == 0) {
      break;
    }
    unsigned int v25 = *(_DWORD *)(a1[220] + 4 * v16) + 1;
    if (v25 < a3)
    {
      unsigned int v16 = *(_DWORD *)(a1[202] + 4 * v25);
      if (v16 != -1 && v16 != a3) {
        continue;
      }
    }
    return;
  }
  *unint64_t v8 = v16;
  if (v29)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    do
    {
      *(void *)(v28 + (((unint64_t)*(unsigned int *)&v30[v27] >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)&v30[v27];
      v27 += 4;
    }
    while (4 * v29 != v27);
  }
}

uint64_t sub_1CC750908(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return 1;
  }
  unint64_t v5 = *(void *)a1 + ((unint64_t)a2 << 6);
  uint64_t v6 = *(unsigned int *)(v5 + 16);
  unint64_t v7 = *(void *)a1 + ((unint64_t)a3 << 6);
  unint64_t v8 = v7 + 8;
  if (v6 == *(_DWORD *)(v7 + 16))
  {
    if (v6)
    {
      uint64_t v9 = *(void *)(v5 + 8);
      uint64_t v10 = v9 + 8 * v6;
      uint64_t v11 = *(void *)v8;
      BOOL v12 = 1;
      while (*(_DWORD *)v9 == *(_DWORD *)v11 && *(unsigned __int8 *)(v9 + 4) == *(unsigned __int8 *)(v11 + 4))
      {
        v9 += 8;
        v11 += 8;
        if (v9 == v10) {
          return v12;
        }
      }
      goto LABEL_9;
    }
    return 1;
  }
LABEL_9:
  int v14 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v35;
  int v34 = 6;
  if ((v14 + 63) >= 0x1C0)
  {
    unsigned int v33 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v14 + 63) >= 0x40) {
    bzero(v35, 8 * ((v14 + 63) >> 6));
  }
  unsigned int v33 = (v14 + 63) >> 6;
  v35[12] = v14;
  v31[0] = a2;
  unsigned int v30 = 4;
  unsigned int v15 = 1;
  do
  {
    uint64_t v16 = v31[--v15];
    unsigned int v29 = v15;
    uint64_t v17 = *(void *)a1 + (v16 << 6);
    uint64_t v18 = *(unsigned int *)(v17 + 16);
    BOOL v12 = *(_DWORD *)(v17 + 16) != 0;
    if (!v18) {
      break;
    }
    uint64_t v19 = *(uint64_t **)(v17 + 8);
    uint64_t v20 = &v19[v18];
    do
    {
      uint64_t v21 = *v19;
      uint64_t v22 = *(void *)v8;
      uint64_t v23 = *(unsigned int *)(v8 + 8);
      if (v23)
      {
        uint64_t v24 = 8 * v23;
        uint64_t v25 = *(void *)v8;
        while (__PAIR64__(*(unsigned __int8 *)(v25 + 4), *(_DWORD *)v25) != __PAIR64__(BYTE4(v21), v21))
        {
          v25 += 8;
          v24 -= 8;
          if (!v24)
          {
            uint64_t v25 = v22 + 8 * v23;
            break;
          }
        }
      }
      else
      {
        uint64_t v25 = *(void *)v8;
      }
      if (v23 == (v25 - v22) >> 3)
      {
        uint64_t v26 = v21 >> 6;
        uint64_t v27 = *((void *)v32 + v26);
        if ((v27 & (1 << v21)) == 0)
        {
          *((void *)v32 + v26) = v27 | (1 << v21);
          if (v15 >= v30) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v31[v15] = v21;
          unsigned int v15 = ++v29;
        }
      }
      ++v19;
    }
    while (v19 != v20);
  }
  while (v15);
  if (v32 != v35) {
    free(v32);
  }
  return v12;
}

void sub_1CC750BC0()
{
}

void llvm::FlowAnalyzer::collapseEmptyUnstructuredNodes(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 1616);
  int v109 = *(_DWORD *)(a1 + 1624);
  uint64_t v6 = (unsigned int *)(a2 + 109);
  int v7 = *((_DWORD *)a2 + 218);
  int v122 = v125;
  int v124 = 6;
  uint64_t v110 = v5;
  if ((v7 + 63) >= 0x1C0)
  {
    unsigned int v123 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v7 + 63) >= 0x40)
  {
    bzero(v125, 8 * ((v7 + 63) >> 6));
    unsigned int v123 = (v7 + 63) >> 6;
    int v126 = v7;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    unsigned int v114 = 0;
    goto LABEL_6;
  }
  unsigned int v123 = (v7 + 63) >> 6;
  int v126 = v7;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  unsigned int v114 = 0;
  if (v7)
  {
LABEL_6:
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a2[108];
      if ((v9[12 * v8 + 2] & 0x10) == 0)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        int v11 = *(unsigned __int16 *)(v10 + 48 * v8 + 44);
        if ((~v11 & 0x81) == 0
          && (v11 & 4) == 0
          && *(_DWORD *)(v10 + 48 * v8 + 12) != -1
          && *(_DWORD *)(v10 + 48 * v8 + 16) == -1)
        {
          BOOL v12 = *(llvm::MachineBasicBlock **)&v9[12 * v8 + 4];
          unint64_t v13 = (void *)((char *)v12 + 48);
          if ((llvm::MachineBasicBlock *)((char *)v12 + 48) != (llvm::MachineBasicBlock *)(*((void *)v12 + 6) & 0xFFFFFFFFFFFFFFF8))
          {
            int v14 = -1;
            unsigned int v15 = (void *)((char *)v12 + 48);
            do
            {
              unsigned int v15 = (void *)v15[1];
              ++v14;
            }
            while (v15 != v13);
            if (v14 != 1 || v13 == (void *)llvm::MachineBasicBlock::getFirstTerminator(v12))
            {
              for (uint64_t i = *((void *)v12 + 7); (void *)i != v13; uint64_t i = *(void *)(i + 8))
              {
                if (**(_WORD **)(i + 16) != 10) {
                  goto LABEL_18;
                }
                if ((*(unsigned char *)i & 4) == 0)
                {
                  while ((*(_WORD *)(i + 44) & 8) != 0)
                    uint64_t i = *(void *)(i + 8);
                }
              }
            }
          }
          *(void *)&v122[8 * (v8 >> 6)] |= 1 << v8;
        }
      }
LABEL_18:
      ++v8;
    }
    while (v8 != v7);
    unsigned int v17 = *v6;
    goto LABEL_28;
  }
  unsigned int v17 = 0;
LABEL_28:
  int v18 = **a2;
  uint64_t v119 = v121;
  v121[0] = v18;
  uint64_t v120 = 0x500000001;
  uint64_t v115 = v118;
  int v117 = 6;
  if (v17 + 63 > 0x1BF)
  {
    unsigned int v116 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v17 + 63 >= 0x40) {
    bzero(v118, 8 * ((v17 + 63) >> 6));
  }
  unsigned int v116 = (v17 + 63) >> 6;
  v118[12] = v17;
  unsigned int v19 = 1;
  uint64_t v20 = a2 + 11;
  do
  {
    unsigned int v21 = *((_DWORD *)v119 + --v19);
    LODWORD(v120) = v19;
    uint64_t v22 = *(void *)&a2[108][12 * v21 + 4];
    uint64_t v23 = *(uint64_t **)(v22 + 88);
    uint64_t v24 = *(uint64_t **)(v22 + 96);
    if (v23 == v24) {
      continue;
    }
    do
    {
      uint64_t v25 = (int *)*v23;
      LODWORD(v26) = *(_DWORD *)(a3 + 264);
      unsigned int v27 = *v23 >> 4;
      if (!v26) {
        goto LABEL_46;
      }
      uint64_t v28 = *(void *)(a3 + 248);
      unsigned int v29 = v26 - 1;
      uint64_t v30 = (v27 ^ (v25 >> 9)) & (v26 - 1);
      uint64_t v31 = *(int **)(v28 + 16 * v30);
      if (v25 == v31)
      {
LABEL_38:
        uint64_t v26 = *(void *)(v28 + 16 * v30 + 8);
        if (!v26) {
          goto LABEL_46;
        }
        int v34 = *((_DWORD *)a2 + 20);
        if (v34)
        {
          int v36 = 16;
          int v35 = (int *)v20;
        }
        else
        {
          int v35 = a2[11];
          int v36 = *((_DWORD *)a2 + 24);
          if (!v36)
          {
            uint64_t v37 = 0;
            goto LABEL_116;
          }
        }
        int v38 = v36 - 1;
        LODWORD(v39) = (v36 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        uint64_t v40 = (uint64_t *)&v35[4 * v39];
        uint64_t v41 = *v40;
        if (*v40 != v26)
        {
          int v74 = 1;
          while (v41 != -4096)
          {
            int v75 = v39 + v74++;
            uint64_t v39 = v75 & v38;
            uint64_t v41 = *(void *)&v35[4 * v39];
            if (v41 == v26)
            {
              uint64_t v40 = (uint64_t *)&v35[4 * v39];
              goto LABEL_45;
            }
          }
          if (v34)
          {
            int v35 = (int *)v20;
            uint64_t v37 = 16;
          }
          else
          {
            int v35 = a2[11];
            uint64_t v37 = *((unsigned int *)a2 + 24);
          }
LABEL_116:
          uint64_t v40 = (uint64_t *)&v35[4 * v37];
        }
LABEL_45:
        LODWORD(v26) = *((_DWORD *)v40 + 2);
        goto LABEL_46;
      }
      int v32 = 1;
      while (v31 != (int *)-4096)
      {
        int v33 = v30 + v32++;
        uint64_t v30 = v33 & v29;
        uint64_t v31 = *(int **)(v28 + 16 * v30);
        if (v25 == v31) {
          goto LABEL_38;
        }
      }
      LODWORD(v26) = 0;
LABEL_46:
      unsigned int v42 = (*a2)[v26];
      unsigned int v43 = v26 + 1;
      if (v43 >= *((_DWORD *)a2 + 2)) {
        uint64_t v44 = v6;
      }
      else {
        uint64_t v44 = (unsigned int *)&(*a2)[v43];
      }
      unsigned int v45 = *v44;
      int v46 = *((_DWORD *)a2 + 86);
      if (v46)
      {
        int v48 = 16;
        uint64_t v47 = a2 + 44;
      }
      else
      {
        uint64_t v47 = (int **)a2[44];
        int v48 = *((_DWORD *)a2 + 90);
        if (!v48)
        {
          uint64_t v82 = 0;
          goto LABEL_120;
        }
      }
      unsigned int v49 = v27 ^ (v25 >> 9);
      int v50 = v48 - 1;
      uint64_t v51 = (v48 - 1) & v49;
      unint64_t v52 = (uint64_t *)&v47[4 * v51];
      int v53 = (int *)*v52;
      if ((int *)*v52 == v25) {
        goto LABEL_56;
      }
      int v54 = 1;
      LODWORD(v55) = v51;
      while (v53 != (int *)-4096)
      {
        int v56 = v55 + v54++;
        uint64_t v55 = v56 & v50;
        int v53 = v47[4 * v55];
        if (v53 == v25)
        {
          unint64_t v52 = (uint64_t *)&v47[4 * v55];
          goto LABEL_56;
        }
      }
      if (v46)
      {
        uint64_t v47 = a2 + 44;
        uint64_t v82 = 16;
      }
      else
      {
        uint64_t v47 = (int **)a2[44];
        uint64_t v82 = *((unsigned int *)a2 + 90);
      }
LABEL_120:
      unint64_t v52 = (uint64_t *)&v47[4 * v82];
      uint64_t v20 = a2 + 11;
LABEL_56:
      int v57 = (int **)a2[44];
      LODWORD(v58) = *((_DWORD *)a2 + 90);
      if (v46)
      {
        int v57 = a2 + 44;
        uint64_t v58 = 16;
      }
      else
      {
        uint64_t v58 = v58;
      }
      if (&v57[4 * v58] == (int **)v52 || (uint64_t v59 = *((unsigned int *)v52 + 4), !v59))
      {
LABEL_68:
        unsigned int v62 = -1;
      }
      else
      {
        unsigned int v60 = (unsigned int *)v52[1];
        uint64_t v61 = 4 * v59;
        while (1)
        {
          unsigned int v62 = *v60;
          if (*v60 >= v42 && v62 <= v45) {
            break;
          }
          ++v60;
          v61 -= 4;
          if (!v61) {
            goto LABEL_68;
          }
        }
      }
      if (v114)
      {
        uint64_t v64 = (v114 - 1) & (37 * v62);
        int v65 = (unsigned int *)(v112 + 32 * v64);
        unsigned int v66 = *v65;
        if (v62 == *v65) {
          goto LABEL_87;
        }
        uint64_t v67 = 0;
        int v68 = 1;
        while (v66 != -1)
        {
          if (v67) {
            BOOL v69 = 0;
          }
          else {
            BOOL v69 = v66 == -2;
          }
          if (v69) {
            uint64_t v67 = v65;
          }
          int v70 = v64 + v68++;
          uint64_t v64 = v70 & (v114 - 1);
          int v65 = (unsigned int *)(v112 + 32 * v64);
          unsigned int v66 = *v65;
          if (v62 == *v65) {
            goto LABEL_87;
          }
        }
        if (v67) {
          int v65 = v67;
        }
      }
      else
      {
        int v65 = 0;
      }
      if (4 * (int)v113 + 4 >= 3 * v114)
      {
        sub_1CC752A24(&v112, 2 * v114);
        if (v114)
        {
          uint64_t v76 = (v114 - 1) & (37 * v62);
          int v65 = (unsigned int *)(v112 + 32 * v76);
          unsigned int v77 = *v65;
          uint64_t v20 = a2 + 11;
          if (v62 != *v65)
          {
            unsigned int v78 = 0;
            int v79 = 1;
            while (v77 != -1)
            {
              if (v78) {
                BOOL v80 = 0;
              }
              else {
                BOOL v80 = v77 == -2;
              }
              if (v80) {
                unsigned int v78 = v65;
              }
              int v81 = v76 + v79++;
              uint64_t v76 = v81 & (v114 - 1);
              int v65 = (unsigned int *)(v112 + 32 * v76);
              unsigned int v77 = *v65;
              if (v62 == *v65) {
                goto LABEL_84;
              }
            }
            if (v78) {
              int v65 = v78;
            }
          }
          goto LABEL_84;
        }
LABEL_134:
        int v65 = 0;
LABEL_135:
        uint64_t v20 = a2 + 11;
        goto LABEL_84;
      }
      if (v114 + ~v113 - HIDWORD(v113) <= v114 >> 3)
      {
        sub_1CC752A24(&v112, v114);
        if (!v114) {
          goto LABEL_134;
        }
        uint64_t v83 = (v114 - 1) & (37 * v62);
        int v65 = (unsigned int *)(v112 + 32 * v83);
        unsigned int v84 = *v65;
        if (v62 != *v65)
        {
          uint64_t v85 = 0;
          int v86 = 1;
          while (v84 != -1)
          {
            if (v85) {
              BOOL v87 = 0;
            }
            else {
              BOOL v87 = v84 == -2;
            }
            if (v87) {
              uint64_t v85 = v65;
            }
            int v88 = v83 + v86++;
            uint64_t v83 = v88 & (v114 - 1);
            int v65 = (unsigned int *)(v112 + 32 * v83);
            unsigned int v84 = *v65;
            uint64_t v20 = a2 + 11;
            if (v62 == *v65) {
              goto LABEL_84;
            }
          }
          if (v85) {
            int v65 = v85;
          }
        }
        goto LABEL_135;
      }
LABEL_84:
      LODWORD(v113) = v113 + 1;
      if (*v65 != -1) {
        --HIDWORD(v113);
      }
      *int v65 = v62;
      *((void *)v65 + 1) = v65 + 6;
      *((void *)v65 + 2) = 0x200000000;
LABEL_87:
      unint64_t v71 = v65[4];
      if (v71 >= v65[5]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*((void *)v65 + 1) + 4 * v71) = v21;
      ++v65[4];
      uint64_t v72 = v62 >> 6;
      uint64_t v73 = *((void *)v115 + v72);
      if ((v73 & (1 << v62)) == 0)
      {
        *((void *)v115 + v72) = v73 | (1 << v62);
        if (v120 >= (unint64_t)HIDWORD(v120)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v119 + v120) = v62;
        LODWORD(v120) = v120 + 1;
      }
      ++v23;
    }
    while (v23 != v24);
    unsigned int v19 = v120;
  }
  while (v19);
  if (v115 != v118) {
    free(v115);
  }
  if (v119 != v121) {
    free(v119);
  }
  uint64_t v89 = (v109 - 1);
  if (v109 - 1 <= 0)
  {
    unsigned int v91 = v114;
    uint64_t v90 = v112;
  }
  else
  {
    uint64_t v90 = v112;
    unsigned int v91 = v114;
    do
    {
      unint64_t v92 = *(unsigned int *)(v110 + 4 * v89);
      if ((*(void *)&v122[(v92 >> 3) & 0x1FFFFFF8] >> v92))
      {
        uint64_t v93 = sub_1CD489BC0(v90, v91, *(_DWORD *)(v110 + 4 * v89));
        uint64_t v94 = v93[4];
        uint64_t v95 = *(void *)(a1 + 64);
        if (v94)
        {
          uint64_t v96 = (unsigned int *)*((void *)v93 + 1);
          uint64_t v97 = (_DWORD *)(v95 + 48 * v92 + 12);
          uint64_t v98 = 4 * v94;
          do
          {
            unsigned int v99 = *v96;
            uint64_t v100 = v95 + 48 * *v96;
            int v102 = *(_DWORD *)(v100 + 12);
            int v101 = (_DWORD *)(v100 + 12);
            if (v102 == v92) {
              *int v101 = *v97;
            }
            uint64_t v103 = v95 + 48 * v99;
            int v105 = *(_DWORD *)(v103 + 16);
            uint64_t v104 = (_DWORD *)(v103 + 16);
            if (v105 == v92) {
              *uint64_t v104 = *v97;
            }
            ++v96;
            v98 -= 4;
          }
          while (v98);
        }
        *(_WORD *)(v95 + 48 * v92 + 44) |= 2u;
        *(_WORD *)(*(void *)(a1 + 64) + 48 * v92 + 44) &= ~0x80u;
        *(_WORD *)(*(void *)(a1 + 64) + 48 * v92 + 44) &= ~1u;
        *(_DWORD *)(*(void *)(a1 + 64) + 48 * v92 + 32) = 0;
      }
      --v89;
    }
    while ((int)v89 > 0);
  }
  if (v91)
  {
    uint64_t v106 = 32 * v91;
    int v107 = (void *)(v90 + 24);
    do
    {
      if (*((_DWORD *)v107 - 6) <= 0xFFFFFFFD)
      {
        uint64_t v108 = (void *)*(v107 - 2);
        if (v107 != v108) {
          free(v108);
        }
      }
      v107 += 4;
      v106 -= 32;
    }
    while (v106);
  }
  MEMORY[0x1D25D9CD0](v90, 8);
  if (v122 != v125) {
    free(v122);
  }
}

void *llvm::FlowAnalyzer::optimizeUnstructuredSkipping(void *result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = result[220];
    do
    {
      uint64_t v6 = *(unsigned int *)(*(void *)a2 + 4 * v4++);
      int v7 = (unsigned int *)(*(void *)a2 + 4 * v4);
      if (v4 >= *(unsigned int *)(a2 + 8)) {
        int v7 = (unsigned int *)(a2 + 872);
      }
      unsigned int v8 = *v7;
      unsigned int v9 = *(_DWORD *)(v5 + 4 * v6) + 1;
      if (v9 < v8)
      {
        uint64_t v10 = result[8];
        do
        {
          uint64_t v11 = *(unsigned int *)(result[202] + 4 * v9);
          uint64_t v12 = v10 + 48 * v6;
          int v15 = *(unsigned __int16 *)(v12 + 44);
          unint64_t v13 = (_WORD *)(v12 + 44);
          __int16 v14 = v15;
          if ((~v15 & 0x81) == 0)
          {
            *unint64_t v13 = v14 & 0xFFFE;
            ++*(_DWORD *)(v10 + 48 * v6 + 28);
            uint64_t v16 = result[8];
            uint64_t v17 = v16 + 48 * v11;
            __int16 v20 = *(_WORD *)(v17 + 44);
            int v18 = (_WORD *)(v17 + 44);
            __int16 v19 = v20;
            ++*((_DWORD *)v18 - 5);
            for (int i = v20 & 0x89; i == 129; int i = v33 & 0x89)
            {
              if (v11 != v6)
              {
                uint64_t v22 = *a3 + (v11 << 6);
                uint64_t v23 = *(unsigned int *)(v22 + 16);
                uint64_t v24 = *a3 + (v6 << 6);
                if (v23 != *(_DWORD *)(v24 + 16)) {
                  break;
                }
                if (v23)
                {
                  uint64_t v25 = *(void *)(v22 + 8);
                  uint64_t v26 = v25 + 8 * v23;
                  uint64_t v27 = *(void *)(v24 + 8);
                  while (*(_DWORD *)v25 == *(_DWORD *)v27
                       && *(unsigned __int8 *)(v25 + 4) == *(unsigned __int8 *)(v27 + 4))
                  {
                    v25 += 8;
                    v27 += 8;
                    if (v25 == v26) {
                      goto LABEL_24;
                    }
                  }
                  break;
                }
              }
LABEL_24:
              _WORD *v18 = v19 & 0xFF7F;
              uint64_t v29 = v16 + 48 * v11;
              *(_DWORD *)(v29 + 32) = 0;
              uint64_t v30 = result[8]
                  + 48 * *(unsigned int *)(result[202] + 4 * (*(_DWORD *)(result[220] + 4 * v11) - 1));
              *(_WORD *)(v30 + 44) |= 2u;
              *(_DWORD *)(v29 + 20) = -1;
              if (*v18)
              {
                *v18 &= ~1u;
                ++*(_DWORD *)(v16 + 48 * v11 + 28);
              }
              unsigned int v31 = *(_DWORD *)(result[220] + 4 * v11) + 1;
              uint64_t v16 = result[8];
              if (v31 >= v8) {
                break;
              }
              uint64_t v11 = *(unsigned int *)(result[202] + 4 * v31);
              uint64_t v32 = v16 + 48 * v11;
              __int16 v33 = *(_WORD *)(v32 + 44);
              int v18 = (_WORD *)(v32 + 44);
              __int16 v19 = v33;
              ++*((_DWORD *)v18 - 5);
            }
            ++*(_DWORD *)(v16 + 48 * v11 + 36);
            *(_DWORD *)(v10 + 48 * v6 + 20) = v11;
            uint64_t v5 = result[220];
            uint64_t v10 = v16;
          }
          unsigned int v9 = *(_DWORD *)(v5 + 4 * v11) + 1;
          uint64_t v6 = v11;
        }
        while (v9 < v8);
      }
    }
    while (v4 != v3);
  }
  return result;
}

void llvm::FlowAnalyzer::optimizeUnstructuredLoops(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, llvm::TargetInstrInfo *a6)
{
  v152[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned int *)v152;
  unsigned int v150 = (unsigned int *)v152;
  uint64_t v151 = 0x1000000000;
  uint64_t v142 = v146;
  unsigned int v143 = v146;
  uint64_t v144 = 16;
  int v145 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (unsigned int *)(a2 + 872);
    uint64_t v140 = a3;
    do
    {
      unsigned int v12 = *(_DWORD *)(*(void *)a2 + 4 * v10++);
      unint64_t v13 = (unsigned int *)(*(void *)a2 + 4 * v10);
      if (v10 >= *(unsigned int *)(a2 + 8)) {
        unint64_t v13 = v11;
      }
      unsigned int v14 = *v13;
      while (v12 != v14)
      {
        uint64_t v15 = *(void *)(a2 + 864);
        if ((*(_WORD *)(a1[8] + 48 * v12 + 44) & 0x80) == 0) {
          goto LABEL_8;
        }
        int v22 = *(_DWORD *)(a3 + 264);
        if (!v22) {
          goto LABEL_27;
        }
        uint64_t v23 = *(void *)(v15 + 48 * v12 + 16);
        uint64_t v24 = *(void *)(a3 + 248);
        unsigned int v25 = v22 - 1;
        uint64_t v26 = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
        uint64_t v27 = *(void *)(v24 + 16 * v26);
        if (v23 != v27)
        {
          int v28 = 1;
          while (v27 != -4096)
          {
            int v29 = v26 + v28++;
            uint64_t v26 = v29 & v25;
            uint64_t v27 = *(void *)(v24 + 16 * v26);
            if (v23 == v27) {
              goto LABEL_69;
            }
          }
LABEL_27:
          uint64_t v30 = 0;
          goto LABEL_28;
        }
LABEL_69:
        uint64_t v30 = *(void ***)(v24 + 16 * v26 + 8);
LABEL_28:
        unsigned int v31 = v143;
        uint64_t v32 = HIDWORD(v144);
        if (v143 == v142)
        {
          if (HIDWORD(v144))
          {
            __int16 v19 = 0;
            uint64_t v21 = 8 * HIDWORD(v144);
            __int16 v20 = v143;
            do
            {
              if ((void **)*v20 == v30) {
                goto LABEL_8;
              }
              if (*v20 == -2) {
                __int16 v19 = v20;
              }
              ++v20;
              v21 -= 8;
            }
            while (v21);
            if (v19)
            {
              *__int16 v19 = v30;
              --v145;
              goto LABEL_32;
            }
          }
          unsigned int v33 = v144;
          if (HIDWORD(v144) < v144)
          {
            ++HIDWORD(v144);
            *(void *)&v143[8 * v32] = v30;
            goto LABEL_32;
          }
        }
        else
        {
          unsigned int v33 = v144;
        }
        if (3 * v33 <= 4 * (HIDWORD(v144) - v145))
        {
          if (v33 >= 0x40) {
            v33 *= 2;
          }
          else {
            unsigned int v33 = 128;
          }
        }
        else if (v33 - HIDWORD(v144) >= v33 >> 3)
        {
          goto LABEL_73;
        }
        uint64_t v131 = v7;
        int v137 = v11;
        int v124 = v6;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v142, v33);
        uint64_t v6 = v124;
        uint64_t v11 = v137;
        uint64_t v7 = v131;
        a3 = v140;
        unsigned int v33 = v144;
        unsigned int v31 = v143;
LABEL_73:
        unsigned int v54 = v33 - 1;
        unsigned int v55 = (v33 - 1) & ((v30 >> 4) ^ (v30 >> 9));
        int v56 = &v31[8 * v55];
        int v57 = *(void ***)v56;
        if (*(void *)v56 == -1)
        {
          uint64_t v58 = 0;
LABEL_103:
          if (v58) {
            int v74 = v58;
          }
          else {
            int v74 = v56;
          }
          if (*(void ***)v74 != v30)
          {
            if (*(void *)v74 == -2) {
              --v145;
            }
            else {
              ++HIDWORD(v144);
            }
            *(void *)int v74 = v30;
LABEL_32:
            if (!v30) {
              goto LABEL_8;
            }
            uint64_t v83 = *v30;
            if (!v83) {
              goto LABEL_8;
            }
            uint64_t v121 = v143;
            unsigned int v122 = v144;
            unsigned int v123 = HIDWORD(v144);
            while (2)
            {
              if (v121 == v142)
              {
                if (v123)
                {
                  unsigned int v84 = 0;
                  uint64_t v85 = 8 * v123;
                  int v86 = v121;
                  while ((void *)*v86 != v83)
                  {
                    if (*v86 == -2) {
                      unsigned int v84 = v86;
                    }
                    ++v86;
                    v85 -= 8;
                    if (!v85)
                    {
                      if (!v84) {
                        goto LABEL_131;
                      }
                      *unsigned int v84 = v83;
                      --v145;
                      break;
                    }
                  }
LABEL_133:
                  uint64_t v121 = v143;
                  unsigned int v122 = v144;
                  unsigned int v123 = HIDWORD(v144);
                  uint64_t v83 = (void *)*v83;
                  if (!v83) {
                    goto LABEL_8;
                  }
                  continue;
                }
LABEL_131:
                if (v122 > v123)
                {
                  HIDWORD(v144) = v123 + 1;
                  *(void *)&v121[8 * v123] = v83;
                  goto LABEL_133;
                }
              }
              break;
            }
            if (3 * v122 <= 4 * (v123 - v145))
            {
              if (v122 >= 0x40) {
                v122 *= 2;
              }
              else {
                unsigned int v122 = 128;
              }
            }
            else if (v122 - v123 >= v122 >> 3)
            {
              goto LABEL_137;
            }
            uint64_t v132 = v7;
            uint64_t v138 = v11;
            int v126 = v6;
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v142, v122);
            uint64_t v6 = v126;
            uint64_t v11 = v138;
            uint64_t v7 = v132;
            a3 = v140;
            unsigned int v122 = v144;
            uint64_t v121 = v143;
LABEL_137:
            unsigned int v87 = v122 - 1;
            unsigned int v88 = (v122 - 1) & ((v83 >> 4) ^ (v83 >> 9));
            uint64_t v89 = &v121[8 * v88];
            uint64_t v90 = *(void **)v89;
            if (*(void *)v89 == -1)
            {
              unsigned int v91 = 0;
LABEL_149:
              if (v91) {
                uint64_t v95 = v91;
              }
              else {
                uint64_t v95 = v89;
              }
              if (*(void **)v95 != v83)
              {
                if (*(void *)v95 == -2) {
                  --v145;
                }
                else {
                  ++HIDWORD(v144);
                }
                *(void *)uint64_t v95 = v83;
              }
            }
            else
            {
              unsigned int v91 = 0;
              int v92 = 1;
              while (v90 != v83)
              {
                if (v91) {
                  BOOL v93 = 0;
                }
                else {
                  BOOL v93 = v90 == (void *)-2;
                }
                if (v93) {
                  unsigned int v91 = v89;
                }
                unsigned int v94 = v88 + v92++;
                unsigned int v88 = v94 & v87;
                uint64_t v89 = &v121[8 * (v94 & v87)];
                uint64_t v90 = *(void **)v89;
                if (*(void *)v89 == -1) {
                  goto LABEL_149;
                }
              }
            }
            goto LABEL_133;
          }
        }
        else
        {
          uint64_t v58 = 0;
          int v59 = 1;
          while (v57 != v30)
          {
            if (v58) {
              BOOL v60 = 0;
            }
            else {
              BOOL v60 = v57 == (void **)-2;
            }
            if (v60) {
              uint64_t v58 = v56;
            }
            unsigned int v61 = v55 + v59++;
            unsigned int v55 = v61 & v54;
            int v56 = &v31[8 * (v61 & v54)];
            int v57 = *(void ***)v56;
            if (*(void *)v56 == -1) {
              goto LABEL_103;
            }
          }
        }
LABEL_8:
        if ((*(_WORD *)(a1[8] + 48 * v12 + 44) & 0x200) != 0)
        {
          if (v151 >= (unint64_t)HIDWORD(v151)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v150[v151] = v12;
          LODWORD(v151) = v151 + 1;
        }
        if ((*(unsigned char *)(v15 + 48 * v12 + 8) & 0x10) != 0)
        {
          uint64_t v17 = v15 + 48 * v12;
          uint64_t v18 = *(unsigned int *)(v17 + 32);
          if (v18 >= 2)
          {
            unint64_t v62 = *(unsigned int *)(a1[202] + 4 * (*(_DWORD *)(a1[220] + 4 * v12) + 1));
            uint64_t v139 = v17 + 24;
            uint64_t v63 = *(_DWORD **)(v17 + 24);
            uint64_t v64 = 4 * v18;
            int v65 = v63;
            while (*v65 != v62)
            {
              ++v65;
              v64 -= 4;
              if (!v64)
              {
                int v65 = &v63[v18];
                break;
              }
            }
            if (v18 != v65 - v63)
            {
              uint64_t v66 = *(void *)(*(void *)(a2 + 864) + 48 * v62 + 16);
              uint64_t v67 = (const llvm::MachineInstr *)(v66 + 48);
              uint64_t v135 = v66;
              int v68 = *(const llvm::MachineInstr **)(v66 + 56);
              if (v67 != v68)
              {
                uint64_t v130 = v7;
                uint64_t v136 = v11;
                while (1)
                {
                  uint64_t v67 = (const llvm::MachineInstr *)(*(void *)v67 & 0xFFFFFFFFFFFFFFF8);
                  BOOL v69 = (unsigned __int16 *)*((void *)v67 + 2);
                  int v70 = *v69;
                  BOOL v72 = (v70 - 9) <= 0x3C
                     && ((1 << (v70 - 9)) & 0x1000000000000605) != 0
                     || v70 == 0;
                  if (v72 || (v69[4] & 0x10) != 0) {
                    goto LABEL_100;
                  }
                  uint64_t v73 = v6;
                  if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(a6, v67)) {
                    break;
                  }
                  uint64_t v11 = v136;
                  int v68 = *(const llvm::MachineInstr **)(v135 + 56);
                  a3 = v140;
                  uint64_t v7 = v130;
                  uint64_t v6 = v73;
LABEL_100:
                  if (v68 == v67) {
                    goto LABEL_10;
                  }
                }
                uint64_t v127 = v73;
                int v75 = *(const void **)v139;
                uint64_t v76 = *(unsigned int *)(v139 + 8);
                int v147 = (unsigned int *)v149;
                uint64_t v148 = 0x800000000;
                if (v76 >= 9) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v76)
                {
                  memcpy(v149, v75, 4 * v76);
                  int v77 = v148;
                  unsigned int v78 = v147;
                }
                else
                {
                  int v77 = 0;
                  unsigned int v78 = (unsigned int *)v149;
                }
                unint64_t v79 = (v77 + v76);
                BOOL v52 = v79 == 0;
                LODWORD(v148) = v79;
                BOOL v80 = &v78[v79];
                unint64_t v81 = 126 - 2 * __clz(v79);
                if (v52) {
                  uint64_t v82 = 0;
                }
                else {
                  uint64_t v82 = v81;
                }
                sub_1CC752C98(v78, v80, v82, 1);
                a3 = v140;
                if (*(_DWORD *)(v139 + 8) >= 2u)
                {
                  unint64_t v36 = v62;
                  unsigned int v134 = 1;
                  do
                  {
                    uint64_t v34 = a1[220];
                    uint64_t v35 = a1[202];
                    do
                    {
                      unint64_t v36 = *(unsigned int *)(v35 + 4 * (*(_DWORD *)(v34 + 4 * v36) + 1));
                      uint64_t v37 = (char *)v147;
                      if (v148)
                      {
                        uint64_t v37 = (char *)v147;
                        unint64_t v38 = v148;
                        do
                        {
                          unint64_t v39 = v38 >> 1;
                          uint64_t v40 = (unsigned int *)&v37[4 * (v38 >> 1)];
                          unsigned int v42 = *v40;
                          uint64_t v41 = (char *)(v40 + 1);
                          v38 += ~(v38 >> 1);
                          if (v42 < v36) {
                            uint64_t v37 = v41;
                          }
                          else {
                            unint64_t v38 = v39;
                          }
                        }
                        while (v38);
                      }
                    }
                    while (v37 == (char *)&v147[v148] || *(unsigned int *)v37 > v36);
                    unint64_t v43 = *a4 + (v36 << 6);
                    if (*(_DWORD *)(v43 + 16) != 1) {
                      break;
                    }
                    if (**(_DWORD **)(v43 + 8) != v12) {
                      break;
                    }
                    uint64_t v128 = a1[8];
                    uint64_t v44 = v128 + 48 * *(unsigned int *)(v35 + 4 * (*(_DWORD *)(v34 + 4 * v36) - 1));
                    __int16 v46 = *(_WORD *)(v44 + 44);
                    unsigned int v45 = (_WORD *)(v44 + 44);
                    if (v46) {
                      break;
                    }
                    uint64_t v47 = *(void *)(*(void *)(a2 + 864) + 48 * v36 + 16);
                    int v48 = (const llvm::MachineInstr *)(v47 + 48);
                    uint64_t v129 = v47;
                    unsigned int v49 = *(const llvm::MachineInstr **)(v47 + 56);
                    if (v48 == v49) {
                      break;
                    }
                    ++v134;
                    while (1)
                    {
                      int v48 = (const llvm::MachineInstr *)(*(void *)v48 & 0xFFFFFFFFFFFFFFF8);
                      int v50 = (unsigned __int16 *)*((void *)v48 + 2);
                      int v51 = *v50;
                      BOOL v52 = (v51 - 9) > 0x3C
                         || ((1 << (v51 - 9)) & 0x1000000000000605) == 0;
                      BOOL v53 = !v52 || v51 == 0;
                      if (v53 || (v50[4] & 0x10) != 0) {
                        goto LABEL_58;
                      }
                      if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(a6, v48)) {
                        break;
                      }
                      unsigned int v49 = *(const llvm::MachineInstr **)(v129 + 56);
                      a3 = v140;
LABEL_58:
                      if (v49 == v48) {
                        goto LABEL_118;
                      }
                    }
                    *(_WORD *)(v128 + 48 * v36 + 44) = *(_WORD *)(v128 + 48 * v36 + 44) & 0xF77F | 0x800;
                    a3 = v140;
                    if ((*v45 & 2) == 0) {
                      --*(_DWORD *)(v128 + 48 * v36 + 36);
                    }
                  }
                  while (*(_DWORD *)(v139 + 8) > v134);
                }
LABEL_118:
                if (v147 != (unsigned int *)v149)
                {
                  free(v147);
                  a3 = v140;
                }
                uint64_t v6 = v127;
                uint64_t v7 = v130;
                uint64_t v11 = v136;
              }
            }
          }
        }
LABEL_10:
        unsigned int v16 = *(_DWORD *)(a1[220] + 4 * v12) + 1;
        if (v16 >= v14) {
          break;
        }
        unsigned int v12 = *(_DWORD *)(a1[202] + 4 * v16);
      }
    }
    while (v10 != v7);
    if (v151)
    {
      uint64_t v96 = v150;
      uint64_t v97 = (char *)&v150[v151];
      while (1)
      {
        unsigned int v98 = *v96;
        int v99 = *(_DWORD *)(a3 + 264);
        if (!v99) {
          goto LABEL_164;
        }
        uint64_t v100 = *(void *)(*(void *)(a2 + 864) + 48 * v98 + 16);
        uint64_t v101 = *(void *)(a3 + 248);
        unsigned int v102 = v99 - 1;
        uint64_t v103 = ((v100 >> 4) ^ (v100 >> 9)) & (v99 - 1);
        uint64_t v104 = *(void *)(v101 + 16 * v103);
        if (v100 != v104) {
          break;
        }
LABEL_163:
        uint64_t v107 = *(void *)(v101 + 16 * v103 + 8);
LABEL_165:
        uint64_t v108 = v142;
        if (v143 == v142)
        {
          int v109 = HIDWORD(v144);
          uint64_t v110 = &v143[8 * HIDWORD(v144)];
          if (HIDWORD(v144))
          {
            uint64_t v111 = 0;
            while (*(void *)&v143[v111] != v107)
            {
              v111 += 8;
              if (8 * HIDWORD(v144) == v111) {
                goto LABEL_170;
              }
            }
            uint64_t v110 = &v143[v111];
          }
LABEL_170:
          uint64_t v108 = v143;
        }
        else
        {
          int v114 = v144 - 1;
          unsigned int v115 = (v144 - 1) & ((v107 >> 4) ^ (v107 >> 9));
          uint64_t v110 = &v143[8 * v115];
          uint64_t v116 = *(void *)v110;
          if (*(void *)v110 == -1)
          {
            int v117 = 0;
LABEL_191:
            if (v117) {
              uint64_t v110 = v117;
            }
            int v109 = HIDWORD(v144);
            if (*(void *)v110 != v107) {
              uint64_t v110 = &v143[8 * v144];
            }
          }
          else
          {
            int v117 = 0;
            int v118 = 1;
            while (v116 != v107)
            {
              if (v117) {
                BOOL v119 = 0;
              }
              else {
                BOOL v119 = v116 == -2;
              }
              if (v119) {
                int v117 = v110;
              }
              unsigned int v120 = v115 + v118++;
              unsigned int v115 = v120 & v114;
              uint64_t v110 = &v143[8 * (v120 & v114)];
              uint64_t v116 = *(void *)v110;
              if (*(void *)v110 == -1) {
                goto LABEL_191;
              }
            }
            int v109 = HIDWORD(v144);
          }
        }
        int v112 = v144;
        if (v143 == v108) {
          int v112 = v109;
        }
        if (v110 == &v143[8 * v112])
        {
          uint64_t v113 = a1[8] + 48 * v98;
          *(_WORD *)(v113 + 44) |= 0x1000u;
        }
        if (++v96 == (unsigned int *)v97) {
          goto LABEL_196;
        }
      }
      int v105 = 1;
      while (v104 != -4096)
      {
        int v106 = v103 + v105++;
        uint64_t v103 = v106 & v102;
        uint64_t v104 = *(void *)(v101 + 16 * v103);
        if (v100 == v104) {
          goto LABEL_163;
        }
      }
LABEL_164:
      uint64_t v107 = 0;
      goto LABEL_165;
    }
  }
LABEL_196:
  if (v143 != v142)
  {
    unsigned int v125 = v6;
    free(v143);
    uint64_t v6 = v125;
  }
  if (v150 != v6) {
    free(v150);
  }
}

uint64_t llvm::FlowAnalyzer::compressUnstructuredIds(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 1624);
  if (v1)
  {
    int v2 = *(unsigned int **)(this + 1616);
    uint64_t v3 = *(void *)(this + 64);
    uint64_t v4 = 4 * v1;
    int v5 = 1;
    do
    {
      if ((*(_WORD *)(v3 + 48 * *v2 + 44) & 0x880) != 0) {
        *(_DWORD *)(v3 + 48 * *v2 + 32) = v5++;
      }
      ++v2;
      v4 -= 4;
    }
    while (v4);
  }
  else
  {
    int v5 = 1;
  }
  *(_DWORD *)(this + 1908) = v5 - 1;
  return this;
}

uint64_t sub_1CC7527EC(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 96))
  {
    int v5 = (void *)(a1 + 88);
    uint64_t v4 = *(void *)(a1 + 88);
    unsigned int v6 = *a2;
    if (v4)
    {
      uint64_t result = 1;
      do
      {
        while (1)
        {
          unsigned int v8 = (void *)v4;
          unsigned int v9 = *(_DWORD *)(v4 + 28);
          if (v6 >= v9) {
            break;
          }
          uint64_t v4 = *v8;
          int v5 = v8;
          if (!*v8) {
            goto LABEL_17;
          }
        }
        if (v9 >= v6) {
          return result;
        }
        uint64_t v4 = v8[1];
      }
      while (v4);
      int v5 = v8 + 1;
    }
    else
    {
      unsigned int v8 = (void *)(a1 + 88);
    }
LABEL_17:
    unsigned int v14 = operator new(0x20uLL);
    v14[7] = v6;
    *(void *)unsigned int v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v8;
    *int v5 = v14;
    uint64_t v15 = **(void **)(a1 + 80);
    if (v15)
    {
      *(void *)(a1 + 80) = v15;
      unsigned int v14 = (_DWORD *)*v5;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 88), (uint64_t *)v14);
    ++*(void *)(a1 + 96);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    unsigned int v11 = *a2;
    if (v10)
    {
      uint64_t v12 = 4 * v10;
      unint64_t v13 = *(_DWORD **)a1;
      while (*v13 != v11)
      {
        ++v13;
        v12 -= 4;
        if (!v12) {
          goto LABEL_14;
        }
      }
      if (v12) {
        return 1;
      }
LABEL_14:
      if (v10 <= 0xF) {
        goto LABEL_15;
      }
      unsigned int v16 = (void **)(a1 + 80);
      do
      {
        uint64_t v17 = *(void *)a1 + 4 * v10;
        uint64_t v18 = *(void *)(a1 + 88);
        __int16 v19 = (void *)(a1 + 88);
        __int16 v20 = (void *)(a1 + 88);
        if (v18)
        {
          unsigned int v21 = *(_DWORD *)(v17 - 4);
          do
          {
            while (1)
            {
              __int16 v20 = (void *)v18;
              unsigned int v22 = *(_DWORD *)(v18 + 28);
              if (v21 >= v22) {
                break;
              }
              uint64_t v18 = *v20;
              __int16 v19 = v20;
              if (!*v20) {
                goto LABEL_32;
              }
            }
            if (v22 >= v21) {
              goto LABEL_35;
            }
            uint64_t v18 = v20[1];
          }
          while (v18);
          __int16 v19 = v20 + 1;
        }
LABEL_32:
        uint64_t v23 = operator new(0x20uLL);
        v23[7] = *(_DWORD *)(v17 - 4);
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = v20;
        *__int16 v19 = v23;
        uint64_t v24 = (void *)**v16;
        if (v24)
        {
          *unsigned int v16 = v24;
          uint64_t v23 = (_DWORD *)*v19;
        }
        sub_1CB8358B8(*(uint64_t **)(a1 + 88), (uint64_t *)v23);
        ++*(void *)(a1 + 96);
        LODWORD(v10) = *(_DWORD *)(a1 + 8);
LABEL_35:
        LODWORD(v10) = v10 - 1;
        *(_DWORD *)(a1 + 8) = v10;
      }
      while (v10);
      sub_1CBBF2EDC((uint64_t **)(a1 + 80), a2, a2);
    }
    else
    {
LABEL_15:
      if (v10 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v10) = v11;
      ++*(_DWORD *)(a1 + 8);
    }
  }
  return 0x100000001;
}

_DWORD *sub_1CC752A24(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 32 * v12;
      do
      {
        _DWORD *result = -1;
        result += 8;
        v13 -= 32;
      }
      while (v13);
    }
    if (v3)
    {
      unsigned int v14 = &v4[8 * v3];
      uint64_t v15 = v4;
      do
      {
        int v16 = *v15;
        if (*v15 <= 0xFFFFFFFD)
        {
          int v17 = *((_DWORD *)a1 + 4) - 1;
          uint64_t v18 = v17 & (37 * v16);
          uint64_t v19 = *a1 + 32 * v18;
          int v20 = *(_DWORD *)v19;
          if (v16 != *(_DWORD *)v19)
          {
            uint64_t v24 = 0;
            int v25 = 1;
            while (v20 != -1)
            {
              if (v24) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v20 == -2;
              }
              if (v27) {
                uint64_t v24 = v19;
              }
              int v28 = v18 + v25++;
              uint64_t v18 = v28 & v17;
              uint64_t v19 = *a1 + 32 * v18;
              int v20 = *(_DWORD *)v19;
              if (v16 == *(_DWORD *)v19) {
                goto LABEL_18;
              }
            }
            if (v24) {
              uint64_t v19 = v24;
            }
          }
LABEL_18:
          *(void *)(v19 + 8) = v19 + 24;
          *(_DWORD *)uint64_t v19 = v16;
          *(void *)(v19 + 16) = 0x200000000;
          unsigned int v21 = v15[4];
          unsigned int v22 = (int *)*((void *)v15 + 1);
          if ((int *)v19 != v15 && v21 != 0)
          {
            if (v22 == v15 + 6)
            {
              if (v21 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v19 + 24), v22, 4 * v15[4]);
              *(_DWORD *)(v19 + 16) = v21;
              unsigned int v22 = (int *)*((void *)v15 + 1);
            }
            else
            {
              *(void *)(v19 + 8) = v22;
              int v26 = v15[5];
              *(_DWORD *)(v19 + 16) = v21;
              *(_DWORD *)(v19 + 20) = v26;
              *((void *)v15 + 1) = v15 + 6;
              v15[5] = 0;
              unsigned int v22 = v15 + 6;
            }
            v15[4] = 0;
          }
          ++*((_DWORD *)a1 + 2);
          if (v22 != v15 + 6) {
            free(v22);
          }
        }
        v15 += 8;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      _DWORD *result = -1;
      result += 8;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1CC752C98(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4)
{
BOOL sub_1CC753088(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 1);
      unsigned int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB10A88(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB10C78(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CBB10CF8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CBB10A88(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    unsigned int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        unsigned int v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          int v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      int v16 = a1;
LABEL_12:
      *int v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t llvm::isEmptyBasicBlock(llvm *this, const llvm::MachineBasicBlock *a2, const llvm::TargetInstrInfo *a3)
{
  uint64_t v3 = (llvm *)((char *)this + 48);
  uint64_t v4 = (llvm *)*((void *)this + 7);
  if ((llvm *)((char *)this + 48) != v4)
  {
    do
    {
      uint64_t v3 = (llvm *)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8);
      unsigned int v7 = (unsigned __int16 *)*((void *)v3 + 2);
      int v8 = *v7;
      BOOL v10 = (v8 - 9) <= 0x3C && ((1 << (v8 - 9)) & 0x1000000000000605) != 0
         || v8 == 0;
      if (!v10 && (v7[4] & 0x10) == 0)
      {
        uint64_t result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a2, v3);
        if (!result) {
          return result;
        }
        uint64_t v4 = (llvm *)*((void *)this + 7);
      }
    }
    while (v4 != v3);
  }
  return 1;
}

void llvm::foldBlocksForCFGProcessing(uint64_t a1, uint64_t a2, llvm::TargetInstrInfo *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  v178[10] = *MEMORY[0x1E4F143B8];
  uint64_t v175 = v178;
  unsigned int v177 = 10;
  int v163 = v167;
  uint64_t v164 = v167;
  uint64_t v165 = 16;
  int v166 = 0;
  unint64_t v158 = v162;
  uint64_t v159 = v162;
  uint64_t v160 = 16;
  int v161 = 0;
  v178[0] = *(void *)(a1 + 328);
  uint64_t v5 = (llvm::MachineBasicBlock **)v174;
  unsigned int v6 = 1;
  do
  {
    while (1)
    {
      unsigned int v7 = (void *)v175[--v6];
      unsigned int v176 = v6;
      int v8 = v158;
      if (v159 == v158)
      {
        int v9 = HIDWORD(v160);
        BOOL v10 = &v159[8 * HIDWORD(v160)];
        if (HIDWORD(v160))
        {
          uint64_t v11 = 0;
          while (*(void **)&v159[v11] != v7)
          {
            v11 += 8;
            if (8 * HIDWORD(v160) == v11) {
              goto LABEL_21;
            }
          }
          BOOL v10 = &v159[v11];
        }
LABEL_21:
        int v8 = v159;
      }
      else
      {
        int v12 = v160 - 1;
        unsigned int v13 = (v160 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        BOOL v10 = &v159[8 * v13];
        uint64_t v14 = *(void **)v10;
        if (*(void *)v10 == -1)
        {
          uint64_t v15 = 0;
LABEL_53:
          if (v15) {
            BOOL v10 = v15;
          }
          int v9 = HIDWORD(v160);
          if (*(void **)v10 != v7) {
            BOOL v10 = &v159[8 * v160];
          }
        }
        else
        {
          uint64_t v15 = 0;
          int v16 = 1;
          while (v14 != v7)
          {
            if (v15) {
              BOOL v17 = 0;
            }
            else {
              BOOL v17 = v14 == (void *)-2;
            }
            if (v17) {
              uint64_t v15 = v10;
            }
            unsigned int v18 = v13 + v16++;
            unsigned int v13 = v18 & v12;
            BOOL v10 = &v159[8 * (v18 & v12)];
            uint64_t v14 = *(void **)v10;
            if (*(void *)v10 == -1) {
              goto LABEL_53;
            }
          }
          int v9 = HIDWORD(v160);
        }
      }
      int v19 = v159 == v8 ? v9 : v160;
      if (v10 == &v159[8 * v19]) {
        break;
      }
      if (!v6) {
        goto LABEL_329;
      }
    }
    uint64_t v20 = v164;
    uint64_t v21 = HIDWORD(v165);
    if (v164 != v163)
    {
      unsigned int v25 = v165;
      goto LABEL_39;
    }
    if (!HIDWORD(v165))
    {
LABEL_36:
      unsigned int v25 = v165;
      if (HIDWORD(v165) < v165)
      {
        ++HIDWORD(v165);
        *(void *)&v164[8 * v21] = v7;
        goto LABEL_66;
      }
LABEL_39:
      if (3 * v25 <= 4 * (HIDWORD(v165) - v166))
      {
        if (v25 >= 0x40) {
          v25 *= 2;
        }
        else {
          unsigned int v25 = 128;
        }
      }
      else if (v25 - HIDWORD(v165) >= v25 >> 3)
      {
        goto LABEL_41;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v163, v25);
      unsigned int v25 = v165;
      uint64_t v20 = v164;
LABEL_41:
      unsigned int v26 = v25 - 1;
      unsigned int v27 = (v25 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int v28 = &v20[8 * v27];
      char v29 = *(void **)v28;
      if (*(void *)v28 == -1)
      {
        BOOL v30 = 0;
LABEL_59:
        if (v30) {
          uint64_t v34 = v30;
        }
        else {
          uint64_t v34 = v28;
        }
        if (*(void **)v34 != v7)
        {
          if (*(void *)v34 == -2) {
            --v166;
          }
          else {
            ++HIDWORD(v165);
          }
          *(void *)uint64_t v34 = v7;
        }
      }
      else
      {
        BOOL v30 = 0;
        int v31 = 1;
        while (v29 != v7)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == (void *)-2;
          }
          if (v32) {
            BOOL v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          int v28 = &v20[8 * (v33 & v26)];
          char v29 = *(void **)v28;
          if (*(void *)v28 == -1) {
            goto LABEL_59;
          }
        }
      }
      goto LABEL_66;
    }
    unsigned int v22 = 0;
    uint64_t v23 = 8 * HIDWORD(v165);
    uint64_t v24 = v164;
    while ((void *)*v24 != v7)
    {
      if (*v24 == -2) {
        unsigned int v22 = v24;
      }
      ++v24;
      v23 -= 8;
      if (!v23)
      {
        if (!v22) {
          goto LABEL_36;
        }
        void *v22 = v7;
        --v166;
        break;
      }
    }
LABEL_66:
    int v35 = *(_DWORD *)(v4 + 264);
    if (v35)
    {
      uint64_t v36 = *(void *)(v4 + 248);
      unsigned int v37 = v35 - 1;
      uint64_t v38 = (v35 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      unint64_t v39 = *(void **)(v36 + 16 * v38);
      if (v7 == v39)
      {
LABEL_71:
        uint64_t v42 = *(void *)(v36 + 16 * v38 + 8);
        goto LABEL_73;
      }
      int v40 = 1;
      while (v39 != (void *)-4096)
      {
        int v41 = v38 + v40++;
        uint64_t v38 = v41 & v37;
        unint64_t v39 = *(void **)(v36 + 16 * v38);
        if (v7 == v39) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v42 = 0;
LABEL_73:
    unint64_t v43 = (char *)v7[11];
    uint64_t v44 = (char *)v7[12];
    int v172 = (llvm::MachineBasicBlock **)v174;
    uint64_t v173 = 0x200000000;
    unint64_t v45 = v44 - v43;
    if ((unint64_t)(v44 - v43) >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v43 != v44)
    {
      __int16 v46 = v174;
      do
      {
        uint64_t v47 = *(void *)v43;
        v43 += 8;
        *v46++ = v47;
      }
      while (v43 != v44);
      uint64_t v5 = v172;
    }
    int v48 = v45 >> 3;
    LODWORD(v173) = v48;
    if (v48)
    {
      unsigned int v49 = &v5[v48];
      uint64_t v156 = v7 + 6;
      while (2)
      {
        int v50 = *v5;
        int v51 = v158;
        if (v159 == v158)
        {
          int v52 = HIDWORD(v160);
          BOOL v53 = &v159[8 * HIDWORD(v160)];
          if (HIDWORD(v160))
          {
            uint64_t v54 = 0;
            while (*(llvm::MachineBasicBlock **)&v159[v54] != v50)
            {
              v54 += 8;
              if (8 * HIDWORD(v160) == v54) {
                goto LABEL_99;
              }
            }
            BOOL v53 = &v159[v54];
          }
LABEL_99:
          int v51 = v159;
        }
        else
        {
          int v55 = v160 - 1;
          unsigned int v56 = (v160 - 1) & ((v50 >> 4) ^ (v50 >> 9));
          BOOL v53 = &v159[8 * v56];
          int v57 = *(llvm::MachineBasicBlock **)v53;
          if (*(void *)v53 == -1)
          {
            uint64_t v58 = 0;
LABEL_263:
            if (v58) {
              BOOL v53 = v58;
            }
            int v52 = HIDWORD(v160);
            if (*(llvm::MachineBasicBlock **)v53 != v50) {
              BOOL v53 = &v159[8 * v160];
            }
          }
          else
          {
            uint64_t v58 = 0;
            int v59 = 1;
            while (v57 != v50)
            {
              if (v58) {
                BOOL v60 = 0;
              }
              else {
                BOOL v60 = v57 == (llvm::MachineBasicBlock *)-2;
              }
              if (v60) {
                uint64_t v58 = v53;
              }
              unsigned int v61 = v56 + v59++;
              unsigned int v56 = v61 & v55;
              BOOL v53 = &v159[8 * (v61 & v55)];
              int v57 = *(llvm::MachineBasicBlock **)v53;
              if (*(void *)v53 == -1) {
                goto LABEL_263;
              }
            }
            int v52 = HIDWORD(v160);
          }
        }
        if (v159 == v51) {
          int v62 = v52;
        }
        else {
          int v62 = v160;
        }
        if (v53 != &v159[8 * v62]) {
          goto LABEL_277;
        }
        if (v42)
        {
          uint64_t v64 = *(void *)(v42 + 56);
          uint64_t v63 = *(void *)(v42 + 64);
          if (v63 == v64)
          {
            uint64_t v65 = *(unsigned int *)(v42 + 76);
            uint64_t v66 = (llvm::MachineBasicBlock **)(v63 + 8 * v65);
            if (v65)
            {
              uint64_t v67 = 0;
              uint64_t v68 = 8 * v65;
              while (*(llvm::MachineBasicBlock **)(v63 + v67) != v50)
              {
                v67 += 8;
                if (v68 == v67) {
                  goto LABEL_123;
                }
              }
              uint64_t v66 = (llvm::MachineBasicBlock **)(v63 + v67);
            }
LABEL_123:
            uint64_t v64 = *(void *)(v42 + 64);
          }
          else
          {
            uint64_t v69 = *(unsigned int *)(v42 + 72);
            int v70 = v69 - 1;
            unsigned int v71 = (v69 - 1) & ((v50 >> 4) ^ (v50 >> 9));
            uint64_t v66 = (llvm::MachineBasicBlock **)(v63 + 8 * v71);
            BOOL v72 = *v66;
            if (*v66 == (llvm::MachineBasicBlock *)-1)
            {
              uint64_t v73 = 0;
LABEL_130:
              if (v73) {
                uint64_t v66 = v73;
              }
              if (*v66 != v50) {
                uint64_t v66 = (llvm::MachineBasicBlock **)(v63 + 8 * v69);
              }
            }
            else
            {
              uint64_t v73 = 0;
              int v74 = 1;
              while (v72 != v50)
              {
                if (v73) {
                  BOOL v75 = 0;
                }
                else {
                  BOOL v75 = v72 == (llvm::MachineBasicBlock *)-2;
                }
                if (v75) {
                  uint64_t v73 = v66;
                }
                unsigned int v76 = v71 + v74++;
                unsigned int v71 = v76 & v70;
                uint64_t v66 = (llvm::MachineBasicBlock **)(v63 + 8 * (v76 & v70));
                BOOL v72 = *v66;
                if (*v66 == (llvm::MachineBasicBlock *)-1) {
                  goto LABEL_130;
                }
              }
            }
          }
          if (v63 == v64) {
            uint64_t v77 = 76;
          }
          else {
            uint64_t v77 = 72;
          }
          if (v66 == (llvm::MachineBasicBlock **)(v63 + 8 * *(unsigned int *)(v42 + v77))) {
            llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlock();
          }
        }
        if (*((unsigned char *)v50 + 185))
        {
          unsigned int v78 = *v5;
          goto LABEL_136;
        }
        char v90 = 0;
        unsigned int v91 = *v5;
        while (2)
        {
          int v92 = (llvm::MachineBasicBlock *)((char *)v91 + 48);
          BOOL v93 = (const llvm::MachineInstr *)*((void *)v91 + 7);
          if ((llvm::MachineBasicBlock *)((char *)v91 + 48) != v93)
          {
            do
            {
              int v92 = (const llvm::MachineInstr *)(*(void *)v92 & 0xFFFFFFFFFFFFFFF8);
              unsigned int v94 = (unsigned __int16 *)*((void *)v92 + 2);
              int v95 = *v94;
              BOOL v97 = (v95 - 9) <= 0x3C && ((1 << (v95 - 9)) & 0x1000000000000605) != 0
                 || v95 == 0;
              if (!v97 && (v94[4] & 0x10) == 0)
              {
                if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, v92)) {
                  goto LABEL_238;
                }
                BOOL v93 = (const llvm::MachineInstr *)*((void *)v91 + 7);
              }
            }
            while (v93 != v92);
          }
          unsigned int v98 = (llvm::MachineBasicBlock **)*((void *)v91 + 11);
          if (((*((void *)v91 + 12) - (void)v98) & 0x7FFFFFFF8) == 8)
          {
            uint64_t v99 = *((void *)v91 + 8);
            if (((*((void *)v91 + 9) - v99) & 0x7FFFFFFF8) == 8
              && ((*(void *)(*(void *)v99 + 96) - *(void *)(*(void *)v99 + 88)) >> 3) <= 2)
            {
              unsigned int v78 = *v98;
              uint64_t v100 = *(void *)(a2 + 248);
              int v101 = *(_DWORD *)(a2 + 264);
              if (v101)
              {
                unsigned int v102 = v101 - 1;
                uint64_t v103 = (v101 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                uint64_t v104 = *(llvm::MachineBasicBlock **)(v100 + 16 * v103);
                if (v78 == v104)
                {
LABEL_174:
                  uint64_t v107 = *(void *)(v100 + 16 * v103 + 8);
                  if (v107 && **(llvm::MachineBasicBlock ***)(v107 + 32) == v78) {
                    break;
                  }
                }
                else
                {
                  int v105 = 1;
                  while (v104 != (llvm::MachineBasicBlock *)-4096)
                  {
                    int v106 = v103 + v105++;
                    uint64_t v103 = v106 & v102;
                    uint64_t v104 = *(llvm::MachineBasicBlock **)(v100 + 16 * v103);
                    if (v78 == v104) {
                      goto LABEL_174;
                    }
                  }
                }
                if (v42)
                {
                  uint64_t v108 = v102 & ((v91 >> 4) ^ (v91 >> 9));
                  int v109 = *(llvm::MachineBasicBlock **)(v100 + 16 * v108);
                  if (v91 == v109)
                  {
LABEL_181:
                    uint64_t v112 = *(void *)(v100 + 16 * v108 + 8);
                  }
                  else
                  {
                    int v110 = 1;
                    while (v109 != (llvm::MachineBasicBlock *)-4096)
                    {
                      int v111 = v108 + v110++;
                      uint64_t v108 = v111 & v102;
                      int v109 = *(llvm::MachineBasicBlock **)(v100 + 16 * v108);
                      if (v91 == v109) {
                        goto LABEL_181;
                      }
                    }
LABEL_183:
                    uint64_t v112 = 0;
                  }
                  if (v112 != v42)
                  {
                    uint64_t v113 = (llvm::MachineBasicBlock **)*((void *)v78 + 8);
                    int v114 = (llvm::MachineBasicBlock **)*((void *)v78 + 9);
                    if (v113 != v114)
                    {
                      unsigned int v115 = v101 - 1;
                      while (1)
                      {
                        uint64_t v116 = *v113;
                        if (*v113 != v91) {
                          break;
                        }
LABEL_196:
                        if (++v113 == v114) {
                          goto LABEL_197;
                        }
                      }
                      if (v101)
                      {
                        uint64_t v117 = ((v116 >> 4) ^ (v116 >> 9)) & v115;
                        int v118 = *(llvm::MachineBasicBlock **)(v100 + 16 * v117);
                        if (v116 != v118)
                        {
                          int v119 = 1;
                          while (v118 != (llvm::MachineBasicBlock *)-4096)
                          {
                            int v120 = v117 + v119++;
                            uint64_t v117 = v120 & v115;
                            int v118 = *(llvm::MachineBasicBlock **)(v100 + 16 * v117);
                            if (v116 == v118) {
                              goto LABEL_193;
                            }
                          }
                          goto LABEL_194;
                        }
LABEL_193:
                        uint64_t v121 = *(void *)(v100 + 16 * v117 + 8);
                      }
                      else
                      {
LABEL_194:
                        uint64_t v121 = 0;
                      }
                      if (v121 != v42) {
                        goto LABEL_230;
                      }
                      goto LABEL_196;
                    }
                  }
                }
              }
              else if (v42)
              {
                goto LABEL_183;
              }
LABEL_197:
              llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v7, v91, v78);
              unsigned int v122 = v159;
              uint64_t v123 = HIDWORD(v160);
              if (v159 == v158)
              {
                if (HIDWORD(v160))
                {
                  int v124 = 0;
                  uint64_t v125 = 8 * HIDWORD(v160);
                  int v126 = (llvm::MachineBasicBlock **)v159;
                  while (*v126 != v91)
                  {
                    if (*v126 == (llvm::MachineBasicBlock *)-2) {
                      int v124 = v126;
                    }
                    ++v126;
                    v125 -= 8;
                    if (!v125)
                    {
                      if (!v124) {
                        goto LABEL_205;
                      }
                      *int v124 = v91;
                      --v161;
                      goto LABEL_229;
                    }
                  }
                  goto LABEL_229;
                }
LABEL_205:
                unsigned int v127 = v160;
                if (HIDWORD(v160) < v160)
                {
                  ++HIDWORD(v160);
                  *(void *)&v159[8 * v123] = v91;
LABEL_229:
                  llvm::MachineBasicBlock::removeSuccessor(v91, v78, 0);
                  char v90 = 1;
LABEL_230:
                  unsigned int v91 = v78;
                  if (*((unsigned char *)v78 + 185)) {
                    goto LABEL_239;
                  }
                  continue;
                }
              }
              else
              {
                unsigned int v127 = v160;
              }
              if (3 * v127 <= 4 * (HIDWORD(v160) - v161))
              {
                if (v127 >= 0x40) {
                  v127 *= 2;
                }
                else {
                  unsigned int v127 = 128;
                }
              }
              else if (v127 - HIDWORD(v160) >= v127 >> 3)
              {
                goto LABEL_210;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v158, v127);
              unsigned int v127 = v160;
              unsigned int v122 = v159;
LABEL_210:
              unsigned int v128 = v127 - 1;
              unsigned int v129 = (v127 - 1) & ((v91 >> 4) ^ (v91 >> 9));
              uint64_t v130 = &v122[8 * v129];
              uint64_t v131 = *(llvm::MachineBasicBlock **)v130;
              if (*(void *)v130 == -1)
              {
                uint64_t v132 = 0;
LABEL_222:
                if (v132) {
                  uint64_t v136 = v132;
                }
                else {
                  uint64_t v136 = v130;
                }
                if (*(llvm::MachineBasicBlock **)v136 != v91)
                {
                  if (*(void *)v136 == -2) {
                    --v161;
                  }
                  else {
                    ++HIDWORD(v160);
                  }
                  *(void *)uint64_t v136 = v91;
                }
              }
              else
              {
                uint64_t v132 = 0;
                int v133 = 1;
                while (v131 != v91)
                {
                  if (v132) {
                    BOOL v134 = 0;
                  }
                  else {
                    BOOL v134 = v131 == (llvm::MachineBasicBlock *)-2;
                  }
                  if (v134) {
                    uint64_t v132 = v130;
                  }
                  unsigned int v135 = v129 + v133++;
                  unsigned int v129 = v135 & v128;
                  uint64_t v130 = &v122[8 * (v135 & v128)];
                  uint64_t v131 = *(llvm::MachineBasicBlock **)v130;
                  if (*(void *)v130 == -1) {
                    goto LABEL_222;
                  }
                }
              }
              goto LABEL_229;
            }
          }
          break;
        }
LABEL_238:
        unsigned int v78 = v91;
LABEL_239:
        if ((v90 & 1) == 0 || (int v137 = (void *)v7[7], v156 == v137))
        {
LABEL_136:
          unint64_t v79 = v163;
          if (v164 == v163)
          {
            int v80 = HIDWORD(v165);
            unint64_t v81 = &v164[8 * HIDWORD(v165)];
            if (HIDWORD(v165))
            {
              uint64_t v82 = 0;
              while (*(llvm::MachineBasicBlock **)&v164[v82] != v78)
              {
                v82 += 8;
                if (8 * HIDWORD(v165) == v82) {
                  goto LABEL_270;
                }
              }
              unint64_t v81 = &v164[v82];
            }
LABEL_270:
            unint64_t v79 = v164;
          }
          else
          {
            int v83 = v165 - 1;
            unsigned int v84 = (v165 - 1) & ((v78 >> 4) ^ (v78 >> 9));
            unint64_t v81 = &v164[8 * v84];
            uint64_t v85 = *(llvm::MachineBasicBlock **)v81;
            if (*(void *)v81 == -1)
            {
              int v86 = 0;
LABEL_280:
              if (v86) {
                unint64_t v81 = v86;
              }
              int v80 = HIDWORD(v165);
              if (*(llvm::MachineBasicBlock **)v81 != v78) {
                unint64_t v81 = &v164[8 * v165];
              }
            }
            else
            {
              int v86 = 0;
              int v87 = 1;
              while (v85 != v78)
              {
                if (v86) {
                  BOOL v88 = 0;
                }
                else {
                  BOOL v88 = v85 == (llvm::MachineBasicBlock *)-2;
                }
                if (v88) {
                  int v86 = v81;
                }
                unsigned int v89 = v84 + v87++;
                unsigned int v84 = v89 & v83;
                unint64_t v81 = &v164[8 * (v89 & v83)];
                uint64_t v85 = *(llvm::MachineBasicBlock **)v81;
                if (*(void *)v81 == -1) {
                  goto LABEL_280;
                }
              }
              int v80 = HIDWORD(v165);
            }
          }
          if (v164 == v79) {
            int v143 = v80;
          }
          else {
            int v143 = v165;
          }
          if (v81 == &v164[8 * v143])
          {
            if (v176 >= (unint64_t)v177) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v175[v176++] = v78;
          }
LABEL_277:
          if (++v5 == v49)
          {
            uint64_t v5 = v172;
            uint64_t v4 = a2;
            goto LABEL_318;
          }
          continue;
        }
        break;
      }
      unint64_t v138 = *v156 & 0xFFFFFFFFFFFFFFF8;
      if (!v138 || (*(unsigned char *)v138 & 4) == 0)
      {
        while ((*(_WORD *)(v138 + 44) & 4) != 0)
          unint64_t v138 = *(void *)v138 & 0xFFFFFFFFFFFFFFF8;
      }
      while (1)
      {
        uint64_t v139 = *(unsigned __int16 **)(v138 + 16);
        int v140 = *v139;
        BOOL v141 = (v140 - 9) > 0x3C || ((1 << (v140 - 9)) & 0x1000000000000605) == 0;
        BOOL v142 = !v141 || v140 == 0;
        if (!v142 && (v139[4] & 0x10) == 0) {
          break;
        }
        if ((void *)v138 == v137) {
          goto LABEL_136;
        }
        unint64_t v138 = *(void *)v138 & 0xFFFFFFFFFFFFFFF8;
        if (!v138 || (*(unsigned char *)v138 & 4) == 0)
        {
          while ((*(_WORD *)(v138 + 44) & 4) != 0)
            unint64_t v138 = *(void *)v138 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      if (((v7[12] - v7[11]) & 0x7FFFFFFF8) == 8)
      {
        (*(void (**)(llvm::TargetInstrInfo *, void *, void))(*(void *)a3 + 264))(a3, v7, 0);
        unsigned int v169 = &v171;
        uint64_t v170 = 0;
        BOOL v168 = 0;
        (*(void (**)(llvm::TargetInstrInfo *, void *, llvm::MachineBasicBlock *, void))(*(void *)a3 + 272))(a3, v7, v78, 0);
        goto LABEL_298;
      }
      if (llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v138))
      {
        while (1)
        {
          uint64_t v144 = *(void *)(a4 + 24);
          if (!v144) {
            goto LABEL_346;
          }
          if (*(llvm::MachineBasicBlock **)((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v144
                                                                                                  + 48))(v144, v138)+ 16) == v50)break;
          if (v138 != v7[7])
          {
            unint64_t v138 = *(void *)v138 & 0xFFFFFFFFFFFFFFF8;
            if (!v138 || (*(unsigned char *)v138 & 4) == 0)
            {
              while ((*(_WORD *)(v138 + 44) & 4) != 0)
                unint64_t v138 = *(void *)v138 & 0xFFFFFFFFFFFFFFF8;
            }
            if (llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v138)) {
              continue;
            }
          }
          goto LABEL_297;
        }
        uint64_t v148 = *(void *)(a4 + 24);
        if (!v148) {
LABEL_346:
        }
          sub_1CB920400();
        *(void *)((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v148 + 48))(v148, v138) + 16) = v78;
        goto LABEL_136;
      }
LABEL_297:
      unsigned int v169 = &v171;
      uint64_t v170 = 0;
      BOOL v168 = 0;
      (*(void (**)(llvm::TargetInstrInfo *, void *, llvm::MachineBasicBlock *, void))(*(void *)a3 + 272))(a3, v7, v78, 0);
LABEL_298:
      if (v168)
      {
        int v145 = *v168;
        if ((v145 - 4) > 0x1E)
        {
          if ((v145 - 3) >= 0xFFFFFFFE) {
            unsigned int v146 = v168;
          }
          else {
            unsigned int v146 = 0;
          }
          if ((v145 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v147 = (unint64_t)(v146 + 8);
            goto LABEL_309;
          }
          if (v145 == 3) {
            *((void *)v168 + 1) = 0;
          }
        }
        else if ((v168[1] & 0x7F) == 2 || *((_DWORD *)v168 + 3))
        {
          uint64_t v149 = *((void *)v168 + 2);
          if ((v149 & 4) != 0)
          {
            unint64_t v147 = v149 & 0xFFFFFFFFFFFFFFF8;
            if (v147)
            {
LABEL_309:
              uint64_t v171 = &v168;
              sub_1CC5FA668(v147 + 16, &v171);
            }
          }
        }
      }
      if (v169 != &v171) {
        free(v169);
      }
      goto LABEL_136;
    }
LABEL_318:
    if (v5 != (llvm::MachineBasicBlock **)v174) {
      free(v5);
    }
    unsigned int v6 = v176;
    uint64_t v5 = (llvm::MachineBasicBlock **)v174;
  }
  while (v176);
LABEL_329:
  unsigned int v150 = (uint64_t *)((char *)&v160 + 4);
  if (v159 != v158) {
    unsigned int v150 = &v160;
  }
  uint64_t v151 = *(unsigned int *)v150;
  uint64_t v152 = v159;
  if (v151)
  {
    uint64_t v153 = 0;
    while (*(void *)&v159[v153] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v153 += 8;
      if (8 * v151 == v153) {
        goto LABEL_339;
      }
    }
    uint64_t v152 = &v159[v153];
  }
  if (v152 != &v159[8 * v151]) {
    llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock();
  }
LABEL_339:
  if (v159 != v158) {
    free(v159);
  }
  if (v164 != v163) {
    free(v164);
  }
  if (v175 != v178) {
    free(v175);
  }
}

void sub_1CC75422C(uint64_t a1)
{
}

void sub_1CC7542CC()
{
}

void sub_1CC754394(llvm::Pass *this)
{
  *(void *)this = &unk_1F261D468;
  int v2 = (char *)*((void *)this + 37);
  if (v2 != (char *)this + 312) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC75445C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261D468;
  int v2 = (char *)*((void *)this + 37);
  if (v2 != (char *)this + 312) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC754538()
{
  return "GPU conditional flattener";
}

void sub_1CC754548(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
}

BOOL sub_1CC7545A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v408 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 696) = -2;
  *(void *)(a1 + 280) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = *(uint64_t **)(v3 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::MachineLoopInfo::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineLoopInfo::ID);
  *(void *)(v3 + 288) = v8;
  int v9 = *(llvm::TargetInstrInfo **)(v3 + 280);
  v404 = &unk_1F261D528;
  uint64_t v405 = v3;
  uint64_t v407 = &v404;
  llvm::foldBlocksForCFGProcessing(a2, v8, v9, (uint64_t)&v404);
  if (v407 == &v404)
  {
    (*((void (**)(void **))v404 + 4))(&v404);
  }
  else if (v407)
  {
    (*((void (**)(void))*v407 + 5))();
  }
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  int v10 = (***(uint64_t (****)(void, uint64_t))(v3 + 264))(*(void *)(v3 + 264), a2);
  *(_DWORD *)(v3 + 272) = v10;
  uint64_t v11 = *(void *)(a2 + 48);
  if (!v11)
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v11;
    int v10 = *(_DWORD *)(v3 + 272);
  }
  *(_DWORD *)(v11 + 8) = v10;
  unint64_t v12 = *(void *)(a2 + 112) - *(void *)(a2 + 104);
  uint64_t v13 = v12 & 0x7FFFFFFF8;
  if ((v12 & 0x7FFFFFFF8) != 8)
  {
    uint64_t v379 = v12 & 0x7FFFFFFF8;
    uint64_t v15 = (uint64_t *)(v3 + 296);
    *(_DWORD *)(v3 + 304) = 0;
    unint64_t v16 = (v12 >> 3);
    if ((v12 >> 3))
    {
      unint64_t v17 = v12 >> 3;
      if (v16 > *(unsigned int *)(v3 + 308)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v18 = *v15 + 48 * v16;
      uint64_t v19 = *v15;
      do
      {
        *(_WORD *)v19 &= 0xC000u;
        *(_OWORD *)(v19 + 8) = 0uLL;
        *(_OWORD *)(v19 + 24) = 0uLL;
        *(_DWORD *)(v19 + 40) = -1;
        v19 += 48;
      }
      while (v19 != v18);
      *(_DWORD *)(v3 + 304) = v17;
    }
    *(unsigned char *)(v3 + 256) = 0;
    long long v396 = 0u;
    long long v397 = 0u;
    *(_OWORD *)__p = 0u;
    uint64_t v20 = *(void *)(v3 + 288);
    unsigned int v22 = *(void **)(v20 + 272);
    uint64_t v21 = *(void **)(v20 + 280);
    v394 = (uint64_t *)(v3 + 296);
    if (v22 != v21)
    {
      do
        sub_1CD45F140(__p, v22++);
      while (v22 != v21);
      for (i = *((void *)&v397 + 1); *((void *)&v397 + 1); uint64_t v15 = (uint64_t *)(v3 + 296))
      {
        uint64_t v24 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(i + v397 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((i + v397 - 1) & 0x1FF));
        uint64_t v25 = sub_1CC756628(v24);
        if (v25)
        {
          *(_WORD *)(*v15 + 48 * *(int *)(v25 + 24)) |= 0x200u;
          unsigned int v26 = *(uint64_t **)(v25 + 64);
          unsigned int v27 = *(uint64_t **)(v25 + 72);
          while (v26 != v27)
          {
            uint64_t v28 = *v26++;
            *(_WORD *)(*v15 + 48 * *(int *)(v28 + 24)) |= 0x400u;
          }
        }
        long long v29 = v397;
        --*((void *)&v397 + 1);
        unint64_t v30 = (((void)v396 - (unint64_t)__p[1]) << 6) - 1;
        if ((void *)v396 == __p[1]) {
          unint64_t v30 = 0;
        }
        if (v30 - (*((void *)&v29 + 1) + (void)v29) + 1 >= 0x400)
        {
          operator delete(*(void **)(v396 - 8));
          *(void *)&long long v396 = v396 - 8;
        }
        int v31 = *(void ***)(v24 + 8);
        BOOL v32 = *(void ***)(v24 + 16);
        while (v31 != v32)
        {
          unsigned int v33 = *v31++;
          v404 = v33;
          sub_1CD45F140(__p, &v404);
        }
        uint64_t i = *((void *)&v397 + 1);
      }
    }
    uint64_t v386 = a2;
    uint64_t v34 = *(void *)(a2 + 328);
    uint64_t v35 = *v15 + 48 * *(int *)(v34 + 24);
    *(void *)(v35 + 8) = v34;
    v404 = &v406;
    uint64_t v405 = 0x1000000000;
    LODWORD(v399) = 1;
    uint64_t v400 = 0;
    uint64_t v401 = v35;
    uint64_t v380 = v35;
    unsigned __int8 v402 = 0;
    __n128 v36 = sub_1CB8BBE7C((unint64_t *)&v404, (unint64_t)&v399);
    unsigned int v37 = v405;
    uint64_t v393 = v3;
    if (!v405)
    {
LABEL_36:
      if (v404 != &v406) {
        free(v404);
      }
      v404 = &v406;
      uint64_t v406 = v380;
      uint64_t v407 = 0;
      uint64_t v405 = 0x800000001;
      unsigned int v38 = 1;
      unint64_t v39 = *(uint64_t **)(v386 + 328);
      while (1)
      {
        while (1)
        {
          while (1)
          {
            int v40 = (char *)v404 + 16 * v38;
            int v41 = (unsigned __int16 *)*((void *)v40 - 2);
            uint64_t v42 = *((void *)v40 - 1);
            LODWORD(v405) = v38 - 1;
            unint64_t v43 = (uint64_t *)*((void *)v41 + 1);
            ++*(_DWORD *)(v3 + 252);
            int v44 = *v41;
            if ((~v44 & 0x1010) != 0) {
              break;
            }
            unsigned __int16 *v41 = v44 & 0xFFEF;
LABEL_104:
            unsigned int v38 = v405;
            if (!v405) {
              goto LABEL_111;
            }
          }
          int v45 = v44 & 0x2200;
          if (v42) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v45 == 0;
          }
          if (!v46)
          {
            int v47 = *(_DWORD *)(v3 + 272);
            unsigned int v49 = (char *)v43[20];
            unint64_t v48 = v43[21];
            if ((unint64_t)v49 >= v48)
            {
              int v51 = (char *)v43[19];
              uint64_t v52 = (v49 - v51) >> 4;
              unint64_t v53 = v52 + 1;
              if ((unint64_t)(v52 + 1) >> 60) {
                abort();
              }
              uint64_t v54 = v48 - (void)v51;
              if (v54 >> 3 > v53) {
                unint64_t v53 = v54 >> 3;
              }
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v53;
              }
              if (v55)
              {
                if (v55 >> 60) {
                  sub_1CB833614();
                }
                unsigned int v56 = (char *)operator new(16 * v55);
              }
              else
              {
                unsigned int v56 = 0;
              }
              int v57 = &v56[16 * v52];
              *(_WORD *)int v57 = v47;
              *((void *)v57 + 1) = -1;
              uint64_t v58 = v57;
              if (v49 == v51)
              {
                uint64_t v3 = v393;
                uint64_t v15 = v394;
              }
              else
              {
                uint64_t v3 = v393;
                uint64_t v15 = v394;
                do
                {
                  *((_OWORD *)v58 - 1) = *((_OWORD *)v49 - 1);
                  v58 -= 16;
                  v49 -= 16;
                }
                while (v49 != v51);
                unsigned int v49 = (char *)v43[19];
              }
              int v59 = &v56[16 * v55];
              int v50 = v57 + 16;
              v43[19] = (uint64_t)v58;
              v43[20] = (uint64_t)(v57 + 16);
              v43[21] = (uint64_t)v59;
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              *(_WORD *)unsigned int v49 = v47;
              *((void *)v49 + 1) = -1;
              int v50 = v49 + 16;
              uint64_t v3 = v393;
            }
            v43[20] = (uint64_t)v50;
          }
          if (v43 == v39)
          {
            unint64_t v39 = (uint64_t *)v39[1];
          }
          else
          {
            BOOL v60 = (uint64_t *)v43[1];
            if (v60 != v39 && v60 != v43)
            {
              uint64_t v62 = *v60;
              uint64_t v63 = *v43;
              *(void *)(v63 + 8) = v60;
              *BOOL v60 = v63;
              uint64_t v64 = *v39;
              *(void *)(v62 + 8) = v39;
              *unint64_t v43 = v64;
              *(void *)(v64 + 8) = v43;
              *unint64_t v39 = v62;
            }
          }
          uint64_t v65 = (uint64_t *)v43[11];
          uint64_t v66 = (uint64_t *)v43[12];
          if ((((char *)v66 - (char *)v65) & 0x7FFFFFFF8) == 0) {
            goto LABEL_104;
          }
          unsigned int v67 = (*v41 & 0x1000) != 0 ? v42 - 1 : v42;
          if ((*v41 & 0x800) == 0) {
            break;
          }
          uint64_t v71 = *((void *)v41 + 3);
          int v72 = *(_DWORD *)(*((void *)v41 + 2) + 24);
          uint64_t v73 = *v15;
          if (v405 >= (unint64_t)HIDWORD(v405)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v74 = v67 + 1;
          BOOL v75 = (char *)v404 + 16 * v405;
          *BOOL v75 = v73 + 48 * *(int *)(v71 + 24);
          v75[1] = v74;
          unsigned int v76 = v405 + 1;
          LODWORD(v405) = v76;
          if (v76 >= HIDWORD(v405)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v77 = (char *)v404 + 16 * v76;
          *uint64_t v77 = v73 + 48 * v72;
          v77[1] = v74;
          unsigned int v38 = v405 + 1;
          LODWORD(v405) = v38;
          if (!v38)
          {
LABEL_111:
            if (v404 != &v406) {
              free(v404);
            }
            (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 264) + 96))(*(void *)(v3 + 264), v386, *(void *)(v3 + 280));
            sub_1CD3F260C(__p);
            BOOL v97 = (void **)__p[1];
            unsigned int v98 = (void **)v396;
            if (__p[1] != (void *)v396)
            {
              do
              {
                uint64_t v99 = *v97++;
                operator delete(v99);
              }
              while (v97 != v98);
              if ((void *)v396 != __p[1]) {
                *(void *)&long long v396 = v396 + (((unint64_t)__p[1] - v396 + 7) & 0xFFFFFFFFFFFFFFF8);
              }
            }
            if (__p[0]) {
              operator delete(__p[0]);
            }
            uint64_t v13 = v379;
            return v13 != 8;
          }
        }
        if ((*v41 & 0x100) != 0) {
          break;
        }
        if ((*v41 & 0x400) == 0)
        {
          uint64_t v68 = (unsigned __int16 *)(*v15 + 48 * *(int *)(*v65 + 24));
          unsigned int v69 = *v68;
          if (v405 >= (unint64_t)HIDWORD(v405)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v70 = (char *)v404 + 16 * v405;
          *int v70 = v68;
          v70[1] = v67 + ((v69 >> 6) & 1);
          goto LABEL_102;
        }
        uint64_t v92 = 0;
        uint64_t v93 = *v15;
        do
        {
          uint64_t v95 = *v65++;
          uint64_t v94 = v95;
          if ((*(_WORD *)(v93 + 48 * *(int *)(v95 + 24)) & 0x200) == 0) {
            uint64_t v92 = v94;
          }
        }
        while (v65 != v66);
        uint64_t v89 = v405;
        if (v405 >= (unint64_t)HIDWORD(v405)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v90 = v93 + 48 * *(int *)(v92 + 24);
        uint64_t v91 = v67;
LABEL_101:
        uint64_t v96 = (char *)v404 + 16 * v89;
        *uint64_t v96 = v90;
        v96[1] = v91;
LABEL_102:
        unsigned int v38 = v405 + 1;
        LODWORD(v405) = v38;
        uint64_t v15 = v394;
        if (!v38) {
          goto LABEL_111;
        }
      }
      uint64_t v78 = *(void *)(v3 + 288);
      int v79 = *(_DWORD *)(v78 + 264);
      if (v79)
      {
        uint64_t v80 = *(void *)(v78 + 248);
        unsigned int v81 = v79 - 1;
        uint64_t v82 = (v79 - 1) & ((v43 >> 4) ^ (v43 >> 9));
        int v83 = *(uint64_t **)(v80 + 16 * v82);
        if (v43 == v83)
        {
LABEL_90:
          uint64_t v86 = *(void *)(v80 + 16 * v82 + 8);
LABEL_92:
          uint64_t v87 = sub_1CC756628(v86);
          if (!v87) {
            goto LABEL_104;
          }
          uint64_t v88 = *v15;
          uint64_t v89 = v405;
          if (v405 >= (unint64_t)HIDWORD(v405)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v90 = v88 + 48 * *(int *)(v87 + 24);
          uint64_t v91 = v67 - 1;
          goto LABEL_101;
        }
        int v84 = 1;
        while (v83 != (uint64_t *)-4096)
        {
          int v85 = v82 + v84++;
          uint64_t v82 = v85 & v81;
          int v83 = *(uint64_t **)(v80 + 16 * v82);
          if (v43 == v83) {
            goto LABEL_90;
          }
        }
      }
      uint64_t v86 = 0;
      goto LABEL_92;
    }
    int v392 = (void *)(v3 + 696);
    while (1)
    {
      uint64_t v100 = (char *)v404 + 32 * v37;
      int v101 = *((_DWORD *)v100 - 8);
      uint64_t v102 = *((void *)v100 - 3);
      uint64_t v103 = *((void *)v100 - 2);
      int v104 = *(v100 - 8);
      LODWORD(v405) = --v37;
      if (!v101)
      {
        if ((*(_WORD *)v103 & 0x30) == 0x10)
        {
          *(_WORD *)v103 |= 0x40u;
          *(_WORD *)v102 |= 0x100u;
          *(_DWORD *)(v102 + 40) = 0;
          uint64_t v110 = *(void *)(v102 + 8);
          if (((*(void *)(v110 + 96) - *(void *)(v110 + 88)) & 0x7FFFFFFF8) == 8) {
            *(void *)(v102 + 32) = v110;
          }
        }
        if ((*(_WORD *)v103 & 0x10) == 0)
        {
          LODWORD(v399) = 1;
          uint64_t v400 = 0;
          uint64_t v401 = v103;
          unsigned __int8 v402 = 0;
          __n128 v36 = sub_1CB8BBE7C((unint64_t *)&v404, (unint64_t)&v399);
        }
        goto LABEL_204;
      }
      int v105 = *(void **)(v103 + 8);
      if (v101 == 2) {
        break;
      }
      if (v101 == 1)
      {
        if ((*(_WORD *)v103 & 0x10) == 0)
        {
          *(_WORD *)v103 |= 0x10u;
          char v106 = *(unsigned char *)(v3 + 256);
          if (v106)
          {
            uint64_t v108 = v105[11];
            uint64_t v107 = v105[12];
            uint64_t v109 = v107 - v108;
          }
          else
          {
            uint64_t v108 = v105[11];
            uint64_t v107 = v105[12];
            uint64_t v109 = v107 - v108;
            if (((v107 - v108) & 0x7FFFFFFF8) == 0x10 || ((v105[9] - v105[8]) & 0x7FFFFFFF0) != 0) {
              *(unsigned char *)(v3 + 256) = 1;
            }
          }
          if ((v109 & 0x7FFFFFFF8) == 0x10)
          {
            if (v108 == v107)
            {
LABEL_157:
              *(_WORD *)v103 |= 0x800u;
            }
            else
            {
              while ((*(_WORD *)(*v15 + 48 * *(int *)(*(void *)v108 + 24)) & 0x210) == 0)
              {
                v108 += 8;
                if (v108 == v107) {
                  goto LABEL_157;
                }
              }
            }
          }
          LODWORD(v399) = 2;
          uint64_t v400 = 0;
          uint64_t v401 = v103;
          unsigned __int8 v402 = v106 ^ 1;
          __n128 v36 = sub_1CB8BBE7C((unint64_t *)&v404, (unint64_t)&v399);
          uint64_t v124 = v105[11];
          uint64_t v123 = v105[12];
          while (v123 != v124)
          {
            uint64_t v125 = *(void *)(v123 - 8);
            v123 -= 8;
            uint64_t v126 = *v15 + 48 * *(int *)(v125 + 24);
            *(void *)(v126 + 8) = v125;
            LODWORD(v399) = 0;
            uint64_t v400 = (void *)v103;
            uint64_t v401 = v126;
            unsigned __int8 v402 = 0;
            __n128 v36 = sub_1CB8BBE7C((unint64_t *)&v404, (unint64_t)&v399);
          }
        }
        goto LABEL_204;
      }
LABEL_205:
      if (!v37) {
        goto LABEL_36;
      }
    }
    __int16 v111 = *(_WORD *)v103;
    __int16 v112 = *(_WORD *)v103 | 0x20;
    *(_WORD *)uint64_t v103 = v112;
    if (((v105[12] - v105[11]) & 0x7FFFFFFF8) == 0)
    {
      *(void *)(v103 + 32) = v105;
      *(_DWORD *)(v103 + 40) = 0;
    }
    if ((v111 & 0x800) != 0)
    {
      sub_1CD63444C((uint64_t)&v399, *(uint64_t **)(v3 + 264), v105, *(llvm::TargetInstrInfo **)(v3 + 280));
      __int16 v164 = *(_WORD *)v103 & 0xFFFE | v402;
      *(_WORD *)uint64_t v103 = v164;
      int v166 = v399;
      uint64_t v165 = v400;
      *(void *)(v103 + 16) = v399;
      *(void *)(v103 + 24) = v165;
      int v167 = v401;
      uint64_t v168 = *(void *)(v103 + 8);
      uint64_t v169 = *(void *)(v168 + 32) + 320;
      uint64_t v170 = *(void **)(v168 + 8);
      if (v170 == (void *)v169) {
        uint64_t v170 = 0;
      }
      if (v165 == (_DWORD *)v170) {
        *(_WORD *)uint64_t v103 = v164 | 2;
      }
      int v171 = *((_DWORD *)v166 + 6);
      uint64_t v172 = *v15;
      uint64_t v173 = (_WORD *)(*v15 + 48 * v171);
      int v174 = v165[6];
      if ((*v173 & 0x1000) != 0)
      {
        uint64_t v214 = v172 + 48 * v171;
        uint64_t v217 = *(void *)(v214 + 8);
        uint64_t v216 = (void *)(v214 + 8);
        uint64_t v215 = v217;
        *(void *)(v103 + 16) = v165;
        *(void *)(v103 + 24) = v217;
        uint64_t v218 = v105[7];
        int v387 = v171;
        if (v105 + 6 == (void *)v218)
        {
LABEL_273:
          uint64_t v398 = 0;
          uint64_t v222 = v215;
        }
        else
        {
          while (1)
          {
            unsigned int v219 = **(unsigned __int16 **)(v218 + 16);
            BOOL v115 = v219 > 0x17;
            int v220 = (1 << v219) & 0x83E000;
            if (v115 || v220 == 0) {
              break;
            }
            uint64_t v218 = *(void *)(v218 + 8);
            if ((void *)v218 == v105 + 6) {
              goto LABEL_273;
            }
          }
          uint64_t v250 = *(unsigned __int8 **)(v218 + 56);
          uint64_t v398 = v250;
          uint64_t v222 = v215;
          if (v250)
          {
            int v363 = v167;
            int v364 = v174;
            llvm::MetadataTracking::track((uint64_t)&v398, v250, 2);
            int v174 = v364;
            int v167 = v363;
            uint64_t v222 = *v216;
          }
        }
        int v251 = v174;
        (*(void (**)(void, void *, void, BOOL, BOOL, uint64_t, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 16))(*(void *)(v393 + 264), v105, *(void *)(v172 + 48 * v174 + 8), v104 != 0, v167 == 0, v222, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
        if (!v104) {
          *(_WORD *)v103 |= 0x2000u;
        }
        (*(void (**)(void, void, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264)
                                                                                           + 32))(*(void *)(v393 + 264), *(void *)(v172 + 48 * v251 + 32), *v216, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
        uint64_t v252 = *(void *)(v393 + 296);
        uint64_t v253 = *(void *)(v252 + 48 * *(int *)(v215 + 24) + 32);
        *(void *)(v103 + 32) = v253;
        int v254 = *(_DWORD *)(v172 + 48 * v387 + 40);
        *(_DWORD *)(v103 + 40) = v254;
        uint64_t v255 = v105[8];
        if (((v105[9] - v255) & 0x7FFFFFFF8) == 8)
        {
          int v256 = *(_DWORD *)(*(void *)v255 + 24);
          if ((*(_WORD *)(v252 + 48 * v256) & 0x840) == 0)
          {
            uint64_t v257 = v252 + 48 * v256;
            *(void *)(v257 + 32) = v253;
            *(_DWORD *)(v257 + 40) = v254;
          }
        }
        unsigned int v246 = v398;
        uint64_t v3 = v393;
      }
      else
      {
        uint64_t v175 = (_WORD *)(v172 + 48 * v174);
        uint64_t v176 = v172 + 48 * v171;
        uint64_t v179 = *(void *)(v176 + 32);
        unsigned int v177 = (void *)(v176 + 32);
        uint64_t v178 = v179;
        if ((*v175 & 0x1000) != 0)
        {
          uint64_t v258 = *(uint64_t **)(v178 + 88);
          unint64_t v259 = *(uint64_t **)(v178 + 96);
          if (v258 == v259)
          {
            uint64_t v260 = 0;
          }
          else
          {
            uint64_t v260 = 0;
            do
            {
              uint64_t v262 = *v258++;
              uint64_t v261 = v262;
              if ((*(_WORD *)(v172 + 48 * *(int *)(v262 + 24)) & 0x1000) != 0) {
                uint64_t v260 = v261;
              }
            }
            while (v258 != v259);
          }
          uint64_t v295 = v105[7];
          uint64_t v385 = v177;
          if (v105 + 6 == (void *)v295)
          {
LABEL_372:
            uint64_t v398 = 0;
          }
          else
          {
            while (1)
            {
              unsigned int v296 = **(unsigned __int16 **)(v295 + 16);
              BOOL v115 = v296 > 0x17;
              int v297 = (1 << v296) & 0x83E000;
              if (v115 || v297 == 0) {
                break;
              }
              uint64_t v295 = *(void *)(v295 + 8);
              if ((void *)v295 == v105 + 6) {
                goto LABEL_372;
              }
            }
            uint64_t v299 = *(unsigned __int8 **)(v295 + 56);
            uint64_t v398 = v299;
            if (v299)
            {
              int v390 = v171;
              int v365 = v167;
              int v366 = v174;
              llvm::MetadataTracking::track((uint64_t)&v398, v299, 2);
              int v174 = v366;
              int v167 = v365;
              int v171 = v390;
            }
          }
          int v381 = v174;
          uint64_t v300 = (void *)(v172 + 48 * v174 + 8);
          (*(void (**)(void, void *, void, BOOL, BOOL, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 16))(*(void *)(v393 + 264), v105, *(void *)(v172 + 48 * v171 + 8), v104 != 0, v167 != 0, *v300, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
          if (!v104) {
            *(_WORD *)v103 |= 0x2000u;
          }
          (*(void (**)(void, void, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264)
                                                                                             + 32))(*(void *)(v393 + 264), *v385, *v300, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
          uint64_t v301 = *(void *)(v393 + 296);
          uint64_t v302 = *(void *)(v301 + 48 * *(int *)(v260 + 24) + 32);
          *(void *)(v103 + 32) = v302;
          int v303 = *(_DWORD *)(v172 + 48 * v381 + 40);
          *(_DWORD *)(v103 + 40) = v303;
          uint64_t v304 = v105[8];
          if (((v105[9] - v304) & 0x7FFFFFFF8) == 8)
          {
            int v305 = *(_DWORD *)(*(void *)v304 + 24);
            if ((*(_WORD *)(v301 + 48 * v305) & 0x840) == 0)
            {
              uint64_t v306 = v301 + 48 * v305;
              *(void *)(v306 + 32) = v302;
              *(_DWORD *)(v306 + 40) = v303;
            }
          }
          unsigned int v246 = v398;
          uint64_t v3 = v393;
          uint64_t v15 = v394;
          if (!v398) {
            goto LABEL_204;
          }
          goto LABEL_415;
        }
        uint64_t v180 = *v392;
        uint64_t v181 = v172 + 48 * v174;
        uint64_t v184 = *(void *)(v181 + 32);
        uint64_t v182 = (void *)(v181 + 32);
        uint64_t v183 = v184;
        if (v178 == *v392 && v183 == v180)
        {
          uint64_t v276 = v105[7];
          if (v105 + 6 == (void *)v276)
          {
LABEL_349:
            uint64_t v398 = 0;
          }
          else
          {
            while (1)
            {
              unsigned int v277 = **(unsigned __int16 **)(v276 + 16);
              BOOL v115 = v277 > 0x17;
              int v278 = (1 << v277) & 0x83E000;
              if (v115 || v278 == 0) {
                break;
              }
              uint64_t v276 = *(void *)(v276 + 8);
              if ((void *)v276 == v105 + 6) {
                goto LABEL_349;
              }
            }
            int v286 = *(unsigned __int8 **)(v276 + 56);
            uint64_t v398 = v286;
            if (v286)
            {
              int v367 = v171;
              int v368 = v167;
              int v369 = v174;
              llvm::MetadataTracking::track((uint64_t)&v398, v286, 2);
              int v174 = v369;
              int v167 = v368;
              int v171 = v367;
            }
          }
          int v287 = v171;
          uint64_t v288 = v172 + 48 * v174;
          uint64_t v290 = *(void *)(v288 + 8);
          uint64_t v289 = (void *)(v288 + 8);
          (*(void (**)(void, void *, void, BOOL, BOOL, uint64_t, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 16))(*(void *)(v393 + 264), v105, *(void *)(v172 + 48 * v171 + 8), v104 != 0, v167 != 0, v290, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
          if (!v104) {
            *(_WORD *)v103 |= 0x2000u;
          }
          (*(void (**)(void, void, void, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 24))(*(void *)(v393 + 264), *v289, *v289, 0, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
          *(void *)(v103 + 32) = 0;
          int v291 = *(_DWORD *)(v172 + 48 * v287 + 40);
          *(_DWORD *)(v103 + 40) = v291;
          uint64_t v292 = v105[8];
          if (((v105[9] - v292) & 0x7FFFFFFF8) == 8)
          {
            int v293 = *(_DWORD *)(*(void *)v292 + 24);
            if ((*(_WORD *)(*v15 + 48 * v293) & 0x840) == 0)
            {
              uint64_t v294 = *v15 + 48 * v293;
              *(void *)(v294 + 32) = 0;
              *(_DWORD *)(v294 + 40) = v291;
            }
          }
        }
        else
        {
          if (v178 != v180)
          {
            uint64_t v384 = v177;
            if (v183 == v180)
            {
              *(void *)(v103 + 16) = v165;
              *(void *)(v103 + 24) = v166;
              uint64_t v338 = v105[7];
              if (v105 + 6 == (void *)v338)
              {
LABEL_436:
                uint64_t v398 = 0;
              }
              else
              {
                while (1)
                {
                  unsigned int v339 = **(unsigned __int16 **)(v338 + 16);
                  BOOL v115 = v339 > 0x17;
                  int v340 = (1 << v339) & 0x83E000;
                  if (v115 || v340 == 0) {
                    break;
                  }
                  uint64_t v338 = *(void *)(v338 + 8);
                  if ((void *)v338 == v105 + 6) {
                    goto LABEL_436;
                  }
                }
                unint64_t v344 = *(unsigned __int8 **)(v338 + 56);
                uint64_t v398 = v344;
                if (v344)
                {
                  int v391 = v171;
                  int v372 = v167;
                  int v373 = v174;
                  llvm::MetadataTracking::track((uint64_t)&v398, v344, 2);
                  int v174 = v373;
                  int v167 = v372;
                  int v171 = v391;
                }
              }
              int v382 = v174;
              uint64_t v345 = v172 + 48 * v171;
              uint64_t v347 = *(void *)(v345 + 8);
              uint64_t v346 = (void *)(v345 + 8);
              (*(void (**)(void, void *, uint64_t, BOOL, BOOL, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 16))(*(void *)(v393 + 264), v105, v347, v104 != 0, v167 == 0, *(void *)(v172 + 48 * v174 + 8), &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
              if (!v104) {
                *(_WORD *)v103 |= 0x2000u;
              }
              (*(void (**)(void, void, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264)
                                                                                                 + 32))(*(void *)(v393 + 264), *v346, *v384, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
              uint64_t v348 = *(void *)(v393 + 296);
              uint64_t v349 = *(void *)(v348 + 48 * *(int *)(v178 + 24) + 32);
              *(void *)(v103 + 32) = v349;
              int v350 = *(_DWORD *)(v172 + 48 * v382 + 40);
            }
            else
            {
              int v377 = v182;
              uint64_t v186 = *(uint64_t **)(v178 + 88);
              int v187 = *(uint64_t **)(v178 + 96);
              if (v186 == v187)
              {
                uint64_t v211 = 0;
              }
              else
              {
                uint64_t v188 = 0;
                uint64_t v189 = *(uint64_t **)(v178 + 88);
                do
                {
                  uint64_t v191 = *v189++;
                  uint64_t v190 = v191;
                  if ((*(_WORD *)(v172 + 48 * *(int *)(v191 + 24)) & 0x200) != 0) {
                    uint64_t v188 = v190;
                  }
                }
                while (v189 != v187);
                if (!v188) {
                  goto LABEL_437;
                }
                int v192 = *(uint64_t **)(v183 + 88);
                int v193 = *(uint64_t **)(v183 + 96);
                if (v192 == v193) {
                  goto LABEL_437;
                }
                uint64_t v194 = 0;
                do
                {
                  uint64_t v196 = *v192++;
                  uint64_t v195 = v196;
                  if ((*(_WORD *)(v172 + 48 * *(int *)(v196 + 24)) & 0x200) != 0) {
                    uint64_t v194 = v195;
                  }
                }
                while (v192 != v193);
                if (v194)
                {
                  int v197 = 0;
                  uint64_t v198 = 0;
                  uint64_t v199 = 0;
                  char v200 = 1;
                  int v201 = -1;
                  do
                  {
                    char v202 = v197;
                    if (v200) {
                      uint64_t v203 = *v15 + 48 * v171;
                    }
                    else {
                      uint64_t v203 = (uint64_t)v175;
                    }
                    if (((*(void *)(*(void *)(v203 + 8) + 96) - *(void *)(*(void *)(v203 + 8) + 88)) & 0x7FFFFFFF8) == 8)
                    {
                      int v201 = v197;
                    }
                    else
                    {
                      uint64_t v204 = 0;
                      uint64_t v205 = *(void *)(v203 + 32);
                      int v206 = *(uint64_t **)(v205 + 88);
                      uint64_t v207 = *(uint64_t **)(v205 + 96);
                      do
                      {
                        uint64_t v209 = *v206++;
                        uint64_t v208 = v209;
                        if ((*(_WORD *)(v172 + 48 * *(int *)(v209 + 24)) & 0x200) == 0) {
                          uint64_t v204 = v208;
                        }
                      }
                      while (v206 != v207);
                      uint64_t v210 = *(void *)(v172 + 48 * *(int *)(v204 + 24) + 8);
                      if (v200) {
                        uint64_t v198 = v210;
                      }
                      else {
                        uint64_t v199 = v210;
                      }
                    }
                    char v200 = 0;
                    int v197 = 1;
                  }
                  while ((v202 & 1) == 0);
                  if (!v198) {
                    uint64_t v199 = 0;
                  }
                  if (v201 == -1) {
                    uint64_t v211 = v198;
                  }
                  else {
                    uint64_t v211 = v199;
                  }
                }
                else
                {
LABEL_437:
                  uint64_t v211 = 0;
                  do
                  {
                    uint64_t v343 = *v186++;
                    uint64_t v342 = v343;
                    if ((*(_WORD *)(v172 + 48 * *(int *)(v343 + 24)) & 0x1000) != 0) {
                      uint64_t v211 = v342;
                    }
                  }
                  while (v186 != v187);
                }
              }
              uint64_t v351 = v105[7];
              int v389 = v171;
              if (v105 + 6 == (void *)v351)
              {
LABEL_454:
                uint64_t v398 = 0;
              }
              else
              {
                while (1)
                {
                  unsigned int v352 = **(unsigned __int16 **)(v351 + 16);
                  BOOL v115 = v352 > 0x17;
                  int v353 = (1 << v352) & 0x83E000;
                  if (v115 || v353 == 0) {
                    break;
                  }
                  uint64_t v351 = *(void *)(v351 + 8);
                  if ((void *)v351 == v105 + 6) {
                    goto LABEL_454;
                  }
                }
                uint64_t v355 = *(unsigned __int8 **)(v351 + 56);
                uint64_t v398 = v355;
                if (v355)
                {
                  int v383 = v167;
                  int v376 = v175;
                  llvm::MetadataTracking::track((uint64_t)&v398, v355, 2);
                  uint64_t v175 = v376;
                  int v167 = v383;
                }
              }
              if (v167) {
                v356 = v175;
              }
              else {
                v356 = v173;
              }
              uint64_t v357 = *((void *)v356 + 1);
              if (v167) {
                v358 = v173;
              }
              else {
                v358 = v175;
              }
              uint64_t v359 = *((void *)v358 + 1);
              (*(void (**)(void, void *, uint64_t, BOOL, BOOL, uint64_t, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 16))(*(void *)(v393 + 264), v105, v357, v104 != 0, v167 != 0, v359, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
              if (!v104) {
                *(_WORD *)v103 |= 0x2000u;
              }
              (*(void (**)(void, void, uint64_t, uint64_t, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 24))(*(void *)(v393 + 264), *v384, v359, v211, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
              (*(void (**)(void, void, uint64_t, unsigned __int8 **, void, void))(**(void **)(v393 + 264)
                                                                                                  + 32))(*(void *)(v393 + 264), *v377, v211, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
              uint64_t v348 = *(void *)(v393 + 296);
              uint64_t v349 = *(void *)(v348 + 48 * *(int *)(v211 + 24) + 32);
              *(void *)(v103 + 32) = v349;
              int v350 = *(_DWORD *)(v172 + 48 * v389 + 40) - 1;
            }
            *(_DWORD *)(v103 + 40) = v350;
            uint64_t v360 = v105[8];
            if (((v105[9] - v360) & 0x7FFFFFFF8) == 8)
            {
              int v361 = *(_DWORD *)(*(void *)v360 + 24);
              if ((*(_WORD *)(v348 + 48 * v361) & 0x840) == 0)
              {
                uint64_t v362 = v348 + 48 * v361;
                *(void *)(v362 + 32) = v349;
                *(_DWORD *)(v362 + 40) = v350;
              }
            }
            unsigned int v246 = v398;
            uint64_t v3 = v393;
            if (!v398) {
              goto LABEL_204;
            }
            goto LABEL_415;
          }
          int v378 = v182;
          uint64_t v320 = v105[7];
          int v388 = *((_DWORD *)v166 + 6);
          if (v105 + 6 == (void *)v320)
          {
LABEL_405:
            uint64_t v321 = v183;
            uint64_t v398 = 0;
          }
          else
          {
            while (1)
            {
              uint64_t v321 = v183;
              unsigned int v322 = **(unsigned __int16 **)(v320 + 16);
              BOOL v115 = v322 > 0x17;
              int v323 = (1 << v322) & 0x83E000;
              if (v115 || v323 == 0) {
                break;
              }
              uint64_t v320 = *(void *)(v320 + 8);
              if ((void *)v320 == v105 + 6) {
                goto LABEL_405;
              }
            }
            uint64_t v325 = *(unsigned __int8 **)(v320 + 56);
            uint64_t v398 = v325;
            if (v325)
            {
              int v370 = v167;
              int v371 = v174;
              llvm::MetadataTracking::track((uint64_t)&v398, v325, 2);
              int v174 = v371;
              int v167 = v370;
              int v171 = v388;
            }
          }
          uint64_t v326 = v172 + 48 * v174;
          uint64_t v328 = *(void *)(v326 + 8);
          unint64_t v327 = (void *)(v326 + 8);
          (*(void (**)(void, void *, void, BOOL, BOOL, uint64_t, unsigned __int8 **, void, void))(**(void **)(v393 + 264) + 16))(*(void *)(v393 + 264), v105, *(void *)(v172 + 48 * v171 + 8), v104 != 0, v167 != 0, v328, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
          if (!v104) {
            *(_WORD *)v103 |= 0x2000u;
          }
          (*(void (**)(void, void, void, unsigned __int8 **, void, void))(**(void **)(v393 + 264)
                                                                                             + 32))(*(void *)(v393 + 264), *v327, *v378, &v398, *(unsigned int *)(v393 + 272), *(void *)(v393 + 280));
          uint64_t v329 = *(void *)(v393 + 296);
          uint64_t v330 = *(void *)(v329 + 48 * *(int *)(v321 + 24) + 32);
          *(void *)(v103 + 32) = v330;
          int v331 = *(_DWORD *)(v172 + 48 * v388 + 40);
          *(_DWORD *)(v103 + 40) = v331;
          uint64_t v332 = v105[8];
          if (((v105[9] - v332) & 0x7FFFFFFF8) == 8)
          {
            int v333 = *(_DWORD *)(*(void *)v332 + 24);
            if ((*(_WORD *)(v329 + 48 * v333) & 0x840) == 0)
            {
              uint64_t v334 = v329 + 48 * v333;
              *(void *)(v334 + 32) = v330;
              *(_DWORD *)(v334 + 40) = v331;
            }
          }
        }
        unsigned int v246 = v398;
        uint64_t v3 = v393;
      }
      if (!v246) {
        goto LABEL_204;
      }
LABEL_415:
      int v247 = *v246;
      if ((v247 - 4) > 0x1E)
      {
        if ((v247 - 3) >= 0xFFFFFFFE) {
          int v337 = v246;
        }
        else {
          int v337 = 0;
        }
        if ((v247 - 3) < 0xFFFFFFFE) {
          goto LABEL_428;
        }
        unint64_t v336 = (unint64_t)(v337 + 8);
      }
      else
      {
        if ((v246[1] & 0x7F) != 2 && !*((_DWORD *)v246 + 3)) {
          goto LABEL_204;
        }
        uint64_t v335 = *((void *)v246 + 2);
        if ((v335 & 4) == 0) {
          goto LABEL_204;
        }
        unint64_t v336 = v335 & 0xFFFFFFFFFFFFFFF8;
        if (!v336) {
          goto LABEL_204;
        }
      }
      uint64_t v403 = (unsigned __int8 *)&v398;
      uint64_t v264 = v336 + 16;
      int v265 = &v403;
      goto LABEL_427;
    }
    if ((v111 & 0x40) == 0)
    {
      if ((v111 & 0x80) != 0)
      {
        uint64_t v113 = v105[7];
        if (v105 + 6 == (void *)v113)
        {
LABEL_143:
          uint64_t v403 = 0;
        }
        else
        {
          while (1)
          {
            unsigned int v114 = **(unsigned __int16 **)(v113 + 16);
            BOOL v115 = v114 > 0x17;
            int v116 = (1 << v114) & 0x83E000;
            if (v115 || v116 == 0) {
              break;
            }
            uint64_t v113 = *(void *)(v113 + 8);
            if ((void *)v113 == v105 + 6) {
              goto LABEL_143;
            }
          }
          unsigned int v127 = *(unsigned __int8 **)(v113 + 56);
          uint64_t v403 = v127;
          if (v127) {
            llvm::MetadataTracking::track((uint64_t)&v403, v127, 2);
          }
        }
        (*(void (**)(void, void *, BOOL, unsigned __int8 **, void, void, __n128))(**(void **)(v3 + 264) + 40))(*(void *)(v3 + 264), v105, v104 != 0, &v403, *(unsigned int *)(v3 + 272), *(void *)(v3 + 280), v36);
        if (!v104) {
          *(_WORD *)v103 |= 0x2000u;
        }
        if (v403)
        {
          int v128 = *v403;
          if ((v128 - 4) > 0x1E)
          {
            if ((v128 - 3) >= 0xFFFFFFFE) {
              uint64_t v212 = v403;
            }
            else {
              uint64_t v212 = 0;
            }
            if ((v128 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v213 = (unint64_t)(v212 + 8);
              goto LABEL_266;
            }
            if (v128 == 3) {
              *((void *)v403 + 1) = 0;
            }
          }
          else if ((v403[1] & 0x7F) == 2 || *((_DWORD *)v403 + 3))
          {
            uint64_t v374 = *((void *)v403 + 2);
            if ((v374 & 4) != 0)
            {
              unint64_t v213 = v374 & 0xFFFFFFFFFFFFFFF8;
              if (v213)
              {
LABEL_266:
                v399 = &v403;
                sub_1CC5FA668(v213 + 16, &v399);
              }
            }
          }
        }
        __int16 v112 = *(_WORD *)v103;
      }
      if ((v112 & 0x300) == 0x200)
      {
        uint64_t v129 = v105[8];
        uint64_t v130 = v105[9];
        if (v129 != v130)
        {
          uint64_t v131 = *v15;
          do
          {
            uint64_t v132 = v131 + 48 * *(int *)(*(void *)v129 + 24);
            uint64_t v134 = *(void *)(v132 + 32);
            int v133 = (void *)(v132 + 32);
            if (!v134) {
              *int v133 = *(void *)v129;
            }
            v129 += 8;
          }
          while (v129 != v130);
        }
        goto LABEL_191;
      }
      if (((v105[12] - v105[11]) & 0x7FFFFFFF0) == 0)
      {
        uint64_t v135 = v105[9] - v105[8];
        if ((v112 & 0x100) != 0 || (v135 & 0x7FFFFFFF8) != 8) {
          goto LABEL_179;
        }
        (*(void (**)(void, void *, void, __n128))(**(void **)(v3 + 280) + 264))(*(void *)(v3 + 280), v105, 0, v36);
        uint64_t v155 = v105[8];
        if (((v105[9] - v155) & 0x7FFFFFFF8) == 8)
        {
          int v156 = *(_DWORD *)(*(void *)v155 + 24);
          if ((*(_WORD *)(*v15 + 48 * v156) & 0x840) == 0)
          {
            uint64_t v157 = *v15 + 48 * v156;
            *(void *)(v157 + 32) = *(void *)(v103 + 32);
            *(_DWORD *)(v157 + 40) = *(_DWORD *)(v103 + 40);
          }
        }
LABEL_204:
        unsigned int v37 = v405;
        goto LABEL_205;
      }
      uint64_t v135 = v105[9] - v105[8];
LABEL_179:
      if ((v135 & 0x7FFFFFFF8) == 0x10)
      {
        v112 |= 0x1000u;
        *(_WORD *)uint64_t v103 = v112;
        uint64_t v136 = (uint64_t *)v105[8];
        int v137 = (uint64_t *)v105[9];
        if (v136 != v137)
        {
          uint64_t v138 = *v15;
          do
          {
            uint64_t v139 = *v136;
            int v140 = *(_DWORD *)(*v136 + 24);
            __int16 v141 = *(_WORD *)(v138 + 48 * v140);
            if ((v141 & 0x800) == 0)
            {
              *(_DWORD *)(v138 + 48 * v140 + 40) = *(_DWORD *)(v103 + 40) + 1;
              if ((v141 & 0x400) == 0) {
                *(void *)(v138 + 48 * v140 + 32) = v139;
              }
            }
            ++v136;
          }
          while (v136 != v137);
          __int16 v112 = *(_WORD *)v103;
        }
        if ((v112 & 0x100) == 0)
        {
LABEL_191:
          (*(void (**)(void, void *, void, __n128))(**(void **)(v3 + 280) + 264))(*(void *)(v3 + 280), v105, 0, v36);
          goto LABEL_204;
        }
      }
      if ((v112 & 0x500) != 0x400)
      {
        if ((v112 & 0x100) == 0)
        {
          if ((v112 & 0x80) == 0) {
            goto LABEL_191;
          }
          goto LABEL_204;
        }
        unint64_t v158 = (char *)v105[11];
        uint64_t v159 = (char *)v105[12];
        if (v158 == v159)
        {
          uint64_t v160 = 0;
        }
        else
        {
          uint64_t v160 = 0;
          int v161 = (uint64_t *)v105[11];
          do
          {
            int v163 = (unsigned __int8 **)*v161++;
            uint64_t v162 = v163;
            if ((*(_WORD *)(*v15 + 48 * *((int *)v163 + 6)) & 0x40) != 0) {
              uint64_t v160 = v162;
            }
          }
          while (v161 != (uint64_t *)v159);
        }
        if (((v159 - v158) & 0x7FFFFFFF8) == 0x10)
        {
          sub_1CD63444C((uint64_t)&v399, *(uint64_t **)(v3 + 264), v105, *(llvm::TargetInstrInfo **)(v3 + 280));
          __int16 v307 = *(_WORD *)v103 & 0xFFFE | v402;
          *(_WORD *)uint64_t v103 = v307;
          v309 = v399;
          uint64_t v308 = (unsigned __int8 **)v400;
          *(void *)(v103 + 16) = v399;
          *(void *)(v103 + 24) = v308;
          uint64_t v310 = *(void *)(v103 + 8);
          uint64_t v311 = *(void *)(v310 + 32) + 320;
          uint64_t v312 = *(unsigned __int8 ***)(v310 + 8);
          if (v312 == (unsigned __int8 **)v311) {
            uint64_t v312 = 0;
          }
          if (v308 == v312) {
            *(_WORD *)uint64_t v103 = v307 | 2;
          }
          if ((_BYTE)v401)
          {
            *(void *)(v103 + 16) = v308;
            *(void *)(v103 + 24) = v309;
            uint64_t v308 = v309;
          }
          BOOL v223 = v160 == v308;
        }
        else
        {
          BOOL v223 = 1;
        }
        uint64_t v224 = v105[7];
        if (v105 + 6 == (void *)v224)
        {
LABEL_283:
          uint64_t v403 = 0;
        }
        else
        {
          while (1)
          {
            unsigned int v225 = **(unsigned __int16 **)(v224 + 16);
            BOOL v115 = v225 > 0x17;
            int v226 = (1 << v225) & 0x83E000;
            if (v115 || v226 == 0) {
              break;
            }
            uint64_t v224 = *(void *)(v224 + 8);
            if ((void *)v224 == v105 + 6) {
              goto LABEL_283;
            }
          }
          uint64_t v228 = *(unsigned __int8 **)(v224 + 56);
          uint64_t v403 = v228;
          if (v228) {
            llvm::MetadataTracking::track((uint64_t)&v403, v228, 2);
          }
        }
        uint64_t v229 = *(void *)(v393 + 288);
        int v230 = *(_DWORD *)(v229 + 264);
        if (v230)
        {
          uint64_t v231 = *(void *)(v229 + 248);
          unsigned int v232 = v230 - 1;
          uint64_t v233 = (v230 - 1) & ((v160 >> 4) ^ (v160 >> 9));
          int v234 = *(unsigned __int8 ***)(v231 + 16 * v233);
          if (v160 == v234)
          {
LABEL_291:
            uint64_t v237 = *(void *)(v231 + 16 * v233 + 8);
LABEL_293:
            uint64_t v238 = sub_1CC756628(v237);
            LODWORD(v375) = *(_DWORD *)(v103 + 40);
            (*(void (**)(void, void *, unsigned __int8 **, uint64_t, unsigned __int8 **, void, BOOL, BOOL, uint64_t, void))(**(void **)(v393 + 264) + 48))(*(void *)(v393 + 264), v105, v160, v238, &v403, *(unsigned int *)(v393 + 272), ((v105[12] - v105[11]) & 0x7FFFFFFF8) == 16, v223, v375, *(void *)(v393 + 280));
            if ((*(_WORD *)v103 & 0x200) != 0)
            {
              uint64_t v240 = v105[8];
              uint64_t v241 = v105[9];
              uint64_t v3 = v393;
              if (v240 != v241)
              {
                uint64_t v242 = *v15;
                do
                {
                  uint64_t v243 = v242 + 48 * *(int *)(*(void *)v240 + 24);
                  uint64_t v245 = *(void *)(v243 + 32);
                  int v244 = (void *)(v243 + 32);
                  if (!v245) {
                    *int v244 = *(void *)v240;
                  }
                  v240 += 8;
                }
                while (v240 != v241);
              }
            }
            else
            {
              uint64_t v3 = v393;
              if ((*(_WORD *)v103 & 0x1000) == 0)
              {
                uint64_t v239 = *v15 + 48 * *(int *)(*(void *)v105[8] + 24);
                *(void *)(v239 + 32) = v105;
                *(_DWORD *)(v239 + 40) = 0;
              }
            }
            unsigned int v246 = v403;
            if (!v403) {
              goto LABEL_204;
            }
            int v247 = *v403;
            if ((v247 - 4) <= 0x1E)
            {
              if ((v403[1] & 0x7F) != 2 && !*((_DWORD *)v403 + 3)) {
                goto LABEL_204;
              }
              uint64_t v248 = *((void *)v403 + 2);
              if ((v248 & 4) == 0) {
                goto LABEL_204;
              }
              unint64_t v249 = v248 & 0xFFFFFFFFFFFFFFF8;
              if (!v249) {
                goto LABEL_204;
              }
              goto LABEL_329;
            }
            if ((v247 - 3) >= 0xFFFFFFFE) {
              int v263 = v403;
            }
            else {
              int v263 = 0;
            }
            if ((v247 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v249 = (unint64_t)(v263 + 8);
LABEL_329:
              v399 = &v403;
              uint64_t v264 = v249 + 16;
              int v265 = (unsigned __int8 **)&v399;
LABEL_427:
              sub_1CC5FA668(v264, v265);
              goto LABEL_204;
            }
LABEL_428:
            if (v247 == 3) {
              *((void *)v246 + 1) = 0;
            }
            goto LABEL_204;
          }
          int v235 = 1;
          while (v234 != (unsigned __int8 **)-4096)
          {
            int v236 = v233 + v235++;
            uint64_t v233 = v236 & v232;
            int v234 = *(unsigned __int8 ***)(v231 + 16 * v233);
            if (v160 == v234) {
              goto LABEL_291;
            }
          }
        }
        uint64_t v237 = 0;
        goto LABEL_293;
      }
      sub_1CD63444C((uint64_t)&v399, *(uint64_t **)(v3 + 264), v105, *(llvm::TargetInstrInfo **)(v3 + 280));
      __int16 v266 = *(_WORD *)v103 & 0xFFFE | v402;
      *(_WORD *)uint64_t v103 = v266;
      int v267 = v399;
      int v268 = v400;
      *(void *)(v103 + 16) = v399;
      *(void *)(v103 + 24) = v268;
      uint64_t v269 = *(void *)(v103 + 8);
      uint64_t v270 = *(void *)(v269 + 32) + 320;
      unsigned int v271 = *(void **)(v269 + 8);
      if (v271 == (void *)v270) {
        unsigned int v271 = 0;
      }
      if (v268 == v271) {
        *(_WORD *)uint64_t v103 = v266 | 2;
      }
      if ((_BYTE)v401)
      {
        *(void *)(v103 + 16) = v268;
        *(void *)(v103 + 24) = v267;
      }
      uint64_t v272 = v105[7];
      if (v105 + 6 == (void *)v272)
      {
LABEL_342:
        uint64_t v398 = 0;
      }
      else
      {
        while (1)
        {
          unsigned int v273 = **(unsigned __int16 **)(v272 + 16);
          BOOL v115 = v273 > 0x17;
          int v274 = (1 << v273) & 0x83E000;
          if (v115 || v274 == 0) {
            break;
          }
          uint64_t v272 = *(void *)(v272 + 8);
          if ((void *)v272 == v105 + 6) {
            goto LABEL_342;
          }
        }
        int v280 = *(unsigned __int8 **)(v272 + 56);
        uint64_t v398 = v280;
        if (v280) {
          llvm::MetadataTracking::track((uint64_t)&v398, v280, 2);
        }
      }
      uint64_t v281 = (uint64_t *)v105[11];
      uint64_t v282 = (uint64_t *)v105[12];
      if (v281 == v282)
      {
        uint64_t v283 = 0;
      }
      else
      {
        uint64_t v283 = 0;
        do
        {
          uint64_t v285 = *v281++;
          uint64_t v284 = v285;
          if ((*(_WORD *)(*v15 + 48 * *(int *)(v285 + 24)) & 0x200) != 0) {
            uint64_t v283 = v284;
          }
        }
        while (v281 != v282);
      }
      uint64_t v313 = *(void *)(v103 + 16);
      uint64_t v314 = v313;
      if (v313 == v283) {
        uint64_t v314 = *(void *)(v103 + 24);
      }
      (*(void (**)(void, void *, uint64_t, uint64_t, unsigned __int8 **, void, BOOL, void, void))(**(void **)(v3 + 264) + 56))(*(void *)(v3 + 264), v105, v283, v314, &v398, *(unsigned int *)(v3 + 272), v313 == v283, *(unsigned int *)(v103 + 40), *(void *)(v3 + 280));
      uint64_t v315 = v105[8];
      int v316 = *(_DWORD *)(*(void *)v315 + 24);
      uint64_t v317 = *(void *)(v3 + 296);
      if ((*(_WORD *)(v317 + 48 * v316) & 0x400) != 0) {
        *(void *)(v317 + 48 * v316 + 32) = 0;
      }
      if (((v105[9] - v315) & 0x7FFFFFFF8) == 8)
      {
        int v318 = *(_DWORD *)(*(void *)v315 + 24);
        if ((*(_WORD *)(v317 + 48 * v318) & 0x840) == 0)
        {
          uint64_t v319 = v317 + 48 * v318;
          *(void *)(v319 + 32) = *(void *)(v103 + 32);
          *(_DWORD *)(v319 + 40) = *(_DWORD *)(v103 + 40);
        }
      }
      unsigned int v246 = v398;
      if (!v398) {
        goto LABEL_204;
      }
      goto LABEL_415;
    }
    int v118 = (uint64_t *)v105[8];
    int v119 = (uint64_t *)v105[9];
    if (v118 == v119)
    {
      int v120 = 0;
    }
    else
    {
      int v120 = 0;
      do
      {
        uint64_t v121 = *v118++;
        unsigned int v122 = (_WORD *)(*v15 + 48 * *(int *)(v121 + 24));
        if ((*v122 & 0x100) == 0) {
          int v120 = v122;
        }
      }
      while (v118 != v119);
    }
    uint64_t v142 = *(void *)(v3 + 288);
    int v143 = *(_DWORD *)(v142 + 264);
    if (v143)
    {
      uint64_t v144 = *(void *)(v142 + 248);
      unsigned int v145 = v143 - 1;
      uint64_t v146 = (v143 - 1) & ((v105 >> 4) ^ (v105 >> 9));
      unint64_t v147 = *(void **)(v144 + 16 * v146);
      if (v105 == v147)
      {
LABEL_198:
        uint64_t v150 = *(void *)(v144 + 16 * v146 + 8);
LABEL_200:
        uint64_t v151 = sub_1CC756628(v150);
        if (v151)
        {
          uint64_t v152 = *v15 + 48 * *(int *)(v151 + 24);
          uint64_t v153 = (void *)(v152 + 32);
          int v154 = *(_DWORD *)(v152 + 40);
        }
        else
        {
          int v154 = 0;
          uint64_t v153 = v392;
        }
        *((void *)v120 + 4) = *v153;
        *((_DWORD *)v120 + 10) = v154;
        *v120 |= 0x80u;
        (*(void (**)(void))(**(void **)(v3 + 280) + 264))();
        goto LABEL_204;
      }
      int v148 = 1;
      while (v147 != (void *)-4096)
      {
        int v149 = v146 + v148++;
        uint64_t v146 = v149 & v145;
        unint64_t v147 = *(void **)(v144 + 16 * v146);
        if (v105 == v147) {
          goto LABEL_198;
        }
      }
    }
    uint64_t v150 = 0;
    goto LABEL_200;
  }
  return v13 != 8;
}

uint64_t sub_1CC756628(uint64_t a1)
{
  v30[128] = *MEMORY[0x1E4F143B8];
  unsigned int v22 = 0;
  int v2 = *(unsigned char **)(a1 + 32);
  uint64_t v3 = *(unsigned char **)(a1 + 40);
  uint64_t v28 = v30;
  uint64_t v29 = 0x8000000000;
  sub_1CD47792C((unsigned int *)&v28, v2, v3);
  unint64_t v4 = 126 - 2 * __clz(v29);
  if (v29) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  sub_1CD6340A0((unint64_t *)v28, (unint64_t *)v28 + v29, v5, 1);
  uint64_t v24 = v27;
  unsigned int v26 = 32;
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  uint64_t v6 = *(uint64_t **)(a1 + 40);
  if (v6 == v7) {
    goto LABEL_33;
  }
  do
  {
    uint64_t v8 = *v7;
    unsigned int v25 = 0;
    int v9 = *(unint64_t **)(v8 + 88);
    int v10 = *(unint64_t **)(v8 + 96);
    while (v9 != v10)
    {
      unint64_t v11 = *v9;
      unint64_t v12 = (unint64_t *)v28;
      if (v29)
      {
        unint64_t v13 = v29;
        do
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v12[v13 >> 1];
          unint64_t v17 = *v15;
          unint64_t v16 = v15 + 1;
          v13 += ~(v13 >> 1);
          if (v17 < v11) {
            unint64_t v12 = v16;
          }
          else {
            unint64_t v13 = v14;
          }
        }
        while (v13);
      }
      if ((v12 == (unint64_t *)((char *)v28 + 8 * v29) || v11 < *v12)
        && v8 == **(void **)(v11 + 64))
      {
        if ((uint64_t)(*(void *)(v8 + 96) - *(void *)(v8 + 88)) <= 23) {
          goto LABEL_25;
        }
        uint64_t v18 = (char *)v24;
        if (v25)
        {
          uint64_t v19 = 8 * v25;
          uint64_t v18 = (char *)v24;
          while (*(void *)v18 != v11)
          {
            v18 += 8;
            v19 -= 8;
            if (!v19)
            {
              uint64_t v18 = (char *)v24 + 8 * v25;
              break;
            }
          }
        }
        if (v25 == (v18 - (unsigned char *)v24) >> 3)
        {
          if (v25 >= v26) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v24 + v25++) = v11;
          unint64_t v11 = *v9;
LABEL_25:
          if (v22 >= 8uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v23[v22++] = v11;
        }
      }
      ++v9;
    }
    ++v7;
  }
  while (v7 != v6);
  if (v24 != v27) {
    free(v24);
  }
LABEL_33:
  if (v28 != v30) {
    free(v28);
  }
  if (v22 == 1) {
    return v23[0];
  }
  else {
    return 0;
  }
}

void sub_1CC7568D0()
{
}

void *sub_1CC7568E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F261D528;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC75692C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261D528;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC756958(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 264) + 80))();
}

unint64_t *sub_1CC75699C(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  do
    unint64_t v4 = a1[++v2];
  while (v4 < v3);
  uint64_t v5 = &a1[v2];
  uint64_t v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unint64_t v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      unint64_t v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    unint64_t v9 = *a2;
    int v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      *int v10 = v9;
      unint64_t *v11 = v4;
      do
      {
        unint64_t v12 = v10[1];
        ++v10;
        unint64_t v4 = v12;
      }
      while (v12 < v3);
      do
      {
        unint64_t v13 = *--v11;
        unint64_t v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    uint64_t v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  unint64_t *v6 = v3;
  return v6;
}

BOOL sub_1CC756A50(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB0A088(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB0A328(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CBB0A3A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_1CBB0A088(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC756BD8(llvm::DataLayout *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v45[6] = *MEMORY[0x1E4F143B8];
  unsigned int v42 = *(_DWORD *)(*((void *)a1 + 29) + 4);
  if (v42 > 0x40) {
    operator new[]();
  }
  int v41 = 0;
  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
    if (v10 != 62) {
      break;
    }
LABEL_7:
    int v12 = *(_DWORD *)(a2 + 20);
    if ((v12 & 0x40000000) != 0)
    {
      uint64_t v14 = *(void *)(a2 - 8);
      uint64_t v13 = v12 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v13 = v12 & 0x7FFFFFF;
      uint64_t v14 = a2 - 32 * v13;
    }
    unint64_t v43 = v45;
    uint64_t v44 = 0x600000000;
    unint64_t v15 = 32 * v13 - 32;
    if (v15 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v16 = (llvm::Constant **)v45;
    if (v13 != 1)
    {
      unint64_t v17 = (uint64_t *)(v14 + 32);
      uint64_t v18 = v45;
      uint64_t v19 = 32 * v13 - 32;
      do
      {
        uint64_t v20 = *v17;
        v17 += 4;
        *v18++ = v20;
        v19 -= 32;
      }
      while (v19);
      unint64_t v16 = (llvm::Constant **)v43;
    }
    LODWORD(v44) = v15 >> 5;
    if (*(unsigned char *)(a2 + 16) != 62 || a2 == 0) {
      uint64_t v22 = 24;
    }
    else {
      uint64_t v22 = 64;
    }
    int v23 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a2 + v22), v16, (v15 >> 5), a1, (llvm::APInt *)&v41, 0, a7);
    if (v43 == v45)
    {
      if (!v23) {
        goto LABEL_56;
      }
    }
    else
    {
      free(v43);
      if (!v23) {
        goto LABEL_56;
      }
    }
LABEL_25:
    int v24 = *(_DWORD *)(a2 + 20);
    if ((v24 & 0x40000000) != 0) {
      unsigned int v25 = *(uint64_t **)(a2 - 8);
    }
    else {
      unsigned int v25 = (uint64_t *)(a2 - 32 * (v24 & 0x7FFFFFF));
    }
    a2 = *v25;
  }
  if (v10 == 5)
  {
    unsigned int v11 = *(unsigned __int16 *)(a2 + 18);
    if (v11 - 47 < 3) {
      goto LABEL_25;
    }
    if (v11 != 34) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  if (v10 < 0x1C) {
    goto LABEL_37;
  }
  if (v10 - 75 <= 2) {
    goto LABEL_25;
  }
  unsigned int v11 = v10 - 28;
LABEL_34:
  if (v11 == 13)
  {
    int v26 = *(_DWORD *)(a2 + 20);
    if ((v26 & 0x40000000) != 0) {
      unsigned int v27 = *(void **)(a2 - 8);
    }
    else {
      unsigned int v27 = (void *)(a2 - 32 * (v26 & 0x7FFFFFF));
    }
    int v34 = sub_1CC756BD8(a1, *v27, a3);
    if (v34 != -1)
    {
      int v35 = v34;
      int v36 = *(_DWORD *)(a2 + 20);
      uint64_t v37 = (v36 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v36 & 0x7FFFFFF);
      int v38 = sub_1CC756BD8(a1, *(void *)(v37 + 32), a3);
      if (v38 != -1)
      {
        unint64_t v39 = &v41;
        if (v42 >= 0x41) {
          unint64_t v39 = v41;
        }
        uint64_t v31 = (v38 + v35 + *v39);
        goto LABEL_57;
      }
    }
LABEL_56:
    uint64_t v31 = 0xFFFFFFFFLL;
    goto LABEL_57;
  }
LABEL_37:
  if (v10 <= 3)
  {
    int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 400))(a3, a2);
    unsigned int v33 = &v41;
    if (v42 >= 0x41) {
      unsigned int v33 = v41;
    }
    uint64_t v31 = (*v33 + 4 * v32);
  }
  else
  {
    if (v10 != 16) {
      goto LABEL_56;
    }
    uint64_t v28 = (void *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u) {
      uint64_t v28 = (void *)*v28;
    }
    int v29 = *(_DWORD *)v28;
    unint64_t v30 = &v41;
    if (v42 >= 0x41) {
      unint64_t v30 = v41;
    }
    uint64_t v31 = (*v30 + v29);
  }
LABEL_57:
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  return v31;
}

uint64_t llvm::GPUFastISel::getScalarCoordElements(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a2 && *(unsigned char *)(a2 + 16) == 90)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 16) + 16);
    do
    {
      if (*(void *)(a2 + 40) != v4) {
        return result;
      }
      int v5 = *(_DWORD *)(a2 + 20);
      uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
      uint64_t v7 = *(void *)(v6 + 64);
      if (!v7 || *(unsigned char *)(v7 + 16) != 16) {
        return result;
      }
      unint64_t v9 = (void *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u) {
        unint64_t v9 = (void *)*v9;
      }
      unsigned int v10 = (void *)*v9;
      if (v10 < a4)
      {
        if ((v5 & 0x40000000) != 0) {
          uint64_t v12 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v12 = a2 - 32 * (v5 & 0x7FFFFFF);
        }
        *(void *)(a3 + 8 * v10) = *(void *)(v12 + 32);
        int v5 = *(_DWORD *)(a2 + 20);
        if ((v5 & 0x40000000) == 0)
        {
LABEL_17:
          unsigned int v11 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
          goto LABEL_23;
        }
      }
      else if ((v5 & 0x40000000) == 0)
      {
        goto LABEL_17;
      }
      unsigned int v11 = *(uint64_t **)(a2 - 8);
LABEL_23:
      a2 = *v11;
    }
    while (*v11 && *(unsigned char *)(a2 + 16) == 90);
  }
  return result;
}

uint64_t llvm::GPUFastISel::getMulByRecip(llvm::GPUFastISel *this, const llvm::Value *a2, const llvm::Value **a3, const llvm::Value **a4)
{
  uint64_t result = 0;
  if (a2 && *((unsigned char *)a2 + 16) == 46)
  {
    if (*((void *)a2 + 5) != *(void *)(*((void *)this + 2) + 16)) {
      return 0;
    }
    int v7 = *((_DWORD *)a2 + 5);
    unint64_t v8 = (v7 & 0x40000000) != 0
       ? (const llvm::Value **)*((void *)a2 - 1)
       : (const llvm::Value **)((char *)a2 - 32 * (v7 & 0x7FFFFFF));
    *a3 = *v8;
    int v9 = *((_DWORD *)a2 + 5);
    unsigned int v10 = (v9 & 0x40000000) != 0
        ? (const llvm::Value *)*((void *)a2 - 1)
        : (const llvm::Value *)((char *)a2 - 32 * (v9 & 0x7FFFFFF));
    uint64_t v11 = *((void *)v10 + 4);
    *a4 = (const llvm::Value *)v11;
    BOOL v12 = v11 && *(unsigned __int8 *)(v11 + 16) >= 0x1Cu;
    if (!v12 || *(unsigned char *)(*(void *)v11 + 8) != 2) {
      return 0;
    }
    int v13 = *(_DWORD *)(v11 + 20);
    uint64_t v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(v11 - 8) : (uint64_t *)(v11 - 32 * (v13 & 0x7FFFFFF));
    uint64_t v15 = *v14;
    int v16 = *(unsigned __int8 *)(*v14 + 16);
    if (!v15 || v16 != 17) {
      return 0;
    }
    uint64_t result = sub_1CB844168(v15, 1.0);
    if (result)
    {
      int v18 = *(_DWORD *)(v11 + 20);
      if ((v18 & 0x40000000) != 0) {
        uint64_t v19 = *(void *)(v11 - 8);
      }
      else {
        uint64_t v19 = v11 - 32 * (v18 & 0x7FFFFFF);
      }
      if (!*(void *)(v19 + 32)) {
        return 0;
      }
      uint64_t v20 = *a4;
      int v21 = *((_DWORD *)*a4 + 5);
      if ((v21 & 0x40000000) != 0) {
        uint64_t v22 = (_DWORD *)*((void *)v20 - 1);
      }
      else {
        uint64_t v22 = &v20[-8 * (v21 & 0x7FFFFFF)];
      }
      *a4 = (const llvm::Value *)*((void *)v22 + 4);
      return 1;
    }
  }
  return result;
}

void llvm::GPUFastISel::GetInstr(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, llvm::MachineOperand *a5@<X4>, llvm::MachineOperand *a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, int *a10, uint64_t a11, int *a12, uint64_t a13, int *a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, char a18, unsigned int a19, unsigned int a20)
{
  v126[16] = *MEMORY[0x1E4F143B8];
  int v115 = 0;
  int v27 = *(unsigned __int8 *)(a2 + 61);
  int v28 = *(_DWORD *)(a2 + 72);
  if (*(unsigned char *)(a2 + 61) && v28 == -1)
  {
    ((void (*)(void **, uint64_t, uint64_t, int *))(*a1)[35])(a1, a3, a2, &v115);
    int v27 = *(unsigned __int8 *)(a2 + 61);
    int v28 = *(_DWORD *)(a2 + 72);
  }
  int v114 = 0;
  if (v27 && v28 != -1) {
    ((void (*)(void **, uint64_t, uint64_t, int *, int *))(*a1)[36])(a1, a3, a2, &v115, &v114);
  }
  uint64_t v29 = a13;
  if ((*(unsigned int (**)(void *))(*a1[1] + 208))(a1[1]) != 1)
  {
    if ((*(unsigned int (**)(void *))(*a1[1] + 208))(a1[1]) != 3 || v115 != 0) {
      goto LABEL_9;
    }
LABEL_15:
    int v108 = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[12])(a1, a3, a8, a9);
    goto LABEL_16;
  }
  if (!v115) {
    goto LABEL_15;
  }
LABEL_9:
  int v108 = 0;
LABEL_16:
  uint64_t v109 = a5;
  if (v114 || !a11)
  {
    int v31 = 0;
LABEL_18:
    unsigned int v32 = 0;
    goto LABEL_19;
  }
  if (a11 == 1)
  {
    int v31 = *a10;
    if ((*a10 - 0x40000000) > 0xC0000000) {
      goto LABEL_18;
    }
  }
  unsigned int v32 = ((uint64_t (*)(void **, uint64_t, int *, uint64_t))(*a1)[12])(a1, a3, a10, a11);
  int v31 = 0;
LABEL_19:
  unsigned int v103 = v32;
  if (a13)
  {
    if (a13 != 1 || (int v33 = *a12, (*a12 - 0x40000000) <= 0xC0000000)) {
      int v33 = ((uint64_t (*)(void **, uint64_t, int *, uint64_t))(*a1)[12])(a1, a3, a12, a13);
    }
  }
  else
  {
    int v33 = 0;
  }
  uint64_t v111 = a7;
  int v105 = v33;
  int v104 = a6;
  if (a15)
  {
    if (a15 != 1 || (int v106 = *a14, (*a14 - 0x40000000) <= 0xC0000000)) {
      int v106 = ((uint64_t (*)(void **, uint64_t, int *, uint64_t))(*a1)[12])(a1, a3, a14, a15);
    }
  }
  else
  {
    int v106 = 0;
  }
  int v110 = v31;
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)a1[4][2] + 104))(a1[4][2]);
  int v36 = a1[2];
  int v35 = a1[3];
  uint64_t v37 = *(void *)(v34 + 8) + 48 * a4;
  int v38 = (llvm::MachineFunction *)v36[4];
  unint64_t v39 = *(void **)(a3 + 48);
  int v120 = v39;
  if (v39) {
    llvm::MetadataTracking::track((uint64_t)&v120, (unsigned __int8 *)v39, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v38, v37, (unsigned __int8 **)&v120, 0);
  if (v120)
  {
    int v96 = *(unsigned __int8 *)v120;
    if ((v96 - 4) > 0x1E)
    {
      if ((v96 - 3) >= 0xFFFFFFFE) {
        uint64_t v99 = v120;
      }
      else {
        uint64_t v99 = 0;
      }
      if ((v96 - 3) < 0xFFFFFFFE)
      {
        if (v96 == 3) {
          *((void *)v120 + 1) = 0;
        }
        goto LABEL_36;
      }
      unint64_t v98 = (unint64_t)v99 + 8;
    }
    else
    {
      if ((*((unsigned char *)v120 + 1) & 0x7F) != 2 && !*((_DWORD *)v120 + 3)) {
        goto LABEL_36;
      }
      uint64_t v97 = *((void *)v120 + 2);
      if ((v97 & 4) == 0) {
        goto LABEL_36;
      }
      unint64_t v98 = v97 & 0xFFFFFFFFFFFFFFF8;
      if (!v98) {
        goto LABEL_36;
      }
    }
    uint64_t v124 = &v120;
    sub_1CC5FA668(v98 + 16, &v124);
  }
LABEL_36:
  uint64_t v41 = v36[5];
  *((void *)MachineInstr + 3) = v41;
  uint64_t v42 = *(void *)(v41 + 32);
  uint64_t v43 = *((unsigned int *)MachineInstr + 10);
  if (v43)
  {
    uint64_t v89 = *((void *)MachineInstr + 4);
    uint64_t v90 = *(void *)(v42 + 40);
    uint64_t v91 = 32 * v43;
    do
    {
      if (!*(unsigned char *)v89)
      {
        uint64_t v92 = *(unsigned int *)(v89 + 4);
        if ((int)v92 >= 0) {
          uint64_t v93 = (uint64_t *)(*(void *)(v90 + 272) + 8 * v92);
        }
        else {
          uint64_t v93 = (uint64_t *)(*(void *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
        }
        uint64_t v94 = *v93;
        if (*v93)
        {
          uint64_t v95 = *(void *)(v94 + 16);
          *(void *)(v94 + 16) = v89;
          *(void *)(v89 + 16) = v95;
          if (*(unsigned char *)(v89 + 3))
          {
            *(void *)(v89 + 24) = v94;
          }
          else
          {
            *(void *)(v89 + 24) = 0;
            uint64_t v93 = (uint64_t *)(v95 + 24);
          }
        }
        else
        {
          *(void *)(v89 + 16) = v89;
          *(void *)(v89 + 24) = 0;
        }
        uint64_t *v93 = v89;
      }
      v89 += 32;
      v91 -= 32;
    }
    while (v91);
  }
  uint64_t v44 = *(void *)(v42 + 728);
  if (v44) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v44 + 24))(v44, MachineInstr);
  }
  unint64_t v45 = *v35 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v45 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v35;
  *(void *)(v45 + 8) = MachineInstr;
  unint64_t *v35 = *v35 & 7 | (unint64_t)MachineInstr;
  __int16 v112 = v38;
  uint64_t v113 = MachineInstr;
  uint64_t v46 = *(unsigned int *)(a2 + 24);
  if (v46 == -1)
  {
    int8x8_t v49 = (int8x8_t)0xFFFFFFFFLL;
  }
  else
  {
    int v47 = *(_DWORD *)(a3 + 20);
    if ((v47 & 0x40000000) != 0) {
      uint64_t v48 = *(void *)(a3 - 8);
    }
    else {
      uint64_t v48 = a3 - 32 * (v47 & 0x7FFFFFF);
    }
    int v50 = *(int8x8_t **)(v48 + 32 * v46);
    int v51 = v50 + 3;
    if (v50[4].i32[0] >= 0x41u) {
      int v51 = (int8x8_t *)*v51;
    }
    int8x8_t v49 = *v51;
  }
  int8x8_t v107 = v49;
  if (!a15)
  {
    if (*(unsigned char *)(a2 + 62) && (*(unsigned int (**)(void *))(*a1[1] + 216))(a1[1]))
    {
      if (*(unsigned char *)(a2 + 8)) {
        char v52 = 7;
      }
      else {
        char v52 = 6;
      }
      unsigned int v53 = (a20 + 1) << v52;
      if (a20 & 1 | *(unsigned __int8 *)(a2 + 8)) {
        uint64_t v54 = v53;
      }
      else {
        uint64_t v54 = v53 + 64;
      }
      uint64_t v55 = ((uint64_t (*)(void **, uint64_t))(*a1)[42])(a1, v54);
    }
    else
    {
      int v56 = (*(uint64_t (**)(void *))(*a1[1] + 376))(a1[1]);
      uint8x8_t v57 = (uint8x8_t)vcnt_s8(v49);
      v57.i16[0] = vaddlv_u8(v57);
      if (v49.i32[0] <= 1u) {
        int v58 = 1;
      }
      else {
        int v58 = 2;
      }
      if (v49.i32[0] <= 3u) {
        int v59 = v58;
      }
      else {
        int v59 = 3;
      }
      if (v49.i32[0] <= 7u) {
        int v60 = v59;
      }
      else {
        int v60 = 4;
      }
      if (v49.i32[0] == -1) {
        unsigned int v61 = -1;
      }
      else {
        unsigned int v61 = v60;
      }
      if (v56) {
        uint64_t v62 = v61;
      }
      else {
        uint64_t v62 = v57.u32[0];
      }
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, BOOL))(*a1[1] + 256))(a1[1], v62, *(unsigned char *)(a2 + 8) == 0);
    }
    uint64_t v63 = v55;
    uint64_t v64 = a1[4][5];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v64, "", 0);
    *(void *)(*(void *)(v64 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v63 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v66 = *(void *)(v64 + 8);
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 24))(v66);
    }
    uint64_t v125 = 0;
    v126[0] = 0;
    v126[1] = 0;
    LODWORD(v124) = 0x1000000;
    HIDWORD(v124) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(MachineInstr, v38, (const llvm::MachineOperand *)&v124);
    uint64_t v29 = a13;
    int8x8_t v49 = v107;
  }
  int v67 = *(_DWORD *)(a3 + 20);
  if ((v67 & 0x40000000) != 0) {
    uint64_t v68 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v68 = a3 - 32 * (v67 & 0x7FFFFFF);
  }
  uint64_t v69 = *(void *)(v68 + 32 * *(unsigned int *)(a2 + 32));
  unsigned int v70 = *(unsigned __int8 *)(v69 + 16);
  if (v69) {
    BOOL v71 = v70 == 5;
  }
  else {
    BOOL v71 = 0;
  }
  if (v71)
  {
    if (*(unsigned __int16 *)(v69 + 18) - 38 > 0xC)
    {
      uint64_t v72 = 0;
      goto LABEL_92;
    }
    uint64_t v69 = *(void *)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF));
    unsigned int v70 = *(unsigned __int8 *)(v69 + 16);
  }
  if (v70 == 77)
  {
    uint64_t v69 = *(void *)(v69 - 32);
    unsigned int v70 = *(unsigned __int8 *)(v69 + 16);
  }
  if (v70 >= 4) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = v69;
  }
LABEL_92:
  char v73 = (*(uint64_t (**)(void *, uint64_t, void))(*a1[1] + 312))(a1[1], v72, *(void *)(*(void *)(*(void *)(a3 + 40) + 56) + 40));
  uint64_t v124 = (void **)v126;
  uint64_t v125 = 0x1000000000;
  char v102 = v73;
  if ((*(uint64_t (**)(void *))(*a1[1] + 16))(a1[1]))
  {
    uint64_t v74 = v29;
    (*(void (**)(void *, uint64_t, void *, void, void, int8x8_t, void, void, char, void ***, char))(*a1[1] + 288))(a1[1], a2, a1[4], a19, a20, v49, a16, a17, a18, &v124, v73);
    unsigned int v76 = v112;
    BOOL v75 = v113;
    if (v125)
    {
      uint64_t v77 = v124;
      uint64_t v78 = 8 * v125;
      do
      {
        unsigned int v79 = *(_DWORD *)v77++;
        LODWORD(v120) = 1;
        uint64_t v121 = 0;
        uint64_t v122 = v79;
        llvm::MachineInstr::addOperand(v113, v112, (const llvm::MachineOperand *)&v120);
        v78 -= 8;
      }
      while (v78);
    }
    int v80 = v110;
    unsigned int v81 = v109;
    if (a15)
    {
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      LODWORD(v120) = 0;
      HIDWORD(v120) = v106;
      uint64_t v123 = 0;
      llvm::MachineInstr::addOperand(v113, v112, (const llvm::MachineOperand *)&v120);
    }
    uint64_t v29 = v74;
  }
  else
  {
    unsigned int v76 = v112;
    BOOL v75 = v113;
    int v80 = v110;
    unsigned int v81 = v109;
  }
  llvm::MachineInstr::addOperand(v75, v76, v81);
  if ((*(unsigned int (**)(void *))(*a1[1] + 208))(a1[1]) == 1)
  {
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    LODWORD(v120) = 0;
    HIDWORD(v120) = v108;
    uint64_t v123 = 0;
    llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
  }
  if (((*(uint64_t (**)(void *))(*a1[1] + 232))(a1[1]) & 1) != 0 || *(_DWORD *)(a2 + 92) == -1)
  {
    llvm::MachineInstr::addOperand(v75, v76, v104);
    if (!v108)
    {
LABEL_114:
      int v83 = v115;
      goto LABEL_115;
    }
  }
  else if (!v108)
  {
    goto LABEL_114;
  }
  int v82 = (*(uint64_t (**)(void *))(*a1[1] + 208))(a1[1]);
  int v83 = v115;
  if (v82 == 3 && v115 == 0)
  {
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    LODWORD(v120) = 0;
    HIDWORD(v120) = v108;
    uint64_t v123 = 0;
    llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1]))
    {
      LODWORD(v120) = 1;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    }
    goto LABEL_114;
  }
LABEL_115:
  if (v83)
  {
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    LODWORD(v120) = 0;
    HIDWORD(v120) = v83;
    uint64_t v123 = 0;
    llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1]))
    {
      LODWORD(v120) = 1;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    }
  }
  if (v114)
  {
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    LODWORD(v120) = 0;
    HIDWORD(v120) = v114;
    uint64_t v123 = 0;
    llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1]))
    {
      LODWORD(v120) = 1;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    }
  }
  if (a11 && !v114)
  {
    if (v103)
    {
      if (a19 == 7)
      {
        LODWORD(v120) = 1;
        uint64_t v121 = 0;
        uint64_t v122 = v103;
      }
      else
      {
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        LODWORD(v120) = 0;
        HIDWORD(v120) = v103;
        uint64_t v123 = 0;
      }
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    }
    if (v80)
    {
      v116[0] = 0;
      (*(void (**)(void *, _DWORD *))(*a1[1] + 80))(a1[1], v116);
      uint64_t v121 = 0;
      LODWORD(v122) = 64;
      LODWORD(v123) = 0;
      LODWORD(v120) = ((v116[0] & 0xFFF) << 8) | 7;
      HIDWORD(v120) = v80;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    }
    if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1])
      && (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(void *))(*a1[1] + 320))(a1[1])))
    {
      LODWORD(v120) = 1;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    }
  }
  if (v29)
  {
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    LODWORD(v120) = 0;
    HIDWORD(v120) = v105;
    uint64_t v123 = 0;
    llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
    if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1]))
    {
      if (!a15)
      {
        LODWORD(v120) = 1;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
      }
    }
  }
  if (((*(uint64_t (**)(void *))(*a1[1] + 16))(a1[1]) & 1) == 0)
  {
    int v120 = &v122;
    uint64_t v121 = 0x1000000000;
    if (a15)
    {
      uint64_t v117 = 0;
      uint64_t v118 = 0;
      v116[0] = 0;
      v116[1] = v106;
      uint64_t v119 = 0;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)v116);
    }
    LOBYTE(v101) = v102;
    LOBYTE(v100) = a18;
    (*(void (**)(void *, uint64_t, void *, void, void, int8x8_t, void, void, int, void **, int))(*a1[1] + 288))(a1[1], a2, a1[4], a19, a20, v107, a16, a17, v100, &v120, v101);
    int v85 = (unsigned int *)v120;
    if (v121)
    {
      uint64_t v86 = 8 * v121;
      do
      {
        unsigned int v87 = *v85;
        v85 += 2;
        v116[0] = 1;
        uint64_t v117 = 0;
        uint64_t v118 = v87;
        llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)v116);
        v86 -= 8;
      }
      while (v86);
      int v85 = (unsigned int *)v120;
    }
    if (v85 != (unsigned int *)&v122) {
      free(v85);
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(void *))(*a1[1] + 336))(a1[1]))
  {
    LODWORD(v120) = 1;
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v120);
  }
  if ((*(unsigned int (**)(void *))(*a1[1] + 24))(a1[1])) {
    uint64_t v88 = (llvm::MachineFunction **)((uint64_t (*)(void **, llvm::MachineFunction **))(*a1)[41])(a1, &v112);
  }
  else {
    uint64_t v88 = &v112;
  }
  *(_OWORD *)uint64_t v111 = *(_OWORD *)v88;
  *(unsigned char *)(v111 + 16) = 1;
  if (v124 != v126) {
    free(v124);
  }
}

uint64_t llvm::GPUFastISel::GetRegSequenceOrTargetIndexForValues(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned char *a5)
{
  *a5 = 0;
  if (!a4) {
    return 0;
  }
  if (a4 != 1) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
  }
  uint64_t v5 = *a3;
  if ((v5 - 0x40000000) < 0xC0000001) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
  }
  *a5 = 1;
  return v5;
}

void llvm::GPUFastISel::ReplaceInstructionUses(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  v420[2] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 12) == -1) {
    return;
  }
  int v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 296))(a1, a3);
  unsigned int v13 = *(_DWORD *)(*(void *)(a5 + 32) + 4);
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 40);
  uint64_t v413 = 0;
  unsigned int v410 = v13;
  unsigned int v15 = (*(uint64_t (**)(uint64_t, unint64_t, char *))(*(void *)a1 + 304))(a1, *(void *)(*(void *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (char *)&v413 + 4);
  int v411 = v12;
  uint64_t v404 = v14;
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 304))(a1, *(void *)(*(void *)(v14 + 24) + 16 * (v12 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, &v413);
  uint64_t v401 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 336))(a1, 32);
  BOOL v412 = a3;
  unsigned int v16 = v15;
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) == 0x12)
  {
    if (v15 == 3 && *(_DWORD *)(*a3 + 32) == 4) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = v15;
    }
  }
  int v19 = v413;
  int v18 = HIDWORD(v413);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8)))
  {
    if (a7 == -1)
    {
LABEL_106:
      if (a6 != -1 && (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8)))
      {
        int v74 = *(_DWORD *)(a2 + 12);
        if (*(unsigned char *)(a2 + 8))
        {
          if (!v74) {
            return;
          }
          int v75 = 0;
          while (1)
          {
            uint64_t v76 = *(void *)(a1 + 16);
            uint64_t v77 = *(unint64_t **)(a1 + 24);
            uint64_t v78 = *(void *)(*(void *)(a1 + 48) + 8);
            unsigned int v79 = *(llvm::MachineFunction **)(v76 + 32);
            int v80 = (void *)v412[6];
            uint64_t v418 = v80;
            if (v80) {
              llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v80, 2);
            }
            MachineInstr = llvm::MachineFunction::CreateMachineInstr(v79, v78 + 912, (unsigned __int8 **)&v418, 0);
            if (!v418) {
              goto LABEL_114;
            }
            int v95 = *(unsigned __int8 *)v418;
            if ((v95 - 4) > 0x1E)
            {
              if ((v95 - 3) >= 0xFFFFFFFE) {
                unint64_t v98 = v418;
              }
              else {
                unint64_t v98 = 0;
              }
              if ((v95 - 3) < 0xFFFFFFFE)
              {
                if (v95 == 3) {
                  *((void *)v418 + 1) = 0;
                }
                goto LABEL_114;
              }
              unint64_t v97 = (unint64_t)v98 + 8;
            }
            else
            {
              if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
                goto LABEL_114;
              }
              uint64_t v96 = *((void *)v418 + 2);
              if ((v96 & 4) == 0) {
                goto LABEL_114;
              }
              unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
              if (!v97) {
                goto LABEL_114;
              }
            }
            *(void *)&long long v415 = &v418;
            sub_1CC5FA668(v97 + 16, &v415);
LABEL_114:
            uint64_t v82 = *(void *)(v76 + 40);
            *((void *)MachineInstr + 3) = v82;
            uint64_t v83 = *(void *)(v82 + 32);
            uint64_t v84 = *((unsigned int *)MachineInstr + 10);
            if (v84)
            {
              uint64_t v88 = *((void *)MachineInstr + 4);
              uint64_t v89 = *(void *)(v83 + 40);
              uint64_t v90 = 32 * v84;
              do
              {
                if (!*(unsigned char *)v88)
                {
                  uint64_t v91 = *(unsigned int *)(v88 + 4);
                  if ((int)v91 >= 0) {
                    uint64_t v92 = (uint64_t *)(*(void *)(v89 + 272) + 8 * v91);
                  }
                  else {
                    uint64_t v92 = (uint64_t *)(*(void *)(v89 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v93 = *v92;
                  if (*v92)
                  {
                    uint64_t v94 = *(void *)(v93 + 16);
                    *(void *)(v93 + 16) = v88;
                    *(void *)(v88 + 16) = v94;
                    if (*(unsigned char *)(v88 + 3))
                    {
                      *(void *)(v88 + 24) = v93;
                    }
                    else
                    {
                      *(void *)(v88 + 24) = 0;
                      uint64_t v92 = (uint64_t *)(v94 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v88 + 16) = v88;
                    *(void *)(v88 + 24) = 0;
                  }
                  *uint64_t v92 = v88;
                }
                v88 += 32;
                v90 -= 32;
              }
              while (v90);
            }
            uint64_t v85 = *(void *)(v83 + 728);
            if (v85) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v85 + 24))(v85, MachineInstr);
            }
            unint64_t v86 = *v77 & 0xFFFFFFFFFFFFFFF8;
            *(void *)MachineInstr = v86 | *(void *)MachineInstr & 7;
            *((void *)MachineInstr + 1) = v77;
            *(void *)(v86 + 8) = MachineInstr;
            *uint64_t v77 = *v77 & 7 | (unint64_t)MachineInstr;
            HIDWORD(v415) = 0;
            uint64_t v416 = 0;
            uint64_t v417 = 0;
            *(void *)((char *)&v415 + 4) = (v75 + v411);
            LODWORD(v415) = 0x1000000;
            llvm::MachineInstr::addOperand(MachineInstr, v79, (const llvm::MachineOperand *)&v415);
            __int16 v87 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 312))(a1, 0, a6 + v75 * (a6 + 1));
            *((void *)&v415 + 1) = 0;
            uint64_t v416 = 0;
            uint64_t v417 = 0;
            LODWORD(v415) = (v87 & 0xFFF) << 8;
            DWORD1(v415) = v410;
            llvm::MachineInstr::addOperand(MachineInstr, v79, (const llvm::MachineOperand *)&v415);
            if (++v75 >= *(_DWORD *)(a2 + 12)) {
              return;
            }
          }
        }
        if (!v74) {
          return;
        }
        if (v74 == 1)
        {
          uint64_t v314 = byte_1CFB1D060[4 * a6];
          uint64_t v316 = *(void *)(a1 + 16);
          uint64_t v315 = *(unint64_t **)(a1 + 24);
          uint64_t v317 = *(void *)(*(void *)(a1 + 48) + 8) + 912;
          int v318 = *(llvm::MachineFunction **)(v316 + 32);
          uint64_t v319 = (void *)v412[6];
          uint64_t v418 = v319;
          if (v319) {
            llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v319, 2);
          }
          uint64_t v320 = llvm::MachineFunction::CreateMachineInstr(v318, v317, (unsigned __int8 **)&v418, 0);
          if (!v418) {
            goto LABEL_475;
          }
          int v397 = *(unsigned __int8 *)v418;
          if ((v397 - 4) > 0x1E)
          {
            if ((v397 - 3) >= 0xFFFFFFFE) {
              uint64_t v400 = v418;
            }
            else {
              uint64_t v400 = 0;
            }
            if ((v397 - 3) < 0xFFFFFFFE)
            {
              if (v397 == 3) {
                *((void *)v418 + 1) = 0;
              }
              goto LABEL_475;
            }
            unint64_t v399 = (unint64_t)v400 + 8;
          }
          else
          {
            if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
              goto LABEL_475;
            }
            uint64_t v398 = *((void *)v418 + 2);
            if ((v398 & 4) == 0) {
              goto LABEL_475;
            }
            unint64_t v399 = v398 & 0xFFFFFFFFFFFFFFF8;
            if (!v399) {
              goto LABEL_475;
            }
          }
          *(void *)&long long v415 = &v418;
          sub_1CC5FA668(v399 + 16, &v415);
LABEL_475:
          uint64_t v321 = *(void *)(v316 + 40);
          *((void *)v320 + 3) = v321;
          uint64_t v322 = *(void *)(v321 + 32);
          uint64_t v323 = *((unsigned int *)v320 + 10);
          if (v323)
          {
            uint64_t v386 = *((void *)v320 + 4);
            uint64_t v387 = *(void *)(v322 + 40);
            uint64_t v388 = 32 * v323;
            do
            {
              if (!*(unsigned char *)v386)
              {
                uint64_t v389 = *(unsigned int *)(v386 + 4);
                if ((int)v389 >= 0) {
                  int v390 = (uint64_t *)(*(void *)(v387 + 272) + 8 * v389);
                }
                else {
                  int v390 = (uint64_t *)(*(void *)(v387 + 24) + 16 * (v389 & 0x7FFFFFFF) + 8);
                }
                uint64_t v391 = *v390;
                if (*v390)
                {
                  uint64_t v392 = *(void *)(v391 + 16);
                  *(void *)(v391 + 16) = v386;
                  *(void *)(v386 + 16) = v392;
                  if (*(unsigned char *)(v386 + 3))
                  {
                    *(void *)(v386 + 24) = v391;
                  }
                  else
                  {
                    *(void *)(v386 + 24) = 0;
                    int v390 = (uint64_t *)(v392 + 24);
                  }
                }
                else
                {
                  *(void *)(v386 + 16) = v386;
                  *(void *)(v386 + 24) = 0;
                }
                uint64_t *v390 = v386;
              }
              v386 += 32;
              v388 -= 32;
            }
            while (v388);
          }
          uint64_t v324 = *(void *)(v322 + 728);
          if (v324) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v324 + 24))(v324, v320);
          }
          unint64_t v325 = *v315 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v320 = v325 | *(void *)v320 & 7;
          *((void *)v320 + 1) = v315;
          *(void *)(v325 + 8) = v320;
          *uint64_t v315 = *v315 & 7 | (unint64_t)v320;
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = 0x1000000;
          DWORD1(v415) = v411;
          llvm::MachineInstr::addOperand(v320, v318, (const llvm::MachineOperand *)&v415);
          __int16 v326 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 1, v314);
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = (v326 & 0xFFF) << 8;
          DWORD1(v415) = v410;
          uint64_t v111 = v320;
          __int16 v112 = v318;
LABEL_157:
          llvm::MachineInstr::addOperand(v111, v112, (const llvm::MachineOperand *)&v415);
          return;
        }
        unint64_t v327 = 0;
        int v328 = 0;
        uint64_t v403 = (char *)&byte_1CFB1D060[4 * a6];
        while (1)
        {
          int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v404, "", 0);
          *(void *)(*(void *)(v404 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v401 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v330 = *(void *)(v404 + 8);
          if (!v330) {
            break;
          }
          (*(void (**)(uint64_t))(*(void *)v330 + 24))(v330);
          if (!v328) {
            goto LABEL_482;
          }
LABEL_483:
          uint64_t v331 = v403[v327];
          uint64_t v332 = *(void *)(a1 + 16);
          int v333 = *(unint64_t **)(a1 + 24);
          uint64_t v334 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v335 = *(llvm::MachineFunction **)(v332 + 32);
          unint64_t v336 = (void *)a3[6];
          uint64_t v418 = v336;
          if (v336) {
            llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v336, 2);
          }
          int v337 = llvm::MachineFunction::CreateMachineInstr(v335, v334 + 432, (unsigned __int8 **)&v418, 0);
          if (v418)
          {
            int v371 = *(unsigned __int8 *)v418;
            if ((v371 - 4) > 0x1E)
            {
              if ((v371 - 3) >= 0xFFFFFFFE) {
                int v377 = v418;
              }
              else {
                int v377 = 0;
              }
              if ((v371 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v373 = (unint64_t)v377 + 8;
LABEL_545:
                *(void *)&long long v415 = &v418;
                sub_1CC5FA668(v373 + 16, &v415);
                goto LABEL_486;
              }
              if (v371 == 3) {
                *((void *)v418 + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v418 + 1) & 0x7F) == 2 || *((_DWORD *)v418 + 3))
            {
              uint64_t v372 = *((void *)v418 + 2);
              if ((v372 & 4) != 0)
              {
                unint64_t v373 = v372 & 0xFFFFFFFFFFFFFFF8;
                if (v373) {
                  goto LABEL_545;
                }
              }
            }
          }
LABEL_486:
          uint64_t v338 = *(void *)(v332 + 40);
          *((void *)v337 + 3) = v338;
          uint64_t v339 = *(void *)(v338 + 32);
          uint64_t v340 = *((unsigned int *)v337 + 10);
          if (v340)
          {
            uint64_t v357 = *((void *)v337 + 4);
            uint64_t v358 = *(void *)(v339 + 40);
            uint64_t v359 = 32 * v340;
            do
            {
              if (!*(unsigned char *)v357)
              {
                uint64_t v360 = *(unsigned int *)(v357 + 4);
                if ((int)v360 >= 0) {
                  int v361 = (uint64_t *)(*(void *)(v358 + 272) + 8 * v360);
                }
                else {
                  int v361 = (uint64_t *)(*(void *)(v358 + 24) + 16 * (v360 & 0x7FFFFFFF) + 8);
                }
                uint64_t v362 = *v361;
                if (*v361)
                {
                  uint64_t v363 = *(void *)(v362 + 16);
                  *(void *)(v362 + 16) = v357;
                  *(void *)(v357 + 16) = v363;
                  if (*(unsigned char *)(v357 + 3))
                  {
                    *(void *)(v357 + 24) = v362;
                  }
                  else
                  {
                    *(void *)(v357 + 24) = 0;
                    int v361 = (uint64_t *)(v363 + 24);
                  }
                }
                else
                {
                  *(void *)(v357 + 16) = v357;
                  *(void *)(v357 + 24) = 0;
                }
                uint64_t *v361 = v357;
              }
              v357 += 32;
              v359 -= 32;
            }
            while (v359);
          }
          uint64_t v341 = *(void *)(v339 + 728);
          if (v341) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v341 + 24))(v341, v337);
          }
          unint64_t v342 = *v333 & 0xFFFFFFFFFFFFFFF8;
          *(void *)int v337 = v342 | *(void *)v337 & 7;
          *((void *)v337 + 1) = v333;
          *(void *)(v342 + 8) = v337;
          unint64_t *v333 = *v333 & 7 | (unint64_t)v337;
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = 0x1000000;
          DWORD1(v415) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand(v337, v335, (const llvm::MachineOperand *)&v415);
          *((void *)&v415 + 1) = 0;
          LODWORD(v415) = 0;
          DWORD1(v415) = v328;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          llvm::MachineInstr::addOperand(v337, v335, (const llvm::MachineOperand *)&v415);
          __int16 v343 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 1, v331);
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = (v343 & 0xFFF) << 8;
          DWORD1(v415) = v410;
          llvm::MachineInstr::addOperand(v337, v335, (const llvm::MachineOperand *)&v415);
          unsigned int v344 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 312))(a1, 1, v327 & 1);
          LODWORD(v415) = 1;
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = v344;
          llvm::MachineInstr::addOperand(v337, v335, (const llvm::MachineOperand *)&v415);
          if ((v327 & 1) == 0)
          {
            unsigned int v345 = *(_DWORD *)(a2 + 12);
            if (v327 != v345 - 1) {
              goto LABEL_498;
            }
          }
          uint64_t v347 = *(void *)(a1 + 16);
          uint64_t v346 = *(unint64_t **)(a1 + 24);
          uint64_t v348 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v349 = *(llvm::MachineFunction **)(v347 + 32);
          int v350 = (void *)a3[6];
          uint64_t v418 = v350;
          if (v350) {
            llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v350, 2);
          }
          uint64_t v351 = llvm::MachineFunction::CreateMachineInstr(v349, v348 + 912, (unsigned __int8 **)&v418, 0);
          if (v418)
          {
            int v374 = *(unsigned __int8 *)v418;
            if ((v374 - 4) > 0x1E)
            {
              if ((v374 - 3) >= 0xFFFFFFFE) {
                int v378 = v418;
              }
              else {
                int v378 = 0;
              }
              if ((v374 - 3) < 0xFFFFFFFE)
              {
                if (v374 == 3) {
                  *((void *)v418 + 1) = 0;
                }
                goto LABEL_494;
              }
              unint64_t v376 = (unint64_t)v378 + 8;
            }
            else
            {
              if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
                goto LABEL_494;
              }
              uint64_t v375 = *((void *)v418 + 2);
              if ((v375 & 4) == 0) {
                goto LABEL_494;
              }
              unint64_t v376 = v375 & 0xFFFFFFFFFFFFFFF8;
              if (!v376) {
                goto LABEL_494;
              }
            }
            *(void *)&long long v415 = &v418;
            sub_1CC5FA668(v376 + 16, &v415);
          }
LABEL_494:
          uint64_t v352 = *(void *)(v347 + 40);
          *((void *)v351 + 3) = v352;
          uint64_t v353 = *(void *)(v352 + 32);
          uint64_t v354 = *((unsigned int *)v351 + 10);
          if (v354)
          {
            uint64_t v364 = *((void *)v351 + 4);
            uint64_t v365 = *(void *)(v353 + 40);
            uint64_t v366 = 32 * v354;
            do
            {
              if (!*(unsigned char *)v364)
              {
                uint64_t v367 = *(unsigned int *)(v364 + 4);
                if ((int)v367 >= 0) {
                  int v368 = (uint64_t *)(*(void *)(v365 + 272) + 8 * v367);
                }
                else {
                  int v368 = (uint64_t *)(*(void *)(v365 + 24) + 16 * (v367 & 0x7FFFFFFF) + 8);
                }
                uint64_t v369 = *v368;
                if (*v368)
                {
                  uint64_t v370 = *(void *)(v369 + 16);
                  *(void *)(v369 + 16) = v364;
                  *(void *)(v364 + 16) = v370;
                  if (*(unsigned char *)(v364 + 3))
                  {
                    *(void *)(v364 + 24) = v369;
                  }
                  else
                  {
                    *(void *)(v364 + 24) = 0;
                    int v368 = (uint64_t *)(v370 + 24);
                  }
                }
                else
                {
                  *(void *)(v364 + 16) = v364;
                  *(void *)(v364 + 24) = 0;
                }
                *int v368 = v364;
              }
              v364 += 32;
              v366 -= 32;
            }
            while (v366);
          }
          uint64_t v355 = *(void *)(v353 + 728);
          if (v355) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v355 + 24))(v355, v351);
          }
          unint64_t v356 = *v346 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v351 = v356 | *(void *)v351 & 7;
          *((void *)v351 + 1) = v346;
          *(void *)(v356 + 8) = v351;
          *uint64_t v346 = *v346 & 7 | (unint64_t)v351;
          HIDWORD(v415) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          *(void *)((char *)&v415 + 4) = v411 + (v327 >> 1);
          LODWORD(v415) = 0x1000000;
          llvm::MachineInstr::addOperand(v351, v349, (const llvm::MachineOperand *)&v415);
          *((void *)&v415 + 1) = 0;
          LODWORD(v415) = 0;
          DWORD1(v415) = IncompleteVirtualRegister;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          llvm::MachineInstr::addOperand(v351, v349, (const llvm::MachineOperand *)&v415);
          int IncompleteVirtualRegister = 0;
          unsigned int v345 = *(_DWORD *)(a2 + 12);
LABEL_498:
          ++v327;
          int v328 = IncompleteVirtualRegister;
          if (v327 >= v345) {
            return;
          }
        }
        if (v328) {
          goto LABEL_483;
        }
LABEL_482:
        int v328 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 320))(a1, 0);
        goto LABEL_483;
      }
      if (v15 == 1)
      {
        uint64_t v100 = *(void *)(a1 + 16);
        uint64_t v99 = *(unint64_t **)(a1 + 24);
        uint64_t v101 = *(void *)(*(void *)(a1 + 48) + 8) + 912;
        char v102 = *(llvm::MachineFunction **)(v100 + 32);
        unsigned int v103 = (void *)v412[6];
        uint64_t v418 = v103;
        if (v103) {
          llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v103, 2);
        }
        int v104 = llvm::MachineFunction::CreateMachineInstr(v102, v101, (unsigned __int8 **)&v418, 0);
        if (!v418) {
          goto LABEL_150;
        }
        int v393 = *(unsigned __int8 *)v418;
        if ((v393 - 4) > 0x1E)
        {
          if ((v393 - 3) >= 0xFFFFFFFE) {
            long long v396 = v418;
          }
          else {
            long long v396 = 0;
          }
          if ((v393 - 3) < 0xFFFFFFFE)
          {
            if (v393 == 3) {
              *((void *)v418 + 1) = 0;
            }
            goto LABEL_150;
          }
          unint64_t v395 = (unint64_t)v396 + 8;
        }
        else
        {
          if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
            goto LABEL_150;
          }
          uint64_t v394 = *((void *)v418 + 2);
          if ((v394 & 4) == 0) {
            goto LABEL_150;
          }
          unint64_t v395 = v394 & 0xFFFFFFFFFFFFFFF8;
          if (!v395) {
            goto LABEL_150;
          }
        }
        *(void *)&long long v415 = &v418;
        sub_1CC5FA668(v395 + 16, &v415);
LABEL_150:
        uint64_t v105 = *(void *)(v100 + 40);
        *((void *)v104 + 3) = v105;
        uint64_t v106 = *(void *)(v105 + 32);
        uint64_t v107 = *((unsigned int *)v104 + 10);
        if (v107)
        {
          uint64_t v379 = *((void *)v104 + 4);
          uint64_t v380 = *(void *)(v106 + 40);
          uint64_t v381 = 32 * v107;
          do
          {
            if (!*(unsigned char *)v379)
            {
              uint64_t v382 = *(unsigned int *)(v379 + 4);
              if ((int)v382 >= 0) {
                int v383 = (uint64_t *)(*(void *)(v380 + 272) + 8 * v382);
              }
              else {
                int v383 = (uint64_t *)(*(void *)(v380 + 24) + 16 * (v382 & 0x7FFFFFFF) + 8);
              }
              uint64_t v384 = *v383;
              if (*v383)
              {
                uint64_t v385 = *(void *)(v384 + 16);
                *(void *)(v384 + 16) = v379;
                *(void *)(v379 + 16) = v385;
                if (*(unsigned char *)(v379 + 3))
                {
                  *(void *)(v379 + 24) = v384;
                }
                else
                {
                  *(void *)(v379 + 24) = 0;
                  int v383 = (uint64_t *)(v385 + 24);
                }
              }
              else
              {
                *(void *)(v379 + 16) = v379;
                *(void *)(v379 + 24) = 0;
              }
              *int v383 = v379;
            }
            v379 += 32;
            v381 -= 32;
          }
          while (v381);
        }
        uint64_t v108 = *(void *)(v106 + 728);
        if (v108) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v108 + 24))(v108, v104);
        }
        unint64_t v109 = *v99 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v104 = v109 | *(void *)v104 & 7;
        *((void *)v104 + 1) = v99;
        *(void *)(v109 + 8) = v104;
        *uint64_t v99 = *v99 & 7 | (unint64_t)v104;
        *((void *)&v415 + 1) = 0;
        uint64_t v416 = 0;
        uint64_t v417 = 0;
        LODWORD(v415) = 0x1000000;
        DWORD1(v415) = v411;
        llvm::MachineInstr::addOperand(v104, v102, (const llvm::MachineOperand *)&v415);
        unsigned int v110 = 0;
        if (v19 == 16 && v18 != 16) {
          unsigned int v110 = ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 312))(a1, 1, 0) & 0xFFF) << 8;
        }
        uint64_t v416 = 0;
        uint64_t v417 = 0;
        long long v415 = __PAIR64__(v410, v110);
        uint64_t v111 = v104;
        __int16 v112 = v102;
        goto LABEL_157;
      }
      if (v18 == 16 && v19 != 16)
      {
        if (!v15) {
          return;
        }
        uint64_t v192 = 0;
        unint64_t v409 = v401 & 0xFFFFFFFFFFFFFFFBLL;
        while (1)
        {
          int v193 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 320))(a1, 0);
          int v194 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v404, "", 0);
          *(void *)(*(void *)(v404 + 24) + 16 * (v194 & 0x7FFFFFFF)) = v409;
          uint64_t v195 = *(void *)(v404 + 8);
          if (v195) {
            (*(void (**)(uint64_t))(*(void *)v195 + 24))(v195);
          }
          uint64_t v197 = *(void *)(a1 + 16);
          uint64_t v196 = *(unint64_t **)(a1 + 24);
          uint64_t v198 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v199 = *(llvm::MachineFunction **)(v197 + 32);
          char v200 = (void *)v412[6];
          uint64_t v418 = v200;
          if (v200) {
            llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v200, 2);
          }
          int v201 = llvm::MachineFunction::CreateMachineInstr(v199, v198 + 432, (unsigned __int8 **)&v418, 0);
          if (v418)
          {
            int v255 = *(unsigned __int8 *)v418;
            if ((v255 - 4) > 0x1E)
            {
              if ((v255 - 3) >= 0xFFFFFFFE) {
                uint64_t v264 = v418;
              }
              else {
                uint64_t v264 = 0;
              }
              if ((v255 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v257 = (unint64_t)v264 + 8;
LABEL_373:
                *(void *)&long long v415 = &v418;
                sub_1CC5FA668(v257 + 16, &v415);
                goto LABEL_290;
              }
              if (v255 == 3) {
                *((void *)v418 + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v418 + 1) & 0x7F) == 2 || *((_DWORD *)v418 + 3))
            {
              uint64_t v256 = *((void *)v418 + 2);
              if ((v256 & 4) != 0)
              {
                unint64_t v257 = v256 & 0xFFFFFFFFFFFFFFF8;
                if (v257) {
                  goto LABEL_373;
                }
              }
            }
          }
LABEL_290:
          uint64_t v202 = *(void *)(v197 + 40);
          *((void *)v201 + 3) = v202;
          uint64_t v203 = *(void *)(v202 + 32);
          uint64_t v204 = *((unsigned int *)v201 + 10);
          if (v204)
          {
            uint64_t v234 = *((void *)v201 + 4);
            uint64_t v235 = *(void *)(v203 + 40);
            uint64_t v236 = 32 * v204;
            do
            {
              if (!*(unsigned char *)v234)
              {
                uint64_t v237 = *(unsigned int *)(v234 + 4);
                if ((int)v237 >= 0) {
                  uint64_t v238 = (uint64_t *)(*(void *)(v235 + 272) + 8 * v237);
                }
                else {
                  uint64_t v238 = (uint64_t *)(*(void *)(v235 + 24) + 16 * (v237 & 0x7FFFFFFF) + 8);
                }
                uint64_t v239 = *v238;
                if (*v238)
                {
                  uint64_t v240 = *(void *)(v239 + 16);
                  *(void *)(v239 + 16) = v234;
                  *(void *)(v234 + 16) = v240;
                  if (*(unsigned char *)(v234 + 3))
                  {
                    *(void *)(v234 + 24) = v239;
                  }
                  else
                  {
                    *(void *)(v234 + 24) = 0;
                    uint64_t v238 = (uint64_t *)(v240 + 24);
                  }
                }
                else
                {
                  *(void *)(v234 + 16) = v234;
                  *(void *)(v234 + 24) = 0;
                }
                *uint64_t v238 = v234;
              }
              v234 += 32;
              v236 -= 32;
            }
            while (v236);
          }
          uint64_t v205 = *(void *)(v203 + 728);
          if (v205) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v205 + 24))(v205, v201);
          }
          unint64_t v206 = *v196 & 0xFFFFFFFFFFFFFFF8;
          *(void *)int v201 = v206 | *(void *)v201 & 7;
          *((void *)v201 + 1) = v196;
          *(void *)(v206 + 8) = v201;
          *uint64_t v196 = *v196 & 7 | (unint64_t)v201;
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = 0x1000000;
          DWORD1(v415) = v194;
          llvm::MachineInstr::addOperand(v201, v199, (const llvm::MachineOperand *)&v415);
          *((void *)&v415 + 1) = 0;
          LODWORD(v415) = 0;
          DWORD1(v415) = v193;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          llvm::MachineInstr::addOperand(v201, v199, (const llvm::MachineOperand *)&v415);
          __int16 v207 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 1, v192);
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = (v207 & 0xFFF) << 8;
          DWORD1(v415) = v410;
          llvm::MachineInstr::addOperand(v201, v199, (const llvm::MachineOperand *)&v415);
          unsigned int v208 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 312))(a1, 1, 0);
          LODWORD(v415) = 1;
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = v208;
          llvm::MachineInstr::addOperand(v201, v199, (const llvm::MachineOperand *)&v415);
          if ((v192 | 1) < v15)
          {
            int v406 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v404, "", 0);
            *(void *)(*(void *)(v404 + 24) + 16 * (v406 & 0x7FFFFFFF)) = v409;
            uint64_t v209 = *(void *)(v404 + 8);
            if (v209) {
              (*(void (**)(uint64_t))(*(void *)v209 + 24))(v209);
            }
            uint64_t v211 = *(void *)(a1 + 16);
            uint64_t v210 = *(unint64_t **)(a1 + 24);
            uint64_t v212 = *(void *)(*(void *)(a1 + 48) + 8);
            unint64_t v213 = *(llvm::MachineFunction **)(v211 + 32);
            uint64_t v214 = (void *)v412[6];
            uint64_t v418 = v214;
            if (v214) {
              llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v214, 2);
            }
            uint64_t v215 = llvm::MachineFunction::CreateMachineInstr(v213, v212 + 432, (unsigned __int8 **)&v418, 0);
            if (!v418) {
              goto LABEL_299;
            }
            int v261 = *(unsigned __int8 *)v418;
            if ((v261 - 4) > 0x1E)
            {
              if ((v261 - 3) >= 0xFFFFFFFE) {
                __int16 v266 = v418;
              }
              else {
                __int16 v266 = 0;
              }
              if ((v261 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v263 = (unint64_t)v266 + 8;
                goto LABEL_385;
              }
              if (v261 == 3) {
                *((void *)v418 + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v418 + 1) & 0x7F) == 2 || *((_DWORD *)v418 + 3))
            {
              uint64_t v262 = *((void *)v418 + 2);
              if ((v262 & 4) != 0)
              {
                unint64_t v263 = v262 & 0xFFFFFFFFFFFFFFF8;
                if (v263)
                {
LABEL_385:
                  *(void *)&long long v415 = &v418;
                  sub_1CC5FA668(v263 + 16, &v415);
                }
              }
            }
LABEL_299:
            uint64_t v216 = *(void *)(v211 + 40);
            *((void *)v215 + 3) = v216;
            uint64_t v217 = *(void *)(v216 + 32);
            uint64_t v218 = *((unsigned int *)v215 + 10);
            if (v218)
            {
              uint64_t v248 = *((void *)v215 + 4);
              uint64_t v249 = *(void *)(v217 + 40);
              uint64_t v250 = 32 * v218;
              do
              {
                if (!*(unsigned char *)v248)
                {
                  uint64_t v251 = *(unsigned int *)(v248 + 4);
                  if ((int)v251 >= 0) {
                    uint64_t v252 = (uint64_t *)(*(void *)(v249 + 272) + 8 * v251);
                  }
                  else {
                    uint64_t v252 = (uint64_t *)(*(void *)(v249 + 24) + 16 * (v251 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v253 = *v252;
                  if (*v252)
                  {
                    uint64_t v254 = *(void *)(v253 + 16);
                    *(void *)(v253 + 16) = v248;
                    *(void *)(v248 + 16) = v254;
                    if (*(unsigned char *)(v248 + 3))
                    {
                      *(void *)(v248 + 24) = v253;
                    }
                    else
                    {
                      *(void *)(v248 + 24) = 0;
                      uint64_t v252 = (uint64_t *)(v254 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v248 + 16) = v248;
                    *(void *)(v248 + 24) = 0;
                  }
                  uint64_t *v252 = v248;
                }
                v248 += 32;
                v250 -= 32;
              }
              while (v250);
            }
            uint64_t v219 = *(void *)(v217 + 728);
            if (v219) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v219 + 24))(v219, v215);
            }
            unint64_t v220 = *v210 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v215 = v220 | *(void *)v215 & 7;
            *((void *)v215 + 1) = v210;
            *(void *)(v220 + 8) = v215;
            *uint64_t v210 = *v210 & 7 | (unint64_t)v215;
            *((void *)&v415 + 1) = 0;
            uint64_t v416 = 0;
            uint64_t v417 = 0;
            LODWORD(v415) = 0x1000000;
            DWORD1(v415) = v406;
            llvm::MachineInstr::addOperand(v215, v213, (const llvm::MachineOperand *)&v415);
            *((void *)&v415 + 1) = 0;
            LODWORD(v415) = 0;
            DWORD1(v415) = v194;
            uint64_t v416 = 0;
            uint64_t v417 = 0;
            llvm::MachineInstr::addOperand(v215, v213, (const llvm::MachineOperand *)&v415);
            __int16 v221 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 312))(a1, 1, v192 | 1);
            *((void *)&v415 + 1) = 0;
            uint64_t v416 = 0;
            uint64_t v417 = 0;
            LODWORD(v415) = (v221 & 0xFFF) << 8;
            DWORD1(v415) = v410;
            llvm::MachineInstr::addOperand(v215, v213, (const llvm::MachineOperand *)&v415);
            unsigned int v222 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 1, 1);
            LODWORD(v415) = 1;
            *((void *)&v415 + 1) = 0;
            uint64_t v416 = v222;
            llvm::MachineInstr::addOperand(v215, v213, (const llvm::MachineOperand *)&v415);
            int v194 = v406;
          }
          uint64_t v224 = *(void *)(a1 + 16);
          BOOL v223 = *(unint64_t **)(a1 + 24);
          uint64_t v225 = *(void *)(*(void *)(a1 + 48) + 8);
          int v226 = *(llvm::MachineFunction **)(v224 + 32);
          uint64_t v227 = (void *)v412[6];
          uint64_t v418 = v227;
          if (v227) {
            llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v227, 2);
          }
          uint64_t v228 = llvm::MachineFunction::CreateMachineInstr(v226, v225 + 912, (unsigned __int8 **)&v418, 0);
          if (!v418) {
            goto LABEL_306;
          }
          int v258 = *(unsigned __int8 *)v418;
          if ((v258 - 4) > 0x1E)
          {
            if ((v258 - 3) >= 0xFFFFFFFE) {
              int v265 = v418;
            }
            else {
              int v265 = 0;
            }
            if ((v258 - 3) < 0xFFFFFFFE)
            {
              if (v258 == 3) {
                *((void *)v418 + 1) = 0;
              }
              goto LABEL_306;
            }
            unint64_t v260 = (unint64_t)v265 + 8;
          }
          else
          {
            if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
              goto LABEL_306;
            }
            uint64_t v259 = *((void *)v418 + 2);
            if ((v259 & 4) == 0) {
              goto LABEL_306;
            }
            unint64_t v260 = v259 & 0xFFFFFFFFFFFFFFF8;
            if (!v260) {
              goto LABEL_306;
            }
          }
          *(void *)&long long v415 = &v418;
          sub_1CC5FA668(v260 + 16, &v415);
LABEL_306:
          uint64_t v229 = *(void *)(v224 + 40);
          *((void *)v228 + 3) = v229;
          uint64_t v230 = *(void *)(v229 + 32);
          uint64_t v231 = *((unsigned int *)v228 + 10);
          if (v231)
          {
            uint64_t v241 = *((void *)v228 + 4);
            uint64_t v242 = *(void *)(v230 + 40);
            uint64_t v243 = 32 * v231;
            do
            {
              if (!*(unsigned char *)v241)
              {
                uint64_t v244 = *(unsigned int *)(v241 + 4);
                if ((int)v244 >= 0) {
                  uint64_t v245 = (uint64_t *)(*(void *)(v242 + 272) + 8 * v244);
                }
                else {
                  uint64_t v245 = (uint64_t *)(*(void *)(v242 + 24) + 16 * (v244 & 0x7FFFFFFF) + 8);
                }
                uint64_t v246 = *v245;
                if (*v245)
                {
                  uint64_t v247 = *(void *)(v246 + 16);
                  *(void *)(v246 + 16) = v241;
                  *(void *)(v241 + 16) = v247;
                  if (*(unsigned char *)(v241 + 3))
                  {
                    *(void *)(v241 + 24) = v246;
                  }
                  else
                  {
                    *(void *)(v241 + 24) = 0;
                    uint64_t v245 = (uint64_t *)(v247 + 24);
                  }
                }
                else
                {
                  *(void *)(v241 + 16) = v241;
                  *(void *)(v241 + 24) = 0;
                }
                *uint64_t v245 = v241;
              }
              v241 += 32;
              v243 -= 32;
            }
            while (v243);
          }
          uint64_t v232 = *(void *)(v230 + 728);
          if (v232) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v232 + 24))(v232, v228);
          }
          unint64_t v233 = *v223 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v228 = v233 | *(void *)v228 & 7;
          *((void *)v228 + 1) = v223;
          *(void *)(v233 + 8) = v228;
          *BOOL v223 = *v223 & 7 | (unint64_t)v228;
          HIDWORD(v415) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          *(void *)((char *)&v415 + 4) = v411 + (v192 >> 1);
          LODWORD(v415) = 0x1000000;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v415);
          *((void *)&v415 + 1) = 0;
          LODWORD(v415) = 0;
          DWORD1(v415) = v194;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v415);
          uint64_t v192 = (v192 + 2);
          if (v192 >= v15) {
            return;
          }
        }
      }
      if (v15)
      {
        uint64_t v267 = 0;
        do
        {
          uint64_t v268 = *(void *)(a1 + 16);
          uint64_t v269 = *(unint64_t **)(a1 + 24);
          uint64_t v270 = *(void *)(*(void *)(a1 + 48) + 8);
          unsigned int v271 = *(llvm::MachineFunction **)(v268 + 32);
          uint64_t v272 = (void *)v412[6];
          uint64_t v418 = v272;
          if (v272) {
            llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v272, 2);
          }
          unsigned int v273 = llvm::MachineFunction::CreateMachineInstr(v271, v270 + 912, (unsigned __int8 **)&v418, 0);
          if (!v418) {
            goto LABEL_399;
          }
          int v287 = *(unsigned __int8 *)v418;
          if ((v287 - 4) > 0x1E)
          {
            if ((v287 - 3) >= 0xFFFFFFFE) {
              uint64_t v290 = v418;
            }
            else {
              uint64_t v290 = 0;
            }
            if ((v287 - 3) < 0xFFFFFFFE)
            {
              if (v287 == 3) {
                *((void *)v418 + 1) = 0;
              }
              goto LABEL_399;
            }
            unint64_t v289 = (unint64_t)v290 + 8;
          }
          else
          {
            if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
              goto LABEL_399;
            }
            uint64_t v288 = *((void *)v418 + 2);
            if ((v288 & 4) == 0) {
              goto LABEL_399;
            }
            unint64_t v289 = v288 & 0xFFFFFFFFFFFFFFF8;
            if (!v289) {
              goto LABEL_399;
            }
          }
          *(void *)&long long v415 = &v418;
          sub_1CC5FA668(v289 + 16, &v415);
LABEL_399:
          uint64_t v274 = *(void *)(v268 + 40);
          *((void *)v273 + 3) = v274;
          uint64_t v275 = *(void *)(v274 + 32);
          uint64_t v276 = *((unsigned int *)v273 + 10);
          if (v276)
          {
            uint64_t v280 = *((void *)v273 + 4);
            uint64_t v281 = *(void *)(v275 + 40);
            uint64_t v282 = 32 * v276;
            do
            {
              if (!*(unsigned char *)v280)
              {
                uint64_t v283 = *(unsigned int *)(v280 + 4);
                if ((int)v283 >= 0) {
                  uint64_t v284 = (uint64_t *)(*(void *)(v281 + 272) + 8 * v283);
                }
                else {
                  uint64_t v284 = (uint64_t *)(*(void *)(v281 + 24) + 16 * (v283 & 0x7FFFFFFF) + 8);
                }
                uint64_t v285 = *v284;
                if (*v284)
                {
                  uint64_t v286 = *(void *)(v285 + 16);
                  *(void *)(v285 + 16) = v280;
                  *(void *)(v280 + 16) = v286;
                  if (*(unsigned char *)(v280 + 3))
                  {
                    *(void *)(v280 + 24) = v285;
                  }
                  else
                  {
                    *(void *)(v280 + 24) = 0;
                    uint64_t v284 = (uint64_t *)(v286 + 24);
                  }
                }
                else
                {
                  *(void *)(v280 + 16) = v280;
                  *(void *)(v280 + 24) = 0;
                }
                *uint64_t v284 = v280;
              }
              v280 += 32;
              v282 -= 32;
            }
            while (v282);
          }
          uint64_t v277 = *(void *)(v275 + 728);
          if (v277) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v277 + 24))(v277, v273);
          }
          unint64_t v278 = *v269 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unsigned int v273 = v278 | *(void *)v273 & 7;
          *((void *)v273 + 1) = v269;
          *(void *)(v278 + 8) = v273;
          *uint64_t v269 = *v269 & 7 | (unint64_t)v273;
          HIDWORD(v415) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          *(void *)((char *)&v415 + 4) = (v267 + v411);
          LODWORD(v415) = 0x1000000;
          llvm::MachineInstr::addOperand(v273, v271, (const llvm::MachineOperand *)&v415);
          __int16 v279 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 312))(a1, v18 == 16, v267);
          *((void *)&v415 + 1) = 0;
          uint64_t v416 = 0;
          uint64_t v417 = 0;
          LODWORD(v415) = (v279 & 0xFFF) << 8;
          DWORD1(v415) = v410;
          llvm::MachineInstr::addOperand(v273, v271, (const llvm::MachineOperand *)&v415);
          uint64_t v267 = (v267 + 1);
        }
        while (v267 != v15);
      }
      if (v15 >= v16) {
        return;
      }
      while (1)
      {
        uint64_t v292 = *(void *)(a1 + 16);
        int v291 = *(unint64_t **)(a1 + 24);
        uint64_t v293 = *(void *)(*(void *)(a1 + 48) + 8);
        uint64_t v294 = *(llvm::MachineFunction **)(v292 + 32);
        uint64_t v295 = (void *)v412[6];
        uint64_t v418 = v295;
        if (v295) {
          llvm::MetadataTracking::track((uint64_t)&v418, (unsigned __int8 *)v295, 2);
        }
        unsigned int v296 = llvm::MachineFunction::CreateMachineInstr(v294, v293 + 912, (unsigned __int8 **)&v418, 0);
        if (!v418) {
          goto LABEL_435;
        }
        int v310 = *(unsigned __int8 *)v418;
        if ((v310 - 4) > 0x1E)
        {
          if ((v310 - 3) >= 0xFFFFFFFE) {
            uint64_t v313 = v418;
          }
          else {
            uint64_t v313 = 0;
          }
          if ((v310 - 3) < 0xFFFFFFFE)
          {
            if (v310 == 3) {
              *((void *)v418 + 1) = 0;
            }
            goto LABEL_435;
          }
          unint64_t v312 = (unint64_t)v313 + 8;
        }
        else
        {
          if ((*((unsigned char *)v418 + 1) & 0x7F) != 2 && !*((_DWORD *)v418 + 3)) {
            goto LABEL_435;
          }
          uint64_t v311 = *((void *)v418 + 2);
          if ((v311 & 4) == 0) {
            goto LABEL_435;
          }
          unint64_t v312 = v311 & 0xFFFFFFFFFFFFFFF8;
          if (!v312) {
            goto LABEL_435;
          }
        }
        *(void *)&long long v415 = &v418;
        sub_1CC5FA668(v312 + 16, &v415);
LABEL_435:
        uint64_t v297 = *(void *)(v292 + 40);
        *((void *)v296 + 3) = v297;
        uint64_t v298 = *(void *)(v297 + 32);
        uint64_t v299 = *((unsigned int *)v296 + 10);
        if (v299)
        {
          uint64_t v303 = *((void *)v296 + 4);
          uint64_t v304 = *(void *)(v298 + 40);
          uint64_t v305 = 32 * v299;
          do
          {
            if (!*(unsigned char *)v303)
            {
              uint64_t v306 = *(unsigned int *)(v303 + 4);
              if ((int)v306 >= 0) {
                __int16 v307 = (uint64_t *)(*(void *)(v304 + 272) + 8 * v306);
              }
              else {
                __int16 v307 = (uint64_t *)(*(void *)(v304 + 24) + 16 * (v306 & 0x7FFFFFFF) + 8);
              }
              uint64_t v308 = *v307;
              if (*v307)
              {
                uint64_t v309 = *(void *)(v308 + 16);
                *(void *)(v308 + 16) = v303;
                *(void *)(v303 + 16) = v309;
                if (*(unsigned char *)(v303 + 3))
                {
                  *(void *)(v303 + 24) = v308;
                }
                else
                {
                  *(void *)(v303 + 24) = 0;
                  __int16 v307 = (uint64_t *)(v309 + 24);
                }
              }
              else
              {
                *(void *)(v303 + 16) = v303;
                *(void *)(v303 + 24) = 0;
              }
              *__int16 v307 = v303;
            }
            v303 += 32;
            v305 -= 32;
          }
          while (v305);
        }
        uint64_t v300 = *(void *)(v298 + 728);
        if (v300) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v300 + 24))(v300, v296);
        }
        unint64_t v301 = *v291 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v296 = v301 | *(void *)v296 & 7;
        *((void *)v296 + 1) = v291;
        *(void *)(v301 + 8) = v296;
        unint64_t *v291 = *v291 & 7 | (unint64_t)v296;
        HIDWORD(v415) = 0;
        uint64_t v416 = 0;
        uint64_t v417 = 0;
        LODWORD(v415) = 0x1000000;
        *(void *)((char *)&v415 + 4) = v15 + v411;
        llvm::MachineInstr::addOperand(v296, v294, (const llvm::MachineOperand *)&v415);
        int v302 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 320))(a1, 0);
        *((void *)&v415 + 1) = 0;
        LODWORD(v415) = 0;
        DWORD1(v415) = v302;
        uint64_t v416 = 0;
        uint64_t v417 = 0;
        llvm::MachineInstr::addOperand(v296, v294, (const llvm::MachineOperand *)&v415);
        if (++v15 == v16) {
          return;
        }
      }
    }
    if (a7 <= 7)
    {
      if (a7 <= 3)
      {
        if (a7 <= 1) {
          int v21 = 1;
        }
        else {
          int v21 = 2;
        }
      }
      else
      {
        int v21 = 3;
      }
    }
    else
    {
      int v21 = 4;
    }
  }
  else
  {
    v20.i32[0] = a7;
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20);
    v22.i16[0] = vaddlv_u8(v22);
    int v21 = v22.i32[0];
  }
  unsigned int v405 = v21;
  if (a7 == -1) {
    goto LABEL_106;
  }
  unsigned int v23 = *(_DWORD *)(a2 + 12);
  if (v405 == v23) {
    goto LABEL_106;
  }
  unsigned int v24 = v405;
  if (v23 > v405) {
    unsigned int v24 = *(_DWORD *)(a2 + 12);
  }
  uint64_t v418 = v420;
  uint64_t v419 = 0x400000000;
  unsigned int v402 = v24;
  if (!v24) {
    goto LABEL_278;
  }
  unsigned int v25 = 0;
  unsigned int v26 = 0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8))) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = v25;
    }
    if ((a7 >> v26))
    {
      if (!*(unsigned char *)(a2 + 8))
      {
        if (v419 >= (unint64_t)HIDWORD(v419)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v418 + v419) = v27;
        LODWORD(v419) = v419 + 1;
        goto LABEL_45;
      }
      uint64_t v28 = *(void *)(a1 + 16);
      uint64_t v29 = *(unint64_t **)(a1 + 24);
      uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8);
      int v31 = *(llvm::MachineFunction **)(v28 + 32);
      unsigned int v32 = (unsigned __int8 *)a3[6];
      v414 = v32;
      if (v32) {
        llvm::MetadataTracking::track((uint64_t)&v414, v32, 2);
      }
      int v33 = llvm::MachineFunction::CreateMachineInstr(v31, v30 + 912, &v414, 0);
      if (v414)
      {
        int v66 = *v414;
        if ((v66 - 4) > 0x1E)
        {
          if ((v66 - 3) >= 0xFFFFFFFE) {
            uint64_t v72 = v414;
          }
          else {
            uint64_t v72 = 0;
          }
          if ((v66 - 3) < 0xFFFFFFFE)
          {
            if (v66 == 3) {
              *((void *)v414 + 1) = 0;
            }
            goto LABEL_28;
          }
          unint64_t v68 = (unint64_t)(v72 + 8);
        }
        else
        {
          if ((v414[1] & 0x7F) != 2 && !*((_DWORD *)v414 + 3)) {
            goto LABEL_28;
          }
          uint64_t v67 = *((void *)v414 + 2);
          if ((v67 & 4) == 0) {
            goto LABEL_28;
          }
          unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
          if (!v68) {
            goto LABEL_28;
          }
        }
        *(void *)&long long v415 = &v414;
        sub_1CC5FA668(v68 + 16, &v415);
      }
LABEL_28:
      uint64_t v34 = *(void *)(v28 + 40);
      *((void *)v33 + 3) = v34;
      uint64_t v35 = *(void *)(v34 + 32);
      uint64_t v36 = *((unsigned int *)v33 + 10);
      if (v36)
      {
        uint64_t v52 = *((void *)v33 + 4);
        uint64_t v53 = *(void *)(v35 + 40);
        uint64_t v54 = 32 * v36;
        do
        {
          if (!*(unsigned char *)v52)
          {
            uint64_t v55 = *(unsigned int *)(v52 + 4);
            if ((int)v55 >= 0) {
              int v56 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v55);
            }
            else {
              int v56 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
            }
            uint64_t v57 = *v56;
            if (*v56)
            {
              uint64_t v58 = *(void *)(v57 + 16);
              *(void *)(v57 + 16) = v52;
              *(void *)(v52 + 16) = v58;
              if (*(unsigned char *)(v52 + 3))
              {
                *(void *)(v52 + 24) = v57;
              }
              else
              {
                *(void *)(v52 + 24) = 0;
                int v56 = (uint64_t *)(v58 + 24);
              }
            }
            else
            {
              *(void *)(v52 + 16) = v52;
              *(void *)(v52 + 24) = 0;
            }
            *int v56 = v52;
          }
          v52 += 32;
          v54 -= 32;
        }
        while (v54);
      }
      uint64_t v37 = *(void *)(v35 + 728);
      if (v37) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v37 + 24))(v37, v33);
      }
      unint64_t v38 = *v29 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v33 = v38 | *(void *)v33 & 7;
      *((void *)v33 + 1) = v29;
      *(void *)(v38 + 8) = v33;
      *uint64_t v29 = *v29 & 7 | (unint64_t)v33;
      HIDWORD(v415) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      *(void *)((char *)&v415 + 4) = v26 + v411;
      LODWORD(v415) = 0x1000000;
      llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v415);
      if (v405 == 1) {
        __int16 v39 = 0;
      }
      else {
        __int16 v39 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 312))(a1, 0, v27);
      }
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      LODWORD(v415) = (v39 & 0xFFF) << 8;
      DWORD1(v415) = v410;
      llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v415);
LABEL_45:
      ++v25;
      goto LABEL_46;
    }
    if (*(unsigned char *)(a2 + 8))
    {
      int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, 1);
      uint64_t v41 = *(void *)(a1 + 16);
      uint64_t v42 = *(unint64_t **)(a1 + 24);
      uint64_t v43 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v44 = *(llvm::MachineFunction **)(v41 + 32);
      unint64_t v45 = (unsigned __int8 *)a3[6];
      v414 = v45;
      if (v45) {
        llvm::MetadataTracking::track((uint64_t)&v414, v45, 2);
      }
      uint64_t v46 = llvm::MachineFunction::CreateMachineInstr(v44, v43 + 912, &v414, 0);
      if (!v414) {
        goto LABEL_37;
      }
      int v69 = *v414;
      if ((v69 - 4) > 0x1E)
      {
        if ((v69 - 3) >= 0xFFFFFFFE) {
          char v73 = v414;
        }
        else {
          char v73 = 0;
        }
        if ((v69 - 3) < 0xFFFFFFFE)
        {
          if (v69 == 3) {
            *((void *)v414 + 1) = 0;
          }
          goto LABEL_37;
        }
        unint64_t v71 = (unint64_t)(v73 + 8);
      }
      else
      {
        if ((v414[1] & 0x7F) != 2 && !*((_DWORD *)v414 + 3)) {
          goto LABEL_37;
        }
        uint64_t v70 = *((void *)v414 + 2);
        if ((v70 & 4) == 0) {
          goto LABEL_37;
        }
        unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
        if (!v71) {
          goto LABEL_37;
        }
      }
      *(void *)&long long v415 = &v414;
      sub_1CC5FA668(v71 + 16, &v415);
LABEL_37:
      uint64_t v47 = *(void *)(v41 + 40);
      *((void *)v46 + 3) = v47;
      uint64_t v48 = *(void *)(v47 + 32);
      uint64_t v49 = *((unsigned int *)v46 + 10);
      if (v49)
      {
        uint64_t v59 = *((void *)v46 + 4);
        uint64_t v60 = *(void *)(v48 + 40);
        uint64_t v61 = 32 * v49;
        do
        {
          if (!*(unsigned char *)v59)
          {
            uint64_t v62 = *(unsigned int *)(v59 + 4);
            if ((int)v62 >= 0) {
              uint64_t v63 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v62);
            }
            else {
              uint64_t v63 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
            }
            uint64_t v64 = *v63;
            if (*v63)
            {
              uint64_t v65 = *(void *)(v64 + 16);
              *(void *)(v64 + 16) = v59;
              *(void *)(v59 + 16) = v65;
              if (*(unsigned char *)(v59 + 3))
              {
                *(void *)(v59 + 24) = v64;
              }
              else
              {
                *(void *)(v59 + 24) = 0;
                uint64_t v63 = (uint64_t *)(v65 + 24);
              }
            }
            else
            {
              *(void *)(v59 + 16) = v59;
              *(void *)(v59 + 24) = 0;
            }
            *uint64_t v63 = v59;
          }
          v59 += 32;
          v61 -= 32;
        }
        while (v61);
      }
      uint64_t v50 = *(void *)(v48 + 728);
      if (v50) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v50 + 24))(v50, v46);
      }
      unint64_t v51 = *v42 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v46 = v51 | *(void *)v46 & 7;
      *((void *)v46 + 1) = v42;
      *(void *)(v51 + 8) = v46;
      unint64_t *v42 = *v42 & 7 | (unint64_t)v46;
      HIDWORD(v415) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      *(void *)((char *)&v415 + 4) = v26 + v411;
      LODWORD(v415) = 0x1000000;
      llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v415);
      *((void *)&v415 + 1) = 0;
      LODWORD(v415) = 0;
      DWORD1(v415) = v40;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v415);
      goto LABEL_46;
    }
    if (v419 >= (unint64_t)HIDWORD(v419)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v418 + v419) = -1;
    LODWORD(v419) = v419 + 1;
LABEL_46:
    ++v26;
  }
  while (v26 != v402);
  if (v419)
  {
    uint64_t v113 = 0;
    unsigned int v114 = 0;
    unint64_t v408 = v401 & 0xFFFFFFFFFFFFFFFBLL;
    do
    {
      int v115 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 320))(a1, 0);
      int v116 = v115;
      if (*((_DWORD *)v418 + v113) == -1)
      {
        int v117 = v115;
        goto LABEL_174;
      }
      int v117 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v404, "", 0);
      *(void *)(*(void *)(v404 + 24) + 16 * (v117 & 0x7FFFFFFF)) = v408;
      uint64_t v118 = *(void *)(v404 + 8);
      if (v118) {
        (*(void (**)(uint64_t))(*(void *)v118 + 24))(v118);
      }
      uint64_t v120 = *(void *)(a1 + 16);
      uint64_t v119 = *(unint64_t **)(a1 + 24);
      uint64_t v121 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v122 = *(llvm::MachineFunction **)(v120 + 32);
      uint64_t v123 = (unsigned __int8 *)v412[6];
      v414 = v123;
      if (v123) {
        llvm::MetadataTracking::track((uint64_t)&v414, v123, 2);
      }
      uint64_t v124 = llvm::MachineFunction::CreateMachineInstr(v122, v121 + 432, &v414, 0);
      if (v414)
      {
        int v183 = *v414;
        if ((v183 - 4) > 0x1E)
        {
          if ((v183 - 3) >= 0xFFFFFFFE) {
            uint64_t v190 = v414;
          }
          else {
            uint64_t v190 = 0;
          }
          if ((v183 - 3) < 0xFFFFFFFE)
          {
            if (v183 == 3) {
              *((void *)v414 + 1) = 0;
            }
            goto LABEL_166;
          }
          unint64_t v185 = (unint64_t)(v190 + 8);
        }
        else
        {
          if ((v414[1] & 0x7F) != 2 && !*((_DWORD *)v414 + 3)) {
            goto LABEL_166;
          }
          uint64_t v184 = *((void *)v414 + 2);
          if ((v184 & 4) == 0) {
            goto LABEL_166;
          }
          unint64_t v185 = v184 & 0xFFFFFFFFFFFFFFF8;
          if (!v185) {
            goto LABEL_166;
          }
        }
        *(void *)&long long v415 = &v414;
        sub_1CC5FA668(v185 + 16, &v415);
      }
LABEL_166:
      uint64_t v125 = *(void *)(v120 + 40);
      *((void *)v124 + 3) = v125;
      uint64_t v126 = *(void *)(v125 + 32);
      uint64_t v127 = *((unsigned int *)v124 + 10);
      if (v127)
      {
        uint64_t v166 = *((void *)v124 + 4);
        uint64_t v167 = *(void *)(v126 + 40);
        uint64_t v168 = 32 * v127;
        do
        {
          if (!*(unsigned char *)v166)
          {
            uint64_t v169 = *(unsigned int *)(v166 + 4);
            if ((int)v169 >= 0) {
              uint64_t v170 = (uint64_t *)(*(void *)(v167 + 272) + 8 * v169);
            }
            else {
              uint64_t v170 = (uint64_t *)(*(void *)(v167 + 24) + 16 * (v169 & 0x7FFFFFFF) + 8);
            }
            uint64_t v171 = *v170;
            if (*v170)
            {
              uint64_t v172 = *(void *)(v171 + 16);
              *(void *)(v171 + 16) = v166;
              *(void *)(v166 + 16) = v172;
              if (*(unsigned char *)(v166 + 3))
              {
                *(void *)(v166 + 24) = v171;
              }
              else
              {
                *(void *)(v166 + 24) = 0;
                uint64_t v170 = (uint64_t *)(v172 + 24);
              }
            }
            else
            {
              *(void *)(v166 + 16) = v166;
              *(void *)(v166 + 24) = 0;
            }
            uint64_t *v170 = v166;
          }
          v166 += 32;
          v168 -= 32;
        }
        while (v168);
      }
      uint64_t v128 = *(void *)(v126 + 728);
      if (v128) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v128 + 24))(v128, v124);
      }
      unint64_t v129 = *v119 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v124 = v129 | *(void *)v124 & 7;
      *((void *)v124 + 1) = v119;
      *(void *)(v129 + 8) = v124;
      *uint64_t v119 = *v119 & 7 | (unint64_t)v124;
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      LODWORD(v415) = 0x1000000;
      DWORD1(v415) = v117;
      llvm::MachineInstr::addOperand(v124, v122, (const llvm::MachineOperand *)&v415);
      *((void *)&v415 + 1) = 0;
      LODWORD(v415) = 0;
      DWORD1(v415) = v116;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      llvm::MachineInstr::addOperand(v124, v122, (const llvm::MachineOperand *)&v415);
      if (v405 != 1
        || (int v130 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8))) != 0)
      {
        LOWORD(v130) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 312))(a1, 1, *((unsigned int *)v418 + v113));
      }
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      LODWORD(v415) = (v130 & 0xFFF) << 8;
      DWORD1(v415) = v410;
      llvm::MachineInstr::addOperand(v124, v122, (const llvm::MachineOperand *)&v415);
      unsigned int v131 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 312))(a1, 1, 0);
      LODWORD(v415) = 1;
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = v131;
      llvm::MachineInstr::addOperand(v124, v122, (const llvm::MachineOperand *)&v415);
LABEL_174:
      uint64_t v132 = v114 | 1;
      if (v419 <= v132 || *((_DWORD *)v418 + v132) == -1)
      {
        int v133 = v117;
        goto LABEL_189;
      }
      int v133 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v404, "", 0);
      *(void *)(*(void *)(v404 + 24) + 16 * (v133 & 0x7FFFFFFF)) = v408;
      uint64_t v134 = *(void *)(v404 + 8);
      if (v134) {
        (*(void (**)(uint64_t))(*(void *)v134 + 24))(v134);
      }
      uint64_t v136 = *(void *)(a1 + 16);
      uint64_t v135 = *(unint64_t **)(a1 + 24);
      uint64_t v137 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v138 = *(llvm::MachineFunction **)(v136 + 32);
      uint64_t v139 = (unsigned __int8 *)v412[6];
      v414 = v139;
      if (v139) {
        llvm::MetadataTracking::track((uint64_t)&v414, v139, 2);
      }
      int v140 = llvm::MachineFunction::CreateMachineInstr(v138, v137 + 432, &v414, 0);
      if (v414)
      {
        int v186 = *v414;
        if ((v186 - 4) > 0x1E)
        {
          if ((v186 - 3) >= 0xFFFFFFFE) {
            uint64_t v191 = v414;
          }
          else {
            uint64_t v191 = 0;
          }
          if ((v186 - 3) < 0xFFFFFFFE)
          {
            if (v186 == 3) {
              *((void *)v414 + 1) = 0;
            }
            goto LABEL_181;
          }
          unint64_t v188 = (unint64_t)(v191 + 8);
        }
        else
        {
          if ((v414[1] & 0x7F) != 2 && !*((_DWORD *)v414 + 3)) {
            goto LABEL_181;
          }
          uint64_t v187 = *((void *)v414 + 2);
          if ((v187 & 4) == 0) {
            goto LABEL_181;
          }
          unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFF8;
          if (!v188) {
            goto LABEL_181;
          }
        }
        *(void *)&long long v415 = &v414;
        sub_1CC5FA668(v188 + 16, &v415);
      }
LABEL_181:
      uint64_t v141 = *(void *)(v136 + 40);
      *((void *)v140 + 3) = v141;
      uint64_t v142 = *(void *)(v141 + 32);
      uint64_t v143 = *((unsigned int *)v140 + 10);
      if (v143)
      {
        uint64_t v173 = *((void *)v140 + 4);
        uint64_t v174 = *(void *)(v142 + 40);
        uint64_t v175 = 32 * v143;
        do
        {
          if (!*(unsigned char *)v173)
          {
            uint64_t v176 = *(unsigned int *)(v173 + 4);
            if ((int)v176 >= 0) {
              unsigned int v177 = (uint64_t *)(*(void *)(v174 + 272) + 8 * v176);
            }
            else {
              unsigned int v177 = (uint64_t *)(*(void *)(v174 + 24) + 16 * (v176 & 0x7FFFFFFF) + 8);
            }
            uint64_t v178 = *v177;
            if (*v177)
            {
              uint64_t v179 = *(void *)(v178 + 16);
              *(void *)(v178 + 16) = v173;
              *(void *)(v173 + 16) = v179;
              if (*(unsigned char *)(v173 + 3))
              {
                *(void *)(v173 + 24) = v178;
              }
              else
              {
                *(void *)(v173 + 24) = 0;
                unsigned int v177 = (uint64_t *)(v179 + 24);
              }
            }
            else
            {
              *(void *)(v173 + 16) = v173;
              *(void *)(v173 + 24) = 0;
            }
            *unsigned int v177 = v173;
          }
          v173 += 32;
          v175 -= 32;
        }
        while (v175);
      }
      uint64_t v144 = *(void *)(v142 + 728);
      if (v144) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v144 + 24))(v144, v140);
      }
      unint64_t v145 = *v135 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v140 = v145 | *(void *)v140 & 7;
      *((void *)v140 + 1) = v135;
      *(void *)(v145 + 8) = v140;
      unint64_t *v135 = *v135 & 7 | (unint64_t)v140;
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      LODWORD(v415) = 0x1000000;
      DWORD1(v415) = v133;
      llvm::MachineInstr::addOperand(v140, v138, (const llvm::MachineOperand *)&v415);
      *((void *)&v415 + 1) = 0;
      LODWORD(v415) = 0;
      DWORD1(v415) = v117;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      llvm::MachineInstr::addOperand(v140, v138, (const llvm::MachineOperand *)&v415);
      if (v405 != 1
        || (int v146 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8))) != 0)
      {
        LOWORD(v146) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 312))(a1, 1, *((unsigned int *)v418 + v132));
      }
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      LODWORD(v415) = (v146 & 0xFFF) << 8;
      DWORD1(v415) = v410;
      llvm::MachineInstr::addOperand(v140, v138, (const llvm::MachineOperand *)&v415);
      unsigned int v147 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 1, 1);
      LODWORD(v415) = 1;
      *((void *)&v415 + 1) = 0;
      uint64_t v416 = v147;
      llvm::MachineInstr::addOperand(v140, v138, (const llvm::MachineOperand *)&v415);
LABEL_189:
      uint64_t v149 = *(void *)(a1 + 16);
      int v148 = *(unint64_t **)(a1 + 24);
      uint64_t v150 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v151 = *(llvm::MachineFunction **)(v149 + 32);
      uint64_t v152 = (unsigned __int8 *)v412[6];
      v414 = v152;
      if (v152) {
        llvm::MetadataTracking::track((uint64_t)&v414, v152, 2);
      }
      uint64_t v153 = llvm::MachineFunction::CreateMachineInstr(v151, v150 + 912, &v414, 0);
      if (!v414) {
        goto LABEL_192;
      }
      int v180 = *v414;
      if ((v180 - 4) > 0x1E)
      {
        if ((v180 - 3) >= 0xFFFFFFFE) {
          uint64_t v189 = v414;
        }
        else {
          uint64_t v189 = 0;
        }
        if ((v180 - 3) < 0xFFFFFFFE)
        {
          if (v180 == 3) {
            *((void *)v414 + 1) = 0;
          }
          goto LABEL_192;
        }
        unint64_t v182 = (unint64_t)(v189 + 8);
      }
      else
      {
        if ((v414[1] & 0x7F) != 2 && !*((_DWORD *)v414 + 3)) {
          goto LABEL_192;
        }
        uint64_t v181 = *((void *)v414 + 2);
        if ((v181 & 4) == 0) {
          goto LABEL_192;
        }
        unint64_t v182 = v181 & 0xFFFFFFFFFFFFFFF8;
        if (!v182) {
          goto LABEL_192;
        }
      }
      *(void *)&long long v415 = &v414;
      sub_1CC5FA668(v182 + 16, &v415);
LABEL_192:
      uint64_t v154 = *(void *)(v149 + 40);
      *((void *)v153 + 3) = v154;
      uint64_t v155 = *(void *)(v154 + 32);
      uint64_t v156 = *((unsigned int *)v153 + 10);
      if (v156)
      {
        uint64_t v159 = *((void *)v153 + 4);
        uint64_t v160 = *(void *)(v155 + 40);
        uint64_t v161 = 32 * v156;
        do
        {
          if (!*(unsigned char *)v159)
          {
            uint64_t v162 = *(unsigned int *)(v159 + 4);
            if ((int)v162 >= 0) {
              int v163 = (uint64_t *)(*(void *)(v160 + 272) + 8 * v162);
            }
            else {
              int v163 = (uint64_t *)(*(void *)(v160 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
            }
            uint64_t v164 = *v163;
            if (*v163)
            {
              uint64_t v165 = *(void *)(v164 + 16);
              *(void *)(v164 + 16) = v159;
              *(void *)(v159 + 16) = v165;
              if (*(unsigned char *)(v159 + 3))
              {
                *(void *)(v159 + 24) = v164;
              }
              else
              {
                *(void *)(v159 + 24) = 0;
                int v163 = (uint64_t *)(v165 + 24);
              }
            }
            else
            {
              *(void *)(v159 + 16) = v159;
              *(void *)(v159 + 24) = 0;
            }
            *int v163 = v159;
          }
          v159 += 32;
          v161 -= 32;
        }
        while (v161);
      }
      uint64_t v157 = *(void *)(v155 + 728);
      if (v157) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v157 + 24))(v157, v153);
      }
      unint64_t v158 = *v148 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v153 = v158 | *(void *)v153 & 7;
      *((void *)v153 + 1) = v148;
      *(void *)(v158 + 8) = v153;
      *int v148 = *v148 & 7 | (unint64_t)v153;
      HIDWORD(v415) = 0;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      *(void *)((char *)&v415 + 4) = v411 + (v114 >> 1);
      LODWORD(v415) = 0x1000000;
      llvm::MachineInstr::addOperand(v153, v151, (const llvm::MachineOperand *)&v415);
      *((void *)&v415 + 1) = 0;
      LODWORD(v415) = 0;
      DWORD1(v415) = v133;
      uint64_t v416 = 0;
      uint64_t v417 = 0;
      llvm::MachineInstr::addOperand(v153, v151, (const llvm::MachineOperand *)&v415);
      uint64_t v113 = v114 + 2;
      unsigned int v114 = v113;
    }
    while (v419 > v113);
  }
LABEL_278:
  if (v418 != v420) {
    free(v418);
  }
}

uint64_t sub_1CC75ADA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  unsigned int v10 = (void **)result;
  v38[65] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(unsigned char *)(a2 + 61)) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = *(unsigned char *)(a2 + 60) == 0;
    }
    if (v11 && *(_DWORD *)(a2 + 48) == -1)
    {
      unsigned int v13 = *(_DWORD *)(a2 + 4);
      if (!v13)
      {
LABEL_22:
        int v20 = 8;
LABEL_23:
        *a5 = v20;
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 224))(*(void *)(result + 8), a2);
      unsigned int v13 = result >> 1;
      if (!(result >> 1)) {
        goto LABEL_22;
      }
    }
    int v18 = 0;
    do
    {
      uint64_t v19 = ((uint64_t (*)(void **, uint64_t, void))(*v10)[2])(v10, a4, (v18 + *(_DWORD *)(a2 + 72)));
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v19, a6, 0xFFFFFFFFLL);
      ++v18;
    }
    while (v13 != v18);
    goto LABEL_22;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 168))(*(void *)(result + 8));
  if (*(_DWORD *)(a2 + 56) == -1) {
    int v14 = 0;
  }
  else {
    int v14 = result;
  }
  if (v14 == 1)
  {
    uint64_t v15 = ((uint64_t (*)(void **, uint64_t))(*v10)[2])(v10, a4);
    v38[0] = 1;
    for (uint64_t i = 1; i != 65; ++i)
      LODWORD(v38[i]) = 0x7FFFFFFF;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, void *, void))(*v10)[27])(v10, v15, v38, 0);
    int v17 = result;
    if ((v38[0] & 1) == 0) {
      uint64_t result = MEMORY[0x1D25D9CD0](v38[1], 4);
    }
  }
  else
  {
    int v17 = 1;
  }
  unsigned int v21 = *(_DWORD *)(a2 + 76);
  unsigned int v22 = *(_DWORD *)(a2 + 68);
  if (v21 != -1 || v22 != -1)
  {
LABEL_29:
    if (v22 == -1) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = v22;
    }
    uint64_t v25 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v24);
    if (*(_DWORD *)(a2 + 92) != -1 && (*(unsigned int (**)(void *))(*v10[1] + 328))(v10[1]))
    {
      LODWORD(v38[0]) = -1;
      unsigned __int8 v26 = ((uint64_t (*)(void **, uint64_t, void *, void))(*v10)[18])(v10, v25, v38, 0);
      if ((v26 & (LODWORD(v38[0]) < 0xFF)) != 0) {
        int v27 = 7;
      }
      else {
        int v27 = 6;
      }
      *a5 = v27;
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[21])(v10, v25);
      goto LABEL_81;
    }
    if ((((uint64_t (*)(void **, uint64_t))(*v10)[30])(v10, v25) & 1) != 0
      || ((unsigned int (*)(void **, uint64_t))(*v10)[28])(v10, v25))
    {
      if ((*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1])) {
        goto LABEL_49;
      }
    }
    else if ((((uint64_t (*)(void **, uint64_t))(*v10)[31])(v10, v25) & 1) == 0 {
           && !((unsigned int (*)(void **, uint64_t))(*v10)[29])(v10, v25)
    }
           || (*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_49:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const llvm::Twine *)1);
    }
    LODWORD(v38[0]) = -1;
    char v37 = 0;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, void *, char *))(*v10)[18])(v10, v25, v38, &v37);
    int v31 = result ^ 1;
    if (LODWORD(v38[0])) {
      int v31 = 1;
    }
    if (v22 == -1) {
      int v32 = v14;
    }
    else {
      int v32 = 1;
    }
    int v33 = v31 | v32;
    if (((v31 | v32) & v17) != 1) {
      goto LABEL_73;
    }
    if (result)
    {
      uint64_t result = sub_1CB8816A4((uint64_t)v10, LODWORD(v38[0]));
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[22])(v10, v25);
      if (result == -1)
      {
LABEL_73:
        if (v33)
        {
          uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[21])(v10, v25);
          unsigned int v35 = *(_DWORD *)(a6 + 8);
          if (v35 >= *(_DWORD *)(a6 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a6 + 4 * v35) = result;
          ++*(_DWORD *)(a6 + 8);
          if (v22 == -1) {
            int v20 = 5;
          }
          else {
            int v20 = 6;
          }
          goto LABEL_23;
        }
        goto LABEL_77;
      }
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v10[1] + 56))(v10[1], result);
    }
    if (result != -1)
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[20])(v10, result);
      unsigned int v34 = *(_DWORD *)(a6 + 8);
      if (v34 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a6 + 4 * v34) = result;
      ++*(_DWORD *)(a6 + 8);
      if (v22 == -1) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      goto LABEL_23;
    }
    goto LABEL_73;
  }
  if (*(unsigned char *)(a2 + 62))
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v10[1] + 384))(v10[1]);
    if (((v14 | result ^ 1) & 1) == 0)
    {
      uint64_t v28 = sub_1CB8816A4((uint64_t)v10, 0);
      int v29 = 2;
LABEL_51:
      *a5 = v29;
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[20])(v10, v28);
      goto LABEL_81;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == -1
      || (uint64_t result = (*(uint64_t (**)(void *))(*v10[1] + 328))(v10[1]), (result & 1) == 0))
    {
LABEL_77:
      *a5 = 0;
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || !(*(unsigned int (**)(void *))(*v10[1] + 328))(v10[1]))
  {
    if (!v14)
    {
      unsigned int v22 = *(_DWORD *)(a2 + 68);
      unsigned int v21 = *(_DWORD *)(a2 + 76);
      goto LABEL_29;
    }
    if (!v17 || (uint64_t v30 = sub_1CB8816A4((uint64_t)v10, 0), v30 == -1))
    {
      *a5 = 5;
      uint64_t result = ((uint64_t (*)(void **, void))(*v10)[8])(v10, 0);
      goto LABEL_81;
    }
    uint64_t v28 = v30;
    int v29 = 1;
    goto LABEL_51;
  }
  *a5 = 7;
  uint64_t result = ((uint64_t (*)(void **, void))(*v10)[9])(v10, 0);
LABEL_81:
  unsigned int v36 = *(_DWORD *)(a6 + 8);
  if (v36 >= *(_DWORD *)(a6 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a6 + 4 * v36) = result;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

uint64_t sub_1CC75B61C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 64);
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1) {
    int v10 = 1;
  }
  else {
    int v10 = result;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || v11 != -1)
  {
    unsigned int v13 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[2];
    if (v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if (v11 == -1) {
        uint64_t v11 = *(unsigned int *)(a2 + 64);
      }
      uint64_t v15 = v13(a1, a3, v11);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v15);
    }
    else
    {
      uint64_t v16 = ((uint64_t (*)(void **, uint64_t))v13)(a1, a3);
      uint64_t v17 = ((uint64_t (*)(void **, uint64_t, void))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      int v18 = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v17);
      int v19 = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v16);
      v21[0] = v18;
      v21[1] = v19;
      uint64_t result = ((uint64_t (*)(void **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v21, 2);
    }
    unsigned int v20 = *(_DWORD *)(a4 + 8);
    if (v20 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a4 + 4 * v20) = result;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1CC75B860(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 240))(a1[1]);
  if (result)
  {
    if (a2[12] != -1)
    {
      uint64_t v18 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v18);
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v19) = result;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[14] != -1)
    {
      uint64_t v20 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v20);
      unsigned int v21 = *(_DWORD *)(a4 + 8);
      if (v21 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v21) = result;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[13] != -1)
    {
      uint64_t v22 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v22);
      unsigned int v23 = *(_DWORD *)(a4 + 8);
      if (v23 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v23) = result;
      ++*(_DWORD *)(a4 + 8);
    }
    return result;
  }
  if (a6 <= 8 && ((1 << a6) & 0x160) != 0)
  {
    uint64_t v24 = *(unsigned int *)(a5 + 8);
    if (v24)
    {
      uint64_t v25 = *(_DWORD **)a5;
      unsigned int v26 = *(_DWORD *)(a4 + 8);
      uint64_t v27 = 4 * v24;
      do
      {
        if (v26 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v26) = *v25;
        unsigned int v26 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v26;
        ++v25;
        v27 -= 4;
      }
      while (v27);
    }
    *(_DWORD *)(a5 + 8) = 0;
  }
  uint64_t v28 = a9;
  uint64_t v29 = *(unsigned int *)(a8 + 8);
  if (v29)
  {
    uint64_t v30 = *(_DWORD **)a8;
    unsigned int v31 = *(_DWORD *)(a4 + 8);
    uint64_t v32 = 4 * v29;
    do
    {
      if (v31 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v31) = *v30;
      unsigned int v31 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v31;
      ++v30;
      v32 -= 4;
    }
    while (v32);
  }
  *(_DWORD *)(a8 + 8) = 0;
  uint64_t v51 = 0;
  if (a2[20] != -1)
  {
    uint64_t v50 = a9;
    uint64_t v33 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
    uint64_t result = ((uint64_t (*)(void **, uint64_t, char *, void))(*a1)[18])(a1, v33, (char *)&v51 + 4, 0);
    int v34 = result;
    if (result)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v33);
      uint64_t v35 = result;
    }
    *(_DWORD *)(a7 + 8) = 0;
    if (a2[13] == -1)
    {
      uint64_t v38 = 0;
      int v37 = 1;
      goto LABEL_43;
    }
    unsigned int v49 = v35;
LABEL_34:
    uint64_t v36 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t *, void))(*a1)[18])(a1, v36, &v51, 0);
    int v37 = result;
    if (result)
    {
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v36);
      uint64_t v38 = result;
    }
    BOOL v39 = v34 == v37 || a2[20] == -1;
    uint64_t v35 = v49;
    if (!v39)
    {
      uint64_t v38 = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v36);
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[21])(a1, v33);
      uint64_t v35 = result;
      goto LABEL_48;
    }
LABEL_43:
    if (v34) {
      BOOL v40 = v37 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (!v40)
    {
      uint64_t result = ((uint64_t (*)(void **, void))(*a1)[8])(a1, (HIDWORD(v51) | (v51 << 16)));
LABEL_54:
      unsigned int v43 = *(_DWORD *)(a4 + 8);
      if (v43 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v43) = result;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v28 = v50;
      goto LABEL_56;
    }
LABEL_48:
    int v41 = a2[20];
    int v42 = a2[13];
    if (v41 == -1 || v42 != -1)
    {
      if (v41 != -1 || v42 == -1)
      {
        uint64_t v28 = v50;
        if (v41 != -1 && v42 != -1)
        {
          v52[0] = v38;
          v52[1] = v35;
          uint64_t result = ((uint64_t (*)(void **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v52, 2);
          unsigned int v48 = *(_DWORD *)(a4 + 8);
          if (v48 >= *(_DWORD *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v48) = result;
          ++*(_DWORD *)(a4 + 8);
          uint64_t v28 = v50;
        }
        goto LABEL_56;
      }
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[23])(a1, v38);
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*a1)[24])(a1, v35);
    }
    goto LABEL_54;
  }
  if (a2[13] != -1)
  {
    uint64_t v50 = a9;
    unsigned int v49 = 0;
    uint64_t v33 = 0;
    int v34 = 1;
    goto LABEL_34;
  }
LABEL_56:
  uint64_t v44 = *(unsigned int *)(v28 + 8);
  if (v44)
  {
    unint64_t v45 = *(_DWORD **)v28;
    unsigned int v46 = *(_DWORD *)(a4 + 8);
    uint64_t v47 = 4 * v44;
    do
    {
      if (v46 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v46) = *v45;
      unsigned int v46 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v46;
      ++v45;
      v47 -= 4;
    }
    while (v47);
  }
  *(_DWORD *)(v28 + 8) = 0;
  return result;
}

uint64_t llvm::GPUSDISel::getOperand(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return *(void *)(*(void *)(a2 + 32) + 40 * a4);
}

uint64_t llvm::GPUSDISel::getOpcode(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 24);
}

{
  return *(unsigned __int16 *)(a2 + 24);
}

uint64_t *llvm::GPUSDISel::GetStateSourceByteOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a3 + 24) != 11) {
    return (uint64_t *)*(int *)(a3 + 80);
  }
  uint64_t v3 = *(void *)(a3 + 80);
  uint64_t v4 = (uint64_t *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    uint64_t v4 = (uint64_t *)*v4;
  }
  return (uint64_t *)*v4;
}

uint64_t *llvm::GPUSDISel::GetBaseSourceByteOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 80);
  uint64_t v4 = (uint64_t *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    uint64_t v4 = (uint64_t *)*v4;
  }
  return (uint64_t *)*v4;
}

void llvm::GPUSDISel::GetInstrOps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, _OWORD *a11, _OWORD *a12, uint64_t a13, int a14, _OWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v26 = a18;
  uint64_t v27 = a9;
  v97[16] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    uint64_t v92 = a2;
    if (a10)
    {
      uint64_t v28 = 8 * a10;
      uint64_t v29 = a9;
      while (1)
      {
        LODWORD(v95) = *v29;
        uint64_t v30 = *(void *)(a21 + 24);
        if (!v30) {
          break;
        }
        uint64_t v32 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v30 + 48))(v30, &v95);
        unint64_t v33 = *(unsigned int *)(a20 + 8);
        if (v33 >= *(unsigned int *)(a20 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v34 = (uint64_t *)(*(void *)a20 + 16 * v33);
        *int v34 = v32;
        v34[1] = v31;
        ++*(_DWORD *)(a20 + 8);
        ++v29;
        v28 -= 8;
        if (!v28) {
          goto LABEL_9;
        }
      }
LABEL_101:
      sub_1CB920400();
    }
LABEL_9:
    uint64_t v26 = a18;
    a2 = v92;
    if (a18)
    {
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a3, a17, a18);
      unsigned int v37 = *(_DWORD *)(a20 + 8);
      if (v37 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v38 = (uint64_t *)(*(void *)a20 + 16 * v37);
      *uint64_t v38 = v36;
      v38[1] = v35;
      ++*(_DWORD *)(a20 + 8);
      a2 = v92;
    }
  }
  unsigned int v39 = *(_DWORD *)(a20 + 8);
  if (v39 >= *(_DWORD *)(a20 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a20 + 16 * v39) = *a5;
  unsigned int v40 = *(_DWORD *)(a20 + 8) + 1;
  *(_DWORD *)(a20 + 8) = v40;
  if (*(unsigned char *)(a6 + 16))
  {
    if (v40 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a20 + 16 * v40) = *(_OWORD *)a6;
    ++*(_DWORD *)(a20 + 8);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 208))(*(void *)(a1 + 8)) == 1)
  {
    unsigned int v41 = *(_DWORD *)(a20 + 8);
    if (v41 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a20 + 16 * v41) = *a11;
    ++*(_DWORD *)(a20 + 8);
  }
  if ((((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 232))(*(void *)(a1 + 8)) & 1) != 0
     || *(_DWORD *)(a2 + 92) == -1)
    && *(unsigned char *)(a7 + 16))
  {
    unsigned int v42 = *(_DWORD *)(a20 + 8);
    if (v42 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a20 + 16 * v42) = *(_OWORD *)a7;
    ++*(_DWORD *)(a20 + 8);
  }
  uint64_t v43 = v26;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 208))(*(void *)(a1 + 8)) == 3)
  {
    unsigned int v44 = *(_DWORD *)(a20 + 8);
    if (v44 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)a20 + 16 * v44) = *a11;
    ++*(_DWORD *)(a20 + 8);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8)))
    {
      LODWORD(v95) = 0;
      uint64_t v45 = *(void *)(a21 + 24);
      if (!v45) {
        goto LABEL_101;
      }
      uint64_t v47 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v45 + 48))(v45, &v95);
      unsigned int v48 = *(_DWORD *)(a20 + 8);
      if (v48 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v49 = (uint64_t *)(*(void *)a20 + 16 * v48);
      uint64_t *v49 = v47;
      v49[1] = v46;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (a13)
  {
    uint64_t v51 = 16 * a13;
    unsigned int v52 = *(_DWORD *)(a20 + 8);
    do
    {
      if (v52 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a20 + 16 * v52) = *a12;
      unsigned int v52 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v52;
      ++a12;
      v51 -= 16;
    }
    while (v51);
    if (a14 != 7
      && (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8))
      && (*(_DWORD *)(a2 + 92) == -1
       || (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 320))(*(void *)(a1 + 8))))
    {
      LODWORD(v95) = 0;
      uint64_t v53 = *(void *)(a21 + 24);
      if (!v53) {
        goto LABEL_101;
      }
      uint64_t v55 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v53 + 48))(v53, &v95);
      unsigned int v56 = *(_DWORD *)(a20 + 8);
      if (v56 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v57 = (uint64_t *)(*(void *)a20 + 16 * v56);
      uint64_t *v57 = v55;
      v57[1] = v54;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (a16)
  {
    unsigned int v59 = *(_DWORD *)(a20 + 8);
    uint64_t v60 = 16 * a16;
    do
    {
      if (v59 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a20 + 16 * v59) = *a15;
      unsigned int v59 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v59;
      ++a15;
      v60 -= 16;
    }
    while (v60);
    int v61 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    if (v61 && v43 == 0)
    {
      LODWORD(v95) = 0;
      uint64_t v63 = *(void *)(a21 + 24);
      if (!v63) {
        goto LABEL_101;
      }
      uint64_t v65 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v63 + 48))(v63, &v95);
      unsigned int v66 = *(_DWORD *)(a20 + 8);
      if (v66 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v67 = (uint64_t *)(*(void *)a20 + 16 * v66);
      *uint64_t v67 = v65;
      v67[1] = v64;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) & 1) == 0)
  {
    if (v43)
    {
      uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a3, a17, v43);
      unsigned int v70 = *(_DWORD *)(a20 + 8);
      if (v70 >= *(_DWORD *)(a20 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v71 = (uint64_t *)(*(void *)a20 + 16 * v70);
      *unint64_t v71 = v69;
      v71[1] = v68;
      ++*(_DWORD *)(a20 + 8);
    }
    if (a10)
    {
      uint64_t v72 = 8 * a10;
      do
      {
        LODWORD(v95) = *v27;
        uint64_t v73 = *(void *)(a21 + 24);
        if (!v73) {
          goto LABEL_101;
        }
        uint64_t v75 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v73 + 48))(v73, &v95);
        unint64_t v76 = *(unsigned int *)(a20 + 8);
        if (v76 >= *(unsigned int *)(a20 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v77 = (uint64_t *)(*(void *)a20 + 16 * v76);
        *uint64_t v77 = v75;
        v77[1] = v74;
        ++*(_DWORD *)(a20 + 8);
        ++v27;
        v72 -= 8;
      }
      while (v72);
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1
    || (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 336))(*(void *)(a1 + 8)))
  {
    LODWORD(v95) = 0;
    uint64_t v78 = *(void *)(a21 + 24);
    if (!v78) {
      goto LABEL_101;
    }
    uint64_t v80 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v78 + 48))(v78, &v95);
    unsigned int v81 = *(_DWORD *)(a20 + 8);
    if (v81 >= *(_DWORD *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v82 = (uint64_t *)(*(void *)a20 + 16 * v81);
    *uint64_t v82 = v80;
    v82[1] = v79;
    ++*(_DWORD *)(a20 + 8);
  }
  int v95 = v97;
  uint64_t v96 = 0x800000000;
  uint64_t v83 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  if (v83) {
    llvm::GPUSDISel::AddDefaultPredicates(v83, (uint64_t)&v95);
  }
  uint64_t v84 = v95;
  if (v96)
  {
    uint64_t v85 = 16 * v96;
    unint64_t v86 = (char *)v95 + 4;
    while (*v86)
    {
      if (*v86 == 1)
      {
        int v94 = 0;
        uint64_t v87 = *(void *)(a21 + 24);
        if (!v87) {
          goto LABEL_101;
        }
        uint64_t v88 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v87 + 48))(v87, &v94);
        goto LABEL_82;
      }
LABEL_84:
      v86 += 4;
      v85 -= 16;
      if (!v85)
      {
        uint64_t v84 = v95;
        goto LABEL_87;
      }
    }
    uint64_t v88 = sub_1CD7EEB94(*(void *)(a1 + 40), *(v86 - 1), (llvm *)5, 0);
LABEL_82:
    unint64_t v90 = *(unsigned int *)(a20 + 8);
    if (v90 >= *(unsigned int *)(a20 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v91 = (uint64_t *)(*(void *)a20 + 16 * v90);
    *uint64_t v91 = v88;
    v91[1] = v89;
    ++*(_DWORD *)(a20 + 8);
    goto LABEL_84;
  }
LABEL_87:
  if (v84 != v97) {
    free(v84);
  }
}

void llvm::GPUSDISel::ReplaceInstructionUses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  v160[8] = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 **)(a3 + 64);
  uint64_t v152 = v10;
  uint64_t v146 = a3;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)&v152, v10, 2);
    a3 = v146;
  }
  int v153 = *(_DWORD *)(a3 + 60);
  if (*(_DWORD *)(a2 + 12) == -1) {
    goto LABEL_4;
  }
  sub_1CD800DA0(*(void *)(a1 + 40), a3, 1, a4, 1);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 376))())
  {
    if (a6 == -1)
    {
      unsigned int v19 = -1;
    }
    else if (a6 <= 7)
    {
      if (a6 <= 3)
      {
        if (a6 <= 1) {
          unsigned int v19 = 1;
        }
        else {
          unsigned int v19 = 2;
        }
      }
      else
      {
        unsigned int v19 = 3;
      }
    }
    else
    {
      unsigned int v19 = 4;
    }
  }
  else
  {
    v18.i32[0] = a6;
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    unsigned int v19 = v20.i32[0];
  }
  uint64_t v23 = *(unsigned int *)(a2 + 12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2, v146))
  {
    a6 = (1 << *(_DWORD *)(a2 + 12)) | a6;
    ++v19;
    uint64_t v23 = (v23 + 1);
  }
  if (v19 != v23 && *(unsigned char *)(a2 + 62) == 0)
  {
    int v34 = *(unsigned __int8 *)(a2 + 8);
    unint64_t v158 = v160;
    uint64_t v159 = 0x400000000;
    uint64_t v35 = 9;
    if (v34) {
      uint64_t v35 = 10;
    }
    int v148 = (llvm *)v35;
    uint64_t v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8));
    int v38 = v36;
    if (v23 <= v19) {
      unsigned int v39 = v19;
    }
    else {
      unsigned int v39 = v23;
    }
    uint64_t v40 = *(void *)(v146 + 48);
    if (!v40)
    {
      if (v34) {
        int v41 = HIDWORD(v36);
      }
      else {
        int v41 = v36;
      }
      if (v19 == 1) {
        goto LABEL_151;
      }
      goto LABEL_97;
    }
    uint64_t v50 = *(void *)(v146 + 48);
    while (*(__int16 *)(*(void *)(v50 + 16) + 24) == -9)
    {
      uint64_t v50 = *(void *)(v50 + 32);
      if (!v50)
      {
        if (v34) {
          int v41 = HIDWORD(v36);
        }
        else {
          int v41 = v36;
        }
        if (v19 != 1)
        {
LABEL_97:
          uint64_t v61 = a1;
          uint64_t v62 = 0;
          v37.n128_u64[0] = 0x200000000;
          do
          {
            uint64_t v63 = &(&v155)[v62];
            *uint64_t v63 = (uint64_t *)&v157[v62 * 8];
            v63[1] = (uint64_t *)0x200000000;
            v62 += 4;
          }
          while (v62 != 20);
          for (; v40; uint64_t v40 = *(void *)(v40 + 32))
          {
            uint64_t v97 = *(void *)(v40 + 16);
            uint64_t v98 = *(void *)(*(void *)(*(void *)(v97 + 32) + 40) + 80);
            uint64_t v99 = (void *)(v98 + 24);
            if (*(_DWORD *)(v98 + 32) >= 0x41u) {
              uint64_t v99 = (void *)*v99;
            }
            uint64_t v100 = &(&v155)[4 * (*(_DWORD *)v99 - v41)];
            unint64_t v101 = *((unsigned int *)v100 + 2);
            if (v101 >= *((unsigned int *)v100 + 3)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            (*v100)[v101] = v97;
            ++*((_DWORD *)v100 + 2);
          }
          int v143 = v41;
          if (v23)
          {
            uint64_t v64 = 0;
            int v65 = 0;
            uint64_t v144 = v23;
            while (1)
            {
              uint64_t v66 = a6;
              int v67 = (1 << v64) & a6;
              int v68 = (*(uint64_t (**)(void, __n128))(**(void **)(v61 + 8) + 376))(*(void *)(v61 + 8), v37);
              uint64_t v69 = &(&v155)[4 * v64];
              uint64_t v70 = *((unsigned int *)v69 + 2);
              if (v70) {
                break;
              }
LABEL_128:
              if (v67) {
                ++v65;
              }
              ++v64;
              a6 = v66;
              if (v64 == v144) {
                goto LABEL_131;
              }
            }
            unint64_t v71 = *v69;
            if (v68) {
              int v72 = v64;
            }
            else {
              int v72 = v65;
            }
            int v73 = v72 + v143;
            uint64_t v74 = 8 * v70;
            while (1)
            {
              uint64_t v75 = *v71;
              uint64_t v76 = *(void *)(v61 + 40);
              if (v67)
              {
                uint64_t v77 = v146;
                uint64_t v78 = *(unsigned __int8 **)(v146 + 64);
                uint64_t v150 = (uint64_t **)v78;
                if (v78)
                {
                  llvm::MetadataTracking::track((uint64_t)&v150, v78, 2);
                  uint64_t v77 = v146;
                }
                int v151 = *(_DWORD *)(v77 + 60);
                uint64_t v79 = sub_1CD8015C0(v76, v73, (const llvm::APInt *)&v150, v148, 0, a4, 0);
                sub_1CD800DA0(v76, v75, 0, (uint64_t)v79, v80);
                if (!v150) {
                  goto LABEL_118;
                }
                int v81 = *(unsigned __int8 *)v150;
                if ((v81 - 4) > 0x1E)
                {
                  if ((v81 - 3) >= 0xFFFFFFFE) {
                    uint64_t v85 = v150;
                  }
                  else {
                    uint64_t v85 = 0;
                  }
                  if ((v81 - 3) < 0xFFFFFFFE)
                  {
                    if (v81 == 3) {
                      v150[1] = 0;
                    }
                    goto LABEL_118;
                  }
                  unint64_t v83 = (unint64_t)(v85 + 1);
                }
                else
                {
                  if ((*((unsigned char *)v150 + 1) & 0x7F) != 2 && !*((_DWORD *)v150 + 3)) {
                    goto LABEL_118;
                  }
                  unint64_t v82 = (unint64_t)v150[2];
                  if ((v82 & 4) == 0) {
                    goto LABEL_118;
                  }
                  unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
                  if (!v83) {
                    goto LABEL_118;
                  }
                }
                uint64_t v154 = &v150;
                sub_1CC5FA668(v83 + 16, &v154);
              }
              else
              {
                uint64_t v84 = sub_1CD800FDC(*(void *)(v61 + 40), 10, (uint64_t)&v152, v148, 0);
                sub_1CD800DA0(v76, v75, 0, (uint64_t)v84, 0);
              }
LABEL_118:
              ++v71;
              v74 -= 8;
              if (!v74) {
                goto LABEL_128;
              }
            }
          }
LABEL_131:
          for (uint64_t i = 0; i != -160; i -= 32)
          {
            uint64_t v87 = *(unsigned char **)&v157[i + 112];
            if (&v157[i + 128] != v87) {
              free(v87);
            }
          }
          a1 = v61;
LABEL_151:
          sub_1CD7EA438(*(void **)(a1 + 40), v146);
          uint64_t v96 = v158;
          if (v158 == v160) {
            goto LABEL_7;
          }
          goto LABEL_152;
        }
        while (2)
        {
          uint64_t v51 = *(void *)(v40 + 16);
          if (v34 || (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8)))
          {
            sub_1CD800DA0(*(void *)(a1 + 40), v51, 0, a4, 0);
            goto LABEL_78;
          }
          uint64_t v52 = *(void *)(a1 + 40);
          uint64_t v53 = v146;
          uint64_t v54 = *(uint64_t **)(v146 + 64);
          uint64_t v155 = v54;
          if (v54)
          {
            llvm::MetadataTracking::track((uint64_t)&v155, (unsigned __int8 *)v54, 2);
            uint64_t v53 = v146;
          }
          LODWORD(v156) = *(_DWORD *)(v53 + 60);
          uint64_t v55 = sub_1CD8015C0(v52, v38, (const llvm::APInt *)&v155, (llvm *)9, 0, a4, 0);
          sub_1CD800DA0(v52, v51, 0, (uint64_t)v55, v56);
          if (v155)
          {
            int v57 = *(unsigned __int8 *)v155;
            if ((v57 - 4) > 0x1E)
            {
              if ((v57 - 3) >= 0xFFFFFFFE) {
                uint64_t v60 = v155;
              }
              else {
                uint64_t v60 = 0;
              }
              if ((v57 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v59 = (unint64_t)(v60 + 1);
                goto LABEL_94;
              }
              if (v57 == 3) {
                v155[1] = 0;
              }
            }
            else if ((*((unsigned char *)v155 + 1) & 0x7F) == 2 || *((_DWORD *)v155 + 3))
            {
              uint64_t v58 = v155[2];
              if ((v58 & 4) != 0)
              {
                unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
                if (v59)
                {
LABEL_94:
                  uint64_t v150 = &v155;
                  sub_1CC5FA668(v59 + 16, &v150);
                }
              }
            }
          }
LABEL_78:
          uint64_t v40 = *(void *)(v40 + 32);
          if (!v40) {
            goto LABEL_151;
          }
          continue;
        }
      }
    }
    uint64_t v88 = (*(uint64_t (**)(void, uint64_t, BOOL))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), v23, v34 == 0);
    unint64_t v90 = sub_1CD7EBF14(*(void *)(a1 + 40), *(unsigned __int16 *)(*(void *)v88 + 24), (const llvm::APInt *)&v152, (llvm *)5, 0, 1, 0);
    if (v159 >= HIDWORD(v159)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v91 = &v158[2 * v159];
    *uint64_t v91 = (uint64_t)v90;
    v91[1] = v89;
    LODWORD(v159) = v159 + 1;
    uint64_t v145 = v39 << v34;
    int v142 = 1;
    if (v19 <= 1 && !v34) {
      int v142 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8)) ^ 1;
    }
    BOOL v93 = v23 < 2 && v34 == 0;
    BOOL v141 = v93;
    if (!v145)
    {
      int v94 = 0;
      LODWORD(v95) = 0;
LABEL_148:
      if (v159 >= 2)
      {
        int v94 = sub_1CD801450(*(void *)(a1 + 40), 18, (uint64_t)&v152, (llvm *)0xAE, 0, v158, v159);
        LODWORD(v95) = 0;
      }
      sub_1CD800DA0(*(void *)(a1 + 40), v146, 0, (uint64_t)v94, v95);
      goto LABEL_151;
    }
    uint64_t v102 = 0;
    int v149 = 0;
    LODWORD(v95) = 0;
    int v94 = 0;
    while (((a6 >> (v102 / (v34 + 1))) & 1) == 0)
    {
      unsigned int v103 = sub_1CD800FDC(*(void *)(a1 + 40), 10, (uint64_t)&v152, (llvm *)4, 0);
      if (v159 >= (unint64_t)HIDWORD(v159)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v104 = &v158[2 * v159];
      *int v104 = (uint64_t)v103;
      v104[1] = 0;
      LODWORD(v159) = v159 + 1;
      uint64_t v106 = sub_1CD7EBF14(*(void *)(a1 + 40), (v38 + v102), (const llvm::APInt *)&v152, (llvm *)5, 0, 1, 0);
      if (v159 >= (unint64_t)HIDWORD(v159)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v107 = &v158[2 * v159];
      *uint64_t v107 = (uint64_t)v106;
      v107[1] = v105;
      LODWORD(v159) = v159 + 1;
LABEL_177:
      if (v145 == ++v102) {
        goto LABEL_148;
      }
    }
    if (!v142)
    {
      uint64_t v95 = 0;
      int v94 = (uint64_t *)a4;
      goto LABEL_173;
    }
    uint64_t v108 = *(void *)(a1 + 40);
    uint64_t v109 = v146;
    unsigned int v110 = *(uint64_t **)(v146 + 64);
    uint64_t v155 = v110;
    if (v110)
    {
      llvm::MetadataTracking::track((uint64_t)&v155, (unsigned __int8 *)v110, 2);
      uint64_t v109 = v146;
    }
    LODWORD(v156) = *(_DWORD *)(v109 + 60);
    int v94 = sub_1CD8015C0(v108, v149 + v38, (const llvm::APInt *)&v155, (llvm *)4, 0, a4, 0);
    LODWORD(v95) = v111;
    if (v155)
    {
      int v112 = *(unsigned __int8 *)v155;
      if ((v112 - 4) > 0x1E)
      {
        if ((v112 - 3) >= 0xFFFFFFFE) {
          int v117 = v155;
        }
        else {
          int v117 = 0;
        }
        if ((v112 - 3) < 0xFFFFFFFE)
        {
          if (v112 == 3) {
            v155[1] = 0;
          }
          goto LABEL_171;
        }
        unint64_t v118 = (unint64_t)(v117 + 1);
      }
      else
      {
        if ((*((unsigned char *)v155 + 1) & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
          goto LABEL_171;
        }
        uint64_t v119 = v155[2];
        if ((v119 & 4) == 0) {
          goto LABEL_171;
        }
        unint64_t v118 = v119 & 0xFFFFFFFFFFFFFFF8;
        if (!v118) {
          goto LABEL_171;
        }
      }
      uint64_t v150 = &v155;
      sub_1CC5FA668(v118 + 16, &v150);
    }
LABEL_171:
    uint64_t v95 = v95;
LABEL_173:
    if (v141) {
      goto LABEL_148;
    }
    if (v159 >= (unint64_t)HIDWORD(v159)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v113 = &v158[2 * v159];
    *uint64_t v113 = (uint64_t)v94;
    v113[1] = v95;
    LODWORD(v159) = v159 + 1;
    int v115 = sub_1CD7EBF14(*(void *)(a1 + 40), (v38 + v102), (const llvm::APInt *)&v152, (llvm *)5, 0, 1, 0);
    if (v159 >= (unint64_t)HIDWORD(v159)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v116 = &v158[2 * v159];
    *int v116 = (uint64_t)v115;
    v116[1] = v114;
    LODWORD(v159) = v159 + 1;
    ++v149;
    goto LABEL_177;
  }
  if (a5 == -1 || !(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8)))
  {
    if (*(unsigned char *)(a2 + 8)
      || *(_DWORD *)(a2 + 12) != 1
      || ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8)) & 1) != 0)
    {
LABEL_4:
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v13 = v146;
      uint64_t v12 = a4;
      uint64_t v14 = v146;
      int v15 = 0;
LABEL_5:
      sub_1CD800DA0(v11, v14, 0, v12, v15);
      uint64_t v16 = *(void **)(a1 + 40);
LABEL_6:
      sub_1CD7EA438(v16, v13);
      goto LABEL_7;
    }
    int v42 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8));
    uint64_t v43 = *(void *)(a1 + 40);
    uint64_t v44 = v146;
    uint64_t v45 = *(uint64_t **)(v146 + 64);
    uint64_t v155 = v45;
    if (v45)
    {
      llvm::MetadataTracking::track((uint64_t)&v155, (unsigned __int8 *)v45, 2);
      uint64_t v44 = v146;
    }
    LODWORD(v156) = *(_DWORD *)(v44 + 60);
    uint64_t v46 = sub_1CD8015C0(v43, v42, (const llvm::APInt *)&v155, (llvm *)9, 0, a4, 0);
    int v48 = v47;
    if (v155)
    {
      int v49 = *(unsigned __int8 *)v155;
      if ((v49 - 4) > 0x1E)
      {
        if ((v49 - 3) >= 0xFFFFFFFE) {
          unint64_t v129 = v155;
        }
        else {
          unint64_t v129 = 0;
        }
        if ((v49 - 3) < 0xFFFFFFFE)
        {
          if (v49 == 3) {
            v155[1] = 0;
          }
          goto LABEL_67;
        }
        unint64_t v130 = (unint64_t)(v129 + 1);
      }
      else
      {
        if ((*((unsigned char *)v155 + 1) & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
          goto LABEL_67;
        }
        uint64_t v140 = v155[2];
        if ((v140 & 4) == 0) {
          goto LABEL_67;
        }
        unint64_t v130 = v140 & 0xFFFFFFFFFFFFFFF8;
        if (!v130) {
          goto LABEL_67;
        }
      }
      unint64_t v158 = (uint64_t *)&v155;
      sub_1CC5FA668(v130 + 16, &v158);
    }
LABEL_67:
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v13 = v146;
    uint64_t v14 = v146;
    uint64_t v12 = (uint64_t)v46;
    int v15 = v48;
    goto LABEL_5;
  }
  unint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8));
  int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  uint64_t v28 = a1;
  int v29 = *(unsigned __int8 *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12) == 1)
  {
    if (*(unsigned char *)(a2 + 8)) {
      int v30 = HIDWORD(v25);
    }
    else {
      int v30 = v25;
    }
    if (*(unsigned char *)(a2 + 8)) {
      uint64_t v31 = 10;
    }
    else {
      uint64_t v31 = 9;
    }
    uint64_t v32 = sub_1CD8015C0(*(void *)(v28 + 40), v30 + a5, (const llvm::APInt *)&v152, (llvm *)v31, 0, a4, 0);
    uint64_t v13 = v146;
    sub_1CD800DA0(*(void *)(v28 + 40), v146, 0, (uint64_t)v32, v33);
    uint64_t v16 = *(void **)(v28 + 40);
    goto LABEL_6;
  }
  uint64_t v155 = (uint64_t *)v157;
  uint64_t v156 = 0x400000000;
  uint64_t v120 = (*(uint64_t (**)(void))(**(void **)(v28 + 8) + 256))(*(void *)(v28 + 8));
  uint64_t v121 = v28;
  uint64_t v123 = sub_1CD7EBF14(*(void *)(v28 + 40), *(unsigned __int16 *)(*(void *)v120 + 24), (const llvm::APInt *)&v152, (llvm *)5, 0, 1, 0);
  if (v156 >= HIDWORD(v156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v124 = &v155[2 * v156];
  *uint64_t v124 = (uint64_t)v123;
  v124[1] = v122;
  unsigned int v125 = v156 + 1;
  LODWORD(v156) = v156 + 1;
  if (v29)
  {
    uint64_t v126 = &xmmword_1CD923660;
    uint64_t v127 = 10;
    int v26 = v27;
    uint64_t v128 = v121;
    switch(a5)
    {
      case 1:
        uint64_t v126 = (long long *)&unk_1CFB1D090;
        goto LABEL_211;
      case 2:
        uint64_t v126 = (long long *)&unk_1CFB1D0A0;
        goto LABEL_211;
      case 3:
        uint64_t v126 = (long long *)&unk_1CFB1D0B0;
LABEL_211:
        uint64_t v127 = 10;
        int v26 = v27;
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v126 = (long long *)&unk_1CFB1D070;
    uint64_t v127 = 9;
    uint64_t v128 = v121;
    switch(a5)
    {
      case 1:
        uint64_t v126 = (long long *)&unk_1CFB1D090;
        goto LABEL_208;
      case 2:
        uint64_t v126 = (long long *)&unk_1CFB1D080;
        goto LABEL_208;
      case 3:
        uint64_t v126 = (long long *)&unk_1CFB1D0B0;
LABEL_208:
        uint64_t v127 = 9;
        break;
      default:
        break;
    }
  }
  if (*(_DWORD *)(a2 + 12))
  {
    unsigned int v132 = 0;
    do
    {
      uint64_t v134 = sub_1CD8015C0(*(void *)(v128 + 40), *((_DWORD *)v126 + v132) + v26, (const llvm::APInt *)&v152, (llvm *)v127, 0, a4, 0);
      if (v156 >= (unint64_t)HIDWORD(v156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v135 = &v155[2 * v156];
      uint64_t *v135 = (uint64_t)v134;
      v135[1] = v133;
      LODWORD(v156) = v156 + 1;
      uint64_t v137 = sub_1CD7EBF14(*(void *)(v128 + 40), v26 + v132, (const llvm::APInt *)&v152, (llvm *)5, 0, 1, 0);
      if (v156 >= (unint64_t)HIDWORD(v156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v138 = &v155[2 * v156];
      *uint64_t v138 = (uint64_t)v137;
      v138[1] = v136;
      unsigned int v125 = v156 + 1;
      LODWORD(v156) = v156 + 1;
      ++v132;
    }
    while (v132 != *(_DWORD *)(a2 + 12));
  }
  unsigned int v131 = sub_1CD801450(*(void *)(v128 + 40), 18, (uint64_t)&v152, (llvm *)0xAE, 0, v155, v125);
  sub_1CD800DA0(*(void *)(v128 + 40), v146, 0, (uint64_t)v131, 0);
  sub_1CD7EA438(*(void **)(v128 + 40), v146);
  uint64_t v96 = v155;
  if (v155 != (uint64_t *)v157) {
LABEL_152:
  }
    free(v96);
LABEL_7:
  if (v152)
  {
    int v17 = *v152;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        unsigned int v21 = v152;
      }
      else {
        unsigned int v21 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_21:
        uint64_t v155 = (uint64_t *)&v152;
        sub_1CC5FA668(v22 + 16, &v155);
        return;
      }
      if (v17 == 3) {
        *((void *)v152 + 1) = 0;
      }
    }
    else if ((v152[1] & 0x7F) == 2 || *((_DWORD *)v152 + 3))
    {
      uint64_t v139 = *((void *)v152 + 2);
      if ((v139 & 4) != 0)
      {
        unint64_t v22 = v139 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_21;
        }
      }
    }
  }
}

uint64_t sub_1CC75DB90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  int v10 = (void **)result;
  v48[65] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(unsigned char *)(a2 + 61)) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = *(unsigned char *)(a2 + 60) == 0;
    }
    if (v11 && *(_DWORD *)(a2 + 48) == -1)
    {
      unsigned int v13 = *(_DWORD *)(a2 + 4);
      if (!v13)
      {
LABEL_22:
        int v22 = 8;
LABEL_23:
        *a5 = v22;
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 224))(*(void *)(result + 8), a2);
      unsigned int v13 = result >> 1;
      if (!(result >> 1)) {
        goto LABEL_22;
      }
    }
    int v19 = 0;
    do
    {
      uint64_t v20 = ((uint64_t (*)(void **, uint64_t, void))(*v10)[2])(v10, a4, (v19 + *(_DWORD *)(a2 + 72)));
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v20, v21, a6, 0xFFFFFFFFLL);
      ++v19;
    }
    while (v13 != v19);
    goto LABEL_22;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 168))(*(void *)(result + 8));
  if (*(_DWORD *)(a2 + 56) == -1) {
    int v14 = 0;
  }
  else {
    int v14 = result;
  }
  if (v14 == 1)
  {
    uint64_t v16 = ((uint64_t (*)(void **, uint64_t))(*v10)[2])(v10, a4);
    v48[0] = 1;
    for (uint64_t i = 1; i != 65; ++i)
      LODWORD(v48[i]) = 0x7FFFFFFF;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t, void *, void))(*v10)[27])(v10, v16, v15, v48, 0);
    int v18 = result;
    if ((v48[0] & 1) == 0) {
      uint64_t result = MEMORY[0x1D25D9CD0](v48[1], 4);
    }
  }
  else
  {
    int v18 = 1;
  }
  unsigned int v23 = *(_DWORD *)(a2 + 76);
  unsigned int v24 = *(_DWORD *)(a2 + 68);
  if (v23 != -1 || v24 != -1)
  {
LABEL_29:
    if (v24 == -1) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = v24;
    }
    uint64_t v27 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v26);
    uint64_t v29 = v28;
    if (*(_DWORD *)(a2 + 92) != -1 && (*(unsigned int (**)(void *))(*v10[1] + 328))(v10[1]))
    {
      LODWORD(v48[0]) = -1;
      unsigned __int8 v30 = ((uint64_t (*)(void **, uint64_t, uint64_t, void *, void))(*v10)[18])(v10, v27, v29, v48, 0);
      if ((v30 & (LODWORD(v48[0]) < 0xFF)) != 0) {
        int v31 = 7;
      }
      else {
        int v31 = 6;
      }
      *a5 = v31;
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[21])(v10, v27, v29);
      goto LABEL_81;
    }
    if ((((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[30])(v10, v27, v29) & 1) != 0
      || ((unsigned int (*)(void **, uint64_t, uint64_t))(*v10)[28])(v10, v27, v29))
    {
      if ((*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1])) {
        goto LABEL_49;
      }
    }
    else if ((((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[31])(v10, v27, v29) & 1) == 0 {
           && !((unsigned int (*)(void **, uint64_t, uint64_t))(*v10)[29])(v10, v27, v29)
    }
           || (*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_49:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const llvm::Twine *)1);
    }
    LODWORD(v48[0]) = -1;
    char v47 = 0;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t, void *, char *))(*v10)[18])(v10, v27, v29, v48, &v47);
    int v36 = result ^ 1;
    if (LODWORD(v48[0])) {
      int v36 = 1;
    }
    if (v24 == -1) {
      int v37 = v14;
    }
    else {
      int v37 = 1;
    }
    int v38 = v36 | v37;
    if (((v36 | v37) & v18) != 1) {
      goto LABEL_73;
    }
    if (result)
    {
      uint64_t result = sub_1CB8816A4((uint64_t)v10, LODWORD(v48[0]));
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[22])(v10, v27, v29);
      if (result == -1)
      {
LABEL_73:
        if (v38)
        {
          uint64_t result = ((uint64_t (*)(void **, uint64_t, void))(*v10)[21])(v10, v27, v29);
          unsigned int v43 = *(_DWORD *)(a6 + 8);
          if (v43 >= *(_DWORD *)(a6 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v44 = (uint64_t *)(*(void *)a6 + 16 * v43);
          *uint64_t v44 = result;
          v44[1] = v42;
          ++*(_DWORD *)(a6 + 8);
          if (v24 == -1) {
            int v22 = 5;
          }
          else {
            int v22 = 6;
          }
          goto LABEL_23;
        }
        goto LABEL_77;
      }
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v10[1] + 56))(v10[1], result);
    }
    if (result != -1)
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[20])(v10, result);
      unsigned int v40 = *(_DWORD *)(a6 + 8);
      if (v40 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v41 = (uint64_t *)(*(void *)a6 + 16 * v40);
      uint64_t *v41 = result;
      v41[1] = v39;
      ++*(_DWORD *)(a6 + 8);
      if (v24 == -1) {
        int v22 = 1;
      }
      else {
        int v22 = 2;
      }
      goto LABEL_23;
    }
    goto LABEL_73;
  }
  if (*(unsigned char *)(a2 + 62))
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v10[1] + 384))(v10[1]);
    if (((v14 | result ^ 1) & 1) == 0)
    {
      uint64_t v33 = sub_1CB8816A4((uint64_t)v10, 0);
      int v34 = 2;
LABEL_51:
      *a5 = v34;
      uint64_t result = ((uint64_t (*)(void **, uint64_t))(*v10)[20])(v10, v33);
      goto LABEL_81;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == -1
      || (uint64_t result = (*(uint64_t (**)(void *))(*v10[1] + 328))(v10[1]), (result & 1) == 0))
    {
LABEL_77:
      *a5 = 0;
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || !(*(unsigned int (**)(void *))(*v10[1] + 328))(v10[1]))
  {
    if (!v14)
    {
      unsigned int v24 = *(_DWORD *)(a2 + 68);
      unsigned int v23 = *(_DWORD *)(a2 + 76);
      goto LABEL_29;
    }
    if (!v18 || (uint64_t v35 = sub_1CB8816A4((uint64_t)v10, 0), v35 == -1))
    {
      *a5 = 5;
      uint64_t result = ((uint64_t (*)(void **, void))(*v10)[8])(v10, 0);
      goto LABEL_81;
    }
    uint64_t v33 = v35;
    int v34 = 1;
    goto LABEL_51;
  }
  *a5 = 7;
  uint64_t result = ((uint64_t (*)(void **, void))(*v10)[9])(v10, 0);
LABEL_81:
  unsigned int v45 = *(_DWORD *)(a6 + 8);
  if (v45 >= *(_DWORD *)(a6 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v46 = (uint64_t *)(*(void *)a6 + 16 * v45);
  *uint64_t v46 = result;
  v46[1] = v32;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

uint64_t sub_1CC75E45C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 64);
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1) {
    int v10 = 1;
  }
  else {
    int v10 = result;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || v11 != -1)
  {
    unsigned int v13 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[2];
    if (v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if (v11 == -1) {
        uint64_t v11 = *(unsigned int *)(a2 + 64);
      }
      uint64_t v15 = v13(a1, a3, v11);
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v15, v16);
    }
    else
    {
      uint64_t v17 = ((uint64_t (*)(void **, uint64_t))v13)(a1, a3);
      uint64_t v19 = v18;
      uint64_t v20 = ((uint64_t (*)(void **, uint64_t, void))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      uint64_t v22 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v20, v21);
      int v24 = v23;
      uint64_t v25 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v17, v19);
      uint64_t v30 = v22;
      int v31 = v24;
      uint64_t v32 = v25;
      int v33 = v26;
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t *, uint64_t))(*a1)[12])(a1, a3, &v30, 2);
    }
    unsigned int v28 = *(_DWORD *)(a4 + 8);
    if (v28 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v29 = (uint64_t *)(*(void *)a4 + 16 * v28);
    *uint64_t v29 = result;
    v29[1] = v27;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1CC75E6E0(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 240))(a1[1]);
  if (result)
  {
    if (a2[12] != -1)
    {
      uint64_t v18 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v18, v19);
      unsigned int v21 = *(_DWORD *)(a4 + 8);
      if (v21 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v22 = (uint64_t *)(*(void *)a4 + 16 * v21);
      uint64_t *v22 = result;
      v22[1] = v20;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[14] != -1)
    {
      uint64_t v23 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v23, v24);
      unsigned int v26 = *(_DWORD *)(a4 + 8);
      if (v26 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v27 = (uint64_t *)(*(void *)a4 + 16 * v26);
      uint64_t *v27 = result;
      v27[1] = v25;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[13] != -1)
    {
      uint64_t v28 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v28, v29);
      unsigned int v31 = *(_DWORD *)(a4 + 8);
      if (v31 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v32 = (uint64_t *)(*(void *)a4 + 16 * v31);
      uint64_t *v32 = result;
      v32[1] = v30;
      ++*(_DWORD *)(a4 + 8);
    }
    return result;
  }
  if (a6 <= 8 && ((1 << a6) & 0x160) != 0)
  {
    uint64_t v33 = *(unsigned int *)(a5 + 8);
    if (v33)
    {
      uint64_t v34 = *(_OWORD **)a5;
      unsigned int v35 = *(_DWORD *)(a4 + 8);
      uint64_t v36 = 16 * v33;
      do
      {
        if (v35 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_OWORD *)(*(void *)a4 + 16 * v35) = *v34;
        unsigned int v35 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v35;
        ++v34;
        v36 -= 16;
      }
      while (v36);
    }
    *(_DWORD *)(a5 + 8) = 0;
  }
  uint64_t v37 = a9;
  uint64_t v38 = *(unsigned int *)(a8 + 8);
  if (v38)
  {
    uint64_t v39 = *(_OWORD **)a8;
    unsigned int v40 = *(_DWORD *)(a4 + 8);
    uint64_t v41 = 16 * v38;
    do
    {
      if (v40 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a4 + 16 * v40) = *v39;
      unsigned int v40 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v40;
      ++v39;
      v41 -= 16;
    }
    while (v41);
  }
  *(_DWORD *)(a8 + 8) = 0;
  uint64_t v76 = 0;
  if (a2[20] == -1)
  {
    if (a2[13] == -1) {
      goto LABEL_57;
    }
    uint64_t v74 = a9;
    uint64_t v75 = a3;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int v45 = 1;
  }
  else
  {
    uint64_t v75 = a3;
    uint64_t v42 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, a3);
    uint64_t v44 = v43;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, void, char *, void))(*a1)[18])(a1, v42, v43, (char *)&v76 + 4, 0);
    int v45 = result;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    if ((result & 1) == 0)
    {
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v42, v44);
      uint64_t v46 = result;
      uint64_t v47 = v48;
    }
    uint64_t v74 = a9;
    *(_DWORD *)(a7 + 8) = 0;
    if (a2[13] == -1)
    {
      uint64_t v54 = 0;
      uint64_t v53 = 0;
      int v52 = 1;
      goto LABEL_41;
    }
    uint64_t v70 = v44;
    uint64_t v71 = v42;
    uint64_t v72 = v47;
    uint64_t v73 = v46;
  }
  uint64_t v49 = ((uint64_t (*)(void **, uint64_t))(*a1)[2])(a1, v75);
  uint64_t v51 = v50;
  uint64_t result = ((uint64_t (*)(void **, uint64_t, void, uint64_t *, void))(*a1)[18])(a1, v49, v50, &v76, 0);
  int v52 = result;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  if ((result & 1) == 0)
  {
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v49, v51);
    uint64_t v53 = result;
    uint64_t v54 = v55;
  }
  BOOL v56 = v45 == v52 || a2[20] == -1;
  uint64_t v47 = v72;
  uint64_t v46 = v73;
  if (v56)
  {
LABEL_41:
    if (v45) {
      BOOL v60 = v52 == 0;
    }
    else {
      BOOL v60 = 1;
    }
    uint64_t v37 = v74;
    uint64_t v59 = v75;
    if (!v60)
    {
      uint64_t result = ((uint64_t (*)(void **, void))(*a1)[8])(a1, (HIDWORD(v76) | (v76 << 16)));
LABEL_55:
      unsigned int v64 = *(_DWORD *)(a4 + 8);
      if (v64 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v65 = (uint64_t *)(*(void *)a4 + 16 * v64);
      *int v65 = result;
      v65[1] = v63;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_57;
    }
    goto LABEL_46;
  }
  uint64_t v53 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v49, v51);
  uint64_t v54 = v57;
  uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v71, v70);
  uint64_t v46 = result;
  uint64_t v47 = v58;
  uint64_t v37 = v74;
  uint64_t v59 = v75;
LABEL_46:
  int v61 = a2[20];
  int v62 = a2[13];
  if (v61 != -1 && v62 == -1)
  {
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[24])(a1, v46, v47);
    goto LABEL_55;
  }
  if (v61 == -1 && v62 != -1)
  {
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[23])(a1, v53, v54);
    goto LABEL_55;
  }
  if (v61 != -1 && v62 != -1)
  {
    uint64_t v77 = v53;
    int v78 = v54;
    uint64_t v79 = v46;
    int v80 = v47;
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t *, uint64_t))(*a1)[12])(a1, v59, &v77, 2);
    goto LABEL_55;
  }
LABEL_57:
  uint64_t v66 = *(unsigned int *)(v37 + 8);
  if (v66)
  {
    int v67 = *(_OWORD **)v37;
    unsigned int v68 = *(_DWORD *)(a4 + 8);
    uint64_t v69 = 16 * v66;
    do
    {
      if (v68 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a4 + 16 * v68) = *v67;
      unsigned int v68 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v68;
      ++v67;
      v69 -= 16;
    }
    while (v69);
  }
  *(_DWORD *)(v37 + 8) = 0;
  return result;
}

void *sub_1CC75EEF0(void *a1)
{
  *a1 = &unk_1F261D810;
  uint64_t v2 = (unsigned __int8 *)a1[1];
  if (v2)
  {
    int v3 = *v2;
    if ((v3 - 4) > 0x1E)
    {
      if ((v3 - 3) >= 0xFFFFFFFE) {
        uint64_t v5 = a1[1];
      }
      else {
        uint64_t v5 = 0;
      }
      if ((v3 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = v5 + 8;
LABEL_11:
        int v8 = a1 + 1;
        sub_1CC5FA668(v6 + 16, &v8);
        return a1;
      }
      if (v3 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return a1;
}

void sub_1CC75EFB8(void *a1)
{
  *a1 = &unk_1F261D810;
  uint64_t v1 = (unsigned __int8 *)a1[1];
  if (!v1) {
    goto LABEL_5;
  }
  int v2 = *v1;
  if ((v2 - 4) > 0x1E)
  {
    if ((v2 - 3) >= 0xFFFFFFFE) {
      uint64_t v3 = a1[1];
    }
    else {
      uint64_t v3 = 0;
    }
    if ((v2 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v4 = v3 + 8;
LABEL_13:
      unint64_t v6 = a1 + 1;
      sub_1CC5FA668(v4 + 16, &v6);
      goto LABEL_5;
    }
    if (v2 == 3) {
      *((void *)v1 + 1) = 0;
    }
  }
  else if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 + 3))
  {
    uint64_t v5 = *((void *)v1 + 2);
    if ((v5 & 4) != 0)
    {
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        goto LABEL_13;
      }
    }
  }
LABEL_5:

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC75F0A0(uint64_t a1)
{
  int v2 = operator new(0x20uLL);
  *int v2 = &unk_1F261D810;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
  v2[1] = v3;
  if (v3) {
    llvm::MetadataTracking::track((uint64_t)(v2 + 1), v3, 2);
  }
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[3] = *(void *)(a1 + 24);
  return v2;
}

uint64_t sub_1CC75F110(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261D810;
  unint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  uint64_t result = a2 + 8;
  if (v4) {
    uint64_t result = llvm::MetadataTracking::track(result, v4, 2);
  }
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  return result;
}

uint64_t sub_1CC75F178(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
  uint64_t result = a1 + 8;
  int v2 = v3;
  if (v3)
  {
    int v4 = *v2;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v5 = v2;
      }
      else {
        uint64_t v5 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = (unint64_t)(v5 + 8);
LABEL_11:
        uint64_t v8 = result;
        return sub_1CC5FA668(v6 + 16, &v8);
      }
      if (v4 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

void sub_1CC75F210(char *__p)
{
  int v2 = (unsigned __int8 *)*((void *)__p + 1);
  if (v2)
  {
    int v3 = *v2;
    if ((v3 - 4) <= 0x1E)
    {
      if ((v2[1] & 0x7F) != 2 && !*((_DWORD *)v2 + 3)) {
        goto LABEL_5;
      }
      uint64_t v6 = *((void *)v2 + 2);
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
    if ((v3 - 3) >= 0xFFFFFFFE) {
      uint64_t v4 = *((void *)__p + 1);
    }
    else {
      uint64_t v4 = 0;
    }
    if ((v3 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v5 = v4 + 8;
LABEL_13:
      uint64_t v7 = __p + 8;
      sub_1CC5FA668(v5 + 16, &v7);
      goto LABEL_5;
    }
    if (v3 == 3) {
      *((void *)v2 + 1) = 0;
    }
  }
LABEL_5:

  operator delete(__p);
}

uint64_t *sub_1CC75F2CC(uint64_t a1, unsigned int *a2)
{
  return sub_1CD7EBF14(*(void *)(*(void *)(a1 + 24) + 40), *a2, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 1, 0);
}

void sub_1CC75F2F4()
{
}

void *sub_1CC75F308()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F261D858;
  return result;
}

void sub_1CC75F340(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261D858;
}

uint64_t sub_1CC75F368(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

void sub_1CC75F378()
{
}

void sub_1CC75F414()
{
}

uint64_t sub_1CC75F450(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA4D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F261D8A0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 280) = a1 + 296;
  *(void *)(a1 + 288) = 0x2000000000;
  *(void *)(a1 + 1832) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA4D8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC75F378;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDA4D8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC75F564(llvm::Pass *this)
{
  *(void *)this = &unk_1F261D8A0;
  int v2 = (char *)*((void *)this + 35);
  if (v2 != (char *)this + 296) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  int v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  unint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC75F62C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261D8A0;
  int v2 = (char *)*((void *)this + 35);
  if (v2 != (char *)this + 296) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  int v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  unint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC75F708()
{
  return "GPU Specific Iterate Combine";
}

void sub_1CC75F718(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC75F774(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 272) = *(void *)(a2 + 40);
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(a1 + 264) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 248) = *(void *)(a2 + 8);
  uint64_t v4 = (void *)(a2 + 320);
  unint64_t v5 = *(void **)(a2 + 328);
  if (v5 == (void *)(a2 + 320))
  {
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  int v6 = 0;
  do
  {
    uint64_t v7 = v5[7];
    if ((void *)v7 != v5 + 6)
    {
      int v8 = 1;
      do
      {
        int v9 = (***(uint64_t (****)(void, uint64_t, void))(a1 + 1832))(*(void *)(a1 + 1832), v7, v8 & 1);
        if (!v7 || (*(unsigned char *)v7 & 4) == 0)
        {
          while ((*(_WORD *)(v7 + 44) & 8) != 0)
            uint64_t v7 = *(void *)(v7 + 8);
        }
        v8 &= v9 ^ 1;
        v6 |= v9;
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while ((void *)v7 != v5 + 6);
    }
    unint64_t v5 = (void *)v5[1];
  }
  while (v5 != v4);
  int v10 = *(void **)(a2 + 328);
  if (v10 != v4)
  {
    int v62 = (void *)(a2 + 320);
    do
    {
      uint64_t v66 = v10[4];
      uint64_t v11 = v10[7];
      if ((void *)v11 == v10 + 6)
      {
        unsigned int v70 = 0;
      }
      else
      {
        unsigned int v70 = 0;
        do
        {
          LOBYTE(v77) = 0;
          *((void *)&v76 + 1) = 0;
          if ((*(unsigned int (**)(void, uint64_t, long long *))(**(void **)(a1 + 1832) + 48))(*(void *)(a1 + 1832), v11, &v76))
          {
            unsigned int v12 = *(_DWORD *)(a1 + 288);
            unint64_t v13 = *(void *)(a1 + 280);
            if (v12 >= *(_DWORD *)(a1 + 292))
            {
              BOOL v18 = v13 + 48 * v12 > (unint64_t)&v76;
              if (v13 > (unint64_t)&v76 || !v18) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v14 = (_OWORD *)(v13 + 48 * *(unsigned int *)(a1 + 288));
            long long v15 = v76;
            long long v16 = v78;
            v14[1] = v77;
            v14[2] = v16;
            *int v14 = v15;
            ++*(_DWORD *)(a1 + 288);
            unsigned int v17 = v70;
            if (DWORD1(v77) > v70) {
              unsigned int v17 = DWORD1(v77);
            }
            unsigned int v70 = v17;
          }
          if (!v11 || (*(unsigned char *)v11 & 4) == 0)
          {
            while ((*(_WORD *)(v11 + 44) & 8) != 0)
              uint64_t v11 = *(void *)(v11 + 8);
          }
          uint64_t v11 = *(void *)(v11 + 8);
        }
        while ((void *)v11 != v10 + 6);
      }
      uint64_t v19 = *(unsigned int *)(a1 + 288);
      if (!v19)
      {
        BOOL v57 = 0;
        goto LABEL_112;
      }
      *(void *)&long long v76 = 1;
      for (uint64_t i = 8; i != 520; i += 16)
        *(void *)((char *)&v76 + i) = -4096;
      uint64_t v63 = v10;
      int v21 = 0;
      uint64_t v22 = *(uint64_t **)(a1 + 280);
      uint64_t v23 = 48 * v19;
      do
      {
        uint64_t v24 = *v22;
        v22 += 6;
        uint64_t v75 = v24;
        *(_DWORD *)(sub_1CC760EF0(&v76, &v75) + 8) = v21++;
        v23 -= 48;
      }
      while (v23);
      size_t v25 = *(unsigned int *)(a1 + 288);
      uint64_t v26 = *(void *)(a1 + 280);
      if (v25 >= 2)
      {
        qsort(*(void **)(a1 + 280), v25, 0x30uLL, (int (__cdecl *)(const void *, const void *))sub_1CC76001C);
        uint64_t v26 = *(void *)(a1 + 280);
        LODWORD(v25) = *(_DWORD *)(a1 + 288);
      }
      unsigned int v27 = 0;
      int v71 = 0;
      unsigned int v68 = 0;
      uint64_t v28 = 0;
      uint64_t v69 = 0;
      uint64_t v72 = 0;
      uint64_t v74 = 0;
      unsigned int v73 = 0;
      uint64_t v67 = v26 + 48 * v25;
      int v29 = -1;
      unsigned int v64 = -1;
      unsigned int v65 = -1;
      unsigned int v30 = -1;
      do
      {
        uint64_t v75 = 0;
        uint64_t v75 = *(void *)v26;
        unsigned int v31 = *(_DWORD *)(sub_1CC760EF0(&v76, &v75) + 8);
        unsigned int v32 = *(_DWORD *)(v26 + 20);
        if (v29 == -1)
        {
          (*(void (**)(void, void, uint64_t, void, char *, uint64_t *, unsigned int *))(**(void **)(a1 + 1832) + 40))(*(void *)(a1 + 1832), *(void *)(a1 + 248), v66, *(_DWORD *)(v26 + 24), (char *)&v74 + 4, &v74, &v73);
          uint64_t v72 = (void *)v26;
          uint64_t v69 = (unint64_t **)v26;
          v26 += 48;
          unsigned int v68 = v27++;
          uint64_t v28 = 1;
          unsigned int v30 = v32;
          unsigned int v64 = v31;
          unsigned int v65 = v31;
          goto LABEL_77;
        }
        int v33 = *((_DWORD *)v72 + 6);
        if ((unsigned __int16)v33 != (unsigned __int16)*(_DWORD *)(v26 + 24)
          || *((unsigned __int8 *)v72 + 16) != *(unsigned __int8 *)(v26 + 16)
          || *((_DWORD *)v72 + 2) != *(_DWORD *)(v26 + 8)
          || *((_DWORD *)v72 + 3) != *(_DWORD *)(v26 + 12))
        {
          goto LABEL_63;
        }
        uint64_t v34 = BYTE2(v33);
        if (BYTE2(v33))
        {
          unsigned int v35 = v72 + 4;
          uint64_t v36 = (uint64_t *)(v26 + 32);
          while (1)
          {
            uint64_t v38 = *v35++;
            uint64_t v37 = v38;
            uint64_t v39 = *v36++;
            if (v37 != v39) {
              break;
            }
            if (!--v34) {
              goto LABEL_50;
            }
          }
LABEL_63:
          uint64_t v42 = v28;
LABEL_64:
          if ((v33 & 0xFF00) == 0x1000)
          {
            if ((*(unsigned int (**)(void, void, uint64_t))(**(void **)(a1 + 1832) + 24))(*(void *)(a1 + 1832), *(void *)(a1 + 248), v66))
            {
              BOOL v48 = v42 == 1;
            }
            else
            {
              BOOL v48 = 0;
            }
            int v49 = v71;
            if (v48)
            {
              if (v30 | v70)
              {
                if (v30) {
                  v30 -= v73;
                }
                uint64_t v42 = 2;
              }
              else
              {
                (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 1832) + 32))(*(void *)(a1 + 1832), v66, *(void *)(a1 + 256), *(void *)(a1 + 272), *v72);
                unsigned int v30 = 0;
                uint64_t v42 = 1;
              }
            }
          }
          else
          {
            int v49 = v71;
          }
          uint64_t v28 = v42;
          int v71 = v49 | sub_1CC760184(a1, v68, v27 - 1, v30, v42, (uint64_t)v72, v69, v73);
          unsigned int v32 = -1;
          goto LABEL_77;
        }
LABEL_50:
        if (v32 != v73 + v29 || v28 >= HIDWORD(v74))
        {
          BOOL v41 = v32 != v29 + (v74 + 1) * v73 || v28 >= HIDWORD(v74) - (int)v74;
          uint64_t v42 = v28;
          if (v41) {
            goto LABEL_64;
          }
          int v60 = v74;
          int v61 = v74 + 1;
          unsigned int v43 = HIDWORD(v74);
          int v44 = sub_1CC7600E0(v26, v67, (uint64_t)v72, *(_DWORD *)(v26 + 20), v73, v74);
          int v45 = v72;
          BOOL v46 = (v44 + v43) / v43 == (v43
                                    + ((v42 - v43 + v60 + v44 + 1) & ~((int)(v42 - v43 + v60 + v44 + 1) >> 31))
                                    - 1)
                                   / v43;
          int v47 = v61;
          if ((v44 + v43) / v43 == (v43
                                   + ((v42 - v43 + v60 + v44 + 1) & ~((int)(v42 - v43 + v60 + v44 + 1) >> 31))
                                   - 1)
                                  / v43)
            int v47 = 0;
          uint64_t v42 = (v47 + v42);
          if (v46) {
            goto LABEL_64;
          }
        }
        else
        {
          int v50 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 1832) + 16))(*(void *)(a1 + 1832), *(void *)(a1 + 248), v66);
          uint64_t v42 = v28;
          if (v50
            && v28 == HIDWORD(v74) - 1
            && sub_1CC7600E0(v26, v67, (uint64_t)v72, v32, v73, v74) == 1)
          {
            int v33 = *((_DWORD *)v72 + 6);
            goto LABEL_64;
          }
          uint64_t v42 = (v28 + 1);
          int v45 = v72;
        }
        uint64_t v28 = v42;
        if (v31 >= v64) {
          unsigned int v51 = v64;
        }
        else {
          unsigned int v51 = v31;
        }
        if (v31 < v64) {
          int v45 = (void *)v26;
        }
        uint64_t v72 = v45;
        unsigned int v52 = v65;
        BOOL v53 = v31 > v65;
        if (v31 > v65) {
          unsigned int v52 = v31;
        }
        unsigned int v64 = v51;
        unsigned int v65 = v52;
        uint64_t v54 = v69;
        if (v53) {
          uint64_t v54 = (unint64_t **)v26;
        }
        uint64_t v69 = v54;
        if (v30 >= v32) {
          unsigned int v30 = v32;
        }
        v26 += 48;
        ++v27;
LABEL_77:
        int v29 = v32;
      }
      while (v26 != v67);
      if (*((unsigned __int8 *)v72 + 25) << 8 != 4096)
      {
        uint64_t v4 = v62;
        int v10 = v63;
        goto LABEL_109;
      }
      if ((*(unsigned int (**)(void, void, uint64_t))(**(void **)(a1 + 1832) + 24))(*(void *)(a1 + 1832), *(void *)(a1 + 248), v66))
      {
        BOOL v55 = v28 == 1;
      }
      else
      {
        BOOL v55 = 0;
      }
      uint64_t v4 = v62;
      int v10 = v63;
      if (v55)
      {
        int v56 = v71;
        if (v30 | v70)
        {
          if (v30) {
            v30 -= v73;
          }
          uint64_t v28 = 2;
        }
        else
        {
          (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 1832) + 32))(*(void *)(a1 + 1832), v66, *(void *)(a1 + 256), *(void *)(a1 + 272), *v72);
          unsigned int v30 = 0;
          uint64_t v28 = 1;
        }
      }
      else
      {
LABEL_109:
        int v56 = v71;
      }
      BOOL v58 = sub_1CC760184(a1, v68, v27 - 1, v30, v28, (uint64_t)v72, v69, v73);
      *(_DWORD *)(a1 + 288) = 0;
      BOOL v57 = (v56 | v58) != 0;
      if ((v76 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*((void *)&v76 + 1), 8);
      }
LABEL_112:
      v6 |= v57 | (*(uint64_t (**)(void, void *))(**(void **)(a1 + 1832) + 8))(*(void *)(a1 + 1832), v10);
      int v10 = (void *)v10[1];
    }
    while (v10 != v4);
  }
  return v6 & 1;
}

uint64_t sub_1CC76001C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  int v3 = v2;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v2 != v4)
  {
    int v24 = *(_DWORD *)(a2 + 24);
    return (v3 - v24);
  }
  uint64_t v5 = BYTE2(v2);
  if (!BYTE2(v2))
  {
LABEL_6:
    unsigned int v12 = *(unsigned __int8 *)(a1 + 16);
    unsigned int v13 = *(unsigned __int8 *)(a2 + 16);
    unsigned int v14 = *(_DWORD *)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(a1 + 12);
    unsigned int v16 = *(_DWORD *)(a2 + 8);
    unsigned int v17 = *(_DWORD *)(a2 + 12);
    if (v12 != v13 || v14 != v16 || v15 != v17)
    {
      if (v15 < v17 && v16 >= v14) {
        int v21 = -1;
      }
      else {
        int v21 = 1;
      }
      if (v14 >= v16) {
        int v22 = v21;
      }
      else {
        int v22 = -1;
      }
      if (v13 >= v12) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = 1;
      }
      if (v12 >= v13) {
        return v23;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    int v3 = BYTE1(v2);
    if (BYTE1(v2) == BYTE1(v4))
    {
      int v3 = *(_DWORD *)(a1 + 20);
      int v24 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      int v24 = BYTE1(v4);
    }
    return (v3 - v24);
  }
  int v6 = (int *)(a1 + 32);
  uint64_t v7 = (int *)(a2 + 32);
  while (1)
  {
    int v9 = *v6;
    v6 += 2;
    int v8 = v9;
    int v10 = *v7;
    v7 += 2;
    uint64_t v11 = (v8 - v10);
    if (v11) {
      return v11;
    }
    if (!--v5) {
      goto LABEL_6;
    }
  }
}

uint64_t sub_1CC7600E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = a1 + 48;
  if (a1 + 48 == a2) {
    return 0;
  }
  uint64_t v7 = a1;
  uint64_t result = 0;
  do
  {
    a4 += a5;
    if (a6)
    {
      int v9 = *(_DWORD *)(v7 + 68);
      if (v9 == a4 + a5) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
      if (v9 == a4 + a5) {
        a4 += a5;
      }
    }
    if (*(unsigned __int16 *)(v7 + 72) != (unsigned __int16)*(_DWORD *)(a3 + 24) || *(_DWORD *)(v7 + 68) != a4) {
      break;
    }
    if (BYTE2(*(_DWORD *)(a3 + 24)))
    {
      uint64_t v10 = 0;
      while (*(void *)(a3 + 32 + v10) == *(void *)(v7 + v10 + 80))
      {
        v10 += 8;
        if (8 * BYTE2(*(_DWORD *)(a3 + 24)) == v10) {
          goto LABEL_15;
        }
      }
      return result;
    }
LABEL_15:
    uint64_t result = (result + 1);
    v6 += 48;
    v7 += 48;
  }
  while (v6 != a2);
  return result;
}

BOOL sub_1CC760184(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t **a7, unsigned int a8)
{
  unsigned int v8 = a5;
  if (a5 < 2) {
    return v8 > 1;
  }
  unsigned int v134 = a5;
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 1832) + 56))(*(void *)(a1 + 1832), a5, *(unsigned __int8 *)(a6 + 25));
  uint64_t v137 = (unint64_t **)a6;
  uint64_t v146 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1832) + 64))(*(void *)(a1 + 1832), a6);
  uint64_t v13 = *(void *)(a1 + 272);
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
  *(void *)(*(void *)(v13 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v12 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v15 = *(void *)(v13 + 8);
  if (v15) {
    (*(void (**)(uint64_t, void))(*(void *)v15 + 24))(v15, IncompleteVirtualRegister);
  }
  unsigned int v16 = 0;
  v151[0] = 0;
  v151[1] = 0;
  unsigned int v152 = 0;
  if (a2 <= a3)
  {
    uint64_t v147 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 280) + 48 * a2) + 24) + 32);
    unsigned int v19 = a2;
    unsigned int v136 = a2;
    do
    {
      uint64_t v20 = *(void *)(a1 + 280) + 48 * v19;
      uint64_t v145 = (*(_DWORD *)(v20 + 20) - a4) / a8;
      uint64_t v21 = *(void *)v20;
      int v150 = *(_DWORD *)(v146 + 4 * v145);
      uint64_t v140 = v21;
      uint64_t v22 = *(void *)(v21 + 32) + 32 * *(unsigned int *)(v20 + 28);
      if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
        break;
      }
      uint64_t v23 = *(void *)(a1 + 272);
      unsigned int v26 = *(_DWORD *)(v22 + 4);
      size_t v25 = (_DWORD *)(v22 + 4);
      uint64_t v24 = v26;
      if ((v26 & 0x80000000) != 0) {
        unsigned int v27 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v27 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v24);
      }
      uint64_t v28 = *v27;
      unsigned int v139 = v19;
      if (*v27)
      {
        while ((*(unsigned char *)(v28 + 3) & 1) != 0)
        {
          uint64_t v28 = *(void *)(v28 + 24);
          if (!v28) {
            goto LABEL_18;
          }
        }
        uint64_t v144 = v25;
        while (2)
        {
          int v29 = (const llvm::MachineOperand *)v28;
          do
            uint64_t v28 = *(void *)(v28 + 24);
          while (v28 && (*(unsigned char *)(v28 + 3) & 1) != 0);
          uint64_t v30 = *((void *)v29 + 1);
          if ((**(_WORD **)(v30 + 16) & 0xFFFE) == 0x12) {
            goto LABEL_63;
          }
          uint64_t v31 = *(unsigned int *)(v146 + 4 * v145);
          uint64_t v32 = v12;
          if (((*(_DWORD *)v29 >> 8) & 0xFFF) != 0)
          {
            if (v31) {
              uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 264) + 208))(*(void *)(a1 + 264));
            }
            else {
              uint64_t v31 = (*(_DWORD *)v29 >> 8) & 0xFFF;
            }
          }
          uint64_t v33 = *(unsigned int *)(v30 + 40);
          if (v33)
          {
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            while (1)
            {
              if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)(v30 + 32) + v34), v29))
              {
                uint64_t v36 = (*(uint64_t (**)(void, void, uint64_t, void, uint64_t))(**(void **)(a1 + 256)
                                                                                          + 16))(*(void *)(a1 + 256), *(void *)(v30 + 16), v35, *(void *)(a1 + 264), v147);
                if (v36) {
                  break;
                }
              }
              ++v35;
              v34 += 32;
              if (v33 == v35) {
                goto LABEL_34;
              }
            }
            unint64_t v37 = v36;
          }
          else
          {
LABEL_34:
            unint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 272) + 24) + 16 * (*v144 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v12 = v32;
          uint64_t v38 = (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(a1 + 264) + 184))(*(void *)(a1 + 264), v32, v37, v31);
          if (v38)
          {
            *(void *)(*(void *)(*(void *)(a1 + 272) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v38 & 0xFFFFFFFFFFFFFFFBLL;
            uint64_t v12 = v38;
            goto LABEL_63;
          }
          if (v152)
          {
            LODWORD(v42) = (37 * v150) & (v152 - 1);
            uint64_t v39 = v151[0] + 16 * v42;
            int v43 = *(_DWORD *)v39;
            if (v150 != *(_DWORD *)v39)
            {
              int v44 = 1;
              do
              {
                if (v43 == -1) {
                  goto LABEL_39;
                }
                int v45 = v42 + v44++;
                uint64_t v42 = v45 & (v152 - 1);
                int v43 = *(_DWORD *)(v151[0] + 16 * v42);
              }
              while (v150 != v43);
              uint64_t v39 = v151[0] + 16 * v42;
            }
          }
          else
          {
LABEL_39:
            uint64_t v39 = v151[0] + 16 * v152;
          }
          if (v151[0] + 16 * v152 != v39)
          {
            uint64_t v40 = *(void *)(v39 + 8);
            if (*((void *)v29 + 1) != v40)
            {
              unsigned int v41 = *(_DWORD *)(*(void *)(v40 + 32) + 4);
              goto LABEL_62;
            }
            goto LABEL_63;
          }
          uint64_t v46 = *(void *)(a1 + 272);
          unsigned int v47 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v46, "", 0);
          unsigned int v41 = v47;
          *(void *)(*(void *)(v46 + 24) + 16 * (v47 & 0x7FFFFFFF)) = v37 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v48 = *(void *)(v46 + 8);
          if (v48) {
            (*(void (**)(uint64_t, void))(*(void *)v48 + 24))(v48, v47);
          }
          if (!v140 || (uint64_t v49 = v140, (*(unsigned char *)v140 & 4) == 0))
          {
            uint64_t v49 = v140;
            if ((*(_WORD *)(v140 + 44) & 8) != 0)
            {
              uint64_t v49 = v140;
              do
                uint64_t v49 = *(void *)(v49 + 8);
              while ((*(_WORD *)(v49 + 44) & 8) != 0);
            }
          }
          int v50 = *(unint64_t **)(v49 + 8);
          uint64_t v51 = *(void *)(v140 + 24);
          uint64_t v52 = *(void *)(*(void *)(a1 + 256) + 8);
          BOOL v53 = *(llvm::MachineFunction **)(v51 + 32);
          uint64_t v54 = *(unsigned __int8 **)(v140 + 56);
          int v153 = v54;
          if (v54) {
            llvm::MetadataTracking::track((uint64_t)&v153, v54, 2);
          }
          uint64_t v55 = v52 + 912;
          int v56 = v53;
          BOOL v57 = llvm::MachineFunction::CreateMachineInstr(v53, v55, &v153, 0);
          if (!v153)
          {
LABEL_58:
            uint64_t v58 = *(void *)(v51 + 40);
            *((void *)v57 + 3) = v58;
            uint64_t v59 = *(void *)(v58 + 32);
            uint64_t v60 = *((unsigned int *)v57 + 10);
            if (v60)
            {
              uint64_t v63 = *((void *)v57 + 4);
              uint64_t v64 = *(void *)(v59 + 40);
              uint64_t v65 = 32 * v60;
              do
              {
                if (!*(unsigned char *)v63)
                {
                  uint64_t v66 = *(unsigned int *)(v63 + 4);
                  if ((int)v66 >= 0) {
                    uint64_t v67 = (uint64_t *)(*(void *)(v64 + 272) + 8 * v66);
                  }
                  else {
                    uint64_t v67 = (uint64_t *)(*(void *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v68 = *v67;
                  if (*v67)
                  {
                    uint64_t v69 = *(void *)(v68 + 16);
                    *(void *)(v68 + 16) = v63;
                    *(void *)(v63 + 16) = v69;
                    if (*(unsigned char *)(v63 + 3))
                    {
                      *(void *)(v63 + 24) = v68;
                    }
                    else
                    {
                      *(void *)(v63 + 24) = 0;
                      uint64_t v67 = (uint64_t *)(v69 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v63 + 16) = v63;
                    *(void *)(v63 + 24) = 0;
                  }
                  *uint64_t v67 = v63;
                }
                v63 += 32;
                v65 -= 32;
              }
              while (v65);
            }
            uint64_t v61 = *(void *)(v59 + 728);
            if (v61) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v61 + 24))(v61, v57);
            }
            unint64_t v62 = *v50 & 0xFFFFFFFFFFFFFFF8;
            *(void *)BOOL v57 = v62 | *(void *)v57 & 7;
            *((void *)v57 + 1) = v50;
            *(void *)(v62 + 8) = v57;
            *int v50 = *v50 & 7 | (unint64_t)v57;
            uint64_t v155 = 0;
            uint64_t v156 = 0;
            uint64_t v157 = 0;
            LODWORD(v154) = 0x1000000;
            HIDWORD(v154) = v47;
            llvm::MachineInstr::addOperand(v57, v56, (const llvm::MachineOperand *)&v154);
            llvm::MachineInstr::addOperand(v57, *(llvm::MachineFunction **)(*((void *)v57 + 3) + 32), v29);
            *((void *)sub_1CBB2F1A4((uint64_t)v151, &v150) + 1) = v57;
LABEL_62:
            llvm::MachineOperand::setReg((uint64_t)v29, v41);
            *(_DWORD *)v29 &= 0xFFF000FF;
LABEL_63:
            if (!v28) {
              goto LABEL_18;
            }
            continue;
          }
          break;
        }
        int v70 = *v153;
        if ((v70 - 4) > 0x1E)
        {
          if ((v70 - 3) >= 0xFFFFFFFE) {
            unsigned int v73 = v153;
          }
          else {
            unsigned int v73 = 0;
          }
          if ((v70 - 3) < 0xFFFFFFFE)
          {
            if (v70 == 3) {
              *((void *)v153 + 1) = 0;
            }
            goto LABEL_58;
          }
          unint64_t v72 = (unint64_t)(v73 + 8);
        }
        else
        {
          if ((v153[1] & 0x7F) != 2 && !*((_DWORD *)v153 + 3)) {
            goto LABEL_58;
          }
          uint64_t v71 = *((void *)v153 + 2);
          if ((v71 & 4) == 0) {
            goto LABEL_58;
          }
          unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF8;
          if (!v72) {
            goto LABEL_58;
          }
        }
        uint64_t v154 = &v153;
        sub_1CC5FA668(v72 + 16, &v154);
        goto LABEL_58;
      }
LABEL_18:
      unsigned int v19 = v139 + 1;
      a2 = v136;
    }
    while (v139 + 1 <= a3);
    unsigned int v16 = 0;
    while (1)
    {
      uint64_t v74 = (_DWORD *)(*(void *)(a1 + 280) + 48 * a2);
      uint64_t v75 = *(void *)v74;
      uint64_t v76 = (v74[5] - a4) / a8;
      uint64_t v77 = *(void *)(*(void *)v74 + 32) + 32 * v74[7];
      if (*(unsigned char *)(v77 + 3))
      {
        uint64_t v95 = *(void *)(a1 + 272);
        uint64_t v96 = *(unsigned int *)(v77 + 4);
        if ((v96 & 0x80000000) != 0) {
          uint64_t v97 = (uint64_t *)(*(void *)(v95 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v97 = (uint64_t *)(*(void *)(v95 + 272) + 8 * v96);
        }
        uint64_t v98 = *v97;
        if (*v97)
        {
          while ((*(unsigned char *)(v98 + 3) & 1) != 0)
          {
            uint64_t v98 = *(void *)(v98 + 24);
            if (!v98) {
              goto LABEL_127;
            }
          }
          while (2)
          {
            uint64_t v100 = (unsigned int *)v98;
            do
              uint64_t v98 = *(void *)(v98 + 24);
            while (v98 && (*(unsigned char *)(v98 + 3) & 1) != 0);
            int v99 = *(_DWORD *)(v146 + 4 * v76);
            if (!v99)
            {
              llvm::MachineOperand::setReg((uint64_t)v100, IncompleteVirtualRegister);
              goto LABEL_126;
            }
            if (((*v100 >> 8) & 0xFFF) != 0)
            {
              int v99 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 264) + 208))(*(void *)(a1 + 264), *(unsigned int *)(v146 + 4 * v76));
              llvm::MachineOperand::setReg((uint64_t)v100, IncompleteVirtualRegister);
              if (v99) {
                goto LABEL_125;
              }
            }
            else
            {
              llvm::MachineOperand::setReg((uint64_t)v100, IncompleteVirtualRegister);
LABEL_125:
              *uint64_t v100 = *v100 & 0xFFF000FF | ((v99 & 0xFFF) << 8);
            }
LABEL_126:
            *v100 &= ~0x4000000u;
            if (!v98) {
              break;
            }
            continue;
          }
        }
LABEL_127:
        unint64_t v101 = *v137;
        if ((unint64_t *)v75 != *v137)
        {
          unsigned int v103 = (const llvm::DILocation *)v101[7];
          uint64_t v102 = (unsigned __int8 **)(v101 + 7);
          MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(v75 + 56), v103, v14);
          int v149 = MergedLocation;
          if (MergedLocation) {
            llvm::MetadataTracking::track((uint64_t)&v149, MergedLocation, 2);
          }
          if (&v149 != v102)
          {
            uint64_t v105 = *v102;
            if (!*v102) {
              goto LABEL_132;
            }
            int v110 = *v105;
            if ((v110 - 4) <= 0x1E)
            {
              if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
                goto LABEL_132;
              }
              uint64_t v111 = *((void *)v105 + 2);
              if ((v111 & 4) == 0) {
                goto LABEL_132;
              }
              unint64_t v112 = v111 & 0xFFFFFFFFFFFFFFF8;
              if (!v112) {
                goto LABEL_132;
              }
              goto LABEL_173;
            }
            if ((v110 - 3) >= 0xFFFFFFFE) {
              uint64_t v121 = *v102;
            }
            else {
              uint64_t v121 = 0;
            }
            if ((v110 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v112 = (unint64_t)(v121 + 8);
LABEL_173:
              uint64_t v154 = v102;
              sub_1CC5FA668(v112 + 16, &v154);
              goto LABEL_132;
            }
            if (v110 == 3) {
              *((void *)v105 + 1) = 0;
            }
LABEL_132:
            uint64_t v106 = v149;
            llvm::MachineFunction *v102 = v149;
            if (v106)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v149, v106, (uint64_t)v102);
              int v149 = 0;
            }
LABEL_134:
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v75);
            goto LABEL_135;
          }
          uint64_t v122 = v149;
          if (!v149) {
            goto LABEL_134;
          }
          int v123 = *v149;
          if ((v123 - 4) <= 0x1E)
          {
            if ((v149[1] & 0x7F) != 2 && !*((_DWORD *)v149 + 3)) {
              goto LABEL_134;
            }
            uint64_t v126 = *((void *)v149 + 2);
            if ((v126 & 4) == 0) {
              goto LABEL_134;
            }
            unint64_t v125 = v126 & 0xFFFFFFFFFFFFFFF8;
            if (!v125) {
              goto LABEL_134;
            }
LABEL_209:
            unsigned int v131 = &v149;
LABEL_210:
            uint64_t v154 = v131;
            sub_1CC5FA668(v125 + 16, &v154);
            goto LABEL_134;
          }
          if ((v123 - 3) >= 0xFFFFFFFE) {
            unsigned int v132 = v149;
          }
          else {
            unsigned int v132 = 0;
          }
          if ((v123 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v125 = (unint64_t)(v132 + 8);
            goto LABEL_209;
          }
LABEL_211:
          if (v123 == 3) {
            *((void *)v122 + 1) = 0;
          }
          goto LABEL_134;
        }
        goto LABEL_135;
      }
      if (!v16) {
        break;
      }
LABEL_102:
      llvm::MachineInstr::addOperand(v16, *(llvm::MachineFunction **)(*((void *)v16 + 3) + 32), (const llvm::MachineOperand *)v77);
      uint64_t v88 = *(unsigned int *)(v146 + 4 * v76);
      LODWORD(v154) = 1;
      uint64_t v155 = 0;
      uint64_t v156 = v88;
      llvm::MachineInstr::addOperand(v16, *(llvm::MachineFunction **)(*((void *)v16 + 3) + 32), (const llvm::MachineOperand *)&v154);
      uint64_t v89 = *a7;
      if ((unint64_t *)v75 != *a7)
      {
        uint64_t v91 = (const llvm::DILocation *)v89[7];
        unint64_t v90 = (unsigned __int8 **)(v89 + 7);
        uint64_t v92 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(v75 + 56), v91, v14);
        int v148 = v92;
        if (v92) {
          llvm::MetadataTracking::track((uint64_t)&v148, v92, 2);
        }
        if (&v148 == v90)
        {
          uint64_t v122 = v148;
          if (!v148) {
            goto LABEL_134;
          }
          int v123 = *v148;
          if ((v123 - 4) > 0x1E)
          {
            if ((v123 - 3) >= 0xFFFFFFFE) {
              unint64_t v130 = v148;
            }
            else {
              unint64_t v130 = 0;
            }
            if ((v123 - 3) < 0xFFFFFFFE) {
              goto LABEL_211;
            }
            unint64_t v125 = (unint64_t)(v130 + 8);
          }
          else
          {
            if ((v148[1] & 0x7F) != 2 && !*((_DWORD *)v148 + 3)) {
              goto LABEL_134;
            }
            uint64_t v124 = *((void *)v148 + 2);
            if ((v124 & 4) == 0) {
              goto LABEL_134;
            }
            unint64_t v125 = v124 & 0xFFFFFFFFFFFFFFF8;
            if (!v125) {
              goto LABEL_134;
            }
          }
          unsigned int v131 = &v148;
          goto LABEL_210;
        }
        BOOL v93 = *v90;
        if (!*v90)
        {
LABEL_107:
          int v94 = v148;
          *unint64_t v90 = v148;
          if (v94)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v148, v94, (uint64_t)v90);
            int v148 = 0;
          }
          goto LABEL_134;
        }
        int v107 = *v93;
        if ((v107 - 4) > 0x1E)
        {
          if ((v107 - 3) >= 0xFFFFFFFE) {
            uint64_t v120 = *v90;
          }
          else {
            uint64_t v120 = 0;
          }
          if ((v107 - 3) < 0xFFFFFFFE)
          {
            if (v107 == 3) {
              *((void *)v93 + 1) = 0;
            }
            goto LABEL_107;
          }
          unint64_t v109 = (unint64_t)(v120 + 8);
        }
        else
        {
          if ((v93[1] & 0x7F) != 2 && !*((_DWORD *)v93 + 3)) {
            goto LABEL_107;
          }
          uint64_t v108 = *((void *)v93 + 2);
          if ((v108 & 4) == 0) {
            goto LABEL_107;
          }
          unint64_t v109 = v108 & 0xFFFFFFFFFFFFFFF8;
          if (!v109) {
            goto LABEL_107;
          }
        }
        uint64_t v154 = v90;
        sub_1CC5FA668(v109 + 16, &v154);
        goto LABEL_107;
      }
LABEL_135:
      if (++a2 > a3) {
        goto LABEL_5;
      }
    }
    long long v78 = *a7;
    uint64_t v79 = *(void *)(v75 + 24);
    uint64_t v80 = *(void *)(*(void *)(a1 + 256) + 8);
    uint64_t v81 = *(llvm::MachineFunction **)(v79 + 32);
    unint64_t v82 = *(unsigned __int8 **)(v75 + 56);
    int v153 = v82;
    if (v82) {
      llvm::MetadataTracking::track((uint64_t)&v153, v82, 2);
    }
    unsigned int v16 = llvm::MachineFunction::CreateMachineInstr(v81, v80 + 864, &v153, 0);
    if (v153)
    {
      int v127 = *v153;
      if ((v127 - 4) > 0x1E)
      {
        if ((v127 - 3) >= 0xFFFFFFFE) {
          uint64_t v133 = v153;
        }
        else {
          uint64_t v133 = 0;
        }
        if ((v127 - 3) < 0xFFFFFFFE)
        {
          if (v127 == 3) {
            *((void *)v153 + 1) = 0;
          }
          goto LABEL_98;
        }
        unint64_t v129 = (unint64_t)(v133 + 8);
      }
      else
      {
        if ((v153[1] & 0x7F) != 2 && !*((_DWORD *)v153 + 3)) {
          goto LABEL_98;
        }
        uint64_t v128 = *((void *)v153 + 2);
        if ((v128 & 4) == 0) {
          goto LABEL_98;
        }
        unint64_t v129 = v128 & 0xFFFFFFFFFFFFFFF8;
        if (!v129) {
          goto LABEL_98;
        }
      }
      uint64_t v154 = &v153;
      sub_1CC5FA668(v129 + 16, &v154);
    }
LABEL_98:
    uint64_t v83 = *(void *)(v79 + 40);
    *((void *)v16 + 3) = v83;
    uint64_t v84 = *(void *)(v83 + 32);
    uint64_t v85 = *((unsigned int *)v16 + 10);
    if (v85)
    {
      uint64_t v113 = *((void *)v16 + 4);
      uint64_t v114 = *(void *)(v84 + 40);
      uint64_t v115 = 32 * v85;
      do
      {
        if (!*(unsigned char *)v113)
        {
          uint64_t v116 = *(unsigned int *)(v113 + 4);
          if ((int)v116 >= 0) {
            int v117 = (uint64_t *)(*(void *)(v114 + 272) + 8 * v116);
          }
          else {
            int v117 = (uint64_t *)(*(void *)(v114 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
          }
          uint64_t v118 = *v117;
          if (*v117)
          {
            uint64_t v119 = *(void *)(v118 + 16);
            *(void *)(v118 + 16) = v113;
            *(void *)(v113 + 16) = v119;
            if (*(unsigned char *)(v113 + 3))
            {
              *(void *)(v113 + 24) = v118;
            }
            else
            {
              *(void *)(v113 + 24) = 0;
              int v117 = (uint64_t *)(v119 + 24);
            }
          }
          else
          {
            *(void *)(v113 + 16) = v113;
            *(void *)(v113 + 24) = 0;
          }
          *int v117 = v113;
        }
        v113 += 32;
        v115 -= 32;
      }
      while (v115);
    }
    uint64_t v86 = *(void *)(v84 + 728);
    if (v86) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v86 + 24))(v86, v16);
    }
    unint64_t v87 = *v78 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unsigned int v16 = v87 | *(void *)v16 & 7;
    *((void *)v16 + 1) = v78;
    *(void *)(v87 + 8) = v16;
    *long long v78 = *v78 & 7 | (unint64_t)v16;
    uint64_t v155 = 0;
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    LODWORD(v154) = 0x1000000;
    HIDWORD(v154) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v16, v81, (const llvm::MachineOperand *)&v154);
    goto LABEL_102;
  }
LABEL_5:
  if (v16) {
    unsigned int v17 = a7;
  }
  else {
    unsigned int v17 = v137;
  }
  unsigned int v8 = v134;
  (*(void (**)(void, unint64_t **, void, void, void, void))(**(void **)(a1 + 1832) + 72))(*(void *)(a1 + 1832), v17, v134, IncompleteVirtualRegister, a4, *(void *)(a1 + 256));
  MEMORY[0x1D25D9CD0](v151[0], 8);
  return v8 > 1;
}

uint64_t sub_1CC760EF0(_DWORD *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC760FDC((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 32;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1CC761088((uint64_t)a1, v7);
    uint64_t v8 = 0;
    sub_1CC760FDC((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*(void *)result != -4096) {
    --a1[1];
  }
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1CC760FDC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC761088(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC761220(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)unsigned int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC761220(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CC761220(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 520);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC760FDC((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *uint64_t v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::CreateFragmentShaderIterationData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v16 = a3;
  __int16 v15 = 0;
  int v14 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 336))(a4);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v11 = operator new(0x48uLL);
  void *v11 = &unk_1F261D960;
  v11[1] = &v16;
  v11[2] = &v14;
  void v11[3] = &v13;
  v11[4] = a1;
  v11[5] = a5;
  v11[6] = a6;
  v11[7] = (char *)&v15 + 1;
  v11[8] = &v15;
  BOOL v18 = v11;
  sub_1CB91FCAC(a2, (uint64_t)v17);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  return HIBYTE(v15) | (v15 << 8);
}

_DWORD *llvm::GPUMetadataEmitter::doFinalization(llvm::GPUMetadataEmitter *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 259) = 0u;
  sub_1CC781B2C((void *)this + 1);
  *((_DWORD *)this + 22) = 0;

  return sub_1CC7614E4((_DWORD *)this + 72);
}

_DWORD *sub_1CC7614E4(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CC781C80(result);
    }
    else
    {
      if (v1)
      {
        int v2 = *(void **)result;
        uint64_t v3 = 96 * v1;
        do
        {
          *int v2 = -4096;
          v2 += 12;
          v3 -= 96;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::runOnMachineFunction(llvm::GPUMetadataEmitter *this, llvm::MachineFunction *a2, const llvm::MachineLoopInfo *a3, llvm::MCContext *a4, llvm::MCStreamer *a5)
{
  uint64_t v290 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a2 + 43);
  *((void *)this + 39) = *((void *)a2 + 1);
  uint64_t v9 = *(void *)a2;
  uint64_t v283 = v9;
  uint64_t v10 = *(void *)(v9 + 40);
  if (*(char *)(v10 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v282, *(const void **)(v10 + 216), *(void *)(v10 + 224));
  }
  else {
    std::string v282 = *(std::string *)(v10 + 216);
  }
  if (!std::string::compare(&v282, 0, 4uLL, "agx1"))
  {
    char v11 = 27;
  }
  else if (!std::string::compare(&v282, 0, 4uLL, "agx2"))
  {
    char v11 = 28;
  }
  else if (!std::string::compare(&v282, 0, 4uLL, "agx3"))
  {
    char v11 = 29;
  }
  else
  {
    char v11 = 0;
  }
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v282.__r_.__value_.__l.__data_);
  }
  int DeviceTypeFromTarget = llvm::GPUBaseInfo::getDeviceTypeFromTarget(*((void *)this + 39));
  *((_DWORD *)this + 70) = DeviceTypeFromTarget;
  if (DeviceTypeFromTarget <= 11) {
    *((unsigned char *)this + 6360) = 1;
  }
  unsigned int v13 = (*(uint64_t (**)(void, llvm::MachineFunction *))(**(void **)this + 72))(*(void *)this, a2);
  (*(void (**)(void))(**((void **)a2 + 43) + 632))();
  unsigned int v14 = v9 >> 4;
  if (((*(unsigned __int16 *)(v9 + 18) >> 4) & 0x3FFu) <= 0x63)
  {
LABEL_21:
    uint64_t v274 = (_DWORD *)((char *)this + 288);
    int v30 = *((_DWORD *)this + 76);
    if (v30)
    {
      uint64_t v31 = *((void *)this + 36);
      int v32 = v30 - 1;
      unsigned int v33 = (v30 - 1) & (v14 ^ (v9 >> 9));
      uint64_t v34 = (void *)(v31 + 96 * v33);
      uint64_t v35 = *v34;
      if (v9 == *v34)
      {
        v34[1] = v13;
        goto LABEL_24;
      }
      uint64_t v236 = 0;
      int v237 = 1;
      while (v35 != -4096)
      {
        if (v236) {
          BOOL v238 = 0;
        }
        else {
          BOOL v238 = v35 == -8192;
        }
        if (v238) {
          uint64_t v236 = v34;
        }
        unsigned int v239 = v33 + v237++;
        unsigned int v33 = v239 & v32;
        uint64_t v34 = (void *)(v31 + 96 * v33);
        uint64_t v35 = *v34;
        if (v9 == *v34) {
          goto LABEL_374;
        }
      }
      if (v236) {
        uint64_t v246 = v236;
      }
      else {
        uint64_t v246 = v34;
      }
    }
    else
    {
      uint64_t v246 = 0;
    }
    uint64_t v34 = sub_1CC781DB4(v274, &v283, v246);
    *uint64_t v34 = v9;
    *(_OWORD *)(v34 + 1) = 0u;
    *(_OWORD *)(v34 + 3) = 0u;
    *(_OWORD *)(v34 + 5) = 0u;
    *(_OWORD *)(v34 + 7) = 0u;
    *(_OWORD *)(v34 + 9) = 0u;
    v34[11] = 0;
    uint64_t v31 = *((void *)this + 36);
    int v30 = *((_DWORD *)this + 76);
LABEL_374:
    v34[1] = v13;
    if (!v30)
    {
      uint64_t v245 = 0;
      goto LABEL_369;
    }
    int v32 = v30 - 1;
    unsigned int v33 = (v30 - 1) & (v14 ^ (v9 >> 9));
LABEL_24:
    uint64_t v36 = (void *)(v31 + 96 * v33);
    uint64_t v37 = *v36;
    if (v9 == *v36) {
      goto LABEL_25;
    }
    uint64_t v232 = 0;
    int v233 = 1;
    while (v37 != -4096)
    {
      if (v232) {
        BOOL v234 = 0;
      }
      else {
        BOOL v234 = v37 == -8192;
      }
      if (v234) {
        uint64_t v232 = v36;
      }
      unsigned int v235 = v33 + v233++;
      unsigned int v33 = v235 & v32;
      uint64_t v36 = (void *)(v31 + 96 * v33);
      uint64_t v37 = *v36;
      if (v9 == *v36) {
        goto LABEL_25;
      }
    }
    if (v232) {
      uint64_t v245 = v232;
    }
    else {
      uint64_t v245 = v36;
    }
LABEL_369:
    uint64_t v36 = sub_1CC781DB4(v274, &v283, v245);
    *uint64_t v36 = v9;
    *(_OWORD *)(v36 + 1) = 0u;
    *(_OWORD *)(v36 + 3) = 0u;
    *(_OWORD *)(v36 + 5) = 0u;
    *(_OWORD *)(v36 + 7) = 0u;
    *(_OWORD *)(v36 + 9) = 0u;
    v36[11] = 0;
LABEL_25:
    char v277 = v11;
    uint64_t v38 = v10;
    uint64_t v39 = v8;
    v36[3] = v13;
    uint64_t v40 = (void **)((char *)this + 160);
    (*(void (**)(void **__return_ptr))(**(void **)this + 896))(&__src);
    unsigned int v41 = __src;
    if ((void **)((char *)this + 160) == &__src)
    {
      uint64_t v10 = v38;
    }
    else
    {
      if (__src == v286)
      {
        uint64_t v42 = a3;
        int v43 = v285;
        uint64_t v44 = *((unsigned int *)this + 42);
        if (v44 < v285)
        {
          if (*((_DWORD *)this + 43) < v285)
          {
            *((_DWORD *)this + 42) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v44) {
            memmove(*v40, __src, 8 * v44);
          }
          else {
            uint64_t v44 = 0;
          }
          if (v44 != v285) {
            memcpy((char *)*v40 + 8 * v44, (char *)__src + 8 * v44, 8 * v285 - 8 * v44);
          }
        }
        else if (v285)
        {
          memmove(*v40, __src, 8 * v285);
        }
        *((_DWORD *)this + 42) = v43;
        a3 = v42;
      }
      else
      {
        uint64_t v244 = (char *)*((void *)this + 20);
        if (v244 != (char *)this + 176)
        {
          free(v244);
          unsigned int v41 = __src;
        }
        *((void *)this + 20) = v41;
        *((void *)this + 21) = v285;
        __src = v286;
        HIDWORD(v285) = 0;
      }
      uint64_t v8 = v39;
      LODWORD(v285) = 0;
      unsigned int v41 = __src;
      uint64_t v10 = v38;
      char v11 = v277;
    }
    *((_DWORD *)this + 56) = v287;
    *(_OWORD *)((char *)this + 232) = v288;
    *(_OWORD *)((char *)this + 248) = v289[0];
    *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v289 + 11);
    unsigned int v14 = v9 >> 4;
    if (v41 != v286) {
      free(v41);
    }
    int v45 = (*(uint64_t (**)(void, llvm::MachineFunction *))(**(void **)this + 904))(*(void *)this, a2);
    int v46 = *((_DWORD *)this + 76);
    if (v46)
    {
      uint64_t v47 = *((void *)this + 36);
      int v48 = v46 - 1;
      unsigned int v49 = v48 & ((v9 >> 4) ^ (v9 >> 9));
      int v50 = (void *)(v47 + 96 * v49);
      uint64_t v51 = *v50;
      if (v9 == *v50)
      {
LABEL_36:
        *((_DWORD *)v50 + 8) = v45;
        goto LABEL_52;
      }
      uint64_t v240 = 0;
      int v241 = 1;
      while (v51 != -4096)
      {
        if (v240) {
          BOOL v242 = 0;
        }
        else {
          BOOL v242 = v51 == -8192;
        }
        if (v242) {
          uint64_t v240 = v50;
        }
        unsigned int v243 = v49 + v241++;
        unsigned int v49 = v243 & v48;
        int v50 = (void *)(v47 + 96 * v49);
        uint64_t v51 = *v50;
        if (v9 == *v50) {
          goto LABEL_36;
        }
      }
      if (v240) {
        uint64_t v247 = v240;
      }
      else {
        uint64_t v247 = v50;
      }
    }
    else
    {
      uint64_t v247 = 0;
    }
    int v50 = sub_1CC781DB4(v274, &v283, v247);
    *int v50 = v9;
    *(_OWORD *)(v50 + 1) = 0u;
    *(_OWORD *)(v50 + 3) = 0u;
    *(_OWORD *)(v50 + 5) = 0u;
    *(_OWORD *)(v50 + 7) = 0u;
    *(_OWORD *)(v50 + 9) = 0u;
    v50[11] = 0;
    goto LABEL_36;
  }
  switch((*(unsigned __int16 *)(v9 + 18) >> 4) & 0x3FF)
  {
    case 'd':
      int v148 = *((_DWORD *)this + 76);
      if (v148)
      {
        uint64_t v149 = *((void *)this + 36);
        int v150 = v148 - 1;
        unsigned int v151 = v150 & (v14 ^ (v9 >> 9));
        unsigned int v152 = (void *)(v149 + 96 * v151);
        uint64_t v153 = *v152;
        if (v9 == *v152) {
          goto LABEL_113;
        }
        uint64_t v262 = 0;
        int v263 = 1;
        while (v153 != -4096)
        {
          if (v262) {
            BOOL v264 = 0;
          }
          else {
            BOOL v264 = v153 == -8192;
          }
          if (v264) {
            uint64_t v262 = v152;
          }
          unsigned int v265 = v151 + v263++;
          unsigned int v151 = v265 & v150;
          unsigned int v152 = (void *)(v149 + 96 * v151);
          uint64_t v153 = *v152;
          if (v9 == *v152)
          {
LABEL_113:
            if (!*((unsigned char *)v152 + 20)) {
              *((unsigned char *)v152 + 20) = 1;
            }
            *((_DWORD *)v152 + 4) = v13;
            uint64_t v154 = *((void *)a2 + 6);
            if (!v154)
            {
              uint64_t v154 = (*(uint64_t (**)(void, char *, llvm::MachineFunction *))(**((void **)a2 + 1) + 216))(*((void *)a2 + 1), (char *)a2 + 128, a2);
              *((void *)a2 + 6) = v154;
            }
            if (*(unsigned char *)(v154 + 12)) {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v8 + 8))(v8, 40, 1, 1, 0, 1, 2);
            }
            *((_DWORD *)this + 42) = 0;
            *((_DWORD *)this + 56) = 0;
            *(_OWORD *)((char *)this + 232) = 0u;
            *(_OWORD *)((char *)this + 248) = 0u;
            *(_OWORD *)((char *)this + 259) = 0u;
            goto LABEL_52;
          }
        }
        if (v262) {
          uint64_t v272 = v262;
        }
        else {
          uint64_t v272 = v152;
        }
      }
      else
      {
        uint64_t v272 = 0;
      }
      unsigned int v152 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v272);
      void *v152 = v9;
      *(_OWORD *)(v152 + 1) = 0u;
      *(_OWORD *)(v152 + 3) = 0u;
      *(_OWORD *)(v152 + 5) = 0u;
      *(_OWORD *)(v152 + 7) = 0u;
      *(_OWORD *)(v152 + 9) = 0u;
      v152[11] = 0;
      goto LABEL_113;
    case 'e':
    case 'g':
    case 'h':
    case 'l':
      int v15 = *((_DWORD *)this + 76);
      if (!v15)
      {
        uint64_t v230 = 0;
LABEL_326:
        uint64_t v19 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v230);
        *uint64_t v19 = v9;
        *(_OWORD *)(v19 + 1) = 0u;
        *(_OWORD *)(v19 + 3) = 0u;
        *(_OWORD *)(v19 + 5) = 0u;
        *(_OWORD *)(v19 + 7) = 0u;
        *(_OWORD *)(v19 + 9) = 0u;
        v19[11] = 0;
        goto LABEL_18;
      }
      uint64_t v16 = *((void *)this + 36);
      int v17 = v15 - 1;
      unsigned int v18 = v17 & (v14 ^ (v9 >> 9));
      uint64_t v19 = (void *)(v16 + 96 * v18);
      uint64_t v20 = *v19;
      if (v9 == *v19) {
        goto LABEL_18;
      }
      unsigned int v222 = 0;
      int v223 = 1;
      do
      {
        if (v20 == -4096)
        {
          if (v222) {
            uint64_t v230 = v222;
          }
          else {
            uint64_t v230 = v19;
          }
          goto LABEL_326;
        }
        if (v222) {
          BOOL v224 = 0;
        }
        else {
          BOOL v224 = v20 == -8192;
        }
        if (v224) {
          unsigned int v222 = v19;
        }
        unsigned int v225 = v18 + v223++;
        unsigned int v18 = v225 & v17;
        uint64_t v19 = (void *)(v16 + 96 * v18);
        uint64_t v20 = *v19;
      }
      while (v9 != *v19);
LABEL_18:
      v19[1] = v13;
      uint64_t v21 = (*(unsigned int (**)(void, llvm::MachineFunction *))(**(void **)this + 112))(*(void *)this, a2);
      int v22 = *((_DWORD *)this + 76);
      if (v22)
      {
        uint64_t v23 = *((void *)this + 36);
        int v24 = v22 - 1;
        unsigned int v25 = v24 & (v14 ^ (v9 >> 9));
        unsigned int v26 = (void *)(v23 + 96 * v25);
        uint64_t v27 = *v26;
        if (v9 == *v26) {
          goto LABEL_20;
        }
        int v226 = 0;
        int v227 = 1;
        while (v27 != -4096)
        {
          if (v226) {
            BOOL v228 = 0;
          }
          else {
            BOOL v228 = v27 == -8192;
          }
          if (v228) {
            int v226 = v26;
          }
          unsigned int v229 = v25 + v227++;
          unsigned int v25 = v229 & v24;
          unsigned int v26 = (void *)(v23 + 96 * v25);
          uint64_t v27 = *v26;
          if (v9 == *v26) {
            goto LABEL_20;
          }
        }
        if (v226) {
          uint64_t v231 = v226;
        }
        else {
          uint64_t v231 = v26;
        }
      }
      else
      {
        uint64_t v231 = 0;
      }
      unsigned int v26 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v231);
      *unsigned int v26 = v9;
      *(_OWORD *)(v26 + 1) = 0u;
      *(_OWORD *)(v26 + 3) = 0u;
      *(_OWORD *)(v26 + 5) = 0u;
      *(_OWORD *)(v26 + 7) = 0u;
      *(_OWORD *)(v26 + 9) = 0u;
      v26[11] = 0;
LABEL_20:
      unsigned int v275 = v9 >> 4;
      char v276 = v11;
      uint64_t v28 = v10;
      uint64_t v29 = v8;
      void v26[3] = v21;
LABEL_42:
      uint64_t v65 = (void **)((char *)this + 160);
      (*(void (**)(void **__return_ptr))(**(void **)this + 896))(&__src);
      uint64_t v66 = __src;
      if ((void **)((char *)this + 160) == &__src)
      {
        uint64_t v8 = v29;
      }
      else
      {
        if (__src == v286)
        {
          uint64_t v67 = a3;
          int v68 = v285;
          uint64_t v69 = *((unsigned int *)this + 42);
          if (v69 < v285)
          {
            if (*((_DWORD *)this + 43) < v285)
            {
              *((_DWORD *)this + 42) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v69) {
              memmove(*v65, __src, 8 * v69);
            }
            else {
              uint64_t v69 = 0;
            }
            if (v69 != v285) {
              memcpy((char *)*v65 + 8 * v69, (char *)__src + 8 * v69, 8 * v285 - 8 * v69);
            }
            *((_DWORD *)this + 42) = v68;
            a3 = v67;
          }
          else
          {
            a3 = v67;
            if (v285) {
              memmove(*v65, __src, 8 * v285);
            }
            *((_DWORD *)this + 42) = v68;
          }
        }
        else
        {
          __int16 v221 = (char *)*((void *)this + 20);
          if (v221 != (char *)this + 176)
          {
            free(v221);
            uint64_t v66 = __src;
          }
          *((void *)this + 20) = v66;
          *((void *)this + 21) = v285;
          __src = v286;
          HIDWORD(v285) = 0;
        }
        uint64_t v8 = v29;
        LODWORD(v285) = 0;
        uint64_t v66 = __src;
      }
      uint64_t v10 = v28;
      *((_DWORD *)this + 56) = v287;
      *(_OWORD *)((char *)this + 232) = v288;
      *(_OWORD *)((char *)this + 248) = v289[0];
      *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v289 + 11);
      unsigned int v14 = v275;
      if (v66 != v286) {
        free(v66);
      }
      char v11 = v276;
LABEL_52:
      uint64_t v70 = *((void *)this + 29);
      int v71 = *((_DWORD *)this + 76);
      if (v71)
      {
        uint64_t v72 = *((void *)this + 36);
        int v73 = v71 - 1;
        unsigned int v74 = (v14 ^ (v9 >> 9)) & (v71 - 1);
        uint64_t v75 = (void *)(v72 + 96 * v74);
        uint64_t v76 = *v75;
        if (v9 == *v75)
        {
          v75[6] |= v70;
          uint64_t v77 = *((void *)this + 30);
          goto LABEL_55;
        }
        int v193 = 0;
        int v194 = 1;
        while (v76 != -4096)
        {
          if (v193) {
            BOOL v195 = 0;
          }
          else {
            BOOL v195 = v76 == -8192;
          }
          if (v195) {
            int v193 = v75;
          }
          unsigned int v196 = v74 + v194++;
          unsigned int v74 = v196 & v73;
          uint64_t v75 = (void *)(v72 + 96 * v74);
          uint64_t v76 = *v75;
          if (v9 == *v75) {
            goto LABEL_280;
          }
        }
        if (v193) {
          uint64_t v217 = v193;
        }
        else {
          uint64_t v217 = v75;
        }
      }
      else
      {
        uint64_t v217 = 0;
      }
      uint64_t v75 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v217);
      *uint64_t v75 = v9;
      *(_OWORD *)(v75 + 1) = 0u;
      *(_OWORD *)(v75 + 3) = 0u;
      *(_OWORD *)(v75 + 5) = 0u;
      *(_OWORD *)(v75 + 7) = 0u;
      *(_OWORD *)(v75 + 9) = 0u;
      v75[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_280:
      v75[6] |= v70;
      uint64_t v77 = *((void *)this + 30);
      if (v71)
      {
        int v73 = v71 - 1;
        unsigned int v74 = (v14 ^ (v9 >> 9)) & (v71 - 1);
LABEL_55:
        long long v78 = (void *)(v72 + 96 * v74);
        uint64_t v79 = *v78;
        if (v9 == *v78)
        {
          v78[7] |= v77;
          uint64_t v80 = *((void *)this + 31);
          goto LABEL_57;
        }
        uint64_t v161 = 0;
        int v162 = 1;
        while (v79 != -4096)
        {
          if (v161) {
            BOOL v163 = 0;
          }
          else {
            BOOL v163 = v79 == -8192;
          }
          if (v163) {
            uint64_t v161 = v78;
          }
          unsigned int v164 = v74 + v162++;
          unsigned int v74 = v164 & v73;
          long long v78 = (void *)(v72 + 96 * v74);
          uint64_t v79 = *v78;
          if (v9 == *v78) {
            goto LABEL_235;
          }
        }
        if (v161) {
          uint64_t v209 = v161;
        }
        else {
          uint64_t v209 = v78;
        }
      }
      else
      {
        uint64_t v209 = 0;
      }
      long long v78 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v209);
      *long long v78 = v9;
      *(_OWORD *)(v78 + 1) = 0u;
      *(_OWORD *)(v78 + 3) = 0u;
      *(_OWORD *)(v78 + 5) = 0u;
      *(_OWORD *)(v78 + 7) = 0u;
      *(_OWORD *)(v78 + 9) = 0u;
      v78[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_235:
      v78[7] |= v77;
      uint64_t v80 = *((void *)this + 31);
      if (v71)
      {
        int v73 = v71 - 1;
        unsigned int v74 = (v14 ^ (v9 >> 9)) & (v71 - 1);
LABEL_57:
        uint64_t v81 = (void *)(v72 + 96 * v74);
        uint64_t v82 = *v81;
        if (v9 == *v81)
        {
          v81[8] |= v80;
          uint64_t v83 = *((void *)this + 32);
          uint64_t v84 = v283;
          goto LABEL_59;
        }
        uint64_t v165 = 0;
        int v166 = 1;
        while (v82 != -4096)
        {
          if (v165) {
            BOOL v167 = 0;
          }
          else {
            BOOL v167 = v82 == -8192;
          }
          if (v167) {
            uint64_t v165 = v81;
          }
          unsigned int v168 = v74 + v166++;
          unsigned int v74 = v168 & v73;
          uint64_t v81 = (void *)(v72 + 96 * v74);
          uint64_t v82 = *v81;
          if (v9 == *v81) {
            goto LABEL_242;
          }
        }
        if (v165) {
          uint64_t v210 = v165;
        }
        else {
          uint64_t v210 = v81;
        }
        uint64_t v9 = v283;
      }
      else
      {
        uint64_t v210 = 0;
      }
      uint64_t v81 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v210);
      *uint64_t v81 = v9;
      *(_OWORD *)(v81 + 1) = 0u;
      *(_OWORD *)(v81 + 3) = 0u;
      *(_OWORD *)(v81 + 5) = 0u;
      *(_OWORD *)(v81 + 7) = 0u;
      *(_OWORD *)(v81 + 9) = 0u;
      v81[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_242:
      v81[8] |= v80;
      uint64_t v83 = *((void *)this + 32);
      uint64_t v84 = v283;
      if (v71)
      {
        int v73 = v71 - 1;
LABEL_59:
        unsigned int v85 = ((v84 >> 4) ^ (v84 >> 9)) & v73;
        uint64_t v86 = (void *)(v72 + 96 * v85);
        uint64_t v87 = *v86;
        if (v84 == *v86)
        {
          v86[9] |= v83;
          char v88 = *((unsigned char *)this + 273);
          goto LABEL_61;
        }
        uint64_t v169 = 0;
        int v170 = 1;
        while (v87 != -4096)
        {
          if (v169) {
            BOOL v171 = 0;
          }
          else {
            BOOL v171 = v87 == -8192;
          }
          if (v171) {
            uint64_t v169 = v86;
          }
          unsigned int v172 = v85 + v170++;
          unsigned int v85 = v172 & v73;
          uint64_t v86 = (void *)(v72 + 96 * v85);
          uint64_t v87 = *v86;
          if (v84 == *v86) {
            goto LABEL_248;
          }
        }
        if (v169) {
          uint64_t v211 = v169;
        }
        else {
          uint64_t v211 = v86;
        }
      }
      else
      {
        uint64_t v211 = 0;
      }
      uint64_t v86 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v211);
      *uint64_t v86 = v84;
      *(_OWORD *)(v86 + 1) = 0u;
      *(_OWORD *)(v86 + 3) = 0u;
      *(_OWORD *)(v86 + 5) = 0u;
      *(_OWORD *)(v86 + 7) = 0u;
      *(_OWORD *)(v86 + 9) = 0u;
      v86[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_248:
      v86[9] |= v83;
      char v88 = *((unsigned char *)this + 273);
      if (v71)
      {
        int v73 = v71 - 1;
        unsigned int v85 = ((v84 >> 4) ^ (v84 >> 9)) & (v71 - 1);
LABEL_61:
        uint64_t v89 = (void *)(v72 + 96 * v85);
        uint64_t v90 = *v89;
        if (v84 == *v89)
        {
          *((unsigned char *)v89 + 80) |= v88;
          char v91 = *((unsigned char *)this + 274);
          goto LABEL_63;
        }
        uint64_t v173 = 0;
        int v174 = 1;
        while (v90 != -4096)
        {
          if (v173) {
            BOOL v175 = 0;
          }
          else {
            BOOL v175 = v90 == -8192;
          }
          if (v175) {
            uint64_t v173 = v89;
          }
          unsigned int v176 = v85 + v174++;
          unsigned int v85 = v176 & v73;
          uint64_t v89 = (void *)(v72 + 96 * v85);
          uint64_t v90 = *v89;
          if (v84 == *v89) {
            goto LABEL_254;
          }
        }
        if (v173) {
          uint64_t v212 = v173;
        }
        else {
          uint64_t v212 = v89;
        }
      }
      else
      {
        uint64_t v212 = 0;
      }
      uint64_t v89 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v212);
      *uint64_t v89 = v84;
      *(_OWORD *)(v89 + 1) = 0u;
      *(_OWORD *)(v89 + 3) = 0u;
      *(_OWORD *)(v89 + 5) = 0u;
      *(_OWORD *)(v89 + 7) = 0u;
      *(_OWORD *)(v89 + 9) = 0u;
      v89[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_254:
      *((unsigned char *)v89 + 80) |= v88;
      char v91 = *((unsigned char *)this + 274);
      if (v71)
      {
        int v73 = v71 - 1;
        unsigned int v85 = ((v84 >> 4) ^ (v84 >> 9)) & (v71 - 1);
LABEL_63:
        uint64_t v92 = (void *)(v72 + 96 * v85);
        uint64_t v93 = *v92;
        if (v84 == *v92)
        {
          *((unsigned char *)v92 + 81) |= v91;
          int v94 = *((_DWORD *)this + 66);
          goto LABEL_65;
        }
        unsigned int v177 = 0;
        int v178 = 1;
        while (v93 != -4096)
        {
          if (v177) {
            BOOL v179 = 0;
          }
          else {
            BOOL v179 = v93 == -8192;
          }
          if (v179) {
            unsigned int v177 = v92;
          }
          unsigned int v180 = v85 + v178++;
          unsigned int v85 = v180 & v73;
          uint64_t v92 = (void *)(v72 + 96 * v85);
          uint64_t v93 = *v92;
          if (v84 == *v92) {
            goto LABEL_260;
          }
        }
        if (v177) {
          unint64_t v213 = v177;
        }
        else {
          unint64_t v213 = v92;
        }
      }
      else
      {
        unint64_t v213 = 0;
      }
      uint64_t v92 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v213);
      *uint64_t v92 = v84;
      *(_OWORD *)(v92 + 1) = 0u;
      *(_OWORD *)(v92 + 3) = 0u;
      *(_OWORD *)(v92 + 5) = 0u;
      *(_OWORD *)(v92 + 7) = 0u;
      *(_OWORD *)(v92 + 9) = 0u;
      v92[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_260:
      *((unsigned char *)v92 + 81) |= v91;
      int v94 = *((_DWORD *)this + 66);
      if (v71)
      {
        int v73 = v71 - 1;
        unsigned int v85 = ((v84 >> 4) ^ (v84 >> 9)) & (v71 - 1);
LABEL_65:
        uint64_t v95 = (void *)(v72 + 96 * v85);
        uint64_t v96 = *v95;
        if (v84 == *v95)
        {
          *((_DWORD *)v95 + 21) += v94;
          char v97 = *((unsigned char *)this + 272);
          goto LABEL_67;
        }
        uint64_t v181 = 0;
        int v182 = 1;
        while (v96 != -4096)
        {
          if (v181) {
            BOOL v183 = 0;
          }
          else {
            BOOL v183 = v96 == -8192;
          }
          if (v183) {
            uint64_t v181 = v95;
          }
          unsigned int v184 = v85 + v182++;
          unsigned int v85 = v184 & v73;
          uint64_t v95 = (void *)(v72 + 96 * v85);
          uint64_t v96 = *v95;
          if (v84 == *v95) {
            goto LABEL_266;
          }
        }
        if (v181) {
          uint64_t v214 = v181;
        }
        else {
          uint64_t v214 = v95;
        }
      }
      else
      {
        uint64_t v214 = 0;
      }
      uint64_t v95 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v214);
      *uint64_t v95 = v84;
      *(_OWORD *)(v95 + 1) = 0u;
      *(_OWORD *)(v95 + 3) = 0u;
      *(_OWORD *)(v95 + 5) = 0u;
      *(_OWORD *)(v95 + 7) = 0u;
      *(_OWORD *)(v95 + 9) = 0u;
      v95[11] = 0;
      uint64_t v72 = *((void *)this + 36);
      int v71 = *((_DWORD *)this + 76);
LABEL_266:
      *((_DWORD *)v95 + 21) += v94;
      char v97 = *((unsigned char *)this + 272);
      if (!v71)
      {
        uint64_t v215 = 0;
LABEL_271:
        uint64_t v98 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v215);
        *uint64_t v98 = v84;
        *(_OWORD *)(v98 + 1) = 0u;
        *(_OWORD *)(v98 + 3) = 0u;
        *(_OWORD *)(v98 + 5) = 0u;
        *(_OWORD *)(v98 + 7) = 0u;
        *(_OWORD *)(v98 + 9) = 0u;
        v98[11] = 0;
        goto LABEL_68;
      }
      int v73 = v71 - 1;
      unsigned int v85 = ((v84 >> 4) ^ (v84 >> 9)) & (v71 - 1);
LABEL_67:
      uint64_t v98 = (void *)(v72 + 96 * v85);
      uint64_t v99 = *v98;
      if (v84 != *v98)
      {
        unint64_t v185 = 0;
        int v186 = 1;
        while (v99 != -4096)
        {
          if (v185) {
            BOOL v187 = 0;
          }
          else {
            BOOL v187 = v99 == -8192;
          }
          if (v187) {
            unint64_t v185 = v98;
          }
          unsigned int v188 = v85 + v186++;
          unsigned int v85 = v188 & v73;
          uint64_t v98 = (void *)(v72 + 96 * v85);
          uint64_t v99 = *v98;
          if (v84 == *v98) {
            goto LABEL_68;
          }
        }
        if (v185) {
          uint64_t v215 = v185;
        }
        else {
          uint64_t v215 = v98;
        }
        goto LABEL_271;
      }
LABEL_68:
      *((unsigned char *)v98 + 88) |= v97;
      unsigned int v100 = *(unsigned __int16 *)(*(void *)a2 + 18);
      if ((v100 & 0x3FF0) != 0x640 && ((v100 >> 4) & 0x3FF) - 109 >= 0xFFFFFFF7) {
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v8 + 8))(v8, 10, *((unsigned int *)this + 67), 1, 0, 1, 1);
      }
      __src = "agx.asm_statistics";
      v286[8] = 259;
      if (llvm::Module::getNamedMetadata((llvm::Module *)v10, (const char **)&__src)
        || (uint64_t v280 = "agx.compiler_counters", v281 = 259, llvm::Module::getNamedMetadata((llvm::Module *)v10, &v280))
        || (unint64_t v278 = "agx.telemetry_statistics", v279 = 259, llvm::Module::getNamedMetadata((llvm::Module *)v10, &v278)))
      {
        (***(void (****)(void, llvm::MachineFunction *, const llvm::MachineLoopInfo *, uint64_t))this)(*(void *)this, a2, a3, v10 + 272);
      }
      if ((v11 & 0x1E) == 0x1C) {
        (*(void (**)(void, llvm::MachineFunction *))(**(void **)this + 880))(*(void *)this, a2);
      }
      char v102 = (*(uint64_t (**)(void, llvm::MachineFunction *))(**(void **)this + 104))(*(void *)this, a2);
      int v103 = *((_DWORD *)this + 76);
      unsigned int v104 = v84 >> 4;
      if (v103)
      {
        uint64_t v105 = *((void *)this + 36);
        int v106 = v103 - 1;
        unsigned int v107 = (v104 ^ (v84 >> 9)) & (v103 - 1);
        uint64_t v108 = (void *)(v105 + 96 * v107);
        uint64_t v109 = *v108;
        if (v84 == *v108)
        {
          *((unsigned char *)v108 + 89) |= v102;
          uint64_t v110 = *(void *)this;
          goto LABEL_83;
        }
        uint64_t v197 = 0;
        int v198 = 1;
        while (v109 != -4096)
        {
          if (v197) {
            BOOL v199 = 0;
          }
          else {
            BOOL v199 = v109 == -8192;
          }
          if (v199) {
            uint64_t v197 = v108;
          }
          unsigned int v200 = v107 + v198++;
          unsigned int v107 = v200 & v106;
          uint64_t v108 = (void *)(v105 + 96 * v107);
          uint64_t v109 = *v108;
          if (v84 == *v108) {
            goto LABEL_286;
          }
        }
        if (v197) {
          uint64_t v218 = v197;
        }
        else {
          uint64_t v218 = v108;
        }
      }
      else
      {
        uint64_t v218 = 0;
      }
      uint64_t v108 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v218);
      void *v108 = v84;
      *(_OWORD *)(v108 + 1) = 0u;
      *(_OWORD *)(v108 + 3) = 0u;
      *(_OWORD *)(v108 + 5) = 0u;
      *(_OWORD *)(v108 + 7) = 0u;
      *(_OWORD *)(v108 + 9) = 0u;
      v108[11] = 0;
      uint64_t v105 = *((void *)this + 36);
      int v103 = *((_DWORD *)this + 76);
LABEL_286:
      *((unsigned char *)v108 + 89) |= v102;
      uint64_t v110 = *(void *)this;
      if (!v103)
      {
        uint64_t v216 = 0;
LABEL_275:
        uint64_t v111 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v216);
        *uint64_t v111 = v84;
        *(_OWORD *)(v111 + 1) = 0u;
        *(_OWORD *)(v111 + 3) = 0u;
        *(_OWORD *)(v111 + 5) = 0u;
        *(_OWORD *)(v111 + 7) = 0u;
        *(_OWORD *)(v111 + 9) = 0u;
        v111[11] = 0;
        goto LABEL_84;
      }
      int v106 = v103 - 1;
      unsigned int v107 = (v104 ^ (v84 >> 9)) & (v103 - 1);
LABEL_83:
      uint64_t v111 = (void *)(v105 + 96 * v107);
      uint64_t v112 = *v111;
      if (v84 != *v111)
      {
        uint64_t v189 = 0;
        int v190 = 1;
        while (v112 != -4096)
        {
          if (v189) {
            BOOL v191 = 0;
          }
          else {
            BOOL v191 = v112 == -8192;
          }
          if (v191) {
            uint64_t v189 = v111;
          }
          unsigned int v192 = v107 + v190++;
          unsigned int v107 = v192 & v106;
          uint64_t v111 = (void *)(v105 + 96 * v107);
          uint64_t v112 = *v111;
          if (v84 == *v111) {
            goto LABEL_84;
          }
        }
        if (v189) {
          uint64_t v216 = v189;
        }
        else {
          uint64_t v216 = v111;
        }
        goto LABEL_275;
      }
LABEL_84:
      uint64_t v113 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *, void))(*(void *)v110 + 232))(v110, a2, (2 * *((_DWORD *)v111 + 2)));
      int v114 = *((_DWORD *)this + 76);
      uint64_t v115 = v283;
      unsigned int v116 = v283 >> 4;
      if (v114)
      {
        uint64_t v117 = *((void *)this + 36);
        int v118 = v114 - 1;
        unsigned int v119 = (v116 ^ (v283 >> 9)) & v118;
        uint64_t v120 = (void *)(v117 + 96 * v119);
        uint64_t v121 = *v120;
        if (v283 == *v120) {
          goto LABEL_86;
        }
        int v201 = 0;
        int v202 = 1;
        while (v121 != -4096)
        {
          if (v201) {
            BOOL v203 = 0;
          }
          else {
            BOOL v203 = v121 == -8192;
          }
          if (v203) {
            int v201 = v120;
          }
          unsigned int v204 = v119 + v202++;
          unsigned int v119 = v204 & v118;
          uint64_t v120 = (void *)(v117 + 96 * v119);
          uint64_t v121 = *v120;
          if (v283 == *v120) {
            goto LABEL_86;
          }
        }
        if (v201) {
          uint64_t v219 = v201;
        }
        else {
          uint64_t v219 = v120;
        }
      }
      else
      {
        uint64_t v219 = 0;
      }
      uint64_t v120 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v219);
      *uint64_t v120 = v115;
      *(_OWORD *)(v120 + 1) = 0u;
      *(_OWORD *)(v120 + 3) = 0u;
      *(_OWORD *)(v120 + 5) = 0u;
      *(_OWORD *)(v120 + 7) = 0u;
      *(_OWORD *)(v120 + 9) = 0u;
      v120[11] = 0;
LABEL_86:
      *(void *)((char *)v120 + 36) = v113;
      char v122 = (*(uint64_t (**)(void, llvm::MachineFunction *))(**(void **)this + 968))(*(void *)this, a2);
      int v123 = *((_DWORD *)this + 76);
      if (!v123)
      {
        unint64_t v220 = 0;
LABEL_295:
        int v127 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v220);
        void *v127 = v115;
        *(_OWORD *)(v127 + 1) = 0u;
        *(_OWORD *)(v127 + 3) = 0u;
        *(_OWORD *)(v127 + 5) = 0u;
        *(_OWORD *)(v127 + 7) = 0u;
        *(_OWORD *)(v127 + 9) = 0u;
        v127[11] = 0;
        goto LABEL_88;
      }
      uint64_t v124 = *((void *)this + 36);
      int v125 = v123 - 1;
      unsigned int v126 = (v116 ^ (v115 >> 9)) & v125;
      int v127 = (void *)(v124 + 96 * v126);
      uint64_t v128 = *v127;
      if (v115 != *v127)
      {
        uint64_t v205 = 0;
        int v206 = 1;
        while (v128 != -4096)
        {
          if (v205) {
            BOOL v207 = 0;
          }
          else {
            BOOL v207 = v128 == -8192;
          }
          if (v207) {
            uint64_t v205 = v127;
          }
          unsigned int v208 = v126 + v206++;
          unsigned int v126 = v208 & v125;
          int v127 = (void *)(v124 + 96 * v126);
          uint64_t v128 = *v127;
          if (v115 == *v127) {
            goto LABEL_88;
          }
        }
        if (v205) {
          unint64_t v220 = v205;
        }
        else {
          unint64_t v220 = v127;
        }
        goto LABEL_295;
      }
LABEL_88:
      *((unsigned char *)v127 + 90) = v122;
      uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 600))(v8, v115);
      if (v129)
      {
        uint64_t v130 = v129;
        unsigned int v131 = (_DWORD *)((char *)this + 8);
        __src = 0;
        if ((sub_1CC782058((uint64_t)this + 8, v129, &__src) & 1) == 0)
        {
          int v132 = *v131 >> 1;
          if (*v131) {
            unsigned int v133 = 8;
          }
          else {
            unsigned int v133 = *((_DWORD *)this + 6);
          }
          if (4 * v132 + 4 >= 3 * v133)
          {
            v133 *= 2;
          }
          else if (v133 + ~v132 - *((_DWORD *)this + 3) > v133 >> 3)
          {
            goto LABEL_95;
          }
          sub_1CD63AECC((uint64_t)this + 8, v133);
          __src = 0;
          sub_1CC782058((uint64_t)this + 8, v130, &__src);
LABEL_95:
          unsigned int v134 = __src;
          *v131 += 2;
          if (*v134 != -4096) {
            --*((_DWORD *)this + 3);
          }
          *unsigned int v134 = v130;
          unsigned int v135 = *((_DWORD *)this + 22);
          if (v135 >= *((_DWORD *)this + 23)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)this + 10) + 8 * v135) = v130;
          ++*((_DWORD *)this + 22);
        }
      }
      return 0;
    case 'f':
    case 'j':
      int v52 = *((_DWORD *)this + 76);
      if (v52)
      {
        uint64_t v53 = *((void *)this + 36);
        int v54 = v52 - 1;
        unsigned int v55 = v54 & (v14 ^ (v9 >> 9));
        int v56 = (void *)(v53 + 96 * v55);
        uint64_t v57 = *v56;
        if (v9 == *v56) {
          goto LABEL_39;
        }
        uint64_t v248 = 0;
        int v249 = 1;
        while (v57 != -4096)
        {
          if (v248) {
            BOOL v250 = 0;
          }
          else {
            BOOL v250 = v57 == -8192;
          }
          if (v250) {
            uint64_t v248 = v56;
          }
          unsigned int v251 = v55 + v249++;
          unsigned int v55 = v251 & v54;
          int v56 = (void *)(v53 + 96 * v55);
          uint64_t v57 = *v56;
          if (v9 == *v56)
          {
LABEL_39:
            v56[1] = v13;
            int v58 = (*(uint64_t (**)(void, llvm::MachineFunction *))(**(void **)this + 904))(*(void *)this, a2);
            int v59 = *((_DWORD *)this + 76);
            if (v59)
            {
              uint64_t v60 = *((void *)this + 36);
              int v61 = v59 - 1;
              unsigned int v62 = v61 & (v14 ^ (v9 >> 9));
              uint64_t v63 = (void *)(v60 + 96 * v62);
              uint64_t v64 = *v63;
              if (v9 == *v63)
              {
LABEL_41:
                unsigned int v275 = v9 >> 4;
                char v276 = v11;
                uint64_t v28 = v10;
                uint64_t v29 = v8;
                *((_DWORD *)v63 + 8) = v58;
                goto LABEL_42;
              }
              uint64_t v252 = 0;
              int v253 = 1;
              while (v64 != -4096)
              {
                if (v252) {
                  BOOL v254 = 0;
                }
                else {
                  BOOL v254 = v64 == -8192;
                }
                if (v254) {
                  uint64_t v252 = v63;
                }
                unsigned int v255 = v62 + v253++;
                unsigned int v62 = v255 & v61;
                uint64_t v63 = (void *)(v60 + 96 * v62);
                uint64_t v64 = *v63;
                if (v9 == *v63) {
                  goto LABEL_41;
                }
              }
              if (v252) {
                unint64_t v257 = v252;
              }
              else {
                unint64_t v257 = v63;
              }
            }
            else
            {
              unint64_t v257 = 0;
            }
            uint64_t v63 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v257);
            *uint64_t v63 = v9;
            *(_OWORD *)(v63 + 1) = 0u;
            *(_OWORD *)(v63 + 3) = 0u;
            *(_OWORD *)(v63 + 5) = 0u;
            *(_OWORD *)(v63 + 7) = 0u;
            *(_OWORD *)(v63 + 9) = 0u;
            v63[11] = 0;
            goto LABEL_41;
          }
        }
        if (v248) {
          uint64_t v256 = v248;
        }
        else {
          uint64_t v256 = v56;
        }
      }
      else
      {
        uint64_t v256 = 0;
      }
      int v56 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v256);
      *int v56 = v9;
      *(_OWORD *)(v56 + 1) = 0u;
      *(_OWORD *)(v56 + 3) = 0u;
      *(_OWORD *)(v56 + 5) = 0u;
      *(_OWORD *)(v56 + 7) = 0u;
      *(_OWORD *)(v56 + 9) = 0u;
      v56[11] = 0;
      goto LABEL_39;
    case 'i':
      int v137 = *((_DWORD *)this + 76);
      if (v137)
      {
        uint64_t v138 = *((void *)this + 36);
        int v139 = v137 - 1;
        unsigned int v140 = v139 & (v14 ^ (v9 >> 9));
        BOOL v141 = (void *)(v138 + 96 * v140);
        uint64_t v142 = *v141;
        if (v9 == *v141) {
          goto LABEL_102;
        }
        int v258 = 0;
        int v259 = 1;
        while (v142 != -4096)
        {
          if (v258) {
            BOOL v260 = 0;
          }
          else {
            BOOL v260 = v142 == -8192;
          }
          if (v260) {
            int v258 = v141;
          }
          unsigned int v261 = v140 + v259++;
          unsigned int v140 = v261 & v139;
          BOOL v141 = (void *)(v138 + 96 * v140);
          uint64_t v142 = *v141;
          if (v9 == *v141)
          {
LABEL_102:
            v141[1] = v13;
            int v143 = (void **)((char *)this + 160);
            (*(void (**)(void **__return_ptr))(**(void **)this + 896))(&__src);
            uint64_t v144 = __src;
            if ((void **)((char *)this + 160) != &__src)
            {
              if (__src == v286)
              {
                char v145 = v11;
                int v146 = v285;
                uint64_t v147 = *((unsigned int *)this + 42);
                if (v147 < v285)
                {
                  if (*((_DWORD *)this + 43) < v285)
                  {
                    *((_DWORD *)this + 42) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v147) {
                    memmove(*v143, __src, 8 * v147);
                  }
                  else {
                    uint64_t v147 = 0;
                  }
                  if (v147 != v285) {
                    memcpy((char *)*v143 + 8 * v147, (char *)__src + 8 * v147, 8 * v285 - 8 * v147);
                  }
                }
                else if (v285)
                {
                  memmove(*v143, __src, 8 * v285);
                }
                *((_DWORD *)this + 42) = v146;
                char v11 = v145;
                unsigned int v14 = v9 >> 4;
              }
              else
              {
                uint64_t v270 = (char *)*((void *)this + 20);
                if (v270 != (char *)this + 176)
                {
                  free(v270);
                  uint64_t v144 = __src;
                }
                *((void *)this + 20) = v144;
                *((void *)this + 21) = v285;
                __src = v286;
                HIDWORD(v285) = 0;
              }
              LODWORD(v285) = 0;
              uint64_t v144 = __src;
            }
            *((_DWORD *)this + 56) = v287;
            *(_OWORD *)((char *)this + 232) = v288;
            *(_OWORD *)((char *)this + 248) = v289[0];
            *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v289 + 11);
            if (v144 != v286) {
              free(v144);
            }
            goto LABEL_52;
          }
        }
        if (v258) {
          unsigned int v271 = v258;
        }
        else {
          unsigned int v271 = v141;
        }
      }
      else
      {
        unsigned int v271 = 0;
      }
      BOOL v141 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v271);
      void *v141 = v9;
      *(_OWORD *)(v141 + 1) = 0u;
      *(_OWORD *)(v141 + 3) = 0u;
      *(_OWORD *)(v141 + 5) = 0u;
      *(_OWORD *)(v141 + 7) = 0u;
      *(_OWORD *)(v141 + 9) = 0u;
      v141[11] = 0;
      goto LABEL_102;
    case 'k':
      int v155 = *((_DWORD *)this + 76);
      if (v155)
      {
        uint64_t v156 = *((void *)this + 36);
        int v157 = v155 - 1;
        unsigned int v158 = v157 & (v14 ^ (v9 >> 9));
        uint64_t v159 = (void *)(v156 + 96 * v158);
        uint64_t v160 = *v159;
        if (v9 == *v159) {
          goto LABEL_122;
        }
        __int16 v266 = 0;
        int v267 = 1;
        while (v160 != -4096)
        {
          if (v266) {
            BOOL v268 = 0;
          }
          else {
            BOOL v268 = v160 == -8192;
          }
          if (v268) {
            __int16 v266 = v159;
          }
          unsigned int v269 = v158 + v267++;
          unsigned int v158 = v269 & v157;
          uint64_t v159 = (void *)(v156 + 96 * v158);
          uint64_t v160 = *v159;
          if (v9 == *v159)
          {
LABEL_122:
            v159[1] = v13;
            goto LABEL_52;
          }
        }
        if (v266) {
          unsigned int v273 = v266;
        }
        else {
          unsigned int v273 = v159;
        }
      }
      else
      {
        unsigned int v273 = 0;
      }
      uint64_t v159 = sub_1CC781DB4((_DWORD *)this + 72, &v283, v273);
      *uint64_t v159 = v9;
      *(_OWORD *)(v159 + 1) = 0u;
      *(_OWORD *)(v159 + 3) = 0u;
      *(_OWORD *)(v159 + 5) = 0u;
      *(_OWORD *)(v159 + 7) = 0u;
      *(_OWORD *)(v159 + 9) = 0u;
      v159[11] = 0;
      goto LABEL_122;
    default:
      goto LABEL_21;
  }
}

const char *llvm::GPUMetadataEmitter::processFunctionGroup(llvm::GPUMetadataEmitter *this, llvm::Module *a2, llvm::FunctionGroup *a3, llvm::MCContext *a4, llvm::MCStreamer *a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (!(**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4)&& !(**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))a3)(a3, 18, 0, 1, 4))
  {
    goto LABEL_80;
  }
  unint64_t v70 = 1;
  for (uint64_t i = 8; i != 72; i += 16)
    *(unint64_t *)((char *)&v70 + i) = -4096;
  uint64_t v66 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)a3 + 568))(a3);
  uint64_t v8 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)a3 + 568))(a3);
  sub_1CD3BBE1C(&v67, *(llvm::Module **)(v8 + 40));
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)a3 + 72))(&v69, a3);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)a3 + 80))(&v68, a3);
  uint64_t v10 = v68;
  uint64_t v9 = v69;
  if (v69)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v69 + 16))(&v69, v69);
    uint64_t v11 = v69;
    if (v10)
    {
LABEL_7:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v69, v10);
      uint64_t v12 = v69;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (v68) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = 0;
LABEL_8:
  int v13 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v12) & 1) == 0)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
    uint64_t v21 = *(void *)v20;
    if ((*(_WORD *)(*(void *)v20 + 18) & 0x3FF0) != 0x640 && !sub_1CD3BBE9C((uint64_t)&v67, v21))
    {
      uint64_t v22 = v21 + 72;
      for (uint64_t j = *(void *)(v21 + 80); j != v22; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v24 = j - 24;
        if (!j) {
          uint64_t v24 = 0;
        }
        uint64_t v25 = v24 + 40;
        uint64_t v26 = *(void *)(v24 + 48);
        if (v26 != v25)
        {
          while (1)
          {
            uint64_t v27 = v26 - 24;
            if (v26)
            {
              unsigned int v28 = *(unsigned __int8 *)(v26 - 8);
              if (v28 >= 0x1C)
              {
                if (v28 == 33)
                {
                  unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFBLL;
                }
                else
                {
                  if (v28 != 84) {
                    goto LABEL_44;
                  }
                  unint64_t v29 = v27 | 4;
                }
                if (v29 >= 8)
                {
                  unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v31 = (v29 & 4) != 0 ? -32 : -96;
                  uint64_t v32 = *(void *)(v30 + v31);
                  if (!v32 || *(unsigned char *)(v32 + 16) != 0)
                  {
                    int v37 = 1;
                    goto LABEL_54;
                  }
                }
              }
            }
LABEL_44:
            uint64_t v26 = *(void *)(v26 + 8);
            uint64_t v34 = j - 24;
            if (!j) {
              uint64_t v34 = 0;
            }
            uint64_t v35 = v34 + 40;
            while (v26 == v35)
            {
              uint64_t j = *(void *)(j + 8);
              if (j == v22) {
                goto LABEL_53;
              }
              uint64_t v36 = j - 24;
              if (!j) {
                uint64_t v36 = 0;
              }
              uint64_t v35 = v36 + 40;
              uint64_t v26 = *(void *)(v36 + 48);
            }
            if (j == v22) {
              goto LABEL_53;
            }
          }
        }
      }
LABEL_53:
      int v37 = 0;
LABEL_54:
      v13 += v37;
    }
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (v13)
  {
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)a3 + 72))(&v69, a3);
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)a3 + 80))(&v68, a3);
    uint64_t v15 = v68;
    uint64_t v14 = v69;
    if (v69)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v69 + 16))(&v69, v69);
      uint64_t v16 = v69;
      if (v15)
      {
LABEL_18:
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v69, v15);
        uint64_t v17 = v69;
LABEL_19:
        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v17))
        {
          unsigned int v18 = 0;
          unsigned int v19 = 0;
        }
        else
        {
          unsigned int v19 = 0;
          unsigned int v18 = 0;
          do
          {
            uint64_t v38 = *(llvm::Function **)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
            if (v38 != (llvm::Function *)v66
              && (*((_WORD *)v38 + 9) & 0x3FF0) != 0x640
              && !sub_1CD3BBE9C((uint64_t)&v67, (uint64_t)v38)
              && llvm::Function::hasAddressTaken(v38, 0, 0, 1, 0, 0))
            {
              uint64_t v39 = sub_1CC77F324((uint64_t)a3, (uint64_t)v38, (uint64_t)&v70);
              if (v18 <= v39) {
                unsigned int v18 = v39;
              }
              if (v19 <= HIDWORD(v39)) {
                unsigned int v19 = HIDWORD(v39);
              }
            }
            (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
          }
          while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v17) & 1) == 0);
        }
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (v68) {
        goto LABEL_18;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_19;
  }
  unsigned int v18 = 0;
  unsigned int v19 = 0;
LABEL_74:
  uint64_t v40 = sub_1CC77F324((uint64_t)a3, v66, (uint64_t)&v70);
  uint64_t v41 = v40 + v18 * v13;
  uint64_t v42 = HIDWORD(v40) + v19 * v13;
  if ((v70 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v71, 8);
  }
  if (v41 < (**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4))
  {
    (*(void (**)(llvm::FunctionGroup *, uint64_t, void, uint64_t, void, uint64_t, void))(*(void *)a3 + 8))(a3, 11, 0, 1, 0, 1, 0);
    (*(void (**)(llvm::FunctionGroup *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, 11, v41, 1, 0, 1, 3);
  }
  if (v42 < (**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, void, uint64_t, uint64_t))a3)(a3, 18, 0, 1, 4))
  {
    (*(void (**)(llvm::FunctionGroup *, uint64_t, void, uint64_t, void, uint64_t, void))(*(void *)a3 + 8))(a3, 18, 0, 1, 0, 1, 0);
    (*(void (**)(llvm::FunctionGroup *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, 18, v42, 1, 0, 1, 3);
  }
LABEL_80:
  unint64_t v70 = 0;
  LOBYTE(v71) = 0;
  BYTE4(v71) = 0;
  uint64_t v72 = 0;
  int v73 = 0;
  char v74 = 0;
  char v75 = 0;
  long long v76 = 0u;
  long long v77 = 0u;
  __int16 v78 = 0;
  v79[0] = 0;
  *(_DWORD *)((char *)v79 + 3) = 0;
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)a3 + 72))(&v69, a3);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(void *)a3 + 80))(&v68, a3);
  uint64_t v44 = v68;
  uint64_t v43 = v69;
  if (v69)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v69 + 16))(&v69, v69);
    uint64_t v45 = v69;
    uint64_t v69 = 0;
    if (v44)
    {
LABEL_82:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v44 + 16))(&v69, v44);
      uint64_t v46 = v69;
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v45 = 0;
    if (v68) {
      goto LABEL_82;
    }
  }
  uint64_t v46 = 0;
LABEL_83:
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v45 + 24))(v45, v46) & 1) == 0)
  {
    while (1)
    {
      uint64_t v50 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v45 + 32))(v45);
      uint64_t v69 = v50;
      int v51 = *((_DWORD *)this + 76);
      if (!v51) {
        break;
      }
      uint64_t v52 = *((void *)this + 36);
      int v53 = v51 - 1;
      unsigned int v54 = ((v50 >> 4) ^ (v50 >> 9)) & v53;
      unsigned int v55 = (void *)(v52 + 96 * v54);
      uint64_t v56 = *v55;
      if (v50 != *v55)
      {
        int v58 = 0;
        int v59 = 1;
        while (v56 != -4096)
        {
          if (v58) {
            BOOL v60 = 0;
          }
          else {
            BOOL v60 = v56 == -8192;
          }
          if (v60) {
            int v58 = v55;
          }
          unsigned int v61 = v54 + v59++;
          unsigned int v54 = v61 & v53;
          unsigned int v55 = (void *)(v52 + 96 * v54);
          uint64_t v56 = *v55;
          if (v50 == *v55) {
            goto LABEL_96;
          }
        }
        if (v58) {
          unsigned int v62 = v58;
        }
        else {
          unsigned int v62 = v55;
        }
        goto LABEL_110;
      }
LABEL_96:
      int8x16_t v57 = llvm::FunctionStats::combine(&v70, v55 + 1);
      (*(void (**)(uint64_t, int8x16_t))(*(void *)v45 + 40))(v45, v57);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v45 + 24))(v45, v46)) {
        goto LABEL_84;
      }
    }
    unsigned int v62 = 0;
LABEL_110:
    unsigned int v55 = sub_1CC781DB4((_DWORD *)this + 72, &v69, v62);
    void *v55 = v50;
    *(_OWORD *)(v55 + 1) = 0u;
    *(_OWORD *)(v55 + 3) = 0u;
    *(_OWORD *)(v55 + 5) = 0u;
    *(_OWORD *)(v55 + 7) = 0u;
    *(_OWORD *)(v55 + 9) = 0u;
    v55[11] = 0;
    goto LABEL_96;
  }
LABEL_84:
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  (*(void (**)(void, unint64_t *, llvm::FunctionGroup *))(**(void **)this + 944))(*(void *)this, &v70, a3);
  int v48 = (unsigned __int16 *)(*(uint64_t (**)(llvm::FunctionGroup *))(*(void *)a3 + 568))(a3);
  if (((v48[9] >> 4) & 0x3FFu) <= 0x63)
  {
LABEL_112:
    llvm::GPUMetadataEmitter::EmitHelperMetadata((uint64_t *)this, (uint64_t)v47, (void **)a3, (uint64_t)v48, (uint64_t)&v70, a4, a5);
    unsigned int v49 = "__helpers";
  }
  else
  {
    unsigned int v49 = 0;
    switch((v48[9] >> 4) & 0x3FF)
    {
      case 'd':
      case 'i':
        break;
      case 'e':
      case 'g':
      case 'h':
      case 'l':
        llvm::GPUMetadataEmitter::EmitFragmentMetadata((uint64_t *)this, (uint64_t)v47, (uint64_t (***)(void))a3, (uint64_t)v48, (uint64_t)&v70, a4, a5);
        goto LABEL_93;
      case 'f':
        llvm::GPUMetadataEmitter::EmitVertexMetadata((uint64_t *)this, (uint64_t)v47, (uint64_t (***)(void))a3, (uint64_t)v48, (uint64_t)&v70, (uint64_t)a4, a5);
        unsigned int v49 = "__vertex";
        break;
      case 'j':
        llvm::GPUMetadataEmitter::EmitComputeMetadata((uint64_t *)this, (uint64_t)v47, (uint64_t (***)(void))a3, (uint64_t)v48, (uint64_t)&v70, a4, a5);
        unsigned int v49 = "__compute";
        break;
      case 'k':
        llvm::GPUMetadataEmitter::EmitDriverShaderMetadata(this, v47, (uint64_t (***)(void))a3, (const llvm::Function *)v48, a4, a5);
LABEL_93:
        unsigned int v49 = "__fragment";
        break;
      default:
        goto LABEL_112;
    }
  }
  llvm::GPUMetadataEmitter::EmitVIDMAListMetadata((uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  llvm::GPUMetadataEmitter::EmitStatsMetadata(this, (uint64_t)a3, (uint64_t)v48, (int *)&v70, (uint64_t)a4, (uint64_t)a5);
  return v49;
}

int8x16_t llvm::FunctionStats::combine(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 <= *a2) {
    unint64_t v2 = *a2;
  }
  *a1 = v2;
  if (!*((unsigned char *)a2 + 12)) {
    a1[1] = a2[1];
  }
  unint64_t v3 = a1[2];
  if (v3 <= a2[2]) {
    unint64_t v3 = a2[2];
  }
  a1[2] = v3;
  unsigned int v4 = *((_DWORD *)a1 + 6);
  if (v4 <= *((_DWORD *)a2 + 6)) {
    unsigned int v4 = *((_DWORD *)a2 + 6);
  }
  *((_DWORD *)a1 + 6) = v4;
  if (*((unsigned char *)a1 + 32))
  {
    if (*((unsigned char *)a2 + 32))
    {
      float v6 = *((float *)a2 + 7);
      if (v6 >= *((float *)a1 + 7)) {
        float v6 = *((float *)a1 + 7);
      }
      *((float *)a1 + 7) = v6;
    }
  }
  else if (*((unsigned char *)a2 + 32))
  {
    *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
    *((unsigned char *)a1 + 32) = 1;
  }
  *(int8x16_t *)(a1 + 5) = vorrq_s8(*(int8x16_t *)(a1 + 5), *(int8x16_t *)(a2 + 5));
  int8x16_t result = vorrq_s8(*(int8x16_t *)(a1 + 7), *(int8x16_t *)(a2 + 7));
  *(int8x16_t *)(a1 + 7) = result;
  *((unsigned char *)a1 + 72) |= *((unsigned char *)a2 + 72);
  *((unsigned char *)a1 + 73) |= *((unsigned char *)a2 + 73);
  *((_DWORD *)a1 + 19) += *((_DWORD *)a2 + 19);
  *((unsigned char *)a1 + 80) |= *((unsigned char *)a2 + 80);
  *((unsigned char *)a1 + 81) |= *((unsigned char *)a2 + 81);
  *((unsigned char *)a1 + 82) |= *((unsigned char *)a2 + 82);
  return result;
}

const char *llvm::GPUMetadataEmitter::EmitHelperMetadata(uint64_t *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, llvm::MCContext *a6, llvm::MCStreamer *a7)
{
  v117[4] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a4 + 40);
  uint64_t v106 = 0;
  char v107 = 0;
  long long v108 = xmmword_1CFB1D0D0;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v111 = 0;
  unint64_t v112 = 1;
  __int16 v113 = 256;
  uint64_t v114 = 0;
  if (*(char *)(v13 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v105, *(const void **)(v13 + 216), *(void *)(v13 + 224));
  }
  else {
    std::string v105 = *(std::string *)(v13 + 216);
  }
  uint64_t v14 = std::string::compare(&v105, 0, 4uLL, "agx1");
  if (v14)
  {
    uint64_t v14 = std::string::compare(&v105, 0, 4uLL, "agx2");
    if (v14)
    {
      uint64_t v14 = std::string::compare(&v105, 0, 4uLL, "agx3");
      if (v14) {
        char v15 = 0;
      }
      else {
        char v15 = 29;
      }
    }
    else
    {
      char v15 = 28;
    }
  }
  else
  {
    char v15 = 27;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1[39] + 544) == 1)
  {
    uint64_t v14 = ((uint64_t (*)(void **))(*a3)[39])(a3);
    if (v14) {
      llvm::report_fatal_error((llvm *)"Literal constant used when compiling for shared library", (const llvm::Twine *)1);
    }
  }
  unint64_t v101 = a6;
  char v102 = a7;
  int v16 = v15 & 0x1E;
  if (v16 == 28)
  {
    (*(void (**)(uint64_t **__return_ptr))(*(void *)*a1 + 888))(&v115);
    int v17 = sub_1CC77C568((uint64_t)&v106, v115, v116);
    uint64_t v14 = (uint64_t)v115;
    if (v115 != v117) {
      free(v115);
    }
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v115 = &v106;
  BYTE6(v111) = 1;
  __int16 v18 = v109 - v110 + WORD4(v109);
  unsigned int v116 = v109 - v110 + DWORD2(v109);
  uint64_t v19 = *a1;
  SetShaderInfoFromFunctionGroup(v14, (uint64_t *)&v115, a3, (int *)a5);
  sub_1CC77C798((uint64_t *)&v115, v19);
  int v20 = v17;
  if (v16 == 28) {
    sub_1CC780134(&v106, 62, v17);
  }
  uint64_t v21 = ((uint64_t (*)(void **))(*a3)[4])(a3);
  char v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 80))(v21, a4);
  if ((v22 & 1) != 0 || (_BYTE)v113)
  {
    unsigned int v87 = sub_1CBF2CB00((uint64_t)&v106, v22);
    char v88 = (uint64_t *)*((void *)&v110 + 1);
    if ((void)v110 - *((void *)&v110 + 1) <= 7uLL)
    {
      sub_1CBF2C904(&v106, 8uLL);
      char v88 = (uint64_t *)*((void *)&v110 + 1);
    }
    *char v88 = v87 | 0x4800000000;
    *((void *)&v110 + 1) += 8;
    LODWORD(v111) = v111 + 1;
    __int16 v89 = WORD2(v111);
    if (WORD2(v111) <= 0x48u) {
      __int16 v89 = 72;
    }
    WORD2(v111) = v89;
  }
  uint64_t v100 = v13;
  uint64_t v23 = sub_1CBF2CB78((uint64_t)&v106, v18);
  int v99 = v23;
  int v103 = &v106;
  BYTE6(v111) = 1;
  int v104 = v109 - v110 + DWORD2(v109);
  uint64_t v24 = *a1;
  SetShaderInfoFromFunctionGroup(v23, (uint64_t *)&v103, (uint64_t)a3, (int *)a5);
  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
  if (!v25 && !(_BYTE)v113)
  {
    uint64_t v31 = &v106;
    goto LABEL_31;
  }
  if (v112 <= 3) {
    unint64_t v112 = 4;
  }
  uint64_t v26 = (uint64_t *)*((void *)&v110 + 1);
  unint64_t v27 = ((_BYTE)v110 - ((_BYTE)v109 + BYTE8(v109))) & 3;
  if ((void)v110 - *((void *)&v110 + 1) < v27)
  {
    sub_1CBF2C904(&v106, ((_BYTE)v110 - ((_BYTE)v109 + BYTE8(v109))) & 3);
    *(void *)&long long v110 = v110 - v27;
LABEL_121:
    uint64_t v90 = 0;
    do
      *(unsigned char *)(v110 + v90++) = 0;
    while (v27 != v90);
    uint64_t v26 = (uint64_t *)*((void *)&v110 + 1);
    uint64_t v28 = v110;
    goto LABEL_24;
  }
  uint64_t v28 = v110 - v27;
  *(void *)&long long v110 = v110 - v27;
  if (v27) {
    goto LABEL_121;
  }
LABEL_24:
  if ((unint64_t)(v28 - (void)v26) <= 3)
  {
    sub_1CBF2C904(&v106, 4uLL);
    uint64_t v26 = (uint64_t *)*((void *)&v110 + 1);
    uint64_t v28 = v110;
  }
  *(_DWORD *)(v28 - 4) = v25;
  *(void *)&long long v110 = v28 - 4;
  unsigned int v29 = v109 - (v28 - 4) + DWORD2(v109);
  if ((unint64_t)(v28 - 4 - (void)v26) <= 7)
  {
    sub_1CBF2C904(&v106, 8uLL);
    uint64_t v26 = (uint64_t *)*((void *)&v110 + 1);
  }
  *uint64_t v26 = v29 | 0x1000000000;
  *((void *)&v110 + 1) += 8;
  LODWORD(v111) = v111 + 1;
  __int16 v30 = WORD2(v111);
  if (WORD2(v111) <= 0x10u) {
    __int16 v30 = 16;
  }
  WORD2(v111) = v30;
  uint64_t v31 = v103;
LABEL_31:
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
  if (!v32 && !*((unsigned char *)v31 + 80)) {
    goto LABEL_43;
  }
  if ((unint64_t)v31[9] <= 3) {
    v31[9] = 4;
  }
  uint64_t v34 = v31[6];
  unsigned int v33 = (uint64_t *)v31[7];
  unint64_t v35 = ((_BYTE)v34 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3;
  if (v34 - (uint64_t)v33 < v35)
  {
    sub_1CBF2C904(v31, ((_BYTE)v34 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3);
    v31[6] -= v35;
LABEL_141:
    uint64_t v95 = 0;
    do
      *(unsigned char *)(v31[6] + v95++) = 0;
    while (v35 != v95);
    uint64_t v36 = v31[6];
    unsigned int v33 = (uint64_t *)v31[7];
    goto LABEL_36;
  }
  uint64_t v36 = v34 - v35;
  v31[6] = v36;
  if (v35) {
    goto LABEL_141;
  }
LABEL_36:
  if ((unint64_t)(v36 - (void)v33) <= 3)
  {
    sub_1CBF2C904(v31, 4uLL);
    uint64_t v36 = v31[6];
    unsigned int v33 = (uint64_t *)v31[7];
  }
  *(_DWORD *)(v36 - 4) = v32;
  uint64_t v37 = v36 - 4;
  v31[6] = v37;
  uint64_t v38 = v31[4] - v37 + v31[5];
  if ((unint64_t)(v37 - (void)v33) <= 7)
  {
    sub_1CBF2C904(v31, 8uLL);
    unsigned int v33 = (uint64_t *)v31[7];
  }
  *unsigned int v33 = v38 | 0x1200000000;
  v31[7] += 8;
  ++*((_DWORD *)v31 + 16);
  unsigned int v39 = *((unsigned __int16 *)v31 + 34);
  if (v39 <= 0x12) {
    LOWORD(v39) = 18;
  }
  *((_WORD *)v31 + 34) = v39;
  uint64_t v31 = v103;
LABEL_43:
  int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
  if (!v40 && !*((unsigned char *)v31 + 80)) {
    goto LABEL_55;
  }
  if ((unint64_t)v31[9] <= 3) {
    v31[9] = 4;
  }
  uint64_t v42 = v31[6];
  uint64_t v41 = (uint64_t *)v31[7];
  unint64_t v43 = ((_BYTE)v42 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3;
  if (v42 - (uint64_t)v41 < v43)
  {
    sub_1CBF2C904(v31, ((_BYTE)v42 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3);
    v31[6] -= v43;
LABEL_137:
    uint64_t v94 = 0;
    do
      *(unsigned char *)(v31[6] + v94++) = 0;
    while (v43 != v94);
    uint64_t v44 = v31[6];
    uint64_t v41 = (uint64_t *)v31[7];
    goto LABEL_48;
  }
  uint64_t v44 = v42 - v43;
  v31[6] = v44;
  if (v43) {
    goto LABEL_137;
  }
LABEL_48:
  if ((unint64_t)(v44 - (void)v41) <= 3)
  {
    sub_1CBF2C904(v31, 4uLL);
    uint64_t v44 = v31[6];
    uint64_t v41 = (uint64_t *)v31[7];
  }
  *(_DWORD *)(v44 - 4) = v40;
  uint64_t v45 = v44 - 4;
  v31[6] = v45;
  uint64_t v46 = v31[4] - v45 + v31[5];
  if ((unint64_t)(v45 - (void)v41) <= 7)
  {
    sub_1CBF2C904(v31, 8uLL);
    uint64_t v41 = (uint64_t *)v31[7];
  }
  uint64_t *v41 = v46 | 0x1400000000;
  v31[7] += 8;
  ++*((_DWORD *)v31 + 16);
  unsigned int v47 = *((unsigned __int16 *)v31 + 34);
  if (v47 <= 0x14) {
    LOWORD(v47) = 20;
  }
  *((_WORD *)v31 + 34) = v47;
  uint64_t v31 = v103;
LABEL_55:
  int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
  if (!v48 && !*((unsigned char *)v31 + 80)) {
    goto LABEL_57;
  }
  if ((unint64_t)v31[9] <= 3) {
    v31[9] = 4;
  }
  uint64_t v78 = v31[6];
  long long v77 = (uint64_t *)v31[7];
  unint64_t v79 = ((_BYTE)v78 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3;
  if (v78 - (uint64_t)v77 < v79)
  {
    sub_1CBF2C904(v31, ((_BYTE)v78 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3);
    v31[6] -= v79;
LABEL_145:
    uint64_t v96 = 0;
    do
      *(unsigned char *)(v31[6] + v96++) = 0;
    while (v79 != v96);
    uint64_t v80 = v31[6];
    long long v77 = (uint64_t *)v31[7];
    goto LABEL_98;
  }
  uint64_t v80 = v78 - v79;
  v31[6] = v80;
  if (v79) {
    goto LABEL_145;
  }
LABEL_98:
  if ((unint64_t)(v80 - (void)v77) <= 3)
  {
    sub_1CBF2C904(v31, 4uLL);
    uint64_t v80 = v31[6];
    long long v77 = (uint64_t *)v31[7];
  }
  *(_DWORD *)(v80 - 4) = v48;
  uint64_t v81 = v80 - 4;
  v31[6] = v81;
  uint64_t v82 = v31[4] - v81 + v31[5];
  if ((unint64_t)(v81 - (void)v77) <= 7)
  {
    sub_1CBF2C904(v31, 8uLL);
    long long v77 = (uint64_t *)v31[7];
  }
  *long long v77 = v82 | 0x1600000000;
  v31[7] += 8;
  ++*((_DWORD *)v31 + 16);
  unsigned int v83 = *((unsigned __int16 *)v31 + 34);
  if (v83 <= 0x16) {
    LOWORD(v83) = 22;
  }
  *((_WORD *)v31 + 34) = v83;
  uint64_t v31 = v103;
LABEL_57:
  int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 56))(v24);
  if (!v49 && !*((unsigned char *)v31 + 80)) {
    goto LABEL_69;
  }
  if ((unint64_t)v31[9] <= 3) {
    v31[9] = 4;
  }
  uint64_t v51 = v31[6];
  uint64_t v50 = (uint64_t *)v31[7];
  unint64_t v52 = ((_BYTE)v51 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3;
  if (v51 - (uint64_t)v50 < v52)
  {
    sub_1CBF2C904(v31, ((_BYTE)v51 - (*((_DWORD *)v31 + 8) + *((_DWORD *)v31 + 10))) & 3);
    v31[6] -= v52;
LABEL_125:
    uint64_t v91 = 0;
    do
      *(unsigned char *)(v31[6] + v91++) = 0;
    while (v52 != v91);
    uint64_t v53 = v31[6];
    uint64_t v50 = (uint64_t *)v31[7];
    goto LABEL_62;
  }
  uint64_t v53 = v51 - v52;
  v31[6] = v53;
  if (v52) {
    goto LABEL_125;
  }
LABEL_62:
  if ((unint64_t)(v53 - (void)v50) <= 3)
  {
    sub_1CBF2C904(v31, 4uLL);
    uint64_t v53 = v31[6];
    uint64_t v50 = (uint64_t *)v31[7];
  }
  *(_DWORD *)(v53 - 4) = v49;
  uint64_t v54 = v53 - 4;
  v31[6] = v54;
  uint64_t v55 = v31[4] - v54 + v31[5];
  if ((unint64_t)(v54 - (void)v50) <= 7)
  {
    sub_1CBF2C904(v31, 8uLL);
    uint64_t v50 = (uint64_t *)v31[7];
  }
  *uint64_t v50 = v55 | 0x1800000000;
  v31[7] += 8;
  ++*((_DWORD *)v31 + 16);
  unsigned int v56 = *((unsigned __int16 *)v31 + 34);
  if (v56 <= 0x18) {
    LOWORD(v56) = 24;
  }
  *((_WORD *)v31 + 34) = v56;
  uint64_t v31 = v103;
LABEL_69:
  if (v16 == 28) {
    sub_1CC780134(v31, 28, v20);
  }
  uint64_t v57 = ((uint64_t (*)(void **))(*a3)[4])(a3);
  char v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v57 + 80))(v57, a4);
  if ((v58 & 1) != 0 || *((unsigned char *)v31 + 80))
  {
    unsigned int v84 = sub_1CBF2CB00((uint64_t)v31, v58);
    unsigned int v85 = (uint64_t *)v31[7];
    if ((unint64_t)(v31[6] - (void)v85) <= 7)
    {
      sub_1CBF2C904(v31, 8uLL);
      unsigned int v85 = (uint64_t *)v31[7];
    }
    *unsigned int v85 = v84 | 0x2400000000;
    v31[7] += 8;
    ++*((_DWORD *)v31 + 16);
    unsigned int v86 = *((unsigned __int16 *)v31 + 34);
    if (v86 <= 0x24) {
      LOWORD(v86) = 36;
    }
    *((_WORD *)v31 + 34) = v86;
  }
  if (*(unsigned char *)(a5 + 73))
  {
    char v97 = 2;
  }
  else if (*(unsigned char *)(a5 + 72))
  {
    char v97 = 1;
  }
  else
  {
    if (!*((unsigned char *)v31 + 80)) {
      goto LABEL_76;
    }
    char v97 = 0;
  }
  unsigned int v98 = sub_1CBF2CB00((uint64_t)v31, v97);
  sub_1CBF2F3A0(v31, 38, v98);
LABEL_76:
  int v59 = sub_1CBF2CB78((uint64_t)v31, v104);
  sub_1CC77CE5C(v100, *a1, (uint64_t *)a5);
  BYTE6(v111) = 1;
  __int16 v61 = WORD4(v109);
  __int16 v60 = v110;
  __int16 v62 = v109;
  sub_1CC780434(&v106, v99);
  if (!v59) {
    goto LABEL_93;
  }
  if (v112 <= 3) {
    unint64_t v112 = 4;
  }
  int v64 = DWORD2(v109);
  int v63 = v109;
  unint64_t v65 = ((_BYTE)v110 - ((_BYTE)v109 + BYTE8(v109))) & 3;
  if ((void)v110 - *((void *)&v110 + 1) < v65)
  {
    sub_1CBF2C904(&v106, ((_BYTE)v110 - ((_BYTE)v109 + BYTE8(v109))) & 3);
    *(void *)&long long v110 = v110 - v65;
  }
  else
  {
    uint64_t v66 = v110 - v65;
    *(void *)&long long v110 = v110 - v65;
    if (!v65) {
      goto LABEL_81;
    }
  }
  uint64_t v92 = 0;
  do
    *(unsigned char *)(v110 + v92++) = 0;
  while (v65 != v92);
  int v64 = DWORD2(v109);
  uint64_t v66 = v110;
  int v63 = v109;
LABEL_81:
  int v67 = v64 - v66 + v63 - v59;
  int v68 = v67 + 4;
  if (v67 == -4 && !(_BYTE)v113) {
    goto LABEL_93;
  }
  if (v112 <= 3) {
    unint64_t v112 = 4;
  }
  unint64_t v69 = ((_BYTE)v66 - ((_BYTE)v63 + (_BYTE)v64)) & 3;
  unint64_t v70 = (uint64_t *)*((void *)&v110 + 1);
  if (v66 - *((void *)&v110 + 1) < v69)
  {
    sub_1CBF2C904(&v106, v69);
    *(void *)&long long v110 = v110 - v69;
LABEL_133:
    uint64_t v93 = 0;
    do
      *(unsigned char *)(v110 + v93++) = 0;
    while (v69 != v93);
    unint64_t v70 = (uint64_t *)*((void *)&v110 + 1);
    uint64_t v71 = v110;
    goto LABEL_86;
  }
  uint64_t v71 = v66 - v69;
  *(void *)&long long v110 = v66 - v69;
  if (v69) {
    goto LABEL_133;
  }
LABEL_86:
  if ((unint64_t)(v71 - (void)v70) <= 3)
  {
    sub_1CBF2C904(&v106, 4uLL);
    unint64_t v70 = (uint64_t *)*((void *)&v110 + 1);
    uint64_t v71 = v110;
  }
  *(_DWORD *)(v71 - 4) = v68;
  *(void *)&long long v110 = v71 - 4;
  unsigned int v72 = v109 - (v71 - 4) + DWORD2(v109);
  if ((unint64_t)(v71 - 4 - (void)v70) <= 7)
  {
    sub_1CBF2C904(&v106, 8uLL);
    unint64_t v70 = (uint64_t *)*((void *)&v110 + 1);
  }
  *unint64_t v70 = v72 | 0xC00000000;
  *((void *)&v110 + 1) += 8;
  LODWORD(v111) = v111 + 1;
  __int16 v73 = WORD2(v111);
  if (WORD2(v111) <= 0xCu) {
    __int16 v73 = 12;
  }
  WORD2(v111) = v73;
LABEL_93:
  int v74 = sub_1CBF2CB78((uint64_t)&v106, v62 - v60 + v61);
  sub_1CC7808E8((uint64_t)&v106, v74);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)a1, v75, (uint64_t)a3, (uint64_t ***)a4, v101, v102, "__helpers", &v106, 1);
  sub_1CB8339A4(&v106);
  return "__helpers";
}

const char *llvm::GPUMetadataEmitter::EmitVertexMetadata(uint64_t *a1, uint64_t a2, uint64_t (***a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, llvm::MCStreamer *a7)
{
  uint64_t v13 = *(llvm::Module **)(a4 + 40);
  size_t v43 = sub_1CC76A754(a6, (uint64_t)a7, (uint64_t)"__GPU_METADATA", 0xEuLL, (uint64_t)"__vertex", 8);
  v53[0] = 0;
  v53[1] = 0;
  int v54 = 0;
  unsigned int v56 = 0;
  uint64_t v57 = 0;
  __p = 0;
  sub_1CD0FEC94(v13, (uint64_t)v53);
  uint64_t v44 = 0;
  char v45 = 0;
  long long v46 = xmmword_1CFB1D0D0;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v49 = 0;
  unint64_t v50 = 1;
  __int16 v51 = 256;
  uint64_t v52 = 0;
  int v15 = llvm::GPUMetadataEmitter::EmitCommonMetadata(a1, &v44, v14, a3, a4, v53);
  BYTE6(v49) = 1;
  __int16 v16 = WORD4(v47);
  __int16 v17 = v48;
  __int16 v18 = v47;
  int v19 = *(_DWORD *)(a5 + 24);
  if (!v19 && !(_BYTE)v51) {
    goto LABEL_17;
  }
  if (v50 <= 3) {
    unint64_t v50 = 4;
  }
  unint64_t v20 = ((_BYTE)v48 - ((_BYTE)v47 + BYTE8(v47))) & 3;
  uint64_t v21 = (uint64_t *)*((void *)&v48 + 1);
  if ((void)v48 - *((void *)&v48 + 1) < v20)
  {
    sub_1CBF2C904((uint64_t *)&v44, ((_BYTE)v48 - ((_BYTE)v47 + BYTE8(v47))) & 3);
    *(void *)&long long v48 = v48 - v20;
LABEL_7:
    uint64_t v23 = 0;
    do
      *(unsigned char *)(v48 + v23++) = 0;
    while (v20 != v23);
    uint64_t v21 = (uint64_t *)*((void *)&v48 + 1);
    uint64_t v22 = v48;
    goto LABEL_10;
  }
  uint64_t v22 = v48 - v20;
  *(void *)&long long v48 = v48 - v20;
  if ((((_BYTE)v17 - ((_BYTE)v47 + BYTE8(v47))) & 3) != 0) {
    goto LABEL_7;
  }
LABEL_10:
  if ((unint64_t)(v22 - (void)v21) <= 3)
  {
    sub_1CBF2C904((uint64_t *)&v44, 4uLL);
    uint64_t v21 = (uint64_t *)*((void *)&v48 + 1);
    uint64_t v22 = v48;
  }
  *(_DWORD *)(v22 - 4) = v19;
  *(void *)&long long v48 = v22 - 4;
  unsigned int v24 = v47 - (v22 - 4) + DWORD2(v47);
  if ((unint64_t)(v22 - 4 - (void)v21) <= 7)
  {
    sub_1CBF2C904((uint64_t *)&v44, 8uLL);
    uint64_t v21 = (uint64_t *)*((void *)&v48 + 1);
  }
  *uint64_t v21 = v24 | 0x400000000;
  *((void *)&v48 + 1) += 8;
  LODWORD(v49) = v49 + 1;
  __int16 v25 = WORD2(v49);
  if (WORD2(v49) <= 4u) {
    __int16 v25 = 4;
  }
  WORD2(v49) = v25;
LABEL_17:
  int v26 = sub_1CBF2CB78((uint64_t)&v44, v18 - v17 + v16);
  BYTE6(v49) = 1;
  __int16 v27 = v47 - v48 + WORD4(v47);
  sub_1CC780434((uint64_t *)&v44, v15);
  if (!v26) {
    goto LABEL_40;
  }
  if (v50 <= 3) {
    unint64_t v50 = 4;
  }
  int v29 = DWORD2(v47);
  int v28 = v47;
  unint64_t v30 = ((_BYTE)v48 - ((_BYTE)v47 + BYTE8(v47))) & 3;
  if ((void)v48 - *((void *)&v48 + 1) < v30)
  {
    sub_1CBF2C904((uint64_t *)&v44, ((_BYTE)v48 - ((_BYTE)v47 + BYTE8(v47))) & 3);
    *(void *)&long long v48 = v48 - v30;
  }
  else
  {
    uint64_t v31 = v48 - v30;
    *(void *)&long long v48 = v48 - v30;
    if (!v30) {
      goto LABEL_25;
    }
  }
  uint64_t v32 = 0;
  do
    *(unsigned char *)(v48 + v32++) = 0;
  while (v30 != v32);
  int v29 = DWORD2(v47);
  uint64_t v31 = v48;
  int v28 = v47;
LABEL_25:
  int v33 = v29 - v31 + v28 - v26;
  int v34 = v33 + 4;
  if (v33 == -4 && !(_BYTE)v51) {
    goto LABEL_40;
  }
  if (v50 <= 3) {
    unint64_t v50 = 4;
  }
  unint64_t v35 = ((_BYTE)v31 - ((_BYTE)v28 + (_BYTE)v29)) & 3;
  uint64_t v36 = (uint64_t *)*((void *)&v48 + 1);
  if (v31 - *((void *)&v48 + 1) < v35)
  {
    sub_1CBF2C904((uint64_t *)&v44, v35);
    *(void *)&long long v48 = v48 - v35;
LABEL_30:
    uint64_t v38 = 0;
    do
      *(unsigned char *)(v48 + v38++) = 0;
    while (v35 != v38);
    uint64_t v36 = (uint64_t *)*((void *)&v48 + 1);
    uint64_t v37 = v48;
    goto LABEL_33;
  }
  uint64_t v37 = v31 - v35;
  *(void *)&long long v48 = v31 - v35;
  if (v35) {
    goto LABEL_30;
  }
LABEL_33:
  if ((unint64_t)(v37 - (void)v36) <= 3)
  {
    sub_1CBF2C904((uint64_t *)&v44, 4uLL);
    uint64_t v36 = (uint64_t *)*((void *)&v48 + 1);
    uint64_t v37 = v48;
  }
  *(_DWORD *)(v37 - 4) = v34;
  *(void *)&long long v48 = v37 - 4;
  unsigned int v39 = v47 - (v37 - 4) + DWORD2(v47);
  if ((unint64_t)(v37 - 4 - (void)v36) <= 7)
  {
    sub_1CBF2C904((uint64_t *)&v44, 8uLL);
    uint64_t v36 = (uint64_t *)*((void *)&v48 + 1);
  }
  *uint64_t v36 = v39 | 0x600000000;
  *((void *)&v48 + 1) += 8;
  LODWORD(v49) = v49 + 1;
  __int16 v40 = WORD2(v49);
  if (WORD2(v49) <= 6u) {
    __int16 v40 = 6;
  }
  WORD2(v49) = v40;
LABEL_40:
  int v41 = sub_1CBF2CB78((uint64_t)&v44, v27);
  sub_1CC7808E8((uint64_t)&v44, v41);
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)a1, (uint64_t)(a1 + 40), &v44, (uint64_t)a7);
  sub_1CC76D720(a6, a7, v43, (uint64_t)a3);
  sub_1CB8339A4(&v44);
  if (__p)
  {
    unsigned int v56 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v53[0], 8);
  return "__vertex";
}

const char *llvm::GPUMetadataEmitter::EmitComputeMetadata(uint64_t *a1, uint64_t a2, uint64_t (***a3)(void), uint64_t a4, uint64_t a5, llvm::MCContext *a6, llvm::MCStreamer *a7)
{
  uint64_t v13 = *(llvm::Module **)(a4 + 40);
  v142[0] = 0;
  v142[1] = 0;
  int v143 = 0;
  char v145 = 0;
  uint64_t v146 = 0;
  uint64_t v144 = 0;
  sub_1CD0FEFC4(v13, (uint64_t)v142, (uint64_t)a3);
  unsigned int v133 = 0;
  char v134 = 0;
  long long v135 = xmmword_1CFB1D0D0;
  long long v136 = 0u;
  long long v137 = 0u;
  uint64_t v138 = 0;
  unint64_t v139 = 1;
  __int16 v140 = 256;
  uint64_t v141 = 0;
  int v15 = llvm::GPUMetadataEmitter::EmitCommonMetadata(a1, &v133, v14, a3, a4, v142);
  uint64_t v16 = ((uint64_t (*)(uint64_t (***)(void)))(*a3)[70])(a3);
  uint64_t v128 = a6;
  uint64_t v129 = a7;
  int v127 = v15;
  if ((*(unsigned char *)(v16 + 23) & 0x10) == 0)
  {
    size_t v26 = 0;
    HIBYTE(v132) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_17;
  }
  uint64_t v17 = ***(void ***)v16;
  uint64_t v18 = *(void *)(v17 + 152);
  uint64_t v19 = *(unsigned int *)(v17 + 168);
  if (v19)
  {
    LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    uint64_t v21 = (uint64_t *)(v18 + 16 * v20);
    uint64_t v22 = *v21;
    if (*v21 == v16) {
      goto LABEL_9;
    }
    int v23 = 1;
    while (v22 != -4096)
    {
      int v24 = v20 + v23++;
      uint64_t v20 = v24 & (v19 - 1);
      uint64_t v22 = *(void *)(v18 + 16 * v20);
      if (v22 == v16)
      {
        uint64_t v21 = (uint64_t *)(v18 + 16 * v20);
        goto LABEL_9;
      }
    }
  }
  uint64_t v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_9:
  __int16 v25 = (unint64_t *)v21[1];
  unint64_t v28 = *v25;
  __int16 v27 = v25 + 2;
  size_t v26 = v28;
  if (v28 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    p_dst = (void **)operator new(v30 + 1);
    size_t v131 = v26;
    int64_t v132 = v31 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v132) = v26;
  p_dst = (void **)&__dst;
  if (v26) {
LABEL_16:
  }
    memmove(p_dst, v27, v26);
LABEL_17:
  *((unsigned char *)p_dst + v26) = 0;
  if (v132 >= 0) {
    uint64_t v32 = (void **)&__dst;
  }
  else {
    uint64_t v32 = __dst;
  }
  if (v132 >= 0) {
    size_t v33 = HIBYTE(v132) & 0x7F;
  }
  else {
    size_t v33 = v131;
  }
  int v34 = sub_1CBF2F03C((uint64_t)&v133, v32, v33);
  if (SHIBYTE(v132) < 0) {
    operator delete(__dst);
  }
  BYTE6(v138) = 1;
  __int16 v35 = WORD4(v136);
  __int16 v36 = v137;
  __int16 v37 = v136;
  int v38 = *(_DWORD *)(a5 + 24);
  if (v38 || (_BYTE)v140)
  {
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    unint64_t v39 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
    __int16 v40 = (uint64_t *)*((void *)&v137 + 1);
    if ((void)v137 - *((void *)&v137 + 1) < v39)
    {
      sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
      *(void *)&long long v137 = v137 - v39;
    }
    else
    {
      uint64_t v41 = v137 - v39;
      *(void *)&long long v137 = v137 - v39;
      if ((((_BYTE)v36 - ((_BYTE)v136 + BYTE8(v136))) & 3) == 0)
      {
LABEL_34:
        if ((unint64_t)(v41 - (void)v40) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v133, 4uLL);
          __int16 v40 = (uint64_t *)*((void *)&v137 + 1);
          uint64_t v41 = v137;
        }
        *(_DWORD *)(v41 - 4) = v38;
        *(void *)&long long v137 = v41 - 4;
        unsigned int v43 = v136 - (v41 - 4) + DWORD2(v136);
        if ((unint64_t)(v41 - 4 - (void)v40) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v133, 8uLL);
          __int16 v40 = (uint64_t *)*((void *)&v137 + 1);
        }
        *__int16 v40 = v43 | 0x400000000;
        *((void *)&v137 + 1) += 8;
        LODWORD(v138) = v138 + 1;
        __int16 v44 = WORD2(v138);
        if (WORD2(v138) <= 4u) {
          __int16 v44 = 4;
        }
        WORD2(v138) = v44;
        goto LABEL_41;
      }
    }
    uint64_t v42 = 0;
    do
      *(unsigned char *)(v137 + v42++) = 0;
    while (v39 != v42);
    __int16 v40 = (uint64_t *)*((void *)&v137 + 1);
    uint64_t v41 = v137;
    goto LABEL_34;
  }
LABEL_41:
  sub_1CC780134((uint64_t *)&v133, 6, v34);
  if (!((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[22])(a3, 20)) {
    goto LABEL_42;
  }
  ((void (*)(void ***__return_ptr, uint64_t (***)(void), uint64_t))(*a3)[16])(&__dst, a3, 20);
  uint64_t v85 = *(void *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
  unsigned int v86 = __dst;
  __dst = 0;
  if (v86) {
    (*((void (**)(void **))*v86 + 1))(v86);
  }
  if (!v85)
  {
LABEL_42:
    unsigned int v45 = 0;
    goto LABEL_43;
  }
  int v87 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[50])(a3, v85);
  if (v87) {
    BOOL v88 = 0;
  }
  else {
    BOOL v88 = v140 == 0;
  }
  if (!v88)
  {
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    __int16 v89 = (uint64_t *)*((void *)&v137 + 1);
    unint64_t v90 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
    if ((void)v137 - *((void *)&v137 + 1) < v90)
    {
      sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
      *(void *)&long long v137 = v137 - v90;
    }
    else
    {
      uint64_t v91 = v137 - v90;
      *(void *)&long long v137 = v137 - v90;
      if (!v90)
      {
LABEL_130:
        if ((unint64_t)(v91 - (void)v89) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v133, 4uLL);
          __int16 v89 = (uint64_t *)*((void *)&v137 + 1);
          uint64_t v91 = v137;
        }
        *(_DWORD *)(v91 - 4) = v87;
        *(void *)&long long v137 = v91 - 4;
        unsigned int v93 = v136 - (v91 - 4) + DWORD2(v136);
        if ((unint64_t)(v91 - 4 - (void)v89) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v133, 8uLL);
          __int16 v89 = (uint64_t *)*((void *)&v137 + 1);
        }
        *__int16 v89 = v93 | 0xC00000000;
        *((void *)&v137 + 1) += 8;
        LODWORD(v138) = v138 + 1;
        __int16 v94 = WORD2(v138);
        if (WORD2(v138) <= 0xCu) {
          __int16 v94 = 12;
        }
        WORD2(v138) = v94;
        goto LABEL_137;
      }
    }
    uint64_t v92 = 0;
    do
      *(unsigned char *)(v137 + v92++) = 0;
    while (v90 != v92);
    __int16 v89 = (uint64_t *)*((void *)&v137 + 1);
    uint64_t v91 = v137;
    goto LABEL_130;
  }
LABEL_137:
  unsigned int v95 = sub_1CBF2CB00((uint64_t)&v133, 1);
  uint64_t v96 = (uint64_t *)*((void *)&v137 + 1);
  if ((void)v137 - *((void *)&v137 + 1) <= 7uLL)
  {
    sub_1CBF2C904((uint64_t *)&v133, 8uLL);
    uint64_t v96 = (uint64_t *)*((void *)&v137 + 1);
  }
  *uint64_t v96 = v95 | 0xA00000000;
  *((void *)&v137 + 1) += 8;
  LODWORD(v138) = v138 + 1;
  __int16 v97 = WORD2(v138);
  if (WORD2(v138) <= 0xAu) {
    __int16 v97 = 10;
  }
  WORD2(v138) = v97;
  unsigned int v45 = v87 + 1;
LABEL_43:
  if (!((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[22])(a3, 21))
  {
    LODWORD(v46) = 0;
    goto LABEL_45;
  }
  ((void (*)(void ***__return_ptr, uint64_t (***)(void), uint64_t))(*a3)[16])(&__dst, a3, 21);
  uint64_t v46 = *(void *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
  unsigned int v98 = __dst;
  __dst = 0;
  if (v98) {
    (*((void (**)(void **))*v98 + 1))(v98);
  }
  if (v46)
  {
    int v99 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[50])(a3, v46);
    if (v99) {
      BOOL v100 = 0;
    }
    else {
      BOOL v100 = v140 == 0;
    }
    if (v100)
    {
LABEL_163:
      if (v45 <= v99 + 1) {
        unsigned int v45 = v99 + 1;
      }
      LODWORD(v46) = 1;
      goto LABEL_45;
    }
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    unint64_t v101 = (uint64_t *)*((void *)&v137 + 1);
    unint64_t v102 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
    if ((void)v137 - *((void *)&v137 + 1) < v102)
    {
      sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
      *(void *)&long long v137 = v137 - v102;
    }
    else
    {
      uint64_t v103 = v137 - v102;
      *(void *)&long long v137 = v137 - v102;
      if (!v102)
      {
LABEL_156:
        if ((unint64_t)(v103 - (void)v101) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v133, 4uLL);
          unint64_t v101 = (uint64_t *)*((void *)&v137 + 1);
          uint64_t v103 = v137;
        }
        *(_DWORD *)(v103 - 4) = v99;
        *(void *)&long long v137 = v103 - 4;
        unsigned int v105 = v136 - (v103 - 4) + DWORD2(v136);
        if ((unint64_t)(v103 - 4 - (void)v101) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v133, 8uLL);
          unint64_t v101 = (uint64_t *)*((void *)&v137 + 1);
        }
        *unint64_t v101 = v105 | 0x1000000000;
        *((void *)&v137 + 1) += 8;
        LODWORD(v138) = v138 + 1;
        __int16 v106 = WORD2(v138);
        if (WORD2(v138) <= 0x10u) {
          __int16 v106 = 16;
        }
        WORD2(v138) = v106;
        goto LABEL_163;
      }
    }
    uint64_t v104 = 0;
    do
      *(unsigned char *)(v137 + v104++) = 0;
    while (v102 != v104);
    unint64_t v101 = (uint64_t *)*((void *)&v137 + 1);
    uint64_t v103 = v137;
    goto LABEL_156;
  }
LABEL_45:
  if (((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[22])(a3, 22))
  {
    ((void (*)(void ***__return_ptr, uint64_t (***)(void), uint64_t))(*a3)[16])(&__dst, a3, 22);
    uint64_t v107 = *(void *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
    long long v108 = __dst;
    __dst = 0;
    if (v108) {
      (*((void (**)(void **))*v108 + 1))(v108);
    }
    if (v107)
    {
      int v109 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[50])(a3, v107);
      if (v109) {
        BOOL v110 = 0;
      }
      else {
        BOOL v110 = v140 == 0;
      }
      if (v110)
      {
LABEL_187:
        LODWORD(v46) = v46 | 2;
        if (v45 <= v109 + 1) {
          unsigned int v45 = v109 + 1;
        }
        goto LABEL_46;
      }
      if (v139 <= 3) {
        unint64_t v139 = 4;
      }
      uint64_t v111 = (uint64_t *)*((void *)&v137 + 1);
      unint64_t v112 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
      if ((void)v137 - *((void *)&v137 + 1) < v112)
      {
        sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
        *(void *)&long long v137 = v137 - v112;
      }
      else
      {
        uint64_t v113 = v137 - v112;
        *(void *)&long long v137 = v137 - v112;
        if (!v112)
        {
LABEL_180:
          if ((unint64_t)(v113 - (void)v111) <= 3)
          {
            sub_1CBF2C904((uint64_t *)&v133, 4uLL);
            uint64_t v111 = (uint64_t *)*((void *)&v137 + 1);
            uint64_t v113 = v137;
          }
          *(_DWORD *)(v113 - 4) = v109;
          *(void *)&long long v137 = v113 - 4;
          unsigned int v115 = v136 - (v113 - 4) + DWORD2(v136);
          if ((unint64_t)(v113 - 4 - (void)v111) <= 7)
          {
            sub_1CBF2C904((uint64_t *)&v133, 8uLL);
            uint64_t v111 = (uint64_t *)*((void *)&v137 + 1);
          }
          *uint64_t v111 = v115 | 0x1200000000;
          *((void *)&v137 + 1) += 8;
          LODWORD(v138) = v138 + 1;
          __int16 v116 = WORD2(v138);
          if (WORD2(v138) <= 0x12u) {
            __int16 v116 = 18;
          }
          WORD2(v138) = v116;
          goto LABEL_187;
        }
      }
      uint64_t v114 = 0;
      do
        *(unsigned char *)(v137 + v114++) = 0;
      while (v112 != v114);
      uint64_t v111 = (uint64_t *)*((void *)&v137 + 1);
      uint64_t v113 = v137;
      goto LABEL_180;
    }
  }
LABEL_46:
  if (!((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[22])(a3, 23)) {
    goto LABEL_47;
  }
  ((void (*)(void ***__return_ptr, uint64_t (***)(void), uint64_t))(*a3)[16])(&__dst, a3, 23);
  uint64_t v117 = *(void *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
  int v118 = __dst;
  __dst = 0;
  if (v118) {
    (*((void (**)(void **))*v118 + 1))(v118);
  }
  if (!v117)
  {
LABEL_47:
    if (!v46) {
      goto LABEL_53;
    }
    goto LABEL_48;
  }
  int v119 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[50])(a3, v117);
  if (v119) {
    BOOL v120 = 0;
  }
  else {
    BOOL v120 = v140 == 0;
  }
  if (!v120)
  {
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    uint64_t v121 = (uint64_t *)*((void *)&v137 + 1);
    unint64_t v122 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
    if ((void)v137 - *((void *)&v137 + 1) < v122)
    {
      sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
      *(void *)&long long v137 = v137 - v122;
    }
    else
    {
      uint64_t v123 = v137 - v122;
      *(void *)&long long v137 = v137 - v122;
      if (!v122)
      {
LABEL_203:
        if ((unint64_t)(v123 - (void)v121) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v133, 4uLL);
          uint64_t v121 = (uint64_t *)*((void *)&v137 + 1);
          uint64_t v123 = v137;
        }
        *(_DWORD *)(v123 - 4) = v119;
        *(void *)&long long v137 = v123 - 4;
        unsigned int v125 = v136 - (v123 - 4) + DWORD2(v136);
        if ((unint64_t)(v123 - 4 - (void)v121) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v133, 8uLL);
          uint64_t v121 = (uint64_t *)*((void *)&v137 + 1);
        }
        *uint64_t v121 = v125 | 0x1400000000;
        *((void *)&v137 + 1) += 8;
        LODWORD(v138) = v138 + 1;
        __int16 v126 = WORD2(v138);
        if (WORD2(v138) <= 0x14u) {
          __int16 v126 = 20;
        }
        WORD2(v138) = v126;
        goto LABEL_210;
      }
    }
    uint64_t v124 = 0;
    do
      *(unsigned char *)(v137 + v124++) = 0;
    while (v122 != v124);
    uint64_t v121 = (uint64_t *)*((void *)&v137 + 1);
    uint64_t v123 = v137;
    goto LABEL_203;
  }
LABEL_210:
  LOBYTE(v46) = v46 | 4;
  if (v45 <= v119 + 1) {
    unsigned int v45 = v119 + 1;
  }
LABEL_48:
  unsigned int v47 = sub_1CBF2CB00((uint64_t)&v133, v46);
  long long v48 = (uint64_t *)*((void *)&v137 + 1);
  if ((void)v137 - *((void *)&v137 + 1) <= 7uLL)
  {
    sub_1CBF2C904((uint64_t *)&v133, 8uLL);
    long long v48 = (uint64_t *)*((void *)&v137 + 1);
  }
  uint64_t *v48 = v47 | 0xE00000000;
  *((void *)&v137 + 1) += 8;
  LODWORD(v138) = v138 + 1;
  __int16 v49 = WORD2(v138);
  if (WORD2(v138) <= 0xEu) {
    __int16 v49 = 14;
  }
  WORD2(v138) = v49;
LABEL_53:
  uint64_t v50 = sub_1CD1138B8((uint64_t)a3, 13, 0);
  unsigned int v51 = sub_1CD1138B8((uint64_t)a3, 12, v50);
  if (v45 <= v51) {
    unsigned int v45 = v51;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDA4F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDA4F8))
  {
    byte_1EBCDA4E2 = 0;
    __cxa_guard_release(&qword_1EBCDA4F8);
  }
  if (byte_1EBCDA4E2) {
    v45 += 16;
  }
  if (v45 || (_BYTE)v140)
  {
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    uint64_t v52 = (uint64_t *)*((void *)&v137 + 1);
    unint64_t v53 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
    if ((void)v137 - *((void *)&v137 + 1) < v53)
    {
      sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
      *(void *)&long long v137 = v137 - v53;
    }
    else
    {
      uint64_t v54 = v137 - v53;
      *(void *)&long long v137 = v137 - v53;
      if (!v53)
      {
LABEL_67:
        if ((unint64_t)(v54 - (void)v52) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v133, 4uLL);
          uint64_t v52 = (uint64_t *)*((void *)&v137 + 1);
          uint64_t v54 = v137;
        }
        *(_DWORD *)(v54 - 4) = v45;
        *(void *)&long long v137 = v54 - 4;
        unsigned int v56 = v136 - (v54 - 4) + DWORD2(v136);
        if ((unint64_t)(v54 - 4 - (void)v52) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v133, 8uLL);
          uint64_t v52 = (uint64_t *)*((void *)&v137 + 1);
        }
        *uint64_t v52 = v56 | 0x800000000;
        *((void *)&v137 + 1) += 8;
        LODWORD(v138) = v138 + 1;
        __int16 v57 = WORD2(v138);
        if (WORD2(v138) <= 8u) {
          __int16 v57 = 8;
        }
        WORD2(v138) = v57;
        goto LABEL_74;
      }
    }
    uint64_t v55 = 0;
    do
      *(unsigned char *)(v137 + v55++) = 0;
    while (v53 != v55);
    uint64_t v52 = (uint64_t *)*((void *)&v137 + 1);
    uint64_t v54 = v137;
    goto LABEL_67;
  }
LABEL_74:
  uint64_t v58 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**a3)(a3, 36, 0, 1, 2);
  if (v58) {
    BOOL v59 = 0;
  }
  else {
    BOOL v59 = v140 == 0;
  }
  if (!v59)
  {
    unsigned int v60 = sub_1CBF2CB00((uint64_t)&v133, v58 != 0);
    __int16 v61 = (uint64_t *)*((void *)&v137 + 1);
    if ((void)v137 - *((void *)&v137 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v133, 8uLL);
      __int16 v61 = (uint64_t *)*((void *)&v137 + 1);
    }
    uint64_t *v61 = v60 | 0x1600000000;
    *((void *)&v137 + 1) += 8;
    LODWORD(v138) = v138 + 1;
    __int16 v62 = WORD2(v138);
    if (WORD2(v138) <= 0x16u) {
      __int16 v62 = 22;
    }
    WORD2(v138) = v62;
  }
  uint64_t v63 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**a3)(a3, 38, 0, 1, 2);
  if (v63 || (_BYTE)v140)
  {
    unsigned int v64 = sub_1CBF2CB00((uint64_t)&v133, v63 != 0);
    unint64_t v65 = (uint64_t *)*((void *)&v137 + 1);
    if ((void)v137 - *((void *)&v137 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v133, 8uLL);
      unint64_t v65 = (uint64_t *)*((void *)&v137 + 1);
    }
    *unint64_t v65 = v64 | 0x1800000000;
    *((void *)&v137 + 1) += 8;
    LODWORD(v138) = v138 + 1;
    __int16 v66 = WORD2(v138);
    if (WORD2(v138) <= 0x18u) {
      __int16 v66 = 24;
    }
    WORD2(v138) = v66;
  }
  int v67 = sub_1CBF2CB78((uint64_t)&v133, v37 - v36 + v35);
  BYTE6(v138) = 1;
  __int16 v68 = v136 - v137 + WORD4(v136);
  sub_1CC780434((uint64_t *)&v133, v127);
  if (v67)
  {
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    int v70 = DWORD2(v136);
    int v69 = v136;
    unint64_t v71 = ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3;
    if ((void)v137 - *((void *)&v137 + 1) < v71)
    {
      sub_1CBF2C904((uint64_t *)&v133, ((_BYTE)v137 - ((_BYTE)v136 + BYTE8(v136))) & 3);
      *(void *)&long long v137 = v137 - v71;
    }
    else
    {
      uint64_t v72 = v137 - v71;
      *(void *)&long long v137 = v137 - v71;
      if (!v71) {
        goto LABEL_98;
      }
    }
    uint64_t v73 = 0;
    do
      *(unsigned char *)(v137 + v73++) = 0;
    while (v71 != v73);
    int v70 = DWORD2(v136);
    uint64_t v72 = v137;
    int v69 = v136;
LABEL_98:
    int v74 = v70 - v72 + v69 - v67;
    int v75 = v74 + 4;
    if (v74 == -4 && !(_BYTE)v140) {
      goto LABEL_113;
    }
    if (v139 <= 3) {
      unint64_t v139 = 4;
    }
    unint64_t v76 = ((_BYTE)v72 - ((_BYTE)v69 + (_BYTE)v70)) & 3;
    long long v77 = (uint64_t *)*((void *)&v137 + 1);
    if (v72 - *((void *)&v137 + 1) < v76)
    {
      sub_1CBF2C904((uint64_t *)&v133, v76);
      *(void *)&long long v137 = v137 - v76;
    }
    else
    {
      uint64_t v78 = v72 - v76;
      *(void *)&long long v137 = v72 - v76;
      if (!v76)
      {
LABEL_106:
        if ((unint64_t)(v78 - (void)v77) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v133, 4uLL);
          long long v77 = (uint64_t *)*((void *)&v137 + 1);
          uint64_t v78 = v137;
        }
        *(_DWORD *)(v78 - 4) = v75;
        *(void *)&long long v137 = v78 - 4;
        unsigned int v80 = v136 - (v78 - 4) + DWORD2(v136);
        if ((unint64_t)(v78 - 4 - (void)v77) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v133, 8uLL);
          long long v77 = (uint64_t *)*((void *)&v137 + 1);
        }
        *long long v77 = v80 | 0xA00000000;
        *((void *)&v137 + 1) += 8;
        LODWORD(v138) = v138 + 1;
        __int16 v81 = WORD2(v138);
        if (WORD2(v138) <= 0xAu) {
          __int16 v81 = 10;
        }
        WORD2(v138) = v81;
        goto LABEL_113;
      }
    }
    uint64_t v79 = 0;
    do
      *(unsigned char *)(v137 + v79++) = 0;
    while (v76 != v79);
    long long v77 = (uint64_t *)*((void *)&v137 + 1);
    uint64_t v78 = v137;
    goto LABEL_106;
  }
LABEL_113:
  int v82 = sub_1CBF2CB78((uint64_t)&v133, v68);
  sub_1CC7808E8((uint64_t)&v133, v82);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)a1, v83, (uint64_t)a3, (uint64_t ***)a4, v128, v129, "__compute", &v133, 0);
  sub_1CB8339A4(&v133);
  if (v144)
  {
    char v145 = v144;
    operator delete(v144);
  }
  MEMORY[0x1D25D9CD0](v142[0], 8);
  return "__compute";
}

const char *llvm::GPUMetadataEmitter::EmitFragmentMetadata(uint64_t *a1, uint64_t a2, uint64_t (***a3)(void), uint64_t a4, uint64_t a5, llvm::MCContext *a6, llvm::MCStreamer *a7)
{
  uint64_t v297 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a4 + 40);
  v289[0] = 0;
  v289[1] = 0;
  int v290 = 0;
  uint64_t v292 = 0;
  uint64_t v293 = 0;
  int v291 = 0;
  sub_1CD0FEC94((llvm::Module *)v9, (uint64_t)v289);
  uint64_t v280 = 0;
  char v281 = 0;
  long long v282 = xmmword_1CFB1D0D0;
  long long v283 = 0u;
  long long v284 = 0u;
  uint64_t v285 = 0;
  unint64_t v286 = 1;
  __int16 v287 = 256;
  uint64_t v288 = 0;
  uint64_t v10 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[74])(a3, 103);
  unint64_t v257 = a6;
  if (v10 || (uint64_t v10 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[74])(a3, 104)) != 0)
  {
    __int16 v11 = *(_WORD *)(v10 + 18);
    uint64_t v12 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[74])(a3, 105);
    if (!v12)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_48;
    }
    if ((*(unsigned char *)(v12 + 23) & 0x10) == 0)
    {
      size_t v34 = 0;
      HIBYTE(v296) = 0;
      p_dst = &__dst;
      goto LABEL_29;
    }
    uint64_t v13 = ***(void ***)v12;
    uint64_t v14 = *(void *)(v13 + 152);
    uint64_t v15 = *(unsigned int *)(v13 + 168);
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v12)
      {
LABEL_21:
        size_t v33 = (unint64_t *)v17[1];
        unint64_t v36 = *v33;
        __int16 v35 = v33 + 2;
        size_t v34 = v36;
        if (v36 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_402;
        }
        if (v34 >= 0x17)
        {
          uint64_t v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v38 = v34 | 7;
          }
          uint64_t v39 = v38 + 1;
          p_dst = (uint64_t *)operator new(v38 + 1);
          uint64_t v295 = (void *)v34;
          int64_t v296 = v39 | 0x8000000000000000;
          uint64_t __dst = (uint64_t)p_dst;
        }
        else
        {
          HIBYTE(v296) = v34;
          p_dst = &__dst;
          if (!v34) {
            goto LABEL_29;
          }
        }
        memmove(p_dst, v35, v34);
LABEL_29:
        *((unsigned char *)p_dst + v34) = 0;
        if (v296 >= 0) {
          __int16 v40 = &__dst;
        }
        else {
          __int16 v40 = (uint64_t *)__dst;
        }
        if (v296 >= 0) {
          size_t v41 = HIBYTE(v296) & 0x7F;
        }
        else {
          size_t v41 = (size_t)v295;
        }
        int v42 = sub_1CBF2F03C((uint64_t)&v280, v40, v41);
        if (SHIBYTE(v296) < 0) {
          operator delete((void *)__dst);
        }
        BYTE6(v285) = 1;
        __int16 v43 = v283 - v284 + WORD4(v283);
        sub_1CC780134((uint64_t *)&v280, 4, v42);
        if ((_BYTE)v287)
        {
          if (!v286) {
            unint64_t v286 = 1;
          }
          uint64_t v44 = v284;
          if ((void)v284 == *((void *)&v284 + 1))
          {
            sub_1CBF2C904((uint64_t *)&v280, 1uLL);
            uint64_t v44 = v284;
          }
          *(void *)&long long v284 = v44 - 1;
          *(unsigned char *)(v44 - 1) = 0;
          unsigned int v45 = (uint64_t *)*((void *)&v284 + 1);
          unsigned int v46 = v283 - v284 + DWORD2(v283);
          if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
          {
            sub_1CBF2C904((uint64_t *)&v280, 8uLL);
            unsigned int v45 = (uint64_t *)*((void *)&v284 + 1);
          }
          uint64_t *v45 = v46 | 0x600000000;
          *((void *)&v284 + 1) += 8;
          LODWORD(v285) = v285 + 1;
          __int16 v47 = WORD2(v285);
          if (WORD2(v285) <= 6u) {
            __int16 v47 = 6;
          }
          WORD2(v285) = v47;
        }
        int v48 = sub_1CBF2CB78((uint64_t)&v280, v43);
        uint64_t v21 = (char *)operator new(4uLL);
        *(_DWORD *)uint64_t v21 = v48;
        uint64_t v22 = v21 + 4;
LABEL_48:
        uint64_t v49 = v22 - v21;
        ((void (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*a3)[1])(a3, 4, ((unint64_t)(v22 - v21) >> 2), 1, 0xFFFFFFFFLL, 1, 1);
        if ((*(unsigned char *)(v10 + 23) & 0x10) == 0)
        {
          size_t v59 = 0;
          HIBYTE(v296) = 0;
          __int16 v62 = &__dst;
          goto LABEL_64;
        }
        uint64_t v50 = ***(void ***)v10;
        uint64_t v51 = *(void *)(v50 + 152);
        uint64_t v52 = *(unsigned int *)(v50 + 168);
        if (v52)
        {
          LODWORD(v53) = (v52 - 1) & ((v10 >> 4) ^ (v10 >> 9));
          uint64_t v54 = (uint64_t *)(v51 + 16 * v53);
          uint64_t v55 = *v54;
          if (*v54 == v10) {
            goto LABEL_56;
          }
          int v56 = 1;
          while (v55 != -4096)
          {
            int v57 = v53 + v56++;
            uint64_t v53 = v57 & (v52 - 1);
            uint64_t v55 = *(void *)(v51 + 16 * v53);
            if (v55 == v10)
            {
              uint64_t v54 = (uint64_t *)(v51 + 16 * v53);
              goto LABEL_56;
            }
          }
        }
        uint64_t v54 = (uint64_t *)(v51 + 16 * v52);
LABEL_56:
        uint64_t v58 = (unint64_t *)v54[1];
        unint64_t v61 = *v58;
        unsigned int v60 = v58 + 2;
        size_t v59 = v61;
        if (v61 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_402;
        }
        if (v59 >= 0x17)
        {
          uint64_t v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17) {
            uint64_t v63 = v59 | 7;
          }
          uint64_t v64 = v63 + 1;
          __int16 v62 = (uint64_t *)operator new(v63 + 1);
          uint64_t v295 = (void *)v59;
          int64_t v296 = v64 | 0x8000000000000000;
          uint64_t __dst = (uint64_t)v62;
        }
        else
        {
          HIBYTE(v296) = v59;
          __int16 v62 = &__dst;
          if (!v59)
          {
LABEL_64:
            int v65 = v11 & 0x3FF0;
            *((unsigned char *)v62 + v59) = 0;
            if (v296 >= 0) {
              __int16 v66 = &__dst;
            }
            else {
              __int16 v66 = (uint64_t *)__dst;
            }
            if (v296 >= 0) {
              size_t v67 = HIBYTE(v296) & 0x7F;
            }
            else {
              size_t v67 = (size_t)v295;
            }
            int v68 = sub_1CBF2F03C((uint64_t)&v280, v66, v67);
            if (SHIBYTE(v296) < 0) {
              operator delete((void *)__dst);
            }
            BYTE6(v285) = 1;
            __int16 v69 = WORD4(v283);
            __int16 v70 = v283 - v284;
            sub_1CC780134((uint64_t *)&v280, 4, v68);
            if (v65 == 1648) {
              char v71 = 1;
            }
            else {
              char v71 = 2;
            }
            if (!v286) {
              unint64_t v286 = 1;
            }
            uint64_t v72 = v284;
            if ((void)v284 == *((void *)&v284 + 1))
            {
              sub_1CBF2C904((uint64_t *)&v280, 1uLL);
              uint64_t v72 = v284;
            }
            *(void *)&long long v284 = v72 - 1;
            *(unsigned char *)(v72 - 1) = v71;
            uint64_t v73 = (uint64_t *)*((void *)&v284 + 1);
            unsigned int v74 = v283 - v284 + DWORD2(v283);
            if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
            {
              sub_1CBF2C904((uint64_t *)&v280, 8uLL);
              uint64_t v73 = (uint64_t *)*((void *)&v284 + 1);
            }
            *uint64_t v73 = v74 | 0x600000000;
            *((void *)&v284 + 1) += 8;
            LODWORD(v285) = v285 + 1;
            __int16 v75 = WORD2(v285);
            if (WORD2(v285) <= 6u) {
              __int16 v75 = 6;
            }
            WORD2(v285) = v75;
            int v76 = sub_1CBF2CB78((uint64_t)&v280, v70 + v69);
            unint64_t v77 = (v49 >> 2) + 1;
            if (!(v77 >> 62))
            {
              int v78 = v76;
              if (v49 >> 1 > v77) {
                unint64_t v77 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
              }
              if (v77)
              {
                if (v77 >> 62) {
                  sub_1CB833614();
                }
                uint64_t v79 = (char *)operator new(4 * v77);
              }
              else
              {
                uint64_t v79 = 0;
              }
              unsigned int v80 = &v79[4 * (v49 >> 2)];
              *(_DWORD *)unsigned int v80 = v78;
              __int16 v81 = v80 + 4;
              if (v22 == v21)
              {
                int v258 = v80;
              }
              else
              {
                int v258 = &v79[v49 & 3];
                memcpy(v258, &v22[-(v49 & 0xFFFFFFFFFFFFFFFCLL)], v49 & 0xFFFFFFFFFFFFFFFCLL);
              }
              int v253 = v81;
              if (v21) {
                operator delete(v21);
              }
              goto LABEL_97;
            }
LABEL_402:
            abort();
          }
        }
        memmove(v62, v60, v59);
        goto LABEL_64;
      }
      int v19 = 1;
      while (v18 != -4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v18 = *(void *)(v14 + 16 * v16);
        if (v18 == v12)
        {
          uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
          goto LABEL_21;
        }
      }
    }
    uint64_t v17 = (uint64_t *)(v14 + 16 * v15);
    goto LABEL_21;
  }
  uint64_t v23 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*a3)[74])(a3, 101);
  if (!v23)
  {
    int v258 = 0;
    int v253 = 0;
    goto LABEL_97;
  }
  if ((*(unsigned char *)(v23 + 23) & 0x10) == 0)
  {
    size_t v235 = 0;
    HIBYTE(v296) = 0;
    BOOL v238 = &__dst;
    goto LABEL_377;
  }
  uint64_t v25 = ***(void ***)v23;
  uint64_t v26 = *(void *)(v25 + 152);
  uint64_t v27 = *(unsigned int *)(v25 + 168);
  if (!v27) {
    goto LABEL_368;
  }
  LODWORD(v28) = (v27 - 1) & ((v23 >> 4) ^ (v23 >> 9));
  int v29 = (uint64_t *)(v26 + 16 * v28);
  uint64_t v30 = *v29;
  if (*v29 != v23)
  {
    int v31 = 1;
    while (v30 != -4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & (v27 - 1);
      uint64_t v30 = *(void *)(v26 + 16 * v28);
      if (v30 == v23)
      {
        int v29 = (uint64_t *)(v26 + 16 * v28);
        goto LABEL_369;
      }
    }
LABEL_368:
    int v29 = (uint64_t *)(v26 + 16 * v27);
  }
LABEL_369:
  BOOL v234 = (unint64_t *)v29[1];
  unint64_t v237 = *v234;
  uint64_t v236 = v234 + 2;
  size_t v235 = v237;
  if (v237 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_402;
  }
  if (v235 >= 0x17)
  {
    uint64_t v239 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v235 | 7) != 0x17) {
      uint64_t v239 = v235 | 7;
    }
    uint64_t v240 = v239 + 1;
    BOOL v238 = (uint64_t *)operator new(v239 + 1);
    uint64_t v295 = (void *)v235;
    int64_t v296 = v240 | 0x8000000000000000;
    uint64_t __dst = (uint64_t)v238;
  }
  else
  {
    HIBYTE(v296) = v235;
    BOOL v238 = &__dst;
    if (!v235) {
      goto LABEL_377;
    }
  }
  memmove(v238, v236, v235);
LABEL_377:
  *((unsigned char *)v238 + v235) = 0;
  if (v296 >= 0) {
    int v241 = &__dst;
  }
  else {
    int v241 = (uint64_t *)__dst;
  }
  if (v296 >= 0) {
    size_t v242 = HIBYTE(v296) & 0x7F;
  }
  else {
    size_t v242 = (size_t)v295;
  }
  int v243 = sub_1CBF2F03C((uint64_t)&v280, v241, v242);
  if (SHIBYTE(v296) < 0) {
    operator delete((void *)__dst);
  }
  BYTE6(v285) = 1;
  __int16 v244 = v283 - v284 + WORD4(v283);
  sub_1CC780134((uint64_t *)&v280, 4, v243);
  if ((_BYTE)v287)
  {
    if (!v286) {
      unint64_t v286 = 1;
    }
    uint64_t v245 = v284;
    if ((void)v284 == *((void *)&v284 + 1))
    {
      sub_1CBF2C904((uint64_t *)&v280, 1uLL);
      uint64_t v245 = v284;
    }
    *(void *)&long long v284 = v245 - 1;
    *(unsigned char *)(v245 - 1) = 0;
    uint64_t v246 = (uint64_t *)*((void *)&v284 + 1);
    unsigned int v247 = v283 - v284 + DWORD2(v283);
    if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v280, 8uLL);
      uint64_t v246 = (uint64_t *)*((void *)&v284 + 1);
    }
    *uint64_t v246 = v247 | 0x600000000;
    *((void *)&v284 + 1) += 8;
    LODWORD(v285) = v285 + 1;
    __int16 v248 = WORD2(v285);
    if (WORD2(v285) <= 6u) {
      __int16 v248 = 6;
    }
    WORD2(v285) = v248;
  }
  int v249 = sub_1CBF2CB78((uint64_t)&v280, v244);
  int v258 = (char *)operator new(4uLL);
  *(_DWORD *)int v258 = v249;
  int v253 = v258 + 4;
LABEL_97:
  int v254 = llvm::GPUMetadataEmitter::EmitCommonMetadata(a1, &v280, v24, a3, a4, v289);
  uint64_t __dst = 1;
  for (uint64_t i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&__dst + i) = -4096;
  BOOL v264 = "agx.interpolations";
  LOWORD(v267) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v9, (const char **)&v264);
  if (NamedMetadata)
  {
    uint64_t v84 = NamedMetadata;
    uint64_t v85 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v85)
    {
      uint64_t v86 = 0;
      uint64_t v87 = 8 * v85;
      do
      {
        uint64_t v88 = *(void *)(**(void **)(v84 + 48) + v86);
        uint64_t v89 = *(unsigned int *)(v88 + 8);
        if (*(void *)(v88 - 8 * v89))
        {
          BOOL v264 = 0;
          BOOL v264 = *(char **)(*(void *)(v88 - 8 * v89) + 128);
          sub_1CB91FE08((uint64_t)&__dst, &v264)[1] = v88;
        }
        v86 += 8;
      }
      while (v87 != v86);
    }
  }
  char v277 = 0;
  unint64_t v278 = 0;
  uint64_t v279 = 0;
  __p = 0;
  unsigned int v275 = 0;
  uint64_t v276 = 0;
  uint64_t v90 = ((uint64_t (*)(uint64_t (***)(void)))(*a3)[70])(a3);
  uint64_t v91 = *(llvm::Module **)(v90 + 40);
  BOOL v264 = "tpp_functions";
  LOWORD(v267) = 259;
  uint64_t v92 = llvm::Module::getNamedMetadata(v91, (const char **)&v264);
  if (v92 && (v93 = *(void *)(v92 + 48), uint64_t v94 = *(unsigned int *)(v93 + 8), v94))
  {
    unsigned int v95 = *(uint64_t **)v93;
    uint64_t v96 = v94 - 1;
    do
    {
      uint64_t v97 = *v95++;
      uint64_t v98 = *(void *)(*(void *)(v97 - 8 * *(unsigned int *)(v97 + 8)) + 128);
      BOOL v100 = v96-- != 0;
      BOOL v125 = v98 == v90;
      BOOL v101 = v98 != v90;
    }
    while (!v125 && v100);
  }
  else
  {
    BOOL v101 = 1;
  }
  char v250 = v101;
  if (*(char *)(v9 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v273, *(const void **)(v9 + 216), *(void *)(v9 + 224));
  }
  else {
    std::string v273 = *(std::string *)(v9 + 216);
  }
  if (!std::string::compare(&v273, 0, 4uLL, "agx1"))
  {
    char v102 = 27;
  }
  else if (!std::string::compare(&v273, 0, 4uLL, "agx2"))
  {
    char v102 = 28;
  }
  else if (!std::string::compare(&v273, 0, 4uLL, "agx3"))
  {
    char v102 = 29;
  }
  else
  {
    char v102 = 0;
  }
  char v255 = v102;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  ((void (*)(char **__return_ptr, uint64_t (***)(void), uint64_t))(*a3)[16])(&v264, a3, 9);
  ((void (*)(char **__return_ptr, uint64_t (***)(void), uint64_t))(*a3)[17])(&v262, a3, 9);
  uint64_t v103 = v262;
  uint64_t v252 = v264;
  if (v264)
  {
    (*(void (**)(char **__return_ptr))(*(void *)v264 + 16))(&v264);
    uint64_t v104 = v264;
  }
  else
  {
    uint64_t v104 = 0;
  }
  unsigned int v251 = v103;
  if (v103)
  {
    (*(void (**)(char **__return_ptr, char *))(*(void *)v103 + 16))(&v264, v103);
    unsigned int v105 = v264;
  }
  else
  {
    unsigned int v105 = 0;
  }
  if (((*(uint64_t (**)(char *, char *))(*(void *)v104 + 24))(v104, v105) & 1) == 0)
  {
    unsigned int v107 = 0;
    unsigned int v106 = 0;
    while (1)
    {
      long long v108 = (void *)(*(uint64_t (**)(char *))(*(void *)v104 + 32))(v104);
      uint64_t v109 = *v108;
      unint64_t v110 = ((uint64_t (*)(uint64_t (***)(void), void))(*a3)[50])(a3, *v108);
      uint64_t v112 = v111;
      uint64_t v113 = ((uint64_t (*)(uint64_t (***)(void)))(*a3)[42])(a3);
      unsigned int v114 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v113 + 24))(v113, v112);
      if (__dst)
      {
        int v115 = 16;
        __int16 v116 = &v295;
      }
      else
      {
        int v115 = v296;
        if (!v296) {
          goto LABEL_142;
        }
        __int16 v116 = v295;
      }
      int v117 = v115 - 1;
      uint64_t v118 = (v115 - 1) & ((v109 >> 4) ^ (v109 >> 9));
      uint64_t v119 = v116[2 * v118];
      if (v109 != v119)
      {
        int v120 = 1;
        while (v119 != -4096)
        {
          int v121 = v118 + v120++;
          uint64_t v118 = v121 & v117;
          uint64_t v119 = v116[2 * v118];
          if (v109 == v119) {
            goto LABEL_139;
          }
        }
LABEL_142:
        uint64_t v122 = 0;
        goto LABEL_143;
      }
LABEL_139:
      uint64_t v122 = v116[2 * v118 + 1];
LABEL_143:
      unsigned int v123 = (HIDWORD(v110) + v114 - 1) / v114 + v110;
      unsigned __int16 FragmentShaderIterationData = llvm::GPUMetadataEmitter::CreateFragmentShaderIterationData((uint64_t)a1, v122, v110, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v277);
      BOOL v125 = v123 <= v106 || FragmentShaderIterationData == 0;
      if (!v125) {
        unsigned int v106 = v123;
      }
      if (v123 > v107 && FragmentShaderIterationData > 0xFFu) {
        unsigned int v107 = v123;
      }
      (*(void (**)(char *))(*(void *)v104 + 40))(v104);
      if ((*(uint64_t (**)(char *, char *))(*(void *)v104 + 24))(v104, v105)) {
        goto LABEL_154;
      }
    }
  }
  unsigned int v106 = 0;
  unsigned int v107 = 0;
LABEL_154:
  if (v105) {
    (*(void (**)(char *))(*(void *)v105 + 8))(v105);
  }
  (*(void (**)(char *))(*(void *)v104 + 8))(v104);
  if (v251) {
    (*(void (**)(char *))(*(void *)v251 + 8))(v251);
  }
  if (v252) {
    (*(void (**)(char *))(*(void *)v252 + 8))(v252);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDA4F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDA4F0))
  {
    byte_1EBCDA4E1 = 0;
    __cxa_guard_release(&qword_1EBCDA4F0);
  }
  if (byte_1EBCDA4E1) {
    unsigned int v127 = v106 + 16;
  }
  else {
    unsigned int v127 = v106;
  }
  if (byte_1EBCDA4E1) {
    v107 += 16;
  }
  sub_1CC77E7F0(&v264, (uint64_t)&v280, (int *)v277, v278, a5);
  uint64_t v128 = v264;
  if (v265 == v264) {
    uint64_t v129 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>> const&)::t;
  }
  else {
    uint64_t v129 = v264;
  }
  int v130 = sub_1CC781180((uint64_t)&v280, (uint64_t)v129, (v265 - v264) >> 2);
  if (v128) {
    operator delete(v128);
  }
  if (v253 == v258) {
    size_t v131 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const&)::t;
  }
  else {
    size_t v131 = v258;
  }
  int v132 = sub_1CC780E20((uint64_t)&v280, (uint64_t)v131, (v253 - v258) >> 2);
  BYTE6(v285) = 1;
  __int16 v134 = WORD4(v283);
  __int16 v133 = v284;
  __int16 v135 = v283;
  if (v107 || (_BYTE)v287)
  {
    if (v286 <= 3) {
      unint64_t v286 = 4;
    }
    unint64_t v136 = ((_BYTE)v284 - ((_BYTE)v283 + BYTE8(v283))) & 3;
    long long v137 = (uint64_t *)*((void *)&v284 + 1);
    if ((void)v284 - *((void *)&v284 + 1) < v136)
    {
      sub_1CBF2C904((uint64_t *)&v280, ((_BYTE)v284 - ((_BYTE)v283 + BYTE8(v283))) & 3);
      *(void *)&long long v284 = v284 - v136;
    }
    else
    {
      uint64_t v138 = v284 - v136;
      *(void *)&long long v284 = v284 - v136;
      if ((((_BYTE)v133 - ((_BYTE)v283 + BYTE8(v283))) & 3) == 0)
      {
LABEL_183:
        if ((unint64_t)(v138 - (void)v137) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v280, 4uLL);
          long long v137 = (uint64_t *)*((void *)&v284 + 1);
          uint64_t v138 = v284;
        }
        *(_DWORD *)(v138 - 4) = v107;
        *(void *)&long long v284 = v138 - 4;
        unsigned int v140 = v283 - (v138 - 4) + DWORD2(v283);
        if ((unint64_t)(v138 - 4 - (void)v137) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v280, 8uLL);
          long long v137 = (uint64_t *)*((void *)&v284 + 1);
        }
        *long long v137 = v140 | 0x400000000;
        *((void *)&v284 + 1) += 8;
        LODWORD(v285) = v285 + 1;
        __int16 v141 = WORD2(v285);
        if (WORD2(v285) <= 4u) {
          __int16 v141 = 4;
        }
        WORD2(v285) = v141;
        goto LABEL_190;
      }
    }
    uint64_t v139 = 0;
    do
      *(unsigned char *)(v284 + v139++) = 0;
    while (v136 != v139);
    long long v137 = (uint64_t *)*((void *)&v284 + 1);
    uint64_t v138 = v284;
    goto LABEL_183;
  }
LABEL_190:
  if (*(unsigned char *)(a5 + 73))
  {
    if (!v286) {
      unint64_t v286 = 1;
    }
    uint64_t v142 = v284;
    if ((void)v284 == *((void *)&v284 + 1))
    {
      sub_1CBF2C904((uint64_t *)&v280, 1uLL);
      uint64_t v142 = v284;
    }
    *(void *)&long long v284 = v142 - 1;
    char v143 = 2;
    goto LABEL_202;
  }
  if (*(unsigned char *)(a5 + 72))
  {
    if (!v286) {
      unint64_t v286 = 1;
    }
    uint64_t v142 = v284;
    if ((void)v284 == *((void *)&v284 + 1))
    {
      sub_1CBF2C904((uint64_t *)&v280, 1uLL);
      uint64_t v142 = v284;
    }
    *(void *)&long long v284 = v142 - 1;
    char v143 = 1;
LABEL_202:
    *(unsigned char *)(v142 - 1) = v143;
    uint64_t v144 = (uint64_t *)*((void *)&v284 + 1);
    unsigned int v145 = v283 - v284 + DWORD2(v283);
    if ((void)v284 - *((void *)&v284 + 1) >= 8uLL) {
      goto LABEL_203;
    }
LABEL_365:
    sub_1CBF2C904((uint64_t *)&v280, 8uLL);
    uint64_t v144 = (uint64_t *)*((void *)&v284 + 1);
    goto LABEL_203;
  }
  if (!(_BYTE)v287) {
    goto LABEL_206;
  }
  if (!v286) {
    unint64_t v286 = 1;
  }
  uint64_t v233 = v284;
  if ((void)v284 == *((void *)&v284 + 1))
  {
    sub_1CBF2C904((uint64_t *)&v280, 1uLL);
    uint64_t v233 = v284;
  }
  *(void *)&long long v284 = v233 - 1;
  *(unsigned char *)(v233 - 1) = 0;
  uint64_t v144 = (uint64_t *)*((void *)&v284 + 1);
  unsigned int v145 = v283 - v284 + DWORD2(v283);
  if ((void)v284 - *((void *)&v284 + 1) <= 7uLL) {
    goto LABEL_365;
  }
LABEL_203:
  *uint64_t v144 = v145 | 0x600000000;
  *((void *)&v284 + 1) += 8;
  LODWORD(v285) = v285 + 1;
  __int16 v146 = WORD2(v285);
  if (WORD2(v285) <= 6u) {
    __int16 v146 = 6;
  }
  WORD2(v285) = v146;
LABEL_206:
  sub_1CC780618((uint64_t *)&v280, v130);
  sub_1CC780134((uint64_t *)&v280, 12, v132);
  uint64_t v147 = *(void *)(a5 + 40);
  if (v147 || (int v148 = v287, (_BYTE)v287))
  {
    unsigned int v150 = sub_1CC7807FC((uint64_t)&v280, v147);
    unsigned int v151 = (uint64_t *)*((void *)&v284 + 1);
    uint64_t v149 = a7;
    if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v280, 8uLL);
      unsigned int v151 = (uint64_t *)*((void *)&v284 + 1);
    }
    *unsigned int v151 = v150 | 0xE00000000;
    *((void *)&v284 + 1) += 8;
    LODWORD(v285) = v285 + 1;
    __int16 v152 = WORD2(v285);
    if (WORD2(v285) <= 0xEu) {
      __int16 v152 = 14;
    }
    WORD2(v285) = v152;
    int v148 = v287;
  }
  else
  {
    uint64_t v149 = a7;
  }
  uint64_t v153 = *(void *)(a5 + 48);
  if (v153 || v148)
  {
    unsigned int v154 = sub_1CC7807FC((uint64_t)&v280, v153);
    int v155 = (uint64_t *)*((void *)&v284 + 1);
    if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v280, 8uLL);
      int v155 = (uint64_t *)*((void *)&v284 + 1);
    }
    *int v155 = v154 | 0x1200000000;
    *((void *)&v284 + 1) += 8;
    LODWORD(v285) = v285 + 1;
    __int16 v156 = WORD2(v285);
    if (WORD2(v285) <= 0x12u) {
      __int16 v156 = 18;
    }
    WORD2(v285) = v156;
    int v148 = v287;
  }
  __int16 v157 = v135 - v133;
  uint64_t v158 = *(void *)(a5 + 56);
  if (v158 || v148)
  {
    unsigned int v160 = sub_1CC7807FC((uint64_t)&v280, v158);
    uint64_t v161 = (uint64_t *)*((void *)&v284 + 1);
    int v159 = v254;
    if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v280, 8uLL);
      uint64_t v161 = (uint64_t *)*((void *)&v284 + 1);
    }
    *uint64_t v161 = v160 | 0x1000000000;
    *((void *)&v284 + 1) += 8;
    LODWORD(v285) = v285 + 1;
    __int16 v162 = WORD2(v285);
    if (WORD2(v285) <= 0x10u) {
      __int16 v162 = 16;
    }
    WORD2(v285) = v162;
    int v148 = v287;
  }
  else
  {
    int v159 = v254;
  }
  __int16 v163 = v157 + v134;
  uint64_t v164 = *(void *)(a5 + 64);
  if (v164 || v148)
  {
    unsigned int v165 = sub_1CC7807FC((uint64_t)&v280, v164);
    int v166 = (uint64_t *)*((void *)&v284 + 1);
    if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v280, 8uLL);
      int v166 = (uint64_t *)*((void *)&v284 + 1);
    }
    *int v166 = v165 | 0x1400000000;
    *((void *)&v284 + 1) += 8;
    LODWORD(v285) = v285 + 1;
    __int16 v167 = WORD2(v285);
    if (WORD2(v285) <= 0x14u) {
      __int16 v167 = 20;
    }
    WORD2(v285) = v167;
  }
  uint64_t v168 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**a3)(a3, 30, 0, 1, 2);
  if (v168 || (_BYTE)v287)
  {
    unsigned int v169 = sub_1CBF2CB00((uint64_t)&v280, v168 != 0);
    int v170 = (uint64_t *)*((void *)&v284 + 1);
    if ((void)v284 - *((void *)&v284 + 1) <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)&v280, 8uLL);
      int v170 = (uint64_t *)*((void *)&v284 + 1);
    }
    uint64_t *v170 = v169 | 0x1600000000;
    *((void *)&v284 + 1) += 8;
    LODWORD(v285) = v285 + 1;
    __int16 v171 = WORD2(v285);
    if (WORD2(v285) <= 0x16u) {
      __int16 v171 = 22;
    }
    WORD2(v285) = v171;
  }
  int v172 = sub_1CBF2CB78((uint64_t)&v280, v163);
  BYTE6(v285) = 1;
  __int16 v173 = v283 - v284 + WORD4(v283);
  sub_1CC780434((uint64_t *)&v280, v159);
  if (v172)
  {
    if (v286 <= 3) {
      unint64_t v286 = 4;
    }
    int v174 = v283;
    int v175 = DWORD2(v283);
    unint64_t v176 = ((_BYTE)v284 - ((_BYTE)v283 + BYTE8(v283))) & 3;
    if ((void)v284 - *((void *)&v284 + 1) < v176)
    {
      sub_1CBF2C904((uint64_t *)&v280, ((_BYTE)v284 - ((_BYTE)v283 + BYTE8(v283))) & 3);
      *(void *)&long long v284 = v284 - v176;
    }
    else
    {
      uint64_t v177 = v284 - v176;
      *(void *)&long long v284 = v284 - v176;
      if (!v176) {
        goto LABEL_251;
      }
    }
    uint64_t v178 = 0;
    do
      *(unsigned char *)(v284 + v178++) = 0;
    while (v176 != v178);
    int v175 = DWORD2(v283);
    uint64_t v177 = v284;
    int v174 = v283;
LABEL_251:
    int v179 = v175 - v177 + v174 - v172;
    int v180 = v179 + 4;
    if (v179 == -4 && !(_BYTE)v287) {
      goto LABEL_266;
    }
    if (v286 <= 3) {
      unint64_t v286 = 4;
    }
    unint64_t v181 = ((_BYTE)v177 - ((_BYTE)v174 + (_BYTE)v175)) & 3;
    int v182 = (uint64_t *)*((void *)&v284 + 1);
    if (v177 - *((void *)&v284 + 1) < v181)
    {
      sub_1CBF2C904((uint64_t *)&v280, v181);
      *(void *)&long long v284 = v284 - v181;
    }
    else
    {
      uint64_t v183 = v177 - v181;
      *(void *)&long long v284 = v177 - v181;
      if (!v181)
      {
LABEL_259:
        if ((unint64_t)(v183 - (void)v182) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v280, 4uLL);
          int v182 = (uint64_t *)*((void *)&v284 + 1);
          uint64_t v183 = v284;
        }
        *(_DWORD *)(v183 - 4) = v180;
        *(void *)&long long v284 = v183 - 4;
        unsigned int v185 = v283 - (v183 - 4) + DWORD2(v283);
        if ((unint64_t)(v183 - 4 - (void)v182) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v280, 8uLL);
          int v182 = (uint64_t *)*((void *)&v284 + 1);
        }
        *int v182 = v185 | 0x800000000;
        *((void *)&v284 + 1) += 8;
        LODWORD(v285) = v285 + 1;
        __int16 v186 = WORD2(v285);
        if (WORD2(v285) <= 8u) {
          __int16 v186 = 8;
        }
        WORD2(v285) = v186;
        goto LABEL_266;
      }
    }
    uint64_t v184 = 0;
    do
      *(unsigned char *)(v284 + v184++) = 0;
    while (v181 != v184);
    int v182 = (uint64_t *)*((void *)&v284 + 1);
    uint64_t v183 = v284;
    goto LABEL_259;
  }
LABEL_266:
  int v187 = sub_1CBF2CB78((uint64_t)&v280, v173);
  sub_1CC7808E8((uint64_t)&v280, v187);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)a1, v188, (uint64_t)a3, (uint64_t ***)a4, v257, v149, "__fragment", &v280, 0);
  if ((v255 & 0x1E) != 0x1C) {
    goto LABEL_348;
  }
  sub_1CC76A754((uint64_t)v257, (uint64_t)v149, (uint64_t)"__GPU_METADATA_2", 0x10uLL, (uint64_t)"__fragment", 10);
  BOOL v264 = 0;
  LOBYTE(v265) = 0;
  long long v266 = xmmword_1CFB1D0D0;
  long long v267 = 0u;
  long long v268 = 0u;
  uint64_t v269 = 0;
  unint64_t v270 = 1;
  __int16 v271 = 256;
  uint64_t v272 = 0;
  sub_1CC77E7F0(&v262, (uint64_t)&v264, (int *)__p, v275, a5);
  uint64_t v189 = v262;
  if (v263 == v262) {
    int v190 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>> const&)::t;
  }
  else {
    int v190 = v262;
  }
  int v191 = sub_1CC781180((uint64_t)&v264, (uint64_t)v190, (v263 - v262) >> 2);
  if (v189) {
    operator delete(v189);
  }
  BYTE6(v269) = 1;
  __int16 v192 = v267 - v268 + WORD4(v267);
  if (v127 || (_BYTE)v271)
  {
    if (v270 <= 3) {
      unint64_t v270 = 4;
    }
    unint64_t v193 = ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3;
    int v194 = (uint64_t *)*((void *)&v268 + 1);
    if ((void)v268 - *((void *)&v268 + 1) < v193)
    {
      sub_1CBF2C904((uint64_t *)&v264, ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3);
      *(void *)&long long v268 = v268 - v193;
    }
    else
    {
      uint64_t v195 = v268 - v193;
      *(void *)&long long v268 = v268 - v193;
      if (!v193)
      {
LABEL_281:
        if ((unint64_t)(v195 - (void)v194) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v264, 4uLL);
          int v194 = (uint64_t *)*((void *)&v268 + 1);
          uint64_t v195 = v268;
        }
        *(_DWORD *)(v195 - 4) = v127;
        *(void *)&long long v268 = v195 - 4;
        unsigned int v197 = v267 - (v195 - 4) + DWORD2(v267);
        if ((unint64_t)(v195 - 4 - (void)v194) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v264, 8uLL);
          int v194 = (uint64_t *)*((void *)&v268 + 1);
        }
        *int v194 = v197 | 0x600000000;
        *((void *)&v268 + 1) += 8;
        LODWORD(v269) = v269 + 1;
        __int16 v198 = WORD2(v269);
        if (WORD2(v269) <= 6u) {
          __int16 v198 = 6;
        }
        WORD2(v269) = v198;
        goto LABEL_288;
      }
    }
    uint64_t v196 = 0;
    do
      *(unsigned char *)(v268 + v196++) = 0;
    while (v193 != v196);
    int v194 = (uint64_t *)*((void *)&v268 + 1);
    uint64_t v195 = v268;
    goto LABEL_281;
  }
LABEL_288:
  sub_1CC780618((uint64_t *)&v264, v191);
  int v199 = *(_DWORD *)(a5 + 16);
  if (!v199 && !(_BYTE)v271) {
    goto LABEL_304;
  }
  if (v270 <= 3) {
    unint64_t v270 = 4;
  }
  unsigned int v200 = (uint64_t *)*((void *)&v268 + 1);
  unint64_t v201 = ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3;
  if ((void)v268 - *((void *)&v268 + 1) < v201)
  {
    sub_1CBF2C904((uint64_t *)&v264, ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3);
    *(void *)&long long v268 = v268 - v201;
LABEL_294:
    uint64_t v203 = 0;
    do
      *(unsigned char *)(v268 + v203++) = 0;
    while (v201 != v203);
    unsigned int v200 = (uint64_t *)*((void *)&v268 + 1);
    uint64_t v202 = v268;
    goto LABEL_297;
  }
  uint64_t v202 = v268 - v201;
  *(void *)&long long v268 = v268 - v201;
  if (v201) {
    goto LABEL_294;
  }
LABEL_297:
  if ((unint64_t)(v202 - (void)v200) <= 3)
  {
    sub_1CBF2C904((uint64_t *)&v264, 4uLL);
    unsigned int v200 = (uint64_t *)*((void *)&v268 + 1);
    uint64_t v202 = v268;
  }
  *(_DWORD *)(v202 - 4) = v199;
  *(void *)&long long v268 = v202 - 4;
  unsigned int v204 = v267 - (v202 - 4) + DWORD2(v267);
  if ((unint64_t)(v202 - 4 - (void)v200) <= 7)
  {
    sub_1CBF2C904((uint64_t *)&v264, 8uLL);
    unsigned int v200 = (uint64_t *)*((void *)&v268 + 1);
  }
  *unsigned int v200 = v204 | 0x400000000;
  *((void *)&v268 + 1) += 8;
  LODWORD(v269) = v269 + 1;
  __int16 v205 = WORD2(v269);
  if (WORD2(v269) <= 4u) {
    __int16 v205 = 4;
  }
  WORD2(v269) = v205;
LABEL_304:
  int v206 = sub_1CBF2CB78((uint64_t)&v264, v192);
  BYTE6(v269) = 1;
  int v207 = DWORD2(v267);
  int v208 = v267;
  __int16 v209 = v267 - v268 + WORD4(v267);
  char v210 = v250;
  if (!v206) {
    char v210 = 1;
  }
  if ((v210 & 1) == 0)
  {
    int v211 = v206;
    if (v270 <= 3) {
      unint64_t v270 = 4;
    }
    unint64_t v212 = ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3;
    if ((void)v268 - *((void *)&v268 + 1) < v212)
    {
      sub_1CBF2C904((uint64_t *)&v264, ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3);
      *(void *)&long long v268 = v268 - v212;
    }
    else
    {
      uint64_t v213 = v268 - v212;
      *(void *)&long long v268 = v268 - v212;
      if (!v212) {
        goto LABEL_314;
      }
    }
    uint64_t v214 = 0;
    do
      *(unsigned char *)(v268 + v214++) = 0;
    while (v212 != v214);
    int v207 = DWORD2(v267);
    uint64_t v213 = v268;
    int v208 = v267;
LABEL_314:
    int v215 = v207 - v213 + v208 - v211;
    int v216 = v215 + 4;
    if (v215 == -4 && !(_BYTE)v271) {
      goto LABEL_329;
    }
    if (v270 <= 3) {
      unint64_t v270 = 4;
    }
    unint64_t v217 = ((_BYTE)v213 - ((_BYTE)v208 + (_BYTE)v207)) & 3;
    uint64_t v218 = (uint64_t *)*((void *)&v268 + 1);
    if (v213 - *((void *)&v268 + 1) < v217)
    {
      sub_1CBF2C904((uint64_t *)&v264, v217);
      *(void *)&long long v268 = v268 - v217;
    }
    else
    {
      uint64_t v219 = v213 - v217;
      *(void *)&long long v268 = v213 - v217;
      if (!v217)
      {
LABEL_322:
        if ((unint64_t)(v219 - (void)v218) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v264, 4uLL);
          uint64_t v218 = (uint64_t *)*((void *)&v268 + 1);
          uint64_t v219 = v268;
        }
        *(_DWORD *)(v219 - 4) = v216;
        *(void *)&long long v268 = v219 - 4;
        unsigned int v221 = v267 - (v219 - 4) + DWORD2(v267);
        if ((unint64_t)(v219 - 4 - (void)v218) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v264, 8uLL);
          uint64_t v218 = (uint64_t *)*((void *)&v268 + 1);
        }
        *uint64_t v218 = v221 | 0x400000000;
        *((void *)&v268 + 1) += 8;
        LODWORD(v269) = v269 + 1;
        __int16 v222 = WORD2(v269);
        if (WORD2(v269) <= 4u) {
          __int16 v222 = 4;
        }
        WORD2(v269) = v222;
        goto LABEL_329;
      }
    }
    uint64_t v220 = 0;
    do
      *(unsigned char *)(v268 + v220++) = 0;
    while (v217 != v220);
    uint64_t v218 = (uint64_t *)*((void *)&v268 + 1);
    uint64_t v219 = v268;
    goto LABEL_322;
  }
LABEL_329:
  int v223 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**a3)(a3, 1, 0, 1, 1);
  if (v223) {
    BOOL v224 = 0;
  }
  else {
    BOOL v224 = v271 == 0;
  }
  if (!v224)
  {
    if (v270 <= 3) {
      unint64_t v270 = 4;
    }
    unsigned int v225 = (uint64_t *)*((void *)&v268 + 1);
    unint64_t v226 = ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3;
    if ((void)v268 - *((void *)&v268 + 1) < v226)
    {
      sub_1CBF2C904((uint64_t *)&v264, ((_BYTE)v268 - ((_BYTE)v267 + BYTE8(v267))) & 3);
      *(void *)&long long v268 = v268 - v226;
    }
    else
    {
      uint64_t v227 = v268 - v226;
      *(void *)&long long v268 = v268 - v226;
      if (!v226)
      {
LABEL_340:
        if ((unint64_t)(v227 - (void)v225) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v264, 4uLL);
          unsigned int v225 = (uint64_t *)*((void *)&v268 + 1);
          uint64_t v227 = v268;
        }
        *(_DWORD *)(v227 - 4) = v223;
        *(void *)&long long v268 = v227 - 4;
        unsigned int v229 = v267 - (v227 - 4) + DWORD2(v267);
        if ((unint64_t)(v227 - 4 - (void)v225) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v264, 8uLL);
          unsigned int v225 = (uint64_t *)*((void *)&v268 + 1);
        }
        *unsigned int v225 = v229 | 0x600000000;
        *((void *)&v268 + 1) += 8;
        LODWORD(v269) = v269 + 1;
        __int16 v230 = WORD2(v269);
        if (WORD2(v269) <= 6u) {
          __int16 v230 = 6;
        }
        WORD2(v269) = v230;
        goto LABEL_347;
      }
    }
    uint64_t v228 = 0;
    do
      *(unsigned char *)(v268 + v228++) = 0;
    while (v226 != v228);
    unsigned int v225 = (uint64_t *)*((void *)&v268 + 1);
    uint64_t v227 = v268;
    goto LABEL_340;
  }
LABEL_347:
  int v231 = sub_1CBF2CB78((uint64_t)&v264, v209);
  sub_1CC7808E8((uint64_t)&v264, v231);
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)a1, (uint64_t)(a1 + 191), &v264, (uint64_t)v149);
  sub_1CB8339A4(&v264);
LABEL_348:
  if (__p)
  {
    unsigned int v275 = (int *)__p;
    operator delete(__p);
  }
  if (v277)
  {
    unint64_t v278 = (int *)v277;
    operator delete(v277);
  }
  if ((__dst & 1) == 0) {
    MEMORY[0x1D25D9CD0](v295, 8);
  }
  if (v258) {
    operator delete(v258);
  }
  sub_1CB8339A4(&v280);
  if (v291)
  {
    uint64_t v292 = v291;
    operator delete(v291);
  }
  MEMORY[0x1D25D9CD0](v289[0], 8);
  return "__fragment";
}

const char *llvm::GPUMetadataEmitter::EmitDriverShaderMetadata(llvm::GPUMetadataEmitter *this, const llvm::DataLayout *a2, uint64_t (***a3)(void), const llvm::Function *a4, llvm::MCContext *a5, llvm::MCStreamer *a6)
{
  __int16 v11 = (llvm::Module *)*((void *)a4 + 5);
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v29 = 0;
  sub_1CD0FEC94(v11, (uint64_t)v27);
  uint64_t v18 = 0;
  char v19 = 0;
  long long v20 = xmmword_1CFB1D0D0;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v23 = 0;
  uint64_t v24 = 1;
  __int16 v25 = 256;
  uint64_t v26 = 0;
  int v13 = llvm::GPUMetadataEmitter::EmitCommonMetadata((uint64_t *)this, &v18, v12, a3, (uint64_t)a4, v27);
  BYTE6(v23) = 1;
  __int16 v14 = v21 - v22 + WORD4(v21);
  sub_1CC780434((uint64_t *)&v18, v13);
  int v15 = sub_1CBF2CB78((uint64_t)&v18, v14);
  sub_1CC7808E8((uint64_t)&v18, v15);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)this, v16, (uint64_t)a3, (uint64_t ***)a4, a5, a6, "__fragment", &v18, 0);
  sub_1CB8339A4(&v18);
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  MEMORY[0x1D25D9CD0](v27[0], 8);
  return "__fragment";
}

void *llvm::GPUMetadataEmitter::EmitVIDMAListMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
  if (!v9) {
    return result;
  }
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v48 = 0;
  char v49 = 0;
  long long v50 = xmmword_1CFB1D0D0;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  __int16 v55 = 256;
  uint64_t v56 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
  uint64_t v12 = 0;
  int v13 = 0;
  if (v11)
  {
    __int16 v14 = (int *)v10;
    int v15 = 0;
    int v13 = 0;
    int v16 = 0;
    uint64_t v17 = (int *)(v10 + 16 * v11);
    do
    {
      int v18 = sub_1CD639804((uint64_t)&v48, *v14, v14[1], v14[2], v14[3]);
      int v19 = v18;
      if (v16 >= v15)
      {
        uint64_t v20 = (v16 - v13) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          abort();
        }
        if ((v15 - v13) >> 1 > v21) {
          unint64_t v21 = (v15 - v13) >> 1;
        }
        if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 >> 62) {
            sub_1CB833614();
          }
          uint64_t v23 = (char *)operator new(4 * v22);
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[4 * v20];
        *(_DWORD *)uint64_t v24 = v19;
        uint64_t v12 = v24 + 4;
        while (v16 != v13)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        int v15 = &v23[4 * v22];
        if (v13) {
          operator delete(v13);
        }
        int v13 = v24;
      }
      else
      {
        *(_DWORD *)int v16 = v18;
        uint64_t v12 = v16 + 4;
      }
      v14 += 4;
      int v16 = v12;
    }
    while (v14 != v17);
  }
  if (v12 == v13) {
    uint64_t v26 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::VIDMAInfo>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::VIDMAInfo>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::VIDMAInfo>> const&)::t;
  }
  else {
    uint64_t v26 = v13;
  }
  int v27 = sub_1CD45296C((uint64_t)&v48, (uint64_t)v26, (v12 - v13) >> 2);
  int v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208))(a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 208))(a2);
  int v30 = sub_1CC77C568((uint64_t)&v48, v28, v29);
  BYTE6(v53) = 1;
  __int16 v31 = v51 - v52 + WORD4(v51);
  sub_1CC780134(&v48, 6, v30);
  sub_1CD63A918(&v48, v27);
  int v32 = sub_1CBF2CB78((uint64_t)&v48, v31);
  sub_1CC7808E8((uint64_t)&v48, v32);
  size_t v33 = (const void *)v52;
  unsigned int v34 = DWORD2(v51) - v52 + v51;
  size_t v35 = v34;
  v44[0] = (unsigned int *)v52;
  v44[1] = (unsigned int *)v34;
  long long v45 = xmmword_1CFB1D0E0;
  uint64_t v46 = 0;
  char v47 = 1;
  if (v34 >= 0x17uLL)
  {
    uint64_t v38 = (v34 & 0xFFFFFFF8) + 8;
    if ((v35 | 7) == 0x17) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = v35 | 7;
    }
    p_dst = (void **)operator new(v39 + 1);
    uint64_t __dst = p_dst;
    uint64_t v43 = v39 - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v37 = v41;
  }
  else
  {
    HIBYTE(v43) = v34;
    p_dst = (void **)&__dst;
    uint64_t v37 = v41;
    if (!(DWORD2(v51) - v52 + v51)) {
      goto LABEL_34;
    }
  }
  memmove(p_dst, v33, v35);
LABEL_34:
  *((unsigned char *)p_dst + v35) = 0;
  sub_1CD63993C(v44);
  if (SHIBYTE(v43) < 0) {
    operator delete(__dst);
  }
  sub_1CC76A754(v40, v37, (uint64_t)"__GPU_VIDMALIST", 0xFuLL, (uint64_t)"__vertex", 8);
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(a1, a1 + 5152, &v48, v37);
  if (v13) {
    operator delete(v13);
  }
  return sub_1CB8339A4(&v48);
}

void *llvm::GPUMetadataEmitter::EmitStatsMetadata(void *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(llvm::Module **)(a3 + 40);
  __int16 v230 = "agx.compiler_counters";
  LOWORD(v233) = 259;
  if (llvm::Module::getNamedMetadata(v11, &v230))
  {
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 448))(a2);
    __int16 v230 = 0;
    char v231 = 0;
    long long v232 = xmmword_1CFB1D0D0;
    long long v233 = 0u;
    long long v234 = 0u;
    uint64_t v235 = 0x1000000000000;
    unint64_t v236 = 1;
    __int16 v237 = 256;
    uint64_t v238 = 0;
    if (v12)
    {
      int v13 = v12;
      unint64_t v236 = 4;
      sub_1CBF2C904((uint64_t *)&v230, 4uLL);
      uint64_t v14 = v234;
      *(_DWORD *)(v234 - 4) = v13;
      *(void *)&long long v234 = v14 - 4;
      unsigned int v15 = v233 - (v14 - 4) + DWORD2(v233);
      int v16 = (uint64_t *)*((void *)&v234 + 1);
      if ((unint64_t)(v14 - 4 - *((void *)&v234 + 1)) <= 7)
      {
        sub_1CBF2C904((uint64_t *)&v230, 8uLL);
        int v16 = (uint64_t *)*((void *)&v234 + 1);
      }
      *int v16 = v15 | 0x400000000;
      *((void *)&v234 + 1) += 8;
      LODWORD(v235) = v235 + 1;
      __int16 v17 = WORD2(v235);
      if (WORD2(v235) <= 4u) {
        __int16 v17 = 4;
      }
      WORD2(v235) = v17;
    }
    int v18 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a2)(a2, 11, 0, 1, 4);
    if (v18) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v237 == 0;
    }
    if (v19)
    {
      int v26 = 0;
      goto LABEL_27;
    }
    if (v236 <= 3) {
      unint64_t v236 = 4;
    }
    uint64_t v20 = (uint64_t *)*((void *)&v234 + 1);
    unint64_t v21 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
    if ((void)v234 - *((void *)&v234 + 1) < v21)
    {
      sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
      *(void *)&long long v234 = v234 - v21;
    }
    else
    {
      uint64_t v22 = v234 - v21;
      *(void *)&long long v234 = v234 - v21;
      if (!v21)
      {
LABEL_19:
        if ((unint64_t)(v22 - (void)v20) <= 3)
        {
          sub_1CBF2C904((uint64_t *)&v230, 4uLL);
          uint64_t v20 = (uint64_t *)*((void *)&v234 + 1);
          uint64_t v22 = v234;
        }
        *(_DWORD *)(v22 - 4) = v18;
        *(void *)&long long v234 = v22 - 4;
        unsigned int v24 = v233 - (v22 - 4) + DWORD2(v233);
        if ((unint64_t)(v22 - 4 - (void)v20) <= 7)
        {
          sub_1CBF2C904((uint64_t *)&v230, 8uLL);
          uint64_t v20 = (uint64_t *)*((void *)&v234 + 1);
        }
        *uint64_t v20 = v24 | 0x600000000;
        *((void *)&v234 + 1) += 8;
        LODWORD(v235) = v235 + 1;
        __int16 v25 = WORD2(v235);
        if (WORD2(v235) <= 6u) {
          __int16 v25 = 6;
        }
        WORD2(v235) = v25;
        int v26 = v237;
LABEL_27:
        int v27 = *a4;
        if (!(*a4 | v26)) {
          goto LABEL_42;
        }
        if (v236 <= 3) {
          unint64_t v236 = 4;
        }
        int v28 = (uint64_t *)*((void *)&v234 + 1);
        unint64_t v29 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
        if ((void)v234 - *((void *)&v234 + 1) < v29)
        {
          sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
          *(void *)&long long v234 = v234 - v29;
        }
        else
        {
          uint64_t v30 = v234 - v29;
          *(void *)&long long v234 = v234 - v29;
          if (!v29)
          {
LABEL_35:
            if ((unint64_t)(v30 - (void)v28) <= 3)
            {
              sub_1CBF2C904((uint64_t *)&v230, 4uLL);
              int v28 = (uint64_t *)*((void *)&v234 + 1);
              uint64_t v30 = v234;
            }
            *(_DWORD *)(v30 - 4) = v27;
            *(void *)&long long v234 = v30 - 4;
            unsigned int v32 = v233 - (v30 - 4) + DWORD2(v233);
            if ((unint64_t)(v30 - 4 - (void)v28) <= 7)
            {
              sub_1CBF2C904((uint64_t *)&v230, 8uLL);
              int v28 = (uint64_t *)*((void *)&v234 + 1);
            }
            *int v28 = v32 | 0x800000000;
            *((void *)&v234 + 1) += 8;
            LODWORD(v235) = v235 + 1;
            __int16 v33 = WORD2(v235);
            if (WORD2(v235) <= 8u) {
              __int16 v33 = 8;
            }
            WORD2(v235) = v33;
LABEL_42:
            int v34 = (*(uint64_t (**)(void))(*(void *)*a1 + 240))();
            if (v34) {
              BOOL v35 = 0;
            }
            else {
              BOOL v35 = v237 == 0;
            }
            if (v35) {
              goto LABEL_60;
            }
            int v36 = v34;
            if (v236 <= 3) {
              unint64_t v236 = 4;
            }
            uint64_t v37 = (uint64_t *)*((void *)&v234 + 1);
            unint64_t v38 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
            if ((void)v234 - *((void *)&v234 + 1) < v38)
            {
              sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
              *(void *)&long long v234 = v234 - v38;
            }
            else
            {
              uint64_t v39 = v234 - v38;
              *(void *)&long long v234 = v234 - v38;
              if (!v38)
              {
LABEL_53:
                if ((unint64_t)(v39 - (void)v37) <= 3)
                {
                  sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                  uint64_t v37 = (uint64_t *)*((void *)&v234 + 1);
                  uint64_t v39 = v234;
                }
                *(_DWORD *)(v39 - 4) = v36;
                *(void *)&long long v234 = v39 - 4;
                unsigned int v41 = v233 - (v39 - 4) + DWORD2(v233);
                if ((unint64_t)(v39 - 4 - (void)v37) <= 7)
                {
                  sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                  uint64_t v37 = (uint64_t *)*((void *)&v234 + 1);
                }
                *uint64_t v37 = v41 | 0xA00000000;
                *((void *)&v234 + 1) += 8;
                LODWORD(v235) = v235 + 1;
                __int16 v42 = WORD2(v235);
                if (WORD2(v235) <= 0xAu) {
                  __int16 v42 = 10;
                }
                WORD2(v235) = v42;
LABEL_60:
                int v43 = (*(uint64_t (**)(void))(*(void *)*a1 + 8))();
                if (v43) {
                  BOOL v44 = 0;
                }
                else {
                  BOOL v44 = v237 == 0;
                }
                if (v44) {
                  goto LABEL_78;
                }
                int v45 = v43;
                if (v236 <= 3) {
                  unint64_t v236 = 4;
                }
                uint64_t v46 = (uint64_t *)*((void *)&v234 + 1);
                unint64_t v47 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                if ((void)v234 - *((void *)&v234 + 1) < v47)
                {
                  sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                  *(void *)&long long v234 = v234 - v47;
                }
                else
                {
                  uint64_t v48 = v234 - v47;
                  *(void *)&long long v234 = v234 - v47;
                  if (!v47)
                  {
LABEL_71:
                    if ((unint64_t)(v48 - (void)v46) <= 3)
                    {
                      sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                      uint64_t v46 = (uint64_t *)*((void *)&v234 + 1);
                      uint64_t v48 = v234;
                    }
                    *(_DWORD *)(v48 - 4) = v45;
                    *(void *)&long long v234 = v48 - 4;
                    unsigned int v50 = v233 - (v48 - 4) + DWORD2(v233);
                    if ((unint64_t)(v48 - 4 - (void)v46) <= 7)
                    {
                      sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                      uint64_t v46 = (uint64_t *)*((void *)&v234 + 1);
                    }
                    *uint64_t v46 = v50 | 0xC00000000;
                    *((void *)&v234 + 1) += 8;
                    LODWORD(v235) = v235 + 1;
                    __int16 v51 = WORD2(v235);
                    if (WORD2(v235) <= 0xCu) {
                      __int16 v51 = 12;
                    }
                    WORD2(v235) = v51;
LABEL_78:
                    int v52 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
                    if (v52) {
                      BOOL v53 = 0;
                    }
                    else {
                      BOOL v53 = v237 == 0;
                    }
                    if (v53) {
                      goto LABEL_96;
                    }
                    int v54 = v52;
                    if (v236 <= 3) {
                      unint64_t v236 = 4;
                    }
                    __int16 v55 = (uint64_t *)*((void *)&v234 + 1);
                    unint64_t v56 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                    if ((void)v234 - *((void *)&v234 + 1) < v56)
                    {
                      sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                      *(void *)&long long v234 = v234 - v56;
                    }
                    else
                    {
                      uint64_t v57 = v234 - v56;
                      *(void *)&long long v234 = v234 - v56;
                      if (!v56)
                      {
LABEL_89:
                        if ((unint64_t)(v57 - (void)v55) <= 3)
                        {
                          sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                          __int16 v55 = (uint64_t *)*((void *)&v234 + 1);
                          uint64_t v57 = v234;
                        }
                        *(_DWORD *)(v57 - 4) = v54;
                        *(void *)&long long v234 = v57 - 4;
                        unsigned int v59 = v233 - (v57 - 4) + DWORD2(v233);
                        if ((unint64_t)(v57 - 4 - (void)v55) <= 7)
                        {
                          sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                          __int16 v55 = (uint64_t *)*((void *)&v234 + 1);
                        }
                        uint64_t *v55 = v59 | 0xE00000000;
                        *((void *)&v234 + 1) += 8;
                        LODWORD(v235) = v235 + 1;
                        __int16 v60 = WORD2(v235);
                        if (WORD2(v235) <= 0xEu) {
                          __int16 v60 = 14;
                        }
                        WORD2(v235) = v60;
LABEL_96:
                        int v61 = (*(uint64_t (**)(void))(*(void *)*a1 + 256))(*a1);
                        if (v61) {
                          BOOL v62 = 0;
                        }
                        else {
                          BOOL v62 = v237 == 0;
                        }
                        if (v62) {
                          goto LABEL_114;
                        }
                        int v63 = v61;
                        if (v236 <= 3) {
                          unint64_t v236 = 4;
                        }
                        uint64_t v64 = (uint64_t *)*((void *)&v234 + 1);
                        unint64_t v65 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                        if ((void)v234 - *((void *)&v234 + 1) < v65)
                        {
                          sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                          *(void *)&long long v234 = v234 - v65;
                        }
                        else
                        {
                          uint64_t v66 = v234 - v65;
                          *(void *)&long long v234 = v234 - v65;
                          if (!v65)
                          {
LABEL_107:
                            if ((unint64_t)(v66 - (void)v64) <= 3)
                            {
                              sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                              uint64_t v64 = (uint64_t *)*((void *)&v234 + 1);
                              uint64_t v66 = v234;
                            }
                            *(_DWORD *)(v66 - 4) = v63;
                            *(void *)&long long v234 = v66 - 4;
                            unsigned int v68 = v233 - (v66 - 4) + DWORD2(v233);
                            if ((unint64_t)(v66 - 4 - (void)v64) <= 7)
                            {
                              sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                              uint64_t v64 = (uint64_t *)*((void *)&v234 + 1);
                            }
                            *uint64_t v64 = v68 | 0x1000000000;
                            *((void *)&v234 + 1) += 8;
                            LODWORD(v235) = v235 + 1;
                            __int16 v69 = WORD2(v235);
                            if (WORD2(v235) <= 0x10u) {
                              __int16 v69 = 16;
                            }
                            WORD2(v235) = v69;
LABEL_114:
                            int v70 = (*(uint64_t (**)(void))(*(void *)*a1 + 264))(*a1);
                            if (v70) {
                              BOOL v71 = 0;
                            }
                            else {
                              BOOL v71 = v237 == 0;
                            }
                            if (v71) {
                              goto LABEL_132;
                            }
                            int v72 = v70;
                            if (v236 <= 3) {
                              unint64_t v236 = 4;
                            }
                            uint64_t v73 = (uint64_t *)*((void *)&v234 + 1);
                            unint64_t v74 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                            if ((void)v234 - *((void *)&v234 + 1) < v74)
                            {
                              sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                              *(void *)&long long v234 = v234 - v74;
                            }
                            else
                            {
                              uint64_t v75 = v234 - v74;
                              *(void *)&long long v234 = v234 - v74;
                              if (!v74)
                              {
LABEL_125:
                                if ((unint64_t)(v75 - (void)v73) <= 3)
                                {
                                  sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                  uint64_t v73 = (uint64_t *)*((void *)&v234 + 1);
                                  uint64_t v75 = v234;
                                }
                                *(_DWORD *)(v75 - 4) = v72;
                                *(void *)&long long v234 = v75 - 4;
                                unsigned int v77 = v233 - (v75 - 4) + DWORD2(v233);
                                if ((unint64_t)(v75 - 4 - (void)v73) <= 7)
                                {
                                  sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                  uint64_t v73 = (uint64_t *)*((void *)&v234 + 1);
                                }
                                *uint64_t v73 = v77 | 0x1200000000;
                                *((void *)&v234 + 1) += 8;
                                LODWORD(v235) = v235 + 1;
                                __int16 v78 = WORD2(v235);
                                if (WORD2(v235) <= 0x12u) {
                                  __int16 v78 = 18;
                                }
                                WORD2(v235) = v78;
LABEL_132:
                                int v79 = (*(uint64_t (**)(void))(*(void *)*a1 + 272))(*a1);
                                if (v79) {
                                  BOOL v80 = 0;
                                }
                                else {
                                  BOOL v80 = v237 == 0;
                                }
                                if (v80) {
                                  goto LABEL_150;
                                }
                                int v81 = v79;
                                if (v236 <= 3) {
                                  unint64_t v236 = 4;
                                }
                                int v82 = (uint64_t *)*((void *)&v234 + 1);
                                unint64_t v83 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                if ((void)v234 - *((void *)&v234 + 1) < v83)
                                {
                                  sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                  *(void *)&long long v234 = v234 - v83;
                                }
                                else
                                {
                                  uint64_t v84 = v234 - v83;
                                  *(void *)&long long v234 = v234 - v83;
                                  if (!v83)
                                  {
LABEL_143:
                                    if ((unint64_t)(v84 - (void)v82) <= 3)
                                    {
                                      sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                      int v82 = (uint64_t *)*((void *)&v234 + 1);
                                      uint64_t v84 = v234;
                                    }
                                    *(_DWORD *)(v84 - 4) = v81;
                                    *(void *)&long long v234 = v84 - 4;
                                    unsigned int v86 = v233 - (v84 - 4) + DWORD2(v233);
                                    if ((unint64_t)(v84 - 4 - (void)v82) <= 7)
                                    {
                                      sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                      int v82 = (uint64_t *)*((void *)&v234 + 1);
                                    }
                                    *int v82 = v86 | 0x1400000000;
                                    *((void *)&v234 + 1) += 8;
                                    LODWORD(v235) = v235 + 1;
                                    __int16 v87 = WORD2(v235);
                                    if (WORD2(v235) <= 0x14u) {
                                      __int16 v87 = 20;
                                    }
                                    WORD2(v235) = v87;
LABEL_150:
                                    int v88 = (*(uint64_t (**)(void))(*(void *)*a1 + 280))(*a1);
                                    if (v88) {
                                      BOOL v89 = 0;
                                    }
                                    else {
                                      BOOL v89 = v237 == 0;
                                    }
                                    if (v89) {
                                      goto LABEL_168;
                                    }
                                    int v90 = v88;
                                    if (v236 <= 3) {
                                      unint64_t v236 = 4;
                                    }
                                    uint64_t v91 = (uint64_t *)*((void *)&v234 + 1);
                                    unint64_t v92 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                    if ((void)v234 - *((void *)&v234 + 1) < v92)
                                    {
                                      sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                      *(void *)&long long v234 = v234 - v92;
                                    }
                                    else
                                    {
                                      uint64_t v93 = v234 - v92;
                                      *(void *)&long long v234 = v234 - v92;
                                      if (!v92)
                                      {
LABEL_161:
                                        if ((unint64_t)(v93 - (void)v91) <= 3)
                                        {
                                          sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                          uint64_t v91 = (uint64_t *)*((void *)&v234 + 1);
                                          uint64_t v93 = v234;
                                        }
                                        *(_DWORD *)(v93 - 4) = v90;
                                        *(void *)&long long v234 = v93 - 4;
                                        unsigned int v95 = v233 - (v93 - 4) + DWORD2(v233);
                                        if ((unint64_t)(v93 - 4 - (void)v91) <= 7)
                                        {
                                          sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                          uint64_t v91 = (uint64_t *)*((void *)&v234 + 1);
                                        }
                                        *uint64_t v91 = v95 | 0x1600000000;
                                        *((void *)&v234 + 1) += 8;
                                        LODWORD(v235) = v235 + 1;
                                        __int16 v96 = WORD2(v235);
                                        if (WORD2(v235) <= 0x16u) {
                                          __int16 v96 = 22;
                                        }
                                        WORD2(v235) = v96;
LABEL_168:
                                        int v97 = (*(uint64_t (**)(void))(*(void *)*a1 + 288))(*a1);
                                        if (v97) {
                                          BOOL v98 = 0;
                                        }
                                        else {
                                          BOOL v98 = v237 == 0;
                                        }
                                        if (v98) {
                                          goto LABEL_186;
                                        }
                                        int v99 = v97;
                                        if (v236 <= 3) {
                                          unint64_t v236 = 4;
                                        }
                                        BOOL v100 = (uint64_t *)*((void *)&v234 + 1);
                                        unint64_t v101 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                        if ((void)v234 - *((void *)&v234 + 1) < v101)
                                        {
                                          sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                          *(void *)&long long v234 = v234 - v101;
                                        }
                                        else
                                        {
                                          uint64_t v102 = v234 - v101;
                                          *(void *)&long long v234 = v234 - v101;
                                          if (!v101)
                                          {
LABEL_179:
                                            if ((unint64_t)(v102 - (void)v100) <= 3)
                                            {
                                              sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                              BOOL v100 = (uint64_t *)*((void *)&v234 + 1);
                                              uint64_t v102 = v234;
                                            }
                                            *(_DWORD *)(v102 - 4) = v99;
                                            *(void *)&long long v234 = v102 - 4;
                                            unsigned int v104 = v233 - (v102 - 4) + DWORD2(v233);
                                            if ((unint64_t)(v102 - 4 - (void)v100) <= 7)
                                            {
                                              sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                              BOOL v100 = (uint64_t *)*((void *)&v234 + 1);
                                            }
                                            *BOOL v100 = v104 | 0x1800000000;
                                            *((void *)&v234 + 1) += 8;
                                            LODWORD(v235) = v235 + 1;
                                            __int16 v105 = WORD2(v235);
                                            if (WORD2(v235) <= 0x18u) {
                                              __int16 v105 = 24;
                                            }
                                            WORD2(v235) = v105;
LABEL_186:
                                            int v106 = (*(uint64_t (**)(void))(*(void *)*a1 + 296))(*a1);
                                            if (v106) {
                                              BOOL v107 = 0;
                                            }
                                            else {
                                              BOOL v107 = v237 == 0;
                                            }
                                            if (v107) {
                                              goto LABEL_204;
                                            }
                                            int v108 = v106;
                                            if (v236 <= 3) {
                                              unint64_t v236 = 4;
                                            }
                                            uint64_t v109 = (uint64_t *)*((void *)&v234 + 1);
                                            unint64_t v110 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                            if ((void)v234 - *((void *)&v234 + 1) < v110)
                                            {
                                              sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                              *(void *)&long long v234 = v234 - v110;
                                            }
                                            else
                                            {
                                              uint64_t v111 = v234 - v110;
                                              *(void *)&long long v234 = v234 - v110;
                                              if (!v110)
                                              {
LABEL_197:
                                                if ((unint64_t)(v111 - (void)v109) <= 3)
                                                {
                                                  sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                  uint64_t v109 = (uint64_t *)*((void *)&v234 + 1);
                                                  uint64_t v111 = v234;
                                                }
                                                *(_DWORD *)(v111 - 4) = v108;
                                                *(void *)&long long v234 = v111 - 4;
                                                unsigned int v113 = v233 - (v111 - 4) + DWORD2(v233);
                                                if ((unint64_t)(v111 - 4 - (void)v109) <= 7)
                                                {
                                                  sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                  uint64_t v109 = (uint64_t *)*((void *)&v234 + 1);
                                                }
                                                *uint64_t v109 = v113 | 0x1A00000000;
                                                *((void *)&v234 + 1) += 8;
                                                LODWORD(v235) = v235 + 1;
                                                __int16 v114 = WORD2(v235);
                                                if (WORD2(v235) <= 0x1Au) {
                                                  __int16 v114 = 26;
                                                }
                                                WORD2(v235) = v114;
LABEL_204:
                                                int v115 = (*(uint64_t (**)(void))(*(void *)*a1 + 304))(*a1);
                                                if (v115) {
                                                  BOOL v116 = 0;
                                                }
                                                else {
                                                  BOOL v116 = v237 == 0;
                                                }
                                                if (v116) {
                                                  goto LABEL_222;
                                                }
                                                int v117 = v115;
                                                if (v236 <= 3) {
                                                  unint64_t v236 = 4;
                                                }
                                                uint64_t v118 = (uint64_t *)*((void *)&v234 + 1);
                                                unint64_t v119 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                if ((void)v234 - *((void *)&v234 + 1) < v119)
                                                {
                                                  sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                  *(void *)&long long v234 = v234 - v119;
                                                }
                                                else
                                                {
                                                  uint64_t v120 = v234 - v119;
                                                  *(void *)&long long v234 = v234 - v119;
                                                  if (!v119)
                                                  {
LABEL_215:
                                                    if ((unint64_t)(v120 - (void)v118) <= 3)
                                                    {
                                                      sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                      uint64_t v118 = (uint64_t *)*((void *)&v234 + 1);
                                                      uint64_t v120 = v234;
                                                    }
                                                    *(_DWORD *)(v120 - 4) = v117;
                                                    *(void *)&long long v234 = v120 - 4;
                                                    unsigned int v122 = v233 - (v120 - 4) + DWORD2(v233);
                                                    if ((unint64_t)(v120 - 4 - (void)v118) <= 7)
                                                    {
                                                      sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                      uint64_t v118 = (uint64_t *)*((void *)&v234 + 1);
                                                    }
                                                    *uint64_t v118 = v122 | 0x1C00000000;
                                                    *((void *)&v234 + 1) += 8;
                                                    LODWORD(v235) = v235 + 1;
                                                    __int16 v123 = WORD2(v235);
                                                    if (WORD2(v235) <= 0x1Cu) {
                                                      __int16 v123 = 28;
                                                    }
                                                    WORD2(v235) = v123;
LABEL_222:
                                                    int v124 = (*(uint64_t (**)(void))(*(void *)*a1 + 312))(*a1);
                                                    if (v124) {
                                                      BOOL v125 = 0;
                                                    }
                                                    else {
                                                      BOOL v125 = v237 == 0;
                                                    }
                                                    if (v125) {
                                                      goto LABEL_240;
                                                    }
                                                    int v126 = v124;
                                                    if (v236 <= 3) {
                                                      unint64_t v236 = 4;
                                                    }
                                                    unsigned int v127 = (uint64_t *)*((void *)&v234 + 1);
                                                    unint64_t v128 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                    if ((void)v234 - *((void *)&v234 + 1) < v128)
                                                    {
                                                      sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                      *(void *)&long long v234 = v234 - v128;
                                                    }
                                                    else
                                                    {
                                                      uint64_t v129 = v234 - v128;
                                                      *(void *)&long long v234 = v234 - v128;
                                                      if (!v128)
                                                      {
LABEL_233:
                                                        if ((unint64_t)(v129 - (void)v127) <= 3)
                                                        {
                                                          sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                          unsigned int v127 = (uint64_t *)*((void *)&v234 + 1);
                                                          uint64_t v129 = v234;
                                                        }
                                                        *(_DWORD *)(v129 - 4) = v126;
                                                        *(void *)&long long v234 = v129 - 4;
                                                        unsigned int v131 = v233 - (v129 - 4) + DWORD2(v233);
                                                        if ((unint64_t)(v129 - 4 - (void)v127) <= 7)
                                                        {
                                                          sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                          unsigned int v127 = (uint64_t *)*((void *)&v234 + 1);
                                                        }
                                                        uint64_t *v127 = v131 | 0x1E00000000;
                                                        *((void *)&v234 + 1) += 8;
                                                        LODWORD(v235) = v235 + 1;
                                                        __int16 v132 = WORD2(v235);
                                                        if (WORD2(v235) <= 0x1Eu) {
                                                          __int16 v132 = 30;
                                                        }
                                                        WORD2(v235) = v132;
LABEL_240:
                                                        int v133 = (*(uint64_t (**)(void))(*(void *)*a1 + 320))(*a1);
                                                        if (v133) {
                                                          BOOL v134 = 0;
                                                        }
                                                        else {
                                                          BOOL v134 = v237 == 0;
                                                        }
                                                        if (v134) {
                                                          goto LABEL_258;
                                                        }
                                                        int v135 = v133;
                                                        if (v236 <= 3) {
                                                          unint64_t v236 = 4;
                                                        }
                                                        unint64_t v136 = (uint64_t *)*((void *)&v234 + 1);
                                                        unint64_t v137 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                        if ((void)v234 - *((void *)&v234 + 1) < v137)
                                                        {
                                                          sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                          *(void *)&long long v234 = v234 - v137;
                                                        }
                                                        else
                                                        {
                                                          uint64_t v138 = v234 - v137;
                                                          *(void *)&long long v234 = v234 - v137;
                                                          if (!v137)
                                                          {
LABEL_251:
                                                            if ((unint64_t)(v138 - (void)v136) <= 3)
                                                            {
                                                              sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                              unint64_t v136 = (uint64_t *)*((void *)&v234 + 1);
                                                              uint64_t v138 = v234;
                                                            }
                                                            *(_DWORD *)(v138 - 4) = v135;
                                                            *(void *)&long long v234 = v138 - 4;
                                                            unsigned int v140 = v233 - (v138 - 4) + DWORD2(v233);
                                                            if ((unint64_t)(v138 - 4 - (void)v136) <= 7)
                                                            {
                                                              sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                              unint64_t v136 = (uint64_t *)*((void *)&v234 + 1);
                                                            }
                                                            *unint64_t v136 = v140 | 0x2000000000;
                                                            *((void *)&v234 + 1) += 8;
                                                            LODWORD(v235) = v235 + 1;
                                                            __int16 v141 = WORD2(v235);
                                                            if (WORD2(v235) <= 0x20u) {
                                                              __int16 v141 = 32;
                                                            }
                                                            WORD2(v235) = v141;
LABEL_258:
                                                            int v142 = (*(uint64_t (**)(void))(*(void *)*a1 + 328))(*a1);
                                                            if (v142) {
                                                              BOOL v143 = 0;
                                                            }
                                                            else {
                                                              BOOL v143 = v237 == 0;
                                                            }
                                                            if (v143) {
                                                              goto LABEL_276;
                                                            }
                                                            int v144 = v142;
                                                            if (v236 <= 3) {
                                                              unint64_t v236 = 4;
                                                            }
                                                            unsigned int v145 = (uint64_t *)*((void *)&v234 + 1);
                                                            unint64_t v146 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                            if ((void)v234 - *((void *)&v234 + 1) < v146)
                                                            {
                                                              sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                              *(void *)&long long v234 = v234 - v146;
                                                            }
                                                            else
                                                            {
                                                              uint64_t v147 = v234 - v146;
                                                              *(void *)&long long v234 = v234 - v146;
                                                              if (!v146)
                                                              {
LABEL_269:
                                                                if ((unint64_t)(v147 - (void)v145) <= 3)
                                                                {
                                                                  sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                                  unsigned int v145 = (uint64_t *)*((void *)&v234 + 1);
                                                                  uint64_t v147 = v234;
                                                                }
                                                                *(_DWORD *)(v147 - 4) = v144;
                                                                *(void *)&long long v234 = v147 - 4;
                                                                unsigned int v149 = v233 - (v147 - 4) + DWORD2(v233);
                                                                if ((unint64_t)(v147 - 4 - (void)v145) <= 7)
                                                                {
                                                                  sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                                  unsigned int v145 = (uint64_t *)*((void *)&v234 + 1);
                                                                }
                                                                *unsigned int v145 = v149 | 0x2200000000;
                                                                *((void *)&v234 + 1) += 8;
                                                                LODWORD(v235) = v235 + 1;
                                                                __int16 v150 = WORD2(v235);
                                                                if (WORD2(v235) <= 0x22u) {
                                                                  __int16 v150 = 34;
                                                                }
                                                                WORD2(v235) = v150;
LABEL_276:
                                                                int v151 = (*(uint64_t (**)(void))(*(void *)*a1 + 336))(*a1);
                                                                if (v151) {
                                                                  BOOL v152 = 0;
                                                                }
                                                                else {
                                                                  BOOL v152 = v237 == 0;
                                                                }
                                                                if (v152) {
                                                                  goto LABEL_294;
                                                                }
                                                                int v153 = v151;
                                                                if (v236 <= 3) {
                                                                  unint64_t v236 = 4;
                                                                }
                                                                unsigned int v154 = (uint64_t *)*((void *)&v234 + 1);
                                                                unint64_t v155 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                                if ((void)v234 - *((void *)&v234 + 1) < v155)
                                                                {
                                                                  sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                                  *(void *)&long long v234 = v234 - v155;
                                                                }
                                                                else
                                                                {
                                                                  uint64_t v156 = v234 - v155;
                                                                  *(void *)&long long v234 = v234 - v155;
                                                                  if (!v155)
                                                                  {
LABEL_287:
                                                                    if ((unint64_t)(v156 - (void)v154) <= 3)
                                                                    {
                                                                      sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                                      unsigned int v154 = (uint64_t *)*((void *)&v234 + 1);
                                                                      uint64_t v156 = v234;
                                                                    }
                                                                    *(_DWORD *)(v156 - 4) = v153;
                                                                    *(void *)&long long v234 = v156 - 4;
                                                                    unsigned int v158 = v233 - (v156 - 4) + DWORD2(v233);
                                                                    if ((unint64_t)(v156 - 4 - (void)v154) <= 7)
                                                                    {
                                                                      sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                                      unsigned int v154 = (uint64_t *)*((void *)&v234 + 1);
                                                                    }
                                                                    *unsigned int v154 = v158 | 0x2400000000;
                                                                    *((void *)&v234 + 1) += 8;
                                                                    LODWORD(v235) = v235 + 1;
                                                                    __int16 v159 = WORD2(v235);
                                                                    if (WORD2(v235) <= 0x24u) {
                                                                      __int16 v159 = 36;
                                                                    }
                                                                    WORD2(v235) = v159;
LABEL_294:
                                                                    int v160 = (*(uint64_t (**)(void))(*(void *)*a1 + 344))(*a1);
                                                                    if (v160) {
                                                                      BOOL v161 = 0;
                                                                    }
                                                                    else {
                                                                      BOOL v161 = v237 == 0;
                                                                    }
                                                                    if (v161) {
                                                                      goto LABEL_312;
                                                                    }
                                                                    int v162 = v160;
                                                                    if (v236 <= 3) {
                                                                      unint64_t v236 = 4;
                                                                    }
                                                                    __int16 v163 = (uint64_t *)*((void *)&v234 + 1);
                                                                    unint64_t v164 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                                    if ((void)v234 - *((void *)&v234 + 1) < v164)
                                                                    {
                                                                      sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                                      *(void *)&long long v234 = v234 - v164;
                                                                    }
                                                                    else
                                                                    {
                                                                      uint64_t v165 = v234 - v164;
                                                                      *(void *)&long long v234 = v234 - v164;
                                                                      if (!v164)
                                                                      {
LABEL_305:
                                                                        if ((unint64_t)(v165 - (void)v163) <= 3)
                                                                        {
                                                                          sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                                          __int16 v163 = (uint64_t *)*((void *)&v234 + 1);
                                                                          uint64_t v165 = v234;
                                                                        }
                                                                        *(_DWORD *)(v165 - 4) = v162;
                                                                        *(void *)&long long v234 = v165 - 4;
                                                                        unsigned int v167 = v233 - (v165 - 4) + DWORD2(v233);
                                                                        if ((unint64_t)(v165 - 4 - (void)v163) <= 7)
                                                                        {
                                                                          sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                                          __int16 v163 = (uint64_t *)*((void *)&v234 + 1);
                                                                        }
                                                                        *__int16 v163 = v167 | 0x2600000000;
                                                                        *((void *)&v234 + 1) += 8;
                                                                        LODWORD(v235) = v235 + 1;
                                                                        __int16 v168 = WORD2(v235);
                                                                        if (WORD2(v235) <= 0x26u) {
                                                                          __int16 v168 = 38;
                                                                        }
                                                                        WORD2(v235) = v168;
LABEL_312:
                                                                        int v169 = (*(uint64_t (**)(void))(*(void *)*a1 + 352))(*a1);
                                                                        if (v169) {
                                                                          BOOL v170 = 0;
                                                                        }
                                                                        else {
                                                                          BOOL v170 = v237 == 0;
                                                                        }
                                                                        if (v170) {
                                                                          goto LABEL_330;
                                                                        }
                                                                        int v171 = v169;
                                                                        if (v236 <= 3) {
                                                                          unint64_t v236 = 4;
                                                                        }
                                                                        int v172 = (uint64_t *)*((void *)&v234 + 1);
                                                                        unint64_t v173 = ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3;
                                                                        if ((void)v234 - *((void *)&v234 + 1) < v173)
                                                                        {
                                                                          sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234 - ((_BYTE)v233 + BYTE8(v233))) & 3);
                                                                          *(void *)&long long v234 = v234 - v173;
                                                                        }
                                                                        else
                                                                        {
                                                                          uint64_t v174 = v234 - v173;
                                                                          *(void *)&long long v234 = v234 - v173;
                                                                          if (!v173)
                                                                          {
LABEL_323:
                                                                            if ((unint64_t)(v174 - (void)v172) <= 3)
                                                                            {
                                                                              sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                                              int v172 = (uint64_t *)*((void *)&v234 + 1);
                                                                              uint64_t v174 = v234;
                                                                            }
                                                                            *(_DWORD *)(v174 - 4) = v171;
                                                                            *(void *)&long long v234 = v174 - 4;
                                                                            unsigned int v176 = v233 - (v174 - 4) + DWORD2(v233);
                                                                            if ((unint64_t)(v174
                                                                                                  - 4
                                                                                                  - (void)v172) <= 7)
                                                                            {
                                                                              sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                                              int v172 = (uint64_t *)*((void *)&v234 + 1);
                                                                            }
                                                                            *int v172 = v176 | 0x2800000000;
                                                                            *((void *)&v234 + 1) += 8;
                                                                            LODWORD(v235) = v235 + 1;
                                                                            __int16 v177 = WORD2(v235);
                                                                            if (WORD2(v235) <= 0x28u) {
                                                                              __int16 v177 = 40;
                                                                            }
                                                                            WORD2(v235) = v177;
LABEL_330:
                                                                            int v178 = (*(uint64_t (**)(void))(*(void *)*a1 + 360))(*a1);
                                                                            if (v178) {
                                                                              BOOL v179 = 0;
                                                                            }
                                                                            else {
                                                                              BOOL v179 = v237 == 0;
                                                                            }
                                                                            if (v179)
                                                                            {
LABEL_348:
                                                                              int v187 = sub_1CBF2CB78((uint64_t)&v230, 0);
                                                                              sub_1CC7808E8((uint64_t)&v230, v187);
                                                                              sub_1CC76A754(a5, a6, (uint64_t)"__GPU_STATS", 0xBuLL, (uint64_t)"__counters", 10);
                                                                              llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)a1, (uint64_t)(a1 + 342), &v230, a6);
                                                                              sub_1CB8339A4(&v230);
                                                                              goto LABEL_349;
                                                                            }
                                                                            int v180 = v178;
                                                                            if (v236 <= 3) {
                                                                              unint64_t v236 = 4;
                                                                            }
                                                                            unint64_t v181 = (uint64_t *)*((void *)&v234 + 1);
                                                                            unint64_t v182 = ((_BYTE)v234
                                                                                  - ((_BYTE)v233
                                                                                   + BYTE8(v233))) & 3;
                                                                            if ((void)v234 - *((void *)&v234 + 1) < v182)
                                                                            {
                                                                              sub_1CBF2C904((uint64_t *)&v230, ((_BYTE)v234- ((_BYTE)v233+ BYTE8(v233))) & 3);
                                                                              *(void *)&long long v234 = v234 - v182;
                                                                            }
                                                                            else
                                                                            {
                                                                              uint64_t v183 = v234 - v182;
                                                                              *(void *)&long long v234 = v234 - v182;
                                                                              if (!v182)
                                                                              {
LABEL_341:
                                                                                if ((unint64_t)(v183 - (void)v181) <= 3)
                                                                                {
                                                                                  sub_1CBF2C904((uint64_t *)&v230, 4uLL);
                                                                                  unint64_t v181 = (uint64_t *)*((void *)&v234 + 1);
                                                                                  uint64_t v183 = v234;
                                                                                }
                                                                                *(_DWORD *)(v183 - 4) = v180;
                                                                                *(void *)&long long v234 = v183 - 4;
                                                                                unsigned int v185 = v233 - (v183 - 4) + DWORD2(v233);
                                                                                if ((unint64_t)(v183 - 4 - (void)v181) <= 7)
                                                                                {
                                                                                  sub_1CBF2C904((uint64_t *)&v230, 8uLL);
                                                                                  unint64_t v181 = (uint64_t *)*((void *)&v234 + 1);
                                                                                }
                                                                                *unint64_t v181 = v185 | 0x2A00000000;
                                                                                *((void *)&v234 + 1) += 8;
                                                                                LODWORD(v235) = v235 + 1;
                                                                                __int16 v186 = WORD2(v235);
                                                                                if (WORD2(v235) <= 0x2Au) {
                                                                                  __int16 v186 = 42;
                                                                                }
                                                                                WORD2(v235) = v186;
                                                                                goto LABEL_348;
                                                                              }
                                                                            }
                                                                            uint64_t v184 = 0;
                                                                            do
                                                                              *(unsigned char *)(v234 + v184++) = 0;
                                                                            while (v182 != v184);
                                                                            unint64_t v181 = (uint64_t *)*((void *)&v234 + 1);
                                                                            uint64_t v183 = v234;
                                                                            goto LABEL_341;
                                                                          }
                                                                        }
                                                                        uint64_t v175 = 0;
                                                                        do
                                                                          *(unsigned char *)(v234 + v175++) = 0;
                                                                        while (v173 != v175);
                                                                        int v172 = (uint64_t *)*((void *)&v234 + 1);
                                                                        uint64_t v174 = v234;
                                                                        goto LABEL_323;
                                                                      }
                                                                    }
                                                                    uint64_t v166 = 0;
                                                                    do
                                                                      *(unsigned char *)(v234 + v166++) = 0;
                                                                    while (v164 != v166);
                                                                    __int16 v163 = (uint64_t *)*((void *)&v234 + 1);
                                                                    uint64_t v165 = v234;
                                                                    goto LABEL_305;
                                                                  }
                                                                }
                                                                uint64_t v157 = 0;
                                                                do
                                                                  *(unsigned char *)(v234 + v157++) = 0;
                                                                while (v155 != v157);
                                                                unsigned int v154 = (uint64_t *)*((void *)&v234 + 1);
                                                                uint64_t v156 = v234;
                                                                goto LABEL_287;
                                                              }
                                                            }
                                                            uint64_t v148 = 0;
                                                            do
                                                              *(unsigned char *)(v234 + v148++) = 0;
                                                            while (v146 != v148);
                                                            unsigned int v145 = (uint64_t *)*((void *)&v234 + 1);
                                                            uint64_t v147 = v234;
                                                            goto LABEL_269;
                                                          }
                                                        }
                                                        uint64_t v139 = 0;
                                                        do
                                                          *(unsigned char *)(v234 + v139++) = 0;
                                                        while (v137 != v139);
                                                        unint64_t v136 = (uint64_t *)*((void *)&v234 + 1);
                                                        uint64_t v138 = v234;
                                                        goto LABEL_251;
                                                      }
                                                    }
                                                    uint64_t v130 = 0;
                                                    do
                                                      *(unsigned char *)(v234 + v130++) = 0;
                                                    while (v128 != v130);
                                                    unsigned int v127 = (uint64_t *)*((void *)&v234 + 1);
                                                    uint64_t v129 = v234;
                                                    goto LABEL_233;
                                                  }
                                                }
                                                uint64_t v121 = 0;
                                                do
                                                  *(unsigned char *)(v234 + v121++) = 0;
                                                while (v119 != v121);
                                                uint64_t v118 = (uint64_t *)*((void *)&v234 + 1);
                                                uint64_t v120 = v234;
                                                goto LABEL_215;
                                              }
                                            }
                                            uint64_t v112 = 0;
                                            do
                                              *(unsigned char *)(v234 + v112++) = 0;
                                            while (v110 != v112);
                                            uint64_t v109 = (uint64_t *)*((void *)&v234 + 1);
                                            uint64_t v111 = v234;
                                            goto LABEL_197;
                                          }
                                        }
                                        uint64_t v103 = 0;
                                        do
                                          *(unsigned char *)(v234 + v103++) = 0;
                                        while (v101 != v103);
                                        BOOL v100 = (uint64_t *)*((void *)&v234 + 1);
                                        uint64_t v102 = v234;
                                        goto LABEL_179;
                                      }
                                    }
                                    uint64_t v94 = 0;
                                    do
                                      *(unsigned char *)(v234 + v94++) = 0;
                                    while (v92 != v94);
                                    uint64_t v91 = (uint64_t *)*((void *)&v234 + 1);
                                    uint64_t v93 = v234;
                                    goto LABEL_161;
                                  }
                                }
                                uint64_t v85 = 0;
                                do
                                  *(unsigned char *)(v234 + v85++) = 0;
                                while (v83 != v85);
                                int v82 = (uint64_t *)*((void *)&v234 + 1);
                                uint64_t v84 = v234;
                                goto LABEL_143;
                              }
                            }
                            uint64_t v76 = 0;
                            do
                              *(unsigned char *)(v234 + v76++) = 0;
                            while (v74 != v76);
                            uint64_t v73 = (uint64_t *)*((void *)&v234 + 1);
                            uint64_t v75 = v234;
                            goto LABEL_125;
                          }
                        }
                        uint64_t v67 = 0;
                        do
                          *(unsigned char *)(v234 + v67++) = 0;
                        while (v65 != v67);
                        uint64_t v64 = (uint64_t *)*((void *)&v234 + 1);
                        uint64_t v66 = v234;
                        goto LABEL_107;
                      }
                    }
                    uint64_t v58 = 0;
                    do
                      *(unsigned char *)(v234 + v58++) = 0;
                    while (v56 != v58);
                    __int16 v55 = (uint64_t *)*((void *)&v234 + 1);
                    uint64_t v57 = v234;
                    goto LABEL_89;
                  }
                }
                uint64_t v49 = 0;
                do
                  *(unsigned char *)(v234 + v49++) = 0;
                while (v47 != v49);
                uint64_t v46 = (uint64_t *)*((void *)&v234 + 1);
                uint64_t v48 = v234;
                goto LABEL_71;
              }
            }
            uint64_t v40 = 0;
            do
              *(unsigned char *)(v234 + v40++) = 0;
            while (v38 != v40);
            uint64_t v37 = (uint64_t *)*((void *)&v234 + 1);
            uint64_t v39 = v234;
            goto LABEL_53;
          }
        }
        uint64_t v31 = 0;
        do
          *(unsigned char *)(v234 + v31++) = 0;
        while (v29 != v31);
        int v28 = (uint64_t *)*((void *)&v234 + 1);
        uint64_t v30 = v234;
        goto LABEL_35;
      }
    }
    uint64_t v23 = 0;
    do
      *(unsigned char *)(v234 + v23++) = 0;
    while (v21 != v23);
    uint64_t v20 = (uint64_t *)*((void *)&v234 + 1);
    uint64_t v22 = v234;
    goto LABEL_19;
  }
LABEL_349:
  __int16 v230 = "agx.telemetry_statistics";
  LOWORD(v233) = 259;
  int8x16_t result = (void *)llvm::Module::getNamedMetadata(v11, &v230);
  if (result)
  {
    uint64_t v222 = a5;
    uint64_t v224 = a6;
    __int16 v230 = 0;
    char v231 = 0;
    long long v232 = xmmword_1CFB1D0D0;
    long long v233 = 0u;
    long long v234 = 0u;
    uint64_t v235 = 0;
    unint64_t v236 = 1;
    __int16 v237 = 256;
    uint64_t v238 = 0;
    uint64_t v223 = (uint64_t)a1;
    (*(void (**)(char ***__return_ptr))(*(void *)*a1 + 872))(&v228);
    uint64_t v189 = 0;
    int v190 = 0;
    int v191 = 0;
    __int16 v192 = 0;
    unint64_t v193 = v228;
    if (v228 != v229)
    {
      int v194 = 0;
      __int16 v192 = 0;
      int v191 = 0;
      uint64_t v195 = 0;
      int v190 = 0;
      uint64_t v189 = 0;
      do
      {
        if (*((char *)v193 + 55) < 0)
        {
          sub_1CB8BDF7C((uint64_t)__p, v193[4], (unint64_t)v193[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v193 + 2);
          unint64_t v226 = v193[6];
        }
        int v227 = *((_DWORD *)v193 + 14);
        if (SHIBYTE(v226) >= 0) {
          uint64_t v196 = __p;
        }
        else {
          uint64_t v196 = (void **)__p[0];
        }
        if (SHIBYTE(v226) >= 0) {
          size_t v197 = HIBYTE(v226) & 0x7F;
        }
        else {
          size_t v197 = (size_t)__p[1];
        }
        int v198 = sub_1CBF2F03C((uint64_t)&v230, v196, v197);
        int v199 = v198;
        if (v189 >= v194)
        {
          uint64_t v200 = (v189 - v190) >> 2;
          unint64_t v201 = v200 + 1;
          if ((unint64_t)(v200 + 1) >> 62) {
            goto LABEL_416;
          }
          if ((v194 - v190) >> 1 > v201) {
            unint64_t v201 = (v194 - v190) >> 1;
          }
          if ((unint64_t)(v194 - v190) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v202 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v202 = v201;
          }
          if (v202)
          {
            if (v202 >> 62) {
              goto LABEL_417;
            }
            uint64_t v203 = (char *)operator new(4 * v202);
          }
          else
          {
            uint64_t v203 = 0;
          }
          unsigned int v204 = &v203[4 * v200];
          *(_DWORD *)unsigned int v204 = v199;
          __int16 v205 = v204 + 4;
          while (v189 != v190)
          {
            int v206 = *((_DWORD *)v189 - 1);
            v189 -= 4;
            *((_DWORD *)v204 - 1) = v206;
            v204 -= 4;
          }
          int v194 = &v203[4 * v202];
          if (v190) {
            operator delete(v190);
          }
          int v190 = v204;
          uint64_t v189 = v205;
        }
        else
        {
          *(_DWORD *)uint64_t v189 = v198;
          v189 += 4;
        }
        if (v191 >= v195)
        {
          uint64_t v207 = (v191 - v192) >> 2;
          unint64_t v208 = v207 + 1;
          if ((unint64_t)(v207 + 1) >> 62) {
LABEL_416:
          }
            abort();
          if ((v195 - v192) >> 1 > v208) {
            unint64_t v208 = (v195 - v192) >> 1;
          }
          if ((unint64_t)(v195 - v192) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v209 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v209 = v208;
          }
          if (v209)
          {
            if (v209 >> 62) {
LABEL_417:
            }
              sub_1CB833614();
            char v210 = (char *)operator new(4 * v209);
          }
          else
          {
            char v210 = 0;
          }
          int v211 = &v210[4 * v207];
          *(_DWORD *)int v211 = v227;
          unint64_t v212 = v211 + 4;
          while (v191 != v192)
          {
            int v213 = *((_DWORD *)v191 - 1);
            v191 -= 4;
            *((_DWORD *)v211 - 1) = v213;
            v211 -= 4;
          }
          uint64_t v195 = &v210[4 * v209];
          if (v192) {
            operator delete(v192);
          }
          __int16 v192 = v211;
          int v191 = v212;
        }
        else
        {
          *(_DWORD *)int v191 = v227;
          v191 += 4;
        }
        if (SHIBYTE(v226) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v214 = v193[1];
        if (v214)
        {
          do
          {
            int v215 = (char **)v214;
            uint64_t v214 = *(char **)v214;
          }
          while (v214);
        }
        else
        {
          do
          {
            int v215 = (char **)v193[2];
            BOOL v19 = *v215 == (char *)v193;
            unint64_t v193 = v215;
          }
          while (!v19);
        }
        unint64_t v193 = v215;
      }
      while (v215 != v229);
    }
    if (v189 == v190) {
      int v216 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
    }
    else {
      int v216 = v190;
    }
    int v217 = sub_1CD45296C((uint64_t)&v230, (uint64_t)v216, (v189 - v190) >> 2);
    if (v191 == v192) {
      uint64_t v218 = (char *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
    }
    else {
      uint64_t v218 = v192;
    }
    int v219 = sub_1CC77C568((uint64_t)&v230, v218, (v191 - v192) >> 2);
    BYTE6(v235) = 1;
    __int16 v220 = v233 - v234 + WORD4(v233);
    sub_1CD4528D4((uint64_t *)&v230, 4, v217);
    sub_1CC780134((uint64_t *)&v230, 6, v219);
    int v221 = sub_1CBF2CB78((uint64_t)&v230, v220);
    sub_1CC7808E8((uint64_t)&v230, v221);
    sub_1CC76A754(v222, v224, (uint64_t)"__GPU_STATS", 0xBuLL, (uint64_t)"__telemetry", 11);
    llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(v223, v223 + 3944, &v230, v224);
    if (v192) {
      operator delete(v192);
    }
    if (v190) {
      operator delete(v190);
    }
    sub_1CB833850((uint64_t)&v228, v229[0]);
    return sub_1CB8339A4(&v230);
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::emitEndOfAsmFile(llvm::GPUMetadataEmitter *this, llvm::Module *a2, llvm::MCContext *a3, llvm::MCStreamer *a4)
{
  uint64_t v7 = *((unsigned int *)this + 22);
  if (v7)
  {
    uint64_t v9 = (llvm::FunctionGroup **)*((void *)this + 10);
    uint64_t v10 = 8 * v7;
    do
    {
      uint64_t v11 = *v9++;
      int v12 = llvm::GPUMetadataEmitter::processFunctionGroup(this, a2, v11, a3, a4);
      v10 -= 8;
    }
    while (v10);
    int v13 = v12;
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v22 = "agx.segments";
  __int16 v23 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a2, &v22);
  if (result)
  {
    if (v13)
    {
      uint64_t v15 = result;
      uint64_t v16 = *(unsigned int *)(*(void *)(result + 48) + 8);
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * v16;
        do
        {
          uint64_t v19 = *(void *)(**(void **)(v15 + 48) + v17);
          uint64_t v20 = *(unint64_t **)(*(void *)(v19 - 8 * *(unsigned int *)(v19 + 8)) + 8);
          size_t v21 = strlen(v13);
          uint64_t result = sub_1CC76A754((uint64_t)a3, (uint64_t)a4, (uint64_t)(v20 + 3), *v20, (uint64_t)v13, v21);
          v17 += 8;
        }
        while (v18 != v17);
      }
    }
  }
  return result;
}

size_t sub_1CC76A754(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t MachOSection = llvm::MCContext::getMachOSection(a1, a3, a4, a5, a6, 0, 0, 0, 0);
  *(unsigned char *)(MachOSection + 24) = 3;
  (*(void (**)(uint64_t, size_t, void))(*(void *)a2 + 168))(a2, MachOSection, 0);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)a2 + 640))(a2, 8, 0, 1, 0);
  return MachOSection;
}

uint64_t *SetShaderInfoFromFunctionGroup(uint64_t a1, uint64_t *a2, void **a3, int *a4)
{
  int v7 = *a4;
  uint64_t v8 = *a2;
  if (!*a4 && !*(unsigned char *)(v8 + 80)) {
    goto LABEL_13;
  }
  if (*(void *)(v8 + 72) <= 3uLL) {
    *(void *)(v8 + 72) = 4;
  }
  uint64_t v10 = *(void *)(v8 + 48);
  uint64_t v9 = *(uint64_t **)(v8 + 56);
  unint64_t v11 = ((_BYTE)v10 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3;
  if (v10 - (uint64_t)v9 < v11)
  {
    sub_1CBF2C904((uint64_t *)v8, ((_BYTE)v10 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3);
    *(void *)(v8 + 48) -= v11;
LABEL_242:
    uint64_t v178 = 0;
    do
      *(unsigned char *)(*(void *)(v8 + 48) + v178++) = 0;
    while (v11 != v178);
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v9 = *(uint64_t **)(v8 + 56);
    goto LABEL_6;
  }
  uint64_t v12 = v10 - v11;
  *(void *)(v8 + 48) = v12;
  if (v11) {
    goto LABEL_242;
  }
LABEL_6:
  if ((unint64_t)(v12 - (void)v9) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v8, 4uLL);
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v9 = *(uint64_t **)(v8 + 56);
  }
  *(_DWORD *)(v12 - 4) = v7;
  uint64_t v13 = v12 - 4;
  *(void *)(v8 + 48) = v13;
  uint64_t v14 = *(void *)(v8 + 32) - v13 + *(void *)(v8 + 40);
  if ((unint64_t)(v13 - (void)v9) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v8, 8uLL);
    uint64_t v9 = *(uint64_t **)(v8 + 56);
  }
  *uint64_t v9 = v14 | 0x400000000;
  *(void *)(v8 + 56) += 8;
  ++*(_DWORD *)(v8 + 64);
  unsigned int v15 = *(unsigned __int16 *)(v8 + 68);
  if (v15 <= 4) {
    LOWORD(v15) = 4;
  }
  *(_WORD *)(v8 + 68) = v15;
LABEL_13:
  int v16 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 11, 0, 1, 4);
  uint64_t v17 = *a2;
  if (!v16 && !*(unsigned char *)(v17 + 80)) {
    goto LABEL_15;
  }
  if (*(void *)(v17 + 72) <= 3uLL) {
    *(void *)(v17 + 72) = 4;
  }
  uint64_t v139 = *(void *)(v17 + 48);
  uint64_t v138 = *(uint64_t **)(v17 + 56);
  unint64_t v140 = ((_BYTE)v139 - (*(_DWORD *)(v17 + 32) + *(_DWORD *)(v17 + 40))) & 3;
  if (v139 - (uint64_t)v138 < v140)
  {
    sub_1CBF2C904((uint64_t *)v17, ((_BYTE)v139 - (*(_DWORD *)(v17 + 32) + *(_DWORD *)(v17 + 40))) & 3);
    *(void *)(v17 + 48) -= v140;
LABEL_260:
    uint64_t v182 = 0;
    do
      *(unsigned char *)(*(void *)(v17 + 48) + v182++) = 0;
    while (v140 != v182);
    uint64_t v141 = *(void *)(v17 + 48);
    uint64_t v138 = *(uint64_t **)(v17 + 56);
    goto LABEL_181;
  }
  uint64_t v141 = v139 - v140;
  *(void *)(v17 + 48) = v141;
  if (v140) {
    goto LABEL_260;
  }
LABEL_181:
  if ((unint64_t)(v141 - (void)v138) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v17, 4uLL);
    uint64_t v141 = *(void *)(v17 + 48);
    uint64_t v138 = *(uint64_t **)(v17 + 56);
  }
  *(_DWORD *)(v141 - 4) = v16;
  uint64_t v142 = v141 - 4;
  *(void *)(v17 + 48) = v142;
  uint64_t v143 = *(void *)(v17 + 32) - v142 + *(void *)(v17 + 40);
  if ((unint64_t)(v142 - (void)v138) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v17, 8uLL);
    uint64_t v138 = *(uint64_t **)(v17 + 56);
  }
  *uint64_t v138 = v143 | 0x2000000000;
  *(void *)(v17 + 56) += 8;
  ++*(_DWORD *)(v17 + 64);
  unsigned int v144 = *(unsigned __int16 *)(v17 + 68);
  if (v144 <= 0x20) {
    LOWORD(v144) = 32;
  }
  *(_WORD *)(v17 + 68) = v144;
LABEL_15:
  if (((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 23, 0, 1, 2))
  {
    uint64_t v20 = *a2;
    char v18 = 1;
  }
  else
  {
    char v18 = 1;
    int v19 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 11, 0, 1, 4);
    uint64_t v20 = *a2;
    if (!v19)
    {
      if (!*(unsigned char *)(v20 + 80)) {
        goto LABEL_18;
      }
      char v18 = 0;
    }
  }
  unsigned int v102 = sub_1CBF2CB00(v20, v18);
  uint64_t v103 = *(uint64_t **)(v20 + 56);
  if (*(void *)(v20 + 48) - (void)v103 <= 7uLL)
  {
    sub_1CBF2C904((uint64_t *)v20, 8uLL);
    uint64_t v103 = *(uint64_t **)(v20 + 56);
  }
  uint64_t *v103 = v102 | 0x2200000000;
  *(void *)(v20 + 56) += 8;
  ++*(_DWORD *)(v20 + 64);
  unsigned int v104 = *(unsigned __int16 *)(v20 + 68);
  if (v104 <= 0x22) {
    LOWORD(v104) = 34;
  }
  *(_WORD *)(v20 + 68) = v104;
LABEL_18:
  uint64_t v21 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 25, 0, 1, 2);
  uint64_t v22 = *a2;
  if (v21 || *(unsigned char *)(v22 + 80))
  {
    unsigned int v126 = sub_1CBF2CB00(*a2, v21 != 0);
    unsigned int v127 = *(uint64_t **)(v22 + 56);
    if (*(void *)(v22 + 48) - (void)v127 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v22, 8uLL);
      unsigned int v127 = *(uint64_t **)(v22 + 56);
    }
    uint64_t *v127 = v126 | 0x2400000000;
    *(void *)(v22 + 56) += 8;
    ++*(_DWORD *)(v22 + 64);
    unsigned int v128 = *(unsigned __int16 *)(v22 + 68);
    if (v128 <= 0x24) {
      LOWORD(v128) = 36;
    }
    *(_WORD *)(v22 + 68) = v128;
  }
  uint64_t v23 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 26, 0, 1, 2);
  uint64_t v24 = *a2;
  if (v23 || *(unsigned char *)(v24 + 80))
  {
    unsigned int v135 = sub_1CBF2CB00(*a2, v23 != 0);
    unint64_t v136 = *(uint64_t **)(v24 + 56);
    if (*(void *)(v24 + 48) - (void)v136 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v24, 8uLL);
      unint64_t v136 = *(uint64_t **)(v24 + 56);
    }
    *unint64_t v136 = v135 | 0x2800000000;
    *(void *)(v24 + 56) += 8;
    ++*(_DWORD *)(v24 + 64);
    unsigned int v137 = *(unsigned __int16 *)(v24 + 68);
    if (v137 <= 0x28) {
      LOWORD(v137) = 40;
    }
    *(_WORD *)(v24 + 68) = v137;
  }
  uint64_t v25 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 24, 0, 1, 2);
  uint64_t v26 = *a2;
  if (v25 || *(unsigned char *)(v26 + 80))
  {
    unsigned int v132 = sub_1CBF2CB00(*a2, v25 != 0);
    int v133 = *(uint64_t **)(v26 + 56);
    if (*(void *)(v26 + 48) - (void)v133 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v26, 8uLL);
      int v133 = *(uint64_t **)(v26 + 56);
    }
    *int v133 = v132 | 0x2600000000;
    *(void *)(v26 + 56) += 8;
    ++*(_DWORD *)(v26 + 64);
    unsigned int v134 = *(unsigned __int16 *)(v26 + 68);
    if (v134 <= 0x26) {
      LOWORD(v134) = 38;
    }
    *(_WORD *)(v26 + 68) = v134;
  }
  uint64_t v27 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 28, 0, 1, 2);
  uint64_t v28 = *a2;
  if (v27 || *(unsigned char *)(v28 + 80))
  {
    unsigned int v187 = sub_1CBF2CB00(*a2, v27 != 0);
    sub_1CBF2F3A0((uint64_t *)v28, 112, v187);
  }
  uint64_t v29 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 32, 0, 1, 2);
  uint64_t v30 = *a2;
  if (v29 || *(unsigned char *)(v30 + 80))
  {
    unsigned int v188 = sub_1CBF2CB00(*a2, v29 != 0);
    sub_1CBF2F3A0((uint64_t *)v30, 94, v188);
  }
  uint64_t v31 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 33, 0, 1, 2);
  uint64_t v32 = *a2;
  if (v31 || *(unsigned char *)(v32 + 80))
  {
    unsigned int v189 = sub_1CBF2CB00(*a2, v31 != 0);
    sub_1CBF2F3A0((uint64_t *)v32, 98, v189);
  }
  uint64_t v33 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 31, 0, 1, 2);
  uint64_t v34 = *a2;
  if (v33 || *(unsigned char *)(v34 + 80))
  {
    unsigned int v190 = sub_1CBF2CB00(*a2, v33 != 0);
    sub_1CBF2F3A0((uint64_t *)v34, 96, v190);
  }
  uint64_t v35 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 35, 0, 1, 2);
  uint64_t v36 = *a2;
  if (v35 || *(unsigned char *)(v36 + 80))
  {
    unsigned int v191 = sub_1CBF2CB00(*a2, v35 != 0);
    sub_1CBF2F3A0((uint64_t *)v36, 114, v191);
    uint64_t v36 = *a2;
  }
  if (*((unsigned char *)a4 + 81) || *(unsigned char *)(v36 + 80))
  {
    unsigned int v192 = sub_1CBF2CB00(v36, *((unsigned char *)a4 + 81));
    sub_1CBF2F3A0((uint64_t *)v36, 54, v192);
  }
  uint64_t v37 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 21, 0, 1, 2);
  BOOL v38 = v37 != 0;
  uint64_t v39 = *a2;
  if (v37 || *(unsigned char *)(v39 + 80))
  {
    if (*(void *)(v39 + 72) <= 3uLL) {
      *(void *)(v39 + 72) = 4;
    }
    uint64_t v160 = *(void *)(v39 + 48);
    __int16 v159 = *(uint64_t **)(v39 + 56);
    unint64_t v161 = ((_BYTE)v160 - (*(_DWORD *)(v39 + 32) + *(_DWORD *)(v39 + 40))) & 3;
    if (v160 - (uint64_t)v159 < v161)
    {
      sub_1CBF2C904((uint64_t *)v39, ((_BYTE)v160 - (*(_DWORD *)(v39 + 32) + *(_DWORD *)(v39 + 40))) & 3);
      *(void *)(v39 + 48) -= v161;
    }
    else
    {
      uint64_t v162 = v160 - v161;
      *(void *)(v39 + 48) = v162;
      if (!v161)
      {
LABEL_214:
        if ((unint64_t)(v162 - (void)v159) <= 3)
        {
          sub_1CBF2C904((uint64_t *)v39, 4uLL);
          uint64_t v162 = *(void *)(v39 + 48);
          __int16 v159 = *(uint64_t **)(v39 + 56);
        }
        *(_DWORD *)(v162 - 4) = v38;
        uint64_t v163 = v162 - 4;
        *(void *)(v39 + 48) = v163;
        uint64_t v164 = *(void *)(v39 + 32) - v163 + *(void *)(v39 + 40);
        if ((unint64_t)(v163 - (void)v159) <= 7)
        {
          sub_1CBF2C904((uint64_t *)v39, 8uLL);
          __int16 v159 = *(uint64_t **)(v39 + 56);
        }
        *__int16 v159 = v164 | 0x4000000000;
        *(void *)(v39 + 56) += 8;
        ++*(_DWORD *)(v39 + 64);
        unsigned int v165 = *(unsigned __int16 *)(v39 + 68);
        if (v165 <= 0x40) {
          LOWORD(v165) = 64;
        }
        *(_WORD *)(v39 + 68) = v165;
        goto LABEL_38;
      }
    }
    uint64_t v185 = 0;
    do
      *(unsigned char *)(*(void *)(v39 + 48) + v185++) = 0;
    while (v161 != v185);
    uint64_t v162 = *(void *)(v39 + 48);
    __int16 v159 = *(uint64_t **)(v39 + 56);
    goto LABEL_214;
  }
LABEL_38:
  uint64_t v40 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 42, 0, 1, 2);
  uint64_t v41 = *a2;
  if (v40 || *(unsigned char *)(v41 + 80))
  {
    unsigned int v193 = sub_1CC7807FC(*a2, v40);
    sub_1CBF2F3A0((uint64_t *)v41, 102, v193);
  }
  uint64_t v42 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 43, 0, 1, 2);
  uint64_t v43 = *a2;
  if (v42 || *(unsigned char *)(v43 + 80))
  {
    unsigned int v194 = sub_1CC7807FC(*a2, v42);
    sub_1CBF2F3A0((uint64_t *)v43, 104, v194);
  }
  uint64_t v44 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 44, 0, 1, 2);
  uint64_t v45 = *a2;
  if (v44 || *(unsigned char *)(v45 + 80))
  {
    unsigned int v195 = sub_1CC7807FC(*a2, v44);
    sub_1CBF2F3A0((uint64_t *)v45, 106, v195);
  }
  uint64_t v46 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 45, 0, 1, 2);
  uint64_t v47 = *a2;
  if (v46 || *(unsigned char *)(v47 + 80))
  {
    unsigned int v196 = sub_1CC7807FC(*a2, v46);
    sub_1CBF2F3A0((uint64_t *)v47, 108, v196);
  }
  uint64_t v48 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 46, 0, 1, 2);
  uint64_t v49 = *a2;
  if (v48 || *(unsigned char *)(v49 + 80))
  {
    unsigned int v197 = sub_1CC7807FC(*a2, v48);
    sub_1CBF2F3A0((uint64_t *)v49, 110, v197);
    uint64_t v49 = *a2;
  }
  unsigned int v50 = a4[19];
  BOOL v51 = v50 > 0x1E;
  int v52 = *((unsigned __int8 *)a4 + 80);
  if (v50 <= 0x12C) {
    int v53 = v50 > 0x1E;
  }
  else {
    int v53 = 2;
  }
  if (v51 && *((unsigned char *)a4 + 80) != 0) {
    int v53 = 3;
  }
  if (v53 || *(unsigned char *)(v49 + 80))
  {
    unsigned int v54 = sub_1CBF2CB00(v49, v53);
    __int16 v55 = *(uint64_t **)(v49 + 56);
    if (*(void *)(v49 + 48) - (void)v55 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v49, 8uLL);
      __int16 v55 = *(uint64_t **)(v49 + 56);
    }
    uint64_t *v55 = v54 | 0x4400000000;
    *(void *)(v49 + 56) += 8;
    ++*(_DWORD *)(v49 + 64);
    unsigned int v56 = *(unsigned __int16 *)(v49 + 68);
    if (v56 <= 0x44) {
      LOWORD(v56) = 68;
    }
    *(_WORD *)(v49 + 68) = v56;
    int v52 = *((unsigned __int8 *)a4 + 80);
    uint64_t v49 = *a2;
  }
  if (v52 || *(unsigned char *)(v49 + 80))
  {
    unsigned int v129 = sub_1CBF2CB00(v49, v52);
    uint64_t v130 = *(uint64_t **)(v49 + 56);
    if (*(void *)(v49 + 48) - (void)v130 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v49, 8uLL);
      uint64_t v130 = *(uint64_t **)(v49 + 56);
    }
    *uint64_t v130 = v129 | 0x4600000000;
    *(void *)(v49 + 56) += 8;
    ++*(_DWORD *)(v49 + 64);
    unsigned int v131 = *(unsigned __int16 *)(v49 + 68);
    if (v131 <= 0x46) {
      LOWORD(v131) = 70;
    }
    *(_WORD *)(v49 + 68) = v131;
  }
  int v57 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 10, 0, 1, 1);
  uint64_t v58 = *a2;
  if (v57 || *(unsigned char *)(v58 + 80))
  {
    if (*(void *)(v58 + 72) <= 3uLL) {
      *(void *)(v58 + 72) = 4;
    }
    uint64_t v167 = *(void *)(v58 + 48);
    uint64_t v166 = *(uint64_t **)(v58 + 56);
    unint64_t v168 = ((_BYTE)v167 - (*(_DWORD *)(v58 + 32) + *(_DWORD *)(v58 + 40))) & 3;
    if (v167 - (uint64_t)v166 < v168)
    {
      sub_1CBF2C904((uint64_t *)v58, ((_BYTE)v167 - (*(_DWORD *)(v58 + 32) + *(_DWORD *)(v58 + 40))) & 3);
      *(void *)(v58 + 48) -= v168;
    }
    else
    {
      uint64_t v169 = v167 - v168;
      *(void *)(v58 + 48) = v169;
      if (!v168)
      {
LABEL_225:
        if ((unint64_t)(v169 - (void)v166) <= 3)
        {
          sub_1CBF2C904((uint64_t *)v58, 4uLL);
          uint64_t v169 = *(void *)(v58 + 48);
          uint64_t v166 = *(uint64_t **)(v58 + 56);
        }
        *(_DWORD *)(v169 - 4) = v57;
        uint64_t v170 = v169 - 4;
        *(void *)(v58 + 48) = v170;
        uint64_t v171 = *(void *)(v58 + 32) - v170 + *(void *)(v58 + 40);
        if ((unint64_t)(v170 - (void)v166) <= 7)
        {
          sub_1CBF2C904((uint64_t *)v58, 8uLL);
          uint64_t v166 = *(uint64_t **)(v58 + 56);
        }
        *uint64_t v166 = v171 | 0x4A00000000;
        *(void *)(v58 + 56) += 8;
        ++*(_DWORD *)(v58 + 64);
        unsigned int v172 = *(unsigned __int16 *)(v58 + 68);
        if (v172 <= 0x4A) {
          LOWORD(v172) = 74;
        }
        *(_WORD *)(v58 + 68) = v172;
        goto LABEL_63;
      }
    }
    uint64_t v186 = 0;
    do
      *(unsigned char *)(*(void *)(v58 + 48) + v186++) = 0;
    while (v168 != v186);
    uint64_t v169 = *(void *)(v58 + 48);
    uint64_t v166 = *(uint64_t **)(v58 + 56);
    goto LABEL_225;
  }
LABEL_63:
  ((void (*)(uint64_t *__return_ptr, void **, uint64_t))(*a3)[16])(&v203, a3, 12);
  ((void (*)(uint64_t *__return_ptr, void **, uint64_t))(*a3)[17])(&v202, a3, 12);
  uint64_t v60 = v202;
  uint64_t v59 = v203;
  if (v203)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v203 + 16))(&v203, v203);
    uint64_t v61 = v203;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if (v60)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v60 + 16))(&v203, v60);
    uint64_t v62 = v203;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 24))(v61, v62))
  {
    int v63 = 0;
  }
  else
  {
    unsigned int v95 = -1;
    do
    {
      __int16 v96 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v61 + 32))(v61);
      unint64_t v97 = ((uint64_t (*)(void **, void))(*a3)[50])(a3, *v96);
      uint64_t v99 = v98;
      uint64_t v100 = ((uint64_t (*)(void **))(*a3)[42])(a3);
      unsigned int v101 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v100 + 24))(v100, v99);
      if (v95 >= v97) {
        unsigned int v95 = v97;
      }
      (*(void (**)(uint64_t))(*(void *)v61 + 40))(v61);
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 24))(v61, v62) & 1) == 0);
    int v63 = (v97 - v95 + (HIDWORD(v97) + v101 - 1) / v101) * v101;
  }
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDA4E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCDA4E8))
  {
    byte_1EBCDA4E0 = 0;
    __cxa_guard_release(&qword_1EBCDA4E8);
  }
  if (byte_1EBCDA4E0) {
    int v64 = v63 + 64;
  }
  else {
    int v64 = v63;
  }
  int v65 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 12, 0, 1, 3);
  uint64_t v66 = *a2;
  if (v65 || *(unsigned char *)(v66 + 80))
  {
    if (*(void *)(v66 + 72) <= 3uLL) {
      *(void *)(v66 + 72) = 4;
    }
    uint64_t v106 = *(void *)(v66 + 48);
    __int16 v105 = *(uint64_t **)(v66 + 56);
    unint64_t v107 = ((_BYTE)v106 - (*(_DWORD *)(v66 + 32) + *(_DWORD *)(v66 + 40))) & 3;
    if (v106 - (uint64_t)v105 < v107)
    {
      sub_1CBF2C904((uint64_t *)v66, ((_BYTE)v106 - (*(_DWORD *)(v66 + 32) + *(_DWORD *)(v66 + 40))) & 3);
      *(void *)(v66 + 48) -= v107;
    }
    else
    {
      uint64_t v108 = v106 - v107;
      *(void *)(v66 + 48) = v108;
      if (!v107)
      {
LABEL_128:
        if ((unint64_t)(v108 - (void)v105) <= 3)
        {
          sub_1CBF2C904((uint64_t *)v66, 4uLL);
          uint64_t v108 = *(void *)(v66 + 48);
          __int16 v105 = *(uint64_t **)(v66 + 56);
        }
        *(_DWORD *)(v108 - 4) = v65;
        uint64_t v109 = v108 - 4;
        *(void *)(v66 + 48) = v109;
        uint64_t v110 = *(void *)(v66 + 32) - v109 + *(void *)(v66 + 40);
        if ((unint64_t)(v109 - (void)v105) <= 7)
        {
          sub_1CBF2C904((uint64_t *)v66, 8uLL);
          __int16 v105 = *(uint64_t **)(v66 + 56);
        }
        uint64_t *v105 = v110 | 0x4200000000;
        *(void *)(v66 + 56) += 8;
        ++*(_DWORD *)(v66 + 64);
        unsigned int v111 = *(unsigned __int16 *)(v66 + 68);
        if (v111 <= 0x42) {
          LOWORD(v111) = 66;
        }
        *(_WORD *)(v66 + 68) = v111;
        goto LABEL_81;
      }
    }
    uint64_t v179 = 0;
    do
      *(unsigned char *)(*(void *)(v66 + 48) + v179++) = 0;
    while (v107 != v179);
    uint64_t v108 = *(void *)(v66 + 48);
    __int16 v105 = *(uint64_t **)(v66 + 56);
    goto LABEL_128;
  }
LABEL_81:
  uint64_t v67 = ((uint64_t (*)(void **))(*a3)[71])(a3);
  int v68 = (*(uint64_t (**)(void *, uint64_t))(*a3[1] + 104))(a3[1], v67);
  uint64_t v69 = *a2;
  if (!v68 && !*(unsigned char *)(v69 + 80)) {
    goto LABEL_83;
  }
  if (*(void *)(v69 + 72) <= 3uLL) {
    *(void *)(v69 + 72) = 4;
  }
  uint64_t v146 = *(void *)(v69 + 48);
  unsigned int v145 = *(uint64_t **)(v69 + 56);
  unint64_t v147 = ((_BYTE)v146 - (*(_DWORD *)(v69 + 32) + *(_DWORD *)(v69 + 40))) & 3;
  if (v146 - (uint64_t)v145 < v147)
  {
    sub_1CBF2C904((uint64_t *)v69, ((_BYTE)v146 - (*(_DWORD *)(v69 + 32) + *(_DWORD *)(v69 + 40))) & 3);
    *(void *)(v69 + 48) -= v147;
LABEL_264:
    uint64_t v183 = 0;
    do
      *(unsigned char *)(*(void *)(v69 + 48) + v183++) = 0;
    while (v147 != v183);
    uint64_t v148 = *(void *)(v69 + 48);
    unsigned int v145 = *(uint64_t **)(v69 + 56);
    goto LABEL_192;
  }
  uint64_t v148 = v146 - v147;
  *(void *)(v69 + 48) = v148;
  if (v147) {
    goto LABEL_264;
  }
LABEL_192:
  if ((unint64_t)(v148 - (void)v145) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v69, 4uLL);
    uint64_t v148 = *(void *)(v69 + 48);
    unsigned int v145 = *(uint64_t **)(v69 + 56);
  }
  *(_DWORD *)(v148 - 4) = v68;
  uint64_t v149 = v148 - 4;
  *(void *)(v69 + 48) = v149;
  uint64_t v150 = *(void *)(v69 + 32) - v149 + *(void *)(v69 + 40);
  if ((unint64_t)(v149 - (void)v145) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v69, 8uLL);
    unsigned int v145 = *(uint64_t **)(v69 + 56);
  }
  *unsigned int v145 = v150 | 0x5600000000;
  *(void *)(v69 + 56) += 8;
  ++*(_DWORD *)(v69 + 64);
  unsigned int v151 = *(unsigned __int16 *)(v69 + 68);
  if (v151 <= 0x56) {
    LOWORD(v151) = 86;
  }
  *(_WORD *)(v69 + 68) = v151;
LABEL_83:
  uint64_t v70 = ((uint64_t (*)(void **))(*a3)[71])(a3);
  int v71 = (*(uint64_t (**)(void *, uint64_t))(*a3[1] + 120))(a3[1], v70);
  uint64_t v72 = *a2;
  if (!v71 && !*(unsigned char *)(v72 + 80)) {
    goto LABEL_85;
  }
  if (*(void *)(v72 + 72) <= 3uLL) {
    *(void *)(v72 + 72) = 4;
  }
  uint64_t v120 = *(void *)(v72 + 48);
  unint64_t v119 = *(uint64_t **)(v72 + 56);
  unint64_t v121 = ((_BYTE)v120 - (*(_DWORD *)(v72 + 32) + *(_DWORD *)(v72 + 40))) & 3;
  if (v120 - (uint64_t)v119 < v121)
  {
    sub_1CBF2C904((uint64_t *)v72, ((_BYTE)v120 - (*(_DWORD *)(v72 + 32) + *(_DWORD *)(v72 + 40))) & 3);
    *(void *)(v72 + 48) -= v121;
LABEL_256:
    uint64_t v181 = 0;
    do
      *(unsigned char *)(*(void *)(v72 + 48) + v181++) = 0;
    while (v121 != v181);
    uint64_t v122 = *(void *)(v72 + 48);
    unint64_t v119 = *(uint64_t **)(v72 + 56);
    goto LABEL_150;
  }
  uint64_t v122 = v120 - v121;
  *(void *)(v72 + 48) = v122;
  if (v121) {
    goto LABEL_256;
  }
LABEL_150:
  if ((unint64_t)(v122 - (void)v119) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v72, 4uLL);
    uint64_t v122 = *(void *)(v72 + 48);
    unint64_t v119 = *(uint64_t **)(v72 + 56);
  }
  *(_DWORD *)(v122 - 4) = v71;
  uint64_t v123 = v122 - 4;
  *(void *)(v72 + 48) = v123;
  uint64_t v124 = *(void *)(v72 + 32) - v123 + *(void *)(v72 + 40);
  if ((unint64_t)(v123 - (void)v119) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v72, 8uLL);
    unint64_t v119 = *(uint64_t **)(v72 + 56);
  }
  *unint64_t v119 = v124 | 0x5800000000;
  *(void *)(v72 + 56) += 8;
  ++*(_DWORD *)(v72 + 64);
  unsigned int v125 = *(unsigned __int16 *)(v72 + 68);
  if (v125 <= 0x58) {
    LOWORD(v125) = 88;
  }
  *(_WORD *)(v72 + 68) = v125;
LABEL_85:
  uint64_t v73 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 27, 0, 1, 2);
  uint64_t v74 = *a2;
  if (v73 || *(unsigned char *)(v74 + 80))
  {
    unsigned int v92 = sub_1CBF2CB00(*a2, v73 != 0);
    uint64_t v93 = *(uint64_t **)(v74 + 56);
    if (*(void *)(v74 + 48) - (void)v93 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v74, 8uLL);
      uint64_t v93 = *(uint64_t **)(v74 + 56);
    }
    uint64_t *v93 = v92 | 0x2A00000000;
    *(void *)(v74 + 56) += 8;
    ++*(_DWORD *)(v74 + 64);
    unsigned int v94 = *(unsigned __int16 *)(v74 + 68);
    if (v94 <= 0x2A) {
      LOWORD(v94) = 42;
    }
    *(_WORD *)(v74 + 68) = v94;
  }
  uint64_t v75 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 34, 0, 1, 2);
  BOOL v76 = v75 != 0;
  uint64_t v77 = *a2;
  if (v75 || *(unsigned char *)(v77 + 80))
  {
    unsigned int v198 = sub_1CBF2CB00(*a2, v76);
    sub_1CBF2F3A0((uint64_t *)v77, 100, v198);
    uint64_t v77 = *a2;
  }
  if (v64 || *(unsigned char *)(v77 + 80))
  {
    if (*(void *)(v77 + 72) <= 3uLL) {
      *(void *)(v77 + 72) = 4;
    }
    uint64_t v153 = *(void *)(v77 + 48);
    BOOL v152 = *(uint64_t **)(v77 + 56);
    unint64_t v154 = ((_BYTE)v153 - (*(_DWORD *)(v77 + 32) + *(_DWORD *)(v77 + 40))) & 3;
    if (v153 - (uint64_t)v152 < v154)
    {
      sub_1CBF2C904((uint64_t *)v77, ((_BYTE)v153 - (*(_DWORD *)(v77 + 32) + *(_DWORD *)(v77 + 40))) & 3);
      *(void *)(v77 + 48) -= v154;
    }
    else
    {
      uint64_t v155 = v153 - v154;
      *(void *)(v77 + 48) = v155;
      if (!v154)
      {
LABEL_203:
        if ((unint64_t)(v155 - (void)v152) <= 3)
        {
          sub_1CBF2C904((uint64_t *)v77, 4uLL);
          uint64_t v155 = *(void *)(v77 + 48);
          BOOL v152 = *(uint64_t **)(v77 + 56);
        }
        *(_DWORD *)(v155 - 4) = v64;
        uint64_t v156 = v155 - 4;
        *(void *)(v77 + 48) = v156;
        uint64_t v157 = *(void *)(v77 + 32) - v156 + *(void *)(v77 + 40);
        if ((unint64_t)(v156 - (void)v152) <= 7)
        {
          sub_1CBF2C904((uint64_t *)v77, 8uLL);
          BOOL v152 = *(uint64_t **)(v77 + 56);
        }
        uint64_t *v152 = v157 | 0x3C00000000;
        *(void *)(v77 + 56) += 8;
        ++*(_DWORD *)(v77 + 64);
        unsigned int v158 = *(unsigned __int16 *)(v77 + 68);
        if (v158 <= 0x3C) {
          LOWORD(v158) = 60;
        }
        *(_WORD *)(v77 + 68) = v158;
        goto LABEL_91;
      }
    }
    uint64_t v184 = 0;
    do
      *(unsigned char *)(*(void *)(v77 + 48) + v184++) = 0;
    while (v154 != v184);
    uint64_t v155 = *(void *)(v77 + 48);
    BOOL v152 = *(uint64_t **)(v77 + 56);
    goto LABEL_203;
  }
LABEL_91:
  ((void (*)(void **, BOOL))(*a3)[14])(a3, v76);
  int v78 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 13, 0, 1, 3);
  uint64_t v79 = *a2;
  if (v78 || *(unsigned char *)(v79 + 80))
  {
    unsigned int v176 = sub_1CBF2F210(*a2, v78);
    sub_1CBF2F3A0((uint64_t *)v79, 76, v176);
  }
  int v80 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 17, 0, 1, 3);
  uint64_t v81 = *a2;
  if (v80 || *(unsigned char *)(v81 + 80))
  {
    unsigned int v199 = sub_1CBF2F210(*a2, v80);
    sub_1CBF2F3A0((uint64_t *)v81, 78, v199);
  }
  int v82 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 18, 0, 1, 4);
  uint64_t v83 = *a2;
  if (v82 || *(unsigned char *)(v83 + 80))
  {
    if (*(void *)(v83 + 72) <= 3uLL) {
      *(void *)(v83 + 72) = 4;
    }
    uint64_t v113 = *(void *)(v83 + 48);
    uint64_t v112 = *(uint64_t **)(v83 + 56);
    unint64_t v114 = ((_BYTE)v113 - (*(_DWORD *)(v83 + 32) + *(_DWORD *)(v83 + 40))) & 3;
    if (v113 - (uint64_t)v112 < v114)
    {
      sub_1CBF2C904((uint64_t *)v83, ((_BYTE)v113 - (*(_DWORD *)(v83 + 32) + *(_DWORD *)(v83 + 40))) & 3);
      *(void *)(v83 + 48) -= v114;
    }
    else
    {
      uint64_t v115 = v113 - v114;
      *(void *)(v83 + 48) = v115;
      if (!v114)
      {
LABEL_139:
        if ((unint64_t)(v115 - (void)v112) <= 3)
        {
          sub_1CBF2C904((uint64_t *)v83, 4uLL);
          uint64_t v115 = *(void *)(v83 + 48);
          uint64_t v112 = *(uint64_t **)(v83 + 56);
        }
        *(_DWORD *)(v115 - 4) = v82;
        uint64_t v116 = v115 - 4;
        *(void *)(v83 + 48) = v116;
        uint64_t v117 = *(void *)(v83 + 32) - v116 + *(void *)(v83 + 40);
        if ((unint64_t)(v116 - (void)v112) <= 7)
        {
          sub_1CBF2C904((uint64_t *)v83, 8uLL);
          uint64_t v112 = *(uint64_t **)(v83 + 56);
        }
        *uint64_t v112 = v117 | 0x5000000000;
        *(void *)(v83 + 56) += 8;
        ++*(_DWORD *)(v83 + 64);
        unsigned int v118 = *(unsigned __int16 *)(v83 + 68);
        if (v118 <= 0x50) {
          LOWORD(v118) = 80;
        }
        *(_WORD *)(v83 + 68) = v118;
        goto LABEL_97;
      }
    }
    uint64_t v180 = 0;
    do
      *(unsigned char *)(*(void *)(v83 + 48) + v180++) = 0;
    while (v114 != v180);
    uint64_t v115 = *(void *)(v83 + 48);
    uint64_t v112 = *(uint64_t **)(v83 + 56);
    goto LABEL_139;
  }
LABEL_97:
  int v84 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 14, 0, 1, 3);
  uint64_t v85 = *a2;
  if (v84 || *(unsigned char *)(v85 + 80))
  {
    unsigned int v200 = sub_1CBF2F210(*a2, v84);
    sub_1CBF2F3A0((uint64_t *)v85, 82, v200);
  }
  uint64_t v86 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 39, 0, 1, 2);
  uint64_t v87 = *a2;
  if (v86 || *(unsigned char *)(v87 + 80))
  {
    unsigned int v173 = sub_1CBF2CB00(*a2, v86 != 0);
    uint64_t v174 = *(uint64_t **)(v87 + 56);
    if (*(void *)(v87 + 48) - (void)v174 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v87, 8uLL);
      uint64_t v174 = *(uint64_t **)(v87 + 56);
    }
    uint64_t *v174 = v173 | 0x5400000000;
    *(void *)(v87 + 56) += 8;
    ++*(_DWORD *)(v87 + 64);
    unsigned int v175 = *(unsigned __int16 *)(v87 + 68);
    if (v175 <= 0x54) {
      LOWORD(v175) = 84;
    }
    *(_WORD *)(v87 + 68) = v175;
  }
  uint64_t v88 = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 40, 0, 1, 2);
  uint64_t v89 = *a2;
  if (v88 || *(unsigned char *)(v89 + 80))
  {
    unsigned int v201 = sub_1CBF2CB00(*a2, v88 != 0);
    sub_1CBF2F3A0((uint64_t *)v89, 90, v201);
  }
  uint64_t result = (uint64_t *)((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))**a3)(a3, 41, 0, 1, 2);
  uint64_t v91 = *a2;
  if (result || *(unsigned char *)(v91 + 80))
  {
    unsigned int v177 = sub_1CBF2CB00(v91, result != 0);
    return sub_1CBF2F3A0((uint64_t *)v91, 92, v177);
  }
  return result;
}

uint64_t *SetShaderInfoFromFunctionGroup(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  int v7 = *a4;
  uint64_t v8 = *a2;
  if (!*a4 && !*(unsigned char *)(v8 + 80)) {
    goto LABEL_13;
  }
  if (*(void *)(v8 + 72) <= 3uLL) {
    *(void *)(v8 + 72) = 4;
  }
  uint64_t v10 = *(void *)(v8 + 48);
  uint64_t v9 = *(uint64_t **)(v8 + 56);
  unint64_t v11 = ((_BYTE)v10 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3;
  if (v10 - (uint64_t)v9 < v11)
  {
    sub_1CBF2C904((uint64_t *)v8, ((_BYTE)v10 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3);
    *(void *)(v8 + 48) -= v11;
LABEL_115:
    uint64_t v89 = 0;
    do
      *(unsigned char *)(*(void *)(v8 + 48) + v89++) = 0;
    while (v11 != v89);
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v9 = *(uint64_t **)(v8 + 56);
    goto LABEL_6;
  }
  uint64_t v12 = v10 - v11;
  *(void *)(v8 + 48) = v12;
  if (v11) {
    goto LABEL_115;
  }
LABEL_6:
  if ((unint64_t)(v12 - (void)v9) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v8, 4uLL);
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v9 = *(uint64_t **)(v8 + 56);
  }
  *(_DWORD *)(v12 - 4) = v7;
  uint64_t v13 = v12 - 4;
  *(void *)(v8 + 48) = v13;
  uint64_t v14 = *(void *)(v8 + 32) - v13 + *(void *)(v8 + 40);
  if ((unint64_t)(v13 - (void)v9) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v8, 8uLL);
    uint64_t v9 = *(uint64_t **)(v8 + 56);
  }
  *uint64_t v9 = v14 | 0x400000000;
  *(void *)(v8 + 56) += 8;
  ++*(_DWORD *)(v8 + 64);
  unsigned int v15 = *(unsigned __int16 *)(v8 + 68);
  if (v15 <= 4) {
    LOWORD(v15) = 4;
  }
  *(_WORD *)(v8 + 68) = v15;
LABEL_13:
  int v16 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4);
  uint64_t v17 = *a2;
  if (!v16 && !*(unsigned char *)(v17 + 80)) {
    goto LABEL_15;
  }
  if (*(void *)(v17 + 72) <= 3uLL) {
    *(void *)(v17 + 72) = 4;
  }
  uint64_t v66 = *(void *)(v17 + 48);
  int v65 = *(uint64_t **)(v17 + 56);
  unint64_t v67 = ((_BYTE)v66 - (*(_DWORD *)(v17 + 32) + *(_DWORD *)(v17 + 40))) & 3;
  if (v66 - (uint64_t)v65 < v67)
  {
    unint64_t v106 = ((_BYTE)v66 - (*(_DWORD *)(v17 + 32) + *(_DWORD *)(v17 + 40))) & 3;
    sub_1CBF2C904((uint64_t *)v17, v67);
    unint64_t v67 = v106;
    *(void *)(v17 + 48) -= v106;
LABEL_119:
    uint64_t v90 = 0;
    do
      *(unsigned char *)(*(void *)(v17 + 48) + v90++) = 0;
    while (v67 != v90);
    uint64_t v68 = *(void *)(v17 + 48);
    int v65 = *(uint64_t **)(v17 + 56);
    goto LABEL_80;
  }
  uint64_t v68 = v66 - v67;
  *(void *)(v17 + 48) = v68;
  if (v67) {
    goto LABEL_119;
  }
LABEL_80:
  if ((unint64_t)(v68 - (void)v65) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v17, 4uLL);
    uint64_t v68 = *(void *)(v17 + 48);
    int v65 = *(uint64_t **)(v17 + 56);
  }
  *(_DWORD *)(v68 - 4) = v16;
  uint64_t v69 = v68 - 4;
  *(void *)(v17 + 48) = v69;
  uint64_t v70 = *(void *)(v17 + 32) - v69 + *(void *)(v17 + 40);
  if ((unint64_t)(v69 - (void)v65) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v17, 8uLL);
    int v65 = *(uint64_t **)(v17 + 56);
  }
  *int v65 = v70 | 0x600000000;
  *(void *)(v17 + 56) += 8;
  ++*(_DWORD *)(v17 + 64);
  unsigned int v71 = *(unsigned __int16 *)(v17 + 68);
  if (v71 <= 6) {
    LOWORD(v71) = 6;
  }
  *(_WORD *)(v17 + 68) = v71;
LABEL_15:
  if ((**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 23, 0, 1, 2))
  {
    uint64_t v20 = *a2;
    char v18 = 1;
  }
  else
  {
    char v18 = 1;
    int v19 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4);
    uint64_t v20 = *a2;
    if (!v19)
    {
      if (!*(unsigned char *)(v20 + 80)) {
        goto LABEL_25;
      }
      char v18 = 0;
    }
  }
  unsigned int v21 = sub_1CBF2CB00(v20, v18);
  uint64_t v22 = *(uint64_t **)(v20 + 56);
  if (*(void *)(v20 + 48) - (void)v22 <= 7uLL)
  {
    sub_1CBF2C904((uint64_t *)v20, 8uLL);
    uint64_t v22 = *(uint64_t **)(v20 + 56);
  }
  uint64_t *v22 = v21 | 0x800000000;
  *(void *)(v20 + 56) += 8;
  ++*(_DWORD *)(v20 + 64);
  unsigned int v23 = *(unsigned __int16 *)(v20 + 68);
  if (v23 <= 8) {
    LOWORD(v23) = 8;
  }
  *(_WORD *)(v20 + 68) = v23;
LABEL_25:
  uint64_t v24 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 25, 0, 1, 2);
  uint64_t v25 = *a2;
  if (v24 || *(unsigned char *)(v25 + 80))
  {
    unsigned int v79 = sub_1CBF2CB00(*a2, v24 != 0);
    int v80 = *(uint64_t **)(v25 + 56);
    if (*(void *)(v25 + 48) - (void)v80 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v25, 8uLL);
      int v80 = *(uint64_t **)(v25 + 56);
    }
    uint64_t *v80 = v79 | 0xA00000000;
    *(void *)(v25 + 56) += 8;
    ++*(_DWORD *)(v25 + 64);
    unsigned int v81 = *(unsigned __int16 *)(v25 + 68);
    if (v81 <= 0xA) {
      LOWORD(v81) = 10;
    }
    *(_WORD *)(v25 + 68) = v81;
  }
  uint64_t v26 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 26, 0, 1, 2);
  uint64_t v27 = *a2;
  if (v26 || *(unsigned char *)(v27 + 80))
  {
    unsigned int v88 = sub_1CBF2CB00(*a2, v26 != 0);
    sub_1CBF2F3A0((uint64_t *)v27, 14, v88);
  }
  uint64_t v28 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 24, 0, 1, 2);
  uint64_t v29 = *a2;
  if (v28 || *(unsigned char *)(v29 + 80))
  {
    unsigned int v85 = sub_1CBF2CB00(*a2, v28 != 0);
    uint64_t v86 = *(uint64_t **)(v29 + 56);
    if (*(void *)(v29 + 48) - (void)v86 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v29, 8uLL);
      uint64_t v86 = *(uint64_t **)(v29 + 56);
    }
    *uint64_t v86 = v85 | 0xC00000000;
    *(void *)(v29 + 56) += 8;
    ++*(_DWORD *)(v29 + 64);
    unsigned int v87 = *(unsigned __int16 *)(v29 + 68);
    if (v87 <= 0xC) {
      LOWORD(v87) = 12;
    }
    *(_WORD *)(v29 + 68) = v87;
  }
  uint64_t v30 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 28, 0, 1, 2);
  uint64_t v31 = *a2;
  if (v30 || *(unsigned char *)(v31 + 80))
  {
    unsigned int v92 = sub_1CBF2CB00(*a2, v30 != 0);
    sub_1CBF2F3A0((uint64_t *)v31, 62, v92);
  }
  uint64_t v32 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 32, 0, 1, 2);
  uint64_t v33 = *a2;
  if (v32 || *(unsigned char *)(v33 + 80))
  {
    unsigned int v93 = sub_1CBF2CB00(*a2, v32 != 0);
    sub_1CBF2F3A0((uint64_t *)v33, 46, v93);
  }
  uint64_t v34 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 33, 0, 1, 2);
  uint64_t v35 = *a2;
  if (v34 || *(unsigned char *)(v35 + 80))
  {
    unsigned int v94 = sub_1CBF2CB00(*a2, v34 != 0);
    sub_1CBF2F3A0((uint64_t *)v35, 50, v94);
  }
  uint64_t v36 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 31, 0, 1, 2);
  uint64_t v37 = *a2;
  if (v36 || *(unsigned char *)(v37 + 80))
  {
    unsigned int v95 = sub_1CBF2CB00(*a2, v36 != 0);
    sub_1CBF2F3A0((uint64_t *)v37, 48, v95);
  }
  uint64_t v38 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 35, 0, 1, 2);
  uint64_t v39 = *a2;
  if (v38 || *(unsigned char *)(v39 + 80))
  {
    unsigned int v96 = sub_1CBF2CB00(*a2, v38 != 0);
    sub_1CBF2F3A0((uint64_t *)v39, 64, v96);
    uint64_t v39 = *a2;
  }
  if (*((unsigned char *)a4 + 81) || *(unsigned char *)(v39 + 80))
  {
    unsigned int v97 = sub_1CBF2CB00(v39, *((unsigned char *)a4 + 81));
    sub_1CBF2F3A0((uint64_t *)v39, 26, v97);
  }
  uint64_t v40 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 21, 0, 1, 2);
  uint64_t v41 = *a2;
  if (v40 || *(unsigned char *)(v41 + 80))
  {
    unsigned int v98 = sub_1CBF2F210(*a2, v40 != 0);
    sub_1CBF2F3A0((uint64_t *)v41, 30, v98);
  }
  uint64_t v42 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 42, 0, 1, 2);
  uint64_t v43 = *a2;
  if (v42 || *(unsigned char *)(v43 + 80))
  {
    unsigned int v99 = sub_1CC7807FC(*a2, v42);
    sub_1CBF2F3A0((uint64_t *)v43, 52, v99);
  }
  uint64_t v44 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 43, 0, 1, 2);
  uint64_t v45 = *a2;
  if (v44 || *(unsigned char *)(v45 + 80))
  {
    unsigned int v100 = sub_1CC7807FC(*a2, v44);
    sub_1CBF2F3A0((uint64_t *)v45, 54, v100);
  }
  uint64_t v46 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 44, 0, 1, 2);
  uint64_t v47 = *a2;
  if (v46 || *(unsigned char *)(v47 + 80))
  {
    unsigned int v101 = sub_1CC7807FC(*a2, v46);
    sub_1CBF2F3A0((uint64_t *)v47, 56, v101);
  }
  uint64_t v48 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 45, 0, 1, 2);
  uint64_t v49 = *a2;
  if (v48 || *(unsigned char *)(v49 + 80))
  {
    unsigned int v102 = sub_1CC7807FC(*a2, v48);
    sub_1CBF2F3A0((uint64_t *)v49, 58, v102);
  }
  uint64_t v50 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 46, 0, 1, 2);
  uint64_t v51 = *a2;
  if (v50 || *(unsigned char *)(v51 + 80))
  {
    unsigned int v103 = sub_1CC7807FC(*a2, v50);
    sub_1CBF2F3A0((uint64_t *)v51, 60, v103);
    uint64_t v51 = *a2;
  }
  unsigned int v52 = a4[19];
  BOOL v53 = v52 > 0x1E;
  int v54 = *((unsigned __int8 *)a4 + 80);
  if (v52 <= 0x12C) {
    int v55 = v52 > 0x1E;
  }
  else {
    int v55 = 2;
  }
  if (v53 && *((unsigned char *)a4 + 80) != 0) {
    int v55 = 3;
  }
  if (v55 || *(unsigned char *)(v51 + 80))
  {
    unsigned int v62 = sub_1CBF2CB00(v51, v55);
    int v63 = *(uint64_t **)(v51 + 56);
    if (*(void *)(v51 + 48) - (void)v63 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v51, 8uLL);
      int v63 = *(uint64_t **)(v51 + 56);
    }
    *int v63 = v62 | 0x2000000000;
    *(void *)(v51 + 56) += 8;
    ++*(_DWORD *)(v51 + 64);
    unsigned int v64 = *(unsigned __int16 *)(v51 + 68);
    if (v64 <= 0x20) {
      LOWORD(v64) = 32;
    }
    *(_WORD *)(v51 + 68) = v64;
    int v54 = *((unsigned __int8 *)a4 + 80);
    uint64_t v51 = *a2;
  }
  if (v54 || *(unsigned char *)(v51 + 80))
  {
    unsigned int v82 = sub_1CBF2CB00(v51, v54);
    uint64_t v83 = *(uint64_t **)(v51 + 56);
    if (*(void *)(v51 + 48) - (void)v83 <= 7uLL)
    {
      sub_1CBF2C904((uint64_t *)v51, 8uLL);
      uint64_t v83 = *(uint64_t **)(v51 + 56);
    }
    *uint64_t v83 = v82 | 0x2200000000;
    *(void *)(v51 + 56) += 8;
    ++*(_DWORD *)(v51 + 64);
    unsigned int v84 = *(unsigned __int16 *)(v51 + 68);
    if (v84 <= 0x22) {
      LOWORD(v84) = 34;
    }
    *(_WORD *)(v51 + 68) = v84;
  }
  char v56 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 656))(a3);
  uint64_t v57 = *a2;
  if ((v56 & 1) != 0 || *(unsigned char *)(v57 + 80))
  {
    unsigned int v104 = sub_1CBF2CB00(*a2, v56);
    sub_1CBF2F3A0((uint64_t *)v57, 40, v104);
  }
  int v58 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 18, 0, 1, 4);
  uint64_t v59 = *a2;
  if (v58 || *(unsigned char *)(v59 + 80))
  {
    if (*(void *)(v59 + 72) <= 3uLL) {
      *(void *)(v59 + 72) = 4;
    }
    uint64_t v73 = *(void *)(v59 + 48);
    uint64_t v72 = *(uint64_t **)(v59 + 56);
    unint64_t v74 = ((_BYTE)v73 - (*(_DWORD *)(v59 + 32) + *(_DWORD *)(v59 + 40))) & 3;
    if (v73 - (uint64_t)v72 < v74)
    {
      sub_1CBF2C904((uint64_t *)v59, ((_BYTE)v73 - (*(_DWORD *)(v59 + 32) + *(_DWORD *)(v59 + 40))) & 3);
      *(void *)(v59 + 48) -= v74;
    }
    else
    {
      uint64_t v75 = v73 - v74;
      *(void *)(v59 + 48) = v75;
      if (!v74)
      {
LABEL_91:
        if ((unint64_t)(v75 - (void)v72) <= 3)
        {
          sub_1CBF2C904((uint64_t *)v59, 4uLL);
          uint64_t v75 = *(void *)(v59 + 48);
          uint64_t v72 = *(uint64_t **)(v59 + 56);
        }
        *(_DWORD *)(v75 - 4) = v58;
        uint64_t v76 = v75 - 4;
        *(void *)(v59 + 48) = v76;
        uint64_t v77 = *(void *)(v59 + 32) - v76 + *(void *)(v59 + 40);
        if ((unint64_t)(v76 - (void)v72) <= 7)
        {
          sub_1CBF2C904((uint64_t *)v59, 8uLL);
          uint64_t v72 = *(uint64_t **)(v59 + 56);
        }
        *uint64_t v72 = v77 | 0x2A00000000;
        *(void *)(v59 + 56) += 8;
        ++*(_DWORD *)(v59 + 64);
        unsigned int v78 = *(unsigned __int16 *)(v59 + 68);
        if (v78 <= 0x2A) {
          LOWORD(v78) = 42;
        }
        *(_WORD *)(v59 + 68) = v78;
        goto LABEL_68;
      }
    }
    uint64_t v91 = 0;
    do
      *(unsigned char *)(*(void *)(v59 + 48) + v91++) = 0;
    while (v74 != v91);
    uint64_t v75 = *(void *)(v59 + 48);
    uint64_t v72 = *(uint64_t **)(v59 + 56);
    goto LABEL_91;
  }
LABEL_68:
  uint64_t result = (uint64_t *)(**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a3)(a3, 41, 0, 1, 2);
  uint64_t v61 = *a2;
  if (result || *(unsigned char *)(v61 + 80))
  {
    unsigned int v105 = sub_1CBF2CB00(v61, result != 0);
    return sub_1CBF2F3A0((uint64_t *)v61, 44, v105);
  }
  return result;
}

void llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v5 = (const void *)a3[6];
  uint64_t v6 = a3[5] - (void)v5 + a3[4];
  if (*(unsigned char *)(a1 + 6360))
  {
    __p = 0;
    size_t v22 = 0;
    uint64_t v23 = 0;
    char v7 = *(unsigned char *)(a2 + 335);
    int v8 = v7;
    uint64_t v9 = v7 & 0x7F;
    if (v8 < 0) {
      uint64_t v9 = *(void *)(a2 + 320);
    }
    if (v9) {
      std::operator+<char>();
    }
    flatbuffers::GenerateText();
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 120))(a4);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if (*((unsigned char **)v10 + 3) == v11)
    {
      uint64_t v10 = llvm::raw_ostream::write(v10, "\n", 1uLL);
    }
    else
    {
      unsigned char *v11 = 10;
      ++*((void *)v10 + 4);
    }
    if (v23 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    if (v23 >= 0) {
      size_t v13 = HIBYTE(v23) & 0x7F;
    }
    else {
      size_t v13 = v22;
    }
    uint64_t v14 = llvm::raw_ostream::write(v10, p_p, v13);
    unsigned int v15 = (_OWORD *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v15 > 0xFuLL)
    {
      *unsigned int v15 = *(_OWORD *)".flatbuffer_end\n";
      *((void *)v14 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v14, ".flatbuffer_end\n", 0x10uLL);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p);
    }
  }
  size_t v16 = v6;
  if (v6 >= 0x17uLL)
  {
    if ((v6 | 7) == 0x17) {
      uint64_t v18 = (v6 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v18 = v6 | 7;
    }
    uint64_t v17 = operator new(v18 + 1);
    size_t v22 = v16;
    uint64_t v23 = v18 - 0x7FFFFFFFFFFFFFFFLL;
    __p = v17;
    goto LABEL_25;
  }
  HIBYTE(v23) = v6;
  uint64_t v17 = &__p;
  if (v16) {
LABEL_25:
  }
    memmove(v17, v5, v16);
  *((unsigned char *)v17 + v16) = 0;
  if (v23 >= 0) {
    int v19 = &__p;
  }
  else {
    int v19 = __p;
  }
  if (v23 >= 0) {
    size_t v20 = HIBYTE(v23) & 0x7F;
  }
  else {
    size_t v20 = v22;
  }
  (*(void (**)(uint64_t, void *, size_t))(*(void *)a4 + 488))(a4, v19, v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
}

uint64_t llvm::GPUMetadataEmitter::EmitMetadataFromFB(uint64_t a1, int a2, uint64_t a3, uint64_t ***a4, llvm::MCContext *a5, llvm::MCStreamer *a6, char *__s, void *a8, char a9)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  if (__s) {
    size_t v16 = strlen(__s);
  }
  else {
    size_t v16 = 0;
  }
  size_t v17 = sub_1CC76A754((uint64_t)a5, (uint64_t)a6, (uint64_t)"__GPU_METADATA", 0xEuLL, (uint64_t)__s, v16);
  if (!a9) {
    goto LABEL_16;
  }
  uint64_t v37 = v39;
  long long v38 = xmmword_1CFAC7120;
  uint64_t v18 = a4[5];
  if ((*((unsigned char *)a4 + 23) & 0x10) != 0)
  {
    uint64_t v19 = ***a4;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((a4 >> 4) ^ (a4 >> 9));
      uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 == a4)
      {
LABEL_13:
        uint64_t v27 = v23[1];
        uint64_t v30 = *v27;
        uint64_t v28 = (char *)(v27 + 2);
        uint64_t v29 = v30;
        goto LABEL_14;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == a4)
        {
          uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_13;
        }
      }
    }
    uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_13;
  }
  uint64_t v29 = 0;
  uint64_t v28 = &byte_1CFBCE98E;
LABEL_14:
  __int16 v36 = 261;
  uint64_t v33 = v28;
  uint64_t v34 = v29;
  llvm::Mangler::getNameWithPrefix((uint64_t)&v37, &v33, (uint64_t)(v18 + 34));
  uint64_t v33 = v37;
  uint64_t v34 = (uint64_t **)v38;
  uint64_t v35 = "@md";
  __int16 v36 = 773;
  uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(a5, (unsigned __int8 ***)&v33);
  (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a6 + 192))(a6, Symbol, 0);
  if (v37 != v39) {
    free(v37);
  }
LABEL_16:
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(a1, a1 + 320, a8, (uint64_t)a6);
  return sub_1CC76D720((uint64_t)a5, a6, v17, a3);
}

uint64_t sub_1CC76D720(uint64_t result, llvm::MCStreamer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 + 104;
  if (*(void *)(a3 + 104) == a3 + 104) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 264))(a4);
  if (result) {
    return result;
  }
  for (uint64_t i = *(void *)(a3 + 112); i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (*(unsigned char *)(i + 48) == 1)
    {
      uint64_t v4 = i;
      break;
    }
  }
  uint64_t v10 = *(unsigned int **)(v4 + 64);
  unint64_t v11 = (int *)((char *)v10 + *v10);
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    uint64_t v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    uint64_t v14 = 0;
  }
  unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0x1Fu && (uint64_t v16 = v15[15]) != 0) {
    int v17 = v14 + v16 + *(int *)((char *)v14 + v16);
  }
  else {
    int v17 = 0;
  }
  sub_1CD63A7B0(&v80, a4);
  sub_1CD63A844(&v79, (uint64_t)&v80);
  sub_1CD63A844(&v78, (uint64_t)&v81);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v79 + 24))(v79, v78) & 1) == 0)
  {
    int v65 = v17 - v10 + 4;
    do
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 32))(v79);
      uint64_t v21 = *(const llvm::GlobalValue **)v20;
      int v22 = *(_DWORD *)(v20 + 8);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v77 = 0;
      v74[0] = 0;
      v74[1] = 0;
      int v75 = 0;
      DWORD2(v66) = 0;
      char v70 = 0;
      uint64_t v71 = 0;
      *(void *)&long long v66 = &unk_1F2646F30;
      uint64_t v73 = __p;
      int v72 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v67 = 0;
      llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v74, (char **)&v66, v21, 1);
      *(void *)&long long v66 = &unk_1F2646B98;
      if (v72 == 1 && v67) {
        MEMORY[0x1D25D9CB0](v67, 0x1000C8077774924);
      }
      MEMORY[0x1D25D9CD0](v74[0], 8);
      LOWORD(v69) = 260;
      *(void *)&long long v66 = __p;
      uint64_t Symbol = llvm::MCContext::getOrCreateSymbol((llvm::MCContext *)v8, (unsigned __int8 ***)&v66);
      if (*((unsigned char *)v21 + 16) != 3 || v21 == 0) {
        goto LABEL_49;
      }
      uint64_t Metadata = llvm::Value::getMetadata((uint64_t)v21, "agx.bind", 8uLL);
      if (!Metadata) {
        goto LABEL_49;
      }
      int v26 = (void *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
      uint64_t v27 = v26[1];
      if (*(unsigned char *)(*(void *)(*(void *)(*v26 + 128) + 24) + 8) == 17)
      {
        if (*(unsigned char *)v27 != 1 || (uint64_t v28 = *(void *)(v27 + 128), *(unsigned char *)(v28 + 16) != 16))
        {
          uint64_t v29 = (void *)(v27 - 8 * *(unsigned int *)(v27 + 8));
          uint64_t v30 = *(void *)(*v29 + 128);
          uint64_t v31 = (void *)(v30 + 24);
          if (*(_DWORD *)(v30 + 32) >= 0x41u) {
            uint64_t v31 = (void *)*v31;
          }
          uint64_t v32 = (void *)*v31;
          uint64_t v33 = v29[1];
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(v27 + 128);
      }
      uint64_t v34 = (void *)(v28 + 24);
      if (*(_DWORD *)(v28 + 32) >= 0x41u) {
        uint64_t v34 = (void *)*v34;
      }
      uint64_t v32 = (void *)*v34;
      uint64_t v33 = v26[2];
LABEL_43:
      uint64_t v35 = *(void *)(v33 + 128);
      __int16 v36 = (unsigned int *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u) {
        __int16 v36 = *(unsigned int **)v36;
      }
      if (v32 == 114 || v32 == 18)
      {
        uint64_t v49 = *v36;
        *(void *)(v8 + 272) += 24;
        uint64_t v50 = *(void *)(v8 + 192);
        if (((v50 + 7) & 0xFFFFFFFFFFFFFFF8) - v50 + 24 > *(void *)(v8 + 200) - v50)
        {
          unsigned int v56 = *(_DWORD *)(v8 + 216) >> 7;
          if (v56 >= 0x1E) {
            LOBYTE(v56) = 30;
          }
          uint64_t v62 = 4096 << v56;
          unint64_t v51 = (unint64_t)operator new(4096 << v56, (std::align_val_t)8uLL);
          unint64_t v57 = *(unsigned int *)(v8 + 216);
          if (v57 >= *(unsigned int *)(v8 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v8 + 208) + 8 * v57) = v51;
          ++*(_DWORD *)(v8 + 216);
          *(void *)(v8 + 200) = v51 + v62;
        }
        else
        {
          unint64_t v51 = (v50 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v8 + 192) = v51 + 24;
        if (*(unsigned char *)(*(void *)(v8 + 152) + 18)) {
          int v52 = 65689;
        }
        else {
          int v52 = 153;
        }
        *(unsigned char *)unint64_t v51 = 2;
        *(_DWORD *)(v51 + 1) = v52 | (*(unsigned __int8 *)(v51 + 4) << 24);
        *(void *)(v51 + 8) = 0;
        *(void *)(v51 + 16) = Symbol;
        *(void *)(v8 + 272) += 24;
        uint64_t v53 = *(void *)(v8 + 192);
        if (((v53 + 7) & 0xFFFFFFFFFFFFFFF8) - v53 + 24 > *(void *)(v8 + 200) - v53)
        {
          unsigned int v58 = *(_DWORD *)(v8 + 216) >> 7;
          if (v58 >= 0x1E) {
            LOBYTE(v58) = 30;
          }
          uint64_t v63 = 4096 << v58;
          unint64_t v54 = (unint64_t)operator new(4096 << v58, (std::align_val_t)8uLL);
          unint64_t v59 = *(unsigned int *)(v8 + 216);
          if (v59 >= *(unsigned int *)(v8 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v8 + 208) + 8 * v59) = v54;
          ++*(_DWORD *)(v8 + 216);
          *(void *)(v8 + 200) = v54 + v63;
        }
        else
        {
          unint64_t v54 = (v53 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v8 + 192) = v54 + 24;
        *(unsigned char *)unint64_t v54 = 1;
        *(_DWORD *)(v54 + 1) = *(unsigned __int8 *)(v54 + 4) << 24;
        *(void *)(v54 + 8) = 0;
        *(void *)(v54 + 16) = v49;
        *(void *)(v8 + 272) += 32;
        uint64_t v55 = *(void *)(v8 + 192);
        if (((v55 + 7) & 0xFFFFFFFFFFFFFFF8) - v55 + 32 > *(void *)(v8 + 200) - v55)
        {
          unsigned int v60 = *(_DWORD *)(v8 + 216) >> 7;
          if (v60 >= 0x1E) {
            LOBYTE(v60) = 30;
          }
          uint64_t v64 = 4096 << v60;
          unint64_t v39 = (unint64_t)operator new(4096 << v60, (std::align_val_t)8uLL);
          unint64_t v61 = *(unsigned int *)(v8 + 216);
          if (v61 >= *(unsigned int *)(v8 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v8 + 208) + 8 * v61) = v39;
          ++*(_DWORD *)(v8 + 216);
          *(void *)(v8 + 200) = v39 + v64;
        }
        else
        {
          unint64_t v39 = (v55 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v8 + 192) = v39 + 32;
        *(unsigned char *)unint64_t v39 = 0;
        *(_DWORD *)(v39 + 1) = *(unsigned __int8 *)(v39 + 4) << 24;
        *(void *)(v39 + 8) = 0;
        *(void *)(v39 + 16) = v51;
        *(void *)(v39 + 24) = v54;
        goto LABEL_52;
      }
LABEL_49:
      *(void *)(v8 + 272) += 24;
      uint64_t v38 = *(void *)(v8 + 192);
      if (((v38 + 7) & 0xFFFFFFFFFFFFFFF8) - v38 + 24 > *(void *)(v8 + 200) - v38)
      {
        unsigned int v46 = *(_DWORD *)(v8 + 216) >> 7;
        if (v46 >= 0x1E) {
          LOBYTE(v46) = 30;
        }
        uint64_t v47 = 4096 << v46;
        unint64_t v39 = (unint64_t)operator new(4096 << v46, (std::align_val_t)8uLL);
        unint64_t v48 = *(unsigned int *)(v8 + 216);
        if (v48 >= *(unsigned int *)(v8 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v8 + 208) + 8 * v48) = v39;
        ++*(_DWORD *)(v8 + 216);
        *(void *)(v8 + 200) = v39 + v47;
      }
      else
      {
        unint64_t v39 = (v38 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v8 + 192) = v39 + 24;
      int v40 = *(unsigned __int8 *)(*(void *)(v8 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v39 = 2;
      *(_DWORD *)(v39 + 1) = v40 | (*(unsigned __int8 *)(v39 + 4) << 24);
      *(void *)(v39 + 8) = 0;
      *(void *)(v39 + 16) = Symbol;
LABEL_52:
      llvm::MCStreamer::visitUsedExpr(a2, (const llvm::MCExpr **)v39);
      *(void *)&long long v66 = v39;
      DWORD2(v66) = v22 + v65;
      HIDWORD(v66) = 128;
      uint64_t v67 = 0;
      unsigned int v41 = *(_DWORD *)(v4 + 128);
      unint64_t v42 = *(void *)(v4 + 120);
      if (v41 >= *(_DWORD *)(v4 + 132))
      {
        BOOL v45 = v42 + 24 * v41 > (unint64_t)&v66;
        if (v42 > (unint64_t)&v66 || !v45) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v43 = v42 + 24 * *(unsigned int *)(v4 + 128);
      long long v44 = v66;
      *(void *)(v43 + 16) = v67;
      *(_OWORD *)uint64_t v43 = v44;
      ++*(_DWORD *)(v4 + 128);
      if (SHIBYTE(v77) < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(uint64_t))(*(void *)v79 + 40))(v79);
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v79 + 24))(v79, v78) & 1) == 0);
  }
  uint64_t v18 = v78;
  uint64_t v78 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v79;
  uint64_t v79 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  uint64_t result = v80;
  if (v80) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::EmitCommonMetadata(uint64_t *a1, uint64_t ***a2, uint64_t a3, uint64_t (***a4)(void), uint64_t a5, uint64_t *a6)
{
  uint64_t v1843 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(llvm::Module **)(a5 + 40);
  v1841[0] = "agx.common_store_dma";
  __int16 v1842 = 259;
  uint64_t v1814 = (uint64_t)v8;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v8, v1841);
  v1841[0] = (const char *)1;
  for (uint64_t i = 1; i != 33; i += 2)
    v1841[i] = (const char *)-4096;
  v1810 = (_OWORD *)(v1814 + 216);
  if (*(char *)(v1814 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v1830, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
  }
  else {
    std::string v1830 = *(std::string *)(v1814 + 216);
  }
  v1824 = a4;
  if (!std::string::compare(&v1830, 0, 4uLL, "agx1"))
  {
    int v11 = 27;
  }
  else if (!std::string::compare(&v1830, 0, 4uLL, "agx2"))
  {
    int v11 = 28;
  }
  else if (!std::string::compare(&v1830, 0, 4uLL, "agx3"))
  {
    int v11 = 29;
  }
  else
  {
    int v11 = 0;
  }
  int v1699 = v11;
  if (SHIBYTE(v1830.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1830.__r_.__value_.__l.__data_);
  }
  if (NamedMetadata)
  {
    uint64_t v12 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *(void *)(**(void **)(NamedMetadata + 48) + v13);
        __dst.__r_.__value_.__r.__words[0] = 0;
        __dst.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v15 - 8 * *(unsigned int *)(v15 + 8)) + 128);
        sub_1CB91FE08((uint64_t)v1841, &__dst)[1] = v15;
        v13 += 8;
      }
      while (v14 != v13);
    }
  }
  uint64_t v16 = (uint64_t)v1824;
  int v17 = sub_1CC77FE7C(3, (uint64_t)v1824);
  if (v17 == -1) {
    int v18 = 0;
  }
  else {
    int v18 = v17;
  }
  int v1737 = v18;
  uint64_t v19 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
  int v1698 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 24))(v19, 4);
  unsigned int v1709 = sub_1CC7821B8(3, (uint64_t)v1824);
  if (((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[20])(v1824, 3))
  {
    __p = 0;
    v1735 = 0;
    uint64_t v20 = 0;
    v1753 = 0;
    goto LABEL_90;
  }
  if (!((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[74])(v1824, 100))
  {
    __p = 0;
    v1735 = 0;
    goto LABEL_79;
  }
  ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 3);
  ((void (*)(void **__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[17])(&v1827, v1824, 3);
  uint64_t v21 = v1827;
  __src = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v22 = 0;
    if (v1827) {
      goto LABEL_26;
    }
LABEL_2625:
    std::string::size_type v23 = 0;
    goto LABEL_27;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
  std::string::size_type v22 = __dst.__r_.__value_.__r.__words[0];
  if (!v21) {
    goto LABEL_2625;
  }
LABEL_26:
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v21 + 16))(&__dst, v21);
  std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0];
LABEL_27:
  if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v22 + 24))(v22, v23))
  {
    __p = 0;
    v1735 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    __p = 0;
    v1735 = 0;
    do
    {
      v1827 = 0;
      v1827 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(void *)v22 + 32))(v22);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
      __dst.__r_.__value_.__l.__size_ = 0x800000000;
      uint64_t v25 = *((void *)v1827 + 1);
      if (v25)
      {
        unsigned int v26 = 0;
        do
        {
          if (v26 >= HIDWORD(__dst.__r_.__value_.__r.__words[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(__dst.__r_.__value_.__r.__words[0] + 8 * v26) = *(void *)(v25 + 24);
          unsigned int v26 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
          uint64_t v25 = *(void *)(v25 + 8);
        }
        while (v25);
        while (v26)
        {
          uint64_t v27 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 8 * v26-- - 8);
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = v26;
          unsigned int v28 = *(unsigned __int8 *)(v27 + 16);
          if (v28 == 5)
          {
            for (uint64_t j = *(void *)(v27 + 8); j; uint64_t j = *(void *)(j + 8))
            {
              if (v26 >= HIDWORD(__dst.__r_.__value_.__r.__words[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(__dst.__r_.__value_.__r.__words[0] + 8 * v26) = *(void *)(j + 24);
              unsigned int v26 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
            }
          }
          else
          {
            uint64_t v29 = v1735;
            if (v28 >= 0x1C && (*(_WORD *)(*(void *)(*(void *)(v27 + 40) + 56) + 18) & 0x3FF0) != 0x640) {
              goto LABEL_66;
            }
          }
        }
      }
      uint64_t v31 = sub_1CC782500(a6, &v1827);
      if (sub_1CC78258C((llvm::GlobalValue *)v1827))
      {
        uint64_t v29 = v1735;
      }
      else
      {
        uint64_t v32 = *(void *)(*(void *)(v31 - 8 * *(unsigned int *)(v31 + 8) + 16) + 128);
        uint64_t v33 = (void *)(v32 + 24);
        uint64_t v34 = v1735;
        if (*(_DWORD *)(v32 + 32) >= 0x41u) {
          uint64_t v33 = (void *)*v33;
        }
        int v35 = *(_DWORD *)v33;
        if (v1735 < v24)
        {
          *(_DWORD *)v1735 = v35;
          uint64_t v29 = v1735 + 4;
        }
        else
        {
          uint64_t v36 = (v1735 - __p) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
            goto LABEL_2629;
          }
          if ((v24 - __p) >> 1 > v37) {
            unint64_t v37 = (v24 - __p) >> 1;
          }
          if ((unint64_t)(v24 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38)
          {
            if (v38 >> 62) {
              goto LABEL_2630;
            }
            unint64_t v39 = (char *)operator new(4 * v38);
            uint64_t v34 = v1735;
          }
          else
          {
            unint64_t v39 = 0;
          }
          int v40 = &v39[4 * v36];
          *(_DWORD *)int v40 = v35;
          unsigned int v41 = v40 + 4;
          while (v34 != __p)
          {
            int v42 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v40 - 1) = v42;
            v40 -= 4;
          }
          uint64_t v24 = &v39[4 * v38];
          if (__p) {
            operator delete(__p);
          }
          uint64_t v29 = v41;
          __p = v40;
        }
      }
LABEL_66:
      v1735 = v29;
      if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2]) {
        free(__dst.__r_.__value_.__l.__data_);
      }
      (*(void (**)(std::string::size_type))(*(void *)v22 + 40))(v22);
    }
    while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v22 + 24))(v22, v23) & 1) == 0);
  }
  if (v23) {
    (*(void (**)(std::string::size_type))(*(void *)v23 + 8))(v23);
  }
  (*(void (**)(std::string::size_type))(*(void *)v22 + 8))(v22);
  if (v21) {
    (*(void (**)(void *))(*(void *)v21 + 8))(v21);
  }
  uint64_t v16 = (uint64_t)v1824;
  if (__src) {
    (*(void (**)(void *))(*(void *)__src + 8))(__src);
  }
LABEL_79:
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v16 + 128))(&__dst, v16, 3);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v16 + 136))(&v1827, v16, 3);
  uint64_t v43 = v1827;
  v1797 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    std::string::size_type v44 = __dst.__r_.__value_.__r.__words[0];
    if (v43)
    {
LABEL_81:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v43 + 16))(&__dst, v43);
      std::string::size_type v45 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    }
  }
  else
  {
    std::string::size_type v44 = 0;
    if (v1827) {
      goto LABEL_81;
    }
  }
  std::string::size_type v45 = 0;
LABEL_82:
  v1789 = v43;
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v44 + 24))(v44, v45) & 1) == 0)
  {
    unint64_t v121 = 0;
    uint64_t v122 = 0;
    v1753 = 0;
    std::string::size_type v1805 = v45;
    while (1)
    {
      v1827 = 0;
      v1827 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(void *)v44 + 32))(v44);
      uint64_t v123 = sub_1CC782500(a6, &v1827);
      if (!sub_1CC78258C((llvm::GlobalValue *)v1827)) {
        break;
      }
      uint64_t v20 = v122;
LABEL_300:
      (*(void (**)(std::string::size_type))(*(void *)v44 + 40))(v44);
      uint64_t v122 = v20;
      if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v44 + 24))(v44, v45))goto LABEL_84; {
    }
      }
    __srcb = v121;
    int v124 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 400))(v16, v1827);
    *((unsigned char *)a2 + 70) = 1;
    unsigned int v126 = a2[5];
    unsigned int v125 = a2[6];
    unsigned int v127 = a2[4];
    int v128 = v124 - v1737;
    if (v124 == v1737 && *((unsigned char *)a2 + 80) == 0)
    {
LABEL_236:
      char v138 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 184))(v16, 16, v1827);
      if ((v138 & 1) != 0 || *((unsigned char *)a2 + 80))
      {
        unsigned int v139 = sub_1CBF2CB00((uint64_t)a2, v138);
        unint64_t v140 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)a2[6] - (char *)v140) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unint64_t v140 = (uint64_t *)a2[7];
        }
        *unint64_t v140 = v139 | 0xA00000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v141 = *((unsigned __int16 *)a2 + 34);
        if (v141 <= 0xA) {
          LOWORD(v141) = 10;
        }
        *((_WORD *)a2 + 34) = v141;
      }
      if (*(char *)(v1814 + 239) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1810;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v1814 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2")) {
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v142 = v123 - 8 * *(unsigned int *)(v123 + 8);
      uint64_t v143 = *(void *)(*(void *)(v142 + 8) + 128);
      unsigned int v144 = (void *)(v143 + 24);
      if (*(_DWORD *)(v143 + 32) >= 0x41u) {
        unsigned int v144 = (void *)*v144;
      }
      unsigned int v145 = (void *)*v144;
      uint64_t v146 = *(void *)(*(void *)(v142 + 16) + 128);
      unint64_t v147 = (void *)(v146 + 24);
      if (*(_DWORD *)(v146 + 32) >= 0x41u) {
        unint64_t v147 = (void *)*v147;
      }
      int v148 = *(_DWORD *)v147;
      if (v145 | *((unsigned char *)a2 + 80))
      {
        if (!a2[9]) {
          a2[9] = (uint64_t **)1;
        }
        uint64_t v150 = a2[6];
        if (v150 == a2[7])
        {
          sub_1CBF2C904((uint64_t *)a2, 1uLL);
          uint64_t v150 = a2[6];
        }
        a2[6] = (uint64_t **)((char *)v150 - 1);
        *((unsigned char *)v150 - 1) = (_BYTE)v145;
        unsigned int v151 = a2[4];
        BOOL v152 = a2[5];
        unint64_t v154 = a2[6];
        uint64_t v153 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)v154 - (char *)v153) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v153 = (uint64_t *)a2[7];
        }
        *uint64_t v153 = (v151 - v154 + v152) | 0x400000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v155 = *((unsigned __int16 *)a2 + 34);
        if (v155 <= 4) {
          LOWORD(v155) = 4;
        }
        *((_WORD *)a2 + 34) = v155;
        int v149 = *((unsigned __int8 *)a2 + 80);
      }
      else
      {
        int v149 = 0;
      }
      uint64_t v16 = (uint64_t)v1824;
      if (!(v148 | v149)) {
        goto LABEL_281;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      uint64_t v157 = a2[6];
      uint64_t v156 = (uint64_t *)a2[7];
      unint64_t v158 = ((_BYTE)v157 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v157 - (char *)v156 < v158)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v157 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        a2[6] = (uint64_t **)((char *)a2[6] - v158);
      }
      else
      {
        __int16 v159 = (uint64_t **)((char *)v157 - v158);
        a2[6] = (uint64_t **)((char *)v157 - v158);
        if (!v158)
        {
LABEL_274:
          if ((unint64_t)((char *)v159 - (char *)v156) <= 3)
          {
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            __int16 v159 = a2[6];
            uint64_t v156 = (uint64_t *)a2[7];
          }
          *((_DWORD *)v159 - 1) = v148;
          unint64_t v161 = (uint64_t **)((char *)v159 - 4);
          a2[6] = v161;
          uint64_t v162 = a2[4];
          uint64_t v163 = a2[5];
          if ((unint64_t)((char *)v161 - (char *)v156) <= 7)
          {
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            uint64_t v156 = (uint64_t *)a2[7];
          }
          uint64_t *v156 = (v162 - v161 + v163) | 0x600000000;
          ++a2[7];
          ++*((_DWORD *)a2 + 16);
          unsigned int v164 = *((unsigned __int16 *)a2 + 34);
          if (v164 <= 6) {
            LOWORD(v164) = 6;
          }
          *((_WORD *)a2 + 34) = v164;
          uint64_t v16 = (uint64_t)v1824;
LABEL_281:
          int v165 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v127 - (unsigned __int16)v125 + (unsigned __int16)v126);
          int v166 = v165;
          unint64_t v121 = __srcb;
          if (v122 >= __srcb)
          {
            uint64_t v167 = v1753;
            uint64_t v168 = (v122 - v1753) >> 2;
            unint64_t v169 = v168 + 1;
            if ((unint64_t)(v168 + 1) >> 62) {
              goto LABEL_2629;
            }
            if ((__srcb - v1753) >> 1 > v169) {
              unint64_t v169 = (__srcb - v1753) >> 1;
            }
            if ((unint64_t)(__srcb - v1753) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v170 = v169;
            }
            if (v170)
            {
              if (v170 >> 62) {
                goto LABEL_2630;
              }
              uint64_t v171 = (char *)operator new(4 * v170);
              uint64_t v167 = v1753;
            }
            else
            {
              uint64_t v171 = 0;
            }
            unsigned int v172 = &v171[4 * v168];
            *(_DWORD *)unsigned int v172 = v166;
            uint64_t v20 = v172 + 4;
            while (v122 != v167)
            {
              int v173 = *((_DWORD *)v122 - 1);
              v122 -= 4;
              *((_DWORD *)v172 - 1) = v173;
              v172 -= 4;
            }
            unint64_t v121 = &v171[4 * v170];
            if (v167) {
              operator delete(v167);
            }
            v1753 = v172;
          }
          else
          {
            *(_DWORD *)uint64_t v122 = v165;
            uint64_t v20 = v122 + 4;
          }
          std::string::size_type v45 = v1805;
          goto LABEL_300;
        }
      }
      uint64_t v160 = 0;
      do
        *((unsigned char *)a2[6] + v160++) = 0;
      while (v158 != v160);
      __int16 v159 = a2[6];
      uint64_t v156 = (uint64_t *)a2[7];
      goto LABEL_274;
    }
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    unint64_t v130 = ((_BYTE)v125 - ((_BYTE)v127 + (_BYTE)v126)) & 3;
    unsigned int v131 = (uint64_t *)a2[7];
    if ((char *)v125 - (char *)v131 < v130)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v125 - ((_BYTE)v127 + (_BYTE)v126)) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v130);
    }
    else
    {
      unsigned int v132 = (uint64_t **)((char *)v125 - v130);
      a2[6] = (uint64_t **)((char *)v125 - v130);
      if ((((_BYTE)v125 - ((_BYTE)v127 + (_BYTE)v126)) & 3) == 0)
      {
LABEL_229:
        if ((unint64_t)((char *)v132 - (char *)v131) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          unsigned int v132 = a2[6];
          unsigned int v131 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v132 - 1) = v128;
        unsigned int v134 = (uint64_t **)((char *)v132 - 4);
        a2[6] = v134;
        unsigned int v135 = a2[4];
        unint64_t v136 = a2[5];
        if ((unint64_t)((char *)v134 - (char *)v131) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unsigned int v131 = (uint64_t *)a2[7];
        }
        *unsigned int v131 = (v135 - v134 + v136) | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v137 = *((unsigned __int16 *)a2 + 34);
        if (v137 <= 8) {
          LOWORD(v137) = 8;
        }
        *((_WORD *)a2 + 34) = v137;
        uint64_t v16 = (uint64_t)v1824;
        goto LABEL_236;
      }
    }
    uint64_t v133 = 0;
    do
      *((unsigned char *)a2[6] + v133++) = 0;
    while (v130 != v133);
    unsigned int v132 = a2[6];
    unsigned int v131 = (uint64_t *)a2[7];
    goto LABEL_229;
  }
  uint64_t v20 = 0;
  v1753 = 0;
LABEL_84:
  if (v45) {
    (*(void (**)(std::string::size_type))(*(void *)v45 + 8))(v45);
  }
  (*(void (**)(std::string::size_type))(*(void *)v44 + 8))(v44);
  if (v1789) {
    (*(void (**)(void *))(*(void *)v1789 + 8))(v1789);
  }
  if (v1797) {
    (*(void (**)(void *))(*(void *)v1797 + 8))(v1797);
  }
LABEL_90:
  int v46 = sub_1CC77FE7C(0, v16);
  if (v46 == -1) {
    int v47 = 0;
  }
  else {
    int v47 = v46;
  }
  int v1763 = v47;
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 336))(v16);
  unsigned int v1714 = (*(uint64_t (**)(uint64_t, void))(*(void *)v48 + 24))(v48, 0);
  unsigned int v1707 = sub_1CC782620(0, v16);
  v1702 = v20;
  if ((*(uint64_t (**)(uint64_t, void))(*(void *)v16 + 160))(v16, 0))
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    goto LABEL_106;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)v16 + 128))(&__dst, v16, 0);
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v16 + 136))(&v1827, v16, 0);
  unint64_t v51 = v1827;
  std::string::size_type v1760 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    std::string::size_type v52 = __dst.__r_.__value_.__r.__words[0];
    if (v51)
    {
LABEL_97:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v51 + 16))(&__dst, v51);
      std::string::size_type v53 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_98;
    }
  }
  else
  {
    std::string::size_type v52 = 0;
    if (v1827) {
      goto LABEL_97;
    }
  }
  std::string::size_type v53 = 0;
LABEL_98:
  v1747 = v51;
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v52 + 24))(v52, v53) & 1) == 0)
  {
    uint64_t v174 = 0;
    unsigned int v175 = 0;
    uint64_t v50 = 0;
    std::string::size_type v1770 = v52;
    std::string::size_type v1766 = v53;
    while (1)
    {
      v1827 = 0;
      v1827 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(void *)v52 + 32))(v52);
      uint64_t v176 = sub_1CC782500(a6, &v1827);
      if (!llvm::Value::getMetadata((uint64_t)v1827, "agx.ts.dma", 0xAuLL))
      {
        uint64_t v177 = *((void *)v1827 + 3);
        if (*(unsigned char *)(v177 + 8) == 17)
        {
          uint64_t v178 = *(void *)(v176 - 8 * *(unsigned int *)(v176 + 8) + 8);
          uint64_t v179 = v1824;
          if (*(unsigned char *)v178 == 1 && *(unsigned char *)(*(void *)(v178 + 128) + 16) == 16) {
            unsigned int v180 = 1;
          }
          else {
            unsigned int v180 = *(_DWORD *)(v177 + 32);
          }
        }
        else
        {
          unsigned int v180 = 1;
          uint64_t v179 = v1824;
        }
        uint64_t v181 = ((uint64_t (*)(uint64_t (***)(void)))(*v179)[50])(v179);
        if (v180) {
          break;
        }
      }
      uint64_t v49 = v175;
LABEL_307:
      std::string::size_type v52 = v1770;
      (*(void (**)(std::string::size_type))(*(void *)v1770 + 40))(v1770);
      std::string::size_type v53 = v1766;
      unsigned int v175 = v49;
      if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v52 + 24))(v52, v1766))goto LABEL_100; {
    }
      }
    uint64_t v182 = 0;
    unint64_t v183 = __ROR8__(v181, 32);
    v1798 = (void *)HIDWORD(v183);
    uint64_t v1806 = v176;
    uint64_t v1783 = v180;
    unsigned int v1790 = v183 / v180 / v1714;
    while (1)
    {
      __srcc = v174;
      v1769 = v50;
      *((unsigned char *)a2 + 70) = 1;
      uint64_t v184 = a2[5];
      uint64_t v185 = a2[6];
      uint64_t v186 = a2[4];
      int v187 = v1798 + v1790 * v182;
      int v188 = v187 - v1763;
      if (v187 == v1763 && *((unsigned char *)a2 + 80) == 0) {
        goto LABEL_335;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      unint64_t v190 = ((_BYTE)v185 - ((_BYTE)v186 + (_BYTE)v184)) & 3;
      unsigned int v191 = (uint64_t *)a2[7];
      if ((char *)v185 - (char *)v191 < v190) {
        break;
      }
      unsigned int v192 = (uint64_t **)((char *)v185 - v190);
      a2[6] = (uint64_t **)((char *)v185 - v190);
      if ((((_BYTE)v185 - ((_BYTE)v186 + (_BYTE)v184)) & 3) != 0) {
        goto LABEL_325;
      }
LABEL_328:
      if ((unint64_t)((char *)v192 - (char *)v191) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        unsigned int v192 = a2[6];
        unsigned int v191 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v192 - 1) = v188;
      unsigned int v194 = (uint64_t **)((char *)v192 - 4);
      a2[6] = v194;
      unsigned int v195 = a2[4];
      unsigned int v196 = a2[5];
      if ((unint64_t)((char *)v194 - (char *)v191) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        unsigned int v191 = (uint64_t *)a2[7];
      }
      *unsigned int v191 = (v195 - v194 + v196) | 0x800000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v197 = *((unsigned __int16 *)a2 + 34);
      if (v197 <= 8) {
        LOWORD(v197) = 8;
      }
      *((_WORD *)a2 + 34) = v197;
LABEL_335:
      char v198 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void *))(*v1824)[23])(v1824, 16, v1827);
      if ((v198 & 1) != 0 || *((unsigned char *)a2 + 80))
      {
        unsigned int v199 = sub_1CBF2CB00((uint64_t)a2, v198);
        unsigned int v200 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)a2[6] - (char *)v200) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unsigned int v200 = (uint64_t *)a2[7];
        }
        *unsigned int v200 = v199 | 0xA00000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v201 = *((unsigned __int16 *)a2 + 34);
        if (v201 <= 0xA) {
          LOWORD(v201) = 10;
        }
        *((_WORD *)a2 + 34) = v201;
      }
      if (*(char *)(v1814 + 239) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1810;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v1814 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2")) {
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v202 = (void *)(v1806 - 8 * *(unsigned int *)(v1806 + 8));
      uint64_t v203 = v202[1];
      if (*(unsigned char *)(*(void *)(*(void *)(*v202 + 128) + 24) + 8) == 17)
      {
        if (*(unsigned char *)v203 != 1 || (uint64_t v204 = *(void *)(v203 + 128), *(unsigned char *)(v204 + 16) != 16))
        {
          __int16 v205 = (void *)(v202[v182 + 1] - 8 * *(unsigned int *)(v202[v182 + 1] + 8));
          uint64_t v206 = *(void *)(*v205 + 128);
          uint64_t v207 = (void *)(v206 + 24);
          if (*(_DWORD *)(v206 + 32) >= 0x41u) {
            uint64_t v207 = (void *)*v207;
          }
          unint64_t v208 = (void *)*v207;
          uint64_t v209 = v205[1];
          goto LABEL_360;
        }
      }
      else
      {
        uint64_t v204 = *(void *)(v203 + 128);
      }
      char v210 = (void *)(v204 + 24);
      if (*(_DWORD *)(v204 + 32) >= 0x41u) {
        char v210 = (void *)*v210;
      }
      unint64_t v208 = (void *)*v210;
      uint64_t v209 = v202[2];
LABEL_360:
      uint64_t v211 = *(void *)(v209 + 128);
      unint64_t v212 = (void *)(v211 + 24);
      if (*(_DWORD *)(v211 + 32) >= 0x41u) {
        unint64_t v212 = (void *)*v212;
      }
      int v213 = *(_DWORD *)v212;
      if (v208 | *((unsigned char *)a2 + 80))
      {
        if (!a2[9]) {
          a2[9] = (uint64_t **)1;
        }
        int v215 = a2[6];
        if (v215 == a2[7])
        {
          sub_1CBF2C904((uint64_t *)a2, 1uLL);
          int v215 = a2[6];
        }
        a2[6] = (uint64_t **)((char *)v215 - 1);
        *((unsigned char *)v215 - 1) = (_BYTE)v208;
        int v216 = a2[4];
        int v217 = a2[5];
        int v219 = a2[6];
        uint64_t v218 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)v219 - (char *)v218) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v218 = (uint64_t *)a2[7];
        }
        *uint64_t v218 = (v216 - v219 + v217) | 0x400000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v220 = *((unsigned __int16 *)a2 + 34);
        if (v220 <= 4) {
          LOWORD(v220) = 4;
        }
        *((_WORD *)a2 + 34) = v220;
        int v214 = *((unsigned __int8 *)a2 + 80);
      }
      else
      {
        int v214 = 0;
      }
      if (!(v213 | v214)) {
        goto LABEL_388;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      uint64_t v222 = a2[6];
      int v221 = (uint64_t *)a2[7];
      unint64_t v223 = ((_BYTE)v222 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v222 - (char *)v221 < v223)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v222 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        a2[6] = (uint64_t **)((char *)a2[6] - v223);
LABEL_378:
        uint64_t v225 = 0;
        do
          *((unsigned char *)a2[6] + v225++) = 0;
        while (v223 != v225);
        uint64_t v224 = a2[6];
        int v221 = (uint64_t *)a2[7];
        goto LABEL_381;
      }
      uint64_t v224 = (uint64_t **)((char *)v222 - v223);
      a2[6] = (uint64_t **)((char *)v222 - v223);
      if (v223) {
        goto LABEL_378;
      }
LABEL_381:
      if ((unint64_t)((char *)v224 - (char *)v221) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v224 = a2[6];
        int v221 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v224 - 1) = v213;
      unint64_t v226 = (uint64_t **)((char *)v224 - 4);
      a2[6] = v226;
      int v227 = a2[4];
      uint64_t v228 = a2[5];
      if ((unint64_t)((char *)v226 - (char *)v221) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        int v221 = (uint64_t *)a2[7];
      }
      uint64_t *v221 = (v227 - v226 + v228) | 0x600000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v229 = *((unsigned __int16 *)a2 + 34);
      if (v229 <= 6) {
        LOWORD(v229) = 6;
      }
      *((_WORD *)a2 + 34) = v229;
LABEL_388:
      int v230 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v186 - (unsigned __int16)v185 + (unsigned __int16)v184);
      int v231 = v230;
      uint64_t v174 = __srcc;
      if (v175 >= __srcc)
      {
        uint64_t v232 = (v175 - v1769) >> 2;
        unint64_t v233 = v232 + 1;
        if ((unint64_t)(v232 + 1) >> 62) {
          goto LABEL_2629;
        }
        if ((__srcc - v1769) >> 1 > v233) {
          unint64_t v233 = (__srcc - v1769) >> 1;
        }
        if ((unint64_t)(__srcc - v1769) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v234 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v234 = v233;
        }
        if (v234)
        {
          if (v234 >> 62) {
            goto LABEL_2630;
          }
          uint64_t v235 = (char *)operator new(4 * v234);
        }
        else
        {
          uint64_t v235 = 0;
        }
        unint64_t v236 = &v235[4 * v232];
        *(_DWORD *)unint64_t v236 = v231;
        uint64_t v49 = v236 + 4;
        while (v175 != v1769)
        {
          int v237 = *((_DWORD *)v175 - 1);
          v175 -= 4;
          *((_DWORD *)v236 - 1) = v237;
          v236 -= 4;
        }
        uint64_t v174 = &v235[4 * v234];
        if (v1769) {
          operator delete(v1769);
        }
        uint64_t v50 = v236;
      }
      else
      {
        *(_DWORD *)unsigned int v175 = v230;
        uint64_t v49 = v175 + 4;
        uint64_t v50 = v1769;
      }
      ++v182;
      unsigned int v175 = v49;
      if (v182 == v1783) {
        goto LABEL_307;
      }
    }
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v185 - ((_BYTE)v186 + (_BYTE)v184)) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v190);
LABEL_325:
    uint64_t v193 = 0;
    do
      *((unsigned char *)a2[6] + v193++) = 0;
    while (v190 != v193);
    unsigned int v192 = a2[6];
    unsigned int v191 = (uint64_t *)a2[7];
    goto LABEL_328;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
LABEL_100:
  if (v53) {
    (*(void (**)(std::string::size_type))(*(void *)v53 + 8))(v53);
  }
  (*(void (**)(std::string::size_type))(*(void *)v52 + 8))(v52);
  uint64_t v16 = (uint64_t)v1824;
  if (v1747) {
    (*(void (**)(void *))(*(void *)v1747 + 8))(v1747);
  }
  if (v1760) {
    (*(void (**)(std::string::size_type))(*(void *)v1760 + 8))(v1760);
  }
LABEL_106:
  if (v1709 <= v1707) {
    unsigned int v54 = v1707;
  }
  else {
    unsigned int v54 = v1709;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)v16 + 128))(&__dst, v16, 0);
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v16 + 136))(&v1827, v16, 0);
  std::string::size_type v55 = __dst.__r_.__value_.__r.__words[0];
  unsigned int v56 = v1827;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v57 = __dst.__r_.__value_.__r.__words[0];
    if (v56)
    {
LABEL_111:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v56 + 16))(&__dst, v56);
      std::string::size_type v58 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_112;
    }
  }
  else
  {
    std::string::size_type v57 = 0;
    if (v1827) {
      goto LABEL_111;
    }
  }
  std::string::size_type v58 = 0;
LABEL_112:
  v1696 = v49;
  v1768 = v50;
  unsigned int v59 = -1;
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v57 + 24))(v57, v58) & 1) == 0)
  {
    uint64_t v507 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v57 + 32))(v57);
    if (llvm::Value::getMetadata(v507, "agx.ts.dma", 0xAuLL))
    {
      unsigned int v508 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[50])(v1824, v507);
      if (v59 >= v508) {
        unsigned int v59 = v508;
      }
    }
    (*(void (**)(std::string::size_type))(*(void *)v57 + 40))(v57);
  }
  if (v58) {
    (*(void (**)(std::string::size_type))(*(void *)v58 + 8))(v58);
  }
  (*(void (**)(std::string::size_type))(*(void *)v57 + 8))(v57);
  if (v56) {
    (*(void (**)(void *))(*(void *)v56 + 8))(v56);
  }
  if (v55) {
    (*(void (**)(std::string::size_type))(*(void *)v55 + 8))(v55);
  }
  if (v59 == -1) {
    unsigned int v60 = 0;
  }
  else {
    unsigned int v60 = v59;
  }
  unsigned int v1700 = v60;
  uint64_t v61 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
  int v1697 = (*(uint64_t (**)(uint64_t, void))(*(void *)v61 + 24))(v61, 0);
  ((void (*)(std::string *__return_ptr, uint64_t (***)(void), void))(*v1824)[16])(&__dst, v1824, 0);
  ((void (*)(void **__return_ptr, uint64_t (***)(void), void))(*v1824)[17])(&v1827, v1824, 0);
  std::string::size_type v62 = __dst.__r_.__value_.__r.__words[0];
  uint64_t v63 = v1827;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v64 = __dst.__r_.__value_.__r.__words[0];
    if (v63)
    {
LABEL_124:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v63 + 16))(&__dst, v63);
      std::string::size_type v65 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_125;
    }
  }
  else
  {
    std::string::size_type v64 = 0;
    if (v1827) {
      goto LABEL_124;
    }
  }
  std::string::size_type v65 = 0;
LABEL_125:
  if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v64 + 24))(v64, v65))
  {
    unsigned int v1705 = 0;
  }
  else
  {
    unsigned int v1705 = 0;
    do
    {
      uint64_t v509 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v64 + 32))(v64);
      if (llvm::Value::getMetadata(v509, "agx.ts.dma", 0xAuLL))
      {
        unint64_t v510 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[50])(v1824, v509);
        int v511 = v510;
        uint64_t v513 = v512;
        __srce = (void *)HIDWORD(v510);
        uint64_t v514 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
        unsigned int v515 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v514 + 24))(v514, v513);
        unsigned int v516 = v1705;
        if (v1705 <= (__srce + v515 - 1) / v515 + v511) {
          unsigned int v516 = (__srce + v515 - 1) / v515 + v511;
        }
        unsigned int v1705 = v516;
      }
      (*(void (**)(std::string::size_type))(*(void *)v64 + 40))(v64);
    }
    while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v64 + 24))(v64, v65) & 1) == 0);
  }
  if (v65) {
    (*(void (**)(std::string::size_type))(*(void *)v65 + 8))(v65);
  }
  (*(void (**)(std::string::size_type))(*(void *)v64 + 8))(v64);
  if (v63) {
    (*(void (**)(void *))(*(void *)v63 + 8))(v63);
  }
  uint64_t v66 = (uint64_t)v1824;
  if (v62) {
    (*(void (**)(std::string::size_type))(*(void *)v62 + 8))(v62);
  }
  if ((((uint64_t (*)(uint64_t (***)(void), void))(*v1824)[20])(v1824, 0) & 1) == 0)
  {
    ((void (*)(std::string *__return_ptr, uint64_t (***)(void), void))(*v1824)[16])(&__dst, v1824, 0);
    ((void (*)(void **__return_ptr, uint64_t (***)(void), void))(*v1824)[17])(&v1827, v1824, 0);
    std::string::size_type v517 = __dst.__r_.__value_.__r.__words[0];
    v518 = v1827;
    if (__dst.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                                + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v519 = __dst.__r_.__value_.__r.__words[0];
      if (v518)
      {
LABEL_854:
        (*(void (**)(std::string *__return_ptr, void *))(*(void *)v518 + 16))(&__dst, v518);
        std::string::size_type v520 = __dst.__r_.__value_.__r.__words[0];
LABEL_2634:
        while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v519 + 24))(v519, v520) & 1) == 0)
        {
          __dst.__r_.__value_.__r.__words[0] = 0;
          __dst.__r_.__value_.__r.__words[0] = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v519 + 32))(v519);
          sub_1CC782500(a6, &__dst);
          (*(void (**)(std::string::size_type))(*(void *)v519 + 40))(v519);
        }
        if (v520) {
          (*(void (**)(std::string::size_type))(*(void *)v520 + 8))(v520);
        }
        (*(void (**)(std::string::size_type))(*(void *)v519 + 8))(v519);
        if (v518) {
          (*(void (**)(void *))(*(void *)v518 + 8))(v518);
        }
        uint64_t v66 = (uint64_t)v1824;
        if (v517) {
          (*(void (**)(std::string::size_type))(*(void *)v517 + 8))(v517);
        }
        goto LABEL_134;
      }
    }
    else
    {
      std::string::size_type v519 = 0;
      if (v1827) {
        goto LABEL_854;
      }
    }
    std::string::size_type v520 = 0;
    goto LABEL_2634;
  }
LABEL_134:
  if (v54 <= v1705) {
    unsigned int v67 = v1705;
  }
  else {
    unsigned int v67 = v54;
  }
  int v68 = sub_1CC77FE7C(1, v66);
  if (v68 == -1) {
    int v69 = 0;
  }
  else {
    int v69 = v68;
  }
  int v1761 = v69;
  uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 336))(v66);
  unsigned int v1711 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v70 + 24))(v70, 1);
  unsigned int v1703 = sub_1CC782620(1, v66);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v66 + 160))(v66, 1))
  {
    uint64_t v71 = 0;
    int v72 = 0;
    goto LABEL_153;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v66 + 128))(&__dst, v66, 1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v66 + 136))(&v1827, v66, 1);
  uint64_t v73 = v1827;
  std::string::size_type v1740 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    std::string::size_type v74 = __dst.__r_.__value_.__r.__words[0];
    if (v73)
    {
LABEL_144:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v73 + 16))(&__dst, v73);
      std::string::size_type v75 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_145;
    }
  }
  else
  {
    std::string::size_type v74 = 0;
    if (v1827) {
      goto LABEL_144;
    }
  }
  std::string::size_type v75 = 0;
LABEL_145:
  v1722 = v73;
  unsigned int v1743 = v67;
  uint64_t v71 = 0;
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v74 + 24))(v74, v75) & 1) == 0)
  {
    uint64_t v238 = 0;
    uint64_t v239 = 0;
    std::string::size_type v1771 = v74;
    std::string::size_type v1748 = v75;
    while (1)
    {
      v1827 = 0;
      v1827 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(void *)v74 + 32))(v74);
      uint64_t v240 = sub_1CC782500(a6, &v1827);
      if (!llvm::Value::getMetadata((uint64_t)v1827, "agx.ts.dma", 0xAuLL))
      {
        uint64_t v241 = *((void *)v1827 + 3);
        if (*(unsigned char *)(v241 + 8) == 17)
        {
          uint64_t v242 = *(void *)(v240 - 8 * *(unsigned int *)(v240 + 8) + 8);
          int v243 = v1824;
          if (*(unsigned char *)v242 == 1 && *(unsigned char *)(*(void *)(v242 + 128) + 16) == 16) {
            unsigned int v244 = 1;
          }
          else {
            unsigned int v244 = *(_DWORD *)(v241 + 32);
          }
        }
        else
        {
          unsigned int v244 = 1;
          int v243 = v1824;
        }
        uint64_t v245 = ((uint64_t (*)(uint64_t (***)(void)))(*v243)[50])(v243);
        if (v244) {
          break;
        }
      }
      int v72 = v238;
LABEL_413:
      std::string::size_type v74 = v1771;
      (*(void (**)(std::string::size_type))(*(void *)v1771 + 40))(v1771);
      std::string::size_type v75 = v1748;
      uint64_t v238 = v72;
      if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v74 + 24))(v74, v1748))goto LABEL_147; {
    }
      }
    uint64_t v246 = 0;
    unint64_t v247 = __ROR8__(v245, 32);
    v1799 = (void *)HIDWORD(v247);
    uint64_t v1807 = v240;
    uint64_t v1784 = v244;
    unsigned int v1791 = v247 / v244 / v1711;
    while (1)
    {
      __srcd = v239;
      v1767 = v71;
      *((unsigned char *)a2 + 70) = 1;
      int v249 = a2[5];
      __int16 v248 = a2[6];
      char v250 = a2[4];
      int v251 = v1799 + v1791 * v246;
      int v252 = v251 - v1761;
      if (v251 == v1761 && *((unsigned char *)a2 + 80) == 0) {
        goto LABEL_441;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      unint64_t v254 = ((_BYTE)v248 - ((_BYTE)v250 + (_BYTE)v249)) & 3;
      char v255 = (uint64_t *)a2[7];
      if ((char *)v248 - (char *)v255 < v254) {
        break;
      }
      uint64_t v256 = (uint64_t **)((char *)v248 - v254);
      a2[6] = (uint64_t **)((char *)v248 - v254);
      if ((((_BYTE)v248 - ((_BYTE)v250 + (_BYTE)v249)) & 3) != 0) {
        goto LABEL_431;
      }
LABEL_434:
      if ((unint64_t)((char *)v256 - (char *)v255) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v256 = a2[6];
        char v255 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v256 - 1) = v252;
      int v258 = (uint64_t **)((char *)v256 - 4);
      a2[6] = v258;
      int v259 = a2[4];
      BOOL v260 = a2[5];
      if ((unint64_t)((char *)v258 - (char *)v255) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        char v255 = (uint64_t *)a2[7];
      }
      *char v255 = (v259 - v258 + v260) | 0x800000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v261 = *((unsigned __int16 *)a2 + 34);
      if (v261 <= 8) {
        LOWORD(v261) = 8;
      }
      *((_WORD *)a2 + 34) = v261;
LABEL_441:
      char v262 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void *))(*v1824)[23])(v1824, 16, v1827);
      if ((v262 & 1) != 0 || *((unsigned char *)a2 + 80))
      {
        unsigned int v263 = sub_1CBF2CB00((uint64_t)a2, v262);
        BOOL v264 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)a2[6] - (char *)v264) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          BOOL v264 = (uint64_t *)a2[7];
        }
        *BOOL v264 = v263 | 0xA00000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v265 = *((unsigned __int16 *)a2 + 34);
        if (v265 <= 0xA) {
          LOWORD(v265) = 10;
        }
        *((_WORD *)a2 + 34) = v265;
      }
      if (*(char *)(v1814 + 239) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1810;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v1814 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2")) {
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      long long v266 = (void *)(v1807 - 8 * *(unsigned int *)(v1807 + 8));
      uint64_t v267 = v266[1];
      if (*(unsigned char *)(*(void *)(*(void *)(*v266 + 128) + 24) + 8) == 17)
      {
        if (*(unsigned char *)v267 != 1 || (uint64_t v268 = *(void *)(v267 + 128), *(unsigned char *)(v268 + 16) != 16))
        {
          uint64_t v269 = (void *)(v266[v246 + 1] - 8 * *(unsigned int *)(v266[v246 + 1] + 8));
          uint64_t v270 = *(void *)(*v269 + 128);
          __int16 v271 = (void *)(v270 + 24);
          if (*(_DWORD *)(v270 + 32) >= 0x41u) {
            __int16 v271 = (void *)*v271;
          }
          uint64_t v272 = (void *)*v271;
          uint64_t v273 = v269[1];
          goto LABEL_466;
        }
      }
      else
      {
        uint64_t v268 = *(void *)(v267 + 128);
      }
      uint64_t v274 = (void *)(v268 + 24);
      if (*(_DWORD *)(v268 + 32) >= 0x41u) {
        uint64_t v274 = (void *)*v274;
      }
      uint64_t v272 = (void *)*v274;
      uint64_t v273 = v266[2];
LABEL_466:
      uint64_t v275 = *(void *)(v273 + 128);
      uint64_t v276 = (void *)(v275 + 24);
      if (*(_DWORD *)(v275 + 32) >= 0x41u) {
        uint64_t v276 = (void *)*v276;
      }
      int v277 = *(_DWORD *)v276;
      if (v272 | *((unsigned char *)a2 + 80))
      {
        if (!a2[9]) {
          a2[9] = (uint64_t **)1;
        }
        uint64_t v279 = a2[6];
        if (v279 == a2[7])
        {
          sub_1CBF2C904((uint64_t *)a2, 1uLL);
          uint64_t v279 = a2[6];
        }
        a2[6] = (uint64_t **)((char *)v279 - 1);
        *((unsigned char *)v279 - 1) = (_BYTE)v272;
        uint64_t v280 = a2[4];
        char v281 = a2[5];
        long long v283 = a2[6];
        long long v282 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)v283 - (char *)v282) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          long long v282 = (uint64_t *)a2[7];
        }
        *long long v282 = (v280 - v283 + v281) | 0x400000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v284 = *((unsigned __int16 *)a2 + 34);
        if (v284 <= 4) {
          LOWORD(v284) = 4;
        }
        *((_WORD *)a2 + 34) = v284;
        int v278 = *((unsigned __int8 *)a2 + 80);
      }
      else
      {
        int v278 = 0;
      }
      if (!(v277 | v278)) {
        goto LABEL_494;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      unint64_t v286 = a2[6];
      uint64_t v285 = (uint64_t *)a2[7];
      unint64_t v287 = ((_BYTE)v286 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v286 - (char *)v285 < v287)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v286 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        a2[6] = (uint64_t **)((char *)a2[6] - v287);
LABEL_484:
        uint64_t v289 = 0;
        do
          *((unsigned char *)a2[6] + v289++) = 0;
        while (v287 != v289);
        uint64_t v288 = a2[6];
        uint64_t v285 = (uint64_t *)a2[7];
        goto LABEL_487;
      }
      uint64_t v288 = (uint64_t **)((char *)v286 - v287);
      a2[6] = (uint64_t **)((char *)v286 - v287);
      if (v287) {
        goto LABEL_484;
      }
LABEL_487:
      if ((unint64_t)((char *)v288 - (char *)v285) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v288 = a2[6];
        uint64_t v285 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v288 - 1) = v277;
      int v290 = (uint64_t **)((char *)v288 - 4);
      a2[6] = v290;
      int v291 = a2[4];
      uint64_t v292 = a2[5];
      if ((unint64_t)((char *)v290 - (char *)v285) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        uint64_t v285 = (uint64_t *)a2[7];
      }
      *uint64_t v285 = (v291 - v290 + v292) | 0x600000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v293 = *((unsigned __int16 *)a2 + 34);
      if (v293 <= 6) {
        LOWORD(v293) = 6;
      }
      *((_WORD *)a2 + 34) = v293;
LABEL_494:
      int v294 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v250 - (unsigned __int16)v248 + (unsigned __int16)v249);
      int v295 = v294;
      uint64_t v239 = __srcd;
      if (v238 >= __srcd)
      {
        uint64_t v296 = (v238 - v1767) >> 2;
        unint64_t v297 = v296 + 1;
        if ((unint64_t)(v296 + 1) >> 62) {
          goto LABEL_2629;
        }
        if ((__srcd - v1767) >> 1 > v297) {
          unint64_t v297 = (__srcd - v1767) >> 1;
        }
        if ((unint64_t)(__srcd - v1767) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v298 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v298 = v297;
        }
        if (v298)
        {
          if (v298 >> 62) {
            goto LABEL_2630;
          }
          uint64_t v299 = (char *)operator new(4 * v298);
        }
        else
        {
          uint64_t v299 = 0;
        }
        uint64_t v300 = &v299[4 * v296];
        *(_DWORD *)uint64_t v300 = v295;
        int v72 = v300 + 4;
        while (v238 != v1767)
        {
          int v301 = *((_DWORD *)v238 - 1);
          v238 -= 4;
          *((_DWORD *)v300 - 1) = v301;
          v300 -= 4;
        }
        uint64_t v239 = &v299[4 * v298];
        if (v1767) {
          operator delete(v1767);
        }
        uint64_t v71 = v300;
      }
      else
      {
        *(_DWORD *)uint64_t v238 = v294;
        int v72 = v238 + 4;
        uint64_t v71 = v1767;
      }
      ++v246;
      uint64_t v238 = v72;
      if (v246 == v1784) {
        goto LABEL_413;
      }
    }
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v248 - ((_BYTE)v250 + (_BYTE)v249)) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v254);
LABEL_431:
    uint64_t v257 = 0;
    do
      *((unsigned char *)a2[6] + v257++) = 0;
    while (v254 != v257);
    uint64_t v256 = a2[6];
    char v255 = (uint64_t *)a2[7];
    goto LABEL_434;
  }
  int v72 = 0;
LABEL_147:
  if (v75) {
    (*(void (**)(std::string::size_type))(*(void *)v75 + 8))(v75);
  }
  (*(void (**)(std::string::size_type))(*(void *)v74 + 8))(v74);
  uint64_t v66 = (uint64_t)v1824;
  unsigned int v67 = v1743;
  if (v1722) {
    (*(void (**)(void *))(*(void *)v1722 + 8))(v1722);
  }
  if (v1740) {
    (*(void (**)(std::string::size_type))(*(void *)v1740 + 8))(v1740);
  }
LABEL_153:
  unsigned int v76 = v1703;
  if (v67 > v1703) {
    unsigned int v76 = v67;
  }
  unsigned int v1694 = v76;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v66 + 128))(&__dst, v66, 5);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v66 + 136))(&v1827, v66, 5);
  std::string::size_type v77 = __dst.__r_.__value_.__r.__words[0];
  uint64_t v78 = v1827;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v79 = __dst.__r_.__value_.__r.__words[0];
    if (v78)
    {
LABEL_157:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v78 + 16))(&__dst, v78);
      std::string::size_type v80 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_158;
    }
  }
  else
  {
    std::string::size_type v79 = 0;
    if (v1827) {
      goto LABEL_157;
    }
  }
  std::string::size_type v80 = 0;
LABEL_158:
  v1765 = v71;
  v1693 = v72;
  unsigned int v81 = -1;
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v79 + 24))(v79, v80) & 1) == 0)
  {
    unsigned int v82 = (void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v79 + 32))(v79);
    uint64_t v83 = *v82;
    if ((((uint64_t (*)(uint64_t (***)(void), uint64_t, void))(*v1824)[23])(v1824, 15, *v82) & 1) == 0)
    {
      unsigned int v84 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[50])(v1824, v83);
      if (v81 >= v84) {
        unsigned int v81 = v84;
      }
    }
    (*(void (**)(std::string::size_type))(*(void *)v79 + 40))(v79);
  }
  if (v80) {
    (*(void (**)(std::string::size_type))(*(void *)v80 + 8))(v80);
  }
  (*(void (**)(std::string::size_type))(*(void *)v79 + 8))(v79);
  if (v78) {
    (*(void (**)(void *))(*(void *)v78 + 8))(v78);
  }
  unsigned int v85 = v1824;
  if (v77) {
    (*(void (**)(std::string::size_type))(*(void *)v77 + 8))(v77);
  }
  uint64_t v86 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[22])(v1824, 25);
  if (v86)
  {
    if (v86 == 1)
    {
      ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 25);
      uint64_t v645 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                          + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v646 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v646) {
        (*(void (**)(std::string::size_type))(*(void *)v646 + 8))(v646);
      }
      if (!v645) {
        goto LABEL_170;
      }
    }
    else
    {
      ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 25);
      uint64_t v1643 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v1644 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1644) {
        (*(void (**)(std::string::size_type))(*(void *)v1644 + 8))(v1644);
      }
      unsigned int v85 = v1824;
      if (!v1643) {
        goto LABEL_170;
      }
    }
    if ((((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[20])(v85, 15) & 1) == 0)
    {
      uint64_t v647 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[22])(v85, 25);
      if (v647)
      {
        if (v647 == 1)
        {
          ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 25);
          uint64_t v648 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 32))(__dst.__r_.__value_.__r.__words[0]);
          std::string::size_type v1634 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1634) {
            (*(void (**)(std::string::size_type))(*(void *)v1634 + 8))(v1634);
          }
        }
        else
        {
          ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 25);
          uint64_t v648 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 32))(__dst.__r_.__value_.__r.__words[0]);
          std::string::size_type v1658 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1658) {
            (*(void (**)(std::string::size_type))(*(void *)v1658 + 8))(v1658);
          }
          unsigned int v85 = v1824;
        }
      }
      else
      {
        uint64_t v648 = 0;
      }
      unsigned int v649 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[50])(v85, v648);
      if (v81 >= v649) {
        unsigned int v81 = v649;
      }
    }
  }
LABEL_170:
  if ((((uint64_t (*)(uint64_t (***)(void)))(*v85)[36])(v85) & 1) == 0)
  {
    ((void (*)(std::string *__return_ptr, uint64_t (***)(void)))(*v85)[34])(&__dst, v85);
    unsigned int v1640 = *(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                          + 32))(__dst.__r_.__value_.__r.__words[0])
                      + 8);
    if (v1640 < v81) {
      unsigned int v81 = v1640;
    }
    std::string::size_type v1641 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1641) {
      (*(void (**)(std::string::size_type))(*(void *)v1641 + 8))(v1641);
    }
    unsigned int v85 = v1824;
  }
  if (v81 == -1) {
    unsigned int v87 = 0;
  }
  else {
    unsigned int v87 = v81;
  }
  unsigned int v1804 = v87;
  uint64_t v88 = ((uint64_t (*)(uint64_t (***)(void)))(*v85)[42])(v85);
  unsigned int v1741 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v88 + 24))(v88, 5);
  uint64_t v89 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[22])(v85, 25);
  unsigned int v1723 = 0;
  if (v89)
  {
    if (v89 == 1)
    {
      ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 25);
      uint64_t v650 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                          + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v651 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v651) {
        (*(void (**)(std::string::size_type))(*(void *)v651 + 8))(v651);
      }
      if (!v650) {
        goto LABEL_1050;
      }
    }
    else
    {
      ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 25);
      uint64_t v1645 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v1646 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1646) {
        (*(void (**)(std::string::size_type))(*(void *)v1646 + 8))(v1646);
      }
      unsigned int v85 = v1824;
      if (!v1645) {
        goto LABEL_1050;
      }
    }
    if ((((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[20])(v85, 15) & 1) == 0)
    {
      uint64_t v1647 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[22])(v85, 25);
      if (v1647)
      {
        if (v1647 == 1)
        {
          ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 25);
          uint64_t v1648 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                               + 32))(__dst.__r_.__value_.__r.__words[0]);
          std::string::size_type v1649 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1649) {
            (*(void (**)(std::string::size_type))(*(void *)v1649 + 8))(v1649);
          }
        }
        else
        {
          ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 25);
          uint64_t v1648 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                               + 32))(__dst.__r_.__value_.__r.__words[0]);
          std::string::size_type v1659 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1659) {
            (*(void (**)(std::string::size_type))(*(void *)v1659 + 8))(v1659);
          }
          unsigned int v85 = v1824;
        }
      }
      else
      {
        uint64_t v1648 = 0;
      }
      unsigned int v1723 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v85)[50])(v85, v1648) + 2;
      goto LABEL_175;
    }
LABEL_1050:
    unsigned int v1723 = 0;
  }
LABEL_175:
  ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[16])(&__dst, v85, 5);
  ((void (*)(void **__return_ptr, uint64_t (***)(void), uint64_t))(*v85)[17])(&v1827, v85, 5);
  std::string::size_type v90 = __dst.__r_.__value_.__r.__words[0];
  uint64_t v91 = v1827;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v92 = __dst.__r_.__value_.__r.__words[0];
    if (v91)
    {
LABEL_177:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v91 + 16))(&__dst, v91);
      std::string::size_type v93 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_178;
    }
  }
  else
  {
    std::string::size_type v92 = 0;
    if (v1827) {
      goto LABEL_177;
    }
  }
  std::string::size_type v93 = 0;
LABEL_178:
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v92 + 24))(v92, v93) & 1) == 0)
  {
    unsigned int v94 = (void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v92 + 32))(v92);
    uint64_t v95 = *v94;
    if ((((uint64_t (*)(uint64_t (***)(void), uint64_t, void))(*v1824)[23])(v1824, 15, *v94) & 1) == 0)
    {
      unint64_t v96 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[50])(v1824, v95);
      int v97 = v96;
      uint64_t v99 = v98;
      unint64_t v100 = HIDWORD(v96);
      uint64_t v101 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
      unsigned int v102 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v101 + 24))(v101, v99);
      unsigned int v103 = v1723;
      if (v1723 <= (v100 + v102 - 1) / v102 + v97) {
        unsigned int v103 = (v100 + v102 - 1) / v102 + v97;
      }
      unsigned int v1723 = v103;
    }
    (*(void (**)(std::string::size_type))(*(void *)v92 + 40))(v92);
  }
  if (v93) {
    (*(void (**)(std::string::size_type))(*(void *)v93 + 8))(v93);
  }
  (*(void (**)(std::string::size_type))(*(void *)v92 + 8))(v92);
  if (v91) {
    (*(void (**)(void *))(*(void *)v91 + 8))(v91);
  }
  uint64_t v104 = (uint64_t)v1824;
  if (v90) {
    (*(void (**)(std::string::size_type))(*(void *)v90 + 8))(v90);
  }
  ((void (*)(void **__return_ptr, uint64_t (***)(void)))(*v1824)[34])(&v1827, v1824);
  ((void (*)(std::string::size_type *__return_ptr, uint64_t (***)(void)))(*v1824)[35])(&__dst.__r_.__value_.__l.__size_, v1824);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1827;
  sub_1CC006250((uint64_t *)&v1827, (uint64_t)&__dst);
  sub_1CC006250((uint64_t *)&v1825, (uint64_t)&__dst.__r_.__value_.__l.__size_);
  while (((*(uint64_t (**)(void *, uint64_t ***))(*(void *)v1827 + 24))(v1827, v1825) & 1) == 0)
  {
    uint64_t v105 = (*(uint64_t (**)(void *))(*(void *)v1827 + 32))(v1827);
    int v106 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void))(*v1824)[23])(v1824, 3, *(void *)v105);
    unsigned int v107 = *(_DWORD *)(v105 + 8) + 2;
    unsigned int v108 = v1723;
    if (v1723 > v107) {
      unsigned int v107 = v1723;
    }
    if (v106) {
      unsigned int v108 = v107;
    }
    unsigned int v1723 = v108;
    (*(void (**)(void *))(*(void *)v1827 + 40))(v1827);
  }
  uint64_t v109 = v1825;
  v1825 = 0;
  if (v109) {
    ((void (*)(uint64_t ***))(*v109)[1])(v109);
  }
  uint64_t v110 = v1827;
  v1827 = 0;
  if (v110) {
    (*(void (**)(void *))(*(void *)v110 + 8))(v110);
  }
  std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  __dst.__r_.__value_.__l.__size_ = 0;
  if (size) {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
  std::string::size_type v112 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v112) {
    (*(void (**)(std::string::size_type))(*(void *)v112 + 8))(v112);
  }
  if ((((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[20])(v1824, 5) & 1) == 0)
  {
    uint64_t v115 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[22])(v1824, 25);
    if (!v115)
    {
LABEL_208:
      uint64_t v116 = 0;
      uint64_t v117 = 0;
LABEL_209:
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v104 + 128))(&__dst, v104, 5);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v104 + 136))(&v1827, v104, 5);
      unsigned int v118 = v1827;
      std::string::size_type v1691 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
        std::string::size_type v119 = __dst.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type v119 = 0;
      }
      v1688 = v118;
      if (v118)
      {
        (*(void (**)(std::string *__return_ptr, void *))(*(void *)v118 + 16))(&__dst, v118);
        unsigned int v118 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      uint64_t v120 = v116;
      if ((*(uint64_t (**)(std::string::size_type, void *))(*(void *)v119 + 24))(v119, v118))
      {
        unint64_t v114 = v117;
        __srca = v117;
LABEL_617:
        if (v118) {
          (*(void (**)(void *))(*(void *)v118 + 8))(v118);
        }
        (*(void (**)(std::string::size_type))(*(void *)v119 + 8))(v119);
        uint64_t v113 = v120;
        if (v1688) {
          (*(void (**)(void *))(*(void *)v1688 + 8))(v1688);
        }
        if (v1691) {
          (*(void (**)(std::string::size_type))(*(void *)v1691 + 8))(v1691);
        }
        goto LABEL_623;
      }
      __srca = v117;
      v1744 = v118;
      std::string::size_type v1749 = v119;
      while (1)
      {
        v1827 = 0;
        v1827 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(void *)v119 + 32))(v119);
        uint64_t v302 = sub_1CC782500(a6, &v1827);
        uint64_t v303 = (unsigned int *)v302;
        uint64_t v304 = v1827;
        uint64_t v305 = *((void *)v1827 + 3);
        if (*(unsigned char *)(v305 + 8) != 17
          || (uint64_t v306 = *(void *)(v302 - 8 * *(unsigned int *)(v302 + 8) + 8), *(unsigned char *)v306 == 1)
          && *(unsigned char *)(*(void *)(v306 + 128) + 16) == 16)
        {
          unsigned int v307 = 1;
        }
        else
        {
          unsigned int v307 = *(_DWORD *)(v305 + 32);
        }
        uint64_t v308 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v104 + 400))(v104, v1827);
        LODWORD(v1800) = v308;
        if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v104 + 184))(v104, 15, v304))
        {
          uint64_t v309 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 336))(v104);
          unsigned int v310 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v309 + 24))(v309, 5);
          v1800 = (void *)((((**(unsigned int (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v104)(v104, 8, 0, 1, 3)+ v310 * v1804+ 3) & 0x1FFFFFFFCuLL)/ v310+ v308);
        }
        if (v307) {
          break;
        }
        unint64_t v114 = v117;
        unint64_t v312 = v120;
LABEL_616:
        uint64_t v120 = v312;
        std::string::size_type v119 = v1749;
        (*(void (**)(std::string::size_type))(*(void *)v1749 + 40))(v1749);
        unsigned int v118 = v1744;
        uint64_t v117 = v114;
        uint64_t v104 = (uint64_t)v1824;
        if ((*(uint64_t (**)(std::string::size_type, void *))(*(void *)v119 + 24))(v119, v1744)) {
          goto LABEL_617;
        }
      }
      uint64_t v311 = 0;
      uint64_t v1772 = v307;
      unsigned int v1785 = HIDWORD(v308) / v307 / v1741;
      unint64_t v312 = v120;
      v1792 = v303;
      while (1)
      {
        *((unsigned char *)a2 + 70) = 1;
        uint64_t v313 = a2[5];
        uint64_t v314 = a2[6];
        uint64_t v315 = a2[4];
        int v316 = v1800 + v1785 * v311;
        int v317 = v316 - v1804;
        if (v316 == v1804 && *((unsigned char *)a2 + 80) == 0) {
          goto LABEL_544;
        }
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        uint64_t v319 = v312;
        unint64_t v320 = ((_BYTE)v314 - ((_BYTE)v315 + (_BYTE)v313)) & 3;
        uint64_t v321 = (uint64_t *)a2[7];
        if ((char *)v314 - (char *)v321 < v320) {
          break;
        }
        uint64_t v322 = (uint64_t **)((char *)v314 - v320);
        a2[6] = (uint64_t **)((char *)v314 - v320);
        if ((((_BYTE)v314 - ((_BYTE)v315 + (_BYTE)v313)) & 3) != 0) {
          goto LABEL_534;
        }
LABEL_537:
        if ((unint64_t)((char *)v322 - (char *)v321) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          uint64_t v322 = a2[6];
          uint64_t v321 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v322 - 1) = v317;
        uint64_t v324 = (uint64_t **)((char *)v322 - 4);
        a2[6] = v324;
        unint64_t v325 = a2[4];
        __int16 v326 = a2[5];
        if ((unint64_t)((char *)v324 - (char *)v321) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v321 = (uint64_t *)a2[7];
        }
        *uint64_t v321 = (v325 - v324 + v326) | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v327 = *((unsigned __int16 *)a2 + 34);
        if (v327 <= 8) {
          LOWORD(v327) = 8;
        }
        *((_WORD *)a2 + 34) = v327;
        unint64_t v312 = v319;
        uint64_t v303 = v1792;
LABEL_544:
        char v328 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void *))(*v1824)[23])(v1824, 16, v1827);
        if ((v328 & 1) != 0 || *((unsigned char *)a2 + 80))
        {
          unsigned int v329 = sub_1CBF2CB00((uint64_t)a2, v328);
          uint64_t v330 = (uint64_t *)a2[7];
          if ((unint64_t)((char *)a2[6] - (char *)v330) <= 7)
          {
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            uint64_t v330 = (uint64_t *)a2[7];
          }
          uint64_t *v330 = v329 | 0xA00000000;
          ++a2[7];
          ++*((_DWORD *)a2 + 16);
          unsigned int v331 = *((unsigned __int16 *)a2 + 34);
          if (v331 <= 0xA) {
            LOWORD(v331) = 10;
          }
          *((_WORD *)a2 + 34) = v331;
        }
        if (*(char *)(v1814 + 239) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
        }
        else
        {
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1810;
          __dst.__r_.__value_.__r.__words[2] = *(void *)(v1814 + 232);
        }
        if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2")) {
          std::string::compare(&__dst, 0, 4uLL, "agx3");
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        uint64_t v332 = &v303[-2 * v303[2]];
        uint64_t v333 = *((void *)v332 + 1);
        if (*(unsigned char *)(*(void *)(*(void *)(*(void *)v332 + 128) + 24) + 8) == 17)
        {
          if (*(unsigned char *)v333 != 1 || (uint64_t v334 = *(void *)(v333 + 128), *(unsigned char *)(v334 + 16) != 16))
          {
            uint64_t v335 = (void *)(*(void *)&v332[2 * v311 + 2]
                            - 8 * *(unsigned int *)(*(void *)&v332[2 * v311 + 2] + 8));
            uint64_t v336 = *(void *)(*v335 + 128);
            int v337 = (void *)(v336 + 24);
            if (*(_DWORD *)(v336 + 32) >= 0x41u) {
              int v337 = (void *)*v337;
            }
            uint64_t v338 = (void *)*v337;
            uint64_t v339 = v335[1];
            goto LABEL_569;
          }
        }
        else
        {
          uint64_t v334 = *(void *)(v333 + 128);
        }
        uint64_t v340 = (void *)(v334 + 24);
        if (*(_DWORD *)(v334 + 32) >= 0x41u) {
          uint64_t v340 = (void *)*v340;
        }
        uint64_t v338 = (void *)*v340;
        uint64_t v339 = *((void *)v332 + 2);
LABEL_569:
        uint64_t v341 = *(void *)(v339 + 128);
        unint64_t v342 = (void *)(v341 + 24);
        if (*(_DWORD *)(v341 + 32) >= 0x41u) {
          unint64_t v342 = (void *)*v342;
        }
        int v343 = *(_DWORD *)v342;
        if (v338 | *((unsigned char *)a2 + 80))
        {
          unsigned int v345 = sub_1CBF2CB00((uint64_t)a2, (char)v338);
          uint64_t v346 = (uint64_t *)a2[7];
          if ((unint64_t)((char *)a2[6] - (char *)v346) <= 7)
          {
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            uint64_t v346 = (uint64_t *)a2[7];
          }
          *uint64_t v346 = v345 | 0x400000000;
          ++a2[7];
          ++*((_DWORD *)a2 + 16);
          unsigned int v347 = *((unsigned __int16 *)a2 + 34);
          if (v347 <= 4) {
            LOWORD(v347) = 4;
          }
          *((_WORD *)a2 + 34) = v347;
          int v344 = *((unsigned __int8 *)a2 + 80);
        }
        else
        {
          int v344 = 0;
        }
        if (!(v343 | v344)) {
          goto LABEL_593;
        }
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        uint64_t v348 = v312;
        int v350 = a2[6];
        uint64_t v349 = (uint64_t *)a2[7];
        unint64_t v351 = ((_BYTE)v350 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
        if ((char *)v350 - (char *)v349 < v351)
        {
          sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v350 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
          a2[6] = (uint64_t **)((char *)a2[6] - v351);
LABEL_583:
          uint64_t v353 = 0;
          do
            *((unsigned char *)a2[6] + v353++) = 0;
          while (v351 != v353);
          uint64_t v352 = a2[6];
          uint64_t v349 = (uint64_t *)a2[7];
          goto LABEL_586;
        }
        uint64_t v352 = (uint64_t **)((char *)v350 - v351);
        a2[6] = (uint64_t **)((char *)v350 - v351);
        if (v351) {
          goto LABEL_583;
        }
LABEL_586:
        if ((unint64_t)((char *)v352 - (char *)v349) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          uint64_t v352 = a2[6];
          uint64_t v349 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v352 - 1) = v343;
        uint64_t v354 = (uint64_t **)((char *)v352 - 4);
        a2[6] = v354;
        uint64_t v355 = a2[4];
        unint64_t v356 = a2[5];
        if ((unint64_t)((char *)v354 - (char *)v349) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v349 = (uint64_t *)a2[7];
        }
        uint64_t *v349 = (v355 - v354 + v356) | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v357 = *((unsigned __int16 *)a2 + 34);
        if (v357 <= 6) {
          LOWORD(v357) = 6;
        }
        *((_WORD *)a2 + 34) = v357;
        unint64_t v312 = v348;
        uint64_t v303 = v1792;
LABEL_593:
        int v358 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v315 - (unsigned __int16)v314 + (unsigned __int16)v313);
        int v359 = v358;
        if (v117 >= __srca)
        {
          uint64_t v360 = (v117 - v312) >> 2;
          unint64_t v361 = v360 + 1;
          if ((unint64_t)(v360 + 1) >> 62) {
            goto LABEL_2629;
          }
          if ((__srca - v312) >> 1 > v361) {
            unint64_t v361 = (__srca - v312) >> 1;
          }
          if ((unint64_t)(__srca - v312) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v362 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v362 = v361;
          }
          if (v362)
          {
            if (v362 >> 62) {
              goto LABEL_2630;
            }
            uint64_t v363 = (char *)operator new(4 * v362);
          }
          else
          {
            uint64_t v363 = 0;
          }
          uint64_t v364 = &v363[4 * v360];
          *(_DWORD *)uint64_t v364 = v359;
          unint64_t v114 = v364 + 4;
          while (v117 != v312)
          {
            int v365 = *((_DWORD *)v117 - 1);
            v117 -= 4;
            *((_DWORD *)v364 - 1) = v365;
            v364 -= 4;
          }
          __srca = &v363[4 * v362];
          if (v312) {
            operator delete(v312);
          }
          unint64_t v312 = v364;
        }
        else
        {
          *(_DWORD *)uint64_t v117 = v358;
          unint64_t v114 = v117 + 4;
        }
        ++v311;
        uint64_t v117 = v114;
        if (v311 == v1772) {
          goto LABEL_616;
        }
      }
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v314 - ((_BYTE)v315 + (_BYTE)v313)) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v320);
LABEL_534:
      uint64_t v323 = 0;
      do
        *((unsigned char *)a2[6] + v323++) = 0;
      while (v320 != v323);
      uint64_t v322 = a2[6];
      uint64_t v321 = (uint64_t *)a2[7];
      goto LABEL_537;
    }
    if (v115 == 1)
    {
      ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 25);
      uint64_t v1483 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v1484 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1484) {
        (*(void (**)(std::string::size_type))(*(void *)v1484 + 8))(v1484);
      }
      if (!v1483) {
        goto LABEL_208;
      }
    }
    else
    {
      ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 25);
      uint64_t v1651 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v1652 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1652) {
        (*(void (**)(std::string::size_type))(*(void *)v1652 + 8))(v1652);
      }
      uint64_t v104 = (uint64_t)v1824;
      if (!v1651) {
        goto LABEL_208;
      }
    }
    char v1485 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v104 + 160))(v104, 15);
    uint64_t v1486 = v104;
    if (v1485)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      goto LABEL_209;
    }
    *((unsigned char *)a2 + 70) = 1;
    int v1487 = *((_DWORD *)a2 + 8);
    int v1488 = *((_DWORD *)a2 + 12);
    int v1489 = *((_DWORD *)a2 + 10);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1486 + 176))(v1486, 25))
    {
      ((void (*)(std::string *__return_ptr))(*v1824)[16])(&__dst);
      uint64_t v1490 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      std::string::size_type v1632 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1632) {
        (*(void (**)(std::string::size_type))(*(void *)v1632 + 8))(v1632);
      }
    }
    else
    {
      uint64_t v1490 = 0;
    }
    __int16 v1491 = v1487 - v1488;
    int v1492 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[50])(v1824, v1490);
    int v1493 = v1492 - v1804;
    if (v1492 == v1804 && !*((unsigned char *)a2 + 80))
    {
LABEL_2365:
      __int16 v1502 = v1491 + v1489;
      unsigned int v1503 = sub_1CBF2CB00((uint64_t)a2, 64);
      v1504 = (uint64_t *)a2[7];
      if ((unint64_t)((char *)a2[6] - (char *)v1504) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        v1504 = (uint64_t *)a2[7];
      }
      uint64_t *v1504 = v1503 | 0x400000000;
      v1505 = (uint64_t *)(a2[7] + 1);
      a2[7] = (uint64_t **)v1505;
      ++*((_DWORD *)a2 + 16);
      unsigned int v1506 = *((unsigned __int16 *)a2 + 34);
      if (v1506 <= 4) {
        LOWORD(v1506) = 4;
      }
      *((_WORD *)a2 + 34) = v1506;
      uint64_t v104 = (uint64_t)v1824;
      if (!*((unsigned char *)a2 + 80)) {
        goto LABEL_2370;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      v1660 = a2[6];
      unint64_t v1661 = ((_BYTE)v1660 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v1660 - (char *)v1505 < v1661)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1660 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        a2[6] = (uint64_t **)((char *)a2[6] - v1661);
      }
      else
      {
        v1662 = (uint64_t **)((char *)v1660 - v1661);
        a2[6] = v1662;
        if (!v1661)
        {
LABEL_2752:
          if ((unint64_t)((char *)v1662 - (char *)v1505) <= 3)
          {
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            v1662 = a2[6];
            v1505 = (uint64_t *)a2[7];
          }
          *((_DWORD *)v1662 - 1) = 0;
          v1664 = (uint64_t **)((char *)v1662 - 4);
          a2[6] = v1664;
          uint64_t v1665 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1664;
          if ((unint64_t)((char *)v1664 - (char *)v1505) <= 7)
          {
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            v1505 = (uint64_t *)a2[7];
          }
          uint64_t *v1505 = v1665 | 0x600000000;
          ++a2[7];
          ++*((_DWORD *)a2 + 16);
          unsigned int v1666 = *((unsigned __int16 *)a2 + 34);
          if (v1666 <= 6) {
            LOWORD(v1666) = 6;
          }
          *((_WORD *)a2 + 34) = v1666;
          uint64_t v104 = (uint64_t)v1824;
LABEL_2370:
          int v1507 = sub_1CBF2CB78((uint64_t)a2, v1502);
          uint64_t v116 = (char *)operator new(4uLL);
          *(_DWORD *)uint64_t v116 = v1507;
          uint64_t v117 = v116 + 4;
          goto LABEL_209;
        }
      }
      uint64_t v1663 = 0;
      do
        *((unsigned char *)a2[6] + v1663++) = 0;
      while (v1661 != v1663);
      v1662 = a2[6];
      v1505 = (uint64_t *)a2[7];
      goto LABEL_2752;
    }
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1495 = a2[6];
    v1494 = (uint64_t *)a2[7];
    unint64_t v1496 = ((_BYTE)v1495 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1495 - (char *)v1494 < v1496)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1495 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v1496);
    }
    else
    {
      v1497 = (uint64_t **)((char *)v1495 - v1496);
      a2[6] = v1497;
      if (!v1496)
      {
LABEL_2358:
        if ((unint64_t)((char *)v1497 - (char *)v1494) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v1497 = a2[6];
          v1494 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1497 - 1) = v1493;
        v1499 = (uint64_t **)((char *)v1497 - 4);
        a2[6] = v1499;
        uint64_t v1500 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1499;
        if ((unint64_t)((char *)v1499 - (char *)v1494) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1494 = (uint64_t *)a2[7];
        }
        uint64_t *v1494 = v1500 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1501 = *((unsigned __int16 *)a2 + 34);
        if (v1501 <= 8) {
          LOWORD(v1501) = 8;
        }
        *((_WORD *)a2 + 34) = v1501;
        goto LABEL_2365;
      }
    }
    uint64_t v1498 = 0;
    do
      *((unsigned char *)a2[6] + v1498++) = 0;
    while (v1496 != v1498);
    v1497 = a2[6];
    v1494 = (uint64_t *)a2[7];
    goto LABEL_2358;
  }
  uint64_t v113 = 0;
  unint64_t v114 = 0;
  __srca = 0;
LABEL_623:
  uint64_t v366 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 336))(v104);
  uint64_t v367 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v366 + 24))(v366, 6);
  int v1692 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v104 + 480))(v104, 6, v367, v367);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v104 + 272))(&v1827, v104);
  (*(void (**)(uint64_t ****__return_ptr, uint64_t))(*(void *)v104 + 280))(&v1825, v104);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1827;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v1825;
  sub_1CC006250((uint64_t *)&v1827, (uint64_t)&__dst);
  sub_1CC006250((uint64_t *)&v1825, (uint64_t)&__dst.__r_.__value_.__l.__size_);
  while (((*(uint64_t (**)(void *, uint64_t ***))(*(void *)v1827 + 24))(v1827, v1825) & 1) == 0)
  {
    uint64_t v368 = (*(uint64_t (**)(void *))(*(void *)v1827 + 32))(v1827);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v104 + 184))(v104, 3, *(void *)v368))goto LABEL_736; {
    v1801 = v113;
    }
    *((unsigned char *)a2 + 70) = 1;
    uint64_t v369 = a2[5];
    uint64_t v370 = a2[6];
    int v371 = a2[4];
    int v372 = *(_DWORD *)(v368 + 8);
    int v373 = v372 - v1804;
    if (v372 != v1804 || *((unsigned char *)a2 + 80) != 0)
    {
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      unint64_t v375 = ((_BYTE)v370 - ((_BYTE)v371 + (_BYTE)v369)) & 3;
      unint64_t v376 = (uint64_t *)a2[7];
      if ((char *)v370 - (char *)v376 >= v375)
      {
        int v377 = (uint64_t **)((char *)v370 - v375);
        a2[6] = (uint64_t **)((char *)v370 - v375);
        if ((((_BYTE)v370 - ((_BYTE)v371 + (_BYTE)v369)) & 3) != 0)
        {
LABEL_634:
          uint64_t v378 = 0;
          do
            *((unsigned char *)a2[6] + v378++) = 0;
          while (v375 != v378);
          int v377 = a2[6];
          unint64_t v376 = (uint64_t *)a2[7];
        }
        uint64_t v379 = v114;
        if ((unint64_t)((char *)v377 - (char *)v376) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          int v377 = a2[6];
          unint64_t v376 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v377 - 1) = v373;
        uint64_t v380 = (uint64_t **)((char *)v377 - 4);
        a2[6] = v380;
        uint64_t v381 = a2[4];
        uint64_t v382 = a2[5];
        if ((unint64_t)((char *)v380 - (char *)v376) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unint64_t v376 = (uint64_t *)a2[7];
        }
        *unint64_t v376 = (v381 - v380 + v382) | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v383 = *((unsigned __int16 *)a2 + 34);
        if (v383 <= 8) {
          LOWORD(v383) = 8;
        }
        *((_WORD *)a2 + 34) = v383;
        unint64_t v114 = v379;
        goto LABEL_644;
      }
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v370 - ((_BYTE)v371 + (_BYTE)v369)) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v375);
      goto LABEL_634;
    }
LABEL_644:
    uint64_t v384 = v114;
    unsigned int v385 = sub_1CBF2CB00((uint64_t)a2, 110);
    uint64_t v386 = (uint64_t *)a2[7];
    if ((unint64_t)((char *)a2[6] - (char *)v386) <= 7)
    {
      sub_1CBF2C904((uint64_t *)a2, 8uLL);
      uint64_t v386 = (uint64_t *)a2[7];
    }
    *uint64_t v386 = v385 | 0x400000000;
    uint64_t v387 = (uint64_t *)(a2[7] + 1);
    a2[7] = (uint64_t **)v387;
    ++*((_DWORD *)a2 + 16);
    unsigned int v388 = *((unsigned __int16 *)a2 + 34);
    if (v388 <= 4) {
      LOWORD(v388) = 4;
    }
    *((_WORD *)a2 + 34) = v388;
    int v389 = *(_DWORD *)(v368 + 12);
    if (v389 || *((unsigned char *)a2 + 80))
    {
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      int v390 = a2[6];
      unint64_t v391 = ((_BYTE)v390 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v390 - (char *)v387 >= v391)
      {
        uint64_t v392 = (uint64_t **)((char *)v390 - v391);
        a2[6] = (uint64_t **)((char *)v390 - v391);
        if (v391)
        {
LABEL_654:
          uint64_t v393 = 0;
          do
            *((unsigned char *)a2[6] + v393++) = 0;
          while (v391 != v393);
          uint64_t v392 = a2[6];
          uint64_t v387 = (uint64_t *)a2[7];
        }
        if ((unint64_t)((char *)v392 - (char *)v387) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          uint64_t v392 = a2[6];
          uint64_t v387 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v392 - 1) = v389;
        uint64_t v394 = (uint64_t **)((char *)v392 - 4);
        a2[6] = v394;
        unint64_t v395 = a2[4];
        long long v396 = a2[5];
        if ((unint64_t)((char *)v394 - (char *)v387) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v387 = (uint64_t *)a2[7];
        }
        *uint64_t v387 = (v395 - v394 + v396) | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v397 = *((unsigned __int16 *)a2 + 34);
        if (v397 <= 6) {
          LOWORD(v397) = 6;
        }
        *((_WORD *)a2 + 34) = v397;
        goto LABEL_664;
      }
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v390 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v391);
      goto LABEL_654;
    }
LABEL_664:
    int v398 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v371 - (unsigned __int16)v370 + (unsigned __int16)v369);
    int v399 = v398;
    if (v384 >= __srca)
    {
      uint64_t v401 = (v384 - v1801) >> 2;
      unint64_t v402 = v401 + 1;
      if ((unint64_t)(v401 + 1) >> 62) {
        goto LABEL_2629;
      }
      if ((__srca - v1801) >> 1 > v402) {
        unint64_t v402 = (__srca - v1801) >> 1;
      }
      if ((unint64_t)(__srca - v1801) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v403 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v403 = v402;
      }
      if (v403)
      {
        if (v403 >> 62) {
          goto LABEL_2630;
        }
        uint64_t v404 = (char *)operator new(4 * v403);
      }
      else
      {
        uint64_t v404 = 0;
      }
      unsigned int v405 = &v404[4 * v401];
      *(_DWORD *)unsigned int v405 = v399;
      uint64_t v400 = v405 + 4;
      while (v384 != v1801)
      {
        int v406 = *((_DWORD *)v384 - 1);
        v384 -= 4;
        *((_DWORD *)v405 - 1) = v406;
        v405 -= 4;
      }
      __srca = &v404[4 * v403];
      if (v1801) {
        operator delete(v1801);
      }
      v1801 = v405;
    }
    else
    {
      *(_DWORD *)uint64_t v384 = v398;
      uint64_t v400 = v384 + 4;
    }
    *((unsigned char *)a2 + 70) = 1;
    uint64_t v407 = a2[5];
    unint64_t v408 = a2[6];
    unint64_t v409 = a2[4];
    if (v373 != -1 || *((unsigned char *)a2 + 80))
    {
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      unint64_t v410 = ((_BYTE)v408 - ((_BYTE)v409 + (_BYTE)v407)) & 3;
      int v411 = (uint64_t *)a2[7];
      if ((char *)v408 - (char *)v411 >= v410)
      {
        BOOL v412 = (uint64_t **)((char *)v408 - v410);
        a2[6] = (uint64_t **)((char *)v408 - v410);
        if ((((_BYTE)v408 - ((_BYTE)v409 + (_BYTE)v407)) & 3) != 0)
        {
LABEL_688:
          uint64_t v413 = 0;
          do
            *((unsigned char *)a2[6] + v413++) = 0;
          while (v410 != v413);
          BOOL v412 = a2[6];
          int v411 = (uint64_t *)a2[7];
        }
        if ((unint64_t)((char *)v412 - (char *)v411) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          BOOL v412 = a2[6];
          int v411 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v412 - 1) = v373 + 1;
        v414 = (uint64_t **)((char *)v412 - 4);
        a2[6] = v414;
        long long v415 = a2[4];
        uint64_t v416 = a2[5];
        if ((unint64_t)((char *)v414 - (char *)v411) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          int v411 = (uint64_t *)a2[7];
        }
        *int v411 = (v415 - v414 + v416) | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v417 = *((unsigned __int16 *)a2 + 34);
        if (v417 <= 8) {
          LOWORD(v417) = 8;
        }
        *((_WORD *)a2 + 34) = v417;
        goto LABEL_698;
      }
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v408 - ((_BYTE)v409 + (_BYTE)v407)) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v410);
      goto LABEL_688;
    }
LABEL_698:
    unsigned int v418 = sub_1CBF2CB00((uint64_t)a2, 109);
    uint64_t v419 = (uint64_t *)a2[7];
    if ((unint64_t)((char *)a2[6] - (char *)v419) <= 7)
    {
      sub_1CBF2C904((uint64_t *)a2, 8uLL);
      uint64_t v419 = (uint64_t *)a2[7];
    }
    *uint64_t v419 = v418 | 0x400000000;
    v420 = (uint64_t *)(a2[7] + 1);
    a2[7] = (uint64_t **)v420;
    ++*((_DWORD *)a2 + 16);
    unsigned int v421 = *((unsigned __int16 *)a2 + 34);
    if (v421 <= 4) {
      LOWORD(v421) = 4;
    }
    *((_WORD *)a2 + 34) = v421;
    int v422 = *(_DWORD *)(v368 + 12);
    if (v422 || *((unsigned char *)a2 + 80))
    {
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      uint64_t v423 = a2[6];
      unint64_t v424 = ((_BYTE)v423 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v423 - (char *)v420 >= v424)
      {
        v425 = (uint64_t **)((char *)v423 - v424);
        a2[6] = (uint64_t **)((char *)v423 - v424);
        if (v424)
        {
LABEL_708:
          uint64_t v426 = 0;
          do
            *((unsigned char *)a2[6] + v426++) = 0;
          while (v424 != v426);
          v425 = a2[6];
          v420 = (uint64_t *)a2[7];
        }
        if ((unint64_t)((char *)v425 - (char *)v420) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v425 = a2[6];
          v420 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v425 - 1) = v422;
        unsigned int v427 = (uint64_t **)((char *)v425 - 4);
        a2[6] = v427;
        uint64_t v428 = a2[4];
        char v429 = a2[5];
        if ((unint64_t)((char *)v427 - (char *)v420) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v420 = (uint64_t *)a2[7];
        }
        uint64_t *v420 = (v428 - v427 + v429) | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v430 = *((unsigned __int16 *)a2 + 34);
        if (v430 <= 6) {
          LOWORD(v430) = 6;
        }
        *((_WORD *)a2 + 34) = v430;
        goto LABEL_718;
      }
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v423 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v424);
      goto LABEL_708;
    }
LABEL_718:
    int v431 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v409 - (unsigned __int16)v408 + (unsigned __int16)v407);
    int v432 = v431;
    if (v400 >= __srca)
    {
      uint64_t v433 = (v400 - v1801) >> 2;
      unint64_t v434 = v433 + 1;
      if ((unint64_t)(v433 + 1) >> 62) {
        goto LABEL_2629;
      }
      if ((__srca - v1801) >> 1 > v434) {
        unint64_t v434 = (__srca - v1801) >> 1;
      }
      if ((unint64_t)(__srca - v1801) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v435 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v435 = v434;
      }
      if (v435)
      {
        if (v435 >> 62) {
          goto LABEL_2630;
        }
        v436 = (char *)operator new(4 * v435);
      }
      else
      {
        v436 = 0;
      }
      int v437 = &v436[4 * v433];
      *(_DWORD *)int v437 = v432;
      unint64_t v114 = v437 + 4;
      while (v400 != v1801)
      {
        int v438 = *((_DWORD *)v400 - 1);
        v400 -= 4;
        *((_DWORD *)v437 - 1) = v438;
        v437 -= 4;
      }
      __srca = &v436[4 * v435];
      if (v1801) {
        operator delete(v1801);
      }
      uint64_t v113 = v437;
      uint64_t v104 = (uint64_t)v1824;
    }
    else
    {
      *(_DWORD *)uint64_t v400 = v431;
      unint64_t v114 = v400 + 4;
      uint64_t v104 = (uint64_t)v1824;
      uint64_t v113 = v1801;
    }
LABEL_736:
    (*(void (**)(void *))(*(void *)v1827 + 40))(v1827);
  }
  unsigned int v439 = v1825;
  v1825 = 0;
  if (v439) {
    ((void (*)(uint64_t ***))(*v439)[1])(v439);
  }
  v440 = v1827;
  v1827 = 0;
  if (v440) {
    (*(void (**)(void *))(*(void *)v440 + 8))(v440);
  }
  std::string::size_type v441 = __dst.__r_.__value_.__l.__size_;
  __dst.__r_.__value_.__l.__size_ = 0;
  if (v441) {
    (*(void (**)(std::string::size_type))(*(void *)v441 + 8))(v441);
  }
  std::string::size_type v442 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v442) {
    (*(void (**)(std::string::size_type))(*(void *)v442 + 8))(v442);
  }
  if (v1694 <= v1723) {
    v443 = (uint64_t **)v1723;
  }
  else {
    v443 = (uint64_t **)v1694;
  }
  v1827 = 0;
  *(void *)v1828 = 0;
  v1829 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(void *)*a1 + 912))(*a1))
  {
    unsigned int v444 = -1;
    if ((**(unsigned int (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v104)(v104, 2, 0xFFFFFFFFLL, 1, 1) != -1)unsigned int v444 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v104)(v104, 2, 0xFFFFFFFFLL, 1, 1); {
  }
    }
  else
  {
    unsigned int v444 = -1;
  }
  unsigned int v445 = sub_1CC77FE7C(2, v104);
  if (v445 < v444) {
    unsigned int v444 = v445;
  }
  unsigned int v446 = sub_1CC77FE7C(4, v104);
  if (v446 < v444) {
    unsigned int v444 = v446;
  }
  unsigned int v447 = sub_1CC77FE7C(2, v104);
  if (v447 == -1) {
    unsigned int v448 = 0;
  }
  else {
    unsigned int v448 = v447;
  }
  unsigned int v1695 = v448;
  if (v444 == -1) {
    unsigned int v449 = v448;
  }
  else {
    unsigned int v449 = v444;
  }
  uint64_t v450 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 336))(v104);
  unsigned int v1745 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v450 + 24))(v450, 2);
  unsigned int v1773 = sub_1CC7821B8(2, v104);
  unsigned int v1750 = v444;
  v1802 = v113;
  v1786 = v114;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v104 + 160))(v104, 2))
  {
    v1793 = 0;
    v451 = 0;
    goto LABEL_768;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v104 + 128))(&__dst, v104, 2);
  (*(void (**)(uint64_t ****__return_ptr, uint64_t, uint64_t))(*(void *)v104 + 136))(&v1825, v104, 2);
  v1421 = v1825;
  std::string::size_type v1680 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    std::string::size_type v1422 = __dst.__r_.__value_.__r.__words[0];
    if (v1421) {
      goto LABEL_2240;
    }
LABEL_2642:
    std::string::size_type v1423 = 0;
  }
  else
  {
    std::string::size_type v1422 = 0;
    if (!v1825) {
      goto LABEL_2642;
    }
LABEL_2240:
    ((void (*)(std::string *__return_ptr, uint64_t ***))(*v1421)[2])(&__dst, v1421);
    std::string::size_type v1423 = __dst.__r_.__value_.__r.__words[0];
  }
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v1422 + 24))(v1422, v1423) & 1) == 0)
  {
    v1793 = 0;
    v1424 = 0;
    v1689 = 0;
    v1670 = v1421;
    std::string::size_type v1672 = v1423;
    while (1)
    {
      v1825 = 0;
      v1825 = *(uint64_t ****)(*(uint64_t (**)(std::string::size_type))(*(void *)v1422 + 32))(v1422);
      uint64_t v1682 = sub_1CC782500(a6, &v1825);
      v1425 = v1825[3];
      if (*((unsigned char *)v1425 + 8) == 17)
      {
        uint64_t v1481 = *(void *)(v1682 - 8 * *(unsigned int *)(v1682 + 8) + 8);
        if (*(unsigned char *)v1481 == 1 && *(unsigned char *)(*(void *)(v1481 + 128) + 16) == 16) {
          unsigned int v1426 = 1;
        }
        else {
          unsigned int v1426 = *((_DWORD *)v1425 + 8);
        }
        v1421 = v1670;
      }
      else
      {
        unsigned int v1426 = 1;
      }
      uint64_t v1427 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[50])(v1824);
      if (v1426) {
        break;
      }
      v451 = v1424;
LABEL_2331:
      (*(void (**)(std::string::size_type))(*(void *)v1422 + 40))(v1422);
      std::string::size_type v1423 = v1672;
      v1424 = v451;
      if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v1422 + 24))(v1422, v1672))goto LABEL_2422; {
    }
      }
    uint64_t v1428 = 0;
    unint64_t v1429 = __ROR8__(v1427, 32);
    unint64_t v1678 = HIDWORD(v1429);
    uint64_t v1674 = v1426;
    unsigned int v1676 = v1429 / v1426 / v1745;
    while (2)
    {
      *((unsigned char *)a2 + 70) = 1;
      v1431 = a2[5];
      v1430 = a2[6];
      v1432 = a2[4];
      int v1433 = v1678 + v1676 * v1428;
      int v1434 = v1433 - v449;
      BOOL v1435 = v1433 == v449 && *((unsigned char *)a2 + 80) == 0;
      v1684 = a2[4];
      v1686 = a2[6];
      if (!v1435)
      {
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        unsigned int v1667 = v443;
        unint64_t v1473 = ((_BYTE)v1430 - ((_BYTE)v1432 + (_BYTE)v1431)) & 3;
        v1474 = (uint64_t *)a2[7];
        if ((char *)v1430 - (char *)v1474 < v1473)
        {
          sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1430 - ((_BYTE)v1432 + (_BYTE)v1431)) & 3);
          a2[6] = (uint64_t **)((char *)a2[6] - v1473);
          goto LABEL_2315;
        }
        v1475 = (uint64_t **)((char *)v1430 - v1473);
        a2[6] = (uint64_t **)((char *)v1430 - v1473);
        if ((((_BYTE)v1430 - ((_BYTE)v1432 + (_BYTE)v1431)) & 3) != 0)
        {
LABEL_2315:
          uint64_t v1476 = 0;
          do
            *((unsigned char *)a2[6] + v1476++) = 0;
          while (v1473 != v1476);
          v1475 = a2[6];
          v1474 = (uint64_t *)a2[7];
        }
        if ((unint64_t)((char *)v1475 - (char *)v1474) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v1475 = a2[6];
          v1474 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1475 - 1) = v1434;
        v1477 = (uint64_t **)((char *)v1475 - 4);
        a2[6] = v1477;
        v1478 = a2[4];
        v1479 = a2[5];
        if ((unint64_t)((char *)v1477 - (char *)v1474) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1474 = (uint64_t *)a2[7];
        }
        uint64_t *v1474 = (v1478 - v1477 + v1479) | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1480 = *((unsigned __int16 *)a2 + 34);
        if (v1480 <= 8) {
          LOWORD(v1480) = 8;
        }
        *((_WORD *)a2 + 34) = v1480;
        v443 = (uint64_t **)v1667;
      }
      ((void (*)(uint64_t (***)(void), uint64_t, uint64_t ***))(*v1824)[23])(v1824, 16, v1825);
      if (*(char *)(v1814 + 239) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1810;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v1814 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2")) {
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v1436 = (void *)(v1682 - 8 * *(unsigned int *)(v1682 + 8));
      uint64_t v1437 = v1436[1];
      if (*(unsigned char *)(*(void *)(*(void *)(*v1436 + 128) + 24) + 8) == 17)
      {
        if (*(unsigned char *)v1437 != 1 || (uint64_t v1438 = *(void *)(v1437 + 128), *(unsigned char *)(v1438 + 16) != 16))
        {
          v1439 = (void *)(v1436[v1428 + 1] - 8 * *(unsigned int *)(v1436[v1428 + 1] + 8));
          uint64_t v1440 = *(void *)(*v1439 + 128);
          v1441 = (void *)(v1440 + 24);
          if (*(_DWORD *)(v1440 + 32) >= 0x41u) {
            v1441 = (void *)*v1441;
          }
          v1442 = (void *)*v1441;
          uint64_t v1443 = v1439[1];
          goto LABEL_2269;
        }
      }
      else
      {
        uint64_t v1438 = *(void *)(v1437 + 128);
      }
      v1444 = (void *)(v1438 + 24);
      if (*(_DWORD *)(v1438 + 32) >= 0x41u) {
        v1444 = (void *)*v1444;
      }
      v1442 = (void *)*v1444;
      uint64_t v1443 = v1436[2];
LABEL_2269:
      uint64_t v1445 = *(void *)(v1443 + 128);
      v1446 = (void *)(v1445 + 24);
      if (*(_DWORD *)(v1445 + 32) >= 0x41u) {
        v1446 = (void *)*v1446;
      }
      int v1447 = *(_DWORD *)v1446;
      if (v1442 | *((unsigned char *)a2 + 80))
      {
        unsigned int v1448 = sub_1CBF2CB00((uint64_t)a2, (char)v1442);
        v1449 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)a2[6] - (char *)v1449) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1449 = (uint64_t *)a2[7];
        }
        uint64_t *v1449 = v1448 | 0x400000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1450 = *((unsigned __int16 *)a2 + 34);
        if (v1450 <= 4) {
          LOWORD(v1450) = 4;
        }
        *((_WORD *)a2 + 34) = v1450;
        int v1451 = *((unsigned __int8 *)a2 + 80);
      }
      else
      {
        int v1451 = 0;
      }
      __int16 v1453 = (__int16)v1684;
      __int16 v1452 = (__int16)v1686;
      if (v1447 | v1451)
      {
        __int16 v1669 = (__int16)v1431;
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        v1431 = v443;
        v1455 = a2[6];
        v1454 = (uint64_t *)a2[7];
        unint64_t v1456 = ((_BYTE)v1455 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
        if ((char *)v1455 - (char *)v1454 < v1456)
        {
          sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1455 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
          __int16 v1453 = (__int16)v1684;
          __int16 v1452 = (__int16)v1686;
          a2[6] = (uint64_t **)((char *)a2[6] - v1456);
          goto LABEL_2282;
        }
        v1457 = (uint64_t **)((char *)v1455 - v1456);
        a2[6] = (uint64_t **)((char *)v1455 - v1456);
        if (v1456)
        {
LABEL_2282:
          uint64_t v1458 = 0;
          do
            *((unsigned char *)a2[6] + v1458++) = 0;
          while (v1456 != v1458);
          v1457 = a2[6];
          v1454 = (uint64_t *)a2[7];
        }
        if ((unint64_t)((char *)v1457 - (char *)v1454) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          __int16 v1453 = (__int16)v1684;
          __int16 v1452 = (__int16)v1686;
          v1457 = a2[6];
          v1454 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1457 - 1) = v1447;
        v1459 = (uint64_t **)((char *)v1457 - 4);
        a2[6] = v1459;
        v1460 = a2[4];
        v1461 = a2[5];
        if ((unint64_t)((char *)v1459 - (char *)v1454) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          __int16 v1453 = (__int16)v1684;
          __int16 v1452 = (__int16)v1686;
          v1454 = (uint64_t *)a2[7];
        }
        uint64_t *v1454 = (v1460 - v1459 + v1461) | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1462 = *((unsigned __int16 *)a2 + 34);
        if (v1462 <= 6) {
          LOWORD(v1462) = 6;
        }
        *((_WORD *)a2 + 34) = v1462;
        v443 = v1431;
        LOWORD(v1431) = v1669;
      }
      int v1463 = sub_1CBF2CB78((uint64_t)a2, v1453 - v1452 + (unsigned __int16)v1431);
      int v1464 = v1463;
      if (v1424 < v1689)
      {
        *(_DWORD *)v1424 = v1463;
        v451 = v1424 + 4;
        v1471 = v1793;
      }
      else
      {
        v1465 = v1793;
        uint64_t v1466 = (v1424 - v1793) >> 2;
        unint64_t v1467 = v1466 + 1;
        if ((unint64_t)(v1466 + 1) >> 62) {
          goto LABEL_2629;
        }
        v1468 = v443;
        if ((v1689 - v1793) >> 1 > v1467) {
          unint64_t v1467 = (v1689 - v1793) >> 1;
        }
        if ((unint64_t)(v1689 - v1793) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1469 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1469 = v1467;
        }
        if (v1469)
        {
          if (v1469 >> 62) {
            goto LABEL_2630;
          }
          v1470 = (char *)operator new(4 * v1469);
          v1465 = v1793;
        }
        else
        {
          v1470 = 0;
        }
        v1471 = &v1470[4 * v1466];
        *(_DWORD *)v1471 = v1464;
        v451 = v1471 + 4;
        while (v1424 != v1465)
        {
          int v1472 = *((_DWORD *)v1424 - 1);
          v1424 -= 4;
          *((_DWORD *)v1471 - 1) = v1472;
          v1471 -= 4;
        }
        v1689 = &v1470[4 * v1469];
        if (v1465) {
          operator delete(v1465);
        }
        v443 = v1468;
        v1421 = v1670;
      }
      v1793 = v1471;
      ++v1428;
      v1424 = v451;
      if (v1428 == v1674) {
        goto LABEL_2331;
      }
      continue;
    }
  }
  v1793 = 0;
  v451 = 0;
LABEL_2422:
  if (v1423) {
    (*(void (**)(std::string::size_type))(*(void *)v1423 + 8))(v1423);
  }
  (*(void (**)(std::string::size_type))(*(void *)v1422 + 8))(v1422);
  if (v1421) {
    ((void (*)(uint64_t ***))(*v1421)[1])(v1421);
  }
  uint64_t v104 = (uint64_t)v1824;
  if (v1680) {
    (*(void (**)(std::string::size_type))(*(void *)v1680 + 8))(v1680);
  }
  unsigned int v444 = v1750;
LABEL_768:
  unsigned int v452 = sub_1CC77FE7C(4, v104);
  if (v452 == -1) {
    unsigned int v453 = 0;
  }
  else {
    unsigned int v453 = v452;
  }
  if (v444 == -1) {
    unsigned int v454 = v453;
  }
  else {
    unsigned int v454 = v444;
  }
  uint64_t v455 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 336))(v104);
  int v456 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v455 + 24))(v455, 3);
  unsigned int v457 = sub_1CC7821B8(4, v104);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v104 + 160))(v104, 4))
  {
    uint64_t v458 = 0;
    v459 = 0;
    unsigned int v460 = v1773;
    goto LABEL_776;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v104 + 128))(&__dst, v104, 4);
  (*(void (**)(uint64_t ****__return_ptr, uint64_t, uint64_t))(*(void *)v104 + 136))(&v1825, v104, 4);
  v1570 = v1825;
  std::string::size_type v1675 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    std::string::size_type v1690 = __dst.__r_.__value_.__r.__words[0];
    if (v1570) {
      goto LABEL_2504;
    }
LABEL_2649:
    std::string::size_type v1571 = 0;
  }
  else
  {
    std::string::size_type v1690 = 0;
    if (!v1825) {
      goto LABEL_2649;
    }
LABEL_2504:
    ((void (*)(std::string *__return_ptr, uint64_t ***))(*v1570)[2])(&__dst, v1570);
    std::string::size_type v1571 = __dst.__r_.__value_.__r.__words[0];
  }
  v1673 = v1570;
  std::string::size_type v1687 = v1571;
  uint64_t v458 = 0;
  if (((*(uint64_t (**)(std::string::size_type))(*(void *)v1690 + 24))(v1690) & 1) == 0)
  {
    v1572 = 0;
    v1683 = 0;
    int v1671 = v456;
    int v1668 = (int)v443;
    while (1)
    {
      v1825 = 0;
      v1825 = *(uint64_t ****)(*(uint64_t (**)(std::string::size_type))(*(void *)v1690 + 32))(v1690);
      uint64_t v1677 = sub_1CC782500(a6, &v1825);
      v1573 = v1824;
      int v1574 = ((uint64_t (*)(uint64_t (***)(void), uint64_t ***))(*v1824)[50])(v1824, v1825);
      *((unsigned char *)a2 + 70) = 1;
      v1575 = a2[5];
      v1576 = a2[6];
      v1577 = a2[4];
      int v1578 = v1574 - v454;
      BOOL v1579 = v1574 == v454 && *((unsigned char *)a2 + 80) == 0;
      v1685 = a2[5];
      v1679 = a2[4];
      v1681 = a2[6];
      if (v1579) {
        goto LABEL_2512;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      unint64_t v1616 = ((_BYTE)v1576 - ((_BYTE)v1577 + (_BYTE)v1575)) & 3;
      v1617 = (uint64_t *)a2[7];
      if ((char *)v1576 - (char *)v1617 < v1616) {
        break;
      }
      v1618 = (uint64_t **)((char *)v1576 - v1616);
      a2[6] = (uint64_t **)((char *)v1576 - v1616);
      if ((((_BYTE)v1576 - ((_BYTE)v1577 + (_BYTE)v1575)) & 3) != 0) {
        goto LABEL_2575;
      }
LABEL_2578:
      if ((unint64_t)((char *)v1618 - (char *)v1617) <= 3)
      {
        int v1627 = v1578;
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        int v1578 = v1627;
        v1618 = a2[6];
        v1617 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v1618 - 1) = v1578;
      v1620 = (uint64_t **)((char *)v1618 - 4);
      a2[6] = v1620;
      v1621 = a2[4];
      v1622 = a2[5];
      if ((unint64_t)((char *)v1620 - (char *)v1617) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        v1617 = (uint64_t *)a2[7];
      }
      uint64_t *v1617 = (v1621 - v1620 + v1622) | 0x800000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v1623 = *((unsigned __int16 *)a2 + 34);
      if (v1623 <= 8) {
        LOWORD(v1623) = 8;
      }
      *((_WORD *)a2 + 34) = v1623;
      v1573 = v1824;
      LODWORD(v443) = v1668;
LABEL_2512:
      ((void (*)(uint64_t (***)(void), uint64_t, uint64_t ***))(*v1573)[23])(v1573, 16, v1825);
      if (*(char *)(v1814 + 239) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&__dst, *(const void **)(v1814 + 216), *(void *)(v1814 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1810;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v1814 + 232);
      }
      if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
      {
        int v1580 = 27;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
      {
        int v1580 = 28;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
      {
        int v1580 = 29;
      }
      else
      {
        int v1580 = 0;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v1581 = (void *)(v1677 - 8 * *(unsigned int *)(v1677 + 8));
      if (v1580 == 29
        && *(unsigned char *)(*(void *)(*(void *)(*v1581 + 128) + 24) + 8) == 17
        && ((uint64_t v1582 = v1581[1], *(unsigned char *)v1582 != 1) || *(unsigned char *)(*(void *)(v1582 + 128) + 16) != 16))
      {
        v1624 = (void *)(v1582 - 8 * *(unsigned int *)(v1582 + 8));
        uint64_t v1625 = *(void *)(*v1624 + 128);
        v1626 = (void *)(v1625 + 24);
        if (*(_DWORD *)(v1625 + 32) >= 0x41u) {
          v1626 = (void *)*v1626;
        }
        v1585 = (void *)*v1626;
        uint64_t v1586 = v1624[1];
      }
      else
      {
        uint64_t v1583 = *(void *)(v1581[1] + 128);
        v1584 = (void *)(v1583 + 24);
        if (*(_DWORD *)(v1583 + 32) >= 0x41u) {
          v1584 = (void *)*v1584;
        }
        v1585 = (void *)*v1584;
        uint64_t v1586 = v1581[2];
      }
      uint64_t v1587 = *(void *)(v1586 + 128);
      v1588 = (void *)(v1587 + 24);
      if (*(_DWORD *)(v1587 + 32) >= 0x41u) {
        v1588 = (void *)*v1588;
      }
      int v1589 = *(_DWORD *)v1588;
      if (v1585 | *((unsigned char *)a2 + 80))
      {
        unsigned int v1590 = sub_1CBF2CB00((uint64_t)a2, (char)v1585);
        v1591 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)a2[6] - (char *)v1591) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1591 = (uint64_t *)a2[7];
        }
        uint64_t *v1591 = v1590 | 0x400000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1592 = *((unsigned __int16 *)a2 + 34);
        if (v1592 <= 4) {
          LOWORD(v1592) = 4;
        }
        *((_WORD *)a2 + 34) = v1592;
        int v1593 = *((unsigned __int8 *)a2 + 80);
      }
      else
      {
        int v1593 = 0;
      }
      __int16 v1595 = (__int16)v1679;
      __int16 v1594 = (__int16)v1681;
      int v1596 = v1589;
      __int16 v1597 = (__int16)v1685;
      if (!(v1589 | v1593)) {
        goto LABEL_2552;
      }
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      v1599 = a2[6];
      v1598 = (uint64_t *)a2[7];
      unint64_t v1600 = ((_BYTE)v1599 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v1599 - (char *)v1598 < v1600)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1599 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        int v1596 = v1589;
        __int16 v1595 = (__int16)v1679;
        __int16 v1594 = (__int16)v1681;
        a2[6] = (uint64_t **)((char *)a2[6] - v1600);
LABEL_2542:
        uint64_t v1602 = 0;
        do
          *((unsigned char *)a2[6] + v1602++) = 0;
        while (v1600 != v1602);
        v1601 = a2[6];
        v1598 = (uint64_t *)a2[7];
        goto LABEL_2545;
      }
      v1601 = (uint64_t **)((char *)v1599 - v1600);
      a2[6] = (uint64_t **)((char *)v1599 - v1600);
      if (v1600) {
        goto LABEL_2542;
      }
LABEL_2545:
      if ((unint64_t)((char *)v1601 - (char *)v1598) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        int v1596 = v1589;
        __int16 v1595 = (__int16)v1679;
        __int16 v1594 = (__int16)v1681;
        v1601 = a2[6];
        v1598 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v1601 - 1) = v1596;
      v1603 = (uint64_t **)((char *)v1601 - 4);
      a2[6] = v1603;
      v1604 = a2[4];
      v1605 = a2[5];
      if ((unint64_t)((char *)v1603 - (char *)v1598) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        __int16 v1595 = (__int16)v1679;
        __int16 v1594 = (__int16)v1681;
        v1598 = (uint64_t *)a2[7];
      }
      uint64_t *v1598 = (v1604 - v1603 + v1605) | 0x600000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v1606 = *((unsigned __int16 *)a2 + 34);
      if (v1606 <= 6) {
        LOWORD(v1606) = 6;
      }
      *((_WORD *)a2 + 34) = v1606;
      LODWORD(v443) = v1668;
      __int16 v1597 = (__int16)v1685;
LABEL_2552:
      int v1607 = sub_1CBF2CB78((uint64_t)a2, v1595 - v1594 + v1597);
      int v1608 = v1607;
      if (v1572 < v1683)
      {
        *(_DWORD *)v1572 = v1607;
        v459 = v1572 + 4;
      }
      else
      {
        uint64_t v1609 = (v1572 - v458) >> 2;
        unint64_t v1610 = v1609 + 1;
        if ((unint64_t)(v1609 + 1) >> 62) {
          goto LABEL_2629;
        }
        if ((v1683 - v458) >> 1 > v1610) {
          unint64_t v1610 = (v1683 - v458) >> 1;
        }
        if ((unint64_t)(v1683 - v458) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1611 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1611 = v1610;
        }
        if (v1611)
        {
          if (v1611 >> 62) {
            goto LABEL_2630;
          }
          int v1612 = v1607;
          v1613 = (char *)operator new(4 * v1611);
          int v1608 = v1612;
        }
        else
        {
          v1613 = 0;
        }
        v1614 = &v1613[4 * v1609];
        *(_DWORD *)v1614 = v1608;
        v459 = v1614 + 4;
        while (v1572 != v458)
        {
          int v1615 = *((_DWORD *)v1572 - 1);
          v1572 -= 4;
          *((_DWORD *)v1614 - 1) = v1615;
          v1614 -= 4;
        }
        v1683 = &v1613[4 * v1611];
        if (v458) {
          operator delete(v458);
        }
        uint64_t v458 = v1614;
        LODWORD(v443) = v1668;
      }
      (*(void (**)(std::string::size_type))(*(void *)v1690 + 40))(v1690);
      v1572 = v459;
      int v456 = v1671;
      if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v1690 + 24))(v1690, v1687))goto LABEL_2595; {
    }
      }
    int v1628 = v1574 - v454;
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1576 - ((_BYTE)v1577 + (_BYTE)v1575)) & 3);
    int v1578 = v1628;
    a2[6] = (uint64_t **)((char *)a2[6] - v1616);
LABEL_2575:
    uint64_t v1619 = 0;
    do
      *((unsigned char *)a2[6] + v1619++) = 0;
    while (v1616 != v1619);
    v1618 = a2[6];
    v1617 = (uint64_t *)a2[7];
    goto LABEL_2578;
  }
  v459 = 0;
LABEL_2595:
  if (v1687) {
    (*(void (**)(std::string::size_type))(*(void *)v1687 + 8))(v1687);
  }
  (*(void (**)(std::string::size_type))(*(void *)v1690 + 8))(v1690);
  unsigned int v460 = v1773;
  if (v1673) {
    ((void (*)(uint64_t ***))(*v1673)[1])(v1673);
  }
  if (v1675) {
    (*(void (**)(std::string::size_type))(*(void *)v1675 + 8))(v1675);
  }
LABEL_776:
  if (v443 <= v460) {
    unsigned int v461 = v460;
  }
  else {
    unsigned int v461 = v443;
  }
  if (v461 <= v457) {
    unsigned int v462 = v457;
  }
  else {
    unsigned int v462 = v461;
  }
  sub_1CC78298C((char **)&v1827, *(char **)v1828, v1793, v451, (v451 - v1793) >> 2);
  sub_1CC78298C((char **)&v1827, *(char **)v1828, v458, v459, (v459 - v458) >> 2);
  BOOL v463 = (*(unsigned int (**)(void))(*(void *)*a1 + 912))()
      && ((unsigned int (*)(uint64_t (***)(void), uint64_t, uint64_t, uint64_t, uint64_t))**v1824)(v1824, 2, 0xFFFFFFFFLL, 1, 1) != -1&& ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[74])(v1824, 105) != 0;
  int v464 = (v457 - v453) * v456;
  if (v460 <= v457) {
    unsigned int v465 = v457;
  }
  else {
    unsigned int v465 = v460;
  }
  uint64_t v466 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
  unsigned int v467 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v466 + 24))(v466, 3);
  if (!v463)
  {
    unsigned int v497 = v1793;
    v498 = v1802;
    v499 = v1786;
    unsigned int v500 = v1695;
    goto LABEL_862;
  }
  unsigned int v468 = v467;
  *((unsigned char *)a2 + 70) = 1;
  int v469 = *((_DWORD *)a2 + 10);
  int v470 = *((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 12);
  int v471 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, uint64_t, uint64_t, uint64_t))**v1824)(v1824, 2, 0xFFFFFFFFLL, 1, 1);
  if (v471 != v1750 || *((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    uint64_t v473 = a2[6];
    int v472 = (uint64_t *)a2[7];
    unint64_t v474 = ((_BYTE)v473 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v473 - (char *)v472 < v474)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v473 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v474);
    }
    else
    {
      v475 = (uint64_t **)((char *)v473 - v474);
      a2[6] = v475;
      if (!v474)
      {
LABEL_799:
        if ((unint64_t)((char *)v475 - (char *)v472) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v475 = a2[6];
          int v472 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v475 - 1) = v471 - v1750;
        v477 = (uint64_t **)((char *)v475 - 4);
        a2[6] = v477;
        uint64_t v478 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v477;
        if ((unint64_t)((char *)v477 - (char *)v472) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          int v472 = (uint64_t *)a2[7];
        }
        *int v472 = v478 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v479 = *((unsigned __int16 *)a2 + 34);
        if (v479 <= 8) {
          LOWORD(v479) = 8;
        }
        *((_WORD *)a2 + 34) = v479;
        goto LABEL_806;
      }
    }
    uint64_t v476 = 0;
    do
      *((unsigned char *)a2[6] + v476++) = 0;
    while (v474 != v476);
    v475 = a2[6];
    int v472 = (uint64_t *)a2[7];
    goto LABEL_799;
  }
LABEL_806:
  __int16 v480 = v470 + v469;
  if (v465 <= (2 * v468 - 1) / v468 + v471) {
    unsigned int v465 = (2 * v468 - 1) / v468 + v471;
  }
  unsigned int v481 = sub_1CBF2CB00((uint64_t)a2, 20);
  v482 = (uint64_t *)a2[7];
  if ((unint64_t)((char *)a2[6] - (char *)v482) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v482 = (uint64_t *)a2[7];
  }
  uint64_t *v482 = v481 | 0x400000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v483 = *((unsigned __int16 *)a2 + 34);
  if (v483 <= 4) {
    LOWORD(v483) = 4;
  }
  *((_WORD *)a2 + 34) = v483;
  int v484 = (**v1824)();
  if (!v484 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_828;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v486 = a2[6];
  uint64_t v485 = (uint64_t *)a2[7];
  unint64_t v487 = ((_BYTE)v486 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v486 - (char *)v485 < v487)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v486 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v487);
LABEL_818:
    uint64_t v489 = 0;
    do
      *((unsigned char *)a2[6] + v489++) = 0;
    while (v487 != v489);
    v488 = a2[6];
    uint64_t v485 = (uint64_t *)a2[7];
    goto LABEL_821;
  }
  v488 = (uint64_t **)((char *)v486 - v487);
  a2[6] = v488;
  if (v487) {
    goto LABEL_818;
  }
LABEL_821:
  if ((unint64_t)((char *)v488 - (char *)v485) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v488 = a2[6];
    uint64_t v485 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v488 - 1) = v484;
  unsigned int v490 = (uint64_t **)((char *)v488 - 4);
  a2[6] = v490;
  uint64_t v491 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v490;
  if ((unint64_t)((char *)v490 - (char *)v485) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    uint64_t v485 = (uint64_t *)a2[7];
  }
  *uint64_t v485 = v491 | 0x600000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v492 = *((unsigned __int16 *)a2 + 34);
  if (v492 <= 6) {
    LOWORD(v492) = 6;
  }
  *((_WORD *)a2 + 34) = v492;
LABEL_828:
  int v493 = sub_1CBF2CB78((uint64_t)a2, v480);
  int v494 = v493;
  int v495 = *(char **)v1828;
  if (*(void *)v1828 >= (unint64_t)v1829)
  {
    v501 = (char *)v1827;
    uint64_t v502 = (uint64_t)(*(void *)v1828 - (void)v1827) >> 2;
    unint64_t v503 = v502 + 1;
    if ((unint64_t)(v502 + 1) >> 62) {
      goto LABEL_2629;
    }
    uint64_t v504 = v1829 - (unsigned char *)v1827;
    if ((v1829 - (unsigned char *)v1827) >> 1 > v503) {
      unint64_t v503 = v504 >> 1;
    }
    if ((unint64_t)v504 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v505 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v505 = v503;
    }
    if (v505)
    {
      if (v505 >> 62) {
        goto LABEL_2630;
      }
      uint64_t v506 = (char *)operator new(4 * v505);
    }
    else
    {
      uint64_t v506 = 0;
    }
    unsigned int v521 = &v506[4 * v502];
    *(_DWORD *)unsigned int v521 = v494;
    BOOL v496 = v521 + 4;
    while (v495 != v501)
    {
      int v522 = *((_DWORD *)v495 - 1);
      v495 -= 4;
      *((_DWORD *)v521 - 1) = v522;
      v521 -= 4;
    }
    v1827 = v521;
    v1829 = &v506[4 * v505];
    if (v501) {
      operator delete(v501);
    }
  }
  else
  {
    **(_DWORD **)v1828 = v493;
    BOOL v496 = v495 + 4;
  }
  unsigned int v497 = v1793;
  v498 = v1802;
  unsigned int v500 = v1695;
  v464 += v468;
  *(void *)v1828 = v496;
  unsigned int v462 = v465;
  v499 = v1786;
  unsigned int v460 = v1773;
LABEL_862:
  int v523 = (v1723 - v1804) * v1741;
  unsigned int v524 = v464 + (v460 - v500) * v1745;
  if (!v465) {
    unsigned int v524 = 0;
  }
  unsigned int v1774 = v524;
  if (v458)
  {
    operator delete(v458);
    unsigned int v497 = v1793;
    int v523 = (v1723 - v1804) * v1741;
  }
  unsigned int v1811 = v523;
  int v1742 = v523 + v1692;
  if (v497) {
    operator delete(v497);
  }
  v525 = v1824;
  uint64_t v526 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[22])(v1824, 17);
  if (!v526) {
    goto LABEL_869;
  }
  if (v526 == 1)
  {
    ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 17);
    uint64_t v652 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                        + 32))(__dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v653 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v653) {
      (*(void (**)(std::string::size_type))(*(void *)v653 + 8))(v653);
    }
    if (!v652) {
      goto LABEL_869;
    }
  }
  else
  {
    ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 17);
    uint64_t v652 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                        + 32))(__dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v1650 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1650) {
      (*(void (**)(std::string::size_type))(*(void *)v1650 + 8))(v1650);
    }
    v525 = v1824;
    if (!v652) {
      goto LABEL_869;
    }
  }
  uint64_t v654 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v525)[50])(v525, v652);
  *((unsigned char *)a2 + 70) = 1;
  v656 = a2[5];
  uint64_t v655 = a2[6];
  uint64_t v657 = a2[4];
  __int16 v658 = (_WORD)v657 - (_WORD)v655;
  if (v654 != v1804 || *((unsigned char *)a2 + 80) != 0)
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    unint64_t v660 = ((_BYTE)v655 - ((_BYTE)v657 + (_BYTE)v656)) & 3;
    uint64_t v661 = (uint64_t *)a2[7];
    if ((char *)v655 - (char *)v661 < v660)
    {
      sub_1CBF2C904((uint64_t *)a2, v660);
      a2[6] = (uint64_t **)((char *)a2[6] - v660);
    }
    else
    {
      long long v662 = (uint64_t **)((char *)v655 - v660);
      a2[6] = v662;
      if (!v660)
      {
LABEL_1066:
        if ((unint64_t)((char *)v662 - (char *)v661) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          long long v662 = a2[6];
          uint64_t v661 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v662 - 1) = v654 - v1804;
        v664 = (uint64_t **)((char *)v662 - 4);
        a2[6] = v664;
        uint64_t v665 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v664;
        if ((unint64_t)((char *)v664 - (char *)v661) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v661 = (uint64_t *)a2[7];
        }
        *uint64_t v661 = v665 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v666 = *((unsigned __int16 *)a2 + 34);
        if (v666 <= 8) {
          LOWORD(v666) = 8;
        }
        *((_WORD *)a2 + 34) = v666;
        goto LABEL_1073;
      }
    }
    uint64_t v663 = 0;
    do
      *((unsigned char *)a2[6] + v663++) = 0;
    while (v660 != v663);
    long long v662 = a2[6];
    uint64_t v661 = (uint64_t *)a2[7];
    goto LABEL_1066;
  }
LABEL_1073:
  __int16 v667 = v658 + (_WORD)v656;
  unsigned int v668 = sub_1CBF2CB00((uint64_t)a2, 94);
  v669 = (uint64_t *)a2[7];
  if ((unint64_t)((char *)a2[6] - (char *)v669) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v669 = (uint64_t *)a2[7];
  }
  uint64_t *v669 = v668 | 0x400000000;
  uint64_t v670 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v670;
  ++*((_DWORD *)a2 + 16);
  unsigned int v671 = *((unsigned __int16 *)a2 + 34);
  if (v671 <= 4) {
    LOWORD(v671) = 4;
  }
  *((_WORD *)a2 + 34) = v671;
  v525 = v1824;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1092;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v672 = a2[6];
  unint64_t v673 = ((_BYTE)v672 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v672 - (char *)v670 < v673)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v672 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v673);
LABEL_1082:
    uint64_t v675 = 0;
    do
      *((unsigned char *)a2[6] + v675++) = 0;
    while (v673 != v675);
    v674 = a2[6];
    uint64_t v670 = (uint64_t *)a2[7];
    goto LABEL_1085;
  }
  v674 = (uint64_t **)((char *)v672 - v673);
  a2[6] = v674;
  if (v673) {
    goto LABEL_1082;
  }
LABEL_1085:
  v525 = v1824;
  if ((unint64_t)((char *)v674 - (char *)v670) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v674 = a2[6];
    uint64_t v670 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v674 - 1) = 0;
  v676 = (uint64_t **)((char *)v674 - 4);
  a2[6] = v676;
  uint64_t v677 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v676;
  if ((unint64_t)((char *)v676 - (char *)v670) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    uint64_t v670 = (uint64_t *)a2[7];
  }
  *uint64_t v670 = v677 | 0x600000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v678 = *((unsigned __int16 *)a2 + 34);
  if (v678 <= 6) {
    LOWORD(v678) = 6;
  }
  *((_WORD *)a2 + 34) = v678;
LABEL_1092:
  int v679 = sub_1CBF2CB78((uint64_t)a2, v667);
  int v680 = v679;
  if (v499 >= __srca)
  {
    uint64_t v1513 = (v499 - v498) >> 2;
    unint64_t v1514 = v1513 + 1;
    if ((unint64_t)(v1513 + 1) >> 62) {
LABEL_2629:
    }
      abort();
    if ((__srca - v498) >> 1 > v1514) {
      unint64_t v1514 = (__srca - v498) >> 1;
    }
    if ((unint64_t)(__srca - v498) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1514 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v1514)
    {
      if (v1514 >> 62) {
        goto LABEL_2630;
      }
      v1515 = (char *)operator new(4 * v1514);
    }
    else
    {
      v1515 = 0;
    }
    v1544 = &v1515[4 * v1513];
    *(_DWORD *)v1544 = v680;
    v681 = v1544 + 4;
    while (v499 != v498)
    {
      int v1545 = *((_DWORD *)v499 - 1);
      v499 -= 4;
      *((_DWORD *)v1544 - 1) = v1545;
      v1544 -= 4;
    }
    if (v498) {
      operator delete(v498);
    }
    v498 = v1544;
    v525 = v1824;
  }
  else
  {
    *(_DWORD *)v499 = v679;
    v681 = v499 + 4;
  }
  if (v462 <= v654) {
    unsigned int v462 = v654;
  }
  v1742 += HIDWORD(v654);
  v1811 += HIDWORD(v654);
  v499 = v681;
LABEL_869:
  v1787 = v499;
  v1803 = v498;
  if (!((uint64_t (*)(uint64_t (***)(void)))(*v525)[39])(v525))
  {
    v540 = 0;
    uint64_t v543 = 0;
    __srcg = 0;
    goto LABEL_1100;
  }
  unsigned int v527 = v462;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5)
    && (((uint64_t (*)(uint64_t (***)(void)))(*v525)[39])(v525) & 3) != 0)
  {
    int v528 = ((uint64_t (*)(uint64_t (***)(void)))(*v525)[39])(v525) | 0xFFFFFFFC;
    do
      ((void (*)(uint64_t (***)(void), void))(*v525)[41])(v525, 0);
    while (!__CFADD__(v528++, 1));
  }
  unsigned int v530 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**v525)(v525, 7, 0, 1, 3);
  unsigned int v531 = ((uint64_t (*)(uint64_t (***)(void), uint64_t, void, uint64_t, uint64_t))**v525)(v525, 6, 0, 1, 1);
  uint64_t v532 = *v525;
  v533 = (uint64_t (***)(void, void, void, void, void))v525;
  int v534 = v530 / v531;
  unint64_t v535 = 4 * ((uint64_t (*)(uint64_t (***)(void, void, void, void, void)))v532[39])(v533);
  unint64_t v536 = v535 / (**v533)(v533, 6, 0, 1, 1);
  int v537 = v536 - v534;
  unsigned int v538 = ((uint64_t (*)(uint64_t (***)(void, void, void, void, void)))(*v533)[44])(v533)
       + v536
       - v534;
  int v539 = ((uint64_t (*)(uint64_t (***)(void, void, void, void, void)))(*v533)[44])(v533);
  if (v538 > v527) {
    unsigned int v527 = v538;
  }
  if ((v1699 - 27) > 2)
  {
    *((unsigned char *)a2 + 70) = 1;
    v544 = a2[5];
    uint64_t v545 = a2[6];
    v546 = a2[4];
    BOOL v547 = v536 == v534 && *((unsigned char *)a2 + 80) == 0;
    int v548 = v533;
    unsigned int v462 = v527;
    if (v547) {
      goto LABEL_902;
    }
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    unint64_t v549 = ((_BYTE)v545 - ((_BYTE)v546 + (_BYTE)v544)) & 3;
    v550 = (uint64_t *)a2[7];
    if ((char *)v545 - (char *)v550 < v549)
    {
      int v1654 = v539;
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v545 - ((_BYTE)v546 + (_BYTE)v544)) & 3);
      int v539 = v1654;
      a2[6] = (uint64_t **)((char *)a2[6] - v549);
    }
    else
    {
      v551 = (uint64_t **)((char *)v545 - v549);
      a2[6] = (uint64_t **)((char *)v545 - v549);
      if ((((_BYTE)v545 - ((_BYTE)v546 + (_BYTE)v544)) & 3) == 0)
      {
LABEL_895:
        if ((unint64_t)((char *)v551 - (char *)v550) <= 3)
        {
          int v1630 = v539;
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          int v539 = v1630;
          v551 = a2[6];
          v550 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v551 - 1) = v537;
        v553 = (uint64_t **)((char *)v551 - 4);
        a2[6] = v553;
        uint64_t v554 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v553;
        if ((unint64_t)((char *)v553 - (char *)v550) <= 7)
        {
          int v1635 = v539;
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          int v539 = v1635;
          v550 = (uint64_t *)a2[7];
        }
        uint64_t *v550 = v554 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v555 = *((unsigned __int16 *)a2 + 34);
        if (v555 <= 8) {
          LOWORD(v555) = 8;
        }
        *((_WORD *)a2 + 34) = v555;
LABEL_902:
        if (!a2[9]) {
          a2[9] = (uint64_t **)1;
        }
        unsigned int v556 = a2[6];
        if (v556 == a2[7])
        {
          int v1540 = v539;
          sub_1CBF2C904((uint64_t *)a2, 1uLL);
          int v539 = v1540;
          unsigned int v556 = a2[6];
        }
        __int16 v557 = (_WORD)v546 - (_WORD)v545;
        a2[6] = (uint64_t **)((char *)v556 - 1);
        *((unsigned char *)v556 - 1) = 6;
        v559 = a2[6];
        unsigned int v558 = (uint64_t *)a2[7];
        uint64_t v560 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v559;
        if ((unint64_t)((char *)v559 - (char *)v558) <= 7)
        {
          int v1633 = v539;
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          int v539 = v1633;
          unsigned int v558 = (uint64_t *)a2[7];
        }
        __int16 v561 = v557 + (_WORD)v544;
        *unsigned int v558 = v560 | 0x400000000;
        v562 = (uint64_t *)(a2[7] + 1);
        a2[7] = (uint64_t **)v562;
        ++*((_DWORD *)a2 + 16);
        unsigned int v563 = *((unsigned __int16 *)a2 + 34);
        if (v563 <= 4) {
          LOWORD(v563) = 4;
        }
        *((_WORD *)a2 + 34) = v563;
        if (!v539 && !*((unsigned char *)a2 + 80))
        {
LABEL_926:
          unsigned int v571 = (**v548)(v548, 7, 0, 1, 3);
          unsigned int v572 = (**v548)(v548, 6, 0, 1, 1);
          if (v572 > v571 && *((unsigned char *)a2 + 80) == 0)
          {
LABEL_958:
            int v591 = sub_1CBF2CB78((uint64_t)a2, v561);
            v540 = (char *)operator new(4uLL);
            *(_DWORD *)v540 = v591;
            uint64_t v543 = v540 + 4;
            __srcg = v540 + 4;
            goto LABEL_1100;
          }
          if ((unint64_t)a2[9] <= 3) {
            a2[9] = (uint64_t **)4;
          }
          v575 = a2[6];
          v574 = (uint64_t *)a2[7];
          unint64_t v576 = ((_BYTE)v575 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
          if ((char *)v575 - (char *)v574 < v576)
          {
            sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v575 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
            a2[6] = (uint64_t **)((char *)a2[6] - v576);
          }
          else
          {
            v577 = (uint64_t **)((char *)v575 - v576);
            a2[6] = v577;
            if (!v576) {
              goto LABEL_937;
            }
          }
          uint64_t v578 = 0;
          do
            *((unsigned char *)a2[6] + v578++) = 0;
          while (v576 != v578);
          v577 = a2[6];
          v574 = (uint64_t *)a2[7];
LABEL_937:
          int v579 = v571 / v572;
          if ((unint64_t)((char *)v577 - (char *)v574) <= 3)
          {
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            v577 = a2[6];
            v574 = (uint64_t *)a2[7];
          }
          *((_DWORD *)v577 - 1) = v579;
          v580 = (uint64_t **)((char *)v577 - 4);
          a2[6] = v580;
          uint64_t v581 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v580;
          if ((unint64_t)((char *)v580 - (char *)v574) <= 7)
          {
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            v574 = (uint64_t *)a2[7];
          }
          uint64_t *v574 = v581 | 0xC00000000;
          v582 = (uint64_t *)(a2[7] + 1);
          a2[7] = (uint64_t **)v582;
          ++*((_DWORD *)a2 + 16);
          unsigned int v583 = *((unsigned __int16 *)a2 + 34);
          if (v583 <= 0xC) {
            LOWORD(v583) = 12;
          }
          *((_WORD *)a2 + 34) = v583;
          if (!*((unsigned char *)a2 + 80)) {
            goto LABEL_958;
          }
          if ((unint64_t)a2[9] <= 3) {
            a2[9] = (uint64_t **)4;
          }
          v584 = a2[6];
          unint64_t v585 = ((_BYTE)v584 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
          if ((char *)v584 - (char *)v582 < v585)
          {
            sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v584 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
            a2[6] = (uint64_t **)((char *)a2[6] - v585);
          }
          else
          {
            v586 = (uint64_t **)((char *)v584 - v585);
            a2[6] = v586;
            if (!v585)
            {
LABEL_951:
              if ((unint64_t)((char *)v586 - (char *)v582) <= 3)
              {
                sub_1CBF2C904((uint64_t *)a2, 4uLL);
                v586 = a2[6];
                v582 = (uint64_t *)a2[7];
              }
              *((_DWORD *)v586 - 1) = 0;
              uint64_t v588 = (uint64_t **)((char *)v586 - 4);
              a2[6] = v588;
              uint64_t v589 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v588;
              if ((unint64_t)((char *)v588 - (char *)v582) <= 7)
              {
                sub_1CBF2C904((uint64_t *)a2, 8uLL);
                v582 = (uint64_t *)a2[7];
              }
              uint64_t *v582 = v589 | 0x600000000;
              ++a2[7];
              ++*((_DWORD *)a2 + 16);
              unsigned int v590 = *((unsigned __int16 *)a2 + 34);
              if (v590 <= 6) {
                LOWORD(v590) = 6;
              }
              *((_WORD *)a2 + 34) = v590;
              goto LABEL_958;
            }
          }
          uint64_t v587 = 0;
          do
            *((unsigned char *)a2[6] + v587++) = 0;
          while (v585 != v587);
          v586 = a2[6];
          v582 = (uint64_t *)a2[7];
          goto LABEL_951;
        }
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        v564 = a2[6];
        unint64_t v565 = ((_BYTE)v564 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
        if ((char *)v564 - (char *)v562 < v565)
        {
          int v1653 = v539;
          sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v564 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
          int v539 = v1653;
          a2[6] = (uint64_t **)((char *)a2[6] - v565);
        }
        else
        {
          uint64_t v566 = (uint64_t **)((char *)v564 - v565);
          a2[6] = v566;
          if (!v565)
          {
LABEL_919:
            if ((unint64_t)((char *)v566 - (char *)v562) <= 3)
            {
              int v1629 = v539;
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              int v539 = v1629;
              uint64_t v566 = a2[6];
              v562 = (uint64_t *)a2[7];
            }
            *((_DWORD *)v566 - 1) = v539;
            v568 = (uint64_t **)((char *)v566 - 4);
            a2[6] = v568;
            uint64_t v569 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v568;
            if ((unint64_t)((char *)v568 - (char *)v562) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              v562 = (uint64_t *)a2[7];
            }
            uint64_t *v562 = v569 | 0xA00000000;
            ++a2[7];
            ++*((_DWORD *)a2 + 16);
            unsigned int v570 = *((unsigned __int16 *)a2 + 34);
            if (v570 <= 0xA) {
              LOWORD(v570) = 10;
            }
            *((_WORD *)a2 + 34) = v570;
            goto LABEL_926;
          }
        }
        uint64_t v567 = 0;
        do
          *((unsigned char *)a2[6] + v567++) = 0;
        while (v565 != v567);
        uint64_t v566 = a2[6];
        v562 = (uint64_t *)a2[7];
        goto LABEL_919;
      }
    }
    uint64_t v552 = 0;
    do
      *((unsigned char *)a2[6] + v552++) = 0;
    while (v549 != v552);
    v551 = a2[6];
    v550 = (uint64_t *)a2[7];
    goto LABEL_895;
  }
  int __srcf = v539;
  if (!((uint64_t (*)(uint64_t (***)(void, void, void, void, void), uint64_t))(*v533)[22])(v533, 24))
  {
    v540 = 0;
    unsigned int v541 = 0;
LABEL_880:
    unsigned int v462 = v527;
    goto LABEL_881;
  }
  ((void (*)(std::string *__return_ptr))(*v1824)[16])(&__dst);
  unsigned int v541 = *(char **)(*(uint64_t (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_ + 32))(__dst.__r_.__value_.__r.__words[0]);
  std::string::size_type v1516 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v1516) {
    (*(void (**)(std::string::size_type))(*(void *)v1516 + 8))(v1516);
  }
  if (!v541)
  {
    v540 = 0;
    goto LABEL_880;
  }
  uint64_t v1517 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
  unsigned int v1796 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1517 + 24))(v1517, 10);
  unint64_t v1518 = ((uint64_t (*)(uint64_t (***)(void), char *))(*v1824)[50])(v1824, v541);
  *((unsigned char *)a2 + 70) = 1;
  int v1519 = *((_DWORD *)a2 + 8);
  v1520 = a2[6];
  int v1521 = *((_DWORD *)a2 + 10);
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v1522 = v1520;
  if (v1520 == a2[7])
  {
    unint64_t v1631 = v1518;
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    unint64_t v1518 = v1631;
    v1522 = a2[6];
  }
  unint64_t v1523 = HIDWORD(v1518);
  a2[6] = (uint64_t **)((char *)v1522 - 1);
  *((unsigned char *)v1522 - 1) = 9;
  v1525 = a2[6];
  v1524 = (uint64_t *)a2[7];
  uint64_t v1526 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1525;
  if ((unint64_t)((char *)v1525 - (char *)v1524) <= 7)
  {
    int v1758 = v1518;
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    LODWORD(v1518) = v1758;
    v1524 = (uint64_t *)a2[7];
  }
  __int16 v1527 = v1519 - (_WORD)v1520;
  uint64_t *v1524 = v1526 | 0x400000000;
  v1528 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v1528;
  ++*((_DWORD *)a2 + 16);
  unsigned int v1529 = *((unsigned __int16 *)a2 + 34);
  if (v1529 <= 4) {
    LOWORD(v1529) = 4;
  }
  *((_WORD *)a2 + 34) = v1529;
  int v1530 = *((unsigned __int8 *)a2 + 80);
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1531 = a2[6];
    unint64_t v1532 = ((_BYTE)v1531 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1531 - (char *)v1528 < v1532)
    {
      int v1655 = v1518;
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1531 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      LODWORD(v1518) = v1655;
      a2[6] = (uint64_t **)((char *)a2[6] - v1532);
    }
    else
    {
      v1533 = (uint64_t **)((char *)v1531 - v1532);
      a2[6] = v1533;
      if (!v1532)
      {
LABEL_2411:
        if ((unint64_t)((char *)v1533 - (char *)v1528) <= 3)
        {
          int v1636 = v1518;
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          LODWORD(v1518) = v1636;
          v1533 = a2[6];
          v1528 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1533 - 1) = 0;
        v1535 = (uint64_t **)((char *)v1533 - 4);
        a2[6] = v1535;
        uint64_t v1536 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1535;
        if ((unint64_t)((char *)v1535 - (char *)v1528) <= 7)
        {
          int v1639 = v1518;
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          LODWORD(v1518) = v1639;
          v1528 = (uint64_t *)a2[7];
        }
        uint64_t *v1528 = v1536 | 0x600000000;
        v1528 = (uint64_t *)(a2[7] + 1);
        a2[7] = (uint64_t **)v1528;
        ++*((_DWORD *)a2 + 16);
        unsigned int v1537 = *((unsigned __int16 *)a2 + 34);
        if (v1537 <= 6) {
          LOWORD(v1537) = 6;
        }
        *((_WORD *)a2 + 34) = v1537;
        int v1530 = *((unsigned __int8 *)a2 + 80);
        goto LABEL_2418;
      }
    }
    uint64_t v1534 = 0;
    do
      *((unsigned char *)a2[6] + v1534++) = 0;
    while (v1532 != v1534);
    v1533 = a2[6];
    v1528 = (uint64_t *)a2[7];
    goto LABEL_2411;
  }
LABEL_2418:
  unsigned int v1538 = v1796;
  __int16 v1539 = v1527 + v1521;
  if (v1796 > v1523 && !v1530)
  {
    unsigned int v462 = v527;
    goto LABEL_2472;
  }
  unsigned int v462 = v527;
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1546 = a2[6];
  unint64_t v1547 = ((_BYTE)v1546 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v1546 - (char *)v1528 < v1547)
  {
    int v1656 = v1518;
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1546 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    LODWORD(v1518) = v1656;
    unsigned int v1538 = v1796;
    a2[6] = (uint64_t **)((char *)a2[6] - v1547);
LABEL_2462:
    uint64_t v1549 = 0;
    do
      *((unsigned char *)a2[6] + v1549++) = 0;
    while (v1547 != v1549);
    v1548 = a2[6];
    v1528 = (uint64_t *)a2[7];
    goto LABEL_2465;
  }
  v1548 = (uint64_t **)((char *)v1546 - v1547);
  a2[6] = v1548;
  if (v1547) {
    goto LABEL_2462;
  }
LABEL_2465:
  unsigned int v1550 = v1523 / v1538;
  if ((unint64_t)((char *)v1548 - (char *)v1528) <= 3)
  {
    int v1637 = v1518;
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    LODWORD(v1518) = v1637;
    v1548 = a2[6];
    v1528 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v1548 - 1) = v1550;
  v1551 = (uint64_t **)((char *)v1548 - 4);
  a2[6] = v1551;
  uint64_t v1552 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1551;
  if ((unint64_t)((char *)v1551 - (char *)v1528) <= 7)
  {
    int v1642 = v1518;
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    LODWORD(v1518) = v1642;
    v1528 = (uint64_t *)a2[7];
  }
  uint64_t *v1528 = v1552 | 0x800000000;
  v1528 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v1528;
  ++*((_DWORD *)a2 + 16);
  unsigned int v1553 = *((unsigned __int16 *)a2 + 34);
  if (v1553 <= 8) {
    LOWORD(v1553) = 8;
  }
  *((_WORD *)a2 + 34) = v1553;
  int v1530 = *((unsigned __int8 *)a2 + 80);
LABEL_2472:
  if (v1518 | v1530)
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1554 = a2[6];
    unint64_t v1555 = ((_BYTE)v1554 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1554 - (char *)v1528 < v1555)
    {
      int v1657 = v1518;
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1554 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      LODWORD(v1518) = v1657;
      a2[6] = (uint64_t **)((char *)a2[6] - v1555);
    }
    else
    {
      v1556 = (uint64_t **)((char *)v1554 - v1555);
      a2[6] = v1556;
      if (!v1555) {
        goto LABEL_2480;
      }
    }
    uint64_t v1557 = 0;
    do
      *((unsigned char *)a2[6] + v1557++) = 0;
    while (v1555 != v1557);
    v1556 = a2[6];
    v1528 = (uint64_t *)a2[7];
LABEL_2480:
    if ((unint64_t)((char *)v1556 - (char *)v1528) <= 3)
    {
      int v1638 = v1518;
      sub_1CBF2C904((uint64_t *)a2, 4uLL);
      LODWORD(v1518) = v1638;
      v1556 = a2[6];
      v1528 = (uint64_t *)a2[7];
    }
    *((_DWORD *)v1556 - 1) = v1518;
    v1558 = (uint64_t **)((char *)v1556 - 4);
    a2[6] = v1558;
    uint64_t v1559 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1558;
    if ((unint64_t)((char *)v1558 - (char *)v1528) <= 7)
    {
      sub_1CBF2C904((uint64_t *)a2, 8uLL);
      v1528 = (uint64_t *)a2[7];
    }
    uint64_t *v1528 = v1559 | 0xA00000000;
    v1560 = (uint64_t *)(a2[7] + 1);
    a2[7] = (uint64_t **)v1560;
    ++*((_DWORD *)a2 + 16);
    unsigned int v1561 = *((unsigned __int16 *)a2 + 34);
    if (v1561 <= 0xA) {
      LOWORD(v1561) = 10;
    }
    *((_WORD *)a2 + 34) = v1561;
    if (!*((unsigned char *)a2 + 80)) {
      goto LABEL_2501;
    }
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1562 = a2[6];
    unint64_t v1563 = ((_BYTE)v1562 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1562 - (char *)v1560 < v1563)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1562 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v1563);
    }
    else
    {
      v1564 = (uint64_t **)((char *)v1562 - v1563);
      a2[6] = v1564;
      if (!v1563)
      {
LABEL_2494:
        if ((unint64_t)((char *)v1564 - (char *)v1560) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v1564 = a2[6];
          v1560 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1564 - 1) = 0;
        v1566 = (uint64_t **)((char *)v1564 - 4);
        a2[6] = v1566;
        uint64_t v1567 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1566;
        if ((unint64_t)((char *)v1566 - (char *)v1560) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1560 = (uint64_t *)a2[7];
        }
        uint64_t *v1560 = v1567 | 0xC00000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1568 = *((unsigned __int16 *)a2 + 34);
        if (v1568 <= 0xC) {
          LOWORD(v1568) = 12;
        }
        *((_WORD *)a2 + 34) = v1568;
        goto LABEL_2501;
      }
    }
    uint64_t v1565 = 0;
    do
      *((unsigned char *)a2[6] + v1565++) = 0;
    while (v1563 != v1565);
    v1564 = a2[6];
    v1560 = (uint64_t *)a2[7];
    goto LABEL_2494;
  }
LABEL_2501:
  int v1569 = sub_1CBF2CB78((uint64_t)a2, v1539);
  v540 = (char *)operator new(4uLL);
  *(_DWORD *)v540 = v1569;
  unsigned int v541 = v540 + 4;
LABEL_881:
  int v542 = __srcf;
  if (v536 == v534)
  {
    uint64_t v543 = v541;
    __srcg = v541;
    goto LABEL_1100;
  }
  *((unsigned char *)a2 + 70) = 1;
  v592 = a2[5];
  v593 = a2[6];
  v594 = a2[4];
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  unint64_t v595 = ((_BYTE)v593 - ((_BYTE)v594 + (_BYTE)v592)) & 3;
  v596 = (uint64_t *)a2[7];
  if ((char *)v593 - (char *)v596 < v595)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v593 - ((_BYTE)v594 + (_BYTE)v592)) & 3);
    int v542 = __srcf;
    a2[6] = (uint64_t **)((char *)a2[6] - v595);
  }
  else
  {
    int v597 = (uint64_t **)((char *)v593 - v595);
    a2[6] = (uint64_t **)((char *)v593 - v595);
    if ((((_BYTE)v593 - ((_BYTE)v594 + (_BYTE)v592)) & 3) == 0) {
      goto LABEL_966;
    }
  }
  uint64_t v598 = 0;
  do
    *((unsigned char *)a2[6] + v598++) = 0;
  while (v595 != v598);
  int v597 = a2[6];
  v596 = (uint64_t *)a2[7];
LABEL_966:
  if ((unint64_t)((char *)v597 - (char *)v596) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    int v542 = __srcf;
    int v597 = a2[6];
    v596 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v597 - 1) = v537;
  size_t v599 = (uint64_t **)((char *)v597 - 4);
  a2[6] = v599;
  uint64_t v600 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v599;
  if ((unint64_t)((char *)v599 - (char *)v596) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    int v542 = __srcf;
    v596 = (uint64_t *)a2[7];
  }
  uint64_t *v596 = v600 | 0x800000000;
  uint64_t v601 = (uint64_t)(a2[7] + 1);
  a2[7] = (uint64_t **)v601;
  ++*((_DWORD *)a2 + 16);
  unsigned int v602 = *((unsigned __int16 *)a2 + 34);
  if (v602 <= 8) {
    LOWORD(v602) = 8;
  }
  *((_WORD *)a2 + 34) = v602;
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v603 = a2[6];
  if (v603 == (uint64_t **)v601)
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    int v542 = __srcf;
    v603 = a2[6];
  }
  __int16 v604 = (_WORD)v594 - (_WORD)v593;
  a2[6] = (uint64_t **)((char *)v603 - 1);
  *((unsigned char *)v603 - 1) = 6;
  v606 = a2[6];
  v605 = (uint64_t *)a2[7];
  uint64_t v607 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v606;
  if ((unint64_t)((char *)v606 - (char *)v605) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    int v542 = __srcf;
    v605 = (uint64_t *)a2[7];
  }
  __int16 v608 = v604 + (_WORD)v592;
  uint64_t *v605 = v607 | 0x400000000;
  v609 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v609;
  ++*((_DWORD *)a2 + 16);
  unsigned int v610 = *((unsigned __int16 *)a2 + 34);
  if (v610 <= 4) {
    LOWORD(v610) = 4;
  }
  *((_WORD *)a2 + 34) = v610;
  int v611 = (uint64_t (***)(void, uint64_t, void, uint64_t, uint64_t))v1824;
  if (v542 || *((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v612 = a2[6];
    unint64_t v613 = ((_BYTE)v612 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v612 - (char *)v609 < v613)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v612 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      int v542 = __srcf;
      a2[6] = (uint64_t **)((char *)a2[6] - v613);
    }
    else
    {
      v614 = (uint64_t **)((char *)v612 - v613);
      a2[6] = v614;
      if (!v613)
      {
LABEL_989:
        int v611 = (uint64_t (***)(void, uint64_t, void, uint64_t, uint64_t))v1824;
        if ((unint64_t)((char *)v614 - (char *)v609) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          int v542 = __srcf;
          v614 = a2[6];
          v609 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v614 - 1) = v542;
        uint64_t v616 = (uint64_t **)((char *)v614 - 4);
        a2[6] = v616;
        uint64_t v617 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v616;
        if ((unint64_t)((char *)v616 - (char *)v609) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v609 = (uint64_t *)a2[7];
        }
        uint64_t *v609 = v617 | 0xA00000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v618 = *((unsigned __int16 *)a2 + 34);
        if (v618 <= 0xA) {
          LOWORD(v618) = 10;
        }
        *((_WORD *)a2 + 34) = v618;
        goto LABEL_996;
      }
    }
    uint64_t v615 = 0;
    do
      *((unsigned char *)a2[6] + v615++) = 0;
    while (v613 != v615);
    v614 = a2[6];
    v609 = (uint64_t *)a2[7];
    goto LABEL_989;
  }
LABEL_996:
  unsigned int v619 = (**v611)(v611, 7, 0, 1, 3);
  unsigned int v620 = (**v611)(v611, 6, 0, 1, 1);
  if (v620 > v619 && *((unsigned char *)a2 + 80) == 0) {
    goto LABEL_1028;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v623 = a2[6];
  v622 = (uint64_t *)a2[7];
  unint64_t v624 = ((_BYTE)v623 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v623 - (char *)v622 < v624)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v623 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v624);
  }
  else
  {
    int v625 = (uint64_t **)((char *)v623 - v624);
    a2[6] = v625;
    if (!v624) {
      goto LABEL_1007;
    }
  }
  uint64_t v626 = 0;
  do
    *((unsigned char *)a2[6] + v626++) = 0;
  while (v624 != v626);
  int v625 = a2[6];
  v622 = (uint64_t *)a2[7];
LABEL_1007:
  if ((unint64_t)((char *)v625 - (char *)v622) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    int v625 = a2[6];
    v622 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v625 - 1) = v619 / v620;
  v627 = (uint64_t **)((char *)v625 - 4);
  a2[6] = v627;
  uint64_t v628 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v627;
  if ((unint64_t)((char *)v627 - (char *)v622) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v622 = (uint64_t *)a2[7];
  }
  uint64_t *v622 = v628 | 0xC00000000;
  uint64_t v629 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v629;
  ++*((_DWORD *)a2 + 16);
  unsigned int v630 = *((unsigned __int16 *)a2 + 34);
  if (v630 <= 0xC) {
    LOWORD(v630) = 12;
  }
  *((_WORD *)a2 + 34) = v630;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    uint64_t v631 = a2[6];
    unint64_t v632 = ((_BYTE)v631 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v631 - (char *)v629 < v632)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v631 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v632);
    }
    else
    {
      uint64_t v633 = (uint64_t **)((char *)v631 - v632);
      a2[6] = v633;
      if (!v632)
      {
LABEL_1021:
        if ((unint64_t)((char *)v633 - (char *)v629) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          uint64_t v633 = a2[6];
          uint64_t v629 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v633 - 1) = 0;
        int v635 = (uint64_t **)((char *)v633 - 4);
        a2[6] = v635;
        uint64_t v636 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v635;
        if ((unint64_t)((char *)v635 - (char *)v629) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v629 = (uint64_t *)a2[7];
        }
        *uint64_t v629 = v636 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v637 = *((unsigned __int16 *)a2 + 34);
        if (v637 <= 6) {
          LOWORD(v637) = 6;
        }
        *((_WORD *)a2 + 34) = v637;
        goto LABEL_1028;
      }
    }
    uint64_t v634 = 0;
    do
      *((unsigned char *)a2[6] + v634++) = 0;
    while (v632 != v634);
    uint64_t v633 = a2[6];
    uint64_t v629 = (uint64_t *)a2[7];
    goto LABEL_1021;
  }
LABEL_1028:
  int v638 = sub_1CBF2CB78((uint64_t)a2, v608);
  uint64_t v639 = v541 - v540;
  uint64_t v640 = (v541 - v540) >> 2;
  unint64_t v641 = v640 + 1;
  if ((unint64_t)(v640 + 1) >> 62) {
    goto LABEL_2629;
  }
  int v642 = v638;
  if (v639 >> 1 > v641) {
    unint64_t v641 = v639 >> 1;
  }
  if ((unint64_t)v639 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v643 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v643 = v641;
  }
  if (v643)
  {
    if (v643 >> 62) {
      goto LABEL_2630;
    }
    unsigned int v644 = (char *)operator new(4 * v643);
  }
  else
  {
    unsigned int v644 = 0;
  }
  uint64_t v682 = &v644[4 * v640];
  __srcg = &v644[4 * v643];
  *(_DWORD *)uint64_t v682 = v642;
  uint64_t v543 = v682 + 4;
  if (v541 == v540)
  {
    v684 = v682;
    if (!v540) {
      goto LABEL_1099;
    }
    goto LABEL_1098;
  }
  v683 = &v541[-(v639 & 0xFFFFFFFFFFFFFFFCLL)];
  v684 = &v644[v639 & 3];
  memcpy(v684, v683, v639 & 0xFFFFFFFFFFFFFFFCLL);
  if (v540) {
LABEL_1098:
  }
    operator delete(v540);
LABEL_1099:
  v540 = v684;
LABEL_1100:
  int v685 = (v1709 - v1737) * v1698;
  if (!v685)
  {
    unsigned int v1757 = 0;
    goto LABEL_1193;
  }
  *((unsigned char *)a2 + 70) = 1;
  int v686 = *((_DWORD *)a2 + 8);
  int v687 = *((_DWORD *)a2 + 12);
  int v688 = *((_DWORD *)a2 + 10);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5) & ((v685 & 0xF) != 0)) != 0) {
    unsigned int v689 = (v685 + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v689 = (v1709 - v1737) * v1698;
  }
  uint64_t v690 = (*v1824)[42]();
  unsigned int v691 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v690 + 24))(v690, 4);
  unsigned int v1757 = v689;
  if (v691 <= v689 || *((unsigned char *)a2 + 80) != 0)
  {
    unsigned int v693 = v691;
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    uint64_t v695 = a2[6];
    v694 = (uint64_t *)a2[7];
    unint64_t v696 = ((_BYTE)v695 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v695 - (char *)v694 < v696)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v695 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v696);
    }
    else
    {
      v697 = (uint64_t **)((char *)v695 - v696);
      a2[6] = v697;
      if (!v696)
      {
LABEL_1115:
        int v699 = v1757 / v693;
        if ((unint64_t)((char *)v697 - (char *)v694) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v697 = a2[6];
          v694 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v697 - 1) = v699;
        __int16 v700 = (uint64_t **)((char *)v697 - 4);
        a2[6] = v700;
        uint64_t v701 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v700;
        if ((unint64_t)((char *)v700 - (char *)v694) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v694 = (uint64_t *)a2[7];
        }
        uint64_t *v694 = v701 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v702 = *((unsigned __int16 *)a2 + 34);
        if (v702 <= 8) {
          LOWORD(v702) = 8;
        }
        *((_WORD *)a2 + 34) = v702;
        goto LABEL_1122;
      }
    }
    uint64_t v698 = 0;
    do
      *((unsigned char *)a2[6] + v698++) = 0;
    while (v696 != v698);
    v697 = a2[6];
    v694 = (uint64_t *)a2[7];
    goto LABEL_1115;
  }
LABEL_1122:
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v703 = a2[6];
  if (v703 == a2[7])
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v703 = a2[6];
  }
  a2[6] = (uint64_t **)((char *)v703 - 1);
  *((unsigned char *)v703 - 1) = 3;
  __int16 v705 = a2[6];
  v704 = (uint64_t *)a2[7];
  uint64_t v706 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v705;
  if ((unint64_t)((char *)v705 - (char *)v704) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v704 = (uint64_t *)a2[7];
  }
  uint64_t *v704 = v706 | 0x400000000;
  uint64_t v707 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v707;
  ++*((_DWORD *)a2 + 16);
  unsigned int v708 = *((unsigned __int16 *)a2 + 34);
  if (v708 <= 4) {
    LOWORD(v708) = 4;
  }
  *((_WORD *)a2 + 34) = v708;
  if (!v1737 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_1174;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  __int16 v709 = a2[6];
  unint64_t v710 = ((_BYTE)v709 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v709 - (char *)v707 < v710)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v709 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v710);
  }
  else
  {
    uint64_t v711 = (uint64_t **)((char *)v709 - v710);
    a2[6] = v711;
    if (!v710) {
      goto LABEL_1139;
    }
  }
  uint64_t v712 = 0;
  do
    *((unsigned char *)a2[6] + v712++) = 0;
  while (v710 != v712);
  uint64_t v711 = a2[6];
  uint64_t v707 = (uint64_t *)a2[7];
LABEL_1139:
  if ((unint64_t)((char *)v711 - (char *)v707) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    uint64_t v711 = a2[6];
    uint64_t v707 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v711 - 1) = v1737;
  v713 = (uint64_t **)((char *)v711 - 4);
  a2[6] = v713;
  uint64_t v714 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v713;
  if ((unint64_t)((char *)v713 - (char *)v707) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    uint64_t v707 = (uint64_t *)a2[7];
  }
  *uint64_t v707 = v714 | 0xA00000000;
  uint64_t v715 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v715;
  ++*((_DWORD *)a2 + 16);
  unsigned int v716 = *((unsigned __int16 *)a2 + 34);
  if (v716 <= 0xA) {
    LOWORD(v716) = 10;
  }
  *((_WORD *)a2 + 34) = v716;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1174;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v717 = a2[6];
  unint64_t v718 = ((_BYTE)v717 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v717 - (char *)v715 < v718)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v717 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v718);
  }
  else
  {
    uint64_t v719 = (uint64_t **)((char *)v717 - v718);
    a2[6] = v719;
    if (!v718) {
      goto LABEL_1153;
    }
  }
  uint64_t v720 = 0;
  do
    *((unsigned char *)a2[6] + v720++) = 0;
  while (v718 != v720);
  uint64_t v719 = a2[6];
  uint64_t v715 = (uint64_t *)a2[7];
LABEL_1153:
  if ((unint64_t)((char *)v719 - (char *)v715) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    uint64_t v719 = a2[6];
    uint64_t v715 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v719 - 1) = 0;
  uint64_t v721 = (uint64_t **)((char *)v719 - 4);
  a2[6] = v721;
  uint64_t v722 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v721;
  if ((unint64_t)((char *)v721 - (char *)v715) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    uint64_t v715 = (uint64_t *)a2[7];
  }
  *uint64_t v715 = v722 | 0xC00000000;
  v723 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v723;
  ++*((_DWORD *)a2 + 16);
  unsigned int v724 = *((unsigned __int16 *)a2 + 34);
  if (v724 <= 0xC) {
    LOWORD(v724) = 12;
  }
  *((_WORD *)a2 + 34) = v724;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v725 = a2[6];
    unint64_t v726 = ((_BYTE)v725 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v725 - (char *)v723 < v726)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v725 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v726);
    }
    else
    {
      v727 = (uint64_t **)((char *)v725 - v726);
      a2[6] = v727;
      if (!v726)
      {
LABEL_1167:
        if ((unint64_t)((char *)v727 - (char *)v723) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v727 = a2[6];
          v723 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v727 - 1) = 0;
        v729 = (uint64_t **)((char *)v727 - 4);
        a2[6] = v729;
        uint64_t v730 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v729;
        if ((unint64_t)((char *)v729 - (char *)v723) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v723 = (uint64_t *)a2[7];
        }
        uint64_t *v723 = v730 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v731 = *((unsigned __int16 *)a2 + 34);
        if (v731 <= 6) {
          LOWORD(v731) = 6;
        }
        *((_WORD *)a2 + 34) = v731;
        goto LABEL_1174;
      }
    }
    uint64_t v728 = 0;
    do
      *((unsigned char *)a2[6] + v728++) = 0;
    while (v726 != v728);
    v727 = a2[6];
    v723 = (uint64_t *)a2[7];
    goto LABEL_1167;
  }
LABEL_1174:
  int v732 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v686 - (unsigned __int16)v687 + v688);
  int v733 = v732;
  if (v543 >= __srcg)
  {
    uint64_t v734 = (v543 - v540) >> 2;
    unint64_t v735 = v734 + 1;
    if ((unint64_t)(v734 + 1) >> 62) {
      goto LABEL_2629;
    }
    if ((__srcg - v540) >> 1 > v735) {
      unint64_t v735 = (__srcg - v540) >> 1;
    }
    if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v736 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v736 = v735;
    }
    if (v736)
    {
      if (v736 >> 62) {
        goto LABEL_2630;
      }
      v737 = (char *)operator new(4 * v736);
    }
    else
    {
      v737 = 0;
    }
    v738 = &v737[4 * v734];
    __srcg = &v737[4 * v736];
    *(_DWORD *)v738 = v733;
    v739 = v738 + 4;
    while (v543 != v540)
    {
      int v740 = *((_DWORD *)v543 - 1);
      v543 -= 4;
      *((_DWORD *)v738 - 1) = v740;
      v738 -= 4;
    }
    if (v540) {
      operator delete(v540);
    }
    v540 = v738;
    uint64_t v543 = v739;
  }
  else
  {
    *(_DWORD *)uint64_t v543 = v732;
    v543 += 4;
  }
LABEL_1193:
  int v741 = (v1707 - v1763) * v1714;
  if (!v741)
  {
    unsigned int v1746 = 0;
    goto LABEL_1270;
  }
  *((unsigned char *)a2 + 70) = 1;
  int v742 = *((_DWORD *)a2 + 8);
  int v743 = *((_DWORD *)a2 + 12);
  int v744 = *((_DWORD *)a2 + 10);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5) & ((v741 & 0xF) != 0)) != 0) {
    unsigned int v745 = (v741 + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v745 = (v1707 - v1763) * v1714;
  }
  uint64_t v746 = (*v1824)[42]();
  unsigned int v747 = (*(uint64_t (**)(uint64_t, void))(*(void *)v746 + 24))(v746, 0);
  unsigned int v1746 = v745;
  if (v747 <= v745 || *((unsigned char *)a2 + 80) != 0)
  {
    unsigned int v749 = v747;
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v751 = a2[6];
    v750 = (uint64_t *)a2[7];
    unint64_t v752 = ((_BYTE)v751 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v751 - (char *)v750 < v752)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v751 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v752);
    }
    else
    {
      v753 = (uint64_t **)((char *)v751 - v752);
      a2[6] = v753;
      if (!v752)
      {
LABEL_1208:
        int v755 = v1746 / v749;
        if ((unint64_t)((char *)v753 - (char *)v750) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v753 = a2[6];
          v750 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v753 - 1) = v755;
        v756 = (uint64_t **)((char *)v753 - 4);
        a2[6] = v756;
        uint64_t v757 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v756;
        if ((unint64_t)((char *)v756 - (char *)v750) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v750 = (uint64_t *)a2[7];
        }
        uint64_t *v750 = v757 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v758 = *((unsigned __int16 *)a2 + 34);
        if (v758 <= 8) {
          LOWORD(v758) = 8;
        }
        *((_WORD *)a2 + 34) = v758;
        goto LABEL_1215;
      }
    }
    uint64_t v754 = 0;
    do
      *((unsigned char *)a2[6] + v754++) = 0;
    while (v752 != v754);
    v753 = a2[6];
    v750 = (uint64_t *)a2[7];
    goto LABEL_1208;
  }
LABEL_1215:
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v759 = a2[6];
  if (v759 == a2[7])
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v759 = a2[6];
  }
  a2[6] = (uint64_t **)((char *)v759 - 1);
  *((unsigned char *)v759 - 1) = 1;
  v761 = a2[6];
  v760 = (uint64_t *)a2[7];
  uint64_t v762 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v761;
  if ((unint64_t)((char *)v761 - (char *)v760) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v760 = (uint64_t *)a2[7];
  }
  uint64_t *v760 = v762 | 0x400000000;
  v763 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v763;
  ++*((_DWORD *)a2 + 16);
  unsigned int v764 = *((unsigned __int16 *)a2 + 34);
  if (v764 <= 4) {
    LOWORD(v764) = 4;
  }
  *((_WORD *)a2 + 34) = v764;
  if (!v1763 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_1267;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v765 = a2[6];
  unint64_t v766 = ((_BYTE)v765 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v765 - (char *)v763 < v766)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v765 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v766);
  }
  else
  {
    v767 = (uint64_t **)((char *)v765 - v766);
    a2[6] = v767;
    if (!v766) {
      goto LABEL_1232;
    }
  }
  uint64_t v768 = 0;
  do
    *((unsigned char *)a2[6] + v768++) = 0;
  while (v766 != v768);
  v767 = a2[6];
  v763 = (uint64_t *)a2[7];
LABEL_1232:
  if ((unint64_t)((char *)v767 - (char *)v763) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v767 = a2[6];
    v763 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v767 - 1) = v1763;
  v769 = (uint64_t **)((char *)v767 - 4);
  a2[6] = v769;
  uint64_t v770 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v769;
  if ((unint64_t)((char *)v769 - (char *)v763) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v763 = (uint64_t *)a2[7];
  }
  uint64_t *v763 = v770 | 0xA00000000;
  v771 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v771;
  ++*((_DWORD *)a2 + 16);
  unsigned int v772 = *((unsigned __int16 *)a2 + 34);
  if (v772 <= 0xA) {
    LOWORD(v772) = 10;
  }
  *((_WORD *)a2 + 34) = v772;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1267;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v773 = a2[6];
  unint64_t v774 = ((_BYTE)v773 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v773 - (char *)v771 < v774)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v773 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v774);
  }
  else
  {
    v775 = (uint64_t **)((char *)v773 - v774);
    a2[6] = v775;
    if (!v774) {
      goto LABEL_1246;
    }
  }
  uint64_t v776 = 0;
  do
    *((unsigned char *)a2[6] + v776++) = 0;
  while (v774 != v776);
  v775 = a2[6];
  v771 = (uint64_t *)a2[7];
LABEL_1246:
  if ((unint64_t)((char *)v775 - (char *)v771) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v775 = a2[6];
    v771 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v775 - 1) = 0;
  v777 = (uint64_t **)((char *)v775 - 4);
  a2[6] = v777;
  uint64_t v778 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v777;
  if ((unint64_t)((char *)v777 - (char *)v771) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v771 = (uint64_t *)a2[7];
  }
  uint64_t *v771 = v778 | 0xC00000000;
  v779 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v779;
  ++*((_DWORD *)a2 + 16);
  unsigned int v780 = *((unsigned __int16 *)a2 + 34);
  if (v780 <= 0xC) {
    LOWORD(v780) = 12;
  }
  *((_WORD *)a2 + 34) = v780;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v781 = a2[6];
    unint64_t v782 = ((_BYTE)v781 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v781 - (char *)v779 < v782)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v781 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v782);
    }
    else
    {
      v783 = (uint64_t **)((char *)v781 - v782);
      a2[6] = v783;
      if (!v782)
      {
LABEL_1260:
        if ((unint64_t)((char *)v783 - (char *)v779) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v783 = a2[6];
          v779 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v783 - 1) = 0;
        v785 = (uint64_t **)((char *)v783 - 4);
        a2[6] = v785;
        uint64_t v786 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v785;
        if ((unint64_t)((char *)v785 - (char *)v779) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v779 = (uint64_t *)a2[7];
        }
        uint64_t *v779 = v786 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v787 = *((unsigned __int16 *)a2 + 34);
        if (v787 <= 6) {
          LOWORD(v787) = 6;
        }
        *((_WORD *)a2 + 34) = v787;
        goto LABEL_1267;
      }
    }
    uint64_t v784 = 0;
    do
      *((unsigned char *)a2[6] + v784++) = 0;
    while (v782 != v784);
    v783 = a2[6];
    v779 = (uint64_t *)a2[7];
    goto LABEL_1260;
  }
LABEL_1267:
  int v788 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v742 - (unsigned __int16)v743 + v744);
  int v789 = v788;
  if (v543 < __srcg)
  {
    *(_DWORD *)uint64_t v543 = v788;
    v543 += 4;
LABEL_1270:
    int v790 = v1697;
    goto LABEL_1287;
  }
  uint64_t v791 = (v543 - v540) >> 2;
  unint64_t v792 = v791 + 1;
  if ((unint64_t)(v791 + 1) >> 62) {
    goto LABEL_2629;
  }
  if ((__srcg - v540) >> 1 > v792) {
    unint64_t v792 = (__srcg - v540) >> 1;
  }
  if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v793 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v793 = v792;
  }
  if (v793)
  {
    if (v793 >> 62) {
      goto LABEL_2630;
    }
    v794 = (char *)operator new(4 * v793);
  }
  else
  {
    v794 = 0;
  }
  v795 = &v794[4 * v791];
  __srcg = &v794[4 * v793];
  *(_DWORD *)v795 = v789;
  v796 = v795 + 4;
  if (v543 == v540)
  {
    int v790 = v1697;
    if (!v540) {
      goto LABEL_1286;
    }
  }
  else
  {
    int v790 = v1697;
    do
    {
      int v797 = *((_DWORD *)v543 - 1);
      v543 -= 4;
      *((_DWORD *)v795 - 1) = v797;
      v795 -= 4;
    }
    while (v543 != v540);
    if (!v540) {
      goto LABEL_1286;
    }
  }
  operator delete(v540);
LABEL_1286:
  v540 = v795;
  uint64_t v543 = v796;
LABEL_1287:
  int v798 = (v1705 - v1700) * v790;
  if (!v798)
  {
LABEL_1363:
    v847 = v543;
    goto LABEL_1380;
  }
  *((unsigned char *)a2 + 70) = 1;
  int v799 = *((_DWORD *)a2 + 8);
  int v800 = *((_DWORD *)a2 + 12);
  int v801 = *((_DWORD *)a2 + 10);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5) & ((v798 & 0xF) != 0)) != 0) {
    unsigned int v802 = (v798 + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v802 = v798;
  }
  uint64_t v803 = (*v1824)[42]();
  unsigned int v804 = (*(uint64_t (**)(uint64_t, void))(*(void *)v803 + 24))(v803, 0);
  if (v804 <= v802 || *((unsigned char *)a2 + 80) != 0)
  {
    unsigned int v806 = v804;
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v808 = a2[6];
    v807 = (uint64_t *)a2[7];
    unint64_t v809 = ((_BYTE)v808 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v808 - (char *)v807 < v809)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v808 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v809);
    }
    else
    {
      v810 = (uint64_t **)((char *)v808 - v809);
      a2[6] = v810;
      if (!v809)
      {
LABEL_1302:
        int v812 = v802 / v806;
        if ((unint64_t)((char *)v810 - (char *)v807) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v810 = a2[6];
          v807 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v810 - 1) = v812;
        v813 = (uint64_t **)((char *)v810 - 4);
        a2[6] = v813;
        uint64_t v814 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v813;
        if ((unint64_t)((char *)v813 - (char *)v807) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v807 = (uint64_t *)a2[7];
        }
        uint64_t *v807 = v814 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v815 = *((unsigned __int16 *)a2 + 34);
        if (v815 <= 8) {
          LOWORD(v815) = 8;
        }
        *((_WORD *)a2 + 34) = v815;
        goto LABEL_1309;
      }
    }
    uint64_t v811 = 0;
    do
      *((unsigned char *)a2[6] + v811++) = 0;
    while (v809 != v811);
    v810 = a2[6];
    v807 = (uint64_t *)a2[7];
    goto LABEL_1302;
  }
LABEL_1309:
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v816 = a2[6];
  if (v816 == a2[7])
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v816 = a2[6];
  }
  a2[6] = (uint64_t **)((char *)v816 - 1);
  *((unsigned char *)v816 - 1) = 11;
  v818 = a2[6];
  v817 = (uint64_t *)a2[7];
  uint64_t v819 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v818;
  if ((unint64_t)((char *)v818 - (char *)v817) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v817 = (uint64_t *)a2[7];
  }
  uint64_t *v817 = v819 | 0x400000000;
  v820 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v820;
  ++*((_DWORD *)a2 + 16);
  unsigned int v821 = *((unsigned __int16 *)a2 + 34);
  if (v821 <= 4) {
    LOWORD(v821) = 4;
  }
  *((_WORD *)a2 + 34) = v821;
  if (!v1700 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_1361;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v822 = a2[6];
  unint64_t v823 = ((_BYTE)v822 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v822 - (char *)v820 < v823)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v822 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v823);
  }
  else
  {
    v824 = (uint64_t **)((char *)v822 - v823);
    a2[6] = v824;
    if (!v823) {
      goto LABEL_1326;
    }
  }
  uint64_t v825 = 0;
  do
    *((unsigned char *)a2[6] + v825++) = 0;
  while (v823 != v825);
  v824 = a2[6];
  v820 = (uint64_t *)a2[7];
LABEL_1326:
  if ((unint64_t)((char *)v824 - (char *)v820) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v824 = a2[6];
    v820 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v824 - 1) = v1700;
  v826 = (uint64_t **)((char *)v824 - 4);
  a2[6] = v826;
  uint64_t v827 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v826;
  if ((unint64_t)((char *)v826 - (char *)v820) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v820 = (uint64_t *)a2[7];
  }
  uint64_t *v820 = v827 | 0xA00000000;
  v828 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v828;
  ++*((_DWORD *)a2 + 16);
  unsigned int v829 = *((unsigned __int16 *)a2 + 34);
  if (v829 <= 0xA) {
    LOWORD(v829) = 10;
  }
  *((_WORD *)a2 + 34) = v829;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1361;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v830 = a2[6];
  unint64_t v831 = ((_BYTE)v830 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v830 - (char *)v828 < v831)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v830 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v831);
  }
  else
  {
    v832 = (uint64_t **)((char *)v830 - v831);
    a2[6] = v832;
    if (!v831) {
      goto LABEL_1340;
    }
  }
  uint64_t v833 = 0;
  do
    *((unsigned char *)a2[6] + v833++) = 0;
  while (v831 != v833);
  v832 = a2[6];
  v828 = (uint64_t *)a2[7];
LABEL_1340:
  if ((unint64_t)((char *)v832 - (char *)v828) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v832 = a2[6];
    v828 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v832 - 1) = 0;
  v834 = (uint64_t **)((char *)v832 - 4);
  a2[6] = v834;
  uint64_t v835 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v834;
  if ((unint64_t)((char *)v834 - (char *)v828) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v828 = (uint64_t *)a2[7];
  }
  uint64_t *v828 = v835 | 0xC00000000;
  v836 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v836;
  ++*((_DWORD *)a2 + 16);
  unsigned int v837 = *((unsigned __int16 *)a2 + 34);
  if (v837 <= 0xC) {
    LOWORD(v837) = 12;
  }
  *((_WORD *)a2 + 34) = v837;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v838 = a2[6];
    unint64_t v839 = ((_BYTE)v838 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v838 - (char *)v836 < v839)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v838 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v839);
    }
    else
    {
      v840 = (uint64_t **)((char *)v838 - v839);
      a2[6] = v840;
      if (!v839)
      {
LABEL_1354:
        if ((unint64_t)((char *)v840 - (char *)v836) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v840 = a2[6];
          v836 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v840 - 1) = 0;
        v842 = (uint64_t **)((char *)v840 - 4);
        a2[6] = v842;
        uint64_t v843 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v842;
        if ((unint64_t)((char *)v842 - (char *)v836) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v836 = (uint64_t *)a2[7];
        }
        uint64_t *v836 = v843 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v844 = *((unsigned __int16 *)a2 + 34);
        if (v844 <= 6) {
          LOWORD(v844) = 6;
        }
        *((_WORD *)a2 + 34) = v844;
        goto LABEL_1361;
      }
    }
    uint64_t v841 = 0;
    do
      *((unsigned char *)a2[6] + v841++) = 0;
    while (v839 != v841);
    v840 = a2[6];
    v836 = (uint64_t *)a2[7];
    goto LABEL_1354;
  }
LABEL_1361:
  int v845 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v799 - (unsigned __int16)v800 + v801);
  int v846 = v845;
  if (v543 < __srcg)
  {
    *(_DWORD *)uint64_t v543 = v845;
    v543 += 4;
    goto LABEL_1363;
  }
  uint64_t v848 = (v543 - v540) >> 2;
  unint64_t v849 = v848 + 1;
  if ((unint64_t)(v848 + 1) >> 62) {
    goto LABEL_2629;
  }
  if ((__srcg - v540) >> 1 > v849) {
    unint64_t v849 = (__srcg - v540) >> 1;
  }
  if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v850 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v850 = v849;
  }
  if (v850)
  {
    if (v850 >> 62) {
      goto LABEL_2630;
    }
    v851 = (char *)operator new(4 * v850);
  }
  else
  {
    v851 = 0;
  }
  v852 = &v851[4 * v848];
  __srcg = &v851[4 * v850];
  *(_DWORD *)v852 = v846;
  v847 = v852 + 4;
  while (v543 != v540)
  {
    int v853 = *((_DWORD *)v543 - 1);
    v543 -= 4;
    *((_DWORD *)v852 - 1) = v853;
    v852 -= 4;
  }
  if (v540) {
    operator delete(v540);
  }
  v540 = v852;
LABEL_1380:
  int v854 = (v1703 - v1761) * v1711;
  if (!v854)
  {
    unsigned int v1764 = 0;
    v877 = v1824;
    goto LABEL_1475;
  }
  *((unsigned char *)a2 + 70) = 1;
  int v855 = *((_DWORD *)a2 + 8);
  int v856 = *((_DWORD *)a2 + 12);
  int v857 = *((_DWORD *)a2 + 10);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5) & ((v854 & 0xF) != 0)) != 0) {
    unsigned int v858 = (v854 + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v858 = (v1703 - v1761) * v1711;
  }
  uint64_t v859 = (*v1824)[42]();
  unsigned int v860 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v859 + 24))(v859, 1);
  unsigned int v1764 = v858;
  if (v860 <= v858 || *((unsigned char *)a2 + 80) != 0)
  {
    unsigned int v862 = v860;
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v864 = a2[6];
    v863 = (uint64_t *)a2[7];
    unint64_t v865 = ((_BYTE)v864 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v864 - (char *)v863 < v865)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v864 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v865);
    }
    else
    {
      v866 = (uint64_t **)((char *)v864 - v865);
      a2[6] = v866;
      if (!v865)
      {
LABEL_1395:
        int v868 = v1764 / v862;
        if ((unint64_t)((char *)v866 - (char *)v863) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v866 = a2[6];
          v863 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v866 - 1) = v868;
        v869 = (uint64_t **)((char *)v866 - 4);
        a2[6] = v869;
        uint64_t v870 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v869;
        if ((unint64_t)((char *)v869 - (char *)v863) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v863 = (uint64_t *)a2[7];
        }
        uint64_t *v863 = v870 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v871 = *((unsigned __int16 *)a2 + 34);
        if (v871 <= 8) {
          LOWORD(v871) = 8;
        }
        *((_WORD *)a2 + 34) = v871;
        goto LABEL_1402;
      }
    }
    uint64_t v867 = 0;
    do
      *((unsigned char *)a2[6] + v867++) = 0;
    while (v865 != v867);
    v866 = a2[6];
    v863 = (uint64_t *)a2[7];
    goto LABEL_1395;
  }
LABEL_1402:
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v872 = a2[6];
  if (v872 == a2[7])
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v872 = a2[6];
  }
  __int16 v873 = v855 - v856 + v857;
  a2[6] = (uint64_t **)((char *)v872 - 1);
  *((unsigned char *)v872 - 1) = 2;
  v875 = a2[6];
  v874 = (uint64_t *)a2[7];
  uint64_t v876 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v875;
  v877 = v1824;
  if ((unint64_t)((char *)v875 - (char *)v874) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v874 = (uint64_t *)a2[7];
  }
  uint64_t *v874 = v876 | 0x400000000;
  v878 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v878;
  ++*((_DWORD *)a2 + 16);
  unsigned int v879 = *((unsigned __int16 *)a2 + 34);
  if (v879 <= 4) {
    LOWORD(v879) = 4;
  }
  *((_WORD *)a2 + 34) = v879;
  if (!v1761 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_1454;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v880 = a2[6];
  unint64_t v881 = ((_BYTE)v880 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v880 - (char *)v878 < v881)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v880 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v881);
  }
  else
  {
    v882 = (uint64_t **)((char *)v880 - v881);
    a2[6] = v882;
    if (!v881) {
      goto LABEL_1419;
    }
  }
  uint64_t v883 = 0;
  do
    *((unsigned char *)a2[6] + v883++) = 0;
  while (v881 != v883);
  v882 = a2[6];
  v878 = (uint64_t *)a2[7];
LABEL_1419:
  if ((unint64_t)((char *)v882 - (char *)v878) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v882 = a2[6];
    v878 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v882 - 1) = v1761;
  v884 = (uint64_t **)((char *)v882 - 4);
  a2[6] = v884;
  uint64_t v885 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v884;
  if ((unint64_t)((char *)v884 - (char *)v878) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v878 = (uint64_t *)a2[7];
  }
  uint64_t *v878 = v885 | 0xA00000000;
  v886 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v886;
  ++*((_DWORD *)a2 + 16);
  unsigned int v887 = *((unsigned __int16 *)a2 + 34);
  if (v887 <= 0xA) {
    LOWORD(v887) = 10;
  }
  *((_WORD *)a2 + 34) = v887;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1454;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v888 = a2[6];
  unint64_t v889 = ((_BYTE)v888 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v888 - (char *)v886 < v889)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v888 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v889);
  }
  else
  {
    v890 = (uint64_t **)((char *)v888 - v889);
    a2[6] = v890;
    if (!v889) {
      goto LABEL_1433;
    }
  }
  uint64_t v891 = 0;
  do
    *((unsigned char *)a2[6] + v891++) = 0;
  while (v889 != v891);
  v890 = a2[6];
  v886 = (uint64_t *)a2[7];
LABEL_1433:
  if ((unint64_t)((char *)v890 - (char *)v886) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v890 = a2[6];
    v886 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v890 - 1) = 0;
  v892 = (uint64_t **)((char *)v890 - 4);
  a2[6] = v892;
  uint64_t v893 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v892;
  if ((unint64_t)((char *)v892 - (char *)v886) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v886 = (uint64_t *)a2[7];
  }
  uint64_t *v886 = v893 | 0xC00000000;
  v894 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v894;
  ++*((_DWORD *)a2 + 16);
  unsigned int v895 = *((unsigned __int16 *)a2 + 34);
  if (v895 <= 0xC) {
    LOWORD(v895) = 12;
  }
  *((_WORD *)a2 + 34) = v895;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v896 = a2[6];
    unint64_t v897 = ((_BYTE)v896 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v896 - (char *)v894 < v897)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v896 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v897);
    }
    else
    {
      v898 = (uint64_t **)((char *)v896 - v897);
      a2[6] = v898;
      if (!v897)
      {
LABEL_1447:
        if ((unint64_t)((char *)v898 - (char *)v894) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v898 = a2[6];
          v894 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v898 - 1) = 0;
        v900 = (uint64_t **)((char *)v898 - 4);
        a2[6] = v900;
        uint64_t v901 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v900;
        if ((unint64_t)((char *)v900 - (char *)v894) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v894 = (uint64_t *)a2[7];
        }
        uint64_t *v894 = v901 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v902 = *((unsigned __int16 *)a2 + 34);
        if (v902 <= 6) {
          LOWORD(v902) = 6;
        }
        *((_WORD *)a2 + 34) = v902;
        goto LABEL_1454;
      }
    }
    uint64_t v899 = 0;
    do
      *((unsigned char *)a2[6] + v899++) = 0;
    while (v897 != v899);
    v898 = a2[6];
    v894 = (uint64_t *)a2[7];
    goto LABEL_1447;
  }
LABEL_1454:
  int v903 = sub_1CBF2CB78((uint64_t)a2, v873);
  int v904 = v903;
  if (v847 >= __srcg)
  {
    uint64_t v905 = (v847 - v540) >> 2;
    unint64_t v906 = v905 + 1;
    if ((unint64_t)(v905 + 1) >> 62) {
      goto LABEL_2629;
    }
    if ((__srcg - v540) >> 1 > v906) {
      unint64_t v906 = (__srcg - v540) >> 1;
    }
    if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v907 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v907 = v906;
    }
    if (v907)
    {
      if (v907 >> 62) {
        goto LABEL_2630;
      }
      v908 = (char *)operator new(4 * v907);
    }
    else
    {
      v908 = 0;
    }
    v909 = &v908[4 * v905];
    __srcg = &v908[4 * v907];
    *(_DWORD *)v909 = v904;
    v910 = v909 + 4;
    while (v847 != v540)
    {
      int v911 = *((_DWORD *)v847 - 1);
      v847 -= 4;
      *((_DWORD *)v909 - 1) = v911;
      v909 -= 4;
    }
    if (v540) {
      operator delete(v540);
    }
    v540 = v909;
    v847 = v910;
  }
  else
  {
    *(_DWORD *)v847 = v903;
    v847 += 4;
  }
LABEL_1475:
  char v912 = v1811;
  if (!v1811)
  {
LABEL_1552:
    v961 = v847;
    goto LABEL_1569;
  }
  *((unsigned char *)a2 + 70) = 1;
  int v913 = *((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 12) + *((_DWORD *)a2 + 10);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5) & ((v912 & 0xF) != 0)) != 0) {
    unsigned int v914 = (v1811 + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v914 = v1811;
  }
  uint64_t v915 = ((uint64_t (*)(uint64_t (***)(void)))(*v877)[42])(v877);
  unsigned int v916 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v915 + 24))(v915, 5);
  if (v916 > v914 && *((unsigned char *)a2 + 80) == 0) {
    goto LABEL_1506;
  }
  unsigned int v918 = v916;
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v920 = a2[6];
  v919 = (uint64_t *)a2[7];
  unint64_t v921 = ((_BYTE)v920 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v920 - (char *)v919 < v921)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v920 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v921);
  }
  else
  {
    v922 = (uint64_t **)((char *)v920 - v921);
    a2[6] = v922;
    if (!v921) {
      goto LABEL_1490;
    }
  }
  uint64_t v923 = 0;
  do
    *((unsigned char *)a2[6] + v923++) = 0;
  while (v921 != v923);
  v922 = a2[6];
  v919 = (uint64_t *)a2[7];
LABEL_1490:
  int v924 = v914 / v918;
  v877 = v1824;
  if ((unint64_t)((char *)v922 - (char *)v919) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v922 = a2[6];
    v919 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v922 - 1) = v924;
  v925 = (uint64_t **)((char *)v922 - 4);
  a2[6] = v925;
  uint64_t v926 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v925;
  if ((unint64_t)((char *)v925 - (char *)v919) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v919 = (uint64_t *)a2[7];
  }
  uint64_t *v919 = v926 | 0x800000000;
  uint64_t v927 = (uint64_t)(a2[7] + 1);
  a2[7] = (uint64_t **)v927;
  ++*((_DWORD *)a2 + 16);
  unsigned int v928 = *((unsigned __int16 *)a2 + 34);
  if (v928 <= 8) {
    LOWORD(v928) = 8;
  }
  *((_WORD *)a2 + 34) = v928;
  if (!*((unsigned char *)a2 + 80))
  {
LABEL_1506:
    int v934 = 0;
    goto LABEL_1507;
  }
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v929 = a2[6];
  if (v929 == (uint64_t **)v927)
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v929 = a2[6];
  }
  a2[6] = (uint64_t **)((char *)v929 - 1);
  *((unsigned char *)v929 - 1) = 0;
  v931 = a2[6];
  v930 = (uint64_t *)a2[7];
  uint64_t v932 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v931;
  if ((unint64_t)((char *)v931 - (char *)v930) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v930 = (uint64_t *)a2[7];
  }
  uint64_t *v930 = v932 | 0x400000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v933 = *((unsigned __int16 *)a2 + 34);
  if (v933 <= 4) {
    LOWORD(v933) = 4;
  }
  *((_WORD *)a2 + 34) = v933;
  int v934 = *((unsigned __int8 *)a2 + 80);
LABEL_1507:
  if (!(v1804 | v934)) {
    goto LABEL_1550;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v936 = a2[6];
  v935 = (uint64_t *)a2[7];
  unint64_t v937 = ((_BYTE)v936 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v936 - (char *)v935 < v937)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v936 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v937);
  }
  else
  {
    v938 = (uint64_t **)((char *)v936 - v937);
    a2[6] = v938;
    if (!v937) {
      goto LABEL_1515;
    }
  }
  uint64_t v939 = 0;
  do
    *((unsigned char *)a2[6] + v939++) = 0;
  while (v937 != v939);
  v938 = a2[6];
  v935 = (uint64_t *)a2[7];
LABEL_1515:
  if ((unint64_t)((char *)v938 - (char *)v935) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v938 = a2[6];
    v935 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v938 - 1) = v1804;
  v940 = (uint64_t **)((char *)v938 - 4);
  a2[6] = v940;
  uint64_t v941 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v940;
  if ((unint64_t)((char *)v940 - (char *)v935) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v935 = (uint64_t *)a2[7];
  }
  uint64_t *v935 = v941 | 0xA00000000;
  v942 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v942;
  ++*((_DWORD *)a2 + 16);
  unsigned int v943 = *((unsigned __int16 *)a2 + 34);
  if (v943 <= 0xA) {
    LOWORD(v943) = 10;
  }
  *((_WORD *)a2 + 34) = v943;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1550;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v944 = a2[6];
  unint64_t v945 = ((_BYTE)v944 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v944 - (char *)v942 < v945)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v944 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v945);
  }
  else
  {
    v946 = (uint64_t **)((char *)v944 - v945);
    a2[6] = v946;
    if (!v945) {
      goto LABEL_1529;
    }
  }
  uint64_t v947 = 0;
  do
    *((unsigned char *)a2[6] + v947++) = 0;
  while (v945 != v947);
  v946 = a2[6];
  v942 = (uint64_t *)a2[7];
LABEL_1529:
  if ((unint64_t)((char *)v946 - (char *)v942) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v946 = a2[6];
    v942 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v946 - 1) = 0;
  v948 = (uint64_t **)((char *)v946 - 4);
  a2[6] = v948;
  uint64_t v949 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v948;
  if ((unint64_t)((char *)v948 - (char *)v942) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v942 = (uint64_t *)a2[7];
  }
  uint64_t *v942 = v949 | 0xC00000000;
  v950 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v950;
  ++*((_DWORD *)a2 + 16);
  unsigned int v951 = *((unsigned __int16 *)a2 + 34);
  if (v951 <= 0xC) {
    LOWORD(v951) = 12;
  }
  *((_WORD *)a2 + 34) = v951;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v952 = a2[6];
    unint64_t v953 = ((_BYTE)v952 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v952 - (char *)v950 < v953)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v952 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v953);
    }
    else
    {
      v954 = (uint64_t **)((char *)v952 - v953);
      a2[6] = v954;
      if (!v953)
      {
LABEL_1543:
        if ((unint64_t)((char *)v954 - (char *)v950) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v954 = a2[6];
          v950 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v954 - 1) = 0;
        v956 = (uint64_t **)((char *)v954 - 4);
        a2[6] = v956;
        uint64_t v957 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v956;
        if ((unint64_t)((char *)v956 - (char *)v950) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v950 = (uint64_t *)a2[7];
        }
        uint64_t *v950 = v957 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v958 = *((unsigned __int16 *)a2 + 34);
        if (v958 <= 6) {
          LOWORD(v958) = 6;
        }
        *((_WORD *)a2 + 34) = v958;
        goto LABEL_1550;
      }
    }
    uint64_t v955 = 0;
    do
      *((unsigned char *)a2[6] + v955++) = 0;
    while (v953 != v955);
    v954 = a2[6];
    v950 = (uint64_t *)a2[7];
    goto LABEL_1543;
  }
LABEL_1550:
  int v959 = sub_1CBF2CB78((uint64_t)a2, v913);
  int v960 = v959;
  if (v847 < __srcg)
  {
    *(_DWORD *)v847 = v959;
    v847 += 4;
    goto LABEL_1552;
  }
  uint64_t v962 = (v847 - v540) >> 2;
  unint64_t v963 = v962 + 1;
  if ((unint64_t)(v962 + 1) >> 62) {
    goto LABEL_2629;
  }
  if ((__srcg - v540) >> 1 > v963) {
    unint64_t v963 = (__srcg - v540) >> 1;
  }
  if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v964 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v964 = v963;
  }
  if (v964)
  {
    if (v964 >> 62) {
      goto LABEL_2630;
    }
    v965 = (char *)operator new(4 * v964);
  }
  else
  {
    v965 = 0;
  }
  v966 = &v965[4 * v962];
  __srcg = &v965[4 * v964];
  *(_DWORD *)v966 = v960;
  v961 = v966 + 4;
  while (v847 != v540)
  {
    int v967 = *((_DWORD *)v847 - 1);
    v847 -= 4;
    *((_DWORD *)v966 - 1) = v967;
    v966 -= 4;
  }
  if (v540) {
    operator delete(v540);
  }
  v540 = v966;
LABEL_1569:
  unsigned int v968 = v1774;
  if (!v1774)
  {
    unsigned int v1762 = 0;
    goto LABEL_1661;
  }
  *((unsigned char *)a2 + 70) = 1;
  v969 = v877;
  int v970 = *((_DWORD *)a2 + 8);
  int v971 = *((_DWORD *)a2 + 12);
  int v972 = *((_DWORD *)a2 + 10);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 920))(*a1, a1[39], a5) & ((v1774 & 0xF) != 0)) != 0) {
    unsigned int v968 = (v1774 + 15) & 0xFFFFFFF0;
  }
  uint64_t v973 = ((uint64_t (*)(uint64_t (***)(void)))(*v969)[42])(v969);
  unsigned int v974 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v973 + 24))(v973, 3);
  unsigned int v1762 = v968;
  if (v974 <= v968 || *((unsigned char *)a2 + 80) != 0)
  {
    unsigned int v976 = v974;
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v978 = a2[6];
    v977 = (uint64_t *)a2[7];
    unint64_t v979 = ((_BYTE)v978 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v978 - (char *)v977 < v979)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v978 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v979);
    }
    else
    {
      v980 = (uint64_t **)((char *)v978 - v979);
      a2[6] = v980;
      if (!v979)
      {
LABEL_1583:
        int v982 = v1762 / v976;
        if ((unint64_t)((char *)v980 - (char *)v977) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v980 = a2[6];
          v977 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v980 - 1) = v982;
        v983 = (uint64_t **)((char *)v980 - 4);
        a2[6] = v983;
        uint64_t v984 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v983;
        if ((unint64_t)((char *)v983 - (char *)v977) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v977 = (uint64_t *)a2[7];
        }
        uint64_t *v977 = v984 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v985 = *((unsigned __int16 *)a2 + 34);
        if (v985 <= 8) {
          LOWORD(v985) = 8;
        }
        *((_WORD *)a2 + 34) = v985;
        goto LABEL_1590;
      }
    }
    uint64_t v981 = 0;
    do
      *((unsigned char *)a2[6] + v981++) = 0;
    while (v979 != v981);
    v980 = a2[6];
    v977 = (uint64_t *)a2[7];
    goto LABEL_1583;
  }
LABEL_1590:
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v986 = a2[6];
  if (v986 == a2[7])
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v986 = a2[6];
  }
  __int16 v987 = v970 - v971 + v972;
  a2[6] = (uint64_t **)((char *)v986 - 1);
  *((unsigned char *)v986 - 1) = 7;
  v989 = a2[6];
  v988 = (uint64_t *)a2[7];
  uint64_t v990 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v989;
  v877 = v1824;
  if ((unint64_t)((char *)v989 - (char *)v988) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v988 = (uint64_t *)a2[7];
  }
  uint64_t *v988 = v990 | 0x400000000;
  v991 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v991;
  ++*((_DWORD *)a2 + 16);
  unsigned int v992 = *((unsigned __int16 *)a2 + 34);
  if (v992 <= 4) {
    LOWORD(v992) = 4;
  }
  *((_WORD *)a2 + 34) = v992;
  if (!v1750 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_1642;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v993 = a2[6];
  unint64_t v994 = ((_BYTE)v993 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v993 - (char *)v991 < v994)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v993 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v994);
  }
  else
  {
    v995 = (uint64_t **)((char *)v993 - v994);
    a2[6] = v995;
    if (!v994) {
      goto LABEL_1607;
    }
  }
  uint64_t v996 = 0;
  do
    *((unsigned char *)a2[6] + v996++) = 0;
  while (v994 != v996);
  v995 = a2[6];
  v991 = (uint64_t *)a2[7];
LABEL_1607:
  if ((unint64_t)((char *)v995 - (char *)v991) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v995 = a2[6];
    v991 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v995 - 1) = v1750;
  v997 = (uint64_t **)((char *)v995 - 4);
  a2[6] = v997;
  uint64_t v998 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v997;
  if ((unint64_t)((char *)v997 - (char *)v991) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v991 = (uint64_t *)a2[7];
  }
  uint64_t *v991 = v998 | 0xA00000000;
  v999 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v999;
  ++*((_DWORD *)a2 + 16);
  unsigned int v1000 = *((unsigned __int16 *)a2 + 34);
  if (v1000 <= 0xA) {
    LOWORD(v1000) = 10;
  }
  *((_WORD *)a2 + 34) = v1000;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_1642;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1001 = a2[6];
  unint64_t v1002 = ((_BYTE)v1001 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v1001 - (char *)v999 < v1002)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1001 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v1002);
  }
  else
  {
    v1003 = (uint64_t **)((char *)v1001 - v1002);
    a2[6] = v1003;
    if (!v1002) {
      goto LABEL_1621;
    }
  }
  uint64_t v1004 = 0;
  do
    *((unsigned char *)a2[6] + v1004++) = 0;
  while (v1002 != v1004);
  v1003 = a2[6];
  v999 = (uint64_t *)a2[7];
LABEL_1621:
  if ((unint64_t)((char *)v1003 - (char *)v999) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v1003 = a2[6];
    v999 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v1003 - 1) = 0;
  v1005 = (uint64_t **)((char *)v1003 - 4);
  a2[6] = v1005;
  uint64_t v1006 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1005;
  if ((unint64_t)((char *)v1005 - (char *)v999) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v999 = (uint64_t *)a2[7];
  }
  uint64_t *v999 = v1006 | 0xC00000000;
  v1007 = (uint64_t *)(a2[7] + 1);
  a2[7] = (uint64_t **)v1007;
  ++*((_DWORD *)a2 + 16);
  unsigned int v1008 = *((unsigned __int16 *)a2 + 34);
  if (v1008 <= 0xC) {
    LOWORD(v1008) = 12;
  }
  *((_WORD *)a2 + 34) = v1008;
  if (*((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1009 = a2[6];
    unint64_t v1010 = ((_BYTE)v1009 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1009 - (char *)v1007 < v1010)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1009 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v1010);
    }
    else
    {
      v1011 = (uint64_t **)((char *)v1009 - v1010);
      a2[6] = v1011;
      if (!v1010)
      {
LABEL_1635:
        if ((unint64_t)((char *)v1011 - (char *)v1007) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v1011 = a2[6];
          v1007 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1011 - 1) = 0;
        v1013 = (uint64_t **)((char *)v1011 - 4);
        a2[6] = v1013;
        uint64_t v1014 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1013;
        if ((unint64_t)((char *)v1013 - (char *)v1007) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1007 = (uint64_t *)a2[7];
        }
        uint64_t *v1007 = v1014 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1015 = *((unsigned __int16 *)a2 + 34);
        if (v1015 <= 6) {
          LOWORD(v1015) = 6;
        }
        *((_WORD *)a2 + 34) = v1015;
        goto LABEL_1642;
      }
    }
    uint64_t v1012 = 0;
    do
      *((unsigned char *)a2[6] + v1012++) = 0;
    while (v1010 != v1012);
    v1011 = a2[6];
    v1007 = (uint64_t *)a2[7];
    goto LABEL_1635;
  }
LABEL_1642:
  int v1016 = sub_1CBF2CB78((uint64_t)a2, v987);
  int v1017 = v1016;
  if (v961 < __srcg)
  {
    *(_DWORD *)v961 = v1016;
    v961 += 4;
    goto LABEL_1661;
  }
  uint64_t v1018 = (v961 - v540) >> 2;
  unint64_t v1019 = v1018 + 1;
  if ((unint64_t)(v1018 + 1) >> 62) {
    goto LABEL_2629;
  }
  if ((__srcg - v540) >> 1 > v1019) {
    unint64_t v1019 = (__srcg - v540) >> 1;
  }
  if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v1020 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1020 = v1019;
  }
  if (v1020)
  {
    if (!(v1020 >> 62))
    {
      v1021 = (char *)operator new(4 * v1020);
      goto LABEL_1655;
    }
LABEL_2630:
    sub_1CB833614();
  }
  v1021 = 0;
LABEL_1655:
  v1022 = &v1021[4 * v1018];
  __srcg = &v1021[4 * v1020];
  *(_DWORD *)v1022 = v1017;
  v1023 = v1022 + 4;
  while (v961 != v540)
  {
    int v1024 = *((_DWORD *)v961 - 1);
    v961 -= 4;
    *((_DWORD *)v1022 - 1) = v1024;
    v1022 -= 4;
  }
  if (v540) {
    operator delete(v540);
  }
  v540 = v1022;
  v961 = v1023;
LABEL_1661:
  ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v877)[16])(&__dst, v877, 6);
  ((void (*)(uint64_t ****__return_ptr, uint64_t (***)(void), uint64_t))(*v877)[17])(&v1825, v877, 6);
  v1025 = v1825;
  std::string::size_type v1751 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    std::string::size_type v1026 = __dst.__r_.__value_.__r.__words[0];
    if (v1025)
    {
LABEL_1663:
      ((void (*)(std::string *__return_ptr, uint64_t ***))(*v1025)[2])(&__dst, v1025);
      std::string::size_type v1027 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_1664;
    }
  }
  else
  {
    std::string::size_type v1026 = 0;
    if (v1825) {
      goto LABEL_1663;
    }
  }
  std::string::size_type v1027 = 0;
LABEL_1664:
  v1738 = v1025;
  v1794 = (void *)v1027;
  if (((*(uint64_t (**)(std::string::size_type))(*(void *)v1026 + 24))(v1026) & 1) == 0)
  {
    while (1)
    {
      v1813 = v540;
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__r.__words[0] = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v1026 + 32))(v1026);
      v1060 = sub_1CB91FE08((uint64_t)v1841, &__dst);
      v1061 = (void *)(v1060[1] - 8 * *(unsigned int *)(v1060[1] + 8));
      uint64_t v1062 = *(void *)(v1061[1] + 128);
      uint64_t v1808 = *(void *)(v1061[2] + 128);
      uint64_t v1063 = *(void *)(v1061[3] + 128);
      uint64_t v1064 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
      unsigned int v1065 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1064 + 24))(v1064, 7);
      unint64_t v1066 = ((uint64_t (*)(uint64_t (***)(void), std::string::size_type))(*v1824)[50])(v1824, __dst.__r_.__value_.__r.__words[0]);
      unint64_t v1067 = HIDWORD(v1066);
      int v1068 = v1066;
      if ((v1065 + HIDWORD(v1066) - 1) / v1065 + v1066 <= v462) {
        unsigned int v1069 = v462;
      }
      else {
        unsigned int v1069 = (v1065 + HIDWORD(v1066) - 1) / v1065 + v1066;
      }
      if ((((v1066 & 0xF00000000) != 0) & (*(unsigned __int8 (**)(void))(*(void *)*a1 + 920))()) != 0) {
        unsigned int v1070 = (v1067 + 15) & 0xFFFFFFF0;
      }
      else {
        unsigned int v1070 = v1067;
      }
      v1071 = (unint64_t *)(v1063 + 24);
      if (*(_DWORD *)(v1063 + 32) >= 0x41u) {
        v1071 = (unint64_t *)*v1071;
      }
      unint64_t v1072 = *v1071;
      *((unsigned char *)a2 + 70) = 1;
      v1073 = a2[5];
      v1074 = a2[6];
      v1075 = a2[4];
      if (v1065 <= v1070 || *((unsigned char *)a2 + 80)) {
        break;
      }
LABEL_1743:
      v1084 = (void *)(v1062 + 24);
      if (*(_DWORD *)(v1062 + 32) >= 0x41u) {
        v1084 = (void *)*v1084;
      }
      unsigned int v462 = v1069;
      char v1085 = *(unsigned char *)v1084;
      int v1086 = v1068;
      if (*(unsigned char *)v1084 | *((unsigned char *)a2 + 80))
      {
        if (!a2[9]) {
          a2[9] = (uint64_t **)1;
        }
        v1087 = a2[6];
        if (v1087 == a2[7])
        {
          __int16 v1133 = (__int16)v1073;
          __int16 v1134 = (__int16)v1074;
          __int16 v1135 = (__int16)v1075;
          unsigned int v1775 = v462;
          v1136 = (void *)v1072;
          sub_1CBF2C904((uint64_t *)a2, 1uLL);
          unint64_t v1072 = (unint64_t)v1136;
          unsigned int v462 = v1775;
          LOWORD(v1075) = v1135;
          LOWORD(v1074) = v1134;
          LOWORD(v1073) = v1133;
          v1087 = a2[6];
        }
        a2[6] = (uint64_t **)((char *)v1087 - 1);
        *((unsigned char *)v1087 - 1) = v1085;
        v1088 = a2[4];
        v1089 = a2[5];
        v1091 = a2[6];
        v1090 = (uint64_t *)a2[7];
        if ((unint64_t)((char *)v1091 - (char *)v1090) <= 7)
        {
          __int16 v1718 = (__int16)v1073;
          __int16 v1727 = (__int16)v1075;
          __int16 v1151 = (__int16)v1074;
          unsigned int v1779 = v462;
          v1152 = (void *)v1072;
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unint64_t v1072 = (unint64_t)v1152;
          unsigned int v462 = v1779;
          LOWORD(v1073) = v1718;
          LOWORD(v1075) = v1727;
          LOWORD(v1074) = v1151;
          v1090 = (uint64_t *)a2[7];
        }
        uint64_t *v1090 = (v1088 - v1091 + v1089) | 0x400000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1092 = *((unsigned __int16 *)a2 + 34);
        if (v1092 <= 4) {
          LOWORD(v1092) = 4;
        }
        *((_WORD *)a2 + 34) = v1092;
      }
      v1093 = (void *)(v1808 + 24);
      if (*(_DWORD *)(v1808 + 32) >= 0x41u) {
        v1093 = (void *)*v1093;
      }
      int v1094 = *(_DWORD *)v1093;
      if (*(_DWORD *)v1093 || (int v1095 = *((unsigned __int8 *)a2 + 80), *((unsigned char *)a2 + 80)))
      {
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        v1097 = a2[6];
        v1096 = (uint64_t *)a2[7];
        unint64_t v1098 = ((_BYTE)v1097 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
        if ((char *)v1097 - (char *)v1096 >= v1098)
        {
          v1099 = (uint64_t **)((char *)v1097 - v1098);
          a2[6] = (uint64_t **)((char *)v1097 - v1098);
          if (v1098)
          {
LABEL_1763:
            uint64_t v1100 = 0;
            do
              *((unsigned char *)a2[6] + v1100++) = 0;
            while (v1098 != v1100);
            v1099 = a2[6];
            v1096 = (uint64_t *)a2[7];
          }
          if ((unint64_t)((char *)v1099 - (char *)v1096) <= 3)
          {
            __int16 v1139 = (__int16)v1073;
            __int16 v1140 = (__int16)v1074;
            __int16 v1141 = (__int16)v1075;
            unsigned int v1776 = v462;
            v1142 = (void *)v1072;
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            unint64_t v1072 = (unint64_t)v1142;
            unsigned int v462 = v1776;
            LOWORD(v1075) = v1141;
            LOWORD(v1074) = v1140;
            LOWORD(v1073) = v1139;
            v1099 = a2[6];
            v1096 = (uint64_t *)a2[7];
          }
          *((_DWORD *)v1099 - 1) = v1094;
          v1101 = (uint64_t **)((char *)v1099 - 4);
          a2[6] = v1101;
          v1102 = a2[4];
          v1103 = a2[5];
          if ((unint64_t)((char *)v1101 - (char *)v1096) <= 7)
          {
            __int16 v1717 = (__int16)v1073;
            __int16 v1726 = (__int16)v1075;
            __int16 v1149 = (__int16)v1074;
            unsigned int v1778 = v462;
            v1150 = (void *)v1072;
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            unint64_t v1072 = (unint64_t)v1150;
            unsigned int v462 = v1778;
            LOWORD(v1073) = v1717;
            LOWORD(v1075) = v1726;
            LOWORD(v1074) = v1149;
            v1096 = (uint64_t *)a2[7];
          }
          uint64_t *v1096 = (v1102 - v1101 + v1103) | 0x600000000;
          ++a2[7];
          ++*((_DWORD *)a2 + 16);
          unsigned int v1104 = *((unsigned __int16 *)a2 + 34);
          if (v1104 <= 6) {
            LOWORD(v1104) = 6;
          }
          *((_WORD *)a2 + 34) = v1104;
          int v1095 = *((unsigned __int8 *)a2 + 80);
          goto LABEL_1773;
        }
        __int16 v1157 = (__int16)v1073;
        __int16 v1158 = (__int16)v1074;
        __int16 v1731 = (__int16)v1075;
        unsigned int v1781 = v462;
        v1159 = (void *)v1072;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1097 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        unint64_t v1072 = (unint64_t)v1159;
        unsigned int v462 = v1781;
        LOWORD(v1075) = v1731;
        LOWORD(v1074) = v1158;
        LOWORD(v1073) = v1157;
        a2[6] = (uint64_t **)((char *)a2[6] - v1098);
        goto LABEL_1763;
      }
LABEL_1773:
      unint64_t v1105 = v1072 / v1065;
      int v1106 = v1105 | v1095;
      if (!v1106)
      {
        v540 = v1813;
        goto LABEL_1789;
      }
      v540 = v1813;
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      v1108 = a2[6];
      v1107 = (uint64_t *)a2[7];
      unint64_t v1109 = ((_BYTE)v1108 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
      if ((char *)v1108 - (char *)v1107 < v1109)
      {
        __int16 v1160 = (__int16)v1073;
        __int16 v1161 = (__int16)v1074;
        __int16 v1732 = (__int16)v1075;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1108 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        LOWORD(v1075) = v1732;
        LOWORD(v1074) = v1161;
        LOWORD(v1073) = v1160;
        a2[6] = (uint64_t **)((char *)a2[6] - v1109);
LABEL_1779:
        uint64_t v1111 = 0;
        do
          *((unsigned char *)a2[6] + v1111++) = 0;
        while (v1109 != v1111);
        v1110 = a2[6];
        v1107 = (uint64_t *)a2[7];
        goto LABEL_1782;
      }
      v1110 = (uint64_t **)((char *)v1108 - v1109);
      a2[6] = (uint64_t **)((char *)v1108 - v1109);
      if (v1109) {
        goto LABEL_1779;
      }
LABEL_1782:
      if ((unint64_t)((char *)v1110 - (char *)v1107) <= 3)
      {
        __int16 v1143 = (__int16)v1073;
        __int16 v1144 = (__int16)v1074;
        __int16 v1145 = (__int16)v1075;
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        LOWORD(v1075) = v1145;
        LOWORD(v1074) = v1144;
        LOWORD(v1073) = v1143;
        v1110 = a2[6];
        v1107 = (uint64_t *)a2[7];
      }
      *((_DWORD *)v1110 - 1) = v1105;
      v1112 = (uint64_t **)((char *)v1110 - 4);
      a2[6] = v1112;
      v1113 = a2[4];
      v1114 = a2[5];
      if ((unint64_t)((char *)v1112 - (char *)v1107) <= 7)
      {
        __int16 v1719 = (__int16)v1073;
        __int16 v1728 = (__int16)v1075;
        __int16 v1153 = (__int16)v1074;
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        LOWORD(v1073) = v1719;
        LOWORD(v1075) = v1728;
        LOWORD(v1074) = v1153;
        v1107 = (uint64_t *)a2[7];
      }
      uint64_t *v1107 = (v1113 - v1112 + v1114) | 0xC00000000;
      ++a2[7];
      ++*((_DWORD *)a2 + 16);
      unsigned int v1115 = *((unsigned __int16 *)a2 + 34);
      if (v1115 <= 0xC) {
        LOWORD(v1115) = 12;
      }
      *((_WORD *)a2 + 34) = v1115;
      int v1106 = *((unsigned __int8 *)a2 + 80);
LABEL_1789:
      if (v1086 | v1106)
      {
        if ((unint64_t)a2[9] <= 3) {
          a2[9] = (uint64_t **)4;
        }
        v1117 = a2[6];
        v1116 = (uint64_t *)a2[7];
        unint64_t v1118 = ((_BYTE)v1117 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
        if ((char *)v1117 - (char *)v1116 >= v1118)
        {
          v1119 = (uint64_t **)((char *)v1117 - v1118);
          a2[6] = (uint64_t **)((char *)v1117 - v1118);
          if (v1118)
          {
LABEL_1794:
            uint64_t v1120 = 0;
            do
              *((unsigned char *)a2[6] + v1120++) = 0;
            while (v1118 != v1120);
            v1119 = a2[6];
            v1116 = (uint64_t *)a2[7];
          }
          if ((unint64_t)((char *)v1119 - (char *)v1116) <= 3)
          {
            __int16 v1146 = (__int16)v1073;
            __int16 v1147 = (__int16)v1074;
            __int16 v1148 = (__int16)v1075;
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            LOWORD(v1075) = v1148;
            LOWORD(v1074) = v1147;
            LOWORD(v1073) = v1146;
            v1119 = a2[6];
            v1116 = (uint64_t *)a2[7];
          }
          *((_DWORD *)v1119 - 1) = v1086;
          v1121 = (uint64_t **)((char *)v1119 - 4);
          a2[6] = v1121;
          v1122 = a2[4];
          v1123 = a2[5];
          if ((unint64_t)((char *)v1121 - (char *)v1116) <= 7)
          {
            __int16 v1154 = (__int16)v1073;
            __int16 v1155 = (__int16)v1074;
            __int16 v1729 = (__int16)v1075;
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            LOWORD(v1075) = v1729;
            LOWORD(v1074) = v1155;
            LOWORD(v1073) = v1154;
            v1116 = (uint64_t *)a2[7];
          }
          uint64_t *v1116 = (v1122 - v1121 + v1123) | 0xA00000000;
          ++a2[7];
          ++*((_DWORD *)a2 + 16);
          unsigned int v1124 = *((unsigned __int16 *)a2 + 34);
          if (v1124 <= 0xA) {
            LOWORD(v1124) = 10;
          }
          *((_WORD *)a2 + 34) = v1124;
          goto LABEL_1804;
        }
        __int16 v1162 = (__int16)v1073;
        __int16 v1163 = (__int16)v1074;
        __int16 v1164 = (__int16)v1075;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1117 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
        LOWORD(v1075) = v1164;
        LOWORD(v1074) = v1163;
        LOWORD(v1073) = v1162;
        a2[6] = (uint64_t **)((char *)a2[6] - v1118);
        goto LABEL_1794;
      }
LABEL_1804:
      int v1125 = sub_1CBF2CB78((uint64_t)a2, (unsigned __int16)v1075 - (unsigned __int16)v1074 + (unsigned __int16)v1073);
      int v1126 = v1125;
      if (v961 >= __srcg)
      {
        uint64_t v1127 = (v961 - v540) >> 2;
        unint64_t v1128 = v1127 + 1;
        if ((unint64_t)(v1127 + 1) >> 62) {
          goto LABEL_2629;
        }
        if ((__srcg - v540) >> 1 > v1128) {
          unint64_t v1128 = (__srcg - v540) >> 1;
        }
        if ((unint64_t)(__srcg - v540) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1129 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1129 = v1128;
        }
        if (v1129)
        {
          if (v1129 >> 62) {
            goto LABEL_2630;
          }
          v1130 = (char *)operator new(4 * v1129);
        }
        else
        {
          v1130 = 0;
        }
        v1131 = &v1130[4 * v1127];
        *(_DWORD *)v1131 = v1126;
        v1028 = v1131 + 4;
        while (v961 != v540)
        {
          int v1132 = *((_DWORD *)v961 - 1);
          v961 -= 4;
          *((_DWORD *)v1131 - 1) = v1132;
          v1131 -= 4;
        }
        __srcg = &v1130[4 * v1129];
        if (v540) {
          operator delete(v540);
        }
        v540 = v1131;
      }
      else
      {
        *(_DWORD *)v961 = v1125;
        v1028 = v961 + 4;
      }
      (*(void (**)(std::string::size_type))(*(void *)v1026 + 40))(v1026);
      v961 = v1028;
      if ((*(uint64_t (**)(std::string::size_type, void *))(*(void *)v1026 + 24))(v1026, v1794)) {
        goto LABEL_1666;
      }
    }
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    unint64_t v1076 = ((_BYTE)v1074 - ((_BYTE)v1075 + (_BYTE)v1073)) & 3;
    v1077 = (uint64_t *)a2[7];
    if ((char *)v1074 - (char *)v1077 < v1076)
    {
      __int16 v1720 = (__int16)v1073;
      __int16 v1730 = (__int16)v1075;
      __int16 v1156 = (__int16)v1074;
      v1780 = (void *)v1072;
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1074 - ((_BYTE)v1075 + (_BYTE)v1073)) & 3);
      unint64_t v1072 = (unint64_t)v1780;
      LOWORD(v1073) = v1720;
      LOWORD(v1075) = v1730;
      LOWORD(v1074) = v1156;
      a2[6] = (uint64_t **)((char *)a2[6] - v1076);
    }
    else
    {
      v1078 = (uint64_t **)((char *)v1074 - v1076);
      a2[6] = (uint64_t **)((char *)v1074 - v1076);
      if ((((_BYTE)v1074 - ((_BYTE)v1075 + (_BYTE)v1073)) & 3) == 0)
      {
LABEL_1736:
        if ((unint64_t)((char *)v1078 - (char *)v1077) <= 3)
        {
          __int16 v1715 = (__int16)v1073;
          __int16 v1724 = (__int16)v1075;
          __int16 v1137 = (__int16)v1074;
          v1138 = (void *)v1072;
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          unint64_t v1072 = (unint64_t)v1138;
          LOWORD(v1073) = v1715;
          LOWORD(v1075) = v1724;
          LOWORD(v1074) = v1137;
          v1078 = a2[6];
          v1077 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1078 - 1) = v1070 / v1065;
        v1080 = (uint64_t **)((char *)v1078 - 4);
        a2[6] = v1080;
        v1081 = a2[4];
        v1082 = a2[5];
        if ((unint64_t)((char *)v1080 - (char *)v1077) <= 7)
        {
          __int16 v1712 = (__int16)v1074;
          __int16 v1716 = (__int16)v1073;
          __int16 v1725 = (__int16)v1075;
          v1777 = (void *)v1072;
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unint64_t v1072 = (unint64_t)v1777;
          LOWORD(v1073) = v1716;
          LOWORD(v1075) = v1725;
          LOWORD(v1074) = v1712;
          v1077 = (uint64_t *)a2[7];
        }
        uint64_t *v1077 = (v1081 - v1080 + v1082) | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1083 = *((unsigned __int16 *)a2 + 34);
        if (v1083 <= 8) {
          LOWORD(v1083) = 8;
        }
        *((_WORD *)a2 + 34) = v1083;
        goto LABEL_1743;
      }
    }
    uint64_t v1079 = 0;
    do
      *((unsigned char *)a2[6] + v1079++) = 0;
    while (v1076 != v1079);
    v1078 = a2[6];
    v1077 = (uint64_t *)a2[7];
    goto LABEL_1736;
  }
  v1028 = v961;
LABEL_1666:
  if (v1794) {
    (*(void (**)(void *))(*(void *)v1794 + 8))(v1794);
  }
  (*(void (**)(std::string::size_type))(*(void *)v1026 + 8))(v1026);
  if (v1738) {
    ((void (*)(uint64_t ***))(*v1738)[1])(v1738);
  }
  if (v1751) {
    (*(void (**)(std::string::size_type))(*(void *)v1751 + 8))(v1751);
  }
  ((void (*)(std::string *__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[16])(&__dst, v1824, 7);
  ((void (*)(uint64_t ****__return_ptr, uint64_t (***)(void), uint64_t))(*v1824)[17])(&v1825, v1824, 7);
  std::string::size_type v1029 = __dst.__r_.__value_.__r.__words[0];
  v1030 = v1825;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    std::string::size_type v1031 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v1031 = 0;
  }
  v1812 = v540;
  if (v1030)
  {
    ((void (*)(std::string *__return_ptr, uint64_t ***))(*v1030)[2])(&__dst, v1030);
    std::string::size_type v1032 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v1032 = 0;
  }
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v1031 + 24))(v1031, v1032) & 1) == 0)
  {
    uint64_t v1033 = *(void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v1031 + 32))(v1031);
    uint64_t v1034 = ((uint64_t (*)(uint64_t (***)(void)))(*v1824)[42])(v1824);
    unsigned int v1035 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1034 + 24))(v1034, 8);
    uint64_t v1036 = ((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1824)[50])(v1824, v1033);
    if ((v1035 + HIDWORD(v1036) - 1) / v1035 + v1036 > v462) {
      unsigned int v462 = (v1035 + HIDWORD(v1036) - 1) / v1035 + v1036;
    }
    (*(void (**)(std::string::size_type))(*(void *)v1031 + 40))(v1031);
  }
  if (v1032) {
    (*(void (**)(std::string::size_type))(*(void *)v1032 + 8))(v1032);
  }
  (*(void (**)(std::string::size_type))(*(void *)v1031 + 8))(v1031);
  v1037 = v1768;
  v1038 = v1803;
  if (v1030) {
    ((void (*)(uint64_t ***))(*v1030)[1])(v1030);
  }
  if (v1029) {
    (*(void (**)(std::string::size_type))(*(void *)v1029 + 8))(v1029);
  }
  uint64_t v1039 = v1028 - v1812;
  if (v1028 == v1812) {
    v1040 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::DMAInfo>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::DMAInfo>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::DMAInfo>> const&)::t;
  }
  else {
    v1040 = v1812;
  }
  *((unsigned char *)a2 + 70) = 1;
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1041 = a2[6];
  unint64_t v1042 = ((_BYTE)v1041 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  v1043 = v1753;
  if ((char *)v1041 - (char *)a2[7] < v1042)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1041 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    v1043 = v1753;
    a2[6] = (uint64_t **)((char *)a2[6] - v1042);
  }
  else
  {
    a2[6] = (uint64_t **)((char *)v1041 - v1042);
    if (!v1042) {
      goto LABEL_1693;
    }
  }
  uint64_t v1541 = 0;
  do
    *((unsigned char *)a2[6] + v1541++) = 0;
  while (v1042 != v1541);
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
LABEL_1693:
  v1044 = a2[6];
  unint64_t v1045 = ((_BYTE)v1044 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v1044 - (char *)a2[7] < v1045)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1044 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    v1043 = v1753;
    a2[6] = (uint64_t **)((char *)a2[6] - v1045);
  }
  else
  {
    a2[6] = (uint64_t **)((char *)v1044 - v1045);
    if (!v1045) {
      goto LABEL_1697;
    }
  }
  uint64_t v1046 = 0;
  do
    *((unsigned char *)a2[6] + v1046++) = 0;
  while (v1045 != v1046);
LABEL_1697:
  if (v1812 != v1028)
  {
    uint64_t v1047 = v1039 >> 2;
    do
    {
      --v1047;
      int v1048 = *(_DWORD *)&v1040[4 * v1047];
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      v1049 = a2[4];
      v1050 = a2[5];
      v1051 = a2[6];
      unint64_t v1052 = ((int)v1051 - ((int)v1049 + (int)v1050)) & 3;
      if ((char *)v1051 - (char *)a2[7] < v1052)
      {
        sub_1CBF2C904((uint64_t *)a2, ((int)v1051 - ((int)v1049 + (int)v1050)) & 3);
        v1043 = v1753;
        a2[6] = (uint64_t **)((char *)a2[6] - v1052);
      }
      else
      {
        v1053 = (uint64_t **)((char *)v1051 - v1052);
        a2[6] = v1053;
        if (!v1052)
        {
          int v1054 = v1049 + v1050 - v1053;
          goto LABEL_1709;
        }
      }
      uint64_t v1055 = 0;
      do
        *((unsigned char *)a2[6] + v1055++) = 0;
      while (v1052 != v1055);
      v1050 = a2[5];
      v1053 = a2[6];
      v1049 = a2[4];
      int v1054 = v1049 - v1053 + v1050;
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
LABEL_1709:
      unint64_t v1056 = ((_BYTE)v1053 - ((_BYTE)v1049 + (_BYTE)v1050)) & 3;
      v1057 = a2[7];
      if ((char *)v1053 - (char *)v1057 < v1056)
      {
        sub_1CBF2C904((uint64_t *)a2, v1056);
        v1043 = v1753;
        a2[6] = (uint64_t **)((char *)a2[6] - v1056);
LABEL_1711:
        uint64_t v1059 = 0;
        do
          *((unsigned char *)a2[6] + v1059++) = 0;
        while (v1056 != v1059);
        v1058 = a2[6];
        v1057 = a2[7];
        goto LABEL_1714;
      }
      v1058 = (uint64_t **)((char *)v1053 - v1056);
      a2[6] = (uint64_t **)((char *)v1053 - v1056);
      if (v1056) {
        goto LABEL_1711;
      }
LABEL_1714:
      if ((unint64_t)((char *)v1058 - (char *)v1057) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        v1043 = v1753;
        v1058 = a2[6];
      }
      *((_DWORD *)v1058 - 1) = v1054 - v1048 + 4;
      a2[6] = (uint64_t **)((char *)v1058 - 4);
      v1037 = v1768;
      v1038 = v1803;
    }
    while (v1047);
  }
  *((unsigned char *)a2 + 70) = 0;
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1166 = a2[6];
  v1165 = a2[7];
  unint64_t v1167 = ((_BYTE)v1166 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v1166 - (char *)v1165 < v1167)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1166 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    v1043 = v1753;
    a2[6] = (uint64_t **)((char *)a2[6] - v1167);
  }
  else
  {
    v1168 = (uint64_t **)((char *)v1166 - v1167);
    a2[6] = (uint64_t **)((char *)v1166 - v1167);
    if (!v1167) {
      goto LABEL_1835;
    }
  }
  uint64_t v1169 = 0;
  do
    *((unsigned char *)a2[6] + v1169++) = 0;
  while (v1167 != v1169);
  v1168 = a2[6];
  v1165 = a2[7];
LABEL_1835:
  if ((unint64_t)((char *)v1168 - (char *)v1165) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v1043 = v1753;
    v1168 = a2[6];
  }
  *((_DWORD *)v1168 - 1) = (unint64_t)v1039 >> 2;
  v1170 = (uint64_t **)((char *)v1168 - 4);
  a2[6] = v1170;
  v1172 = a2[4];
  v1171 = a2[5];
  uint64_t v1173 = v1702 - v1043;
  if (v1702 == v1043) {
    v1174 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::BufferBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::BufferBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::BufferBinding>> const&)::t;
  }
  else {
    v1174 = v1043;
  }
  *((unsigned char *)a2 + 70) = 1;
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  int v1721 = (int)v1172;
  int v1733 = (int)v1171;
  unint64_t v1175 = ((_BYTE)v1170 - ((_BYTE)v1172 + (_BYTE)v1171)) & 3;
  if ((char *)v1170 - (char *)a2[7] < v1175)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1170 - ((_BYTE)v1172 + (_BYTE)v1171)) & 3);
    v1043 = v1753;
    a2[6] = (uint64_t **)((char *)a2[6] - v1175);
  }
  else
  {
    a2[6] = (uint64_t **)((char *)v1170 - v1175);
    if ((((_BYTE)v1170 - ((_BYTE)v1172 + (_BYTE)v1171)) & 3) == 0) {
      goto LABEL_1844;
    }
  }
  uint64_t v1542 = 0;
  do
    *((unsigned char *)a2[6] + v1542++) = 0;
  while (v1175 != v1542);
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
LABEL_1844:
  v1176 = a2[6];
  unint64_t v1177 = ((_BYTE)v1176 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  int v1739 = (int)v1170;
  if ((char *)v1176 - (char *)a2[7] < v1177)
  {
    sub_1CBF2C904((uint64_t *)a2, v1177);
    v1043 = v1753;
    a2[6] = (uint64_t **)((char *)a2[6] - v1177);
  }
  else
  {
    a2[6] = (uint64_t **)((char *)v1176 - v1177);
    if (!v1177) {
      goto LABEL_1848;
    }
  }
  uint64_t v1178 = 0;
  do
    *((unsigned char *)a2[6] + v1178++) = 0;
  while (v1177 != v1178);
LABEL_1848:
  if (v1043 != v1702)
  {
    uint64_t v1179 = v1173 >> 2;
    do
    {
      --v1179;
      int v1180 = *(_DWORD *)&v1174[4 * v1179];
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
      v1181 = a2[4];
      v1182 = a2[5];
      v1183 = a2[6];
      unint64_t v1184 = ((int)v1183 - ((int)v1181 + (int)v1182)) & 3;
      if ((char *)v1183 - (char *)a2[7] < v1184)
      {
        sub_1CBF2C904((uint64_t *)a2, ((int)v1183 - ((int)v1181 + (int)v1182)) & 3);
        a2[6] = (uint64_t **)((char *)a2[6] - v1184);
      }
      else
      {
        v1185 = (uint64_t **)((char *)v1183 - v1184);
        a2[6] = v1185;
        if (!v1184)
        {
          int v1186 = v1181 + v1182 - v1185;
          goto LABEL_1860;
        }
      }
      uint64_t v1187 = 0;
      do
        *((unsigned char *)a2[6] + v1187++) = 0;
      while (v1184 != v1187);
      v1182 = a2[5];
      v1185 = a2[6];
      v1181 = a2[4];
      int v1186 = v1181 - v1185 + v1182;
      if ((unint64_t)a2[9] <= 3) {
        a2[9] = (uint64_t **)4;
      }
LABEL_1860:
      unint64_t v1188 = ((_BYTE)v1185 - ((_BYTE)v1181 + (_BYTE)v1182)) & 3;
      v1189 = a2[7];
      if ((char *)v1185 - (char *)v1189 < v1188)
      {
        sub_1CBF2C904((uint64_t *)a2, v1188);
        a2[6] = (uint64_t **)((char *)a2[6] - v1188);
LABEL_1862:
        uint64_t v1191 = 0;
        do
          *((unsigned char *)a2[6] + v1191++) = 0;
        while (v1188 != v1191);
        v1190 = a2[6];
        v1189 = a2[7];
        goto LABEL_1865;
      }
      v1190 = (uint64_t **)((char *)v1185 - v1188);
      a2[6] = (uint64_t **)((char *)v1185 - v1188);
      if (v1188) {
        goto LABEL_1862;
      }
LABEL_1865:
      if ((unint64_t)((char *)v1190 - (char *)v1189) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        v1190 = a2[6];
      }
      *((_DWORD *)v1190 - 1) = v1186 - v1180 + 4;
      a2[6] = (uint64_t **)((char *)v1190 - 4);
      v1037 = v1768;
      v1038 = v1803;
    }
    while (v1179);
  }
  *((unsigned char *)a2 + 70) = 0;
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1193 = a2[6];
  v1192 = a2[7];
  unint64_t v1194 = ((_BYTE)v1193 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  v1195 = v1824;
  if ((char *)v1193 - (char *)v1192 < v1194)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1193 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v1194);
  }
  else
  {
    v1196 = (uint64_t **)((char *)v1193 - v1194);
    a2[6] = v1196;
    if (!v1194) {
      goto LABEL_1877;
    }
  }
  uint64_t v1197 = 0;
  do
    *((unsigned char *)a2[6] + v1197++) = 0;
  while (v1194 != v1197);
  v1196 = a2[6];
  v1192 = a2[7];
LABEL_1877:
  if ((unint64_t)((char *)v1196 - (char *)v1192) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v1196 = a2[6];
  }
  unsigned int v1782 = v462;
  *((_DWORD *)v1196 - 1) = (unint64_t)v1173 >> 2;
  int v1713 = v1196 - 4;
  a2[6] = (uint64_t **)((char *)v1196 - 4);
  int v1708 = *((_DWORD *)a2 + 8);
  int v1710 = *((_DWORD *)a2 + 10);
  if (v1696 == v1037) {
    v1198 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>> const&)::t;
  }
  else {
    v1198 = v1037;
  }
  int v1752 = sub_1CC780AC0((uint64_t)a2, (uint64_t)v1198, (v1696 - v1037) >> 2);
  if (v1693 == v1765) {
    v1199 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>> const&)::t;
  }
  else {
    v1199 = v1765;
  }
  int v1755 = sub_1CC780AC0((uint64_t)a2, (uint64_t)v1199, (v1693 - v1765) >> 2);
  if (v1787 == v1038) {
    v1200 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>> const&)::t;
  }
  else {
    v1200 = v1038;
  }
  int v1795 = sub_1CC780AC0((uint64_t)a2, (uint64_t)v1200, (v1787 - v1038) >> 2);
  if (*(void **)v1828 == v1827) {
    v1201 = &flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>> const&)::t;
  }
  else {
    v1201 = v1827;
  }
  int v1809 = sub_1CC780AC0((uint64_t)a2, (uint64_t)v1201, (uint64_t)(*(void *)v1828 - (void)v1827) >> 2);
  ((void (*)(uint64_t ****__return_ptr, uint64_t (***)(void)))(*v1824)[37])(&v1825, v1824);
  ((void (*)(std::string::size_type *__return_ptr, uint64_t (***)(void)))(*v1824)[38])(&__dst.__r_.__value_.__l.__size_, v1824);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1825;
  sub_1CC782BC8((uint64_t *)&v1825, (uint64_t)&__dst);
  sub_1CC782BC8(&v1832, (uint64_t)&__dst.__r_.__value_.__l.__size_);
  if (((uint64_t (*)(uint64_t ***, uint64_t))(*v1825)[3])(v1825, v1832))
  {
    __srch = 0;
    uint64_t v1202 = 0;
  }
  else
  {
    __srch = 0;
    v1230 = 0;
    v1231 = 0;
    do
    {
      int v1232 = *(_DWORD *)((uint64_t (*)(uint64_t ***))(*v1825)[4])(v1825);
      LODWORD(v1831) = v1232;
      if (v1231 - v1230 >= 4)
      {
        memmove(v1230, &v1831, 4uLL);
        uint64_t v1202 = (uint64_t)(v1230 + 4);
        v1195 = v1824;
      }
      else
      {
        v1233 = __srch;
        int64_t v1234 = v1230 - __srch;
        uint64_t v1235 = v1230 - __srch + 4;
        if (v1235 < 0) {
          goto LABEL_2629;
        }
        if (2 * (v1231 - __srch) > (unint64_t)v1235) {
          uint64_t v1235 = 2 * (v1231 - __srch);
        }
        if ((unint64_t)(v1231 - __srch) >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v1236 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v1236 = v1235;
        }
        if (v1236)
        {
          v1237 = (char *)operator new(v1236);
          v1233 = __srch;
        }
        else
        {
          v1237 = 0;
        }
        v1238 = &v1237[v1234];
        *(_DWORD *)&v1237[v1234] = v1232;
        uint64_t v1202 = (uint64_t)&v1237[v1234 + 4];
        if (v1233 != v1230)
        {
          do
          {
            v1237[v1234 - 1] = v1233[v1234 - 1];
            --v1234;
          }
          while (v1234);
          v1238 = v1237;
        }
        v1231 = &v1237[v1236];
        v1195 = v1824;
        if (v1233) {
          operator delete(v1233);
        }
        __srch = v1238;
      }
      ((void (*)(uint64_t ***))(*v1825)[5])(v1825);
      v1230 = (char *)v1202;
    }
    while ((((uint64_t (*)(uint64_t ***, uint64_t))(*v1825)[3])(v1825, v1832) & 1) == 0);
  }
  uint64_t v1203 = v1832;
  uint64_t v1832 = 0;
  if (v1203) {
    (*(void (**)(uint64_t))(*(void *)v1203 + 8))(v1203);
  }
  v1204 = v1825;
  v1825 = 0;
  if (v1204) {
    ((void (*)(uint64_t ***))(*v1204)[1])(v1204);
  }
  std::string::size_type v1205 = __dst.__r_.__value_.__l.__size_;
  __dst.__r_.__value_.__l.__size_ = 0;
  if (v1205) {
    (*(void (**)(std::string::size_type))(*(void *)v1205 + 8))(v1205);
  }
  std::string::size_type v1206 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v1206) {
    (*(void (**)(std::string::size_type))(*(void *)v1206 + 8))(v1206);
  }
  v1207 = __srch;
  unint64_t v1208 = v1202 - (void)__srch;
  *((unsigned char *)a2 + 70) = 1;
  unint64_t v1209 = (unint64_t)a2[9];
  if (v1209 <= 3)
  {
    unint64_t v1209 = 4;
    a2[9] = (uint64_t **)4;
  }
  v1210 = a2[6];
  unint64_t v1211 = ((_BYTE)v1210 - *((_DWORD *)a2 + 10) - (*((unsigned char *)a2 + 32) + (_BYTE)v1208)) & 3;
  if ((char *)v1210 - (char *)a2[7] < v1211)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1210 - *((_DWORD *)a2 + 10) - (*((unsigned char *)a2 + 32) + (_BYTE)v1208)) & 3);
    v1207 = __srch;
    a2[6] = (uint64_t **)((char *)a2[6] - v1211);
  }
  else
  {
    a2[6] = (uint64_t **)((char *)v1210 - v1211);
    if (!v1211) {
      goto LABEL_1905;
    }
  }
  uint64_t v1543 = 0;
  do
    *((unsigned char *)a2[6] + v1543++) = 0;
  while (v1211 != v1543);
  unint64_t v1209 = (unint64_t)a2[9];
  if (!v1209)
  {
    unint64_t v1209 = 1;
    a2[9] = (uint64_t **)1;
  }
LABEL_1905:
  if (v1207 != (char *)v1202)
  {
    v1212 = a2[6];
    if ((char *)v1212 - (char *)a2[7] < v1208)
    {
      sub_1CBF2C904((uint64_t *)a2, v1208);
      v1212 = a2[6];
    }
    a2[6] = (uint64_t **)((char *)v1212 - v1208);
    memcpy((char *)v1212 - v1208, __srch, v1208);
    unint64_t v1209 = (unint64_t)a2[9];
  }
  *((unsigned char *)a2 + 70) = 0;
  if (v1209 <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1214 = a2[6];
  v1213 = a2[7];
  unint64_t v1215 = ((_BYTE)v1214 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
  if ((char *)v1214 - (char *)v1213 < v1215)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1214 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v1215);
  }
  else
  {
    v1216 = (uint64_t **)((char *)v1214 - v1215);
    a2[6] = (uint64_t **)((char *)v1214 - v1215);
    if (!v1215) {
      goto LABEL_1916;
    }
  }
  uint64_t v1217 = 0;
  do
    *((unsigned char *)a2[6] + v1217++) = 0;
  while (v1215 != v1217);
  v1216 = a2[6];
  v1213 = a2[7];
LABEL_1916:
  if ((unint64_t)((char *)v1216 - (char *)v1213) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v1216 = a2[6];
  }
  *((_DWORD *)v1216 - 1) = v1208;
  v1218 = (uint64_t **)((char *)v1216 - 4);
  a2[6] = v1218;
  int v1219 = *((_DWORD *)a2 + 8);
  int v1220 = *((_DWORD *)a2 + 10);
  v1221 = (uint64_t ***)((uint64_t (*)(uint64_t (***)(void), uint64_t))(*v1195)[74])(v1195, 100);
  v1825 = v1221;
  if (!v1221)
  {
    v1239 = 0;
    v1240 = 0;
    goto LABEL_1999;
  }
  if ((*((unsigned char *)v1221 + 23) & 0x10) == 0)
  {
    std::string::size_type v1242 = 0;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_1956;
  }
  uint64_t v1222 = ***v1221;
  uint64_t v1223 = *(void *)(v1222 + 152);
  uint64_t v1224 = *(unsigned int *)(v1222 + 168);
  if (v1224)
  {
    LODWORD(v1225) = (v1224 - 1) & ((v1221 >> 4) ^ (v1221 >> 9));
    v1226 = (uint64_t ****)(v1223 + 16 * v1225);
    v1227 = *v1226;
    if (*v1226 == v1221) {
      goto LABEL_1948;
    }
    int v1228 = 1;
    while (v1227 != (uint64_t ***)-4096)
    {
      int v1229 = v1225 + v1228++;
      uint64_t v1225 = v1229 & (v1224 - 1);
      v1227 = *(uint64_t ****)(v1223 + 16 * v1225);
      if (v1227 == v1221)
      {
        v1226 = (uint64_t ****)(v1223 + 16 * v1225);
        goto LABEL_1948;
      }
    }
  }
  v1226 = (uint64_t ****)(v1223 + 16 * v1224);
LABEL_1948:
  v1241 = (unint64_t *)v1226[1];
  unint64_t v1244 = *v1241;
  v1243 = v1241 + 2;
  std::string::size_type v1242 = v1244;
  if (v1244 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_2629;
  }
  if (v1242 >= 0x17)
  {
    uint64_t v1246 = (v1242 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1242 | 7) != 0x17) {
      uint64_t v1246 = v1242 | 7;
    }
    uint64_t v1247 = v1246 + 1;
    p_dst = operator new(v1246 + 1);
    __dst.__r_.__value_.__l.__size_ = v1242;
    __dst.__r_.__value_.__r.__words[2] = v1247 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_1955;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v1242;
  p_dst = &__dst;
  if (v1242) {
LABEL_1955:
  }
    memmove(p_dst, v1243, v1242);
LABEL_1956:
  *((unsigned char *)p_dst + v1242) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v1248 = &__dst;
  }
  else {
    v1248 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v1249 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t v1249 = __dst.__r_.__value_.__l.__size_;
  }
  int v1250 = sub_1CBF2F03C((uint64_t)a2, v1248, v1249);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v1251 = (void **)((uint64_t (*)(uint64_t (***)(void)))(*v1824)[77])(v1824);
  uint64_t v1252 = (unsigned char *)v1251[1] - (unsigned char *)*v1251;
  if (v1252) {
    v1253 = *v1251;
  }
  else {
    v1253 = &flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  }
  int v1254 = sub_1CC77C568((uint64_t)a2, v1253, v1252 >> 2);
  *((unsigned char *)a2 + 70) = 1;
  int v1255 = *((_DWORD *)a2 + 8);
  int v1256 = *((_DWORD *)a2 + 12);
  int v1257 = *((_DWORD *)a2 + 10);
  sub_1CC780134((uint64_t *)a2, 4, v1250);
  if (!a2[9]) {
    a2[9] = (uint64_t **)1;
  }
  v1258 = a2[6];
  if (v1258 == a2[7])
  {
    sub_1CBF2C904((uint64_t *)a2, 1uLL);
    v1258 = a2[6];
  }
  __int16 v1259 = v1255 - v1256;
  a2[6] = (uint64_t **)((char *)v1258 - 1);
  *((unsigned char *)v1258 - 1) = 3;
  v1261 = a2[6];
  v1260 = (uint64_t *)a2[7];
  uint64_t v1262 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1261;
  if ((unint64_t)((char *)v1261 - (char *)v1260) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v1260 = (uint64_t *)a2[7];
  }
  __int16 v1263 = v1259 + v1257;
  uint64_t *v1260 = v1262 | 0x600000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v1264 = *((unsigned __int16 *)a2 + 34);
  if (v1264 <= 6) {
    LOWORD(v1264) = 6;
  }
  *((_WORD *)a2 + 34) = v1264;
  int v1265 = *((_DWORD *)a1 + 76);
  v1266 = v1825;
  unsigned int v1267 = v1825 >> 4;
  if (v1265)
  {
    uint64_t v1268 = a1[36];
    int v1269 = v1265 - 1;
    unsigned int v1270 = (v1267 ^ (v1825 >> 9)) & v1269;
    v1271 = (void *)(v1268 + 96 * v1270);
    v1272 = (uint64_t ***)*v1271;
    if (v1825 == (uint64_t ***)*v1271) {
      goto LABEL_1977;
    }
    v1417 = 0;
    int v1418 = 1;
    while (v1272 != (uint64_t ***)-4096)
    {
      if (v1417) {
        BOOL v1419 = 0;
      }
      else {
        BOOL v1419 = v1272 == (uint64_t ***)-8192;
      }
      if (v1419) {
        v1417 = v1271;
      }
      unsigned int v1420 = v1270 + v1418++;
      unsigned int v1270 = v1420 & v1269;
      v1271 = (void *)(v1268 + 96 * v1270);
      v1272 = (uint64_t ***)*v1271;
      if (v1825 == (uint64_t ***)*v1271) {
        goto LABEL_1977;
      }
    }
    if (v1417) {
      v1482 = v1417;
    }
    else {
      v1482 = v1271;
    }
  }
  else
  {
    v1482 = 0;
  }
  v1271 = sub_1CC781DB4((_DWORD *)a1 + 72, (uint64_t *)&v1825, v1482);
  void *v1271 = v1266;
  *(_OWORD *)(v1271 + 1) = 0u;
  *(_OWORD *)(v1271 + 3) = 0u;
  *(_OWORD *)(v1271 + 5) = 0u;
  *(_OWORD *)(v1271 + 7) = 0u;
  *(_OWORD *)(v1271 + 9) = 0u;
  v1271[11] = 0;
LABEL_1977:
  if (!*((unsigned char *)v1271 + 20)) {
    goto LABEL_1998;
  }
  int v1273 = *((_DWORD *)a1 + 76);
  if (v1273)
  {
    uint64_t v1274 = a1[36];
    int v1275 = v1273 - 1;
    unsigned int v1276 = (v1267 ^ (v1266 >> 9)) & v1275;
    v1277 = (void *)(v1274 + 96 * v1276);
    v1278 = (uint64_t ***)*v1277;
    if (v1266 == (uint64_t ***)*v1277) {
      goto LABEL_1980;
    }
    v1508 = 0;
    int v1509 = 1;
    while (v1278 != (uint64_t ***)-4096)
    {
      if (v1508) {
        BOOL v1510 = 0;
      }
      else {
        BOOL v1510 = v1278 == (uint64_t ***)-8192;
      }
      if (v1510) {
        v1508 = v1277;
      }
      unsigned int v1511 = v1276 + v1509++;
      unsigned int v1276 = v1511 & v1275;
      v1277 = (void *)(v1274 + 96 * v1276);
      v1278 = (uint64_t ***)*v1277;
      if (v1266 == (uint64_t ***)*v1277) {
        goto LABEL_1980;
      }
    }
    if (v1508) {
      v1512 = v1508;
    }
    else {
      v1512 = v1277;
    }
  }
  else
  {
    v1512 = 0;
  }
  v1277 = sub_1CC781DB4((_DWORD *)a1 + 72, (uint64_t *)&v1825, v1512);
  void *v1277 = v1266;
  *(_OWORD *)(v1277 + 1) = 0u;
  *(_OWORD *)(v1277 + 3) = 0u;
  *(_OWORD *)(v1277 + 5) = 0u;
  *(_OWORD *)(v1277 + 7) = 0u;
  *(_OWORD *)(v1277 + 9) = 0u;
  v1277[11] = 0;
LABEL_1980:
  int v1279 = *((_DWORD *)v1277 + 4);
  if (v1279) {
    BOOL v1280 = 0;
  }
  else {
    BOOL v1280 = *((unsigned char *)a2 + 80) == 0;
  }
  if (!v1280)
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1282 = a2[6];
    v1281 = (uint64_t *)a2[7];
    unint64_t v1283 = ((_BYTE)v1282 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1282 - (char *)v1281 < v1283)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1282 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v1283);
    }
    else
    {
      v1284 = (uint64_t **)((char *)v1282 - v1283);
      a2[6] = v1284;
      if (!v1283)
      {
LABEL_1991:
        if ((unint64_t)((char *)v1284 - (char *)v1281) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v1284 = a2[6];
          v1281 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1284 - 1) = v1279;
        v1286 = (uint64_t **)((char *)v1284 - 4);
        a2[6] = v1286;
        uint64_t v1287 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1286;
        if ((unint64_t)((char *)v1286 - (char *)v1281) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1281 = (uint64_t *)a2[7];
        }
        uint64_t *v1281 = v1287 | 0x800000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1288 = *((unsigned __int16 *)a2 + 34);
        if (v1288 <= 8) {
          LOWORD(v1288) = 8;
        }
        *((_WORD *)a2 + 34) = v1288;
        goto LABEL_1998;
      }
    }
    uint64_t v1285 = 0;
    do
      *((unsigned char *)a2[6] + v1285++) = 0;
    while (v1283 != v1285);
    v1284 = a2[6];
    v1281 = (uint64_t *)a2[7];
    goto LABEL_1991;
  }
LABEL_1998:
  sub_1CC780134((uint64_t *)a2, 10, v1254);
  int v1289 = sub_1CBF2CB78((uint64_t)a2, v1263);
  v1240 = (char *)operator new(4uLL);
  *(_DWORD *)v1240 = v1289;
  v1239 = v1240 + 4;
  v1195 = v1824;
LABEL_1999:
  uint64_t v1290 = v1239 - v1240;
  if (v1290) {
    v1291 = v1240;
  }
  else {
    v1291 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const&)::t;
  }
  int v1704 = sub_1CC780E20((uint64_t)a2, (uint64_t)v1291, v1290 >> 2);
  int v1706 = v1699 & 0x1E;
  v1788 = v1240;
  if (v1706 == 28)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 888))(&__dst);
    int v1701 = sub_1CC77C568((uint64_t)a2, __dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]));
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2]) {
      free(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v1701 = 0;
  }
  if (v1735 == __p) {
    v1292 = (char *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  }
  else {
    v1292 = __p;
  }
  int v1293 = sub_1CC77C568((uint64_t)a2, v1292, (v1735 - __p) >> 2);
  v1825 = a2;
  *((unsigned char *)a2 + 70) = 1;
  int v1826 = *((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 12) + *((_DWORD *)a2 + 10);
  __dst.__r_.__value_.__r.__words[0] = 0;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  __dst.__r_.__value_.__s.__data_[12] = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  int v1834 = 0;
  char v1835 = 0;
  char v1836 = 0;
  long long v1837 = 0u;
  long long v1838 = 0u;
  __int16 v1839 = 0;
  v1840[0] = 0;
  *(_DWORD *)((char *)v1840 + 3) = 0;
  ((void (*)(uint64_t *__return_ptr, uint64_t (***)(void)))(*v1195)[9])(&v1832, v1195);
  ((void (*)(uint64_t *__return_ptr, uint64_t (***)(void)))(*v1195)[10])(&v1831, v1195);
  uint64_t v1295 = v1831;
  uint64_t v1294 = v1832;
  if (v1832)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1832 + 16))(&v1832, v1832);
    uint64_t v1296 = v1832;
  }
  else
  {
    uint64_t v1296 = 0;
  }
  int v1736 = v1293;
  int v1297 = v1219;
  if (v1295)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1295 + 16))(&v1832, v1295);
    uint64_t v1298 = v1832;
  }
  else
  {
    uint64_t v1298 = 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1296 + 24))(v1296, v1298) & 1) == 0)
  {
    while (1)
    {
      uint64_t v1404 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v1296 + 32))(v1296);
      uint64_t v1832 = v1404;
      int v1405 = *((_DWORD *)a1 + 76);
      if (!v1405) {
        break;
      }
      uint64_t v1406 = a1[36];
      int v1407 = v1405 - 1;
      unsigned int v1408 = ((v1404 >> 4) ^ (v1404 >> 9)) & v1407;
      v1409 = (void *)(v1406 + 96 * v1408);
      uint64_t v1410 = *v1409;
      if (v1404 != *v1409)
      {
        v1412 = 0;
        int v1413 = 1;
        while (v1410 != -4096)
        {
          if (v1412) {
            BOOL v1414 = 0;
          }
          else {
            BOOL v1414 = v1410 == -8192;
          }
          if (v1414) {
            v1412 = v1409;
          }
          unsigned int v1415 = v1408 + v1413++;
          unsigned int v1408 = v1415 & v1407;
          v1409 = (void *)(v1406 + 96 * v1408);
          uint64_t v1410 = *v1409;
          if (v1404 == *v1409) {
            goto LABEL_2207;
          }
        }
        if (v1412) {
          v1416 = v1412;
        }
        else {
          v1416 = v1409;
        }
        goto LABEL_2221;
      }
LABEL_2207:
      int8x16_t v1411 = llvm::FunctionStats::combine((unint64_t *)&__dst, v1409 + 1);
      (*(void (**)(uint64_t, int8x16_t))(*(void *)v1296 + 40))(v1296, v1411);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1296 + 24))(v1296, v1298)) {
        goto LABEL_2014;
      }
    }
    v1416 = 0;
LABEL_2221:
    v1409 = sub_1CC781DB4((_DWORD *)a1 + 72, &v1832, v1416);
    void *v1409 = v1404;
    *(_OWORD *)(v1409 + 1) = 0u;
    *(_OWORD *)(v1409 + 3) = 0u;
    *(_OWORD *)(v1409 + 5) = 0u;
    *(_OWORD *)(v1409 + 7) = 0u;
    *(_OWORD *)(v1409 + 9) = 0u;
    v1409[11] = 0;
    goto LABEL_2207;
  }
LABEL_2014:
  if (v1298) {
    (*(void (**)(uint64_t))(*(void *)v1298 + 8))(v1298);
  }
  unsigned int v1299 = (v1782 + 3) & 0xFFFFFFFC;
  uint64_t v1300 = (*(uint64_t (**)(uint64_t))(*(void *)v1296 + 8))(v1296);
  if (v1295) {
    uint64_t v1300 = (*(uint64_t (**)(uint64_t))(*(void *)v1295 + 8))(v1295);
  }
  int v1301 = v1721 - v1739 + v1733;
  if (v1294) {
    uint64_t v1300 = (*(uint64_t (**)(uint64_t))(*(void *)v1294 + 8))(v1294);
  }
  int v1302 = v1708 - v1713 + v1710;
  SetShaderInfoFromFunctionGroup(v1300, (uint64_t *)&v1825, v1824, (int *)&__dst);
  sub_1CC77C798((uint64_t *)&v1825, *a1);
  if (v1299 || *((unsigned char *)a2 + 80))
  {
    if ((unint64_t)a2[9] <= 3) {
      a2[9] = (uint64_t **)4;
    }
    v1304 = a2[6];
    v1303 = (uint64_t *)a2[7];
    unint64_t v1305 = ((_BYTE)v1304 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3;
    if ((char *)v1304 - (char *)v1303 < v1305)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1304 - (*((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 10))) & 3);
      a2[6] = (uint64_t **)((char *)a2[6] - v1305);
    }
    else
    {
      v1306 = (uint64_t **)((char *)v1304 - v1305);
      a2[6] = v1306;
      if (!v1305)
      {
LABEL_2029:
        if ((unint64_t)((char *)v1306 - (char *)v1303) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          v1306 = a2[6];
          v1303 = (uint64_t *)a2[7];
        }
        *((_DWORD *)v1306 - 1) = v1299;
        v1308 = (uint64_t **)((char *)v1306 - 4);
        a2[6] = v1308;
        uint64_t v1309 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1308;
        if ((unint64_t)((char *)v1308 - (char *)v1303) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          v1303 = (uint64_t *)a2[7];
        }
        uint64_t *v1303 = v1309 | 0x600000000;
        ++a2[7];
        ++*((_DWORD *)a2 + 16);
        unsigned int v1310 = *((unsigned __int16 *)a2 + 34);
        if (v1310 <= 6) {
          LOWORD(v1310) = 6;
        }
        *((_WORD *)a2 + 34) = v1310;
        a2 = v1825;
        goto LABEL_2036;
      }
    }
    uint64_t v1307 = 0;
    do
      *((unsigned char *)a2[6] + v1307++) = 0;
    while (v1305 != v1307);
    v1306 = a2[6];
    v1303 = (uint64_t *)a2[7];
    goto LABEL_2029;
  }
LABEL_2036:
  if (!v1301) {
    goto LABEL_2059;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1311 = a2[4];
  v1312 = a2[5];
  v1313 = a2[6];
  unint64_t v1314 = ((_BYTE)v1313 - ((_BYTE)v1311 + (_BYTE)v1312)) & 3;
  if ((char *)v1313 - (char *)a2[7] < v1314)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1313 - ((_BYTE)v1311 + (_BYTE)v1312)) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v1314);
  }
  else
  {
    v1315 = (uint64_t **)((char *)v1313 - v1314);
    a2[6] = v1315;
    if (!v1314) {
      goto LABEL_2044;
    }
  }
  uint64_t v1316 = 0;
  do
    *((unsigned char *)a2[6] + v1316++) = 0;
  while (v1314 != v1316);
  v1312 = a2[5];
  v1315 = a2[6];
  v1311 = a2[4];
LABEL_2044:
  int v1317 = v1312 - v1315 + v1311 - v1301;
  int v1318 = v1317 + 4;
  if (v1317 == -4 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_2059;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  unint64_t v1319 = ((_BYTE)v1315 - ((_BYTE)v1311 + (_BYTE)v1312)) & 3;
  v1320 = (uint64_t *)a2[7];
  if ((char *)v1315 - (char *)v1320 < v1319)
  {
    sub_1CBF2C904((uint64_t *)a2, v1319);
    a2[6] = (uint64_t **)((char *)a2[6] - v1319);
LABEL_2049:
    uint64_t v1322 = 0;
    do
      *((unsigned char *)a2[6] + v1322++) = 0;
    while (v1319 != v1322);
    v1321 = a2[6];
    v1320 = (uint64_t *)a2[7];
    goto LABEL_2052;
  }
  v1321 = (uint64_t **)((char *)v1315 - v1319);
  a2[6] = (uint64_t **)((char *)v1315 - v1319);
  if (v1319) {
    goto LABEL_2049;
  }
LABEL_2052:
  if ((unint64_t)((char *)v1321 - (char *)v1320) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v1321 = a2[6];
    v1320 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v1321 - 1) = v1318;
  v1323 = (uint64_t **)((char *)v1321 - 4);
  a2[6] = v1323;
  uint64_t v1324 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1323;
  if ((unint64_t)((char *)v1323 - (char *)v1320) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v1320 = (uint64_t *)a2[7];
  }
  uint64_t *v1320 = v1324 | 0x800000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v1325 = *((unsigned __int16 *)a2 + 34);
  if (v1325 <= 8) {
    LOWORD(v1325) = 8;
  }
  *((_WORD *)a2 + 34) = v1325;
  a2 = v1825;
LABEL_2059:
  if (!v1302) {
    goto LABEL_2082;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  v1326 = a2[4];
  v1327 = a2[5];
  v1328 = a2[6];
  unint64_t v1329 = ((_BYTE)v1328 - ((_BYTE)v1326 + (_BYTE)v1327)) & 3;
  if ((char *)v1328 - (char *)a2[7] < v1329)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v1328 - ((_BYTE)v1326 + (_BYTE)v1327)) & 3);
    a2[6] = (uint64_t **)((char *)a2[6] - v1329);
  }
  else
  {
    v1330 = (uint64_t **)((char *)v1328 - v1329);
    a2[6] = v1330;
    if (!v1329) {
      goto LABEL_2067;
    }
  }
  uint64_t v1331 = 0;
  do
    *((unsigned char *)a2[6] + v1331++) = 0;
  while (v1329 != v1331);
  v1327 = a2[5];
  v1330 = a2[6];
  v1326 = a2[4];
LABEL_2067:
  int v1332 = v1327 - v1330 + v1326 - v1302;
  int v1333 = v1332 + 4;
  if (v1332 == -4 && !*((unsigned char *)a2 + 80)) {
    goto LABEL_2082;
  }
  if ((unint64_t)a2[9] <= 3) {
    a2[9] = (uint64_t **)4;
  }
  unint64_t v1334 = ((_BYTE)v1330 - ((_BYTE)v1326 + (_BYTE)v1327)) & 3;
  v1335 = (uint64_t *)a2[7];
  if ((char *)v1330 - (char *)v1335 < v1334)
  {
    sub_1CBF2C904((uint64_t *)a2, v1334);
    a2[6] = (uint64_t **)((char *)a2[6] - v1334);
LABEL_2072:
    uint64_t v1337 = 0;
    do
      *((unsigned char *)a2[6] + v1337++) = 0;
    while (v1334 != v1337);
    v1336 = a2[6];
    v1335 = (uint64_t *)a2[7];
    goto LABEL_2075;
  }
  v1336 = (uint64_t **)((char *)v1330 - v1334);
  a2[6] = (uint64_t **)((char *)v1330 - v1334);
  if (v1334) {
    goto LABEL_2072;
  }
LABEL_2075:
  if ((unint64_t)((char *)v1336 - (char *)v1335) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    v1336 = a2[6];
    v1335 = (uint64_t *)a2[7];
  }
  *((_DWORD *)v1336 - 1) = v1333;
  v1338 = (uint64_t **)((char *)v1336 - 4);
  a2[6] = v1338;
  uint64_t v1339 = (uint64_t)a2[5] + (char *)a2[4] - (char *)v1338;
  if ((unint64_t)((char *)v1338 - (char *)v1335) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    v1335 = (uint64_t *)a2[7];
  }
  uint64_t *v1335 = v1339 | 0xC00000000;
  ++a2[7];
  ++*((_DWORD *)a2 + 16);
  unsigned int v1340 = *((unsigned __int16 *)a2 + 34);
  if (v1340 <= 0xC) {
    LOWORD(v1340) = 12;
  }
  *((_WORD *)a2 + 34) = v1340;
LABEL_2082:
  v1341 = v1825;
  if (!v1757 && !*((unsigned char *)v1825 + 80))
  {
    int v1342 = v1742;
    goto LABEL_2098;
  }
  int v1342 = v1742;
  if ((unint64_t)v1825[9] <= 3) {
    v1825[9] = (uint64_t **)4;
  }
  v1344 = v1341[6];
  v1343 = (uint64_t *)v1341[7];
  unint64_t v1345 = ((_BYTE)v1344 - (*((_DWORD *)v1341 + 8) + *((_DWORD *)v1341 + 10))) & 3;
  if ((char *)v1344 - (char *)v1343 < v1345)
  {
    sub_1CBF2C904((uint64_t *)v1341, ((_BYTE)v1344 - (*((_DWORD *)v1341 + 8) + *((_DWORD *)v1341 + 10))) & 3);
    v1341[6] = (uint64_t **)((char *)v1341[6] - v1345);
LABEL_2088:
    uint64_t v1347 = 0;
    do
      *((unsigned char *)v1341[6] + v1347++) = 0;
    while (v1345 != v1347);
    v1346 = v1341[6];
    v1343 = (uint64_t *)v1341[7];
    goto LABEL_2091;
  }
  v1346 = (uint64_t **)((char *)v1344 - v1345);
  v1341[6] = v1346;
  if (v1345) {
    goto LABEL_2088;
  }
LABEL_2091:
  if ((unint64_t)((char *)v1346 - (char *)v1343) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v1341, 4uLL);
    v1346 = v1341[6];
    v1343 = (uint64_t *)v1341[7];
  }
  *((_DWORD *)v1346 - 1) = v1757;
  v1348 = (uint64_t **)((char *)v1346 - 4);
  v1341[6] = v1348;
  uint64_t v1349 = (uint64_t)v1341[5] + (char *)v1341[4] - (char *)v1348;
  if ((unint64_t)((char *)v1348 - (char *)v1343) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v1341, 8uLL);
    v1343 = (uint64_t *)v1341[7];
  }
  uint64_t *v1343 = v1349 | 0xA00000000;
  ++v1341[7];
  ++*((_DWORD *)v1341 + 16);
  unsigned int v1350 = *((unsigned __int16 *)v1341 + 34);
  if (v1350 <= 0xA) {
    LOWORD(v1350) = 10;
  }
  *((_WORD *)v1341 + 34) = v1350;
  v1341 = v1825;
LABEL_2098:
  sub_1CC780134((uint64_t *)v1341, 16, v1752);
  if (!v1746 && !*((unsigned char *)v1341 + 80)) {
    goto LABEL_2114;
  }
  if ((unint64_t)v1341[9] <= 3) {
    v1341[9] = (uint64_t **)4;
  }
  v1352 = v1341[6];
  v1351 = (uint64_t *)v1341[7];
  unint64_t v1353 = ((_BYTE)v1352 - (*((_DWORD *)v1341 + 8) + *((_DWORD *)v1341 + 10))) & 3;
  if ((char *)v1352 - (char *)v1351 < v1353)
  {
    sub_1CBF2C904((uint64_t *)v1341, ((_BYTE)v1352 - (*((_DWORD *)v1341 + 8) + *((_DWORD *)v1341 + 10))) & 3);
    v1341[6] = (uint64_t **)((char *)v1341[6] - v1353);
LABEL_2104:
    uint64_t v1355 = 0;
    do
      *((unsigned char *)v1341[6] + v1355++) = 0;
    while (v1353 != v1355);
    v1354 = v1341[6];
    v1351 = (uint64_t *)v1341[7];
    goto LABEL_2107;
  }
  v1354 = (uint64_t **)((char *)v1352 - v1353);
  v1341[6] = v1354;
  if (v1353) {
    goto LABEL_2104;
  }
LABEL_2107:
  if ((unint64_t)((char *)v1354 - (char *)v1351) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v1341, 4uLL);
    v1354 = v1341[6];
    v1351 = (uint64_t *)v1341[7];
  }
  *((_DWORD *)v1354 - 1) = v1746;
  v1356 = (uint64_t **)((char *)v1354 - 4);
  v1341[6] = v1356;
  uint64_t v1357 = (uint64_t)v1341[5] + (char *)v1341[4] - (char *)v1356;
  if ((unint64_t)((char *)v1356 - (char *)v1351) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v1341, 8uLL);
    v1351 = (uint64_t *)v1341[7];
  }
  uint64_t *v1351 = v1357 | 0xE00000000;
  ++v1341[7];
  ++*((_DWORD *)v1341 + 16);
  unsigned int v1358 = *((unsigned __int16 *)v1341 + 34);
  if (v1358 <= 0xE) {
    LOWORD(v1358) = 14;
  }
  *((_WORD *)v1341 + 34) = v1358;
  v1341 = v1825;
LABEL_2114:
  int v1359 = v1297 - v1218;
  sub_1CC780134((uint64_t *)v1341, 20, v1755);
  v1360 = v1825;
  if (!v1764 && !*((unsigned char *)v1825 + 80)) {
    goto LABEL_2130;
  }
  if ((unint64_t)v1825[9] <= 3) {
    v1825[9] = (uint64_t **)4;
  }
  v1362 = v1360[6];
  v1361 = (uint64_t *)v1360[7];
  unint64_t v1363 = ((_BYTE)v1362 - (*((_DWORD *)v1360 + 8) + *((_DWORD *)v1360 + 10))) & 3;
  if ((char *)v1362 - (char *)v1361 < v1363)
  {
    sub_1CBF2C904((uint64_t *)v1360, ((_BYTE)v1362 - (*((_DWORD *)v1360 + 8) + *((_DWORD *)v1360 + 10))) & 3);
    v1360[6] = (uint64_t **)((char *)v1360[6] - v1363);
LABEL_2120:
    uint64_t v1365 = 0;
    do
      *((unsigned char *)v1360[6] + v1365++) = 0;
    while (v1363 != v1365);
    v1364 = v1360[6];
    v1361 = (uint64_t *)v1360[7];
    goto LABEL_2123;
  }
  v1364 = (uint64_t **)((char *)v1362 - v1363);
  v1360[6] = v1364;
  if (v1363) {
    goto LABEL_2120;
  }
LABEL_2123:
  if ((unint64_t)((char *)v1364 - (char *)v1361) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v1360, 4uLL);
    v1364 = v1360[6];
    v1361 = (uint64_t *)v1360[7];
  }
  *((_DWORD *)v1364 - 1) = v1764;
  v1366 = (uint64_t **)((char *)v1364 - 4);
  v1360[6] = v1366;
  uint64_t v1367 = (uint64_t)v1360[5] + (char *)v1360[4] - (char *)v1366;
  if ((unint64_t)((char *)v1366 - (char *)v1361) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v1360, 8uLL);
    v1361 = (uint64_t *)v1360[7];
  }
  uint64_t *v1361 = v1367 | 0x1200000000;
  ++v1360[7];
  ++*((_DWORD *)v1360 + 16);
  unsigned int v1368 = *((unsigned __int16 *)v1360 + 34);
  if (v1368 <= 0x12) {
    LOWORD(v1368) = 18;
  }
  *((_WORD *)v1360 + 34) = v1368;
  v1360 = v1825;
LABEL_2130:
  int v1369 = v1359 + v1220;
  sub_1CC780134((uint64_t *)v1360, 24, v1795);
  if (!v1342 && !*((unsigned char *)v1360 + 80)) {
    goto LABEL_2146;
  }
  if ((unint64_t)v1360[9] <= 3) {
    v1360[9] = (uint64_t **)4;
  }
  v1371 = v1360[6];
  v1370 = (uint64_t *)v1360[7];
  unint64_t v1372 = ((_BYTE)v1371 - (*((_DWORD *)v1360 + 8) + *((_DWORD *)v1360 + 10))) & 3;
  if ((char *)v1371 - (char *)v1370 < v1372)
  {
    sub_1CBF2C904((uint64_t *)v1360, ((_BYTE)v1371 - (*((_DWORD *)v1360 + 8) + *((_DWORD *)v1360 + 10))) & 3);
    v1360[6] = (uint64_t **)((char *)v1360[6] - v1372);
LABEL_2136:
    uint64_t v1374 = 0;
    do
      *((unsigned char *)v1360[6] + v1374++) = 0;
    while (v1372 != v1374);
    v1373 = v1360[6];
    v1370 = (uint64_t *)v1360[7];
    goto LABEL_2139;
  }
  v1373 = (uint64_t **)((char *)v1371 - v1372);
  v1360[6] = v1373;
  if (v1372) {
    goto LABEL_2136;
  }
LABEL_2139:
  if ((unint64_t)((char *)v1373 - (char *)v1370) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v1360, 4uLL);
    v1373 = v1360[6];
    v1370 = (uint64_t *)v1360[7];
  }
  *((_DWORD *)v1373 - 1) = v1342;
  v1375 = (uint64_t **)((char *)v1373 - 4);
  v1360[6] = v1375;
  uint64_t v1376 = (uint64_t)v1360[5] + (char *)v1360[4] - (char *)v1375;
  if ((unint64_t)((char *)v1375 - (char *)v1370) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v1360, 8uLL);
    v1370 = (uint64_t *)v1360[7];
  }
  uint64_t *v1370 = v1376 | 0x1600000000;
  ++v1360[7];
  ++*((_DWORD *)v1360 + 16);
  unsigned int v1377 = *((unsigned __int16 *)v1360 + 34);
  if (v1377 <= 0x16) {
    LOWORD(v1377) = 22;
  }
  *((_WORD *)v1360 + 34) = v1377;
  v1360 = v1825;
LABEL_2146:
  sub_1CC780134((uint64_t *)v1360, 28, v1809);
  v1378 = v1825;
  if (!v1762 && !*((unsigned char *)v1825 + 80)) {
    goto LABEL_2162;
  }
  if ((unint64_t)v1825[9] <= 3) {
    v1825[9] = (uint64_t **)4;
  }
  v1380 = v1378[6];
  v1379 = (uint64_t *)v1378[7];
  unint64_t v1381 = ((_BYTE)v1380 - (*((_DWORD *)v1378 + 8) + *((_DWORD *)v1378 + 10))) & 3;
  if ((char *)v1380 - (char *)v1379 < v1381)
  {
    sub_1CBF2C904((uint64_t *)v1378, ((_BYTE)v1380 - (*((_DWORD *)v1378 + 8) + *((_DWORD *)v1378 + 10))) & 3);
    v1378[6] = (uint64_t **)((char *)v1378[6] - v1381);
LABEL_2152:
    uint64_t v1383 = 0;
    do
      *((unsigned char *)v1378[6] + v1383++) = 0;
    while (v1381 != v1383);
    v1382 = v1378[6];
    v1379 = (uint64_t *)v1378[7];
    goto LABEL_2155;
  }
  v1382 = (uint64_t **)((char *)v1380 - v1381);
  v1378[6] = v1382;
  if (v1381) {
    goto LABEL_2152;
  }
LABEL_2155:
  if ((unint64_t)((char *)v1382 - (char *)v1379) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v1378, 4uLL);
    v1382 = v1378[6];
    v1379 = (uint64_t *)v1378[7];
  }
  *((_DWORD *)v1382 - 1) = v1762;
  v1384 = (uint64_t **)((char *)v1382 - 4);
  v1378[6] = v1384;
  uint64_t v1385 = (uint64_t)v1378[5] + (char *)v1378[4] - (char *)v1384;
  if ((unint64_t)((char *)v1384 - (char *)v1379) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v1378, 8uLL);
    v1379 = (uint64_t *)v1378[7];
  }
  uint64_t *v1379 = v1385 | 0x1A00000000;
  ++v1378[7];
  ++*((_DWORD *)v1378 + 16);
  unsigned int v1386 = *((unsigned __int16 *)v1378 + 34);
  if (v1386 <= 0x1A) {
    LOWORD(v1386) = 26;
  }
  *((_WORD *)v1378 + 34) = v1386;
  v1378 = v1825;
LABEL_2162:
  if (!v1369) {
    goto LABEL_2185;
  }
  if ((unint64_t)v1378[9] <= 3) {
    v1378[9] = (uint64_t **)4;
  }
  v1387 = v1378[4];
  v1388 = v1378[5];
  v1389 = v1378[6];
  unint64_t v1390 = ((_BYTE)v1389 - ((_BYTE)v1387 + (_BYTE)v1388)) & 3;
  if ((char *)v1389 - (char *)v1378[7] < v1390)
  {
    sub_1CBF2C904((uint64_t *)v1378, ((_BYTE)v1389 - ((_BYTE)v1387 + (_BYTE)v1388)) & 3);
    v1378[6] = (uint64_t **)((char *)v1378[6] - v1390);
  }
  else
  {
    v1391 = (uint64_t **)((char *)v1389 - v1390);
    v1378[6] = v1391;
    if (!v1390) {
      goto LABEL_2170;
    }
  }
  uint64_t v1392 = 0;
  do
    *((unsigned char *)v1378[6] + v1392++) = 0;
  while (v1390 != v1392);
  v1388 = v1378[5];
  v1391 = v1378[6];
  v1387 = v1378[4];
LABEL_2170:
  int v1393 = v1388 - v1391 + v1387 - v1369;
  int v1394 = v1393 + 4;
  if (v1393 == -4 && !*((unsigned char *)v1378 + 80)) {
    goto LABEL_2185;
  }
  if ((unint64_t)v1378[9] <= 3) {
    v1378[9] = (uint64_t **)4;
  }
  unint64_t v1395 = ((_BYTE)v1391 - ((_BYTE)v1387 + (_BYTE)v1388)) & 3;
  v1396 = (uint64_t *)v1378[7];
  if ((char *)v1391 - (char *)v1396 < v1395)
  {
    sub_1CBF2C904((uint64_t *)v1378, v1395);
    v1378[6] = (uint64_t **)((char *)v1378[6] - v1395);
LABEL_2175:
    uint64_t v1398 = 0;
    do
      *((unsigned char *)v1378[6] + v1398++) = 0;
    while (v1395 != v1398);
    v1397 = v1378[6];
    v1396 = (uint64_t *)v1378[7];
    goto LABEL_2178;
  }
  v1397 = (uint64_t **)((char *)v1391 - v1395);
  v1378[6] = (uint64_t **)((char *)v1391 - v1395);
  if (v1395) {
    goto LABEL_2175;
  }
LABEL_2178:
  if ((unint64_t)((char *)v1397 - (char *)v1396) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v1378, 4uLL);
    v1397 = v1378[6];
    v1396 = (uint64_t *)v1378[7];
  }
  *((_DWORD *)v1397 - 1) = v1394;
  v1399 = (uint64_t **)((char *)v1397 - 4);
  v1378[6] = v1399;
  uint64_t v1400 = (uint64_t)v1378[5] + (char *)v1378[4] - (char *)v1399;
  if ((unint64_t)((char *)v1399 - (char *)v1396) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v1378, 8uLL);
    v1396 = (uint64_t *)v1378[7];
  }
  uint64_t *v1396 = v1400 | 0x1E00000000;
  ++v1378[7];
  ++*((_DWORD *)v1378 + 16);
  unsigned int v1401 = *((unsigned __int16 *)v1378 + 34);
  if (v1401 <= 0x1E) {
    LOWORD(v1401) = 30;
  }
  *((_WORD *)v1378 + 34) = v1401;
  v1378 = v1825;
LABEL_2185:
  sub_1CC780134((uint64_t *)v1378, 56, v1704);
  sub_1CC780134((uint64_t *)v1378, 58, v1736);
  sub_1CC77CE5C(v1814, *a1, (uint64_t *)&__dst);
  if (v1706 == 28) {
    sub_1CC780134((uint64_t *)v1378, 62, v1701);
  }
  uint64_t v1402 = sub_1CBF2CB78((uint64_t)v1378, v1826);
  if (v1788) {
    operator delete(v1788);
  }
  if (__srch) {
    operator delete(__srch);
  }
  if (v1812) {
    operator delete(v1812);
  }
  if (v1827) {
    operator delete(v1827);
  }
  if (!v1803)
  {
    if (!v1765) {
      goto LABEL_2197;
    }
LABEL_2224:
    operator delete(v1765);
    if (!v1768) {
      goto LABEL_2198;
    }
    goto LABEL_2225;
  }
  operator delete(v1803);
  if (v1765) {
    goto LABEL_2224;
  }
LABEL_2197:
  if (!v1768) {
    goto LABEL_2198;
  }
LABEL_2225:
  operator delete(v1768);
LABEL_2198:
  if (__p) {
    operator delete(__p);
  }
  if (v1753) {
    operator delete(v1753);
  }
  if (((uint64_t)v1841[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v1841[1], 8);
  }
  return v1402;
}

uint64_t sub_1CC77C568(uint64_t a1, void *__src, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  unint64_t v6 = 4 * a3;
  uint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = ((_BYTE)v7 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v7 - *(void *)(a1 + 56) < v8)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v7 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v8;
  }
  else
  {
    *(void *)(a1 + 48) = v7 - v8;
    if (!v8) {
      goto LABEL_5;
    }
  }
  uint64_t v18 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v18++) = 0;
  while (v8 != v18);
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
LABEL_5:
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = ((_BYTE)v9 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v9 - *(void *)(a1 + 56) < v10)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v9 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v10;
  }
  else
  {
    *(void *)(a1 + 48) = v9 - v10;
    if (!v10) {
      goto LABEL_7;
    }
  }
  uint64_t v19 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v19++) = 0;
  while (v10 != v19);
LABEL_7:
  if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11 - *(void *)(a1 + 56) < v6)
    {
      sub_1CBF2C904((uint64_t *)a1, 4 * a3);
      uint64_t v11 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 48) = v11 - v6;
    memcpy((void *)(v11 - v6), __src, 4 * a3);
  }
  *(unsigned char *)(a1 + 70) = 0;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = ((_BYTE)v12 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v12 - v13 < v14)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v12 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v14;
  }
  else
  {
    uint64_t v15 = v12 - v14;
    *(void *)(a1 + 48) = v15;
    if (!v14) {
      goto LABEL_15;
    }
  }
  uint64_t v20 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v20++) = 0;
  while (v14 != v20);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
LABEL_15:
  if ((unint64_t)(v15 - v13) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a1, 4uLL);
    uint64_t v15 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v15 - 4) = a3;
  uint64_t v16 = v15 - 4;
  *(void *)(a1 + 48) = v16;
  return (*(_DWORD *)(a1 + 32) - v16 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1CC77C798(uint64_t *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t v5 = *a1;
  if (!v4 && !*(unsigned char *)(v5 + 80)) {
    goto LABEL_16;
  }
  if (*(void *)(v5 + 72) <= 3uLL) {
    *(void *)(v5 + 72) = 4;
  }
  uint64_t v7 = *(void *)(v5 + 48);
  unint64_t v6 = *(uint64_t **)(v5 + 56);
  unint64_t v8 = ((_BYTE)v7 - (*(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 40))) & 3;
  if (v7 - (uint64_t)v6 < v8)
  {
    unint64_t v55 = ((_BYTE)v7 - (*(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 40))) & 3;
    sub_1CBF2C904((uint64_t *)v5, v8);
    unint64_t v8 = v55;
    *(void *)(v5 + 48) -= v55;
LABEL_6:
    uint64_t v10 = 0;
    do
      *(unsigned char *)(*(void *)(v5 + 48) + v10++) = 0;
    while (v8 != v10);
    uint64_t v9 = *(void *)(v5 + 48);
    unint64_t v6 = *(uint64_t **)(v5 + 56);
    goto LABEL_9;
  }
  uint64_t v9 = v7 - v8;
  *(void *)(v5 + 48) = v9;
  if (v8) {
    goto LABEL_6;
  }
LABEL_9:
  if ((unint64_t)(v9 - (void)v6) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v5, 4uLL);
    uint64_t v9 = *(void *)(v5 + 48);
    unint64_t v6 = *(uint64_t **)(v5 + 56);
  }
  *(_DWORD *)(v9 - 4) = v4;
  uint64_t v11 = v9 - 4;
  *(void *)(v5 + 48) = v11;
  uint64_t v12 = *(void *)(v5 + 32) - v11 + *(void *)(v5 + 40);
  if ((unint64_t)(v11 - (void)v6) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v5, 8uLL);
    unint64_t v6 = *(uint64_t **)(v5 + 56);
  }
  uint64_t *v6 = v12 | 0x2C00000000;
  *(void *)(v5 + 56) += 8;
  ++*(_DWORD *)(v5 + 64);
  unsigned int v13 = *(unsigned __int16 *)(v5 + 68);
  if (v13 <= 0x2C) {
    LOWORD(v13) = 44;
  }
  *(_WORD *)(v5 + 68) = v13;
LABEL_16:
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v15 = *a1;
  if (!v14 && !*(unsigned char *)(v15 + 80)) {
    goto LABEL_32;
  }
  if (*(void *)(v15 + 72) <= 3uLL) {
    *(void *)(v15 + 72) = 4;
  }
  uint64_t v17 = *(void *)(v15 + 48);
  uint64_t v16 = *(uint64_t **)(v15 + 56);
  unint64_t v18 = ((_BYTE)v17 - (*(_DWORD *)(v15 + 32) + *(_DWORD *)(v15 + 40))) & 3;
  if (v17 - (uint64_t)v16 < v18)
  {
    unint64_t v57 = ((_BYTE)v17 - (*(_DWORD *)(v15 + 32) + *(_DWORD *)(v15 + 40))) & 3;
    sub_1CBF2C904((uint64_t *)v15, v18);
    unint64_t v18 = v57;
    *(void *)(v15 + 48) -= v57;
LABEL_22:
    uint64_t v20 = 0;
    do
      *(unsigned char *)(*(void *)(v15 + 48) + v20++) = 0;
    while (v18 != v20);
    uint64_t v19 = *(void *)(v15 + 48);
    uint64_t v16 = *(uint64_t **)(v15 + 56);
    goto LABEL_25;
  }
  uint64_t v19 = v17 - v18;
  *(void *)(v15 + 48) = v19;
  if (v18) {
    goto LABEL_22;
  }
LABEL_25:
  if ((unint64_t)(v19 - (void)v16) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v15, 4uLL);
    uint64_t v19 = *(void *)(v15 + 48);
    uint64_t v16 = *(uint64_t **)(v15 + 56);
  }
  *(_DWORD *)(v19 - 4) = v14;
  uint64_t v21 = v19 - 4;
  *(void *)(v15 + 48) = v21;
  uint64_t v22 = *(void *)(v15 + 32) - v21 + *(void *)(v15 + 40);
  if ((unint64_t)(v21 - (void)v16) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v15, 8uLL);
    uint64_t v16 = *(uint64_t **)(v15 + 56);
  }
  *uint64_t v16 = v22 | 0x2E00000000;
  *(void *)(v15 + 56) += 8;
  ++*(_DWORD *)(v15 + 64);
  unsigned int v23 = *(unsigned __int16 *)(v15 + 68);
  if (v23 <= 0x2E) {
    LOWORD(v23) = 46;
  }
  *(_WORD *)(v15 + 68) = v23;
LABEL_32:
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v25 = *a1;
  if (!v24 && !*(unsigned char *)(v25 + 80)) {
    goto LABEL_48;
  }
  if (*(void *)(v25 + 72) <= 3uLL) {
    *(void *)(v25 + 72) = 4;
  }
  uint64_t v27 = *(void *)(v25 + 48);
  unsigned int v26 = *(uint64_t **)(v25 + 56);
  unint64_t v28 = ((_BYTE)v27 - (*(_DWORD *)(v25 + 32) + *(_DWORD *)(v25 + 40))) & 3;
  if (v27 - (uint64_t)v26 < v28)
  {
    unint64_t v56 = ((_BYTE)v27 - (*(_DWORD *)(v25 + 32) + *(_DWORD *)(v25 + 40))) & 3;
    sub_1CBF2C904((uint64_t *)v25, v28);
    unint64_t v28 = v56;
    *(void *)(v25 + 48) -= v56;
LABEL_37:
    uint64_t v30 = 0;
    do
      *(unsigned char *)(*(void *)(v25 + 48) + v30++) = 0;
    while (v28 != v30);
    uint64_t v29 = *(void *)(v25 + 48);
    unsigned int v26 = *(uint64_t **)(v25 + 56);
    goto LABEL_40;
  }
  uint64_t v29 = v27 - v28;
  *(void *)(v25 + 48) = v29;
  if (v28) {
    goto LABEL_37;
  }
LABEL_40:
  if ((unint64_t)(v29 - (void)v26) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v25, 4uLL);
    uint64_t v29 = *(void *)(v25 + 48);
    unsigned int v26 = *(uint64_t **)(v25 + 56);
  }
  *(_DWORD *)(v29 - 4) = v24;
  uint64_t v31 = v29 - 4;
  *(void *)(v25 + 48) = v31;
  uint64_t v32 = *(void *)(v25 + 32) - v31 + *(void *)(v25 + 40);
  if ((unint64_t)(v31 - (void)v26) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v25, 8uLL);
    unsigned int v26 = *(uint64_t **)(v25 + 56);
  }
  *unsigned int v26 = v32 | 0x3000000000;
  *(void *)(v25 + 56) += 8;
  ++*(_DWORD *)(v25 + 64);
  unsigned int v33 = *(unsigned __int16 *)(v25 + 68);
  if (v33 <= 0x30) {
    LOWORD(v33) = 48;
  }
  *(_WORD *)(v25 + 68) = v33;
LABEL_48:
  int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v35 = *a1;
  if (!v34 && !*(unsigned char *)(v35 + 80)) {
    goto LABEL_64;
  }
  if (*(void *)(v35 + 72) <= 3uLL) {
    *(void *)(v35 + 72) = 4;
  }
  uint64_t v37 = *(void *)(v35 + 48);
  uint64_t v36 = *(uint64_t **)(v35 + 56);
  unint64_t v38 = ((_BYTE)v37 - (*(_DWORD *)(v35 + 32) + *(_DWORD *)(v35 + 40))) & 3;
  if (v37 - (uint64_t)v36 < v38)
  {
    unint64_t v58 = ((_BYTE)v37 - (*(_DWORD *)(v35 + 32) + *(_DWORD *)(v35 + 40))) & 3;
    sub_1CBF2C904((uint64_t *)v35, v38);
    unint64_t v38 = v58;
    *(void *)(v35 + 48) -= v58;
LABEL_54:
    uint64_t v40 = 0;
    do
      *(unsigned char *)(*(void *)(v35 + 48) + v40++) = 0;
    while (v38 != v40);
    uint64_t v39 = *(void *)(v35 + 48);
    uint64_t v36 = *(uint64_t **)(v35 + 56);
    goto LABEL_57;
  }
  uint64_t v39 = v37 - v38;
  *(void *)(v35 + 48) = v39;
  if (v38) {
    goto LABEL_54;
  }
LABEL_57:
  if ((unint64_t)(v39 - (void)v36) <= 3)
  {
    sub_1CBF2C904((uint64_t *)v35, 4uLL);
    uint64_t v39 = *(void *)(v35 + 48);
    uint64_t v36 = *(uint64_t **)(v35 + 56);
  }
  *(_DWORD *)(v39 - 4) = v34;
  uint64_t v41 = v39 - 4;
  *(void *)(v35 + 48) = v41;
  uint64_t v42 = *(void *)(v35 + 32) - v41 + *(void *)(v35 + 40);
  if ((unint64_t)(v41 - (void)v36) <= 7)
  {
    sub_1CBF2C904((uint64_t *)v35, 8uLL);
    uint64_t v36 = *(uint64_t **)(v35 + 56);
  }
  *uint64_t v36 = v42 | 0x3200000000;
  *(void *)(v35 + 56) += 8;
  ++*(_DWORD *)(v35 + 64);
  unsigned int v43 = *(unsigned __int16 *)(v35 + 68);
  if (v43 <= 0x32) {
    LOWORD(v43) = 50;
  }
  *(_WORD *)(v35 + 68) = v43;
LABEL_64:
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  int v45 = result;
  uint64_t v46 = *a1;
  if (!result && !*(unsigned char *)(v46 + 80)) {
    return result;
  }
  if (*(void *)(v46 + 72) <= 3uLL) {
    *(void *)(v46 + 72) = 4;
  }
  uint64_t v48 = *(void *)(v46 + 48);
  int v47 = *(uint64_t **)(v46 + 56);
  unint64_t v49 = ((_BYTE)v48 - (*(_DWORD *)(v46 + 32) + *(_DWORD *)(v46 + 40))) & 3;
  if (v48 - (uint64_t)v47 < v49)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)v46, ((_BYTE)v48 - (*(_DWORD *)(v46 + 32) + *(_DWORD *)(v46 + 40))) & 3);
    *(void *)(v46 + 48) -= v49;
LABEL_70:
    uint64_t v51 = 0;
    do
      *(unsigned char *)(*(void *)(v46 + 48) + v51++) = 0;
    while (v49 != v51);
    uint64_t v50 = *(void *)(v46 + 48);
    int v47 = *(uint64_t **)(v46 + 56);
    goto LABEL_73;
  }
  uint64_t v50 = v48 - v49;
  *(void *)(v46 + 48) = v50;
  if (v49) {
    goto LABEL_70;
  }
LABEL_73:
  if ((unint64_t)(v50 - (void)v47) <= 3)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)v46, 4uLL);
    uint64_t v50 = *(void *)(v46 + 48);
    int v47 = *(uint64_t **)(v46 + 56);
  }
  *(_DWORD *)(v50 - 4) = v45;
  uint64_t v52 = v50 - 4;
  *(void *)(v46 + 48) = v52;
  uint64_t v53 = *(void *)(v46 + 32) - v52 + *(void *)(v46 + 40);
  if ((unint64_t)(v52 - (void)v47) <= 7)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)v46, 8uLL);
    int v47 = *(uint64_t **)(v46 + 56);
  }
  uint64_t *v47 = v53 | 0x3400000000;
  *(void *)(v46 + 56) += 8;
  ++*(_DWORD *)(v46 + 64);
  unsigned int v54 = *(unsigned __int16 *)(v46 + 68);
  if (v54 <= 0x34) {
    LOWORD(v54) = 52;
  }
  *(_WORD *)(v46 + 68) = v54;
  return result;
}

uint64_t sub_1CC77CE5C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(**(void **)result + 72))
  {
    uint64_t v89 = (uint64_t *)result;
    int v104 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
    int v103 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 128))(a2);
    int v102 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 144))(a2);
    int v101 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
    int v100 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    int v99 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 168))(a2);
    int v98 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
    int v97 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 184))(a2);
    int v96 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
    int v95 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    int v92 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 208))(a2);
    int v91 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(a2);
    int v94 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    uint64_t v93 = *a3;
    uint64_t v87 = *(uint64_t *)((char *)a3 + 28);
    int v90 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v88 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    int v86 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    int v85 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 368))(a2);
    int v84 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 376))(a2);
    int v83 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    int v82 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
    int v81 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 384))(a2);
    int v79 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    int v77 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    int v80 = *((_DWORD *)a3 + 6);
    int v78 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
    int v76 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 392))(a2);
    int v75 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
    int v74 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 344))(a2);
    int v73 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 400))(a2);
    int v72 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 408))(a2);
    int v71 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 416))(a2);
    int v70 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
    int v69 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 432))(a2);
    int v68 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 440))(a2);
    int v67 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 448))(a2);
    int v66 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 456))(a2);
    int v65 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 464))(a2);
    int v64 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 472))(a2);
    int v63 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 480))(a2);
    int v62 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 488))(a2);
    int v61 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 496))(a2);
    int v60 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
    int v59 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 512))(a2);
    int v58 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 520))(a2);
    int v57 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 528))(a2);
    int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 536))(a2);
    int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
    int v54 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 552))(a2);
    int v53 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 560))(a2);
    int v52 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 568))(a2);
    int v51 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 576))(a2);
    int v50 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 584))(a2);
    int v49 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 592))(a2);
    int v48 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 600))(a2);
    int v47 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 608))(a2);
    int v46 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 616))(a2);
    int v45 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 624))(a2);
    int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 280))(a2);
    int v43 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
    int v42 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 632))(a2);
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 240))(a2);
    int v40 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 640))(a2);
    int v39 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 648))(a2);
    int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 656))(a2);
    int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 664))(a2);
    int v35 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 672))(a2);
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 680))(a2);
    int v33 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 688))(a2);
    int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 704))(a2);
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 352))(a2);
    int v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 360))(a2);
    int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
    int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 712))(a2);
    double v5 = (*(double (**)(uint64_t))(*(void *)a2 + 720))(a2);
    double v6 = (*(double (**)(uint64_t))(*(void *)a2 + 728))(a2);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 768))(a2);
    double v7 = (*(double (**)(uint64_t))(*(void *)a2 + 736))(a2);
    double v8 = (*(double (**)(uint64_t))(*(void *)a2 + 752))(a2);
    int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 760))(a2);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 776))(a2);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 784))(a2);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 792))(a2);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 800))(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 808))(a2);
    LODWORD(a3) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 816))(a2);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 824))(a2);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 832))(a2);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 848))(a2);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 856))(a2);
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 864))(a2);
    int v106 = 20;
    char v107 = 3;
    uint64_t v18 = *v89;
    uint64_t v204 = v87;
    uint64_t v105 = &unk_1F261DB68;
    int v110 = v103;
    int v111 = v102;
    int v112 = v101;
    int v113 = v100;
    int v114 = v99;
    int v115 = v98;
    int v116 = v97;
    int v117 = v96;
    int v118 = v95;
    int v119 = v92;
    int v120 = v91;
    int v121 = v72;
    int v122 = v71;
    int v123 = v76;
    int v124 = v75;
    int v125 = v74;
    int v126 = v73;
    int v127 = v70;
    int v128 = v69;
    int v129 = v68;
    int v130 = v67;
    int v131 = v66;
    int v132 = v65;
    int v133 = v64;
    int v134 = v63;
    int v135 = v62;
    int v136 = v61;
    int v137 = v60;
    int v138 = v59;
    int v139 = v58;
    int v140 = v57;
    int v141 = v56;
    int v142 = v55;
    int v143 = v54;
    int v144 = v53;
    int v145 = v52;
    int v146 = v51;
    int v147 = v50;
    int v148 = v49;
    int v149 = v48;
    int v150 = v79;
    int v151 = v77;
    int v152 = v90;
    int v153 = v47;
    int v154 = v46;
    int v155 = v45;
    int v156 = v88;
    int v157 = v86;
    int v158 = v44;
    int v159 = v43;
    int v160 = v85;
    int v161 = v84;
    int v162 = v83;
    int v163 = v82;
    int v164 = v81;
    int v165 = v93;
    int v166 = v94;
    int v167 = v42;
    int v168 = v41;
    int v169 = v40;
    int v170 = v39;
    int v171 = v38;
    int v172 = v37;
    int v173 = v36;
    int v174 = v35;
    int v175 = v34;
    int v176 = v33;
    int v177 = v32;
    int v178 = v80;
    int v179 = v78;
    int v180 = v31;
    int v181 = v30;
    int v182 = v29;
    int v183 = v28;
    int v184 = v27;
    int v185 = v26;
    int v186 = v25;
    uint64_t v187 = v24;
    int v192 = v22;
    uint64_t v193 = v23;
    uint64_t v194 = v21;
    uint64_t v195 = v20;
    uint64_t v196 = v19;
    int v197 = v9;
    int v198 = v10;
    int v199 = (int)a3;
    int v200 = v11;
    int v201 = v12;
    int v202 = v13;
    int v203 = v14;
    int v205 = v15;
    uint64_t v206 = v16;
    int v207 = v17;
    int v108 = v104;
    int v109 = 0;
    double v188 = v5;
    double v189 = v6;
    double v190 = v7;
    double v191 = v8;
    return llvm::LLVMContext::diagnose(v18, (const llvm::DiagnosticInfo *)&v105);
  }
  return result;
}

void sub_1CC77E7F0(char **a1, uint64_t a2, int *a3, int *a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a4)
  {
    double v5 = a3;
    double v8 = 0;
    int v9 = 0;
    uint64_t v89 = a4;
    uint64_t v90 = a5;
    while (1)
    {
      int v10 = *v5;
      if (*v5 != 11 || *(unsigned char *)(a5 + 82) != 0) {
        break;
      }
LABEL_96:
      v5 += 5;
      if (v5 == a4) {
        return;
      }
    }
    *(unsigned char *)(a2 + 70) = 1;
    int v12 = *(_DWORD *)(a2 + 32);
    uint64_t v13 = *(void *)(a2 + 48);
    int v14 = *(_DWORD *)(a2 + 40);
    int v15 = v10 | *(unsigned __int8 *)(a2 + 80);
    if (v15)
    {
      if (!*(void *)(a2 + 72)) {
        *(void *)(a2 + 72) = 1;
      }
      uint64_t v16 = v13;
      if (v13 == *(void *)(a2 + 56))
      {
        __int16 v75 = v12;
        sub_1CBF2C904((uint64_t *)a2, 1uLL);
        LOWORD(v12) = v75;
        uint64_t v16 = *(void *)(a2 + 48);
      }
      *(void *)(a2 + 48) = v16 - 1;
      *(unsigned char *)(v16 - 1) = v10;
      uint64_t v17 = *(void *)(a2 + 32);
      uint64_t v18 = *(void *)(a2 + 40);
      uint64_t v20 = *(void *)(a2 + 48);
      uint64_t v19 = *(uint64_t **)(a2 + 56);
      if ((unint64_t)(v20 - (void)v19) <= 7)
      {
        __int16 v84 = v12;
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        LOWORD(v12) = v84;
        uint64_t v19 = *(uint64_t **)(a2 + 56);
      }
      *uint64_t v19 = (v17 - v20 + v18) | 0x400000000;
      *(void *)(a2 + 56) += 8;
      ++*(_DWORD *)(a2 + 64);
      unsigned int v21 = *(unsigned __int16 *)(a2 + 68);
      if (v21 <= 4) {
        LOWORD(v21) = 4;
      }
      *(_WORD *)(a2 + 68) = v21;
      int v15 = *(unsigned __int8 *)(a2 + 80);
    }
    int v22 = v5[1];
    int v23 = v22 | v15;
    if (!v23)
    {
LABEL_32:
      int v33 = v5[2];
      int v34 = v33 | v23;
      if (!v34) {
        goto LABEL_47;
      }
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v36 = *(void *)(a2 + 48);
      int v35 = *(uint64_t **)(a2 + 56);
      unint64_t v37 = ((_BYTE)v36 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v36 - (uint64_t)v35 < v37)
      {
        __int16 v81 = v12;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v36 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        LOWORD(v12) = v81;
        *(void *)(a2 + 48) -= v37;
      }
      else
      {
        uint64_t v38 = v36 - v37;
        *(void *)(a2 + 48) = v36 - v37;
        if (!v37)
        {
LABEL_40:
          if ((unint64_t)(v38 - (void)v35) <= 3)
          {
            __int16 v77 = v12;
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            LOWORD(v12) = v77;
            uint64_t v38 = *(void *)(a2 + 48);
            int v35 = *(uint64_t **)(a2 + 56);
          }
          *(_DWORD *)(v38 - 4) = v33;
          uint64_t v40 = v38 - 4;
          *(void *)(a2 + 48) = v40;
          uint64_t v41 = *(void *)(a2 + 32);
          uint64_t v42 = *(void *)(a2 + 40);
          if ((unint64_t)(v40 - (void)v35) <= 7)
          {
            __int16 v86 = v12;
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            LOWORD(v12) = v86;
            int v35 = *(uint64_t **)(a2 + 56);
          }
          uint64_t *v35 = (v41 - v40 + v42) | 0x800000000;
          *(void *)(a2 + 56) += 8;
          ++*(_DWORD *)(a2 + 64);
          unsigned int v43 = *(unsigned __int16 *)(a2 + 68);
          if (v43 <= 8) {
            LOWORD(v43) = 8;
          }
          *(_WORD *)(a2 + 68) = v43;
          int v34 = *(unsigned __int8 *)(a2 + 80);
LABEL_47:
          int v44 = v5[3];
          int v45 = v44 | v34;
          if (!v45) {
            goto LABEL_62;
          }
          if (*(void *)(a2 + 72) <= 3uLL) {
            *(void *)(a2 + 72) = 4;
          }
          uint64_t v47 = *(void *)(a2 + 48);
          int v46 = *(uint64_t **)(a2 + 56);
          unint64_t v48 = ((_BYTE)v47 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
          if (v47 - (uint64_t)v46 < v48)
          {
            __int16 v82 = v12;
            sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v47 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
            LOWORD(v12) = v82;
            *(void *)(a2 + 48) -= v48;
          }
          else
          {
            uint64_t v49 = v47 - v48;
            *(void *)(a2 + 48) = v47 - v48;
            if (!v48)
            {
LABEL_55:
              if ((unint64_t)(v49 - (void)v46) <= 3)
              {
                __int16 v78 = v12;
                sub_1CBF2C904((uint64_t *)a2, 4uLL);
                LOWORD(v12) = v78;
                uint64_t v49 = *(void *)(a2 + 48);
                int v46 = *(uint64_t **)(a2 + 56);
              }
              *(_DWORD *)(v49 - 4) = v44;
              uint64_t v51 = v49 - 4;
              *(void *)(a2 + 48) = v51;
              uint64_t v52 = *(void *)(a2 + 32);
              uint64_t v53 = *(void *)(a2 + 40);
              if ((unint64_t)(v51 - (void)v46) <= 7)
              {
                __int16 v87 = v12;
                sub_1CBF2C904((uint64_t *)a2, 8uLL);
                LOWORD(v12) = v87;
                int v46 = *(uint64_t **)(a2 + 56);
              }
              *int v46 = (v52 - v51 + v53) | 0xA00000000;
              *(void *)(a2 + 56) += 8;
              ++*(_DWORD *)(a2 + 64);
              unsigned int v54 = *(unsigned __int16 *)(a2 + 68);
              if (v54 <= 0xA) {
                LOWORD(v54) = 10;
              }
              *(_WORD *)(a2 + 68) = v54;
              int v45 = *(unsigned __int8 *)(a2 + 80);
LABEL_62:
              int v55 = v5[4];
              if (!(v55 | v45))
              {
LABEL_77:
                int v65 = sub_1CBF2CB78(a2, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
                int v66 = v65;
                int v67 = a1[1];
                if (v67 >= v8)
                {
                  uint64_t v69 = (v67 - v9) >> 2;
                  unint64_t v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62) {
                    abort();
                  }
                  if ((v8 - v9) >> 1 > v70) {
                    unint64_t v70 = (v8 - v9) >> 1;
                  }
                  if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v71 = v70;
                  }
                  if (v71)
                  {
                    if (v71 >> 62) {
                      sub_1CB833614();
                    }
                    int v72 = (char *)operator new(4 * v71);
                  }
                  else
                  {
                    int v72 = 0;
                  }
                  int v73 = &v72[4 * v69];
                  *(_DWORD *)int v73 = v66;
                  int v68 = v73 + 4;
                  while (v67 != v9)
                  {
                    int v74 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v73 - 1) = v74;
                    v73 -= 4;
                  }
                  double v8 = &v72[4 * v71];
                  *a1 = v73;
                  a1[1] = v68;
                  a1[2] = v8;
                  if (v9) {
                    operator delete(v9);
                  }
                  int v9 = v73;
                }
                else
                {
                  *(_DWORD *)int v67 = v65;
                  int v68 = v67 + 4;
                }
                a4 = v89;
                a5 = v90;
                a1[1] = v68;
                goto LABEL_96;
              }
              if (*(void *)(a2 + 72) <= 3uLL) {
                *(void *)(a2 + 72) = 4;
              }
              uint64_t v57 = *(void *)(a2 + 48);
              int v56 = *(uint64_t **)(a2 + 56);
              unint64_t v58 = ((_BYTE)v57 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
              if (v57 - (uint64_t)v56 < v58)
              {
                __int16 v83 = v12;
                sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v57 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
                LOWORD(v12) = v83;
                *(void *)(a2 + 48) -= v58;
              }
              else
              {
                uint64_t v59 = v57 - v58;
                *(void *)(a2 + 48) = v57 - v58;
                if (!v58)
                {
LABEL_70:
                  if ((unint64_t)(v59 - (void)v56) <= 3)
                  {
                    __int16 v79 = v12;
                    sub_1CBF2C904((uint64_t *)a2, 4uLL);
                    LOWORD(v12) = v79;
                    uint64_t v59 = *(void *)(a2 + 48);
                    int v56 = *(uint64_t **)(a2 + 56);
                  }
                  *(_DWORD *)(v59 - 4) = v55;
                  uint64_t v61 = v59 - 4;
                  *(void *)(a2 + 48) = v61;
                  uint64_t v62 = *(void *)(a2 + 32);
                  uint64_t v63 = *(void *)(a2 + 40);
                  if ((unint64_t)(v61 - (void)v56) <= 7)
                  {
                    __int16 v88 = v12;
                    sub_1CBF2C904((uint64_t *)a2, 8uLL);
                    LOWORD(v12) = v88;
                    int v56 = *(uint64_t **)(a2 + 56);
                  }
                  *int v56 = (v62 - v61 + v63) | 0xC00000000;
                  *(void *)(a2 + 56) += 8;
                  ++*(_DWORD *)(a2 + 64);
                  unsigned int v64 = *(unsigned __int16 *)(a2 + 68);
                  if (v64 <= 0xC) {
                    LOWORD(v64) = 12;
                  }
                  *(_WORD *)(a2 + 68) = v64;
                  goto LABEL_77;
                }
              }
              uint64_t v60 = 0;
              do
                *(unsigned char *)(*(void *)(a2 + 48) + v60++) = 0;
              while (v58 != v60);
              uint64_t v59 = *(void *)(a2 + 48);
              int v56 = *(uint64_t **)(a2 + 56);
              goto LABEL_70;
            }
          }
          uint64_t v50 = 0;
          do
            *(unsigned char *)(*(void *)(a2 + 48) + v50++) = 0;
          while (v48 != v50);
          uint64_t v49 = *(void *)(a2 + 48);
          int v46 = *(uint64_t **)(a2 + 56);
          goto LABEL_55;
        }
      }
      uint64_t v39 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v39++) = 0;
      while (v37 != v39);
      uint64_t v38 = *(void *)(a2 + 48);
      int v35 = *(uint64_t **)(a2 + 56);
      goto LABEL_40;
    }
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v25 = *(void *)(a2 + 48);
    uint64_t v24 = *(uint64_t **)(a2 + 56);
    unint64_t v26 = ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v25 - (uint64_t)v24 < v26)
    {
      __int16 v80 = v12;
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      LOWORD(v12) = v80;
      *(void *)(a2 + 48) -= v26;
    }
    else
    {
      uint64_t v27 = v25 - v26;
      *(void *)(a2 + 48) = v25 - v26;
      if (!v26)
      {
LABEL_25:
        if ((unint64_t)(v27 - (void)v24) <= 3)
        {
          __int16 v76 = v12;
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          LOWORD(v12) = v76;
          uint64_t v27 = *(void *)(a2 + 48);
          uint64_t v24 = *(uint64_t **)(a2 + 56);
        }
        *(_DWORD *)(v27 - 4) = v22;
        uint64_t v29 = v27 - 4;
        *(void *)(a2 + 48) = v29;
        uint64_t v30 = *(void *)(a2 + 32);
        uint64_t v31 = *(void *)(a2 + 40);
        if ((unint64_t)(v29 - (void)v24) <= 7)
        {
          __int16 v85 = v12;
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          LOWORD(v12) = v85;
          uint64_t v24 = *(uint64_t **)(a2 + 56);
        }
        *uint64_t v24 = (v30 - v29 + v31) | 0x600000000;
        *(void *)(a2 + 56) += 8;
        ++*(_DWORD *)(a2 + 64);
        unsigned int v32 = *(unsigned __int16 *)(a2 + 68);
        if (v32 <= 6) {
          LOWORD(v32) = 6;
        }
        *(_WORD *)(a2 + 68) = v32;
        int v23 = *(unsigned __int8 *)(a2 + 80);
        goto LABEL_32;
      }
    }
    uint64_t v28 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v28++) = 0;
    while (v26 != v28);
    uint64_t v27 = *(void *)(a2 + 48);
    uint64_t v24 = *(uint64_t **)(a2 + 56);
    goto LABEL_25;
  }
}

uint64_t llvm::GPUMetadataEmitter::GetConstSamplerBindNumber(llvm::GPUMetadataEmitter *this, const llvm::GlobalVariable *a2)
{
  uint64_t Metadata = llvm::Value::getMetadata((uint64_t)this, "agx.bind", 8uLL);
  if (!Metadata) {
    goto LABEL_2;
  }
  double v7 = (void *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  uint64_t v8 = v7[1];
  if (*(unsigned char *)(*(void *)(*(void *)(*v7 + 128) + 24) + 8) == 17)
  {
    if (*(unsigned char *)v8 != 1 || (uint64_t v9 = *(void *)(v8 + 128), *(unsigned char *)(v9 + 16) != 16))
    {
      int v10 = (void *)(v8 - 8 * *(unsigned int *)(v8 + 8));
      uint64_t v11 = *(void *)(*v10 + 128);
      int v12 = (void *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u) {
        int v12 = (void *)*v12;
      }
      uint64_t v13 = (void *)*v12;
      uint64_t v14 = v10[1];
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 128);
  }
  int v15 = (void *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u) {
    int v15 = (void *)*v15;
  }
  uint64_t v13 = (void *)*v15;
  uint64_t v14 = v7[2];
LABEL_14:
  uint64_t v16 = *(void *)(v14 + 128);
  uint64_t v17 = (void *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u) {
    uint64_t v17 = (void *)*v17;
  }
  if (v13 == 114 || v13 == 18)
  {
    uint64_t v19 = (void *)*v17;
    uint64_t v5 = v19 & 0xFFFFFF00;
    uint64_t v4 = v19;
    uint64_t v3 = 0x100000000;
    return v4 | v3 | v5;
  }
LABEL_2:
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  return v4 | v3 | v5;
}

void *sub_1CC77EFF8(void *a1, unsigned int a2)
{
  if (a2 <= 8)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    uint64_t v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

void *sub_1CC77F07C(void *a1, size_t a2, int a3)
{
  uint64_t result = sub_1CC77F0D8(a1, a2);
  result[3] = 0;
  result[4] = 0;
  *((unsigned char *)result + 48) = 0;
  result[5] = 0;
  *((_DWORD *)result + 13) = a3;
  *((_DWORD *)result + 14) = 0;
  result[9] = 0;
  result[10] = 0;
  result[11] = result;
  result[8] = result + 9;
  result[13] = 0;
  result[14] = 0;
  result[15] = result;
  result[12] = result + 13;
  result[1] = *result;
  return result;
}

void *sub_1CC77F0D8(void *a1, size_t __sz)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v4 = (char *)operator new(__sz);
    *a1 = v4;
    uint64_t v5 = &v4[__sz];
    a1[2] = &v4[__sz];
    bzero(v4, __sz);
    a1[1] = v5;
  }
  return a1;
}

_OWORD *sub_1CC77F13C(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  int v6 = (void **)sub_1CC77F204(a1, &v15, a2);
  double v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    double v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    uint64_t v11 = v15;
    *(void *)double v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v11;
    *uint64_t v8 = v7;
    uint64_t v12 = **(void **)a1;
    uint64_t v13 = (uint64_t *)v7;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v13 = (uint64_t *)*v8;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
  }
  return v7;
}

void *sub_1CC77F204(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    int v6 = *((char *)a3 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v7 = (size_t)a3[1];
    }
    if (v6 >= 0) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    do
    {
      while (1)
      {
        uint64_t v9 = v4;
        uint64_t v12 = (const void *)v4[4];
        uint64_t v10 = v4 + 4;
        uint64_t v11 = v12;
        size_t v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = v10;
        }
        else {
          uint64_t v14 = v11;
        }
        size_t v15 = v10[1];
        if ((v13 & 0x80u) == 0) {
          size_t v16 = v13 & 0x7F;
        }
        else {
          size_t v16 = v10[1];
        }
        if (v16 >= v7) {
          size_t v17 = v7;
        }
        else {
          size_t v17 = v16;
        }
        int v18 = memcmp(v8, v14, v17);
        BOOL v19 = v7 < v16;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v4 = (void *)*v9;
        uint64_t v5 = v9;
        if (!*v9) {
          goto LABEL_31;
        }
      }
      if ((v13 & 0x80u) != 0) {
        size_t v13 = v15;
      }
      if (v7 >= v13) {
        size_t v20 = v13;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v14, v8, v20);
      BOOL v22 = v13 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      uint64_t v5 = v9 + 1;
      uint64_t v4 = (void *)v9[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v9 = (void *)(a1 + 8);
  }
LABEL_31:
  *a2 = v9;
  return v5;
}

uint64_t sub_1CC77F324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[16] = *MEMORY[0x1E4F143B8];
  v9[0] = v10;
  v9[1] = (void *)0x1000000000;
  v7[0] = v8;
  v7[1] = (void *)0x1000000000;
  uint64_t v4 = 0;
  v5[0] = v6;
  v5[1] = (void *)0x1000000000;
  sub_1CC77F400(a1, a2, a3, (uint64_t *)v9, (uint64_t)v7, (uint64_t)v5, (unsigned int *)&v4, 0);
  if (v5[0] != v6) {
    free(v5[0]);
  }
  if (v7[0] != v8) {
    free(v7[0]);
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v4;
}

void sub_1CC77F400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, unsigned int *a7, unint64_t a8)
{
  uint64_t v105 = 0;
  unint64_t v16 = HIDWORD(a8);
  char v17 = sub_1CC77FB88(a3, a2, &v105);
  uint64_t v18 = a3 + 8;
  int v19 = *(_DWORD *)a3;
  if (v17)
  {
    uint64_t v22 = (uint64_t)v105;
  }
  else
  {
    if (v19)
    {
      uint64_t v20 = 4;
      uint64_t v21 = a3 + 8;
    }
    else
    {
      uint64_t v21 = *(void *)(a3 + 8);
      uint64_t v20 = *(unsigned int *)(a3 + 16);
    }
    uint64_t v22 = v21 + 16 * v20;
  }
  if ((v19 & 1) == 0) {
    uint64_t v18 = *(void *)(a3 + 8);
  }
  unsigned int v23 = *(_DWORD *)(a3 + 16);
  if (*(_DWORD *)a3) {
    unsigned int v23 = 4;
  }
  if (v18 + 16 * v23 != v22)
  {
    unsigned int v24 = *(_DWORD *)(v22 + 8) + a8;
    unsigned int v25 = *(_DWORD *)(v22 + 12) + v16;
    LODWORD(v22) = *a7;
    LODWORD(v26) = a7[1];
    if (*a7 <= v24) {
      uint64_t v22 = v24;
    }
    else {
      uint64_t v22 = v22;
    }
    if (v26 <= v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = v26;
    }
    *(void *)a7 = v22 | (v26 << 32);
    if (*((_DWORD *)a4 + 2))
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      do
      {
        uint64_t v29 = (unsigned int *)(*(void *)a6 + v27);
        uint64_t v30 = (int *)(*(void *)a5 + v27);
        int v32 = *v30;
        int v31 = v30[1];
        LODWORD(v33) = v24 - v32;
        unsigned int v34 = v29[1];
        if (*v29 <= v33) {
          uint64_t v33 = v33;
        }
        else {
          uint64_t v33 = *v29;
        }
        LODWORD(v35) = v25 - v31;
        if (v34 <= v35) {
          uint64_t v35 = v35;
        }
        else {
          uint64_t v35 = v34;
        }
        *(void *)uint64_t v29 = v33 | (v35 << 32);
        ++v28;
        v27 += 8;
      }
      while (v28 < *((unsigned int *)a4 + 2));
    }
    return;
  }
  unsigned int v36 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), a2);
  uint64_t v103 = a1;
  uint64_t v104 = a2;
  unsigned int v37 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), a2);
  uint64_t v38 = v36 + a8;
  uint64_t v39 = v37 + v16;
  LODWORD(v40) = *a7;
  LODWORD(v41) = a7[1];
  if (*a7 <= v38) {
    uint64_t v40 = v38;
  }
  else {
    uint64_t v40 = v40;
  }
  if (v41 <= v39) {
    uint64_t v41 = v39;
  }
  else {
    uint64_t v41 = v41;
  }
  *(void *)a7 = v40 | (v41 << 32);
  if (*((_DWORD *)a4 + 2))
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    do
    {
      int v44 = (unsigned int *)(*(void *)a6 + v42);
      int v45 = (int *)(*(void *)a5 + v42);
      int v47 = *v45;
      int v46 = v45[1];
      LODWORD(v48) = v38 - v47;
      unsigned int v49 = v44[1];
      if (*v44 <= v48) {
        uint64_t v48 = v48;
      }
      else {
        uint64_t v48 = *v44;
      }
      LODWORD(v50) = v39 - v46;
      if (v49 <= v50) {
        uint64_t v50 = v50;
      }
      else {
        uint64_t v50 = v49;
      }
      *(void *)int v44 = v48 | (v50 << 32);
      ++v43;
      unint64_t v51 = *((unsigned int *)a4 + 2);
      v42 += 8;
    }
    while (v43 < v51);
  }
  else
  {
    LODWORD(v51) = 0;
  }
  if (v51 >= *((_DWORD *)a4 + 3)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*a4 + 8 * v51) = v104;
  ++*((_DWORD *)a4 + 2);
  unsigned int v52 = *(_DWORD *)(a5 + 8);
  if (v52 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a5 + 8 * v52) = a8;
  ++*(_DWORD *)(a5 + 8);
  unint64_t v53 = v36 | ((unint64_t)v37 << 32);
  unsigned int v54 = *(_DWORD *)(a6 + 8);
  if (v54 >= *(_DWORD *)(a6 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a6 + 8 * v54) = v53;
  unsigned int v55 = *(_DWORD *)(a6 + 8) + 1;
  *(_DWORD *)(a6 + 8) = v55;
  uint64_t v105 = v109;
  int v106 = v109;
  uint64_t v107 = 16;
  int v108 = 0;
  uint64_t v56 = v104;
  uint64_t v57 = *(void *)(v104 + 80);
  if (v57 != v104 + 72)
  {
    uint64_t v102 = v38 | (v39 << 32);
    while (1)
    {
      uint64_t v58 = v57 - 24;
      if (!v57) {
        uint64_t v58 = 0;
      }
      uint64_t v59 = v58 + 40;
      for (uint64_t i = *(void *)(v58 + 48); i != v59; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v61 = i - 24;
        if (i)
        {
          unsigned int v62 = *(unsigned __int8 *)(i - 8);
          if (v62 >= 0x1C)
          {
            if (v62 == 33)
            {
              unint64_t v63 = v61 & 0xFFFFFFFFFFFFFFFBLL;
              if ((v63 & 4) == 0) {
                continue;
              }
            }
            else
            {
              if (v62 != 84) {
                continue;
              }
              unint64_t v63 = v61 | 4;
              if ((v63 & 4) == 0) {
                continue;
              }
            }
            uint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFFFF8) - 32);
            if (v64 && *(unsigned char *)(v64 + 16) == 0)
            {
              int v66 = *(_DWORD *)(v64 + 32);
              if ((v66 & 0x2000) == 0 && ((v66 & 0x800000) != 0 || *(void *)(v64 + 72) != v64 + 72))
              {
                int v68 = v105;
                int v67 = v106;
                if (v106 == v105)
                {
                  unsigned int v69 = HIDWORD(v107);
                  unint64_t v70 = &v106[8 * HIDWORD(v107)];
                  if (HIDWORD(v107))
                  {
                    uint64_t v71 = 0;
                    while (*(void *)&v106[v71] != v64)
                    {
                      v71 += 8;
                      if (8 * HIDWORD(v107) == v71) {
                        goto LABEL_86;
                      }
                    }
                    unint64_t v70 = &v106[v71];
                  }
LABEL_86:
                  int v68 = v106;
                }
                else
                {
                  int v72 = v107 - 1;
                  unsigned int v73 = (v107 - 1) & ((v64 >> 4) ^ (v64 >> 9));
                  unint64_t v70 = &v106[8 * v73];
                  uint64_t v74 = *(void *)v70;
                  if (*(void *)v70 == -1)
                  {
                    __int16 v75 = 0;
LABEL_115:
                    if (v75) {
                      unint64_t v70 = v75;
                    }
                    unsigned int v69 = HIDWORD(v107);
                    if (*(void *)v70 != v64) {
                      unint64_t v70 = &v106[8 * v107];
                    }
                  }
                  else
                  {
                    __int16 v75 = 0;
                    int v76 = 1;
                    while (v74 != v64)
                    {
                      if (v75) {
                        BOOL v77 = 0;
                      }
                      else {
                        BOOL v77 = v74 == -2;
                      }
                      if (v77) {
                        __int16 v75 = v70;
                      }
                      unsigned int v78 = v73 + v76++;
                      unsigned int v73 = v78 & v72;
                      unint64_t v70 = &v106[8 * (v78 & v72)];
                      uint64_t v74 = *(void *)v70;
                      if (*(void *)v70 == -1) {
                        goto LABEL_115;
                      }
                    }
                    unsigned int v69 = HIDWORD(v107);
                  }
                }
                unsigned int v79 = v107;
                int v80 = v106 == v68 ? v69 : v107;
                if (v70 == &v106[8 * v80])
                {
                  if (v106 == v68)
                  {
                    if (v69)
                    {
                      __int16 v81 = 0;
                      uint64_t v82 = 8 * v69;
                      __int16 v83 = v106;
                      while (*v83 != v64)
                      {
                        if (*v83 == -2) {
                          __int16 v81 = v83;
                        }
                        ++v83;
                        v82 -= 8;
                        if (!v82)
                        {
                          if (!v81) {
                            goto LABEL_99;
                          }
                          *__int16 v81 = v64;
                          --v108;
                          goto LABEL_128;
                        }
                      }
                      goto LABEL_128;
                    }
LABEL_99:
                    if (v107 > v69)
                    {
                      HIDWORD(v107) = v69 + 1;
                      *(void *)&v106[8 * v69] = v64;
LABEL_128:
                      uint64_t v93 = *a4;
                      uint64_t v94 = *((unsigned int *)a4 + 2);
                      if (v94)
                      {
                        uint64_t v95 = 8 * v94;
                        int v96 = (void *)*a4;
                        while (*v96 != v64)
                        {
                          ++v96;
                          v95 -= 8;
                          if (!v95)
                          {
                            int v96 = (void *)(v93 + 8 * v94);
                            break;
                          }
                        }
                      }
                      else
                      {
                        int v96 = (void *)*a4;
                      }
                      if (v94 == ((uint64_t)v96 - v93) >> 3) {
                        sub_1CC77F400(v103, v64, a3, a4, a5, a6, a7, v102);
                      }
                      continue;
                    }
                  }
                  if (3 * (int)v107 <= 4 * (v69 - v108))
                  {
                    if (v107 >= 0x40) {
                      unsigned int v79 = 2 * v107;
                    }
                    else {
                      unsigned int v79 = 128;
                    }
                  }
                  else if (v107 - v69 >= v107 >> 3)
                  {
                    goto LABEL_103;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v105, v79);
                  unsigned int v79 = v107;
                  int v67 = v106;
LABEL_103:
                  unsigned int v84 = v79 - 1;
                  unsigned int v85 = (v79 - 1) & ((v64 >> 4) ^ (v64 >> 9));
                  __int16 v86 = &v67[8 * v85];
                  uint64_t v87 = *(void *)v86;
                  if (*(void *)v86 == -1)
                  {
                    __int16 v88 = 0;
LABEL_121:
                    if (v88) {
                      int v92 = v88;
                    }
                    else {
                      int v92 = v86;
                    }
                    if (*(void *)v92 != v64)
                    {
                      if (*(void *)v92 == -2) {
                        --v108;
                      }
                      else {
                        ++HIDWORD(v107);
                      }
                      *(void *)int v92 = v64;
                    }
                  }
                  else
                  {
                    __int16 v88 = 0;
                    int v89 = 1;
                    while (v87 != v64)
                    {
                      if (v88) {
                        BOOL v90 = 0;
                      }
                      else {
                        BOOL v90 = v87 == -2;
                      }
                      if (v90) {
                        __int16 v88 = v86;
                      }
                      unsigned int v91 = v85 + v89++;
                      unsigned int v85 = v91 & v84;
                      __int16 v86 = &v67[8 * (v91 & v84)];
                      uint64_t v87 = *(void *)v86;
                      if (*(void *)v86 == -1) {
                        goto LABEL_121;
                      }
                    }
                  }
                  goto LABEL_128;
                }
              }
            }
          }
        }
      }
      uint64_t v57 = *(void *)(v57 + 8);
      if (v57 == v104 + 72)
      {
        unsigned int v55 = *(_DWORD *)(a6 + 8);
        uint64_t v56 = v104;
        break;
      }
    }
  }
  uint64_t v97 = *(void *)a6 + 8 * v55;
  v110[0] = 0;
  char v98 = sub_1CC77FB88(a3, v56, v110);
  int v99 = (uint64_t *)v110[0];
  if ((v98 & 1) == 0)
  {
    int v100 = *(_DWORD *)a3 >> 1;
    if (*(_DWORD *)a3) {
      unsigned int v101 = 4;
    }
    else {
      unsigned int v101 = *(_DWORD *)(a3 + 16);
    }
    if (4 * v100 + 4 >= 3 * v101)
    {
      v101 *= 2;
    }
    else if (v101 + ~v100 - *(_DWORD *)(a3 + 4) > v101 >> 3)
    {
LABEL_150:
      *(_DWORD *)a3 += 2;
      if (*v99 != -4096) {
        --*(_DWORD *)(a3 + 4);
      }
      *int v99 = v56;
      v99[1] = 0;
      goto LABEL_153;
    }
    sub_1CC77FC2C(a3, v101);
    v110[0] = 0;
    sub_1CC77FB88(a3, v56, v110);
    int v99 = (uint64_t *)v110[0];
    goto LABEL_150;
  }
LABEL_153:
  v99[1] = *(void *)(v97 - 8);
  --*((_DWORD *)a4 + 2);
  --*(_DWORD *)(a6 + 8);
  --*(_DWORD *)(a5 + 8);
  if (v106 != v105) {
    free(v106);
  }
}

uint64_t sub_1CC77FB88(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      size_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  size_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      size_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      size_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC77FC2C(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC77FDB8(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  size_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC77FDB8(a1, v14, v7);
}

uint64_t sub_1CC77FDB8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC77FB88((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *uint64_t v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC77FE7C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 128))(&v13, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 136))(&v12, a2, a1);
  uint64_t v5 = v12;
  uint64_t v4 = v13;
  if (v13)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v13, v13);
    uint64_t v6 = v13;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 16))(&v13, v5);
    uint64_t v7 = v13;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0xFFFFFFFFLL;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7) & 1) == 0)
  {
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    unsigned int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 400))(a2, *v9);
    if (v8 >= v10) {
      uint64_t v8 = v10;
    }
    else {
      uint64_t v8 = v8;
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return v8;
}

uint64_t *sub_1CC780134(uint64_t *result, uint64_t a2, int a3)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = result;
  if ((unint64_t)result[9] <= 3) {
    result[9] = 4;
  }
  uint64_t v5 = result[4];
  uint64_t v6 = result[5];
  uint64_t v7 = result[6];
  unint64_t v8 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  if (v7 - result[7] < v8)
  {
    unint64_t v21 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
    int v18 = a3;
    uint64_t result = (uint64_t *)sub_1CBF2C904(result, v21);
    unint64_t v8 = v21;
    a3 = v18;
    v4[6] -= v21;
  }
  else
  {
    uint64_t v9 = v7 - v8;
    result[6] = v9;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t v19 = 0;
  do
    *(unsigned char *)(v4[6] + v19++) = 0;
  while (v8 != v19);
  uint64_t v6 = v4[5];
  uint64_t v9 = v4[6];
  uint64_t v5 = v4[4];
LABEL_6:
  int v10 = v6 - v9 + v5 - a3;
  int v11 = v10 + 4;
  if (v10 == -4 && !*((unsigned char *)v4 + 80)) {
    return result;
  }
  if ((unint64_t)v4[9] <= 3) {
    v4[9] = 4;
  }
  unint64_t v12 = ((_BYTE)v9 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  uint64_t v13 = (unint64_t *)v4[7];
  if (v9 - (uint64_t)v13 < v12)
  {
    unint64_t v22 = v12;
    uint64_t result = (uint64_t *)sub_1CBF2C904(v4, v12);
    unint64_t v12 = v22;
    v4[6] -= v22;
LABEL_24:
    uint64_t v20 = 0;
    do
      *(unsigned char *)(v4[6] + v20++) = 0;
    while (v12 != v20);
    unint64_t v14 = v4[6];
    uint64_t v13 = (unint64_t *)v4[7];
    goto LABEL_11;
  }
  unint64_t v14 = v9 - v12;
  v4[6] = v9 - v12;
  if (v12) {
    goto LABEL_24;
  }
LABEL_11:
  if (v14 - (unint64_t)v13 <= 3)
  {
    uint64_t result = (uint64_t *)sub_1CBF2C904(v4, 4uLL);
    unint64_t v14 = v4[6];
    uint64_t v13 = (unint64_t *)v4[7];
  }
  *(_DWORD *)(v14 - 4) = v11;
  uint64_t v15 = v14 - 4;
  v4[6] = v15;
  uint64_t v16 = v4[4] - v15 + v4[5];
  if ((unint64_t)(v15 - (void)v13) <= 7)
  {
    uint64_t result = (uint64_t *)sub_1CBF2C904(v4, 8uLL);
    uint64_t v13 = (unint64_t *)v4[7];
  }
  *uint64_t v13 = v16 | (unint64_t)(a2 << 32);
  v4[7] += 8;
  ++*((_DWORD *)v4 + 16);
  unsigned int v17 = *((unsigned __int16 *)v4 + 34);
  if (v17 <= a2) {
    LOWORD(v17) = a2;
  }
  *((_WORD *)v4 + 34) = v17;
  return result;
}

uint64_t sub_1CC780328(uint64_t a1, unint64_t a2)
{
  if ((a2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)a1 + a2);
  if ((int)v4 < 1) {
    return 0;
  }
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0;
}

BOOL sub_1CC780378(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((unsigned char *)a1 + 40)) {
    return 0;
  }
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a2;
  unsigned int v7 = *((_DWORD *)a1 + 5);
  unsigned int v8 = *((_DWORD *)a1 + 4) + 1;
  *((_DWORD *)a1 + 4) = v8;
  unsigned int v9 = *((_DWORD *)a1 + 6) + 1;
  *((_DWORD *)a1 + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)a1 + 7)) {
    return 0;
  }
  unint64_t v10 = v3 - v6;
  if (v10)
  {
    uint64_t v14 = 0;
    if (*((unsigned char *)a1 + 40) || v4 - 2 < v10) {
      return v14;
    }
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  unint64_t v11 = *(unsigned __int16 *)(v2 + v10);
  if ((v11 & 1) != 0 && *((unsigned char *)a1 + 40)) {
    return 0;
  }
  BOOL v5 = v4 >= v11;
  unint64_t v12 = v4 - v11;
  return v12 != 0 && v5 && v12 >= v10;
}

uint64_t *sub_1CC780434(uint64_t *result, int a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v2 = result;
  if ((unint64_t)result[9] <= 3) {
    result[9] = 4;
  }
  uint64_t v3 = result[4];
  uint64_t v4 = result[5];
  uint64_t v5 = result[6];
  char v6 = v5 - (v3 + v4);
  unint64_t v7 = v6 & 3;
  if (v5 - result[7] < v7)
  {
    int v19 = a2;
    uint64_t result = (uint64_t *)sub_1CBF2C904(result, v6 & 3);
    a2 = v19;
    v2[6] -= v7;
  }
  else
  {
    uint64_t v8 = v5 - v7;
    result[6] = v8;
    if ((v6 & 3) == 0) {
      goto LABEL_6;
    }
  }
  uint64_t v17 = 0;
  do
    *(unsigned char *)(v2[6] + v17++) = 0;
  while (v7 != v17);
  uint64_t v4 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v3 = v2[4];
LABEL_6:
  int v9 = v4 - v8 + v3 - a2;
  int v10 = v9 + 4;
  if (v9 == -4 && !*((unsigned char *)v2 + 80)) {
    return result;
  }
  if ((unint64_t)v2[9] <= 3) {
    v2[9] = 4;
  }
  unint64_t v11 = ((_BYTE)v8 - ((_BYTE)v3 + (_BYTE)v4)) & 3;
  unint64_t v12 = (uint64_t *)v2[7];
  if (v8 - (uint64_t)v12 < v11)
  {
    unint64_t v20 = v11;
    uint64_t result = (uint64_t *)sub_1CBF2C904(v2, v11);
    unint64_t v11 = v20;
    v2[6] -= v20;
LABEL_24:
    uint64_t v18 = 0;
    do
      *(unsigned char *)(v2[6] + v18++) = 0;
    while (v11 != v18);
    unint64_t v13 = v2[6];
    unint64_t v12 = (uint64_t *)v2[7];
    goto LABEL_11;
  }
  unint64_t v13 = v8 - v11;
  v2[6] = v8 - v11;
  if (v11) {
    goto LABEL_24;
  }
LABEL_11:
  if (v13 - (unint64_t)v12 <= 3)
  {
    uint64_t result = (uint64_t *)sub_1CBF2C904(v2, 4uLL);
    unint64_t v13 = v2[6];
    unint64_t v12 = (uint64_t *)v2[7];
  }
  *(_DWORD *)(v13 - 4) = v10;
  uint64_t v14 = v13 - 4;
  v2[6] = v14;
  uint64_t v15 = v2[4] - v14 + v2[5];
  if ((unint64_t)(v14 - (void)v12) <= 7)
  {
    uint64_t result = (uint64_t *)sub_1CBF2C904(v2, 8uLL);
    unint64_t v12 = (uint64_t *)v2[7];
  }
  *unint64_t v12 = v15 | 0x400000000;
  v2[7] += 8;
  ++*((_DWORD *)v2 + 16);
  unsigned int v16 = *((unsigned __int16 *)v2 + 34);
  if (v16 <= 4) {
    LOWORD(v16) = 4;
  }
  *((_WORD *)v2 + 34) = v16;
  return result;
}

uint64_t *sub_1CC780618(uint64_t *result, int a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v2 = result;
  if ((unint64_t)result[9] <= 3) {
    result[9] = 4;
  }
  uint64_t v3 = result[4];
  uint64_t v4 = result[5];
  uint64_t v5 = result[6];
  char v6 = v5 - (v3 + v4);
  unint64_t v7 = v6 & 3;
  if (v5 - result[7] < v7)
  {
    int v19 = a2;
    uint64_t result = (uint64_t *)sub_1CBF2C904(result, v6 & 3);
    a2 = v19;
    v2[6] -= v7;
  }
  else
  {
    uint64_t v8 = v5 - v7;
    result[6] = v8;
    if ((v6 & 3) == 0) {
      goto LABEL_6;
    }
  }
  uint64_t v17 = 0;
  do
    *(unsigned char *)(v2[6] + v17++) = 0;
  while (v7 != v17);
  uint64_t v4 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v3 = v2[4];
LABEL_6:
  int v9 = v4 - v8 + v3 - a2;
  int v10 = v9 + 4;
  if (v9 == -4 && !*((unsigned char *)v2 + 80)) {
    return result;
  }
  if ((unint64_t)v2[9] <= 3) {
    v2[9] = 4;
  }
  unint64_t v11 = ((_BYTE)v8 - ((_BYTE)v3 + (_BYTE)v4)) & 3;
  unint64_t v12 = (uint64_t *)v2[7];
  if (v8 - (uint64_t)v12 < v11)
  {
    unint64_t v20 = v11;
    uint64_t result = (uint64_t *)sub_1CBF2C904(v2, v11);
    unint64_t v11 = v20;
    v2[6] -= v20;
LABEL_24:
    uint64_t v18 = 0;
    do
      *(unsigned char *)(v2[6] + v18++) = 0;
    while (v11 != v18);
    unint64_t v13 = v2[6];
    unint64_t v12 = (uint64_t *)v2[7];
    goto LABEL_11;
  }
  unint64_t v13 = v8 - v11;
  v2[6] = v8 - v11;
  if (v11) {
    goto LABEL_24;
  }
LABEL_11:
  if (v13 - (unint64_t)v12 <= 3)
  {
    uint64_t result = (uint64_t *)sub_1CBF2C904(v2, 4uLL);
    unint64_t v13 = v2[6];
    unint64_t v12 = (uint64_t *)v2[7];
  }
  *(_DWORD *)(v13 - 4) = v10;
  uint64_t v14 = v13 - 4;
  v2[6] = v14;
  uint64_t v15 = v2[4] - v14 + v2[5];
  if ((unint64_t)(v14 - (void)v12) <= 7)
  {
    uint64_t result = (uint64_t *)sub_1CBF2C904(v2, 8uLL);
    unint64_t v12 = (uint64_t *)v2[7];
  }
  *unint64_t v12 = v15 | 0x800000000;
  v2[7] += 8;
  ++*((_DWORD *)v2 + 16);
  unsigned int v16 = *((unsigned __int16 *)v2 + 34);
  if (v16 <= 8) {
    LOWORD(v16) = 8;
  }
  *((_WORD *)v2 + 34) = v16;
  return result;
}

uint64_t sub_1CC7807FC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 72) <= 7uLL) {
    *(void *)(a1 + 72) = 8;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
  if (v4 - v5 < v6)
  {
    unint64_t v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
    sub_1CBF2C904((uint64_t *)a1, v6);
    unint64_t v6 = v11;
    *(void *)(a1 + 48) -= v11;
  }
  else
  {
    uint64_t v7 = v4 - v6;
    *(void *)(a1 + 48) = v7;
    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 7)
  {
    sub_1CBF2C904((uint64_t *)a1, 8uLL);
    uint64_t v7 = *(void *)(a1 + 48);
  }
  *(void *)(v7 - 8) = a2;
  uint64_t v8 = v7 - 8;
  *(void *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1CC7808E8(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  *(void *)(result + 56) = v5;
  unint64_t v6 = *(void *)(result + 72);
  unint64_t v7 = (-4 - (*(_DWORD *)(result + 32) + v5 - v4)) & (v6 - 1);
  if (v4 - v5 < v7)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)result, v7);
    *(void *)(v3 + 48) -= v7;
  }
  else
  {
    *(void *)(result + 48) = v4 - v7;
    if (!v7) {
      goto LABEL_3;
    }
  }
  uint64_t v17 = 0;
  do
    *(unsigned char *)(*(void *)(v3 + 48) + v17++) = 0;
  while (v7 != v17);
  unint64_t v6 = *(void *)(v3 + 72);
LABEL_3:
  if (v6 <= 3) {
    *(void *)(v3 + 72) = 4;
  }
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  unint64_t v11 = ((int)v10 - ((int)v8 + (int)v9)) & 3;
  if (v10 - *(void *)(v3 + 56) < v11)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)v3, ((int)v10 - ((int)v8 + (int)v9)) & 3);
    *(void *)(v3 + 48) -= v11;
  }
  else
  {
    uint64_t v12 = v10 - v11;
    *(void *)(v3 + 48) = v12;
    if (!v11)
    {
      int v13 = v8 + v9 - v12;
      goto LABEL_8;
    }
  }
  uint64_t v18 = 0;
  do
    *(unsigned char *)(*(void *)(v3 + 48) + v18++) = 0;
  while (v11 != v18);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v12 = *(void *)(v3 + 48);
  uint64_t v8 = *(void *)(v3 + 32);
  int v13 = v8 - v12 + v9;
  if (*(void *)(v3 + 72) <= 3uLL) {
    *(void *)(v3 + 72) = 4;
  }
LABEL_8:
  unint64_t v14 = ((_BYTE)v12 - ((_BYTE)v8 + (_BYTE)v9)) & 3;
  uint64_t v15 = *(void *)(v3 + 56);
  if (v12 - v15 < v14)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)v3, v14);
    *(void *)(v3 + 48) -= v14;
  }
  else
  {
    uint64_t v16 = v12 - v14;
    *(void *)(v3 + 48) = v12 - v14;
    if (!v14) {
      goto LABEL_10;
    }
  }
  uint64_t v19 = 0;
  do
    *(unsigned char *)(*(void *)(v3 + 48) + v19++) = 0;
  while (v14 != v19);
  uint64_t v16 = *(void *)(v3 + 48);
  uint64_t v15 = *(void *)(v3 + 56);
LABEL_10:
  if ((unint64_t)(v16 - v15) <= 3)
  {
    uint64_t result = sub_1CBF2C904((uint64_t *)v3, 4uLL);
    uint64_t v16 = *(void *)(v3 + 48);
  }
  *(_DWORD *)(v16 - 4) = v13 - a2 + 4;
  *(void *)(v3 + 48) = v16 - 4;
  *(unsigned char *)(v3 + 71) = 1;
  return result;
}

uint64_t sub_1CC780AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v6 - *(void *)(a1 + 56) < v7)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v7;
  }
  else
  {
    *(void *)(a1 + 48) = v6 - v7;
    if (!v7) {
      goto LABEL_5;
    }
  }
  uint64_t v29 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v29++) = 0;
  while (v7 != v29);
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 48);
  unint64_t v9 = ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v8 - *(void *)(a1 + 56) < v9)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v9;
  }
  else
  {
    *(void *)(a1 + 48) = v8 - v9;
    if (!v9) {
      goto LABEL_7;
    }
  }
  uint64_t v30 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v30++) = 0;
  while (v9 != v30);
LABEL_7:
  if (a3)
  {
    uint64_t v16 = a3;
    do
    {
      --v16;
      int v17 = *(_DWORD *)(a2 + 4 * v16);
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      unint64_t v21 = ((int)v20 - ((int)v18 + (int)v19)) & 3;
      if (v20 - *(void *)(a1 + 56) < v21)
      {
        sub_1CBF2C904((uint64_t *)a1, ((int)v20 - ((int)v18 + (int)v19)) & 3);
        *(void *)(a1 + 48) -= v21;
      }
      else
      {
        uint64_t v22 = v20 - v21;
        *(void *)(a1 + 48) = v22;
        if (!v21)
        {
          int v23 = v18 + v19 - v22;
          goto LABEL_21;
        }
      }
      uint64_t v27 = 0;
      do
        *(unsigned char *)(*(void *)(a1 + 48) + v27++) = 0;
      while (v21 != v27);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 32);
      int v23 = v18 - v22 + v19;
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
LABEL_21:
      unint64_t v24 = ((_BYTE)v22 - ((_BYTE)v18 + (_BYTE)v19)) & 3;
      uint64_t v25 = *(void *)(a1 + 56);
      if (v22 - v25 < v24)
      {
        int v33 = v23;
        unint64_t v32 = v24;
        sub_1CBF2C904((uint64_t *)a1, v24);
        unint64_t v24 = v32;
        int v23 = v33;
        *(void *)(a1 + 48) -= v24;
LABEL_31:
        uint64_t v28 = 0;
        do
          *(unsigned char *)(*(void *)(a1 + 48) + v28++) = 0;
        while (v24 != v28);
        uint64_t v26 = *(void *)(a1 + 48);
        uint64_t v25 = *(void *)(a1 + 56);
        goto LABEL_23;
      }
      uint64_t v26 = v22 - v24;
      *(void *)(a1 + 48) = v22 - v24;
      if (v24) {
        goto LABEL_31;
      }
LABEL_23:
      if ((unint64_t)(v26 - v25) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a1, 4uLL);
        uint64_t v26 = *(void *)(a1 + 48);
      }
      *(_DWORD *)(v26 - 4) = v23 - v17 + 4;
      *(void *)(a1 + 48) = v26 - 4;
    }
    while (v16);
  }
  *(unsigned char *)(a1 + 70) = 0;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v10 - v11 < v12)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v12;
  }
  else
  {
    uint64_t v13 = v10 - v12;
    *(void *)(a1 + 48) = v13;
    if (!v12) {
      goto LABEL_12;
    }
  }
  uint64_t v31 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v31++) = 0;
  while (v12 != v31);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
LABEL_12:
  if ((unint64_t)(v13 - v11) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a1, 4uLL);
    uint64_t v13 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v13 - 4) = a3;
  uint64_t v14 = v13 - 4;
  *(void *)(a1 + 48) = v14;
  return (*(_DWORD *)(a1 + 32) - v14 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1CC780E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v6 - *(void *)(a1 + 56) < v7)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v7;
  }
  else
  {
    *(void *)(a1 + 48) = v6 - v7;
    if (!v7) {
      goto LABEL_5;
    }
  }
  uint64_t v29 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v29++) = 0;
  while (v7 != v29);
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 48);
  unint64_t v9 = ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v8 - *(void *)(a1 + 56) < v9)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v9;
  }
  else
  {
    *(void *)(a1 + 48) = v8 - v9;
    if (!v9) {
      goto LABEL_7;
    }
  }
  uint64_t v30 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v30++) = 0;
  while (v9 != v30);
LABEL_7:
  if (a3)
  {
    uint64_t v16 = a3;
    do
    {
      --v16;
      int v17 = *(_DWORD *)(a2 + 4 * v16);
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      unint64_t v21 = ((int)v20 - ((int)v18 + (int)v19)) & 3;
      if (v20 - *(void *)(a1 + 56) < v21)
      {
        sub_1CBF2C904((uint64_t *)a1, ((int)v20 - ((int)v18 + (int)v19)) & 3);
        *(void *)(a1 + 48) -= v21;
      }
      else
      {
        uint64_t v22 = v20 - v21;
        *(void *)(a1 + 48) = v22;
        if (!v21)
        {
          int v23 = v18 + v19 - v22;
          goto LABEL_21;
        }
      }
      uint64_t v27 = 0;
      do
        *(unsigned char *)(*(void *)(a1 + 48) + v27++) = 0;
      while (v21 != v27);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 32);
      int v23 = v18 - v22 + v19;
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
LABEL_21:
      unint64_t v24 = ((_BYTE)v22 - ((_BYTE)v18 + (_BYTE)v19)) & 3;
      uint64_t v25 = *(void *)(a1 + 56);
      if (v22 - v25 < v24)
      {
        int v33 = v23;
        unint64_t v32 = v24;
        sub_1CBF2C904((uint64_t *)a1, v24);
        unint64_t v24 = v32;
        int v23 = v33;
        *(void *)(a1 + 48) -= v24;
LABEL_31:
        uint64_t v28 = 0;
        do
          *(unsigned char *)(*(void *)(a1 + 48) + v28++) = 0;
        while (v24 != v28);
        uint64_t v26 = *(void *)(a1 + 48);
        uint64_t v25 = *(void *)(a1 + 56);
        goto LABEL_23;
      }
      uint64_t v26 = v22 - v24;
      *(void *)(a1 + 48) = v22 - v24;
      if (v24) {
        goto LABEL_31;
      }
LABEL_23:
      if ((unint64_t)(v26 - v25) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a1, 4uLL);
        uint64_t v26 = *(void *)(a1 + 48);
      }
      *(_DWORD *)(v26 - 4) = v23 - v17 + 4;
      *(void *)(a1 + 48) = v26 - 4;
    }
    while (v16);
  }
  *(unsigned char *)(a1 + 70) = 0;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v10 - v11 < v12)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v12;
  }
  else
  {
    uint64_t v13 = v10 - v12;
    *(void *)(a1 + 48) = v13;
    if (!v12) {
      goto LABEL_12;
    }
  }
  uint64_t v31 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v31++) = 0;
  while (v12 != v31);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
LABEL_12:
  if ((unint64_t)(v13 - v11) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a1, 4uLL);
    uint64_t v13 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v13 - 4) = a3;
  uint64_t v14 = v13 - 4;
  *(void *)(a1 + 48) = v14;
  return (*(_DWORD *)(a1 + 32) - v14 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1CC781180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v6 - *(void *)(a1 + 56) < v7)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v7;
  }
  else
  {
    *(void *)(a1 + 48) = v6 - v7;
    if (!v7) {
      goto LABEL_5;
    }
  }
  uint64_t v29 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v29++) = 0;
  while (v7 != v29);
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 48);
  unint64_t v9 = ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v8 - *(void *)(a1 + 56) < v9)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v9;
  }
  else
  {
    *(void *)(a1 + 48) = v8 - v9;
    if (!v9) {
      goto LABEL_7;
    }
  }
  uint64_t v30 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v30++) = 0;
  while (v9 != v30);
LABEL_7:
  if (a3)
  {
    uint64_t v10 = a3;
    do
    {
      --v10;
      int v11 = *(_DWORD *)(a2 + 4 * v10);
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      unint64_t v15 = ((int)v14 - ((int)v12 + (int)v13)) & 3;
      if (v14 - *(void *)(a1 + 56) < v15)
      {
        sub_1CBF2C904((uint64_t *)a1, ((int)v14 - ((int)v12 + (int)v13)) & 3);
        *(void *)(a1 + 48) -= v15;
      }
      else
      {
        uint64_t v16 = v14 - v15;
        *(void *)(a1 + 48) = v16;
        if (!v15)
        {
          int v17 = v12 + v13 - v16;
          goto LABEL_14;
        }
      }
      uint64_t v21 = 0;
      do
        *(unsigned char *)(*(void *)(a1 + 48) + v21++) = 0;
      while (v15 != v21);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 32);
      int v17 = v12 - v16 + v13;
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
LABEL_14:
      unint64_t v18 = ((_BYTE)v16 - ((_BYTE)v12 + (_BYTE)v13)) & 3;
      uint64_t v19 = *(void *)(a1 + 56);
      if (v16 - v19 < v18)
      {
        int v33 = v17;
        unint64_t v31 = v18;
        sub_1CBF2C904((uint64_t *)a1, v18);
        unint64_t v18 = v31;
        int v17 = v33;
        *(void *)(a1 + 48) -= v18;
LABEL_24:
        uint64_t v22 = 0;
        do
          *(unsigned char *)(*(void *)(a1 + 48) + v22++) = 0;
        while (v18 != v22);
        uint64_t v20 = *(void *)(a1 + 48);
        uint64_t v19 = *(void *)(a1 + 56);
        goto LABEL_16;
      }
      uint64_t v20 = v16 - v18;
      *(void *)(a1 + 48) = v16 - v18;
      if (v18) {
        goto LABEL_24;
      }
LABEL_16:
      if ((unint64_t)(v20 - v19) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a1, 4uLL);
        uint64_t v20 = *(void *)(a1 + 48);
      }
      *(_DWORD *)(v20 - 4) = v17 - v11 + 4;
      *(void *)(a1 + 48) = v20 - 4;
    }
    while (v10);
  }
  *(unsigned char *)(a1 + 70) = 0;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
  unint64_t v25 = ((_BYTE)v23 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v23 - v24 < v25)
  {
    sub_1CBF2C904((uint64_t *)a1, ((_BYTE)v23 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v25;
  }
  else
  {
    uint64_t v26 = v23 - v25;
    *(void *)(a1 + 48) = v26;
    if (!v25) {
      goto LABEL_31;
    }
  }
  uint64_t v32 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v32++) = 0;
  while (v25 != v32);
  uint64_t v26 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
LABEL_31:
  if ((unint64_t)(v26 - v24) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a1, 4uLL);
    uint64_t v26 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v26 - 4) = a3;
  uint64_t v27 = v26 - 4;
  *(void *)(a1 + 48) = v27;
  return (*(_DWORD *)(a1 + 32) - v27 + *(_DWORD *)(a1 + 40));
}

void sub_1CC7814E4()
{
}

__n128 sub_1CC7814F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1F261D960;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CC78155C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261D960;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC7815A4(uint64_t a1, int *a2, int *a3, unsigned int *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  int v6 = *a3;
  unsigned int v7 = *a4;
  uint64_t v8 = (char *)v28;
  __src = v28;
  uint64_t v27 = 0x400000001;
  v28[0] = v5;
  v28[1] = v6;
  int v30 = 0;
  uint64_t v29 = v7;
  unint64_t v9 = *(_DWORD **)(a1 + 16);
  HIDWORD(v29) = *v9 + **(_DWORD **)(a1 + 8);
  int v30 = 0;
  uint64_t v10 = *(_DWORD **)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  *v9 += *v10 * v7;
  if (*(_DWORD *)(v11 + 224) && v28[0] == 1)
  {
    LODWORD(v29) = 0;
    int v12 = *v10 * v7;
    unsigned int v13 = v27;
    if (v12)
    {
      unsigned int v14 = HIDWORD(v29);
      int v15 = v12 + HIDWORD(v29);
      do
      {
        if ((*(void *)(*(void *)(v11 + 160) + 8 * (v14 >> 6)) >> v14)) {
          int v16 = 9;
        }
        else {
          int v16 = 1;
        }
        int v17 = (char *)__src + 20 * v13;
        int v18 = *((_DWORD *)v17 - 3);
        if (v16 == *((_DWORD *)v17 - 5))
        {
          *((_DWORD *)v17 - 3) = v18 + 1;
        }
        else if (v18)
        {
          int v19 = *((_DWORD *)v17 - 1);
          long long v24 = *(_OWORD *)(v17 - 20);
          int v25 = v19;
          LODWORD(v24) = v16;
          DWORD2(v24) = 1;
          int v20 = *((_DWORD *)v17 - 3);
          HIDWORD(v24) = *((_DWORD *)v17 - 2) + *v10 * v20;
          int v25 = *((_DWORD *)v17 - 1) + *v10 * v20;
          unint64_t v21 = sub_1CD63AE40((uint64_t)&__src, (unint64_t)&v24);
          uint64_t v22 = (char *)__src + 20 * v27;
          long long v23 = *(_OWORD *)v21;
          *((_DWORD *)v22 + 4) = *(_DWORD *)(v21 + 16);
          *(_OWORD *)uint64_t v22 = v23;
          unsigned int v13 = v27 + 1;
          LODWORD(v27) = v27 + 1;
          uint64_t v10 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          *((_DWORD *)v17 - 5) = v16;
          *((_DWORD *)v17 - 3) = 1;
        }
        v14 += *v10;
      }
      while (v14 != v15);
      uint64_t v8 = (char *)__src;
    }
  }
  else
  {
    unsigned int v13 = v27;
  }
  sub_1CC7817E0(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8), v8, &v8[20 * v13], v13);
  sub_1CC7817E0(*(void *)(a1 + 48), *(void *)(*(void *)(a1 + 48) + 8), (char *)__src, (char *)__src + 20 * v27, v27);
  **(unsigned char **)(a1 + 56) = 1;
  **(unsigned char **)(a1 + 64) = 1;
  if (__src != v28) {
    free(__src);
  }
}

void sub_1CC7817E0(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  int v6 = __src;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = *(unsigned char **)(a1 + 8);
  uint64_t v10 = (a2 - *(void *)a1) / 20;
  uint64_t v11 = (char *)(*(void *)a1 + 20 * v10);
  uint64_t v12 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 2)) < a5)
  {
    unint64_t v13 = a5 - 0x3333333333333333 * ((v9 - v8) >> 2);
    if (v13 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0x666666666666666) {
      unint64_t v16 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0xCCCCCCCCCCCCCCCLL) {
        sub_1CB833614();
      }
      int v17 = (char *)operator new(20 * v16);
    }
    else
    {
      int v17 = 0;
    }
    int v25 = &v17[20 * v10];
    uint64_t v26 = 5 * a5;
    uint64_t v27 = &v25[20 * a5];
    uint64_t v28 = 4 * v26;
    uint64_t v29 = v25;
    do
    {
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v6;
      *((_DWORD *)v29 + 4) = *((_DWORD *)v6 + 4);
      v29 += 20;
      v6 += 20;
      v28 -= 20;
    }
    while (v28);
    int v30 = *(char **)a1;
    if (v11 != *(char **)a1)
    {
      uint64_t v31 = v11;
      do
      {
        long long v32 = *(_OWORD *)(v31 - 20);
        *((_DWORD *)v25 - 1) = *((_DWORD *)v31 - 1);
        *(_OWORD *)(v25 - 20) = v32;
        v25 -= 20;
        v31 -= 20;
      }
      while (v31 != v30);
      unint64_t v9 = *(unsigned char **)(a1 + 8);
    }
    int v33 = &v17[20 * v16];
    if (v9 != v11) {
      memmove(v27, v11, v9 - v11);
    }
    unsigned int v34 = *(char **)a1;
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = &v27[v9 - v11];
    *(void *)(a1 + 16) = v33;
    if (v34)
    {
      operator delete(v34);
    }
    return;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 2)) >= a5)
  {
    int v18 = &__src[20 * a5];
    int v20 = *(char **)(a1 + 8);
LABEL_18:
    unint64_t v21 = &v11[20 * a5];
    unint64_t v22 = (unint64_t)&v20[-20 * a5];
    long long v23 = v20;
    if (v22 < (unint64_t)v9)
    {
      long long v23 = v20;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *((_DWORD *)v23 + 4) = *(_DWORD *)(v22 + 16);
        *(_OWORD *)long long v23 = v24;
        v23 += 20;
        v22 += 20;
      }
      while (v22 < (unint64_t)v9);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v11[20 * a5], v11, v20 - v21);
    }
    if (v18 != v6)
    {
      memmove(v11, v6, v18 - v6);
    }
    return;
  }
  int v18 = &__src[4 * ((v9 - v11) >> 2)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[4 * ((v9 - v11) >> 2)], a4 - v18);
  }
  int v20 = &v9[v19];
  *(void *)(a1 + 8) = &v9[v19];
  if (v9 - v11 >= 1) {
    goto LABEL_18;
  }
}

_DWORD *sub_1CC781A90(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    __n128 result = operator new(96 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 96 * v5;
      do
      {
        *(void *)__n128 result = -4096;
        result += 24;
        v6 -= 96;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)__n128 result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void *sub_1CC781B2C(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v2 = result + 1;
      unint64_t v3 = result + 9;
    }
    else
    {
      uint64_t v5 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v5 && v5 >= 0x41) {
        return sub_1CC781BA8(result);
      }
      if (!v5)
      {
        int v4 = 0;
LABEL_6:
        *(_DWORD *)__n128 result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v2 = (void *)result[1];
      unint64_t v3 = &v2[v5];
    }
    do
      *v2++ = -4096;
    while (v2 != v3);
    int v4 = *(_DWORD *)result & 1;
    goto LABEL_6;
  }
  return result;
}

void *sub_1CC781BA8(void *result)
{
  int v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  char v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 9)
  {
    uint64_t v6 = result + 1;
    void *result = 1;
    unsigned int v7 = result + 9;
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1D25D9CD0](result[1], 8);
      goto LABEL_12;
    }
    void *result = 0;
    if (!v5) {
      return result;
    }
    uint64_t v6 = (void *)result[1];
    unsigned int v7 = &v6[v5];
    do
LABEL_18:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
LABEL_12:

  return sub_1CC77EFF8(v1, v5);
}

_DWORD *sub_1CC781C80(_DWORD *result)
{
  int v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(void **)result;
      uint64_t v7 = 96 * v2;
      do
      {
        void *v6 = -4096;
        v6 += 12;
        v7 -= 96;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CC781A90(v1, v5);
  }
  return result;
}

uint64_t sub_1CC781D30(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(result + 96 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(result + 96 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

void *sub_1CC781DB4(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = a1[2];
  unsigned int v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = a1;
  sub_1CC781E74((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CC781D30(*(void *)v7, v7[4], *a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096) {
    --a1[3];
  }
  return a3;
}

void *sub_1CC781E74(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC781F4C(a1, v4, &v4[12 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 96 * v10;
    do
    {
      void *result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC781F4C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    unsigned int v4 = *(void **)result;
    uint64_t v5 = 96 * v3;
    do
    {
      *unsigned int v4 = -4096;
      v4 += 12;
      v5 -= 96;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 12)
  {
    uint64_t v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 96 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v15 = 0;
        int v16 = 1;
        while (v10 != -4096)
        {
          if (v15) {
            BOOL v17 = 0;
          }
          else {
            BOOL v17 = v10 == -8192;
          }
          if (v17) {
            uint64_t v15 = v9;
          }
          unsigned int v18 = v8 + v16++;
          unsigned int v8 = v18 & v7;
          uint64_t v9 = *(void *)result + 96 * (v18 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_7;
          }
        }
        if (v15) {
          uint64_t v9 = v15;
        }
      }
LABEL_7:
      *(void *)uint64_t v9 = v6;
      long long v11 = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v9 + 8) = v11;
      long long v12 = *(_OWORD *)(a2 + 5);
      long long v13 = *(_OWORD *)(a2 + 7);
      long long v14 = *(_OWORD *)(a2 + 9);
      *(void *)(v9 + 88) = a2[11];
      *(_OWORD *)(v9 + 72) = v14;
      *(_OWORD *)(v9 + 56) = v13;
      *(_OWORD *)(v9 + 40) = v12;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CC782058(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC7820FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      long long v11 = 0;
      uint64_t result = sub_1CC782058((uint64_t)v5, v10, &v11);
      uint64_t *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC7821B8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 128))(&v20, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 136))(&v19, a2, a1);
  uint64_t v5 = v19;
  uint64_t v4 = v20;
  if (v20)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v20 + 16))(&v20, v20);
    uint64_t v6 = v20;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 16))(&v20, v5);
    uint64_t v7 = v20;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7) & 1) == 0)
  {
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 400))(a2, *v9);
    int v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = HIDWORD(v10);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
    unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v13);
    unsigned int v17 = (v14 + v16 - 1) / v16 + v11;
    if (v8 <= v17) {
      uint64_t v8 = v17;
    }
    else {
      uint64_t v8 = v8;
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return v8;
}

uint64_t sub_1CC782500(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*a2 == *v5) {
      goto LABEL_6;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v9 = v4 + v7++;
      uint64_t v4 = v9 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (*a2 == v6)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return *(void *)(a1[3] + 16 * *((unsigned int *)v5 + 2) + 8);
  }
}

BOOL sub_1CC78258C(llvm::GlobalValue *a1)
{
  Section = llvm::GlobalValue::getSection(a1);
  if (v2 == 17)
  {
    return *(void *)Section == 0x6C61636F6C5F6C63
        && *((void *)Section + 1) == 0x616E7265746E695FLL
        && Section[16] == 108;
  }
  else
  {
    if (v2 != 10) {
      return 0;
    }
    return *(void *)Section == 0x69727261625F6C63 && *((_WORD *)Section + 4) == 29285;
  }
}

uint64_t sub_1CC782620(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 128))(&v20, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 136))(&v19, a2, a1);
  uint64_t v5 = v19;
  uint64_t v4 = v20;
  if (v20)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v20 + 16))(&v20, v20);
    uint64_t v6 = v20;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 16))(&v20, v5);
    uint64_t v7 = v20;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7) & 1) == 0)
  {
    uint64_t v10 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    if (!llvm::Value::getMetadata(v10, "agx.ts.dma", 0xAuLL))
    {
      unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 400))(a2, v10);
      int v12 = v11;
      uint64_t v14 = v13;
      unint64_t v15 = HIDWORD(v11);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
      unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v14);
      unsigned int v18 = (v15 + v17 - 1) / v17 + v12;
      if (v8 <= v18) {
        uint64_t v8 = v18;
      }
      else {
        uint64_t v8 = v8;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return v8;
}

void sub_1CC78298C(char **a1, char *a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  uint64_t v10 = *a1;
  int v9 = a1[1];
  uint64_t v11 = a2 - *a1;
  int v12 = &(*a1)[v11 & 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v13 = a1[2];
  if (a5 > (v13 - v9) >> 2)
  {
    unint64_t v14 = a5 + ((v9 - v10) >> 2);
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = v13 - v10;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        sub_1CB833614();
      }
      unsigned int v17 = (char *)operator new(4 * v16);
    }
    else
    {
      unsigned int v17 = 0;
    }
    uint64_t v26 = v11 >> 2;
    uint64_t v27 = &v17[4 * (v11 >> 2)];
    uint64_t v28 = &v27[4 * a5];
    uint64_t v29 = 4 * a5;
    int v30 = v27;
    do
    {
      int v31 = *(_DWORD *)v6;
      v6 += 4;
      *(_DWORD *)int v30 = v31;
      v30 += 4;
      v29 -= 4;
    }
    while (v29);
    if (v10 != a2)
    {
      uint64_t v32 = 4 * v26;
      do
      {
        *(_DWORD *)&v17[v32 - 4] = *(_DWORD *)&v10[v32 - 4];
        v32 -= 4;
      }
      while (v32);
      uint64_t v27 = v17;
    }
    int v33 = &v17[4 * v16];
    if (v9 != v12) {
      memmove(v28, v12, v9 - v12);
    }
    *a1 = v27;
    a1[1] = &v28[v9 - v12];
    a1[2] = v33;
    if (v10)
    {
      operator delete(v10);
    }
    return;
  }
  uint64_t v18 = (v9 - v12) >> 2;
  if (v18 >= a5)
  {
    uint64_t v19 = &__src[4 * a5];
    unint64_t v21 = a1[1];
LABEL_18:
    unint64_t v22 = &v12[4 * a5];
    long long v23 = &v21[-4 * a5];
    long long v24 = v21;
    if (v23 < v9)
    {
      long long v24 = v21;
      do
      {
        int v25 = *(_DWORD *)v23;
        v23 += 4;
        *(_DWORD *)long long v24 = v25;
        v24 += 4;
      }
      while (v23 < v9);
    }
    a1[1] = v24;
    if (v21 != v22) {
      memmove(&v21[-4 * ((v21 - v22) >> 2)], v12, v21 - v22);
    }
    if (v19 != v6)
    {
      memmove(v12, v6, v19 - v6);
    }
    return;
  }
  uint64_t v19 = &__src[4 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(a1[1], &__src[4 * v18], a4 - v19);
  }
  unint64_t v21 = &v9[v20];
  a1[1] = &v9[v20];
  if (v9 - v12 >= 1) {
    goto LABEL_18;
  }
}

uint64_t *sub_1CC782BC8(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  if (*(void *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v7);
    uint64_t v3 = v7;
    uint64_t v4 = *a1;
    uint64_t v7 = 0;
    *a1 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1CC782C9C()
{
  v4.n128_u64[0] = (unint64_t)"Print performance statistic diagnostics ignoring all instructions outside of loops";
  v4.n128_u64[1] = 82;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD63ACC8(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintPerfDiagsForLoopsOnly, &dword_1CB82C000);
}

void sub_1CC782D10(uint64_t a1)
{
}

uint64_t sub_1CC782DC4(uint64_t a1, uint64_t a2, char a3, void *__src, uint64_t a5)
{
  int v6 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61BF78;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F261D9A8;
  *(void *)(a1 + 304) = a1 + 304;
  *(void *)(a1 + 312) = a1 + 304;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = a1 + 304;
  *(void *)(a1 + 336) = a2;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 408;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 4;
  *(void *)(a1 + 416) = a1 + 432;
  *(void *)(a1 + 424) = 0x600000000;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = a1 + 504;
  *(void *)(a1 + 496) = 0x600000000;
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 584) = a3;
  size_t v7 = 4 * a5;
  *(void *)(a1 + 592) = a1 + 608;
  *(void *)(a1 + 600) = 0x400000000;
  if ((unint64_t)(4 * a5) >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a5)
  {
    memcpy(*(void **)(a1 + 592), __src, v7);
    int v6 = *(_DWORD *)(a1 + 600);
  }
  *(_DWORD *)(a1 + 600) = v6 + (v7 >> 2);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 640) = 0;
  return a1;
}

void sub_1CC782F44()
{
}

void sub_1CC782F90(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F261D9A8;
  MEMORY[0x1D25D9CD0](a1[78], 4);
  char v2 = (uint64_t *)a1[74];
  if (v2 != a1 + 76) {
    free(v2);
  }
  sub_1CD50C1C0(a1 + 43);
  if (a1[40])
  {
    uint64_t v4 = a1[38];
    uint64_t v3 = (uint64_t *)a1[39];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    a1[40] = 0;
    if (v3 != a1 + 38)
    {
      do
      {
        int v6 = (uint64_t *)v3[1];
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1 + 38);
    }
  }
  *a1 = (uint64_t)&unk_1F260E110;
  size_t v7 = (uint64_t *)a1[22];
  if (v7 != a1 + 24) {
    free(v7);
  }
  uint64_t v8 = (uint64_t *)a1[13];
  if (v8 != a1 + 15) {
    free(v8);
  }
  int v9 = (uint64_t *)a1[4];
  if (v9 != a1 + 6) {
    free(v9);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC7830B8(uint64_t *a1)
{
  sub_1CC782F90(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7830F0()
{
  return "GPU sample sinking pass";
}

void sub_1CC783100(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LiveVariables::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC7831F0(uint64_t a1, uint64_t a2)
{
  uint64_t v538 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCDA588) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::MachineDominatorTree::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  *(void *)(v4 + 248) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineDominatorTree::ID);
  int v9 = *(uint64_t **)(v4 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_11:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::MachineLoopInfo::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  *(void *)(v4 + 256) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::MachineLoopInfo::ID);
  uint64_t v13 = *(uint64_t **)(v4 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_16:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::LiveIntervals::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  *(void *)(v4 + 280) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::LiveIntervals::ID);
  *(void *)(v4 + 296) = *(void *)(a2 + 40);
  *(void *)(v4 + 288) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(v4 + 264) = v17;
  *(void *)(v4 + 272) = (*(uint64_t (**)(void))(*(void *)v17 + 1264))();
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(v4 + 344), (const llvm::MachineFunction *)a2);
  uint64_t v18 = *(void *)(v4 + 280);
  __n128 v19 = *(__n128 *)(v4 + 288);
  __n128 v509 = v19;
  uint64_t v510 = v18;
  int v511 = (llvm::RegisterClassInfo *)(v4 + 344);
  uint64_t v512 = v514;
  uint64_t v513 = 0x400000000;
  uint64_t v495 = v4;
  unsigned int v515 = v517;
  uint64_t v516 = 0x400000000;
  v518 = v520;
  uint64_t v519 = 0x400000000;
  int v522 = 0;
  uint64_t v523 = 0;
  unsigned int v521 = &v522;
  if (*(unsigned char *)(v4 + 584))
  {
    uint64_t v493 = a2;
    int64_t v20 = *(int **)(v4 + 592);
    uint64_t v21 = *(unsigned int *)(v4 + 600);
    unsigned int v22 = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v19.n128_u64[0] + 296))(v19.n128_u64[0], v19);
    sub_1CBB1173C((uint64_t)&v512, v22);
    if (v513)
    {
      unint64_t v23 = 0;
      do
      {
        int v24 = *(_DWORD *)(*((void *)v511 + 27) + 4 * v23);
        if (!v24)
        {
          int v24 = llvm::RegisterClassInfo::computePSetLimit(v511, v23);
          *(_DWORD *)(*((void *)v511 + 27) + 4 * v23) = v24;
        }
        *((_DWORD *)v512 + v23++) = v24;
      }
      while (v23 < v513);
    }
    if (v21)
    {
      uint64_t v25 = 4 * v21;
      do
      {
        LODWORD(__src) = 0;
        int v26 = *v20++;
        LODWORD(__src) = v26;
        sub_1CB918828((uint64_t)&v518, (unsigned int *)&__src);
        v25 -= 4;
      }
      while (v25);
    }
    unsigned int v27 = (*(uint64_t (**)(unint64_t))(*(void *)v509.n128_u64[0] + 296))(v509.n128_u64[0]);
    unsigned int v28 = v27;
    if (v516 != v27)
    {
      if (v516 <= v27)
      {
        if (HIDWORD(v516) < v27) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v516 != v27) {
          bzero((char *)v515 + 12 * v516, 12 * ((-12 * v516 + 12 * (unint64_t)v27 - 12) / 0xC) + 12);
        }
      }
      LODWORD(v516) = v28;
    }
    if (v28)
    {
      unint64_t v29 = 0;
      int v31 = v522;
      uint64_t v30 = v523;
      uint64_t v32 = v518;
      int v33 = (char *)v515;
      do
      {
        if (v30)
        {
          for (uint64_t i = v31; i; uint64_t i = (void *)*i)
          {
            unsigned int v35 = *((_DWORD *)i + 7);
            if (v35 <= v29)
            {
              if (v35 >= v29) {
                goto LABEL_50;
              }
              ++i;
            }
          }
        }
        else if (v519)
        {
          uint64_t v36 = 4 * v519;
          unsigned int v37 = v32;
          while (*v37 != v29)
          {
            ++v37;
            v36 -= 4;
            if (!v36) {
              goto LABEL_49;
            }
          }
          if (v36) {
            goto LABEL_50;
          }
        }
LABEL_49:
        uint64_t v38 = &v33[12 * v29];
        *(void *)uint64_t v38 = 0;
        *((_DWORD *)v38 + 2) = 0;
        unsigned int v28 = v516;
LABEL_50:
        ++v29;
      }
      while (v29 < v28);
    }
    int v39 = *(_DWORD *)(v509.n128_u64[1] + 32);
    if (v39)
    {
      int v40 = 0;
      while (1)
      {
        uint64_t v41 = v40 & 0x7FFFFFFF;
        uint64_t v42 = *(void *)(*(void *)(v509.n128_u64[1] + 24) + 16 * v41 + 8);
        if (v42)
        {
          while ((*(_DWORD *)v42 & 0x80000000) != 0)
          {
            uint64_t v42 = *(void *)(v42 + 24);
            if (!v42) {
              goto LABEL_77;
            }
          }
          unint64_t v43 = (void *)(v510 + 408);
          uint64_t v44 = *(unsigned int *)(v510 + 416);
          if (v41 >= v44)
          {
            sub_1CB9153B8((uint64_t)v43, v41 - v44 + 1, *(void *)(v510 + 424));
LABEL_80:
            operator new();
          }
          uint64_t v45 = *(void *)(*v43 + 8 * v41);
          if (!v45) {
            goto LABEL_80;
          }
          if (*(float *)(v45 + 116) == INFINITY)
          {
            unint64_t v46 = *(void *)(*(void *)(v509.n128_u64[1] + 24) + 16 * v41) & 0xFFFFFFFFFFFFFFF8;
            int v47 = (unsigned int *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v509.n128_u64[0]
                                                                                                + 320))(v509.n128_u64[0], v46);
            unsigned int v48 = *v47;
            if (*v47 != -1) {
              break;
            }
          }
        }
LABEL_77:
        if (++v40 == v39) {
          goto LABEL_81;
        }
      }
      unsigned int v49 = v47;
      while (1)
      {
        if (v523)
        {
          for (uint64_t j = v522; j; uint64_t j = (void *)*j)
          {
            unsigned int v51 = *((_DWORD *)j + 7);
            if (v48 >= v51)
            {
              if (v51 >= v48) {
                goto LABEL_76;
              }
              ++j;
            }
          }
        }
        else if (v519)
        {
          unsigned int v52 = v518;
          uint64_t v53 = 4 * v519;
          while (*v52 != v48)
          {
            ++v52;
            v53 -= 4;
            if (!v53) {
              goto LABEL_75;
            }
          }
          if (v53) {
            goto LABEL_76;
          }
        }
LABEL_75:
        unsigned int v54 = (_DWORD *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v509.n128_u64[0]
                                                                                      + 280))(v509.n128_u64[0], v46);
        *((_DWORD *)v512 + (int)*v49) -= *v54;
LABEL_76:
        int v55 = v49[1];
        ++v49;
        unsigned int v48 = v55;
        if (v55 == -1) {
          goto LABEL_77;
        }
      }
    }
LABEL_81:
    LODWORD(v525) = 0;
    __src = 0;
    sub_1CC7863F8(&v533, v513, (uint64_t *)&__src);
    uint64_t v56 = *(void *)(v493 + 328);
    if (v56 != v493 + 320)
    {
      while (1)
      {
        uint64_t v57 = v56 + 48;
        uint64_t v497 = v56;
        uint64_t v58 = *(void *)(v56 + 56);
        uint64_t v502 = v56 + 48;
        if (v58 != v56 + 48) {
          break;
        }
LABEL_231:
        uint64_t v56 = *(void *)(v497 + 8);
        if (v56 == v493 + 320) {
          goto LABEL_232;
        }
      }
      while (1)
      {
        if (**(unsigned __int16 **)(v58 + 16) - 13 >= 2)
        {
          LODWORD(v525) = 0;
          __src = 0;
          sub_1CC7863F8(&v530, v513, (uint64_t *)&__src);
          uint64_t v59 = *(unsigned int *)(v58 + 40);
          if (v59)
          {
            uint64_t v60 = *(void *)(v58 + 32);
            uint64_t v505 = v60 + 32 * v59;
            do
            {
              if (*(unsigned char *)v60 == 12)
              {
                unsigned int v67 = *(_DWORD *)(v509.n128_u64[0] + 44);
                __src = &v526;
                HIDWORD(v525) = 6;
                if (v67 + 63 >= 0x1C0)
                {
                  LODWORD(v525) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v68 = v67;
                if (v67 + 63 >= 0x40)
                {
                  bzero(&v526, 8 * ((v67 + 63) >> 6));
                  LODWORD(v525) = (v67 + 63) >> 6;
                  unsigned int v529 = v67;
                  unsigned int v68 = v67;
LABEL_132:
                  uint64_t v86 = 0;
                  uint64_t v87 = *(void *)(v60 + 16);
                  uint64_t v88 = v68;
                  while (2)
                  {
                    uint64_t v89 = (*(uint64_t (**)(void))(**(void **)(*(void *)v509.n128_u64[1] + 16) + 176))(*(void *)(*(void *)v509.n128_u64[1] + 16));
                    if (v89) {
                      BOOL v90 = (uint64_t *)(v89 + 8);
                    }
                    else {
                      BOOL v90 = 0;
                    }
                    uint64_t v91 = v90[5];
                    uint64_t v92 = 4 * v86;
                    unsigned int v93 = *(unsigned __int16 *)(v91 + v92);
                    if (*(_WORD *)(v91 + v92))
                    {
                      uint64_t v94 = v90[6];
                      if (v94)
                      {
                        uint64_t v95 = *v90;
                        unsigned int v96 = *(unsigned __int16 *)(v91 + 4 * v86 + 2);
                        do
                        {
                          unsigned int v97 = v93;
                          unsigned int v98 = (unsigned __int16)v93;
                          unsigned int v93 = v96;
                          int v99 = (unsigned __int16 *)(v94 + 2 * *(unsigned int *)(v95 + 24 * v98 + 8));
                          while (((*(void *)(*(void *)(v509.n128_u64[1] + 352) + ((v97 >> 3) & 0x1FF8)) >> v97) & 1) != 0)
                          {
                            int v100 = *v99++;
                            v97 += v100;
                            if (!v100) {
                              goto LABEL_152;
                            }
                          }
                          unsigned int v96 = 0;
                        }
                        while ((_WORD)v93);
                        goto LABEL_144;
                      }
                    }
                    else
                    {
LABEL_144:
                      if (v509.n128_u64[0]) {
                        unint64_t v101 = v509.n128_u64[0] + 8;
                      }
                      else {
                        unint64_t v101 = 0;
                      }
                      uint64_t v102 = *(void *)(v101 + 40);
                      unsigned int v103 = *(unsigned __int16 *)(v102 + 4 * v86);
                      if (*(_WORD *)(v102 + 4 * v86))
                      {
                        unsigned int v104 = *(unsigned __int16 *)(v102 + 4 * v86 + 2);
                        uint64_t v105 = __src;
                        do
                        {
                          int v106 = *(_DWORD *)(v87 + 4 * (v103 >> 5)) >> v103;
                          unsigned int v103 = v104;
                          if (v106) {
                            v105[v86 >> 6] |= 1 << v86;
                          }
                          unsigned int v104 = 0;
                        }
                        while (v103);
                      }
                    }
LABEL_152:
                    if (++v86 == v88)
                    {
                      unsigned int v67 = v529;
                      goto LABEL_154;
                    }
                    continue;
                  }
                }
                LODWORD(v525) = (v67 + 63) >> 6;
                unsigned int v529 = v67;
                if (v67) {
                  goto LABEL_132;
                }
LABEL_154:
                uint64_t v107 = (uint64_t *)__src;
                if (v67)
                {
                  uint64_t v108 = 0;
                  uint64_t v109 = (v67 - 1) & 0xFFFFFFC0;
                  int v110 = (uint64_t *)__src;
                  while (1)
                  {
                    uint64_t v112 = *v110++;
                    uint64_t v111 = v112;
                    unint64_t v113 = v109 + v108 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
                    unint64_t v114 = v113 & v111;
                    if (v114) {
                      break;
                    }
                    v108 -= 64;
                    if (v109 + v108 == -64) {
                      goto LABEL_202;
                    }
                  }
                  unint64_t v115 = __clz(__rbit64(v114));
                  if (v115 + 1 != v108)
                  {
                    uint64_t v116 = v115 - v108;
                    while (1)
                    {
                      int v117 = (unsigned int *)(*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v509.n128_u64[0]
                                                                                                  + 328))(v509.n128_u64[0], v116);
                      unsigned int v118 = *v117;
                      if (*v117 != -1) {
                        break;
                      }
LABEL_186:
                      unsigned int v134 = v116 + 1;
                      if (v116 + 1 == v529)
                      {
                        uint64_t v107 = (uint64_t *)__src;
                        goto LABEL_202;
                      }
                      unsigned int v135 = v134 >> 6;
                      unsigned int v136 = v529 - 1;
                      uint64_t v107 = (uint64_t *)__src;
                      if (v134 >> 6 <= (v529 - 1) >> 6)
                      {
                        uint64_t v137 = 0;
                        uint64_t v138 = v136 >> 6;
                        int v139 = v134 & 0x3F;
                        BOOL v83 = v139 == 0;
                        unint64_t v140 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v139;
                        uint64_t v141 = v83 ? -1 : ~v140;
                        unint64_t v142 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v136;
                        int v143 = v135 << 6;
                        uint64_t v144 = v138 - v135;
                        int v145 = (char *)__src + 8 * v135;
                        while (1)
                        {
                          uint64_t v146 = v137 ? -1 : v141;
                          unint64_t v147 = v144 == v137 ? v142 : -1;
                          unint64_t v148 = v146 & v147 & *(void *)&v145[8 * v137];
                          if (v148) {
                            break;
                          }
                          v143 += 64;
                          if (v144 + 1 == ++v137) {
                            goto LABEL_202;
                          }
                        }
                        uint64_t v116 = __clz(__rbit64(v148)) + v143;
                        if (v116 != -1) {
                          continue;
                        }
                      }
                      goto LABEL_202;
                    }
                    int v119 = v117;
                    while (2)
                    {
                      if (v523)
                      {
                        for (uint64_t k = v522; k; uint64_t k = (void *)*k)
                        {
                          unsigned int v121 = *((_DWORD *)k + 7);
                          if (v118 >= v121)
                          {
                            if (v121 >= v118) {
                              goto LABEL_185;
                            }
                            ++k;
                          }
                        }
                        goto LABEL_179;
                      }
                      if (!v519) {
                        goto LABEL_179;
                      }
                      int v122 = v518;
                      uint64_t v123 = 4 * v519;
                      while (*v122 != v118)
                      {
                        ++v122;
                        v123 -= 4;
                        if (!v123) {
                          goto LABEL_179;
                        }
                      }
                      if (!v123)
                      {
LABEL_179:
                        unsigned int v124 = v118;
                        int v125 = v530;
                        int v126 = (char *)v530 + 12 * (int)v118;
                        uint64_t v127 = 3 * (int)v118;
                        int v128 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v509.n128_u64[0] + 288))(v509.n128_u64[0], v116);
                        ++v125[v127];
                        int v130 = *((_DWORD *)v126 + 1);
                        int v129 = v126 + 4;
                        BOOL v131 = v130 == v128;
                        if (v130 < v128)
                        {
                          int v132 = 0;
                          *int v129 = v128;
                          goto LABEL_184;
                        }
                        if (v131)
                        {
                          int v132 = v125[3 * v124 + 2];
LABEL_184:
                          v125[3 * v124 + 2] = v132 + 1;
                        }
                      }
LABEL_185:
                      unsigned int v133 = v119[1];
                      ++v119;
                      unsigned int v118 = v133;
                      if (v133 == -1) {
                        goto LABEL_186;
                      }
                      continue;
                    }
                  }
                }
LABEL_202:
                if (v107 != &v526) {
                  free(v107);
                }
              }
              else
              {
                if (*(unsigned char *)v60) {
                  goto LABEL_204;
                }
                unint64_t v61 = *(unsigned int *)(v60 + 4);
                if (!v61) {
                  goto LABEL_204;
                }
                if (v61 >> 30)
                {
                  if ((v61 & 0x80000000) == 0) {
                    goto LABEL_204;
                  }
                  uint64_t v64 = (uint64_t *)(*(void *)(*(void *)(v509.n128_u64[1] + 24) + 16 * (v61 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                }
                else
                {
                  if (!sub_1CB946A80((void *)v509.n128_u64[1], *(_DWORD *)(v60 + 4))) {
                    goto LABEL_204;
                  }
                  unsigned int v62 = *(uint64_t ***)(v509.n128_u64[0] + 240);
                  unint64_t v63 = *(uint64_t ***)(v509.n128_u64[0] + 248);
                  if (v62 == v63)
                  {
                    uint64_t v64 = 0;
                  }
                  else
                  {
                    uint64_t v64 = 0;
                    unint64_t v65 = v61 >> 3;
                    do
                    {
                      uint64_t v66 = **v62;
                      if (v65 < *(unsigned __int16 *)(v66 + 22)
                        && ((1 << (v61 & 7)) & *(unsigned __int8 *)(*(void *)(v66 + 8) + v65)) != 0
                        && (!v64
                         || *v62 != v64
                         && ((*(_DWORD *)(v64[1] + ((*(unsigned __int16 *)(v66 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v66 + 24)) & 1) != 0))
                      {
                        uint64_t v64 = *v62;
                      }
                      ++v62;
                    }
                    while (v62 != v63);
                  }
                }
                if (*(unsigned char *)(*v64 + 31))
                {
                  unsigned int v69 = (unsigned int *)(*(uint64_t (**)(unint64_t, uint64_t *))(*(void *)v509.n128_u64[0]
                                                                                               + 320))(v509.n128_u64[0], v64);
                  unsigned int v70 = *v69;
                  if (*v69 != -1)
                  {
                    uint64_t v71 = v69;
                    do
                    {
                      if (v523)
                      {
                        for (m = v522; m; m = (void *)*m)
                        {
                          unsigned int v73 = *((_DWORD *)m + 7);
                          if (v70 >= v73)
                          {
                            if (v73 >= v70) {
                              goto LABEL_128;
                            }
                            ++m;
                          }
                        }
                      }
                      else if (v519)
                      {
                        uint64_t v74 = v518;
                        uint64_t v75 = 4 * v519;
                        while (*v74 != v70)
                        {
                          ++v74;
                          v75 -= 4;
                          if (!v75) {
                            goto LABEL_122;
                          }
                        }
                        if (v75) {
                          goto LABEL_128;
                        }
                      }
LABEL_122:
                      unsigned int v76 = v70;
                      BOOL v77 = v530;
                      unsigned int v78 = (char *)v530 + 12 * (int)v70;
                      uint64_t v79 = 3 * (int)v70;
                      int v80 = *(_DWORD *)(*(uint64_t (**)(unint64_t, uint64_t *))(*(void *)v509.n128_u64[0]
                                                                                              + 280))(v509.n128_u64[0], v64);
                      ++v77[v79];
                      int v82 = *((_DWORD *)v78 + 1);
                      __int16 v81 = v78 + 4;
                      BOOL v83 = v82 == v80;
                      if (v82 >= v80)
                      {
                        if (!v83) {
                          goto LABEL_128;
                        }
                        int v84 = v77[3 * v76 + 2];
                      }
                      else
                      {
                        int v84 = 0;
                        *__int16 v81 = v80;
                      }
                      v77[3 * v76 + 2] = v84 + 1;
LABEL_128:
                      unsigned int v85 = v71[1];
                      ++v71;
                      unsigned int v70 = v85;
                    }
                    while (v85 != -1);
                  }
                }
              }
LABEL_204:
              v60 += 32;
            }
            while (v60 != v505);
          }
          if (v534)
          {
            uint64_t v149 = 0;
            unint64_t v150 = 0;
            do
            {
              int v151 = &v533[v149];
              LODWORD(v152) = *(_DWORD *)&v533[v149];
              signed int v153 = *(_DWORD *)&v533[v149 + 4];
              int v154 = *(_DWORD *)((char *)v530 + v149);
              signed int v155 = *(_DWORD *)((char *)v530 + v149 + 4);
              if ((int)v152 <= v154) {
                uint64_t v152 = v154;
              }
              else {
                uint64_t v152 = v152;
              }
              if (v153 <= v155) {
                uint64_t v156 = v155;
              }
              else {
                uint64_t v156 = v153;
              }
              int v157 = *((_DWORD *)v151 + 2) & ~(*((int *)v151 + 2) >> 31);
              if (v153 < v155) {
                int v157 = 0;
              }
              int v158 = *(_DWORD *)((char *)v530 + v149 + 8);
              if (v157 > v158) {
                int v158 = v157;
              }
              if (v155 < v153) {
                int v158 = v157;
              }
              *(void *)int v151 = v152 | (v156 << 32);
              *((_DWORD *)v151 + 2) = v158;
              ++v150;
              v149 += 12;
            }
            while (v150 < v534);
          }
          if (v530 != v532) {
            free(v530);
          }
          uint64_t v57 = v502;
          if (!v58) {
            goto LABEL_229;
          }
        }
        if ((*(unsigned char *)v58 & 4) == 0)
        {
LABEL_229:
          while ((*(_WORD *)(v58 + 44) & 8) != 0)
            uint64_t v58 = *(void *)(v58 + 8);
        }
        uint64_t v58 = *(void *)(v58 + 8);
        if (v58 == v57) {
          goto LABEL_231;
        }
      }
    }
LABEL_232:
    if (v516)
    {
      uint64_t v159 = 0;
      unint64_t v160 = 0;
      do
      {
        int v161 = (char *)v515 + v159;
        uint64_t v162 = *(void *)&v533[v159];
        *((_DWORD *)v161 + 2) = *(_DWORD *)&v533[v159 + 8];
        *(void *)int v161 = v162;
        ++v160;
        v159 += 12;
      }
      while (v160 < v516);
    }
    uint64_t v4 = v495;
    if (v533 != (char *)&v535) {
      free(v533);
    }
    a2 = v493;
  }
  int v163 = (void *)(a2 + 320);
  int v164 = *(void **)(a2 + 328);
  if (v164 == (void *)(a2 + 320))
  {
LABEL_785:
    uint64_t v2 = 0;
    goto LABEL_810;
  }
  char v165 = 0;
  unsigned int v492 = (int32x2_t *)(v4 + 624);
  BOOL v496 = (uint64_t *)(v4 + 304);
  int v494 = (void *)(a2 + 320);
  do
  {
    if (((v164[12] - v164[11]) & 0x7FFFFFFF8) != 0x10) {
      goto LABEL_300;
    }
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 336) + 56))(&v530);
    if (v532[2]) {
      goto LABEL_300;
    }
    int v166 = (unint64_t *)v530;
    if (v532[1])
    {
      unsigned int v530 = v531;
      unsigned int v531 = v166;
      int v166 = (unint64_t *)v530;
    }
    unint64_t v167 = v166[9] - v166[8];
    if ((v167 & 0x7FFFFFFF8) != 8)
    {
      unsigned int v530 = v531;
      unsigned int v531 = v166;
      unint64_t v167 = *((void *)v530 + 9) - *((void *)v530 + 8);
      int v166 = (unint64_t *)v530;
    }
    if ((v167 & 0x7FFFFFFF8) != 8)
    {
LABEL_300:
      LOBYTE(v201) = 0;
      goto LABEL_301;
    }
    uint64_t v168 = *(void *)(v4 + 256);
    int v169 = *(_DWORD *)(v168 + 264);
    if (!v169) {
      goto LABEL_286;
    }
    uint64_t v170 = *(void *)(v168 + 248);
    unsigned int v171 = v169 - 1;
    uint64_t v172 = v171 & ((v166 >> 4) ^ (v166 >> 9));
    int v173 = *(unint64_t **)(v170 + 16 * v172);
    if (v166 != v173)
    {
      int v174 = 1;
      while (v173 != (unint64_t *)-4096)
      {
        int v175 = v172 + v174++;
        uint64_t v172 = v175 & v171;
        int v173 = *(unint64_t **)(v170 + 16 * v172);
        if (v166 == v173) {
          goto LABEL_252;
        }
      }
LABEL_256:
      int v177 = 0;
      goto LABEL_257;
    }
LABEL_252:
    int v176 = *(void **)(v170 + 16 * v172 + 8);
    if (!v176) {
      goto LABEL_256;
    }
    int v177 = 0;
    do
    {
      int v176 = (void *)*v176;
      ++v177;
    }
    while (v176);
LABEL_257:
    uint64_t v178 = v171 & ((v164 >> 4) ^ (v164 >> 9));
    int v179 = *(void **)(v170 + 16 * v178);
    uint64_t v180 = v178;
    if (v164 != v179)
    {
      int v181 = 1;
      int v182 = *(void **)(v170 + 16 * (v171 & ((v164 >> 4) ^ (v164 >> 9))));
      LODWORD(v180) = v171 & ((v164 >> 4) ^ (v164 >> 9));
      while (v182 != (void *)-4096)
      {
        int v183 = v180 + v181++;
        uint64_t v180 = v183 & v171;
        int v182 = *(void **)(v170 + 16 * v180);
        if (v164 == v182) {
          goto LABEL_261;
        }
      }
LABEL_265:
      int v185 = 0;
      goto LABEL_266;
    }
LABEL_261:
    int v184 = *(void **)(v170 + 16 * v180 + 8);
    if (!v184) {
      goto LABEL_265;
    }
    int v185 = 0;
    do
    {
      int v184 = (void *)*v184;
      ++v185;
    }
    while (v184);
LABEL_266:
    if (v177 != v185) {
      goto LABEL_300;
    }
    uint64_t v186 = ((v531 >> 4) ^ (v531 >> 9)) & v171;
    uint64_t v187 = *(unint64_t **)(v170 + 16 * v186);
    if (v531 != v187)
    {
      int v188 = 1;
      while (v187 != (unint64_t *)-4096)
      {
        int v189 = v186 + v188++;
        uint64_t v186 = v189 & v171;
        uint64_t v187 = *(unint64_t **)(v170 + 16 * v186);
        if (v531 == v187) {
          goto LABEL_271;
        }
      }
LABEL_275:
      int v191 = 0;
      goto LABEL_276;
    }
LABEL_271:
    double v190 = *(void **)(v170 + 16 * v186 + 8);
    if (!v190) {
      goto LABEL_275;
    }
    int v191 = 0;
    do
    {
      double v190 = (void *)*v190;
      ++v191;
    }
    while (v190);
LABEL_276:
    if (v164 != v179)
    {
      int v192 = 1;
      while (v179 != (void *)-4096)
      {
        int v193 = v178 + v192++;
        uint64_t v178 = v193 & v171;
        int v179 = *(void **)(v170 + 16 * v178);
        if (v164 == v179) {
          goto LABEL_280;
        }
      }
LABEL_284:
      int v195 = 0;
      goto LABEL_285;
    }
LABEL_280:
    uint64_t v194 = *(void **)(v170 + 16 * v178 + 8);
    if (!v194) {
      goto LABEL_284;
    }
    int v195 = 0;
    do
    {
      uint64_t v194 = (void *)*v194;
      ++v195;
    }
    while (v194);
LABEL_285:
    if (v191 != v195) {
      goto LABEL_300;
    }
LABEL_286:
    uint64_t v196 = v166 + 6;
    int v197 = (unint64_t *)v166[7];
    if (v197 != v166 + 6)
    {
      while (1)
      {
        int v198 = *(unsigned __int16 *)v197[2];
        if ((v198 - 13) >= 5 && v198 != 23) {
          break;
        }
        if ((*(unsigned char *)v197 & 4) == 0)
        {
          while ((*((_WORD *)v197 + 22) & 8) != 0)
            int v197 = (unint64_t *)v197[1];
        }
        int v197 = (unint64_t *)v197[1];
        if (v197 == v196)
        {
          int v197 = v196;
          break;
        }
      }
    }
    unint64_t v200 = v164[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v200 || (*(unsigned char *)v200 & 4) == 0)
    {
      while ((*(_WORD *)(v200 + 44) & 4) != 0)
        unint64_t v200 = *(void *)v200 & 0xFFFFFFFFFFFFFFF8;
    }
    int v201 = 0;
    unint64_t v202 = v164[7];
    unint64_t v503 = v202;
    do
    {
      uint64_t v203 = v200;
      unint64_t v200 = v202;
      if (v203 != v202)
      {
        unint64_t v200 = *(void *)v203 & 0xFFFFFFFFFFFFFFF8;
        if (!v200 || (*(unsigned char *)v200 & 4) == 0)
        {
          while ((*(_WORD *)(v200 + 44) & 4) != 0)
            unint64_t v200 = *(void *)v200 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v504 = v201;
      if ((***(uint64_t (****)(void, uint64_t))(v4 + 336))(*(void *)(v4 + 336), v203))
      {
        LOBYTE(v201) = v504;
        break;
      }
      uint64_t v204 = *(void *)(v203 + 16);
      unsigned __int16 v205 = *(_WORD *)v204 - 1;
      uint64_t v506 = v203;
      if (v205 <= 1u && (*(unsigned char *)(*(void *)(v203 + 32) + 48) & 0x20) != 0) {
        goto LABEL_319;
      }
      uint64_t v206 = *(void *)(v204 + 8);
      if ((*(_WORD *)(v203 + 44) & 0xC) == 0 || (*(_WORD *)(v203 + 44) & 4) != 0)
      {
        if ((v206 & 0x1000000000) == 0) {
          goto LABEL_321;
        }
LABEL_319:
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 272) + 32))(*(void *)(v4 + 272), v203)) {
          goto LABEL_740;
        }
        uint64_t v204 = *(void *)(v203 + 16);
        unsigned __int16 v205 = *(_WORD *)v204 - 1;
        goto LABEL_321;
      }
      uint64_t v454 = v203;
      if ((v206 & 0x1000000000) != 0) {
        goto LABEL_319;
      }
      while ((*(_WORD *)(v454 + 44) & 8) != 0)
      {
        uint64_t v454 = *(void *)(v454 + 8);
        uint64_t v4 = v495;
        int v163 = v494;
        unint64_t v202 = v503;
        uint64_t v203 = v506;
        if ((*(unsigned char *)(*(void *)(v454 + 16) + 12) & 0x10) != 0) {
          goto LABEL_319;
        }
      }
      uint64_t v4 = v495;
      int v163 = v494;
      unint64_t v202 = v503;
      uint64_t v203 = v506;
LABEL_321:
      if (v205 > 1u || (uint64_t v455 = *(void *)(*(void *)(v203 + 32) + 48), (v455 & 0x20) == 0))
      {
        __int16 v208 = *(_WORD *)(v203 + 44);
        int v209 = v208 & 0xC;
        uint64_t v210 = *(void *)(v204 + 8);
        if ((v208 & 0xC) != 0 && (v208 & 4) == 0)
        {
          uint64_t v456 = v203;
          if ((v210 & 0x1000000000) == 0)
          {
            while ((*(_WORD *)(v456 + 44) & 8) != 0)
            {
              uint64_t v456 = *(void *)(v456 + 8);
              uint64_t v4 = v495;
              int v163 = v494;
              unint64_t v202 = v503;
              uint64_t v203 = v506;
              if ((*(unsigned char *)(*(void *)(v456 + 16) + 12) & 0x10) != 0) {
                goto LABEL_327;
              }
            }
            goto LABEL_738;
          }
        }
        else if ((v210 & 0x1000000000) == 0)
        {
          goto LABEL_740;
        }
LABEL_327:
        if (v205 > 1u) {
          goto LABEL_328;
        }
        uint64_t v455 = *(void *)(*(void *)(v203 + 32) + 48);
      }
      if ((v455 & 8) != 0) {
        goto LABEL_331;
      }
      __int16 v208 = *(_WORD *)(v203 + 44);
      int v209 = v208 & 0xC;
LABEL_328:
      uint64_t v212 = *(void *)(v204 + 8);
      if (!v209 || (v208 & 4) != 0)
      {
        if ((v212 & 0x80000) == 0) {
          goto LABEL_333;
        }
LABEL_331:
        if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v4 + 272) + 40))(*(void *)(v4 + 272), v203))goto LABEL_740; {
        uint64_t v204 = *(void *)(v203 + 16);
        }
        unsigned __int16 v205 = *(_WORD *)v204 - 1;
        goto LABEL_333;
      }
      uint64_t v458 = v203;
      if ((v212 & 0x80000) != 0) {
        goto LABEL_331;
      }
      while ((*(_WORD *)(v458 + 44) & 8) != 0)
      {
        uint64_t v458 = *(void *)(v458 + 8);
        uint64_t v4 = v495;
        int v163 = v494;
        unint64_t v202 = v503;
        uint64_t v203 = v506;
        if ((*(unsigned char *)(*(void *)(v458 + 16) + 10) & 8) != 0) {
          goto LABEL_331;
        }
      }
      uint64_t v4 = v495;
      int v163 = v494;
      unint64_t v202 = v503;
      uint64_t v203 = v506;
LABEL_333:
      if (v205 <= 1u && (*(unsigned char *)(*(void *)(v203 + 32) + 48) & 0x10) != 0) {
        goto LABEL_740;
      }
      __int16 v213 = *(_WORD *)(v203 + 44);
      uint64_t v214 = *(void *)(v204 + 8);
      if ((v213 & 0xC) != 0 && (v213 & 4) == 0)
      {
        if ((v214 & 0x100000) == 0)
        {
          while ((*(_WORD *)(v203 + 44) & 8) != 0)
          {
            uint64_t v203 = *(void *)(v203 + 8);
            if ((*(unsigned char *)(*(void *)(v203 + 16) + 10) & 0x10) != 0) {
              goto LABEL_738;
            }
          }
          if ((v214 & 0x1000000) == 0)
          {
            uint64_t v457 = v506;
            do
            {
              uint64_t v4 = v495;
              int v163 = v494;
              unint64_t v202 = v503;
              uint64_t v203 = v506;
              if ((*(_WORD *)(v457 + 44) & 8) == 0) {
                goto LABEL_339;
              }
              uint64_t v457 = *(void *)(v457 + 8);
            }
            while ((*(unsigned char *)(*(void *)(v457 + 16) + 11) & 1) == 0);
            uint64_t v4 = v495;
            int v163 = v494;
LABEL_739:
            unint64_t v202 = v503;
            goto LABEL_740;
          }
        }
LABEL_738:
        uint64_t v4 = v495;
        int v163 = v494;
        goto LABEL_739;
      }
      if ((v214 & 0x1100000) != 0) {
        goto LABEL_740;
      }
LABEL_339:
      unsigned int v216 = v205;
      uint64_t v217 = *(void *)(v203 + 32);
      if (v216 <= 1 && (*(unsigned char *)(v217 + 48) & 1) != 0) {
        goto LABEL_740;
      }
      if ((*(_DWORD *)v217 & 0x10000FF) != 0x1000000) {
        goto LABEL_740;
      }
      uint64_t v218 = *(unsigned int *)(v217 + 4);
      if ((v218 - 1) < 0x3FFFFFFF) {
        goto LABEL_740;
      }
      uint64_t v219 = *(void *)(v4 + 296);
      if ((v218 & 0x80000000) != 0) {
        unsigned int v220 = (uint64_t *)(*(void *)(v219 + 24) + 16 * (v218 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v220 = (uint64_t *)(*(void *)(v219 + 272) + 8 * v218);
      }
      uint64_t v221 = *v220;
      uint64_t v222 = v506;
      if (v221)
      {
        if ((*(unsigned char *)(v221 + 3) & 0x81) != 0)
        {
          while (1)
          {
            uint64_t v221 = *(void *)(v221 + 24);
            if (!v221) {
              break;
            }
            if ((*(_DWORD *)v221 & 0x81000000) == 0) {
              goto LABEL_348;
            }
          }
        }
        else
        {
LABEL_348:
          if ((v218 & 0x80000000) != 0) {
            unint64_t v223 = (uint64_t *)(*(void *)(v219 + 24) + 16 * (v218 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v223 = (uint64_t *)(*(void *)(v219 + 272) + 8 * v218);
          }
          uint64_t v224 = *v223;
          if (*v223)
          {
            while ((*(_DWORD *)v224 & 0x81000000) != 0)
            {
              uint64_t v224 = *(void *)(v224 + 24);
              if (!v224) {
                goto LABEL_365;
              }
            }
            uint64_t v225 = *(void *)(v224 + 8);
            if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v495 + 272) + 16))(*(void *)(v495 + 272), v225))
            {
              uint64_t v4 = v495;
              goto LABEL_578;
            }
            if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v495 + 272) + 24))(*(void *)(v495 + 272), v225))
            {
              uint64_t v4 = v495;
              int v163 = v494;
              goto LABEL_739;
            }
            int v226 = **(unsigned __int16 **)(v225 + 16);
            BOOL v227 = v226 == 69 || v226 == 0;
            if (v227 || *(void **)(v225 + 24) != v164)
            {
              llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(v495 + 248));
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
            }
            goto LABEL_738;
          }
        }
      }
LABEL_365:
      unint64_t v228 = v506;
      if ((v213 & 4) != 0)
      {
        do
          unint64_t v228 = *(void *)v228 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v228 + 44) & 4) != 0);
      }
      uint64_t v229 = v506;
      if ((v213 & 8) != 0)
      {
        do
          uint64_t v229 = *(void *)(v229 + 8);
        while ((*(_WORD *)(v229 + 44) & 8) != 0);
      }
      unint64_t v230 = *(void *)(v229 + 8);
      if (v228 != v230)
      {
        while (1)
        {
          unsigned int v231 = **(unsigned __int16 **)(v228 + 16);
          BOOL v232 = v231 > 0x17;
          int v233 = (1 << v231) & 0x83E000;
          if (v232 || v233 == 0) {
            break;
          }
          unint64_t v228 = *(void *)(v228 + 8);
          if (v228 == v230)
          {
            unint64_t v228 = v230;
            break;
          }
        }
      }
      uint64_t v235 = *(void *)(*(void *)(v495 + 280) + 288);
      uint64_t v236 = *(void *)(v235 + 368);
      uint64_t v237 = *(unsigned int *)(v235 + 384);
      if (v237)
      {
        LODWORD(v238) = ((v228 >> 4) ^ (v228 >> 9)) & (v237 - 1);
        uint64_t v239 = (uint64_t *)(v236 + 16 * v238);
        uint64_t v240 = *v239;
        if (v228 == *v239) {
          goto LABEL_381;
        }
        int v241 = 1;
        while (v240 != -4096)
        {
          int v242 = v238 + v241++;
          uint64_t v238 = v242 & (v237 - 1);
          uint64_t v240 = *(void *)(v236 + 16 * v238);
          if (v228 == v240)
          {
            uint64_t v239 = (uint64_t *)(v236 + 16 * v238);
            goto LABEL_381;
          }
        }
      }
      uint64_t v239 = (uint64_t *)(v236 + 16 * v237);
LABEL_381:
      uint64_t v243 = v239[1];
      if ((char *)v530 + 48 != (char *)v197)
      {
        __int16 v244 = *((_WORD *)v197 + 22);
        unint64_t v245 = (unint64_t)v197;
        if ((v244 & 4) != 0)
        {
          do
            unint64_t v245 = *(void *)v245 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v245 + 44) & 4) != 0);
        }
        uint64_t v246 = v197;
        if ((v244 & 8) != 0)
        {
          do
            uint64_t v246 = (unint64_t *)v246[1];
          while ((*((_WORD *)v246 + 22) & 8) != 0);
        }
        unint64_t v247 = v246[1];
        if (v245 != v247)
        {
          while (1)
          {
            unsigned int v248 = **(unsigned __int16 **)(v245 + 16);
            BOOL v232 = v248 > 0x17;
            int v249 = (1 << v248) & 0x83E000;
            if (v232 || v249 == 0) {
              break;
            }
            unint64_t v245 = *(void *)(v245 + 8);
            if (v245 == v247)
            {
              unint64_t v245 = v247;
              break;
            }
          }
        }
        if (v237)
        {
          LODWORD(v251) = ((v245 >> 4) ^ (v245 >> 9)) & (v237 - 1);
          int v252 = (uint64_t *)(v236 + 16 * v251);
          uint64_t v253 = *v252;
          if (v245 != *v252)
          {
            int v254 = 1;
            while (v253 != -4096)
            {
              int v255 = v251 + v254++;
              uint64_t v251 = v255 & (v237 - 1);
              uint64_t v253 = *(void *)(v236 + 16 * v251);
              if (v245 == v253)
              {
                int v252 = (uint64_t *)(v236 + 16 * v251);
                goto LABEL_399;
              }
            }
            goto LABEL_398;
          }
        }
        else
        {
LABEL_398:
          int v252 = (uint64_t *)(v236 + 16 * v237);
        }
LABEL_399:
        uint64_t v256 = v252 + 1;
        goto LABEL_400;
      }
      uint64_t v256 = (void *)(*(void *)(v235 + 392) + 16 * *((unsigned int *)v530 + 6) + 8);
LABEL_400:
      uint64_t v257 = *(unsigned int *)(v506 + 40);
      if (v257)
      {
        uint64_t v258 = 0;
        unint64_t v498 = v243 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v500 = *v256 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          uint64_t v259 = *(void *)(v222 + 32);
          int v260 = *(_DWORD *)(v259 + 32 * v258);
          if ((_BYTE)v260) {
            goto LABEL_403;
          }
          unsigned int v261 = *(_DWORD *)(v259 + 32 * v258 + 4);
          if (!v261) {
            goto LABEL_403;
          }
          BOOL v262 = (v260 & 0x30000000) != 0 || (v260 & 0x10FFF00) == 0x1000000;
          BOOL v263 = v262;
          if ((v260 & 0x1000000) == 0 && v263) {
            goto LABEL_403;
          }
          if (!(v261 >> 30)) {
            goto LABEL_738;
          }
          uint64_t v264 = *(void *)(v495 + 280);
          unsigned int v265 = (void *)(v264 + 408);
          unint64_t v266 = *(unsigned int *)(v264 + 416);
          BOOL v281 = (v261 & 0x7FFFFFFF) >= v266;
          unint64_t v267 = (v261 & 0x7FFFFFFF) - v266;
          if (v281)
          {
            sub_1CB9153B8((uint64_t)v265, v267 + 1, *(void *)(v264 + 424));
LABEL_452:
            operator new();
          }
          uint64_t v268 = *(void *)(*v265 + 8 * (v261 & 0x7FFFFFFF));
          if (!v268) {
            goto LABEL_452;
          }
          int RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v506, v261, 0, 0, 0);
          unint64_t v270 = *(unsigned int *)(v268 + 8);
          __int16 v271 = *(unsigned char **)v268;
          if (!v270) {
            break;
          }
          if (RegisterDefOperandIdx == -1) {
            int v273 = 1;
          }
          else {
            int v273 = 2;
          }
          unsigned int v274 = *(_DWORD *)(v498 + 24) | v273;
          uint64_t v272 = *(void *)&v271[24 * v270 - 16];
          unsigned int v275 = (v272 >> 1) & 3 | *(_DWORD *)((v272 & 0xFFFFFFFFFFFFFFF8) + 24);
          unsigned int v276 = *(_DWORD *)(v268 + 8);
          int v277 = *(unsigned char **)v268;
          unint64_t v278 = v276;
          if (v274 >= v275) {
            goto LABEL_430;
          }
          do
          {
            unint64_t v279 = v278 >> 1;
            uint64_t v280 = *(void *)&v277[24 * (v278 >> 1) + 8];
            LODWORD(v280) = (v280 >> 1) & 3 | *(_DWORD *)((v280 & 0xFFFFFFFFFFFFFFF8) + 24);
            v278 -= (v278 >> 1) + 1;
            BOOL v281 = v274 >= v280;
            if (v274 >= v280) {
              unint64_t v282 = v279 + 1;
            }
            else {
              unint64_t v282 = 0;
            }
            v277 += 24 * v282;
            if (!v281) {
              unint64_t v278 = v279;
            }
          }
          while (v278);
LABEL_431:
          uint64_t v222 = v506;
          if (!v270)
          {
            int v286 = 0;
LABEL_441:
            unint64_t v287 = &v271[24 * v286];
            goto LABEL_442;
          }
          uint64_t v283 = *(void *)&v271[24 * v270 - 16];
          unsigned int v284 = *(_DWORD *)(v500 + 24) | 1;
          unsigned int v285 = (v283 >> 1) & 3 | *(_DWORD *)((v283 & 0xFFFFFFFFFFFFFFF8) + 24);
          int v286 = v270;
          unint64_t v287 = v271;
          unint64_t v288 = v270;
          if (v284 >= v285) {
            goto LABEL_441;
          }
          do
          {
            unint64_t v289 = v288 >> 1;
            uint64_t v290 = *(void *)&v287[24 * (v288 >> 1) + 8];
            LODWORD(v290) = (v290 >> 1) & 3 | *(_DWORD *)((v290 & 0xFFFFFFFFFFFFFFF8) + 24);
            v288 -= (v288 >> 1) + 1;
            BOOL v291 = v284 >= v290;
            if (v284 >= v290) {
              unint64_t v292 = v289 + 1;
            }
            else {
              unint64_t v292 = 0;
            }
            v287 += 24 * v292;
            if (!v291) {
              unint64_t v288 = v289;
            }
          }
          while (v288);
LABEL_442:
          if (v277 != v287)
          {
            unsigned int v293 = v277 + 24;
            int v294 = &v271[24 * v270];
            if (v287 == v294)
            {
              if (v293 != v294) {
                goto LABEL_738;
              }
            }
            else if ((*v287 & 6) != 0 || v293 != v287)
            {
              goto LABEL_738;
            }
          }
LABEL_403:
          if (++v258 == v257) {
            goto LABEL_453;
          }
        }
        unsigned int v276 = 0;
LABEL_430:
        int v277 = &v271[24 * v276];
        goto LABEL_431;
      }
LABEL_453:
      uint64_t v4 = v495;
      if (!*(unsigned char *)(v495 + 584))
      {
        uint64_t v319 = v530;
        unint64_t v202 = v503;
        goto LABEL_580;
      }
      int v508 = 0;
      uint64_t v507 = 0;
      sub_1CC7863F8(&__src, v513, &v507);
      uint64_t v296 = *(void *)(v222 + 32);
      uint64_t v297 = *(void *)(v222 + 16);
      unsigned int v298 = *(unsigned __int8 *)(v297 + 4);
      uint64_t v299 = *(unsigned int *)(v222 + 40);
      unint64_t v202 = v503;
      if ((*(unsigned char *)(v297 + 8) & 2) != 0 && v299 != v298)
      {
        unsigned int v300 = *(unsigned __int8 *)(v297 + 4);
        do
        {
          int v451 = *(_DWORD *)(v296 + 32 * v298);
          if ((v451 & 0x10000FF) != 0x1000000) {
            break;
          }
          v300 += (v451 & 0x2000000) == 0;
          if (v299 - 1 == v298) {
            break;
          }
          ++v298;
        }
        while ((v451 & 0x2000000) == 0);
      }
      else
      {
        unsigned int v300 = *(unsigned __int8 *)(v297 + 4);
      }
      if (v300 != v299)
      {
        v499 = (int *)(v296 + 32 * v299);
        unint64_t v320 = (int *)(v296 + 32 * v300);
        while (1)
        {
          int v321 = *v320;
          if (!*v320)
          {
            int v322 = v320[1];
            BOOL v323 = (v321 & 0x10FFF00) != 0x1000000 && (v321 & 0x30000000) == 0;
            if (v323 && v322 != 0)
            {
              uint64_t v325 = v322 & 0x7FFFFFFF;
              unint64_t v501 = *(void *)(*(void *)(v509.n128_u64[1] + 24) + 16 * v325) & 0xFFFFFFFFFFFFFFF8;
              if (*(unsigned char *)(*(void *)v501 + 31))
              {
                __int16 v326 = (void *)(v510 + 408);
                uint64_t v327 = *(unsigned int *)(v510 + 416);
                if (v325 >= v327)
                {
                  sub_1CB9153B8((uint64_t)v326, v325 - v327 + 1, *(void *)(v510 + 424));
LABEL_518:
                  operator new();
                }
                uint64_t v328 = *(void *)(*v326 + 8 * v325);
                if (!v328) {
                  goto LABEL_518;
                }
                if (*(float *)(v328 + 116) != INFINITY)
                {
                  unsigned int v329 = (unsigned int *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v509.n128_u64[0] + 320))(v509.n128_u64[0], v501);
                  unsigned int v330 = *v329;
                  if (*v329 != -1) {
                    break;
                  }
                }
              }
            }
          }
LABEL_515:
          v320 += 8;
          if (v320 == v499) {
            goto LABEL_458;
          }
        }
        unsigned int v331 = v329;
        while (2)
        {
          if (v523)
          {
            for (n = v522; n; n = (void *)*n)
            {
              unsigned int v333 = *((_DWORD *)n + 7);
              if (v330 >= v333)
              {
                if (v333 >= v330) {
                  goto LABEL_514;
                }
                ++n;
              }
            }
            goto LABEL_508;
          }
          if (!v519) {
            goto LABEL_508;
          }
          uint64_t v334 = v518;
          uint64_t v335 = 4 * v519;
          while (*v334 != v330)
          {
            ++v334;
            v335 -= 4;
            if (!v335) {
              goto LABEL_508;
            }
          }
          if (!v335)
          {
LABEL_508:
            unsigned int v336 = v330;
            int v337 = __src;
            uint64_t v338 = (char *)__src + 12 * (int)v330;
            uint64_t v339 = 3 * (int)v330;
            int v340 = *(_DWORD *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v509.n128_u64[0]
                                                                                            + 280))(v509.n128_u64[0], v501);
            ++v337[v339];
            int v342 = *((_DWORD *)v338 + 1);
            uint64_t v341 = v338 + 4;
            BOOL v343 = v342 == v340;
            if (v342 < v340)
            {
              int v344 = 0;
              *uint64_t v341 = v340;
              unint64_t v202 = v503;
              goto LABEL_513;
            }
            unint64_t v202 = v503;
            if (v343)
            {
              int v344 = v337[3 * v336 + 2];
LABEL_513:
              v337[3 * v336 + 2] = v344 + 1;
            }
          }
LABEL_514:
          unsigned int v345 = v331[1];
          ++v331;
          unsigned int v330 = v345;
          uint64_t v4 = v495;
          if (v345 == -1) {
            goto LABEL_515;
          }
          continue;
        }
      }
LABEL_458:
      uint64_t v301 = v516;
      if (v516)
      {
        uint64_t v302 = 0;
        uint64_t v304 = v522;
        uint64_t v303 = v523;
        int v305 = v519;
        uint64_t v306 = __src;
        unsigned int v307 = v518;
        uint64_t v308 = v515;
        uint64_t v309 = 4 * v519;
        do
        {
          if (v303)
          {
            for (iuint64_t i = v304; ii; iuint64_t i = (void *)*ii)
            {
              unsigned int v311 = *((_DWORD *)ii + 7);
              if (v311 <= v302)
              {
                if (v311 >= v302) {
                  goto LABEL_475;
                }
                ++ii;
              }
            }
          }
          else if (v305)
          {
            uint64_t v312 = v309;
            uint64_t v313 = v307;
            while (*v313 != v302)
            {
              ++v313;
              v312 -= 4;
              if (!v312) {
                goto LABEL_473;
              }
            }
            if (v312) {
              goto LABEL_475;
            }
          }
LABEL_473:
          int v314 = v308[3 * v302 + 1];
          uint64_t v315 = (char *)&v306[3 * v302];
          int v317 = *((_DWORD *)v315 + 1);
          int v316 = v315 + 4;
          if (v317 < v314)
          {
            _DWORD *v316 = v314;
            v306[3 * v302 + 2] = 0;
          }
LABEL_475:
          ++v302;
        }
        while (v302 != v301);
      }
      v533 = (char *)&v535;
      uint64_t v534 = 0x400000000;
      int v318 = (int)v525;
      if (v525)
      {
        if (v525 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(&v535, __src, 12 * v525);
      }
      LODWORD(v534) = v318;
      if (__src != &v526) {
        free(__src);
      }
      uint64_t v346 = v513;
      unsigned int v347 = (uint64_t *)v533;
      if (!v513)
      {
LABEL_571:
        BOOL v355 = 0;
        int v383 = 0;
        goto LABEL_573;
      }
      uint64_t v348 = 0;
      int v350 = v522;
      uint64_t v349 = v523;
      unint64_t v351 = v518;
      int v352 = v519;
      uint64_t v353 = v515;
      uint64_t v354 = 4 * v519;
      BOOL v355 = 1;
      while (1)
      {
        if (v523)
        {
          for (juint64_t j = v522; jj; juint64_t j = (void *)*jj)
          {
            unsigned int v357 = *((_DWORD *)jj + 7);
            if (v357 <= v348)
            {
              if (v357 >= v348) {
                goto LABEL_550;
              }
              ++jj;
            }
          }
        }
        else if (v519)
        {
          uint64_t v358 = 4 * v519;
          int v359 = v518;
          while (*v359 != v348)
          {
            ++v359;
            v358 -= 4;
            if (!v358) {
              goto LABEL_537;
            }
          }
          if (v358) {
            goto LABEL_550;
          }
        }
LABEL_537:
        uint64_t v360 = (char *)v515 + 12 * v348;
        int v362 = v360[1];
        int v361 = v360[2];
        uint64_t v363 = &v533[12 * v348];
        int v364 = *((_DWORD *)v363 + 1);
        if (v362 < v364) {
          int v361 = 0;
        }
        if (v362 <= v364) {
          int v365 = *((_DWORD *)v363 + 1);
        }
        else {
          int v365 = v360[1];
        }
        if (v364 >= v362) {
          v361 += *(_DWORD *)&v533[12 * v348 + 8];
        }
        int v366 = *(_DWORD *)v363 + *v360;
        if (v365 <= 1) {
          int v367 = 1;
        }
        else {
          int v367 = v365;
        }
        int v368 = v367 - 1;
        if (v361 <= 1) {
          int v361 = 1;
        }
        if (v365 * v366 + (v361 - 1) * v368 > *((_DWORD *)v512 + v348)) {
          break;
        }
LABEL_550:
        BOOL v355 = ++v348 < (unint64_t)v513;
        if (v348 == v513)
        {
          uint64_t v369 = 0;
          while (1)
          {
            if (v349)
            {
              for (kuint64_t k = v350; kk; kuint64_t k = (void *)*kk)
              {
                unsigned int v371 = *((_DWORD *)kk + 7);
                if (v371 <= v369)
                {
                  if (v371 >= v369) {
                    goto LABEL_570;
                  }
                  ++kk;
                }
              }
            }
            else if (v352)
            {
              uint64_t v372 = v354;
              int v373 = v351;
              while (*v373 != v369)
              {
                ++v373;
                v372 -= 4;
                if (!v372) {
                  goto LABEL_565;
                }
              }
              if (v372) {
                goto LABEL_570;
              }
            }
LABEL_565:
            int v374 = (_DWORD *)v347 + 3 * v369;
            v353[3 * v369] += *v374;
            unint64_t v375 = (char *)&v353[3 * v369];
            int v378 = v374[1];
            int v377 = v374 + 1;
            int v376 = v378;
            int v381 = *((_DWORD *)v375 + 1);
            uint64_t v379 = v375 + 4;
            int v380 = v381;
            if (v381 >= v376)
            {
              int v382 = v376;
              int v376 = v380;
            }
            else
            {
              *uint64_t v379 = v376;
              v353[3 * v369 + 2] = 0;
              int v382 = *v377;
            }
            if (v376 == v382) {
              v353[3 * v369 + 2] += *((_DWORD *)v347 + 3 * v369 + 2);
            }
LABEL_570:
            if (++v369 == v346) {
              goto LABEL_571;
            }
          }
        }
      }
      int v383 = 5;
LABEL_573:
      if (v347 != &v535) {
        free(v347);
      }
      if (v355)
      {
        if (v383 != 5)
        {
          int v163 = v494;
          int v201 = v504;
          continue;
        }
LABEL_578:
        int v163 = v494;
LABEL_740:
        int v201 = v504;
        continue;
      }
      uint64_t v319 = v530;
      uint64_t v222 = v506;
      if (v506)
      {
LABEL_580:
        uint64_t v384 = v222;
        if ((*(unsigned char *)v222 & 4) == 0) {
          goto LABEL_581;
        }
      }
      else
      {
LABEL_581:
        if ((*(_WORD *)(v222 + 44) & 8) != 0)
        {
          uint64_t v384 = v222;
          do
            uint64_t v384 = *(void *)(v384 + 8);
          while ((*(_WORD *)(v384 + 44) & 8) != 0);
        }
        else
        {
          uint64_t v384 = v222;
        }
      }
      unsigned int v385 = *(unint64_t **)(v384 + 8);
      if ((unint64_t *)v222 != v385 && v197 != v385)
      {
        if (v319 != v164)
        {
          unint64_t v452 = v319[5];
          unsigned int v453 = (unint64_t *)v222;
          do
          {
            v453[3] = v452;
            unsigned int v453 = (unint64_t *)v453[1];
          }
          while (v453 != v385);
        }
        unint64_t v387 = *v385;
        unint64_t v388 = *v385 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v389 = *(void *)v222 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v389 + 8) = v385;
        *unsigned int v385 = v389 | v387 & 7;
        unint64_t v390 = *v197 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v388 + 8) = v197;
        *(void *)uint64_t v222 = v390 | *(void *)v222 & 7;
        *(void *)(v390 + 8) = v222;
        *int v197 = v387 & 0xFFFFFFFFFFFFFFF8 | *v197 & 7;
      }
      unint64_t v391 = v319 + 6;
      int v197 = (unint64_t *)v319[7];
      int v163 = v494;
      if (v197 != v319 + 6)
      {
        while (1)
        {
          int v392 = *(unsigned __int16 *)v197[2];
          if ((v392 - 13) >= 5 && v392 != 23) {
            break;
          }
          if ((*(unsigned char *)v197 & 4) == 0)
          {
            while ((*((_WORD *)v197 + 22) & 8) != 0)
              int v197 = (unint64_t *)v197[1];
          }
          int v197 = (unint64_t *)v197[1];
          if (v197 == v391)
          {
            int v197 = v391;
            break;
          }
        }
      }
      uint64_t v394 = *(int32x2_t **)(*(void *)(v4 + 280) + 288);
      int32x2_t v395 = v394[46];
      uint64_t v396 = v394[48].u32[0];
      if (v396)
      {
        LODWORD(v397) = (v396 - 1) & ((v222 >> 4) ^ (v222 >> 9));
        int v398 = (uint64_t *)(*(void *)&v395 + 16 * v397);
        uint64_t v399 = *v398;
        if (*v398 != v222)
        {
          int v400 = 1;
          while (v399 != -4096)
          {
            int v401 = v397 + v400++;
            uint64_t v397 = v401 & (v396 - 1);
            uint64_t v399 = *(void *)(*(void *)&v395 + 16 * v397);
            if (v399 == v222)
            {
              int v398 = (uint64_t *)(*(void *)&v395 + 16 * v397);
              goto LABEL_609;
            }
          }
          goto LABEL_608;
        }
      }
      else
      {
LABEL_608:
        int v398 = (uint64_t *)(*(void *)&v395 + 16 * v396);
      }
LABEL_609:
      if (v398 != (uint64_t *)(*(void *)&v395 + 16 * v396))
      {
        unint64_t v402 = v398[1] & 0xFFFFFFFFFFFFFFF8;
        *int v398 = -8192;
        v394[47] = vadd_s32(v394[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v402 + 16) = 0;
        uint64_t v394 = *(int32x2_t **)(*(void *)(v4 + 280) + 288);
      }
      sub_1CB914C88((uint64_t)v394, v222, 0);
      uint64_t v403 = *(unsigned int *)(v222 + 40);
      if (!v403)
      {
        int v201 = 1;
        continue;
      }
      uint64_t v404 = 0;
      while (2)
      {
        unsigned int v405 = (int *)(*(void *)(v222 + 32) + 32 * v404);
        int v406 = *v405;
        if (*v405) {
          goto LABEL_614;
        }
        int v407 = v405[1];
        if (!v407) {
          goto LABEL_614;
        }
        BOOL v408 = (v406 & 0xFFF00) != 0;
        if ((v406 & 0x1000000) == 0) {
          BOOL v408 = 1;
        }
        BOOL v409 = (v406 & 0x30000000) == 0 && v408;
        uint64_t v410 = *(void *)(v495 + 624);
        uint64_t v411 = *(unsigned int *)(v495 + 640);
        if (!v411) {
          goto LABEL_628;
        }
        uint64_t v412 = (v411 - 1) & (37 * v407);
        int v413 = *(_DWORD *)(v410 + 8 * v412);
        if (v413 == v407)
        {
          if (v411 == v412) {
            goto LABEL_633;
          }
LABEL_643:
          *(unsigned char *)(v410 + 8 * v412 + 4) |= v409;
          goto LABEL_653;
        }
        int v414 = 1;
        while (v413 != -1)
        {
          int v415 = v412 + v414++;
          uint64_t v412 = v415 & (v411 - 1);
          int v413 = *(_DWORD *)(v410 + 8 * v412);
          if (v413 == v407) {
            goto LABEL_629;
          }
        }
LABEL_628:
        uint64_t v412 = *(unsigned int *)(v495 + 640);
LABEL_629:
        if (v412 != v411) {
          goto LABEL_643;
        }
        if (!v411)
        {
          uint64_t v416 = 0;
          goto LABEL_646;
        }
LABEL_633:
        int v417 = v411 - 1;
        unsigned int v418 = (v411 - 1) & (37 * v407);
        uint64_t v416 = (int *)(v410 + 8 * v418);
        int v419 = *v416;
        if (v407 != *v416)
        {
          v420 = 0;
          int v421 = 1;
          while (v419 != -1)
          {
            if (v420) {
              BOOL v422 = 0;
            }
            else {
              BOOL v422 = v419 == -2;
            }
            if (v422) {
              v420 = v416;
            }
            unsigned int v423 = v418 + v421++;
            unsigned int v418 = v423 & v417;
            uint64_t v416 = (int *)(v410 + 8 * (v423 & v417));
            int v419 = *v416;
            if (v407 == *v416) {
              goto LABEL_652;
            }
          }
          if (v420) {
            uint64_t v416 = v420;
          }
LABEL_646:
          int v424 = *(_DWORD *)(v495 + 632);
          if (4 * v424 + 4 >= (3 * v411))
          {
            uint64_t v432 = v403;
            sub_1CC78649C((uint64_t)v492, 2 * v411);
            uint64_t v433 = *(void *)(v495 + 624);
            int v434 = *(_DWORD *)(v495 + 640) - 1;
            unsigned int v435 = v434 & (37 * v407);
            uint64_t v416 = (int *)(v433 + 8 * v435);
            int v436 = *v416;
            if (v407 == *v416) {
              goto LABEL_673;
            }
            int v437 = 0;
            int v438 = 1;
            while (v436 != -1)
            {
              if (v437) {
                BOOL v439 = 0;
              }
              else {
                BOOL v439 = v436 == -2;
              }
              if (v439) {
                int v437 = v416;
              }
              unsigned int v440 = v435 + v438++;
              unsigned int v435 = v440 & v434;
              uint64_t v416 = (int *)(v433 + 8 * (v440 & v434));
              int v436 = *v416;
              if (v407 == *v416) {
                goto LABEL_673;
              }
            }
          }
          else
          {
            if ((int)v411 + ~v424 - *(_DWORD *)(v495 + 636) > v411 >> 3) {
              goto LABEL_648;
            }
            uint64_t v432 = v403;
            sub_1CC78649C((uint64_t)v492, v411);
            uint64_t v441 = *(void *)(v495 + 624);
            int v442 = *(_DWORD *)(v495 + 640) - 1;
            unsigned int v443 = v442 & (37 * v407);
            uint64_t v416 = (int *)(v441 + 8 * v443);
            int v444 = *v416;
            if (v407 == *v416)
            {
LABEL_673:
              int v425 = v407;
              int v163 = v494;
              uint64_t v403 = v432;
              goto LABEL_649;
            }
            int v437 = 0;
            int v445 = 1;
            while (v444 != -1)
            {
              if (v437) {
                BOOL v446 = 0;
              }
              else {
                BOOL v446 = v444 == -2;
              }
              if (v446) {
                int v437 = v416;
              }
              unsigned int v447 = v443 + v445++;
              unsigned int v443 = v447 & v442;
              uint64_t v416 = (int *)(v441 + 8 * (v447 & v442));
              int v444 = *v416;
              if (v407 == *v416) {
                goto LABEL_673;
              }
            }
          }
          if (v437) {
            uint64_t v416 = v437;
          }
          uint64_t v403 = v432;
LABEL_648:
          int v425 = *v416;
          int v163 = v494;
LABEL_649:
          ++*(_DWORD *)(v495 + 632);
          if (v425 != -1) {
            --*(_DWORD *)(v495 + 636);
          }
          *uint64_t v416 = v407;
          *((unsigned char *)v416 + 4) = 0;
        }
LABEL_652:
        *((unsigned char *)v416 + 4) = v409;
LABEL_653:
        int v426 = *v405;
        if ((*v405 & 0x30000000) == 0 && (v426 & 0x10FFF00) != 0x1000000)
        {
          if ((v426 & 0x1000000) != 0)
          {
            sub_1CD63B130(v492, v407);
            sub_1CC786084(v495, v407);
          }
          uint64_t v427 = *(void *)(v495 + 280);
          uint64_t v428 = v407 & 0x7FFFFFFF;
          char v429 = (void *)(v427 + 408);
          uint64_t v430 = *(unsigned int *)(v427 + 416);
          if ((v407 & 0x7FFFFFFFu) >= v430)
          {
            sub_1CB9153B8((uint64_t)v429, v428 - v430 + 1, *(void *)(v427 + 424));
LABEL_671:
            operator new();
          }
          uint64_t v431 = *(void *)(*v429 + 8 * v428);
          if (!v431) {
            goto LABEL_671;
          }
          *(_DWORD *)(v431 + 116) = 2139095040;
          int v163 = v494;
        }
LABEL_614:
        ++v404;
        uint64_t v222 = v506;
        if (v404 != v403) {
          continue;
        }
        break;
      }
      uint64_t v448 = *(unsigned int *)(v506 + 40);
      if (v448)
      {
        uint64_t v449 = 32 * v448;
        uint64_t v450 = (unsigned int *)(*(void *)(v506 + 32) + 4);
        uint64_t v4 = v495;
        unint64_t v202 = v503;
        do
        {
          if ((*(v450 - 1) & 0x10000FF) == 0) {
            sub_1CBF7C6A8(v496, *v450);
          }
          v450 += 8;
          int v201 = 1;
          v449 -= 32;
        }
        while (v449);
        int v163 = v494;
      }
      else
      {
        int v201 = 1;
        uint64_t v4 = v495;
        unint64_t v202 = v503;
      }
    }
    while (v506 != v202);
LABEL_301:
    v165 |= v201;
    int v164 = (void *)v164[1];
  }
  while (v164 != v163);
  if ((v165 & 1) == 0) {
    goto LABEL_785;
  }
  uint64_t v459 = *(void *)(v4 + 312);
  v525 = v496;
  uint64_t v526 = v459;
  unint64_t v528 = 0;
  unint64_t v527 = 0xFFFFFFFF00000000;
  LOBYTE(__src) = 0;
  sub_1CC30D2C4((uint64_t)&__src);
  uint64_t v460 = *(void *)(v4 + 312);
  uint64_t v534 = (uint64_t)v496;
  uint64_t v535 = v460;
  uint64_t v537 = 0;
  unint64_t v536 = 0xFFFFFFFF00000000;
  LOBYTE(v533) = 1;
  sub_1CC30D2C4((uint64_t)&v533);
  int v461 = __src;
  int v462 = v533;
  BOOL v463 = v492;
  if (!(_BYTE)__src || !(_BYTE)v533)
  {
    do
    {
      int v468 = v527;
      if (v461 == v462 && v536 == v527) {
        break;
      }
      uint64_t v464 = *(void *)(v4 + 296);
      if ((v527 & 0x80000000) != 0) {
        unsigned int v465 = (unsigned int **)(*(void *)(v464 + 24) + 16 * (v527 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v465 = (unsigned int **)(*(void *)(v464 + 272) + 8 * v527);
      }
      uint64_t v466 = *v465;
      if (v466)
      {
        while (1)
        {
          unsigned int v467 = *v466;
          if ((*v466 & 0x1000000) == 0) {
            break;
          }
          uint64_t v466 = (unsigned int *)*((void *)v466 + 3);
          if (!v466) {
            goto LABEL_768;
          }
        }
LABEL_763:
        *uint64_t v466 = v467 & 0xFBFFFFFF;
        while (1)
        {
          uint64_t v466 = (unsigned int *)*((void *)v466 + 3);
          if (!v466) {
            break;
          }
          unsigned int v467 = *v466;
          if ((*v466 & 0x1000000) == 0) {
            goto LABEL_763;
          }
        }
        int v468 = v527;
      }
LABEL_768:
      LODWORD(v527) = v468 + 1;
      v528 >>= 1;
      sub_1CC30D348((uint64_t)&__src);
      int v461 = __src;
      int v462 = v533;
    }
    while (!(_BYTE)__src || v533 == 0);
  }
  if (*(void *)(v4 + 320))
  {
    uint64_t v471 = *(void *)(v4 + 304);
    int v470 = *(uint64_t **)(v4 + 312);
    uint64_t v472 = *v470;
    *(void *)(v472 + 8) = *(void *)(v471 + 8);
    **(void **)(v471 + 8) = v472;
    *(void *)(v4 + 320) = 0;
    if (v470 != v496)
    {
      do
      {
        uint64_t v473 = (uint64_t *)v470[1];
        operator delete(v470);
        int v470 = v473;
      }
      while (v473 != v496);
    }
  }
  int v474 = *(_DWORD *)(v4 + 632);
  uint64_t v475 = *(void *)(v4 + 624);
  uint64_t v476 = *(unsigned int *)(v4 + 640);
  if (v474)
  {
    if (v476)
    {
      uint64_t v477 = 8 * v476;
      uint64_t v478 = *(int **)(v4 + 624);
      while (*v478 >= 0xFFFFFFFE)
      {
        v478 += 2;
        v477 -= 8;
        if (!v477) {
          goto LABEL_784;
        }
      }
    }
    else
    {
      uint64_t v478 = *(int **)(v4 + 624);
    }
  }
  else
  {
LABEL_784:
    uint64_t v478 = (int *)(v475 + 8 * v476);
  }
  if (v478 != (int *)(v475 + 8 * v476)) {
    sub_1CC786084(v4, *v478);
  }
  if (!v474)
  {
    if (!*(_DWORD *)(v4 + 636)) {
      goto LABEL_809;
    }
    unsigned int v479 = *(_DWORD *)(v495 + 640);
    if (v479 > 0x40)
    {
      int v481 = 0;
      uint64_t v4 = v495;
      BOOL v463 = v492;
      goto LABEL_795;
    }
    uint64_t v4 = v495;
    BOOL v463 = v492;
LABEL_805:
    if (v479)
    {
      unint64_t v487 = (_DWORD *)*v463;
      uint64_t v488 = 8 * v479;
      do
      {
        *unint64_t v487 = -1;
        v487 += 2;
        v488 -= 8;
      }
      while (v488);
    }
    *(void *)(v4 + 632) = 0;
    goto LABEL_809;
  }
  unsigned int v479 = *(_DWORD *)(v4 + 640);
  if (v479 <= 4 * v474 || v479 < 0x41) {
    goto LABEL_805;
  }
  int v480 = 1 << (33 - __clz(v474 - 1));
  if (v480 <= 64) {
    int v481 = 64;
  }
  else {
    int v481 = v480;
  }
LABEL_795:
  if (v481 != v479)
  {
    ((void (*)(void, void))MEMORY[0x1D25D9CD0])(*v463, 4);
    if (!v481)
    {
      *BOOL v463 = 0;
      v463[1] = 0;
      uint64_t v2 = 1;
      v463[2].i32[0] = 0;
      goto LABEL_810;
    }
    unint64_t v482 = (4 * v481 / 3u + 1) | ((unint64_t)(4 * v481 / 3u + 1) >> 1);
    unint64_t v483 = v482 | (v482 >> 2) | ((v482 | (v482 >> 2)) >> 4);
    LODWORD(v483) = (((v483 | (v483 >> 8)) >> 16) | v483 | (v483 >> 8)) + 1;
    *(_DWORD *)(v4 + 640) = v483;
    int v484 = operator new(8 * v483, (std::align_val_t)4uLL);
    *(void *)(v4 + 624) = v484;
    *(void *)(v4 + 632) = 0;
    uint64_t v485 = *(unsigned int *)(v4 + 640);
    if (v485)
    {
      uint64_t v486 = 8 * v485;
      do
      {
        _DWORD *v484 = -1;
        v484 += 2;
        v486 -= 8;
      }
      while (v486);
      uint64_t v2 = 1;
      goto LABEL_810;
    }
LABEL_809:
    uint64_t v2 = 1;
    goto LABEL_810;
  }
  *(void *)(v4 + 632) = 0;
  unsigned int v490 = *(_DWORD **)(v4 + 624);
  uint64_t v491 = 8 * v479;
  uint64_t v2 = 1;
  do
  {
    *unsigned int v490 = -1;
    v490 += 2;
    v491 -= 8;
  }
  while (v491);
LABEL_810:
  sub_1CB833A08((uint64_t)&v521, v522);
  if (v518 != v520) {
    free(v518);
  }
  if (v515 != v517) {
    free(v515);
  }
  if (v512 != v514) {
    free(v512);
  }
  return v2;
}

void sub_1CC786084(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 280);
  unint64_t v4 = a2 & 0x7FFFFFFF;
  uint64_t v5 = *(void *)(v3 + 408);
  uint64_t v6 = *(void *)(v5 + 8 * v4);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 104);
    if (v7)
    {
      do
      {
        uint64_t v16 = *(void *)(v7 + 96);
        uint64_t v17 = *(void *)(v7 + 104);
        *(void *)(v7 + 96) = 0;
        if (v16)
        {
          uint64_t v19 = v7;
          uint64_t v14 = v16;
          sub_1CB833A08(v16, *(void **)(v16 + 8));
          uint64_t v15 = v14;
          uint64_t v7 = v19;
          MEMORY[0x1D25D9CE0](v15, 0x1020C4062D53EE8);
        }
        uint64_t v18 = *(void **)(v7 + 64);
        if (v18 != (void *)(v7 + 80)) {
          free(v18);
        }
        if (*(void *)v7 != v7 + 16) {
          free(*(void **)v7);
        }
        uint64_t v7 = v17;
      }
      while (v17);
    }
    uint64_t v8 = *(void *)(v6 + 96);
    *(void *)(v6 + 96) = 0;
    *(void *)(v6 + 104) = 0;
    if (v8)
    {
      sub_1CB833A08(v8, *(void **)(v8 + 8));
      MEMORY[0x1D25D9CE0](v8, 0x1020C4062D53EE8);
    }
    int v9 = *(void **)(v6 + 64);
    if (v9 != (void *)(v6 + 80)) {
      free(v9);
    }
    if (*(void *)v6 != v6 + 16) {
      free(*(void **)v6);
    }
    MEMORY[0x1D25D9CE0](v6, 0x10A0C408DA535C6);
    uint64_t v5 = *(void *)(v3 + 408);
  }
  *(void *)(v5 + 8 * v4) = 0;
  uint64_t v10 = *(void *)(a1 + 280);
  unint64_t v11 = *(unsigned int *)(v10 + 416);
  BOOL v12 = v4 >= v11;
  unint64_t v13 = v4 - v11;
  if (v12) {
    sub_1CB9153B8(v10 + 408, v13 + 1, *(void *)(v10 + 424));
  }
  operator new();
}

void *sub_1CC7863F8(void *result, unint64_t a2, uint64_t *a3)
{
  unint64_t v4 = result + 2;
  void *result = result + 2;
  result[1] = 0x400000000;
  uint64_t v5 = *a3;
  int v6 = *((_DWORD *)a3 + 2);
  if (a2 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    unint64_t v7 = a2;
    do
    {
      *unint64_t v4 = v5;
      *((_DWORD *)v4 + 2) = v6;
      unint64_t v4 = (void *)((char *)v4 + 12);
      --v7;
    }
    while (v7);
  }
  *((_DWORD *)result + 2) = a2;
  return result;
}

_DWORD *sub_1CC78649C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC786568(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      _DWORD *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC786568(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unint64_t v6 = *(_DWORD **)result;
    do
    {
      _DWORD *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    int v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      uint64_t v10 = &v3[2 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        BOOL v12 = 0;
        int v13 = 1;
        while (v11 != -1)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == -2;
          }
          if (v14) {
            BOOL v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          uint64_t v10 = &v3[2 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_11;
          }
        }
        if (v12) {
          uint64_t v10 = v12;
        }
      }
LABEL_11:
      *uint64_t v10 = v7;
      *((unsigned char *)v10 + 4) = *((unsigned char *)a2 + 4);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CC78663C()
{
  v4.n128_u64[0] = (unint64_t)"Disable the GPUSampleSink pass";
  v4.n128_u64[1] = 30;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCDA508, "disable-gpu-sample-sink", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA508, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Disable the GPUSampleSink unspillable register budgeting";
  v4.n128_u64[1] = 56;
  char v2 = 0;
  uint64_t v3 = (int *)&v2;
  int v1 = 1;
  sub_1CD4209D8((llvm::cl::Option *)&unk_1EBCDA5C8, "disable-gpu-sample-sink-unspill-budgeting", &v4, (unsigned char **)&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA5C8, &dword_1CB82C000);
}

uint64_t llvm::GPUTargetInstrInfo::mayReadQUADScope(llvm::GPUTargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 1) + 24))(*((void *)this + 1), **((unsigned __int16 **)a2 + 2));
}

uint64_t llvm::GPUTargetInstrInfo::mayReadSIMDScope(llvm::GPUTargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 1) + 32))(*((void *)this + 1), **((unsigned __int16 **)a2 + 2));
}

uint64_t llvm::GPUTargetInstrInfo::mayReadScopePredication(llvm::GPUTargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 1) + 40))(*((void *)this + 1), **((unsigned __int16 **)a2 + 2));
}

void sub_1CC7867B8()
{
}

void sub_1CC786850()
{
}

void sub_1CC7868F8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC7869AC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC786A58()
{
  return "GPU wait placement pass";
}

void sub_1CC786A68(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

BOOL sub_1CC786AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  int v7 = (uint64_t *)v4;
  uint64_t v439 = *MEMORY[0x1E4F143B8];
  *(void *)(v4 + 256) = (*(uint64_t (**)(void))(**(void **)(v5 + 16) + 104))(*(void *)(v5 + 16));
  uint64_t v358 = v6;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 176))(*(void *)(v6 + 16));
  v7[33] = v8;
  v420 = v422;
  uint64_t v421 = 0x800000000;
  unsigned int v423 = 0;
  unsigned int v424 = 0;
  unint64_t v425 = 0xFFFFFFFFLL;
  int v415 = v417;
  unsigned int v418 = 0;
  unsigned int v419 = 0;
  uint64_t v416 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(v8 + 44);
  if (v9)
  {
    uint64_t v10 = malloc_type_calloc(*(unsigned int *)(v8 + 44), 2uLL, 0x6D9A4F0CuLL);
    if (!v10) {
      goto LABEL_783;
    }
    unsigned int v418 = v10;
    unsigned int v419 = v9;
    unsigned int v9 = *(_DWORD *)(v7[33] + 44);
    unsigned int v11 = v424;
  }
  else
  {
    unsigned int v11 = 0;
  }
  LODWORD(v421) = 0;
  unint64_t v425 = 0xFFFFFFFFLL;
  if (v11 < v9 || v11 >> 2 > v9)
  {
    free(v423);
    BOOL v12 = malloc_type_calloc(v9, 2uLL, 0x6D9A4F0CuLL);
    if (!v12 && (v9 || (BOOL v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_783:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    unsigned int v423 = v12;
    unsigned int v424 = v9;
  }
  v411[0] = 1;
  for (uint64_t i = 1; i != 65; i += 2)
    v411[i] = -4096;
  uint64_t v412 = v414;
  uint64_t v413 = 0x2000000000;
  BOOL v408 = v410;
  uint64_t v409 = 0x2000000000;
  int v394 = 0;
  BOOL v14 = (void *)(v358 + 320);
  unsigned int v15 = *(void **)(v358 + 328);
  if (v15 == (void *)(v358 + 320))
  {
    uint64_t v16 = (void *)(v358 + 320);
  }
  else
  {
    do
    {
      (*(void (**)(uint64_t, void *))(*(void *)v7[31] + 96))(v7[31], v15);
      unsigned int v15 = (void *)v15[1];
    }
    while (v15 != v14);
    uint64_t v16 = *(void **)(v358 + 328);
  }
  unint64_t v392 = 0x8000000000000001;
  unint64_t v393 = 0x8000000000000001;
  unint64_t v402 = v404;
  uint64_t v403 = 0x1000000000;
  int v406 = 0;
  uint64_t v407 = 0;
  unsigned int v405 = &v406;
  v390[0] = 0;
  v390[1] = 0;
  int v391 = 0;
  unsigned int v389 = 0;
  if (v16 == v14)
  {
    unint64_t v238 = 0x8000000000000001;
    goto LABEL_447;
  }
  char v363 = 0;
  int v361 = 0;
  do
  {
    unsigned int v17 = v389;
    v429[0] = v16;
    uint64_t v18 = v16;
    *((_DWORD *)sub_1CBAEE230((uint64_t)v390, (uint64_t *)v429) + 2) = v17;
    uint64_t v19 = (char *)(v18 + 6);
    int v359 = v18;
    uint64_t v360 = (char *)(v18 + 6);
    unint64_t v20 = v18[7];
    if ((void *)v20 == v18 + 6) {
      goto LABEL_437;
    }
    do
    {
      unsigned int v35 = *(unsigned __int16 **)(v20 + 16);
      int v36 = *v35;
      if ((v36 - 9) <= 0x3C && ((1 << (v36 - 9)) & 0x1000000000000605) != 0
        || v36 == 0)
      {
        goto LABEL_432;
      }
      uint64_t v39 = *((void *)v35 + 1);
      if ((v39 & 0x10) != 0) {
        goto LABEL_432;
      }
      uint64_t v364 = v20;
      if (!v394) {
        goto LABEL_59;
      }
      unsigned int v40 = v389;
      __int16 v41 = *(_WORD *)(v20 + 44);
      if ((v41 & 0xC) == 0 || (v41 & 4) != 0)
      {
        if ((v39 & 0x400) == 0) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v42 = v20;
        if ((v39 & 0x400) == 0)
        {
          while ((*(_WORD *)(v42 + 44) & 8) != 0)
          {
            unint64_t v42 = *(void *)(v42 + 8);
            if ((*(unsigned char *)(*(void *)(v42 + 16) + 9) & 4) != 0) {
              goto LABEL_79;
            }
          }
          goto LABEL_59;
        }
      }
LABEL_79:
      if (!(*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v7[31] + 232))(v7[31], v20)) {
        goto LABEL_83;
      }
      v429[0] = 0;
      unsigned int v51 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7[31] + 240))(v7[31], v20);
      v429[0] = v51;
      if (!v51 || v51[6] > *(_DWORD *)(*(void *)(v20 + 24) + 24))
      {
        char v43 = 1;
        goto LABEL_60;
      }
      int v84 = sub_1CBAEE230((uint64_t)v390, (uint64_t *)v429);
      char v43 = v413;
      if (!v413) {
        goto LABEL_60;
      }
      unsigned int v85 = *((_DWORD *)v84 + 2);
      uint64_t v86 = 144 * v413;
      uint64_t v87 = (char *)v412 + 20;
      do
      {
        if (*v87 == -1)
        {
          unsigned int v88 = *(v87 - 1);
          BOOL v89 = v88 < v85 || v88 >= v40;
          if (!v89)
          {
            sub_1CC78A024((uint64_t)(v87 - 3), (uint64_t)v411, v40, &v394, 0);
            sub_1CC78A124(v7[31], v7[33], *(void *)(v87 - 5), (uint64_t *)&v415);
          }
        }
        v87 += 36;
        v86 -= 144;
      }
      while (v86);
LABEL_59:
      char v43 = 0;
LABEL_60:
      if (v361 || (v43 & 1) != 0)
      {
LABEL_83:
        if (v413)
        {
          unsigned int v52 = v389;
          uint64_t v53 = 144 * v413;
          unsigned int v54 = (char *)v412 + 8;
          do
          {
            sub_1CC78A024((uint64_t)v54, (uint64_t)v411, v52, &v394, 0);
            v54 += 144;
            v53 -= 144;
          }
          while (v53);
        }
        LODWORD(v416) = 0;
        uint64_t v55 = *(void *)(*(void *)(v20 + 16) + 8);
        if ((*(_WORD *)(v20 + 44) & 0xC) != 0 && (*(_WORD *)(v20 + 44) & 4) == 0)
        {
          unint64_t v57 = v20;
          if ((v55 & 0x400) == 0)
          {
            while ((*(_WORD *)(v57 + 44) & 8) != 0)
            {
              unint64_t v57 = *(void *)(v57 + 8);
              if ((*(unsigned char *)(*(void *)(v57 + 16) + 9) & 4) != 0) {
                goto LABEL_91;
              }
            }
            if ((v55 & 0x20) == 0)
            {
              unint64_t v58 = v20;
              do
              {
                if ((*(_WORD *)(v58 + 44) & 8) == 0) {
                  goto LABEL_318;
                }
                unint64_t v58 = *(void *)(v58 + 8);
              }
              while ((*(unsigned char *)(*(void *)(v58 + 16) + 8) & 0x20) == 0);
            }
          }
        }
        else if ((v55 & 0x420) == 0)
        {
          goto LABEL_318;
        }
LABEL_91:
        sub_1CB8F4B90((uint64_t)&v402, &v389);
        goto LABEL_318;
      }
      uint64_t v44 = *(void *)(*(void *)(v20 + 16) + 8);
      if ((*(_WORD *)(v20 + 44) & 0xC) != 0 && (*(_WORD *)(v20 + 44) & 4) == 0)
      {
        unint64_t v50 = v20;
        if ((v44 & 0x20) != 0) {
          goto LABEL_83;
        }
        while ((*(_WORD *)(v50 + 44) & 8) != 0)
        {
          unint64_t v50 = *(void *)(v50 + 8);
          if ((*(unsigned char *)(*(void *)(v50 + 16) + 8) & 0x20) != 0) {
            goto LABEL_83;
          }
        }
      }
      else if ((v44 & 0x20) != 0)
      {
        goto LABEL_83;
      }
      if (!v394) {
        goto LABEL_318;
      }
      unsigned int v46 = v389;
      if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v7[31] + 24))(v7[31], v20))
      {
        if (v413)
        {
          uint64_t v47 = 144 * v413;
          unsigned int v48 = (char *)v412 + 8;
          do
          {
            uint64_t v49 = *((void *)v48 - 1);
            if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(void *)v7[31] + 32))(v7[31], v49, v20))
            {
              sub_1CC78A024((uint64_t)v48, (uint64_t)v411, v46, &v394, 0);
              sub_1CC78A124(v7[31], v7[33], v49, (uint64_t *)&v415);
            }
            v48 += 144;
            v47 -= 144;
          }
          while (v47);
        }
        goto LABEL_137;
      }
      if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v7[31] + 40))(v7[31], v20))
      {
        unint64_t v59 = v20;
        if ((*(_WORD *)(v20 + 44) & 4) != 0)
        {
          unint64_t v59 = v20;
          do
            unint64_t v59 = *(void *)v59 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v59 + 44) & 4) != 0);
        }
        uint64_t v60 = *(void *)(v20 + 24) + 48;
        unint64_t v61 = *(int **)(v59 + 32);
        uint64_t v62 = *(unsigned int *)(v59 + 40);
        unint64_t v63 = &v61[8 * v62];
        if (!v62)
        {
          unint64_t v96 = *(void *)(v59 + 8);
          if (v96 == v60)
          {
            unint64_t v59 = *(void *)(v20 + 24) + 48;
          }
          else
          {
            unint64_t v59 = *(void *)(v20 + 24) + 48;
            if ((*(_WORD *)(v96 + 44) & 4) != 0)
            {
              while (1)
              {
                unint64_t v100 = v96;
                uint64_t v101 = *(unsigned int *)(v96 + 40);
                if (v101) {
                  break;
                }
                unint64_t v96 = *(void *)(v96 + 8);
                if (v96 == v60 || (*(_WORD *)(v96 + 44) & 4) == 0)
                {
                  unint64_t v59 = *(void *)(v20 + 24) + 48;
                  goto LABEL_190;
                }
              }
              unint64_t v59 = v96;
LABEL_190:
              unint64_t v61 = *(int **)(v100 + 32);
              unint64_t v63 = &v61[8 * v101];
            }
          }
        }
        if (v61 == v63) {
          goto LABEL_159;
        }
        LOBYTE(v64) = 0;
        while (2)
        {
          if (v64) {
            goto LABEL_155;
          }
          int v65 = *v61;
          if (*v61 || !v61[1]) {
            goto LABEL_108;
          }
          if ((v65 & 0x2000000) == 0) {
            goto LABEL_120;
          }
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v7[31] + 80))(v7[31])) {
            goto LABEL_108;
          }
          int v65 = *v61;
LABEL_120:
          if ((v65 & 0x1000000) != 0)
          {
LABEL_108:
            int v64 = 0;
          }
          else
          {
            unsigned int v69 = v61[1];
            uint64_t v70 = v7[33];
            if (v70) {
              uint64_t v71 = (void *)(v70 + 8);
            }
            else {
              uint64_t v71 = 0;
            }
            unint64_t v72 = *(unsigned int *)(*v71 + 24 * v69 + 16);
            unsigned int v73 = (_WORD *)(v71[6] + ((v72 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v74 = *v73 + (v72 & 0xF) * v69;
            while (1)
            {
              int v75 = v74;
              unsigned int v76 = *((unsigned __int16 *)v418 + v74);
              if (v416 > v76)
              {
                while (*((_DWORD *)v415 + 4 * v76) != v75)
                {
                  v76 += 0x10000;
                  if (v76 >= v416) {
                    goto LABEL_130;
                  }
                }
                if (v416 != v76) {
                  break;
                }
              }
LABEL_130:
              int v77 = (unsigned __int16)v73[1];
              ++v73;
              unsigned __int16 v74 = v77 + v75;
              if (!v77) {
                goto LABEL_108;
              }
            }
            int v64 = 1;
          }
          v61 += 8;
          if (v61 == v63)
          {
            unint64_t v66 = *(void *)(v59 + 8);
            if (v66 == v60) {
              goto LABEL_154;
            }
            unint64_t v61 = v63;
            unint64_t v59 = v60;
            if ((*(_WORD *)(v66 + 44) & 4) != 0)
            {
              while (1)
              {
                unint64_t v67 = v66;
                uint64_t v68 = *(unsigned int *)(v66 + 40);
                if (v68) {
                  break;
                }
                unint64_t v66 = *(void *)(v66 + 8);
                if (v66 == v60 || (*(_WORD *)(v66 + 44) & 4) == 0)
                {
                  unint64_t v59 = v60;
                  goto LABEL_133;
                }
              }
              unint64_t v59 = v66;
LABEL_133:
              unint64_t v61 = *(int **)(v67 + 32);
              unint64_t v63 = &v61[8 * v68];
            }
          }
          if (v61 == v63)
          {
LABEL_154:
            if (v64)
            {
LABEL_155:
              if (v413)
              {
                uint64_t v90 = 144 * v413;
                uint64_t v91 = (char *)v412 + 8;
                do
                {
                  sub_1CC78A024((uint64_t)v91, (uint64_t)v411, v46, &v394, 0);
                  v91 += 144;
                  v90 -= 144;
                }
                while (v90);
              }
LABEL_167:
              LODWORD(v416) = 0;
              goto LABEL_318;
            }
LABEL_159:
            (*(void (**)(uint64_t, unint64_t, void **))(*(void *)v7[31] + 112))(v7[31], v20, v429);
            if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v7[31] + 184))(v7[31], v20))
            {
              if (LOBYTE(v429[0]) == 1) {
                int v92 = 1;
              }
              else {
                int v92 = 2 * (LOBYTE(v429[0]) == 2);
              }
            }
            else
            {
              int v92 = 0;
            }
            if (v413)
            {
              uint64_t v93 = 144 * v413;
              uint64_t v94 = (char *)v412 + 8;
              do
              {
                sub_1CC78A024((uint64_t)v94, (uint64_t)v411, v46, &v394, v92);
                v94 += 144;
                v93 -= 144;
              }
              while (v93);
            }
            goto LABEL_167;
          }
          continue;
        }
      }
LABEL_137:
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7[31] + 120))(v7[31]))
      {
        if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v7[31] + 104))(v7[31], v20))
        {
          (*(void (**)(uint64_t, unint64_t, void **))(*(void *)v7[31] + 112))(v7[31], v20, v429);
          BOOL v78 = BYTE3(v429[0]) != 0;
        }
        else
        {
          BOOL v78 = 0;
        }
        unint64_t v79 = v20;
        if ((*(_WORD *)(v20 + 44) & 4) != 0)
        {
          unint64_t v79 = v20;
          do
            unint64_t v79 = *(void *)v79 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v79 + 44) & 4) != 0);
        }
        uint64_t v80 = *(void *)(v20 + 24) + 48;
        __int16 v81 = *(_DWORD **)(v79 + 32);
        uint64_t v82 = *(unsigned int *)(v79 + 40);
        BOOL v83 = &v81[8 * v82];
        uint64_t v371 = *(void *)(v364 + 24) + 48;
        if (v82)
        {
          uint64_t v378 = v79;
          goto LABEL_194;
        }
        uint64_t v95 = *(void *)(v79 + 8);
        if (v95 == v80)
        {
          uint64_t v378 = *(void *)(v364 + 24) + 48;
          goto LABEL_194;
        }
        uint64_t v378 = *(void *)(v364 + 24) + 48;
        if ((*(_WORD *)(v95 + 44) & 4) != 0)
        {
          while (1)
          {
            uint64_t v97 = v95;
            uint64_t v98 = *(unsigned int *)(v95 + 40);
            if (v98) {
              goto LABEL_192;
            }
            uint64_t v95 = *(void *)(v95 + 8);
            if (v95 == v371) {
              break;
            }
            uint64_t v99 = *(void *)(v364 + 24) + 48;
            if ((*(_WORD *)(v95 + 44) & 4) == 0)
            {
LABEL_191:
              uint64_t v378 = v99;
              goto LABEL_193;
            }
          }
          uint64_t v378 = *(void *)(v364 + 24) + 48;
LABEL_193:
          __int16 v81 = *(_DWORD **)(v97 + 32);
          BOOL v83 = &v81[8 * v98];
          goto LABEL_194;
        }
        while (1)
        {
LABEL_194:
          if (v81 == v83) {
            goto LABEL_224;
          }
          if ((*v81 & 0x10000FF) == 0x1000000)
          {
            unsigned int v102 = v81[1];
            if (v102)
            {
              if ((*v81 & 0x2000000) == 0) {
                goto LABEL_200;
              }
              if ((*(unsigned int (**)(uint64_t))(*(void *)v7[31] + 80))(v7[31])) {
                break;
              }
            }
          }
LABEL_217:
          v81 += 8;
          if (v81 == v83)
          {
            uint64_t v117 = *(void *)(v378 + 8);
            uint64_t v99 = v371;
            if (v117 == v371) {
              goto LABEL_224;
            }
            __int16 v81 = v83;
            uint64_t v378 = v371;
            if ((*(_WORD *)(v117 + 44) & 4) != 0)
            {
              while (1)
              {
                uint64_t v97 = v117;
                uint64_t v98 = *(unsigned int *)(v117 + 40);
                if (v98) {
                  break;
                }
                uint64_t v117 = *(void *)(v117 + 8);
                if (v117 == v371 || (*(_WORD *)(v117 + 44) & 4) == 0) {
                  goto LABEL_191;
                }
              }
LABEL_192:
              uint64_t v378 = v97;
              goto LABEL_193;
            }
          }
        }
        unsigned int v102 = v81[1];
LABEL_200:
        uint64_t v103 = v7[33];
        if (v103) {
          unsigned int v104 = (void *)(v103 + 8);
        }
        else {
          unsigned int v104 = 0;
        }
        unint64_t v105 = *(unsigned int *)(*v104 + 24 * v102 + 16);
        int v106 = (_WORD *)(v104[6] + ((v105 >> 3) & 0x1FFFFFFE));
        unsigned __int16 v107 = *v106 + (v105 & 0xF) * v102;
        while (1)
        {
          uint64_t v108 = sub_1CC78A2D8((uint64_t *)&v420, v107);
          uint64_t v110 = v109;
          if (&v420 != (void **)v108 || v109 != 0xFFFFFFFFLL) {
            break;
          }
LABEL_216:
          int v116 = (unsigned __int16)v106[1];
          ++v106;
          v107 += v116;
          if (!v116) {
            goto LABEL_217;
          }
        }
        uint64_t v112 = (void **)v108;
        unint64_t v113 = (void *)*v108;
        while (1)
        {
          if (v78)
          {
            int v114 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7[31] + 104))(v7[31], v113[3 * v110 + 1]);
            unint64_t v113 = *v112;
            if (v114)
            {
              (*(void (**)(uint64_t, void, void **))(*(void *)v7[31] + 112))(v7[31], v113[3 * v110 + 1], v429);
              if (BYTE3(v429[0])) {
                goto LABEL_214;
              }
              unint64_t v113 = *v112;
            }
          }
          uint64_t v115 = sub_1CC789DC8((int *)v411, v113[3 * v110 + 1]);
          sub_1CC78A024(v115 + 8, (uint64_t)v411, v46, &v394, 0);
LABEL_214:
          unint64_t v113 = *v112;
          uint64_t v110 = *((unsigned int *)*v112 + 6 * v110 + 5);
          if (&v420 == v112 && v110 == 0xFFFFFFFFLL) {
            goto LABEL_216;
          }
        }
      }
LABEL_224:
      v429[0] = &v429[2];
      v429[1] = (void *)0x1000000000;
      int v434 = 0;
      uint64_t v435 = 0;
      uint64_t v433 = &v434;
      unint64_t v22 = v364;
      __int16 v118 = *(_WORD *)(v364 + 44);
      if ((v118 & 4) != 0)
      {
        unint64_t v22 = v364;
        do
          unint64_t v22 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v22 + 44) & 4) != 0);
      }
      uint64_t v32 = *(void *)(v364 + 24) + 48;
      uint64_t v30 = *(int **)(v22 + 32);
      uint64_t v119 = *(unsigned int *)(v22 + 40);
      int v31 = &v30[8 * v119];
      uint64_t v366 = v32;
      if (!v119)
      {
        uint64_t v21 = *(void *)(v22 + 8);
        if (v21 == v32)
        {
          unint64_t v22 = *(void *)(v364 + 24) + 48;
        }
        else
        {
          unint64_t v22 = *(void *)(v364 + 24) + 48;
          if ((*(_WORD *)(v21 + 44) & 4) != 0)
          {
            while (1)
            {
              uint64_t v25 = v21;
              uint64_t v26 = *(unsigned int *)(v21 + 40);
              if (v26)
              {
                uint64_t v27 = v21;
                goto LABEL_41;
              }
              uint64_t v21 = *(void *)(v21 + 8);
              if (v21 == v32) {
                break;
              }
              uint64_t v27 = *(void *)(v364 + 24) + 48;
              if ((*(_WORD *)(v21 + 44) & 4) == 0) {
                goto LABEL_41;
              }
            }
            uint64_t v27 = *(void *)(v364 + 24) + 48;
LABEL_41:
            uint64_t v30 = *(int **)(v25 + 32);
            int v31 = &v30[8 * v26];
            uint64_t v32 = *(void *)(v364 + 24) + 48;
            unint64_t v22 = v27;
          }
        }
      }
      if (v30 == v31)
      {
        int v138 = v118 & 4;
        unint64_t v137 = v364;
        goto LABEL_265;
      }
      uint64_t v120 = 0;
      do
      {
        int v121 = *v30;
        if (!*v30 && v30[1])
        {
          if ((v121 & 0x2000000) != 0)
          {
            if (!(*(unsigned int (**)(uint64_t))(*(void *)v7[31] + 80))(v7[31])) {
              goto LABEL_229;
            }
            int v121 = *v30;
          }
          if ((v121 & 0x1000000) == 0)
          {
            unsigned int v125 = v30[1];
            uint64_t v126 = v7[33];
            if (v126) {
              uint64_t v127 = (void *)(v126 + 8);
            }
            else {
              uint64_t v127 = 0;
            }
            unint64_t v128 = *(unsigned int *)(*v127 + 24 * v125 + 16);
            int v129 = (_WORD *)(v127[6] + ((v128 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v130 = *v129 + (v128 & 0xF) * v125;
            unint64_t v379 = v22;
            uint64_t v372 = v31;
            do
            {
              int v131 = v130;
              unsigned int v132 = *((unsigned __int16 *)v418 + v130);
              if (v416 > v132)
              {
                while (1)
                {
                  unsigned int v133 = v132;
                  if (*((_DWORD *)v415 + 4 * v132) == v130) {
                    break;
                  }
                  v132 += 0x10000;
                  if (v133 + 0x10000 >= v416) {
                    goto LABEL_258;
                  }
                }
                if (v416 != v132)
                {
                  uint64_t v134 = *((void *)v415 + 2 * v132 + 1);
                  uint64_t v135 = sub_1CC789DC8((int *)v411, v134);
                  llvm::MachineInstr::findRegisterUseOperandIdx(v364, v30[1], 0, 0);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[31] + 136))(v7[31], v134, v364)&& (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7[31] + 152))(v7[31], v134, v364, v120))
                  {
                    uint64_t v32 = v366;
                    int v31 = v372;
                    if ((*v30 >> 26) & ~HIBYTE(*v30))
                    {
                      LODWORD(v426) = v131;
                      sub_1CC34EC20(v135 + 40, (unsigned int *)&v426);
                      if (!*(_DWORD *)(v135 + 48) && !*(void *)(v135 + 136)) {
                        *(_DWORD *)(v135 + 24) = 2;
                      }
                    }
                    LODWORD(v426) = v131;
                    sub_1CB8F4B90((uint64_t)v429, (unsigned int *)&v426);
                    unint64_t v22 = v379;
                  }
                  else
                  {
                    sub_1CC78A024(v135 + 8, (uint64_t)v411, v46, &v394, 0);
                    sub_1CC78A124(v7[31], v7[33], v134, (uint64_t *)&v415);
                    uint64_t v32 = v366;
                    unint64_t v22 = v379;
                    int v31 = v372;
                  }
                }
              }
LABEL_258:
              int v136 = (unsigned __int16)v129[1];
              ++v129;
              unsigned __int16 v130 = v136 + v131;
            }
            while (v136);
          }
        }
LABEL_229:
        v30 += 8;
        if (v30 == v31)
        {
          unint64_t v122 = *(void *)(v22 + 8);
          if (v122 == v32) {
            break;
          }
          uint64_t v30 = v31;
          unint64_t v22 = v32;
          if ((*(_WORD *)(v122 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v123 = v122;
              uint64_t v124 = *(unsigned int *)(v122 + 40);
              if (v124) {
                break;
              }
              unint64_t v122 = *(void *)(v122 + 8);
              if (v122 == v32 || (*(_WORD *)(v122 + 44) & 4) == 0)
              {
                unint64_t v22 = v32;
                goto LABEL_261;
              }
            }
            unint64_t v22 = v122;
LABEL_261:
            uint64_t v30 = *(int **)(v123 + 32);
            int v31 = &v30[8 * v124];
          }
        }
        uint64_t v120 = (v120 + 1);
      }
      while (v30 != v31);
      unint64_t v137 = v364;
      int v138 = *(_WORD *)(v364 + 44) & 4;
LABEL_265:
      unint64_t j = v137;
      if (v138)
      {
        unint64_t j = v137;
        do
          unint64_t j = *(void *)j & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(j + 44) & 4) != 0);
      }
      uint64_t v139 = *(void *)(v137 + 24) + 48;
      int v33 = *(int **)(j + 32);
      uint64_t v140 = *(unsigned int *)(j + 40);
      unsigned int v34 = &v33[8 * v140];
      if (!v140)
      {
        unint64_t v23 = *(void *)(j + 8);
        if (v23 == v139)
        {
          unint64_t j = *(void *)(v137 + 24) + 48;
          goto LABEL_267;
        }
        unint64_t j = *(void *)(v137 + 24) + 48;
        if ((*(_WORD *)(v23 + 44) & 4) != 0)
        {
          do
          {
            unint64_t v28 = v23;
            uint64_t v29 = *(unsigned int *)(v23 + 40);
            if (v29) {
              goto LABEL_42;
            }
            unint64_t v23 = *(void *)(v23 + 8);
          }
          while (v23 != v139 && (*(_WORD *)(v23 + 44) & 4) != 0);
          unint64_t v23 = v139;
LABEL_42:
          int v33 = *(int **)(v28 + 32);
          unsigned int v34 = &v33[8 * v29];
          unint64_t j = v23;
        }
      }
LABEL_267:
      while (v33 != v34)
      {
        int v141 = *v33;
        if (!*v33 && v33[1])
        {
          if ((v141 & 0x2000000) != 0)
          {
            if (!(*(unsigned int (**)(uint64_t))(*(void *)v7[31] + 80))(v7[31])) {
              goto LABEL_269;
            }
            int v141 = *v33;
          }
          if ((v141 & 0x1000000) != 0)
          {
            unsigned int v145 = v33[1];
            uint64_t v146 = v7[33];
            if (v146) {
              unint64_t v147 = (void *)(v146 + 8);
            }
            else {
              unint64_t v147 = 0;
            }
            unint64_t v148 = *(unsigned int *)(*v147 + 24 * v145 + 16);
            uint64_t v149 = (_WORD *)(v147[6] + ((v148 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v150 = *v149 + (v148 & 0xF) * v145;
            unint64_t v373 = j;
            do
            {
              unsigned int v151 = v150;
              unsigned int v152 = *((unsigned __int16 *)v418 + v150);
              if (v416 > v152)
              {
                while (1)
                {
                  unsigned int v153 = v152;
                  if (*((_DWORD *)v415 + 4 * v152) == v150) {
                    break;
                  }
                  v152 += 0x10000;
                  if (v153 + 0x10000 >= v416) {
                    goto LABEL_304;
                  }
                }
                if (v416 != v152)
                {
                  uint64_t v154 = *((void *)v415 + 2 * v152 + 1);
                  uint64_t v367 = sub_1CC789DC8((int *)v411, v154);
                  uint64_t v380 = v367 + 8;
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[31] + 136))(v7[31], v154, v364))
                  {
                    uint64_t v155 = v154;
                    if (v435)
                    {
                      uint64_t v156 = v434;
                      for (j = v373; v156; uint64_t v156 = (void *)*v156)
                      {
                        unsigned int v157 = *((_DWORD *)v156 + 7);
                        if (v157 <= v151)
                        {
                          if (v157 >= v151) {
                            goto LABEL_304;
                          }
                          ++v156;
                        }
                      }
LABEL_312:
                      sub_1CC78A024(v380, (uint64_t)v411, v46, &v394, 0);
                      sub_1CC78A124(v7[31], v7[33], v155, (uint64_t *)&v415);
                      break;
                    }
                    unint64_t j = v373;
                    if (!LODWORD(v429[1])) {
                      goto LABEL_312;
                    }
                    uint64_t v159 = v429[0];
                    uint64_t v160 = 4 * LODWORD(v429[1]);
                    while (*v159 != v151)
                    {
                      ++v159;
                      v160 -= 4;
                      if (!v160) {
                        goto LABEL_312;
                      }
                    }
                    if (!v160) {
                      goto LABEL_312;
                    }
                  }
                  else
                  {
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[31] + 144))(v7[31], v154, v364))
                    {
                      LODWORD(v426) = v151;
                      sub_1CC34EC20(v367 + 40, (unsigned int *)&v426);
                      if (!*(_DWORD *)(v367 + 48) && !*(void *)(v367 + 136)) {
                        *(_DWORD *)(v367 + 24) = 2;
                      }
                    }
                    else
                    {
                      sub_1CC78A024(v380, (uint64_t)v411, v46, &v394, 0);
                      sub_1CC78A124(v7[31], v7[33], v154, (uint64_t *)&v415);
                    }
                    unint64_t j = v373;
                  }
                }
              }
LABEL_304:
              int v158 = (unsigned __int16)v149[1];
              ++v149;
              unsigned __int16 v150 = v158 + v151;
            }
            while (v158);
          }
        }
LABEL_269:
        v33 += 8;
        if (v33 == v34)
        {
          unint64_t v142 = *(void *)(j + 8);
          if (v142 == v139) {
            break;
          }
          int v33 = v34;
          unint64_t j = v139;
          if ((*(_WORD *)(v142 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v143 = v142;
              uint64_t v144 = *(unsigned int *)(v142 + 40);
              if (v144) {
                break;
              }
              unint64_t v142 = *(void *)(v142 + 8);
              if (v142 == v139 || (*(_WORD *)(v142 + 44) & 4) == 0)
              {
                unint64_t j = v139;
                goto LABEL_314;
              }
            }
            unint64_t j = v142;
LABEL_314:
            int v33 = *(int **)(v143 + 32);
            unsigned int v34 = &v33[8 * v144];
          }
        }
      }
      sub_1CB833A08((uint64_t)&v433, v434);
      if (v429[0] != &v429[2]) {
        free(v429[0]);
      }
      unint64_t v20 = v364;
LABEL_318:
      if (v393) {
        unint64_t v161 = v393 >> 58;
      }
      else {
        unint64_t v161 = *(unsigned int *)(v393 + 64);
      }
      unint64_t v162 = v389 + 1;
      if (v161 <= v162)
      {
        unint64_t v163 = v162 | (v162 >> 1) | ((v162 | (v162 >> 1)) >> 2);
        unint64_t v164 = v163 | (v163 >> 4) | ((v163 | (v163 >> 4)) >> 8);
        uint64_t v165 = ((v164 >> 16) | v164) + 1;
        sub_1CBA7B5AC(&v393, v165, 0);
        sub_1CBA7B5AC(&v392, v165, 0);
      }
      unint64_t v166 = v20;
      if ((*(_WORD *)(v20 + 44) & 8) != 0)
      {
        unint64_t v166 = v20;
        do
          unint64_t v166 = *(void *)(v166 + 8);
        while ((*(_WORD *)(v166 + 44) & 8) != 0);
      }
      uint64_t v167 = *(void *)(v166 + 8);
      if (v20 == v167)
      {
        int v361 = 0;
        LOBYTE(v168) = 0;
      }
      else
      {
        int v168 = 0;
        int v361 = 0;
        uint64_t v169 = v20;
        uint64_t v362 = *(void *)(v166 + 8);
        do
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 168))(v7[31], v169))
          {
            unsigned int v170 = v389 + 1;
            if (v392) {
              unint64_t v392 = v392 & 0xFC00000000000000 | (2
            }
                                                  * (((v392 >> 1) & ~(-1 << (v392 >> 58)) | (1 << v170)) & ~(-1 << (v392 >> 58)))) | 1;
            else {
              *(void *)(*(void *)v392 + 8 * (v170 >> 6)) |= 1 << v170;
            }
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 48))(v7[31], v169))
          {
            int v171 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7[31] + 224))(v7[31], v169);
            if ((v363 & 1) == 0)
            {
              if (v393) {
                unint64_t v393 = v393 & 0xFC00000000000000 | (2
              }
                                                    * (((v393 >> 1) & ~(-1 << (v393 >> 58)) | (1 << v389)) & ~(-1 << (v393 >> 58)))) | 1;
              else {
                *(void *)(*(void *)v393 + 8 * (v389 >> 6)) |= 1 << v389;
              }
            }
            if ((v168 | v171))
            {
              int v168 = 1;
            }
            else
            {
              unsigned int v172 = v389 + 1;
              int v168 = 0;
              if (v393) {
                unint64_t v393 = v393 & 0xFC00000000000000 | (2
              }
                                                    * (((v393 >> 1) & ~(-1 << (v393 >> 58)) | (1 << v172)) & ~(-1 << (v393 >> 58)))) | 1;
              else {
                *(void *)(*(void *)v393 + 8 * (v172 >> 6)) |= 1 << v172;
              }
            }
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 104))(v7[31], v169))
          {
            unsigned int v381 = v389;
            v385[0] = v169;
            int v374 = v168;
            if (v409 >= (unint64_t)HIDWORD(v409)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v408 + v409) = v169;
            LODWORD(v409) = v409 + 1;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7[31] + 112))(v7[31], v169, &v401);
            LODWORD(v429[0]) = v401;
            *(_DWORD *)((char *)v429 + 3) = *(_DWORD *)((char *)&v401 + 3);
            LODWORD(v429[1]) = v381;
            *(void **)((char *)&v429[1] + 4) = (void *)0xFFFFFFFFLL;
            BYTE4(v429[2]) = 0;
            LODWORD(v429[3]) = 0;
            uint64_t v430 = v432;
            uint64_t v431 = 0x1000000000;
            int v437 = 0;
            uint64_t v438 = 0;
            int v436 = &v437;
            uint64_t v173 = sub_1CC78A348((uint64_t)v411, v385);
            uint64_t v174 = v173;
            long long v175 = *(_OWORD *)((char *)&v429[1] + 4);
            *(_OWORD *)uint64_t v173 = *(_OWORD *)v429;
            *(_OWORD *)(v173 + 12) = v175;
            if ((void **)v173 != v429)
            {
              int v176 = v430;
              if (v430 == v432)
              {
                int v177 = (void **)(v173 + 32);
                int v178 = v431;
                uint64_t v179 = *(unsigned int *)(v173 + 40);
                if (v179 >= v431)
                {
                  if (v431) {
                    memmove(*v177, v432, 4 * v431);
                  }
                }
                else
                {
                  if (*(_DWORD *)(v173 + 44) < v431)
                  {
                    *(_DWORD *)(v173 + 40) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v179) {
                    memmove(*v177, v432, 4 * v179);
                  }
                  else {
                    uint64_t v179 = 0;
                  }
                  if (v179 != v431) {
                    memcpy((char *)*v177 + 4 * v179, (char *)v430 + 4 * v179, 4 * v431 - 4 * v179);
                  }
                }
                *(_DWORD *)(v174 + 40) = v178;
              }
              else
              {
                unint64_t v234 = *(void **)(v173 + 32);
                if (v234 != (void *)(v174 + 48))
                {
                  free(v234);
                  int v176 = v430;
                }
                *(void *)(v174 + 32) = v176;
                *(void *)(v174 + 40) = v431;
                uint64_t v430 = v432;
                HIDWORD(v431) = 0;
              }
              LODWORD(v431) = 0;
            }
            int v181 = *(void **)(v174 + 120);
            uint64_t v180 = (void *)(v174 + 120);
            sub_1CB833A08((uint64_t)(v180 - 1), v181);
            *(v180 - 1) = v436;
            int v182 = v437;
            *uint64_t v180 = v437;
            uint64_t v183 = v438;
            v180[1] = v438;
            if (v183)
            {
              int v184 = 0;
              v182[2] = v180;
              int v436 = &v437;
              int v437 = 0;
              uint64_t v438 = 0;
            }
            else
            {
              *(v180 - 1) = v180;
              int v184 = v437;
            }
            sub_1CB833A08((uint64_t)&v436, v184);
            if (v430 != v432) {
              free(v430);
            }
            ++v394;
            v429[0] = &v429[2];
            v429[1] = (void *)0x2000000000;
            int v426 = (char *)&v427 + 8;
            *(void *)&long long v427 = 0x2000000000;
            (*(void (**)(uint64_t, unint64_t, uint64_t, void **, void **))(*(void *)v7[31] + 88))(v7[31], v20, v7[33], &v426, v429);
            uint64_t v185 = sub_1CC78A348((uint64_t)v411, v385);
            uint64_t v186 = v385[0];
            if (v427)
            {
              uint64_t v187 = (char *)v426;
              int v188 = (char *)v426 + 4 * v427;
              do
              {
                uint64_t v189 = *(unsigned int *)v187;
                unsigned int v190 = *((unsigned __int16 *)v418 + v189);
                int v191 = v416;
                if (v416 > v190)
                {
                  while (1)
                  {
                    unsigned int v192 = v190;
                    if (*((_DWORD *)v415 + 4 * v190) == v189) {
                      break;
                    }
                    v190 += 0x10000;
                    if (v192 + 0x10000 >= v416) {
                      goto LABEL_369;
                    }
                  }
                  if (v416 != v190)
                  {
                    int v193 = (char *)v415 + 16 * v190;
                    uint64_t v194 = (char *)v415 + 16 * v416 - 16;
                    if (v194 != v193)
                    {
                      _OWORD *v193 = *v194;
                      int v195 = v416;
                      *((_WORD *)v418 + *((unsigned int *)v415 + 4 * v416 - 4)) = (v193 - v415) >> 4;
                      int v191 = v195;
                    }
                    LODWORD(v416) = v191 - 1;
                    LODWORD(v189) = *(_DWORD *)v187;
                  }
                }
LABEL_369:
                *(_DWORD *)uint64_t v396 = v189;
                *(void *)&v396[8] = v186;
                sub_1CB93E0B4((uint64_t *)&v415, (unsigned int *)v396);
                int v196 = *(_DWORD *)v187;
                v187 += 4;
                *(_DWORD *)uint64_t v396 = v196;
                sub_1CB8F4B90(v185 + 32, (unsigned int *)v396);
              }
              while (v187 != v188);
            }
            uint64_t v368 = v185;
            if (LODWORD(v429[1]))
            {
              int v197 = (unsigned int *)v429[0];
              uint64_t v198 = 4 * LODWORD(v429[1]);
              do
              {
                uint64_t v199 = *v197;
                unint64_t v20 = v20 & 0xFFFFFFFF00000000 | v199;
                int v201 = (void **)sub_1CC78A2D8((uint64_t *)&v420, *v197);
                if (HIDWORD(v425))
                {
                  unsigned int v202 = v425;
                  uint64_t v203 = (char *)v420 + 24 * v425;
                  unsigned int v204 = *((_DWORD *)v203 + 5);
                  *(void *)uint64_t v203 = v20;
                  *((void *)v203 + 1) = v186;
                  *((void *)v203 + 2) = -1;
                  unint64_t v425 = __PAIR64__(HIDWORD(v425), v204) - 0x100000000;
                }
                else
                {
                  *(void *)uint64_t v396 = v20;
                  *(void *)&v396[8] = v186;
                  *(void *)&v396[16] = -1;
                  if (v421 >= HIDWORD(v421))
                  {
                    if (v420 > v396 || (char *)v420 + 24 * v421 <= v396) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned __int16 v205 = (char *)v420 + 24 * v421;
                  long long v206 = *(_OWORD *)v396;
                  *((void *)v205 + 2) = *(void *)&v396[16];
                  *(_OWORD *)unsigned __int16 v205 = v206;
                  unsigned int v202 = v421;
                  LODWORD(v421) = v421 + 1;
                }
                if (&v420 == v201 && v200 == 0xFFFFFFFFLL)
                {
                  *((_WORD *)v423 + v199) = v202;
                  *((_DWORD *)v420 + 6 * v202 + 4) = v202;
                }
                else
                {
                  unsigned int v208 = *((_DWORD *)*v201 + 6 * v200 + 4);
                  int v209 = v420;
                  *((_DWORD *)v420 + 6 * v208 + 5) = v202;
                  v209[6 * v200 + 4] = v202;
                  v209[6 * v202 + 4] = v208;
                }
                ++v197;
                v198 -= 4;
              }
              while (v198);
            }
            uint64_t v210 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7[31] + 72))(v7[31], v186);
            if (v211)
            {
              uint64_t v212 = (unsigned int *)v210;
              __int16 v213 = (unsigned int *)(v210 + 4 * v211);
              do
              {
                unsigned int v214 = *v212;
                uint64_t v215 = v7[33];
                if (v215) {
                  unsigned int v216 = (void *)(v215 + 8);
                }
                else {
                  unsigned int v216 = 0;
                }
                unint64_t v217 = *(unsigned int *)(*v216 + 24 * v214 + 16);
                uint64_t v218 = (_WORD *)(v216[6] + ((v217 >> 3) & 0x1FFFFFFE));
                unsigned __int16 v219 = *v218 + (v217 & 0xF) * v214;
                do
                {
                  int v220 = v219;
                  unsigned int v221 = *((unsigned __int16 *)v418 + v219);
                  int v222 = v416;
                  if (v416 > v221)
                  {
                    while (1)
                    {
                      unsigned int v223 = v221;
                      if (*((_DWORD *)v415 + 4 * v221) == v220) {
                        break;
                      }
                      v221 += 0x10000;
                      if (v223 + 0x10000 >= v416) {
                        goto LABEL_402;
                      }
                    }
                    if (v416 != v221)
                    {
                      uint64_t v224 = (char *)v415 + 16 * v221;
                      uint64_t v225 = (char *)v415 + 16 * v416 - 16;
                      if (v225 != v224)
                      {
                        *uint64_t v224 = *v225;
                        int v226 = v416;
                        *((_WORD *)v418 + *((unsigned int *)v415 + 4 * v416 - 4)) = (v224 - v415) >> 4;
                        int v222 = v226;
                      }
                      LODWORD(v416) = v222 - 1;
                    }
                  }
LABEL_402:
                  *(_DWORD *)uint64_t v396 = v220;
                  *(void *)&v396[8] = v186;
                  sub_1CB93E0B4((uint64_t *)&v415, (unsigned int *)v396);
                  int v227 = (unsigned __int16)v218[1];
                  ++v218;
                  unsigned __int16 v219 = v227 + v220;
                }
                while (v227);
                ++v212;
              }
              while (v212 != v213);
              int v361 = 1;
            }
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 184))(v7[31], v186))
            {
              uint64_t v228 = sub_1CC789DC8((int *)v411, v186);
              sub_1CC78A024(v228 + 8, (uint64_t)v411, v381 + 1, &v394, 0);
              *(unsigned char *)(v368 + 20) = 1;
            }
            unint64_t v20 = v364;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 56))(v7[31], v186)
              && v409)
            {
              uint64_t v229 = (uint64_t *)v408;
              uint64_t v230 = 8 * v409;
              do
              {
                uint64_t v231 = *v229;
                if (*v229 != v186
                  && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[31] + 64))(v7[31], *v229, v186))
                {
                  uint64_t v232 = sub_1CC789DC8((int *)v411, v231);
                  sub_1CC78A024(v232 + 8, (uint64_t)v411, v381, &v394, 0);
                }
                ++v229;
                v230 -= 8;
              }
              while (v230);
            }
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 160))(v7[31], v186))
            {
              uint64_t v233 = sub_1CC789DC8((int *)v411, v186);
              sub_1CC78A024(v233 + 8, (uint64_t)v411, v381 + 1, &v394, 0);
            }
            uint64_t v167 = v362;
            if (v426 != (char *)&v427 + 8) {
              free(v426);
            }
            int v168 = v374;
            if (v429[0] != &v429[2]) {
              free(v429[0]);
            }
          }
          uint64_t v169 = *(void *)(v169 + 8);
        }
        while (v169 != v167);
      }
      ++v389;
      char v363 = v168;
      uint64_t v19 = v360;
      if (v20)
      {
LABEL_432:
        if ((*(unsigned char *)v20 & 4) != 0) {
          goto LABEL_436;
        }
      }
      while ((*(_WORD *)(v20 + 44) & 8) != 0)
        unint64_t v20 = *(void *)(v20 + 8);
LABEL_436:
      unint64_t v20 = *(void *)(v20 + 8);
    }
    while ((char *)v20 != v19);
LABEL_437:
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7[31] + 208))(v7[31]))
    {
      if (v413)
      {
        unsigned int v235 = v389;
        uint64_t v236 = 144 * v413;
        uint64_t v237 = (char *)v412 + 8;
        do
        {
          sub_1CC78A024((uint64_t)v237, (uint64_t)v411, v235, &v394, 0);
          v237 += 144;
          v236 -= 144;
        }
        while (v236);
      }
      int v361 = 0;
      LODWORD(v416) = 0;
    }
    uint64_t v16 = (void *)v359[1];
  }
  while (v16 != v14);
  unint64_t v238 = v392;
  if ((v392 & 1) == 0) {
    operator new();
  }
LABEL_447:
  v429[0] = (void *)(v238 & 0xFC00000000000000 | (2 * ~((-1 << (v238 >> 58)) | (v238 >> 1))) | 1);
  sub_1CBA7B2F4(&v393, (unint64_t *)v429);
  uint64_t v240 = v429[0];
  if (((uint64_t)v429[0] & 1) == 0 && v429[0])
  {
    if (*(void **)v429[0] != (char *)v429[0] + 16) {
      free(*(void **)v429[0]);
    }
    MEMORY[0x1D25D9CE0](v240, 0x1080C40EF38A13ELL);
  }
  int v241 = v409;
  if (!v409) {
    goto LABEL_748;
  }
  unint64_t v370 = v389;
  if (v413)
  {
    int v242 = (char *)v412 + 144 * v413;
    int v243 = v394;
    uint64_t v244 = 144 * v413;
    unint64_t v245 = (int *)((char *)v412 + 20);
    do
    {
      int v246 = *v245;
      if (v245[1] == 2)
      {
        v243 -= v246 == -1;
      }
      else if (v246 == -1)
      {
        *unint64_t v245 = v370;
        --v243;
      }
      v245 += 36;
      v244 -= 144;
    }
    while (v244);
    int v394 = v243;
    unsigned int v247 = -1;
    unsigned int v248 = -1;
    unsigned int v249 = -1;
    do
    {
      if (*(v242 - 135) && !*((_DWORD *)v242 - 28))
      {
        if (*(v242 - 133))
        {
          if (v247 >= *((_DWORD *)v242 - 31)) {
            unsigned int v247 = *((_DWORD *)v242 - 31);
          }
          *((_DWORD *)v242 - 31) = v247;
        }
        else if (*(v242 - 132))
        {
          unsigned int v250 = *((_DWORD *)v242 - 31);
          if (v249 < v250) {
            unsigned int v250 = v249;
          }
          if (v247 < v250) {
            unsigned int v250 = v247;
          }
          if (v248 < v250) {
            unsigned int v250 = v248;
          }
          *((_DWORD *)v242 - 31) = v250;
          if (v249 >= v250) {
            unsigned int v249 = v250;
          }
        }
        else if (*(v242 - 130))
        {
          unsigned int v251 = *((_DWORD *)v242 - 31);
          if (v247 < v251) {
            unsigned int v251 = v247;
          }
          if (v248 < v251) {
            unsigned int v251 = v248;
          }
          *((_DWORD *)v242 - 31) = v251;
        }
        else if (*(v242 - 131) && (*(unsigned int (**)(uint64_t))(*(void *)v7[31] + 216))(v7[31]))
        {
          if (v248 >= *((_DWORD *)v242 - 31)) {
            unsigned int v248 = *((_DWORD *)v242 - 31);
          }
          *((_DWORD *)v242 - 31) = v248;
        }
      }
      v242 -= 144;
    }
    while (v242 != v412);
    unsigned int v252 = v409;
  }
  else
  {
    unsigned int v252 = v409;
  }
  int v365 = v241;
  int v388 = 0;
  uint64_t v400 = 0;
  uint64_t v401 = 0;
  uint64_t v398 = 0;
  uint64_t v399 = -1;
  __int16 v387 = 0;
  v429[0] = &v429[2];
  v429[1] = (void *)0x1000000000;
  int v426 = v428;
  long long v427 = xmmword_1CDB15990;
  *(void *)uint64_t v396 = v397;
  *(_OWORD *)&v396[8] = xmmword_1CDB15990;
  v385[0] = 0;
  v385[1] = 0;
  unsigned int v386 = 0;
  if (!v252)
  {
    uint64_t v395 = 0x100000000;
    goto LABEL_691;
  }
  uint64_t v253 = (uint64_t *)v408;
  int v254 = (uint64_t *)((char *)v408 + 8 * v252);
  uint64_t v369 = v254;
  while (2)
  {
    int v376 = (llvm::MachineInstr *)*v253;
    int v255 = (_DWORD *)sub_1CC789DC8((int *)v411, *v253);
    if (v255[6] == 2) {
      goto LABEL_611;
    }
    unsigned int v257 = v255[4];
    for (unsigned int k = v255[5]; ; --k)
    {
      char v258 = k;
      unint64_t v259 = (v392 >> 1) & ~(-1 << (v392 >> 58));
      if ((v392 & 1) == 0)
      {
        char v258 = k & 0x3F;
        unint64_t v259 = *(void *)(*(void *)v392 + 8 * (k >> 6));
      }
      if (((v259 >> v258) & 1) == 0) {
        break;
      }
      char v260 = k;
      unint64_t v261 = (v393 >> 1) & ~(-1 << (v393 >> 58));
      if ((v393 & 1) == 0)
      {
        char v260 = k & 0x3F;
        unint64_t v261 = *(void *)(*(void *)v393 + 8 * (k >> 6));
      }
      if ((v261 >> v260)) {
        break;
      }
    }
    int v377 = v255;
    unsigned int v262 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7[31] + 192))(v7[31], v358);
    unsigned int v263 = (*(uint64_t (**)(uint64_t))(*(void *)v7[31] + 200))(v7[31]);
    unsigned int v382 = v262;
    if (v262)
    {
      if (v263)
      {
        uint64_t v264 = v377;
        if (v393)
        {
          if (((1 << k) & (v393 >> 1) & ~(-1 << (v393 >> 58))) == 0) {
            goto LABEL_505;
          }
        }
        else if ((*(void *)(*(void *)v393 + 8 * (k >> 6)) & (1 << k)) == 0)
        {
LABEL_505:
          if (k >= v370)
          {
            LODWORD(v266) = 0;
          }
          else
          {
            uint64_t v266 = 0;
            do
            {
              unsigned int v267 = k + v266;
              unint64_t v268 = (v393 >> 1) & ~(-1 << (v393 >> 58));
              if ((v393 & 1) == 0)
              {
                uint64_t v269 = v267 >> 6;
                LOBYTE(v267) = v267 & 0x3F;
                unint64_t v268 = *(void *)(*(void *)v393 + 8 * v269);
              }
              if ((v268 >> v267)) {
                break;
              }
              if (++v266 >= v263) {
                break;
              }
            }
            while (v266 + (unint64_t)k < v370);
          }
          if (v266 < v263)
          {
            unsigned int v270 = v266 + 1;
            do
            {
              char v271 = --k;
              unint64_t v272 = (v393 >> 1) & ~(-1 << (v393 >> 58));
              if ((v393 & 1) == 0)
              {
                char v271 = k & 0x3F;
                unint64_t v272 = *(void *)(*(void *)v393 + 8 * (k >> 6));
              }
              if ((v272 >> v271)) {
                break;
              }
              BOOL v89 = v270++ >= v263;
            }
            while (!v89);
          }
        }
      }
      else
      {
        uint64_t v264 = v377;
      }
      if (k >= v257 + 1)
      {
        unsigned int v273 = 1;
        unsigned int v265 = k;
        while (1)
        {
          char v274 = v265;
          unint64_t v275 = (v393 >> 1) & ~(-1 << (v393 >> 58));
          if ((v393 & 1) == 0)
          {
            char v274 = v265 & 0x3F;
            unint64_t v275 = *(void *)(*(void *)v393 + 8 * (v265 >> 6));
          }
          if ((v275 >> v274)) {
            break;
          }
          if (v273 < v382)
          {
            --v265;
            ++v273;
            if (v265 >= v257 + 1) {
              continue;
            }
          }
          goto LABEL_522;
        }
      }
      else
      {
LABEL_522:
        unsigned int v265 = k;
      }
    }
    else
    {
      unsigned int v265 = k;
      uint64_t v264 = v377;
    }
    __int16 v384 = 0;
    if (v257 >= HIDWORD(v399)) {
      HIBYTE(v384) = 1;
    }
    unsigned int v375 = v257;
    if (v257 < v399 && ((v264[2] & 2) != 0 || v398 != 8))
    {
      uint64_t v395 = 0x100000000;
    }
    else
    {
      LOBYTE(v384) = 1;
      uint64_t v395 = 0x100000000;
      if (v257 >= HIDWORD(v399) && HIDWORD(v399) < v399) {
        uint64_t v395 = 1;
      }
    }
    char v276 = 0;
    uint64_t v277 = 0;
    while (2)
    {
      char v278 = v276;
      uint64_t v279 = *(unsigned int *)&v396[4 * v277 - 8];
      if (!*((unsigned char *)&v384 + v279)) {
        goto LABEL_569;
      }
      if (*((unsigned char *)&v387 + v279))
      {
        char v280 = 1;
        goto LABEL_559;
      }
      if (!v407)
      {
        unsigned int v284 = v402;
        if (v403)
        {
          uint64_t v285 = 4 * v403;
          while (*v284 != *((_DWORD *)&v399 + v279))
          {
            ++v284;
            v285 -= 4;
            if (!v285) {
              goto LABEL_555;
            }
          }
        }
        else
        {
LABEL_555:
          unsigned int v284 = (char *)v402 + 4 * v403;
        }
        uint64_t v281 = v284 != (_DWORD *)((char *)v402 + 4 * v403);
        goto LABEL_558;
      }
      uint64_t v281 = (uint64_t)v406;
      if (!v406) {
        goto LABEL_558;
      }
      unsigned int v282 = *((_DWORD *)&v399 + v279);
      while (2)
      {
        unsigned int v283 = *(_DWORD *)(v281 + 28);
        if (v282 < v283)
        {
LABEL_549:
          uint64_t v281 = *(void *)v281;
          if (!v281) {
            goto LABEL_558;
          }
          continue;
        }
        break;
      }
      if (v283 < v282)
      {
        v281 += 8;
        goto LABEL_549;
      }
      uint64_t v281 = 1;
LABEL_558:
      char v280 = v281 == 0;
LABEL_559:
      if (v386)
      {
        int v286 = *((_DWORD *)&v399 + v279);
        LODWORD(v287) = (37 * v286) & (v386 - 1);
        unint64_t v288 = (int *)(v385[0] + 8 * v287);
        int v289 = *v288;
        if (v286 == *v288) {
          goto LABEL_561;
        }
        int v291 = 1;
        while (v289 != -1)
        {
          int v292 = v287 + v291++;
          uint64_t v287 = v292 & (v386 - 1);
          int v289 = *(_DWORD *)(v385[0] + 8 * v287);
          if (v286 == v289)
          {
            unint64_t v288 = (int *)(v385[0] + 8 * v287);
            goto LABEL_561;
          }
        }
      }
      unint64_t v288 = (int *)(v385[0] + 8 * v386);
LABEL_561:
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7[31] + 176))(v7[31], *v253)
        && (int *)(v385[0] + 8 * v386) != v288)
      {
        int v290 = v279 ? 2 : 1;
        if ((v288[1] & v290) != 0) {
          char v280 = 0;
        }
      }
      sub_1CC789E94(v279, (uint64_t)&v401, (uint64_t)&v388 + 2, (uint64_t)&v398, (uint64_t)&v400, (uint64_t)&v399, (uint64_t)&v387, (uint64_t)&v388, (uint64_t)v429, &v426, v396, v280);
LABEL_569:
      char v276 = 1;
      uint64_t v277 = 1;
      if ((v278 & 1) == 0) {
        continue;
      }
      break;
    }
    int v293 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7[31] + 192))(v7[31], v358);
    int v294 = v377;
    int v295 = *((unsigned __int8 *)v377 + 8);
    if (v295 == 1)
    {
      LODWORD(v297) = 0;
      unsigned int v296 = v375;
      goto LABEL_588;
    }
    unsigned int v296 = v375;
    if (v295 == 2) {
      goto LABEL_578;
    }
    int v298 = v377[8];
    if (v298 == 2)
    {
      LODWORD(v297) = -1;
      goto LABEL_588;
    }
    if (v298 != 1)
    {
      if (v398 <= 7 && v265 == v399) {
        goto LABEL_587;
      }
      if (HIDWORD(v398) <= 7 && v265 == HIDWORD(v399)) {
        goto LABEL_578;
      }
      if (v293) {
        BOOL v311 = v398 >= 8;
      }
      else {
        BOOL v311 = 1;
      }
      int v312 = !v311;
      unsigned int v313 = v265 - 1;
      if (v312 == 1 && v399 == v313) {
        goto LABEL_587;
      }
      BOOL v315 = !v293 || HIDWORD(v398) >= 8;
      BOOL v316 = !v315;
      if (v316 && HIDWORD(v399) == v313) {
        goto LABEL_578;
      }
      if (v312 && v399 == v265 + 1 && v401 < 2) {
        goto LABEL_587;
      }
      if (v316 && HIDWORD(v399) == v265 + 1 && HIDWORD(v401) < 2) {
        goto LABEL_578;
      }
      if (v398 <= 7
        && *((unsigned char *)v377 + 14)
        && v265 >= v399
        && !((v393 & 1) != 0
           ? (1 << v265) & (v393 >> 1) & ~(-1 << (v393 >> 58))
           : *(void *)(*(void *)v393 + 8 * (v265 >> 6)) & (1 << v265)))
      {
        LODWORD(v297) = 0;
        if (!HIDWORD(v398) || HIDWORD(v399) < v399) {
          goto LABEL_588;
        }
      }
      if (HIDWORD(v398) <= 7
        && *((unsigned char *)v377 + 14)
        && v265 >= HIDWORD(v399)
        && !((v393 & 1) != 0
           ? (1 << v265) & (v393 >> 1) & ~(-1 << (v393 >> 58))
           : *(void *)(*(void *)v393 + 8 * (v265 >> 6)) & (1 << v265)))
      {
        goto LABEL_578;
      }
      if (!v398) {
        goto LABEL_587;
      }
      if (!HIDWORD(v398)) {
        goto LABEL_578;
      }
      if (v398 == 8)
      {
        if (HIDWORD(v398) == 8)
        {
          uint64_t v297 = v399 > HIDWORD(v399);
          unint64_t v320 = (_DWORD *)((unint64_t)&v399 | (4 * v297));
          *unint64_t v320 = v375;
          if (v382)
          {
            unsigned int v321 = v375;
            while (v321 >= *(_DWORD *)((unint64_t)&v400 | (4 * v297)) + 1)
            {
              char v322 = v321;
              unint64_t v323 = (v393 >> 1) & ~(-1 << (v393 >> 58));
              if ((v393 & 1) == 0)
              {
                char v322 = v321 & 0x3F;
                unint64_t v323 = *(void *)(*(void *)v393 + 8 * (v321 >> 6));
              }
              if ((v323 >> v322))
              {
                *unint64_t v320 = v321;
                break;
              }
              --v321;
              if (!--v382) {
                break;
              }
            }
          }
          sub_1CC789E94(v297, (uint64_t)&v401, (uint64_t)&v388 + 2, (uint64_t)&v398, (uint64_t)&v400, (uint64_t)&v399, (uint64_t)&v387, (uint64_t)&v388, (uint64_t)v429, &v426, v396, 1);
          int v294 = v377;
          goto LABEL_588;
        }
LABEL_578:
        LODWORD(v297) = 1;
        goto LABEL_588;
      }
      if (HIDWORD(v398) == 8) {
        goto LABEL_587;
      }
      if (v265 >= v399)
      {
        if (v265 >= HIDWORD(v399))
        {
          BOOL v324 = v399 > HIDWORD(v399);
LABEL_678:
          LODWORD(v297) = !v324;
          goto LABEL_588;
        }
        unsigned int v325 = 100 * (v265 - v399) / (v265 - v375);
        unsigned int v326 = 100 * (HIDWORD(v399) - v265) / (HIDWORD(v399) - HIDWORD(v400));
      }
      else
      {
        if (v265 < HIDWORD(v399))
        {
          BOOL v324 = HIDWORD(v399) > v399;
          goto LABEL_678;
        }
        unsigned int v325 = 100 * (v399 - v265) / ((int)v399 - (int)v400);
        unsigned int v326 = 100 * (v265 - HIDWORD(v399)) / (v265 - v375);
      }
      LODWORD(v297) = v325 >= v326;
      goto LABEL_588;
    }
    if (v398 >= 8)
    {
      LODWORD(v399) = v375;
      sub_1CC789E94(0, (uint64_t)&v401, (uint64_t)&v388 + 2, (uint64_t)&v398, (uint64_t)&v400, (uint64_t)&v399, (uint64_t)&v387, (uint64_t)&v388, (uint64_t)v429, &v426, v396, 1);
      int v294 = v377;
    }
LABEL_587:
    LODWORD(v297) = 0;
LABEL_588:
    ++*((_DWORD *)&v398 + v297);
    unsigned int v299 = *((_DWORD *)&v400 + v297);
    if (v299 <= v296) {
      unsigned int v299 = v296;
    }
    *((_DWORD *)&v400 + v297) = v299;
    unsigned int v300 = *((_DWORD *)&v399 + v297);
    uint64_t v301 = v297;
    if (v265 < v300) {
      unsigned int v300 = v265;
    }
    *((_DWORD *)&v399 + v297) = v300;
    *((unsigned char *)&v387 + v297) |= *((unsigned char *)v294 + 9);
    *((unsigned char *)&v388 + v297) |= *((unsigned char *)v294 + 28);
    if (*((unsigned char *)v294 + 11)) {
      ++*((_DWORD *)&v401 + v297);
    }
    int v254 = v369;
    if (v294[8] == 1)
    {
      int v302 = v294[5];
      int v383 = v302;
      if (v386)
      {
        LODWORD(v303) = (v386 - 1) & (37 * v302);
        uint64_t v304 = (int *)(v385[0] + 8 * v303);
        int v305 = *v304;
        if (v302 == *v304) {
          goto LABEL_597;
        }
        int v327 = 1;
        while (v305 != -1)
        {
          int v328 = v303 + v327++;
          uint64_t v303 = v328 & (v386 - 1);
          int v305 = *(_DWORD *)(v385[0] + 8 * v303);
          if (v302 == v305)
          {
            uint64_t v304 = (int *)(v385[0] + 8 * v303);
            goto LABEL_597;
          }
        }
      }
      uint64_t v304 = (int *)(v385[0] + 8 * v386);
LABEL_597:
      if ((int *)(v385[0] + 8 * v386) == v304) {
        int v306 = 0;
      }
      else {
        int v306 = sub_1CB8387D8((uint64_t)v385, &v383)[1];
      }
      sub_1CB8387D8((uint64_t)v385, &v383)[1] = v306 | 1;
    }
    __int16 v307 = *((_WORD *)v376 + 22);
    if ((v307 & 0xC) == 0 || (uint64_t v308 = v376, (v307 & 4) != 0))
    {
      if ((*(unsigned char *)(*((void *)v376 + 2) + 10) & 0x40) == 0) {
        goto LABEL_608;
      }
LABEL_609:
      int v310 = -3;
    }
    else
    {
      while (1)
      {
        uint64_t v309 = *((void *)v308 + 2);
        if ((*(unsigned char *)(v309 + 10) & 0x40) == 0 && *(_WORD *)v309 != 20) {
          break;
        }
        if ((*((_WORD *)v308 + 22) & 8) == 0) {
          goto LABEL_609;
        }
        uint64_t v308 = (llvm::MachineInstr *)*((void *)v308 + 1);
      }
LABEL_608:
      int v310 = -1;
    }
    *(void *)(*((void *)v376 + 4)
              + 32 * (llvm::MachineInstr::getNumExplicitOperands((uint64_t)v376) + v310)
              + 16) = v301;
LABEL_611:
    if (++v253 != v254) {
      continue;
    }
    break;
  }
  uint64_t v395 = 0x100000000;
  if (HIDWORD(v399) < v399) {
    uint64_t v395 = 1;
  }
LABEL_691:
  char v329 = 0;
  uint64_t v330 = 0;
  do
  {
    char v331 = v329;
    uint64_t v332 = *(unsigned int *)&v396[4 * v330 - 8];
    if (*((_DWORD *)&v398 + v332) && *((unsigned char *)&v387 + v332)) {
      sub_1CC789E94(v332, (uint64_t)&v401, (uint64_t)&v388 + 2, (uint64_t)&v398, (uint64_t)&v400, (uint64_t)&v399, (uint64_t)&v387, (uint64_t)&v388, (uint64_t)v429, &v426, v396, 1);
    }
    char v329 = 1;
    uint64_t v330 = 1;
  }
  while ((v331 & 1) == 0);
  unsigned int v333 = *(void **)(v358 + 328);
  if (v333 != v14)
  {
    unint64_t v334 = 0;
    int v335 = 0;
    unsigned int v336 = *(unsigned __int8 **)v396;
    int v337 = (unsigned __int8 *)v426;
    do
    {
      uint64_t v338 = v333 + 6;
      uint64_t v339 = (void *)v333[7];
      unint64_t v340 = LODWORD(v429[1]);
      if (LODWORD(v429[1]) > v334 && v339 != v338)
      {
        do
        {
          int v342 = *((_DWORD *)v429[0] + v334);
          if (v335 != v342)
          {
            do
            {
              while (1)
              {
                BOOL v343 = (unsigned __int16 *)v339[2];
                int v344 = *v343;
                BOOL v345 = (v344 - 9) > 0x3C
                    || ((1 << (v344 - 9)) & 0x1000000000000605) == 0;
                BOOL v346 = !v345 || v344 == 0;
                if (v346 || (v343[4] & 0x10) != 0) {
                  break;
                }
                if ((*(unsigned char *)v339 & 4) == 0)
                {
                  while ((*((_WORD *)v339 + 22) & 8) != 0)
                    uint64_t v339 = (void *)v339[1];
                }
                uint64_t v339 = (void *)v339[1];
                if (++v335 == v342 || v339 == v338) {
                  goto LABEL_721;
                }
              }
              if ((*(unsigned char *)v339 & 4) == 0)
              {
                while ((*((_WORD *)v339 + 22) & 8) != 0)
                  uint64_t v339 = (void *)v339[1];
              }
              uint64_t v339 = (void *)v339[1];
            }
            while (v339 != v338);
            uint64_t v339 = v333 + 6;
          }
LABEL_721:
          if (v335 != v342 && v339 == v338) {
            break;
          }
          unsigned int v348 = *v337++;
          uint64_t v239 = v348;
          if (!*v336++)
          {
            int v350 = v333 + 6;
            if (v339 != v338)
            {
              while (*(_WORD *)v339[2] == 3)
              {
                if ((*(unsigned char *)v339 & 4) == 0)
                {
                  while ((*((_WORD *)v339 + 22) & 8) != 0)
                    uint64_t v339 = (void *)v339[1];
                }
                uint64_t v339 = (void *)v339[1];
                if (v339 == v338)
                {
                  int v350 = v333 + 6;
                  goto LABEL_734;
                }
              }
              int v350 = v339;
            }
LABEL_734:
            (*(void (**)(uint64_t, void *, void *, uint64_t, uint64_t))(*(void *)v7[31] + 16))(v7[31], v350, v333, v239, v7[32]);
            unint64_t v340 = LODWORD(v429[1]);
            uint64_t v339 = v350;
          }
        }
        while (++v334 < v340 && v339 != v338);
        unint64_t v334 = v334;
      }
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7[31] + 128))(v7[31], v333, v7[33], v239);
      unsigned int v333 = (void *)v333[1];
    }
    while (v333 != (void *)(v358 + 320));
  }
  MEMORY[0x1D25D9CD0](v385[0], 4);
  if (*(unsigned char **)v396 != v397) {
    free(*(void **)v396);
  }
  int v241 = v365;
  if (v426 != v428) {
    free(v426);
  }
  if (v429[0] != &v429[2]) {
    free(v429[0]);
  }
LABEL_748:
  MEMORY[0x1D25D9CD0](v390[0], 8);
  sub_1CB833A08((uint64_t)&v405, v406);
  if (v402 != v404) {
    free(v402);
  }
  unint64_t v352 = v392;
  if ((v392 & 1) == 0 && v392)
  {
    if (*(void *)v392 != v392 + 16) {
      free(*(void **)v392);
    }
    MEMORY[0x1D25D9CE0](v352, 0x1080C40EF38A13ELL);
  }
  unint64_t v353 = v393;
  if ((v393 & 1) == 0 && v393)
  {
    if (*(void *)v393 != v393 + 16) {
      free(*(void **)v393);
    }
    MEMORY[0x1D25D9CE0](v353, 0x1080C40EF38A13ELL);
  }
  if (v408 != v410) {
    free(v408);
  }
  uint64_t v354 = (char *)v412;
  if (v413)
  {
    uint64_t v355 = 144 * v413;
    do
    {
      sub_1CB833A08((uint64_t)&v354[v355 - 24], *(void **)&v354[v355 - 16]);
      unint64_t v356 = *(char **)&v354[v355 - 104];
      if (&v354[v355 - 88] != v356) {
        free(v356);
      }
      v355 -= 144;
    }
    while (v355);
    uint64_t v354 = (char *)v412;
  }
  if (v354 != v414) {
    free(v354);
  }
  if ((v411[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v411[1], 8);
  }
  free(v418);
  if (v415 != v417) {
    free(v415);
  }
  free(v423);
  if (v420 != v422) {
    free(v420);
  }
  return v241 != 0;
}

uint64_t sub_1CC789DC8(int *a1, uint64_t a2)
{
  char v2 = a1 + 2;
  int v3 = *a1;
  if (*a1)
  {
    int v4 = 32;
    uint64_t v5 = a1 + 2;
  }
  else
  {
    uint64_t v5 = (int *)*((void *)a1 + 1);
    int v4 = a1[4];
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_10;
    }
  }
  int v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = &v5[4 * v7];
  uint64_t v9 = *(void *)v8;
  if (*(void *)v8 == a2) {
    goto LABEL_11;
  }
  int v10 = 1;
  while (v9 != -4096)
  {
    int v11 = v7 + v10++;
    uint64_t v7 = v11 & v6;
    uint64_t v9 = *(void *)&v5[4 * v7];
    if (v9 == a2) {
      goto LABEL_10;
    }
  }
  if (v3)
  {
    uint64_t v7 = 32;
    uint64_t v5 = a1 + 2;
  }
  else
  {
    uint64_t v5 = (int *)*((void *)a1 + 1);
    uint64_t v7 = a1[4];
  }
LABEL_10:
  uint64_t v8 = &v5[4 * v7];
LABEL_11:
  if (v3)
  {
    uint64_t v12 = 32;
  }
  else
  {
    char v2 = (int *)*((void *)a1 + 1);
    uint64_t v12 = a1[4];
  }
  if (&v2[4 * v12] == v8) {
    int v13 = (unsigned int *)(a1 + 132);
  }
  else {
    int v13 = (unsigned int *)(v8 + 2);
  }
  return *((void *)a1 + 65) + 144 * *v13;
}

uint64_t sub_1CC789E94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, char a12)
{
  if (a12)
  {
    unsigned int v12 = *(_DWORD *)(a9 + 8);
    if (v12 >= *(_DWORD *)(a9 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a9 + 4 * v12) = *(_DWORD *)(a6 + 4 * result);
    ++*(_DWORD *)(a9 + 8);
    uint64_t v13 = a10[1];
    if ((unint64_t)(v13 + 1) > a10[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a10 + v13) = result != 0;
    ++a10[1];
    uint64_t v14 = a11[1];
    if ((unint64_t)(v14 + 1) > a11[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a11 + v14) = *(unsigned char *)(a8 + result);
    ++a11[1];
  }
  *(_DWORD *)(a2 + 4 * result) = 0;
  *(unsigned char *)(a3 + result) = 0;
  *(_DWORD *)(a4 + 4 * result) = 0;
  *(_DWORD *)(a5 + 4 * result) = 0;
  *(_DWORD *)(a6 + 4 * result) = -1;
  *(unsigned char *)(a7 + result) = 0;
  *(unsigned char *)(a8 + result) = 0;
  return result;
}

void sub_1CC78A024(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int a5)
{
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    int v11 = (void *)(a1 + 120);
    int v10 = *(void **)(a1 + 120);
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 40) = 0;
    sub_1CB833A08(a1 + 112, v10);
    *(v11 - 1) = v11;
    void *v11 = 0;
    v11[1] = 0;
    *((_DWORD *)v11 - 24) = a5;
    if (*((_DWORD *)v11 - 26) == 2) {
      *(_DWORD *)(a1 + 16) = 1;
    }
    --*a4;
    int v12 = *(unsigned __int8 *)(a1 + 2);
    if (*(unsigned char *)(a1 + 2))
    {
      uint64_t v13 = *(unsigned int *)(a2 + 528);
      if (v13)
      {
        uint64_t v14 = 144 * v13;
        unsigned int v15 = (unsigned int *)(*(void *)(a2 + 520) + 20);
        do
        {
          unsigned int v16 = *v15;
          if (*v15 > a3 && *(v15 - 1) < *(_DWORD *)(a1 + 8) && *((unsigned __int8 *)v15 - 10) == v12)
          {
            *unsigned int v15 = a3;
            if (v16 == -1) {
              --*a4;
            }
          }
          v15 += 36;
          v14 -= 144;
        }
        while (v14);
      }
    }
  }
}

void sub_1CC78A124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = v22;
  uint64_t v21 = 0x800000000;
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(void *)a1 + 88))(a1, a3, a2, &v20, v18);
  if (v21)
  {
    int v6 = (char *)v20;
    uint64_t v7 = (char *)v20 + 4 * v21;
    uint64_t v8 = a4[18];
    LODWORD(v9) = *((_DWORD *)a4 + 2);
    do
    {
      uint64_t v10 = *(unsigned int *)v6;
      unsigned int v11 = *(unsigned __int16 *)(v8 + 2 * v10);
      if (v9 > v11)
      {
        uint64_t v12 = *a4;
        unsigned int v13 = *(unsigned __int16 *)(v8 + 2 * v10);
        while (1)
        {
          unsigned int v14 = v13;
          if (*(_DWORD *)(v12 + 16 * v13) == v10) {
            break;
          }
          v13 += 0x10000;
          if (v14 + 0x10000 >= v9) {
            goto LABEL_16;
          }
        }
        if (*(void *)(v12 + 16 * v13 + 8) == a3)
        {
          uint64_t v15 = v12 + 16 * v9;
          while (1)
          {
            unsigned int v16 = v11;
            if (*(_DWORD *)(v12 + 16 * v11) == v10) {
              break;
            }
            v11 += 0x10000;
            if (v16 + 0x10000 >= v9) {
              goto LABEL_16;
            }
          }
          unsigned int v17 = (_OWORD *)(v12 + 16 * v11);
          if ((_OWORD *)(v15 - 16) != v17)
          {
            *unsigned int v17 = *(_OWORD *)(v15 - 16);
            uint64_t v9 = *((unsigned int *)a4 + 2);
            uint64_t v8 = a4[18];
            *(_WORD *)(v8 + 2 * *(unsigned int *)(*a4 + 16 * v9 - 16)) = (v17 - *a4) >> 4;
          }
          LODWORD(v9) = v9 - 1;
          *((_DWORD *)a4 + 2) = v9;
        }
      }
LABEL_16:
      v6 += 4;
    }
    while (v6 != v7);
  }
  if (v18[0] != v19) {
    free(v18[0]);
  }
  if (v20 != v22) {
    free(v20);
  }
}

uint64_t *sub_1CC78A2D8(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result[26] + 2 * a2);
  unsigned int v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    uint64_t v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 24 * v2) == a2)
      {
        unsigned int v5 = *(_DWORD *)(v4 + 24 * v2 + 16);
        if (v5 != -1 && *(_DWORD *)(v4 + 24 * v5 + 20) == -1) {
          break;
        }
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_1CC78A348(uint64_t a1, uint64_t *a2)
{
  v94[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v80 = *a2;
  int v81 = 0;
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 32;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      unsigned int v16 = 0;
      goto LABEL_18;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v7 = v6 - 1;
  uint64_t v8 = (v6 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v9 = (void *)(v5 + 16 * v8);
  uint64_t v10 = *v9;
  if (v4 == *v9)
  {
LABEL_14:
    unsigned int v15 = *(_DWORD *)(v5 + 16 * v8 + 8);
    return *(void *)(a1 + 520) + 144 * v15 + 8;
  }
  unsigned int v11 = 0;
  int v12 = 1;
  while (v10 != -4096)
  {
    if (v11) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v10 == -8192;
    }
    if (v13) {
      unsigned int v11 = v9;
    }
    int v14 = v8 + v12++;
    uint64_t v8 = v14 & v7;
    uint64_t v9 = (void *)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (v4 == *v9) {
      goto LABEL_14;
    }
  }
  if (v11) {
    unsigned int v16 = v11;
  }
  else {
    unsigned int v16 = v9;
  }
LABEL_18:
  unint64_t v79 = (unsigned int *)&v91;
  unsigned int v17 = v89;
  uint64_t v18 = sub_1CBA7354C(a1, (uint64_t)&v80, &v80, v16);
  void *v18 = v80;
  *((_DWORD *)v18 + 2) = v81;
  *(_DWORD *)&v82[3] = 0;
  *(_DWORD *)uint64_t v82 = 0;
  *(void *)&v82[8] = -1;
  *(_DWORD *)&v82[16] = 0;
  *(_DWORD *)&v82[24] = 0;
  BOOL v83 = v85;
  uint64_t v84 = 0x1000000000;
  v87[0] = 0;
  v87[1] = 0;
  uint64_t v86 = v87;
  uint64_t v19 = *a2;
  v89[0] = *(_OWORD *)v82;
  *(_OWORD *)((char *)v89 + 12) = *(_OWORD *)&v82[12];
  uint64_t v88 = v19;
  uint64_t v90 = v92;
  uint64_t v91 = 0x1000000000;
  v94[0] = 0;
  v94[1] = 0;
  uint64_t v93 = v94;
  uint64_t v20 = *(unsigned int *)(a1 + 528);
  uint64_t v21 = *(unsigned int *)(a1 + 532);
  unint64_t v22 = *(char **)(a1 + 520);
  if (v20 >= v21)
  {
    unint64_t v39 = v20 + 1;
    BOOL v41 = v22 <= (char *)&v88 && &v22[144 * v20] > (char *)&v88;
    unint64_t v42 = -1;
    if (v41) {
      unint64_t v42 = 0x8E38E38E38E38E39 * (((char *)&v88 - v22) >> 4);
    }
    if (v20 == -1) {
      sub_1CD0A88F0(v39);
    }
    unint64_t v76 = v42;
    if (v21 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v43 = (2 * v21) | 1;
    if (v43 <= v39) {
      unint64_t v43 = v20 + 1;
    }
    if (v43 >= 0xFFFFFFFF) {
      unint64_t v43 = 0xFFFFFFFFLL;
    }
    int v75 = v43;
    uint64_t v44 = (char *)malloc_type_malloc(144 * v43, 0x4065EBACuLL);
    if (!v44) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unint64_t v22 = v44;
    uint64_t v45 = *(char **)(a1 + 520);
    uint64_t v46 = *(unsigned int *)(a1 + 528);
    if (v46)
    {
      BOOL v74 = v41;
      uint64_t v47 = 0;
      uint64_t v48 = 144 * v46;
      do
      {
        uint64_t v49 = &v45[v47];
        unint64_t v50 = &v22[v47];
        *(void *)unint64_t v50 = *(void *)&v45[v47];
        long long v51 = *(_OWORD *)&v45[v47 + 8];
        *(_OWORD *)(v50 + 20) = *(_OWORD *)&v45[v47 + 20];
        *(_OWORD *)(v50 + 8) = v51;
        unsigned int v52 = &v22[v47 + 56];
        *(void *)&v22[v47 + 40] = v52;
        *((void *)v50 + 6) = 0x1000000000;
        if (v45 != v22)
        {
          unint64_t v53 = *((unsigned int *)v49 + 12);
          if (*((_DWORD *)v49 + 12))
          {
            unint64_t v58 = (const void *)*((void *)v49 + 5);
            unint64_t v59 = &v45[v47];
            uint64_t v60 = (uint64_t)&v45[v47 + 56];
            if ((const void *)v60 == v58)
            {
              uint64_t v72 = v48;
              uint64_t v73 = v47;
              int v77 = v45;
              int v71 = *((_DWORD *)v49 + 12);
              if (v53 >= 0x11) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v52, v58, 4 * v53);
              uint64_t v48 = v72;
              *((_DWORD *)v50 + 12) = v71;
              uint64_t v45 = v77;
              uint64_t v47 = v73;
            }
            else
            {
              *(void *)&v22[v47 + 40] = v58;
              *((_DWORD *)v50 + 12) = v53;
              *((_DWORD *)v50 + 13) = *((_DWORD *)v59 + 13);
              *((void *)v49 + 5) = v60;
              *((_DWORD *)v59 + 13) = 0;
            }
            *((_DWORD *)v49 + 12) = 0;
          }
        }
        *((void *)v50 + 15) = *((void *)v49 + 15);
        unsigned int v54 = v49 + 128;
        uint64_t v55 = *((void *)v49 + 16);
        *((void *)v50 + 16) = v55;
        uint64_t v56 = v50 + 128;
        uint64_t v57 = *((void *)v49 + 17);
        *((void *)v50 + 17) = v57;
        if (v57)
        {
          *(void *)(v55 + 16) = v56;
          *((void *)v49 + 15) = v54;
          *unsigned int v54 = 0;
          *((void *)v49 + 17) = 0;
        }
        else
        {
          *((void *)v50 + 15) = v56;
        }
        v47 += 144;
      }
      while (v48 != v47);
      uint64_t v45 = *(char **)(a1 + 520);
      uint64_t v61 = *(unsigned int *)(a1 + 528);
      if (v61)
      {
        uint64_t v62 = 144 * v61;
        BOOL v78 = *(char **)(a1 + 520);
        do
        {
          unint64_t v63 = &v45[v62];
          sub_1CB833A08((uint64_t)&v45[v62 - 24], *(void **)&v45[v62 - 16]);
          int v64 = (char *)*((void *)v63 - 13);
          if (v63 - 88 != v64) {
            free(v64);
          }
          v62 -= 144;
          uint64_t v45 = v78;
        }
        while (v62);
        uint64_t v45 = *(char **)(a1 + 520);
      }
      BOOL v41 = v74;
    }
    if (v45 != (char *)(a1 + 536)) {
      free(v45);
    }
    *(void *)(a1 + 520) = v22;
    *(_DWORD *)(a1 + 532) = v75;
    int v65 = &v22[144 * v76];
    BOOL v66 = !v41;
    if (v41) {
      unint64_t v23 = (uint64_t *)&v22[144 * v76];
    }
    else {
      unint64_t v23 = &v88;
    }
    unint64_t v67 = (long long *)(v65 + 8);
    uint64_t v68 = (void **)(v65 + 40);
    unsigned int v69 = (uint64_t *)(v65 + 48);
    uint64_t v70 = &v91;
    if (!v66) {
      uint64_t v70 = v69;
    }
    unint64_t v79 = (unsigned int *)v70;
    if (v66) {
      int v24 = &v90;
    }
    else {
      int v24 = v68;
    }
    if (!v66) {
      unsigned int v17 = v67;
    }
    LODWORD(v20) = *(_DWORD *)(a1 + 528);
    uint64_t v19 = *v23;
  }
  else
  {
    unint64_t v23 = &v88;
    int v24 = &v90;
  }
  uint64_t v25 = &v22[144 * v20];
  *(void *)uint64_t v25 = v19;
  uint64_t v26 = v25 + 56;
  long long v27 = *v17;
  long long v28 = *(long long *)((char *)v17 + 12);
  *((void *)v25 + 5) = v25 + 56;
  uint64_t v29 = (void **)(v25 + 40);
  *(_OWORD *)((char *)v29 - 20) = v28;
  *((_OWORD *)v29 - 2) = v27;
  v29[1] = (void *)0x1000000000;
  if (v29 != v24)
  {
    unsigned int v30 = *v79;
    if (*v79)
    {
      uint64_t v38 = *v24;
      if (*v24 == v23 + 7)
      {
        if (v30 >= 0x11) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v26, v38, 4 * *v79);
        *((_DWORD *)v29 + 2) = v30;
      }
      else
      {
        *uint64_t v29 = v38;
        *((_DWORD *)v29 + 2) = v30;
        *((_DWORD *)v29 + 3) = *((_DWORD *)v23 + 13);
        *int v24 = v23 + 7;
        *((_DWORD *)v23 + 13) = 0;
      }
      *unint64_t v79 = 0;
    }
  }
  int v31 = &v22[144 * v20];
  *((void *)v31 + 15) = v23[15];
  uint64_t v32 = (char **)(v31 + 120);
  int v33 = v23 + 16;
  uint64_t v34 = v23[16];
  *((void *)v31 + 16) = v34;
  unsigned int v35 = v31 + 128;
  uint64_t v36 = v23[17];
  *((void *)v35 + 1) = v36;
  if (v36)
  {
    *(void *)(v34 + 16) = v35;
    v23[15] = (uint64_t)v33;
    *int v33 = 0;
    v23[17] = 0;
  }
  else
  {
    _DWORD *v32 = v35;
  }
  ++*(_DWORD *)(a1 + 528);
  sub_1CB833A08((uint64_t)&v93, v94[0]);
  if (v90 != v92) {
    free(v90);
  }
  sub_1CB833A08((uint64_t)&v86, v87[0]);
  if (v83 != v85) {
    free(v83);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 528) - 1;
  *((_DWORD *)v18 + 2) = v15;
  return *(void *)(a1 + 520) + 144 * v15 + 8;
}

uint64_t llvm::AGX::str(uint64_t a1)
{
  sub_1CBF43AA8((uint64_t)v140);
  sub_1CBF435C4(v141, (uint64_t)"\"Instrs\":", 9);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 48) != -1)
  {
    unsigned int v2 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v3 = sub_1CBF435C4(v2, (uint64_t)"RateScaledInstructions", 22);
    sub_1CBF435C4(v3, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 8) != -1)
  {
    uint64_t v4 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v5 = sub_1CBF435C4(v4, (uint64_t)"NumFullRateInstructions", 23);
    sub_1CBF435C4(v5, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 12) != -1)
  {
    int v6 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v7 = sub_1CBF435C4(v6, (uint64_t)"NumHalfRateInstructions", 23);
    sub_1CBF435C4(v7, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 16) != -1)
  {
    uint64_t v8 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v9 = sub_1CBF435C4(v8, (uint64_t)"NumThirdRateInstructions", 24);
    sub_1CBF435C4(v9, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 20) != -1)
  {
    uint64_t v10 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v11 = sub_1CBF435C4(v10, (uint64_t)"NumQuarterRateInstructions", 26);
    sub_1CBF435C4(v11, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 24) != -1)
  {
    int v12 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    BOOL v13 = sub_1CBF435C4(v12, (uint64_t)"NumFifthRateInstructions", 24);
    sub_1CBF435C4(v13, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 28) != -1)
  {
    int v14 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v15 = sub_1CBF435C4(v14, (uint64_t)"NumSixthRateInstructions", 24);
    sub_1CBF435C4(v15, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 32) != -1)
  {
    unsigned int v16 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v17 = sub_1CBF435C4(v16, (uint64_t)"NumEighthRateInstructions", 25);
    sub_1CBF435C4(v17, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 36) != -1)
  {
    uint64_t v18 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v19 = sub_1CBF435C4(v18, (uint64_t)"NumTwelfthRateInstructions", 26);
    sub_1CBF435C4(v19, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 40) != -1)
  {
    uint64_t v20 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v21 = sub_1CBF435C4(v20, (uint64_t)"NumSixteenthRateInstructions", 28);
    sub_1CBF435C4(v21, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 44) != -1)
  {
    unint64_t v22 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v23 = sub_1CBF435C4(v22, (uint64_t)"NumThirtySecondRateInstructions", 31);
    sub_1CBF435C4(v23, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 228) != -1)
  {
    int v24 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v25 = sub_1CBF435C4(v24, (uint64_t)"RegsAllocated", 13);
    sub_1CBF435C4(v25, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if ((*(void *)(a1 + 428) & 0xFF00000000) != 0)
  {
    uint64_t v26 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    long long v27 = sub_1CBF435C4(v26, (uint64_t)"GPRUnusableOccupancy", 20);
    sub_1CBF435C4(v27, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 176) != -1)
  {
    long long v28 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v29 = sub_1CBF435C4(v28, (uint64_t)"SampleInstrs", 12);
    sub_1CBF435C4(v29, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 192) != -1)
  {
    unsigned int v30 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v31 = sub_1CBF435C4(v30, (uint64_t)"GlobalLdInstrs", 14);
    sub_1CBF435C4(v31, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    uint64_t v32 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v33 = sub_1CBF435C4(v32, (uint64_t)"GlobalStInstrs", 14);
    sub_1CBF435C4(v33, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 208) != -1)
  {
    uint64_t v34 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v35 = sub_1CBF435C4(v34, (uint64_t)"StackLdInstrs", 13);
    sub_1CBF435C4(v35, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 212) != -1)
  {
    uint64_t v36 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v37 = sub_1CBF435C4(v36, (uint64_t)"StackStInstrs", 13);
    sub_1CBF435C4(v37, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 224) != -1)
  {
    uint64_t v38 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v39 = sub_1CBF435C4(v38, (uint64_t)"CopyGPRInstrs", 13);
    sub_1CBF435C4(v39, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 168) != -1)
  {
    unsigned int v40 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    BOOL v41 = sub_1CBF435C4(v40, (uint64_t)"BrInstrs", 8);
    sub_1CBF435C4(v41, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 280) != -1)
  {
    unint64_t v42 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v43 = sub_1CBF435C4(v42, (uint64_t)"VertexInRegs", 12);
    sub_1CBF435C4(v43, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 232) != -1)
  {
    uint64_t v44 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v45 = sub_1CBF435C4(v44, (uint64_t)"RegsUsed", 8);
    sub_1CBF435C4(v45, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 268) != -1)
  {
    uint64_t v46 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v47 = sub_1CBF435C4(v46, (uint64_t)"StackSz", 7);
    sub_1CBF435C4(v47, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 276) != -1)
  {
    uint64_t v48 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v49 = sub_1CBF435C4(v48, (uint64_t)"MaxIPRSz", 8);
    sub_1CBF435C4(v49, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 252) != -1)
  {
    unint64_t v50 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    long long v51 = sub_1CBF435C4(v50, (uint64_t)"FlagRegCount", 12);
    sub_1CBF435C4(v51, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 420) != -1)
  {
    unsigned int v52 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v53 = sub_1CBF435C4(v52, (uint64_t)"IRsLiveOut", 10);
    sub_1CBF435C4(v53, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 92) != -1)
  {
    unsigned int v54 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v55 = sub_1CBF435C4(v54, (uint64_t)"UniformReadBytes", 16);
    sub_1CBF435C4(v55, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 304) != -1)
  {
    uint64_t v56 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v57 = sub_1CBF435C4(v56, (uint64_t)"NumLoops", 8);
    sub_1CBF435C4(v57, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 308) != -1)
  {
    unint64_t v58 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v59 = sub_1CBF435C4(v58, (uint64_t)"TotalLoopInsts", 14);
    sub_1CBF435C4(v59, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 312) != -1)
  {
    uint64_t v60 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v61 = sub_1CBF435C4(v60, (uint64_t)"TotalLoopDataInsts", 18);
    sub_1CBF435C4(v61, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(void *)(a1 + 320) != -1)
  {
    uint64_t v62 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v63 = sub_1CBF435C4(v62, (uint64_t)"WaitAndStallTime", 16);
    sub_1CBF435C4(v63, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 328) != -1.0)
  {
    int v64 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v65 = sub_1CBF435C4(v64, (uint64_t)"IntegralRegPressure", 19);
    sub_1CBF435C4(v65, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 336) != -1.0)
  {
    BOOL v66 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v67 = sub_1CBF435C4(v66, (uint64_t)"IntegralIRSTKPressure", 21);
    sub_1CBF435C4(v67, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 344) != -1.0)
  {
    uint64_t v68 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v69 = sub_1CBF435C4(v68, (uint64_t)"IntegralGPRPressure", 19);
    sub_1CBF435C4(v69, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 352) != -1.0)
  {
    uint64_t v70 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v71 = sub_1CBF435C4(v70, (uint64_t)"NumDeactivations", 16);
    sub_1CBF435C4(v71, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 360) != -1)
  {
    uint64_t v72 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v73 = sub_1CBF435C4(v72, (uint64_t)"NumTagChecks", 12);
    sub_1CBF435C4(v73, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(void *)(a1 + 368) != -1)
  {
    BOOL v74 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v75 = sub_1CBF435C4(v74, (uint64_t)"TotalIssueTime", 14);
    sub_1CBF435C4(v75, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(void *)(a1 + 376) != -1)
  {
    unint64_t v76 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v77 = sub_1CBF435C4(v76, (uint64_t)"TotalShaderLatency", 18);
    sub_1CBF435C4(v77, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(void *)(a1 + 384) != -1)
  {
    BOOL v78 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unint64_t v79 = sub_1CBF435C4(v78, (uint64_t)"TotalTimeInChannel", 18);
    sub_1CBF435C4(v79, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(void *)(a1 + 392) != -1)
  {
    uint64_t v80 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    int v81 = sub_1CBF435C4(v80, (uint64_t)"TotalCycleCount", 15);
    sub_1CBF435C4(v81, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 400) != -1)
  {
    uint64_t v82 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    BOOL v83 = sub_1CBF435C4(v82, (uint64_t)"UL1ReadsWrites", 14);
    sub_1CBF435C4(v83, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 436) != -1)
  {
    uint64_t v84 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    unsigned int v85 = sub_1CBF435C4(v84, (uint64_t)"TPP", 3);
    sub_1CBF435C4(v85, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 448) != -1)
  {
    uint64_t v86 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v87 = sub_1CBF435C4(v86, (uint64_t)"ResBusForwards", 14);
    sub_1CBF435C4(v87, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 192) != -1)
  {
    uint64_t v88 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    BOOL v89 = sub_1CBF435C4(v88, (uint64_t)"GenericLdInstrs", 15);
    sub_1CBF435C4(v89, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    uint64_t v90 = sub_1CBF435C4(v141, (uint64_t)", \"", 3);
    uint64_t v91 = sub_1CBF435C4(v90, (uint64_t)"GenericStInstrs", 15);
    sub_1CBF435C4(v91, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (byte_1EBD070E0)
  {
    sub_1CC78BC98((uint64_t)v140, "GPRsLiveOut", *(_DWORD *)(a1 + 416));
    sub_1CC78BC98((uint64_t)v140, "IRsLiveOut", *(_DWORD *)(a1 + 420));
    sub_1CC78BC98((uint64_t)v140, "STKsLiveOut", *(_DWORD *)(a1 + 424));
    sub_1CC78BC98((uint64_t)v140, "NumLUForwardedDuringSched", *(_DWORD *)(a1 + 404));
    sub_1CC78BC98((uint64_t)v140, "NumNonLUForwardedDuringSched", *(_DWORD *)(a1 + 408));
    sub_1CC78BC98((uint64_t)v140, "NumSampleTargetingSameTexClustered", *(_DWORD *)(a1 + 412));
    sub_1CC78BC98((uint64_t)v140, "NumAfterDis2x2", *(_DWORD *)(a1 + 136));
    sub_1CBF435C4(v141, (uint64_t)", \"DataInstrs\":", 15);
    uint64_t v94 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v94, (uint64_t)", \"ControlInstrs\":", 18);
    uint64_t v95 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v95, (uint64_t)", \"MoveInstrs\":", 15);
    unint64_t v96 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v96, (uint64_t)", \"ImmInstrs\":", 14);
    uint64_t v97 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v97, (uint64_t)", \"ALUInstrs\":", 14);
    uint64_t v98 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v98, (uint64_t)", \"Int16Instrs\":", 16);
    uint64_t v99 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v99, (uint64_t)", \"Int32Instrs\":", 16);
    unint64_t v100 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v100, (uint64_t)", \"FP16Instrs\":", 15);
    uint64_t v101 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v101, (uint64_t)", \"FP32Instrs\":", 15);
    unsigned int v102 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v102, (uint64_t)", \"LocalLdInstrs\":", 18);
    uint64_t v103 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v103, (uint64_t)", \"LocalStInstrs\":", 18);
    unsigned int v104 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v104, (uint64_t)", \"ComplexInstrs\":", 18);
    unint64_t v105 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v105, (uint64_t)", \"AtomicInstrs\":", 17);
    int v106 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v106, (uint64_t)", \"UniformMoveInstrs\":", 22);
    unsigned __int16 v107 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v107, (uint64_t)", \"UniformLdInstrs\":", 20);
    uint64_t v108 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v108, (uint64_t)", \"UniformMoveSz\":", 18);
    unsigned int v109 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v109, (uint64_t)", \"UniformLdSz\":", 16);
    uint64_t v110 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v110, (uint64_t)", \"LatencyHidingInstrs\":", 24);
    uint64_t v111 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v111, (uint64_t)", \"TotalStallCycles\":", 21);
    uint64_t v112 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v112, (uint64_t)", \"ImmStallCycles\":", 19);
    unint64_t v113 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v113, (uint64_t)", \"F16StallCycles\":", 19);
    int v114 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v114, (uint64_t)", \"F32StallCycles\":", 19);
    uint64_t v115 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v115, (uint64_t)", \"ComplexStallCycles\":", 23);
    int v116 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v116, (uint64_t)", \"MathCycles\":", 15);
    uint64_t v117 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v117, (uint64_t)", \"MathClauses\":", 16);
    __int16 v118 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v118, (uint64_t)", \"ShortClauseInefficiency\":", 28);
    uint64_t v119 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v119, (uint64_t)", \"AfterPixwaitInstrs\":", 23);
    uint64_t v120 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v120, (uint64_t)", \"AfterDis2x2Instrs\":", 22);
    int v121 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v121, (uint64_t)", \"AvgDis2x2InstID\":", 20);
    unint64_t v122 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v122, (uint64_t)", \"UnpairedMoveInstrs\":", 23);
    unint64_t v123 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v123, (uint64_t)", \"RegWrbacks\":", 15);
    uint64_t v124 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v124, (uint64_t)", \"MoveInstrWrbacks\":", 21);
    unsigned int v125 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v125, (uint64_t)", \"RegsFwded\":", 14);
    uint64_t v126 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v126, (uint64_t)", \"WDFInstrs\":", 14);
    uint64_t v127 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v127, (uint64_t)", \"IterateInstrs\":", 18);
    unint64_t v128 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v128, (uint64_t)", \"ForwardedIterates\":", 22);
    int v129 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v129, (uint64_t)", \"LoadCoefInstrs\":", 19);
    unsigned __int16 v130 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v130, (uint64_t)", \"CoeffRegs\":", 14);
    int v131 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v131, (uint64_t)", \"UniformRegs\":", 16);
    unsigned int v132 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v132, (uint64_t)", \"TextureRegs\":", 16);
    unsigned int v133 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v133, (uint64_t)", \"SamplerRegs\":", 16);
    uint64_t v134 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v134, (uint64_t)", \"CProgInstrs\":", 16);
    uint64_t v135 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v135, (uint64_t)", \"ImgStateBdgSz\":", 18);
    int v136 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v136, (uint64_t)", \"SmpStateBdgSz\":", 18);
    unint64_t v137 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v137, (uint64_t)", \"ThreadInvStackSz\":", 21);
    int v138 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v138, (uint64_t)", \"ControlDataSwitches\":", 24);
    uint64_t v139 = (void *)std::ostream::operator<<();
    sub_1CBF435C4(v139, (uint64_t)", \"NumLoops\":", 13);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v140[0] = *MEMORY[0x1E4FBA408];
  uint64_t v92 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v140 + *(void *)(v140[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v141[0] = v92;
  v141[1] = MEMORY[0x1E4FBA470] + 16;
  if (v142 < 0) {
    operator delete((void *)v141[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D25D9C00](&v143);
}

uint64_t sub_1CC78BC98(uint64_t result, const char *a2, int a3)
{
  if (a3 != -1)
  {
    uint64_t v5 = sub_1CBF435C4((void *)(result + 16), (uint64_t)", \"", 3);
    size_t v6 = strlen(a2);
    int v7 = sub_1CBF435C4(v5, (uint64_t)a2, v6);
    sub_1CBF435C4(v7, (uint64_t)"\":", 2);
    return std::ostream::operator<<();
  }
  return result;
}

uint64_t sub_1CC78BD24()
{
  *(void *)&long long v1 = "Print detailed performance statistic diagnostics";
  *((void *)&v1 + 1) = 48;
  sub_1CD63B338(&v1);

  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintDetailedPerfDiags, &dword_1CB82C000);
}

uint64_t sub_1CC78BD88()
{
  *(void *)&long long v1 = "Print human-readable operand annotations.";
  *((void *)&v1 + 1) = 41;
  char v2 = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&PrintOperandAnnotations, "print-operand-anotations", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintOperandAnnotations, &dword_1CB82C000);
  *(void *)&long long v1 = "Print raw integer FP immediates (useful for roundtripping).";
  *((void *)&v1 + 1) = 59;
  char v2 = 0;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&PrintRawFloatImms, "print-raw-float-imms", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintRawFloatImms, &dword_1CB82C000);
  *(void *)&long long v1 = "Print human-readable FP immediates.";
  *((void *)&v1 + 1) = 35;
  char v2 = 1;
  uint64_t v3 = &v2;
  sub_1CD3F48AC((uint64_t)&PrintHumanFloatImms, "print-human-float-imms", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintHumanFloatImms, &dword_1CB82C000);
  *(void *)&long long v1 = "Print additional comment statistics like ALU Live Regs.";
  *((void *)&v1 + 1) = 55;
  char v2 = 1;
  uint64_t v3 = &v2;
  sub_1CD41D15C((uint64_t)&PrintAdditionalCommentStats, "print-comment-stats", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintAdditionalCommentStats, &dword_1CB82C000);
  char v2 = 1;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Control if a branch label gets printed for diff purposes.";
  *((void *)&v1 + 1) = 57;
  sub_1CD4540A0((uint64_t)&PrintBranchLabels, "print-branch-labels", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintBranchLabels, &dword_1CB82C000);
  char v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Print registers canonically.";
  *((void *)&v1 + 1) = 28;
  sub_1CD63B420(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &PrintCanonicalRegs, &dword_1CB82C000);
}

void sub_1CC78BF7C()
{
}

uint64_t sub_1CC78C014(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA690;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261DB98;
  if ((a2 & 0xFF00000000) == 0)
  {
    uint64_t v4 = &qword_1EBCDA720;
    if (byte_1EBCDA737 < 0) {
      uint64_t v4 = (uint64_t *)qword_1EBCDA720;
    }
    uint64_t v5 = byte_1EBCDA737 & 0x7F;
    if (byte_1EBCDA737 < 0) {
      uint64_t v5 = unk_1EBCDA728;
    }
    if (v5 == 3)
    {
      if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 48)
      {
        LODWORD(a2) = 4;
      }
      else if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 49)
      {
        LODWORD(a2) = 5;
      }
      else if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 50)
      {
        LODWORD(a2) = 6;
      }
      else if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 51)
      {
        LODWORD(a2) = 7;
      }
      else if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 52)
      {
        LODWORD(a2) = 9;
      }
      else if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 53)
      {
        LODWORD(a2) = 10;
      }
      else if (*(_WORD *)v4 == 12647 && *((unsigned char *)v4 + 2) == 54)
      {
        LODWORD(a2) = 11;
      }
      else if (*(unsigned __int16 *)v4 ^ 0x3167 | *((unsigned __int8 *)v4 + 2) ^ 0x37)
      {
        LODWORD(a2) = 0;
      }
      else
      {
        LODWORD(a2) = 12;
      }
    }
    else if (v5 == 2)
    {
      if (*(_WORD *)v4 == 13415)
      {
        LODWORD(a2) = 1;
      }
      else
      {
        LODWORD(a2) = 2;
        if (*(_WORD *)v4 != 13671)
        {
          if (*(_WORD *)v4 == 14695) {
            LODWORD(a2) = 3;
          }
          else {
            LODWORD(a2) = 0;
          }
        }
      }
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  *(_DWORD *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA698, memory_order_acquire) != -1)
  {
    v15[0] = sub_1CC78BF7C;
    v15[1] = &PassRegistry;
    int v14 = v15;
    std::__call_once(&qword_1EBCDA698, &v14, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC78C274(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v520[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = &unk_1CD91C000;
  if ((*(_DWORD *)(a1 + 28) - 10) <= 0xFFFFFFF6)
  {
    uint64_t v4 = a2 + 24;
    uint64_t v5 = *(void *)(a2 + 32);
    size_t v6 = &dword_1CD912700[7744];
    uint64_t v460 = a2 + 24;
    if (v5 == a2 + 24)
    {
      uint64_t v49 = a2 + 24;
    }
    else
    {
      do
      {
        uint64_t v7 = v5 - 56;
        if (!v5) {
          uint64_t v7 = 0;
        }
        if ((*(unsigned char *)(v7 + 33) & 0x20) != 0)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          while (v8)
          {
            uint64_t v13 = *(void *)(v8 + 24);
            uint64_t v8 = *(void *)(v8 + 8);
            if (*(unsigned char *)(v13 + 16) == 84)
            {
              uint64_t v14 = *(void *)(v13 - 32);
              if (v14)
              {
                if (!*(unsigned char *)(v14 + 16)
                  && *(void *)(v14 + 24) == *(void *)(v13 + 72)
                  && (*(unsigned char *)(v14 + 33) & 0x20) != 0)
                {
                  int v15 = *(_DWORD *)(v14 + 36);
                  if (v15 > 2453)
                  {
                    if (v15 > 2527)
                    {
                      if ((v15 - 2528) < 8)
                      {
LABEL_42:
                        uint64_t v18 = 0;
                        uint64_t v17 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
                        unsigned int v16 = *(_DWORD **)(v17 + 32);
LABEL_43:
                        uint64_t v19 = 2;
LABEL_46:
                        uint64_t v20 = 0;
                        uint64_t v21 = *(const llvm::APInt **)v17;
                        unsigned int v479 = (void *)v19;
                        int v480 = v16;
                        int v481 = (const char *)v21;
                        uint64_t v482 = v18;
                        unint64_t v22 = **(uint64_t ***)v13;
                        uint64_t v488 = v490;
                        uint64_t v489 = 0x200000000;
                        uint64_t v493 = v22;
                        int v494 = &v502;
                        uint64_t v495 = v503;
                        uint64_t v496 = 0;
                        int v497 = 0;
                        __int16 v498 = 512;
                        char v499 = 7;
                        uint64_t v491 = 0;
                        unsigned int v492 = 0;
                        uint64_t v500 = 0;
                        uint64_t v501 = 0;
                        uint64_t v502 = &unk_1F2616E88;
                        v503[0] = &unk_1F2617008;
                        uint64_t v491 = *(uint64_t ***)(v13 + 40);
                        unsigned int v492 = (_DWORD *)(v13 + 24);
                        unint64_t v23 = *(void **)(v13 + 48);
                        int v484 = v23;
                        if (v23)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v484, (unsigned __int8 *)v23, 2);
                          uint64_t v20 = v484;
                        }
                        sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v20);
                        if (!v484)
                        {
LABEL_49:
                          int v24 = *(unsigned __int8 *)(v13 + 17) >> 1;
                          if (v24 == 127) {
                            int v24 = -1;
                          }
                          int v497 = v24;
                          if (v18)
                          {
                            uint64_t v25 = (const char **)sub_1CC790734(v18, (int *)&v479, 0, 0, (uint64_t)&v488);
                            uint64_t v26 = (uint64_t **)v491[7][5];
                            int v504 = (unsigned __int8 **)*v25;
                            uint64_t Declaration = llvm::Intrinsic::getDeclaration(v26, 2517, (uint64_t)&v504, 1);
                            if (Declaration) {
                              long long v28 = *(uint64_t ***)(Declaration + 24);
                            }
                            else {
                              long long v28 = 0;
                            }
                            int v484 = v25;
                            __int16 v507 = 257;
                            uint64_t v29 = sub_1CB845BAC((uint64_t *)&v488, v28, (uint64_t **)Declaration, (uint64_t *)&v484, 1, (uint64_t)&v504, 0);
                          }
                          else
                          {
                            uint64_t v29 = 0;
                          }
                          int v504 = (unsigned __int8 **)v506;
                          uint64_t v505 = 0x400000000;
                          unsigned int v30 = *(uint64_t ***)v13;
                          int v470 = *(uint64_t **)v13;
                          if ((*(_DWORD *)(*(void *)v13 + 8) & 0xFE) == 0x12)
                          {
                            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v493 + 1672), (llvm::Type *)4);
                            int v32 = *((_DWORD *)v30 + 8);
                            if (v32)
                            {
                              uint64_t v33 = v31;
                              for (int i = 0; i != v32; ++i)
                              {
                                __int16 v487 = 257;
                                unsigned int v35 = sub_1CB844364((uint64_t *)&v488, v33, v21, i, (uint64_t)&v484);
                                uint64_t v36 = sub_1CC790734((uint64_t)v35, (int *)&v479, v29, v18, (uint64_t)&v488);
                                if (v505 >= (unint64_t)HIDWORD(v505)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                v504[v505] = (unsigned __int8 *)v36;
                                LODWORD(v505) = v505 + 1;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v37 = sub_1CC790734((uint64_t)v21, (int *)&v479, v29, v18, (uint64_t)&v488);
                            if (v505 >= (unint64_t)HIDWORD(v505)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            v504[v505] = (unsigned __int8 *)v37;
                            LODWORD(v505) = v505 + 1;
                          }
                          if ((v470[1] & 0xFE) == 0x12)
                          {
                            llvm::FixedVectorType::get((llvm::FixedVectorType *)(***(void ***)v13 + 1672), (llvm::Type *)*((unsigned int *)v470 + 8));
                            BOOL v41 = (unsigned __int8 *)llvm::UndefValue::get(v38, v39);
                            uint64_t v42 = v505;
                            if (v505)
                            {
                              uint64_t v43 = 0;
                              do
                              {
                                uint64_t v44 = v504[v43];
                                __int16 v487 = 257;
                                uint64_t v45 = *(llvm::ConstantInt **)(*v493 + 1984);
                                unsigned int v46 = *(_DWORD *)(*v493 + 1992);
                                unsigned int v475 = v46 >> 8;
                                if (v46 >> 8 > 0x40) {
                                  operator new[]();
                                }
                                if (v46 <= 0xFF) {
                                  unint64_t v47 = 0;
                                }
                                else {
                                  unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v46) + 63);
                                }
                                int v474 = (llvm::FixedVectorType *)(v47 & v43);
                                uint64_t v48 = (unsigned __int8 *)llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v474, v40);
                                if (v475 >= 0x41 && v474) {
                                  MEMORY[0x1D25D9CB0](v474, 0x1000C8000313F17);
                                }
                                BOOL v41 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v488, v41, v44, v48, (uint64_t)&v484);
                                ++v43;
                              }
                              while (v42 != v43);
                            }
                          }
                          else
                          {
                            BOOL v41 = *v504;
                          }
                          if (*(uint64_t **)v41 != v470)
                          {
                            __int16 v487 = 257;
                            BOOL v41 = (unsigned __int8 *)sub_1CB845034((uint64_t)&v488, (uint64_t)v41, v470, (uint64_t)&v484);
                          }
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, (llvm::Value *)v41, (llvm::Value *)1);
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                        }
                        int v9 = *(unsigned __int8 *)v484;
                        if ((v9 - 4) > 0x1E)
                        {
                          if ((v9 - 3) >= 0xFFFFFFFE) {
                            int v12 = v484;
                          }
                          else {
                            int v12 = 0;
                          }
                          if ((v9 - 3) < 0xFFFFFFFE)
                          {
                            if (v9 == 3) {
                              *((void *)v484 + 1) = 0;
                            }
                            goto LABEL_49;
                          }
                          unint64_t v11 = (unint64_t)v12 + 8;
                        }
                        else
                        {
                          if ((*((unsigned char *)v484 + 1) & 0x7F) != 2 && !*((_DWORD *)v484 + 3)) {
                            goto LABEL_49;
                          }
                          uint64_t v10 = *((void *)v484 + 2);
                          if ((v10 & 4) == 0) {
                            goto LABEL_49;
                          }
                          unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
                          if (!v11) {
                            goto LABEL_49;
                          }
                        }
                        int v504 = (unsigned __int8 **)&v484;
                        sub_1CC5FA668(v11 + 16, &v504);
                        goto LABEL_49;
                      }
                      if ((v15 - 2536) < 8)
                      {
LABEL_39:
                        uint64_t v17 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
                        unsigned int v16 = *(_DWORD **)(v17 + 64);
                        uint64_t v18 = *(void *)(v17 + 32);
                        goto LABEL_43;
                      }
                    }
                    else
                    {
                      if ((v15 - 2454) < 8)
                      {
LABEL_40:
                        uint64_t v18 = 0;
                        unsigned int v16 = 0;
                        uint64_t v17 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
                        goto LABEL_41;
                      }
                      if ((v15 - 2462) < 8)
                      {
LABEL_33:
                        unsigned int v16 = 0;
                        uint64_t v17 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
                        uint64_t v18 = *(void *)(v17 + 32);
LABEL_41:
                        uint64_t v19 = 1;
                        goto LABEL_46;
                      }
                    }
                  }
                  else
                  {
                    switch(v15)
                    {
                      case 2309:
                      case 2310:
                      case 2311:
                      case 2312:
                      case 2313:
                      case 2314:
                      case 2315:
                      case 2316:
                        goto LABEL_44;
                      case 2317:
                      case 2318:
                      case 2319:
                      case 2320:
                      case 2321:
                      case 2322:
                      case 2323:
                      case 2324:
                        goto LABEL_40;
                      case 2325:
                      case 2326:
                      case 2327:
                      case 2328:
                      case 2329:
                      case 2330:
                      case 2331:
                      case 2332:
                        goto LABEL_42;
                      case 2333:
                      case 2334:
                      case 2335:
                      case 2336:
                        break;
                      case 2337:
                      case 2338:
                      case 2339:
                      case 2340:
                      case 2341:
                      case 2342:
                      case 2343:
                      case 2344:
                        goto LABEL_36;
                      case 2345:
                      case 2346:
                      case 2347:
                      case 2348:
                      case 2349:
                      case 2350:
                      case 2351:
                      case 2352:
                        goto LABEL_33;
                      case 2353:
                      case 2354:
                      case 2355:
                      case 2356:
                      case 2357:
                      case 2358:
                      case 2359:
                      case 2360:
                        goto LABEL_39;
                      default:
                        if ((v15 - 2115) < 8)
                        {
LABEL_44:
                          uint64_t v18 = 0;
                          unsigned int v16 = 0;
                          uint64_t v17 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
                          goto LABEL_45;
                        }
                        if ((v15 - 2123) < 8)
                        {
LABEL_36:
                          unsigned int v16 = 0;
                          uint64_t v17 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
                          uint64_t v18 = *(void *)(v17 + 32);
LABEL_45:
                          uint64_t v19 = 3;
                          goto LABEL_46;
                        }
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != v4);
      uint64_t v49 = *(void *)(a2 + 32);
      uint64_t v3 = (void *)&unk_1CD91C000;
      size_t v6 = dword_1CD912700 + 30976;
    }
    unint64_t v50 = *(uint64_t **)a2;
    uint64_t v488 = v490;
    uint64_t v489 = v3[9];
    uint64_t v493 = v50;
    int v494 = &v502;
    uint64_t v495 = v503;
    uint64_t v496 = 0;
    int v497 = 0;
    __int16 v498 = 512;
    char v499 = 7;
    uint64_t v491 = 0;
    unsigned int v492 = 0;
    uint64_t v501 = 0;
    uint64_t v500 = 0;
    uint64_t v502 = &unk_1F2616E88;
    v503[0] = &unk_1F2617008;
    int v484 = v486;
    uint64_t v485 = *((void *)v6 + 126);
    uint64_t v51 = v485;
    int v504 = (unsigned __int8 **)v506;
    uint64_t v505 = v485;
    if (v49 == v4)
    {
      char v150 = 0;
LABEL_302:
      if (v485)
      {
        uint64_t v151 = 8 * v485;
        do
        {
          uint64_t v152 = *(void *)((char *)v484 + v151 - 8);
          if (v152) {
            BOOL v153 = *(unsigned __int8 *)(v152 + 16) >= 0x1Cu;
          }
          else {
            BOOL v153 = 0;
          }
          if (v153) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          v151 -= 8;
        }
        while (v151);
      }
      if (v504 != (unsigned __int8 **)v506) {
        free(v504);
      }
      if (v484 != v486) {
        free(v484);
      }
      if (v488 != v490) {
        free(v488);
      }
      int v442 = v150 & 1;
      goto LABEL_318;
    }
    unsigned int v52 = 0;
    char v471 = 0;
    while (1)
    {
      uint64_t v53 = v49 - 56;
      if (!v49) {
        uint64_t v53 = 0;
      }
      if ((*(unsigned char *)(v53 + 33) & 0x20) != 0 && *(_DWORD *)(v53 + 36) == 2790)
      {
        uint64_t v54 = *(void *)(v53 + 8);
        if (v54) {
          break;
        }
      }
LABEL_152:
      uint64_t v49 = *(void *)(v49 + 8);
      if (v49 == v4)
      {
        if (v52)
        {
          while (1)
          {
            uint64_t v94 = (const char *)&v504[2 * v52];
            uint64_t v95 = (void *)*((void *)v94 - 2);
            uint64_t v96 = *((void *)v94 - 1);
            LODWORD(v505) = v52 - 1;
            if (*v95) {
              BOOL v97 = *(unsigned char *)(*v95 + 8) == 15;
            }
            else {
              BOOL v97 = 0;
            }
            BOOL v98 = v97 && *(void *)(*v95 + 24) == 0;
            if (v485 >= (unint64_t)HIDWORD(v485)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v484 + v485) = v95;
            LODWORD(v485) = v485 + 1;
            uint64_t v99 = v95[1];
            if (v99) {
              break;
            }
LABEL_297:
            unsigned int v52 = v505;
            if (!v505) {
              goto LABEL_300;
            }
          }
          unint64_t v100 = (uint64_t **)(v96 + 8);
          while (1)
          {
            uint64_t v101 = *(uint64_t **)(v99 + 24);
            uint64_t v99 = *(void *)(v99 + 8);
            int v102 = *((unsigned __int8 *)v101 + 16);
            if (v101 && v102 == 60 || v101 && v102 == 61 || v101 && v102 == 75)
            {
              uint64_t v103 = v101 - 4;
              if (*(v101 - 4))
              {
                *(void *)*(v101 - 2) = *(v101 - 3);
                uint64_t v104 = *(v101 - 3);
                if (v104) {
                  *(void *)(v104 + 16) = *(v101 - 2);
                }
              }
              uint64_t *v103 = v96;
              if (!v96) {
                goto LABEL_177;
              }
              unint64_t v105 = *v100;
              goto LABEL_174;
            }
            if (v101 && v102 == 62)
            {
              uint64_t v491 = (uint64_t **)v101[5];
              unsigned int v492 = v101 + 3;
              int v106 = (llvm::FixedVectorType *)v101[6];
              int v474 = v106;
              if (v106)
              {
                llvm::MetadataTracking::track((uint64_t)&v474, (unsigned __int8 *)v106, 2);
                unsigned __int16 v107 = v474;
              }
              else
              {
                unsigned __int16 v107 = 0;
              }
              sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v107);
              if (!v474) {
                goto LABEL_184;
              }
              int v133 = *(unsigned __int8 *)v474;
              if ((v133 - 4) > 0x1E)
              {
                if ((v133 - 3) >= 0xFFFFFFFE) {
                  uint64_t v139 = v474;
                }
                else {
                  uint64_t v139 = 0;
                }
                if ((v133 - 3) < 0xFFFFFFFE)
                {
                  if (v133 == 3) {
                    *((void *)v474 + 1) = 0;
                  }
                  goto LABEL_184;
                }
                unint64_t v135 = (unint64_t)v139 + 8;
LABEL_260:
                unsigned int v479 = &v474;
                sub_1CC5FA668(v135 + 16, &v479);
              }
              else if ((*((unsigned char *)v474 + 1) & 0x7F) == 2 || *((_DWORD *)v474 + 3))
              {
                uint64_t v134 = *((void *)v474 + 2);
                if ((v134 & 4) != 0)
                {
                  unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8;
                  if (v135) {
                    goto LABEL_260;
                  }
                }
              }
LABEL_184:
              unsigned int v479 = &v481;
              int v480 = (_DWORD *)v51;
              unsigned int v108 = *((_DWORD *)v101 + 5) & 0x7FFFFFF;
              if (v108 == 1)
              {
                unsigned int v109 = 0;
                uint64_t v110 = (uint64_t *)&v481;
              }
              else
              {
                unsigned int v109 = 0;
                unint64_t v125 = 0;
                uint64_t v126 = v101 + 4;
                do
                {
                  if (v109 >= HIDWORD(v480)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  ++v125;
                  *((void *)v479 + v109) = v126[-4 * v108];
                  unsigned int v109 = v480 + 1;
                  LODWORD(v480) = v480 + 1;
                  unsigned int v108 = *((_DWORD *)v101 + 5) & 0x7FFFFFF;
                  v126 += 4;
                }
                while (v125 < v108 - 1);
                uint64_t v110 = (uint64_t *)v479;
                uint64_t v2 = a2;
              }
              uint64_t v127 = v101[8];
              __int16 v477 = 257;
              uint64_t v111 = (unsigned __int8 *)sub_1CC27CEC0((uint64_t *)&v488, v127, (uint64_t *)v96, v110, v109, (uint64_t)&v474);
              if (v479 != &v481) {
                free(v479);
              }
              goto LABEL_222;
            }
            if (!v101 || v102 != 77)
            {
              if (!v101 || v102 != 78) {
                goto LABEL_177;
              }
              unsigned int v116 = *(_DWORD *)(*(void *)v96 + 8);
              if ((v116 & 0xFE) == 0x12) {
                unsigned int v116 = *(_DWORD *)(**(void **)(*(void *)v96 + 16) + 8);
              }
              uint64_t v117 = *v101;
              unsigned int v118 = *(_DWORD *)(*v101 + 8);
              if ((v118 & 0xFE) == 0x12) {
                unsigned int v118 = *(_DWORD *)(**(void **)(v117 + 16) + 8);
              }
              uint64_t v119 = (llvm::Type *)(v116 >> 8);
              if (v119 != v118 >> 8)
              {
                uint64_t v103 = v101 - 4;
                if (*(v101 - 4))
                {
                  *(void *)*(v101 - 2) = *(v101 - 3);
                  uint64_t v129 = *(v101 - 3);
                  if (v129) {
                    *(void *)(v129 + 16) = *(v101 - 2);
                  }
                }
                *(v101 - 4) = v96;
                unint64_t v105 = *(uint64_t **)(v96 + 8);
LABEL_174:
                *(v101 - 3) = (uint64_t)v105;
                if (v105) {
                  v105[2] = (uint64_t)(v101 - 3);
                }
                *(v101 - 2) = (uint64_t)v100;
                *unint64_t v100 = v103;
                goto LABEL_177;
              }
              uint64_t v111 = (unsigned __int8 *)v96;
              if (v98) {
                goto LABEL_223;
              }
              unint64_t v120 = llvm::PointerType::get(**(llvm::PointerType ***)(v117 + 16), v119);
              uint64_t v491 = (uint64_t **)v101[5];
              unsigned int v492 = v101 + 3;
              int v121 = (llvm::FixedVectorType *)v101[6];
              int v474 = v121;
              if (v121)
              {
                llvm::MetadataTracking::track((uint64_t)&v474, (unsigned __int8 *)v121, 2);
                unint64_t v122 = v474;
              }
              else
              {
                unint64_t v122 = 0;
              }
              sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v122);
              if (!v474) {
                goto LABEL_209;
              }
              int v146 = *(unsigned __int8 *)v474;
              if ((v146 - 4) > 0x1E)
              {
                if ((v146 - 3) >= 0xFFFFFFFE) {
                  uint64_t v149 = v474;
                }
                else {
                  uint64_t v149 = 0;
                }
                if ((v146 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v148 = (unint64_t)v149 + 8;
                  goto LABEL_293;
                }
                if (v146 == 3) {
                  *((void *)v474 + 1) = 0;
                }
              }
              else if ((*((unsigned char *)v474 + 1) & 0x7F) == 2 || *((_DWORD *)v474 + 3))
              {
                uint64_t v147 = *((void *)v474 + 2);
                if ((v147 & 4) != 0)
                {
                  unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFF8;
                  if (v148)
                  {
LABEL_293:
                    unsigned int v479 = &v474;
                    sub_1CC5FA668(v148 + 16, &v479);
                  }
                }
              }
LABEL_209:
              __int16 v477 = 257;
              if (*(void *)v96 == v120) {
                goto LABEL_254;
              }
              if (*(unsigned __int8 *)(v96 + 16) > 0x14u)
              {
                __int16 v483 = 257;
                uint64_t v111 = (unsigned __int8 *)llvm::CastInst::Create(49, v96, v120, (const char **)&v479, 0);
                (*(void (**)(void *, unsigned __int8 *, llvm::FixedVectorType **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v111, &v474, v491, v492);
                if (v489)
                {
                  unint64_t v123 = (llvm::MDNode **)v488;
                  uint64_t v124 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v111, *(_DWORD *)v123, v123[1]);
                    v123 += 2;
                  }
                  while (v123 != v124);
                }
                goto LABEL_197;
              }
              uint64_t v111 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v494
                                         + 28))(v494, 49, v96, v120);
              if (v111) {
                BOOL v136 = v111[16] >= 0x1Cu;
              }
              else {
                BOOL v136 = 0;
              }
              if (v136)
              {
                (*(void (**)(void *, unsigned __int8 *, llvm::FixedVectorType **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v111, &v474, v491, v492);
                if (v489)
                {
                  unint64_t v137 = (llvm::MDNode **)v488;
                  int v138 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v111, *(_DWORD *)v137, v137[1]);
                    v137 += 2;
                  }
                  while (v137 != v138);
                }
                goto LABEL_197;
              }
              goto LABEL_222;
            }
            uint64_t v111 = (unsigned __int8 *)v96;
            if (v98) {
              goto LABEL_222;
            }
            uint64_t v491 = (uint64_t **)v101[5];
            unsigned int v492 = v101 + 3;
            uint64_t v112 = (llvm::FixedVectorType *)v101[6];
            int v474 = v112;
            if (v112)
            {
              llvm::MetadataTracking::track((uint64_t)&v474, (unsigned __int8 *)v112, 2);
              unint64_t v113 = v474;
            }
            else
            {
              unint64_t v113 = 0;
            }
            sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v113);
            if (v474)
            {
              int v140 = *(unsigned __int8 *)v474;
              if ((v140 - 4) > 0x1E)
              {
                if ((v140 - 3) >= 0xFFFFFFFE) {
                  unsigned int v145 = v474;
                }
                else {
                  unsigned int v145 = 0;
                }
                if ((v140 - 3) < 0xFFFFFFFE)
                {
                  if (v140 == 3) {
                    *((void *)v474 + 1) = 0;
                  }
                  goto LABEL_192;
                }
                unint64_t v142 = (unint64_t)v145 + 8;
              }
              else
              {
                if ((*((unsigned char *)v474 + 1) & 0x7F) != 2 && !*((_DWORD *)v474 + 3)) {
                  goto LABEL_192;
                }
                uint64_t v141 = *((void *)v474 + 2);
                if ((v141 & 4) == 0) {
                  goto LABEL_192;
                }
                unint64_t v142 = v141 & 0xFFFFFFFFFFFFFFF8;
                if (!v142) {
                  goto LABEL_192;
                }
              }
              unsigned int v479 = &v474;
              sub_1CC5FA668(v142 + 16, &v479);
            }
LABEL_192:
            unsigned int v114 = *(_DWORD *)(*(void *)v96 + 8);
            if ((v114 & 0xFE) == 0x12) {
              unsigned int v114 = *(_DWORD *)(**(void **)(*(void *)v96 + 16) + 8);
            }
            unint64_t v115 = llvm::PointerType::get(**(llvm::PointerType ***)(*v101 + 16), (llvm::Type *)(v114 >> 8));
            __int16 v477 = 257;
            if (*(void *)v96 == v115)
            {
LABEL_254:
              uint64_t v111 = (unsigned __int8 *)v96;
              goto LABEL_222;
            }
            if (*(unsigned __int8 *)(v96 + 16) > 0x14u)
            {
              __int16 v483 = 257;
              uint64_t v111 = (unsigned __int8 *)llvm::CastInst::Create(49, v96, v115, (const char **)&v479, 0);
              (*(void (**)(void *, unsigned __int8 *, llvm::FixedVectorType **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v111, &v474, v491, v492);
              if (v489)
              {
                uint64_t v143 = (llvm::MDNode **)v488;
                uint64_t v144 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v111, *(_DWORD *)v143, v143[1]);
                  v143 += 2;
                }
                while (v143 != v144);
              }
LABEL_197:
              uint64_t v2 = a2;
              goto LABEL_222;
            }
            uint64_t v111 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v494 + 28))(v494, 49, v96, v115);
            if (v111) {
              BOOL v130 = v111[16] >= 0x1Cu;
            }
            else {
              BOOL v130 = 0;
            }
            if (v130)
            {
              (*(void (**)(void *, unsigned __int8 *, llvm::FixedVectorType **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v111, &v474, v491, v492);
              if (v489)
              {
                int v131 = (llvm::MDNode **)v488;
                unsigned int v132 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v111, *(_DWORD *)v131, v131[1]);
                  v131 += 2;
                }
                while (v131 != v132);
              }
              goto LABEL_197;
            }
LABEL_222:
            if (v111)
            {
LABEL_223:
              if (v505 >= (unint64_t)HIDWORD(v505)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v128 = (char *)&v504[2 * v505];
              *(void *)unint64_t v128 = v101;
              *((void *)v128 + 1) = v111;
              LODWORD(v505) = v505 + 1;
            }
LABEL_177:
            if (!v99) {
              goto LABEL_297;
            }
          }
        }
LABEL_300:
        uint64_t v3 = (void *)&unk_1CD91C000;
        char v150 = v471;
        goto LABEL_302;
      }
    }
    while (1)
    {
      int v75 = 0;
      if ((*(_DWORD *)(*(void *)(*(void *)(v54 + 24) - 32) + 32) & 0x2000) != 0) {
        unint64_t v76 = *(uint64_t ****)(v54 + 24);
      }
      else {
        unint64_t v76 = 0;
      }
      uint64_t v491 = v76[5];
      unsigned int v492 = v76 + 3;
      int v77 = (llvm::FixedVectorType *)v76[6];
      int v474 = v77;
      if (v77)
      {
        llvm::MetadataTracking::track((uint64_t)&v474, (unsigned __int8 *)v77, 2);
        int v75 = v474;
      }
      sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v75);
      if (v474)
      {
        int v55 = *(unsigned __int8 *)v474;
        if ((v55 - 4) > 0x1E)
        {
          if ((v55 - 3) >= 0xFFFFFFFE) {
            uint64_t v60 = v474;
          }
          else {
            uint64_t v60 = 0;
          }
          if ((v55 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v57 = (unint64_t)v60 + 8;
LABEL_109:
            unsigned int v479 = &v474;
            sub_1CC5FA668(v57 + 16, &v479);
            goto LABEL_136;
          }
          if (v55 == 3) {
            *((void *)v474 + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v474 + 1) & 0x7F) == 2 || *((_DWORD *)v474 + 3))
        {
          uint64_t v56 = *((void *)v474 + 2);
          if ((v56 & 4) != 0)
          {
            unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
            if (v57) {
              goto LABEL_109;
            }
          }
        }
      }
LABEL_136:
      llvm::Intrinsic::getType(*(uint64_t **)a2, 2789, 0, 0);
      Type = (llvm::PointerType *)llvm::Intrinsic::getType(*(uint64_t **)a2, 2789, 0, 0);
      llvm::Module::getOrInsertFunction(a2, "llvm.agx3.mesh.primdata.ptr", (const char *)0x1B, Type, 0);
      uint64_t v80 = (uint64_t **)v79;
      if (v79) {
        uint64_t v79 = *(void *)(v79 + 24);
      }
      __int16 v483 = 257;
      int v81 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v488, (uint64_t **)v79, v80, 0, 0, (uint64_t)&v479, 0);
      uint64_t v82 = v81;
      if ((*((unsigned char *)v76 + 23) & 0x10) != 0)
      {
        uint64_t v83 = ***v76;
        uint64_t v84 = *(void *)(v83 + 152);
        uint64_t v85 = *(unsigned int *)(v83 + 168);
        if (!v85) {
          goto LABEL_145;
        }
        LODWORD(v86) = (v85 - 1) & ((v76 >> 4) ^ (v76 >> 9));
        uint64_t v87 = (uint64_t ****)(v84 + 16 * v86);
        uint64_t v88 = *v87;
        if (*v87 != v76)
        {
          int v89 = 1;
          while (v88 != (uint64_t ***)-4096)
          {
            int v90 = v86 + v89++;
            uint64_t v86 = v90 & (v85 - 1);
            uint64_t v88 = *(uint64_t ****)(v84 + 16 * v86);
            if (v88 == v76)
            {
              uint64_t v87 = (uint64_t ****)(v84 + 16 * v86);
              goto LABEL_146;
            }
          }
LABEL_145:
          uint64_t v87 = (uint64_t ****)(v84 + 16 * v85);
        }
LABEL_146:
        uint64_t v91 = v87[1];
        uint64_t v92 = *v91;
        unint64_t v59 = (char *)(v91 + 2);
        unint64_t v58 = v92;
        goto LABEL_147;
      }
      unint64_t v58 = 0;
      unint64_t v59 = &byte_1CFBCE98E;
LABEL_147:
      __int16 v483 = 773;
      unsigned int v479 = v59;
      int v480 = v58;
      int v481 = "primdata_ptr";
      llvm::Value::setNameImpl(v81, (const char **)&v479);
      if (!v82 || *((unsigned char *)v82 + 16)) {
        goto LABEL_149;
      }
      if ((*((unsigned char *)v82 + 23) & 0x10) == 0)
      {
LABEL_127:
        int v74 = 0;
        *((_DWORD *)v82 + 8) &= ~0x2000u;
        goto LABEL_128;
      }
      uint64_t v61 = ***(void ***)v82;
      uint64_t v62 = *(void *)(v61 + 152);
      uint64_t v63 = *(unsigned int *)(v61 + 168);
      if (!v63) {
        goto LABEL_119;
      }
      LODWORD(v64) = (v63 - 1) & ((v82 >> 4) ^ (v82 >> 9));
      int v65 = (llvm::Value **)(v62 + 16 * v64);
      BOOL v66 = *v65;
      if (*v65 != v82)
      {
        int v67 = 1;
        while (v66 != (llvm::Value *)-4096)
        {
          int v68 = v64 + v67++;
          uint64_t v64 = v68 & (v63 - 1);
          BOOL v66 = *(llvm::Value **)(v62 + 16 * v64);
          if (v66 == v82)
          {
            int v65 = (llvm::Value **)(v62 + 16 * v64);
            goto LABEL_120;
          }
        }
LABEL_119:
        int v65 = (llvm::Value **)(v62 + 16 * v63);
      }
LABEL_120:
      unsigned int v69 = v65[1];
      unint64_t v72 = *(void *)v69;
      uint64_t v70 = (char *)v69 + 16;
      unint64_t v71 = v72;
      if (v72 < 5) {
        goto LABEL_127;
      }
      if (*(_DWORD *)v70 != *(_DWORD *)"llvm." || v70[4] != aLlvm_1[4]) {
        goto LABEL_127;
      }
      *((_DWORD *)v82 + 8) |= 0x2000u;
      int v74 = llvm::Function::lookupIntrinsicID(v70, v71);
LABEL_128:
      *((_DWORD *)v82 + 9) = v74;
LABEL_149:
      if (v505 >= (unint64_t)HIDWORD(v505)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v93 = (char *)&v504[2 * v505];
      *(void *)uint64_t v93 = v76;
      *((void *)v93 + 1) = v82;
      unsigned int v52 = v505 + 1;
      LODWORD(v505) = v505 + 1;
      uint64_t v54 = *(void *)(v54 + 8);
      if (!v54)
      {
        char v471 = 1;
        uint64_t v2 = a2;
        uint64_t v4 = v460;
        goto LABEL_152;
      }
    }
  }
  int v442 = 0;
LABEL_318:
  int v484 = v486;
  uint64_t v485 = 0x800000000;
  uint64_t v154 = *(void *)(v2 + 32);
  uint64_t v445 = v2 + 24;
  if (v154 == v2 + 24)
  {
    char v155 = 0;
    goto LABEL_850;
  }
  char v155 = 0;
  uint64_t v156 = v3[9];
  do
  {
    if (v154) {
      size_t v157 = v154 - 56;
    }
    else {
      size_t v157 = 0;
    }
    uint64_t v444 = v154;
    if ((*(unsigned char *)(v157 + 33) & 0x20) == 0) {
      goto LABEL_842;
    }
    int v158 = *(_DWORD *)(v157 + 36);
    if (v158 != 2776 && v158 != 2740)
    {
      unsigned int v457 = v158 - 2481;
      if ((v158 - 2481) < 2 || (v158 - 1278) <= 1)
      {
        uint64_t v225 = *(void *)(v157 + 8);
        if (v225)
        {
          int v448 = *(_DWORD *)(v157 + 36);
          size_t v450 = v157;
          unsigned int v226 = v158 - 2481;
          while (1)
          {
            uint64_t v227 = *(void *)(v225 + 24);
            if (*(unsigned char *)(v227 + 16) == 84
              && (uint64_t v228 = *(void *)(v227 - 32)) != 0
              && !*(unsigned char *)(v228 + 16)
              && *(void *)(v228 + 24) == *(void *)(v227 + 72))
            {
              if ((*(unsigned char *)(v228 + 33) & 0x20) != 0) {
                uint64_t v229 = *(void *)(v225 + 24);
              }
              else {
                uint64_t v229 = 0;
              }
            }
            else
            {
              uint64_t v229 = 0;
            }
            uint64_t v230 = 0;
            uint64_t v231 = *(uint64_t ***)(*(void *)(*(void *)(v229 + 40) + 56) + 40);
            uint64_t v232 = **(uint64_t ***)v229;
            uint64_t v488 = v490;
            uint64_t v489 = v156;
            uint64_t v493 = v232;
            int v494 = &v502;
            uint64_t v495 = v503;
            uint64_t v496 = 0;
            int v497 = 0;
            __int16 v498 = 512;
            char v499 = 7;
            uint64_t v491 = 0;
            unsigned int v492 = 0;
            uint64_t v500 = 0;
            uint64_t v501 = 0;
            uint64_t v502 = &unk_1F2616E88;
            v503[0] = &unk_1F2617008;
            uint64_t v491 = *(uint64_t ***)(v229 + 40);
            unsigned int v492 = (_DWORD *)(v229 + 24);
            uint64_t v233 = *(void **)(v229 + 48);
            unsigned int v479 = v233;
            if (v233)
            {
              llvm::MetadataTracking::track((uint64_t)&v479, (unsigned __int8 *)v233, 2);
              uint64_t v230 = v479;
            }
            sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v230);
            if (v479)
            {
              int v243 = *(unsigned __int8 *)v479;
              if ((v243 - 4) > 0x1E)
              {
                if ((v243 - 3) >= 0xFFFFFFFE) {
                  unsigned int v248 = v479;
                }
                else {
                  unsigned int v248 = 0;
                }
                if ((v243 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v245 = (unint64_t)v248 + 8;
LABEL_515:
                  int v504 = (unsigned __int8 **)&v479;
                  sub_1CC5FA668(v245 + 16, &v504);
                  goto LABEL_469;
                }
                if (v243 == 3) {
                  *((void *)v479 + 1) = 0;
                }
              }
              else if ((*((unsigned char *)v479 + 1) & 0x7F) == 2 || *((_DWORD *)v479 + 3))
              {
                uint64_t v244 = *((void *)v479 + 2);
                if ((v244 & 4) != 0)
                {
                  unint64_t v245 = v244 & 0xFFFFFFFFFFFFFFF8;
                  if (v245) {
                    goto LABEL_515;
                  }
                }
              }
            }
LABEL_469:
            unint64_t v234 = (uint64_t *)(v229 - 32 * (*(_DWORD *)(v229 + 20) & 0x7FFFFFF));
            uint64_t v235 = *v234;
            uint64_t v236 = v234[4];
            if (v226 > 1)
            {
              int v241 = 0;
              uint64_t v467 = 0;
              uint64_t v237 = 0;
              goto LABEL_535;
            }
            if (*(unsigned char *)(v235 + 16) == 17) {
              uint64_t v237 = *v234;
            }
            else {
              uint64_t v237 = 0;
            }
            if (*(unsigned char *)(v236 + 16) == 17) {
              uint64_t v238 = v234[4];
            }
            else {
              uint64_t v238 = 0;
            }
            if (!v237)
            {
              if (!v238)
              {
                uint64_t v467 = 0;
                uint64_t v237 = 0;
                int v241 = 1;
                goto LABEL_535;
              }
              if (!sub_1CB844168(v238, 0.0)) {
                goto LABEL_520;
              }
LABEL_503:
              NaN = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v235, v239, 1.0);
              goto LABEL_504;
            }
            if (!sub_1CB844168(v237, 1.0))
            {
              if (sub_1CB844168(v237, -1.0))
              {
                if (!v238) {
                  goto LABEL_491;
                }
                if (*(_UNKNOWN **)(v238 + 32) == &unk_1CFB2E344) {
                  uint64_t v240 = *(void *)(v238 + 40);
                }
                else {
                  uint64_t v240 = v238 + 24;
                }
                if ((*(unsigned char *)(v240 + 28) & 7) != 0) {
                  goto LABEL_520;
                }
                goto LABEL_503;
              }
              if (!v238)
              {
LABEL_491:
                uint64_t v467 = 0;
                int v241 = 1;
                uint64_t v237 = v235;
                goto LABEL_535;
              }
              if (*(_UNKNOWN **)(v237 + 32) == &unk_1CFB2E344)
              {
                char v242 = *(unsigned char *)(*(void *)(v237 + 40) + 28);
                if ((v242 & 8) == 0) {
                  goto LABEL_520;
                }
              }
              else
              {
                char v242 = *(unsigned char *)(v237 + 52);
                if ((v242 & 8) == 0) {
                  goto LABEL_520;
                }
              }
              if ((v242 & 7) == 0
                || (*(_UNKNOWN **)(v238 + 32) == &unk_1CFB2E344
                  ? (char v247 = *(unsigned char *)(*(void *)(v238 + 40) + 28))
                  : (char v247 = *(unsigned char *)(v238 + 52)),
                    (v247 & 7u) <= 1 || (sub_1CD63B67C(v238 + 24) & 1) != 0))
              {
LABEL_520:
                LODWORD(v505) = 8;
                int v504 = 0;
                BYTE4(v505) = 0;
                LOBYTE(v479) = 0;
                if (llvm::APFloat::convertToInteger(v238 + 24, (uint64_t)&v504, 0, &v479) == 1)
                {
                  int v241 = 1;
                  unsigned int v249 = v505;
LABEL_531:
                  if (v249 >= 0x41 && v504) {
                    MEMORY[0x1D25D9CB0](v504, 0x1000C8000313F17);
                  }
                  uint64_t v467 = v236;
LABEL_535:
                  if (!v236 || *(unsigned char *)(v236 + 16) != 17) {
                    goto LABEL_593;
                  }
                  if (sub_1CB844168(v236, 0.5))
                  {
                    unsigned int v252 = v231;
                    int v253 = 280;
                    goto LABEL_541;
                  }
                  if (!sub_1CB844168(v236, -0.5))
                  {
                    if (sub_1CB844168(v236, 0.25))
                    {
                      unsigned int v257 = v231;
                      int v258 = 280;
                    }
                    else
                    {
                      if (!sub_1CB844168(v236, -0.25)) {
                        goto LABEL_553;
                      }
                      unsigned int v257 = v231;
                      int v258 = 261;
                    }
                    uint64_t v259 = sub_1CD10C290(v257, (uint64_t *)&v488, v258, (void *)v235, 0);
                    int v254 = (void *)v259;
                    if (v259 && *(unsigned __int8 *)(v259 + 16) >= 0x1Cu) {
                      *(unsigned char *)(v259 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v259 + 17) & 1;
                    }
                    unsigned int v252 = v231;
                    int v253 = 280;
                    goto LABEL_542;
                  }
                  unsigned int v252 = v231;
                  int v253 = 261;
LABEL_541:
                  int v254 = (void *)v235;
LABEL_542:
                  uint64_t v255 = sub_1CD10C290(v252, (uint64_t *)&v488, v253, v254, 0);
                  uint64_t v256 = (llvm::Value *)v255;
                  if (v255)
                  {
                    if (*(unsigned __int8 *)(v255 + 16) >= 0x1Cu) {
                      *(unsigned char *)(v255 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v255 + 17) & 1;
                    }
LABEL_590:
                    if (v226 <= 1) {
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v229, v256, (llvm::Value *)1);
                    }
                    uint64_t v235 = (uint64_t)v256;
                    goto LABEL_653;
                  }
LABEL_553:
                  uint64_t v260 = *(void *)(v236 + 32);
                  if ((_UNKNOWN *)v260 == &unk_1CFB2E344)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v480, (const llvm::detail::DoubleAPFloat *)(v236 + 32));
                  }
                  else
                  {
                    int v480 = *(_DWORD **)(v236 + 32);
                    if ((*(_DWORD *)(v260 + 8) + 64) >= 0x80) {
                      operator new[]();
                    }
                    char v261 = *(unsigned char *)(v236 + 52);
                    int v262 = v261 & 7;
                    BYTE4(v482) = BYTE4(v482) & 0xF0 | v261 & 0xF;
                    LODWORD(v482) = *(_DWORD *)(v236 + 48);
                    BOOL v264 = (v261 & 6) != 0 && v262 != 3;
                    if (v262 == 1 || v264)
                    {
                      uint64_t v265 = v480[2];
                      uint64_t v266 = &v481;
                      if ((v265 - 64) <= 0xFFFFFF7F) {
                        uint64_t v266 = (const char **)v481;
                      }
                      unsigned int v267 = (const char **)(v236 + 40);
                      if ((*(_DWORD *)(*(void *)(v236 + 32) + 8) - 64) < 0xFFFFFF80) {
                        unsigned int v267 = *(const char ***)(v236 + 40);
                      }
                      if (v265 <= 0xFFFFFFBF)
                      {
                        unint64_t v268 = (unint64_t)(v265 + 64) >> 6;
                        do
                        {
                          uint64_t v269 = *v267++;
                          *v266++ = v269;
                          --v268;
                        }
                        while (v268);
                      }
                    }
                  }
                  unsigned int v475 = 8;
                  int v474 = 0;
                  char v476 = 0;
                  LOBYTE(v478) = 0;
                  llvm::APFloat::convertToInteger((uint64_t)&v479, (uint64_t)&v474, 0, &v478);
                  if ((_BYTE)v478)
                  {
                    if (v476)
                    {
                      char v271 = (uint64_t *)&v474;
                      if (v475 >= 0x41) {
                        char v271 = (uint64_t *)v474;
                      }
LABEL_578:
                      uint64_t v272 = *v271;
                    }
                    else
                    {
                      if (v475 > 0x40)
                      {
                        char v271 = (uint64_t *)v474;
                        goto LABEL_578;
                      }
                      uint64_t v272 = (uint64_t)((void)v474 << -(uint64_t)v475) >> -(uint64_t)v475;
                    }
                    if (v272 >= 0) {
                      unint64_t v273 = v272;
                    }
                    else {
                      unint64_t v273 = -v272;
                    }
                    if (v273 <= 0x1F)
                    {
                      uint64_t v285 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v235, v270, 1.0);
                      uint64_t v256 = (llvm::Value *)v235;
                      uint64_t v452 = (uint64_t)v285;
                      if (v273 != 1)
                      {
                        uint64_t v256 = v285;
                        unsigned int v286 = v273;
                        if ((_BYTE)v273)
                        {
                          uint64_t v287 = v235;
                          uint64_t v256 = v285;
                          while (1)
                          {
                            if (v286)
                            {
                              __int16 v507 = 257;
                              uint64_t v288 = sub_1CB843C88((uint64_t)&v488, (uint64_t)v256, v287, (uint64_t)&v504, 0);
                              uint64_t v256 = (llvm::Value *)v288;
                              if (v288)
                              {
                                if (*(unsigned __int8 *)(v288 + 16) >= 0x1Cu) {
                                  *(unsigned char *)(v288 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v288 + 17) & 1;
                                }
                              }
                            }
                            if (v286 < 2) {
                              break;
                            }
                            v286 >>= 1;
                            __int16 v507 = 257;
                            uint64_t v289 = sub_1CB843C88((uint64_t)&v488, v287, v287, (uint64_t)&v504, 0);
                            uint64_t v287 = v289;
                            if (v289 && *(unsigned __int8 *)(v289 + 16) >= 0x1Cu) {
                              *(unsigned char *)(v289 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v289 + 17) & 1;
                            }
                          }
                        }
                      }
                      if (*(_UNKNOWN **)(v236 + 32) == &unk_1CFB2E344) {
                        uint64_t v290 = *(void *)(v236 + 40);
                      }
                      else {
                        uint64_t v290 = v236 + 24;
                      }
                      unsigned int v226 = v457;
                      if ((*(unsigned char *)(v290 + 28) & 8) != 0)
                      {
                        __int16 v507 = 257;
                        uint64_t v293 = sub_1CB843AD0((uint64_t)&v488, v452, (uint64_t)v256, (uint64_t)&v504, 0);
                        uint64_t v256 = (llvm::Value *)v293;
                        if (v293)
                        {
                          if (*(unsigned __int8 *)(v293 + 16) >= 0x1Cu) {
                            *(unsigned char *)(v293 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v293 + 17) & 1;
                          }
                        }
                      }
                    }
                    else
                    {
                      uint64_t v256 = 0;
                    }
                  }
                  else
                  {
                    uint64_t v256 = 0;
                  }
                  if (v475 >= 0x41 && v474) {
                    MEMORY[0x1D25D9CB0](v474, 0x1000C8000313F17);
                  }
                  if (v480 == (_DWORD *)&unk_1CFB2E344)
                  {
                    sub_1CB845718((uint64_t *)&v481);
                  }
                  else if ((v480[2] - 64) <= 0xFFFFFF7F && v481)
                  {
                    MEMORY[0x1D25D9CB0](v481, 0x1000C8000313F17);
                  }
                  if (!v256)
                  {
LABEL_593:
                    char v274 = (void *)v235;
                    if (v226 <= 1) {
                      char v274 = (void *)sub_1CD10C290(v231, (uint64_t *)&v488, 139, (void *)v235, 0);
                    }
                    uint64_t v275 = sub_1CD10C290(v231, (uint64_t *)&v488, 177, v274, 0);
                    if (v275 && *(unsigned __int8 *)(v275 + 16) >= 0x1Cu) {
                      *(unsigned char *)(v275 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v275 + 17) & 1;
                    }
                    uint64_t v463 = v237;
                    __int16 v507 = 257;
                    uint64_t v276 = sub_1CB843C88((uint64_t)&v488, v275, v236, (uint64_t)&v504, 0);
                    if (v276 && *(unsigned __int8 *)(v276 + 16) >= 0x1Cu) {
                      *(unsigned char *)(v276 + 17) = *(unsigned char *)(v229 + 17) & 0xFE | *(unsigned char *)(v276 + 17) & 1;
                    }
                    uint64_t v277 = (unsigned __int8 *)sub_1CD10C290(v231, (uint64_t *)&v488, 76, (void *)v276, 0);
                    char v278 = (llvm::Instruction *)v277;
                    if (v277 && v277[16] >= 0x1Cu) {
                      v277[17] = *(unsigned char *)(v229 + 17) & 0xFE | v277[17] & 1;
                    }
                    if (!v241)
                    {
                      if (v226 <= 1) {
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v229, (llvm::Value *)v277, (llvm::Value *)1);
                      }
                      uint64_t v235 = (uint64_t)v278;
                      goto LABEL_653;
                    }
                    if (*(unsigned char *)(v235 + 16) != 74 || (uint64_t v279 = *(void *)(v229 + 8)) == 0 || *(void *)(v279 + 8))
                    {
                      char v280 = 0;
                      goto LABEL_609;
                    }
                    int v291 = *(_DWORD *)(v235 + 20);
                    if ((v291 & 0x40000000) != 0) {
                      int v292 = *(uint64_t ****)(v235 - 8);
                    }
                    else {
                      int v292 = (uint64_t ***)(v235 - 32 * (v291 & 0x7FFFFFF));
                    }
                    char v280 = *v292;
                    if (v467) {
                      uint64_t v281 = sub_1CD102AAC(v467);
                    }
                    else {
LABEL_609:
                    }
                      uint64_t v281 = 0;
                    if (*(unsigned char *)(v236 + 16) == 74)
                    {
                      uint64_t v282 = *(void *)(v229 + 8);
                      if (v282)
                      {
                        if (!*(void *)(v282 + 8))
                        {
                          int v283 = *(_DWORD *)(v236 + 20);
                          unsigned int v284 = (v283 & 0x40000000) != 0
                               ? *(const llvm::detail::DoubleAPFloat ***)(v236 - 8)
                               : (const llvm::detail::DoubleAPFloat **)(v236 - 32 * (v283 & 0x7FFFFFF));
                          uint64_t v281 = *v284;
                          if (v463) {
                            char v280 = (uint64_t **)sub_1CD102AAC(v463);
                          }
                        }
                      }
                    }
                    if (v280
                      && v281
                      && ((int v294 = *(unsigned __int8 **)(*(void *)(v229 + 8) + 24), v294[16] <= 0x1Bu)
                        ? (uint64_t v295 = 0)
                        : (uint64_t v295 = *(void *)(*(void *)(v229 + 8) + 24)),
                          *(unsigned char *)(v295 + 16) == 73
                       && (unsigned int v296 = *(uint64_t **)v295, v296 == *v280)
                       && v296 == *(uint64_t **)v281))
                    {
                      int v298 = (unsigned __int8 *)sub_1CD10C39C(v231, (uint64_t *)&v488, 2483, v280, (uint64_t)v281, v278, 1);
                      uint64_t v235 = (uint64_t)v298;
                      if (v298 && v298[16] >= 0x1Cu) {
                        v298[17] = *(unsigned char *)(v229 + 17) & 0xFE | v298[17] & 1;
                      }
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v294, (llvm::Value *)v298, (llvm::Value *)1);
                      unsigned int v226 = v457;
                    }
                    else
                    {
                      uint64_t v297 = (unsigned __int8 *)sub_1CD10C39C(v231, (uint64_t *)&v488, 2483, (uint64_t **)v235, v236, v278, 1);
                      uint64_t v235 = (uint64_t)v297;
                      unsigned int v226 = v457;
                      if (v297 && v297[16] >= 0x1Cu) {
                        v297[17] = *(unsigned char *)(v229 + 17) & 0xFE | v297[17] & 1;
                      }
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v229, (llvm::Value *)v297, (llvm::Value *)1);
                    }
                    goto LABEL_653;
                  }
                  goto LABEL_590;
                }
                unsigned int v249 = v505;
                if (BYTE4(v505))
                {
                  unsigned int v250 = (uint64_t *)v504;
                  if (v505 < 0x41) {
                    unsigned int v250 = (uint64_t *)&v504;
                  }
LABEL_529:
                  uint64_t v251 = *v250;
                }
                else
                {
                  if (v505 > 0x40)
                  {
                    unsigned int v250 = (uint64_t *)v504;
                    goto LABEL_529;
                  }
                  uint64_t v251 = (uint64_t)((void)v504 << -(char)v505) >> -(char)v505;
                }
                int v241 = v251 & 1;
                goto LABEL_531;
              }
              NaN = llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v235, 0, 0);
LABEL_504:
              uint64_t v235 = (uint64_t)NaN;
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v229, (llvm::Value *)v235, (llvm::Value *)1);
LABEL_653:
            if (v488 != v490) {
              free(v488);
            }
            if (v226 >= 2)
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v229, (llvm::Value *)v235, (llvm::Value *)1);
              if (v485 >= (unint64_t)HIDWORD(v485)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v484 + v485) = v229;
              LODWORD(v485) = v485 + 1;
            }
            uint64_t v225 = *(void *)(v225 + 8);
            if (!v225)
            {
              char v155 = 1;
              size_t v157 = v450;
              int v158 = v448;
              break;
            }
          }
        }
      }
      if (v158 != 2144 && v158 != 2142) {
        goto LABEL_842;
      }
      uint64_t v299 = *(void *)(v157 + 8);
      if (!v299) {
        goto LABEL_842;
      }
      while (1)
      {
        uint64_t v300 = *(void *)(v299 + 24);
        if (*(unsigned char *)(v300 + 16) == 84
          && (uint64_t v301 = *(void *)(v300 - 32)) != 0
          && !*(unsigned char *)(v301 + 16)
          && *(void *)(v301 + 24) == *(void *)(v300 + 72))
        {
          if ((*(unsigned char *)(v301 + 33) & 0x20) != 0) {
            int v302 = *(llvm::ValueAsMetadata **)(v299 + 24);
          }
          else {
            int v302 = 0;
          }
        }
        else
        {
          int v302 = 0;
        }
        int v303 = *(_DWORD *)(*((void *)v302 - 4) + 36);
        uint64_t v304 = (uint64_t *)v302;
        if (v303 != 2142) {
          uint64_t v304 = (uint64_t *)((void *)v302 - 4 * (*((_DWORD *)v302 + 5) & 0x7FFFFFF))[4];
        }
        uint64_t v305 = *v304;
        int v306 = *(unsigned __int8 *)(*v304 + 8);
        if (v306 == 18) {
          uint64_t v307 = *v304;
        }
        else {
          uint64_t v307 = 0;
        }
        int v474 = 0;
        uint64_t v308 = (llvm::FixedVectorType *)(***(void ***)v302 + 1984);
        int v474 = v308;
        if (v306 != 15 && (!v307 || *(llvm::FixedVectorType **)(v307 + 24) != v308 || *(_DWORD *)(v307 + 32) < 3u)) {
          goto LABEL_806;
        }
        uint64_t v309 = 0;
        int v310 = (void **)((char *)v302 - 32 * (*((_DWORD *)v302 + 5) & 0x7FFFFFF));
        uint64_t v311 = 4;
        if (v303 != 2142) {
          uint64_t v311 = 8;
        }
        int v468 = (const char *)v310[v311];
        uint64_t v473 = *v310;
        uint64_t v312 = 12;
        if (v303 == 2142) {
          uint64_t v312 = 8;
        }
        uint64_t v464 = (const char *)v310[v312];
        unsigned int v313 = **(uint64_t ***)v302;
        uint64_t v488 = v490;
        uint64_t v489 = v156;
        uint64_t v493 = v313;
        int v494 = &v502;
        uint64_t v495 = v503;
        uint64_t v496 = 0;
        int v497 = 0;
        __int16 v498 = 512;
        char v499 = 7;
        uint64_t v491 = 0;
        unsigned int v492 = 0;
        uint64_t v500 = 0;
        uint64_t v501 = 0;
        uint64_t v502 = &unk_1F2616E88;
        v503[0] = &unk_1F2617008;
        uint64_t v491 = (uint64_t **)*((void *)v302 + 5);
        unsigned int v492 = (_DWORD *)((char *)v302 + 24);
        int v314 = (void *)*((void *)v302 + 6);
        unsigned int v479 = v314;
        if (v314)
        {
          llvm::MetadataTracking::track((uint64_t)&v479, (unsigned __int8 *)v314, 2);
          uint64_t v309 = v479;
        }
        sub_1CB8461A4((uint64_t)&v488, 0, (uint64_t)v309);
        if (v479)
        {
          int v399 = *(unsigned __int8 *)v479;
          if ((v399 - 4) > 0x1E)
          {
            if ((v399 - 3) >= 0xFFFFFFFE) {
              unint64_t v402 = v479;
            }
            else {
              unint64_t v402 = 0;
            }
            if ((v399 - 3) < 0xFFFFFFFE)
            {
              if (v399 == 3) {
                *((void *)v479 + 1) = 0;
              }
              goto LABEL_696;
            }
            unint64_t v401 = (unint64_t)v402 + 8;
          }
          else
          {
            if ((*((unsigned char *)v479 + 1) & 0x7F) != 2 && !*((_DWORD *)v479 + 3)) {
              goto LABEL_696;
            }
            uint64_t v400 = *((void *)v479 + 2);
            if ((v400 & 4) == 0) {
              goto LABEL_696;
            }
            unint64_t v401 = v400 & 0xFFFFFFFFFFFFFFF8;
            if (!v401) {
              goto LABEL_696;
            }
          }
          int v504 = (unsigned __int8 **)&v479;
          sub_1CC5FA668(v401 + 16, &v504);
        }
LABEL_696:
        uint64_t v449 = v302;
        if (*(unsigned char *)(v305 + 8) == 15)
        {
          if (v303 == 2142)
          {
            unsigned int v479 = v473;
            int v480 = v468;
            int v481 = v464;
            __int16 v507 = 257;
            uint64_t Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v488, 2142, (uint64_t)&v474, 1, (uint64_t *)&v479, 3, 0, (uint64_t)&v504);
            BOOL v316 = (llvm::Instruction *)Intrinsic;
            __int16 v483 = 257;
            if (*(void *)Intrinsic != v305)
            {
              if (*(unsigned __int8 *)(Intrinsic + 16) <= 0x14u)
              {
                uint64_t v397 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v494 + 28))(v494, 48, Intrinsic, v305);
                BOOL v316 = (llvm::Instruction *)v397;
                if (v397 && *(unsigned __int8 *)(v397 + 16) >= 0x1Cu)
                {
                  uint64_t v407 = v299;
                  (*(void (**)(void *, uint64_t, void **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v397, &v479, v491, v492);
                  if (v489)
                  {
                    uint64_t v409 = (llvm::MDNode **)v488;
                    uint64_t v410 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                    do
                    {
                      llvm::Instruction::setMetadata(v316, *(_DWORD *)v409, v409[1]);
                      v409 += 2;
                    }
                    while (v409 != v410);
                  }
                  uint64_t v299 = v407;
                }
              }
              else
              {
                uint64_t v317 = v299;
                __int16 v507 = 257;
                BOOL v316 = llvm::CastInst::Create(48, Intrinsic, v305, (const char **)&v504, 0);
                (*(void (**)(void *, llvm::Instruction *, void **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v316, &v479, v491, v492);
                if (v489)
                {
                  uint64_t v403 = (llvm::MDNode **)v488;
                  uint64_t v404 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                  do
                  {
                    llvm::Instruction::setMetadata(v316, *(_DWORD *)v403, v403[1]);
                    v403 += 2;
                  }
                  while (v403 != v404);
                }
                uint64_t v299 = v317;
              }
            }
            llvm::Value::doRAUW(v302, v316, (llvm::Value *)1);
          }
          else
          {
            char v363 = (unsigned __int8 *)((void *)v302 - 4 * (*((_DWORD *)v302 + 5) & 0x7FFFFFF))[4];
            __int16 v483 = 257;
            if (*(llvm::FixedVectorType **)v363 != v474)
            {
              if (v363[16] <= 0x14u)
              {
                uint64_t v398 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, llvm::FixedVectorType *))*v494
                        + 28))(v494, 47, v363, v474);
                char v363 = (unsigned __int8 *)v398;
                if (v398 && *(unsigned __int8 *)(v398 + 16) >= 0x1Cu)
                {
                  uint64_t v408 = v299;
                  (*(void (**)(void *, uint64_t, void **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v398, &v479, v491, v492);
                  if (v489)
                  {
                    uint64_t v411 = (llvm::MDNode **)v488;
                    uint64_t v412 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v363, *(_DWORD *)v411, v411[1]);
                      v411 += 2;
                    }
                    while (v411 != v412);
                  }
                  uint64_t v299 = v408;
                }
              }
              else
              {
                uint64_t v364 = v299;
                __int16 v507 = 257;
                char v363 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v363, (uint64_t)v474, (const char **)&v504, 0);
                (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, _DWORD *))(*v495 + 16))(v495, v363, &v479, v491, v492);
                if (v489)
                {
                  unsigned int v405 = (llvm::MDNode **)v488;
                  int v406 = (llvm::MDNode **)((char *)v488 + 16 * v489);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v363, *(_DWORD *)v405, v405[1]);
                    v405 += 2;
                  }
                  while (v405 != v406);
                }
                uint64_t v299 = v364;
              }
            }
            unsigned int v479 = v473;
            int v480 = v363;
            int v481 = v468;
            uint64_t v482 = (uint64_t)v464;
            __int16 v507 = 257;
            llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v488, v303, (uint64_t)&v474, 1, (uint64_t *)&v479, 4, 0, (uint64_t)&v504);
          }
        }
        else
        {
          uint64_t v478 = 0;
          llvm::FixedVectorType::get(v474, (llvm::Type *)2);
          uint64_t v478 = v318;
          unint64_t v320 = (unsigned __int8 *)llvm::UndefValue::get((llvm::UndefValue *)v307, v319);
          uint64_t v321 = *(void *)(v307 + 24);
          if ((*(_DWORD *)(v321 + 8) & 0xFE) == 0x12) {
            uint64_t v321 = **(void **)(v321 + 16);
          }
          uint64_t v458 = ***(void ***)v302 + 1912;
          unsigned int v322 = *(_DWORD *)(v307 + 32);
          unsigned int v323 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v321) >> 3;
          unsigned int v454 = v322;
          uint64_t v443 = v299;
          if (v303 == 2142)
          {
            if (v322)
            {
              unsigned int v324 = 0;
              unsigned int v325 = 0;
              int v326 = 2 * v323;
              unsigned int v327 = v322;
              do
              {
                int v328 = (const char *)llvm::ConstantInt::get(v474, v324, 0);
                __int16 v507 = 257;
                char v329 = sub_1CB930F7C((uint64_t *)&v488, v458, (uint64_t *)v473, v328, (uint64_t)&v504);
                BOOL v130 = v327 >= 2;
                v327 -= 2;
                if (v130)
                {
                  unsigned int v479 = v329;
                  int v480 = v468;
                  int v481 = v464;
                  __int16 v507 = 257;
                  char v331 = (unsigned __int8 *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v488, 2142, (uint64_t)&v478, 1, (uint64_t *)&v479, 3, 0, (uint64_t)&v504);
                  __int16 v507 = 257;
                  uint64_t v332 = *(llvm::ConstantInt **)(*v493 + 1984);
                  unsigned int v333 = *(_DWORD *)(*v493 + 1992);
                  LODWORD(v480) = v333 >> 8;
                  if (v333 >> 8 >= 0x41) {
                    operator new[]();
                  }
                  unsigned int v479 = 0;
                  unint64_t v334 = (unsigned __int8 *)llvm::ConstantInt::get(v332, (llvm::LLVMContext *)&v479, v330);
                  if (v480 >= 0x41 && v479) {
                    MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                  }
                  unsigned int v336 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v488, v331, v334, (uint64_t)&v504);
                  __int16 v507 = 257;
                  int v337 = *(llvm::ConstantInt **)(*v493 + 1984);
                  unsigned int v338 = *(_DWORD *)(*v493 + 1992);
                  LODWORD(v480) = v338 >> 8;
                  if (v338 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v338 <= 0xFF) {
                    LOBYTE(v339) = 0;
                  }
                  else {
                    unint64_t v339 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v338) + 63);
                  }
                  unsigned int v479 = (void *)(v339 & 1);
                  unint64_t v340 = (unsigned __int8 *)llvm::ConstantInt::get(v337, (llvm::LLVMContext *)&v479, v335);
                  if (v480 >= 0x41 && v479) {
                    MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                  }
                  int v342 = sub_1CB8445F4((uint64_t)&v488, v331, v340, (uint64_t)&v504);
                  __int16 v507 = 257;
                  BOOL v343 = *(llvm::ConstantInt **)(*v493 + 1984);
                  unsigned int v344 = *(_DWORD *)(*v493 + 1992);
                  LODWORD(v480) = v344 >> 8;
                  if (v344 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v344 <= 0xFF) {
                    LODWORD(v345) = 0;
                  }
                  else {
                    unint64_t v345 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v344) + 63);
                  }
                  unsigned int v479 = (void *)(v345 & v325);
                  BOOL v346 = (unsigned __int8 *)llvm::ConstantInt::get(v343, (llvm::LLVMContext *)&v479, v341);
                  if (v480 >= 0x41 && v479) {
                    MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                  }
                  unsigned int v348 = sub_1CB84478C((uint64_t)&v488, v320, v336, v346, (uint64_t)&v504);
                  __int16 v507 = 257;
                  uint64_t v349 = *(llvm::ConstantInt **)(*v493 + 1984);
                  unsigned int v350 = *(_DWORD *)(*v493 + 1992);
                  LODWORD(v480) = v350 >> 8;
                  if (v350 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v350 <= 0xFF) {
                    LODWORD(v351) = 0;
                  }
                  else {
                    unint64_t v351 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v350) + 63);
                  }
                  unsigned int v322 = v454;
                  unsigned int v479 = (void *)(v351 & (v325 + 1));
                  unint64_t v352 = (unsigned __int8 *)llvm::ConstantInt::get(v349, (llvm::LLVMContext *)&v479, v347);
                  if (v480 >= 0x41 && v479) {
                    MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                  }
                  unint64_t v353 = (unsigned __int8 *)v348;
                  uint64_t v354 = (unsigned __int8 *)v342;
                  uint64_t v355 = v352;
                }
                else
                {
                  unsigned int v479 = v329;
                  int v480 = v468;
                  int v481 = v464;
                  __int16 v507 = 257;
                  uint64_t v356 = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v488, 2142, (uint64_t)&v474, 1, (uint64_t *)&v479, 3, 0, (uint64_t)&v504);
                  uint64_t v358 = (unsigned __int8 *)v356;
                  __int16 v507 = 257;
                  int v359 = *(llvm::ConstantInt **)(*v493 + 1984);
                  unsigned int v360 = *(_DWORD *)(*v493 + 1992);
                  LODWORD(v480) = v360 >> 8;
                  if (v360 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v360 <= 0xFF) {
                    LODWORD(v361) = 0;
                  }
                  else {
                    unint64_t v361 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v360) + 63);
                  }
                  unsigned int v479 = (void *)(v361 & v325);
                  uint64_t v362 = (unsigned __int8 *)llvm::ConstantInt::get(v359, (llvm::LLVMContext *)&v479, v357);
                  if (v480 >= 0x41 && v479) {
                    MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                  }
                  unint64_t v353 = v320;
                  uint64_t v354 = v358;
                  uint64_t v355 = v362;
                }
                unint64_t v320 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v488, v353, v354, v355, (uint64_t)&v504);
                v325 += 2;
                v324 += v326;
              }
              while (v325 < v322);
            }
            int v302 = v449;
            llvm::Value::doRAUW(v449, (llvm::Value *)v320, (llvm::Value *)1);
          }
          else if (v322)
          {
            unsigned int v365 = 0;
            unsigned int v366 = 0;
            unsigned int v453 = (_DWORD *)((char *)v302 + 32);
            int v451 = 2 * v323;
            unsigned int v367 = v322;
            int v446 = v303;
            do
            {
              uint64_t v368 = (const char *)llvm::ConstantInt::get(v474, v365, 0);
              __int16 v507 = 257;
              unint64_t v370 = sub_1CB930F7C((uint64_t *)&v488, v458, (uint64_t *)v473, v368, (uint64_t)&v504);
              uint64_t v371 = *(unsigned __int8 **)&v453[-8 * (*((_DWORD *)v302 + 5) & 0x7FFFFFF)];
              __int16 v507 = 257;
              uint64_t v372 = *(llvm::ConstantInt **)(*v493 + 1984);
              unsigned int v373 = *(_DWORD *)(*v493 + 1992);
              LODWORD(v480) = v373 >> 8;
              if (v373 >> 8 > 0x40) {
                operator new[]();
              }
              if (v373 <= 0xFF) {
                LODWORD(v374) = 0;
              }
              else {
                unint64_t v374 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v373) + 63);
              }
              unsigned int v479 = (void *)(v374 & v366);
              unsigned int v375 = (unsigned __int8 *)llvm::ConstantInt::get(v372, (llvm::LLVMContext *)&v479, v369);
              if (v480 >= 0x41 && v479) {
                MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
              }
              int v376 = sub_1CB8445F4((uint64_t)&v488, v371, v375, (uint64_t)&v504);
              uint64_t v378 = (unsigned __int8 *)v376;
              BOOL v130 = v367 >= 2;
              v367 -= 2;
              if (v130)
              {
                __int16 v507 = 257;
                unint64_t v379 = *(llvm::ConstantInt **)(*v493 + 1984);
                unsigned int v380 = *(_DWORD *)(*v493 + 1992);
                LODWORD(v480) = v380 >> 8;
                if (v380 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v380 <= 0xFF) {
                  LODWORD(v381) = 0;
                }
                else {
                  unint64_t v381 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v380) + 63);
                }
                unsigned int v479 = (void *)(v381 & (v366 + 1));
                unsigned int v382 = (unsigned __int8 *)llvm::ConstantInt::get(v379, (llvm::LLVMContext *)&v479, v377);
                if (v480 >= 0x41 && v479) {
                  MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                }
                int v383 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v488, v371, v382, (uint64_t)&v504);
                unsigned int v386 = (unsigned __int8 *)llvm::UndefValue::get(v478, v384);
                __int16 v507 = 257;
                __int16 v387 = *(llvm::ConstantInt **)(*v493 + 1984);
                unsigned int v388 = *(_DWORD *)(*v493 + 1992);
                LODWORD(v480) = v388 >> 8;
                if (v388 >> 8 >= 0x41) {
                  operator new[]();
                }
                unsigned int v479 = 0;
                unsigned int v389 = (unsigned __int8 *)llvm::ConstantInt::get(v387, (llvm::LLVMContext *)&v479, v385);
                if (v480 >= 0x41 && v479) {
                  MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                }
                int v391 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v488, v386, v378, v389, (uint64_t)&v504);
                __int16 v507 = 257;
                unint64_t v392 = *(llvm::ConstantInt **)(*v493 + 1984);
                unsigned int v393 = *(_DWORD *)(*v493 + 1992);
                LODWORD(v480) = v393 >> 8;
                if (v393 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v393 <= 0xFF) {
                  LOBYTE(v394) = 0;
                }
                else {
                  unint64_t v394 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v393) + 63);
                }
                unsigned int v479 = (void *)(v394 & 1);
                uint64_t v395 = (unsigned __int8 *)llvm::ConstantInt::get(v392, (llvm::LLVMContext *)&v479, v390);
                if (v480 >= 0x41 && v479) {
                  MEMORY[0x1D25D9CB0](v479, 0x1000C8000313F17);
                }
                uint64_t v396 = sub_1CB84478C((uint64_t)&v488, v391, v383, v395, (uint64_t)&v504);
                unsigned int v479 = v370;
                int v480 = v396;
                int v481 = v468;
                uint64_t v482 = (uint64_t)v464;
                __int16 v507 = 257;
                int v303 = v446;
                llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v488, v446, (uint64_t)&v478, 1, (uint64_t *)&v479, 4, 0, (uint64_t)&v504);
                int v302 = v449;
              }
              else
              {
                unsigned int v479 = v370;
                int v480 = v376;
                int v481 = v468;
                uint64_t v482 = (uint64_t)v464;
                __int16 v507 = 257;
                llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v488, v303, (uint64_t)&v474, 1, (uint64_t *)&v479, 4, 0, (uint64_t)&v504);
              }
              v366 += 2;
              v365 += v451;
            }
            while (v366 < v454);
          }
          uint64_t v299 = v443;
        }
        if (v488 != v490) {
          free(v488);
        }
        if (v485 >= (unint64_t)HIDWORD(v485)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v484 + v485) = v302;
        LODWORD(v485) = v485 + 1;
        char v155 = 1;
LABEL_806:
        uint64_t v299 = *(void *)(v299 + 8);
        if (!v299) {
          goto LABEL_842;
        }
      }
    }
    if (v158 == 2776) {
      int v159 = 2778;
    }
    else {
      int v159 = 2742;
    }
    llvm::Intrinsic::getType(*(uint64_t **)a2, v159, 0, 0);
    uint64_t v160 = (unsigned __int8 *)off_1E6830B58[v159];
    if (v160) {
      unint64_t v161 = (const char *)strlen(off_1E6830B58[v159]);
    }
    else {
      unint64_t v161 = 0;
    }
    unint64_t v162 = (llvm::PointerType *)llvm::Intrinsic::getType(*(uint64_t **)a2, v159, 0, 0);
    llvm::Module::getOrInsertFunction(a2, v160, v161, v162, 0);
    uint64_t v164 = *(void *)(v157 + 8);
    if (v164)
    {
      uint64_t v456 = v163;
      while (1)
      {
        int v462 = *(llvm::ValueAsMetadata **)(v164 + 24);
        uint64_t v466 = v164;
        uint64_t v165 = *(uint64_t **)(*(void *)(*(void *)(*((void *)v462 + 5) + 56) + 40) + 112);
        unsigned int v166 = *((_DWORD *)v165 + 8);
        if (v166 <= 1) {
          uint64_t v167 = 1;
        }
        else {
          uint64_t v167 = v166;
        }
        if (v166 <= 0x16) {
          size_t v168 = v167;
        }
        else {
          size_t v168 = 23;
        }
        uint64_t v472 = *((unsigned int *)v165 + 2);
        if (!v472) {
          goto LABEL_352;
        }
        uint64_t v169 = 0;
        int v170 = 0;
        do
          int v170 = 33 * v170 + aAgcRiaRayDrive[v169++];
        while (v168 != v169);
        uint64_t v171 = *v165;
        uint64_t v172 = *v165 + 8 * v472 + 8;
        int v173 = 1;
        int v174 = v170;
        while (1)
        {
          uint64_t v175 = v174 & (v472 - 1);
          int v176 = *(void **)(v171 + 8 * v175);
          if (v176 != (void *)-8)
          {
            if (!v176) {
              goto LABEL_352;
            }
            if (*(_DWORD *)(v172 + 4 * v175) == v170
              && v168 == *v176
              && !memcmp("agc.ria.ray_driver_data", (char *)v176 + *((unsigned int *)v165 + 5), v168))
            {
              break;
            }
          }
          int v174 = v173 + v175;
          ++v173;
        }
        if (v175 == -1
          || (int)v175 == v472
          || (int v177 = *(llvm::Value **)(*(void *)(v171 + 8 * (int)v175) + 8)) == 0
          || *((unsigned char *)v177 + 16) != 3
          || (*((_DWORD *)v177 + 8) & 0xFu) - 7 <= 1)
        {
LABEL_352:
          int v177 = 0;
        }
        if (v166 <= 1) {
          uint64_t v178 = 1;
        }
        else {
          uint64_t v178 = v166;
        }
        if (v166 <= 0x14) {
          size_t v179 = v178;
        }
        else {
          size_t v179 = 21;
        }
        if (!v472) {
          goto LABEL_372;
        }
        uint64_t v180 = 0;
        int v181 = 0;
        do
          int v181 = 33 * v181 + aAgcRiaRayUserD[v180++];
        while (v179 != v180);
        uint64_t v182 = *v165;
        uint64_t v183 = *v165 + 8 * v472 + 8;
        int v184 = 1;
        int v185 = v181;
        while (1)
        {
          uint64_t v186 = v185 & (v472 - 1);
          uint64_t v187 = *(void **)(v182 + 8 * v186);
          if (v187 != (void *)-8)
          {
            if (!v187) {
              goto LABEL_372;
            }
            if (*(_DWORD *)(v183 + 4 * v186) == v181
              && v179 == *v187
              && !memcmp("agc.ria.ray_user_data", (char *)v187 + *((unsigned int *)v165 + 5), v179))
            {
              break;
            }
          }
          int v185 = v184 + v186;
          ++v184;
        }
        if (v186 == -1
          || (int)v186 == v472
          || (int v188 = *(llvm::Value **)(*(void *)(v182 + 8 * (int)v186) + 8)) == 0
          || *((unsigned char *)v188 + 16) != 3
          || (*((_DWORD *)v188 + 8) & 0xFu) - 7 <= 1)
        {
LABEL_372:
          int v188 = 0;
        }
        uint64_t v189 = 0;
        unsigned int v190 = v462;
        uint64_t v191 = **(void **)v462;
        int v504 = (unsigned __int8 **)v506;
        uint64_t v505 = v156;
        uint64_t v510 = v191;
        int v511 = &v519;
        uint64_t v512 = v520;
        uint64_t v513 = 0;
        int v514 = 0;
        __int16 v515 = 512;
        char v516 = 7;
        int v508 = 0;
        __n128 v509 = 0;
        uint64_t v517 = 0;
        uint64_t v518 = 0;
        uint64_t v519 = &unk_1F2616E88;
        v520[0] = &unk_1F2617008;
        int v508 = (void *)*((void *)v462 + 5);
        __n128 v509 = (void **)((char *)v462 + 24);
        unsigned int v192 = (void *)*((void *)v462 + 6);
        unsigned int v479 = v192;
        if (v192)
        {
          llvm::MetadataTracking::track((uint64_t)&v479, (unsigned __int8 *)v192, 2);
          uint64_t v189 = v479;
        }
        sub_1CB8461A4((uint64_t)&v504, 0, (uint64_t)v189);
        uint64_t v193 = v456;
        if (!v479) {
          goto LABEL_376;
        }
        int v215 = *(unsigned __int8 *)v479;
        if ((v215 - 4) > 0x1E)
        {
          if ((v215 - 3) >= 0xFFFFFFFE) {
            uint64_t v218 = v479;
          }
          else {
            uint64_t v218 = 0;
          }
          if ((v215 - 3) < 0xFFFFFFFE)
          {
            if (v215 == 3) {
              *((void *)v479 + 1) = 0;
            }
            goto LABEL_376;
          }
          unint64_t v217 = (unint64_t)v218 + 8;
        }
        else
        {
          if ((*((unsigned char *)v479 + 1) & 0x7F) != 2 && !*((_DWORD *)v479 + 3)) {
            goto LABEL_376;
          }
          uint64_t v216 = *((void *)v479 + 2);
          if ((v216 & 4) == 0) {
            goto LABEL_376;
          }
          unint64_t v217 = v216 & 0xFFFFFFFFFFFFFFF8;
          if (!v217) {
            goto LABEL_376;
          }
        }
        uint64_t v488 = &v479;
        sub_1CC5FA668(v217 + 16, &v488);
LABEL_376:
        uint64_t v488 = v490;
        uint64_t v489 = 0x1000000000;
        int v194 = *((unsigned __int8 *)v462 + 16);
        if (v194 == 84)
        {
          uint64_t v195 = 0;
        }
        else if (v194 == 39)
        {
          unsigned int v190 = v462;
          uint64_t v195 = (*((_DWORD *)v462 + 20) + 1);
          uint64_t v193 = v456;
        }
        else
        {
          uint64_t v195 = 2;
          uint64_t v193 = v456;
          unsigned int v190 = v462;
        }
        int v196 = *((_DWORD *)v190 + 5);
        if (v196 < 0
          && (unsigned __int16 v219 = (_DWORD *)((char *)v190 - 32 * (v196 & 0x7FFFFFF)),
              uint64_t v220 = *((void *)v219 - 1),
              (v220 & 0xFFFFFFFF0) != 0))
        {
          uint64_t v198 = -(uint64_t)(v196 & 0x7FFFFFF);
          uint64_t v197 = (*(v219 - 3) - *(_DWORD *)((char *)v219 - v220));
        }
        else
        {
          uint64_t v197 = 0;
          uint64_t v198 = -(uint64_t)(v196 & 0x7FFFFFF);
        }
        unint64_t v199 = -32 * v195 - 32 * v197 - 32 * v198 - 32;
        unint64_t v200 = v199 >> 5;
        if ((v199 & 0x1FFFFFFFE0) != 0)
        {
          unsigned int v201 = 0;
          uint64_t v202 = -(uint64_t)v200;
          uint64_t v203 = v190;
          do
          {
            if (v201 >= HIDWORD(v489)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v488 + v201) = *((void *)v203 - 4 * (*((_DWORD *)v190 + 5) & 0x7FFFFFF));
            unsigned int v201 = v489 + 1;
            LODWORD(v489) = v489 + 1;
            uint64_t v203 = (llvm::ValueAsMetadata *)((char *)v203 + 32);
            BOOL v130 = __CFADD__(v202++, 1);
          }
          while (!v130);
        }
        uint64_t v204 = *(void *)(*(void *)(*(void *)(v193 + 24) + 16) + 8 * (v200 + 1));
        __int16 v477 = 257;
        if (*(void *)v177 != v204)
        {
          if (*((unsigned __int8 *)v177 + 16) <= 0x14u)
          {
            int v177 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v511 + 28))(v511, 49, v177, v204);
            if (v177) {
              BOOL v207 = *((unsigned __int8 *)v177 + 16) >= 0x1Cu;
            }
            else {
              BOOL v207 = 0;
            }
            if (v207)
            {
              (*(void (**)(void *, llvm::Value *, llvm::FixedVectorType **, void *, void **))(*v512 + 16))(v512, v177, &v474, v508, v509);
              if (v505)
              {
                unsigned int v221 = (void **)v504;
                int v222 = (const char *)&v504[2 * v505];
                do
                {
                  llvm::Instruction::setMetadata(v177, *(_DWORD *)v221, (llvm::MDNode *)v221[1]);
                  v221 += 2;
                }
                while (v221 != (void **)v222);
              }
              uint64_t v193 = v456;
              unsigned int v190 = v462;
            }
          }
          else
          {
            __int16 v483 = 257;
            int v177 = llvm::CastInst::Create(49, (uint64_t)v177, v204, (const char **)&v479, 0);
            (*(void (**)(void *, llvm::Value *, llvm::FixedVectorType **, void *, void **))(*v512 + 16))(v512, v177, &v474, v508, v509);
            if (v505)
            {
              unsigned __int16 v205 = (void **)v504;
              long long v206 = (const char *)&v504[2 * v505];
              do
              {
                llvm::Instruction::setMetadata(v177, *(_DWORD *)v205, (llvm::MDNode *)v205[1]);
                v205 += 2;
              }
              while (v205 != (void **)v206);
            }
          }
        }
        if (v489 >= (unint64_t)HIDWORD(v489)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v488 + v489) = v177;
        LODWORD(v489) = v489 + 1;
        uint64_t v208 = *(void *)(*(void *)(*(void *)(v193 + 24) + 16) + 8 * (v200 + 2));
        __int16 v477 = 257;
        if (*(void *)v188 != v208)
        {
          if (*((unsigned __int8 *)v188 + 16) <= 0x14u)
          {
            int v188 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v511 + 28))(v511, 49, v188, v208);
            if (v188) {
              BOOL v211 = *((unsigned __int8 *)v188 + 16) >= 0x1Cu;
            }
            else {
              BOOL v211 = 0;
            }
            if (v211)
            {
              (*(void (**)(void *, llvm::Value *, llvm::FixedVectorType **, void *, void **))(*v512 + 16))(v512, v188, &v474, v508, v509);
              if (v505)
              {
                unsigned int v223 = (void **)v504;
                uint64_t v224 = (const char *)&v504[2 * v505];
                do
                {
                  llvm::Instruction::setMetadata(v188, *(_DWORD *)v223, (llvm::MDNode *)v223[1]);
                  v223 += 2;
                }
                while (v223 != (void **)v224);
              }
              uint64_t v193 = v456;
              unsigned int v190 = v462;
            }
          }
          else
          {
            __int16 v483 = 257;
            int v188 = llvm::CastInst::Create(49, (uint64_t)v188, v208, (const char **)&v479, 0);
            (*(void (**)(void *, llvm::Value *, llvm::FixedVectorType **, void *, void **))(*v512 + 16))(v512, v188, &v474, v508, v509);
            if (v505)
            {
              int v209 = (void **)v504;
              uint64_t v210 = (const char *)&v504[2 * v505];
              do
              {
                llvm::Instruction::setMetadata(v188, *(_DWORD *)v209, (llvm::MDNode *)v209[1]);
                v209 += 2;
              }
              while (v209 != (void **)v210);
            }
          }
        }
        if (v489 >= (unint64_t)HIDWORD(v489)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v488 + v489) = v188;
        uint64_t v212 = (v489 + 1);
        LODWORD(v489) = v489 + 1;
        if (v193) {
          __int16 v213 = *(uint64_t ***)(v193 + 24);
        }
        else {
          __int16 v213 = 0;
        }
        __int16 v483 = 257;
        unsigned int v214 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v504, v213, (uint64_t **)v193, (uint64_t *)v488, v212, (uint64_t)&v479, 0);
        if (v488 != v490) {
          free(v488);
        }
        if (v504 != (unsigned __int8 **)v506) {
          free(v504);
        }
        llvm::Value::doRAUW(v190, v214, (llvm::Value *)1);
        if (v485 >= (unint64_t)HIDWORD(v485)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v484 + v485) = v190;
        LODWORD(v485) = v485 + 1;
        uint64_t v164 = *(void *)(v466 + 8);
        if (!v164)
        {
          char v155 = 1;
          break;
        }
      }
    }
LABEL_842:
    uint64_t v154 = *(void *)(v444 + 8);
  }
  while (v154 != v445);
  if (v485) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v484 != v486) {
    free(v484);
  }
LABEL_850:
  uint64_t v413 = *(void *)(a2 + 32);
  if (v413 != v445)
  {
    char v414 = 0;
    int v415 = *(_DWORD *)(a1 + 28);
    uint64_t v416 = *(uint64_t **)a2;
    if ((v415 - 6) >= 0xA) {
      char v417 = 3;
    }
    else {
      char v417 = 6;
    }
    char v418 = 2;
    if ((v415 - 6) < 0xA) {
      char v418 = 5;
    }
    char v459 = v417;
    char v461 = v418;
    char v419 = 13;
    if (v415 > 14) {
      char v419 = 19;
    }
    char v465 = v419;
    unsigned int v469 = *(_DWORD *)(a1 + 28);
    unsigned int v455 = v415 - 1;
    while (1)
    {
      uint64_t v420 = v413 ? v413 - 56 : 0;
      if ((*(unsigned char *)(v420 + 33) & 0x20) != 0)
      {
        uint64_t v421 = *(void *)(v420 + 8);
        if (v421) {
          break;
        }
      }
LABEL_947:
      uint64_t v413 = *(void *)(v413 + 8);
      if (v413 == v445) {
        return ((v442 | v155 & 1) != 0) | v414 & 1u;
      }
    }
    while (1)
    {
      uint64_t v422 = *(void *)(v421 + 24);
      if (*(unsigned char *)(v422 + 16) == 84)
      {
        uint64_t v423 = *(void *)(v422 - 32);
        if (v423)
        {
          if (!*(unsigned char *)(v423 + 16)
            && *(void *)(v423 + 24) == *(void *)(v422 + 72)
            && (*(unsigned char *)(v423 + 33) & 0x20) != 0
            && *(void *)(*(void *)(v422 + 40) + 56))
          {
            break;
          }
        }
      }
LABEL_942:
      uint64_t v421 = *(void *)(v421 + 8);
      if (!v421) {
        goto LABEL_947;
      }
    }
    LODWORD(v423) = *(_DWORD *)(v423 + 36);
    if ((int)v423 > 2483)
    {
      if ((int)v423 > 2731)
      {
        int v427 = v423 - 2808;
        LOBYTE(v423) = 15;
        uint64_t v424 = 0;
        switch(v427)
        {
          case 0:
            goto LABEL_927;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 9:
          case 10:
          case 11:
          case 13:
            goto LABEL_928;
          case 6:
            LOBYTE(v423) = 12;
            goto LABEL_927;
          case 7:
          case 8:
            LOBYTE(v423) = v465;
            goto LABEL_927;
          case 12:
            goto LABEL_910;
          case 14:
            if (v469 - 10 < 6 || v455 > 8) {
              goto LABEL_926;
            }
            unsigned int v440 = "SGID not supported.";
            break;
          default:
            uint64_t v424 = 0;
            goto LABEL_928;
        }
LABEL_951:
        llvm::report_fatal_error((llvm *)v440, (const llvm::Twine *)1);
      }
      if ((int)v423 > 2586)
      {
        uint64_t v424 = 0;
        switch((int)v423)
        {
          case 2669:
            goto LABEL_918;
          case 2670:
          case 2672:
          case 2674:
            goto LABEL_928;
          case 2671:
          case 2673:
          case 2675:
            goto LABEL_888;
          case 2676:
            goto LABEL_896;
          case 2677:
            LOBYTE(v423) = v459;
            goto LABEL_927;
          case 2678:
LABEL_906:
            LOBYTE(v423) = 3;
            goto LABEL_927;
          case 2679:
            goto LABEL_908;
          default:
            if (v423 != 2587) {
              goto LABEL_928;
            }
LABEL_920:
            if (v455 >= 0xF) {
              goto LABEL_926;
            }
            uint64_t v425 = (int)v455;
            int v426 = "\b";
            break;
        }
      }
      else
      {
        uint64_t v424 = 0;
        switch((int)v423)
        {
          case 2484:
            LOBYTE(v423) = v461;
            goto LABEL_927;
          case 2485:
            goto LABEL_908;
          case 2486:
            goto LABEL_906;
          case 2487:
          case 2488:
          case 2489:
          case 2490:
            goto LABEL_928;
          case 2491:
            goto LABEL_892;
          case 2492:
            goto LABEL_920;
          default:
            if (v423 == 2544) {
              goto LABEL_897;
            }
            uint64_t v424 = 0;
            if (v423 != 2586) {
              goto LABEL_928;
            }
LABEL_892:
            if (v455 >= 0xF) {
              goto LABEL_905;
            }
            uint64_t v425 = (int)v455;
            int v426 = (const char *)&unk_1CFB26EE0;
            break;
        }
      }
      goto LABEL_922;
    }
    if ((int)v423 <= 2168)
    {
      if ((int)v423 > 2138)
      {
        uint64_t v424 = 0;
        switch((int)v423)
        {
          case 2139:
            goto LABEL_926;
          case 2140:
LABEL_897:
            if (v455 >= 0xF) {
              goto LABEL_908;
            }
            uint64_t v425 = (int)v455;
            int v426 = (const char *)&unk_1CFB26E68;
            goto LABEL_922;
          case 2141:
          case 2142:
          case 2143:
          case 2144:
          case 2148:
          case 2149:
          case 2150:
          case 2151:
            goto LABEL_928;
          case 2145:
          case 2146:
          case 2147:
LABEL_888:
            LOBYTE(v423) = 11;
            goto LABEL_927;
          case 2152:
            goto LABEL_905;
          default:
            if (v423 != 2156) {
              goto LABEL_928;
            }
LABEL_910:
            LOBYTE(v423) = 5;
            break;
        }
        goto LABEL_927;
      }
      if (v423 == 2107)
      {
LABEL_905:
        LOBYTE(v423) = 1;
        goto LABEL_927;
      }
      uint64_t v424 = 0;
      if (v423 == 2132)
      {
LABEL_896:
        LOBYTE(v423) = 16;
LABEL_927:
        uint64_t v424 = 1 << v423;
      }
    }
    else
    {
      if ((int)v423 > 2305)
      {
        if ((int)v423 > 2407)
        {
          if ((v423 - 2408) >= 3)
          {
            if (v423 != 2423)
            {
              uint64_t v424 = 0;
              if (v423 != 2444) {
                goto LABEL_928;
              }
            }
LABEL_908:
            LOBYTE(v423) = 2;
            goto LABEL_927;
          }
          if (v455 < 0xF)
          {
            uint64_t v425 = (int)v455;
            int v426 = "\t";
LABEL_922:
            uint64_t v423 = *(void *)&v426[8 * v425];
            goto LABEL_927;
          }
LABEL_926:
          LOBYTE(v423) = 8;
          goto LABEL_927;
        }
        if (v423 != 2306)
        {
          uint64_t v424 = 0;
          if (v423 != 2365) {
            goto LABEL_928;
          }
LABEL_918:
          LOBYTE(v423) = 10;
          goto LABEL_927;
        }
        goto LABEL_905;
      }
      uint64_t v424 = 0;
      switch((int)v423)
      {
        case 2169:
          if (v469 > 0xF) {
            goto LABEL_926;
          }
          int v428 = 1 << v469;
          if (((1 << v469) & 0xFC00) != 0) {
            goto LABEL_918;
          }
          if ((v428 & 0x3E0) == 0)
          {
            if ((v428 & 0x1E) != 0)
            {
              unsigned int v440 = "LayerID not supported.";
              goto LABEL_951;
            }
            goto LABEL_926;
          }
          uint64_t v424 = 0;
          break;
        case 2170:
        case 2171:
        case 2172:
          break;
        case 2173:
          LOBYTE(v423) = 4;
          goto LABEL_927;
        case 2174:
          goto LABEL_908;
        case 2175:
        case 2176:
          goto LABEL_888;
        default:
          if (v423 == 2305) {
            goto LABEL_908;
          }
          break;
      }
    }
LABEL_928:
    if (!v424) {
      goto LABEL_947;
    }
    uint64_t v429 = **(void **)(*(void *)(v420 + 24) + 16);
    if ((*(_DWORD *)(v429 + 8) & 0xFE) == 0x12) {
      uint64_t v429 = **(void **)(v429 + 16);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v429);
    LODWORD(v489) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40) {
      operator new[]();
    }
    uint64_t v488 = 0;
    uint64_t v433 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)v416, (llvm::LLVMContext *)&v488, v430);
    if (v489 >= 0x41 && v488) {
      MEMORY[0x1D25D9CB0](v488, 0x1000C8000313F17);
    }
    LODWORD(v489) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40) {
      operator new[]();
    }
    if (PrimitiveSizeInBits) {
      unint64_t v434 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    }
    else {
      unint64_t v434 = 0;
    }
    uint64_t v488 = (void *)(v434 & v424);
    int v436 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)v416, (llvm::LLVMContext *)&v488, v432);
    if (v489 >= 0x41 && v488) {
      MEMORY[0x1D25D9CB0](v488, 0x1000C8000313F17);
    }
    uint64_t v488 = (void *)llvm::ValueAsMetadata::get(v433, v435);
    uint64_t v489 = llvm::ValueAsMetadata::get(v436, v437);
    char v414 = 1;
    Impl = llvm::MDTuple::getImpl((uint64_t)v416, &v488, 2, 0, 1);
    llvm::Instruction::setMetadata((llvm::Instruction *)v422, 4, Impl);
    goto LABEL_942;
  }
  char v414 = 0;
  return ((v442 | v155 & 1) != 0) | v414 & 1u;
}

uint64_t sub_1CC790734(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v64[2] = *MEMORY[0x1E4F143B8];
  uint64_t v62 = v64;
  v64[0] = a1;
  uint64_t v63 = 0x200000001;
  uint64_t v8 = *(uint64_t ***)(*(void *)(*(void *)(a5 + 48) + 56) + 40);
  int v9 = *a2;
  if (*a2 == 3)
  {
    if (a4) {
      int v13 = 2772;
    }
    else {
      int v13 = 2770;
    }
    llvm::Intrinsic::getType(*v8, 2744, 0, 0);
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v8, 2744, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v8, "llvm.agx3.coords.centroid", (const char *)0x19, Type, 0);
    uint64_t v22 = v21;
    llvm::Intrinsic::getType(*v8, 2140, 0, 0);
    unint64_t v23 = (llvm::PointerType *)llvm::Intrinsic::getType(*v8, 2140, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v8, "llvm.agx2.coverage.mask", (const char *)0x17, v23, 0);
    uint64_t v25 = (uint64_t **)v24;
    if (v24) {
      uint64_t v24 = *(void *)(v24 + 24);
    }
    __int16 v59 = 257;
    uint64_t v26 = sub_1CB845BAC((uint64_t *)a5, (uint64_t **)v24, v25, 0, 0, (uint64_t)v58, 0);
    long long v27 = (unsigned __int8 *)v26;
    uint64_t v28 = **(void **)(a5 + 64) + 1936;
    __int16 v61 = 257;
    if (*(void *)v26 != v28)
    {
      if (*(unsigned __int8 *)(v26 + 16) <= 0x14u)
      {
        long long v27 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a5 + 72)
                                                                                              + 224))(*(void *)(a5 + 72), 38, v26, v28);
        if (v27) {
          BOOL v32 = v27[16] >= 0x1Cu;
        }
        else {
          BOOL v32 = 0;
        }
        if (v32)
        {
          (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(a5 + 80) + 16))(*(void *)(a5 + 80), v27, v60, *(void *)(a5 + 48), *(void *)(a5 + 56));
          uint64_t v51 = *(unsigned int *)(a5 + 8);
          if (v51)
          {
            uint64_t v52 = *(void *)a5;
            uint64_t v53 = *(void *)a5 + 16 * v51;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v52, *(llvm::MDNode **)(v52 + 8));
              v52 += 16;
            }
            while (v52 != v53);
          }
        }
      }
      else
      {
        __int16 v59 = 257;
        long long v27 = (unsigned __int8 *)llvm::CastInst::Create(38, v26, v28, v58, 0);
        (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(a5 + 80) + 16))(*(void *)(a5 + 80), v27, v60, *(void *)(a5 + 48), *(void *)(a5 + 56));
        uint64_t v29 = *(unsigned int *)(a5 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)a5;
          uint64_t v31 = *(void *)a5 + 16 * v29;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v30, *(llvm::MDNode **)(v30 + 8));
            v30 += 16;
          }
          while (v30 != v31);
        }
      }
    }
    llvm::Intrinsic::getType(*v8, 2544, 0, 0);
    uint64_t v33 = (llvm::PointerType *)llvm::Intrinsic::getType(*v8, 2544, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v8, "llvm.agx2.sample.mask.in", (const char *)0x18, v33, 0);
    unsigned int v35 = (uint64_t **)v34;
    if (v34) {
      uint64_t v34 = *(void *)(v34 + 24);
    }
    __int16 v59 = 257;
    uint64_t v36 = sub_1CB845BAC((uint64_t *)a5, (uint64_t **)v34, v35, 0, 0, (uint64_t)v58, 0);
    uint64_t v37 = (unsigned __int8 *)v36;
    uint64_t v38 = **(void **)(a5 + 64) + 1936;
    __int16 v61 = 257;
    if (*(void *)v36 != v38)
    {
      if (*(unsigned __int8 *)(v36 + 16) <= 0x14u)
      {
        uint64_t v37 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a5 + 72)
                                                                                              + 224))(*(void *)(a5 + 72), 38, v36, v38);
        if (v37) {
          BOOL v41 = v37[16] >= 0x1Cu;
        }
        else {
          BOOL v41 = 0;
        }
        if (v41)
        {
          (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(a5 + 80) + 16))(*(void *)(a5 + 80), v37, v60, *(void *)(a5 + 48), *(void *)(a5 + 56));
          uint64_t v54 = *(unsigned int *)(a5 + 8);
          if (v54)
          {
            uint64_t v55 = *(void *)a5;
            uint64_t v57 = *(void *)a5 + 16 * v54;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v37, *(_DWORD *)v55, *(llvm::MDNode **)(v55 + 8));
              v55 += 16;
            }
            while (v55 != v57);
          }
        }
      }
      else
      {
        __int16 v59 = 257;
        uint64_t v37 = (unsigned __int8 *)llvm::CastInst::Create(38, v36, v38, v58, 0);
        (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(a5 + 80) + 16))(*(void *)(a5 + 80), v37, v60, *(void *)(a5 + 48), *(void *)(a5 + 56));
        uint64_t v39 = *(unsigned int *)(a5 + 8);
        if (v39)
        {
          uint64_t v40 = *(void *)a5;
          uint64_t v56 = *(void *)a5 + 16 * v39;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v37, *(_DWORD *)v40, *(llvm::MDNode **)(v40 + 8));
            v40 += 16;
          }
          while (v40 != v56);
        }
      }
    }
    if (v22) {
      uint64_t v16 = *(void *)(v22 + 24);
    }
    else {
      uint64_t v16 = 0;
    }
    v60[0] = (uint64_t)v27;
    v60[1] = (uint64_t)v37;
    __int16 v59 = 257;
    uint64_t v18 = (uint64_t *)a5;
    uint64_t v17 = (uint64_t **)v22;
    uint64_t v19 = 2;
  }
  else
  {
    if (v9 != 2)
    {
      if (a4) {
        int v10 = 2773;
      }
      else {
        int v10 = 2771;
      }
      BOOL v11 = v9 == 1;
      unsigned int v12 = 1;
      if (v11) {
        int v13 = v10;
      }
      else {
        int v13 = 0;
      }
      if (!a4) {
        goto LABEL_53;
      }
      goto LABEL_50;
    }
    if (a4) {
      int v13 = 2772;
    }
    else {
      int v13 = 2770;
    }
    llvm::Intrinsic::getType(*v8, 2745, 0, 0);
    int v15 = (llvm::PointerType *)llvm::Intrinsic::getType(*v8, 2745, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v8, "llvm.agx3.coords.sample", (const char *)0x17, v15, 0);
    uint64_t v17 = (uint64_t **)v16;
    if (v16) {
      uint64_t v16 = *(void *)(v16 + 24);
    }
    v60[0] = *((void *)a2 + 1);
    __int16 v59 = 257;
    uint64_t v18 = (uint64_t *)a5;
    uint64_t v19 = 1;
  }
  uint64_t v42 = sub_1CB845BAC(v18, (uint64_t **)v16, v17, v60, v19, (uint64_t)v58, 0);
  if (v63 >= HIDWORD(v63)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v62 + v63) = v42;
  unsigned int v12 = v63 + 1;
  LODWORD(v63) = v63 + 1;
  if (a4)
  {
LABEL_50:
    if ((unint64_t)v12 + 2 > HIDWORD(v63)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v43 = (char *)v62 + 8 * v12;
    *uint64_t v43 = a3;
    v43[1] = a4;
    LODWORD(v63) = v63 + 2;
  }
LABEL_53:
  llvm::Intrinsic::getType(*v8, v13, 0, 0);
  uint64_t v44 = (unsigned __int8 *)off_1E6830B58[v13];
  if (v44) {
    uint64_t v45 = (const char *)strlen(off_1E6830B58[v13]);
  }
  else {
    uint64_t v45 = 0;
  }
  unsigned int v46 = (llvm::PointerType *)llvm::Intrinsic::getType(*v8, v13, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v8, v44, v45, v46, 0);
  uint64_t v48 = (uint64_t **)v47;
  if (v47) {
    uint64_t v47 = *(void *)(v47 + 24);
  }
  __int16 v59 = 257;
  uint64_t v49 = sub_1CB845BAC((uint64_t *)a5, (uint64_t **)v47, v48, (uint64_t *)v62, v63, (uint64_t)v58, 0);
  if (v62 != v64) {
    free(v62);
  }
  return v49;
}

uint64_t sub_1CC790E0C()
{
  *(void *)&long long v3 = "type";
  *((void *)&v3 + 1) = 4;
  *((void *)&v2 + 1) = 49;
  int v1 = 1;
  sub_1CD63B698(&v3, &v2, &v1);

  return __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDA6A0, &dword_1CB82C000);
}

void sub_1CC790E90()
{
}

uint64_t sub_1CC790F2C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA788;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261DC38;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA790, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC790E90;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDA790, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC790FDC()
{
}

uint64_t sub_1CC791078(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA789;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261DCD8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA798, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC790FDC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDA798, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC791128(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CC7911E8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA78A;
  *(_DWORD *)(a1 + 24) = 3;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x1000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_1F261DD78;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7A0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC791128;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDA7A0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7912B8()
{
}

void sub_1CC7912F8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC791330(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC79137C(uint64_t a1, uint64_t ***a2)
{
  v59[19] = *MEMORY[0x1E4F143B8];
  sub_1CD3BBE1C(&v54, (llvm::Module *)a2[5]);
  long long v3 = a2[14];
  if (!v3) {
    goto LABEL_40;
  }
  if (!*((_DWORD *)v3 + 2)) {
    goto LABEL_40;
  }
  uint64_t v4 = v3[5];
  if (!v4) {
    goto LABEL_40;
  }
  int v5 = *((_DWORD *)v4 + 10);
  if (!v5) {
    goto LABEL_40;
  }
  uint64_t v6 = v4[3];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v50 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v50 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v50;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  unsigned int v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x74616566;
  for (int i = 1; ; ++i)
  {
    unsigned int v10 = v8 & (v5 - 1);
    uint64_t v11 = v6 + 24 * v10;
    unsigned int v12 = *(void **)v11;
    if (*(void *)v11 == -1)
    {
      if ("target-features" == (char *)-1) {
        goto LABEL_20;
      }
      goto LABEL_9;
    }
    if (v12 != (void *)-2) {
      break;
    }
    if ("target-features" == (char *)-2) {
      goto LABEL_20;
    }
LABEL_9:
    if (v12 == (void *)-1) {
      goto LABEL_40;
    }
    unsigned int v8 = i + v10;
  }
  if (*(void *)(v11 + 8) != 15) {
    goto LABEL_9;
  }
  if (*v12 != 0x662D746567726174 || *(void *)((char *)v12 + 7) != 0x7365727574616566) {
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v14 = *(void *)(v11 + 16);
  if (v14 && *(unsigned char *)(v14 + 8) == 2)
  {
    unint64_t v15 = *(unsigned int *)(v14 + 16);
    v53[0] = v14 + *(unsigned int *)(v14 + 12) + 25;
    v53[1] = v15;
    sub_1CBF43AA8((uint64_t)&v55);
    uint64_t v16 = llvm::StringRef::find(v53, "-fp16", 5uLL, 0);
    if (v16 == -1)
    {
      unint64_t v18 = 0;
    }
    else
    {
      for (uint64_t j = v16; j != -1; uint64_t j = llvm::StringRef::find(v53, "-fp16", 5uLL, j + 6))
      {
        std::ostream::write();
        unint64_t v18 = j + 6;
      }
    }
    if (v15 > v18) {
      std::ostream::write();
    }
    std::stringbuf::str();
    if (v52 >= 0) {
      uint64_t v19 = (unsigned __int8 *)__p;
    }
    else {
      uint64_t v19 = (unsigned __int8 *)__p[0];
    }
    if (v52 >= 0) {
      size_t v20 = v52 & 0x7F;
    }
    else {
      size_t v20 = (size_t)__p[1];
    }
    a2[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a2 + 14), **a2, -1, "target-features", 0xFuLL, v19, v20);
    if (v52 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v55 = (void *)*MEMORY[0x1E4FBA408];
    uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void **)((char *)&v55 + *((void *)v55 - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
    v57[0] = v21;
    v57[1] = MEMORY[0x1E4FBA470] + 16;
    if (v58 < 0) {
      operator delete((void *)v57[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1D25D9C00](v59);
  }
LABEL_40:
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "less-precise-fpmad", 0x12uLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "no-infs-fp-math", 0xFuLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "no-nans-fp-math", 0xFuLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "no-signed-zeros-fp-math", 0x17uLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "unsafe-fp-math", 0xEuLL);
  uint64_t v22 = (llvm::Module *)a2[5];
  uint64_t v55 = v57;
  uint64_t v56 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(v22, (uint64_t)&v55);
  if (v56)
  {
    unint64_t v23 = (uint64_t *)((char *)v55 + 16);
    uint64_t v24 = 24 * v56;
    while (1)
    {
      uint64_t v25 = *(void *)(*(v23 - 1) + 8);
      if (*(void *)v25 == 9)
      {
        uint64_t v26 = *(void *)(v25 + 24);
        uint64_t v27 = *(unsigned __int8 *)(v25 + 32);
        if (*(void *)"PIC Level" == v26 && aPicLevel[8] == v27) {
          break;
        }
      }
      v23 += 3;
      v24 -= 24;
      if (!v24) {
        goto LABEL_51;
      }
    }
    uint64_t v29 = *v23;
  }
  else
  {
LABEL_51:
    uint64_t v29 = 0;
  }
  if (v55 != v57)
  {
    free(v55);
    if (v29) {
      goto LABEL_82;
    }
    goto LABEL_54;
  }
  if (!v29) {
    goto LABEL_54;
  }
LABEL_82:
  uint64_t v48 = *(void *)(v29 + 128);
  uint64_t v49 = (void *)(v48 + 24);
  if (*(_DWORD *)(v48 + 32) >= 0x41u) {
    uint64_t v49 = (void *)*v49;
  }
  if (!*(_DWORD *)v49)
  {
LABEL_54:
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      goto LABEL_64;
    }
    uint64_t v30 = ***a2;
    uint64_t v31 = *(void *)(v30 + 152);
    uint64_t v32 = *(unsigned int *)(v30 + 168);
    if (!v32) {
      goto LABEL_61;
    }
    LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v34 = (uint64_t ****)(v31 + 16 * v33);
    unsigned int v35 = *v34;
    if (*v34 != a2)
    {
      int v36 = 1;
      while (v35 != (uint64_t ***)-4096)
      {
        int v37 = v33 + v36++;
        uint64_t v33 = v37 & (v32 - 1);
        unsigned int v35 = *(uint64_t ****)(v31 + 16 * v33);
        if (v35 == a2)
        {
          uint64_t v34 = (uint64_t ****)(v31 + 16 * v33);
          goto LABEL_62;
        }
      }
LABEL_61:
      uint64_t v34 = (uint64_t ****)(v31 + 16 * v32);
    }
LABEL_62:
    uint64_t v38 = v34[1];
    if ((unint64_t)*v38 < 4 || *((_DWORD *)v38 + 4) != 778266465)
    {
LABEL_64:
      if (!sub_1CD3BBE9C((uint64_t)&v54, (uint64_t)a2)) {
        *((_DWORD *)a2 + 8) = a2[4] & 0xFFFFBFC0 | 0x4008;
      }
    }
  }
  uint64_t v39 = a2[10];
  if (v39) {
    uint64_t v40 = (llvm::BasicBlock *)(v39 - 3);
  }
  else {
    uint64_t v40 = 0;
  }
  FirstNonPHIOrDbgOrAlloca = llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(v40);
  uint64_t v42 = (char *)v40 + 40;
  if ((char *)v40 + 40 != FirstNonPHIOrDbgOrAlloca)
  {
    uint64_t v43 = FirstNonPHIOrDbgOrAlloca;
    if (FirstNonPHIOrDbgOrAlloca) {
      uint64_t v44 = (llvm::Instruction *)(FirstNonPHIOrDbgOrAlloca - 24);
    }
    else {
      uint64_t v44 = 0;
    }
    do
    {
      uint64_t v45 = v43;
      uint64_t v43 = (char *)*((void *)v43 + 1);
      if (v45) {
        unsigned int v46 = (llvm::Instruction *)(v45 - 24);
      }
      else {
        unsigned int v46 = 0;
      }
      if (v45 && *((unsigned char *)v46 + 16) == 59) {
        llvm::Instruction::moveBefore(v46, v44);
      }
    }
    while (v43 != v42);
  }
  return 1;
}

void sub_1CC791A58()
{
}

void sub_1CC791A98(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC791AD0(llvm::PassRegistry *a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC791B24(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, -1, 2);
  return 1;
}

void sub_1CC791B64()
{
}

void sub_1CC791BA4(llvm::Pass *a1)
{
  sub_1CD63B9CC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC791BDC(llvm::LegacyInlinerBase *a1, llvm::AnalysisUsage *a2)
{
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  llvm::LegacyInlinerBase::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC791C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *(void *)(a1 + 160) = (*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::LegacyInlinerBase::inlineCalls(a1, a2);
}

uint64_t sub_1CC791CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 32);
  uint64_t v7 = *(void *)(*(void *)(a2 + 40) + 56);
  if (v6) {
    BOOL v8 = *(unsigned char *)(v6 + 16) == 3;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0) {
      goto LABEL_8;
    }
  }
  else if (!*(unsigned char *)(v6 + 16) && *(void *)(v6 + 72) == v6 + 72 && (*(unsigned char *)(v6 + 34) & 0x80) == 0)
  {
LABEL_8:
    v129[0] = 0;
    char v130 = 0;
    uint64_t result = (uint64_t)sub_1CC01CBE0((llvm::APInt *)"undefined external callee", (llvm::APInt *)v129, a3);
    if (v130)
    {
      unsigned int v10 = v129;
      return sub_1CD494A40((uint64_t)v10);
    }
    return result;
  }
  uint64_t v11 = *(void *)(v6 + 8);
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = *(void *)(v11 + 24);
      if (v12)
      {
        if (*(unsigned char *)(v12 + 16) == 84 && *(void *)(*(void *)(v12 + 40) + 56) == v6) {
          break;
        }
      }
      uint64_t v11 = *(void *)(v11 + 8);
      if (!v11) {
        goto LABEL_16;
      }
    }
    v127[0] = 0;
    char v128 = 0;
    uint64_t result = (uint64_t)sub_1CC01CBE0((llvm::APInt *)"recursive function", (llvm::APInt *)v127, a3);
    if (v128)
    {
      unsigned int v10 = v127;
      return sub_1CD494A40((uint64_t)v10);
    }
    return result;
  }
LABEL_16:
  char v124 = 0;
  char v126 = 0;
  uint64_t v13 = *(void *)(v6 + 112);
  if (v13 && (*(unsigned char *)(v13 + 15) & 8) != 0)
  {
    v122[0] = 0;
    char v123 = 0;
    uint64_t result = (uint64_t)sub_1CC01CBE0((llvm::APInt *)"noinline function attribute", (llvm::APInt *)v122, a3);
    if (v123)
    {
      uint64_t result = sub_1CD494A40((uint64_t)v122);
      char v123 = 0;
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDA7A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCDA7A8))
    {
      byte_1EBCDA78B = 0;
      __cxa_guard_release(&qword_1EBCDA7A8);
    }
    if (byte_1EBCDA78B)
    {
      v120[0] = 0;
      char v121 = 0;
      uint64_t result = (uint64_t)sub_1CC01CBE0((llvm::APInt *)"disabled", (llvm::APInt *)v120, a3);
      if (v121)
      {
        uint64_t result = sub_1CD494A40((uint64_t)v120);
        char v121 = 0;
      }
      goto LABEL_24;
    }
    uint64_t v14 = *(void *)(v6 + 8);
    if (v14 && !*(void *)(v14 + 8) && (*(_DWORD *)(v6 + 32) & 0xFu) - 7 <= 1)
    {
      v118[0] = 0;
      char v119 = 0;
      uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"Callee is going to be dead after inlining", (llvm::APInt *)v118, a3);
      if (v119)
      {
        uint64_t result = sub_1CD494A40((uint64_t)v118);
        char v119 = 0;
      }
      goto LABEL_24;
    }
    uint64_t v73 = a3;
    uint64_t v74 = v7;
    uint64_t v71 = a2;
    unint64_t v72 = (Function *)v6;
    uint64_t v15 = *(void *)(v6 + 80);
    uint64_t v75 = v6 + 72;
    if (v15 != v6 + 72)
    {
      int v16 = 0;
      int v17 = 0;
      int v77 = 0;
      int v18 = 0;
      unsigned int v19 = 0;
      int v20 = 0;
      BOOL v78 = (llvm::DataLayout *)(*(void *)(v7 + 40) + 272);
      while (1)
      {
        uint64_t v21 = v15 - 24;
        uint64_t v76 = v15;
        if (!v15) {
          uint64_t v21 = 0;
        }
        uint64_t v22 = v21 + 40;
        uint64_t v23 = *(void *)(v21 + 48);
        uint64_t v79 = v21 + 40;
        if (v23 != v21 + 40) {
          break;
        }
LABEL_82:
        uint64_t v15 = *(void *)(v76 + 8);
        if (v15 == v75) {
          goto LABEL_87;
        }
      }
      while (1)
      {
        uint64_t v26 = v23 ? v23 - 24 : 0;
        int v27 = *(unsigned __int8 *)(v26 + 16);
        uint64_t v28 = v27 == 60 ? (uint64_t *)v26 : 0;
        if (v23 && v27 == 60) {
          break;
        }
LABEL_61:
        if (v27 == 61) {
          uint64_t v39 = v26;
        }
        else {
          uint64_t v39 = 0;
        }
        if (v23 && v27 == 61)
        {
          uint64_t v40 = *(void *)(v39 - 32);
          unsigned int v41 = *(_DWORD *)(*(void *)v40 + 8);
          if ((v41 & 0xFE) == 0x12) {
            unsigned int v41 = *(_DWORD *)(**(void **)(*(void *)v40 + 16) + 8);
          }
          if (v41 > 0xFF) {
            goto LABEL_72;
          }
          int v42 = *(unsigned __int8 *)(v40 + 16);
          if (v42 == 62) {
            int v42 = *(unsigned __int8 *)(*(void *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF)) + 16);
          }
          if (v42 == 59)
          {
LABEL_72:
            int v27 = 61;
          }
          else
          {
            int v83 = v17;
            unsigned int v43 = v19;
            uint64_t v44 = **(llvm::Type ***)(v39 - 64);
            uint64_t v45 = sub_1CB83544C((uint64_t)v78, (uint64_t)v44);
            BOOL v47 = v46 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v78, v44, 1);
            if (v47)
            {
              char v25 = Alignment;
              char Alignment = v25;
            }
            unsigned int v19 = v43 + (((1 << Alignment) - 1 + ((unint64_t)(v45 + 7) >> 3)) & -(1 << Alignment));
            ++v77;
            int v27 = *(unsigned __int8 *)(v26 + 16);
            int v17 = v83;
            uint64_t v22 = v79;
          }
        }
        unsigned int v50 = v27 - 29;
        if (v50) {
          BOOL v51 = v50 >= 0xB;
        }
        else {
          BOOL v51 = 1;
        }
        if (!v51) {
          ++v16;
        }
        ++v20;
        uint64_t v23 = *(void *)(v23 + 8);
        if (v23 == v22) {
          goto LABEL_82;
        }
      }
      uint64_t v29 = *(v28 - 4);
      unsigned int v30 = *(_DWORD *)(*(void *)v29 + 8);
      if ((v30 & 0xFE) == 0x12) {
        unsigned int v30 = *(_DWORD *)(**(void **)(*(void *)v29 + 16) + 8);
      }
      if (v30 <= 0xFF)
      {
        int v31 = *(unsigned __int8 *)(v29 + 16);
        if (v31 == 83
          || v31 == 62
          && (int v31 = *(unsigned __int8 *)(*(void *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)) + 16), v31 == 83))
        {
          unsigned int v80 = v19;
          int v81 = v18;
          int v82 = v17;
          int v32 = 16;
LABEL_56:
          uint64_t v33 = (llvm::Type *)*v28;
          uint64_t v34 = sub_1CB83544C((uint64_t)v78, *v28);
          BOOL v36 = v35 == 1;
          char v37 = llvm::DataLayout::getAlignment(v78, v33, 1);
          if (v36)
          {
            char v24 = v37;
            char v37 = v24;
          }
          unsigned int v19 = v80 + v32 * (((1 << v37) - 1 + ((unint64_t)(v34 + 7) >> 3)) & -(1 << v37));
          int v18 = v32 + v81;
          int v27 = *(unsigned __int8 *)(v26 + 16);
          int v17 = v82;
          uint64_t v22 = v79;
          goto LABEL_59;
        }
        if (v31 != 59)
        {
          unsigned int v80 = v19;
          int v81 = v18;
          int v82 = v17;
          int v32 = 1;
          goto LABEL_56;
        }
      }
      int v27 = 60;
LABEL_59:
      if ((v30 & 0xFFFFFF00) == 0x200) {
        ++v17;
      }
      goto LABEL_61;
    }
    int v20 = 0;
    unsigned int v19 = 0;
    int v18 = 0;
    int v77 = 0;
    int v17 = 0;
    int v16 = 0;
LABEL_87:
    uint64_t v52 = *(void *)(v74 + 112);
    if (v52)
    {
      uint64_t v53 = v72;
      LODWORD(v52) = (*(unsigned char *)(v52 + 17) & 4) != 0 || *(char *)(v52 + 13) < 0;
    }
    else
    {
      uint64_t v53 = v72;
    }
    if (v18 > 0)
    {
      uint64_t v54 = *((void *)v53 + 1);
      if (v54)
      {
        int v55 = 0;
        do
        {
          ++v55;
          uint64_t v54 = *(void *)(v54 + 8);
        }
        while (v54);
      }
      else
      {
        int v55 = 0;
      }
      unsigned int v56 = v52 ? 50 : 2500;
      if (v55 * v20 / v19 < v56)
      {
        v116[0] = 0;
        char v117 = 0;
        uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"too many stack pointer argument loads", (llvm::APInt *)v116, v73);
        if (v117)
        {
          uint64_t result = sub_1CD494A40((uint64_t)v116);
          char v117 = 0;
        }
        goto LABEL_24;
      }
    }
    if (v77 >= 1)
    {
      uint64_t v57 = *((void *)v53 + 1);
      if (v57)
      {
        int v58 = 0;
        do
        {
          ++v58;
          uint64_t v57 = *(void *)(v57 + 8);
        }
        while (v57);
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v59 = v52 ? 50 : 2500;
      if (v58 * v20 / v19 < v59)
      {
        v114[0] = 0;
        char v115 = 0;
        uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"too many stack pointer argument stores", (llvm::APInt *)v114, v73);
        if (v115)
        {
          uint64_t result = sub_1CD494A40((uint64_t)v114);
          char v115 = 0;
        }
        goto LABEL_24;
      }
    }
    char v98 = 0;
    char v99 = 0;
    LOBYTE(v102) = 0;
    char v103 = 0;
    char v104 = 0;
    char v105 = 0;
    char v108 = 0;
    char v109 = 0;
    char v110 = 0;
    char v111 = 0;
    int v112 = 0;
    __int16 v113 = 256;
    if (v52)
    {
      if (v20 <= 1499 && v17 >= 9)
      {
        v87[0] = 0;
        char v88 = 0;
        uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"always inline small function with a lot of constant loads", (llvm::APInt *)v87, v73);
        if (v88)
        {
          uint64_t result = sub_1CD494A40((uint64_t)v87);
          char v88 = 0;
        }
        goto LABEL_24;
      }
      uint64_t v60 = v73;
      uint64_t v61 = v71;
      if (v20 > 149) {
        goto LABEL_127;
      }
      uint64_t v62 = *((void *)v53 + 1);
      if (!v62) {
        goto LABEL_127;
      }
      int v63 = -2;
      uint64_t v64 = *((void *)v53 + 1);
      do
      {
        int v65 = v63;
        if (!v63) {
          break;
        }
        uint64_t v64 = *(void *)(v64 + 8);
        ++v63;
      }
      while (v64);
      if (!v65 || *(void *)(v62 + 8))
      {
LABEL_127:
        int v97 = 200;
        int v102 = 200;
        char v103 = 1;
LABEL_128:
        char v101 = 1;
        int v100 = 350;
        char v107 = 1;
        int v106 = 2000;
        TTI = llvm::TargetTransformInfoWrapperPass::getTTI(*(llvm::TargetTransformInfoWrapperPass **)(a1 + 160), v53);
        uint64_t v84 = a1;
        uint64_t result = (uint64_t)llvm::getInlineCost(v61, (uint64_t)&v97, (llvm::BasicBlock *)TTI, (uint64_t)sub_1CC7925FC, (uint64_t)&v84, (uint64_t (*)(uint64_t, const llvm::Function *))sub_1CC792608, a1 + 48, v60, 0, v70, *(void *)(a1 + 40), 0);
        goto LABEL_24;
      }
      v85[0] = 0;
      char v86 = 0;
      uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"always inline small function with single callsite", (llvm::APInt *)v85, v73);
      if (v86)
      {
        uint64_t result = sub_1CD494A40((uint64_t)v85);
        char v86 = 0;
      }
    }
    else if (v17 < 3)
    {
      uint64_t v67 = *((void *)v53 + 1);
      if (!v67) {
        goto LABEL_134;
      }
      int v68 = -2;
      do
      {
        int v69 = v68;
        if (!v68) {
          break;
        }
        uint64_t v67 = *(void *)(v67 + 8);
        ++v68;
      }
      while (v67);
      if (!v69)
      {
        if (v16 || v20 > 549)
        {
          if (v16 > 3 || v20 > 499)
          {
            int v97 = 425;
            uint64_t v60 = v73;
            uint64_t v61 = v71;
            goto LABEL_128;
          }
          v89[0] = 0;
          char v90 = 0;
          uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"small functions with few branches", (llvm::APInt *)v89, v73);
          if (v90)
          {
            uint64_t result = sub_1CD494A40((uint64_t)v89);
            char v90 = 0;
          }
        }
        else
        {
          v91[0] = 0;
          char v92 = 0;
          uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"no branches that aren't too large", (llvm::APInt *)v91, v73);
          if (v92)
          {
            uint64_t result = sub_1CD494A40((uint64_t)v91);
            char v92 = 0;
          }
        }
      }
      else
      {
LABEL_134:
        v93[0] = 0;
        char v94 = 0;
        uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"very few callers", (llvm::APInt *)v93, v73);
        if (v94)
        {
          uint64_t result = sub_1CD494A40((uint64_t)v93);
          char v94 = 0;
        }
      }
    }
    else
    {
      v95[0] = 0;
      char v96 = 0;
      uint64_t result = (uint64_t)sub_1CC01CB38((llvm::APInt *)"too many constant address space loads", (llvm::APInt *)v95, v73);
      if (v96)
      {
        uint64_t result = sub_1CD494A40((uint64_t)v95);
        char v96 = 0;
      }
    }
  }
LABEL_24:
  if (v126 && v125[32])
  {
    unsigned int v10 = v125;
    return sub_1CD494A40((uint64_t)v10);
  }
  return result;
}

uint64_t sub_1CC7925FC(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(void *)a1 + 32), a2);
}

uint64_t sub_1CC792608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    sub_1CB920400();
    sub_1CC792658();
  }
  long long v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void sub_1CC792658()
{
}

uint64_t sub_1CC7926F4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA7B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261DE30;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7B8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC792658;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDA7B8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7927A4()
{
}

void sub_1CC7927E4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC792820(llvm::FunctionPass *a1, uint64_t a2)
{
  v183[6] = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 80);
    uint64_t v146 = a2 + 72;
    if (v4 != a2 + 72)
    {
LABEL_3:
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      int v181 = (void (***)(void))v183;
      uint64_t v182 = 0x600000000;
      uint64_t v6 = v5 + 40;
      size_t v157 = 0;
      uint64_t v158 = 0;
      unsigned int v159 = 0;
      uint64_t v7 = *(void *)(v5 + 48);
      uint64_t v147 = v4;
      if (v7 == v5 + 40) {
        goto LABEL_232;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (void (**)(void))(v7 - 24);
        if (!v7) {
          int v9 = 0;
        }
        int v10 = *((unsigned __int8 *)v9 + 16);
        if (v10 == 85) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = 0;
        }
        if (!v7 || v10 != 85 || *((_DWORD *)*v11 + 2) != 4109) {
          goto LABEL_29;
        }
        uint64_t v12 = *(v11 - 12);
        if (v182 >= (unint64_t)HIDWORD(v182)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v181[v182] = v11;
        LODWORD(v182) = v182 + 1;
        uint64_t v160 = (llvm::Value *)&v160;
        unint64_t v161 = &v160;
        uint64_t v162 = 0;
        uint64_t v164 = v12;
        uint64_t v165 = (uint64_t)&v165;
        unsigned int v166 = &v165;
        uint64_t v167 = 0;
        v154[0] = 0;
        unsigned int v13 = v159;
        char v14 = sub_1CC7937E0(v8, v159, (uint64_t)v12, v154);
        uint64_t v15 = (void **)v154[0];
        if (v14)
        {
          if (v167)
          {
            uint64_t v26 = v165;
            char v25 = v166;
            uint64_t v27 = *v166;
            *(void *)(v27 + 8) = *(void *)(v165 + 8);
            **(void **)(v26 + 8) = v27;
            uint64_t v167 = 0;
            if (v25 != &v165)
            {
              do
              {
                uint64_t v28 = (uint64_t *)v25[1];
                operator delete(v25);
                char v25 = v28;
              }
              while (v28 != &v165);
            }
          }
          goto LABEL_25;
        }
        if (4 * (int)v158 + 4 < 3 * v13)
        {
          if (v13 + ~v158 - HIDWORD(v158) > v13 >> 3) {
            goto LABEL_21;
          }
          int v16 = v13;
        }
        else
        {
          int v16 = 2 * v13;
        }
        sub_1CC793874((uint64_t)&v157, v16);
        v154[0] = 0;
        uint64_t v8 = (uint64_t)v157;
        sub_1CC7937E0((uint64_t)v157, v159, (uint64_t)v164, v154);
        uint64_t v15 = (void **)v154[0];
LABEL_21:
        LODWORD(v158) = v158 + 1;
        if (*v15 != (void *)-4096) {
          --HIDWORD(v158);
        }
        *uint64_t v15 = v164;
        v15[1] = v15 + 1;
        void v15[2] = v15 + 1;
        v15[3] = 0;
        int v17 = v167;
        if (v167)
        {
          uint64_t v30 = v165;
          uint64_t v29 = v166;
          uint64_t v31 = *v166;
          *(void *)(v31 + 8) = *(void *)(v165 + 8);
          **(void **)(v30 + 8) = v31;
          int v32 = v15[1];
          v32[1] = v29;
          *uint64_t v29 = (uint64_t)v32;
          v15[1] = (void *)v30;
          *(void *)(v30 + 8) = v15 + 1;
          v15[3] = v17;
          uint64_t v167 = 0;
        }
LABEL_25:
        if (v162)
        {
          unsigned int v19 = v160;
          int v18 = v161;
          int v20 = *v161;
          *((void *)v20 + 1) = *((void *)v160 + 1);
          **((void **)v19 + 1) = v20;
          uint64_t v162 = 0;
          if (v18 != &v160)
          {
            do
            {
              uint64_t v21 = (llvm::Value **)v18[1];
              operator delete(v18);
              int v18 = v21;
            }
            while (v21 != &v160);
          }
        }
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = 0;
        v22[2] = v11;
        char v24 = v15[1];
        uint64_t v23 = v15 + 1;
        void *v22 = v24;
        v22[1] = v23;
        v24[1] = v22;
        void *v23 = v22;
        ++v23[2];
LABEL_29:
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v6)
        {
          if (v182)
          {
            uint64_t v33 = v181;
            uint64_t v149 = &v181[v182];
            do
            {
              uint64_t v34 = *v33;
              if (!(*v33)[5])
              {
                llvm::Value::deleteValue(v34, v3);
                goto LABEL_200;
              }
              BOOL v153 = (llvm::ValueAsMetadata *)*v33;
              if (v159)
              {
                uint64_t v35 = (uint64_t)*(v34 - 12);
                uint64_t v36 = ((v35 >> 4) ^ (v35 >> 9)) & (v159 - 1);
                char v37 = &v157[4 * v36];
                uint64_t v38 = *v37;
                uint64_t v39 = *v33;
                if (v35 != *v37)
                {
                  int v40 = 1;
                  while (v38 != -4096)
                  {
                    int v41 = v36 + v40++;
                    uint64_t v36 = v41 & (v159 - 1);
                    uint64_t v38 = v157[4 * v36];
                    if (v35 == v38)
                    {
                      char v37 = &v157[4 * v36];
                      goto LABEL_221;
                    }
                  }
                  char v37 = &v157[4 * v159];
LABEL_221:
                  uint64_t v39 = *v33;
                }
              }
              else
              {
                char v37 = v157;
                uint64_t v39 = *v33;
              }
              int v42 = (uint64_t *)v37[2];
              uint64_t v43 = *v42;
              *(void *)(v43 + 8) = v42[1];
              *(void *)v42[1] = v43;
              --v37[3];
              operator delete(v42);
              uint64_t v44 = 0;
              uint64_t v45 = *(void **)*v39;
              uint64_t v164 = &v166;
              uint64_t v165 = 0x200000000;
              int v170 = v45;
              uint64_t v171 = &v179;
              uint64_t v172 = &v180;
              uint64_t v173 = 0;
              int v174 = 0;
              __int16 v175 = 512;
              char v176 = 7;
              size_t v168 = 0;
              uint64_t v169 = 0;
              uint64_t v177 = 0;
              uint64_t v178 = 0;
              size_t v179 = &unk_1F2616E88;
              uint64_t v180 = &unk_1F2617008;
              size_t v168 = v39[5];
              uint64_t v169 = v39 + 3;
              int v46 = (unsigned __int8 *)v39[6];
              v154[0] = v46;
              if (v46)
              {
                llvm::MetadataTracking::track((uint64_t)v154, v46, 2);
                uint64_t v44 = v154[0];
              }
              char v150 = v33;
              sub_1CB8461A4((uint64_t)&v164, 0, v44);
              uint64_t v48 = v153;
              if (v154[0])
              {
                int v128 = *(unsigned __int8 *)v154[0];
                if ((v128 - 4) > 0x1E)
                {
                  if ((v128 - 3) >= 0xFFFFFFFE) {
                    uint64_t v131 = v154[0];
                  }
                  else {
                    uint64_t v131 = 0;
                  }
                  if ((v128 - 3) < 0xFFFFFFFE)
                  {
                    if (v128 == 3) {
                      *(void *)(v154[0] + 8) = 0;
                    }
                    goto LABEL_51;
                  }
                  unint64_t v130 = v131 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v154[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v154[0] + 12)) {
                    goto LABEL_51;
                  }
                  uint64_t v129 = *(void *)(v154[0] + 16);
                  if ((v129 & 4) == 0) {
                    goto LABEL_51;
                  }
                  unint64_t v130 = v129 & 0xFFFFFFFFFFFFFFF8;
                  if (!v130) {
                    goto LABEL_51;
                  }
                }
                uint64_t v160 = (llvm::Value *)v154;
                sub_1CC5FA668(v130 + 16, &v160);
                uint64_t v48 = v153;
              }
LABEL_51:
              uint64_t v49 = v37 + 1;
              uint64_t v50 = v37[2];
              uint64_t v152 = v49;
              if ((void *)v50 != v49)
              {
                unint64_t v148 = v45;
                do
                {
                  BOOL v51 = *(llvm::ValueAsMetadata **)(v50 + 16);
                  unsigned __int8 v156 = 0;
                  uint64_t v52 = (llvm::Value *)*((void *)v48 - 12);
                  uint64_t v53 = *((void *)v48 - 8);
                  uint64_t v54 = *((void *)v48 - 4);
                  uint64_t v55 = *((void *)v51 - 8);
                  uint64_t v56 = *((void *)v51 - 4);
                  int v57 = *(unsigned __int8 *)(v53 + 16);
                  if (v57 == 16) {
                    uint64_t v58 = *((void *)v48 - 8);
                  }
                  else {
                    uint64_t v58 = 0;
                  }
                  int v59 = *(unsigned __int8 *)(v54 + 16);
                  if (v59 == 16) {
                    uint64_t v60 = *((void *)v48 - 4);
                  }
                  else {
                    uint64_t v60 = 0;
                  }
                  unsigned int v61 = *(unsigned __int8 *)(v55 + 16);
                  if (v61 == 16) {
                    uint64_t v62 = *((void *)v51 - 8);
                  }
                  else {
                    uint64_t v62 = 0;
                  }
                  unsigned int v63 = *(unsigned __int8 *)(v56 + 16);
                  if (v63 == 16) {
                    uint64_t v64 = *((void *)v51 - 4);
                  }
                  else {
                    uint64_t v64 = 0;
                  }
                  if (v58) {
                    BOOL v65 = v60 == 0;
                  }
                  else {
                    BOOL v65 = 1;
                  }
                  BOOL v67 = v65 || v62 == 0 || v64 == 0;
                  uint64_t v151 = v51;
                  if (!v67)
                  {
                    int v68 = (unint64_t *)(v58 + 24);
                    if (*(_DWORD *)(v58 + 32) >= 0x41u) {
                      int v68 = (unint64_t *)*v68;
                    }
                    int v69 = (unint64_t *)(v60 + 24);
                    if (*(_DWORD *)(v60 + 32) >= 0x41u) {
                      int v69 = (unint64_t *)*v69;
                    }
                    uint64_t v70 = (unint64_t *)(v62 + 24);
                    if (*(_DWORD *)(v62 + 32) >= 0x41u) {
                      uint64_t v70 = (unint64_t *)*v70;
                    }
                    uint64_t v71 = (unint64_t *)(v64 + 24);
                    if (*(_DWORD *)(v64 + 32) >= 0x41u) {
                      uint64_t v71 = (unint64_t *)*v71;
                    }
                    unint64_t v72 = *v68;
                    unint64_t v73 = *v69;
                    unint64_t v74 = *v70;
                    unint64_t v75 = *v71;
                    if (!v74 && v72 < 0x100
                      || (int v76 = 0, v77 = v75 | (v73 << 16), v78 = v74 | (v72 << 16), !v75) && v73 <= 0xFF)
                    {
                      int v76 = 1;
                      unsigned __int8 v156 = 1;
                      unint64_t v78 = v72 | (v74 << 16);
                      unint64_t v77 = v73 | (v75 << 16);
                    }
                    uint64_t v79 = ***(void ***)v48;
                    unsigned int v80 = *(llvm::ConstantInt **)(v79 + 1960);
                    unint64_t v81 = *(unsigned int *)(v79 + 1968);
                    LODWORD(v161) = v81 >> 8;
                    if (v81 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v81 <= 0xFF) {
                      unint64_t v82 = 0;
                    }
                    else {
                      unint64_t v82 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v81) + 63);
                    }
                    uint64_t v160 = (llvm::Value *)(v82 & v78);
                    uint64_t v84 = (llvm::Value *)llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v160, v47);
                    if (v161 >= 0x41 && v160) {
                      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
                    }
                    uint64_t v85 = ***(void ***)v153;
                    char v86 = *(llvm::ConstantInt **)(v85 + 1960);
                    unint64_t v87 = *(unsigned int *)(v85 + 1968);
                    LODWORD(v161) = v87 >> 8;
                    if (v87 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v87 <= 0xFF) {
                      unint64_t v88 = 0;
                    }
                    else {
                      unint64_t v88 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v87) + 63);
                    }
                    uint64_t v160 = (llvm::Value *)(v88 & v77);
                    int v89 = (llvm::Value *)llvm::ConstantInt::get(v86, (llvm::LLVMContext *)&v160, v83);
                    if (v161 >= 0x41 && v160) {
                      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
                    }
                    uint64_t v160 = (llvm::Value *)"sel";
                    __int16 v163 = 259;
                    Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v164, v52, v84, v89, (const llvm::Twine *)&v160, 0);
                    if (Select)
                    {
                      char v109 = Select;
LABEL_173:
                      unsigned int v116 = v148;
                      uint64_t v160 = (llvm::Value *)"shiftr";
                      __int16 v163 = 259;
                      char v117 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v109, 0x10uLL, 0);
                      unsigned int v118 = sub_1CC2429AC((uint64_t)&v164, (uint64_t)v109, (uint64_t)v117, (uint64_t)&v160, 0);
                      char v119 = (unsigned __int8 *)v118;
                      uint64_t v120 = *v148 + 1936;
                      v154[0] = "sel_high";
                      __int16 v155 = 259;
                      if (*(void *)v118 != v120)
                      {
                        if (*((unsigned __int8 *)v118 + 16) > 0x14u)
                        {
                          __int16 v163 = 257;
                          char v119 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v118, v120, (const char **)&v160, 0);
                          (*((void (**)(void **, unsigned __int8 *, void *, void (*)(void), void (**)(void)))*v172
                           + 2))(v172, v119, v154, v168, v169);
                          if (v165)
                          {
                            unsigned int v132 = (llvm::MDNode **)v164;
                            int v133 = (llvm::MDNode **)((char *)v164 + 16 * v165);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v119, *(_DWORD *)v132, v132[1]);
                              v132 += 2;
                            }
                            while (v132 != v133);
                          }
                          goto LABEL_176;
                        }
                        char v119 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v171
                                                   + 28))(v171, 38, v118, v120);
                        if (v119) {
                          BOOL v121 = v119[16] >= 0x1Cu;
                        }
                        else {
                          BOOL v121 = 0;
                        }
                        if (v121)
                        {
                          (*((void (**)(void **, unsigned __int8 *, void *, void (*)(void), void (**)(void)))*v172
                           + 2))(v172, v119, v154, v168, v169);
                          if (v165)
                          {
                            uint64_t v134 = (llvm::MDNode **)v164;
                            unint64_t v135 = (llvm::MDNode **)((char *)v164 + 16 * v165);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v119, *(_DWORD *)v134, v134[1]);
                              v134 += 2;
                            }
                            while (v134 != v135);
                          }
LABEL_176:
                          unsigned int v116 = v148;
                        }
                      }
                      uint64_t v122 = *v116 + 1936;
                      v154[0] = "sel_low";
                      __int16 v155 = 259;
                      if (*(void *)v109 != v122)
                      {
                        if (*((unsigned __int8 *)v109 + 16) <= 0x14u)
                        {
                          char v109 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v171
                                                 + 28))(v171, 38, v109, v122);
                          if (v109) {
                            BOOL v125 = *((unsigned __int8 *)v109 + 16) >= 0x1Cu;
                          }
                          else {
                            BOOL v125 = 0;
                          }
                          if (v125)
                          {
                            (*((void (**)(void **, llvm::Value *, void *, void (*)(void), void (**)(void)))*v172
                             + 2))(v172, v109, v154, v168, v169);
                            if (v165)
                            {
                              BOOL v136 = (llvm::MDNode **)v164;
                              unint64_t v137 = (llvm::MDNode **)((char *)v164 + 16 * v165);
                              do
                              {
                                llvm::Instruction::setMetadata(v109, *(_DWORD *)v136, v136[1]);
                                v136 += 2;
                              }
                              while (v136 != v137);
                            }
                          }
                        }
                        else
                        {
                          __int16 v163 = 257;
                          char v109 = llvm::CastInst::Create(38, (uint64_t)v109, v122, (const char **)&v160, 0);
                          (*((void (**)(void **, llvm::Value *, void *, void (*)(void), void (**)(void)))*v172
                           + 2))(v172, v109, v154, v168, v169);
                          if (v165)
                          {
                            char v123 = (llvm::MDNode **)v164;
                            char v124 = (llvm::MDNode **)((char *)v164 + 16 * v165);
                            do
                            {
                              llvm::Instruction::setMetadata(v109, *(_DWORD *)v123, v123[1]);
                              v123 += 2;
                            }
                            while (v123 != v124);
                          }
                        }
                      }
                      if (v76) {
                        char v126 = v109;
                      }
                      else {
                        char v126 = (llvm::Value *)v119;
                      }
                      if (v76) {
                        uint64_t v127 = (llvm::Value *)v119;
                      }
                      else {
                        uint64_t v127 = v109;
                      }
                      llvm::Value::doRAUW(v153, v126, (llvm::Value *)1);
                      llvm::Value::doRAUW(v51, v127, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                    uint64_t v48 = v153;
                    uint64_t v53 = *((void *)v153 - 8);
                    uint64_t v54 = *((void *)v153 - 4);
                    uint64_t v52 = (llvm::Value *)*((void *)v153 - 12);
                    uint64_t v55 = *((void *)v51 - 8);
                    uint64_t v56 = *((void *)v51 - 4);
                    int v57 = *(unsigned __int8 *)(v53 + 16);
                    int v59 = *(unsigned __int8 *)(v54 + 16);
                    unsigned int v61 = *(unsigned __int8 *)(v55 + 16);
                    unsigned int v63 = *(unsigned __int8 *)(v56 + 16);
                  }
                  if (v57 == 16) {
                    uint64_t v91 = v53;
                  }
                  else {
                    uint64_t v91 = 0;
                  }
                  if (v59 == 16) {
                    uint64_t v92 = v54;
                  }
                  else {
                    uint64_t v92 = 0;
                  }
                  if (v61 == 16) {
                    uint64_t v93 = v55;
                  }
                  else {
                    uint64_t v93 = 0;
                  }
                  if (v63 == 16) {
                    uint64_t v94 = v56;
                  }
                  else {
                    uint64_t v94 = 0;
                  }
                  if (v91) {
                    BOOL v95 = v93 == 0;
                  }
                  else {
                    BOOL v95 = 1;
                  }
                  int v96 = !v95;
                  if (v96 == 1 && v92 == 0 && v94 == 0)
                  {
                    if (v63 >= 0x1C)
                    {
                      uint64_t v106 = *(void *)(v56 + 40);
                      if (v106 == *((void *)v48 + 5))
                      {
                        int v107 = *(__int16 *)(v106 + 18);
                        if ((v107 & 0x80000000) == 0)
                        {
                          uint64_t v110 = *(void *)(v106 + 48);
                          if (v110 != v106 + 40)
                          {
                            int v111 = 0;
                            do
                            {
                              uint64_t v112 = v110 - 24;
                              if (!v110) {
                                uint64_t v112 = 0;
                              }
                              *(_DWORD *)(v112 + 56) = v111++;
                              uint64_t v110 = *(void *)(v110 + 8);
                            }
                            while (v110 != v106 + 40);
                          }
                          *(_WORD *)(v106 + 18) = v107 | 0x8000;
                        }
                        unsigned int v104 = *((_DWORD *)v48 + 14);
                        unsigned int v105 = *(_DWORD *)(v56 + 56);
LABEL_143:
                        if (v104 < v105) {
                          goto LABEL_152;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v91) {
                      BOOL v99 = 0;
                    }
                    else {
                      BOOL v99 = v93 == 0;
                    }
                    if (!v99 || v92 == 0 || v94 == 0) {
                      goto LABEL_152;
                    }
                    if (v61 >= 0x1C)
                    {
                      uint64_t v102 = *(void *)(v55 + 40);
                      if (v102 == *((void *)v48 + 5))
                      {
                        int v103 = *(__int16 *)(v102 + 18);
                        if ((v103 & 0x80000000) == 0)
                        {
                          uint64_t v113 = *(void *)(v102 + 48);
                          if (v113 != v102 + 40)
                          {
                            int v114 = 0;
                            do
                            {
                              uint64_t v115 = v113 - 24;
                              if (!v113) {
                                uint64_t v115 = 0;
                              }
                              *(_DWORD *)(v115 + 56) = v114++;
                              uint64_t v113 = *(void *)(v113 + 8);
                            }
                            while (v113 != v102 + 40);
                          }
                          *(_WORD *)(v102 + 18) = v103 | 0x8000;
                        }
                        unsigned int v104 = *((_DWORD *)v48 + 14);
                        unsigned int v105 = *(_DWORD *)(v55 + 56);
                        goto LABEL_143;
                      }
                    }
                  }
                  uint64_t v160 = 0;
                  if (v96)
                  {
                    if (!sub_1CC793A34(v54, v56, (char *)&v156)) {
                      goto LABEL_151;
                    }
                    int v76 = v156;
                    sub_1CC793CC0(v91, v93, v54, v56, v156, (uint64_t)&v164, &v160, v52, 0);
                  }
                  else
                  {
                    if (!sub_1CC793A34(v53, v55, (char *)&v156))
                    {
LABEL_151:
                      uint64_t v48 = v153;
                      goto LABEL_152;
                    }
                    uint64_t v108 = v55;
                    int v76 = v156;
                    sub_1CC793CC0(v92, v94, v53, v108, v156, (uint64_t)&v164, &v160, v52, 1);
                  }
                  char v109 = v160;
                  uint64_t v48 = v153;
                  if (v160)
                  {
                    BOOL v51 = v151;
                    goto LABEL_173;
                  }
LABEL_152:
                  uint64_t v50 = *(void *)(v50 + 8);
                }
                while ((void *)v50 != v152);
              }
              uint64_t v33 = v150;
              if (v164 != &v166) {
                free(v164);
              }
LABEL_200:
              ++v33;
            }
            while (v33 != v149);
          }
LABEL_232:
          uint64_t v138 = (uint64_t)v157;
          if (v159)
          {
            uint64_t v139 = &v157[4 * v159];
            int v140 = v157;
            do
            {
              if (*v140 != -4096 && *v140 != -8192)
              {
                if (v140[3])
                {
                  uint64_t v142 = v140[1];
                  uint64_t v141 = (uint64_t *)v140[2];
                  uint64_t v143 = *v141;
                  *(void *)(v143 + 8) = *(void *)(v142 + 8);
                  **(void **)(v142 + 8) = v143;
                  v140[3] = 0;
                  if (v141 != v140 + 1)
                  {
                    do
                    {
                      uint64_t v144 = (uint64_t *)v141[1];
                      operator delete(v141);
                      uint64_t v141 = v144;
                    }
                    while (v144 != v140 + 1);
                  }
                }
              }
              v140 += 4;
            }
            while (v140 != v139);
          }
          MEMORY[0x1D25D9CD0](v138, 8);
          if (v181 != v183) {
            free(v181);
          }
          uint64_t v4 = *(void *)(v147 + 8);
          if (v4 == v146) {
            return 0;
          }
          goto LABEL_3;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CC7937E0(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v7 = v5;
        }
        int v12 = v4 + v8++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v9 = 1;
        if (*v5 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = 0;
      if (v7) {
        uint64_t v5 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

void *sub_1CC793874(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC793940(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      void *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC793940(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 32 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v17 = 0;
      uint64_t result = sub_1CC7937E0(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v17);
      uint64_t v10 = v17;
      uint64_t v11 = v17 + 1;
      *int v17 = *a2;
      v10[1] = (uint64_t)v11;
      v10[2] = (uint64_t)v11;
      v10[3] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        uint64_t v14 = a2[1];
        unsigned int v13 = (uint64_t *)a2[2];
        uint64_t v15 = *v13;
        *(void *)(v15 + 8) = *(void *)(v14 + 8);
        **(void **)(v14 + 8) = v15;
        uint64_t v16 = v10[1];
        *(void *)(v16 + 8) = v13;
        *unsigned int v13 = v16;
        v10[1] = v14;
        *(void *)(v14 + 8) = v11;
        v10[3] = v12;
        a2[3] = 0;
      }
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 4;
  }
  return result;
}

uint64_t sub_1CC793A34(uint64_t a1, uint64_t a2, char *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 == 66) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 66) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_59;
  }
  uint64_t v8 = *(void *)(v4 - 32);
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 == 54 || v9 == 5 && *(_WORD *)(v8 + 18) == 26)
  {
    int v10 = *(_DWORD *)(v8 + 20);
    uint64_t v11 = (v10 & 0x40000000) != 0 ? *(void *)(v8 - 8) : v8 - 32 * (v10 & 0x7FFFFFF);
    uint64_t v12 = *(void *)(v11 + 32);
    if (v12 && *(unsigned char *)(v12 + 16) == 16)
    {
      uint64_t v14 = (void *)(v12 + 24);
      uint64_t v15 = *(unsigned int *)(v12 + 32);
      if (v15 >= 0x41)
      {
        int v16 = 0;
        int64_t v17 = (unint64_t)(v15 + 63) >> 6;
        do
        {
          BOOL v18 = v17-- < 1;
          if (v18) {
            break;
          }
          unint64_t v19 = *(void *)(*v14 + 8 * v17);
          v16 += __clz(v19);
        }
        while (!v19);
        int v20 = v15 | 0xFFFFFFC0;
        if ((v15 & 0x3F) == 0) {
          int v20 = 0;
        }
        if ((v15 - v16 - v20) > 0x40) {
          goto LABEL_35;
        }
        uint64_t v14 = (void *)*v14;
      }
      if (*v14 == 16)
      {
        uint64_t v21 = (v10 & 0x40000000) != 0 ? *(void **)(v8 - 8) : (void *)(v8 - 32 * (v10 & 0x7FFFFFF));
        if (*(void *)(v6 - 32) == *v21)
        {
          char v46 = 0;
          goto LABEL_88;
        }
      }
    }
  }
LABEL_35:
  uint64_t v22 = *(void *)(v6 - 32);
  int v23 = *(unsigned __int8 *)(v22 + 16);
  if (v23 != 54 && (v23 != 5 || *(_WORD *)(v22 + 18) != 26)) {
    goto LABEL_59;
  }
  int v24 = *(_DWORD *)(v22 + 20);
  uint64_t v25 = (v24 & 0x40000000) != 0 ? *(void *)(v22 - 8) : v22 - 32 * (v24 & 0x7FFFFFF);
  uint64_t v26 = *(void *)(v25 + 32);
  if (!v26 || *(unsigned char *)(v26 + 16) != 16) {
    goto LABEL_59;
  }
  uint64_t v28 = (void *)(v26 + 24);
  uint64_t v29 = *(unsigned int *)(v26 + 32);
  if (v29 < 0x41) {
    goto LABEL_54;
  }
  int v30 = 0;
  int64_t v31 = (unint64_t)(v29 + 63) >> 6;
  do
  {
    BOOL v18 = v31-- < 1;
    if (v18) {
      break;
    }
    unint64_t v32 = *(void *)(*v28 + 8 * v31);
    v30 += __clz(v32);
  }
  while (!v32);
  int v33 = v29 | 0xFFFFFFC0;
  if ((v29 & 0x3F) == 0) {
    int v33 = 0;
  }
  if ((v29 - v30 - v33) <= 0x40)
  {
    uint64_t v28 = (void *)*v28;
LABEL_54:
    if (*v28 != 16) {
      goto LABEL_59;
    }
    uint64_t v34 = (v24 & 0x40000000) != 0 ? *(void **)(v22 - 8) : (void *)(v22 - 32 * (v24 & 0x7FFFFFF));
    if (v8 != *v34) {
      goto LABEL_59;
    }
    char v46 = 1;
LABEL_88:
    *a3 = v46;
    return 1;
  }
LABEL_59:
  if (v3 == 89) {
    uint64_t v35 = a1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v5 == 89) {
    uint64_t v36 = a2;
  }
  else {
    uint64_t v36 = 0;
  }
  if (v35) {
    BOOL v37 = v36 == 0;
  }
  else {
    BOOL v37 = 1;
  }
  if (v37) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(v35 - 32) + 16) == 16) {
    uint64_t v39 = *(void *)(v35 - 32);
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = *(void *)(v36 - 32);
  if (*(unsigned char *)(v40 + 16) == 16) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  int v42 = (char *)(v39 + 24);
  if (*(_DWORD *)(v39 + 32) >= 0x41u) {
    int v42 = *(char **)v42;
  }
  uint64_t v43 = *(char **)v42;
  uint64_t v44 = (char *)(v41 + 24);
  if (*(_DWORD *)(v41 + 32) >= 0x41u) {
    uint64_t v44 = *(char **)v44;
  }
  uint64_t v45 = *(char **)v44;
  if ((v43 & 1) == 0)
  {
    char v46 = (_BYTE)v45 - (_BYTE)v43;
    if (v45 - v43 == 1) {
      goto LABEL_88;
    }
  }
  char v46 = 0;
  uint64_t result = 0;
  int64_t v47 = v43 - v45;
  uint64_t v48 = v45 & 1;
  if (v47 == 1 && v48 == 0) {
    goto LABEL_88;
  }
  return result;
}

llvm::Value *sub_1CC793CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, llvm::Value **a7, llvm::Value *a8, char a9)
{
  uint64_t v12 = (unsigned __int8 *)a4;
  unsigned int v13 = (unsigned __int8 *)a3;
  uint64_t v14 = (unint64_t *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32) >= 0x41u) {
    uint64_t v14 = (unint64_t *)*v14;
  }
  uint64_t v15 = (unint64_t *)(a2 + 24);
  if (*(_DWORD *)(a2 + 32) >= 0x41u) {
    uint64_t v15 = (unint64_t *)*v15;
  }
  unint64_t v16 = *v14;
  unint64_t v17 = *v15;
  BOOL v18 = *(uint64_t **)a3;
  uint64_t v19 = **(void **)a3;
  uint64_t v20 = *(void *)v19 + 1960;
  if (a5)
  {
    v64[0] = "zext_high";
    __int16 v65 = 259;
    if (*(void *)a4 == v20)
    {
      uint64_t v21 = (unsigned __int8 *)a4;
    }
    else if (*(unsigned __int8 *)(a4 + 16) <= 0x14u)
    {
      uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a6 + 72)
                                                                                            + 224))(*(void *)(a6 + 72), 39, a4, v20);
      if (v21) {
        BOOL v26 = v21[16] >= 0x1Cu;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v21, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
        uint64_t v50 = *(unsigned int *)(a6 + 8);
        if (v50)
        {
          uint64_t v51 = *(void *)a6;
          uint64_t v62 = *(void *)a6 + 16 * v50;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v51, *(llvm::MDNode **)(v51 + 8));
            v51 += 16;
          }
          while (v51 != v62);
        }
      }
    }
    else
    {
      __int16 v68 = 257;
      uint64_t v21 = (unsigned __int8 *)llvm::CastInst::Create(39, a4, v20, &v66, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v21, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
      uint64_t v22 = *(unsigned int *)(a6 + 8);
      if (v22)
      {
        uint64_t v23 = *(void *)a6;
        uint64_t v60 = *(void *)a6 + 16 * v22;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
          v23 += 16;
        }
        while (v23 != v60);
      }
    }
    unint64_t v27 = v16 | (v17 << 16);
    uint64_t v28 = *(void *)v19 + 1960;
    v64[0] = "zext_low";
    __int16 v65 = 259;
    if (*(void *)v13 != v28)
    {
      if (v13[16] <= 0x14u)
      {
        unsigned int v13 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a6 + 72) + 224))(*(void *)(a6 + 72), 39, v13, v28);
        if (v13) {
          BOOL v37 = v13[16] >= 0x1Cu;
        }
        else {
          BOOL v37 = 0;
        }
        if (v37)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v13, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
          uint64_t v54 = *(unsigned int *)(a6 + 8);
          if (v54)
          {
            uint64_t v55 = *(void *)a6;
            uint64_t v56 = *(void *)a6 + 16 * v54;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v55, *(llvm::MDNode **)(v55 + 8));
              v55 += 16;
            }
            while (v55 != v56);
          }
        }
      }
      else
      {
        __int16 v68 = 257;
        unsigned int v13 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v13, v28, &v66, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v13, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
        uint64_t v29 = *(unsigned int *)(a6 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)a6;
          uint64_t v31 = *(void *)a6 + 16 * v29;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v30, *(llvm::MDNode **)(v30 + 8));
            v30 += 16;
          }
          while (v30 != v31);
        }
      }
    }
    uint64_t v12 = v13;
  }
  else
  {
    v64[0] = "zext_high";
    __int16 v65 = 259;
    if (v18 == (uint64_t *)v20)
    {
      uint64_t v21 = (unsigned __int8 *)a3;
    }
    else if (*(unsigned __int8 *)(a3 + 16) <= 0x14u)
    {
      uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a6 + 72)
                                                                                            + 224))(*(void *)(a6 + 72), 39, a3, v20);
      if (v21) {
        BOOL v32 = v21[16] >= 0x1Cu;
      }
      else {
        BOOL v32 = 0;
      }
      if (v32)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v21, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
        uint64_t v52 = *(unsigned int *)(a6 + 8);
        if (v52)
        {
          uint64_t v53 = *(void *)a6;
          uint64_t v63 = *(void *)a6 + 16 * v52;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v53, *(llvm::MDNode **)(v53 + 8));
            v53 += 16;
          }
          while (v53 != v63);
        }
      }
    }
    else
    {
      __int16 v68 = 257;
      uint64_t v21 = (unsigned __int8 *)llvm::CastInst::Create(39, a3, v20, &v66, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v21, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
      uint64_t v24 = *(unsigned int *)(a6 + 8);
      if (v24)
      {
        uint64_t v25 = *(void *)a6;
        uint64_t v61 = *(void *)a6 + 16 * v24;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
          v25 += 16;
        }
        while (v25 != v61);
      }
    }
    unint64_t v27 = v17 | (v16 << 16);
    uint64_t v33 = *(void *)v19 + 1960;
    v64[0] = "zext_low";
    __int16 v65 = 259;
    if (*(void *)v12 != v33)
    {
      if (v12[16] <= 0x14u)
      {
        uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a6 + 72) + 224))(*(void *)(a6 + 72), 39, v12, v33);
        if (v12) {
          BOOL v38 = v12[16] >= 0x1Cu;
        }
        else {
          BOOL v38 = 0;
        }
        if (v38)
        {
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v12, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
          uint64_t v57 = *(unsigned int *)(a6 + 8);
          if (v57)
          {
            uint64_t v58 = *(void *)a6;
            uint64_t v59 = *(void *)a6 + 16 * v57;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v58, *(llvm::MDNode **)(v58 + 8));
              v58 += 16;
            }
            while (v58 != v59);
          }
        }
      }
      else
      {
        __int16 v68 = 257;
        uint64_t v12 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v12, v33, &v66, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v12, v64, *(void *)(a6 + 48), *(void *)(a6 + 56));
        uint64_t v34 = *(unsigned int *)(a6 + 8);
        if (v34)
        {
          uint64_t v35 = *(void *)a6;
          uint64_t v36 = *(void *)a6 + 16 * v34;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v35, *(llvm::MDNode **)(v35 + 8));
            v35 += 16;
          }
          while (v35 != v36);
        }
      }
    }
  }
  BOOL v66 = "zext_high_shifted";
  __int16 v68 = 259;
  uint64_t v39 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v21, 0x10uLL, 0);
  uint64_t v40 = sub_1CC242524(a6, (uint64_t)v21, (uint64_t)v39, (uint64_t)&v66, 0, 0);
  BOOL v66 = "packed";
  __int16 v68 = 259;
  int v42 = sub_1CB844AF4(a6, v40, (uint64_t)v12, (uint64_t)&v66);
  uint64_t v43 = *(llvm::ConstantInt **)(*(void *)v19 + 1960);
  unsigned int v44 = *(_DWORD *)(*(void *)v19 + 1968);
  unsigned int v67 = v44 >> 8;
  if (v44 >> 8 > 0x40) {
    operator new[]();
  }
  if (v44 <= 0xFF) {
    unint64_t v45 = 0;
  }
  else {
    unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v44) + 63);
  }
  BOOL v66 = (const char *)(v45 & v27);
  char v46 = (llvm::Value *)llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v66, v41);
  if (v67 >= 0x41 && v66) {
    MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
  }
  BOOL v66 = "sel";
  __int16 v68 = 259;
  if (a9)
  {
    int64_t v47 = v42;
    uint64_t v48 = v46;
  }
  else
  {
    int64_t v47 = v46;
    uint64_t v48 = v42;
  }
  uint64_t result = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a6, a8, v47, v48, (const llvm::Twine *)&v66, 0);
  *a7 = result;
  return result;
}

void sub_1CC7944BC()
{
}

void sub_1CC794558()
{
}

void sub_1CC794624(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC79465C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 72;
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3 == a2 + 72)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = v3 - 24;
      if (!v3) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5 + 40;
      for (uint64_t i = *(void *)(v5 + 48); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v8 = i - 24;
        }
        else {
          uint64_t v8 = 0;
        }
        if (sub_1CB845E74(v8) && *(unsigned __int8 *)(v8 + 16) - 41 <= 0x11)
        {
          *(unsigned char *)(v8 + 17) |= 0xFEu;
          char v4 = 1;
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_1CC794710(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC7947B8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA7D0;
  *(void *)a1 = &unk_1F261DF70;
  *(_OWORD *)(a1 + 24) = xmmword_1CD91D2D0;
  *(void *)(a1 + 40) = a1 + 56;
  *(void *)(a1 + 48) = 0x400000000;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7D8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC794710;
    v5[1] = &PassRegistry;
    char v4 = v5;
    std::__call_once(&qword_1EBCDA7D8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CC794880(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 167) < 2;
}

void sub_1CC7948D0()
{
}

void sub_1CC79490C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261DF70;
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v2 != (char *)this + 56) {
    free(v2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC794970(llvm::Pass *this)
{
  *(void *)this = &unk_1F261DF70;
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v2 != (char *)this + 56) {
    free(v2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC7949E8()
{
  return "move allocas to local memory";
}

void sub_1CC7949F8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC794AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v359 = *MEMORY[0x1E4F143B8];
  int v4 = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
  if (v4 != 106 && v4 != 101) {
    return 0;
  }
  *(_DWORD *)(a1 + 28) = 0;
  sub_1CD10A77C(*(llvm::Module **)(a2 + 40), (uint64_t)&v348);
  int v5 = HIDWORD(v348);
  *(_DWORD *)(a1 + 28) = HIDWORD(v348);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_7:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_7;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  int v10 = v349[0];
  int v11 = v348;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 32) + 24))(*(void *)(v12 + 32), a2);
  uint64_t v14 = sub_1CD113BD0(*(llvm::Module **)(a2 + 40), v13);
  if ((v14 & 0xFF00000000) == 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 36) = v14;
  uint64_t v15 = *(uint64_t **)(a1 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  int v317 = v11;
  int v318 = v10;
  uint64_t v319 = *(void *)(a2 + 40);
  if (v16 == v17)
  {
LABEL_13:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::BlockFrequencyInfoWrapperPass::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_13;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::BlockFrequencyInfoWrapperPass::ID);
  uint64_t v321 = a2;
  uint64_t v323 = a1;
  *(_DWORD *)(a1 + 48) = 0;
  unint64_t v351 = 0;
  uint64_t v352 = 0;
  unsigned int v353 = 0;
  uint64_t v20 = *(void *)(a2 + 80);
  if (v20) {
    uint64_t v21 = v20 - 24;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = v21 + 40;
  uint64_t v23 = *(void *)(v21 + 48);
  uint64_t v316 = v13;
  if (v23 == v21 + 40)
  {
    unsigned int v40 = 0;
    uint64_t v39 = 0;
LABEL_65:
    uint64_t v43 = &v39[16 * v40];
    uint64_t v41 = v43;
    goto LABEL_66;
  }
  uint64_t v24 = v19;
  uint64_t v324 = v21 + 40;
  do
  {
    uint64_t v25 = v23 - 24;
    if (!v23) {
      uint64_t v25 = 0;
    }
    int v26 = *(unsigned __int8 *)(v25 + 16);
    if (v26 != 59) {
      uint64_t v25 = 0;
    }
    uint64_t v330 = (char *)v25;
    if (v23 && v26 == 59)
    {
      *(void *)&long long v348 = v349;
      *((void *)&v348 + 1) = 0x400000000;
      uint64_t v27 = *(void *)(v25 + 8);
      if (!v27) {
        goto LABEL_53;
      }
      unsigned int i = 0;
      do
      {
        if (i >= HIDWORD(v348)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v348 + 8 * i) = *(void *)(v27 + 24);
        unsigned int i = ++DWORD2(v348);
        uint64_t v27 = *(void *)(v27 + 8);
      }
      while (v27);
      uint64_t v27 = 0;
      if (i)
      {
        while (1)
        {
          uint64_t v29 = (unsigned char *)v348;
          uint64_t v30 = *(void *)(v348 + 8 * i - 8);
          DWORD2(v348) = i - 1;
          unsigned int v31 = *(unsigned __int8 *)(v30 + 16) - 60;
          BOOL v32 = v31 > 0x11;
          int v33 = (1 << v31) & 0x20007;
          BOOL v34 = v32 || v33 == 0;
          if (v34 && !sub_1CC794880(v30)) {
            break;
          }
          uint64_t v35 = *(void *)(v24 + 32);
          if (v35)
          {
            unsigned int v36 = sub_1CBF7A45C(*(void *)(v24 + 32), *(void *)(v30 + 40));
            if (v36 == -1) {
              uint64_t v35 = 0;
            }
            else {
              uint64_t v35 = *(void *)(*(void *)(v35 + 8) + 24 * v36 + 16);
            }
          }
          int v37 = *(unsigned __int8 *)(v30 + 16);
          if (v37 == 62 || v37 == 77)
          {
            uint64_t v38 = *(void *)(v30 + 8);
            for (i = DWORD2(v348); v38; uint64_t v38 = *(void *)(v38 + 8))
            {
              if (i >= HIDWORD(v348)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v348 + 8 * i) = *(void *)(v38 + 24);
              unsigned int i = ++DWORD2(v348);
            }
          }
          else
          {
            unsigned int i = DWORD2(v348);
          }
          v27 += v35;
          if (!i) {
            goto LABEL_53;
          }
        }
      }
      else
      {
LABEL_53:
        sub_1CD45F378((uint64_t)&v351, (uint64_t *)&v330)[1] = v27;
        uint64_t v29 = (unsigned char *)v348;
      }
      if (v29 != v349) {
        free(v29);
      }
      uint64_t v22 = v324;
    }
    uint64_t v23 = *(void *)(v23 + 8);
  }
  while (v23 != v22);
  uint64_t v39 = v351;
  unsigned int v40 = v353;
  if (!v352) {
    goto LABEL_65;
  }
  uint64_t v41 = &v351[16 * v353];
  if (v353)
  {
    uint64_t v42 = 0;
    while ((*(void *)&v351[v42] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v42 += 16;
      if (16 * v353 == v42)
      {
        uint64_t v43 = &v351[16 * v353];
        goto LABEL_66;
      }
    }
    uint64_t v43 = &v351[v42];
  }
  else
  {
    uint64_t v43 = v351;
  }
LABEL_66:
  unsigned int v44 = &v39[16 * v40];
  if (v43 == v44)
  {
    char v46 = 0;
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v45 = 0;
    char v46 = 0;
    int64_t v47 = 0;
    do
    {
      long long v348 = *(_OWORD *)v43;
      if (v46 >= v47)
      {
        uint64_t v48 = ((char *)v46 - (char *)v45) >> 4;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60) {
          abort();
        }
        if (v47 - v45 > v49) {
          unint64_t v49 = v47 - v45;
        }
        if ((unint64_t)((char *)v47 - (char *)v45) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50)
        {
          if (v50 >> 60) {
            sub_1CB833614();
          }
          uint64_t v51 = (char *)operator new(16 * v50);
        }
        else
        {
          uint64_t v51 = 0;
        }
        uint64_t v52 = &v51[16 * v48];
        *(_OWORD *)uint64_t v52 = v348;
        if (v46 == v45)
        {
          uint64_t v54 = &v51[16 * v48];
        }
        else
        {
          uint64_t v53 = &v51[16 * v48];
          do
          {
            uint64_t v54 = v53 - 16;
            *((_OWORD *)v53 - 1) = *((_OWORD *)v46 - 1);
            v46 -= 2;
            v53 -= 16;
          }
          while (v46 != v45);
        }
        int64_t v47 = (uint64_t *)&v51[16 * v50];
        char v46 = (uint64_t *)(v52 + 16);
        if (v45) {
          operator delete(v45);
        }
        unint64_t v45 = (uint64_t *)v54;
      }
      else
      {
        *(_OWORD *)char v46 = *(_OWORD *)v43;
        v46 += 2;
      }
      uint64_t v55 = v43 + 16;
      uint64_t v43 = v41;
      if (v55 != v41)
      {
        uint64_t v43 = v55;
        while ((*(void *)v43 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v43 += 16;
          if (v43 == v41)
          {
            uint64_t v43 = v41;
            break;
          }
        }
      }
    }
    while (v43 != v44);
  }
  unint64_t v56 = 126 - 2 * __clz(((char *)v46 - (char *)v45) >> 4);
  if (v46 == v45) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v56;
  }
  sub_1CC79698C((unint64_t)v45, v46, v57, 1);
  if (v46 != v45)
  {
    uint64_t v58 = (llvm::Type ***)v45;
    do
    {
      uint64_t v59 = *v58;
      int v60 = sub_1CD63BC58((llvm::DataLayout *)(v319 + 272), *v58);
      if (v60)
      {
        unsigned int v61 = (*(_DWORD *)(v323 + 32) - 1 + (1 << *((_WORD *)v59 + 9))) & -(int)(1 << *((_WORD *)v59 + 9));
        if (v60 + v61 <= *(_DWORD *)(v323 + 28))
        {
          unint64_t v62 = *(unsigned int *)(v323 + 48);
          if (v62 >= *(unsigned int *)(v323 + 52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v63 = (llvm::Type ***)(*(void *)(v323 + 40) + 16 * v62);
          *uint64_t v63 = v59;
          v63[1] = (llvm::Type **)v61;
          ++*(_DWORD *)(v323 + 48);
          *(_DWORD *)(v323 + 32) = v60 + v61;
        }
      }
      v58 += 2;
    }
    while (v58 != (llvm::Type ***)v46);
  }
  if (v45) {
    operator delete(v45);
  }
  MEMORY[0x1D25D9CD0](v351, 8);
  if (!*(_DWORD *)(v323 + 48)) {
    return 0;
  }
  uint64_t v313 = *(unsigned int *)(v323 + 32);
  uint64_t v66 = *(void *)(v321 + 40);
  uint64_t v67 = *(void *)(v321 + 80);
  if (v67) {
    uint64_t v68 = v67 - 24;
  }
  else {
    uint64_t v68 = 0;
  }
  int v69 = (uint64_t **)(**(void **)v66 + 1960);
  uint64_t v70 = v68 + 40;
  for (uint64_t j = *(void *)(v68 + 48); j != v70; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v72 = j - 24;
    if (!j) {
      uint64_t v72 = 0;
    }
    if (*(unsigned char *)(v72 + 16) != 83)
    {
      unsigned int v73 = *(unsigned __int8 *)(j - 8) - 38;
      BOOL v32 = v73 > 0x38;
      uint64_t v74 = (1 << v73) & 0x100060000000001;
      if (v32 || v74 == 0) {
        uint64_t v70 = j;
      }
      else {
        uint64_t v70 = *(void *)(j + 8);
      }
      break;
    }
  }
  sub_1CBF537B4((uint64_t)&v351, (uint64_t **)v68, v70, 0, 0, 0);
  sub_1CD577C30(v66, "llvm.agx2.linear.id", (const char *)0x13, 0, v69);
  unint64_t v77 = (uint64_t **)v76;
  if (v76) {
    uint64_t v76 = *(void *)(v76 + 24);
  }
  *(void *)&long long v348 = "linear_id";
  __int16 v350 = 259;
  uint64_t v322 = sub_1CB845BAC((uint64_t *)&v351, (uint64_t **)v76, v77, 0, 0, (uint64_t)&v348, 0);
  *(void *)&long long v348 = v349;
  *((void *)&v348 + 1) = 0x2000000000;
  unint64_t v78 = v334;
  uint64_t v330 = v334;
  char v331 = v334;
  uint64_t v332 = 8;
  int v333 = 0;
  uint64_t v79 = v323;
  uint64_t v80 = *(unsigned int *)(v323 + 48);
  if (v80)
  {
    uint64_t v81 = *(void *)(v323 + 40);
    int v314 = (llvm::DataLayout *)(v66 + 272);
    uint64_t v315 = v81 + 16 * v80;
    uint64_t v320 = v66;
    while (1)
    {
      unint64_t v82 = *(llvm::Type ***)v81;
      int v83 = *(_DWORD *)(v81 + 8);
      uint64_t v325 = v81;
      if (DWORD2(v348) >= (unint64_t)HIDWORD(v348)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v348 + 8 * DWORD2(v348)) = v82;
      ++DWORD2(v348);
      uint64_t v354 = v82[5];
      uint64_t v355 = (void ***)(v82 + 3);
      uint64_t v84 = v82[6];
      unint64_t v339 = v84;
      if (v84)
      {
        llvm::MetadataTracking::track((uint64_t)&v339, (unsigned __int8 *)v84, 2);
        uint64_t v85 = v339;
      }
      else
      {
        uint64_t v85 = 0;
      }
      sub_1CB8461A4((uint64_t)&v351, 0, (uint64_t)v85);
      if (v339)
      {
        int v302 = *(unsigned __int8 *)v339;
        if ((v302 - 4) > 0x1E)
        {
          if ((v302 - 3) >= 0xFFFFFFFE) {
            uint64_t v305 = v339;
          }
          else {
            uint64_t v305 = 0;
          }
          if ((v302 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v304 = (unint64_t)v305 + 8;
LABEL_418:
            int v342 = &v339;
            sub_1CC5FA668(v304 + 16, &v342);
            goto LABEL_138;
          }
          if (v302 == 3) {
            *((void *)v339 + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v339 + 1) & 0x7F) == 2 || *((_DWORD *)v339 + 3))
        {
          uint64_t v303 = *((void *)v339 + 2);
          if ((v303 & 4) != 0)
          {
            unint64_t v304 = v303 & 0xFFFFFFFFFFFFFFF8;
            if (v304) {
              goto LABEL_418;
            }
          }
        }
      }
LABEL_138:
      unsigned int v86 = sub_1CD63BC58(v314, v82);
      unint64_t v87 = llvm::ArrayType::get((llvm::ArrayType *)(**(void **)v66 + 1912), (llvm::Type *)v86);
      unint64_t v88 = (char *)operator new(0x78uLL);
      *((_DWORD *)v88 + 13) = *((_DWORD *)v88 + 13) & 0x38000000 | 1;
      int v89 = (unint64_t *)(v88 + 32);
      *(void *)unint64_t v88 = 0;
      *((void *)v88 + 1) = 0;
      *((void *)v88 + 2) = 0;
      *((void *)v88 + 3) = v88 + 32;
      uint64_t v91 = llvm::UndefValue::get(v87, v90);
      unsigned int v92 = v82 >> 4;
      if ((*((unsigned char *)v82 + 23) & 0x10) != 0)
      {
        uint64_t v93 = **(void **)*v82;
        uint64_t v94 = *(void *)(v93 + 152);
        uint64_t v95 = *(unsigned int *)(v93 + 168);
        if (!v95) {
          goto LABEL_145;
        }
        LODWORD(v96) = (v95 - 1) & (v92 ^ (v82 >> 9));
        int v97 = (llvm::Type ***)(v94 + 16 * v96);
        char v98 = *v97;
        if (*v97 != v82)
        {
          int v99 = 1;
          while (v98 != (llvm::Type **)-4096)
          {
            int v100 = v96 + v99++;
            uint64_t v96 = v100 & (v95 - 1);
            char v98 = *(llvm::Type ***)(v94 + 16 * v96);
            if (v98 == v82)
            {
              int v97 = (llvm::Type ***)(v94 + 16 * v96);
              goto LABEL_146;
            }
          }
LABEL_145:
          int v97 = (llvm::Type ***)(v94 + 16 * v95);
        }
LABEL_146:
        char v101 = v97[1];
        uint64_t v104 = (uint64_t)*v101;
        int v103 = (char *)(v101 + 2);
        uint64_t v102 = v104;
        goto LABEL_147;
      }
      uint64_t v102 = 0;
      int v103 = &byte_1CFBCE98E;
LABEL_147:
      int v342 = v103;
      uint64_t v343 = v102;
      v344[0] = "_lm_alloca";
      __int16 v345 = 773;
      llvm::GlobalVariable::GlobalVariable(v89, v66, v87, 0, 7, (unint64_t)v91, (const char **)&v342, 0, 0, (llvm::Type *)0x100000003, 0);
      uint64_t v106 = (unint64_t *)llvm::UniqueStringSaver::save(***((void ***)v88 + 4) + 2136, "cl_local_per_thread", 0x13uLL);
      uint64_t v108 = v107;
      uint64_t v109 = ***((void ***)v88 + 4);
      int v342 = v88 + 32;
      int v110 = *(_DWORD *)(v109 + 2520);
      if (v110)
      {
        uint64_t v111 = *(void *)(v109 + 2504);
        int v112 = v110 - 1;
        unsigned int v113 = v112 & ((v89 >> 4) ^ (v89 >> 9));
        int v114 = (unint64_t **)(v111 + 24 * v113);
        uint64_t v115 = *v114;
        if (*v114 == v89) {
          goto LABEL_149;
        }
        uint64_t v141 = 0;
        int v142 = 1;
        while (v115 != (unint64_t *)-4096)
        {
          if (v141) {
            BOOL v143 = 0;
          }
          else {
            BOOL v143 = v115 == (unint64_t *)-8192;
          }
          if (v143) {
            uint64_t v141 = v114;
          }
          unsigned int v144 = v113 + v142++;
          unsigned int v113 = v144 & v112;
          int v114 = (unint64_t **)(v111 + 24 * v113);
          uint64_t v115 = *v114;
          if (*v114 == v89) {
            goto LABEL_149;
          }
        }
        if (v141) {
          uint64_t v151 = v141;
        }
        else {
          uint64_t v151 = v114;
        }
      }
      else
      {
        uint64_t v151 = 0;
      }
      int v114 = (unint64_t **)sub_1CC5BF31C(v109 + 2504, (uint64_t)&v342, (uint64_t *)&v342, v151);
      uint64_t v152 = (unint64_t *)v342;
      v114[1] = 0;
      v114[2] = 0;
      void *v114 = v152;
LABEL_149:
      v114[1] = v106;
      v114[2] = v108;
      *((_DWORD *)v88 + 16) = *((_DWORD *)v88 + 16) & 0xFFBFFFFF | ((v108 != 0) << 22);
      if (v318)
      {
        uint64_t v116 = (*(_DWORD *)(v79 + 36) + v83 * v317);
        char v117 = *(llvm::ConstantInt **)(*(void *)v356 + 1960);
        unsigned int v118 = *(_DWORD *)(*(void *)v356 + 1968);
        LODWORD(v343) = v118 >> 8;
        if (v118 >> 8 > 0x40) {
          operator new[]();
        }
        if (v118 <= 0xFF) {
          unint64_t v119 = 0;
        }
        else {
          unint64_t v119 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v118) + 63);
        }
        int v342 = (void *)(v119 & v116);
        uint64_t v120 = llvm::ConstantInt::get(v117, (llvm::LLVMContext *)&v342, v105);
        if (v343 >= 0x41 && v342) {
          MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
        }
        if ((*((unsigned char *)v82 + 23) & 0x10) != 0)
        {
          uint64_t v121 = **(void **)*v82;
          uint64_t v122 = *(void *)(v121 + 152);
          uint64_t v123 = *(unsigned int *)(v121 + 168);
          if (!v123) {
            goto LABEL_183;
          }
          LODWORD(v124) = (v123 - 1) & (v92 ^ (v82 >> 9));
          BOOL v125 = (llvm::Type ***)(v122 + 16 * v124);
          char v126 = *v125;
          if (*v125 != v82)
          {
            int v127 = 1;
            while (v126 != (llvm::Type **)-4096)
            {
              int v128 = v124 + v127++;
              uint64_t v124 = v128 & (v123 - 1);
              char v126 = *(llvm::Type ***)(v122 + 16 * v124);
              if (v126 == v82)
              {
                BOOL v125 = (llvm::Type ***)(v122 + 16 * v124);
                goto LABEL_184;
              }
            }
LABEL_183:
            BOOL v125 = (llvm::Type ***)(v122 + 16 * v123);
          }
LABEL_184:
          unsigned int v145 = v125[1];
          uint64_t v148 = (uint64_t)*v145;
          uint64_t v147 = (char *)(v145 + 2);
          uint64_t v146 = v148;
        }
        else
        {
          uint64_t v146 = 0;
          uint64_t v147 = &byte_1CFBCE98E;
        }
        int v342 = v147;
        uint64_t v343 = v146;
        v344[0] = "_lm_add";
        __int16 v345 = 773;
        uint64_t v149 = (void *)v322;
        uint64_t v150 = (uint64_t)v120;
        goto LABEL_207;
      }
      uint64_t v129 = *(llvm::ConstantInt **)(*(void *)v356 + 1960);
      unsigned int v130 = *(_DWORD *)(*(void *)v356 + 1968);
      LODWORD(v343) = v130 >> 8;
      if (v130 >> 8 > 0x40) {
        operator new[]();
      }
      if (v130 <= 0xFF) {
        unint64_t v131 = 0;
      }
      else {
        unint64_t v131 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v130) + 63);
      }
      int v342 = (void *)(v131 & v313);
      unsigned int v132 = llvm::ConstantInt::get(v129, (llvm::LLVMContext *)&v342, v105);
      if (v343 >= 0x41 && v342) {
        MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
      }
      if ((*((unsigned char *)v82 + 23) & 0x10) != 0)
      {
        uint64_t v133 = **(void **)*v82;
        uint64_t v134 = *(void *)(v133 + 152);
        uint64_t v135 = *(unsigned int *)(v133 + 168);
        if (!v135) {
          goto LABEL_190;
        }
        LODWORD(v136) = (v135 - 1) & (v92 ^ (v82 >> 9));
        unint64_t v137 = (llvm::Type ***)(v134 + 16 * v136);
        uint64_t v138 = *v137;
        if (*v137 != v82)
        {
          int v139 = 1;
          while (v138 != (llvm::Type **)-4096)
          {
            int v140 = v136 + v139++;
            uint64_t v136 = v140 & (v135 - 1);
            uint64_t v138 = *(llvm::Type ***)(v134 + 16 * v136);
            if (v138 == v82)
            {
              unint64_t v137 = (llvm::Type ***)(v134 + 16 * v136);
              goto LABEL_191;
            }
          }
LABEL_190:
          unint64_t v137 = (llvm::Type ***)(v134 + 16 * v135);
        }
LABEL_191:
        BOOL v153 = v137[1];
        uint64_t v156 = (uint64_t)*v153;
        __int16 v155 = (char *)(v153 + 2);
        uint64_t v154 = v156;
        goto LABEL_192;
      }
      uint64_t v154 = 0;
      __int16 v155 = &byte_1CFBCE98E;
LABEL_192:
      int v342 = v155;
      uint64_t v343 = v154;
      v344[0] = "_lm_mul";
      __int16 v345 = 773;
      uint64_t v158 = sub_1CC09A1EC((uint64_t)&v351, v322, (uint64_t)v132, (uint64_t)&v342, 1, 1);
      uint64_t v159 = (*(_DWORD *)(v323 + 36) + v83);
      uint64_t v160 = *(llvm::ConstantInt **)(*(void *)v356 + 1960);
      unsigned int v161 = *(_DWORD *)(*(void *)v356 + 1968);
      LODWORD(v343) = v161 >> 8;
      if (v161 >> 8 > 0x40) {
        operator new[]();
      }
      if (v161 <= 0xFF) {
        unint64_t v162 = 0;
      }
      else {
        unint64_t v162 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v161) + 63);
      }
      int v342 = (void *)(v162 & v159);
      __int16 v163 = llvm::ConstantInt::get(v160, (llvm::LLVMContext *)&v342, v157);
      if (v343 >= 0x41 && v342) {
        MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
      }
      if ((*((unsigned char *)v82 + 23) & 0x10) == 0)
      {
        uint64_t v173 = 0;
        int v174 = &byte_1CFBCE98E;
        goto LABEL_206;
      }
      uint64_t v164 = **(void **)*v82;
      uint64_t v165 = *(void *)(v164 + 152);
      uint64_t v166 = *(unsigned int *)(v164 + 168);
      if (!v166) {
        goto LABEL_204;
      }
      LODWORD(v167) = (v166 - 1) & (v92 ^ (v82 >> 9));
      size_t v168 = (llvm::Type ***)(v165 + 16 * v167);
      uint64_t v169 = *v168;
      if (*v168 != v82)
      {
        int v170 = 1;
        while (v169 != (llvm::Type **)-4096)
        {
          int v171 = v167 + v170++;
          uint64_t v167 = v171 & (v166 - 1);
          uint64_t v169 = *(llvm::Type ***)(v165 + 16 * v167);
          if (v169 == v82)
          {
            size_t v168 = (llvm::Type ***)(v165 + 16 * v167);
            goto LABEL_205;
          }
        }
LABEL_204:
        size_t v168 = (llvm::Type ***)(v165 + 16 * v166);
      }
LABEL_205:
      uint64_t v172 = v168[1];
      uint64_t v175 = (uint64_t)*v172;
      int v174 = (char *)(v172 + 2);
      uint64_t v173 = v175;
LABEL_206:
      int v342 = v174;
      uint64_t v343 = v173;
      v344[0] = "_lm_add";
      __int16 v345 = 773;
      uint64_t v149 = v158;
      uint64_t v150 = (uint64_t)v163;
LABEL_207:
      uint64_t v177 = sub_1CB844A3C((uint64_t)&v351, v149, v150, (uint64_t)&v342, 1, 1);
      BOOL v346 = 0;
      unsigned int v347 = 0;
      uint64_t v178 = *(llvm::ConstantInt **)(*(void *)v356 + 1960);
      unsigned int v179 = *(_DWORD *)(*(void *)v356 + 1968);
      LODWORD(v343) = v179 >> 8;
      if (v179 >> 8 >= 0x41) {
        operator new[]();
      }
      int v342 = 0;
      uint64_t v180 = llvm::ConstantInt::get(v178, (llvm::LLVMContext *)&v342, v176);
      if (v343 >= 0x41 && v342) {
        MEMORY[0x1D25D9CB0](v342, 0x1000C8000313F17);
      }
      BOOL v346 = v180;
      unsigned int v347 = v177;
      uint64_t v181 = *((void *)v88 + 7);
      if ((*((unsigned char *)v82 + 23) & 0x10) != 0)
      {
        uint64_t v182 = **(void **)*v82;
        uint64_t v183 = *(void *)(v182 + 152);
        uint64_t v184 = *(unsigned int *)(v182 + 168);
        uint64_t v66 = v320;
        if (!v184) {
          goto LABEL_216;
        }
        LODWORD(v185) = (v184 - 1) & (v92 ^ (v82 >> 9));
        uint64_t v186 = (llvm::Type ***)(v183 + 16 * v185);
        uint64_t v187 = *v186;
        if (*v186 != v82)
        {
          int v188 = 1;
          while (v187 != (llvm::Type **)-4096)
          {
            int v189 = v185 + v188++;
            uint64_t v185 = v189 & (v184 - 1);
            uint64_t v187 = *(llvm::Type ***)(v183 + 16 * v185);
            if (v187 == v82)
            {
              uint64_t v186 = (llvm::Type ***)(v183 + 16 * v185);
              goto LABEL_217;
            }
          }
LABEL_216:
          uint64_t v186 = (llvm::Type ***)(v183 + 16 * v184);
        }
LABEL_217:
        unsigned int v190 = v186[1];
        uint64_t v193 = (uint64_t)*v190;
        unsigned int v192 = (char *)(v190 + 2);
        uint64_t v191 = v193;
        goto LABEL_218;
      }
      uint64_t v191 = 0;
      unsigned int v192 = &byte_1CFBCE98E;
      uint64_t v66 = v320;
LABEL_218:
      int v342 = v192;
      uint64_t v343 = v191;
      v344[0] = "_lm_base";
      __int16 v345 = 773;
      int v194 = (llvm::CastInst *)sub_1CC27CEC0((uint64_t *)&v351, v181, (uint64_t *)v89, (uint64_t *)&v346, 2, (uint64_t)&v342);
      uint64_t v195 = (llvm::Value *)llvm::PointerType::get(v82[8], (llvm::Type *)3);
      if ((*((unsigned char *)v194 + 23) & 0x10) != 0)
      {
        uint64_t v197 = ***(void ***)v194;
        uint64_t v198 = *(void *)(v197 + 152);
        uint64_t v199 = *(unsigned int *)(v197 + 168);
        if (!v199) {
          goto LABEL_225;
        }
        LODWORD(v200) = (v199 - 1) & ((v194 >> 4) ^ (v194 >> 9));
        unsigned int v201 = (llvm::CastInst **)(v198 + 16 * v200);
        uint64_t v202 = *v201;
        if (*v201 != v194)
        {
          int v203 = 1;
          while (v202 != (llvm::CastInst *)-4096)
          {
            int v204 = v200 + v203++;
            uint64_t v200 = v204 & (v199 - 1);
            uint64_t v202 = *(llvm::CastInst **)(v198 + 16 * v200);
            if (v202 == v194)
            {
              unsigned int v201 = (llvm::CastInst **)(v198 + 16 * v200);
              goto LABEL_226;
            }
          }
LABEL_225:
          unsigned int v201 = (llvm::CastInst **)(v198 + 16 * v199);
        }
LABEL_226:
        unsigned __int16 v205 = v201[1];
        uint64_t v208 = *(void *)v205;
        BOOL v207 = (char *)v205 + 16;
        uint64_t v206 = v208;
        goto LABEL_227;
      }
      uint64_t v206 = 0;
      BOOL v207 = &byte_1CFBCE98E;
LABEL_227:
      int v342 = v207;
      uint64_t v343 = v206;
      v344[0] = "_bc";
      __int16 v345 = 773;
      int v209 = sub_1CC277FE0((uint64_t)&v351, v194, v195, (uint64_t)&v342, v196);
      v328[0] = 0;
      v328[1] = 0;
      int v329 = 0;
      int v342 = v82;
      sub_1CC080DE0(v328, &v342)[1] = v209;
      int v342 = v344;
      uint64_t v343 = 0x400000000;
      uint64_t v210 = v82[1];
      if (v210)
      {
        unsigned int v211 = 0;
        do
        {
          if (v211 >= HIDWORD(v343)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v342 + v211) = *((void *)v210 + 3);
          unsigned int v211 = v343 + 1;
          LODWORD(v343) = v343 + 1;
          uint64_t v210 = (llvm::Type *)*((void *)v210 + 1);
        }
        while (v210);
        while (v211)
        {
          uint64_t v212 = (uint64_t ***)*((void *)v342 + v211 - 1);
          LODWORD(v343) = v211 - 1;
          if (sub_1CC794880((uint64_t)v212))
          {
            __int16 v213 = v331;
            uint64_t v214 = HIDWORD(v332);
            if (v331 == v330)
            {
              if (HIDWORD(v332))
              {
                int v215 = 0;
                uint64_t v216 = 8 * HIDWORD(v332);
                unint64_t v217 = v331;
                while (*(uint64_t ****)v217 != v212)
                {
                  if (*(void *)v217 == -2) {
                    int v215 = v217;
                  }
                  v217 += 8;
                  v216 -= 8;
                  if (!v216)
                  {
                    if (!v215) {
                      goto LABEL_242;
                    }
                    *int v215 = v212;
                    --v333;
                    goto LABEL_374;
                  }
                }
                goto LABEL_374;
              }
LABEL_242:
              unsigned int v218 = v332;
              if (HIDWORD(v332) < v332)
              {
                ++HIDWORD(v332);
                *(void *)&v331[8 * v214] = v212;
LABEL_374:
                unsigned int v211 = v343;
                continue;
              }
            }
            else
            {
              unsigned int v218 = v332;
            }
            if (3 * v218 <= 4 * (HIDWORD(v332) - v333))
            {
              if (v218 >= 0x40) {
                v218 *= 2;
              }
              else {
                unsigned int v218 = 128;
              }
            }
            else if (v218 - HIDWORD(v332) >= v218 >> 3)
            {
              goto LABEL_275;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v330, v218);
            unsigned int v218 = v332;
            __int16 v213 = v331;
LABEL_275:
            unsigned int v240 = v218 - 1;
            unsigned int v241 = (v218 - 1) & ((v212 >> 4) ^ (v212 >> 9));
            char v242 = &v213[8 * v241];
            int v243 = *(uint64_t ****)v242;
            if (*(void *)v242 == -1)
            {
              uint64_t v244 = 0;
LABEL_295:
              if (v244) {
                uint64_t v259 = v244;
              }
              else {
                uint64_t v259 = v242;
              }
              if (*(uint64_t ****)v259 != v212)
              {
                if (*(void *)v259 == -2) {
                  --v333;
                }
                else {
                  ++HIDWORD(v332);
                }
                *(void *)uint64_t v259 = v212;
              }
            }
            else
            {
              uint64_t v244 = 0;
              int v245 = 1;
              while (v243 != v212)
              {
                if (v244) {
                  BOOL v246 = 0;
                }
                else {
                  BOOL v246 = v243 == (uint64_t ***)-2;
                }
                if (v246) {
                  uint64_t v244 = v242;
                }
                unsigned int v247 = v241 + v245++;
                unsigned int v241 = v247 & v240;
                char v242 = &v213[8 * (v247 & v240)];
                int v243 = *(uint64_t ****)v242;
                if (*(void *)v242 == -1) {
                  goto LABEL_295;
                }
              }
            }
            goto LABEL_374;
          }
          uint64_t v354 = (llvm::Type *)v212[5];
          uint64_t v355 = v212 + 3;
          unsigned __int16 v219 = (char *)v212[6];
          int v335 = v219;
          if (v219)
          {
            llvm::MetadataTracking::track((uint64_t)&v335, (unsigned __int8 *)v219, 2);
            uint64_t v220 = v335;
          }
          else
          {
            uint64_t v220 = 0;
          }
          sub_1CB8461A4((uint64_t)&v351, 0, (uint64_t)v220);
          if (v335)
          {
            int v281 = *(unsigned __int8 *)v335;
            if ((v281 - 4) > 0x1E)
            {
              if ((v281 - 3) >= 0xFFFFFFFE) {
                uint64_t v299 = v335;
              }
              else {
                uint64_t v299 = 0;
              }
              if ((v281 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v283 = (unint64_t)(v299 + 8);
LABEL_380:
                unint64_t v339 = &v335;
                sub_1CC5FA668(v283 + 16, &v339);
                goto LABEL_247;
              }
              if (v281 == 3) {
                *((void *)v335 + 1) = 0;
              }
            }
            else if ((v335[1] & 0x7F) == 2 || *((_DWORD *)v335 + 3))
            {
              uint64_t v282 = *((void *)v335 + 2);
              if ((v282 & 4) != 0)
              {
                unint64_t v283 = v282 & 0xFFFFFFFFFFFFFFF8;
                if (v283) {
                  goto LABEL_380;
                }
              }
            }
          }
LABEL_247:
          unsigned int v221 = *((unsigned __int8 *)v212 + 16);
          if (v221 <= 0x3D)
          {
            if (v221 == 60 || v221 == 61)
            {
              int v222 = v212 - 4;
              unint64_t v339 = *(v212 - 4);
              unsigned int v223 = (uint64_t **)sub_1CC080DE0(v328, &v339)[1];
              if (*(v212 - 4))
              {
                **(v212 - 2) = (uint64_t *)*(v212 - 3);
                uint64_t v224 = (uint64_t)*(v212 - 3);
                if (v224) {
                  *(void *)(v224 + 16) = *(v212 - 2);
                }
              }
              *int v222 = v223;
              if (v223)
              {
                uint64_t v227 = v223[1];
                uint64_t v225 = v223 + 1;
                unsigned int v226 = v227;
                *(v212 - 3) = (uint64_t **)v227;
                if (v227) {
                  v226[2] = (uint64_t)(v212 - 3);
                }
                *(v212 - 2) = v225;
                *uint64_t v225 = (uint64_t *)v222;
              }
            }
            goto LABEL_374;
          }
          if (v221 != 62)
          {
            if (v221 != 77) {
              goto LABEL_374;
            }
            uint64_t v228 = *v212;
            if (*v212) {
              BOOL v229 = *((unsigned char *)*v212 + 8) == 15;
            }
            else {
              BOOL v229 = 0;
            }
            if (v229 && !v228[3])
            {
              unint64_t v339 = v212;
              uint64_t v284 = sub_1CC080DE0(v328, &v339)[1];
              int v335 = (const char *)v212;
              sub_1CC080DE0(v328, &v335)[1] = v284;
            }
            else
            {
              unint64_t v230 = llvm::PointerType::get((llvm::PointerType *)*v228[2], (llvm::Type *)3);
              v326[0] = *(v212 - 4);
              uint64_t v231 = sub_1CC080DE0(v328, v326);
              if ((*((unsigned char *)v212 + 23) & 0x10) != 0)
              {
                uint64_t v232 = ***v212;
                uint64_t v233 = *(void *)(v232 + 152);
                uint64_t v234 = *(unsigned int *)(v232 + 168);
                if (!v234) {
                  goto LABEL_352;
                }
                LODWORD(v235) = (v234 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                uint64_t v236 = (uint64_t ****)(v233 + 16 * v235);
                uint64_t v237 = *v236;
                if (*v236 != v212)
                {
                  int v238 = 1;
                  while (v237 != (uint64_t ***)-4096)
                  {
                    int v239 = v235 + v238++;
                    uint64_t v235 = v239 & (v234 - 1);
                    uint64_t v237 = *(uint64_t ****)(v233 + 16 * v235);
                    if (v237 == v212)
                    {
                      uint64_t v236 = (uint64_t ****)(v233 + 16 * v235);
                      goto LABEL_353;
                    }
                  }
LABEL_352:
                  uint64_t v236 = (uint64_t ****)(v233 + 16 * v234);
                }
LABEL_353:
                uint64_t v290 = v236[1];
                uint64_t v293 = *v290;
                int v292 = (const char *)(v290 + 2);
                int v291 = v293;
              }
              else
              {
                int v291 = 0;
                int v292 = &byte_1CFBCE98E;
              }
              int v294 = (unsigned __int8 *)v231[1];
              int v335 = v292;
              unsigned int v336 = v291;
              int v337 = "_lm";
              __int16 v338 = 773;
              if (*(void *)v294 != v230)
              {
                if (v294[16] <= 0x14u)
                {
                  int v294 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v357 + 224))(v357, 49, v294, v230);
                  if (v294) {
                    BOOL v297 = v294[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v297 = 0;
                  }
                  if (v297)
                  {
                    (*(void (**)(uint64_t, unsigned __int8 *, const char **, llvm::Type *, void ***))(*(void *)v358 + 16))(v358, v294, &v335, v354, v355);
                    if (v352)
                    {
                      uint64_t v300 = (llvm::MDNode **)v351;
                      uint64_t v301 = &v351[16 * v352];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v294, *(_DWORD *)v300, v300[1]);
                        v300 += 2;
                      }
                      while (v300 != (llvm::MDNode **)v301);
                    }
                    uint64_t v66 = v320;
                  }
                }
                else
                {
                  v341[8] = 257;
                  int v294 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v294, v230, (const char **)&v339, 0);
                  (*(void (**)(uint64_t, unsigned __int8 *, const char **, llvm::Type *, void ***))(*(void *)v358 + 16))(v358, v294, &v335, v354, v355);
                  if (v352)
                  {
                    uint64_t v295 = (llvm::MDNode **)v351;
                    unsigned int v296 = &v351[16 * v352];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v294, *(_DWORD *)v295, v295[1]);
                      v295 += 2;
                    }
                    while (v295 != (llvm::MDNode **)v296);
                  }
                }
              }
              unint64_t v339 = v212;
              sub_1CC080DE0(v328, &v339)[1] = v294;
            }
            if (DWORD2(v348) >= (unint64_t)HIDWORD(v348)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v348 + 8 * DWORD2(v348)) = v212;
            ++DWORD2(v348);
            goto LABEL_367;
          }
          unint64_t v339 = v341;
          uint64_t v340 = 0x400000000;
          unsigned int v248 = *((_DWORD *)v212 + 5) & 0x7FFFFFF;
          if (v248 != 1)
          {
            unint64_t v260 = 0;
            while (1)
            {
              ++v260;
              char v261 = (uint64_t ***)(&v212[4 * v260])[-4 * v248];
              if (v261) {
                BOOL v262 = *((unsigned char *)v261 + 16) == 16;
              }
              else {
                BOOL v262 = 0;
              }
              if (v262)
              {
                char v271 = (unint64_t *)(v261 + 3);
                if (*((_DWORD *)v261 + 8) >= 0x41u) {
                  char v271 = (unint64_t *)*v271;
                }
                char v261 = (uint64_t ***)llvm::ConstantInt::get((llvm::ConstantInt *)v69, *v271, 0);
                goto LABEL_329;
              }
              if ((*((unsigned char *)v261 + 23) & 0x10) != 0) {
                break;
              }
              unint64_t v273 = 0;
              char v274 = &byte_1CFBCE98E;
LABEL_319:
              v326[0] = v274;
              v326[1] = v273;
              v326[2] = "_trunc";
              __int16 v327 = 773;
              if (*v261 != v69)
              {
                if (*((unsigned __int8 *)v261 + 16) <= 0x14u)
                {
                  char v261 = (uint64_t ***)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t ***, uint64_t **))(*(void *)v357 + 224))(v357, 38, v261, v69);
                  if (v261) {
                    BOOL v278 = *((unsigned __int8 *)v261 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v278 = 0;
                  }
                  if (v278)
                  {
                    (*(void (**)(uint64_t, uint64_t ***, void *, llvm::Type *, void ***))(*(void *)v358 + 16))(v358, v261, v326, v354, v355);
                    if (v352)
                    {
                      uint64_t v279 = (llvm::MDNode **)v351;
                      char v280 = &v351[16 * v352];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v261, *(_DWORD *)v279, v279[1]);
                        v279 += 2;
                      }
                      while (v279 != (llvm::MDNode **)v280);
                    }
                    uint64_t v66 = v320;
                  }
                }
                else
                {
                  __int16 v338 = 257;
                  char v261 = (uint64_t ***)llvm::CastInst::Create(38, (uint64_t)v261, (uint64_t)v69, &v335, 0);
                  (*(void (**)(uint64_t, uint64_t ***, void *, llvm::Type *, void ***))(*(void *)v358 + 16))(v358, v261, v326, v354, v355);
                  if (v352)
                  {
                    uint64_t v276 = (llvm::MDNode **)v351;
                    uint64_t v277 = &v351[16 * v352];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v261, *(_DWORD *)v276, v276[1]);
                      v276 += 2;
                    }
                    while (v276 != (llvm::MDNode **)v277);
                  }
                }
              }
LABEL_329:
              if (v340 >= (unint64_t)HIDWORD(v340)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v339 + v340) = v261;
              LODWORD(v340) = v340 + 1;
              unsigned int v248 = *((_DWORD *)v212 + 5) & 0x7FFFFFF;
              if (v260 >= v248 - 1) {
                goto LABEL_287;
              }
            }
            uint64_t v263 = ***v261;
            uint64_t v264 = *(void *)(v263 + 152);
            uint64_t v265 = *(unsigned int *)(v263 + 168);
            if (v265)
            {
              LODWORD(v266) = (v265 - 1) & ((v261 >> 4) ^ (v261 >> 9));
              unsigned int v267 = (uint64_t ****)(v264 + 16 * v266);
              unint64_t v268 = *v267;
              if (*v267 != v261)
              {
                int v269 = 1;
                while (v268 != (uint64_t ***)-4096)
                {
                  int v270 = v266 + v269++;
                  uint64_t v266 = v270 & (v265 - 1);
                  unint64_t v268 = *(uint64_t ****)(v264 + 16 * v266);
                  if (v268 == v261)
                  {
                    unsigned int v267 = (uint64_t ****)(v264 + 16 * v266);
                    goto LABEL_318;
                  }
                }
                goto LABEL_317;
              }
            }
            else
            {
LABEL_317:
              unsigned int v267 = (uint64_t ****)(v264 + 16 * v265);
            }
LABEL_318:
            uint64_t v272 = v267[1];
            uint64_t v275 = *v272;
            char v274 = (char *)(v272 + 2);
            unint64_t v273 = v275;
            goto LABEL_319;
          }
LABEL_287:
          uint64_t v249 = (uint64_t)v212[8];
          v326[0] = v212[-4 * v248];
          unsigned int v250 = (uint64_t *)sub_1CC080DE0(v328, v326)[1];
          if ((*((unsigned char *)v212 + 23) & 0x10) == 0)
          {
            unsigned int v286 = 0;
            uint64_t v287 = &byte_1CFBCE98E;
            goto LABEL_349;
          }
          uint64_t v251 = ***v212;
          uint64_t v252 = *(void *)(v251 + 152);
          uint64_t v253 = *(unsigned int *)(v251 + 168);
          if (!v253) {
            goto LABEL_347;
          }
          LODWORD(v254) = (v253 - 1) & ((v212 >> 4) ^ (v212 >> 9));
          uint64_t v255 = (uint64_t ****)(v252 + 16 * v254);
          uint64_t v256 = *v255;
          if (*v255 != v212)
          {
            int v257 = 1;
            while (v256 != (uint64_t ***)-4096)
            {
              int v258 = v254 + v257++;
              uint64_t v254 = v258 & (v253 - 1);
              uint64_t v256 = *(uint64_t ****)(v252 + 16 * v254);
              if (v256 == v212)
              {
                uint64_t v255 = (uint64_t ****)(v252 + 16 * v254);
                goto LABEL_348;
              }
            }
LABEL_347:
            uint64_t v255 = (uint64_t ****)(v252 + 16 * v253);
          }
LABEL_348:
          uint64_t v285 = v255[1];
          uint64_t v288 = *v285;
          uint64_t v287 = (const char *)(v285 + 2);
          unsigned int v286 = v288;
LABEL_349:
          int v335 = v287;
          unsigned int v336 = v286;
          int v337 = "_lm";
          __int16 v338 = 773;
          uint64_t v289 = sub_1CC27CEC0((uint64_t *)&v351, v249, v250, (uint64_t *)v339, v340, (uint64_t)&v335);
          int v335 = (const char *)v212;
          sub_1CC080DE0(v328, &v335)[1] = v289;
          if (DWORD2(v348) >= (unint64_t)HIDWORD(v348)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v348 + 8 * DWORD2(v348)) = v212;
          ++DWORD2(v348);
          if (v339 != v341) {
            free(v339);
          }
LABEL_367:
          int v298 = v212[1];
          if (!v298) {
            goto LABEL_374;
          }
          unsigned int v211 = v343;
          do
          {
            if (v211 >= HIDWORD(v343)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v342 + v211) = v298[3];
            unsigned int v211 = v343 + 1;
            LODWORD(v343) = v343 + 1;
            int v298 = (uint64_t **)v298[1];
          }
          while (v298);
        }
      }
      if (v342 != v344) {
        free(v342);
      }
      MEMORY[0x1D25D9CD0](v328[0], 8);
      uint64_t v79 = v323;
      uint64_t v81 = v325 + 16;
      if (v325 + 16 == v315)
      {
        unint64_t v78 = v330;
        int v306 = v331;
        unsigned int v308 = v332;
        unsigned int v307 = HIDWORD(v332);
        goto LABEL_438;
      }
    }
  }
  unsigned int v307 = 0;
  unsigned int v308 = 8;
  int v306 = v334;
LABEL_438:
  if (v306 == v78) {
    uint64_t v309 = v307;
  }
  else {
    uint64_t v309 = v308;
  }
  int v310 = v306;
  if (v309)
  {
    uint64_t v311 = 8 * v309;
    int v310 = v306;
    while (*(void *)v310 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v310 += 8;
      v311 -= 8;
      if (!v311) {
        goto LABEL_448;
      }
    }
  }
  if (v310 != &v306[8 * v309]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_448:
  if (DWORD2(v348))
  {
    uint64_t v312 = 8 * DWORD2(v348);
    do
    {
      if (*(void *)(v348 - 8 + v312)) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      v312 -= 8;
    }
    while (v312);
  }
  if (v331 != v330) {
    free(v331);
  }
  if ((unsigned char *)v348 != v349) {
    free((void *)v348);
  }
  if (v351 != (char *)&v353) {
    free(v351);
  }
  uint64_t v64 = 1;
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v316 + 8))(v316, 13, *(unsigned int *)(v323 + 32), 1, 0, 1, 3);
  return v64;
}

unint64_t sub_1CC79698C(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v50 = *(a2 - 1);
                unint64_t v51 = v10[1];
                if (v50 > v51)
                {
                  uint64_t v52 = *v10;
                  *int v10 = *(a2 - 2);
                  v10[1] = v50;
                  *(a2 - 2) = v52;
                  *(a2 - 1) = v51;
                }
                break;
              case 3:
                uint64_t result = (unint64_t)sub_1CC7970AC(v10, v10 + 2, a2 - 2);
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CC79733C(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5:
                uint64_t result = (unint64_t)sub_1CC79733C(v10, v10 + 2, v10 + 4, v10 + 6);
                unint64_t v53 = *(a2 - 1);
                unint64_t v54 = v10[7];
                if (v53 > v54)
                {
                  uint64_t v55 = *(a2 - 2);
                  v10[7] = v53;
                  *(a2 - 1) = v54;
                  unint64_t v57 = v10[5];
                  uint64_t v56 = v10[6];
                  v10[6] = v55;
                  *(a2 - 2) = v56;
                  unint64_t v58 = v10[7];
                  if (v58 > v57)
                  {
                    uint64_t v59 = v10[6];
                    unint64_t v60 = v10[3];
                    uint64_t v61 = v10[4];
                    v10[4] = v59;
                    v10[5] = v58;
                    v10[6] = v61;
                    v10[7] = v57;
                    if (v58 > v60)
                    {
                      unint64_t v62 = v10[1];
                      uint64_t v63 = v10[2];
                      v10[2] = v59;
                      v10[3] = v58;
                      v10[4] = v63;
                      v10[5] = v60;
                      if (v58 > v62)
                      {
                        uint64_t v64 = *v10;
                        *int v10 = v59;
                        v10[1] = v58;
                        v10[2] = v64;
                        v10[3] = v62;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            __int16 v65 = v10 + 2;
            BOOL v67 = v10 == a2 || v65 == a2;
            if (a4)
            {
              if (!v67)
              {
                uint64_t v68 = 0;
                int v69 = v10;
                do
                {
                  unint64_t v70 = v69[3];
                  unint64_t v71 = v69[1];
                  int v69 = v65;
                  if (v70 > v71)
                  {
                    uint64_t v72 = *v65;
                    uint64_t v73 = v68;
                    while (1)
                    {
                      uint64_t v74 = (char *)v10 + v73;
                      uint64_t v75 = *(uint64_t *)((char *)v10 + v73 + 8);
                      *((void *)v74 + 2) = *(uint64_t *)((char *)v10 + v73);
                      *((void *)v74 + 3) = v75;
                      if (!v73) {
                        break;
                      }
                      v73 -= 16;
                      if (v70 <= *((void *)v74 - 1))
                      {
                        uint64_t v76 = (uint64_t *)((char *)v10 + v73 + 16);
                        goto LABEL_85;
                      }
                    }
                    uint64_t v76 = v10;
LABEL_85:
                    *uint64_t v76 = v72;
                    v76[1] = v70;
                  }
                  __int16 v65 = v69 + 2;
                  v68 += 16;
                }
                while (v69 + 2 != a2);
              }
            }
            else if (!v67)
            {
              unsigned int v105 = v10 + 3;
              do
              {
                unint64_t v106 = v9[3];
                unint64_t v107 = v9[1];
                uint64_t v9 = v65;
                if (v106 > v107)
                {
                  uint64_t v108 = *v65;
                  uint64_t v109 = v105;
                  do
                  {
                    int v110 = v109;
                    unint64_t v111 = *(v109 - 4);
                    *(v109 - 1) = *(v109 - 3);
                    uint64_t v112 = *(v109 - 2);
                    v109 -= 2;
                    void *v110 = v112;
                  }
                  while (v106 > v111);
                  *(v109 - 1) = v108;
                  *uint64_t v109 = v106;
                }
                __int16 v65 = v9 + 2;
                v105 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v77 = (unint64_t)(v12 - 2) >> 1;
              int64_t v78 = v77;
              do
              {
                int64_t v79 = v78;
                if (v77 >= v78)
                {
                  uint64_t v80 = (2 * v78) | 1;
                  uint64_t v81 = &v10[2 * v80];
                  if (2 * v79 + 2 < v12)
                  {
                    BOOL v82 = v81[1] > (unint64_t)v81[3];
                    v81 += 2 * v82;
                    if (v82) {
                      uint64_t v80 = 2 * v79 + 2;
                    }
                  }
                  unint64_t v83 = v81[1];
                  unint64_t v84 = v10[2 * v79 + 1];
                  if (v83 <= v84)
                  {
                    uint64_t v85 = &v10[2 * v79];
                    uint64_t v86 = *v85;
                    do
                    {
                      unint64_t v87 = v85;
                      uint64_t v85 = v81;
                      *unint64_t v87 = *v81;
                      v87[1] = v83;
                      if (v77 < v80) {
                        break;
                      }
                      uint64_t v88 = (2 * v80) | 1;
                      uint64_t v81 = &v10[2 * v88];
                      uint64_t v89 = 2 * v80 + 2;
                      if (v89 < v12)
                      {
                        uint64_t result = v81[3];
                        BOOL v82 = v81[1] > result;
                        v81 += 2 * v82;
                        if (v82) {
                          uint64_t v88 = v89;
                        }
                      }
                      unint64_t v83 = v81[1];
                      uint64_t v80 = v88;
                    }
                    while (v83 <= v84);
                    *uint64_t v85 = v86;
                    v85[1] = v84;
                  }
                }
                int64_t v78 = v79 - 1;
              }
              while (v79);
              do
              {
                uint64_t v90 = 0;
                uint64_t v91 = *v10;
                uint64_t v92 = v10[1];
                uint64_t v93 = v10;
                do
                {
                  uint64_t v94 = &v93[2 * v90 + 2];
                  uint64_t v95 = (2 * v90) | 1;
                  uint64_t v96 = 2 * v90 + 2;
                  if (v96 < v12)
                  {
                    BOOL v82 = v94[1] > (unint64_t)v94[3];
                    v94 += 2 * v82;
                    if (v82) {
                      uint64_t v95 = v96;
                    }
                  }
                  uint64_t v97 = v94[1];
                  uint64_t *v93 = *v94;
                  v93[1] = v97;
                  uint64_t v93 = v94;
                  uint64_t v90 = v95;
                }
                while (v95 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v94 == a2 - 2)
                {
                  *uint64_t v94 = v91;
                  v94[1] = v92;
                }
                else
                {
                  uint64_t v98 = *(a2 - 1);
                  *uint64_t v94 = *(a2 - 2);
                  v94[1] = v98;
                  *(a2 - 2) = v91;
                  *(a2 - 1) = v92;
                  uint64_t v99 = (char *)v94 - (char *)v10 + 16;
                  if (v99 >= 17)
                  {
                    unint64_t v100 = (((unint64_t)v99 >> 4) - 2) >> 1;
                    unint64_t v101 = v10[2 * v100 + 1];
                    unint64_t v102 = v94[1];
                    if (v101 > v102)
                    {
                      uint64_t v103 = *v94;
                      do
                      {
                        uint64_t v104 = v94;
                        uint64_t v94 = &v10[2 * v100];
                        *uint64_t v104 = *v94;
                        v104[1] = v101;
                        if (!v100) {
                          break;
                        }
                        unint64_t v100 = (v100 - 1) >> 1;
                        unint64_t v101 = v10[2 * v100 + 1];
                      }
                      while (v101 > v102);
                      *uint64_t v94 = v103;
                      v94[1] = v102;
                    }
                  }
                }
                a2 -= 2;
                BOOL v82 = v12-- <= 2;
              }
              while (!v82);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CC7970AC(v9, &v9[2 * ((unint64_t)v12 >> 1)], a2 - 2);
            sub_1CC7970AC(v9 + 2, v14 - 2, a2 - 4);
            sub_1CC7970AC(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = (unint64_t)sub_1CC7970AC(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *v9;
            uint64_t v16 = v9[1];
            uint64_t v17 = v14[1];
            *uint64_t v9 = *v14;
            v9[1] = v17;
            *uint64_t v14 = v15;
            v14[1] = v16;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CC7970AC(&v9[2 * ((unint64_t)v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v18 = v9[1];
          if (*(v9 - 1) > v18) {
            goto LABEL_13;
          }
          if (v18 <= *(a2 - 1))
          {
            uint64_t v38 = v9 + 2;
            do
            {
              int v10 = v38;
              if (v38 >= a2) {
                break;
              }
              unint64_t v39 = v38[1];
              v38 += 2;
            }
            while (v18 <= v39);
          }
          else
          {
            unsigned int v36 = v9;
            do
            {
              int v10 = v36 + 2;
              unint64_t v37 = v36[3];
              v36 += 2;
            }
            while (v18 <= v37);
          }
          unsigned int v40 = a2;
          if (v10 < a2)
          {
            uint64_t v41 = a2;
            do
            {
              unsigned int v40 = v41 - 2;
              unint64_t v42 = *(v41 - 1);
              v41 -= 2;
            }
            while (v18 > v42);
          }
          uint64_t v43 = *v9;
          while (v10 < v40)
          {
            uint64_t v44 = *v10;
            uint64_t v45 = v10[1];
            uint64_t v46 = v40[1];
            *int v10 = *v40;
            v10[1] = v46;
            *unsigned int v40 = v44;
            v40[1] = v45;
            do
            {
              unint64_t v47 = v10[3];
              v10 += 2;
            }
            while (v18 <= v47);
            do
            {
              unint64_t v48 = *(v40 - 1);
              v40 -= 2;
            }
            while (v18 > v48);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            uint64_t v49 = *(v10 - 1);
            *uint64_t v9 = *(v10 - 2);
            v9[1] = v49;
          }
          a4 = 0;
          *(v10 - 2) = v43;
          *(v10 - 1) = v18;
        }
        unint64_t v18 = v9[1];
LABEL_13:
        uint64_t v19 = 0;
        uint64_t v20 = *v9;
        do
        {
          unint64_t v21 = v9[v19 + 3];
          v19 += 2;
        }
        while (v21 > v18);
        uint64_t v22 = &v9[v19];
        uint64_t v23 = a2;
        if (v19 == 2)
        {
          int v26 = a2;
          while (v22 < v26)
          {
            uint64_t v24 = v26 - 2;
            unint64_t v27 = *(v26 - 1);
            v26 -= 2;
            if (v27 > v18) {
              goto LABEL_23;
            }
          }
          uint64_t v24 = v26;
        }
        else
        {
          do
          {
            uint64_t v24 = v23 - 2;
            unint64_t v25 = *(v23 - 1);
            v23 -= 2;
          }
          while (v25 <= v18);
        }
LABEL_23:
        int v10 = v22;
        if (v22 < v24)
        {
          uint64_t v28 = v24;
          do
          {
            uint64_t v29 = *v10;
            uint64_t v30 = v10[1];
            uint64_t v31 = v28[1];
            *int v10 = *v28;
            v10[1] = v31;
            *uint64_t v28 = v29;
            v28[1] = v30;
            do
            {
              unint64_t v32 = v10[3];
              v10 += 2;
            }
            while (v32 > v18);
            do
            {
              unint64_t v33 = *(v28 - 1);
              v28 -= 2;
            }
            while (v33 <= v18);
          }
          while (v10 < v28);
        }
        if (v10 - 2 != v9)
        {
          uint64_t v34 = *(v10 - 1);
          *uint64_t v9 = *(v10 - 2);
          v9[1] = v34;
        }
        *(v10 - 2) = v20;
        *(v10 - 1) = v18;
        if (v22 >= v24) {
          break;
        }
LABEL_34:
        uint64_t result = sub_1CC79698C(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_1CC797140(v9, v10 - 2);
      uint64_t result = sub_1CC797140(v10, a2);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 2;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC7970AC(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = a2[1];
  unint64_t v4 = result[1];
  unint64_t v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      uint64_t v7 = *a3;
      a2[1] = v5;
      a3[1] = v3;
      uint64_t v9 = *a2;
      unint64_t v8 = a2[1];
      *a2 = v7;
      *a3 = v9;
      unint64_t v10 = result[1];
      if (v8 > v10)
      {
        uint64_t v11 = *result;
        llvm::Value *result = *a2;
        result[1] = v8;
        *a2 = v11;
        a2[1] = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = *result;
    if (v5 <= v3)
    {
      llvm::Value *result = *a2;
      result[1] = v3;
      *a2 = v6;
      a2[1] = v4;
      unint64_t v12 = a3[1];
      if (v12 <= v4) {
        return result;
      }
      *a2 = *a3;
      a2[1] = v12;
    }
    else
    {
      llvm::Value *result = *a3;
      result[1] = v5;
    }
    *a3 = v6;
    a3[1] = v4;
  }
  return result;
}

BOOL sub_1CC797140(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = a1[1];
      if (v6 > v7)
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        a1[1] = v6;
        *(a2 - 2) = v8;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC7970AC(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC79733C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC79733C(a1, a1 + 2, a1 + 4, a1 + 6);
      unint64_t v19 = *(a2 - 1);
      unint64_t v20 = a1[7];
      if (v19 > v20)
      {
        uint64_t v21 = *(a2 - 2);
        a1[7] = v19;
        *(a2 - 1) = v20;
        unint64_t v23 = a1[5];
        uint64_t v22 = a1[6];
        a1[6] = v21;
        *(a2 - 2) = v22;
        unint64_t v24 = a1[7];
        if (v24 > v23)
        {
          uint64_t v25 = a1[6];
          unint64_t v26 = a1[3];
          uint64_t v27 = a1[4];
          a1[4] = v25;
          a1[5] = v24;
          a1[6] = v27;
          a1[7] = v23;
          if (v24 > v26)
          {
            unint64_t v28 = a1[1];
            uint64_t v29 = a1[2];
            a1[2] = v25;
            a1[3] = v24;
            a1[4] = v29;
            a1[5] = v26;
            if (v24 > v28)
            {
              uint64_t v30 = *a1;
              *a1 = v25;
              a1[1] = v24;
              a1[2] = v30;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 4;
      sub_1CC7970AC(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = v10[1];
    if (v13 > v9[1])
    {
      uint64_t v14 = *v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = (uint64_t *)((char *)a1 + v15);
        uint64_t v17 = *(uint64_t *)((char *)a1 + v15 + 40);
        v16[6] = *(uint64_t *)((char *)a1 + v15 + 32);
        v16[7] = v17;
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= v16[3])
        {
          unint64_t v18 = (uint64_t *)((char *)a1 + v15 + 48);
          goto LABEL_13;
        }
      }
      unint64_t v18 = a1;
LABEL_13:
      uint64_t *v18 = v14;
      v18[1] = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC79733C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC7970AC(a1, a2, a3);
  unint64_t v9 = a4[1];
  unint64_t v10 = a3[1];
  if (v9 > v10)
  {
    uint64_t v11 = *a4;
    a3[1] = v9;
    a4[1] = v10;
    uint64_t v13 = *a3;
    unint64_t v12 = a3[1];
    *a3 = v11;
    *a4 = v13;
    unint64_t v14 = a2[1];
    if (v12 > v14)
    {
      uint64_t v15 = *a3;
      a2[1] = v12;
      a3[1] = v14;
      uint64_t v17 = *a2;
      unint64_t v16 = a2[1];
      *a2 = v15;
      *a3 = v17;
      unint64_t v18 = a1[1];
      if (v16 > v18)
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        a1[1] = v16;
        *a2 = v19;
        a2[1] = v18;
      }
    }
  }
  return result;
}

void sub_1CC7973DC(uint64_t a1)
{
}

void sub_1CC79748C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC79759C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA7E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E010;
  unint64_t v7 = (llvm::PassRegistry *)sub_1CB93141C(a1 + 32, a2);
  if (byte_1EBCDA938) {
    char v8 = 1;
  }
  else {
    char v8 = a3;
  }
  *(unsigned char *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 65) = a4;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v7);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7E8, memory_order_acquire) != -1)
  {
    v12[0] = sub_1CC7973DC;
    v12[1] = &PassRegistry;
    uint64_t v11 = v12;
    std::__call_once(&qword_1EBCDA7E8, &v11, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC797674(uint64_t a1)
{
}

uint64_t sub_1CC797714(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDA7E1;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261E0B0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7F0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC797674;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDA7F0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC7977C4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC7978D8()
{
  return byte_1EBCDA878;
}

void sub_1CC7978E4(llvm::Pass *this)
{
  *(void *)this = &unk_1F261E010;
  uint64_t v2 = (char *)this + 32;
  unint64_t v3 = (char *)*((void *)this + 7);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC797998(llvm::Pass *this)
{
  *(void *)this = &unk_1F261E010;
  uint64_t v2 = (char *)this + 32;
  unint64_t v3 = (char *)*((void *)this + 7);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC797A60()
{
  return "GPU Atomic Optimize pass";
}

void sub_1CC797A70(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

BOOL sub_1CC797AEC(uint64_t a1, uint64_t a2)
{
  v198[65] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40);
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::DominatorTreeWrapperPass::ID) + 32;
  unint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::PostDominatorTreeWrapperPass::ID);
  v198[0] = 1;
  for (uint64_t i = 1; i != 65; i += 4)
    v198[i] = -4096;
  sub_1CD10AFA4((llvm::Module *)v4, (uint64_t)v198);
  uint64_t v16 = *(void *)(a2 + 40);
  if (*(char *)(v16 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v181, *(const void **)(v16 + 216), *(void *)(v16 + 224));
  }
  else {
    std::string v181 = *(std::string *)(v16 + 216);
  }
  if (!std::string::compare(&v181, 0, 4uLL, "agx1"))
  {
    int v17 = 27;
  }
  else if (!std::string::compare(&v181, 0, 4uLL, "agx2"))
  {
    int v17 = 28;
  }
  else if (!std::string::compare(&v181, 0, 4uLL, "agx3"))
  {
    int v17 = 29;
  }
  else
  {
    int v17 = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  unint64_t v18 = *(uint64_t **)(a1 + 8);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (v19 == v20)
  {
LABEL_27:
    uint64_t v21 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v19 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v19 += 16;
      if (v19 == v20) {
        goto LABEL_27;
      }
    }
    uint64_t v21 = *(void *)(v19 + 8);
  }
  uint64_t v22 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v21 + 96))(v21, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v4);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 24))(v22, a2);
  if (v17 != 27)
  {
    int v29 = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
    if ((v29 - 103) < 2) {
      goto LABEL_43;
    }
    if (v29 == 106 || v29 == 102)
    {
      uint64_t v30 = *(llvm::Module **)(a2 + 40);
      v189[0] = "agx.vertex_amp_mode";
      __int16 v190 = 259;
      if (llvm::Module::getNamedMetadata(v30, v189)) {
        goto LABEL_43;
      }
      uint64_t v74 = sub_1CD110204(*(uint64_t ***)(a2 + 40), 2710, 0, 0);
      if (v74)
      {
        if (*(void *)(v74 + 8)) {
          goto LABEL_43;
        }
      }
    }
  }
  v189[0] = "air.uniform_atomics_mode";
  __int16 v190 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v4, v189);
  if (!NamedMetadata)
  {
LABEL_43:
    BOOL v31 = 0;
    goto LABEL_44;
  }
  uint64_t v25 = *(void **)(*(void *)(***(void ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                   + 8);
  if (*v25 == 15)
  {
    char v175 = 0;
    BOOL v31 = 0;
    uint64_t v33 = v25[3];
    uint64_t v34 = *(void *)((char *)v25 + 31);
    if (v33 != 0x2D63696D616E7964 || v34 != 0x64656C62616E652DLL) {
      goto LABEL_44;
    }
  }
  else
  {
    if (*v25 != 14) {
      goto LABEL_43;
    }
    uint64_t v26 = v25[3];
    uint64_t v27 = *(void *)((char *)v25 + 30);
    BOOL v28 = v26 == 0x652D636974617473 && v27 == 0x64656C62616E652DLL;
    if (!v28) {
      goto LABEL_43;
    }
    char v175 = 1;
  }
  int v173 = v17;
  int v174 = (uint64_t **)v4;
  std::string __dst = v197;
  unint64_t v196 = 0x1000000000;
  uint64_t v36 = *(void *)(a2 + 80);
  if (v36 == a2 + 72)
  {
    BOOL v31 = 0;
    goto LABEL_260;
  }
  uint64_t v172 = v23;
  uint64_t v170 = a1;
  unsigned int v37 = 0;
  do
  {
    uint64_t v38 = v36 - 24;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t v39 = v38 + 40;
    uint64_t v40 = *(void *)(v38 + 48);
    while (v40 != v39)
    {
      uint64_t v41 = v40;
      uint64_t v40 = *(void *)(v40 + 8);
      uint64_t v42 = v41 - 24;
      if (!v41) {
        uint64_t v42 = 0;
      }
      int v43 = *(unsigned __int8 *)(v42 + 16);
      if (v43 == 65) {
        uint64_t v44 = v42;
      }
      else {
        uint64_t v44 = 0;
      }
      if (v41)
      {
        if (v43 == 65)
        {
          int v45 = *(_WORD *)(v44 + 18) >> 4;
          if ((v45 - 5) < 8 || (v45 - 1) <= 2)
          {
            int v46 = *(_DWORD *)(**(void **)(v44 - 32) + 8);
            int v47 = *(_DWORD *)(**(void **)(v44 - 32) + 8) >> 8;
            BOOL v48 = v47 == 16 || v47 == 32;
            BOOL v49 = v48 && v46 == 13;
            BOOL v50 = v49;
            if (v46 == 2 || v50)
            {
              uint64_t v52 = *(void *)(v14 + 80);
              uint64_t v53 = *(unsigned int *)(v14 + 96);
              if (v53)
              {
                uint64_t v54 = *(void *)(v44 + 40);
                LODWORD(v55) = ((v54 >> 4) ^ (v54 >> 9)) & (v53 - 1);
                uint64_t v56 = (uint64_t *)(v52 + 16 * v55);
                uint64_t v57 = *v56;
                if (v54 == *v56) {
                  goto LABEL_87;
                }
                int v58 = 1;
                while (v57 != -4096)
                {
                  int v59 = v55 + v58++;
                  uint64_t v55 = v59 & (v53 - 1);
                  uint64_t v57 = *(void *)(v52 + 16 * v55);
                  if (v54 == v57)
                  {
                    uint64_t v56 = (uint64_t *)(v52 + 16 * v55);
                    goto LABEL_87;
                  }
                }
              }
              uint64_t v56 = (uint64_t *)(v52 + 16 * v53);
LABEL_87:
              unint64_t v60 = (uint64_t *)(v52 + 16 * v53);
              if (v56 == v60) {
                uint64_t v61 = 0;
              }
              else {
                uint64_t v61 = v56[1];
              }
              uint64_t v62 = *(void *)(a2 + 80);
              if (v62) {
                uint64_t v63 = v62 - 24;
              }
              else {
                uint64_t v63 = 0;
              }
              if (v53)
              {
                unsigned int v64 = v53 - 1;
                LODWORD(v53) = ((v63 >> 4) ^ (v63 >> 9)) & (v53 - 1);
                __int16 v65 = (uint64_t *)(v52 + 16 * v53);
                uint64_t v66 = *v65;
                if (v63 == *v65)
                {
LABEL_99:
                  if (v65 != v60)
                  {
                    uint64_t v69 = v65[1];
                    BOOL v70 = v69 == v61 || v69 == 0;
                    if (!v70
                      && v61 != 0
                      && *(void *)(v69 + 8) != v61
                      && *(void *)(v61 + 8) != v69
                      && *(_DWORD *)(v61 + 16) < *(_DWORD *)(v69 + 16)
                      && !*(unsigned char *)(v14 + 120))
                    {
                      unsigned int v72 = *(_DWORD *)(v14 + 124) + 1;
                      *(_DWORD *)(v14 + 124) = v72;
                      if (v72 >= 0x21) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                      }
                    }
                  }
                }
                else
                {
                  int v67 = 1;
                  while (v66 != -4096)
                  {
                    int v68 = v53 + v67++;
                    uint64_t v53 = v68 & v64;
                    uint64_t v66 = *(void *)(v52 + 16 * v53);
                    if (v63 == v66)
                    {
                      __int16 v65 = (uint64_t *)(v52 + 16 * v53);
                      goto LABEL_99;
                    }
                  }
                }
              }
              if (v37 >= HIDWORD(v196)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__dst + v37) = v44;
              unsigned int v37 = v196 + 1;
              LODWORD(v196) = v196 + 1;
            }
          }
        }
      }
    }
    uint64_t v36 = *(void *)(v36 + 8);
  }
  while (v36 != a2 + 72);
  if (!v37)
  {
    BOOL v31 = 0;
    goto LABEL_260;
  }
  char v176 = v180;
  uint64_t v177 = v180;
  uint64_t v178 = 8;
  int v179 = 0;
  sub_1CD10C594((llvm::Module *)v4, (uint64_t)&v176);
  v187[0] = &unk_1F261E150;
  v187[1] = sub_1CD114134;
  int v188 = v187;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)v189, (llvm::Function *)a2, v9, v14 + 32, (const llvm::DataLayout *)(v4 + 272), (uint64_t)v198, (uint64_t)v187, 0, (uint64_t)&v176);
  if (v188 == v187)
  {
    (*(void (**)(void *))(v187[0] + 32))(v187);
    uint64_t v73 = v170;
  }
  else
  {
    uint64_t v73 = v170;
    if (v188) {
      (*(void (**)(void))(*v188 + 40))();
    }
  }
  uint64_t v184 = v186;
  uint64_t v185 = 0x800000000;
  if (!v196)
  {
    BOOL v31 = 0;
    goto LABEL_258;
  }
  unsigned int v75 = 0;
  int v76 = *(unsigned __int8 *)(v73 + 64);
  int64_t v77 = (char *)__dst;
  int64_t v78 = (char *)__dst + 8 * v196;
  do
  {
    uint64_t v79 = *(void *)v77;
    uint64_t v80 = *(void *)(*(void *)v77 - 64);
    uint64_t v81 = v191;
    if (v192 == v191)
    {
      unsigned int v82 = v194;
      if (v194)
      {
        unint64_t v83 = 0;
        uint64_t v84 = 8 * v194;
        uint64_t v85 = &v192[(unint64_t)v84 / 8];
        while (v192[v83 / 8] != v80)
        {
          v83 += 8;
          if (v84 == v83)
          {
            uint64_t v86 = &v192[v194];
            goto LABEL_148;
          }
        }
        uint64_t v86 = &v192[v83 / 8];
LABEL_148:
        unint64_t v97 = 0;
        unsigned int v87 = v193;
        BOOL v98 = v86 != v85;
        while (v192[v97 / 8] != *(void *)(v79 - 32))
        {
          v97 += 8;
          if (v84 == v97) {
            goto LABEL_153;
          }
        }
        uint64_t v85 = &v192[v97 / 8];
LABEL_153:
        uint64_t v81 = v192;
      }
      else
      {
        BOOL v98 = 0;
        unsigned int v87 = v193;
        uint64_t v81 = v192;
        uint64_t v85 = v192;
      }
    }
    else
    {
      unsigned int v87 = v193;
      unsigned int v88 = v193 - 1;
      unsigned int v89 = (v193 - 1) & ((v80 >> 4) ^ (v80 >> 9));
      uint64_t v90 = &v192[v89];
      uint64_t v91 = *v90;
      if (*v90 == -1)
      {
        uint64_t v92 = 0;
LABEL_156:
        if (v92) {
          uint64_t v90 = v92;
        }
        uint64_t v96 = *v90;
      }
      else
      {
        uint64_t v92 = 0;
        int v93 = 1;
        while (v91 != v80)
        {
          if (v92) {
            BOOL v94 = 0;
          }
          else {
            BOOL v94 = v91 == -2;
          }
          if (v94) {
            uint64_t v92 = v90;
          }
          unsigned int v95 = v89 + v93++;
          unsigned int v89 = v95 & v88;
          uint64_t v90 = &v192[v95 & v88];
          uint64_t v91 = *v90;
          if (*v90 == -1) {
            goto LABEL_156;
          }
        }
        uint64_t v96 = *(void *)(*(void *)v77 - 64);
      }
      BOOL v28 = v96 == v80;
      uint64_t v85 = &v192[v193];
      BOOL v98 = v28 && v90 != v85;
      uint64_t v100 = *(void *)(v79 - 32);
      unsigned int v101 = ((v100 >> 4) ^ (v100 >> 9)) & v88;
      unint64_t v102 = &v192[v101];
      uint64_t v103 = *v102;
      if (*v102 == -1)
      {
        uint64_t v104 = 0;
LABEL_178:
        if (v104) {
          unint64_t v102 = v104;
        }
        uint64_t v108 = *v102;
      }
      else
      {
        uint64_t v104 = 0;
        int v105 = 1;
        while (v103 != v100)
        {
          if (v104) {
            BOOL v106 = 0;
          }
          else {
            BOOL v106 = v103 == -2;
          }
          if (v106) {
            uint64_t v104 = v102;
          }
          unsigned int v107 = v101 + v105++;
          unsigned int v101 = v107 & v88;
          unint64_t v102 = &v192[v107 & v88];
          uint64_t v103 = *v102;
          if (*v102 == -1) {
            goto LABEL_178;
          }
        }
        uint64_t v108 = *(void *)(v79 - 32);
      }
      unsigned int v82 = v194;
      if (v108 == v100) {
        uint64_t v85 = v102;
      }
    }
    if (v192 == v81) {
      unsigned int v87 = v82;
    }
    char v109 = v85 != &v192[v87] || v98;
    if (v76) {
      char v109 = v98;
    }
    if ((v109 & 1) == 0)
    {
      if (v75 >= HIDWORD(v185)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v184 + v75) = v79;
      unsigned int v75 = v185 + 1;
      LODWORD(v185) = v185 + 1;
    }
    v77 += 8;
  }
  while (v77 != v78);
  int v110 = v184;
  BOOL v168 = v75 != 0;
  if (!v75) {
    goto LABEL_256;
  }
  if (v184 == v186)
  {
    uint64_t v112 = v196;
    unint64_t v111 = v174;
    if (v196 >= v75)
    {
      memmove(__dst, v186, 8 * v75);
      LODWORD(v196) = v75;
      goto LABEL_204;
    }
    if (HIDWORD(v196) < v75)
    {
      LODWORD(v196) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v196) {
      memmove(__dst, v186, 8 * v196);
    }
    else {
      uint64_t v112 = 0;
    }
    if (v112 != v185) {
      memcpy((char *)__dst + 8 * v112, (char *)v184 + 8 * v112, 8 * v185 - 8 * v112);
    }
    LODWORD(v196) = v75;
    unint64_t v111 = v174;
    uint64_t v113 = v172;
  }
  else
  {
    unint64_t v111 = v174;
    if (__dst != v197)
    {
      free(__dst);
      int v110 = v184;
      unsigned int v75 = v185;
    }
    std::string __dst = v110;
    unint64_t v196 = __PAIR64__(HIDWORD(v185), v75);
    uint64_t v184 = v186;
    HIDWORD(v185) = 0;
LABEL_204:
    uint64_t v113 = v172;
  }
  LODWORD(v185) = 0;
  uint64_t v169 = (llvm::PointerType *)(***(void ***)a2 + 1960);
  if (v175) {
    goto LABEL_210;
  }
  uint64_t v114 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v113 + 176))(v113, 17);
  if (!v114) {
    goto LABEL_207;
  }
  if (v114 != 1)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v113 + 128))(v182, v113, 17);
    uint64_t v166 = *(void *)(*(uint64_t (**)(void *))(*(void *)v182[0] + 32))(v182[0]);
    uint64_t v167 = v182[0];
    v182[0] = 0;
    if (v167) {
      (*(void (**)(void *))(*(void *)v167 + 8))(v167);
    }
    unint64_t v111 = v174;
    uint64_t v113 = v172;
    if (v166) {
      goto LABEL_210;
    }
LABEL_207:
    uint64_t v115 = (char *)operator new(0x78uLL);
    *((_DWORD *)v115 + 13) = *((_DWORD *)v115 + 13) & 0x38000000 | 1;
    uint64_t v116 = (uint64_t)(v115 + 32);
    *(void *)uint64_t v115 = 0;
    *((void *)v115 + 1) = 0;
    *((void *)v115 + 2) = 0;
    *((void *)v115 + 3) = v115 + 32;
    v182[0] = "skip_uniform_atomics";
    __int16 v183 = 259;
    llvm::GlobalVariable::GlobalVariable((unint64_t *)v115 + 4, (uint64_t)v111, v169, 1, 0, 0, (const char **)v182, 0, 0, (llvm::Type *)0x100000040, 0);
    char v117 = llvm::UniqueStringSaver::save(***((void ***)v115 + 4) + 2136, "constant_driver", 0xFuLL);
    uint64_t v119 = v118;
    uint64_t v120 = ***((void ***)v115 + 4);
    v182[0] = v115 + 32;
    int v121 = *(_DWORD *)(v120 + 2520);
    if (v121)
    {
      uint64_t v122 = *(void *)(v120 + 2504);
      int v123 = v121 - 1;
      unsigned int v124 = v123 & ((v116 >> 4) ^ (v116 >> 9));
      BOOL v125 = (void *)(v122 + 24 * v124);
      uint64_t v126 = *v125;
      if (*v125 == v116)
      {
LABEL_209:
        v125[1] = v117;
        v125[2] = v119;
        *((_DWORD *)v115 + 16) = *((_DWORD *)v115 + 16) & 0xFFBFFFFF | ((v119 != 0) << 22);
        llvm::FunctionGroup::setGlobalResource(v113, 17, v116);
        goto LABEL_210;
      }
      uint64_t v158 = 0;
      int v159 = 1;
      while (v126 != -4096)
      {
        if (v158) {
          BOOL v160 = 0;
        }
        else {
          BOOL v160 = v126 == -8192;
        }
        if (v160) {
          uint64_t v158 = v125;
        }
        unsigned int v161 = v124 + v159++;
        unsigned int v124 = v161 & v123;
        BOOL v125 = (void *)(v122 + 24 * v124);
        uint64_t v126 = *v125;
        if (*v125 == v116) {
          goto LABEL_209;
        }
      }
      if (v158) {
        uint64_t v164 = v158;
      }
      else {
        uint64_t v164 = v125;
      }
    }
    else
    {
      uint64_t v164 = 0;
    }
    BOOL v125 = sub_1CC5BF31C(v120 + 2504, (uint64_t)v182, (uint64_t *)v182, v164);
    uint64_t v165 = v182[0];
    v125[1] = 0;
    v125[2] = 0;
    *BOOL v125 = v165;
    goto LABEL_209;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v113 + 128))(v182, v113, 17);
  uint64_t v162 = *(void *)(*(uint64_t (**)(void *))(*(void *)v182[0] + 32))(v182[0]);
  __int16 v163 = v182[0];
  v182[0] = 0;
  if (v163) {
    (*(void (**)(void *))(*(void *)v163 + 8))(v163);
  }
  if (!v162) {
    goto LABEL_207;
  }
LABEL_210:
  BOOL v171 = sub_1CD1111E0(a2, v113);
  if (v196)
  {
    if (v173 == 27) {
      uint64_t v127 = 2007;
    }
    else {
      uint64_t v127 = 2677;
    }
    if (v173 == 27) {
      uint64_t v128 = 2003;
    }
    else {
      uint64_t v128 = 2484;
    }
    uint64_t v129 = *(void *)__dst;
    uint64_t v130 = *(void *)(*(void *)__dst - 32);
    if (v192 == v191)
    {
      if (v194)
      {
        for (uint64_t j = 0; j != v194; ++j)
        {
          if (v192[j] == v130) {
            break;
          }
        }
      }
    }
    else
    {
      unsigned int v132 = (v193 - 1) & ((v130 >> 4) ^ (v130 >> 9));
      uint64_t v133 = &v192[v132];
      uint64_t v134 = *v133;
      if (*v133 != -1)
      {
        uint64_t v135 = 0;
        int v136 = 1;
        do
        {
          if (v134 == v130) {
            break;
          }
          if (v135) {
            BOOL v137 = 0;
          }
          else {
            BOOL v137 = v134 == -2;
          }
          if (v137) {
            uint64_t v135 = v133;
          }
          unsigned int v138 = v132 + v136++;
          unsigned int v132 = v138 & (v193 - 1);
          uint64_t v133 = &v192[v132];
          uint64_t v134 = *v133;
        }
        while (*v133 != -1);
      }
    }
    if (v171 && (!*(void *)(v129 + 8) || !*(unsigned char *)(v170 + 65))) {
      sub_1CC79AA5C(v173, v129);
    }
    llvm::Intrinsic::getType(*v111, v127, 0, 0);
    int v139 = (unsigned __int8 *)off_1E6830B58[v127];
    if (v139) {
      int v140 = (const char *)strlen(off_1E6830B58[v127]);
    }
    else {
      int v140 = 0;
    }
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v111, v127, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v111, v139, v140, Type, 0);
    llvm::Intrinsic::getType(*v111, v128, 0, 0);
    int v142 = off_1E6830B58[v128];
    if (v142) {
      BOOL v143 = (const char *)strlen(v142);
    }
    else {
      BOOL v143 = 0;
    }
    unsigned int v144 = (llvm::PointerType *)llvm::Intrinsic::getType(*v111, v128, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v111, (unsigned __int8 *)v142, v143, v144, 0);
    uint64_t v145 = *(void *)(v129 + 40);
    if ((*(unsigned char *)(v145 + 23) & 0x10) != 0)
    {
      uint64_t v146 = ***(void ***)v145;
      uint64_t v147 = *(void *)(v146 + 152);
      uint64_t v148 = *(unsigned int *)(v146 + 168);
      if (v148)
      {
        LODWORD(v149) = (v148 - 1) & ((v145 >> 4) ^ (v145 >> 9));
        uint64_t v150 = (uint64_t *)(v147 + 16 * v149);
        uint64_t v151 = *v150;
        if (*v150 != v145)
        {
          int v152 = 1;
          do
          {
            if (v151 == -4096) {
              goto LABEL_248;
            }
            int v153 = v149 + v152++;
            uint64_t v149 = v153 & (v148 - 1);
            uint64_t v151 = *(void *)(v147 + 16 * v149);
          }
          while (v151 != v145);
          uint64_t v150 = (uint64_t *)(v147 + 16 * v149);
        }
      }
      else
      {
LABEL_248:
        uint64_t v150 = (uint64_t *)(v147 + 16 * v148);
      }
      uint64_t v154 = (void *)v150[1];
      size_t v157 = (void *)*v154;
      uint64_t v156 = (char *)(v154 + 2);
      __int16 v155 = v157;
    }
    else
    {
      __int16 v155 = 0;
      uint64_t v156 = &byte_1CFBCE98E;
    }
    __int16 v183 = 773;
    v182[0] = v156;
    v182[1] = v155;
    v182[2] = ".atomicsplit";
    llvm::BasicBlock::splitBasicBlock(v145, v129 + 24, (uint64_t)v182, 0);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v172 + 8))(v172, 21, 1, 1, 0, 1, 2);
  int v110 = v184;
LABEL_256:
  BOOL v31 = v168;
  if (v110 != v186) {
    free(v110);
  }
LABEL_258:
  sub_1CC79BE3C((uint64_t)v189);
  if (v177 != v176) {
    free(v177);
  }
LABEL_260:
  if (__dst != v197) {
    free(__dst);
  }
LABEL_44:
  if ((v198[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v198[1], 8);
  }
  return v31;
}

void sub_1CC79AA5C(int a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(uint64_t ***)(*(void *)(v3 + 56) + 40);
  if (a1 == 27) {
    int v5 = 1884;
  }
  else {
    int v5 = 2306;
  }
  llvm::Intrinsic::getType(*v4, v5, 0, 0);
  uint64_t v6 = (unsigned __int8 *)off_1E6830B58[v5];
  if (v6) {
    uint64_t v7 = (const char *)strlen(off_1E6830B58[v5]);
  }
  else {
    uint64_t v7 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v4, v5, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v4, v6, v7, Type, 0);
  if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
  {
    uint64_t v9 = ***(void ***)v3;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 != v3)
      {
        int v15 = 1;
        do
        {
          if (v14 == -4096) {
            goto LABEL_13;
          }
          int v16 = v12 + v15++;
          uint64_t v12 = v16 & (v11 - 1);
          uint64_t v14 = *(void *)(v10 + 16 * v12);
        }
        while (v14 != v3);
        uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
      }
    }
    else
    {
LABEL_13:
      uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
    }
    int v17 = (void *)v13[1];
    uint64_t v20 = (void *)*v17;
    unint64_t v18 = (char *)(v17 + 2);
    uint64_t v19 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v18 = &byte_1CFBCE98E;
  }
  __int16 v22 = 773;
  v21[0] = v18;
  v21[1] = v19;
  _DWORD v21[2] = ".atomic";
  llvm::BasicBlock::splitBasicBlock(v3, a2 + 24, (uint64_t)v21, 0);
}

uint64_t sub_1CC79BAA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261E150;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC79BAC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(a1 + 8))(*a2, a3, a4, *a5);
}

uint64_t sub_1CC79BAE4(uint64_t **a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  _DWORD v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (char *)&unk_1CFB26FE8 + 4 * a3;
  uint64_t v10 = *((unsigned int *)v9 - 1);
  llvm::Intrinsic::getType(*a1, *((_DWORD *)v9 - 1), 0, 0);
  uint64_t v11 = (unsigned __int8 *)off_1E6830B58[v10];
  if (v11) {
    uint64_t v12 = (const char *)strlen(off_1E6830B58[v10]);
  }
  else {
    uint64_t v12 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*a1, v10, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)a1, v11, v12, Type, 0);
  int v16 = (uint64_t **)v14;
  if (v14) {
    int v17 = *(uint64_t ***)(v14 + 24);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = **(void **)(a2 + 64);
  uint64_t v19 = a5;
  uint64_t v20 = *(llvm::ConstantInt **)(v18 + 1936);
  unint64_t v21 = *(unsigned int *)(v18 + 1944);
  unsigned int v26 = v21 >> 8;
  if (v21 >> 8 > 0x40) {
    operator new[]();
  }
  if (v21 <= 0xFF) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
  }
  unint64_t v25 = v22 & v19;
  uint64_t v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v25, v15);
  if (v26 >= 0x41 && v25) {
    MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
  }
  v28[0] = (uint64_t)v23;
  v28[1] = a4;
  __int16 v27 = 257;
  return sub_1CB845BAC((uint64_t *)a2, v17, v16, v28, 2, (uint64_t)&v25, 0);
}

uint64_t sub_1CC79BCF4(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(*(void *)a1 + 8) != 2)
  {
    if (v1 == 16)
    {
      uint64_t v7 = (void *)(a1 + 24);
      if (*(_DWORD *)(a1 + 32) >= 0x41u) {
        uint64_t v7 = (void *)*v7;
      }
      int v5 = (void *)*v7;
      uint64_t v6 = *v7 & 0xFFFFFF00;
      goto LABEL_15;
    }
LABEL_16:
    uint64_t v8 = 0;
    LOBYTE(v5) = 0;
    uint64_t v6 = 0;
    return v5 | v8 | v6;
  }
  if (v1 != 17) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 32);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (llvm::APInt *)&v10);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (uint64_t)&v10);
  }
  if (v11 >= 0x41) {
    uint64_t v4 = v10;
  }
  else {
    uint64_t v4 = &v10;
  }
  int v5 = (void *)*v4;
  uint64_t v6 = *v4 & 0xFFFFFF00;
  if (v11 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0]();
  }
LABEL_15:
  uint64_t v8 = 0x100000000;
  return v5 | v8 | v6;
}

llvm::Instruction *sub_1CC79BDDC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)a2 != a3)
  {
    if (*(unsigned char *)(a3 + 8) == 2)
    {
      __int16 v6 = 257;
      return sub_1CC52CA10(a1, (uint64_t)a2, (uint64_t *)a3, (uint64_t)v5);
    }
    else
    {
      __int16 v6 = 257;
      return sub_1CB844B8C(a1, a2, a3, (uint64_t)v5);
    }
  }
  return (llvm::Instruction *)a2;
}

uint64_t sub_1CC79BE3C(uint64_t a1)
{
  uint64_t v2 = a1 + 1304;
  uint64_t v3 = *(void *)(a1 + 1328);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1136);
  if (v4 != (void *)(a1 + 1152)) {
    free(v4);
  }
  int v5 = *(void **)(a1 + 984);
  if (v5 != *(void **)(a1 + 976)) {
    free(v5);
  }
  __int16 v6 = *(void **)(a1 + 824);
  if (v6 != *(void **)(a1 + 816)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 536);
  if (v7 != *(void **)(a1 + 528)) {
    free(v7);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_1CC79BF38()
{
}

void sub_1CC79BF78(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC79BFB0()
{
  return "GPU Atomic Helper Thread Workaround Pass";
}

void sub_1CC79BFC0(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC79C014(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 32) + 24))(*(void *)(v7 + 32), a2);
  if (!sub_1CD1111E0(a2, v8)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(char *)(v9 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v41, *(const void **)(v9 + 216), *(void *)(v9 + 224));
  }
  else {
    std::string v41 = *(std::string *)(v9 + 216);
  }
  if (!std::string::compare(&v41, 0, 4uLL, "agx1"))
  {
    int v11 = 27;
  }
  else if (!std::string::compare(&v41, 0, 4uLL, "agx2"))
  {
    int v11 = 28;
  }
  else if (!std::string::compare(&v41, 0, 4uLL, "agx3"))
  {
    int v11 = 29;
  }
  else
  {
    int v11 = 0;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  int v45 = v47;
  uint64_t v46 = 0x1000000000;
  uint64_t v42 = v44;
  uint64_t v43 = 0x1000000000;
  uint64_t v12 = a2 + 72;
  uint64_t v13 = *(void *)(a2 + 80);
  if (v13 == v12)
  {
    uint64_t v10 = 0;
  }
  else
  {
    do
    {
      uint64_t v14 = v13 - 24;
      if (!v13) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14 + 40;
      uint64_t v16 = *(void *)(v14 + 48);
      if (v16 != v14 + 40)
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 8);
          if (v16) {
            uint64_t v18 = v16 - 24;
          }
          else {
            uint64_t v18 = 0;
          }
          int v19 = *(unsigned __int8 *)(v18 + 16);
          if (v19 == 65) {
            uint64_t v20 = v18;
          }
          else {
            uint64_t v20 = 0;
          }
          if (!v16 || v19 != 65) {
            goto LABEL_34;
          }
          if (*(void *)(v20 + 8)) {
            break;
          }
LABEL_41:
          uint64_t v16 = v17;
          if (v17 == v15) {
            goto LABEL_45;
          }
        }
        if (v46 >= (unint64_t)HIDWORD(v46)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v45 + v46) = v20;
        LODWORD(v46) = v46 + 1;
        int v19 = *(unsigned __int8 *)(v18 + 16);
LABEL_34:
        if (v19 != 64) {
          uint64_t v18 = 0;
        }
        if (v16 && v19 == 64 && *(void *)(v18 + 8))
        {
          if (v43 >= (unint64_t)HIDWORD(v43)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v42 + v43) = v18;
          LODWORD(v43) = v43 + 1;
        }
        goto LABEL_41;
      }
LABEL_45:
      uint64_t v13 = *(void *)(v13 + 8);
    }
    while (v13 != v12);
    if (v46 | v43)
    {
      if (v46) {
        sub_1CC79AA5C(v11, *(void *)v45);
      }
      uint64_t v10 = 1;
      if (v43)
      {
        if (v11 == 27) {
          uint64_t v21 = 1884;
        }
        else {
          uint64_t v21 = 2306;
        }
        uint64_t v22 = *(void *)v42;
        uint64_t v23 = *(void *)(*(void *)v42 + 40);
        unint64_t v24 = *(uint64_t ***)(*(void *)(v23 + 56) + 40);
        llvm::Intrinsic::getType(*v24, v21, 0, 0);
        unint64_t v25 = (unsigned __int8 *)off_1E6830B58[v21];
        if (v25) {
          unsigned int v26 = (const char *)strlen(off_1E6830B58[v21]);
        }
        else {
          unsigned int v26 = 0;
        }
        Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v24, v21, 0, 0);
        llvm::Module::getOrInsertFunction((uint64_t)v24, v25, v26, Type, 0);
        if ((*(unsigned char *)(v23 + 23) & 0x10) != 0)
        {
          uint64_t v28 = ***(void ***)v23;
          uint64_t v29 = *(void *)(v28 + 152);
          uint64_t v30 = *(unsigned int *)(v28 + 168);
          if (v30)
          {
            LODWORD(v31) = (v30 - 1) & ((v23 >> 4) ^ (v23 >> 9));
            unint64_t v32 = (uint64_t *)(v29 + 16 * v31);
            uint64_t v33 = *v32;
            if (*v32 != v23)
            {
              int v34 = 1;
              do
              {
                if (v33 == -4096) {
                  goto LABEL_62;
                }
                int v35 = v31 + v34++;
                uint64_t v31 = v35 & (v30 - 1);
                uint64_t v33 = *(void *)(v29 + 16 * v31);
              }
              while (v33 != v23);
              unint64_t v32 = (uint64_t *)(v29 + 16 * v31);
            }
          }
          else
          {
LABEL_62:
            unint64_t v32 = (uint64_t *)(v29 + 16 * v30);
          }
          uint64_t v36 = (void *)v32[1];
          uint64_t v39 = *v36;
          uint64_t v38 = (char *)(v36 + 2);
          uint64_t v37 = v39;
        }
        else
        {
          uint64_t v37 = 0;
          uint64_t v38 = &byte_1CFBCE98E;
        }
        __int16 v49 = 773;
        v48[0] = v38;
        v48[1] = v37;
        v48[2] = ".atomic";
        llvm::BasicBlock::splitBasicBlock(v23, v22 + 24, (uint64_t)v48, 0);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  if (v42 != v44) {
    free(v42);
  }
  if (v45 != v47) {
    free(v45);
  }
  return v10;
}

uint64_t sub_1CC79D538()
{
  char v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Set the default value for the IsG12 function";
  *((void *)&v1 + 1) = 44;
  sub_1CD433870((uint64_t)&unk_1EBCDA7F8, "atomicoptimize-isg12-default", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA7F8, &dword_1CB82C000);
  char v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Set the default value for optimizing divergent data";
  *((void *)&v1 + 1) = 51;
  sub_1CD63BE44(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCDA8B8, &dword_1CB82C000);
}

void sub_1CC79D5FC()
{
}

void sub_1CC79D698()
{
}

void sub_1CC79D6FC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC79D734(uint64_t a1, llvm::AGXIR *this)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = qword_1EBCDAD20;
  if (byte_1EBCDAD2F >= 0) {
    uint64_t v3 = byte_1EBCDAD2F & 0x7F;
  }
  if (v3)
  {
    uint64_t ShaderID = llvm::AGXIR::getShaderID(this, this);
    if ((ShaderID & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 28) < ShaderID)
    {
      *(_DWORD *)(a1 + 28) = ShaderID;
      sub_1CC79EC00((uint64_t)&v153, (uint64_t)&unk_1EBCDAD18);
    }
  }
  if (qword_1EBCDAC40 != qword_1EBCDAC48)
  {
    uint64_t v6 = llvm::AGXIR::getShaderID(this, this);
    if ((v6 & 0xFF00000000) != 0)
    {
      uint64_t v7 = qword_1EBCDAC48;
      uint64_t v8 = wmemchr((__int32 *)qword_1EBCDAC40, v6, (qword_1EBCDAC48 - qword_1EBCDAC40) >> 2);
      if (v8) {
        uint64_t v9 = (uint64_t)v8;
      }
      else {
        uint64_t v9 = v7;
      }
      if (v9 == qword_1EBCDAC48)
      {
        char v10 = 0;
        return v10 & 1;
      }
    }
    else
    {
      char v10 = byte_1EBCDAA00;
      if (!byte_1EBCDAA00) {
        return v10 & 1;
      }
    }
  }
  BOOL v137 = this;
  if (byte_1EBCDAAC0)
  {
    int v11 = (char *)this + 24;
    uint64_t v12 = *((void *)this + 4);
    if ((llvm::AGXIR *)v12 != (llvm::AGXIR *)((char *)v137 + 24))
    {
      do
      {
        uint64_t v13 = v12 - 56;
        if (!v12) {
          uint64_t v13 = 0;
        }
        uint64_t v14 = v13 + 72;
        for (uint64_t i = *(void *)(v13 + 80); i != v14; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            uint64_t v16 = (uint64_t ***)(i - 24);
          }
          else {
            uint64_t v16 = 0;
          }
          if ((*((unsigned char *)v16 + 23) & 0x10) == 0) {
            goto LABEL_33;
          }
          uint64_t v17 = ***v16;
          uint64_t v18 = *(void *)(v17 + 152);
          uint64_t v19 = *(unsigned int *)(v17 + 168);
          if (v19)
          {
            LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
            uint64_t v21 = v18 + 16 * v20;
            uint64_t v22 = *(uint64_t ****)v21;
            if (*(uint64_t ****)v21 == v16) {
              goto LABEL_32;
            }
            int v23 = 1;
            while (v22 != (uint64_t ***)-4096)
            {
              int v24 = v20 + v23++;
              uint64_t v20 = v24 & (v19 - 1);
              uint64_t v22 = *(uint64_t ****)(v18 + 16 * v20);
              if (v22 == v16)
              {
                uint64_t v21 = v18 + 16 * v20;
                goto LABEL_32;
              }
            }
          }
          uint64_t v21 = v18 + 16 * v19;
LABEL_32:
          if (**(void **)(v21 + 8)) {
            continue;
          }
LABEL_33:
          int v153 = (llvm::raw_ostream *)"bisect-helper-named";
          __int16 v156 = 259;
          llvm::Value::setNameImpl((llvm::Value *)v16, (const char **)&v153);
          if (i && !*((unsigned char *)v16 + 16))
          {
            if ((*((unsigned char *)v16 + 23) & 0x10) == 0) {
              goto LABEL_51;
            }
            uint64_t v25 = ***v16;
            uint64_t v26 = *(void *)(v25 + 152);
            uint64_t v27 = *(unsigned int *)(v25 + 168);
            if (!v27) {
              goto LABEL_43;
            }
            LODWORD(v28) = (v27 - 1) & ((v16 >> 4) ^ (v16 >> 9));
            uint64_t v29 = (uint64_t ****)(v26 + 16 * v28);
            uint64_t v30 = *v29;
            if (*v29 != v16)
            {
              int v31 = 1;
              while (v30 != (uint64_t ***)-4096)
              {
                int v32 = v28 + v31++;
                uint64_t v28 = v32 & (v27 - 1);
                uint64_t v30 = *(uint64_t ****)(v26 + 16 * v28);
                if (v30 == v16)
                {
                  uint64_t v29 = (uint64_t ****)(v26 + 16 * v28);
                  goto LABEL_44;
                }
              }
LABEL_43:
              uint64_t v29 = (uint64_t ****)(v26 + 16 * v27);
            }
LABEL_44:
            uint64_t v33 = v29[1];
            unint64_t v36 = (unint64_t)*v33;
            int v34 = v33 + 2;
            unint64_t v35 = v36;
            if (v36 >= 5 && (*(_DWORD *)v34 == *(_DWORD *)"llvm." ? (BOOL v37 = v34[4] == aLlvm_1[4]) : (BOOL v37 = 0), v37))
            {
              *((_DWORD *)v16 + 8) |= 0x2000u;
              int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
            }
            else
            {
LABEL_51:
              int v38 = 0;
              *((_DWORD *)v16 + 8) &= ~0x2000u;
            }
            *((_DWORD *)v16 + 9) = v38;
            continue;
          }
        }
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while ((char *)v12 != v11);
    }
  }
  if (byte_1EBCDB1B7 >= 0) {
    size_t v39 = byte_1EBCDB1B7 & 0x7F;
  }
  else {
    size_t v39 = qword_1EBCDB1A8;
  }
  if (!v39)
  {
    LOBYTE(v43) = 0;
    std::string v41 = (uint64_t **)v137;
    goto LABEL_64;
  }
  if (byte_1EBCDB1B7 >= 0) {
    uint64_t v40 = &qword_1EBCDB1A0;
  }
  else {
    uint64_t v40 = (uint64_t *)qword_1EBCDB1A0;
  }
  std::string v41 = (uint64_t **)v137;
  sub_1CC79ECE8(&v150, v40, v39, v137);
  uint64_t v42 = (const llvm::MemoryBuffer *)v150;
  if (!v150)
  {
    LOBYTE(v43) = 0;
    goto LABEL_64;
  }
  if (byte_1EBCDB29F >= 0) {
    size_t v56 = byte_1EBCDB29F & 0x7F;
  }
  else {
    size_t v56 = qword_1EBCDB290;
  }
  if (v56)
  {
    if (byte_1EBCDB29F >= 0) {
      uint64_t v63 = &qword_1EBCDB288;
    }
    else {
      uint64_t v63 = (uint64_t *)qword_1EBCDB288;
    }
    sub_1CC79EE94((uint64_t)&v153, v63, v56, v137);
  }
  uint64_t v138 = (*(uint64_t (**)(void *))(*(void *)v150 + 16))(v150);
  uint64_t v135 = v64;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)&v153, v42, 1, 35);
  if (!(_BYTE)v156)
  {
    LOBYTE(v43) = 0;
    goto LABEL_214;
  }
  uint64_t v43 = 0;
  do
  {
    uint64_t v65 = v43;
    LOBYTE(v147) = 58;
    unint64_t v66 = llvm::StringRef::find(&v158, (char *)&v147, 1uLL, 0);
    if (v66 == -1)
    {
      size_t v71 = 0;
      BOOL v70 = 0;
      uint64_t v67 = v158;
      size_t v68 = v159;
    }
    else
    {
      uint64_t v67 = v158;
      if (v159 >= v66) {
        size_t v68 = v66;
      }
      else {
        size_t v68 = v159;
      }
      if (v159 >= v66 + 1) {
        size_t v69 = v66 + 1;
      }
      else {
        size_t v69 = v159;
      }
      BOOL v70 = (const void *)(v158 + v69);
      size_t v71 = v159 - v69;
    }
    uint64_t v72 = sub_1CC79EFCC(v41[14], v67, v68, v138, v135, v157);
    uint64_t v73 = v72 + 72;
    uint64_t v74 = *(void *)(v72 + 80);
    if (v74 == v72 + 72) {
LABEL_218:
    }
      llvm::report_fatal_error((llvm *)"Invalid block name specified in the input file", (const llvm::Twine *)1);
    while (1)
    {
      if (v74) {
        uint64_t v75 = v74 - 24;
      }
      else {
        uint64_t v75 = 0;
      }
      if ((*(unsigned char *)(v75 + 23) & 0x10) == 0)
      {
        uint64_t v86 = 0;
        uint64_t v85 = &byte_1CFBCE98E;
        goto LABEL_137;
      }
      uint64_t v76 = ***(void ***)v75;
      uint64_t v77 = *(void *)(v76 + 152);
      uint64_t v78 = *(unsigned int *)(v76 + 168);
      if (!v78) {
        goto LABEL_135;
      }
      LODWORD(v79) = (v78 - 1) & ((v75 >> 4) ^ (v75 >> 9));
      uint64_t v80 = (uint64_t *)(v77 + 16 * v79);
      uint64_t v81 = *v80;
      if (*v80 != v75)
      {
        int v82 = 1;
        while (v81 != -4096)
        {
          int v83 = v79 + v82++;
          uint64_t v79 = v83 & (v78 - 1);
          uint64_t v81 = *(void *)(v77 + 16 * v79);
          if (v81 == v75)
          {
            uint64_t v80 = (uint64_t *)(v77 + 16 * v79);
            goto LABEL_136;
          }
        }
LABEL_135:
        uint64_t v80 = (uint64_t *)(v77 + 16 * v78);
      }
LABEL_136:
      uint64_t v84 = (void *)v80[1];
      uint64_t v87 = *v84;
      uint64_t v85 = (char *)(v84 + 2);
      uint64_t v86 = v87;
LABEL_137:
      if (v86 == v71 && (!v71 || !memcmp(v85, v70, v71))) {
        break;
      }
      uint64_t v74 = *(void *)(v74 + 8);
      if (v74 == v73) {
        goto LABEL_218;
      }
    }
    uint64_t v43 = v65;
    unsigned int v88 = *(void **)(v75 + 40);
    if (v88 != (void *)(v75 + 40))
    {
      int v89 = 0;
      do
      {
        if (*((unsigned char *)v88 - 8) == 83) {
          break;
        }
        uint64_t v90 = *v88;
        if (++v89 == dword_1EBCDAB80)
        {
          if ((*(unsigned char *)(v75 + 23) & 0x10) != 0)
          {
            uint64_t v91 = ***(void ***)v75;
            uint64_t v92 = *(void *)(v91 + 152);
            uint64_t v93 = *(unsigned int *)(v91 + 168);
            if (v93)
            {
              LODWORD(v94) = (v93 - 1) & ((v75 >> 4) ^ (v75 >> 9));
              unsigned int v95 = (uint64_t *)(v92 + 16 * v94);
              uint64_t v96 = *v95;
              if (*v95 != v75)
              {
                int v97 = 1;
                do
                {
                  if (v96 == -4096) {
                    goto LABEL_154;
                  }
                  int v98 = v94 + v97++;
                  uint64_t v94 = v98 & (v93 - 1);
                  uint64_t v96 = *(void *)(v92 + 16 * v94);
                }
                while (v96 != v75);
                unsigned int v95 = (uint64_t *)(v92 + 16 * v94);
              }
            }
            else
            {
LABEL_154:
              unsigned int v95 = (uint64_t *)(v92 + 16 * v93);
            }
            uint64_t v99 = (void *)v95[1];
            uint64_t v102 = *v99;
            unsigned int v101 = (char *)(v99 + 2);
            uint64_t v100 = v102;
          }
          else
          {
            uint64_t v100 = 0;
            unsigned int v101 = &byte_1CFBCE98E;
          }
          v149[8] = 261;
          uint64_t v147 = v101;
          uint64_t v148 = v100;
          llvm::BasicBlock::splitBasicBlock(v75, (uint64_t)v88, (uint64_t)&v147, 0);
        }
        unsigned int v88 = (void *)*v88;
      }
      while (v90 != v75 + 40);
    }
    llvm::line_iterator::advance((uint64_t)&v153);
    std::string v41 = (uint64_t **)v137;
  }
  while ((_BYTE)v156);
LABEL_214:
  if (v150) {
    (*(void (**)(void *))(*(void *)v150 + 8))(v150);
  }
LABEL_64:
  if (byte_1EBCDAE17 >= 0) {
    size_t v44 = byte_1EBCDAE17 & 0x7F;
  }
  else {
    size_t v44 = qword_1EBCDAE08;
  }
  if (v44)
  {
    if (byte_1EBCDAE17 >= 0) {
      int v45 = &qword_1EBCDAE00;
    }
    else {
      int v45 = (uint64_t *)qword_1EBCDAE00;
    }
    sub_1CC79EE94((uint64_t)&v153, v45, v44, (llvm::AGXIR *)v41);
  }
  if (byte_1EBCDAEFF >= 0) {
    size_t v46 = byte_1EBCDAEFF & 0x7F;
  }
  else {
    size_t v46 = qword_1EBCDAEF0;
  }
  if (v46)
  {
    int v47 = byte_1EBCDAEFF >= 0 ? &qword_1EBCDAEE8 : (uint64_t *)qword_1EBCDAEE8;
    sub_1CC79ECE8(&v146, v47, v46, (llvm::AGXIR *)v41);
    BOOL v48 = v146;
    if (v146)
    {
      int v153 = (llvm::raw_ostream *)&v155;
      uint64_t v154 = 0x400000000;
      uint64_t v57 = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)v146 + 16))(v146);
      uint64_t v133 = v58;
      uint64_t v134 = v57;
      llvm::line_iterator::line_iterator((llvm::line_iterator *)v141, v48, 1, 35);
      if (!v142)
      {
LABEL_217:
        sub_1CD63C448((char **)&v153);
        (*(void (**)(const llvm::MemoryBuffer *))(*(void *)v48 + 8))(v48);
        goto LABEL_80;
      }
      unsigned int v132 = v48;
      unsigned int v103 = 0;
      char v136 = v43;
      while (1)
      {
        LOBYTE(v147) = 58;
        unint64_t v104 = llvm::StringRef::find(&v144, (char *)&v147, 1uLL, 0);
        if (v104 != -1)
        {
          size_t v105 = v145 >= v104 ? v104 : v145;
          uint64_t v106 = v145 >= v104 + 1 ? v104 + 1 : v145;
          v140[0] = v144 + v106;
          v140[1] = v145 - v106;
          if (v105 && v145 > v104 + 1) {
            break;
          }
        }
LABEL_174:
        llvm::line_iterator::advance((uint64_t)v141);
        if (!v142)
        {
          if (v103) {
            llvm::createBlockExtractorPass();
          }
          BOOL v48 = v132;
          goto LABEL_217;
        }
      }
      uint64_t v108 = sub_1CC79EFCC(v41[14], v144, v105, v134, v133, v143);
      uint64_t v150 = v152;
      uint64_t v151 = 0x400000000;
      llvm::StringRef::split((char *)v140, (uint64_t)&v150, 59, -1, 0);
      uint64_t v147 = v149;
      uint64_t v148 = 0x1000000000;
      sub_1CD63C250((uint64_t)&v153, (unint64_t)&v147);
      if (v147 != v149) {
        free(v147);
      }
      unsigned int v109 = v103;
      if (!v151)
      {
LABEL_205:
        if (*((_DWORD *)v153 + 36 * v109 + 2))
        {
          ++v103;
        }
        else
        {
          LODWORD(v154) = v154 - 1;
          unint64_t v131 = (void **)((char *)v153 + 144 * v154);
          if (*v131 != v131 + 2) {
            free(*v131);
          }
        }
        if (v150 != v152) {
          free(v150);
        }
        goto LABEL_174;
      }
      unsigned int v139 = v103;
      int v110 = (const void **)v150;
      unint64_t v111 = (const void **)((char *)v150 + 16 * v151);
      uint64_t v112 = v108 + 72;
LABEL_180:
      uint64_t v113 = *(void *)(v108 + 80);
      if (v113 == v112) {
        goto LABEL_202;
      }
      uint64_t v115 = *v110;
      size_t v114 = (size_t)v110[1];
      while (1)
      {
        if (v113) {
          uint64_t v116 = (uint64_t ***)(v113 - 24);
        }
        else {
          uint64_t v116 = 0;
        }
        if ((*((unsigned char *)v116 + 23) & 0x10) == 0)
        {
          uint64_t v127 = 0;
          uint64_t v126 = &byte_1CFBCE98E;
          goto LABEL_194;
        }
        uint64_t v117 = ***v116;
        uint64_t v118 = *(void *)(v117 + 152);
        uint64_t v119 = *(unsigned int *)(v117 + 168);
        if (!v119) {
          goto LABEL_192;
        }
        LODWORD(v120) = (v119 - 1) & ((v116 >> 4) ^ (v116 >> 9));
        int v121 = (uint64_t ****)(v118 + 16 * v120);
        uint64_t v122 = *v121;
        if (*v121 != v116) {
          break;
        }
LABEL_193:
        BOOL v125 = v121[1];
        uint64_t v128 = *v125;
        uint64_t v126 = (char *)(v125 + 2);
        uint64_t v127 = v128;
LABEL_194:
        if (v127 == (uint64_t **)v114 && (!v114 || !memcmp(v126, v115, v114)))
        {
          uint64_t v129 = (char *)v153 + 144 * v109;
          unint64_t v130 = *((unsigned int *)v129 + 2);
          if (v130 >= *((unsigned int *)v129 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v129 + 8 * v130) = v116;
          ++*((_DWORD *)v129 + 2);
LABEL_202:
          v110 += 2;
          if (v110 == v111)
          {
            LOBYTE(v43) = v136;
            std::string v41 = (uint64_t **)v137;
            unsigned int v103 = v139;
            goto LABEL_205;
          }
          goto LABEL_180;
        }
        uint64_t v113 = *(void *)(v113 + 8);
        if (v113 == v112) {
          goto LABEL_202;
        }
      }
      int v123 = 1;
      while (v122 != (uint64_t ***)-4096)
      {
        int v124 = v120 + v123++;
        uint64_t v120 = v124 & (v119 - 1);
        uint64_t v122 = *(uint64_t ****)(v118 + 16 * v120);
        if (v122 == v116)
        {
          int v121 = (uint64_t ****)(v118 + 16 * v120);
          goto LABEL_193;
        }
      }
LABEL_192:
      int v121 = (uint64_t ****)(v118 + 16 * v119);
      goto LABEL_193;
    }
  }
LABEL_80:
  if (byte_1EBCDAFE7 >= 0) {
    size_t v49 = byte_1EBCDAFE7 & 0x7F;
  }
  else {
    size_t v49 = qword_1EBCDAFD8;
  }
  if (v49)
  {
    if (byte_1EBCDAFE7 >= 0) {
      uint64_t v50 = &qword_1EBCDAFD0;
    }
    else {
      uint64_t v50 = (uint64_t *)qword_1EBCDAFD0;
    }
    sub_1CC79EE94((uint64_t)&v153, v50, v49, (llvm::AGXIR *)v41);
  }
  if (byte_1EBCDB0CF >= 0) {
    size_t v51 = byte_1EBCDB0CF & 0x7F;
  }
  else {
    size_t v51 = qword_1EBCDB0C0;
  }
  if (v51
    && (byte_1EBCDB0CF >= 0 ? (uint64_t v52 = &qword_1EBCDB0B8) : (uint64_t v52 = (uint64_t *)qword_1EBCDB0B8),
        sub_1CC79ECE8(&v147, v52, v51, (llvm::AGXIR *)v41),
        (uint64_t v53 = (const llvm::MemoryBuffer *)v147) != 0))
  {
    uint64_t v59 = (*(uint64_t (**)(void *))(*(void *)v147 + 16))(v147);
    uint64_t v61 = v60;
    llvm::line_iterator::line_iterator((llvm::line_iterator *)&v153, v53, 1, 35);
    BOOL v54 = (_BYTE)v156 != 0;
    while ((_BYTE)v156)
    {
      uint64_t v62 = (uint64_t ***)sub_1CC79EFCC(v41[14], v158, v159, v59, v61, v157);
      v62[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v62 + 14), **v62, -1, "bisect-helper", 0xDuLL, "no-gisel", 8uLL);
      llvm::line_iterator::advance((uint64_t)&v153);
    }
    (*(void (**)(const llvm::MemoryBuffer *))(*(void *)v53 + 8))(v53);
  }
  else
  {
    BOOL v54 = 0;
  }
  char v10 = v43 | v54;
  return v10 & 1;
}

void sub_1CC79EC00(uint64_t a1, uint64_t a2)
{
  __int16 v7 = 260;
  v6[0] = a2;
  *(void *)&v8.__val_ = llvm::sys::fs::remove((llvm::sys::fs *)v6, (const llvm::Twine *)1);
  v8.__cat_ = v2;
  if (!v8.__val_)
  {
    int v3 = 0;
    uint64_t v4 = std::system_category();
    operator new();
  }
  std::error_code::message(&v5, &v8);
  __int16 v7 = 260;
  v6[0] = &v5;
  llvm::report_fatal_error((llvm *)v6, (const llvm::Twine *)1);
}

void sub_1CC79ECE8(void *a1, void *__src, size_t __len, llvm::AGXIR *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  sub_1CC79F1A4((uint64_t)__p, this);
  if (v22 >= 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v12 = v22 & 0x7F;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  uint64_t v13 = std::string::append(&__dst, (const std::string::value_type *)v11, v12);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __int16 v17 = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  sub_1CD096690((unsigned __int8 *)&__dst, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)__p);
  if (v21)
  {
    uint64_t v15 = __p[0];
    if (LODWORD(__p[0])) {
      uint64_t v15 = 0;
    }
  }
  else
  {
    std::system_category();
    uint64_t v15 = __p[0];
  }
  *a1 = v15;
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
}

void sub_1CC79EE94(uint64_t a1, void *__src, size_t __len, llvm::AGXIR *this)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
    {
LABEL_9:
      p_dst->__r_.__value_.__s.__data_[__len] = 0;
      sub_1CC79F1A4((uint64_t)__p, this);
      if (v16 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      if (v16 >= 0) {
        std::string::size_type v12 = v16 & 0x7F;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)__p[1];
      }
      uint64_t v13 = std::string::append(&__dst, (const std::string::value_type *)v11, v12);
      std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v18 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      sub_1CC79EC00(a1, (uint64_t)v18);
    }
  }
  memmove(p_dst, __src, __len);
  goto LABEL_9;
}

uint64_t sub_1CC79EFCC(uint64_t *a1, uint64_t __s1, size_t __n, uint64_t a4, uint64_t a5, unsigned int a6)
{
  size_t v7 = *((unsigned int *)a1 + 8);
  std::error_code v8 = (unsigned __int8 *)__s1;
  size_t v9 = __n;
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 <= 1) {
      size_t v10 = 1;
    }
    else {
      size_t v10 = v7;
    }
    if (__n < v10) {
      size_t v10 = __n;
    }
    std::error_code v8 = (unsigned __int8 *)__s1;
    if (__n > v7) {
      size_t v9 = v10;
    }
    else {
      size_t v9 = __n;
    }
  }
  uint64_t v11 = *((unsigned int *)a1 + 2);
  if (!v11) {
    goto LABEL_25;
  }
  int v12 = 0;
  if (v9)
  {
    size_t v13 = v9;
    std::string::size_type v14 = v8;
    do
    {
      int v15 = *v14++;
      int v12 = 33 * v12 + v15;
      --v13;
    }
    while (v13);
  }
  uint64_t v16 = *a1;
  uint64_t v17 = *a1 + 8 * v11 + 8;
  int v18 = 1;
  int v19 = v12;
  while (1)
  {
    uint64_t v20 = v19 & (v11 - 1);
    char v21 = *(void **)(v16 + 8 * v20);
    if (v21 != (void *)-8)
    {
      if (!v21) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(v17 + 4 * v20) == v12
        && v9 == *v21
        && (!v9 || !memcmp(v8, (char *)v21 + *((unsigned int *)a1 + 5), v9)))
      {
        break;
      }
    }
    int v19 = v18 + v20;
    ++v18;
  }
  if (v20 == -1
    || (int)v20 == v11
    || (uint64_t result = *(void *)(*(void *)(v16 + 8 * (int)v20) + 8)) == 0
    || *(unsigned char *)(result + 16))
  {
LABEL_25:
    __int16 v36 = 773;
    v35[0] = a4;
    v35[1] = a5;
    v35[2] = (uint64_t)":";
    std::to_string(&v32, a6);
    __int16 v34 = 260;
    uint64_t v33 = &v32;
    sub_1CD3E3950(v35, (uint64_t *)&v33, (uint64_t)v37);
    uint64_t v30 = " Function not found: ";
    __int16 v31 = 259;
    sub_1CD3E3950(v37, (uint64_t *)&v30, (uint64_t)v38);
    __int16 v29 = 261;
    v28[0] = __s1;
    v28[1] = __n;
    sub_1CD3E3950(v38, v28, (uint64_t)v39);
    llvm::report_fatal_error((llvm *)v39, (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CC79F1A4(uint64_t a1, llvm::AGXIR *this)
{
  uint64_t result = llvm::AGXIR::getShaderID(this, this);
  if ((result & 0xFF00000000) != 0)
  {
    return (uint64_t)std::to_string((std::string *)a1, result);
  }
  else
  {
    *(unsigned char *)(a1 + 23) = 7;
    strcpy((char *)a1, "unknown");
  }
  return result;
}

uint64_t sub_1CC79F218(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v4 = a2 + 2;
    int v3 = *a2;
    if (*a2 == a2 + 2)
    {
      uint64_t v6 = a2 + 1;
      uint64_t v5 = *((unsigned int *)a2 + 2);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *a2, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          std::string::size_type v14 = a2;
          memmove(*(void **)a1, v3, 8 * v7);
          uint64_t v8 = v13;
          a2 = v14;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (unsigned char *)*a2 + 8 * v9 - ((unsigned char *)*a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        int v12 = a2;
        free(v11);
        a2 = v12;
        int v3 = *v12;
      }
      *(void *)a1 = v3;
      uint64_t v6 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    _DWORD *v6 = 0;
  }
  return a1;
}

uint64_t sub_1CC79F358()
{
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v2.n128_u64[0] = (unint64_t)"Output file where the biggest shader id seen so far is written";
  v2.n128_u64[1] = 62;
  int v4 = 1;
  sub_1CD63C4C0((uint64_t)&unk_1EBCDAC98, "bisect-helper-shader-maxid-file", &v5, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCDAC98, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"shaderid1[,...]";
  v5.n128_u64[1] = 15;
  v2.n128_u64[0] = (unint64_t)"List of shader IDs to run the bisect pass on. When unset will run on all shaders";
  v2.n128_u64[1] = 80;
  int v3 = 1;
  int v4 = 1;
  int v1 = 1;
  sub_1CD63C5E8((long long *)&v5, &v2, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD63BF54, &qword_1EBCDABC0, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"Decide whether or not the bisecting pass should run on modules without shader ids";
  v5.n128_u64[1] = 81;
  int v4 = 1;
  LOBYTE(v3) = 0;
  v2.n128_u64[0] = (unint64_t)&v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCDA980, "bisect-helper-run-on-unknown-ids", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDA980, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"basefilename";
  v5.n128_u64[1] = 12;
  v2.n128_u64[0] = (unint64_t)"Base filename where the list of basic blocks will be written. This creates several "
                                     "files named <basefilename><#ShaderID>. The file format is \"FuncName:BBName[;BBName...]\"";
  v2.n128_u64[1] = 170;
  int v4 = 1;
  sub_1CD63C7EC((long long *)&v5, (long long *)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDAD80, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"Set this option to make sure all basic blocks have a name. For optimized builds, th"
                                     "is is not uncommon to have blocks missing names, since a lot of thing that this pas"
                                     "s does rely on blocks having names, this option is here to fix the name of these blocks.";
  v5.n128_u64[1] = 254;
  int v4 = 1;
  LOBYTE(v3) = 0;
  v2.n128_u64[0] = (unint64_t)&v3;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCDAA40, "bisect-helper-ensure-bb-names", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDAA40, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"basefilename";
  v5.n128_u64[1] = 12;
  v2.n128_u64[0] = (unint64_t)"Base filename for the files that list the basic blocks that need to be extracted. T"
                                     "his reads several files named <basefilename><#ShaderID>. The file format is \"FuncN"
                                     "ame:BBName[;BBName...]\"";
  v2.n128_u64[1] = 188;
  int v4 = 1;
  sub_1CD63C4C0((uint64_t)&unk_1EBCDAE68, "bisect-helper-run-extract-block", &v5, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &unk_1EBCDAE68, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"basefilename";
  v5.n128_u64[1] = 12;
  v2.n128_u64[0] = (unint64_t)"Base filename where the list of functions will be written. This creates several fil"
                                     "es named <basefilename><#ShaderID>. The file format is \"FuncName\"";
  v2.n128_u64[1] = 148;
  int v4 = 1;
  sub_1CD63C910((long long *)&v5, (long long *)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDAF50, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"basefilename";
  v5.n128_u64[1] = 12;
  v2.n128_u64[0] = (unint64_t)"Base filename for the files that list the functions that need to be tagged with 'no"
                                     "-gisel'. This reads several files named <basefilename><#ShaderID>. The file format is \"FuncName\"";
  v2.n128_u64[1] = 179;
  int v4 = 1;
  sub_1CD63CA34((long long *)&v5, (long long *)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDB038, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"basefilename";
  v5.n128_u64[1] = 12;
  v2.n128_u64[0] = (unint64_t)"Base filename for the files tha list the basic blocks to be split. This reads sever"
                                     "al files named <basefilename><#ShaderID>. The file format is \"FuncName BBName\"";
  v2.n128_u64[1] = 161;
  int v4 = 1;
  sub_1CD63CB58((long long *)&v5, (long long *)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDB120, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"basefilename";
  v5.n128_u64[1] = 12;
  v2.n128_u64[0] = (unint64_t)"Base filename for the files that will contain the list of basic blocks created/cons"
                                     "idered by splitting(\"-bisect-helper-split-bbs-out-file\"). This writes several f"
                                     "iles named <basefilename><#ShaderID>. The file format is \"FuncName BBName\"";
  v2.n128_u64[1] = 238;
  int v4 = 1;
  sub_1CD63CC7C((long long *)&v5, (long long *)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCDB208, &dword_1CB82C000);
  v5.n128_u64[0] = (unint64_t)"Split the each bb listed in \"-bisect-helper-split-bbs-out-file\" after that many instructions";
  v5.n128_u64[1] = 92;
  int v3 = 3;
  int v4 = 1;
  v2.n128_u64[0] = (unint64_t)&v3;
  sub_1CD63CDA0((long long *)&v5, &v4, (int **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCDAB00, &dword_1CB82C000);
}

void sub_1CC79F6CC(uint64_t a1)
{
}

uint64_t sub_1CC79F76C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB2F0;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261E2E8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 168;
  *(void *)(a1 + 160) = 0x800000000;
  *(void *)(a1 + 232) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 240) = 1;
  *(_DWORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB2F8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC79F6CC;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDB2F8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC79F870()
{
}

void sub_1CC79F8AC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261E2E8;
  __n128 v2 = (void *)*((void *)a1 + 19);
  if (v2 != (void *)((char *)a1 + 168)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 16), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 13), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 10), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 7), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);

  llvm::Pass::~Pass(a1);
}

void sub_1CC79F94C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261E2E8;
  __n128 v2 = (void *)*((void *)a1 + 19);
  if (v2 != (void *)((char *)a1 + 168)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 16), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 13), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 10), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 7), 8);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC79FA00()
{
  return "Add bound checks to memory operations";
}

void sub_1CC79FA10(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC79FA64(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = a1;
  uint64_t v758 = *MEMORY[0x1E4F143B8];
  v729 = v731;
  uint64_t v730 = 0x400000000;
  int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v666 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  uint64_t v7 = **a2;
  *(void *)(v2 + 256) = v7 + 1984;
  *(void *)(v2 + 264) = v7 + 1960;
  *(void *)(v2 + 248) = 0;
  *(void *)(v2 + 232) = sub_1CD10A3A4((llvm::Module *)a2);
  *(void *)(v2 + 240) = v8;
  if ((v8 & 0xFF000000000000) != 0)
  {
    for (uint64_t i = (uint64_t **)a2[4]; ; uint64_t i = (uint64_t **)i[1])
    {
      if (i == a2 + 3) {
        goto LABEL_22;
      }
      uint64_t v10 = i ? (uint64_t)(i - 7) : 0;
      if (i && *(unsigned char *)(v10 + 16) == 3) {
        break;
      }
      if (*(unsigned char *)(v10 + 16) || *(void *)(v10 + 72) != v10 + 72 || (*(unsigned char *)(v10 + 34) & 0x80) != 0) {
        goto LABEL_19;
      }
LABEL_21:
      ;
    }
    if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 0) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v666 + 24))(v666);
    if (*(unsigned char *)(v2 + 247)) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 37, 1, 1, 0, 1, 2);
    }
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v654 = (_DWORD *)(v2 + 104);
  v694.n128_u64[0] = (unint64_t)"agx.stack_oob";
  __int16 v696 = 259;
  uint64_t NamedMetadata = (llvm::Module **)llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v694);
  uint64_t v13 = (uint64_t *)(a2 + 3);
  std::string::size_type v14 = a2[4];
  uint64_t v685 = v2;
  uint64_t v655 = (uint64_t *)(a2 + 3);
  if (v14 == (uint64_t *)(a2 + 3)) {
    goto LABEL_107;
  }
  do
  {
    if (NamedMetadata)
    {
      int v15 = v14 - 7;
      if (!v14) {
        int v15 = 0;
      }
      if ((*((_WORD *)v15 + 9) & 0x3FF0) == 0x6B0)
      {
        llvm::Module::eraseNamedMetadata(NamedMetadata[5], (llvm::NamedMDNode *)NamedMetadata);
        uint64_t NamedMetadata = 0;
      }
    }
    std::string::size_type v14 = (uint64_t *)v14[1];
  }
  while (v14 != v13);
  uint64_t v16 = a2[4];
  if (v16 == v13) {
    goto LABEL_107;
  }
  do
  {
    uint64_t v17 = v16 - 7;
    if (!v16) {
      uint64_t v17 = 0;
    }
    int v18 = (uint64_t *)v17[10];
    v683 = v17 + 9;
    if (v18 == v17 + 9) {
      goto LABEL_105;
    }
    while (2)
    {
      int v19 = v18 - 3;
      if (!v18) {
        int v19 = 0;
      }
      uint64_t v20 = v19 + 5;
      for (uint64_t j = (void *)v19[6]; j != v20; uint64_t j = (void *)j[1])
      {
        if (j) {
          uint64_t v22 = (uint64_t)(j - 3);
        }
        else {
          uint64_t v22 = 0;
        }
        int v23 = *(unsigned __int8 *)(v22 + 16);
        uint64_t v24 = (v23 - 33);
        if (v24 <= 0x37)
        {
          if (((1 << (v23 - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v26 = *(void *)(v22 + 64);
            if (!v26 || (*(unsigned char *)(v26 + 20) & 4) == 0 && (*(unsigned char *)(v26 + 17) & 0x10) == 0)
            {
              v694.n128_u32[0] = 7;
              if (sub_1CC5CB59C(v22, (__int32 *)&v694, 1uLL))
              {
                uint64_t v39 = *(void *)(v22 - 32);
                if (!v39
                  || *(unsigned char *)(v39 + 16)
                  || *(void *)(v39 + 24) != *(void *)(v22 + 72)
                  || *(_DWORD *)(v39 + 36) != 7)
                {
                  goto LABEL_65;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 66) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44))
              {
                goto LABEL_65;
              }
            }
          }
          else
          {
            if (((1 << (v23 - 33)) & 0x808001C8000010) != 0) {
              goto LABEL_65;
            }
            if (v24 != 28) {
              goto LABEL_44;
            }
            if ((*(_WORD *)(v22 + 18) & 0x301) != 0) {
              goto LABEL_65;
            }
          }
          int v23 = *(unsigned __int8 *)(v22 + 16);
        }
LABEL_44:
        uint64_t v25 = (v23 - 33);
        if (v25 > 0x37) {
          continue;
        }
        if (((1 << v25) & 0x8000000000041) != 0)
        {
          uint64_t v27 = *(void *)(v22 + 64);
          if (v27 && (*(unsigned char *)(v27 + 17) & 0x30) != 0) {
            continue;
          }
          int v28 = *(_DWORD *)(v22 + 20);
          if (v28 < 0
            && (uint64_t v40 = v22 - 32 * (v28 & 0x7FFFFFF), v43 = *(void *)(v40 - 8), v41 = v40 - 8, (v42 = v43) != 0))
          {
            uint64_t v44 = -v42;
            while (1)
            {
              unsigned int v45 = *(_DWORD *)(*(void *)(v41 + v44) + 8);
              BOOL v83 = v45 > 7;
              int v46 = (1 << v45) & 0x83;
              if (v83 || v46 == 0) {
                break;
              }
              v44 += 16;
              if (!v44) {
                goto LABEL_59;
              }
            }
          }
          else
          {
LABEL_59:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 45) & 1) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44) & 1) != 0)
            {
              continue;
            }
          }
        }
        else if (v25 == 27)
        {
          if ((*(_WORD *)(v22 + 18) & 0x301) == 0) {
            continue;
          }
        }
        else if (((1 << v25) & 0x808001D0000010) == 0)
        {
          continue;
        }
LABEL_65:
        uint64_t v29 = sub_1CC7A57E4(v22);
        if (v29 == 0xFFFFFFFFLL)
        {
          int v30 = sub_1CBFB3AB0(v22);
          if (v30) {
            uint64_t v31 = v22;
          }
          else {
            uint64_t v31 = 0;
          }
          if (!j || !v30) {
            goto LABEL_85;
          }
          unsigned int v32 = *(_DWORD *)(*(void *)(v31 - 32) + 36) - 194;
          if (v32 > 3 || v32 == 1)
          {
            uint64_t v35 = *(void *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF));
          }
          else
          {
            __int16 v34 = (void *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF));
            if (*(_DWORD *)(*(void *)*v34 + 8) < 0x100u) {
              goto LABEL_109;
            }
            uint64_t v35 = v34[4];
            if (!v35) {
              goto LABEL_85;
            }
          }
          if (*(_DWORD *)(*(void *)v35 + 8) < 0x100u) {
            goto LABEL_109;
          }
LABEL_85:
          if (*(unsigned char *)(v22 + 16) != 84) {
            goto LABEL_109;
          }
          uint64_t v38 = *(void *)(v22 - 32);
          if (!v38
            || *(unsigned char *)(v38 + 16)
            || *(void *)(v38 + 24) != *(void *)(v22 + 72)
            || (*(_DWORD *)(v38 + 32) & 0x2000) == 0)
          {
            goto LABEL_109;
          }
          continue;
        }
        int v36 = *(_DWORD *)(v22 + 20);
        if ((v36 & 0x40000000) != 0) {
          uint64_t v37 = *(void *)(v22 - 8);
        }
        else {
          uint64_t v37 = v22 - 32 * (v36 & 0x7FFFFFF);
        }
        if (*(_DWORD *)(**(void **)(v37 + 32 * v29) + 8) < 0x100u)
        {
LABEL_109:
          llvm::Module::getOrInsertNamedMetadata(a2, "agx.has_stack_access", 0x14uLL);
          uint64_t v2 = v685;
          uint64_t v13 = (uint64_t *)(a2 + 3);
          goto LABEL_110;
        }
      }
      int v18 = (uint64_t *)v18[1];
      if (v18 != v683) {
        continue;
      }
      break;
    }
LABEL_105:
    uint64_t v16 = (uint64_t *)v16[1];
  }
  while (v16 != v655);
  uint64_t v2 = v685;
  uint64_t v13 = (uint64_t *)(a2 + 3);
LABEL_107:
  if (NamedMetadata) {
    llvm::Module::eraseNamedMetadata(NamedMetadata[5], (llvm::NamedMDNode *)NamedMetadata);
  }
LABEL_110:
  std::string::size_type v651 = (char *)(v2 + 80);
  int v48 = *(_DWORD *)(v2 + 236);
  std::string::size_type v653 = (_DWORD *)(v2 + 56);
  if (v48)
  {
    if (v48 == 1)
    {
      if (*(unsigned char *)(v2 + 246)) {
        goto LABEL_113;
      }
      uint64_t v690 = 0;
      uint64_t v691 = 0;
      unsigned int v692 = 0;
LABEL_383:
      v727[0] = &unk_1F261E388;
      v727[1] = &v729;
      uint64_t v728 = v727;
      sub_1CC7A5654((llvm::Module *)a2, (uint64_t)v727);
      if (v728 == v727)
      {
        (*(void (**)(void *))(v727[0] + 32))(v727);
      }
      else if (v728)
      {
        (*(void (**)(void))(*v728 + 40))();
      }
LABEL_387:
      if ((*(unsigned char *)(v2 + 236) & 4) != 0)
      {
        uint64_t v195 = a2[4];
        if (v195 != v13)
        {
          unint64_t v196 = (llvm::DataLayout *)(a2 + 34);
          do
          {
            uint64_t v197 = v195 - 7;
            if (v195)
            {
              if (*((unsigned char *)v195 - 40) == 3)
              {
                if ((*((_DWORD *)v195 - 9) & 0x7FFFFFF) != 0) {
                  goto LABEL_399;
                }
                goto LABEL_394;
              }
            }
            else
            {
              uint64_t v197 = 0;
            }
            if (*((unsigned char *)v197 + 16) || (uint64_t *)v197[9] != v197 + 9 || (*((unsigned char *)v197 + 34) & 0x80) != 0)
            {
LABEL_399:
              uint64_t v198 = v197[10];
              if (v198) {
                uint64_t v199 = v198 - 24;
              }
              else {
                uint64_t v199 = 0;
              }
              uint64_t v200 = v199 + 40;
              uint64_t v201 = *(void *)(v199 + 48);
              while (v201 != v200)
              {
                uint64_t v202 = (unsigned __int8 *)(v201 - 24);
                if (!v201) {
                  uint64_t v202 = 0;
                }
                int v203 = v202[16];
                if (v203 == 59) {
                  int v204 = (llvm::AllocaInst *)v202;
                }
                else {
                  int v204 = 0;
                }
                if (v201 && v203 == 59)
                {
                  unsigned __int16 v205 = (llvm::Type *)*((void *)v204 + 8);
                  uint64_t v206 = sub_1CB83544C((uint64_t)v196, (uint64_t)v205);
                  BOOL v208 = v207 == 1;
                  char Alignment = llvm::DataLayout::getAlignment(v196, v205, 1);
                  if (v208) {
                  unint64_t v211 = ((1 << Alignment) + ((unint64_t)(v206 + 7) >> 3) - 1) & -(1 << Alignment);
                  }
                  if (llvm::AllocaInst::isArrayAllocation(v204))
                  {
                    uint64_t v212 = *((void *)v204 - 4);
                    if (v212) {
                      BOOL v213 = *(unsigned char *)(v212 + 16) == 16;
                    }
                    else {
                      BOOL v213 = 0;
                    }
                    if (!v213) {
                      goto LABEL_423;
                    }
                    uint64_t v214 = (void *)(v212 + 24);
                    if (*(_DWORD *)(v212 + 32) >= 0x41u) {
                      uint64_t v214 = (void *)*v214;
                    }
                    v211 *= *v214;
                  }
                  v694.n128_u64[0] = (unint64_t)v204;
                  v694.n128_u64[1] = v211;
                  v695[0] = 32;
                  sub_1CBC0D590((uint64_t)&v729, &v694);
                }
LABEL_423:
                uint64_t v201 = *(void *)(v201 + 8);
                continue;
              }
            }
LABEL_394:
            uint64_t v195 = (uint64_t *)v195[1];
          }
          while (v195 != v655);
        }
      }
      if (!v730)
      {
        char v49 = 0;
        uint64_t v2 = v685;
LABEL_1125:
        MEMORY[0x1D25D9CD0](v690, 8);
        goto LABEL_1126;
      }
      char v671 = 0;
      int v215 = (llvm::DataLayout *)(a2 + 34);
      uint64_t v216 = *a2;
      Impl = v712;
      uint64_t v711 = 0x200000000;
      unsigned int v716 = v216;
      v717 = &v725;
      unint64_t v718 = &v726;
      uint64_t v719 = 0;
      int v720 = 0;
      __int16 v721 = 512;
      char v722 = 7;
      uint64_t v715 = 0;
      uint64_t v714 = 0;
      uint64_t v724 = 0;
      uint64_t v723 = 0;
      v725 = &unk_1F2616E88;
      unint64_t v217 = (uint64_t *)v729;
      __int16 v667 = (char *)v729 + 24 * v730;
      unint64_t v726 = &unk_1F2617008;
      while (1)
      {
        uint64_t v218 = *v217;
        uint64_t v682 = (uint64_t)v217;
        unint64_t v676 = v217[1];
        v688[0] = 0;
        v688[1] = 0;
        int v689 = 0;
        v694.n128_u64[0] = (unint64_t)v695;
        v694.n128_u64[1] = 0x800000000;
        unint64_t v735 = &v737;
        unint64_t v736 = (void *)0x400000000;
        uint64_t v219 = *(void *)(v218 + 8);
        if (v219)
        {
          unsigned int v220 = 0;
          do
          {
            if (v220 >= HIDWORD(v736)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v735 + v220) = v219;
            unsigned int v220 = v736 + 1;
            LODWORD(v736) = v736 + 1;
            uint64_t v219 = *(void *)(v219 + 8);
          }
          while (v219);
          if (v220)
          {
            while (1)
            {
              unsigned int v221 = (void *)*((void *)v735 + --v220);
              LODWORD(v736) = v220;
              uint64_t v222 = v221[3];
              unsigned int v223 = *(unsigned __int8 *)(v222 + 16);
              if (v222) {
                BOOL v224 = v223 >= 0x1C;
              }
              else {
                BOOL v224 = 0;
              }
              if (v224) {
                goto LABEL_449;
              }
              BOOL v226 = v223 > 0x1B || v223 == 5;
              if (v222) {
                BOOL v227 = !v226;
              }
              else {
                BOOL v227 = 1;
              }
              if (v227) {
                goto LABEL_479;
              }
              if (v223 > 0x1B) {
LABEL_449:
              }
                unsigned int v228 = v223 - 28;
              else {
                unsigned int v228 = *(unsigned __int16 *)(v222 + 18);
              }
              if (v228 > 0x38) {
                goto LABEL_479;
              }
              if (((1 << v228) & 0x100003300000000) == 0)
              {
                if (((1 << v228) & 0x2000400000000) != 0)
                {
                  while (1)
                  {
                    uint64_t v222 = *(void *)(v222 + 8);
                    if (!v222) {
                      break;
                    }
                    if (v220 >= HIDWORD(v736)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v735 + v220) = v222;
                    unsigned int v220 = v736 + 1;
                    LODWORD(v736) = v736 + 1;
                  }
                }
                goto LABEL_479;
              }
              uint64_t v229 = sub_1CC7A57E4(v221[3]);
              if (v229 == 0xFFFFFFFFLL) {
                goto LABEL_479;
              }
              int v230 = *(_DWORD *)(v222 + 20);
              if ((v230 & 0x40000000) != 0) {
                uint64_t v231 = *(void *)(v222 - 8);
              }
              else {
                uint64_t v231 = v222 - 32 * (v230 & 0x7FFFFFF);
              }
              uint64_t v232 = *(void *)(v231 + 32 * v229);
              if ((*(_DWORD *)(*(void *)v232 + 8) & 0xFFFFFF00) == 0x4000)
              {
                if (!HIDWORD(v229))
                {
                  while (1)
                  {
                    uint64_t v222 = *(void *)(v222 + 8);
                    if (!v222) {
                      break;
                    }
                    if (v220 >= HIDWORD(v736)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v735 + v220) = v222;
                    unsigned int v220 = v736 + 1;
                    LODWORD(v736) = v736 + 1;
                  }
                }
                goto LABEL_479;
              }
              BOOL v233 = HIDWORD(v229) == 1 && *(unsigned char *)(v685 + 244) == 0;
              if (v233
                || (HIDWORD(v229) == 2 ? (BOOL v234 = *(unsigned char *)(v685 + 245) == 0) : (BOOL v234 = 0),
                    v234 || HIDWORD(v229) && v232 != *v221))
              {
LABEL_479:
                if (!v220) {
                  break;
                }
              }
              else
              {
                if (v694.n128_u32[2] >= (unint64_t)v694.n128_u32[3]) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v235 = (void *)(v694.n128_u64[0] + 16 * v694.n128_u32[2]);
                void *v235 = v218;
                v235[1] = v222;
                ++v694.n128_u32[2];
                unsigned int v220 = v736;
                if (!v736) {
                  break;
                }
              }
            }
          }
        }
        if (v735 != &v737) {
          free(v735);
        }
        uint64_t v236 = (void *)v694.n128_u64[0];
        unint64_t v674 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
        if (v694.n128_u32[2]) {
          break;
        }
LABEL_1118:
        if (v236 != v695) {
          free(v236);
        }
        MEMORY[0x1D25D9CD0](v688[0], 8);
        unint64_t v217 = (uint64_t *)(v682 + 24);
        if ((char *)(v682 + 24) == v667)
        {
          uint64_t v2 = v685;
          sub_1CC7A7FD4((llvm::Module *)a2, *(llvm::MDNode ***)(v685 + 152), *(unsigned int *)(v685 + 160));
          if (Impl != v712) {
            free(Impl);
          }
          char v49 = v671;
          goto LABEL_1125;
        }
      }
      while (1)
      {
        uint64_t v460 = v236[1];
        char v461 = *(const char **)(*(void *)(v460 + 40) + 56);
        int v687 = (char *)v461;
        v684 = v236;
        if (*(unsigned char *)(v685 + 241))
        {
          uint64_t v462 = 0;
        }
        else
        {
          unsigned int v678 = (unsigned __int8 *)*v236;
          int v463 = *(unsigned __int8 *)(v460 + 16);
          if (v463 == 61)
          {
            uint64_t v464 = 1 << ((unint64_t)*(unsigned __int16 *)(v460 + 18) >> 1);
            char v465 = (llvm::Value **)(v460 - 32);
          }
          else if (v463 == 60)
          {
            uint64_t v464 = 1 << ((unint64_t)*(unsigned __int16 *)(v460 + 18) >> 1);
            char v465 = (llvm::Value **)(v460 - 32);
          }
          else
          {
            unsigned int v466 = sub_1CC7A57E4(v460);
            int v467 = *(_DWORD *)(v460 + 20);
            uint64_t v468 = (v467 & 0x40000000) != 0 ? *(void *)(v460 - 8) : v460 - 32 * (v467 & 0x7FFFFFF);
            char v465 = (llvm::Value **)(v468 + 32 * v466);
            LODWORD(v464) = 1;
          }
          unsigned int v469 = *v465;
          unint64_t v736 = 0;
          int v470 = llvm::Value::stripPointerCasts(v469);
          char v471 = v470;
          int v472 = *((unsigned __int8 *)v470 + 16);
          if (v472 == 62 || v472 == 5 && *((_WORD *)v470 + 9) == 34)
          {
            unint64_t v735 = v470;
            llvm::Value::stripPointerCasts(v469);
            uint64_t v473 = (llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(v460 + 40) + 56) + 40) + 272);
            uint64_t v474 = 32;
            if (*((unsigned char *)v471 + 16) == 62) {
              uint64_t v474 = 72;
            }
            unsigned int v475 = *(llvm::Type **)((char *)v471 + v474);
            uint64_t v476 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v460 + 40) + 56) + 40) + 272, (uint64_t)v475);
            BOOL v478 = v477 == 1;
            char v480 = llvm::DataLayout::getAlignment(v473, v475, 1);
            if (v478) {
            unint64_t v481 = ((1 << v480) + 0xFFFFFFFFLL + ((unint64_t)(v476 + 7) >> 3)) & -(1 << v480);
            }
            if (v464 < (((1 << v480) - 1 + ((unint64_t)(v476 + 7) >> 3)) & -(1 << v480))) {
              LODWORD(v481) = v464;
            }
            if (v481) {
              uint64_t v482 = (v481 & (v481 - 1)) != 0 ? 1 : v481;
            }
            else {
              uint64_t v482 = 1;
            }
            do
            {
              int v483 = *((_DWORD *)v735 + 5);
              if ((v483 & 0x40000000) != 0)
              {
                uint64_t v343 = (unsigned __int8 *)**((void **)v735 - 1);
                uint64_t v489 = 24;
                if (*((unsigned char *)v735 + 16) == 62) {
                  uint64_t v489 = 64;
                }
                uint64_t v490 = *(void *)((char *)v735 + v489);
                uint64_t v486 = (llvm::Value *)(*((void *)v735 - 1) + 32);
                v753 = v486;
                uint64_t v754 = v490 | 4;
                uint64_t v485 = (unsigned __int8 **)*((void *)v735 - 1);
                uint64_t v484 = v483 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v484 = v483 & 0x7FFFFFF;
                uint64_t v485 = (unsigned __int8 **)((char *)v735 - 32 * v484);
                uint64_t v486 = (llvm::Value *)(v485 + 4);
                uint64_t v343 = *v485;
                uint64_t v487 = 24;
                if (*((unsigned char *)v735 + 16) == 62) {
                  uint64_t v487 = 64;
                }
                uint64_t v488 = *(void *)((char *)v735 + v487) | 4;
                v753 = (llvm::Value *)(v485 + 4);
                uint64_t v754 = v488;
              }
              uint64_t v491 = (llvm::Value *)&v485[4 * v484];
              if (v486 != v491)
              {
                while (1)
                {
                  unsigned int v492 = (llvm::Type *)(v754 & 0xFFFFFFFFFFFFFFF8);
                  if ((v754 & 4) != 0 || !v492)
                  {
                    if ((v754 & 4) == 0 || !v492)
                    {
                      AggregateElement = *(llvm::Constant **)v486;
                      int v498 = *(unsigned __int8 *)(*(void *)v486 + 16);
                      if (AggregateElement) {
                        BOOL v499 = v498 == 16;
                      }
                      else {
                        BOOL v499 = 0;
                      }
                      if (!v499) {
                        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
                      }
                      uint64_t v502 = (unsigned int *)*((void *)AggregateElement + 3);
                      uint64_t v500 = (unsigned int *)((char *)AggregateElement + 24);
                      uint64_t v501 = v502;
                      if (v500[2] < 0x41) {
                        uint64_t v501 = v500;
                      }
                      unsigned int v492 = *(llvm::Type **)(*((void *)v492 + 2) + 8 * *v501);
                    }
                    uint64_t v503 = sub_1CB83544C((uint64_t)v215, (uint64_t)v492);
                    BOOL v505 = v504 == 1;
                    char v507 = llvm::DataLayout::getAlignment(v215, v492, 1);
                    if (v505) {
                    unint64_t v496 = ((1 << v507) + ((unint64_t)(v503 + 7) >> 3) - 1) & -(1 << v507);
                    }
                  }
                  else
                  {
                    uint64_t v493 = *(llvm::Constant **)v486;
                    int v494 = (unsigned int *)(*(void *)v486 + 24);
                    if (*((_DWORD *)v493 + 8) >= 0x41u) {
                      int v494 = *(unsigned int **)v494;
                    }
                    uint64_t v495 = *v494;
                    unint64_t v496 = *((void *)llvm::DataLayout::getStructLayout(v215, (llvm::StructType *)(v754 & 0xFFFFFFFFFFFFFFF8))+ v495+ 2);
                  }
                  if (v496 % v482) {
                    break;
                  }
                  sub_1CB8460E4((uint64_t)&v753);
                  uint64_t v486 = v753;
                  if (v753 == v491) {
                    goto LABEL_898;
                  }
                }
                uint64_t v482 = 1;
              }
LABEL_898:
              ;
            }
            while ((sub_1CC7A84A8((llvm::Value **)&v735) & 1) != 0);
          }
          else
          {
            uint64_t v343 = (unsigned __int8 *)llvm::Value::stripPointerCasts(v469);
            uint64_t v482 = 0;
          }
          int v508 = v343[16];
          char v509 = v508 - 59;
          if ((v508 - 59) > 1) {
            goto LABEL_911;
          }
          if (v508 == 60) {
            char v509 = *((void *)v343 - 4) == (void)v678;
          }
          BOOL v510 = v508 == 60;
          char v511 = v508 == 60 ? v509 : v343 == v678;
          if (v511)
          {
            if (!v510) {
              uint64_t v343 = v678;
            }
            uint64_t v462 = v482;
            BOOL v512 = v343 != 0;
            if (v343 && !v482) {
              goto LABEL_1116;
            }
          }
          else
          {
LABEL_911:
            uint64_t v482 = 0;
            BOOL v512 = 0;
            uint64_t v343 = 0;
            uint64_t v462 = 0;
          }
          if (*(unsigned char *)(v685 + 241))
          {
            uint64_t v460 = v684[1];
          }
          else
          {
            char v513 = !v512;
            uint64_t v460 = v684[1];
            if (!*(_DWORD *)(v682 + 20)) {
              char v513 = 1;
            }
            if ((v513 & 1) == 0)
            {
              unsigned int v514 = sub_1CC7A57E4(v684[1]);
              int v515 = *(_DWORD *)(v460 + 20);
              if ((v515 & 0x40000000) != 0) {
                uint64_t v516 = *(void *)(v460 - 8);
              }
              else {
                uint64_t v516 = v460 - 32 * (v515 & 0x7FFFFFF);
              }
              uint64_t v600 = *(llvm::Value **)(v516 + 32 * v514);
              v686[1] = 0;
              int v238 = llvm::Value::stripPointerCasts(v600);
              int v601 = *((unsigned __int8 *)v238 + 16);
              uint64_t v680 = v462;
              if (v601 == 62)
              {
                uint64_t v237 = v684;
              }
              else
              {
                uint64_t v237 = v684;
                if (v601 == 5)
                {
                  if (*((_WORD *)v238 + 9) != 34) {
                    int v238 = 0;
                  }
                }
                else
                {
                  int v238 = 0;
                }
              }
              v686[0] = v238;
              int v239 = sub_1CC7A5930((uint64_t **)v237[1], (uint64_t)v686, a2, v482, *(unsigned __int8 *)(v685 + 242));
              size_t v670 = (size_t)v600;
              unsigned int v240 = (llvm::Type *)(*(_DWORD *)(*(void *)v600 + 8) >> 8);
              unsigned int v241 = (llvm::PointerType *)llvm::IntegerType::get((llvm::IntegerType *)*a2, (llvm::LLVMContext *)(8 * v482));
              unint64_t v242 = llvm::PointerType::get(v241, v240);
              int v243 = (llvm::PointerType *)llvm::IntegerType::get((llvm::IntegerType *)*a2, (llvm::LLVMContext *)(8 * v482));
              unint64_t v244 = llvm::PointerType::get(v243, (llvm::Type *)(*(_DWORD *)(v242 + 8) >> 8));
              uint64_t v245 = ((uint64_t (*)(void))loc_1CC7A6D24)(v237[1]) / v482;
              if (v239[16] == 16 && v239)
              {
                if (!*(unsigned char *)(v685 + 240) && (*(_DWORD *)(v242 + 8) & 0xFFFFFF00) == 0x200) {
                  goto LABEL_1116;
                }
                if (v676 != -1)
                {
                  BOOL v246 = v239 + 24;
                  if (*((_DWORD *)v239 + 8) >= 0x41u) {
                    BOOL v246 = (void *)*v246;
                  }
                  if ((*v246 + (unint64_t)v245) * v680 <= v676) {
                    goto LABEL_1116;
                  }
                }
              }
              v672 = sub_1CC7A6EE8(v685, (uint64_t)v461, v682, (uint64_t)&Impl);
              uint64_t v247 = v684[1];
              uint64_t v714 = *(void *)(v247 + 40);
              uint64_t v715 = v247 + 24;
              unsigned int v248 = *(llvm::Value **)(v247 + 48);
              v753 = v248;
              if (v248)
              {
                llvm::MetadataTracking::track((uint64_t)&v753, (unsigned __int8 *)v248, 2);
                uint64_t v249 = v753;
              }
              else
              {
                uint64_t v249 = 0;
              }
              sub_1CB8461A4((uint64_t)&Impl, 0, (uint64_t)v249);
              if (v753)
              {
                int v389 = *(unsigned __int8 *)v753;
                if ((v389 - 4) > 0x1E)
                {
                  if ((v389 - 3) >= 0xFFFFFFFE) {
                    int v406 = v753;
                  }
                  else {
                    int v406 = 0;
                  }
                  if ((v389 - 3) < 0xFFFFFFFE)
                  {
                    if (v389 == 3) {
                      *((void *)v753 + 1) = 0;
                    }
                    goto LABEL_502;
                  }
                  unint64_t v391 = (unint64_t)v406 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v753 + 1) & 0x7F) != 2 && !*((_DWORD *)v753 + 3)) {
                    goto LABEL_502;
                  }
                  uint64_t v390 = *((void *)v753 + 2);
                  if ((v390 & 4) == 0) {
                    goto LABEL_502;
                  }
                  unint64_t v391 = v390 & 0xFFFFFFFFFFFFFFF8;
                  if (!v391) {
                    goto LABEL_502;
                  }
                }
                unint64_t v735 = &v753;
                sub_1CC5FA668(v391 + 16, &v735);
              }
LABEL_502:
              LOWORD(v757) = 257;
              unsigned int v250 = (unsigned __int8 *)v670;
              unint64_t v664 = v244;
              if (*(void *)v670 != v244)
              {
                if (*(unsigned __int8 *)(v670 + 16) <= 0x14u)
                {
                  unsigned int v250 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, size_t, unint64_t))*v717
                                             + 28))(v717, 49, v670, v244);
                  if (v250) {
                    BOOL v296 = v250[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v296 = 0;
                  }
                  if (v296)
                  {
                    (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v250, &v753, v714, v715);
                    if (v711)
                    {
                      uint64_t v456 = (llvm::MDNode **)Impl;
                      unsigned int v457 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v250, *(_DWORD *)v456, v456[1]);
                        v456 += 2;
                      }
                      while (v456 != v457);
                    }
                  }
                }
                else
                {
                  v739[0] = 257;
                  unsigned int v250 = (unsigned __int8 *)llvm::CastInst::Create(49, v670, v244, (const char **)&v735, 0);
                  (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v250, &v753, v714, v715);
                  if (v711)
                  {
                    uint64_t v251 = (llvm::MDNode **)Impl;
                    uint64_t v252 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v250, *(_DWORD *)v251, v251[1]);
                      v251 += 2;
                    }
                    while (v251 != v252);
                  }
                }
              }
              BOOL v297 = (uint64_t *)v687;
              uint64_t v298 = v684[1];
              uint64_t v299 = *(unsigned __int8 *)(v298 + 16) - 33;
              if (v299 <= 0x37)
              {
                if (((1 << (*(unsigned char *)(v298 + 16) - 33)) & 0x8000000000041) == 0)
                {
                  if (v299 == 27) {
                    int v300 = (*(_WORD *)(v298 + 18) & 0x301) != 0;
                  }
                  else {
                    int v300 = ((1 << (*(unsigned char *)(v298 + 16) - 33)) & 0x808001D0000010) != 0;
                  }
                  goto LABEL_608;
                }
                uint64_t v324 = *(void *)(v298 + 64);
                if (!v324 || (*(unsigned char *)(v324 + 17) & 0x30) == 0)
                {
                  int v325 = *(_DWORD *)(v298 + 20);
                  if (v325 < 0)
                  {
                    uint64_t v449 = v298 - 32 * (v325 & 0x7FFFFFF);
                    uint64_t v452 = *(void *)(v449 - 8);
                    uint64_t v450 = v449 - 8;
                    uint64_t v451 = v452;
                    if (v452)
                    {
                      uint64_t v453 = -v451;
                      while (1)
                      {
                        unsigned int v454 = *(_DWORD *)(*(void *)(v450 + v453) + 8);
                        if (v454 >= 2 && v454 != 7) {
                          break;
                        }
                        v453 += 16;
                        if (!v453) {
                          goto LABEL_605;
                        }
                      }
                      int v300 = 1;
LABEL_608:
                      unint64_t v735 = *(void **)v682;
                      unint64_t v736 = v297;
                      LODWORD(v737) = v482;
                      v753 = 0;
                      if (sub_1CD63D028(*(void *)(v685 + 80), *(_DWORD *)(v685 + 96), (uint64_t)&v735, &v753)&& v753 != (llvm::Value *)(*(void *)(v685 + 80) + 32 * *(unsigned int *)(v685 + 96)))
                      {
                        __int16 v327 = v250;
                        int v328 = (llvm::Instruction *)*((void *)v753 + 3);
                        uint64_t v329 = v680;
LABEL_611:
                        uint64_t v659 = v328;
                        if (v482 < 2)
                        {
                          unint64_t v334 = (llvm::Value *)v327;
                        }
                        else
                        {
                          uint64_t v330 = *(llvm::ConstantInt **)(*v716 + 1960);
                          unsigned int v331 = *(_DWORD *)(*v716 + 1968);
                          LODWORD(v736) = v331 >> 8;
                          if (v331 >> 8 > 0x40) {
                            operator new[]();
                          }
                          if (v331 <= 0xFF) {
                            unint64_t v332 = 0;
                          }
                          else {
                            unint64_t v332 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v331) + 63);
                          }
                          unint64_t v735 = (void *)(v332 & v329);
                          int v333 = llvm::ConstantInt::get(v330, (llvm::LLVMContext *)&v735, v326);
                          unint64_t v334 = (llvm::Value *)v327;
                          if (v736 >= 0x41 && v735) {
                            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
                          }
                          v739[0] = 257;
                          v672 = sub_1CC57DA50((uint64_t)&Impl, (uint64_t)v672, (uint64_t)v333, (uint64_t)&v735, 0);
                        }
                        int v335 = *(llvm::ConstantInt **)(*v716 + 1960);
                        unsigned int v336 = *(_DWORD *)(*v716 + 1968);
                        LODWORD(v736) = v336 >> 8;
                        if (v336 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v336 <= 0xFF) {
                          unint64_t v337 = 0;
                        }
                        else {
                          unint64_t v337 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v336) + 63);
                        }
                        unint64_t v735 = (void *)(v337 & v245);
                        __int16 v338 = llvm::ConstantInt::get(v335, (llvm::LLVMContext *)&v735, v326);
                        if (v736 >= 0x41 && v735) {
                          MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
                        }
                        v739[0] = 257;
                        unint64_t v339 = sub_1CB84494C((uint64_t)&Impl, (uint64_t)v672, (uint64_t)v338, (uint64_t)&v735, 0, 0);
                        if (*(_DWORD *)(v685 + 232) != -1)
                        {
                          uint64_t v363 = sub_1CC7A75DC(v685, a2);
                          uint64_t v364 = *(llvm::Type **)(v363 + 24);
                          LOWORD(v757) = 257;
                          char v365 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v714 + 56) + 40) + 272), v364, 1);
                          unsigned int v366 = operator new(0x60uLL);
                          v366[13] = v366[13] & 0x38000000 | 1;
                          *(void *)unsigned int v366 = 0;
                          *((void *)v366 + 1) = 0;
                          *((void *)v366 + 2) = 0;
                          *((void *)v366 + 3) = v366 + 8;
                          v739[0] = 257;
                          unsigned int v367 = (llvm::Instruction *)(v366 + 8);
                          llvm::LoadInst::LoadInst((llvm::Value *)(v366 + 8), (uint64_t)v364, v363, (const char **)&v735, 0, v365, 0);
                          (*((void (**)(void **, llvm::Instruction *, llvm::Value **, uint64_t, uint64_t))*v718
                           + 2))(v718, v367, &v753, v714, v715);
                          if (v711)
                          {
                            uint64_t v408 = (llvm::MDNode **)Impl;
                            uint64_t v409 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                            do
                            {
                              llvm::Instruction::setMetadata(v367, *(_DWORD *)v408, v408[1]);
                              v408 += 2;
                            }
                            while (v408 != v409);
                          }
                          uint64_t v369 = *v716;
                          uint64_t v370 = *(int *)(v682 + 16);
                          uint64_t v371 = *(llvm::ConstantInt **)(*v716 + 1984);
                          unsigned int v372 = *(_DWORD *)(*v716 + 1992);
                          LODWORD(v736) = v372 >> 8;
                          if (v372 >> 8 > 0x40) {
                            operator new[]();
                          }
                          if (v372 <= 0xFF) {
                            unint64_t v373 = 0;
                          }
                          else {
                            unint64_t v373 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v372) + 63);
                          }
                          unint64_t v735 = (void *)(v373 & v370);
                          unint64_t v374 = (const char *)llvm::ConstantInt::get(v371, (llvm::LLVMContext *)&v735, v368);
                          if (v736 >= 0x41 && v735) {
                            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
                          }
                          v739[0] = 257;
                          uint64_t v677 = sub_1CB930F7C((uint64_t *)&Impl, v369 + 1960, (uint64_t *)v367, v374, (uint64_t)&v735);
                          v739[0] = 257;
                          unint64_t v673 = sub_1CB845F20((uint64_t)&Impl, 37, v239, (uint64_t)v339, (uint64_t)&v735);
                          int v376 = *(llvm::ConstantInt **)(*v716 + 1960);
                          unsigned int v377 = *(_DWORD *)(*v716 + 1968);
                          LODWORD(v736) = v377 >> 8;
                          if (v377 >> 8 >= 0x41) {
                            operator new[]();
                          }
                          unint64_t v735 = 0;
                          unint64_t v379 = (llvm::Value *)llvm::ConstantInt::get(v376, (llvm::LLVMContext *)&v735, v375);
                          if (v736 >= 0x41 && v735) {
                            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
                          }
                          unsigned int v380 = *(llvm::ConstantInt **)(*v716 + 1960);
                          unsigned int v381 = *(_DWORD *)(*v716 + 1968);
                          LODWORD(v736) = v381 >> 8;
                          if (v381 >> 8 > 0x40) {
                            operator new[]();
                          }
                          if (v381 <= 0xFF) {
                            LOBYTE(v382) = 0;
                          }
                          else {
                            unint64_t v382 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v381) + 63);
                          }
                          unint64_t v735 = (void *)(v382 & 1);
                          int v383 = (llvm::Value *)llvm::ConstantInt::get(v380, (llvm::LLVMContext *)&v735, v378);
                          if (v736 >= 0x41 && v735) {
                            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
                          }
                          v739[0] = 257;
                          Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&Impl, v673, v379, v383, (const llvm::Twine *)&v735, 0);
                          v650 &= 0xFFFFFFFFFFFF0000;
                          sub_1CD5097F8((uint64_t *)&Impl, 1, (uint64_t)v677, Select, 0, 2, 1);
                          unint64_t v244 = v664;
                        }
                        uint64_t v693 = *(void *)v334;
                        uint64_t Declaration = llvm::Intrinsic::getDeclaration(a2, 1267, (uint64_t)&v693, 1);
                        uint64_t v341 = (uint64_t **)Declaration;
                        if (Declaration) {
                          int v342 = *(uint64_t ***)(Declaration + 24);
                        }
                        else {
                          int v342 = 0;
                        }
                        v753 = v334;
                        __int16 v734 = 257;
                        if (*(void *)v343 != v244)
                        {
                          if (v343[16] <= 0x14u)
                          {
                            uint64_t v346 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v717
                                    + 28))(v717, 49, v343, v244);
                            uint64_t v343 = (unsigned __int8 *)v346;
                            if (v346)
                            {
                              if (*(unsigned __int8 *)(v346 + 16) >= 0x1Cu)
                              {
                                (*((void (**)(void **, uint64_t, unint64_t *, uint64_t, uint64_t))*v718
                                 + 2))(v718, v346, &v732, v714, v715);
                                if (v711)
                                {
                                  uint64_t v445 = (llvm::MDNode **)Impl;
                                  int v446 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                                  do
                                  {
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v343, *(_DWORD *)v445, v445[1]);
                                    v445 += 2;
                                  }
                                  while (v445 != v446);
                                }
                              }
                            }
                          }
                          else
                          {
                            v739[0] = 257;
                            uint64_t v343 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v343, v244, (const char **)&v735, 0);
                            (*((void (**)(void **, unsigned __int8 *, unint64_t *, uint64_t, uint64_t))*v718
                             + 2))(v718, v343, &v732, v714, v715);
                            if (v711)
                            {
                              unsigned int v344 = (llvm::MDNode **)Impl;
                              __int16 v345 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v343, *(_DWORD *)v344, v344[1]);
                                v344 += 2;
                              }
                              while (v344 != v345);
                            }
                          }
                        }
                        uint64_t v754 = (uint64_t)v343;
                        int v755 = v239;
                        v756 = v339;
                        uint64_t v757 = v659;
                        v739[0] = 257;
                        uint64_t v347 = sub_1CB845BAC((uint64_t *)&Impl, v342, v341, (uint64_t *)&v753, 5, (uint64_t)&v735, 0);
                        long long v348 = (llvm::Value *)v347;
                        uint64_t v349 = *(void *)v670;
                        if (*(void *)v347 != *(void *)v670)
                        {
                          LOWORD(v757) = 257;
                          if (*(unsigned __int8 *)(v347 + 16) <= 0x14u)
                          {
                            long long v348 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v717
                                                   + 28))(v717, 49, v347, v349);
                            if (v348) {
                              BOOL v352 = *((unsigned __int8 *)v348 + 16) >= 0x1Cu;
                            }
                            else {
                              BOOL v352 = 0;
                            }
                            if (v352)
                            {
                              (*((void (**)(void **, llvm::Value *, llvm::Value **, uint64_t, uint64_t))*v718
                               + 2))(v718, v348, &v753, v714, v715);
                              if (v711)
                              {
                                int v442 = (llvm::MDNode **)Impl;
                                uint64_t v443 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                                do
                                {
                                  llvm::Instruction::setMetadata(v348, *(_DWORD *)v442, v442[1]);
                                  v442 += 2;
                                }
                                while (v442 != v443);
                              }
                            }
                          }
                          else
                          {
                            v739[0] = 257;
                            long long v348 = llvm::CastInst::Create(49, v347, v349, (const char **)&v735, 0);
                            (*((void (**)(void **, llvm::Value *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v348, &v753, v714, v715);
                            if (v711)
                            {
                              __int16 v350 = (llvm::MDNode **)Impl;
                              unint64_t v351 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                              do
                              {
                                llvm::Instruction::setMetadata(v348, *(_DWORD *)v350, v350[1]);
                                v350 += 2;
                              }
                              while (v350 != v351);
                            }
                          }
                        }
                        uint64_t v353 = v684[1];
                        unsigned int v354 = sub_1CC7A57E4(v353);
                        int v355 = *(_DWORD *)(v353 + 20);
                        if ((v355 & 0x40000000) != 0) {
                          uint64_t v356 = *(void *)(v353 - 8);
                        }
                        else {
                          uint64_t v356 = v353 - 32 * (v355 & 0x7FFFFFF);
                        }
                        uint64_t v357 = v356 + 32 * v354;
                        if (*(void *)v357)
                        {
                          **(void **)(v357 + 16) = *(void *)(v357 + 8);
                          uint64_t v358 = *(void *)(v357 + 8);
                          if (v358) {
                            *(void *)(v358 + 16) = *(void *)(v357 + 16);
                          }
                        }
                        *(void *)uint64_t v357 = v348;
                        if (v348)
                        {
                          uint64_t v361 = *((void *)v348 + 1);
                          unsigned int v360 = (uint64_t *)((char *)v348 + 8);
                          uint64_t v359 = v361;
                          uint64_t v362 = v356 + 32 * v354;
                          *(void *)(v362 + 8) = v361;
                          if (v361) {
                            *(void *)(v359 + 16) = v362 + 8;
                          }
                          *(void *)(v362 + 16) = v360;
                          *unsigned int v360 = v357;
                        }
                        goto LABEL_1115;
                      }
                      uint64_t v385 = *(void *)*v297;
                      unint64_t v735 = &v737;
                      unint64_t v736 = (void *)0x200000000;
                      uint64_t v742 = v385;
                      int v743 = &v751;
                      int v744 = &v752;
                      uint64_t v745 = 0;
                      int v746 = 0;
                      __int16 v747 = 512;
                      char v748 = 7;
                      uint64_t v740 = 0;
                      uint64_t v741 = 0;
                      uint64_t v749 = 0;
                      uint64_t v750 = 0;
                      v751 = &unk_1F2616E88;
                      unint64_t v752 = &unk_1F2617008;
                      size_t v649 = (size_t)v297;
                      unsigned int v386 = sub_1CC7A7A10(v297[10], (_DWORD *)v682, (uint64_t)&v735);
                      __int16 v387 = v386;
                      uint64_t v388 = *(void *)(v685 + 264);
                      __int16 v734 = 257;
                      __int16 v327 = v250;
                      if (*(void *)v386 == v388)
                      {
                        uint64_t v329 = v680;
                      }
                      else
                      {
                        if (*((unsigned __int8 *)v386 + 16) > 0x14u)
                        {
                          LOWORD(v757) = 257;
                          unint64_t v660 = llvm::CastInst::Create(47, (uint64_t)v386, v388, (const char **)&v753, 0);
                          (*((void (**)(void **))*v744 + 2))(v744);
                          uint64_t v329 = v680;
                          if (v736)
                          {
                            uint64_t v410 = v735;
                            std::string::size_type v646 = (char *)v735 + 16 * v736;
                            do
                            {
                              size_t v647 = (size_t)v410;
                              llvm::Instruction::setMetadata(v660, *(_DWORD *)v410, *((llvm::MDNode **)v410 + 1));
                              uint64_t v410 = (void *)(v647 + 16);
                            }
                            while ((char *)(v647 + 16) != v646);
                          }
                          goto LABEL_673;
                        }
                        uint64_t v392 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v743 + 28))(v743, 47, v386, v388);
                        __int16 v387 = (llvm::BinaryOperator *)v392;
                        uint64_t v329 = v680;
                        if (v392 && *(unsigned __int8 *)(v392 + 16) >= 0x1Cu)
                        {
                          unint64_t v660 = (llvm::BasicBlock *)v392;
                          (*((void (**)(void **, uint64_t, unint64_t *, uint64_t, uint64_t))*v744 + 2))(v744, v392, &v732, v740, v741);
                          if (v736)
                          {
                            uint64_t v458 = (llvm::MDNode **)v735;
                            char v459 = (llvm::MDNode **)((char *)v735 + 16 * v736);
                            do
                            {
                              llvm::Instruction::setMetadata(v660, *(_DWORD *)v458, v458[1]);
                              v458 += 2;
                            }
                            while (v458 != v459);
                          }
                          uint64_t v329 = v680;
                          unint64_t v244 = v664;
LABEL_673:
                          __int16 v387 = v660;
                        }
                      }
                      LOWORD(v757) = 257;
                      unsigned int v393 = sub_1CD5A6358((uint64_t)&v735, v387, (uint64_t)&v753, 0, 0);
                      if (v482 >= 2)
                      {
                        uint64_t v395 = *(llvm::ConstantInt **)(*(void *)v742 + 1960);
                        unsigned int v396 = *(_DWORD *)(*(void *)v742 + 1968);
                        LODWORD(v754) = v396 >> 8;
                        uint64_t v661 = v393;
                        if (v396 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v396 <= 0xFF) {
                          unint64_t v397 = 0;
                        }
                        else {
                          unint64_t v397 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v396) + 63);
                        }
                        v753 = (llvm::Value *)(v397 & v329);
                        uint64_t v398 = llvm::ConstantInt::get(v395, (llvm::LLVMContext *)&v753, v394);
                        if (v754 >= 0x41 && v753)
                        {
                          size_t v648 = (size_t)v398;
                          MEMORY[0x1D25D9CB0](v753, 0x1000C8000313F17);
                          uint64_t v398 = (void *)v648;
                        }
                        LOWORD(v757) = 257;
                        unsigned int v393 = sub_1CC57DA50((uint64_t)&v735, (uint64_t)v661, (uint64_t)v398, (uint64_t)&v753, 0);
                      }
                      int v399 = *(llvm::ConstantInt **)(*(void *)v742 + 1960);
                      long long v662 = v393;
                      unint64_t v400 = *(unsigned int *)(*(void *)v742 + 1968);
                      LODWORD(v754) = *(_DWORD *)(*(void *)v742 + 1968) >> 8;
                      if (v300)
                      {
                        uint64_t v401 = (v400 >> 8) + 63;
                        unsigned int v402 = v400 >> 8;
                        unsigned int v403 = 16;
                      }
                      else
                      {
                        uint64_t v401 = (v400 >> 8) + 63;
                        unsigned int v402 = v400 >> 8;
                        unsigned int v403 = 32;
                      }
                      if (v402 > 0x40) {
                        operator new[]();
                      }
                      if (v400 <= 0xFF) {
                        LODWORD(v404) = 0;
                      }
                      else {
                        unint64_t v404 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v401;
                      }
                      v753 = (llvm::Value *)(v404 & (v403 / v482));
                      unsigned int v405 = llvm::ConstantInt::get(v399, (llvm::LLVMContext *)&v753, v394);
                      if (v754 >= 0x41 && v753) {
                        MEMORY[0x1D25D9CB0](v753, 0x1000C8000313F17);
                      }
                      LOWORD(v757) = 257;
                      int v328 = sub_1CB84494C((uint64_t)&v735, (uint64_t)v662, (uint64_t)v405, (uint64_t)&v753, 0, 0);
                      v753 = *(llvm::Value **)v682;
                      uint64_t v754 = v649;
                      LODWORD(v755) = v482;
                      *(void *)(sub_1CD63D21C((uint64_t)v651, (uint64_t)&v753) + 24) = v328;
                      if (v735 != &v737) {
                        free(v735);
                      }
                      goto LABEL_611;
                    }
                  }
LABEL_605:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v684[1], 45) & 1) == 0)
                  {
                    int v300 = llvm::CallBase::hasFnAttrOnCalledFunction(v298, 44) ^ 1;
                    goto LABEL_608;
                  }
                }
              }
              int v300 = 0;
              goto LABEL_608;
            }
          }
        }
        unsigned int v517 = sub_1CC7A57E4(v460);
        int v518 = *(_DWORD *)(v460 + 20);
        uint64_t v519 = (v518 & 0x40000000) != 0 ? *(void *)(v460 - 8) : v460 - 32 * (v518 & 0x7FFFFFF);
        std::string::size_type v520 = *(unsigned __int8 **)(v519 + 32 * v517);
        uint64_t v521 = *(void *)v520;
        unsigned int v679 = ((uint64_t (*)(uint64_t))loc_1CC7A6D24)(v460);
        if (v676 != -1)
        {
          int v522 = *(void **)v682;
          uint64_t v754 = 0;
          uint64_t v523 = llvm::Value::stripPointerCasts((llvm::Value *)v520);
          int v525 = *((unsigned __int8 *)v523 + 16);
          if (v525 == 62 || v525 == 5 && *((_WORD *)v523 + 9) == 34) {
            break;
          }
        }
LABEL_973:
        if (!*(unsigned char *)(v685 + 243) || !*(_DWORD *)(v682 + 20))
        {
          v546 = v687;
          if (!v689) {
            goto LABEL_976;
          }
          unsigned int v552 = ((v687 >> 4) ^ (v687 >> 9)) & (v689 - 1);
          v553 = *(const char **)(v688[0] + 16 * v552);
          if (v687 != v553)
          {
            int v554 = 1;
            while (v553 != (const char *)-4096)
            {
              unsigned int v555 = v552 + v554++;
              unsigned int v552 = v555 & (v689 - 1);
              v553 = *(const char **)(v688[0] + 16 * v552);
              if (v687 == v553) {
                goto LABEL_1011;
              }
            }
LABEL_976:
            BOOL v547 = sub_1CC7A7A10(*((void *)v687 + 10), (_DWORD *)v682, (uint64_t)&Impl);
            int v548 = (unsigned __int8 *)v547;
            uint64_t v549 = *(void *)(v685 + 256);
            LOWORD(v757) = 257;
            if (*(void *)v547 != v549)
            {
              if (*((unsigned __int8 *)v547 + 16) <= 0x14u)
              {
                int v548 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v717
                                           + 28))(v717, 47, v547, v549);
                if (v548) {
                  BOOL v562 = v548[16] >= 0x1Cu;
                }
                else {
                  BOOL v562 = 0;
                }
                if (v562)
                {
                  (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v548, &v753, v714, v715);
                  if (v711)
                  {
                    uint64_t v424 = (llvm::MDNode **)Impl;
                    uint64_t v425 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v548, *(_DWORD *)v424, v424[1]);
                      v424 += 2;
                    }
                    while (v424 != v425);
                  }
                }
              }
              else
              {
                v739[0] = 257;
                int v548 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v547, v549, (const char **)&v735, 0);
                (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v548, &v753, v714, v715);
                if (v711)
                {
                  v550 = (llvm::MDNode **)Impl;
                  v551 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v548, *(_DWORD *)v550, v550[1]);
                    v550 += 2;
                  }
                  while (v550 != v551);
                }
              }
            }
            unsigned int v563 = sub_1CC7A7B60(v685, (_DWORD *)v682, v546);
            LOWORD(v757) = 257;
            v564 = sub_1CB84494C((uint64_t)&Impl, (uint64_t)v563, (uint64_t)v548, (uint64_t)&v753, 0, 0);
            unint64_t v565 = (unsigned __int8 *)v564;
            uint64_t v566 = *(void *)(v685 + 264);
            __int16 v734 = 257;
            if (*(void *)v564 != v566)
            {
              if (*((unsigned __int8 *)v564 + 16) <= 0x14u)
              {
                unint64_t v565 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v717
                                           + 28))(v717, 38, v564, v566);
                if (v565) {
                  BOOL v569 = v565[16] >= 0x1Cu;
                }
                else {
                  BOOL v569 = 0;
                }
                if (v569)
                {
                  (*((void (**)(void **, unsigned __int8 *, unint64_t *, uint64_t, uint64_t))*v718 + 2))(v718, v565, &v732, v714, v715);
                  if (v711)
                  {
                    int v426 = (llvm::MDNode **)Impl;
                    int v427 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v565, *(_DWORD *)v426, v426[1]);
                      v426 += 2;
                    }
                    while (v426 != v427);
                  }
                }
              }
              else
              {
                v739[0] = 257;
                unint64_t v565 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v564, v566, (const char **)&v735, 0);
                (*((void (**)(void **, unsigned __int8 *, unint64_t *, uint64_t, uint64_t))*v718 + 2))(v718, v565, &v732, v714, v715);
                if (v711)
                {
                  uint64_t v567 = (llvm::MDNode **)Impl;
                  v568 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v565, *(_DWORD *)v567, v567[1]);
                    v567 += 2;
                  }
                  while (v567 != v568);
                }
              }
            }
            sub_1CD467E2C((uint64_t)v688, (uint64_t *)&v687)[1] = v565;
          }
LABEL_1011:
          uint64_t v570 = v684[1];
          uint64_t v714 = *(void *)(v570 + 40);
          uint64_t v715 = v570 + 24;
          unsigned int v571 = *(llvm::Value **)(v570 + 48);
          v753 = v571;
          if (v571)
          {
            llvm::MetadataTracking::track((uint64_t)&v753, (unsigned __int8 *)v571, 2);
            unsigned int v286 = v753;
          }
          else
          {
            unsigned int v286 = 0;
          }
          sub_1CB8461A4((uint64_t)&Impl, 0, (uint64_t)v286);
          if (v753)
          {
            int v287 = *(unsigned __int8 *)v753;
            if ((v287 - 4) > 0x1E)
            {
              if ((v287 - 3) >= 0xFFFFFFFE) {
                uint64_t v320 = v753;
              }
              else {
                uint64_t v320 = 0;
              }
              if ((v287 - 3) < 0xFFFFFFFE)
              {
                if (v287 == 3) {
                  *((void *)v753 + 1) = 0;
                }
                goto LABEL_1014;
              }
              unint64_t v289 = (unint64_t)v320 + 8;
            }
            else
            {
              if ((*((unsigned char *)v753 + 1) & 0x7F) != 2 && !*((_DWORD *)v753 + 3)) {
                goto LABEL_1014;
              }
              uint64_t v288 = *((void *)v753 + 2);
              if ((v288 & 4) == 0) {
                goto LABEL_1014;
              }
              unint64_t v289 = v288 & 0xFFFFFFFFFFFFFFF8;
              if (!v289) {
                goto LABEL_1014;
              }
            }
            unint64_t v735 = &v753;
            sub_1CC5FA668(v289 + 16, &v735);
          }
LABEL_1014:
          uint64_t v572 = *(void *)(v685 + 256);
          LOWORD(v757) = 257;
          v573 = v520;
          if (*(void *)v520 != v572)
          {
            if (v520[16] <= 0x14u)
            {
              v573 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v717
                                         + 28))(v717, 47, v520, v572);
              if (v573) {
                BOOL v576 = v573[16] >= 0x1Cu;
              }
              else {
                BOOL v576 = 0;
              }
              if (v576)
              {
                (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v573, &v753, v714, v715);
                if (v711)
                {
                  uint64_t v420 = (llvm::MDNode **)Impl;
                  uint64_t v421 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v573, *(_DWORD *)v420, v420[1]);
                    v420 += 2;
                  }
                  while (v420 != v421);
                }
              }
            }
            else
            {
              v739[0] = 257;
              v573 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v520, v572, (const char **)&v735, 0);
              (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v573, &v753, v714, v715);
              if (v711)
              {
                v574 = (llvm::MDNode **)Impl;
                v575 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v573, *(_DWORD *)v574, v574[1]);
                  v574 += 2;
                }
                while (v574 != v575);
              }
            }
          }
          uint64_t v578 = sub_1CD467E2C((uint64_t)v688, (uint64_t *)&v687)[1];
          int v579 = *(llvm::ConstantInt **)(*v716 + 1960);
          unsigned int v580 = *(_DWORD *)(*v716 + 1968);
          LODWORD(v736) = v580 >> 8;
          if (v580 >> 8 > 0x40) {
            operator new[]();
          }
          if (v580 <= 0xFF) {
            LODWORD(v581) = 0;
          }
          else {
            unint64_t v581 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v580) + 63);
          }
          unint64_t v735 = (void *)(v581 & v679);
          v582 = llvm::ConstantInt::get(v579, (llvm::LLVMContext *)&v735, v577);
          if (v736 >= 0x41 && v735) {
            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
          }
          v739[0] = 257;
          unsigned int v583 = sub_1CB84494C((uint64_t)&Impl, v578, (uint64_t)v582, (uint64_t)&v735, 0, 0);
          v584 = v687;
          uint64_t v585 = v714;
          uint64_t v586 = v715;
          uint64_t v587 = (unsigned __int8 *)sub_1CC7A7A10(*((void *)v687 + 10), (_DWORD *)v682, (uint64_t)&Impl);
          if (v585)
          {
            sub_1CBF5385C((uint64_t)&Impl, v585, v586);
          }
          else
          {
            uint64_t v714 = 0;
            uint64_t v715 = 0;
          }
          uint64_t v588 = *(void *)(v685 + 256);
          LOWORD(v757) = 257;
          if (*(void *)v587 != v588)
          {
            if (v587[16] <= 0x14u)
            {
              uint64_t v591 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v717 + 28))(v717, 47, v587, v588);
              uint64_t v587 = (unsigned __int8 *)v591;
              if (v591)
              {
                if (*(unsigned __int8 *)(v591 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v591, &v753, v714, v715);
                  if (v711)
                  {
                    int v428 = (llvm::MDNode **)Impl;
                    uint64_t v429 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v587, *(_DWORD *)v428, v428[1]);
                      v428 += 2;
                    }
                    while (v428 != v429);
                  }
                }
              }
            }
            else
            {
              v739[0] = 257;
              uint64_t v587 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v587, v588, (const char **)&v735, 0);
              (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v587, &v753, v714, v715);
              if (v711)
              {
                uint64_t v589 = (llvm::MDNode **)Impl;
                unsigned int v590 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v587, *(_DWORD *)v589, v589[1]);
                  v589 += 2;
                }
                while (v589 != v590);
              }
            }
          }
          v739[0] = 257;
          v592 = sub_1CB84494C((uint64_t)&Impl, (uint64_t)v573, (uint64_t)v587, (uint64_t)&v735, 0, 0);
          v593 = (unsigned __int8 *)v592;
          uint64_t v594 = *(void *)(v685 + 264);
          LOWORD(v757) = 257;
          if (*(void *)v592 != v594)
          {
            if (*((unsigned __int8 *)v592 + 16) <= 0x14u)
            {
              v593 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v717
                                         + 28))(v717, 38, v592, v594);
              if (v593) {
                BOOL v597 = v593[16] >= 0x1Cu;
              }
              else {
                BOOL v597 = 0;
              }
              if (v597)
              {
                (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v593, &v753, v714, v715);
                if (v711)
                {
                  uint64_t v422 = (llvm::MDNode **)Impl;
                  uint64_t v423 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v593, *(_DWORD *)v422, v422[1]);
                    v422 += 2;
                  }
                  while (v422 != v423);
                }
              }
            }
            else
            {
              v739[0] = 257;
              v593 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v592, v594, (const char **)&v735, 0);
              (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v593, &v753, v714, v715);
              if (v711)
              {
                unint64_t v595 = (llvm::MDNode **)Impl;
                v596 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v593, *(_DWORD *)v595, v595[1]);
                  v595 += 2;
                }
                while (v595 != v596);
              }
            }
          }
          v739[0] = 257;
          uint64_t v598 = v593;
          size_t v599 = v583;
          goto LABEL_1077;
        }
        uint64_t v556 = v684[1];
        uint64_t v714 = *(void *)(v556 + 40);
        uint64_t v715 = v556 + 24;
        __int16 v557 = *(llvm::Value **)(v556 + 48);
        v753 = v557;
        if (v557)
        {
          llvm::MetadataTracking::track((uint64_t)&v753, (unsigned __int8 *)v557, 2);
          uint64_t v301 = v753;
        }
        else
        {
          uint64_t v301 = 0;
        }
        sub_1CB8461A4((uint64_t)&Impl, 0, (uint64_t)v301);
        if (v753)
        {
          int v302 = *(unsigned __int8 *)v753;
          if ((v302 - 4) > 0x1E)
          {
            if ((v302 - 3) >= 0xFFFFFFFE) {
              uint64_t v323 = v753;
            }
            else {
              uint64_t v323 = 0;
            }
            if ((v302 - 3) < 0xFFFFFFFE)
            {
              if (v302 == 3) {
                *((void *)v753 + 1) = 0;
              }
              goto LABEL_990;
            }
            unint64_t v304 = (unint64_t)v323 + 8;
          }
          else
          {
            if ((*((unsigned char *)v753 + 1) & 0x7F) != 2 && !*((_DWORD *)v753 + 3)) {
              goto LABEL_990;
            }
            uint64_t v303 = *((void *)v753 + 2);
            if ((v303 & 4) == 0) {
              goto LABEL_990;
            }
            unint64_t v304 = v303 & 0xFFFFFFFFFFFFFFF8;
            if (!v304) {
              goto LABEL_990;
            }
          }
          unint64_t v735 = &v753;
          sub_1CC5FA668(v304 + 16, &v735);
        }
LABEL_990:
        uint64_t v558 = *(void *)(v685 + 256);
        LOWORD(v757) = 257;
        v559 = v520;
        if (*(void *)v520 != v558)
        {
          if (v520[16] <= 0x14u)
          {
            v559 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v717
                                       + 28))(v717, 47, v520, v558);
            if (v559) {
              BOOL v602 = v559[16] >= 0x1Cu;
            }
            else {
              BOOL v602 = 0;
            }
            if (v602)
            {
              (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v559, &v753, v714, v715);
              if (v711)
              {
                int v437 = (llvm::MDNode **)Impl;
                uint64_t v438 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v559, *(_DWORD *)v437, v437[1]);
                  v437 += 2;
                }
                while (v437 != v438);
              }
            }
          }
          else
          {
            v739[0] = 257;
            v559 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v520, v558, (const char **)&v735, 0);
            (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v559, &v753, v714, v715);
            if (v711)
            {
              uint64_t v560 = (llvm::MDNode **)Impl;
              __int16 v561 = (llvm::MDNode **)((char *)Impl + 16 * v711);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v559, *(_DWORD *)v560, v560[1]);
                v560 += 2;
              }
              while (v560 != v561);
            }
          }
        }
        v584 = v687;
        v603 = sub_1CC7A7B60(v685, (_DWORD *)v682, v687);
        __int16 v604 = (unsigned __int8 *)v603;
        uint64_t v605 = *(void *)(v685 + 256);
        LOWORD(v757) = 257;
        if (*(void *)v603 != v605)
        {
          if (*((unsigned __int8 *)v603 + 16) <= 0x14u)
          {
            __int16 v604 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v717
                                       + 28))(v717, 47, v603, v605);
            if (v604) {
              BOOL v608 = v604[16] >= 0x1Cu;
            }
            else {
              BOOL v608 = 0;
            }
            if (v608)
            {
              (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v604, &v753, v714, v715);
              if (v711)
              {
                unsigned int v440 = (llvm::MDNode **)Impl;
                uint64_t v441 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v604, *(_DWORD *)v440, v440[1]);
                  v440 += 2;
                }
                while (v440 != v441);
              }
            }
          }
          else
          {
            v739[0] = 257;
            __int16 v604 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v603, v605, (const char **)&v735, 0);
            (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v604, &v753, v714, v715);
            if (v711)
            {
              v606 = (llvm::MDNode **)Impl;
              uint64_t v607 = (llvm::MDNode **)((char *)Impl + 16 * v711);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v604, *(_DWORD *)v606, v606[1]);
                v606 += 2;
              }
              while (v606 != v607);
            }
          }
        }
        v609 = *(llvm::ConstantInt **)(*v716 + 1984);
        unsigned int v610 = *(_DWORD *)(*v716 + 1992);
        LODWORD(v736) = v610 >> 8;
        if (v610 >> 8 > 0x40) {
          operator new[]();
        }
        if (v610 <= 0xFF) {
          LODWORD(v611) = 0;
        }
        else {
          unint64_t v611 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v610) + 63);
        }
        unint64_t v735 = (void *)(v611 & v679);
        v612 = llvm::ConstantInt::get(v609, (llvm::LLVMContext *)&v735, v439);
        if (v736 >= 0x41 && v735) {
          MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
        }
        v739[0] = 257;
        size_t v599 = sub_1CB84494C((uint64_t)&Impl, (uint64_t)v604, (uint64_t)v612, (uint64_t)&v735, 0, 0);
        v739[0] = 257;
        uint64_t v598 = v559;
LABEL_1077:
        unint64_t v613 = sub_1CB845F20((uint64_t)&Impl, 37, v598, (uint64_t)v599, (uint64_t)&v735);
        uint64_t v614 = v684[1];
        uint64_t v615 = *(unsigned __int8 *)(v614 + 16) - 33;
        if (v615 > 0x37) {
          goto LABEL_1086;
        }
        if (((1 << (*(unsigned char *)(v614 + 16) - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v616 = *(void *)(v614 + 64);
          if (v616 && (*(unsigned char *)(v616 + 17) & 0x30) != 0) {
            goto LABEL_1086;
          }
          int v617 = *(_DWORD *)(v614 + 20);
          if (v617 < 0)
          {
            uint64_t v430 = v614 - 32 * (v617 & 0x7FFFFFF);
            uint64_t v433 = *(void *)(v430 - 8);
            uint64_t v431 = v430 - 8;
            uint64_t v432 = v433;
            if (v433)
            {
              uint64_t v434 = -v432;
              while (1)
              {
                unsigned int v435 = *(_DWORD *)(*(void *)(v431 + v434) + 8);
                if (v435 >= 2 && v435 != 7) {
                  break;
                }
                v434 += 16;
                if (!v434) {
                  goto LABEL_1084;
                }
              }
              int v253 = 1;
              goto LABEL_1087;
            }
          }
LABEL_1084:
          if (llvm::CallBase::hasFnAttrOnCalledFunction(v684[1], 45))
          {
LABEL_1086:
            int v253 = 0;
            goto LABEL_1087;
          }
          int v253 = llvm::CallBase::hasFnAttrOnCalledFunction(v614, 44) ^ 1;
        }
        else if (v615 == 27)
        {
          int v253 = (*(_WORD *)(v614 + 18) & 0x301) != 0;
        }
        else
        {
          int v253 = ((1 << (*(unsigned char *)(v614 + 16) - 33)) & 0x808001D0000010) != 0;
        }
LABEL_1087:
        unsigned int v618 = *(void **)v682;
        unint64_t v735 = 0;
        if (sub_1CD553C1C(*(void *)(v685 + 104), *(_DWORD *)(v685 + 120), (uint64_t)v618, (uint64_t)v584, &v735))BOOL v619 = v735 == (void *)(*(void *)(v685 + 104) + 24 * *(unsigned int *)(v685 + 120)); {
        else
        }
          BOOL v619 = 1;
        if (v619)
        {
          uint64_t v277 = **(void **)v584;
          unint64_t v735 = &v737;
          unint64_t v736 = (void *)0x200000000;
          uint64_t v742 = v277;
          int v743 = &v751;
          int v744 = &v752;
          uint64_t v745 = 0;
          int v746 = 0;
          __int16 v747 = 512;
          char v748 = 7;
          uint64_t v740 = 0;
          uint64_t v741 = 0;
          uint64_t v749 = 0;
          uint64_t v750 = 0;
          v751 = &unk_1F2616E88;
          unint64_t v752 = &unk_1F2617008;
          if (*(_DWORD *)(v682 + 20))
          {
            uint64_t v290 = sub_1CC7A7A10(*((void *)v584 + 10), (_DWORD *)v682, (uint64_t)&v735);
            int v292 = v290;
            uint64_t v293 = *(void *)(v685 + 256);
            __int16 v734 = 257;
            if (*(void *)v290 != v293)
            {
              if (*((unsigned __int8 *)v290 + 16) <= 0x14u)
              {
                uint64_t v308 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v743 + 28))(v743, 47, v290, v293);
                int v292 = (llvm::Instruction *)v308;
                if (v308)
                {
                  if (*(unsigned __int8 *)(v308 + 16) >= 0x1Cu)
                  {
                    (*((void (**)(void **, uint64_t, unint64_t *, uint64_t, uint64_t))*v744 + 2))(v744, v308, &v732, v740, v741);
                    if (v736)
                    {
                      unsigned int v447 = (llvm::MDNode **)v735;
                      int v448 = (llvm::MDNode **)((char *)v735 + 16 * v736);
                      do
                      {
                        llvm::Instruction::setMetadata(v292, *(_DWORD *)v447, v447[1]);
                        v447 += 2;
                      }
                      while (v447 != v448);
                    }
                  }
                }
              }
              else
              {
                LOWORD(v757) = 257;
                int v292 = llvm::CastInst::Create(47, (uint64_t)v290, v293, (const char **)&v753, 0);
                (*((void (**)(void **, llvm::Instruction *, unint64_t *, uint64_t, uint64_t))*v744 + 2))(v744, v292, &v732, v740, v741);
                if (v736)
                {
                  int v294 = (llvm::MDNode **)v735;
                  uint64_t v295 = (llvm::MDNode **)((char *)v735 + 16 * v736);
                  do
                  {
                    llvm::Instruction::setMetadata(v292, *(_DWORD *)v294, v294[1]);
                    v294 += 2;
                  }
                  while (v294 != v295);
                }
              }
            }
            if (v253) {
              uint64_t v309 = 4294967280;
            }
            else {
              uint64_t v309 = 4294967264;
            }
            int v310 = *(llvm::ConstantInt **)(*(void *)v742 + 1984);
            unsigned int v311 = *(_DWORD *)(*(void *)v742 + 1992);
            LODWORD(v754) = v311 >> 8;
            if (v311 >> 8 > 0x40) {
              operator new[]();
            }
            if (v311 <= 0xFF) {
              unint64_t v312 = 0;
            }
            else {
              unint64_t v312 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v311) + 63);
            }
            v753 = (llvm::Value *)(v312 & 0xFFFFFFFF00000000);
            uint64_t v313 = llvm::ConstantInt::get(v310, (llvm::LLVMContext *)&v753, v291);
            if (v754 >= 0x41 && v753) {
              MEMORY[0x1D25D9CB0](v753, 0x1000C8000313F17);
            }
            LOWORD(v757) = 257;
            uint64_t v315 = sub_1CBF52474((uint64_t)&v735, v292, (uint64_t)v313, (uint64_t)&v753);
            uint64_t v316 = *(llvm::ConstantInt **)(*(void *)v742 + 1984);
            unsigned int v317 = *(_DWORD *)(*(void *)v742 + 1992);
            unsigned int v733 = v317 >> 8;
            if (v317 >> 8 > 0x40) {
              operator new[]();
            }
            if (v317 <= 0xFF) {
              unint64_t v318 = 0;
            }
            else {
              unint64_t v318 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v317) + 63);
            }
            unint64_t v732 = v318 & v309;
            uint64_t v319 = llvm::ConstantInt::get(v316, (llvm::LLVMContext *)&v732, v314);
            if (v733 >= 0x41 && v732) {
              MEMORY[0x1D25D9CB0](v732, 0x1000C8000313F17);
            }
            __int16 v734 = 257;
            uint64_t v282 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v735, v315, (uint64_t)v319, (uint64_t)&v732, 0, 0);
          }
          else
          {
            uint64_t v278 = *((void *)v584 + 10);
            if (v278) {
              uint64_t v279 = v278 - 24;
            }
            else {
              uint64_t v279 = 0;
            }
            sub_1CBF5385C((uint64_t)&v735, v279, *(void *)(v279 + 48));
            char v280 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)v742 + 1912), (llvm::Type *)0x10);
            LOWORD(v757) = 257;
            int v281 = sub_1CB935044((uint64_t *)&v735, v280, 0, (uint64_t)&v753);
            uint64_t v282 = (unsigned __int8 *)v281;
            uint64_t v283 = *(void *)(v685 + 256);
            __int16 v734 = 257;
            if (*(void *)v281 != v283)
            {
              if (*((unsigned __int8 *)v281 + 16) <= 0x14u)
              {
                uint64_t v305 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v743 + 28))(v743, 47, v281, v283);
                uint64_t v282 = (unsigned __int8 *)v305;
                if (v305)
                {
                  if (*(unsigned __int8 *)(v305 + 16) >= 0x1Cu)
                  {
                    (*((void (**)(void **, uint64_t, unint64_t *, uint64_t, uint64_t))*v744 + 2))(v744, v305, &v732, v740, v741);
                    if (v736)
                    {
                      int v306 = (llvm::MDNode **)v735;
                      unsigned int v307 = (llvm::MDNode **)((char *)v735 + 16 * v736);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v282, *(_DWORD *)v306, v306[1]);
                        v306 += 2;
                      }
                      while (v306 != v307);
                    }
                  }
                }
              }
              else
              {
                LOWORD(v757) = 257;
                uint64_t v282 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v281, v283, (const char **)&v753, 0);
                (*((void (**)(void **, unsigned __int8 *, unint64_t *, uint64_t, uint64_t))*v744 + 2))(v744, v282, &v732, v740, v741);
                if (v736)
                {
                  uint64_t v284 = (llvm::MDNode **)v735;
                  uint64_t v285 = (llvm::MDNode **)((char *)v735 + 16 * v736);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v282, *(_DWORD *)v284, v284[1]);
                    v284 += 2;
                  }
                  while (v284 != v285);
                }
              }
            }
          }
          v753 = *(llvm::Value **)v682;
          uint64_t v754 = (uint64_t)v584;
          sub_1CD55B4F4((uint64_t)v654, (uint64_t *)&v753)[2] = v282;
          if (v735 != &v737) {
            free(v735);
          }
        }
        else
        {
          uint64_t v282 = (unsigned __int8 *)*((void *)v735 + 2);
        }
        uint64_t v620 = *(void *)v520;
        LOWORD(v757) = 257;
        if (*(void *)v282 != v620)
        {
          if (v282[16] <= 0x14u)
          {
            uint64_t v282 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v717
                                       + 28))(v717, 48, v282, v620);
            if (v282) {
              BOOL v623 = v282[16] >= 0x1Cu;
            }
            else {
              BOOL v623 = 0;
            }
            if (v623)
            {
              (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v282, &v753, v714, v715);
              if (v711)
              {
                char v418 = (llvm::MDNode **)Impl;
                char v419 = (llvm::MDNode **)((char *)Impl + 16 * v711);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v282, *(_DWORD *)v418, v418[1]);
                  v418 += 2;
                }
                while (v418 != v419);
              }
            }
          }
          else
          {
            v739[0] = 257;
            uint64_t v282 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v282, v620, (const char **)&v735, 0);
            (*((void (**)(void **, unsigned __int8 *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v282, &v753, v714, v715);
            if (v711)
            {
              v621 = (llvm::MDNode **)Impl;
              v622 = (llvm::MDNode **)((char *)Impl + 16 * v711);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v282, *(_DWORD *)v621, v621[1]);
                v621 += 2;
              }
              while (v621 != v622);
            }
          }
        }
        if (*(_DWORD *)(v685 + 232) != -1)
        {
          uint64_t v254 = sub_1CC7A75DC(v685, a2);
          uint64_t v255 = *(llvm::Type **)(v254 + 24);
          LOWORD(v757) = 257;
          char v256 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v714 + 56) + 40) + 272), v255, 1);
          int v257 = operator new(0x60uLL);
          v257[13] = v257[13] & 0x38000000 | 1;
          int v258 = (llvm::Instruction *)(v257 + 8);
          *(void *)int v257 = 0;
          *((void *)v257 + 1) = 0;
          *((void *)v257 + 2) = 0;
          *((void *)v257 + 3) = v257 + 8;
          v739[0] = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v257 + 8), (uint64_t)v255, v254, (const char **)&v735, 0, v256, 0);
          (*((void (**)(void **, llvm::Instruction *, llvm::Value **, uint64_t, uint64_t))*v718 + 2))(v718, v258, &v753, v714, v715);
          if (v711)
          {
            uint64_t v321 = (llvm::MDNode **)Impl;
            uint64_t v322 = (llvm::MDNode **)((char *)Impl + 16 * v711);
            do
            {
              llvm::Instruction::setMetadata(v258, *(_DWORD *)v321, v321[1]);
              v321 += 2;
            }
            while (v321 != v322);
          }
          uint64_t v260 = *v716;
          uint64_t v261 = *(int *)(v682 + 16);
          BOOL v262 = *(llvm::ConstantInt **)(*v716 + 1984);
          unsigned int v263 = *(_DWORD *)(*v716 + 1992);
          LODWORD(v736) = v263 >> 8;
          if (v263 >> 8 > 0x40) {
            operator new[]();
          }
          if (v263 <= 0xFF) {
            unint64_t v264 = 0;
          }
          else {
            unint64_t v264 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v263) + 63);
          }
          unint64_t v735 = (void *)(v264 & v261);
          uint64_t v265 = (const char *)llvm::ConstantInt::get(v262, (llvm::LLVMContext *)&v735, v259);
          if (v736 >= 0x41 && v735) {
            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
          }
          v739[0] = 257;
          unsigned int v267 = sub_1CB930F7C((uint64_t *)&Impl, v260 + 1960, (uint64_t *)v258, v265, (uint64_t)&v735);
          unint64_t v268 = *(llvm::ConstantInt **)(*v716 + 1960);
          unsigned int v269 = *(_DWORD *)(*v716 + 1968);
          LODWORD(v736) = v269 >> 8;
          if (v269 >> 8 >= 0x41) {
            operator new[]();
          }
          unint64_t v735 = 0;
          char v271 = (llvm::Value *)llvm::ConstantInt::get(v268, (llvm::LLVMContext *)&v735, v266);
          if (v736 >= 0x41 && v735) {
            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
          }
          uint64_t v272 = *(llvm::ConstantInt **)(*v716 + 1960);
          unsigned int v273 = *(_DWORD *)(*v716 + 1968);
          LODWORD(v736) = v273 >> 8;
          if (v273 >> 8 > 0x40) {
            operator new[]();
          }
          if (v273 <= 0xFF) {
            LOBYTE(v274) = 0;
          }
          else {
            unint64_t v274 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v273) + 63);
          }
          unint64_t v735 = (void *)(v274 & 1);
          uint64_t v275 = (llvm::Value *)llvm::ConstantInt::get(v272, (llvm::LLVMContext *)&v735, v270);
          if (v736 >= 0x41 && v735) {
            MEMORY[0x1D25D9CB0](v735, 0x1000C8000313F17);
          }
          v739[0] = 257;
          uint64_t v276 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&Impl, v613, v271, v275, (const llvm::Twine *)&v735, 0);
          uint64_t v665 = (uint64_t *)((unint64_t)v665 & 0xFFFFFFFFFFFF0000);
          sub_1CD5097F8((uint64_t *)&Impl, 1, (uint64_t)v267, v276, 0, 2, 1);
        }
        unint64_t v732 = *(void *)v520;
        uint64_t v624 = llvm::Intrinsic::getDeclaration(a2, 1266, (uint64_t)&v732, 1);
        if (v624) {
          int v625 = *(uint64_t ***)(v624 + 24);
        }
        else {
          int v625 = 0;
        }
        v753 = (llvm::Value *)v520;
        uint64_t v754 = (uint64_t)v282;
        int v755 = v613;
        v739[0] = 257;
        uint64_t v626 = sub_1CB845BAC((uint64_t *)&Impl, v625, (uint64_t **)v624, (uint64_t *)&v753, 3, (uint64_t)&v735, 0);
        uint64_t v627 = v684[1];
        unsigned int v628 = sub_1CC7A57E4(v627);
        int v629 = *(_DWORD *)(v627 + 20);
        if ((v629 & 0x40000000) != 0) {
          uint64_t v407 = *(void *)(v627 - 8);
        }
        else {
          uint64_t v407 = v627 - 32 * (v629 & 0x7FFFFFF);
        }
        uint64_t v630 = v407 + 32 * v628;
        if (*(void *)v630)
        {
          **(void **)(v630 + 16) = *(void *)(v630 + 8);
          uint64_t v631 = *(void *)(v630 + 8);
          if (v631) {
            *(void *)(v631 + 16) = *(void *)(v630 + 16);
          }
        }
        *(void *)uint64_t v630 = v626;
        if (v626)
        {
          uint64_t v634 = *(void *)(v626 + 8);
          uint64_t v633 = (uint64_t *)(v626 + 8);
          uint64_t v632 = v634;
          uint64_t v635 = v407 + 32 * v628;
          *(void *)(v635 + 8) = v634;
          if (v634) {
            *(void *)(v632 + 16) = v635 + 8;
          }
          *(void *)(v635 + 16) = v633;
          *uint64_t v633 = v630;
        }
LABEL_1115:
        char v671 = 1;
LABEL_1116:
        uint64_t v236 = v684 + 2;
        if (v684 + 2 == (void *)v674)
        {
          uint64_t v236 = (void *)v694.n128_u64[0];
          goto LABEL_1118;
        }
      }
      v753 = v523;
      unsigned int v733 = 64;
      unint64_t v732 = 0;
      do
      {
        uint64_t v526 = v753;
        int v527 = *((_DWORD *)v753 + 5);
        if ((v527 & 0x40000000) != 0)
        {
          unsigned int v529 = (char *)*((void *)v753 - 1);
          uint64_t v528 = v527 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v528 = v527 & 0x7FFFFFF;
          unsigned int v529 = (char *)v753 - 32 * v528;
        }
        unint64_t v735 = &v737;
        unint64_t v736 = (void *)0x600000000;
        unint64_t v530 = 32 * v528 - 32;
        if (v530 >= 0xC1) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v531 = (llvm::Constant **)&v737;
        if (v528 != 1)
        {
          uint64_t v532 = (uint64_t *)(v529 + 32);
          v533 = &v737;
          uint64_t v534 = 32 * v528 - 32;
          do
          {
            uint64_t v535 = *v532;
            v532 += 4;
            *v533++ = v535;
            v534 -= 32;
          }
          while (v534);
          unsigned int v531 = (llvm::Constant **)v735;
        }
        LODWORD(v736) = v530 >> 5;
        BOOL v536 = *((unsigned char *)v526 + 16) != 62 || v526 == 0;
        uint64_t v537 = 24;
        if (!v536) {
          uint64_t v537 = 64;
        }
        int v538 = llvm::GEPOperator::accumulateConstantOffset(*(void *)((char *)v526 + v537), v531, (v530 >> 5), v215, (llvm::APInt *)&v732, 0, v524);
        if (v735 == &v737)
        {
          if (!v538) {
            goto LABEL_947;
          }
        }
        else
        {
          free(v735);
          if (!v538)
          {
LABEL_947:
            LODWORD(v539) = v733;
LABEL_964:
            if (v539 < 0x41) {
              goto LABEL_973;
            }
            uint64_t v411 = (uint64_t *)v732;
            goto LABEL_966;
          }
        }
      }
      while ((sub_1CC7A84A8(&v753) & 1) != 0);
      uint64_t v539 = v733;
      if (v733 >= 0x41)
      {
        uint64_t v411 = (uint64_t *)v732;
        unsigned int v412 = v733 - 64;
        if ((*(void *)(v732 + 8 * ((v733 - 1) >> 6)) >> (v733 - 1)))
        {
          if (v412 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v732) < 0xFFFFFFBF) {
            goto LABEL_967;
          }
        }
        else
        {
          int v413 = 0;
          int64_t v414 = ((unint64_t)v733 + 63) >> 6;
          do
          {
            BOOL v83 = v414-- < 1;
            if (v83) {
              break;
            }
            unint64_t v415 = *(void *)(v732 + 8 * v414);
            v413 += __clz(v415);
          }
          while (!v415);
          unsigned int v416 = v733 | 0xFFFFFFC0;
          if ((v733 & 0x3F) == 0) {
            unsigned int v416 = 0;
          }
          if (v412 - v413 - v416 < 0xFFFFFFBF)
          {
            uint64_t v417 = v732;
            goto LABEL_951;
          }
        }
        uint64_t v444 = *v411;
      }
      else
      {
        uint64_t v411 = (uint64_t *)v732;
        uint64_t v444 = (uint64_t)(v732 << -(char)v733) >> -(char)v733;
      }
      uint64_t v417 = (uint64_t)v411;
      if (v444 < 0) {
        goto LABEL_964;
      }
LABEL_951:
      int v540 = *(unsigned __int8 *)(v754 + 16);
      if ((v540 - 59) > 1) {
        goto LABEL_964;
      }
      if (!(v540 == 60 ? *(void *)(v754 - 32) == (void)v522 : v754 == (void)v522)) {
        goto LABEL_964;
      }
      if (v539 < 0x41) {
        goto LABEL_969;
      }
      int v542 = 0;
      int64_t v543 = (unint64_t)(v539 + 63) >> 6;
      do
      {
        BOOL v83 = v543-- < 1;
        if (v83) {
          break;
        }
        unint64_t v544 = v411[v543];
        v542 += __clz(v544);
      }
      while (!v544);
      int v545 = v539 | 0xFFFFFFC0;
      if ((v539 & 0x3F) == 0) {
        int v545 = 0;
      }
      if ((v539 - v542 - v545) <= 0x40)
      {
        uint64_t v417 = *v411;
        goto LABEL_968;
      }
LABEL_966:
      if (!v411) {
        goto LABEL_973;
      }
LABEL_967:
      uint64_t v417 = -1;
LABEL_968:
      MEMORY[0x1D25D9CB0](v411, 0x1000C8000313F17);
LABEL_969:
      if (v417 != -1
        && (!*(unsigned char *)(v685 + 240) && (*(_DWORD *)(v521 + 8) & 0xFFFFFF00) == 0x200
         || (v417 + (unint64_t)v679) * v462 <= v676))
      {
        goto LABEL_1116;
      }
      goto LABEL_973;
    }
    uint64_t v690 = 0;
    uint64_t v691 = 0;
    unsigned int v692 = 0;
    if ((v48 & 2) != 0 && !*(unsigned char *)(v2 + 246))
    {
      unint64_t v735 = v739;
      unint64_t v736 = v739;
      uint64_t v737 = 8;
      int v738 = 0;
      sub_1CD10C594((llvm::Module *)a2, (uint64_t)&v735);
      for (unsigned int k = a2[4]; k != v13; unsigned int k = (uint64_t *)k[1])
      {
        if (k) {
          size_t v51 = k - 7;
        }
        else {
          size_t v51 = 0;
        }
        if (k && *((unsigned char *)v51 + 16) == 3)
        {
          if ((*((_DWORD *)v51 + 5) & 0x7FFFFFF) != 0) {
            goto LABEL_127;
          }
        }
        else if (*((unsigned char *)v51 + 16) || (uint64_t *)v51[9] != v51 + 9 || (*((unsigned char *)v51 + 34) & 0x80) != 0)
        {
LABEL_127:
          uint64_t v52 = (uint64_t *)v51[10];
          uint64_t v53 = (llvm::BasicBlock *)(v52 - 3);
          if (!v52) {
            uint64_t v53 = 0;
          }
          __int16 v658 = v53;
          v656 = v51 + 9;
          if (v52 == v51 + 9) {
            continue;
          }
          uint64_t v652 = k;
          BOOL v54 = 0;
          uint64_t v55 = 0;
          uint64_t v665 = v51;
          unsigned int v657 = (v51 >> 4) ^ (v51 >> 9);
LABEL_131:
          size_t v56 = v52 - 3;
          uint64_t v663 = v52;
          if (!v52) {
            size_t v56 = 0;
          }
          size_t v57 = (size_t)(v56 + 5);
          uint64_t v58 = (void *)v56[6];
          size_t v669 = (size_t)(v56 + 5);
          if (v58 == v56 + 5) {
            goto LABEL_373;
          }
LABEL_134:
          if (v58) {
            uint64_t v59 = (uint64_t)(v58 - 3);
          }
          else {
            uint64_t v59 = 0;
          }
          unsigned int v60 = sub_1CC7A57E4(v59);
          if (v60 == 0xFFFFFFFFLL) {
            goto LABEL_295;
          }
          int v61 = *(_DWORD *)(v59 + 20);
          uint64_t v62 = (v61 & 0x40000000) != 0 ? *(void *)(v59 - 8) : v59 - 32 * (v61 & 0x7FFFFFF);
          if ((*(_DWORD *)(**(void **)(v62 + 32 * v60) + 8) & 0xFFFFFF00) != 0x300) {
            goto LABEL_295;
          }
          v681 = *(uint64_t **)(v62 + 32 * v60);
          uint64_t v675 = v60;
          if (!v58) {
            goto LABEL_202;
          }
          if (*(unsigned char *)(v59 + 16) != 60) {
            goto LABEL_202;
          }
          uint64_t v63 = *(void *)(v59 - 32);
          if (!v63 || *(unsigned __int8 *)(v63 + 16) > 0x14u) {
            goto LABEL_202;
          }
          if (!&v735) {
            operator new();
          }
          v694.n128_u64[0] = (unint64_t)v695;
          v694.n128_u64[1] = 0x800000000;
          int v64 = 1;
          sub_1CBFC6B20((uint64_t)&v694, 1uLL, v63);
          unsigned __int32 v65 = v694.n128_u32[2];
          if (!v694.n128_u32[2]) {
            goto LABEL_199;
          }
LABEL_149:
          uint64_t v66 = *(void *)(v694.n128_u64[0] + 8 * v65-- - 8);
          v694.n128_u32[2] = v65;
          if (v66) {
            BOOL v67 = *(unsigned char *)(v66 + 16) == 3;
          }
          else {
            BOOL v67 = 0;
          }
          if (v67)
          {
            size_t v68 = v735;
            if (v736 == v735)
            {
              size_t v69 = (char *)v736 + 8 * HIDWORD(v737);
              if (HIDWORD(v737))
              {
                uint64_t v70 = 0;
                while (*(void *)((char *)v736 + v70) != v66)
                {
                  v70 += 8;
                  if (8 * HIDWORD(v737) == v70) {
                    goto LABEL_172;
                  }
                }
                size_t v69 = (char *)v736 + v70;
              }
LABEL_172:
              size_t v68 = v736;
            }
            else
            {
              int v71 = v737 - 1;
              unsigned int v72 = (v737 - 1) & ((v66 >> 4) ^ (v66 >> 9));
              size_t v69 = (char *)v736 + 8 * v72;
              uint64_t v73 = *(void *)v69;
              if (*(void *)v69 == -1)
              {
                uint64_t v74 = 0;
LABEL_194:
                if (v74) {
                  size_t v69 = v74;
                }
                if (*(void *)v69 != v66) {
                  size_t v69 = (char *)v736 + 8 * v737;
                }
              }
              else
              {
                uint64_t v74 = 0;
                int v75 = 1;
                while (v73 != v66)
                {
                  if (v74) {
                    BOOL v76 = 0;
                  }
                  else {
                    BOOL v76 = v73 == -2;
                  }
                  if (v76) {
                    uint64_t v74 = v69;
                  }
                  unsigned int v77 = v72 + v75++;
                  unsigned int v72 = v77 & v71;
                  size_t v69 = (char *)v736 + 8 * (v77 & v71);
                  uint64_t v73 = *(void *)v69;
                  if (*(void *)v69 == -1) {
                    goto LABEL_194;
                  }
                }
              }
            }
            uint64_t v78 = v736 == v68 ? (uint64_t *)((char *)&v737 + 4) : &v737;
            if (v69 != (char *)v736 + 8 * *(unsigned int *)v78)
            {
              int v64 = 0;
              goto LABEL_199;
            }
          }
          int v79 = *(_DWORD *)(v66 + 20);
          if ((v79 & 0x40000000) != 0)
          {
            uint64_t v81 = *(void *)(v66 - 8);
            uint64_t v80 = v79 & 0x7FFFFFF;
            if (!v80) {
              goto LABEL_191;
            }
          }
          else
          {
            uint64_t v80 = v79 & 0x7FFFFFF;
            uint64_t v81 = v66 - 32 * v80;
            if (!v80) {
              goto LABEL_191;
            }
          }
          uint64_t v82 = 32 * v80;
          do
          {
            if (*(void *)v81) {
              BOOL v83 = *(unsigned __int8 *)(*(void *)v81 + 16) > 0x14u;
            }
            else {
              BOOL v83 = 1;
            }
            if (!v83)
            {
              if (v65 >= v694.n128_u32[3]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v694.n128_u64[0] + 8 * v65) = *(void *)v81;
              unsigned __int32 v65 = ++v694.n128_u32[2];
            }
            v81 += 32;
            v82 -= 32;
          }
          while (v82);
LABEL_191:
          if (!v65)
          {
            int v64 = 1;
LABEL_199:
            if ((void *)v694.n128_u64[0] != v695) {
              free((void *)v694.n128_u64[0]);
            }
            if (!v64) {
              goto LABEL_294;
            }
LABEL_202:
            if (v55) {
              goto LABEL_257;
            }
            uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v666 + 24))(v666, v665);
            uint64_t v85 = (llvm::Module *)v665[5];
            FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v658, 1);
            uint64_t v87 = 0;
            uint64_t v88 = **(void **)FirstNonPHIOrDbgOrLifetime;
            v694.n128_u64[0] = (unint64_t)v695;
            v694.n128_u64[1] = 0x200000000;
            uint64_t v699 = v88;
            __int16 v700 = &v708;
            uint64_t v701 = v709;
            uint64_t v702 = 0;
            int v703 = 0;
            __int16 v704 = 512;
            char v705 = 7;
            uint64_t v697 = 0;
            uint64_t v698 = 0;
            uint64_t v706 = 0;
            uint64_t v707 = 0;
            unsigned int v708 = &unk_1F2616E88;
            v709[0] = &unk_1F2617008;
            uint64_t v697 = *((void *)FirstNonPHIOrDbgOrLifetime + 5);
            uint64_t v698 = FirstNonPHIOrDbgOrLifetime + 24;
            int v89 = (llvm::Value *)*((void *)FirstNonPHIOrDbgOrLifetime + 6);
            v753 = v89;
            if (v89)
            {
              llvm::MetadataTracking::track((uint64_t)&v753, (unsigned __int8 *)v89, 2);
              uint64_t v87 = v753;
            }
            sub_1CB8461A4((uint64_t)&v694, 0, (uint64_t)v87);
            if (v753)
            {
              int v180 = *(unsigned __int8 *)v753;
              if ((v180 - 4) > 0x1E)
              {
                if ((v180 - 3) >= 0xFFFFFFFE) {
                  uint64_t v186 = v753;
                }
                else {
                  uint64_t v186 = 0;
                }
                if ((v180 - 3) < 0xFFFFFFFE)
                {
                  if (v180 == 3) {
                    *((void *)v753 + 1) = 0;
                  }
                  goto LABEL_206;
                }
                unint64_t v182 = (unint64_t)v186 + 8;
              }
              else
              {
                if ((*((unsigned char *)v753 + 1) & 0x7F) != 2 && !*((_DWORD *)v753 + 3)) {
                  goto LABEL_206;
                }
                uint64_t v181 = *((void *)v753 + 2);
                if ((v181 & 4) == 0) {
                  goto LABEL_206;
                }
                unint64_t v182 = v181 & 0xFFFFFFFFFFFFFFF8;
                if (!v182) {
                  goto LABEL_206;
                }
              }
              Impl = &v753;
              sub_1CC5FA668(v182 + 16, &Impl);
            }
LABEL_206:
            uint64_t v90 = v690;
            if (v692)
            {
              uint64_t v91 = (v692 - 1) & v657;
              uint64_t v92 = *(uint64_t **)(v690 + 16 * v91);
              if (v665 == v92)
              {
LABEL_208:
                if (v91 != v692)
                {
                  uint64_t v94 = *(llvm::ValueAsMetadata **)(v690 + 16 * v91 + 8);
                  goto LABEL_239;
                }
              }
              else
              {
                int v187 = 1;
                while (v92 != (uint64_t *)-4096)
                {
                  int v188 = v91 + v187++;
                  uint64_t v91 = v188 & (v692 - 1);
                  uint64_t v92 = *(uint64_t **)(v690 + 16 * v91);
                  if (v665 == v92) {
                    goto LABEL_208;
                  }
                }
              }
            }
            uint64_t v93 = (char *)operator new(0x78uLL);
            uint64_t v94 = (llvm::ValueAsMetadata *)(v93 + 32);
            *((_DWORD *)v93 + 13) = *((_DWORD *)v93 + 13) & 0x38000000 | 1;
            *(void *)uint64_t v93 = 0;
            *((void *)v93 + 1) = 0;
            *((void *)v93 + 2) = 0;
            *((void *)v93 + 3) = v93 + 32;
            unsigned int v95 = (llvm::PointerType *)(*(void *)v699 + 1960);
            Impl = "mtl.lm_size";
            __int16 v713 = 259;
            llvm::GlobalVariable::GlobalVariable((unint64_t *)v93 + 4, (uint64_t)v85, v95, 1, 0, 0, (const char **)&Impl, 0, 0, (llvm::Type *)0x100000002, 0);
            int v97 = (llvm::ValueAsMetadata *)llvm::UniqueStringSaver::save(***((void ***)v93 + 4) + 2136, "driver_parameters", 0x11uLL);
            int v98 = v96;
            uint64_t v99 = ***((void ***)v93 + 4);
            Impl = v93 + 32;
            int v100 = *(_DWORD *)(v99 + 2520);
            if (v100)
            {
              uint64_t v101 = *(void *)(v99 + 2504);
              int v102 = v100 - 1;
              unsigned int v103 = v102 & ((v94 >> 4) ^ (v94 >> 9));
              unint64_t v104 = (llvm::ValueAsMetadata **)(v101 + 24 * v103);
              size_t v105 = *v104;
              if (*v104 == v94) {
                goto LABEL_211;
              }
              BOOL v171 = 0;
              int v172 = 1;
              while (v105 != (llvm::ValueAsMetadata *)-4096)
              {
                if (v171) {
                  BOOL v173 = 0;
                }
                else {
                  BOOL v173 = v105 == (llvm::ValueAsMetadata *)-8192;
                }
                if (v173) {
                  BOOL v171 = v104;
                }
                unsigned int v174 = v103 + v172++;
                unsigned int v103 = v174 & v102;
                unint64_t v104 = (llvm::ValueAsMetadata **)(v101 + 24 * v103);
                size_t v105 = *v104;
                if (*v104 == v94) {
                  goto LABEL_211;
                }
              }
              if (v171) {
                __int16 v183 = v171;
              }
              else {
                __int16 v183 = v104;
              }
            }
            else
            {
              __int16 v183 = 0;
            }
            unint64_t v104 = (llvm::ValueAsMetadata **)sub_1CC5BF31C(v99 + 2504, (uint64_t)&Impl, (uint64_t *)&Impl, v183);
            uint64_t v184 = (llvm::ValueAsMetadata *)Impl;
            v104[1] = 0;
            v104[2] = 0;
            *unint64_t v104 = v184;
LABEL_211:
            v104[1] = v97;
            v104[2] = v98;
            *((_DWORD *)v93 + 16) = *((_DWORD *)v93 + 16) & 0xFFBFFFFF | ((v98 != 0) << 22);
            uint64_t v106 = *(uint64_t **)v85;
            Impl = (void *)llvm::ValueAsMetadata::get(v94, v96);
            uint64_t v108 = **(void **)v85;
            unsigned int v109 = *(llvm::ConstantInt **)(v108 + 1960);
            unint64_t v110 = *(unsigned int *)(v108 + 1968);
            LODWORD(v754) = v110 >> 8;
            if (v110 >> 8 > 0x40) {
              operator new[]();
            }
            if (v110 <= 0xFF) {
              LOBYTE(v111) = 0;
            }
            else {
              unint64_t v111 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v110) + 63);
            }
            v753 = (llvm::Value *)(v111 & 0x6F);
            uint64_t v113 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v109, (llvm::LLVMContext *)&v753, v107);
            if (v754 >= 0x41 && v753) {
              MEMORY[0x1D25D9CB0](v753, 0x1000C8000313F17);
            }
            uint64_t v711 = llvm::ValueAsMetadata::get(v113, v112);
            uint64_t v115 = **(void **)v85;
            uint64_t v116 = *(llvm::ConstantInt **)(v115 + 1960);
            unsigned int v117 = *(_DWORD *)(v115 + 1968);
            LODWORD(v754) = v117 >> 8;
            if (v117 >> 8 >= 0x41) {
              operator new[]();
            }
            v753 = 0;
            uint64_t v119 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v116, (llvm::LLVMContext *)&v753, v114);
            if (v754 >= 0x41 && v753) {
              MEMORY[0x1D25D9CB0](v753, 0x1000C8000313F17);
            }
            v712[0] = llvm::ValueAsMetadata::get(v119, v118);
            Impl = llvm::MDTuple::getImpl((uint64_t)v106, &Impl, 3, 0, 1);
            sub_1CC7A7FD4(v85, (llvm::MDNode **)&Impl, 1);
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v84 + 72))(&Impl, v84);
            (*(void (**)(llvm::Value **__return_ptr, uint64_t))(*(void *)v84 + 80))(&v753, v84);
            uint64_t v120 = Impl;
            int v121 = v753;
            if (Impl)
            {
              (*(void (**)(void **__return_ptr, void *))(*(void *)Impl + 16))(&Impl, Impl);
              uint64_t v122 = Impl;
              if (v121)
              {
LABEL_220:
                (*(void (**)(void **__return_ptr, llvm::Value *))(*(void *)v121 + 16))(&Impl, v121);
                int v123 = Impl;
                goto LABEL_221;
              }
            }
            else
            {
              uint64_t v122 = 0;
              if (v753) {
                goto LABEL_220;
              }
            }
            int v123 = 0;
LABEL_221:
            while (2)
            {
              if (((*(uint64_t (**)(void *, void *))(*(void *)v122 + 24))(v122, v123) & 1) == 0)
              {
                uint64_t v124 = *(void *)(*(uint64_t (**)(void *))(*(void *)v122 + 32))(v122);
                Impl = 0;
                unsigned int v125 = v692;
                if ((sub_1CC01F8D4(v90, v692, v124, &Impl) & 1) == 0)
                {
                  if (4 * (int)v691 + 4 >= 3 * v125)
                  {
                    int v126 = 2 * v125;
                    goto LABEL_225;
                  }
                  if (v125 + ~v691 - HIDWORD(v691) <= v125 >> 3)
                  {
                    int v126 = v125;
LABEL_225:
                    sub_1CC7A80F0((uint64_t)&v690, v126);
                    Impl = 0;
                    uint64_t v90 = v690;
                    sub_1CC01F8D4(v690, v692, v124, &Impl);
                  }
                  uint64_t v127 = Impl;
                  LODWORD(v691) = v691 + 1;
                  if (*(void *)Impl != -4096) {
                    --HIDWORD(v691);
                  }
                  *(void *)Impl = v124;
                  v127[1] = v94;
                }
                (*(void (**)(void *))(*(void *)v122 + 40))(v122);
                continue;
              }
              break;
            }
            if (v123) {
              (*(void (**)(void *))(*(void *)v123 + 8))(v123);
            }
            (*(void (**)(void *))(*(void *)v122 + 8))(v122);
            if (v121) {
              (*(void (**)(llvm::Value *))(*(void *)v121 + 8))(v121);
            }
            if (v120) {
              (*(void (**)(void *))(*(void *)v120 + 8))(v120);
            }
LABEL_239:
            uint64_t v128 = (llvm::Type *)*((void *)v94 + 3);
            LOWORD(v757) = 257;
            char v129 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v697 + 56) + 40) + 272), v128, 1);
            unint64_t v130 = (char *)operator new(0x60uLL);
            *((_DWORD *)v130 + 13) = *((_DWORD *)v130 + 13) & 0x38000000 | 1;
            uint64_t v55 = (unsigned __int8 *)(v130 + 32);
            *(void *)unint64_t v130 = 0;
            *((void *)v130 + 1) = 0;
            *((void *)v130 + 2) = 0;
            *((void *)v130 + 3) = v130 + 32;
            __int16 v713 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v130 + 32), (uint64_t)v128, (uint64_t)v94, (const char **)&Impl, 0, v129, 0);
            (*(void (**)(void *, char *, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v130 + 32, &v753, v697, v698);
            if (v694.n128_u32[2])
            {
              unint64_t v178 = v694.n128_u64[0];
              unint64_t v179 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v178, *(llvm::MDNode **)(v178 + 8));
                v178 += 16;
              }
              while (v178 != v179);
            }
            uint64_t v132 = *(void *)v699 + 1936;
            LOWORD(v757) = 257;
            if (*(void *)v55 != v132)
            {
              if (v130[48] <= 0x14u)
              {
                uint64_t v55 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v700
                                          + 28))(v700, 38, v55, v132);
                if (v55) {
                  BOOL v135 = v55[16] >= 0x1Cu;
                }
                else {
                  BOOL v135 = 0;
                }
                if (v135)
                {
                  (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v55, &v753, v697, v698);
                  if (v694.n128_u32[2])
                  {
                    unint64_t v193 = v694.n128_u64[0];
                    unint64_t v194 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v193, *(llvm::MDNode **)(v193 + 8));
                      v193 += 16;
                    }
                    while (v193 != v194);
                  }
                }
              }
              else
              {
                __int16 v713 = 257;
                uint64_t v55 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v55, v132, (const char **)&Impl, 0);
                (*(void (**)(void *, unsigned __int8 *, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v55, &v753, v697, v698);
                if (v694.n128_u32[2])
                {
                  unint64_t v133 = v694.n128_u64[0];
                  unint64_t v134 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v55, *(_DWORD *)v133, *(llvm::MDNode **)(v133 + 8));
                    v133 += 16;
                  }
                  while (v133 != v134);
                }
              }
            }
            char v136 = *(llvm::ConstantInt **)(*(void *)v699 + 1936);
            unsigned int v137 = *(_DWORD *)(*(void *)v699 + 1944);
            LODWORD(v711) = v137 >> 8;
            if (v137 >> 8 > 0x40) {
              operator new[]();
            }
            if (v137 <= 0xFF) {
              LOBYTE(v138) = 0;
            }
            else {
              unint64_t v138 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v137) + 63);
            }
            Impl = (void *)(v138 & 0x10);
            unsigned int v139 = llvm::ConstantInt::get(v136, (llvm::LLVMContext *)&Impl, v131);
            if (v711 >= 0x41 && Impl) {
              MEMORY[0x1D25D9CB0](Impl, 0x1000C8000313F17);
            }
            __int16 v713 = 257;
            BOOL v54 = sub_1CB84494C((uint64_t)&v694, (uint64_t)v55, (uint64_t)v139, (uint64_t)&Impl, 0, 0);
            if ((void *)v694.n128_u64[0] != v695) {
              free((void *)v694.n128_u64[0]);
            }
LABEL_257:
            int v140 = 0;
            uint64_t v141 = **(void **)v59;
            v694.n128_u64[0] = (unint64_t)v695;
            v694.n128_u64[1] = 0x200000000;
            uint64_t v699 = v141;
            __int16 v700 = &v708;
            uint64_t v701 = v709;
            uint64_t v702 = 0;
            int v703 = 0;
            __int16 v704 = 512;
            char v705 = 7;
            uint64_t v697 = 0;
            uint64_t v698 = 0;
            uint64_t v706 = 0;
            uint64_t v707 = 0;
            unsigned int v708 = &unk_1F2616E88;
            v709[0] = &unk_1F2617008;
            uint64_t v697 = *(void *)(v59 + 40);
            uint64_t v698 = (char *)(v59 + 24);
            char v142 = *(llvm::Value **)(v59 + 48);
            v753 = v142;
            if (v142)
            {
              llvm::MetadataTracking::track((uint64_t)&v753, (unsigned __int8 *)v142, 2);
              int v140 = v753;
            }
            sub_1CB8461A4((uint64_t)&v694, 0, (uint64_t)v140);
            uint64_t v143 = (uint64_t)v681;
            if (v753)
            {
              int v175 = *(unsigned __int8 *)v753;
              if ((v175 - 4) > 0x1E)
              {
                if ((v175 - 3) >= 0xFFFFFFFE) {
                  uint64_t v185 = v753;
                }
                else {
                  uint64_t v185 = 0;
                }
                if ((v175 - 3) < 0xFFFFFFFE)
                {
                  if (v175 == 3) {
                    *((void *)v753 + 1) = 0;
                  }
                  goto LABEL_260;
                }
                unint64_t v177 = (unint64_t)v185 + 8;
              }
              else
              {
                if ((*((unsigned char *)v753 + 1) & 0x7F) != 2 && !*((_DWORD *)v753 + 3)) {
                  goto LABEL_260;
                }
                uint64_t v176 = *((void *)v753 + 2);
                if ((v176 & 4) == 0) {
                  goto LABEL_260;
                }
                unint64_t v177 = v176 & 0xFFFFFFFFFFFFFFF8;
                if (!v177) {
                  goto LABEL_260;
                }
              }
              Impl = &v753;
              sub_1CC5FA668(v177 + 16, &Impl);
              uint64_t v143 = (uint64_t)v681;
            }
LABEL_260:
            uint64_t v144 = *(void *)v699 + 1936;
            LOWORD(v757) = 257;
            unint64_t v145 = (llvm::Instruction *)v143;
            if (*(void *)v143 != v144)
            {
              if (*(unsigned __int8 *)(v143 + 16) <= 0x14u)
              {
                uint64_t v148 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v700 + 28))(v700, 47, v143, v144);
                unint64_t v145 = (llvm::Instruction *)v148;
                if (v148)
                {
                  if (*(unsigned __int8 *)(v148 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v148, &v753, v697, v698);
                    if (v694.n128_u32[2])
                    {
                      unint64_t v191 = v694.n128_u64[0];
                      unint64_t v192 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
                      do
                      {
                        llvm::Instruction::setMetadata(v145, *(_DWORD *)v191, *(llvm::MDNode **)(v191 + 8));
                        v191 += 16;
                      }
                      while (v191 != v192);
                    }
                  }
                }
              }
              else
              {
                __int16 v713 = 257;
                unint64_t v145 = llvm::CastInst::Create(47, v143, v144, (const char **)&Impl, 0);
                (*(void (**)(void *, llvm::Instruction *, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v145, &v753, v697, v698);
                if (v694.n128_u32[2])
                {
                  unint64_t v146 = v694.n128_u64[0];
                  unint64_t v147 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
                  do
                  {
                    llvm::Instruction::setMetadata(v145, *(_DWORD *)v146, *(llvm::MDNode **)(v146 + 8));
                    v146 += 16;
                  }
                  while (v146 != v147);
                }
              }
            }
            uint64_t v150 = (unsigned __int16)((uint64_t (*)(uint64_t))loc_1CC7A6D24)(v59);
            uint64_t v151 = *(llvm::ConstantInt **)(*(void *)v699 + 1936);
            unsigned int v152 = *(_DWORD *)(*(void *)v699 + 1944);
            LODWORD(v711) = v152 >> 8;
            if (v152 >> 8 > 0x40) {
              operator new[]();
            }
            if (v152 <= 0xFF) {
              unint64_t v153 = 0;
            }
            else {
              unint64_t v153 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v152) + 63);
            }
            Impl = (void *)(v153 & v150);
            uint64_t v154 = llvm::ConstantInt::get(v151, (llvm::LLVMContext *)&Impl, v149);
            if (v711 >= 0x41 && Impl) {
              MEMORY[0x1D25D9CB0](Impl, 0x1000C8000313F17);
            }
            __int16 v713 = 257;
            uint64_t v155 = sub_1CB84494C((uint64_t)&v694, (uint64_t)v55, (uint64_t)v154, (uint64_t)&Impl, 0, 0);
            __int16 v713 = 257;
            __int16 v156 = sub_1CB845F20((uint64_t)&v694, 37, v145, (uint64_t)v155, (uint64_t)&Impl);
            __int16 v713 = 257;
            unsigned int v157 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v694, v156, v145, v54, (const llvm::Twine *)&Impl, 0);
            uint64_t v158 = v157;
            uint64_t v159 = *v681;
            LOWORD(v757) = 257;
            if (*(void *)v157 != v159)
            {
              if (*((unsigned __int8 *)v157 + 16) <= 0x14u)
              {
                uint64_t v158 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v700 + 28))(v700, 48, v157, v159);
                if (v158) {
                  BOOL v162 = *((unsigned __int8 *)v158 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v162 = 0;
                }
                if (v162)
                {
                  (*(void (**)(void *, llvm::Value *, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v158, &v753, v697, v698);
                  if (v694.n128_u32[2])
                  {
                    unint64_t v189 = v694.n128_u64[0];
                    unint64_t v190 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
                    do
                    {
                      llvm::Instruction::setMetadata(v158, *(_DWORD *)v189, *(llvm::MDNode **)(v189 + 8));
                      v189 += 16;
                    }
                    while (v189 != v190);
                  }
                }
              }
              else
              {
                __int16 v713 = 257;
                uint64_t v158 = llvm::CastInst::Create(48, (uint64_t)v157, v159, (const char **)&Impl, 0);
                (*(void (**)(void *, llvm::Value *, llvm::Value **, uint64_t, char *))(*v701 + 16))(v701, v158, &v753, v697, v698);
                if (v694.n128_u32[2])
                {
                  unint64_t v160 = v694.n128_u64[0];
                  unint64_t v161 = v694.n128_u64[0] + 16 * v694.n128_u32[2];
                  do
                  {
                    llvm::Instruction::setMetadata(v158, *(_DWORD *)v160, *(llvm::MDNode **)(v160 + 8));
                    v160 += 16;
                  }
                  while (v160 != v161);
                }
              }
            }
            int v163 = *(_DWORD *)(v59 + 20);
            if ((v163 & 0x40000000) != 0) {
              uint64_t v164 = *(void *)(v59 - 8);
            }
            else {
              uint64_t v164 = v59 - 32 * (v163 & 0x7FFFFFF);
            }
            uint64_t v165 = v164 + 32 * v675;
            if (*(void *)v165)
            {
              **(void **)(v165 + 16) = *(void *)(v165 + 8);
              uint64_t v166 = *(void *)(v165 + 8);
              if (v166) {
                *(void *)(v166 + 16) = *(void *)(v165 + 16);
              }
            }
            *(void *)uint64_t v165 = v158;
            if (v158)
            {
              uint64_t v169 = *((void *)v158 + 1);
              BOOL v168 = (uint64_t *)((char *)v158 + 8);
              uint64_t v167 = v169;
              uint64_t v170 = v164 + 32 * v675;
              *(void *)(v170 + 8) = v169;
              if (v169) {
                *(void *)(v167 + 16) = v170 + 8;
              }
              *(void *)(v170 + 16) = v168;
              *BOOL v168 = v165;
            }
            if ((void *)v694.n128_u64[0] != v695) {
              free((void *)v694.n128_u64[0]);
            }
LABEL_294:
            size_t v57 = v669;
LABEL_295:
            uint64_t v58 = (void *)v58[1];
            if (v58 == (void *)v57)
            {
LABEL_373:
              uint64_t v52 = (uint64_t *)v663[1];
              if (v52 == v656)
              {
                uint64_t v2 = v685;
                uint64_t v13 = (uint64_t *)(a2 + 3);
                unsigned int k = v652;
                continue;
              }
              goto LABEL_131;
            }
            goto LABEL_134;
          }
          goto LABEL_149;
        }
      }
      if (v736 != v735) {
        free(v736);
      }
      int v48 = *(_DWORD *)(v2 + 236);
    }
    if ((v48 & 1) != 0 && !*(unsigned char *)(v2 + 246)) {
      goto LABEL_383;
    }
    goto LABEL_387;
  }
LABEL_113:
  char v49 = 0;
LABEL_1126:
  sub_1CC0799B4(v654);
  int v636 = *(_DWORD *)(v2 + 88);
  if (v636 || *(_DWORD *)(v2 + 92))
  {
    uint64_t v639 = *(unsigned int *)(v2 + 96);
    if (v639 > 4 * v636 && v639 >= 0x41)
    {
      sub_1CD63D544(v651);
      uint64_t v2 = v685;
    }
    else
    {
      if (v639)
      {
        uint64_t v640 = *(void *)v651;
        uint64_t v641 = *(void *)v651 + 32 * v639;
        do
        {
          *(void *)uint64_t v640 = -4096;
          *(void *)(v640 + 8) = -4096;
          *(_DWORD *)(v640 + 16) = -1;
          v640 += 32;
        }
        while (v640 != v641);
      }
      uint64_t v2 = v685;
      *(void *)(v685 + 88) = 0;
    }
  }
  sub_1CC0799B4(v653);
  int v637 = *(_DWORD *)(v2 + 40);
  if (v637 || *(_DWORD *)(v2 + 44))
  {
    int v642 = (_DWORD *)(v2 + 32);
    uint64_t v643 = *(unsigned int *)(v2 + 48);
    if (v643 > 4 * v637 && v643 >= 0x41)
    {
      sub_1CD3C8060(v642);
      uint64_t v2 = v685;
    }
    else
    {
      if (v643)
      {
        unsigned int v644 = *(void **)v642;
        uint64_t v645 = 16 * v643;
        do
        {
          *unsigned int v644 = -4096;
          v644 += 2;
          v645 -= 16;
        }
        while (v645);
      }
      uint64_t v2 = v685;
      *(void *)(v685 + 40) = 0;
    }
  }
  *(_DWORD *)(v2 + 160) = 0;
  if (v729 != v731) {
    free(v729);
  }
  return v49 & 1;
}

char *sub_1CC7A55B4(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = (char *)operator new(32 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = *((unsigned int *)v2 + 4);
    if (v5)
    {
      uint64_t v6 = &result[32 * v5];
      do
      {
        *(void *)uint64_t result = -4096;
        *((void *)result + 1) = -4096;
        *((_DWORD *)result + 4) = -1;
        result += 32;
      }
      while (result != v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

uint64_t sub_1CC7A5654(llvm::Module *a1, uint64_t a2)
{
  v19[0] = "agx.driver_bindings";
  __int16 v20 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, v19);
  if (NamedMetadata)
  {
    uint64_t v5 = NamedMetadata;
    uint64_t v6 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v6;
      while (1)
      {
        v19[0] = *(const char **)(**(void **)(v5 + 48) + v7);
        uint64_t v9 = *(void *)(a2 + 24);
        if (!v9) {
          break;
        }
        (*(void (**)(uint64_t, const char **))(*(void *)v9 + 48))(v9, v19);
        v7 += 8;
        if (v8 == v7) {
          return 1;
        }
      }
LABEL_19:
      sub_1CB920400();
      return sub_1CC7A57E4();
    }
    return 1;
  }
  v19[0] = "agx.compute_driver_bindings";
  __int16 v20 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, v19);
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(unsigned int *)(*(void *)(result + 48) + 8);
  if (!v12) {
    return 1;
  }
  for (uint64_t i = 0; i != v12; ++i)
  {
    uint64_t v14 = *(void *)(**(void **)(v11 + 48) + 8 * i);
    uint64_t v15 = *(unsigned int *)(v14 + 8);
    uint64_t v16 = v14;
    if (v15)
    {
      do
      {
        uint64_t v17 = *(unsigned __int8 **)(v16 - 8 * *(unsigned int *)(v14 + 8));
        if (v17 && *v17 - 4 <= 0x1E)
        {
          v19[0] = *(const char **)(v16 - 8 * *(unsigned int *)(v14 + 8));
          uint64_t v18 = *(void *)(a2 + 24);
          if (!v18) {
            goto LABEL_19;
          }
          (*(void (**)(uint64_t, const char **))(*(void *)v18 + 48))(v18, v19);
        }
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    uint64_t result = 1;
  }
  return result;
}

uint64_t sub_1CC7A57E4(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 60)
  {
    unsigned int v2 = 0;
    uint64_t v3 = 0;
    return v3 | v2;
  }
  if (a1 && v1 == 61)
  {
    uint64_t v3 = 0x100000000;
    unsigned int v2 = 1;
    return v3 | v2;
  }
  if (a1 && (v1 - 66) > 0xFFFFFFFD)
  {
    unsigned int v2 = 0;
    uint64_t v3 = 0x200000000;
    return v3 | v2;
  }
  if (v1 != 84) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)(a1 - 32);
  if (!v3)
  {
LABEL_16:
    unsigned int v2 = -1;
    return v3 | v2;
  }
  if (*(unsigned char *)(v3 + 16) || *(void *)(v3 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v3 + 33) & 0x20) == 0)
  {
LABEL_15:
    uint64_t v3 = 0;
    goto LABEL_16;
  }
  unsigned int v2 = 0;
  int v5 = *(_DWORD *)(v3 + 36);
  if (v5 != 2142 && v5 != 2144)
  {
    if (sub_1CC7A8558(*(_DWORD *)(v3 + 36)))
    {
      unsigned int v2 = 2;
    }
    else if ((v5 - 2784) >= 3)
    {
      BOOL v6 = sub_1CC7A857C(v5);
      if ((v5 - 2841) >= 0xFFFFFFFD) {
        int v7 = 0;
      }
      else {
        int v7 = -1;
      }
      if (v6) {
        unsigned int v2 = 3;
      }
      else {
        unsigned int v2 = v7;
      }
    }
    else
    {
      unsigned int v2 = 0;
    }
  }
  BOOL v8 = sub_1CC7A8558(v5);
  uint64_t v3 = 0;
  if ((v5 - 2784) >= 3 && !v8)
  {
    BOOL v9 = sub_1CC7A857C(v5);
    int v10 = (v5 - 2838) < 3 || v9;
    BOOL v11 = v10 == 0;
    uint64_t v3 = 0x100000000;
    if (v11) {
      uint64_t v3 = 0;
    }
  }
  return v3 | v2;
}