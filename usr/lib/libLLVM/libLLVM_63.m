uint64_t sub_1CD6E150C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  if (*((_DWORD *)sub_1CD6E26E4(a1, a2) + 1) == 150994944) {
    v4 = sub_1CD6E278C(a1, a2);
  }
  else {
    v4 = sub_1CD6E2838(a1, a2);
  }
  v5 = *(void *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 2048 && *(unsigned char *)(v5 + 4) == 2)
  {
    v6 = bswap64(*((void *)v4 + 1));
    v7 = *(unsigned char *)(v5 + 5) == 1;
    v8 = (v6 >> 24) & 0xFF0000 | HIBYTE(v6) | (v6 >> 8) & 0xFF000000 | (v6 >> 40) & 0xFF00;
    if (!v7) {
      LODWORD(v8) = v6;
    }
  }
  else
  {
    LODWORD(v8) = bswap64(*((void *)v4 + 1));
  }
  return v8;
}

void *sub_1CD6E15BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 56;
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);

  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(v4, v5, a3);
}

void sub_1CD6E1628(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __p = 0;
  v21 = 0;
  unint64_t v22 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v23);
  if ((v25 & 1) == 0 && v24)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v23;
    uint64_t v6 = v23 + (v24 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 100663296)
      {
        v7 = (uint64_t *)(bswap64(*(void *)(v5 + 24)) + *(void *)(a1 + 16));
        uint64_t v8 = *v7;
        if (*v7)
        {
          v9 = v7 + 2;
          do
          {
            if (v8 == 0x1100000000000000 || v8 == 0x700000000000000 || v8 == 0x1700000000000000)
            {
              uint64_t v12 = bswap64(*(v9 - 1));
              if ((unint64_t)v4 >= v22)
              {
                uint64_t v4 = sub_1CC9C7F0C((char **)&__p, v12);
              }
              else
              {
                *(void *)uint64_t v4 = v12;
                v4 += 8;
              }
              v21 = v4;
            }
            uint64_t v13 = *v9;
            v9 += 2;
            uint64_t v8 = v13;
          }
          while (v13);
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
    if (v24)
    {
      v14 = 0;
      uint64_t v15 = v23;
      uint64_t v16 = v23 + (v24 << 6);
      do
      {
        v17 = (char *)__p;
        if (__p != v21)
        {
          unint64_t v18 = bswap64(*(void *)(v15 + 16));
          while (*(void *)v17 != v18)
          {
            v17 += 8;
            if (v17 == v21)
            {
              v17 = v21;
              break;
            }
          }
        }
        if (v17 != v21)
        {
          if ((unint64_t)v14 >= *(void *)(a2 + 16))
          {
            v14 = sub_1CCC488E4((char **)a2, v15, a1);
          }
          else
          {
            *(void *)v14 = v15;
            *((void *)v14 + 1) = a1;
            v14 += 16;
          }
          *(void *)(a2 + 8) = v14;
        }
        v15 += 64;
      }
      while (v15 != v16);
    }
  }
  if (v25)
  {
    uint64_t v19 = v23;
    uint64_t v23 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_1CD6E1820(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v2);
  uint64_t result = v2;
  if (v3)
  {
    uint64_t v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD6E18D0(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)v2);
  uint64_t result = v2[0];
  if ((v3 & 1) == 0) {
    return v2[0] + (v2[1] << 6);
  }
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t sub_1CD6E1988()
{
  return 8;
}

const char *sub_1CD6E1990(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  int v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    signed int v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  else
  {
    if (v2 != 1) {
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
    }
    signed int v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v3 > 61)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105) {
            return "elf32-msp430";
          }
          if (v3 == 164) {
            return "elf32-hexagon";
          }
        }
        else
        {
          if (v3 == 62) {
            return "elf32-x86-64";
          }
          if (v3 == 83) {
            return "elf32-avr";
          }
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224) {
          return "elf32-amdgpu";
        }
        if (v3 == 243) {
          return "elf32-littleriscv";
        }
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
      return "elf32-unknown";
    }
    if (v3 > 17)
    {
      if (v3 != 18)
      {
        if (v3 == 20) {
          return "elf32-powerpc";
        }
        if (v3 == 40) {
          return "elf32-bigarm";
        }
        return "elf32-unknown";
      }
      return "elf32-sparc";
    }
    else
    {
      uint64_t result = "elf32-m68k";
      switch(v3)
      {
        case 2:
          return "elf32-sparc";
        case 3:
          uint64_t result = "elf32-i386";
          break;
        case 4:
          return result;
        case 6:
          uint64_t result = "elf32-iamcu";
          break;
        case 8:
          uint64_t result = "elf32-mips";
          break;
        default:
          return "elf32-unknown";
      }
    }
  }
  return result;
}

uint64_t sub_1CD6E1C98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  signed int v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 61)
  {
    uint64_t result = 15;
    switch(v2)
    {
      case 2:
      case 18:
        return 33;
      case 3:
      case 6:
        return 41;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
        return 0;
      case 8:
        int v6 = *(unsigned __int8 *)(v1 + 4);
        if (v6 == 1) {
          return 16;
        }
        if (v6 == 2) {
          return 18;
        }
        break;
      case 20:
        return 21;
      case 21:
        return 23;
      case 22:
        return 36;
      default:
        if (v2 == 40) {
          return 1;
        }
        if (v2 != 43) {
          return 0;
        }
        return 34;
    }
    goto LABEL_44;
  }
  if (v2 > 223)
  {
    switch(v2)
    {
      case 243:
        int v4 = *(unsigned __int8 *)(v1 + 4);
        if (v4 == 1) {
          return 31;
        }
        if (v4 == 2) {
          return 32;
        }
        break;
      case 244:
        return 62;
      case 245:
      case 246:
      case 248:
      case 249:
      case 250:
        return 0;
      case 247:
        return 9;
      case 251:
        return 67;
      case 252:
        return 10;
      default:
        if (v2 != 258) {
          return 0;
        }
        int v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 == 1) {
          return 13;
        }
        if (v5 == 2) {
          return 14;
        }
        break;
    }
LABEL_44:
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
  }
  if (v2 <= 104)
  {
    if (v2 != 62)
    {
      if (v2 == 83) {
        return 7;
      }
      return 0;
    }
    return 42;
  }
  else
  {
    switch(v2)
    {
      case 105:
        return 20;
      case 164:
        return 12;
      case 183:
        return 4;
      default:
        return 0;
    }
  }
}

uint64_t sub_1CD6E1E78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 56);
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = bswap64(*(void *)(v2 + 24));
  return result;
}

BOOL sub_1CD6E1E98(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16) == 256;
}

unint64_t sub_1CD6E1EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CD6E23D0((uint64_t)&v4, (void *)(a1 + 56), a2, HIDWORD(a2));
  if (v5)
  {
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap64(*(void *)(v4 + 16));
}

uint64_t sub_1CD6E1F30(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CD6E23D0((uint64_t)&v4, (void *)(a1 + 56), a2, HIDWORD(a2));
  if (v5)
  {
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t sub_1CD6E1FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CD6E23D0((uint64_t)&v4, (void *)(a1 + 56), a2, HIDWORD(a2));
  if (v5)
  {
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t sub_1CD6E2034(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CD6E23D0((uint64_t)&v4, (void *)(a1 + 56), a2, HIDWORD(a2));
  if (v5)
  {
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned char *)(v4 + 4) & 0xF;
}

uint64_t sub_1CD6E20B8(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

unint64_t sub_1CD6E20C4(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 8));
}

unint64_t sub_1CD6E20D0(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 24));
}

char *sub_1CD6E20DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)sub_1CD6E26E4(a1, a2) + 1) != 0x4000000)
  {
    uint64_t v8 = "Section is not SHT_RELA";
    __int16 v9 = 259;
    operator new();
  }
  uint64_t result = sub_1CD6E2838(a1, a2);
  unint64_t v7 = bswap64(*((void *)result + 2));
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
  return result;
}

void *sub_1CD6E21C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  char v5 = (void *)(a1 + 56);
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v16);
  if (v18)
  {
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    *a3 = v9;
    goto LABEL_8;
  }
  if (!v17)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = (_DWORD *)(v16 + 4);
  uint64_t v8 = v17 << 6;
  while (*v7 != 50331760)
  {
    v7 += 16;
    v8 -= 64;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(v5, (uint64_t)(v7 - 1), (uint64_t)&v13);
  v10 = v13;
  if (v15) {
    goto LABEL_19;
  }
  if (*v13 != 65 || v14 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  uint64_t result = llvm::ELFAttributeParser::parse(a2, (uint64_t)v13, v14, 0, a3);
  uint64_t v12 = *a3;
  if (v15)
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  if (!v12) {
    goto LABEL_6;
  }
LABEL_8:
  if (v18)
  {
    uint64_t result = (void *)v16;
    uint64_t v16 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t sub_1CD6E2350@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = sub_1CD6E2EB4(a1);
  unint64_t v6 = v5;
  unint64_t result = sub_1CD6E2F08(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t sub_1CD6E2398(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(void *)(a1 + 56) + 48));
}

uint64_t sub_1CD6E23A8(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 16)) >> 16;
}

uint64_t sub_1CD6E23BC(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 18)) >> 16;
}

unint64_t *sub_1CD6E23D0(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t result = (unint64_t *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2, a3, (uint64_t)&v9);
  unint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v8;
  }
  else
  {
    unint64_t result = sub_1CD6D4A70(a2, v9, a4, a1);
    if (v10)
    {
      unint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

unint64_t sub_1CD6E24AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v9);
  char v6 = v10;
  uint64_t v7 = v9;
  uint64_t v8 = ((unint64_t)(a2 - v9) >> 6);
  if (v10)
  {
    uint64_t v9 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return v8 | ((unint64_t)a3 << 32);
  }
}

uint64_t sub_1CD6E2574(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2[11];
  if (v8)
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a2 + 7, v8, (uint64_t)&v16);
    uint64_t v9 = v16;
    if (v18) {
      goto LABEL_7;
    }
    uint64_t v10 = v17;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  *(void *)&long long v13 = v9;
  *((void *)&v13 + 1) = v10;
  char v14 = 1;
  uint64_t v15 = 0;
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2 + 7, a3, a4, &v13, (uint64_t)&v16);
  uint64_t v9 = v16;
  if (v17)
  {
LABEL_7:
    *(unsigned char *)(a1 + 16) |= 1u;
    *(void *)a1 = v9;
    return result;
  }
  if (v16)
  {
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a2 + 352))(a2);
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v12;
    if (v17)
    {
      uint64_t result = v16;
      uint64_t v16 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

char *sub_1CD6E26E4(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unint64_t v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

char *sub_1CD6E278C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CD6E28E4((uint64_t)&v9, (void *)(a1 + 56), a2, HIDWORD(a2));
  if (v10)
  {
    unint64_t v4 = v9;
    *(void *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    __int16 v8 = 260;
    std::string v7 = &v6;
    llvm::report_fatal_error((llvm *)&v7, (const llvm::Twine *)1);
  }
  return v9;
}

char *sub_1CD6E2838(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CD6E2BC8((uint64_t)&v9, (void *)(a1 + 56), a2, HIDWORD(a2));
  if (v10)
  {
    unint64_t v4 = v9;
    *(void *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    __int16 v8 = 260;
    std::string v7 = &v6;
    llvm::report_fatal_error((llvm *)&v7, (const llvm::Twine *)1);
  }
  return v9;
}

unint64_t *sub_1CD6E28E4(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unint64_t *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2, a3, (uint64_t)&v9);
  __int16 v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v8;
  }
  else
  {
    uint64_t result = sub_1CD6E29C0(a1, a2, v9, a4);
    if (v10)
    {
      uint64_t result = v9;
      __int16 v9 = 0;
      if (result) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *sub_1CD6E29C0(uint64_t a1, void *a2, unint64_t *a3, unsigned int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::rels(a2, a3, (uint64_t)v26);
  if (v27)
  {
    uint64_t v8 = v26[0];
    char v9 = *(unsigned char *)(a1 + 8) | 1;
  }
  else
  {
    if (v26[1] <= (unint64_t)a4)
    {
      v20 = "can't read an entry at 0x";
      __int16 v21 = 259;
      uint64_t v17 = 16 * a4;
      v18[0] = (uint64_t)&v17;
      v18[2] = 0;
      __int16 v19 = 270;
      sub_1CB8F1E58((uint64_t *)&v20, v18, (uint64_t)v22);
      uint64_t v15 = ": it goes past the end of the section (0x";
      __int16 v16 = 259;
      sub_1CB8F1E58(v22, (uint64_t *)&v15, (uint64_t)v23);
      unint64_t v12 = bswap64(a3[4]);
      v13[0] = (uint64_t)&v12;
      v13[2] = 0;
      __int16 v14 = 270;
      sub_1CB8F1E58(v23, v13, (uint64_t)v24);
      char v10 = ")";
      __int16 v11 = 259;
      sub_1CB8F1E58(v24, (uint64_t *)&v10, (uint64_t)v25);
      operator new();
    }
    uint64_t v8 = v26[0] + 16 * a4;
    char v9 = *(unsigned char *)(a1 + 8) & 0xFE;
  }
  *(unsigned char *)(a1 + 8) = v9;
  *(void *)a1 = v8;
  return result;
}

unint64_t *sub_1CD6E2BC8(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unint64_t *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2, a3, (uint64_t)&v9);
  uint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v8;
  }
  else
  {
    uint64_t result = sub_1CD6E2CA4(a1, a2, v9, a4);
    if (v10)
    {
      uint64_t result = v9;
      char v9 = 0;
      if (result) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *sub_1CD6E2CA4(uint64_t a1, void *a2, unint64_t *a3, unsigned int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(a2, a3, (uint64_t)v26);
  if (v27)
  {
    uint64_t v8 = v26[0];
    char v9 = *(unsigned char *)(a1 + 8) | 1;
  }
  else
  {
    if (v26[1] <= (unint64_t)a4)
    {
      v20 = "can't read an entry at 0x";
      __int16 v21 = 259;
      uint64_t v17 = 24 * a4;
      v18[0] = (uint64_t)&v17;
      v18[2] = 0;
      __int16 v19 = 270;
      sub_1CB8F1E58((uint64_t *)&v20, v18, (uint64_t)v22);
      uint64_t v15 = ": it goes past the end of the section (0x";
      __int16 v16 = 259;
      sub_1CB8F1E58(v22, (uint64_t *)&v15, (uint64_t)v23);
      unint64_t v12 = bswap64(a3[4]);
      v13[0] = (uint64_t)&v12;
      v13[2] = 0;
      __int16 v14 = 270;
      sub_1CB8F1E58(v23, v13, (uint64_t)v24);
      char v10 = ")";
      __int16 v11 = 259;
      sub_1CB8F1E58(v24, (uint64_t *)&v10, (uint64_t)v25);
      operator new();
    }
    uint64_t v8 = v26[0] + 24 * a4;
    char v9 = *(unsigned char *)(a1 + 8) & 0xFE;
  }
  *(unsigned char *)(a1 + 8) = v9;
  *(void *)a1 = v8;
  return result;
}

unint64_t sub_1CD6E2EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  unsigned int v2 = v1 && bswap64(*(void *)(v1 + 32)) > 0x17;
  return sub_1CD6E24AC(a1, v1, v2);
}

unint64_t sub_1CD6E2F08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    return sub_1CD6E24AC(a1, v1, bswap64(*(void *)(v1 + 32)) / 0x18);
  }
  else {
    return sub_1CD6E2EB4(a1);
  }
}

uint64_t llvm::object::GenericBinaryError::GenericBinaryError(uint64_t a1, llvm::Twine *a2, unsigned int a3)
{
  std::string v6 = (void *)sub_1CD6E3268(a1);
  *std::string v6 = &unk_1F2633568;
  llvm::Twine::str(a2, v6 + 3);
  if (!atomic_load_explicit(qword_1EA61DED0, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EA61DED0, (void *(*)(void))sub_1CCC4A2B8, (void (*)(void *))sub_1CCC4A300);
  }
  atomic_ullong v7 = qword_1EA61DED0[0];
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v7;
  return a1;
}

llvm::raw_ostream *llvm::object::GenericBinaryError::log(llvm::object::GenericBinaryError *this, llvm::raw_ostream *a2)
{
  std::error_code v5 = (const char *)*((void *)this + 3);
  uint64_t v3 = (char *)this + 24;
  unint64_t v4 = v5;
  char v6 = v3[23];
  int v7 = v6;
  if (v6 >= 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v4;
  }
  size_t v9 = v6 & 0x7F;
  if (v7 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = *((void *)v3 + 1);
  }
  return llvm::raw_ostream::write(a2, v8, v10);
}

void sub_1CD6E309C()
{
}

void sub_1CD6E30B0(uint64_t a1, llvm::raw_ostream *a2)
{
  std::error_code::message(&v5, (const std::error_code *)(a1 + 8));
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v5;
  }
  else {
    uint64_t v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
  }
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v5.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v5.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a2, (const char *)v3, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void *sub_1CD6E311C()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t sub_1CD6E3128(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

uint64_t sub_1CD6E315C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2633568;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_1CD6E31AC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2633568;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD6E321C()
{
  return &llvm::object::GenericBinaryError::ID;
}

uint64_t sub_1CD6E3228(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::GenericBinaryError::ID || a2 == &llvm::object::BinaryError::ID || v3;
}

uint64_t sub_1CD6E3268(uint64_t a1)
{
  *(void *)a1 = &unk_1F26448A8;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = std::system_category();
  *(void *)a1 = &unk_1F26335B8;
  if (!atomic_load_explicit(qword_1EA61DED0, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EA61DED0, (void *(*)(void))sub_1CCC4A2B8, (void (*)(void *))sub_1CCC4A300);
  }
  atomic_ullong v2 = qword_1EA61DED0[0];
  *(void *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = v2;
  return a1;
}

uint64_t llvm::object::IRObjectFile::IRObjectFile(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  llvm::object::SymbolicFile::SymbolicFile(a1, 3, (uint64_t)v12);
  *(void *)uint64_t v6 = &unk_1F2633650;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)a3;
  *(void *)(v6 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(v6 + 72) = 0;
  int v7 = (llvm::ModuleSymbolTable *)(v6 + 72);
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = v6 + 112;
  *(void *)(v6 + 104) = 0x400000000;
  *(void *)(v6 + 144) = v6 + 160;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_DWORD *)(v6 + 216) = 0;
  uint64_t v8 = *(llvm::Module ***)(v6 + 48);
  size_t v9 = *(llvm::Module ***)(v6 + 56);
  while (v8 != v9)
  {
    size_t v10 = *v8++;
    llvm::ModuleSymbolTable::addModule(v7, v10);
  }
  return a1;
}

void llvm::object::IRObjectFile::~IRObjectFile(llvm::object::IRObjectFile *this)
{
  *(void *)this = &unk_1F2633650;
  sub_1CCC4B504((uint64_t)this + 72);
  atomic_ullong v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    sub_1CCC4B5D4((llvm::object::IRObjectFile *)((char *)this + 48), v2);
    operator delete(*((void **)this + 6));
  }

  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  uint64_t vars8;

  llvm::object::IRObjectFile::~IRObjectFile(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::object::IRObjectFile::symbol_begin(llvm::object::IRObjectFile *this)
{
  return *((void *)this + 22);
}

uint64_t llvm::object::IRObjectFile::symbol_end(llvm::object::IRObjectFile *this)
{
  return *((void *)this + 23);
}

uint64_t llvm::object::IRObjectFile::getTargetTriple(llvm::object::IRObjectFile *this)
{
  uint64_t v1 = **((void **)this + 6);
  uint64_t v4 = *(void *)(v1 + 216);
  uint64_t v2 = v1 + 216;
  uint64_t v3 = v4;
  if (*(char *)(v2 + 23) >= 0) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t llvm::object::IRObjectFile::findBitcodeInMemBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::identify_magic(*(unsigned __int8 **)a1, *(void *)(a1 + 8));
  if (result == 1)
  {
    *(unsigned char *)(a2 + 32) &= ~1u;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    return result;
  }
  if (result > 0x21 || ((1 << result) & 0x208000210) == 0)
  {
    *(void *)&v16.__val_ = llvm::object::object_category((llvm::object *)result);
    uint64_t result = llvm::errorCodeToError((llvm *)2, v16, (void *)a2);
    *(unsigned char *)(a2 + 32) |= 1u;
    return result;
  }
  long long v7 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v7;
  llvm::object::ObjectFile::createObjectFile((llvm::object *)v12, result, 1, (uint64_t)&v13);
  char v10 = v14;
  __int16 v11 = v13;
  if (v14)
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 32) |= 1u;
    *(void *)a2 = v11;
  }
  else
  {
    __n128 BitcodeInObject = llvm::object::IRObjectFile::findBitcodeInObject((__n128 *)v13, v8, (__n128 *)a2);
    char v10 = v14;
    uint64_t result = (uint64_t)v13;
  }
  long long v13 = 0;
  if (v10)
  {
    if (result) {
      return (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 8))(result, BitcodeInObject);
    }
  }
  else if (result)
  {
    return (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 8))(result, BitcodeInObject);
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbol64TableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 2) > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = HIWORD(*a2);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v6 > 0x13;
  int v7 = (1 << v6) & 0xAAC00;
  BOOL v8 = v3 || v7 == 0;
  unsigned int v9 = bswap32(v4);
  unsigned int v10 = __rev16(v5);
  if (v8) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = v10;
  }
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::getSymbolTableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > (unint64_t)a2 || (unint64_t)a2 + 12 > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = HIWORD(*a2);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v6 > 0x13;
  int v7 = (1 << v6) & 0xAAC00;
  BOOL v8 = v3 || v7 == 0;
  unsigned int v9 = bswap32(v4);
  unsigned int v10 = __rev16(v5);
  if (v8) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = v10;
  }
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::moveSymbolNext(uint64_t result, void *a2)
{
  uint64_t v2 = 12;
  if ((*(_DWORD *)(result + 8) & 0xFFFFFFFE) == 0x12) {
    uint64_t v2 = 16;
  }
  *a2 += v2;
  return result;
}

size_t llvm::object::MachOObjectFile::getSymbolName@<X0>(llvm::object::MachOObjectFile *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t StringTableData = llvm::object::MachOObjectFile::getStringTableData(a1);
  size_t result = sub_1CCC54734((uint64_t)a1, a2);
  if (result)
  {
    unint64_t v8 = StringTableData + result;
    unint64_t v9 = *((void *)a1 + 2);
    if (v8 < v9 || v8 >= v9 + *((void *)a1 + 3))
    {
      char v18 = "bad string index: ";
      __int16 v19 = 259;
      __int16 v17 = 264;
      LODWORD(v16[0]) = result;
      sub_1CB8F1E58((uint64_t *)&v18, v16, (uint64_t)v20);
      char v14 = " for symbol at index ";
      __int16 v15 = 259;
      sub_1CB8F1E58(v20, (uint64_t *)&v14, (uint64_t)v21);
      __int16 v13 = 268;
      unint64_t SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((uint64_t)a1, (uint64_t)a2);
      p_unint64_t SymbolIndex = &SymbolIndex;
      sub_1CB8F1E58(v21, (uint64_t *)&p_SymbolIndex, (uint64_t)v22);
      sub_1CCC51CE4(a3, v22);
    }
    if (StringTableData) {
      size_t result = strlen((const char *)(StringTableData + result));
    }
    else {
      size_t result = 0;
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = result;
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getStringTableData(llvm::object::MachOObjectFile *this)
{
  uint64_t v2 = (long long *)*((void *)this + 34);
  if (v2)
  {
    v5[0] = 0;
    v5[1] = 0;
    uint64_t v6 = 0;
    sub_1CCC530A4((uint64_t)v5, (uint64_t)this, v2);
    unint64_t v3 = v6;
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (*((void *)this + 3) < v3) {
    unint64_t v3 = *((void *)this + 3);
  }
  return *((void *)this + 2) + v3;
}

unint64_t llvm::object::MachOObjectFile::getSymbolIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(long long **)(a1 + 272);
  if (!v2 || (v7 = 0, uint64_t v8 = 0, v9 = 0, sub_1CCC530A4((uint64_t)&v7, a1, v2), !*(void *)(a1 + 272))) {
    llvm::report_fatal_error((llvm *)"getSymbolIndex() called with no symbol table symbol", (const llvm::Twine *)1);
  }
  unint64_t v5 = 12;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12) {
    unint64_t v5 = 16;
  }
  return (a2 - (*(void *)(a1 + 16) + (unint64_t)v8)) / v5;
}

uint64_t llvm::object::MachOObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v2;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolAlignment(uint64_t a1, uint64_t *a2)
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 40))(v5);
  if ((v5[0] & 0x10) != 0) {
    return (1 << (((unint64_t)sub_1CCC54734(a1, a2) >> 56) & 0xF));
  }
  else {
    return 0;
  }
}

uint64_t llvm::object::MachOObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v2;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CCC54734(a1, a2);
  if ((result & 0xE000000000) != 0)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v7 = 3;
LABEL_3:
    *(_DWORD *)a3 = v7;
    return result;
  }
  if ((BYTE4(result) & 0xE) != 0xE)
  {
    if ((result & 0xE00000000) == 0)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      return result;
    }
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v7 = 1;
    goto LABEL_3;
  }
  uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 120))(v14, a1, a2);
  if (v15)
  {
    uint64_t v13 = v14[0];
    v14[0] = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v13;
  }
  else
  {
    uint64_t v8 = v14[0];
    uint64_t v9 = v14[1];
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 352))(a1);
    if (v9 == v10 && v8 == result)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      int v12 = 1;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 200))(v9, v8);
      if ((result & 1) != 0
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 208))(v9, v8), result))
      {
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v12 = 2;
      }
      else
      {
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v12 = 5;
      }
    }
    *(_DWORD *)a3 = v12;
  }
  if (v15)
  {
    uint64_t result = v14[0];
    v14[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_1CCC54734(a1, a2);
  unint64_t v7 = result;
  unint64_t v8 = HIDWORD(result);
  int v9 = BYTE4(result) & 0xE;
  if ((result & 0xE000000000) != 0) {
    int v10 = (32 * ((BYTE4(result) & 0xE) == 10)) | 0x80;
  }
  else {
    int v10 = 32 * ((BYTE4(result) & 0xE) == 10);
  }
  if ((result & 0x100000000) != 0)
  {
    if ((result & 0xE00000000) != 0)
    {
      int v11 = v10 | 2;
    }
    else
    {
      if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
      {
        unint64_t result = llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
      }
      else
      {
        unint64_t result = llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
        uint64_t v14 = v14;
      }
      int v11 = v10 | 3;
      if (v14) {
        int v11 = v10 | 0x12;
      }
    }
    int v10 = v11 | ~(4 * v8) & 0x40;
  }
  if ((v7 & 0xC0000000000000) != 0) {
    int v12 = v10 | 4;
  }
  else {
    int v12 = v10;
  }
  unsigned int v13 = v12 & 0xFFFFFEFF | (((HIWORD(v7) >> 3) & 1) << 8);
  if (v9 == 2) {
    v13 |= 8u;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v13;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbolSection@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1CCC54734((uint64_t)a1, a2);
  if (BYTE5(result))
  {
    uint64_t v7 = BYTE5(result) - 1;
    if (a1[22] <= v7)
    {
      uint64_t v16 = "bad section index: ";
      __int16 v17 = 259;
      __int16 v15 = 265;
      LODWORD(v14[0]) = BYTE5(result);
      sub_1CB8F1E58((uint64_t *)&v16, v14, (uint64_t)v18);
      int v12 = " for symbol at index ";
      __int16 v13 = 259;
      sub_1CB8F1E58(v18, (uint64_t *)&v12, (uint64_t)v19);
      __int16 v11 = 268;
      unint64_t SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((uint64_t)a1, (uint64_t)a2);
      p_unint64_t SymbolIndex = &SymbolIndex;
      sub_1CB8F1E58(v19, (uint64_t *)&p_SymbolIndex, (uint64_t)v20);
      sub_1CCC51CE4(a3, v20);
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = a1;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 352))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v8;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionAddress(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    sub_1CCC64584(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)v3);
    return v4;
  }
  else
  {
    sub_1CCC644F0(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)v3);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::MachOObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    sub_1CCC64584(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v9);
    unint64_t result = *((void *)&v11 + 1);
    unsigned int v4 = v12;
    char v5 = v13;
  }
  else
  {
    LODWORD(v13) = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    sub_1CCC644F0(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v9);
    unint64_t result = DWORD1(v11);
    unsigned int v4 = DWORD2(v11);
    char v5 = BYTE8(v12);
  }
  if (v5 != 1 && v5 != 12)
  {
    unint64_t v7 = *(void *)(a1 + 24);
    unint64_t v8 = v7 - v4;
    if (v8 >= result) {
      unint64_t v8 = result;
    }
    if (v7 >= v4) {
      return v8;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionAlignment(uint64_t a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    sub_1CCC64584(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v4);
    char v2 = BYTE4(v7);
  }
  else
  {
    LODWORD(v8) = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    sub_1CCC644F0(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v4);
    char v2 = BYTE12(v6);
  }
  return 1 << v2;
}

uint64_t llvm::object::MachOObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::MachOObjectFile::isSectionBSS(uint64_t a1, unsigned int a2)
{
  int v2 = sub_1CCC547D0(a1, a2);
  BOOL v4 = v2 == 1 || v2 == 12;
  return v2 >= 0 && v4;
}

BOOL llvm::object::MachOObjectFile::isSectionVirtual(uint64_t a1, unsigned int a2)
{
  int v2 = sub_1CCC547D0(a1, a2);
  return v2 == 1 || v2 == 12;
}

BOOL llvm::object::MachOObjectFile::isSectionStripped(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    sub_1CCC64584(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)v4);
    int v2 = v6;
  }
  else
  {
    sub_1CCC644F0(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)v4);
    int v2 = v5;
  }
  return v2 == 0;
}

uint64_t llvm::object::MachOObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    sub_1CCC64584(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v5);
    uint64_t v3 = HIDWORD(v8);
  }
  else
  {
    LODWORD(v9) = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    sub_1CCC644F0(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v5);
    uint64_t v3 = DWORD1(v8);
  }
  return v2 | (v3 << 32);
}

double llvm::object::MachOObjectFile::getDysymtabLoadCommand@<D0>(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (_OWORD *)*((void *)this + 35);
  if (v2) {
    return sub_1CCC543D4((uint64_t)this, v2, a2);
  }
  *(void *)a2 = 0x500000000BLL;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  return result;
}

void llvm::object::MachOObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::MachOObjectFile::getRelocationOffset(uint64_t a1, unint64_t a2)
{
  int Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  BOOL v4 = Relocation >= 0 || *(_DWORD *)(a1 + 52) == 16777223;
  unsigned int v5 = Relocation & 0xFFFFFF;
  if (v4) {
    return Relocation;
  }
  return v5;
}

uint64_t llvm::object::MachOObjectFile::getRelocation(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 60) == 1)
  {
    if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      sub_1CCC64584(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      unsigned int v4 = DWORD2(v22);
    }
    else
    {
      LODWORD(v23) = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      sub_1CCC644F0(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      unsigned int v4 = v22;
    }
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    unsigned int v5 = *(_OWORD **)(a1 + 280);
    if (v5)
    {
      sub_1CCC543D4(a1, v5, (uint64_t)&v19);
      unsigned int v4 = v23;
      unsigned int v6 = DWORD2(v23);
    }
    else
    {
      unsigned int v6 = 0;
      unsigned int v4 = 0;
    }
    if (a2) {
      unsigned int v4 = v6;
    }
  }
  unint64_t v7 = *(void *)(a1 + 16);
  long long v8 = (unsigned int *)(v7 + v4 + 8 * HIDWORD(a2));
  if ((unint64_t)v8 < v7 || (unint64_t)(v8 + 2) > v7 + *(void *)(a1 + 24)) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  unsigned int v10 = *v8;
  unsigned int v11 = v8[1];
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  unsigned int v13 = bswap32(v10);
  unsigned int v14 = bswap32(v11);
  if (((1 << v12) & 0xAAC00) == 0)
  {
    unsigned int v13 = v10;
    unsigned int v14 = v11;
  }
  BOOL v15 = v12 > 0x13;
  if (v12 <= 0x13) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v10;
  }
  if (v15) {
    uint64_t v17 = v11;
  }
  else {
    uint64_t v17 = v14;
  }
  return v16 | (v17 << 32);
}

uint64_t llvm::object::MachOObjectFile::getRelocationSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) != 16777223 && (int)Relocation < 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  BOOL v6 = v5 > 0x13 || ((1 << v5) & 0xAAC00) == 0;
  int v7 = v6 ? HIDWORD(Relocation) & 0xFFFFFF : HIDWORD(Relocation) >> 8;
  if (!(v5 <= 0x13 && ((1 << v5) & 0xAAC00) != 0 ? BYTE4(Relocation) & 0x10 : (HIDWORD(Relocation) >> 27) & 1)) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v9 = *(long long **)(a1 + 272);
  if (v9)
  {
    sub_1CCC530A4((uint64_t)&v13, a1, v9);
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    int v10 = v14;
  }
  else
  {
    int v10 = 0;
  }
  if ((v5 & 0xFFFFFFFE) == 0x12) {
    int v11 = 16;
  }
  else {
    int v11 = 12;
  }
  return *(void *)(a1 + 16) + (v10 + v11 * v7);
}

uint64_t llvm::object::MachOObjectFile::getRelocationType(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) == 16777223 || (Relocation & 0x80000000) == 0)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    BOOL v6 = v5 > 0x13;
    int v7 = (1 << v5) & 0xAAC00;
    BOOL v8 = v6 || v7 == 0;
    unsigned int v4 = HIDWORD(Relocation) >> 28;
    if (!v8) {
      return BYTE4(Relocation) & 0xF;
    }
  }
  else
  {
    return BYTE3(Relocation) & 0xF;
  }
  return v4;
}

void *llvm::object::MachOObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376))(a1);
  int v7 = v6;
  BOOL v8 = 0;
  if (v6 <= 27)
  {
    size_t v9 = 0;
    switch(v7)
    {
      case 0:
        goto LABEL_23;
      case 1:
        if (v5 > 9) {
          goto LABEL_23;
        }
        int v10 = off_1E684EC18;
        goto LABEL_5;
      case 2:
      case 4:
        goto LABEL_24;
      case 3:
      case 5:
        if (v5 > 0xB) {
          goto LABEL_23;
        }
        int v10 = off_1E684EC68;
        goto LABEL_5;
      default:
        size_t v9 = 0;
        if (v7 != 21) {
          goto LABEL_24;
        }
        if (v5 > 0xF) {
          goto LABEL_23;
        }
        int v10 = off_1E684ECC8;
        break;
    }
    goto LABEL_5;
  }
  if (v6 > 40)
  {
    if (v6 == 42)
    {
      if (v5 <= 9)
      {
        int v10 = off_1E684EBC8;
        goto LABEL_5;
      }
    }
    else
    {
      size_t v9 = 0;
      if (v7 != 41) {
        goto LABEL_24;
      }
      if (v5 <= 5)
      {
        int v10 = off_1E684EB98;
        goto LABEL_5;
      }
    }
  }
  else if (v6 == 28)
  {
    if (v5 <= 0xB)
    {
      int v10 = off_1E684ED48;
      goto LABEL_5;
    }
  }
  else
  {
    size_t v9 = 0;
    if (v7 != 29) {
      goto LABEL_24;
    }
    if (v5 <= 0xF)
    {
      int v10 = off_1E684EDA8;
LABEL_5:
      BOOL v8 = v10[v5];
      size_t v9 = strlen(v8);
      goto LABEL_24;
    }
  }
LABEL_23:
  BOOL v8 = "Unknown";
  size_t v9 = 7;
LABEL_24:

  return sub_1CC22C75C(a3, v8, &v8[v9]);
}

uint64_t llvm::object::MachOObjectFile::symbol_begin(llvm::object::MachOObjectFile *this)
{
  uint64_t v2 = (long long *)*((void *)this + 34);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1CCC530A4((uint64_t)&v5, (uint64_t)this, v2);
  if (!*((void *)this + 34) || HIDWORD(v6) == 0) {
    return 0;
  }
  else {
    return llvm::object::MachOObjectFile::getSymbolByIndex(this, 0);
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolByIndex(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  uint64_t v2 = (long long *)*((void *)this + 34);
  if (!v2
    || ((uint64_t v8 = 0, v9 = 0, v10 = 0, sub_1CCC530A4((uint64_t)&v8, (uint64_t)this, v2), *((void *)this + 34))
      ? (BOOL v5 = HIDWORD(v9) > a2)
      : (BOOL v5 = 0),
        !v5))
  {
    llvm::report_fatal_error((llvm *)"Requested symbol index is out of range.", (const llvm::Twine *)1);
  }
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12) {
    int v6 = 16;
  }
  else {
    int v6 = 12;
  }
  return *((void *)this + 2) + v9 + v6 * a2;
}

uint64_t llvm::object::MachOObjectFile::symbol_end(llvm::object::MachOObjectFile *this)
{
  uint64_t v2 = (long long *)*((void *)this + 34);
  if (!v2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1CCC530A4((uint64_t)&v6, (uint64_t)this, v2);
  uint64_t result = 0;
  if (*((void *)this + 34)) {
    BOOL v4 = HIDWORD(v7) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12) {
      int v5 = 16;
    }
    else {
      int v5 = 12;
    }
    return *((void *)this + 2) + (v7 + v5 * HIDWORD(v7));
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getBytesInAddress(llvm::object::MachOObjectFile *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12) {
    return 8;
  }
  else {
    return 4;
  }
}

const char *llvm::object::MachOObjectFile::getFileFormatName(llvm::object::MachOObjectFile *this)
{
  int v1 = *((_DWORD *)this + 13);
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
  {
    uint64_t result = "Mach-O 64-bit x86-64";
    switch(v1)
    {
      case 16777223:
        return result;
      case 16777224:
      case 16777225:
      case 16777226:
      case 16777227:
      case 16777229:
      case 16777230:
      case 16777231:
      case 16777232:
      case 16777233:
        goto LABEL_19;
      case 16777228:
        uint64_t result = "Mach-O arm64";
        break;
      case 16777234:
        uint64_t result = "Mach-O 64-bit ppc64";
        break;
      case 16777235:
        uint64_t result = "Mach-O 64-bit Apple GPU";
        break;
      case 16777236:
        uint64_t result = "Mach-O 64-bit AMD GPU";
        break;
      case 16777237:
        uint64_t result = "Mach-O 64-bit Intel GPU";
        break;
      case 16777238:
        uint64_t result = "Mach-O 64-bit NVidia GPU";
        break;
      case 16777239:
        uint64_t result = "Mach-O 64-bit air";
        break;
      default:
        if (v1 == 33554444) {
          return "Mach-O arm64 (ILP32)";
        }
LABEL_19:
        uint64_t result = "Mach-O 64-bit unknown";
        break;
    }
  }
  else
  {
    if (v1 <= 17)
    {
      if (v1 == 7) {
        return "Mach-O 32-bit i386";
      }
      if (v1 == 12) {
        return "Mach-O arm";
      }
    }
    else
    {
      switch(v1)
      {
        case 18:
          return "Mach-O 32-bit ppc";
        case 23:
          return "Mach-O 32-bit air";
        case 33554444:
          return "Mach-O arm64 (ILP32)";
      }
    }
    return "Mach-O 32-bit unknown";
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this, char a2)
{
  if ((int)this <= 22)
  {
    switch(this)
    {
      case 7:
        return 41;
      case 0xC:
        return 1;
      case 0x12:
        return 21;
      default:
        return 0;
    }
  }
  else
  {
    switch((int)this)
    {
      case 16777223:
        return 42;
      case 16777224:
      case 16777225:
      case 16777226:
      case 16777227:
      case 16777229:
      case 16777230:
      case 16777231:
      case 16777232:
      case 16777233:
        return 0;
      case 16777228:
        return 3;
      case 16777234:
        return 23;
      case 16777235:
        if ((a2 & 0xC) != 0) {
          return 0;
        }
        else {
          return (a2 & 0xFu) + 26;
        }
      case 16777236:
        return 30;
      case 16777237:
        return 47;
      case 16777238:
        return 45;
      case 16777239:
        return 49;
      default:
        if (this == 23)
        {
          uint64_t result = 48;
        }
        else
        {
          if (this != 33554444) {
            return 0;
          }
          uint64_t result = 5;
        }
        break;
    }
  }
  return result;
}

void llvm::object::MachOObjectFile::tryGetCPUName(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  llvm::object::MachOObjectFile::getArchTriple((llvm::Triple *)*((unsigned int *)this + 13), 0, *((_DWORD *)this + 14) & 0xFFFFFF, &v7, (llvm::Triple *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v7)
  {
    size_t v3 = strlen(v7);
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v3;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v4;
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this)
{
  return llvm::object::MachOObjectFile::getArch((llvm::object::MachOObjectFile *)*((unsigned int *)this + 13), *((_DWORD *)this + 14));
}

BOOL llvm::object::MachOObjectFile::isRelocatableObject(llvm::object::MachOObjectFile *this)
{
  return *((_DWORD *)this + 15) == 1;
}

const char *llvm::object::MachOObjectFile::mapDebugSectionName(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = (const char *)a2;
  if (a3 == 14 && !(*a2 ^ 0x74735F6775626564 | *(void *)((char *)a2 + 6) ^ 0x7366666F5F727473)) {
    return "debug_str_offsets";
  }
  return result;
}

int64x2_t *sub_1CD6E4DDC@<X0>(int64x2_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)"", 0);
}

int8x16_t sub_1CD6E4DF0(int8x16_t *a1)
{
  int8x16_t v1 = vrev32q_s8(a1[1]);
  *a1 = vrev32q_s8(*a1);
  a1[1] = v1;
  int8x16_t v2 = vrev32q_s8(a1[3]);
  a1[2] = vrev32q_s8(a1[2]);
  a1[3] = v2;
  int8x16_t result = vrev32q_s8(a1[4]);
  a1[4] = result;
  return result;
}

double llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  if (a2 && *(_DWORD *)(a2 + 52) > a3)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    if ((*(_DWORD *)(a2 + 48) | 0x1000000) == 0xCBFEBABE)
    {
      uint64_t v4 = v3 + 20 * a3;
      unsigned int v5 = bswap32(*(_DWORD *)(v4 + 24));
      int8x16_t v6 = vrev32q_s8(*(int8x16_t *)(v4 + 8));
      *(int8x16_t *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 28) = v5;
    }
    else
    {
      uint64_t v7 = v3 + 32 * a3;
      int8x16_t v8 = vrev64q_s8(*(int8x16_t *)(v7 + 16));
      int8x8_t v9 = *(int8x8_t *)(v7 + 32);
      *(int8x8_t *)(a1 + 32) = vrev32_s8(*(int8x8_t *)(v7 + 8));
      *(int8x8_t *)v6.i8 = vrev32_s8(v9);
      *(int8x16_t *)(a1 + 40) = v8;
      *(void *)(a1 + 56) = v6.i64[0];
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return *(double *)v6.i64;
}

uint64_t llvm::object::MachOUniversalBinary::ObjectForArch::getAsIRObject@<X0>(llvm::object::MachOUniversalBinary::ObjectForArch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  if (!*(void *)this) {
    llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsIRObject() called when Parent is a nullptr", (const llvm::Twine *)1);
  }
  unint64_t v4 = *(void *)(v3 + 24);
  if ((*(_DWORD *)(v3 + 48) | 0x1000000) == 0xCBFEBABE)
  {
    unint64_t v5 = *((unsigned int *)this + 5);
    unint64_t v6 = *((unsigned int *)this + 6);
  }
  else
  {
    unint64_t v5 = *((void *)this + 5);
    unint64_t v6 = *((void *)this + 6);
  }
  if (v4 < v5) {
    unint64_t v5 = *(void *)(v3 + 24);
  }
  unint64_t v7 = v4 - v5;
  if (v7 >= v6) {
    unint64_t v7 = v6;
  }
  *(void *)&v9[0] = *(void *)(v3 + 16) + v5;
  *((void *)&v9[0] + 1) = v7;
  v9[1] = *(_OWORD *)(v3 + 32);
  return llvm::object::IRObjectFile::create(v9, a2);
}

void llvm::object::MachOUniversalBinary::ObjectForArch::getAsArchive(llvm::object::MachOUniversalBinary::ObjectForArch *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    unint64_t v2 = *(void *)(v1 + 24);
    if ((*(_DWORD *)(v1 + 48) | 0x1000000) == 0xCBFEBABE)
    {
      unint64_t v3 = *((unsigned int *)this + 5);
      unint64_t v4 = *((unsigned int *)this + 6);
    }
    else
    {
      unint64_t v3 = *((void *)this + 5);
      unint64_t v4 = *((void *)this + 6);
    }
    if (v2 < v3) {
      unint64_t v3 = *(void *)(v1 + 24);
    }
    unint64_t v5 = v2 - v3;
    if (v5 >= v4) {
      unint64_t v5 = v4;
    }
    v6[0] = *(void *)(v1 + 16) + v3;
    v6[1] = v5;
    long long v7 = *(_OWORD *)(v1 + 32);
    llvm::object::Archive::create((uint64_t)v6);
  }
  llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsArchive() called when Parent is a nullptr", (const llvm::Twine *)1);
}

void llvm::object::MachOUniversalBinary::ObjectForArch::getAsMetalLib(llvm::object::MachOUniversalBinary::ObjectForArch *this)
{
  if (*(void *)this) {
    sub_1CD6E5070();
  }
  llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsMetalLib() called when Parent is a nullptr", (const llvm::Twine *)1);
}

void sub_1CD6E5070()
{
  uint64_t v0 = 0;
  operator new();
}

void llvm::object::MachOUniversalBinary::create()
{
  uint64_t v0 = 0;
  operator new();
}

uint64_t llvm::object::MachOUniversalBinary::MachOUniversalBinary(uint64_t a1, _OWORD *a2, void *a3)
{
  long long v5 = a2[1];
  v190[0] = *a2;
  v190[1] = v5;
  llvm::object::Binary::Binary(a1, 1, (uint64_t)v190);
  *unint64_t v6 = &unk_1F2633860;
  v6[6] = 0;
  unint64_t v7 = v6[3];
  if (v7 <= 7)
  {
    LODWORD(v130) = 2;
    sub_1CCC16E40();
  }
  unint64_t v9 = __rev32(**(void **)(a1 + 16));
  *(void *)(a1 + 48) = v9;
  if (!HIDWORD(v9))
  {
    v188 = "contains zero architecture types";
    __int16 v189 = 259;
    uint64_t v13 = &v188;
    goto LABEL_16;
  }
  if (v9 != -872498498)
  {
    if (v9 == -889275713)
    {
      unsigned int v10 = (32 * HIDWORD(v9)) | 8;
      goto LABEL_9;
    }
    if (v9 != -889275714)
    {
      v186 = "bad magic number";
      __int16 v187 = 259;
      uint64_t v13 = &v186;
LABEL_16:
      sub_1CCC704AC((int)&v169, (llvm::Twine *)v13);
    }
  }
  unsigned int v10 = 20 * HIDWORD(v9) + 8;
LABEL_9:
  if (v7 < v10)
  {
    v130 = "fat_arch";
    v135[0] = 259;
    int v11 = "_64";
    if ((v9 & 0xFEFFFFFF) == 0xCAFEBABE) {
      int v11 = "";
    }
    char v12 = 1;
    char v184 = 1;
    if (*v11)
    {
      v182[0] = (uint64_t)v11;
      char v12 = 3;
    }
    char v183 = v12;
    sub_1CB8F1E58((uint64_t *)&v130, v182, (uint64_t)&v169);
    v180[0] = (uint64_t)" structs would extend past the end of the file";
    __int16 v181 = 259;
    sub_1CB8F1E58(&v169, v180, (uint64_t)v185);
    sub_1CCC704AC((int)v166, (llvm::Twine *)v185);
  }
  unsigned int v14 = 0;
  unint64_t v15 = v10;
  uint64_t v16 = (int *)v174;
  do
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v169, a1, v14);
    int v17 = *(_DWORD *)(v169 + 48);
    if ((v17 | 0x1000000) == 0xCBFEBABE) {
      uint64_t v18 = v172;
    }
    else {
      uint64_t v18 = v177;
    }
    if ((v17 | 0x1000000) == 0xCBFEBABE) {
      uint64_t v19 = v173;
    }
    else {
      uint64_t v19 = v178;
    }
    if (v19 + v18 > v7)
    {
      v166[0] = (uint64_t)"offset plus size of cputype (";
      __int16 v167 = 259;
      if ((v17 | 0x1000000) == 0xCBFEBABE) {
        v58 = v170;
      }
      else {
        v58 = v175;
      }
      int v59 = *(_DWORD *)v58;
      __int16 v165 = 264;
      LODWORD(v164[0]) = v59;
      sub_1CB8F1E58(v166, v164, (uint64_t)v180);
      v162[0] = (uint64_t)") cpusubtype (";
      __int16 v163 = 259;
      sub_1CB8F1E58(v180, v162, (uint64_t)v182);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        v60 = v171;
      }
      else {
        v60 = v176;
      }
      int v61 = *(_DWORD *)v60 & 0xFFFFFF;
      __int16 v161 = 264;
      LODWORD(v160[0]) = v61;
      sub_1CB8F1E58(v182, v160, (uint64_t)&v130);
      v158[0] = (uint64_t)") extends past the end of the file";
      __int16 v159 = 259;
      sub_1CB8F1E58((uint64_t *)&v130, v158, (uint64_t)v168);
      sub_1CCC704AC((int)v155, (llvm::Twine *)v168);
    }
    long long v20 = (uint64_t *)v174;
    if ((v17 | 0x1000000) != 0xCBFEBABE) {
      long long v20 = &v179;
    }
    if (*(_DWORD *)v20 >= 0x10u)
    {
      v158[0] = (uint64_t)"align (2^";
      __int16 v159 = 259;
      if ((v17 | 0x1000000) != 0xCBFEBABE) {
        uint64_t v16 = (int *)&v179;
      }
      int v62 = *v16;
      __int16 v156 = 264;
      LODWORD(v155[0]) = v62;
      sub_1CB8F1E58(v158, v155, (uint64_t)v160);
      v153[0] = (uint64_t)") too large for cputype (";
      __int16 v154 = 259;
      sub_1CB8F1E58(v160, v153, (uint64_t)v162);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        v63 = v170;
      }
      else {
        v63 = v175;
      }
      int v64 = *(_DWORD *)v63;
      __int16 v152 = 264;
      LODWORD(v151[0]) = v64;
      sub_1CB8F1E58(v162, v151, (uint64_t)v164);
      v149[0] = (uint64_t)") cpusubtype (";
      __int16 v150 = 259;
      sub_1CB8F1E58(v164, v149, (uint64_t)v166);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        v65 = v171;
      }
      else {
        v65 = v176;
      }
      int v66 = *(_DWORD *)v65 & 0xFFFFFF;
      __int16 v148 = 264;
      LODWORD(v147[0]) = v66;
      sub_1CB8F1E58(v166, v147, (uint64_t)v180);
      v145[0] = (uint64_t)") (maximum 2^";
      __int16 v146 = 259;
      sub_1CB8F1E58(v180, v145, (uint64_t)v182);
      __int16 v144 = 264;
      LODWORD(v143[0]) = 15;
      sub_1CB8F1E58(v182, v143, (uint64_t)&v130);
      v141[0] = (uint64_t)")";
      __int16 v142 = 259;
      sub_1CB8F1E58((uint64_t *)&v130, v141, (uint64_t)v157);
      v67 = (llvm::Twine *)v157;
LABEL_132:
      sub_1CCC704AC((int)v125, v67);
    }
    if ((v17 | 0x1000000) == 0xCBFEBABE) {
      uint64_t v21 = v172;
    }
    else {
      uint64_t v21 = v177;
    }
    long long v22 = (uint64_t *)v174;
    if ((v17 | 0x1000000) != 0xCBFEBABE) {
      long long v22 = &v179;
    }
    if ((v21 & ~(-1 << *(_DWORD *)v22)) != 0)
    {
      v158[0] = (uint64_t)"offset: ";
      __int16 v159 = 259;
      if ((v17 | 0x1000000) == 0xCBFEBABE) {
        uint64_t v68 = v172;
      }
      else {
        uint64_t v68 = v177;
      }
      v123[0] = v68;
      __int16 v156 = 268;
      v155[0] = (uint64_t)v123;
      sub_1CB8F1E58(v158, v155, (uint64_t)v160);
      v153[0] = (uint64_t)" for cputype (";
      __int16 v154 = 259;
      sub_1CB8F1E58(v160, v153, (uint64_t)v162);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        v69 = v170;
      }
      else {
        v69 = v175;
      }
      int v70 = *(_DWORD *)v69;
      __int16 v152 = 264;
      LODWORD(v151[0]) = v70;
      sub_1CB8F1E58(v162, v151, (uint64_t)v164);
      v149[0] = (uint64_t)") cpusubtype (";
      __int16 v150 = 259;
      sub_1CB8F1E58(v164, v149, (uint64_t)v166);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        v71 = v171;
      }
      else {
        v71 = v176;
      }
      int v72 = *(_DWORD *)v71 & 0xFFFFFF;
      __int16 v148 = 264;
      LODWORD(v147[0]) = v72;
      sub_1CB8F1E58(v166, v147, (uint64_t)v180);
      v145[0] = (uint64_t)") not aligned on it's alignment (2^";
      __int16 v146 = 259;
      sub_1CB8F1E58(v180, v145, (uint64_t)v182);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) != 0xCBFEBABE) {
        uint64_t v16 = (int *)&v179;
      }
      int v73 = *v16;
      __int16 v144 = 264;
      LODWORD(v143[0]) = v73;
      sub_1CB8F1E58(v182, v143, (uint64_t)&v130);
      v141[0] = (uint64_t)")";
      __int16 v142 = 259;
      sub_1CB8F1E58((uint64_t *)&v130, v141, (uint64_t)v140);
      v67 = (llvm::Twine *)v140;
      goto LABEL_132;
    }
    if ((v17 | 0x1000000) == 0xCBFEBABE) {
      unint64_t v23 = v172;
    }
    else {
      unint64_t v23 = v177;
    }
    if (v23 < v15)
    {
      v162[0] = (uint64_t)"cputype (";
      __int16 v163 = 259;
      if ((v17 | 0x1000000) == 0xCBFEBABE) {
        v74 = v170;
      }
      else {
        v74 = v175;
      }
      int v75 = *(_DWORD *)v74;
      __int16 v161 = 264;
      LODWORD(v160[0]) = v75;
      sub_1CB8F1E58(v162, v160, (uint64_t)v164);
      v158[0] = (uint64_t)") cpusubtype (";
      __int16 v159 = 259;
      sub_1CB8F1E58(v164, v158, (uint64_t)v166);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        v76 = v171;
      }
      else {
        v76 = v176;
      }
      int v77 = *(_DWORD *)v76 & 0xFFFFFF;
      __int16 v156 = 264;
      LODWORD(v155[0]) = v77;
      sub_1CB8F1E58(v166, v155, (uint64_t)v180);
      v153[0] = (uint64_t)") offset ";
      __int16 v154 = 259;
      sub_1CB8F1E58(v180, v153, (uint64_t)v182);
      if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
        uint64_t v78 = v172;
      }
      else {
        uint64_t v78 = v177;
      }
      v145[0] = v78;
      __int16 v152 = 268;
      v151[0] = (uint64_t)v145;
      sub_1CB8F1E58(v182, v151, (uint64_t)&v130);
      v149[0] = (uint64_t)" overlaps universal headers";
      __int16 v150 = 259;
      sub_1CB8F1E58((uint64_t *)&v130, v149, (uint64_t)v139);
      sub_1CCC704AC((int)v147, (llvm::Twine *)v139);
    }
    ++v14;
    unsigned int v24 = *(_DWORD *)(a1 + 52);
  }
  while (v14 < v24);
  if (v24)
  {
    unsigned int v25 = 0;
    uint64_t v26 = v170;
    v92 = (int *)v131;
    v89 = v132;
    v90 = v171;
    do
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v169, a1, v25++);
      unsigned int v27 = *(_DWORD *)(a1 + 52);
      if (v25 < v27)
      {
        uint64_t v28 = v169;
        unint64_t v29 = v172;
        uint64_t v30 = v173;
        unsigned int v31 = v25;
        uint64_t v32 = v177;
        uint64_t v91 = v178;
        do
        {
          llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v130, a1, v31);
          int v33 = *(_DWORD *)(v28 + 48);
          v34 = v170;
          if ((v33 | 0x1000000) != 0xCBFEBABE) {
            v34 = v175;
          }
          int v35 = *(_DWORD *)v34;
          int v36 = *((_DWORD *)v130 + 12);
          v37 = v131;
          if ((v36 | 0x1000000) != 0xCBFEBABE) {
            v37 = v135;
          }
          if (v35 == *v37)
          {
            v38 = v171;
            if ((v33 | 0x1000000) != 0xCBFEBABE) {
              v38 = v176;
            }
            v39 = v132;
            if ((v36 | 0x1000000) != 0xCBFEBABE) {
              v39 = v136;
            }
            if (((*(_DWORD *)v39 ^ *(_DWORD *)v38) & 0xFFFFFF) == 0)
            {
              v164[0] = (uint64_t)"contains two of the same architecture (cputype (";
              __int16 v165 = 259;
              if ((v33 | 0x1000000) != 0xCBFEBABE) {
                uint64_t v26 = v175;
              }
              int v87 = *(_DWORD *)v26;
              __int16 v163 = 264;
              LODWORD(v162[0]) = v87;
              sub_1CB8F1E58(v164, v162, (uint64_t)v166);
              v160[0] = (uint64_t)") cpusubtype (";
              __int16 v161 = 259;
              sub_1CB8F1E58(v166, v160, (uint64_t)v180);
              if ((*(_DWORD *)(v169 + 48) | 0x1000000) != 0xCBFEBABE) {
                v90 = v176;
              }
              int v88 = *(_DWORD *)v90 & 0xFFFFFF;
              __int16 v159 = 264;
              LODWORD(v158[0]) = v88;
              sub_1CB8F1E58(v180, v158, (uint64_t)v182);
              v155[0] = (uint64_t)"))";
              __int16 v156 = 259;
              sub_1CB8F1E58(v182, v155, (uint64_t)v129);
              sub_1CCC704AC((int)v153, (llvm::Twine *)v129);
            }
          }
          unint64_t v40 = v29;
          if ((v33 | 0x1000000) != 0xCBFEBABE) {
            unint64_t v40 = v32;
          }
          if ((v36 | 0x1000000) == 0xCBFEBABE) {
            unint64_t v41 = v133;
          }
          else {
            unint64_t v41 = v137;
          }
          if (v40 >= v41)
          {
            unint64_t v42 = v29;
            if ((v33 | 0x1000000) != 0xCBFEBABE) {
              unint64_t v42 = v32;
            }
            uint64_t v43 = (v36 | 0x1000000) == 0xCBFEBABE ? v133 : v137;
            uint64_t v44 = (v36 | 0x1000000) == 0xCBFEBABE ? v134 : v138;
            if (v42 < v44 + v43) {
              goto LABEL_140;
            }
          }
          uint64_t v45 = v29;
          if ((v33 | 0x1000000) != 0xCBFEBABE) {
            uint64_t v45 = v32;
          }
          uint64_t v46 = v30;
          if ((v33 | 0x1000000) != 0xCBFEBABE) {
            uint64_t v46 = v91;
          }
          unint64_t v47 = (v36 | 0x1000000) == 0xCBFEBABE ? v133 : v137;
          if (v46 + v45 > v47)
          {
            uint64_t v48 = v29;
            if ((v33 | 0x1000000) != 0xCBFEBABE) {
              uint64_t v48 = v32;
            }
            uint64_t v49 = v30;
            if ((v33 | 0x1000000) != 0xCBFEBABE) {
              uint64_t v49 = v91;
            }
            uint64_t v50 = (v36 | 0x1000000) == 0xCBFEBABE ? v133 : v137;
            uint64_t v51 = (v36 | 0x1000000) == 0xCBFEBABE ? v134 : v138;
            if (v49 + v48 < (unint64_t)(v51 + v50)) {
              goto LABEL_140;
            }
          }
          unint64_t v52 = v29;
          if ((v33 | 0x1000000) != 0xCBFEBABE) {
            unint64_t v52 = v32;
          }
          unint64_t v53 = (v36 | 0x1000000) == 0xCBFEBABE ? v133 : v137;
          if (v52 <= v53)
          {
            uint64_t v54 = v29;
            if ((v33 | 0x1000000) != 0xCBFEBABE) {
              uint64_t v54 = v32;
            }
            uint64_t v55 = v30;
            if ((v33 | 0x1000000) != 0xCBFEBABE) {
              uint64_t v55 = v91;
            }
            uint64_t v56 = (v36 | 0x1000000) == 0xCBFEBABE ? v133 : v137;
            uint64_t v57 = (v36 | 0x1000000) == 0xCBFEBABE ? v134 : v138;
            if (v55 + v54 >= (unint64_t)(v57 + v56))
            {
LABEL_140:
              v141[0] = (uint64_t)"cputype (";
              __int16 v142 = 259;
              if ((v33 | 0x1000000) != 0xCBFEBABE) {
                uint64_t v26 = v175;
              }
              int v79 = *(_DWORD *)v26;
              __int16 v126 = 264;
              LODWORD(v125[0]) = v79;
              sub_1CB8F1E58(v141, v125, (uint64_t)v143);
              v123[0] = (uint64_t)") cpusubtype (";
              __int16 v124 = 259;
              sub_1CB8F1E58(v143, v123, (uint64_t)v145);
              if ((*(_DWORD *)(v169 + 48) | 0x1000000) != 0xCBFEBABE) {
                v90 = v176;
              }
              int v80 = *(_DWORD *)v90 & 0xFFFFFF;
              __int16 v122 = 264;
              LODWORD(v121[0]) = v80;
              sub_1CB8F1E58(v145, v121, (uint64_t)v147);
              v119 = ") at offset ";
              __int16 v120 = 259;
              sub_1CB8F1E58(v147, (uint64_t *)&v119, (uint64_t)v149);
              if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
                uint64_t v81 = v172;
              }
              else {
                uint64_t v81 = v177;
              }
              uint64_t v116 = v81;
              __int16 v118 = 268;
              v117 = &v116;
              sub_1CB8F1E58(v149, (uint64_t *)&v117, (uint64_t)v151);
              v114 = " with a size of ";
              __int16 v115 = 259;
              sub_1CB8F1E58(v151, (uint64_t *)&v114, (uint64_t)v153);
              if ((*(_DWORD *)(v169 + 48) | 0x1000000) == 0xCBFEBABE) {
                uint64_t v82 = v173;
              }
              else {
                uint64_t v82 = v178;
              }
              uint64_t v111 = v82;
              __int16 v113 = 268;
              v112 = &v111;
              sub_1CB8F1E58(v153, (uint64_t *)&v112, (uint64_t)v155);
              v109 = ", overlaps cputype (";
              __int16 v110 = 259;
              sub_1CB8F1E58(v155, (uint64_t *)&v109, (uint64_t)v158);
              if ((*((_DWORD *)v130 + 12) | 0x1000000) != 0xCBFEBABE) {
                v92 = (int *)v135;
              }
              int v83 = *v92;
              __int16 v108 = 264;
              LODWORD(v107[0]) = v83;
              sub_1CB8F1E58(v158, v107, (uint64_t)v160);
              v105 = ") cpusubtype (";
              __int16 v106 = 259;
              sub_1CB8F1E58(v160, (uint64_t *)&v105, (uint64_t)v162);
              if ((*((_DWORD *)v130 + 12) | 0x1000000) != 0xCBFEBABE) {
                v89 = v136;
              }
              int v84 = *(_DWORD *)v89 & 0xFFFFFF;
              __int16 v104 = 264;
              LODWORD(v103[0]) = v84;
              sub_1CB8F1E58(v162, v103, (uint64_t)v164);
              v101 = ") at offset ";
              __int16 v102 = 259;
              sub_1CB8F1E58(v164, (uint64_t *)&v101, (uint64_t)v166);
              if ((*((_DWORD *)v130 + 12) | 0x1000000) == 0xCBFEBABE) {
                unint64_t v85 = v133;
              }
              else {
                unint64_t v85 = v137;
              }
              unint64_t v98 = v85;
              __int16 v100 = 268;
              v99 = (uint64_t *)&v98;
              sub_1CB8F1E58(v166, (uint64_t *)&v99, (uint64_t)v180);
              v96 = " with a size of ";
              __int16 v97 = 259;
              sub_1CB8F1E58(v180, (uint64_t *)&v96, (uint64_t)v182);
              if ((*((_DWORD *)v130 + 12) | 0x1000000) == 0xCBFEBABE) {
                uint64_t v86 = v134;
              }
              else {
                uint64_t v86 = v138;
              }
              uint64_t v93 = v86;
              __int16 v95 = 268;
              v94 = &v93;
              sub_1CB8F1E58(v182, (uint64_t *)&v94, (uint64_t)v127);
              sub_1CCC704AC((int)&v128, (llvm::Twine *)v127);
            }
          }
          ++v31;
          unsigned int v27 = *(_DWORD *)(a1 + 52);
        }
        while (v31 < v27);
      }
    }
    while (v25 < v27);
  }
  *a3 = 0;
  return a1;
}

void llvm::object::MachOUniversalBinary::getIRObjectForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v6);
  if (v7)
  {
    uint64_t v5 = v6[0];
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v5;
  }
  else
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsIRObject((llvm::object::MachOUniversalBinary::ObjectForArch *)v6, a4);
  }
}

void llvm::object::MachOUniversalBinary::getArchiveForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v6);
  if ((v7 & 1) == 0) {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsArchive((llvm::object::MachOUniversalBinary::ObjectForArch *)v6);
  }
  uint64_t v5 = v6[0];
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v5;
}

void llvm::object::MachOUniversalBinary::getMetalLibForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v6);
  if ((v7 & 1) == 0) {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsMetalLib((llvm::object::MachOUniversalBinary::ObjectForArch *)v6);
  }
  uint64_t v5 = v6[0];
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v5;
}

void sub_1CD6E63B4(llvm::object::Binary *a1)
{
  llvm::object::Binary::~Binary(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *llvm::object::MetalLibObjectFile::MetalLibObjectFile(void *a1, long long *a2, void *a3)
{
  long long v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  llvm::object::ObjectFile::ObjectFile((uint64_t)a1, 21, v11);
  *(void *)uint64_t v6 = &unk_1F2633890;
  *(unsigned char *)(v6 + 760) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  *(_OWORD *)(v6 + 592) = 0u;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 640) = 0u;
  *(_OWORD *)(v6 + 656) = 0u;
  *(_OWORD *)(v6 + 672) = 0u;
  *(_OWORD *)(v6 + 688) = 0u;
  *(_OWORD *)(v6 + 704) = 0u;
  *(_OWORD *)(v6 + 720) = 0u;
  *(_OWORD *)(v6 + 729) = 0u;
  *(unsigned char *)(v6 + 800) = 0;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_OWORD *)(v6 + 808) = 0u;
  *(_OWORD *)(v6 + 824) = 0u;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *(_OWORD *)(v6 + 872) = 0u;
  *(_OWORD *)(v6 + 888) = 0u;
  *(_OWORD *)(v6 + 904) = 0u;
  *(_OWORD *)(v6 + 920) = 0u;
  *(_OWORD *)(v6 + 936) = 0u;
  *(_OWORD *)(v6 + 952) = 0u;
  *(_OWORD *)(v6 + 968) = 0u;
  *(_OWORD *)(v6 + 984) = 0u;
  *(_OWORD *)(v6 + 1000) = 0u;
  *(_OWORD *)(v6 + 1016) = 0u;
  *(_OWORD *)(v6 + 1032) = 0u;
  *(_OWORD *)(v6 + 1048) = 0u;
  *(_OWORD *)(v6 + 1064) = 0u;
  *(_OWORD *)(v6 + 1080) = 0u;
  *(_OWORD *)(v6 + 1096) = 0u;
  *(_OWORD *)(v6 + 1112) = 0u;
  *(_OWORD *)(v6 + 1128) = 0u;
  *(_OWORD *)(v6 + 1144) = 0u;
  *(_OWORD *)(v6 + 1160) = 0u;
  *(_OWORD *)(v6 + 1176) = 0u;
  unint64_t v7 = *(void *)(v6 + 16) + *(void *)(v6 + 24);
  unsigned int v10 = *(uint64_t **)(v6 + 16);
  if (llvm::object::MetalLibObjectFile::parseFileMagic(v6, (unint64_t *)&v10, v7)
    && llvm::object::MetalLibObjectFile::parseFileVersion(a1, (unint64_t *)&v10, v7)
    && llvm::object::MetalLibObjectFile::parseFileType((uint64_t)a1, (unint64_t *)&v10, v7)
    && llvm::object::MetalLibObjectFile::parseTriple((uint64_t)a1, (unint64_t *)&v10, v7))
  {
    if ((unint64_t)(v10 + 1) > v7)
    {
      int v12 = 3;
      sub_1CCC784D0();
    }
    uint64_t v9 = *v10++;
    a1[10] = v9;
    if (llvm::object::MetalLibObjectFile::parseFunctionListInfo((uint64_t)a1, &v10, v7)
      && llvm::object::MetalLibObjectFile::parsePublicMetadataInfo((uint64_t)a1, &v10, v7)
      && llvm::object::MetalLibObjectFile::parsePrivateMetadataInfo((uint64_t)a1, &v10, v7)
      && llvm::object::MetalLibObjectFile::parseModuleListInfo((uint64_t)a1, &v10, v7)
      && llvm::object::MetalLibObjectFile::parseFunctionCount((uint64_t)a1)
      && llvm::object::MetalLibObjectFile::parseHeaderExtension((uint64_t)a1, a3)
      && llvm::object::MetalLibObjectFile::parseVariableCount((uint64_t)a1)
      && llvm::object::MetalLibObjectFile::parseImportedSymbolCount(a1)
      && llvm::object::MetalLibObjectFile::parseReflectionCount(a1))
    {
      llvm::object::MetalLibObjectFile::parseScriptCount(a1);
    }
  }
  if (!*a3) {
    *a3 = 0;
  }
  return a1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileMagic(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = (_DWORD *)*a2;
  unint64_t v4 = *a2 + 4;
  if (v4 > a3) {
    sub_1CCC784D0();
  }
  *a2 = v4;
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = 4;
  if (*v3 != 1112298573) {
    sub_1CCC78428();
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileVersion(_WORD *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = *a2 + 2;
  if (v3 > a3) {
LABEL_2:
  }
    sub_1CCC78368();
  unsigned int v4 = *(unsigned __int16 *)*a2;
  *a2 = v3;
  LOWORD(v4) = (v4 >> 15) | (2 * v4);
  a1[32] = v4;
  if ((v4 & 0xFFFE) != 2) {
    goto LABEL_6;
  }
  long long v5 = (unsigned __int16 *)*a2;
  uint64_t v6 = (unsigned __int16 *)(*a2 + 2);
  if ((unint64_t)v6 > a3) {
    goto LABEL_2;
  }
  int v7 = *v5;
  *a2 = (unint64_t)v6;
  a1[33] = v7;
  if (v7 != 2) {
LABEL_6:
  }
    sub_1CCC78368();
  uint64_t v8 = v5 + 2;
  if ((unint64_t)v8 > a3) {
    sub_1CCC78368();
  }
  uint64_t v9 = 0;
  int v10 = *v6;
  *a2 = (unint64_t)v8;
  a1[34] = v10;
  int v11 = (__int16 *)dword_1CFB2C220;
  while ((unsigned __int16)word_1CFB2C210[v9] != v10)
  {
    if (++v9 == 8) {
      goto LABEL_16;
    }
  }
  int v11 = &word_1CFB2C210[v9];
LABEL_16:
  if ((char *)v11 - (char *)word_1CFB2C210 == 16) {
    sub_1CCC78368();
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileType(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 68);
  v15[0] = (*(unsigned __int16 *)(a1 + 64) >> 1) | ((unint64_t)*(unsigned __int16 *)(a1 + 66) << 32) | 0x8000000000000000;
  v15[1] = v3 | 0x80000000;
  unint64_t v4 = *a2 + 1;
  if (v4 > a3)
  {
    unint64_t v12 = 0x8000000200000001;
    uint64_t v13 = 2147483652;
    int v5 = sub_1CC156834(v15, &v12);
    uint64_t v6 = "missing file type";
    if (v5) {
      uint64_t v6 = "missing reserved bytes";
    }
    unsigned int v14 = v6;
    sub_1CCC78590();
  }
  unsigned int v8 = *(unsigned __int8 *)*a2;
  *a2 = v4;
  *(unsigned char *)(a1 + 70) = (v8 >> 7) | (2 * v8);
  unint64_t v12 = 0x8000000200000001;
  uint64_t v13 = 2147483652;
  int v9 = sub_1CC156834(v15, &v12);
  __int16 v10 = *(_WORD *)(a1 + 70);
  if (v9)
  {
    uint64_t result = 1;
    if ((v10 & 1) != 0 && (v10 & 0xFE) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    if ((v10 & 0xF8) != 0)
    {
      LODWORD(v16) = 3;
      sub_1CCC78654();
    }
    unint64_t v12 = 0x8000000200000001;
    uint64_t v13 = 2147483654;
    if sub_1CC156834(v15, &v12) && (*(_WORD *)(a1 + 70))
    {
LABEL_9:
      LODWORD(v16) = 3;
      sub_1CCC78368();
    }
    return 1;
  }
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseTriple(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 68);
  v24[0] = (*(unsigned __int16 *)(a1 + 64) >> 1) | ((unint64_t)*(unsigned __int16 *)(a1 + 66) << 32) | 0x8000000000000000;
  v24[1] = v3 | 0x80000000;
  unint64_t v4 = *a2 + 1;
  if (v4 > a3)
  {
    unint64_t v21 = 0x8000000200000001;
    uint64_t v22 = 2147483654;
    int v5 = sub_1CC156834(v24, &v21);
    uint64_t v6 = "missing triple arch/platform";
    goto LABEL_3;
  }
  unsigned int v10 = *(unsigned __int8 *)*a2;
  *a2 = v4;
  *(_WORD *)(a1 + 70) = *(unsigned __int8 *)(a1 + 70) | (((v10 >> 7) & 1) << 8) | ((_WORD)v10 << 9);
  unint64_t v21 = 0x8000000200000001;
  uint64_t v22 = 2147483654;
  int v11 = sub_1CC156834(v24, &v21);
  unsigned int v12 = *(unsigned __int16 *)(a1 + 70);
  if (v11)
  {
    if (v12 >= 0x200 && (v12 & 0x100) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v13 = v12 >> 9;
    if (v13 > 0xC || ((1 << v13) & 0x1BDE) == 0)
    {
      LODWORD(v25) = 3;
      sub_1CCC784D0();
    }
  }
  unint64_t v14 = *a2 + 2;
  if (v14 > a3) {
    goto LABEL_13;
  }
  __int16 v15 = *(_WORD *)*a2;
  *a2 = v14;
  *(_WORD *)(a1 + 72) = v15;
  unint64_t v21 = 0x8000000200000001;
  uint64_t v22 = 2147483654;
  if (sub_1CC156834(v24, &v21) && *(_WORD *)(a1 + 72)) {
    goto LABEL_9;
  }
  unint64_t v16 = *a2 + 1;
  if (v16 > a3)
  {
LABEL_13:
    unint64_t v21 = 0x8000000200000001;
    uint64_t v22 = 2147483654;
    sub_1CC156834(v24, &v21);
    LODWORD(v23) = 3;
    sub_1CCC784D0();
  }
  char v17 = *(unsigned char *)*a2;
  *a2 = v16;
  *(unsigned char *)(a1 + 74) = v17;
  unint64_t v21 = 0x8000000200000001;
  uint64_t v22 = 2147483654;
  if (sub_1CC156834(v24, &v21) && *(unsigned char *)(a1 + 74)) {
    goto LABEL_9;
  }
  unint64_t v18 = *a2 + 1;
  if (v18 > a3)
  {
    unint64_t v21 = 0x8000000200000001;
    uint64_t v22 = 2147483654;
    int v5 = sub_1CC156834(v24, &v21);
    uint64_t v6 = "missing platform update";
LABEL_3:
    if (v5) {
      uint64_t v6 = "missing reserved bytes";
    }
    unint64_t v23 = v6;
    sub_1CCC78590();
  }
  char v19 = *(unsigned char *)*a2;
  *a2 = v18;
  *(unsigned char *)(a1 + 75) = v19;
  unint64_t v21 = 0x8000000200000001;
  uint64_t v22 = 2147483654;
  if (sub_1CC156834(v24, &v21))
  {
    if (*(unsigned char *)(a1 + 74))
    {
LABEL_9:
      LODWORD(v25) = 3;
      sub_1CCC78368();
    }
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFunctionListInfo(uint64_t a1, uint64_t **a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 + 1;
  if ((unint64_t)v4 > a3) {
    sub_1CCC78368();
  }
  uint64_t v6 = *v3;
  int v5 = v3 + 2;
  *a2 = v4;
  *(void *)(a1 + 88) = v6;
  if ((unint64_t)v5 > a3) {
    sub_1CCC78368();
  }
  uint64_t v7 = *v4;
  *a2 = v5;
  *(void *)(a1 + 96) = v7 + 4;
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parsePublicMetadataInfo(uint64_t a1, uint64_t **a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 + 1;
  if ((unint64_t)v4 > a3) {
    sub_1CCC78368();
  }
  uint64_t v6 = *v3;
  int v5 = v3 + 2;
  *a2 = v4;
  *(void *)(a1 + 104) = v6;
  if ((unint64_t)v5 > a3) {
    sub_1CCC78368();
  }
  uint64_t v7 = *v4;
  *a2 = v5;
  *(void *)(a1 + 112) = v7;
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parsePrivateMetadataInfo(uint64_t a1, uint64_t **a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 + 1;
  if ((unint64_t)v4 > a3) {
    sub_1CCC78368();
  }
  uint64_t v6 = *v3;
  int v5 = v3 + 2;
  *a2 = v4;
  *(void *)(a1 + 120) = v6;
  if ((unint64_t)v5 > a3) {
    sub_1CCC78368();
  }
  uint64_t v7 = *v4;
  *a2 = v5;
  *(void *)(a1 + 128) = v7;
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseModuleListInfo(uint64_t a1, uint64_t **a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 + 1;
  if ((unint64_t)v4 > a3) {
    sub_1CCC78368();
  }
  uint64_t v6 = *v3;
  int v5 = v3 + 2;
  *a2 = v4;
  *(void *)(a1 + 136) = v6;
  if ((unint64_t)v5 > a3) {
    sub_1CCC78368();
  }
  uint64_t v7 = *v4;
  *a2 = v5;
  *(void *)(a1 + 144) = v7;
  return 1;
}

BOOL llvm::object::MetalLibObjectFile::parseFunctionCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 88);
  if (v2 < v3) {
    unint64_t v3 = *(void *)(a1 + 24);
  }
  unint64_t v4 = (unsigned int *)(v1 + v3);
  unint64_t v5 = v1 + v2;
  uint64_t v6 = v4 + 1;
  if ((unint64_t)(v4 + 1) > v1 + v2) {
    sub_1CCC784D0();
  }
  unint64_t v9 = *v4;
  sub_1CD6E9E90(a1 + 280, v9);
  sub_1CCC771A0((void *)(a1 + 304), v9);
  sub_1CCC771D0(a1 + 328, v9 + ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3));
  if ((*(_WORD *)(a1 + 70) & 1) == 0)
  {
    LODWORD(v12) = -1;
    uint64_t v10 = *(void *)(a1 + 352);
    unint64_t v11 = (*(void *)(a1 + 360) - v10) >> 2;
    if (v9 <= v11)
    {
      if (v9 < v11) {
        *(void *)(a1 + 360) = v10 + 4 * v9;
      }
    }
    else
    {
      sub_1CC2DC07C(a1 + 352, v9 - v11, &v12);
    }
  }
  return (unint64_t)v6 <= v5;
}

uint64_t llvm::object::MetalLibObjectFile::parseHeaderExtension(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 248) = 0u;
  unint64_t v4 = (void *)(a1 + 248);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 68);
  v28[0] = (*(unsigned __int16 *)(a1 + 64) >> 1) | ((unint64_t)*(unsigned __int16 *)(a1 + 66) << 32) | 0x8000000000000000;
  v28[1] = v5 | 0x80000000;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v6 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v7 = (void *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  unsigned int v8 = (void *)(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  unint64_t v9 = (void *)(a1 + 200);
  *(_OWORD *)(a1 + 216) = 0u;
  uint64_t v10 = (void *)(a1 + 216);
  *(_OWORD *)(a1 + 232) = 0u;
  unint64_t v11 = (void *)(a1 + 232);
  v27[0] = 0x8000000200000001;
  v27[1] = 2147483651;
  uint64_t result = sub_1CC156834(v28, v27);
  if ((result & 1) == 0)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    unint64_t v14 = *(void *)(a1 + 24);
    unint64_t v15 = *(void *)(a1 + 96) + *(void *)(a1 + 88);
    if (v14 < v15) {
      unint64_t v15 = *(void *)(a1 + 24);
    }
    unint64_t v16 = (_DWORD *)(v13 + v15);
    unint64_t v17 = v13 + v14;
    unint64_t v18 = (char *)(v16 + 1);
    if ((unint64_t)(v16 + 1) > v17)
    {
LABEL_7:
      int v29 = 3;
      sub_1CCC78368();
    }
    uint64_t v25 = v4 - 11;
    while (1)
    {
      uint64_t v26 = v18;
      if (*v16 == 1129468744)
      {
        uint64_t result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v26, v17, (uint64_t)"HSRC", 4, v6, v25);
        if (!result) {
          return result;
        }
        *(unsigned char *)(a1 + 472) = 0;
        goto LABEL_21;
      }
      if (*v16 == 1146245960)
      {
        uint64_t result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v26, v17, (uint64_t)"HSRD", 4, v6, v25);
        if (!result) {
          return result;
        }
        *(unsigned char *)(a1 + 472) = 1;
        goto LABEL_21;
      }
      if (*v16 == 1347572552)
      {
        unint64_t v21 = v17;
        uint64_t v22 = "HSRP";
        unint64_t v23 = v7;
        unsigned int v24 = v4 - 9;
      }
      else if (*v16 == 1314473032)
      {
        unint64_t v21 = v17;
        uint64_t v22 = "HDYN";
        unint64_t v23 = v8;
        unsigned int v24 = v4 - 7;
      }
      else if (*v16 == 1414745174)
      {
        unint64_t v21 = v17;
        uint64_t v22 = "VLST";
        unint64_t v23 = v9;
        unsigned int v24 = v4 - 5;
      }
      else if (*v16 == 1414745161)
      {
        unint64_t v21 = v17;
        uint64_t v22 = "ILST";
        unint64_t v23 = v10;
        unsigned int v24 = v4 - 3;
      }
      else if (*v16 == 1414745170)
      {
        unint64_t v21 = v17;
        uint64_t v22 = "RLST";
        unint64_t v23 = v11;
        unsigned int v24 = v4 - 1;
      }
      else
      {
        if (*v16 != 1414745171)
        {
          if (*v16 == 1145656661)
          {
            uint64_t result = (uint64_t)sub_1CCC77354(v27, a1, (unint64_t *)&v26, v17);
            uint64_t v20 = v27[0];
            *a2 = v27[0];
            if (v20) {
              return 0;
            }
          }
          else
          {
            if (*v16 == 1413762629) {
              return 1;
            }
            char v19 = (char *)v16 + 6;
            if ((unint64_t)v19 > v17)
            {
              int v29 = 3;
              sub_1CCC786FC();
            }
            uint64_t v26 = &v19[*(unsigned __int16 *)v18];
          }
          goto LABEL_21;
        }
        unint64_t v21 = v17;
        uint64_t v22 = "SLST";
        unint64_t v23 = v4;
        unsigned int v24 = v4 + 1;
      }
      uint64_t result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v26, v21, (uint64_t)v22, 4, v23, v24);
      if ((result & 1) == 0) {
        return 0;
      }
LABEL_21:
      unint64_t v16 = v26;
      unint64_t v18 = v26 + 4;
      if ((unint64_t)(v26 + 4) > v17) {
        goto LABEL_7;
      }
    }
  }
  return 1;
}

void llvm::object::MetalLibObjectFile::~MetalLibObjectFile(llvm::object::MetalLibObjectFile *this)
{
  *(void *)this = &unk_1F2633890;
  unint64_t v2 = (void *)*((void *)this + 96);
  unint64_t v3 = (void *)*((void *)this + 97);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2 & 3;
      unint64_t v5 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
      if (v4) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v5 == 0;
      }
      if (v6)
      {
        if (v4 != 1 || v5 == 0)
        {
          if (v4 == 2) {
            unint64_t v9 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v9 = 0;
          }
          uint64_t v10 = 0x1060C40A5AF3ED7;
        }
        else
        {
          unint64_t v9 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v10 = 0x1000C40D7A84E51;
        }
      }
      else
      {
        unsigned int v8 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v8;
          operator delete(v8);
        }
        unint64_t v9 = v5;
        uint64_t v10 = 0x20C40960023A9;
      }
      MEMORY[0x1D25D9CE0](v9, v10);
      ++v2;
    }
    while (v2 != v3);
    unint64_t v2 = (void *)*((void *)this + 96);
  }
  if (v2)
  {
    *((void *)this + 97) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  unint64_t v16 = (void **)((char *)this + 672);
  sub_1CCC782D0(&v16);
  unint64_t v16 = (void **)((char *)this + 648);
  sub_1CCC782D0(&v16);
  unint64_t v16 = (void **)((char *)this + 624);
  sub_1CCC782D0(&v16);
  unint64_t v16 = (void **)((char *)this + 600);
  sub_1CCC78238(&v16);
  unint64_t v16 = (void **)((char *)this + 576);
  sub_1CCC781A0(&v16);
  unint64_t v16 = (void **)((char *)this + 536);
  sub_1CCC78118(&v16);
  unint64_t v16 = (void **)((char *)this + 512);
  sub_1CCC78080(&v16);
  unint64_t v11 = (void *)*((void *)this + 56);
  if (v11)
  {
    *((void *)this + 57) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 53);
  if (v12)
  {
    *((void *)this + 54) = v12;
    operator delete(v12);
  }
  unint64_t v16 = (void **)((char *)this + 400);
  sub_1CCC77FE8(&v16);
  uint64_t v13 = (void *)*((void *)this + 47);
  if (v13)
  {
    *((void *)this + 48) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 44);
  if (v14)
  {
    *((void *)this + 45) = v14;
    operator delete(v14);
  }
  unint64_t v16 = (void **)((char *)this + 328);
  sub_1CCC77F60(&v16);
  unint64_t v15 = (void *)*((void *)this + 38);
  if (v15)
  {
    sub_1CCC77EF0((void *)this + 38, v15);
    operator delete(*((void **)this + 38));
  }
  unint64_t v16 = (void **)((char *)this + 280);
  sub_1CCC77E68(&v16);

  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  uint64_t vars8;

  llvm::object::MetalLibObjectFile::~MetalLibObjectFile(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::object::MetalLibObjectFile::materializeFunctionNo(llvm::object::MetalLibObjectFile *this)
{
}

void llvm::object::MetalLibObjectFile::materializeVariableNo(llvm::object::MetalLibObjectFile *this)
{
}

void *llvm::object::MetalLibObjectFile::getSymbolFlags@<X0>(void *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[36] - result[35];
  if (a2 >= (unint64_t)(((uint64_t)(result[76] - result[75]) >> 3) + (v3 >> 3))) {
    int v4 = 1;
  }
  else {
    int v4 = 66;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v4 | ((a2 < (unint64_t)(v3 >> 3)) << 11);
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::symbol_begin(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::symbol_end(llvm::object::MetalLibObjectFile *this)
{
  return ((*((void *)this + 76) - *((void *)this + 75)) >> 3)
       + ((*((void *)this + 36) - *((void *)this + 35)) >> 3)
       + ((*((void *)this + 79) - *((void *)this + 78)) >> 3);
}

llvm::object::MetalLibObjectFile *llvm::object::MetalLibObjectFile::getSymbolName@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 35);
  uint64_t v5 = *((void *)this + 36) - v4;
  if (a2 < (unint64_t)(v5 >> 3))
  {
    uint64_t v6 = *(void *)(v4 + 8 * a2);
    if (!v6) {
      llvm::object::MetalLibObjectFile::materializeFunctionNo(this);
    }
    uint64_t v7 = (long long *)(v6 + 104);
    uint64_t v8 = *(void *)(v6 + 112);
    unint64_t v9 = (long long *)(v6 + 8);
    if (v8) {
      unint64_t v9 = v7;
    }
LABEL_5:
    *(unsigned char *)(a3 + 16) &= ~1u;
    long long v10 = *v9;
    goto LABEL_6;
  }
  uint64_t v11 = *((void *)this + 75);
  unint64_t v12 = (v5 >> 3) + ((*((void *)this + 76) - v11) >> 3);
  BOOL v13 = a2 >= v12;
  unint64_t v14 = a2 - v12;
  if (!v13)
  {
    uint64_t v15 = *(void *)(v11 + 8 * (a2 - (v5 >> 3)));
    if (!v15) {
      llvm::object::MetalLibObjectFile::materializeVariableNo(this);
    }
    unint64_t v9 = (long long *)(v15 + 88);
    uint64_t v16 = *(void *)(v15 + 96);
    unint64_t v17 = (long long *)(v15 + 8);
    if (!v16) {
      unint64_t v9 = v17;
    }
    goto LABEL_5;
  }
  uint64_t v18 = *(void *)(*((void *)this + 78) + 8 * v14);
  if (!v18) {
    llvm::object::MetalLibObjectFile::materializeImportedSymbolNo(this);
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  long long v10 = *(_OWORD *)(v18 + 8);
LABEL_6:
  *(_OWORD *)a3 = v10;
  return this;
}

void llvm::object::MetalLibObjectFile::materializeImportedSymbolNo(llvm::object::MetalLibObjectFile *this)
{
}

void *llvm::object::MetalLibObjectFile::getSymbolType@<X0>(void *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[36] - result[35];
  if (a2 >= (unint64_t)(v3 >> 3))
  {
    BOOL v5 = a2 < (unint64_t)((v3 >> 3) + ((uint64_t)(result[76] - result[75]) >> 3));
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v4 = 2 * v5;
  }
  else
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v4 = 5;
  }
  *(_DWORD *)a3 = v4;
  return result;
}

void *llvm::object::MetalLibObjectFile::getSymbolSection@<X0>(void *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[36] - result[35];
  if (a2 >= (unint64_t)(v3 >> 3))
  {
    unint64_t v5 = (v3 >> 3) + ((uint64_t)(result[76] - result[75]) >> 3);
    if (a2 >= v5)
    {
      uint64_t v4 = 11;
      if (a2 < v5 + ((uint64_t)(result[79] - result[78]) >> 3)) {
        uint64_t v4 = 8;
      }
    }
    else
    {
      uint64_t v4 = 7;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::dynamic_symbol_end(llvm::object::MetalLibObjectFile *this)
{
  return (((*((void *)this + 76) - *((void *)this + 75)) >> 3)
        + ((*((void *)this + 36) - *((void *)this + 35)) >> 3)) | 0x100000000;
}

void llvm::object::MetalLibObjectFile::findDynamicSymbol(void *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  __s1 = (void *)0x1FFFFFFFFLL;
  (*(void (**)(void *, void **))(*a1 + 24))(a1, &__s1);
  uint64_t v8 = (uint64_t)__s1;
  *(void *)&long long v21 = __s1;
  *((void *)&v21 + 1) = a1;
  unint64_t v9 = (void *)((((a1[76] - a1[75]) >> 3) + ((a1[36] - a1[35]) >> 3)) | 0x100000000);
  if (__s1 == v9)
  {
LABEL_2:
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = v8;
    *(void *)(a4 + 8) = a1;
  }
  else
  {
    while (1)
    {
      __s1 = v24;
      long long v23 = xmmword_1CD96DBD0;
      int v13 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      unint64_t v12 = &unk_1F2646FA8;
      p_s1 = &__s1;
      int v19 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      (*(void (**)(uint64_t *__return_ptr))(**((void **)&v21 + 1) + 32))(&v11);
      uint64_t v10 = v11;
      if (v11)
      {
        *(unsigned char *)(a4 + 16) |= 1u;
        *(void *)a4 = v10;
        goto LABEL_13;
      }
      if ((void)v23 == a3 && (!a3 || !memcmp(__s1, a2, a3))) {
        break;
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
      if (__s1 != v24) {
        free(__s1);
      }
      (*(void (**)(void, long long *))(**((void **)&v21 + 1) + 24))(*((void *)&v21 + 1), &v21);
      if ((void *)v21 == v9)
      {
        uint64_t v8 = (((a1[76] - a1[75]) >> 3) + ((a1[36] - a1[35]) >> 3)) | 0x100000000;
        goto LABEL_2;
      }
    }
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(_OWORD *)a4 = v21;
LABEL_13:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
    if (__s1 != v24) {
      free(__s1);
    }
  }
}

void *llvm::object::MetalLibObjectFile::moveSectionNext(void *result, _DWORD *a2)
{
  switch(*a2)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_5;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_8;
    case 6:
      goto LABEL_9;
    case 7:
      goto LABEL_10;
    case 8:
      goto LABEL_11;
    case 9:
      goto LABEL_12;
    case 0xA:
      goto LABEL_13;
    default:
      *a2 = 1;
      if (result[14]) {
        return result;
      }
LABEL_4:
      *a2 = 2;
      if (!result[16])
      {
LABEL_5:
        *a2 = 3;
        if (!result[18])
        {
LABEL_6:
          *a2 = 4;
          if (!result[20])
          {
LABEL_7:
            *a2 = 5;
            if (!result[22])
            {
LABEL_8:
              *a2 = 6;
              if (!result[24])
              {
LABEL_9:
                *a2 = 7;
                if (!result[26])
                {
LABEL_10:
                  *a2 = 8;
                  if (!result[28])
                  {
LABEL_11:
                    *a2 = 9;
                    if (!result[30])
                    {
LABEL_12:
                      *a2 = 10;
                      if (!result[32]) {
LABEL_13:
                      }
                        *a2 = 11;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
  }
}

llvm::object *llvm::object::MetalLibObjectFile::getSectionName@<X0>(llvm::object *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 0:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "FUNCTION_LIST";
      goto LABEL_12;
    case 1:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "PUBLIC_METADATA";
      goto LABEL_15;
    case 2:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "PRIVATE_METADATA";
      uint64_t v5 = 16;
      goto LABEL_18;
    case 3:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "MODULE_LIST";
      goto LABEL_17;
    case 4:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "SOURCES";
      goto LABEL_9;
    case 5:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "PACKING";
LABEL_9:
      uint64_t v5 = 7;
      goto LABEL_18;
    case 6:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "DYNAMIC_HEADER";
      uint64_t v5 = 14;
      goto LABEL_18;
    case 7:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "VARIABLE_LIST";
LABEL_12:
      uint64_t v5 = 13;
      goto LABEL_18;
    case 8:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "IMPORTED_SYMBOL_LIST";
      uint64_t v5 = 20;
      goto LABEL_18;
    case 9:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "REFLECTION_LIST";
LABEL_15:
      uint64_t v5 = 15;
      goto LABEL_18;
    case 10:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v4 = "SCRIPT_LIST";
LABEL_17:
      uint64_t v5 = 11;
LABEL_18:
      *(void *)a3 = v4;
      *(void *)(a3 + 8) = v5;
      break;
    default:
      *(void *)&v7.__val_ = llvm::object::object_category(result);
      uint64_t result = (llvm::object *)llvm::errorCodeToError((llvm *)6, v7, &v6);
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v6;
      break;
  }
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionAddress(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v2 = a1 + 104;
      break;
    case 2:
      uint64_t v2 = a1 + 120;
      break;
    case 3:
      uint64_t v2 = a1 + 136;
      break;
    case 4:
      uint64_t v2 = a1 + 152;
      break;
    case 5:
      uint64_t v2 = a1 + 168;
      break;
    case 6:
      uint64_t v2 = a1 + 184;
      break;
    case 7:
      uint64_t v2 = a1 + 200;
      break;
    case 8:
      uint64_t v2 = a1 + 216;
      break;
    case 9:
      uint64_t v2 = a1 + 232;
      break;
    case 10:
      uint64_t v2 = a1 + 248;
      break;
    default:
      uint64_t v2 = a1 + 88;
      break;
  }
  return *(void *)v2;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionSize(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v2 = a1 + 112;
      break;
    case 2:
      uint64_t v2 = a1 + 128;
      break;
    case 3:
      uint64_t v2 = a1 + 144;
      break;
    case 4:
      uint64_t v2 = a1 + 160;
      break;
    case 5:
      uint64_t v2 = a1 + 176;
      break;
    case 6:
      uint64_t v2 = a1 + 192;
      break;
    case 7:
      uint64_t v2 = a1 + 208;
      break;
    case 8:
      uint64_t v2 = a1 + 224;
      break;
    case 9:
      uint64_t v2 = a1 + 240;
      break;
    case 10:
      uint64_t v2 = a1 + 256;
      break;
    default:
      uint64_t v2 = a1 + 96;
      break;
  }
  return *(void *)v2;
}

void *llvm::object::MetalLibObjectFile::getSectionContents@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[13];
      unint64_t v6 = result[14];
      break;
    case 2:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[15];
      unint64_t v6 = result[16];
      break;
    case 3:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[17];
      unint64_t v6 = result[18];
      break;
    case 4:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[19];
      unint64_t v6 = result[20];
      break;
    case 5:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[21];
      unint64_t v6 = result[22];
      break;
    case 6:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[23];
      unint64_t v6 = result[24];
      break;
    case 7:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[25];
      unint64_t v6 = result[26];
      break;
    case 8:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[27];
      unint64_t v6 = result[28];
      break;
    case 9:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[29];
      unint64_t v6 = result[30];
      break;
    case 10:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[31];
      unint64_t v6 = result[32];
      break;
    default:
      uint64_t v3 = result[2];
      unint64_t v4 = result[3];
      unint64_t v5 = result[11];
      unint64_t v6 = result[12];
      break;
  }
  if (v4 < v5) {
    unint64_t v5 = v4;
  }
  uint64_t v7 = v3 + v5;
  unint64_t v8 = v4 - v5;
  if (v8 >= v6) {
    unint64_t v8 = v6;
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::MetalLibObjectFile::isSectionText(uint64_t a1, int a2)
{
  return a2 == 3;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionData()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::section_begin(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::section_end(llvm::object::MetalLibObjectFile *this)
{
  return 11;
}

uint64_t llvm::object::MetalLibObjectFile::getBytesInAddress(llvm::object::MetalLibObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::MetalLibObjectFile *))(*(void *)this + 376))(this) == 48) {
    return 4;
  }
  else {
    return 8;
  }
}

const char *llvm::object::MetalLibObjectFile::getFileFormatName(llvm::object::MetalLibObjectFile *this)
{
  return "MetalLib";
}

uint64_t llvm::object::MetalLibObjectFile::isRelocatableObject(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

char *llvm::object::MetalLibObjectFile::getUUID(llvm::object::MetalLibObjectFile *this)
{
  if (*((void *)this + 34)) {
    return (char *)*((void *)this + 33);
  }
  uint64_t v2 = (char *)this + 744;
  if (!*((unsigned char *)this + 760))
  {
    uint64_t v4 = llvm::MD5::hash(*((int **)this + 2), *((void *)this + 3));
    int v5 = *((unsigned __int8 *)this + 760);
    *((void *)this + 93) = v4;
    *((void *)this + 94) = v6;
    if (!v5) {
      *((unsigned char *)this + 760) = 1;
    }
  }
  return v2;
}

void *llvm::object::MetalLibObjectFile::libraryInstallName@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  if (this[71]
    || (this = (void *)llvm::object::MetalLibObjectFile::materializeDynamicHeader((llvm::object::MetalLibObjectFile *)this, &v5), (uint64_t v4 = v5) == 0))
  {
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *((_OWORD *)v2 + 35);
  }
  else
  {
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v4;
  }
  return this;
}

void sub_1CD6E9E90(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 > v4)
  {
    unint64_t v8 = a2 - v4;
    sub_1CD6EAC98((char **)a1, v8);
  }
  else if (a2 < v4)
  {
    uint64_t v5 = *(void *)a1 + 8 * a2;
    while (v3 != (void *)v5)
    {
      uint64_t v7 = *--v3;
      uint64_t v6 = v7;
      *uint64_t v3 = 0;
      if (v7) {
        sub_1CCC787A4(v6);
      }
    }
    *(void *)(a1 + 8) = v5;
  }
}

uint64_t llvm::object::MetalLibObjectFile::parseExtensionInfo(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v7 = (unsigned __int16 *)*a2;
  unint64_t v8 = *a2 + 2;
  if (v8 > a3)
  {
    __int16 v22 = 1283;
    unint64_t v9 = "missing ";
LABEL_3:
    int v19 = v9;
    uint64_t v20 = a4;
    uint64_t v21 = a5;
    uint64_t v10 = " token data size";
    goto LABEL_4;
  }
  int v11 = *v7;
  *a2 = v8;
  if (v11 != 16)
  {
    __int16 v22 = 1283;
    unint64_t v9 = "bad ";
    goto LABEL_3;
  }
  unint64_t v12 = (uint64_t *)(v7 + 5);
  if ((unint64_t)(v7 + 5) > a3)
  {
    __int16 v22 = 1283;
    int v19 = "missing ";
    uint64_t v20 = a4;
    uint64_t v21 = a5;
    uint64_t v10 = " section offset";
    goto LABEL_4;
  }
  uint64_t v13 = *(void *)(v7 + 1);
  *a2 = (unint64_t)v12;
  *a6 = v13;
  uint64_t v14 = v7 + 9;
  if ((unint64_t)v14 > a3)
  {
    __int16 v22 = 1283;
    int v19 = "missing ";
    uint64_t v20 = a4;
    uint64_t v21 = a5;
    uint64_t v10 = " section size";
LABEL_4:
    char v17 = v10;
    __int16 v18 = 259;
    sub_1CB8F1E58((uint64_t *)&v19, (uint64_t *)&v17, (uint64_t)v23);
    operator new();
  }
  uint64_t v15 = *v12;
  *a2 = (unint64_t)v14;
  *a7 = v15;
  return 1;
}

void sub_1CD6EA0A4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 > v4)
  {
    unint64_t v8 = a2 - v4;
    sub_1CD6EAFB8((char **)a1, v8);
  }
  else if (a2 < v4)
  {
    uint64_t v5 = *(void *)a1 + 8 * a2;
    while (v3 != (void *)v5)
    {
      uint64_t v7 = *--v3;
      uint64_t v6 = v7;
      *uint64_t v3 = 0;
      if (v7) {
        MEMORY[0x1D25D9CE0](v6, 0x1050C40B09E53CALL);
      }
    }
    *(void *)(a1 + 8) = v5;
  }
}

void sub_1CD6EA144(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 > v4)
  {
    unint64_t v8 = a2 - v4;
    sub_1CD6EB178((char **)a1, v8);
  }
  else if (a2 < v4)
  {
    uint64_t v5 = *(void *)a1 + 8 * a2;
    while (v3 != (void *)v5)
    {
      uint64_t v7 = *--v3;
      uint64_t v6 = v7;
      *uint64_t v3 = 0;
      if (v7) {
        MEMORY[0x1D25D9CE0](v6, 0x1050C40A5B97131);
      }
    }
    *(void *)(a1 + 8) = v5;
  }
}

uint64_t sub_1CD6EA1E4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  unint64_t v4 = (unsigned int *)(a1 + 12);
  uint64_t v5 = 4;
  uint64_t v6 = 4;
  do
  {
    if (*v4)
    {
      unsigned int v7 = *(v4 - 1);
      if (v7 == a2)
      {
        uint64_t v6 = v2;
      }
      else if (v7 < a2 && (v5 == 4 || *(_DWORD *)(a1 + 16 * v5 + 8) < v7))
      {
        uint64_t v5 = v2;
      }
      if (v3 <= *v4) {
        unsigned int v3 = *v4;
      }
    }
    ++v2;
    v4 += 4;
  }
  while (v2 != 4);
  if (v6 == 4)
  {
    uint64_t v6 = v5;
  }
  else
  {
    BOOL v8 = __CFADD__(v3, 1);
    int v9 = v3 + 1;
    if (v8)
    {
      for (uint64_t i = 0; i != 64; i += 16)
        *(_DWORD *)(a1 + 12 + i) = *(_DWORD *)(a1 + 12 + i) != 0;
      int v9 = 2;
    }
    *(_DWORD *)(a1 + 16 * v6 + 12) = v9;
  }
  return a1 + 16 * v6;
}

uint64_t sub_1CD6EA2A8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  uint64_t v5 = (unsigned int *)(result + 12);
  uint64_t v6 = 4;
  uint64_t v7 = 4;
  uint64_t v8 = 4;
  do
  {
    unsigned int v9 = *v5;
    if (*v5)
    {
      if (*(v5 - 1) == a3)
      {
        uint64_t v8 = v3;
      }
      else if (v6 == 4 || *(_DWORD *)(result + 16 * v6 + 12) > v9)
      {
        uint64_t v6 = v3;
      }
      if (v4 <= v9) {
        unsigned int v4 = *v5;
      }
    }
    else
    {
      uint64_t v7 = v3;
    }
    ++v3;
    v5 += 4;
  }
  while (v3 != 4);
  BOOL v10 = __CFADD__(v4, 1);
  int v11 = v4 + 1;
  if (v10)
  {
    for (uint64_t i = 0; i != 64; i += 16)
      *(_DWORD *)(result + 12 + i) = *(_DWORD *)(result + 12 + i) != 0;
    int v11 = 2;
  }
  if (v7 != 4) {
    uint64_t v6 = v7;
  }
  if (v8 != 4) {
    uint64_t v6 = v8;
  }
  uint64_t v13 = result + 16 * v6;
  *(void *)uint64_t v13 = a2;
  *(_DWORD *)(v13 + 8) = a3;
  *(_DWORD *)(v13 + 12) = v11;
  return result;
}

char *sub_1CD6EA36C(char *result, llvm::object::MetalLibObjectFile *this, unsigned int a3, uint64_t *a4, uint64_t *a5, _DWORD **a6, _DWORD **a7, char **a8, uint64_t a9)
{
  unsigned int v9 = result;
  unsigned int v20 = a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*a4 + 8 * a3);
  if (!v11) {
    llvm::object::MetalLibObjectFile::materializeFunctionNo(this);
  }
  unint64_t v12 = a4[1] - v10;
  if ((v12 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v13 = (v12 >> 3);
    uint64_t v14 = *a6;
    uint64_t v15 = a3;
    while (!*(void *)v10 || !v15 || *v14 == -1 || *(void *)(*(void *)v10 + 64) != *(void *)(v11 + 64))
    {
      --v15;
      ++v14;
      v10 += 8;
      if (!--v13) {
        goto LABEL_9;
      }
    }
    (*a6)[a3] = *v14;
  }
  else
  {
LABEL_9:
    uint64_t v16 = *a5;
    unint64_t v17 = a5[1] - *a5;
    if ((v17 & 0x7FFFFFFF8) == 0) {
LABEL_15:
    }
      operator new();
    __int16 v18 = *a7;
    uint64_t v19 = (v17 >> 3);
    while (!*(void *)v16 || *v18 == -1 || *(void *)(*(void *)v16 + 56) != *(void *)(v11 + 64))
    {
      ++v18;
      v16 += 8;
      if (!--v19) {
        goto LABEL_15;
      }
    }
    (*a6)[a3] = *v18;
    uint64_t result = sub_1CD6EB514(a8, (uint64_t)&(*a8)[4 * *v18], (char *)&v20);
  }
  *(void *)unsigned int v9 = 0;
  return result;
}

char *sub_1CD6EA720(char *result, llvm::object::MetalLibObjectFile *this, unsigned int a3, uint64_t *a4, uint64_t *a5, _DWORD **a6, _DWORD **a7, char **a8, uint64_t a9)
{
  unsigned int v9 = result;
  unsigned int v20 = a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*a4 + 8 * a3);
  if (!v11) {
    llvm::object::MetalLibObjectFile::materializeVariableNo(this);
  }
  unint64_t v12 = a4[1] - v10;
  if ((v12 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v13 = (v12 >> 3);
    uint64_t v14 = *a6;
    uint64_t v15 = a3;
    while (!*(void *)v10 || !v15 || *v14 == -1 || *(void *)(*(void *)v10 + 56) != *(void *)(v11 + 56))
    {
      --v15;
      ++v14;
      v10 += 8;
      if (!--v13) {
        goto LABEL_9;
      }
    }
    (*a6)[a3] = *v14;
  }
  else
  {
LABEL_9:
    uint64_t v16 = *a5;
    unint64_t v17 = a5[1] - *a5;
    if ((v17 & 0x7FFFFFFF8) == 0) {
LABEL_15:
    }
      operator new();
    __int16 v18 = *a7;
    uint64_t v19 = (v17 >> 3);
    while (!*(void *)v16 || *v18 == -1 || *(void *)(*(void *)v16 + 64) != *(void *)(v11 + 56))
    {
      ++v18;
      v16 += 8;
      if (!--v19) {
        goto LABEL_15;
      }
    }
    (*a6)[a3] = *v18;
    uint64_t result = sub_1CD6EB514(a8, (uint64_t)&(*a8)[4 * *v18], (char *)&v20);
  }
  *(void *)unsigned int v9 = 0;
  return result;
}

void llvm::object::ObjectFile::createMetalLibObjectFile()
{
  uint64_t v0 = 0;
  operator new();
}

uint64_t sub_1CD6EAB80(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 432))(&__p);
  uint64_t v1 = v5;
  if (v4 < 0) {
    operator delete(__p);
  }
  return v1;
}

uint64_t sub_1CD6EABEC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      sub_1CD46D2D8(a1, (__n128 *)a2);
      long long v7 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v7;
    }
    else
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      long long v4 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
      *(unsigned char *)(a1 + 48) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
  return a1;
}

void sub_1CD6EAC98(char **a1, unint64_t a2)
{
  long long v4 = a1[2];
  unsigned int v5 = a1[1];
  if (a2 > (v4 - v5) >> 3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      abort();
    }
    if ((v4 - v6) >> 2 > v8) {
      unint64_t v8 = (v4 - v6) >> 2;
    }
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61) {
        sub_1CB833614();
      }
      uint64_t v10 = (char *)operator new(8 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = &v10[8 * (v7 >> 3)];
    unint64_t v12 = &v10[8 * v9];
    __int16 v18 = v12;
    bzero(v11, 8 * a2);
    uint64_t v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      int64x2_t v14 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 1);
        v5 -= 8;
        *(void *)unsigned int v5 = 0;
        *((void *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v5 != v6);
      int64x2_t v14 = *(int64x2_t *)a1;
      long long v4 = a1[2];
      uint64_t v13 = (char *)v17.i64[1];
      unint64_t v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    int64x2_t v17 = v14;
    a1[2] = v12;
    __int16 v18 = v4;
    uint64_t v16 = v14.i64[0];
    sub_1CD6EADEC((uint64_t)&v16);
  }
  else
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
}

uint64_t sub_1CD6EADEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      sub_1CCC787A4(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD6EAE48(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    uint64_t v7 = (uint64_t)v5 - *(void *)a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      abort();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[8 * (v7 >> 3)];
    uint64_t v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    int64x2_t v14 = &v11[8 * a2 + v7];
    if (v5 == v6)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      do
      {
        uint64_t v15 = *--v5;
        *unsigned int v5 = 0;
        *((void *)v12 - 1) = v15;
        v12 -= 8;
      }
      while (v5 != v6);
      unsigned int v5 = *(void **)a1;
      uint64_t v16 = *(void **)(a1 + 8);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v13;
      while (v16 != v5)
      {
        __int16 v18 = (void *)*--v16;
        int64x2_t v17 = v18;
        *uint64_t v16 = 0;
        if (v18)
        {
          uint64_t v19 = sub_1CD6EB4B0(v17);
          MEMORY[0x1D25D9CE0](v19, 0x1070C40BAAD8800);
        }
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1CD6EAFB8(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unsigned int v5 = a1[1];
  if (a2 > (v4 - v5) >> 3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      abort();
    }
    if ((v4 - v6) >> 2 > v8) {
      unint64_t v8 = (v4 - v6) >> 2;
    }
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61) {
        sub_1CB833614();
      }
      unint64_t v10 = (char *)operator new(8 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v11 = &v10[8 * (v7 >> 3)];
    unint64_t v12 = &v10[8 * v9];
    __int16 v18 = v12;
    bzero(v11, 8 * a2);
    uint64_t v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      int64x2_t v14 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 1);
        v5 -= 8;
        *(void *)unsigned int v5 = 0;
        *((void *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v5 != v6);
      int64x2_t v14 = *(int64x2_t *)a1;
      uint64_t v4 = a1[2];
      uint64_t v13 = (char *)v17.i64[1];
      unint64_t v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    int64x2_t v17 = v14;
    a1[2] = v12;
    __int16 v18 = v4;
    uint64_t v16 = v14.i64[0];
    sub_1CD6EB10C((uint64_t)&v16);
  }
  else
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
}

uint64_t sub_1CD6EB10C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x1D25D9CE0](v4, 0x1050C40B09E53CALL);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD6EB178(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unsigned int v5 = a1[1];
  if (a2 > (v4 - v5) >> 3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      abort();
    }
    if ((v4 - v6) >> 2 > v8) {
      unint64_t v8 = (v4 - v6) >> 2;
    }
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61) {
        sub_1CB833614();
      }
      unint64_t v10 = (char *)operator new(8 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v11 = &v10[8 * (v7 >> 3)];
    unint64_t v12 = &v10[8 * v9];
    __int16 v18 = v12;
    bzero(v11, 8 * a2);
    uint64_t v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      int64x2_t v14 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 1);
        v5 -= 8;
        *(void *)unsigned int v5 = 0;
        *((void *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v5 != v6);
      int64x2_t v14 = *(int64x2_t *)a1;
      uint64_t v4 = a1[2];
      uint64_t v13 = (char *)v17.i64[1];
      unint64_t v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    int64x2_t v17 = v14;
    a1[2] = v12;
    __int16 v18 = v4;
    uint64_t v16 = v14.i64[0];
    sub_1CD6EB2CC((uint64_t)&v16);
  }
  else
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
}

uint64_t sub_1CD6EB2CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x1D25D9CE0](v4, 0x1050C40A5B97131);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_1CD6EB338(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void sub_1CD6EB384(char **a1, unint64_t a2)
{
  unsigned int v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      bzero(a1[1], 32 * a2);
      v5 += 32 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 5);
    if (v8 >> 59) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 59) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(32 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[32 * (v7 >> 5)];
    uint64_t v13 = &v11[32 * v10];
    bzero(v12, 32 * a2);
    int64x2_t v14 = &v12[32 * a2];
    if (v5 != v6)
    {
      do
      {
        long long v15 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v12 - 1) = v15;
        v12 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      unsigned int v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *sub_1CD6EB4B0(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

char *sub_1CD6EB514(char **a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *a1;
  unsigned int v5 = a1[1];
  uint64_t v7 = a2 - (void)*a1;
  unint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v14 = ((v5 - v6) >> 2) + 1;
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = v9 - (void)v6;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v32 = a1 + 2;
    if (v16)
    {
      if (v16 >> 62) {
        sub_1CB833614();
      }
      int64x2_t v17 = (char *)operator new(4 * v16);
    }
    else
    {
      int64x2_t v17 = 0;
    }
    uint64_t v28 = v17;
    int v29 = &v17[4 * (v7 >> 2)];
    __dst = v29;
    unsigned int v31 = &v17[4 * v16];
    sub_1CCC78C2C((uint64_t)&v28, v3);
    __int16 v18 = v29;
    uint64_t v19 = *a1;
    unsigned int v20 = v29;
    if (v8 != *a1)
    {
      uint64_t v21 = v8;
      unsigned int v20 = v29;
      do
      {
        int v22 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v20 - 1) = v22;
        v20 -= 4;
      }
      while (v21 != v19);
    }
    int v29 = v20;
    long long v23 = a1[1];
    unsigned int v24 = (char *)__dst;
    int64_t v25 = v23 - v8;
    if (v23 != v8)
    {
      memmove(__dst, v8, v23 - v8);
      unsigned int v20 = v29;
      uint64_t v19 = *a1;
      unint64_t v8 = a1[1];
    }
    *a1 = v20;
    a1[1] = &v24[v25];
    uint64_t v26 = a1[2];
    a1[2] = v31;
    __dst = v8;
    unsigned int v31 = v26;
    uint64_t v28 = v19;
    int v29 = v19;
    if (v8 != v19) {
      __dst = &v8[(v19 - v8 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    if (v19) {
      operator delete(v19);
    }
    return v18;
  }
  else if (v8 == v5)
  {
    *(_DWORD *)unint64_t v8 = *(_DWORD *)a3;
    a1[1] = v8 + 4;
  }
  else
  {
    unint64_t v10 = v8 + 4;
    uint64_t v11 = v5 - 4;
    unint64_t v12 = a1[1];
    while (v11 < v5)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)unint64_t v12 = v13;
      v12 += 4;
    }
    a1[1] = v12;
    if (v5 != v10) {
      memmove(&v5[-4 * ((v5 - v10) >> 2)], v8, v5 - v10);
    }
    if (v8 <= v3) {
      v3 += 4 * (a1[1] > v3);
    }
    *(_DWORD *)unint64_t v8 = *(_DWORD *)v3;
  }
  return v8;
}

void sub_1CD6EB70C(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (char *)*a1;
  unsigned int v5 = (char *)a1[1];
  uint64_t v7 = a2 - *a1;
  unint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v9 = a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v14 = ((v5 - v6) >> 2) + 1;
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = v9 - (void)v6;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    int v29 = a1 + 2;
    if (v16)
    {
      if (v16 >> 62) {
        sub_1CB833614();
      }
      int64x2_t v17 = (char *)operator new(4 * v16);
    }
    else
    {
      int64x2_t v17 = 0;
    }
    int64_t v25 = v17;
    uint64_t v26 = &v17[4 * (v7 >> 2)];
    __dst = v26;
    uint64_t v28 = &v17[4 * v16];
    sub_1CD6EBA94((uint64_t)&v25, a3);
    __int16 v18 = v26;
    uint64_t v19 = (char *)*a1;
    if (v8 != (char *)*a1)
    {
      unsigned int v20 = v8;
      do
      {
        int v21 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v18 - 1) = v21;
        v18 -= 4;
      }
      while (v20 != v19);
    }
    int v22 = (char *)a1[1];
    long long v23 = (char *)__dst;
    int64_t v24 = v22 - v8;
    if (v22 != v8)
    {
      memmove(__dst, v8, v22 - v8);
      uint64_t v19 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = &v23[v24];
    a1[2] = v28;
    if (v19) {
      operator delete(v19);
    }
  }
  else if (v8 == v5)
  {
    *(_DWORD *)unint64_t v8 = *a3;
    a1[1] = v8 + 4;
  }
  else
  {
    unint64_t v10 = v8 + 4;
    uint64_t v11 = v5 - 4;
    unint64_t v12 = (_DWORD *)a1[1];
    while (v11 < v5)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *v12++ = v13;
    }
    a1[1] = v12;
    if (v5 != v10) {
      memmove(&v5[-4 * ((v5 - v10) >> 2)], v8, v5 - v10);
    }
    *(_DWORD *)unint64_t v8 = *a3;
  }
}

void *sub_1CD6EB8A8(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (char *)result[2];
  if (v4 == (char *)result[3])
  {
    uint64_t v7 = (char *)*result;
    uint64_t v6 = (char *)result[1];
    if ((unint64_t)v6 <= *result)
    {
      if (v4 == v7) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - v7) >> 2;
      }
      uint64_t v26 = result[4];
      if (v13 >> 61) {
        sub_1CB833614();
      }
      unint64_t v14 = (char *)operator new(8 * v13);
      uint64_t v15 = &v14[8 * (v13 >> 2)];
      uint64_t v16 = v4 - v6;
      if (v4 == v6)
      {
        int64x2_t v17 = vdupq_n_s64((unint64_t)v4);
        __int16 v18 = &v14[8 * (v13 >> 2)];
      }
      else
      {
        uint64_t v19 = v16 >> 3;
        __int16 v18 = &v15[v16 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v20 = 8 * v19;
        int v21 = &v14[8 * (v13 >> 2)];
        do
        {
          uint64_t v22 = *(void *)v6;
          *(void *)uint64_t v6 = 0;
          v6 += 8;
          *(void *)int v21 = v22;
          v21 += 8;
          v20 -= 8;
        }
        while (v20);
        uint64_t v7 = (char *)*v3;
        int64x2_t v17 = *(int64x2_t *)(v3 + 1);
        uint64_t v4 = (char *)v3[3];
      }
      long long v23 = v7;
      *uint64_t v3 = v14;
      v3[1] = v15;
      int64x2_t v24 = v17;
      v3[2] = v18;
      v3[3] = &v14[8 * v13];
      int64_t v25 = v4;
      double result = (void *)sub_1CD6EBA28((uint64_t)&v23);
      uint64_t v4 = (char *)v3[2];
    }
    else
    {
      uint64_t v8 = (uint64_t)&v6[-*result] >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = -(v9 >> 1);
      if (v6 == v4)
      {
        unint64_t v12 = &v6[-8 * (v9 >> 1)];
      }
      else
      {
        do
        {
          uint64_t v11 = *(void *)v6;
          *(void *)uint64_t v6 = 0;
          double result = *(void **)&v6[8 * v10];
          *(void *)&v6[8 * v10] = v11;
          if (result) {
            double result = (void *)MEMORY[0x1D25D9CE0](result, 0x1050C4015692547);
          }
          v6 += 8;
        }
        while (v6 != v4);
        uint64_t v4 = (char *)v3[1];
        unint64_t v12 = &v6[8 * v10];
      }
      v3[1] = &v4[8 * v10];
      v3[2] = v12;
      uint64_t v4 = v12;
    }
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)uint64_t v4 = v5;
  v3[2] += 8;
  return result;
}

uint64_t sub_1CD6EBA28(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x1D25D9CE0](v4, 0x1050C4015692547);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD6EBA94(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      if (v4 == v6) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = (v4 - v6) >> 1;
      }
      if (v14 >> 62) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(4 * v14);
      uint64_t v16 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v18 = v4 - v5;
      BOOL v17 = v4 == v5;
      uint64_t v4 = v16;
      if (!v17)
      {
        uint64_t v4 = &v16[v18 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v19 = 4 * (v18 >> 2);
        uint64_t v20 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v21 = *(_DWORD *)v5;
          v5 += 4;
          *(_DWORD *)uint64_t v20 = v21;
          v20 += 4;
          v19 -= 4;
        }
        while (v19);
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v15[4 * v14];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 2;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = v8 >> 1;
      uint64_t v11 = &v5[-4 * v10];
      int64_t v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v10], *(const void **)(a1 + 8), v4 - v5);
        uint64_t v4 = *(char **)(a1 + 8);
      }
      unint64_t v13 = &v4[4 * v9];
      uint64_t v4 = &v11[v12];
      *(void *)(a1 + 8) = v13;
    }
  }
  *(_DWORD *)uint64_t v4 = *a2;
  *(void *)(a1 + 16) = v4 + 4;
}

uint64_t sub_1CD6EBBB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x1D25D9CE0](v4, 0x1050C40717B85FCLL);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void llvm::object::MinidumpFile::create(void *a1)
{
  unint64_t v1 = a1[1];
  if (v1 < 0x20) {
    goto LABEL_2;
  }
  uint64_t v2 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 != 1347241037) {
    operator new();
  }
  if (*((unsigned __int16 *)v2 + 2) != 42899) {
    operator new();
  }
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  if (v4 + 12 * v3 > v1)
  {
LABEL_2:
    LODWORD(v14) = 4;
    sub_1CCC79B04();
  }
  v12[0] = 0;
  v12[1] = 0;
  int v13 = 0;
  if (!v3) {
LABEL_16:
  }
    operator new();
  uint64_t v5 = 0;
  uint64_t v6 = 12 * v3;
  uint64_t v7 = (_DWORD *)((char *)v2 + v4 + 8);
  while (1)
  {
    unsigned int v8 = *(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    unsigned int v11 = v8;
    if (v9 + (unint64_t)*v7 > v1)
    {
      LODWORD(v14) = 4;
      sub_1CCC79B04();
    }
    if (v8) {
      break;
    }
    if (v9) {
      goto LABEL_14;
    }
LABEL_11:
    ++v5;
    v7 += 3;
    v6 -= 12;
    if (!v6) {
      goto LABEL_16;
    }
  }
  if (v8 >= 0xFFFFFFFE) {
    operator new();
  }
LABEL_14:
  uint64_t v10 = v5;
  sub_1CD6EBF34((uint64_t)&v14, (uint64_t)v12, (int *)&v11, &v10);
  if (!(_BYTE)v15) {
    operator new();
  }
  goto LABEL_11;
}

_DWORD *sub_1CD6EBF34(uint64_t a1, uint64_t a2, int *a3, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    long long v14 = 0;
LABEL_6:
    double result = sub_1CD6EC0C4(a2, a3, v14);
    *double result = *a3;
    *((void *)result + 1) = *a4;
    uint64_t v9 = *(void *)a2;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    char v13 = 1;
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)a2;
  unsigned int v10 = (37 * *a3) & (v8 - 1);
  double result = (_DWORD *)(*(void *)a2 + 16 * v10);
  int v12 = *result;
  if (*a3 != *result)
  {
    long long v15 = 0;
    int v16 = 1;
    while (v12 != -1)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -2;
      }
      if (v17) {
        long long v15 = result;
      }
      unsigned int v18 = v10 + v16++;
      unsigned int v10 = v18 & (v8 - 1);
      double result = (_DWORD *)(v9 + 16 * v10);
      int v12 = *result;
      if (*a3 == *result) {
        goto LABEL_3;
      }
    }
    if (v15) {
      long long v14 = v15;
    }
    else {
      long long v14 = result;
    }
    goto LABEL_6;
  }
LABEL_3:
  char v13 = 0;
LABEL_4:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a1 + 16) = v13;
  return result;
}

void sub_1CD6EC028(uint64_t a1)
{
}

void sub_1CD6EC038()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD6EC060(uint64_t a1)
{
  *(void *)a1 = &unk_1F2633A88;
  llvm::deallocate_buffer(*(llvm **)(a1 + 72), (void *)(16 * *(unsigned int *)(a1 + 88)));
}

void sub_1CD6EC0A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  llvm::object::Binary::~Binary(v12);
}

_DWORD *sub_1CD6EC0C4(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CD6EC23C(a1, 2 * v6);
    int v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = (37 * *a2) & v9;
    a3 = (_DWORD *)(*(void *)a1 + 16 * v10);
    int v11 = *a3;
    if (*a2 != *a3)
    {
      int v12 = 0;
      int v13 = 1;
      while (v11 != -1)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          int v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (_DWORD *)(*(void *)a1 + 16 * v10);
        int v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      int v7 = *a3;
      goto LABEL_4;
    }
    sub_1CD6EC23C(a1, v6);
    int v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = (37 * *a2) & v16;
    a3 = (_DWORD *)(*(void *)a1 + 16 * v17);
    int v18 = *a3;
    if (*a2 != *a3)
    {
      int v12 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          int v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (_DWORD *)(*(void *)a1 + 16 * v17);
        int v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_20:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_DWORD *sub_1CD6EC23C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6EC310(a1, v4, &v4[4 * v3]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -1;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD6EC310(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    unint64_t v6 = *(_DWORD **)result;
    do
    {
      *unint64_t v6 = -1;
      v6 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v7 = 0;
    int v8 = v4 - 1;
    do
    {
      int v9 = *a2;
      if (*a2 <= 0xFFFFFFFD)
      {
        unsigned int v10 = (37 * v9) & v8;
        uint64_t v11 = &v3[4 * v10];
        int v12 = *v11;
        if (v9 != *v11)
        {
          int v13 = 0;
          int v14 = 1;
          while (v12 != -1)
          {
            if (v13) {
              BOOL v15 = 0;
            }
            else {
              BOOL v15 = v12 == -2;
            }
            if (v15) {
              int v13 = v11;
            }
            unsigned int v16 = v10 + v14++;
            unsigned int v10 = v16 & v8;
            uint64_t v11 = &v3[4 * (v16 & v8)];
            int v12 = *v11;
            if (v9 == *v11) {
              goto LABEL_8;
            }
          }
          if (v13) {
            uint64_t v11 = v13;
          }
        }
LABEL_8:
        *uint64_t v11 = v9;
        *((void *)v11 + 1) = *((void *)a2 + 1);
        *(_DWORD *)(result + 8) = ++v7;
      }
      a2 += 4;
    }
    while (a2 != a3);
  }
  return result;
}

void llvm::ModuleSymbolTable::CollectAsmSymbols(uint64_t a1)
{
}

void llvm::ModuleSymbolTable::CollectAsmSymvers(uint64_t a1)
{
}

std::string *sub_1CD6EC460(std::string *this, std::string *__str)
{
  if (this[2].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, __str);
    std::string::size_type v4 = __str[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__r.__words[2] = v4;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v6 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
    }
    long long v7 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__r.__words[2] = __str[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1CD6EC4F0(unsigned int *a1)
{
  *(void *)a1 = &unk_1F2633C70;
  sub_1CD6A1DBC(a1 + 78);
  MEMORY[0x1D25D9CD0](*((void *)a1 + 39), 8);
  sub_1CD4AFD10((uint64_t)(a1 + 70));

  llvm::MCStreamer::~MCStreamer((llvm::MCStreamer *)a1);
}

uint64_t sub_1CD6EC55C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v8);
  if (v9)
  {
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    llvm::report_fatal_error(&v7);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2);
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  return v4;
}

void *llvm::object::ObjectFile::getSymbolValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  double result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v9);
  char v7 = v9;
  if ((v10 & 1) != 0 && (v7 = 0, (uint64_t v8 = v9) != 0))
  {
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
  }
  else if (v7)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = 0;
  }
  else
  {
    if ((v7 & 0x10) != 0) {
      double result = (void *)sub_1CD6EC55C(a1, a2);
    }
    else {
      double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
    }
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = result;
  }
  return result;
}

void *llvm::object::ObjectFile::printSymbolName@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, const char **a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  double result = (*(void *(**)(const char **__return_ptr))(*(void *)a1 + 72))(&v8);
  if (v10)
  {
    char v7 = v8;
    uint64_t v8 = 0;
  }
  else
  {
    size_t v6 = v9;
    double result = (void *)*((void *)a2 + 4);
    if (v9 > *((void *)a2 + 3) - (void)result)
    {
      double result = llvm::raw_ostream::write(a2, v8, v9);
LABEL_4:
      char v7 = 0;
      goto LABEL_6;
    }
    if (!v9) {
      goto LABEL_4;
    }
    double result = memcpy(result, v8, v9);
    char v7 = 0;
    *((void *)a2 + 4) += v6;
  }
LABEL_6:
  *a3 = v7;
  if (v10)
  {
    double result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::object::ObjectFile::getSymbolAlignment()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isSectionStripped()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isBerkeleyText(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t llvm::object::ObjectFile::isBerkeleyData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t llvm::object::ObjectFile::isDebugSection()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::getRelocatedSection@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result;
  return result;
}

void llvm::OffloadBinary::write(uint64_t a1@<X0>, void *a2@<X8>)
{
  v63[128] = *MEMORY[0x1E4F143B8];
  llvm::StringTableBuilder::StringTableBuilder((uint64_t)v59, 0, 1);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4)
  {
    for (uint64_t i = *(uint64_t ***)(a1 + 8); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    uint64_t i = *(uint64_t ***)(a1 + 8);
  }
  uint64_t v7 = *(void *)(a1 + 8) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    uint64_t v8 = *i;
    do
    {
      uint64_t v9 = *v8;
      unsigned int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v8 + 3, *v8);
      llvm::StringTableBuilder::add((uint64_t)v59, (uint64_t)(v8 + 3), v9 | ((unint64_t)HashValue << 32));
      uint64_t v11 = (void *)v8[1];
      uint64_t v12 = v8[2];
      unsigned int v13 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v11, v12);
      llvm::StringTableBuilder::add((uint64_t)v59, (uint64_t)v11, v12 | ((unint64_t)v13 << 32));
      do
      {
        int v14 = i[1];
        ++i;
        uint64_t v8 = v14;
        if (v14) {
          BOOL v15 = v8 + 1 == 0;
        }
        else {
          BOOL v15 = 1;
        }
      }
      while (v15);
    }
    while (i != (uint64_t **)v7);
  }
  llvm::StringTableBuilder::finalize((llvm::StringTableBuilder *)v59);
  uint64_t v16 = *(unsigned int *)(a1 + 20);
  *(_DWORD *)uint64_t v55 = -1391395056;
  int v56 = 1;
  uint64_t v17 = 16 * v16 + 72;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v57 = (v18 + v60 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v58 = xmmword_1CFB2C2A0;
  int v19 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)unint64_t v52 = *(_DWORD *)a1;
  *(_DWORD *)&v52[4] = v19;
  *(void *)&v52[8] = 72;
  *(void *)&long long v53 = v16;
  *((void *)&v53 + 1) = v60 + v17;
  uint64_t v54 = v18;
  int v61 = v63;
  long long v62 = xmmword_1CFB1BC20;
  int v44 = 0;
  char v48 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = &v61;
  int v50 = 0;
  uint64_t v43 = (uint64_t (**)(void **))&unk_1F2646FA8;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v43, v55, 0x20uLL);
  BOOL v20 = v47;
  if ((unint64_t)(v46 - (void)v47) > 0x27)
  {
    long long v21 = *(_OWORD *)v52;
    long long v22 = v53;
    v47[4] = v54;
    _OWORD *v20 = v21;
    v20[1] = v22;
    v47 += 5;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v43, v52, 0x28uLL);
  }
  uint64_t v23 = *(unsigned int *)(a1 + 16);
  if (v23)
  {
    for (j = *(uint64_t ***)(a1 + 8); !*j || *j + 1 == 0; ++j)
      ;
  }
  else
  {
    j = *(uint64_t ***)(a1 + 8);
  }
  uint64_t v26 = *(void *)(a1 + 8) + 8 * v23;
  if (j != (uint64_t **)v26)
  {
    unsigned int v27 = *j;
    do
    {
      memset(v41, 0, sizeof(v41));
      uint64_t v28 = *v27;
      unsigned int v29 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v27 + 3, *v27);
      *(void *)unint64_t v41 = llvm::StringTableBuilder::getOffset((uint64_t)v59, (uint64_t)(v27 + 3), v28 | ((unint64_t)v29 << 32))+ v17;
      uint64_t v30 = (void *)v27[1];
      uint64_t v31 = v27[2];
      unsigned int v32 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v30, v31);
      *(void *)&v41[8] = llvm::StringTableBuilder::getOffset((uint64_t)v59, (uint64_t)v30, v31 | ((unint64_t)v32 << 32))+ v17;
      if ((unint64_t)(v46 - (void)v47) > 0xF)
      {
        *(_OWORD *)unint64_t v47 = *(_OWORD *)v41;
        v47 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v43, v41, 0x10uLL);
      }
      do
      {
        int v33 = j[1];
        ++j;
        unsigned int v27 = v33;
        if (v33) {
          BOOL v34 = v27 + 1 == 0;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (v34);
    }
    while (j != (uint64_t **)v26);
  }
  llvm::StringTableBuilder::write((llvm::StringTableBuilder *)v59, (llvm::raw_ostream *)&v43);
  int v35 = *(const void **)(a1 + 40);
  size_t v36 = *(void *)(a1 + 48);
  if (v36 <= v46 - (uint64_t)v47)
  {
    if (v36)
    {
      memcpy(v47, v35, v36);
      unint64_t v47 = (void *)((char *)v47 + v36);
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v43, (const char *)v35, v36);
  }
  int v37 = v57;
  int v38 = v43[10]((void **)&v43);
  llvm::raw_ostream::write_zeros((llvm::raw_ostream *)&v43, v37 - v47 - v38 + v45);
  v39 = *v51;
  unint64_t v40 = (llvm::WritableMemoryBuffer *)v51[1];
  __int16 v42 = 257;
  llvm::MemoryBuffer::getMemBufferCopy(v39, v40, (const void ***)v41, a2);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v43);
  if (v61 != v63) {
    free(v61);
  }
  llvm::StringTableBuilder::~StringTableBuilder((llvm::StringTableBuilder *)v59);
}

size_t **sub_1CD6ECD1C(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t i = (size_t **)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer(a3 + 25, (std::align_val_t)8uLL);
  uint64_t v11 = buffer;
  uint64_t v12 = (char *)(buffer + 3);
  if (a3) {
    memcpy(buffer + 3, a2, a3);
  }
  v12[a3] = 0;
  v11[1] = 0;
  long long v11[2] = 0;
  *uint64_t v11 = a3;
  *uint64_t i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (uint64_t i = (size_t **)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t *llvm::RecordStreamer::markDefined(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = (char *)this + 280;
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    uint64_t v5 = (void *)*((void *)a2 - 1);
    size_t v6 = *v5;
    uint64_t v3 = (unsigned __int8 *)(v5 + 2);
    size_t v4 = v6;
  }
  else
  {
    uint64_t v3 = 0;
    size_t v4 = 0;
  }
  double result = sub_1CD6ED280((uint64_t)v2, v3, v4);
  uint64_t v8 = *(int *)(*result + 8);
  if v8 <= 6 && ((0x6Fu >> v8)) {
    *(_DWORD *)(*result + 8) = dword_1CFB2C2F0[v8];
  }
  return result;
}

uint64_t *llvm::RecordStreamer::markGlobal(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v4 = a1 + 280;
  if ((*a2 & 4) != 0)
  {
    uint64_t v7 = (void *)*((void *)a2 - 1);
    size_t v8 = *v7;
    uint64_t v5 = (unsigned __int8 *)(v7 + 2);
    size_t v6 = v8;
  }
  else
  {
    uint64_t v5 = 0;
    size_t v6 = 0;
  }
  double result = sub_1CD6ED280(v4, v5, v6);
  unsigned int v10 = *(_DWORD *)(*result + 8);
  if (v10 <= 5)
  {
    int v11 = 1 << v10;
    if ((v11 & 0x23) != 0)
    {
      if (a3 == 23) {
        int v12 = 6;
      }
      else {
        int v12 = 1;
      }
LABEL_9:
      *(_DWORD *)(*result + 8) = v12;
      return result;
    }
    if ((v11 & 0xC) != 0)
    {
      if (a3 == 23) {
        int v12 = 4;
      }
      else {
        int v12 = 3;
      }
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t *llvm::RecordStreamer::markUsed(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = (char *)this + 280;
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    uint64_t v5 = (void *)*((void *)a2 - 1);
    size_t v6 = *v5;
    uint64_t v3 = (unsigned __int8 *)(v5 + 2);
    size_t v4 = v6;
  }
  else
  {
    uint64_t v3 = 0;
    size_t v4 = 0;
  }
  double result = sub_1CD6ED280((uint64_t)v2, v3, v4);
  int v8 = *(_DWORD *)(*result + 8);
  if (v8 == 5 || v8 == 0) {
    *(_DWORD *)(*result + 8) = 5;
  }
  return result;
}

void *llvm::RecordStreamer::begin(llvm::RecordStreamer *this)
{
  double result = (void *)*((void *)this + 35);
  if (*((_DWORD *)this + 72))
  {
    while (!*result || *result == -8)
      ++result;
  }
  return result;
}

uint64_t llvm::RecordStreamer::end(llvm::RecordStreamer *this)
{
  return *((void *)this + 35) + 8 * *((unsigned int *)this + 72);
}

uint64_t *llvm::RecordStreamer::emitLabel(llvm::RecordStreamer *a1, const llvm::MCSymbol *a2)
{
  llvm::MCStreamer::emitLabel((uint64_t)a1, (uint64_t)a2, 0);

  return llvm::RecordStreamer::markDefined(a1, a2);
}

uint64_t llvm::RecordStreamer::emitAssignment(llvm::RecordStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  llvm::RecordStreamer::markDefined(this, a2);

  return llvm::MCStreamer::emitAssignment(this, a2, a3);
}

uint64_t llvm::RecordStreamer::emitSymbolAttribute(llvm::RecordStreamer *this, llvm::MCSymbol *a2, int a3)
{
  switch(a3)
  {
    case 23:
      goto LABEL_5;
    case 15:
      goto LABEL_6;
    case 9:
LABEL_5:
      llvm::RecordStreamer::markGlobal((uint64_t)this, a2, a3);
      if (a3 != 15) {
        return 1;
      }
LABEL_6:
      llvm::RecordStreamer::markUsed(this, a2);
      break;
  }
  return 1;
}

uint64_t *llvm::RecordStreamer::emitZerofill(llvm::RecordStreamer *a1, int a2, llvm::MCSymbol *a3)
{
  return llvm::RecordStreamer::markDefined(a1, a3);
}

uint64_t llvm::RecordStreamer::getSymbolState(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v3 = (void *)((char *)this + 280);
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    size_t v6 = (void *)*((void *)a2 - 1);
    size_t v7 = *v6;
    size_t v4 = (unsigned __int8 *)(v6 + 2);
    size_t v5 = v7;
  }
  else
  {
    size_t v4 = 0;
    size_t v5 = 0;
  }
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 35, v4, v5);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 72)) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(*v3 + 8 * Key) + 8);
  }
}

_OWORD *llvm::RecordStreamer::emitELFSymverDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v9 = a3;
  *((void *)&v9 + 1) = a4;
  uint64_t v8 = a2;
  size_t v4 = (void **)sub_1CD4F7F5C(a1 + 312, &v8);
  size_t v5 = v4;
  size_t v6 = v4[2];
  if (v6 >= v4[3])
  {
    double result = sub_1CC016940(v4 + 1, &v9);
  }
  else
  {
    *size_t v6 = v9;
    double result = v6 + 1;
  }
  void v5[2] = result;
  return result;
}

uint64_t llvm::RecordStreamer::symverAliases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(this + 312);
  uint64_t v3 = *(unsigned int *)(this + 328);
  size_t v4 = &v2[4 * v3];
  if (*(_DWORD *)(this + 320))
  {
    if (v3)
    {
      uint64_t v5 = 32 * v3;
      while ((*v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v2 += 4;
        v5 -= 32;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v2 = v4;
  }
  *a2 = v2;
  a2[1] = v4;
  a2[2] = v4;
  a2[3] = v4;
  return this;
}

void sub_1CD6ED238(unsigned int *a1)
{
}

uint64_t *sub_1CD6ED280(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  int v11 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  int v12 = v11;
  unsigned int v13 = v11 + 16;
  if (a3) {
    memcpy(v11 + 16, a2, a3);
  }
  v13[a3] = 0;
  *(void *)int v12 = a3;
  *((_DWORD *)v12 + 2) = 0;
  *uint64_t i = (uint64_t)v12;
  ++*(_DWORD *)(a1 + 12);
  for (uint64_t i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1CD6ED374(void *a1)
{
  if (*a1 == a1[4] || *a1 == 0) {
    return 0;
  }
  else {
    return *a1 - 56;
  }
}

uint64_t sub_1CD6ED390(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 40) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t sub_1CD6ED3AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 == *(void *)(a1 + 48) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 48;
  }
}

uint64_t sub_1CD6ED3C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 == *(void *)(a1 + 56) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

void sub_1CD6ED3F0()
{
}

void sub_1CD6ED404(uint64_t a1, void *a2)
{
}

void *sub_1CD6ED414@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (!a3) {
    sub_1CB8E509C(a2, "__imp_");
  }
  size_t v7 = (const char *)(*(void *)(a1 + 16) + 20);
  unint64_t v8 = strlen(v7);
  double result = (void *)*((void *)a2 + 4);
  if (v8 <= *((void *)a2 + 3) - (void)result)
  {
    if (v8)
    {
      double result = memcpy(result, v7, v8);
      *((void *)a2 + 4) += v8;
    }
  }
  else
  {
    double result = llvm::raw_ostream::write(a2, v7, v8);
  }
  *a4 = 0;
  return result;
}

void sub_1CD6ED4B0(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 2;
}

uint64_t sub_1CD6ED4C8()
{
  return 0;
}

uint64_t sub_1CD6ED4D4(uint64_t a1)
{
  if ((*(_WORD *)(*(void *)(a1 + 16) + 18) & 3) == 1) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t llvm::object::TapiUniversal::TapiUniversal(uint64_t a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v6 = a2[1];
  v47[0] = *a2;
  v47[1] = v6;
  llvm::object::Binary::Binary(a1, 4, (uint64_t)v47);
  *(_OWORD *)(v7 + 48) = 0u;
  unint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)uint64_t v7 = &unk_1F2634280;
  *(_OWORD *)(v7 + 64) = 0u;
  long long v9 = a2[1];
  v46[0] = *a2;
  v46[1] = v9;
  llvm::MachO::TextAPIReader::get((uint64_t)v46, (uint64_t)&v50);
  uint64_t v10 = v50;
  uint64_t v50 = 0;
  if (v51)
  {
    *a3 = v10;
  }
  else
  {
    uint64_t v11 = *v8;
    *unint64_t v8 = v10;
    if (v11)
    {
      uint64_t v12 = sub_1CD6ED92C(v11);
      MEMORY[0x1D25D9CE0](v12, 0x10B2C40E0541032);
      uint64_t v10 = *v8;
    }
    uint64_t v15 = *(void *)(v10 + 184);
    uint64_t v13 = v10 + 184;
    uint64_t v14 = v15;
    char v16 = *(unsigned char *)(v13 + 23);
    int v17 = v16;
    if (v16 >= 0) {
      uint64_t v18 = v13;
    }
    else {
      uint64_t v18 = v14;
    }
    uint64_t v19 = v16 & 0x7F;
    if (v17 >= 0) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = *(void *)(v13 + 8);
    }
    unsigned int v21 = llvm::MachO::mapToArchitectureSet(*(unsigned __int8 **)(v13 - 88), *(unsigned int *)(v13 - 80));
    unint64_t v22 = v21;
    if (v21)
    {
      LODWORD(v24) = 0;
LABEL_22:
      int v30 = v24;
      uint64_t v31 = *(char **)(a1 + 64);
LABEL_23:
      *(void *)&long long v48 = v18;
      *((void *)&v48 + 1) = v20;
      LOBYTE(v49) = v30;
      if ((unint64_t)v31 >= *(void *)(a1 + 72))
      {
        uint64_t v31 = sub_1CCC801D0((void **)(a1 + 56), (uint64_t)&v48);
      }
      else
      {
        long long v32 = v48;
        *((void *)v31 + 2) = v49;
        *(_OWORD *)uint64_t v31 = v32;
        v31 += 24;
      }
      *(void *)(a1 + 64) = v31;
      while (++v30 <= 0x1F)
      {
        if ((v22 >> v30)) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v23 = 0;
      while (v23 != 31)
      {
        uint64_t v24 = v23 + 1;
        unint64_t v25 = (unint64_t)v21 >> v23++;
        if ((v25 & 2) != 0)
        {
          if (v24 != 0xFFFFFFFFLL) {
            goto LABEL_22;
          }
          break;
        }
      }
    }
    uint64_t v26 = *v8;
    uint64_t v27 = *(void *)(*v8 + 296);
    for (uint64_t i = *(void *)(v26 + 304); v27 != i; v27 += 16)
    {
      char v33 = *(unsigned char *)(*(void *)v27 + 207);
      int v34 = v33;
      if (v33 >= 0) {
        uint64_t v35 = *(void *)v27 + 184;
      }
      else {
        uint64_t v35 = *(void *)(*(void *)v27 + 184);
      }
      uint64_t v36 = v33 & 0x7F;
      if (v34 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = *(void *)(*(void *)v27 + 192);
      }
      unsigned int v38 = llvm::MachO::mapToArchitectureSet(*(unsigned __int8 **)(*(void *)v27 + 96), *(unsigned int *)(*(void *)v27 + 104));
      unint64_t v39 = v38;
      if (v38)
      {
        LODWORD(v41) = 0;
LABEL_44:
        int v43 = v41;
        int v44 = *(char **)(a1 + 64);
LABEL_45:
        *(void *)&long long v48 = v35;
        *((void *)&v48 + 1) = v37;
        LOBYTE(v49) = v43;
        if ((unint64_t)v44 >= *(void *)(a1 + 72))
        {
          int v44 = sub_1CCC801D0((void **)(a1 + 56), (uint64_t)&v48);
        }
        else
        {
          long long v45 = v48;
          *((void *)v44 + 2) = v49;
          *(_OWORD *)int v44 = v45;
          v44 += 24;
        }
        *(void *)(a1 + 64) = v44;
        while (++v43 <= 0x1F)
        {
          if ((v39 >> v43)) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        uint64_t v40 = 0;
        while (v40 != 31)
        {
          uint64_t v41 = v40 + 1;
          unint64_t v42 = (unint64_t)v38 >> v40++;
          if ((v42 & 2) != 0)
          {
            if (v41 != 0xFFFFFFFFLL) {
              goto LABEL_44;
            }
            break;
          }
        }
      }
    }
    uint64_t v10 = *a3;
  }
  if (!v10) {
    *a3 = 0;
  }
  sub_1CD6EDA10((uint64_t)&v50);
  return a1;
}

void llvm::object::TapiUniversal::~TapiUniversal(llvm::object::TapiUniversal *this)
{
  *(void *)this = &unk_1F2634280;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    uint64_t v4 = sub_1CD6ED92C(v3);
    MEMORY[0x1D25D9CE0](v4, 0x10B2C40E0541032);
  }

  llvm::object::Binary::~Binary(this);
}

{
  uint64_t vars8;

  llvm::object::TapiUniversal::~TapiUniversal(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::object::TapiUniversal::create()
{
  uint64_t v0 = 0;
  operator new();
}

uint64_t sub_1CD6ED92C(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 344), 8);
  uint64_t v7 = (void **)(a1 + 320);
  sub_1CC1CB288(&v7);
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    sub_1CC1CAA74(a1 + 296, v2);
    operator delete(*(void **)(a1 + 296));
  }
  uint64_t v3 = *(char **)(a1 + 272);
  if (v3)
  {
    sub_1CCC802EC(a1 + 272, v3);
    operator delete(*(void **)(a1 + 272));
  }
  uint64_t v4 = *(char **)(a1 + 248);
  if (v4)
  {
    sub_1CCC802EC(a1 + 248, v4);
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v7 = (void **)(a1 + 224);
  sub_1CC1CB288(&v7);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5 != (void *)(a1 + 112)) {
    free(v5);
  }
  return sub_1CBFFBA64(a1);
}

uint64_t sub_1CD6EDA10(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    uint64_t v4 = sub_1CD6ED92C(v3);
    MEMORY[0x1D25D9CE0](v4, 0x10B2C40E0541032);
  }
  return a1;
}

void llvm::object::WasmSymbol::print(const void ***this, llvm::raw_ostream *a2)
{
  uint64_t v4 = sub_1CB8E509C(a2, "Name=");
  uint64_t v5 = **this;
  unint64_t v6 = (unint64_t)(*this)[1];
  uint64_t v7 = (void *)*((void *)v4 + 4);
  if (v6 <= *((void *)v4 + 3) - (void)v7)
  {
    if (v6)
    {
      memcpy(v7, v5, (size_t)(*this)[1]);
      *((void *)v4 + 4) += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v4, (const char *)v5, (size_t)(*this)[1]);
  }
  unint64_t v8 = sub_1CB8E509C(v4, ", Kind=");
  llvm::wasm::toString((char *)*((unsigned __int8 *)*this + 16), (uint64_t)__p);
  if (v21 >= 0) {
    long long v9 = __p;
  }
  else {
    long long v9 = (void **)__p[0];
  }
  if (v21 >= 0) {
    size_t v10 = v21 & 0x7F;
  }
  else {
    size_t v10 = (size_t)__p[1];
  }
  uint64_t v11 = llvm::raw_ostream::write(v8, (const char *)v9, v10);
  uint64_t v12 = sub_1CB8E509C(v11, ", Flags=0x");
  uint64_t v17 = *((unsigned int *)*this + 5);
  v18[0] = &v17;
  v18[2] = 0;
  __int16 v19 = 270;
  llvm::Twine::print((llvm::Twine *)v18, v12);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (*((unsigned char *)*this + 16) == 1)
  {
    if ((*((unsigned char *)*this + 20) & 0x10) == 0)
    {
      uint64_t v13 = sub_1CB8E509C(a2, ", Segment=");
      llvm::raw_ostream::operator<<(v13, *((unsigned int *)*this + 24));
      uint64_t v14 = sub_1CB8E509C(a2, ", Offset=");
      llvm::raw_ostream::operator<<(v14, (unint64_t)(*this)[13]);
      uint64_t v15 = sub_1CB8E509C(a2, ", Size=");
      llvm::raw_ostream::operator<<(v15, (unint64_t)(*this)[14]);
    }
  }
  else
  {
    char v16 = sub_1CB8E509C(a2, ", ElemIndex=");
    llvm::raw_ostream::operator<<(v16, *((unsigned int *)*this + 24));
  }
}

void llvm::object::WasmSymbol::dump(llvm::object::WasmSymbol *this)
{
  char v2 = llvm::dbgs(this);

  llvm::object::WasmSymbol::print((const void ***)this, v2);
}

void llvm::object::ObjectFile::createWasmObjectFile()
{
  uint64_t v0 = 0;
  operator new();
}

uint64_t llvm::object::WasmObjectFile::WasmObjectFile(uint64_t a1, long long *a2, const char **a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v40[0] = *a2;
  v40[1] = v5;
  llvm::object::ObjectFile::ObjectFile(a1, 20, v40);
  *(void *)uint64_t v6 = &unk_1F26342A8;
  *(void *)(v6 + 72) = 0;
  uint64_t v7 = (uint64_t *)(v6 + 72);
  *(unsigned char *)(v6 + 504) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(unsigned char *)(v6 + 496) = 0;
  *(void *)(v6 + 576) = 0;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(void *)(v6 + 584) = 0xFFFFFFFFLL;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 692) = 0u;
  Data = (_DWORD *)llvm::object::Binary::getData((llvm::object::Binary *)v6);
  uint64_t v10 = 4;
  if (v9 < 4) {
    uint64_t v10 = v9;
  }
  *(void *)(a1 + 48) = Data;
  *(void *)(a1 + 56) = v10;
  if (v9 < 4 || *Data != 1836278016)
  {
    LODWORD(v42) = 3;
    sub_1CCC784D0();
  }
  uint64_t v12 = llvm::object::Binary::getData((llvm::object::Binary *)a1);
  uint64_t v37 = v12;
  llvm::object::Binary::getData((llvm::object::Binary *)a1);
  unint64_t v39 = v12 + v13;
  if (v13 <= 7)
  {
    LODWORD(v42) = 3;
    sub_1CCC784D0();
  }
  int v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(a1 + 64) = v14;
  if (v14 != 1)
  {
    unint64_t v42 = "invalid version number: ";
    __int16 v45 = 259;
    __int16 v36 = 264;
    LODWORD(__p[0]) = v14;
    sub_1CB8F1E58((uint64_t *)&v42, (uint64_t *)__p, (uint64_t)&v28);
    operator new();
  }
  v46[0] = 0;
  v46[1] = 0;
  int v47 = 0;
  if ((unint64_t)v13 >= 9)
  {
    uint64_t v15 = (const char *)(v12 + 8);
    long long v16 = 0uLL;
    do
    {
      HIDWORD(v28) = 0;
      unint64_t v29 = 0;
      long long v31 = v16;
      long long v32 = v16;
      uint64_t v33 = 0;
      int v30 = -1;
      *(void *)((char *)&v28 + 4) = (v15 - v37);
      int v18 = *(unsigned __int8 *)v15;
      uint64_t v17 = *(unsigned __int8 *)v15;
      unsigned int v38 = v15 + 1;
      LODWORD(v28) = v18;
      unint64_t v19 = sub_1CCC8505C((uint64_t)&v37);
      if (HIDWORD(v19)) {
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
      }
      unsigned int v20 = v19;
      if (!v19)
      {
        LODWORD(__p[0]) = 3;
        sub_1CCC84FB4();
      }
      char v21 = v38;
      if ((unint64_t)&v38[v19] > v39)
      {
        LODWORD(__p[0]) = 3;
        sub_1CCC784D0();
      }
      if (v17)
      {
        unint64_t v25 = 0;
        uint64_t v23 = 0;
      }
      else
      {
        unint64_t v42 = v38;
        int v43 = v38;
        int v44 = &v38[v19];
        uint64_t v23 = ((uint64_t (*)(const char **))loc_1CCC837F8)(&v42);
        unint64_t v25 = v24;
        *((void *)&v28 + 1) = v23;
        unint64_t v29 = v24;
        v21 += (v43 - v42);
        v20 -= v43 - v42;
      }
      if ((llvm::object::WasmSectionOrderChecker::isValidSectionOrder((uint64_t)v46, v17, v23, v25) & 1) == 0)
      {
        sub_1CD6F2998((unsigned int *)&v28, (uint64_t)&v41);
        uint64_t v26 = std::string::insert(&v41, 0, "out of order section type: ");
        std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v35 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        operator new();
      }
      *(void *)&long long v31 = v21;
      *((void *)&v31 + 1) = v20;
      unsigned int v38 = &v21[v20];
      *a3 = 0;
      llvm::object::WasmObjectFile::parseSection((void *)a1, (uint64_t)&v28, &v42);
      unint64_t v22 = v42;
      *a3 = v42;
      if (v22) {
        break;
      }
      sub_1CCC8251C(v7, &v28);
      uint64_t v15 = v38;
      long long v16 = 0uLL;
    }
    while ((unint64_t)v38 < v39);
  }
  if (!*a3) {
    *a3 = 0;
  }
  return a1;
}

void llvm::object::WasmObjectFile::parseSection(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = v4 + *(void *)(a2 + 40);
  v12[1] = v4;
  _OWORD v12[2] = v5;
  v12[0] = v4;
  int v6 = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
      llvm::object::WasmObjectFile::parseCustomSection(a1, a2, (uint64_t)v12, a3);
      break;
    case 1:
      llvm::object::WasmObjectFile::parseTypeSection(a1, (uint64_t)v12, a3);
      break;
    case 2:
      llvm::object::WasmObjectFile::parseImportSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 3:
      llvm::object::WasmObjectFile::parseFunctionSection(a1, (uint64_t)v12, a3);
      break;
    case 4:
      llvm::object::WasmObjectFile::parseTableSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 5:
      llvm::object::WasmObjectFile::parseMemorySection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 6:
      llvm::object::WasmObjectFile::parseGlobalSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 7:
      llvm::object::WasmObjectFile::parseExportSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 8:
      llvm::object::WasmObjectFile::parseStartSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 9:
      llvm::object::WasmObjectFile::parseElemSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 0xA:
      llvm::object::WasmObjectFile::parseCodeSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 0xB:
      llvm::object::WasmObjectFile::parseDataSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 0xC:
      llvm::object::WasmObjectFile::parseDataCountSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    case 0xD:
      llvm::object::WasmObjectFile::parseTagSection((uint64_t)a1, (uint64_t)v12, a3);
      break;
    default:
      unint64_t v9 = "invalid section type: ";
      __int16 v10 = 259;
      __int16 v8 = 264;
      LODWORD(v7[0]) = v6;
      sub_1CB8F1E58((uint64_t *)&v9, v7, (uint64_t)v11);
      operator new();
  }
}

void llvm::object::WasmObjectFile::parseCustomSection(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(int **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  switch(v6)
  {
    case 4uLL:
      if (*v5 != 1701667182) {
        goto LABEL_34;
      }
      llvm::object::WasmObjectFile::parseNameSection((uint64_t)a1, a3, a4);
      goto LABEL_37;
    case 6uLL:
      if (*v5 != 1768716644 || *((_WORD *)v5 + 2) != 27502) {
        goto LABEL_30;
      }
      llvm::object::WasmObjectFile::parseDylinkSection((uint64_t)a1, a3, a4);
      goto LABEL_37;
    case 7uLL:
      if (*v5 != 1802398060 || *(int *)((char *)v5 + 3) != 1735289195) {
        goto LABEL_30;
      }
      llvm::object::WasmObjectFile::parseLinkingSection((uint64_t)a1, a3, a4);
      goto LABEL_37;
    case 8uLL:
      if (*(void *)v5 != 0x302E6B6E696C7964) {
        goto LABEL_30;
      }
      llvm::object::WasmObjectFile::parseDylink0Section((unint64_t)a1, a3, a4);
      goto LABEL_37;
    case 9uLL:
      if (*(void *)v5 != 0x72656375646F7270 || *((unsigned char *)v5 + 8) != 115) {
        goto LABEL_30;
      }
      llvm::object::WasmObjectFile::parseProducersSection((uint64_t)a1, a3, a4);
      goto LABEL_37;
    case 0xFuLL:
      if (*(void *)v5 != 0x665F746567726174 || *(void *)((char *)v5 + 7) != 0x7365727574616566) {
        goto LABEL_30;
      }
      llvm::object::WasmObjectFile::parseTargetFeaturesSection((uint64_t)a1, a3, a4);
      goto LABEL_37;
    default:
      if (v6 < 6) {
        goto LABEL_34;
      }
LABEL_30:
      int v11 = *v5;
      int v12 = *((unsigned __int16 *)v5 + 2);
      if (v11 != 1869374834 || v12 != 11875) {
        goto LABEL_34;
      }
      llvm::object::WasmObjectFile::parseRelocSection(a1, a3, a4);
LABEL_37:
      if (!*a4) {
LABEL_34:
      }
        *a4 = 0;
      return;
  }
}

uint64_t llvm::object::WasmObjectFile::parseFunctionSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6)) {
    goto LABEL_11;
  }
  int v7 = v6;
  __int16 v8 = a1 + 64;
  uint64_t result = (uint64_t)sub_1CD6F1B54(a1 + 64, v6);
  if (v7)
  {
    uint64_t v10 = (a1[36] - a1[35]) >> 6;
    while (1)
    {
      unint64_t v11 = sub_1CCC8505C(a2);
      if (HIDWORD(v11)) {
        break;
      }
      if (v11 >= v10)
      {
        v12[0] = 3;
        sub_1CCC853CC();
      }
      --v7;
      char v16 = 0;
      char v17 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v15 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
      v12[1] = v11;
      uint64_t result = sub_1CCC8456C(v8, (uint64_t)v12);
      if (!v7) {
        goto LABEL_7;
      }
    }
LABEL_11:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
LABEL_7:
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    v12[0] = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
  return result;
}

void llvm::object::WasmObjectFile::parseMemorySection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6)) {
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
  int v7 = v6;
  sub_1CD6F1CE4(a1 + 328, v6);
  for (; v7; --v7)
  {
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_1CCC844AC((uint64_t)&v10, a2);
    if ((v10 & 4) != 0) {
      *(unsigned char *)(a1 + 591) = 1;
    }
    unint64_t v8 = *(void *)(a1 + 336);
    if (v8 >= *(void *)(a1 + 344))
    {
      unint64_t v9 = sub_1CBF99908((void **)(a1 + 328), (uint64_t)&v10);
    }
    else
    {
      *(_OWORD *)unint64_t v8 = v10;
      *(void *)(v8 + 16) = v11;
      unint64_t v9 = (char *)(v8 + 24);
    }
    *(void *)(a1 + 336) = v9;
  }
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16)) {
    sub_1CCC853CC();
  }
  *a3 = 0;
}

void llvm::object::WasmObjectFile::parseTagSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(_DWORD *)(a1 + 696) = 954437177 * ((*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6))
  {
LABEL_17:
    long long v13 = "LEB is outside Varuint32 range";
    goto LABEL_18;
  }
  int v7 = v6;
  sub_1CD6F1CE4(a1 + 376, v6);
  if (v7)
  {
    uint64_t v8 = (*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 6;
    while (1)
    {
      unint64_t v9 = *(unsigned char **)(a2 + 8);
      if (v9 == *(unsigned char **)(a2 + 16)) {
        break;
      }
      *(void *)(a2 + 8) = v9 + 1;
      if (*v9)
      {
        LODWORD(v14) = 3;
        sub_1CCC85A34();
      }
      unint64_t v10 = sub_1CCC8505C(a2);
      if (HIDWORD(v10)) {
        goto LABEL_17;
      }
      if (v10 >= v8)
      {
        LODWORD(v14) = 3;
        sub_1CCC853CC();
      }
      *((void *)&v14 + 1) = 0;
      uint64_t v15 = 0;
      unint64_t v11 = *(void *)(a1 + 384);
      LODWORD(v14) = *(_DWORD *)(a1 + 684) - 1431655765 * ((v11 - *(void *)(a1 + 376)) >> 3);
      DWORD1(v14) = v10;
      if (v11 >= *(void *)(a1 + 392))
      {
        int v12 = sub_1CBF99908((void **)(a1 + 376), (uint64_t)&v14);
      }
      else
      {
        *(_OWORD *)unint64_t v11 = v14;
        *(void *)(v11 + 16) = v15;
        int v12 = (char *)(v11 + 24);
      }
      *(void *)(a1 + 384) = v12;
      if (!--v7) {
        goto LABEL_12;
      }
    }
    long long v13 = "EOF while reading uint8";
LABEL_18:
    llvm::report_fatal_error((llvm *)v13, (const llvm::Twine *)1);
  }
LABEL_12:
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    LODWORD(v14) = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
}

void llvm::object::WasmObjectFile::parseGlobalSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(_DWORD *)(a1 + 700) = 954437177 * ((*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6))
  {
    long long v14 = "LEB is outside Varuint32 range";
    goto LABEL_16;
  }
  int v7 = v6;
  sub_1CD6F1DCC(a1 + 352, v6);
  if (v7)
  {
    uint64_t v8 = *(_OWORD **)(a1 + 360);
    while (1)
    {
      long long v16 = 0u;
      long long v17 = 0u;
      LODWORD(v15[0]) = *(_DWORD *)(a1 + 672) + (((unint64_t)v8 - *(void *)(a1 + 352)) >> 6);
      unint64_t v9 = *(unsigned char **)(a2 + 8);
      if (v9 == *(unsigned char **)(a2 + 16)) {
        break;
      }
      *(void *)(a2 + 8) = v9 + 1;
      BYTE4(v15[0]) = *v9;
      unint64_t v10 = sub_1CCC850EC(a2);
      if (v10 >= 2)
      {
        long long v14 = "LEB is outside Varuint1 range";
LABEL_16:
        llvm::report_fatal_error((llvm *)v14, (const llvm::Twine *)1);
      }
      BYTE5(v15[0]) = v10;
      sub_1CCC846D8((uint64_t)a3, (uint64_t)v15 + 8, a2);
      if (*a3) {
        return;
      }
      unint64_t v11 = *(_OWORD **)(a1 + 360);
      if ((unint64_t)v11 >= *(void *)(a1 + 368))
      {
        uint64_t v8 = sub_1CCC85A9C((void **)(a1 + 352), v15);
      }
      else
      {
        long long v12 = v15[1];
        *unint64_t v11 = v15[0];
        v11[1] = v12;
        long long v13 = v17;
        long long v11[2] = v16;
        v11[3] = v13;
        uint64_t v8 = v11 + 4;
      }
      *(void *)(a1 + 360) = v8;
      if (!--v7) {
        goto LABEL_11;
      }
    }
    long long v14 = "EOF while reading uint8";
    goto LABEL_16;
  }
LABEL_11:
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    LODWORD(v15[0]) = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
}

void llvm::object::WasmObjectFile::parseExportSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6))
  {
LABEL_24:
    long long v18 = "LEB is outside Varuint32 range";
    goto LABEL_25;
  }
  int v7 = v6;
  sub_1CD6F1CE4(a1 + 424, v6);
  if (v7)
  {
    while (1)
    {
      *(void *)&long long v19 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
      *((void *)&v19 + 1) = v8;
      unint64_t v9 = *(unsigned char **)(a2 + 8);
      if (v9 == *(unsigned char **)(a2 + 16)) {
        break;
      }
      *(void *)(a2 + 8) = v9 + 1;
      int v10 = *v9;
      LOBYTE(v20) = *v9;
      unint64_t v11 = sub_1CCC8505C(a2);
      if (HIDWORD(v11)) {
        goto LABEL_24;
      }
      HIDWORD(v20) = v11;
      switch(v10)
      {
        case 0:
          uint64_t v14 = *(unsigned int *)(a1 + 680);
          if (v11 < v14
            || (uint64_t v15 = *(void *)(a1 + 512), v14 + ((*(void *)(a1 + 520) - v15) >> 7) <= v11))
          {
            sub_1CCC853CC();
          }
          uint64_t v16 = v15 + ((unint64_t)(v11 - v14) << 7);
          int v17 = *(unsigned __int8 *)(v16 + 80);
          *(_OWORD *)(v16 + 64) = v19;
          if (!v17) {
            *(unsigned char *)(v16 + 80) = 1;
          }
          break;
        case 1:
        case 2:
          break;
        case 3:
          if ((unint64_t)*(unsigned int *)(a1 + 672)
             + ((uint64_t)(*(void *)(a1 + 360) - *(void *)(a1 + 352)) >> 6) <= v11)
            sub_1CCC853CC();
          return;
        case 4:
          if ((unint64_t)*(unsigned int *)(a1 + 684)
             - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 384) - *(void *)(a1 + 376)) >> 3) <= v11)
            sub_1CCC853CC();
          return;
        default:
          sub_1CCC853CC();
      }
      unint64_t v12 = *(void *)(a1 + 432);
      if (v12 >= *(void *)(a1 + 440))
      {
        long long v13 = sub_1CBF99908((void **)(a1 + 424), (uint64_t)&v19);
      }
      else
      {
        *(_OWORD *)unint64_t v12 = v19;
        *(void *)(v12 + 16) = v20;
        long long v13 = (char *)(v12 + 24);
      }
      *(void *)(a1 + 432) = v13;
      if (!--v7) {
        goto LABEL_19;
      }
    }
    long long v18 = "EOF while reading uint8";
LABEL_25:
    llvm::report_fatal_error((llvm *)v18, (const llvm::Twine *)1);
  }
LABEL_19:
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    LODWORD(v19) = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
}

unint64_t llvm::object::WasmObjectFile::parseStartSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = sub_1CCC8505C(a2);
  if (HIDWORD(result)) {
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
  *(_DWORD *)(a1 + 584) = result;
  if ((unint64_t)*(unsigned int *)(a1 + 680) + ((uint64_t)(*(void *)(a1 + 520) - *(void *)(a1 + 512)) >> 7) <= result) {
    sub_1CCC853CC();
  }
  *a3 = 0;
  return result;
}

void llvm::object::WasmObjectFile::parseElemSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6)) {
    goto LABEL_43;
  }
  int v7 = v6;
  sub_1CD6F1E8C((uint64_t *)(a1 + 448), v6);
  if (!v7)
  {
LABEL_32:
    if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
    {
      LODWORD(v22) = 3;
      sub_1CCC853CC();
    }
    *a3 = 0;
    return;
  }
  while (1)
  {
    unint64_t v27 = 0;
    long long v25 = 0u;
    long long __p = 0u;
    unint64_t v8 = sub_1CCC8505C(a2);
    if (HIDWORD(v8)) {
      goto LABEL_43;
    }
    LODWORD(v22) = v8;
    if (v8 >= 8)
    {
      int v21 = 3;
      sub_1CCC853CC();
    }
    if ((v8 & 2) != 0)
    {
      unint64_t v10 = sub_1CCC8505C(a2);
      if (HIDWORD(v10)) {
        goto LABEL_43;
      }
      unint64_t v9 = v10;
    }
    else
    {
      unint64_t v9 = 0;
    }
    DWORD1(v22) = v9;
    if ((unint64_t)*(unsigned int *)(a1 + 676)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3) <= v9)
    {
      int v21 = 3;
      sub_1CCC85B90();
    }
    char v11 = v22;
    if ((v22 & 1) == 0) {
      break;
    }
    v23[0] = 0;
    v23[8] = 65;
    int v24 = 0;
LABEL_14:
    if ((v11 & 3) != 0)
    {
      unint64_t v12 = *(unsigned __int8 **)(a2 + 8);
      if (v12 == *(unsigned __int8 **)(a2 + 16))
      {
        uint64_t v20 = "EOF while reading uint8";
        goto LABEL_44;
      }
      *(void *)(a2 + 8) = v12 + 1;
      int v13 = *v12;
      BYTE8(v22) = v13;
      if ((v11 & 4) != 0)
      {
        if ((v13 - 113) <= 0xFFFFFFFD)
        {
          int v21 = 3;
          sub_1CCC853CC();
        }
LABEL_31:
        int v21 = 3;
        sub_1CCC85BF8();
      }
      if (v13)
      {
        int v21 = 3;
        sub_1CCC853CC();
      }
      BYTE8(v22) = 112;
    }
    else
    {
      BYTE8(v22) = 112;
      if ((v11 & 4) != 0) {
        goto LABEL_31;
      }
    }
    unint64_t v14 = sub_1CCC8505C(a2);
    if (HIDWORD(v14)) {
      goto LABEL_43;
    }
    int v15 = v14;
    if (v14)
    {
      while (1)
      {
        unint64_t v16 = sub_1CCC8505C(a2);
        if (HIDWORD(v16)) {
          break;
        }
        int v17 = v16;
        int v21 = v16;
        uint64_t v18 = *((void *)&__p + 1);
        if (*((void *)&__p + 1) >= v27)
        {
          long long v19 = sub_1CBFFBD60((char **)&__p, &v21);
        }
        else
        {
          **((_DWORD **)&__p + 1) = v17;
          long long v19 = (char *)(v18 + 4);
        }
        *((void *)&__p + 1) = v19;
        if (!--v15) {
          goto LABEL_26;
        }
      }
LABEL_43:
      uint64_t v20 = "LEB is outside Varuint32 range";
LABEL_44:
      llvm::report_fatal_error((llvm *)v20, (const llvm::Twine *)1);
    }
LABEL_26:
    sub_1CCC849A4((uint64_t *)(a1 + 448), &v22);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (!--v7) {
      goto LABEL_32;
    }
  }
  sub_1CCC846D8((uint64_t)a3, (uint64_t)v23, a2);
  if (!*a3)
  {
    char v11 = v22;
    goto LABEL_14;
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
}

void llvm::object::WasmObjectFile::parseCodeSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)(a1 + 590) = 1;
  *(_DWORD *)(a1 + 688) = 954437177 * ((*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6))
  {
LABEL_21:
    int v30 = "LEB is outside Varuint32 range";
    goto LABEL_22;
  }
  unint64_t v7 = v6;
  if (v6 != (uint64_t)(*(void *)(a1 + 520) - *(void *)(a1 + 512)) >> 7) {
    sub_1CCC853CC();
  }
  long long v31 = a3;
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a2 + 8);
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 512);
      unint64_t v11 = sub_1CCC8505C(a2);
      if (HIDWORD(v11)) {
        goto LABEL_21;
      }
      unint64_t v12 = (_DWORD *)(v10 + (v8 << 7));
      uint64_t v13 = *(void *)(a2 + 8);
      int v14 = v13 + v11;
      v12[14] = v13 - v9;
      *unint64_t v12 = *(_DWORD *)(a1 + 680) + v8;
      v12[12] = v9 - *(_DWORD *)a2;
      v12[13] = v13 + v11 - v9;
      unint64_t v15 = sub_1CCC8505C(a2);
      if (HIDWORD(v15)) {
        goto LABEL_21;
      }
      int v16 = v15;
      int v17 = (void **)(v12 + 2);
      sub_1CD45A1D4((uint64_t)v17, v15);
      if (v16) {
        break;
      }
LABEL_15:
      uint64_t v27 = *(void *)(a2 + 8);
      uint64_t v28 = (v14 - v27);
      uint64_t v29 = v10 + (v8 << 7);
      *(void *)(v29 + 32) = v27;
      *(void *)(v29 + 40) = v28;
      *(_DWORD *)(v29 + 120) = -1;
      uint64_t v9 = *(void *)(a2 + 8) + v28;
      *(void *)(a2 + 8) = v9;
      if (++v8 == v7) {
        goto LABEL_16;
      }
    }
    uint64_t v18 = v10 + (v8 << 7);
    long long v19 = (uint64_t **)(v18 + 16);
    uint64_t v20 = (void *)(v18 + 24);
    while (1)
    {
      unint64_t v21 = sub_1CCC8505C(a2);
      if (HIDWORD(v21)) {
        goto LABEL_21;
      }
      long long v22 = *(unsigned __int8 **)(a2 + 8);
      if (v22 == *(unsigned __int8 **)(a2 + 16)) {
        break;
      }
      unint64_t v23 = v21;
      *(void *)(a2 + 8) = v22 + 1;
      int v24 = *v19;
      uint64_t v25 = *v22 | (v23 << 32);
      if ((unint64_t)*v19 >= *v20)
      {
        uint64_t v26 = sub_1CBF63C18(v17, v25);
      }
      else
      {
        *int v24 = v25;
        uint64_t v26 = v24 + 1;
      }
      *long long v19 = v26;
      if (!--v16) {
        goto LABEL_15;
      }
    }
    int v30 = "EOF while reading uint8";
LABEL_22:
    llvm::report_fatal_error((llvm *)v30, (const llvm::Twine *)1);
  }
  uint64_t v9 = *(void *)(a2 + 8);
LABEL_16:
  if (v9 != *(void *)(a2 + 16)) {
    sub_1CCC853CC();
  }
  *long long v31 = 0;
}

unint64_t llvm::object::WasmObjectFile::parseDataCountSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = sub_1CCC8505C(a2);
  if (HIDWORD(result)) {
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
  if (!*(unsigned char *)(a1 + 504)) {
    *(unsigned char *)(a1 + 504) = 1;
  }
  *(void *)(a1 + 496) = result;
  *a3 = 0;
  return result;
}

unint64_t llvm::object::WasmObjectFile::parseDylinkSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)(a1 + 589) = 1;
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6)) {
    goto LABEL_14;
  }
  *(_DWORD *)(a1 + 96) = v6;
  unint64_t v7 = sub_1CCC8505C(a2);
  if (HIDWORD(v7)
    || (*(_DWORD *)(a1 + 100) = v7, unint64_t v8 = sub_1CCC8505C(a2), HIDWORD(v8))
    || (*(_DWORD *)(a1 + 104) = v8, unint64_t v9 = sub_1CCC8505C(a2), HIDWORD(v9))
    || (*(_DWORD *)(a1 + 108) = v9, unint64_t result = sub_1CCC8505C(a2), HIDWORD(result)))
  {
LABEL_14:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
  for (int i = result; i; --i)
  {
    *(void *)&long long v14 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
    *((void *)&v14 + 1) = v12;
    uint64_t v13 = *(_OWORD **)(a1 + 120);
    if ((unint64_t)v13 >= *(void *)(a1 + 128))
    {
      unint64_t result = (unint64_t)sub_1CC016940((void **)(a1 + 112), &v14);
    }
    else
    {
      *uint64_t v13 = v14;
      unint64_t result = (unint64_t)(v13 + 1);
    }
    *(void *)(a1 + 120) = result;
  }
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16)) {
    sub_1CCC853CC();
  }
  *a3 = 0;
  return result;
}

unint64_t llvm::object::WasmObjectFile::parseDylink0Section@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)(result + 589) = 1;
  uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 >= v5)
  {
    if (v4 != v5)
    {
      LODWORD(v28) = 3;
      sub_1CCC853CC();
    }
  }
  else
  {
    unint64_t v7 = result;
    unint64_t v8 = (void **)(result + 136);
    unint64_t v9 = (void **)(result + 160);
    uint64_t v10 = (void **)(result + 112);
    do
    {
      *(void *)(a2 + 8) = v4 + 1;
      *(void *)(a2 + 16) = v5;
      int v11 = *v4;
      unint64_t result = sub_1CCC8505C(a2);
      if (HIDWORD(result)) {
LABEL_41:
      }
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
      unint64_t v12 = *(void *)(a2 + 8) + result;
      *(void *)(a2 + 16) = v12;
      switch(v11)
      {
        case 1:
          unint64_t v13 = sub_1CCC8505C(a2);
          if (HIDWORD(v13)) {
            goto LABEL_41;
          }
          *(_DWORD *)(v7 + 96) = v13;
          unint64_t v14 = sub_1CCC8505C(a2);
          if (HIDWORD(v14)) {
            goto LABEL_41;
          }
          *(_DWORD *)(v7 + 100) = v14;
          unint64_t v15 = sub_1CCC8505C(a2);
          if (HIDWORD(v15)) {
            goto LABEL_41;
          }
          *(_DWORD *)(v7 + 104) = v15;
          unint64_t result = sub_1CCC8505C(a2);
          if (HIDWORD(result)) {
            goto LABEL_41;
          }
          *(_DWORD *)(v7 + 108) = result;
          goto LABEL_11;
        case 2:
          unint64_t result = sub_1CCC8505C(a2);
          if (HIDWORD(result)) {
            goto LABEL_41;
          }
          for (int i = result; i; --i)
          {
            *(void *)&long long v28 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
            *((void *)&v28 + 1) = v17;
            uint64_t v18 = *(_OWORD **)(v7 + 120);
            if ((unint64_t)v18 >= *(void *)(v7 + 128))
            {
              unint64_t result = (unint64_t)sub_1CC016940(v10, &v28);
            }
            else
            {
              *uint64_t v18 = v28;
              unint64_t result = (unint64_t)(v18 + 1);
            }
            *(void *)(v7 + 120) = result;
          }
          goto LABEL_11;
        case 3:
          unint64_t result = sub_1CCC8505C(a2);
          if (HIDWORD(result)) {
            goto LABEL_41;
          }
          int v19 = result;
          if (!result) {
            goto LABEL_11;
          }
          while (1)
          {
            *(void *)&long long v28 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
            *((void *)&v28 + 1) = v20;
            unint64_t v21 = sub_1CCC8505C(a2);
            if (HIDWORD(v21)) {
              goto LABEL_41;
            }
            LODWORD(v29) = v21;
            unint64_t v22 = *(void *)(v7 + 168);
            if (v22 >= *(void *)(v7 + 176))
            {
              unint64_t result = (unint64_t)sub_1CC9AEA78(v9, (uint64_t)&v28);
            }
            else
            {
              *(_OWORD *)unint64_t v22 = v28;
              *(void *)(v22 + 16) = v29;
              unint64_t result = v22 + 24;
            }
            *(void *)(v7 + 168) = result;
            if (!--v19) {
              goto LABEL_11;
            }
          }
        case 4:
          unint64_t result = sub_1CCC8505C(a2);
          if (HIDWORD(result)) {
            goto LABEL_41;
          }
          int v23 = result;
          if (!result) {
            goto LABEL_11;
          }
          break;
        default:
          *(void *)(a2 + 8) = v12;
          goto LABEL_11;
      }
      do
      {
        *(void *)&long long v28 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
        *((void *)&v28 + 1) = v24;
        *(void *)&long long v29 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
        *((void *)&v29 + 1) = v25;
        unint64_t v26 = sub_1CCC8505C(a2);
        if (HIDWORD(v26)) {
          goto LABEL_41;
        }
        LODWORD(v30) = v26;
        unint64_t v27 = *(void *)(v7 + 144);
        if (v27 >= *(void *)(v7 + 152))
        {
          unint64_t result = (unint64_t)sub_1CC703E20(v8, (uint64_t)&v28);
        }
        else
        {
          *(_OWORD *)unint64_t v27 = v28;
          *(_OWORD *)(v27 + 16) = v29;
          *(void *)(v27 + 32) = v30;
          unint64_t result = v27 + 40;
        }
        *(void *)(v7 + 144) = result;
        --v23;
      }
      while (v23);
LABEL_11:
      uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
      if (v4 != *(unsigned __int8 **)(a2 + 16))
      {
        LODWORD(v28) = 3;
        sub_1CCC85448();
      }
    }
    while (v4 < v5);
  }
  *a3 = 0;
  return result;
}

uint64_t llvm::object::WasmObjectFile::parseNameSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v33[0] = 0;
  v33[1] = 0;
  int v34 = 0;
  v31[0] = 0;
  v31[1] = 0;
  int v32 = 0;
  v29[0] = 0;
  v29[1] = 0;
  int v30 = 0;
  if (*(void *)(a1 + 520) != *(void *)(a1 + 512) && !*(unsigned char *)(a1 + 590))
  {
    LODWORD(v35) = 3;
LABEL_41:
    sub_1CCC853CC();
  }
  uint64_t v5 = *(unsigned __int8 **)(a2 + 8);
  while (1)
  {
    unint64_t v6 = *(unsigned __int8 **)(a2 + 16);
    if (v5 >= v6) {
      break;
    }
    *(void *)(a2 + 8) = v5 + 1;
    unsigned int v7 = *v5;
    unint64_t v8 = sub_1CCC8505C(a2);
    if (HIDWORD(v8)) {
      goto LABEL_50;
    }
    uint64_t v5 = (unsigned __int8 *)(*(void *)(a2 + 8) + v8);
    if (v7 > 9 || ((1 << v7) & 0x282) == 0)
    {
      *(void *)(a2 + 8) = v5;
    }
    else
    {
      unint64_t v10 = sub_1CCC8505C(a2);
      if (HIDWORD(v10)) {
        goto LABEL_50;
      }
      int v11 = v10;
      if (v10)
      {
        while (1)
        {
          unint64_t v12 = sub_1CCC8505C(a2);
          if (HIDWORD(v12)) {
            break;
          }
          unint64_t v13 = v12;
          uint64_t v14 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          uint64_t v16 = v15;
          if (v7 == 7)
          {
            unint64_t v28 = v13;
            sub_1CD4ADCD0((uint64_t)v31, (uint64_t *)&v28, (uint64_t)&v35);
            if (!(_BYTE)v36)
            {
              LODWORD(v35) = 3;
              sub_1CCC853CC();
            }
            if ((unint64_t)*(unsigned int *)(a1 + 672)
               + ((uint64_t)(*(void *)(a1 + 360) - *(void *)(a1 + 352)) >> 6) <= v13
              || v16 == 0)
            {
LABEL_44:
              LODWORD(v35) = 3;
              sub_1CCC853CC();
            }
            int v21 = 1;
          }
          else if (v7 == 1)
          {
            unint64_t v28 = v13;
            sub_1CD4ADCD0((uint64_t)v33, (uint64_t *)&v28, (uint64_t)&v35);
            if (!(_BYTE)v36)
            {
              LODWORD(v35) = 3;
              sub_1CCC853CC();
            }
            uint64_t v17 = *(unsigned int *)(a1 + 680);
            uint64_t v18 = *(void *)(a1 + 512);
            if (v17 + ((*(void *)(a1 + 520) - v18) >> 7) <= v13 || v16 == 0) {
              goto LABEL_44;
            }
            uint64_t v20 = (v13 - v17);
            if (v13 >= v17)
            {
              int v21 = 0;
              uint64_t v25 = v18 + (v20 << 7);
              *(void *)(v25 + 104) = v14;
              *(void *)(v25 + 112) = v16;
            }
            else
            {
              int v21 = 0;
            }
          }
          else
          {
            unint64_t v28 = v13;
            sub_1CD4ADCD0((uint64_t)v29, (uint64_t *)&v28, (uint64_t)&v35);
            if (!(_BYTE)v36)
            {
              LODWORD(v35) = 3;
              sub_1CCC853CC();
            }
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3) < v13)
            {
              LODWORD(v35) = 3;
              sub_1CCC853CC();
            }
            int v21 = 2;
          }
          *(void *)&long long v35 = __PAIR64__(v13, v21);
          *((void *)&v35 + 1) = v14;
          uint64_t v36 = v16;
          unint64_t v23 = *(void *)(a1 + 568);
          if (v23 >= *(void *)(a1 + 576))
          {
            uint64_t v24 = sub_1CBF99908((void **)(a1 + 560), (uint64_t)&v35);
          }
          else
          {
            *(_OWORD *)unint64_t v23 = v35;
            *(void *)(v23 + 16) = v36;
            uint64_t v24 = (char *)(v23 + 24);
          }
          *(void *)(a1 + 568) = v24;
          if (!--v11) {
            goto LABEL_38;
          }
        }
LABEL_50:
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
      }
    }
LABEL_38:
    if (*(unsigned __int8 **)(a2 + 8) != v5)
    {
      LODWORD(v35) = 3;
      goto LABEL_41;
    }
  }
  if (v5 != v6)
  {
    LODWORD(v35) = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
  MEMORY[0x1D25D9CD0](v29[0], 8);
  MEMORY[0x1D25D9CD0](v31[0], 8);
  return MEMORY[0x1D25D9CD0](v33[0], 8);
}

void llvm::object::WasmObjectFile::parseLinkingSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(unsigned char *)(a1 + 588) = 1;
  if (*(void *)(a1 + 520) != *(void *)(a1 + 512) && !*(unsigned char *)(a1 + 590))
  {
    v45[0] = 3;
    sub_1CCC853CC();
  }
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6)) {
LABEL_43:
  }
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  *(_DWORD *)(a1 + 592) = v6;
  if (v6 != 2)
  {
    unsigned int v38 = "unexpected metadata version: ";
    __int16 v39 = 259;
    __int16 v37 = 264;
    LODWORD(v36[0]) = v6;
    sub_1CB8F1E58((uint64_t *)&v38, v36, (uint64_t)v40);
    int v34 = " (Expected: ";
    __int16 v35 = 259;
    sub_1CB8F1E58(v40, (uint64_t *)&v34, (uint64_t)v41);
    __int16 v33 = 264;
    LODWORD(v32[0]) = 2;
    sub_1CB8F1E58(v41, v32, (uint64_t)v43);
    int v30 = ")";
    __int16 v31 = 259;
    long long v29 = (uint64_t *)&v30;
    goto LABEL_41;
  }
  unsigned int v7 = *(unsigned __int8 **)(a2 + 8);
  unint64_t v8 = *(unsigned __int8 **)(a2 + 16);
  while (v7 < v8)
  {
    *(void *)(a2 + 8) = v7 + 1;
    *(void *)(a2 + 16) = v8;
    int v9 = *v7;
    unint64_t v10 = sub_1CCC8505C(a2);
    if (HIDWORD(v10)) {
      goto LABEL_43;
    }
    unint64_t v11 = *(void *)(a2 + 8) + v10;
    *(void *)(a2 + 16) = v11;
    switch(v9)
    {
      case 5:
        unint64_t v12 = sub_1CCC8505C(a2);
        if (HIDWORD(v12)) {
          goto LABEL_43;
        }
        unint64_t v13 = v12;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3) < v12)
        {
          v45[0] = 3;
          sub_1CCC853CC();
        }
        if (!v12) {
          goto LABEL_18;
        }
        uint64_t v14 = 0;
        while (1)
        {
          uint64_t v15 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          uint64_t v16 = *(void *)(a1 + 472) + v14;
          *(void *)(v16 + 72) = v15;
          *(void *)(v16 + 80) = v17;
          unint64_t v18 = sub_1CCC8505C(a2);
          if (HIDWORD(v18)) {
            goto LABEL_43;
          }
          *(_DWORD *)(*(void *)(a1 + 472) + v14 + 88) = v18;
          unint64_t v19 = sub_1CCC8505C(a2);
          if (HIDWORD(v19)) {
            goto LABEL_43;
          }
          *(_DWORD *)(*(void *)(a1 + 472) + v14 + 92) = v19;
          v14 += 104;
          if (!--v13) {
            goto LABEL_18;
          }
        }
      case 6:
        unint64_t v20 = sub_1CCC8505C(a2);
        if (HIDWORD(v20)) {
          goto LABEL_43;
        }
        int v21 = v20;
        sub_1CD45A1D4(a1 + 600, v20);
        if (!v21) {
          goto LABEL_18;
        }
        break;
      case 7:
        llvm::object::WasmObjectFile::parseLinkingSectionComdat(a1, a2, a3);
        goto LABEL_33;
      case 8:
        llvm::object::WasmObjectFile::parseLinkingSectionSymtab(a1, a2, a3);
LABEL_33:
        if (*a3) {
          return;
        }
        goto LABEL_18;
      default:
        *(void *)(a2 + 8) = v11;
        goto LABEL_18;
    }
    do
    {
      unint64_t v22 = sub_1CCC8505C(a2);
      if (HIDWORD(v22)) {
        goto LABEL_43;
      }
      unint64_t v23 = v22;
      unint64_t v24 = sub_1CCC8505C(a2);
      if (HIDWORD(v24)) {
        goto LABEL_43;
      }
      uint64_t v25 = *(void *)(a1 + 536);
      if (v24 >= (*(void *)(a1 + 544) - v25) >> 5 || *(unsigned char *)(*(void *)(v25 + 32 * v24) + 16))
      {
        v43[0] = (uint64_t)"invalid function symbol: ";
        __int16 v44 = 259;
        __int16 v42 = 264;
        LODWORD(v41[0]) = v24;
        long long v29 = v41;
LABEL_41:
        sub_1CB8F1E58(v43, v29, (uint64_t)v45);
        operator new();
      }
      unint64_t v26 = *(uint64_t **)(a1 + 608);
      uint64_t v27 = v23 | (v24 << 32);
      if ((unint64_t)v26 >= *(void *)(a1 + 616))
      {
        unint64_t v28 = sub_1CBF63C18((void **)(a1 + 600), v27);
      }
      else
      {
        *unint64_t v26 = v27;
        unint64_t v28 = v26 + 1;
      }
      *(void *)(a1 + 608) = v28;
      --v21;
    }
    while (v21);
LABEL_18:
    unsigned int v7 = *(unsigned __int8 **)(a2 + 8);
    if (v7 != *(unsigned __int8 **)(a2 + 16))
    {
      v45[0] = 3;
      sub_1CCC853CC();
    }
  }
  if (v7 != v8)
  {
    v45[0] = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
}

uint64_t llvm::object::WasmObjectFile::parseLinkingSectionSymtab@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6))
  {
LABEL_122:
    int v70 = "LEB is outside Varuint32 range";
    goto LABEL_123;
  }
  unint64_t v7 = v6;
  sub_1CD6F0D88(a1 + 648, v6);
  sub_1CD6F0EA4(a1 + 536, v7);
  v113[0] = 0;
  v113[1] = 0;
  v113[2] = 0x800000000;
  __int16 v110 = 0;
  uint64_t v111 = 0;
  unint64_t v112 = 0;
  v107 = 0;
  __int16 v108 = 0;
  unint64_t v109 = 0;
  __int16 v104 = 0;
  v105 = 0;
  unint64_t v106 = 0;
  uint64_t v8 = (uint64_t)(*(void *)(a1 + 408) - *(void *)(a1 + 400)) >> 3;
  v101 = 0;
  __int16 v102 = 0;
  unint64_t v103 = 0;
  sub_1CD4F8818((uint64_t)&v110, 0x8E38E38E38E38E39 * v8);
  sub_1CD4F8818((uint64_t)&v107, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 408) - *(void *)(a1 + 400)) >> 3));
  sub_1CD4F8818((uint64_t)&v104, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 408) - *(void *)(a1 + 400)) >> 3));
  sub_1CD4F8818((uint64_t)&v101, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 408) - *(void *)(a1 + 400)) >> 3));
  uint64_t v10 = *(void *)(a1 + 400);
  uint64_t v9 = *(void *)(a1 + 408);
  while (v10 != v9)
  {
    switch(*(unsigned char *)(v10 + 32))
    {
      case 0:
        unint64_t v11 = v108;
        if ((unint64_t)v108 >= v109)
        {
          unint64_t v12 = sub_1CBF63C18((void **)&v107, v10);
        }
        else
        {
          *__int16 v108 = v10;
          unint64_t v12 = v11 + 1;
        }
        __int16 v108 = v12;
        break;
      case 1:
        unint64_t v13 = v102;
        if ((unint64_t)v102 >= v103)
        {
          uint64_t v14 = sub_1CBF63C18((void **)&v101, v10);
        }
        else
        {
          *__int16 v102 = v10;
          uint64_t v14 = v13 + 1;
        }
        __int16 v102 = v14;
        break;
      case 3:
        uint64_t v15 = v111;
        if ((unint64_t)v111 >= v112)
        {
          uint64_t v16 = sub_1CBF63C18((void **)&v110, v10);
        }
        else
        {
          *uint64_t v111 = v10;
          uint64_t v16 = v15 + 1;
        }
        uint64_t v111 = v16;
        break;
      case 4:
        uint64_t v17 = v105;
        if ((unint64_t)v105 >= v106)
        {
          unint64_t v18 = sub_1CBF63C18((void **)&v104, v10);
        }
        else
        {
          uint64_t *v105 = v10;
          unint64_t v18 = v17 + 1;
        }
        v105 = v18;
        break;
      default:
        break;
    }
    v10 += 72;
  }
  if (v7)
  {
    while (1)
    {
      v95[8] = 0;
      v95[24] = 0;
      LOBYTE(v96) = 0;
      LOBYTE(v97) = 0;
      BYTE8(v97) = 0;
      BYTE8(v98) = 0;
      long long v94 = 0uLL;
      unint64_t v19 = *(unsigned char **)(a2 + 8);
      if (v19 == *(unsigned char **)(a2 + 16)) {
        break;
      }
      *(void *)(a2 + 8) = v19 + 1;
      v95[0] = *v19;
      unint64_t v20 = sub_1CCC8505C(a2);
      if (HIDWORD(v20)) {
        goto LABEL_122;
      }
      *(_DWORD *)&v95[4] = v20;
      unsigned int v21 = v20 & 0x10;
      switch(v95[0])
      {
        case 0:
          unint64_t v22 = sub_1CCC8505C(a2);
          if (HIDWORD(v22)) {
            goto LABEL_122;
          }
          LODWORD(v99) = v22;
          uint64_t v23 = *(unsigned int *)(a1 + 680);
          if (v23 + ((uint64_t)(*(void *)(a1 + 520) - *(void *)(a1 + 512)) >> 7) <= v22
            || ((v21 >> 4) ^ 1) != v23 <= v22)
          {
            v91[0] = 3;
            sub_1CCC853CC();
          }
          if (!v21)
          {
            *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
            *((void *)&v94 + 1) = v24;
            unint64_t v25 = *(void *)(a1 + 512) + ((unint64_t)(v99 - *(_DWORD *)(a1 + 680)) << 7);
            uint64_t v26 = *(void *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v25 + 4) << 6);
            if (*(void *)(v25 + 96)) {
              goto LABEL_59;
            }
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            *(_OWORD *)(v25 + 88) = v94;
            break;
          }
          uint64_t v63 = v107[v22];
          if ((v95[4] & 0x40) != 0) {
            goto LABEL_86;
          }
          goto LABEL_72;
        case 1:
          *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          *((void *)&v94 + 1) = v29;
          if (v21)
          {
            uint64_t v26 = 0;
            goto LABEL_59;
          }
          v71 = a3;
          unint64_t v30 = sub_1CCC8505C(a2);
          if (HIDWORD(v30)) {
            goto LABEL_122;
          }
          unint64_t v31 = v30;
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3) <= v30)
          {
            v91[0] = 3;
            sub_1CCC853CC();
          }
          unint64_t v32 = sub_1CCC8505C(a2);
          unint64_t v93 = v32;
          uint64_t v33 = sub_1CCC8505C(a2);
          unint64_t v92 = *(void *)(*(void *)(a1 + 472) + 104 * v31 + 64);
          if (v32 > v92)
          {
            __int16 v84 = 1283;
            long long v83 = v94;
            __int16 v81 = 259;
            sub_1CB8F1E58((uint64_t *)&v82, (uint64_t *)&v80, (uint64_t)v85);
            __int16 v79 = 268;
            uint64_t v78 = &v93;
            sub_1CB8F1E58(v85, (uint64_t *)&v78, (uint64_t)v86);
            v76 = " segment size: ";
            __int16 v77 = 259;
            sub_1CB8F1E58(v86, (uint64_t *)&v76, (uint64_t)v87);
            __int16 v75 = 266;
            v74 = &v92;
            sub_1CB8F1E58((uint64_t *)v87, (uint64_t *)&v74, (uint64_t)v89);
            int v72 = ")";
            __int16 v73 = 259;
            sub_1CB8F1E58(v89, (uint64_t *)&v72, (uint64_t)v91);
            operator new();
          }
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          LODWORD(v99) = v31;
          *((void *)&v99 + 1) = v32;
          uint64_t v100 = v33;
          a3 = v71;
          break;
        case 2:
          unint64_t v34 = sub_1CCC8505C(a2);
          if (HIDWORD(v34)) {
            goto LABEL_122;
          }
          LODWORD(v99) = v34;
          uint64_t v35 = *(unsigned int *)(a1 + 672);
          if (v35 + ((uint64_t)(*(void *)(a1 + 360) - *(void *)(a1 + 352)) >> 6) <= v34
            || ((v21 >> 4) ^ 1) != v35 <= v34)
          {
            v91[0] = 3;
            goto LABEL_111;
          }
          if (v21)
          {
            if ((v95[4] & 3) == 1) {
              goto LABEL_115;
            }
            uint64_t v64 = v110[v34];
            if ((v95[4] & 0x40) != 0)
            {
              *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
              *((void *)&v94 + 1) = v67;
              long long v96 = *(_OWORD *)(v64 + 16);
              if (!(_BYTE)v97) {
                LOBYTE(v97) = 1;
              }
            }
            else
            {
              long long v94 = *(_OWORD *)(v64 + 16);
            }
            uint64_t v27 = v64 + 40;
            if (!*(void *)(v64 + 8) || (*(_OWORD *)&v95[8] = *(_OWORD *)v64, v95[24]))
            {
LABEL_42:
              uint64_t v26 = 0;
LABEL_60:
              uint64_t v28 = 0;
              break;
            }
            uint64_t v26 = 0;
LABEL_76:
            uint64_t v28 = 0;
LABEL_77:
            v95[24] = 1;
            break;
          }
          *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          *((void *)&v94 + 1) = v36;
          unint64_t v37 = *(void *)(a1 + 352) + ((unint64_t)(v99 - *(_DWORD *)(a1 + 672)) << 6);
          uint64_t v27 = v37 + 4;
          if (*(void *)(v37 + 56)) {
            goto LABEL_42;
          }
          uint64_t v26 = 0;
          uint64_t v28 = 0;
          *(_OWORD *)(v37 + 48) = v94;
          break;
        case 3:
          if ((v20 & 3) != 2)
          {
            v91[0] = 3;
            sub_1CCC854B0();
          }
          unint64_t v38 = sub_1CCC8505C(a2);
          if (HIDWORD(v38)) {
            goto LABEL_122;
          }
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          LODWORD(v99) = v38;
          long long v94 = *(_OWORD *)(*(void *)(a1 + 72) + 72 * v38 + 8);
          break;
        case 4:
          unint64_t v39 = sub_1CCC8505C(a2);
          if (HIDWORD(v39)) {
            goto LABEL_122;
          }
          LODWORD(v99) = v39;
          uint64_t v40 = *(unsigned int *)(a1 + 684);
          if (v40 - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 384) - *(void *)(a1 + 376)) >> 3) <= v39
            || ((v21 >> 4) ^ 1) != v40 <= v39)
          {
            v91[0] = 3;
            sub_1CCC853CC();
          }
          if (!v21)
          {
            *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
            *((void *)&v94 + 1) = v41;
            unsigned int v42 = v99 - *(_DWORD *)(a1 + 684);
            uint64_t v43 = *(void *)(a1 + 376);
            uint64_t v44 = v43 + 24 * v42;
            uint64_t v26 = *(void *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v44 + 4) << 6);
            if (!*(void *)(v44 + 16))
            {
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              *(_OWORD *)(v43 + 24 * v42 + 8) = v94;
              break;
            }
LABEL_59:
            uint64_t v27 = 0;
            goto LABEL_60;
          }
          if ((v95[4] & 3) == 1)
          {
LABEL_115:
            v91[0] = 3;
            sub_1CCC853CC();
          }
          uint64_t v63 = v104[v39];
          if ((v95[4] & 0x40) != 0)
          {
LABEL_86:
            *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
            *((void *)&v94 + 1) = v65;
            long long v96 = *(_OWORD *)(v63 + 16);
            if (!(_BYTE)v97) {
              LOBYTE(v97) = 1;
            }
          }
          else
          {
LABEL_72:
            long long v94 = *(_OWORD *)(v63 + 16);
          }
          uint64_t v26 = *(void *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v63 + 40) << 6);
          if (!*(void *)(v63 + 8)) {
            goto LABEL_59;
          }
          *(_OWORD *)&v95[8] = *(_OWORD *)v63;
          if (v95[24]) {
            goto LABEL_59;
          }
          uint64_t v27 = 0;
          goto LABEL_76;
        case 5:
          unint64_t v45 = sub_1CCC8505C(a2);
          if (HIDWORD(v45)) {
            goto LABEL_122;
          }
          LODWORD(v99) = v45;
          uint64_t v46 = *(unsigned int *)(a1 + 676);
          if (v46 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3) <= v45
            || ((v21 >> 4) ^ 1) != v46 <= v45)
          {
            v91[0] = 3;
            sub_1CCC853CC();
          }
          if (v21)
          {
            if ((v95[4] & 3) == 1)
            {
              v91[0] = 3;
LABEL_111:
              sub_1CCC853CC();
            }
            uint64_t v66 = v101[v45];
            if ((v95[4] & 0x40) != 0)
            {
              *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
              *((void *)&v94 + 1) = v68;
              long long v96 = *(_OWORD *)(v66 + 16);
              if (!(_BYTE)v97) {
                LOBYTE(v97) = 1;
              }
            }
            else
            {
              long long v94 = *(_OWORD *)(v66 + 16);
            }
            uint64_t v28 = v66 + 40;
            if (!*(void *)(v66 + 8) || (*(_OWORD *)&v95[8] = *(_OWORD *)v66, v95[24]))
            {
LABEL_57:
              uint64_t v26 = 0;
              uint64_t v27 = 0;
              break;
            }
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            goto LABEL_77;
          }
          *(void *)&long long v94 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          *((void *)&v94 + 1) = v47;
          unsigned int v48 = v99 - *(_DWORD *)(a1 + 676);
          uint64_t v49 = *(void *)(a1 + 304);
          uint64_t v50 = v49 + 56 * v48;
          uint64_t v28 = v50 + 8;
          if (*(void *)(v50 + 48)) {
            goto LABEL_57;
          }
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          *(_OWORD *)(v49 + 56 * v48 + 40) = v94;
          break;
        default:
          v89[0] = (uint64_t)"invalid symbol type: ";
          __int16 v90 = 259;
          __int16 v88 = 264;
          LODWORD(v87[0]) = v95[0];
          goto LABEL_119;
      }
      if ((v95[4] & 3) != 2)
      {
        sub_1CC0D7F54((llvm::StringMapImpl *)v113, (unsigned __int8 *)v94, *((size_t *)&v94 + 1));
        if ((v51 & 1) == 0)
        {
          v89[0] = (uint64_t)"duplicate symbol name ";
          __int16 v90 = 259;
          __int16 v88 = 261;
          v87[0] = v94;
LABEL_119:
          sub_1CB8F1E58(v89, (uint64_t *)v87, (uint64_t)v91);
          operator new();
        }
      }
      unint64_t v52 = *(void *)(a1 + 656);
      if (v52 >= *(void *)(a1 + 664))
      {
        int v59 = sub_1CCC85518((void **)(a1 + 648), (uint64_t)&v94);
      }
      else
      {
        long long v53 = v94;
        long long v54 = *(_OWORD *)v95;
        long long v55 = v96;
        *(_OWORD *)(v52 + 32) = *(_OWORD *)&v95[16];
        *(_OWORD *)(v52 + 48) = v55;
        *(_OWORD *)unint64_t v52 = v53;
        *(_OWORD *)(v52 + 16) = v54;
        long long v56 = v97;
        long long v57 = v98;
        long long v58 = v99;
        *(void *)(v52 + 112) = v100;
        *(_OWORD *)(v52 + 80) = v57;
        *(_OWORD *)(v52 + 96) = v58;
        *(_OWORD *)(v52 + 64) = v56;
        int v59 = (char *)(v52 + 120);
      }
      *(void *)(a1 + 656) = v59;
      uint64_t v60 = (uint64_t)(v59 - 120);
      int v61 = *(uint64_t **)(a1 + 544);
      if ((unint64_t)v61 >= *(void *)(a1 + 552))
      {
        long long v62 = sub_1CCC8567C((char **)(a1 + 536), v60, v27, v28, v26);
      }
      else
      {
        *int v61 = v60;
        v61[1] = v27;
        long long v62 = (char *)(v61 + 4);
        v61[2] = v28;
        v61[3] = v26;
      }
      *(void *)(a1 + 544) = v62;
      LODWORD(v7) = v7 - 1;
      if (!v7) {
        goto LABEL_100;
      }
    }
    int v70 = "EOF while reading uint8";
LABEL_123:
    llvm::report_fatal_error((llvm *)v70, (const llvm::Twine *)1);
  }
LABEL_100:
  *a3 = 0;
  if (v101) {
    operator delete(v101);
  }
  if (v104) {
    operator delete(v104);
  }
  if (v107) {
    operator delete(v107);
  }
  if (v110) {
    operator delete(v110);
  }
  return sub_1CC0D7CD8((uint64_t)v113);
}

uint64_t llvm::object::WasmObjectFile::parseLinkingSectionComdat@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = sub_1CCC8505C(a2);
  if (HIDWORD(v5)) {
    goto LABEL_39;
  }
  int v6 = v5;
  v37[0] = 0;
  v37[1] = 0;
  v37[2] = 0x800000000;
  if (v5)
  {
    int v7 = 0;
    while (1)
    {
      uint64_t v9 = (unsigned __int8 *)((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
      uint64_t v10 = v8;
      *(void *)&long long v36 = v9;
      *((void *)&v36 + 1) = v8;
      if (!v8 || (sub_1CC0D7F54((llvm::StringMapImpl *)v37, v9, v8), (v11 & 1) == 0))
      {
        uint64_t v33 = "bad/duplicate COMDAT name ";
        __int16 v34 = 259;
        __int16 v32 = 261;
        v31[0] = (uint64_t)v9;
        v31[1] = v10;
        sub_1CB8F1E58((uint64_t *)&v33, v31, (uint64_t)v35);
        operator new();
      }
      unint64_t v12 = *(_OWORD **)(a1 + 632);
      if ((unint64_t)v12 >= *(void *)(a1 + 640))
      {
        unint64_t v13 = sub_1CC016940((void **)(a1 + 624), &v36);
      }
      else
      {
        *unint64_t v12 = v36;
        unint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 632) = v13;
      unint64_t v14 = sub_1CCC8505C(a2);
      if (HIDWORD(v14)) {
        break;
      }
      if (v14)
      {
        v35[0] = 3;
        sub_1CCC853CC();
      }
      unint64_t v15 = sub_1CCC8505C(a2);
      if (HIDWORD(v15)) {
        break;
      }
      for (int i = v15; i; --i)
      {
        unint64_t v17 = sub_1CCC8505C(a2);
        if (HIDWORD(v17)) {
          goto LABEL_39;
        }
        int v18 = v17;
        unint64_t v19 = sub_1CCC8505C(a2);
        if (HIDWORD(v19)) {
          goto LABEL_39;
        }
        if (v18)
        {
          if (v18 == 1)
          {
            uint64_t v25 = *(unsigned int *)(a1 + 680);
            if (v19 < v25
              || (uint64_t v26 = *(void *)(a1 + 512), v25 + ((*(void *)(a1 + 520) - v26) >> 7) <= v19))
            {
              v35[0] = 3;
              sub_1CCC853CC();
            }
            uint64_t v27 = v26 + ((unint64_t)(v19 - v25) << 7);
            int v28 = *(_DWORD *)(v27 + 120);
            unsigned int v21 = (_DWORD *)(v27 + 120);
            if (v28 != -1)
            {
              v35[0] = 3;
              sub_1CCC853CC();
            }
          }
          else
          {
            if (v18 != 5)
            {
              v35[0] = 3;
              sub_1CCC853CC();
            }
            uint64_t v20 = *(void *)(a1 + 72);
            if (0x8E38E38E38E38E39 * ((*(void *)(a1 + 80) - v20) >> 3) <= v19)
            {
              v35[0] = 3;
              sub_1CCC853CC();
            }
            if (*(_DWORD *)(v20 + 72 * v19))
            {
              v35[0] = 3;
LABEL_35:
              sub_1CCC853CC();
            }
            unsigned int v21 = (_DWORD *)(v20 + 72 * v19 + 24);
          }
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 472);
          if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 480) - v22) >> 3) <= v19)
          {
            v35[0] = 3;
            goto LABEL_35;
          }
          uint64_t v23 = v22 + 104 * v19;
          int v24 = *(_DWORD *)(v23 + 96);
          unsigned int v21 = (_DWORD *)(v23 + 96);
          if (v24 != -1)
          {
            v35[0] = 3;
            sub_1CCC853CC();
          }
        }
        _DWORD *v21 = v7;
      }
      if (++v7 == v6) {
        goto LABEL_29;
      }
    }
LABEL_39:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
LABEL_29:
  *a3 = 0;
  return sub_1CC0D7CD8((uint64_t)v37);
}

void sub_1CD6F0D88(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 120 * a2;
    int v6 = (char *)operator new(120 * a2);
    int v7 = &v6[120 * ((v4 - v2) / 120)];
    size_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[120 * ((v4 - v2) / 120)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 120);
        long long v11 = *(_OWORD *)(v4 - 104);
        long long v12 = *(_OWORD *)(v4 - 88);
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v4 - 72);
        *(_OWORD *)(v9 - 88) = v12;
        *(_OWORD *)(v9 - 104) = v11;
        *(_OWORD *)(v9 - 120) = v10;
        long long v13 = *(_OWORD *)(v4 - 56);
        long long v14 = *(_OWORD *)(v4 - 40);
        long long v15 = *(_OWORD *)(v4 - 24);
        size_t v8 = v9 - 120;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v15;
        *(_OWORD *)(v9 - 40) = v14;
        *(_OWORD *)(v9 - 56) = v13;
        v4 -= 120;
        v9 -= 120;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_1CD6F0EA4(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    uint64_t v5 = *(unsigned char **)(a1 + 8);
    int v6 = (char *)operator new(32 * a2);
    int v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFE0];
    size_t v8 = v7;
    if (v5 != v2)
    {
      uint64_t v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        size_t v8 = v9 - 32;
        long long v10 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v9 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v9 - 1) = v10;
        v5 -= 32;
        v9 -= 32;
      }
      while (v5 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[32 * a2];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void llvm::object::WasmObjectFile::parseProducersSection(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v43[2] = *(void **)MEMORY[0x1E4F143B8];
  v40[0] = v41;
  v40[1] = (void *)0x300000000;
  v43[0] = 0;
  v43[1] = 0;
  unsigned int v42 = v43;
  unint64_t v5 = sub_1CCC8505C(a2);
  if (HIDWORD(v5)) {
LABEL_48:
  }
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  unint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = 0;
    size_t v8 = &v38;
    do
    {
      uint64_t v34 = ((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
      uint64_t v35 = v9;
      if ((sub_1CD6F1334((uint64_t)v40, (uint64_t)&v34) & 0x100000000) == 0)
      {
        LODWORD(v36[0]) = 3;
        sub_1CCC8577C();
      }
      if (v35 == 3)
      {
        if (*(_WORD *)v34 != 25715 || *(unsigned char *)(v34 + 2) != 107)
        {
LABEL_45:
          LODWORD(v36[0]) = 3;
          sub_1CCC857E4();
        }
        uint64_t v10 = a1 + 232;
      }
      else if (v35 == 12)
      {
        if (*(void *)v34 != 0x65737365636F7270 || *(_DWORD *)(v34 + 8) != 2036477284) {
          goto LABEL_45;
        }
        uint64_t v10 = a1 + 208;
      }
      else
      {
        if (v35 != 8 || *(void *)v34 != 0x65676175676E616CLL) {
          goto LABEL_45;
        }
        uint64_t v10 = a1 + 184;
      }
      unint64_t v13 = sub_1CCC8505C(a2);
      if (HIDWORD(v13)) {
        goto LABEL_48;
      }
      unint64_t v14 = v13;
      v36[0] = v37;
      v36[1] = (void *)0x800000000;
      v39[0] = 0;
      v39[1] = 0;
      unint64_t v38 = v39;
      if (v13)
      {
        uint64_t v26 = v8;
        __int16 v32 = (const std::string::value_type *)((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
        std::string::size_type v33 = v24;
        __s = (std::string::value_type *)((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
        std::string::size_type v19 = v25;
        if ((sub_1CD6F144C((uint64_t)v36, (uint64_t)&v32) & 0x100000000) == 0)
        {
LABEL_44:
          LODWORD(v31.__r_.__value_.__l.__data_) = 3;
          sub_1CCC16E40();
        }
        uint64_t v21 = 0;
        while (1)
        {
          uint64_t v28 = v21;
          std::string::__init(&v31, v32, v33);
          std::string::__init(&v30, __s, v19);
          unint64_t v15 = *(void *)(v10 + 8);
          if (v15 >= *(void *)(v10 + 16))
          {
            uint64_t v22 = sub_1CCC8584C((void **)v10, (uint64_t)&v31, (uint64_t)&v30);
            int v23 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
            *(void *)(v10 + 8) = v22;
            size_t v8 = v26;
            if (v23 < 0) {
              operator delete(v30.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v16 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
            *(void *)(v15 + 16) = *((void *)&v31.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v15 = v16;
            memset(&v31, 0, sizeof(v31));
            *(std::string *)(v15 + 24) = v30;
            *(void *)(v10 + 8) = v15 + 48;
            size_t v8 = v26;
          }
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          if (v14 - 1 == v28) {
            break;
          }
          __int16 v32 = (const std::string::value_type *)((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          std::string::size_type v33 = v17;
          __s = (std::string::value_type *)((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
          std::string::size_type v19 = v18;
          unint64_t v20 = sub_1CD6F144C((uint64_t)v36, (uint64_t)&v32);
          uint64_t v21 = v28 + 1;
          if ((v20 & 0x100000000) == 0) {
            goto LABEL_44;
          }
        }
      }
      sub_1CB833A08((uint64_t)v8, v39[0]);
      if (v36[0] != v37) {
        free(v36[0]);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    sub_1CCC859CC();
  }
  *a3 = 0;
  sub_1CB833A08((uint64_t)&v42, v43[0]);
  if (v40[0] != v41) {
    free(v40[0]);
  }
}

unint64_t sub_1CD6F1334(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80))
  {
    sub_1CD69C5D0(a1 + 64, a2, (_OWORD *)a2);
    return ((unint64_t)v9 << 32) | 1;
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    unint64_t v6 = *(void **)a2;
    size_t v7 = *(void *)(a2 + 8);
    if (sub_1CD6F2D2C(*(void *)a1, *(_DWORD *)(a1 + 8), *(void **)a2, v7) == v4 + 16 * v5)
    {
      if (v5 > 2)
      {
        do
        {
          long long v11 = (_OWORD *)(*(void *)a1 + 16 * v5 - 16);
          sub_1CD69C5D0(a1 + 64, (uint64_t)v11, v11);
          int v12 = *(_DWORD *)(a1 + 8);
          LODWORD(v5) = v12 - 1;
          *(_DWORD *)(a1 + 8) = v12 - 1;
        }
        while (v12 != 1);
        sub_1CD69C5D0(a1 + 64, a2, (_OWORD *)a2);
      }
      else
      {
        if (v5 >= *(_DWORD *)(a1 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v10 = (void *)(v4 + 16 * v5);
        void *v10 = v6;
        v10[1] = v7;
        ++*(_DWORD *)(a1 + 8);
      }
      return 0x100000001;
    }
    else
    {
      return 1;
    }
  }
}

unint64_t sub_1CD6F144C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 160))
  {
    sub_1CD69C5D0(a1 + 144, a2, (_OWORD *)a2);
    return ((unint64_t)v9 << 32) | 1;
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    unint64_t v6 = *(void **)a2;
    size_t v7 = *(void *)(a2 + 8);
    if (sub_1CD6F2D2C(*(void *)a1, *(_DWORD *)(a1 + 8), *(void **)a2, v7) == v4 + 16 * v5)
    {
      if (v5 > 7)
      {
        do
        {
          long long v11 = (_OWORD *)(*(void *)a1 + 16 * v5 - 16);
          sub_1CD69C5D0(a1 + 144, (uint64_t)v11, v11);
          int v12 = *(_DWORD *)(a1 + 8);
          LODWORD(v5) = v12 - 1;
          *(_DWORD *)(a1 + 8) = v12 - 1;
        }
        while (v12 != 1);
        sub_1CD69C5D0(a1 + 144, a2, (_OWORD *)a2);
      }
      else
      {
        if (v5 >= *(_DWORD *)(a1 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v10 = (void *)(v4 + 16 * v5);
        void *v10 = v6;
        v10[1] = v7;
        ++*(_DWORD *)(a1 + 8);
      }
      return 0x100000001;
    }
    else
    {
      return 1;
    }
  }
}

void **llvm::object::WasmObjectFile::parseTargetFeaturesSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void v29[2] = *(char **)MEMORY[0x1E4F143B8];
  v26[0] = &v27;
  v26[1] = (void *)0x800000000;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v28 = v29;
  unint64_t v6 = sub_1CCC8505C(a2);
  if (HIDWORD(v6))
  {
    std::string::size_type v19 = "LEB is outside Varuint32 range";
    goto LABEL_21;
  }
  unint64_t v7 = v6;
  if (v6)
  {
    size_t v8 = (unint64_t *)(a1 + 256);
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      unsigned __int8 v9 = *(unsigned __int8 **)(a2 + 8);
      if (v9 == *(unsigned __int8 **)(a2 + 16)) {
        break;
      }
      *(void *)(a2 + 8) = v9 + 1;
      unsigned int v10 = *v9;
      v23[0] = v10;
      BOOL v11 = v10 > 0x3D;
      uint64_t v12 = (1 << v10) & 0x2000280000000000;
      if (v11 || v12 == 0)
      {
        LODWORD(v25.__r_.__value_.__l.__data_) = 3;
        sub_1CCC853CC();
      }
      unint64_t v14 = (const std::string::value_type *)((uint64_t (*)(uint64_t))loc_1CCC837F8)(a2);
      std::string::__init(&v25, v14, v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v25;
      if ((sub_1CD6F1808((uint64_t)v26, (const void **)&__p.__r_.__value_.__l.__data_) & 0x100000000) == 0)
      {
        std::operator+<char>();
        std::string::size_type v17 = std::string::append(&v20, "\"");
        std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        std::string::size_type v22 = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        operator new();
      }
      sub_1CCC83A48(v8, v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!--v7) {
        goto LABEL_15;
      }
    }
    std::string::size_type v19 = "EOF while reading uint8";
LABEL_21:
    llvm::report_fatal_error((llvm *)v19, (const llvm::Twine *)1);
  }
LABEL_15:
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    LODWORD(v25.__r_.__value_.__l.__data_) = 3;
    sub_1CCC853CC();
  }
  *a3 = 0;
  sub_1CB833850((uint64_t)&v28, v29[0]);
  return sub_1CC076978(v26);
}

unint64_t sub_1CD6F1808(uint64_t a1, const void **a2)
{
  if (*(void *)(a1 + 224)) {
    return ((unint64_t)sub_1CD6F2DB0(a1 + 208, a2, (uint64_t)a2) << 32) | 1;
  }
  uint64_t v4 = *(unsigned __int8 **)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = 24 * v5;
    while (!sub_1CBAD746C(v4, (unsigned __int8 *)a2))
    {
      v4 += 24;
      v6 -= 24;
      if (!v6)
      {
        uint64_t v4 = *(unsigned __int8 **)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        goto LABEL_7;
      }
    }
    int v7 = *(_DWORD *)(a1 + 8);
    size_t v8 = *(unsigned __int8 **)a1;
    LODWORD(v5) = v7;
  }
  else
  {
LABEL_7:
    int v7 = v5;
    size_t v8 = v4;
    v4 += 24 * v5;
  }
  if (v4 != &v8[24 * v7]) {
    return 1;
  }
  if (v5 >= 8)
  {
    do
    {
      unsigned int v10 = (const void **)(*(void *)a1 + 24 * v5 - 24);
      sub_1CD6F2DB0(a1 + 208, v10, (uint64_t)v10);
      LODWORD(v5) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v5;
      uint64_t v11 = *(void *)a1 + 24 * v5;
      if (*(char *)(v11 + 23) < 0)
      {
        operator delete(*(void **)v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
    }
    while (v5);
    sub_1CD6F2DB0(a1 + 208, a2, (uint64_t)a2);
  }
  else
  {
    sub_1CD504070(a1, (unint64_t)a2);
  }
  return 0x100000001;
}

void sub_1CD6F1944(uint64_t a1, unint64_t a2)
{
  char v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    uint64_t v5 = *(char **)(a1 + 8);
    uint64_t v6 = (char *)operator new(a2 << 6);
    int v7 = &v6[64 * a2];
    size_t v8 = &v6[v5 - v2];
    if (v5 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = (uint64_t)&v6[v5 - v2];
      do
      {
        v5 -= 64;
        uint64_t v9 = sub_1CD6BF68C(v9 - 64, v5);
      }
      while (v5 != v2);
      char v2 = *(char **)a1;
      unsigned int v10 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      if (v10 != v2)
      {
        uint64_t v11 = v10 - 24;
        do
        {
          uint64_t v12 = (char *)*((void *)v11 - 2);
          if (v11 != v12) {
            free(v12);
          }
          unint64_t v13 = (char *)*((void *)v11 - 5);
          if (v11 - 24 != v13) {
            free(v13);
          }
          unint64_t v14 = v11 - 40;
          v11 -= 64;
        }
        while (v14 != v2);
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_1CD6F1A48(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 9 * a2;
    uint64_t v6 = (char *)operator new(72 * a2);
    int v7 = &v6[72 * ((v4 - v2) / 72)];
    size_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[72 * ((v4 - v2) / 72)];
      do
      {
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v4 - 72);
        long long v10 = *(_OWORD *)(v4 - 56);
        long long v11 = *(_OWORD *)(v4 - 40);
        long long v12 = *(_OWORD *)(v4 - 24);
        size_t v8 = v9 - 72;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v12;
        *(_OWORD *)(v9 - 40) = v11;
        *(_OWORD *)(v9 - 56) = v10;
        v4 -= 72;
        v9 -= 72;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[8 * v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t *sub_1CD6F1B54(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 7)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = operator new(a2 << 7);
    v5[1] = v5[0] + v4;
    void v5[2] = v5[0] + v4;
    void v5[3] = v5[0] + (a2 << 7);
    sub_1CD6F2E54(v3, v5);
    return (uint64_t *)sub_1CD6F2F04((uint64_t)v5);
  }
  return result;
}

void sub_1CD6F1BDC(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 56 * a2;
    uint64_t v6 = (char *)operator new(56 * a2);
    int v7 = &v6[56 * ((v4 - v2) / 56)];
    size_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[56 * ((v4 - v2) / 56)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 56);
        long long v11 = *(_OWORD *)(v4 - 40);
        long long v12 = *(_OWORD *)(v4 - 24);
        size_t v8 = v9 - 56;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v12;
        *(_OWORD *)(v9 - 40) = v11;
        *(_OWORD *)(v9 - 56) = v10;
        v4 -= 56;
        v9 -= 56;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_1CD6F1CE4(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 3 * a2;
    uint64_t v6 = (char *)operator new(24 * a2);
    int v7 = &v6[24 * ((v4 - v2) / 24)];
    size_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 24);
        size_t v8 = v9 - 24;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v4 -= 24;
        v9 -= 24;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[8 * v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_1CD6F1DCC(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    uint64_t v5 = *(unsigned char **)(a1 + 8);
    uint64_t v6 = (char *)operator new(a2 << 6);
    int v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFC0];
    size_t v8 = v7;
    if (v5 != v2)
    {
      uint64_t v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFC0];
      do
      {
        long long v10 = *((_OWORD *)v5 - 4);
        long long v11 = *((_OWORD *)v5 - 3);
        long long v12 = *((_OWORD *)v5 - 1);
        size_t v8 = v9 - 64;
        *((_OWORD *)v9 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v9 - 1) = v12;
        *((_OWORD *)v9 - 4) = v10;
        *((_OWORD *)v9 - 3) = v11;
        v5 -= 64;
        v9 -= 64;
      }
      while (v5 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[64 * a2];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t *sub_1CD6F1E8C(uint64_t *result, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((result[2] - *result) >> 4) < a2)
  {
    char v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    uint64_t v4 = 5 * a2;
    v5[0] = operator new(80 * a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    void v5[3] = v5[0] + 16 * v4;
    sub_1CD6F2F68(v2, v5);
    return (uint64_t *)sub_1CD6F3008((uint64_t)v5);
  }
  return result;
}

void sub_1CD6F1F24(uint64_t a1, unint64_t a2)
{
  char v2 = *(unsigned char **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 104 * a2;
    uint64_t v6 = (char *)operator new(104 * a2);
    int v7 = &v6[104 * ((v4 - v2) / 104)];
    size_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[104 * ((v4 - v2) / 104)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 104);
        long long v11 = *(_OWORD *)(v4 - 88);
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v4 - 72);
        *(_OWORD *)(v9 - 88) = v11;
        *(_OWORD *)(v9 - 104) = v10;
        long long v12 = *(_OWORD *)(v4 - 56);
        long long v13 = *(_OWORD *)(v4 - 40);
        long long v14 = *(_OWORD *)(v4 - 24);
        size_t v8 = v9 - 104;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v14;
        *(_OWORD *)(v9 - 40) = v13;
        *(_OWORD *)(v9 - 56) = v12;
        v4 -= 104;
        v9 -= 104;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void llvm::object::WasmObjectFile::moveSymbolNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::WasmObjectFile::getSymbolFlags@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  unsigned int v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 3) == 1) {
    int v5 = 6;
  }
  else {
    int v5 = 2;
  }
  if ((v4 & 3) == 2) {
    int v6 = 0;
  }
  else {
    int v6 = v5;
  }
  if ((v4 & 0xC) == 4) {
    v6 |= 0x200u;
  }
  unsigned int v7 = v6 & 0xFFFFFFFE | (v4 >> 4) & 1;
  if (*(unsigned char *)(v3 + 16)) {
    int v8 = v7;
  }
  else {
    int v8 = v7 | 0x800;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v8;
  return result;
}

uint64_t llvm::object::WasmObjectFile::symbol_begin(llvm::object::WasmObjectFile *this)
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::symbol_end(llvm::object::WasmObjectFile *this)
{
  return ((*((void *)this + 68) - *((void *)this + 67)) << 27) | 1;
}

__n128 llvm::object::WasmObjectFile::getSymbolName@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3 = *(__n128 **)(*(void *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  a3[1].n128_u8[0] &= ~1u;
  __n128 result = *v3;
  *a3 = *v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 536) + (((unint64_t)a2 >> 27) & 0x1FFFFFFFE0));
  if (*(unsigned char *)(v3 + 16)) {
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  }
  unint64_t v4 = *(unsigned int *)(v3 + 96);
  uint64_t v5 = *(unsigned int *)(a1 + 680);
  if (v4 < v5) {
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  }
  uint64_t v6 = *(void *)(a1 + 512);
  if (v5 + ((*(void *)(a1 + 520) - v6) >> 7) <= v4) {
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = *(unsigned int *)(v6 + ((unint64_t)(v4 - v5) << 7) + 48);
  return a1;
}

uint64_t llvm::object::WasmObjectFile::getWasmSymbolValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *(unsigned __int8 *)(*a2 + 16);
  if (((1 << v3) & 0x35) != 0) {
    return *(unsigned int *)(v2 + 96);
  }
  uint64_t result = 0;
  if (v3 == 1)
  {
    unsigned int v6 = *(_DWORD *)(v2 + 96);
    uint64_t v7 = *(void *)(a1 + 472);
    if (*(unsigned char *)(v7 + 104 * v6 + 24) == 65) {
      uint64_t v8 = *(int *)(v7 + 104 * v6 + 32);
    }
    else {
      uint64_t v8 = *(void *)(v7 + 104 * v6 + 32);
    }
    return *(void *)(v2 + 104) + v8;
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = dword_1CFB2C368[*(char *)(*(void *)(*(void *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0)) + 16)];
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v3;
  return result;
}

unsigned int *llvm::object::WasmObjectFile::getSymbolSection@<X0>(unsigned int *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*((void *)result + 67) + ((a2 >> 27) & 0x1FFFFFFFE0));
  if ((*(unsigned char *)(v4 + 20) & 0x10) != 0)
  {
    uint64_t v6 = (*(uint64_t (**)(unsigned int *))(*(void *)result + 352))(result);
    uint64_t result = v7;
  }
  else
  {
    switch(*(unsigned char *)(v4 + 16))
    {
      case 1:
        uint64_t v5 = result + 173;
        break;
      case 2:
        uint64_t v5 = result + 175;
        break;
      case 3:
        uint64_t v5 = (unsigned int *)(v4 + 96);
        break;
      case 4:
        uint64_t v5 = result + 174;
        break;
      case 5:
        uint64_t v5 = result + 176;
        break;
      default:
        uint64_t v5 = result + 172;
        break;
    }
    uint64_t v6 = *v5;
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = result;
  return result;
}

void llvm::object::WasmObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
}

llvm::object *llvm::object::WasmObjectFile::getSectionName@<X0>(llvm::object *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)result + 9);
  switch(*(_DWORD *)(v4 + 72 * a2))
  {
    case 0:
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = *(_OWORD *)(v4 + 72 * a2 + 8);
      return result;
    case 1:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "TYPE";
      goto LABEL_17;
    case 2:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "IMPORT";
      goto LABEL_11;
    case 3:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "FUNCTION";
      uint64_t v7 = 8;
      break;
    case 4:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "TABLE";
      goto LABEL_13;
    case 5:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "MEMORY";
      goto LABEL_11;
    case 6:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "GLOBAL";
      goto LABEL_11;
    case 7:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "EXPORT";
LABEL_11:
      uint64_t v7 = 6;
      break;
    case 8:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "START";
LABEL_13:
      uint64_t v7 = 5;
      break;
    case 9:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "ELEM";
      goto LABEL_17;
    case 0xA:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "CODE";
      goto LABEL_17;
    case 0xB:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "DATA";
LABEL_17:
      uint64_t v7 = 4;
      break;
    case 0xC:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "DATACOUNT";
      uint64_t v7 = 9;
      break;
    case 0xD:
      *(unsigned char *)(a3 + 16) &= ~1u;
      uint64_t v6 = "TAG";
      uint64_t v7 = 3;
      break;
    default:
      *(void *)&v8.__val_ = llvm::object::object_category(result);
      v8.__cat_ = (const std::error_category *)"";
      llvm::createStringError((llvm *)6, v8, v5);
  }
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAddress()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::WasmObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 72) + 72 * a2 + 40);
}

__n128 llvm::object::WasmObjectFile::getSectionContents@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  int v3 = (__n128 *)(*(void *)(a1 + 72) + 72 * a2);
  a3[1].n128_u8[0] &= ~1u;
  __n128 result = v3[2];
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAlignment()
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::WasmObjectFile::isSectionText(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 72) + 72 * a2) == 10;
}

BOOL llvm::object::WasmObjectFile::isSectionData(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 72) + 72 * a2) == 11;
}

uint64_t llvm::object::WasmObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::WasmObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  return a2 | ((unint64_t)(-1431655765
                                * ((*(void *)(*(void *)(a1 + 72) + 72 * a2 + 56)
                                                - *(void *)(*(void *)(a1 + 72) + 72 * a2 + 48)) >> 3)) << 32);
}

void llvm::object::WasmObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::WasmObjectFile::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2) + 8);
}

unint64_t llvm::object::WasmObjectFile::getRelocationSymbol(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[9] + 72 * a2 + 48);
  if (*(unsigned char *)(v2 + 24 * HIDWORD(a2)) == 6) {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
  else {
    return ((unint64_t)*(unsigned int *)(v2 + 24 * HIDWORD(a2) + 4) << 32) | 1;
  }
}

uint64_t llvm::object::WasmObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
}

void *llvm::object::WasmObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(char *)(*(void *)(*(void *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
  if (v3 > 0x19)
  {
    uint64_t v4 = "Unknown";
    uint64_t v5 = 7;
  }
  else
  {
    uint64_t v4 = (&off_1E684F660)[v3];
    uint64_t v5 = qword_1CFB2C380[v3];
  }
  return sub_1CC22C75C(a3, v4, &v4[v5]);
}

uint64_t llvm::object::WasmObjectFile::section_begin(llvm::object::WasmObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_end(llvm::object::WasmObjectFile *this)
{
  return 954437177 * ((*((void *)this + 10) - *((void *)this + 9)) >> 3);
}

uint64_t llvm::object::WasmObjectFile::getBytesInAddress(llvm::object::WasmObjectFile *this)
{
  if (*((unsigned char *)this + 591)) {
    return 8;
  }
  else {
    return 4;
  }
}

const char *llvm::object::WasmObjectFile::getFileFormatName(llvm::object::WasmObjectFile *this)
{
  return "WASM";
}

uint64_t llvm::object::WasmObjectFile::getArch(llvm::object::WasmObjectFile *this)
{
  if (*((unsigned char *)this + 591)) {
    return 64;
  }
  else {
    return 63;
  }
}

int64x2_t *llvm::object::WasmObjectFile::getFeatures@<X0>(int64x2_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)"", 0);
}

uint64_t llvm::object::WasmObjectFile::isRelocatableObject(llvm::object::WasmObjectFile *this)
{
  return *((unsigned __int8 *)this + 588);
}

uint64_t llvm::object::WasmSectionOrderChecker::isValidSectionOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v19[10] = *MEMORY[0x1E4F143B8];
  int SectionOrder = llvm::object::WasmSectionOrderChecker::getSectionOrder(a1, a2, a3, a4);
  if (!SectionOrder) {
    return 1;
  }
  int v6 = SectionOrder;
  unsigned int v7 = 0;
  std::string::size_type v17 = v19;
  uint64_t v18 = 0x1400000000;
  v15[0] = 0;
  v15[1] = 0;
  int v16 = 0;
  LODWORD(v8) = SectionOrder;
  while (1)
  {
    int v9 = llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v8];
    if (v9)
    {
      long long v10 = &llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v8 + 1];
      do
      {
        if (!*((unsigned char *)v15 + v9))
        {
          if (v7 >= HIDWORD(v18)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v17 + v7) = v9;
          unsigned int v7 = v18 + 1;
          LODWORD(v18) = v18 + 1;
          *((unsigned char *)v15 + v9) = 1;
        }
        int v11 = *v10++;
        int v9 = v11;
      }
      while (v11);
    }
    BOOL v12 = v7 == 0;
    if (!v7) {
      break;
    }
    long long v13 = v17;
    uint64_t v8 = *((int *)v17 + --v7);
    LODWORD(v18) = v7;
    if (*(unsigned char *)(a1 + v8)) {
      goto LABEL_15;
    }
  }
  *(unsigned char *)(a1 + v6) = 1;
  long long v13 = v17;
LABEL_15:
  if (v13 != v19) {
    free(v13);
  }
  return v12;
}

void sub_1CD6F2960(uint64_t a1)
{
  sub_1CD6F2A58(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD6F2998(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  BOOL v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, *a1);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_1CD6F2A58(uint64_t a1)
{
  *(void *)a1 = &unk_1F26342A8;
  sub_1CD49870C((void *)(a1 + 592));
  uint64_t v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(void *)(a1 + 568) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 536);
  if (v3)
  {
    *(void *)(a1 + 544) = v3;
    operator delete(v3);
  }
  BOOL v12 = (void **)(a1 + 512);
  sub_1CCC851B4(&v12);
  uint64_t v4 = *(void **)(a1 + 472);
  if (v4)
  {
    *(void *)(a1 + 480) = v4;
    operator delete(v4);
  }
  BOOL v12 = (void **)(a1 + 448);
  sub_1CCC85240(&v12);
  int v5 = *(void **)(a1 + 424);
  if (v5)
  {
    *(void *)(a1 + 432) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 400);
  if (v6)
  {
    *(void *)(a1 + 408) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 376);
  if (v7)
  {
    *(void *)(a1 + 384) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 352);
  if (v8)
  {
    *(void *)(a1 + 360) = v8;
    operator delete(v8);
  }
  char v9 = *(void **)(a1 + 328);
  if (v9)
  {
    *(void *)(a1 + 336) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 304);
  if (v10)
  {
    *(void *)(a1 + 312) = v10;
    operator delete(v10);
  }
  int v11 = *(char **)(a1 + 280);
  if (v11)
  {
    sub_1CCC852CC(a1 + 280, v11);
    operator delete(*(void **)(a1 + 280));
  }
  BOOL v12 = (void **)(a1 + 256);
  sub_1CC1CB288(&v12);
  BOOL v12 = (void **)(a1 + 232);
  sub_1CC1BE9A4(&v12);
  BOOL v12 = (void **)(a1 + 208);
  sub_1CC1BE9A4(&v12);
  BOOL v12 = (void **)(a1 + 184);
  sub_1CC1BE9A4(&v12);
  sub_1CD6F2BD0((void *)(a1 + 96));
  BOOL v12 = (void **)(a1 + 72);
  sub_1CCC85340(&v12);
  llvm::object::SymbolicFile::~SymbolicFile((llvm::object::SymbolicFile *)a1);
}

void *sub_1CD6F2BD0(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1CD6F2C24(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      long long v7 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v7;
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 72;
      v4 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *__n128 result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD6F2CC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 72;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CD6F2D2C(uint64_t a1, unsigned int a2, void *__s2, size_t __n)
{
  uint64_t v4 = a1 + 16 * a2;
  if (a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = 16 * a2;
    while (*(void *)(v7 + 8) != __n || __n && memcmp(*(const void **)v7, __s2, __n))
    {
      v7 += 16;
      v8 -= 16;
      if (!v8) {
        return v4;
      }
    }
    return v7;
  }
  return v4;
}

uint64_t sub_1CD6F2DB0(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_1CD4F8D98(a1, &v12, a2);
  if (*v5) {
    return 0;
  }
  uint64_t v7 = v5;
  sub_1CC95296C(a1, a3, (uint64_t)&v11);
  uint64_t v8 = v12;
  uint64_t v9 = v11;
  *int v11 = 0;
  v9[1] = 0;
  _OWORD v9[2] = v8;
  void *v7 = v9;
  uint64_t v10 = **(void **)a1;
  if (v10)
  {
    *(void *)a1 = v10;
    uint64_t v9 = *v7;
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 8), v9);
  ++*(void *)(a1 + 16);
  return 1;
}

uint64_t *sub_1CD6F2E54(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 128) = *(void *)(v2 + v5 - 128);
      *(void *)(v6 - 120) = 0;
      *(void *)(v6 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      *(_OWORD *)(v6 - 120) = *(_OWORD *)(v2 + v5 - 120);
      *(void *)(v6 - 104) = *(void *)(v2 + v5 - 104);
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 120) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 48);
      long long v8 = *(_OWORD *)(v2 + v5 - 32);
      long long v10 = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 20) = *(_OWORD *)(v2 + v5 - 20);
      *(_OWORD *)(v6 - 48) = v9;
      *(_OWORD *)(v6 - 32) = v8;
      *(_OWORD *)(v6 - 64) = v10;
      long long v11 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 80) = v11;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  *__n128 result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD6F2F04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 128;
    uint64_t v4 = *(void **)(v2 - 120);
    if (v4)
    {
      *(void *)(v2 - 112) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 128;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_1CD6F2F68(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 80;
      long long v6 = *(_OWORD *)(v3 - 80);
      long long v7 = *(_OWORD *)(v3 - 48);
      uint64_t v8 = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 80) = v6;
      *(void *)(v4 - 32) = v8;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  *__n128 result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD6F3008(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 80;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void llvm::object::WindowsResource::createWindowsResource(void *a1)
{
  if (a1[1] <= 0x1FuLL)
  {
    uint64_t v1 = a1[2];
    uint64_t v2 = a1[3];
    __int16 v6 = 773;
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    uint64_t v5 = ": too small to be a resource file";
    operator new();
  }
  operator new();
}

void sub_1CD6F312C(llvm::object::Binary *a1)
{
  llvm::object::Binary::~Binary(a1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::object *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = *(void *)(a2 + 40);
  sub_1CD6F342C((llvm::object *)&v36, a1, a2);
  char v8 = v37;
  if (v37)
  {
    uint64_t v13 = v36;
    long long v36 = 0;
    if (v13)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v13;
LABEL_8:
      __n128 result = v36;
      if (v36) {
        return (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v36 + 8))(v36);
      }
      return result;
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v36;
  }
  unint64_t v10 = v6 + bswap64(v7);
  long long v11 = *(_OWORD *)(a1 + 32);
  v35[0] = *(_OWORD *)(a1 + 16);
  v35[1] = v11;
  __n128 result = sub_1CCC207AC((llvm::object *)v35, v10, 14 * v9, v34);
  if (v34[0])
  {
    uint64_t v26 = v34[0];
    sub_1CD4FB504(&v26, &v27);
    uint64_t v14 = std::string::append(&v27, ": relocations with offset 0x");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v29 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    __int16 v31 = 260;
    std::string v30 = __p;
    unint64_t v23 = bswap64(*(void *)(a2 + 40));
    v24[0] = (uint64_t)&v23;
    v24[2] = 0;
    __int16 v25 = 270;
    sub_1CB8F1E58((uint64_t *)&v30, v24, (uint64_t)v32);
    uint64_t v21 = " and size 0x";
    __int16 v22 = 259;
    sub_1CB8F1E58(v32, (uint64_t *)&v21, (uint64_t)v33);
    uint64_t v18 = 14 * v9;
    v19[0] = (uint64_t)&v18;
    v19[2] = 0;
    __int16 v20 = 270;
    sub_1CB8F1E58(v33, v19, (uint64_t)v34);
    int v16 = " go past the end of the file";
    __int16 v17 = 259;
    sub_1CB8F1E58(v34, (uint64_t *)&v16, (uint64_t)v35);
    operator new();
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v9;
  if (v8) {
    goto LABEL_8;
  }
  return result;
}

llvm::object *sub_1CD6F342C(llvm::object *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (*(_DWORD *)(a2 + 8) == 11)
  {
    *((unsigned char *)result + 8) &= ~1u;
    unsigned int v4 = *(_DWORD *)(a3 + 56);
LABEL_3:
    unsigned int v5 = bswap32(v4);
LABEL_4:
    *(_DWORD *)__n128 result = v5;
    return result;
  }
  unsigned int v5 = bswap32(*(_DWORD *)(a3 + 56));
  if (v5 <= 0xFFFE)
  {
    *((unsigned char *)result + 8) &= ~1u;
    goto LABEL_4;
  }
  if (*(_WORD *)(*(void *)(a2 + 48) + 2))
  {
    uint64_t v6 = *(void *)(a2 + 64);
    unsigned int v7 = -29127 * ((a3 - v6) >> 3) + 1;
    char v8 = (_DWORD *)(v6 + 36);
    uint64_t v9 = 40 * __rev16(*(unsigned __int16 *)(*(void *)(a2 + 48) + 2));
    while (*v8 != 0x800000 || bswap32(*((unsigned __int16 *)v8 - 2)) >> 16 != (unsigned __int16)v7)
    {
      v8 += 10;
      v9 -= 40;
      if (!v9) {
        goto LABEL_12;
      }
    }
    *((unsigned char *)result + 8) &= ~1u;
    unsigned int v4 = *(v8 - 7);
    goto LABEL_3;
  }
LABEL_12:
  *(void *)&v11.__val_ = llvm::object::object_category(result);
  __n128 result = (llvm::object *)llvm::errorCodeToError((llvm *)3, v11, &v10);
  *((unsigned char *)v3 + 8) |= 1u;
  *(void *)uint64_t v3 = v10;
  return result;
}

llvm::object *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 48);
  unsigned int v7 = *(_DWORD *)(a2 + 24);
  sub_1CD6F3808((llvm::object *)&v36, a1, a2);
  char v8 = v37;
  if (v37)
  {
    uint64_t v13 = v36;
    long long v36 = 0;
    if (v13)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v13;
LABEL_8:
      __n128 result = v36;
      if (v36) {
        return (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v36 + 8))(v36);
      }
      return result;
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v36;
  }
  unint64_t v10 = v6 + bswap32(v7);
  long long v11 = *(_OWORD *)(a1 + 32);
  v35[0] = *(_OWORD *)(a1 + 16);
  v35[1] = v11;
  __n128 result = sub_1CCC207AC((llvm::object *)v35, v10, 10 * v9, v34);
  if (v34[0])
  {
    uint64_t v26 = v34[0];
    sub_1CD4FB504(&v26, &v27);
    uint64_t v14 = std::string::append(&v27, ": relocations with offset 0x");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v29 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    __int16 v31 = 260;
    std::string v30 = __p;
    uint64_t v23 = bswap32(*(_DWORD *)(a2 + 24));
    v24[0] = (uint64_t)&v23;
    v24[2] = 0;
    __int16 v25 = 270;
    sub_1CB8F1E58((uint64_t *)&v30, v24, (uint64_t)v32);
    uint64_t v21 = " and size 0x";
    __int16 v22 = 259;
    sub_1CB8F1E58(v32, (uint64_t *)&v21, (uint64_t)v33);
    uint64_t v18 = 10 * v9;
    v19[0] = (uint64_t)&v18;
    v19[2] = 0;
    __int16 v20 = 270;
    sub_1CB8F1E58(v33, v19, (uint64_t)v34);
    int v16 = " go past the end of the file";
    __int16 v17 = 259;
    sub_1CB8F1E58(v34, (uint64_t *)&v16, (uint64_t)v35);
    operator new();
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v9;
  if (v8) {
    goto LABEL_8;
  }
  return result;
}

llvm::object *sub_1CD6F3808(llvm::object *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (*(_DWORD *)(a2 + 8) == 11)
  {
    *((unsigned char *)result + 8) &= ~1u;
    unsigned int v4 = bswap32(*(unsigned __int16 *)(a3 + 32)) >> 16;
LABEL_3:
    *(_DWORD *)__n128 result = v4;
    return result;
  }
  unsigned int v5 = *(unsigned __int16 *)(a3 + 32);
  if (v5 != 0xFFFF)
  {
    *((unsigned char *)result + 8) &= ~1u;
    unsigned int v4 = __rev16(v5);
    goto LABEL_3;
  }
  if (*(_WORD *)(*(void *)(a2 + 48) + 2))
  {
    uint64_t v6 = *(void *)(a2 + 64);
    unsigned int v7 = -13107 * ((a3 - v6) >> 3) + 1;
    char v8 = (_DWORD *)(v6 + 36);
    uint64_t v9 = 40 * __rev16(*(unsigned __int16 *)(*(void *)(a2 + 48) + 2));
    while (*v8 != 0x800000 || bswap32(*((unsigned __int16 *)v8 - 2)) >> 16 != (unsigned __int16)v7)
    {
      v8 += 10;
      v9 -= 40;
      if (!v9) {
        goto LABEL_11;
      }
    }
    *((unsigned char *)result + 8) &= ~1u;
    unsigned int v4 = bswap32(*(v8 - 7));
    goto LABEL_3;
  }
LABEL_11:
  *(void *)&v11.__val_ = llvm::object::object_category(result);
  __n128 result = (llvm::object *)llvm::errorCodeToError((llvm *)3, v11, &v10);
  *((unsigned char *)v3 + 8) |= 1u;
  *(void *)uint64_t v3 = v10;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::moveSymbolNext(uint64_t result, uint64_t *a2)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = v2 == 11;
  if (v2 == 11) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *a2;
  }
  if (v3) {
    uint64_t v5 = *a2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v4) {
    uint64_t v4 = v5;
  }
  *a2 += 18 * *(unsigned __int8 *)(v4 + 17) + 18;
  return result;
}

size_t llvm::object::XCOFFObjectFile::getStringTableEntry@<X0>(size_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 > 3)
  {
    size_t v4 = this;
    uint64_t v5 = *(void *)(this + 88);
    if (!v5 || *(_DWORD *)(this + 80) <= a2)
    {
      __int16 v17 = "entry with offset 0x";
      __int16 v18 = 259;
      uint64_t v14 = a2;
      v15[0] = (uint64_t)&v14;
      void v15[2] = 0;
      __int16 v16 = 270;
      sub_1CB8F1E58((uint64_t *)&v17, v15, (uint64_t)v19);
      uint64_t v12 = " in a string table with size 0x";
      __int16 v13 = 259;
      sub_1CB8F1E58(v19, (uint64_t *)&v12, (uint64_t)v20);
      uint64_t v9 = *(unsigned int *)(v4 + 80);
      v10[0] = (uint64_t)&v9;
      v10[2] = 0;
      __int16 v11 = 270;
      sub_1CB8F1E58(v20, v10, (uint64_t)v21);
      unsigned int v7 = " is invalid";
      __int16 v8 = 259;
      sub_1CB8F1E58(v21, (uint64_t *)&v7, (uint64_t)v22);
      operator new();
    }
    uint64_t v6 = (const char *)(v5 + a2);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v6;
    this = strlen(v6);
    *(void *)(a3 + 8) = this;
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return this;
}

void *llvm::object::XCOFFObjectFile::getSymbolName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v5[1] = 0;
  void v5[2] = 0;
  v5[0] = a1;
  uint64_t v3 = 1;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v3 = 2;
  }
  v5[v3] = a2;
  return llvm::object::XCOFFSymbolRef::getName(v5, a3);
}

void *llvm::object::XCOFFSymbolRef::getName@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    uint64_t v5 = *((void *)this + 2);
    if ((*(char *)(v5 + 16) & 0x80000000) == 0)
    {
      size_t v6 = *(void *)this;
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      goto LABEL_11;
    }
LABEL_8:
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(void *)a2 = "Unimplemented Debug Name";
    *(void *)(a2 + 8) = 24;
    return this;
  }
  if (*(char *)(v3 + 16) < 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)v3)
  {
    this = memchr(*((void **)this + 1), 0, 8uLL);
    uint64_t v4 = (uint64_t)this - v3;
    *(unsigned char *)(a2 + 16) &= ~1u;
    if (!this) {
      uint64_t v4 = 8;
    }
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    return this;
  }
  size_t v6 = *(void *)this;
  unsigned int v7 = *(_DWORD *)(v3 + 4);
LABEL_11:
  unsigned int v8 = bswap32(v7);

  return (void *)llvm::object::XCOFFObjectFile::getStringTableEntry(v6, v8, a2);
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(result + 8);
  if (v3 == 11 || a2 == 0)
  {
    if (v3 == 11) {
      uint64_t v5 = (unint64_t *)a2;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = bswap64(*v5);
  }
  else
  {
    unint64_t v6 = bswap32(*(_DWORD *)(a2 + 8));
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != 11 && a2 != 0) {
    return bswap32(*(_DWORD *)(a2 + 8));
  }
  if (v2 == 11) {
    uint64_t v4 = (unint64_t *)a2;
  }
  else {
    uint64_t v4 = 0;
  }
  return bswap64(*v4);
}

void *llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef@<X0>(llvm::object::XCOFFSymbolRef *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    uint64_t v4 = *((void *)this + 2);
  }
  unsigned int v5 = *(unsigned __int8 *)(v4 + 17);
  __n128 result = llvm::object::XCOFFSymbolRef::getName(this, (uint64_t)&v28);
  char v7 = v30;
  if ((v30 & 1) != 0 && (uint64_t v15 = v28, v28 = 0, v15))
  {
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v15;
  }
  else
  {
    uint64_t v9 = *(void *)this;
    uint64_t v8 = *((void *)this + 1);
    uint64_t v10 = v8;
    if (!v8) {
      uint64_t v10 = *((void *)this + 2);
    }
    unint64_t v11 = (v10 - *(void *)(v9 + 72)) / 0x12uLL;
    if (!v5)
    {
      __int16 v23 = 1283;
      v22[0] = (uint64_t)"csect symbol \"";
      v22[2] = v28;
      v22[3] = v29;
      v20[0] = (uint64_t)"\" with index ";
      __int16 v21 = 259;
      sub_1CB8F1E58(v22, v20, (uint64_t)v24);
      __int16 v19 = 264;
      LODWORD(v18[0]) = v11;
      sub_1CB8F1E58(v24, v18, (uint64_t)v26);
      __int16 v16 = " contains no auxiliary entry";
      __int16 v17 = 259;
      uint64_t v14 = (uint64_t *)&v16;
LABEL_16:
      sub_1CB8F1E58(v26, v14, (uint64_t)v27);
      operator new();
    }
    if (*(_DWORD *)(v9 + 8) == 11)
    {
      while (1)
      {
        uint64_t v12 = *((void *)this + 1);
        if (!v8) {
          uint64_t v12 = *((void *)this + 2);
        }
        uint64_t v13 = v12 + 18 * v5;
        if (*(unsigned __int8 *)(v13 + 17) == 251) {
          break;
        }
        LOBYTE(v5) = v5 - 1;
        if (!(_BYTE)v5)
        {
          __int16 v25 = 1283;
          v24[0] = (uint64_t)"a csect auxiliary entry has not been found for symbol \"";
          v24[2] = v28;
          void v24[3] = v29;
          v22[0] = (uint64_t)"\" with index ";
          __int16 v23 = 259;
          sub_1CB8F1E58(v24, v22, (uint64_t)v26);
          __int16 v21 = 264;
          LODWORD(v20[0]) = v11;
          uint64_t v14 = v20;
          goto LABEL_16;
        }
      }
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = v13;
    }
    else
    {
      if (!v8) {
        uint64_t v8 = *((void *)this + 2);
      }
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = v8 + 18 * v5;
      *(void *)(a2 + 8) = 0;
    }
    if (v7)
    {
      __n128 result = (void *)v28;
      if (v28) {
        return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolType@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v20[1] = 0;
  v20[2] = 0;
  BOOL v5 = a1[2] == 11;
  uint64_t v6 = 1;
  if (a1[2] == 11) {
    uint64_t v6 = 2;
  }
  v20[0] = a1;
  if (v5) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2;
  }
  v20[v6] = a2;
  uint64_t result = llvm::object::XCOFFSymbolRef::isFunction((llvm::object::XCOFFSymbolRef *)v20);
  if (!result)
  {
    if (v8) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (*(unsigned char *)(v11 + 16) == 103)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      int v10 = 4;
      goto LABEL_11;
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v7;
    }
    int v13 = (int)bswap32(*(unsigned __int16 *)(v12 + 12)) >> 16;
    if (v13 <= 0) {
      goto LABEL_22;
    }
    uint64_t result = llvm::object::XCOFFObjectFile::getSectionByNum((uint64_t)a1, v13, (uint64_t)&v24);
    if (v25)
    {
      uint64_t v14 = v24;
    }
    else
    {
      uint64_t v15 = v24;
      uint64_t result = (uint64_t)llvm::object::XCOFFSymbolRef::getName(v20, (uint64_t)&v21);
      if ((v23 & 1) == 0)
      {
        __int16 v16 = v21;
        size_t v17 = v22;
        if (v22 != 3 || (*(_WORD *)v21 == 20308 ? (BOOL v18 = v21[2] == 67) : (BOOL v18 = 0), !v18))
        {
          uint64_t result = (uint64_t)memchr(v15, 0, 8uLL);
          uint64_t v19 = result - (void)v15;
          if (!result) {
            uint64_t v19 = 8;
          }
          if (v19 != v17 || v17 && (uint64_t result = memcmp(v15, v16, v17), result))
          {
            uint64_t result = (*(uint64_t (**)(_DWORD *, void *))(*(void *)a1 + 200))(a1, v15);
            if ((result & 1) != 0
              || (uint64_t result = (*(uint64_t (**)(_DWORD *, void *))(*(void *)a1 + 208))(a1, v15), result))
            {
              *(unsigned char *)(a3 + 8) &= ~1u;
              int v10 = 2;
              goto LABEL_11;
            }
            uint64_t result = (*(uint64_t (**)(_DWORD *, void *))(*(void *)a1 + 256))(a1, v15);
            *(unsigned char *)(a3 + 8) &= ~1u;
            if (result)
            {
              int v10 = 3;
              goto LABEL_11;
            }
            goto LABEL_23;
          }
        }
LABEL_22:
        *(unsigned char *)(a3 + 8) &= ~1u;
LABEL_23:
        int v10 = 1;
        goto LABEL_11;
      }
      uint64_t v14 = v21;
    }
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v14;
    return result;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  int v10 = 5;
LABEL_11:
  *(_DWORD *)a3 = v10;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSectionByNum@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 < 1 || a2 > (int)(bswap32(*(unsigned __int16 *)(*(void *)(this + 48) + 2)) >> 16))
  {
    atomic_ullong v7 = llvm::object::object_category((llvm::object *)this);
    uint64_t v12 = "the section index (";
    __int16 v13 = 259;
    __int16 v11 = 265;
    LODWORD(v10[0]) = a2;
    sub_1CB8F1E58((uint64_t *)&v12, v10, (uint64_t)v14);
    uint64_t v8 = ") is invalid";
    __int16 v9 = 259;
    sub_1CB8F1E58(v14, (uint64_t *)&v8, (uint64_t)v15);
    sub_1CD4FF4BC(6, v7, (llvm::Twine *)v15);
  }
  unsigned int v5 = 40;
  if (*(_DWORD *)(this + 8) == 11) {
    unsigned int v5 = 72;
  }
  unint64_t v6 = *(void *)(this + 64) + v5 * (unint64_t)(a2 - 1);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v6;
  return this;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolSection@<X0>(llvm::object::XCOFFObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)this + 2);
  BOOL v6 = v5 == 11;
  if (v5 == 11) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v6) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v7) {
    uint64_t v7 = v8;
  }
  unsigned int v9 = bswap32(*(unsigned __int16 *)(v7 + 12)) >> 16;
  if ((unsigned __int16)(v9 + 2) > 2u)
  {
    uint64_t result = llvm::object::XCOFFObjectFile::getSectionByNum((uint64_t)this, (__int16)v9, (uint64_t)&v13);
    uint64_t v12 = v13;
    if (v14)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)(a3 + 8) = this;
    }
    *(void *)a3 = v12;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 352))(this);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v11;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::moveSectionNext(uint64_t result, void *a2)
{
  uint64_t v2 = 40;
  if (*(_DWORD *)(result + 8) == 11) {
    uint64_t v2 = 72;
  }
  *a2 += v2;
  return result;
}

unsigned char *llvm::object::XCOFFObjectFile::getSectionName@<X0>(void *__s@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = memchr(__s, 0, 8uLL);
  uint64_t v5 = result - (unsigned char *)__s;
  *(unsigned char *)(a2 + 16) &= ~1u;
  if (!result) {
    uint64_t v5 = 8;
  }
  *(void *)a2 = __s;
  *(void *)(a2 + 8) = v5;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 11) {
    return bswap64(*(void *)(a2 + 16));
  }
  else {
    return bswap32(*(_DWORD *)(a2 + 12));
  }
}

uint64_t llvm::object::XCOFFObjectFile::getSectionIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 40;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v2 = 72;
  }
  return (a2 - *(void *)(a1 + 64)) / v2 + 1;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionSize(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 11) {
    return bswap64(*(void *)(a2 + 24));
  }
  else {
    return bswap32(*(_DWORD *)(a2 + 16));
  }
}

llvm::object *llvm::object::XCOFFObjectFile::getSectionContents@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (llvm::object *)(*(uint64_t (**)(_OWORD *))(*(void *)a1 + 216))(a1);
  if (result)
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    if (*((_DWORD *)a1 + 2) == 11) {
      unint64_t v7 = bswap64(*(void *)(a2 + 32));
    }
    else {
      unint64_t v7 = bswap32(*(_DWORD *)(a2 + 20));
    }
    unint64_t v34 = v7;
    unint64_t v8 = *((void *)a1 + 2) + v7;
    unint64_t v9 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(void *)a1 + 160))(a1, a2);
    unint64_t v33 = v9;
    long long v10 = a1[2];
    v31[0] = a1[1];
    v31[1] = v10;
    uint64_t result = sub_1CCC207AC((llvm::object *)v31, v8, v9, &v32);
    if (v32)
    {
      uint64_t v21 = v32;
      uint64_t v32 = 0;
      sub_1CD4FB504(&v21, &v22);
      uint64_t v11 = std::string::append(&v22, ": section data with offset 0x");
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v24 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      __int16 v26 = 260;
      char v25 = __p;
      v19[0] = (uint64_t)&v34;
      v19[2] = 0;
      __int16 v20 = 270;
      sub_1CB8F1E58((uint64_t *)&v25, v19, (uint64_t)v27);
      size_t v17 = " and size 0x";
      __int16 v18 = 259;
      sub_1CB8F1E58(v27, (uint64_t *)&v17, (uint64_t)v28);
      v15[0] = (uint64_t)&v33;
      void v15[2] = 0;
      __int16 v16 = 270;
      sub_1CB8F1E58(v28, v15, (uint64_t)v29);
      uint64_t v13 = " goes past the end of the file";
      __int16 v14 = 259;
      sub_1CB8F1E58(v29, (uint64_t *)&v13, (uint64_t)v30);
      operator new();
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v9;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v2 = 64;
  }
  return (*(unsigned __int8 *)(a2 + v2 + 3) >> 5) & 1;
}

BOOL llvm::object::XCOFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v2 = 64;
  }
  return (*(_WORD *)(a2 + v2 + 2) & 0x4004) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v2 = 64;
  }
  return (*(_WORD *)(a2 + v2 + 2) & 0x8008) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isDebugSection(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v2 = 64;
  }
  return (*(_WORD *)(a2 + v2 + 2) & 0x1020) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 11) {
    return *(void *)(a2 + 32) == 0;
  }
  else {
    return *(_DWORD *)(a2 + 20) == 0;
  }
}

void llvm::object::XCOFFObjectFile::section_rel_begin(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == 11) {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>();
  }
  llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>();
}

void llvm::object::XCOFFObjectFile::section_rel_end(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == 11) {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>();
  }
  llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>();
}

uint64_t llvm::object::XCOFFObjectFile::moveRelocationNext(uint64_t result, uint64_t *a2)
{
  if (*(_DWORD *)(result + 8) == 11) {
    uint64_t v2 = *a2 + 14;
  }
  else {
    uint64_t v2 = *a2 + 10;
  }
  *a2 = v2;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationOffset(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 48);
  if (*(_DWORD *)(a1 + 8) == 11)
  {
    unsigned int v4 = *(unsigned __int16 *)(v3 + 2);
    if (*(_WORD *)(v3 + 2))
    {
      int v5 = 0;
      unint64_t v6 = bswap64(*a2);
      unsigned int v7 = __rev16(v4);
      for (int i = (unint64_t *)(v2 + 24); ; i += 9)
      {
        unint64_t v9 = bswap64(*(i - 1));
        uint64_t result = v6 - v9;
        if (v6 >= v9 && v6 < bswap64(*i) + v9) {
          break;
        }
        if (v7 <= (unsigned __int16)++v5) {
          return -1;
        }
      }
      return result;
    }
    return -1;
  }
  unsigned int v11 = *(unsigned __int16 *)(v3 + 2);
  if (!*(_WORD *)(v3 + 2)) {
    return -1;
  }
  int v12 = 0;
  unsigned int v13 = bswap32(*(_DWORD *)a2);
  unsigned int v14 = __rev16(v11);
  for (j = (unsigned int *)(v2 + 16); ; j += 10)
  {
    unsigned int v16 = bswap32(*(j - 1));
    uint64_t result = v13 - v16;
    if (v13 >= v16 && v13 < bswap32(*j) + v16) {
      break;
    }
    if (v14 <= (unsigned __int16)++v12) {
      return -1;
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 9;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v2 = 13;
  }
  return *(unsigned __int8 *)(a2 + v2);
}

void *llvm::object::XCOFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = 9;
  if (*(_DWORD *)(a1 + 8) == 11) {
    uint64_t v4 = 13;
  }
  RelocationTypeString = (char *)llvm::XCOFF::getRelocationTypeString(*(unsigned __int8 *)(a2 + v4));

  return sub_1CC22C75C(a3, RelocationTypeString, &RelocationTypeString[v5]);
}

_DWORD *llvm::object::XCOFFObjectFile::getSymbolFlags@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v22[1] = 0;
  v22[2] = 0;
  v22[0] = result;
  int v5 = result[2];
  uint64_t v6 = 1;
  if (v5 == 11)
  {
    uint64_t v6 = 2;
    uint64_t v7 = a2;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v22[v6] = a2;
  if (v5 == 11) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2;
  }
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  int v10 = *(unsigned __int16 *)(v9 + 12);
  int v11 = *(unsigned __int8 *)(v9 + 16);
  if (v11 == 111) {
    int v12 = 6;
  }
  else {
    int v12 = 2;
  }
  int v13 = v12 | (8 * (v10 == 0xFFFF));
  if (v11 == 111 || v11 == 2) {
    int v15 = v13;
  }
  else {
    int v15 = 8 * (v10 == 0xFFFF);
  }
  if (v11 == 2 || v11 == 111 || v11 == 107)
  {
    uint64_t result = llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v22, (uint64_t)v23);
    uint64_t v21 = v23[0];
    if (v24)
    {
      *(unsigned char *)(a3 + 8) |= 1u;
      *(void *)a3 = v21;
      return result;
    }
    if (!v23[0]) {
      uint64_t v21 = v23[1];
    }
    if ((*(unsigned char *)(v21 + 10) & 7) == 3) {
      v15 |= 0x10u;
    }
    int v10 = *(unsigned __int16 *)(v9 + 12);
    int v5 = v3[2];
  }
  int v16 = v15 | (v10 == 0);
  if (v5 == 11 || (uint64_t v20 = *((void *)v3 + 7)) != 0 && *(_WORD *)(v20 + 2) == 512)
  {
    if (v8) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    int v18 = (*(unsigned __int16 *)(v17 + 14) << 8) & 0x7000;
    int v19 = v16 | 0x40;
    if (v18 == 0x2000) {
      v16 |= 0x200u;
    }
    if (v18 == 0x4000) {
      int v16 = v19;
    }
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v16;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::symbol_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((void *)this + 9);
}

uint64_t llvm::object::XCOFFObjectFile::section_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((void *)this + 8);
}

unint64_t llvm::object::XCOFFObjectFile::section_end(llvm::object::XCOFFObjectFile *this)
{
  unsigned int v1 = 40;
  if (*((_DWORD *)this + 2) == 11) {
    unsigned int v1 = 72;
  }
  return *((void *)this + 8)
       + v1 * (unint64_t)(bswap32(*(unsigned __int16 *)(*((void *)this + 6) + 2)) >> 16);
}

uint64_t llvm::object::XCOFFObjectFile::getBytesInAddress(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11) {
    return 8;
  }
  else {
    return 4;
  }
}

const char *llvm::object::XCOFFObjectFile::getFileFormatName(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11) {
    return "aix5coff64-rs6000";
  }
  else {
    return "aixcoff-rs6000";
  }
}

uint64_t llvm::object::XCOFFObjectFile::getArch(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11) {
    return 23;
  }
  else {
    return 21;
  }
}

int64x2_t *llvm::object::XCOFFObjectFile::getFeatures@<X0>(int64x2_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)"", 0);
}

BOOL llvm::object::XCOFFObjectFile::isRelocatableObject(llvm::object::XCOFFObjectFile *this)
{
  return (*(_WORD *)(*((void *)this + 6) + 18) & 0x100) == 0;
}

void llvm::object::XCOFFObjectFile::getStartAddress(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = 0;
}

unint64_t llvm::object::XCOFFObjectFile::mapDebugSectionName(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result = a2;
  if (a3 == 5)
  {
    if (*(_DWORD *)a2 == 1953724260 && *(unsigned char *)(a2 + 4) == 114)
    {
      int v18 = "debug_str";
    }
    else
    {
      if (*(_DWORD *)a2 != 1869379428 || *(unsigned char *)(a2 + 4) != 99)
      {
        if (*(_DWORD *)a2 != 1634563940 || *(unsigned char *)(a2 + 4) != 99) {
          return result;
        }
        uint64_t v20 = "debug_macinfo";
LABEL_64:
        unint64_t v16 = v20;
        unint64_t v17 = (unint64_t)v20 & 0xFFFFFFFFFFFFFF00;
        return v16 | v17;
      }
      int v18 = "debug_loc";
    }
    unint64_t v16 = v18;
    unint64_t v17 = (unint64_t)v18 & 0xFFFFFFFFFFFFFF00;
    return v16 | v17;
  }
  if (a3 != 7)
  {
    if (a3 != 6) {
      return result;
    }
    if (*(_DWORD *)a2 == 1852405604 && *(_WORD *)(a2 + 4) == 28518)
    {
      int v15 = "debug_info";
    }
    else
    {
      if (*(_DWORD *)a2 != 1768716132 || *(_WORD *)(a2 + 4) != 25966) {
        return result;
      }
      int v15 = "debug_line";
    }
    unint64_t v16 = v15;
    unint64_t v17 = (unint64_t)v15 & 0xFFFFFFFFFFFFFF00;
    return v16 | v17;
  }
  if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1936551522)
  {
    int v19 = "debug_pubnames";
LABEL_56:
    unint64_t v16 = v19;
    unint64_t v17 = (unint64_t)v19 & 0xFFFFFFFFFFFFFF00;
    return v16 | v17;
  }
  if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1887007842)
  {
    int v19 = "debug_pubtypes";
    goto LABEL_56;
  }
  if (*(_DWORD *)a2 == 1918990180 && *(_DWORD *)(a2 + 3) == 1701277298)
  {
    uint64_t v20 = "debug_aranges";
    goto LABEL_64;
  }
  if (*(_DWORD *)a2 == 1650554724 && *(_DWORD *)(a2 + 3) == 1986359906)
  {
    uint64_t v21 = "debug_abbrev";
LABEL_66:
    unint64_t v16 = v21;
    unint64_t v17 = (unint64_t)v21 & 0xFFFFFFFFFFFFFF00;
    return v16 | v17;
  }
  if (*(_DWORD *)a2 == 1852995428 && *(_DWORD *)(a2 + 3) == 1936025454)
  {
    uint64_t v21 = "debug_ranges";
    goto LABEL_66;
  }
  if (*(_DWORD *)a2 == 1919317860 && *(_DWORD *)(a2 + 3) == 1701667186)
  {
    unint64_t v16 = (unint64_t)"debug_frame" & 0xFF;
    unint64_t v17 = (unint64_t)"debug_frame" & 0xFFFFFFFFFFFFFF00;
    return v16 | v17;
  }
  return result;
}

void llvm::object::ObjectFile::createXCOFFObjectFile()
{
}

void sub_1CD6F5208(llvm::object::SymbolicFile *a1)
{
  llvm::object::SymbolicFile::~SymbolicFile(a1);

  JUMPOUT(0x1D25D9CE0);
}

double llvm::opt::Arg::Arg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a9;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(unsigned char *)(a1 + 44) &= 0xFCu;
  *(void *)(a1 + 64) = a7;
  *(void *)(a1 + 48) = a1 + 64;
  *(void *)(a1 + 72) = a8;
  *(void *)(a1 + 80) = 0;
  *(void *)&double result = 0x200000002;
  *(void *)(a1 + 56) = 0x200000002;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a9;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(unsigned char *)(a1 + 44) &= 0xFCu;
  *(void *)(a1 + 64) = a7;
  *(void *)(a1 + 48) = a1 + 64;
  *(void *)(a1 + 72) = a8;
  *(void *)(a1 + 80) = 0;
  *(void *)&double result = 0x200000002;
  *(void *)(a1 + 56) = 0x200000002;
  return result;
}

llvm::raw_ostream *llvm::opt::Arg::print(llvm::opt::Arg *this, llvm::raw_ostream *a2)
{
  sub_1CB8E509C(a2, "<");
  sub_1CB8E509C(a2, " Opt:");
  llvm::opt::Option::print(this, a2);
  uint64_t v4 = sub_1CB8E509C(a2, " Index:");
  llvm::raw_ostream::operator<<(v4, *((unsigned int *)this + 10));
  sub_1CB8E509C(a2, " Values: [");
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v5;
    do
    {
      if (v6) {
        sub_1CB8E509C(a2, ", ");
      }
      uint64_t v8 = sub_1CB8E509C(a2, "'");
      uint64_t v9 = sub_1CB8E509C(v8, *(char **)(*((void *)this + 6) + v6));
      sub_1CB8E509C(v9, "'");
      v6 += 8;
    }
    while (v7 != v6);
  }

  return sub_1CB8E509C(a2, "]>\n");
}

llvm::raw_ostream *llvm::opt::Arg::dump(llvm::opt::Arg *this)
{
  uint64_t v2 = llvm::dbgs(this);

  return llvm::opt::Arg::print(this, v2);
}

void llvm::opt::Arg::getAsString(llvm::opt::Arg *this@<X0>, const llvm::opt::ArgList *a2@<X1>, std::string *a3@<X8>)
{
  v24[32] = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v5 = this;
    this = (llvm::opt::Arg *)*((void *)this + 10);
  }
  while (this);
  std::string v22 = v24;
  long long v23 = xmmword_1CD96DBF0;
  int v11 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  int v18 = &v22;
  int v17 = 0;
  int v10 = &unk_1F2646FA8;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  unsigned int v14 = 0;
  int v19 = v21;
  uint64_t v20 = 0x1000000000;
  llvm::opt::Arg::render((uint64_t)v5, a2, (unsigned int *)&v19);
  if (v20)
  {
    uint64_t v6 = (char **)v19;
    uint64_t v7 = 8 * v20;
    do
    {
      if (v6 != v19)
      {
        uint64_t v8 = v14;
        if ((unint64_t)v14 < v13)
        {
          ++v14;
          *uint64_t v8 = 32;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v10, 32);
        }
      }
      uint64_t v9 = *v6++;
      sub_1CB8E509C((llvm::raw_ostream *)&v10, v9);
      v7 -= 8;
    }
    while (v7);
  }
  std::string::__init(a3, (const std::string::value_type *)*v18, (std::string::size_type)v18[1]);
  if (v19 != v21) {
    free(v19);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v10);
  if (v22 != v24) {
    free(v22);
  }
}

void llvm::opt::Arg::renderAsInput(uint64_t a1, llvm::raw_ostream *a2, unsigned int *a3)
{
  if ((*(unsigned char *)(*(void *)a1 + 40) & 2) != 0) {
    sub_1CB935BDC(a3, *(unsigned char **)(a1 + 48), (unsigned char *)(*(void *)(a1 + 48) + 8 * *(unsigned int *)(a1 + 56)));
  }
  else {
    llvm::opt::Arg::render(a1, a2, a3);
  }
}

void llvm::opt::ArgList::eraseArg(int32x2_t *a1, int a2)
{
  sub_1CCC8EB50((uint64_t)a1, a2, (uint64_t)&v15);
  long long v13 = v15;
  uint64_t v4 = v17;
  uint64_t v14 = v16;
  while ((void)v13 != v4)
  {
    *(void *)long long v13 = 0;
    *(void *)&long long v13 = v13 + 8;
    sub_1CCC8FC30((uint64_t)&v13);
  }
  __int32 v5 = a1[21].i32[0];
  if (v5)
  {
    int32x2_t v6 = a1[19];
    __int32 v7 = v5 - 1;
    unsigned int v8 = v7 & (37 * a2);
    uint64_t v9 = (int *)(*(void *)&v6 + 12 * v8);
    int v10 = *v9;
    if (*v9 == a2)
    {
LABEL_6:
      int *v9 = -2;
      a1[20] = vadd_s32(a1[20], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v11 = 1;
      while (v10 != -1)
      {
        unsigned int v12 = v8 + v11++;
        unsigned int v8 = v12 & v7;
        uint64_t v9 = (int *)(*(void *)&v6 + 12 * v8);
        int v10 = *v9;
        if (*v9 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
}

uint64_t llvm::opt::ArgList::hasFlag(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  unsigned int v8 = (void *)sub_1CD6F571C(a1, a2, a3, a4);
  if (!v8) {
    return a5;
  }
  int v10 = v8;
  if (llvm::opt::Option::matches(v8, v6)) {
    return 1;
  }

  return llvm::opt::Option::matches(v10, v7);
}

uint64_t sub_1CD6F571C(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  sub_1CCC8F340(v12, a1, a2, a3, a4);
  v11[0] = v12[0];
  v11[1] = v12[1];
  uint64_t v4 = *(uint64_t **)&v12[0];
  if (*(void *)&v12[0] == v13) {
    return 0;
  }
  uint64_t v10 = v13;
  do
  {
    uint64_t v8 = *v4;
    uint64_t v6 = v4 + 1;
    uint64_t v7 = v8;
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9) {
      uint64_t v9 = v7;
    }
    *(unsigned char *)(v9 + 44) |= 1u;
    *(void *)&v11[0] = v6;
    sub_1CCC8FD9C((uint64_t)v11);
    uint64_t result = v7;
    uint64_t v4 = *(uint64_t **)&v11[0];
  }
  while (*(void *)&v11[0] != v10);
  return result;
}

void llvm::opt::ArgList::AddAllArgs(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
}

void llvm::opt::ArgList::AddAllArgsTranslated(llvm::raw_ostream *a1, uint64_t a2, int a3, const char *a4, int a5)
{
  sub_1CCC8EB50((uint64_t)a1, a3, (uint64_t)&v25);
  long long v23 = v25;
  uint64_t v9 = v27;
  uint64_t v24 = v26;
  for (int i = (uint64_t *)v25; (void)v23 != v9; int i = (uint64_t *)v23)
  {
    uint64_t v11 = *i;
    uint64_t v12 = *(void *)(*i + 16);
    if (!v12) {
      uint64_t v12 = v11;
    }
    *(unsigned char *)(v12 + 44) |= 1u;
    if (a5)
    {
      if (a4) {
        uint64_t v13 = (void **)strlen(a4);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = **(void ****)(v11 + 48);
      __int16 v22 = 773;
      v21[0] = (void **)a4;
      v21[1] = v13;
      v21[2] = v14;
      uint64_t v15 = sub_1CCC8E7F0(a1, v21);
      unint64_t v16 = *(unsigned int *)(a2 + 8);
      if (v16 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v16) = v15;
    }
    else
    {
      unint64_t v17 = *(unsigned int *)(a2 + 8);
      if (v17 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v17) = a4;
      unsigned int v18 = *(_DWORD *)(a2 + 12);
      unsigned int v19 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v19;
      uint64_t v20 = **(void **)(v11 + 48);
      if (v19 >= v18) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v19) = v20;
    }
    ++*(_DWORD *)(a2 + 8);
    *(void *)&long long v23 = v23 + 8;
    sub_1CCC8FC30((uint64_t)&v23);
  }
}

uint64_t llvm::opt::ArgList::ClaimAllArgs(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 16);
  if (v1)
  {
    uint64_t v2 = 8 * v1;
    for (int i = *(uint64_t **)(this + 8); !*i; ++i)
    {
      v2 -= 8;
      if (!v2) {
        return this;
      }
    }
  }
  else
  {
    int i = *(uint64_t **)(this + 8);
  }
  uint64_t v4 = *(void *)(this + 8) + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    uint64_t v5 = *i;
LABEL_9:
    if (*(void *)(v5 + 16)) {
      uint64_t v5 = *(void *)(v5 + 16);
    }
    if ((*(unsigned char *)(v5 + 44) & 1) == 0) {
      *(unsigned char *)(v5 + 44) |= 1u;
    }
    uint64_t v6 = i + 1;
    while (v6 != (uint64_t *)v4)
    {
      uint64_t v7 = *v6++;
      uint64_t v5 = v7;
      if (v7)
      {
        int i = v6 - 1;
        goto LABEL_9;
      }
    }
  }
  return this;
}

llvm::raw_ostream *llvm::opt::ArgList::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    for (int i = (llvm::opt::Arg **)*((void *)this + 1); !*i; ++i)
    {
      v4 -= 8;
      if (!v4) {
        return this;
      }
    }
  }
  else
  {
    int i = (llvm::opt::Arg **)*((void *)this + 1);
  }
  uint64_t v6 = *((void *)this + 1) + 8 * v3;
  if (i != (llvm::opt::Arg **)v6)
  {
    uint64_t v7 = *i;
LABEL_9:
    sub_1CB8E509C(a2, "* ");
    this = llvm::opt::Arg::print(v7, a2);
    uint64_t v8 = i + 1;
    while (v8 != (llvm::opt::Arg **)v6)
    {
      uint64_t v9 = *v8++;
      uint64_t v7 = v9;
      if (v9)
      {
        int i = v8 - 1;
        goto LABEL_9;
      }
    }
  }
  return this;
}

llvm::raw_ostream *llvm::opt::ArgList::dump(llvm::opt::ArgList *this)
{
  uint64_t v2 = llvm::dbgs(this);

  return llvm::opt::ArgList::print(this, v2);
}

llvm::opt::Arg *llvm::opt::DerivedArgList::AddSynthesizedArg(llvm::opt::DerivedArgList *this, llvm::opt::Arg *a2)
{
  uint64_t v3 = a2;
  sub_1CD6F5BE8((uint64_t)this + 184, (uint64_t *)&v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    llvm::opt::Arg::~Arg(result);
    return (llvm::opt::Arg *)MEMORY[0x1D25D9CE0]();
  }
  return result;
}

uint64_t sub_1CD6F5BE8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v6 = v3 + 8 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      sub_1CD6F6110();
    }
    sub_1CD6F6110();
  }
  uint64_t v4 = *(unsigned int *)(result + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8 * v4) = v5;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

void llvm::opt::DerivedArgList::MakeFlagArg(uint64_t *a1, void **a2, void **a3, void **a4)
{
  v16[8] = a3;
  v16[9] = a4;
  v16[7] = a2;
  uint64_t v6 = *(void *)*a3;
  if (v6) {
    size_t v7 = strlen(*(const char **)*a3);
  }
  else {
    size_t v7 = 0;
  }
  __int16 v15 = 261;
  v14[0] = v6;
  v14[1] = v7;
  uint64_t v8 = (uint64_t)a3[1];
  if (v8) {
    size_t v9 = strlen((const char *)a3[1]);
  }
  else {
    size_t v9 = 0;
  }
  __int16 v13 = 261;
  v12[0] = v8;
  v12[1] = v9;
  sub_1CB8F1E58(v14, v12, (uint64_t)v16);
  v16[5] = (void **)sub_1CCC8E7F0((llvm::raw_ostream *)a1, v16);
  uint64_t v10 = (const char *)a3[1];
  if (v10) {
    size_t v11 = strlen(v10);
  }
  else {
    size_t v11 = 0;
  }
  llvm::opt::InputArgList::MakeIndex(a1[22], v10, v11);
  sub_1CCC8F8F8();
}

void llvm::opt::DerivedArgList::MakeSeparateArg(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v24 = a2;
  uint64_t v10 = *((void *)a1 + 22);
  size_t v11 = *(const void **)(a3 + 8);
  if (v11) {
    size_t v12 = strlen(*(const char **)(a3 + 8));
  }
  else {
    size_t v12 = 0;
  }
  int Index = llvm::opt::InputArgList::MakeIndex(v10, v11, v12);
  llvm::opt::InputArgList::MakeIndex(v10, a5, a6);
  int v23 = Index;
  uint64_t v14 = **(void **)a3;
  if (v14) {
    size_t v15 = strlen(**(const char ***)a3);
  }
  else {
    size_t v15 = 0;
  }
  __int16 v21 = 261;
  v20[0] = v14;
  v20[1] = v15;
  unint64_t v16 = *(const char **)(a3 + 8);
  if (v16) {
    size_t v17 = strlen(v16);
  }
  else {
    size_t v17 = 0;
  }
  __int16 v19 = 261;
  v18[0] = (uint64_t)v16;
  v18[1] = v17;
  sub_1CB8F1E58(v20, v18, (uint64_t)v22);
  uint64_t v22[5] = (void **)sub_1CCC8E7F0(a1, v22);
  sub_1CCC8FB3C();
}

void llvm::opt::DerivedArgList::MakeJoinedArg(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v31 = a2;
  uint64_t v10 = *((void *)a1 + 22);
  uint64_t v11 = *(void *)(a3 + 8);
  if (v11) {
    size_t v12 = strlen(*(const char **)(a3 + 8));
  }
  else {
    size_t v12 = 0;
  }
  __int16 v26 = 261;
  uint64_t v24 = v11;
  size_t v25 = v12;
  __int16 v23 = 261;
  uint64_t v21 = a5;
  size_t v22 = a6;
  sub_1CB8F1E58(&v24, &v21, (uint64_t)v27);
  llvm::Twine::str((llvm::Twine *)v27, v28);
  if (v29 >= 0) {
    __int16 v13 = v28;
  }
  else {
    __int16 v13 = (void **)v28[0];
  }
  if (v29 >= 0) {
    size_t v14 = v29 & 0x7F;
  }
  else {
    size_t v14 = (size_t)v28[1];
  }
  int Index = llvm::opt::InputArgList::MakeIndex(v10, v13, v14);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  int v30 = Index;
  uint64_t v16 = **(void **)a3;
  if (v16) {
    size_t v17 = strlen(**(const char ***)a3);
  }
  else {
    size_t v17 = 0;
  }
  __int16 v26 = 261;
  uint64_t v24 = v16;
  size_t v25 = v17;
  uint64_t v18 = *(void *)(a3 + 8);
  if (v18) {
    size_t v19 = strlen(*(const char **)(a3 + 8));
  }
  else {
    size_t v19 = 0;
  }
  __int16 v23 = 261;
  uint64_t v21 = v18;
  size_t v22 = v19;
  sub_1CB8F1E58(&v24, &v21, (uint64_t)v27);
  sub_1CCC8E7F0(a1, v27);
  uint64_t v20 = *(const char **)(a3 + 8);
  if (v20) {
    strlen(v20);
  }
  sub_1CCC8FB3C();
}

uint64_t sub_1CD6F6104(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 176) + 344);
}

void sub_1CD6F6110()
{
}

unsigned int *sub_1CD6F6180(unsigned int *result, void *a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)result;
    uint64_t v4 = 8 * v2;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    uint64_t v7 = *(void *)result - 8;
    do
    {
      uint64_t result = *(unsigned int **)(v7 + v4);
      *(void *)(v7 + v4) = 0;
      if (result)
      {
        llvm::opt::Arg::~Arg((llvm::opt::Arg *)result);
        uint64_t result = (unsigned int *)MEMORY[0x1D25D9CE0]();
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

llvm::raw_ostream *llvm::opt::Option::print(llvm::opt::Option *this, llvm::raw_ostream *a2)
{
  sub_1CB8E509C(a2, "<");
  uint64_t v4 = *(void **)this;
  unint64_t v5 = *(char *)(*(void *)this + 36);
  if (v5 <= 0xC)
  {
    sub_1CB8E509C(a2, (&off_1E684F730)[v5]);
    uint64_t v4 = *(void **)this;
  }
  if (*v4)
  {
    sub_1CB8E509C(a2, " Prefixes:[");
    uint64_t v6 = **(void ***)this;
    if (*v6)
    {
      uint64_t v7 = v6 + 1;
      do
      {
        uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v8 >= *((void *)a2 + 3))
        {
          size_t v9 = llvm::raw_ostream::write(a2, 34);
        }
        else
        {
          *((void *)a2 + 4) = v8 + 1;
          *uint64_t v8 = 34;
          size_t v9 = a2;
        }
        uint64_t v10 = sub_1CB8E509C(v9, (char *)*(v7 - 1));
        if (*v7) {
          uint64_t v11 = "\", ";
        }
        else {
          uint64_t v11 = "\"";
        }
        sub_1CB8E509C(v10, v11);
      }
      while (*v7++);
    }
    __int16 v13 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v13 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 93);
    }
    else
    {
      *((void *)a2 + 4) = v13 + 1;
      *__int16 v13 = 93;
    }
  }
  size_t v14 = sub_1CB8E509C(a2, " Name:\"");
  size_t v15 = *(const void **)(*(void *)this + 8);
  if (v15)
  {
    size_t v16 = strlen(*(const char **)(*(void *)this + 8));
    size_t v17 = (void *)*((void *)v14 + 4);
    if (v16 <= *((void *)v14 + 3) - (void)v17)
    {
      if (v16)
      {
        memcpy(v17, v15, v16);
        *((void *)v14 + 4) += v16;
      }
    }
    else
    {
      llvm::raw_ostream::write(v14, (const char *)v15, v16);
    }
  }
  uint64_t v18 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v18 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 34);
  }
  else
  {
    *((void *)v14 + 4) = v18 + 1;
    *uint64_t v18 = 34;
  }
  size_t v19 = *(void ***)this;
  if (*(_WORD *)(*(void *)this + 44))
  {
    uint64_t v20 = (uint64_t *)*((void *)this + 1);
    uint64_t v21 = *v20;
    v27[0] = *v20 + ((unint64_t)(*(unsigned __int16 *)(*(void *)this + 44) - 1) << 6);
    v27[1] = v20;
    if (v21)
    {
      sub_1CB8E509C(a2, " Group:");
      llvm::opt::Option::print((llvm::opt::Option *)v27, a2);
      size_t v19 = *(void ***)this;
    }
  }
  if (*((_WORD *)v19 + 23))
  {
    size_t v22 = (uint64_t *)*((void *)this + 1);
    uint64_t v23 = *v22;
    v26[0] = *v22 + ((unint64_t)(*((unsigned __int16 *)v19 + 23) - 1) << 6);
    v26[1] = v22;
    if (v23)
    {
      sub_1CB8E509C(a2, " Alias:");
      llvm::opt::Option::print((llvm::opt::Option *)v26, a2);
      size_t v19 = *(void ***)this;
    }
  }
  if (*((unsigned char *)v19 + 36) == 10)
  {
    uint64_t v24 = sub_1CB8E509C(a2, " NumArgs:");
    llvm::raw_ostream::operator<<(v24, *(unsigned __int8 *)(*(void *)this + 37));
  }

  return sub_1CB8E509C(a2, ">\n");
}

llvm::raw_ostream *llvm::opt::Option::dump(llvm::opt::Option *this)
{
  uint64_t v2 = llvm::dbgs(this);

  return llvm::opt::Option::print(this, v2);
}

void llvm::opt::OptTable::suggestValueCompletions(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, const void *a4@<X3>, size_t a5@<X4>, int64x2_t *a6@<X8>)
{
  v29[16] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(a1 + 48);
  unint64_t v8 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  uint64_t v9 = v8 - v7;
  if (v8 <= v7)
  {
LABEL_6:
    a6->i64[0] = 0;
    a6->i64[1] = 0;
    a6[1].i64[0] = 0;
  }
  else
  {
    uint64_t v14 = *(void *)a1 + (v7 << 6);
    while (1)
    {
      size_t v15 = *(const char **)(v14 + 56);
      if (v15)
      {
        if (sub_1CCC90F58(*(void *)v14, *(char **)(v14 + 8), a2, a3)) {
          break;
        }
      }
      v14 += 64;
      if (!--v9) {
        goto LABEL_6;
      }
    }
    uint64_t v27 = v29;
    uint64_t v28 = 0x800000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    __p.__r_.__value_.__l.__size_ = strlen(v15);
    llvm::StringRef::split(&__p, (uint64_t)&v27, ",", 1uLL, -1, 0);
    a6->i64[0] = 0;
    a6->i64[1] = 0;
    a6[1].i64[0] = 0;
    size_t v16 = (const void **)v27;
    if (v28)
    {
      size_t v17 = (const void **)((char *)v27 + 16 * v28);
      while (1)
      {
        std::string::size_type v18 = (std::string::size_type)v16[1];
        if (v18 >= a5)
        {
          size_t v19 = *v16;
          if (!a5 || !memcmp(*v16, a4, a5))
          {
            if (v18 >= a5) {
              size_t v20 = a5;
            }
            else {
              size_t v20 = v18;
            }
            if (v20)
            {
              if (!memcmp(a4, v19, v20) && a5 == v18) {
                goto LABEL_11;
              }
LABEL_23:
              std::string::__init(&__p, (const std::string::value_type *)v19, v18);
              unint64_t v22 = a6->u64[1];
              if (v22 >= a6[1].i64[0])
              {
                uint64_t v24 = sub_1CBF4ECB4(a6, (uint64_t)&__p);
                int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                a6->i64[1] = (uint64_t)v24;
                if (v25 < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(v22 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v22 = v23;
                a6->i64[1] = v22 + 24;
              }
              goto LABEL_11;
            }
            if (a5 != v18) {
              goto LABEL_23;
            }
          }
        }
LABEL_11:
        v16 += 2;
        if (v16 == v17)
        {
          size_t v16 = (const void **)v27;
          break;
        }
      }
    }
    if (v16 != v29) {
      free(v16);
    }
  }
}

void llvm::opt::OptTable::findByPrefix(uint64_t *a1@<X0>, const std::string::value_type *a2@<X1>, std::string::size_type a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  unint64_t v5 = *((unsigned int *)a1 + 12);
  unint64_t v31 = (a1[1] - *a1) >> 6;
  if (v31 > v5)
  {
    do
    {
      uint64_t v8 = *a1;
      unint64_t v9 = *a1 + (v5 << 6);
      uint64_t v10 = *(const char ***)v9;
      if (*(void *)v9)
      {
        uint64_t v11 = (const std::string::value_type **)(v9 + 16);
        if ((*(void *)(v9 + 16) || *(_WORD *)(v9 + 44) != 0) && (*(_DWORD *)(v8 + (v5 << 6) + 40) & a4) == 0)
        {
          __int16 v13 = *v10;
          if (*v10)
          {
            uint64_t v14 = (const char **)(v8 + (v5 << 6) + 8);
            uint64_t v15 = 8;
            do
            {
              std::string::size_type v16 = strlen(v13);
              std::string::__init(&v34, v13, v16);
              std::string::size_type v17 = strlen(*v14);
              std::string::__init(&v33, *v14, v17);
              if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v18 = &v33;
              }
              else {
                std::string::size_type v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
              }
              if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = *((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x7F;
              }
              else {
                std::string::size_type size = v33.__r_.__value_.__l.__size_;
              }
              size_t v20 = std::string::append(&v34, (const std::string::value_type *)v18, size);
              std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
              v35.__r_.__value_.__r.__words[2] = v21;
              v20->__r_.__value_.__l.__size_ = 0;
              v20->__r_.__value_.__r.__words[2] = 0;
              v20->__r_.__value_.__r.__words[0] = 0;
              unint64_t v22 = std::string::append(&v35, "\t");
              std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
              v36.__r_.__value_.__r.__words[2] = v23;
              v22->__r_.__value_.__l.__size_ = 0;
              v22->__r_.__value_.__r.__words[2] = 0;
              v22->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v35.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v33.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
              if (*v11) {
                std::string::append(&v36, *v11);
              }
              if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v24 = &v36;
              }
              else {
                uint64_t v24 = (std::string *)v36.__r_.__value_.__r.__words[0];
              }
              std::string::size_type v25 = *((unsigned char *)&v36.__r_.__value_.__s + 23) & 0x7F;
              if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v25 = v36.__r_.__value_.__l.__size_;
              }
              if (v25 >= a3 && (!a3 || !memcmp(v24, a2, a3)))
              {
                std::string::__init(&v34, a2, a3);
                __int16 v26 = std::string::append(&v34, "\t");
                std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
                v35.__r_.__value_.__r.__words[2] = v27;
                v26->__r_.__value_.__l.__size_ = 0;
                v26->__r_.__value_.__r.__words[2] = 0;
                v26->__r_.__value_.__r.__words[0] = 0;
                BOOL v28 = sub_1CBAD746C((unsigned __int8 *)&v36, (unsigned __int8 *)&v35);
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v35.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v34.__r_.__value_.__l.__data_);
                }
                if (!v28) {
                  sub_1CCC91038(a5, (uint64_t)&v36);
                }
              }
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v36.__r_.__value_.__l.__data_);
              }
              __int16 v13 = *(const char **)(*(void *)v9 + v15);
              v15 += 8;
            }
            while (v13);
          }
        }
      }
      ++v5;
    }
    while (v5 != v31);
  }
}

uint64_t llvm::opt::OptTable::findNearest(uint64_t a1, std::string::value_type *a2, size_t a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  int v59 = a2;
  size_t v60 = a3;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  if (v8 == (v7 - *(void *)a1) >> 6) {
    return 0xFFFFFFFFLL;
  }
  int v11 = a6;
  int v12 = a5;
  uint64_t v9 = 0xFFFFFFFFLL;
  uint64_t v14 = *(void *)a1 + (v8 << 6);
  size_t v15 = a7;
  size_t v42 = a7;
  uint64_t v43 = *(void *)(a1 + 8);
  do
  {
    std::string::size_type v16 = *(void *)(v14 + 8);
    if (v16)
    {
      size_t v17 = strlen(*(const char **)(v14 + 8));
      if (v17 && v17 >= v15)
      {
        int v19 = *(_DWORD *)(v14 + 40);
        BOOL v20 = (v19 & v12) != 0 || v12 == 0;
        int v21 = v19 & v11;
        BOOL v22 = v20 && v21 == 0;
        if (v22 && *(void *)v14)
        {
          size_t v23 = v17;
          int v24 = *(unsigned __int8 *)(v17 + v16 - 1);
          std::string::__init(&v58, v59, v60);
          if (v24 == 61 || v24 == 58)
          {
            v53.__r_.__value_.__s.__data_[0] = v24;
            unint64_t v25 = llvm::StringRef::find((uint64_t *)&v59, (char *)&v53, 1uLL, 0);
            if (v25 == -1)
            {
              char v29 = 0;
              uint64_t v30 = 0;
              __int16 v26 = v59;
              std::string::size_type v27 = v60;
            }
            else
            {
              __int16 v26 = v59;
              if (v60 >= v25) {
                std::string::size_type v27 = v25;
              }
              else {
                std::string::size_type v27 = v60;
              }
              if (v60 >= v25 + 1) {
                size_t v28 = v25 + 1;
              }
              else {
                size_t v28 = v60;
              }
              char v29 = &v59[v28];
              uint64_t v30 = v60 - v28;
            }
            std::string::__init(&v53, v26, v27);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            std::string v58 = v53;
            if (v60 && (unint64_t v31 = v59, (v32 = memchr(v59, v24, v60)) != 0)) {
              uint64_t v33 = v32 - v31;
            }
            else {
              uint64_t v33 = -1;
            }
            if (v33 == v27) {
              std::string::push_back(&v58, v24);
            }
          }
          else
          {
            uint64_t v30 = 0;
            char v29 = 0;
          }
          std::string::size_type v34 = **(void **)v14;
          if (v34)
          {
            uint64_t v35 = 8;
            do
            {
              __int16 v55 = 1283;
              v53.__r_.__value_.__r.__words[0] = v34;
              v53.__r_.__value_.__r.__words[2] = v16;
              size_t v54 = v23;
              llvm::Twine::str((llvm::Twine *)&v53, v56);
              std::string v36 = (void **)v56[0];
              if (v57 >= 0) {
                std::string v36 = v56;
              }
              char v37 = (void *)(v57 & 0x7F);
              if (v57 < 0) {
                char v37 = v56[1];
              }
              v52[0] = v36;
              v52[1] = v37;
              if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v38 = &v58;
              }
              else {
                uint64_t v38 = (std::string *)v58.__r_.__value_.__r.__words[0];
              }
              if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t size = *((unsigned char *)&v58.__r_.__value_.__s + 23) & 0x7F;
              }
              else {
                unint64_t size = v58.__r_.__value_.__l.__size_;
              }
              uint64_t v40 = llvm::StringRef::edit_distance((uint64_t)v52, (unsigned __int8 *)v38, size, 1, v9);
              uint64_t v41 = v40;
              if (!v30 && (v24 == 61 || v24 == 58)) {
                uint64_t v41 = (v40 + 1);
              }
              if (v41 < v9)
              {
                __int16 v49 = 260;
                unsigned int v48 = v56;
                __int16 v47 = 261;
                v46[0] = (uint64_t)v29;
                v46[1] = v30;
                sub_1CB8F1E58((uint64_t *)&v48, v46, (uint64_t)&v53);
                llvm::Twine::str((llvm::Twine *)&v53, &v50);
                if (*(char *)(a4 + 23) < 0) {
                  operator delete(*(void **)a4);
                }
                *(_OWORD *)a4 = v50;
                *(void *)(a4 + 16) = v51;
                uint64_t v9 = v41;
              }
              if (v57 < 0) {
                operator delete(v56[0]);
              }
              std::string::size_type v34 = *(void *)(*(void *)v14 + v35);
              v35 += 8;
            }
            while (v34);
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          int v12 = a5;
          int v11 = a6;
          size_t v15 = v42;
          uint64_t v7 = v43;
        }
      }
    }
    v14 += 64;
  }
  while (v14 != v7);
  return v9;
}

uint64_t llvm::opt::OptTable::parseOneArgGrouped@<X0>(llvm::opt::OptTable *this@<X0>, llvm::opt::InputArgList *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v8 = *a3;
  uint64_t v9 = *(void *)(*((void *)a2 + 22) + 8 * v8);
  uint64_t v50 = v9;
  v49[0] = v9;
  if (v9) {
    size_t v10 = strlen((const char *)v9);
  }
  else {
    size_t v10 = 0;
  }
  v49[1] = v10;
  if (sub_1CCC91148(*((size_t ***)this + 7), *((_DWORD *)this + 16), (unsigned char *)v9, v10))
  {
    *uint64_t v4 = v8 + 1;
    operator new();
  }
  unint64_t v39 = a2;
  int v11 = *(size_t ***)this;
  int v12 = (void **)*((void *)this + 1);
  uint64_t v13 = (uint64_t)v12 - *(void *)this;
  char v14 = *((unsigned char *)this + 111);
  int v15 = v14;
  if (v14 >= 0) {
    std::string::size_type v16 = (unsigned __int8 *)this + 88;
  }
  else {
    std::string::size_type v16 = (unsigned __int8 *)*((void *)this + 11);
  }
  uint64_t v17 = v14 & 0x7F;
  if (v15 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *((void *)this + 12);
  }
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(v49, v16, v18, 0);
  if (first_not_of >= v10) {
    size_t v20 = v10;
  }
  else {
    size_t v20 = first_not_of;
  }
  uint64_t v21 = *((unsigned int *)this + 12);
  if (v21 == v13 >> 6) {
    goto LABEL_16;
  }
  uint64_t v38 = v4;
  BOOL v22 = (char *)(v9 + v20);
  size_t v23 = (void **)&v11[8 * v21];
  unint64_t v24 = ((char *)v12 - (char *)v23) >> 6;
  do
  {
    unint64_t v25 = &v23[8 * (v24 >> 1)];
    BOOL v26 = sub_1CCC91CF4((char *)v25[1], v22);
    if (v26) {
      v24 += ~(v24 >> 1);
    }
    else {
      v24 >>= 1;
    }
    if (v26) {
      size_t v23 = v25 + 8;
    }
  }
  while (v24);
  uint64_t v4 = v38;
  if (v23 == v12) {
    goto LABEL_16;
  }
  uint64_t v27 = 0;
  unsigned int v28 = *v38;
  do
  {
    unsigned int v29 = sub_1CCC911FC((uint64_t)v23, (char *)v9, v10, *((unsigned __int8 *)this + 24));
    if (v29)
    {
      unsigned int v30 = v29;
      unint64_t v45 = v23;
      uint64_t v46 = this;
      uint64_t result = (uint64_t)llvm::opt::Option::accept((uint64_t *)&v45, v39, v29, 0, v38, a4);
      if (*a4) {
        return result;
      }
      *a4 = 0;
      if (v30 == 2 && *((unsigned char *)v45 + 36) == 3) {
        uint64_t v27 = (uint64_t)v23;
      }
      if (v28 != *v38) {
        return result;
      }
    }
    v23 += 8;
  }
  while (v23 != v12);
  if (!v27)
  {
LABEL_16:
    if (*(unsigned char *)(v9 + 1) == 45)
    {
      ++*v4;
      operator new();
    }
    __int16 v47 = 261;
    if (v10 >= 2) {
      uint64_t v32 = 2;
    }
    else {
      uint64_t v32 = v10;
    }
    unint64_t v45 = (void **)v9;
    uint64_t v46 = (llvm::opt::OptTable *)v32;
    uint64_t v50 = sub_1CCC8E7F0(v39, &v45);
    uint64_t v33 = *v4;
    __int16 v44 = 263;
    LOBYTE(v43[0]) = 45;
    __int16 v42 = 261;
    uint64_t v40 = v9 + v32;
    size_t v41 = v10 - v32;
    sub_1CB8F1E58(v43, &v40, (uint64_t)&v45);
    *(void *)(*((void *)v39 + 22) + 8 * v33) = sub_1CCC8E7F0(v39, &v45);
    int v34 = *((_DWORD *)this + 11);
    if (v34)
    {
      uint64_t v35 = (void **)(*(void *)this + ((unint64_t)(v34 - 1) << 6));
    }
    else
    {
      this = 0;
      uint64_t v35 = 0;
    }
    unint64_t v45 = v35;
    uint64_t v46 = this;
    sub_1CCC91334();
  }
  v48[0] = v27;
  v48[1] = (uint64_t)this;
  if (*(unsigned char *)(v9 + 2) == 61)
  {
    unsigned int *v38 = v28 + 1;
    operator new();
  }
  if (v10 >= 2) {
    uint64_t v36 = 2;
  }
  else {
    uint64_t v36 = v10;
  }
  llvm::opt::Option::accept(v48, v39, v36, 1, v38, a4);
  if (!*a4)
  {
    *a4 = 0;
    goto LABEL_16;
  }
  uint64_t v37 = *v38;
  __int16 v44 = 263;
  LOBYTE(v43[0]) = 45;
  __int16 v42 = 261;
  uint64_t v40 = v9 + v36;
  size_t v41 = v10 - v36;
  sub_1CB8F1E58(v43, &v40, (uint64_t)&v45);
  uint64_t result = sub_1CCC8E7F0(v39, &v45);
  *(void *)(*((void *)v39 + 22) + 8 * v37) = result;
  return result;
}

void llvm::opt::OptTable::printHelp(llvm::opt::OptTable *this, llvm::raw_ostream *a2, char *a3, char *a4, int a5, int a6)
{
}

void llvm::opt::OptTable::printHelp(llvm::opt::OptTable *this, llvm::raw_ostream *a2, char *a3, char *a4, int a5, int a6, int a7)
{
  char v14 = sub_1CB8E509C(a2, "OVERVIEW: ");
  int v15 = sub_1CB8E509C(v14, a4);
  sub_1CB8E509C(v15, "\n\n");
  std::string::size_type v16 = sub_1CB8E509C(a2, "USAGE: ");
  uint64_t v17 = sub_1CB8E509C(v16, a3);
  sub_1CB8E509C(v17, "\n\n");
  __int16 v115 = 0;
  uint64_t v116 = 0;
  v114 = (uint64_t *)&v115;
  unint64_t v18 = *((void *)this + 1) - *(void *)this;
  if ((v18 & 0x3FFFFFFFC0) == 0) {
    goto LABEL_142;
  }
  uint64_t v19 = (v18 >> 6);
  size_t v20 = v111;
  uint64_t v21 = 1;
  do
  {
    uint64_t v22 = (v21 - 1);
    uint64_t v23 = *(void *)this;
    uint64_t v24 = *(void *)this + (v22 << 6);
    if (!*(unsigned char *)(v24 + 36)) {
      goto LABEL_11;
    }
    int v25 = *(_DWORD *)(v24 + 40);
    BOOL v26 = (v25 & a5) != 0 || a5 == 0;
    int v27 = v25 & a6;
    if (!v26 || v27 != 0) {
      goto LABEL_11;
    }
    uint64_t v29 = v23 + (v22 << 6);
    unsigned int v30 = *(const char **)(v29 + 16);
    if (v30) {
      BOOL v31 = 1;
    }
    else {
      BOOL v31 = a7 == 0;
    }
    if (!v31)
    {
      if (!v21) {
        uint64_t v29 = 0;
      }
      uint64_t v38 = *(unsigned __int16 *)(v29 + 46);
      if (!v38) {
        goto LABEL_11;
      }
      unint64_t v39 = v21 ? this : 0;
      uint64_t v40 = *(void *)v39;
      if (!v40) {
        goto LABEL_11;
      }
      unsigned int v30 = *(const char **)(v23
                           + ((unint64_t)(*(_DWORD *)(v40
                                                                         + ((unint64_t)(v38 - 1) << 6)
                                                                         + 32)
                                                             - 1) << 6)
                           + 16);
    }
    if (!v30 || !*v30) {
      goto LABEL_11;
    }
    unint64_t v109 = v20;
    uint64_t v105 = v19;
    int v106 = a6;
    int v107 = a7;
    LODWORD(v32) = v21;
    while (1)
    {
      uint64_t v32 = *(unsigned __int16 *)(v23 + ((unint64_t)(v32 - 1) << 6) + 44);
      if (!v32) {
        break;
      }
      uint64_t v33 = *(const char **)(v23 + ((unint64_t)(v32 - 1) << 6) + 16);
      if (v33) {
        goto LABEL_24;
      }
    }
    uint64_t v33 = "OPTIONS";
LABEL_24:
    std::string::size_type v34 = v23 + (v22 << 6);
    if (v21) {
      uint64_t v35 = this;
    }
    else {
      uint64_t v35 = 0;
    }
    if (v21) {
      std::string::size_type v36 = v34;
    }
    else {
      std::string::size_type v36 = 0;
    }
    __p.__r_.__value_.__r.__words[0] = v36;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    sub_1CD6F7938(&v113, (const char ****)&__p);
    unsigned int v37 = *(unsigned __int8 *)(v36 + 36);
    if (v37 <= 0xC)
    {
      if (((1 << v37) & 0x9C0) != 0)
      {
        std::string::push_back(&v113, 32);
LABEL_80:
        if (*(void *)(*(void *)this + (v22 << 6) + 24)) {
          long long v62 = *(const std::string::value_type **)(*(void *)this + (v22 << 6) + 24);
        }
        else {
          long long v62 = "<value>";
        }
LABEL_83:
        std::string::append(&v113, v62);
        goto LABEL_84;
      }
      if (((1 << v37) & 0x1210) != 0) {
        goto LABEL_80;
      }
      if (v37 == 10)
      {
        long long v62 = *(const std::string::value_type **)(*(void *)this + (v22 << 6) + 24);
        if (v62)
        {
          std::string::push_back(&v113, 32);
          goto LABEL_83;
        }
        for (int i = *(unsigned __int8 *)(v36 + 37); i; --i)
          std::string::append(&v113, " <value>");
      }
    }
LABEL_84:
    __int16 v108 = this;
    std::string::size_type v63 = strlen(v33);
    std::string::__init(&v112, v33, v63);
    size_t v54 = v115;
    size_t v41 = &v115;
    __int16 v55 = (void **)&v115;
    if (!v115) {
      goto LABEL_85;
    }
    __int16 v55 = (void **)&v115;
    while (1)
    {
      while (1)
      {
        size_t v41 = (uint64_t **)v54;
        uint64_t v43 = v54 + 4;
        __int16 v42 = (uint64_t *)v54[4];
        char v44 = *((unsigned char *)v43 + 23);
        int v45 = v44;
        if (v44 >= 0) {
          uint64_t v46 = v43;
        }
        else {
          uint64_t v46 = v42;
        }
        size_t v47 = v44 & 0x7F;
        if (v45 >= 0) {
          size_t v48 = v47;
        }
        else {
          size_t v48 = v43[1];
        }
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v112.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v112.__r_.__value_.__l.__size_;
        }
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v50 = &v112;
        }
        else {
          uint64_t v50 = (std::string *)v112.__r_.__value_.__r.__words[0];
        }
        if (v48 >= size) {
          size_t v51 = size;
        }
        else {
          size_t v51 = v48;
        }
        int v52 = memcmp(v50, v46, v51);
        BOOL v53 = size < v48;
        if (v52) {
          BOOL v53 = v52 < 0;
        }
        if (!v53) {
          break;
        }
        size_t v54 = *v41;
        __int16 v55 = (void **)v41;
        if (!*v41) {
          goto LABEL_85;
        }
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      __p.__r_.__value_.__l.__size_ = size;
      if ((sub_1CC0C5278((const void **)v43, (uint64_t)&__p) & 0x80000000) == 0) {
        break;
      }
      __int16 v55 = (void **)(v41 + 1);
      size_t v54 = v41[1];
      if (!v54) {
        goto LABEL_85;
      }
    }
    uint64_t v64 = *v55;
    if (!*v55)
    {
LABEL_85:
      uint64_t v64 = operator new(0x50uLL);
      v64[2] = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
      std::string::size_type v65 = v112.__r_.__value_.__r.__words[2];
      memset(&v112, 0, sizeof(v112));
      *(void *)uint64_t v64 = 0;
      *((void *)v64 + 1) = 0;
      *((void *)v64 + 6) = v65;
      *((void *)v64 + 7) = 0;
      *((void *)v64 + 8) = 0;
      *((void *)v64 + 9) = 0;
      *((void *)v64 + 2) = v41;
      *__int16 v55 = v64;
      uint64_t v66 = (uint64_t *)v64;
      if (*v114)
      {
        v114 = (uint64_t *)*v114;
        uint64_t v66 = (uint64_t *)*v55;
      }
      sub_1CB8358B8(v115, v66);
      ++v116;
    }
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      sub_1CB8BDF7C((uint64_t)&__p, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v113;
    }
    this = v108;
    v111[0] = v30;
    v111[1] = strlen(v30);
    unint64_t v59 = *((void *)v64 + 8);
    unint64_t v60 = *((void *)v64 + 9);
    if (v59 >= v60)
    {
      uint64_t v96 = *((void *)v64 + 7);
      unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - v96) >> 3);
      unint64_t v98 = v97 + 1;
      if (v97 + 1 > 0x666666666666666) {
        abort();
      }
      unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - v96) >> 3);
      if (2 * v99 > v98) {
        unint64_t v98 = 2 * v99;
      }
      if (v99 >= 0x333333333333333) {
        unint64_t v100 = 0x666666666666666;
      }
      else {
        unint64_t v100 = v98;
      }
      if (v100)
      {
        if (v100 > 0x666666666666666) {
          sub_1CB833614();
        }
        v101 = (char *)operator new(40 * v100);
      }
      else
      {
        v101 = 0;
      }
      char v57 = &v101[40 * v97];
      __int16 v102 = &v101[40 * v100];
      *(std::string *)char v57 = __p;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v57 + 24) = *v109;
      __int16 v95 = v57 + 40;
      unint64_t v103 = (void **)*((void *)v64 + 7);
      std::string v58 = (void **)*((void *)v64 + 8);
      if (v58 == v103)
      {
        *((void *)v64 + 7) = v57;
        *((void *)v64 + 8) = v95;
        *((void *)v64 + 9) = v102;
      }
      else
      {
        do
        {
          long long v56 = *(_OWORD *)(v58 - 5);
          *((void *)v57 - 3) = *(v58 - 3);
          *(_OWORD *)(v57 - 40) = v56;
          *(v58 - 4) = 0;
          *(v58 - 3) = 0;
          *(v58 - 5) = 0;
          *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
          v57 -= 40;
          v58 -= 5;
        }
        while (v58 != v103);
        std::string v58 = (void **)*((void *)v64 + 7);
        __int16 v104 = (void **)*((void *)v64 + 8);
        *((void *)v64 + 7) = v57;
        *((void *)v64 + 8) = v95;
        *((void *)v64 + 9) = v102;
        while (v104 != v58)
        {
          if (*((char *)v104 - 17) < 0) {
            operator delete(*(v104 - 5));
          }
          v104 -= 5;
        }
      }
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      long long v94 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v59 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v59 = v94;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v59 + 24) = *v109;
      __int16 v95 = (char *)(v59 + 40);
    }
    *((void *)v64 + 8) = v95;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a6 = v106;
    a7 = v107;
    uint64_t v19 = v105;
    size_t v20 = v109;
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
LABEL_11:
    BOOL v26 = v21++ == v19;
  }
  while (!v26);
  uint64_t v67 = v114;
  if (v114 != (uint64_t *)&v115)
  {
    do
    {
      if (!sub_1CBAD746C((unsigned __int8 *)v67 + 32, (unsigned __int8 *)v114 + 32)) {
        sub_1CB8E509C(a2, "\n");
      }
      char v68 = *((unsigned char *)v67 + 55);
      BOOL v69 = v68 < 0;
      if (v68 >= 0) {
        int v70 = v67 + 4;
      }
      else {
        int v70 = (const void *)v67[4];
      }
      size_t v71 = v68 & 0x7F;
      if (v69) {
        size_t v72 = v67[5];
      }
      else {
        size_t v72 = v71;
      }
      __int16 v73 = (void *)*((void *)a2 + 4);
      if (v72 <= *((void *)a2 + 3) - (void)v73)
      {
        if (v72)
        {
          memcpy(v73, v70, v72);
          *((void *)a2 + 4) += v72;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v70, v72);
      }
      sub_1CB8E509C(a2, ":\n");
      uint64_t v74 = v67[7];
      uint64_t v75 = v67[8];
      if (v74 != v75)
      {
        unsigned int v76 = 0;
        uint64_t v77 = v67[7];
        do
        {
          if (*(char *)(v77 + 23) < 0) {
            uint64_t v78 = *(void *)(v77 + 8);
          }
          else {
            LODWORD(v78) = *(unsigned __int8 *)(v77 + 23);
          }
          if (v76 <= v78) {
            unsigned int v79 = v78;
          }
          else {
            unsigned int v79 = v76;
          }
          if (v78 < 0x18) {
            unsigned int v76 = v79;
          }
          v77 += 40;
        }
        while (v77 != v75);
        do
        {
          if (*(char *)(v74 + 23) < 0) {
            uint64_t v80 = *(void *)(v74 + 8);
          }
          else {
            LODWORD(v80) = *(unsigned __int8 *)(v74 + 23);
          }
          unsigned int v81 = v76 - v80;
          uint64_t v82 = llvm::raw_ostream::indent(a2, 2u);
          char v83 = *(unsigned char *)(v74 + 23);
          BOOL v84 = v83 < 0;
          if (v83 >= 0) {
            unint64_t v85 = (const char *)v74;
          }
          else {
            unint64_t v85 = *(const char **)v74;
          }
          size_t v86 = v83 & 0x7F;
          if (v84) {
            size_t v87 = *(void *)(v74 + 8);
          }
          else {
            size_t v87 = v86;
          }
          llvm::raw_ostream::write(v82, v85, v87);
          if ((v81 & 0x80000000) != 0)
          {
            sub_1CB8E509C(a2, "\n");
            unsigned int v81 = v76 + 2;
          }
          __int16 v88 = llvm::raw_ostream::indent(a2, v81 + 1);
          v89 = *(const void **)(v74 + 24);
          unint64_t v90 = *(void *)(v74 + 32);
          uint64_t v91 = (unsigned char *)*((void *)v88 + 4);
          if (v90 <= *((void *)v88 + 3) - (void)v91)
          {
            if (v90)
            {
              memcpy(v91, v89, *(void *)(v74 + 32));
              uint64_t v91 = (unsigned char *)(*((void *)v88 + 4) + v90);
              *((void *)v88 + 4) = v91;
            }
          }
          else
          {
            llvm::raw_ostream::write(v88, (const char *)v89, *(void *)(v74 + 32));
            uint64_t v91 = (unsigned char *)*((void *)v88 + 4);
          }
          if ((unint64_t)v91 >= *((void *)v88 + 3))
          {
            llvm::raw_ostream::write(v88, 10);
          }
          else
          {
            *((void *)v88 + 4) = v91 + 1;
            *uint64_t v91 = 10;
          }
          v74 += 40;
        }
        while (v74 != v75);
      }
      unint64_t v92 = (uint64_t *)v67[1];
      if (v92)
      {
        do
        {
          unint64_t v93 = (uint64_t **)v92;
          unint64_t v92 = (uint64_t *)*v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          unint64_t v93 = (uint64_t **)v67[2];
          BOOL v26 = *v93 == v67;
          uint64_t v67 = (uint64_t *)v93;
        }
        while (!v26);
      }
      uint64_t v67 = (uint64_t *)v93;
    }
    while (v93 != &v115);
  }
LABEL_142:
  if (*((void *)a2 + 4) != *((void *)a2 + 2)) {
    llvm::raw_ostream::flush_nonempty(a2);
  }
  sub_1CCC91D94((char *)v115);
}

std::string *sub_1CD6F7938(std::string *a1, const char ****a2)
{
  uint64_t v4 = **a2;
  unint64_t v5 = *v4;
  if (*v4) {
    std::string::size_type v6 = strlen(*v4);
  }
  else {
    std::string::size_type v6 = 0;
  }
  std::string::__init(a1, v5, v6);
  uint64_t v7 = (const char *)(*a2)[1];
  if (v7) {
    std::string::size_type v8 = strlen(v7);
  }
  else {
    std::string::size_type v8 = 0;
  }

  return std::string::append(a1, v7, v8);
}

uint64_t llvm::PassBuilder::PassBuilder(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  long long v8 = *a3;
  int v9 = *((_DWORD *)a3 + 4);
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v10 = a1 + 32;
  *(_DWORD *)(v10 - 8) = v9;
  *(_OWORD *)(v10 - 24) = v8;
  *(unsigned char *)(v10 + 96) = 0;
  if (*(unsigned char *)(a4 + 96))
  {
    sub_1CD69EB48(v10, (long long *)a4);
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(void *)(a1 + 136) = a5;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 0x200000000;
  *(void *)(a1 + 224) = a1 + 240;
  *(void *)(a1 + 232) = 0x200000000;
  *(void *)(a1 + 304) = a1 + 320;
  *(void *)(a1 + 312) = 0x200000000;
  *(void *)(a1 + 384) = a1 + 400;
  *(void *)(a1 + 392) = 0x200000000;
  *(void *)(a1 + 464) = a1 + 480;
  *(void *)(a1 + 472) = 0x200000000;
  *(void *)(a1 + 544) = a1 + 560;
  *(void *)(a1 + 552) = 0x200000000;
  *(void *)(a1 + 624) = a1 + 640;
  *(void *)(a1 + 632) = 0x200000000;
  *(void *)(a1 + 704) = a1 + 720;
  *(void *)(a1 + 712) = 0x200000000;
  *(void *)(a1 + 784) = a1 + 800;
  *(void *)(a1 + 792) = 0x200000000;
  *(void *)(a1 + 864) = a1 + 880;
  *(void *)(a1 + 872) = 0x200000000;
  *(void *)(a1 + 944) = a1 + 960;
  *(void *)(a1 + 952) = 0x200000000;
  *(void *)(a1 + 1024) = a1 + 1040;
  *(void *)(a1 + 1032) = 0x200000000;
  *(void *)(a1 + 1104) = a1 + 1120;
  *(void *)(a1 + 1112) = 0x200000000;
  *(void *)(a1 + 1184) = a1 + 1200;
  *(void *)(a1 + 1192) = 0x200000000;
  *(void *)(a1 + 1264) = a1 + 1280;
  *(void *)(a1 + 1272) = 0x200000000;
  *(void *)(a1 + 1344) = a1 + 1360;
  *(void *)(a1 + 1352) = 0x200000000;
  *(void *)(a1 + 1424) = a1 + 1440;
  *(void *)(a1 + 1432) = 0x200000000;
  *(void *)(a1 + 1504) = a1 + 1520;
  *(void *)(a1 + 1512) = 0x200000000;
  *(void *)(a1 + 1584) = a1 + 1600;
  *(void *)(a1 + 1592) = 0x200000000;
  *(void *)(a1 + 1664) = a1 + 1680;
  *(void *)(a1 + 1672) = 0x200000000;
  *(void *)(a1 + 1744) = a1 + 1760;
  *(void *)(a1 + 1752) = 0x200000000;
  *(void *)(a1 + 1824) = a1 + 1840;
  *(void *)(a1 + 1832) = 0x200000000;
  *(void *)(a1 + 1904) = a1 + 1920;
  *(void *)(a1 + 1912) = 0x200000000;
  *(unsigned char *)(a1 + 1984) = 0;
  if (a2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a1);
  }
  if (a5)
  {
    if (!byte_1EBD0A418)
    {
      llvm::printBeforePasses(v605);
      if (v605[0] == v605[1])
      {
        llvm::printAfterPasses(v604);
        int v11 = v604[0];
        int v12 = v604[1];
        v606 = v604;
        sub_1CB8338B8((void ***)&v606);
        v604[0] = (void **)v605;
        sub_1CB8338B8(v604);
        if (v11 == v12) {
          return a1;
        }
      }
      else
      {
        v604[0] = (void **)v605;
        sub_1CB8338B8(v604);
      }
    }
    char v14 = (unsigned __int8 *)sub_1CD6FAD68();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v14, v15, "callgraph", 9uLL);
    std::string::size_type v16 = (unsigned __int8 *)sub_1CD6FAE24();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v16, v17, "function-groups", 0xFuLL);
    unint64_t v18 = (unsigned __int8 *)sub_1CD6FAEE0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v18, v19, "lcg", 3uLL);
    size_t v20 = (unsigned __int8 *)sub_1CD6FAF9C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v20, v21, "module-summary", 0xEuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpModuleAnalysis", 0x12uLL, "no-op-module", 0xCuLL);
    uint64_t v22 = (unsigned __int8 *)sub_1CD6FB058();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v22, v23, "profile-summary", 0xFuLL);
    uint64_t v24 = (unsigned __int8 *)sub_1CD6FB114();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v24, v25, "stack-safety", 0xCuLL);
    BOOL v26 = (unsigned __int8 *)sub_1CD6FB1D0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v26, v27, "verify", 6uLL);
    unsigned int v28 = (unsigned __int8 *)sub_1CD611D70();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v28, v29, "pass-instrumentation", 0x14uLL);
    unsigned int v30 = (unsigned __int8 *)sub_1CD6FB28C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v30, v31, "asan-globals-md", 0xFuLL);
    uint64_t v32 = (unsigned __int8 *)sub_1CD6FB348();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v32, v33, "inline-advisor", 0xEuLL);
    std::string::size_type v34 = (unsigned __int8 *)sub_1CD6FB404();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v34, v35, "ir-similarity", 0xDuLL);
    std::string::size_type v36 = (unsigned __int8 *)sub_1CD6FB4C0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v36, v37, "globals-aa", 0xAuLL);
    uint64_t v38 = (unsigned __int8 *)sub_1CCC91E38();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v38, v39, "always-inline", 0xDuLL);
    uint64_t v40 = (unsigned __int8 *)sub_1CD6FB57C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v40, v41, "attributor", 0xAuLL);
    __int16 v42 = (unsigned __int8 *)sub_1CD6FB638();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v42, v43, "annotation2metadata", 0x13uLL);
    char v44 = (unsigned __int8 *)sub_1CD6FB6F4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v44, v45, "openmp-opt", 0xAuLL);
    uint64_t v46 = (unsigned __int8 *)sub_1CD6FB7B0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v46, v47, "called-value-propagation", 0x18uLL);
    size_t v48 = (unsigned __int8 *)sub_1CD6FB86C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v48, v49, "canonicalize-aliases", 0x14uLL);
    uint64_t v50 = (unsigned __int8 *)sub_1CD6FB928();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v50, v51, "cg-profile", 0xAuLL);
    int v52 = (unsigned __int8 *)sub_1CD6FB9E4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v52, v53, "check-debugify", 0xEuLL);
    size_t v54 = (unsigned __int8 *)sub_1CD6FBAA0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v54, v55, "constmerge", 0xAuLL);
    long long v56 = (unsigned __int8 *)sub_1CD6FBB5C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v56, v57, "coro-early", 0xAuLL);
    std::string v58 = (unsigned __int8 *)sub_1CD6FBC18();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v58, v59, "cross-dso-cfi", 0xDuLL);
    unint64_t v60 = (unsigned __int8 *)sub_1CD6FBCD4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v60, v61, "deadargelim", 0xBuLL);
    long long v62 = (unsigned __int8 *)sub_1CD6FBD90();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v62, v63, "debugify", 8uLL);
    uint64_t v64 = (unsigned __int8 *)sub_1CD6FBE4C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v64, v65, "dot-callgraph", 0xDuLL);
    uint64_t v66 = (unsigned __int8 *)sub_1CD6FBF08();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v66, v67, "elim-avail-extern", 0x11uLL);
    char v68 = (unsigned __int8 *)sub_1CD6FBFC4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v68, v69, "extract-blocks", 0xEuLL);
    int v70 = (unsigned __int8 *)sub_1CD6FC080();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v70, v71, "forceattrs", 0xAuLL);
    size_t v72 = (unsigned __int8 *)sub_1CD6FC13C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v72, v73, "function-import", 0xFuLL);
    uint64_t v74 = (unsigned __int8 *)sub_1CD6FC1F8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v74, v75, "function-specialization", 0x17uLL);
    unsigned int v76 = (unsigned __int8 *)sub_1CCC91EF4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v76, v77, "globaldce", 9uLL);
    uint64_t v78 = (unsigned __int8 *)sub_1CCC91FB0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v78, v79, "globalopt", 9uLL);
    uint64_t v80 = (unsigned __int8 *)sub_1CD6FC2B4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v80, v81, "globalsplit", 0xBuLL);
    uint64_t v82 = (unsigned __int8 *)sub_1CD6FC370();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v82, v83, "hotcoldsplit", 0xCuLL);
    BOOL v84 = (unsigned __int8 *)sub_1CD6FC42C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v84, v85, "inferattrs", 0xAuLL);
    size_t v86 = (unsigned __int8 *)sub_1CD6FC4E8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v86, v87, "inliner-wrapper", 0xFuLL);
    __int16 v88 = (unsigned __int8 *)sub_1CD6FC5A4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v88, v89, "print<inline-advisor>", 0x15uLL);
    unint64_t v90 = (unsigned __int8 *)sub_1CD6FC4E8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v90, v91, "inliner-wrapper-no-mandatory-first", 0x22uLL);
    unint64_t v92 = (unsigned __int8 *)sub_1CD6FC660();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v92, v93, "insert-gcov-profiling", 0x15uLL);
    long long v94 = (unsigned __int8 *)sub_1CD6FC71C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v94, v95, "instrorderfile", 0xEuLL);
    uint64_t v96 = (unsigned __int8 *)sub_1CD6FC7D8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v96, v97, "instrprof", 9uLL);
    unint64_t v98 = (unsigned __int8 *)sub_1CCC9206C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v98, v99, "internalize", 0xBuLL);
    unint64_t v100 = (unsigned __int8 *)sub_1CD6FC894();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v100, v101, "invalidate<all>", 0xFuLL);
    __int16 v102 = (unsigned __int8 *)sub_1CD6FC950();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v102, v103, "ipsccp", 6uLL);
    __int16 v104 = (unsigned __int8 *)sub_1CD6FCA0C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v104, v105, "iroutliner", 0xAuLL);
    int v106 = (unsigned __int8 *)sub_1CD6FCAC8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v106, v107, "print-ir-similarity", 0x13uLL);
    __int16 v108 = (unsigned __int8 *)sub_1CD6FCB84();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v108, v109, "lower-global-dtors", 0x12uLL);
    __int16 v110 = (unsigned __int8 *)sub_1CD6FCC40();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v110, v111, "lowertypetests", 0xEuLL);
    std::string v112 = (unsigned __int8 *)sub_1CD6FCCFC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v112, v113, "metarenamer", 0xBuLL);
    v114 = (unsigned __int8 *)sub_1CD6FCDB8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v114, v115, "mergefunc", 9uLL);
    uint64_t v116 = (unsigned __int8 *)sub_1CD6FCE74();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v116, v117, "name-anon-globals", 0x11uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpModulePass", 0xEuLL, "no-op-module", 0xCuLL);
    __int16 v118 = (unsigned __int8 *)sub_1CD6FCF30();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v118, v119, "objc-arc-apelim", 0xFuLL);
    __int16 v120 = (unsigned __int8 *)sub_1CD6FCFEC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v120, v121, "partial-inliner", 0xFuLL);
    __int16 v122 = (unsigned __int8 *)sub_1CD6FD0A8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v122, v123, "pgo-icall-prom", 0xEuLL);
    __int16 v124 = (unsigned __int8 *)sub_1CD6FD164();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v124, v125, "pgo-instr-gen", 0xDuLL);
    __int16 v126 = (unsigned __int8 *)sub_1CD6FD220();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v126, v127, "pgo-instr-use", 0xDuLL);
    uint64_t v128 = (unsigned __int8 *)sub_1CD6FD2DC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v128, v129, "print-function-groups", 0x15uLL);
    v130 = (unsigned __int8 *)sub_1CD6FD398();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v130, v131, "print-profile-summary", 0x15uLL);
    v132 = (unsigned __int8 *)sub_1CD6FD454();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v132, v133, "print-callgraph", 0xFuLL);
    unsigned int v134 = (unsigned __int8 *)sub_1CD6FD510();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v134, v135, "print", 5uLL);
    v136 = (unsigned __int8 *)sub_1CD6FD5CC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v136, v137, "print-lcg", 9uLL);
    uint64_t v138 = (unsigned __int8 *)sub_1CD6FD688();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v138, v139, "print-lcg-dot", 0xDuLL);
    v140 = (unsigned __int8 *)sub_1CD6FD744();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v140, v141, "print-must-be-executed-contexts", 0x1FuLL);
    __int16 v142 = (unsigned __int8 *)sub_1CD6FD800();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v142, v143, "print-stack-safety", 0x12uLL);
    __int16 v144 = (unsigned __int8 *)sub_1CD6FD8BC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v144, v145, "print<module-debuginfo>", 0x17uLL);
    __int16 v146 = (unsigned __int8 *)sub_1CD6FD978();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v146, v147, "recompute-globalsaa", 0x13uLL);
    __int16 v148 = (unsigned __int8 *)sub_1CD6FDA34();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v148, v149, "rel-lookup-table-converter", 0x1AuLL);
    __int16 v150 = (unsigned __int8 *)sub_1CD6FDAF0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v150, v151, "rewrite-statepoints-for-gc", 0x1AuLL);
    __int16 v152 = (unsigned __int8 *)sub_1CD6FDBAC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v152, v153, "rewrite-symbols", 0xFuLL);
    __int16 v154 = (unsigned __int8 *)sub_1CD6FDC68();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v154, v155, "rpo-function-attrs", 0x12uLL);
    __int16 v156 = (unsigned __int8 *)sub_1CD6FDD24();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v156, v157, "sample-profile", 0xEuLL);
    v158 = (unsigned __int8 *)sub_1CD6FC4E8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v158, v159, "scc-oz-module-inliner", 0x15uLL);
    v160 = (unsigned __int8 *)sub_1CD6FDDE0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v160, v161, "strip", 5uLL);
    v162 = (unsigned __int8 *)sub_1CD6FDE9C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v162, v163, "strip-dead-debug-info", 0x15uLL);
    v164 = (unsigned __int8 *)sub_1CD6FDF58();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v164, v165, "pseudo-probe", 0xCuLL);
    v166 = (unsigned __int8 *)sub_1CD6FE014();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v166, v167, "soft-ptrauth", 0xCuLL);
    v168 = (unsigned __int8 *)sub_1CD6FE0D0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v168, v169, "strip-dead-prototypes", 0x15uLL);
    v170 = (unsigned __int8 *)sub_1CD6FE18C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v170, v171, "strip-debug-declare", 0x13uLL);
    unsigned int v172 = (unsigned __int8 *)sub_1CD6FE248();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v172, v173, "strip-nondebug", 0xEuLL);
    v174 = (unsigned __int8 *)sub_1CD6FE304();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v174, v175, "strip-nonlinetable-debuginfo", 0x1CuLL);
    v176 = (unsigned __int8 *)sub_1CD6FE3C0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v176, v177, "synthetic-counts-propagation", 0x1CuLL);
    uint64_t v178 = (unsigned __int8 *)sub_1CD69F000();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v178, v179, "verify", 6uLL);
    v180 = (unsigned __int8 *)sub_1CD6FE47C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v180, v181, "view-callgraph", 0xEuLL);
    v182 = (unsigned __int8 *)sub_1CD6FE538();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v182, v183, "wholeprogramdevirt", 0x12uLL);
    char v184 = (unsigned __int8 *)sub_1CD6FE5F4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v184, v185, "dfsan", 5uLL);
    v186 = (unsigned __int8 *)sub_1CD6FE6B0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v186, v187, "msan-module", 0xBuLL);
    v188 = (unsigned __int8 *)sub_1CD6FE76C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v188, v189, "module-inline", 0xDuLL);
    v190 = (unsigned __int8 *)sub_1CD6FE828();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v190, v191, "tsan-module", 0xBuLL);
    v192 = (unsigned __int8 *)sub_1CD6FE8E4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v192, v193, "sancov-module", 0xDuLL);
    v194 = (unsigned __int8 *)sub_1CD6FE9A0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v194, v195, "memprof-module", 0xEuLL);
    v196 = (unsigned __int8 *)sub_1CD6FEA5C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v196, v197, "poison-checking", 0xFuLL);
    v198 = (unsigned __int8 *)sub_1CD6FEB18();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v198, v199, "pseudo-probe-update", 0x13uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LoopExtractorPass", 0x11uLL, "loop-extract", 0xCuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "HWAddressSanitizerPass", 0x16uLL, "hwasan", 6uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "ModuleAddressSanitizerPass", 0x1AuLL, "asan-module", 0xBuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpCGSCCAnalysis", 0x11uLL, "no-op-cgscc", 0xBuLL);
    v200 = (unsigned __int8 *)sub_1CD6FEBD4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v200, v201, "fam-proxy", 9uLL);
    v202 = (unsigned __int8 *)sub_1CD611D70();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v202, v203, "pass-instrumentation", 0x14uLL);
    v204 = (unsigned __int8 *)sub_1CD6FEC90();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v204, v205, "argpromotion", 0xCuLL);
    v206 = (unsigned __int8 *)sub_1CD6FC894();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v206, v207, "invalidate<all>", 0xFuLL);
    v208 = (unsigned __int8 *)sub_1CCC92128();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v208, v209, "function-attrs", 0xEuLL);
    v210 = (unsigned __int8 *)sub_1CD6FED4C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v210, v211, "attributor-cgscc", 0x10uLL);
    v212 = (unsigned __int8 *)sub_1CD6FEE08();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v212, v213, "openmp-opt-cgscc", 0x10uLL);
    v214 = (unsigned __int8 *)sub_1CD6FEEC4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v214, v215, "coro-split", 0xAuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpCGSCCPass", 0xDuLL, "no-op-cgscc", 0xBuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "InlinerPass", 0xBuLL, "inline", 6uLL);
    v216 = (unsigned __int8 *)sub_1CD69EE68();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v216, v217, "aa", 2uLL);
    v218 = (unsigned __int8 *)sub_1CD611984();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v218, v219, "assumptions", 0xBuLL);
    v220 = (unsigned __int8 *)sub_1CD6FEF80();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v220, v221, "block-freq", 0xAuLL);
    v222 = (unsigned __int8 *)sub_1CD6FF03C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v222, v223, "branch-prob", 0xBuLL);
    v224 = (unsigned __int8 *)sub_1CD6FF0F8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v224, v225, "cycles", 6uLL);
    v226 = (unsigned __int8 *)sub_1CD611A5C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v226, v227, "domtree", 7uLL);
    v228 = (unsigned __int8 *)sub_1CD6FF1B4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v228, v229, "postdomtree", 0xBuLL);
    v230 = (unsigned __int8 *)sub_1CD6FF270();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v230, v231, "demanded-bits", 0xDuLL);
    v232 = (unsigned __int8 *)sub_1CD6FF32C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v232, v233, "domfrontier", 0xBuLL);
    v234 = (unsigned __int8 *)sub_1CD6FF3E8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v234, v235, "func-properties", 0xFuLL);
    v236 = (unsigned __int8 *)sub_1CD611B78();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v236, v237, "loops", 5uLL);
    v238 = (unsigned __int8 *)sub_1CD6FF4A4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v238, v239, "lazy-value-info", 0xFuLL);
    v240 = (unsigned __int8 *)sub_1CD6FF560();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v240, v241, "da", 2uLL);
    v242 = (unsigned __int8 *)sub_1CD6FF61C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v242, v243, "inliner-size-estimator", 0x16uLL);
    v244 = (unsigned __int8 *)sub_1CD6FF6D8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v244, v245, "memdep", 6uLL);
    v246 = (unsigned __int8 *)sub_1CD6FF794();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v246, v247, "memoryssa", 9uLL);
    v248 = (unsigned __int8 *)sub_1CD6FF850();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v248, v249, "phi-values", 0xAuLL);
    v250 = (unsigned __int8 *)sub_1CD6FF90C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v250, v251, "regions", 7uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpFunctionAnalysis", 0x14uLL, "no-op-function", 0xEuLL);
    v252 = (unsigned __int8 *)sub_1CD6FF9C8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v252, v253, "opt-remark-emit", 0xFuLL);
    v254 = (unsigned __int8 *)sub_1CD611C94();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v254, v255, "scalar-evolution", 0x10uLL);
    v256 = (unsigned __int8 *)sub_1CD6FFA84();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v256, v257, "should-not-run-function-passes", 0x1EuLL);
    v258 = (unsigned __int8 *)sub_1CD6FFB40();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v258, v259, "should-run-extra-vector-passes", 0x1EuLL);
    v260 = (unsigned __int8 *)sub_1CD6FFBFC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v260, v261, "stack-safety-local", 0x12uLL);
    v262 = (unsigned __int8 *)sub_1CD611854();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v262, v263, "targetlibinfo", 0xDuLL);
    v264 = (unsigned __int8 *)sub_1CD611E9C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v264, v265, "targetir", 8uLL);
    v266 = (unsigned __int8 *)sub_1CD6FB1D0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v266, v267, "verify", 6uLL);
    v268 = (unsigned __int8 *)sub_1CD611D70();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v268, v269, "pass-instrumentation", 0x14uLL);
    v270 = (unsigned __int8 *)sub_1CD6FFCB8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v270, v271, "divergence", 0xAuLL);
    v272 = (unsigned __int8 *)sub_1CD6FFD74();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v272, v273, "gpu-function-analysis", 0x15uLL);
    v274 = (unsigned __int8 *)sub_1CD6FFE30();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v274, v275, "basic-aa", 8uLL);
    v276 = (unsigned __int8 *)sub_1CD6FFEEC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v276, v277, "cfl-anders-aa", 0xDuLL);
    v278 = (unsigned __int8 *)sub_1CD6FFFA8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v278, v279, "cfl-steens-aa", 0xDuLL);
    v280 = (unsigned __int8 *)sub_1CD700064();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v280, v281, "objc-arc-aa", 0xBuLL);
    v282 = (unsigned __int8 *)sub_1CD700120();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v282, v283, "scev-aa", 7uLL);
    v284 = (unsigned __int8 *)sub_1CD7001DC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v284, v285, "scoped-noalias-aa", 0x11uLL);
    v286 = (unsigned __int8 *)sub_1CD700298();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v286, v287, "tbaa", 4uLL);
    v288 = (unsigned __int8 *)sub_1CD700354();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v288, v289, "aa-eval", 7uLL);
    v290 = (unsigned __int8 *)sub_1CCC921E4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v290, v291, "adce", 4uLL);
    v292 = (unsigned __int8 *)sub_1CD700410();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v292, v293, "add-discriminators", 0x12uLL);
    v294 = (unsigned __int8 *)sub_1CD7004CC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v294, v295, "aggressive-instcombine", 0x16uLL);
    v296 = (unsigned __int8 *)sub_1CD700588();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v296, v297, "assume-builder", 0xEuLL);
    v298 = (unsigned __int8 *)sub_1CD700644();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v298, v299, "assume-simplify", 0xFuLL);
    v300 = (unsigned __int8 *)sub_1CCC922A0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v300, v301, "alignment-from-assumptions", 0x1AuLL);
    v302 = (unsigned __int8 *)sub_1CCC9235C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v302, v303, "annotation-remarks", 0x12uLL);
    v304 = (unsigned __int8 *)sub_1CCC92418();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v304, v305, "bdce", 4uLL);
    v306 = (unsigned __int8 *)sub_1CD700700();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v306, v307, "bounds-checking", 0xFuLL);
    v308 = (unsigned __int8 *)sub_1CD7007BC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v308, v309, "break-crit-edges", 0x10uLL);
    v310 = (unsigned __int8 *)sub_1CD700878();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v310, v311, "callsite-splitting", 0x12uLL);
    v312 = (unsigned __int8 *)sub_1CD700934();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v312, v313, "consthoist", 0xAuLL);
    v314 = (unsigned __int8 *)sub_1CD7009F0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v314, v315, "constraint-elimination", 0x16uLL);
    v316 = (unsigned __int8 *)sub_1CD700AAC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v316, v317, "chr", 3uLL);
    v318 = (unsigned __int8 *)sub_1CD700B68();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v318, v319, "coro-elide", 0xAuLL);
    v320 = (unsigned __int8 *)sub_1CD700C24();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v320, v321, "coro-cleanup", 0xCuLL);
    v322 = (unsigned __int8 *)sub_1CCC924D4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v322, v323, "correlated-propagation", 0x16uLL);
    v324 = (unsigned __int8 *)sub_1CD700CE0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v324, v325, "dce", 3uLL);
    v326 = (unsigned __int8 *)sub_1CD700D9C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v326, v327, "dfa-jump-threading", 0x12uLL);
    v328 = (unsigned __int8 *)sub_1CD700E58();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v328, v329, "div-rem-pairs", 0xDuLL);
    v330 = (unsigned __int8 *)sub_1CCC92590();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v330, v331, "dse", 3uLL);
    v332 = (unsigned __int8 *)sub_1CD700F14();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v332, v333, "dot-cfg", 7uLL);
    v334 = (unsigned __int8 *)sub_1CD700FD0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v334, v335, "dot-cfg-only", 0xCuLL);
    v336 = (unsigned __int8 *)sub_1CD70108C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v336, v337, "dot-dom", 7uLL);
    v338 = (unsigned __int8 *)sub_1CD701148();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v338, v339, "dot-dom-only", 0xCuLL);
    v340 = (unsigned __int8 *)sub_1CD701204();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v340, v341, "fix-irreducible", 0xFuLL);
    v342 = (unsigned __int8 *)sub_1CD7012C0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v342, v343, "flattencfg", 0xAuLL);
    v344 = (unsigned __int8 *)sub_1CD70137C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v344, v345, "make-guards-explicit", 0x14uLL);
    v346 = (unsigned __int8 *)sub_1CD701438();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v346, v347, "gvn-hoist", 9uLL);
    v348 = (unsigned __int8 *)sub_1CD7014F4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v348, v349, "gvn-sink", 8uLL);
    v350 = (unsigned __int8 *)sub_1CD7015B0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v350, v351, "helloworld", 0xAuLL);
    v352 = (unsigned __int8 *)sub_1CD70166C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v352, v353, "infer-address-spaces", 0x14uLL);
    v354 = (unsigned __int8 *)sub_1CCC9264C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v354, v355, "instcombine", 0xBuLL);
    v356 = (unsigned __int8 *)sub_1CD701728();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v356, v357, "instcount", 9uLL);
    v358 = (unsigned __int8 *)sub_1CCC92708();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v358, v359, "instsimplify", 0xCuLL);
    v360 = (unsigned __int8 *)sub_1CD6FC894();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v360, v361, "invalidate<all>", 0xFuLL);
    v362 = (unsigned __int8 *)sub_1CD7017E4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v362, v363, "irce", 4uLL);
    v364 = (unsigned __int8 *)sub_1CD7018A0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v364, v365, "float2int", 9uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpFunctionPass", 0x10uLL, "no-op-function", 0xEuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LibCallsShrinkWrapPass", 0x16uLL, "libcalls-shrinkwrap", 0x13uLL);
    v366 = (unsigned __int8 *)sub_1CD70195C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v366, v367, "lint", 4uLL);
    v368 = (unsigned __int8 *)sub_1CD701A18();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v368, v369, "inject-tli-mappings", 0x13uLL);
    v370 = (unsigned __int8 *)sub_1CD701AD4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v370, v371, "instnamer", 9uLL);
    v372 = (unsigned __int8 *)sub_1CD701B90();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v372, v373, "loweratomic", 0xBuLL);
    v374 = (unsigned __int8 *)sub_1CCC927C4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v374, v375, "lower-expect", 0xCuLL);
    v376 = (unsigned __int8 *)sub_1CD701C4C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v376, v377, "lower-guard-intrinsic", 0x15uLL);
    v378 = (unsigned __int8 *)sub_1CCC92880();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v378, v379, "lower-constant-intrinsics", 0x19uLL);
    v380 = (unsigned __int8 *)sub_1CD701D08();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v380, v381, "lower-widenable-condition", 0x19uLL);
    v382 = (unsigned __int8 *)sub_1CD701DC4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v382, v383, "guard-widening", 0xEuLL);
    v384 = (unsigned __int8 *)sub_1CD701E80();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v384, v385, "load-store-vectorizer", 0x15uLL);
    v386 = (unsigned __int8 *)sub_1CCC9293C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v386, v387, "loop-simplify", 0xDuLL);
    v388 = (unsigned __int8 *)sub_1CCC929F8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v388, v389, "loop-sink", 9uLL);
    v390 = (unsigned __int8 *)sub_1CD701F3C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v390, v391, "lowerinvoke", 0xBuLL);
    v392 = (unsigned __int8 *)sub_1CD701FF8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v392, v393, "lowerswitch", 0xBuLL);
    v394 = (unsigned __int8 *)sub_1CCC92AB4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v394, v395, "mem2reg", 7uLL);
    v396 = (unsigned __int8 *)sub_1CCC92B70();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v396, v397, "memcpyopt", 9uLL);
    v398 = (unsigned __int8 *)sub_1CD7020B4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v398, v399, "mergeicmps", 0xAuLL);
    v400 = (unsigned __int8 *)sub_1CD702170();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v400, v401, "mergereturn", 0xBuLL);
    v402 = (unsigned __int8 *)sub_1CD70222C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v402, v403, "nary-reassociate", 0x10uLL);
    v404 = (unsigned __int8 *)sub_1CD7022E8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v404, v405, "newgvn", 6uLL);
    v406 = (unsigned __int8 *)sub_1CD7023A4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v406, v407, "jump-threading", 0xEuLL);
    v408 = (unsigned __int8 *)sub_1CD702460();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v408, v409, "partially-inline-libcalls", 0x19uLL);
    v410 = (unsigned __int8 *)sub_1CCC92C2C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v410, v411, "lcssa", 5uLL);
    v412 = (unsigned __int8 *)sub_1CD70251C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v412, v413, "loop-data-prefetch", 0x12uLL);
    v414 = (unsigned __int8 *)sub_1CCC92CE8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v414, v415, "loop-load-elim", 0xEuLL);
    v416 = (unsigned __int8 *)sub_1CD7025D8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v416, v417, "loop-fusion", 0xBuLL);
    v418 = (unsigned __int8 *)sub_1CD702694();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v418, v419, "loop-distribute", 0xFuLL);
    v420 = (unsigned __int8 *)sub_1CD702750();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v420, v421, "loop-versioning", 0xFuLL);
    v422 = (unsigned __int8 *)sub_1CD70280C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v422, v423, "objc-arc", 8uLL);
    v424 = (unsigned __int8 *)sub_1CD7028C8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v424, v425, "objc-arc-contract", 0x11uLL);
    v426 = (unsigned __int8 *)sub_1CD702984();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v426, v427, "objc-arc-expand", 0xFuLL);
    v428 = (unsigned __int8 *)sub_1CD702A40();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v428, v429, "pgo-memop-opt", 0xDuLL);
    v430 = (unsigned __int8 *)sub_1CD702AFC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v430, v431, "print", 5uLL);
    v432 = (unsigned __int8 *)sub_1CD702BB8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v432, v433, "print<assumptions>", 0x12uLL);
    v434 = (unsigned __int8 *)sub_1CD702C74();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v434, v435, "print<block-freq>", 0x11uLL);
    v436 = (unsigned __int8 *)sub_1CD702D30();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v436, v437, "print<branch-prob>", 0x12uLL);
    v438 = (unsigned __int8 *)sub_1CD702DEC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v438, v439, "print<cost-model>", 0x11uLL);
    v440 = (unsigned __int8 *)sub_1CD702EA8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v440, v441, "print<cycles>", 0xDuLL);
    v442 = (unsigned __int8 *)sub_1CD702F64();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v442, v443, "print<da>", 9uLL);
    v444 = (unsigned __int8 *)sub_1CD703020();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v444, v445, "print<divergence>", 0x11uLL);
    v446 = (unsigned __int8 *)sub_1CD7030DC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v446, v447, "print<domtree>", 0xEuLL);
    v448 = (unsigned __int8 *)sub_1CD703198();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v448, v449, "print<postdomtree>", 0x12uLL);
    v450 = (unsigned __int8 *)sub_1CD703254();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v450, v451, "print<delinearization>", 0x16uLL);
    v452 = (unsigned __int8 *)sub_1CD703310();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v452, v453, "print<demanded-bits>", 0x14uLL);
    v454 = (unsigned __int8 *)sub_1CD7033CC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v454, v455, "print<domfrontier>", 0x12uLL);
    v456 = (unsigned __int8 *)sub_1CD703488();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v456, v457, "print<func-properties>", 0x16uLL);
    v458 = (unsigned __int8 *)sub_1CD703544();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v458, v459, "print<inline-cost>", 0x12uLL);
    v460 = (unsigned __int8 *)sub_1CD703600();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v460, v461, "print<inliner-size-estimator>", 0x1DuLL);
    v462 = (unsigned __int8 *)sub_1CD7036BC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v462, v463, "print<gpu-function-analysis>", 0x1CuLL);
    v464 = (unsigned __int8 *)sub_1CD703778();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v464, v465, "print<loops>", 0xCuLL);
    v466 = (unsigned __int8 *)sub_1CD703834();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v466, v467, "print<memoryssa>", 0x10uLL);
    v468 = (unsigned __int8 *)sub_1CD7038F0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v468, v469, "print<memoryssa-walker>", 0x17uLL);
    v470 = (unsigned __int8 *)sub_1CD7039AC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v470, v471, "print<phi-values>", 0x11uLL);
    v472 = (unsigned __int8 *)sub_1CD703A68();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v472, v473, "print<regions>", 0xEuLL);
    v474 = (unsigned __int8 *)sub_1CD703B24();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v474, v475, "print<scalar-evolution>", 0x17uLL);
    v476 = (unsigned __int8 *)sub_1CD703BE0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v476, v477, "print<stack-safety-local>", 0x19uLL);
    v478 = (unsigned __int8 *)sub_1CD703C9C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v478, v479, "print-alias-sets", 0x10uLL);
    v480 = (unsigned __int8 *)sub_1CD703D58();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v480, v481, "print-predicateinfo", 0x13uLL);
    v482 = (unsigned __int8 *)sub_1CD703E14();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v482, v483, "print-mustexecute", 0x11uLL);
    v484 = (unsigned __int8 *)sub_1CD703ED0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v484, v485, "print-memderefs", 0xFuLL);
    v486 = (unsigned __int8 *)sub_1CCC92DA4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v486, v487, "reassociate", 0xBuLL);
    v488 = (unsigned __int8 *)sub_1CD703F8C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v488, v489, "redundant-dbg-inst-elim", 0x17uLL);
    v490 = (unsigned __int8 *)sub_1CD704048();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v490, v491, "reg2mem", 7uLL);
    v492 = (unsigned __int8 *)sub_1CD704104();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v492, v493, "scalarize-masked-mem-intrin", 0x1BuLL);
    v494 = (unsigned __int8 *)sub_1CD7041C0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v494, v495, "scalarizer", 0xAuLL);
    v496 = (unsigned __int8 *)sub_1CD70427C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v496, v497, "separate-const-offset-from-gep", 0x1EuLL);
    v498 = (unsigned __int8 *)sub_1CCC92E60();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v498, v499, "sccp", 4uLL);
    v500 = (unsigned __int8 *)sub_1CD704338();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v500, v501, "sink", 4uLL);
    v502 = (unsigned __int8 *)sub_1CD7043F4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v502, v503, "slp-vectorizer", 0xEuLL);
    v504 = (unsigned __int8 *)sub_1CD7044B0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v504, v505, "slsr", 4uLL);
    v506 = (unsigned __int8 *)sub_1CCC92F1C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v506, v507, "speculative-execution", 0x15uLL);
    v508 = (unsigned __int8 *)sub_1CCC92FD8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v508, v509, "sroa", 4uLL);
    v510 = (unsigned __int8 *)sub_1CD70456C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v510, v511, "strip-gc-relocates", 0x12uLL);
    v512 = (unsigned __int8 *)sub_1CD704628();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v512, v513, "structurizecfg", 0xEuLL);
    v514 = (unsigned __int8 *)sub_1CCC93094();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v514, v515, "tailcallelim", 0xCuLL);
    v516 = (unsigned __int8 *)sub_1CD7046E4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v516, v517, "unify-loop-exits", 0x10uLL);
    v518 = (unsigned __int8 *)sub_1CD7047A0();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v518, v519, "vector-combine", 0xEuLL);
    v520 = (unsigned __int8 *)sub_1CD69F000();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v520, v521, "verify", 6uLL);
    v522 = (unsigned __int8 *)sub_1CD70485C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v522, v523, "verify<domtree>", 0xFuLL);
    v524 = (unsigned __int8 *)sub_1CD704918();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v524, v525, "verify<loops>", 0xDuLL);
    v526 = (unsigned __int8 *)sub_1CD7049D4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v526, v527, "verify<memoryssa>", 0x11uLL);
    v528 = (unsigned __int8 *)sub_1CD704A90();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v528, v529, "verify<regions>", 0xFuLL);
    v530 = (unsigned __int8 *)sub_1CD704B4C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v530, v531, "verify<safepoint-ir>", 0x14uLL);
    v532 = (unsigned __int8 *)sub_1CD704C08();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v532, v533, "verify<scalar-evolution>", 0x18uLL);
    v534 = (unsigned __int8 *)sub_1CD704CC4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v534, v535, "view-cfg", 8uLL);
    v536 = (unsigned __int8 *)sub_1CD704D80();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v536, v537, "view-cfg-only", 0xDuLL);
    v538 = (unsigned __int8 *)sub_1CD704E3C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v538, v539, "tlshoist", 8uLL);
    v540 = (unsigned __int8 *)sub_1CD704EF8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v540, v541, "transform-warning", 0x11uLL);
    v542 = (unsigned __int8 *)sub_1CD704FB4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v542, v543, "tsan", 4uLL);
    v544 = (unsigned __int8 *)sub_1CD705070();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v544, v545, "memprof", 7uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "EarlyCSEPass", 0xCuLL, "early-cse", 9uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "EntryExitInstrumenterPass", 0x19uLL, "ee-instrument", 0xDuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LowerMatrixIntrinsicsPass", 0x19uLL, "lower-matrix-intrinsics", 0x17uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LoopUnrollPass", 0xEuLL, "loop-unroll", 0xBuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "MemorySanitizerPass", 0x13uLL, "msan", 4uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "SimplifyCFGPass", 0xFuLL, "simplifycfg", 0xBuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LoopVectorizePass", 0x11uLL, "loop-vectorize", 0xEuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "MergedLoadStoreMotionPass", 0x19uLL, "mldst-motion", 0xCuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "GVNPass", 7uLL, "gvn", 3uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "StackLifetimePrinterPass", 0x18uLL, "print<stack-lifetime>", 0x15uLL);
    v546 = (unsigned __int8 *)sub_1CD70512C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v546, v547, "loop-flatten", 0xCuLL);
    v548 = (unsigned __int8 *)sub_1CD7051E8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v548, v549, "loop-interchange", 0x10uLL);
    v550 = (unsigned __int8 *)sub_1CD7052A4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v550, v551, "loop-unroll-and-jam", 0x13uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpLoopNestPass", 0x10uLL, "no-op-loopnest", 0xEuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpLoopAnalysis", 0x10uLL, "no-op-loop", 0xAuLL);
    v552 = (unsigned __int8 *)sub_1CD705360();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v552, v553, "access-info", 0xBuLL);
    v554 = (unsigned __int8 *)sub_1CD70541C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v554, v555, "ddg", 3uLL);
    v556 = (unsigned __int8 *)sub_1CD7054D8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v556, v557, "iv-users", 8uLL);
    v558 = (unsigned __int8 *)sub_1CD611D70();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v558, v559, "pass-instrumentation", 0x14uLL);
    v560 = (unsigned __int8 *)sub_1CD705594();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v560, v561, "canon-freeze", 0xCuLL);
    v562 = (unsigned __int8 *)sub_1CD705650();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v562, v563, "dot-ddg", 7uLL);
    v564 = (unsigned __int8 *)sub_1CD6FC894();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v564, v565, "invalidate<all>", 0xFuLL);
    v566 = (unsigned __int8 *)sub_1CD70570C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v566, v567, "loop-idiom", 0xAuLL);
    v568 = (unsigned __int8 *)sub_1CCC93150();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v568, v569, "loop-instsimplify", 0x11uLL);
    v570 = (unsigned __int8 *)sub_1CCC9320C();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v570, v571, "loop-rotate", 0xBuLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpLoopPass", 0xCuLL, "no-op-loop", 0xAuLL);
    v572 = (unsigned __int8 *)sub_1CD7057C8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v572, v573, "print", 5uLL);
    v574 = (unsigned __int8 *)sub_1CCC932C8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v574, v575, "loop-deletion", 0xDuLL);
    v576 = (unsigned __int8 *)sub_1CCC93384();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v576, v577, "loop-simplifycfg", 0x10uLL);
    v578 = (unsigned __int8 *)sub_1CD705884();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v578, v579, "loop-reduce", 0xBuLL);
    v580 = (unsigned __int8 *)sub_1CCC93440();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v580, v581, "indvars", 7uLL);
    v582 = (unsigned __int8 *)sub_1CD705940();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v582, v583, "loop-unroll-full", 0x10uLL);
    v584 = (unsigned __int8 *)sub_1CD7059FC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v584, v585, "print-access-info", 0x11uLL);
    v586 = (unsigned __int8 *)sub_1CD705AB8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v586, v587, "print<ddg>", 0xAuLL);
    v588 = (unsigned __int8 *)sub_1CD705B74();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v588, v589, "print<iv-users>", 0xFuLL);
    v590 = (unsigned __int8 *)sub_1CD705C30();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v590, v591, "print<loopnest>", 0xFuLL);
    v592 = (unsigned __int8 *)sub_1CD705CEC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v592, v593, "print<loop-cache-cost>", 0x16uLL);
    v594 = (unsigned __int8 *)sub_1CD705DA8();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v594, v595, "loop-predication", 0x10uLL);
    v596 = (unsigned __int8 *)sub_1CD701DC4();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v596, v597, "guard-widening", 0xEuLL);
    v598 = (unsigned __int8 *)sub_1CD705E64();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v598, v599, "loop-bound-split", 0x10uLL);
    v600 = (unsigned __int8 *)sub_1CD705F20();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v600, v601, "loop-reroll", 0xBuLL);
    v602 = (unsigned __int8 *)sub_1CD705FDC();
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v602, v603, "loop-versioning-licm", 0x14uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "SimpleLoopUnswitchPass", 0x16uLL, "simple-loop-unswitch", 0x14uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LICMPass", 8uLL, "licm", 4uLL);
    llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LNICMPass", 9uLL, "lnicm", 5uLL);
  }
  return a1;
}

char *sub_1CD6FAD68()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphAnalysis]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_20[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FAE24()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionGroupAnalysis]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_21[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FAEE0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyCallGraphAnalysis]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_22[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FAF9C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleSummaryIndexAnalysis]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_23[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB058()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ProfileSummaryAnalysis]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_24[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB114()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyGlobalAnalysis]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_25[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB1D0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::VerifierAnalysis]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_26[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB28C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ASanGlobalsMetadataAnalysis]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_27[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB348()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineAdvisorAnalysis]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_28[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB404()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IRSimilarityAnalysis]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_29[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB4C0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GlobalsAA]";
  v10[1] = 65;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x41) {
    uint64_t v1 = 65;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_30[v1];
  unint64_t v3 = 65 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB57C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AttributorPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_32[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB638()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::Annotation2MetadataPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_33[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB6F4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OpenMPOptPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_34[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB7B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CalledValuePropagationPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_35[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB86C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CanonicalizeAliasesPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_36[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB928()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CGProfilePass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_37[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FB9E4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = NewPMCheckDebugifyPass]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_38[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBAA0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ConstantMergePass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_39[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBB5C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroEarlyPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_40[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBC18()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CrossDSOCFIPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_41[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBCD4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DeadArgumentEliminationPass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_42[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBD90()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = NewPMDebugifyPass]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_43[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBE4C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphDOTPrinterPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_44[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBF08()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::EliminateAvailableExternallyPass]";
  v10[1] = 88;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x58) {
    uint64_t v1 = 88;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_45[v1];
  unint64_t v3 = 88 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FBFC4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BlockExtractorPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_46[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC080()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ForceFunctionAttrsPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_47[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC13C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionImportPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_48[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC1F8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionSpecializationPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_49[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC2B4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GlobalSplitPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_52[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC370()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::HotColdSplittingPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_53[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC42C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InferFunctionAttrsPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_54[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC4E8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleInlinerWrapperPass]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_55[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC5A4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineAdvisorAnalysisPrinterPass]";
  v10[1] = 88;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x58) {
    uint64_t v1 = 88;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_56[v1];
  unint64_t v3 = 88 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC660()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GCOVProfilerPass]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_57[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC71C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstrOrderFilePass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_58[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC7D8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstrProfiling]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_59[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC894()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAllAnalysesPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_61[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FC950()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IPSCCPPass]";
  v10[1] = 66;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x42) {
    uint64_t v1 = 66;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_62[v1];
  unint64_t v3 = 66 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCA0C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IROutlinerPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_63[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCAC8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IRSimilarityAnalysisPrinterPass]";
  v10[1] = 87;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x57) {
    uint64_t v1 = 87;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_64[v1];
  unint64_t v3 = 87 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCB84()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerGlobalDtorsPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_65[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCC40()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerTypeTestsPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_66[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCCFC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MetaRenamerPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_67[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCDB8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MergeFunctionsPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_68[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCE74()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::NameAnonGlobalPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_69[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCF30()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCAPElimPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_70[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FCFEC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PartialInlinerPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_71[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD0A8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOIndirectCallPromotion]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_72[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD164()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOInstrumentationGen]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_73[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD220()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOInstrumentationUse]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_74[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD2DC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionGroupInfoPrinterPass]";
  v10[1] = 84;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54) {
    uint64_t v1 = 84;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_75[v1];
  unint64_t v3 = 84 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD398()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ProfileSummaryPrinterPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_76[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD454()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphPrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_77[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD510()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PrintModulePass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_78[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD5CC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyCallGraphPrinterPass]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_79[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD688()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyCallGraphDOTPrinterPass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_80[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD744()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MustBeExecutedContextPrinterPass]";
  v10[1] = 88;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x58) {
    uint64_t v1 = 88;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_81[v1];
  unint64_t v3 = 88 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD800()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyGlobalPrinterPass]";
  v10[1] = 84;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54) {
    uint64_t v1 = 84;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_82[v1];
  unint64_t v3 = 84 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD8BC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleDebugInfoPrinterPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_83[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FD978()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RecomputeGlobalsAAPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_84[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDA34()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RelLookupTableConverterPass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_85[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDAF0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RewriteStatepointsForGC]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_86[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDBAC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RewriteSymbolPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_87[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDC68()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ReversePostOrderFunctionAttrsPass]";
  v10[1] = 89;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59) {
    uint64_t v1 = 89;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_88[v1];
  unint64_t v3 = 89 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDD24()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SampleProfileLoaderPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_89[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDDE0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripSymbolsPass]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_90[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDE9C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripDeadDebugInfoPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_91[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FDF58()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SampleProfileProbePass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_92[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE014()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SoftPointerAuthPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_93[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE0D0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripDeadPrototypesPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_94[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE18C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripDebugDeclarePass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_95[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE248()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripNonDebugSymbolsPass]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_96[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE304()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripNonLineTableDebugInfoPass]";
  v10[1] = 86;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56) {
    uint64_t v1 = 86;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_97[v1];
  unint64_t v3 = 86 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE3C0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SyntheticCountsPropagation]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_98[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE47C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphViewerPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_99[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE538()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::WholeProgramDevirtPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_100[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE5F4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DataFlowSanitizerPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_101[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE6B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleMemorySanitizerPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_102[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE76C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleInlinerPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_103[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE828()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleThreadSanitizerPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_104[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE8E4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleSanitizerCoveragePass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_105[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FE9A0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleMemProfilerPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_106[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEA5C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PoisonCheckingPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_107[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEB18()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PseudoProbeUpdatePass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_108[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEBD4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionAnalysisManagerCGSCCProxy]";
  v10[1] = 89;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59) {
    uint64_t v1 = 89;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_109[v1];
  unint64_t v3 = 89 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEC90()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ArgumentPromotionPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_110[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FED4C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AttributorCGSCCPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_112[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEE08()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OpenMPOptCGSCCPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_113[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEEC4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroSplitPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_114[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FEF80()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BlockFrequencyAnalysis]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_115[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF03C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BranchProbabilityAnalysis]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_116[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF0F8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CycleAnalysis]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_117[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF1B4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PostDominatorTreeAnalysis]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_118[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF270()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DemandedBitsAnalysis]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_119[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF32C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominanceFrontierAnalysis]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_120[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF3E8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionPropertiesAnalysis]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_121[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF4A4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyValueAnalysis]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_122[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF560()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DependenceAnalysis]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_123[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF61C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineSizeEstimatorAnalysis]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_124[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF6D8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemoryDependenceAnalysis]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_125[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF794()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAAnalysis]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_126[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF850()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PhiValuesAnalysis]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_127[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF90C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegionInfoAnalysis]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_128[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FF9C8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OptimizationRemarkEmitterAnalysis]";
  v10[1] = 89;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59) {
    uint64_t v1 = 89;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_129[v1];
  unint64_t v3 = 89 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFA84()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ShouldNotRunFunctionPassesAnalysis]";
  v10[1] = 90;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5A) {
    uint64_t v1 = 90;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_130[v1];
  unint64_t v3 = 90 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFB40()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ShouldRunExtraVectorPasses]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_131[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFBFC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyAnalysis]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_132[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFCB8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DivergenceAnalysis]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_133[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFD74()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GPUFunctionAnalysis]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_134[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFE30()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BasicAA]";
  v10[1] = 63;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3F) {
    uint64_t v1 = 63;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_135[v1];
  unint64_t v3 = v1 ^ 0x3F;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFEEC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFLAndersAA]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_136[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD6FFFA8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFLSteensAA]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_137[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700064()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::objcarc::ObjCARCAA]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_138[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700120()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SCEVAA]";
  v10[1] = 62;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3E) {
    uint64_t v1 = 62;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_139[v1];
  unint64_t v3 = 62 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7001DC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScopedNoAliasAA]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_140[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700298()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TypeBasedAA]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_141[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700354()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AAEvaluator]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_142[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700410()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AddDiscriminatorsPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_144[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7004CC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AggressiveInstCombinePass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_145[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700588()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumeBuilderPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_146[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700644()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumeSimplifyPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_147[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700700()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BoundsCheckingPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_151[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7007BC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BreakCriticalEdgesPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_152[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700878()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallSiteSplittingPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_153[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700934()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ConstantHoistingPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_154[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7009F0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ConstraintEliminationPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_155[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700AAC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ControlHeightReductionPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_156[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700B68()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroElidePass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_157[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700C24()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroCleanupPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_158[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700CE0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DCEPass]";
  v10[1] = 63;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3F) {
    uint64_t v1 = 63;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_160[v1];
  unint64_t v3 = v1 ^ 0x3F;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700D9C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DFAJumpThreadingPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_161[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700E58()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DivRemPairsPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_162[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700F14()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGPrinterPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_164[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD700FD0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGOnlyPrinterPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_165[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70108C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DomTreePrinterPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_166[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701148()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DomTreeOnlyPrinterPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_167[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701204()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FixIrreduciblePass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_168[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7012C0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FlattenCFGPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_169[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70137C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MakeGuardsExplicitPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_170[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701438()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GVNHoistPass]";
  v10[1] = 68;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44) {
    uint64_t v1 = 68;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_171[v1];
  unint64_t v3 = 68 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7014F4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GVNSinkPass]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_172[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7015B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::HelloWorldPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_173[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70166C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InferAddressSpacesPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_174[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701728()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstCountPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_176[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7017E4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IRCEPass]";
  v10[1] = 64;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40) {
    uint64_t v1 = 64;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_178[v1];
  unint64_t v3 = 64 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7018A0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::Float2IntPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_179[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70195C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LintPass]";
  v10[1] = 64;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40) {
    uint64_t v1 = 64;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_180[v1];
  unint64_t v3 = 64 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701A18()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InjectTLIMappings]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_181[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701AD4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstructionNamerPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_182[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701B90()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerAtomicPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_183[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701C4C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerGuardIntrinsicPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_185[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701D08()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerWidenableConditionPass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_187[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701DC4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GuardWideningPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_188[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701E80()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoadStoreVectorizerPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_189[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701F3C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerInvokePass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_192[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD701FF8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerSwitchPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_193[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7020B4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MergeICmpsPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_196[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702170()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::UnifyFunctionExitNodesPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_197[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70222C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::NaryReassociatePass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_198[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7022E8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::NewGVNPass]";
  v10[1] = 66;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x42) {
    uint64_t v1 = 66;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_199[v1];
  unint64_t v3 = 66 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7023A4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::JumpThreadingPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_200[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702460()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PartiallyInlineLibCallsPass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_201[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70251C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopDataPrefetchPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_203[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7025D8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopFusePass]";
  v10[1] = 68;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44) {
    uint64_t v1 = 68;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_205[v1];
  unint64_t v3 = 68 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702694()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopDistributePass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_206[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702750()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVersioningPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_207[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70280C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCOptPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_208[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7028C8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCContractPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_209[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702984()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCExpandPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_210[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702A40()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOMemOPSizeOpt]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_211[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702AFC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PrintFunctionPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_212[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702BB8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumptionPrinterPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_213[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702C74()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BlockFrequencyPrinterPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_214[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702D30()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BranchProbabilityPrinterPass]";
  v10[1] = 84;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54) {
    uint64_t v1 = 84;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_215[v1];
  unint64_t v3 = 84 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702DEC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CostModelPrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_216[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702EA8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CycleInfoPrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_217[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD702F64()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DependenceAnalysisPrinterPass]";
  v10[1] = 85;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55) {
    uint64_t v1 = 85;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_218[v1];
  unint64_t v3 = 85 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703020()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DivergenceAnalysisPrinterPass]";
  v10[1] = 85;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55) {
    uint64_t v1 = 85;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_219[v1];
  unint64_t v3 = 85 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7030DC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominatorTreePrinterPass]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_220[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703198()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PostDominatorTreePrinterPass]";
  v10[1] = 84;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54) {
    uint64_t v1 = 84;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_221[v1];
  unint64_t v3 = 84 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703254()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DelinearizationPrinterPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_222[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703310()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DemandedBitsPrinterPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_223[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7033CC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominanceFrontierPrinterPass]";
  v10[1] = 84;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54) {
    uint64_t v1 = 84;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_224[v1];
  unint64_t v3 = 84 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703488()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionPropertiesPrinterPass]";
  v10[1] = 85;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55) {
    uint64_t v1 = 85;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_225[v1];
  unint64_t v3 = 85 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703544()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineCostAnnotationPrinterPass]";
  v10[1] = 87;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x57) {
    uint64_t v1 = 87;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_226[v1];
  unint64_t v3 = 87 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703600()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineSizeEstimatorAnalysisPrinterPass]";
  v10[1] = 94;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5E) {
    uint64_t v1 = 94;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_227[v1];
  unint64_t v3 = 94 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7036BC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GPUFunctionInfoPrinterPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_228[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703778()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopPrinterPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_229[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703834()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAPrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_230[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7038F0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAWalkerPrinterPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_231[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7039AC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PhiValuesPrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_232[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703A68()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegionInfoPrinterPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_233[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703B24()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarEvolutionPrinterPass]";
  v10[1] = 82;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52) {
    uint64_t v1 = 82;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_234[v1];
  unint64_t v3 = 82 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703BE0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyPrinterPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_235[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703C9C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AliasSetsPrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_236[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703D58()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PredicateInfoPrinterPass]";
  v10[1] = 80;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50) {
    uint64_t v1 = 80;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_237[v1];
  unint64_t v3 = 80 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703E14()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MustExecutePrinterPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_238[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703ED0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemDerefPrinterPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_239[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD703F8C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RedundantDbgInstEliminationPass]";
  v10[1] = 87;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x57) {
    uint64_t v1 = 87;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_241[v1];
  unint64_t v3 = 87 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704048()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegToMemPass]";
  v10[1] = 68;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44) {
    uint64_t v1 = 68;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_242[v1];
  unint64_t v3 = 68 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704104()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarizeMaskedMemIntrinPass]";
  v10[1] = 84;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54) {
    uint64_t v1 = 84;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_243[v1];
  unint64_t v3 = 84 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7041C0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarizerPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_244[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70427C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SeparateConstOffsetFromGEPPass]";
  v10[1] = 86;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56) {
    uint64_t v1 = 86;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_245[v1];
  unint64_t v3 = 86 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704338()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SinkingPass]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_247[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7043F4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SLPVectorizerPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_248[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7044B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StraightLineStrengthReducePass]";
  v10[1] = 86;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56) {
    uint64_t v1 = 86;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_249[v1];
  unint64_t v3 = 86 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70456C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripGCRelocates]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_252[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704628()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StructurizeCFGPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_253[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7046E4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::UnifyLoopExitsPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_255[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7047A0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::VectorCombinePass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_256[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70485C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominatorTreeVerifierPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_257[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704918()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVerifierPass]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_258[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7049D4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAVerifierPass]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_259[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704A90()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegionInfoVerifierPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_260[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704B4C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SafepointIRVerifierPass]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_261[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704C08()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarEvolutionVerifierPass]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_262[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704CC4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGViewerPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_263[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704D80()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGOnlyViewerPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_264[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704E3C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TLSVariableHoistPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_265[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704EF8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::WarnMissedTransformationsPass]";
  v10[1] = 85;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55) {
    uint64_t v1 = 85;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_266[v1];
  unint64_t v3 = 85 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD704FB4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ThreadSanitizerPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_267[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705070()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemProfilerPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_268[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70512C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopFlattenPass]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_269[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7051E8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopInterchangePass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_270[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7052A4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopUnrollAndJamPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_271[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705360()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopAccessAnalysis]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_272[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70541C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DDGAnalysis]";
  v10[1] = 67;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43) {
    uint64_t v1 = 67;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_273[v1];
  unint64_t v3 = 67 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7054D8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IVUsersAnalysis]";
  v10[1] = 71;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47) {
    uint64_t v1 = 71;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_274[v1];
  unint64_t v3 = 71 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705594()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CanonicalizeFreezeInLoopsPass]";
  v10[1] = 85;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55) {
    uint64_t v1 = 85;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_275[v1];
  unint64_t v3 = 85 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705650()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DDGDotPrinterPass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_276[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD70570C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopIdiomRecognizePass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_277[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7057C8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PrintLoopPass]";
  v10[1] = 69;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45) {
    uint64_t v1 = 69;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_280[v1];
  unint64_t v3 = 69 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705884()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopStrengthReducePass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_283[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705940()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopFullUnrollPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_285[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD7059FC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopAccessInfoPrinterPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_286[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705AB8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DDGAnalysisPrinterPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_287[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705B74()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IVUsersPrinterPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_288[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705C30()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopNestPrinterPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_289[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705CEC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopCachePrinterPass]";
  v10[1] = 76;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C) {
    uint64_t v1 = 76;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_290[v1];
  unint64_t v3 = 76 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705DA8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopPredicationPass]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_291[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705E64()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopBoundSplitPass]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_292[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705F20()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopRerollPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_293[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char *sub_1CD705FDC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVersioningLICMPass]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_294[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void *llvm::PassBuilder::registerModuleAnalyses(uint64_t a1, _DWORD *a2)
{
  int v9 = &llvm::CallGraphAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::FunctionGroupAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::LazyCallGraphAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::ModuleSummaryIndexAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &unk_1EA61DEE8;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::ProfileSummaryAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::StackSafetyGlobalAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::VerifierAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::PassInstrumentationAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::ASanGlobalsMetadataAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::InlineAdvisorAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::IRSimilarityAnalysis::Key;
  if (!sub_1CC91FFC0(a2, &v9)[1]) {
    operator new();
  }
  int v9 = &llvm::GlobalsAA::Key;
  uint64_t result = sub_1CC91FFC0(a2, &v9);
  if (!result[1]) {
    operator new();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 1112);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 1104);
    uint64_t v7 = 32 * v5;
    for (int i = (void *)(v6 + 24); *i; i += 4)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, _DWORD *))(*(void *)*i + 48))(*i, a2);
      v7 -= 32;
      if (!v7) {
        return result;
      }
    }
    sub_1CB920400();
    return (void *)llvm::PassBuilder::registerCGSCCAnalyses();
  }
  return result;
}

void *llvm::PassBuilder::registerCGSCCAnalyses(uint64_t a1, uint64_t a2)
{
  int v9 = &unk_1EA61DEF0;
  if (!sub_1CD71B394(a2, (uint64_t *)&v9)[1]) {
    operator new();
  }
  int v9 = &llvm::FunctionAnalysisManagerCGSCCProxy::Key;
  if (!sub_1CD71B394(a2, (uint64_t *)&v9)[1]) {
    operator new();
  }
  int v9 = &llvm::PassInstrumentationAnalysis::Key;
  uint64_t result = sub_1CD71B394(a2, (uint64_t *)&v9);
  if (!result[1]) {
    operator new();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 1432);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 1424);
    uint64_t v7 = 32 * v5;
    for (int i = (void *)(v6 + 24); *i; i += 4)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*i + 48))(*i, a2);
      v7 -= 32;
      if (!v7) {
        return result;
      }
    }
    sub_1CB920400();
    return (void *)llvm::PassBuilder::registerLoopAnalyses();
  }
  return result;
}

uint64_t *llvm::PassBuilder::registerLoopAnalyses(uint64_t a1, uint64_t a2)
{
  int v9 = &unk_1EA61DF00;
  if (!sub_1CCCBAD10(a2, (uint64_t *)&v9)[1]) {
    operator new();
  }
  int v9 = &llvm::LoopAccessAnalysis::Key;
  if (!sub_1CCCBAD10(a2, (uint64_t *)&v9)[1]) {
    operator new();
  }
  int v9 = &llvm::DDGAnalysis::Key;
  if (!sub_1CCCBAD10(a2, (uint64_t *)&v9)[1]) {
    operator new();
  }
  int v9 = &llvm::IVUsersAnalysis::Key;
  if (!sub_1CCCBAD10(a2, (uint64_t *)&v9)[1]) {
    operator new();
  }
  int v9 = &llvm::PassInstrumentationAnalysis::Key;
  uint64_t result = sub_1CCCBAD10(a2, (uint64_t *)&v9);
  if (!result[1]) {
    operator new();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 1752);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 1744);
    uint64_t v7 = 32 * v5;
    for (int i = (void *)(v6 + 24); *i; i += 4)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t))(*(void *)*i + 48))(*i, a2);
      v7 -= 32;
      if (!v7) {
        return result;
      }
    }
    sub_1CB920400();
    return (uint64_t *)llvm::PassBuilder::parsePipelineText();
  }
  return result;
}

void llvm::PassBuilder::parsePipelineText(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  unsigned int v28 = v30;
  v30[0] = &v23;
  uint64_t v29 = 0x400000001;
  unsigned int v4 = 1;
  for (int i = v30; ; int i = v28)
  {
    uint64_t v6 = (uint64_t *)i[v4 - 1];
    unint64_t first_of = llvm::StringRef::find_first_of(&v25, ",()", 3, 0);
    unint64_t v8 = first_of;
    unint64_t v9 = v26;
    if (v26 >= first_of) {
      unint64_t v9 = first_of;
    }
    v21[0] = v25;
    v21[1] = v9;
    memset(v22, 0, sizeof(v22));
    sub_1CCC94C2C(v6, (uint64_t)v21);
    size_t v27 = (void **)v22;
    sub_1CCCBB47C(&v27);
    if (v8 == -1) {
      break;
    }
    uint64_t v10 = v25;
    int v11 = *(unsigned __int8 *)(v25 + v8);
    if (v26 >= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    else {
      unint64_t v12 = v26;
    }
    unint64_t v13 = v26 - v12;
    v25 += v12;
    v26 -= v12;
    if (v11 == 40)
    {
      uint64_t v14 = v6[1];
      if (v29 >= (unint64_t)HIDWORD(v29)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v28 + v29) = v14 - 24;
      unsigned int v4 = v29 + 1;
      LODWORD(v29) = v29 + 1;
    }
    else if (v11 == 44)
    {
      unsigned int v4 = v29;
    }
    else
    {
      int v15 = v29;
      int v16 = v29 - 1;
      if (v29 == 1) {
        goto LABEL_24;
      }
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      while (1)
      {
        LODWORD(v29) = v16 + v17;
        if (v13 == v18)
        {
          unsigned int v20 = v15 + v17 - 1;
          goto LABEL_23;
        }
        int v19 = *(unsigned __int8 *)(v10 + v12 + v18);
        if (v19 != 41) {
          break;
        }
        uint64_t v25 = v10 + v12 + 1 + v18;
        unint64_t v26 = v13 + v17 - 1;
        ++v18;
        --v17;
        if (v16 == v18) {
          goto LABEL_24;
        }
      }
      if (v19 != 44) {
        goto LABEL_24;
      }
      uint64_t v25 = v10 + v12 + v18 + 1;
      unint64_t v26 = v13 + v17 - 1;
      unsigned int v4 = v15 + v17 - 1;
    }
  }
  unsigned int v20 = v29;
LABEL_23:
  if (v20 >= 2)
  {
LABEL_24:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    goto LABEL_25;
  }
  *(_OWORD *)a3 = v23;
  *(void *)(a3 + 16) = v24;
  uint64_t v24 = 0;
  long long v23 = 0uLL;
  *(unsigned char *)(a3 + 24) = 1;
LABEL_25:
  if (v28 != v30) {
    free(v28);
  }
  unsigned int v28 = &v23;
  sub_1CCCBB47C((void ***)&v28);
}

void llvm::PassBuilder::parseModulePassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = 40 * a4;
    while (1)
    {
      llvm::PassBuilder::parseModulePass(a1, a2, a3, a4);
      if (*a5) {
        break;
      }
      a3 += 40;
      v9 -= 40;
      if (!v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void llvm::PassBuilder::parseCGSCCPassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = 40 * a4;
    while (1)
    {
      llvm::PassBuilder::parseCGSCCPass(a1, a2, a3, a4);
      if (*a5) {
        break;
      }
      a3 += 40;
      v9 -= 40;
      if (!v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void llvm::PassBuilder::parseFunctionPassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = 40 * a4;
    while (1)
    {
      llvm::PassBuilder::parseFunctionPass(a1, a2, a3, a4);
      if (*a5) {
        break;
      }
      a3 += 40;
      v9 -= 40;
      if (!v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void sub_1CD7071E4()
{
}

void sub_1CD7072C4()
{
}

void sub_1CD707348()
{
}

void sub_1CD7073CC()
{
}

void sub_1CD707450()
{
}

void sub_1CD7074D4()
{
}

void sub_1CD707558()
{
}

void sub_1CD7075DC()
{
}

void sub_1CD707660()
{
}

void sub_1CD7076E4()
{
}

void sub_1CD70776C()
{
}

void sub_1CD7077F0()
{
}

void sub_1CD707874()
{
}

void sub_1CD7078F8()
{
}

void sub_1CD70797C()
{
}

void sub_1CD707A00()
{
}

void sub_1CD707A84()
{
}

void sub_1CD707B08()
{
}

void sub_1CD707B8C()
{
}

void sub_1CD707C10()
{
}

void sub_1CD707C94()
{
}

void sub_1CD707D18()
{
}

void sub_1CD707D9C()
{
}

void sub_1CD707E20()
{
}

void sub_1CD707EA8()
{
}

void sub_1CD707F2C()
{
}

void sub_1CD707FB0()
{
}

void sub_1CD708038()
{
}

void sub_1CD7080BC()
{
}

void sub_1CD708140()
{
}

void sub_1CD7081C4()
{
}

void sub_1CD708248()
{
}

void sub_1CD7082CC()
{
}

void sub_1CD708350()
{
}

void sub_1CD7083D4()
{
}

void sub_1CD708458()
{
}

void **sub_1CD708520(void **a1)
{
  return a1;
}

void sub_1CD708568()
{
}

void sub_1CD7085EC()
{
}

void sub_1CD708670()
{
}

void sub_1CD7086F4()
{
}

void sub_1CD708778()
{
}

void sub_1CD708800()
{
}

void sub_1CD708884()
{
}

void sub_1CD708908()
{
}

void sub_1CD70898C()
{
}

void sub_1CD708A10()
{
}

void sub_1CD708A98()
{
}

void **sub_1CD708BFC(void **a1)
{
  unint64_t v3 = a1 + 16;
  sub_1CCB7AA60(&v3);
  unint64_t v3 = a1 + 13;
  sub_1CCB7AA60(&v3);
  unint64_t v3 = a1 + 10;
  sub_1CC947208(&v3);
  return a1;
}

void sub_1CD708C58()
{
}

void sub_1CD708CE0()
{
}

void sub_1CD708DBC()
{
}

void sub_1CD708E40()
{
  sub_1CCCC1134();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  sub_1CCCC12B0();
}

void sub_1CD708F30()
{
}

void sub_1CD708FB4()
{
}

void sub_1CD70903C()
{
}

void sub_1CD7090C0()
{
}

void sub_1CD709148()
{
}

void sub_1CD7091CC()
{
}

void sub_1CD709264()
{
}

void sub_1CD7092E8()
{
}

void sub_1CD70936C()
{
}

void sub_1CD7093F0()
{
}

void sub_1CD709474()
{
}

void sub_1CD7094F8()
{
}

void sub_1CD709598()
{
}

void sub_1CD709624()
{
}

void sub_1CD7096F8()
{
}

void sub_1CD709780()
{
}

void sub_1CD709808()
{
}

void sub_1CD709890()
{
}

void sub_1CD709948()
{
}

void sub_1CD7099D0()
{
}

void sub_1CD709A58()
{
}

void sub_1CD709AE0()
{
}

void sub_1CD709B68()
{
  sub_1CCCC1134();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  sub_1CCCC1288();
}

void sub_1CD709C64()
{
}

void sub_1CD709CE8()
{
}

void sub_1CD709D6C()
{
}

void sub_1CD709DF0()
{
}

void sub_1CD709F30()
{
}

void sub_1CD709FB8()
{
}

void sub_1CD70A08C()
{
}

void sub_1CD70A118()
{
}

void sub_1CD70A19C()
{
}

void sub_1CD70A224()
{
}

void sub_1CD70A2A8()
{
}

void sub_1CD70A32C()
{
}

void sub_1CD70A3B0()
{
}

void sub_1CD70A43C()
{
}

void sub_1CD70A4C0()
{
}

void sub_1CD70A544()
{
}

void sub_1CD70A5C8()
{
}

void sub_1CD70A65C()
{
}

void sub_1CD70A734()
{
}

void sub_1CD70A7D4()
{
}

void sub_1CD70A898()
{
}

void sub_1CD70A91C()
{
}

void sub_1CD70A9F0()
{
}

void sub_1CD70AA74()
{
}

void sub_1CD70AAF8()
{
}

void sub_1CD70AB7C()
{
}

void sub_1CD70AC1C()
{
}

void sub_1CD70ACC4()
{
}

void sub_1CD70AD5C()
{
}

void sub_1CD70AE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70AEFC()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70AFCC()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70B08C()
{
}

void sub_1CD70B154()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70B298()
{
}

void sub_1CD70B32C()
{
}

void sub_1CD70B47C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70B53C()
{
}

void sub_1CD70B614()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70B6D4()
{
}

void sub_1CD70B7B4()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v0[0] = v1;
  v0[1] = 0x600000000;
  v1[12] = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1CD715620((uint64_t)v0);
}

void sub_1CD70B8D8()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v0[0] = v1;
  v0[1] = 0x600000000;
  v1[12] = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1CD7156A8((uint64_t)v0);
}

void sub_1CD70B9FC()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v0[0] = v1;
  v0[1] = 0x600000000;
  v1[12] = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1CD715730((uint64_t)v0);
}

void sub_1CD70BB40()
{
}

void sub_1CD70BBC4()
{
}

void sub_1CD70BC48()
{
}

void sub_1CD70BCCC()
{
}

void sub_1CD70BD50()
{
}

void sub_1CD70BDD4()
{
}

void sub_1CD70BE90()
{
}

void sub_1CD70BF40()
{
}

void sub_1CD70BFC4()
{
}

void sub_1CD70C048()
{
}

void sub_1CD70C0CC()
{
}

void sub_1CD70C15C()
{
}

void sub_1CD70C1E8()
{
}

void sub_1CD70C274()
{
}

void sub_1CD70C300()
{
}

void sub_1CD70C38C()
{
}

void sub_1CD70C418()
{
}

void sub_1CD70C4A4()
{
}

void sub_1CD70C528()
{
}

void sub_1CD70C5AC()
{
}

void sub_1CD70C630()
{
}

void sub_1CD70C6B4()
{
}

void sub_1CD70C738()
{
}

void sub_1CD70C7C8()
{
}

void sub_1CD70C888()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v0[0] = v1;
  v0[1] = 0x600000000;
  v1[12] = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1CD716BAC((uint64_t)v0);
}

void sub_1CD70C9AC()
{
}

void sub_1CD70CA4C()
{
}

void sub_1CD70CAF8()
{
}

void sub_1CD70CBD8()
{
}

void sub_1CD70CC78()
{
}

void sub_1CD70CCFC()
{
}

void sub_1CD70CD80()
{
}

void sub_1CD70CE04()
{
}

void sub_1CD70CE88()
{
}

void sub_1CD70CF28()
{
}

void sub_1CD70CFAC()
{
}

void sub_1CD70D034()
{
}

void sub_1CD70D0B8()
{
}

void sub_1CD70D13C()
{
}

void sub_1CD70D1C8()
{
}

void sub_1CD70D28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70D368()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70D438()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70D4F8()
{
}

void sub_1CD70D5C0()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70D704()
{
}

void sub_1CD70D798()
{
}

void sub_1CD70D8E8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70D9A8()
{
}

void sub_1CD70DA80()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70DB40()
{
}

void llvm::PassBuilder::parseLoopPassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void **a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = 40 * (void)a4;
    while (1)
    {
      llvm::PassBuilder::parseLoopPass(a1, a2, a3, a4, a5);
      if (*a5) {
        break;
      }
      a3 += 40;
      v9 -= 40;
      if (!v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void sub_1CD70DC88()
{
}

void sub_1CD70DDA8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD70DEC0()
{
}

void sub_1CD70DFA0()
{
}

void sub_1CD70E024()
{
}

void sub_1CD70E0A8()
{
}

void sub_1CD70E12C()
{
}

void sub_1CD70E1B0()
{
}

void sub_1CD70E234()
{
}

void sub_1CD70E2B8()
{
}

void sub_1CD70E33C()
{
}

void sub_1CD70E3C0()
{
}

void sub_1CD70E444()
{
}

void sub_1CD70E4C8()
{
}

void sub_1CD70E54C()
{
}

void sub_1CD70E5D0()
{
}

void sub_1CD70E654()
{
}

void sub_1CD70E6D8()
{
}

void sub_1CD70E75C()
{
}

void sub_1CD70E7E0()
{
}

void sub_1CD70E864()
{
}

void sub_1CD70E8E8()
{
}

void sub_1CD70E96C()
{
}

void sub_1CD70E9F0()
{
}

void sub_1CD70EA74()
{
}

void sub_1CD70EAF8()
{
}

void sub_1CD70EB7C()
{
}

void sub_1CD70EC00()
{
}

void sub_1CD70EC84()
{
}

void sub_1CD70ED08()
{
}

void sub_1CD70ED8C()
{
}

void sub_1CD70EE10()
{
}

void sub_1CD70EE94()
{
}

void sub_1CD70EF18()
{
}

void sub_1CD70EF9C()
{
}

void sub_1CD70F020()
{
}

void sub_1CD70F0A4()
{
}

void sub_1CD70F128()
{
}

void sub_1CD70F1AC()
{
}

void sub_1CD70F230()
{
}

void sub_1CD70F2B4()
{
}

void sub_1CD70F338()
{
}

void sub_1CD70F3BC()
{
}

void sub_1CD70F440()
{
}

void sub_1CD70F4C4()
{
}

void sub_1CD70F548()
{
}

void sub_1CD70F5CC()
{
}

void sub_1CD70F650()
{
}

void sub_1CD70F6D4()
{
}

void sub_1CD70F758()
{
}

void sub_1CD70F7DC()
{
}

void sub_1CD70F860()
{
}

void sub_1CD70F8E4()
{
}

void sub_1CD70F968()
{
}

void sub_1CD70F9EC()
{
}

void sub_1CD70FA70()
{
}

void sub_1CD70FAF4()
{
}

void sub_1CD70FB78()
{
}

void sub_1CD70FBFC()
{
}

void sub_1CD70FC80()
{
}

void sub_1CD70FD04()
{
}

void sub_1CD70FD88()
{
}

void sub_1CD70FE0C()
{
}

void sub_1CD70FE90()
{
}

void sub_1CD70FF14()
{
}

void sub_1CD70FF98()
{
}

void sub_1CD71001C()
{
}

void sub_1CD7100A0()
{
}

void sub_1CD710124()
{
}

void sub_1CD7101A8()
{
}

void sub_1CD71022C()
{
}

void sub_1CD7102B0()
{
}

void sub_1CD710334()
{
}

void sub_1CD7103B8()
{
}

void sub_1CD71043C()
{
}

void sub_1CD7104C0()
{
}

void sub_1CD7105C0()
{
}

void sub_1CD710644()
{
}

void sub_1CD7106C8()
{
}

void sub_1CD71074C()
{
}

void sub_1CD7107D0()
{
}

void sub_1CD710854()
{
}

void sub_1CD7108F8()
{
}

void sub_1CD71097C()
{
}

void sub_1CD710A00()
{
}

void sub_1CD710A84()
{
}

void sub_1CD710B08()
{
}

void sub_1CD710B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  sub_1CCCC1134();
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_1CCCC1288();
}

void sub_1CD710C98()
{
}

void sub_1CD710D1C()
{
}

void sub_1CD710DA0()
{
}

void sub_1CD710E24()
{
}

void sub_1CD710EA8()
{
}

void sub_1CD710F2C()
{
}

void sub_1CD710FB0()
{
}

void sub_1CD711034()
{
}

void sub_1CD7110B8()
{
}

void sub_1CD71113C()
{
}

void sub_1CD7111C0()
{
}

void sub_1CD711244()
{
}

void sub_1CD7112C8()
{
}

void sub_1CD71134C()
{
}

void sub_1CD7113D0()
{
}

void sub_1CD711454()
{
}

void sub_1CD7114D8()
{
}

void sub_1CD71155C()
{
}

void sub_1CD7115E0()
{
}

void sub_1CD711664()
{
}

void sub_1CD711704()
{
}

void sub_1CD711788()
{
}

void sub_1CD71180C()
{
}

void sub_1CD711890()
{
}

void sub_1CD711914()
{
  sub_1CCCC1134();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  sub_1CCCC111C();
}

void sub_1CD711A04()
{
}

void sub_1CD711A88()
{
}

void sub_1CD711B0C()
{
}

void sub_1CD711B90()
{
}

void sub_1CD711C14()
{
}

void sub_1CD711C98()
{
}

void sub_1CD711D20()
{
}

void sub_1CD711DA4()
{
}

void sub_1CD711E2C()
{
}

void sub_1CD711EB0()
{
}

void sub_1CD711F34()
{
}

void sub_1CD711FB8()
{
}

void sub_1CD712040()
{
}

void sub_1CD7120C4()
{
}

void sub_1CD712148()
{
}

void sub_1CD7121CC()
{
}

void sub_1CD712250()
{
}

void sub_1CD7122FC()
{
}

void sub_1CD712380()
{
}

void sub_1CD712404()
{
}

void sub_1CD712518()
{
}

void sub_1CD71259C()
{
  sub_1CCCC1134();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  sub_1CCCC111C();
}

void sub_1CD712714()
{
}

void sub_1CD712798()
{
}

void sub_1CD712820()
{
}

void sub_1CD7128A4()
{
}

void sub_1CD71292C()
{
}

void sub_1CD7129B0()
{
}

void sub_1CD712A34()
{
}

void sub_1CD712AB8()
{
}

void sub_1CD712B3C()
{
}

void sub_1CD712BC0()
{
}

void sub_1CD712C44()
{
}

void sub_1CD712CC8()
{
}

void sub_1CD712D70()
{
}

void sub_1CD712DF8()
{
}

void sub_1CD712E80()
{
}

void sub_1CD712F08()
{
}

void sub_1CD712F90()
{
}

void sub_1CD713018()
{
}

void sub_1CD7130A0()
{
}

void sub_1CD713128()
{
}

void sub_1CD7131B0()
{
}

void sub_1CD713238()
{
}

void sub_1CD7132C0()
{
}

void sub_1CD713348()
{
}

void sub_1CD7133D0()
{
}

void sub_1CD713458()
{
}

void sub_1CD7134E0()
{
}

void sub_1CD713568()
{
}

void sub_1CD7135F0()
{
}

void sub_1CD713678()
{
}

void sub_1CD713700()
{
}

void sub_1CD713788()
{
}

void sub_1CD713810()
{
}

void sub_1CD713898()
{
}

void sub_1CD713920()
{
}

void sub_1CD7139A8()
{
}

void sub_1CD713A30()
{
}

void sub_1CD713AB8()
{
}

void sub_1CD713B40()
{
}

void sub_1CD713BC8()
{
}

void sub_1CD713C8C()
{
}

void sub_1CD713D10()
{
}

void sub_1CD713D94()
{
}

void sub_1CD713E18()
{
}

void sub_1CD713EB8()
{
}

void sub_1CD713F44()
{
}

void sub_1CD713FC8()
{
}

void sub_1CD71404C()
{
}

void sub_1CD71420C()
{
}

void sub_1CD714290()
{
}

void sub_1CD71432C()
{
  sub_1CCCC1134();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  sub_1CCCC111C();
}

void sub_1CD71441C()
{
}

void sub_1CD7144A0()
{
}

void sub_1CD714524()
{
}

void sub_1CD7145AC()
{
}

void sub_1CD714630()
{
}

void sub_1CD7146BC()
{
}

void sub_1CD714748()
{
}

void sub_1CD7147CC()
{
}

void sub_1CD714850()
{
}

void sub_1CD7148D4()
{
}

void sub_1CD714958()
{
}

void sub_1CD7149DC()
{
}

void sub_1CD714A60()
{
}

void sub_1CD714AE4()
{
}

void sub_1CD714B68()
{
}

void sub_1CD714C90()
{
}

void sub_1CD714D14()
{
}

void sub_1CD714D98()
{
}

void sub_1CD714E1C()
{
}

void sub_1CD714EAC()
{
}

void sub_1CD714F38()
{
}

void sub_1CD714FC4()
{
}

void sub_1CD715064()
{
}

void sub_1CD715104()
{
}

void sub_1CD7151BC()
{
}

void sub_1CD715248()
{
  sub_1CCCC1134();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD71533C()
{
}

void sub_1CD7153D4()
{
  sub_1CCCC13A8();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_1CCCC104C();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC111C();
}

void sub_1CD7154E4()
{
  sub_1CCCC1134();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_1CCCC104C();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC111C();
}

void sub_1CD715620(uint64_t a1)
{
}

void sub_1CD7156A8(uint64_t a1)
{
}

void sub_1CD715730(uint64_t a1)
{
}

void sub_1CD7157D0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715868()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715900()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715998()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715A30()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715AC8()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715B60()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715BF8()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715C90()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715D28()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715DC0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715E58()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715EF0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD715F8C()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1104();
}

void sub_1CD716040()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC12B0();
}

void sub_1CD716100()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD71619C()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD716238()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD7162D0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1104();
}

void sub_1CD716384()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1104();
}

void sub_1CD716430()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1010();
}

void sub_1CD7164D0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1010();
}

void sub_1CD716570()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1010();
}

void sub_1CD716610()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1010();
}

void sub_1CD7166B0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1010();
}

void sub_1CD716750()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD7167E8()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD716880()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD716918()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD7169B0()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC0F74();
}

void sub_1CD716A48()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1104();
}

void sub_1CD716AF8()
{
  sub_1CCCC1034();
  if (!v4 & v3) {
    sub_1CCCC10C8(v1, v2);
  }
  else {
    *(_DWORD *)(v0 + 64) = v2;
  }
  sub_1CCCC1104();
}

void sub_1CD716BAC(uint64_t a1)
{
}

uint64_t *llvm::PassBuilder::crossRegisterProxies(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10 = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
  if (!sub_1CC91FFC0(a5, &v10)[1]) {
    operator new();
  }
  uint64_t v10 = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Key;
  if (!sub_1CC91FFC0(a5, &v10)[1]) {
    operator new();
  }
  uint64_t v10 = &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Key;
  if (!sub_1CD71B394(a4, (uint64_t *)&v10)[1]) {
    operator new();
  }
  uint64_t v10 = &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::Key;
  if (!sub_1CC6D91C0(a3, &v10)[1]) {
    operator new();
  }
  uint64_t v10 = &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key;
  if (!sub_1CC6D91C0(a3, &v10)[1]) {
    operator new();
  }
  uint64_t v10 = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key;
  if (!sub_1CC6D91C0(a3, &v10)[1]) {
    operator new();
  }
  uint64_t v10 = &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Key;
  uint64_t result = sub_1CCCBAD10(a2, (uint64_t *)&v10);
  if (!result[1]) {
    operator new();
  }
  return result;
}

void llvm::PassBuilder::parsePassPipeline(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  v241[0] = a3;
  v241[1] = a4;
  llvm::PassBuilder::parsePipelineText(a3, a4, (uint64_t)&v238);
  if (!v240 || (long long v9 = v238, (void)v238 == *((void *)&v238 + 1)))
  {
    size_t v243 = (void **)"invalid pipeline '{0}'";
    unint64_t v244 = 22;
    *(void *)&long long v245 = v248;
    *((void *)&v245 + 1) = 1;
    v246 = &unk_1F2617F90;
    size_t v247 = (const char *)v241;
    v248[0] = &v246;
    sub_1CD465B2C((uint64_t)&v243, __p);
    llvm::inconvertibleErrorCode(v59);
    operator new();
  }
  long long v235 = *(_OWORD *)v238;
  unint64_t v11 = *((void *)&v235 + 1);
  uint64_t v10 = v235;
  if (sub_1CCC9EE68(v235, *((unint64_t *)&v235 + 1)))
  {
    if (llvm::Regex::match((uint64_t)&unk_1EBCEF410, (char *)v235, *((uint64_t *)&v235 + 1), 0, 0)) {
      goto LABEL_11;
    }
    while (!sub_1CCCAF058(v10, v11, a1[188], (unint64_t *)*((unsigned int *)a1 + 378)))
    {
      if (sub_1CCCAF560(v10, v11, a1[208], (unint64_t *)*((unsigned int *)a1 + 418)))
      {
        uint64_t v14 = "function";
        uint64_t v15 = 8;
        goto LABEL_7;
      }
      char v234 = 0;
      if ((unint64_t)sub_1CCC9ECD8((_DWORD *)v10, v11, v60, v61) >> 32) {
        goto LABEL_403;
      }
      switch(v11)
      {
        case 0xCuLL:
          if (*(void *)v10 != 0x616C662D706F6F6CLL || *(_DWORD *)(v10 + 8) != 1852142708) {
            goto LABEL_402;
          }
          goto LABEL_403;
        case 0xDuLL:
        case 0xFuLL:
        case 0x11uLL:
        case 0x12uLL:
          goto LABEL_402;
        case 0xEuLL:
          uint64_t v119 = *(void *)(v10 + 6);
          BOOL v120 = *(void *)v10 == 0x6F6C2D706F2D6F6ELL;
          uint64_t v121 = 0x7473656E706F6F6CLL;
          goto LABEL_389;
        case 0x10uLL:
          uint64_t v119 = *(void *)(v10 + 8);
          BOOL v120 = *(void *)v10 == 0x746E692D706F6F6CLL;
          uint64_t v121 = 0x65676E6168637265;
LABEL_389:
          if (!v120 || v119 != v121) {
            goto LABEL_402;
          }
          goto LABEL_403;
        case 0x13uLL:
          if (*(void *)v10 != 0x726E752D706F6F6CLL
            || *(void *)(v10 + 8) != 0x2D646E612D6C6C6FLL
            || *(void *)(v10 + 11) != 0x6D616A2D646E612DLL)
          {
            goto LABEL_402;
          }
          goto LABEL_403;
        default:
          if (v11 == 5 && *(_DWORD *)v10 == 1667853932 && *(unsigned char *)(v10 + 4) == 109)
          {
            size_t v243 = (void **)"function";
            unint64_t v244 = 8;
            size_t v69 = "loop-mssa";
            uint64_t v70 = 9;
LABEL_404:
            *(void *)&long long v250 = v69;
            *((void *)&v250 + 1) = v70;
            long long v251 = v9;
            v252 = v239;
            size_t v239 = 0;
            long long v238 = 0uLL;
            sub_1CCCC0BF8(&v245, (uint64_t)&v250, 1uLL);
            sub_1CCCC0BF8(__p, (uint64_t)&v243, 1uLL);
            long long v238 = *(_OWORD *)__p;
            size_t v239 = v237;
            __p[1] = 0;
            size_t v237 = 0;
            __p[0] = 0;
            if (!v240) {
              char v240 = 1;
            }
LABEL_406:
            v242 = __p;
            sub_1CCCBB47C(&v242);
            v242 = (void **)&v245;
            sub_1CCCBB47C(&v242);
            v242 = (void **)&v251;
            int v16 = &v242;
LABEL_10:
            sub_1CCCBB47C(v16);
            goto LABEL_11;
          }
LABEL_402:
          if (sub_1CCCC0C78(v10, v11, a1[228], *((_DWORD *)a1 + 458)))
          {
LABEL_403:
            size_t v243 = (void **)"function";
            unint64_t v244 = 8;
            size_t v69 = "loop";
            uint64_t v70 = 4;
            goto LABEL_404;
          }
          if (sub_1CCCB2974(v10, v11, (uint64_t)(a1 + 228), (unint64_t *)&v234))
          {
            size_t v243 = (void **)"function";
            unint64_t v244 = 8;
            if (v234) {
              size_t v125 = "loop-mssa";
            }
            else {
              size_t v125 = "loop";
            }
            uint64_t v126 = 9;
            if (!v234) {
              uint64_t v126 = 4;
            }
            *(void *)&long long v250 = v125;
            *((void *)&v250 + 1) = v126;
            long long v251 = v238;
            v252 = v239;
            long long v238 = 0uLL;
            size_t v239 = 0;
            sub_1CCCC0BF8(&v245, (uint64_t)&v250, 1uLL);
            sub_1CCCC0BF8(__p, (uint64_t)&v243, 1uLL);
            long long v238 = *(_OWORD *)__p;
            size_t v239 = v237;
            __p[1] = 0;
            size_t v237 = 0;
            __p[0] = 0;
            if (!v240) {
              char v240 = 1;
            }
            goto LABEL_406;
          }
          uint64_t v127 = *((unsigned int *)a1 + 338);
          if (!v127)
          {
LABEL_420:
            if (*(void *)(v238 + 16) == *(void *)(v238 + 24)) {
              uint64_t v128 = "pass";
            }
            else {
              uint64_t v128 = "pipeline";
            }
            size_t v243 = (void **)"unknown {0} name '{1}'";
            unint64_t v244 = 22;
            *(void *)&long long v245 = v249;
            *((void *)&v245 + 1) = 2;
            v246 = &unk_1F2639CE0;
            size_t v247 = v128;
            v248[0] = &unk_1F2617F90;
            v248[1] = &v235;
            v249[0] = &v246;
            v249[1] = v248;
            sub_1CD465B2C((uint64_t)&v243, &v250);
            __p[0] = (void *)llvm::inconvertibleErrorCode(v129);
            __p[1] = v130;
            sub_1CCC9EDCC();
          }
          a1 = (void *)(a1[168] + 24);
          uint64_t v10 = 32 * v127;
          unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL;
          while (1)
          {
            size_t v243 = (void **)v238;
            unint64_t v244 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v238 + 1) - v238) >> 3);
            if (!*a1) {
              break;
            }
            if ((*(unsigned int (**)(void, uint64_t, void ***))(*(void *)*a1 + 48))(*a1, a2, &v243)) {
              goto LABEL_15;
            }
            a1 += 4;
            v10 -= 32;
            if (!v10) {
              goto LABEL_420;
            }
          }
          sub_1CB920400();
LABEL_782:
          switch(v11)
          {
            case 0x1CuLL:
              if (*(void *)v10 == 0x6F6E2D7069727473
                && *(void *)(v10 + 8) == 0x626174656E696C6ELL
                && *(void *)(v10 + 16) == 0x67756265642D656CLL
                && *(_DWORD *)(v10 + 24) == 1868983913)
              {
                goto LABEL_11;
              }
              BOOL v221 = *(void *)v10 == 0x69746568746E7973 && *(void *)(v10 + 8) == 0x73746E756F632D63;
              BOOL v222 = v221 && *(void *)(v10 + 16) == 0x616761706F72702DLL;
              if (v222 && *(_DWORD *)(v10 + 24) == 1852795252) {
                goto LABEL_11;
              }
              break;
            case 6uLL:
              if (*(_DWORD *)v10 == 1769104758 && *(_WORD *)(v10 + 4) == 31078) {
                goto LABEL_11;
              }
              break;
            case 0x12uLL:
              BOOL v225 = *(void *)v10 == 0x6F7270656C6F6877 && *(void *)(v10 + 8) == 0x697665646D617267;
              if (v225 && *(_WORD *)(v10 + 16) == 29810) {
                goto LABEL_11;
              }
              break;
          }
LABEL_686:
          if (v233)
          {
            if (*(_DWORD *)v10 == 1634952804 && *(unsigned char *)(v10 + 4) == 110) {
              goto LABEL_11;
            }
          }
          if (v11 == 11 && *(void *)v10 == 0x646F6D2D6E61736DLL && *(void *)(v10 + 3) == 0x656C75646F6D2D6ELL) {
            goto LABEL_11;
          }
          if (v232)
          {
            if (*(void *)v10 == 0x692D656C75646F6DLL && *(void *)(v10 + 5) == 0x656E696C6E692D65) {
              goto LABEL_11;
            }
          }
          if (v11 == 11 && *(void *)v10 == 0x646F6D2D6E617374 && *(void *)(v10 + 3) == 0x656C75646F6D2D6ELL) {
            goto LABEL_11;
          }
          if (v232)
          {
            if (*(void *)v10 == 0x6D2D766F636E6173 && *(void *)(v10 + 5) == 0x656C75646F6D2D76) {
              goto LABEL_11;
            }
          }
          if (v11 == 14 && *(void *)v10 == 0x2D666F72706D656DLL && *(void *)(v10 + 6) == 0x656C75646F6D2D66) {
            goto LABEL_11;
          }
          if (v27)
          {
            if (*(void *)v10 == 0x632D6E6F73696F70 && *(void *)(v10 + 7) == 0x676E696B63656863) {
              goto LABEL_11;
            }
          }
          if (v5)
          {
            BOOL v207 = *(void *)v10 == 0x702D6F6475657370 && *(void *)(v10 + 8) == 0x6470752D65626F72;
            if (v207 && *(void *)(v10 + 11) == 0x6574616470752D65) {
              goto LABEL_11;
            }
          }
          if (sub_1CCC9F0D4((char *)v10, v11, "loop-extract", 0xCuLL)
            || sub_1CCC9F0D4((char *)v10, v11, "hwasan", 6uLL)
            || sub_1CCC9F0D4((char *)v10, v11, "asan-module", 0xBuLL)
            || (sub_1CCCC0B4C(v10, v11, a1[148], *((_DWORD *)a1 + 298)) & 1) != 0)
          {
            goto LABEL_11;
          }
          break;
      }
    }
    uint64_t v14 = "cgscc";
    uint64_t v15 = 5;
LABEL_7:
    size_t v243 = (void **)v14;
    unint64_t v244 = v15;
    long long v245 = v9;
    v246 = v239;
    size_t v239 = 0;
    long long v238 = 0uLL;
    sub_1CCCC0BF8(&v250, (uint64_t)&v243, 1uLL);
    long long v238 = v250;
    size_t v239 = (void *)v251;
    *(void *)&long long v251 = 0;
    long long v250 = 0uLL;
    if (!v240) {
      char v240 = 1;
    }
    __p[0] = &v250;
    sub_1CCCBB47C((void ***)__p);
    __p[0] = &v245;
    int v16 = (void ***)__p;
    goto LABEL_10;
  }
  switch(*((void *)&v235 + 1))
  {
    case 6:
      if (*(_DWORD *)v235 == 1969516397 && *(_WORD *)(v235 + 4) == 25964) {
        goto LABEL_11;
      }
      goto LABEL_24;
    case 0x13:
      if (*(void *)v235 == 0x6E6F6974636E7566
        && *(void *)(v235 + 8) == 0x692D72656761653CLL
        && *(void *)(v235 + 11) == 0x3E766E692D726567)
      {
        goto LABEL_11;
      }
      int v233 = 0;
      int v20 = 0;
      int v5 = 1;
      break;
    case 8:
      if (*(void *)v235 == 0x6E6F6974636E7566) {
        goto LABEL_11;
      }
      int v5 = 0;
      int v233 = 0;
      int v20 = 1;
      break;
    case 5:
      if (*(_DWORD *)v235 == 1668507491 && *(unsigned char *)(v235 + 4) == 99) {
        goto LABEL_11;
      }
      int v5 = 0;
      int v20 = 0;
      int v233 = 1;
      break;
    default:
LABEL_24:
      int v5 = 0;
      int v233 = 0;
      int v20 = 0;
      break;
  }
  if ((unint64_t)sub_1CCC9ECD8((_DWORD *)v235, *((unint64_t *)&v235 + 1), v12, (unint64_t *)v13) >> 32) {
    goto LABEL_11;
  }
  if (*((void *)&v235 + 1) != 18)
  {
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    uint64_t v13 = 0;
    switch(*((void *)&v235 + 1))
    {
      case 0xCLL:
        if (*(void *)v235 == 0x3C65726975716572 && *(_DWORD *)(v235 + 8) == 1046963052) {
          goto LABEL_11;
        }
        int v25 = 0;
        int v26 = 0;
        int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        uint64_t v13 = 0;
        int v30 = 1;
        goto LABEL_42;
      case 0xFLL:
        if (*(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 7) == 0x3E67636C3C657461) {
          goto LABEL_11;
        }
        if (*(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 7) == 0x3E7966697265763CLL) {
          goto LABEL_11;
        }
        int v25 = 0;
        int v26 = 0;
        int v28 = 0;
        int v29 = 0;
        int v30 = 0;
        uint64_t v13 = 0;
        int v27 = 1;
        goto LABEL_42;
      case 0x15:
        if (*(void *)v235 == 0x6164696C61766E69
          && *(void *)(v235 + 8) == 0x676C6C61633C6574
          && *(void *)(v235 + 13) == 0x3E68706172676C6CLL)
        {
          goto LABEL_11;
        }
        BOOL v75 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x6F6D2D706F2D6F6ELL;
        if (v75 && *(void *)(v235 + 13) == 0x3E656C75646F6D2DLL) {
          goto LABEL_11;
        }
        BOOL v77 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x61732D6B63617473;
        if (v77 && *(void *)(v235 + 13) == 0x3E7974656661732DLL) {
          goto LABEL_11;
        }
        int v25 = 0;
        int v26 = 0;
        int v27 = 0;
        int v29 = 0;
        int v30 = 0;
        uint64_t v13 = 0;
        int v28 = 1;
        goto LABEL_42;
      case 0x16:
        if (*(void *)v235 == 0x3C65726975716572
          && *(void *)(v235 + 8) == 0x6C696D69732D7269
          && *(void *)(v235 + 14) == 0x3E79746972616C69)
        {
          goto LABEL_11;
        }
        int v26 = 0;
        int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        int v30 = 0;
        uint64_t v13 = 0;
        int v25 = 1;
        goto LABEL_42;
      case 0x17:
        if (*(void *)v235 == 0x3C65726975716572
          && *(void *)(v235 + 8) == 0x732D656C75646F6DLL
          && *(void *)(v235 + 15) == 0x3E7972616D6D7573)
        {
          goto LABEL_11;
        }
        BOOL v83 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x612D656E696C6E69;
        if (v83 && *(void *)(v235 + 15) == 0x3E726F7369766461) {
          goto LABEL_11;
        }
        int v25 = 0;
        int v26 = 0;
        int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        int v30 = 0;
        uint64_t v13 = 1;
        goto LABEL_42;
      case 0x18:
        if (*(void *)v235 == 0x3C65726975716572
          && *(void *)(v235 + 8) == 0x6E6F6974636E7566
          && *(void *)(v235 + 16) == 0x3E7370756F72672DLL)
        {
          goto LABEL_11;
        }
        BOOL v87 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x706F2D6F6E3C6574;
        if (v87 && *(void *)(v235 + 16) == 0x3E656C75646F6D2DLL) {
          goto LABEL_11;
        }
        BOOL v89 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x2D656C69666F7270;
        if (v89 && *(void *)(v235 + 16) == 0x3E7972616D6D7573) {
          goto LABEL_11;
        }
        BOOL v91 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x6B636174733C6574;
        if (v91 && *(void *)(v235 + 16) == 0x3E7974656661732DLL) {
          goto LABEL_11;
        }
        BOOL v93 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x6F6C672D6E617361;
        if (v93 && *(void *)(v235 + 16) == 0x3E646D2D736C6162) {
          goto LABEL_11;
        }
        int v25 = 0;
        int v26 = 0;
        int v27 = 0;
        int v28 = 0;
        int v30 = 0;
        uint64_t v13 = 0;
        int v29 = 1;
        goto LABEL_42;
      case 0x19:
        if (*(void *)v235 != 0x6164696C61766E69
          || *(void *)(v235 + 8) != 0x69732D72693C6574
          || *(void *)(v235 + 16) != 0x79746972616C696DLL
          || *(unsigned char *)(v235 + 24) != 62)
        {
          goto LABEL_41;
        }
        goto LABEL_11;
      case 0x1ALL:
        if (*(void *)v235 == 0x6164696C61766E69
          && *(void *)(v235 + 8) == 0x6C75646F6D3C6574
          && *(void *)(v235 + 16) == 0x72616D6D75732D65
          && *(_WORD *)(v235 + 24) == 15993)
        {
          goto LABEL_11;
        }
        BOOL v101 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x6E696C6E693C6574;
        BOOL v102 = v101 && *(void *)(v235 + 16) == 0x6F73697664612D65;
        if (v102 && *(_WORD *)(v235 + 24) == 15986) {
          goto LABEL_11;
        }
        int v25 = 0;
        int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        int v30 = 0;
        uint64_t v13 = 0;
        int v26 = 1;
        goto LABEL_42;
      case 0x1BLL:
        if (*(void *)v235 != 0x6164696C61766E69
          || *(void *)(v235 + 8) != 0x74636E75663C6574
          || *(void *)(v235 + 16) != 0x756F72672D6E6F69
          || *(void *)(v235 + 19) != 0x3E7370756F72672DLL)
        {
          BOOL v107 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x69666F72703C6574;
          BOOL v108 = v107 && *(void *)(v235 + 16) == 0x616D6D75732D656CLL;
          if (!v108 || *(void *)(v235 + 19) != 0x3E7972616D6D7573)
          {
            BOOL v110 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x2D6E6173613C6574;
            BOOL v111 = v110 && *(void *)(v235 + 16) == 0x2D736C61626F6C67;
            if (!v111 || *(void *)(v235 + 19) != 0x3E646D2D736C6162) {
              goto LABEL_41;
            }
          }
        }
        goto LABEL_11;
      case 0x1DLL:
        uint64_t v113 = *(void *)(v235 + 16);
        uint64_t v114 = *(void *)(v235 + 21);
        BOOL v115 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x736E692D73736170;
        uint64_t v116 = 0x61746E656D757274;
        goto LABEL_378;
      case 0x20:
        uint64_t v113 = *(void *)(v235 + 16);
        uint64_t v114 = *(void *)(v235 + 24);
        BOOL v115 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x2D737361703C6574;
        uint64_t v116 = 0x656D757274736E69;
LABEL_378:
        if (!v115 || v113 != v116 || v114 != 0x3E6E6F697461746ELL) {
          goto LABEL_41;
        }
        goto LABEL_11;
      default:
        goto LABEL_42;
    }
  }
  BOOL v21 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x706172676C6C6163;
  if (v21 && *(_WORD *)(v235 + 16) == 15976) {
    goto LABEL_11;
  }
  BOOL v23 = *(void *)v235 == 0x6164696C61766E69 && *(void *)(v235 + 8) == 0x66697265763C6574;
  if (v23 && *(_WORD *)(v235 + 16) == 15993) {
    goto LABEL_11;
  }
LABEL_41:
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
  int v28 = 0;
  int v29 = 0;
  int v30 = 0;
  uint64_t v13 = 0;
LABEL_42:
  if (v5)
  {
    BOOL v31 = *(void *)v235 == 0x3C65726975716572 && *(void *)(v235 + 8) == 0x2D736C61626F6C67;
    if (v31 && *(void *)(v235 + 11) == 0x3E61612D736C6162) {
      goto LABEL_11;
    }
  }
  if (v25)
  {
    if (*(void *)v235 == 0x6164696C61766E69
      && *(void *)(v235 + 8) == 0x61626F6C673C6574
      && *(void *)(v235 + 14) == 0x3E61612D736C6162)
    {
      goto LABEL_11;
    }
    goto LABEL_58;
  }
  if (*((void *)&v235 + 1) == 10)
  {
    if (*(void *)v235 == 0x7475626972747461 && *(_WORD *)(v235 + 8) == 29295) {
      goto LABEL_11;
    }
    int v232 = 0;
    int v35 = 1;
  }
  else
  {
    if (*((void *)&v235 + 1) != 13)
    {
LABEL_58:
      int v35 = 0;
      int v232 = 0;
      goto LABEL_59;
    }
    if (*(void *)v235 == 0x692D737961776C61 && *(void *)(v235 + 5) == 0x656E696C6E692D73) {
      goto LABEL_11;
    }
    int v35 = 0;
    int v232 = 1;
  }
LABEL_59:
  if (!v5
    || (*(void *)v235 == 0x697461746F6E6E61 ? (BOOL v36 = *(void *)(v235 + 8) == 0x646174656D326E6FLL) : (BOOL v36 = 0),
        v36 ? (BOOL v37 = *(void *)(v235 + 11) == 0x617461646174656DLL) : (BOOL v37 = 0),
        !v37))
  {
    if (!v35
      || (*(void *)v235 == 0x6F2D706D6E65706FLL ? (BOOL v38 = *(unsigned __int16 *)(v235 + 8) == 29808) : (BOOL v38 = 0), !v38))
    {
      if (!v29
        || (*(void *)v235 == 0x762D64656C6C6163 ? (BOOL v39 = *(void *)(v235 + 8) == 0x6F72702D65756C61) : (BOOL v39 = 0),
            v39 ? (BOOL v40 = *(void *)(v235 + 16) == 0x6E6F697461676170) : (BOOL v40 = 0),
            !v40))
      {
        if (*((void *)&v235 + 1) != 20
          || (*(void *)v235 == 0x6163696E6F6E6163
            ? (BOOL v41 = *(void *)(v235 + 8) == 0x696C612D657A696CLL)
            : (BOOL v41 = 0),
              v41 ? (BOOL v42 = *(_DWORD *)(v235 + 16) == 1936028513) : (BOOL v42 = 0),
              !v42))
        {
          if (!v35
            || (*(void *)v235 == 0x69666F72702D6763 ? (BOOL v43 = *(unsigned __int16 *)(v235 + 8) == 25964) : (BOOL v43 = 0),
                !v43))
          {
            if (*((void *)&v235 + 1) != 14
              || (*(void *)v235 == 0x65642D6B63656863
                ? (BOOL v44 = *(void *)(v235 + 6) == 0x7966696775626564)
                : (BOOL v44 = 0),
                  !v44))
            {
              if (!v35
                || (*(void *)v235 == 0x72656D74736E6F63
                  ? (BOOL v45 = *(unsigned __int16 *)(v235 + 8) == 25959)
                  : (BOOL v45 = 0),
                    !v45
                 && (*(void *)v235 == 0x7261652D6F726F63
                   ? (BOOL v46 = *(unsigned __int16 *)(v235 + 8) == 31084)
                   : (BOOL v46 = 0),
                     !v46)))
              {
                if (!v232
                  || (*(void *)v235 == 0x73642D73736F7263
                    ? (BOOL v47 = *(void *)(v235 + 5) == 0x6966632D6F73642DLL)
                    : (BOOL v47 = 0),
                      !v47))
                {
                  if (*((void *)&v235 + 1) != 11
                    || (*(void *)v235 == 0x6567726164616564
                      ? (BOOL v48 = *(void *)(v235 + 3) == 0x6D696C6567726164)
                      : (BOOL v48 = 0),
                        !v48))
                  {
                    if (!v20 || *(void *)v235 != 0x7966696775626564)
                    {
                      if (!v232
                        || (*(void *)v235 == 0x6C6C61632D746F64
                          ? (BOOL v49 = *(void *)(v235 + 5) == 0x68706172676C6C61)
                          : (BOOL v49 = 0),
                            !v49))
                      {
                        if (*((void *)&v235 + 1) == 17)
                        {
                          if (*(void *)v235 == 0x6176612D6D696C65
                            && *(void *)(v235 + 8) == 0x72657478652D6C69
                            && *(unsigned char *)(v235 + 16) == 110)
                          {
                            goto LABEL_11;
                          }
                        }
                        else if (*((void *)&v235 + 1) == 14 {
                               && *(void *)v235 == 0x2D74636172747865
                        }
                               && *(void *)(v235 + 6) == 0x736B636F6C622D74)
                        {
                          goto LABEL_11;
                        }
                        if (!v35
                          || (*(void *)v235 == 0x7474616563726F66
                            ? (BOOL v52 = *(unsigned __int16 *)(v235 + 8) == 29554)
                            : (BOOL v52 = 0),
                              !v52))
                        {
                          if (!v27
                            || (*(void *)v235 == 0x6E6F6974636E7566
                              ? (BOOL v53 = *(void *)(v235 + 7) == 0x74726F706D692D6ELL)
                              : (BOOL v53 = 0),
                                !v53))
                          {
                            if (!v13
                              || (*(void *)v235 == 0x6E6F6974636E7566
                                ? (BOOL v54 = *(void *)(v235 + 8) == 0x6C6169636570732DLL)
                                : (BOOL v54 = 0),
                                  v54 ? (BOOL v55 = *(void *)(v235 + 15) == 0x6E6F6974617A696CLL) : (BOOL v55 = 0),
                                  !v55))
                            {
                              if (*((void *)&v235 + 1) == 9)
                              {
                                if (*(void *)v235 == 0x63646C61626F6C67 && *(unsigned char *)(v235 + 8) == 101) {
                                  goto LABEL_11;
                                }
                                if (*(void *)v235 == 0x706F6C61626F6C67 && *(unsigned char *)(v235 + 8) == 116) {
                                  goto LABEL_11;
                                }
                              }
                              else if (*((void *)&v235 + 1) == 11 {
                                     && *(void *)v235 == 0x70736C61626F6C67
                              }
                                     && *(void *)(v235 + 3) == 0x74696C70736C6162)
                              {
                                goto LABEL_11;
                              }
                              if (!v30
                                || (*(void *)v235 == 0x73646C6F63746F68
                                  ? (BOOL v133 = *(_DWORD *)(v235 + 8) == 1953066096)
                                  : (BOOL v133 = 0),
                                    !v133))
                              {
                                if (!v35
                                  || (*(void *)v235 == 0x7474617265666E69
                                    ? (BOOL v134 = *(unsigned __int16 *)(v235 + 8) == 29554)
                                    : (BOOL v134 = 0),
                                      !v134))
                                {
                                  if (!v27
                                    || (*(void *)v235 == 0x2D72656E696C6E69
                                      ? (BOOL v135 = *(void *)(v235 + 7) == 0x726570706172772DLL)
                                      : (BOOL v135 = 0),
                                        !v135))
                                  {
                                    if (!v28
                                      || (*(void *)v235 == 0x6E693C746E697270
                                        ? (BOOL v136 = *(void *)(v235 + 8) == 0x7664612D656E696CLL)
                                        : (BOOL v136 = 0),
                                          v136 ? (BOOL v137 = *(void *)(v235 + 13) == 0x3E726F7369766461) : (BOOL v137 = 0),
                                          !v137))
                                    {
                                      if (*((void *)&v235 + 1) != 34) {
                                        goto LABEL_469;
                                      }
                                      int v229 = v26;
                                      int v230 = v30;
                                      int v231 = v27;
                                      int v138 = v28;
                                      int v227 = v35;
                                      unsigned int v228 = v13;
                                      int v139 = memcmp((const void *)v235, "inliner-wrapper-no-mandatory-first", 0x22uLL);
                                      int v35 = v227;
                                      uint64_t v13 = v228;
                                      int v26 = v229;
                                      int v30 = v230;
                                      int v28 = v138;
                                      int v27 = v231;
                                      if (v139)
                                      {
LABEL_469:
                                        if (!v28
                                          || (*(void *)v235 == 0x672D747265736E69
                                            ? (BOOL v140 = *(void *)(v235 + 8) == 0x666F72702D766F63)
                                            : (BOOL v140 = 0),
                                              v140
                                            ? (BOOL v141 = *(void *)(v235 + 13) == 0x676E696C69666F72)
                                            : (BOOL v141 = 0),
                                              !v141))
                                        {
                                          switch(*((void *)&v235 + 1))
                                          {
                                            case 0xELL:
                                              uint64_t v142 = *(void *)(v235 + 6);
                                              BOOL v143 = *(void *)v235 == 0x64726F7274736E69;
                                              uint64_t v144 = 0x656C696672656472;
                                              break;
                                            case 9:
                                              if (*(void *)v235 == 0x6F72707274736E69
                                                && *(unsigned char *)(v235 + 8) == 102)
                                              {
                                                goto LABEL_11;
                                              }
LABEL_476:
                                              if (v27)
                                              {
                                                if (*(void *)v235 == 0x6164696C61766E69
                                                  && *(void *)(v235 + 7) == 0x3E6C6C613C657461)
                                                {
                                                  goto LABEL_11;
                                                }
                                              }
                                              if (*((void *)&v235 + 1) == 6
                                                && *(_DWORD *)v235 == 1668509801
                                                && *(_WORD *)(v235 + 4) == 28771)
                                              {
                                                goto LABEL_11;
                                              }
                                              if (v35)
                                              {
                                                if (*(void *)v235 == 0x6E696C74756F7269
                                                  && *(_WORD *)(v235 + 8) == 29285)
                                                {
                                                  goto LABEL_11;
                                                }
                                              }
                                              if (v5)
                                              {
                                                BOOL v149 = *(void *)v235 == 0x72692D746E697270
                                                    && *(void *)(v235 + 8) == 0x72616C696D69732DLL;
                                                if (v149 && *(void *)(v235 + 11) == 0x79746972616C696DLL) {
                                                  goto LABEL_11;
                                                }
                                              }
                                              switch(*((void *)&v235 + 1))
                                              {
                                                case 0x12:
                                                  BOOL v152 = *(void *)v235 == 0x6C672D7265776F6CLL
                                                      && *(void *)(v235 + 8) == 0x6F74642D6C61626FLL
                                                      && *(_WORD *)(v235 + 16) == 29554;
                                                  goto LABEL_506;
                                                case 0xELL:
                                                  uint64_t v210 = *(void *)(v235 + 6);
                                                  BOOL v211 = *(void *)v235 == 0x7079747265776F6CLL;
                                                  uint64_t v212 = 0x7374736574657079;
                                                  break;
                                                case 0xBLL:
                                                  uint64_t v210 = *(void *)(v235 + 3);
                                                  BOOL v211 = *(void *)v235 == 0x616E65726174656DLL;
                                                  uint64_t v212 = 0x72656D616E657261;
                                                  break;
                                                case 9:
                                                  BOOL v152 = *(void *)v235 == 0x6E7566656772656DLL
                                                      && *(unsigned char *)(v235 + 8) == 99;
LABEL_506:
                                                  int v153 = v27;
                                                  int v154 = v28;
                                                  int v155 = v30;
                                                  if (v152) {
                                                    goto LABEL_11;
                                                  }
LABEL_507:
                                                  if (!v155
                                                    || (*(void *)v235 == 0x6F6D2D706F2D6F6ELL
                                                      ? (BOOL v156 = *(_DWORD *)(v235 + 8) == 1701606756)
                                                      : (BOOL v156 = 0),
                                                        !v156))
                                                  {
                                                    if (!v153
                                                      || (*(void *)v235 == 0x6372612D636A626FLL
                                                        ? (BOOL v157 = *(void *)(v235 + 7) == 0x6D696C6570612D63)
                                                        : (BOOL v157 = 0),
                                                          !v157
                                                       && (*(void *)v235 == 0x2D6C616974726170
                                                         ? (BOOL v158 = *(void *)(v235 + 7) == 0x72656E696C6E692DLL)
                                                         : (BOOL v158 = 0),
                                                           !v158)))
                                                    {
                                                      if (*((void *)&v235 + 1) != 14
                                                        || (*(void *)v235 == 0x6C6163692D6F6770
                                                          ? (BOOL v159 = *(void *)(v235 + 6) == 0x6D6F72702D6C6C61)
                                                          : (BOOL v159 = 0),
                                                            !v159))
                                                      {
                                                        if (!v232
                                                          || (*(void *)v235 == 0x74736E692D6F6770
                                                            ? (BOOL v160 = *(void *)(v235 + 5) == 0x6E65672D7274736ELL)
                                                            : (BOOL v160 = 0),
                                                              !v160
                                                           && (*(void *)v235 == 0x74736E692D6F6770
                                                             ? (BOOL v161 = *(void *)(v235 + 5) == 0x6573752D7274736ELL)
                                                             : (BOOL v161 = 0),
                                                               !v161)))
                                                        {
                                                          if (!v154
                                                            || (*(void *)v235 == 0x75662D746E697270
                                                              ? (BOOL v162 = *(void *)(v235 + 8) == 0x672D6E6F6974636ELL)
                                                              : (BOOL v162 = 0),
                                                                v162
                                                              ? (BOOL v163 = *(void *)(v235 + 13) == 0x7370756F72672D6ELL)
                                                              : (BOOL v163 = 0),
                                                                !v163
                                                             && (*(void *)v235 == 0x72702D746E697270
                                                               ? (BOOL v164 = *(void *)(v235 + 8) == 0x75732D656C69666FLL)
                                                               : (BOOL v164 = 0),
                                                                 v164
                                                               ? (BOOL v165 = *(void *)(v235 + 13) == 0x7972616D6D75732DLL)
                                                               : (BOOL v165 = 0),
                                                                 !v165)))
                                                          {
                                                            if (!v153
                                                              || (*(void *)v235 == 0x61632D746E697270
                                                                ? (BOOL v166 = *(void *)(v235 + 7) == 0x68706172676C6C61)
                                                                : (BOOL v166 = 0),
                                                                  !v166))
                                                            {
                                                              if (!v233
                                                                || (*(_DWORD *)v235 == 1852404336
                                                                  ? (BOOL v167 = *(unsigned char *)(v235 + 4) == 116)
                                                                  : (BOOL v167 = 0),
                                                                    !v167))
                                                              {
                                                                if (*((void *)&v235 + 1) != 9
                                                                  || (*(void *)v235 == 0x636C2D746E697270
                                                                    ? (BOOL v168 = *(unsigned char *)(v235 + 8) == 103)
                                                                    : (BOOL v168 = 0),
                                                                      !v168))
                                                                {
                                                                  if (!v232
                                                                    || (*(void *)v235 == 0x636C2D746E697270
                                                                      ? (BOOL v169 = *(void *)(v235 + 5) == 0x746F642D67636C2DLL)
                                                                      : (BOOL v169 = 0),
                                                                        !v169))
                                                                  {
                                                                    if (*((void *)&v235 + 1) == 31)
                                                                    {
                                                                      BOOL v172 = *(void *)v235 == 0x756D2D746E697270
                                                                          && *(void *)(v235 + 8) == 0x78652D65622D7473
                                                                          && *(void *)(v235 + 16) == 0x632D646574756365
                                                                          && *(void *)(v235 + 23) == 0x73747865746E6F63;
                                                                      int v173 = v27;
                                                                      if (v172) {
                                                                        goto LABEL_11;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      int v173 = v27;
                                                                      if (*((void *)&v235 + 1) == 18)
                                                                      {
                                                                        BOOL v215 = *(void *)v235 == 0x74732D746E697270
                                                                            && *(void *)(v235 + 8) == 0x656661732D6B6361;
                                                                        if (v215 && *(_WORD *)(v235 + 16) == 31092) {
                                                                          goto LABEL_11;
                                                                        }
                                                                      }
                                                                    }
                                                                    if (!v13
                                                                      || (*(void *)v235 == 0x6F6D3C746E697270
                                                                        ? (BOOL v174 = *(void *)(v235 + 8) == 0x6265642D656C7564)
                                                                        : (BOOL v174 = 0),
                                                                          v174
                                                                        ? (BOOL v175 = *(void *)(v235 + 15) == 0x3E6F666E69677562)
                                                                        : (BOOL v175 = 0),
                                                                          !v175))
                                                                    {
                                                                      if (!v5
                                                                        || (*(void *)v235 == 0x7475706D6F636572
                                                                          ? (BOOL v176 = *(void *)(v235 + 8) == 0x6C61626F6C672D65)
                                                                          : (BOOL v176 = 0),
                                                                            v176
                                                                          ? (BOOL v177 = *(void *)(v235 + 11) == 0x6161736C61626F6CLL)
                                                                          : (BOOL v177 = 0),
                                                                            !v177))
                                                                      {
                                                                        if (!v26
                                                                          || (*(void *)v235 == 0x6B6F6F6C2D6C6572
                                                                            ? (BOOL v178 = *(void *)(v235 + 8) == 0x656C6261742D7075)
                                                                            : (BOOL v178 = 0),
                                                                              v178
                                                                            ? (BOOL v179 = *(void *)(v235 + 16) == 0x747265766E6F632DLL)
                                                                            : (BOOL v179 = 0),
                                                                              v179
                                                                            ? (BOOL v180 = *(unsigned __int16 *)(v235 + 24) == 29285)
                                                                            : (BOOL v180 = 0),
                                                                              !v180
                                                                           && (*(void *)v235 == 0x2D65746972776572
                                                                             ? (BOOL v181 = *(void *)(v235 + 8) == 0x696F706574617473)
                                                                             : (BOOL v181 = 0),
                                                                               v181
                                                                             ? (BOOL v182 = *(void *)(v235 + 16) == 0x2D726F662D73746ELL)
                                                                             : (BOOL v182 = 0),
                                                                               v182
                                                                             ? (BOOL v183 = *(unsigned __int16 *)(v235 + 24) == 25447)
                                                                             : (BOOL v183 = 0),
                                                                               !v183)))
                                                                        {
                                                                          if (!v173
                                                                            || (*(void *)v235 == 0x2D65746972776572
                                                                              ? (BOOL v184 = *(void *)(v235 + 7) == 0x736C6F626D79732DLL)
                                                                              : (BOOL v184 = 0),
                                                                                !v184))
                                                                          {
                                                                            if (*((void *)&v235 + 1) == 18)
                                                                            {
                                                                              if (*(void *)v235 == 0x636E75662D6F7072
                                                                                && *(void *)(v235 + 8) == 0x7474612D6E6F6974
                                                                                && *(_WORD *)(v235 + 16) == 29554)
                                                                              {
                                                                                goto LABEL_11;
                                                                              }
                                                                            }
                                                                            else if (*((void *)&v235 + 1) == 14 {
                                                                                   && *(void *)v235 == 0x702D656C706D6173
                                                                            }
                                                                                   && *(void *)(v235 + 6) == 0x656C69666F72702DLL)
                                                                            {
                                                                              goto LABEL_11;
                                                                            }
                                                                            if (!v28
                                                                              || (*(void *)v235 == 0x6D2D7A6F2D636373
                                                                                ? (BOOL v187 = *(void *)(v235 + 8) == 0x6E692D656C75646FLL)
                                                                                : (BOOL v187 = 0),
                                                                                  v187
                                                                                ? (BOOL v188 = *(void *)(v235 + 13) == 0x72656E696C6E692DLL)
                                                                                : (BOOL v188 = 0),
                                                                                  !v188))
                                                                            {
                                                                              if (!v233
                                                                                || (*(_DWORD *)v235 == 1769108595
                                                                                  ? (BOOL v189 = *(unsigned char *)(v235 + 4) == 112)
                                                                                  : (BOOL v189 = 0),
                                                                                    !v189))
                                                                              {
                                                                                if (!v28
                                                                                  || (*(void *)v235 == 0x65642D7069727473
                                                                                    ? (BOOL v190 = *(void *)(v235 + 8) == 0x67756265642D6461)
                                                                                    : (BOOL v190 = 0),
                                                                                      v190
                                                                                    ? (BOOL v191 = *(void *)(v235 + 13) == 0x6F666E692D677562)
                                                                                    : (BOOL v191 = 0),
                                                                                      !v191))
                                                                                {
                                                                                  if (!v30
                                                                                    || (*(void *)v235 == 0x702D6F6475657370
                                                                                      ? (BOOL v192 = *(_DWORD *)(v235 + 8) == 1700949874)
                                                                                      : (BOOL v192 = 0),
                                                                                        !v192
                                                                                     && (*(void *)v235 == 0x7274702D74666F73
                                                                                       ? (BOOL v193 = *(_DWORD *)(v235 + 8) == 1752462689)
                                                                                       : (BOOL v193 = 0),
                                                                                         !v193)))
                                                                                  {
                                                                                    if (!v28
                                                                                      || (*(void *)v235 == 0x65642D7069727473
                                                                                        ? (BOOL v194 = *(void *)(v235 + 8) == 0x6F746F72702D6461)
                                                                                        : (BOOL v194 = 0),
                                                                                          v194
                                                                                        ? (BOOL v195 = *(void *)(v235 + 13) == 0x73657079746F746FLL)
                                                                                        : (BOOL v195 = 0),
                                                                                          !v195))
                                                                                    {
                                                                                      if (!v5
                                                                                        || (*(void *)v235 == 0x65642D7069727473
                                                                                          ? (BOOL v196 = *(void *)(v235 + 8) == 0x6C6365642D677562)
                                                                                          : (BOOL v196 = 0),
                                                                                            v196
                                                                                          ? (BOOL v197 = *(void *)(v235 + 11) == 0x6572616C6365642DLL)
                                                                                          : (BOOL v197 = 0),
                                                                                            !v197))
                                                                                      {
                                                                                        if (*((void *)&v235 + 1) != 14) {
                                                                                          goto LABEL_782;
                                                                                        }
                                                                                        if ((*(void *)v235 != 0x6F6E2D7069727473
                                                                                           || *(void *)(v235 + 6) != 0x67756265646E6F6ELL)
                                                                                          && (*(void *)v235 != 0x6C61632D77656976
                                                                                           || *(void *)(v235 + 6) != 0x68706172676C6C61))
                                                                                        {
                                                                                          goto LABEL_686;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  goto LABEL_11;
                                                default:
                                                  int v153 = v27;
                                                  int v154 = v28;
                                                  int v155 = v30;
                                                  if (*((void *)&v235 + 1) == 17)
                                                  {
                                                    BOOL v213 = *(void *)v235 == 0x6F6E612D656D616ELL
                                                        && *(void *)(v235 + 8) == 0x6C61626F6C672D6ELL;
                                                    if (v213 && *(unsigned char *)(v235 + 16) == 115) {
                                                      goto LABEL_11;
                                                    }
                                                  }
                                                  goto LABEL_507;
                                              }
                                              BOOL v152 = v211 && v210 == v212;
                                              goto LABEL_506;
                                            case 0xBLL:
                                              uint64_t v142 = *(void *)(v235 + 3);
                                              BOOL v143 = *(void *)v235 == 0x6C616E7265746E69;
                                              uint64_t v144 = 0x657A696C616E7265;
                                              break;
                                            default:
                                              goto LABEL_476;
                                          }
                                          if (v143 && v142 == v144) {
                                            goto LABEL_11;
                                          }
                                          goto LABEL_476;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_11:
  uint64_t v17 = v238;
  if (*((void *)&v238 + 1) == (void)v238)
  {
LABEL_15:
    *a5 = 0;
  }
  else
  {
    uint64_t v18 = 40 * ((*((void *)&v238 + 1) - (void)v238) / 40);
    while (1)
    {
      llvm::PassBuilder::parseModulePass((uint64_t)a1, a2, v17, v13);
      if (*a5) {
        break;
      }
      v17 += 40;
      v18 -= 40;
      if (!v18) {
        goto LABEL_15;
      }
    }
  }
  if (v240)
  {
    size_t v243 = (void **)&v238;
    sub_1CCCBB47C(&v243);
  }
}

void llvm::PassBuilder::parseAAPipeline(llvm::PassBuilder *this@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  BOOL v21 = a3;
  unint64_t v22 = a4;
  if (a4)
  {
    unint64_t v6 = a4;
    uint64_t v7 = (uint64_t)a3;
    if (a4 == 7 && (*a3 == 1634100580 ? (BOOL v10 = *(_DWORD *)((char *)a3 + 3) == 1953264993) : (BOOL v10 = 0), v10))
    {
      llvm::PassBuilder::buildDefaultAAPipeline(this, v23);
      sub_1CD69EC18(a2, (uint64_t)v23);
      if (v23[0] != v24) {
        free(v23[0]);
      }
    }
    else
    {
      do
      {
        LOBYTE(v23[0]) = 44;
        unint64_t v11 = llvm::StringRef::find((uint64_t *)&v21, (char *)v23, 1uLL, 0);
        if (v6 >= v11) {
          unint64_t v12 = v11;
        }
        else {
          unint64_t v12 = v6;
        }
        if (v6 >= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        else {
          unint64_t v13 = v6;
        }
        uint64_t v14 = v7 + v13;
        unint64_t v15 = v6 - v13;
        uint64_t v16 = v7;
        if (v11 == -1) {
          unint64_t v17 = v6;
        }
        else {
          unint64_t v17 = v12;
        }
        if (v11 == -1) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = v14;
        }
        v20[0] = v16;
        v20[1] = v17;
        if (v11 == -1) {
          unint64_t v6 = 0;
        }
        else {
          unint64_t v6 = v15;
        }
        BOOL v21 = (_DWORD *)v7;
        unint64_t v22 = v6;
        if ((((uint64_t (*)(llvm::PassBuilder *, uint64_t))llvm::PassBuilder::parseAAPassName)(this, a2) & 1) == 0)
        {
          v23[0] = "unknown alias analysis name '{0}'";
          v23[1] = (void *)33;
          v24[0] = v26;
          v24[1] = 1;
          v25[0] = &unk_1F2617F90;
          v25[1] = v20;
          v26[0] = v25;
          sub_1CD465B2C((uint64_t)v23, &__p);
          llvm::inconvertibleErrorCode(v18);
          operator new();
        }
      }
      while (v6);
    }
  }
  *a5 = 0;
}

uint64_t llvm::PassBuilder::setEnableHotColdSplitting(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1984) = a2;
  return this;
}

uint64_t sub_1CD719790(uint64_t a1)
{
  int v2 = *(atomic_uint **)(a1 + 56);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD719814(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    char v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v6 = (uint64_t *)v3[1];
        uint64_t v5 = v3[2];
        v3[2] = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        operator delete(v3);
        char v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

uint64_t sub_1CD7198AC(uint64_t a1, long long *a2, long long *a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v7;
  }
  unint64_t v8 = (_OWORD *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v8, *(const void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *unint64_t v8 = v9;
  }
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_1CD71993C(uint64_t result, long long *a2, void *a3, void *a4)
{
  long long v4 = *a2;
  *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)uint64_t result = v4;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  if (a3[1] != *a3)
  {
    llvm::vfs::getRealFileSystem(&v5);
    llvm::SpecialCaseList::createOrDie();
  }
  if (a4[1] != *a4)
  {
    llvm::vfs::getRealFileSystem(&v5);
    llvm::SpecialCaseList::createOrDie();
  }
  return result;
}

uint64_t sub_1CD719AFC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v2);
    MEMORY[0x1D25D9CE0]();
  }
  char v3 = *(void ***)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3)
  {
    llvm::SpecialCaseList::~SpecialCaseList(v3);
    MEMORY[0x1D25D9CE0]();
  }
  return a1;
}

uint64_t sub_1CD719B68(uint64_t a1)
{
  sub_1CC189978((void *)(a1 + 5568));
  sub_1CD719BCC(a1 + 5520);
  sub_1CD719C14((char **)(a1 + 128));
  sub_1CD719CF4(a1 + 80);
  char v3 = (void **)(a1 + 56);
  sub_1CCCB6C5C(&v3);
  return a1;
}

uint64_t sub_1CD719BCC(uint64_t a1)
{
  char v3 = (void **)(a1 + 24);
  sub_1CCCB6B44(&v3);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

char **sub_1CD719C14(char **a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    long long v4 = v2 - 656;
    uint64_t v5 = 672 * v3;
    do
    {
      sub_1CD719C7C((char **)&v4[v5]);
      v5 -= 672;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CD719C7C(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 160 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 160];
      if (&v2[v4 - 144] != v5) {
        free(v5);
      }
      v4 -= 160;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD719CF4(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_1CCCB6BE0(&v3);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

uint64_t sub_1CD719D3C(uint64_t a1)
{
  sub_1CD456CB4((void *)(a1 + 232));
  sub_1CB833A08(a1 + 200, *(void **)(a1 + 208));
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2 != (void *)(a1 + 136)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  }

  return sub_1CD719DB0(a1);
}

uint64_t sub_1CD719DB0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_1CCCB6CE8(&v3);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

uint64_t *sub_1CD719DF8(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 72 * v2;
    uint64_t v5 = (char **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t v5 = sub_1CC92A490(v5);
      }
      v5 += 9;
      v4 -= 72;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CD719E60(uint64_t a1)
{
  sub_1CB833A08(a1 + 208, *(void **)(a1 + 216));
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2 != (void *)(a1 + 80)) {
    free(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3)
  {
    uint64_t v4 = sub_1CBF8AF10(v3);
    MEMORY[0x1D25D9CE0](v4, 0x1060C40D526B124);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5)
  {
    uint64_t v6 = *v5;
    *uint64_t v5 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    MEMORY[0x1D25D9CE0](v5, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_1CD719F1C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_1CC68FCC0(&v3);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

uint64_t sub_1CD719F64(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_1CCCB7218(&v3);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

uint64_t sub_1CD719FAC(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  llvm::GVNPass::ValueTable::ValueTable((llvm::GVNPass::ValueTable *)(a1 + 128));
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = a1 + 368;
  *(void *)(a1 + 360) = 0x400000000;
  *(void *)(a1 + 400) = a1 + 416;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 1;
  uint64_t v4 = 440;
  *(void *)(a1 + 432) = 1;
  do
  {
    *(void *)(a1 + v4) = -4096;
    v4 += 16;
  }
  while (v4 != 504);
  *(void *)(a1 + 504) = a1 + 520;
  *(void *)(a1 + 512) = 0x400000000;
  *(void *)(a1 + 584) = a1 + 600;
  *(void *)(a1 + 592) = 0x800000000;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(unsigned char *)(a1 + 688) = 1;
  *(void *)(a1 + 696) = a1 + 712;
  *(void *)(a1 + 704) = 0x400000000;
  return a1;
}

uint64_t sub_1CD71A098(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CB837F14(a1, a2);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return a1;
}

uint64_t sub_1CD71A130(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639D10;
  sub_1CCCB742C((void **)(a1 + 8));
  return a1;
}

void sub_1CD71A174(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639D10;
  sub_1CCCB742C((void **)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD71A1D8(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::printPipeline((llvm::raw_ostream *)(a1 + 8), a2, a3, a4);
}

void sub_1CD71A1E8()
{
}

llvm::raw_ostream *sub_1CD71A1FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71A204(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD71A204(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  long long v7 = sub_1CCC9293C();
  BOOL v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD71A2B4()
{
}

llvm::raw_ostream *sub_1CD71A2C8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71A2D0(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD71A2D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  long long v7 = sub_1CCC92C2C();
  BOOL v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD71A380()
{
}

void *sub_1CD71A398(void *a1)
{
  *a1 = &unk_1F2634720;
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)(a1 + 1));
  return a1;
}

void sub_1CD71A3E0()
{
}

void sub_1CD71A3F8()
{
}

void *sub_1CD71A48C(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F2634778;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD71A4F8(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F2634778;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71A584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::FunctionGroupAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::FunctionGroupAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBFA10B0((uint64_t)v8);
}

void sub_1CD71A60C()
{
}

void sub_1CD71A620()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

void *sub_1CD71A6DC(void *a1)
{
  *a1 = &unk_1F26347D0;
  sub_1CCCB79E4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71A720(void *a1)
{
  *a1 = &unk_1F26347D0;
  sub_1CCCB79E4((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71A784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::LazyCallGraph::invalidate(a1 + 8, a2, a3);
}

void sub_1CD71A790()
{
}

void sub_1CD71A7A4()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::ModuleSummaryIndexAnalysis::run();
}

void *sub_1CD71A824(void *a1)
{
  *a1 = &unk_1F2634828;
  sub_1CD4AFAF4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71A868(void *a1)
{
  *a1 = &unk_1F2634828;
  sub_1CD4AFAF4((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71A8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::ModuleSummaryIndexAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::ModuleSummaryIndexAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBFA10B0((uint64_t)v8);
}

void sub_1CD71A954()
{
}

void *sub_1CD71A96C(void *a1)
{
  *a1 = &unk_1F26348D8;
  sub_1CC0CFB78((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71A9B4()
{
}

void sub_1CD71A9C8()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::StackSafetyGlobalAnalysis::run();
}

void *sub_1CD71AA48(void *a1)
{
  *a1 = &unk_1F2634930;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfo *)(a1 + 1));
  return a1;
}

void sub_1CD71AA8C(void *a1)
{
  *a1 = &unk_1F2634930;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfo *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71AAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::StackSafetyGlobalAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::StackSafetyGlobalAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBFA10B0((uint64_t)v8);
}

void sub_1CD71AB78()
{
}

void sub_1CD71AB8C(uint64_t a1, llvm *a2)
{
}

void sub_1CD71ABFC()
{
}

BOOL sub_1CD71AC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::VerifierAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::VerifierAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBFA10B0((uint64_t)v8);
}

void sub_1CD71AC98()
{
}

void sub_1CD71ACB8()
{
}

void sub_1CD71ACCC(uint64_t a1, llvm::Module *a2)
{
  llvm::ASanGlobalsMetadataAnalysis::run(a2, (llvm::GlobalsMetadata *)v2);
  sub_1CCCB84BC();
}

uint64_t sub_1CD71AD24()
{
  return 0;
}

void sub_1CD71AD30()
{
}

void sub_1CD71AD44()
{
}

void *sub_1CD71ADB4(void *a1)
{
  *a1 = &unk_1F2634A90;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD71AE24(void *a1)
{
  *a1 = &unk_1F2634A90;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71AEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::InlineAdvisorAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  return v4 != (void *)(v5 + 8 * *v6);
}

void sub_1CD71AF0C()
{
}

void sub_1CD71AF20(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  llvm::IRSimilarityAnalysis::run(a2, (uint64_t)v2);
  sub_1CCCB8604();
}

uint64_t sub_1CD71AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CC056A04(a1, a2);
  sub_1CC056A04(v4 + 96, a2 + 96);
  sub_1CD71B014(a1 + 192, (uint64_t *)(a2 + 192));
  char v5 = *(unsigned char *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(unsigned char *)(a1 + 292) = v5;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  if (*(unsigned char *)(a2 + 320)) {
    sub_1CD71B0B8(a1 + 296, (__n128 *)(a2 + 296));
  }
  return a1;
}

__n128 sub_1CD71B014(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2[1];
  a2[1] = 0;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  LODWORD(v2) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  LODWORD(v2) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v2;
  __n128 result = *(__n128 *)(a2 + 7);
  long long v4 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(_OWORD *)(a1 + 72) = v4;
  *(__n128 *)(a1 + 56) = result;
  return result;
}

__n128 sub_1CD71B0B8(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    char v5 = (void **)a1;
    sub_1CBFFBCEC(&v5);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void *sub_1CD71B120(void *a1)
{
  *a1 = &unk_1F2634AE8;
  sub_1CD48B278((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71B164(void *a1)
{
  *a1 = &unk_1F2634AE8;
  sub_1CD48B278((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71B1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::IRSimilarityAnalysis::Key;
  long long v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::IRSimilarityAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBFA10B0((uint64_t)v8);
}

void sub_1CD71B250()
{
}

void sub_1CD71B264()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::GlobalsAA::run();
}

void *sub_1CD71B2E4(void *a1)
{
  *a1 = &unk_1F2634B40;
  llvm::GlobalsAAResult::~GlobalsAAResult((llvm::GlobalsAAResult *)(a1 + 1));
  return a1;
}

void sub_1CD71B328(void *a1)
{
  *a1 = &unk_1F2634B40;
  llvm::GlobalsAAResult::~GlobalsAAResult((llvm::GlobalsAAResult *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71B38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::GlobalsAAResult::invalidate(a1 + 8, a2, a3);
}

void *sub_1CD71B394(uint64_t a1, uint64_t *a2)
{
  long long v7 = 0;
  char v4 = sub_1CD71B3FC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD71B490(a1, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CD71B3FC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CD71B490(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CCCB877C(a1, v6);
  uint64_t v8 = 0;
  sub_1CD71B3FC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CD71B548(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      sub_1CD71B3FC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      uint64_t v10 = v12;
      *BOOL v12 = *a2;
      uint64_t v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      __n128 result = a2[1];
      a2[1] = 0;
      if (result) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    a2 += 2;
  }
  return result;
}

void sub_1CD71B638()
{
}

void sub_1CD71B658()
{
}

void sub_1CD71B678()
{
}

void *sub_1CD71B690(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F2634CA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD71B700()
{
}

void *sub_1CD71B718(void *a1)
{
  *a1 = &unk_1F2634CF8;
  sub_1CBF8AF10((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71B760()
{
}

void sub_1CD71B774()
{
  llvm::CycleAnalysis::run((uint64_t)v0);
}

void *sub_1CD71B7C8(void *a1)
{
  *a1 = &unk_1F2634D50;
  sub_1CD47306C((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71B80C(void *a1)
{
  *a1 = &unk_1F2634D50;
  sub_1CD47306C((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71B870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::CycleAnalysis::Key;
  int v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::CycleAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71B8F8()
{
}

void sub_1CD71B914()
{
}

void *sub_1CD71B92C(void *a1)
{
  *a1 = &unk_1F2634E00;
  sub_1CBFD5834(a1 + 1);
  return a1;
}

void sub_1CD71B974()
{
}

void sub_1CD71B988()
{
  v0[6] = *(void **)MEMORY[0x1E4F143B8];
  llvm::DominanceFrontierAnalysis::run(v0);
}

void *sub_1CD71BA24(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v3 = (void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  a1[1] = v4;
  uint64_t v5 = a1 + 1;
  uint64_t v6 = *(void *)(a2 + 16);
  a1[2] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)a2 = v3;
    *uint64_t v3 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *a1 = v5;
  }
  a1[3] = a1 + 5;
  uint64_t v7 = (uint64_t)(a1 + 3);
  a1[4] = 0x100000000;
  if (*(_DWORD *)(a2 + 32)) {
    sub_1CC79F218(v7, (const void **)(a2 + 24));
  }
  return a1;
}

BOOL sub_1CD71BAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::DominanceFrontier::invalidate(a1 + 8, a2, a3);
}

void sub_1CD71BAB4()
{
}

void sub_1CD71BAC8()
{
}

void sub_1CD71BB54()
{
}

BOOL sub_1CD71BB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::FunctionPropertiesAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::FunctionPropertiesAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71BBF0()
{
}

void *sub_1CD71BC08(void *a1)
{
  *a1 = &unk_1F2634F08;
  llvm::LazyValueInfo::releaseMemory(a1 + 1);
  return a1;
}

void sub_1CD71BC50()
{
}

void sub_1CD71BC64()
{
}

void sub_1CD71BCEC()
{
}

uint64_t sub_1CD71BD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::DependenceInfo::invalidate(a1 + 8, a2, a3, a4);
}

void *sub_1CD71BD08(void *result)
{
  uint64_t v1 = result[1];
  *__n128 result = &unk_1F2634F88;
  result[1] = 0;
  if (v1)
  {
    uint64_t v2 = result;
    MEMORY[0x1D25D9CE0](v1, 0xC400A2AC0F1);
    return v2;
  }
  return result;
}

void sub_1CD71BD68(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_1F2634F88;
  a1[1] = 0;
  if (v1) {
    MEMORY[0x1D25D9CE0](v1, 0xC400A2AC0F1);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD71BDE8()
{
}

void sub_1CD71BE64()
{
}

BOOL sub_1CD71BE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::InlineSizeEstimatorAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::InlineSizeEstimatorAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71BF00()
{
}

void *sub_1CD71BF18(void *a1)
{
  *a1 = &unk_1F2635010;
  sub_1CC0A20B8((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71BF60()
{
}

void sub_1CD71BF7C()
{
}

void *sub_1CD71BF94(void *a1)
{
  *a1 = &unk_1F26350C0;
  sub_1CC0CE9E0(a1 + 1);
  return a1;
}

void sub_1CD71BFDC()
{
}

void sub_1CD71BFF0()
{
  llvm::RegionInfoAnalysis::run((uint64_t)v0);
}

uint64_t sub_1CD71C044(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    a2[2] = result;
    uint64_t v3 = (uint64_t *)a2[5];
    uint64_t v4 = (uint64_t *)a2[6];
    while (v3 != v4)
    {
      uint64_t v5 = *v3++;
      __n128 result = sub_1CD71C044(v2, v5);
    }
  }
  return result;
}

void sub_1CD71C094(void *a1)
{
  *a1 = &unk_1F2635118;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase();
}

void sub_1CD71C0D8(void *a1)
{
  *a1 = &unk_1F2635118;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase();
}

BOOL sub_1CD71C13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::RegionInfo::invalidate(a1 + 8, a2, a3);
}

void sub_1CD71C148()
{
}

void sub_1CD71C164()
{
}

void sub_1CD71C178()
{
}

void sub_1CD71C1D8()
{
}

BOOL sub_1CD71C1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::ShouldNotRunFunctionPassesAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::ShouldNotRunFunctionPassesAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71C274()
{
}

void sub_1CD71C288()
{
}

void sub_1CD71C2E8()
{
}

BOOL sub_1CD71C2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::ShouldRunExtraVectorPasses::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  return v4 != (void *)(v5 + 8 * *v6);
}

void sub_1CD71C354()
{
}

void sub_1CD71C368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = *MEMORY[0x1E4F143B8];
  llvm::StackSafetyAnalysis::run(a2, a3, v3);
  sub_1CCCBA818();
}

void *sub_1CD71C3E8(void *a1)
{
  *a1 = &unk_1F26352D0;
  llvm::StackSafetyInfo::~StackSafetyInfo((llvm::StackSafetyInfo *)(a1 + 1));
  return a1;
}

void sub_1CD71C42C(void *a1)
{
  *a1 = &unk_1F26352D0;
  llvm::StackSafetyInfo::~StackSafetyInfo((llvm::StackSafetyInfo *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71C490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::StackSafetyAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::StackSafetyAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71C518()
{
}

void sub_1CD71C52C(uint64_t a1, uint64_t a2)
{
}

void sub_1CD71C59C()
{
}

BOOL sub_1CD71C5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::VerifierAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::VerifierAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71C638()
{
}

void sub_1CD71C64C()
{
}

void *sub_1CD71C6F8(void *a1)
{
  *a1 = &unk_1F2635380;
  sub_1CD49B9A4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD71C73C(void *a1)
{
  *a1 = &unk_1F2635380;
  sub_1CD49B9A4((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71C7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::DivergenceAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::DivergenceAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71C828()
{
}

void sub_1CD71C83C(uint64_t a1, uint64_t a2)
{
}

void sub_1CD71C8B8()
{
}

BOOL sub_1CD71C8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::GPUFunctionAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::GPUFunctionAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8);
}

void sub_1CD71C954()
{
}

void *sub_1CD71C96C(void *a1)
{
  *a1 = &unk_1F2635430;
  sub_1CBF750EC(a1 + 1);
  return a1;
}

void sub_1CD71C9B4()
{
}

void sub_1CD71C9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  llvm::CFLAndersAA::run(a3, (uint64_t)v3);
  sub_1CCCBAAB0();
}

void *sub_1CD71CA48@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1F2635488;
  llvm::CFLAndersAAResult::~CFLAndersAAResult(a2, (llvm::CFLAndersAAResult *)(a1 + 1));
  return a1;
}

void sub_1CD71CA8C(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1F2635488;
  llvm::CFLAndersAAResult::~CFLAndersAAResult(a2, (llvm::CFLAndersAAResult *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD71CAF0()
{
  return 0;
}

void sub_1CD71CAFC()
{
}

void sub_1CD71CB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  llvm::CFLSteensAA::run(a3, (uint64_t)v3);
  sub_1CCCBAB6C();
}

void *sub_1CD71CB90@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1F26354E0;
  llvm::CFLSteensAAResult::~CFLSteensAAResult(a2, (llvm::CFLSteensAAResult *)(a1 + 1));
  return a1;
}

void sub_1CD71CBD4(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1F26354E0;
  llvm::CFLSteensAAResult::~CFLSteensAAResult(a2, (llvm::CFLSteensAAResult *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD71CC38()
{
  return 0;
}

void sub_1CD71CC44()
{
}

void sub_1CD71CC58(uint64_t a1, uint64_t a2)
{
  llvm::objcarc::ObjCARCAA::run(a2, &v2);
  operator new();
}

void sub_1CD71CCD4()
{
}

uint64_t sub_1CD71CCE8()
{
  return 0;
}

void sub_1CD71CCF4()
{
}

void sub_1CD71CD08()
{
}

void sub_1CD71CD84()
{
}

uint64_t sub_1CD71CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::SCEVAAResult::invalidate(a1 + 8, a2, a3, a4);
}

void sub_1CD71CDA4()
{
}

void sub_1CD71CDC4()
{
}

uint64_t sub_1CD71CDE0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      sub_1CD71B3FC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      uint64_t v10 = v12;
      *BOOL v12 = *a2;
      uint64_t v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      __n128 result = a2[1];
      a2[1] = 0;
      if (result) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    a2 += 2;
  }
  return result;
}

BOOL sub_1CD71CECC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = sub_1CB896AE8(*(void *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  uint64_t v5 = v3[1];
  uint64_t v6 = 16;
  if (v5 == *v3) {
    uint64_t v6 = 20;
  }
  if (v4 != (void *)(v5 + 8 * *(unsigned int *)((char *)v3 + v6))) {
    return 1;
  }
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = sub_1CB896AE8((uint64_t)v7, (uint64_t)&llvm::AllAnalysesOn<llvm::Loop>::SetKey);
  uint64_t v9 = v7[1];
  uint64_t v10 = 16;
  if (v9 == *v7) {
    uint64_t v10 = 20;
  }
  return v8 != (void *)(v9 + 8 * *(unsigned int *)((char *)v7 + v10));
}

void sub_1CD71CF78()
{
}

void *sub_1CD71CF90(void *a1)
{
  *a1 = &unk_1F26356F0;
  sub_1CC078A80(a1 + 1);
  return a1;
}

BOOL sub_1CD71CFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::LoopAccessAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::LoopAccessAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CD71CECC((uint64_t)v8);
}

void sub_1CD71D05C()
{
}

void *sub_1CD71D074(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F2635748;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD71D0E0(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F2635748;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71D16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::DDGAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::DDGAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CD71CECC((uint64_t)v8);
}

void sub_1CD71D1F4()
{
}

void sub_1CD71D208(uint64_t a1, llvm::Loop *a2, uint64_t a3, llvm::AssumptionCache **a4)
{
  llvm::IVUsersAnalysis::run(a2, a4, (llvm::IVUsers *)&v4);
  sub_1CCCBB374();
}

uint64_t *sub_1CD71D25C(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[3] = a2[3];
  a1[4] = a2[4];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a1 + 5), a1 + 9, 16, a2 + 5);
  uint64_t v4 = a1 + 25;
  a1[25] = (uint64_t)(a1 + 25);
  a1[26] = (uint64_t)(a1 + 25);
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 25;
    uint64_t v6 = (uint64_t *)a2[26];
    if (v6 != a2 + 25)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = v5;
      *uint64_t v5 = v8;
      uint64_t v9 = *v4;
      *(void *)(v7 + 8) = v4;
      *uint64_t v6 = v9;
      *(void *)(v9 + 8) = v6;
      *uint64_t v4 = v7;
    }
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a1 + 27), a1 + 31, 32, a2 + 27);
  for (int i = (uint64_t *)a1[26]; i != v4; int i = (uint64_t *)i[1])
  {
    uint64_t v11 = i - 4;
    if (!i) {
      uint64_t v11 = 0;
    }
    v11[6] = (uint64_t)a1;
  }
  return a1;
}

void *sub_1CD71D33C(void *a1)
{
  *a1 = &unk_1F26357A0;
  sub_1CD492920(a1 + 1);
  return a1;
}

void sub_1CD71D380(void *a1)
{
  *a1 = &unk_1F26357A0;
  sub_1CD492920(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD71D3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&llvm::IVUsersAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::IVUsersAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CD71CECC((uint64_t)v8);
}

void sub_1CD71D46C()
{
}

uint64_t sub_1CD71D488(uint64_t a1)
{
  *(void *)a1 = &unk_1F263A910;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1CCCB67B8(&v3);
  return a1;
}

void sub_1CD71D4E0()
{
}

void *sub_1CD71D4E8(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F2639E10;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

llvm::raw_ostream *sub_1CD71D554(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return llvm::ModuleToFunctionPassAdaptor::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD71D55C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2635820;
  uint64_t v3 = (void **)(a1 + 16);
  sub_1CCB7AA60(&v3);
  return a1;
}

uint64_t sub_1CD71D5B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2635820;
  uint64_t v3 = (void **)(a1 + 16);
  sub_1CCB7AA60(&v3);
  return MEMORY[0x1D25D9CE0](a1, 0x10A1C4037ACD87BLL);
}

void sub_1CD71D620()
{
}

void sub_1CD71D634(uint64_t a1, llvm::raw_ostream *a2)
{
}

uint64_t sub_1CD71D640()
{
  return 0;
}

void sub_1CD71D648()
{
}

char *sub_1CD71D764()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassManager<Module>]";
  v10[1] = 75;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B) {
    uint64_t v1 = 75;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_297[v1];
  unint64_t v3 = 75 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71D820(int *a1, llvm::raw_ostream *a2)
{
  unint64_t v3 = sub_1CB8E509C(a2, "repeat<");
  uint64_t v4 = llvm::raw_ostream::operator<<(v3, *a1);
  sub_1CB8E509C(v4, ">(");
  llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::printPipeline();
}

char *sub_1CD71D8A8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<Module>>]";
  v10[1] = 95;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5F) {
    uint64_t v1 = 95;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_298[v1];
  unint64_t v3 = 95 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71D964()
{
}

llvm::raw_ostream *sub_1CD71D978(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5D7BF0(*(void *)(a1 + 8), a2, a3, a4);
}

void sub_1CD71D984()
{
}

void sub_1CD71D998()
{
}

llvm::raw_ostream *sub_1CD71DA08(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71DA24(a2, a3, a4);
}

uint64_t sub_1CD71DA1C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71DA24(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAD68();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71DAE8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CallGraphAnalysis, "
                    "llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 145;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x91) {
    uint64_t v1 = 145;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_299[v1];
  unint64_t v3 = 145 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71DBA8()
{
}

void sub_1CD71DBBC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::CallGraphAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71DC08(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71DC24(a2, a3, a4);
}

uint64_t sub_1CD71DC1C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71DC24(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAD68();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71DCE8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CallGraphAnalysis>]";
  v10[1] = 103;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67) {
    uint64_t v1 = 103;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_300[v1];
  unint64_t v3 = 103 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71DDA8()
{
}

void sub_1CD71DDBC()
{
}

llvm::raw_ostream *sub_1CD71DE2C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71DE48(a2, a3, a4);
}

uint64_t sub_1CD71DE40()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71DE48(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAE24();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71DF0C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::FunctionGroupAnalys"
                    "is, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 149;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95) {
    uint64_t v1 = 149;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_301[v1];
  unint64_t v3 = 149 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71DFCC()
{
}

void sub_1CD71DFE0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::FunctionGroupAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71E02C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71E048(a2, a3, a4);
}

uint64_t sub_1CD71E040()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71E048(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAE24();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71E10C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::FunctionGroupAnalysis>]";
  v10[1] = 107;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B) {
    uint64_t v1 = 107;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_302[v1];
  unint64_t v3 = 107 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71E1CC()
{
}

void sub_1CD71E1E0()
{
}

llvm::raw_ostream *sub_1CD71E250(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71E26C(a2, a3, a4);
}

uint64_t sub_1CD71E264()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71E26C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAEE0();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71E330()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LazyCallGraphAnalys"
                    "is, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 149;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95) {
    uint64_t v1 = 149;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_303[v1];
  unint64_t v3 = 149 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71E3F0()
{
}

void sub_1CD71E404(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71E450(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71E46C(a2, a3, a4);
}

uint64_t sub_1CD71E464()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71E46C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAEE0();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71E530()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LazyCallGraphAnalysis>]";
  v10[1] = 107;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B) {
    uint64_t v1 = 107;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_304[v1];
  unint64_t v3 = 107 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71E5F0()
{
}

void sub_1CD71E604()
{
}

llvm::raw_ostream *sub_1CD71E674(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71E690(a2, a3, a4);
}

uint64_t sub_1CD71E688()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71E690(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAF9C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71E754()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ModuleSummaryIndexA"
                    "nalysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 154;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9A) {
    uint64_t v1 = 154;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_305[v1];
  unint64_t v3 = 154 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71E814()
{
}

void sub_1CD71E828(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ModuleSummaryIndexAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71E874(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71E890(a2, a3, a4);
}

uint64_t sub_1CD71E888()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71E890(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FAF9C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  uint64_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71E954()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ModuleSummaryIndexAnalysis>]";
  v10[1] = 112;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70) {
    uint64_t v1 = 112;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_306[v1];
  unint64_t v3 = 112 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71EA14()
{
}

void sub_1CD71EA28()
{
}

llvm::raw_ostream *sub_1CD71EA98(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71EAAC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD71EAA4()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71EAAC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB058();
  size_t v9 = (const void *)a3(a4, v7, v8);
  size_t v11 = v10;
  BOOL v12 = sub_1CB8E509C(a2, "require<");
  unsigned int v13 = (void *)*((void *)v12 + 4);
  if (v11 <= *((void *)v12 + 3) - (void)v13)
  {
    if (v11)
    {
      memcpy(v13, v9, v11);
      *((void *)v12 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)v9, v11);
  }

  return sub_1CB8E509C(v12, ">");
}

char *sub_1CD71EB70()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ProfileSummaryAnaly"
                    "sis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 150;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96) {
    uint64_t v1 = 150;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_309[v1];
  unint64_t v3 = 150 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71EC30()
{
}

void sub_1CD71EC44(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ProfileSummaryAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71EC90(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71ECAC(a2, a3, a4);
}

uint64_t sub_1CD71ECA4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71ECAC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB058();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71ED70()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ProfileSummaryAnalysis>]";
  v10[1] = 108;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6C) {
    uint64_t v1 = 108;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_310[v1];
  unint64_t v3 = 108 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71EE30()
{
}

void sub_1CD71EE44()
{
}

llvm::raw_ostream *sub_1CD71EEB4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71EED0(a2, a3, a4);
}

uint64_t sub_1CD71EEC8()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71EED0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB114();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71EF94()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::StackSafetyGlobalAn"
                    "alysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 153;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x99) {
    uint64_t v1 = 153;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_311[v1];
  unint64_t v3 = 153 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71F054()
{
}

void sub_1CD71F068(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::StackSafetyGlobalAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71F0B4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F0D0(a2, a3, a4);
}

uint64_t sub_1CD71F0C8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71F0D0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB114();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71F194()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::StackSafetyGlobalAnalysis>]";
  v10[1] = 111;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F) {
    uint64_t v1 = 111;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_312[v1];
  unint64_t v3 = 111 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71F254()
{
}

void sub_1CD71F268()
{
}

llvm::raw_ostream *sub_1CD71F2D8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F2F4(a2, a3, a4);
}

uint64_t sub_1CD71F2EC()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71F2F4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB1D0();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71F3B8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::VerifierAnalysis, l"
                    "lvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 144;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x90) {
    uint64_t v1 = 144;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_313[v1];
  unint64_t v3 = 144 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71F478()
{
}

void sub_1CD71F48C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::VerifierAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71F4D8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F4F4(a2, a3, a4);
}

uint64_t sub_1CD71F4EC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71F4F4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB1D0();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71F5B8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::VerifierAnalysis>]";
  v10[1] = 102;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x66) {
    uint64_t v1 = 102;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_314[v1];
  unint64_t v3 = 102 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71F678()
{
}

void sub_1CD71F68C()
{
}

llvm::raw_ostream *sub_1CD71F6FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F718(a2, a3, a4);
}

uint64_t sub_1CD71F710()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71F718(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611D70();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71F7DC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 155;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9B) {
    uint64_t v1 = 155;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_315[v1];
  unint64_t v3 = 155 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71F89C()
{
}

void sub_1CD71F8B0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71F8FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F918(a2, a3, a4);
}

uint64_t sub_1CD71F910()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71F918(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611D70();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71F9DC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::PassInstrumentationAnalysis>]";
  v10[1] = 113;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71) {
    uint64_t v1 = 113;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_316[v1];
  unint64_t v3 = 113 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71FA9C()
{
}

void sub_1CD71FAB0()
{
}

llvm::raw_ostream *sub_1CD71FB20(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71FB3C(a2, a3, a4);
}

uint64_t sub_1CD71FB34()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71FB3C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB28C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71FC00()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ASanGlobalsMetadata"
                    "Analysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 155;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9B) {
    uint64_t v1 = 155;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_317[v1];
  unint64_t v3 = 155 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71FCC0()
{
}

void sub_1CD71FCD4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ASanGlobalsMetadataAnalysis::Key);
}

llvm::raw_ostream *sub_1CD71FD20(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71FD3C(a2, a3, a4);
}

uint64_t sub_1CD71FD34()
{
  return 0;
}

llvm::raw_ostream *sub_1CD71FD3C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB28C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD71FE00()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ASanGlobalsMetadataAnalysis>]";
  v10[1] = 113;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71) {
    uint64_t v1 = 113;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_318[v1];
  unint64_t v3 = 113 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD71FEC0()
{
}

void sub_1CD71FED4()
{
}

llvm::raw_ostream *sub_1CD71FF44(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71FF60(a2, a3, a4);
}

uint64_t sub_1CD71FF58()
{
  return 1;
}

llvm::raw_ostream *sub_1CD71FF60(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB348();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD720024()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::InlineAdvisorAnalys"
                    "is, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 149;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95) {
    uint64_t v1 = 149;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_319[v1];
  unint64_t v3 = 149 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7200E4()
{
}

void sub_1CD7200F8(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::InlineAdvisorAnalysis::Key);
}

llvm::raw_ostream *sub_1CD720144(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720160(a2, a3, a4);
}

uint64_t sub_1CD720158()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720160(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB348();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD720224()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::InlineAdvisorAnalysis>]";
  v10[1] = 107;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B) {
    uint64_t v1 = 107;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_320[v1];
  unint64_t v3 = 107 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7202E4()
{
}

void sub_1CD7202F8()
{
}

llvm::raw_ostream *sub_1CD720368(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720384(a2, a3, a4);
}

uint64_t sub_1CD72037C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD720384(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB404();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD720448()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::IRSimilarityAnalysi"
                    "s, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 148;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x94) {
    uint64_t v1 = 148;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_321[v1];
  unint64_t v3 = 148 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD720508()
{
}

void sub_1CD72051C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::IRSimilarityAnalysis::Key);
}

llvm::raw_ostream *sub_1CD720568(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720584(a2, a3, a4);
}

uint64_t sub_1CD72057C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720584(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB404();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD720648()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::IRSimilarityAnalysis>]";
  v10[1] = 106;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6A) {
    uint64_t v1 = 106;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_322[v1];
  unint64_t v3 = 106 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD720708()
{
}

void sub_1CD72071C()
{
}

llvm::raw_ostream *sub_1CD72078C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7207A0(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD720798()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7207A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB4C0();
  size_t v9 = (const void *)a3(a4, v7, v8);
  size_t v11 = v10;
  BOOL v12 = sub_1CB8E509C(a2, "require<");
  unsigned int v13 = (void *)*((void *)v12 + 4);
  if (v11 <= *((void *)v12 + 3) - (void)v13)
  {
    if (v11)
    {
      memcpy(v13, v9, v11);
      *((void *)v12 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)v9, v11);
  }

  return sub_1CB8E509C(v12, ">");
}

char *sub_1CD720864()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::GlobalsAA, llvm::Mo"
                    "dule, llvm::AnalysisManager<Module>>]";
  v10[1] = 137;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x89) {
    uint64_t v1 = 137;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_323[v1];
  unint64_t v3 = 137 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD720924()
{
}

void sub_1CD720938(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::GlobalsAA::Key);
}

llvm::raw_ostream *sub_1CD720984(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7209A0(a2, a3, a4);
}

uint64_t sub_1CD720998()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7209A0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB4C0();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  BOOL v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD720A64()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::GlobalsAA>]";
  v10[1] = 95;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5F) {
    uint64_t v1 = 95;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_324[v1];
  unint64_t v3 = 95 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

llvm::raw_ostream *sub_1CD720B24(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720B2C(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD720B2C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CCC91E38();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD720BDC()
{
}

void sub_1CD720BF0()
{
}

llvm::raw_ostream *sub_1CD720BF8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720C0C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD720C04()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720C0C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB57C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD720CBC()
{
}

double sub_1CD720CD0@<D0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::Annotation2MetadataPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD720CD8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720CEC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD720CE4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720CEC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB638();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD720D9C()
{
}

void sub_1CD720DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

llvm::raw_ostream *sub_1CD720DB8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720DCC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD720DC4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720DCC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB6F4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD720E7C()
{
}

double sub_1CD720E90@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::CalledValuePropagationPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD720E98(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720EAC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD720EA4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720EAC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB7B0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD720F5C()
{
}

double sub_1CD720F70@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::CanonicalizeAliasesPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD720F78(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD720F8C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD720F84()
{
  return 0;
}

llvm::raw_ostream *sub_1CD720F8C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB86C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72103C()
{
}

void sub_1CD721050()
{
}

llvm::raw_ostream *sub_1CD721058(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72106C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD721064()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72106C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FB928();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72111C()
{
}

double sub_1CD721130@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return NewPMCheckDebugifyPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721138(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721154(a2, a3, a4);
}

uint64_t sub_1CD72114C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721154(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FB9E4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD721204()
{
}

double sub_1CD721218@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::ConstantMergePass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721220(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721234(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72122C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721234(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FBAA0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7212E4()
{
}

void sub_1CD7212F8(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
}

llvm::raw_ostream *sub_1CD721300(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721314(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72130C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD721314(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FBB5C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7213C4()
{
}

void sub_1CD7213D8(void **a1@<X1>, uint64_t a2@<X8>)
{
}

llvm::raw_ostream *sub_1CD7213E0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7213F4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7213EC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7213F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FBC18();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD7214A0(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = *(void *)a2;
  uint64_t v2 = (void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(result + 8) = v3;
  uint64_t v4 = result + 8;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)a2 = v2;
    *uint64_t v2 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)__n128 result = v4;
  }
  *(void *)(result + 24) = *(void *)(a2 + 24);
  unint64_t v6 = (void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v7;
  uint64_t v8 = result + 32;
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + 24) = v6;
    *unint64_t v6 = 0;
    *(void *)(a2 + 40) = 0;
  }
  else
  {
    *(void *)(result + 24) = v8;
  }
  *(void *)(result + 48) = *(void *)(a2 + 48);
  size_t v10 = (void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(result + 56) = v11;
  uint64_t v12 = result + 56;
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(result + 64) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *(void *)(a2 + 48) = v10;
    void *v10 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(void *)(result + 48) = v12;
  }
  *(unsigned char *)(result + 72) = *(unsigned char *)(a2 + 72);
  return result;
}

void sub_1CD721558(uint64_t a1)
{
  sub_1CCCBBF04(a1);

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD721590@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::DeadArgumentEliminationPass::run((llvm::DeadArgumentEliminationPass *)(a1 + 8), a2, a3);
}

llvm::raw_ostream *sub_1CD721598(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7215AC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7215A4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7215AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FBCD4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72165C()
{
}

double sub_1CD721670@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return NewPMDebugifyPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721678(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721694(a2, a3, a4);
}

uint64_t sub_1CD72168C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721694(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FBD90();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD721744()
{
}

void sub_1CD721758()
{
}

llvm::raw_ostream *sub_1CD721760(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72177C(a2, a3, a4);
}

uint64_t sub_1CD721774()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72177C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FBE4C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72182C()
{
}

double sub_1CD721840@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::EliminateAvailableExternallyPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721848(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72185C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD721854()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72185C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FBF08();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72190C()
{
}

char **sub_1CD721920@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::BlockExtractorPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721928(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721944(a2, a3, a4);
}

uint64_t sub_1CD72193C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721944(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FBFC4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7219F4()
{
}

double sub_1CD721A08@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::ForceFunctionAttrsPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721A10(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721A24(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD721A1C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721A24(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC080();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD721AD4()
{
}

double sub_1CD721AE8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::FunctionImportPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721AF0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721B0C(a2, a3, a4);
}

uint64_t sub_1CD721B04()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721B0C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FC13C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD721BBC()
{
}

void sub_1CD721BD0()
{
}

llvm::raw_ostream *sub_1CD721BD8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721BEC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD721BE4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721BEC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC1F8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void *sub_1CD721C98(void *a1)
{
  *a1 = &unk_1F263A9D0;
  sub_1CC91FD7C((uint64_t)(a1 + 1));
  return a1;
}

llvm::raw_ostream *sub_1CD721CDC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721CE4(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD721CE4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC91EF4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

llvm::raw_ostream *sub_1CD721D94(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721D9C(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD721D9C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC91FB0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD721E4C()
{
}

double sub_1CD721E60@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::GlobalSplitPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD721E68(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721E7C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD721E74()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721E7C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC2B4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD721F2C()
{
}

void sub_1CD721F40()
{
}

llvm::raw_ostream *sub_1CD721F48(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD721F5C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD721F54()
{
  return 0;
}

llvm::raw_ostream *sub_1CD721F5C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC370();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72200C()
{
}

void sub_1CD722020()
{
}

llvm::raw_ostream *sub_1CD722028(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72203C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD722034()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72203C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC42C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7220EC(uint64_t a1)
{
  sub_1CCCBC1D8(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD722124()
{
}

void sub_1CD72212C(uint64_t a1, llvm::raw_ostream *a2)
{
}

uint64_t sub_1CD722138()
{
  return 0;
}

void sub_1CD722144()
{
}

void sub_1CD722158()
{
}

llvm::raw_ostream *sub_1CD722160(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72217C(a2, a3, a4);
}

uint64_t sub_1CD722174()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72217C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FC5A4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD722228(void *a1)
{
  *a1 = &unk_1F2636010;
  sub_1CD692A60((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD72226C(void *a1)
{
  *a1 = &unk_1F2636010;
  sub_1CD692A60((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD7222D0(uint64_t a1)
{
}

llvm::raw_ostream *sub_1CD7222D8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7222F4(a2, a3, a4);
}

uint64_t sub_1CD7222EC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7222F4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FC660();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7223A4()
{
}

double sub_1CD7223B8@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::InstrOrderFilePass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD7223C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7223D4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7223CC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7223D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC71C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD722480(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  if (v7)
  {
    if (v7 == a2 + 88)
    {
      *(void *)(a1 + 112) = a1 + 88;
      (*(void (**)(void))(**(void **)(a2 + 112) + 24))(*(void *)(a2 + 112));
    }
    else
    {
      *(void *)(a1 + 112) = v7;
      *(void *)(a2 + 112) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  int v8 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = v8;
  int v9 = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = v9;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v10 = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  uint64_t v11 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a1 + 264) = v11;
  return a1;
}

void *sub_1CD722624(void *a1)
{
  *a1 = &unk_1F263AAD0;
  sub_1CD696894((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD722668(void *a1)
{
  *a1 = &unk_1F263AAD0;
  sub_1CD696894((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD7226CC()
{
}

llvm::raw_ostream *sub_1CD7226D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7226E8(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7226E0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7226E8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC7D8();
  long long v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

llvm::raw_ostream *sub_1CD722794(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7227A4(a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7227A4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CCC9206C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD722854()
{
}

double sub_1CD722868@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)&double result = 2;
  *(void *)(a1 + 16) = 2;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(_DWORD *)(a1 + 64) = 2;
  return result;
}

llvm::raw_ostream *sub_1CD7228A8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7228C4(a2, a3, a4);
}

uint64_t sub_1CD7228BC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7228C4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FC894();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD722974()
{
}

void sub_1CD722988()
{
}

llvm::raw_ostream *sub_1CD722990(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7229A4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72299C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7229A4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FC950();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD722A54()
{
}

void sub_1CD722A68()
{
}

llvm::raw_ostream *sub_1CD722A70(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722A84(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD722A7C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722A84(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FCA0C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD722B34()
{
}

void sub_1CD722B48()
{
}

llvm::raw_ostream *sub_1CD722B50(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722B6C(a2, a3, a4);
}

uint64_t sub_1CD722B64()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722B6C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FCAC8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD722C1C()
{
}

double sub_1CD722C30@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::LowerGlobalDtorsPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD722C38(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722C54(a2, a3, a4);
}

uint64_t sub_1CD722C4C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722C54(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FCB84();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD722D04()
{
}

double sub_1CD722D18@<D0>(uint64_t a1@<X0>, llvm::IntegerType **a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::LowerTypeTestsPass::run(a1 + 8, a2, a3);
}

llvm::raw_ostream *sub_1CD722D20(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722D34(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD722D2C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722D34(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FCC40();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD722DE4()
{
}

void sub_1CD722DF8()
{
}

llvm::raw_ostream *sub_1CD722E00(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722E1C(a2, a3, a4);
}

uint64_t sub_1CD722E14()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722E1C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FCCFC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD722ECC()
{
}

void *sub_1CD722EE0@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::MergeFunctionsPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD722EE8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722EFC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD722EF4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722EFC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FCDB8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD722FAC()
{
}

double sub_1CD722FC0@<D0>(llvm *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::NameAnonGlobalPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD722FC8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD722FDC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD722FD4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD722FDC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FCE74();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72308C()
{
}

double sub_1CD7230A0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::ObjCARCAPElimPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD7230A8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7230C4(a2, a3, a4);
}

uint64_t sub_1CD7230BC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7230C4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FCF30();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD723174()
{
}

void sub_1CD723188()
{
}

llvm::raw_ostream *sub_1CD723190(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7231A4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72319C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7231A4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FCFEC();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD723254()
{
}

void sub_1CD723268()
{
}

llvm::raw_ostream *sub_1CD723270(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723284(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72327C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723284(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FD0A8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD723334()
{
}

void sub_1CD723348()
{
}

llvm::raw_ostream *sub_1CD723350(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723364(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72335C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723364(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FD164();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void *sub_1CD723410(void *a1)
{
  *a1 = &unk_1F263AA10;
  sub_1CD719790((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD723454(void *a1)
{
  *a1 = &unk_1F263AA10;
  sub_1CD719790((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD7234B8()
{
}

llvm::raw_ostream *sub_1CD7234C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7234D4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7234CC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7234D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FD220();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD723584()
{
}

void sub_1CD723598()
{
}

llvm::raw_ostream *sub_1CD7235A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7235BC(a2, a3, a4);
}

uint64_t sub_1CD7235B4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7235BC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD2DC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72366C()
{
}

void sub_1CD723680()
{
}

llvm::raw_ostream *sub_1CD723688(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7236A4(a2, a3, a4);
}

uint64_t sub_1CD72369C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7236A4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD398();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD723754()
{
}

void sub_1CD723768()
{
}

llvm::raw_ostream *sub_1CD723770(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72378C(a2, a3, a4);
}

uint64_t sub_1CD723784()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72378C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD454();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

uint64_t sub_1CD723838(uint64_t a1)
{
  *(void *)a1 = &unk_1F26362D0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD723888(uint64_t a1)
{
  *(void *)a1 = &unk_1F26362D0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD7238F8@<D0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::PrintModulePass::run(a1 + 8, a2, a3);
}

llvm::raw_ostream *sub_1CD723900(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72391C(a2, a3, a4);
}

uint64_t sub_1CD723914()
{
  return 1;
}

llvm::raw_ostream *sub_1CD72391C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD510();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7239CC()
{
}

void sub_1CD7239E0()
{
}

llvm::raw_ostream *sub_1CD7239E8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723A04(a2, a3, a4);
}

uint64_t sub_1CD7239FC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723A04(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD5CC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD723AB4()
{
}

void sub_1CD723AC8()
{
}

llvm::raw_ostream *sub_1CD723AD0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723AEC(a2, a3, a4);
}

uint64_t sub_1CD723AE4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723AEC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD688();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD723B9C()
{
}

void sub_1CD723BB0()
{
}

llvm::raw_ostream *sub_1CD723BB8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723BD4(a2, a3, a4);
}

uint64_t sub_1CD723BCC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723BD4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD744();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD723C84()
{
}

void sub_1CD723C98(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD723CA0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723CBC(a2, a3, a4);
}

uint64_t sub_1CD723CB4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723CBC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD800();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD723D68(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CD41C56C((uint64_t)a1, a2);
  }
  a1[10] = a1 + 12;
  a1[11] = 0x800000000;
  if (*(_DWORD *)(a2 + 88)) {
    sub_1CD41C56C((uint64_t)(a1 + 10), a2 + 80);
  }
  a1[20] = a1 + 22;
  a1[21] = 0x800000000;
  if (*(_DWORD *)(a2 + 168)) {
    sub_1CD41C56C((uint64_t)(a1 + 20), a2 + 160);
  }
  a1[30] = a1 + 32;
  a1[31] = 0x800000000;
  if (*(_DWORD *)(a2 + 248)) {
    sub_1CD41C56C((uint64_t)(a1 + 30), a2 + 240);
  }
  a1[40] = a1 + 42;
  a1[41] = 0x800000000;
  if (*(_DWORD *)(a2 + 328)) {
    sub_1CD41C56C((uint64_t)(a1 + 40), a2 + 320);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a1 + 50), a1 + 54, 32, (uint64_t *)(a2 + 400));
  return a1;
}

void *sub_1CD723E68(void *a1)
{
  *a1 = &unk_1F2636410;
  sub_1CCCB6860((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD723EAC(void *a1)
{
  *a1 = &unk_1F2636410;
  sub_1CCCB6860((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD723F10@<D0>(uint64_t a1@<X0>, const llvm::Module *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::ModuleDebugInfoPrinterPass::run((llvm::raw_ostream **)(a1 + 8), a2, a3);
}

llvm::raw_ostream *sub_1CD723F18(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD723F34(a2, a3, a4);
}

uint64_t sub_1CD723F2C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD723F34(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FD8BC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD723FE4()
{
}

void sub_1CD723FF8()
{
}

llvm::raw_ostream *sub_1CD724000(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724014(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72400C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724014(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FD978();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7240C4()
{
}

void sub_1CD7240D8()
{
}

llvm::raw_ostream *sub_1CD7240E0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7240F4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7240EC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7240F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FDA34();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7241A4()
{
}

void sub_1CD7241B8()
{
}

llvm::raw_ostream *sub_1CD7241C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7241DC(a2, a3, a4);
}

uint64_t sub_1CD7241D4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7241DC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FDAF0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD724288(void *a1)
{
  *a1 = &unk_1F2636490;
  sub_1CD719814(a1 + 1);
  return a1;
}

void sub_1CD7242CC(void *a1)
{
  *a1 = &unk_1F2636490;
  sub_1CD719814(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD724330@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::RewriteSymbolPass::run(a1 + 8, a2, a3);
}

llvm::raw_ostream *sub_1CD724338(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724354(a2, a3, a4);
}

uint64_t sub_1CD72434C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724354(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FDBAC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724404()
{
}

void sub_1CD724418()
{
}

llvm::raw_ostream *sub_1CD724420(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724434(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72442C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724434(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FDC68();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void *sub_1CD7244E0(void *a1)
{
  *a1 = &unk_1F263AE90;
  sub_1CD719790((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD724524(void *a1)
{
  *a1 = &unk_1F263AE90;
  sub_1CD719790((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD724588()
{
}

llvm::raw_ostream *sub_1CD724590(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7245A4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72459C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7245A4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FDD24();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD724654()
{
}

double sub_1CD724668@<D0>(uint64_t a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::StripSymbolsPass::run(a2, (unsigned char *)(a1 + 8), a3);
}

llvm::raw_ostream *sub_1CD724670(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72468C(a2, a3, a4);
}

uint64_t sub_1CD724684()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72468C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FDDE0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72473C()
{
}

double sub_1CD724750@<D0>(llvm::Module *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::StripDeadDebugInfoPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD724758(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724774(a2, a3, a4);
}

uint64_t sub_1CD72476C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724774(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FDE9C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724824()
{
}

void sub_1CD724838(uint64_t a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X8>)
{
}

llvm::raw_ostream *sub_1CD724840(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724854(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72484C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724854(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FDF58();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD724904()
{
}

void sub_1CD724918(uint64_t **a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
}

llvm::raw_ostream *sub_1CD724920(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72493C(a2, a3, a4);
}

uint64_t sub_1CD724934()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72493C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE014();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7249EC()
{
}

double sub_1CD724A00@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::StripDeadPrototypesPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD724A08(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724A24(a2, a3, a4);
}

uint64_t sub_1CD724A1C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724A24(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE0D0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724AD4()
{
}

double sub_1CD724AE8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::StripDebugDeclarePass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD724AF0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724B0C(a2, a3, a4);
}

uint64_t sub_1CD724B04()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724B0C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE18C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724BBC()
{
}

double sub_1CD724BD0@<D0>(uint64_t a1@<X0>, const llvm::Module *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::StripNonDebugSymbolsPass::run((unsigned char *)(a1 + 8), a2, a3);
}

llvm::raw_ostream *sub_1CD724BD8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724BF4(a2, a3, a4);
}

uint64_t sub_1CD724BEC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724BF4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE248();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724CA4()
{
}

double sub_1CD724CB8@<D0>(llvm *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::StripNonLineTableDebugInfoPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD724CC0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724CDC(a2, a3, a4);
}

uint64_t sub_1CD724CD4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724CDC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE304();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724D8C()
{
}

void sub_1CD724DA0()
{
}

llvm::raw_ostream *sub_1CD724DA8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724DBC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD724DB4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724DBC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FE3C0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD724E6C()
{
}

void sub_1CD724E80()
{
}

llvm::raw_ostream *sub_1CD724E88(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724EA4(a2, a3, a4);
}

uint64_t sub_1CD724E9C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724EA4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE47C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD724F54()
{
}

void sub_1CD724F68()
{
}

llvm::raw_ostream *sub_1CD724F70(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD724F84(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD724F7C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD724F84(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FE538();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD725030(uint64_t a1)
{
  *(void *)a1 = &unk_1F26366D0;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1CB8338B8(&v3);
  return a1;
}

uint64_t sub_1CD725088(uint64_t a1)
{
  *(void *)a1 = &unk_1F26366D0;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1CB8338B8(&v3);
  return MEMORY[0x1D25D9CE0](a1, 0xA1C4030951706);
}

void sub_1CD7250F4(uint64_t a1)
{
}

llvm::raw_ostream *sub_1CD7250FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725118(a2, a3, a4);
}

uint64_t sub_1CD725110()
{
  return 1;
}

llvm::raw_ostream *sub_1CD725118(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE5F4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7251C8()
{
}

double sub_1CD7251DC@<D0>(uint64_t a1@<X0>, llvm::Module *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::ModuleMemorySanitizerPass::run((unsigned char *)(a1 + 8), a2, a3);
}

llvm::raw_ostream *sub_1CD7251E4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725200(a2, a3, a4);
}

uint64_t sub_1CD7251F8()
{
  return 1;
}

llvm::raw_ostream *sub_1CD725200(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE6B0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD7252AC(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F263ACD0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD725318(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F263ACD0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD7253A4()
{
}

llvm::raw_ostream *sub_1CD7253AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7253C0(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7253B8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7253C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FE76C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD725470()
{
}

double sub_1CD725484@<D0>(llvm::Module *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::ModuleThreadSanitizerPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72548C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7254A8(a2, a3, a4);
}

uint64_t sub_1CD7254A0()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7254A8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE828();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD725554(void *a1)
{
  *a1 = &unk_1F2636790;
  sub_1CD719AFC((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD725598(void *a1)
{
  *a1 = &unk_1F2636790;
  sub_1CD719AFC((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD7255FC(uint64_t a1)
{
}

llvm::raw_ostream *sub_1CD725604(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725620(a2, a3, a4);
}

uint64_t sub_1CD725618()
{
  return 1;
}

llvm::raw_ostream *sub_1CD725620(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FE8E4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7256D0()
{
}

void sub_1CD7256E4(uint64_t a1, llvm::Module *a2)
{
}

llvm::raw_ostream *sub_1CD7256EC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725700(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7256F8()
{
  return 1;
}

llvm::raw_ostream *sub_1CD725700(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FE9A0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7257B0()
{
}

double sub_1CD7257C4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::PoisonCheckingPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD7257CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7257E8(a2, a3, a4);
}

uint64_t sub_1CD7257E0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7257E8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD6FEA5C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD725898()
{
}

double sub_1CD7258AC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::PseudoProbeUpdatePass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD7258B4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7258C8(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7258C0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7258C8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FEB18();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD725978()
{
}

void sub_1CD72598C()
{
}

llvm::raw_ostream *sub_1CD725994(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  return llvm::LoopExtractorPass::printPipeline((_DWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD7259A0()
{
  return 0;
}

void sub_1CD7259AC()
{
}

void sub_1CD7259C0(uint64_t a1, uint64_t **a2)
{
}

llvm::raw_ostream *sub_1CD7259C8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::HWAddressSanitizerPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD7259D4()
{
  return 1;
}

void sub_1CD7259E0()
{
}

void sub_1CD7259F4()
{
}

llvm::raw_ostream *sub_1CD7259FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::ModuleAddressSanitizerPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD725A08()
{
  return 1;
}

void sub_1CD725A14()
{
}

void sub_1CD725A28()
{
}

llvm::raw_ostream *sub_1CD725A30(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725A44(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD725A3C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD725A44(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FEC90();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD725AF4()
{
}

double sub_1CD725B08@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)&double result = 2;
  *(void *)(a1 + 16) = 2;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(_DWORD *)(a1 + 64) = 2;
  return result;
}

llvm::raw_ostream *sub_1CD725B48(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7228C4(a2, a3, a4);
}

uint64_t sub_1CD725B5C()
{
  return 0;
}

void sub_1CD725B68()
{
}

llvm::raw_ostream *sub_1CD725B7C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725B84(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD725B84(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92128();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD725C34()
{
}

void sub_1CD725C48()
{
}

llvm::raw_ostream *sub_1CD725C50(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725C64(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD725C5C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD725C64(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FED4C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD725D14()
{
}

void sub_1CD725D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

llvm::raw_ostream *sub_1CD725D30(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725D44(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD725D3C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD725D44(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FEE08();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD725DF4()
{
}

void sub_1CD725E08()
{
}

llvm::raw_ostream *sub_1CD725E10(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725E24(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD725E1C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD725E24(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD6FEEC4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void *sub_1CD725ED0(void *a1)
{
  *a1 = &unk_1F2636950;
  llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)(a1 + 1));
  return a1;
}

void sub_1CD725F14(void *a1)
{
  *a1 = &unk_1F2636950;
  llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD725F78()
{
}

llvm::raw_ostream *sub_1CD725F80(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD725F9C(a2, a3, a4);
}

uint64_t sub_1CD725F94()
{
  return 0;
}

llvm::raw_ostream *sub_1CD725F9C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD700354();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72604C()
{
}

llvm::raw_ostream *sub_1CD726060(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726068(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD726068(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC921E4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD726118()
{
}

double sub_1CD72612C@<D0>(llvm::Module *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::AddDiscriminatorsPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD726134(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726148(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD726140()
{
  return 1;
}

llvm::raw_ostream *sub_1CD726148(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700410();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7261F8()
{
}

void sub_1CD72620C()
{
}

llvm::raw_ostream *sub_1CD726214(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726228(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD726220()
{
  return 0;
}

llvm::raw_ostream *sub_1CD726228(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7004CC();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7262D8()
{
}

void sub_1CD7262EC()
{
}

llvm::raw_ostream *sub_1CD7262F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726310(a2, a3, a4);
}

uint64_t sub_1CD726308()
{
  return 0;
}

llvm::raw_ostream *sub_1CD726310(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD700588();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7263C0()
{
}

double sub_1CD7263D4@<D0>(uint64_t a1@<X8>)
{
  return llvm::AssumeSimplifyPass::run(a1);
}

llvm::raw_ostream *sub_1CD7263DC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7263F0(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7263E8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7263F0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700644();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7264A0()
{
}

llvm::raw_ostream *sub_1CD7264B4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7264BC(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7264BC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC922A0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72656C()
{
}

llvm::raw_ostream *sub_1CD726580(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726588(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD726588(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC9235C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD726638()
{
}

llvm::raw_ostream *sub_1CD72664C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726654(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD726654(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92418();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD726704()
{
}

void sub_1CD726718()
{
}

llvm::raw_ostream *sub_1CD726720(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72673C(a2, a3, a4);
}

uint64_t sub_1CD726734()
{
  return 1;
}

llvm::raw_ostream *sub_1CD72673C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD700700();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7267EC()
{
}

void sub_1CD726800()
{
}

llvm::raw_ostream *sub_1CD726808(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726824(a2, a3, a4);
}

uint64_t sub_1CD72681C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD726824(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD7007BC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7268D4()
{
}

void sub_1CD7268E8()
{
}

llvm::raw_ostream *sub_1CD7268F0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD726904(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7268FC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD726904(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700878();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD7269B0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  uint64_t v6 = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  sub_1CD46AEB4(a1 + 80, (uint64_t)(a2 + 5));
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 136) = 0x800000000;
  if (*((_DWORD *)a2 + 34)) {
    sub_1CD726A60(a1 + 128, (uint64_t)(a2 + 8));
  }
  sub_1CD46AEB4(a1 + 5520, (uint64_t)(a2 + 345));
  sub_1CD46AEB4(a1 + 5568, (uint64_t)(a2 + 348));
  return a1;
}

uint64_t sub_1CD726A60(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        size_t v9 = *(char **)a1;
        if (v5)
        {
          size_t v10 = &v4[672 * v5];
          do
          {
            *(_OWORD *)size_t v9 = *(_OWORD *)v4;
            sub_1CD726D90((uint64_t)(v9 + 16), (uint64_t)(v4 + 16));
            v9 += 672;
            v4 += 672;
          }
          while (v4 != v10);
          size_t v11 = v9;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          size_t v9 = *(char **)a1;
        }
        else
        {
          size_t v11 = *(char **)a1;
        }
        uint64_t v12 = &v9[672 * v6];
        if (v12 != v11)
        {
          do
          {
            uint64_t v13 = v12 - 672;
            sub_1CD719C7C((char **)v12 - 82);
            uint64_t v12 = v13;
          }
          while (v13 != v11);
        }
        *(_DWORD *)(a1 + 8) = v5;
        unsigned int v14 = *(_DWORD *)(a2 + 8);
        if (v14)
        {
          uint64_t v15 = *(void *)a2 - 656;
          uint64_t v16 = 672 * v14;
          do
          {
            sub_1CD719C7C((char **)(v15 + v16));
            v16 -= 672;
          }
          while (v16);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if (v6)
          {
            uint64_t v17 = *(void *)a1 - 656;
            uint64_t v18 = 672 * v6;
            do
            {
              sub_1CD719C7C((char **)(v17 + v18));
              v18 -= 672;
            }
            while (v18);
          }
          *(_DWORD *)(a1 + 8) = 0;
          sub_1CD726D20();
        }
        if (v6)
        {
          uint64_t v7 = &v4[672 * v6];
          uint64_t v8 = *(char **)a1;
          do
          {
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v4;
            sub_1CD726D90((uint64_t)(v8 + 16), (uint64_t)(v4 + 16));
            v4 += 672;
            v8 += 672;
          }
          while (v4 != v7);
        }
        else
        {
          uint64_t v6 = 0;
        }
        int v19 = *(char **)a2;
        uint64_t v20 = *(unsigned int *)(a2 + 8);
        if (v6 != v20)
        {
          BOOL v21 = &v19[672 * v20];
          unint64_t v22 = *(char **)a1;
          uint64_t v23 = 672 * v6;
          do
          {
            uint64_t v24 = &v19[v23];
            int v25 = &v22[v23];
            *(_OWORD *)int v25 = *(_OWORD *)&v19[v23];
            *((void *)v25 + 3) = 0x400000000;
            *((void *)v25 + 2) = &v22[v23 + 32];
            if (*(_DWORD *)&v19[v23 + 24]) {
              sub_1CD726D90((uint64_t)&v22[v23 + 16], (uint64_t)(v24 + 16));
            }
            v22 += 672;
            v19 += 672;
          }
          while (v24 + 672 != v21);
          int v19 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        unsigned int v26 = *(_DWORD *)(a2 + 8);
        if (v26)
        {
          uint64_t v27 = 672 * v26;
          do
          {
            sub_1CD719C7C((char **)&v19[v27 - 656]);
            v27 -= 672;
          }
          while (v27);
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1CD726CA0((char **)a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD726CA0(char **a1, char **a2)
{
  long long v4 = *a1;
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = v4 - 656;
    uint64_t v7 = 672 * v5;
    do
    {
      sub_1CD719C7C((char **)&v6[v7]);
      v7 -= 672;
    }
    while (v7);
    long long v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_1CD726D20()
{
}

uint64_t sub_1CD726D90(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        size_t v9 = *(char **)a1;
        if (v5)
        {
          size_t v10 = &v4[160 * v5];
          do
          {
            sub_1CD727100((uint64_t)v9, (uint64_t)v4);
            *((_OWORD *)v9 + 9) = *((_OWORD *)v4 + 9);
            v9 += 160;
            v4 += 160;
          }
          while (v4 != v10);
          size_t v11 = v9;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          size_t v9 = *(char **)a1;
        }
        else
        {
          size_t v11 = *(char **)a1;
        }
        uint64_t v12 = &v9[160 * v6];
        while (v12 != v11)
        {
          unsigned int v14 = (char *)*((void *)v12 - 20);
          v12 -= 160;
          uint64_t v13 = v14;
          if (v12 + 16 != v14) {
            free(v13);
          }
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v15 = *(unsigned int *)(a2 + 8);
        if (v15)
        {
          uint64_t v16 = *(char **)a2;
          uint64_t v17 = 160 * v15;
          do
          {
            uint64_t v18 = *(char **)&v16[v17 - 160];
            if (&v16[v17 - 144] != v18) {
              free(v18);
            }
            v17 -= 160;
          }
          while (v17);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if (v6)
          {
            int v19 = *(char **)a1;
            uint64_t v20 = 160 * v6;
            do
            {
              BOOL v21 = *(char **)&v19[v20 - 160];
              if (&v19[v20 - 144] != v21) {
                free(v21);
              }
              v20 -= 160;
            }
            while (v20);
          }
          *(_DWORD *)(a1 + 8) = 0;
          sub_1CD727090();
        }
        if (v6)
        {
          uint64_t v7 = &v4[160 * v6];
          uint64_t v8 = *(void *)a1;
          do
          {
            sub_1CD727100(v8, (uint64_t)v4);
            *(_OWORD *)(v8 + 144) = *((_OWORD *)v4 + 9);
            v4 += 160;
            v8 += 160;
          }
          while (v4 != v7);
        }
        else
        {
          uint64_t v6 = 0;
        }
        unint64_t v22 = *(char **)a2;
        uint64_t v23 = *(unsigned int *)(a2 + 8);
        if (v6 != v23)
        {
          uint64_t v24 = *(char **)a1;
          uint64_t v25 = 160 * v6;
          uint64_t v26 = 160 * v23;
          do
          {
            uint64_t v27 = &v24[v25];
            int v28 = &v22[v25];
            *(void *)uint64_t v27 = &v24[v25 + 16];
            *((void *)v27 + 1) = 0x800000000;
            if (*(_DWORD *)&v22[v25 + 8]) {
              sub_1CD727100((uint64_t)&v24[v25], (uint64_t)&v22[v25]);
            }
            v22 += 160;
            *((_OWORD *)v27 + 9) = *((_OWORD *)v28 + 9);
            v24 += 160;
            v26 -= 160;
          }
          while (v25 != v26);
          unint64_t v22 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v29 = *(unsigned int *)(a2 + 8);
        if (v29)
        {
          uint64_t v30 = 160 * v29;
          do
          {
            BOOL v31 = *(char **)&v22[v30 - 160];
            if (&v22[v30 - 144] != v31) {
              free(v31);
            }
            v30 -= 160;
          }
          while (v30);
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1CD727000((char **)a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD727000(char **a1, char **a2)
{
  long long v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 160 * v5;
    do
    {
      uint64_t v7 = *(char **)&v4[v6 - 160];
      if (&v4[v6 - 144] != v7) {
        free(v7);
      }
      v6 -= 160;
    }
    while (v6);
    long long v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_1CD727090()
{
}

uint64_t sub_1CD727100(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    long long v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 16 * v9 - 4);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 16 * v10 - 4);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 16 * v10), (const void *)(*(void *)a2 + 16 * v10), *(void *)a2 + 16 * v11 - (*(void *)a2 + 16 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        long long v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

void sub_1CD727220(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = 160 * v2;
    do
    {
      *(void *)a2 = a2 + 16;
      *(void *)(a2 + 8) = 0x800000000;
      if (*(_DWORD *)(v5 + 8)) {
        sub_1CD727100(a2, v5);
      }
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(v5 + 144);
      v5 += 160;
      a2 += 160;
      v6 -= 160;
    }
    while (v6);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = 160 * v7;
      do
      {
        uint64_t v10 = *(void **)(v8 + v9 - 160);
        if ((void *)(v8 + v9 - 144) != v10) {
          free(v10);
        }
        v9 -= 160;
      }
      while (v9);
    }
  }
}

uint64_t sub_1CD7272E4(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)result + 672 * v2;
    uint64_t v5 = (void *)(a2 + 16);
    uint64_t v6 = *(void *)result + 16;
    do
    {
      *((_OWORD *)v5 - 1) = *(_OWORD *)(v6 - 16);
      *uint64_t v5 = v5 + 2;
      v5[1] = 0x400000000;
      if (*(_DWORD *)(v6 + 8)) {
        double result = sub_1CD726D90((uint64_t)v5, v6);
      }
      uint64_t v7 = v6 - 16;
      v5 += 84;
      v6 += 672;
    }
    while (v7 + 672 != v4);
    unsigned int v8 = *(_DWORD *)(v3 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)v3 - 656;
      uint64_t v10 = 672 * v8;
      do
      {
        double result = (uint64_t)sub_1CD719C7C((char **)(v9 + v10));
        v10 -= 672;
      }
      while (v10);
    }
  }
  return result;
}

void *sub_1CD7273A8(void *a1)
{
  *a1 = &unk_1F2636A50;
  sub_1CD719B68((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD7273EC(void *a1)
{
  *a1 = &unk_1F2636A50;
  sub_1CD719B68((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD727450()
{
}

llvm::raw_ostream *sub_1CD727458(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727474(a2, a3, a4);
}

uint64_t sub_1CD72746C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727474(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD700934();
  uint64_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD727524()
{
}

void sub_1CD727538()
{
}

llvm::raw_ostream *sub_1CD727540(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727554(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72754C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727554(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7009F0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD727604()
{
}

void sub_1CD727618()
{
}

llvm::raw_ostream *sub_1CD727620(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727634(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72762C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727634(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700AAC();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7276E4()
{
}

void *sub_1CD7276F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CD8C5600(a1, a2);
}

llvm::raw_ostream *sub_1CD727700(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727714(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72770C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD727714(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700B68();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7277C4()
{
}

double sub_1CD7277D8@<D0>(llvm::PointerType *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CD8C51E4(a1, a2);
}

llvm::raw_ostream *sub_1CD7277E0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7277F4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD7277EC()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7277F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700C24();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7278A4()
{
}

llvm::raw_ostream *sub_1CD7278B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7278C0(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7278C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC924D4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD727970()
{
}

void sub_1CD727984()
{
}

llvm::raw_ostream *sub_1CD72798C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7279A8(a2, a3, a4);
}

uint64_t sub_1CD7279A0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7279A8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD700CE0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD727A58()
{
}

void sub_1CD727A6C()
{
}

llvm::raw_ostream *sub_1CD727A74(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727A88(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD727A80()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727A88(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700D9C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD727B38()
{
}

void sub_1CD727B4C()
{
}

llvm::raw_ostream *sub_1CD727B54(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727B68(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD727B60()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727B68(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD700E58();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD727C18()
{
}

llvm::raw_ostream *sub_1CD727C2C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727C34(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD727C34(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92590();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD727CE4()
{
}

double sub_1CD727CF8@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::CFGPrinterPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD727D00(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727D1C(a2, a3, a4);
}

uint64_t sub_1CD727D14()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727D1C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD700F14();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD727DCC()
{
}

double sub_1CD727DE0@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::CFGOnlyPrinterPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD727DE8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727E04(a2, a3, a4);
}

uint64_t sub_1CD727DFC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727E04(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD700FD0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD727EB4()
{
}

void sub_1CD727EC8()
{
}

llvm::raw_ostream *sub_1CD727ED0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727EEC(a2, a3, a4);
}

uint64_t sub_1CD727EE4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727EEC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70108C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD727F9C()
{
}

void sub_1CD727FB0()
{
}

llvm::raw_ostream *sub_1CD727FB8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD727FD4(a2, a3, a4);
}

uint64_t sub_1CD727FCC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD727FD4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701148();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD728084()
{
}

void sub_1CD728098()
{
}

llvm::raw_ostream *sub_1CD7280A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7280BC(a2, a3, a4);
}

uint64_t sub_1CD7280B4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7280BC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701204();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72816C()
{
}

void sub_1CD728180()
{
}

llvm::raw_ostream *sub_1CD728188(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7281A4(a2, a3, a4);
}

uint64_t sub_1CD72819C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7281A4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7012C0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD728254()
{
}

double sub_1CD728268@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::MakeGuardsExplicitPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD728270(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72828C(a2, a3, a4);
}

uint64_t sub_1CD728284()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72828C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70137C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72833C()
{
}

void sub_1CD728350()
{
}

llvm::raw_ostream *sub_1CD728358(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72836C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD728364()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72836C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD701438();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72841C()
{
}

uint64_t sub_1CD728430@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::GVNSinkPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD728438(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72844C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD728444()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72844C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7014F4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7284FC()
{
}

double sub_1CD728510@<D0>(uint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::HelloWorldPass::run((llvm *)(a1 + 8), a2, a3);
}

llvm::raw_ostream *sub_1CD728518(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD728534(a2, a3, a4);
}

uint64_t sub_1CD72852C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD728534(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7015B0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7285E4()
{
}

void sub_1CD7285F8()
{
}

llvm::raw_ostream *sub_1CD728600(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72861C(a2, a3, a4);
}

uint64_t sub_1CD728614()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72861C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70166C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD7286C8(void *a1)
{
  *a1 = &unk_1F2639F10;
  sub_1CC9E8C24((uint64_t)(a1 + 1));
  return a1;
}

llvm::raw_ostream *sub_1CD72870C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD728714(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD728714(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC9264C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7287C4()
{
}

double sub_1CD7287D8@<D0>(uint64_t a1@<X8>)
{
  return llvm::InstCountPass::run(a1);
}

llvm::raw_ostream *sub_1CD7287E0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7287FC(a2, a3, a4);
}

uint64_t sub_1CD7287F4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7287FC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701728();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7288AC()
{
}

llvm::raw_ostream *sub_1CD7288C0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7288C8(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7288C8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92708();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD728978()
{
}

double sub_1CD72898C@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)&double result = 2;
  *(void *)(a1 + 16) = 2;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(_DWORD *)(a1 + 64) = 2;
  return result;
}

llvm::raw_ostream *sub_1CD7289CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7228C4(a2, a3, a4);
}

uint64_t sub_1CD7289E0()
{
  return 0;
}

void sub_1CD7289EC()
{
}

void sub_1CD728A00()
{
}

llvm::raw_ostream *sub_1CD728A08(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD728A24(a2, a3, a4);
}

uint64_t sub_1CD728A1C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD728A24(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7017E4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD728AD0(void *a1, uint64_t a2)
{
  sub_1CD46AEB4((uint64_t)a1, a2);
  sub_1CD728B38(v4 + 48, a2 + 48);
  a1[27] = 0;
  a1[26] = 0;
  a1[25] = a1 + 26;
  sub_1CD728BB0((uint64_t)(a1 + 25), (void *)(a2 + 200));
  sub_1CD46AEB4((uint64_t)(a1 + 29), a2 + 232);
  a1[35] = *(void *)(a2 + 280);
  return a1;
}

uint64_t sub_1CD728B38(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 1;
  int64x2_t v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  *(int64x2_t *)(a1 + 40) = v4;
  *(int64x2_t *)(a1 + 56) = v4;
  sub_1CD65E534((unsigned int *)a1, (unsigned int *)a2);
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 0x800000000;
  if (*(_DWORD *)(a2 + 80)) {
    sub_1CBA6E388(a1 + 72, (const void **)(a2 + 72));
  }
  return a1;
}

uint64_t sub_1CD728BB0(uint64_t a1, void *a2)
{
  int64x2_t v4 = (void *)(a1 + 8);
  sub_1CB833A08(a1, *(void **)(a1 + 8));
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *int64x2_t v4 = 0;
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      if (v6[5])
      {
        uint64_t v18 = (uint64_t)&v18;
        uint64_t v19 = 1;
        uint64_t v20 = v6[6];
        size_t v11 = sub_1CD728D0C((uint64_t **)a1, (uint64_t)&v18, (uint64_t)&v18);
        unint64_t v12 = v6[5] & 0xFFFFFFFFFFFFFFFELL;
        if (v12)
        {
          if ((_BYTE)v11[5]) {
            uint64_t v13 = v11 + 4;
          }
          else {
            uint64_t v13 = 0;
          }
          do
          {
            uint64_t v18 = (uint64_t)&v18;
            uint64_t v19 = 1;
            uint64_t v20 = *(void *)(v12 + 16);
            unsigned int v14 = sub_1CD728D0C((uint64_t **)a1, (uint64_t)&v18, (uint64_t)&v18);
            unint64_t v15 = (unint64_t)(v14 + 4);
            if (((_BYTE)v14[5] & 1) == 0) {
              unint64_t v15 = 0;
            }
            if (v13 != (uint64_t **)v15)
            {
              (*v13)[1] = (*v13)[1] & 1 | v15;
              *uint64_t v13 = *(uint64_t **)v15;
              unint64_t v16 = *(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFFELL;
              *(void *)unint64_t v15 = v13;
              *(void *)(v15 + 8) = v16;
            }
            unint64_t v12 = *(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v12);
        }
      }
      size_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          size_t v9 = v8;
          size_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          size_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v5);
  }
  return a1;
}

uint64_t **sub_1CD728D0C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    while (1)
    {
      while (1)
      {
        size_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[6];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)v8;
    size_t v8 = (uint64_t **)operator new(0x38uLL);
    v8[4] = (uint64_t *)(v8 + 4);
    v8[5] = (uint64_t *)1;
    v8[6] = *(uint64_t **)(a3 + 16);
    *size_t v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *uint64_t v6 = (uint64_t *)v8;
    size_t v11 = (uint64_t *)**a1;
    unint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unint64_t v12 = *v6;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void *sub_1CD728DF8(void *a1)
{
  *a1 = &unk_1F263B4D0;
  sub_1CD719D3C((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD728E3C(void *a1)
{
  *a1 = &unk_1F263B4D0;
  sub_1CD719D3C((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD728EA0()
{
}

llvm::raw_ostream *sub_1CD728EA8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD728EBC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD728EB4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD728EBC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD7018A0();
  BOOL v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD728F6C()
{
}

void sub_1CD728F80()
{
}

llvm::raw_ostream *sub_1CD728F88(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v6 = (const void *)a3(a4, "LibCallsShrinkWrapPass", 22);
  size_t v7 = v5;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v5 <= *((void *)a2 + 3) - (void)result)
  {
    if (v5)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v6, v5);
      *((void *)a2 + 4) += v7;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v6, v5);
  }
  return result;
}

const char *sub_1CD72901C()
{
  return "LibCallsShrinkWrapPass";
}

uint64_t sub_1CD72902C()
{
  return 0;
}

void sub_1CD729038()
{
}

void sub_1CD72904C()
{
}

llvm::raw_ostream *sub_1CD729054(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729070(a2, a3, a4);
}

uint64_t sub_1CD729068()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729070(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70195C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729120()
{
}

void sub_1CD729134()
{
}

llvm::raw_ostream *sub_1CD72913C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729150(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD729148()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729150(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD701A18();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD729200()
{
}

double sub_1CD729214@<D0>(llvm::Function *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::InstructionNamerPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD72921C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729238(a2, a3, a4);
}

uint64_t sub_1CD729230()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729238(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701AD4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7292E8()
{
}

double sub_1CD7292FC@<D0>(llvm::AtomicCmpXchgInst *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::LowerAtomicPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD729304(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729320(a2, a3, a4);
}

uint64_t sub_1CD729318()
{
  return 1;
}

llvm::raw_ostream *sub_1CD729320(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701B90();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7293D0()
{
}

llvm::raw_ostream *sub_1CD7293E4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7293EC(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7293EC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC927C4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72949C()
{
}

double sub_1CD7294B0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::LowerGuardIntrinsicPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD7294B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7294D4(a2, a3, a4);
}

uint64_t sub_1CD7294CC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7294D4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701C4C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729584()
{
}

llvm::raw_ostream *sub_1CD729598(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7295A0(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7295A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92880();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD729650()
{
}

double sub_1CD729664@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::LowerWidenableConditionPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72966C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729688(a2, a3, a4);
}

uint64_t sub_1CD729680()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729688(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701D08();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729738()
{
}

void sub_1CD72974C()
{
}

llvm::raw_ostream *sub_1CD729754(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729770(a2, a3, a4);
}

uint64_t sub_1CD729768()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729770(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701DC4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729820()
{
}

void sub_1CD729834(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

llvm::raw_ostream *sub_1CD72983C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729858(a2, a3, a4);
}

uint64_t sub_1CD729850()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729858(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701E80();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729908()
{
}

llvm::raw_ostream *sub_1CD72991C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729924(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD729924(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC929F8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD7299D4()
{
}

double sub_1CD7299E8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::LowerInvokePass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD7299F0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729A0C(a2, a3, a4);
}

uint64_t sub_1CD729A04()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729A0C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701F3C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729ABC()
{
}

void sub_1CD729AD0()
{
}

llvm::raw_ostream *sub_1CD729AD8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729AF4(a2, a3, a4);
}

uint64_t sub_1CD729AEC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729AF4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD701FF8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729BA4()
{
}

llvm::raw_ostream *sub_1CD729BB8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729BC0(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD729BC0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92AB4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD729C70()
{
}

llvm::raw_ostream *sub_1CD729C84(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729C8C(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD729C8C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92B70();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD729D3C()
{
}

void sub_1CD729D50()
{
}

llvm::raw_ostream *sub_1CD729D58(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729D74(a2, a3, a4);
}

uint64_t sub_1CD729D6C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729D74(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7020B4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD729E24()
{
}

double sub_1CD729E38@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::UnifyFunctionExitNodesPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD729E40(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729E5C(a2, a3, a4);
}

uint64_t sub_1CD729E54()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729E5C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702170();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD729F08(void *a1)
{
  *a1 = &unk_1F26370D0;
  sub_1CD719DF8(a1 + 7);
  return a1;
}

void sub_1CD729F4C(void *a1)
{
  *a1 = &unk_1F26370D0;
  sub_1CD719DF8(a1 + 7);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD729FB0()
{
}

llvm::raw_ostream *sub_1CD729FB8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729FD4(a2, a3, a4);
}

uint64_t sub_1CD729FCC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD729FD4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70222C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72A084()
{
}

void sub_1CD72A098()
{
}

llvm::raw_ostream *sub_1CD72A0A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A0B4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72A0AC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A0B4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7022E8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void *sub_1CD72A160(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x1000000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CD72A1EC((uint64_t)a1, a2);
  }
  a1[18] = *(void *)(a2 + 144);
  int64x2_t v4 = (void *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 152);
  a1[19] = v5;
  uint64_t v6 = a1 + 19;
  uint64_t v7 = *(void *)(a2 + 160);
  a1[20] = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 144) = v4;
    *int64x2_t v4 = 0;
    *(void *)(a2 + 160) = 0;
  }
  else
  {
    a1[18] = v6;
  }
  return a1;
}

uint64_t sub_1CD72A1EC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 16;
    int64x2_t v4 = *(uint64_t **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9)
        {
          size_t v11 = *(void **)a1;
          uint64_t v12 = 8 * v9;
          do
          {
            uint64_t v13 = *v4++;
            *v11++ = v13;
            v12 -= 8;
          }
          while (v12);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10)
        {
          unsigned int v14 = *(void **)a1;
          uint64_t v15 = 8 * v10;
          do
          {
            uint64_t v16 = *v4++;
            *v14++ = v16;
            v15 -= 8;
          }
          while (v15);
        }
        else
        {
          uint64_t v10 = 0;
        }
        if (v10 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v10), (const void *)(*(void *)a2 + 8 * v10), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        int64x2_t v4 = *(uint64_t **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

void *sub_1CD72A320(void *a1)
{
  *a1 = &unk_1F263A550;
  sub_1CD719E60((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD72A364(void *a1)
{
  *a1 = &unk_1F263A550;
  sub_1CD719E60((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD72A3C8()
{
}

llvm::raw_ostream *sub_1CD72A3D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A3E4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72A3DC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A3E4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7023A4();
  uint64_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72A494()
{
}

void sub_1CD72A4A8()
{
}

llvm::raw_ostream *sub_1CD72A4B0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A4CC(a2, a3, a4);
}

uint64_t sub_1CD72A4C4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A4CC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702460();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72A57C()
{
}

void sub_1CD72A590()
{
}

llvm::raw_ostream *sub_1CD72A598(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A5B4(a2, a3, a4);
}

uint64_t sub_1CD72A5AC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A5B4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70251C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72A664()
{
}

llvm::raw_ostream *sub_1CD72A678(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A680(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72A680(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92CE8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72A730()
{
}

void sub_1CD72A744()
{
}

llvm::raw_ostream *sub_1CD72A74C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A768(a2, a3, a4);
}

uint64_t sub_1CD72A760()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A768(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7025D8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72A818()
{
}

void sub_1CD72A82C()
{
}

llvm::raw_ostream *sub_1CD72A834(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A848(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72A840()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A848(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD702694();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72A8F8()
{
}

void sub_1CD72A90C()
{
}

llvm::raw_ostream *sub_1CD72A914(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72A930(a2, a3, a4);
}

uint64_t sub_1CD72A928()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72A930(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702750();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72A9E0()
{
}

void sub_1CD72A9F4(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD72A9FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72AA18(a2, a3, a4);
}

uint64_t sub_1CD72AA10()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72AA18(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70280C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72AAC8()
{
}

void sub_1CD72AADC(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD72AAE4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72AB00(a2, a3, a4);
}

uint64_t sub_1CD72AAF8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72AB00(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7028C8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72ABB0()
{
}

double sub_1CD72ABC4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::ObjCARCExpandPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72ABCC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72ABE8(a2, a3, a4);
}

uint64_t sub_1CD72ABE0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72ABE8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702984();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72AC98()
{
}

void sub_1CD72ACAC()
{
}

llvm::raw_ostream *sub_1CD72ACB4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72ACC8(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72ACC0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72ACC8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD702A40();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD72AD74(uint64_t a1)
{
  *(void *)a1 = &unk_1F26372D0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD72ADC4(uint64_t a1)
{
  *(void *)a1 = &unk_1F26372D0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD72AE34@<D0>(uint64_t a1@<X0>, const std::string **a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::PrintFunctionPass::run(a2, a1 + 8, a3);
}

llvm::raw_ostream *sub_1CD72AE3C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72AE58(a2, a3, a4);
}

uint64_t sub_1CD72AE50()
{
  return 1;
}

llvm::raw_ostream *sub_1CD72AE58(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702AFC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72AF08()
{
}

void sub_1CD72AF1C()
{
}

llvm::raw_ostream *sub_1CD72AF24(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72AF40(a2, a3, a4);
}

uint64_t sub_1CD72AF38()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72AF40(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702BB8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72AFF0()
{
}

void sub_1CD72B004(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B00C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B028(a2, a3, a4);
}

uint64_t sub_1CD72B020()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B028(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702C74();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B0D8()
{
}

void sub_1CD72B0EC(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B0F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B110(a2, a3, a4);
}

uint64_t sub_1CD72B108()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B110(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702D30();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B1C0()
{
}

void sub_1CD72B1D4()
{
}

llvm::raw_ostream *sub_1CD72B1DC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B1F8(a2, a3, a4);
}

uint64_t sub_1CD72B1F0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B1F8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702DEC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B2A8()
{
}

void sub_1CD72B2BC(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B2C4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B2E0(a2, a3, a4);
}

uint64_t sub_1CD72B2D8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B2E0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702EA8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B390()
{
}

void sub_1CD72B3A4(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B3AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B3C8(a2, a3, a4);
}

uint64_t sub_1CD72B3C0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B3C8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD702F64();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B478()
{
}

void sub_1CD72B48C()
{
}

llvm::raw_ostream *sub_1CD72B494(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B4B0(a2, a3, a4);
}

uint64_t sub_1CD72B4A8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B4B0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703020();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B560()
{
}

void sub_1CD72B574(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B57C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B598(a2, a3, a4);
}

uint64_t sub_1CD72B590()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B598(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7030DC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B648()
{
}

void sub_1CD72B65C(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B664(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B680(a2, a3, a4);
}

uint64_t sub_1CD72B678()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B680(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703198();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B730()
{
}

void sub_1CD72B744()
{
}

llvm::raw_ostream *sub_1CD72B74C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B768(a2, a3, a4);
}

uint64_t sub_1CD72B760()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B768(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703254();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B818()
{
}

void sub_1CD72B82C()
{
}

llvm::raw_ostream *sub_1CD72B834(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B850(a2, a3, a4);
}

uint64_t sub_1CD72B848()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B850(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703310();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B900()
{
}

void sub_1CD72B914(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72B91C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72B938(a2, a3, a4);
}

uint64_t sub_1CD72B930()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72B938(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7033CC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72B9E8()
{
}

void sub_1CD72B9FC(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72BA04(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BA20(a2, a3, a4);
}

uint64_t sub_1CD72BA18()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BA20(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703488();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72BAD0()
{
}

void sub_1CD72BAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

llvm::raw_ostream *sub_1CD72BAEC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BB08(a2, a3, a4);
}

uint64_t sub_1CD72BB00()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BB08(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703544();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72BBB8()
{
}

void sub_1CD72BBCC(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72BBD4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BBF0(a2, a3, a4);
}

uint64_t sub_1CD72BBE8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BBF0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703600();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72BCA0()
{
}

void sub_1CD72BCB4()
{
}

llvm::raw_ostream *sub_1CD72BCBC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BCD8(a2, a3, a4);
}

uint64_t sub_1CD72BCD0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BCD8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7036BC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72BD88()
{
}

void sub_1CD72BD9C()
{
}

llvm::raw_ostream *sub_1CD72BDA4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BDC0(a2, a3, a4);
}

uint64_t sub_1CD72BDB8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BDC0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703778();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72BE70()
{
}

void sub_1CD72BE84()
{
}

llvm::raw_ostream *sub_1CD72BE8C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BEA8(a2, a3, a4);
}

uint64_t sub_1CD72BEA0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BEA8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703834();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72BF58()
{
}

void sub_1CD72BF6C()
{
}

llvm::raw_ostream *sub_1CD72BF74(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72BF90(a2, a3, a4);
}

uint64_t sub_1CD72BF88()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72BF90(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7038F0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C040()
{
}

void sub_1CD72C054(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72C05C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C078(a2, a3, a4);
}

uint64_t sub_1CD72C070()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C078(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7039AC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C128()
{
}

void sub_1CD72C13C(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72C144(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C160(a2, a3, a4);
}

uint64_t sub_1CD72C158()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C160(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703A68();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C210()
{
}

void sub_1CD72C224(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72C22C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C248(a2, a3, a4);
}

uint64_t sub_1CD72C240()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C248(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703B24();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C2F8()
{
}

void sub_1CD72C30C(uint64_t a1, llvm::Value *a2)
{
}

llvm::raw_ostream *sub_1CD72C314(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C330(a2, a3, a4);
}

uint64_t sub_1CD72C328()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C330(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703BE0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C3E0()
{
}

void sub_1CD72C3F4()
{
}

llvm::raw_ostream *sub_1CD72C3FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C418(a2, a3, a4);
}

uint64_t sub_1CD72C410()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C418(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703C9C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C4C8()
{
}

void sub_1CD72C4DC()
{
}

llvm::raw_ostream *sub_1CD72C4E4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C500(a2, a3, a4);
}

uint64_t sub_1CD72C4F8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C500(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703D58();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C5B0()
{
}

void sub_1CD72C5C4()
{
}

llvm::raw_ostream *sub_1CD72C5CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C5E8(a2, a3, a4);
}

uint64_t sub_1CD72C5E0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C5E8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703E14();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72C698()
{
}

void sub_1CD72C6AC(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
}

llvm::raw_ostream *sub_1CD72C6B4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C6D0(a2, a3, a4);
}

uint64_t sub_1CD72C6C8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C6D0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703ED0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

double sub_1CD72C77C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return result;
}

void *sub_1CD72C800(void *a1)
{
  *a1 = &unk_1F2639F90;
  sub_1CCCB6DC0(a1 + 1);
  return a1;
}

void sub_1CD72C844(void *a1)
{
  *a1 = &unk_1F2639F90;
  sub_1CCCB6DC0(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD72C8A8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C8B0(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72C8B0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92DA4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72C960()
{
}

double sub_1CD72C974@<D0>(llvm::BasicBlock *a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::RedundantDbgInstEliminationPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72C97C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72C998(a2, a3, a4);
}

uint64_t sub_1CD72C990()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72C998(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD703F8C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72CA48()
{
}

void sub_1CD72CA5C()
{
}

llvm::raw_ostream *sub_1CD72CA64(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72CA80(a2, a3, a4);
}

uint64_t sub_1CD72CA78()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72CA80(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704048();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72CB30()
{
}

void sub_1CD72CB44()
{
}

llvm::raw_ostream *sub_1CD72CB4C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72CB68(a2, a3, a4);
}

uint64_t sub_1CD72CB60()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72CB68(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704104();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72CC18()
{
}

void sub_1CD72CC2C(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD72CC34(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72CC50(a2, a3, a4);
}

uint64_t sub_1CD72CC48()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72CC50(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7041C0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72CD00()
{
}

void sub_1CD72CD14()
{
}

llvm::raw_ostream *sub_1CD72CD1C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72CD38(a2, a3, a4);
}

uint64_t sub_1CD72CD30()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72CD38(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70427C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72CDE8()
{
}

llvm::raw_ostream *sub_1CD72CDFC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72CE04(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72CE04(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92E60();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72CEB4()
{
}

void sub_1CD72CEC8()
{
}

llvm::raw_ostream *sub_1CD72CED0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72CEEC(a2, a3, a4);
}

uint64_t sub_1CD72CEE4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72CEEC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704338();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD72CF98(void *a1)
{
  *a1 = &unk_1F263B310;
  sub_1CD719F1C((uint64_t)(a1 + 16));
  sub_1CD719F1C((uint64_t)(a1 + 10));
  return a1;
}

void sub_1CD72CFE4(void *a1)
{
  *a1 = &unk_1F263B310;
  sub_1CD719F1C((uint64_t)(a1 + 16));
  sub_1CD719F1C((uint64_t)(a1 + 10));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD72D050()
{
}

llvm::raw_ostream *sub_1CD72D058(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72D06C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72D064()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72D06C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7043F4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72D11C()
{
}

void sub_1CD72D130()
{
}

llvm::raw_ostream *sub_1CD72D138(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72D154(a2, a3, a4);
}

uint64_t sub_1CD72D14C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72D154(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7044B0();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72D204()
{
}

llvm::raw_ostream *sub_1CD72D218(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72D220(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72D220(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92F1C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD72D2CC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_1CCCBCC00(a1 + 24, (uint64_t)a2 + 24);
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x800000000;
  if (*((_DWORD *)a2 + 50)) {
    sub_1CD72D390(a1 + 192, (uint64_t)(a2 + 12));
  }
  sub_1CCCBCC00(a1 + 400, (uint64_t)(a2 + 25));
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 568) = *((void *)a2 + 71);
  *(void *)(a1 + 576) = *((void *)a2 + 72);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  *((void *)a2 + 73) = 0;
  *(long long *)((char *)a2 + 568) = 0u;
  sub_1CD72D658(a1 + 592, (uint64_t)(a2 + 37));
  sub_1CD72D658(a1 + 648, (uint64_t)a2 + 648);
  return a1;
}

uint64_t sub_1CD72D390(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v4 = *(char **)a2;
    if (*(void *)a2 != a2 + 16)
    {
      sub_1CD72D5BC((char **)a1, (char **)a2);
      return a1;
    }
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      uint64_t v16 = *(char **)a1;
      if (v5)
      {
        uint64_t v17 = 24 * v5;
        do
        {
          sub_1CBF62D84((unint64_t *)v16, (uint64_t *)v4);
          v4 += 24;
          v16 += 24;
          v17 -= 24;
        }
        while (v17);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(char **)a1;
      }
      else
      {
        uint64_t v18 = *(char **)a1;
      }
      uint64_t v19 = &v18[24 * v6];
      while (v19 != v16)
      {
        uint64_t v20 = *((void *)v19 - 1);
        v19 -= 24;
        if (v20 != -8192 && v20 != -4096 && v20 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList(v19);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      uint64_t v22 = *(unsigned int *)(a2 + 8);
      if (v22)
      {
        uint64_t v23 = *(char **)a2;
        uint64_t v24 = 24 * v22;
        do
        {
          uint64_t v25 = *(void *)&v23[v24 - 8];
          if (v25 != -8192 && v25 != -4096 && v25 != 0) {
            llvm::ValueHandleBase::RemoveFromUseList(&v23[v24 - 24]);
          }
          v24 -= 24;
        }
        while (v24);
      }
      goto LABEL_47;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if (v6)
      {
        int v28 = *(char **)a1;
        uint64_t v29 = 24 * v6;
        do
        {
          sub_1CBF62D84((unint64_t *)v28, (uint64_t *)v4);
          v4 += 24;
          v28 += 24;
          v29 -= 24;
        }
        while (v29);
LABEL_16:
        sub_1CCCBCC94((void *)(*(void *)a2 + 24 * v6), (void *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8)), (unint64_t *)(*(void *)a1 + 24 * v6));
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v11 = *(unsigned int *)(a2 + 8);
        if (v11)
        {
          uint64_t v12 = *(char **)a2;
          uint64_t v13 = 24 * v11;
          do
          {
            uint64_t v14 = *(void *)&v12[v13 - 8];
            if (v14 != -8192 && v14 != -4096 && v14 != 0) {
              llvm::ValueHandleBase::RemoveFromUseList(&v12[v13 - 24]);
            }
            v13 -= 24;
          }
          while (v13);
        }
LABEL_47:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *(char **)a1;
        uint64_t v8 = 24 * v6;
        do
        {
          uint64_t v9 = *(void *)&v7[v8 - 8];
          if (v9 != -8192 && v9 != -4096 && v9 != 0) {
            llvm::ValueHandleBase::RemoveFromUseList(&v7[v8 - 24]);
          }
          v8 -= 24;
        }
        while (v8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1CC0BD844((unsigned int *)a1, v5);
    }
    uint64_t v6 = 0;
    goto LABEL_16;
  }
  return a1;
}

double sub_1CD72D5BC(char **a1, char **a2)
{
  long long v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 24 * v5;
    do
    {
      uint64_t v7 = *(void *)&v4[v6 - 8];
      if (v7 != -8192 && v7 != -4096 && v7 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(&v4[v6 - 24]);
      }
      v6 -= 24;
    }
    while (v6);
    long long v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1CD72D658(uint64_t result, uint64_t a2)
{
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)double result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(result + 24) = result + 40;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 32) = 0x200000000;
  if (*(_DWORD *)(a2 + 32))
  {
    uint64_t v4 = result;
    sub_1CD41C56C(result + 24, a2 + 24);
    return v4;
  }
  return result;
}

void *sub_1CD72D6EC(void *a1)
{
  *a1 = &unk_1F2639E50;
  sub_1CCCB7148((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD72D730(void *a1)
{
  *a1 = &unk_1F2639E50;
  sub_1CCCB7148((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD72D794(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72D79C(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72D79C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC92FD8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72D84C()
{
}

double sub_1CD72D860@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::StripGCRelocates::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72D868(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72D884(a2, a3, a4);
}

uint64_t sub_1CD72D87C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72D884(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70456C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72D934()
{
}

void sub_1CD72D948()
{
}

llvm::raw_ostream *sub_1CD72D950(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72D96C(a2, a3, a4);
}

uint64_t sub_1CD72D964()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72D96C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704628();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72DA1C()
{
}

llvm::raw_ostream *sub_1CD72DA30(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DA38(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72DA38(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC93094();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72DAE8()
{
}

void sub_1CD72DAFC()
{
}

llvm::raw_ostream *sub_1CD72DB04(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DB20(a2, a3, a4);
}

uint64_t sub_1CD72DB18()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72DB20(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7046E4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72DBD0()
{
}

void sub_1CD72DBE4()
{
}

llvm::raw_ostream *sub_1CD72DBEC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DC00(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72DBF8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72DC00(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD7047A0();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72DCB0()
{
}

void sub_1CD72DCC4()
{
}

llvm::raw_ostream *sub_1CD72DCCC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  return sub_1CD69EF54(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72DCD8()
{
  return 1;
}

void sub_1CD72DCE4()
{
}

void sub_1CD72DCF8()
{
}

llvm::raw_ostream *sub_1CD72DD00(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DD1C(a2, a3, a4);
}

uint64_t sub_1CD72DD14()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72DD1C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD70485C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72DDCC()
{
}

void sub_1CD72DDE0()
{
}

llvm::raw_ostream *sub_1CD72DDE8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DE04(a2, a3, a4);
}

uint64_t sub_1CD72DDFC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72DE04(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704918();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72DEB4()
{
}

void sub_1CD72DEC8()
{
}

llvm::raw_ostream *sub_1CD72DED0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DEEC(a2, a3, a4);
}

uint64_t sub_1CD72DEE4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72DEEC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD7049D4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72DF9C()
{
}

void sub_1CD72DFB0()
{
}

llvm::raw_ostream *sub_1CD72DFB8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72DFD4(a2, a3, a4);
}

uint64_t sub_1CD72DFCC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72DFD4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704A90();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72E084()
{
}

void sub_1CD72E098()
{
}

llvm::raw_ostream *sub_1CD72E0A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E0BC(a2, a3, a4);
}

uint64_t sub_1CD72E0B4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72E0BC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704B4C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72E16C()
{
}

void sub_1CD72E180()
{
}

llvm::raw_ostream *sub_1CD72E188(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E1A4(a2, a3, a4);
}

uint64_t sub_1CD72E19C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72E1A4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704C08();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72E254()
{
}

double sub_1CD72E268@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::CFGViewerPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD72E270(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E28C(a2, a3, a4);
}

uint64_t sub_1CD72E284()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72E28C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704CC4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72E33C()
{
}

double sub_1CD72E350@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  return llvm::CFGOnlyViewerPass::run(this, a2);
}

llvm::raw_ostream *sub_1CD72E358(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E374(a2, a3, a4);
}

uint64_t sub_1CD72E36C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72E374(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704D80();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void *sub_1CD72E420(void *a1)
{
  *a1 = &unk_1F2637E90;
  sub_1CD719F64((uint64_t)(a1 + 3));
  return a1;
}

void sub_1CD72E464(void *a1)
{
  *a1 = &unk_1F2637E90;
  sub_1CD719F64((uint64_t)(a1 + 3));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD72E4C8()
{
}

llvm::raw_ostream *sub_1CD72E4D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E4EC(a2, a3, a4);
}

uint64_t sub_1CD72E4E4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72E4EC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704E3C();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72E59C()
{
}

double sub_1CD72E5B0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::WarnMissedTransformationsPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72E5B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E5CC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72E5C4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72E5CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD704EF8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72E67C()
{
}

void sub_1CD72E690()
{
}

llvm::raw_ostream *sub_1CD72E698(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E6B4(a2, a3, a4);
}

uint64_t sub_1CD72E6AC()
{
  return 1;
}

llvm::raw_ostream *sub_1CD72E6B4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_1CD704FB4();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72E764()
{
}

double sub_1CD72E778@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::MemProfilerPass::run(a1, a2);
}

llvm::raw_ostream *sub_1CD72E780(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72E794(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72E78C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD72E794(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD705070();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72E844()
{
}

llvm::raw_ostream *sub_1CD72E858(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::EarlyCSEPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

void sub_1CD72E864()
{
}

void sub_1CD72E878(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
}

llvm::raw_ostream *sub_1CD72E880(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::EntryExitInstrumenterPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD72E88C()
{
  return 1;
}

char *sub_1CD72E894()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::EntryExitInstrumenterPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  int v2 = &aStringrefLlvmG_326[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD72E954()
{
}

void sub_1CD72E968()
{
}

llvm::raw_ostream *sub_1CD72E970(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::LowerMatrixIntrinsicsPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD72E97C()
{
  return 1;
}

char *sub_1CD72E984()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerMatrixIntrinsicsPass]";
  v10[1] = 81;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51) {
    uint64_t v1 = 81;
  }
  else {
    uint64_t v1 = v0;
  }
  int v2 = &aStringrefLlvmG_327[v1];
  unint64_t v3 = 81 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD72EA44()
{
}

void sub_1CD72EA58()
{
}

llvm::raw_ostream *sub_1CD72EA60(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::LoopUnrollPass::printPipeline(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72EA6C()
{
  return 0;
}

char *sub_1CD72EA74()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopUnrollPass]";
  v10[1] = 70;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46) {
    uint64_t v1 = 70;
  }
  else {
    uint64_t v1 = v0;
  }
  int v2 = &aStringrefLlvmG_328[v1];
  unint64_t v3 = 70 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD72EB34()
{
}

void sub_1CD72EB48(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD72EB50(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::MemorySanitizerPass::printPipeline(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72EB5C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD72EB68(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::SimplifyCFGPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

void sub_1CD72EB74()
{
}

void sub_1CD72EB88()
{
}

llvm::raw_ostream *sub_1CD72EB90(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::LoopVectorizePass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD72EB9C()
{
  return 0;
}

char *sub_1CD72EBA4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVectorizePass]";
  v10[1] = 73;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49) {
    uint64_t v1 = 73;
  }
  else {
    uint64_t v1 = v0;
  }
  int v2 = &aStringrefLlvmG_330[v1];
  unint64_t v3 = 73 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD72EC64()
{
}

llvm::raw_ostream *sub_1CD72EC78(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::MergedLoadStoreMotionPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD72EC80(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  sub_1CD46AEB4(a1 + 48, (uint64_t)(a2 + 3));
  long long v6 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v6;
  llvm::GVNPass::ValueTable::ValueTable(a1 + 128, a2 + 8);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *((void *)a2 + 39) = 0;
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *((_DWORD *)a2 + 80) = 0;
  int v7 = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 324) = *((_DWORD *)a2 + 81);
  *((_DWORD *)a2 + 81) = v7;
  int v8 = *(_DWORD *)(a1 + 328);
  *(_DWORD *)(a1 + 328) = *((_DWORD *)a2 + 82);
  *((_DWORD *)a2 + 82) = v8;
  sub_1CC056A04(a1 + 336, (uint64_t)(a2 + 21));
  sub_1CD72EDD4(a1 + 432, (unsigned int *)a2 + 108);
  *(void *)(a1 + 584) = a1 + 600;
  *(void *)(a1 + 592) = 0x800000000;
  if (*((_DWORD *)a2 + 148)) {
    sub_1CBA6E388(a1 + 584, (const void **)a2 + 73);
  }
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 664) = *((void *)a2 + 83);
  *((void *)a2 + 83) = 0;
  *(_DWORD *)(a1 + 672) = *((_DWORD *)a2 + 168);
  *((_DWORD *)a2 + 168) = 0;
  int v9 = *(_DWORD *)(a1 + 676);
  *(_DWORD *)(a1 + 676) = *((_DWORD *)a2 + 169);
  *((_DWORD *)a2 + 169) = v9;
  int v10 = *(_DWORD *)(a1 + 680);
  *(_DWORD *)(a1 + 680) = *((_DWORD *)a2 + 170);
  *((_DWORD *)a2 + 170) = v10;
  *(unsigned char *)(a1 + 688) = *((unsigned char *)a2 + 688);
  *(void *)(a1 + 696) = a1 + 712;
  *(void *)(a1 + 704) = 0x400000000;
  if (*((_DWORD *)a2 + 176)) {
    sub_1CD72EE64(a1 + 696, (uint64_t *)a2 + 87);
  }
  return a1;
}

uint64_t sub_1CD72EDD4(uint64_t a1, unsigned int *a2)
{
  *(void *)a1 = 1;
  uint64_t v4 = a1 + 72;
  for (uint64_t i = 8; i != 72; i += 16)
    *(void *)(a1 + i) = -4096;
  sub_1CCCBCFC4((unsigned int *)a1, a2);
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 0x400000000;
  if (a2[20]) {
    sub_1CD4BAB44(v4, (uint64_t)(a2 + 18));
  }
  return a1;
}

uint64_t sub_1CD72EE64(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    long long v5 = a2 + 2;
    uint64_t v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      int v7 = a2 + 1;
      uint64_t v9 = *((unsigned int *)a2 + 2);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9)
        {
          uint64_t v11 = v4 + 16 * v9;
          uint64_t v12 = *(_DWORD **)a1;
          do
          {
            *(void *)uint64_t v12 = *(void *)v4;
            _OWORD v12[2] = *(_DWORD *)(v4 + 8);
            v4 += 16;
            v12 += 4;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10)
        {
          uint64_t v13 = v4 + 16 * v10;
          uint64_t v14 = *(_DWORD **)a1;
          do
          {
            *(void *)uint64_t v14 = *(void *)v4;
            void v14[2] = *(_DWORD *)(v4 + 8);
            v4 += 16;
            v14 += 4;
          }
          while (v4 != v13);
        }
        else
        {
          uint64_t v10 = 0;
        }
        if (v10 != v9) {
          memcpy((void *)(*(void *)a1 + 16 * v10), (const void *)(*a2 + 16 * v10), *a2 + 16 * v9 - (*a2 + 16 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      long long v6 = *(_DWORD **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *a2;
      }
      *(void *)a1 = v4;
      int v7 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

void *sub_1CD72EFB8(void *a1)
{
  *a1 = &unk_1F263A790;
  sub_1CCCB72A8((uint64_t)(a1 + 1));
  return a1;
}

void sub_1CD72EFFC(void *a1)
{
  *a1 = &unk_1F263A790;
  sub_1CCCB72A8((uint64_t)(a1 + 1));

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD72F060(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::GVNPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

void sub_1CD72F06C()
{
}

void sub_1CD72F080(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD72F088(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  return llvm::StackLifetimePrinterPass::printPipeline((_DWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD72F094()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72F09C(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return llvm::FunctionToLoopPassAdaptor::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

void sub_1CD72F0A8()
{
}

void sub_1CD72F0BC(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
}

llvm::raw_ostream *sub_1CD72F0C4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F0E0(a2, a3, a4);
}

uint64_t sub_1CD72F0D8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72F0E0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705594();
  uint64_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72F190()
{
}

void sub_1CD72F1A4()
{
}

llvm::raw_ostream *sub_1CD72F1AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F1C8(a2, a3, a4);
}

uint64_t sub_1CD72F1C0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72F1C8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705650();
  uint64_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72F278()
{
}

double sub_1CD72F28C@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)&double result = 2;
  *(void *)(a1 + 16) = 2;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(_DWORD *)(a1 + 64) = 2;
  return result;
}

llvm::raw_ostream *sub_1CD72F2CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7228C4(a2, a3, a4);
}

uint64_t sub_1CD72F2E0()
{
  return 0;
}

void sub_1CD72F2EC()
{
}

double sub_1CD72F300@<D0>(uint64_t a1@<X1>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return llvm::LoopIdiomRecognizePass::run(a1, a2, a3);
}

llvm::raw_ostream *sub_1CD72F308(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F31C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72F314()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72F31C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD70570C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72F3CC()
{
}

llvm::raw_ostream *sub_1CD72F3E0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F3E8(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72F3E8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC93150();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72F498()
{
}

llvm::raw_ostream *sub_1CD72F4AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F4B4(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72F4B4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC9320C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

uint64_t sub_1CD72F560(uint64_t a1)
{
  *(void *)a1 = &unk_1F26380D0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD72F5B0(uint64_t a1)
{
  *(void *)a1 = &unk_1F26380D0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD72F620@<D0>(uint64_t a1@<X0>, llvm::Value ***a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::PrintLoopPass::run((llvm::raw_ostream **)(a1 + 8), a2, a3);
}

llvm::raw_ostream *sub_1CD72F628(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F644(a2, a3, a4);
}

uint64_t sub_1CD72F63C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72F644(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD7057C8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72F6F4()
{
}

llvm::raw_ostream *sub_1CD72F708(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F710(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72F710(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC932C8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72F7C0()
{
}

llvm::raw_ostream *sub_1CD72F7D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F7DC(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72F7DC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC93384();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72F88C()
{
}

void sub_1CD72F8A0()
{
}

llvm::raw_ostream *sub_1CD72F8A8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F8C4(a2, a3, a4);
}

uint64_t sub_1CD72F8BC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72F8C4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705884();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72F974()
{
}

llvm::raw_ostream *sub_1CD72F988(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72F990(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72F990(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CCC93440();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72FA40()
{
}

void sub_1CD72FA54(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4)
{
}

llvm::raw_ostream *sub_1CD72FA5C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FA70(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD72FA68()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FA70(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD705940();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD72FB20()
{
}

void sub_1CD72FB34()
{
}

llvm::raw_ostream *sub_1CD72FB3C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FB58(a2, a3, a4);
}

uint64_t sub_1CD72FB50()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FB58(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD7059FC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72FC08()
{
}

void sub_1CD72FC1C(uint64_t a1, uint64_t a2)
{
}

llvm::raw_ostream *sub_1CD72FC24(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FC40(a2, a3, a4);
}

uint64_t sub_1CD72FC38()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FC40(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705AB8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72FCF0()
{
}

void sub_1CD72FD04()
{
}

llvm::raw_ostream *sub_1CD72FD0C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FD28(a2, a3, a4);
}

uint64_t sub_1CD72FD20()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FD28(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705B74();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72FDD8()
{
}

void sub_1CD72FDEC()
{
}

llvm::raw_ostream *sub_1CD72FDF4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FE10(a2, a3, a4);
}

uint64_t sub_1CD72FE08()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FE10(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705C30();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72FEC0()
{
}

double sub_1CD72FED4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return llvm::LoopCachePrinterPass::run((llvm::raw_ostream **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD72FEDC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FEF8(a2, a3, a4);
}

uint64_t sub_1CD72FEF0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FEF8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705CEC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD72FFA8()
{
}

double sub_1CD72FFBC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return llvm::LoopPredicationPass::run(a1, a2, a3);
}

llvm::raw_ostream *sub_1CD72FFC4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD72FFE0(a2, a3, a4);
}

uint64_t sub_1CD72FFD8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD72FFE0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705DA8();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD730090()
{
}

void sub_1CD7300A4()
{
}

llvm::raw_ostream *sub_1CD7300AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD729770(a2, a3, a4);
}

uint64_t sub_1CD7300C0()
{
  return 0;
}

void sub_1CD7300CC()
{
}

void sub_1CD7300E0(llvm::Loop *this@<X1>, uint64_t a2@<X8>)
{
}

llvm::raw_ostream *sub_1CD7300E8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD730104(a2, a3, a4);
}

uint64_t sub_1CD7300FC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD730104(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705E64();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD7301B4()
{
}

uint64_t sub_1CD7301C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return llvm::LoopRerollPass::run(a1, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7301D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7301EC(a2, a3, a4);
}

uint64_t sub_1CD7301E4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7301EC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705F20();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD73029C()
{
}

void sub_1CD7302B0(uint64_t a1, llvm *a2, uint64_t a3, uint64_t *a4)
{
}

llvm::raw_ostream *sub_1CD7302B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7302D4(a2, a3, a4);
}

uint64_t sub_1CD7302CC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7302D4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  long long v6 = sub_1CD705FDC();
  size_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  double result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void sub_1CD730384()
{
}

llvm::raw_ostream *sub_1CD730398(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::SimpleLoopUnswitchPass::printPipeline((unsigned char *)(a1 + 8), a2, a3, a4);
}

void sub_1CD7303A4()
{
}

llvm::raw_ostream *sub_1CD7303B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::LICMPass::printPipeline(a1 + 8, a2, a3, a4);
}

void *sub_1CD7303C0(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F263A950;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1CD73042C(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F263A950;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD7304B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CD7304C0((unsigned char *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD7304C0(unsigned char *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  sub_1CB8E509C(a2, "function");
  if (a1[8]) {
    sub_1CB8E509C(a2, "<eager-inv>");
  }
  sub_1CB8E509C(a2, "(");
  (*(void (**)(void, llvm::raw_ostream *, uint64_t, uint64_t))(**(void **)a1 + 24))(*(void *)a1, a2, a3, a4);

  return sub_1CB8E509C(a2, ")");
}

uint64_t sub_1CD73057C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26383D0;
  unint64_t v3 = (void **)(a1 + 16);
  sub_1CC947208(&v3);
  return a1;
}

uint64_t sub_1CD7305D4(uint64_t a1)
{
  *(void *)a1 = &unk_1F26383D0;
  unint64_t v3 = (void **)(a1 + 16);
  sub_1CC947208(&v3);
  return MEMORY[0x1D25D9CE0](a1, 0x10A1C4037ACD87BLL);
}

void sub_1CD730640()
{
}

void sub_1CD73065C(uint64_t a1, llvm::raw_ostream *a2)
{
}

uint64_t sub_1CD730668()
{
  return 0;
}

void sub_1CD730670()
{
}

void sub_1CD7307A8(int *a1, llvm::raw_ostream *a2)
{
  unint64_t v3 = sub_1CB8E509C(a2, "repeat<");
  uint64_t v4 = llvm::raw_ostream::operator<<(v3, *a1);
  sub_1CB8E509C(v4, ">(");
  llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::printPipeline();
}

char *sub_1CD730830()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<LazyCallGraph:"
                    ":SCC, CGSCCAnalysisManager, LazyCallGraph &, CGSCCUpdateResult &>>]";
  v10[1] = 167;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA7) {
    uint64_t v1 = 167;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_337[v1];
  unint64_t v3 = 167 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7308F0()
{
}

void sub_1CD730904()
{
}

llvm::raw_ostream *sub_1CD730974(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD730990(a2, a3, a4);
}

uint64_t sub_1CD730988()
{
  return 0;
}

llvm::raw_ostream *sub_1CD730990(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FEBD4();
  size_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD730A54()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::FunctionAnalysisMan"
                    "agerCGSCCProxy, llvm::LazyCallGraph::SCC, llvm::AnalysisManager<LazyCallGraph::SCC, LazyCallGraph &>"
                    ", llvm::LazyCallGraph &, llvm::CGSCCUpdateResult &>]";
  v10[1] = 252;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xFC) {
    uint64_t v1 = 252;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_340[v1];
  unint64_t v3 = 252 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD730B14()
{
}

void sub_1CD730B28(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
}

llvm::raw_ostream *sub_1CD730B74(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD730B90(a2, a3, a4);
}

uint64_t sub_1CD730B88()
{
  return 0;
}

llvm::raw_ostream *sub_1CD730B90(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FEBD4();
  size_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD730C54()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::FunctionAnalysis"
                    "ManagerCGSCCProxy>]";
  v10[1] = 119;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x77) {
    uint64_t v1 = 119;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_341[v1];
  unint64_t v3 = 119 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD730D14()
{
}

void sub_1CD730D28()
{
}

llvm::raw_ostream *sub_1CD730D98(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F718(a2, a3, a4);
}

uint64_t sub_1CD730DAC()
{
  return 0;
}

char *sub_1CD730DB4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::LazyCallGraph::SCC, llvm::AnalysisManager<LazyCallGraph::SCC, LazyCallGraph &>, llvm"
                    "::LazyCallGraph &, llvm::CGSCCUpdateResult &>]";
  v10[1] = 246;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xF6) {
    uint64_t v1 = 246;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_342[v1];
  unint64_t v3 = 246 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD730E74()
{
}

void sub_1CD730E88(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key);
}

llvm::raw_ostream *sub_1CD730ED4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F918(a2, a3, a4);
}

uint64_t sub_1CD730EE8()
{
  return 0;
}

uint64_t sub_1CD730EF0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2638590;
  unint64_t v3 = (void **)(a1 + 16);
  sub_1CCCB67B8(&v3);
  return a1;
}

uint64_t sub_1CD730F48(uint64_t a1)
{
  *(void *)a1 = &unk_1F2638590;
  unint64_t v3 = (void **)(a1 + 16);
  sub_1CCCB67B8(&v3);
  return MEMORY[0x1D25D9CE0](a1, 0x10A1C4037ACD87BLL);
}

void sub_1CD730FB4()
{
}

void sub_1CD730FC8(uint64_t a1, llvm::raw_ostream *a2)
{
}

uint64_t sub_1CD730FD4()
{
  return 0;
}

void sub_1CD730FDC()
{
}

void sub_1CD731100(int *a1, llvm::raw_ostream *a2)
{
  unint64_t v3 = sub_1CB8E509C(a2, "repeat<");
  uint64_t v4 = llvm::raw_ostream::operator<<(v3, *a1);
  sub_1CB8E509C(v4, ">(");
  llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::printPipeline();
}

char *sub_1CD731188()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<Function>>]";
  v10[1] = 97;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61) {
    uint64_t v1 = 97;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_343[v1];
  unint64_t v3 = 97 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD731248()
{
}

void sub_1CD73125C()
{
}

llvm::raw_ostream *sub_1CD7312CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  return sub_1CD7312E8(a2, a3, a4);
}

uint64_t sub_1CD7312E0()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7312E8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, const char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD69EE68();
  size_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7313AC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::AAManager, llvm::Fu"
                    "nction, llvm::AnalysisManager<Function>>]";
  v10[1] = 141;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8D) {
    uint64_t v1 = 141;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_344[v1];
  unint64_t v3 = 141 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73146C()
{
}

llvm::raw_ostream *sub_1CD731480(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  return sub_1CD731488(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD731488(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD69EE68();
  size_t v9 = (const void *)a3(a4, v7, v8);
  size_t v11 = v10;
  uint64_t v12 = sub_1CB8E509C(a2, "invalidate<");
  uint64_t v13 = (void *)*((void *)v12 + 4);
  if (v11 <= *((void *)v12 + 3) - (void)v13)
  {
    if (v11)
    {
      memcpy(v13, v9, v11);
      *((void *)v12 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)v9, v11);
  }

  return sub_1CB8E509C(v12, ">");
}

void sub_1CD731550()
{
}

void sub_1CD731564()
{
}

llvm::raw_ostream *sub_1CD7315D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7315F0(a2, a3, a4);
}

uint64_t sub_1CD7315E8()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7315F0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611984();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7316B4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::AssumptionAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96) {
    uint64_t v1 = 150;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_346[v1];
  unint64_t v3 = 150 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD731774()
{
}

void sub_1CD731788(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::AssumptionAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7317D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7317F0(a2, a3, a4);
}

uint64_t sub_1CD7317E8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7317F0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611984();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7318B4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::AssumptionAnalysis>]";
  v10[1] = 104;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68) {
    uint64_t v1 = 104;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_347[v1];
  unint64_t v3 = 104 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD731974()
{
}

void sub_1CD731988()
{
}

llvm::raw_ostream *sub_1CD7319F8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD731A14(a2, a3, a4);
}

uint64_t sub_1CD731A0C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD731A14(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FEF80();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD731AD8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::BlockFrequencyAnaly"
                    "sis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 154;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9A) {
    uint64_t v1 = 154;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_348[v1];
  unint64_t v3 = 154 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD731B98()
{
}

void sub_1CD731BAC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::BlockFrequencyAnalysis::Key);
}

llvm::raw_ostream *sub_1CD731BF8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD731C14(a2, a3, a4);
}

uint64_t sub_1CD731C0C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD731C14(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FEF80();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD731CD8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::BlockFrequencyAnalysis>]";
  v10[1] = 108;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6C) {
    uint64_t v1 = 108;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_349[v1];
  unint64_t v3 = 108 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD731D98()
{
}

void sub_1CD731DAC()
{
}

llvm::raw_ostream *sub_1CD731E1C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD731E38(a2, a3, a4);
}

uint64_t sub_1CD731E30()
{
  return 1;
}

llvm::raw_ostream *sub_1CD731E38(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF03C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD731EFC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::BranchProbabilityAn"
                    "alysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 157;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9D) {
    uint64_t v1 = 157;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_350[v1];
  unint64_t v3 = 157 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD731FBC()
{
}

void sub_1CD731FD0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::BranchProbabilityAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73201C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD732038(a2, a3, a4);
}

uint64_t sub_1CD732030()
{
  return 0;
}

llvm::raw_ostream *sub_1CD732038(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF03C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7320FC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::BranchProbabilityAnalysis>]";
  v10[1] = 111;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F) {
    uint64_t v1 = 111;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_351[v1];
  unint64_t v3 = 111 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7321BC()
{
}

void sub_1CD7321D0()
{
}

llvm::raw_ostream *sub_1CD732240(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73225C(a2, a3, a4);
}

uint64_t sub_1CD732254()
{
  return 1;
}

llvm::raw_ostream *sub_1CD73225C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF0F8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732320()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CycleAnalysis, llvm"
                    "::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 145;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x91) {
    uint64_t v1 = 145;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_352[v1];
  unint64_t v3 = 145 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7323E0()
{
}

void sub_1CD7323F4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::CycleAnalysis::Key);
}

llvm::raw_ostream *sub_1CD732440(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73245C(a2, a3, a4);
}

uint64_t sub_1CD732454()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73245C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF0F8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732520()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CycleAnalysis>]";
  v10[1] = 99;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x63) {
    uint64_t v1 = 99;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_353[v1];
  unint64_t v3 = 99 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7325E0()
{
}

void sub_1CD7325F4()
{
}

llvm::raw_ostream *sub_1CD732664(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD732680(a2, a3, a4);
}

uint64_t sub_1CD732678()
{
  return 1;
}

llvm::raw_ostream *sub_1CD732680(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611A5C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732744()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DominatorTreeAnalys"
                    "is, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 153;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x99) {
    uint64_t v1 = 153;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_354[v1];
  unint64_t v3 = 153 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD732804()
{
}

void sub_1CD732818(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
}

llvm::raw_ostream *sub_1CD732864(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD732880(a2, a3, a4);
}

uint64_t sub_1CD732878()
{
  return 0;
}

llvm::raw_ostream *sub_1CD732880(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611A5C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732944()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DominatorTreeAnalysis>]";
  v10[1] = 107;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B) {
    uint64_t v1 = 107;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_355[v1];
  unint64_t v3 = 107 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD732A04()
{
}

void sub_1CD732A18()
{
}

llvm::raw_ostream *sub_1CD732A88(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD732AA4(a2, a3, a4);
}

uint64_t sub_1CD732A9C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD732AA4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF1B4();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732B68()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PostDominatorTreeAn"
                    "alysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 157;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9D) {
    uint64_t v1 = 157;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_356[v1];
  unint64_t v3 = 157 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD732C28()
{
}

void sub_1CD732C3C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::PostDominatorTreeAnalysis::Key);
}

llvm::raw_ostream *sub_1CD732C88(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD732CA4(a2, a3, a4);
}

uint64_t sub_1CD732C9C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD732CA4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF1B4();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732D68()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::PostDominatorTreeAnalysis>]";
  v10[1] = 111;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F) {
    uint64_t v1 = 111;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_357[v1];
  unint64_t v3 = 111 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD732E28()
{
}

void sub_1CD732E3C()
{
}

llvm::raw_ostream *sub_1CD732EAC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD732EC8(a2, a3, a4);
}

uint64_t sub_1CD732EC0()
{
  return 1;
}

llvm::raw_ostream *sub_1CD732EC8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF270();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD732F8C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DemandedBitsAnalysi"
                    "s, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 152;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x98) {
    uint64_t v1 = 152;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_358[v1];
  unint64_t v3 = 152 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73304C()
{
}

void sub_1CD733060(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::DemandedBitsAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7330AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7330C8(a2, a3, a4);
}

uint64_t sub_1CD7330C0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7330C8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF270();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73318C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DemandedBitsAnalysis>]";
  v10[1] = 106;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6A) {
    uint64_t v1 = 106;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_359[v1];
  unint64_t v3 = 106 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73324C()
{
}

void sub_1CD733260()
{
}

llvm::raw_ostream *sub_1CD7332D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7332EC(a2, a3, a4);
}

uint64_t sub_1CD7332E4()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7332EC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF32C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7333B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DominanceFrontierAn"
                    "alysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 157;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9D) {
    uint64_t v1 = 157;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_360[v1];
  unint64_t v3 = 157 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD733470()
{
}

void sub_1CD733484(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::DominanceFrontierAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7334D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7334EC(a2, a3, a4);
}

uint64_t sub_1CD7334E4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7334EC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF32C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7335B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DominanceFrontierAnalysis>]";
  v10[1] = 111;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F) {
    uint64_t v1 = 111;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_361[v1];
  unint64_t v3 = 111 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD733670()
{
}

void sub_1CD733684()
{
}

llvm::raw_ostream *sub_1CD7336F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD733710(a2, a3, a4);
}

uint64_t sub_1CD733708()
{
  return 1;
}

llvm::raw_ostream *sub_1CD733710(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF3E8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7337D4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::FunctionPropertiesA"
                    "nalysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 158;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9E) {
    uint64_t v1 = 158;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_362[v1];
  unint64_t v3 = 158 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD733894()
{
}

void sub_1CD7338A8(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::FunctionPropertiesAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7338F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD733910(a2, a3, a4);
}

uint64_t sub_1CD733908()
{
  return 0;
}

llvm::raw_ostream *sub_1CD733910(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF3E8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7339D4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::FunctionPropertiesAnalysis>]";
  v10[1] = 112;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70) {
    uint64_t v1 = 112;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_363[v1];
  unint64_t v3 = 112 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD733A94()
{
}

void sub_1CD733AA8()
{
}

llvm::raw_ostream *sub_1CD733B18(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD733B34(a2, a3, a4);
}

uint64_t sub_1CD733B2C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD733B34(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611B78();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD733BF8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LoopAnalysis, llvm:"
                    ":Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 144;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x90) {
    uint64_t v1 = 144;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_364[v1];
  unint64_t v3 = 144 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD733CB8()
{
}

void sub_1CD733CCC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::LoopAnalysis::Key);
}

llvm::raw_ostream *sub_1CD733D18(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD733D34(a2, a3, a4);
}

uint64_t sub_1CD733D2C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD733D34(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611B78();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD733DF8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LoopAnalysis>]";
  v10[1] = 98;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x62) {
    uint64_t v1 = 98;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_365[v1];
  unint64_t v3 = 98 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD733EB8()
{
}

void sub_1CD733ECC()
{
}

llvm::raw_ostream *sub_1CD733F3C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD733F58(a2, a3, a4);
}

uint64_t sub_1CD733F50()
{
  return 1;
}

llvm::raw_ostream *sub_1CD733F58(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF4A4();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73401C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LazyValueAnalysis, "
                    "llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 149;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95) {
    uint64_t v1 = 149;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_366[v1];
  unint64_t v3 = 149 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7340DC()
{
}

void sub_1CD7340F0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::LazyValueAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73413C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD734158(a2, a3, a4);
}

uint64_t sub_1CD734150()
{
  return 0;
}

llvm::raw_ostream *sub_1CD734158(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF4A4();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73421C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LazyValueAnalysis>]";
  v10[1] = 103;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67) {
    uint64_t v1 = 103;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_367[v1];
  unint64_t v3 = 103 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7342DC()
{
}

void sub_1CD7342F0()
{
}

llvm::raw_ostream *sub_1CD734360(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73437C(a2, a3, a4);
}

uint64_t sub_1CD734374()
{
  return 1;
}

llvm::raw_ostream *sub_1CD73437C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF560();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD734440()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DependenceAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96) {
    uint64_t v1 = 150;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_368[v1];
  unint64_t v3 = 150 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD734500()
{
}

void sub_1CD734514(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::DependenceAnalysis::Key);
}

llvm::raw_ostream *sub_1CD734560(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73457C(a2, a3, a4);
}

uint64_t sub_1CD734574()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73457C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF560();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD734640()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DependenceAnalysis>]";
  v10[1] = 104;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68) {
    uint64_t v1 = 104;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_369[v1];
  unint64_t v3 = 104 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD734700()
{
}

void sub_1CD734714()
{
}

llvm::raw_ostream *sub_1CD734784(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7347A0(a2, a3, a4);
}

uint64_t sub_1CD734798()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7347A0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF61C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD734864()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::InlineSizeEstimator"
                    "Analysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 159;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9F) {
    uint64_t v1 = 159;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_370[v1];
  unint64_t v3 = 159 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD734924()
{
}

void sub_1CD734938(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::InlineSizeEstimatorAnalysis::Key);
}

llvm::raw_ostream *sub_1CD734984(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7349A0(a2, a3, a4);
}

uint64_t sub_1CD734998()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7349A0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF61C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD734A64()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::InlineSizeEstimatorAnalysis>]";
  v10[1] = 113;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71) {
    uint64_t v1 = 113;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_371[v1];
  unint64_t v3 = 113 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD734B24()
{
}

void sub_1CD734B38()
{
}

llvm::raw_ostream *sub_1CD734BA8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD734BC4(a2, a3, a4);
}

uint64_t sub_1CD734BBC()
{
  return 1;
}

llvm::raw_ostream *sub_1CD734BC4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF6D8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD734C88()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::MemoryDependenceAna"
                    "lysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 156;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9C) {
    uint64_t v1 = 156;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_372[v1];
  unint64_t v3 = 156 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD734D48()
{
}

void sub_1CD734D5C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::MemoryDependenceAnalysis::Key);
}

llvm::raw_ostream *sub_1CD734DA8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD734DC4(a2, a3, a4);
}

uint64_t sub_1CD734DBC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD734DC4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF6D8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD734E88()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::MemoryDependenceAnalysis>]";
  v10[1] = 110;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6E) {
    uint64_t v1 = 110;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_373[v1];
  unint64_t v3 = 110 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD734F48()
{
}

void sub_1CD734F5C()
{
}

llvm::raw_ostream *sub_1CD734FCC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD734FE8(a2, a3, a4);
}

uint64_t sub_1CD734FE0()
{
  return 1;
}

llvm::raw_ostream *sub_1CD734FE8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF794();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7350AC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::MemorySSAAnalysis, "
                    "llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 149;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95) {
    uint64_t v1 = 149;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_374[v1];
  unint64_t v3 = 149 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73516C()
{
}

void sub_1CD735180(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::MemorySSAAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7351CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7351E8(a2, a3, a4);
}

uint64_t sub_1CD7351E0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7351E8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF794();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7352AC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::MemorySSAAnalysis>]";
  v10[1] = 103;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67) {
    uint64_t v1 = 103;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_375[v1];
  unint64_t v3 = 103 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73536C()
{
}

void sub_1CD735380()
{
}

llvm::raw_ostream *sub_1CD7353F0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73540C(a2, a3, a4);
}

uint64_t sub_1CD735404()
{
  return 1;
}

llvm::raw_ostream *sub_1CD73540C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF850();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7354D0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PhiValuesAnalysis, "
                    "llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 149;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95) {
    uint64_t v1 = 149;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_376[v1];
  unint64_t v3 = 149 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD735590()
{
}

void sub_1CD7355A4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::PhiValuesAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7355F0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73560C(a2, a3, a4);
}

uint64_t sub_1CD735604()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73560C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF850();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7356D0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::PhiValuesAnalysis>]";
  v10[1] = 103;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67) {
    uint64_t v1 = 103;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_377[v1];
  unint64_t v3 = 103 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD735790()
{
}

void sub_1CD7357A4()
{
}

llvm::raw_ostream *sub_1CD735814(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD735830(a2, a3, a4);
}

uint64_t sub_1CD735828()
{
  return 1;
}

llvm::raw_ostream *sub_1CD735830(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF90C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7358F4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::RegionInfoAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96) {
    uint64_t v1 = 150;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_378[v1];
  unint64_t v3 = 150 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7359B4()
{
}

void sub_1CD7359C8(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::RegionInfoAnalysis::Key);
}

llvm::raw_ostream *sub_1CD735A14(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD735A30(a2, a3, a4);
}

uint64_t sub_1CD735A28()
{
  return 0;
}

llvm::raw_ostream *sub_1CD735A30(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF90C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD735AF4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::RegionInfoAnalysis>]";
  v10[1] = 104;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68) {
    uint64_t v1 = 104;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_379[v1];
  unint64_t v3 = 104 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD735BB4()
{
}

llvm::raw_ostream *sub_1CD735BC8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD735BD0(a1 + 8, a2, a3, a4);
}

llvm::raw_ostream *sub_1CD735BD0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FF9C8();
  size_t v9 = (const void *)a3(a4, v7, v8);
  size_t v11 = v10;
  uint64_t v12 = sub_1CB8E509C(a2, "require<");
  uint64_t v13 = (void *)*((void *)v12 + 4);
  if (v11 <= *((void *)v12 + 3) - (void)v13)
  {
    if (v11)
    {
      memcpy(v13, v9, v11);
      *((void *)v12 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)v9, v11);
  }

  return sub_1CB8E509C(v12, ">");
}

void sub_1CD735C98()
{
}

void sub_1CD735CAC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::OptimizationRemarkEmitterAnalysis::Key);
}

llvm::raw_ostream *sub_1CD735CF8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD735D14(a2, a3, a4);
}

uint64_t sub_1CD735D0C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD735D14(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FF9C8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD735DD8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::OptimizationRema"
                    "rkEmitterAnalysis>]";
  v10[1] = 119;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x77) {
    uint64_t v1 = 119;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_383[v1];
  unint64_t v3 = 119 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD735E98()
{
}

void sub_1CD735EAC()
{
}

llvm::raw_ostream *sub_1CD735F1C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD735F38(a2, a3, a4);
}

uint64_t sub_1CD735F30()
{
  return 1;
}

llvm::raw_ostream *sub_1CD735F38(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611C94();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD735FFC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ScalarEvolutionAnal"
                    "ysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 155;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9B) {
    uint64_t v1 = 155;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_384[v1];
  unint64_t v3 = 155 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7360BC()
{
}

void sub_1CD7360D0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73611C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736138(a2, a3, a4);
}

uint64_t sub_1CD736130()
{
  return 0;
}

llvm::raw_ostream *sub_1CD736138(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611C94();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7361FC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ScalarEvolutionAnalysis>]";
  v10[1] = 109;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6D) {
    uint64_t v1 = 109;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_385[v1];
  unint64_t v3 = 109 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7362BC()
{
}

void sub_1CD7362D0()
{
}

llvm::raw_ostream *sub_1CD736340(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73635C(a2, a3, a4);
}

uint64_t sub_1CD736354()
{
  return 1;
}

llvm::raw_ostream *sub_1CD73635C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFA84();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD736420()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ShouldNotRunFunctio"
                    "nPassesAnalysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 166;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA6) {
    uint64_t v1 = 166;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_386[v1];
  unint64_t v3 = 166 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7364E0()
{
}

void sub_1CD7364F4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ShouldNotRunFunctionPassesAnalysis::Key);
}

llvm::raw_ostream *sub_1CD736540(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736554(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD73654C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD736554(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD6FFA84();
  size_t v9 = (const void *)a3(a4, v7, v8);
  size_t v11 = v10;
  uint64_t v12 = sub_1CB8E509C(a2, "invalidate<");
  uint64_t v13 = (void *)*((void *)v12 + 4);
  if (v11 <= *((void *)v12 + 3) - (void)v13)
  {
    if (v11)
    {
      memcpy(v13, v9, v11);
      *((void *)v12 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)v9, v11);
  }

  return sub_1CB8E509C(v12, ">");
}

char *sub_1CD736618()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ShouldNotRunFunc"
                    "tionPassesAnalysis>]";
  v10[1] = 120;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x78) {
    uint64_t v1 = 120;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_387[v1];
  unint64_t v3 = 120 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7366D8()
{
}

void sub_1CD7366EC()
{
}

llvm::raw_ostream *sub_1CD73675C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736778(a2, a3, a4);
}

uint64_t sub_1CD736770()
{
  return 1;
}

llvm::raw_ostream *sub_1CD736778(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFB40();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73683C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ShouldRunExtraVecto"
                    "rPasses, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 158;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9E) {
    uint64_t v1 = 158;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_388[v1];
  unint64_t v3 = 158 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7368FC()
{
}

void sub_1CD736910(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ShouldRunExtraVectorPasses::Key);
}

llvm::raw_ostream *sub_1CD73695C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736978(a2, a3, a4);
}

uint64_t sub_1CD736970()
{
  return 0;
}

llvm::raw_ostream *sub_1CD736978(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFB40();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD736A3C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ShouldRunExtraVectorPasses>]";
  v10[1] = 112;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70) {
    uint64_t v1 = 112;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_389[v1];
  unint64_t v3 = 112 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD736AFC()
{
}

void sub_1CD736B10()
{
}

llvm::raw_ostream *sub_1CD736B80(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736B9C(a2, a3, a4);
}

uint64_t sub_1CD736B94()
{
  return 1;
}

llvm::raw_ostream *sub_1CD736B9C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFBFC();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD736C60()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::StackSafetyAnalysis"
                    ", llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 151;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x97) {
    uint64_t v1 = 151;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_390[v1];
  unint64_t v3 = 151 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD736D20()
{
}

void sub_1CD736D34(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::StackSafetyAnalysis::Key);
}

llvm::raw_ostream *sub_1CD736D80(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736D9C(a2, a3, a4);
}

uint64_t sub_1CD736D94()
{
  return 0;
}

llvm::raw_ostream *sub_1CD736D9C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFBFC();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD736E60()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::StackSafetyAnalysis>]";
  v10[1] = 105;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x69) {
    uint64_t v1 = 105;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_391[v1];
  unint64_t v3 = 105 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD736F20()
{
}

void sub_1CD736F34()
{
}

llvm::raw_ostream *sub_1CD736FA4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD736FC0(a2, a3, a4);
}

uint64_t sub_1CD736FB8()
{
  return 1;
}

llvm::raw_ostream *sub_1CD736FC0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611854();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD737084()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::TargetLibraryAnalys"
                    "is, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 153;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x99) {
    uint64_t v1 = 153;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_392[v1];
  unint64_t v3 = 153 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737144()
{
}

void sub_1CD737158(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::TargetLibraryAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7371A4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7371C0(a2, a3, a4);
}

uint64_t sub_1CD7371B8()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7371C0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611854();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD737284()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::TargetLibraryAnalysis>]";
  v10[1] = 107;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B) {
    uint64_t v1 = 107;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_393[v1];
  unint64_t v3 = 107 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737344()
{
}

void sub_1CD737358()
{
}

llvm::raw_ostream *sub_1CD7373C8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7373E4(a2, a3, a4);
}

uint64_t sub_1CD7373DC()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7373E4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611E9C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7374A8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::TargetIRAnalysis, l"
                    "lvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 148;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x94) {
    uint64_t v1 = 148;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_394[v1];
  unint64_t v3 = 148 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737568()
{
}

void sub_1CD73757C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::TargetIRAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7375C8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7375E4(a2, a3, a4);
}

uint64_t sub_1CD7375DC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7375E4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD611E9C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7376A8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::TargetIRAnalysis>]";
  v10[1] = 102;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x66) {
    uint64_t v1 = 102;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_395[v1];
  unint64_t v3 = 102 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737768()
{
}

void sub_1CD73777C()
{
}

llvm::raw_ostream *sub_1CD7377EC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F2F4(a2, a3, a4);
}

uint64_t sub_1CD737800()
{
  return 1;
}

char *sub_1CD737808()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::VerifierAnalysis, l"
                    "lvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 148;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x94) {
    uint64_t v1 = 148;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_396[v1];
  unint64_t v3 = 148 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7378C8()
{
}

void sub_1CD7378DC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::VerifierAnalysis::Key);
}

llvm::raw_ostream *sub_1CD737928(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F4F4(a2, a3, a4);
}

uint64_t sub_1CD73793C()
{
  return 0;
}

void sub_1CD737948()
{
}

void sub_1CD73795C()
{
}

llvm::raw_ostream *sub_1CD7379CC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F718(a2, a3, a4);
}

uint64_t sub_1CD7379E0()
{
  return 1;
}

char *sub_1CD7379E8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 159;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9F) {
    uint64_t v1 = 159;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_397[v1];
  unint64_t v3 = 159 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737AA8()
{
}

void sub_1CD737ABC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key);
}

llvm::raw_ostream *sub_1CD737B08(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F918(a2, a3, a4);
}

uint64_t sub_1CD737B1C()
{
  return 0;
}

void sub_1CD737B28()
{
}

void sub_1CD737B3C()
{
}

llvm::raw_ostream *sub_1CD737BAC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD737BC8(a2, a3, a4);
}

uint64_t sub_1CD737BC0()
{
  return 1;
}

llvm::raw_ostream *sub_1CD737BC8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFCB8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD737C8C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DivergenceAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96) {
    uint64_t v1 = 150;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_398[v1];
  unint64_t v3 = 150 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737D4C()
{
}

void sub_1CD737D60(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::DivergenceAnalysis::Key);
}

llvm::raw_ostream *sub_1CD737DAC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD737DC8(a2, a3, a4);
}

uint64_t sub_1CD737DC0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD737DC8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFCB8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD737E8C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DivergenceAnalysis>]";
  v10[1] = 104;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68) {
    uint64_t v1 = 104;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_399[v1];
  unint64_t v3 = 104 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD737F4C()
{
}

void sub_1CD737F60()
{
}

llvm::raw_ostream *sub_1CD737FD0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD737FEC(a2, a3, a4);
}

uint64_t sub_1CD737FE4()
{
  return 1;
}

llvm::raw_ostream *sub_1CD737FEC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFD74();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7380B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::GPUFunctionAnalysis"
                    ", llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 151;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x97) {
    uint64_t v1 = 151;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_400[v1];
  unint64_t v3 = 151 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738170()
{
}

void sub_1CD738184(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::GPUFunctionAnalysis::Key);
}

llvm::raw_ostream *sub_1CD7381D0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7381EC(a2, a3, a4);
}

uint64_t sub_1CD7381E4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7381EC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFD74();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7382B0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::GPUFunctionAnalysis>]";
  v10[1] = 105;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x69) {
    uint64_t v1 = 105;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_401[v1];
  unint64_t v3 = 105 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738370()
{
}

void sub_1CD738384()
{
}

llvm::raw_ostream *sub_1CD7383F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD738410(a2, a3, a4);
}

uint64_t sub_1CD738408()
{
  return 1;
}

llvm::raw_ostream *sub_1CD738410(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFE30();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7384D4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::BasicAA, llvm::Func"
                    "tion, llvm::AnalysisManager<Function>>]";
  v10[1] = 139;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8B) {
    uint64_t v1 = 139;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_402[v1];
  unint64_t v3 = 139 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738594()
{
}

void sub_1CD7385A8(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::BasicAA::Key);
}

llvm::raw_ostream *sub_1CD7385F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD738610(a2, a3, a4);
}

uint64_t sub_1CD738608()
{
  return 0;
}

llvm::raw_ostream *sub_1CD738610(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFE30();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7386D4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::BasicAA>]";
  v10[1] = 93;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5D) {
    uint64_t v1 = 93;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_403[v1];
  unint64_t v3 = 93 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738794()
{
}

void sub_1CD7387A8()
{
}

llvm::raw_ostream *sub_1CD738818(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD738834(a2, a3, a4);
}

uint64_t sub_1CD73882C()
{
  return 1;
}

llvm::raw_ostream *sub_1CD738834(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFEEC();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD7388F8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CFLAndersAA, llvm::"
                    "Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 143;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F) {
    uint64_t v1 = 143;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_404[v1];
  unint64_t v3 = 143 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD7389B8()
{
}

void sub_1CD7389CC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::CFLAndersAA::Key);
}

llvm::raw_ostream *sub_1CD738A18(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD738A34(a2, a3, a4);
}

uint64_t sub_1CD738A2C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD738A34(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFEEC();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD738AF8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CFLAndersAA>]";
  v10[1] = 97;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61) {
    uint64_t v1 = 97;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_405[v1];
  unint64_t v3 = 97 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738BB8()
{
}

void sub_1CD738BCC()
{
}

llvm::raw_ostream *sub_1CD738C3C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD738C58(a2, a3, a4);
}

uint64_t sub_1CD738C50()
{
  return 1;
}

llvm::raw_ostream *sub_1CD738C58(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFFA8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD738D1C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CFLSteensAA, llvm::"
                    "Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 143;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F) {
    uint64_t v1 = 143;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_406[v1];
  unint64_t v3 = 143 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738DDC()
{
}

void sub_1CD738DF0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::CFLSteensAA::Key);
}

llvm::raw_ostream *sub_1CD738E3C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD738E58(a2, a3, a4);
}

uint64_t sub_1CD738E50()
{
  return 0;
}

llvm::raw_ostream *sub_1CD738E58(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD6FFFA8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD738F1C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CFLSteensAA>]";
  v10[1] = 97;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61) {
    uint64_t v1 = 97;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_407[v1];
  unint64_t v3 = 97 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD738FDC()
{
}

void sub_1CD738FF0()
{
}

llvm::raw_ostream *sub_1CD739060(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73907C(a2, a3, a4);
}

uint64_t sub_1CD739074()
{
  return 1;
}

llvm::raw_ostream *sub_1CD73907C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD700064();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739140()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::objcarc::ObjCARCAA,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96) {
    uint64_t v1 = 150;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_408[v1];
  unint64_t v3 = 150 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739200()
{
}

void sub_1CD739214(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::objcarc::ObjCARCAA::Key);
}

llvm::raw_ostream *sub_1CD739260(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73927C(a2, a3, a4);
}

uint64_t sub_1CD739274()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73927C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD700064();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739340()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::objcarc::ObjCARCAA>]";
  v10[1] = 104;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68) {
    uint64_t v1 = 104;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_409[v1];
  unint64_t v3 = 104 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739400()
{
}

void sub_1CD739414()
{
}

llvm::raw_ostream *sub_1CD739484(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7394A0(a2, a3, a4);
}

uint64_t sub_1CD739498()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7394A0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD700120();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739564()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::SCEVAA, llvm::Funct"
                    "ion, llvm::AnalysisManager<Function>>]";
  v10[1] = 138;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8A) {
    uint64_t v1 = 138;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_410[v1];
  unint64_t v3 = 138 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739624()
{
}

void sub_1CD739638(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::SCEVAA::Key);
}

llvm::raw_ostream *sub_1CD739684(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7396A0(a2, a3, a4);
}

uint64_t sub_1CD739698()
{
  return 0;
}

llvm::raw_ostream *sub_1CD7396A0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD700120();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739764()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::SCEVAA>]";
  v10[1] = 92;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5C) {
    uint64_t v1 = 92;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_411[v1];
  unint64_t v3 = 92 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739824()
{
}

void sub_1CD739838()
{
}

llvm::raw_ostream *sub_1CD7398A8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD7398C4(a2, a3, a4);
}

uint64_t sub_1CD7398BC()
{
  return 1;
}

llvm::raw_ostream *sub_1CD7398C4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD7001DC();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739988()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ScopedNoAliasAA, ll"
                    "vm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 147;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x93) {
    uint64_t v1 = 147;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_412[v1];
  unint64_t v3 = 147 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739A48()
{
}

void sub_1CD739A5C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::ScopedNoAliasAA::Key);
}

llvm::raw_ostream *sub_1CD739AA8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD739AC4(a2, a3, a4);
}

uint64_t sub_1CD739ABC()
{
  return 0;
}

llvm::raw_ostream *sub_1CD739AC4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD7001DC();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739B88()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ScopedNoAliasAA>]";
  v10[1] = 101;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x65) {
    uint64_t v1 = 101;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_413[v1];
  unint64_t v3 = 101 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739C48()
{
}

void sub_1CD739C5C()
{
}

llvm::raw_ostream *sub_1CD739CCC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD739CE8(a2, a3, a4);
}

uint64_t sub_1CD739CE0()
{
  return 1;
}

llvm::raw_ostream *sub_1CD739CE8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD700298();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739DAC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::TypeBasedAA, llvm::"
                    "Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 143;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F) {
    uint64_t v1 = 143;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_414[v1];
  unint64_t v3 = 143 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD739E6C()
{
}

void sub_1CD739E80(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::TypeBasedAA::Key);
}

llvm::raw_ostream *sub_1CD739ECC(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD739EE8(a2, a3, a4);
}

uint64_t sub_1CD739EE0()
{
  return 0;
}

llvm::raw_ostream *sub_1CD739EE8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD700298();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD739FAC()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::TypeBasedAA>]";
  v10[1] = 97;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61) {
    uint64_t v1 = 97;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_415[v1];
  unint64_t v3 = 97 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

uint64_t sub_1CD73A068(uint64_t result, int a2)
{
  unint64_t v3 = (void *)result;
  unsigned int v4 = *(_DWORD *)(result + 64);
  int v5 = v4 + 1;
  if (v4 + 1 <= *(_DWORD *)(result + 8) << 6) {
    *(_DWORD *)(result + 64) = v5;
  }
  else {
    double result = sub_1CB8F8DF4(result, v5, 0);
  }
  if (a2) {
    *(void *)(*v3 + 8 * (v4 >> 6)) |= 1 << v4;
  }
  return result;
}

uint64_t sub_1CD73A0DC(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639790;
  sub_1CCCB742C((void **)(a1 + 16));
  return a1;
}

void sub_1CD73A120(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639790;
  sub_1CCCB742C((void **)(a1 + 16));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD73A184()
{
}

llvm::raw_ostream *sub_1CD73A1A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CD73A2EC((int *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD73A1AC()
{
  return 0;
}

void sub_1CD73A1B4()
{
}

llvm::raw_ostream *sub_1CD73A2EC(int *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1CB8E509C(a2, "repeat<");
  size_t v9 = llvm::raw_ostream::operator<<(v8, *a1);
  sub_1CB8E509C(v9, ">(");
  llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::printPipeline((llvm::raw_ostream *)(a1 + 2), a2, a3, a4);

  return sub_1CB8E509C(a2, ")");
}

char *sub_1CD73A374()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<Loop, LoopAnal"
                    "ysisManager, LoopStandardAnalysisResults &, LPMUpdater &>>]";
  v10[1] = 159;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9F) {
    uint64_t v1 = 159;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_416[v1];
  unint64_t v3 = 159 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73A434()
{
}

void sub_1CD73A448(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

llvm::raw_ostream *sub_1CD73A450(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73A464(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD73A45C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73A464(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD70512C();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD73A514()
{
}

llvm::BlockFrequencyInfo *sub_1CD73A528@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return llvm::LoopInterchangePass::run(a1, a2, a3);
}

llvm::raw_ostream *sub_1CD73A530(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73A544(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD73A53C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73A544(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD7051E8();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD73A5F4()
{
}

void sub_1CD73A608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
}

llvm::raw_ostream *sub_1CD73A610(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73A624(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD73A61C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73A624(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  unint64_t v7 = sub_1CD7052A4();
  size_t v10 = (const void *)a3(a4, v7, v8);
  size_t v11 = v9;
  double result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 <= *((void *)a2 + 3) - (void)result)
  {
    if (v9)
    {
      double result = (llvm::raw_ostream *)memcpy(result, v10, v9);
      *((void *)a2 + 4) += v11;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v9);
  }
  return result;
}

void sub_1CD73A6D4()
{
}

void sub_1CD73A6E8()
{
}

llvm::raw_ostream *sub_1CD73A758(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73A774(a2, a3, a4);
}

uint64_t sub_1CD73A76C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73A774(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD705360();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73A838()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LoopAccessAnalysis,"
                    " llvm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandardAnalysisR"
                    "esults &, llvm::LPMUpdater &>]";
  v10[1] = 230;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xE6) {
    uint64_t v1 = 230;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_419[v1];
  unint64_t v3 = 230 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73A8F8()
{
}

void sub_1CD73A90C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::LoopAccessAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73A958(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73A974(a2, a3, a4);
}

uint64_t sub_1CD73A96C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73A974(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD705360();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73AA38()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LoopAccessAnalysis>]";
  v10[1] = 104;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68) {
    uint64_t v1 = 104;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_420[v1];
  unint64_t v3 = 104 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73AAF8()
{
}

void sub_1CD73AB0C()
{
}

llvm::raw_ostream *sub_1CD73AB7C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73AB98(a2, a3, a4);
}

uint64_t sub_1CD73AB90()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73AB98(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD70541C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73AC5C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DDGAnalysis, llvm::"
                    "Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandardAnalysisResults "
                    "&, llvm::LPMUpdater &>]";
  v10[1] = 223;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xDF) {
    uint64_t v1 = 223;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_421[v1];
  unint64_t v3 = 223 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73AD1C()
{
}

void sub_1CD73AD30(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::DDGAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73AD7C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73AD98(a2, a3, a4);
}

uint64_t sub_1CD73AD90()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73AD98(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD70541C();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73AE5C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DDGAnalysis>]";
  v10[1] = 97;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61) {
    uint64_t v1 = 97;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_422[v1];
  unint64_t v3 = 97 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73AF1C()
{
}

void sub_1CD73AF30()
{
}

llvm::raw_ostream *sub_1CD73AFA0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73AFBC(a2, a3, a4);
}

uint64_t sub_1CD73AFB4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73AFBC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD7054D8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "require<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73B080()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::IVUsersAnalysis, ll"
                    "vm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandardAnalysisResu"
                    "lts &, llvm::LPMUpdater &>]";
  v10[1] = 227;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xE3) {
    uint64_t v1 = 227;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_423[v1];
  unint64_t v3 = 227 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73B140()
{
}

void sub_1CD73B154(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::IVUsersAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73B1A0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73B1BC(a2, a3, a4);
}

uint64_t sub_1CD73B1B4()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73B1BC(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD7054D8();
  uint64_t v8 = (const void *)a2(a3, v6, v7);
  size_t v10 = v9;
  size_t v11 = sub_1CB8E509C(a1, "invalidate<");
  uint64_t v12 = (void *)*((void *)v11 + 4);
  if (v10 <= *((void *)v11 + 3) - (void)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((void *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, (const char *)v8, v10);
  }

  return sub_1CB8E509C(v11, ">");
}

char *sub_1CD73B280()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::IVUsersAnalysis>]";
  v10[1] = 101;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x65) {
    uint64_t v1 = 101;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_424[v1];
  unint64_t v3 = 101 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73B340()
{
}

void sub_1CD73B354()
{
}

llvm::raw_ostream *sub_1CD73B3C4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F718(a2, a3, a4);
}

uint64_t sub_1CD73B3D8()
{
  return 0;
}

char *sub_1CD73B3E0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandard"
                    "AnalysisResults &, llvm::LPMUpdater &>]";
  v10[1] = 239;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xEF) {
    uint64_t v1 = 239;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_425[v1];
  unint64_t v3 = 239 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73B4A0()
{
}

void sub_1CD73B4B4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  sub_1CBFA16F4((uint64_t *)a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key);
}

llvm::raw_ostream *sub_1CD73B500(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD71F918(a2, a3, a4);
}

uint64_t sub_1CD73B514()
{
  return 0;
}

void sub_1CD73B520()
{
}

void sub_1CD73B534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

llvm::raw_ostream *sub_1CD73B53C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return llvm::LNICMPass::printPipeline(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD73B548()
{
  return 0;
}

char *sub_1CD73B550()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LNICMPass]";
  v10[1] = 65;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x41) {
    uint64_t v1 = 65;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_426[v1];
  unint64_t v3 = 65 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73B60C()
{
}

void sub_1CD73B678()
{
}

void sub_1CD73B6E4()
{
}

void sub_1CD73B750()
{
}

void sub_1CD73B7C0()
{
}

void sub_1CD73B7D4()
{
}

void sub_1CD73B850()
{
}

uint64_t sub_1CD73B864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Result::invalidate((llvm::LazyCallGraph **)(a1 + 8), a2, a3, a4);
}

char *sub_1CD73B86C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InnerAnalysisManagerProxy<CGSCCAnalysisManager, Module>]";
  v10[1] = 111;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F) {
    uint64_t v1 = 111;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_427[v1];
  unint64_t v3 = 111 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73B92C()
{
}

uint64_t sub_1CD73B944(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639B58;
  sub_1CCCC05A8((int *)(a1 + 16));
  return a1;
}

char *sub_1CD73B988()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<ModuleAnalysisManag"
                    "er, LazyCallGraph::SCC, LazyCallGraph &>]";
  v10[1] = 141;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8D) {
    uint64_t v1 = 141;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_428[v1];
  unint64_t v3 = 141 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73BA48()
{
}

void sub_1CD73BA5C(uint64_t a1)
{
  v2[6] = *MEMORY[0x1E4F143B8];
  v2[0] = *(void *)(a1 + 8);
  v2[1] = 1;
  for (uint64_t i = 2; i != 6; i += 2)
    v2[i] = -4096;
  sub_1CCCC064C();
}

uint64_t sub_1CD73BB04(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639BB0;
  sub_1CCCC05A8((int *)(a1 + 16));
  return a1;
}

void sub_1CD73BB48(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639BB0;
  sub_1CCCC05A8((int *)(a1 + 16));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD73BBAC()
{
}

char *sub_1CD73BBB4()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<CGSCCAnalysisManager, Function>]";
  v10[1] = 113;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71) {
    uint64_t v1 = 113;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_429[v1];
  unint64_t v3 = 113 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73BC74()
{
}

uint64_t sub_1CD73BC8C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639C08;
  sub_1CCCC05A8((int *)(a1 + 16));
  return a1;
}

char *sub_1CD73BCD0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<ModuleAnalysisManager, Function>]";
  v10[1] = 114;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x72) {
    uint64_t v1 = 114;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_430[v1];
  unint64_t v3 = 114 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73BD90()
{
}

void *sub_1CD73BDA8(void *a1)
{
  *a1 = &unk_1F2639C60;
  uint64_t v2 = a1[1];
  if (v2)
  {
    sub_1CC0799B4((_DWORD *)(v2 + 48));
    sub_1CC079A08((_DWORD *)(v2 + 24));
  }
  return a1;
}

char *sub_1CD73BE00()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InnerAnalysisManagerProxy<LoopAnalysisManager, Function>]";
  v10[1] = 112;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70) {
    uint64_t v1 = 112;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_431[v1];
  unint64_t v3 = 112 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD73BEC0()
{
}

void sub_1CD73BED4(uint64_t a1)
{
  v2[6] = *MEMORY[0x1E4F143B8];
  v2[0] = *(void *)(a1 + 8);
  v2[1] = 1;
  for (uint64_t i = 2; i != 6; i += 2)
    v2[i] = -4096;
  sub_1CCCC0A34();
}

uint64_t sub_1CD73BF7C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639CB8;
  sub_1CCCC05A8((int *)(a1 + 16));
  return a1;
}

void sub_1CD73BFC0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2639CB8;
  sub_1CCCC05A8((int *)(a1 + 16));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD73C024()
{
}

char *sub_1CD73C02C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<FunctionAnalysisMan"
                    "ager, Loop, LoopStandardAnalysisResults &>]";
  v10[1] = 143;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F) {
    uint64_t v1 = 143;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_432[v1];
  unint64_t v3 = 143 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  double result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void *sub_1CD73C0E8(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      double result = sub_1CCCBDF0C((void *)(v4 + 16), *(_OWORD **)(v6 + 16), *(_OWORD **)(v6 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 3));
      v4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

void sub_1CD73C170()
{
}

llvm::raw_ostream *sub_1CD73C184(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5EF8E0((const char **)(a1 + 8), a2, a3, a4);
}

uint64_t llvm::PassBuilder::invokePeepholeEPCallbacks(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 152);
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    int v5 = (void *)(*(void *)(result + 144) + 24);
    while (1)
    {
      uint64_t v7 = a3;
      uint64_t v8 = a3;
      if (!*v5) {
        break;
      }
      uint64_t v6 = a2;
      double result = (*(uint64_t (**)(void, uint64_t, uint64_t *))(*(void *)*v5 + 48))(*v5, a2, &v8);
      a2 = v6;
      v5 += 4;
      v4 -= 32;
      a3 = v7;
      if (!v4) {
        return result;
      }
    }
    sub_1CB920400();
    return llvm::PassBuilder::addPGOInstrPassesForO0();
  }
  return result;
}

void llvm::PassBuilder::addPGOInstrPassesForO0(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    v16[0] = a4;
    sub_1CD709598();
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v14, *(const void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a5;
    uint64_t v15 = *(void *)(a5 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v12, *(const void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a6;
    uint64_t v13 = *(void *)(a6 + 16);
  }
  uint64_t v10 = *a7;
  uint64_t v11 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  }
  llvm::PGOInstrumentationUse::PGOInstrumentationUse((uint64_t)v16, (long long *)v14, (long long *)v12, a4, &v11);
  sub_1CD709624();
}

void llvm::PassBuilder::buildInlinerPipeline(llvm *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  llvm::getInlineParams(this, SHIDWORD(this), (uint64_t)v9);
  if (a3 == 1)
  {
    if (!*(unsigned char *)(a2 + 128)) {
      goto LABEL_9;
    }
    if (*(_DWORD *)(a2 + 104) == 3)
    {
      DWORD1(v10) = 0;
      if (!BYTE8(v10)) {
        BYTE8(v10) = 1;
      }
    }
  }
  else if (!*(unsigned char *)(a2 + 128))
  {
    goto LABEL_9;
  }
  BYTE14(v11) = byte_1EBCEF560;
  if (!HIBYTE(v11)) {
    HIBYTE(v11) = 1;
  }
LABEL_9:
  v7[2] = v10;
  v7[3] = v11;
  int v8 = v12;
  v7[0] = v9[0];
  v7[1] = v9[1];
  llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass(a4, (uint64_t)v7, byte_1EBCEF7A0, dword_1EBCEF9E0, dword_1EBD03148);
}

void llvm::PassBuilder::buildModuleInlinerPipeline(llvm *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  llvm::getInlineParams(this, SHIDWORD(this), (uint64_t)v13);
  if (a3 == 1 && *(unsigned char *)(a2 + 128) && *(_DWORD *)(a2 + 104) == 3)
  {
    DWORD1(v14) = 0;
    if (!BYTE8(v14)) {
      BYTE8(v14) = 1;
    }
  }
  HIWORD(v15) = 256;
  long long v8 = v13[1];
  long long v9 = v14;
  long long v10 = v15;
  long long v7 = v13[0];
  uint64_t v6 = 0;
  int v11 = v16;
  int v12 = dword_1EBCEF9E0;
  sub_1CD70A7D4();
}

void sub_1CD73C9E8()
{
}

void llvm::PassBuilder::addVectorPasses(uint64_t a1)
{
  v1[297] = *MEMORY[0x1E4F143B8];
  llvm::LoopVectorizePass::LoopVectorizePass(v1, *(unsigned __int8 *)(a1 + 8) ^ 1 | ((*(unsigned __int8 *)(a1 + 9) ^ 1) << 8));
  sub_1CD715104();
}

void sub_1CD73D2E8()
{
}

void llvm::PassBuilder::buildModuleOptimizationPipeline(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CCC9F04C();
}

void llvm::PassBuilder::buildPerModuleDefaultPipeline(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CD707FB0();
}

void llvm::PassBuilder::buildThinLTOPreLinkDefaultPipeline(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CD707FB0();
}

void llvm::PassBuilder::buildThinLTODefaultPipeline(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CD707FB0();
}

void llvm::PassBuilder::buildLTOPreLinkDefaultPipeline(void *a1@<X8>)
{
}

void llvm::PassBuilder::buildO0DefaultPipeline(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  v19[55] = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[128])
  {
    if (a1[113])
    {
      v19[0] = *(void *)a1;
      sub_1CD70A19C();
    }
    int v12 = *((_DWORD *)a1 + 26);
    if ((v12 - 1) <= 1)
    {
      if (a1[55] < 0)
      {
        a1 = (char *)sub_1CB8BDF7C((uint64_t)v17, *((const void **)a1 + 4), *((void *)a1 + 5));
      }
      else
      {
        *(_OWORD *)uint64_t v17 = *((_OWORD *)a1 + 2);
        uint64_t v18 = *((void *)a1 + 6);
      }
      if (v4[103] < 0)
      {
        a1 = (char *)sub_1CB8BDF7C((uint64_t)__p, *((const void **)v4 + 10), *((void *)v4 + 11));
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v4 + 5);
        uint64_t v16 = *((void *)v4 + 12);
      }
      uint64_t v14 = *((void *)v4 + 15);
      char v13 = v12 == 1;
      if (!v14) {
        llvm::PassBuilder::addPGOInstrPassesForO0((uint64_t)a1, (uint64_t)a3, v13, 0, (uint64_t)v17, (uint64_t)__p, &v14);
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 1u, memory_order_relaxed);
      llvm::PassBuilder::addPGOInstrPassesForO0((uint64_t)a1, (uint64_t)a3, v13, 0, (uint64_t)v17, (uint64_t)__p, &v14);
    }
  }
  uint64_t v6 = *((unsigned int *)a1 + 238);
  if (v6)
  {
    uint64_t v7 = 32 * v6;
    long long v8 = (void *)(*((void *)a1 + 118) + 24);
    while (1)
    {
      v19[0] = a2;
      if (!*v8) {
        break;
      }
      (*(void (**)(void, void *, void *))(*(void *)*v8 + 48))(*v8, a3, v19);
      v8 += 4;
      v7 -= 32;
      if (!v7) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    if (v4[128])
    {
      if (v4[112]) {
        operator new();
      }
    }
    uint64_t v9 = *((unsigned int *)v4 + 258);
    if (!v9)
    {
LABEL_13:
      LOBYTE(v19[0]) = 0;
      sub_1CCC9EEF0();
    }
    uint64_t v10 = 32 * v9;
    int v11 = (void *)(*((void *)v4 + 128) + 24);
    while (1)
    {
      v19[0] = a2;
      if (!*v11) {
        break;
      }
      (*(void (**)(void, void *, void *))(*(void *)*v11 + 48))(*v11, a3, v19);
      v11 += 4;
      v10 -= 32;
      if (!v10) {
        goto LABEL_13;
      }
    }
  }
  sub_1CB920400();
}

void sub_1CD73F048()
{
}

uint64_t llvm::PassBuilder::buildDefaultAAPipeline@<X0>(llvm::PassBuilder *this@<X0>, void *a2@<X8>)
{
  a2[2] = sub_1CCCBFB64;
  *a2 = a2 + 2;
  a2[3] = sub_1CCCBFD94;
  a2[4] = sub_1CCCBFFC4;
  uint64_t result = *(void *)this;
  a2[5] = sub_1CCCBF484;
  a2[1] = 0x400000004;
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 112))(result, a2);
  }
  return result;
}

void *sub_1CD73F180(void *a1)
{
  *a1 = &unk_1F263BAD0;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F263BB38;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD73F268(void *a1)
{
  *a1 = &unk_1F263BB38;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD73F2BC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD73F350(v11);
}

uint64_t sub_1CD73F350(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD73F368(void *a1)
{
  sub_1CD73F180(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD73F3A0(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD73F3AC(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD73F3BC(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    uint64_t v4 = &unk_1F263BB88;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD73F440(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD73F454(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD73F45C(void *a1)
{
  *a1 = &unk_1F263BB38;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD73F4D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD73F4D8(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD73F4EC(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD73F500(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD73F514(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD73F540(int **a1, _WORD *a2, long long *a3, uint64_t a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEF960, 0, 0);
  dword_1EBCEF9E0 = 0;
  qword_1EBCEF9E8 = (uint64_t)&unk_1F263BB88;
  *(void *)&dword_1EBCEF9F0 = 0;
  qword_1EBCEF960 = (uint64_t)&unk_1F263BAD0;
  qword_1EBCEF9F8 = (uint64_t)&unk_1F263BB38;
  qword_1EBCEFA00 = (uint64_t)&qword_1EBCEF960;
  qword_1EBCEFA08 = (uint64_t)&unk_1EBCEFA18;
  qword_1EBCEFA10 = 0x800000000;
  qword_1EBCEFB98 = (uint64_t)&unk_1F263BBC8;
  qword_1EBCEFBB0 = (uint64_t)&qword_1EBCEFB98;
  sub_1CD73F654(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEF960);
}

void sub_1CD73F654(int **a1, _WORD *a2, long long *a3, uint64_t a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEF960, "enable-ml-inliner", 0x11uLL);
  uint64_t v8 = *a1;
  dword_1EBCEF9E0 = **a1;
  byte_1EBCEF9F4 = 1;
  dword_1EBCEF9F0 = *v8;
  word_1EBCEF96A = (32 * (*a2 & 3)) | word_1EBCEF96A & 0xFF9F;
  xmmword_1EBCEF980 = *a3;
  uint64_t v9 = *(void *)a4;
  unsigned int v10 = *(_DWORD *)(a4 + 8);

  sub_1CD73F77C(v9, v10);
}

void sub_1CD73F704()
{
}

void *sub_1CD73F718()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F263BBC8;
  return result;
}

void sub_1CD73F750(uint64_t a1, void *a2)
{
  *a2 = &unk_1F263BBC8;
}

void sub_1CD73F77C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 40 * a2;
    do
    {
      sub_1CD73F7C8(*(unsigned __int8 **)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1CD73F7C8(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a2;
  _OWORD v11[2] = a4;
  v11[3] = a5;
  v11[4] = &unk_1F263BB88;
  char v13 = 1;
  int v12 = a3;
  unint64_t v7 = sub_1CD73F8BC((unint64_t)v11);
  uint64_t v8 = qword_1EBCEFA08 + 48 * qword_1EBCEFA10;
  long long v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 32) = &unk_1F263BBA8;
  char v10 = *(unsigned char *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(unsigned char *)(v8 + 44) = v10;
  *(void *)(v8 + 32) = &unk_1F263BB88;
  LODWORD(qword_1EBCEFA10) = qword_1EBCEFA10 + 1;
  llvm::cl::AddLiteralOption(qword_1EBCEFA00, a1, a2);
}

unint64_t sub_1CD73F8BC(unint64_t result)
{
  if (qword_1EBCEFA10 >= HIDWORD(qword_1EBCEFA10))
  {
    if (qword_1EBCEFA08 > result || qword_1EBCEFA08 + 48 * (unint64_t)qword_1EBCEFA10 <= result) {
      sub_1CD73F938();
    }
    sub_1CD73F938();
  }
  return result;
}

void sub_1CD73F938()
{
}

void sub_1CD73FA30(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEF5A0, 0, 0);
  byte_1EBCEF620 = 0;
  qword_1EBCEF628 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCEF630 = 0;
  qword_1EBCEF5A0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCEF638 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCEF640 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCEF658 = (uint64_t)&qword_1EBCEF640;
  sub_1CD73FB30(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEF5A0);
}

__n128 sub_1CD73FB30(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEF5A0, "enable-mem-prof", 0xFuLL);
  uint64_t v8 = *a1;
  byte_1EBCEF620 = **a1;
  byte_1EBCEF631 = 1;
  byte_1EBCEF630 = *v8;
  word_1EBCEF5AA = word_1EBCEF5AA & 0xFF9F | (32 * (*a2 & 3));
  word_1EBCEF5AA = word_1EBCEF5AA & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBCEF5C0 = (__int128)*a4;
  return result;
}

void sub_1CD73FBC8(char **a1, _WORD *a2, __n128 *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEF8A0, 0, 0);
  byte_1EBCEF920 = 0;
  qword_1EBCEF928 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCEF930 = 0;
  qword_1EBCEF8A0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCEF938 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCEF940 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCEF958 = (uint64_t)&qword_1EBCEF940;
  sub_1CD73FCB8(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEF8A0);
}

__n128 sub_1CD73FCB8(char **a1, _WORD *a2, __n128 *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEF8A0, "enable-no-rerun-simplification-pipeline", 0x27uLL);
  char v6 = *a1;
  byte_1EBCEF920 = **a1;
  byte_1EBCEF931 = 1;
  byte_1EBCEF930 = *v6;
  word_1EBCEF8AA = (32 * (*a2 & 3)) | word_1EBCEF8AA & 0xFF9F;
  __n128 result = *a3;
  xmmword_1EBCEF8C0 = (__int128)*a3;
  return result;
}

uint64_t sub_1CD73FD40(uint64_t a1)
{
  *(void *)a1 = &unk_1F263BC10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD73FD90(uint64_t a1)
{
  *(void *)a1 = &unk_1F263BC10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CD73FE00@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::PGOInstrumentationGenCreateVar::run(a1 + 8, a2, a3);
}

llvm::raw_ostream *sub_1CD73FE08(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD73FE24(a2, a3, a4);
}

uint64_t sub_1CD73FE1C()
{
  return 0;
}

llvm::raw_ostream *sub_1CD73FE24(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char v6 = sub_1CD73FED0();
  long long v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

char *sub_1CD73FED0()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOInstrumentationGenCreateVar]";
  v10[1] = 86;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56) {
    uint64_t v1 = 86;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_433[v1];
  unint64_t v3 = 86 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

uint64_t sub_1CD73FF8C(uint64_t a1)
{
  *(void *)a1 = &unk_1F263BC50;
  unint64_t v3 = (void **)(a1 + 8);
  sub_1CCCB67B8(&v3);
  return a1;
}

uint64_t sub_1CD73FFE4(uint64_t a1)
{
  *(void *)a1 = &unk_1F263BC50;
  unint64_t v3 = (void **)(a1 + 8);
  sub_1CCCB67B8(&v3);
  return MEMORY[0x1D25D9CE0](a1, 0xA1C4030951706);
}

void sub_1CD740050(uint64_t a1@<X8>)
{
}

void sub_1CD740064()
{
}

uint64_t sub_1CD740070()
{
  return 1;
}

void sub_1CD740078(uint64_t a1)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  llvm::AnalysisManager<llvm::Function>::getCachedResultImpl();
}

uint64_t sub_1CD740154(uint64_t a1)
{
  *(void *)a1 = &unk_1F263BC90;
  unint64_t v3 = (void **)(a1 + 8);
  sub_1CCB7AA60(&v3);
  return a1;
}

uint64_t sub_1CD7401AC(uint64_t a1)
{
  *(void *)a1 = &unk_1F263BC90;
  unint64_t v3 = (void **)(a1 + 8);
  sub_1CCB7AA60(&v3);
  return MEMORY[0x1D25D9CE0](a1, 0xA1C4030951706);
}

double sub_1CD740218@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1CD8C5368(a1, a2);
}

llvm::raw_ostream *sub_1CD740220(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1CD74023C(a2, a3, a4);
}

uint64_t sub_1CD740234()
{
  return 1;
}

llvm::raw_ostream *sub_1CD74023C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CD7402E8();
  long long v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

char *sub_1CD7402E8()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroConditionalWrapper]";
  v10[1] = 78;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E) {
    uint64_t v1 = 78;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_434[v1];
  unint64_t v3 = 78 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void llvm::PassPlugin::Load(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*AddressOfSymbol)(_OWORD *__return_ptr);
  long long v7;
  uint64_t *v8;
  const char *v9;
  uint64_t *v10;
  uint64_t *v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  const char *v24;
  __int16 v25;
  long long __p;
  uint64_t v27;
  unsigned char v28[40];
  uint64_t v29[4];
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  uint64_t v33[4];
  __int16 v34;
  uint64_t v35[4];
  __int16 v36;
  uint64_t v37[5];
  _OWORD v38[2];
  void *v39;
  void *v40[2];
  uint64_t v41;

  uint64_t v2 = a1;
  v40[0] = 0;
  v40[1] = 0;
  BOOL v41 = 0;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary((const char *)a1, (uint64_t)v40);
  BOOL v39 = PermanentLibrary;
  if (PermanentLibrary == &llvm::sys::DynamicLibrary::Invalid)
  {
    v35[0] = (uint64_t)"Could not load library '";
    BOOL v36 = 259;
    std::string::size_type v34 = 260;
    v33[0] = v2;
    sub_1CB8F1E58(v35, v33, (uint64_t)v37);
    v31[0] = (uint64_t)"': ";
    uint64_t v32 = 259;
    sub_1CB8F1E58(v37, v31, (uint64_t)v38);
    uint64_t v30 = 260;
    v29[0] = (uint64_t)v40;
    size_t v8 = sub_1CB8F1E58((uint64_t *)v38, v29, (uint64_t)&__p);
    llvm::inconvertibleErrorCode((llvm *)v8);
    operator new();
  }
  int v5 = PermanentLibrary;
  if (*(char *)(v2 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&__p, *(const void **)v2, *(void *)(v2 + 8));
  }
  else
  {
    std::string __p = *(_OWORD *)v2;
    uint64_t v27 = *(void *)(v2 + 16);
  }
  *(void *)int v28 = v5;
  memset(&v28[8], 0, 32);
  AddressOfSymbol = (void (*)(_OWORD *__return_ptr))llvm::sys::DynamicLibrary::getAddressOfSymbol(&v39, "llvmGetPassPluginInfo");
  if (!AddressOfSymbol)
  {
    v35[0] = (uint64_t)"Plugin entry point not found in '";
    BOOL v36 = 259;
    std::string::size_type v34 = 260;
    v33[0] = v2;
    sub_1CB8F1E58(v35, v33, (uint64_t)v37);
    long long v9 = "'. Is this a legacy plugin?";
LABEL_13:
    v31[0] = (uint64_t)v9;
    uint64_t v32 = 259;
    size_t v10 = v31;
    goto LABEL_14;
  }
  AddressOfSymbol(v38);
  *(_OWORD *)&v28[8] = v38[0];
  *(_OWORD *)&v28[24] = v38[1];
  if (LODWORD(v38[0]) != 1)
  {
    uint64_t v24 = "Wrong API version on plugin '";
    uint64_t v25 = 259;
    uint64_t v23 = 260;
    v22[0] = v2;
    sub_1CB8F1E58((uint64_t *)&v24, v22, (uint64_t)v29);
    uint64_t v20 = "'. Got version ";
    BOOL v21 = 259;
    sub_1CB8F1E58(v29, (uint64_t *)&v20, (uint64_t)v31);
    uint64_t v19 = 264;
    LODWORD(v18[0]) = *(_DWORD *)&v28[8];
    sub_1CB8F1E58(v31, v18, (uint64_t)v33);
    uint64_t v16 = ", supported version is ";
    uint64_t v17 = 259;
    sub_1CB8F1E58(v33, (uint64_t *)&v16, (uint64_t)v35);
    long long v15 = 265;
    LODWORD(v14[0]) = 1;
    sub_1CB8F1E58(v35, v14, (uint64_t)v37);
    int v12 = ".";
    char v13 = 259;
    size_t v10 = (uint64_t *)&v12;
LABEL_14:
    uint64_t v11 = sub_1CB8F1E58(v37, v10, (uint64_t)v38);
    llvm::inconvertibleErrorCode((llvm *)v11);
    operator new();
  }
  if (!*(void *)&v28[32])
  {
    v35[0] = (uint64_t)"Empty entry callback in plugin '";
    BOOL v36 = 259;
    std::string::size_type v34 = 260;
    v33[0] = v2;
    sub_1CB8F1E58(v35, v33, (uint64_t)v37);
    long long v9 = "'.'";
    goto LABEL_13;
  }
  *(_OWORD *)a2 = __p;
  unint64_t v7 = *(_OWORD *)&v28[16];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v28;
  *(unsigned char *)(a2 + 64) &= ~1u;
  *(void *)(a2 + 16) = v27;
  std::string __p = 0uLL;
  uint64_t v27 = 0;
  *(_OWORD *)(a2 + 40) = v7;
  *(void *)(a2 + 56) = *(void *)&v28[32];
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
}

uint64_t llvm::ChangeReporter<std::string>::registerRequiredCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 296);
  if (v2 >= *(_DWORD *)(a2 + 300)) {
    sub_1CD74AD1C();
  }
  unint64_t v3 = (void *)(*(void *)(a2 + 288) + 32 * v2);
  *unint64_t v3 = result;
  v3[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 296) = v2 + 1;
  uint64_t v4 = *(unsigned int *)(a2 + 440);
  if (v4 >= *(_DWORD *)(a2 + 444)) {
    sub_1CD74AF0C();
  }
  int v5 = (void *)(*(void *)(a2 + 432) + 32 * v4);
  *int v5 = result;
  void v5[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 440) = v4 + 1;
  uint64_t v6 = *(unsigned int *)(a2 + 584);
  if (v6 >= *(_DWORD *)(a2 + 588)) {
    sub_1CD74B0FC();
  }
  unint64_t v7 = (void *)(*(void *)(a2 + 576) + 32 * v6);
  void *v7 = result;
  v7[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 584) = v6 + 1;
  return result;
}

void llvm::IRChangedPrinter::generateIRRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = a5;
  int v14 = 0;
  unint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v6);
  }
  else {
    uint64_t v6 = 0;
  }
  sub_1CCCC5F10((llvm::raw_ostream *)&v7, &v6);
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

llvm::raw_ostream *llvm::IRChangedPrinter::handleAfter(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (byte_1EBCEFD08)
  {
    char v12 = sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "*** IR Dump Before ");
    uint64_t v13 = (void *)*((void *)v12 + 4);
    if (a3 <= *((void *)v12 + 3) - (void)v13)
    {
      if (a3)
      {
        memcpy(v13, a2, a3);
        *((void *)v12 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v12, (const char *)a2, a3);
    }
    int v14 = sub_1CB8E509C(v12, " on ");
    char v15 = *(unsigned char *)(a4 + 23);
    BOOL v16 = v15 < 0;
    if (v15 >= 0) {
      uint64_t v17 = (const char *)a4;
    }
    else {
      uint64_t v17 = *(const char **)a4;
    }
    size_t v18 = v15 & 0x7F;
    if (v16) {
      size_t v19 = *(void *)(a4 + 8);
    }
    else {
      size_t v19 = v18;
    }
    uint64_t v20 = llvm::raw_ostream::write(v14, v17, v19);
    BOOL v21 = sub_1CB8E509C(v20, " ***\n");
    char v22 = *(unsigned char *)(a5 + 23);
    BOOL v23 = v22 < 0;
    if (v22 >= 0) {
      uint64_t v24 = (const char *)a5;
    }
    else {
      uint64_t v24 = *(const char **)a5;
    }
    size_t v25 = v22 & 0x7F;
    if (v23) {
      size_t v26 = *(void *)(a5 + 8);
    }
    else {
      size_t v26 = v25;
    }
    llvm::raw_ostream::write(v21, v24, v26);
  }
  char v27 = *(unsigned char *)(a6 + 23);
  int v28 = v27;
  uint64_t v29 = v27 & 0x7F;
  if (v28 < 0) {
    uint64_t v29 = *(void *)(a6 + 8);
  }
  uint64_t v30 = *(llvm::raw_ostream **)(a1 + 40);
  if (v29)
  {
    BOOL v31 = sub_1CB8E509C(v30, "*** IR Dump After ");
    uint64_t v32 = (void *)*((void *)v31 + 4);
    if (a3 <= *((void *)v31 + 3) - (void)v32)
    {
      if (a3)
      {
        memcpy(v32, a2, a3);
        *((void *)v31 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v31, (const char *)a2, a3);
    }
    size_t v33 = sub_1CB8E509C(v31, " on ");
    char v34 = *(unsigned char *)(a4 + 23);
    BOOL v35 = v34 < 0;
    if (v34 >= 0) {
      BOOL v36 = (const char *)a4;
    }
    else {
      BOOL v36 = *(const char **)a4;
    }
    size_t v37 = v34 & 0x7F;
    if (v35) {
      size_t v38 = *(void *)(a4 + 8);
    }
    else {
      size_t v38 = v37;
    }
    BOOL v39 = llvm::raw_ostream::write(v33, v36, v38);
    BOOL v40 = sub_1CB8E509C(v39, " ***\n");
    char v41 = *(unsigned char *)(a6 + 23);
    BOOL v42 = v41 < 0;
    if (v41 >= 0) {
      BOOL v43 = (const char *)a6;
    }
    else {
      BOOL v43 = *(const char **)a6;
    }
    size_t v44 = v41 & 0x7F;
    if (v42) {
      size_t v45 = *(void *)(a6 + 8);
    }
    else {
      size_t v45 = v44;
    }
    return llvm::raw_ostream::write(v40, v43, v45);
  }
  else
  {
    BOOL v47 = sub_1CB8E509C(v30, "*** IR Deleted After ");
    BOOL v48 = (void *)*((void *)v47 + 4);
    if (a3 <= *((void *)v47 + 3) - (void)v48)
    {
      if (a3)
      {
        memcpy(v48, a2, a3);
        *((void *)v47 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v47, (const char *)a2, a3);
    }
    BOOL v49 = sub_1CB8E509C(v47, " on ");
    char v50 = *(unsigned char *)(a4 + 23);
    BOOL v51 = v50 < 0;
    if (v50 >= 0) {
      BOOL v52 = (const char *)a4;
    }
    else {
      BOOL v52 = *(const char **)a4;
    }
    size_t v53 = v50 & 0x7F;
    if (v51) {
      size_t v54 = *(void *)(a4 + 8);
    }
    else {
      size_t v54 = v53;
    }
    BOOL v55 = llvm::raw_ostream::write(v49, v52, v54);
    return sub_1CB8E509C(v55, " ***\n");
  }
}

uint64_t llvm::PrintIRInstrumentation::pushModuleDesc(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  v16.n128_u64[0] = a2;
  v16.n128_u64[1] = a3;
  if (*(void *)a4) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a4 + 16))(&v14);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v6 = sub_1CCCC6404(&v14, 0);
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v15 = v6;
  uint64_t v8 = a1 + 8;
  if (*(void *)a4) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a4 + 16))(&v11);
  }
  else {
    uint64_t v11 = 0;
  }
  sub_1CCCC67F8((char *)__p, &v11);
  __n128 v9 = sub_1CD740DF4(v8, &v15, (long long *)__p, &v16);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 8))(result, v9);
  }
  return result;
}

__n128 sub_1CD740DF4(uint64_t a1, void *a2, long long *a3, __n128 *a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    sub_1CD748648();
  }
  uint64_t v5 = *(void *)a1 + 48 * v4;
  *(void *)uint64_t v5 = *a2;
  long long v6 = *a3;
  *(void *)(v5 + 24) = *((void *)a3 + 2);
  *(_OWORD *)(v5 + 8) = v6;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *a4;
  *(__n128 *)(v5 + 32) = *a4;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1CD740E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2 + 48 * *(unsigned int *)(a2 + 8);
  *(void *)a1 = *(void *)(v2 - 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v2 - 40);
  *(void *)(a1 + 24) = *(void *)(v2 - 24);
  *(void *)(v2 - 40) = 0;
  *(void *)(v2 - 32) = 0;
  *(void *)(v2 - 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 - 16);
  LODWORD(v2) = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)a2 + 48 * v2;
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*(void **)(v3 + 8));
  }
}

uint64_t llvm::PrintIRInstrumentation::printBeforePass(llvm *a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t result = sub_1CCCC6BBC(a2, a3);
  if ((result & 1) == 0)
  {
    if (llvm::PrintIRInstrumentation::shouldPrintAfterPass(a1, (unsigned __int8 *)a2, a3))
    {
      if (*(void *)a4) {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a4 + 16))(&v25);
      }
      else {
        uint64_t v25 = 0;
      }
      llvm::PrintIRInstrumentation::pushModuleDesc((uint64_t)a1, (unint64_t)a2, a3, (uint64_t)&v25);
      uint64_t v9 = v25;
      uint64_t v25 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    uint64_t result = llvm::PrintIRInstrumentation::shouldPrintBeforePass(a1, (unsigned __int8 *)a2, a3);
    if (result)
    {
      if (*(void *)a4) {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a4 + 16))(&v24);
      }
      else {
        uint64_t v24 = 0;
      }
      int v10 = sub_1CCCC6C48(&v24);
      uint64_t result = v24;
      uint64_t v24 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      if (v10)
      {
        uint64_t v11 = llvm::dbgs((llvm *)result);
        char v12 = sub_1CB8E509C(v11, "*** IR Dump Before ");
        char v13 = (void *)*((void *)v12 + 4);
        if (a3 <= *((void *)v12 + 3) - (void)v13)
        {
          if (a3)
          {
            memcpy(v13, a2, a3);
            *((void *)v12 + 4) += a3;
          }
        }
        else
        {
          llvm::raw_ostream::write(v12, a2, a3);
        }
        uint64_t v14 = sub_1CB8E509C(v12, " on ");
        if (*(void *)a4) {
          (*(void (**)(llvm **__return_ptr))(**(void **)a4 + 16))(&v21);
        }
        else {
          BOOL v21 = 0;
        }
        sub_1CCCC67F8((char *)__p, (uint64_t *)&v21);
        if (v23 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        if (v23 >= 0) {
          size_t v16 = v23 & 0x7F;
        }
        else {
          size_t v16 = (size_t)__p[1];
        }
        uint64_t v17 = llvm::raw_ostream::write(v14, (const char *)v15, v16);
        sub_1CB8E509C(v17, " ***\n");
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        size_t v18 = v21;
        BOOL v21 = 0;
        if (v18) {
          size_t v18 = (llvm *)(*(uint64_t (**)(llvm *))(*(void *)v18 + 8))(v18);
        }
        size_t v19 = llvm::dbgs(v18);
        if (*(void *)a4) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a4 + 16))(&v20);
        }
        else {
          uint64_t v20 = 0;
        }
        sub_1CCCC5F10(v19, &v20);
        uint64_t result = v20;
        uint64_t v20 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::PrintIRInstrumentation::shouldPrintAfterPass(llvm *a1, unsigned __int8 *a2, size_t a3)
{
  if (llvm::shouldPrintAfterAll(a1)) {
    return 1;
  }
  PassNameForClassName = (const void *)llvm::PassInstrumentationCallbacks::getPassNameForClassName(*(void *)a1, a2, a3);
  size_t v9 = v8;
  llvm::printAfterPasses(&v17);
  uint64_t v11 = v17;
  uint64_t v10 = v18;
  if (v17 != v18)
  {
    while (1)
    {
      char v12 = *(unsigned char *)(v11 + 23);
      BOOL v13 = v12 < 0;
      uint64_t v14 = v12 >= 0 ? (const void *)v11 : *(const void **)v11;
      uint64_t v15 = v12 & 0x7F;
      if (v13) {
        uint64_t v15 = *(void *)(v11 + 8);
      }
      if (v15 == v9 && (!v9 || !memcmp(v14, PassNameForClassName, v9))) {
        break;
      }
      v11 += 24;
      if (v11 == v10)
      {
        uint64_t v11 = v10;
        break;
      }
    }
  }
  BOOL v6 = v11 != v10;
  size_t v19 = (void **)&v17;
  sub_1CB8338B8(&v19);
  return v6;
}

uint64_t llvm::PrintIRInstrumentation::shouldPrintBeforePass(llvm *a1, unsigned __int8 *a2, size_t a3)
{
  if (llvm::shouldPrintBeforeAll(a1)) {
    return 1;
  }
  PassNameForClassName = (const void *)llvm::PassInstrumentationCallbacks::getPassNameForClassName(*(void *)a1, a2, a3);
  size_t v9 = v8;
  llvm::printBeforePasses(&v17);
  uint64_t v11 = v17;
  uint64_t v10 = v18;
  if (v17 != v18)
  {
    while (1)
    {
      char v12 = *(unsigned char *)(v11 + 23);
      BOOL v13 = v12 < 0;
      uint64_t v14 = v12 >= 0 ? (const void *)v11 : *(const void **)v11;
      uint64_t v15 = v12 & 0x7F;
      if (v13) {
        uint64_t v15 = *(void *)(v11 + 8);
      }
      if (v15 == v9 && (!v9 || !memcmp(v14, PassNameForClassName, v9))) {
        break;
      }
      v11 += 24;
      if (v11 == v10)
      {
        uint64_t v11 = v10;
        break;
      }
    }
  }
  BOOL v6 = v11 != v10;
  size_t v19 = (void **)&v17;
  sub_1CB8338B8(&v19);
  return v6;
}

void llvm::PrintIRInstrumentation::printAfterPass(llvm *a1, void *a2, size_t a3, uint64_t *a4)
{
  if ((sub_1CCCC6BBC((char *)a2, a3) & 1) == 0
    && llvm::PrintIRInstrumentation::shouldPrintAfterPass(a1, (unsigned __int8 *)a2, a3))
  {
    sub_1CD740E48((uint64_t)v23, (uint64_t)a1 + 8);
    uint64_t v8 = *a4;
    *(_OWORD *)std::string __p = v24;
    uint64_t v27 = v25;
    if (v8) {
      (*(void (**)(llvm **__return_ptr))(*(void *)v8 + 16))(&v22);
    }
    else {
      char v22 = 0;
    }
    int v9 = sub_1CCCC6C48(&v22);
    uint64_t v10 = v22;
    char v22 = 0;
    if (v10) {
      uint64_t v10 = (llvm *)(*(uint64_t (**)(llvm *))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      uint64_t v11 = llvm::dbgs(v10);
      char v12 = sub_1CB8E509C(v11, "*** IR Dump After ");
      BOOL v13 = (void *)*((void *)v12 + 4);
      if (a3 <= *((void *)v12 + 3) - (void)v13)
      {
        if (a3)
        {
          memcpy(v13, a2, a3);
          *((void *)v12 + 4) += a3;
        }
      }
      else
      {
        llvm::raw_ostream::write(v12, (const char *)a2, a3);
      }
      uint64_t v14 = sub_1CB8E509C(v12, " on ");
      if (v27 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      if (v27 >= 0) {
        size_t v16 = HIBYTE(v27) & 0x7F;
      }
      else {
        size_t v16 = (size_t)__p[1];
      }
      uint64_t v17 = llvm::raw_ostream::write(v14, (const char *)v15, v16);
      uint64_t v18 = sub_1CB8E509C(v17, " ***\n");
      size_t v19 = llvm::dbgs(v18);
      if (*a4) {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a4 + 16))(&v21);
      }
      else {
        uint64_t v21 = 0;
      }
      sub_1CCCC5F10(v19, &v21);
      uint64_t v20 = v21;
      uint64_t v21 = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
  }
}

void llvm::PrintIRInstrumentation::printAfterPassInvalidated(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  v31[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a2;
  v19[1] = a3;
  PassNameForClassName = (unsigned __int8 *)llvm::PassInstrumentationCallbacks::getPassNameForClassName(*a1, a2, a3);
  if (llvm::PrintIRInstrumentation::shouldPrintAfterPass((llvm *)a1, PassNameForClassName, v7)
    && (sub_1CCCC6BBC((char *)a2, a3) & 1) == 0)
  {
    sub_1CD740E48((uint64_t)&v14, (uint64_t)(a1 + 1));
    uint64_t v8 = v14;
    *(_OWORD *)std::string __p = v15;
    uint64_t v18 = v16;
    if (v14)
    {
      sub_1CCCC7084(&v14, "*** IR Dump After {0} on {1} (invalidated) ***", (uint64_t)v19, (uint64_t)__p);
      uint64_t v29 = (char *)v31;
      long long v30 = xmmword_1CFB28E20;
      int v21 = 0;
      char v25 = 0;
      uint64_t v26 = 0;
      int v28 = (void **)&v29;
      int v27 = 0;
      uint64_t v20 = &unk_1F2646FA8;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      sub_1CD862C68((uint64_t)&v14, (llvm::raw_ostream *)&v20);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
      uint64_t v10 = llvm::dbgs(v9);
      uint64_t v11 = llvm::raw_ostream::write(v10, v29, v30);
      char v12 = sub_1CB8E509C(v11, "\n");
      BOOL v13 = llvm::dbgs(v12);
      sub_1CCCC7124(v13, v8);
      if (v29 != (char *)v31) {
        free(v29);
      }
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
}

BOOL llvm::PrintIRInstrumentation::registerCallbacks(llvm *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  BOOL shouldPrintBeforeSomePass = llvm::shouldPrintBeforeSomePass(a1);
  if (shouldPrintBeforeSomePass
    || (BOOL shouldPrintBeforeSomePass = llvm::shouldPrintAfterSomePass((llvm *)shouldPrintBeforeSomePass)))
  {
    uint64_t v6 = *(unsigned int *)(a2 + 296);
    if (v6 >= *(_DWORD *)(a2 + 300)) {
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    size_t v7 = (llvm **)(*(void *)(a2 + 288) + 32 * v6);
    void *v7 = a1;
    v7[3] = (llvm *)((char *)off_1EC7DFA60 + 2);
    *(_DWORD *)(a2 + 296) = v6 + 1;
  }
  BOOL result = llvm::shouldPrintAfterSomePass((llvm *)shouldPrintBeforeSomePass);
  if (result)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 440);
    if (v8 >= *(_DWORD *)(a2 + 444)) {
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    int v9 = (llvm **)(*(void *)(a2 + 432) + 32 * v8);
    llvm *v9 = a1;
    v9[3] = (llvm *)((char *)off_1EC7DFA68 + 2);
    *(_DWORD *)(a2 + 440) = v8 + 1;
    uint64_t v10 = *(unsigned int *)(a2 + 584);
    if (v10 >= *(_DWORD *)(a2 + 588)) {
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    uint64_t v11 = (llvm **)(*(void *)(a2 + 576) + 32 * v10);
    *uint64_t v11 = a1;
    v11[3] = (llvm *)((char *)off_1EC7DFA70 + 2);
    *(_DWORD *)(a2 + 584) = v10 + 1;
  }
  return result;
}

uint64_t llvm::OptNoneInstrumentation::registerCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  }
  uint64_t v3 = (void *)(*(void *)a2 + 32 * v2);
  *uint64_t v3 = result;
  v3[3] = (char *)off_1EC7DFA78 + 2;
  *(_DWORD *)(a2 + 8) = v2 + 1;
  return result;
}

uint64_t llvm::OptBisectInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2)
{
  if (!atomic_load_explicit(&llvm::OptBisector, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1CD5CC960, (void (*)(void *))sub_1CD5CC9B4);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)llvm::OptBisector + 24))(llvm::OptBisector);
  if (result)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    *(void *)(*(void *)a2 + 32 * v4 + 24) = (char *)off_1EC7DFA80 + 2;
    *(_DWORD *)(a2 + 8) = v4 + 1;
  }
  return result;
}

llvm *llvm::PrintPassInstrumentation::print(llvm::PrintPassInstrumentation *this)
{
  if (*((unsigned char *)this + 3))
  {
    uint64_t v1 = this;
    uint64_t v2 = llvm::dbgs(this);
    this = llvm::raw_ostream::indent(v2, *((_DWORD *)v1 + 1));
  }

  return llvm::dbgs(this);
}

char *sub_1CD741C88(uint64_t a1, char *__s)
{
  uint64_t v3 = *(void **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_1CCCD18F8((char **)a1, __s);
  }
  else
  {
    *uint64_t v3 = __s;
    v3[1] = strlen(__s);
    uint64_t result = (char *)(v3 + 2);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

llvm::PreservedCFGCheckerInstrumentation::CFG *llvm::PreservedCFGCheckerInstrumentation::CFG::CFG(llvm::PreservedCFGCheckerInstrumentation::CFG *this, const llvm::Function *a2, int a3)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 4) = 0;
  uint64_t v5 = (char *)this + 32;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  if (a3)
  {
    uint64_t v17 = (char *)a2 + 72;
    int v18 = -1;
    size_t v19 = (char *)a2 + 72;
    do
    {
      size_t v19 = (char *)*((void *)v19 + 1);
      ++v18;
    }
    while (v19 != v17);
    sub_1CCCD267C(v22, v18);
    sub_1CD748A64(this, (uint64_t)v22);
    sub_1CD7489E8(v22);
    MEMORY[0x1D25D9CD0](v22[0], 8);
  }
  uint64_t v6 = (char *)a2 + 72;
  for (uint64_t i = *((void *)a2 + 10); (char *)i != v6; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v8 = i - 24;
    }
    else {
      uint64_t v8 = 0;
    }
    if (*((unsigned char *)this + 24))
    {
      uint64_t v20 = v8;
      uint64_t Successor = v8;
      sub_1CD741E7C((uint64_t)v22, (uint64_t)this, &Successor, &v20);
    }
    uint64_t v9 = *(void *)(v8 + 40);
    if (v9 != v8 + 40)
    {
      uint64_t v10 = v9 ? (unsigned __int8 *)(v9 - 24) : 0;
      if (v10[16] - 29 <= 0xA)
      {
        int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v10);
        if (NumSuccessors)
        {
          int v12 = NumSuccessors;
          for (unsigned int j = 0; j != v12; ++j)
          {
            uint64_t Successor = 0;
            uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v10, j);
            v22[0] = v8;
            uint64_t v14 = sub_1CD748FA4((uint64_t)v5, v22);
            long long v15 = sub_1CC220ACC((uint64_t)(v14 + 1), &Successor);
            ++*((_DWORD *)v15 + 2);
            if (*((unsigned char *)this + 24))
            {
              uint64_t v20 = Successor;
              sub_1CD741E7C((uint64_t)v22, (uint64_t)this, &v20, &Successor);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t sub_1CD741E7C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v12 = 0;
  uint64_t result = sub_1CD748BD8(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD748B48(a2, v12, a3, a4);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 40 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t llvm::PreservedCFGCheckerInstrumentation::CFG::printDiff(llvm::PreservedCFGCheckerInstrumentation::CFG *this, llvm::raw_ostream *a2, const llvm::PreservedCFGCheckerInstrumentation::CFG *a3, const llvm::PreservedCFGCheckerInstrumentation::CFG *a4)
{
  uint64_t result = sub_1CD742534((uint64_t)a2);
  if (result)
  {
    return (uint64_t)sub_1CB8E509C(this, "Some blocks were deleted\n");
  }
  else
  {
    int v8 = *((_DWORD *)a2 + 10);
    if (v8 != *((_DWORD *)a3 + 10))
    {
      uint64_t v9 = sub_1CB8E509C(this, "Different number of non-leaf basic blocks: before=");
      sub_1CD098D14(v9, *((unsigned int *)a2 + 10), 0, 0, 0);
      char v10 = sub_1CB8E509C(v9, ", after=");
      sub_1CD098D14(v10, *((unsigned int *)a3 + 10), 0, 0, 0);
      uint64_t result = (uint64_t)sub_1CB8E509C(v10, "\n");
      int v8 = *((_DWORD *)a2 + 10);
    }
    uint64_t v11 = *((void *)a2 + 4);
    uint64_t v12 = *((unsigned int *)a2 + 12);
    uint64_t v13 = v11 + 32 * v12;
    if (v8)
    {
      if (v12)
      {
        uint64_t v14 = 32 * v12;
        uint64_t v15 = *((void *)a2 + 4);
        while ((*(void *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 32;
          v14 -= 32;
          if (!v14) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v15 = *((void *)a2 + 4);
      }
    }
    else
    {
LABEL_12:
      uint64_t v15 = v11 + 32 * v12;
    }
    uint64_t v16 = v11 + 32 * v12;
    while (v15 != v16)
    {
      uint64_t v17 = *(void *)v15;
      uint64_t v56 = 0;
      uint64_t result = sub_1CD41F538(*((void *)a3 + 4), *((_DWORD *)a3 + 12), v17, &v56);
      if (result) {
        BOOL v18 = v56 == *((void *)a3 + 4) + 32 * *((unsigned int *)a3 + 12);
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        sub_1CB8E509C(this, "Non-leaf block ");
        sub_1CCCC80D4(this, *(void *)v15);
        size_t v19 = sub_1CB8E509C(this, " is removed (");
        sub_1CD098D14(v19, *(unsigned int *)(v15 + 16), 0, 0, 0);
        uint64_t result = (uint64_t)sub_1CB8E509C(v19, " successors)\n");
      }
      uint64_t v20 = v15 + 32;
      uint64_t v15 = v13;
      if (v20 != v13)
      {
        uint64_t v15 = v20;
        while ((*(void *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 32;
          if (v15 == v13)
          {
            uint64_t v15 = v13;
            break;
          }
        }
      }
    }
    uint64_t v21 = *((void *)a3 + 4);
    uint64_t v22 = *((unsigned int *)a3 + 12);
    uint64_t v23 = v21 + 32 * v22;
    if (*((_DWORD *)a3 + 10))
    {
      if (v22)
      {
        uint64_t v24 = 32 * v22;
        uint64_t v25 = *((void *)a3 + 4);
        while ((*(void *)v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v25 += 32;
          v24 -= 32;
          if (!v24) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        uint64_t v25 = *((void *)a3 + 4);
      }
    }
    else
    {
LABEL_31:
      uint64_t v25 = v21 + 32 * v22;
    }
    uint64_t v26 = v21 + 32 * v22;
    while (v25 != v26)
    {
      uint64_t v27 = *(void *)v25;
      uint64_t v56 = 0;
      int v28 = sub_1CD41F538(*((void *)a2 + 4), *((_DWORD *)a2 + 12), v27, &v56);
      uint64_t v29 = v56;
      if (v28) {
        BOOL v30 = v56 == *((void *)a2 + 4) + 32 * *((unsigned int *)a2 + 12);
      }
      else {
        BOOL v30 = 1;
      }
      if (v30)
      {
        sub_1CB8E509C(this, "Non-leaf block ");
        sub_1CCCC80D4(this, *(void *)v25);
        BOOL v31 = sub_1CB8E509C(this, " is added (");
        sub_1CD098D14(v31, *(unsigned int *)(v25 + 16), 0, 0, 0);
        uint64_t result = (uint64_t)sub_1CB8E509C(v31, " successors)\n");
      }
      else
      {
        uint64_t result = sub_1CD7425EC(v56 + 8, v25 + 8);
        if ((result & 1) == 0)
        {
          sub_1CB8E509C(this, "Different successors of block ");
          sub_1CCCC80D4(this, *(void *)v25);
          sub_1CB8E509C(this, " (unordered):\n");
          size_t v45 = sub_1CB8E509C(this, "- before (");
          sub_1CD098D14(v45, *(unsigned int *)(v29 + 16), 0, 0, 0);
          sub_1CB8E509C(v45, "): ");
          int v46 = *(_DWORD *)(v29 + 16);
          uint64_t v47 = *(void *)(v29 + 8);
          uint64_t v48 = *(unsigned int *)(v29 + 24);
          uint64_t v49 = v47 + 16 * v48;
          if (v46)
          {
            if (v48)
            {
              uint64_t v43 = 16 * v48;
              uint64_t v37 = v47;
              while ((*(void *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v37 += 16;
                v43 -= 16;
                if (!v43) {
                  goto LABEL_81;
                }
              }
            }
            else
            {
              uint64_t v37 = v47;
            }
          }
          else
          {
LABEL_81:
            uint64_t v37 = v47 + 16 * v48;
          }
          uint64_t v54 = v47 + 16 * v48;
LABEL_46:
          while (v37 != v54)
          {
            sub_1CCCC80D4(this, *(void *)v37);
            size_t v33 = this;
            if (*(_DWORD *)(v37 + 8) == 1)
            {
              char v34 = ", ";
            }
            else
            {
              BOOL v35 = sub_1CB8E509C(this, "(");
              sub_1CD098D14(v35, *(unsigned int *)(v37 + 8), 0, 0, 0);
              size_t v33 = v35;
              char v34 = "), ";
            }
            sub_1CB8E509C(v33, v34);
            uint64_t v36 = v37 + 16;
            uint64_t v37 = v49;
            if (v36 != v49)
            {
              uint64_t v37 = v36;
              while ((*(void *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v37 += 16;
                if (v37 == v49)
                {
                  uint64_t v37 = v49;
                  goto LABEL_46;
                }
              }
            }
          }
          sub_1CB8E509C(this, "\n");
          char v50 = sub_1CB8E509C(this, "- after (");
          sub_1CD098D14(v50, *(unsigned int *)(v25 + 16), 0, 0, 0);
          sub_1CB8E509C(v50, "): ");
          uint64_t v51 = *(void *)(v25 + 8);
          uint64_t v52 = *(unsigned int *)(v25 + 24);
          uint64_t v53 = v51 + 16 * v52;
          if (*(_DWORD *)(v25 + 16))
          {
            if (*(_DWORD *)(v25 + 24))
            {
              uint64_t v44 = 16 * v52;
              uint64_t v42 = *(void *)(v25 + 8);
              while ((*(void *)v42 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v42 += 16;
                v44 -= 16;
                if (!v44) {
                  goto LABEL_83;
                }
              }
            }
            else
            {
              uint64_t v42 = *(void *)(v25 + 8);
            }
          }
          else
          {
LABEL_83:
            uint64_t v42 = v51 + 16 * v52;
          }
          uint64_t v55 = v51 + 16 * v52;
LABEL_55:
          while (v42 != v55)
          {
            sub_1CCCC80D4(this, *(void *)v42);
            size_t v38 = this;
            if (*(_DWORD *)(v42 + 8) == 1)
            {
              BOOL v39 = ", ";
            }
            else
            {
              BOOL v40 = sub_1CB8E509C(this, "(");
              sub_1CD098D14(v40, *(unsigned int *)(v42 + 8), 0, 0, 0);
              size_t v38 = v40;
              BOOL v39 = "), ";
            }
            sub_1CB8E509C(v38, v39);
            uint64_t v41 = v42 + 16;
            uint64_t v42 = v53;
            if (v41 != v53)
            {
              uint64_t v42 = v41;
              while ((*(void *)v42 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v42 += 16;
                if (v42 == v53)
                {
                  uint64_t v42 = v53;
                  goto LABEL_55;
                }
              }
            }
          }
          uint64_t result = (uint64_t)sub_1CB8E509C(this, "\n");
        }
      }
      uint64_t v32 = v25 + 32;
      uint64_t v25 = v23;
      if (v32 != v23)
      {
        uint64_t v25 = v32;
        while ((*(void *)v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v25 += 32;
          if (v25 == v23)
          {
            uint64_t v25 = v23;
            break;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1CD742534(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(void *)a1 + 40 * v1;
  if (*(_DWORD *)(a1 + 8))
  {
    if (v1)
    {
      uint64_t v3 = 40 * v1;
      uint64_t v4 = *(uint64_t **)a1;
      while (*v4 > 0x7FFFFFFFFFFFFFFDLL)
      {
        v4 += 5;
        v3 -= 40;
        if (!v3) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      uint64_t v4 = *(uint64_t **)a1;
    }
  }
  else
  {
LABEL_7:
    uint64_t v4 = (uint64_t *)(*(void *)a1 + 40 * v1);
  }
  uint64_t v5 = *(void *)a1 + 40 * v1;
  if (v4 == (uint64_t *)v5) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = v4[4];
    BOOL result = v6 == 0;
    if (!v6) {
      return 1;
    }
    int v8 = v4 + 5;
    while (v8 != (uint64_t *)v2)
    {
      uint64_t v9 = *v8;
      v8 += 5;
      if (v9 <= 0x7FFFFFFFFFFFFFFDLL)
      {
        uint64_t v4 = v8 - 5;
        goto LABEL_15;
      }
    }
    uint64_t v4 = (uint64_t *)v2;
LABEL_15:
    if (v4 == (uint64_t *)v5) {
      return result;
    }
  }
}

uint64_t sub_1CD7425EC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)a1 + 16 * v4;
  if (v2)
  {
    if (v4)
    {
      uint64_t v6 = 16 * v4;
      uint64_t v7 = *(void *)a1;
      while ((*(void *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 16;
        v6 -= 16;
        if (!v6) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      uint64_t v7 = *(void *)a1;
    }
  }
  else
  {
LABEL_7:
    uint64_t v7 = *(void *)a1 + 16 * v4;
  }
  uint64_t v8 = *(void *)a1 + 16 * v4;
LABEL_9:
  while (v7 != v8)
  {
    uint64_t v9 = *(void *)v7;
    uint64_t v15 = 0;
    uint64_t v16 = v9;
    if (sub_1CBA0E618(a2, &v16, &v15))
    {
      uint64_t v10 = v15;
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *(unsigned int *)(a2 + 16);
    }
    else
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *(unsigned int *)(a2 + 16);
      uint64_t v10 = *(void *)a2 + 16 * v12;
    }
    if (v10 == v11 + 16 * v12 || *(_DWORD *)(v10 + 8) != *(_DWORD *)(v7 + 8)) {
      return 0;
    }
    uint64_t v13 = v7 + 16;
    uint64_t v7 = v5;
    if (v13 != v5)
    {
      uint64_t v7 = v13;
      while ((*(void *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 16;
        if (v7 == v5)
        {
          uint64_t v7 = v5;
          goto LABEL_9;
        }
      }
    }
  }
  return 1;
}

BOOL llvm::PreservedCFGCheckerInstrumentation::CFG::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (void **)a3;
  v8[1] = (void **)&PreservedCFGCheckerAnalysis::Key;
  uint64_t v4 = sub_1CB896AE8(a3 + 48, (uint64_t)&PreservedCFGCheckerAnalysis::Key);
  uint64_t v5 = *(void *)(a3 + 56);
  if (v5 == *(void *)(a3 + 48)) {
    uint64_t v6 = (unsigned int *)(a3 + 68);
  }
  else {
    uint64_t v6 = (unsigned int *)(a3 + 64);
  }
  BOOL v9 = v4 != (void *)(v5 + 8 * *v6);
  return !sub_1CBF75724(v8) && !sub_1CBF7593C((uint64_t)v8) && !sub_1CBF75B60((uint64_t)v8);
}

void *llvm::PreservedCFGCheckerInstrumentation::registerCallbacks(void *result, uint64_t a2, _DWORD *a3)
{
  if (byte_1EBD0A658)
  {
    uint64_t v3 = result;
    uint64_t v12 = &PreservedCFGCheckerAnalysis::Key;
    BOOL result = sub_1CC6D91C0(a3, &v12);
    if (!result[1]) {
      operator new();
    }
    uint64_t v6 = *(unsigned int *)(a2 + 296);
    if (v6 >= *(_DWORD *)(a2 + 300))
    {
      uint64_t v12 = 0;
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    uint64_t v7 = (void *)(*(void *)(a2 + 288) + 32 * v6);
    void *v7 = v3;
    v7[1] = a3;
    v7[3] = (char *)off_1EC7DFB08 + 2;
    *(_DWORD *)(a2 + 296) = v6 + 1;
    uint64_t v8 = *(unsigned int *)(a2 + 584);
    if (v8 >= *(_DWORD *)(a2 + 588))
    {
      uint64_t v12 = 0;
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    BOOL v9 = (void *)(*(void *)(a2 + 576) + 32 * v8);
    void *v9 = v3;
    v9[3] = (char *)off_1EC7DFB10 + 2;
    *(_DWORD *)(a2 + 584) = v8 + 1;
    uint64_t v10 = *(unsigned int *)(a2 + 440);
    if (v10 >= *(_DWORD *)(a2 + 444))
    {
      uint64_t v12 = 0;
      llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    }
    uint64_t v11 = (void *)(*(void *)(a2 + 432) + 32 * v10);
    *uint64_t v11 = v3;
    v11[1] = a3;
    v11[3] = (char *)off_1EC7DFB18 + 2;
    *(_DWORD *)(a2 + 440) = v10 + 1;
  }
  return result;
}

uint64_t llvm::VerifyInstrumentation::registerCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 440);
  if (v2 >= *(_DWORD *)(a2 + 444)) {
    llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  }
  uint64_t v3 = (void *)(*(void *)(a2 + 432) + 32 * v2);
  *uint64_t v3 = result;
  v3[3] = (char *)off_1EC7DFB20 + 2;
  *(_DWORD *)(a2 + 440) = v2 + 1;
  return result;
}

void llvm::InLineChangePrinter::generateIRRepresentation(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v2);
  }
  else {
    uint64_t v2 = 0;
  }
  llvm::IRComparer<llvm::EmptyData>::analyzeIR();
}

void llvm::InLineChangePrinter::handleAfter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v28[3] = *MEMORY[0x1E4F143B8];
  v15[0] = a2;
  v15[1] = a3;
  sub_1CCCC7084(v14, "*** IR Dump After {0} on {1} ***\n", (uint64_t)v15, a4);
  uint64_t v26 = (const char *)v28;
  long long v27 = xmmword_1CFB28E20;
  int v17 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = &v26;
  int v23 = 0;
  uint64_t v16 = &unk_1F2646FA8;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  sub_1CD862C68((uint64_t)v14, (llvm::raw_ostream *)&v16);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v26, v27);
  v14[0] = a5;
  v14[1] = a6;
  if (*(void *)a7) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a7 + 16))(&v13);
  }
  else {
    uint64_t v13 = 0;
  }
  sub_1CCCC8588(&v13);
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_1F263C158;
  v12[1] = a1;
  _OWORD v12[2] = a4;
  void v12[3] = v15;
  uint64_t v25 = v12;
  llvm::IRComparer<llvm::EmptyData>::compare();
}

void llvm::IRComparer<llvm::EmptyData>::compare(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t *a13)
{
  if (a2)
  {
    int v36 = 0;
    memset(v32, 0, sizeof(v32));
    int v33 = 64;
    uint64_t v34 = 0;
    char v35 = 0;
    uint64_t v22 = *a1;
    char v21 = (uint64_t *)a1[1];
    v31[0] = v32;
    v31[1] = a3;
    _OWORD v31[2] = &v36;
    sub_1CD7431DC(v22, v21, (void (*)(uint64_t, uint64_t, uint64_t))sub_1CD74B8F8, (uint64_t)v31);
    sub_1CD7469C0((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = *(uint64_t **)(*a1 + 24);
    if (*(_DWORD *)(*a1 + 32))
    {
      while (1)
      {
        uint64_t v14 = *v13;
        if (*v13 && v14 != -8) {
          break;
        }
        ++v13;
      }
    }
    else
    {
      uint64_t v14 = *v13;
    }
    uint64_t v16 = a1[1];
    int v17 = *(uint64_t **)(v16 + 24);
    if (*(_DWORD *)(v16 + 32))
    {
      while (1)
      {
        uint64_t v18 = *v17;
        if (*v17 && v18 != -8) {
          break;
        }
        ++v17;
      }
    }
    else
    {
      uint64_t v18 = *v17;
    }
    LOBYTE(v31[0]) = 0;
    *(_DWORD *)uint64_t v32 = 0;
    uint64_t v20 = *(void *)(a3 + 24);
    if (v20)
    {
      (*(void (**)(uint64_t, void *, unsigned char *, uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v31, v32, v14 + 8, v18 + 8);
    }
    else
    {
      sub_1CB920400();
      llvm::InLineChangePrinter::handleFunctionCompare(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13);
    }
  }
}

void llvm::InLineChangePrinter::handleFunctionCompare(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t *a13)
{
  if (a11)
  {
    uint64_t v16 = sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "\n*** IR for function ");
    int v17 = (void *)*((void *)v16 + 4);
    if (a3 <= *((void *)v16 + 3) - (void)v17)
    {
      if (a3)
      {
        memcpy(v17, a2, a3);
        *((void *)v16 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v16, (const char *)a2, a3);
    }
    sub_1CB8E509C(v16, " ***\n");
  }
  uint64_t v18 = a1;
  sub_1CD7431DC(a12, a13, (void (*)(uint64_t, uint64_t, uint64_t))sub_1CCCD3198, (uint64_t)&v18);
}

void sub_1CD7431DC(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  char v50 = a3;
  uint64_t v51 = a4;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = a2 + 3;
  uint64_t v6 = *(unsigned __int8 **)a1;
  BOOL v40 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v49 = *(unsigned __int8 **)a1;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  v48[0] = a2 + 3;
  v48[1] = &v50;
  uint64_t v48[2] = a1 + 24;
  v48[3] = &v49;
  size_t v45 = 0;
  int v46 = 0;
  unint64_t v47 = 0;
  if (v7 == v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      char v12 = *(unsigned char *)(v7 + 23);
      BOOL v13 = v12 < 0;
      if (v12 >= 0) {
        uint64_t v14 = (unsigned __int8 *)v7;
      }
      else {
        uint64_t v14 = *(unsigned __int8 **)v7;
      }
      size_t v15 = v12 & 0x7F;
      if (v13) {
        size_t v16 = *(void *)(v7 + 8);
      }
      else {
        size_t v16 = v15;
      }
      int Key = llvm::StringMapImpl::FindKey(v4, v14, v16);
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 32))
      {
        int v19 = llvm::StringMapImpl::FindKey(v5, v14, v16);
        uint64_t v20 = *((unsigned int *)a2 + 8);
        if (v19 != -1) {
          uint64_t v20 = v19;
        }
        uint64_t v21 = *(void *)(a2[3] + 8 * v20) + 8;
        if ((unint64_t)v11 >= v47) {
          uint64_t v11 = sub_1CBF63C18(&v45, v21);
        }
        else {
          *v11++ = v21;
        }
        int v46 = v11;
      }
      else
      {
        for (; !sub_1CBAD746C(v49, (unsigned __int8 *)v7); v49 += 24)
        {
          if ((char)v49[23] < 0)
          {
            sub_1CB8BDF7C((uint64_t)__p, *(const void **)v49, *((void *)v49 + 1));
          }
          else
          {
            long long v22 = *(_OWORD *)v49;
            uint64_t v44 = *((void *)v49 + 2);
            *(_OWORD *)std::string __p = v22;
          }
          sub_1CD7494A0((uint64_t)v48, (uint64_t *)__p);
          if (SHIBYTE(v44) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v23 = (uint64_t *)v45;
        uint64_t v24 = (uint64_t *)v45;
        if (v45 != v11)
        {
          do
          {
            uint64_t v25 = *v24++;
            v50(v51, 0, v25);
          }
          while (v24 != v11);
        }
        int v46 = v23;
        char v26 = *(unsigned char *)(v7 + 23);
        BOOL v27 = v26 < 0;
        if (v26 >= 0) {
          uint64_t v28 = (unsigned __int8 *)v7;
        }
        else {
          uint64_t v28 = *(unsigned __int8 **)v7;
        }
        size_t v29 = v26 & 0x7F;
        if (v27) {
          size_t v30 = *(void *)(v7 + 8);
        }
        else {
          size_t v30 = v29;
        }
        int v31 = llvm::StringMapImpl::FindKey(v5, v28, v30);
        uint64_t v32 = *((unsigned int *)a2 + 8);
        if (v31 != -1) {
          uint64_t v32 = v31;
        }
        uint64_t v33 = *(void *)(a2[3] + 8 * v32) + 8;
        int v34 = llvm::StringMapImpl::FindKey(v4, v28, v30);
        uint64_t v35 = *(unsigned int *)(a1 + 32);
        if (v34 != -1) {
          uint64_t v35 = v34;
        }
        v50(v51, *(void *)(*(void *)(a1 + 24) + 8 * v35) + 8, v33);
        v49 += 24;
        uint64_t v11 = v23;
      }
      v7 += 24;
    }
    while (v7 != v8);
    uint64_t v6 = v49;
  }
  while (v6 != v40)
  {
    if ((char)v6[23] < 0)
    {
      sub_1CB8BDF7C((uint64_t)v41, *(const void **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v36 = *(_OWORD *)v6;
      uint64_t v42 = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v41 = v36;
    }
    sub_1CD7494A0((uint64_t)v48, (uint64_t *)v41);
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    uint64_t v6 = v49 + 24;
    v49 += 24;
  }
  uint64_t v37 = v45;
  if (v45 != v11)
  {
    size_t v38 = (uint64_t *)v45;
    do
    {
      uint64_t v39 = *v38++;
      v50(v51, 0, v39);
    }
    while (v38 != v11);
  }
  if (v37) {
    operator delete(v37);
  }
}

uint64_t llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 296);
  if (v2 >= *(_DWORD *)(a2 + 300)) {
    sub_1CD74B3EC();
  }
  uint64_t v3 = (void *)(*(void *)(a2 + 288) + 32 * v2);
  *uint64_t v3 = result;
  v3[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 296) = v2 + 1;
  uint64_t v4 = *(unsigned int *)(a2 + 440);
  if (v4 >= *(_DWORD *)(a2 + 444)) {
    sub_1CD74B5DC();
  }
  uint64_t v5 = (void *)(*(void *)(a2 + 432) + 32 * v4);
  *uint64_t v5 = result;
  void v5[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 440) = v4 + 1;
  uint64_t v6 = *(unsigned int *)(a2 + 584);
  if (v6 >= *(_DWORD *)(a2 + 588)) {
    sub_1CD74B7CC();
  }
  uint64_t v7 = (void *)(*(void *)(a2 + 576) + 32 * v6);
  void *v7 = result;
  v7[3] = (char *)&llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 584) = v6 + 1;
  return result;
}

uint64_t llvm::ChangeReporter<std::string>::saveIRBeforePass(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v8 = *(void **)(a1 + 16);
  if ((unint64_t)v8 >= *(void *)(a1 + 24))
  {
    BOOL v9 = sub_1CCCD38F8((int64x2_t *)(a1 + 8));
  }
  else
  {
    *uint64_t v8 = 0;
    v8[1] = 0;
    BOOL v9 = v8 + 3;
    v8[2] = 0;
  }
  *(void *)(a1 + 16) = v9;
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v16);
  }
  else {
    uint64_t v16 = 0;
  }
  int v10 = sub_1CCCC8744(&v16, a3, a4);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v10)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      *(unsigned char *)(a1 + 32) = 0;
      if (*(unsigned char *)(a1 + 33))
      {
        if (*(void *)a2) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v15);
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v15);
        uint64_t v12 = v15;
        uint64_t v15 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 16) - 24;
    if (*(void *)a2) {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v14);
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, char *, size_t, uint64_t))(*(void *)a1 + 24))(a1, &v14, a3, a4, v13);
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void llvm::ChangeReporter<std::string>::handleIRAfterPass(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v20);
  }
  else {
    uint64_t v20 = 0;
  }
  sub_1CCCC67F8((char *)__p, &v20);
  uint64_t v8 = v20;
  uint64_t v20 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (sub_1CCCC6BBC(a3, a4))
  {
    if (*(unsigned char *)(a1 + 33)) {
      (*(void (**)(uint64_t, char *, size_t, void **))(*(void *)a1 + 64))(a1, a3, a4, __p);
    }
  }
  else
  {
    if (*(void *)a2) {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v19);
    }
    else {
      uint64_t v19 = 0;
    }
    char v10 = sub_1CCCC8744(&v19, a3, a4);
    uint64_t v11 = v19;
    uint64_t v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    if (v10)
    {
      uint64_t v12 = (unsigned __int8 *)(*(void *)(a1 + 16) - 24);
      v17[0] = 0;
      v17[1] = 0;
      uint64_t v18 = 0;
      if (*(void *)a2) {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v16);
      }
      else {
        uint64_t v16 = 0;
      }
      (*(void (**)(uint64_t, uint64_t *, char *, size_t, void **))(*(void *)a1 + 24))(a1, &v16, a3, a4, v17);
      uint64_t v13 = v16;
      uint64_t v16 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      if (sub_1CBAD746C(v12, (unsigned __int8 *)v17))
      {
        if (*(unsigned char *)(a1 + 33)) {
          (*(void (**)(uint64_t, char *, size_t, void **))(*(void *)a1 + 32))(a1, a3, a4, __p);
        }
      }
      else
      {
        if (*(void *)a2) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v15);
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(uint64_t, char *, size_t, void **, unsigned __int8 *, void **, uint64_t *))(*(void *)a1 + 40))(a1, a3, a4, __p, v12, v17, &v15);
        uint64_t v14 = v15;
        uint64_t v15 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
    }
    else if (*(unsigned char *)(a1 + 33))
    {
      (*(void (**)(uint64_t, char *, size_t, void **))(*(void *)a1 + 56))(a1, a3, a4, __p);
    }
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(char *)(v9 - 1) < 0) {
    operator delete(*(void **)(v9 - 24));
  }
  *(void *)(a1 + 16) = v9 - 24;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
}

void llvm::ChangeReporter<std::string>::handleInvalidatedPass(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 33)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(char *)(v2 - 1) < 0) {
    operator delete(*(void **)(v2 - 24));
  }
  *(void *)(a1 + 16) = v2 - 24;
}

void *llvm::TextChangeReporter<std::string>::handleInitialIR(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v6);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v3 = (const std::string *)sub_1CCCC6404(&v6, 1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "*** IR Dump At Start ***\n");
  return llvm::Module::print(v3, *(llvm::raw_ostream **)(a1 + 40), 0, 0, 0);
}

void llvm::TextChangeReporter<std::string>::omitAfter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 40);
  sub_1CCCC7084(v5, "*** IR Dump After {0} on {1} omitted because no change ***\n", (uint64_t)v6, a4);
  sub_1CD862C68((uint64_t)v5, v4);
}

void llvm::TextChangeReporter<std::string>::handleInvalidated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 40);
  v4[0] = "*** IR Pass {0} invalidated ***\n";
  v4[1] = 32;
  v4[2] = &v6;
  v4[3] = 1;
  v5[0] = &unk_1F2617F90;
  v5[1] = v7;
  uint64_t v6 = v5;
  sub_1CD862C68((uint64_t)v4, v3);
}

void llvm::TextChangeReporter<std::string>::handleFiltered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  v6[0] = a2;
  v6[1] = a3;
  sub_1CCCC7084(v5, "*** IR Dump After {0} on {1} filtered out ***\n", (uint64_t)v6, a4);
  uint64_t v16 = (char *)v18;
  long long v17 = xmmword_1CFB28E20;
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = (void **)&v16;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646FA8;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1CD862C68((uint64_t)v5, (llvm::raw_ostream *)&v7);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v16, v17);
  if (v16 != (char *)v18) {
    free(v16);
  }
}

void llvm::TextChangeReporter<std::string>::handleIgnored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 40);
  sub_1CCCC7084(v5, "*** IR Pass {0} on {1} ignored ***\n", (uint64_t)v6, a4);
  sub_1CD862C68((uint64_t)v5, v4);
}

std::string *llvm::BlockDataT<llvm::EmptyData>::BlockDataT(std::string *a1, llvm::Value *this)
{
  Name = llvm::Value::getName(this);
  if (Name)
  {
    std::string::__init(a1, Name, v5);
  }
  else
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = a1 + 1;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  llvm::BasicBlock::print((const llvm::Function **)this, (llvm::raw_ostream *)&v7, 0, 1, 1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  return a1;
}

uint64_t llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::saveIRBeforePass(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >= *(void *)(a1 + 24))
  {
    uint64_t v9 = sub_1CCCD3AC0((int64x2_t *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(void *)(v8 + 48) = 0;
    *(_OWORD *)unint64_t v8 = 0u;
    *(_DWORD *)(v8 + 44) = 88;
    uint64_t v9 = (char *)(v8 + 56);
  }
  *(void *)(a1 + 16) = v9;
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v16);
  }
  else {
    uint64_t v16 = 0;
  }
  int v10 = sub_1CCCC8744(&v16, a3, a4);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v10)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      *(unsigned char *)(a1 + 32) = 0;
      if (*(unsigned char *)(a1 + 33))
      {
        if (*(void *)a2) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v15);
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v15);
        uint64_t v12 = v15;
        uint64_t v15 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 16) - 56;
    if (*(void *)a2) {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v14);
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, char *, size_t, uint64_t))(*(void *)a1 + 24))(a1, &v14, a3, a4, v13);
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleIRAfterPass(unsigned char *a1, uint64_t a2, char *a3, size_t a4)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v20);
  }
  else {
    uint64_t v20 = 0;
  }
  sub_1CCCC67F8((char *)v21, &v20);
  uint64_t v8 = v20;
  uint64_t v20 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (sub_1CCCC6BBC(a3, a4))
  {
    if (a1[33]) {
      (*(void (**)(unsigned char *, char *, size_t, void **))(*(void *)a1 + 64))(a1, a3, a4, v21);
    }
  }
  else
  {
    if (*(void *)a2) {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v19);
    }
    else {
      uint64_t v19 = 0;
    }
    char v9 = sub_1CCCC8744(&v19, a3, a4);
    uint64_t v10 = v19;
    uint64_t v19 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      uint64_t v11 = *((void *)a1 + 2);
      memset(v17, 0, sizeof(v17));
      int v18 = 88;
      if (*(void *)a2) {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v16);
      }
      else {
        uint64_t v16 = 0;
      }
      (*(void (**)(unsigned char *, uint64_t *, char *, size_t, unsigned char *))(*(void *)a1 + 24))(a1, &v16, a3, a4, v17);
      uint64_t v12 = v16;
      uint64_t v16 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      if (sub_1CD74B23C(v11 - 32, (uint64_t)&v17[24]))
      {
        if (a1[33]) {
          (*(void (**)(unsigned char *, char *, size_t, void **))(*(void *)a1 + 32))(a1, a3, a4, v21);
        }
      }
      else
      {
        uint64_t v13 = v11 - 56;
        if (*(void *)a2) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v15);
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(unsigned char *, char *, size_t, void **, uint64_t, unsigned char *, uint64_t *))(*(void *)a1 + 40))(a1, a3, a4, v21, v13, v17, &v15);
        uint64_t v14 = v15;
        uint64_t v15 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      sub_1CD746938((uint64_t)&v17[24]);
      uint64_t v23 = (void **)v17;
      sub_1CB8338B8(&v23);
    }
    else if (a1[33])
    {
      (*(void (**)(unsigned char *, char *, size_t, void **))(*(void *)a1 + 56))(a1, a3, a4, v21);
    }
  }
  sub_1CD7445CC((uint64_t)(a1 + 8));
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

void sub_1CD7445CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void **)(v2 - 56);
  sub_1CD746938(v2 - 32);
  uint64_t v4 = v3;
  sub_1CB8338B8(&v4);
  *(void *)(a1 + 8) = v3;
}

void *llvm::TextChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleInitialIR(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v6);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v3 = (const std::string *)sub_1CCCC6404(&v6, 1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "*** IR Dump At Start ***\n");
  return llvm::Module::print(v3, *(llvm::raw_ostream **)(a1 + 40), 0, 0, 0);
}

void llvm::TextChangeReporter<llvm::IRDataT<llvm::EmptyData>>::omitAfter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 40);
  sub_1CCCC7084(v5, "*** IR Dump After {0} on {1} omitted because no change ***\n", (uint64_t)v6, a4);
  sub_1CD862C68((uint64_t)v5, v4);
}

void llvm::TextChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleInvalidated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 40);
  v4[0] = "*** IR Pass {0} invalidated ***\n";
  v4[1] = 32;
  v4[2] = &v6;
  v4[3] = 1;
  v5[0] = &unk_1F2617F90;
  v5[1] = v7;
  uint64_t v6 = v5;
  sub_1CD862C68((uint64_t)v4, v3);
}

void llvm::TextChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleFiltered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  v6[0] = a2;
  v6[1] = a3;
  sub_1CCCC7084(v5, "*** IR Dump After {0} on {1} filtered out ***\n", (uint64_t)v6, a4);
  uint64_t v16 = (char *)v18;
  long long v17 = xmmword_1CFB28E20;
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = (void **)&v16;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646FA8;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1CD862C68((uint64_t)v5, (llvm::raw_ostream *)&v7);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v16, v17);
  if (v16 != (char *)v18) {
    free(v16);
  }
}

void llvm::TextChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleIgnored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 40);
  sub_1CCCC7084(v5, "*** IR Pass {0} on {1} ignored ***\n", (uint64_t)v6, a4);
  sub_1CD862C68((uint64_t)v5, v4);
}

uint64_t llvm::IRComparer<llvm::EmptyData>::generateFunctionData(int64x2_t *a1, llvm::Value *this)
{
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*((llvm::Value **)this + 9) == (llvm::Value *)((char *)this + 72) && (*((unsigned char *)this + 34) & 0x80) == 0)
  {
    return 0;
  }
  Name = llvm::Value::getName(this);
  uint64_t result = llvm::isFunctionInPrintList(Name, v6);
  if (result)
  {
    uint64_t v7 = *((void *)this + 10);
    if (v7) {
      int v8 = (llvm::Value *)(v7 - 24);
    }
    else {
      int v8 = 0;
    }
    uint64_t v9 = llvm::Value::getName(v8);
    if (v9)
    {
      std::string::__init(&v22, v9, v10);
      int64x2_t v23 = 0u;
      memset(v24, 0, sizeof(v24));
      int v25 = 64;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&v26, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        goto LABEL_16;
      }
    }
    else
    {
      memset(&v22, 0, sizeof(v22));
      int64x2_t v23 = 0u;
      memset(v24, 0, sizeof(v24));
      int v25 = 64;
    }
    std::string v26 = v22;
LABEL_16:
    uint64_t v11 = (llvm::Value *)*((void *)this + 10);
    if (v11 != (llvm::Value *)((char *)this + 72))
    {
      if (v11) {
        char v12 = (llvm::Value *)((char *)v11 - 24);
      }
      else {
        char v12 = 0;
      }
      uint64_t v13 = llvm::Value::getName(v12);
      sub_1CCCC8E38(&v23, v13, v14);
      v21[10] = llvm::Value::getName(v12);
      v21[11] = v15;
      llvm::BlockDataT<llvm::EmptyData>::BlockDataT();
    }
    uint64_t v16 = llvm::Value::getName(this);
    sub_1CCCC8E38(a1, v16, v17);
    uint64_t v19 = (unsigned __int8 *)llvm::Value::getName(this);
    size_t v20 = v18;
    sub_1CD746A98(v21, (uint64_t)&v23);
    sub_1CD749B68((uint64_t)&a1[1].i64[1], v19, v20, (uint64_t)v21);
    sub_1CD7469C0((uint64_t)v21);
    sub_1CD7469C0((uint64_t)&v23);
    return 1;
  }
  return result;
}

void sub_1CD744B24(llvm::StringMapImpl *a1, const std::string::value_type *a2, std::string::size_type a3, const std::string::value_type *a4, std::string::size_type a5)
{
  if (a2) {
    std::string::__init(&v12, a2, a3);
  }
  else {
    memset(&v12, 0, sizeof(v12));
  }
  if (a4) {
    std::string::__init(&v11, a4, a5);
  }
  else {
    memset(&v11, 0, sizeof(v11));
  }
  std::string v13 = v12;
  std::string v14 = v11;
  sub_1CCCCF980(v8, (uint64_t *)&v13);
  sub_1CCCCF758(a1, v8[0], (size_t)v8[1], (uint64_t)&__p);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void llvm::DotCfgChangeReporter::genHTML(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v54[3] = *MEMORY[0x1E4F143B8];
  v26[0] = a1;
  v26[1] = a2;
  v25[0] = a5;
  v25[1] = a6;
  __s = "{0}/{1}";
  *(void *)&long long v37 = 7;
  *((void *)&v37 + 1) = v41;
  uint64_t v38 = 2;
  v39[0] = &unk_1F263C030;
  v39[1] = &qword_1EBCEFFF0;
  v40[0] = &unk_1F2617F90;
  v40[1] = v25;
  v41[0] = v39;
  v41[1] = v40;
  uint64_t v52 = v54;
  long long v53 = xmmword_1CFB28E20;
  LODWORD(v43) = 0;
  LOBYTE(v47) = 0;
  uint64_t v48 = 0;
  char v50 = (void **)&v52;
  LODWORD(v49) = 0;
  uint64_t v42 = (uint64_t *)&unk_1F2646FA8;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v46 = 0;
  sub_1CD862C68((uint64_t)&__s, (llvm::raw_ostream *)&v42);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v42);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEFBB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCEFBB8))
  {
    if (byte_1EBCEFF9F >= 0) {
      size_t v17 = byte_1EBCEFF9F & 0x7F;
    }
    else {
      size_t v17 = qword_1EBCEFF90;
    }
    if (byte_1EBCEFF9F >= 0) {
      size_t v18 = &qword_1EBCEFF88;
    }
    else {
      size_t v18 = (uint64_t *)qword_1EBCEFF88;
    }
    llvm::sys::findProgramByName(v18, v17, 0, 0, (std::string *)&qword_1EBCEFBD8);
    __cxa_atexit((void (*)(void *))sub_1CD745040, &qword_1EBCEFBD8, &dword_1CB82C000);
    __cxa_guard_release(&qword_1EBCEFBB8);
  }
  if (byte_1EBCEFBF0)
  {
    char v10 = (char *)operator new(0x20uLL);
    *(void *)a7 = v10;
    *(_OWORD *)(a7 + 8) = xmmword_1CFB1D050;
    strcpy(v10, "Unable to find dot executable.");
  }
  else
  {
    std::string v11 = &qword_1EBCEFF88;
    if (byte_1EBCEFF9F < 0) {
      std::string v11 = (uint64_t *)qword_1EBCEFF88;
    }
    uint64_t v12 = byte_1EBCEFF9F & 0x7F;
    if (byte_1EBCEFF9F < 0) {
      uint64_t v12 = qword_1EBCEFF90;
    }
    uint64_t v42 = v11;
    uint64_t v43 = v12;
    uint64_t v44 = "-Tpdf";
    uint64_t v45 = 5;
    int v46 = "-o";
    uint64_t v47 = 2;
    uint64_t v48 = v52;
    uint64_t v49 = v53;
    char v50 = a3;
    uint64_t v51 = a4;
    if (byte_1EBCEFBEF >= 0) {
      std::string::size_type v13 = byte_1EBCEFBEF & 0x7F;
    }
    else {
      std::string::size_type v13 = unk_1EBCEFBE0;
    }
    LOBYTE(v23) = 0;
    char v24 = 0;
    if (byte_1EBCEFBEF >= 0) {
      std::string v14 = &qword_1EBCEFBD8;
    }
    else {
      std::string v14 = (uint64_t *)qword_1EBCEFBD8;
    }
    if ((llvm::sys::ExecuteAndWait(v14, v13, (uint64_t)&v42, 5, &v23, 0, 0, 0, 0, 0, 0, 0) & 0x80000000) != 0)
    {
      uint64_t v15 = (char *)operator new(0x20uLL);
      *(void *)a7 = v15;
      *(_OWORD *)(a7 + 8) = xmmword_1CFAC3CD0;
      strcpy(v15, "Error executing system dot.");
    }
    else
    {
      v19[0] = "  <a href=\"{0}\" target=\"_blank\">{1}</a><br/>\n";
      v19[1] = 45;
      void v19[2] = v22;
      v19[3] = 2;
      v20[0] = &unk_1F2617F90;
      v20[1] = v25;
      v21[0] = &unk_1F2617F90;
      v21[1] = v26;
      v22[0] = v20;
      v22[1] = v21;
      p_s = &__s;
      __s = (char *)&v38;
      long long v37 = xmmword_1CFB2C4B0;
      int v28 = 0;
      char v32 = 0;
      uint64_t v33 = 0;
      int v34 = 0;
      BOOL v27 = &unk_1F2646FA8;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      sub_1CD862C68((uint64_t)v19, (llvm::raw_ostream *)&v27);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v27);
      if ((unint64_t)(v37 + 1) > *((void *)&v37 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      __s[v37] = 0;
      std::string::size_type v16 = strlen(__s);
      std::string::__init((std::string *)a7, __s, v16);
      if (__s != (char *)&v38) {
        free(__s);
      }
    }
  }
  if (v52 != v54) {
    free(v52);
  }
}

uint64_t sub_1CD745040(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0 && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void llvm::DotCfgChangeReporter::handleInitialIR(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "<button type=\"button\" class=\"collapsible\">0. ");
  std::string::size_type v5 = sub_1CB8E509C(v4, "Initial IR (by function)</button>\n");
  std::string::size_type v6 = sub_1CB8E509C(v5, "<div class=\"content\">\n");
  sub_1CB8E509C(v6, "  <p>\n");
  memset(v13, 0, sizeof(v13));
  int v14 = 88;
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v12);
  }
  else {
    uint64_t v12 = 0;
  }
  sub_1CCCCF394(&v12, (int64x2_t *)v13);
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v11);
  }
  else {
    uint64_t v11 = 0;
  }
  char v8 = sub_1CCCC8588(&v11) != 0;
  v16[0] = &unk_1F263C258;
  v16[1] = a1;
  size_t v17 = v16;
  sub_1CD7452E8((uint64_t)v13, (uint64_t)v13, v8, (uint64_t)v16);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  char v10 = sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "  </p>\n");
  sub_1CB8E509C(v10, "</div><br/>\n");
  ++*(_DWORD *)(a1 + 36);
  sub_1CD7472E8((uint64_t)&v13[24]);
  uint64_t v15 = (void **)v13;
  sub_1CB8338B8(&v15);
}

uint64_t sub_1CD7452E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    int v17 = 0;
    memset(v13, 0, sizeof(v13));
    int v14 = 88;
    uint64_t v15 = 0;
    char v16 = 0;
    v12[0] = v13;
    v12[1] = a4;
    _OWORD v12[2] = &v17;
    sub_1CD7431DC(a1, (uint64_t *)a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1CD749F18, (uint64_t)v12);
    return sub_1CD747370((uint64_t)v13);
  }
  else
  {
    uint64_t v4 = *(uint64_t **)(a1 + 24);
    if (*(_DWORD *)(a1 + 32))
    {
      while (1)
      {
        uint64_t v5 = *v4;
        if (*v4 && v5 != -8) {
          break;
        }
        ++v4;
      }
    }
    else
    {
      uint64_t v5 = *v4;
    }
    uint64_t v7 = *(uint64_t **)(a2 + 24);
    if (*(_DWORD *)(a2 + 32))
    {
      while (1)
      {
        uint64_t v8 = *v7;
        if (*v7 && v8 != -8) {
          break;
        }
        ++v7;
      }
    }
    else
    {
      uint64_t v8 = *v7;
    }
    LOBYTE(v12[0]) = 0;
    *(_DWORD *)std::string::size_type v13 = 0;
    uint64_t v10 = *(void *)(a4 + 24);
    if (v10)
    {
      return (*(uint64_t (**)(uint64_t, void *, unsigned char *, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v12, v13, v5 + 8, v8 + 8);
    }
    else
    {
      sub_1CB920400();
      return llvm::DotCfgChangeReporter::generateIRRepresentation();
    }
  }
}

uint64_t llvm::DotCfgChangeReporter::generateIRRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v7);
  }
  else {
    uint64_t v7 = 0;
  }
  sub_1CCCCF394(&v7, a5);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void llvm::DotCfgChangeReporter::omitAfter(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 36;
  sub_1CCCCF208(&v7, a2, a3);
  sub_1CCCCF4FC((uint64_t)v8, "  <a>{0}. Pass {1} on {2} omitted because no change</a><br/>\n", v6, (__n128 *)&v7, a4);
  uint64_t v21 = (char *)v23;
  long long v22 = xmmword_1CFB28E20;
  int v13 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  size_t v20 = (void **)&v21;
  int v19 = 0;
  uint64_t v12 = &unk_1F2646FA8;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_1CD862C68((uint64_t)v8, (llvm::raw_ostream *)&v12);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
  uint64_t v9 = &unk_1F2619700;
  if (v11 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v21, v22);
  ++*(_DWORD *)(a1 + 36);
  if (v21 != (char *)v23) {
    free(v21);
  }
}

llvm::raw_ostream *llvm::DotCfgChangeReporter::handleAfter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v16[0] = a2;
  v16[1] = a3;
  if (*(void *)a7) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a7 + 16))(&v15);
  }
  else {
    uint64_t v15 = 0;
  }
  char v11 = sub_1CCCC8588(&v15) != 0;
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_1F263C2A0;
  v12[1] = a1;
  _OWORD v12[2] = a4;
  void v12[3] = v16;
  uint64_t v18 = v12;
  sub_1CD7452E8(a5, a6, v11, (uint64_t)v17);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 40), "    </p></div>\n");
  ++*(_DWORD *)(a1 + 36);
  return result;
}

void llvm::DotCfgChangeReporter::handleInvalidated(uint64_t a1, char *a2, size_t a3)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 36;
  sub_1CCCCF208(&v5, a2, a3);
  sub_1CCCCF5EC((uint64_t)v6, v4, (__n128 *)&v5);
  uint64_t v19 = (char *)v21;
  long long v20 = xmmword_1CFB28E20;
  int v11 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v18 = (void **)&v19;
  int v17 = 0;
  uint64_t v10 = &unk_1F2646FA8;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_1CD862C68((uint64_t)v6, (llvm::raw_ostream *)&v10);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v10);
  std::string v7 = &unk_1F2619700;
  if (v9 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v19, v20);
  ++*(_DWORD *)(a1 + 36);
  if (v19 != (char *)v21) {
    free(v19);
  }
}

void llvm::DotCfgChangeReporter::handleFiltered(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 36;
  sub_1CCCCF208(&v7, a2, a3);
  sub_1CCCCF4FC((uint64_t)v8, "  <a>{0}. Pass {1} on {2} filtered out</a><br/>\n", v6, (__n128 *)&v7, a4);
  uint64_t v21 = (char *)v23;
  long long v22 = xmmword_1CFB28E20;
  int v13 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  long long v20 = (void **)&v21;
  int v19 = 0;
  uint64_t v12 = &unk_1F2646FA8;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_1CD862C68((uint64_t)v8, (llvm::raw_ostream *)&v12);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
  char v9 = &unk_1F2619700;
  if (v11 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v21, v22);
  ++*(_DWORD *)(a1 + 36);
  if (v21 != (char *)v23) {
    free(v21);
  }
}

void llvm::DotCfgChangeReporter::handleIgnored(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 36;
  sub_1CCCCF208(&v7, a2, a3);
  sub_1CCCCF4FC((uint64_t)v8, "  <a>{0}. {1} on {2} ignored</a><br/>\n", v6, (__n128 *)&v7, a4);
  uint64_t v21 = (char *)v23;
  long long v22 = xmmword_1CFB28E20;
  int v13 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  long long v20 = (void **)&v21;
  int v19 = 0;
  uint64_t v12 = &unk_1F2646FA8;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_1CD862C68((uint64_t)v8, (llvm::raw_ostream *)&v12);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
  char v9 = &unk_1F2619700;
  if (v11 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v21, v22);
  ++*(_DWORD *)(a1 + 36);
  if (v21 != (char *)v23) {
    free(v21);
  }
}

void llvm::DotCfgChangeReporter::initializeHTML(llvm::DotCfgChangeReporter *this)
{
  int v2 = 0;
  std::system_category();
  sub_1CBAD7600("/passes.html", (const void **)&qword_1EBCF0070, &__p);
  operator new();
}

void llvm::DotCfgChangeReporter::~DotCfgChangeReporter(llvm::DotCfgChangeReporter *this)
{
  *(void *)this = &unk_1F263BE30;
  int v2 = (llvm::raw_ostream *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = sub_1CB8E509C(v2, "<script>var coll = document.getElementsByClassName(\"collapsible\");");
    uint64_t v4 = sub_1CB8E509C(v3, "var i;");
    std::string v5 = sub_1CB8E509C(v4, "for (i = 0; i < coll.length; i++) {");
    uint64_t v6 = sub_1CB8E509C(v5, "coll[i].addEventListener(\"click\", function() {");
    std::string v7 = sub_1CB8E509C(v6, " this.classList.toggle(\"active\");");
    uint64_t v8 = sub_1CB8E509C(v7, " var content = this.nextElementSibling;");
    char v9 = sub_1CB8E509C(v8, " if (content.style.display === \"block\"){");
    uint64_t v10 = sub_1CB8E509C(v9, " content.style.display = \"none\";");
    char v11 = sub_1CB8E509C(v10, " }");
    uint64_t v12 = sub_1CB8E509C(v11, " else {");
    int v13 = sub_1CB8E509C(v12, " content.style.display= \"block\";");
    uint64_t v14 = sub_1CB8E509C(v13, " }");
    uint64_t v15 = sub_1CB8E509C(v14, " });");
    uint64_t v16 = sub_1CB8E509C(v15, " }");
    char v17 = sub_1CB8E509C(v16, "</script>");
    uint64_t v18 = sub_1CB8E509C(v17, "</body>");
    sub_1CB8E509C(v18, "</html>\n");
    int v19 = (llvm::raw_ostream *)*((void *)this + 5);
    long long v20 = (const char *)*((void *)v19 + 2);
    if (*((const char **)v19 + 4) != v20)
    {
      *((void *)v19 + 4) = v20;
      llvm::raw_ostream::flush_tied_then_write(v19, v20);
      int v19 = (llvm::raw_ostream *)*((void *)this + 5);
    }
    llvm::raw_fd_ostream::close(v19);
    uint64_t v21 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  *(void *)this = &unk_1F263C1D0;
  long long v22 = (void **)((char *)this + 8);
  sub_1CCCD3394(&v22);
}

{
  uint64_t vars8;

  llvm::DotCfgChangeReporter::~DotCfgChangeReporter(this);

  JUMPOUT(0x1D25D9CE0);
}

llvm::DotCfgChangeReporter *llvm::DotCfgChangeReporter::registerCallbacks(llvm::DotCfgChangeReporter *result)
{
  v6[16] = *MEMORY[0x1E4F143B8];
  if ((dword_1EBD0A718 - 7) <= 1)
  {
    uint64_t v1 = result;
    uint64_t v4 = v6;
    long long v5 = xmmword_1CFAC3020;
    __int16 v3 = 260;
    v2[0] = (const char *)&qword_1EBCF0070;
    llvm::sys::fs::expand_tilde((uint64_t)v2, (uint64_t)&v4);
    llvm::sys::fs::make_absolute((uint64_t)&v4);
    if ((unint64_t)(v5 + 1) <= *((void *)&v5 + 1))
    {
      *((unsigned char *)v4 + v5) = 0;
      v2[0] = (const char *)v4;
      sub_1CD7460FC(v2);
      llvm::DotCfgChangeReporter::initializeHTML(v1);
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  return result;
}

void sub_1CD7460FC(const char **a1)
{
  MEMORY[0x1D25D9630](&qword_1EBCF0070, *a1);
  int v2 = *a1;
  std::string::size_type v3 = strlen(v2);
  std::string::__init(&v4, v2, v3);
  if (qword_1EBCF00D0)
  {
    (*(void (**)(uint64_t, std::string *))(*(void *)qword_1EBCF00D0 + 48))(qword_1EBCF00D0, &v4);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_1CB920400();
    sub_1CD746198();
  }
}

uint64_t sub_1CD746198(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 296);
  if (v2 >= *(_DWORD *)(a2 + 300)) {
    sub_1CD749FA8();
  }
  std::string::size_type v3 = (void *)(*(void *)(a2 + 288) + 32 * v2);
  *std::string::size_type v3 = result;
  v3[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 296) = v2 + 1;
  uint64_t v4 = *(unsigned int *)(a2 + 440);
  if (v4 >= *(_DWORD *)(a2 + 444)) {
    sub_1CD74A454();
  }
  long long v5 = (void *)(*(void *)(a2 + 432) + 32 * v4);
  *long long v5 = result;
  void v5[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 440) = v4 + 1;
  uint64_t v6 = *(unsigned int *)(a2 + 584);
  if (v6 >= *(_DWORD *)(a2 + 588)) {
    sub_1CD74ABF0();
  }
  std::string v7 = (void *)(*(void *)(a2 + 576) + 32 * v6);
  void *v7 = result;
  v7[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 584) = v6 + 1;
  return result;
}

uint64_t llvm::StandardInstrumentations::StandardInstrumentations(uint64_t a1, char a2, char a3, int a4)
{
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x200000000;
  *(unsigned char *)(a1 + 120) = a2;
  *(_WORD *)(a1 + 121) = a4;
  *(unsigned char *)(a1 + 123) = BYTE2(a4);
  *(_DWORD *)(a1 + 124) = 0;
  llvm::TimePassesHandler::TimePassesHandler((llvm::TimePassesHandler *)(a1 + 128));
  *(unsigned char *)(a1 + 352) = a2;
  *(void *)(a1 + 360) = a1 + 376;
  *(void *)(a1 + 368) = 0x800000000;
  BOOL v7 = dword_1EBD0A718 == 1;
  *(_OWORD *)(a1 + 520) = 0u;
  *(unsigned char *)(a1 + 536) = 1;
  *(unsigned char *)(a1 + 537) = v7;
  *(void *)(a1 + 504) = &unk_1F263BD28;
  *(void *)(a1 + 512) = 0;
  char v9 = llvm::dbgs(v8);
  *(void *)(a1 + 544) = v9;
  *(void *)(a1 + 504) = &unk_1F263BE88;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 568) = 0x3000000000;
  BOOL v11 = dword_1EBD0A718 == 3 || dword_1EBD0A718 == 5;
  BOOL v12 = (dword_1EBD0A718 - 5) < 2;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 616) = 1;
  *(unsigned char *)(a1 + 617) = v11;
  *(void *)(a1 + 584) = &unk_1F263BDD8;
  *(void *)(a1 + 624) = llvm::dbgs(v9);
  *(void *)(a1 + 584) = &unk_1F263BEE0;
  *(unsigned char *)(a1 + 632) = v12;
  BOOL v13 = dword_1EBD0A718 == 7;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 672) = 1;
  *(unsigned char *)(a1 + 673) = v13;
  *(void *)(a1 + 640) = &unk_1F263BE30;
  *(_DWORD *)(a1 + 676) = 0;
  *(void *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 688) = a2;
  *(unsigned char *)(a1 + 689) = a3;
  return a1;
}

{
  return llvm::StandardInstrumentations::StandardInstrumentations(a1, a2, a3, a4 & 0xFFFFFF);
}

llvm::DotCfgChangeReporter *llvm::StandardInstrumentations::registerCallbacks(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  llvm::PrintIRInstrumentation::registerCallbacks((llvm *)a1, a2);
  llvm::PrintPassInstrumentation::registerCallbacks((unsigned char *)(a1 + 120), a2);
  llvm::TimePassesHandler::registerCallbacks(a1 + 128, a2);
  uint64_t v6 = llvm::OptNoneInstrumentation::registerCallbacks(a1 + 352, a2);
  llvm::OptBisectInstrumentation::registerCallbacks(v6, a2);
  if (a3) {
    llvm::PreservedCFGCheckerInstrumentation::registerCallbacks((void *)(a1 + 360), a2, a3);
  }
  if ((dword_1EBD0A718 - 1) <= 1) {
    llvm::ChangeReporter<std::string>::registerRequiredCallbacks();
  }
  llvm::PseudoProbeVerifier::registerCallbacks(a1 + 552, a2);
  if (*(unsigned char *)(a1 + 689)) {
    llvm::VerifyInstrumentation::registerCallbacks(a1 + 688, a2);
  }
  if ((dword_1EBD0A718 - 3) <= 3) {
    llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks();
  }

  return llvm::DotCfgChangeReporter::registerCallbacks((llvm::DotCfgChangeReporter *)(a1 + 640));
}

void *sub_1CD746578(void *a1)
{
  *a1 = &unk_1F263BF38;
  uint64_t v2 = a1 + 71;
  std::string::size_type v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F263BFA0;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD746660(void *a1)
{
  *a1 = &unk_1F263BFA0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD7466B4(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD746748(v11);
}

uint64_t sub_1CD746748(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD746760(void *a1)
{
  sub_1CD746578(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD746798(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD7467A4(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD7467B4(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    uint64_t v4 = &unk_1F263BFF0;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD746838(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD74684C(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD746854(void *a1)
{
  *a1 = &unk_1F263BFA0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD7468C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD7468D0(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD7468E4(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD7468F8(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD74690C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1CD746938(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1CD7469C0(v5 + 8);
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1CD7469C0(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  sub_1CD746A10(a1 + 24);
  uint64_t v3 = (void **)a1;
  sub_1CB8338B8(&v3);
  return a1;
}

uint64_t sub_1CD746A10(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1CD3C4FA4(v5 + 8);
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void *sub_1CD746A98(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CB906CCC(a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_1CD746B20((llvm::StringMapImpl *)(a1 + 3), (uint64_t *)(a2 + 24));
  uint64_t v4 = a1 + 7;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v4, *(const void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *uint64_t v4 = v5;
  }
  return a1;
}

llvm::StringMapImpl *sub_1CD746B20(llvm::StringMapImpl *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x4000000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((unsigned int *)this + 2);
    uint64_t v6 = *a2;
    *(void *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v4 + 8 * v5 + 8;
      uint64_t v9 = v6 + 8 * v5 + 8;
      do
      {
        uint64_t v10 = *(void *)(*a2 + 8 * v7);
        if (v10) {
          BOOL v11 = v10 == -8;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          *(void *)(*(void *)this + 8 * v7) = v10;
        }
        else
        {
          uint64_t v17 = v9;
          size_t v12 = *(void *)v10;
          BOOL v13 = operator new(*(void *)v10 + 65, (std::align_val_t)8uLL);
          uint64_t v14 = v13;
          uint64_t v15 = (char *)(v13 + 8);
          if (v12) {
            memcpy(v13 + 8, (const void *)(v10 + 64), v12);
          }
          v15[v12] = 0;
          size_t *v14 = v12;
          sub_1CD746C48((uint64_t)(v14 + 1), (long long *)(v10 + 8));
          *(void *)(*(void *)this + 8 * v7) = v14;
          uint64_t v9 = v17;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v17 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

uint64_t sub_1CD746C48(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
  }
  uint64_t v5 = (_OWORD *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v5, *((const void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *uint64_t v5 = v6;
  }
  return a1;
}

uint64_t sub_1CD746CCC(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1) {
    uint64_t v5 = *(unsigned int *)(a1 + 8);
  }
  else {
    uint64_t v5 = Key;
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 8 * v5);
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = v9;
  if (*(char *)(v7 + 23) >= 0) {
    return v7;
  }
  else {
    return v8;
  }
}

uint64_t *sub_1CD746D2C(void **a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = sub_1CD746DCC(a1, a2, &v13, &v12, a3);
  if (!*result)
  {
    uint64_t v7 = (uint64_t **)result;
    sub_1CD746F50((uint64_t)&v11, (uint64_t)a1, a4);
    uint64_t v8 = v13;
    uint64_t v9 = v11;
    *BOOL v11 = 0;
    v9[1] = 0;
    _OWORD v9[2] = (uint64_t)v8;
    void *v7 = v9;
    uint64_t v10 = (void *)**a1;
    if (v10)
    {
      *a1 = v10;
      uint64_t v9 = *v7;
    }
    uint64_t result = sub_1CB8358B8(a1[1], v9);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t *sub_1CD746DCC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a5))
  {
    uint64_t v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v9 = a2;
    }
    else
    {
      if (v7)
      {
        uint64_t v8 = (uint64_t *)*a2;
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        BOOL v13 = a2;
        do
        {
          uint64_t v9 = (uint64_t *)v13[2];
          BOOL v14 = *v9 == (void)v13;
          BOOL v13 = v9;
        }
        while (v14);
      }
      if (*((_DWORD *)v9 + 8) >= a5)
      {
        uint64_t v15 = *v5;
        if (*v5)
        {
          do
          {
            while (1)
            {
              a4 = (uint64_t *)v15;
              unsigned int v16 = *(_DWORD *)(v15 + 32);
              if (v16 <= a5) {
                break;
              }
              uint64_t v15 = *a4;
              uint64_t v5 = a4;
              if (!*a4) {
                goto LABEL_36;
              }
            }
            if (v16 >= a5) {
              break;
            }
            uint64_t v5 = a4 + 1;
            uint64_t v15 = a4[1];
          }
          while (v15);
LABEL_27:
          *a3 = a4;
          return v5;
        }
        goto LABEL_44;
      }
    }
    if (v7)
    {
      *a3 = v9;
      return v9 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  else
  {
    if (v6 >= a5)
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    uint64_t v10 = a2[1];
    if (v10)
    {
      BOOL v11 = (uint64_t *)a2[1];
      do
      {
        a4 = v11;
        BOOL v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      uint64_t v17 = a2;
      do
      {
        a4 = (uint64_t *)v17[2];
        BOOL v14 = *a4 == (void)v17;
        uint64_t v17 = a4;
      }
      while (!v14);
    }
    if (a4 != v5 && *((_DWORD *)a4 + 8) <= a5)
    {
      uint64_t v18 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            a4 = (uint64_t *)v18;
            unsigned int v19 = *(_DWORD *)(v18 + 32);
            if (v19 <= a5) {
              break;
            }
            uint64_t v18 = *a4;
            uint64_t v5 = a4;
            if (!*a4) {
              goto LABEL_36;
            }
          }
          if (v19 >= a5) {
            break;
          }
          uint64_t v5 = a4 + 1;
          uint64_t v18 = a4[1];
        }
        while (v18);
        goto LABEL_27;
      }
LABEL_44:
      *a3 = v5;
      return v5;
    }
    if (v10)
    {
LABEL_36:
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
  return a4;
}

__n128 sub_1CD746F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  unsigned int v6 = (__n128 *)operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  v6[2].n128_u32[0] = *(_DWORD *)a3;
  uint64_t v7 = &v6[2].n128_i8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v7, *(const void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a3 + 8);
    v6[3].n128_u64[1] = *(void *)(a3 + 24);
  }
  __n128 result = *(__n128 *)(a3 + 32);
  v6[4] = result;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1CD746FD4(char *a1)
{
  if (a1)
  {
    sub_1CD746FD4(*(void *)a1);
    sub_1CD746FD4(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

char *sub_1CD747030(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(char **)v7;
        unsigned int v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        unsigned int v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    uint64_t v7 = (char *)operator new(0x50uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 2) = v9;
    *unsigned int v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    BOOL v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      BOOL v11 = *v6;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1CD747110()
{
}

llvm::raw_ostream *sub_1CD747124(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD74712C(*(void *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD74712C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v18 = 0;
    int AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v18);
    unint64_t v7 = v18;
    if (AsUnsignedInteger) {
      unint64_t v7 = -1;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  uint64_t v10 = *(const char **)(a1 + 128);
  uint64_t v9 = a1 + 128;
  unsigned int v8 = v10;
  char v11 = *(unsigned char *)(v9 + 23);
  int v12 = v11;
  if (v11 >= 0) {
    BOOL v13 = (const char *)v9;
  }
  else {
    BOOL v13 = v8;
  }
  size_t v14 = *(void *)(v9 + 8);
  size_t v15 = v11 & 0x7F;
  if (v12 >= 0) {
    size_t v14 = v15;
  }
  if (v14 >= v7) {
    size_t v16 = v7;
  }
  else {
    size_t v16 = v14;
  }
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v16 > *((void *)a2 + 3) - (void)result) {
    return llvm::raw_ostream::write(a2, v13, v16);
  }
  if (v16)
  {
    __n128 result = (llvm::raw_ostream *)memcpy(result, v13, v16);
    *((void *)a2 + 4) += v16;
  }
  return result;
}

uint64_t *sub_1CD7471EC(uint64_t *result, unsigned int a2, uint64_t a3)
{
  long long v4 = result;
  unsigned int v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (void *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = result + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = a3;
    uint64_t *v9 = 0;
    v9[1] = 0;
    _OWORD v9[2] = (uint64_t)v7;
    *unsigned int v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *long long v4 = v10;
      char v11 = *v6;
    }
    else
    {
      char v11 = v9;
    }
    __n128 result = sub_1CB8358B8((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t *sub_1CD7472A4(uint64_t *a1, unsigned int a2)
{
  if (!a1) {
LABEL_7:
  }
    abort();
  while (1)
  {
    while (1)
    {
      unsigned int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_1CD7472E8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1CD747370(v5 + 8);
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1CD747370(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  sub_1CD7473C0(a1 + 24);
  uint64_t v3 = (void **)a1;
  sub_1CB8338B8(&v3);
  return a1;
}

uint64_t sub_1CD7473C0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1CD747448(v5 + 8);
          MEMORY[0x1D25D9CD0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1CD747448(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD747494(_WORD *a1, char **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&llvm::PreservedCFGCheckerInstrumentation::VerifyPreservedCFG, 0, 0);
  byte_1EBD0A658 = 0;
  qword_1EBD0A660 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD0A668 = 0;
  llvm::PreservedCFGCheckerInstrumentation::VerifyPreservedCFG = (uint64_t)&unk_1F26440A0;
  qword_1EBD0A670 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD0A678 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD0A690 = (uint64_t)&qword_1EBD0A678;
  llvm::cl::Option::setArgStr(v4, "verify-cfg-preserved", 0x14uLL);
  word_1EBD0A5E2 = (32 * (*a1 & 3)) | word_1EBD0A5E2 & 0xFF9F;
  uint64_t v5 = *a2;
  byte_1EBD0A658 = **a2;
  byte_1EBD0A669 = 1;
  byte_1EBD0A668 = *v5;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::PreservedCFGCheckerInstrumentation::VerifyPreservedCFG);
}

void sub_1CD7475B4(long long *a1, _WORD *a2, _WORD *a3, int **a4, uint64_t a5)
{
  sub_1CB883A14((uint64_t)&qword_1EBD0A698, 0, 0);
  dword_1EBD0A718 = 0;
  qword_1EBD0A720 = (uint64_t)&unk_1F263BFF0;
  *(void *)&dword_1EBD0A728 = 0;
  qword_1EBD0A698 = (uint64_t)&unk_1F263BF38;
  qword_1EBD0A730 = (uint64_t)&unk_1F263BFA0;
  qword_1EBD0A738 = (uint64_t)&qword_1EBD0A698;
  qword_1EBD0A740 = (uint64_t)&unk_1EBD0A750;
  qword_1EBD0A748 = 0x800000000;
  qword_1EBD0A8D0 = (uint64_t)&unk_1F263C060;
  qword_1EBD0A8E8 = (uint64_t)&qword_1EBD0A8D0;
  sub_1CD7476D0(a1, a2, a3, a4, a5);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBD0A698);
}

void sub_1CD7476D0(long long *a1, _WORD *a2, _WORD *a3, int **a4, uint64_t a5)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBD0A698, "print-changed", 0xDuLL);
  xmmword_1EBD0A6B8 = *a1;
  word_1EBD0A6A2 = word_1EBD0A6A2 & 0xFF9F | (32 * (*a2 & 3));
  word_1EBD0A6A2 = (8 * (*a3 & 3)) | word_1EBD0A6A2 & 0xFFE7;
  uint64_t v10 = *a4;
  dword_1EBD0A718 = **a4;
  byte_1EBD0A72C = 1;
  dword_1EBD0A728 = *v10;
  uint64_t v11 = *(void *)a5;
  unsigned int v12 = *(_DWORD *)(a5 + 8);

  sub_1CCCD127C(v11, v12);
}

void sub_1CD747790()
{
}

void *sub_1CD7477A4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F263C060;
  return result;
}

void sub_1CD7477DC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F263C060;
}

void sub_1CD747808()
{
}

void sub_1CD747900(long long *a1, __n128 *a2, _WORD *a3, _WORD *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEFD48, 1, 0);
  qword_1EBCEFDC8 = 0;
  unk_1EBCEFDD0 = 0;
  qword_1EBCEFDD8 = 0;
  unk_1EBCEFDE0 = 0;
  qword_1EBCEFD48 = (uint64_t)&unk_1F260A070;
  qword_1EBCEFDE8 = 0;
  unk_1EBCEFDF0 = 0;
  qword_1EBCEFDF8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCEFE00 = (uint64_t)&unk_1F260AC78;
  qword_1EBCEFE18 = (uint64_t)&qword_1EBCEFE00;
  sub_1CD7479E8(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEFD48);
}

__n128 sub_1CD7479E8(long long *a1, __n128 *a2, _WORD *a3, _WORD *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEFD48, "filter-passes", 0xDuLL);
  xmmword_1EBCEFD78 = *a1;
  __n128 result = *a2;
  xmmword_1EBCEFD68 = (__int128)*a2;
  word_1EBCEFD52 |= (*a3 & 0x1F) << 9;
  word_1EBCEFD52 = (32 * (*a4 & 3)) | word_1EBCEFD52 & 0xFF9F;
  return result;
}

void sub_1CD747A78(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEFC88, 0, 0);
  byte_1EBCEFD08 = 0;
  qword_1EBCEFD10 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCEFD18 = 0;
  qword_1EBCEFC88 = (uint64_t)&unk_1F26440A0;
  qword_1EBCEFD20 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCEFD28 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCEFD40 = (uint64_t)&qword_1EBCEFD28;
  sub_1CD747B68(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEFC88);
}

__n128 sub_1CD747B68(__n128 *a1, char **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEFC88, "print-before-changed", 0x14uLL);
  __n128 result = *a1;
  xmmword_1EBCEFCA8 = (__int128)*a1;
  unint64_t v7 = *a2;
  byte_1EBCEFD08 = **a2;
  byte_1EBCEFD19 = 1;
  byte_1EBCEFD18 = *v7;
  word_1EBCEFC92 = (32 * (*a3 & 3)) | word_1EBCEFC92 & 0xFF9F;
  return result;
}

void sub_1CD747BF0(_WORD *a1, const char **a2, __n128 *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEFE20, 0, 0);
  qword_1EBCEFEA0 = 0;
  qword_1EBCEFEA8 = 0;
  qword_1EBCEFEC8 = 0;
  unk_1EBCEFED0 = 0;
  byte_1EBCEFED8 = 0;
  qword_1EBCEFEC0 = 0;
  unk_1EBCEFEB0 = 0;
  unk_1EBCEFEB8 = &unk_1F2643C20;
  qword_1EBCEFE20 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCEFEE0 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCEFEE8 = (uint64_t)&unk_1F25F6428;
  qword_1EBCEFF00 = (uint64_t)&qword_1EBCEFEE8;
  sub_1CD747CEC(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEFE20);
}

__n128 sub_1CD747CEC(_WORD *a1, const char **a2, __n128 *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEFE20, "print-changed-diff-path", 0x17uLL);
  word_1EBCEFE2A = (32 * (*a1 & 3)) | word_1EBCEFE2A & 0xFF9F;
  sub_1CD476D48(a2, (uint64_t)&qword_1EBCEFE20);
  __n128 result = *a3;
  xmmword_1EBCEFE40 = (__int128)*a3;
  return result;
}

void sub_1CD747D64(_WORD *a1, const char **a2, __n128 *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEFF08, 0, 0);
  qword_1EBCEFF88 = 0;
  qword_1EBCEFF90 = 0;
  qword_1EBCEFFB0 = 0;
  unk_1EBCEFFB8 = 0;
  byte_1EBCEFFC0 = 0;
  qword_1EBCEFFA8 = 0;
  unk_1EBCEFF98 = 0;
  unk_1EBCEFFA0 = &unk_1F2643C20;
  qword_1EBCEFF08 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCEFFC8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCEFFD0 = (uint64_t)&unk_1F25F6428;
  qword_1EBCEFFE8 = (uint64_t)&qword_1EBCEFFD0;
  sub_1CD747E60(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEFF08);
}

__n128 sub_1CD747E60(_WORD *a1, const char **a2, __n128 *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEFF08, "print-changed-dot-path", 0x16uLL);
  word_1EBCEFF12 = (32 * (*a1 & 3)) | word_1EBCEFF12 & 0xFF9F;
  sub_1CD476D48(a2, (uint64_t)&qword_1EBCEFF08);
  __n128 result = *a3;
  xmmword_1EBCEFF28 = (__int128)*a3;
  return result;
}

void sub_1CD747ED8(long long *a1, _WORD *a2, const char **a3)
{
  sub_1CB883A14((uint64_t)&BeforeColour, 0, 0);
  qword_1EBD0A970 = 0;
  unk_1EBD0A978 = 0;
  qword_1EBD0A998 = 0;
  unk_1EBD0A9A0 = 0;
  byte_1EBD0A9A8 = 0;
  qword_1EBD0A990 = 0;
  unk_1EBD0A980 = 0;
  unk_1EBD0A988 = &unk_1F2643C20;
  BeforeColour = (uint64_t)&unk_1F2643FD0;
  qword_1EBD0A9B0 = (uint64_t)&unk_1F2643EA0;
  qword_1EBD0A9B8 = (uint64_t)&unk_1F25F6428;
  qword_1EBD0A9D0 = (uint64_t)&qword_1EBD0A9B8;
  sub_1CD747FD4(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&BeforeColour);
}

void sub_1CD747FD4(long long *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&BeforeColour, "dot-cfg-before-color", 0x14uLL);
  xmmword_1EBD0A910 = *a1;
  word_1EBD0A8FA = (32 * (*a2 & 3)) | word_1EBD0A8FA & 0xFF9F;

  sub_1CD476D48(a3, (uint64_t)&BeforeColour);
}

void sub_1CD748058(long long *a1, _WORD *a2, const char **a3)
{
  sub_1CB883A14((uint64_t)&AfterColour, 0, 0);
  qword_1EBD0AA58 = 0;
  unk_1EBD0AA60 = 0;
  qword_1EBD0AA80 = 0;
  unk_1EBD0AA88 = 0;
  byte_1EBD0AA90 = 0;
  qword_1EBD0AA78 = 0;
  unk_1EBD0AA68 = 0;
  unk_1EBD0AA70 = &unk_1F2643C20;
  AfterColour = (uint64_t)&unk_1F2643FD0;
  qword_1EBD0AA98 = (uint64_t)&unk_1F2643EA0;
  qword_1EBD0AAA0 = (uint64_t)&unk_1F25F6428;
  qword_1EBD0AAB8 = (uint64_t)&qword_1EBD0AAA0;
  sub_1CD748154(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&AfterColour);
}

void sub_1CD748154(long long *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&AfterColour, "dot-cfg-after-color", 0x13uLL);
  xmmword_1EBD0A9F8 = *a1;
  word_1EBD0A9E2 = (32 * (*a2 & 3)) | word_1EBD0A9E2 & 0xFF9F;

  sub_1CD476D48(a3, (uint64_t)&AfterColour);
}

void sub_1CD7481D8(long long *a1, _WORD *a2, const char **a3)
{
  sub_1CB883A14((uint64_t)&CommonColour, 0, 0);
  qword_1EBD0AB40 = 0;
  unk_1EBD0AB48 = 0;
  qword_1EBD0AB68 = 0;
  unk_1EBD0AB70 = 0;
  byte_1EBD0AB78 = 0;
  qword_1EBD0AB60 = 0;
  unk_1EBD0AB50 = 0;
  unk_1EBD0AB58 = &unk_1F2643C20;
  CommonColour = (uint64_t)&unk_1F2643FD0;
  qword_1EBD0AB80 = (uint64_t)&unk_1F2643EA0;
  qword_1EBD0AB88 = (uint64_t)&unk_1F25F6428;
  qword_1EBD0ABA0 = (uint64_t)&qword_1EBD0AB88;
  sub_1CD7482D4(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&CommonColour);
}

void sub_1CD7482D4(long long *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&CommonColour, "dot-cfg-common-color", 0x14uLL);
  xmmword_1EBD0AAE0 = *a1;
  word_1EBD0AACA = (32 * (*a2 & 3)) | word_1EBD0AACA & 0xFF9F;
  unsigned int v6 = *a3;

  sub_1CD748354(v6);
}

void sub_1CD748354(const char *a1)
{
  std::string::size_type v2 = strlen(a1);
  std::string::__init(&__str, a1, v2);
  std::string::operator=((std::string *)&qword_1EBD0AB40, &__str);
  byte_1EBD0AB78 = 1;
  std::string::operator=((std::string *)&qword_1EBD0AB60, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1CD7483CC(long long *a1, _WORD *a2, const char **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCEFFF0, 0, 0);
  qword_1EBCF0070 = 0;
  unk_1EBCF0078 = 0;
  qword_1EBCF0098 = 0;
  unk_1EBCF00A0 = 0;
  byte_1EBCF00A8 = 0;
  qword_1EBCF0090 = 0;
  qword_1EBCF0080 = 0;
  unk_1EBCF0088 = &unk_1F2643C20;
  qword_1EBCEFFF0 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCF00B0 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCF00B8 = (uint64_t)&unk_1F25F6428;
  qword_1EBCF00D0 = (uint64_t)&qword_1EBCF00B8;
  sub_1CD7484C8(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEFFF0);
}

void sub_1CD7484C8(long long *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCEFFF0, "dot-cfg-dir", 0xBuLL);
  xmmword_1EBCF0010 = *a1;
  word_1EBCEFFFA = (32 * (*a2 & 3)) | word_1EBCEFFFA & 0xFF9F;
  unsigned int v6 = *a3;

  sub_1CD748548(v6);
}

void sub_1CD748548(const char *a1)
{
  std::string::size_type v2 = strlen(a1);
  std::string::__init(&__str, a1, v2);
  std::string::operator=((std::string *)&qword_1EBCF0070, &__str);
  byte_1EBCF00A8 = 1;
  std::string::operator=((std::string *)&qword_1EBCF0090, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void **sub_1CD7485C0(void **result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v5 = (char *)*result;
    unsigned int v6 = result;
    uint64_t v3 = 48 * v2;
    do
    {
      if (v5[v3 - 17] < 0) {
        operator delete(*(void **)&v5[v3 - 40]);
      }
      v3 -= 48;
    }
    while (v3);
    __n128 result = v6;
    uint64_t v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    uint64_t v4 = result;
    free(v1);
    return v4;
  }
  return result;
}

void sub_1CD748648()
{
}

void sub_1CD748714(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 48 * v2;
    do
    {
      *(void *)a2 = *(void *)v3;
      long long v5 = *(_OWORD *)(v3 + 8);
      *(void *)(a2 + 24) = *(void *)(v3 + 24);
      *(_OWORD *)(a2 + 8) = v5;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 8) = 0;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
      v3 += 48;
      a2 += 48;
    }
    while (v3 != v4);
    uint64_t v6 = *((unsigned int *)a1 + 2);
    if (v6)
    {
      uint64_t v7 = *a1;
      uint64_t v8 = 48 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 17) < 0) {
          operator delete(*(void **)(v7 + v8 - 40));
        }
        v8 -= 48;
      }
      while (v8);
    }
  }
}

void sub_1CD7487AC(void *a1)
{
  *a1 = 0;
  operator new();
}

uint64_t sub_1CD748864(uint64_t a1)
{
  *(void *)a1 = &unk_1F263C0A8;
  sub_1CD7489A0((void **)(a1 + 8));
  return a1;
}

void sub_1CD7488A8(uint64_t a1)
{
  *(void *)a1 = &unk_1F263C0A8;
  sub_1CD7489A0((void **)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD74890C()
{
}

void *sub_1CD748994()
{
  return &llvm::Any::TypeId<llvm::PreservedAnalyses>::Id;
}

void **sub_1CD7489A0(void **a1)
{
  unsigned int v2 = a1[7];
  if (v2 != a1[6]) {
    free(v2);
  }
  uint64_t v3 = a1[1];
  if (v3 != *a1) {
    free(v3);
  }
  return a1;
}

void *sub_1CD7489E8(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    uint64_t v3 = (void *)(*result + 16);
    do
    {
      if ((uint64_t)*(v3 - 2) <= 0x7FFFFFFFFFFFFFFDLL)
      {
        uint64_t v4 = v3[2];
        if (v4 != -8192 && v4 != -4096 && v4 != 0) {
          __n128 result = llvm::ValueHandleBase::RemoveFromUseList(v3);
        }
      }
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

void *sub_1CD748A64(void *result, uint64_t a2)
{
  if (*((unsigned char *)result + 24)) {
    return sub_1CD748AD0(result, a2);
  }
  *__n128 result = 0;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *__n128 result = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *((_DWORD *)result + 3);
  *((_DWORD *)result + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *((_DWORD *)result + 4);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *((unsigned char *)result + 24) = 1;
  return result;
}

void *sub_1CD748AD0(void *a1, uint64_t a2)
{
  sub_1CD7489E8(a1);
  MEMORY[0x1D25D9CD0](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  int v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void *sub_1CD748B48(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = sub_1CD748C78(a1, a3, a2);
  *uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  void v6[2] = 2;
  v6[3] = 0;
  v6[4] = v7;
  if (v7 != -8192 && v7 != -4096 && v7 != 0) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v6 + 2));
  }
  v6[1] = &unk_1F263C0D8;
  return v6;
}

uint64_t sub_1CD748BD8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == 0x7FFFFFFFFFFFFFFELL;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD748C78(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD748D30(a1, v6);
  uint64_t v8 = 0;
  sub_1CD748BD8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 0x7FFFFFFFFFFFFFFFLL) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD748D30(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD748E08((void *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *__n128 result = 0x7FFFFFFFFFFFFFFFLL;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void *sub_1CD748E08(void *result, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  unint64_t v5 = result;
  result[1] = 0;
  uint64_t v6 = *((unsigned int *)result + 4);
  if (v6)
  {
    int v7 = (void *)*result;
    uint64_t v8 = 40 * v6;
    do
    {
      void *v7 = 0x7FFFFFFFFFFFFFFFLL;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if (*v4 <= 0x7FFFFFFFFFFFFFFDLL)
      {
        BOOL v12 = 0;
        sub_1CD748BD8(*v5, *((_DWORD *)v5 + 4), v9, &v12);
        uint64_t v10 = v12;
        *BOOL v12 = *v4;
        __n128 result = sub_1CC008720(v10 + 2, v4 + 2);
        v10[1] = (uint64_t)&unk_1F263C0D8;
        ++*((_DWORD *)v5 + 2);
        uint64_t v11 = v4[4];
        if (v11 != -8192 && v11 != -4096)
        {
          if (v11) {
            __n128 result = llvm::ValueHandleBase::RemoveFromUseList(v4 + 2);
          }
        }
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

void *sub_1CD748F24(void *result)
{
  uint64_t v1 = result[3];
  if (v1)
  {
    int v2 = result;
    if ((v1 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      __n128 result = llvm::ValueHandleBase::RemoveFromUseList(result + 1);
    }
    void v2[3] = 0;
  }
  return result;
}

void *sub_1CD748F64(void *result)
{
  uint64_t v1 = result[3];
  if (v1)
  {
    int v2 = result;
    if ((v1 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      __n128 result = llvm::ValueHandleBase::RemoveFromUseList(result + 1);
    }
    void v2[3] = 0;
  }
  return result;
}

void *sub_1CD748FA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CD41F538(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  unint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD69168C(a1, a2, v8);
    uint64_t v7 = *a2;
    *((_DWORD *)v5 + 6) = 0;
    *unint64_t v5 = v7;
    v5[1] = 0;
    void v5[2] = 0;
  }
  return v5;
}

void sub_1CD74901C()
{
}

void sub_1CD749030(uint64_t a1, const llvm::Function *a2)
{
  llvm::PreservedCFGCheckerInstrumentation::CFG::CFG((llvm::PreservedCFGCheckerInstrumentation::CFG *)&v2, a2, 1);
  sub_1CCCD2718();
}

uint64_t sub_1CD74909C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    sub_1CD749128(a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v5;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v6;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1CD749128(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    sub_1CD7489E8((void *)result);
    __n128 result = MEMORY[0x1D25D9CD0](*(void *)v1, 8);
    *(unsigned char *)(v1 + 24) = 0;
  }
  return result;
}

void *sub_1CD749168(void *a1)
{
  *a1 = &unk_1F263C130;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1CC6D8C2C((uint64_t)(a1 + 5));
  MEMORY[0x1D25D9CD0](a1[5], 8);
  sub_1CD749128(v2);
  return a1;
}

void sub_1CD7491C8(void *a1)
{
  *a1 = &unk_1F263C130;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1CC6D8C2C((uint64_t)(a1 + 5));
  MEMORY[0x1D25D9CD0](a1[5], 8);
  sub_1CD749128(v2);

  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CD74924C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = PreservedCFGCheckerAnalysis]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_435[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  __n128 result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

uint64_t sub_1CD749308(uint64_t a1, uint64_t a2)
{
  if (sub_1CD742534(a1) || sub_1CD742534(a2)) {
    return 0;
  }

  return sub_1CD749368(a1 + 32, a2 + 32);
}

uint64_t sub_1CD749368(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 16);
    uint64_t v5 = *(void *)a1 + 32 * v4;
    if (v2)
    {
      if (v4)
      {
        uint64_t v6 = 32 * v4;
        unint64_t v7 = *(uint64_t **)a1;
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 4;
          v6 -= 32;
          if (!v6) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        unint64_t v7 = *(uint64_t **)a1;
      }
    }
    else
    {
LABEL_7:
      unint64_t v7 = (uint64_t *)(*(void *)a1 + 32 * v4);
    }
    uint64_t v8 = *(void *)a1 + 32 * v4;
    if (v7 == (uint64_t *)v8) {
      return 1;
    }
    while (1)
    {
      uint64_t v9 = *v7;
      uint64_t v15 = 0;
      if (sub_1CD41F538(*(void *)a2, *(_DWORD *)(a2 + 16), v9, &v15))
      {
        uint64_t v10 = v15;
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = *(unsigned int *)(a2 + 16);
      }
      else
      {
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = *(unsigned int *)(a2 + 16);
        uint64_t v10 = *(void *)a2 + 32 * v12;
      }
      if (v10 == v11 + 32 * v12) {
        break;
      }
      uint64_t result = sub_1CD7425EC(v10 + 8, (uint64_t)(v7 + 1));
      if (result)
      {
        size_t v14 = v7 + 4;
        unint64_t v7 = (uint64_t *)v5;
        if (v14 != (uint64_t *)v5)
        {
          unint64_t v7 = v14;
          while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v7 += 4;
            if (v7 == (uint64_t *)v5)
            {
              unint64_t v7 = (uint64_t *)v5;
              break;
            }
          }
        }
        uint64_t result = 1;
        if (v7 != (uint64_t *)v8) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

uint64_t sub_1CD7494A0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = *(uint64_t **)a1;
  char v4 = *((unsigned char *)a2 + 23);
  BOOL v5 = v4 < 0;
  size_t v6 = a2[1];
  if (v4 < 0) {
    a2 = (uint64_t *)*a2;
  }
  size_t v7 = v4 & 0x7F;
  if (v5) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v7;
  }
  uint64_t result = llvm::StringMapImpl::FindKey(*(uint64_t **)a1, (unsigned __int8 *)a2, v8);
  if (result == -1 || (int)result == (unint64_t)*((unsigned int *)v3 + 2))
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = **(void **)(a1 + 24);
    char v13 = *(unsigned char *)(v12 + 23);
    if (v13 >= 0) {
      size_t v14 = **(unsigned __int8 ***)(a1 + 24);
    }
    else {
      size_t v14 = *(unsigned __int8 **)v12;
    }
    if (v13 >= 0) {
      size_t v15 = v13 & 0x7F;
    }
    else {
      size_t v15 = *(void *)(v12 + 8);
    }
    int Key = llvm::StringMapImpl::FindKey(*(uint64_t **)(a1 + 16), v14, v15);
    if (Key == -1) {
      uint64_t v17 = *(unsigned int *)(v10 + 8);
    }
    else {
      uint64_t v17 = Key;
    }
    uint64_t v18 = *(void *)(*(void *)v10 + 8 * v17) + 8;
    long long v20 = *(uint64_t (**)(uint64_t, uint64_t, void))v11;
    uint64_t v19 = *(void *)(v11 + 8);
    return v20(v19, v18, 0);
  }
  return result;
}

void sub_1CD749580()
{
}

llvm::raw_ostream *sub_1CD749594(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD74959C((unint64_t *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD74959C(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  size_t v15 = a3;
  uint64_t v16 = a4;
  int v14 = 0;
  if (sub_1CD465E40(&v15, &v14))
  {
    int v7 = v14;
    unint64_t v17 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6)) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = v17;
    }
    if (llvm::isPrefixedHexStyle(v7)) {
      unint64_t v9 = v8 + 2;
    }
    else {
      unint64_t v9 = v8;
    }
    return llvm::write_hex(a2, *a1, v14, v9, 1);
  }
  if (v16)
  {
    int v11 = 0;
    unsigned int v12 = *v15;
    if (v12 <= 0x63)
    {
      if (v12 != 68)
      {
        if (v12 != 78) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
LABEL_18:
      int v11 = 0;
      ++v15;
      goto LABEL_19;
    }
    if (v12 == 100) {
      goto LABEL_18;
    }
    if (v12 == 110)
    {
LABEL_17:
      ++v15;
      int v11 = 1;
LABEL_19:
      --v16;
    }
  }
  else
  {
    int v11 = 0;
  }
LABEL_20:
  unint64_t v17 = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6)) {
    size_t v13 = 0;
  }
  else {
    size_t v13 = v17;
  }
  return llvm::write_integer(a2, *a1, v13, v11);
}

void sub_1CD7496DC()
{
}

llvm::raw_ostream *sub_1CD7496F0(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5D7BF0(*(void *)(a1 + 8), a2, a3, a4);
}

int64x2_t *sub_1CD7496F8(int64x2_t *result, llvm::Value *this)
{
  unint64_t v3 = result;
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return result;
    }
  }
  else if (*((llvm::Value **)this + 9) == (llvm::Value *)((char *)this + 72) && (*((unsigned char *)this + 34) & 0x80) == 0)
  {
    return result;
  }
  Name = llvm::Value::getName(this);
  uint64_t result = (int64x2_t *)llvm::isFunctionInPrintList(Name, v5);
  if (!result) {
    return result;
  }
  uint64_t v6 = *((void *)this + 10);
  if (v6) {
    int v7 = (llvm::Value *)(v6 - 24);
  }
  else {
    int v7 = 0;
  }
  unint64_t v8 = llvm::Value::getName(v7);
  if (v8)
  {
    std::string::__init(&v24, v8, v9);
    int64x2_t v25 = 0u;
    memset(v26, 0, sizeof(v26));
    int v27 = 88;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1CB8BDF7C((uint64_t)&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      goto LABEL_16;
    }
  }
  else
  {
    memset(&v24, 0, sizeof(v24));
    int64x2_t v25 = 0u;
    memset(v26, 0, sizeof(v26));
    int v27 = 88;
  }
  std::string v28 = v24;
LABEL_16:
  for (uint64_t i = (void *)*((void *)this + 10); i != (void *)((char *)this + 72); uint64_t i = (void *)i[1])
  {
    if (i) {
      int v11 = (llvm::Value *)(i - 3);
    }
    else {
      int v11 = 0;
    }
    unsigned int v12 = llvm::Value::getName(v11);
    sub_1CCCC8E38(&v25, v12, v13);
    uint64_t v21 = (unsigned __int8 *)llvm::Value::getName(v11);
    size_t v22 = v14;
    sub_1CD749A90(v23, v11);
    sub_1CD74991C((uint64_t)&v26[8], v21, v22, (uint64_t)v23);
    sub_1CD747448((uint64_t)v23);
  }
  size_t v15 = llvm::Value::getName(this);
  sub_1CCCC8E38(v3, v15, v16);
  uint64_t v18 = (unsigned __int8 *)llvm::Value::getName(this);
  size_t v19 = v17;
  sub_1CD749CE0(v20, (uint64_t)&v25);
  sub_1CD749B68((uint64_t)&v3[1].i64[1], v18, v19, (uint64_t)v20);
  sub_1CD747370((uint64_t)v20);
  return (int64x2_t *)sub_1CD747370((uint64_t)&v25);
}

uint64_t sub_1CD74991C(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t result = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(*(void *)a1 + 8 * result);
  if (v11 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v11)
  {
    return result;
  }
  *(void *)(v9 + 8 * result) = sub_1CD7499E8(a2, a3, a4);
  ++*(_DWORD *)(a1 + 12);
  uint64_t result = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v10);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

char *sub_1CD7499E8(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(a2 + 89, (std::align_val_t)8uLL);
  int v7 = v6;
  unint64_t v8 = v6 + 88;
  if (a2) {
    memcpy(v6 + 88, a1, a2);
  }
  v8[a2] = 0;
  *(void *)int v7 = a2;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a3;
  *((void *)v7 + 3) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = *(void *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *((void *)v7 + 6) = v9;
  *((void *)v7 + 7) = v10;
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a3 + 56);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  return v7;
}

std::string *sub_1CD749A90(std::string *a1, llvm::Value *this)
{
  Name = llvm::Value::getName(this);
  if (Name)
  {
    std::string::__init(a1, Name, v5);
  }
  else
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  llvm::DCData::DCData((llvm::DCData *)&a1[2], this);
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  size_t v15 = a1 + 1;
  int v14 = 0;
  int v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  llvm::BasicBlock::print((const llvm::Function **)this, (llvm::raw_ostream *)&v7, 0, 1, 1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  return a1;
}

uint64_t sub_1CD749B68(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t result = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(*(void *)a1 + 8 * result);
  if (v11 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v11)
  {
    return result;
  }
  *(void *)(v9 + 8 * result) = sub_1CD749C34(a2, a3, a4);
  ++*(_DWORD *)(a1 + 12);
  uint64_t result = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v10);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

char *sub_1CD749C34(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(a2 + 89, (std::align_val_t)8uLL);
  int v7 = v6;
  int v8 = v6 + 88;
  if (a2) {
    memcpy(v6 + 88, a1, a2);
  }
  v8[a2] = 0;
  *(void *)int v7 = a2;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v9 = *(void *)(a3 + 24);
  *((void *)v7 + 3) = *(void *)(a3 + 16);
  *((void *)v7 + 4) = v9;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *((void *)v7 + 10) = *(void *)(a3 + 72);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a3 + 56);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  return v7;
}

void *sub_1CD749CE0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CB906CCC(a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_1CD749D68((llvm::StringMapImpl *)(a1 + 3), (uint64_t *)(a2 + 24));
  char v4 = a1 + 7;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v4, *(const void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *char v4 = v5;
  }
  return a1;
}

llvm::StringMapImpl *sub_1CD749D68(llvm::StringMapImpl *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x5800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((unsigned int *)this + 2);
    uint64_t v6 = *a2;
    *(void *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v4 + 8 * v5 + 8;
      uint64_t v9 = v6 + 8 * v5 + 8;
      do
      {
        uint64_t v10 = *(void *)(*a2 + 8 * v7);
        if (v10) {
          BOOL v11 = v10 == -8;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          *(void *)(*(void *)this + 8 * v7) = v10;
        }
        else
        {
          uint64_t v17 = v9;
          size_t v12 = *(void *)v10;
          uint64_t v13 = operator new(*(void *)v10 + 89, (std::align_val_t)8uLL);
          int v14 = v13;
          size_t v15 = (char *)(v13 + 11);
          if (v12) {
            memcpy(v13 + 11, (const void *)(v10 + 88), v12);
          }
          v15[v12] = 0;
          size_t *v14 = v12;
          sub_1CD749E90((uint64_t)(v14 + 1), (long long *)(v10 + 8));
          *(void *)(*(void *)this + 8 * v7) = v14;
          uint64_t v9 = v17;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v17 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

uint64_t sub_1CD749E90(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
  }
  uint64_t v5 = (_OWORD *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v5, *((const void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *uint64_t v5 = v6;
  }
  sub_1CCCD3414((llvm::StringMapImpl *)(a1 + 48), (uint64_t *)a2 + 6);
  return a1;
}

uint64_t sub_1CD749F1C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2)
  {
    uint64_t v4 = a2;
    if (!a3) {
      uint64_t v3 = *a1;
    }
  }
  else
  {
    uint64_t v4 = *a1;
  }
  uint64_t v5 = a1[1];
  long long v6 = (_DWORD *)a1[2];
  int v7 = (*v6)++;
  char v11 = 1;
  int v10 = v7;
  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8)
  {
    sub_1CB920400();
    sub_1CD749FA8();
  }
  return (*(uint64_t (**)(uint64_t, char *, int *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, &v11, &v10, v4, v3);
}

void sub_1CD749FA8()
{
}

uint64_t sub_1CD74A070(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t result = sub_1CD74A0E4(*a1, a2, a3, v4);
  if (v4)
  {
    long long v6 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v6(v4);
  }
  return result;
}

uint64_t sub_1CD74A0E4(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  if (a4) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 16))(&v8, a4);
  }
  else {
    uint64_t v8 = 0;
  }
  sub_1CD74A198(a1, (uint64_t)&v8, a2, a3);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t sub_1CD74A198(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >= *(void *)(a1 + 24))
  {
    uint64_t v9 = sub_1CCCD3764((int64x2_t *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(void *)(v8 + 48) = 0;
    *(_OWORD *)unint64_t v8 = 0u;
    *(_DWORD *)(v8 + 44) = 88;
    uint64_t v9 = (char *)(v8 + 56);
  }
  *(void *)(a1 + 16) = v9;
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v16);
  }
  else {
    uint64_t v16 = 0;
  }
  int v10 = sub_1CCCC8744(&v16, a3, a4);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v10)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      *(unsigned char *)(a1 + 32) = 0;
      if (*(unsigned char *)(a1 + 33))
      {
        if (*(void *)a2) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v15);
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v15);
        uint64_t v12 = v15;
        uint64_t v15 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 16) - 56;
    if (*(void *)a2) {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v14);
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, char *, size_t, uint64_t))(*(void *)a1 + 24))(a1, &v14, a3, a4, v13);
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_1CD74A3E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    sub_1CD7472E8(i - 32);
    long long v6 = v4;
    sub_1CB8338B8(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CD74A454()
{
}

uint64_t sub_1CD74A51C(unsigned char **a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t result = sub_1CD74A590(*a1, a2, a3, v4);
  if (v4)
  {
    long long v6 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v6(v4);
  }
  return result;
}

uint64_t sub_1CD74A590(unsigned char *a1, char *a2, size_t a3, uint64_t a4)
{
  if (a4) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 16))(&v8, a4);
  }
  else {
    uint64_t v8 = 0;
  }
  sub_1CD74A644(a1, (uint64_t)&v8, a2, a3);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1CD74A644(unsigned char *a1, uint64_t a2, char *a3, size_t a4)
{
  if (*(void *)a2) {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v20);
  }
  else {
    uint64_t v20 = 0;
  }
  sub_1CCCC67F8((char *)v21, &v20);
  uint64_t v8 = v20;
  uint64_t v20 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (sub_1CCCC6BBC(a3, a4))
  {
    if (a1[33]) {
      (*(void (**)(unsigned char *, char *, size_t, void **))(*(void *)a1 + 64))(a1, a3, a4, v21);
    }
  }
  else
  {
    if (*(void *)a2) {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v19);
    }
    else {
      uint64_t v19 = 0;
    }
    char v9 = sub_1CCCC8744(&v19, a3, a4);
    uint64_t v10 = v19;
    uint64_t v19 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      uint64_t v11 = *((void *)a1 + 2);
      memset(v17, 0, sizeof(v17));
      int v18 = 88;
      if (*(void *)a2) {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v16);
      }
      else {
        uint64_t v16 = 0;
      }
      (*(void (**)(unsigned char *, uint64_t *, char *, size_t, unsigned char *))(*(void *)a1 + 24))(a1, &v16, a3, a4, v17);
      uint64_t v12 = v16;
      uint64_t v16 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      if (sub_1CD74AA40(v11 - 32, (uint64_t)&v17[24]))
      {
        if (a1[33]) {
          (*(void (**)(unsigned char *, char *, size_t, void **))(*(void *)a1 + 32))(a1, a3, a4, v21);
        }
      }
      else
      {
        uint64_t v13 = v11 - 56;
        if (*(void *)a2) {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v15);
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(unsigned char *, char *, size_t, void **, uint64_t, unsigned char *, uint64_t *))(*(void *)a1 + 40))(a1, a3, a4, v21, v13, v17, &v15);
        uint64_t v14 = v15;
        uint64_t v15 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      sub_1CD7472E8((uint64_t)&v17[24]);
      long long v23 = (void **)v17;
      sub_1CB8338B8(&v23);
    }
    else if (a1[33])
    {
      (*(void (**)(unsigned char *, char *, size_t, void **))(*(void *)a1 + 56))(a1, a3, a4, v21);
    }
  }
  sub_1CD74A9F8((uint64_t)(a1 + 8));
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

void sub_1CD74A9F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void **)(v2 - 56);
  sub_1CD7472E8(v2 - 32);
  uint64_t v4 = v3;
  sub_1CB8338B8(&v4);
  *(void *)(a1 + 8) = v3;
}

BOOL sub_1CD74AA40(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      for (uint64_t i = *(uint64_t **)a1; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(uint64_t **)a1;
    }
    uint64_t v6 = *(void *)a1 + 8 * v3;
    if (i == (uint64_t *)v6) {
      return 1;
    }
    uint64_t v7 = *i;
    while (1)
    {
      int Key = llvm::StringMapImpl::FindKey((uint64_t *)a2, (unsigned __int8 *)(v7 + 88), *(void *)v7);
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a2 + 8)) {
        break;
      }
      BOOL result = sub_1CD74AB1C(v7 + 32, *(void *)(*(void *)a2 + 8 * Key) + 32);
      if (result)
      {
        do
        {
          uint64_t v11 = i[1];
          ++i;
          uint64_t v7 = v11;
          if (v11) {
            BOOL v12 = v7 == -8;
          }
          else {
            BOOL v12 = 1;
          }
        }
        while (v12);
        BOOL result = 1;
        if (i != (uint64_t *)v6) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

BOOL sub_1CD74AB1C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      for (uint64_t i = *(uint64_t **)a1; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(uint64_t **)a1;
    }
    uint64_t v6 = *(void *)a1 + 8 * v3;
    if (i == (uint64_t *)v6) {
      return 1;
    }
    uint64_t v7 = *i;
    while (1)
    {
      int Key = llvm::StringMapImpl::FindKey((uint64_t *)a2, (unsigned __int8 *)(v7 + 88), *(void *)v7);
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a2 + 8)) {
        break;
      }
      BOOL result = sub_1CBAD746C((unsigned __int8 *)(v7 + 32), (unsigned __int8 *)(*(void *)(*(void *)a2 + 8 * Key) + 32));
      if (!result) {
        return result;
      }
      do
      {
        uint64_t v11 = i[1];
        ++i;
        uint64_t v7 = v11;
        if (v11) {
          BOOL v12 = v7 == -8;
        }
        else {
          BOOL v12 = 1;
        }
      }
      while (v12);
      if (i == (uint64_t *)v6) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1CD74ABF0()
{
}

void sub_1CD74ACB8(void *a1)
{
  uint64_t v1 = *a1;
  if (*(unsigned char *)(*a1 + 33)) {
    (*(void (**)(void))(*(void *)v1 + 48))(*a1);
  }

  sub_1CD74A9F8(v1 + 8);
}

void sub_1CD74AD1C()
{
}

void sub_1CD74ADE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  sub_1CD74AE58(*a1, a2, a3, v4);
}

void sub_1CD74AE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 16))(&v4, a4);
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::ChangeReporter<std::string>::saveIRBeforePass();
}

void sub_1CD74AF0C()
{
}

void sub_1CD74AFD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  sub_1CD74B048(*a1, a2, a3, v4);
}

void sub_1CD74B048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 16))(&v4, a4);
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::ChangeReporter<std::string>::handleIRAfterPass();
}

void sub_1CD74B0FC()
{
}

void sub_1CD74B1C4()
{
}

uint64_t sub_1CD74B1CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    sub_1CD746938(i - 32);
    uint64_t v6 = v4;
    sub_1CB8338B8(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1CD74B23C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      for (uint64_t i = *(uint64_t **)a1; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(uint64_t **)a1;
    }
    uint64_t v6 = *(void *)a1 + 8 * v3;
    if (i == (uint64_t *)v6) {
      return 1;
    }
    uint64_t v7 = *i;
    while (1)
    {
      int Key = llvm::StringMapImpl::FindKey((uint64_t *)a2, (unsigned __int8 *)(v7 + 88), *(void *)v7);
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a2 + 8)) {
        break;
      }
      BOOL result = sub_1CD74B318(v7 + 32, *(void *)(*(void *)a2 + 8 * Key) + 32);
      if (result)
      {
        do
        {
          uint64_t v11 = i[1];
          ++i;
          uint64_t v7 = v11;
          if (v11) {
            BOOL v12 = v7 == -8;
          }
          else {
            BOOL v12 = 1;
          }
        }
        while (v12);
        BOOL result = 1;
        if (i != (uint64_t *)v6) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

BOOL sub_1CD74B318(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      for (uint64_t i = *(uint64_t **)a1; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(uint64_t **)a1;
    }
    uint64_t v6 = *(void *)a1 + 8 * v3;
    if (i == (uint64_t *)v6) {
      return 1;
    }
    uint64_t v7 = *i;
    while (1)
    {
      int Key = llvm::StringMapImpl::FindKey((uint64_t *)a2, (unsigned __int8 *)(v7 + 64), *(void *)v7);
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a2 + 8)) {
        break;
      }
      BOOL result = sub_1CBAD746C((unsigned __int8 *)(v7 + 32), (unsigned __int8 *)(*(void *)(*(void *)a2 + 8 * Key) + 32));
      if (!result) {
        return result;
      }
      do
      {
        uint64_t v11 = i[1];
        ++i;
        uint64_t v7 = v11;
        if (v11) {
          BOOL v12 = v7 == -8;
        }
        else {
          BOOL v12 = 1;
        }
      }
      while (v12);
      if (i == (uint64_t *)v6) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1CD74B3EC()
{
}

void sub_1CD74B4B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  sub_1CD74B528(*a1, a2, a3, v4);
}

void sub_1CD74B528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 16))(&v4, a4);
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::saveIRBeforePass();
}

void sub_1CD74B5DC()
{
}

void sub_1CD74B6A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  sub_1CD74B718(*a1, a2, a3, v4);
}

void sub_1CD74B718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 16))(&v4, a4);
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleIRAfterPass();
}

void sub_1CD74B7CC()
{
}

void sub_1CD74B894(void *a1)
{
  uint64_t v1 = *a1;
  if (*(unsigned char *)(*a1 + 33)) {
    (*(void (**)(void))(*(void *)v1 + 48))(*a1);
  }

  sub_1CD7445CC(v1 + 8);
}

uint64_t sub_1CD74B8FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2)
  {
    uint64_t v4 = a2;
    if (!a3) {
      uint64_t v3 = *a1;
    }
  }
  else
  {
    uint64_t v4 = *a1;
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = (_DWORD *)a1[2];
  int v7 = (*v6)++;
  char v15 = 1;
  int v14 = v7;
  uint64_t v8 = *(void *)(v5 + 24);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, int *, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, &v15, &v14, v4, v3);
  }
  sub_1CB920400();
  return sub_1CD74B988(v10, v11, v12, v13);
}

uint64_t sub_1CD74B988(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t result = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(*(void *)a1 + 8 * result);
  if (v11 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v11)
  {
    return result;
  }
  size_t v12 = (char *)operator new(a3 + 65, (std::align_val_t)8uLL);
  uint64_t v13 = v12;
  int v14 = v12 + 64;
  if (a3) {
    memcpy(v12 + 64, a2, a3);
  }
  v14[a3] = 0;
  *(void *)uint64_t v13 = a3;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)a4;
  *((void *)v13 + 3) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a4 + 24);
  *((void *)v13 + 6) = *(void *)(a4 + 40);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(v9 + 8 * v10) = v13;
  ++*(_DWORD *)(a1 + 12);
  uint64_t result = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v10);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

uint64_t sub_1CD74BAA8(uint64_t a1, int *a2)
{
  Bytes = (const std::string::value_type *)llvm::DataExtractor::getBytes((void *)a1, (unint64_t *)(a1 + 24), 4, (void *)(a1 + 32));
  std::string::__init(&v26, Bytes, v5);
  char v7 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  std::string::size_type size = *((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x7F;
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  if (size != 4)
  {
    uint64_t v18 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(a1 + 16))
  {
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v26;
    }
    uint64_t v10 = &v9->__r_.__value_.__s.__data_[3];
    uint64_t v11 = &v9->__r_.__value_.__s.__data_[1];
    do
    {
      std::string::value_type v12 = *(v11 - 1);
      *(v11 - 1) = *v10;
      *v10-- = v12;
    }
    while (v11++ < v10);
    char v7 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    uint64_t v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v7 >= 0) {
    int v14 = &v26;
  }
  else {
    int v14 = v9;
  }
  int v15 = v14->__r_.__value_.__s.__data_[0];
  int v16 = v14->__r_.__value_.__s.__data_[0];
  if (v15 < 65)
  {
    if (v7 >= 0) {
      uint64_t v9 = &v26;
    }
    int v17 = v9->__r_.__value_.__s.__data_[2] + 10 * (char)v16 - 480;
  }
  else
  {
    if (v7 >= 0) {
      uint64_t v9 = &v26;
    }
    int v17 = 10 * v9->__r_.__value_.__s.__data_[1] + 100 * v16 + v9->__r_.__value_.__s.__data_[2] - 6980;
  }
  if (v17 >= 168)
  {
    int v20 = 5;
LABEL_27:
    *a2 = v20;
    *(_DWORD *)(a1 + 48) = v20;
LABEL_28:
    uint64_t v18 = 1;
    goto LABEL_19;
  }
  if (v17 >= 138)
  {
    int v20 = 4;
    goto LABEL_27;
  }
  if (v17 >= 128)
  {
    int v20 = 3;
    goto LABEL_27;
  }
  if (v17 >= 96)
  {
    int v20 = 2;
    goto LABEL_27;
  }
  if (v17 != 95)
  {
    if (v17 < 82)
    {
      uint64_t v21 = (llvm::raw_ostream *)llvm::errs(v6);
      char v22 = sub_1CB8E509C(v21, "unexpected version: ");
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v26;
      }
      else {
        long long v23 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v24 = *((unsigned char *)&v26.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t v24 = v26.__r_.__value_.__l.__size_;
      }
      int64x2_t v25 = llvm::raw_ostream::write(v22, (const char *)v23, v24);
      sub_1CB8E509C(v25, "\n");
      uint64_t v18 = 0;
      char v7 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      goto LABEL_19;
    }
    *a2 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    goto LABEL_28;
  }
  uint64_t v18 = 1;
  *a2 = 1;
  *(_DWORD *)(a1 + 48) = 1;
LABEL_19:
  if (v7 < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v18;
}

BOOL sub_1CD74BCB0(unint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 3;
  unint64_t v3 = a1[3] + 4;
  unint64_t v4 = a1[1];
  if (v3 <= v4)
  {
    *a2 = sub_1CD8337FC((uint64_t)a1, a1 + 3, a1 + 4);
  }
  else
  {
    *a2 = 0;
    std::string::size_type v5 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    uint64_t v6 = sub_1CB8E509C(v5, "unexpected end of memory buffer: ");
    sub_1CD098D14(v6, *v2, 0, 0, 0);
    sub_1CB8E509C(v6, "\n");
  }
  return v3 <= v4;
}

uint64_t sub_1CD74BD48(int64x2_t *a1, const void *a2, size_t a3)
{
  unint64_t v4 = a1->u64[1];
  if (v4 >= a1[1].i64[0])
  {
    uint64_t result = sub_1CCCD9DFC(a1, a2, a3);
  }
  else
  {
    std::string::__init((std::string *)a1->i64[1], (const std::string::value_type *)a2, a3);
    uint64_t result = v4 + 24;
  }
  a1->i64[1] = result;
  return result;
}

uint64_t sub_1CD74BD90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(_DWORD **)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16) - (void)v2;
  if (v3 < 4) {
    return 0;
  }
  if (*v2 == 1633968999)
  {
    char v5 = 0;
  }
  else
  {
    if (*v2 != 1734567009) {
      return 0;
    }
    char v5 = 1;
  }
  *(void *)a1 = v2 + 1;
  *(void *)(a1 + 8) = v3 - 4;
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 17) = 0;
  return 1;
}

BOOL sub_1CD74BE04(unint64_t *a1, unint64_t *a2)
{
  uint64_t v6 = 0;
  BOOL v4 = sub_1CD74BCB0(a1, (_DWORD *)&v6 + 1);
  BOOL result = 0;
  if (v4)
  {
    BOOL result = sub_1CD74BCB0(a1, &v6);
    if (result)
    {
      *a2 = HIDWORD(v6) | ((unint64_t)v6 << 32);
      return 1;
    }
  }
  return result;
}

std::string *llvm::getInstrProfSectionName@<X0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (a2 == 5 && a3)
  {
    uint64_t v8 = a1;
    MEMORY[0x1D25D9630](a4, off_1E684F7E8[a1]);
  }
  else
  {
    uint64_t v8 = a1;
    if (a2 == 1)
    {
      uint64_t v10 = off_1E684F828[a1];
      goto LABEL_8;
    }
  }
  BOOL result = std::string::append(a4, off_1E684F868[v8]);
  if (a1 || a2 != 5 || !a3) {
    return result;
  }
  uint64_t v10 = ",regular,live_support";
LABEL_8:

  return std::string::append(a4, v10);
}

void llvm::InstrProfError::message(llvm::InstrProfError *this@<X0>, uint64_t a2@<X8>)
{
}

unint64_t *llvm::createPGOFuncNameVar(uint64_t *a1, int a2, char *a3, llvm::Type *a4)
{
  if (a2) {
    BOOL v7 = a2 == 7;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    int v8 = 8;
  }
  else {
    int v8 = a2;
  }
  if (a2 == 1) {
    int v8 = 3;
  }
  if (a2 == 9) {
    int v9 = 2;
  }
  else {
    int v9 = v8;
  }
  String = llvm::ConstantDataArray::getString(*a1, a3, a4, 0);
  uint64_t v11 = llvm::User::operator new((llvm::User *)0x58, 1u);
  std::string::value_type v12 = *(llvm::PointerType **)String;
  llvm::getPGOFuncNameVarName(a3, (std::string::size_type)a4, v9, &__p);
  __int16 v16 = 260;
  p_p = &__p;
  llvm::GlobalVariable::GlobalVariable(v11, (uint64_t)a1, v12, 1, v9, (unint64_t)String, (const char **)&p_p, 0, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v11[4] & 0xF) - 7 >= 2)
  {
    *((_DWORD *)v11 + 8) = v11[4] & 0xFFFFFFCF | 0x10;
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v11) & 1) == 0) {
      *((_DWORD *)v11 + 8) |= 0x4000u;
    }
  }
  return v11;
}

unint64_t *llvm::createPGOFuncNameVar(uint64_t a1, char *a2, llvm::Type *a3)
{
  return llvm::createPGOFuncNameVar(*(uint64_t **)(a1 + 40), *(_DWORD *)(a1 + 32) & 0xF, a2, a3);
}

void llvm::InstrProfSymtab::create(llvm::InstrProfSymtab *this@<X0>, llvm::Module *a2@<X1>, llvm::Function *a3@<X2>, void *a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)a2 + 24;
  BOOL v7 = (char *)*((void *)a2 + 4);
  if (v7 != (char *)a2 + 24)
  {
    do
    {
      if (v7) {
        int v9 = (llvm *)(v7 - 56);
      }
      else {
        int v9 = 0;
      }
      if ((*((unsigned char *)v9 + 23) & 0x10) == 0) {
        goto LABEL_6;
      }
      llvm::getPGOFuncName(v9, a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      sub_1CD74C38C((uint64_t)this, (unsigned __int8 *)p_p, size, a4);
      if (*a4) {
        goto LABEL_15;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &__p;
      }
      else {
        uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      double v15 = llvm::MD5::MD5((llvm::MD5 *)v33);
      llvm::MD5::update(v33, v13, v14, v15);
      llvm::MD5::final(v33, (int *)v30);
      unint64_t v16 = *((void *)this + 11);
      if (v16 >= *((void *)this + 12))
      {
        int v17 = sub_1CC1A08EC((char **)this + 10, (uint64_t)v30[0], (uint64_t)v9);
      }
      else
      {
        *(void **)unint64_t v16 = v30[0];
        *(void *)(v16 + 8) = v9;
        int v17 = (char *)(v16 + 16);
      }
      *((void *)this + 11) = v17;
      char v31 = 8;
      strcpy((char *)v30, ".__uniq.");
      uint64_t v18 = sub_1CCCDAB7C(&__p, (char *)v30);
      if (v18 == -1) {
        std::string::size_type v19 = 0;
      }
      else {
        std::string::size_type v19 = v18 + 8;
      }
      std::string::size_type v20 = std::string::find(&__p, 46, v19);
      int v12 = 0;
      if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        std::string::basic_string(&v28, &__p, 0, v20, (std::allocator<char> *)v33);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &v28;
        }
        else {
          uint64_t v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v22 = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t v22 = v28.__r_.__value_.__l.__size_;
        }
        sub_1CD74C38C((uint64_t)this, (unsigned __int8 *)v21, v22, a4);
        if (*a4)
        {
          if ((*((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x80) != 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
LABEL_15:
          int v12 = 1;
          goto LABEL_16;
        }
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v23 = &v28;
        }
        else {
          long long v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v24 = v28.__r_.__value_.__l.__size_;
        }
        double v25 = llvm::MD5::MD5((llvm::MD5 *)v33);
        llvm::MD5::update(v33, v23, v24, v25);
        llvm::MD5::final(v33, (int *)&v32);
        std::string v26 = (void *)*((void *)this + 11);
        if ((unint64_t)v26 >= *((void *)this + 12))
        {
          int v27 = sub_1CC1A08EC((char **)this + 10, v32, (uint64_t)v9);
        }
        else
        {
          *std::string v26 = v32;
          v26[1] = v9;
          int v27 = (char *)(v26 + 2);
        }
        *((void *)this + 11) = v27;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (v31 < 0) {
          operator delete(v30[0]);
        }
        int v12 = 0;
      }
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12) {
        return;
      }
LABEL_6:
      BOOL v7 = (char *)*((void *)v7 + 1);
    }
    while (v7 != v6);
  }
  *((unsigned char *)this + 128) = 0;
  sub_1CD5DF87C((uint64_t *)this);
  *a4 = 0;
}

uint64_t **sub_1CD74C38C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    LODWORD(v17) = 9;
    sub_1CCCDE0CC();
  }
  BOOL result = (uint64_t **)sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 24), a2, a3);
  if (v9)
  {
    uint64_t v10 = result;
    double v11 = llvm::MD5::MD5((llvm::MD5 *)&v17);
    llvm::MD5::update(&v17, a2, a3, v11);
    llvm::MD5::final((int *)&v17, v16);
    uint64_t v12 = (uint64_t)(*v10 + 1);
    uint64_t v13 = **v10;
    *(void *)&long long v17 = *(void *)v16;
    *((void *)&v17 + 1) = v12;
    uint64_t v18 = v13;
    unint64_t v14 = *(void *)(a1 + 64);
    if (v14 >= *(void *)(a1 + 72))
    {
      BOOL result = (uint64_t **)sub_1CBF56DE8((void **)(a1 + 56), (uint64_t)&v17);
    }
    else
    {
      long long v15 = v17;
      *(void *)(v14 + 16) = v18;
      *(_OWORD *)unint64_t v14 = v15;
      BOOL result = (uint64_t **)(v14 + 24);
    }
    *(void *)(a1 + 64) = result;
    *(unsigned char *)(a1 + 128) = 0;
  }
  *a4 = 0;
  return result;
}

uint64_t llvm::InstrProfSymtab::getFunctionHashFromAddress(llvm::InstrProfSymtab *this, unint64_t a2)
{
  sub_1CD5DF87C((uint64_t *)this);
  BOOL v4 = (char *)*((void *)this + 13);
  char v5 = (char *)*((void *)this + 14);
  if (v5 != v4)
  {
    unint64_t v6 = (v5 - v4) >> 4;
    do
    {
      unint64_t v7 = v6 >> 1;
      int v8 = &v4[16 * (v6 >> 1)];
      unint64_t v10 = *(void *)v8;
      char v9 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v10 < a2) {
        BOOL v4 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  if (v4 == v5 || *(void *)v4 != a2) {
    return 0;
  }
  else {
    return *((void *)v4 + 1);
  }
}

uint64_t llvm::getPGOFuncNameVarInitializer(llvm *this, llvm::GlobalVariable *a2)
{
  uint64_t v2 = (llvm::ConstantDataSequential *)*((void *)this - 4);
  llvm::ConstantDataSequential::isCString(v2);
  return llvm::ConstantDataSequential::getRawDataValues(v2);
}

void llvm::collectPGOFuncNameStrings(llvm **a1@<X0>, llvm::GlobalVariable *a2@<X1>, std::string *a3@<X2>, void *a4@<X8>)
{
  int64x2_t v15 = 0uLL;
  unint64_t v16 = 0;
  if (a2)
  {
    uint64_t v7 = 8 * (void)a2;
    do
    {
      PGOFuncNameVarInitializer = (const std::string::value_type *)llvm::getPGOFuncNameVarInitializer(*a1, a2);
      std::string::__init(&__p, PGOFuncNameVarInitializer, v9);
      unint64_t v10 = (_OWORD *)v15.i64[1];
      if (v15.i64[1] >= v16)
      {
        v15.i64[1] = (uint64_t)sub_1CBF4ECB4(&v15, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v15.i64[1] + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        _OWORD *v10 = v11;
        v15.i64[1] = (uint64_t)v10 + 24;
      }
      ++a1;
      v7 -= 8;
    }
    while (v7);
    uint64_t v13 = v15.i64[1];
    uint64_t v12 = (std::string *)v15.i64[0];
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  llvm::collectPGOFuncNameStrings(v12, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v12) >> 3), a3, a4);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  sub_1CB8338B8((void ***)&__p);
}

uint64_t sub_1CD74C670(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result) {
    operator new();
  }
  if (a2) {
    result += 24;
  }
  return result;
}

void llvm::ValueProfRecord::deserializeTo(llvm::ValueProfRecord *this, llvm::InstrProfRecord *a2, llvm::InstrProfSymtab *a3)
{
  unint64_t v3 = *((unsigned int *)this + 1);
  if (v3)
  {
    uint64_t v7 = (unint64_t *)sub_1CD74C670((uint64_t)a2, *(_DWORD *)this);
    sub_1CD74D628(v7, v3);
    int v9 = *((_DWORD *)this + 1);
    if (v9)
    {
      unint64_t v10 = 0;
      long long v11 = (long long *)((char *)this + ((v9 + 15) & 0xFFFFFFF8));
      do
      {
        uint64_t v12 = *((unsigned __int8 *)this + v10 + 8);
        llvm::InstrProfRecord::addValueData((uint64_t)a2, *(_DWORD *)this, v8, v11, *((unsigned __int8 *)this + v10 + 8), a3);
        v11 += v12;
        ++v10;
      }
      while (v10 < *((unsigned int *)this + 1));
    }
  }
}

unsigned int *llvm::ValueProfRecord::swapBytes(unsigned int *result, int a2, int a3)
{
  if (a2 != a3)
  {
    unsigned int v3 = result[1];
    if (a2 != 1)
    {
      unsigned int v3 = bswap32(v3);
      *uint64_t result = bswap32(*result);
      result[1] = v3;
    }
    if (v3)
    {
      LODWORD(v4) = 0;
      uint64_t v5 = v3;
      unint64_t v6 = (unsigned __int8 *)(result + 2);
      do
      {
        int v7 = *v6++;
        uint64_t v4 = (v4 + v7);
        --v5;
      }
      while (v5);
      if (v4)
      {
        int v8 = (int8x16_t *)((char *)result + ((v3 + 15) & 0xFFFFFFF8));
        do
        {
          *int v8 = vrev64q_s8(*v8);
          ++v8;
          --v4;
        }
        while (v4);
      }
    }
    if (a2 == 1)
    {
      *uint64_t result = bswap32(*result);
      result[1] = bswap32(v3);
    }
  }
  return result;
}

void llvm::ValueProfData::deserializeTo(llvm::ValueProfData *this, llvm::InstrProfRecord *a2, llvm::InstrProfSymtab *a3)
{
  if (*((_DWORD *)this + 1))
  {
    unsigned int v6 = 0;
    int v7 = (unsigned __int8 *)this + 8;
    do
    {
      llvm::ValueProfRecord::deserializeTo((llvm::ValueProfRecord *)v7, a2, a3);
      int v8 = *((_DWORD *)v7 + 1);
      if (v8)
      {
        int v9 = 0;
        unint64_t v10 = v7 + 8;
        uint64_t v11 = *((unsigned int *)v7 + 1);
        do
        {
          int v12 = *v10++;
          v9 += v12;
          --v11;
        }
        while (v11);
      }
      else
      {
        int v9 = 0;
      }
      v7 += 16 * v9 + ((v8 + 15) & 0xFFFFFFF8);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 1));
  }
}

unsigned int *llvm::ValueProfData::checkIntegrity@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  unsigned int v2 = this[1];
  if (v2 >= 3 || (int64_t v3 = *this, (v3 & 7) != 0)) {
    sub_1CCCDE844();
  }
  if (v2)
  {
    int v4 = 0;
    uint64_t v5 = this + 2;
    do
    {
      if (*v5 > 1u) {
        sub_1CCCDE0CC();
      }
      int v6 = v5[1];
      if (v6)
      {
        int v7 = 0;
        int v8 = (unsigned __int8 *)(v5 + 2);
        uint64_t v9 = v5[1];
        do
        {
          int v10 = *v8++;
          v7 += v10;
          --v9;
        }
        while (v9);
      }
      else
      {
        int v7 = 0;
      }
      uint64_t v5 = (_DWORD *)((char *)v5 + 16 * v7 + ((v6 + 15) & 0xFFFFFFF8));
      if ((char *)v5 - (char *)this > v3) {
        sub_1CCCDE8E8();
      }
      ++v4;
    }
    while (v4 != v2);
  }
  *a2 = 0;
  return this;
}

void llvm::ValueProfData::getValueProfData(unsigned int *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if ((unint64_t)(a1 + 2) > a2) {
    operator new();
  }
  unsigned int v7 = bswap32(*a1);
  if (a3 == 1) {
    size_t v8 = *a1;
  }
  else {
    size_t v8 = v7;
  }
  if ((unint64_t)a1 + v8 > a2) {
    operator new();
  }
  uint64_t v9 = operator new(v8);
  void *v9 = 0;
  memcpy(v9, a1, v8);
  llvm::ValueProfData::swapBytesToHost((unsigned int *)v9, a3);
  llvm::ValueProfData::checkIntegrity((unsigned int *)v9, v12);
  uint64_t v10 = v12[0];
  char v11 = *(unsigned char *)(a4 + 8);
  if (v12[0])
  {
    *(unsigned char *)(a4 + 8) = v11 | 1;
    *(void *)a4 = v10;
    operator delete(v9);
  }
  else
  {
    *(unsigned char *)(a4 + 8) = v11 & 0xFE;
    *(void *)a4 = v9;
  }
}

unsigned int *llvm::ValueProfData::swapBytesToHost(unsigned int *result, int a2)
{
  if (a2 != 1)
  {
    unsigned int v2 = result;
    unsigned int v3 = result[1];
    *uint64_t result = bswap32(*result);
    result[1] = bswap32(v3);
    if (v3)
    {
      unsigned int v5 = 0;
      int v6 = result + 2;
      do
      {
        uint64_t result = llvm::ValueProfRecord::swapBytes(v6, a2, 1);
        unsigned int v7 = v6[1];
        if (v7)
        {
          int v8 = 0;
          uint64_t v9 = (unsigned __int8 *)(v6 + 2);
          uint64_t v10 = v6[1];
          do
          {
            int v11 = *v9++;
            v8 += v11;
            --v10;
          }
          while (v10);
        }
        else
        {
          int v8 = 0;
        }
        int v6 = (unsigned int *)((char *)v6 + 16 * v8 + ((v7 + 15) & 0xFFFFFFF8));
        ++v5;
      }
      while (v5 < v2[1]);
    }
  }
  return result;
}

unint64_t *llvm::annotateValueSite(unint64_t *result, llvm::Instruction *a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a4) {
    uint64_t v6 = 24;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) + v6) + 24 * a5;
  uint64_t v8 = *(unsigned int *)(v7 + 16);
  if (*(_DWORD *)(v7 + 16))
  {
    int v12 = (uint64_t **)result;
    unint64_t v14 = 0;
    sub_1CCCDB1F0(a3, a4, a5, &v14, &v13);
    llvm::annotateValueSite(v12, a2, v13, v8, v14, a4, a6);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C80451B5BE8);
    }
  }
  return result;
}

void llvm::annotateValueSite(uint64_t **a1, llvm::Instruction *a2, unint64_t *a3, uint64_t a4, unint64_t a5, unsigned int a6, int a7)
{
  v38[3] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *a1;
  uint64_t v35 = *a1;
  long long v36 = v38;
  uint64_t v37 = 0x300000000;
  int64x2_t v15 = llvm::MDBuilder::createString(&v35, "VP", 2uLL);
  if (v37 >= HIDWORD(v37)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v36 + v37) = v15;
  LODWORD(v37) = v37 + 1;
  Int32Ty = (llvm::ConstantInt *)llvm::Type::getInt32Ty((llvm::Type *)v13, v14);
  long long v17 = (llvm::Constant *)llvm::ConstantInt::get(Int32Ty, a6, 0);
  uint64_t Constant = llvm::MDBuilder::createConstant((llvm::MDBuilder *)&v35, v17);
  if (v37 >= HIDWORD(v37)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v36 + v37) = Constant;
  LODWORD(v37) = v37 + 1;
  Int64Ty = (llvm::ConstantInt *)llvm::Type::getInt64Ty((llvm::Type *)v13, v18);
  uint64_t v21 = (llvm::Constant *)llvm::ConstantInt::get(Int64Ty, a5, 0);
  uint64_t v23 = llvm::MDBuilder::createConstant((llvm::MDBuilder *)&v35, v21);
  if (v37 >= HIDWORD(v37)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v36 + v37) = v23;
  unsigned int v24 = v37 + 1;
  LODWORD(v37) = v37 + 1;
  if (a4)
  {
    double v25 = &a3[2 * a4];
    int v26 = a7 - 1;
    do
    {
      int v27 = (llvm::ConstantInt *)llvm::Type::getInt64Ty((llvm::Type *)v13, v22);
      std::string v28 = (llvm::Constant *)llvm::ConstantInt::get(v27, *a3, 0);
      uint64_t v30 = llvm::MDBuilder::createConstant((llvm::MDBuilder *)&v35, v28);
      if (v37 >= (unint64_t)HIDWORD(v37)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v36 + v37) = v30;
      LODWORD(v37) = v37 + 1;
      char v31 = (llvm::ConstantInt *)llvm::Type::getInt64Ty((llvm::Type *)v13, v29);
      uint64_t v32 = (llvm::Constant *)llvm::ConstantInt::get(v31, a3[1], 0);
      uint64_t v33 = llvm::MDBuilder::createConstant((llvm::MDBuilder *)&v35, v32);
      if (v37 >= (unint64_t)HIDWORD(v37)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v36 + v37) = v33;
      unsigned int v24 = v37 + 1;
      LODWORD(v37) = v37 + 1;
      if (!v26) {
        break;
      }
      a3 += 2;
      --v26;
    }
    while (a3 != v25);
  }
  Impl = llvm::MDTuple::getImpl((uint64_t)v13, v36, v24, 0, 1);
  llvm::Instruction::setMetadata(a2, 2, Impl);
  if (v36 != v38) {
    free(v36);
  }
}

void llvm::createPGOFuncNameMetadata(llvm::Value *a1, unsigned __int8 *a2, size_t a3)
{
  Name = llvm::Value::getName(a1);
  if ((a3 != v7 || a3 && memcmp(a2, Name, a3)) && !llvm::Value::getMetadata((uint64_t)a1, "PGOFuncName", 0xBuLL))
  {
    Context = (uint64_t *)llvm::Function::getContext(a1);
    uint64_t v10 = llvm::MDString::get(Context, a2, a3);
    Impl = llvm::MDTuple::getImpl((uint64_t)Context, &v10, 1, 0, 1);
    llvm::Value::setMetadata((uint64_t)a1, "PGOFuncName", 0xBuLL, Impl);
  }
}

BOOL llvm::needsComdatForCounter(llvm *this, const llvm::Function *a2, const llvm::Module *a3)
{
  if (*((void *)this + 6)) {
    return 1;
  }
  __int16 v7 = 260;
  uint64_t v6 = (char *)a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v6);
  unsigned int v5 = (v10 > 9) | (0xDFu >> v10);
  if (v9 < 0) {
    operator delete(__p);
  }
  return (v5 & 1) != 0 && (*((_DWORD *)this + 8) & 7) == 1;
}

uint64_t llvm::isIRPGOFlagSet(llvm *this, const llvm::Module *a2)
{
  uint64_t result = llvm::Module::getGlobalVariable((uint64_t)this, "__llvm_profile_raw_version", 0x1AuLL, 1);
  if (result)
  {
    unsigned int v3 = (llvm::GlobalValue *)result;
    if ((*(_DWORD *)(result + 32) & 0xFu) - 7 < 2) {
      return 0;
    }
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)result)) {
      return 1;
    }
    if (!llvm::GlobalValue::isDeclaration(v3) && (uint64_t v4 = *((void *)v3 - 4)) != 0 && *(unsigned char *)(v4 + 16) == 16)
    {
      unsigned int v5 = (uint64_t *)(v4 + 24);
      if (*(_DWORD *)(v4 + 32) >= 0x41u) {
        unsigned int v5 = (uint64_t *)*v5;
      }
      return *((unsigned char *)v5 + 7) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::createProfileFileNameVar(uint64_t *a1, char *a2, llvm::Type *a3)
{
  if (a3)
  {
    uint64_t v4 = a1 + 27;
    String = llvm::ConstantDataArray::getString(*a1, a2, a3, 1);
    uint64_t v6 = llvm::User::operator new((llvm::User *)0x58, 1u);
    __int16 v7 = *(llvm::PointerType **)String;
    __p[0] = "__llvm_profile_filename";
    __int16 v14 = 259;
    llvm::GlobalVariable::GlobalVariable(v6, (uint64_t)a1, v7, 1, 4, (unint64_t)String, (const char **)__p, 0, 0, 0, 0);
    __int16 v11 = 260;
    unsigned int v10 = v4;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v10);
    if (v15 > 9 || ((1 << v15) & 0x320) == 0)
    {
      int v8 = *((_DWORD *)v6 + 8);
      *((_DWORD *)v6 + 8) = v8 & 0xFFFFFFF0;
      if ((v8 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) == 0) {
        *((_DWORD *)v6 + 8) |= 0x4000u;
      }
      inserted = llvm::Module::getOrInsertComdat((uint64_t)a1, "__llvm_profile_filename", 0x17uLL);
      llvm::GlobalObject::setComdat((llvm::GlobalObject *)v6, (llvm::Comdat *)inserted);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t llvm::IndexedInstrProf::Header::formatVersion(llvm::IndexedInstrProf::Header *this)
{
  return *((void *)this + 1);
}

__n128 llvm::IndexedInstrProf::Header::readFromBuffer@<Q0>(llvm::IndexedInstrProf::Header *this@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)this != 0x8169666F72706CFFLL) {
    operator new();
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 0xFFFFFFFFFFFFFFuLL) >= 9) {
    operator new();
  }
  if ((v4 & 0xFFFFFFFFFFFFFFLL) == 8) {
    uint64_t v3 = *((void *)this + 5);
  }
  *(unsigned char *)(a2 + 48) &= ~1u;
  *(void *)a2 = 0x8169666F72706CFFLL;
  *(void *)(a2 + 8) = v4;
  __n128 result = *(__n128 *)((char *)this + 24);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t llvm::IndexedInstrProf::Header::size(llvm::IndexedInstrProf::Header *this)
{
  if ((*((void *)this + 1) & 0xFFFFFFFFFFFFFFLL) == 8) {
    return 48;
  }
  else {
    return 40;
  }
}

uint64_t sub_1CD74D44C(uint64_t a1)
{
  *(void *)a1 = &unk_1F263C370;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD74D49C(uint64_t a1)
{
  *(void *)a1 = &unk_1F263C370;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD74D50C(uint64_t a1, llvm::raw_ostream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(__p);
  if (v6 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if (v6 >= 0) {
    size_t v4 = v6 & 0x7F;
  }
  else {
    size_t v4 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(a2, (const char *)v3, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_1CD74D594(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!atomic_load_explicit(&qword_1EA61DF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61DF08, (void *(*)(void))sub_1CCCDE3CC, (void (*)(void *))sub_1CCCDE414);
  }
  return v1;
}

void *sub_1CD74D5FC()
{
  return &llvm::InstrProfError::ID;
}

BOOL sub_1CD74D608(uint64_t a1, void *a2)
{
  return a2 == &llvm::InstrProfError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void sub_1CD74D628(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    unsigned int v5 = (void *)a1[1];
    unsigned int v15 = a1 + 2;
    uint64_t v6 = 3 * a2;
    __int16 v7 = (char *)operator new(24 * a2);
    int v8 = &v7[8 * v6];
    char v9 = (char *)v5 + (void)v7 - v3;
    if (v5 == (void *)v3)
    {
      int64x2_t v11 = vdupq_n_s64(v3);
      unsigned int v10 = (void *)((char *)v5 + (void)v7 - v3);
    }
    else
    {
      unsigned int v10 = (void *)((char *)v5 + (void)v7 - v3);
      do
      {
        v5 -= 3;
        unsigned int v10 = sub_1CD46E850(v10 - 3, v5);
      }
      while (v5 != (void *)v3);
      int64x2_t v11 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
    }
    *a1 = (unint64_t)v10;
    a1[1] = (unint64_t)v9;
    int64x2_t v13 = v11;
    a1[2] = (unint64_t)v8;
    unint64_t v14 = v2;
    std::string __p = (void *)v11.i64[0];
    sub_1CCCDE33C(&__p, v11.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1CD74D720(int **a1, _WORD *a2, long long *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCF0198, 0, 0);
  dword_1EBCF0218 = 0;
  qword_1EBCF0220 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCF0228 = 0;
  qword_1EBCF0198 = (uint64_t)&unk_1F2643F00;
  qword_1EBCF0230 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCF0238 = (uint64_t)&unk_1F25EA168;
  qword_1EBCF0250 = (uint64_t)&qword_1EBCF0238;
  llvm::cl::Option::setArgStr(v6, "static-func-strip-dirname-prefix", 0x20uLL);
  dword_1EBCF0218 = **a1;
  byte_1EBCF022C = 1;
  dword_1EBCF0228 = dword_1EBCF0218;
  word_1EBCF01A2 = (32 * (*a2 & 3)) | word_1EBCF01A2 & 0xFF9F;
  xmmword_1EBCF01B8 = *a3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF0198);
}

llvm *llvm::IndexedInstrProfReader::create@<X0>(llvm::IndexedInstrProfReader *this@<X0>, const llvm::Twine *a2@<X1>, llvm::vfs::FileSystem *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  __n128 result = sub_1CCCE1918(this, (uint64_t)a2, (uint64_t)&v21);
  char v9 = v22;
  if (v22)
  {
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13)
    {
      *(unsigned char *)(a4 + 8) |= 1u;
      *(void *)a4 = v13;
      return result;
    }
  }
  llvm::Twine::str(a3, __p);
  unsigned int v10 = (void *)(v18 & 0x7F);
  if (v18 < 0) {
    unsigned int v10 = __p[1];
  }
  if (!v10
    || (v16 = 260, unsigned int v15 = __p, sub_1CCCE1918((llvm::Twine *)&v15, (uint64_t)a2, (uint64_t)&v19), v11 = v19, (v20 & 1) == 0)
    || !v19)
  {
    uint64_t v12 = v21;
    uint64_t v21 = 0;
    uint64_t v14 = v12;
    llvm::IndexedInstrProfReader::create((uint64_t)&v14);
  }
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v11;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  __n128 result = (llvm *)v21;
  if ((v9 & 1) == 0)
  {
    if (!v21) {
      return result;
    }
    return (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  if (v21) {
    return (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  return result;
}

std::string *sub_1CD74DA30@<X0>(std::string *__str@<X2>, uint64_t a2@<X0>, int a3@<W1>, void *a4@<X8>)
{
  *(_DWORD *)(a2 + 8) = a3;
  __n128 result = std::string::operator=((std::string *)(a2 + 16), __str);
  if (a3) {
    operator new();
  }
  *a4 = 0;
  return result;
}

void sub_1CD74DADC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)(a1 + 8) = 0;
  std::string::operator=((std::string *)(a1 + 16), &__str);
  *a2 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1CD74DB30(uint64_t a1, char **a2)
{
  unint64_t v2 = *a2;
  v3[0] = a1;
  *a2 = 0;
  sub_1CCCE6F18(&v2, v3);
  if (v2) {
    (*(void (**)(char *))(*(void *)v2 + 8))(v2);
  }
  operator new();
}

uint64_t llvm::InstrProfLookupTrait::readValueProfilingData(llvm::InstrProfLookupTrait *this, unsigned int **a2, const unsigned __int8 *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  llvm::ValueProfData::getValueProfData(*a2, (unint64_t)a3, *((_DWORD *)this + 8), (uint64_t)&v8);
  char v5 = v9;
  uint64_t v6 = v8;
  if ((v9 & 1) != 0 && v8)
  {
    (*(void (**)(llvm::ValueProfData *))(*(void *)v8 + 8))(v8);
    return 0;
  }
  else
  {
    llvm::ValueProfData::deserializeTo(v8, (llvm::InstrProfRecord *)(*((void *)this + 1) - 56), 0);
    *a2 = (unsigned int *)((char *)*a2 + *(unsigned int *)v6);
    if (v5) {
      (*(void (**)(llvm::ValueProfData *))(*(void *)v6 + 8))(v6);
    }
    else {
      operator delete(v6);
    }
    return 1;
  }
}

uint64_t llvm::InstrProfLookupTrait::ReadData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v29 = a4;
  if ((a5 & 7) != 0) {
    return 0;
  }
  int v8 = a4;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  while (v12 != v13)
    uint64_t v12 = sub_1CD69825C(v12 - 56);
  *(void *)(a1 + 8) = v13;
  std::string __p = 0;
  int v27 = 0;
  unint64_t v28 = 0;
  if (a5 >= 1)
  {
    uint64_t v14 = &v8[a5];
    uint64_t v15 = ((unint64_t)a5 >> 3) - 1;
    do
    {
      __int16 v16 = v8 + 8;
      if (v8 + 8 >= v14) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)v8;
      uint64_t v29 = v8 + 8;
      if (*(_DWORD *)(a1 + 28) == 1)
      {
        unint64_t v18 = v15;
      }
      else
      {
        uint64_t v19 = v8 + 16;
        if (v8 + 16 > v14) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)v16;
        uint64_t v29 = v19;
        __int16 v16 = v19;
      }
      if (&v16[8 * v18] > v14)
      {
LABEL_24:
        uint64_t v5 = 0;
        goto LABEL_25;
      }
      int v27 = (char *)__p;
      sub_1CBF7ACFC((uint64_t)&__p, v18);
      if (v18)
      {
        char v20 = v27;
        do
        {
          unint64_t v22 = *(void *)v16;
          v16 += 8;
          unint64_t v21 = v22;
          unint64_t v25 = v22;
          if ((unint64_t)v20 >= v28)
          {
            char v20 = sub_1CC1533E4((char **)&__p, &v25);
          }
          else
          {
            *(void *)char v20 = v21;
            v20 += 8;
          }
          int v27 = v20;
          --v18;
        }
        while (v18);
      }
      uint64_t v29 = v16;
      sub_1CD74DF20((uint64_t *)a1, a2, a3, v17, (uint64_t)&__p);
      if (*(_DWORD *)(a1 + 28) > 2u)
      {
        if (!llvm::InstrProfLookupTrait::readValueProfilingData((llvm::InstrProfLookupTrait *)a1, (unsigned int **)&v29, v14))
        {
          uint64_t v24 = *(void *)a1;
          for (uint64_t i = *(void *)(a1 + 8); i != v24; uint64_t i = sub_1CD69825C(i - 56))
            ;
          uint64_t v5 = 0;
          *(void *)(a1 + 8) = v24;
          goto LABEL_25;
        }
        __int16 v16 = v29;
      }
      int v8 = v16;
    }
    while (v16 < v14);
  }
  uint64_t v5 = *(void *)a1;
LABEL_25:
  if (__p)
  {
    int v27 = (char *)__p;
    operator delete(__p);
  }
  return v5;
}

uint64_t sub_1CD74DF20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a1[1];
  if (v6 >= a1[2])
  {
    uint64_t result = sub_1CCCE8360(a1, a2, a3, a4, (long long *)a5);
  }
  else
  {
    uint64_t v7 = *(void *)(a5 + 16);
    long long v8 = *(_OWORD *)a5;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    *(_OWORD *)unint64_t v6 = v8;
    *(void *)(v6 + 16) = v7;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = a2;
    *(void *)(v6 + 40) = a3;
    uint64_t result = v6 + 56;
    *(void *)(v6 + 48) = a4;
  }
  a1[1] = result;
  return result;
}

void llvm::IndexedInstrProfReader::readHeader(llvm::IndexedInstrProfReader *this@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *(llvm::IndexedInstrProf::Header **)(v4 + 8);
  if ((uint64_t)(*(void *)(v4 + 16) - (void)v5) <= 23)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_1CD74DA30(&__p, (uint64_t)this, 8, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __n128 v6 = llvm::IndexedInstrProf::Header::readFromBuffer(v5, (uint64_t)v12);
    if ((v13 & 1) == 0)
    {
      char v9 = (_DWORD *)((char *)v5 + llvm::IndexedInstrProf::Header::size((llvm::IndexedInstrProf::Header *)v12));
      int v10 = llvm::IndexedInstrProf::Header::formatVersion((llvm::IndexedInstrProf::Header *)v12);
      llvm::IndexedInstrProfReader::readSummary((uint64_t)this, v10, v9);
    }
    uint64_t v7 = v12[0];
    v12[0] = 0;
    *a2 = v7;
    if (v13)
    {
      uint64_t v8 = v12[0];
      v12[0] = 0;
      if (v8) {
        (*(void (**)(uint64_t, __n128))(*(void *)v8 + 8))(v8, v6);
      }
    }
  }
}

void sub_1CD74E4A8()
{
}

uint64_t llvm::IndexedInstrProfReader::getInstrProfRecord@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 72) + 24))(&v12);
  uint64_t v6 = v12;
  if (v12)
  {
    uint64_t v12 = 0;
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v6;
  }
  else if (v14)
  {
    uint64_t v8 = v13;
    uint64_t v9 = 56 * v14;
    while (*(void *)(v8 + 48) != a2)
    {
      v8 += 56;
      v9 -= 56;
      if (!v9) {
        goto LABEL_7;
      }
    }
    *(unsigned char *)(a3 + 32) &= ~1u;
    sub_1CD74F1DC((void *)a3, v8);
  }
  else
  {
LABEL_7:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_1CD74DA30(&__p, a1, 15, &v11);
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v11;
    uint64_t v11 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t result = v12;
  if (v12) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return result;
}

char *llvm::IndexedInstrProfReader::readNextRecord@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 64) + 16))(&v10);
  if (v10) {
    sub_1CD74DB30(a1, &v10);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 288) = v6 + 1;
  uint64_t v7 = v11 + 56 * v6;
  sub_1CD74EAC8((void *)a2, v7);
  long long v8 = *(_OWORD *)(v7 + 32);
  *(void *)(a2 + 48) = *(void *)(v7 + 48);
  *(_OWORD *)(a2 + 32) = v8;
  if (v12 <= *(unsigned int *)(a1 + 288))
  {
    (*(void (**)(void))(**(void **)(a1 + 64) + 32))(*(void *)(a1 + 64));
    *(_DWORD *)(a1 + 288) = 0;
  }
  sub_1CD74DADC(a1, a3);
  uint64_t result = v10;
  if (v10) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)v10 + 8))(v10);
  }
  return result;
}

uint64_t sub_1CD74E7C4()
{
  return 0;
}

void sub_1CD74E7D0(void *a1)
{
  sub_1CCCE81C8(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD74E808(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))();
}

uint64_t sub_1CD74E830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 72))();
}

uint64_t sub_1CD74E858(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 80))();
}

uint64_t sub_1CD74E880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 88))();
}

uint64_t sub_1CD74E8A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 96))();
}

uint64_t sub_1CD74E8D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 104))();
}

uint64_t sub_1CD74E8F8(void *a1, void *a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::InstrProfError::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = *a3;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
    std::string::operator=((std::string *)(v8 + 16), (const std::string *)(v7 + 16));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v7 = 0;
  }
  *a1 = v7;
  return result;
}

uint64_t sub_1CD74E9B4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1CB833A08(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1CD74EA04(uint64_t a1)
{
  unint64_t v2 = (char **)(a1 + 176);
  sub_1CD4D68AC((char **)(a1 + 360));
  sub_1CD74EA50(v2);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

char **sub_1CD74EA50(char **a1)
{
  unint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 168 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 168];
      if (&v2[v4 - 152] != v5) {
        free(v5);
      }
      v4 -= 168;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void *sub_1CD74EAC8(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2) {
    sub_1CBFAFDE4(a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  uint64_t v5 = (uint64_t *)a1[3];
  if (v4)
  {
    if (!v5) {
      operator new();
    }
    sub_1CD74EB84(v5, v4);
  }
  else
  {
    a1[3] = 0;
    if (v5)
    {
      uint64_t v7 = sub_1CD698204((void **)v5);
      MEMORY[0x1D25D9CE0](v7, 0x20C40A759441BLL);
    }
  }
  return a1;
}

uint64_t *sub_1CD74EB84(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_1CCCE7D6C(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    sub_1CCCE7D6C(a1 + 3, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 3));
  }
  return a1;
}

void *sub_1CD74EBF8(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CCCE7C5C(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1CCCE7C5C(a1 + 3, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 3));
  return a1;
}

void sub_1CD74EC70(void **a1)
{
  if (*a1)
  {
    sub_1CCB49618(a1, *a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1CD74ECAC(uint64_t a1)
{
  *(void *)a1 = &unk_1F263C688;
  unint64_t v2 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    uint64_t v4 = sub_1CD5DF60C(v2);
    MEMORY[0x1D25D9CE0](v4, 0x10F0C40767211C4);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t *sub_1CD74ED24(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    do
    {
      *(_OWORD *)(v4 - 56) = 0uLL;
      v4 -= 56;
      *(void *)(v4 + 16) = 0;
      long long v5 = *(_OWORD *)(v2 - 56);
      v2 -= 56;
      *(_OWORD *)uint64_t v4 = v5;
      *(void *)(v4 + 16) = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      *(_OWORD *)uint64_t v2 = 0uLL;
      *(_OWORD *)(v2 + 16) = 0uLL;
      *(void *)(v4 + 24) = v6;
      long long v7 = *(_OWORD *)(v2 + 32);
      *(void *)(v4 + 48) = *(void *)(v2 + 48);
      *(_OWORD *)(v4 + 32) = v7;
    }
    while (v2 != v3);
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_1CD74EDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1F263C700;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a5;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = a5;
  int v10 = 1;
  operator new();
}

uint64_t sub_1CD74EED0@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  if ((*(unsigned int (**)(void *))(*a1 + 40))(a1)) {
    operator new();
  }
  uint64_t v6 = a1[2] + 2 * (a1[3] == 0);
  uint64_t result = llvm::InstrProfLookupTrait::ReadData(a1[5], v6 + 24, *(void *)(v6 + 8), (unsigned __int8 *)(v6 + 24 + *(void *)(v6 + 8)), *(void *)(v6 + 16));
  *a2 = result;
  a2[1] = v8;
  if (!v8)
  {
    int v9 = 9;
    sub_1CCCDE0CC();
  }
  *a3 = 0;
  return result;
}

uint64_t sub_1CD74EFDC@<X0>(int *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, void *a4@<X3>, void *a5@<X8>)
{
  sub_1CD74F254(v9, *(void **)(a3 + 8), __src, __n);
  if (!v10) {
    operator new();
  }
  uint64_t result = llvm::InstrProfLookupTrait::ReadData(v12, v9[0], v9[1], v10, v11);
  *a4 = result;
  a4[1] = v8;
  if (!v8)
  {
    int v13 = 9;
    sub_1CCCDE0CC();
  }
  *a5 = 0;
  return result;
}

void *sub_1CD74F0B8(void *result)
{
  uint64_t v2 = (unsigned __int16 *)result[2];
  uint64_t v1 = result[3];
  if (!v1)
  {
    unsigned int v3 = *v2++;
    uint64_t v1 = v3;
    result[3] = v3;
  }
  result[2] = v2 + 4;
  uint64_t v4 = *((void *)v2 + 1);
  result[2] = v2 + 8;
  result[2] = (char *)v2 + *((void *)v2 + 2) + v4 + 24;
  result[3] = v1 - 1;
  --result[4];
  return result;
}

BOOL sub_1CD74F104(uint64_t a1)
{
  return *(void *)(a1 + 32) == 0;
}

uint64_t sub_1CD74F114(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 8) + 64) = a2;
  return result;
}

uint64_t sub_1CD74F120(uint64_t a1)
{
  return *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFLL;
}

uint64_t sub_1CD74F12C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 55) & 1;
}

uint64_t sub_1CD74F138(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 55) >> 1) & 1;
}

uint64_t sub_1CD74F144(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 55) >> 2) & 1;
}

uint64_t sub_1CD74F150(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 55) >> 4) & 1;
}

uint64_t sub_1CD74F15C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 55) >> 5) & 1;
}

uint64_t sub_1CD74F168(uint64_t a1)
{
  return (*(void *)(a1 + 48) >> 54) & 8 | (*(void *)(a1 + 48) >> 55) & 2 | HIBYTE(*(void *)(a1 + 48)) & 0x74;
}

void *sub_1CD74F194@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int16 **)(v3 + 8);
  v6[0] = *(unsigned __int16 **)(v3 + 72);
  v6[1] = 0;
  void v6[2] = v4;
  v6[3] = (unsigned __int16 *)(v3 + 32);
  long long v7 = 0u;
  long long v8 = 0u;
  return sub_1CD74F3E0(a3, a2, v6);
}

void *sub_1CD74F1DC(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1CBFCBA2C(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (*(void *)(a2 + 24)) {
    operator new();
  }
  a1[3] = 0;
  return a1;
}

double sub_1CD74F254(void *a1, void *a2, int *__src, size_t __n)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v10 = xmmword_1CFAC4320;
  uint64_t v11 = 0;
  llvm::MD5::update((int *)&v10, __src, __n);
  llvm::MD5::final((int *)&v10, (int *)&v9);
  return sub_1CD74F300(a1, a2, __src, __n, v9);
}

double sub_1CD74F300(void *a1, void *a2, void *__s2, size_t __n, uint64_t a5)
{
  uint64_t v6 = *(void *)(a2[2] + 8 * ((*a2 - 1) & a5));
  if (v6 && (v7 = (_WORD *)(a2[3] + v6), int v8 = (unsigned __int16)*v7, *v7))
  {
    uint64_t v12 = a2 + 4;
    int v13 = v7 + 1;
    while (1)
    {
      uint64_t v14 = v13[1];
      uint64_t v15 = v13[2];
      __int16 v16 = v13 + 3;
      BOOL v17 = *v13 == a5 && v14 == __n;
      if (v17 && (!__n || !memcmp(v13 + 3, __s2, __n))) {
        break;
      }
      int v13 = (void *)((char *)v16 + v15 + v14);
      if (!--v8) {
        goto LABEL_13;
      }
    }
    *a1 = v16;
    a1[1] = __n;
    a1[2] = (char *)v16 + __n;
    a1[3] = v15;
    a1[4] = v12;
  }
  else
  {
LABEL_13:
    a1[4] = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void *sub_1CD74F3E0(void *a1, uint64_t *a2, unsigned __int16 **a3)
{
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[6];
  int64_t v7 = (char *)v6 - (char *)v5;
  if (v6 == v5)
  {
LABEL_8:
    double result = sub_1CD5DF87C(a2);
    *a1 = 0;
  }
  else
  {
    uint64_t v9 = *a3;
    int v8 = a3[1];
    while (1)
    {
      double result = sub_1CD74C38C((uint64_t)a2, (unsigned __int8 *)&v9[(v8 == 0) + 12], *(void *)&v9[(v8 == 0) + 4], a1);
      if (*a1) {
        break;
      }
      if (!v8)
      {
        unsigned int v11 = *v9++;
        int v8 = (unsigned __int16 *)v11;
      }
      uint64_t v9 = (unsigned __int16 *)((char *)v9 + *((void *)v9 + 2) + *((void *)v9 + 1) + 24);
      int v8 = (unsigned __int16 *)((char *)v8 - 1);
      if (__CFADD__(v7++, 1)) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

void *sub_1CD74F480(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CD74F500((uint64_t)a1, a2);
  }
  a1[23] = a1 + 25;
  a1[24] = 0x100000000;
  if (*(_DWORD *)(a2 + 192)) {
    sub_1CD74F88C((uint64_t)(a1 + 23), a2 + 184);
  }
  return a1;
}

uint64_t sub_1CD74F500(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v14 = *(void *)a2;
        uint64_t v15 = *(void *)a2 + 168 * v4;
        uint64_t v16 = *(void *)a1;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v16, v14);
          long long v18 = *(_OWORD *)(v14 + 80);
          long long v17 = *(_OWORD *)(v14 + 96);
          *(_OWORD *)(v16 + 64) = *(_OWORD *)(v14 + 64);
          *(_OWORD *)(v16 + 80) = v18;
          *(_OWORD *)(v16 + 96) = v17;
          long long v20 = *(_OWORD *)(v14 + 128);
          long long v19 = *(_OWORD *)(v14 + 144);
          long long v21 = *(_OWORD *)(v14 + 112);
          *(void *)(v16 + 160) = *(void *)(v14 + 160);
          *(_OWORD *)(v16 + 128) = v20;
          *(_OWORD *)(v16 + 144) = v19;
          *(_OWORD *)(v16 + 112) = v21;
          v16 += 168;
          v14 += 168;
        }
        while (v14 != v15);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        uint64_t v22 = *(void *)a1;
      }
      else
      {
        uint64_t v22 = *(void *)a1;
        uint64_t v16 = *(void *)a1;
      }
      uint64_t v23 = v22 + 168 * v5;
      while (v23 != v16)
      {
        unint64_t v25 = *(void **)(v23 - 168);
        v23 -= 168;
        uint64_t v24 = v25;
        if ((void *)(v23 + 16) != v25) {
          free(v24);
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v26 = *(void *)a1;
          uint64_t v27 = 168 * v5;
          do
          {
            unint64_t v28 = *(void **)(v26 + v27 - 168);
            if ((void *)(v26 + v27 - 152) != v28) {
              free(v28);
            }
            v27 -= 168;
          }
          while (v27);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1CD74F738();
      }
      if (v5)
      {
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *(void *)a2 + 168 * v5;
        uint64_t v8 = *(void *)a1;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v8, v6);
          long long v10 = *(_OWORD *)(v6 + 80);
          long long v9 = *(_OWORD *)(v6 + 96);
          *(_OWORD *)(v8 + 64) = *(_OWORD *)(v6 + 64);
          *(_OWORD *)(v8 + 80) = v10;
          *(_OWORD *)(v8 + 96) = v9;
          long long v12 = *(_OWORD *)(v6 + 128);
          long long v11 = *(_OWORD *)(v6 + 144);
          long long v13 = *(_OWORD *)(v6 + 112);
          *(void *)(v8 + 160) = *(void *)(v6 + 160);
          *(_OWORD *)(v8 + 128) = v12;
          *(_OWORD *)(v8 + 144) = v11;
          *(_OWORD *)(v8 + 112) = v13;
          v6 += 168;
          v8 += 168;
        }
        while (v6 != v7);
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v29 = *(unsigned int *)(a2 + 8);
      if (v5 != v29)
      {
        uint64_t v31 = *(void *)a2;
        uint64_t v32 = *(void *)a1;
        uint64_t v33 = 168 * v5;
        uint64_t v34 = 168 * v29;
        do
        {
          uint64_t v35 = v32 + v33;
          uint64_t v36 = v31 + v33;
          *(void *)uint64_t v35 = v32 + v33 + 16;
          *(void *)(v35 + 8) = 0x600000000;
          if (*(_DWORD *)(v31 + v33 + 8)) {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v32 + v33, v31 + v33);
          }
          v31 += 168;
          long long v37 = *(_OWORD *)(v36 + 64);
          long long v38 = *(_OWORD *)(v36 + 96);
          *(_OWORD *)(v35 + 80) = *(_OWORD *)(v36 + 80);
          *(_OWORD *)(v35 + 96) = v38;
          *(_OWORD *)(v35 + 64) = v37;
          long long v39 = *(_OWORD *)(v36 + 112);
          long long v40 = *(_OWORD *)(v36 + 128);
          long long v41 = *(_OWORD *)(v36 + 144);
          *(void *)(v35 + 160) = *(void *)(v36 + 160);
          *(_OWORD *)(v35 + 128) = v40;
          *(_OWORD *)(v35 + 144) = v41;
          *(_OWORD *)(v35 + 112) = v39;
          v32 += 168;
          v34 -= 168;
        }
        while (v33 != v34);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1CD74F738()
{
}

void sub_1CD74F7A8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = 168 * v2;
    do
    {
      *(void *)a2 = a2 + 16;
      *(void *)(a2 + 8) = 0x600000000;
      if (*(_DWORD *)(v5 + 8)) {
        sub_1CD41C56C(a2, v5);
      }
      long long v7 = *(_OWORD *)(v5 + 64);
      long long v8 = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(a2 + 96) = v8;
      *(_OWORD *)(a2 + 64) = v7;
      long long v9 = *(_OWORD *)(v5 + 112);
      long long v10 = *(_OWORD *)(v5 + 128);
      long long v11 = *(_OWORD *)(v5 + 144);
      *(void *)(a2 + 160) = *(void *)(v5 + 160);
      *(_OWORD *)(a2 + 128) = v10;
      *(_OWORD *)(a2 + 144) = v11;
      *(_OWORD *)(a2 + 112) = v9;
      v5 += 168;
      a2 += 168;
      v6 -= 168;
    }
    while (v6);
    unsigned int v12 = *(_DWORD *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = 168 * v12;
      do
      {
        uint64_t v15 = *(void **)(v13 + v14 - 168);
        if ((void *)(v13 + v14 - 152) != v15) {
          free(v15);
        }
        v14 -= 168;
      }
      while (v14);
    }
  }
}

uint64_t sub_1CD74F88C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = *(void *)a1;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v11 + v9, v10 + v9);
          v9 += 64;
        }
        while (v4 << 6 != v9);
        uint64_t v5 = *(unsigned int *)(a1 + 8);
        uint64_t v12 = *(void *)a1;
        uint64_t v13 = v11 + v9;
      }
      else
      {
        uint64_t v12 = *(void *)a1;
        uint64_t v13 = *(void *)a1;
      }
      uint64_t v14 = v12 + (v5 << 6);
      while (v14 != v13)
      {
        uint64_t v16 = *(void **)(v14 - 64);
        v14 -= 64;
        uint64_t v15 = v16;
        if ((void *)(v14 + 16) != v16) {
          free(v15);
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v17 = *(void *)a1;
          uint64_t v18 = v5 << 6;
          do
          {
            long long v19 = *(void **)(v17 + v18 - 64);
            if ((void *)(v17 + v18 - 48) != v19) {
              free(v19);
            }
            v18 -= 64;
          }
          while (v18);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1CD74FA34();
      }
      if (v5)
      {
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *(void *)a1;
        uint64_t v8 = v5 << 6;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v7, v6);
          v6 += 64;
          v7 += 64;
          v8 -= 64;
        }
        while (v8);
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        uint64_t v22 = *(void *)a2;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = v5 << 6;
        uint64_t v25 = v20 << 6;
        do
        {
          uint64_t v26 = (void *)(v23 + v24);
          *uint64_t v26 = v23 + v24 + 16;
          v26[1] = 0x600000000;
          if (*(_DWORD *)(v22 + v24 + 8)) {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v26, v22 + v24);
          }
          v23 += 64;
          v25 -= 64;
          v22 += 64;
        }
        while (v24 != v25);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1CD74FA34()
{
}

void sub_1CD74FAA4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = v2 << 6;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x600000000;
      if (*(_DWORD *)(v5 + 8)) {
        sub_1CD41C56C((uint64_t)a2, v5);
      }
      v5 += 64;
      a2 += 8;
      v6 -= 64;
    }
    while (v6);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = v7 << 6;
      do
      {
        uint64_t v10 = *(void **)(v8 + v9 - 64);
        if ((void *)(v8 + v9 - 48) != v10) {
          free(v10);
        }
        v9 -= 64;
      }
      while (v9);
    }
  }
}

void sub_1CD74FB5C(void *a1)
{
  sub_1CD74FF14(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD74FB94(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + 16);
  llvm::SymbolRemappingReader::read((llvm::SymbolRemappingReader *)(a1 + 16), *(llvm::MemoryBuffer **)(a1 + 8), a2);
  if (!*a2)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(unsigned __int16 **)(v5 + 72);
      do
      {
        uint64_t v9 = (char *)sub_1CD74FF98((uint64_t)&v8[(v7 == 0) + 12], *(void *)&v8[(v7 == 0) + 4]);
        unint64_t v11 = v10;
        uint64_t v12 = llvm::ItaniumManglingCanonicalizer::canonicalize(v4, v9, v10);
        if (v12)
        {
          uint64_t v15 = v12;
          *(void *)&long long v16 = v9;
          *((void *)&v16 + 1) = v11;
          sub_1CD75006C(a1 + 24, &v15, &v16, (uint64_t)&v14);
        }
        if (!v7)
        {
          unsigned int v13 = *v8++;
          uint64_t v7 = v13;
        }
        uint64_t v8 = (unsigned __int16 *)((char *)v8 + *((void *)v8 + 2) + *((void *)v8 + 1) + 24);
        --v7;
        --v6;
      }
      while (v6);
    }
    *a2 = 0;
  }
}

void sub_1CD74FC98(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v7 = (char *)a2;
  v29[32] = *MEMORY[0x1E4F143B8];
  unint64_t v10 = (char *)sub_1CD74FF98(a2, a3);
  uint64_t v12 = v11;
  uint64_t v13 = llvm::ItaniumManglingCanonicalizer::lookup((uint64_t *)(a1 + 16), v10, v11);
  if (!v13) {
    goto LABEL_8;
  }
  int v14 = *(_DWORD *)(a1 + 40);
  if (!v14) {
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)(a1 + 24);
  int v16 = v14 - 1;
  unsigned int v17 = v16 & (37 * v13);
  uint64_t v18 = (uint64_t *)(v15 + 24 * v17);
  uint64_t v19 = *v18;
  if (v13 != *v18)
  {
    int v23 = 1;
    while (v19 != -1)
    {
      unsigned int v24 = v17 + v23++;
      unsigned int v17 = v24 & v16;
      uint64_t v18 = (uint64_t *)(v15 + 24 * v17);
      uint64_t v19 = *v18;
      if (v13 == *v18) {
        goto LABEL_4;
      }
    }
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v20 = v18[2];
  if (!v20)
  {
LABEL_8:
    (*(void (**)(void, char *, uint64_t, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v7, v6, a4);
    return;
  }
  long long v21 = (char *)v18[1];
  if (v10 == v7 && &v10[v12] == &v7[v6])
  {
    uint64_t v7 = (char *)v18[1];
    uint64_t v6 = v18[2];
    goto LABEL_8;
  }
  uint64_t v27 = v29;
  long long v28 = xmmword_1CD96DBF0;
  sub_1CD750104(v7, v6, v10, v12, v21, v20, (uint64_t *)&v27);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 48) + 24))(&v26);
  if (v26)
  {
    uint64_t v25 = v26;
    uint64_t v26 = 0;
    sub_1CCCE85F0(a5, &v25);
    if (v25) {
      (*(void (**)(void *))(*v25 + 8))(v25);
    }
    BOOL v22 = *a5 != 0;
    if (v26) {
      (*(void (**)(void *))(*v26 + 8))(v26);
    }
  }
  else
  {
    *a5 = 0;
    BOOL v22 = 1;
  }
  if (v27 != v29) {
    free(v27);
  }
  if (!v22) {
    goto LABEL_8;
  }
}

void sub_1CD74FF0C(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1CD74FF14(void *a1)
{
  *a1 = &unk_1F263C788;
  MEMORY[0x1D25D9CD0](a1[3], 8);
  llvm::ItaniumManglingCanonicalizer::~ItaniumManglingCanonicalizer((llvm::ItaniumManglingCanonicalizer *)(a1 + 2));
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

_WORD *sub_1CD74FF98(uint64_t a1, unint64_t a2)
{
  unint64_t v10 = (_WORD *)a1;
  unint64_t v11 = a2;
  while (1)
  {
    char v12 = 58;
    uint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, &v12, 1uLL, 0);
    if (v3 == -1)
    {
      unint64_t v9 = 0;
      uint64_t v8 = 0;
      double result = v10;
      unint64_t v6 = v11;
    }
    else
    {
      unint64_t v4 = v3;
      double result = v10;
      unint64_t v6 = v11 >= v4 ? v4 : v11;
      uint64_t v7 = v11 >= v4 + 1 ? v4 + 1 : v11;
      uint64_t v8 = (uint64_t)v10 + v7;
      unint64_t v9 = v11 - v7;
    }
    unint64_t v10 = (_WORD *)v8;
    unint64_t v11 = v9;
    if (v6 >= 2 && *result == 23135) {
      break;
    }
    if (!v9) {
      return (_WORD *)a1;
    }
  }
  return result;
}

uint64_t sub_1CD75006C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  char v12 = 0;
  uint64_t result = sub_1CD4F89F8((uint64_t *)a1, a2, &v12);
  unint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD4F8A9C(a1, (uint64_t)a2, a2, v12);
    unint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

char *sub_1CD750104(char *__src, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t *a7)
{
  if (a7[2] < (unint64_t)(a2 - a4 + a6)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  sub_1CCBEA54C(a7, *a7 + a7[1], __src, a3);
  sub_1CCBEA54C(a7, *a7 + a7[1], a5, &a5[a6]);
  uint64_t v14 = *a7 + a7[1];

  return sub_1CCBEA54C(a7, v14, &a3[a4], &__src[a2]);
}

char *llvm::ProfileSummaryBuilder::getEntryForPercentile(char **a1, unint64_t a2)
{
  uint64_t result = *a1;
  unint64_t v4 = a1[1];
  if (v4 != result)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - result) >> 3);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = (unsigned int *)&result[24 * (v5 >> 1)];
      unsigned int v9 = *v7;
      uint64_t v8 = (char *)(v7 + 6);
      v5 += ~(v5 >> 1);
      if (v9 < a2) {
        uint64_t result = v8;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  if (result == v4) {
    llvm::report_fatal_error((llvm *)"Desired percentile exceeds the maximum cutoff", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t **llvm::SampleProfileSummaryBuilder::addRecord(uint64_t **this, const llvm::sampleprof::FunctionSamples *a2, char a3)
{
  unint64_t v4 = (llvm::SampleProfileSummaryBuilder *)this;
  if (a3)
  {
    if ((*((unsigned char *)a2 + 52) & 4) != 0) {
      return this;
    }
  }
  else
  {
    ++*((_DWORD *)this + 25);
    unint64_t v5 = (uint64_t *)*((void *)a2 + 8);
    if (v5 > this[11]) {
      this[11] = v5;
    }
  }
  unint64_t v6 = (char *)*((void *)a2 + 9);
  uint64_t v7 = (char *)a2 + 80;
  if (v6 != (char *)a2 + 80)
  {
    do
    {
      this = sub_1CD7503A0((uint64_t)v4, *((void *)v6 + 5));
      uint64_t v8 = (char *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (char *)*((void *)v6 + 2);
          BOOL v10 = *(void *)v9 == (void)v6;
          unint64_t v6 = v9;
        }
        while (!v10);
      }
      unint64_t v6 = v9;
    }
    while (v9 != v7);
  }
  uint64_t v11 = (char *)*((void *)a2 + 12);
  char v12 = (char *)a2 + 104;
  if (v11 != v12)
  {
    do
    {
      uint64_t v13 = (char *)*((void *)v11 + 5);
      if (v13 != v11 + 48)
      {
        do
        {
          this = (uint64_t **)llvm::SampleProfileSummaryBuilder::addRecord(v4, (const llvm::sampleprof::FunctionSamples *)(v13 + 56), 1);
          uint64_t v14 = (char *)*((void *)v13 + 1);
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              uint64_t v14 = *(char **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (char *)*((void *)v13 + 2);
              BOOL v10 = *(void *)v15 == (void)v13;
              uint64_t v13 = v15;
            }
            while (!v10);
          }
          uint64_t v13 = v15;
        }
        while (v15 != v11 + 48);
      }
      int v16 = (char *)*((void *)v11 + 1);
      if (v16)
      {
        do
        {
          unsigned int v17 = v16;
          int v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unsigned int v17 = (char *)*((void *)v11 + 2);
          BOOL v10 = *(void *)v17 == (void)v11;
          uint64_t v11 = v17;
        }
        while (!v10);
      }
      uint64_t v11 = v17;
    }
    while (v17 != v12);
  }
  return this;
}

uint64_t **sub_1CD7503A0(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  unint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) += a2;
  if (v2 < a2) {
    *(void *)(a1 + 80) = a2;
  }
  ++*(_DWORD *)(a1 + 96);
  unint64_t v5 = (uint64_t **)&v4;
  uint64_t result = sub_1CD7508AC((uint64_t **)a1, &v4, (uint64_t)&std::piecewise_construct, &v5);
  ++*((_DWORD *)result + 10);
  return result;
}

uint64_t llvm::ProfileSummaryBuilder::computeDetailedSummary(llvm::ProfileSummaryBuilder *this)
{
  uint64_t result = *((void *)this + 3);
  if (result != *((void *)this + 4))
  {
    uint64_t result = std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (*((void *)this + 3) != *((void *)this + 4))
    {
      int v4 = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v3);
    }
  }
  return result;
}

uint64_t llvm::ProfileSummaryBuilder::getHotCountThreshold(char **a1)
{
  uint64_t v1 = llvm::ProfileSummaryBuilder::getEntryForPercentile(a1, dword_1EBD0ADA8) + 8;
  if (word_1EBD0B030) {
    uint64_t v1 = (char *)&xmmword_1EBD0B0A8;
  }
  return *(void *)v1;
}

uint64_t llvm::ProfileSummaryBuilder::getColdCountThreshold(char **a1)
{
  uint64_t v1 = llvm::ProfileSummaryBuilder::getEntryForPercentile(a1, dword_1EBD0AE68) + 8;
  if (word_1EBD0B0F8) {
    uint64_t v1 = (char *)&xmmword_1EBD0B170;
  }
  return *(void *)v1;
}

void llvm::SampleProfileSummaryBuilder::computeSummaryForProfiles(uint64_t **this, uint64_t a2)
{
  unint64_t v2 = (void **)a2;
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  if (byte_1EBD0ACE8
    || (llvm::sampleprof::FunctionSamples::ProfileIsCSFlat ? (BOOL v4 = word_1EBD0AC70 == 0) : (BOOL v4 = 0), v4))
  {
    unint64_t v5 = *(uint64_t **)(a2 + 16);
    if (v5)
    {
      do
      {
        long long v8 = *(_OWORD *)(v5 + 9);
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        uint64_t v15 = &v8;
        unint64_t v2 = __p;
        unint64_t v6 = sub_1CC9B3AE0((uint64_t)__p, (uint64_t)&v8, (uint64_t)&std::piecewise_construct, &v15);
        sub_1CD67DFD0((uint64_t)(v6 + 56), (uint64_t)(v5 + 7), 1uLL);
        unint64_t v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      unint64_t v2 = __p;
    }
  }
  for (uint64_t i = v2[2]; i; uint64_t i = (void *)*i)
    llvm::SampleProfileSummaryBuilder::addRecord(this, (const llvm::sampleprof::FunctionSamples *)(i + 7), 0);
  llvm::ProfileSummaryBuilder::computeDetailedSummary((llvm::ProfileSummaryBuilder *)this);
  LODWORD(v8) = 2;
  LODWORD(v15) = 0;
  sub_1CCCF0C64();
}

void llvm::InstrProfSummaryBuilder::getSummary(llvm::InstrProfSummaryBuilder *this)
{
}

uint64_t **sub_1CD7508AC(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 <= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 <= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x30uLL);
    v9[4] = **a4;
    *((_DWORD *)v9 + 10) = 0;
    char *v9 = 0;
    v9[1] = 0;
    uint64_t v9[2] = v11;
    char *v7 = (uint64_t *)v9;
    char v12 = (uint64_t *)**a1;
    long long v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      long long v13 = *v7;
    }
    sub_1CB8358B8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_1CD750994(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CD750994(a1, *a2);
    sub_1CD750994(a1, a2[1]);
    sub_1CCCF0E14((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void sub_1CD7509F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CD7509F4(a1, *a2);
    sub_1CD7509F4(a1, a2[1]);
    sub_1CD4AFD10((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

void sub_1CD750A50(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&UseContextLessSummary, 0, 0);
  byte_1EBD0ACE8 = 0;
  qword_1EBD0ACF0 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD0ACF8 = 0;
  UseContextLessSummary = (uint64_t)&unk_1F26440A0;
  qword_1EBD0AD00 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD0AD08 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD0AD20 = (uint64_t)&qword_1EBD0AD08;
  sub_1CD750B50(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&UseContextLessSummary);
}

__n128 sub_1CD750B50(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&UseContextLessSummary, "profile-summary-contextless", 0x1BuLL);
  word_1EBD0AC72 = word_1EBD0AC72 & 0xFF9F | (32 * (*a1 & 3));
  unint64_t v8 = *a2;
  byte_1EBD0ACE8 = **a2;
  byte_1EBD0ACF9 = 1;
  byte_1EBD0ACF8 = *v8;
  word_1EBD0AC72 = word_1EBD0AC72 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBD0AC88 = (__int128)*a4;
  return result;
}

void sub_1CD750BE8(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&ProfileSummaryCutoffHot, 0, 0);
  dword_1EBD0ADA8 = 0;
  qword_1EBD0ADB0 = (uint64_t)&unk_1F25F74C8;
  *(void *)&dword_1EBD0ADB8 = 0;
  ProfileSummaryCutoffHot = (uint64_t)&unk_1F2643F68;
  qword_1EBD0ADC0 = (uint64_t)&unk_1F2643D20;
  qword_1EBD0ADC8 = (uint64_t)&unk_1F25F7480;
  qword_1EBD0ADE0 = (uint64_t)&qword_1EBD0ADC8;
  sub_1CD750CE8(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileSummaryCutoffHot);
}

__n128 sub_1CD750CE8(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&ProfileSummaryCutoffHot, "profile-summary-cutoff-hot", 0x1AuLL);
  word_1EBD0AD32 = word_1EBD0AD32 & 0xFF9F | (32 * (*a1 & 3));
  unint64_t v8 = *a2;
  dword_1EBD0ADA8 = **a2;
  byte_1EBD0ADBC = 1;
  dword_1EBD0ADB8 = *v8;
  word_1EBD0AD32 = word_1EBD0AD32 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBD0AD48 = (__int128)*a4;
  return result;
}

void sub_1CD750D80(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&ProfileSummaryCutoffCold, 0, 0);
  dword_1EBD0AE68 = 0;
  qword_1EBD0AE70 = (uint64_t)&unk_1F25F74C8;
  *(void *)&dword_1EBD0AE78 = 0;
  ProfileSummaryCutoffCold = (uint64_t)&unk_1F2643F68;
  qword_1EBD0AE80 = (uint64_t)&unk_1F2643D20;
  qword_1EBD0AE88 = (uint64_t)&unk_1F25F7480;
  qword_1EBD0AEA0 = (uint64_t)&qword_1EBD0AE88;
  sub_1CD750E80(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileSummaryCutoffCold);
}

__n128 sub_1CD750E80(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&ProfileSummaryCutoffCold, "profile-summary-cutoff-cold", 0x1BuLL);
  word_1EBD0ADF2 = word_1EBD0ADF2 & 0xFF9F | (32 * (*a1 & 3));
  unint64_t v8 = *a2;
  dword_1EBD0AE68 = **a2;
  byte_1EBD0AE7C = 1;
  dword_1EBD0AE78 = *v8;
  word_1EBD0ADF2 = word_1EBD0ADF2 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBD0AE08 = (__int128)*a4;
  return result;
}

void sub_1CD750F18(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&ProfileSummaryHugeWorkingSetSizeThreshold, 0, 0);
  dword_1EBD0AF28 = 0;
  qword_1EBD0AF30 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBD0AF38 = 0;
  ProfileSummaryHugeWorkingSetSizeThreshold = (uint64_t)&unk_1F2643F00;
  qword_1EBD0AF40 = (uint64_t)&unk_1F2643DB0;
  qword_1EBD0AF48 = (uint64_t)&unk_1F25EA168;
  qword_1EBD0AF60 = (uint64_t)&qword_1EBD0AF48;
  sub_1CD751018(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileSummaryHugeWorkingSetSizeThreshold);
}

__n128 sub_1CD751018(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&ProfileSummaryHugeWorkingSetSizeThreshold, "profile-summary-huge-working-set-size-threshold", 0x2FuLL);
  word_1EBD0AEB2 = word_1EBD0AEB2 & 0xFF9F | (32 * (*a1 & 3));
  dword_1EBD0AF28 = **a2;
  byte_1EBD0AF3C = 1;
  dword_1EBD0AF38 = dword_1EBD0AF28;
  word_1EBD0AEB2 = word_1EBD0AEB2 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBD0AEC8 = (__int128)*a4;
  return result;
}

void sub_1CD7510AC(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&ProfileSummaryLargeWorkingSetSizeThreshold, 0, 0);
  dword_1EBD0AFE8 = 0;
  qword_1EBD0AFF0 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBD0AFF8 = 0;
  ProfileSummaryLargeWorkingSetSizeThreshold = (uint64_t)&unk_1F2643F00;
  qword_1EBD0B000 = (uint64_t)&unk_1F2643DB0;
  qword_1EBD0B008 = (uint64_t)&unk_1F25EA168;
  qword_1EBD0B020 = (uint64_t)&qword_1EBD0B008;
  sub_1CD7511AC(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileSummaryLargeWorkingSetSizeThreshold);
}

__n128 sub_1CD7511AC(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&ProfileSummaryLargeWorkingSetSizeThreshold, "profile-summary-large-working-set-size-threshold", 0x30uLL);
  word_1EBD0AF72 = word_1EBD0AF72 & 0xFF9F | (32 * (*a1 & 3));
  dword_1EBD0AFE8 = **a2;
  byte_1EBD0AFFC = 1;
  dword_1EBD0AFF8 = dword_1EBD0AFE8;
  word_1EBD0AF72 = word_1EBD0AF72 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBD0AF88 = (__int128)*a4;
  return result;
}

void sub_1CD751240(_WORD *a1, _WORD *a2, long long *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&ProfileSummaryHotCount, 0, 0);
  xmmword_1EBD0B0A8 = 0u;
  unk_1EBD0B0B8 = 0u;
  *((void *)&xmmword_1EBD0B0A8 + 1) = &unk_1F261F710;
  ProfileSummaryHotCount = (uint64_t)&unk_1F261F6A8;
  qword_1EBD0B0C8 = (uint64_t)&unk_1F2643E10;
  qword_1EBD0B0D0 = (uint64_t)&unk_1F261F7D0;
  qword_1EBD0B0E8 = (uint64_t)&qword_1EBD0B0D0;
  llvm::cl::Option::setArgStr(v6, "profile-summary-hot-count", 0x19uLL);
  word_1EBD0B032 = word_1EBD0B032 & 0xFF9F | (32 * (*a1 & 3));
  word_1EBD0B032 = word_1EBD0B032 & 0xFFF8 | *a2 & 7;
  xmmword_1EBD0B048 = *a3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileSummaryHotCount);
}

void sub_1CD751358(_WORD *a1, _WORD *a2, long long *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&ProfileSummaryColdCount, 0, 0);
  xmmword_1EBD0B170 = 0u;
  unk_1EBD0B180 = 0u;
  *((void *)&xmmword_1EBD0B170 + 1) = &unk_1F261F710;
  ProfileSummaryColdCount = (uint64_t)&unk_1F261F6A8;
  qword_1EBD0B190 = (uint64_t)&unk_1F2643E10;
  qword_1EBD0B198 = (uint64_t)&unk_1F261F7D0;
  qword_1EBD0B1B0 = (uint64_t)&qword_1EBD0B198;
  llvm::cl::Option::setArgStr(v6, "profile-summary-cold-count", 0x1AuLL);
  word_1EBD0B0FA = word_1EBD0B0FA & 0xFF9F | (32 * (*a1 & 3));
  word_1EBD0B0FA = word_1EBD0B0FA & 0xFFF8 | *a2 & 7;
  xmmword_1EBD0B110 = *a3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileSummaryColdCount);
}

void sub_1CD751470(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_1CD750994((uint64_t)(v2 + 19), v2[20]);
      sub_1CD7509F4((uint64_t)(v2 + 16), v2[17]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

atomic_ullong llvm::sampleprof_category(llvm *this)
{
  if (!atomic_load_explicit(qword_1EBCF0258, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCF0258, (void *(*)(void))sub_1CCCF2FAC, (void (*)(void *))sub_1CCCF2FF4);
  }
  return qword_1EBCF0258[0];
}

llvm::raw_ostream *llvm::sampleprof::LineLocation::print(llvm::sampleprof::LineLocation *this, llvm::raw_ostream *a2)
{
  __n128 result = llvm::raw_ostream::operator<<(a2, *(unsigned int *)this);
  if (*((_DWORD *)this + 1))
  {
    unint64_t v5 = sub_1CB8E509C(a2, ".");
    unint64_t v6 = *((unsigned int *)this + 1);
    return llvm::raw_ostream::operator<<(v5, v6);
  }
  return result;
}

uint64_t llvm::sampleprof::SampleRecord::merge(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_1CCCF1128(a1, *(void *)a2, a3);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if (v8)
  {
    for (uint64_t i = *(uint64_t **)(a2 + 8); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = *(uint64_t **)(a2 + 8);
  }
  uint64_t v11 = (uint64_t *)(v7 + 8 * v8);
  if (i != v11)
  {
    uint64_t v12 = *i;
    do
    {
      unsigned int v13 = sub_1CCCF11AC((uint64_t)a1, (unsigned __int8 *)(v12 + 16), *(void *)v12, *(void *)(v12 + 8), a3);
      do
      {
        uint64_t v14 = i[1];
        ++i;
        uint64_t v12 = v14;
        if (v14) {
          BOOL v15 = v12 == -8;
        }
        else {
          BOOL v15 = 1;
        }
      }
      while (v15);
      if (v13) {
        BOOL v16 = v6 == 0;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16) {
        uint64_t v6 = v13;
      }
      else {
        uint64_t v6 = v6;
      }
    }
    while (i != v11);
  }
  return v6;
}

llvm::raw_ostream *llvm::sampleprof::LineLocation::dump(llvm::sampleprof::LineLocation *this)
{
  uint64_t v2 = llvm::dbgs(this);

  return llvm::sampleprof::LineLocation::print(this, v2);
}

llvm::raw_ostream *llvm::sampleprof::SampleRecord::print(llvm::sampleprof::SampleRecord *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream::operator<<(a2, *(void *)this);
  if (*((_DWORD *)this + 5))
  {
    sub_1CB8E509C(a2, ", calls:");
    sub_1CD68327C((uint64_t *)this + 1, &v14);
    unint64_t v5 = v14;
    if (v14 != v15)
    {
      do
      {
        uint64_t v6 = sub_1CB8E509C(a2, " ");
        uint64_t v7 = (const void *)v5[4];
        unint64_t v8 = v5[5];
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v8 <= *((void *)v6 + 3) - (void)v9)
        {
          if (v8)
          {
            memcpy(v9, v7, v5[5]);
            *((void *)v6 + 4) += v8;
          }
        }
        else
        {
          llvm::raw_ostream::write(v6, (const char *)v7, v5[5]);
        }
        unint64_t v10 = sub_1CB8E509C(v6, ":");
        llvm::raw_ostream::operator<<(v10, v5[6]);
        uint64_t v11 = (void *)v5[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = (void **)v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void **)v5[2];
            BOOL v13 = *v12 == v5;
            unint64_t v5 = v12;
          }
          while (!v13);
        }
        unint64_t v5 = v12;
      }
      while (v12 != v15);
    }
    sub_1CB833A08((uint64_t)&v14, v15[0]);
  }
  return sub_1CB8E509C(a2, "\n");
}

llvm::raw_ostream *llvm::sampleprof::SampleRecord::dump(llvm::sampleprof::SampleRecord *this)
{
  uint64_t v2 = llvm::dbgs(this);

  return llvm::sampleprof::SampleRecord::print(this, v2);
}

void llvm::sampleprof::FunctionSamples::print(llvm::sampleprof::FunctionSamples *this, llvm::raw_ostream *a2, unsigned int a3)
{
  v30[20] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 1))
  {
    uint64_t v6 = sub_1CB8E509C(a2, "CFG checksum ");
    uint64_t v7 = llvm::raw_ostream::operator<<(v6, *((void *)this + 1));
    sub_1CB8E509C(v7, "\n");
  }
  unint64_t v8 = llvm::raw_ostream::operator<<(a2, *((void *)this + 7));
  uint64_t v9 = sub_1CB8E509C(v8, ", ");
  unint64_t v10 = llvm::raw_ostream::operator<<(v9, *((void *)this + 8));
  uint64_t v11 = sub_1CB8E509C(v10, ", ");
  uint64_t v12 = llvm::raw_ostream::operator<<(v11, *((void *)this + 11));
  sub_1CB8E509C(v12, " sampled lines\n");
  llvm::raw_ostream::indent(a2, a3);
  if (*((void *)this + 11))
  {
    sub_1CB8E509C(a2, "Samples collected in the function's body {\n");
    sub_1CD752784((uint64_t)&v28, (void *)this + 9);
    if (v29)
    {
      BOOL v13 = (llvm::sampleprof::LineLocation **)v28;
      uint64_t v14 = 8 * v29;
      do
      {
        llvm::raw_ostream::indent(a2, a3 + 2);
        llvm::sampleprof::LineLocation::print(*v13, a2);
        BOOL v15 = sub_1CB8E509C(a2, ": ");
        BOOL v16 = *v13++;
        llvm::sampleprof::SampleRecord::print((llvm::sampleprof::LineLocation *)((char *)v16 + 8), v15);
        v14 -= 8;
      }
      while (v14);
    }
    llvm::raw_ostream::indent(a2, a3);
    sub_1CB8E509C(a2, "}\n");
    if (v28 != v30) {
      free(v28);
    }
  }
  else
  {
    sub_1CB8E509C(a2, "No samples collected in the function's body\n");
  }
  llvm::raw_ostream::indent(a2, a3);
  if (*((void *)this + 14))
  {
    sub_1CB8E509C(a2, "Samples collected in inlined callsites {\n");
    sub_1CD752BB8((uint64_t)&v28, (void *)this + 12);
    if (v29)
    {
      unsigned int v17 = (llvm::sampleprof::LineLocation **)v28;
      uint64_t v18 = (llvm::sampleprof::LineLocation **)((char *)v28 + 8 * v29);
      do
      {
        uint64_t v19 = (void *)*((void *)*v17 + 1);
        uint64_t v20 = (uint64_t)*v17 + 16;
        if (v19 != (void *)v20)
        {
          do
          {
            llvm::raw_ostream::indent(a2, a3 + 2);
            llvm::sampleprof::LineLocation::print(*v17, a2);
            long long v21 = sub_1CB8E509C(a2, ": inlined callee: ");
            BOOL v22 = (const void *)v19[9];
            unint64_t v23 = v19[10];
            unsigned int v24 = (void *)*((void *)v21 + 4);
            if (v23 <= *((void *)v21 + 3) - (void)v24)
            {
              if (v23)
              {
                memcpy(v24, v22, v19[10]);
                *((void *)v21 + 4) += v23;
              }
            }
            else
            {
              llvm::raw_ostream::write(v21, (const char *)v22, v19[10]);
            }
            sub_1CB8E509C(v21, ": ");
            llvm::sampleprof::FunctionSamples::print((llvm::sampleprof::FunctionSamples *)(v19 + 7), a2, a3 + 4);
            uint64_t v25 = (void *)v19[1];
            if (v25)
            {
              do
              {
                uint64_t v26 = v25;
                uint64_t v25 = (void *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                uint64_t v26 = (void *)v19[2];
                BOOL v27 = *v26 == (void)v19;
                uint64_t v19 = v26;
              }
              while (!v27);
            }
            uint64_t v19 = v26;
          }
          while (v26 != (void *)v20);
        }
        ++v17;
      }
      while (v17 != v18);
    }
    llvm::raw_ostream::indent(a2, a3);
    sub_1CB8E509C(a2, "}\n");
    if (v28 != v30) {
      free(v28);
    }
  }
  else
  {
    sub_1CB8E509C(a2, "No inlined callsites in this function\n");
  }
}

uint64_t llvm::sampleprof::FunctionSamples::getOffset(llvm::sampleprof::FunctionSamples *this, const llvm::DILocation *a2)
{
  int v2 = *((_DWORD *)this + 1);
  return (unsigned __int16)(v2
                          - *(_WORD *)(llvm::DILocalScope::getSubprogram(*((void *)this - *((unsigned int *)this + 2)))
                                     + 24));
}

unint64_t llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(llvm::sampleprof::FunctionSamples *this, const llvm::DILocation *a2)
{
  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    uint64_t v3 = *((void *)this - *((unsigned int *)this + 2));
    uint64_t v4 = 0;
    if (*(unsigned char *)v3 == 19) {
      unsigned int v5 = (unsigned __int16)(*(_DWORD *)(v3 + 24) >> 3);
    }
    else {
      unsigned int v5 = 0;
    }
  }
  else
  {
    if (a2)
    {
      uint64_t v6 = *((void *)this - *((unsigned int *)this + 2));
      if (*(unsigned char *)v6 == 19) {
        uint64_t v4 = *(unsigned int *)(v6 + 24);
      }
      else {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = sub_1CD495F94((uint64_t)this);
      uint64_t v6 = *((void *)this - *((unsigned int *)this + 2));
    }
    int v7 = *((_DWORD *)this + 1);
    unsigned int v5 = (unsigned __int16)(v7 - *(_DWORD *)(llvm::DILocalScope::getSubprogram(v6) + 24));
  }
  return v5 | (unint64_t)(v4 << 32);
}

unint64_t llvm::sampleprof::FunctionSamples::getCallSiteHash(std::string::value_type *__s, std::string::size_type __sz, unsigned int *a3)
{
  if (__s)
  {
    std::string::__init(&__p, __s, __sz);
    char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v6 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = 0;
    std::string::size_type v6 = 0;
    char v4 = 0;
    memset(&__p, 0, sizeof(__p));
  }
  BOOL v7 = v4 < 0;
  if (v4 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v6;
  }
  unint64_t v9 = v4 & 0x7F;
  if (v7) {
    unint64_t v10 = size;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_1CBF4D6C0((uint64_t)&v15, (uint64_t *)p_p, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v12 = a3[1] | ((unint64_t)*a3 << 32);
  return v12 + v11 + 32 * v12;
}

uint64_t llvm::sampleprof::FunctionSamples::findFunctionSamples(uint64_t a1, llvm::sampleprof::FunctionSamples *a2, uint64_t a3)
{
  v21[30] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0xA00000000;
  if (*((_DWORD *)a2 + 2) != 2) {
    goto LABEL_19;
  }
  char v4 = a2;
  unsigned int v5 = (llvm::sampleprof::FunctionSamples *)*((void *)a2 - 1);
  if (!v5) {
    goto LABEL_19;
  }
  do
  {
    BOOL v7 = v5;
    uint64_t Subprogram = llvm::DILocalScope::getSubprogram(*((void *)v4 - 2));
    unint64_t v9 = *(llvm::MDString **)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 24);
    if (v9)
    {
      *(void *)&long long v18 = llvm::MDString::getString(v9);
      *((void *)&v18 + 1) = v13;
      if (v13) {
        goto LABEL_11;
      }
    }
    else
    {
      long long v18 = 0uLL;
    }
    uint64_t v10 = llvm::DILocalScope::getSubprogram(*((void *)v4 - *((unsigned int *)v4 + 2)));
    String = *(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 16);
    if (String) {
      String = (llvm::MDString *)llvm::MDString::getString(String);
    }
    else {
      uint64_t v12 = 0;
    }
    *(void *)&long long v18 = String;
    *((void *)&v18 + 1) = v12;
LABEL_11:
    unint64_t v14 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(v7, (const llvm::DILocation *)llvm::sampleprof::FunctionSamples::ProfileIsFS);
    sub_1CD751E6C((unint64_t)&v19, v14, &v18);
    if (*((_DWORD *)v7 + 2) != 2) {
      break;
    }
    unsigned int v5 = (llvm::sampleprof::FunctionSamples *)*((void *)v7 - 1);
    char v4 = v7;
  }
  while (v5);
  if (v20 && a1 && ((v20 - 1) & 0x80000000) == 0)
  {
    uint64_t v15 = 24 * (v20 - 1);
    do
    {
      FunctionSamplesAt = llvm::sampleprof::FunctionSamples::findFunctionSamplesAt(a1, (unsigned int *)((char *)v19 + v15), *(void *)((char *)v19 + v15 + 8), *(void *)((char *)v19 + v15 + 16), a3);
      a1 = (uint64_t)FunctionSamplesAt;
      if (!v15) {
        break;
      }
      v15 -= 24;
    }
    while (FunctionSamplesAt);
  }
LABEL_19:
  if (v19 != v21) {
    free(v19);
  }
  return a1;
}

unint64_t sub_1CD751E6C(unint64_t result, uint64_t a2, long long *a3)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    uint64_t v8 = a2;
    long long v9 = *a3;
    __n128 result = sub_1CD41C4F0(result, (unint64_t)&v8, 1);
    uint64_t v6 = *(void *)v3 + 24 * *(unsigned int *)(v3 + 8);
    long long v7 = *(_OWORD *)result;
    *(void *)(v6 + 16) = *(void *)(result + 16);
    *(_OWORD *)uint64_t v6 = v7;
  }
  else
  {
    uint64_t v5 = *(void *)result + 24 * v4;
    *(void *)uint64_t v5 = a2;
    *(_OWORD *)(v5 + 8) = *a3;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void *llvm::sampleprof::FunctionSamples::findFunctionSamplesAt(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (char *)sub_1CC3BEC98(a3, a4, (uint64_t)"selected", 8);
  unint64_t size = v9;
  memset(&v27, 0, sizeof(v27));
  if (v9) {
    BOOL v11 = llvm::sampleprof::FunctionSamples::UseMD5 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    double v12 = llvm::MD5::MD5((llvm::MD5 *)v31);
    llvm::MD5::update(v31, v8, size, v12);
    llvm::MD5::final(v31, (int *)&__val);
    uint64_t v8 = (char *)&v27;
    std::to_string(&v27, __val);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      unint64_t size = *((unsigned char *)&v27.__r_.__value_.__s + 23) & 0x7F;
    }
    else
    {
      unint64_t size = v27.__r_.__value_.__l.__size_;
      uint64_t v8 = (char *)v27.__r_.__value_.__r.__words[0];
    }
  }
  long long v28 = v8;
  unint64_t v29 = size;
  uint64_t v13 = sub_1CD67F668(a1 + 96, *a2, a2[1]);
  if ((uint64_t *)(a1 + 104) == v13) {
    goto LABEL_9;
  }
  BOOL v16 = v13;
  unsigned int v17 = v13 + 5;
  uint64_t v18 = sub_1CD752FEC((uint64_t)(v13 + 5), (uint64_t)&v28);
  uint64_t v19 = (void *)v18;
  if (v16 + 6 == (uint64_t *)v18)
  {
    if (a5
      && (llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile(a5, v28, v29, (uint64_t)v31), v32)
      && (uint64_t v26 = sub_1CD752FEC((uint64_t)v17, (uint64_t)v31), v19 != (void *)v26))
    {
      unint64_t v14 = (void *)(v26 + 56);
    }
    else
    {
      if (v29 || (uint64_t v20 = (void *)*v17, (void *)*v17 == v19))
      {
LABEL_9:
        unint64_t v14 = 0;
        goto LABEL_10;
      }
      unint64_t v14 = 0;
      unint64_t v21 = 0;
      do
      {
        unint64_t v22 = v20[14];
        BOOL v23 = v22 >= v21;
        if (v22 > v21) {
          unint64_t v21 = v20[14];
        }
        if (v23) {
          unint64_t v14 = v20 + 7;
        }
        unsigned int v24 = (void *)v20[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = v24;
            unsigned int v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v25 = (void *)v20[2];
            BOOL v11 = *v25 == (void)v20;
            uint64_t v20 = v25;
          }
          while (!v11);
        }
        uint64_t v20 = v25;
      }
      while (v25 != v19);
    }
  }
  else
  {
    unint64_t v14 = (void *)(v18 + 56);
  }
LABEL_10:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v14;
}

uint64_t llvm::sampleprof::FunctionSamples::findAllNames(uint64_t a1, uint64_t a2)
{
  long long v27 = *(_OWORD *)(a1 + 16);
  uint64_t result = sub_1CD752440(a2, &v27, (uint64_t)v28);
  uint64_t v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80))
  {
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 14);
      if (v6)
      {
        for (uint64_t i = (uint64_t **)v5[6]; ; ++i)
        {
          BOOL v8 = !*i || *i + 1 == 0;
          if (!v8) {
            break;
          }
        }
      }
      else
      {
        uint64_t i = (uint64_t **)v5[6];
      }
      uint64_t v9 = v5[6] + 8 * v6;
      if (i != (uint64_t **)v9)
      {
        uint64_t v10 = *i;
        do
        {
          uint64_t v11 = *v10;
          *(void *)&long long v27 = v10 + 2;
          *((void *)&v27 + 1) = v11;
          uint64_t result = sub_1CD752440(a2, &v27, (uint64_t)v28);
          do
          {
            double v12 = i[1];
            ++i;
            uint64_t v10 = v12;
            if (v12) {
              BOOL v13 = v10 + 1 == 0;
            }
            else {
              BOOL v13 = 1;
            }
          }
          while (v13);
        }
        while (i != (uint64_t **)v9);
      }
      unint64_t v14 = (void *)v5[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v5[2];
          BOOL v8 = *v15 == (void)v5;
          uint64_t v5 = v15;
        }
        while (!v8);
      }
      uint64_t v5 = v15;
    }
    while (v15 != (void *)(a1 + 80));
  }
  BOOL v16 = *(void **)(a1 + 96);
  unsigned int v17 = (void *)(a1 + 104);
  if (v16 != v17)
  {
    do
    {
      uint64_t v18 = (void *)v16[5];
      if (v18 != v16 + 6)
      {
        do
        {
          uint64_t v19 = (void *)v18[4];
          char v20 = *((unsigned char *)v18 + 55);
          int v21 = v20;
          if (v20 >= 0) {
            uint64_t v19 = v18 + 4;
          }
          uint64_t v22 = v20 & 0x7F;
          if (v21 < 0) {
            uint64_t v22 = v18[5];
          }
          *(void *)&long long v27 = v19;
          *((void *)&v27 + 1) = v22;
          sub_1CD752440(a2, &v27, (uint64_t)v28);
          uint64_t result = llvm::sampleprof::FunctionSamples::findAllNames(v18 + 7, a2);
          BOOL v23 = (void *)v18[1];
          if (v23)
          {
            do
            {
              unsigned int v24 = v23;
              BOOL v23 = (void *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              unsigned int v24 = (void *)v18[2];
              BOOL v8 = *v24 == (void)v18;
              uint64_t v18 = v24;
            }
            while (!v8);
          }
          uint64_t v18 = v24;
        }
        while (v24 != v16 + 6);
      }
      uint64_t v25 = (void *)v16[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v16[2];
          BOOL v8 = *v26 == (void)v16;
          BOOL v16 = v26;
        }
        while (!v8);
      }
      BOOL v16 = v26;
    }
    while (v26 != v17);
  }
  return result;
}

void llvm::sampleprof::FunctionSamples::dump(llvm::sampleprof::FunctionSamples *this)
{
  int v2 = llvm::dbgs(this);

  llvm::sampleprof::FunctionSamples::print(this, v2, 0);
}

uint64_t llvm::sampleprof::ProfileSymbolList::read(llvm::sampleprof::ProfileSymbolList *this, const unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v4 = 0;
  uint64_t v5 = xmmword_1EBCF02F0;
  unint64_t v6 = 0;
  if (a3 && (void)xmmword_1EBCF02F0)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    BOOL v8 = (char *)this + 8;
    do
    {
      if (a2) {
        size_t v9 = strlen((const char *)&a2[v6]);
      }
      else {
        size_t v9 = 0;
      }
      v12[0] = &a2[v6];
      v12[1] = v9;
      sub_1CC5059B0((uint64_t)v8, (uint64_t)v12, (uint64_t)v13);
      v6 += v9 + 1;
      ++v4;
      uint64_t v5 = xmmword_1EBCF02F0;
    }
    while (v6 < a3 && v4 < (unint64_t)xmmword_1EBCF02F0);
  }
  if (!atomic_load_explicit(qword_1EBCF0258, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCF0258, (void *(*)(void))sub_1CCCF2FAC, (void (*)(void *))sub_1CCCF2FF4);
  }
  if (v4 == v5 || v6 == a3) {
    return 0;
  }
  else {
    return 5;
  }
}

uint64_t sub_1CD752440@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CC18A4C4((uint64_t *)a1, (uint64_t)a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = sub_1CC18A5D0(a1, (uint64_t)a2, (uint64_t)a2, v10);
    uint64_t v7 = result;
    *(_OWORD *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void sub_1CD7524C8(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCF0270, 0, 0);
  xmmword_1EBCF02F0 = 0u;
  *(_OWORD *)&qword_1EBCF0300 = 0u;
  *((void *)&xmmword_1EBCF02F0 + 1) = &unk_1F261F710;
  qword_1EBCF0270 = (uint64_t)&unk_1F261F6A8;
  qword_1EBCF0310 = (uint64_t)&unk_1F2643E10;
  qword_1EBCF0318 = (uint64_t)&unk_1F261F7D0;
  qword_1EBCF0330 = (uint64_t)&qword_1EBCF0318;
  sub_1CD7525CC(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF0270);
}

__n128 sub_1CD7525CC(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCF0270, "profile-symbol-list-cutoff", 0x1AuLL);
  word_1EBCF027A = word_1EBCF027A & 0xFF9F | (32 * (*a1 & 3));
  *(void *)&xmmword_1EBCF02F0 = **a2;
  byte_1EBCF0308 = 1;
  qword_1EBCF0300 = xmmword_1EBCF02F0;
  word_1EBCF027A = word_1EBCF027A & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBCF0290 = (__int128)*a4;
  return result;
}

void sub_1CD752660(char **a1, _WORD *a2, long long *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&GenerateMergedBaseProfiles, 0, 0);
  byte_1EBD0B238 = 0;
  qword_1EBD0B240 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD0B248 = 0;
  GenerateMergedBaseProfiles = (uint64_t)&unk_1F26440A0;
  qword_1EBD0B250 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD0B258 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD0B270 = (uint64_t)&qword_1EBD0B258;
  llvm::cl::Option::setArgStr(v6, "generate-merged-base-profiles", 0x1DuLL);
  uint64_t v7 = *a1;
  byte_1EBD0B238 = **a1;
  byte_1EBD0B249 = 1;
  byte_1EBD0B248 = *v7;
  word_1EBD0B1C2 = word_1EBD0B1C2 & 0xFFF8 | *a2 & 7;
  xmmword_1EBD0B1D8 = *a3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&GenerateMergedBaseProfiles);
}

uint64_t sub_1CD752784(uint64_t a1, void *a2)
{
  unint64_t v3 = (unsigned int **)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1400000000;
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    do
    {
      if (v5 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a1 + 8 * v5) = v4 + 4;
      uint64_t v5 = (*(_DWORD *)(a1 + 8) + 1);
      *(_DWORD *)(a1 + 8) = v5;
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          unint64_t v4 = v7;
        }
        while (!v8);
      }
      unint64_t v4 = v7;
    }
    while (v7 != a2 + 1);
    unint64_t v3 = *(unsigned int ***)a1;
  }
  sub_1CCCF3348(v3, &v3[v5], (uint64_t)&v10);
  return a1;
}

unsigned int **sub_1CD752878(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, unsigned int **a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    if (a4 == 2)
    {
      BOOL v8 = *(a2 - 1);
      uint64_t v9 = *result;
      unsigned int v10 = **result;
      if (*v8 < v10 || *v8 == v10 && v8[1] < v9[1])
      {
        *__n128 result = v8;
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v15 = a4 >> 1;
      BOOL v16 = &result[a4 >> 1];
      unint64_t v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CD752A4C(result, v16, a3, v17, (uint64_t)a5);
        sub_1CD752A4C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[v15]);
        return sub_1CCCF3500(a5, &a5[v15], &a5[v15], &a5[a4], v7);
      }
      else
      {
        sub_1CD752878(result, v16, a3, v17, a5, a6);
        sub_1CD752878(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return sub_1CCCF3594(v7, &v7[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return sub_1CCCF3438(result, a2);
    }
  }
  return result;
}

unsigned int **sub_1CD752A4C(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    BOOL v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      unsigned int v10 = *result;
      unsigned int v11 = **result;
      if (*v9 < v11 || *v9 == v11 && v9[1] < v10[1])
      {
        *(void *)a5 = v9;
        double v12 = *result;
      }
      else
      {
        *(void *)a5 = v10;
        double v12 = *(a2 - 1);
      }
      *(void *)(a5 + 8) = v12;
    }
    else if (a4 == 1)
    {
      *(void *)a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_1CD752878(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_1CD752878(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5 + 8 * (a4 >> 1), a4 - (a4 >> 1));
      return sub_1CCCF3500(v8, &v8[a4 >> 1], &v8[a4 >> 1], a2, (unsigned int **)a5);
    }
    else
    {
      return sub_1CCCF38A0(result, a2, (unsigned int **)a5);
    }
  }
  return result;
}

uint64_t sub_1CD752BB8(uint64_t a1, void *a2)
{
  unint64_t v3 = (unsigned int **)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1400000000;
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    do
    {
      if (v5 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a1 + 8 * v5) = v4 + 4;
      uint64_t v5 = (*(_DWORD *)(a1 + 8) + 1);
      *(_DWORD *)(a1 + 8) = v5;
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          unint64_t v4 = v7;
        }
        while (!v8);
      }
      unint64_t v4 = v7;
    }
    while (v7 != a2 + 1);
    unint64_t v3 = *(unsigned int ***)a1;
  }
  sub_1CCCF3AD8(v3, &v3[v5], (uint64_t)&v10);
  return a1;
}

unsigned int **sub_1CD752CAC(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, unsigned int **a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    if (a4 == 2)
    {
      BOOL v8 = *(a2 - 1);
      uint64_t v9 = *result;
      unsigned int v10 = **result;
      if (*v8 < v10 || *v8 == v10 && v8[1] < v9[1])
      {
        *__n128 result = v8;
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v15 = a4 >> 1;
      BOOL v16 = &result[a4 >> 1];
      unint64_t v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CD752E80(result, v16, a3, v17, (uint64_t)a5);
        sub_1CD752E80(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[v15]);
        return sub_1CCCF3500(a5, &a5[v15], &a5[v15], &a5[a4], v7);
      }
      else
      {
        sub_1CD752CAC(result, v16, a3, v17, a5, a6);
        sub_1CD752CAC(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return sub_1CCCF3594(v7, &v7[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return sub_1CCCF3438(result, a2);
    }
  }
  return result;
}

unsigned int **sub_1CD752E80(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    BOOL v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      unsigned int v10 = *result;
      unsigned int v11 = **result;
      if (*v9 < v11 || *v9 == v11 && v9[1] < v10[1])
      {
        *(void *)a5 = v9;
        double v12 = *result;
      }
      else
      {
        *(void *)a5 = v10;
        double v12 = *(a2 - 1);
      }
      *(void *)(a5 + 8) = v12;
    }
    else if (a4 == 1)
    {
      *(void *)a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_1CD752CAC(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_1CD752CAC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5 + 8 * (a4 >> 1), a4 - (a4 >> 1));
      return sub_1CCCF3500(v8, &v8[a4 >> 1], &v8[a4 >> 1], a2, (unsigned int **)a5);
    }
    else
    {
      return sub_1CCCF38A0(result, a2, (unsigned int **)a5);
    }
  }
  return result;
}

uint64_t sub_1CD752FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_1CC9CEFF8(v5, (const void **)(v3 + 32), a2);
    BOOL v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      BOOL v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1CC9CF080(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

_OWORD *sub_1CD75307C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1CD4AF8D4(a1, &v15, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    uint64_t v9 = v6;
    BOOL v7 = operator new(0xB0uLL);
    unsigned int v10 = *a4;
    uint64_t v11 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v11;
    void *v10 = 0;
    v10[1] = 0;
    uint64_t v10[2] = 0;
    *(_OWORD *)((char *)v7 + 120) = 0u;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 88) = 0u;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 136) = 0u;
    *((void *)v7 + 16) = (char *)v7 + 136;
    *((void *)v7 + 21) = 0;
    *((void *)v7 + 20) = 0;
    *((void *)v7 + 19) = v7 + 10;
    uint64_t v12 = v15;
    *(void *)BOOL v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v12;
    unsigned int *v9 = v7;
    uint64_t v13 = **(void **)a1;
    unint64_t v14 = (uint64_t *)v7;
    if (v13)
    {
      *(void *)a1 = v13;
      unint64_t v14 = (uint64_t *)*v9;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 8), v14);
    ++*(void *)(a1 + 16);
  }
  return v7;
}

uint64_t llvm::sampleprof::SampleProfileReaderText::readImpl(llvm::sampleprof::SampleProfileReaderText *this)
{
  v158[10] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = llvm::line_iterator::line_iterator((llvm::line_iterator *)v151, *((const llvm::MemoryBuffer **)this + 7), 1, 35);
  BOOL v156 = v158;
  uint64_t v157 = 0xA00000000;
  char v3 = byte_1EBCF03B8;
  *((unsigned char *)this + 128) = byte_1EBCF03B8;
  llvm::sampleprof::FunctionSamples::ProfileIsFS = v3;
  if (!v152)
  {
    unsigned int v6 = 0;
    int v4 = 0;
LABEL_156:
    BOOL v91 = *((_DWORD *)this + 31) != 0;
    *((unsigned char *)this + 121) = v91;
    *((unsigned char *)this + 120) = v4 != 0;
    llvm::sampleprof::FunctionSamples::ProfileIsProbeBased = v4 != 0;
    llvm::sampleprof::FunctionSamples::ProfileIsCSFlat = v91;
    llvm::sampleprof::FunctionSamples::ProfileIsCSNested = *((unsigned char *)this + 122);
    if (!v6) {
      llvm::sampleprof::SampleProfileReader::computeSummary(this);
    }
    llvm::sampleprof_category(v2);
    uint64_t v92 = v6;
    goto LABEL_159;
  }
  int v4 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
  while (1)
  {
    *(_OWORD *)BOOL v137 = __s;
    uint64_t v7 = __s;
    if (*(unsigned char *)(v7 + llvm::StringRef::find_first_not_of((llvm::StringRef *)v137, 0x20u, 0)) == 35) {
      goto LABEL_4;
    }
    uint64_t v8 = __s;
    if (*(unsigned char *)__s == 32) {
      break;
    }
    unint64_t v149 = 0;
    unint64_t v150 = 0;
    BOOL v134 = 0;
    uint64_t v135 = 0;
    uint64_t v15 = *((void *)&__s + 1);
    *(_OWORD *)BOOL v137 = __s;
    if (!sub_1CCCF5840(v137, &v134, &v150, &v149))
    {
      int v94 = v153;
      LOWORD(v148) = 1283;
      *(void *)&long long v146 = "Expected 'mangled_name:NUM:NUM', found ";
      *(void *)&long long v147 = v8;
      *((void *)&v147 + 1) = v15;
      uint64_t v95 = *((void *)this + 6);
      uint64_t v96 = (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
      *(_DWORD *)&v137[8] = 8;
      v137[12] = 0;
      *(void *)BOOL v137 = &unk_1F2616770;
      *(void *)&v137[16] = v96;
      *(void *)&v137[24] = v97;
      LODWORD(v138) = v94;
      *((void *)&v138 + 1) = &v146;
      unint64_t v98 = (llvm *)llvm::LLVMContext::diagnose(v95, (const llvm::DiagnosticInfo *)v137);
      llvm::sampleprof_category(v98);
      uint64_t v92 = 5;
      goto LABEL_159;
    }
    sub_1CD758EF0((uint64_t)&v146, v134, v135, (uint64_t *)this + 19);
    if (v148) {
      ++*((_DWORD *)this + 31);
    }
    uint64_t v140 = 0;
    long long v142 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    memset(v137, 0, sizeof(v137));
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    BOOL v141 = &v142;
    BOOL v143 = &v144;
    int v155 = &v146;
    BOOL v16 = sub_1CC9B3AE0((uint64_t)this + 8, (uint64_t)&v146, (uint64_t)&std::piecewise_construct, &v155);
    long long v17 = *(_OWORD *)v137;
    *(_OWORD *)(v16 + 72) = *(_OWORD *)&v137[16];
    long long v18 = v139;
    *(_OWORD *)(v16 + 88) = v138;
    *(_OWORD *)(v16 + 104) = v18;
    *((void *)v16 + 15) = v140;
    *(_OWORD *)(v16 + 56) = v17;
    uint64_t v19 = v16 + 136;
    sub_1CD7509F4((uint64_t)(v16 + 128), *((void **)v16 + 17));
    uint64_t v20 = v142;
    *((void *)v16 + 16) = v141;
    *((void *)v16 + 17) = v20;
    uint64_t v21 = *((void *)&v142 + 1);
    *((void *)v16 + 18) = *((void *)&v142 + 1);
    if (v21)
    {
      *(void *)(v20 + 16) = v19;
      BOOL v141 = &v142;
      long long v142 = 0uLL;
    }
    else
    {
      *((void *)v16 + 16) = v19;
    }
    long long v27 = (void *)*((void *)v16 + 20);
    uint64_t v26 = v16 + 160;
    sub_1CD750994((uint64_t)(v26 - 1), v27);
    long long v28 = v144;
    *(v26 - 1) = v143;
    *uint64_t v26 = v28;
    uint64_t v29 = v145;
    v26[1] = v145;
    if (v29)
    {
      v28[2] = v26;
      long long v28 = 0;
      BOOL v143 = &v144;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
    }
    else
    {
      *(v26 - 1) = v26;
    }
    sub_1CD750994((uint64_t)&v143, v28);
    sub_1CD7509F4((uint64_t)&v141, (void *)v142);
    *(void *)BOOL v137 = &v146;
    uint64_t v30 = sub_1CC9B3AE0((uint64_t)this + 8, (uint64_t)&v146, (uint64_t)&std::piecewise_construct, (long long **)v137);
    uint64_t v31 = (uint64_t)(v30 + 56);
    long long v32 = v147;
    *(_OWORD *)(v30 + 72) = v146;
    *(_OWORD *)(v30 + 88) = v32;
    *((void *)v30 + 13) = v148;
    int v33 = sub_1CC9A75E0((uint64_t)(v30 + 56), v150, 1uLL);
    if (v33) {
      BOOL v34 = v6 == 0;
    }
    else {
      BOOL v34 = 0;
    }
    if (v34) {
      int v35 = v33;
    }
    else {
      int v35 = v6;
    }
    unsigned int v36 = sub_1CC9A7664(v31, v149, 1uLL);
    if (v35) {
      BOOL v37 = 1;
    }
    else {
      BOOL v37 = v36 == 0;
    }
    if (v37) {
      unsigned int v6 = v35;
    }
    else {
      unsigned int v6 = v36;
    }
    LODWORD(v157) = 0;
    if (!HIDWORD(v157)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v5 = 0;
    *BOOL v156 = v31;
    LODWORD(v157) = v157 + 1;
LABEL_4:
    uint64_t v2 = (llvm *)llvm::line_iterator::advance((uint64_t)v151);
    if (!v152) {
      goto LABEL_156;
    }
  }
  int v132 = v5;
  int v133 = v4;
  BOOL v134 = 0;
  uint64_t v135 = 0;
  unsigned int v136 = 0;
  LODWORD(v9) = -1;
  unint64_t v10 = *((void *)&__s + 1);
  do
  {
    unint64_t v9 = (v9 + 1);
    int v11 = *(unsigned __int8 *)(__s + v9);
  }
  while (v11 == 32);
  if (!v9) {
    goto LABEL_207;
  }
  if (v11 == 33)
  {
    if (*((void *)&__s + 1) >= v9) {
      unint64_t v12 = v9;
    }
    else {
      unint64_t v12 = *((void *)&__s + 1);
    }
    uint64_t v13 = __s + v12;
    unint64_t v14 = *((void *)&__s + 1) - v12;
    if (v14 >= 0xD)
    {
      if (*(void *)v13 != 0x6365684347464321 || *(void *)(v13 + 5) != 0x3A6D75736B636568) {
        goto LABEL_83;
      }
      *(void *)BOOL v137 = v13 + 13;
      *(void *)&v137[8] = v14 - 13;
      BOOL v115 = (unsigned __int8 *)sub_1CD5A69D0(v137, " \t\n\v\f\r", 6);
      *(void *)BOOL v137 = 0;
      if (llvm::getAsUnsignedInteger(v115, v116, 0xAu, (unint64_t *)v137)) {
        goto LABEL_207;
      }
      int v63 = 0;
      LODWORD(v46) = 0;
      unsigned int v45 = 0;
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      unint64_t v65 = 0;
      uint64_t v64 = *(void *)v137;
    }
    else
    {
      if (v14 != 12) {
        goto LABEL_207;
      }
LABEL_83:
      if (*(void *)v13 != 0x7562697274744121 || *(_DWORD *)(v13 + 8) != 980641140) {
        goto LABEL_207;
      }
      *(void *)BOOL v137 = v13 + 12;
      *(void *)&v137[8] = v14 - 12;
      uint64_t v60 = (unsigned __int8 *)sub_1CD5A69D0(v137, " \t\n\v\f\r", 6);
      *(void *)BOOL v137 = 0;
      int AsUnsignedInteger = llvm::getAsUnsignedInteger(v60, v61, 0xAu, (unint64_t *)v137);
      int v63 = 0;
      if (*(void *)v137 < 0x100000000uLL) {
        int v63 = *(_DWORD *)v137;
      }
      if (AsUnsignedInteger) {
        int v63 = 0;
      }
      if ((AsUnsignedInteger & 1) != 0 || *(_DWORD *)&v137[4]) {
        goto LABEL_207;
      }
      uint64_t v64 = 0;
      LODWORD(v46) = 0;
      unsigned int v45 = 0;
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      unint64_t v65 = 0;
    }
    int v66 = 2;
LABEL_96:
    int v4 = v133;
    if (*((unsigned char *)this + 128))
    {
      int v67 = *((_DWORD *)this + 36);
      if (v67 == 31) {
        int v68 = -1;
      }
      else {
        int v68 = ~(-1 << (v67 + 1));
      }
    }
    else
    {
      int v68 = -1;
    }
    unint64_t v69 = v157;
    if (v157 > v9)
    {
      LODWORD(v157) = v9;
      unint64_t v69 = v9;
    }
    if (v66 == 2)
    {
      uint64_t v71 = v156[v69 - 1];
      if (v64)
      {
        *(void *)(v71 + 8) = v64;
        if (v9 == 1) {
          int v4 = v133 + 1;
        }
      }
      *(_DWORD *)(v71 + 52) = v63;
      if ((v63 & 2) != 0) {
        *((unsigned char *)this + 122) = 1;
      }
      int v5 = v9;
    }
    else
    {
      unsigned int v70 = v68 & v46;
      if (v66)
      {
        BOOL v110 = &v134[3 * v136];
        unint64_t v129 = v65;
        if (v135)
        {
          if (v136)
          {
            uint64_t v23 = 24 * v136;
            uint64_t v22 = v134;
            while (*v22 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v22 += 3;
              v23 -= 24;
              if (!v23) {
                goto LABEL_197;
              }
            }
          }
          else
          {
            uint64_t v22 = v134;
          }
        }
        else
        {
LABEL_197:
          uint64_t v22 = &v134[3 * v136];
        }
        BOOL v111 = &v134[3 * v136];
        uint64_t v127 = v156[v69 - 1];
        if (v22 != v111)
        {
          uint64_t v131 = v156[v69 - 1] + 72;
          do
          {
            char v50 = (unsigned __int8 *)*v22;
            size_t v51 = v22[1];
            unint64_t v52 = v22[2];
            *(void *)&long long v146 = __PAIR64__(v70, v45);
            *(void *)BOOL v137 = &v146;
            long long v53 = sub_1CD759274(v131, (unsigned int *)&v146, (void **)v137);
            unsigned int v54 = sub_1CCCF11AC((uint64_t)(v53 + 40), v50, v51, v52, 1uLL);
            if (v54) {
              BOOL v55 = v6 == 0;
            }
            else {
              BOOL v55 = 0;
            }
            if (v55) {
              unsigned int v6 = v54;
            }
            uint64_t v56 = v22 + 3;
            while (v56 != v110)
            {
              unint64_t v57 = *v56;
              v56 += 3;
              if (v57 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t v22 = v56 - 3;
                goto LABEL_77;
              }
            }
            uint64_t v22 = v110;
LABEL_77:
            ;
          }
          while (v22 != v111);
        }
        *(void *)&long long v146 = __PAIR64__(v70, v45);
        *(void *)BOOL v137 = &v146;
        std::string v112 = sub_1CD759274(v127 + 72, (unsigned int *)&v146, (void **)v137);
        unsigned int v113 = sub_1CCCF1128((uint64_t *)v112 + 5, v129, 1uLL);
        if (v113) {
          BOOL v114 = v6 == 0;
        }
        else {
          BOOL v114 = 0;
        }
        if (v114) {
          unsigned int v6 = v113;
        }
        int v4 = v133;
        int v5 = v132;
      }
      else
      {
        uint64_t v104 = v156[v69 - 1];
        int v155 = (long long *)__PAIR64__(v70, v45);
        *(void *)BOOL v137 = &v155;
        size_t v105 = sub_1CD67E818(v104 + 96, (unsigned int *)&v155, (uint64_t)&std::piecewise_construct, (uint64_t **)v137) + 5;
        std::string::__init((std::string *)v137, v48, v49);
        *(void *)&long long v146 = v137;
        int v106 = sub_1CD75307C((uint64_t)v105, (uint64_t)v137, (uint64_t)&std::piecewise_construct, (_OWORD **)&v146);
        if ((v137[23] & 0x80000000) != 0) {
          operator delete(*(void **)v137);
        }
        BOOL v107 = (char *)v106 + 56;
        *((void *)v106 + 9) = v48;
        *((void *)v106 + 10) = v49;
        *((void *)v106 + 11) = 0;
        *((void *)v106 + 12) = 0;
        *((_DWORD *)v106 + 26) = 0;
        unsigned int v108 = sub_1CC9A75E0((uint64_t)v106 + 56, v65, 1uLL);
        if (v108) {
          BOOL v109 = v6 == 0;
        }
        else {
          BOOL v109 = 0;
        }
        if (v109) {
          unsigned int v6 = v108;
        }
        if (v157 >= (unint64_t)HIDWORD(v157)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v4 = v133;
        int v5 = 0;
        v156[v157] = (uint64_t)v107;
        LODWORD(v157) = v157 + 1;
      }
    }
    MEMORY[0x1D25D9CD0](v134, 8);
    goto LABEL_4;
  }
  if (*((void *)&__s + 1) && (unsigned int v24 = memchr((void *)__s, 58, *((size_t *)&__s + 1))) != 0) {
    uint64_t v25 = (uint64_t)v24 - v8;
  }
  else {
    uint64_t v25 = -1;
  }
  if (v10 >= v9) {
    unint64_t v38 = v9;
  }
  else {
    unint64_t v38 = v10;
  }
  long long v39 = (unsigned __int8 *)(v8 + v38);
  unint64_t v40 = v10 - v38;
  if (v40 >= v25 - v9) {
    unint64_t v41 = v25 - v9;
  }
  else {
    unint64_t v41 = v40;
  }
  if (!v41 || ((uint64_t v42 = memchr(v39, 46, v41), v43 = v42 - v39, v42) ? (v44 = v43 == -1) : (v44 = 1), v44))
  {
    *(void *)BOOL v137 = 0;
    if ((llvm::getAsUnsignedInteger(v39, v41, 0xAu, (unint64_t *)v137) & 1) != 0
      || *(void *)v137 >= 0x10000uLL)
    {
      goto LABEL_207;
    }
    unsigned int v45 = *(_DWORD *)v137;
    uint64_t v46 = 0;
  }
  else
  {
    if (v41 >= v43) {
      uint64_t v99 = v42 - v39;
    }
    else {
      uint64_t v99 = v41;
    }
    *(void *)BOOL v137 = 0;
    if (llvm::getAsUnsignedInteger(v39, v99, 0xAu, (unint64_t *)v137)) {
      goto LABEL_207;
    }
    unsigned int v100 = *(_DWORD *)v137;
    if (*(_DWORD *)&v137[4]) {
      goto LABEL_207;
    }
    uint64_t v101 = v41 >= v43 + 1 ? v43 + 1 : v41;
    *(void *)BOOL v137 = 0;
    if ((llvm::getAsUnsignedInteger(&v39[v101], v41 - v101, 0xAu, (unint64_t *)v137) & 1) != 0
      || *(_DWORD *)&v137[4])
    {
      goto LABEL_207;
    }
    unsigned int v45 = v100;
    uint64_t v46 = *(void *)v137;
  }
  unint64_t v47 = v25 + 2;
  if (v10 < v25 + 2) {
    unint64_t v47 = v10;
  }
  uint64_t v48 = (std::string::value_type *)(v8 + v47);
  unint64_t v49 = v10 - v47;
  if (*(unsigned __int8 *)(v8 + v47) - 48 >= 0xA)
  {
    int v72 = v46;
    size_t v73 = (unsigned __int8 *)(v8 + v10 - 1);
    unint64_t v74 = v49;
    while (v74)
    {
      --v74;
      int v75 = *v73--;
      if (v75 == 58) {
        goto LABEL_113;
      }
    }
    unint64_t v74 = -1;
LABEL_113:
    if (v49 >= v74 + 1) {
      unint64_t v76 = v74 + 1;
    }
    else {
      unint64_t v76 = v49;
    }
    *(void *)BOOL v137 = 0;
    if (llvm::getAsUnsignedInteger((unsigned __int8 *)&v48[v76], v49 - v76, 0xAu, (unint64_t *)v137)) {
      goto LABEL_207;
    }
    int v66 = 0;
    if (v49 >= v74) {
      unint64_t v49 = v74;
    }
    unint64_t v65 = *(void *)v137;
    LODWORD(v46) = v72;
  }
  else
  {
    unsigned int v130 = v45;
    if (v49)
    {
      BOOL v102 = memchr(v48, 32, v49);
      if (v102)
      {
        unint64_t v88 = v102 - v48;
        if (v102 - v48 != -1)
        {
          if (v49 >= v88) {
            uint64_t v103 = v102 - v48;
          }
          else {
            uint64_t v103 = v49;
          }
          *(void *)BOOL v137 = 0;
          if ((llvm::getAsUnsignedInteger((unsigned __int8 *)v48, v103, 0xAu, (unint64_t *)v137) & 1) == 0)
          {
            unint64_t v128 = *(void *)v137;
            goto LABEL_122;
          }
LABEL_207:
          int v117 = v153;
          uint64_t v119 = *((void *)&__s + 1);
          uint64_t v118 = __s;
          LOWORD(v148) = 1283;
          BOOL v120 = "Expected 'NUM[.NUM]: NUM[ mangled_name:NUM]*', found ";
          goto LABEL_208;
        }
      }
    }
    *(void *)BOOL v137 = 0;
    if (llvm::getAsUnsignedInteger((unsigned __int8 *)v48, v49, 0xAu, (unint64_t *)v137)) {
      goto LABEL_207;
    }
    unint64_t v128 = *(void *)v137;
    unint64_t v88 = -1;
    do
    {
LABEL_122:
      if (v88 == -1)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        int v66 = 1;
        goto LABEL_214;
      }
      if (v49 >= v88) {
        unint64_t v77 = v88;
      }
      else {
        unint64_t v77 = v49;
      }
      *(void *)BOOL v137 = &v48[v77];
      *(void *)&v137[8] = v49 - v77;
      unint64_t v78 = llvm::StringRef::find_first_not_of((llvm::StringRef *)v137, 0x20u, 0) + v88;
      if (v49 < v78) {
        unint64_t v78 = v49;
      }
      v49 -= v78;
      if (!v49) {
        goto LABEL_207;
      }
      v48 += v78;
      size_t v79 = memchr(v48, 58, v49);
      unint64_t v80 = v79 - v48;
      if (!v79 || (unint64_t)(v79 - v48 + 1) < 2) {
        goto LABEL_207;
      }
      uint64_t v126 = v46;
      while (1)
      {
        unint64_t v82 = v80 + 1;
        uint64_t v83 = v49 >= v80 + 1 ? v80 + 1 : v49;
        size_t v84 = v49 - v83;
        unint64_t v85 = v49 >= v80 ? v80 : v49;
        size_t v86 = (unsigned __int8 *)&v48[v83];
        *(void *)BOOL v137 = v48;
        *(void *)&v137[8] = v85;
        if (v49 <= v82 || (BOOL v87 = memchr(&v48[v83], 32, v49 - v83)) == 0 || v87 - v86 == -1) {
          unint64_t v88 = v49;
        }
        else {
          unint64_t v88 = v87 - v86 + v82;
        }
        uint64_t v89 = v84 >= v88 + ~v80 ? v88 + ~v80 : v84;
        *(void *)&long long v146 = 0;
        if (!llvm::getAsUnsignedInteger(v86, v89, 0xAu, (unint64_t *)&v146)) {
          break;
        }
        if (v49 > v82)
        {
          unint64_t v90 = memchr(v86, 58, v84);
          if (v90)
          {
            unint64_t v80 = v90 - v86 + v82;
            if (v90 - v86 != -1) {
              continue;
            }
          }
        }
        goto LABEL_207;
      }
      uint64_t v125 = v146;
      sub_1CD7597B8((uint64_t *)&v134, (const void **)v137)[2] = v125;
      int v66 = 1;
      uint64_t v46 = v126;
    }
    while (v88 != v49);
    uint64_t v48 = 0;
    unint64_t v49 = 0;
LABEL_214:
    unint64_t v65 = v128;
    unsigned int v45 = v130;
  }
  if (v132 != v9)
  {
    uint64_t v64 = 0;
    int v63 = 0;
    goto LABEL_96;
  }
  int v117 = v153;
  uint64_t v119 = *((void *)&__s + 1);
  uint64_t v118 = __s;
  LOWORD(v148) = 1283;
  BOOL v120 = "Found non-metadata after metadata: ";
LABEL_208:
  *(void *)&long long v146 = v120;
  *(void *)&long long v147 = v118;
  *((void *)&v147 + 1) = v119;
  uint64_t v121 = *((void *)this + 6);
  uint64_t v122 = (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
  *(_DWORD *)&v137[8] = 8;
  v137[12] = 0;
  *(void *)BOOL v137 = &unk_1F2616770;
  *(void *)&v137[16] = v122;
  *(void *)&v137[24] = v123;
  LODWORD(v138) = v117;
  *((void *)&v138 + 1) = &v146;
  __int16 v124 = (llvm *)llvm::LLVMContext::diagnose(v121, (const llvm::DiagnosticInfo *)v137);
  llvm::sampleprof_category(v124);
  MEMORY[0x1D25D9CD0](v134, 8);
  uint64_t v92 = 5;
LABEL_159:
  if (v156 != v158) {
    free(v156);
  }
  return v92;
}

uint64_t llvm::sampleprof::SampleProfileReaderText::hasFormat(llvm::sampleprof::SampleProfileReaderText *this, const llvm::MemoryBuffer *a2)
{
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v7, this, 1, 35);
  if (!v7[32] || *v8 == 32) {
    return 0;
  }
  v3[0] = v8;
  v3[1] = v9;
  return sub_1CCCF5840(v3, &v4, &v6, &v5);
}

llvm *llvm::sampleprof::SampleProfileReaderBinary::readString@<X0>(llvm::sampleprof::SampleProfileReaderBinary *this@<X0>, uint64_t a2@<X8>)
{
  std::system_category();
  uint64_t v4 = *((void *)this + 19);
  if (v4) {
    __n128 result = (llvm *)strlen(*((const char **)this + 19));
  }
  else {
    __n128 result = 0;
  }
  if ((unint64_t)result + v4 + 1 <= *((void *)this + 20))
  {
    *((void *)this + 19) = (char *)result + v4 + 1;
    char v9 = *(unsigned char *)(a2 + 16) & 0xFE;
  }
  else
  {
    *(void *)&v13.__val_ = 4;
    v13.__cat_ = (const std::error_category *)llvm::sampleprof_category(result);
    std::error_code::message(&__p, &v13);
    __int16 v12 = 260;
    p_p = &__p;
    uint64_t v6 = *((void *)this + 6);
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 7) + 16))(*((void *)this + 7));
    int v15 = 8;
    char v16 = 0;
    unint64_t v14 = &unk_1F2616770;
    uint64_t v17 = v7;
    uint64_t v18 = v8;
    int v19 = 0;
    p_p_p = &p_p;
    llvm::LLVMContext::diagnose(v6, (const llvm::DiagnosticInfo *)&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = *(void *)&v13.__val_;
    __n128 result = (llvm *)v13.__cat_;
    char v9 = *(unsigned char *)(a2 + 16) | 1;
  }
  *(unsigned char *)(a2 + 16) = v9;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  return result;
}

void llvm::sampleprof::SampleProfileReaderBinary::readStringFromTable(llvm::sampleprof::SampleProfileReaderBinary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v3 = (uint64_t *)((char *)this + 168);
  sub_1CD7540D4((uint64_t)v7, (uint64_t)this, (void *)this + 21);
  if (v8)
  {
    uint64_t v4 = v7[0];
    if (LODWORD(v7[0]))
    {
      uint64_t v6 = v7[1];
      *(unsigned char *)(a2 + 16) |= 1u;
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v6;
      return;
    }
  }
  else
  {
    std::system_category();
    LODWORD(v4) = v7[0];
  }
  uint64_t v5 = *v3;
  *(unsigned char *)(a2 + 16) &= ~1u;
  *(_OWORD *)a2 = *(_OWORD *)(v5 + 16 * v4);
}

void sub_1CD7540D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::system_category();
  sub_1CD754DAC((uint64_t)v11, a2);
  if (v12)
  {
    uint64_t v7 = v11[0];
    if (LODWORD(v11[0]))
    {
      uint64_t v9 = v11[1];
      *(unsigned char *)(a1 + 16) |= 1u;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v9;
      return;
    }
  }
  else
  {
    uint64_t v6 = (llvm *)std::system_category();
    LODWORD(v7) = v11[0];
  }
  char v8 = *(unsigned char *)(a1 + 16);
  if (v7 >= (unint64_t)((uint64_t)(a3[1] - *a3) >> 4))
  {
    *(unsigned char *)(a1 + 16) = v8 | 1;
    atomic_ullong v10 = llvm::sampleprof_category(v6);
    *(void *)a1 = 8;
    *(void *)(a1 + 8) = v10;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = v8 & 0xFE;
    *(_DWORD *)a1 = v7;
  }
}

const std::error_category *llvm::sampleprof::SampleProfileReaderBinary::readSampleContextFromTable@<X0>(llvm::sampleprof::SampleProfileReaderBinary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  __n128 result = (const std::error_category *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)this + 104))(&v7);
  if (v9)
  {
    uint64_t v4 = v7;
    if (v7)
    {
      uint64_t v6 = v8;
      *(unsigned char *)(a2 + 40) |= 1u;
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v6;
      return result;
    }
  }
  else
  {
    __n128 result = std::system_category();
    uint64_t v4 = v7;
  }
  uint64_t v5 = v8;
  *(unsigned char *)(a2 + 40) &= ~1u;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return result;
}

void llvm::sampleprof::SampleProfileReaderExtBinaryBase::readStringFromTable(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 376))
  {
    sub_1CD7540D4((uint64_t)v26, (uint64_t)this, (void *)this + 21);
    if (v27)
    {
      uint64_t v4 = v26[0];
      if (LODWORD(v26[0]))
      {
        uint64_t v6 = v26[1];
        *(unsigned char *)(a2 + 16) |= 1u;
        *(void *)a2 = v4;
        *(void *)(a2 + 8) = v6;
        return;
      }
    }
    else
    {
      std::system_category();
      LODWORD(v4) = v26[0];
    }
    uint64_t v5 = (void *)(*((void *)this + 21) + 16 * v4);
    if (!v5[1])
    {
      uint64_t v7 = *((void *)this + 19);
      *((void *)this + 19) = *((void *)this + 48) + 8 * v4;
      sub_1CD754470((uint64_t)__val, (uint64_t)this);
      if (v25)
      {
        unint64_t v8 = __val[0];
        if (LODWORD(__val[0]))
        {
          unint64_t v20 = __val[1];
          *(unsigned char *)(a2 + 16) |= 1u;
          *(void *)a2 = v8;
          *(void *)(a2 + 8) = v20;
          return;
        }
      }
      else
      {
        std::system_category();
        unint64_t v8 = __val[0];
      }
      char v9 = (int64x2_t *)*((void *)this + 49);
      std::to_string(&__p, v8);
      unint64_t v10 = v9->u64[1];
      if (v10 >= v9[1].i64[0])
      {
        uint64_t v21 = sub_1CBF4ECB4(v9, (uint64_t)&__p);
        int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v9->i64[1] = (uint64_t)v21;
        if (v22 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v10 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v10 = v11;
        v9->i64[1] = v10 + 24;
      }
      uint64_t v12 = *(void *)(*((void *)this + 49) + 8);
      uint64_t v15 = *(void *)(v12 - 24);
      uint64_t v13 = v12 - 24;
      uint64_t v14 = v15;
      char v16 = *(unsigned char *)(v13 + 23);
      int v17 = v16;
      if (v16 >= 0) {
        uint64_t v14 = v13;
      }
      uint64_t v18 = *(void *)(v13 + 8);
      uint64_t v19 = v16 & 0x7F;
      if (v17 >= 0) {
        uint64_t v18 = v19;
      }
      *uint64_t v5 = v14;
      v5[1] = v18;
      *((void *)this + 19) = v7;
    }
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)v5;
  }
  else
  {
    llvm::sampleprof::SampleProfileReaderBinary::readStringFromTable(this, a2);
  }
}

void sub_1CD754470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (llvm *)std::system_category();
  uint64_t v5 = *(uint64_t **)(a2 + 152);
  uint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) <= *(void *)(a2 + 160))
  {
    uint64_t v10 = *v5;
    *(void *)(a2 + 152) = v6;
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(void *)a1 = v10;
  }
  else
  {
    *(void *)&v14.__val_ = 4;
    v14.__cat_ = (const std::error_category *)llvm::sampleprof_category(v4);
    std::error_code::message(&__p, &v14);
    __int16 v13 = 260;
    p_p = &__p;
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 16))(*(void *)(a2 + 56));
    int v16 = 8;
    char v17 = 0;
    uint64_t v15 = &unk_1F2616770;
    uint64_t v18 = v8;
    uint64_t v19 = v9;
    int v20 = 0;
    p_p_p = &p_p;
    llvm::LLVMContext::diagnose(v7, (const llvm::DiagnosticInfo *)&v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(unsigned char *)(a1 + 16) |= 1u;
    *(std::error_code *)a1 = v14;
  }
}

void llvm::sampleprof::SampleProfileReaderCompactBinary::readStringFromTable(llvm::sampleprof::SampleProfileReaderCompactBinary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  char v3 = (void *)((char *)this + 192);
  sub_1CD754658((uint64_t)v10, (uint64_t)this, (void *)this + 24);
  if (v11)
  {
    uint64_t v4 = v10[0];
    if (LODWORD(v10[0]))
    {
      uint64_t v8 = v10[1];
      char v9 = *(unsigned char *)(a2 + 16) | 1;
      goto LABEL_8;
    }
  }
  else
  {
    std::system_category();
    LODWORD(v4) = v10[0];
  }
  uint64_t v4 = *v3 + 24 * v4;
  char v5 = *(unsigned char *)(v4 + 23);
  BOOL v6 = v5 < 0;
  uint64_t v7 = *(void *)(v4 + 8);
  if (v5 < 0) {
    uint64_t v4 = *(void *)v4;
  }
  uint64_t v8 = v5 & 0x7F;
  if (v6) {
    uint64_t v8 = v7;
  }
  char v9 = *(unsigned char *)(a2 + 16) & 0xFE;
LABEL_8:
  *(unsigned char *)(a2 + 16) = v9;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v8;
}

void sub_1CD754658(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::system_category();
  sub_1CD754DAC((uint64_t)v11, a2);
  if (v12)
  {
    uint64_t v7 = v11[0];
    if (LODWORD(v11[0]))
    {
      uint64_t v9 = v11[1];
      *(unsigned char *)(a1 + 16) |= 1u;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v9;
      return;
    }
  }
  else
  {
    BOOL v6 = (llvm *)std::system_category();
    LODWORD(v7) = v11[0];
  }
  char v8 = *(unsigned char *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v7)
  {
    *(unsigned char *)(a1 + 16) = v8 | 1;
    atomic_ullong v10 = llvm::sampleprof_category(v6);
    *(void *)a1 = 8;
    *(void *)(a1 + 8) = v10;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = v8 & 0xFE;
    *(_DWORD *)a1 = v7;
  }
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readProfile(llvm::sampleprof::SampleProfileReaderBinary *this, llvm::sampleprof::FunctionSamples *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  sub_1CD754C2C((uint64_t)&v42, (uint64_t)this);
  if (v43)
  {
    unint64_t v4 = v42;
    uint64_t v5 = v42;
    if (v42)
    {
      unint64_t v6 = HIDWORD(v42);
      return v5 | (v6 << 32);
    }
  }
  else
  {
    std::system_category();
    unint64_t v4 = v42;
  }
  sub_1CC9A75E0((uint64_t)a2, v4, 1uLL);
  sub_1CD754DAC((uint64_t)&v40, (uint64_t)this);
  if (v41)
  {
    int v8 = v40;
    if (v40)
    {
      unint64_t v6 = HIDWORD(v40);
      LODWORD(v11) = v40;
      goto LABEL_53;
    }
  }
  else
  {
    std::system_category();
    int v8 = v40;
  }
  if (v8)
  {
    int v9 = 0;
    do
    {
      sub_1CD754C2C((uint64_t)&v38, (uint64_t)this);
      if (v39)
      {
        unsigned int v10 = v38;
        unint64_t v6 = HIDWORD(v38);
        if (v38)
        {
          LODWORD(v11) = v38;
          goto LABEL_53;
        }
      }
      else
      {
        std::system_category();
        unint64_t v6 = 0;
        unsigned int v10 = v38;
      }
      if ((v10 & 0xFFFF0000) != 0)
      {
        std::system_category();
        goto LABEL_55;
      }
      sub_1CD754C2C((uint64_t)&v36, (uint64_t)this);
      if (v37)
      {
        LODWORD(v11) = v36;
        if (v36)
        {
          unint64_t v6 = HIDWORD(v36);
          goto LABEL_53;
        }
      }
      else
      {
        std::system_category();
      }
      sub_1CD754C2C((uint64_t)&v34, (uint64_t)this);
      if (v35)
      {
        LODWORD(v11) = v34;
        if (v34)
        {
          unint64_t v6 = HIDWORD(v34);
          goto LABEL_53;
        }
      }
      else
      {
        std::system_category();
      }
      sub_1CD754DAC((uint64_t)&v32, (uint64_t)this);
      if (v33)
      {
        unint64_t v11 = v32;
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        std::system_category();
      }
      int v26 = v9;
      if (*((unsigned char *)this + 128))
      {
        int v12 = *((_DWORD *)this + 36);
        if (v12 == 31) {
          int v13 = -1;
        }
        else {
          int v13 = ~(-1 << (v12 + 1));
        }
      }
      else
      {
        int v13 = -1;
      }
      unsigned int v14 = v13 & v36;
      for (int i = v32; i; --i)
      {
        (*(void (**)(std::string *__return_ptr, llvm::sampleprof::SampleProfileReaderBinary *))(*(void *)this + 104))(&v31, this);
        if (v31.__r_.__value_.__s.__data_[16])
        {
          unint64_t v11 = v31.__r_.__value_.__r.__words[0];
          if (LODWORD(v31.__r_.__value_.__l.__data_)) {
            goto LABEL_57;
          }
        }
        else
        {
          std::system_category();
        }
        sub_1CD754C2C((uint64_t)&v29, (uint64_t)this);
        if (v30)
        {
          unint64_t v11 = (unint64_t)v29;
          if (v29) {
            goto LABEL_57;
          }
        }
        else
        {
          std::system_category();
          unint64_t v11 = (unint64_t)v29;
        }
        long long v16 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        v27[0] = v10;
        v27[1] = v14;
        uint64_t v28 = v27;
        char v17 = sub_1CD759274((uint64_t)a2 + 72, v27, (void **)&v28);
        sub_1CCCF11AC((uint64_t)(v17 + 40), (unsigned __int8 *)v16, *((size_t *)&v16 + 1), v11, 1uLL);
      }
      unint64_t v18 = v34;
      uint64_t v29 = (std::string *)__PAIR64__(v14, v10);
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      uint64_t v19 = sub_1CD759274((uint64_t)a2 + 72, (unsigned int *)&v29, &v31);
      sub_1CCCF1128((uint64_t *)v19 + 5, v18, 1uLL);
      ++v9;
    }
    while (v26 + 1 != v8);
  }
  sub_1CD754DAC((uint64_t)&v38, (uint64_t)this);
  if (v39)
  {
    unint64_t v11 = v38;
    if (v38)
    {
LABEL_57:
      unint64_t v6 = HIDWORD(v11);
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t Profile = (unint64_t)std::system_category();
    LODWORD(v11) = v38;
  }
  if (v11)
  {
    while (1)
    {
      sub_1CD754C2C((uint64_t)&v36, (uint64_t)this);
      if (v37)
      {
        unint64_t v21 = v36;
        if (v36) {
          goto LABEL_70;
        }
      }
      else
      {
        std::system_category();
      }
      sub_1CD754C2C((uint64_t)&v34, (uint64_t)this);
      if (v35)
      {
        unint64_t v21 = v34;
        if (v34) {
          goto LABEL_70;
        }
      }
      else
      {
        std::system_category();
      }
      (*(void (**)(long long *__return_ptr, llvm::sampleprof::SampleProfileReaderBinary *))(*(void *)this + 104))(&v32, this);
      if (v33)
      {
        unint64_t v21 = v32;
        if (v32)
        {
LABEL_70:
          unint64_t v6 = HIDWORD(v21);
          LODWORD(v11) = v21;
          goto LABEL_53;
        }
      }
      else
      {
        std::system_category();
      }
      if (*((unsigned char *)this + 128))
      {
        int v23 = *((_DWORD *)this + 36);
        int v22 = v23 == 31 ? -1 : ~(-1 << (v23 + 1));
      }
      else
      {
        int v22 = -1;
      }
      LODWORD(v28) = v36;
      HIDWORD(v28) = v22 & v34;
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
      unsigned int v24 = sub_1CD67E818((uint64_t)a2 + 96, (unsigned int *)&v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31)
          + 5;
      std::string::__init(&v31, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
      uint64_t v29 = &v31;
      char v25 = sub_1CD75307C((uint64_t)v24, (uint64_t)&v31, (uint64_t)&std::piecewise_construct, (_OWORD **)&v29);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)((char *)v25 + 72) = v32;
      *((void *)v25 + 11) = 0;
      *((void *)v25 + 12) = 0;
      *((_DWORD *)v25 + 26) = 0;
      unint64_t Profile = llvm::sampleprof::SampleProfileReaderBinary::readProfile(this, (llvm::sampleprof::FunctionSamples *)((char *)v25 + 56));
      if (Profile) {
        break;
      }
      LODWORD(v11) = v11 - 1;
      if (!v11) {
        goto LABEL_50;
      }
    }
    unint64_t v6 = HIDWORD(Profile);
    LODWORD(v11) = Profile;
  }
  else
  {
LABEL_50:
    llvm::sampleprof_category((llvm *)Profile);
    unint64_t v6 = 0;
LABEL_55:
    LODWORD(v11) = 0;
  }
LABEL_53:
  uint64_t v5 = v11;
  return v5 | (v6 << 32);
}

void sub_1CD754C2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (llvm *)std::system_category();
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = *(char **)(a2 + 152);
  int v8 = v7;
  while (v8)
  {
    char v9 = *v8;
    uint64_t v10 = *v8 & 0x7F;
    if (v6 >= 0x40 && (*v8 & 0x7F) != 0) {
      break;
    }
    if ((unint64_t)(v10 << v6) >> v6 != v10) {
      break;
    }
    v5 += v10 << v6;
    v6 += 7;
    ++v8;
    if ((v9 & 0x80) == 0) {
      goto LABEL_9;
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  uint64_t v11 = (v8 - v7);
  int v12 = &v7[v11];
  unint64_t v13 = *(void *)(a2 + 160);
  unsigned int v14 = (const std::error_category *)llvm::sampleprof_category(v4);
  if ((unint64_t)v12 <= v13)
  {
    *(void *)(a2 + 152) += v11;
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(void *)a1 = v5;
  }
  else
  {
    *(void *)&v21.__val_ = 4;
    v21.__cat_ = v14;
    std::error_code::message(&__p, &v21);
    __int16 v20 = 260;
    p_p = &__p;
    uint64_t v15 = *(void *)(a2 + 48);
    uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 16))(*(void *)(a2 + 56));
    int v23 = 8;
    char v24 = 0;
    int v22 = &unk_1F2616770;
    uint64_t v25 = v16;
    uint64_t v26 = v17;
    int v27 = 0;
    p_p_p = &p_p;
    llvm::LLVMContext::diagnose(v15, (const llvm::DiagnosticInfo *)&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(unsigned char *)(a1 + 16) |= 1u;
    *(std::error_code *)a1 = v21;
  }
}

void sub_1CD754DAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (llvm *)std::system_category();
  unint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = *(char **)(a2 + 152);
  int v8 = v7;
  do
  {
    if (!v8
      || (char v9 = *v8, v10 = *v8 & 0x7F, v6 >= 0x40) && (*v8 & 0x7F) != 0
      || (unint64_t)(v10 << v6) >> v6 != v10)
    {
      LODWORD(v5) = 0;
      goto LABEL_10;
    }
    v5 += v10 << v6;
    v6 += 7;
    ++v8;
  }
  while (v9 < 0);
  if (HIDWORD(v5))
  {
    uint64_t v11 = 5;
    int v12 = (const std::error_category *)llvm::sampleprof_category(v4);
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v13 = (v8 - v7);
  unsigned int v14 = &v7[v13];
  unint64_t v15 = *(void *)(a2 + 160);
  int v12 = (const std::error_category *)llvm::sampleprof_category(v4);
  if ((unint64_t)v14 <= v15)
  {
    *(void *)(a2 + 152) += v13;
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(_DWORD *)a1 = v5;
    return;
  }
  uint64_t v11 = 4;
LABEL_12:
  *(void *)&v22.__val_ = v11;
  v22.__cat_ = v12;
  std::error_code::message(&__p, &v22);
  __int16 v21 = 260;
  p_p = &__p;
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 16))(*(void *)(a2 + 56));
  int v24 = 8;
  char v25 = 0;
  int v23 = &unk_1F2616770;
  uint64_t v26 = v17;
  uint64_t v27 = v18;
  int v28 = 0;
  p_p_p = &p_p;
  llvm::LLVMContext::diagnose(v16, (const llvm::DiagnosticInfo *)&v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 16) |= 1u;
  *(std::error_code *)a1 = v22;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(llvm::sampleprof::SampleProfileReaderBinary *this, const unsigned __int8 *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *((void *)this + 19) = a2;
  sub_1CD754C2C((uint64_t)&v32, (uint64_t)this);
  if (v33)
  {
    uint64_t v5 = v32;
    if (v32)
    {
      unint64_t v4 = v32 & 0xFFFFFFFF00000000;
      return v4 | v5;
    }
  }
  else
  {
    std::system_category();
  }
  (*(void (**)(_OWORD *__return_ptr, llvm::sampleprof::SampleProfileReaderBinary *))(*(void *)this + 112))(v29, this);
  if (v31)
  {
    unint64_t Profile = *(void *)&v29[0];
    if (LODWORD(v29[0])) {
      goto LABEL_5;
    }
  }
  else
  {
    std::system_category();
  }
  uint64_t v22 = 0;
  long long v24 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v23 = &v24;
  char v25 = &v26;
  int v28 = v29;
  uint64_t v7 = sub_1CC9B3AE0((uint64_t)this + 8, (uint64_t)v29, (uint64_t)&std::piecewise_construct, &v28);
  *(_OWORD *)(v7 + 72) = 0u;
  long long v8 = v21;
  *(_OWORD *)(v7 + 88) = v20;
  *(_OWORD *)(v7 + 104) = v8;
  *((void *)v7 + 15) = v22;
  *(_OWORD *)(v7 + 56) = 0u;
  char v9 = v7 + 136;
  sub_1CD7509F4((uint64_t)(v7 + 128), *((void **)v7 + 17));
  uint64_t v10 = v24;
  *((void *)v7 + 16) = v23;
  *((void *)v7 + 17) = v10;
  uint64_t v11 = *((void *)&v24 + 1);
  *((void *)v7 + 18) = *((void *)&v24 + 1);
  if (v11)
  {
    *(void *)(v10 + 16) = v9;
    int v23 = &v24;
    long long v24 = 0uLL;
  }
  else
  {
    *((void *)v7 + 16) = v9;
  }
  uint64_t v13 = (void *)*((void *)v7 + 20);
  int v12 = v7 + 160;
  sub_1CD750994((uint64_t)(v12 - 1), v13);
  unsigned int v14 = v26;
  *(v12 - 1) = v25;
  *int v12 = v14;
  uint64_t v15 = v27;
  v12[1] = v27;
  if (v15)
  {
    void v14[2] = v12;
    unsigned int v14 = 0;
    char v25 = &v26;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    *(v12 - 1) = v12;
  }
  sub_1CD750994((uint64_t)&v25, v14);
  sub_1CD7509F4((uint64_t)&v23, (void *)v24);
  *(void *)&v19[0] = v29;
  uint64_t v16 = sub_1CC9B3AE0((uint64_t)this + 8, (uint64_t)v29, (uint64_t)&std::piecewise_construct, (long long **)v19);
  uint64_t v17 = (llvm::sampleprof::FunctionSamples *)(v16 + 56);
  long long v18 = v29[1];
  *(_OWORD *)(v16 + 72) = v29[0];
  *(_OWORD *)(v16 + 88) = v18;
  *((void *)v16 + 13) = v30;
  sub_1CC9A7664((uint64_t)(v16 + 56), v32, 1uLL);
  if (v30) {
    ++*((_DWORD *)this + 31);
  }
  unint64_t Profile = llvm::sampleprof::SampleProfileReaderBinary::readProfile(this, v17);
  if (!Profile)
  {
    llvm::sampleprof_category((llvm *)Profile);
    unint64_t v4 = 0;
    LODWORD(Profile) = 0;
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v4 = Profile & 0xFFFFFFFF00000000;
LABEL_6:
  uint64_t v5 = Profile;
  return v4 | v5;
}

llvm::sampleprof::SampleProfileReaderBinary *llvm::sampleprof::SampleProfileReaderBinary::readImpl(llvm::sampleprof::SampleProfileReaderBinary *this)
{
  uint64_t v1 = this;
  char v2 = byte_1EBCF03B8;
  *((unsigned char *)this + 128) = byte_1EBCF03B8;
  llvm::sampleprof::FunctionSamples::ProfileIsFS = v2;
  while (1)
  {
    char v3 = (const unsigned __int8 *)*((void *)v1 + 19);
    if ((unint64_t)v3 >= *((void *)v1 + 20)) {
      break;
    }
    this = (llvm::sampleprof::SampleProfileReaderBinary *)llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(v1, v3);
    if (this) {
      return this;
    }
  }
  llvm::sampleprof_category(this);
  return 0;
}

void llvm::sampleprof::SampleProfileReaderExtBinaryBase::readContextFromTable(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  sub_1CD754DAC((uint64_t)v12, (uint64_t)this);
  if (v13)
  {
    uint64_t v5 = v12[0];
    if (LODWORD(v12[0]))
    {
      uint64_t v10 = v12[1];
      *(unsigned char *)(a2 + 16) |= 1u;
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = v10;
      return;
    }
  }
  else
  {
    unint64_t v4 = (llvm *)std::system_category();
    LODWORD(v5) = v12[0];
  }
  uint64_t v6 = **((void **)this + 50);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*((void *)this + 50) + 8) - v6) >> 3) <= v5)
  {
    *(unsigned char *)(a2 + 16) |= 1u;
    atomic_ullong v11 = llvm::sampleprof_category(v4);
    *(void *)a2 = 8;
    *(void *)(a2 + 8) = v11;
  }
  else
  {
    uint64_t v7 = (uint64_t *)(v6 + 40 * v5);
    *(unsigned char *)(a2 + 16) &= ~1u;
    uint64_t v8 = *v7;
    uint64_t v9 = *((unsigned int *)v7 + 2);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
  }
}

double llvm::sampleprof::SampleProfileReaderExtBinaryBase::readSampleContextFromTable@<D0>(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 121))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 104))(&v11);
    if ((v13 & 1) == 0)
    {
      std::system_category();
      uint64_t v4 = v11;
LABEL_4:
      uint64_t v5 = v12;
      *(unsigned char *)(a2 + 40) &= ~1u;
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 16) = 0;
      return result;
    }
    uint64_t v4 = v11;
    if (!v11) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  llvm::sampleprof::SampleProfileReaderExtBinaryBase::readContextFromTable(this, (uint64_t)&v11);
  if (v13)
  {
    uint64_t v4 = v11;
    if (v11)
    {
LABEL_6:
      uint64_t v6 = v12;
      *(unsigned char *)(a2 + 40) |= 1u;
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v6;
      return result;
    }
  }
  else
  {
    std::system_category();
    uint64_t v4 = v11;
  }
  uint64_t v7 = v12;
  uint64_t v8 = v4 + 24 * v12;
  uint64_t v10 = *(void *)(v8 - 24);
  uint64_t v9 = *(void *)(v8 - 16);
  *(unsigned char *)(a2 + 40) &= ~1u;
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v7;
  *(void *)&double result = 1;
  *(void *)(a2 + 32) = 1;
  return result;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readOneSection(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((void *)this + 19) = a2;
  *((void *)this + 20) = a2 + a3;
  switch(*(_DWORD *)a4)
  {
    case 1:
      unint64_t Summary = llvm::sampleprof::SampleProfileReaderBinary::readSummary(this);
      if (Summary) {
        goto LABEL_14;
      }
      uint64_t v7 = *(void *)(a4 + 8);
      if ((v7 & 0x100000000) != 0) {
        *(unsigned char *)(*((void *)this + 13) + 72) = 1;
      }
      if ((v7 & 0x200000000) != 0)
      {
        *((unsigned char *)this + 121) = 1;
        llvm::sampleprof::FunctionSamples::ProfileIsCSFlat = 1;
      }
      if ((v7 & 0x1000000000) != 0)
      {
        *((unsigned char *)this + 122) = 1;
        llvm::sampleprof::FunctionSamples::ProfileIsCSNested = 1;
      }
      if ((v7 & 0x400000000) != 0)
      {
        *((unsigned char *)this + 128) = 1;
        llvm::sampleprof::FunctionSamples::ProfileIsFS = 1;
      }
      goto LABEL_16;
    case 2:
      uint64_t v11 = *(void *)(a4 + 8);
      *((unsigned char *)this + 376) = (v11 & 0x200000000) != 0;
      llvm::sampleprof::FunctionSamples::HasUniqSuffix = (v11 & 0x400000000) != 0;
      if ((v11 & 0x100000000) != 0) {
        unint64_t Summary = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readMD5NameTable(this);
      }
      else {
        unint64_t Summary = llvm::sampleprof::SampleProfileReaderBinary::readNameTable(this);
      }
      break;
    case 3:
      unint64_t Summary = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readProfileSymbolList(this);
      break;
    case 4:
      *((unsigned char *)this + 409) = *(unsigned char *)(a4 + 12) & 1;
      unint64_t Summary = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncOffsetTable(this);
      break;
    case 5:
      unint64_t v10 = *(void *)(a4 + 8);
      *((unsigned char *)this + 120) = BYTE4(v10) & 1;
      llvm::sampleprof::FunctionSamples::ProfileIsProbeBased = BYTE4(v10) & 1;
      unint64_t Summary = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncMetadata((unint64_t)this, (v10 >> 33) & 1);
      break;
    case 6:
      unint64_t Summary = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readCSNameTableSec(this);
      break;
    default:
      if (*(_DWORD *)a4 == 32) {
        unint64_t Summary = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncProfiles(this);
      }
      else {
        unint64_t Summary = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *, uint64_t))(*(void *)this + 136))(this, a4);
      }
      break;
  }
  if (Summary)
  {
LABEL_14:
    unint64_t v8 = Summary & 0xFFFFFFFF00000000;
  }
  else
  {
LABEL_16:
    llvm::sampleprof_category((llvm *)Summary);
    unint64_t v8 = 0;
    LODWORD(Summary) = 0;
  }
  return Summary | v8;
}

uint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readCSNameTableSec(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_1CD754DAC((uint64_t)&v2, (uint64_t)this);
  if ((v3 & 1) == 0)
  {
    std::system_category();
LABEL_5:
    operator new();
  }
  if (!v2) {
    goto LABEL_5;
  }
  return v2;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncProfiles(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  Funcunint64_t Profile = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(void *)this + 32))(this);
  if ((FuncProfile & 1) == 0)
  {
    while (1)
    {
      char v13 = (const unsigned __int8 *)*((void *)this + 19);
      if ((unint64_t)v13 >= *((void *)this + 20)) {
        break;
      }
      Funcunint64_t Profile = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, v13);
      if (FuncProfile) {
        goto LABEL_18;
      }
    }
LABEL_66:
    llvm::sampleprof_category((llvm *)FuncProfile);
    unsigned int v14 = 0;
    unint64_t v1 = 0;
    return v14 | (v1 << 32);
  }
  uint64_t v4 = *((void *)this + 19);
  if (*((void *)this + 14))
  {
    uint64_t v5 = *((void *)this + 44);
    uint64_t v6 = *((unsigned int *)this + 92);
    uint64_t v7 = (unint64_t *)(v5 + 16 * v6);
    if (*((_DWORD *)this + 90))
    {
      if (v6)
      {
        uint64_t v8 = 16 * v6;
        uint64_t v9 = (unint64_t *)*((void *)this + 44);
        while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v9 += 2;
          v8 -= 16;
          if (!v8) {
            goto LABEL_8;
          }
        }
      }
      else
      {
        uint64_t v9 = (unint64_t *)*((void *)this + 44);
      }
    }
    else
    {
LABEL_8:
      uint64_t v9 = (unint64_t *)(v5 + 16 * v6);
    }
    unint64_t v10 = (unint64_t *)(v5 + 16 * v6);
LABEL_10:
    while (v9 != v10)
    {
      llvm::ItaniumManglingCanonicalizer::canonicalize(*(uint64_t **)(*((void *)this + 14) + 8), (char *)*v9, v9[1]);
      uint64_t v11 = v9 + 2;
      while (v11 != v7)
      {
        unint64_t v12 = *v11;
        v11 += 2;
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v9 = v11 - 2;
          goto LABEL_10;
        }
      }
      uint64_t v9 = v7;
    }
  }
  if (*((unsigned char *)this + 121))
  {
    memset(&v61, 0, 20);
    if ((*(unsigned int (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(void *)this + 72))(this))
    {
      uint64_t v15 = *((void *)this + 44);
      uint64_t v16 = *((unsigned int *)this + 92);
      uint64_t v17 = (unint64_t *)(v15 + 16 * v16);
      if (*((_DWORD *)this + 90))
      {
        if (v16)
        {
          uint64_t v18 = 16 * v16;
          uint64_t v19 = (unint64_t *)*((void *)this + 44);
          while (*v19 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v19 += 2;
            v18 -= 16;
            if (!v18) {
              goto LABEL_26;
            }
          }
        }
        else
        {
          uint64_t v19 = (unint64_t *)*((void *)this + 44);
        }
      }
      else
      {
LABEL_26:
        uint64_t v19 = (unint64_t *)(v15 + 16 * v16);
      }
      long long v20 = (unint64_t *)(v15 + 16 * v16);
      while (v19 != v20)
      {
        long long v21 = (int *)*v19;
        size_t v22 = v19[1];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = xmmword_1CFAC4320;
        __str.__r_.__value_.__r.__words[2] = 0;
        llvm::MD5::update((int *)&__str, v21, v22);
        llvm::MD5::final((int *)&__str, (int *)__s);
        sub_1CD4ADCD0((uint64_t)&v61, (uint64_t *)__s, (uint64_t)&__str);
        int v23 = v19 + 2;
        while (v23 != v17)
        {
          unint64_t v24 = *v23;
          v23 += 2;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v19 = v23 - 2;
            goto LABEL_33;
          }
        }
        uint64_t v19 = v17;
LABEL_33:
        ;
      }
    }
    char v25 = (uint64_t *)*((void *)this + 43);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    if (*v25 != v27)
    {
      uint64_t v28 = 0;
      while (1)
      {
        *(_OWORD *)long long __s = *(_OWORD *)v26;
        int v29 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(void *)this + 72))(this);
        if (v29)
        {
          std::string::size_type v30 = strlen(__s[0]);
          std::string::__init(&__str, __s[0], v30);
          unint64_t v31 = std::stoull(&__str, 0, 10);
          if (LODWORD(v61.__r_.__value_.__r.__words[2]))
          {
            unsigned int v32 = (LODWORD(v61.__r_.__value_.__r.__words[2]) - 1) & (37 * v31);
            uint64_t v33 = *(void *)(v61.__r_.__value_.__r.__words[0] + 8 * v32);
            if (v31 == v33)
            {
              LOBYTE(v34) = 1;
              goto LABEL_40;
            }
            int v57 = 1;
            while (v33 != -1)
            {
              unsigned int v58 = v32 + v57++;
              unsigned int v32 = v58 & (LODWORD(v61.__r_.__value_.__r.__words[2]) - 1);
              uint64_t v33 = *(void *)(v61.__r_.__value_.__r.__words[0] + 8 * v32);
              LOBYTE(v34) = 1;
              if (v31 == v33) {
                goto LABEL_40;
              }
            }
          }
        }
        if ((*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(void *)this + 72))(this)) {
          break;
        }
        uint64_t v60 = 0;
        if (sub_1CC18A4C4((uint64_t *)this + 44, (uint64_t)__s, &v60))
        {
          BOOL v34 = 1;
LABEL_49:
          if (!v29) {
            goto LABEL_50;
          }
          goto LABEL_40;
        }
        uint64_t v36 = *((void *)this + 14);
        if (!v36) {
          break;
        }
        BOOL v34 = sub_1CD06A938(**(void **)(v36 + 8), __s[0], (unint64_t)__s[1], 0) != 0;
        if ((v29 & 1) == 0)
        {
LABEL_50:
          if (v34) {
            goto LABEL_51;
          }
          goto LABEL_43;
        }
LABEL_40:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v34)
        {
LABEL_51:
          uint64_t v35 = v26;
          if (!v28) {
            goto LABEL_60;
          }
          uint64_t v35 = v26;
          if (!sub_1CD7561F0(*(void *)(v28 + 16), *(void *)(v28 + 24), *(void *)(v26 + 16), *(void *)(v26 + 24)))goto LABEL_60; {
        }
          }
LABEL_43:
        if (v28 == v26)
        {
          uint64_t v35 = v28;
        }
        else
        {
          if (!v28) {
            goto LABEL_45;
          }
          uint64_t v35 = v28;
          if (!sub_1CD7561F0(*(void *)(v28 + 16), *(void *)(v28 + 24), *(void *)(v26 + 16), *(void *)(v26 + 24)))goto LABEL_45; {
        }
          }
LABEL_60:
        unint64_t v37 = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(v4 + *(void *)(v26 + 40)));
        unsigned int v14 = v37;
        uint64_t v28 = v35;
        if (v37)
        {
          unint64_t v1 = HIDWORD(v37);
          MEMORY[0x1D25D9CD0](v61.__r_.__value_.__r.__words[0], 8);
          return v14 | (v1 << 32);
        }
LABEL_45:
        v26 += 48;
        if (v26 == v27) {
          goto LABEL_64;
        }
      }
      BOOL v34 = 0;
      goto LABEL_49;
    }
LABEL_64:
    Funcunint64_t Profile = MEMORY[0x1D25D9CD0](v61.__r_.__value_.__r.__words[0], 8);
    goto LABEL_65;
  }
  Funcunint64_t Profile = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(void *)this + 72))(this);
  if (FuncProfile)
  {
    uint64_t v39 = *((void *)this + 44);
    uint64_t v40 = *((unsigned int *)this + 92);
    char v41 = (unint64_t *)(v39 + 16 * v40);
    if (*((_DWORD *)this + 90))
    {
      if (v40)
      {
        uint64_t v42 = 16 * v40;
        char v43 = (unint64_t *)*((void *)this + 44);
        while (*v43 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v43 += 2;
          v42 -= 16;
          if (!v42) {
            goto LABEL_74;
          }
        }
      }
      else
      {
        char v43 = (unint64_t *)*((void *)this + 44);
      }
    }
    else
    {
LABEL_74:
      char v43 = (unint64_t *)(v39 + 16 * v40);
    }
    uint64_t v44 = (unint64_t *)(v39 + 16 * v40);
    if (v43 != v44)
    {
      size_t v59 = &unk_1CFAC4000;
      do
      {
        unsigned int v45 = (int *)*v43;
        size_t v46 = v43[1];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = xmmword_1CFAC4320;
        __str.__r_.__value_.__r.__words[2] = 0;
        llvm::MD5::update((int *)&__str, v45, v46);
        llvm::MD5::final((int *)&__str, (int *)&v61);
        std::to_string(&v61, v61.__r_.__value_.__r.__words[0]);
        unint64_t v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v47 = &v61;
        }
        std::string::size_type size = *((unsigned char *)&v61.__r_.__value_.__s + 23) & 0x7F;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v61.__r_.__value_.__l.__size_;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = size;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        __s[0] = 0;
        Funcunint64_t Profile = sub_1CD759E10(*((void *)this + 40), *((_DWORD *)this + 84), (uint64_t)&__str, (uint64_t *)__s);
        int v49 = 11;
        if (FuncProfile && __s[0] != (char *)(*((void *)this + 40) + 48 * *((unsigned int *)this + 84)))
        {
          Funcunint64_t Profile = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(v4 + *((void *)__s[0] + 5)));
          unint64_t v1 = HIDWORD(FuncProfile);
          LODWORD(v59) = FuncProfile;
          int v49 = FuncProfile != 0;
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (v49 != 11 && v49)
        {
          unsigned int v14 = v59;
          return v14 | (v1 << 32);
        }
        char v50 = v43 + 2;
        while (v50 != v41)
        {
          unint64_t v51 = *v50;
          v50 += 2;
          if (v51 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            char v43 = v50 - 2;
            goto LABEL_93;
          }
        }
        char v43 = v41;
LABEL_93:
        ;
      }
      while (v43 != v44);
    }
    goto LABEL_65;
  }
  Funcunint64_t Profile = sub_1CD7562AC((uint64_t)this + 320);
  __str.__r_.__value_.__r.__words[0] = FuncProfile;
  __str.__r_.__value_.__l.__size_ = v52;
  uint64_t v53 = *((void *)this + 40) + 48 * *((unsigned int *)this + 84);
  if (v53 == FuncProfile)
  {
LABEL_65:
    *((void *)this + 19) = *((void *)this + 20);
    goto LABEL_66;
  }
  std::string::size_type v54 = FuncProfile;
  while (1)
  {
    uint64_t v55 = *(void *)(v54 + 40);
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)v54;
    __s[0] = 0;
    if ((sub_1CC18A4C4((uint64_t *)this + 44, (uint64_t)&v61, __s) & 1) != 0
      || (uint64_t v56 = *((void *)this + 14)) != 0
      && sub_1CD06A938(**(void **)(v56 + 8), v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_, 0))
    {
      Funcunint64_t Profile = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(v4 + v55));
      if (FuncProfile) {
        break;
      }
    }
    __str.__r_.__value_.__r.__words[0] = v54 + 48;
    Funcunint64_t Profile = sub_1CD75A080((uint64_t *)&__str);
    std::string::size_type v54 = __str.__r_.__value_.__r.__words[0];
    if (__str.__r_.__value_.__r.__words[0] == v53) {
      goto LABEL_65;
    }
  }
LABEL_18:
  unint64_t v1 = HIDWORD(FuncProfile);
  unsigned int v14 = FuncProfile;
  return v14 | (v1 << 32);
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readProfileSymbolList(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v2 = (llvm::sampleprof::ProfileSymbolList *)*((void *)this + 39);
  if (!v2) {
    operator new();
  }
  unint64_t v3 = llvm::sampleprof::ProfileSymbolList::read(v2, *((const unsigned __int8 **)this + 19), *((void *)this + 20) - *((void *)this + 19));
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFF00000000;
  }
  else
  {
    *((void *)this + 19) = *((void *)this + 20);
    llvm::sampleprof_category((llvm *)v3);
    unint64_t v4 = 0;
    LODWORD(v3) = 0;
  }
  return v3 | v4;
}

_DWORD *sub_1CD75604C(_DWORD *a1)
{
  if (*((void *)a1 + 1))
  {
    uint64_t v1 = a1[4];
    if (v1 > 4 * a1[2] && v1 >= 0x41)
    {
      return sub_1CD759B80(a1);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void *)a1;
        uint64_t v3 = 48 * v1;
        do
        {
          *(void *)(v2 + 32) = 0;
          *(_OWORD *)uint64_t v2 = 0uLL;
          *(_OWORD *)(v2 + 16) = 0uLL;
          v2 += 48;
          v3 -= 48;
        }
        while (v3);
      }
      *((void *)a1 + 1) = 0;
    }
  }
  return a1;
}

void *sub_1CD7560A4(void *result, int a2)
{
  if (a2)
  {
    unint64_t v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    unsigned int v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4) {
      return sub_1CD759C38((uint64_t)result, v4 + 1);
    }
  }
  return result;
}

void sub_1CD7560F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      abort();
    }
    unsigned int v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 3 * a2;
    uint64_t v6 = (char *)operator new(48 * a2);
    uint64_t v7 = &v6[48 * ((v4 - v2) / 48)];
    uint64_t v8 = v7;
    if (v4 != v2)
    {
      uint64_t v9 = &v6[48 * ((v4 - v2) / 48)];
      do
      {
        uint64_t v8 = v9 - 48;
        long long v10 = *((_OWORD *)v4 - 3);
        long long v11 = *((_OWORD *)v4 - 1);
        *((_OWORD *)v9 - 2) = *((_OWORD *)v4 - 2);
        *((_OWORD *)v9 - 1) = v11;
        *((_OWORD *)v9 - 3) = v10;
        v4 -= 48;
        v9 -= 48;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[16 * v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

BOOL sub_1CD7561F0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 < a2) {
    return 0;
  }
  uint64_t v7 = a1;
  unint64_t v8 = a2 - 1;
  uint64_t v9 = a1 + 24 * (a2 - 1);
  size_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = a3 + 24 * (a2 - 1);
  if (v10 != *(void *)(v11 + 8) || v10 && memcmp(*(const void **)v9, *(const void **)v11, v10)) {
    return 0;
  }
  if (!v8) {
    return 1;
  }
  uint64_t v12 = 24 * a2 - 48;
  do
  {
    BOOL result = sub_1CD681CE4(v7, a3);
    if (!result) {
      break;
    }
    v7 += 24;
    a3 += 24;
    uint64_t v13 = v12;
    v12 -= 24;
  }
  while (v13);
  return result;
}

uint64_t sub_1CD7562AC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)a1;
  uint64_t result = *(void *)a1 + 48 * *(unsigned int *)(a1 + 16);
  if (v1)
  {
    v4[0] = v2;
    v4[1] = result;
    sub_1CD75A080(v4);
    return v4[0];
  }
  return result;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::decompressSection(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, const unsigned __int8 *a2, uint64_t a3, const unsigned __int8 **a4, unint64_t *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *((void *)this + 19) = a2;
  *((void *)this + 20) = &a2[a3];
  sub_1CD754C2C((uint64_t)&v21, (uint64_t)this);
  if ((v22 & 1) == 0)
  {
    std::system_category();
    unint64_t v7 = v21;
LABEL_6:
    *a5 = v7;
    sub_1CD754C2C((uint64_t)&v19, (uint64_t)this);
    if (v20)
    {
      unsigned int v16 = v19;
      if (v19)
      {
        unint64_t v9 = v19 & 0xFFFFFFFF00000000;
LABEL_13:
        uint64_t v8 = v16;
        return v9 | v8;
      }
    }
    else
    {
      uint64_t v11 = (llvm::zlib *)std::system_category();
    }
    isAvailable = (llvm *)llvm::zlib::isAvailable(v11);
    if (isAvailable)
    {
      uint64_t v13 = *((void *)this + 19);
      uint64_t v14 = v19;
      uint64_t v15 = sub_1CB906F34((uint64_t *)this + 24, *a5, 0);
      uint64_t v18 = *a5;
      llvm::zlib::uncompress(&v17, v13, v14, v15, &v18);
    }
    unsigned int v16 = 13;
    llvm::sampleprof_category(isAvailable);
    unint64_t v9 = 0;
    goto LABEL_13;
  }
  unint64_t v7 = v21;
  uint64_t v8 = v21;
  if (!v21) {
    goto LABEL_6;
  }
  unint64_t v9 = v21 & 0xFFFFFFFF00000000;
  return v9 | v8;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readImpl(unint64_t this)
{
  int v1 = *(void **)(this + 288);
  uint64_t v2 = *(void **)(this + 296);
  if (v1 != v2)
  {
    unint64_t v3 = this;
    uint64_t v4 = *(void *)(*(void *)(this + 56) + 8);
    do
    {
      uint64_t v5 = v1[3];
      if (v5)
      {
        uint64_t v6 = v1[1];
        if (!*(unsigned char *)(v3 + 408) || (v1[1] & 2) == 0)
        {
          uint64_t v8 = v1[2];
          unint64_t v9 = (unsigned __int8 *)(v4 + v8);
          if (v6)
          {
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            this = llvm::sampleprof::SampleProfileReaderExtBinaryBase::decompressSection((llvm::sampleprof::SampleProfileReaderExtBinaryBase *)v3, (const unsigned __int8 *)(v4 + v8), v5, (const unsigned __int8 **)&v13, (unint64_t *)&v12);
            if (this)
            {
LABEL_21:
              unint64_t v10 = this & 0xFFFFFFFF00000000;
              return this | v10;
            }
            uint64_t v5 = v12;
            unint64_t v9 = v13;
          }
          this = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t, void *))(*(void *)v3 + 128))(v3, v9, v5, v1);
          if (this) {
            goto LABEL_21;
          }
          if (*(unsigned __int8 **)(v3 + 152) != &v9[v5])
          {
            llvm::sampleprof_category((llvm *)this);
            unint64_t v10 = 0;
            LODWORD(this) = 5;
            return this | v10;
          }
          if (v6)
          {
            *(void *)(v3 + 152) = v4 + v1[2];
            *(void *)(v3 + 160) = v4
                                  + *(void *)(*(void *)(v3 + 56) + 16)
                                  - *(void *)(*(void *)(v3 + 56) + 8);
          }
        }
      }
      v1 += 5;
    }
    while (v1 != v2);
  }
  llvm::sampleprof_category((llvm *)this);
  unint64_t v10 = 0;
  LODWORD(this) = 0;
  return this | v10;
}

BOOL llvm::sampleprof::SampleProfileReaderRawBinary::verifySPMagic(llvm::sampleprof::SampleProfileReaderRawBinary *this, uint64_t a2)
{
  BOOL v2 = a2 != 0x5350524F463432FFLL;
  llvm::sampleprof_category(this);
  return v2;
}

BOOL llvm::sampleprof::SampleProfileReaderExtBinary::verifySPMagic(llvm::sampleprof::SampleProfileReaderExtBinary *this, uint64_t a2)
{
  BOOL v2 = a2 != 0x5350524F46343204;
  llvm::sampleprof_category(this);
  return v2;
}

BOOL llvm::sampleprof::SampleProfileReaderCompactBinary::verifySPMagic(llvm::sampleprof::SampleProfileReaderCompactBinary *this, uint64_t a2)
{
  BOOL v2 = a2 != 0x5350524F46343202;
  llvm::sampleprof_category(this);
  return v2;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readNameTable(llvm::sampleprof::SampleProfileReaderBinary *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1CD754DAC((uint64_t)&v9, (uint64_t)this);
  if (v10)
  {
    unsigned int v2 = v9;
    if (v9)
    {
      unint64_t v3 = v9 & 0xFFFFFFFF00000000;
      return v2 | v3;
    }
  }
  else
  {
    std::system_category();
    unsigned int v2 = v9;
  }
  sub_1CD4F9634((uint64_t)this + 168, ((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 4) + v2);
  for (; v2; --v2)
  {
    llvm::sampleprof::SampleProfileReaderBinary::readString(this, (uint64_t)&v7);
    if (v8)
    {
      if (v7)
      {
        unint64_t v3 = v7 & 0xFFFFFFFF00000000;
        unsigned int v2 = v7;
        return v2 | v3;
      }
    }
    else
    {
      std::system_category();
    }
    uint64_t v6 = (_OWORD *)*((void *)this + 22);
    if ((unint64_t)v6 >= *((void *)this + 23))
    {
      uint64_t v5 = (llvm *)sub_1CC016940((void **)this + 21, &v7);
    }
    else
    {
      *uint64_t v6 = v7;
      uint64_t v5 = (llvm *)(v6 + 1);
    }
    *((void *)this + 22) = v5;
  }
  llvm::sampleprof_category(v5);
  unint64_t v3 = 0;
  unsigned int v2 = 0;
  return v2 | v3;
}

uint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readMD5NameTable(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_1CD754C2C((uint64_t)&v2, (uint64_t)this);
  if ((v3 & 1) == 0)
  {
    std::system_category();
    goto LABEL_3;
  }
  uint64_t result = v2;
  if (!v2) {
LABEL_3:
  }
    operator new();
  return result;
}

void sub_1CD756A2C(uint64_t *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a2)
  {
    uint64_t v3 = a1[1] - *a1;
    uint64_t v13 = a1 + 2;
    uint64_t v4 = 5 * a2;
    std::string __p = operator new(40 * a2);
    char v10 = (char *)__p + v3;
    uint64_t v11 = (char *)__p + v3;
    uint64_t v12 = (char *)__p + 8 * v4;
    sub_1CD75A110(a1, &__p);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    while (v6 != v5)
    {
      char v8 = (char *)*((void *)v6 - 5);
      v6 -= 40;
      long long v7 = v8;
      if (v6 + 16 != v8) {
        free(v7);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_1CD756AEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = sub_1CCCF7C14(a1, a2);
  }
  else
  {
    *uint64_t v3 = v3 + 2;
    v3[1] = 0x100000000;
    if (*(_DWORD *)(a2 + 8)) {
      uint64_t v3 = (void *)sub_1CD4683C8((uint64_t)v3, a2);
    }
    uint64_t result = (uint64_t)(v3 + 5);
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1CD756B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CD759204(a1, a2, a3, a4);
  }
  uint64_t v5 = (uint64_t *)(*(void *)a1 + 24 * v4);
  *uint64_t v5 = a2;
  v5[1] = a3;
  void v5[2] = a4;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncMetadata(std::error_category *this, BOOL a2, const std::string::value_type **a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (this[19].__vftable >= this[20].__vftable) {
    goto LABEL_5;
  }
  uint64_t v5 = (llvm::sampleprof::SampleProfileReaderExtBinaryBase *)this;
  if (LOBYTE(this[15].__vftable))
  {
    sub_1CD754C2C((uint64_t)v16, (uint64_t)this);
    if (v17)
    {
      unint64_t v6 = (unint64_t)v16[0];
    }
    else
    {
      this = (std::error_category *)std::system_category();
      unint64_t v6 = 0;
    }
    if (!a3 || v6)
    {
      if (v6) {
        goto LABEL_44;
      }
    }
    else
    {
      a3[1] = v16[0];
    }
  }
  if (a2)
  {
    sub_1CD754DAC((uint64_t)v16, (uint64_t)v5);
    if (v17)
    {
      unint64_t v6 = (unint64_t)v16[0];
    }
    else
    {
      this = (std::error_category *)std::system_category();
      unint64_t v6 = 0;
    }
    if (!a3 || v6)
    {
      if (v6) {
        goto LABEL_44;
      }
    }
    else
    {
      *((_DWORD *)a3 + 13) = v16[0];
    }
  }
  if (!*((unsigned char *)v5 + 121))
  {
    sub_1CD754DAC((uint64_t)&v23, (uint64_t)v5);
    if (v24)
    {
      unint64_t v6 = (unint64_t)v23;
      if (v23) {
        goto LABEL_44;
      }
    }
    else
    {
      this = (std::error_category *)std::system_category();
      LODWORD(v6) = v23;
    }
    if (!v6) {
      goto LABEL_5;
    }
    while (1)
    {
      sub_1CD754C2C((uint64_t)&v21, (uint64_t)v5);
      if (v22)
      {
        uint64_t v9 = v21;
        if (v21) {
          goto LABEL_43;
        }
      }
      else
      {
        std::system_category();
      }
      sub_1CD754C2C((uint64_t)&v19, (uint64_t)v5);
      if (v20)
      {
        uint64_t v9 = v19;
        if (v19) {
          goto LABEL_43;
        }
      }
      else
      {
        std::system_category();
      }
      (*(void (**)(const std::string::value_type **__return_ptr, llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(void *)v5 + 112))(v16, v5);
      if (v18)
      {
        uint64_t v9 = v16[0];
        if (LODWORD(v16[0]))
        {
LABEL_43:
          unint64_t v6 = (unint64_t)v9;
          goto LABEL_44;
        }
      }
      else
      {
        std::system_category();
      }
      if (a3)
      {
        v14[0] = v21;
        v14[1] = v19;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        uint64_t v11 = sub_1CD67E818((uint64_t)(a3 + 12), v14, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p) + 5;
        std::string::__init(&__p, v16[0], (std::string::size_type)v16[1]);
        p_p = &__p;
        uint64_t v12 = sub_1CD75307C((uint64_t)v11, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v10 = (llvm::sampleprof::FunctionSamples *)((char *)v12 + 56);
      }
      else
      {
        char v10 = 0;
      }
      this = (std::error_category *)llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncMetadata(v5, a2, v10);
      if (this) {
        break;
      }
      LODWORD(v6) = v6 - 1;
      if (!v6) {
        goto LABEL_5;
      }
    }
    unint64_t v6 = (unint64_t)this;
LABEL_44:
    unint64_t v7 = v6 & 0xFFFFFFFF00000000;
    return v7 | v6;
  }
LABEL_5:
  llvm::sampleprof_category((llvm *)this);
  LODWORD(v6) = 0;
  unint64_t v7 = 0;
  return v7 | v6;
}

unint64_t llvm::sampleprof::SampleProfileReaderCompactBinary::readNameTable(int64x2_t *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  sub_1CD754C2C((uint64_t)&v15, (uint64_t)this);
  if (v16)
  {
    unint64_t v5 = v15;
    if (v15)
    {
LABEL_17:
      unint64_t v10 = v5 & 0xFFFFFFFF00000000;
      return v5 | v10;
    }
    unint64_t v2 = v15;
  }
  else
  {
    std::system_category();
    unint64_t v2 = v15;
  }
  uint64_t v3 = (std::string *)sub_1CCBE3DDC((unint64_t *)&this[12], v2);
  if (v2)
  {
    unsigned int v4 = 1;
    do
    {
      sub_1CD754C2C((uint64_t)&__val, (uint64_t)this);
      if (v14)
      {
        unint64_t v5 = __val;
        if (__val) {
          goto LABEL_17;
        }
      }
      else
      {
        std::system_category();
        unint64_t v5 = __val;
      }
      uint64_t v3 = std::to_string(&__p, v5);
      unint64_t v6 = this[12].u64[1];
      if (v6 >= this[13].i64[0])
      {
        uint64_t v3 = (std::string *)sub_1CBF4ECB4(this + 12, (uint64_t)&__p);
        int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        this[12].i64[1] = (uint64_t)v3;
        if (v9 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v6 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v6 = v7;
        this[12].i64[1] = v6 + 24;
      }
    }
    while (v2 > v4++);
  }
  llvm::sampleprof_category((llvm *)v3);
  unint64_t v10 = 0;
  LODWORD(v5) = 0;
  return v5 | v10;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readSecHdrTableEntry(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  sub_1CD754470((uint64_t)&v20, (uint64_t)this);
  if ((v21 & 1) == 0)
  {
    std::system_category();
    LODWORD(v4) = v20;
LABEL_6:
    LODWORD(v11) = v4;
    sub_1CD754470((uint64_t)&v18, (uint64_t)this);
    if (v19)
    {
      uint64_t v4 = v18;
      uint64_t v5 = v18;
      if (v18) {
        goto LABEL_3;
      }
    }
    else
    {
      std::system_category();
      uint64_t v4 = v18;
    }
    *((void *)&v11 + 1) = v4;
    sub_1CD754470((uint64_t)&v16, (uint64_t)this);
    if (v17)
    {
      uint64_t v4 = v16;
      uint64_t v5 = v16;
      if (v16) {
        goto LABEL_3;
      }
    }
    else
    {
      std::system_category();
      uint64_t v4 = v16;
    }
    *(void *)&long long v12 = v4;
    sub_1CD754470((uint64_t)&v14, (uint64_t)this);
    if (v15)
    {
      uint64_t v5 = v14;
      if (v14)
      {
        unint64_t v6 = v14 & 0xFFFFFFFF00000000;
LABEL_22:
        uint64_t v5 = v5;
        return v6 | v5;
      }
    }
    else
    {
      std::system_category();
      uint64_t v5 = v14;
    }
    *((void *)&v12 + 1) = v5;
    LODWORD(v13) = a2;
    unint64_t v8 = *((void *)this + 37);
    if (v8 >= *((void *)this + 38))
    {
      unint64_t v10 = sub_1CC682688((void **)this + 36, (uint64_t)&v11);
    }
    else
    {
      long long v9 = v12;
      *(_OWORD *)unint64_t v8 = v11;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = v13;
      unint64_t v10 = (char *)(v8 + 40);
    }
    *((void *)this + 37) = v10;
    llvm::sampleprof_category((llvm *)v10);
    unint64_t v6 = 0;
    LODWORD(v5) = 0;
    goto LABEL_22;
  }
  uint64_t v4 = v20;
  uint64_t v5 = v20;
  if (!v20) {
    goto LABEL_6;
  }
LABEL_3:
  unint64_t v6 = v4 & 0xFFFFFFFF00000000;
  return v6 | v5;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readSecHdrTable(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  sub_1CD754470((uint64_t)&v7, (uint64_t)this);
  if (v8)
  {
    unint64_t v3 = v7;
    if (v7)
    {
      unint64_t v5 = v7 & 0xFFFFFFFF00000000;
      return v3 | v5;
    }
  }
  else
  {
    unint64_t SecHdrTableEntry = (unint64_t)std::system_category();
    unint64_t v3 = v7;
  }
  if (v3)
  {
    LODWORD(v4) = 0;
    while (1)
    {
      unint64_t SecHdrTableEntry = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readSecHdrTableEntry(this, v4);
      if (SecHdrTableEntry) {
        break;
      }
      unint64_t v4 = (v4 + 1);
      if (v3 <= v4) {
        goto LABEL_7;
      }
    }
    unint64_t v5 = SecHdrTableEntry & 0xFFFFFFFF00000000;
    LODWORD(v3) = SecHdrTableEntry;
  }
  else
  {
LABEL_7:
    llvm::sampleprof_category((llvm *)SecHdrTableEntry);
    unint64_t v5 = 0;
    LODWORD(v3) = 0;
  }
  return v3 | v5;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readHeader(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  *((void *)this + 19) = v4;
  *((void *)this + 20) = v3;
  unint64_t MagicIdent = llvm::sampleprof::SampleProfileReaderBinary::readMagicIdent(this);
  if (MagicIdent
    || (unint64_t MagicIdent = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readSecHdrTable(this), MagicIdent))
  {
    unint64_t v6 = MagicIdent & 0xFFFFFFFF00000000;
  }
  else
  {
    llvm::sampleprof_category((llvm *)MagicIdent);
    unint64_t v6 = 0;
    LODWORD(MagicIdent) = 0;
  }
  return MagicIdent | v6;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readMagicIdent(llvm::sampleprof::SampleProfileReaderBinary *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_1CD754C2C((uint64_t)&v11, (uint64_t)this);
  if (v12)
  {
    uint64_t v2 = v11;
    uint64_t v4 = v11;
    if (v11) {
      goto LABEL_7;
    }
  }
  else
  {
    std::system_category();
    uint64_t v2 = v11;
  }
  uint64_t v3 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderBinary *, uint64_t))(*(void *)this + 120))(this, v2);
  uint64_t v4 = v3;
  if (!v3)
  {
    sub_1CD754C2C((uint64_t)&v9, (uint64_t)this);
    if ((v10 & 1) == 0)
    {
      unint64_t v7 = (llvm *)std::system_category();
      uint64_t v2 = v9;
LABEL_10:
      BOOL v8 = v2 != 103;
      llvm::sampleprof_category(v7);
      unint64_t v5 = 0;
      uint64_t v4 = 2 * v8;
      return v5 | v4;
    }
    uint64_t v2 = v9;
    uint64_t v4 = v9;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_7:
    unint64_t v5 = v2 & 0xFFFFFFFF00000000;
    return v5 | v4;
  }
  unint64_t v5 = v3 & 0xFFFFFFFF00000000;
  return v5 | v4;
}

uint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::dumpSectionInfo(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 36);
  uint64_t v5 = *((void *)this + 37);
  if (v4 == v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      switch(*(_DWORD *)v4)
      {
        case 0:
          HIBYTE(__p[2]) = 14;
          unint64_t v7 = "InvalidSection";
          goto LABEL_15;
        case 1:
          HIBYTE(__p[2]) = 21;
          strcpy((char *)__p, "ProfileSummarySection");
          BOOL v8 = __p;
          size_t v9 = 21;
          break;
        case 2:
          HIBYTE(__p[2]) = 16;
          char v10 = "NameTableSection";
          goto LABEL_12;
        case 3:
          BOOL v8 = operator new(0x20uLL);
          __p[0] = v8;
          *(_OWORD *)&__p[1] = xmmword_1CD91A410;
          strcpy((char *)v8, "ProfileSymbolListSection");
          size_t v9 = 24;
          break;
        case 4:
          strcpy((char *)__p, "FuncOffsetTableSection");
          HIBYTE(__p[2]) = 22;
          BOOL v8 = __p;
          size_t v9 = 22;
          break;
        case 5:
          HIBYTE(__p[2]) = 16;
          char v10 = "FunctionMetadata";
LABEL_12:
          *(_OWORD *)std::string __p = *(_OWORD *)v10;
          LOBYTE(__p[2]) = 0;
          BOOL v8 = __p;
          size_t v9 = 16;
          break;
        case 6:
          HIBYTE(__p[2]) = 18;
          strcpy((char *)__p, "CSNameTableSection");
          BOOL v8 = __p;
          size_t v9 = 18;
          break;
        default:
          if (*(_DWORD *)v4 == 32)
          {
            HIBYTE(__p[2]) = 17;
            strcpy((char *)__p, "LBRProfileSection");
            BOOL v8 = __p;
            size_t v9 = 17;
          }
          else
          {
            HIBYTE(__p[2]) = 14;
            unint64_t v7 = "UnknownSection";
LABEL_15:
            __p[0] = *(void **)v7;
            *(void **)((char *)__p + 6) = *(void **)(v7 + 6);
            BYTE6(__p[1]) = 0;
            BOOL v8 = __p;
            size_t v9 = 14;
          }
          break;
      }
      uint64_t v11 = llvm::raw_ostream::write(a2, (const char *)v8, v9);
      char v12 = sub_1CB8E509C(v11, " - Offset: ");
      uint64_t v13 = llvm::raw_ostream::operator<<(v12, *(void *)(v4 + 16));
      uint64_t v14 = sub_1CB8E509C(v13, ", Size: ");
      char v15 = llvm::raw_ostream::operator<<(v14, *(void *)(v4 + 24));
      uint64_t v16 = sub_1CB8E509C(v15, ", Flags: ");
      memset(&v42, 0, sizeof(v42));
      if (*(void *)(v4 + 8)) {
        char v17 = "{compressed,";
      }
      else {
        char v17 = "{";
      }
      std::string::append(&v42, v17);
      if ((*(unsigned char *)(v4 + 8) & 2) != 0) {
        std::string::append(&v42, "flat,");
      }
      switch(*(_DWORD *)v4)
      {
        case 1:
          uint64_t v18 = *(void *)(v4 + 8);
          if ((v18 & 0x100000000) != 0)
          {
            std::string::append(&v42, "partial,");
            uint64_t v18 = *(void *)(v4 + 8);
          }
          if ((v18 & 0x200000000) != 0)
          {
            std::string::append(&v42, "context,");
            uint64_t v18 = *(void *)(v4 + 8);
          }
          if ((v18 & 0x1000000000) != 0)
          {
            std::string::append(&v42, "context-nested,");
            uint64_t v18 = *(void *)(v4 + 8);
          }
          char v19 = "fs-discriminator,";
          if ((v18 & 0x400000000) != 0) {
            goto LABEL_40;
          }
          break;
        case 2:
          uint64_t v20 = *(void *)(v4 + 8);
          char v21 = "fixlenmd5,";
          if ((v20 & 0x200000000) != 0 || (char v21 = "md5,", (v20 & 0x100000000) != 0)) {
            std::string::append(&v42, v21);
          }
          char v19 = "uniq,";
          if ((*(unsigned char *)(v4 + 12) & 4) != 0) {
            goto LABEL_40;
          }
          break;
        case 4:
          char v19 = "ordered,";
          if (*(unsigned char *)(v4 + 12)) {
            goto LABEL_40;
          }
          break;
        case 5:
          uint64_t v22 = *(void *)(v4 + 8);
          if ((v22 & 0x100000000) != 0)
          {
            std::string::append(&v42, "probe,");
            uint64_t v22 = *(void *)(v4 + 8);
          }
          char v19 = "attr,";
          if ((v22 & 0x200000000) != 0) {
LABEL_40:
          }
            std::string::append(&v42, v19);
          break;
        default:
          break;
      }
      uint64_t v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v42;
      }
      std::string::size_type size = *((unsigned char *)&v42.__r_.__value_.__s + 23) & 0x7F;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v42.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = (char *)v23 + size;
      if (*(v25 - 1) == 44) {
        *(v25 - 1) = 125;
      }
      else {
        std::string::append(&v42, "}");
      }
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v42;
      }
      else {
        uint64_t v26 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v27 = *((unsigned char *)&v42.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t v27 = v42.__r_.__value_.__l.__size_;
      }
      uint64_t v28 = llvm::raw_ostream::write(v16, (const char *)v26, v27);
      sub_1CB8E509C(v28, "\n");
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      v6 += *(void *)(v4 + 24);
      v4 += 40;
    }
    while (v4 != v5);
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 36);
  }
  unint64_t v29 = *(void *)(v4 + 16);
  std::string::size_type v30 = sub_1CB8E509C(a2, "Header Size: ");
  unint64_t v31 = llvm::raw_ostream::operator<<(v30, v29);
  sub_1CB8E509C(v31, "\n");
  unsigned int v32 = sub_1CB8E509C(a2, "Total Sections Size: ");
  uint64_t v33 = llvm::raw_ostream::operator<<(v32, v6);
  sub_1CB8E509C(v33, "\n");
  BOOL v34 = sub_1CB8E509C(a2, "File Size: ");
  uint64_t v35 = *((void *)v3 + 36);
  uint64_t v36 = *((void *)v3 + 37);
  if (v35 == v36)
  {
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    do
    {
      uint64_t v38 = *(void *)(v35 + 24);
      if (v38 + *(void *)(v35 + 16) > v37) {
        unint64_t v37 = v38 + *(void *)(v35 + 16);
      }
      v35 += 40;
    }
    while (v35 != v36);
  }
  uint64_t v39 = llvm::raw_ostream::operator<<(v34, v37);
  sub_1CB8E509C(v39, "\n");
  return 1;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readHeader(llvm::sampleprof::SampleProfileReaderBinary *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  *((void *)this + 19) = v4;
  *((void *)this + 20) = v3;
  unint64_t MagicIdent = llvm::sampleprof::SampleProfileReaderBinary::readMagicIdent(this);
  if (MagicIdent
    || (unint64_t MagicIdent = llvm::sampleprof::SampleProfileReaderBinary::readSummary(this), MagicIdent)
    || (unint64_t MagicIdent = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderBinary *))(*(void *)this + 96))(this),
        MagicIdent))
  {
    unint64_t v6 = MagicIdent & 0xFFFFFFFF00000000;
  }
  else
  {
    llvm::sampleprof_category((llvm *)MagicIdent);
    unint64_t v6 = 0;
    LODWORD(MagicIdent) = 0;
  }
  return MagicIdent | v6;
}

unint64_t llvm::sampleprof::SampleProfileReaderCompactBinary::readHeader(llvm::sampleprof::SampleProfileReaderCompactBinary *this)
{
  llvm::sampleprof::SampleProfileReaderBinary::readHeader(this);
  unint64_t FuncOffsetTable = llvm::sampleprof::SampleProfileReaderCompactBinary::readFuncOffsetTable(this);
  if (FuncOffsetTable)
  {
    unint64_t v3 = FuncOffsetTable & 0xFFFFFFFF00000000;
  }
  else
  {
    llvm::sampleprof_category((llvm *)FuncOffsetTable);
    unint64_t v3 = 0;
    LODWORD(FuncOffsetTable) = 0;
  }
  return FuncOffsetTable | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderCompactBinary::readFuncOffsetTable(llvm::sampleprof::SampleProfileReaderCompactBinary *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  sub_1CD754470((uint64_t)&v19, (uint64_t)this);
  if ((v20 & 1) == 0)
  {
    std::system_category();
    uint64_t v2 = v19;
LABEL_6:
    uint64_t v6 = *((void *)this + 19);
    uint64_t v7 = *(void *)(*((void *)this + 7) + 8) + v2;
    *((void *)this + 19) = v7;
    sub_1CD754C2C((uint64_t)&v17, (uint64_t)this);
    if (v18)
    {
      unint64_t v8 = v17;
      if (v17)
      {
LABEL_8:
        unint64_t v4 = v8 & 0xFFFFFFFF00000000;
LABEL_9:
        uint64_t v3 = v8;
        return v4 | v3;
      }
      unint64_t v9 = v17;
    }
    else
    {
      std::system_category();
      unint64_t v9 = v17;
    }
    char v10 = (llvm *)sub_1CD757B18((llvm::sampleprof::SampleProfileReaderCompactBinary *)((char *)this + 216), v9);
    if (v9)
    {
      unsigned int v11 = 1;
      do
      {
        (*(void (**)(unint64_t *__return_ptr, llvm::sampleprof::SampleProfileReaderCompactBinary *))(*(void *)this + 104))(&v15, this);
        if (v16)
        {
          unint64_t v8 = v15;
          if (v15) {
            goto LABEL_8;
          }
        }
        else
        {
          std::system_category();
        }
        sub_1CD754C2C((uint64_t)&v13, (uint64_t)this);
        if (v14)
        {
          unint64_t v8 = v13;
          if (v13) {
            goto LABEL_8;
          }
        }
        else
        {
          std::system_category();
          unint64_t v8 = v13;
        }
        char v10 = (llvm *)sub_1CD7597B8((uint64_t *)this + 27, (const void **)&v15);
        *((void *)v10 + 2) = v8;
      }
      while (v9 > v11++);
    }
    *((void *)this + 19) = v6;
    *((void *)this + 20) = v7;
    llvm::sampleprof_category(v10);
    unint64_t v4 = 0;
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  uint64_t v2 = v19;
  uint64_t v3 = v19;
  if (!v19) {
    goto LABEL_6;
  }
  unint64_t v4 = v19 & 0xFFFFFFFF00000000;
  return v4 | v3;
}

_OWORD *sub_1CD757B18(_OWORD *result, int a2)
{
  if (a2)
  {
    unint64_t v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    unsigned int v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4) {
      return sub_1CD7599E8((uint64_t)result, v4 + 1);
    }
  }
  return result;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readSummaryEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1CD754C2C((uint64_t)&v16, a1);
  if ((v17 & 1) == 0)
  {
    std::system_category();
LABEL_6:
    sub_1CD754C2C((uint64_t)&v14, a1);
    if (v15)
    {
      uint64_t v4 = v14;
      uint64_t v5 = v14;
      if (v14) {
        goto LABEL_3;
      }
    }
    else
    {
      std::system_category();
    }
    sub_1CD754C2C((uint64_t)&v12, a1);
    if (v13)
    {
      LODWORD(v5) = v12;
      if (v12)
      {
        unint64_t v6 = v12 & 0xFFFFFFFF00000000;
LABEL_18:
        uint64_t v5 = v5;
        return v6 | v5;
      }
    }
    else
    {
      std::system_category();
    }
    unint64_t v8 = *(void *)(a2 + 8);
    if (v8 >= *(void *)(a2 + 16))
    {
      unsigned int v11 = sub_1CCCF7DE4((char **)a2, v16, v14, v12);
    }
    else
    {
      uint64_t v9 = v14;
      uint64_t v10 = v12;
      *(_DWORD *)unint64_t v8 = v16;
      *(void *)(v8 + 8) = v9;
      *(void *)(v8 + 16) = v10;
      unsigned int v11 = (char *)(v8 + 24);
    }
    *(void *)(a2 + 8) = v11;
    llvm::sampleprof_category((llvm *)v11);
    unint64_t v6 = 0;
    LODWORD(v5) = 0;
    goto LABEL_18;
  }
  uint64_t v4 = v16;
  uint64_t v5 = v16;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_3:
  unint64_t v6 = v4 & 0xFFFFFFFF00000000;
  return v6 | v5;
}

uint64_t llvm::sampleprof::SampleProfileReaderGCC::skipNextWord(llvm::sampleprof::SampleProfileReaderGCC *this)
{
  int v4 = 0;
  BOOL v1 = sub_1CD74BCB0((unint64_t *)this + 19, &v4);
  BOOL v2 = v1;
  llvm::sampleprof_category((llvm *)v1);
  if (v2) {
    return 0;
  }
  else {
    return 4;
  }
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readHeader(llvm::sampleprof::SampleProfileReaderGCC *this)
{
  BOOL v2 = (char *)this + 152;
  uint64_t v3 = sub_1CD74BD90((uint64_t)this + 152);
  if (v3)
  {
    int v8 = 0;
    uint64_t Word = sub_1CD74BAA8((uint64_t)v2, &v8);
    if (Word)
    {
      if (v8 == 1)
      {
        uint64_t Word = llvm::sampleprof::SampleProfileReaderGCC::skipNextWord(this);
        unsigned int v5 = Word;
        if (Word)
        {
          unint64_t v4 = Word & 0xFFFFFFFF00000000;
          return v5 | v4;
        }
        unsigned int v5 = 0;
      }
      else
      {
        unsigned int v5 = 2;
      }
    }
    else
    {
      unsigned int v5 = 6;
    }
    llvm::sampleprof_category((llvm *)Word);
    unint64_t v4 = 0;
  }
  else
  {
    llvm::sampleprof_category((llvm *)v3);
    unint64_t v4 = 0;
    unsigned int v5 = 6;
  }
  return v5 | v4;
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readSectionTag(llvm::sampleprof::SampleProfileReaderGCC *this, int a2)
{
  int v8 = 0;
  unint64_t Word = sub_1CD74BCB0((unint64_t *)this + 19, &v8);
  if (Word)
  {
    if (v8 == a2)
    {
      unint64_t Word = llvm::sampleprof::SampleProfileReaderGCC::skipNextWord(this);
      uint64_t v5 = Word;
      if (Word)
      {
        unint64_t v6 = Word & 0xFFFFFFFF00000000;
        return v5 | v6;
      }
    }
    else
    {
      uint64_t v5 = 5;
    }
  }
  else
  {
    uint64_t v5 = 4;
  }
  llvm::sampleprof_category((llvm *)Word);
  unint64_t v6 = 0;
  return v5 | v6;
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readNameTable(int64x2_t *this)
{
  unint64_t SectionTag = llvm::sampleprof::SampleProfileReaderGCC::readSectionTag((llvm::sampleprof::SampleProfileReaderGCC *)this, -1442840576);
  uint64_t v3 = SectionTag;
  if (SectionTag)
  {
    unint64_t v4 = SectionTag & 0xFFFFFFFF00000000;
  }
  else
  {
    unsigned int v15 = 0;
    unint64_t v6 = (char *)sub_1CD74BCB0(&this[9].u64[1], &v15);
    if (v6)
    {
      if (v15)
      {
        int v7 = 0;
        while (1)
        {
          char v13 = 0;
          std::string::size_type v14 = 0;
          BOOL v8 = sub_1CCCD4F00((uint64_t)&this[9].i64[1], (unint64_t *)&v13);
          if (!v8) {
            break;
          }
          std::string::__init(&__p, v13, v14);
          unint64_t v9 = this[13].u64[1];
          if (v9 >= this[14].i64[0])
          {
            unint64_t v6 = sub_1CBF4ECB4(this + 13, (uint64_t)&__p);
            int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            this[13].i64[1] = (uint64_t)v6;
            if (v11 < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v9 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v9 = v10;
            this[13].i64[1] = v9 + 24;
          }
          if (++v7 >= v15) {
            goto LABEL_16;
          }
        }
        llvm::sampleprof_category((llvm *)v8);
        uint64_t v3 = 4;
      }
      else
      {
LABEL_16:
        llvm::sampleprof_category((llvm *)v6);
        uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v3 = 4;
      llvm::sampleprof_category((llvm *)v6);
    }
    unint64_t v4 = 0;
  }
  return v4 | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readFunctionProfiles(llvm::sampleprof::SampleProfileReaderGCC *this)
{
  v12[10] = *MEMORY[0x1E4F143B8];
  unint64_t SectionTag = llvm::sampleprof::SampleProfileReaderGCC::readSectionTag(this, -1409286144);
  uint64_t v3 = SectionTag;
  if (SectionTag)
  {
    unint64_t v4 = SectionTag & 0xFFFFFFFF00000000;
  }
  else
  {
    unsigned int v10 = 0;
    BOOL v6 = sub_1CD74BCB0((unint64_t *)this + 19, &v10);
    if (v6)
    {
      v11[0] = v12;
      v11[1] = (void *)0xA00000000;
      if (!v10) {
LABEL_9:
      }
        llvm::sampleprof::SampleProfileReader::computeSummary(this);
      int v7 = 0;
      while (1)
      {
        OneFunctionunint64_t Profile = llvm::sampleprof::SampleProfileReaderGCC::readOneFunctionProfile((uint64_t)this, (uint64_t **)v11, 1, 0);
        unsigned int v9 = OneFunctionProfile;
        if (OneFunctionProfile) {
          break;
        }
        if (++v7 >= v10) {
          goto LABEL_9;
        }
      }
      unint64_t v4 = OneFunctionProfile & 0xFFFFFFFF00000000;
      if (v11[0] != v12) {
        free(v11[0]);
      }
    }
    else
    {
      llvm::sampleprof_category((llvm *)v6);
      unint64_t v4 = 0;
      unsigned int v9 = 4;
    }
    uint64_t v3 = v9;
  }
  return v4 | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readOneFunctionProfile(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned int a4)
{
  v54[9] = *MEMORY[0x1E4F143B8];
  unint64_t v49 = 0;
  if (!*((_DWORD *)a2 + 2))
  {
    BOOL v8 = sub_1CD74BE04((unint64_t *)(a1 + 152), &v49);
    if (!v8) {
      goto LABEL_4;
    }
  }
  unsigned int v48 = 0;
  BOOL v8 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v48);
  if (!v8) {
    goto LABEL_4;
  }
  uint64_t v12 = *(void *)(a1 + 208) + 24 * v48;
  char v13 = *(unsigned char *)(v12 + 23);
  std::string::size_type v14 = v13 >= 0
      ? (const std::string::value_type *)(*(void *)(a1 + 208) + 24 * v48)
      : *(const std::string::value_type **)v12;
  std::string::size_type v10 = v13 >= 0 ? v13 & 0x7F : *(void *)(v12 + 8);
  unsigned int v47 = 0;
  BOOL v8 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v47);
  if (!v8 || (v46 = 0, !(BOOL v8 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v46))))
  {
LABEL_4:
    llvm::sampleprof_category((llvm *)v8);
    unint64_t v9 = 0;
    LODWORD(v10) = 4;
    return v9 & 0xFFFFFFFF00000000 | v10;
  }
  if (*((_DWORD *)a2 + 2))
  {
    uint64_t v31 = **a2;
    unsigned int v50 = HIWORD(a4);
    int v51 = (unsigned __int16)a4;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    unsigned int v32 = sub_1CD67E818(v31 + 96, &v50, (uint64_t)&std::piecewise_construct, (uint64_t **)&v53) + 5;
    std::string::__init(&v53, v14, v10);
    std::string::size_type v52 = &v53;
    char v17 = (llvm *)sub_1CD75307C((uint64_t)v32, (uint64_t)&v53, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52);
    std::string::size_type v16 = (std::string::size_type)v17 + 56;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    *(_OWORD *)&v53.__r_.__value_.__r.__words[1] = v10;
    v54[0] = 0;
    v54[1] = 0;
    std::string::size_type v52 = &v53;
    unsigned int v15 = sub_1CC9B3AE0(a1 + 8, (uint64_t)&v53, (uint64_t)&std::piecewise_construct, (long long **)&v52);
    std::string::size_type v16 = (std::string::size_type)(v15 + 56);
    char v17 = (llvm *)sub_1CC9A7664((uint64_t)(v15 + 56), v49, 1uLL);
    if (*((void *)v15 + 14)) {
      a3 = 0;
    }
    else {
      a3 = a3;
    }
  }
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v10;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 48) = 0;
  if (v47)
  {
    for (unsigned int i = 0; i < v47; ++i)
    {
      unsigned int v45 = 0;
      BOOL v8 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v45);
      if (!v8) {
        goto LABEL_4;
      }
      unsigned int v44 = 0;
      BOOL v8 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v44);
      if (!v8) {
        goto LABEL_4;
      }
      unint64_t v43 = 0;
      BOOL v8 = sub_1CD74BE04((unint64_t *)(a1 + 152), &v43);
      if (!v8) {
        goto LABEL_4;
      }
      int v38 = (unsigned __int16)v45;
      unsigned int v39 = HIWORD(v45);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53.__r_.__value_.__r.__words[2];
      v53.__r_.__value_.__r.__words[2] = v16;
      v53.__r_.__value_.__l.__size_ = 0xA00000001;
      sub_1CD4832F4((unsigned int *)&v53, (uint64_t)v54, *a2, &(*a2)[*((unsigned int *)a2 + 2)]);
      if (a3)
      {
        if (LODWORD(v53.__r_.__value_.__r.__words[1]))
        {
          size_t v27 = (uint64_t *)v53.__r_.__value_.__r.__words[0];
          uint64_t v29 = 8 * LODWORD(v53.__r_.__value_.__r.__words[1]);
          do
          {
            uint64_t v28 = *v27++;
            sub_1CC9A75E0(v28, v43, 1uLL);
            v29 -= 8;
          }
          while (v29);
        }
        unint64_t v33 = v43;
        unsigned int v50 = v39;
        int v51 = v38;
        std::string::size_type v52 = (std::string *)&v50;
        BOOL v34 = sub_1CD759274(v16 + 72, &v50, (void **)&v52);
        sub_1CCCF1128((uint64_t *)v34 + 5, v33, 1uLL);
      }
      if (!v44)
      {
LABEL_38:
        char v26 = 0;
        goto LABEL_39;
      }
      int v19 = 0;
      while (1)
      {
        int v42 = 0;
        BOOL v20 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v42);
        if (!v20)
        {
          LODWORD(v10) = 4;
          goto LABEL_56;
        }
        if (v42 != 7)
        {
          LODWORD(v10) = 5;
LABEL_56:
          llvm::sampleprof_category((llvm *)v20);
          char v26 = 1;
          goto LABEL_39;
        }
        unint64_t v41 = 0;
        BOOL v21 = sub_1CD74BE04((unint64_t *)(a1 + 152), &v41);
        if (!v21) {
          break;
        }
        unint64_t v22 = *(void *)(a1 + 208) + 24 * v41;
        char v23 = *(unsigned char *)(v22 + 23);
        uint64_t v24 = *(void *)(v22 + 8);
        if (v23 < 0) {
          unint64_t v22 = *(void *)v22;
        }
        unint64_t v37 = (unsigned __int8 *)v22;
        size_t v25 = v23 >= 0 ? v23 & 0x7F : v24;
        unint64_t v40 = 0;
        BOOL v21 = sub_1CD74BE04((unint64_t *)(a1 + 152), &v40);
        if (!v21) {
          break;
        }
        if (a3)
        {
          unint64_t v36 = v40;
          unsigned int v50 = v39;
          int v51 = v38;
          std::string::size_type v52 = (std::string *)&v50;
          uint64_t v35 = sub_1CD759274(v16 + 72, &v50, (void **)&v52);
          sub_1CCCF11AC((uint64_t)(v35 + 40), v37, v25, v36, 1uLL);
        }
        if (++v19 >= v44) {
          goto LABEL_38;
        }
      }
      llvm::sampleprof_category((llvm *)v21);
      LODWORD(v10) = 4;
      char v26 = 1;
LABEL_39:
      char v17 = (llvm *)v53.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v53.__r_.__value_.__l.__data_ != &v53.__r_.__value_.__r.__words[2]) {
        free(v53.__r_.__value_.__l.__data_);
      }
      if (v26) {
        goto LABEL_54;
      }
    }
  }
  if (v46)
  {
    int v30 = 0;
    do
    {
      LODWORD(v52) = 0;
      BOOL v8 = sub_1CD74BCB0((unint64_t *)(a1 + 152), &v52);
      if (!v8) {
        goto LABEL_4;
      }
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53.__r_.__value_.__r.__words[2];
      v53.__r_.__value_.__r.__words[2] = v16;
      v53.__r_.__value_.__l.__size_ = 0xA00000001;
      sub_1CD4832F4((unsigned int *)&v53, (uint64_t)v54, *a2, &(*a2)[*((unsigned int *)a2 + 2)]);
      std::string::size_type v10 = llvm::sampleprof::SampleProfileReaderGCC::readOneFunctionProfile(a1, &v53, a3, v52);
      char v17 = (llvm *)v53.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v53.__r_.__value_.__l.__data_ != &v53.__r_.__value_.__r.__words[2]) {
        free(v53.__r_.__value_.__l.__data_);
      }
      if (v10)
      {
        unint64_t v9 = v10 & 0xFFFFFFFF00000000;
        return v9 & 0xFFFFFFFF00000000 | v10;
      }
    }
    while (++v30 < v46);
  }
  llvm::sampleprof_category(v17);
  LODWORD(v10) = 0;
LABEL_54:
  unint64_t v9 = 0;
  return v9 & 0xFFFFFFFF00000000 | v10;
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readImpl(int64x2_t *this)
{
  unint64_t NameTable = llvm::sampleprof::SampleProfileReaderGCC::readNameTable(this);
  if (NameTable
    || (unint64_t NameTable = llvm::sampleprof::SampleProfileReaderGCC::readFunctionProfiles((llvm::sampleprof::SampleProfileReaderGCC *)this),
        NameTable))
  {
    unint64_t v3 = NameTable & 0xFFFFFFFF00000000;
  }
  else
  {
    llvm::sampleprof_category((llvm *)NameTable);
    unint64_t v3 = 0;
    LODWORD(NameTable) = 0;
  }
  return NameTable | v3;
}

BOOL llvm::sampleprof::SampleProfileReaderGCC::hasFormat(llvm::sampleprof::SampleProfileReaderGCC *this, const llvm::MemoryBuffer *a2)
{
  BOOL v2 = (void *)*((void *)this + 1);
  return v2 && strlen(*((const char **)this + 1)) == 8 && *v2 == 0x3430372A67636461;
}

uint64_t llvm::sampleprof::SampleProfileReaderItaniumRemapper::applyRemapping(llvm::sampleprof::SampleProfileReaderItaniumRemapper *this, llvm::LLVMContext *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 56) + 16))(*(void *)(*((void *)this + 5) + 56));
    char v17 = "Profile data remapping cannot be applied to profile data in compact format (original mangled names are not available).";
    __int16 v19 = 259;
    LODWORD(v21) = 8;
    BYTE4(v21) = 1;
    BOOL v20 = (char *)&unk_1F2616770;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    int v24 = 0;
    size_t v25 = &v17;
    return llvm::LLVMContext::diagnose((uint64_t)a2, (const llvm::DiagnosticInfo *)&v20);
  }
  else
  {
    for (unsigned int i = *(void **)(*((void *)this + 5) + 24); i; unsigned int i = (void *)*i)
    {
      BOOL v20 = 0;
      uint64_t v21 = 0;
      LODWORD(v22) = 0;
      llvm::sampleprof::FunctionSamples::findAllNames((uint64_t)(i + 7), (uint64_t)&v20);
      BOOL v8 = v20;
      unint64_t v9 = (unint64_t *)&v20[16 * v22];
      if (v21)
      {
        if (v22)
        {
          uint64_t v10 = 16 * v22;
          int v11 = (unint64_t *)v20;
          while (*v11 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v11 += 2;
            v10 -= 16;
            if (!v10) {
              goto LABEL_9;
            }
          }
        }
        else
        {
          int v11 = (unint64_t *)v20;
        }
      }
      else
      {
LABEL_9:
        int v11 = (unint64_t *)&v20[16 * v22];
      }
      uint64_t v12 = &v20[16 * v22];
      if (v11 != (unint64_t *)v12)
      {
        do
        {
          uint64_t v13 = llvm::ItaniumManglingCanonicalizer::canonicalize(*((uint64_t **)this + 1), (char *)*v11, v11[1]);
          if (v13)
          {
            char v17 = (const char *)v13;
            long long v18 = *(_OWORD *)v11;
            sub_1CD75006C((uint64_t)this + 16, &v17, &v18, (uint64_t)&v16);
          }
          std::string::size_type v14 = v11 + 2;
          while (v14 != v9)
          {
            unint64_t v15 = *v14;
            v14 += 2;
            if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v11 = v14 - 2;
              goto LABEL_18;
            }
          }
          int v11 = v9;
LABEL_18:
          ;
        }
        while (v11 != (unint64_t *)v12);
        BOOL v8 = v20;
      }
      uint64_t result = MEMORY[0x1D25D9CD0](v8, 8);
    }
    *((unsigned char *)this + 48) = 1;
  }
  return result;
}

void llvm::sampleprof::SampleProfileReader::create(uint64_t a1@<X0>, const llvm::MemoryBuffer *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  __int16 v13 = 260;
  v12[0] = a1;
  sub_1CCCF6A20((llvm::Twine *)v12, a3, (uint64_t)v14);
  if (v15)
  {
    BOOL v8 = v14[0];
    if (LODWORD(v14[0]))
    {
      unint64_t v9 = v14[1];
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v8;
      *(void *)(a5 + 8) = v9;
      goto LABEL_9;
    }
  }
  else
  {
    std::system_category();
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }
  llvm::sampleprof::SampleProfileReader::create(v14, a2, a5);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
LABEL_9:
  if ((v15 & 1) == 0)
  {
    if (v14[0]) {
      (*(void (**)(llvm::sampleprof::SampleProfileReaderGCC *))(*(void *)v14[0] + 8))(v14[0]);
    }
  }
}

void llvm::sampleprof::SampleProfileReaderItaniumRemapper::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  __int16 v9 = 260;
  v8[0] = a1;
  sub_1CCCF6A20((llvm::Twine *)v8, a2, (uint64_t)v10);
  char v4 = v11;
  if ((v11 & 1) == 0)
  {
    std::system_category();
    goto LABEL_3;
  }
  uint64_t v6 = v10[0];
  if (!LODWORD(v10[0])) {
LABEL_3:
  }
    llvm::sampleprof::SampleProfileReaderItaniumRemapper::create();
  uint64_t v7 = v10[1];
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = v10[0];
    v10[0] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
}

uint64_t sub_1CD758A5C(void *a1)
{
  *a1 = &unk_1F263C830;
  sub_1CD7594BC(a1 + 19);

  return sub_1CCCF79B0((uint64_t)a1);
}

void sub_1CD758AB0(void *a1)
{
  *a1 = &unk_1F263C830;
  sub_1CD7594BC(a1 + 19);
  sub_1CCCF79B0((uint64_t)a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD758B18(llvm *a1)
{
  return 0;
}

uint64_t sub_1CD758B38()
{
  return 0;
}

void *sub_1CD758B40(void *a1, int *a2, size_t size)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  memset(&v11, 0, sizeof(v11));
  char v6 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  if (size && (v6 & 1) != 0)
  {
    long long v14 = xmmword_1CFAC4320;
    uint64_t v15 = 0;
    llvm::MD5::update((int *)&v14, a2, size);
    llvm::MD5::final((int *)&v14, (int *)__val);
    std::to_string(&v11, __val[0]);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      a2 = (int *)&v11;
    }
    else {
      a2 = (int *)v11.__r_.__value_.__r.__words[0];
    }
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v11.__r_.__value_.__l.__size_;
    }
  }
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = size;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  uint64_t v7 = sub_1CD681854(a1 + 1, (uint64_t)&v14);
  if (v7
    || (uint64_t v10 = a1[14]) != 0
    && (llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile(v10, (char *)a2, size, (uint64_t)__val),
        v13)
    && (v14 = *(_OWORD *)__val, v16 = 0, v17 = 0, uint64_t v15 = 0, (v7 = sub_1CD681854(a1 + 1, (uint64_t)&v14)) != 0))
  {
    BOOL v8 = v7 + 7;
  }
  else
  {
    BOOL v8 = 0;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1CD758CBC(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CD758CC4()
{
  return 0;
}

uint64_t sub_1CD758CCC()
{
  return 0;
}

uint64_t sub_1CD758CD4()
{
  return 0;
}

uint64_t sub_1CD758CE0()
{
  return 0;
}

uint64_t sub_1CD758CF0(uint64_t a1)
{
  return a1 + 168;
}

void sub_1CD758CFC(void *a1)
{
  sub_1CD759538(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD758D3C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 312);
  *(void *)(result + 312) = 0;
  *a2 = v2;
  return result;
}

BOOL sub_1CD758D4C(uint64_t a1)
{
  return *(void *)(a1 + 392) != 0;
}

uint64_t sub_1CD758D5C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 408) = a2;
  return result;
}

void sub_1CD758D68(uint64_t a1)
{
  sub_1CCCF7A7C(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD758DA0(llvm *a1)
{
  *((void *)a1 + 19) = *((void *)a1 + 20);
  llvm::sampleprof_category(a1);
  return 0;
}

void sub_1CD758DCC(uint64_t a1)
{
  sub_1CD759624(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD758E04()
{
  return 1;
}

uint64_t sub_1CD758E0C(uint64_t a1)
{
  *(void *)a1 = &unk_1F263CB90;
  uint64_t v2 = a1 + 152;
  char v4 = (void **)(a1 + 208);
  sub_1CB8338B8(&v4);
  sub_1CD759698(v2);
  return sub_1CCCF79B0(a1);
}

uint64_t sub_1CD758E74(uint64_t a1)
{
  *(void *)a1 = &unk_1F263CB90;
  uint64_t v2 = a1 + 152;
  uint64_t v5 = (void **)(a1 + 208);
  sub_1CB8338B8(&v5);
  sub_1CD759698(v2);
  uint64_t v3 = sub_1CCCF79B0(a1);
  return MEMORY[0x1D25D9CE0](v3, 0x10F1C40F5D9A673);
}

uint64_t sub_1CD758EF0(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t *a4)
{
  *(_DWORD *)(a1 + 36) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 && *a2 == 91)
  {
    __int16 v9 = operator new(0x38uLL);
    uint64_t v9[2] = v9 + 4;
    v9[3] = 0x100000000;
    uint64_t v10 = *a4;
    void *v9 = *a4;
    v9[1] = a4;
    *(void *)(v10 + 8) = v9;
    *a4 = (uint64_t)v9;
    ++a4[2];
    sub_1CD758FCC((uint64_t)a2, a3, (uint64_t)(v9 + 2));
    uint64_t v11 = v9[2];
    uint64_t v12 = *((unsigned int *)v9 + 6);
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v12;
    *(_OWORD *)a1 = *(_OWORD *)(v11 + 24 * v12 - 24);
    *(_DWORD *)(a1 + 32) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
  }
  return a1;
}

uint64_t sub_1CD758FCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v3 = result + 1;
  }
  else {
    uint64_t v3 = result;
  }
  if (a2 - (unint64_t)(a2 != 0) >= a2 - 2) {
    unint64_t v4 = a2 - 2;
  }
  else {
    unint64_t v4 = a2 - (a2 != 0);
  }
  uint64_t v16 = v3;
  unint64_t v17 = v4;
  long long v15 = 0uLL;
  if (v4)
  {
    do
    {
      unint64_t v6 = llvm::StringRef::find(&v16, " @ ", 3uLL, 0);
      if (v4 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v4;
      }
      unint64_t v8 = v6 + 3;
      if (v4 < v6 + 3) {
        unint64_t v8 = v4;
      }
      uint64_t v9 = v3 + v8;
      unint64_t v10 = v4 - v8;
      if (v6 == -1) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v6 == -1) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v9;
      }
      uint64_t v16 = v12;
      unint64_t v17 = v11;
      if (v6 == -1) {
        unint64_t v13 = v4;
      }
      else {
        unint64_t v13 = v7;
      }
      uint64_t v14 = 0;
      sub_1CD7590A8(v3, v13, &v15, (uint64_t)&v14);
      uint64_t result = sub_1CD756B54(a3, v15, *((uint64_t *)&v15 + 1), v14);
      uint64_t v3 = v12;
      unint64_t v4 = v11;
    }
    while (v11);
  }
  return result;
}

double sub_1CD7590A8(uint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4)
{
  *(void *)&long long v26 = a1;
  *((void *)&v26 + 1) = a2;
  LOBYTE(v27) = 58;
  unint64_t v8 = llvm::StringRef::find((uint64_t *)&v26, (char *)&v27, 1uLL, 0);
  if (v8 == -1)
  {
    double result = *(double *)&v26;
    *a3 = v26;
    *(void *)a4 = 0;
  }
  else
  {
    if (a2 >= v8) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = a2;
    }
    if (a2 >= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    else {
      unint64_t v10 = a2;
    }
    unint64_t v11 = a2 - v10;
    uint64_t v12 = a1 + v10;
    *(void *)&long long v24 = a1;
    *((void *)&v24 + 1) = v9;
    v25[0] = a1 + v10;
    v25[1] = a2 - v10;
    double result = *(double *)&a1;
    *a3 = v24;
    *(void *)a4 = 0;
    if (a2 > v8 + 1)
    {
      LOBYTE(v27) = 46;
      unint64_t v14 = llvm::StringRef::find(v25, (char *)&v27, 1uLL, 0);
      if (v11 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v11;
      }
      if (v11 >= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      else {
        unint64_t v16 = v11;
      }
      unint64_t v17 = (unsigned __int8 *)(v12 + v16);
      uint64_t v18 = v11 - v16;
      if (v14 == -1) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v14 == -1) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17;
      }
      if (v14 == -1) {
        uint64_t v21 = v11;
      }
      else {
        uint64_t v21 = v15;
      }
      unint64_t v27 = 0;
      int AsSignedInteger = llvm::getAsSignedInteger(v12, v21, (llvm::StringRef *)0xA, &v27);
      if (v27 == (int)v27) {
        int v23 = v27;
      }
      else {
        int v23 = 0;
      }
      if (AsSignedInteger) {
        int v23 = 0;
      }
      *(_DWORD *)a4 = v23;
      if (v19)
      {
        unint64_t v27 = 0;
        if ((llvm::getAsUnsignedInteger(v20, v19, 0xAu, &v27) & 1) == 0 && !HIDWORD(v27)) {
          *(_DWORD *)(a4 + 4) = v27;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD759204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v9[2] = a4;
  unint64_t v5 = sub_1CD483108(a1, (unint64_t)v9);
  uint64_t v6 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
  long long v7 = *(_OWORD *)v5;
  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)uint64_t v6 = v7;
  LODWORD(v6) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(void *)a1 + 24 * v6 - 24;
}

char *sub_1CD759274(uint64_t a1, unsigned int *a2, void **a3)
{
  unint64_t v5 = sub_1CD67E7AC(a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v8 = v5;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((void *)v6 + 4) = **a3;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    *((_DWORD *)v6 + 17) = 16;
    uint64_t v9 = v12;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v9;
    *unint64_t v8 = (uint64_t)v6;
    uint64_t v10 = **(void **)a1;
    unint64_t v11 = (uint64_t *)v6;
    if (v10)
    {
      *(void *)a1 = v10;
      unint64_t v11 = (uint64_t *)*v8;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_1CD75933C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v6 = v4;
  sub_1CCCF783C(a1, &v6, a3, 4);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)a1 = &unk_1F263C9C0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a1 + 224;
  *(void *)(a1 + 216) = 0x400000000;
  *(void *)(a1 + 256) = a1 + 272;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 1;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 408) = 0;
  *(void *)(a1 + 400) = 0;
  return a1;
}

uint64_t sub_1CD75941C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v6 = v4;
  sub_1CCCF783C(a1, &v6, a3, 2);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)a1 = &unk_1F263CB00;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_1CD7594BC(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v3[1];
        unint64_t v5 = (uint64_t *)v3[2];
        if (v5 != v3 + 4) {
          free(v5);
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

uint64_t sub_1CD759538(void *a1)
{
  *a1 = &unk_1F263C8A0;
  uint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }

  return sub_1CCCF79B0((uint64_t)a1);
}

uint64_t sub_1CD759598(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    v4[0] = "@";
    v4[1] = 1;
    memset(&v4[2], 0, 24);
    uint64_t v2 = 48 * v1;
    uint64_t v3 = *(void *)result;
    do
    {
      double result = sub_1CD681C28(v3, (uint64_t)v5);
      if ((result & 1) == 0) {
        double result = sub_1CD681C28(v3, (uint64_t)v4);
      }
      v3 += 48;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CD759624(uint64_t a1)
{
  *(void *)a1 = &unk_1F263CB00;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 240), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 216), 8);
  uint64_t v3 = (void **)(a1 + 192);
  sub_1CB8338B8(&v3);
  return sub_1CD759538((void *)a1);
}

uint64_t sub_1CD759698(uint64_t a1)
{
  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  sub_1CD4515D0(&v4);
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t *sub_1CD759730(uint64_t *a1)
{
  MEMORY[0x1D25D9CD0](a1[2], 8);
  uint64_t v2 = (llvm::ItaniumManglingCanonicalizer *)a1[1];
  a1[1] = 0;
  if (v2)
  {
    llvm::ItaniumManglingCanonicalizer::~ItaniumManglingCanonicalizer(v2);
    MEMORY[0x1D25D9CE0]();
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *sub_1CD7597B8(uint64_t *a1, const void **a2)
{
  long long v7 = 0;
  char v4 = sub_1CD759820(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD759938((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
    _OWORD v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1CD759820(uint64_t *a1, const void **a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int v7 = sub_1CD0B03C8(*a2, (uint64_t)a2[1] + (void)*a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = v7 & v9;
      uint64_t v12 = v6 + 24 * (v7 & v9);
      unint64_t v13 = *(const void **)v12;
      if (*(void *)v12 == -2)
      {
        if (*a2 == (const void *)-2) {
          goto LABEL_18;
        }
      }
      else if (v13 == (const void *)-1)
      {
        if (*a2 == (const void *)-1) {
          goto LABEL_18;
        }
      }
      else
      {
        size_t v14 = (size_t)a2[1];
        if (v14 == *(void *)(v12 + 8) && (!v14 || !memcmp(*a2, *(const void **)v12, v14)))
        {
LABEL_18:
          uint64_t result = 1;
          goto LABEL_19;
        }
      }
      if (v13 == (const void *)-1) {
        break;
      }
      if (v8) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == (const void *)-2;
      }
      if (v16) {
        uint64_t v8 = v6 + 24 * v11;
      }
      unsigned int v7 = i + v11;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_19:
  *a3 = v12;
  return result;
}

void *sub_1CD759938(uint64_t a1, uint64_t a2, const void **a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD7599E8(a1, v7);
  int v9 = 0;
  sub_1CD759820((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CD7599E8(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD759AC4(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC4A20;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD759AC4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      _OWORD *v7 = xmmword_1CFAC4A20;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD759820((uint64_t *)v5, (const void **)a2, &v10);
      int v9 = v10;
      _OWORD *v10 = *(_OWORD *)a2;
      *((void *)v9 + 2) = *(void *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1CD759B80(_DWORD *a1)
{
  int v2 = a1[2];
  uint64_t result = (_DWORD *)sub_1CD759598((uint64_t)a1);
  int v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v5)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = 48 * v5;
      do
      {
        *(void *)(v6 + 32) = 0;
        *(_OWORD *)uint64_t v6 = 0uLL;
        *(_OWORD *)(v6 + 16) = 0uLL;
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    return sub_1CCCF7910(a1, v5);
  }
  return result;
}

void *sub_1CD759C38(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD759D14(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 48 * v10;
    do
    {
      result[4] = 0;
      *(_OWORD *)uint64_t result = 0uLL;
      *((_OWORD *)result + 1) = 0uLL;
      result += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD759D14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = 48 * v6;
    do
    {
      *(void *)(v7 + 32) = 0;
      *(_OWORD *)uint64_t v7 = 0uLL;
      *(_OWORD *)(v7 + 16) = 0uLL;
      v7 += 48;
      v8 -= 48;
    }
    while (v8);
  }
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12[0] = "@";
  v12[1] = 1;
  memset(&v12[2], 0, 24);
  while (a2 != a3)
  {
    uint64_t result = sub_1CD681C28(a2, (uint64_t)v13);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1CD681C28(a2, (uint64_t)v12);
      if ((result & 1) == 0)
      {
        uint64_t v15 = 0;
        uint64_t result = sub_1CD759E10(*(void *)v5, *(_DWORD *)(v5 + 16), a2, &v15);
        uint64_t v9 = v15;
        long long v10 = *(_OWORD *)a2;
        long long v11 = *(_OWORD *)(a2 + 16);
        *(void *)(v15 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)uint64_t v9 = v10;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 40) = *(void *)(a2 + 40);
        ++*(_DWORD *)(v5 + 8);
      }
    }
    a2 += 48;
  }
  return result;
}

uint64_t sub_1CD759E10(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (a2)
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    uint64_t v5 = 1;
    v14[0] = "@";
    v14[1] = 1;
    memset(&v14[2], 0, 24);
    int v9 = a2 - 1;
    unsigned int v10 = (a2 - 1) & sub_1CD681950(a3);
    uint64_t v11 = a1 + 48 * v10;
    if (!sub_1CD681C28(a3, v11))
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (!sub_1CD681C28(v11, (uint64_t)v15))
      {
        if (sub_1CD681C28(v11, (uint64_t)v14) && v12 == 0) {
          uint64_t v12 = v11;
        }
        unsigned int v10 = (v10 + v13) & v9;
        uint64_t v11 = a1 + 48 * v10;
        uint64_t v5 = 1;
        ++v13;
        if (sub_1CD681C28(a3, v11)) {
          goto LABEL_5;
        }
      }
      uint64_t v5 = 0;
      if (v12) {
        uint64_t v11 = v12;
      }
    }
LABEL_5:
    *a4 = v11;
  }
  else
  {
    uint64_t v5 = 0;
    *a4 = 0;
  }
  return v5;
}

uint64_t sub_1CD759F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CD759E10(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
  uint64_t v5 = v9;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD759FB0(a1, a2, v9);
    uint64_t v7 = *(void *)(a2 + 32);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v8;
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = 0;
  }
  return v5;
}

uint64_t sub_1CD759FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD759C38(a1, v6);
  *(void *)&v9[0] = 0;
  sub_1CD759E10(*(void *)a1, *(_DWORD *)(a1 + 16), a2, (uint64_t *)v9);
  a3 = *(void *)&v9[0];
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (!sub_1CD681C28(a3, (uint64_t)v9)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CD75A080(uint64_t *a1)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  v4[0] = "@";
  v4[1] = 1;
  memset(&v4[2], 0, 24);
  uint64_t result = *a1;
  if (result != a1[1])
  {
    do
    {
      if (!sub_1CD681C28(result, (uint64_t)v5))
      {
        uint64_t result = sub_1CD681C28(*a1, (uint64_t)v4);
        if (!result) {
          break;
        }
      }
      uint64_t v3 = a1[1];
      uint64_t result = *a1 + 48;
      *a1 = result;
    }
    while (result != v3);
  }
  return result;
}

uint64_t *sub_1CD75A110(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(v6 + v7 - 40) = v6 + v7 - 24;
      uint64_t result = (uint64_t *)(v6 + v7 - 40);
      *(void *)(v6 + v7 - 32) = 0x100000000;
      if (*(_DWORD *)(v4 + v7 - 32)) {
        uint64_t result = (uint64_t *)sub_1CD4683C8((uint64_t)result, v4 + v7 - 40);
      }
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD75A1E0(void *a1, _OWORD *a2, _DWORD *a3)
{
  long long v10 = *a2;
  int v11 = 0;
  sub_1CD69C76C((uint64_t)a1, (const void **)&v10, &v11, (uint64_t)v12);
  uint64_t v6 = (char **)(a1 + 3);
  if (!v13) {
    return (uint64_t)&(*v6)[24 * *((unsigned int *)v12[0] + 4)];
  }
  unint64_t v7 = a1[4];
  *((_DWORD *)v12[0] + 4) = -1431655765 * ((v7 - a1[3]) >> 3);
  v12[0] = a2;
  *(void *)&long long v10 = a3;
  if (v7 >= a1[5])
  {
    uint64_t v8 = sub_1CCCFE184(v6, (uint64_t)&std::piecewise_construct, v12, (_DWORD **)&v10);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *a2;
    *(_DWORD *)(v7 + 16) = *a3;
    uint64_t v8 = (char *)(v7 + 24);
  }
  a1[4] = v8;
  return (uint64_t)(v8 - 24);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaBlockInfo(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  int v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  uint64_t v3 = (char *)this + 1048;
  sub_1CCD07894(8u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (uint64_t)this + 1048, "Meta", 4);
  sub_1CCD07964(1u, v2, (uint64_t)v3, "Container info", 14);
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x228uLL);
  v4->__shared_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v4[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[4].__shared_owners_ = 0u;
  v4[5].std::__shared_count = 0u;
  *(_OWORD *)&v4[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[6].__shared_owners_ = 0u;
  v4[7].std::__shared_count = 0u;
  *(_OWORD *)&v4[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[8].__shared_owners_ = 0u;
  v4[9].std::__shared_count = 0u;
  *(_OWORD *)&v4[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[10].__shared_owners_ = 0u;
  v4[11].std::__shared_count = 0u;
  *(_OWORD *)&v4[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[12].__shared_owners_ = 0u;
  v4[13].std::__shared_count = 0u;
  *(_OWORD *)&v4[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[14].__shared_owners_ = 0u;
  v4[15].std::__shared_count = 0u;
  *(_OWORD *)&v4[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[16].__shared_owners_ = 0u;
  v4[17].std::__shared_count = 0u;
  *(_OWORD *)&v4[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[18].__shared_owners_ = 0u;
  v4[19].std::__shared_count = 0u;
  *(_OWORD *)&v4[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[20].__shared_owners_ = 0u;
  v4[21].std::__shared_count = 0u;
  *(_OWORD *)&v4[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[22].__shared_owners_ = 0u;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = xmmword_1CFAC6560;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1].__shared_weak_owners_;
  *(_OWORD *)&v4[2].__shared_owners_ = xmmword_1CFAC6720;
  v4[3].std::__shared_count = (std::__shared_count)vdupq_n_s64(2uLL);
  v4[1].__shared_owners_ = 0x2000000003;
  uint64_t v6 = v4 + 1;
  unint64_t v7 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 212) = sub_1CC207590(v2, 8, (uint64_t)&v6);
  uint64_t v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaRemarkVersion(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  int v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1CCD07964(2u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (uint64_t)this + 1048, "Remark version", 14);
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x228uLL);
  v3->__shared_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v3[3].std::__shared_count = 0u;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  *(_OWORD *)&v3[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[6].__shared_owners_ = 0u;
  v3[7].std::__shared_count = 0u;
  *(_OWORD *)&v3[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[8].__shared_owners_ = 0u;
  v3[9].std::__shared_count = 0u;
  *(_OWORD *)&v3[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[10].__shared_owners_ = 0u;
  v3[11].std::__shared_count = 0u;
  *(_OWORD *)&v3[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[12].__shared_owners_ = 0u;
  v3[13].std::__shared_count = 0u;
  *(_OWORD *)&v3[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[14].__shared_owners_ = 0u;
  v3[15].std::__shared_count = 0u;
  *(_OWORD *)&v3[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[16].__shared_owners_ = 0u;
  v3[17].std::__shared_count = 0u;
  *(_OWORD *)&v3[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[18].__shared_owners_ = 0u;
  v3[19].std::__shared_count = 0u;
  *(_OWORD *)&v3[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[20].__shared_owners_ = 0u;
  v3[21].std::__shared_count = 0u;
  *(_OWORD *)&v3[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[22].__shared_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_weak_owners_ = xmmword_1CFAC6580;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1].__shared_weak_owners_;
  *(_OWORD *)&v3[2].__shared_owners_ = xmmword_1CFAC6720;
  v3[1].__shared_owners_ = 0x2000000002;
  uint64_t v5 = v3 + 1;
  uint64_t v6 = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 213) = sub_1CC207590(v2, 8, (uint64_t)&v5);
  uint64_t v4 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

llvm::raw_ostream *llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaRemarkVersion(llvm::remarks::BitstreamRemarkSerializerHelper *this, uint64_t a2)
{
  *((_DWORD *)this + 264) = 0;
  if (!*((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **((void **)this + 131) = 2;
  unsigned int v3 = *((_DWORD *)this + 264) + 1;
  *((_DWORD *)this + 264) = v3;
  if (v3 >= *((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 131) + 8 * v3) = a2;
  uint64_t v4 = (*((_DWORD *)this + 264) + 1);
  *((_DWORD *)this + 264) = v4;
  uint64_t v5 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  unsigned int v6 = *((_DWORD *)this + 426);
  uint64_t v7 = *((void *)this + 131);

  return sub_1CC206E90(v5, v6, v7, v4, 0, 0, 0);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaStrTab(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  int v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1CCD07964(3u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (uint64_t)this + 1048, "String table", 12);
  unsigned int v3 = (std::__shared_weak_count *)operator new(0x228uLL);
  v3->__shared_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v3[3].std::__shared_count = 0u;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  *(_OWORD *)&v3[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[6].__shared_owners_ = 0u;
  v3[7].std::__shared_count = 0u;
  *(_OWORD *)&v3[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[8].__shared_owners_ = 0u;
  v3[9].std::__shared_count = 0u;
  *(_OWORD *)&v3[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[10].__shared_owners_ = 0u;
  v3[11].std::__shared_count = 0u;
  *(_OWORD *)&v3[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[12].__shared_owners_ = 0u;
  v3[13].std::__shared_count = 0u;
  *(_OWORD *)&v3[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[14].__shared_owners_ = 0u;
  v3[15].std::__shared_count = 0u;
  *(_OWORD *)&v3[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[16].__shared_owners_ = 0u;
  v3[17].std::__shared_count = 0u;
  *(_OWORD *)&v3[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[18].__shared_owners_ = 0u;
  v3[19].std::__shared_count = 0u;
  *(_OWORD *)&v3[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[20].__shared_owners_ = 0u;
  v3[21].std::__shared_count = 0u;
  *(_OWORD *)&v3[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[22].__shared_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_weak_owners_ = xmmword_1CFAC6620;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1].__shared_weak_owners_;
  *(_OWORD *)&v3[2].__shared_owners_ = xmmword_1CFAC67E0;
  v3[1].__shared_owners_ = 0x2000000002;
  uint64_t v5 = v3 + 1;
  unsigned int v6 = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 214) = sub_1CC207590(v2, 8, (uint64_t)&v5);
  uint64_t v4 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaStrTab(llvm::remarks::BitstreamRemarkSerializerHelper *this, uint64_t ***a2)
{
  *((_DWORD *)this + 264) = 0;
  if (!*((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **((void **)this + 131) = 3;
  ++*((_DWORD *)this + 264);
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = v15;
  int v13 = 0;
  unsigned int v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  llvm::remarks::StringTable::serialize(a2, (llvm::raw_ostream *)&v6);
  char v3 = *((unsigned char *)v14 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (const char *)v14;
  }
  else {
    uint64_t v4 = (const char *)*v14;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3 & 0x7F;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  sub_1CC206E90((llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), *((_DWORD *)this + 428), *((void *)this + 131), *((unsigned int *)this + 264), v4, v5, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v6);
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaExternalFile(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  int v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1CCD07964(4u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (uint64_t)this + 1048, "External File", 13);
  char v3 = (std::__shared_weak_count *)operator new(0x228uLL);
  v3->__shared_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v3[3].std::__shared_count = 0u;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  *(_OWORD *)&v3[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[6].__shared_owners_ = 0u;
  v3[7].std::__shared_count = 0u;
  *(_OWORD *)&v3[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[8].__shared_owners_ = 0u;
  v3[9].std::__shared_count = 0u;
  *(_OWORD *)&v3[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[10].__shared_owners_ = 0u;
  v3[11].std::__shared_count = 0u;
  *(_OWORD *)&v3[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[12].__shared_owners_ = 0u;
  v3[13].std::__shared_count = 0u;
  *(_OWORD *)&v3[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[14].__shared_owners_ = 0u;
  v3[15].std::__shared_count = 0u;
  *(_OWORD *)&v3[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[16].__shared_owners_ = 0u;
  v3[17].std::__shared_count = 0u;
  *(_OWORD *)&v3[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[18].__shared_owners_ = 0u;
  v3[19].std::__shared_count = 0u;
  *(_OWORD *)&v3[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[20].__shared_owners_ = 0u;
  v3[21].std::__shared_count = 0u;
  *(_OWORD *)&v3[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[22].__shared_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_weak_owners_ = xmmword_1CFAC65A0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1].__shared_weak_owners_;
  *(_OWORD *)&v3[2].__shared_owners_ = xmmword_1CFAC67E0;
  v3[1].__shared_owners_ = 0x2000000002;
  uint64_t v5 = v3 + 1;
  unsigned int v6 = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 215) = sub_1CC207590(v2, 8, (uint64_t)&v5);
  uint64_t v4 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

llvm::raw_ostream *llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaExternalFile(uint64_t a1, const char *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 1056) = 0;
  if (!*(_DWORD *)(a1 + 1060)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **(void **)(a1 + 1048) = 4;
  uint64_t v6 = (*(_DWORD *)(a1 + 1056) + 1);
  *(_DWORD *)(a1 + 1056) = v6;
  int v7 = (llvm::raw_ostream *)(a1 + 1576);
  unsigned int v8 = *(_DWORD *)(a1 + 1720);
  uint64_t v9 = *(void *)(a1 + 1048);

  return sub_1CC206E90(v7, v8, v9, v6, a2, a3, 0);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupRemarkBlockInfo(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  int v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  char v3 = (char *)this + 1048;
  sub_1CCD07894(9u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (uint64_t)this + 1048, "Remark", 6);
  sub_1CCD07964(5u, v2, (uint64_t)v3, "Remark header", 13);
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x228uLL);
  v4->__shared_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v4[5].std::__shared_count = 0u;
  *(_OWORD *)&v4[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[6].__shared_owners_ = 0u;
  v4[7].std::__shared_count = 0u;
  *(_OWORD *)&v4[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[8].__shared_owners_ = 0u;
  v4[9].std::__shared_count = 0u;
  *(_OWORD *)&v4[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[10].__shared_owners_ = 0u;
  v4[11].std::__shared_count = 0u;
  *(_OWORD *)&v4[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[12].__shared_owners_ = 0u;
  v4[13].std::__shared_count = 0u;
  *(_OWORD *)&v4[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[14].__shared_owners_ = 0u;
  v4[15].std::__shared_count = 0u;
  *(_OWORD *)&v4[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[16].__shared_owners_ = 0u;
  v4[17].std::__shared_count = 0u;
  *(_OWORD *)&v4[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[18].__shared_owners_ = 0u;
  v4[19].std::__shared_count = 0u;
  *(_OWORD *)&v4[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[20].__shared_owners_ = 0u;
  v4[21].std::__shared_count = 0u;
  *(_OWORD *)&v4[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[22].__shared_owners_ = 0u;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = xmmword_1CFAC6750;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1].__shared_weak_owners_;
  *(_OWORD *)&v4[2].__shared_owners_ = xmmword_1CFAC6590;
  v4[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC4810;
  *(_OWORD *)&v4[3].__shared_weak_owners_ = xmmword_1CFAC4810;
  *(_OWORD *)&v4[4].__shared_owners_ = xmmword_1CFAC4740;
  v4[1].__shared_owners_ = 0x2000000005;
  uint64_t v22 = v4 + 1;
  int v23 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 216) = sub_1CC207590(v2, 9, (uint64_t)&v22);
  uint64_t v5 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_1CCD07964(6u, v2, (uint64_t)v3, "Remark debug location", 21);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x228uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v6[4].__shared_owners_ = 0u;
  v6[5].std::__shared_count = 0u;
  *(_OWORD *)&v6[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[6].__shared_owners_ = 0u;
  v6[7].std::__shared_count = 0u;
  *(_OWORD *)&v6[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[8].__shared_owners_ = 0u;
  v6[9].std::__shared_count = 0u;
  *(_OWORD *)&v6[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[10].__shared_owners_ = 0u;
  v6[11].std::__shared_count = 0u;
  *(_OWORD *)&v6[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[12].__shared_owners_ = 0u;
  v6[13].std::__shared_count = 0u;
  *(_OWORD *)&v6[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[14].__shared_owners_ = 0u;
  v6[15].std::__shared_count = 0u;
  *(_OWORD *)&v6[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[16].__shared_owners_ = 0u;
  v6[17].std::__shared_count = 0u;
  *(_OWORD *)&v6[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[18].__shared_owners_ = 0u;
  v6[19].std::__shared_count = 0u;
  *(_OWORD *)&v6[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[20].__shared_owners_ = 0u;
  v6[21].std::__shared_count = 0u;
  *(_OWORD *)&v6[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[22].__shared_owners_ = 0u;
  *(_OWORD *)&v6[1].__shared_weak_owners_ = xmmword_1CFAC6760;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1].__shared_weak_owners_;
  *(_OWORD *)&v6[2].__shared_owners_ = xmmword_1CFAC4760;
  v6[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC6720;
  *(_OWORD *)&v6[3].__shared_weak_owners_ = xmmword_1CFAC6720;
  v6[1].__shared_owners_ = 0x2000000004;
  BOOL v20 = v6 + 1;
  uint64_t v21 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 217) = sub_1CC207590(v2, 9, (uint64_t)&v20);
  int v7 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_1CCD07964(7u, v2, (uint64_t)v3, "Remark hotness", 14);
  unsigned int v8 = (std::__shared_weak_count *)operator new(0x228uLL);
  v8->__shared_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  v8[3].std::__shared_count = 0u;
  *(_OWORD *)&v8[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[4].__shared_owners_ = 0u;
  v8[5].std::__shared_count = 0u;
  *(_OWORD *)&v8[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[6].__shared_owners_ = 0u;
  v8[7].std::__shared_count = 0u;
  *(_OWORD *)&v8[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[8].__shared_owners_ = 0u;
  v8[9].std::__shared_count = 0u;
  *(_OWORD *)&v8[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[10].__shared_owners_ = 0u;
  v8[11].std::__shared_count = 0u;
  *(_OWORD *)&v8[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[12].__shared_owners_ = 0u;
  v8[13].std::__shared_count = 0u;
  *(_OWORD *)&v8[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[14].__shared_owners_ = 0u;
  v8[15].std::__shared_count = 0u;
  *(_OWORD *)&v8[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[16].__shared_owners_ = 0u;
  v8[17].std::__shared_count = 0u;
  *(_OWORD *)&v8[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[18].__shared_owners_ = 0u;
  v8[19].std::__shared_count = 0u;
  *(_OWORD *)&v8[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[20].__shared_owners_ = 0u;
  v8[21].std::__shared_count = 0u;
  *(_OWORD *)&v8[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[22].__shared_owners_ = 0u;
  *(_OWORD *)&v8[1].__shared_weak_owners_ = xmmword_1CFAC66C0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1].__shared_weak_owners_;
  *(_OWORD *)&v8[2].__shared_owners_ = xmmword_1CFAC4740;
  v8[1].__shared_owners_ = 0x2000000002;
  uint64_t v18 = v8 + 1;
  uint64_t v19 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 218) = sub_1CC207590(v2, 9, (uint64_t)&v18);
  uint64_t v9 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_1CCD07964(8u, v2, (uint64_t)v3, "Argument with debug location", 28);
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x228uLL);
  v10->__shared_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v10[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[6].__shared_owners_ = 0u;
  v10[7].std::__shared_count = 0u;
  *(_OWORD *)&v10[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[8].__shared_owners_ = 0u;
  v10[9].std::__shared_count = 0u;
  *(_OWORD *)&v10[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[10].__shared_owners_ = 0u;
  v10[11].std::__shared_count = 0u;
  *(_OWORD *)&v10[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[12].__shared_owners_ = 0u;
  v10[13].std::__shared_count = 0u;
  *(_OWORD *)&v10[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[14].__shared_owners_ = 0u;
  v10[15].std::__shared_count = 0u;
  *(_OWORD *)&v10[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[16].__shared_owners_ = 0u;
  v10[17].std::__shared_count = 0u;
  *(_OWORD *)&v10[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[18].__shared_owners_ = 0u;
  v10[19].std::__shared_count = 0u;
  *(_OWORD *)&v10[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[20].__shared_owners_ = 0u;
  v10[21].std::__shared_count = 0u;
  *(_OWORD *)&v10[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[22].__shared_owners_ = 0u;
  *(_OWORD *)&v10[1].__shared_weak_owners_ = xmmword_1CFAC6660;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1].__shared_weak_owners_;
  *(_OWORD *)&v10[2].__shared_owners_ = xmmword_1CFAC4760;
  v10[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC4760;
  *(_OWORD *)&v10[3].__shared_weak_owners_ = xmmword_1CFAC4760;
  *(_OWORD *)&v10[4].__shared_owners_ = xmmword_1CFAC6720;
  v10[5].std::__shared_count = (std::__shared_count)xmmword_1CFAC6720;
  v10[1].__shared_owners_ = 0x2000000006;
  uint64_t v16 = v10 + 1;
  unint64_t v17 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 219) = sub_1CC207590(v2, 9, (uint64_t)&v16);
  char v11 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_1CCD07964(9u, v2, (uint64_t)v3, "Argument", 8);
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x228uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2608A00;
  *(_OWORD *)&v12[1].__shared_weak_owners_ = xmmword_1CFAC67B0;
  *(_OWORD *)&v12[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[4].__shared_owners_ = 0u;
  v12[5].std::__shared_count = 0u;
  *(_OWORD *)&v12[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[6].__shared_owners_ = 0u;
  v12[7].std::__shared_count = 0u;
  *(_OWORD *)&v12[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[8].__shared_owners_ = 0u;
  v12[9].std::__shared_count = 0u;
  *(_OWORD *)&v12[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[10].__shared_owners_ = 0u;
  v12[11].std::__shared_count = 0u;
  *(_OWORD *)&v12[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[12].__shared_owners_ = 0u;
  v12[13].std::__shared_count = 0u;
  *(_OWORD *)&v12[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[14].__shared_owners_ = 0u;
  v12[15].std::__shared_count = 0u;
  *(_OWORD *)&v12[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[16].__shared_owners_ = 0u;
  v12[17].std::__shared_count = 0u;
  *(_OWORD *)&v12[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[18].__shared_owners_ = 0u;
  v12[19].std::__shared_count = 0u;
  *(_OWORD *)&v12[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[20].__shared_owners_ = 0u;
  v12[21].std::__shared_count = 0u;
  *(_OWORD *)&v12[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[22].__shared_owners_ = 0u;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&v12[1].__shared_weak_owners_;
  *(_OWORD *)&v12[2].__shared_owners_ = xmmword_1CFAC4760;
  v12[3].std::__shared_count = (std::__shared_count)xmmword_1CFAC4760;
  v12[1].__shared_owners_ = 0x2000000003;
  uint64_t v14 = v12 + 1;
  uint64_t v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  *((void *)this + 220) = sub_1CC207590(v2, 9, (uint64_t)&v14);
  int v13 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupBlockInfo(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  uint64_t v2 = 0;
  char v3 = (char *)this + 1576;
  do
    sub_1CC202230((uint64_t)v3, aRmrk[v2++], 8);
  while (v2 != 4);
  sub_1CC1F77A4((uint64_t)v3, 0, 2u);
  *((_DWORD *)this + 403) = -1;
  sub_1CC207620((uint64_t)this + 1664, *((uint64_t **)this + 208));
  llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaBlockInfo(this);
  int v4 = *((_DWORD *)this + 422);
  if (v4)
  {
    if (v4 == 1)
    {
      llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaRemarkVersion(this);
    }
    else
    {
      if (v4 != 2) {
        goto LABEL_6;
      }
      llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaRemarkVersion(this);
      llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaStrTab(this);
    }
    llvm::remarks::BitstreamRemarkSerializerHelper::setupRemarkBlockInfo(this);
  }
  else
  {
    llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaStrTab(this);
    llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaExternalFile(this);
  }
LABEL_6:

  sub_1CC1F7D44((off_t)v3);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t ***a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (llvm::raw_ostream *)(a1 + 1576);
  sub_1CC1F77A4(a1 + 1576, 8u, 3u);
  *(_DWORD *)(a1 + 1056) = 0;
  if (!*(_DWORD *)(a1 + 1060)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **(void **)(a1 + 1048) = 1;
  unsigned int v13 = *(_DWORD *)(a1 + 1056) + 1;
  *(_DWORD *)(a1 + 1056) = v13;
  if (v13 >= *(_DWORD *)(a1 + 1060)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 1048) + 8 * v13) = a2;
  unsigned int v14 = *(_DWORD *)(a1 + 1056) + 1;
  *(_DWORD *)(a1 + 1056) = v14;
  if (v14 >= *(_DWORD *)(a1 + 1060)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 1048) + 8 * v14) = *(int *)(a1 + 1688);
  uint64_t v15 = (*(_DWORD *)(a1 + 1056) + 1);
  *(_DWORD *)(a1 + 1056) = v15;
  sub_1CC206E90(v12, *(_DWORD *)(a1 + 1696), *(void *)(a1 + 1048), v15, 0, 0, 0);
  int v16 = *(_DWORD *)(a1 + 1688);
  switch(v16)
  {
    case 2:
      llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaRemarkVersion((llvm::remarks::BitstreamRemarkSerializerHelper *)a1, a3);
      llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaStrTab((llvm::remarks::BitstreamRemarkSerializerHelper *)a1, a5);
      break;
    case 1:
      llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaRemarkVersion((llvm::remarks::BitstreamRemarkSerializerHelper *)a1, a3);
      break;
    case 0:
      llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaStrTab((llvm::remarks::BitstreamRemarkSerializerHelper *)a1, a5);
      llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaExternalFile(a1, *(const char **)a7, *(void *)(a7 + 8));
      break;
  }

  sub_1CC1F7D44((off_t)v12);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::emitRemarkBlock(llvm::remarks::BitstreamRemarkSerializerHelper *this, const llvm::remarks::Remark *a2, llvm::remarks::StringTable *a3)
{
  uint64_t v35 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1CC1F77A4((uint64_t)this + 1576, 9u, 4u);
  *((_DWORD *)this + 264) = 0;
  if (!*((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **((void **)this + 131) = 5;
  unsigned int v6 = *((_DWORD *)this + 264) + 1;
  *((_DWORD *)this + 264) = v6;
  if (v6 >= *((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 131) + 8 * v6) = *(int *)a2;
  ++*((_DWORD *)this + 264);
  llvm::remarks::StringTable::add((uint64_t)a3, *((unsigned __int8 **)a2 + 3), *((void *)a2 + 4), (uint64_t)v36);
  unsigned int v7 = *((_DWORD *)this + 264);
  if (v7 >= *((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 131) + 8 * v7) = v36[0];
  ++*((_DWORD *)this + 264);
  llvm::remarks::StringTable::add((uint64_t)a3, *((unsigned __int8 **)a2 + 1), *((void *)a2 + 2), (uint64_t)v36);
  unsigned int v8 = *((_DWORD *)this + 264);
  if (v8 >= *((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 131) + 8 * v8) = v36[0];
  ++*((_DWORD *)this + 264);
  llvm::remarks::StringTable::add((uint64_t)a3, *((unsigned __int8 **)a2 + 5), *((void *)a2 + 6), (uint64_t)v36);
  unsigned int v9 = *((_DWORD *)this + 264);
  if (v9 >= *((_DWORD *)this + 265)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)this + 131) + 8 * v9) = v36[0];
  uint64_t v10 = (*((_DWORD *)this + 264) + 1);
  *((_DWORD *)this + 264) = v10;
  sub_1CC206E90(v35, *((_DWORD *)this + 432), *((void *)this + 131), v10, 0, 0, 0);
  if (*((unsigned char *)a2 + 80))
  {
    *((_DWORD *)this + 264) = 0;
    if (!*((_DWORD *)this + 265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    **((void **)this + 131) = 6;
    ++*((_DWORD *)this + 264);
    llvm::remarks::StringTable::add((uint64_t)a3, *((unsigned __int8 **)a2 + 7), *((void *)a2 + 8), (uint64_t)v36);
    unsigned int v11 = *((_DWORD *)this + 264);
    if (v11 >= *((_DWORD *)this + 265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 131) + 8 * v11) = v36[0];
    unsigned int v12 = *((_DWORD *)this + 264) + 1;
    *((_DWORD *)this + 264) = v12;
    if (v12 >= *((_DWORD *)this + 265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 131) + 8 * v12) = *((unsigned int *)a2 + 18);
    unsigned int v13 = *((_DWORD *)this + 264) + 1;
    *((_DWORD *)this + 264) = v13;
    if (v13 >= *((_DWORD *)this + 265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 131) + 8 * v13) = *((unsigned int *)a2 + 19);
    uint64_t v14 = (*((_DWORD *)this + 264) + 1);
    *((_DWORD *)this + 264) = v14;
    sub_1CC206E90(v35, *((_DWORD *)this + 434), *((void *)this + 131), v14, 0, 0, 0);
  }
  if (*((unsigned char *)a2 + 96))
  {
    uint64_t v15 = *((void *)a2 + 11);
    *((_DWORD *)this + 264) = 0;
    if (!*((_DWORD *)this + 265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    **((void **)this + 131) = 7;
    unsigned int v16 = *((_DWORD *)this + 264) + 1;
    *((_DWORD *)this + 264) = v16;
    if (v16 >= *((_DWORD *)this + 265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 131) + 8 * v16) = v15;
    uint64_t v17 = (*((_DWORD *)this + 264) + 1);
    *((_DWORD *)this + 264) = v17;
    sub_1CC206E90(v35, *((_DWORD *)this + 436), *((void *)this + 131), v17, 0, 0, 0);
  }
  uint64_t v18 = *((unsigned int *)a2 + 28);
  if (v18)
  {
    uint64_t v19 = *((void *)a2 + 13);
    BOOL v20 = (unsigned int *)(v19 + (v18 << 6));
    uint64_t v21 = (unsigned int *)(v19 + 52);
    do
    {
      *((_DWORD *)this + 264) = 0;
      uint64_t v22 = v21 - 13;
      llvm::remarks::StringTable::add((uint64_t)a3, *(unsigned __int8 **)(v21 - 13), *(void *)(v21 - 11), (uint64_t)v36);
      uint64_t v23 = v36[0];
      llvm::remarks::StringTable::add((uint64_t)a3, *(unsigned __int8 **)(v21 - 9), *(void *)(v21 - 7), (uint64_t)v36);
      uint64_t v24 = v36[0];
      int v25 = *((unsigned __int8 *)v21 + 4);
      if (*((unsigned char *)v21 + 4)) {
        uint64_t v26 = 8;
      }
      else {
        uint64_t v26 = 9;
      }
      unint64_t v27 = *((unsigned int *)this + 264);
      if (v27 >= *((unsigned int *)this + 265)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 131) + 8 * v27) = v26;
      unsigned int v28 = *((_DWORD *)this + 264) + 1;
      *((_DWORD *)this + 264) = v28;
      if (v28 >= *((_DWORD *)this + 265)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 131) + 8 * v28) = v23;
      unsigned int v29 = *((_DWORD *)this + 264) + 1;
      *((_DWORD *)this + 264) = v29;
      if (v29 >= *((_DWORD *)this + 265)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 131) + 8 * v29) = v24;
      unsigned int v30 = *((_DWORD *)this + 264) + 1;
      *((_DWORD *)this + 264) = v30;
      if (v25)
      {
        llvm::remarks::StringTable::add((uint64_t)a3, *(unsigned __int8 **)(v21 - 5), *(void *)(v21 - 3), (uint64_t)v36);
        unint64_t v31 = *((unsigned int *)this + 264);
        if (v31 >= *((unsigned int *)this + 265)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 131) + 8 * v31) = v36[0];
        unsigned int v32 = *((_DWORD *)this + 264) + 1;
        *((_DWORD *)this + 264) = v32;
        if (v32 >= *((_DWORD *)this + 265)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 131) + 8 * v32) = *(v21 - 1);
        unsigned int v33 = *((_DWORD *)this + 264) + 1;
        *((_DWORD *)this + 264) = v33;
        if (v33 >= *((_DWORD *)this + 265)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 131) + 8 * v33) = *v21;
        unsigned int v30 = *((_DWORD *)this + 264) + 1;
        *((_DWORD *)this + 264) = v30;
        BOOL v34 = (unsigned int *)((char *)this + 1752);
      }
      else
      {
        BOOL v34 = (unsigned int *)((char *)this + 1760);
      }
      sub_1CC206E90(v35, *v34, *((void *)this + 131), v30, 0, 0, 0);
      v21 += 16;
    }
    while (v22 + 16 != v20);
  }
  sub_1CC1F7D44((off_t)v35);
}

llvm::raw_ostream *llvm::remarks::BitstreamRemarkSerializer::emit(llvm::remarks::BitstreamRemarkSerializer *this, const llvm::remarks::Remark *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 168))
  {
    BOOL v4 = *((_DWORD *)this + 466) == 2;
    uint64_t v5 = *((void *)this + 2);
    v8[0] = &unk_1F263D120;
    v8[1] = v5;
    if (v4) {
      unsigned int v6 = (char *)this + 32;
    }
    else {
      unsigned int v6 = 0;
    }
    v9[0] = 0;
    char v10 = 0;
    unsigned int v11 = (char *)this + 176;
    unsigned int v12 = v6;
    BOOL v13 = v4;
    char v14 = 0;
    char v15 = 0;
    llvm::remarks::BitstreamMetaSerializer::emit((llvm::remarks::BitstreamMetaSerializer *)v8);
    *((unsigned char *)this + 168) = 1;
    v8[0] = &unk_1F263D120;
    if (v10) {
      sub_1CD75C134((uint64_t)v9);
    }
  }
  llvm::remarks::BitstreamRemarkSerializerHelper::emitRemarkBlock((llvm::remarks::BitstreamRemarkSerializer *)((char *)this + 176), a2, (llvm::remarks::BitstreamRemarkSerializer *)((char *)this + 32));
  uint64_t result = llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), *((const char **)this + 22), *((void *)this + 23));
  *((void *)this + 23) = 0;
  return result;
}

llvm::raw_ostream *llvm::remarks::BitstreamMetaSerializer::emit(llvm::remarks::BitstreamMetaSerializer *this)
{
  llvm::remarks::BitstreamRemarkSerializerHelper::setupBlockInfo(*((llvm::remarks::BitstreamRemarkSerializerHelper **)this
                                                                 + 224));
  uint64_t v2 = *((void *)this + 224);
  char v3 = (uint64_t ***)*((void *)this + 225);
  uint64_t v4 = *((void *)this + 226);
  long long v7 = *(_OWORD *)((char *)this + 1816);
  uint64_t v8 = *((void *)this + 229);
  llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaBlock(v2, 0, 0, 1, v3, v4, (uint64_t)&v7);
  uint64_t v5 = *((void *)this + 224);
  uint64_t result = llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 1), *(const char **)v5, *(void *)(v5 + 8));
  *(void *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_1CD75BFC4(uint64_t a1)
{
  *(void *)a1 = &unk_1F263D120;
  if (*(unsigned char *)(a1 + 1784))
  {
    sub_1CD75C134(a1 + 16);
    *(unsigned char *)(a1 + 1784) = 0;
  }
  return a1;
}

void llvm::remarks::BitstreamRemarkSerializer::metaSerializer()
{
}

void sub_1CD75C0B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F263D120;
  if (*(unsigned char *)(a1 + 1784))
  {
    sub_1CD75C134(a1 + 16);
    *(unsigned char *)(a1 + 1784) = 0;
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD75C134(uint64_t a1)
{
  sub_1CC20BB44(a1 + 1576);
  uint64_t v2 = *(void **)(a1 + 1048);
  if (v2 != (void *)(a1 + 1064)) {
    free(v2);
  }
  if (*(void *)a1 != a1 + 24) {
    free(*(void **)a1);
  }
  return a1;
}

double sub_1CD75C188(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    free(*(void **)a1);
    sub_1CBFFBA64(a1 + 24);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 20) = 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1 + 56;
  *(_DWORD *)(a1 + 52) = 4;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 112) = xmmword_1CD91D2E0;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1CD75C214(uint64_t a1, uint64_t a2)
{
  v9[12] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(void **)a2;
  long long v8 = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_1CC056A04((uint64_t)v9, a2 + 24);
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = v6;
  long long v7 = v4;
  *(void *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = DWORD2(v8);
  sub_1CCD08038(a1 + 24, (uint64_t)v9);
  free(v7);
  sub_1CBFFBA64((uint64_t)v9);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

double sub_1CD75C2F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, long long *a6)
{
  *(void *)a1 = &unk_1F263D120;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 1784) = 0;
  *(void *)(a1 + 1792) = 0;
  *(void *)(a1 + 1800) = a4;
  *(void *)(a1 + 1808) = a5;
  long long v6 = *a6;
  *(void *)(a1 + 1832) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 1816) = v6;
  *(void *)(a1 + 16) = a1 + 40;
  *(_OWORD *)(a1 + 24) = xmmword_1CFB1BC20;
  *(void *)(a1 + 1064) = a1 + 1080;
  *(void *)(a1 + 1072) = 0x4000000000;
  *(void *)(a1 + 1592) = a1 + 16;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1608) = 0x20000000;
  *(void *)(a1 + 1616) = 0;
  *(_DWORD *)(a1 + 1624) = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(void *)(a1 + 1696) = 0;
  *(_DWORD *)(a1 + 1704) = a3;
  *(void *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(unsigned char *)(a1 + 1784) = 1;
  *(void *)(a1 + 1792) = a1 + 16;
  return result;
}

uint64_t llvm::remarks::parseFormat@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  if (a2 > 8)
  {
    if (a2 == 9)
    {
      if (*(void *)result == 0x6165727473746962 && *(unsigned char *)(result + 8) == 109)
      {
        int v5 = 3;
        goto LABEL_6;
      }
    }
    else if (a2 == 11 && *(void *)result == 0x7274732D6C6D6179 && *(void *)(result + 3) == 0x6261747274732D6CLL)
    {
      int v5 = 2;
      goto LABEL_6;
    }
LABEL_21:
    long long v8 = std::generic_category();
    uint64_t v9 = v3;
    sub_1CD5E3960(22, (uint64_t)v8, (uint64_t)"Unknown remark format: '%s'", &v9);
  }
  if (a2 && (a2 != 4 || *(_DWORD *)result != 1819107705)) {
    goto LABEL_21;
  }
  int v5 = 1;
LABEL_6:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v5;
  return result;
}

uint64_t sub_1CD75C600(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  LOBYTE(v5) = 0;
  char v7 = 0;
  llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer(a1, 2, a2, a3, (uint64_t)&v5);
  if (v7)
  {
    free(v5);
    sub_1CBFFBA64((uint64_t)&v6);
    char v7 = 0;
  }
  *(void *)a1 = &unk_1F263D280;
  *(unsigned char *)(a1 + 296) = 0;
  sub_1CD75C188(a1 + 32);
  return a1;
}

uint64_t llvm::remarks::RemarkStreamer::RemarkStreamer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 24) = v4;
  if (*(unsigned char *)(a3 + 16))
  {
    int v5 = (_OWORD *)(a1 + 32);
    if (*(void *)a3) {
      std::string::__init(&v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      memset(&v7, 0, sizeof(v7));
    }
    *int v5 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
    *(void *)(a1 + 48) = *((void *)&v7.__r_.__value_.__l + 2);
    *(unsigned char *)(a1 + 56) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 56) = 0;
  }
  return a1;
}

void llvm::remarks::RemarkStreamer::setFilter()
{
}

uint64_t llvm::remarks::RemarkStreamer::matchesFilter(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 16)) {
    return llvm::Regex::match(a1, a2, a3, 0, 0);
  }
  else {
    return 1;
  }
}

BOOL llvm::remarks::RemarkStreamer::needsSection(llvm::remarks::RemarkStreamer *this)
{
  if (dword_1EBCF0718 == 1) {
    return 1;
  }
  if (dword_1EBCF0718 == 2) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 3);
  if (*(_DWORD *)(v1 + 24)) {
    return 0;
  }
  return (*(_DWORD *)(v1 + 8) & 0xFFFFFFFE) == 2;
}

void sub_1CD75C860(__n128 *a1, int **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCF0698, 0, 0);
  dword_1EBCF0718 = 0;
  qword_1EBCF0720 = (uint64_t)&unk_1F2643C00;
  *(void *)&dword_1EBCF0728 = 0;
  qword_1EBCF0698 = (uint64_t)&unk_1F2609740;
  qword_1EBCF0730 = (uint64_t)&unk_1F2643CF0;
  qword_1EBCF0738 = (uint64_t)&unk_1F26097A8;
  qword_1EBCF0750 = (uint64_t)&qword_1EBCF0738;
  sub_1CD75C950(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF0698);
}

__n128 sub_1CD75C950(__n128 *a1, int **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCF0698, "remarks-section", 0xFuLL);
  __n128 result = *a1;
  xmmword_1EBCF06B8 = (__int128)*a1;
  std::string v7 = *a2;
  dword_1EBCF0718 = **a2;
  byte_1EBCF072C = 1;
  dword_1EBCF0728 = *v7;
  word_1EBCF06A2 = (32 * (*a3 & 3)) | word_1EBCF06A2 & 0xFF9F;
  return result;
}

uint64_t sub_1CD75C9D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    llvm::Regex::Regex((uint64_t)&v5, a2);
    uint64_t v3 = *(void *)a1;
    *(void *)a1 = v5;
    uint64_t v5 = v3;
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v6;
    int v6 = v3;
    llvm::Regex::~Regex((llvm::Regex *)&v5);
  }
  else
  {
    llvm::Regex::Regex(a1, a2);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t *llvm::remarks::StringTable::add@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = *(_DWORD *)(a1 + 12);
  __n128 result = sub_1CD75CC78(a1, a2, a3, &v10);
  std::string v7 = (void *)*result;
  uint64_t v8 = *(void *)*result;
  if (v9) {
    *(void *)(a1 + 120) += v8 + 1;
  }
  *(_DWORD *)a4 = *((_DWORD *)v7 + 2);
  *(void *)(a4 + 8) = v7 + 2;
  *(void *)(a4 + 16) = v8;
  return result;
}

void llvm::remarks::StringTable::serialize(uint64_t ***this, llvm::raw_ostream *a2)
{
  llvm::remarks::StringTable::serialize(this, &v9);
  uint64_t v3 = v9;
  uint64_t v4 = v10;
  if (v9 != v10)
  {
    uint64_t v5 = v9;
    do
    {
      int v6 = *v5;
      unint64_t v7 = (unint64_t)v5[1];
      uint64_t v8 = (void *)*((void *)a2 + 4);
      if (v7 <= *((void *)a2 + 3) - (void)v8)
      {
        if (v7)
        {
          memcpy(v8, v6, (size_t)v5[1]);
          *((void *)a2 + 4) += v7;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v6, (size_t)v5[1]);
      }
      llvm::raw_ostream::write(a2, 0);
      v5 += 2;
    }
    while (v5 != v4);
  }
  if (v3)
  {
    operator delete(v3);
  }
}

void llvm::remarks::StringTable::serialize(uint64_t ***this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((unsigned int *)this + 3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    size_t v5 = 16 * v3;
    int v6 = (char *)operator new(16 * v3);
    *a2 = v6;
    unint64_t v7 = &v6[16 * v3];
    a2[2] = v7;
    bzero(v6, v5);
    a2[1] = v7;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8)
  {
    for (int i = *this; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    int i = *this;
  }
  uint64_t v11 = (uint64_t)&(*this)[v8];
  if (i != (uint64_t **)v11)
  {
    unsigned int v12 = *i;
    do
    {
      BOOL v13 = v12 + 2;
      uint64_t v14 = *v12;
      char v15 = &v6[16 * *((unsigned int *)v12 + 2)];
      *(void *)char v15 = v13;
      *((void *)v15 + 1) = v14;
      do
      {
        uint64_t v16 = i[1];
        ++i;
        unsigned int v12 = v16;
        if (v16) {
          BOOL v17 = v12 + 1 == 0;
        }
        else {
          BOOL v17 = 1;
        }
      }
      while (v17);
    }
    while (i != (uint64_t **)v11);
  }
}

uint64_t *sub_1CD75CC78(uint64_t a1, unsigned __int8 *a2, size_t a3, _DWORD *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  int i = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      uint64_t v11 = i[1];
      ++i;
      uint64_t v10 = v11;
    }
    return i;
  }
  uint64_t v12 = sub_1CB906F34((uint64_t *)(a1 + 24), a3 + 17, 3);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 16;
  if (a3) {
    memcpy((void *)(v12 + 16), a2, a3);
  }
  *(unsigned char *)(v14 + a3) = 0;
  *(void *)uint64_t v13 = a3;
  *(_DWORD *)(v13 + 8) = *a4;
  *int i = v13;
  ++*(_DWORD *)(a1 + 12);
  for (int i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i == -8;
  return i;
}

llvm::yaml::Document **sub_1CD75CD84(llvm::yaml::Document ***a1)
{
  if (llvm::yaml::Document::skip(**a1)) {
    operator new();
  }
  sub_1CCD0D228((uint64_t *)*a1, 0);
  return *a1;
}

llvm::yaml::Output *llvm::remarks::YAMLRemarkSerializer::emit(llvm::remarks::YAMLRemarkSerializer *this, const llvm::remarks::Remark *a2)
{
  uint64_t v3 = a2;
  return sub_1CD75D008((llvm::remarks::YAMLRemarkSerializer *)((char *)this + 168), (uint64_t *)&v3);
}

llvm::yaml::Output *sub_1CD75D008(llvm::yaml::Output *a1, uint64_t *a2)
{
  if (llvm::yaml::Output::preflightDocument(a1, 0))
  {
    (*(void (**)(llvm::yaml::Output *))(*(void *)a1 + 104))(a1);
    sub_1CCD0D97C(a1, a2);
    (*(void (**)(llvm::yaml::Output *))(*(void *)a1 + 112))(a1);
    llvm::yaml::Output::postflightDocument(a1);
  }
  llvm::yaml::Output::endDocuments(a1);
  return a1;
}

void llvm::remarks::YAMLRemarkSerializer::metaSerializer()
{
}

llvm::yaml::Output *llvm::remarks::YAMLStrTabRemarkSerializer::emit(llvm::remarks::YAMLStrTabRemarkSerializer *this, const llvm::remarks::Remark *a2)
{
  if (*((_DWORD *)this + 6) == 1 && !*((unsigned char *)this + 296))
  {
    uint64_t v4 = *((void *)this + 2);
    v7[0] = 0;
    v7[16] = 0;
    (*(void (**)(const llvm::remarks::Remark **__return_ptr, llvm::remarks::YAMLStrTabRemarkSerializer *, uint64_t, unsigned char *))(*(void *)this + 24))(&v8, this, v4, v7);
    (*(void (**)(const llvm::remarks::Remark *))(*(void *)v8 + 16))(v8);
    *((unsigned char *)this + 296) = 1;
    uint64_t v5 = (uint64_t)v8;
    uint64_t v8 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  uint64_t v8 = a2;
  return sub_1CD75D008((llvm::remarks::YAMLStrTabRemarkSerializer *)((char *)this + 168), (uint64_t *)&v8);
}

void llvm::remarks::YAMLStrTabRemarkSerializer::metaSerializer()
{
}

void llvm::remarks::YAMLMetaSerializer::emit(llvm::remarks::YAMLMetaSerializer *this)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  sub_1CCD0D5D4(*((llvm::raw_ostream **)this + 1));
  uint64_t v2 = (llvm::raw_ostream *)*((void *)this + 1);
  v4[0] = 0;
  llvm::raw_ostream::write(v2, (const char *)v4, 8uLL);
  uint64_t v3 = (llvm::raw_ostream *)*((void *)this + 1);
  v4[0] = 0;
  llvm::raw_ostream::write(v3, (const char *)v4, 8uLL);
  if (*((unsigned char *)this + 32)) {
    sub_1CCD0D6E0(*((llvm::raw_ostream **)this + 1), *((void **)this + 2), *((void *)this + 3));
  }
}

void llvm::remarks::YAMLStrTabMetaSerializer::emit(llvm::remarks::YAMLStrTabMetaSerializer *this)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  sub_1CCD0D5D4(*((llvm::raw_ostream **)this + 1));
  uint64_t v2 = (llvm::raw_ostream *)*((void *)this + 1);
  v3[0] = 0;
  llvm::raw_ostream::write(v2, (const char *)v3, 8uLL);
  sub_1CCD0D644(*((llvm::raw_ostream **)this + 1), *((void *)this + 5), 1);
  if (*((unsigned char *)this + 32)) {
    sub_1CCD0D6E0(*((llvm::raw_ostream **)this + 1), *((void **)this + 2), *((void *)this + 3));
  }
}

void sub_1CD75D3C0()
{
}

void sub_1CD75D3D8()
{
}

uint64_t sub_1CD75D3EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    free(*(void **)a1);
    sub_1CBFFBA64(a1 + 24);
    *(unsigned char *)(a1 + 128) = 0;
  }
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t result = sub_1CC056A04(a1 + 24, a2 + 24);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1CD75D460(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 128))
  {
    if (*(unsigned char *)(a1 + 128))
    {
      sub_1CD75C214(a1, a2);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      sub_1CC056A04(a1 + 24, a2 + 24);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(unsigned char *)(a1 + 128) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 128))
  {
    free(*(void **)a1);
    sub_1CBFFBA64(a1 + 24);
    *(unsigned char *)(a1 + 128) = 0;
  }
  return a1;
}

uint64_t sub_1CD75D4F8(llvm::yaml::IO *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v5 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "Args", 0, 0, &v5, &v6);
  if (result)
  {
    sub_1CD75D5A8(a1, a2);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v6);
  }
  return result;
}

uint64_t sub_1CD75D5A8(llvm::yaml::IO *a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = 0;
      if ((*(unsigned int (**)(llvm::yaml::IO *, uint64_t, uint64_t *))(*(void *)a1 + 32))(a1, i, &v10))
      {
        uint64_t v8 = *(void *)a2 + v6;
        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
        sub_1CCD0E29C(a1, v8);
        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v10);
      }
      v6 += 64;
    }
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
}

uint64_t sub_1CD75D74C(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  char v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void, char *, uint64_t *))(*a1 + 120))(a1, a2, 1, 0, &v6, &v7);
  if (result)
  {
    sub_1CD75D7F4(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v7);
  }
  return result;
}

void sub_1CD75D7F4(uint64_t *a1, void *a2)
{
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    BOOL v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    LODWORD(v12) = 0;
    char v16 = 0;
    uint64_t v17 = 0;
    uint64_t v19 = &v20;
    int v18 = 0;
    uint64_t v11 = &unk_1F2646F30;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    llvm::yaml::ScalarTraits<llvm::StringRef,void>::output((uint64_t)a2, a1[1], (llvm::raw_ostream *)&v11);
    unsigned int v4 = v19;
    char v5 = *((unsigned char *)v19 + 23);
    BOOL v6 = v5 < 0;
    if (v5 < 0) {
      unsigned int v4 = *v19;
    }
    uint64_t v7 = (void *)(v5 & 0x7F);
    if (v6) {
      uint64_t v7 = v19[1];
    }
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t *, void *))(*a1 + 224))(a1, v10);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v11);
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
  }
  else
  {
    BOOL v20 = 0;
    uint64_t v21 = 0;
    (*(void (**)(uint64_t *, void **))(*a1 + 224))(a1, &v20);
    uint64_t v8 = llvm::yaml::ScalarTraits<llvm::StringRef,void>::input((uint64_t)v20, v21, a1[1], a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      uint64_t v11 = (void *)v8;
      uint64_t v12 = v9;
      (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v11);
    }
  }
}

void llvm::initializeADCELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF0760, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD10F20;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF0760, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createAggressiveDCEPass(llvm *this)
{
}

void llvm::initializeAlignmentFromAssumptionsPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF08F0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD13808;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF08F0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createAlignmentFromAssumptionsPass(llvm *this)
{
}

uint64_t llvm::AlignmentFromAssumptionsPass::extractAlignmentInfo(llvm::ScalarEvolution **this, llvm::Type ***a2, int a3, llvm::Value **a4, const llvm::SCEV **a5, llvm::detail::IEEEFloat ***a6)
{
  Int64Ty = (llvm::Type *)llvm::Type::getInt64Ty(**a2, (llvm::LLVMContext *)a2);
  uint64_t v13 = &llvm::User::getDescriptor((llvm::User *)a2)[16 * a3];
  uint64_t v14 = *(void **)v13;
  if (**(void **)v13 != 5) {
    return 0;
  }
  int v15 = *((_DWORD *)v14 + 4);
  int v16 = *((unsigned __int8 *)v14 + 20);
  if (v15 != 1734962273 || v16 != 110) {
    return 0;
  }
  uint64_t v19 = *((unsigned int *)v13 + 2);
  uint64_t v20 = *((unsigned int *)v13 + 3);
  uint64_t v21 = (llvm::Value **)&(&a2[4 * v19])[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t v22 = *v21;
  *a4 = *v21;
  *a4 = llvm::Value::stripPointerCastsSameRepresentation(v22);
  SCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getSCEV(*this, v21[4]);
  *a5 = SCEV;
  TruncateOrZeroExtend = llvm::ScalarEvolution::getTruncateOrZeroExtend(*this, (llvm::detail::IEEEFloat **)SCEV, Int64Ty, 0);
  uint64_t result = 0;
  *a5 = (const llvm::SCEV *)TruncateOrZeroExtend;
  if (!*((_WORD *)TruncateOrZeroExtend + 12))
  {
    int v25 = *this;
    if (v20 - v19 == 3) {
      uint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getSCEV(v25, v21[8]);
    }
    else {
      uint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v25, Int64Ty, 0, 0);
    }
    *a6 = (llvm::detail::IEEEFloat **)Constant;
    *a6 = llvm::ScalarEvolution::getTruncateOrZeroExtend(*this, (llvm::detail::IEEEFloat **)Constant, Int64Ty, 0);
    return 1;
  }
  return result;
}

void llvm::initializeAnnotationRemarksLegacyPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF0900, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD14A54;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF0900, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createAnnotationRemarksLegacyPass(llvm *this)
{
}

uint64_t sub_1CD75DCD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD4A7E9C(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD75DD68(a2, v12, a3, a4);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 56 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CD75DD68(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  BOOL v6 = sub_1CD4C9474(a1, a3, a2);
  *BOOL v6 = *a3;
  v6[1] = v6 + 3;
  void v6[2] = 0x400000000;
  if (*(_DWORD *)(a4 + 8)) {
    sub_1CBA6E388((uint64_t)(v6 + 1), (const void **)a4);
  }
  return v6;
}

void llvm::initializeBDCELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF0910, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD163B4;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF0910, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createBitTrackingDCEPass(llvm *this)
{
}

void llvm::initializeCallSiteSplittingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF09E0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD16C70;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF09E0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createCallSiteSplittingPass(llvm *this)
{
}

void llvm::CallSiteSplittingPass::run()
{
}

unint64_t sub_1CD75E04C(uint64_t a1, unint64_t a2)
{
  unint64_t result = sub_1CD75E0C0(a1, a2);
  unsigned int v4 = (void *)(*(void *)a1 + 56 * *(unsigned int *)(a1 + 8));
  *unsigned int v4 = *(void *)result;
  void v4[2] = 0x200000000;
  v4[1] = v4 + 3;
  uint64_t v5 = (uint64_t)(v4 + 1);
  if (*(_DWORD *)(result + 16)) {
    unint64_t result = sub_1CD72EE64(v5, (uint64_t *)(result + 8));
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_1CD75E0C0(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 56 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      sub_1CD75E12C();
    }
    sub_1CD75E12C();
  }
  return a2;
}

void sub_1CD75E12C()
{
}

void sub_1CD75E19C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 56 * v2;
    BOOL v6 = (void *)(a2 + 8);
    uint64_t v7 = v4 + 8;
    do
    {
      uint64_t v8 = v7 - 8;
      *(v6 - 1) = *(void *)(v7 - 8);
      *BOOL v6 = v6 + 2;
      v6[1] = 0x200000000;
      if (*(_DWORD *)(v7 + 8)) {
        BOOL v6 = (void *)sub_1CD72EE64((uint64_t)v6, (uint64_t *)v7);
      }
      v6 += 7;
      v7 += 56;
    }
    while (v8 + 56 != v5);
    uint64_t v9 = *((unsigned int *)a1 + 2);
    if (v9)
    {
      uint64_t v10 = *a1;
      uint64_t v11 = 56 * v9;
      do
      {
        uint64_t v12 = *(void **)(v10 + v11 - 48);
        if ((void *)(v10 + v11 - 32) != v12) {
          free(v12);
        }
        v11 -= 56;
      }
      while (v11);
    }
  }
}

uint64_t sub_1CD75E264(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        uint64_t v10 = *(char **)a1;
        if (v5)
        {
          uint64_t v11 = 56 * v5;
          uint64_t v12 = (uint64_t *)(v4 + 8);
          do
          {
            uint64_t v13 = (uint64_t)(v10 + 8);
            *(void *)uint64_t v10 = *(v12 - 1);
            v10 += 56;
            sub_1CD72EE64(v13, v12);
            v12 += 7;
            v11 -= 56;
          }
          while (v11);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          uint64_t v14 = *(char **)a1;
        }
        else
        {
          uint64_t v14 = *(char **)a1;
        }
        for (uint64_t i = &v14[56 * v6]; i != v10; i -= 56)
        {
          int v16 = (char *)*((void *)i - 6);
          if (i - 32 != v16) {
            free(v16);
          }
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v17 = *(unsigned int *)(a2 + 8);
        if (v17)
        {
          int v18 = *(char **)a2;
          uint64_t v19 = 56 * v17;
          do
          {
            uint64_t v20 = *(char **)&v18[v19 - 48];
            if (&v18[v19 - 32] != v20) {
              free(v20);
            }
            v19 -= 56;
          }
          while (v19);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if (v6)
          {
            uint64_t v21 = *(char **)a1;
            uint64_t v22 = 56 * v6;
            do
            {
              uint64_t v23 = *(char **)&v21[v22 - 48];
              if (&v21[v22 - 32] != v23) {
                free(v23);
              }
              v22 -= 56;
            }
            while (v22);
          }
          *(_DWORD *)(a1 + 8) = 0;
          sub_1CD75E12C();
        }
        if (v6)
        {
          uint64_t v7 = *(void *)a1 + 8;
          uint64_t v8 = 56 * v6;
          uint64_t v9 = (uint64_t *)(v4 + 8);
          do
          {
            *(void *)(v7 - 8) = *(v9 - 1);
            uint64_t v7 = sub_1CD72EE64(v7, v9) + 56;
            v9 += 7;
            v8 -= 56;
          }
          while (v8);
        }
        else
        {
          uint64_t v6 = 0;
        }
        uint64_t v24 = *(char **)a2;
        uint64_t v25 = *(unsigned int *)(a2 + 8);
        if (v6 != v25)
        {
          uint64_t v26 = &v24[56 * v25];
          uint64_t v27 = 56 * v6 + 8;
          unsigned int v28 = (void *)(*(void *)a1 + v27);
          unsigned int v29 = &v24[v27];
          do
          {
            unsigned int v30 = v29 - 8;
            *(v28 - 1) = *((void *)v29 - 1);
            *unsigned int v28 = v28 + 2;
            v28[1] = 0x200000000;
            if (*((_DWORD *)v29 + 2)) {
              unsigned int v28 = (void *)sub_1CD72EE64((uint64_t)v28, (uint64_t *)v29);
            }
            v28 += 7;
            v29 += 56;
          }
          while (v30 + 56 != v26);
          uint64_t v24 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v31 = *(unsigned int *)(a2 + 8);
        if (v31)
        {
          uint64_t v32 = 56 * v31;
          do
          {
            unsigned int v33 = *(char **)&v24[v32 - 48];
            if (&v24[v32 - 32] != v33) {
              free(v33);
            }
            v32 -= 56;
          }
          while (v32);
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1CD75E4C8((char **)a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD75E4C8(char **a1, char **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 56 * v5;
    do
    {
      uint64_t v7 = *(char **)&v4[v6 - 48];
      if (&v4[v6 - 32] != v7) {
        free(v7);
      }
      v6 -= 56;
    }
    while (v6);
    uint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t *sub_1CD75E558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = 56 * v6;
    do
    {
      uint64_t v9 = *(void **)(v7 + v8 - 48);
      if ((void *)(v7 + v8 - 32) != v9) {
        free(v9);
      }
      v8 -= 56;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = 0;

  return sub_1CD75E5E8((uint64_t *)a1, a2, a2 + 56 * a3);
}

uint64_t *sub_1CD75E5E8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
  uint64_t v6 = *((unsigned int *)result + 2);
  if (v5 + v6 > (unint64_t)*((unsigned int *)result + 3)) {
    sub_1CD75E12C();
  }
  if (a2 != a3)
  {
    double result = (uint64_t *)(*result + 56 * v6 + 8);
    uint64_t v7 = a2 + 8;
    do
    {
      uint64_t v8 = v7 - 8;
      *(result - 1) = *(void *)(v7 - 8);
      *double result = (uint64_t)(result + 2);
      result[1] = 0x200000000;
      if (*(_DWORD *)(v7 + 8)) {
        double result = sub_1CCC0065C(result, (uint64_t *)v7);
      }
      result += 7;
      v7 += 56;
    }
    while (v8 + 56 != a3);
    LODWORD(v6) = *((_DWORD *)v4 + 2);
  }
  *((_DWORD *)v4 + 2) = v6 + v5;
  return result;
}

void llvm::initializeConstantHoistingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF09F0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD19D50;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF09F0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createConstantHoistingPass(llvm *this)
{
}

llvm::Instruction *llvm::ConstantHoistingPass::findMatInsertPt(llvm::ConstantHoistingPass *this, llvm::Instruction *a2, int a3)
{
  if (a3 == -1
    || ((int v3 = *((_DWORD *)a2 + 5), (v3 & 0x40000000) != 0)
      ? (uint64_t v4 = (char *)*((void *)a2 - 1))
      : (uint64_t v4 = (char *)a2 - 32 * (v3 & 0x7FFFFFF)),
        (uint64_t v5 = *(void **)&v4[32 * a3], v6 = *((unsigned __int8 *)v5 + 16), v5) ? (v7 = v6 >= 0x1C) : (v7 = 0),
        v7 ? (BOOL v8 = v6 - 66 >= 0xD) : (BOOL v8 = 1),
        v8))
  {
    int v9 = *((unsigned __int8 *)a2 + 16);
    if ((v9 - 38) > 0x38 || ((1 << (v9 - 38)) & 0x100260000000001) == 0) {
      return a2;
    }
    if (a3 == -1 || v9 != 83)
    {
      uint64_t v13 = *((void *)a2 + 5);
    }
    else
    {
      int v11 = *((_DWORD *)a2 + 5);
      if ((v11 & 0x40000000) != 0) {
        uint64_t v12 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v12 = (char *)a2 - 32 * (v11 & 0x7FFFFFF);
      }
      uint64_t v13 = *(void *)&v12[32 * *((unsigned int *)a2 + 15) + 8 * a3];
      for (uint64_t i = *(void *)(v13 + 48); ; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v27 = i - 24;
        if (!i) {
          uint64_t v27 = 0;
        }
        if (*(unsigned char *)(v27 + 16) != 83) {
          break;
        }
      }
      unsigned int v28 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v20 = v28 > 0x38;
      uint64_t v29 = (1 << v28) & 0x100060000000001;
      if (v20 || v29 == 0)
      {
        uint64_t v23 = (void *)(v13 + 40);
LABEL_37:
        uint64_t v24 = (void *)*v23;
        if ((void *)*v23 == v23) {
          return 0;
        }
        if (v24) {
          uint64_t v5 = v24 - 3;
        }
        else {
          uint64_t v5 = 0;
        }
        if (*((unsigned __int8 *)v5 + 16) - 29 >= 0xB) {
          return 0;
        }
        return (llvm::Instruction *)v5;
      }
    }
    uint64_t v14 = *((void *)this + 1);
    uint64_t v31 = 0;
    uint64_t v32 = v13;
    if (sub_1CB915048((uint64_t *)(v14 + 24), &v32, &v31)) {
      uint64_t v15 = v31;
    }
    else {
      uint64_t v15 = *(void *)(v14 + 24) + 16 * *(unsigned int *)(v14 + 40);
    }
    int v16 = *(void **)(v15 + 8);
    do
    {
      int v16 = (void *)v16[1];
      for (uint64_t j = *(void *)(*v16 + 48); ; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v18 = j - 24;
        if (!j) {
          uint64_t v18 = 0;
        }
        if (*(unsigned char *)(v18 + 16) != 83) {
          break;
        }
      }
      unsigned int v19 = *(unsigned __int8 *)(j - 8) - 38;
      BOOL v20 = v19 > 0x38;
      uint64_t v21 = (1 << v19) & 0x100060000000001;
    }
    while (!v20 && v21 != 0);
    uint64_t v23 = (void *)(*v16 + 40);
    goto LABEL_37;
  }
  return (llvm::Instruction *)v5;
}

uint64_t sub_1CD75E96C(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  *(_DWORD *)(result + 160) += a4;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v5 = (void *)(*(void *)result + 16 * v4);
  *uint64_t v5 = a2;
  v5[1] = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t llvm::ConstantHoistingPass::collectConstantCandidates(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)a5 + 8) & 0xFE) != 0x12)
  {
    unsigned int v6 = *(unsigned char **)(a5 - 32 * (*(_DWORD *)(a5 + 20) & 0x7FFFFFF));
    if (v6[16] != 3) {
      unsigned int v6 = 0;
    }
    uint64_t v31 = v6;
    if (v6)
    {
      uint64_t v10 = (void **)result;
      uint64_t IntPtrType = llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(result + 32), *(llvm::LLVMContext **)(result + 24), *(_DWORD *)(*(void *)v6 + 8) >> 8);
      uint64_t v32 = (void *)sub_1CB83544C((uint64_t)v10[4], IntPtrType);
      uint64_t v33 = (uint64_t)v12;
      unsigned int v13 = llvm::TypeSize::operator unsigned long long(&v32, v12);
      double result = sub_1CB8F1EEC((uint64_t)&v29, v13, 0);
      if ((*(unsigned char *)(a5 + 17) & 2) != 0)
      {
        double result = llvm::GEPOperator::accumulateConstantOffset(a5, (llvm::DataLayout *)v10[4], (llvm::APInt *)&v29, 0, v14);
        if (result)
        {
          unsigned int v15 = v30;
          double result = v30 > 0x40
                 ? llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29)
                 : v30 + __clz(v29) - 64;
          if (v15 - result <= 0x20)
          {
            int v16 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)**v10 + 656))(**v10, 13, 1, &v29, IntPtrType, 3, a3);
            int v18 = v17;
            unsigned int v19 = (uint64_t *)sub_1CD75ECB8((uint64_t)(v10 + 10), (unint64_t *)&v31);
            uint64_t v27 = a5 | 4;
            int v28 = 0;
            sub_1CD760728((uint64_t)&v32, a2, &v27, &v28);
            BOOL v20 = v32;
            if (v34[0])
            {
              uint64_t v23 = (llvm::ConstantInt *)(*v10[3] + 1960);
              uint64_t v24 = sub_1CBF82054((uint64_t)&v29, 0xFFFFFFFFFFFFFFFFLL);
              uint64_t v25 = llvm::ConstantInt::get(v23, (unint64_t)v24, 0);
              uint64_t v32 = v34;
              uint64_t v33 = 0x800000000;
              uint64_t v35 = v25;
              uint64_t v36 = a5;
              int v37 = 0;
              sub_1CCD1AF3C(v19, (uint64_t)&v32);
              if (v32 != v34) {
                free(v32);
              }
              uint64_t v22 = *v19;
              unsigned int v21 = 1022611261 * ((unint64_t)(v19[1] - *v19) >> 3) - 1;
              void v20[2] = v21;
            }
            else
            {
              unsigned int v21 = *((_DWORD *)v32 + 2);
              uint64_t v22 = *v19;
            }
            if (v18) {
              int v26 = 0;
            }
            else {
              int v26 = v16;
            }
            double result = sub_1CD75E96C(v22 + 168 * v21, a3, a4, v26);
          }
        }
      }
      if (v30 >= 0x41)
      {
        double result = v29;
        if (v29) {
          return MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD75ECB8(uint64_t a1, unint64_t *a2)
{
  uint64_t v14 = *a2;
  int v15 = 0;
  sub_1CD760A8C(a1, &v14, &v15, (uint64_t)&v12);
  uint64_t v4 = v12;
  if (v13)
  {
    long long v9 = *a2;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    memset(v8, 0, sizeof(v8));
    sub_1CCD1C80C((uint64_t *)(a1 + 24), &v9);
    int v16 = (void **)&v9 + 1;
    sub_1CCCB6C5C(&v16);
    int v16 = (void **)v8;
    sub_1CCCB6C5C(&v16);
    uint64_t v5 = *(void *)(a1 + 24);
    unsigned int v6 = ((unint64_t)(*(void *)(a1 + 32) - v5) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v12 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  return v5 + 32 * v6 + 8;
}

uint64_t llvm::ConstantHoistingPass::collectConstantCandidates(uint64_t result, uint64_t a2, llvm *this)
{
  if (*((unsigned __int8 *)this + 16) - 66 >= 0xD)
  {
    int v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v4)
    {
      uint64_t v6 = result;
      uint64_t v7 = 0;
      do
      {
        double result = llvm::canReplaceOperandWithVariable(this, (const llvm::Instruction *)v7);
        if (result) {
          double result = llvm::ConstantHoistingPass::collectConstantCandidates(v6, a2, (uint64_t)this, v7);
        }
        uint64_t v7 = (v7 + 1);
      }
      while (v4 != v7);
    }
  }
  return result;
}

uint64_t llvm::ConstantHoistingPass::maximizeConstantsInRange(llvm::TargetTransformInfo **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = *((void *)a1[5] + 7);
  uint64_t v7 = *(void *)(v6 + 112);
  if (v7 && ((*(unsigned char *)(v7 + 17) & 4) != 0 || *(char *)(v7 + 13) < 0))
  {
    if (a3 - a2 >= 16801) {
      goto LABEL_8;
    }
  }
  else
  {
    if (llvm::shouldOptimizeForSize((uint64_t ***)v6, a1[6], (llvm::BlockFrequencyInfoImplBase **)a1[2])) {
      BOOL v8 = a3 - v5 <= 16800;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8)
    {
LABEL_8:
      if (v5 != a3)
      {
        LODWORD(v9) = 0;
        uint64_t v10 = *a4;
        uint64_t v11 = v5;
        do
        {
          int v12 = *(_DWORD *)(v11 + 8);
          if (*(_DWORD *)(v11 + 160) > *(_DWORD *)(v10 + 160))
          {
            *a4 = v5;
            uint64_t v10 = v11;
          }
          uint64_t v9 = (v12 + v9);
          v11 += 168;
          v5 += 168;
        }
        while (v11 != a3);
        return v9;
      }
      return 0;
    }
  }
  if (v5 == a3) {
    return 0;
  }
  LODWORD(v9) = 0;
  int v38 = 0;
  uint64_t v37 = -1;
  uint64_t v13 = v5;
  uint64_t v42 = v5;
  do
  {
    uint64_t v14 = *(void *)(v13 + 144);
    unsigned int v52 = *(_DWORD *)(v14 + 32);
    if (v52 > 0x40) {
      operator new[]();
    }
    uint64_t v51 = *(void *)(v14 + 24);
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    int v40 = v9;
    int v39 = v15;
    if (v15)
    {
      int64_t v16 = 0;
      int v17 = 0;
      unsigned int v47 = *(llvm::Type **)v14;
      int v18 = *(_DWORD **)v13;
      uint64_t v41 = *(void *)v13 + 16 * v15;
      uint64_t v19 = v42;
      do
      {
        unint64_t v43 = v18;
        unsigned int v44 = *(unsigned __int8 *)(*(void *)v18 + 16) - 28;
        unsigned int v45 = v18[2];
        uint64_t v20 = (*(uint64_t (**)(void))(**(void **)*a1 + 656))(*(void *)*a1);
        if (__OFADD__(v16, v20)) {
          int64_t v16 = ((v16 + v20) >> 63) ^ 0x8000000000000000;
        }
        else {
          v16 += v20;
        }
        if (v21 == 1) {
          int v17 = 1;
        }
        do
        {
          uint64_t v22 = *(void *)(v19 + 144);
          uint64_t v23 = (uint64_t **)(v22 + 24);
          uint64_t v24 = *(void *)(v13 + 144);
          unsigned int v25 = *(_DWORD *)(v22 + 32);
          unsigned int v26 = *(_DWORD *)(v24 + 32);
          if (v25 <= v26) {
            unsigned int v27 = *(_DWORD *)(v24 + 32);
          }
          else {
            unsigned int v27 = *(_DWORD *)(v22 + 32);
          }
          if (v25 < 0x41
            || v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v22 + 24)) <= 0x40)
          {
            unint64_t v29 = *v23;
            if (v25 < 0x41) {
              unint64_t v29 = (uint64_t *)v23;
            }
            uint64_t v28 = *v29;
          }
          else
          {
            uint64_t v28 = -1;
          }
          if (v26 < 0x41
            || v26 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v24 + 24)) <= 0x40)
          {
            unsigned int v30 = *(uint64_t **)(v24 + 24);
            if (v26 < 0x41) {
              unsigned int v30 = (uint64_t *)(v24 + 24);
            }
            if (v28 != -1)
            {
              uint64_t v31 = *v30;
              if (v31 != -1)
              {
                sub_1CB8F1EEC((uint64_t)&v53, v27, v28 - v31);
                unsigned int v49 = v54;
                uint64_t v48 = v53;
                char v50 = 1;
                uint64_t IntImmCodeSizeCost = llvm::TargetTransformInfo::getIntImmCodeSizeCost(*a1, v44, v45, (const llvm::APInt *)&v48, v47);
                if (v33 == 1) {
                  int v17 = 1;
                }
                if (__OFSUB__(v16, IntImmCodeSizeCost)) {
                  int64_t v16 = ((v16 - IntImmCodeSizeCost) >> 63) ^ 0x8000000000000000;
                }
                else {
                  v16 -= IntImmCodeSizeCost;
                }
                if (v50 && v49 >= 0x41 && v48) {
                  MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
                }
              }
            }
          }
          v19 += 168;
        }
        while (v19 != a3);
        uint64_t v19 = v42;
        int v18 = v43 + 4;
      }
      while (v43 + 4 != (_DWORD *)v41);
    }
    else
    {
      int v17 = 0;
      int64_t v16 = 0;
    }
    BOOL v34 = v37 < v16;
    if (v38 != v17) {
      BOOL v34 = v38 < v17;
    }
    if (v34)
    {
      *a4 = v13;
      uint64_t v37 = v16;
      int v38 = v17;
    }
    if (v52 >= 0x41 && v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    uint64_t v9 = (v39 + v40);
    v13 += 168;
  }
  while (v13 != a3);
  return v9;
}

char **llvm::ConstantHoistingPass::findAndMakeBaseConstant(llvm::TargetTransformInfo **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  v26[81] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  double result = (char **)llvm::ConstantHoistingPass::maximizeConstantsInRange(a1, a2, a3, &v21);
  if (result >= 2)
  {
    long long v8 = *(_OWORD *)(v21 + 144);
    v25[0] = (char *)v26;
    v25[1] = (char *)0x400000000;
    long long v24 = v8;
    if (v6 != a3)
    {
      uint64_t v9 = *(llvm::ConstantInt ***)v8;
      uint64_t v10 = (unint64_t **)(v8 + 24);
      while (1)
      {
        uint64_t v11 = *(void *)(v6 + 144);
        unsigned int v18 = *(_DWORD *)(v11 + 32);
        if (v18 > 0x40) {
          operator new[]();
        }
        int v17 = *(llvm::Value **)(v11 + 24);
        llvm::APInt::operator-=((uint64_t)&v17, v10);
        unsigned int v13 = v18;
        unsigned int v20 = v18;
        uint64_t v14 = v17;
        uint64_t v19 = v17;
        unsigned int v18 = 0;
        if (v20 < 0x41) {
          goto LABEL_8;
        }
        if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v19) <= 0x40) {
          break;
        }
LABEL_12:
        uint64_t v14 = llvm::ConstantInt::get(v9, (llvm::Type *)&v19, v12);
LABEL_13:
        uint64_t v15 = *(uint64_t **)(v6 + 152);
        if (v15) {
          uint64_t v16 = *v15;
        }
        else {
          uint64_t v16 = 0;
        }
        v22[0] = v23;
        v22[1] = (void *)0x800000000;
        if (*(_DWORD *)(v6 + 8)) {
          sub_1CD727100((uint64_t)v22, v6);
        }
        unsigned char v23[16] = v14;
        v23[17] = v16;
        sub_1CD75F428((uint64_t)v25, (unint64_t)v22);
        if (v22[0] != v23) {
          free(v22[0]);
        }
        if (v20 >= 0x41)
        {
          if (v19) {
            MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
          }
        }
        v6 += 168;
        if (v6 == a3) {
          goto LABEL_24;
        }
      }
      uint64_t v14 = *(llvm::Value **)v14;
LABEL_8:
      if (!v14) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
LABEL_24:
    sub_1CD75F4AC(a4, (unint64_t)&v24);
    return sub_1CD719C7C(v25);
  }
  return result;
}

__n128 sub_1CD75F428(uint64_t a1, unint64_t a2)
{
  int v3 = (__n128 *)sub_1CD760B20(a1, a2);
  uint64_t v4 = *(void *)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = (void *)(*(void *)a1 + 160 * v5);
  *uint64_t v6 = v6 + 2;
  v6[1] = 0x800000000;
  if (v3->n128_u32[2]) {
    sub_1CD727100((uint64_t)v6, (uint64_t)v3);
  }
  __n128 result = v3[9];
  *(__n128 *)(v4 + 160 * v5 + 144) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_1CD75F4AC(uint64_t a1, unint64_t a2)
{
  unint64_t result = sub_1CD760B8C(a1, a2);
  uint64_t v4 = *(void *)a1 + 672 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)result;
  *(void *)(v4 + 24) = 0x400000000;
  *(void *)(v4 + 16) = v4 + 32;
  uint64_t v5 = v4 + 16;
  if (*(_DWORD *)(result + 24)) {
    unint64_t result = sub_1CD726D90(v5, result + 16);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD75F520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  v28[672] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = *v5;
  int v21 = 0;
  sub_1CD760A8C(v4, &v20, &v21, (uint64_t)&v18);
  uint64_t v8 = v18;
  if (v19)
  {
    uint64_t v22 = v24;
    uint64_t v23 = 0x800000000;
    uint64_t v25 = *v6;
    unsigned int v26 = v28;
    uint64_t v27 = 0x800000000;
    sub_1CCD1C944((uint64_t *)(v7 + 24), (uint64_t)&v25);
    uint64_t v9 = v26;
    if (v27)
    {
      uint64_t v10 = (char *)v26 - 656;
      uint64_t v11 = 672 * v27;
      do
      {
        sub_1CD719C7C((char **)&v10[v11]);
        v11 -= 672;
      }
      while (v11);
      uint64_t v9 = v26;
    }
    if (v9 != v28) {
      free(v9);
    }
    int v12 = v22;
    if (v23)
    {
      unsigned int v13 = (char *)v22 - 656;
      uint64_t v14 = 672 * v23;
      do
      {
        sub_1CD719C7C((char **)&v13[v14]);
        v14 -= 672;
      }
      while (v14);
      int v12 = v22;
    }
    if (v12 != v24) {
      free(v12);
    }
    uint64_t v15 = *(void *)(v7 + 24);
    unsigned int v16 = 757186827 * ((unint64_t)(*(void *)(v7 + 32) - v15) >> 3) - 1;
    *(_DWORD *)(v8 + 8) = v16;
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(v18 + 8);
    uint64_t v15 = *(void *)(v7 + 24);
  }
  return v15 + 5400 * v16 + 8;
}

uint64_t llvm::ConstantHoistingPass::emitBaseConstants(uint64_t **this, llvm::GlobalVariable *a2, uint64_t a3, uint64_t a4)
{
  v48[16] = *MEMORY[0x1E4F143B8];
  unsigned int v45 = a2;
  if (a2) {
    uint64_t v5 = (char *)sub_1CD75F520((uint64_t)(this + 690), (uint64_t)&v45, a3, a4);
  }
  else {
    uint64_t v5 = (char *)(this + 16);
  }
  unsigned int v6 = *((_DWORD *)v5 + 2);
  if (v6)
  {
    char v7 = 0;
    uint64_t v8 = *(void *)v5;
    uint64_t v36 = *(void *)v5 + 672 * v6;
    do
    {
      llvm::ConstantHoistingPass::findConstantInsertionPoint(this, v8, (uint64_t)v42);
      uint64_t v9 = v43;
      uint64_t v37 = v44;
      if (v43 != v44)
      {
        do
        {
          uint64_t v10 = *v9;
          unsigned int v46 = v48;
          uint64_t v47 = 0x400000000;
          unsigned int v11 = *(_DWORD *)(v8 + 24);
          if (v11)
          {
            int v12 = *(uint64_t **)(v8 + 16);
            unsigned int v13 = &v12[20 * v11];
            do
            {
              uint64_t v14 = *((unsigned int *)v12 + 2);
              if (v14)
              {
                uint64_t v15 = *v12;
                uint64_t v16 = 16 * v14;
                do
                {
                  llvm::ConstantHoistingPass::findMatInsertPt((llvm::ConstantHoistingPass *)this, *(llvm::Instruction **)v15, *(_DWORD *)(v15 + 8));
                  if ((char *)v44 - (char *)v43 != 8) {
                    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                  }
                  v40[0] = *((_OWORD *)v12 + 9);
                  v40[1] = *(_OWORD *)v15;
                  int v17 = (_OWORD *)sub_1CD57FBCC((uint64_t)&v46, (unint64_t)v40);
                  uint64_t v18 = (char *)v46 + 32 * v47;
                  long long v19 = v17[1];
                  *uint64_t v18 = *v17;
                  v18[1] = v19;
                  LODWORD(v47) = v47 + 1;
                  v15 += 16;
                  v16 -= 16;
                }
                while (v16);
              }
              v12 += 20;
            }
            while (v12 != v13);
            unsigned int v11 = v47;
          }
          if (v11 >= dword_1EBCF0BF8)
          {
            uint64_t v20 = *(llvm::Type ***)(v8 + 8);
            if (v20)
            {
              int v21 = *v20;
              uint64_t v22 = (char *)operator new(0x60uLL);
              uint64_t v23 = (unsigned __int8 **)(v22 + 32);
              *((_DWORD *)v22 + 13) = *((_DWORD *)v22 + 13) & 0x38000000 | 1;
              *(void *)uint64_t v22 = 0;
              *((void *)v22 + 1) = 0;
              *((void *)v22 + 2) = 0;
              *((void *)v22 + 3) = v22 + 32;
              long long v24 = *(llvm::Value **)(v8 + 8);
            }
            else
            {
              int v21 = **(llvm::Type ***)v8;
              BOOL v34 = (char *)operator new(0x60uLL);
              uint64_t v23 = (unsigned __int8 **)(v34 + 32);
              *((_DWORD *)v34 + 13) = *((_DWORD *)v34 + 13) & 0x38000000 | 1;
              *(void *)BOOL v34 = 0;
              *((void *)v34 + 1) = 0;
              *((void *)v34 + 2) = 0;
              *((void *)v34 + 3) = v34 + 32;
              long long v24 = *(llvm::Value **)v8;
            }
            *(void *)&v40[0] = "const";
            __int16 v41 = 259;
            llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)v23, v24, v21, (const char **)v40, v10);
            uint64_t v25 = (unsigned __int8 *)*((void *)v10 + 6);
            int v39 = v25;
            if (v25) {
              llvm::MetadataTracking::track((uint64_t)&v39, v25, 2);
            }
            sub_1CB8F69CC(v23 + 6, &v39);
            if (v39) {
              llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
            }
            if (v47)
            {
              unsigned int v26 = (llvm::Instruction **)v46;
              uint64_t v27 = (llvm::Instruction **)((char *)v46 + 32 * v47);
              do
              {
                uint64_t v28 = *v26;
                unint64_t v29 = v26[1];
                v40[0] = *((_OWORD *)v26 + 1);
                llvm::ConstantHoistingPass::emitBaseConstants((uint64_t)this, v23, v28, v29, (uint64_t)v40);
                unsigned int v30 = (llvm::DILocation *)llvm::DebugLoc::get((llvm::DebugLoc *)(v23 + 6));
                uint64_t v31 = (const llvm::DILocation *)llvm::DebugLoc::get((llvm::DebugLoc *)(*(void *)&v40[0] + 48));
                MergedLocation = llvm::DILocation::getMergedLocation(v30, v31, v32);
                llvm::DebugLoc::DebugLoc((llvm::DebugLoc *)&v38, MergedLocation);
                sub_1CB8F69CC(v23 + 6, &v38);
                if (v38) {
                  llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
                }
                v26 += 4;
              }
              while (v26 != v27);
            }
          }
          if (v46 != v48) {
            free(v46);
          }
          ++v9;
        }
        while (v9 != v37);
        char v7 = 1;
      }
      sub_1CD456CB4(v42);
      v8 += 672;
    }
    while (v8 != v36);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t llvm::ConstantHoistingPass::runImpl(llvm::ConstantHoistingPass *this, llvm::Module **a2, llvm::TargetTransformInfo *a3, llvm::DominatorTree *a4, llvm::BlockFrequencyInfo *a5, llvm::BasicBlock *a6, llvm::ProfileSummaryInfo *a7)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = a5;
  uint64_t DataLayout = llvm::Module::getDataLayout(a2[5]);
  *((void *)this + 3) = *(void *)*a2;
  *((void *)this + 4) = DataLayout;
  *((void *)this + 5) = a6;
  *((void *)this + 6) = a7;
  llvm::ConstantHoistingPass::collectConstantCandidates(this, a2);
  if (*((void *)this + 7) != *((void *)this + 8)) {
    llvm::ConstantHoistingPass::findBaseConstants((llvm::TargetTransformInfo **)this, 0);
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v16 = *((void *)this + 14);
  while (v15 != v16)
  {
    if (*(void *)(v15 + 8) != *(void *)(v15 + 16)) {
      llvm::ConstantHoistingPass::findBaseConstants((llvm::TargetTransformInfo **)this, *(llvm::GlobalVariable **)v15);
    }
    v15 += 32;
  }
  if (*((_DWORD *)this + 34)) {
    int v17 = llvm::ConstantHoistingPass::emitBaseConstants((uint64_t **)this, 0, v13, v14);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = *((void *)this + 693);
  for (uint64_t i = *((void *)this + 694); v18 != i; v18 += 5400)
  {
    if (*(_DWORD *)(v18 + 16)) {
      v17 |= llvm::ConstantHoistingPass::emitBaseConstants((uint64_t **)this, *(llvm::GlobalVariable **)v18, v13, v14);
    }
  }
  for (uint64_t j = (llvm::Instruction **)*((void *)this + 699); j != *((llvm::Instruction ***)this + 700); j += 2)
  {
    if (!*((void *)*j + 1)) {
      llvm::Instruction::eraseFromParent(*j);
    }
  }
  sub_1CD75FB64((uint64_t)this, v12, v13, v14);
  return v17 & 1;
}

void *sub_1CD75FB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  v34[672] = *MEMORY[0x1E4F143B8];
  sub_1CBF568A4((_DWORD *)(v4 + 5568));
  *(void *)(v4 + 5600) = *(void *)(v4 + 5592);
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(v4 + 64);
  while (v6 != v5)
  {
    uint64_t v8 = *(void **)(v6 - 168);
    v6 -= 168;
    char v7 = v8;
    if ((void *)(v6 + 16) != v8) {
      free(v7);
    }
  }
  *(void *)(v4 + 64) = v5;
  uint64_t v9 = *(void *)(v4 + 104);
  for (uint64_t i = *(void *)(v4 + 112); v9 != i; v9 += 32)
  {
    uint64_t v31 = *(void ***)v9;
    uint64_t v33 = 0;
    v34[0] = 0;
    uint64_t v32 = 0;
    sub_1CCD1C5C0((uint64_t)&v32, *(void *)(v9 + 8), *(void *)(v9 + 16), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3));
    unsigned int v11 = (char *)v32;
    uint64_t v12 = (char *)v33;
    while (v12 != v11)
    {
      uint64_t v14 = (char *)*((void *)v12 - 21);
      v12 -= 168;
      uint64_t v13 = v14;
      if (v12 + 16 != v14) {
        free(v13);
      }
    }
    uint64_t v33 = (uint64_t)v11;
    unsigned int v30 = &v32;
    sub_1CCCB6C5C(&v30);
  }
  sub_1CD3C7F68((_DWORD *)(v4 + 80));
  uint64_t v16 = *(void *)(v4 + 104);
  uint64_t v15 = *(void *)(v4 + 112);
  if (v15 != v16)
  {
    do
    {
      uint64_t v17 = v15 - 32;
      uint64_t v31 = (void **)(v15 - 24);
      sub_1CCCB6C5C(&v31);
      uint64_t v15 = v17;
    }
    while (v17 != v16);
  }
  *(void *)(v4 + 112) = v16;
  unsigned int v18 = *(_DWORD *)(v4 + 136);
  if (v18)
  {
    uint64_t v19 = *(void *)(v4 + 128) - 656;
    uint64_t v20 = 672 * v18;
    do
    {
      sub_1CD719C7C((char **)(v19 + v20));
      v20 -= 672;
    }
    while (v20);
  }
  *(_DWORD *)(v4 + 136) = 0;
  uint64_t v21 = *(void *)(v4 + 5544);
  for (uint64_t j = *(void *)(v4 + 5552); v21 != j; v21 += 5400)
  {
    uint64_t v31 = *(void ***)v21;
    uint64_t v32 = v34;
    uint64_t v33 = 0x800000000;
    if (*(_DWORD *)(v21 + 16))
    {
      sub_1CD760310((uint64_t)&v32, v21 + 8);
      uint64_t v27 = v32;
      if (v33)
      {
        uint64_t v28 = (char *)v32 - 656;
        uint64_t v29 = 672 * v33;
        do
        {
          sub_1CD719C7C((char **)&v28[v29]);
          v29 -= 672;
        }
        while (v29);
        uint64_t v27 = v32;
      }
      LODWORD(v33) = 0;
      if (v27 != v34) {
        free(v27);
      }
    }
  }
  unint64_t result = sub_1CD3C7F68((_DWORD *)(v4 + 5520));
  uint64_t v24 = *(void *)(v4 + 5552);
  uint64_t v25 = *(void *)(v4 + 5544);
  if (v24 != v25)
  {
    do
    {
      uint64_t v26 = v24 - 5400;
      unint64_t result = sub_1CD719C14((char **)(v24 - 5392));
      uint64_t v24 = v26;
    }
    while (v26 != v25);
  }
  *(void *)(v4 + 5552) = v25;
  return result;
}

void llvm::ConstantHoistingPass::run()
{
}

void *sub_1CD75FF88(void *result, int a2)
{
  if (a2)
  {
    unint64_t v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    unsigned int v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4) {
      return sub_1CD75FFD4((uint64_t)result, v4 + 1);
    }
  }
  return result;
}

void *sub_1CD75FFD4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  unint64_t result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD7600A0((void *)a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = v10 << 6;
    do
    {
      *unint64_t result = -4096;
      result += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void *sub_1CD7600A0(void *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = result;
  result[1] = 0;
  uint64_t v6 = *((unsigned int *)result + 4);
  if (v6)
  {
    int v7 = (void *)*result;
    uint64_t v8 = v6 << 6;
    do
    {
      void *v7 = -4096;
      v7 += 8;
      v8 -= 64;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CD664444(*v5, *((_DWORD *)v5 + 4), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      sub_1CD46AEB4((uint64_t)(v10 + 1), (uint64_t)(a2 + 1));
      v10[7] = a2[7];
      ++*((_DWORD *)v5 + 2);
      unint64_t result = sub_1CC189978(a2 + 1);
    }
    a2 += 8;
  }
  return result;
}

void *sub_1CD760178(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CD664444(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD7601F8(a1, a2, v7);
    *unint64_t v5 = *a2;
    v5[7] = 0;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

void *sub_1CD7601F8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD75FFD4(a1, v6);
  uint64_t v8 = 0;
  sub_1CD664444(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t *sub_1CD7602AC(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = v2 << 6;
    int v5 = (void *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        int v5 = sub_1CC189978(v5);
      }
      v5 += 8;
      v4 -= 64;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CD760310(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = *(char ***)a1;
        uint64_t v10 = 672 * v4;
        uint64_t v11 = *(void *)a2 + 16;
        do
        {
          *(_OWORD *)uint64_t v9 = *(_OWORD *)(v11 - 16);
          sub_1CD7604E8((uint64_t)(v9 + 2), v11);
          v9 += 84;
          v11 += 672;
          v10 -= 672;
        }
        while (v10);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        uint64_t v12 = *(char ***)a1;
      }
      else
      {
        uint64_t v12 = *(char ***)a1;
        uint64_t v9 = *(char ***)a1;
      }
      uint64_t v13 = &v12[84 * v5];
      if (v13 != v9)
      {
        do
        {
          uint64_t v14 = v13 - 84;
          sub_1CD719C7C(v13 - 82);
          uint64_t v13 = v14;
        }
        while (v14 != v9);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v15 = *(void *)a1 - 656;
          uint64_t v16 = 672 * v5;
          do
          {
            sub_1CD719C7C((char **)(v15 + v16));
            v16 -= 672;
          }
          while (v16);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1CD726D20();
      }
      if (v5)
      {
        uint64_t v6 = *(void *)a1 + 16;
        uint64_t v7 = 672 * v5;
        uint64_t v8 = *(void *)a2 + 16;
        do
        {
          *(_OWORD *)(v6 - 16) = *(_OWORD *)(v8 - 16);
          uint64_t v6 = sub_1CD7604E8(v6, v8) + 672;
          v8 += 672;
          v7 -= 672;
        }
        while (v7);
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v17 = *(unsigned int *)(a2 + 8);
      if (v5 != v17)
      {
        uint64_t v19 = *(void *)a2 + 672 * v17;
        uint64_t v20 = (672 * v5) | 0x10;
        uint64_t v21 = (void *)(*(void *)a1 + v20);
        uint64_t v22 = *(void *)a2 + v20;
        do
        {
          *((_OWORD *)v21 - 1) = *(_OWORD *)(v22 - 16);
          void *v21 = v21 + 2;
          v21[1] = 0x400000000;
          if (*(_DWORD *)(v22 + 8)) {
            uint64_t v21 = (void *)sub_1CD7604E8((uint64_t)v21, v22);
          }
          uint64_t v23 = v22 - 16;
          v21 += 84;
          v22 += 672;
        }
        while (v23 + 672 != v19);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CD7604E8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = *(void *)a1;
        uint64_t v12 = 160 * v4;
        do
        {
          sub_1CD629BB0(v11, v10);
          *(_OWORD *)(v11 + 144) = *(_OWORD *)(v10 + 144);
          v10 += 160;
          v11 += 160;
          v12 -= 160;
        }
        while (v12);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        uint64_t v13 = *(void *)a1;
      }
      else
      {
        uint64_t v13 = *(void *)a1;
        uint64_t v11 = *(void *)a1;
      }
      uint64_t v14 = v13 + 160 * v5;
      while (v14 != v11)
      {
        uint64_t v16 = *(void **)(v14 - 160);
        v14 -= 160;
        uint64_t v15 = v16;
        if ((void *)(v14 + 16) != v16) {
          free(v15);
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v17 = *(void *)a1;
          uint64_t v18 = 160 * v5;
          do
          {
            uint64_t v19 = *(void **)(v17 + v18 - 160);
            if ((void *)(v17 + v18 - 144) != v19) {
              free(v19);
            }
            v18 -= 160;
          }
          while (v18);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1CD727090();
      }
      if (v5)
      {
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *(void *)a1;
        uint64_t v8 = 160 * v5;
        do
        {
          uint64_t v9 = sub_1CD629BB0(v7, v6);
          *(_OWORD *)(v9 + 144) = *(_OWORD *)(v6 + 144);
          v6 += 160;
          uint64_t v7 = v9 + 160;
          v8 -= 160;
        }
        while (v8);
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        uint64_t v22 = *(void *)a2;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = 160 * v5;
        uint64_t v25 = 160 * v20;
        do
        {
          uint64_t v26 = v23 + v24;
          uint64_t v27 = v22 + v24;
          *(void *)uint64_t v26 = v23 + v24 + 16;
          *(void *)(v26 + 8) = 0x800000000;
          if (*(_DWORD *)(v22 + v24 + 8)) {
            uint64_t v26 = sub_1CD629BB0(v26, v22 + v24);
          }
          v22 += 160;
          *(_OWORD *)(v26 + 144) = *(_OWORD *)(v27 + 144);
          v23 += 160;
          v25 -= 160;
        }
        while (v24 != v25);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CD7606BC(int32x2_t *a1)
{
  uint64_t v2 = (void *)(*(void *)&a1[4] - 8);
  uint64_t v4 = 0;
  uint64_t result = sub_1CBB23CC4((uint64_t)a1, v2, &v4);
  if (result)
  {
    *uint64_t v4 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  *(void *)&a1[4] -= 8;
  return result;
}

void *sub_1CD760728(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    uint64_t v14 = 0;
LABEL_6:
    uint64_t result = sub_1CD760818(a2, a3, v14);
    *uint64_t result = *a3;
    *((_DWORD *)result + 2) = *a4;
    uint64_t v9 = *(void *)a2;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    char v13 = 1;
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)a2;
  unsigned int v10 = (37 * *a3) & (v8 - 1);
  uint64_t result = (void *)(*(void *)a2 + 16 * v10);
  uint64_t v12 = *result;
  if (*a3 != *result)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v12 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -8192;
      }
      if (v17) {
        uint64_t v15 = result;
      }
      unsigned int v18 = v10 + v16++;
      unsigned int v10 = v18 & (v8 - 1);
      uint64_t result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a3 == *result) {
        goto LABEL_3;
      }
    }
    if (v15) {
      uint64_t v14 = v15;
    }
    else {
      uint64_t v14 = result;
    }
    goto LABEL_6;
  }
LABEL_3:
  char v13 = 0;
LABEL_4:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a1 + 16) = v13;
  return result;
}

void *sub_1CD760818(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
    sub_1CC46A174(a1, v6);
    int v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      int v17 = v16 - 1;
      unsigned int v18 = (37 * *a2) & v17;
      a3 = (void *)(*(void *)a1 + 16 * v18);
      uint64_t v19 = *a3;
      if (*a2 == *a3) {
        goto LABEL_3;
      }
      uint64_t v12 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v12) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          uint64_t v12 = a3;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a3 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a3;
        if (*a2 == *a3) {
          goto LABEL_3;
        }
      }
      goto LABEL_21;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1CC46A174(a1, 2 * v6);
  int v8 = *(_DWORD *)(a1 + 16);
  if (!v8) {
    goto LABEL_24;
  }
  int v9 = v8 - 1;
  unsigned int v10 = (37 * *a2) & v9;
  a3 = (void *)(*(void *)a1 + 16 * v10);
  uint64_t v11 = *a3;
  if (*a2 == *a3) {
    goto LABEL_3;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v11 != -4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v11 == -8192;
    }
    if (v14) {
      uint64_t v12 = a3;
    }
    unsigned int v15 = v10 + v13++;
    unsigned int v10 = v15 & v9;
    a3 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a3;
    if (*a2 == *a3) {
      goto LABEL_3;
    }
  }
LABEL_21:
  if (v12) {
    a3 = v12;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t *sub_1CD7609A0(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      *(void *)(v6 + v7 - 168) = v6 + v7 - 152;
      uint64_t result = (uint64_t *)(v6 + v7 - 168);
      uint64_t v9 = v4 + v7;
      *(void *)(v6 + v7 - 160) = 0x800000000;
      if (*(_DWORD *)(v4 + v7 - 160)) {
        uint64_t result = (uint64_t *)sub_1CD727100((uint64_t)result, v9 - 168);
      }
      long long v10 = *(_OWORD *)(v9 - 24);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(v9 - 8);
      *(_OWORD *)(v8 - 24) = v10;
      v7 -= 168;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v11 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD760A8C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD3C8538((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD3CDD8C(a1, (uint64_t)a2, a2, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

unint64_t sub_1CD760B20(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 160 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      sub_1CD727090();
    }
    sub_1CD727090();
  }
  return a2;
}

unint64_t sub_1CD760B8C(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 672 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      sub_1CD726D20();
    }
    sub_1CD726D20();
  }
  return a2;
}

uint64_t *sub_1CD760BF8(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6 - 5384;
    do
    {
      uint64_t v9 = v8 + v7;
      *(void *)(v9 - 16) = *(void *)(v4 - 5400 + v7);
      *(void *)(v9 - 8) = v8 + v7 + 8;
      uint64_t result = (uint64_t *)(v8 + v7 - 8);
      *(void *)(v8 + v7) = 0x800000000;
      if (*(_DWORD *)(v4 - 5384 + v7)) {
        uint64_t result = (uint64_t *)sub_1CD726A60((uint64_t)result, v4 - 5392 + v7);
      }
      v7 -= 5400;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void llvm::ConstraintEliminationPass::run()
{
}

void llvm::initializeConstraintEliminationPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EBCF0C40, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD22EB8;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(qword_1EBCF0C40, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createConstraintEliminationPass(llvm *this)
{
}

uint64_t sub_1CD760F00(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    sub_1CD760F74();
  }
  uint64_t v5 = (void *)(*(void *)a1 + 96 * v4);
  *uint64_t v5 = *a2;
  uint64_t result = sub_1CD761168((uint64_t)(v5 + 1), a3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1CD760F74()
{
}

void *sub_1CD761024(void *result, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *result;
    uint64_t result = (void *)(a2 + 8);
    uint64_t v5 = 96 * v2;
    uint64_t v6 = v4 + 8;
    do
    {
      *(result - 1) = *(void *)(v6 - 8);
      uint64_t result = (void *)(sub_1CD7610B0((uint64_t)result, v6) + 96);
      v6 += 96;
      v5 -= 96;
    }
    while (v5);
    uint64_t v7 = *((unsigned int *)v3 + 2);
    if (v7)
    {
      uint64_t v8 = *v3 - 88;
      uint64_t v9 = 96 * v7;
      do
      {
        uint64_t result = sub_1CC08AF1C((void *)(v8 + v9));
        v9 -= 96;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1CD7610B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = *(void *)v5;
    *(void *)unint64_t v5 = a1;
    *(void *)a1 = v5 | 6;
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    if (v6) {
      *uint64_t v6 = *v6 & 7 | (a1 + 8);
    }
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = a1 + 72;
  uint64_t v9 = a1 + 56;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0x200000000;
  if (*(_DWORD *)(a2 + 64)) {
    sub_1CBA6E388(v9, (const void **)(a2 + 56));
  }
  return a1;
}

uint64_t sub_1CD761168(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = *(void *)v5;
    *(void *)unint64_t v5 = a1;
    *(void *)a1 = v5 | 6;
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    if (v6) {
      *uint64_t v6 = *v6 & 7 | (a1 + 8);
    }
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = a1 + 72;
  uint64_t v9 = a1 + 56;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0x200000000;
  if (*(_DWORD *)(a2 + 64)) {
    sub_1CBB08064(v9, a2 + 56);
  }
  return a1;
}

uint64_t sub_1CD761220(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1CBFCBCC4(a1, a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_1CCD24644((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  return a1;
}

uint64_t sub_1CD76127C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_1CCD2473C(&v3);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

void *sub_1CD7612C4(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CD477A28(a1, a2, 1);
  uint64_t result = (void *)(*(void *)a1 + 80 * *(unsigned int *)(a1 + 8));
  *uint64_t result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(v3 + 8)) {
    uint64_t result = (void *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)result, v3);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD761330(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CBA0E618(a2, a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC7CBACC(a2, (uint64_t)a3, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(unsigned char *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

BOOL sub_1CD7613CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a2 + 1;
  uint64_t v4 = 8 * a3 - 8;
  do
  {
    if (!v4) {
      return 0;
    }
    uint64_t v5 = *v3++;
    v4 -= 8;
  }
  while (!v5);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)a1 + 80 * v6;
    do
    {
      for (uint64_t i = *(unsigned int *)(v7 + 8); a3 != i; *(_DWORD *)(v7 + 8) = i)
      {
        if (i >= *(_DWORD *)(v7 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v7 + 8 * i) = 0;
        uint64_t i = (*(_DWORD *)(v7 + 8) + 1);
      }
      v7 += 80;
    }
    while (v7 != v8);
  }

  return sub_1CBFCD1A8(a1, a2, a3);
}

void llvm::initializeCorrelatedValuePropagationPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF0DD0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD2B2F4;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCF0DD0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createCorrelatedValuePropagationPass(llvm *this)
{
}

uint64_t sub_1CD761570(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC137310(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      char v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1CD761620(char **a1, _WORD *a2, __n128 *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCF0D08, 0, 0);
  byte_1EBCF0D88 = 0;
  qword_1EBCF0D90 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCF0D98 = 0;
  qword_1EBCF0D08 = (uint64_t)&unk_1F26440A0;
  qword_1EBCF0DA0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCF0DA8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCF0DC0 = (uint64_t)&qword_1EBCF0DA8;
  sub_1CD761710(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF0D08);
}

__n128 sub_1CD761710(char **a1, _WORD *a2, __n128 *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCF0D08, "canonicalize-icmp-predicates-to-unsigned", 0x28uLL);
  uint64_t v6 = *a1;
  byte_1EBCF0D88 = **a1;
  byte_1EBCF0D99 = 1;
  byte_1EBCF0D98 = *v6;
  word_1EBCF0D12 = (32 * (*a2 & 3)) | word_1EBCF0D12 & 0xFF9F;
  __n128 result = *a3;
  xmmword_1EBCF0D28 = (__int128)*a3;
  return result;
}

void llvm::initializeRedundantDbgInstEliminationPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF0DE8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD31140;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCF0DE8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createRedundantDbgInstEliminationPass(llvm *this)
{
}

double llvm::RedundantDbgInstEliminationPass::run@<D0>(llvm::BasicBlock *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)((char *)a1 + 72);
  uint64_t v4 = (void *)*((void *)a1 + 10);
  if (v4 == (void *)((char *)a1 + 72)) {
    goto LABEL_11;
  }
  int v5 = 0;
  do
  {
    if (v4) {
      uint64_t v6 = (llvm *)(v4 - 3);
    }
    else {
      uint64_t v6 = 0;
    }
    v5 |= llvm::RemoveRedundantDbgInstrs(v6, a1);
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != v3);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
    *(void *)a2 = a2 + 32;
    *(void *)(a2 + 8) = a2 + 32;
    *(_DWORD *)(a2 + 24) = 0;
    *(void *)(a2 + 48) = a2 + 80;
    *(void *)(a2 + 56) = a2 + 80;
    *(void *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    *(void *)&double result = 0x100000002;
    *(void *)(a2 + 16) = 0x100000002;
  }
  else
  {
    *(void *)a2 = a2 + 32;
    *(void *)(a2 + 8) = a2 + 32;
    *(void *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(void *)(a2 + 48) = a2 + 80;
    *(void *)(a2 + 56) = a2 + 80;
    *(void *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    sub_1CBF541A4((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
  return result;
}

void llvm::DCEPass::run()
{
}

void llvm::initializeDCELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF0DF0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD314DC;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCF0DF0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createDeadCodeEliminationPass(llvm *this)
{
}

void llvm::initializeDSELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EBCF0E00, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD36A84;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(qword_1EBCF0E00, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createDeadStoreEliminationPass(llvm *this)
{
}

int32x2_t sub_1CD761B58(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CD41F538(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    uint64_t v4 = (void *)v5;
    sub_1CD40B1BC(*(void **)(v5 + 16));
    *uint64_t v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1CD761BC8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      char v10 = 0;
      int32x2_t result = sub_1CCD386D4(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      uint64_t *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD761C70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v8 = *a2;
  int v9 = 0;
  sub_1CBFFB304(a1, &v8, &v9, (uint64_t)&v10);
  uint64_t v6 = (uint64_t *)(a1 + 24);
  if (!v11) {
    return *v6 + 32 * *(unsigned int *)(v10 + 8);
  }
  *(_DWORD *)(v10 + 8) = (*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 5;
  sub_1CD761D0C(v6, a2, a3);
  return *(void *)(a1 + 32) - 32;
}

uint64_t sub_1CD761D0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_1CCD39550(a1, a2, (uint64_t *)a3);
  }
  else
  {
    uint64_t v5 = *a2;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)unint64_t v4 = v5;
    *(_DWORD *)(v4 + 24) = 0;
    *(void *)(v4 + 8) = *(void *)a3;
    *(void *)a3 = 0;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = 0;
    LODWORD(v5) = *(_DWORD *)(v4 + 20);
    *(_DWORD *)(v4 + 20) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v5;
    LODWORD(v5) = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = v5;
    uint64_t result = v4 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t *sub_1CD761D94(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 32);
    v2 -= 32;
    *(void *)(v4 - 32) = v5;
    v4 -= 32;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 16) = 0;
    int v6 = *(_DWORD *)(v4 + 20);
    *(_DWORD *)(v4 + 20) = *(_DWORD *)(v2 + 20);
    *(_DWORD *)(v2 + 20) = v6;
    int v7 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v7;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_1CD761E2C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = *a2 + 88 * v4;
  *a1 = *(void *)(v5 - 88);
  long long v6 = *(_OWORD *)(v5 - 80);
  long long v7 = *(_OWORD *)(v5 - 64);
  a1[5] = a1 + 7;
  uint64_t v8 = (uint64_t)(a1 + 5);
  *(_OWORD *)(v8 - 32) = v6;
  *(_OWORD *)(v8 - 16) = v7;
  *(void *)(v8 + 8) = 0x400000000;
  if (*(_DWORD *)(v5 - 40))
  {
    sub_1CBA6E388(v8, (const void **)(v5 - 48));
    unsigned int v4 = *((_DWORD *)a2 + 2);
    uint64_t v3 = *a2;
  }
  unsigned int v9 = v4 - 1;
  *((_DWORD *)a2 + 2) = v9;
  uint64_t v10 = v3 + 88 * v9;
  char v11 = *(void **)(v10 + 40);
  if (v11 != (void *)(v10 + 56))
  {
    free(v11);
  }
}

uint64_t sub_1CD761ED0(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 81)
  {
    if (*(void *)(a1 + 8) == *(void *)(a2 - 64)
      && (uint64_t v5 = *(unsigned __int8 **)(a2 - 32)) != 0
      && v5[16] <= 0x14u
      && ((llvm::Constant::isNullValue(*(llvm::Constant **)(a2 - 32)) & 1) != 0
       || (sub_1CC03F414((uint64_t)&v6, (llvm::Constant *)v5) & 1) != 0))
    {
      **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::initializeDFAJumpThreadingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1588, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD3AEA8;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF1588, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createDFAJumpThreadingPass(llvm *this)
{
}

void llvm::DFAJumpThreadingPass::run()
{
}

uint64_t *sub_1CD762184(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_OWORD *)(v7 - 48) = 0uLL;
      *(_OWORD *)(v7 - 32) = 0uLL;
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_1CD76222C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  if (v3) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = a2 + 1;
  }
  if ((v4 & 0x1FF) != 0) {
    unint64_t v5 = (v4 >> 9) + 1;
  }
  else {
    unint64_t v5 = v4 >> 9;
  }
  unint64_t v6 = *(void *)(a1 + 32);
  if (v5 >= v6 >> 9) {
    unint64_t v7 = v6 >> 9;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v5 <= v6 >> 9)
  {
    for (*(void *)(a1 + 32) = v6 - (v7 << 9); v7; --v7)
    {
      unsigned int v18 = *(void **)(a1 + 8);
      *(void *)&long long v24 = *v18;
      *(void *)(a1 + 8) = v18 + 1;
      sub_1CB904CD8(a1, &v24);
    }
  }
  else
  {
    unint64_t v8 = v5 - v7;
    uint64_t v9 = *(void *)(a1 + 24) - *(void *)a1;
    if (v5 - v7 <= (v9 >> 3) - (v3 >> 3))
    {
      if (v8)
      {
        while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
        {
          *(void *)&long long v24 = operator new(0x1000uLL);
          sub_1CD3F23B4(a1, &v24);
          --v5;
          if (!--v8) {
            goto LABEL_39;
          }
        }
        for (uint64_t i = 0; i != v8; ++i)
        {
          *(void *)&long long v24 = operator new(0x1000uLL);
          sub_1CD3F24DC((void **)a1, &v24);
          if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
            uint64_t v20 = 511;
          }
          else {
            uint64_t v20 = 512;
          }
          uint64_t v21 = v20 + *(void *)(a1 + 32);
          *(void *)(a1 + 32) = v21;
        }
        unint64_t v7 = v5;
      }
      else
      {
LABEL_39:
        uint64_t v21 = *(void *)(a1 + 32);
      }
      for (*(void *)(a1 + 32) = v21 - (v7 << 9); v7; --v7)
      {
        unsigned int v22 = *(void **)(a1 + 8);
        *(void *)&long long v24 = *v22;
        *(void *)(a1 + 8) = v22 + 1;
        sub_1CB904CD8(a1, &v24);
      }
    }
    else
    {
      uint64_t v10 = v3 >> 3;
      if (v9 >> 2 <= v8 + (v3 >> 3)) {
        unint64_t v11 = v8 + v10;
      }
      else {
        unint64_t v11 = v9 >> 2;
      }
      uint64_t v26 = a1 + 24;
      if (v11)
      {
        if (v11 >> 61) {
          sub_1CB833614();
        }
        uint64_t v12 = (char *)operator new(8 * v11);
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v13 = v7 << 9;
      *(void *)&long long v24 = v12;
      *((void *)&v24 + 1) = &v12[8 * (v10 - v7)];
      *(void *)&long long v25 = *((void *)&v24 + 1);
      *((void *)&v25 + 1) = &v12[8 * v11];
      do
      {
        uint64_t v23 = operator new(0x1000uLL);
        sub_1CD3F23B4((uint64_t)&v24, &v23);
        --v8;
      }
      while (v8);
      for (uint64_t j = *(void **)(a1 + 8); v7; --v7)
      {
        sub_1CB904CD8((uint64_t)&v24, j);
        uint64_t j = (void *)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = j;
      }
      unsigned int v15 = *(void **)(a1 + 16);
      if (v15 != j)
      {
        do
          sub_1CD3F24DC((void **)&v24, --v15);
        while (v15 != *(void **)(a1 + 8));
      }
      int v16 = *(void **)a1;
      long long v17 = v25;
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v17;
      *(void *)(a1 + 32) -= v13;
      if (v16) {
        operator delete(v16);
      }
    }
  }
}

uint64_t sub_1CD76248C(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    unint64_t v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    uint64_t v11 = *(void *)v10 + 8 * (v9 & 0x1FF);
  }
  if ((uint64_t *)v11 == v8) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = ((v11 - *(void *)v10) >> 3) + ((v10 - v7) << 6) - (((uint64_t)v8 - *(void *)v7) >> 3);
  }
  sub_1CCD4368C((void *)a1, v7, v8, v12);
  return a1;
}

void *sub_1CD762554(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      unint64_t v8 = 0;
      uint64_t v11 = 0;
      uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      unint64_t v8 = (unsigned char *)(*(void *)v7 + 8 * (v4 & 0x1FF));
      unint64_t v9 = a2[5] + v4;
      uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
      uint64_t v11 = *(void *)v10 + 8 * (v9 & 0x1FF);
    }
    if ((unsigned char *)v11 == v8) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = ((v11 - *(void *)v10) >> 3) + ((v10 - v7) << 6) - ((uint64_t)&v8[-*(void *)v7] >> 3);
    }
    sub_1CCD437EC(a1, v7, v8, v12);
  }
  return a1;
}

BOOL sub_1CD762618(BOOL result, char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 40);
  unint64_t v5 = *(void *)(result + 32) + v4;
  uint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = (char *)(v6 + 8 * (v5 >> 9));
  if (*(void *)(result + 16) == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)v7 + 8 * (v5 & 0x1FF);
  }
  if (v8 != a3)
  {
    uint64_t v9 = ((v8 - *(void *)v7) >> 3) + ((v7 - a2) << 6) - ((a3 - *(void *)a2) >> 3);
    if (v9 >= 1)
    {
      *(void *)(result + 40) = v4 - v9;
      do
        uint64_t result = sub_1CC08F314(v3);
      while (result);
    }
  }
  return result;
}

uint64_t sub_1CD7626AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *a2;
  int v14 = 0;
  sub_1CD45714C((_DWORD *)a1, &v13, &v14, (uint64_t)&v11);
  uint64_t v4 = v11;
  if (v12)
  {
    long long v8 = (unint64_t)*a2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_1CC4CE04C((uint64_t *)(a1 + 24), &v8);
    if (*((void *)&v8 + 1)) {
      operator delete(*((void **)&v8 + 1));
    }
    uint64_t v5 = *(void *)(a1 + 24);
    unsigned int v6 = ((unint64_t)(*(void *)(a1 + 32) - v5) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v11 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  return v5 + 32 * v6 + 8;
}

void *sub_1CD76275C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 != a1 + 5) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

void sub_1CD7627A0(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCF1650, 0, 0);
  dword_1EBCF16D0 = 0;
  qword_1EBCF16D8 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCF16E0 = 0;
  qword_1EBCF1650 = (uint64_t)&unk_1F2643F00;
  qword_1EBCF16E8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCF16F0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCF1708 = (uint64_t)&qword_1EBCF16F0;
  llvm::cl::Option::setArgStr(v6, "dfa-max-path-length", 0x13uLL);
  xmmword_1EBCF1670 = *a1;
  word_1EBCF165A = (32 * (*a2 & 3)) | word_1EBCF165A & 0xFF9F;
  dword_1EBCF16D0 = **a3;
  byte_1EBCF16E4 = 1;
  dword_1EBCF16E0 = dword_1EBCF16D0;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF1650);
}

void llvm::initializeDivRemPairsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF17E0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD46E10;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF17E0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createDivRemPairsPass(llvm *this)
{
}

void llvm::DivRemPairsPass::run()
{
}

uint64_t sub_1CD762A6C(uint64_t a1, long long *a2)
{
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  int v17 = 0;
  sub_1CD762D50((uint64_t)&v13, a1, (uint64_t)&v15, &v17);
  uint64_t v4 = v13;
  if (v14)
  {
    long long v11 = *a2;
    long long v12 = *((unint64_t *)a2 + 2);
    uint64_t v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(void *)(a1 + 40))
    {
      unint64_t v7 = sub_1CBF9AC5C((void **)(a1 + 24), &v11);
    }
    else
    {
      long long v6 = v12;
      *uint64_t v5 = v11;
      v5[1] = v6;
      unint64_t v7 = v5 + 2;
    }
    *(void *)(a1 + 32) = v7;
    uint64_t v9 = *(void *)(a1 + 24);
    unsigned int v8 = (((unint64_t)v7 - v9) >> 5) - 1;
    *(_DWORD *)(v4 + 24) = v8;
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(v13 + 24);
    uint64_t v9 = *(void *)(a1 + 24);
  }
  return v9 + 32 * v8 + 24;
}

uint64_t sub_1CD762B40(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CCD48364(*(void *)a1, *(_DWORD *)(a1 + 16), (unsigned __int8 *)a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD762BBC(a1, (unsigned __int8 *)a2, v7);
    *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
    *(void *)(v5 + 8) = *(void *)(a2 + 8);
    *(void *)(v5 + 16) = *(void *)(a2 + 16);
    *(void *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1CD762BBC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_10;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_10:
    sub_1CD762C80(a1, v6);
    uint64_t v8 = 0;
    sub_1CCD48364(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)a3 || *(void *)(a3 + 8) || *(void *)(a3 + 16)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CD762C80(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CCD48420(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    long long v11 = &result[32 * v10];
    do
    {
      *uint64_t result = 0;
      *((void *)result + 1) = 0;
      *((void *)result + 2) = 0;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1CD762D50(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CCD48364(*(void *)a2, *(_DWORD *)(a2 + 16), (unsigned __int8 *)a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = sub_1CD762DF8(a2, (unsigned __int8 *)a3, v12);
    uint64_t v9 = result;
    *(unsigned char *)uint64_t result = *(unsigned char *)a3;
    *(void *)(result + 8) = *(void *)(a3 + 8);
    *(void *)(result + 16) = *(void *)(a3 + 16);
    *(_DWORD *)(result + 24) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1CD762DF8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_10;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_10:
    sub_1CD762EBC(a1, v6);
    uint64_t v8 = 0;
    sub_1CCD48364(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)a3 || *(void *)(a3 + 8) || *(void *)(a3 + 16)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CD762EBC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CCD484EC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = &result[32 * v10];
    do
    {
      *uint64_t result = 0;
      *((void *)result + 1) = 0;
      *((void *)result + 2) = 0;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

llvm::raw_ostream *llvm::EarlyCSEPass::printPipeline(unsigned char *a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  sub_1CD763004(a2, a3, a4);
  sub_1CB8E509C(a2, "<");
  if (*a1) {
    sub_1CB8E509C(a2, "memssa");
  }

  return sub_1CB8E509C(a2, ">");
}

llvm::raw_ostream *sub_1CD763004(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = sub_1CCCBCD54();
  uint64_t v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  uint64_t result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

void llvm::initializeEarlyCSELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF17F0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD4AAD0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF17F0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createEarlyCSEPass(llvm *this)
{
}

void llvm::initializeEarlyCSEMemSSALegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EBCF17F8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD4ACE4;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(qword_1EBCF17F8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

__n128 sub_1CD7631D8(uint64_t a1, uint64_t a2, __n128 *a3, _DWORD *a4)
{
  size_t v8 = sub_1CD763278(a1, a3);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = v8[6];
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    *(void *)(a1 + 32) = *(void *)v11;
  }
  else {
    uint64_t v11 = sub_1CB906F34((uint64_t *)(a1 + 40), 72, 3);
  }
  __n128 result = *a3;
  __n128 v13 = a3[2];
  *(__n128 *)(v11 + 32) = a3[1];
  *(__n128 *)(v11 + 48) = v13;
  *(__n128 *)(v11 + 16) = result;
  *(_DWORD *)(v11 + 64) = *a4;
  *(void *)uint64_t v11 = v9;
  *(void *)(v11 + 8) = v10;
  v8[6] = v11;
  *(void *)(a2 + 16) = v11;
  return result;
}

void *sub_1CD763278(uint64_t a1, _OWORD *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CCD4D85C(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v9);
  unint64_t v5 = v9;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD7632F0(a1, (uint64_t)a2, v9);
    long long v8 = a2[1];
    long long v7 = a2[2];
    *(_OWORD *)unint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v8;
    *((_OWORD *)v5 + 2) = v7;
    v5[6] = 0;
  }
  return v5;
}

void *sub_1CD7632F0(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_13:
    sub_1CD7633D4(a1, v6);
    long long v8 = 0;
    sub_1CCD4D85C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -3 || a3[2] || a3[3] || a3[4] || a3[5]) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CD7633D4(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = (char *)operator new(56 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD7634BC(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = &result[56 * v10];
    do
    {
      *(void *)__n128 result = -4096;
      *((void *)result + 1) = -3;
      *((_OWORD *)result + 1) = 0uLL;
      *((_OWORD *)result + 2) = 0uLL;
      result += 56;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1CD7634BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + 56 * v6;
    do
    {
      *(void *)uint64_t v7 = -4096;
      *(void *)(v7 + 8) = -3;
      *(_OWORD *)(v7 + 16) = 0uLL;
      *(_OWORD *)(v7 + 32) = 0uLL;
      v7 += 56;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 == -8192)
    {
      if (*(void *)(a2 + 8) != -4) {
        goto LABEL_11;
      }
    }
    else if (*(void *)a2 != -4096 || *(void *)(a2 + 8) != -3)
    {
LABEL_11:
      uint64_t v12 = 0;
      __n128 result = sub_1CCD4D85C(*(void *)v5, *(_DWORD *)(v5 + 16), a2, &v12);
      uint64_t v9 = v12;
      long long v10 = *(_OWORD *)a2;
      long long v11 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)uint64_t v9 = v10;
      *(void *)(v9 + 48) = *(void *)(a2 + 48);
      ++*(_DWORD *)(v5 + 8);
      goto LABEL_12;
    }
    if (*(void *)(a2 + 16) || *(void *)(a2 + 24) || *(void *)(a2 + 32) || *(void *)(a2 + 40)) {
      goto LABEL_11;
    }
LABEL_12:
    a2 += 56;
  }
  return result;
}

int32x2_t sub_1CD7635D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CCD4D85C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    uint64_t v4 = v5;
    *uint64_t v5 = -8192;
    v4[1] = -4;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::initializeFlattenCFGLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1988, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD4EFA8;
    v4[1] = &v2;
    unsigned int v3 = v4;
    std::__call_once(&qword_1EBCF1988, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::FlattenCFGPass::run()
{
}

uint64_t *sub_1CD763788(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    uint64_t v4 = 3 * a2;
    v5[0] = operator new(24 * a2);
    v5[1] = v5[0] + v3;
    _OWORD v5[2] = v5[0] + v3;
    void v5[3] = v5[0] + 8 * v4;
    sub_1CD45ACEC(v2, v5);
    return (uint64_t *)sub_1CD45AC84((uint64_t)v5);
  }
  return result;
}

void llvm::initializeFloat2IntLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1A58, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD4F62C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF1A58, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t llvm::Float2IntPass::seen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CD763964(a1, a2);
  if (*(void *)(a1 + 32) == v6)
  {
    int v12 = *(_DWORD *)(a3 + 8);
    uint64_t v9 = *(void *)a3;
    uint64_t v10 = a2;
    uint64_t v11 = v9;
    *(_DWORD *)(a3 + 8) = 0;
    int v14 = *(_DWORD *)(a3 + 24);
    uint64_t v13 = *(void *)(a3 + 16);
    *(_DWORD *)(a3 + 24) = 0;
    sub_1CD764670(a1, &v10, (uint64_t)&v11);
    return sub_1CC05EB8C((uint64_t)&v11);
  }
  else
  {
    uint64_t v7 = v6 + 8;
    return sub_1CC149928(v7, a3);
  }
}

uint64_t sub_1CD763964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  if (!sub_1CBA0E618(a1, &v4, &v5) || v5 == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16)) {
    return *(void *)(a1 + 32);
  }
  else {
    return *(void *)(a1 + 24) + 40 * *(unsigned int *)(v5 + 8);
  }
}

uint64_t sub_1CD7639D0(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = (uint64_t)&v11;
  uint64_t v12 = 1;
  uint64_t v13 = a2;
  uint64_t v5 = sub_1CD728D0C(a1, (uint64_t)&v11, (uint64_t)&v11);
  uint64_t v11 = (uint64_t)&v11;
  uint64_t v12 = 1;
  uint64_t v13 = *a3;
  uint64_t v6 = sub_1CD728D0C(a1, (uint64_t)&v11, (uint64_t)&v11);
  uint64_t v7 = a1 + 1;
  if (v7 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = sub_1CD4D6EE8((uint64_t)(v5 + 4));
  }
  if (v7 == v6) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = sub_1CD4D6EE8((uint64_t)(v6 + 4));
  }
  if (v8 != result)
  {
    *(void *)(*(void *)v8 + 8) = *(void *)(*(void *)v8 + 8) & 1 | result;
    *(void *)uint64_t v8 = *(void *)result;
    unint64_t v10 = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFELL;
    *(void *)uint64_t result = v8;
    *(void *)(result + 8) = v10;
  }
  return result;
}

void llvm::Float2IntPass::calcRange(llvm::Float2IntPass *this@<X0>, llvm::Instruction *a2@<X1>, uint64_t a3@<X8>)
{
  v38[16] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = (llvm::ConstantRange *)v38;
  uint64_t v37 = 0x400000000;
  int v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 - 1);
    uint64_t v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = (uint64_t *)((char *)a2 - 32 * v6);
  }
  if (v6)
  {
    for (uint64_t i = 32 * v6; i; i -= 32)
    {
      unsigned int v9 = *(unsigned __int8 *)(*v7 + 16);
      if (*v7) {
        BOOL v10 = v9 >= 0x1C;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        uint64_t v13 = sub_1CD763964((uint64_t)this, *v7) + 8;
        llvm::ConstantRange::ConstantRange((unint64_t *)&v32, dword_1EBCF1A10 + 1, 0);
        BOOL v14 = sub_1CC8DD0F0(v13, &v32);
        sub_1CC05EB8C((uint64_t)&v32);
        if (v14)
        {
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 32) = 0;
          goto LABEL_41;
        }
        sub_1CC067A30((unint64_t *)&v36, v13);
      }
      else
      {
        if (v9 == 17) {
          uint64_t v11 = *v7;
        }
        else {
          uint64_t v11 = 0;
        }
        if (*(_UNKNOWN **)(v11 + 32) == &unk_1CFB2E344) {
          char v12 = *(unsigned char *)(*(void *)(v11 + 40) + 28);
        }
        else {
          char v12 = *(unsigned char *)(v11 + 52);
        }
        if ((v12 & 7) == 3)
        {
          if ((v12 & 8) != 0 && sub_1CB845E74((uint64_t)a2) && (llvm::Instruction::hasNoSignedZeros(a2) & 1) == 0)
          {
LABEL_52:
            llvm::ConstantRange::ConstantRange((unint64_t *)&v32, dword_1EBCF1A10 + 1, 1);
            *(_DWORD *)(a3 + 8) = v33;
            *(void *)a3 = v32;
            *(_DWORD *)(a3 + 24) = v35;
            *(void *)(a3 + 16) = v34;
            LODWORD(v33) = 0;
            int v35 = 0;
            *(unsigned char *)(a3 + 32) = 1;
            goto LABEL_40;
          }
        }
        else if ((v12 & 7u) < 2)
        {
          goto LABEL_52;
        }
        sub_1CB87DDC4((uint64_t)&v33, (uint64_t *)(v11 + 32));
        if (sub_1CBFC6BD8((uint64_t)&v32, 1)
          || sub_1CB88A72C((uint64_t)&v32, v11 + 24) != 1)
        {
          llvm::ConstantRange::ConstantRange((unint64_t *)&v28, dword_1EBCF1A10 + 1, 1);
          *(_DWORD *)(a3 + 8) = v29;
          *(void *)a3 = v28;
          *(_DWORD *)(a3 + 24) = v31;
          *(void *)(a3 + 16) = v30;
          int v29 = 0;
          int v31 = 0;
          *(unsigned char *)(a3 + 32) = 1;
          sub_1CC05EB8C((uint64_t)&v28);
          sub_1CB87DEE4(&v33);
          goto LABEL_41;
        }
        sub_1CB8F1EEC((uint64_t)&__src, dword_1EBCF1A10 + 1, 0);
        char v27 = 0;
        char v24 = 0;
        llvm::APFloat::convertToInteger(v11 + 24, (uint64_t)&__src, 1, &v24);
        unsigned int v23 = v26;
        if (v26 > 0x40) {
          operator new[]();
        }
        unsigned int v22 = __src;
        llvm::ConstantRange::ConstantRange(&v28, (uint64_t *)&v22);
        sub_1CCD50670((unint64_t *)&v36, (unint64_t)&v28);
        sub_1CC05EB8C((uint64_t)&v28);
        if (v23 >= 0x41 && v22) {
          MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
        }
        if (v26 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        sub_1CB87DEE4(&v33);
      }
      v7 += 4;
    }
  }
  int v15 = *((unsigned __int8 *)a2 + 16);
  switch(*((unsigned char *)a2 + 16))
  {
    case '(':
      sub_1CB8F1EEC((uint64_t)&v20, *((_DWORD *)v36 + 2), 0);
      llvm::ConstantRange::ConstantRange((uint64_t *)&v32, &v20);
      if (v21 >= 0x41 && v20) {
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
      llvm::ConstantRange::sub((llvm::ConstantRange *)&v32, v36, (uint64_t)&v28);
      *(_DWORD *)(a3 + 8) = v29;
      *(void *)a3 = v28;
      *(_DWORD *)(a3 + 24) = v31;
      *(void *)(a3 + 16) = v30;
      int v29 = 0;
      int v31 = 0;
      *(unsigned char *)(a3 + 32) = 1;
      sub_1CC05EB8C((uint64_t)&v28);
      break;
    case ')':
    case '+':
    case '-':
      __break(1u);
      return;
    case '*':
    case ',':
    case '.':
      llvm::ConstantRange::binaryOp((llvm::ConstantRange *)((char *)v36 + 32), (unsigned int *)v36, v15 - 28, (unint64_t *)&v32);
      goto LABEL_39;
    default:
      if ((v15 - 69) >= 2) {
        llvm::ConstantRange::unionWith((uint64_t)v36, (unsigned int *)v36 + 8, 0, (uint64_t)&v32);
      }
      else {
        llvm::ConstantRange::castOp((unint64_t *)v36, v15 - 28, dword_1EBCF1A10 + 1, (uint64_t)&v32);
      }
LABEL_39:
      *(_DWORD *)(a3 + 8) = v33;
      *(void *)a3 = v32;
      *(_DWORD *)(a3 + 24) = v35;
      *(void *)(a3 + 16) = v34;
      LODWORD(v33) = 0;
      int v35 = 0;
      *(unsigned char *)(a3 + 32) = 1;
      break;
  }
LABEL_40:
  sub_1CC05EB8C((uint64_t)&v32);
LABEL_41:
  uint64_t v16 = v36;
  if (v37)
  {
    uint64_t v17 = 32 * v37;
    unsigned int v18 = (char *)v36 - 32;
    do
    {
      sub_1CC05EB8C((uint64_t)&v18[v17]);
      v17 -= 32;
    }
    while (v17);
    uint64_t v16 = v36;
  }
  if (v16 != (llvm::ConstantRange *)v38) {
    free(v16);
  }
}

llvm::Value *llvm::Float2IntPass::convert(llvm::Float2IntPass *this, llvm::Instruction *a2, llvm::Type *a3)
{
  v51[4] = *MEMORY[0x1E4F143B8];
  unsigned int v44 = a2;
  int v5 = (char *)this + 232;
  if (*((void *)this + 33) != sub_1CD48D03C((uint64_t)this + 232, (uint64_t *)&v44)) {
    return *(llvm::Value **)sub_1CD48CC08((uint64_t)v5, (uint64_t *)&v44);
  }
  unsigned int v49 = (unsigned __int8 **)v51;
  uint64_t v50 = 0x400000000;
  uint64_t v6 = (uint64_t **)v44;
  int v7 = *((_DWORD *)v44 + 5);
  if ((v7 & 0x40000000) != 0)
  {
    unsigned int v9 = (llvm::Instruction **)*((void *)v44 - 1);
    uint64_t v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v8 = v7 & 0x7FFFFFF;
    unsigned int v9 = (llvm::Instruction **)((char *)v44 - 32 * v8);
  }
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    while (1)
    {
      uint64_t v11 = *v9;
      if (*((unsigned __int8 *)v44 + 16) - 71 > 1)
      {
        unsigned int v12 = *((unsigned __int8 *)v11 + 16);
        BOOL v13 = v12 < 0x1C || v11 == 0;
        if (v13)
        {
          if (v12 == 17) {
            BOOL v14 = *v9;
          }
          else {
            BOOL v14 = 0;
          }
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(a3);
          if (v15 == 1) {
          sub_1CB8F1EEC((uint64_t)&v45, PrimitiveSizeInBits, 0);
          }
          char v47 = 0;
          LOBYTE(v41) = 0;
          llvm::APFloat::convertToInteger((uint64_t)v14 + 24, (uint64_t)&v45, 1, &v41);
          unsigned int v18 = llvm::ConstantInt::get((llvm::ConstantInt **)a3, (llvm::Type *)&v45, v17);
          if (v50 >= (unint64_t)HIDWORD(v50)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v49[v50] = (unsigned __int8 *)v18;
          LODWORD(v50) = v50 + 1;
          if (v46 >= 0x41 && v45) {
            MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
          }
          goto LABEL_9;
        }
        uint64_t v11 = (llvm::Instruction *)llvm::Float2IntPass::convert(this, *v9, a3);
      }
      if (v50 >= (unint64_t)HIDWORD(v50)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v49[v50] = (unsigned __int8 *)v11;
      LODWORD(v50) = v50 + 1;
LABEL_9:
      v9 += 4;
      v10 -= 32;
      if (!v10)
      {
        uint64_t v6 = (uint64_t **)v44;
        break;
      }
    }
  }
  sub_1CC243A10((uint64_t)&v45, v6, 0, 0, 0);
  if (!v13 & v21)
  {
    switch(*((unsigned char *)v44 + 16))
    {
      case 'E':
        unsigned int v22 = *v49;
        unsigned int v23 = *(llvm::Type **)v44;
        __int16 v43 = 257;
        goto LABEL_37;
      case 'F':
        int v31 = *v49;
        uint64_t v32 = *(llvm::Type **)v44;
        __int16 v43 = 257;
        goto LABEL_41;
      case 'G':
        unsigned int v22 = *v49;
        __int16 v43 = 257;
        unsigned int v23 = a3;
LABEL_37:
        uint64_t v28 = sub_1CB844B8C((uint64_t)&v45, v22, (uint64_t)v23, (uint64_t)&v41);
        break;
      case 'H':
        int v31 = *v49;
        __int16 v43 = 257;
        uint64_t v32 = a3;
LABEL_41:
        uint64_t v28 = sub_1CB845504((uint64_t)&v45, v31, (uint64_t)v32, (uint64_t)&v41);
        break;
      default:
        uint64_t v29 = (*((_WORD *)v44 + 9) & 0x3F) - 1;
        if (v29 > 0xD) {
          LOWORD(v30) = 42;
        }
        else {
          int v30 = dword_1CFB2CC0C[v29];
        }
        uint64_t v37 = *v49;
        uint64_t v38 = (uint64_t)v49[1];
        Name = llvm::Value::getName(v44);
        __int16 v43 = 261;
        __int16 v41 = Name;
        uint64_t v42 = v40;
        uint64_t v28 = sub_1CB845F20((uint64_t)&v45, v30, v37, v38, (uint64_t)&v41);
        break;
    }
  }
  else
  {
    uint64_t v24 = 13;
    switch(*((unsigned char *)v44 + 16))
    {
      case '(':
        long long v25 = (llvm::BinaryOperator *)*v49;
        unsigned int v26 = llvm::Value::getName(v44);
        __int16 v43 = 261;
        __int16 v41 = v26;
        uint64_t v42 = v27;
        uint64_t v28 = sub_1CD5A6358((uint64_t)&v45, v25, (uint64_t)&v41, 0, 0);
        break;
      case ')':
      case '+':
      case '-':
        __break(1u);
        goto LABEL_55;
      case '*':
        goto LABEL_43;
      case ',':
        uint64_t v24 = 15;
        goto LABEL_43;
      case '.':
        uint64_t v24 = 17;
LABEL_43:
        uint64_t v33 = (uint64_t)*v49;
        uint64_t v34 = (uint64_t)v49[1];
        int v35 = llvm::Value::getName(v44);
        __int16 v43 = 261;
        __int16 v41 = v35;
        uint64_t v42 = v36;
        uint64_t v28 = sub_1CB844E98((uint64_t)&v45, v24, v33, v34, (uint64_t)&v41, 0);
        break;
      default:
LABEL_55:
        JUMPOUT(0);
    }
  }
  uint64_t v19 = v28;
  if (sub_1CCD51710((uint64_t)this + 48, (uint64_t)v44, &v41)) {
    llvm::Value::replaceAllUsesWith(v44, v19);
  }
  *(void *)sub_1CD48CC08((uint64_t)v5, (uint64_t *)&v44) = v19;
  if (v45 != &v48) {
    free(v45);
  }
  if (v49 != v51) {
    free(v49);
  }
  return v19;
}

uint64_t llvm::Float2IntPass::runImpl(llvm::Float2IntPass *this, llvm::Function *a2, const llvm::DominatorTree *a3)
{
  unsigned int v12 = v13;
  memset(v13, 0, sizeof(v13));
  sub_1CD728BB0((uint64_t)this + 200, &v12);
  sub_1CB833A08((uint64_t)&v12, v13[0]);
  sub_1CBF568A4(this);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v6 = *((void *)this + 4);
  if (v6 != v7)
  {
    do
    {
      uint64_t v8 = v6 - 40;
      sub_1CC05EB8C(v6 - 32);
      uint64_t v6 = v8;
    }
    while (v8 != v7);
  }
  *((void *)this + 4) = v7;
  sub_1CBF568A4((_DWORD *)this + 58);
  *((void *)this + 33) = *((void *)this + 32);
  sub_1CD54329C((void *)this + 6);
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 35) = **((void **)a2 + 5);
  llvm::Float2IntPass::findRoots(this, (llvm::Function **)a2, a3);
  llvm::Float2IntPass::walkBackwards(this);
  llvm::Float2IntPass::walkForwards(this);
  uint64_t v9 = llvm::Float2IntPass::validateAndTransform(this);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 33);
    if (v10 != *((void *)this + 32)) {
      llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v10 - 16));
    }
  }
  return v9;
}

void llvm::createFloat2IntPass(llvm *this)
{
}

void llvm::Float2IntPass::run()
{
}

char *sub_1CD764670(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  int v8 = 0;
  uint64_t result = (char *)sub_1CBF568F0((_DWORD *)a1, &v7, &v8, (uint64_t)&v9);
  if (v10)
  {
    *(_DWORD *)(v9 + 8) = -858993459 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    return sub_1CD764704(a1 + 24, a2, a3);
  }
  return result;
}

char *sub_1CD764704(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_1CCD51540((char **)a1, a2, (uint64_t *)a3);
  }
  else
  {
    *(void *)unint64_t v4 = *a2;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(a3 + 8);
    *(void *)(v4 + 8) = *(void *)a3;
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a3 + 24);
    *(void *)(v4 + 24) = *(void *)(a3 + 16);
    *(_DWORD *)(a3 + 24) = 0;
    uint64_t result = (char *)(v4 + 40);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1CD764774(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (sub_1CCD51710(a1, a2, &v6)) {
    return v6;
  }
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

void llvm::initializeGuardWideningLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1B28, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD52B60;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF1B28, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::initializeLoopGuardWideningLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1B30, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD52C10;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCF1B30, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGuardWideningPass(llvm *this)
{
}

void llvm::createLoopGuardWideningPass(llvm *this)
{
}

__n128 llvm::GVNPass::ValueTable::ValueTable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  int v6 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = v6;
  int v7 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  int v8 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = v8;
  int v9 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = v9;
  __n128 result = *(__n128 *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(__n128 *)(a1 + 152) = result;
  return result;
}

llvm::raw_ostream *llvm::GVNPass::printPipeline(unsigned char *a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  sub_1CD764BF0(a2, a3, a4);
  sub_1CB8E509C(a2, "<");
  if (a1[1])
  {
    if (*a1) {
      int v6 = "";
    }
    else {
      int v6 = "no-";
    }
    int v7 = sub_1CB8E509C(a2, v6);
    sub_1CB8E509C(v7, "pre;");
  }
  if (a1[3])
  {
    if (a1[2]) {
      int v8 = "";
    }
    else {
      int v8 = "no-";
    }
    int v9 = sub_1CB8E509C(a2, v8);
    sub_1CB8E509C(v9, "load-pre;");
  }
  if (a1[7])
  {
    if (a1[6]) {
      char v10 = "";
    }
    else {
      char v10 = "no-";
    }
    uint64_t v11 = sub_1CB8E509C(a2, v10);
    sub_1CB8E509C(v11, "split-backedge-load-pre;");
  }
  if (a1[9])
  {
    if (a1[8]) {
      unsigned int v12 = "";
    }
    else {
      unsigned int v12 = "no-";
    }
    BOOL v13 = sub_1CB8E509C(a2, v12);
    sub_1CB8E509C(v13, "memdep");
  }

  return sub_1CB8E509C(a2, ">");
}

llvm::raw_ostream *sub_1CD764BF0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  int v6 = sub_1CCCBD158();
  int v9 = (const void *)a2(a3, v6, v7);
  size_t v10 = v8;
  __n128 result = (llvm::raw_ostream *)*((void *)a1 + 4);
  if (v8 <= *((void *)a1 + 3) - (void)result)
  {
    if (v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v9, v8);
      *((void *)a1 + 4) += v10;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a1, (const char *)v9, v8);
  }
  return result;
}

llvm::raw_ostream *llvm::GVNPass::dump(llvm *a1, unsigned int **a2)
{
  int v3 = (llvm::raw_ostream *)llvm::errs(a1);
  int v4 = sub_1CB8E509C(v3, "{\n");
  uint64_t v5 = *((unsigned int *)a2 + 4);
  uint64_t v6 = (uint64_t)&(*a2)[4 * v5];
  if (*((_DWORD *)a2 + 2))
  {
    if (v5)
    {
      uint64_t v7 = 16 * v5;
      size_t v8 = *a2;
      while (*v8 >= 0xFFFFFFFE)
      {
        v8 += 4;
        v7 -= 16;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      size_t v8 = *a2;
    }
  }
  else
  {
LABEL_6:
    size_t v8 = &(*a2)[4 * v5];
  }
  uint64_t v9 = (uint64_t)&(*a2)[4 * v5];
  while (v8 != (unsigned int *)v9)
  {
    size_t v10 = (llvm::raw_ostream *)llvm::errs(v4);
    sub_1CD098D14(v10, *v8, 0, 0, 0);
    sub_1CB8E509C(v10, "\n");
    int v4 = llvm::Value::dump(*((llvm::Value **)v8 + 1));
    uint64_t v11 = v8 + 4;
    while (v11 != (unsigned int *)v6)
    {
      unsigned int v12 = *v11;
      v11 += 4;
      if (v12 <= 0xFFFFFFFD)
      {
        size_t v8 = v11 - 4;
        goto LABEL_13;
      }
    }
    size_t v8 = (unsigned int *)v6;
LABEL_13:
    ;
  }
  BOOL v13 = (llvm::raw_ostream *)llvm::errs(v4);

  return sub_1CB8E509C(v13, "}\n");
}

uint64_t llvm::GVNPass::splitCriticalEdges(llvm::GVNPass *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  v7[0] = *((void *)this + 3);
  v7[1] = 0;
  long long v8 = *((_OWORD *)this + 7);
  int v9 = 0;
  char v10 = 0;
  uint64_t v4 = sub_1CCD62FD4((uint64_t)a2, (uint64_t)a3, (uint64_t)v7);
  if (v4)
  {
    uint64_t v5 = (llvm::MemoryDependenceResults *)*((void *)this + 2);
    if (v5) {
      llvm::MemoryDependenceResults::invalidateCachedPredecessors(v5);
    }
    *((unsigned char *)this + 688) = 1;
  }
  return v4;
}

BOOL llvm::GVNPass::ValueTable::areCallValsEqual(llvm::GVNPass::ValueTable *this, int a2, unsigned int a3, const llvm::BasicBlock *a4, const llvm::BasicBlock *a5, llvm::GVNPass *a6)
{
  int v17 = a2;
  long long v8 = (llvm::Instruction **)(sub_1CCD64000((uint64_t)a6 + 312, &v17) + 8);
  do
  {
    int v9 = *v8;
    if (*((unsigned char *)*v8 + 16) == 84) {
      char v10 = *v8;
    }
    else {
      char v10 = 0;
    }
    if (v10 && *((const llvm::BasicBlock **)v10 + 5) == a5) {
      break;
    }
    long long v8 = (llvm::Instruction **)v8[2];
    int v9 = v10;
  }
  while (v8);
  if (llvm::AAResults::getModRefBehavior(*((void *)this + 19), (uint64_t)v9) == 4) {
    return 1;
  }
  if (!*((void *)this + 20)) {
    return 0;
  }
  if ((llvm::AAResults::getModRefBehavior(*((void *)this + 19), (uint64_t)v9) & 2) != 0) {
    return 0;
  }
  if ((llvm::MemoryDependenceResults::getDependency(*((llvm::MemoryDependenceResults **)this + 20), v9) & 0xE000000000000007) != 0x2000000000000003) {
    return 0;
  }
  unsigned int v12 = llvm::MemoryDependenceResults::getNonLocalCallDependency(*((llvm::MemoryDependenceResults **)this + 20), v9);
  uint64_t v13 = v12[1];
  if (*v12 == v13) {
    return 0;
  }
  uint64_t v14 = *v12 + 16;
  do
  {
    unint64_t v15 = *(void *)(v14 - 8) & 0xE000000000000007;
    BOOL result = v15 == 0x4000000000000003;
    BOOL v16 = v15 == 0x4000000000000003 || v14 == v13;
    v14 += 16;
  }
  while (!v16);
  return result;
}

void llvm::initializeGVNLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1B40, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD63C88;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCF1B40, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGVNPass(llvm *this)
{
}

void sub_1CD764FF8()
{
}

uint64_t sub_1CD765054(uint64_t a1, __int16 a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF1B38;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F263E048;
  uint64_t v4 = a1 + 32;
  __int16 v5 = a2 ^ 1 | 0x100;
  if (a3) {
    uint64_t v6 = 0x100000000000000;
  }
  else {
    uint64_t v6 = 0x101000000000000;
  }
  uint64_t v7 = (llvm::PassRegistry *)sub_1CD719FAC(v4, v6, v5);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v7);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1B40, memory_order_acquire) != -1)
  {
    v11[0] = sub_1CCD63C88;
    v11[1] = &PassRegistry;
    char v10 = v11;
    std::__call_once(&qword_1EBCF1B40, &v10, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD765124(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F263E048;
  sub_1CCCB72A8((uint64_t)a1 + 32);

  llvm::Pass::~Pass(a1);
}

void sub_1CD765178(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F263E048;
  sub_1CCCB72A8((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD7651E0(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::AssumptionCacheTracker::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::LoopInfoWrapperPass::ID);
  uint64_t v4 = (char *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 41)) {
    uint64_t v4 = &byte_1EBD0B2F8;
  }
  if (*v4) {
    llvm::AnalysisUsage::addRequiredID(this, llvm::MemoryDependenceWrapperPass::ID);
  }
  llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::OptimizationRemarkEmitterWrapperPass::ID);

  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1CD765308(llvm::PMDataManager ***a1, llvm::Function *a2)
{
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    uint64_t AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(a1[1], &llvm::LoopInfoWrapperPass::ID);
    if (AnalysisIfAvailable) {
      (*(void (**)(uint64_t, void *))(*(void *)AnalysisIfAvailable + 96))(AnalysisIfAvailable, &llvm::LoopInfoWrapperPass::ID);
    }
    uint64_t v6 = llvm::AnalysisResolver::getAnalysisIfAvailable(a1[1], &llvm::MemorySSAWrapperPass::ID);
    if (v6) {
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::MemorySSAWrapperPass::ID);
    }
    uint64_t v7 = a1[1];
    long long v8 = *v7;
    int v9 = v7[1];
    if (v8 == v9)
    {
LABEL_10:
      uint64_t v10 = 0;
    }
    else
    {
      while (*(char **)v8 != llvm::AssumptionCacheTracker::ID)
      {
        long long v8 = (llvm::PMDataManager *)((char *)v8 + 16);
        if (v8 == v9) {
          goto LABEL_10;
        }
      }
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v10 + 96))(v10, llvm::AssumptionCacheTracker::ID);
    llvm::AssumptionCacheTracker::getAssumptionCache(v11, a2);
    unsigned int v12 = a1[1];
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (v13 == v14)
    {
LABEL_14:
      uint64_t v15 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v13 != &llvm::DominatorTreeWrapperPass::ID)
      {
        uint64_t v13 = (llvm::PMDataManager *)((char *)v13 + 16);
        if (v13 == v14) {
          goto LABEL_14;
        }
      }
      uint64_t v15 = *((void *)v13 + 1);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::DominatorTreeWrapperPass::ID);
    BOOL v16 = a1[1];
    int v17 = *v16;
    unsigned int v18 = v16[1];
    if (v17 == v18)
    {
LABEL_18:
      uint64_t v19 = 0;
    }
    else
    {
      while (*(char **)v17 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        int v17 = (llvm::PMDataManager *)((char *)v17 + 16);
        if (v17 == v18) {
          goto LABEL_18;
        }
      }
      uint64_t v19 = *((void *)v17 + 1);
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v19 + 96))(v19, llvm::TargetLibraryInfoWrapperPass::ID);
    sub_1CBF5AC74(v20, (uint64_t)a2);
  }
  return 0;
}

void sub_1CD765708(char **a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCF1B48, 0, 0);
  byte_1EBCF1BC8 = 0;
  qword_1EBCF1BD0 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCF1BD8 = 0;
  qword_1EBCF1B48 = (uint64_t)&unk_1F26440A0;
  qword_1EBCF1BE0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCF1BE8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCF1C00 = (uint64_t)&qword_1EBCF1BE8;
  llvm::cl::Option::setArgStr(v4, "enable-pre", 0xAuLL);
  __int16 v5 = *a1;
  byte_1EBCF1BC8 = **a1;
  byte_1EBCF1BD9 = 1;
  byte_1EBCF1BD8 = *v5;
  word_1EBCF1B52 = (32 * (*a2 & 3)) | word_1EBCF1B52 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF1B48);
}

void sub_1CD765828(char **a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBCF1C08, 0, 0);
  byte_1EBCF1C88 = 0;
  qword_1EBCF1C90 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCF1C98 = 0;
  qword_1EBCF1C08[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCF1CA0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCF1CA8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCF1CC0 = (uint64_t)&qword_1EBCF1CA8;
  llvm::cl::Option::setArgStr(v2, "enable-load-pre", 0xFuLL);
  int v3 = *a1;
  byte_1EBCF1C88 = **a1;
  byte_1EBCF1C99 = 1;
  byte_1EBCF1C98 = *v3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCF1C08);
}

void sub_1CD765924(char **a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBCF1CC8, 0, 0);
  byte_1EBCF1D48 = 0;
  qword_1EBCF1D50 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCF1D58 = 0;
  qword_1EBCF1CC8[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCF1D60 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCF1D68 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCF1D80 = (uint64_t)&qword_1EBCF1D68;
  llvm::cl::Option::setArgStr(v2, "enable-load-in-loop-pre", 0x17uLL);
  int v3 = *a1;
  byte_1EBCF1D48 = **a1;
  byte_1EBCF1D59 = 1;
  byte_1EBCF1D58 = *v3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCF1CC8);
}

void sub_1CD765A20(char **a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBCF1D88, 0, 0);
  byte_1EBCF1E08 = 0;
  qword_1EBCF1E10 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCF1E18 = 0;
  qword_1EBCF1D88[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCF1E20 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCF1E28 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCF1E40 = (uint64_t)&qword_1EBCF1E28;
  llvm::cl::Option::setArgStr(v2, "enable-split-backedge-in-load-pre", 0x21uLL);
  int v3 = *a1;
  byte_1EBCF1E08 = **a1;
  byte_1EBCF1E19 = 1;
  byte_1EBCF1E18 = *v3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCF1D88);
}

void sub_1CD765B1C(char **a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBD0B278, 0, 0);
  byte_1EBD0B2F8 = 0;
  qword_1EBD0B300 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD0B308 = 0;
  qword_1EBD0B278[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBD0B310 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD0B318 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD0B330 = (uint64_t)&qword_1EBD0B318;
  llvm::cl::Option::setArgStr(v2, "enable-gvn-memdep", 0x11uLL);
  int v3 = *a1;
  byte_1EBD0B2F8 = **a1;
  byte_1EBD0B309 = 1;
  byte_1EBD0B308 = *v3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBD0B278);
}

void sub_1CD765C18(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCF1E48, 0, 0);
  dword_1EBCF1EC8 = 0;
  qword_1EBCF1ED0 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCF1ED8 = 0;
  qword_1EBCF1E48 = (uint64_t)&unk_1F2643F00;
  qword_1EBCF1EE0 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCF1EE8 = (uint64_t)&unk_1F25EA168;
  qword_1EBCF1F00 = (uint64_t)&qword_1EBCF1EE8;
  sub_1CD765D18(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF1E48);
}

__n128 sub_1CD765D18(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCF1E48, "gvn-max-num-deps", 0x10uLL);
  word_1EBCF1E52 = word_1EBCF1E52 & 0xFF9F | (32 * (*a1 & 3));
  dword_1EBCF1EC8 = **a2;
  byte_1EBCF1EDC = 1;
  dword_1EBCF1ED8 = dword_1EBCF1EC8;
  word_1EBCF1E52 = word_1EBCF1E52 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBCF1E68 = (__int128)*a4;
  return result;
}

void sub_1CD765DAC(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCF1F08, 0, 0);
  dword_1EBCF1F88 = 0;
  qword_1EBCF1F90 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCF1F98 = 0;
  qword_1EBCF1F08 = (uint64_t)&unk_1F2643F00;
  qword_1EBCF1FA0 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCF1FA8 = (uint64_t)&unk_1F25EA168;
  qword_1EBCF1FC0 = (uint64_t)&qword_1EBCF1FA8;
  sub_1CD765EAC(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCF1F08);
}

__n128 sub_1CD765EAC(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCF1F08, "gvn-max-block-speculations", 0x1AuLL);
  word_1EBCF1F12 = word_1EBCF1F12 & 0xFF9F | (32 * (*a1 & 3));
  dword_1EBCF1F88 = **a2;
  byte_1EBCF1F9C = 1;
  dword_1EBCF1F98 = dword_1EBCF1F88;
  word_1EBCF1F12 = word_1EBCF1F12 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBCF1F28 = (__int128)*a4;
  return result;
}

uint64_t sub_1CD765F40(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD7660CC(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD7660CC(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CD7660CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)__n128 result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      __n128 result = sub_1CCD64E08((uint64_t)v5, (void *)a2, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GVNHoist::rank(llvm::GVNHoist *this, const llvm::Value *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 == 5) {
    return 2;
  }
  if (v2 - 11 < 2) {
    return 1;
  }
  if (v2 < 0x15) {
    return 0;
  }
  if (v2 == 21) {
    return (*((_DWORD *)a2 + 8) + 3);
  }
  uint64_t v7 = 0;
  uint64_t v8 = a2;
  char v5 = sub_1CB883B0C((uint64_t)this + 232, &v8, &v7);
  if ((v5 & 1) != 0 && (int v6 = *(_DWORD *)(v7 + 8)) != 0) {
    return (v6 + *((_DWORD *)this + 144) + 4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL llvm::GVNHoist::hasEH(llvm::GVNHoist *this, const llvm::BasicBlock **a2)
{
  BOOL v16 = (const llvm::BasicBlock *)a2;
  int v17 = (const llvm::BasicBlock *)a2;
  unint64_t v4 = (uint64_t *)((char *)this + 256);
  uint64_t v18 = 0;
  if (sub_1CD3C8538((uint64_t *)this + 32, &v17, &v18)
    && v18 != *((void *)this + 32) + 16 * *((unsigned int *)this + 68))
  {
    return *(unsigned char *)(v18 + 8) != 0;
  }
  unsigned int v7 = *(unsigned __int8 *)(llvm::BasicBlock::getFirstNonPHI((llvm::BasicBlock *)a2) + 16) - 38;
  BOOL v8 = v7 > 0x38;
  uint64_t v5 = 1;
  uint64_t v9 = (1 << v7) & 0x100060000000001;
  BOOL v10 = v8 || v9 == 0;
  if (!v10 || (*((_WORD *)a2 + 9) & 0x7FFF) != 0)
  {
    uint64_t v11 = sub_1CD46647C(v4, &v16);
  }
  else
  {
    uint64_t v12 = a2[5];
    if (v12 == (const llvm::BasicBlock *)(a2 + 5))
    {
      uint64_t v13 = 0;
    }
    else
    {
      if (v12) {
        uint64_t v14 = (unsigned __int8 *)v12 - 24;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v14[16] - 29 >= 0xB) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = (llvm::Instruction *)v14;
      }
    }
    int mayThrow = llvm::Instruction::mayThrow(v13);
    uint64_t v11 = sub_1CD46647C(v4, &v16);
    if (!mayThrow)
    {
      uint64_t v5 = 0;
      *((unsigned char *)v11 + 8) = 0;
      return v5;
    }
    uint64_t v5 = 1;
  }
  *((unsigned char *)v11 + 8) = 1;
  return v5;
}

BOOL sub_1CD766368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 232;
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  if (sub_1CB883B0C(a1 + 232, &v9, &v8)) {
    unsigned int v5 = *(_DWORD *)(v8 + 8);
  }
  else {
    unsigned int v5 = 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a3;
  if (sub_1CB883B0C(v4, &v9, &v8)) {
    unsigned int v6 = *(_DWORD *)(v8 + 8);
  }
  else {
    unsigned int v6 = 0;
  }
  return v5 < v6;
}

BOOL llvm::GVNHoist::hasEHhelper(llvm::GVNHoist *this, const llvm::BasicBlock **a2, const llvm::BasicBlock **a3, int *a4)
{
  BOOL result = 1;
  if (*a4)
  {
    if (!llvm::GVNHoist::hasEH(this, a2))
    {
      if (a2 == a3) {
        return 0;
      }
      uint64_t v8 = 0;
      uint64_t v9 = a2;
      if ((sub_1CD420258((uint64_t *)this + 35, &v9, &v8) & 1) == 0) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::GVNHoist::hasEHOrLoadsOnPath(llvm::GVNHoist *this, const llvm::Instruction *a2, llvm::MemoryDef *a3, int *a4)
{
  uint64_t v8 = (const llvm::BasicBlock **)*((void *)a2 + 5);
  uint64_t v9 = (const llvm::BasicBlock **)*((void *)a3 + 8);
  sub_1CD76665C((uint64_t)&v22, (uint64_t)v9);
  sub_1CD7666E4((const void **)&v18);
  while (1)
  {
    while (1)
    {
      if (v25 - (unsigned char *)__p == v21 - (unsigned char *)v20)
      {
        if (__p == v25)
        {
LABEL_23:
          if (v20)
          {
            char v21 = v20;
            operator delete(v20);
          }
          if (v19 != v18) {
            free(v19);
          }
          if (__p)
          {
            long long v25 = (char *)__p;
            operator delete(__p);
          }
          if (v23 != v22) {
            free(v23);
          }
          return 0;
        }
        BOOL v10 = (char *)v20 + 8;
        uint64_t v11 = (char *)__p + 8;
        while (1)
        {
          uint64_t v12 = v11 - 8;
          if (*((void *)v11 - 1) != *((void *)v10 - 1)) {
            break;
          }
          int v13 = v10[8];
          if (v11[8]) {
            BOOL v14 = v13 == 0;
          }
          else {
            BOOL v14 = 1;
          }
          if (v14)
          {
            if ((v11[8] == 0) == (v13 != 0)) {
              break;
            }
          }
          else if (*(void *)v11 != *(void *)v10)
          {
            break;
          }
          v10 += 24;
          v11 += 24;
          if (v12 + 24 == v25) {
            goto LABEL_23;
          }
        }
      }
      uint64_t v15 = v25 - 24;
      BOOL v16 = (const llvm::BasicBlock **)*((void *)v25 - 3);
      if (v16 != v8) {
        break;
      }
      v25 -= 24;
      if (__p != v15) {
        goto LABEL_18;
      }
    }
    if (llvm::GVNHoist::hasEHhelper(this, v16, v9, a4)
      || (llvm::GVNHoist::hasMemoryUse(this, a2, a3, (const llvm::BasicBlock *)v16) & 1) != 0)
    {
      break;
    }
    if (*a4 != -1) {
      --*a4;
    }
LABEL_18:
    sub_1CC931D4C((llvm::SmallPtrSetImplBase *)&v22);
  }
  if (v20)
  {
    char v21 = v20;
    operator delete(v20);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (__p)
  {
    long long v25 = (char *)__p;
    operator delete(__p);
  }
  if (v23 != v22) {
    free(v23);
  }
  return 1;
}

void sub_1CD76665C(uint64_t a1, uint64_t a2)
{
  sub_1CD50D2CC((uint64_t)&v3, a2);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)a1, (const void **)(a1 + 32), (const llvm::SmallPtrSetImplBase *)&v3);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  a1 += 96;
  *(void *)(a1 + 16) = 0;
  sub_1CBF340A8((void *)a1, __p, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
  if (v4 != v3) {
    free(v4);
  }
}

void sub_1CD7666E4(const void **a1)
{
  uint64_t v6 = 0;
  std::string __p = 0;
  memset(v5, 0, sizeof(v5));
  unsigned int v2 = (char *)v5 + 8;
  unint64_t v3 = (char *)v5 + 8;
  uint64_t v4 = 8;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v1 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)a1, a1 + 4, (const llvm::SmallPtrSetImplBase *)&v2);
  *((void *)v1 + 12) = 0;
  *((void *)v1 + 13) = 0;
  uint64_t v1 = (llvm::SmallPtrSetImplBase *)((char *)v1 + 96);
  *((void *)v1 + 2) = 0;
  sub_1CBF340A8(v1, __p, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (v3 != v2) {
    free(v3);
  }
}

uint64_t llvm::GVNHoist::hasEHOnPath(llvm::GVNHoist *this, const llvm::BasicBlock *a2, const llvm::BasicBlock **a3, int *a4)
{
  sub_1CD76665C((uint64_t)&v21, (uint64_t)a3);
  sub_1CD7666E4((const void **)&v17);
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v19;
      if (v24 - (unsigned char *)__p == v20 - v19)
      {
        if (__p == v24)
        {
LABEL_22:
          uint64_t v15 = 0;
          goto LABEL_23;
        }
        uint64_t v9 = 0;
        while (1)
        {
          BOOL v10 = (char *)__p + v9;
          if (*(void *)((char *)__p + v9) != *(void *)&v19[v9]) {
            break;
          }
          int v11 = v19[v9 + 16];
          if (v10[16]) {
            BOOL v12 = v11 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12)
          {
            if ((v10[16] == 0) == (v11 != 0)) {
              break;
            }
          }
          else if (*(void *)((char *)__p + v9 + 8) != *(void *)&v19[v9 + 8])
          {
            break;
          }
          v9 += 24;
          if (v10 + 24 == v24) {
            goto LABEL_22;
          }
        }
      }
      BOOL v14 = v24 - 24;
      int v13 = (const llvm::BasicBlock *)*((void *)v24 - 3);
      if (v13 != a2) {
        break;
      }
      v24 -= 24;
      if (__p != v14) {
        goto LABEL_18;
      }
    }
    if (llvm::GVNHoist::hasEHhelper(this, (const llvm::BasicBlock **)v13, a3, a4)) {
      break;
    }
    if (*a4 != -1) {
      --*a4;
    }
LABEL_18:
    sub_1CC931D4C((llvm::SmallPtrSetImplBase *)&v21);
  }
  uint64_t v15 = 1;
  uint64_t v8 = v19;
LABEL_23:
  if (v8)
  {
    uint64_t v20 = v8;
    operator delete(v8);
  }
  if (v18 != v17) {
    free(v18);
  }
  if (__p)
  {
    uint64_t v24 = (char *)__p;
    operator delete(__p);
  }
  if (v22 != v21) {
    free(v22);
  }
  return v15;
}

BOOL llvm::GVNHoist::valueAnticipable(int a1, uint64_t a2, uint64_t a3, llvm::Instruction *this)
{
  uint64_t v6 = a2;
  if (llvm::Instruction::getNumSuccessors(this) <= ((unint64_t)(a3 - a2) >> 5))
  {
    if (v6 == a3) {
      return 1;
    }
    if (this)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(v6 + 16);
        int NumSuccessors = llvm::Instruction::getNumSuccessors(this);
        BOOL v7 = NumSuccessors != 0;
        if (!NumSuccessors) {
          break;
        }
        int v11 = NumSuccessors;
        unsigned int v12 = 0;
        while (llvm::Instruction::getSuccessor(this, v12) != v9)
        {
          if (v11 == ++v12) {
            return 0;
          }
        }
        v6 += 32;
        if (v6 == a3) {
          return v7;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::GVNHoist::checkSafety(uint64_t this, _OWORD *a2, _OWORD *a3, llvm::BasicBlock *a4, int a5, uint64_t a6)
{
  int v22 = dword_1EBCF2110;
  if (a2 != a3)
  {
    BOOL v10 = a2;
    int v11 = (llvm::GVNHoist *)this;
    unsigned int v12 = (void *)((char *)a4 + 40);
    do
    {
      long long v13 = v10[1];
      v21[0] = *v10;
      v21[1] = v13;
      uint64_t v14 = *((void *)&v13 + 1);
      if (*((void *)&v13 + 1))
      {
        if (a5 != 1)
        {
          uint64_t v15 = (void *)*v12;
          if ((void *)*v12 == v12)
          {
            uint64_t v17 = 0;
          }
          else
          {
            if (v15) {
              uint64_t v16 = (uint64_t)(v15 - 3);
            }
            else {
              uint64_t v16 = 0;
            }
            if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB) {
              uint64_t v17 = 0;
            }
            else {
              uint64_t v17 = v16;
            }
          }
          uint64_t v18 = *((void *)v11 + 27) + 24;
          uint64_t v23 = 0;
          uint64_t v24 = *((void *)&v13 + 1);
          this = sub_1CBA0E618(v18, &v24, &v23);
          if ((this & 1) == 0) {
            goto LABEL_15;
          }
          if (!*(void *)(v23 + 8)) {
            goto LABEL_15;
          }
          this = llvm::GVNHoist::safeToHoistLdSt((uint64_t)v11, v17, v14);
          if (!this) {
            goto LABEL_15;
          }
LABEL_19:
          this = sub_1CD57FBCC(a6, (unint64_t)v21);
          uint64_t v19 = (_OWORD *)(*(void *)a6 + 32 * *(unsigned int *)(a6 + 8));
          long long v20 = *(_OWORD *)(this + 16);
          *uint64_t v19 = *(_OWORD *)this;
          v19[1] = v20;
          ++*(_DWORD *)(a6 + 8);
          goto LABEL_15;
        }
        this = llvm::GVNHoist::hasEHOnPath(v11, a4, *(const llvm::BasicBlock ***)(*((void *)&v13 + 1) + 40), &v22);
        if ((this & 1) == 0) {
          goto LABEL_19;
        }
      }
LABEL_15:
      v10 += 2;
    }
    while (v10 != a3);
  }
  return this;
}

void llvm::GVNHoist::findHoistableCandidates(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __n128 a5)
{
  v45[8] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)a2 + 88 * v5;
  if (*(_DWORD *)(a2 + 8))
  {
    if (v5)
    {
      uint64_t v7 = 88 * v5;
      uint64_t v8 = *(void *)a2;
      while ((*(void *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 88;
        v7 -= 88;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v8 = *(void *)a2;
    }
  }
  else
  {
LABEL_6:
    uint64_t v8 = *(void *)a2 + 88 * v5;
  }
  uint64_t v35 = *(void *)a2 + 88 * v5;
  if (v8 != v35)
  {
    uint64_t v9 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    do
    {
      BOOL v10 = *(llvm::BasicBlock **)v8;
      int v11 = *(__n128 **)(v8 + 8);
      unint64_t v12 = *(unsigned int *)(v8 + 16);
      if (v12)
      {
        unint64_t v13 = *(unsigned int *)(v8 + 16);
        while (1)
        {
          uint64_t v14 = (__n128 *)operator new(32 * v13, v9);
          if (v14) {
            break;
          }
          BOOL v15 = v13 > 1;
          v13 >>= 1;
          if (!v15) {
            goto LABEL_13;
          }
        }
        uint64_t v24 = v14;
        sub_1CCD6877C(v11, &v11[2 * v12], v12, v14, v13, a5);
        operator delete(v24);
      }
      else
      {
LABEL_13:
        a5 = sub_1CCD6877C(v11, &v11[2 * v12], v12, 0, 0, a5);
      }
      uint64_t v16 = (void *)*((void *)v10 + 5);
      if (v16 == (void *)((char *)v10 + 40))
      {
        uint64_t v38 = 0;
      }
      else
      {
        if (v16) {
          uint64_t v17 = (unsigned __int8 *)(v16 - 3);
        }
        else {
          uint64_t v17 = 0;
        }
        if (v17[16] - 29 >= 0xB) {
          uint64_t v17 = 0;
        }
        uint64_t v38 = (llvm::Instruction *)v17;
      }
      uint64_t v18 = *(unsigned int *)(v8 + 16);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v8 + 8);
        uint64_t v21 = v20 + 32 * v18;
        uint64_t v22 = 32 * v18;
        while (*(_DWORD *)(v20 + v19) == *(_DWORD *)v20 && *(void *)(v20 + v19 + 8) == *(void *)(v20 + 8))
        {
          v19 += 32;
          if (v22 == v19) {
            goto LABEL_32;
          }
        }
        uint64_t v21 = v20 + v19;
LABEL_32:
        while (v20 != v21)
        {
          long long v25 = (_OWORD *)v20;
          uint64_t v20 = v21;
          __int16 v43 = v45;
          uint64_t v44 = 0x200000000;
          int v26 = llvm::GVNHoist::checkSafety(a1, v25, (_OWORD *)v21, v10, a3, (uint64_t)&v43);
          if (llvm::GVNHoist::valueAnticipable(v26, (uint64_t)v43, (uint64_t)v43 + 32 * v44, v38))
          {
            int v39 = v10;
            uint64_t v40 = v42;
            uint64_t v41 = 0x400000000;
            sub_1CD766F08(a4, (unint64_t)&v39);
            if (v40 != v42) {
              free(v40);
            }
            if (v44)
            {
              uint64_t v33 = *(void *)a4 + 56 * *(unsigned int *)(a4 + 8);
              unsigned int v29 = *(_DWORD *)(v33 - 40);
              uint64_t v31 = 32 * v44;
              int v30 = (char *)v43 + 24;
              do
              {
                if (v29 >= *(_DWORD *)(v33 - 36)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v33 - 48) + 8 * v29) = *v30;
                unsigned int v29 = *(_DWORD *)(v33 - 40) + 1;
                *(_DWORD *)(v33 - 40) = v29;
                v30 += 4;
                v31 -= 32;
              }
              while (v31);
            }
          }
          uint64_t v27 = *(void *)(v8 + 8) + 32 * *(unsigned int *)(v8 + 16);
          uint64_t v21 = v20;
          if (v20 != v27)
          {
            uint64_t v21 = v20;
            while (*(_DWORD *)v21 == *(_DWORD *)v20 && *(void *)(v21 + 8) == *(void *)(v20 + 8))
            {
              v21 += 32;
              if (v21 == v27)
              {
                uint64_t v21 = *(void *)(v8 + 8) + 32 * *(unsigned int *)(v8 + 16);
                break;
              }
            }
          }
          if (v43 != v45) {
            free(v43);
          }
        }
      }
      uint64_t v32 = (void *)(v8 + 88);
      uint64_t v8 = v6;
      if (v32 != (void *)v6)
      {
        while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v32 += 11;
          if (v32 == (void *)v6)
          {
            uint64_t v8 = v6;
            goto LABEL_52;
          }
        }
        uint64_t v8 = (uint64_t)v32;
      }
LABEL_52:
      ;
    }
    while (v8 != v35);
  }
}

unint64_t sub_1CD766F08(uint64_t a1, unint64_t a2)
{
  unint64_t result = sub_1CD76A3F8(a1, a2);
  uint64_t v4 = (void *)(*(void *)a1 + 56 * *(unsigned int *)(a1 + 8));
  *uint64_t v4 = *(void *)result;
  void v4[2] = 0x400000000;
  v4[1] = v4 + 3;
  uint64_t v5 = (uint64_t)(v4 + 1);
  if (*(_DWORD *)(result + 16)) {
    unint64_t result = sub_1CBA6E388(v5, (const void **)(result + 8));
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void llvm::GVNHoist::updateAlignment(llvm::GVNHoist *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  int v3 = *((unsigned __int8 *)a3 + 16);
  if (a3 && v3 == 60 || a3 && v3 == 61)
  {
    unint64_t v4 = *((unsigned __int16 *)a3 + 9);
    unsigned int v5 = __clz(1 << (v4 >> 1)) ^ 0x3F;
    unsigned int v6 = __clz(1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1)) ^ 0x3F;
    if (v6 < v5) {
      LOWORD(v5) = v6;
    }
    __int16 v7 = v4 & 0xFF81 | (2 * v5);
LABEL_6:
    *((_WORD *)a3 + 9) = v7;
    return;
  }
  if (a3 && v3 == 59)
  {
    __int16 v8 = *((_WORD *)a3 + 9);
    unsigned int v9 = __clz(1 << v8) ^ 0x3F;
    unsigned int v10 = __clz(1 << *((_WORD *)a2 + 9)) ^ 0x3F;
    if (v9 > v10) {
      LOWORD(v10) = v9;
    }
    __int16 v7 = v8 & 0xFFC0 | v10;
    goto LABEL_6;
  }
}

uint64_t llvm::GVNHoist::rauw(uint64_t a1, uint64_t a2, llvm::Instruction *a3, llvm::Value *a4)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    __int16 v8 = *(llvm::Instruction ***)a2;
    uint64_t v9 = 8 * v4;
    do
    {
      unsigned int v10 = *v8;
      if (*v8 != a3)
      {
        llvm::GVNHoist::updateAlignment((llvm::GVNHoist *)a1, *v8, a3);
        if (a4)
        {
          uint64_t v11 = *(void *)(a1 + 216) + 24;
          uint64_t v14 = 0;
          BOOL v15 = v10;
          unint64_t v12 = 0;
          if (sub_1CBA0E618(v11, &v15, &v14)) {
            unint64_t v12 = *(llvm::ValueAsMetadata **)(v14 + 8);
          }
          llvm::Value::doRAUW(v12, a4, (llvm::Value *)1);
          llvm::MemorySSAUpdater::removeMemoryAccess(*(int32x2_t ***)(a1 + 224), v12, 0);
        }
        llvm::Instruction::andIRFlags((uint64_t)a3, (uint64_t)v10);
        llvm::combineMetadata(a3, v10, dword_1CFB2CDC0, 8, 1);
        llvm::Value::doRAUW(v10, a3, (llvm::Value *)1);
        llvm::MemoryDependenceResults::removeInstruction(*(llvm::MemoryDependenceResults **)(a1 + 208), v10);
        llvm::Instruction::eraseFromParent(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t llvm::GVNHoist::removeAndReplace(uint64_t a1, uint64_t a2, llvm::Instruction *a3, llvm::BasicBlock *a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 216) + 24;
  uint64_t v14 = 0;
  BOOL v15 = a3;
  if ((sub_1CBA0E618(v10, &v15, &v14) & 1) == 0) {
    return llvm::GVNHoist::rauw(a1, a2, a3, 0);
  }
  uint64_t v11 = *(llvm::Value **)(v14 + 8);
  if (a5 && v11)
  {
    llvm::MemorySSAUpdater::moveToPlace(*(uint64_t **)(a1 + 224), *(void *)(v14 + 8), a4, 2);
    uint64_t v12 = llvm::GVNHoist::rauw(a1, a2, a3, v11);
  }
  else
  {
    uint64_t v12 = llvm::GVNHoist::rauw(a1, a2, a3, *(llvm::Value **)(v14 + 8));
    if (!v11) {
      return v12;
    }
  }
  llvm::GVNHoist::raMPHIuw(a1, v11);
  return v12;
}

uint64_t llvm::GVNHoist::makeGepOperandsAvailable(llvm::GVNHoist *this, unsigned __int8 *a2, llvm::BasicBlock *a3, uint64_t a4)
{
  int v8 = a2[16];
  if (a2 && v8 == 60)
  {
    uint64_t v9 = (const llvm::Instruction *)*((void *)a2 - 4);
    if (*((unsigned char *)v9 + 16) == 62)
    {
      uint64_t v10 = 0;
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t result = 0;
  if (!a2 || v8 != 61) {
    return result;
  }
  uint64_t v10 = 0;
  uint64_t v9 = (const llvm::Instruction *)*((void *)a2 - 4);
  int v12 = *((unsigned __int8 *)v9 + 16);
  uint64_t v13 = *((void *)a2 - 8);
  if (v13)
  {
    unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
    if (v14 >= 0x1C)
    {
      if (v14 != 62) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      uint64_t v10 = (const llvm::Instruction *)*((void *)a2 - 8);
      if ((llvm::GVNHoist::allGepOperandsAvailable(this, v10, a3) & 1) == 0) {
        return 0;
      }
    }
  }
  if (v12 != 62) {
    return 0;
  }
LABEL_5:
  uint64_t result = llvm::GVNHoist::allGepOperandsAvailable(this, v9, a3);
  if (result)
  {
    llvm::GVNHoist::makeGepsAvailable((uint64_t)this, (llvm::User *)a2, (uint64_t)a3, a4, v9);
    if (v10)
    {
      if (*((unsigned char *)v10 + 16) == 62) {
        llvm::GVNHoist::makeGepsAvailable((uint64_t)this, (llvm::User *)a2, (uint64_t)a3, a4, v10);
      }
    }
    return 1;
  }
  return result;
}

unint64_t llvm::GVNHoist::hoist(llvm::MemoryDependenceResults **this, uint64_t *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    uint64_t v32 = 0;
    int v4 = 0;
    int v31 = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = *a2 + 56 * v3;
    int v30 = (char *)(this + 29);
    while (1)
    {
      __int16 v7 = *(llvm::BasicBlock **)v5;
      int v8 = *(uint64_t **)(v5 + 8);
      uint64_t v9 = *(unsigned int *)(v5 + 16);
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8 * v9;
        do
        {
          uint64_t v12 = *v8;
          if (*(llvm::BasicBlock **)(*v8 + 40) == v7 && (!v10 || sub_1CD766368((uint64_t)this, *v8, v10))) {
            uint64_t v10 = v12;
          }
          ++v8;
          v11 -= 8;
        }
        while (v11);
        if (v10)
        {
          int v15 = 0;
LABEL_29:
          llvm::Instruction::dropLocation((unsigned __int8 **)v10);
          llvm::GVNHoist::removeAndReplace((uint64_t)this, v5 + 8, (llvm::Instruction *)v10, v7, v15);
          int v19 = *(unsigned __int8 *)(v10 + 16);
          if (v19 == 60) {
            int v20 = v4 + 1;
          }
          else {
            int v20 = v4;
          }
          int v22 = v32;
          int v21 = HIDWORD(v32);
          if (v19 == 60) {
            int v23 = HIDWORD(v32);
          }
          else {
            int v23 = HIDWORD(v32) + 1;
          }
          if (v19 == 61) {
            int v24 = v32 + 1;
          }
          else {
            int v24 = v32;
          }
          if (v19 == 61)
          {
            int v20 = v4;
            int v23 = HIDWORD(v32);
          }
          BOOL v25 = v19 == 84;
          if (v19 != 84) {
            int v22 = v24;
          }
          int v26 = v31;
          if (v25) {
            int v26 = v31 + 1;
          }
          int v31 = v26;
          LODWORD(v32) = v22;
          if (!v25)
          {
            int v4 = v20;
            int v21 = v23;
          }
          HIDWORD(v32) = v21;
          goto LABEL_16;
        }
        int v8 = *(uint64_t **)(v5 + 8);
      }
      uint64_t v10 = *v8;
      if ((llvm::GVNHoist::allOperandsAvailable((llvm::GVNHoist *)this, (const llvm::Instruction *)*v8, v7) & 1) != 0
        || !*((unsigned char *)this + 580)
        && llvm::GVNHoist::makeGepOperandsAvailable((llvm::GVNHoist *)this, (unsigned __int8 *)v10, v7, v5 + 8))
      {
        uint64_t v13 = (void *)*((void *)v7 + 5);
        if (v13 == (void *)((char *)v7 + 40))
        {
          unsigned int v14 = 0;
        }
        else
        {
          if (v13) {
            uint64_t v16 = (unsigned __int8 *)(v13 - 3);
          }
          else {
            uint64_t v16 = 0;
          }
          if (v16[16] - 29 >= 0xB) {
            unsigned int v14 = 0;
          }
          else {
            unsigned int v14 = (llvm::Instruction *)v16;
          }
        }
        llvm::MemoryDependenceResults::removeInstruction(this[26], (llvm::Instruction *)v10);
        llvm::Instruction::moveBefore((llvm::Instruction *)v10, v14);
        uint64_t v34 = v14;
        uint64_t v17 = sub_1CC220A0C((uint64_t)v30, (uint64_t *)&v34);
        int v18 = *((_DWORD *)v17 + 2);
        *((_DWORD *)v17 + 2) = v18 + 1;
        uint64_t v33 = v10;
        *((_DWORD *)sub_1CC220A0C((uint64_t)v30, &v33) + 2) = v18;
        int v15 = 1;
        goto LABEL_29;
      }
LABEL_16:
      v5 += 56;
      if (v5 == v6) {
        goto LABEL_48;
      }
    }
  }
  uint64_t v32 = 0;
  int v31 = 0;
  int v4 = 0;
LABEL_48:
  uint64_t v27 = this[27];
  if (v27) {
    BOOL v28 = llvm::VerifyMemorySSA == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28) {
    llvm::MemorySSA::verifyMemorySSA(v27, 0);
  }
  return HIDWORD(v32) | ((unint64_t)(v31 + v32 + v4) << 32);
}

uint64_t sub_1CD7675D8(uint64_t a1, llvm::Instruction *this, llvm::GVNPass::ValueTable *a3)
{
  uint64_t result = llvm::Instruction::isAtomic(this);
  if ((result & 1) == 0 && (*((_WORD *)this + 9) & 1) == 0)
  {
    int v7 = llvm::GVNPass::ValueTable::lookupOrAdd(a3, *((llvm::Value **)this - 4));
    uint64_t v8 = *(void *)this;
    int v10 = v7;
    uint64_t v11 = v8;
    uint64_t result = sub_1CD768030(a1, (uint64_t)&v10);
    unsigned int v9 = *(_DWORD *)(result + 24);
    if (v9 >= *(_DWORD *)(result + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(result + 16) + 8 * v9) = this;
    ++*(_DWORD *)(result + 24);
  }
  return result;
}

uint64_t sub_1CD767694(uint64_t a1, llvm::Instruction *this, llvm::GVNPass::ValueTable *a3)
{
  uint64_t result = llvm::Instruction::isAtomic(this);
  if ((result & 1) == 0 && (*((_WORD *)this + 9) & 1) == 0)
  {
    int v7 = (llvm::Value *)*((void *)this - 8);
    int v9 = llvm::GVNPass::ValueTable::lookupOrAdd(a3, *((llvm::Value **)this - 4));
    uint64_t v10 = llvm::GVNPass::ValueTable::lookupOrAdd(a3, v7);
    uint64_t result = sub_1CD768030(a1, (uint64_t)&v9);
    unsigned int v8 = *(_DWORD *)(result + 24);
    if (v8 >= *(_DWORD *)(result + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(result + 16) + 8 * v8) = this;
    ++*(_DWORD *)(result + 24);
  }
  return result;
}

uint64_t sub_1CD767764(uint64_t a1, llvm::Value *a2, llvm::GVNPass::ValueTable *this)
{
  int v5 = llvm::GVNPass::ValueTable::lookupOrAdd(this, a2);
  if (sub_1CB8F8740((uint64_t)a2, 44))
  {
    int v9 = v5;
    uint64_t v10 = -3;
    uint64_t v6 = a1;
  }
  else
  {
    if (sub_1CBF99AB0((uint64_t)a2, 45)) {
      uint64_t v6 = a1 + 24;
    }
    else {
      uint64_t v6 = a1 + 48;
    }
    int v9 = v5;
    uint64_t v10 = -3;
  }
  uint64_t result = sub_1CD768030(v6, (uint64_t)&v9);
  unsigned int v8 = *(_DWORD *)(result + 24);
  if (v8 >= *(_DWORD *)(result + 28)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(result + 16) + 8 * v8) = a2;
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_1CD76783C(uint64_t a1, llvm::Value *a2, llvm::GVNPass::ValueTable *this)
{
  int v7 = llvm::GVNPass::ValueTable::lookupOrAdd(this, a2);
  uint64_t v8 = -3;
  uint64_t result = sub_1CD768030(a1, (uint64_t)&v7);
  unsigned int v6 = *(_DWORD *)(result + 24);
  if (v6 >= *(_DWORD *)(result + 28)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(result + 16) + 8 * v6) = a2;
  ++*(_DWORD *)(result + 24);
  return result;
}

void sub_1CD7678C8(char *a1, uint64_t *a2, uint64_t a3, int a4)
{
  v55[2] = *MEMORY[0x1E4F143B8];
  char v47 = 0;
  uint64_t v48 = 0;
  unint64_t v49 = 0;
  uint64_t v8 = *((unsigned int *)a2 + 4);
  uint64_t v9 = *a2 + (v8 << 6);
  if (*((_DWORD *)a2 + 2))
  {
    if (v8)
    {
      uint64_t v31 = v8 << 6;
      uint64_t v10 = *a2;
      while (1)
      {
        uint64_t v32 = *(void *)(v10 + 8);
        if ((*(_DWORD *)v10 != -1 || v32 != -1) && (*(_DWORD *)v10 != -2 || v32 != -2)) {
          break;
        }
        v10 += 64;
        v31 -= 64;
        if (!v31) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      uint64_t v10 = *a2;
    }
  }
  else
  {
LABEL_2:
    uint64_t v10 = *a2 + (v8 << 6);
  }
  unint64_t v11 = *a2 + ((unint64_t)v8 << 6);
  if (v10 == v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      if ((unint64_t)v12 >= v49)
      {
        uint64_t v12 = (char *)sub_1CC00319C((void **)&v47, (_OWORD *)v10);
      }
      else
      {
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v10;
        v12 += 16;
      }
      uint64_t v48 = v12;
      uint64_t v14 = v10 + 64;
      uint64_t v10 = v9;
      if (v14 != v9)
      {
        uint64_t v10 = v14;
        while (1)
        {
          uint64_t v15 = *(void *)(v10 + 8);
          if ((*(_DWORD *)v10 != -1 || v15 != -1) && (*(_DWORD *)v10 != -2 || v15 != -2)) {
            break;
          }
          v10 += 64;
          if (v10 == v9)
          {
            uint64_t v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v11);
    uint64_t v13 = v47;
  }
  unint64_t v18 = 126 - 2 * __clz((v12 - v13) >> 4);
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  if (v12 == v13) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_1CD768778((uint64_t)v13, (unint64_t)v12, (uint64_t)&v50, v19, 1);
  uint64_t v53 = v55;
  uint64_t v54 = 0x200000000;
  uint64_t v43 = *((void *)a1 + 24);
  uint64_t v44 = 0;
  char v45 = 0;
  v41[0] = 0;
  v41[1] = 0;
  unsigned int v42 = 0;
  v39[0] = 0;
  v39[1] = 0;
  int v40 = 0;
  int v21 = v47;
  int v20 = v48;
  if (v47 == v48)
  {
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v35 = v47;
    do
    {
      sub_1CD768448(&v50, *a2, *((_DWORD *)a2 + 4), *(_DWORD *)v21, *((void *)v21 + 1));
      if (v51 >= 2)
      {
        v36[0] = v38;
        v36[1] = v38;
        v36[2] = 2;
        int v37 = 0;
        uint64_t v23 = 8 * v51;
        for (uint64_t i = v50; ; i += 8)
        {
          BOOL v25 = *(const llvm::BasicBlock ***)(*(void *)i + 40);
          if (!llvm::GVNHoist::hasEH((llvm::GVNHoist *)a1, v25)) {
            sub_1CB89694C((llvm::SmallPtrSetImplBase *)v36, (uint64_t)v25);
          }
          v23 -= 8;
          if (!v23)
          {
            unsigned int v46 = v36;
            LODWORD(v54) = 0;
            sub_1CCD122E0();
          }
        }
      }
      if (v50 != (char *)&v52) {
        free(v50);
      }
      v21 += 16;
    }
    while (v21 != v20);
    uint64_t v22 = v39[0];
    int v21 = v35;
  }
  sub_1CD7684F0((uint64_t)a1, (uint64_t)v39, (uint64_t)v41);
  llvm::GVNHoist::findHoistableCandidates((uint64_t)a1, (uint64_t)v41, a4, a3, v26);
  MEMORY[0x1D25D9CD0](v22, 8);
  uint64_t v27 = v41[0];
  if (v42)
  {
    uint64_t v28 = 88 * v42;
    uint64_t v29 = v41[0] + 24;
    do
    {
      if ((*(void *)(v29 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v30 = *(void **)(v29 - 16);
        if ((void *)v29 != v30) {
          free(v30);
        }
      }
      v29 += 88;
      v28 -= 88;
    }
    while (v28);
  }
  MEMORY[0x1D25D9CD0](v27, 8);
  if (v53 != v55) {
    free(v53);
  }
  if (v21) {
    operator delete(v21);
  }
}

void llvm::GVNHoistPass::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

void llvm::initializeGVNHoistLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF1FC8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CCD678A0;
    v4[1] = &v2;
    unsigned int v3 = v4;
    std::__call_once(&qword_1EBCF1FC8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGVNHoistPass(llvm *this)
{
}

uint64_t sub_1CD768030(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD7680B8(*(void *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(void *)(a2 + 8), &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD7681A8(a1, a2, v7);
    *(_DWORD *)uint64_t v5 = *(_DWORD *)a2;
    *(void *)(v5 + 8) = *(void *)(a2 + 8);
    *(void *)(v5 + 16) = v5 + 32;
    *(void *)(v5 + 24) = 0x400000000;
  }
  return v5;
}

uint64_t sub_1CD7680B8(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    uint64_t v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v9 = (int *)(a1 + (v8 << 6));
    int v10 = *v9;
    uint64_t v11 = *((void *)v9 + 1);
    if (*v9 == a3 && v11 == a4)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v10 != -1 || v11 != -1)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v11 == -2;
        }
        if (v17 && v10 == -2) {
          uint64_t v15 = v9;
        }
        int v19 = v8 + v16++;
        uint64_t v8 = v19 & (a2 - 1);
        uint64_t v9 = (int *)(a1 + (v8 << 6));
        int v10 = *v9;
        uint64_t v11 = *((void *)v9 + 1);
        uint64_t v13 = 1;
        if (*v9 == a3 && v11 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v13 = 0;
      if (v15) {
        uint64_t v9 = v15;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v13 = 0;
  }
LABEL_8:
  *a5 = v9;
  return v13;
}