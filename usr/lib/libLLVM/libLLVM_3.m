void sub_1CB984CBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t i;
  unsigned char *v16;
  int v17;
  unsigned char v18[64];
  void *v19;
  uint64_t v20;
  unsigned char v21[64];
  char v22[24];
  void *v23;
  unsigned char v24[24];
  void *v25;
  void *v26;
  uint64_t v27;
  unsigned char v28[128];
  void *v29;
  uint64_t v30;
  void v31[9];

  v31[8] = *MEMORY[0x1E4F143B8];
  v4 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  v29 = v31;
  v30 = 0x200000000;
  if (!sub_1CB98A69C(a1, v4, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (uint64_t)&v29, 0))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_38;
  }
  v19 = v21;
  v20 = 0x200000000;
  v5 = v30;
  if (v30)
  {
    if (v30 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v21, v29, 32 * v30);
    LODWORD(v20) = v5;
  }
  v6 = operator new(0x58uLL);
  v7 = v6;
  *v6 = &unk_1F25F0020;
  v6[1] = v6 + 3;
  v6[2] = 0x200000000;
  if (v5)
  {
    if (v19 == v21)
    {
      if (v5 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v6 + 3, v21, 32 * v5);
      *((_DWORD *)v7 + 4) = v5;
    }
    else
    {
      v6[1] = v19;
      v17 = HIDWORD(v20);
      *((_DWORD *)v6 + 4) = v5;
      *((_DWORD *)v6 + 5) = v17;
      v19 = v21;
      HIDWORD(v20) = 0;
    }
    LODWORD(v20) = 0;
  }
  v23 = v7;
  v8 = v30;
  if (v30)
  {
    if (v30 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v18, v29, 32 * v30);
  }
  v9 = operator new(0x58uLL);
  *v9 = &unk_1F25F0068;
  v9[1] = v9 + 3;
  v9[2] = 0x200000000;
  if (v8)
  {
    if (v8 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v9 + 3, v18, 32 * v8);
    *((_DWORD *)v9 + 4) = v8;
  }
  v25 = v9;
  v26 = v28;
  v27 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v26, (uint64_t)v22, (uint64_t)&v26);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v27)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_27:
    v11 = v26;
    goto LABEL_28;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v26);
  v10 = v27;
  *(unsigned char *)(a3 + 144) = 1;
  v11 = v26;
  if (v10)
  {
    v12 = 32 * v10;
    v13 = (char *)v26 - 32;
    do
    {
      v14 = *(char **)&v13[v12 + 24];
      if (&v13[v12] == v14)
      {
        (*(void (**)(char *))(*(void *)&v13[v12] + 32))(&v13[v12]);
      }
      else if (v14)
      {
        (*(void (**)(char *))(*(void *)v14 + 40))(v14);
      }
      v12 -= 32;
    }
    while (v12);
    goto LABEL_27;
  }
LABEL_28:
  if (v11 != v28) {
    free(v11);
  }
  for (i = 0; i != -8; i -= 4)
  {
    v16 = (&v25)[i];
    if (&v24[i * 8] == v16)
    {
      (*(void (**)(unsigned char *))(*(void *)&v24[i * 8] + 32))(&v24[i * 8]);
    }
    else if (v16)
    {
      (*(void (**)(unsigned char *))(*(void *)v16 + 40))(v16);
    }
  }
  if (v19 != v21) {
    free(v19);
  }
LABEL_38:
  if (v29 != v31) {
    free(v29);
  }
}

void sub_1CB98513C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v37[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  sub_1CB986134((uint64_t)v21, v5, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 1, 0, 0);
  v35 = v37;
  uint64_t v36 = 0x200000000;
  if (!sub_1CB98A69C(a1, v5, v21[0], v21[1], (uint64_t)&v35, v21[21] << 6))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_42;
  }
  v25 = v27;
  uint64_t v26 = 0x200000000;
  uint64_t v6 = v36;
  if (v36)
  {
    if (v36 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v27, v35, 32 * v36);
    LODWORD(v26) = v6;
  }
  v7 = operator new(0x58uLL);
  v8 = v7;
  void *v7 = &unk_1F25F00B0;
  v7[1] = v7 + 3;
  v7[2] = 0x200000000;
  if (v6)
  {
    if (v25 == v27)
    {
      if (v6 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v7 + 3, v27, 32 * v6);
      *((_DWORD *)v8 + 4) = v6;
    }
    else
    {
      v7[1] = v25;
      int v19 = HIDWORD(v26);
      *((_DWORD *)v7 + 4) = v6;
      *((_DWORD *)v7 + 5) = v19;
      v25 = v27;
      HIDWORD(v26) = 0;
    }
    LODWORD(v26) = 0;
  }
  v29 = v8;
  v22 = v24;
  uint64_t v23 = 0x200000000;
  uint64_t v9 = v36;
  if (v36)
  {
    if (v36 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v24, v35, 32 * v36);
    LODWORD(v23) = v9;
  }
  v10 = operator new(0x58uLL);
  v11 = v10;
  void *v10 = &unk_1F25F00F8;
  v10[1] = v10 + 3;
  v10[2] = 0x200000000;
  if (v9)
  {
    if (v22 == v24)
    {
      if (v9 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v10 + 3, v24, 32 * v9);
      *((_DWORD *)v11 + 4) = v9;
    }
    else
    {
      v10[1] = v22;
      int v20 = HIDWORD(v23);
      *((_DWORD *)v10 + 4) = v9;
      *((_DWORD *)v10 + 5) = v20;
      v22 = v24;
      HIDWORD(v23) = 0;
    }
    LODWORD(v23) = 0;
  }
  v31 = v11;
  v32 = v34;
  uint64_t v33 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v32, (uint64_t)v28, (uint64_t)&v32);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v33)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_29:
    v13 = v32;
    goto LABEL_30;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v32);
  uint64_t v12 = v33;
  *(unsigned char *)(a3 + 144) = 1;
  v13 = v32;
  if (v12)
  {
    uint64_t v14 = 32 * v12;
    v15 = (char *)v32 - 32;
    do
    {
      v16 = *(char **)&v15[v14 + 24];
      if (&v15[v14] == v16)
      {
        (*(void (**)(char *))(*(void *)&v15[v14] + 32))(&v15[v14]);
      }
      else if (v16)
      {
        (*(void (**)(char *))(*(void *)v16 + 40))(v16);
      }
      v14 -= 32;
    }
    while (v14);
    goto LABEL_29;
  }
LABEL_30:
  if (v13 != v34) {
    free(v13);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    v18 = (&v31)[i];
    if (&v30[i * 8] == v18)
    {
      (*(void (**)(unsigned char *))(*(void *)&v30[i * 8] + 32))(&v30[i * 8]);
    }
    else if (v18)
    {
      (*(void (**)(unsigned char *))(*(void *)v18 + 40))(v18);
    }
  }
  if (v22 != v24) {
    free(v22);
  }
  if (v25 != v27) {
    free(v25);
  }
LABEL_42:
  if (v35 != v37) {
    free(v35);
  }
}

void sub_1CB9855F0(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v48[8] = *MEMORY[0x1E4F143B8];
  v46 = (long long *)v48;
  uint64_t v47 = 0x200000000;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*((void *)a2 + 1) + 24) + 32) + 40);
  sub_1CB986134((uint64_t)&v43, v6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (*(unsigned char *)a2
    || ((unsigned int v7 = *((_DWORD *)a2 + 1), v7 - 1 <= 0x3FFFFFFE)
      ? (uint64_t v8 = *(void *)(a1 + 80),
         int RegSizeInBits = *(_DWORD *)(*(void *)(v8 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v7, v8)+ 24)+ *(_DWORD *)(v8 + 272)* ((*(void *)(v8 + 248) - *(void *)(v8 + 240)) >> 3)))): (int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v7, v6)), RegSizeInBits != 64))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_25;
  }
  long long v10 = a2[1];
  long long v38 = *a2;
  long long v39 = v10;
  sub_1CB985CA8(a1, (uint64_t)&v38, 0, v6);
  if (v47 >= HIDWORD(v47))
  {
    if (v46 > &v38 || &v46[2 * v47] <= &v38) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v11 = &v46[2 * v47];
  long long v12 = v39;
  long long *v11 = v38;
  v11[1] = v12;
  uint64_t v13 = (v47 + 1);
  LODWORD(v47) = v13;
  LODWORD(v33) = 1;
  *((void *)&v33 + 1) = 0;
  *(void *)&long long v34 = 0;
  if (v13 >= HIDWORD(v47))
  {
    BOOL v29 = &v46[2 * v13] > &v33;
    if (v46 > &v33 || !v29) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v14 = &v46[2 * v47];
  long long v15 = v34;
  *uint64_t v14 = v33;
  v14[1] = v15;
  uint64_t v16 = (v47 + 1);
  BOOL v17 = v47 == -1;
  LODWORD(v47) = v47 + 1;
  v18 = v46;
  long long v31 = *v46;
  long long v32 = v46[1];
  int v19 = (char *)operator new(0x28uLL);
  *(void *)int v19 = &unk_1F25F0140;
  *(_OWORD *)(v19 + 8) = v31;
  *(_OWORD *)(v19 + 24) = v32;
  *((void *)&v39 + 1) = v19;
  v35 = v37;
  uint64_t v36 = 0x200000000;
  if (!v17)
  {
    if (v16 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v37, v18, 32 * v16);
    LODWORD(v36) = v16;
  }
  int v20 = operator new(0x58uLL);
  v21 = v20;
  *int v20 = &unk_1F25F0188;
  v20[1] = v20 + 3;
  v20[2] = 0x200000000;
  if (v16)
  {
    if (v35 == v37)
    {
      if (v16 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v20 + 3, v37, 32 * v16);
      *((_DWORD *)v21 + 4) = v16;
    }
    else
    {
      v20[1] = v35;
      int v30 = HIDWORD(v36);
      *((_DWORD *)v20 + 4) = v16;
      *((_DWORD *)v20 + 5) = v30;
      v35 = v37;
      HIDWORD(v36) = 0;
    }
    LODWORD(v36) = 0;
  }
  v41[0] = v21;
  v43 = v45;
  uint64_t v44 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v42);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v44)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_29:
    uint64_t v23 = v43;
    goto LABEL_30;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v43);
  uint64_t v22 = v44;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v23 = v43;
  if (v22)
  {
    uint64_t v24 = 32 * v22;
    v25 = (char *)v43 - 32;
    do
    {
      uint64_t v26 = *(char **)&v25[v24 + 24];
      if (&v25[v24] == v26)
      {
        (*(void (**)(char *))(*(void *)&v25[v24] + 32))(&v25[v24]);
      }
      else if (v26)
      {
        (*(void (**)(char *))(*(void *)v26 + 40))(v26);
      }
      v24 -= 32;
    }
    while (v24);
    goto LABEL_29;
  }
LABEL_30:
  if (v23 != v45) {
    free(v23);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    v28 = (unsigned char *)v41[i];
    if (&v40[i * 8] == v28)
    {
      (*(void (**)(unsigned char *))(*(void *)&v40[i * 8] + 32))(&v40[i * 8]);
    }
    else if (v28)
    {
      (*(void (**)(unsigned char *))(*(void *)v28 + 40))(v28);
    }
  }
  if (v35 != v37) {
    free(v35);
  }
LABEL_25:
  if (v46 != (long long *)v48) {
    free(v46);
  }
}

uint64_t sub_1CB985B5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 4);
  if ((int)v4 < 0) {
    uint64_t v5 = (uint64_t *)(a1 + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(a2 + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (!*v5) {
    return a3;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0) {
      return a3;
    }
  }
  int v7 = 0;
  uint64_t v8 = *(void *)(v6 + 8);
  if (!a4 || !v8)
  {
LABEL_15:
    if (v8) {
      goto LABEL_18;
    }
    return a3;
  }
  if (**(_WORD **)(v8 + 16) == 258)
  {
    uint64_t v9 = *(void *)(v8 + 32);
    a3 = v9 + 32;
    uint64_t v10 = *(unsigned int *)(v9 + 36);
    if ((int)v10 < 0) {
      v11 = (uint64_t *)(a1 + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      v11 = (uint64_t *)(a2 + 8 * v10);
    }
    uint64_t v12 = *v11;
    if (!v12) {
      return a3;
    }
    if ((*(unsigned char *)(v12 + 3) & 1) == 0)
    {
      uint64_t v12 = *(void *)(v12 + 24);
      if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0) {
        return a3;
      }
    }
    uint64_t v8 = *(void *)(v12 + 8);
    int v7 = 1;
    goto LABEL_15;
  }
  int v7 = 0;
LABEL_18:
  while (1)
  {
    int v13 = **(unsigned __int16 **)(v8 + 16);
    if (v13 != 177) {
      break;
    }
    uint64_t v14 = *(void *)(v8 + 32);
    a3 = v14 + 32;
    v7 ^= 2u;
    uint64_t v15 = *(unsigned int *)(v14 + 36);
    if ((int)v15 < 0) {
      uint64_t v16 = (uint64_t *)(a1 + 16 * (v15 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)(a2 + 8 * v15);
    }
    uint64_t v17 = *v16;
    if (v17)
    {
      if (*(unsigned char *)(v17 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3))
      {
        uint64_t v8 = *(void *)(v17 + 8);
        if (v8) {
          continue;
        }
      }
    }
    return a3;
  }
  if (v13 == 184) {
    return *(void *)(v8 + 32) + 32;
  }
  return a3;
}

uint64_t sub_1CB985CA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = *(unsigned char **)(result + 64);
  if (v7[319]) {
    BOOL v8 = v7[338] == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8 && !v7[326]) {
    return result;
  }
  if (*(unsigned char *)a2) {
    return result;
  }
  int v9 = *(_DWORD *)(a2 + 4);
  if ((v9 & 0x80000000) == 0) {
    return result;
  }
  uint64_t v10 = v9 & 0x7FFFFFFF;
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) + 16 * v10 + 8);
  if (!v11) {
    return result;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      return result;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    return result;
  }
  unsigned int v13 = *(_DWORD *)(*(void *)(v12 + 32) + 4);
  if (v13 - 1 <= 0x3FFFFFFE)
  {
    uint64_t v47 = *(void *)(v11 + 8);
    uint64_t v42 = *(void *)(result + 80);
    MinimalPhysRegClass = llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(result + 88), v13, v42);
    uint64_t v44 = *(void *)(v42 + 264);
    uint64_t v45 = (*(void *)(v42 + 248) - *(void *)(v42 + 240)) >> 3;
    int v46 = *(_DWORD *)(v42 + 272);
    uint64_t v12 = v47;
    result = *(unsigned int *)(v44
                             + 24
                             * (*(unsigned __int16 *)(*MinimalPhysRegClass + 24) + v46 * v45));
  }
  else
  {
    result = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(result + 80), v13, a4);
  }
  int v14 = **(unsigned __int16 **)(v12 + 16);
  uint64_t v15 = *(void *)(a4 + 24);
  if (v14 != 19)
  {
    uint64_t v18 = *(void *)(v15 + 16 * v10 + 8);
LABEL_26:
    if (v18)
    {
      if (*(unsigned char *)(v18 + 3) & 1) != 0 || (uint64_t v18 = *(void *)(v18 + 24)) != 0 && (*(unsigned char *)(v18 + 3))
      {
        uint64_t v20 = *(void *)(v18 + 8);
        if (v20)
        {
          if (**(_WORD **)(v20 + 16) == 318)
          {
            uint64_t v21 = *(void *)(v20 + 32);
            if (*(unsigned char *)(v21 + 32) == 1)
            {
              int64_t v22 = *(void *)(v21 + 48);
              HIDWORD(v23) = (result + 7) >> 3;
              LODWORD(v23) = HIDWORD(v23) - 2;
              unint64_t v24 = 263;
              switch((v23 >> 1))
              {
                case 1u:
                  goto LABEL_94;
                case 2u:
                case 4u:
                case 5u:
                case 6u:
                case 7u:
                case 8u:
                case 0xAu:
                  __break(1u);
                  goto LABEL_100;
                case 3u:
                  LODWORD(v24) = 775;
                  break;
                case 9u:
                  LODWORD(v24) = 1799;
                  break;
                case 0xBu:
                  LODWORD(v24) = 1287;
                  break;
                default:
                  goto LABEL_95;
              }
              goto LABEL_95;
            }
          }
        }
      }
    }
    if (v14 != 119 || result != 16)
    {
      if (v14 != 179 || a3 == 0) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(*(void *)(v12 + 32) + 36);
      v28 = (uint64_t *)((v27 & 0x80000000) != 0 ? v15 + 16 * (v27 & 0x7FFFFFFF) + 8 : *(void *)(a4 + 272) + 8 * v27);
      uint64_t v29 = *v28;
      if (!v29) {
        return result;
      }
      if ((*(unsigned char *)(v29 + 3) & 1) == 0)
      {
        uint64_t v29 = *(void *)(v29 + 24);
        if (!v29 || (*(unsigned char *)(v29 + 3) & 1) == 0) {
          return result;
        }
      }
      uint64_t v30 = *(void *)(v29 + 8);
      if (!v30 || **(_WORD **)(v30 + 16) != 318 || *(unsigned char *)(*(void *)(v30 + 32) + 32) != 1) {
        return result;
      }
      if ((v27 & 0x80000000) != 0) {
        long long v31 = (uint64_t *)(v15 + 16 * (v27 & 0x7FFFFFFF) + 8);
      }
      else {
        long long v31 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v27);
      }
      uint64_t v32 = *v31;
      if (!v32) {
        goto LABEL_92;
      }
      if ((*(unsigned char *)(v32 + 3) & 1) == 0)
      {
        uint64_t v32 = *(void *)(v32 + 24);
        if (!v32) {
          goto LABEL_92;
        }
        if ((*(unsigned char *)(v32 + 3) & 1) == 0)
        {
LABEL_91:
          uint64_t v32 = 0;
          goto LABEL_92;
        }
      }
      uint64_t v32 = *(void *)(v32 + 8);
      if (v32)
      {
        if (**(_WORD **)(v32 + 16) == 318)
        {
          uint64_t v33 = *(void *)(v32 + 32);
          if (*(unsigned char *)(v33 + 32) == 1)
          {
            uint64_t v32 = *(void *)(v33 + 48);
            unint64_t v34 = v32 & 0xFFFFFFFFFFFFFF00;
            uint64_t v32 = v32;
            goto LABEL_93;
          }
        }
        goto LABEL_91;
      }
LABEL_92:
      unint64_t v34 = 0;
LABEL_93:
      int64_t v22 = v34 | v32;
LABEL_94:
      LODWORD(v24) = 519;
      goto LABEL_95;
    }
    unint64_t v24 = *(unsigned int *)(*(void *)(v12 + 32) + 36);
    if ((v24 & 0x80000000) != 0) {
      v35 = (uint64_t *)(v15 + 16 * (v24 & 0x7FFFFFFF) + 8);
    }
    else {
      v35 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v24);
    }
    uint64_t v36 = *v35;
    if (!v36) {
      return result;
    }
    if ((*(unsigned char *)(v36 + 3) & 1) == 0)
    {
      uint64_t v36 = *(void *)(v36 + 24);
      if (!v36 || (*(unsigned char *)(v36 + 3) & 1) == 0) {
        return result;
      }
    }
    uint64_t v37 = *(void *)(v36 + 8);
    if (!v37 || **(_WORD **)(v37 + 16) != 318 || *(unsigned char *)(*(void *)(v37 + 32) + 32) != 1) {
      return result;
    }
    if ((v24 & 0x80000000) != 0) {
      long long v38 = (uint64_t *)(v15 + 16 * (v24 & 0x7FFFFFFF) + 8);
    }
    else {
LABEL_100:
    }
      long long v38 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v24);
    uint64_t v39 = *v38;
    if (!v39) {
      goto LABEL_87;
    }
    if ((*(unsigned char *)(v39 + 3) & 1) == 0)
    {
      uint64_t v39 = *(void *)(v39 + 24);
      if (!v39) {
        goto LABEL_87;
      }
      if ((*(unsigned char *)(v39 + 3) & 1) == 0)
      {
LABEL_86:
        uint64_t v39 = 0;
        goto LABEL_87;
      }
    }
    uint64_t v39 = *(void *)(v39 + 8);
    if (v39)
    {
      if (**(_WORD **)(v39 + 16) == 318)
      {
        uint64_t v40 = *(void *)(v39 + 32);
        if (*(unsigned char *)(v40 + 32) == 1)
        {
          uint64_t v39 = *(void *)(v40 + 48);
          unint64_t v24 = v39 & 0xFFFFFFFFFFFFFF00;
          uint64_t v39 = v39;
LABEL_88:
          int64_t v22 = v24 | v39;
          LODWORD(v24) = 263;
LABEL_95:
          uint64_t v41 = v22 / 2;
          *(_DWORD *)a2 = v24;
          *(_DWORD *)(a2 + 4) = v41;
          *(void *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 16) = 64;
          *(_DWORD *)(a2 + 24) = HIDWORD(v41);
          return result;
        }
      }
      goto LABEL_86;
    }
LABEL_87:
    unint64_t v24 = 0;
    goto LABEL_88;
  }
  while (1)
  {
    uint64_t v16 = *(void *)(v12 + 32);
    if ((*(_DWORD *)(v16 + 32) & 0xFFF00) != 0) {
      return result;
    }
    int v17 = *(_DWORD *)(v16 + 36);
    if ((v17 & 0x80000000) == 0) {
      return result;
    }
    uint64_t v18 = *(void *)(v15 + 16 * (v17 & 0x7FFFFFFF) + 8);
    if (v18
      && ((uint64_t v19 = v18, (*(unsigned char *)(v18 + 3) & 1) != 0)
       || (uint64_t v19 = *(void *)(v18 + 24)) != 0 && (*(unsigned char *)(v19 + 3) & 1) != 0))
    {
      uint64_t v12 = *(void *)(v19 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v14 = **(unsigned __int16 **)(v12 + 16);
    if (v14 != 19) {
      goto LABEL_26;
    }
  }
}

uint64_t sub_1CB986134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, int a7, char a8, __int16 a9)
{
  uint64_t v12 = a5;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = a3;
  *(void *)(a1 + 112) = a4;
  if (!*a5)
  {
    uint64_t v20 = *((unsigned int *)a5 + 1);
    if ((v20 - 1) <= 0x3FFFFFFE)
    {
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)(a3 + 264)
                                       + 24
                                       * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(a4, *((_DWORD *)a5 + 1), a3)+ 24)+ *(_DWORD *)(a3 + 272)* ((*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 3)));
    }
    else
    {
      *(_DWORD *)(a1 + 88) = llvm::TargetRegisterInfo::getRegSizeInBits(a3, *((_DWORD *)a5 + 1), a2);
      if ((v20 & 0x80000000) != 0)
      {
        char v21 = 0;
        int64_t v22 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
        goto LABEL_8;
      }
    }
    int64_t v22 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v20);
    char v21 = 1;
LABEL_8:
    uint64_t v23 = *v22;
    if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
      uint64_t v23 = *(void *)(v23 + 24);
    }
    uint64_t v18 = *(void *)(v23 + 8);
    unsigned int v24 = **(unsigned __int16 **)(v18 + 16) - 121;
    *(unsigned char *)(a1 + 92) = (v24 < 0x40) & (0xE7039C0000004001 >> v24);
    if (v21) {
      v25 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v20);
    }
    else {
      v25 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    uint64_t v26 = *v25;
    if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
      uint64_t v26 = *(void *)(v26 + 24);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    if (**(_WORD **)(v27 + 16) == 121) {
      uint64_t v17 = *(void *)(*(void *)(v27 + 32) + 48);
    }
    else {
      uint64_t v17 = 0;
    }
    sub_1CC73C210(v20, a2, (uint64_t)&v65);
    if (v67)
    {
      if (v66 < 0x41)
      {
        unint64_t v19 = (uint64_t)((void)v65 << -(uint64_t)v66) >> -(uint64_t)v66;
        BOOL v16 = v17 == 0;
        if (!v17)
        {
LABEL_25:
          unsigned int v28 = 4;
          goto LABEL_28;
        }
LABEL_24:
        unsigned int v28 = 5;
        goto LABEL_28;
      }
      if (v65) {
        MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      }
    }
    unint64_t v19 = 0;
    BOOL v16 = v17 == 0;
    if (!v17)
    {
      unsigned int v28 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 88) = 16;
  int v15 = *a5;
  BOOL v16 = 1;
  if (v15 != 3)
  {
    if (v15 != 1)
    {
      unsigned int v28 = 0;
      unint64_t v19 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      goto LABEL_28;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = *((void *)a5 + 2);
    *(unsigned char *)(a1 + 92) = 0;
    goto LABEL_25;
  }
  unint64_t v19 = 0;
  uint64_t v17 = *((void *)a5 + 2);
  *(unsigned char *)(a1 + 92) = 1;
  BOOL v16 = v17 == 0;
  if (v17) {
    unsigned int v28 = 5;
  }
  else {
    unsigned int v28 = 0;
  }
  uint64_t v18 = 0;
LABEL_28:
  *(_DWORD *)(a1 + 80) = v28;
  if ((a9 & 0xFF00) != 0) {
    *(unsigned char *)(a1 + 92) = a9;
  }
  if (v16)
  {
    int v29 = 1;
  }
  else
  {
    if (*(_UNKNOWN **)(v17 + 32) == &unk_1CFB2E344) {
      char v30 = *(unsigned char *)(*(void *)(v17 + 40) + 28);
    }
    else {
      char v30 = *(unsigned char *)(v17 + 52);
    }
    BOOL v31 = (v30 & 7) == 3 && (v30 & 8) == 0;
    int v29 = v31 | a6 ^ 1;
  }
  if (v28 < 4 || !v29) {
    goto LABEL_59;
  }
  int v32 = *(_DWORD *)(a1 + 88);
  if (v32 == 32)
  {
    if (*(unsigned char *)(a1 + 92))
    {
      if (sub_1CB9868C0(v17 + 24))
      {
LABEL_92:
        int v44 = *(_DWORD *)(a1 + 88);
        if (v44 == 32)
        {
          if (*(unsigned char *)(a1 + 92))
          {
            v57 = *(void **)(v17 + 32);
            v56 = (llvm::detail::DoubleAPFloat *)(v17 + 32);
            if (v57 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v56, (llvm::APInt *)&v65);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v56, (uint64_t)&v65);
            }
            unsigned int v47 = v66;
            v48 = v65;
            v58 = (unsigned int *)&v65;
            if (v66 >= 0x41) {
              v58 = v65;
            }
            unsigned int v59 = *v58;
            unsigned int v60 = (v59 >> 23);
            int v52 = (v59 >> 19) & 0xF;
            unsigned int v61 = v60 - 124;
            unsigned int v62 = (v52 | 0x10u) >> (125 - v60);
            if (v60 > 0x7C) {
              unsigned int v62 = (v59 >> 19) & 0xF;
            }
            else {
              unsigned int v61 = 0;
            }
            if (v60 | v52)
            {
              unsigned int v60 = v61;
              int v52 = v62;
            }
            int v55 = (16 * v60) | (v59 >> 31 << 7);
            goto LABEL_116;
          }
        }
        else if (v44 == 16 && *(unsigned char *)(a1 + 92))
        {
          int v46 = *(void **)(v17 + 32);
          uint64_t v45 = (llvm::detail::DoubleAPFloat *)(v17 + 32);
          if (v46 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v45, (llvm::APInt *)&v65);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v45, (uint64_t)&v65);
          }
          unsigned int v47 = v66;
          v48 = v65;
          v49 = (unsigned int *)&v65;
          if (v66 >= 0x41) {
            v49 = v65;
          }
          unsigned int v50 = *v49;
          unsigned int v51 = (v50 >> 10) & 0x1F;
          int v52 = (v50 >> 6) & 0xF;
          unsigned int v53 = v51 - 12;
          unsigned int v54 = (v52 | 0x10u) >> (13 - ((v50 >> 10) & 0x1F));
          if (v51 > 0xC) {
            unsigned int v54 = (v50 >> 6) & 0xF;
          }
          else {
            unsigned int v53 = 0;
          }
          if (v51 | v52)
          {
            unsigned int v51 = v53;
            int v52 = v54;
          }
          int v55 = (v50 >> 8) & 0x80 | (16 * v51);
LABEL_116:
          unint64_t v19 = v55 | v52;
          if (v47 >= 0x41 && v48) {
            MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
          }
        }
        unint64_t v63 = v19 >> *(_DWORD *)(a1 + 84);
        int v64 = *(unsigned __int8 *)(a1 + 32);
        *(_DWORD *)a1 = 1;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = v63;
        if (!v64) {
          *(unsigned char *)(a1 + 32) = 1;
        }
        return a1;
      }
      goto LABEL_59;
    }
  }
  else if (v32 == 16)
  {
    if (*(unsigned char *)(a1 + 92))
    {
      if (sub_1CB9867B8(v17 + 24)) {
        goto LABEL_92;
      }
      goto LABEL_59;
    }
  }
  else if (*(unsigned char *)(a1 + 92) || v32 != 64)
  {
    goto LABEL_59;
  }
  if (v19 >= 0x100 && a7)
  {
    unint64_t v33 = v19 & 0xFFFFFFFFFFFFFC03;
    if ((v19 & 0xFFFFFFFFFFFFFE01) != 0 && v33 && (v19 & 0xFFFFFFFFFFFFF807) != 0)
    {
      if ((v19 & 0xFFFFFFFFFFFFF00FLL) != 0)
      {
        *(_DWORD *)(a1 + 84) = 0;
        goto LABEL_59;
      }
      int v43 = 4;
    }
    else
    {
      if (v33) {
        int v42 = 3;
      }
      else {
        int v42 = 2;
      }
      if ((v19 & 0xFFFFFFFFFFFFFE01) != 0) {
        int v43 = v42;
      }
      else {
        int v43 = 1;
      }
    }
    *(_DWORD *)(a1 + 84) = v43;
    goto LABEL_92;
  }
  if (v19 <= 0xFF) {
    goto LABEL_92;
  }
LABEL_59:
  if (a7)
  {
    int v34 = **(unsigned __int16 **)(v18 + 16);
    if (v34 == 127 || v34 == 47)
    {
      sub_1CC73C210(*(_DWORD *)(*(void *)(v18 + 32) + 68), a2, (uint64_t)&v65);
      if (v67)
      {
        if (v66 >= 0x41)
        {
          if (v65) {
            MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v35 = (uint64_t)((void)v65 << -(char)v66) >> -(char)v66;
          int v36 = **(unsigned __int16 **)(v18 + 16);
          if (v36 == 127 && v35 <= 4)
          {
            unsigned int v37 = (uint64_t)((void)v65 << -(char)v66) >> -(char)v66;
LABEL_67:
            *(_DWORD *)(a1 + 84) = v37;
            uint64_t v12 = (_OWORD *)(*(void *)(v18 + 32) + 32);
            goto LABEL_68;
          }
          if (v36 == 47 && v35 <= 16)
          {
            unsigned int v37 = 31 - __clz(v35);
            if (1 << v37 == v35) {
              goto LABEL_67;
            }
          }
        }
      }
    }
  }
LABEL_68:
  if (v18 && (a8 & 1) != 0)
  {
    int v38 = *(unsigned __int8 *)(a1 + 32);
    if (**(_WORD **)(v18 + 16) == 318)
    {
      long long v39 = v12[1];
      *(_OWORD *)a1 = *v12;
      *(_OWORD *)(a1 + 16) = v39;
      if (!v38) {
        *(unsigned char *)(a1 + 32) = 1;
      }
      *(_DWORD *)(a1 + 80) = 2;
      return a1;
    }
  }
  else
  {
    int v38 = *(unsigned __int8 *)(a1 + 32);
  }
  long long v40 = v12[1];
  *(_OWORD *)a1 = *v12;
  *(_OWORD *)(a1 + 16) = v40;
  if (!v38) {
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

uint64_t sub_1CB9867B8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v4 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v3 = v4;
  if (v4 == &unk_1CFB2E344) {
    uint64_t v1 = *(void *)(v1 + 16);
  }
  unsigned int v5 = *(unsigned char *)(v1 + 28) & 7;
  if (v5 < 2) {
    return 0;
  }
  if (v5 == 3) {
    return 1;
  }
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (llvm::APInt *)&v12);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (uint64_t)&v12);
  }
  BOOL v8 = (uint64_t *)&v12;
  if (v13 >= 0x41) {
    BOOL v8 = v12;
  }
  uint64_t v9 = *v8;
  BOOL v6 = 1;
  if (v9)
  {
    unsigned int v10 = (v9 >> 10) & 0x1F;
    BOOL v11 = (v9 & 0x3F) != 0 || v10 - 9 > 0xA;
    if (v11 || v10 <= 0xC && (((v9 | 0x400uLL) >> (13 - v10)) & 0x3F) != 0) {
      BOOL v6 = 0;
    }
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0]();
  }
  return v6;
}

uint64_t sub_1CB9868C0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v4 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v3 = v4;
  if (v4 == &unk_1CFB2E344) {
    uint64_t v1 = *(void *)(v1 + 16);
  }
  unsigned int v5 = *(unsigned char *)(v1 + 28) & 7;
  if (v5 < 2) {
    return 0;
  }
  if (v5 == 3) {
    return 1;
  }
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (llvm::APInt *)&v12);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (uint64_t)&v12);
  }
  BOOL v8 = (uint64_t *)&v12;
  if (v13 >= 0x41) {
    BOOL v8 = v12;
  }
  uint64_t v9 = *v8;
  BOOL v6 = 1;
  if (v9)
  {
    unsigned int v10 = (v9 >> 23);
    BOOL v11 = (v9 & 0x7FFFF) != 0 || v10 - 121 > 0xA;
    if (v11 || v10 <= 0x7C && (((v9 | 0x800000uLL) >> (125 - v10)) & 0x7FFFF) != 0) {
      BOOL v6 = 0;
    }
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0]();
  }
  return v6;
}

void sub_1CB9869CC()
{
}

__n128 sub_1CB9869E0(uint64_t a1)
{
  v2 = (char *)operator new(0x28uLL);
  *(void *)v2 = &unk_1F25EFA80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB986A34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFA80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB986A6C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB986A7C()
{
}

_DWORD *sub_1CB986A90(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25EFAC8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CB986ADC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFAC8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CB986B0C(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *a2;
  v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

unsigned int *sub_1CB986B44(unsigned int *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v3 = 32 * v2;
    uint64_t v4 = *(void *)result - 32;
    do
    {
      __n128 result = *(unsigned int **)(v4 + v3 + 24);
      if ((unsigned int *)(v4 + v3) == result)
      {
        __n128 result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v4 + v3) + 32))(v4 + v3);
      }
      else if (result)
      {
        __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
      }
      v3 -= 32;
    }
    while (v3);
  }
  v1[2] = 0;
  return result;
}

uint64_t sub_1CB986BF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = a3 - a2;
  uint64_t v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    sub_1CD3FBB80();
  }
  if (a2 != a3)
  {
    __n128 result = *(void *)result + 32 * v7;
    do
    {
      uint64_t v8 = sub_1CB986C7C(result, v4);
      v4 += 32;
      __n128 result = v8 + 32;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 5);
  return result;
}

uint64_t sub_1CB986C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

unsigned int *sub_1CB986D14(unsigned int *a1, unsigned int *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(unsigned int **)a2 == a2 + 4)
    {
      uint64_t v5 = a2[2];
      uint64_t v6 = a1[2];
      if (v6 >= v5)
      {
        uint64_t v9 = *(void **)a1;
        if (v5)
        {
          uint64_t v10 = 0;
          do
          {
            sub_1CB986F38(&v9[v10], v4 + v10 * 8);
            v10 += 4;
          }
          while (4 * v5 != v10);
          uint64_t v6 = a1[2];
          BOOL v11 = &v9[v10];
          uint64_t v9 = *(void **)a1;
        }
        else
        {
          BOOL v11 = *(void **)a1;
        }
        uint64_t v12 = &v9[4 * v6];
        if (v12 != v11)
        {
          unsigned int v13 = v12 - 4;
          int v14 = v12 - 4;
          do
          {
            int v15 = (void *)v14[3];
            if (v14 == v15)
            {
              (*(void (**)(void *))(*v14 + 32))(v14);
            }
            else if (v15)
            {
              (*(void (**)(void *))(*v15 + 40))(v15);
            }
            v13 -= 4;
            BOOL v16 = v14 == v11;
            v14 -= 4;
          }
          while (!v16);
        }
      }
      else
      {
        if (a1[3] < v5)
        {
          sub_1CB986B44(a1);
          sub_1CD3FBB80();
        }
        if (v6)
        {
          uint64_t v7 = *(void **)a1;
          uint64_t v8 = 32 * v6;
          do
          {
            sub_1CB986F38(v7, v4);
            v4 += 32;
            v7 += 4;
            v8 -= 32;
          }
          while (v8);
        }
        else
        {
          uint64_t v6 = 0;
        }
        uint64_t v17 = a2[2];
        if (v6 != v17)
        {
          uint64_t v18 = *(void *)a1 + 32 * v6;
          uint64_t v19 = *(void *)a2 + 32 * v6;
          uint64_t v20 = 32 * v17 - 32 * v6;
          do
          {
            uint64_t v21 = *(void *)(v19 + 24);
            if (v21)
            {
              if (v19 == v21)
              {
                *(void *)(v18 + 24) = v18;
                (*(void (**)(void, uint64_t))(**(void **)(v19 + 24) + 24))(*(void *)(v19 + 24), v18);
              }
              else
              {
                *(void *)(v18 + 24) = v21;
                *(void *)(v19 + 24) = 0;
              }
            }
            else
            {
              *(void *)(v18 + 24) = 0;
            }
            v19 += 32;
            v18 += 32;
            v20 -= 32;
          }
          while (v20);
        }
      }
      a1[2] = v5;
      sub_1CB986B44(a2);
    }
    else
    {
      sub_1CD3FBD14((char **)a1, (char **)a2);
    }
  }
  return a1;
}

void *sub_1CB986F38(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

char **sub_1CB987018(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    uint64_t v6 = v2 - 32;
    do
    {
      uint64_t v7 = *(char **)&v6[v5 + 24];
      if (&v6[v5] == v7)
      {
        (*(void (**)(char *))(*(void *)&v6[v5] + 32))(&v6[v5]);
      }
      else if (v7)
      {
        (*(void (**)(char *))(*(void *)v7 + 40))(v7);
      }
      v5 -= 32;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CB9870E4()
{
}

__n128 sub_1CB9870F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25EFB10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CB98714C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFB10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB987184(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3 = *(void *)(*(void *)(*((void *)a2[1] + 3) + 32) + 40);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(long long **)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = (long long *)sub_1CB985B5C(*(void *)(v3 + 24), *(void *)(v3 + 272), (uint64_t)v4, 0);
    unsigned int v7 = v6;
  }
  else
  {
    unsigned int v7 = 0;
  }
  long long v12 = *v4;
  long long v13 = v4[1];
  sub_1CB985CA8(v5, (uint64_t)&v12, 1, v3);
  v10[0] = v12;
  v10[1] = v13;
  unsigned int v11 = v7;
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)v10);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  *(void *)&long long v13 = v11;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)&v12);
}

void sub_1CB987254()
{
}

__n128 sub_1CB987268(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25EFB58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB9872BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFB58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB9872F4(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB987304()
{
}

void *sub_1CB987318()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25EFBA0;
  return result;
}

void sub_1CB987350(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25EFBA0;
}

void sub_1CB987378(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  int v5 = 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)&v5);
}

void sub_1CB9873B0()
{
}

__n128 sub_1CB9873C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25EFBE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB987418(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFBE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB987450(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB987460()
{
}

void *sub_1CB987474()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25EFC30;
  return result;
}

void sub_1CB9874AC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25EFC30;
}

void sub_1CB9874D4(uint64_t a1, llvm::MachineFunction **a2)
{
  int v2 = 1;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)&v2);
}

void sub_1CB987508(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v60[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3) {
    goto LABEL_2;
  }
  uint64_t v8 = (int *)(a3 + 4);
  uint64_t v7 = *(unsigned int *)(a3 + 4);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 24) + 32) + 40);
  uint64_t v10 = (uint64_t *)((v7 & 0x80000000) != 0
                  ? *(void *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                  : *(void *)(v9 + 272) + 8 * v7);
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_2;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    goto LABEL_2;
  }
  long long v13 = *(_WORD **)(v12 + 16);
  int v14 = (unsigned __int16)*v13;
  if ((v14 - 118) <= 8 && ((1 << (v14 - 118)) & 0x141) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 32);
    if (!*(unsigned char *)(v16 + 32))
    {
      unsigned int v17 = *(_DWORD *)(v16 + 36);
      if (v17 - 1 <= 0x3FFFFFFE)
      {
        uint64_t v18 = *(void *)(a2 + 80);
        int RegSizeInBits = *(_DWORD *)(*(void *)(v18 + 264)
                                  + 24
                                  * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a2 + 88), v17, v18)+ 24)+ *(_DWORD *)(v18 + 272)* ((*(void *)(v18 + 248) - *(void *)(v18 + 240)) >> 3)));
      }
      else
      {
        int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a2 + 80), v17, v9);
      }
      long long v13 = *(_WORD **)(v12 + 16);
      if (RegSizeInBits == 16)
      {
        if (*v13 == 124) {
          a4 |= 8u;
        }
        unsigned int v54 = v56;
        uint64_t v55 = 0x200000000;
        if (sub_1CB987D10(a2, v9, (unsigned __int8 *)(*(void *)(v12 + 32) + 32), (uint64_t)&v54, a4, 0))
        {
          int v44 = v46;
          uint64_t v45 = 0x200000000;
          uint64_t v20 = v55;
          if (v55)
          {
            if (v55 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v46, v54, 32 * v55);
            LODWORD(v45) = v20;
          }
          uint64_t v21 = operator new(0x58uLL);
          int64_t v22 = v21;
          void *v21 = &unk_1F25EFC78;
          v21[1] = v21 + 3;
          v21[2] = 0x200000000;
          if (v20)
          {
            if (v44 == v46)
            {
              if (v20 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v21 + 3, v46, 32 * v20);
              *((_DWORD *)v22 + 4) = v20;
            }
            else
            {
              v21[1] = v44;
              int v42 = HIDWORD(v45);
              *((_DWORD *)v21 + 4) = v20;
              *((_DWORD *)v21 + 5) = v42;
              int v44 = v46;
              HIDWORD(v45) = 0;
            }
            LODWORD(v45) = 0;
          }
          v48 = v22;
          uint64_t v23 = v55;
          if (v55)
          {
            if (v55 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v43, v54, 32 * v55);
          }
          unsigned int v24 = operator new(0x58uLL);
          *unsigned int v24 = &unk_1F25EFCC0;
          v24[1] = v24 + 3;
          v24[2] = 0x200000000;
          if (v23)
          {
            if (v23 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v24 + 3, v43, 32 * v23);
            *((_DWORD *)v24 + 4) = v23;
          }
          unsigned int v50 = v24;
          unsigned int v51 = v53;
          uint64_t v52 = 0x400000000;
          sub_1CB986BF0((uint64_t)&v51, (uint64_t)v47, (uint64_t)&v51);
          *(void *)a1 = a1 + 16;
          *(void *)(a1 + 8) = 0x400000000;
          if (v52)
          {
            sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v51);
            uint64_t v25 = v52;
            *(unsigned char *)(a1 + 144) = 1;
            uint64_t v26 = v51;
            if (!v25)
            {
LABEL_75:
              if (v26 != v53) {
                free(v26);
              }
              for (uint64_t i = 0; i != -8; i -= 4)
              {
                uint64_t v41 = (&v50)[i];
                if (&v49[i * 8] == v41)
                {
                  (*(void (**)(unsigned char *))(*(void *)&v49[i * 8] + 32))(&v49[i * 8]);
                }
                else if (v41)
                {
                  (*(void (**)(unsigned char *))(*(void *)v41 + 40))(v41);
                }
              }
              if (v44 != v46) {
                free(v44);
              }
              if (v54 != v56) {
                free(v54);
              }
              return;
            }
            uint64_t v27 = 32 * v25;
            unsigned int v28 = (char *)v51 - 32;
            do
            {
              int v29 = *(char **)&v28[v27 + 24];
              if (&v28[v27] == v29)
              {
                (*(void (**)(char *))(*(void *)&v28[v27] + 32))(&v28[v27]);
              }
              else if (v29)
              {
                (*(void (**)(char *))(*(void *)v29 + 40))(v29);
              }
              v27 -= 32;
            }
            while (v27);
          }
          else
          {
            *(unsigned char *)(a1 + 144) = 1;
          }
          uint64_t v26 = v51;
          goto LABEL_75;
        }
        if (v54 != v56) {
          free(v54);
        }
        long long v13 = *(_WORD **)(v12 + 16);
      }
    }
    int v14 = (unsigned __int16)*v13;
  }
  if (v14 != 65) {
    goto LABEL_2;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v12 + 32) + 68), v9, (uint64_t)&v51);
  if (!v53[0]) {
    goto LABEL_2;
  }
  if (v52 >= 0x41)
  {
    if (v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  unint64_t v30 = (uint64_t)((void)v51 << -(char)v52) >> -(char)v52;
  if (v30 >> 16)
  {
LABEL_2:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 144) = 0;
    return;
  }
  if (v30 == 0xFFFF) {
    uint64_t v8 = (int *)(*(void *)(v12 + 32) + 36);
  }
  int v31 = *v8;
  int v32 = operator new(0x20uLL);
  void *v32 = &unk_1F25EFD08;
  v32[1] = a2;
  v32[2] = v9;
  *((_DWORD *)v32 + 6) = v31;
  v56[1] = v32;
  v57 = &unk_1F25EFD50;
  unsigned int v58 = a4;
  unsigned int v59 = &v57;
  unsigned int v51 = v53;
  uint64_t v52 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v51, (uint64_t)&v54, (uint64_t)v60);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (!v52)
  {
    *(unsigned char *)(a1 + 144) = 1;
LABEL_63:
    int v34 = v51;
    goto LABEL_64;
  }
  sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v51);
  uint64_t v33 = v52;
  *(unsigned char *)(a1 + 144) = 1;
  int v34 = v51;
  if (v33)
  {
    uint64_t v35 = 32 * v33;
    int v36 = (char *)v51 - 32;
    do
    {
      unsigned int v37 = *(char **)&v36[v35 + 24];
      if (&v36[v35] == v37)
      {
        (*(void (**)(char *))(*(void *)&v36[v35] + 32))(&v36[v35]);
      }
      else if (v37)
      {
        (*(void (**)(char *))(*(void *)v37 + 40))(v37);
      }
      v35 -= 32;
    }
    while (v35);
    goto LABEL_63;
  }
LABEL_64:
  if (v34 != v53) {
    free(v34);
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    long long v39 = (void *)v60[j - 1];
    if ((void **)((char *)&v57 + j * 8) == v39)
    {
      (*(void (***)(char *))((char *)&v57 + j * 8))[4]((char *)&v57 + j * 8);
    }
    else if (v39)
    {
      (*(void (**)(void *))(*v39 + 40))(v39);
    }
  }
}

BOOL sub_1CB987D10(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v9 = (long long *)a3;
  sub_1CB986134((uint64_t)&v26, a2, *(void *)(a1 + 80), *(void *)(a1 + 88), a3, 0, 0, 0, 0);
  int v12 = v29;
  if (v29 <= 3)
  {
    if (a6)
    {
      uint64_t v9 = (long long *)sub_1CB985B5C(*(void *)(a2 + 24), *(void *)(a2 + 272), (uint64_t)v9, 0);
      a6 = v13;
    }
    long long v30 = *v9;
    long long v31 = v9[1];
    sub_1CB985CA8(a1, (uint64_t)&v30, 1, a2);
    long long v26 = v30;
    long long v27 = v31;
    int v28 = a6;
    uint64_t v14 = *(unsigned int *)(a4 + 8);
    unint64_t v15 = *(void *)a4;
    if (v14 >= *(_DWORD *)(a4 + 12))
    {
      BOOL v24 = v15 + 32 * v14 > (unint64_t)&v26;
      if (v15 > (unint64_t)&v26 || !v24) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v16 = (_OWORD *)(v15 + 32 * *(unsigned int *)(a4 + 8));
    long long v17 = v27;
    _OWORD *v16 = v26;
    v16[1] = v17;
    unsigned int v18 = *(_DWORD *)(a4 + 12);
    uint64_t v19 = (*(_DWORD *)(a4 + 8) + 1);
    *(_DWORD *)(a4 + 8) = v19;
    LODWORD(v30) = 1;
    *((void *)&v30 + 1) = 0;
    *(void *)&long long v31 = v28 | a5;
    unint64_t v20 = *(void *)a4;
    if (v19 >= v18)
    {
      BOOL v25 = v20 + 32 * v19 > (unint64_t)&v30;
      if (v20 > (unint64_t)&v30 || !v25) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v21 = (_OWORD *)(v20 + 32 * *(unsigned int *)(a4 + 8));
    long long v22 = v31;
    _OWORD *v21 = v30;
    v21[1] = v22;
    ++*(_DWORD *)(a4 + 8);
  }
  return v12 < 4;
}

void *sub_1CB987F0C(void *a1)
{
  *a1 = &unk_1F25EFC78;
  int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB987F60(void *a1)
{
  *a1 = &unk_1F25EFC78;
  int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB987FD4(uint64_t a1)
{
  int v2 = operator new(0x58uLL);
  uint64_t v3 = v2;
  void *v2 = &unk_1F25EFC78;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB9880A4(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFC78;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98816C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB988188(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB9881D0(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB9881DC(void *a1)
{
  *a1 = &unk_1F25EFCC0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB988230(void *a1)
{
  *a1 = &unk_1F25EFCC0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB9882A4(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25EFCC0;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB988374(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFCC0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98843C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB988458(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB9884A0(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB9884B4()
{
}

__n128 sub_1CB9884C8(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F25EFD08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CB98851C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFD08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB988554(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1CB9885B8(*(void *)(a1 + 8), *(void *)(a2 + 8), *(void **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E66AB048);
  unsigned int v4 = *(llvm::MachineFunction **)a2;
  BOOL v5 = *(llvm::MachineInstr **)(a2 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  uint64_t v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

uint64_t sub_1CB9885B8(uint64_t a1, uint64_t a2, void *a3, int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11 = a5;
  uint64_t v12 = a3[3];
  uint64_t v13 = a3[34];
  do
  {
    uint64_t v14 = v11;
    unint64_t v15 = (uint64_t *)(v13 + 8 * v11);
    if ((int)v14 < 0) {
      unint64_t v15 = (uint64_t *)(v12 + 16 * (v14 & 0x7FFFFFFF) + 8);
    }
    uint64_t v16 = *v15;
    if (!v16) {
      break;
    }
    if ((*(unsigned char *)(v16 + 3) & 1) == 0)
    {
      uint64_t v16 = *(void *)(v16 + 24);
      if (!v16 || (*(unsigned char *)(v16 + 3) & 1) == 0) {
        break;
      }
    }
    uint64_t v17 = *(void *)(v16 + 8);
    if (!v17) {
      break;
    }
    if (**(_WORD **)(v17 + 16) != 19) {
      break;
    }
    if (*(_DWORD *)(v17 + 40) != 2) {
      break;
    }
    uint64_t v11 = *(unsigned int *)(*(void *)(v17 + 32) + 36);
  }
  while ((unint64_t)(v11 - 1) > 0x3FFFFFFE);
  if ((unint64_t)(v14 - 1) >= 0x3FFFFFFF
    && ((v14 & 0x80000000) == 0
      ? (uint64_t v19 = (uint64_t *)(v13 + 8 * v14))
      : (uint64_t v19 = (uint64_t *)(v12 + 16 * (v14 & 0x7FFFFFFF) + 8)),
        (uint64_t v20 = *v19) != 0
     && ((*(unsigned char *)(v20 + 3) & 1) != 0 || (uint64_t v20 = *(void *)(v20 + 24)) != 0 && (*(unsigned char *)(v20 + 3) & 1) != 0)))
  {
    uint64_t v18 = *(void *)(v20 + 8);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(*a3 + 16) + 176))(*(void *)(*a3 + 16));
  uint64_t v22 = *(unsigned int *)(*(void *)(v21 + 264)
                        + 24
                        * (*(unsigned __int16 *)(*(void *)a6 + 24)
                         + *(_DWORD *)(v21 + 272)
                         * ((*(void *)(v21 + 248) - *(void *)(v21 + 240)) >> 3)));
  if (v22 == 32) {
    int v23 = -25;
  }
  else {
    int v23 = -1;
  }
  if (!v18)
  {
    uint64_t v31 = *(void *)(a2 + 24);
    LODWORD(v104) = 0;
    uint64_t v101 = 0;
    goto LABEL_51;
  }
  int v24 = v23 + a4;
  uint64_t v25 = (8 * v22) | 1;
  int v26 = **(unsigned __int16 **)(v18 + 16);
  if (v26 == 76)
  {
    uint64_t v27 = *(void *)(v18 + 32);
    int v28 = *(_DWORD *)(v27 + 36);
    if (v28 < 0)
    {
      uint64_t v29 = v28 & 0x7FFFFFFF;
      if (v29 < *((_DWORD *)a3 + 108) && *(void *)(a3[53] + 8 * v29) == v25)
      {
        int v30 = *(_DWORD *)(v27 + 32 * (v24 + 1) + 4);
        goto LABEL_35;
      }
    }
LABEL_45:
    uint64_t v31 = *(void *)(a2 + 24);
    LODWORD(v104) = 0;
    uint64_t v101 = 0;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t *, char *, uint64_t *))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), v18, &v104, (char *)&v101 + 4, &v101))
    {
      BOOL v42 = v101 == a4;
    }
    else
    {
      BOOL v42 = 0;
    }
    if (!v42 || (*(void *)(a3[3] + 16 * (v104 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != a6)
    {
LABEL_51:
      uint64_t v43 = *(void *)(*(void *)(a1 + 72) + 8) + 912;
      if ((*(_WORD *)(a2 + 44) & 4) == 0)
      {
        int v44 = *(llvm::MachineFunction **)(v31 + 32);
        uint64_t v45 = *(unsigned __int8 **)(a2 + 56);
        v102[0] = v45;
        if (v45) {
          llvm::MetadataTracking::track((uint64_t)v102, v45, 2);
        }
        uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v44, v43, v102, 0);
        if (!v102[0]) {
          goto LABEL_55;
        }
        int v85 = *v102[0];
        if ((v85 - 4) > 0x1E)
        {
          if ((v85 - 3) >= 0xFFFFFFFE) {
            v91 = v102[0];
          }
          else {
            v91 = 0;
          }
          if ((v85 - 3) < 0xFFFFFFFE)
          {
            if (v85 == 3) {
              *((void *)v102[0] + 1) = 0;
            }
            goto LABEL_55;
          }
          unint64_t v87 = (unint64_t)(v91 + 8);
        }
        else
        {
          if ((v102[0][1] & 0x7F) != 2 && !*((_DWORD *)v102[0] + 3)) {
            goto LABEL_55;
          }
          uint64_t v86 = *((void *)v102[0] + 2);
          if ((v86 & 4) == 0) {
            goto LABEL_55;
          }
          unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
          if (!v87) {
            goto LABEL_55;
          }
        }
        v106 = v102;
        sub_1CC5FA668(v87 + 16, &v106);
LABEL_55:
        uint64_t v47 = *(void *)(v31 + 40);
        *(void *)(MachineInstr + 24) = v47;
        uint64_t v48 = *(void *)(v47 + 32);
        uint64_t v49 = *(unsigned int *)(MachineInstr + 40);
        if (v49)
        {
          uint64_t v70 = *(void *)(MachineInstr + 32);
          uint64_t v71 = *(void *)(v48 + 40);
          uint64_t v72 = 32 * v49;
          do
          {
            if (!*(unsigned char *)v70)
            {
              uint64_t v73 = *(unsigned int *)(v70 + 4);
              if ((int)v73 >= 0) {
                v74 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v73);
              }
              else {
                v74 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
              }
              uint64_t v75 = *v74;
              if (*v74)
              {
                uint64_t v76 = *(void *)(v75 + 16);
                *(void *)(v75 + 16) = v70;
                *(void *)(v70 + 16) = v76;
                if (*(unsigned char *)(v70 + 3))
                {
                  *(void *)(v70 + 24) = v75;
                }
                else
                {
                  *(void *)(v70 + 24) = 0;
                  v74 = (uint64_t *)(v76 + 24);
                }
              }
              else
              {
                *(void *)(v70 + 16) = v70;
                *(void *)(v70 + 24) = 0;
              }
              uint64_t *v74 = v70;
            }
            v70 += 32;
            v72 -= 32;
          }
          while (v72);
        }
        uint64_t v50 = *(void *)(v48 + 728);
        if (v50) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 24))(v50, MachineInstr);
        }
        unint64_t v51 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t MachineInstr = v51 | *(void *)MachineInstr & 7;
        *(void *)(MachineInstr + 8) = a2;
        *(void *)(v51 + 8) = MachineInstr;
        *(void *)a2 = *(void *)a2 & 7 | MachineInstr;
LABEL_66:
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a3, "", 0);
        *(void *)(a3[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a6 & 0xFFFFFFFFFFFFFFFBLL;
        uint64_t v54 = a3[1];
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v54 + 24))(v54);
        }
        long long v107 = 0uLL;
        *(void *)&long long v108 = 0;
        LODWORD(v106) = 0x1000000;
        HIDWORD(v106) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v44, (const llvm::MachineOperand *)&v106);
        long long v107 = 0uLL;
        *(void *)&long long v108 = 0;
        LODWORD(v106) = (a4 & 0xFFF) << 8;
        HIDWORD(v106) = v14;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v44, (const llvm::MachineOperand *)&v106);
        return *(unsigned int *)(*(void *)(MachineInstr + 32) + 4);
      }
      int v44 = *(llvm::MachineFunction **)(v31 + 32);
      uint64_t v52 = *(unsigned __int8 **)(a2 + 56);
      v102[0] = v52;
      if (v52) {
        llvm::MetadataTracking::track((uint64_t)v102, v52, 2);
      }
      uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v44, v43, v102, 0);
      if (v102[0])
      {
        int v88 = *v102[0];
        if ((v88 - 4) > 0x1E)
        {
          if ((v88 - 3) >= 0xFFFFFFFE) {
            v92 = v102[0];
          }
          else {
            v92 = 0;
          }
          if ((v88 - 3) < 0xFFFFFFFE)
          {
            if (v88 == 3) {
              *((void *)v102[0] + 1) = 0;
            }
            goto LABEL_62;
          }
          unint64_t v90 = (unint64_t)(v92 + 8);
        }
        else
        {
          if ((v102[0][1] & 0x7F) != 2 && !*((_DWORD *)v102[0] + 3)) {
            goto LABEL_62;
          }
          uint64_t v89 = *((void *)v102[0] + 2);
          if ((v89 & 4) == 0) {
            goto LABEL_62;
          }
          unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8;
          if (!v90) {
            goto LABEL_62;
          }
        }
        v106 = v102;
        sub_1CC5FA668(v90 + 16, &v106);
      }
LABEL_62:
      if (v31 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0) {
        *(_WORD *)(MachineInstr + 44) |= 0xCu;
      }
      sub_1CC31973C((uint64_t *)(v31 + 40), (uint64_t *)a2, MachineInstr);
      goto LABEL_66;
    }
    uint64_t v38 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a3, "", 0);
    *(void *)(a3[3] + 16 * (v38 & 0x7FFFFFFF)) = a6 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v56 = a3[1];
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 24))(v56);
    }
    uint64_t v57 = *(void *)(*(void *)(a1 + 72) + 8) + 912;
    if ((*(_WORD *)(a2 + 44) & 4) == 0)
    {
      unsigned int v58 = *(llvm::MachineFunction **)(v31 + 32);
      unsigned int v59 = *(unsigned __int8 **)(a2 + 56);
      v102[0] = v59;
      if (v59) {
        llvm::MetadataTracking::track((uint64_t)v102, v59, 2);
      }
      uint64_t v60 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v58, v57, v102, 0);
      if (!v102[0]) {
        goto LABEL_76;
      }
      int v93 = *v102[0];
      if ((v93 - 4) > 0x1E)
      {
        if ((v93 - 3) >= 0xFFFFFFFE) {
          v99 = v102[0];
        }
        else {
          v99 = 0;
        }
        if ((v93 - 3) < 0xFFFFFFFE)
        {
          if (v93 == 3) {
            *((void *)v102[0] + 1) = 0;
          }
          goto LABEL_76;
        }
        unint64_t v95 = (unint64_t)(v99 + 8);
      }
      else
      {
        if ((v102[0][1] & 0x7F) != 2 && !*((_DWORD *)v102[0] + 3)) {
          goto LABEL_76;
        }
        uint64_t v94 = *((void *)v102[0] + 2);
        if ((v94 & 4) == 0) {
          goto LABEL_76;
        }
        unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (!v95) {
          goto LABEL_76;
        }
      }
      v106 = v102;
      sub_1CC5FA668(v95 + 16, &v106);
LABEL_76:
      uint64_t v61 = *(void *)(v31 + 40);
      *(void *)(v60 + 24) = v61;
      uint64_t v62 = *(void *)(v61 + 32);
      uint64_t v63 = *(unsigned int *)(v60 + 40);
      if (v63)
      {
        uint64_t v78 = *(void *)(v60 + 32);
        uint64_t v79 = *(void *)(v62 + 40);
        uint64_t v80 = 32 * v63;
        do
        {
          if (!*(unsigned char *)v78)
          {
            uint64_t v81 = *(unsigned int *)(v78 + 4);
            if ((int)v81 >= 0) {
              v82 = (uint64_t *)(*(void *)(v79 + 272) + 8 * v81);
            }
            else {
              v82 = (uint64_t *)(*(void *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
            }
            uint64_t v83 = *v82;
            if (*v82)
            {
              uint64_t v84 = *(void *)(v83 + 16);
              *(void *)(v83 + 16) = v78;
              *(void *)(v78 + 16) = v84;
              if (*(unsigned char *)(v78 + 3))
              {
                *(void *)(v78 + 24) = v83;
              }
              else
              {
                *(void *)(v78 + 24) = 0;
                v82 = (uint64_t *)(v84 + 24);
              }
            }
            else
            {
              *(void *)(v78 + 16) = v78;
              *(void *)(v78 + 24) = 0;
            }
            uint64_t *v82 = v78;
          }
          v78 += 32;
          v80 -= 32;
        }
        while (v80);
      }
      uint64_t v64 = *(void *)(v62 + 728);
      if (v64) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 24))(v64, v60);
      }
      unint64_t v65 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v60 = v65 | *(void *)v60 & 7;
      *(void *)(v60 + 8) = a2;
      *(void *)(v65 + 8) = v60;
      *(void *)a2 = *(void *)a2 & 7 | v60;
      goto LABEL_87;
    }
    unsigned int v58 = *(llvm::MachineFunction **)(v31 + 32);
    unsigned int v66 = *(unsigned __int8 **)(a2 + 56);
    v102[0] = v66;
    if (v66) {
      llvm::MetadataTracking::track((uint64_t)v102, v66, 2);
    }
    uint64_t v60 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v58, v57, v102, 0);
    if (v102[0])
    {
      int v96 = *v102[0];
      if ((v96 - 4) > 0x1E)
      {
        if ((v96 - 3) >= 0xFFFFFFFE) {
          v100 = v102[0];
        }
        else {
          v100 = 0;
        }
        if ((v96 - 3) < 0xFFFFFFFE)
        {
          if (v96 == 3) {
            *((void *)v102[0] + 1) = 0;
          }
          goto LABEL_83;
        }
        unint64_t v98 = (unint64_t)(v100 + 8);
      }
      else
      {
        if ((v102[0][1] & 0x7F) != 2 && !*((_DWORD *)v102[0] + 3)) {
          goto LABEL_83;
        }
        uint64_t v97 = *((void *)v102[0] + 2);
        if ((v97 & 4) == 0) {
          goto LABEL_83;
        }
        unint64_t v98 = v97 & 0xFFFFFFFFFFFFFFF8;
        if (!v98) {
          goto LABEL_83;
        }
      }
      v106 = v102;
      sub_1CC5FA668(v98 + 16, &v106);
    }
LABEL_83:
    if (v31 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0) {
      *(_WORD *)(v60 + 44) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)(v31 + 40), (uint64_t *)a2, v60);
LABEL_87:
    long long v107 = 0uLL;
    *(void *)&long long v108 = 0;
    LODWORD(v106) = 0x1000000;
    HIDWORD(v106) = v38;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v58, (const llvm::MachineOperand *)&v106);
    long long v107 = 0uLL;
    LODWORD(v106) = 0;
    HIDWORD(v106) = v104;
    *(void *)&long long v108 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v58, (const llvm::MachineOperand *)&v106);
    if ((v104 & 0x80000000) != 0) {
      char v67 = (unsigned int **)(a3[3] + 16 * (v104 & 0x7FFFFFFF) + 8);
    }
    else {
      char v67 = (unsigned int **)(a3[34] + 8 * v104);
    }
    v68 = *v67;
    if (v68)
    {
      while (1)
      {
        unsigned int v69 = *v68;
        if ((*v68 & 0x1000000) == 0) {
          break;
        }
        v68 = (unsigned int *)*((void *)v68 + 3);
        if (!v68) {
          return v38;
        }
      }
LABEL_93:
      unsigned int *v68 = v69 & 0xFBFFFFFF;
      while (1)
      {
        v68 = (unsigned int *)*((void *)v68 + 3);
        if (!v68) {
          break;
        }
        unsigned int v69 = *v68;
        if ((*v68 & 0x1000000) == 0) {
          goto LABEL_93;
        }
      }
    }
    return v38;
  }
  if (v26 != 126) {
    goto LABEL_45;
  }
  if (v24) {
    goto LABEL_45;
  }
  int v30 = *(_DWORD *)(*(void *)(v18 + 32) + 36);
  if ((v30 & 0x80000000) == 0
    || (v30 & 0x7FFFFFFFu) >= *((_DWORD *)a3 + 108)
    || *(void *)(a3[53] + 8 * (v30 & 0x7FFFFFFF)) != v25)
  {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v32 = *(void *)(a2 + 24);
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  uint64_t v33 = *(void *)(v32 + 32);
  unint64_t v34 = *(void *)(v33 + 40);
  v106 = (unsigned __int8 **)&unk_1F261CD58;
  *(void *)&long long v107 = v33;
  long long v108 = v34;
  *((void *)&v107 + 1) = (*(uint64_t (**)(void))(**(void **)(v33 + 16) + 104))(*(void *)(v33 + 16));
  uint64_t v104 = 0;
  *((void *)&v109 + 1) = a2;
  *(void *)&long long v110 = 0;
  *(void *)&long long v109 = *(void *)(a2 + 24);
  uint64_t v35 = (_OWORD *)(a2 + 56);
  if (v35 != (long long *)((char *)&v108 + 8))
  {
    int v36 = *(unsigned __int8 **)v35;
    *((void *)&v108 + 1) = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v108 + 8, v36, 2);
    }
  }
  uint64_t v104 = a6;
  int v105 = 2;
  LODWORD(v102[0]) = v30;
  int v103 = 0;
  ((void (*)(unsigned __int8 ***, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, void))v106[4])(&v106, 19, &v104, 1, v102, 1, 0);
  uint64_t v38 = *(unsigned int *)(*(void *)(v37 + 32) + 4);
  v106 = (unsigned __int8 **)&unk_1F261CD58;
  if (*((void *)&v108 + 1))
  {
    int v39 = **((unsigned char **)&v108 + 1);
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        uint64_t v77 = *((void *)&v108 + 1);
      }
      else {
        uint64_t v77 = 0;
      }
      if ((v39 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v41 = v77 + 8;
LABEL_115:
        v102[0] = (unsigned __int8 *)&v108 + 8;
        sub_1CC5FA668(v41 + 16, v102);
        return v38;
      }
      if (v39 == 3) {
        *(void *)(*((void *)&v108 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v108 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v108 + 1) + 12))
    {
      uint64_t v40 = *(void *)(*((void *)&v108 + 1) + 16);
      if ((v40 & 4) != 0)
      {
        unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v41) {
          goto LABEL_115;
        }
      }
    }
  }
  return v38;
}

void sub_1CB989200()
{
}

_DWORD *sub_1CB989214(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25EFD50;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CB989260(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFD50;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CB989290(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = *a2;
  int v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void sub_1CB9892CC()
{
}

__n128 sub_1CB9892E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25EFD98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB989334(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFD98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB98936C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB989378(void *a1)
{
  *a1 = &unk_1F25EFDE0;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB9893CC(void *a1)
{
  *a1 = &unk_1F25EFDE0;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB989440(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  int v3 = v2;
  void *v2 = &unk_1F25EFDE0;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB989510(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFDE0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB9895D8(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB9895F4(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98963C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98964C(void *a1)
{
  *a1 = &unk_1F25EFE28;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB9896A0(void *a1)
{
  *a1 = &unk_1F25EFE28;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB989714(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25EFE28;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB9897E4(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFE28;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB9898AC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB9898C8(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB989910(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98991C(void *a1)
{
  *a1 = &unk_1F25EFE70;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB989970(void *a1)
{
  *a1 = &unk_1F25EFE70;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB9899E4(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25EFE70;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB989AB4(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFE70;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB989B7C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB989B98(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB989BE0(uint64_t a1, llvm::MachineFunction **a2)
{
}

uint64_t sub_1CB989BF0(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  sub_1CB986134((uint64_t)v28, a2, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a3, 1, 0, 0, 0);
  int RegSizeInBits = 0;
  if (!*(unsigned char *)a3)
  {
    unsigned int v9 = *((_DWORD *)a3 + 1);
    if (v9 - 1 <= 0x3FFFFFFE)
    {
      uint64_t v10 = *(void *)(a1 + 80);
      int RegSizeInBits = *(_DWORD *)(*(void *)(v10 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v9, v10)+ 24)+ *(_DWORD *)(v10 + 272)* ((*(void *)(v10 + 248) - *(void *)(v10 + 240)) >> 3)));
    }
    else
    {
      int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v9, a2);
    }
  }
  if (v29 > 3 || RegSizeInBits != 32 && RegSizeInBits != 16) {
    return 0;
  }
  long long v11 = a3[1];
  long long v26 = *a3;
  long long v27 = v11;
  sub_1CB985CA8(a1, (uint64_t)&v26, 0, a2);
  uint64_t v12 = *(unsigned int *)(a4 + 8);
  unint64_t v13 = *(void *)a4;
  if (v12 >= *(_DWORD *)(a4 + 12))
  {
    BOOL v22 = v13 + 32 * v12 > (unint64_t)&v26;
    if (v13 > (unint64_t)&v26 || !v22) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v14 = (_OWORD *)(v13 + 32 * *(unsigned int *)(a4 + 8));
  long long v15 = v27;
  *uint64_t v14 = v26;
  v14[1] = v15;
  unsigned int v16 = *(_DWORD *)(a4 + 12);
  uint64_t v17 = (*(_DWORD *)(a4 + 8) + 1);
  *(_DWORD *)(a4 + 8) = v17;
  LODWORD(v24) = 1;
  *((void *)&v24 + 1) = 0;
  *(void *)&long long v25 = 0;
  unint64_t v18 = *(void *)a4;
  if (v17 >= v16)
  {
    BOOL v23 = v18 + 32 * v17 > (unint64_t)&v24;
    if (v18 <= (unint64_t)&v24 && v23) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v19 = (_OWORD *)(v18 + 32 * *(unsigned int *)(a4 + 8));
  long long v20 = v25;
  *uint64_t v19 = v24;
  v19[1] = v20;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

void sub_1CB989E28()
{
}

__n128 sub_1CB989E3C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_1F25EFEB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB989E90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFEB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB989EC8(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB989ED4(void *a1)
{
  *a1 = &unk_1F25EFF00;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB989F28(void *a1)
{
  *a1 = &unk_1F25EFF00;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB989F9C(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25EFF00;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98A06C(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFF00;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98A134(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98A150(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98A198(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB98A1AC()
{
}

__n128 sub_1CB98A1C0(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F25EFF48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CB98A214(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFF48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB98A24C(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3 = *(void *)(*(void *)(*((void *)a2[1] + 3) + 32) + 40);
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v4 = *(long long **)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v4 = (long long *)sub_1CB985B5C(*(void *)(v3 + 24), *(void *)(v3 + 272), (uint64_t)v4, 0);
    unsigned int v7 = v6;
  }
  else
  {
    unsigned int v7 = 0;
  }
  long long v12 = *v4;
  long long v13 = v4[1];
  sub_1CB985CA8(v5, (uint64_t)&v12, 1, v3);
  v10[0] = v12;
  v10[1] = v13;
  unsigned int v11 = v7;
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)v10);
  unsigned int v9 = *a2;
  uint64_t v8 = a2[1];
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  *(void *)&long long v13 = v11;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)&v12);
}

void sub_1CB98A31C()
{
}

__n128 sub_1CB98A330(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_1F25EFF90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB98A384(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EFF90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB98A3BC(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98A3C8(void *a1)
{
  *a1 = &unk_1F25EFFD8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB98A41C(void *a1)
{
  *a1 = &unk_1F25EFFD8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB98A490(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  uint64_t v3 = v2;
  void *v2 = &unk_1F25EFFD8;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98A560(const void **result, const void **a2)
{
  *a2 = &unk_1F25EFFD8;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98A628(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98A644(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98A68C(uint64_t a1, llvm::MachineFunction **a2)
{
}

BOOL sub_1CB98A69C(uint64_t a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  if (a3) {
    return 0;
  }
  unsigned int v11 = (uint64_t *)((a4 & 0x80000000) != 0
                  ? *(void *)(a2 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8
                  : *(void *)(a2 + 272) + 8 * a4);
  uint64_t v12 = *v11;
  if (!v12) {
    return 0;
  }
  if ((*(unsigned char *)(v12 + 3) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (!v13) {
    return 0;
  }
  unsigned int v14 = **(unsigned __int16 **)(v13 + 16) - 118;
  BOOL v15 = v14 > 8;
  int v16 = (1 << v14) & 0x141;
  if (v15 || v16 == 0) {
    return 0;
  }
  uint64_t v18 = *(void *)(v13 + 32);
  if (*(unsigned char *)(v18 + 32)) {
    return 0;
  }
  unsigned int v19 = *(_DWORD *)(v18 + 36);
  if (v19 - 1 <= 0x3FFFFFFE)
  {
    uint64_t v28 = v13;
    uint64_t v23 = *(void *)(a1 + 80);
    MinimalPhysRegClass = llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v19, v23);
    uint64_t v25 = *(void *)(v23 + 264);
    uint64_t v26 = (*(void *)(v23 + 248) - *(void *)(v23 + 240)) >> 3;
    int v27 = *(_DWORD *)(v23 + 272);
    uint64_t v13 = v28;
    int RegSizeInBits = *(_DWORD *)(v25
                              + 24
                              * (*(unsigned __int16 *)(*MinimalPhysRegClass + 24) + v27 * v26));
  }
  else
  {
    int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v19, a2);
  }
  if (RegSizeInBits != 32) {
    return 0;
  }
  if (**(_WORD **)(v13 + 16) == 124) {
    unsigned int v21 = a6 | 8;
  }
  else {
    unsigned int v21 = a6;
  }
  BOOL v22 = (unsigned __int8 *)(*(void *)(v13 + 32) + 32);

  return sub_1CB987D10(a1, a2, v22, a5, v21, 0);
}

void *sub_1CB98A838(void *a1)
{
  *a1 = &unk_1F25F0020;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB98A88C(void *a1)
{
  *a1 = &unk_1F25F0020;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB98A900(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25F0020;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98A9D0(const void **result, const void **a2)
{
  *a2 = &unk_1F25F0020;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98AA98(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98AAB4(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98AAFC(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98AB08(void *a1)
{
  *a1 = &unk_1F25F0068;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB98AB5C(void *a1)
{
  *a1 = &unk_1F25F0068;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB98ABD0(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25F0068;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98ACA0(const void **result, const void **a2)
{
  *a2 = &unk_1F25F0068;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98AD68(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98AD84(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98ADCC(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98ADDC(void *a1)
{
  *a1 = &unk_1F25F00B0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB98AE30(void *a1)
{
  *a1 = &unk_1F25F00B0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB98AEA4(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25F00B0;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98AF74(const void **result, const void **a2)
{
  *a2 = &unk_1F25F00B0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98B03C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98B058(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98B0A0(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98B0AC(void *a1)
{
  *a1 = &unk_1F25F00F8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB98B100(void *a1)
{
  *a1 = &unk_1F25F00F8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB98B174(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25F00F8;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98B244(const void **result, const void **a2)
{
  *a2 = &unk_1F25F00F8;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98B30C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98B328(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98B370(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB98B384()
{
}

__n128 sub_1CB98B398(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_1F25F0140;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB98B3EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F0140;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB98B424(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CB98B430(void *a1)
{
  *a1 = &unk_1F25F0188;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CB98B484(void *a1)
{
  *a1 = &unk_1F25F0188;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB98B4F8(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  void *v2 = &unk_1F25F0188;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CB98B5C8(const void **result, const void **a2)
{
  *a2 = &unk_1F25F0188;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CB98B690(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CB98B6AC(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CB98B6F4(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CB98B704(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) + 48);
  BOOL v5 = (llvm::detail::DoubleAPFloat *)&v37;
  uint64_t v6 = *(void *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1CFB2E344)
  {
    BOOL v5 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v37, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    uint64_t v37 = *(void *)(v4 + 32);
    unsigned int v7 = (uint64_t *)*(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80) {
      operator new[]();
    }
    char v8 = *(unsigned char *)(v4 + 52);
    int v9 = v8 & 7;
    char v40 = v8 & 0xF;
    int v39 = *(_DWORD *)(v4 + 48);
    BOOL v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      uint64_t v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F) {
        unsigned int v7 = (uint64_t *)&v38;
      }
      int v16 = *(uint64_t **)(v4 + 40);
      BOOL v15 = (uint64_t *)(v4 + 40);
      unsigned int v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80) {
        unsigned int v14 = v15;
      }
      if (v13 <= 0xFFFFFFBF)
      {
        unint64_t v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          uint64_t v18 = *v14++;
          *v7++ = v18;
          --v17;
        }
        while (v17);
      }
    }
  }
  unsigned int v19 = v38;
  if ((_UNKNOWN *)v37 != &unk_1CFB2E344) {
    unsigned int v19 = &v36;
  }
  char v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    BOOL v22 = *a2;
    unsigned int v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 128;
    }
    else
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v33);
  }
  else
  {
    if ((_UNKNOWN *)v37 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v31);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v31);
    }
    uint64_t v23 = (unsigned int *)&v31;
    if (v32 >= 0x41) {
      uint64_t v23 = v31;
    }
    unsigned int v24 = *v23;
    unsigned int v25 = (v24 >> 23);
    int v26 = (v24 >> 19) & 0xF;
    unsigned int v27 = v25 - 124;
    unsigned int v28 = (v26 | 0x10u) >> (125 - v25);
    if (v25 > 0x7C) {
      unsigned int v28 = (v24 >> 19) & 0xF;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v25 | v26)
    {
      unsigned int v25 = v27;
      int v26 = v28;
    }
    int v30 = *a2;
    int v29 = a2[1];
    int v33 = 1;
    uint64_t v34 = 0;
    uint64_t v35 = (16 * v25) | (v24 >> 31 << 7) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v33);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  if ((_UNKNOWN *)v37 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v38);
  }
  else if ((*(_DWORD *)(v37 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
}

void sub_1CB98B9B0(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) + 48);
  BOOL v5 = (llvm::detail::DoubleAPFloat *)&v37;
  uint64_t v6 = *(void *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1CFB2E344)
  {
    BOOL v5 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v37, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    uint64_t v37 = *(void *)(v4 + 32);
    unsigned int v7 = (uint64_t *)*(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80) {
      operator new[]();
    }
    char v8 = *(unsigned char *)(v4 + 52);
    int v9 = v8 & 7;
    char v40 = v8 & 0xF;
    int v39 = *(_DWORD *)(v4 + 48);
    BOOL v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      uint64_t v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F) {
        unsigned int v7 = (uint64_t *)&v38;
      }
      int v16 = *(uint64_t **)(v4 + 40);
      BOOL v15 = (uint64_t *)(v4 + 40);
      unsigned int v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80) {
        unsigned int v14 = v15;
      }
      if (v13 <= 0xFFFFFFBF)
      {
        unint64_t v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          uint64_t v18 = *v14++;
          *v7++ = v18;
          --v17;
        }
        while (v17);
      }
    }
  }
  unsigned int v19 = v38;
  if ((_UNKNOWN *)v37 != &unk_1CFB2E344) {
    unsigned int v19 = &v36;
  }
  char v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    BOOL v22 = *a2;
    unsigned int v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 128;
    }
    else
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v33);
  }
  else
  {
    if ((_UNKNOWN *)v37 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v31);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v31);
    }
    uint64_t v23 = (unsigned int *)&v31;
    if (v32 >= 0x41) {
      uint64_t v23 = v31;
    }
    unsigned int v24 = *v23;
    unsigned int v25 = (v24 >> 10) & 0x1F;
    int v26 = (v24 >> 6) & 0xF;
    unsigned int v27 = v25 - 12;
    unsigned int v28 = (v26 | 0x10u) >> (13 - ((v24 >> 10) & 0x1F));
    if (v25 > 0xC) {
      unsigned int v28 = (v24 >> 6) & 0xF;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v25 | v26)
    {
      unsigned int v25 = v27;
      int v26 = v28;
    }
    int v30 = *a2;
    int v29 = a2[1];
    int v33 = 1;
    uint64_t v34 = 0;
    uint64_t v35 = (v24 >> 8) & 0x80 | (16 * v25) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v33);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  if ((_UNKNOWN *)v37 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v38);
  }
  else if ((*(_DWORD *)(v37 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
}

void sub_1CB98BC5C(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  sub_1CC73C210(*(_DWORD *)(*(void *)(a3 + 32) + 4), *(void *)(*(void *)(*(void *)(a3 + 24) + 32) + 40), (uint64_t)&v9);
  if ((_BYTE)v11)
  {
    if (v10 > 0x40)
    {
      if (v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      unint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      unint64_t v5 = (v9 << -(char)v10 >> -(char)v10) & 0xFFFFFFFFFFFFFF00;
      uint64_t v6 = (v9 << -(char)v10 >> -(char)v10);
    }
    unint64_t v4 = v6 | v5;
  }
  else
  {
    unint64_t v4 = 0;
  }
  char v8 = *a2;
  unsigned int v7 = a2[1];
  LODWORD(v9) = 1;
  uint64_t v10 = 0;
  unint64_t v11 = v4;
  llvm::MachineInstr::addOperand(v7, v8, (const llvm::MachineOperand *)&v9);
}

void sub_1CB98BD14(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  sub_1CC73C210(*(_DWORD *)(*(void *)(a3 + 32) + 4), *(void *)(*(void *)(*(void *)(a3 + 24) + 32) + 40), (uint64_t)&v9);
  if ((_BYTE)v11)
  {
    if (v10 > 0x40)
    {
      if (v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      uint64_t v6 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (v9 << -(char)v10 >> -(char)v10);
      uint64_t v6 = (v9 << -(char)v10 >> -(char)v10) & 0xFF00;
    }
    uint64_t v4 = v5 | v6;
  }
  else
  {
    uint64_t v4 = 0;
  }
  char v8 = *a2;
  unsigned int v7 = a2[1];
  LODWORD(v9) = 1;
  uint64_t v10 = 0;
  uint64_t v11 = v4;
  llvm::MachineInstr::addOperand(v7, v8, (const llvm::MachineOperand *)&v9);
}

uint64_t sub_1CB98BDCC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 64;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * (*a2 & 0xFFFFFFFA | (4 * (*a2 & 1)) | (*a2 >> 2) & 1)) & (v4 - 1);
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != 2)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == 4;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void sub_1CB98BE88(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (char **)**a1;
  if (v2)
  {
    int v4 = (char **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      unsigned int v6 = (char **)v1[1];
      do
      {
        uint64_t v8 = *(v6 - 18);
        v6 -= 18;
        unsigned int v7 = v8;
        uint64_t v9 = *((unsigned int *)v6 + 2);
        if (v9)
        {
          uint64_t v10 = 32 * v9;
          int v11 = v7 - 32;
          do
          {
            BOOL v12 = *(char **)&v11[v10 + 24];
            if (&v11[v10] == v12)
            {
              (*(void (**)(char *))(*(void *)&v11[v10] + 32))(&v11[v10]);
            }
            else if (v12)
            {
              (*(void (**)(char *))(*(void *)v12 + 40))(v12);
            }
            v10 -= 32;
          }
          while (v10);
          unsigned int v7 = *v6;
        }
        if (v7 != (char *)(v4 - 16)) {
          free(v7);
        }
        int v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CB98BFC0(void *a1, unint64_t a2, int a3, int a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v7 = *(void *)(a2 + 32);
  int v8 = *(_DWORD *)(v7 + 4);
  uint64_t v9 = 32;
  if (**(_WORD **)(a2 + 16) == 116) {
    uint64_t v9 = 64;
  }
  unsigned int v10 = *(_DWORD *)(v7 + v9 + 4);
  uint64_t v11 = 96;
  if (**(_WORD **)(a2 + 16) != 116) {
    uint64_t v11 = 64;
  }
  unsigned int v12 = *(_DWORD *)(v7 + v11 + 4);
  if (v8 < 0 && (v8 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v6 + 432)) {
    unint64_t v13 = *(void *)(*(void *)(v6 + 424) + 8 * (v8 & 0x7FFFFFFF));
  }
  else {
    unint64_t v13 = 0;
  }
  unint64_t v89 = v13;
  sub_1CC73C210(v10, v6, (uint64_t)&v84);
  int v82 = v8;
  unsigned int v79 = v10;
  if (BYTE8(v85))
  {
    if (v85 > 0x40)
    {
      if (v84) {
        MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
      }
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      unint64_t v16 = ((uint64_t)((void)v84 << -(char)v85) >> -(char)v85) & 0xFFFFFFFFFFFFFF00;
      uint64_t v17 = ((uint64_t)((void)v84 << -(char)v85) >> -(char)v85);
      uint64_t v14 = 1;
    }
    unint64_t v15 = v17 | v16;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
  }
  sub_1CC73C210(v12, v6, (uint64_t)&v84);
  unsigned int v80 = v12;
  if (BYTE8(v85))
  {
    if (v85 > 0x40)
    {
      if (v84) {
        MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
      }
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v18 = 0;
    }
    else
    {
      unint64_t v20 = ((uint64_t)((void)v84 << -(char)v85) >> -(char)v85) & 0xFFFFFFFFFFFFFF00;
      uint64_t v21 = ((uint64_t)((void)v84 << -(char)v85) >> -(char)v85);
      uint64_t v18 = 1;
    }
    unint64_t v19 = v21 | v20;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
  }
  if (v14) {
    BOOL v22 = v15 >= 0x100;
  }
  else {
    BOOL v22 = 1;
  }
  int v23 = !v22;
  if (v18) {
    BOOL v24 = v19 >= 0x100;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = !v24;
  uint64_t v26 = *(void *)(a2 + 24);
  long long v88 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  uint64_t v27 = *(void *)(v26 + 32);
  uint64_t v28 = *(void *)(v27 + 40);
  uint64_t v84 = &unk_1F261CD58;
  *(void *)&long long v85 = v27;
  *(void *)&long long v86 = v28;
  *((void *)&v85 + 1) = (*(uint64_t (**)(void))(**(void **)(v27 + 16) + 104))(*(void *)(v27 + 16));
  uint64_t v94 = 0;
  if (!*((void *)&v86 + 1)) {
    goto LABEL_32;
  }
  int v41 = **((unsigned char **)&v86 + 1);
  if ((v41 - 4) > 0x1E)
  {
    if ((v41 - 3) >= 0xFFFFFFFE) {
      uint64_t v72 = *((void *)&v86 + 1);
    }
    else {
      uint64_t v72 = 0;
    }
    if ((v41 - 3) > 0xFFFFFFFD)
    {
      unint64_t v43 = v72 + 8;
      goto LABEL_159;
    }
    if (v41 == 3) {
      *(void *)(*((void *)&v86 + 1) + 8) = 0;
    }
LABEL_32:
    *((void *)&v86 + 1) = 0;
    goto LABEL_33;
  }
  if ((*(unsigned char *)(*((void *)&v86 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v86 + 1) + 12)) {
    goto LABEL_32;
  }
  uint64_t v42 = *(void *)(*((void *)&v86 + 1) + 16);
  if ((v42 & 4) == 0) {
    goto LABEL_32;
  }
  unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
  if (!v43) {
    goto LABEL_32;
  }
LABEL_159:
  unint64_t v90 = (char *)&v86 + 8;
  sub_1CC5FA668(v43 + 16, &v90);
  *((void *)&v86 + 1) = v94;
  if (v94) {
    llvm::MetadataTracking::retrack((uint64_t)&v94, v94, (uint64_t)&v86 + 8);
  }
LABEL_33:
  *((void *)&v87 + 1) = a2;
  *(void *)&long long v88 = 0;
  *(void *)&long long v87 = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) == (long long *)((char *)&v86 + 8)) {
    goto LABEL_36;
  }
  if (*((void *)&v86 + 1))
  {
    int v69 = **((unsigned char **)&v86 + 1);
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        uint64_t v77 = *((void *)&v86 + 1);
      }
      else {
        uint64_t v77 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *(void *)(*((void *)&v86 + 1) + 8) = 0;
        }
        goto LABEL_35;
      }
      unint64_t v71 = v77 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v86 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v86 + 1) + 12)) {
        goto LABEL_35;
      }
      uint64_t v70 = *(void *)(*((void *)&v86 + 1) + 16);
      if ((v70 & 4) == 0) {
        goto LABEL_35;
      }
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        goto LABEL_35;
      }
    }
    unint64_t v90 = (char *)&v86 + 8;
    sub_1CC5FA668(v71 + 16, &v90);
  }
LABEL_35:
  int v29 = *(unsigned __int8 **)(a2 + 56);
  *((void *)&v86 + 1) = v29;
  if (v29)
  {
    llvm::MetadataTracking::track((uint64_t)&v86 + 8, v29, 2);
    if (v23) {
      goto LABEL_37;
    }
    goto LABEL_66;
  }
LABEL_36:
  if (v23)
  {
LABEL_37:
    if (a3 == 45)
    {
      int v30 = 36;
      goto LABEL_43;
    }
    if (a3 != 47)
    {
      if (a3 == 46) {
        int v30 = 46;
      }
      else {
        int v30 = 41;
      }
LABEL_43:
      if (a4) {
        unsigned int v31 = 8;
      }
      else {
        unsigned int v31 = 0;
      }
      unsigned int v32 = (unsigned char *)(a1[7] + 1328);
      goto LABEL_47;
    }
    goto LABEL_70;
  }
LABEL_66:
  if (a3 == 47) {
    char v44 = v25;
  }
  else {
    char v44 = 0;
  }
  if ((v44 & 1) == 0)
  {
    if (a3 == 45)
    {
      if (a4) {
        unsigned int v31 = 8;
      }
      else {
        unsigned int v31 = 0;
      }
      unsigned int v32 = (unsigned char *)(a1[7] + 1328);
      int v47 = 36;
      if ((v25 & 1) == 0) {
        goto LABEL_110;
      }
    }
    else
    {
      if (a3 == 46) {
        int v47 = 46;
      }
      else {
        int v47 = 41;
      }
      if (a4) {
        unsigned int v31 = 8;
      }
      else {
        unsigned int v31 = 0;
      }
      unsigned int v32 = (unsigned char *)(a1[7] + 1328);
      if ((v25 & 1) == 0) {
        goto LABEL_110;
      }
    }
LABEL_124:
    if (a3 == 47) {
      int v62 = 366;
    }
    else {
      int v62 = 365;
    }
    if (a3 == 47) {
      int v63 = 236;
    }
    else {
      int v63 = 235;
    }
    if (v13 == 129) {
      int v64 = v62;
    }
    else {
      int v64 = v63;
    }
    unsigned int v65 = sub_1CB952700(v47, v64, v32);
    LODWORD(v94) = v82;
    int v95 = 1;
    unsigned int v66 = (llvm::MachineFunction *)sub_1CC739C54(&v84, v65, (unint64_t *)&v94, 1, 0, 0, 0);
    v68 = v67;
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v90);
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    LODWORD(v90) = 0;
    HIDWORD(v90) = v79;
    uint64_t v93 = 0;
    llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v90);
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = v31;
    llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v90);
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = v19;
    llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v90);
    if (a3 == 47)
    {
      LODWORD(v90) = 1;
      uint64_t v91 = 0;
      unint64_t v92 = 0;
      llvm::MachineInstr::addOperand(v68, v66, (const llvm::MachineOperand *)&v90);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    uint64_t v59 = a1[9];
    uint64_t v60 = (void *)a1[10];
    uint64_t v61 = v68;
LABEL_136:
    sub_1CC73B5D0(v61, v59, v60);
LABEL_168:
    uint64_t v40 = 1;
    goto LABEL_169;
  }
LABEL_70:
  if (v15) {
    char v45 = 0;
  }
  else {
    char v45 = v23;
  }
  if (v19) {
    int v46 = 0;
  }
  else {
    int v46 = v25;
  }
  if ((v45 & 1) != 0 || v46)
  {
    int v48 = sub_1CB9970F8((uint64_t)a1, a2, v13, 0, 0);
    LODWORD(v94) = v82;
    int v95 = 1;
    LODWORD(v90) = v48;
    LODWORD(v92) = 0;
    (*((void (**)(void **, uint64_t, unsigned __int8 **, uint64_t, char **, uint64_t, void))v84 + 4))(&v84, 19, &v94, 1, &v90, 1, 0);
    int v50 = sub_1CB8F1DC4(&v89);
    if (v49 == 1) {
    if (v50 > 111)
    }
    {
      if (v50 <= 191)
      {
        if (v50 == 112)
        {
          unint64_t v51 = (__int16 ***)&off_1E66AB198;
        }
        else if (v50 == 128)
        {
          unint64_t v51 = (__int16 ***)&off_1E66AB1D0;
        }
        else
        {
          unint64_t v51 = (__int16 ***)&off_1E66AB208;
        }
      }
      else if (v50 > 287)
      {
        if (v50 == 288) {
          unint64_t v51 = (__int16 ***)&off_1E66AB2B0;
        }
        else {
          unint64_t v51 = (__int16 ***)&off_1E66AB2E8;
        }
      }
      else if (v50 == 192)
      {
        unint64_t v51 = (__int16 ***)&off_1E66AB240;
      }
      else
      {
        unint64_t v51 = (__int16 ***)&off_1E66AB278;
      }
    }
    else if (v50 <= 47)
    {
      unint64_t v51 = &off_1E66AB048;
      if (v50 != 1 && v50 != 16) {
        unint64_t v51 = &off_1E66AB080;
      }
    }
    else if (v50 > 79)
    {
      if (v50 == 80) {
        unint64_t v51 = (__int16 ***)&off_1E66AB160;
      }
      else {
        unint64_t v51 = (__int16 ***)&off_1E66AB0F0;
      }
    }
    else if (v50 == 48)
    {
      unint64_t v51 = (__int16 ***)&off_1E66AB128;
    }
    else
    {
      unint64_t v51 = (__int16 ***)&off_1E66AB358;
    }
    *(void *)(*(void *)(v6 + 24) + 16 * (v82 & 0x7FFFFFFF)) = v51;
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    goto LABEL_168;
  }
  if (a4) {
    unsigned int v31 = 8;
  }
  else {
    unsigned int v31 = 0;
  }
  unsigned int v32 = (unsigned char *)(a1[7] + 1328);
  if (((v23 | v25) & 1) == 0)
  {
    int v47 = 41;
LABEL_110:
    if (a3 == 47) {
      int v52 = 381;
    }
    else {
      int v52 = 380;
    }
    if (a3 == 47) {
      int v53 = 242;
    }
    else {
      int v53 = 241;
    }
    if (v13 == 129) {
      int v54 = v52;
    }
    else {
      int v54 = v53;
    }
    unsigned int v55 = sub_1CB952700(v47, v54, v32);
    LODWORD(v94) = v82;
    int v95 = 1;
    uint64_t v56 = (llvm::MachineFunction *)sub_1CC739C54(&v84, v55, (unint64_t *)&v94, 1, 0, 0, 0);
    unsigned int v58 = v57;
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    llvm::MachineInstr::addOperand(v57, v56, (const llvm::MachineOperand *)&v90);
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    LODWORD(v90) = 0;
    HIDWORD(v90) = v79;
    uint64_t v93 = 0;
    llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v90);
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = v31;
    llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v90);
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    LODWORD(v90) = 0;
    HIDWORD(v90) = v80;
    uint64_t v93 = 0;
    llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v90);
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = v31;
    llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v90);
    if (a3 == 47)
    {
      LODWORD(v90) = 1;
      uint64_t v91 = 0;
      unint64_t v92 = 0;
      llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v90);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    uint64_t v59 = a1[9];
    uint64_t v60 = (void *)a1[10];
    uint64_t v61 = v58;
    goto LABEL_136;
  }
  if ((v23 & 1) == 0)
  {
    if (!v25)
    {
      uint64_t v40 = 0;
      goto LABEL_169;
    }
    int v47 = 41;
    goto LABEL_124;
  }
  int v30 = 41;
LABEL_47:
  if (a3 == 47) {
    int v33 = 324;
  }
  else {
    int v33 = 323;
  }
  if (a3 == 47) {
    int v34 = 221;
  }
  else {
    int v34 = 220;
  }
  if (v13 == 129) {
    int v35 = v33;
  }
  else {
    int v35 = v34;
  }
  unsigned int v36 = sub_1CB952700(v30, v35, v32);
  LODWORD(v94) = v82;
  int v95 = 1;
  uint64_t v37 = (llvm::MachineFunction *)sub_1CC739C54(&v84, v36, (unint64_t *)&v94, 1, 0, 0, 0);
  int v39 = v38;
  LODWORD(v90) = 1;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v90);
  LODWORD(v90) = 1;
  uint64_t v91 = 0;
  unint64_t v92 = v15;
  llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v90);
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  LODWORD(v90) = 0;
  HIDWORD(v90) = v80;
  uint64_t v93 = 0;
  llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v90);
  LODWORD(v90) = 1;
  uint64_t v91 = 0;
  unint64_t v92 = v31;
  llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v90);
  if (a3 == 47)
  {
    LODWORD(v90) = 1;
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    llvm::MachineInstr::addOperand(v39, v37, (const llvm::MachineOperand *)&v90);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  sub_1CC73B5D0(v39, a1[9], (void *)a1[10]);
  uint64_t v40 = 1;
LABEL_169:
  uint64_t v84 = &unk_1F261CD58;
  if (*((void *)&v86 + 1))
  {
    int v73 = **((unsigned char **)&v86 + 1);
    if ((v73 - 4) > 0x1E)
    {
      if ((v73 - 3) >= 0xFFFFFFFE) {
        uint64_t v75 = *((void *)&v86 + 1);
      }
      else {
        uint64_t v75 = 0;
      }
      if ((v73 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v76 = v75 + 8;
LABEL_179:
        unint64_t v90 = (char *)&v86 + 8;
        sub_1CC5FA668(v76 + 16, &v90);
        return v40;
      }
      if (v73 == 3) {
        *(void *)(*((void *)&v86 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v86 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v86 + 1) + 12))
    {
      uint64_t v78 = *(void *)(*((void *)&v86 + 1) + 16);
      if ((v78 & 4) != 0)
      {
        unint64_t v76 = v78 & 0xFFFFFFFFFFFFFFF8;
        if (v76) {
          goto LABEL_179;
        }
      }
    }
  }
  return v40;
}

uint64_t sub_1CB98CA20(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a2 + 32 * a3 + 4);
  if ((v4 & 0x80000000) != 0) {
    int v5 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    int v5 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    goto LABEL_6;
  }
  if (*(unsigned char *)(v6 + 3)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(v6 + 24);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 3))
    {
LABEL_5:
      uint64_t v6 = *(void *)(v6 + 8);
      goto LABEL_6;
    }
    uint64_t v6 = 0;
  }
LABEL_6:
  if ((v4 & 0x80000000) != 0) {
    uint64_t v7 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v4);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if (*(unsigned char *)(v8 + 3) & 1) != 0 || (uint64_t v8 = *(void *)(v8 + 24)) != 0 && (*(unsigned char *)(v8 + 3))
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if (**(_WORD **)(v9 + 16) == 178 && *(_DWORD *)(v9 + 40) == 2)
        {
          uint64_t v10 = *(unsigned int *)(*(void *)(v9 + 32) + 36);
          if ((v10 & 0x80000000) != 0) {
            uint64_t v11 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v11 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v10);
          }
          uint64_t v6 = *v11;
          if (!v6) {
            goto LABEL_18;
          }
          if ((*(unsigned char *)(v6 + 3) & 1) == 0)
          {
            uint64_t v6 = *(void *)(v6 + 24);
            if (!v6) {
              goto LABEL_18;
            }
            if ((*(unsigned char *)(v6 + 3) & 1) == 0)
            {
              uint64_t v6 = 0;
              goto LABEL_18;
            }
          }
          uint64_t v6 = *(void *)(v6 + 8);
LABEL_18:
          BOOL v12 = v6 != 0;
          goto LABEL_25;
        }
      }
    }
  }
  BOOL v12 = 0;
LABEL_25:
  if (*(void *)(v6 + 24) == a1)
  {
    if ((**(_WORD **)(v6 + 16) & 0xFFFE) == 0x152)
    {
      sub_1CC73C210(*(_DWORD *)(*(void *)(v6 + 32) + 68), a4, (uint64_t)&v16);
      if (v18)
      {
        if (v17 < 0x41)
        {
          int v13 = 1;
          if (!v12) {
            goto LABEL_27;
          }
LABEL_34:
          int v14 = 256;
          return v14 | v13;
        }
        if (v16) {
          MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
        }
      }
    }
    int v13 = 0;
    int v14 = 0;
    if (!v12) {
      return v14 | v13;
    }
    goto LABEL_34;
  }
  int v13 = 0;
LABEL_27:
  int v14 = 0;
  return v14 | v13;
}

void sub_1CB98CBF8(uint64_t a1, llvm::MachineInstr *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned char *a7, int a8, char a9)
{
  unsigned int v11 = *(_DWORD *)(*(void *)(a3 + 32) + 32 * a4 + 4);
  unsigned int v43 = v11;
  if ((v11 & 0x80000000) != 0 && (v11 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432)) {
    unint64_t v12 = *(void *)(*(void *)(a6 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    unint64_t v12 = 0;
  }
  v57[0] = v12;
  uint64_t v13 = *(void *)(a3 + 24);
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  uint64_t v14 = *(void *)(v13 + 32);
  unint64_t v15 = *(void *)(v14 + 40);
  int v52 = &unk_1F261CD58;
  *(void *)&long long v53 = v14;
  long long v54 = v15;
  *((void *)&v53 + 1) = (*(uint64_t (**)(void))(**(void **)(v14 + 16) + 104))(*(void *)(v14 + 16));
  v57[1] = 0;
  *((void *)&v55 + 1) = a3;
  *(void *)&long long v56 = 0;
  *(void *)&long long v55 = *(void *)(a3 + 24);
  if ((long long *)(a3 + 56) != (long long *)((char *)&v54 + 8))
  {
    uint64_t v16 = *(unsigned __int8 **)(a3 + 56);
    *((void *)&v54 + 1) = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v54 + 8, v16, 2);
    }
  }
  int v17 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a6, "", 0);
  uint64_t v19 = 0;
  uint64_t v20 = v17 & 0x7FFFFFFF;
  unsigned int v21 = IncompleteVirtualRegister;
  unint64_t v22 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a6 + 24) + 16 * v22) = *(void *)(*(void *)(a6 + 24) + 16 * v20);
  unint64_t v23 = *(unsigned int *)(a6 + 432);
  if (v17 < 0 && v20 < v23) {
    uint64_t v19 = *(void *)(*(void *)(a6 + 424) + 8 * v20);
  }
  if (v22 >= v23)
  {
    uint64_t v24 = *(void *)(a6 + 440);
    uint64_t v25 = v22 + 1 - v23;
    if (v22 >= *(unsigned int *)(a6 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v26 = *(_DWORD *)(a6 + 432);
    if (v25)
    {
      uint64_t v27 = (void *)(*(void *)(a6 + 424) + 8 * *(unsigned int *)(a6 + 432));
      uint64_t v28 = ~v22 + v23;
      do
        *v27++ = v24;
      while (!__CFADD__(v28++, 1));
      int v26 = *(_DWORD *)(a6 + 432);
    }
    *(_DWORD *)(a6 + 432) = v26 + v25;
  }
  *(void *)(*(void *)(a6 + 424) + 8 * v22) = v19;
  uint64_t v30 = *(void *)(a6 + 8);
  if (v30) {
    (*(void (**)(uint64_t, void))(*(void *)v30 + 24))(v30, IncompleteVirtualRegister);
  }
  LODWORD(v50) = IncompleteVirtualRegister;
  int v51 = 1;
  sub_1CC7374CC((uint64_t)&v52, &v50, 1.0);
  unsigned int v32 = v31;
  if (*(void *)(*(void *)(a6 + 24) + 16 * v22) < 8uLL || (*(void *)(*(void *)(a6 + 24) + 16 * v22) & 4) != 0)
  {
    int v35 = sub_1CB8F1DC4(v57);
    if (v34 == 1) {
    if (v35 > 111)
    }
    {
      if (v35 <= 191)
      {
        if (v35 == 112)
        {
          unsigned int v36 = (__int16 ***)&off_1E66AB198;
        }
        else if (v35 == 128)
        {
          unsigned int v36 = (__int16 ***)&off_1E66AB1D0;
        }
        else
        {
          unsigned int v36 = (__int16 ***)&off_1E66AB208;
        }
      }
      else if (v35 > 287)
      {
        if (v35 == 288) {
          unsigned int v36 = (__int16 ***)&off_1E66AB2B0;
        }
        else {
          unsigned int v36 = (__int16 ***)&off_1E66AB2E8;
        }
      }
      else if (v35 == 192)
      {
        unsigned int v36 = (__int16 ***)&off_1E66AB240;
      }
      else
      {
        unsigned int v36 = (__int16 ***)&off_1E66AB278;
      }
    }
    else if (v35 <= 47)
    {
      unsigned int v36 = &off_1E66AB048;
      if (v35 != 1 && v35 != 16) {
        unsigned int v36 = &off_1E66AB080;
      }
    }
    else if (v35 > 79)
    {
      if (v35 == 80) {
        unsigned int v36 = (__int16 ***)&off_1E66AB160;
      }
      else {
        unsigned int v36 = (__int16 ***)&off_1E66AB0F0;
      }
    }
    else if (v35 == 48)
    {
      unsigned int v36 = (__int16 ***)&off_1E66AB128;
    }
    else
    {
      unsigned int v36 = (__int16 ***)&off_1E66AB358;
    }
    uint64_t v37 = (void *)(*(void *)(a6 + 24) + 16 * v22);
    unint64_t v38 = *v37 & 0xFFFFFFFFFFFFFFF8;
    if ((*v37 & 4) != 0)
    {
      if (!v38
        || ((*(void *)(*(void *)(v38 + 24) + (((unint64_t)*((unsigned __int16 *)*v36 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v36 + 12)) & 1) != 0)
      {
        *uint64_t v37 = v36;
      }
    }
    else
    {
      sub_1CC38D61C((void *)a6, v21, v38, (uint64_t)v36, 0);
    }
  }
  *(void *)(a3 + 16) = *(void *)(*(void *)(a1 + 72) + 8) + 7968;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)a3, *(llvm::MachineFunction **)(*(void *)(a3 + 24) + 32), (const llvm::MachineOperand *)(*(void *)(a3 + 32) + 32 * a5));
  if (a4 == 2)
  {
    llvm::MachineOperand::setReg(*(void *)(a3 + 32) + 32, v43);
    *(_DWORD *)(*(void *)(a3 + 32) + 32) = *(_DWORD *)(*(void *)(a3 + 32) + 32) & 0xFBFFFFFF | (((*(_DWORD *)(*(void *)(a3 + 32) + 64) >> 26) & ~HIBYTE(*(_DWORD *)(*(void *)(a3 + 32) + 64)) & 1) << 26);
  }
  llvm::MachineOperand::setReg(*(void *)(a3 + 32) + 64, v21);
  *(_DWORD *)(*(void *)(a3 + 32) + 64) &= ~0x4000000u;
  sub_1CB98D264(a1, a2, a3, 1u, 2u, a6, a7, a8, a9);
  llvm::MachineInstr::eraseFromParent(v32);
  int v52 = &unk_1F261CD58;
  if (*((void *)&v54 + 1))
  {
    int v39 = **((unsigned char **)&v54 + 1);
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        uint64_t v40 = *((void *)&v54 + 1);
      }
      else {
        uint64_t v40 = 0;
      }
      if ((v39 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v41 = v40 + 8;
LABEL_69:
        unint64_t v50 = (unint64_t)&v54 + 8;
        sub_1CC5FA668(v41 + 16, &v50);
        return;
      }
      if (v39 == 3) {
        *(void *)(*((void *)&v54 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v54 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v54 + 1) + 12))
    {
      uint64_t v42 = *(void *)(*((void *)&v54 + 1) + 16);
      if ((v42 & 4) != 0)
      {
        unint64_t v41 = v42 & 0xFFFFFFFFFFFFFFF8;
        if (v41) {
          goto LABEL_69;
        }
      }
    }
  }
}

void sub_1CB98D264(uint64_t a1, llvm::MachineInstr *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned char *a7, int a8, char a9)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a3 + 32);
  uint64_t v14 = *(unsigned int *)(v13 + 32 * a4 + 4);
  if ((v14 & 0x80000000) != 0)
  {
    unint64_t v17 = v14 & 0x7FFFFFFF;
    if (v17 >= *(unsigned int *)(a6 + 432)) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a6 + 424) + 8 * v17);
    }
    uint64_t v16 = (uint64_t *)(*(void *)(a6 + 24) + 16 * v17 + 8);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = (uint64_t *)(*(void *)(a6 + 272) + 8 * v14);
  }
  uint64_t v18 = *v16;
  if (v18)
  {
    if (*(unsigned char *)(v18 + 3))
    {
      int v19 = a8;
LABEL_10:
      uint64_t v20 = *(void *)(v18 + 8);
      goto LABEL_11;
    }
    int v19 = a8;
    uint64_t v18 = *(void *)(v18 + 24);
    if (v18 && (*(unsigned char *)(v18 + 3) & 1) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    int v19 = a8;
  }
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v141 = v20;
  if (a9)
  {
    uint64_t v14 = *(unsigned int *)(*(void *)(v20 + 32) + 36);
    if ((v14 & 0x80000000) != 0) {
      unsigned int v21 = (uint64_t *)(*(void *)(a6 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v21 = (uint64_t *)(*(void *)(a6 + 272) + 8 * v14);
    }
    uint64_t v22 = *v21;
    if (v22 && ((*(unsigned char *)(v22 + 3) & 1) != 0 || (uint64_t v22 = *(void *)(v22 + 24)) != 0 && (*(unsigned char *)(v22 + 3) & 1) != 0)) {
      uint64_t v20 = *(void *)(v22 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v141 = v20;
  }
  if ((v14 & 0x80000000) != 0 && (unsigned int v23 = v14 & 0x7FFFFFFF, v23 < *(_DWORD *)(a6 + 432))) {
    uint64_t v24 = *(void *)(*(void *)(a6 + 424) + 8 * v23);
  }
  else {
    uint64_t v24 = 0;
  }
  int v25 = **(unsigned __int16 **)(v20 + 16);
  int v26 = (long long *)(v13 + 32 * a5);
  long long v27 = v26[1];
  long long v139 = *v26;
  long long v140 = v27;
  if ((DWORD1(v139) & 0x80000000) != 0)
  {
    uint64_t v28 = DWORD1(v139) & 0x7FFFFFFF;
    if (v28 < *(_DWORD *)(a6 + 432) && *(void *)(*(void *)(a6 + 424) + 8 * v28) == 257)
    {
      uint64_t v29 = *(void *)(*(void *)(a6 + 24) + 16 * v28 + 8);
      if (v29)
      {
        uint64_t v30 = v29;
        if (*(_DWORD *)v29 & 0x1000000) != 0 || (uint64_t v30 = *(void *)(v29 + 24)) != 0 && (*(unsigned char *)(v30 + 3))
        {
          uint64_t v31 = *(void *)(v30 + 8);
          if (v31)
          {
            if (**(_WORD **)(v31 + 16) == 178
              && *(_DWORD *)(v31 + 40) == 2
              && ((*(_DWORD *)v29 & 0x1000000) != 0
               || (uint64_t v29 = *(void *)(v29 + 24)) != 0 && (*(unsigned char *)(v29 + 3) & 1) != 0))
            {
              uint64_t v32 = *(void *)(v29 + 8);
              if (v32)
              {
                uint64_t v33 = *(void *)(v32 + 32);
                long long v34 = *(_OWORD *)(v33 + 48);
                long long v139 = *(_OWORD *)(v33 + 32);
                long long v140 = v34;
              }
            }
          }
        }
      }
    }
  }
  long long v35 = *(_OWORD *)(v13 + 112);
  long long v137 = *(_OWORD *)(v13 + 96);
  long long v138 = v35;
  if ((DWORD1(v137) & 0x80000000) != 0)
  {
    uint64_t v36 = DWORD1(v137) & 0x7FFFFFFF;
    if (v36 < *(_DWORD *)(a6 + 432) && *(void *)(*(void *)(a6 + 424) + 8 * v36) == 257)
    {
      uint64_t v37 = *(void *)(*(void *)(a6 + 24) + 16 * v36 + 8);
      if (v37)
      {
        uint64_t v38 = v37;
        if (*(_DWORD *)v37 & 0x1000000) != 0 || (uint64_t v38 = *(void *)(v37 + 24)) != 0 && (*(unsigned char *)(v38 + 3))
        {
          uint64_t v39 = *(void *)(v38 + 8);
          if (v39)
          {
            if (**(_WORD **)(v39 + 16) == 178
              && *(_DWORD *)(v39 + 40) == 2
              && ((*(_DWORD *)v37 & 0x1000000) != 0
               || (uint64_t v37 = *(void *)(v37 + 24)) != 0 && (*(unsigned char *)(v37 + 3) & 1) != 0))
            {
              uint64_t v40 = *(void *)(v37 + 8);
              if (v40)
              {
                uint64_t v41 = *(void *)(v40 + 32);
                long long v42 = *(_OWORD *)(v41 + 48);
                long long v137 = *(_OWORD *)(v41 + 32);
                long long v138 = v42;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v43 = *(void *)(v20 + 32);
  long long v44 = *(_OWORD *)(v43 + 48);
  long long v135 = *(_OWORD *)(v43 + 32);
  long long v136 = v44;
  sub_1CC73C210(*(_DWORD *)(v43 + 68), a6, (uint64_t)&v127);
  if (BYTE8(v128))
  {
    if (v128 > 0x40)
    {
      if (v127) {
        MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
      }
      unint64_t v45 = 0;
      uint64_t v46 = 0;
    }
    else
    {
      unint64_t v45 = ((uint64_t)((void)v127 << -(char)v128) >> -(char)v128) & 0xFFFFFFFFFFFFFF00;
      uint64_t v46 = ((uint64_t)((void)v127 << -(char)v128) >> -(char)v128);
    }
    uint64_t v109 = v46 | v45;
  }
  else
  {
    uint64_t v109 = 0;
  }
  uint64_t v47 = *(void *)(v20 + 32);
  long long v48 = *(_OWORD *)(v47 + 112);
  long long v133 = *(_OWORD *)(v47 + 96);
  long long v134 = v48;
  sub_1CC73C210(*(_DWORD *)(v47 + 132), a6, (uint64_t)&v127);
  if (!BYTE8(v128)) {
    goto LABEL_50;
  }
  if (v128 >= 0x41)
  {
    if (v127) {
      MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
    }
LABEL_50:
    LOBYTE(v49) = 0;
    goto LABEL_108;
  }
  uint64_t v49 = (uint64_t)((void)v127 << -(uint64_t)v128) >> -(uint64_t)v128;
  if (v49 == 5)
  {
    uint64_t v50 = *(void *)(v20 + 24);
    long long v131 = 0u;
    long long v130 = 0u;
    long long v129 = 0u;
    long long v128 = 0u;
    uint64_t v51 = *(void *)(v50 + 32);
    v127 = &unk_1F261CD58;
    *(void *)&long long v128 = v51;
    *(void *)&long long v129 = *(void *)(v51 + 40);
    *((void *)&v128 + 1) = (*(uint64_t (**)(void))(**(void **)(v51 + 16) + 104))(*(void *)(v51 + 16));
    v149 = 0;
    if (!*((void *)&v129 + 1))
    {
LABEL_54:
      *((void *)&v129 + 1) = 0;
      goto LABEL_55;
    }
    int v98 = **((unsigned char **)&v129 + 1);
    if ((v98 - 4) > 0x1E)
    {
      if ((v98 - 3) >= 0xFFFFFFFE) {
        uint64_t v104 = *((void *)&v129 + 1);
      }
      else {
        uint64_t v104 = 0;
      }
      if ((v98 - 3) <= 0xFFFFFFFD)
      {
        if (v98 == 3) {
          *(void *)(*((void *)&v129 + 1) + 8) = 0;
        }
        goto LABEL_54;
      }
      unint64_t v100 = v104 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v129 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v129 + 1) + 12)) {
        goto LABEL_54;
      }
      uint64_t v99 = *(void *)(*((void *)&v129 + 1) + 16);
      if ((v99 & 4) == 0) {
        goto LABEL_54;
      }
      unint64_t v100 = v99 & 0xFFFFFFFFFFFFFFF8;
      if (!v100) {
        goto LABEL_54;
      }
    }
    v121 = (char *)&v129 + 8;
    sub_1CC5FA668(v100 + 16, &v121);
    *((void *)&v129 + 1) = v149;
    if (v149) {
      llvm::MetadataTracking::retrack((uint64_t)&v149, v149, (uint64_t)&v129 + 8);
    }
LABEL_55:
    *((void *)&v130 + 1) = v20;
    *(void *)&long long v131 = 0;
    *(void *)&long long v130 = *(void *)(v20 + 24);
    *((void *)&v130 + 1) = v20;
    if ((long long *)(v20 + 56) == (long long *)((char *)&v129 + 8)) {
      goto LABEL_59;
    }
    if (!*((void *)&v129 + 1))
    {
LABEL_57:
      int v52 = *(unsigned __int8 **)(v20 + 56);
      *((void *)&v129 + 1) = v52;
      if (v52) {
        llvm::MetadataTracking::track((uint64_t)&v129 + 8, v52, 2);
      }
LABEL_59:
      if ((DWORD1(v135) & 0x80000000) != 0
        && (uint64_t v53 = DWORD1(v135) & 0x7FFFFFFF, v53 < *(_DWORD *)(a6 + 432)))
      {
        unint64_t v54 = *(void *)(*(void *)(a6 + 424) + 8 * v53);
        v119[0] = v54;
        if (v25 == 339) {
          int v55 = 5708;
        }
        else {
          int v55 = 5468;
        }
        if (v25 == 339) {
          int v56 = 5638;
        }
        else {
          int v56 = 5398;
        }
        if (v54 == 129) {
          unsigned int v57 = v55;
        }
        else {
          unsigned int v57 = v56;
        }
      }
      else
      {
        v119[0] = 0;
        if (v25 == 339) {
          unsigned int v57 = 5638;
        }
        else {
          unsigned int v57 = 5398;
        }
      }
      int v59 = sub_1CB8F1DC4(v119);
      if (v58 == 1) {
      if (v59 > 111)
      }
      {
        if (v59 <= 191)
        {
          if (v59 == 112)
          {
            uint64_t v60 = (__int16 ***)&off_1E66AB198;
          }
          else if (v59 == 128)
          {
            uint64_t v60 = (__int16 ***)&off_1E66AB1D0;
          }
          else
          {
            uint64_t v60 = (__int16 ***)&off_1E66AB208;
          }
        }
        else if (v59 > 287)
        {
          if (v59 == 288) {
            uint64_t v60 = (__int16 ***)&off_1E66AB2B0;
          }
          else {
            uint64_t v60 = (__int16 ***)&off_1E66AB2E8;
          }
        }
        else if (v59 == 192)
        {
          uint64_t v60 = (__int16 ***)&off_1E66AB240;
        }
        else
        {
          uint64_t v60 = (__int16 ***)&off_1E66AB278;
        }
      }
      else if (v59 <= 47)
      {
        uint64_t v60 = &off_1E66AB048;
        if (v59 != 1 && v59 != 16) {
          uint64_t v60 = &off_1E66AB080;
        }
      }
      else if (v59 > 79)
      {
        if (v59 == 80) {
          uint64_t v60 = (__int16 ***)&off_1E66AB160;
        }
        else {
          uint64_t v60 = (__int16 ***)&off_1E66AB0F0;
        }
      }
      else if (v59 == 48)
      {
        uint64_t v60 = (__int16 ***)&off_1E66AB128;
      }
      else
      {
        uint64_t v60 = (__int16 ***)&off_1E66AB358;
      }
      v149 = (unsigned __int8 *)v60;
      int v150 = 2;
      uint64_t v61 = (llvm::MachineFunction *)sub_1CC739C54(&v127, v57, (unint64_t *)&v149, 1, 0, 0, 0);
      int v63 = v62;
      LODWORD(v121) = 1;
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      llvm::MachineInstr::addOperand(v62, v61, (const llvm::MachineOperand *)&v121);
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      HIDWORD(v121) = DWORD1(v135);
      LODWORD(v121) = 0;
      uint64_t v124 = 0;
      llvm::MachineInstr::addOperand(v63, v61, (const llvm::MachineOperand *)&v121);
      LODWORD(v121) = 1;
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      llvm::MachineInstr::addOperand(v63, v61, (const llvm::MachineOperand *)&v121);
      LODWORD(v121) = 1;
      uint64_t v122 = 0;
      uint64_t v123 = 16;
      llvm::MachineInstr::addOperand(v63, v61, (const llvm::MachineOperand *)&v121);
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      HIDWORD(v121) = DWORD1(v133);
      LODWORD(v121) = 0;
      uint64_t v124 = 0;
      llvm::MachineInstr::addOperand(v63, v61, (const llvm::MachineOperand *)&v121);
      LODWORD(v121) = 1;
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      llvm::MachineInstr::addOperand(v63, v61, (const llvm::MachineOperand *)&v121);
      int v64 = (long long *)*((void *)v63 + 4);
      long long v65 = v64[1];
      if (v109 < 16)
      {
        long long v133 = *v64;
        long long v134 = v65;
      }
      else
      {
        long long v135 = *v64;
        long long v136 = v65;
        v109 -= 16;
      }
      v127 = &unk_1F261CD58;
      if (!*((void *)&v129 + 1)) {
        goto LABEL_107;
      }
      int v66 = **((unsigned char **)&v129 + 1);
      if ((v66 - 4) > 0x1E)
      {
        if ((v66 - 3) >= 0xFFFFFFFE) {
          uint64_t v96 = *((void *)&v129 + 1);
        }
        else {
          uint64_t v96 = 0;
        }
        if ((v66 - 3) < 0xFFFFFFFE)
        {
          if (v66 == 3) {
            *(void *)(*((void *)&v129 + 1) + 8) = 0;
          }
          goto LABEL_107;
        }
        unint64_t v97 = v96 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v129 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v129 + 1) + 12)) {
          goto LABEL_107;
        }
        uint64_t v107 = *(void *)(*((void *)&v129 + 1) + 16);
        if ((v107 & 4) == 0) {
          goto LABEL_107;
        }
        unint64_t v97 = v107 & 0xFFFFFFFFFFFFFFF8;
        if (!v97) {
          goto LABEL_107;
        }
      }
      v121 = (char *)&v129 + 8;
      sub_1CC5FA668(v97 + 16, &v121);
LABEL_107:
      LOBYTE(v49) = 4;
      goto LABEL_108;
    }
    int v101 = **((unsigned char **)&v129 + 1);
    if ((v101 - 4) > 0x1E)
    {
      if ((v101 - 3) >= 0xFFFFFFFE) {
        uint64_t v105 = *((void *)&v129 + 1);
      }
      else {
        uint64_t v105 = 0;
      }
      if ((v101 - 3) < 0xFFFFFFFE)
      {
        if (v101 == 3) {
          *(void *)(*((void *)&v129 + 1) + 8) = 0;
        }
        goto LABEL_57;
      }
      unint64_t v103 = v105 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v129 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v129 + 1) + 12)) {
        goto LABEL_57;
      }
      uint64_t v102 = *(void *)(*((void *)&v129 + 1) + 16);
      if ((v102 & 4) == 0) {
        goto LABEL_57;
      }
      unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8;
      if (!v103) {
        goto LABEL_57;
      }
    }
    v121 = (char *)&v129 + 8;
    sub_1CC5FA668(v103 + 16, &v121);
    goto LABEL_57;
  }
LABEL_108:
  sub_1CB986134((uint64_t)&v127, a6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)&v135, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)&v121, a6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)&v139, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)&v149, a6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)&v137, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v119, a6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)&v133, 0, 0, 0, 0);
  unint64_t v67 = 0;
  int v68 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
  if (v68 < 0)
  {
    if ((v68 & 0x7FFFFFFFu) >= *(_DWORD *)(a6 + 432)) {
      unint64_t v67 = 0;
    }
    else {
      unint64_t v67 = *(void *)(*(void *)(a6 + 424) + 8 * (v68 & 0x7FFFFFFF));
    }
  }
  unint64_t v118 = v67;
  if (v15 == 129)
  {
    BOOL v69 = v25 == 339;
    if (v19)
    {
      int v70 = 9;
      int v71 = 11;
    }
    else
    {
      int v70 = 8;
      int v71 = 10;
    }
  }
  else
  {
    BOOL v69 = v25 == 339;
    if (v19)
    {
      int v70 = 23;
      int v71 = 25;
    }
    else
    {
      int v70 = 22;
      int v71 = 24;
    }
  }
  if (v69) {
    int v72 = v71;
  }
  else {
    int v72 = v70;
  }
  if (v24 == 129) {
    int v73 = 2;
  }
  else {
    int v73 = 5;
  }
  if (v15 == 257) {
    int v74 = 5;
  }
  else {
    int v74 = 2;
  }
  if (v126 == 32) {
    int v75 = 5;
  }
  else {
    int v75 = 2;
  }
  if ((v125 & 0xFFFFFFFE) == 4) {
    int v76 = 1;
  }
  else {
    int v76 = v75;
  }
  v148[0] = v74;
  v148[1] = v73;
  unsigned int v77 = v151 & 0xFFFFFFFE;
  if (v152 == 32) {
    int v78 = 5;
  }
  else {
    int v78 = 2;
  }
  if (v77 == 4) {
    int v78 = 1;
  }
  BOOL v79 = v74 == v78 || v77 == 4;
  v148[2] = v76;
  v148[3] = v78;
  v148[4] = v73;
  if (v79) {
    uint64_t v80 = 5;
  }
  else {
    uint64_t v80 = 4;
  }
  unsigned int v81 = sub_1CB951118(v72, v148, v80, a7);
  uint64_t v82 = *(void *)(a3 + 24);
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  uint64_t v83 = *(void *)(v82 + 32);
  unint64_t v84 = *(void *)(v83 + 40);
  v113 = &unk_1F261CD58;
  *(void *)&long long v114 = v83;
  long long v115 = v84;
  *((void *)&v114 + 1) = (*(uint64_t (**)(void))(**(void **)(v83 + 16) + 104))(*(void *)(v83 + 16));
  v145 = 0;
  *((void *)&v116 + 1) = a3;
  *(void *)&long long v117 = 0;
  *(void *)&long long v116 = *(void *)(a3 + 24);
  long long v85 = (_OWORD *)(a3 + 56);
  if (v85 != (long long *)((char *)&v115 + 8))
  {
    long long v86 = *(unsigned __int8 **)v85;
    *((void *)&v115 + 1) = v86;
    if (v86) {
      llvm::MetadataTracking::track((uint64_t)&v115 + 8, v86, 2);
    }
  }
  int v88 = sub_1CB8F1DC4(&v118);
  if (v87 == 1) {
  if (v88 > 111)
  }
  {
    if (v88 <= 191)
    {
      if (v88 == 112)
      {
        unint64_t v89 = (__int16 ***)&off_1E66AB198;
      }
      else if (v88 == 128)
      {
        unint64_t v89 = (__int16 ***)&off_1E66AB1D0;
      }
      else
      {
        unint64_t v89 = (__int16 ***)&off_1E66AB208;
      }
    }
    else if (v88 > 287)
    {
      if (v88 == 288) {
        unint64_t v89 = (__int16 ***)&off_1E66AB2B0;
      }
      else {
        unint64_t v89 = (__int16 ***)&off_1E66AB2E8;
      }
    }
    else if (v88 == 192)
    {
      unint64_t v89 = (__int16 ***)&off_1E66AB240;
    }
    else
    {
      unint64_t v89 = (__int16 ***)&off_1E66AB278;
    }
  }
  else if (v88 <= 47)
  {
    unint64_t v89 = &off_1E66AB048;
    if (v88 != 1 && v88 != 16) {
      unint64_t v89 = &off_1E66AB080;
    }
  }
  else if (v88 > 79)
  {
    if (v88 == 80) {
      unint64_t v89 = (__int16 ***)&off_1E66AB160;
    }
    else {
      unint64_t v89 = (__int16 ***)&off_1E66AB0F0;
    }
  }
  else if (v88 == 48)
  {
    unint64_t v89 = (__int16 ***)&off_1E66AB128;
  }
  else
  {
    unint64_t v89 = (__int16 ***)&off_1E66AB358;
  }
  v145 = v89;
  LODWORD(v146) = 2;
  unint64_t v90 = (llvm::MachineFunction *)sub_1CC739C54(&v113, v81, (unint64_t *)&v145, 1, 0, 0, 0);
  unint64_t v92 = v91;
  LODWORD(v142) = 1;
  uint64_t v144 = 0;
  uint64_t v143 = 0;
  llvm::MachineInstr::addOperand(v91, v90, (const llvm::MachineOperand *)&v142);
  LODWORD(v142) = 1;
  uint64_t v143 = 0;
  uint64_t v144 = v49 & 7;
  llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v142);
  v111 = v90;
  v112 = v92;
  v145 = (__int16 ***)&v141;
  uint64_t v146 = a6;
  v147 = &v111;
  v110[0] = &v111;
  v110[1] = (llvm::MachineFunction **)a6;
  v110[2] = (llvm::MachineFunction **)a1;
  sub_1CB99B454((uint64_t **)&v145, SHIDWORD(v127), v132, (uint64_t)&v135);
  sub_1CB99BBB0(v110, (uint64_t)&v121);
  sub_1CB99BBB0(v110, (uint64_t)&v149);
  sub_1CB99B454((uint64_t **)&v145, SHIDWORD(v119[0]), v120, (uint64_t)&v133);
  LODWORD(v142) = 1;
  uint64_t v143 = 0;
  uint64_t v144 = v109;
  llvm::MachineInstr::addOperand(v112, v111, (const llvm::MachineOperand *)&v142);
  sub_1CB98E138((void *)a6, a2, *(_DWORD *)(*((void *)v112 + 4) + 4));
  v113 = &unk_1F261CD58;
  if (*((void *)&v115 + 1))
  {
    int v93 = **((unsigned char **)&v115 + 1);
    if ((v93 - 4) > 0x1E)
    {
      if ((v93 - 3) >= 0xFFFFFFFE) {
        uint64_t v94 = *((void *)&v115 + 1);
      }
      else {
        uint64_t v94 = 0;
      }
      if ((v93 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v95 = v94 + 8;
LABEL_185:
        v142 = (char *)&v115 + 8;
        sub_1CC5FA668(v95 + 16, &v142);
        return;
      }
      if (v93 == 3) {
        *(void *)(*((void *)&v115 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v115 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v115 + 1) + 12))
    {
      uint64_t v106 = *(void *)(*((void *)&v115 + 1) + 16);
      if ((v106 & 4) != 0)
      {
        unint64_t v95 = v106 & 0xFFFFFFFFFFFFFFF8;
        if (v95) {
          goto LABEL_185;
        }
      }
    }
  }
}

void sub_1CB98E138(void *a1, llvm::MachineInstr *this, unsigned int a3)
{
  uint64_t v5 = *(unsigned int *)(*((void *)this + 4) + 4);
  uint64_t v6 = a1[3];
  uint64_t v7 = *(void *)(v6 + 16 * (v5 & 0x7FFFFFFF));
  if ((v7 & 4) != 0) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *(void *)(v6 + 16 * (a3 & 0x7FFFFFFF));
  if ((v9 & 4) != 0) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v8 == v10 && v10 != 0 && v8 != 0 || v8 == 0)
  {
    llvm::MachineInstr::eraseFromParent(this);
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
    if ((v5 & 0x80000000) != 0) {
      uint64_t v16 = (uint64_t *)(a1[3] + 16 * (v5 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)(a1[34] + 8 * v5);
    }
    uint64_t v17 = *v16;
    if (*v16)
    {
      unsigned int v18 = a3;
      unsigned int v19 = a3 - 1;
      do
      {
        uint64_t v20 = *(void *)(v17 + 24);
        if (v19 <= 0x3FFFFFFE) {
          llvm::MachineOperand::substPhysReg((unsigned int *)v17, v18, v15);
        }
        else {
          llvm::MachineOperand::setReg(v17, v18);
        }
        uint64_t v17 = v20;
      }
      while (v20);
    }
    return;
  }
  uint64_t v21 = *((void *)this + 3);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v23 = *(void *)(v22 + 40);
  uint64_t v41 = &unk_1F261CD58;
  *(void *)&long long v42 = v22;
  *(void *)&long long v43 = v23;
  *((void *)&v42 + 1) = (*(uint64_t (**)(void))(**(void **)(v22 + 16) + 104))(*(void *)(v22 + 16));
  uint64_t v39 = 0;
  if (!*((void *)&v43 + 1)) {
    goto LABEL_28;
  }
  int v28 = **((unsigned char **)&v43 + 1);
  if ((v28 - 4) > 0x1E)
  {
    if ((v28 - 3) >= 0xFFFFFFFE) {
      uint64_t v34 = *((void *)&v43 + 1);
    }
    else {
      uint64_t v34 = 0;
    }
    if ((v28 - 3) > 0xFFFFFFFD)
    {
      unint64_t v30 = v34 + 8;
      goto LABEL_63;
    }
    if (v28 == 3) {
      *(void *)(*((void *)&v43 + 1) + 8) = 0;
    }
LABEL_28:
    *((void *)&v43 + 1) = 0;
    goto LABEL_29;
  }
  if ((*(unsigned char *)(*((void *)&v43 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v43 + 1) + 12)) {
    goto LABEL_28;
  }
  uint64_t v29 = *(void *)(*((void *)&v43 + 1) + 16);
  if ((v29 & 4) == 0) {
    goto LABEL_28;
  }
  unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
  if (!v30) {
    goto LABEL_28;
  }
LABEL_63:
  v37[0] = (char *)&v43 + 8;
  sub_1CC5FA668(v30 + 16, v37);
  *((void *)&v43 + 1) = v39;
  if (v39) {
    llvm::MetadataTracking::retrack((uint64_t)&v39, v39, (uint64_t)&v43 + 8);
  }
LABEL_29:
  *((void *)&v44 + 1) = this;
  *(void *)&long long v45 = 0;
  *(void *)&long long v44 = *((void *)this + 3);
  if ((char *)this + 56 == (char *)&v43 + 8) {
    goto LABEL_33;
  }
  if (*((void *)&v43 + 1))
  {
    int v31 = **((unsigned char **)&v43 + 1);
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = *((void *)&v43 + 1);
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v31 - 3) < 0xFFFFFFFE)
      {
        if (v31 == 3) {
          *(void *)(*((void *)&v43 + 1) + 8) = 0;
        }
        goto LABEL_31;
      }
      unint64_t v33 = v35 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v43 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v43 + 1) + 12)) {
        goto LABEL_31;
      }
      uint64_t v32 = *(void *)(*((void *)&v43 + 1) + 16);
      if ((v32 & 4) == 0) {
        goto LABEL_31;
      }
      unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        goto LABEL_31;
      }
    }
    v37[0] = (char *)&v43 + 8;
    sub_1CC5FA668(v33 + 16, v37);
  }
LABEL_31:
  uint64_t v24 = (unsigned __int8 *)*((void *)this + 7);
  *((void *)&v43 + 1) = v24;
  if (v24) {
    llvm::MetadataTracking::track((uint64_t)&v43 + 8, v24, 2);
  }
LABEL_33:
  LODWORD(v39) = v5;
  int v40 = 1;
  LODWORD(v37[0]) = a3;
  int v38 = 0;
  (*((void (**)(void **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))v41 + 4))(&v41, 19, &v39, 1, v37, 1, 0);
  llvm::MachineInstr::eraseFromParent(this);
  uint64_t v41 = &unk_1F261CD58;
  if (*((void *)&v43 + 1))
  {
    int v25 = **((unsigned char **)&v43 + 1);
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v26 = *((void *)&v43 + 1);
      }
      else {
        uint64_t v26 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v27 = v26 + 8;
LABEL_43:
        v37[0] = (char *)&v43 + 8;
        sub_1CC5FA668(v27 + 16, v37);
        return;
      }
      if (v25 == 3) {
        *(void *)(*((void *)&v43 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v43 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v43 + 1) + 12))
    {
      uint64_t v36 = *(void *)(*((void *)&v43 + 1) + 16);
      if ((v36 & 4) != 0)
      {
        unint64_t v27 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (v27) {
          goto LABEL_43;
        }
      }
    }
  }
}

uint64_t sub_1CB98E4FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (**(unsigned __int16 **)(a2 + 16) - 45 > 1) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v10 = *(unsigned int *)(v8 + 36);
  uint64_t v11 = *(unsigned int *)(v8 + 68);
  sub_1CC73C210(*(_DWORD *)(v8 + 36), v9, (uint64_t)&v68);
  if (BYTE8(v69))
  {
    if (v69 < 0x41)
    {
      uint64_t v15 = 0;
      BOOL v16 = 0;
      goto LABEL_12;
    }
    if (v68) {
      MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
    }
  }
  if ((v10 & 0x80000000) != 0) {
    unint64_t v12 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v12 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v10);
  }
  uint64_t v13 = *v12;
  if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
    uint64_t v13 = *(void *)(v13 + 24);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (**(_WORD **)(v14 + 16) == 121) {
    uint64_t v15 = *(void *)(*(void *)(v14 + 32) + 48);
  }
  else {
    uint64_t v15 = 0;
  }
  BOOL v16 = v15 != 0;
LABEL_12:
  sub_1CC73C210(v11, v9, (uint64_t)&v68);
  if (!BYTE8(v69)) {
    goto LABEL_13;
  }
  if (v69 < 0x41)
  {
    if (**(_WORD **)(a2 + 16) != 45 && v16)
    {
      uint64_t v67 = a3;
      BOOL v22 = 1;
      goto LABEL_40;
    }
    return 0;
  }
  if (v68) {
    MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
  }
LABEL_13:
  if ((v11 & 0x80000000) != 0) {
    uint64_t v17 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v17 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v11);
  }
  uint64_t v18 = *v17;
  if ((*(unsigned char *)(v18 + 3) & 1) == 0) {
    uint64_t v18 = *(void *)(v18 + 24);
  }
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t v67 = a3;
  if (**(_WORD **)(v19 + 16) == 121) {
    uint64_t result = *(void *)(*(void *)(v19 + 32) + 48);
  }
  else {
    uint64_t result = 0;
  }
  int v21 = **(unsigned __int16 **)(a2 + 16);
  BOOL v22 = v21 != 45;
  BOOL v23 = v21 != 45 && v16;
  if (v23 || result)
  {
    if (result)
    {
      int v25 = *(void **)(result + 32);
      uint64_t v24 = (llvm::detail::DoubleAPFloat *)(result + 32);
      if (v25 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v24, (llvm::APInt *)&v68);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v24, (uint64_t)&v68);
      }
      if (v69 >= 0x41) {
        uint64_t v26 = v68;
      }
      else {
        uint64_t v26 = (uint64_t *)&v68;
      }
      uint64_t v27 = *v26;
      if (v69 >= 0x41 && v68) {
        MEMORY[0x1D25D9CB0]();
      }
      int v28 = 1;
      goto LABEL_49;
    }
LABEL_40:
    int v31 = *(void **)(v15 + 32);
    unint64_t v30 = (llvm::detail::DoubleAPFloat *)(v15 + 32);
    if (v31 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v30, (llvm::APInt *)&v68);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v30, (uint64_t)&v68);
    }
    if (v69 >= 0x41) {
      uint64_t v32 = v68;
    }
    else {
      uint64_t v32 = (uint64_t *)&v68;
    }
    uint64_t v27 = *v32;
    if (v69 >= 0x41 && v68) {
      MEMORY[0x1D25D9CB0]();
    }
    int v28 = 0;
LABEL_49:
    int v33 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    int v66 = a4;
    int v65 = v28;
    if (v33 < 0 && (v33 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
      uint64_t v34 = *(void *)(*(void *)(v9 + 424) + 8 * (v33 & 0x7FFFFFFF));
    }
    else {
      uint64_t v34 = 0;
    }
    if (v22) {
      int v35 = 45;
    }
    else {
      int v35 = 35;
    }
    uint64_t v36 = *(void *)(a1 + 56);
    uint64_t v37 = *(void *)(a2 + 24);
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64_t v38 = *(void *)(v37 + 32);
    uint64_t v39 = *(void *)(v38 + 40);
    int v68 = (uint64_t *)&unk_1F261CD58;
    *(void *)&long long v69 = v38;
    *(void *)&long long v70 = v39;
    *((void *)&v69 + 1) = (*(uint64_t (**)(void))(**(void **)(v38 + 16) + 104))(*(void *)(v38 + 16));
    unsigned int v77 = 0;
    if (!*((void *)&v70 + 1)) {
      goto LABEL_58;
    }
    int v56 = **((unsigned char **)&v70 + 1);
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        uint64_t v62 = *((void *)&v70 + 1);
      }
      else {
        uint64_t v62 = 0;
      }
      if ((v56 - 3) <= 0xFFFFFFFD)
      {
        if (v56 == 3) {
          *(void *)(*((void *)&v70 + 1) + 8) = 0;
        }
        goto LABEL_58;
      }
      unint64_t v58 = v62 + 8;
    }
    else if ((*(unsigned char *)(*((void *)&v70 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v70 + 1) + 12) {
           || (uint64_t v57 = *(void *)(*((void *)&v70 + 1) + 16), (v57 & 4) == 0)
    }
           || (unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_58:
      *((void *)&v70 + 1) = 0;
      goto LABEL_59;
    }
    int v73 = (char *)&v70 + 8;
    sub_1CC5FA668(v58 + 16, &v73);
    *((void *)&v70 + 1) = v77;
    if (v77) {
      llvm::MetadataTracking::retrack((uint64_t)&v77, v77, (uint64_t)&v70 + 8);
    }
LABEL_59:
    int v40 = (unsigned char *)(v36 + 1328);
    *((void *)&v71 + 1) = a2;
    *(void *)&long long v72 = 0;
    *(void *)&long long v71 = *(void *)(a2 + 24);
    if ((long long *)(a2 + 56) == (long long *)((char *)&v70 + 8)) {
      goto LABEL_63;
    }
    if (!*((void *)&v70 + 1))
    {
LABEL_61:
      uint64_t v41 = *(unsigned __int8 **)(a2 + 56);
      *((void *)&v70 + 1) = v41;
      if (v41) {
        llvm::MetadataTracking::track((uint64_t)&v70 + 8, v41, 2);
      }
LABEL_63:
      if (v27 > 255)
      {
        if (v34 == 257) {
          int v49 = 241;
        }
        else {
          int v49 = 380;
        }
        unsigned int v50 = sub_1CB952700(v35, v49, v40);
        LODWORD(v77) = v33;
        int v78 = 1;
        uint64_t v46 = (llvm::MachineFunction *)sub_1CC739C54(&v68, v50, (unint64_t *)&v77, 1, 0, 0, 0);
        long long v48 = v51;
        LODWORD(v73) = 1;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        llvm::MachineInstr::addOperand(v51, v46, (const llvm::MachineOperand *)&v73);
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        LODWORD(v73) = 0;
        HIDWORD(v73) = v10;
        uint64_t v76 = 0;
        llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        LODWORD(v73) = 0;
        HIDWORD(v73) = v11;
        uint64_t v76 = 0;
        llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
      }
      else
      {
        if (v34 == 257) {
          int v42 = 220;
        }
        else {
          int v42 = 323;
        }
        if (v34 == 257) {
          int v43 = 235;
        }
        else {
          int v43 = 365;
        }
        if ((v22 & v65) != 0) {
          int v44 = v43;
        }
        else {
          int v44 = v42;
        }
        unsigned int v45 = sub_1CB952700(v35, v44, v40);
        LODWORD(v77) = v33;
        int v78 = 1;
        uint64_t v46 = (llvm::MachineFunction *)sub_1CC739C54(&v68, v45, (unint64_t *)&v77, 1, 0, 0, 0);
        long long v48 = v47;
        LODWORD(v73) = 1;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        llvm::MachineInstr::addOperand(v47, v46, (const llvm::MachineOperand *)&v73);
        if ((v22 & v65) != 1)
        {
          LODWORD(v73) = 1;
          uint64_t v74 = 0;
          uint64_t v75 = v27;
          llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          if (v22) {
            HIDWORD(v73) = v11;
          }
          else {
            HIDWORD(v73) = v10;
          }
          LODWORD(v73) = 0;
          uint64_t v76 = 0;
          llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
          uint64_t v52 = v67;
          LODWORD(v73) = 1;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
LABEL_84:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          sub_1CC73B5D0(v48, v52, v66);
          int v68 = (uint64_t *)&unk_1F261CD58;
          if (*((void *)&v70 + 1))
          {
            int v53 = **((unsigned char **)&v70 + 1);
            if ((v53 - 4) > 0x1E)
            {
              if ((v53 - 3) >= 0xFFFFFFFE) {
                uint64_t v54 = *((void *)&v70 + 1);
              }
              else {
                uint64_t v54 = 0;
              }
              if ((v53 - 3) < 0xFFFFFFFE)
              {
                if (v53 == 3) {
                  *(void *)(*((void *)&v70 + 1) + 8) = 0;
                }
                return 1;
              }
              unint64_t v55 = v54 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*((void *)&v70 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v70 + 1) + 12)) {
                return 1;
              }
              uint64_t v64 = *(void *)(*((void *)&v70 + 1) + 16);
              if ((v64 & 4) == 0) {
                return 1;
              }
              unint64_t v55 = v64 & 0xFFFFFFFFFFFFFFF8;
              if (!v55) {
                return 1;
              }
            }
            int v73 = (char *)&v70 + 8;
            sub_1CC5FA668(v55 + 16, &v73);
          }
          return 1;
        }
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        LODWORD(v73) = 0;
        HIDWORD(v73) = v10;
        uint64_t v76 = 0;
        llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
        LODWORD(v73) = 1;
        uint64_t v74 = 0;
        uint64_t v75 = v27;
      }
      llvm::MachineInstr::addOperand(v48, v46, (const llvm::MachineOperand *)&v73);
      uint64_t v52 = v67;
      goto LABEL_84;
    }
    int v59 = **((unsigned char **)&v70 + 1);
    if ((v59 - 4) > 0x1E)
    {
      if ((v59 - 3) >= 0xFFFFFFFE) {
        uint64_t v63 = *((void *)&v70 + 1);
      }
      else {
        uint64_t v63 = 0;
      }
      if ((v59 - 3) < 0xFFFFFFFE)
      {
        if (v59 == 3) {
          *(void *)(*((void *)&v70 + 1) + 8) = 0;
        }
        goto LABEL_61;
      }
      unint64_t v61 = v63 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v70 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v70 + 1) + 12)) {
        goto LABEL_61;
      }
      uint64_t v60 = *(void *)(*((void *)&v70 + 1) + 16);
      if ((v60 & 4) == 0) {
        goto LABEL_61;
      }
      unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
      if (!v61) {
        goto LABEL_61;
      }
    }
    int v73 = (char *)&v70 + 8;
    sub_1CC5FA668(v61 + 16, &v73);
    goto LABEL_61;
  }
  return result;
}

uint64_t sub_1CB98ECF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v8 = *(unsigned int *)(v6 + 36);
  if ((v8 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v8);
  }
  uint64_t v10 = *v9;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (**(_WORD **)(v11 + 16) != 269)
  {
    uint64_t v16 = 0;
    LOBYTE(v17) = 0;
    unsigned int v18 = 0;
    return v16 & 0x100000000 | v18 | v17;
  }
  unsigned int v12 = *(_DWORD *)(v6 + 68);
  uint64_t v13 = (unsigned char *)(*(void *)(a1 + 56) + 1328);
  sub_1CC73C210(v12, v7, (uint64_t)&v59);
  unsigned int v51 = v12;
  if ((_BYTE)v61)
  {
    if (v60 > 0x40)
    {
      if (v59) {
        MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
      }
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      unint64_t v19 = ((uint64_t)((void)v59 << -(char)v60) >> -(char)v60) & 0xFFFFFFFFFFFFFF00;
      uint64_t v20 = ((uint64_t)((void)v59 << -(char)v60) >> -(char)v60);
      uint64_t v14 = 1;
    }
    unint64_t v15 = v20 | v19;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
  }
  BOOL v21 = v14 != 0;
  BOOL v22 = v15 < 0x100;
  BOOL v23 = v21 && v22;
  if (v21 && v22) {
    int v24 = 235;
  }
  else {
    int v24 = 241;
  }
  unsigned int v25 = sub_1CB952700(35, v24, v13);
  uint64_t v26 = *(void *)(a2 + 24);
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  uint64_t v27 = *(void *)(v26 + 32);
  unint64_t v28 = *(void *)(v27 + 40);
  uint64_t v54 = &unk_1F261CD58;
  *(void *)&long long v55 = v27;
  long long v56 = v28;
  *((void *)&v55 + 1) = (*(uint64_t (**)(void))(**(void **)(v27 + 16) + 104))(*(void *)(v27 + 16));
  uint64_t v63 = 0;
  *((void *)&v57 + 1) = a2;
  *(void *)&long long v58 = 0;
  *(void *)&long long v57 = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) != (long long *)((char *)&v56 + 8))
  {
    uint64_t v29 = *(unsigned __int8 **)(a2 + 56);
    *((void *)&v56 + 1) = v29;
    if (v29) {
      llvm::MetadataTracking::track((uint64_t)&v56 + 8, v29, 2);
    }
  }
  int v59 = &off_1E66AB080;
  LODWORD(v60) = 2;
  unint64_t v30 = (llvm::MachineFunction *)sub_1CC739C54(&v54, v25, (unint64_t *)&v59, 1, 0, 0, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
  uint64_t v32 = v31;
  uint64_t v52 = v30;
  int v53 = v31;
  LODWORD(v59) = 1;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  llvm::MachineInstr::addOperand(v31, v30, (const llvm::MachineOperand *)&v59);
  int v33 = *(_DWORD *)(*(void *)(v11 + 32) + 48);
  LODWORD(v59) = 5;
  uint64_t v60 = 0;
  LODWORD(v61) = v33;
  llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v59);
  LODWORD(v59) = 1;
  uint64_t v60 = 0;
  uint64_t v61 = a3 << 6;
  llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v59);
  sub_1CB983B48(a1, *(void *)(a2 + 32) + 64, (uint64_t)&v59);
  if (v62)
  {
    if (v60)
    {
      uint64_t v34 = (char *)v59;
      uint64_t v35 = 32 * v60;
      do
      {
        sub_1CB986C7C((uint64_t)&v63, (uint64_t)v34);
        if (!v66) {
          sub_1CB920400();
        }
        (*(void (**)(uint64_t *, llvm::MachineFunction **))(*v66 + 48))(v66, &v52);
        if (v66 == &v63)
        {
          (*(void (**)(uint64_t *))(v63 + 32))(&v63);
        }
        else if (v66)
        {
          (*(void (**)(void))(*v66 + 40))();
        }
        v34 += 32;
        v35 -= 32;
      }
      while (v35);
    }
  }
  else
  {
    if (v23)
    {
      LODWORD(v63) = 1;
      uint64_t v64 = 0;
      unint64_t v65 = v15;
    }
    else
    {
      uint64_t v64 = 0;
      unint64_t v65 = 0;
      LODWORD(v63) = 0;
      HIDWORD(v63) = v51;
      int v66 = 0;
      llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v63);
      LODWORD(v63) = 1;
      uint64_t v64 = 0;
      unint64_t v65 = 0;
    }
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v63);
  }
  if (v62)
  {
    uint64_t v36 = (uint64_t *)v59;
    if (v60)
    {
      uint64_t v37 = 32 * v60;
      uint64_t v38 = (char *)v59 - 32;
      do
      {
        uint64_t v39 = *(char **)&v38[v37 + 24];
        if (&v38[v37] == v39)
        {
          (*(void (**)(char *))(*(void *)&v38[v37] + 32))(&v38[v37]);
        }
        else if (v39)
        {
          (*(void (**)(char *))(*(void *)v39 + 40))(v39);
        }
        v37 -= 32;
      }
      while (v37);
      uint64_t v36 = (uint64_t *)v59;
    }
    if (v36 != &v61) {
      free(v36);
    }
  }
  int v40 = v53;
  if (a3)
  {
    uint64_t v41 = *((void *)v53 + 4);
    unsigned int v42 = *(_DWORD *)(v41 + 176);
    unsigned int v43 = (v42 >> 6) & 7;
    BOOL v44 = v43 >= a3;
    unsigned int v45 = v43 - a3;
    if (!v44)
    {
      uint64_t v16 = 0;
      LOBYTE(v17) = 0;
      unsigned int v18 = 0;
      goto LABEL_49;
    }
    *(void *)(v41 + 176) = v42 & 0xFFFFFE3F | (v45 << 6);
  }
  sub_1CC73B5D0(v40, *(void *)(a1 + 72), *(void **)(a1 + 80));
  int v17 = *(_DWORD *)(*((void *)v53 + 4) + 4);
  unsigned int v18 = v17 & 0xFFFFFF00;
  uint64_t v16 = 0x100000000;
LABEL_49:
  uint64_t v54 = &unk_1F261CD58;
  if (*((void *)&v56 + 1))
  {
    int v46 = **((unsigned char **)&v56 + 1);
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v48 = *((void *)&v56 + 1);
      }
      else {
        uint64_t v48 = 0;
      }
      if ((v46 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v49 = v48 + 8;
LABEL_59:
        int v59 = (char *)&v56 + 8;
        sub_1CC5FA668(v49 + 16, &v59);
        return v16 & 0x100000000 | v18 | v17;
      }
      if (v46 == 3) {
        *(void *)(*((void *)&v56 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v56 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v56 + 1) + 12))
    {
      uint64_t v50 = *(void *)(*((void *)&v56 + 1) + 16);
      if ((v50 & 4) != 0)
      {
        unint64_t v49 = v50 & 0xFFFFFFFFFFFFFFF8;
        if (v49) {
          goto LABEL_59;
        }
      }
    }
  }
  return v16 & 0x100000000 | v18 | v17;
}

uint64_t sub_1CB98F3C8(void *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v10 = (unsigned __int8 *)(v8 + 32);
  uint64_t v11 = (unsigned __int8 *)(v8 + 64);
  uint64_t v12 = *(unsigned int *)(v8 + 36);
  if ((v12 & 0x80000000) != 0) {
    uint64_t v13 = (uint64_t *)(v9[3] + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(v9[34] + 8 * v12);
  }
  uint64_t v14 = *v13;
  if (v14)
  {
    if (*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3))
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        if (**(_WORD **)(v15 + 16) == 178) {
          llvm::MachineOperand::setReg((uint64_t)v10, *(_DWORD *)(*(void *)(v15 + 32) + 36));
        }
      }
    }
  }
  sub_1CB986134((uint64_t)v49, (uint64_t)v9, a1[10], a1[11], v10, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v48, (uint64_t)v9, a1[10], a1[11], v11, 0, 0, 0, 0);
  unint64_t v16 = 257;
  if (a3) {
    unint64_t v16 = 129;
  }
  unint64_t v47 = v16;
  uint64_t v17 = 1;
  if (v49[22] != 16) {
    uint64_t v17 = 2;
  }
  if ((int)v49[20] <= 3) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  if (a4) {
    int v19 = 29;
  }
  else {
    int v19 = 28;
  }
  unsigned int v20 = sub_1CB952700(v19, dword_1CD971A54[6 * a3 + 2 * v18 + ((signed int)v48[20] < 4)], (unsigned char *)(a1[7] + 1328));
  int v22 = sub_1CB8F1DC4(&v47);
  if (v21 == 1) {
  if (v22 > 111)
  }
  {
    if (v22 <= 191)
    {
      if (v22 == 112)
      {
        BOOL v23 = (__int16 ***)&off_1E66AB198;
      }
      else if (v22 == 128)
      {
        BOOL v23 = (__int16 ***)&off_1E66AB1D0;
      }
      else
      {
        BOOL v23 = (__int16 ***)&off_1E66AB208;
      }
    }
    else if (v22 > 287)
    {
      if (v22 == 288) {
        BOOL v23 = (__int16 ***)&off_1E66AB2B0;
      }
      else {
        BOOL v23 = (__int16 ***)&off_1E66AB2E8;
      }
    }
    else if (v22 == 192)
    {
      BOOL v23 = (__int16 ***)&off_1E66AB240;
    }
    else
    {
      BOOL v23 = (__int16 ***)&off_1E66AB278;
    }
  }
  else if (v22 <= 47)
  {
    BOOL v23 = &off_1E66AB048;
    if (v22 != 1 && v22 != 16) {
      BOOL v23 = &off_1E66AB080;
    }
  }
  else if (v22 > 79)
  {
    if (v22 == 80) {
      BOOL v23 = (__int16 ***)&off_1E66AB160;
    }
    else {
      BOOL v23 = (__int16 ***)&off_1E66AB0F0;
    }
  }
  else if (v22 == 48)
  {
    BOOL v23 = (__int16 ***)&off_1E66AB128;
  }
  else
  {
    BOOL v23 = (__int16 ***)&off_1E66AB358;
  }
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v9, "", 0);
  *(void *)(v9[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v23;
  uint64_t v25 = v9[1];
  if (v25) {
    (*(void (**)(uint64_t, void))(*(void *)v25 + 24))(v25, IncompleteVirtualRegister);
  }
  uint64_t v26 = *(void *)(a2 + 24);
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  uint64_t v27 = *(void *)(v26 + 32);
  unint64_t v28 = *(void *)(v27 + 40);
  unsigned int v42 = &unk_1F261CD58;
  *(void *)&long long v43 = v27;
  long long v44 = v28;
  *((void *)&v43 + 1) = (*(uint64_t (**)(void))(**(void **)(v27 + 16) + 104))(*(void *)(v27 + 16));
  unint64_t v53 = 0;
  *((void *)&v45 + 1) = a2;
  *(void *)&long long v46 = 0;
  *(void *)&long long v45 = *(void *)(a2 + 24);
  uint64_t v29 = (_OWORD *)(a2 + 56);
  if (v29 != (long long *)((char *)&v44 + 8))
  {
    unint64_t v30 = *(unsigned __int8 **)v29;
    *((void *)&v44 + 1) = v30;
    if (v30) {
      llvm::MetadataTracking::track((uint64_t)&v44 + 8, v30, 2);
    }
  }
  LODWORD(v53) = IncompleteVirtualRegister;
  int v54 = 1;
  uint64_t v32 = (llvm::MachineFunction *)sub_1CC739C54(&v42, v20, &v53, 1, 0, 0, 0);
  int v33 = v31;
  uint64_t v34 = 4096;
  LODWORD(v50) = 1;
  if (!a3) {
    uint64_t v34 = 0;
  }
  unsigned int v51 = 0;
  uint64_t v52 = v34;
  llvm::MachineInstr::addOperand(v31, v32, (const llvm::MachineOperand *)&v50);
  uint64_t v50 = v32;
  unsigned int v51 = v33;
  uint64_t v35 = operator new(0x30uLL);
  void *v35 = &unk_1F25F08E8;
  v35[1] = sub_1CB987D10;
  v35[2] = 0;
  v35[3] = a1;
  v35[4] = v9;
  *((_DWORD *)v35 + 10) = 0;
  *((unsigned char *)v35 + 44) = 1;
  sub_1CB9981E4(v49, (uint64_t)v35);
  (*(void (**)(void *))(*v35 + 40))(v35);
  uint64_t v36 = operator new(0x30uLL);
  *uint64_t v36 = &unk_1F25F08E8;
  v36[1] = sub_1CB987D10;
  v36[2] = 0;
  v36[3] = a1;
  v36[4] = v9;
  *((_DWORD *)v36 + 10) = 0;
  *((unsigned char *)v36 + 44) = 1;
  sub_1CB9981E4(v48, (uint64_t)v36);
  (*(void (**)(void *))(*v36 + 40))(v36);
  sub_1CB9983A0(&v50, (uint64_t)v49);
  sub_1CB9983A0(&v50, (uint64_t)v48);
  sub_1CC73B5D0(v33, a1[9], (void *)a1[10]);
  unsigned int v42 = &unk_1F261CD58;
  if (*((void *)&v44 + 1))
  {
    int v37 = **((unsigned char **)&v44 + 1);
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = *((void *)&v44 + 1);
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v37 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = v39 + 8;
LABEL_62:
        uint64_t v50 = (llvm::MachineFunction *)((char *)&v44 + 8);
        sub_1CC5FA668(v40 + 16, &v50);
        return IncompleteVirtualRegister | 0x100000000;
      }
      if (v37 == 3) {
        *(void *)(*((void *)&v44 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v44 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v44 + 1) + 12))
    {
      uint64_t v41 = *(void *)(*((void *)&v44 + 1) + 16);
      if ((v41 & 4) != 0)
      {
        unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_62;
        }
      }
    }
  }
  return IncompleteVirtualRegister | 0x100000000;
}

BOOL sub_1CB98FAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v989 = *MEMORY[0x1E4F143B8];
  v896 = *(uint64_t **)(*(void *)(a2 + 24) + 32);
  uint64_t v4 = v896[5];
  uint64_t v5 = *(unsigned char **)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(a2 + 40);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      int v9 = *v8;
      v8 += 32;
      if (v9 == 17) {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    LODWORD(v7) = -1;
  }
  int v10 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v7 + 16);
  v980[0] = v981;
  v980[1] = (void *)0x400000000;
  unsigned int v984 = 8;
  uint64_t v11 = operator new(0x80uLL, (std::align_val_t)8uLL);
  v982 = v11;
  uint64_t v983 = 0;
  if (v984)
  {
    uint64_t v12 = 16 * v984;
    do
    {
      void *v11 = -4096;
      v11 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v974 = v976;
  uint64_t v975 = 0x800000000;
  unsigned int v979 = 16;
  uint64_t v13 = operator new(0x100uLL, (std::align_val_t)8uLL);
  v977 = v13;
  unint64_t v978 = 0;
  if (v979)
  {
    uint64_t v14 = 16 * v979;
    do
    {
      void *v13 = -4096;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  v911 = v915;
  v912 = v915;
  uint64_t v913 = 4;
  int v914 = 0;
  v910 = &unk_1F25F01D0;
  v915[4] = v980;
  v915[5] = &v974;
  v970[2] = v972;
  v970[3] = v972;
  v970[4] = 4;
  int v971 = 0;
  v970[0] = &unk_1F25F09C0;
  v970[1] = &unk_1F25F0A18;
  v972[4] = &v973;
  v973 = &v910;
  v972[5] = 0x400000001;
  v899 = (llvm::MachineInstr *)a2;
  uint64_t v15 = *(void *)(a2 + 24);
  long long v909 = 0u;
  long long v908 = 0u;
  long long v907 = 0u;
  long long v906 = 0u;
  uint64_t v16 = *(void *)(v15 + 32);
  unint64_t v17 = *(void *)(v16 + 40);
  v905 = &unk_1F261CD58;
  *(void *)&long long v906 = v16;
  long long v907 = v17;
  *((void *)&v906 + 1) = (*(uint64_t (**)(void))(**(void **)(v16 + 16) + 104))(*(void *)(v16 + 16));
  v917 = 0;
  *(void *)&long long v908 = *(void *)(a2 + 24);
  *((void *)&v908 + 1) = a2;
  *(void *)&long long v909 = 0;
  uint64_t v18 = (_OWORD *)(a2 + 56);
  if ((long long *)(a2 + 56) != (long long *)((char *)&v907 + 8))
  {
    int v19 = *(unsigned __int8 **)v18;
    *((void *)&v907 + 1) = v19;
    if (v19) {
      llvm::MetadataTracking::track((uint64_t)&v907 + 8, v19, 2);
    }
  }
  *(void *)&long long v909 = &v910;
  v904[0] = v970;
  v904[1] = &v905;
  v904[2] = v980;
  v904[3] = &v974;
  if ((v10 - 1282) < 0x190)
  {
    v985 = (unsigned __int8 *)&unk_1F25F0210;
    unsigned int v20 = (unsigned __int8 **)&v902;
    *(void *)&long long v902 = &unk_1F25F03A8;
    *(void *)&long long v900 = &unk_1F25F0540;
    if (!*(unsigned char *)(a1 + 98))
    {
      unsigned int v20 = (unsigned __int8 **)&v900;
      if (!*(unsigned char *)(a1 + 99) && !*(unsigned char *)(a1 + 101)) {
        unsigned int v20 = &v985;
      }
    }
    memset((char *)&v926[1] + 4, 0, 24);
    long long v927 = 0u;
    long long v929 = 0u;
    int v928 = 0;
    int v930 = 0;
    long long v931 = 0u;
    long long v933 = 0u;
    int v932 = 0;
    int v934 = 0;
    long long v935 = 0u;
    int v936 = 0;
    int v938 = 0;
    long long v937 = 0u;
    v939 = v941;
    uint64_t v940 = 0x800000000;
    v942 = v944;
    uint64_t v943 = 0x600000000;
    int v945 = 0;
    long long v946 = 0u;
    int v947 = 0;
    int v949 = 0;
    long long v948 = 0u;
    v950 = v952;
    uint64_t v951 = 0x3200000000;
    long long v953 = 0u;
    uint64_t v954 = 0;
    int v955 = 0;
    v956 = v960;
    v957 = v960;
    uint64_t v958 = 4;
    int v959 = 0;
    long long v961 = 0u;
    uint64_t v962 = 0;
    v963 = &v965;
    uint64_t v964 = 0;
    unsigned int v965 = 0x80000000;
    int v967 = 1;
    uint64_t v966 = 0;
    int v969 = 1;
    uint64_t v968 = 0;
    BOOL v21 = v896;
    uint64_t v22 = *(void *)(a2 + 24);
    uint64_t v23 = *(void *)(a1 + 72);
    uint64_t v24 = *(void *)(a1 + 80);
    uint64_t v918 = (uint64_t)v20;
    *(void *)v919 = v22;
    *(void *)&v919[8] = a2;
    *(void *)&v919[16] = v896;
    *(void *)&v919[24] = v23;
    uint64_t v920 = v4;
    uint64_t v921 = v24;
    v922 = &v905;
    v917 = &unk_1F25F06D8;
    v896[91] = (uint64_t)v970;
    BOOL v25 = 0;
    if (!sub_1CB99CF74(&v917, (uint64_t)v899, v10, v896[43], 3)) {
      goto LABEL_100;
    }
    sub_1CB99DD40(v904);
    int v26 = v978;
    if (v978)
    {
      while (1)
      {
        unsigned int v27 = v975;
        do
          uint64_t v28 = *((void *)v974 + --v27);
        while (!v28);
        LODWORD(v975) = v27;
        if (v979)
        {
          LODWORD(v29) = (v979 - 1) & ((v28 >> 4) ^ (v28 >> 9));
          unint64_t v30 = &v977[2 * v29];
          uint64_t v31 = *v30;
          if (v28 == *v30)
          {
LABEL_30:
            *unint64_t v30 = -8192;
            unint64_t v978 = __PAIR64__(HIDWORD(v978), v26 - 1) + 0x100000000;
          }
          else
          {
            int v32 = 1;
            while (v31 != -4096)
            {
              int v33 = v29 + v32++;
              uint64_t v29 = v33 & (v979 - 1);
              uint64_t v31 = v977[2 * v29];
              if (v28 == v31)
              {
                unint64_t v30 = &v977[2 * v29];
                goto LABEL_30;
              }
            }
          }
        }
        unsigned int v34 = **(unsigned __int16 **)(v28 + 16);
        BOOL v35 = v34 > 0x20;
        uint64_t v36 = (1 << v34) & 0x100600000;
        if (!v35 && v36 != 0) {
          goto LABEL_53;
        }
        BOOL v916 = 0;
        if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v28, 0, &v916))
        {
          int v44 = **(unsigned __int16 **)(v28 + 16);
          if (v44 != 69 && v44 != 0) {
            goto LABEL_53;
          }
        }
        uint64_t v38 = *(unsigned int *)(v28 + 40);
        if (v38) {
          break;
        }
LABEL_48:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v28);
LABEL_54:
        int v26 = v978;
        if (!v978) {
          goto LABEL_97;
        }
      }
      uint64_t v39 = *(_DWORD **)(v28 + 32);
      unint64_t v40 = &v39[8 * v38];
      while (1)
      {
        if ((*v39 & 0x10000FF) == 0x1000000)
        {
          uint64_t v41 = v39[1];
          if ((v41 - 1) < 0x3FFFFFFF) {
            goto LABEL_53;
          }
          unsigned int v42 = (uint64_t *)((int)v41 < 0
                          ? *(void *)(v4 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8
                          : *(void *)(v4 + 272) + 8 * v41);
          uint64_t v43 = *v42;
          if (v43) {
            break;
          }
        }
LABEL_47:
        v39 += 8;
        if (v39 == v40) {
          goto LABEL_48;
        }
      }
      while ((*(_DWORD *)v43 & 0x81000000) != 0)
      {
        uint64_t v43 = *(void *)(v43 + 24);
        if (!v43) {
          goto LABEL_47;
        }
      }
LABEL_53:
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v28)) {
        goto LABEL_98;
      }
      goto LABEL_54;
    }
LABEL_97:
    llvm::MachineInstr::eraseFromParent(v899);
    BOOL v25 = 1;
    goto LABEL_99;
  }
  BOOL v25 = 0;
  if (v10 > 2110)
  {
    if (v10 <= 2420)
    {
      if ((v10 - 2111) < 4)
      {
        int v73 = v899;
        uint64_t v74 = *((void *)v899 + 3);
        memset(v926, 0, 32);
        long long v925 = 0u;
        long long v924 = 0u;
        uint64_t v75 = *(void *)(v74 + 32);
        v923 = (void **)&unk_1F261CD58;
        *(void *)&long long v924 = v75;
        *(void *)&long long v925 = *(void *)(v75 + 40);
        *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v75 + 16) + 104))(*(void *)(v75 + 16));
        v985 = 0;
        if (!*((void *)&v925 + 1))
        {
LABEL_123:
          *((void *)&v925 + 1) = 0;
          goto LABEL_124;
        }
        int v414 = **((unsigned char **)&v925 + 1);
        if ((v414 - 4) > 0x1E)
        {
          if ((v414 - 3) >= 0xFFFFFFFE) {
            uint64_t v459 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v459 = 0;
          }
          if ((v414 - 3) <= 0xFFFFFFFD)
          {
            if (v414 == 3) {
              *(void *)(*((void *)&v925 + 1) + 8) = 0;
            }
            goto LABEL_123;
          }
          unint64_t v416 = v459 + 8;
        }
        else
        {
          if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v925 + 1) + 12)) {
            goto LABEL_123;
          }
          uint64_t v415 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v415 & 4) == 0) {
            goto LABEL_123;
          }
          unint64_t v416 = v415 & 0xFFFFFFFFFFFFFFF8;
          if (!v416) {
            goto LABEL_123;
          }
        }
        v917 = (char *)&v925 + 8;
        sub_1CC5FA668(v416 + 16, &v917);
        *((void *)&v925 + 1) = v985;
        if (v985) {
          llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
        }
LABEL_124:
        v926[1] = v899;
        v926[2] = 0;
        v926[0] = *((void *)v899 + 3);
        if (v18 == (long long *)((char *)&v925 + 8))
        {
LABEL_128:
          unsigned int v77 = (_OWORD *)*((void *)v73 + 4);
          long long v78 = v77[3];
          long long v902 = v77[2];
          long long v903 = v78;
          long long v79 = v77[5];
          long long v900 = v77[4];
          long long v901 = v79;
          unint64_t v80 = DWORD1(v902);
          if ((DWORD1(v902) & 0x80000000) != 0) {
            unsigned int v81 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (DWORD1(v902) & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v81 = (uint64_t *)(*(void *)(v4 + 272) + 8 * DWORD1(v902));
          }
          uint64_t v82 = *v81;
          if (v82)
          {
            if (*(unsigned char *)(v82 + 3) & 1) != 0 || (uint64_t v82 = *(void *)(v82 + 24)) != 0 && (*(unsigned char *)(v82 + 3))
            {
              uint64_t v83 = *(void *)(v82 + 8);
              if (v83)
              {
                if (**(_WORD **)(v83 + 16) == 82 && *(_DWORD *)(v83 + 40) == 2) {
                  unint64_t v80 = *(unsigned int *)(*(void *)(v83 + 32) + 36);
                }
              }
            }
          }
          if (v80 >> 31) {
            unint64_t v84 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v80 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v84 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v80);
          }
          uint64_t v85 = *v84;
          if ((*(unsigned char *)(v85 + 3) & 1) == 0) {
            uint64_t v85 = *(void *)(v85 + 24);
          }
          uint64_t v86 = *(void *)(v85 + 8);
          if ((**(_WORD **)(v86 + 16) & 0xFFFE) != 0x4C) {
            goto LABEL_1335;
          }
          uint64_t v87 = *(void *)(v86 + 32);
          uint64_t v88 = *(unsigned int *)(v87 + 36);
          if ((v88 & 0x80000000) != 0) {
            unint64_t v89 = (unint64_t *)(*(void *)(v4 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v89 = (unint64_t *)(*(void *)(v4 + 272) + 8 * v88);
          }
          unint64_t v90 = *v89;
          if (!v90) {
            goto LABEL_146;
          }
          if (*(unsigned char *)(v90 + 3)) {
            goto LABEL_145;
          }
          unint64_t v90 = *(void *)(v90 + 24);
          if (!v90) {
            goto LABEL_146;
          }
          if (*(unsigned char *)(v90 + 3))
          {
LABEL_145:
            unint64_t v90 = *(void *)(v90 + 8);
            if (!v90)
            {
LABEL_146:
              uint64_t v91 = 0;
LABEL_1325:
              char v411 = 1;
LABEL_1326:
              uint64_t v730 = *(unsigned int *)(v87 + 68);
              if ((v730 & 0x80000000) != 0) {
                v731 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v730 & 0x7FFFFFFF) + 8);
              }
              else {
                v731 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v730);
              }
              uint64_t v732 = *v731;
              if (v732)
              {
                if ((*(unsigned char *)(v732 + 3) & 1) != 0
                  || (uint64_t v732 = *(void *)(v732 + 24)) != 0 && (*(unsigned char *)(v732 + 3) & 1) != 0)
                {
                  uint64_t v733 = *(void *)(v732 + 8);
                  if (v733)
                  {
                    char v734 = **(_WORD **)(v733 + 16) == 318 ? v411 : 1;
                    if ((v734 & 1) == 0)
                    {
                      uint64_t v750 = (uint64_t)(v90 | v91) / 2;
                      if ((v80 & 0x80000000) != 0 && (unsigned int v751 = v80 & 0x7FFFFFFF, v751 < *(_DWORD *)(v4 + 432))) {
                        v752 = *(void **)(*(void *)(v4 + 424) + 8 * v751);
                      }
                      else {
                        v752 = 0;
                      }
                      v917 = v752;
                      uint64_t v754 = sub_1CB8F1DC4((unint64_t *)&v917);
                      if (v753 == 1) {
                      HIDWORD(v755) = (unint64_t)(v754 + 7) >> 3;
                      }
                      LODWORD(v755) = HIDWORD(v755) - 2;
                      LODWORD(v902) = dword_1CDAF3AF8[(int)(v755 >> 1)];
                      DWORD1(v902) = v750;
                      *((void *)&v902 + 1) = 0;
                      LODWORD(v903) = 64;
                      DWORD2(v903) = HIDWORD(v750);
                      uint64_t v735 = 1;
                      goto LABEL_1336;
                    }
                  }
                }
              }
LABEL_1335:
              uint64_t v735 = 0;
LABEL_1336:
              unint64_t v736 = DWORD1(v900);
              if ((DWORD1(v900) & 0x80000000) != 0) {
                v737 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (DWORD1(v900) & 0x7FFFFFFF) + 8);
              }
              else {
                v737 = (uint64_t *)(*(void *)(v4 + 272) + 8 * DWORD1(v900));
              }
              uint64_t v738 = *v737;
              if (v738)
              {
                if ((*(unsigned char *)(v738 + 3) & 1) != 0
                  || (uint64_t v738 = *(void *)(v738 + 24)) != 0 && (*(unsigned char *)(v738 + 3) & 1) != 0)
                {
                  uint64_t v739 = *(void *)(v738 + 8);
                  if (v739)
                  {
                    if (**(_WORD **)(v739 + 16) == 82 && *(_DWORD *)(v739 + 40) == 2) {
                      unint64_t v736 = *(unsigned int *)(*(void *)(v739 + 32) + 36);
                    }
                  }
                }
              }
              if (v736 >> 31) {
                v740 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v736 & 0x7FFFFFFF) + 8);
              }
              else {
                v740 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v736);
              }
              uint64_t v741 = *v740;
              if ((*(unsigned char *)(v741 + 3) & 1) == 0) {
                uint64_t v741 = *(void *)(v741 + 24);
              }
              uint64_t v742 = *(void *)(v741 + 8);
              int v743 = **(_WORD **)(v742 + 16) & 0xFFFE;
              BOOL v25 = v743 == 76;
              if (v743 != 76)
              {
LABEL_1440:
                v923 = (void **)&unk_1F261CD58;
                if (!*((void *)&v925 + 1)) {
                  goto LABEL_101;
                }
                int v806 = **((unsigned char **)&v925 + 1);
                if ((v806 - 4) > 0x1E)
                {
                  if ((v806 - 3) >= 0xFFFFFFFE) {
                    uint64_t v809 = *((void *)&v925 + 1);
                  }
                  else {
                    uint64_t v809 = 0;
                  }
                  if ((v806 - 3) < 0xFFFFFFFE)
                  {
                    if (v806 == 3) {
                      *(void *)(*((void *)&v925 + 1) + 8) = 0;
                    }
                    goto LABEL_101;
                  }
                  unint64_t v808 = v809 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                    && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                  {
                    goto LABEL_101;
                  }
                  uint64_t v807 = *(void *)(*((void *)&v925 + 1) + 16);
                  if ((v807 & 4) == 0) {
                    goto LABEL_101;
                  }
                  unint64_t v808 = v807 & 0xFFFFFFFFFFFFFFF8;
                  if (!v808) {
                    goto LABEL_101;
                  }
                }
                v917 = (char *)&v925 + 8;
                sub_1CC5FA668(v808 + 16, &v917);
                goto LABEL_101;
              }
              uint64_t v891 = v735;
              uint64_t v744 = *(void *)(v742 + 32);
              uint64_t v745 = *(unsigned int *)(v744 + 36);
              if ((v745 & 0x80000000) != 0) {
                v746 = (unint64_t *)(*(void *)(v4 + 24) + 16 * (v745 & 0x7FFFFFFF) + 8);
              }
              else {
                v746 = (unint64_t *)(*(void *)(v4 + 272) + 8 * v745);
              }
              unint64_t v747 = *v746;
              if (!v747) {
                goto LABEL_1354;
              }
              if (*(unsigned char *)(v747 + 3)) {
                goto LABEL_1353;
              }
              unint64_t v747 = *(void *)(v747 + 24);
              if (!v747) {
                goto LABEL_1354;
              }
              if (*(unsigned char *)(v747 + 3))
              {
LABEL_1353:
                unint64_t v747 = *(void *)(v747 + 8);
                if (!v747)
                {
LABEL_1354:
                  uint64_t v748 = 0;
LABEL_1373:
                  char v749 = 1;
LABEL_1374:
                  uint64_t v756 = *(unsigned int *)(v744 + 68);
                  if ((v756 & 0x80000000) != 0) {
                    v757 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v756 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    v757 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v756);
                  }
                  unsigned int v758 = v10 & 0xFFFFFFFD;
                  uint64_t v759 = *v757;
                  if (v759
                    && ((*(unsigned char *)(v759 + 3) & 1) != 0
                     || (uint64_t v759 = *(void *)(v759 + 24)) != 0 && (*(unsigned char *)(v759 + 3) & 1) != 0)
                    && (uint64_t v760 = *(void *)(v759 + 8)) != 0
                    && (**(_WORD **)(v760 + 16) != 318 ? (char v761 = 1) : (char v761 = v749), (v761 & 1) == 0))
                  {
                    uint64_t v783 = (uint64_t)(v747 | v748) / 2;
                    if (v758 == 2112) {
                      int v784 = 1799;
                    }
                    else {
                      int v784 = 1543;
                    }
                    long long v900 = __PAIR64__(v783, v784);
                    LODWORD(v901) = 64;
                    DWORD2(v901) = HIDWORD(v783);
                    if (v758 == 2112) {
                      int v774 = 4;
                    }
                    else {
                      int v774 = 3;
                    }
                    uint64_t v782 = 1;
                  }
                  else
                  {
                    v762 = (unsigned __int8 *)&off_1E66AB0F0;
                    if (v758 == 2112) {
                      v762 = (unsigned __int8 *)&off_1E66AB208;
                    }
                    v885 = v762;
                    v917 = v919;
                    uint64_t v918 = 0x800000000;
                    int v763 = sub_1CB9885B8(a1, (uint64_t)v899, (void *)v4, 25, v736, (uint64_t)&off_1E66AB080);
                    int v764 = sub_1CB9885B8(a1, (uint64_t)v899, (void *)v4, 26, v736, (uint64_t)&off_1E66AB080);
                    if (v918 >= HIDWORD(v918)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v917 + v918) = v763;
                    unsigned int v765 = v918 + 1;
                    LODWORD(v918) = v765;
                    if (v765 >= HIDWORD(v918)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v917 + v765) = v764;
                    unsigned int v766 = v918 + 1;
                    LODWORD(v918) = v918 + 1;
                    uint64_t v767 = *((void *)v899 + 4);
                    unsigned int v768 = *(_DWORD *)(v767 + 100);
                    if (v758 == 2112)
                    {
                      unsigned int v769 = *(_DWORD *)(v767 + 132);
                      int v770 = sub_1CB9885B8(a1, (uint64_t)v899, (void *)v4, 25, *(_DWORD *)(v767 + 100), (uint64_t)&off_1E66AB080);
                      int v771 = sub_1CB9885B8(a1, (uint64_t)v899, (void *)v4, 26, v768, (uint64_t)&off_1E66AB080);
                      if (v918 >= HIDWORD(v918)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v917 + v918) = v770;
                      unsigned int v772 = v918 + 1;
                      LODWORD(v918) = v772;
                      if (v772 >= HIDWORD(v918)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v917 + v772) = v771;
                      unsigned int v773 = HIDWORD(v918);
                      unsigned int v766 = v918 + 1;
                      LODWORD(v918) = v918 + 1;
                      int v774 = 4;
                    }
                    else
                    {
                      unsigned int v773 = HIDWORD(v918);
                      int v774 = 3;
                      unsigned int v769 = v768;
                    }
                    if (v766 >= v773) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v917 + v766) = v769;
                    LODWORD(v918) = v918 + 1;
                    v985 = v885;
                    LODWORD(v986) = 2;
                    uint64_t v775 = sub_1CC739C54(&v923, 0x12u, (unint64_t *)&v985, 1, 0, 0, 0);
                    v777 = v776;
                    if (v918)
                    {
                      v778 = (llvm::MachineFunction *)v775;
                      unint64_t v779 = 0;
                      do
                      {
                        int v780 = *((_DWORD *)v917 + v779);
                        uint64_t v986 = 0;
                        LODWORD(v985) = 0;
                        HIDWORD(v985) = v780;
                        uint64_t v987 = 0;
                        uint64_t v988 = 0;
                        llvm::MachineInstr::addOperand(v777, v778, (const llvm::MachineOperand *)&v985);
                        LODWORD(v985) = 1;
                        uint64_t v986 = 0;
                        uint64_t v987 = (v779 + 25);
                        llvm::MachineInstr::addOperand(v777, v778, (const llvm::MachineOperand *)&v985);
                        ++v779;
                      }
                      while (v779 < v918);
                    }
                    int v781 = *(_DWORD *)(*((void *)v777 + 4) + 4);
                    LODWORD(v900) = 0;
                    DWORD1(v900) = v781;
                    long long v901 = 0uLL;
                    *((void *)&v900 + 1) = 0;
                    if (v917 != v919) {
                      free(v917);
                    }
                    uint64_t v782 = 0;
                  }
                  uint64_t v785 = *((void *)v899 + 4);
                  unsigned int v786 = *(_DWORD *)(v785 + 32 * (v774 + 1) + 4);
                  unsigned int v787 = *(_DWORD *)(v785 + 32 * (v774 + 2) + 4);
                  sub_1CC73C210(v786, v4, (uint64_t)&v917);
                  if (v919[0])
                  {
                    if (v918 > 0x40)
                    {
                      if (v917) {
                        MEMORY[0x1D25D9CB0](v917, 0x1000C8000313F17);
                      }
                      __int16 v790 = 0;
                      __int16 v791 = 0;
                      uint64_t v788 = 0;
                    }
                    else
                    {
                      __int16 v790 = ((uint64_t)((void)v917 << -(char)v918) >> -(char)v918) & 0xFF00;
                      __int16 v791 = ((uint64_t)((void)v917 << -(char)v918) >> -(char)v918);
                      uint64_t v788 = 1;
                    }
                    unsigned __int16 v789 = v791 | v790;
                  }
                  else
                  {
                    uint64_t v788 = 0;
                    unsigned __int16 v789 = 0;
                  }
                  sub_1CC73C210(v787, v4, (uint64_t)&v917);
                  if (v919[0])
                  {
                    if (v918 >= 0x41)
                    {
                      if (v917) {
                        MEMORY[0x1D25D9CB0](v917, 0x1000C8000313F17);
                      }
                    }
                    else if (v788)
                    {
                      uint64_t v792 = (uint64_t)((void)v917 << -(char)v918) >> -(char)v918;
                      if (((v789 | (unsigned __int16)v792) & 0xFF00) == 0)
                      {
                        uint64_t v793 = v789;
                        uint64_t v794 = 1;
                        LODWORD(v917) = 1;
                        uint64_t v918 = 0;
                        *(void *)v919 = v793 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v792 << 8);
                        goto LABEL_1430;
                      }
                    }
                  }
                  v917 = &off_1E66AB0B8;
                  LODWORD(v918) = 2;
                  v795 = (llvm::MachineFunction *)sub_1CC739C54(&v923, 0x12u, (unint64_t *)&v917, 1, 0, 0, 0);
                  v797 = v796;
                  uint64_t v918 = 0;
                  *(_OWORD *)v919 = 0uLL;
                  HIDWORD(v917) = v786;
                  LODWORD(v917) = 0;
                  llvm::MachineInstr::addOperand(v796, v795, (const llvm::MachineOperand *)&v917);
                  LODWORD(v917) = 1;
                  uint64_t v918 = 0;
                  *(void *)v919 = 1;
                  llvm::MachineInstr::addOperand(v797, v795, (const llvm::MachineOperand *)&v917);
                  uint64_t v918 = 0;
                  *(_OWORD *)v919 = 0uLL;
                  HIDWORD(v917) = v787;
                  LODWORD(v917) = 0;
                  llvm::MachineInstr::addOperand(v797, v795, (const llvm::MachineOperand *)&v917);
                  LODWORD(v917) = 1;
                  uint64_t v918 = 0;
                  *(void *)v919 = 2;
                  llvm::MachineInstr::addOperand(v797, v795, (const llvm::MachineOperand *)&v917);
                  uint64_t v794 = 0;
                  int v798 = *(_DWORD *)(*((void *)v797 + 4) + 4);
                  LODWORD(v917) = 0;
                  HIDWORD(v917) = v798;
                  *(_OWORD *)v919 = 0uLL;
                  uint64_t v918 = 0;
LABEL_1430:
                  v919[16] = 1;
                  sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 32 * (v774 + 3) + 4), v4, (uint64_t)&v985);
                  if ((_BYTE)v987)
                  {
                    if (v986 > 0x40)
                    {
                      if (v985) {
                        MEMORY[0x1D25D9CB0](v985, 0x1000C8000313F17);
                      }
                      unint64_t v800 = 0;
                      uint64_t v801 = 0;
                    }
                    else
                    {
                      unint64_t v800 = ((uint64_t)((void)v985 << -(char)v986) >> -(char)v986) & 0xFFFFFFFFFFFFFF00;
                      uint64_t v801 = ((uint64_t)((void)v985 << -(char)v986) >> -(char)v986);
                    }
                    unint64_t v799 = v801 | v800;
                  }
                  else
                  {
                    unint64_t v799 = 0;
                  }
                  sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 32 * (v774 + 4) + 4), v4, (uint64_t)&v985);
                  if ((_BYTE)v987)
                  {
                    if (v986 <= 0x40)
                    {
                      uint64_t v802 = v985 & 1;
                      goto LABEL_1439;
                    }
                    if (v985) {
                      MEMORY[0x1D25D9CB0](v985, 0x1000C8000313F17);
                    }
                  }
                  uint64_t v802 = 0;
LABEL_1439:
                  v803 = (llvm::MachineFunction *)sub_1CC739C54(&v923, dword_1CD973AC0[16 * v891+ 8 * v782+ 4 * ((v10 - 2113) < 2)+ 2 * v794+ ((v10 & 0xFFFFFFFD) == 2112)], 0, 0, 0, 0, 0);
                  v805 = v804;
                  LODWORD(v985) = 1;
                  uint64_t v986 = 0;
                  uint64_t v987 = v802;
                  llvm::MachineInstr::addOperand(v804, v803, (const llvm::MachineOperand *)&v985);
                  LODWORD(v985) = 1;
                  uint64_t v986 = 0;
                  uint64_t v987 = 5;
                  llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)&v985);
                  llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)&v902);
                  llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)&v900);
                  llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)&v917);
                  LODWORD(v985) = 1;
                  uint64_t v986 = 0;
                  uint64_t v987 = v799;
                  llvm::MachineInstr::addOperand(v805, v803, (const llvm::MachineOperand *)&v985);
                  llvm::MachineInstr::eraseFromParent(v899);
                  goto LABEL_1440;
                }
                if (**(_WORD **)(v747 + 16) == 318)
                {
                  char v749 = 0;
                  uint64_t v748 = *(void *)(*(void *)(v747 + 32) + 48);
                  unint64_t v747 = v748 & 0xFFFFFFFFFFFFFF00;
                  uint64_t v748 = v748;
                  goto LABEL_1374;
                }
              }
              uint64_t v748 = 0;
              unint64_t v747 = 0;
              goto LABEL_1373;
            }
            if (**(_WORD **)(v90 + 16) == 318)
            {
              char v411 = 0;
              uint64_t v91 = *(void *)(*(void *)(v90 + 32) + 48);
              unint64_t v90 = v91 & 0xFFFFFFFFFFFFFF00;
              uint64_t v91 = v91;
              goto LABEL_1326;
            }
          }
          uint64_t v91 = 0;
          unint64_t v90 = 0;
          goto LABEL_1325;
        }
        if (!*((void *)&v925 + 1))
        {
LABEL_126:
          uint64_t v76 = *(unsigned __int8 **)v18;
          *((void *)&v925 + 1) = v76;
          if (v76) {
            llvm::MetadataTracking::track((uint64_t)&v925 + 8, v76, 2);
          }
          goto LABEL_128;
        }
        int v436 = **((unsigned char **)&v925 + 1);
        if ((v436 - 4) > 0x1E)
        {
          if ((v436 - 3) >= 0xFFFFFFFE) {
            uint64_t v466 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v466 = 0;
          }
          if ((v436 - 3) < 0xFFFFFFFE)
          {
            if (v436 == 3) {
              *(void *)(*((void *)&v925 + 1) + 8) = 0;
            }
            goto LABEL_126;
          }
          unint64_t v438 = v466 + 8;
        }
        else
        {
          if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v925 + 1) + 12)) {
            goto LABEL_126;
          }
          uint64_t v437 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v437 & 4) == 0) {
            goto LABEL_126;
          }
          unint64_t v438 = v437 & 0xFFFFFFFFFFFFFFF8;
          if (!v438) {
            goto LABEL_126;
          }
        }
        v917 = (char *)&v925 + 8;
        sub_1CC5FA668(v438 + 16, &v917);
        int v73 = v899;
        goto LABEL_126;
      }
      if ((v10 - 2148) >= 2) {
        goto LABEL_101;
      }
      if (v5[1646])
      {
        int v210 = 4;
        v209 = v899;
      }
      else
      {
        v209 = v899;
        if (v5[1647])
        {
          int v210 = 5;
        }
        else if (v5[1648])
        {
          int v210 = 6;
        }
        else if (v5[1649])
        {
          int v210 = 7;
        }
        else
        {
          int v210 = 9;
        }
      }
      sub_1CC73C210(*(_DWORD *)(*((void *)v209 + 4) + 36), v4, (uint64_t)&v923);
      if (BYTE8(v924))
      {
        if (v924 > 0x40)
        {
          if (v923) {
            MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
          }
          unint64_t v419 = 0;
          uint64_t v420 = 0;
          uint64_t v417 = 0;
          v209 = v899;
        }
        else
        {
          unint64_t v419 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924) & 0xFFFFFFFFFFFFFF00;
          uint64_t v420 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924);
          uint64_t v417 = 1;
        }
        unint64_t v418 = v420 | v419;
      }
      else
      {
        uint64_t v417 = 0;
        unint64_t v418 = 0;
      }
      sub_1CC73C210(*(_DWORD *)(*((void *)v209 + 4) + 68), v4, (uint64_t)&v923);
      if (BYTE8(v924))
      {
        if (v924 > 0x40)
        {
          if (v923) {
            MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
          }
          unint64_t v423 = 0;
          uint64_t v424 = 0;
          uint64_t v421 = 0;
          v209 = v899;
        }
        else
        {
          unint64_t v423 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924) & 0xFFFFFFFFFFFFFF00;
          uint64_t v424 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924);
          uint64_t v421 = 1;
        }
        uint64_t v422 = v424 | v423;
      }
      else
      {
        uint64_t v421 = 0;
        uint64_t v422 = 0;
      }
      sub_1CC73C210(*(_DWORD *)(*((void *)v209 + 4) + 132), v4, (uint64_t)&v923);
      if (BYTE8(v924))
      {
        uint64_t v425 = v924;
        if (v924 < 0x41)
        {
          BOOL v25 = 0;
          if (!v417 || !v421) {
            goto LABEL_101;
          }
          v898 = v923;
          unsigned int v426 = *(_DWORD *)(*((void *)v899 + 4) + 100);
          sub_1CC73C210(v426, v4, (uint64_t)&v923);
          unsigned int v888 = v426;
          if (BYTE8(v924))
          {
            if (v924 > 0x40)
            {
              if (v923) {
                MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
              }
              unint64_t v439 = 0;
              uint64_t v440 = 0;
              uint64_t v427 = 0;
            }
            else
            {
              unint64_t v439 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924) & 0xFFFFFFFFFFFFFF00;
              uint64_t v440 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924);
              uint64_t v427 = 1;
            }
            unint64_t v428 = v440 | v439;
          }
          else
          {
            uint64_t v427 = 0;
            unint64_t v428 = 0;
          }
          if (v10 != 2148)
          {
            if (v10 != 2149)
            {
              v810 = "Unexpected intrinsic ID";
              goto LABEL_1495;
            }
            if ((v210 - 7) < 3)
            {
              BOOL v441 = v427 == 0;
              uint64_t v442 = 769;
LABEL_777:
              if (v441) {
                ++v442;
              }
              int v895 = 67;
              int v505 = 1287;
              goto LABEL_780;
            }
            if (v210 == 6)
            {
              BOOL v441 = v427 == 0;
              uint64_t v442 = 767;
              goto LABEL_777;
            }
LABEL_1494:
            v810 = "Invalid device type";
LABEL_1495:
            llvm::report_fatal_error((llvm *)v810, (const llvm::Twine *)1);
          }
          if ((v210 - 7) >= 3)
          {
            if (v210 != 6) {
              goto LABEL_1494;
            }
            BOOL v443 = v427 == 0;
            uint64_t v442 = 759;
          }
          else
          {
            BOOL v443 = v427 == 0;
            uint64_t v442 = 761;
          }
          if (v443) {
            ++v442;
          }
          int v895 = 66;
          int v505 = 775;
LABEL_780:
          unint64_t v887 = v428;
          v506 = (llvm::MachineFunction *)v906;
          uint64_t v507 = *(void *)(*((void *)&v906 + 1) + 8) + 48 * v442;
          v917 = (void *)*((void *)&v907 + 1);
          if (*((void *)&v907 + 1)) {
            llvm::MetadataTracking::track((uint64_t)&v917, *((unsigned __int8 **)&v907 + 1), 2);
          }
          uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v506, v507, (unsigned __int8 **)&v917, 0);
          if (!v917) {
            goto LABEL_783;
          }
          int v865 = *(unsigned __int8 *)v917;
          if ((v865 - 4) > 0x1E)
          {
            if ((v865 - 3) >= 0xFFFFFFFE) {
              v884 = v917;
            }
            else {
              v884 = 0;
            }
            if ((v865 - 3) < 0xFFFFFFFE)
            {
              if (v865 == 3) {
                *((void *)v917 + 1) = 0;
              }
              goto LABEL_783;
            }
            unint64_t v867 = (unint64_t)v884 + 8;
          }
          else
          {
            if ((*((unsigned char *)v917 + 1) & 0x7F) != 2 && !*((_DWORD *)v917 + 3)) {
              goto LABEL_783;
            }
            uint64_t v866 = *((void *)v917 + 2);
            if ((v866 & 4) == 0) {
              goto LABEL_783;
            }
            unint64_t v867 = v866 & 0xFFFFFFFFFFFFFFF8;
            if (!v867) {
              goto LABEL_783;
            }
          }
          v923 = &v917;
          sub_1CC5FA668(v867 + 16, &v923);
LABEL_783:
          v509 = (unint64_t *)*((void *)&v908 + 1);
          uint64_t v510 = *(void *)(v908 + 40);
          *((void *)MachineInstr + 3) = v510;
          uint64_t v511 = *(void *)(v510 + 32);
          uint64_t v512 = *((unsigned int *)MachineInstr + 10);
          if (v512)
          {
            uint64_t v656 = *((void *)MachineInstr + 4);
            uint64_t v657 = *(void *)(v511 + 40);
            uint64_t v658 = 32 * v512;
            do
            {
              if (!*(unsigned char *)v656)
              {
                uint64_t v659 = *(unsigned int *)(v656 + 4);
                if ((int)v659 >= 0) {
                  v660 = (uint64_t *)(*(void *)(v657 + 272) + 8 * v659);
                }
                else {
                  v660 = (uint64_t *)(*(void *)(v657 + 24) + 16 * (v659 & 0x7FFFFFFF) + 8);
                }
                uint64_t v661 = *v660;
                if (*v660)
                {
                  uint64_t v662 = *(void *)(v661 + 16);
                  *(void *)(v661 + 16) = v656;
                  *(void *)(v656 + 16) = v662;
                  if (*(unsigned char *)(v656 + 3))
                  {
                    *(void *)(v656 + 24) = v661;
                  }
                  else
                  {
                    *(void *)(v656 + 24) = 0;
                    v660 = (uint64_t *)(v662 + 24);
                  }
                }
                else
                {
                  *(void *)(v656 + 16) = v656;
                  *(void *)(v656 + 24) = 0;
                }
                uint64_t *v660 = v656;
              }
              v656 += 32;
              v658 -= 32;
            }
            while (v658);
          }
          uint64_t v513 = -v425;
          uint64_t v514 = *(void *)(v511 + 728);
          if (v514) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v514 + 24))(v514, MachineInstr);
          }
          unint64_t v515 = *v509 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t MachineInstr = v515 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v509;
          *(void *)(v515 + 8) = MachineInstr;
          unint64_t *v509 = *v509 & 7 | (unint64_t)MachineInstr;
          if ((void)v909) {
            (*(void (**)(void, llvm::MachineInstr *))(*(void *)v909 + 24))(v909, MachineInstr);
          }
          *(void *)&long long v924 = 0;
          DWORD2(v924) = v895;
          LODWORD(v925) = HIDWORD(v418);
          v923 = (void **)__PAIR64__(v418, v505);
          llvm::MachineInstr::addOperand(MachineInstr, v506, (const llvm::MachineOperand *)&v923);
          LODWORD(v923) = 1;
          long long v924 = 0uLL;
          llvm::MachineInstr::addOperand(MachineInstr, v506, (const llvm::MachineOperand *)&v923);
          if (v422 >= 0) {
            uint64_t v516 = v422;
          }
          else {
            uint64_t v516 = v422 + 1;
          }
          *(void *)&long long v924 = 0;
          uint64_t v517 = v516 >> 1;
          DWORD2(v924) = 64;
          LODWORD(v925) = HIDWORD(v517);
          HIDWORD(v923) = v517;
          LODWORD(v923) = 775;
          llvm::MachineInstr::addOperand(MachineInstr, v506, (const llvm::MachineOperand *)&v923);
          if (v427)
          {
            LODWORD(v923) = 1;
            *(void *)&long long v924 = 0;
            *((void *)&v924 + 1) = v887;
          }
          else
          {
            long long v924 = 0uLL;
            HIDWORD(v923) = v888;
            LODWORD(v923) = 0;
            *(void *)&long long v925 = 0;
          }
          llvm::MachineInstr::addOperand(MachineInstr, v506, (const llvm::MachineOperand *)&v923);
          BOOL v25 = 1;
          LODWORD(v923) = 1;
          *(void *)&long long v924 = 0;
          *((void *)&v924 + 1) = (uint64_t)((void)v898 << v513) >> v513;
          llvm::MachineInstr::addOperand(MachineInstr, v506, (const llvm::MachineOperand *)&v923);
          LODWORD(v923) = 1;
          long long v924 = 0uLL;
          llvm::MachineInstr::addOperand(MachineInstr, v506, (const llvm::MachineOperand *)&v923);
          sub_1CC73B5D0(MachineInstr, *(void *)(a1 + 72), *(void **)(a1 + 80));
          llvm::MachineInstr::eraseFromParent(v899);
          goto LABEL_101;
        }
        goto LABEL_1320;
      }
LABEL_593:
      BOOL v25 = 0;
      goto LABEL_101;
    }
    int v92 = v5 + 1328;
    if (v10 > 2621)
    {
      if (v10 != 2622)
      {
        if (v10 != 2663)
        {
          if (v10 != 2668) {
            goto LABEL_101;
          }
          if (!v5[1697])
          {
            int v93 = v899;
            sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 36), v4, (uint64_t)&v923);
            if (BYTE8(v924))
            {
              if (v924 > 0x40)
              {
                if (v923) {
                  MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
                }
                LOBYTE(v429) = 0;
                uint64_t v94 = 0;
                int v93 = v899;
              }
              else
              {
                uint64_t v429 = (uint64_t)((void)v923 << -(char)v924) >> -(char)v924;
                uint64_t v94 = 1;
              }
              char v95 = v429;
            }
            else
            {
              uint64_t v94 = 0;
              char v95 = 0;
            }
            sub_1CC73C210(*(_DWORD *)(*((void *)v93 + 4) + 68), v4, (uint64_t)&v923);
            if (!BYTE8(v924)) {
              goto LABEL_593;
            }
            if (v924 >= 0x41) {
              goto LABEL_1320;
            }
            if (!v94) {
              goto LABEL_593;
            }
            uint64_t v457 = (uint64_t)((void)v923 << -(char)v924) >> -(char)v924;
            if (v457 == 2 && v5[1700]) {
              LODWORD(v457) = 3;
            }
            int v893 = v457;
            if (v5[1646])
            {
              int v458 = 4;
            }
            else if (v5[1647])
            {
              int v458 = 5;
            }
            else if (v5[1648])
            {
              int v458 = 6;
            }
            else if (v5[1649])
            {
              int v458 = 7;
            }
            else
            {
              int v458 = 9;
            }
            if (v5[1692]) {
              int v666 = (*(uint64_t (**)(uint64_t))(*(void *)v896[43] + 648))(v896[43]);
            }
            else {
              int v666 = 1;
            }
            int v890 = v458;
            if (v458 == 5) {
              int v667 = v666;
            }
            else {
              int v667 = 0;
            }
            if (v5[1700]) {
              int v668 = 3;
            }
            else {
              int v668 = v667;
            }
            if (v5[1699])
            {
              unsigned int v670 = 0;
            }
            else
            {
              uint64_t v669 = *v896;
              LODWORD(v923) = 0;
              if (sub_1CBA864D8((int)v5 + 1328, v669, "MemoryReadCacheCtl", (int *)&v923)) {
                unsigned int v670 = v923;
              }
              else {
                unsigned int v670 = v668;
              }
              if (!v5[1699])
              {
                uint64_t v671 = *v896;
                LODWORD(v923) = 0;
                int v672 = sub_1CBA864D8((int)v5 + 1328, v671, "MemoryWriteCacheCtl", (int *)&v923);
                unsigned int v673 = v923;
                if (!v672) {
                  unsigned int v673 = v668;
                }
LABEL_1140:
                if (v673 >= v670) {
                  int v674 = v670;
                }
                else {
                  int v674 = v673;
                }
                BOOL v675 = v5[1732] == 0;
                uint64_t v676 = *v896;
                LODWORD(v923) = 0;
                if (sub_1CBA864D8(v92, v676, "SampleWriteL2Pers", (int *)&v923)) {
                  int v677 = (int)v923;
                }
                else {
                  int v677 = v675;
                }
                if (*(unsigned char *)(a1 + 96)) {
                  unsigned int v678 = 489;
                }
                else {
                  unsigned int v678 = 490;
                }
                int v679 = v890;
                int v680 = v893;
                sub_1CB99E078((uint64_t)v899, v95, 7, v893, 1, v674, 1, v677, v890);
                uint64_t v681 = *((void *)v899 + 3);
                memset(v926, 0, 32);
                long long v925 = 0u;
                long long v924 = 0u;
                uint64_t v682 = *(void *)(v681 + 32);
                v923 = (void **)&unk_1F261CD58;
                *(void *)&long long v924 = v682;
                *(void *)&long long v925 = *(void *)(v682 + 40);
                *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v682 + 16) + 104))(*(void *)(v682 + 16));
                v985 = 0;
                if (!*((void *)&v925 + 1))
                {
                  *((void *)&v925 + 1) = 0;
                  goto LABEL_1151;
                }
                int v696 = **((unsigned char **)&v925 + 1);
                if ((v696 - 4) > 0x1E)
                {
                  if ((v696 - 3) >= 0xFFFFFFFE) {
                    uint64_t v727 = *((void *)&v925 + 1);
                  }
                  else {
                    uint64_t v727 = 0;
                  }
                  if ((v696 - 3) > 0xFFFFFFFD)
                  {
                    unint64_t v728 = v727 + 8;
                    goto LABEL_1305;
                  }
                  if (v696 == 3) {
                    *(void *)(*((void *)&v925 + 1) + 8) = 0;
                  }
                }
                else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 {
                       || *(_DWORD *)(*((void *)&v925 + 1) + 12))
                }
                {
                  uint64_t v816 = *(void *)(*((void *)&v925 + 1) + 16);
                  if ((v816 & 4) != 0)
                  {
                    unint64_t v728 = v816 & 0xFFFFFFFFFFFFFFF8;
                    if (v728)
                    {
LABEL_1305:
                      v917 = (char *)&v925 + 8;
                      sub_1CC5FA668(v728 + 16, &v917);
                      *((void *)&v925 + 1) = v985;
                      int v680 = v893;
                      int v679 = v890;
                      if (v985) {
                        llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
                      }
LABEL_1151:
                      v926[0] = *((void *)v899 + 3);
                      v926[1] = v899;
                      v926[2] = 0;
                      if (v18 == (long long *)((char *)&v925 + 8))
                      {
LABEL_1155:
                        v684 = (llvm::MachineFunction *)sub_1CC739C54(&v923, v678, 0, 0, 0, 0, 0);
                        LODWORD(v917) = 1;
                        uint64_t v918 = 0;
                        *(void *)v919 = 0;
                        llvm::MachineInstr::addOperand(v685, v684, (const llvm::MachineOperand *)&v917);
                        sub_1CB99E078((uint64_t)v899, v95, 6, v680, 1, v674, 1, v677, v679);
                        llvm::MachineInstr::eraseFromParent(v899);
                        v923 = (void **)&unk_1F261CD58;
LABEL_754:
                        uint64_t v335 = *((void *)&v925 + 1);
                        if (!*((void *)&v925 + 1)) {
                          goto LABEL_652;
                        }
                        int v336 = **((unsigned char **)&v925 + 1);
                        if ((v336 - 4) > 0x1E)
                        {
                          if ((v336 - 3) >= 0xFFFFFFFE) {
                            uint64_t v504 = *((void *)&v925 + 1);
                          }
                          else {
                            uint64_t v504 = 0;
                          }
                          if ((v336 - 3) < 0xFFFFFFFE) {
                            goto LABEL_768;
                          }
                          unint64_t v338 = v504 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                            && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                          {
                            goto LABEL_652;
                          }
                          uint64_t v503 = *(void *)(*((void *)&v925 + 1) + 16);
                          if ((v503 & 4) == 0) {
                            goto LABEL_652;
                          }
                          unint64_t v338 = v503 & 0xFFFFFFFFFFFFFFF8;
                          if (!v338) {
                            goto LABEL_652;
                          }
                        }
                        v917 = (char *)&v925 + 8;
LABEL_767:
                        sub_1CC5FA668(v338 + 16, &v917);
                        goto LABEL_652;
                      }
                      if (!*((void *)&v925 + 1))
                      {
LABEL_1153:
                        v683 = *(unsigned __int8 **)v18;
                        *((void *)&v925 + 1) = v683;
                        if (v683) {
                          llvm::MetadataTracking::track((uint64_t)&v925 + 8, v683, 2);
                        }
                        goto LABEL_1155;
                      }
                      int v702 = **((unsigned char **)&v925 + 1);
                      if ((v702 - 4) > 0x1E)
                      {
                        if ((v702 - 3) >= 0xFFFFFFFE) {
                          uint64_t v729 = *((void *)&v925 + 1);
                        }
                        else {
                          uint64_t v729 = 0;
                        }
                        if ((v702 - 3) < 0xFFFFFFFE)
                        {
                          int v680 = v893;
                          int v679 = v890;
                          if (v702 == 3) {
                            *(void *)(*((void *)&v925 + 1) + 8) = 0;
                          }
                          goto LABEL_1153;
                        }
                        unint64_t v704 = v729 + 8;
                      }
                      else
                      {
                        int v680 = v893;
                        int v679 = v890;
                        if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                          && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                        {
                          goto LABEL_1153;
                        }
                        uint64_t v703 = *(void *)(*((void *)&v925 + 1) + 16);
                        if ((v703 & 4) == 0) {
                          goto LABEL_1153;
                        }
                        unint64_t v704 = v703 & 0xFFFFFFFFFFFFFFF8;
                        if (!v704) {
                          goto LABEL_1153;
                        }
                      }
                      v917 = (char *)&v925 + 8;
                      sub_1CC5FA668(v704 + 16, &v917);
                      int v680 = v893;
                      int v679 = v890;
                      goto LABEL_1153;
                    }
                  }
                }
                *((void *)&v925 + 1) = 0;
                int v680 = v893;
                int v679 = v890;
                goto LABEL_1151;
              }
            }
            unsigned int v673 = 0;
            goto LABEL_1140;
          }
          goto LABEL_650;
        }
        if (v5[1646])
        {
          int v247 = 4;
          uint64_t v246 = (uint64_t)v899;
        }
        else
        {
          uint64_t v246 = (uint64_t)v899;
          if (v5[1647])
          {
            int v247 = 5;
          }
          else if (v5[1648])
          {
            int v247 = 6;
          }
          else if (v5[1649])
          {
            int v247 = 7;
          }
          else
          {
            int v247 = 9;
          }
        }
        if (v5[1692]) {
          int v444 = (*(uint64_t (**)(uint64_t))(*(void *)v896[43] + 648))(v896[43]);
        }
        else {
          int v444 = 1;
        }
        if (v247 == 5) {
          int v445 = v444;
        }
        else {
          int v445 = 0;
        }
        if (v5[1700]) {
          int v446 = 3;
        }
        else {
          int v446 = v445;
        }
        if (v5[1699])
        {
          unsigned int v448 = 0;
        }
        else
        {
          uint64_t v447 = *v896;
          LODWORD(v923) = 0;
          if (sub_1CBA864D8((int)v5 + 1328, v447, "MemoryReadCacheCtl", (int *)&v923)) {
            unsigned int v448 = v923;
          }
          else {
            unsigned int v448 = v446;
          }
          if (!v5[1699])
          {
            uint64_t v449 = *v896;
            LODWORD(v923) = 0;
            int v450 = sub_1CBA864D8((int)v5 + 1328, v449, "MemoryWriteCacheCtl", (int *)&v923);
            unsigned int v451 = v923;
            if (!v450) {
              unsigned int v451 = v446;
            }
LABEL_643:
            if (v451 >= v448) {
              int v452 = v448;
            }
            else {
              int v452 = v451;
            }
            BOOL v453 = v5[1732] == 0;
            uint64_t v454 = *v896;
            LODWORD(v923) = 0;
            if (sub_1CBA864D8(v92, v454, "SampleWriteL2Pers", (int *)&v923)) {
              int v455 = (int)v923;
            }
            else {
              int v455 = v453;
            }
            unsigned __int8 v456 = sub_1CB99E078(v246, 4, 3, 2, 2, v452, 1, v455, v247);
            BOOL v25 = 0;
            if (!(sub_1CB99E078(v246, 4, 2, 2, 2, v452, 1, v455, v247) | v456)) {
              goto LABEL_101;
            }
            goto LABEL_650;
          }
        }
        unsigned int v451 = 0;
        goto LABEL_643;
      }
      if (!v5[1697])
      {
        v255 = v899;
        sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 36), v4, (uint64_t)&v923);
        if (BYTE8(v924))
        {
          if (v924 > 0x40)
          {
            if (v923) {
              MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
            }
            LOBYTE(v430) = 0;
            char v431 = 0;
            v255 = v899;
          }
          else
          {
            unint64_t v430 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924) & 0xFFFFFFFFFFFFFF00;
            char v431 = (uint64_t)((void)v923 << -(char)v924) >> -(char)v924;
          }
          char v256 = v431 | v430;
        }
        else
        {
          char v256 = 0;
        }
        char v889 = v256;
        sub_1CC73C210(*(_DWORD *)(*((void *)v255 + 4) + 68), v4, (uint64_t)&v923);
        if (BYTE8(v924))
        {
          if (v924 > 0x40)
          {
            if (v923) {
              MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
            }
            unint64_t v433 = 0;
            uint64_t v434 = 0;
          }
          else
          {
            unint64_t v433 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924) & 0xFFFFFFFFFFFFFF00;
            uint64_t v434 = ((uint64_t)((void)v923 << -(char)v924) >> -(char)v924);
          }
          int v432 = v434 | v433;
          if ((v434 | v433) == 2)
          {
            if (v5[1700]) {
              int v432 = 3;
            }
            else {
              int v432 = 2;
            }
          }
        }
        else
        {
          int v432 = 0;
        }
        if (v5[1646])
        {
          int v467 = 4;
        }
        else if (v5[1647])
        {
          int v467 = 5;
        }
        else if (v5[1648])
        {
          int v467 = 6;
        }
        else if (v5[1649])
        {
          int v467 = 7;
        }
        else
        {
          int v467 = 9;
        }
        int v894 = v467;
        if (v5[1692]) {
          int v468 = (*(uint64_t (**)(uint64_t))(*(void *)v896[43] + 648))(v896[43]);
        }
        else {
          int v468 = 1;
        }
        if (v894 == 5) {
          int v469 = v468;
        }
        else {
          int v469 = 0;
        }
        if (v5[1700]) {
          int v470 = 3;
        }
        else {
          int v470 = v469;
        }
        if (v5[1699])
        {
          unsigned int v472 = 0;
          unsigned int v475 = 0;
        }
        else
        {
          uint64_t v471 = *v896;
          LODWORD(v923) = 0;
          if (sub_1CBA864D8((int)v5 + 1328, v471, "MemoryReadCacheCtl", (int *)&v923)) {
            unsigned int v472 = v923;
          }
          else {
            unsigned int v472 = v470;
          }
          if (v5[1699])
          {
            unsigned int v475 = 0;
          }
          else
          {
            uint64_t v473 = *v896;
            LODWORD(v923) = 0;
            int v474 = sub_1CBA864D8((int)v5 + 1328, v473, "MemoryWriteCacheCtl", (int *)&v923);
            unsigned int v475 = v923;
            if (!v474) {
              unsigned int v475 = v470;
            }
          }
        }
        if (v475 >= v472) {
          int v476 = v472;
        }
        else {
          int v476 = v475;
        }
        if (v5[1700]) {
          int v477 = 3;
        }
        else {
          int v477 = 1;
        }
        uint64_t v478 = *v896;
        LODWORD(v923) = 0;
        if (sub_1CBA864D8((int)v5 + 1328, v478, "SampleReadCacheCtl", (int *)&v923)) {
          unsigned int v479 = v923;
        }
        else {
          unsigned int v479 = v477;
        }
        uint64_t v480 = *v896;
        LODWORD(v923) = 0;
        int v481 = sub_1CBA864D8((int)v5 + 1328, v480, "SampleWriteCacheCtl", (int *)&v923);
        unsigned int v482 = v923;
        if (!v481) {
          unsigned int v482 = v477;
        }
        if (v482 >= v479) {
          int v483 = v479;
        }
        else {
          int v483 = v482;
        }
        BOOL v484 = v5[1732] == 0;
        uint64_t v485 = *v896;
        LODWORD(v923) = 0;
        if (sub_1CBA864D8(v92, v485, "SampleWriteL2Pers", (int *)&v923)) {
          int v486 = (int)v923;
        }
        else {
          int v486 = v484;
        }
        char v487 = v889;
        int v886 = v476;
        int v488 = v476;
        int v489 = v486;
        sub_1CB99E078((uint64_t)v899, v889, 7, v432, 0, v488, v483, v486, v894);
        uint64_t v490 = *((void *)v899 + 3);
        memset(v926, 0, 32);
        long long v925 = 0u;
        long long v924 = 0u;
        uint64_t v491 = *(void *)(v490 + 32);
        v923 = (void **)&unk_1F261CD58;
        *(void *)&long long v924 = v491;
        *(void *)&long long v925 = *(void *)(v491 + 40);
        *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v491 + 16) + 104))(*(void *)(v491 + 16));
        v985 = 0;
        if (!*((void *)&v925 + 1))
        {
          v492 = 0;
          *((void *)&v925 + 1) = 0;
          goto LABEL_743;
        }
        int v545 = **((unsigned char **)&v925 + 1);
        if ((v545 - 4) > 0x1E)
        {
          if ((v545 - 3) >= 0xFFFFFFFE) {
            uint64_t v686 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v686 = 0;
          }
          if ((v545 - 3) > 0xFFFFFFFD)
          {
            unint64_t v687 = v686 + 8;
            goto LABEL_1161;
          }
          if (v545 == 3) {
            *(void *)(*((void *)&v925 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v925 + 1) + 12))
        {
          uint64_t v811 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v811 & 4) != 0)
          {
            unint64_t v687 = v811 & 0xFFFFFFFFFFFFFFF8;
            if (v687)
            {
LABEL_1161:
              v917 = (char *)&v925 + 8;
              sub_1CC5FA668(v687 + 16, &v917);
              v492 = v985;
              *((void *)&v925 + 1) = v985;
              if (v985)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
                v492 = (unsigned __int8 *)*((void *)&v925 + 1);
              }
              goto LABEL_853;
            }
          }
        }
        v492 = 0;
        *((void *)&v925 + 1) = 0;
LABEL_853:
        char v487 = v889;
LABEL_743:
        v926[0] = *((void *)v899 + 3);
        v926[1] = v899;
        v926[2] = 0;
        if (v18 == (long long *)((char *)&v925 + 8)) {
          goto LABEL_876;
        }
        if (v492)
        {
          int v641 = *v492;
          if ((v641 - 4) > 0x1E)
          {
            if ((v641 - 3) >= 0xFFFFFFFE) {
              v697 = v492;
            }
            else {
              v697 = 0;
            }
            if ((v641 - 3) < 0xFFFFFFFE)
            {
              char v487 = v889;
              if (v641 == 3) {
                *((void *)v492 + 1) = 0;
              }
              goto LABEL_745;
            }
            unint64_t v643 = (unint64_t)(v697 + 8);
          }
          else
          {
            char v487 = v889;
            if ((v492[1] & 0x7F) != 2 && !*((_DWORD *)v492 + 3)) {
              goto LABEL_745;
            }
            uint64_t v642 = *((void *)v492 + 2);
            if ((v642 & 4) == 0) {
              goto LABEL_745;
            }
            unint64_t v643 = v642 & 0xFFFFFFFFFFFFFFF8;
            if (!v643) {
              goto LABEL_745;
            }
          }
          v917 = (char *)&v925 + 8;
          sub_1CC5FA668(v643 + 16, &v917);
          char v487 = v889;
        }
LABEL_745:
        v493 = *(unsigned __int8 **)v18;
        *((void *)&v925 + 1) = v493;
        if (!v493)
        {
          v494 = (llvm::MachineFunction *)v924;
          uint64_t v495 = *(void *)(*((void *)&v924 + 1) + 8) + 16176;
          v985 = 0;
          goto LABEL_747;
        }
        llvm::MetadataTracking::track((uint64_t)&v925 + 8, v493, 2);
        v492 = (unsigned __int8 *)*((void *)&v925 + 1);
LABEL_876:
        v494 = (llvm::MachineFunction *)v924;
        uint64_t v495 = *(void *)(*((void *)&v924 + 1) + 8) + 16176;
        v985 = v492;
        if (v492) {
          llvm::MetadataTracking::track((uint64_t)&v985, v492, 2);
        }
        char v487 = v889;
LABEL_747:
        v496 = llvm::MachineFunction::CreateMachineInstr(v494, v495, &v985, 0);
        if (v985)
        {
          int v862 = *v985;
          if ((v862 - 4) > 0x1E)
          {
            if ((v862 - 3) >= 0xFFFFFFFE) {
              v883 = v985;
            }
            else {
              v883 = 0;
            }
            if ((v862 - 3) < 0xFFFFFFFE)
            {
              char v487 = v889;
              if (v862 == 3) {
                *((void *)v985 + 1) = 0;
              }
              goto LABEL_748;
            }
            unint64_t v864 = (unint64_t)(v883 + 8);
          }
          else
          {
            char v487 = v889;
            if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
              goto LABEL_748;
            }
            uint64_t v863 = *((void *)v985 + 2);
            if ((v863 & 4) == 0) {
              goto LABEL_748;
            }
            unint64_t v864 = v863 & 0xFFFFFFFFFFFFFFF8;
            if (!v864) {
              goto LABEL_748;
            }
          }
          v917 = &v985;
          sub_1CC5FA668(v864 + 16, &v917);
          char v487 = v889;
        }
LABEL_748:
        v497 = (unint64_t *)v926[1];
        uint64_t v498 = *(void *)(v926[0] + 40);
        *((void *)v496 + 3) = v498;
        uint64_t v499 = *(void *)(v498 + 32);
        uint64_t v500 = *((unsigned int *)v496 + 10);
        if (v500)
        {
          uint64_t v550 = *((void *)v496 + 4);
          uint64_t v551 = *(void *)(v499 + 40);
          uint64_t v552 = 32 * v500;
          char v487 = v889;
          do
          {
            if (!*(unsigned char *)v550)
            {
              uint64_t v553 = *(unsigned int *)(v550 + 4);
              if ((int)v553 >= 0) {
                v554 = (uint64_t *)(*(void *)(v551 + 272) + 8 * v553);
              }
              else {
                v554 = (uint64_t *)(*(void *)(v551 + 24) + 16 * (v553 & 0x7FFFFFFF) + 8);
              }
              uint64_t v555 = *v554;
              if (*v554)
              {
                uint64_t v556 = *(void *)(v555 + 16);
                *(void *)(v555 + 16) = v550;
                *(void *)(v550 + 16) = v556;
                if (*(unsigned char *)(v550 + 3))
                {
                  *(void *)(v550 + 24) = v555;
                }
                else
                {
                  *(void *)(v550 + 24) = 0;
                  v554 = (uint64_t *)(v556 + 24);
                }
              }
              else
              {
                *(void *)(v550 + 16) = v550;
                *(void *)(v550 + 24) = 0;
              }
              uint64_t *v554 = v550;
            }
            v550 += 32;
            v552 -= 32;
          }
          while (v552);
        }
        uint64_t v501 = *(void *)(v499 + 728);
        if (v501) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v501 + 24))(v501, v496);
        }
        unint64_t v502 = *v497 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v496 = v502 | *(void *)v496 & 7;
        *((void *)v496 + 1) = v497;
        *(void *)(v502 + 8) = v496;
        unint64_t *v497 = *v497 & 7 | (unint64_t)v496;
        if (v926[2]) {
          (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v496);
        }
        LODWORD(v917) = 1;
        uint64_t v918 = 0;
        *(void *)v919 = 0;
        llvm::MachineInstr::addOperand(v496, v494, (const llvm::MachineOperand *)&v917);
        sub_1CB99E078((uint64_t)v899, v487, 6, v432, 0, v886, v483, v489, v894);
        llvm::MachineInstr::eraseFromParent(v899);
        v923 = (void **)&unk_1F261CD58;
        goto LABEL_754;
      }
LABEL_650:
      v254 = v899;
      goto LABEL_651;
    }
    if (v10 != 2421)
    {
      if (v10 != 2525) {
        goto LABEL_101;
      }
      v211 = v899;
      uint64_t v212 = *((void *)v899 + 3);
      memset(v926, 0, 32);
      long long v925 = 0u;
      long long v924 = 0u;
      uint64_t v213 = *(void *)(v212 + 32);
      v923 = (void **)&unk_1F261CD58;
      *(void *)&long long v924 = v213;
      *(void *)&long long v925 = *(void *)(v213 + 40);
      *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v213 + 16) + 104))(*(void *)(v213 + 16));
      v985 = 0;
      if (!*((void *)&v925 + 1)) {
        goto LABEL_303;
      }
      int v463 = **((unsigned char **)&v925 + 1);
      if ((v463 - 4) > 0x1E)
      {
        if ((v463 - 3) >= 0xFFFFFFFE) {
          uint64_t v664 = *((void *)&v925 + 1);
        }
        else {
          uint64_t v664 = 0;
        }
        if ((v463 - 3) > 0xFFFFFFFD)
        {
          unint64_t v465 = v664 + 8;
LABEL_1112:
          v917 = (char *)&v925 + 8;
          sub_1CC5FA668(v465 + 16, &v917);
          v214 = v985;
          *((void *)&v925 + 1) = v985;
          if (v985)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
            v214 = (unsigned __int8 *)*((void *)&v925 + 1);
          }
          v211 = v899;
LABEL_304:
          v926[1] = v211;
          v926[2] = 0;
          v926[0] = *((void *)v211 + 3);
          if (v18 == (long long *)((char *)&v925 + 8)) {
            goto LABEL_308;
          }
          if (!v214)
          {
LABEL_306:
            v214 = *(unsigned __int8 **)v18;
            *((void *)&v925 + 1) = v214;
            if (v214)
            {
              llvm::MetadataTracking::track((uint64_t)&v925 + 8, v214, 2);
              v214 = (unsigned __int8 *)*((void *)&v925 + 1);
            }
LABEL_308:
            v215 = (llvm::MachineFunction *)v924;
            uint64_t v216 = 396624;
            if (!v5[1655]) {
              uint64_t v216 = 396576;
            }
            uint64_t v217 = *(void *)(*((void *)&v924 + 1) + 8) + v216;
            v985 = v214;
            if (v214) {
              llvm::MetadataTracking::track((uint64_t)&v985, v214, 2);
            }
            v218 = llvm::MachineFunction::CreateMachineInstr(v215, v217, &v985, 0);
            if (!v985)
            {
LABEL_313:
              v219 = (unint64_t *)v926[1];
              uint64_t v220 = *(void *)(v926[0] + 40);
              *((void *)v218 + 3) = v220;
              uint64_t v221 = *(void *)(v220 + 32);
              uint64_t v222 = *((unsigned int *)v218 + 10);
              if (v222)
              {
                uint64_t v518 = *((void *)v218 + 4);
                uint64_t v519 = *(void *)(v221 + 40);
                uint64_t v520 = 32 * v222;
                do
                {
                  if (!*(unsigned char *)v518)
                  {
                    uint64_t v521 = *(unsigned int *)(v518 + 4);
                    if ((int)v521 >= 0) {
                      v522 = (uint64_t *)(*(void *)(v519 + 272) + 8 * v521);
                    }
                    else {
                      v522 = (uint64_t *)(*(void *)(v519 + 24) + 16 * (v521 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v523 = *v522;
                    if (*v522)
                    {
                      uint64_t v524 = *(void *)(v523 + 16);
                      *(void *)(v523 + 16) = v518;
                      *(void *)(v518 + 16) = v524;
                      if (*(unsigned char *)(v518 + 3))
                      {
                        *(void *)(v518 + 24) = v523;
                      }
                      else
                      {
                        *(void *)(v518 + 24) = 0;
                        v522 = (uint64_t *)(v524 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v518 + 16) = v518;
                      *(void *)(v518 + 24) = 0;
                    }
                    uint64_t *v522 = v518;
                    v211 = v899;
                  }
                  v518 += 32;
                  v520 -= 32;
                }
                while (v520);
              }
              uint64_t v223 = *(void *)(v221 + 728);
              if (v223) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v223 + 24))(v223, v218);
              }
              unint64_t v224 = *v219 & 0xFFFFFFFFFFFFFFF8;
              *(void *)v218 = v224 | *(void *)v218 & 7;
              *((void *)v218 + 1) = v219;
              *(void *)(v224 + 8) = v218;
              unint64_t *v219 = *v219 & 7 | (unint64_t)v218;
              if (v926[2]) {
                (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v218);
              }
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 2;
              llvm::MachineInstr::addOperand(v218, v215, (const llvm::MachineOperand *)&v917);
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 2;
              llvm::MachineInstr::addOperand(v218, v215, (const llvm::MachineOperand *)&v917);
              v225 = (llvm::MachineFunction *)v924;
              uint64_t v226 = 116592;
              if (!v5[1655]) {
                uint64_t v226 = 116544;
              }
              uint64_t v227 = *(void *)(*((void *)&v924 + 1) + 8) + v226;
              v985 = (unsigned __int8 *)*((void *)&v925 + 1);
              if (*((void *)&v925 + 1)) {
                llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
              }
              v228 = llvm::MachineFunction::CreateMachineInstr(v225, v227, &v985, 0);
              if (!v985)
              {
LABEL_323:
                v229 = (unint64_t *)v926[1];
                uint64_t v230 = *(void *)(v926[0] + 40);
                *((void *)v228 + 3) = v230;
                uint64_t v231 = *(void *)(v230 + 32);
                uint64_t v232 = *((unsigned int *)v228 + 10);
                if (v232)
                {
                  uint64_t v525 = *((void *)v228 + 4);
                  uint64_t v526 = *(void *)(v231 + 40);
                  uint64_t v527 = 32 * v232;
                  do
                  {
                    if (!*(unsigned char *)v525)
                    {
                      uint64_t v528 = *(unsigned int *)(v525 + 4);
                      if ((int)v528 >= 0) {
                        v529 = (uint64_t *)(*(void *)(v526 + 272) + 8 * v528);
                      }
                      else {
                        v529 = (uint64_t *)(*(void *)(v526 + 24) + 16 * (v528 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v530 = *v529;
                      if (*v529)
                      {
                        uint64_t v531 = *(void *)(v530 + 16);
                        *(void *)(v530 + 16) = v525;
                        *(void *)(v525 + 16) = v531;
                        if (*(unsigned char *)(v525 + 3))
                        {
                          *(void *)(v525 + 24) = v530;
                        }
                        else
                        {
                          *(void *)(v525 + 24) = 0;
                          v529 = (uint64_t *)(v531 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v525 + 16) = v525;
                        *(void *)(v525 + 24) = 0;
                      }
                      uint64_t *v529 = v525;
                      v211 = v899;
                    }
                    v525 += 32;
                    v527 -= 32;
                  }
                  while (v527);
                }
                uint64_t v233 = *(void *)(v231 + 728);
                if (v233) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v233 + 24))(v233, v228);
                }
                unint64_t v234 = *v229 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v228 = v234 | *(void *)v228 & 7;
                *((void *)v228 + 1) = v229;
                *(void *)(v234 + 8) = v228;
                unint64_t *v229 = *v229 & 7 | (unint64_t)v228;
                if (v926[2]) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v228);
                }
                v235 = (llvm::MachineFunction *)v924;
                uint64_t v236 = 396624;
                if (!v5[1655]) {
                  uint64_t v236 = 396576;
                }
                uint64_t v237 = *(void *)(*((void *)&v924 + 1) + 8) + v236;
                v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                if (*((void *)&v925 + 1)) {
                  llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                }
                v238 = llvm::MachineFunction::CreateMachineInstr(v235, v237, &v985, 0);
                if (!v985) {
                  goto LABEL_333;
                }
                int v823 = *v985;
                if ((v823 - 4) > 0x1E)
                {
                  if ((v823 - 3) >= 0xFFFFFFFE) {
                    v870 = v985;
                  }
                  else {
                    v870 = 0;
                  }
                  if ((v823 - 3) < 0xFFFFFFFE)
                  {
                    v211 = v899;
                    if (v823 == 3) {
                      *((void *)v985 + 1) = 0;
                    }
                    goto LABEL_333;
                  }
                  unint64_t v825 = (unint64_t)(v870 + 8);
                }
                else
                {
                  v211 = v899;
                  if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                    goto LABEL_333;
                  }
                  uint64_t v824 = *((void *)v985 + 2);
                  if ((v824 & 4) == 0) {
                    goto LABEL_333;
                  }
                  unint64_t v825 = v824 & 0xFFFFFFFFFFFFFFF8;
                  if (!v825) {
                    goto LABEL_333;
                  }
                }
                v917 = &v985;
                sub_1CC5FA668(v825 + 16, &v917);
                v211 = v899;
LABEL_333:
                v239 = (unint64_t *)v926[1];
                uint64_t v240 = *(void *)(v926[0] + 40);
                *((void *)v238 + 3) = v240;
                uint64_t v241 = *(void *)(v240 + 32);
                uint64_t v242 = *((unsigned int *)v238 + 10);
                if (v242)
                {
                  uint64_t v532 = *((void *)v238 + 4);
                  uint64_t v533 = *(void *)(v241 + 40);
                  uint64_t v534 = 32 * v242;
                  do
                  {
                    if (!*(unsigned char *)v532)
                    {
                      uint64_t v535 = *(unsigned int *)(v532 + 4);
                      if ((int)v535 >= 0) {
                        v536 = (uint64_t *)(*(void *)(v533 + 272) + 8 * v535);
                      }
                      else {
                        v536 = (uint64_t *)(*(void *)(v533 + 24) + 16 * (v535 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v537 = *v536;
                      if (*v536)
                      {
                        uint64_t v538 = *(void *)(v537 + 16);
                        *(void *)(v537 + 16) = v532;
                        *(void *)(v532 + 16) = v538;
                        if (*(unsigned char *)(v532 + 3))
                        {
                          *(void *)(v532 + 24) = v537;
                        }
                        else
                        {
                          *(void *)(v532 + 24) = 0;
                          v536 = (uint64_t *)(v538 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v532 + 16) = v532;
                        *(void *)(v532 + 24) = 0;
                      }
                      uint64_t *v536 = v532;
                      v211 = v899;
                    }
                    v532 += 32;
                    v534 -= 32;
                  }
                  while (v534);
                }
                uint64_t v243 = *(void *)(v241 + 728);
                if (v243) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v243 + 24))(v243, v238);
                }
                unint64_t v244 = *v239 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v238 = v244 | *(void *)v238 & 7;
                *((void *)v238 + 1) = v239;
                *(void *)(v244 + 8) = v238;
                unint64_t *v239 = *v239 & 7 | (unint64_t)v238;
                if (v926[2]) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v238);
                }
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 2;
                llvm::MachineInstr::addOperand(v238, v235, (const llvm::MachineOperand *)&v917);
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 1;
                llvm::MachineInstr::addOperand(v238, v235, (const llvm::MachineOperand *)&v917);
                v245 = v211;
                goto LABEL_434;
              }
              int v820 = *v985;
              if ((v820 - 4) > 0x1E)
              {
                if ((v820 - 3) >= 0xFFFFFFFE) {
                  v869 = v985;
                }
                else {
                  v869 = 0;
                }
                if ((v820 - 3) < 0xFFFFFFFE)
                {
                  v211 = v899;
                  if (v820 == 3) {
                    *((void *)v985 + 1) = 0;
                  }
                  goto LABEL_323;
                }
                unint64_t v822 = (unint64_t)(v869 + 8);
              }
              else
              {
                v211 = v899;
                if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                  goto LABEL_323;
                }
                uint64_t v821 = *((void *)v985 + 2);
                if ((v821 & 4) == 0) {
                  goto LABEL_323;
                }
                unint64_t v822 = v821 & 0xFFFFFFFFFFFFFFF8;
                if (!v822) {
                  goto LABEL_323;
                }
              }
              v917 = &v985;
              sub_1CC5FA668(v822 + 16, &v917);
              v211 = v899;
              goto LABEL_323;
            }
            int v817 = *v985;
            if ((v817 - 4) > 0x1E)
            {
              if ((v817 - 3) >= 0xFFFFFFFE) {
                v868 = v985;
              }
              else {
                v868 = 0;
              }
              if ((v817 - 3) < 0xFFFFFFFE)
              {
                v211 = v899;
                if (v817 == 3) {
                  *((void *)v985 + 1) = 0;
                }
                goto LABEL_313;
              }
              unint64_t v819 = (unint64_t)(v868 + 8);
            }
            else
            {
              v211 = v899;
              if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                goto LABEL_313;
              }
              uint64_t v818 = *((void *)v985 + 2);
              if ((v818 & 4) == 0) {
                goto LABEL_313;
              }
              unint64_t v819 = v818 & 0xFFFFFFFFFFFFFFF8;
              if (!v819) {
                goto LABEL_313;
              }
            }
            v917 = &v985;
            sub_1CC5FA668(v819 + 16, &v917);
            v211 = v899;
            goto LABEL_313;
          }
          int v539 = *v214;
          if ((v539 - 4) > 0x1E)
          {
            if ((v539 - 3) >= 0xFFFFFFFE) {
              v665 = v214;
            }
            else {
              v665 = 0;
            }
            if ((v539 - 3) < 0xFFFFFFFE)
            {
              v211 = v899;
              if (v539 == 3) {
                *((void *)v214 + 1) = 0;
              }
              goto LABEL_306;
            }
            unint64_t v541 = (unint64_t)(v665 + 8);
          }
          else
          {
            if ((v214[1] & 0x7F) != 2 && !*((_DWORD *)v214 + 3)) {
              goto LABEL_306;
            }
            uint64_t v540 = *((void *)v214 + 2);
            if ((v540 & 4) == 0) {
              goto LABEL_306;
            }
            unint64_t v541 = v540 & 0xFFFFFFFFFFFFFFF8;
            if (!v541) {
              goto LABEL_306;
            }
          }
          v917 = (char *)&v925 + 8;
          sub_1CC5FA668(v541 + 16, &v917);
          v211 = v899;
          goto LABEL_306;
        }
        v211 = v899;
        if (v463 == 3) {
          *(void *)(*((void *)&v925 + 1) + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v925 + 1) + 12))
      {
        uint64_t v464 = *(void *)(*((void *)&v925 + 1) + 16);
        if ((v464 & 4) != 0)
        {
          unint64_t v465 = v464 & 0xFFFFFFFFFFFFFFF8;
          if (v465) {
            goto LABEL_1112;
          }
        }
      }
LABEL_303:
      v214 = 0;
      *((void *)&v925 + 1) = 0;
      goto LABEL_304;
    }
    sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 36), v4, (uint64_t)&v923);
    if (!BYTE8(v924)) {
      goto LABEL_593;
    }
    char v248 = v924;
    if (v924 >= 0x41) {
      goto LABEL_1320;
    }
    v249 = v923;
    sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 68), v4, (uint64_t)&v923);
    if (!BYTE8(v924)) {
      goto LABEL_593;
    }
    uint64_t v250 = v924;
    if (v924 >= 0x41) {
      goto LABEL_1320;
    }
    v251 = v923;
    sub_1CC73C210(*(_DWORD *)(*((void *)v899 + 4) + 100), v4, (uint64_t)&v923);
    if (!BYTE8(v924)) {
      goto LABEL_593;
    }
    if (v924 >= 0x41)
    {
LABEL_1320:
      if (v923) {
        MEMORY[0x1D25D9CB0](v923, 0x1000C8000313F17);
      }
      goto LABEL_593;
    }
    uint64_t v252 = (uint64_t)((void)v249 << -v248) >> -v248;
    uint64_t v253 = (uint64_t)((void)v923 << -(uint64_t)v924) >> -(uint64_t)v924;
    if (v253 == 2 && v5[1700]) {
      LODWORD(v253) = 3;
    }
    if ((v252 & 0xFFFFFFFFFFFFFFFDLL) == 0)
    {
      v254 = v899;
LABEL_651:
      llvm::MachineInstr::eraseFromParent(v254);
      goto LABEL_652;
    }
    uint64_t v542 = -v250;
    uint64_t v543 = (void)v251 << -(char)v250;
    if (v5[1646])
    {
      int v544 = 4;
    }
    else if (v5[1647])
    {
      int v544 = 5;
    }
    else if (v5[1648])
    {
      int v544 = 6;
    }
    else if (v5[1649])
    {
      int v544 = 7;
    }
    else
    {
      int v544 = 9;
    }
    unint64_t v705 = v543 >> v542;
    if (v5[1692]) {
      int v706 = (*(uint64_t (**)(uint64_t))(*(void *)v896[43] + 648))(v896[43]);
    }
    else {
      int v706 = 1;
    }
    if (v544 == 5) {
      int v707 = v706;
    }
    else {
      int v707 = 0;
    }
    if (v5[1700]) {
      int v708 = 3;
    }
    else {
      int v708 = v707;
    }
    if (v5[1699])
    {
      unsigned int v710 = 0;
    }
    else
    {
      uint64_t v709 = *v896;
      LODWORD(v923) = 0;
      if (sub_1CBA864D8((int)v5 + 1328, v709, "MemoryReadCacheCtl", (int *)&v923)) {
        unsigned int v710 = v923;
      }
      else {
        unsigned int v710 = v708;
      }
      if (!v5[1699])
      {
        uint64_t v711 = *v896;
        LODWORD(v923) = 0;
        int v712 = sub_1CBA864D8((int)v5 + 1328, v711, "MemoryWriteCacheCtl", (int *)&v923);
        unsigned int v713 = v923;
        if (!v712) {
          unsigned int v713 = v708;
        }
        goto LABEL_1254;
      }
    }
    unsigned int v713 = 0;
LABEL_1254:
    if (v713 >= v710) {
      int v714 = v710;
    }
    else {
      int v714 = v713;
    }
    if (v5[1700]) {
      int v715 = 3;
    }
    else {
      int v715 = 1;
    }
    uint64_t v716 = *v896;
    LODWORD(v923) = 0;
    if (sub_1CBA864D8((int)v5 + 1328, v716, "SampleReadCacheCtl", (int *)&v923)) {
      unsigned int v717 = v923;
    }
    else {
      unsigned int v717 = v715;
    }
    uint64_t v718 = *v896;
    LODWORD(v923) = 0;
    int v719 = sub_1CBA864D8((int)v5 + 1328, v718, "SampleWriteCacheCtl", (int *)&v923);
    unsigned int v720 = v923;
    if (!v719) {
      unsigned int v720 = v715;
    }
    if (v720 < v717) {
      unsigned int v717 = v720;
    }
    BOOL v721 = v5[1732] == 0;
    uint64_t v722 = *v896;
    LODWORD(v923) = 0;
    if (sub_1CBA864D8(v92, v722, "SampleWriteL2Pers", (int *)&v923)) {
      int v723 = (int)v923;
    }
    else {
      int v723 = v721;
    }
    unsigned int v724 = (v705 < 6) & (0x34u >> v705);
    if (v705 - 3 >= 3) {
      int v725 = 2;
    }
    else {
      int v725 = 6;
    }
    if (v705 - 3 <= 2)
    {
      if (v724) {
        int v726 = 7;
      }
      else {
        int v726 = 3;
      }
      sub_1CB99E078((uint64_t)v899, v252, v726, v253, 2, v714, v717, v723, v544);
    }
    if (v724) {
      sub_1CB99E078((uint64_t)v899, v252, v725, v253, 2, v714, v717, v723, v544);
    }
    goto LABEL_650;
  }
  if ((v10 - 1682) >= 0x8C)
  {
    switch(v10)
    {
      case 1271:
        uint64_t v96 = v899;
        if (!v5[1725]) {
          goto LABEL_593;
        }
        uint64_t v97 = *((void *)v899 + 3);
        memset(v926, 0, 32);
        long long v925 = 0u;
        long long v924 = 0u;
        uint64_t v98 = *(void *)(v97 + 32);
        v923 = (void **)&unk_1F261CD58;
        *(void *)&long long v924 = v98;
        *(void *)&long long v925 = *(void *)(v98 + 40);
        *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v98 + 16) + 104))(*(void *)(v98 + 16));
        v985 = 0;
        if (!*((void *)&v925 + 1))
        {
          uint64_t v99 = 0;
          *((void *)&v925 + 1) = 0;
          goto LABEL_158;
        }
        int v548 = **((unsigned char **)&v925 + 1);
        if ((v548 - 4) > 0x1E)
        {
          if ((v548 - 3) >= 0xFFFFFFFE) {
            uint64_t v692 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v692 = 0;
          }
          if ((v548 - 3) > 0xFFFFFFFD)
          {
            unint64_t v693 = v692 + 8;
            goto LABEL_1182;
          }
          if (v548 == 3) {
            *(void *)(*((void *)&v925 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v925 + 1) + 12))
        {
          uint64_t v814 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v814 & 4) != 0)
          {
            unint64_t v693 = v814 & 0xFFFFFFFFFFFFFFF8;
            if (v693)
            {
LABEL_1182:
              v917 = (char *)&v925 + 8;
              sub_1CC5FA668(v693 + 16, &v917);
              uint64_t v99 = v985;
              *((void *)&v925 + 1) = v985;
              if (v985)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
                uint64_t v99 = (unsigned __int8 *)*((void *)&v925 + 1);
                uint64_t v96 = v899;
LABEL_158:
                v926[1] = v96;
                v926[2] = 0;
                v926[0] = *((void *)v96 + 3);
                if (v18 == (long long *)((char *)&v925 + 8)) {
                  goto LABEL_888;
                }
                if (v99)
                {
                  int v650 = *v99;
                  if ((v650 - 4) > 0x1E)
                  {
                    if ((v650 - 3) >= 0xFFFFFFFE) {
                      v700 = v99;
                    }
                    else {
                      v700 = 0;
                    }
                    if ((v650 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v96 = v899;
                      if (v650 == 3) {
                        *((void *)v99 + 1) = 0;
                      }
                      goto LABEL_160;
                    }
                    unint64_t v652 = (unint64_t)(v700 + 8);
                  }
                  else
                  {
                    uint64_t v96 = v899;
                    if ((v99[1] & 0x7F) != 2 && !*((_DWORD *)v99 + 3)) {
                      goto LABEL_160;
                    }
                    uint64_t v651 = *((void *)v99 + 2);
                    if ((v651 & 4) == 0) {
                      goto LABEL_160;
                    }
                    unint64_t v652 = v651 & 0xFFFFFFFFFFFFFFF8;
                    if (!v652) {
                      goto LABEL_160;
                    }
                  }
                  v917 = (char *)&v925 + 8;
                  sub_1CC5FA668(v652 + 16, &v917);
                  uint64_t v96 = v899;
                }
LABEL_160:
                unint64_t v100 = *(unsigned __int8 **)v18;
                *((void *)&v925 + 1) = v100;
                if (!v100)
                {
                  int v101 = (llvm::MachineFunction *)v924;
                  uint64_t v102 = *(void *)(*((void *)&v924 + 1) + 8) + 480;
                  v985 = 0;
                  goto LABEL_162;
                }
                llvm::MetadataTracking::track((uint64_t)&v925 + 8, v100, 2);
                uint64_t v99 = (unsigned __int8 *)*((void *)&v925 + 1);
LABEL_888:
                int v101 = (llvm::MachineFunction *)v924;
                uint64_t v102 = *(void *)(*((void *)&v924 + 1) + 8) + 480;
                v985 = v99;
                if (v99) {
                  llvm::MetadataTracking::track((uint64_t)&v985, v99, 2);
                }
                uint64_t v96 = v899;
LABEL_162:
                unint64_t v103 = llvm::MachineFunction::CreateMachineInstr(v101, v102, &v985, 0);
                if (!v985) {
                  goto LABEL_163;
                }
                int v826 = *v985;
                if ((v826 - 4) > 0x1E)
                {
                  if ((v826 - 3) >= 0xFFFFFFFE) {
                    v871 = v985;
                  }
                  else {
                    v871 = 0;
                  }
                  if ((v826 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v828 = (unint64_t)(v871 + 8);
LABEL_1634:
                    v917 = &v985;
                    sub_1CC5FA668(v828 + 16, &v917);
                    uint64_t v96 = v899;
                    goto LABEL_163;
                  }
                  uint64_t v96 = v899;
                  if (v826 == 3) {
                    *((void *)v985 + 1) = 0;
                  }
                }
                else
                {
                  uint64_t v96 = v899;
                  if ((v985[1] & 0x7F) == 2 || *((_DWORD *)v985 + 3))
                  {
                    uint64_t v827 = *((void *)v985 + 2);
                    if ((v827 & 4) != 0)
                    {
                      unint64_t v828 = v827 & 0xFFFFFFFFFFFFFFF8;
                      if (v828) {
                        goto LABEL_1634;
                      }
                    }
                  }
                }
LABEL_163:
                uint64_t v104 = (unint64_t *)v926[1];
                uint64_t v105 = *(void *)(v926[0] + 40);
                *((void *)v103 + 3) = v105;
                uint64_t v106 = *(void *)(v105 + 32);
                uint64_t v107 = *((unsigned int *)v103 + 10);
                if (v107)
                {
                  uint64_t v599 = *((void *)v103 + 4);
                  uint64_t v600 = *(void *)(v106 + 40);
                  uint64_t v601 = 32 * v107;
                  uint64_t v96 = v899;
                  do
                  {
                    if (!*(unsigned char *)v599)
                    {
                      uint64_t v602 = *(unsigned int *)(v599 + 4);
                      if ((int)v602 >= 0) {
                        v603 = (uint64_t *)(*(void *)(v600 + 272) + 8 * v602);
                      }
                      else {
                        v603 = (uint64_t *)(*(void *)(v600 + 24) + 16 * (v602 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v604 = *v603;
                      if (*v603)
                      {
                        uint64_t v605 = *(void *)(v604 + 16);
                        *(void *)(v604 + 16) = v599;
                        *(void *)(v599 + 16) = v605;
                        if (*(unsigned char *)(v599 + 3))
                        {
                          *(void *)(v599 + 24) = v604;
                        }
                        else
                        {
                          *(void *)(v599 + 24) = 0;
                          v603 = (uint64_t *)(v605 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v599 + 16) = v599;
                        *(void *)(v599 + 24) = 0;
                      }
                      uint64_t *v603 = v599;
                    }
                    v599 += 32;
                    v601 -= 32;
                  }
                  while (v601);
                }
                uint64_t v108 = *(void *)(v106 + 728);
                if (v108) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v108 + 24))(v108, v103);
                }
                unint64_t v109 = *v104 & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v103 = v109 | *(void *)v103 & 7;
                *((void *)v103 + 1) = v104;
                *(void *)(v109 + 8) = v103;
                *uint64_t v104 = *v104 & 7 | (unint64_t)v103;
                if (v926[2]) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v103);
                }
                int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                *(void *)(*(void *)(v4 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AB080;
                uint64_t v111 = *(void *)(v4 + 8);
                if (v111) {
                  (*(void (**)(uint64_t))(*(void *)v111 + 24))(v111);
                }
                uint64_t v918 = 0;
                *(_OWORD *)v919 = 0uLL;
                HIDWORD(v917) = IncompleteVirtualRegister;
                LODWORD(v917) = 0x1000000;
                llvm::MachineInstr::addOperand(v103, v101, (const llvm::MachineOperand *)&v917);
                v112 = (llvm::MachineFunction *)v924;
                uint64_t v113 = *(void *)(*((void *)&v924 + 1) + 8) + 912;
                v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                if (*((void *)&v925 + 1)) {
                  llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                }
                long long v114 = llvm::MachineFunction::CreateMachineInstr(v112, v113, &v985, 0);
                v897 = v114;
                if (!v985)
                {
LABEL_173:
                  long long v115 = (unint64_t *)v926[1];
                  uint64_t v116 = *(void *)(v926[0] + 40);
                  *((void *)v114 + 3) = v116;
                  uint64_t v117 = *(void *)(v116 + 32);
                  uint64_t v118 = *((unsigned int *)v114 + 10);
                  if (v118)
                  {
                    uint64_t v606 = *((void *)v114 + 4);
                    uint64_t v607 = *(void *)(v117 + 40);
                    uint64_t v608 = 32 * v118;
                    uint64_t v96 = v899;
                    do
                    {
                      if (!*(unsigned char *)v606)
                      {
                        uint64_t v609 = *(unsigned int *)(v606 + 4);
                        if ((int)v609 >= 0) {
                          v610 = (uint64_t *)(*(void *)(v607 + 272) + 8 * v609);
                        }
                        else {
                          v610 = (uint64_t *)(*(void *)(v607 + 24) + 16 * (v609 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v611 = *v610;
                        if (*v610)
                        {
                          uint64_t v612 = *(void *)(v611 + 16);
                          *(void *)(v611 + 16) = v606;
                          *(void *)(v606 + 16) = v612;
                          if (*(unsigned char *)(v606 + 3))
                          {
                            *(void *)(v606 + 24) = v611;
                          }
                          else
                          {
                            *(void *)(v606 + 24) = 0;
                            v610 = (uint64_t *)(v612 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v606 + 16) = v606;
                          *(void *)(v606 + 24) = 0;
                        }
                        uint64_t *v610 = v606;
                      }
                      v606 += 32;
                      v608 -= 32;
                    }
                    while (v608);
                  }
                  uint64_t v119 = *(void *)(v117 + 728);
                  if (v119) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v119 + 24))(v119, v114);
                  }
                  unint64_t v120 = *v115 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)long long v114 = v120 | *(void *)v114 & 7;
                  *((void *)v114 + 1) = v115;
                  *(void *)(v120 + 8) = v114;
                  *long long v115 = *v115 & 7 | (unint64_t)v114;
                  if (v926[2]) {
                    (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v114);
                  }
                  int v121 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                  *(void *)(*(void *)(v4 + 24) + 16 * (v121 & 0x7FFFFFFF)) = &off_1E66AB080;
                  uint64_t v122 = *(void *)(v4 + 8);
                  if (v122) {
                    (*(void (**)(uint64_t))(*(void *)v122 + 24))(v122);
                  }
                  uint64_t v918 = 0;
                  *(_OWORD *)v919 = 0uLL;
                  HIDWORD(v917) = v121;
                  LODWORD(v917) = 0x1000000;
                  llvm::MachineInstr::addOperand(v114, v112, (const llvm::MachineOperand *)&v917);
                  int v123 = *(_DWORD *)(*((void *)v96 + 4) + 612);
                  uint64_t v918 = 0;
                  *(_OWORD *)v919 = 0uLL;
                  HIDWORD(v917) = v123;
                  LODWORD(v917) = 6656;
                  llvm::MachineInstr::addOperand(v114, v112, (const llvm::MachineOperand *)&v917);
                  uint64_t v124 = (llvm::MachineFunction *)v924;
                  uint64_t v125 = *(void *)(*((void *)&v924 + 1) + 8) + 912;
                  v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                  if (*((void *)&v925 + 1)) {
                    llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                  }
                  int v126 = llvm::MachineFunction::CreateMachineInstr(v124, v125, &v985, 0);
                  v892 = v126;
                  if (!v985)
                  {
LABEL_183:
                    v127 = (unint64_t *)v926[1];
                    uint64_t v128 = *(void *)(v926[0] + 40);
                    *((void *)v126 + 3) = v128;
                    uint64_t v129 = *(void *)(v128 + 32);
                    uint64_t v130 = *((unsigned int *)v126 + 10);
                    if (v130)
                    {
                      uint64_t v613 = *((void *)v126 + 4);
                      uint64_t v614 = *(void *)(v129 + 40);
                      uint64_t v615 = 32 * v130;
                      uint64_t v96 = v899;
                      do
                      {
                        if (!*(unsigned char *)v613)
                        {
                          uint64_t v616 = *(unsigned int *)(v613 + 4);
                          if ((int)v616 >= 0) {
                            v617 = (uint64_t *)(*(void *)(v614 + 272) + 8 * v616);
                          }
                          else {
                            v617 = (uint64_t *)(*(void *)(v614 + 24) + 16 * (v616 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v618 = *v617;
                          if (*v617)
                          {
                            uint64_t v619 = *(void *)(v618 + 16);
                            *(void *)(v618 + 16) = v613;
                            *(void *)(v613 + 16) = v619;
                            if (*(unsigned char *)(v613 + 3))
                            {
                              *(void *)(v613 + 24) = v618;
                            }
                            else
                            {
                              *(void *)(v613 + 24) = 0;
                              v617 = (uint64_t *)(v619 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v613 + 16) = v613;
                            *(void *)(v613 + 24) = 0;
                          }
                          uint64_t *v617 = v613;
                        }
                        v613 += 32;
                        v615 -= 32;
                      }
                      while (v615);
                    }
                    uint64_t v131 = *(void *)(v129 + 728);
                    if (v131) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v131 + 24))(v131, v126);
                    }
                    unint64_t v132 = *v127 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)int v126 = v132 | *(void *)v126 & 7;
                    *((void *)v126 + 1) = v127;
                    *(void *)(v132 + 8) = v126;
                    unint64_t *v127 = *v127 & 7 | (unint64_t)v126;
                    if (v926[2]) {
                      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v126);
                    }
                    int v133 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                    *(void *)(*(void *)(v4 + 24) + 16 * (v133 & 0x7FFFFFFF)) = &off_1E66AB080;
                    uint64_t v134 = *(void *)(v4 + 8);
                    if (v134) {
                      (*(void (**)(uint64_t))(*(void *)v134 + 24))(v134);
                    }
                    uint64_t v918 = 0;
                    *(_OWORD *)v919 = 0uLL;
                    HIDWORD(v917) = v133;
                    LODWORD(v917) = 0x1000000;
                    llvm::MachineInstr::addOperand(v126, v124, (const llvm::MachineOperand *)&v917);
                    int v135 = *(_DWORD *)(*((void *)v96 + 4) + 612);
                    uint64_t v918 = 0;
                    *(_OWORD *)v919 = 0uLL;
                    HIDWORD(v917) = v135;
                    LODWORD(v917) = 6400;
                    llvm::MachineInstr::addOperand(v126, v124, (const llvm::MachineOperand *)&v917);
                    long long v136 = (llvm::MachineFunction *)v924;
                    uint64_t v137 = *(void *)(*((void *)&v924 + 1) + 8) + 864;
                    v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                    if (*((void *)&v925 + 1)) {
                      llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                    }
                    long long v138 = llvm::MachineFunction::CreateMachineInstr(v136, v137, &v985, 0);
                    if (!v985)
                    {
LABEL_193:
                      long long v139 = (unint64_t *)v926[1];
                      uint64_t v140 = *(void *)(v926[0] + 40);
                      *((void *)v138 + 3) = v140;
                      uint64_t v141 = *(void *)(v140 + 32);
                      uint64_t v142 = *((unsigned int *)v138 + 10);
                      if (v142)
                      {
                        uint64_t v620 = *((void *)v138 + 4);
                        uint64_t v621 = *(void *)(v141 + 40);
                        uint64_t v622 = 32 * v142;
                        do
                        {
                          if (!*(unsigned char *)v620)
                          {
                            uint64_t v623 = *(unsigned int *)(v620 + 4);
                            if ((int)v623 >= 0) {
                              v624 = (uint64_t *)(*(void *)(v621 + 272) + 8 * v623);
                            }
                            else {
                              v624 = (uint64_t *)(*(void *)(v621 + 24) + 16 * (v623 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v625 = *v624;
                            if (*v624)
                            {
                              uint64_t v626 = *(void *)(v625 + 16);
                              *(void *)(v625 + 16) = v620;
                              *(void *)(v620 + 16) = v626;
                              if (*(unsigned char *)(v620 + 3))
                              {
                                *(void *)(v620 + 24) = v625;
                              }
                              else
                              {
                                *(void *)(v620 + 24) = 0;
                                v624 = (uint64_t *)(v626 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v620 + 16) = v620;
                              *(void *)(v620 + 24) = 0;
                            }
                            uint64_t *v624 = v620;
                          }
                          v620 += 32;
                          v622 -= 32;
                        }
                        while (v622);
                      }
                      uint64_t v143 = *(void *)(v141 + 728);
                      if (v143) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v143 + 24))(v143, v138);
                      }
                      unint64_t v144 = *v139 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)long long v138 = v144 | *(void *)v138 & 7;
                      *((void *)v138 + 1) = v139;
                      *(void *)(v144 + 8) = v138;
                      *long long v139 = *v139 & 7 | (unint64_t)v138;
                      if (v926[2]) {
                        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v138);
                      }
                      int v145 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                      *(void *)(*(void *)(v4 + 24) + 16 * (v145 & 0x7FFFFFFF)) = &off_1E66AB2E8;
                      uint64_t v146 = *(void *)(v4 + 8);
                      if (v146) {
                        (*(void (**)(uint64_t))(*(void *)v146 + 24))(v146);
                      }
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v145;
                      LODWORD(v917) = 0x1000000;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v147 = *(_DWORD *)(*((void *)v899 + 4) + 324);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v147;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 25;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v148 = *(_DWORD *)(*((void *)v899 + 4) + 356);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v148;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 26;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v149 = *(_DWORD *)(*((void *)v899 + 4) + 388);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v149;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 27;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v150 = *(_DWORD *)(*((void *)v899 + 4) + 420);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v150;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 28;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v151 = *(_DWORD *)(*((void *)v899 + 4) + 452);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v151;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 29;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v152 = *(_DWORD *)(*((void *)v899 + 4) + 484);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v152;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 30;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v153 = *(_DWORD *)(*((void *)v899 + 4) + 516);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v153;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 31;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v154 = *(_DWORD *)(*((void *)v899 + 4) + 548);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v154;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 32;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v155 = *(_DWORD *)(*((void *)v899 + 4) + 580);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v155;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 33;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v156 = *(_DWORD *)(*((void *)v892 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v156;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 34;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v157 = *(_DWORD *)(*((void *)v897 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v157;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 35;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v158 = *(_DWORD *)(*((void *)v103 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v158;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 36;
                      llvm::MachineInstr::addOperand(v138, v136, (const llvm::MachineOperand *)&v917);
                      int v159 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                      *(void *)(*(void *)(v4 + 24) + 16 * (v159 & 0x7FFFFFFF)) = &off_1E66AB278;
                      uint64_t v160 = *(void *)(v4 + 8);
                      if (v160) {
                        (*(void (**)(uint64_t))(*(void *)v160 + 24))(v160);
                      }
                      v161 = (llvm::MachineFunction *)v924;
                      uint64_t v162 = *(void *)(*((void *)&v924 + 1) + 8) + 38160;
                      v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                      if (*((void *)&v925 + 1)) {
                        llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                      }
                      v163 = llvm::MachineFunction::CreateMachineInstr(v161, v162, &v985, 0);
                      if (!v985) {
                        goto LABEL_205;
                      }
                      int v838 = *v985;
                      if ((v838 - 4) > 0x1E)
                      {
                        if ((v838 - 3) >= 0xFFFFFFFE) {
                          v875 = v985;
                        }
                        else {
                          v875 = 0;
                        }
                        if ((v838 - 3) < 0xFFFFFFFE)
                        {
                          if (v838 == 3) {
                            *((void *)v985 + 1) = 0;
                          }
                          goto LABEL_205;
                        }
                        unint64_t v840 = (unint64_t)(v875 + 8);
                      }
                      else
                      {
                        if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                          goto LABEL_205;
                        }
                        uint64_t v839 = *((void *)v985 + 2);
                        if ((v839 & 4) == 0) {
                          goto LABEL_205;
                        }
                        unint64_t v840 = v839 & 0xFFFFFFFFFFFFFFF8;
                        if (!v840) {
                          goto LABEL_205;
                        }
                      }
                      v917 = &v985;
                      sub_1CC5FA668(v840 + 16, &v917);
LABEL_205:
                      v164 = (unint64_t *)v926[1];
                      uint64_t v165 = *(void *)(v926[0] + 40);
                      *((void *)v163 + 3) = v165;
                      uint64_t v166 = *(void *)(v165 + 32);
                      uint64_t v167 = *((unsigned int *)v163 + 10);
                      if (v167)
                      {
                        uint64_t v627 = *((void *)v163 + 4);
                        uint64_t v628 = *(void *)(v166 + 40);
                        uint64_t v629 = 32 * v167;
                        do
                        {
                          if (!*(unsigned char *)v627)
                          {
                            uint64_t v630 = *(unsigned int *)(v627 + 4);
                            if ((int)v630 >= 0) {
                              v631 = (uint64_t *)(*(void *)(v628 + 272) + 8 * v630);
                            }
                            else {
                              v631 = (uint64_t *)(*(void *)(v628 + 24) + 16 * (v630 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v632 = *v631;
                            if (*v631)
                            {
                              uint64_t v633 = *(void *)(v632 + 16);
                              *(void *)(v632 + 16) = v627;
                              *(void *)(v627 + 16) = v633;
                              if (*(unsigned char *)(v627 + 3))
                              {
                                *(void *)(v627 + 24) = v632;
                              }
                              else
                              {
                                *(void *)(v627 + 24) = 0;
                                v631 = (uint64_t *)(v633 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v627 + 16) = v627;
                              *(void *)(v627 + 24) = 0;
                            }
                            uint64_t *v631 = v627;
                          }
                          v627 += 32;
                          v629 -= 32;
                        }
                        while (v629);
                      }
                      uint64_t v168 = *(void *)(v166 + 728);
                      if (v168) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v168 + 24))(v168, v163);
                      }
                      unint64_t v169 = *v164 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)v163 = v169 | *(void *)v163 & 7;
                      *((void *)v163 + 1) = v164;
                      *(void *)(v169 + 8) = v163;
                      unint64_t *v164 = *v164 & 7 | (unint64_t)v163;
                      if (v926[2]) {
                        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v163);
                      }
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v159;
                      LODWORD(v917) = 0x1000000;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      int v170 = *(_DWORD *)(*((void *)v899 + 4) + 260);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v170;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      int v171 = *(_DWORD *)(*((void *)v899 + 4) + 292);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v171;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      int v172 = *(_DWORD *)(*((void *)v138 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v172;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v163, v161, (const llvm::MachineOperand *)&v917);
                      v173 = v163;
                      v174 = v899;
                      sub_1CC73B5D0(v173, *(void *)(a1 + 72), *(void **)(a1 + 80));
                      uint64_t v175 = 0;
                      v917 = v919;
                      *(_OWORD *)v919 = xmmword_1CD971A84;
                      *(_OWORD *)&v919[12] = *(long long *)((char *)&xmmword_1CD971A84 + 12);
                      uint64_t v918 = 0x700000007;
                      v176 = v919;
                      while (1)
                      {
                        uint64_t v177 = *(unsigned int *)(*((void *)v174 + 4) + 32 * v175 + 4);
                        v178 = (uint64_t *)((v177 & 0x80000000) != 0
                                         ? *(void *)(v4 + 24) + 16 * (v177 & 0x7FFFFFFF) + 8
                                         : *(void *)(v4 + 272) + 8 * v177);
                        uint64_t v179 = *v178;
                        if (v179) {
                          break;
                        }
LABEL_276:
                        v176 += 4;
                        ++v175;
                        if (v176 == &v919[28])
                        {
                          llvm::MachineInstr::eraseFromParent(v174);
                          if (v917 != v919) {
                            free(v917);
                          }
                          v923 = (void **)&unk_1F261CD58;
                          uint64_t v335 = *((void *)&v925 + 1);
                          if (!*((void *)&v925 + 1)) {
                            goto LABEL_652;
                          }
                          int v336 = **((unsigned char **)&v925 + 1);
                          if ((v336 - 4) > 0x1E)
                          {
                            if ((v336 - 3) >= 0xFFFFFFFE) {
                              uint64_t v461 = *((void *)&v925 + 1);
                            }
                            else {
                              uint64_t v461 = 0;
                            }
                            if ((v336 - 3) >= 0xFFFFFFFE)
                            {
                              unint64_t v338 = v461 + 8;
                              goto LABEL_684;
                            }
                            goto LABEL_768;
                          }
                          if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                            && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                          {
                            goto LABEL_652;
                          }
                          uint64_t v412 = *(void *)(*((void *)&v925 + 1) + 16);
                          if ((v412 & 4) == 0) {
                            goto LABEL_652;
                          }
                          unint64_t v338 = v412 & 0xFFFFFFFFFFFFFFF8;
                          if (!v338) {
                            goto LABEL_652;
                          }
                          goto LABEL_684;
                        }
                      }
                      while ((*(unsigned char *)(v179 + 3) & 1) != 0)
                      {
                        uint64_t v179 = *(void *)(v179 + 24);
                        if (!v179) {
                          goto LABEL_276;
                        }
                      }
                      v180 = (llvm::MachineFunction *)v924;
                      uint64_t v181 = *(void *)(*((void *)&v924 + 1) + 8);
                      *(void *)&long long v902 = *((void *)&v925 + 1);
                      if (*((void *)&v925 + 1)) {
                        llvm::MetadataTracking::track((uint64_t)&v902, *((unsigned __int8 **)&v925 + 1), 2);
                      }
                      v182 = llvm::MachineFunction::CreateMachineInstr(v180, v181 + 912, (unsigned __int8 **)&v902, 0);
                      if ((void)v902)
                      {
                        int v205 = *(unsigned __int8 *)v902;
                        if ((v205 - 4) > 0x1E)
                        {
                          if ((v205 - 3) >= 0xFFFFFFFE) {
                            uint64_t v208 = v902;
                          }
                          else {
                            uint64_t v208 = 0;
                          }
                          if ((v205 - 3) < 0xFFFFFFFE)
                          {
                            if (v205 == 3) {
                              *(void *)(v902 + 8) = 0;
                            }
                            goto LABEL_220;
                          }
                          unint64_t v207 = v208 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(v902 + 1) & 0x7F) != 2 && !*(_DWORD *)(v902 + 12)) {
                            goto LABEL_220;
                          }
                          uint64_t v206 = *(void *)(v902 + 16);
                          if ((v206 & 4) == 0) {
                            goto LABEL_220;
                          }
                          unint64_t v207 = v206 & 0xFFFFFFFFFFFFFFF8;
                          if (!v207) {
                            goto LABEL_220;
                          }
                        }
                        v985 = (unsigned __int8 *)&v902;
                        sub_1CC5FA668(v207 + 16, &v985);
                      }
LABEL_220:
                      v183 = (unint64_t *)v926[1];
                      uint64_t v184 = *(void *)(v926[0] + 40);
                      *((void *)v182 + 3) = v184;
                      uint64_t v185 = *(void *)(v184 + 32);
                      uint64_t v186 = *((unsigned int *)v182 + 10);
                      if (v186)
                      {
                        uint64_t v196 = *((void *)v182 + 4);
                        uint64_t v197 = *(void *)(v185 + 40);
                        uint64_t v198 = 32 * v186;
                        do
                        {
                          if (!*(unsigned char *)v196)
                          {
                            uint64_t v199 = *(unsigned int *)(v196 + 4);
                            if ((int)v199 >= 0) {
                              v200 = (uint64_t *)(*(void *)(v197 + 272) + 8 * v199);
                            }
                            else {
                              v200 = (uint64_t *)(*(void *)(v197 + 24) + 16 * (v199 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v201 = *v200;
                            if (*v200)
                            {
                              uint64_t v202 = *(void *)(v201 + 16);
                              *(void *)(v201 + 16) = v196;
                              *(void *)(v196 + 16) = v202;
                              if (*(unsigned char *)(v196 + 3))
                              {
                                *(void *)(v196 + 24) = v201;
                              }
                              else
                              {
                                *(void *)(v196 + 24) = 0;
                                v200 = (uint64_t *)(v202 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v196 + 16) = v196;
                              *(void *)(v196 + 24) = 0;
                            }
                            uint64_t *v200 = v196;
                          }
                          v196 += 32;
                          v198 -= 32;
                        }
                        while (v198);
                      }
                      uint64_t v187 = *(void *)(v185 + 728);
                      if (v187) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v187 + 24))(v187, v182);
                      }
                      unint64_t v188 = *v183 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)v182 = v188 | *(void *)v182 & 7;
                      *((void *)v182 + 1) = v183;
                      *(void *)(v188 + 8) = v182;
                      unint64_t *v183 = *v183 & 7 | (unint64_t)v182;
                      if (v926[2]) {
                        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v182);
                      }
                      uint64_t v986 = 0;
                      uint64_t v987 = 0;
                      uint64_t v988 = 0;
                      LODWORD(v985) = 0x1000000;
                      HIDWORD(v985) = v177;
                      llvm::MachineInstr::addOperand(v182, v180, (const llvm::MachineOperand *)&v985);
                      __int16 v189 = *(_DWORD *)v176;
                      uint64_t v986 = 0;
                      uint64_t v987 = 0;
                      uint64_t v988 = 0;
                      LODWORD(v985) = (v189 & 0xFFF) << 8;
                      HIDWORD(v985) = v159;
                      llvm::MachineInstr::addOperand(v182, v180, (const llvm::MachineOperand *)&v985);
                      unint64_t v190 = v177 & 0x7FFFFFFF;
                      unint64_t v191 = *(void *)(*(void *)(v4 + 24) + 16 * v190);
                      v174 = v899;
                      if (v191 < 8 || (v191 & 4) != 0)
                      {
                        if ((v177 & 0x80000000) != 0 && v190 < *(unsigned int *)(v4 + 432)) {
                          v192 = *(unsigned __int8 **)(*(void *)(v4 + 424) + 8 * v190);
                        }
                        else {
                          v192 = 0;
                        }
                        v985 = v192;
                        int v194 = sub_1CB8F1DC4((unint64_t *)&v985);
                        if (v193 == 1) {
                        if (v194 > 111)
                        }
                        {
                          if (v194 <= 191)
                          {
                            if (v194 == 112)
                            {
                              v195 = (__int16 ***)&off_1E66AB198;
                            }
                            else if (v194 == 128)
                            {
                              v195 = (__int16 ***)&off_1E66AB1D0;
                            }
                            else
                            {
                              v195 = (__int16 ***)&off_1E66AB208;
                            }
                          }
                          else if (v194 > 287)
                          {
                            if (v194 == 288) {
                              v195 = (__int16 ***)&off_1E66AB2B0;
                            }
                            else {
                              v195 = (__int16 ***)&off_1E66AB2E8;
                            }
                          }
                          else if (v194 == 192)
                          {
                            v195 = (__int16 ***)&off_1E66AB240;
                          }
                          else
                          {
                            v195 = (__int16 ***)&off_1E66AB278;
                          }
                        }
                        else if (v194 <= 47)
                        {
                          v195 = &off_1E66AB048;
                          if (v194 != 1 && v194 != 16) {
                            v195 = &off_1E66AB080;
                          }
                        }
                        else if (v194 > 79)
                        {
                          if (v194 == 80) {
                            v195 = (__int16 ***)&off_1E66AB160;
                          }
                          else {
                            v195 = (__int16 ***)&off_1E66AB0F0;
                          }
                        }
                        else if (v194 == 48)
                        {
                          v195 = (__int16 ***)&off_1E66AB128;
                        }
                        else
                        {
                          v195 = (__int16 ***)&off_1E66AB358;
                        }
                        v203 = (void *)(*(void *)(v4 + 24) + 16 * v190);
                        unint64_t v204 = *v203 & 0xFFFFFFFFFFFFFFF8;
                        if ((*v203 & 4) != 0)
                        {
                          if (!v204
                            || ((*(void *)(*(void *)(v204 + 24)
                                           + (((unint64_t)*((unsigned __int16 *)*v195 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v195 + 12)) & 1) != 0)
                          {
                            void *v203 = v195;
                          }
                        }
                        else
                        {
                          sub_1CC38D61C((void *)v4, v177, v204, (uint64_t)v195, 0);
                        }
                      }
                      goto LABEL_276;
                    }
                    int v835 = *v985;
                    if ((v835 - 4) > 0x1E)
                    {
                      if ((v835 - 3) >= 0xFFFFFFFE) {
                        v874 = v985;
                      }
                      else {
                        v874 = 0;
                      }
                      if ((v835 - 3) < 0xFFFFFFFE)
                      {
                        if (v835 == 3) {
                          *((void *)v985 + 1) = 0;
                        }
                        goto LABEL_193;
                      }
                      unint64_t v837 = (unint64_t)(v874 + 8);
                    }
                    else
                    {
                      if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                        goto LABEL_193;
                      }
                      uint64_t v836 = *((void *)v985 + 2);
                      if ((v836 & 4) == 0) {
                        goto LABEL_193;
                      }
                      unint64_t v837 = v836 & 0xFFFFFFFFFFFFFFF8;
                      if (!v837) {
                        goto LABEL_193;
                      }
                    }
                    v917 = &v985;
                    sub_1CC5FA668(v837 + 16, &v917);
                    goto LABEL_193;
                  }
                  int v832 = *v985;
                  if ((v832 - 4) > 0x1E)
                  {
                    if ((v832 - 3) >= 0xFFFFFFFE) {
                      v873 = v985;
                    }
                    else {
                      v873 = 0;
                    }
                    if ((v832 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v96 = v899;
                      if (v832 == 3) {
                        *((void *)v985 + 1) = 0;
                      }
                      goto LABEL_183;
                    }
                    unint64_t v834 = (unint64_t)(v873 + 8);
                  }
                  else
                  {
                    uint64_t v96 = v899;
                    if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                      goto LABEL_183;
                    }
                    uint64_t v833 = *((void *)v985 + 2);
                    if ((v833 & 4) == 0) {
                      goto LABEL_183;
                    }
                    unint64_t v834 = v833 & 0xFFFFFFFFFFFFFFF8;
                    if (!v834) {
                      goto LABEL_183;
                    }
                  }
                  v917 = &v985;
                  sub_1CC5FA668(v834 + 16, &v917);
                  uint64_t v96 = v899;
                  goto LABEL_183;
                }
                int v829 = *v985;
                if ((v829 - 4) > 0x1E)
                {
                  if ((v829 - 3) >= 0xFFFFFFFE) {
                    v872 = v985;
                  }
                  else {
                    v872 = 0;
                  }
                  if ((v829 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v96 = v899;
                    if (v829 == 3) {
                      *((void *)v985 + 1) = 0;
                    }
                    goto LABEL_173;
                  }
                  unint64_t v831 = (unint64_t)(v872 + 8);
                }
                else
                {
                  uint64_t v96 = v899;
                  if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                    goto LABEL_173;
                  }
                  uint64_t v830 = *((void *)v985 + 2);
                  if ((v830 & 4) == 0) {
                    goto LABEL_173;
                  }
                  unint64_t v831 = v830 & 0xFFFFFFFFFFFFFFF8;
                  if (!v831) {
                    goto LABEL_173;
                  }
                }
                v917 = &v985;
                sub_1CC5FA668(v831 + 16, &v917);
                uint64_t v96 = v899;
                goto LABEL_173;
              }
LABEL_868:
              uint64_t v96 = v899;
              goto LABEL_158;
            }
          }
        }
        uint64_t v99 = 0;
        *((void *)&v925 + 1) = 0;
        goto LABEL_868;
      case 1272:
        v359 = v899;
        if (!v5[1725]) {
          goto LABEL_593;
        }
        uint64_t v360 = *((void *)v899 + 3);
        memset(v926, 0, 32);
        long long v925 = 0u;
        long long v924 = 0u;
        uint64_t v361 = *(void *)(v360 + 32);
        v923 = (void **)&unk_1F261CD58;
        *(void *)&long long v924 = v361;
        *(void *)&long long v925 = *(void *)(v361 + 40);
        *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v361 + 16) + 104))(*(void *)(v361 + 16));
        v985 = 0;
        if (!*((void *)&v925 + 1))
        {
          *((void *)&v925 + 1) = 0;
          goto LABEL_444;
        }
        int v549 = **((unsigned char **)&v925 + 1);
        if ((v549 - 4) > 0x1E)
        {
          if ((v549 - 3) >= 0xFFFFFFFE) {
            uint64_t v694 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v694 = 0;
          }
          if ((v549 - 3) > 0xFFFFFFFD)
          {
            unint64_t v695 = v694 + 8;
            goto LABEL_1189;
          }
          if (v549 == 3) {
            *(void *)(*((void *)&v925 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v925 + 1) + 12))
        {
          uint64_t v815 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v815 & 4) != 0)
          {
            unint64_t v695 = v815 & 0xFFFFFFFFFFFFFFF8;
            if (v695)
            {
LABEL_1189:
              v917 = (char *)&v925 + 8;
              sub_1CC5FA668(v695 + 16, &v917);
              *((void *)&v925 + 1) = v985;
              v359 = v899;
              if (v985) {
                llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
              }
LABEL_444:
              v926[1] = v359;
              v926[2] = 0;
              v926[0] = *((void *)v359 + 3);
              if (v18 == (long long *)((char *)&v925 + 8))
              {
LABEL_448:
                int v363 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                *(void *)(*(void *)(v4 + 24) + 16 * (v363 & 0x7FFFFFFF)) = &off_1E66AB278;
                uint64_t v364 = *(void *)(v4 + 8);
                if (v364) {
                  (*(void (**)(uint64_t))(*(void *)v364 + 24))(v364);
                }
                v365 = (llvm::MachineFunction *)v924;
                uint64_t v366 = *(void *)(*((void *)&v924 + 1) + 8) + 38208;
                v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                if (*((void *)&v925 + 1)) {
                  llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                }
                v367 = llvm::MachineFunction::CreateMachineInstr(v365, v366, &v985, 0);
                if (!v985) {
                  goto LABEL_453;
                }
                int v859 = *v985;
                if ((v859 - 4) > 0x1E)
                {
                  if ((v859 - 3) >= 0xFFFFFFFE) {
                    v882 = v985;
                  }
                  else {
                    v882 = 0;
                  }
                  if ((v859 - 3) < 0xFFFFFFFE)
                  {
                    if (v859 == 3) {
                      *((void *)v985 + 1) = 0;
                    }
                    goto LABEL_453;
                  }
                  unint64_t v861 = (unint64_t)(v882 + 8);
                }
                else
                {
                  if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                    goto LABEL_453;
                  }
                  uint64_t v860 = *((void *)v985 + 2);
                  if ((v860 & 4) == 0) {
                    goto LABEL_453;
                  }
                  unint64_t v861 = v860 & 0xFFFFFFFFFFFFFFF8;
                  if (!v861) {
                    goto LABEL_453;
                  }
                }
                v917 = &v985;
                sub_1CC5FA668(v861 + 16, &v917);
LABEL_453:
                v368 = (unint64_t *)v926[1];
                uint64_t v369 = *(void *)(v926[0] + 40);
                *((void *)v367 + 3) = v369;
                uint64_t v370 = *(void *)(v369 + 32);
                uint64_t v371 = *((unsigned int *)v367 + 10);
                if (v371)
                {
                  uint64_t v634 = *((void *)v367 + 4);
                  uint64_t v635 = *(void *)(v370 + 40);
                  uint64_t v636 = 32 * v371;
                  do
                  {
                    if (!*(unsigned char *)v634)
                    {
                      uint64_t v637 = *(unsigned int *)(v634 + 4);
                      if ((int)v637 >= 0) {
                        v638 = (uint64_t *)(*(void *)(v635 + 272) + 8 * v637);
                      }
                      else {
                        v638 = (uint64_t *)(*(void *)(v635 + 24) + 16 * (v637 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v639 = *v638;
                      if (*v638)
                      {
                        uint64_t v640 = *(void *)(v639 + 16);
                        *(void *)(v639 + 16) = v634;
                        *(void *)(v634 + 16) = v640;
                        if (*(unsigned char *)(v634 + 3))
                        {
                          *(void *)(v634 + 24) = v639;
                        }
                        else
                        {
                          *(void *)(v634 + 24) = 0;
                          v638 = (uint64_t *)(v640 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v634 + 16) = v634;
                        *(void *)(v634 + 24) = 0;
                      }
                      uint64_t *v638 = v634;
                    }
                    v634 += 32;
                    v636 -= 32;
                  }
                  while (v636);
                }
                uint64_t v372 = *(void *)(v370 + 728);
                if (v372) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v372 + 24))(v372, v367);
                }
                unint64_t v373 = *v368 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v367 = v373 | *(void *)v367 & 7;
                *((void *)v367 + 1) = v368;
                *(void *)(v373 + 8) = v367;
                unint64_t *v368 = *v368 & 7 | (unint64_t)v367;
                if (v926[2]) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v367);
                }
                uint64_t v918 = 0;
                *(_OWORD *)v919 = 0uLL;
                HIDWORD(v917) = v363;
                LODWORD(v917) = 0x1000000;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                int v374 = *(_DWORD *)(*((void *)v899 + 4) + 260);
                uint64_t v918 = 0;
                *(_OWORD *)v919 = 0uLL;
                HIDWORD(v917) = v374;
                LODWORD(v917) = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                int v375 = *(_DWORD *)(*((void *)v899 + 4) + 292);
                uint64_t v918 = 0;
                *(_OWORD *)v919 = 0uLL;
                HIDWORD(v917) = v375;
                LODWORD(v917) = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                int v376 = *(_DWORD *)(*((void *)v899 + 4) + 324);
                uint64_t v918 = 0;
                *(_OWORD *)v919 = 0uLL;
                HIDWORD(v917) = v376;
                LODWORD(v917) = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                LODWORD(v917) = 1;
                uint64_t v918 = 0;
                *(void *)v919 = 0;
                llvm::MachineInstr::addOperand(v367, v365, (const llvm::MachineOperand *)&v917);
                sub_1CC73B5D0(v367, *(void *)(a1 + 72), *(void **)(a1 + 80));
                uint64_t v377 = 0;
                v917 = v919;
                *(_OWORD *)v919 = xmmword_1CD971A84;
                *(_OWORD *)&v919[12] = *(long long *)((char *)&xmmword_1CD971A84 + 12);
                uint64_t v918 = 0x700000007;
                v378 = v919;
                while (1)
                {
                  uint64_t v379 = *(unsigned int *)(*((void *)v899 + 4) + 32 * v377 + 4);
                  v380 = (uint64_t *)((v379 & 0x80000000) != 0
                                   ? *(void *)(v4 + 24) + 16 * (v379 & 0x7FFFFFFF) + 8
                                   : *(void *)(v4 + 272) + 8 * v379);
                  uint64_t v381 = *v380;
                  if (v381) {
                    break;
                  }
LABEL_524:
                  v378 += 4;
                  ++v377;
                  if (v378 == &v919[28])
                  {
                    llvm::MachineInstr::eraseFromParent(v899);
                    if (v917 != v919) {
                      free(v917);
                    }
                    v923 = (void **)&unk_1F261CD58;
                    uint64_t v335 = *((void *)&v925 + 1);
                    if (!*((void *)&v925 + 1)) {
                      goto LABEL_652;
                    }
                    int v336 = **((unsigned char **)&v925 + 1);
                    if ((v336 - 4) <= 0x1E)
                    {
                      if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2
                        || *(_DWORD *)(*((void *)&v925 + 1) + 12))
                      {
                        uint64_t v413 = *(void *)(*((void *)&v925 + 1) + 16);
                        if ((v413 & 4) != 0)
                        {
                          unint64_t v338 = v413 & 0xFFFFFFFFFFFFFFF8;
                          if (v338) {
                            goto LABEL_684;
                          }
                        }
                      }
LABEL_652:
                      BOOL v25 = 1;
                      goto LABEL_101;
                    }
                    if ((v336 - 3) >= 0xFFFFFFFE) {
                      uint64_t v462 = *((void *)&v925 + 1);
                    }
                    else {
                      uint64_t v462 = 0;
                    }
                    if ((v336 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v338 = v462 + 8;
                      goto LABEL_684;
                    }
LABEL_768:
                    if (v336 == 3) {
                      *(void *)(v335 + 8) = 0;
                    }
                    goto LABEL_652;
                  }
                }
                while ((*(unsigned char *)(v381 + 3) & 1) != 0)
                {
                  uint64_t v381 = *(void *)(v381 + 24);
                  if (!v381) {
                    goto LABEL_524;
                  }
                }
                v382 = (llvm::MachineFunction *)v924;
                uint64_t v383 = *(void *)(*((void *)&v924 + 1) + 8);
                *(void *)&long long v902 = *((void *)&v925 + 1);
                if (*((void *)&v925 + 1)) {
                  llvm::MetadataTracking::track((uint64_t)&v902, *((unsigned __int8 **)&v925 + 1), 2);
                }
                v384 = llvm::MachineFunction::CreateMachineInstr(v382, v383 + 912, (unsigned __int8 **)&v902, 0);
                if ((void)v902)
                {
                  int v407 = *(unsigned __int8 *)v902;
                  if ((v407 - 4) > 0x1E)
                  {
                    if ((v407 - 3) >= 0xFFFFFFFE) {
                      uint64_t v410 = v902;
                    }
                    else {
                      uint64_t v410 = 0;
                    }
                    if ((v407 - 3) < 0xFFFFFFFE)
                    {
                      if (v407 == 3) {
                        *(void *)(v902 + 8) = 0;
                      }
                      goto LABEL_468;
                    }
                    unint64_t v409 = v410 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(v902 + 1) & 0x7F) != 2 && !*(_DWORD *)(v902 + 12)) {
                      goto LABEL_468;
                    }
                    uint64_t v408 = *(void *)(v902 + 16);
                    if ((v408 & 4) == 0) {
                      goto LABEL_468;
                    }
                    unint64_t v409 = v408 & 0xFFFFFFFFFFFFFFF8;
                    if (!v409) {
                      goto LABEL_468;
                    }
                  }
                  v985 = (unsigned __int8 *)&v902;
                  sub_1CC5FA668(v409 + 16, &v985);
                }
LABEL_468:
                v385 = (unint64_t *)v926[1];
                uint64_t v386 = *(void *)(v926[0] + 40);
                *((void *)v384 + 3) = v386;
                uint64_t v387 = *(void *)(v386 + 32);
                uint64_t v388 = *((unsigned int *)v384 + 10);
                if (v388)
                {
                  uint64_t v398 = *((void *)v384 + 4);
                  uint64_t v399 = *(void *)(v387 + 40);
                  uint64_t v400 = 32 * v388;
                  do
                  {
                    if (!*(unsigned char *)v398)
                    {
                      uint64_t v401 = *(unsigned int *)(v398 + 4);
                      if ((int)v401 >= 0) {
                        v402 = (uint64_t *)(*(void *)(v399 + 272) + 8 * v401);
                      }
                      else {
                        v402 = (uint64_t *)(*(void *)(v399 + 24) + 16 * (v401 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v403 = *v402;
                      if (*v402)
                      {
                        uint64_t v404 = *(void *)(v403 + 16);
                        *(void *)(v403 + 16) = v398;
                        *(void *)(v398 + 16) = v404;
                        if (*(unsigned char *)(v398 + 3))
                        {
                          *(void *)(v398 + 24) = v403;
                        }
                        else
                        {
                          *(void *)(v398 + 24) = 0;
                          v402 = (uint64_t *)(v404 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v398 + 16) = v398;
                        *(void *)(v398 + 24) = 0;
                      }
                      uint64_t *v402 = v398;
                    }
                    v398 += 32;
                    v400 -= 32;
                  }
                  while (v400);
                }
                uint64_t v389 = *(void *)(v387 + 728);
                if (v389) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v389 + 24))(v389, v384);
                }
                unint64_t v390 = *v385 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v384 = v390 | *(void *)v384 & 7;
                *((void *)v384 + 1) = v385;
                *(void *)(v390 + 8) = v384;
                unint64_t *v385 = *v385 & 7 | (unint64_t)v384;
                if (v926[2]) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v384);
                }
                uint64_t v986 = 0;
                uint64_t v987 = 0;
                uint64_t v988 = 0;
                LODWORD(v985) = 0x1000000;
                HIDWORD(v985) = v379;
                llvm::MachineInstr::addOperand(v384, v382, (const llvm::MachineOperand *)&v985);
                __int16 v391 = *(_DWORD *)v378;
                uint64_t v986 = 0;
                uint64_t v987 = 0;
                uint64_t v988 = 0;
                LODWORD(v985) = (v391 & 0xFFF) << 8;
                HIDWORD(v985) = v363;
                llvm::MachineInstr::addOperand(v384, v382, (const llvm::MachineOperand *)&v985);
                unint64_t v392 = v379 & 0x7FFFFFFF;
                unint64_t v393 = *(void *)(*(void *)(v4 + 24) + 16 * v392);
                if (v393 < 8 || (v393 & 4) != 0)
                {
                  if ((v379 & 0x80000000) != 0 && v392 < *(unsigned int *)(v4 + 432)) {
                    v394 = *(unsigned __int8 **)(*(void *)(v4 + 424) + 8 * v392);
                  }
                  else {
                    v394 = 0;
                  }
                  v985 = v394;
                  int v396 = sub_1CB8F1DC4((unint64_t *)&v985);
                  if (v395 == 1) {
                  if (v396 > 111)
                  }
                  {
                    if (v396 <= 191)
                    {
                      if (v396 == 112)
                      {
                        v397 = (__int16 ***)&off_1E66AB198;
                      }
                      else if (v396 == 128)
                      {
                        v397 = (__int16 ***)&off_1E66AB1D0;
                      }
                      else
                      {
                        v397 = (__int16 ***)&off_1E66AB208;
                      }
                    }
                    else if (v396 > 287)
                    {
                      if (v396 == 288) {
                        v397 = (__int16 ***)&off_1E66AB2B0;
                      }
                      else {
                        v397 = (__int16 ***)&off_1E66AB2E8;
                      }
                    }
                    else if (v396 == 192)
                    {
                      v397 = (__int16 ***)&off_1E66AB240;
                    }
                    else
                    {
                      v397 = (__int16 ***)&off_1E66AB278;
                    }
                  }
                  else if (v396 <= 47)
                  {
                    v397 = &off_1E66AB048;
                    if (v396 != 1 && v396 != 16) {
                      v397 = &off_1E66AB080;
                    }
                  }
                  else if (v396 > 79)
                  {
                    if (v396 == 80) {
                      v397 = (__int16 ***)&off_1E66AB160;
                    }
                    else {
                      v397 = (__int16 ***)&off_1E66AB0F0;
                    }
                  }
                  else if (v396 == 48)
                  {
                    v397 = (__int16 ***)&off_1E66AB128;
                  }
                  else
                  {
                    v397 = (__int16 ***)&off_1E66AB358;
                  }
                  v405 = (void *)(*(void *)(v4 + 24) + 16 * v392);
                  unint64_t v406 = *v405 & 0xFFFFFFFFFFFFFFF8;
                  if ((*v405 & 4) != 0)
                  {
                    if (!v406
                      || ((*(void *)(*(void *)(v406 + 24)
                                     + (((unint64_t)*((unsigned __int16 *)*v397 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v397 + 12)) & 1) != 0)
                    {
                      void *v405 = v397;
                    }
                  }
                  else
                  {
                    sub_1CC38D61C((void *)v4, v379, v406, (uint64_t)v397, 0);
                  }
                }
                goto LABEL_524;
              }
              if (!*((void *)&v925 + 1))
              {
LABEL_446:
                v362 = *(unsigned __int8 **)v18;
                *((void *)&v925 + 1) = v362;
                if (v362) {
                  llvm::MetadataTracking::track((uint64_t)&v925 + 8, v362, 2);
                }
                goto LABEL_448;
              }
              int v653 = **((unsigned char **)&v925 + 1);
              if ((v653 - 4) > 0x1E)
              {
                if ((v653 - 3) >= 0xFFFFFFFE) {
                  uint64_t v701 = *((void *)&v925 + 1);
                }
                else {
                  uint64_t v701 = 0;
                }
                if ((v653 - 3) < 0xFFFFFFFE)
                {
                  if (v653 == 3) {
                    *(void *)(*((void *)&v925 + 1) + 8) = 0;
                  }
                  goto LABEL_446;
                }
                unint64_t v655 = v701 + 8;
              }
              else
              {
                if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                  && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                {
                  goto LABEL_446;
                }
                uint64_t v654 = *(void *)(*((void *)&v925 + 1) + 16);
                if ((v654 & 4) == 0) {
                  goto LABEL_446;
                }
                unint64_t v655 = v654 & 0xFFFFFFFFFFFFFFF8;
                if (!v655) {
                  goto LABEL_446;
                }
              }
              v917 = (char *)&v925 + 8;
              sub_1CC5FA668(v655 + 16, &v917);
              goto LABEL_446;
            }
          }
        }
        *((void *)&v925 + 1) = 0;
        v359 = v899;
        goto LABEL_444;
      case 1273:
        v257 = v899;
        if (!v5[1725]) {
          goto LABEL_593;
        }
        uint64_t v258 = *((void *)v899 + 3);
        memset(v926, 0, 32);
        long long v925 = 0u;
        long long v924 = 0u;
        uint64_t v259 = *(void *)(v258 + 32);
        v923 = (void **)&unk_1F261CD58;
        *(void *)&long long v924 = v259;
        *(void *)&long long v925 = *(void *)(v259 + 40);
        *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v259 + 16) + 104))(*(void *)(v259 + 16));
        v985 = 0;
        if (!*((void *)&v925 + 1))
        {
          v260 = 0;
          *((void *)&v925 + 1) = 0;
          goto LABEL_363;
        }
        int v546 = **((unsigned char **)&v925 + 1);
        if ((v546 - 4) > 0x1E)
        {
          if ((v546 - 3) >= 0xFFFFFFFE) {
            uint64_t v688 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v688 = 0;
          }
          if ((v546 - 3) > 0xFFFFFFFD)
          {
            unint64_t v689 = v688 + 8;
            goto LABEL_1168;
          }
          if (v546 == 3) {
            *(void *)(*((void *)&v925 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v925 + 1) + 12))
        {
          uint64_t v812 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v812 & 4) != 0)
          {
            unint64_t v689 = v812 & 0xFFFFFFFFFFFFFFF8;
            if (v689)
            {
LABEL_1168:
              v917 = (char *)&v925 + 8;
              sub_1CC5FA668(v689 + 16, &v917);
              v260 = v985;
              *((void *)&v925 + 1) = v985;
              if (v985)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
                v260 = (unsigned __int8 *)*((void *)&v925 + 1);
                v257 = v899;
LABEL_363:
                v926[1] = v257;
                v926[2] = 0;
                v926[0] = *((void *)v257 + 3);
                if (v18 == (long long *)((char *)&v925 + 8)) {
                  goto LABEL_880;
                }
                if (v260)
                {
                  int v644 = *v260;
                  if ((v644 - 4) > 0x1E)
                  {
                    if ((v644 - 3) >= 0xFFFFFFFE) {
                      v698 = v260;
                    }
                    else {
                      v698 = 0;
                    }
                    if ((v644 - 3) < 0xFFFFFFFE)
                    {
                      v257 = v899;
                      if (v644 == 3) {
                        *((void *)v260 + 1) = 0;
                      }
                      goto LABEL_365;
                    }
                    unint64_t v646 = (unint64_t)(v698 + 8);
                  }
                  else
                  {
                    v257 = v899;
                    if ((v260[1] & 0x7F) != 2 && !*((_DWORD *)v260 + 3)) {
                      goto LABEL_365;
                    }
                    uint64_t v645 = *((void *)v260 + 2);
                    if ((v645 & 4) == 0) {
                      goto LABEL_365;
                    }
                    unint64_t v646 = v645 & 0xFFFFFFFFFFFFFFF8;
                    if (!v646) {
                      goto LABEL_365;
                    }
                  }
                  v917 = (char *)&v925 + 8;
                  sub_1CC5FA668(v646 + 16, &v917);
                  v257 = v899;
                }
LABEL_365:
                v261 = *(unsigned __int8 **)v18;
                *((void *)&v925 + 1) = v261;
                if (!v261)
                {
                  v262 = (llvm::MachineFunction *)v924;
                  uint64_t v263 = *(void *)(*((void *)&v924 + 1) + 8) + 480;
                  v985 = 0;
                  goto LABEL_367;
                }
                llvm::MetadataTracking::track((uint64_t)&v925 + 8, v261, 2);
                v260 = (unsigned __int8 *)*((void *)&v925 + 1);
LABEL_880:
                v262 = (llvm::MachineFunction *)v924;
                uint64_t v263 = *(void *)(*((void *)&v924 + 1) + 8) + 480;
                v985 = v260;
                if (v260) {
                  llvm::MetadataTracking::track((uint64_t)&v985, v260, 2);
                }
                v257 = v899;
LABEL_367:
                v264 = llvm::MachineFunction::CreateMachineInstr(v262, v263, &v985, 0);
                v265 = v264;
                v266 = v264;
                if (!v985) {
                  goto LABEL_368;
                }
                int v841 = *v985;
                if ((v841 - 4) > 0x1E)
                {
                  if ((v841 - 3) >= 0xFFFFFFFE) {
                    v876 = v985;
                  }
                  else {
                    v876 = 0;
                  }
                  if ((v841 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v843 = (unint64_t)(v876 + 8);
LABEL_1664:
                    v917 = &v985;
                    sub_1CC5FA668(v843 + 16, &v917);
                    v257 = v899;
                    v265 = v266;
                    goto LABEL_368;
                  }
                  v257 = v899;
                  v265 = v264;
                  if (v841 == 3) {
                    *((void *)v985 + 1) = 0;
                  }
                }
                else
                {
                  v257 = v899;
                  v265 = v264;
                  if ((v985[1] & 0x7F) == 2 || *((_DWORD *)v985 + 3))
                  {
                    uint64_t v842 = *((void *)v985 + 2);
                    if ((v842 & 4) != 0)
                    {
                      unint64_t v843 = v842 & 0xFFFFFFFFFFFFFFF8;
                      if (v843) {
                        goto LABEL_1664;
                      }
                    }
                  }
                }
LABEL_368:
                v267 = (uint64_t *)v926[1];
                uint64_t v268 = *(void *)(v926[0] + 40);
                *((void *)v265 + 3) = v268;
                uint64_t v269 = *(void *)(v268 + 32);
                uint64_t v270 = *((unsigned int *)v265 + 10);
                if (v270)
                {
                  uint64_t v557 = *((void *)v265 + 4);
                  uint64_t v558 = *(void *)(v269 + 40);
                  uint64_t v559 = 32 * v270;
                  v257 = v899;
                  do
                  {
                    if (!*(unsigned char *)v557)
                    {
                      uint64_t v560 = *(unsigned int *)(v557 + 4);
                      if ((int)v560 >= 0) {
                        v561 = (uint64_t *)(*(void *)(v558 + 272) + 8 * v560);
                      }
                      else {
                        v561 = (uint64_t *)(*(void *)(v558 + 24) + 16 * (v560 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v562 = *v561;
                      if (*v561)
                      {
                        uint64_t v563 = *(void *)(v562 + 16);
                        *(void *)(v562 + 16) = v557;
                        *(void *)(v557 + 16) = v563;
                        if (*(unsigned char *)(v557 + 3))
                        {
                          *(void *)(v557 + 24) = v562;
                        }
                        else
                        {
                          *(void *)(v557 + 24) = 0;
                          v561 = (uint64_t *)(v563 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v557 + 16) = v557;
                        *(void *)(v557 + 24) = 0;
                      }
                      uint64_t *v561 = v557;
                    }
                    v557 += 32;
                    v559 -= 32;
                    v265 = v266;
                  }
                  while (v559);
                }
                uint64_t v271 = *(void *)(v269 + 728);
                if (v271) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v271 + 24))(v271, v265);
                }
                unint64_t v272 = *v267 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v265 = v272 | *(void *)v265 & 7;
                *((void *)v265 + 1) = v267;
                *(void *)(v272 + 8) = v265;
                uint64_t *v267 = *v267 & 7 | (unint64_t)v265;
                if (v926[2]) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v265);
                }
                int v273 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                *(void *)(*(void *)(v4 + 24) + 16 * (v273 & 0x7FFFFFFF)) = &off_1E66AB080;
                uint64_t v274 = *(void *)(v4 + 8);
                if (v274) {
                  (*(void (**)(uint64_t))(*(void *)v274 + 24))(v274);
                }
                uint64_t v918 = 0;
                *(_OWORD *)v919 = 0uLL;
                HIDWORD(v917) = v273;
                LODWORD(v917) = 0x1000000;
                llvm::MachineInstr::addOperand(v265, v262, (const llvm::MachineOperand *)&v917);
                v275 = (llvm::MachineFunction *)v924;
                uint64_t v276 = *(void *)(*((void *)&v924 + 1) + 8) + 912;
                v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                if (*((void *)&v925 + 1)) {
                  llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                }
                v277 = llvm::MachineFunction::CreateMachineInstr(v275, v276, &v985, 0);
                if (!v985)
                {
LABEL_378:
                  v278 = (unint64_t *)v926[1];
                  uint64_t v279 = *(void *)(v926[0] + 40);
                  *((void *)v277 + 3) = v279;
                  uint64_t v280 = *(void *)(v279 + 32);
                  uint64_t v281 = *((unsigned int *)v277 + 10);
                  if (v281)
                  {
                    uint64_t v564 = *((void *)v277 + 4);
                    uint64_t v565 = *(void *)(v280 + 40);
                    uint64_t v566 = 32 * v281;
                    v257 = v899;
                    do
                    {
                      if (!*(unsigned char *)v564)
                      {
                        uint64_t v567 = *(unsigned int *)(v564 + 4);
                        if ((int)v567 >= 0) {
                          v568 = (uint64_t *)(*(void *)(v565 + 272) + 8 * v567);
                        }
                        else {
                          v568 = (uint64_t *)(*(void *)(v565 + 24) + 16 * (v567 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v569 = *v568;
                        if (*v568)
                        {
                          uint64_t v570 = *(void *)(v569 + 16);
                          *(void *)(v569 + 16) = v564;
                          *(void *)(v564 + 16) = v570;
                          if (*(unsigned char *)(v564 + 3))
                          {
                            *(void *)(v564 + 24) = v569;
                          }
                          else
                          {
                            *(void *)(v564 + 24) = 0;
                            v568 = (uint64_t *)(v570 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v564 + 16) = v564;
                          *(void *)(v564 + 24) = 0;
                        }
                        uint64_t *v568 = v564;
                      }
                      v564 += 32;
                      v566 -= 32;
                    }
                    while (v566);
                  }
                  uint64_t v282 = *(void *)(v280 + 728);
                  if (v282) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v282 + 24))(v282, v277);
                  }
                  unint64_t v283 = *v278 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)v277 = v283 | *(void *)v277 & 7;
                  *((void *)v277 + 1) = v278;
                  *(void *)(v283 + 8) = v277;
                  unint64_t *v278 = *v278 & 7 | (unint64_t)v277;
                  if (v926[2]) {
                    (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v277);
                  }
                  int v284 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                  *(void *)(*(void *)(v4 + 24) + 16 * (v284 & 0x7FFFFFFF)) = &off_1E66AB080;
                  uint64_t v285 = *(void *)(v4 + 8);
                  if (v285) {
                    (*(void (**)(uint64_t))(*(void *)v285 + 24))(v285);
                  }
                  uint64_t v918 = 0;
                  *(_OWORD *)v919 = 0uLL;
                  HIDWORD(v917) = v284;
                  LODWORD(v917) = 0x1000000;
                  llvm::MachineInstr::addOperand(v277, v275, (const llvm::MachineOperand *)&v917);
                  int v286 = *(_DWORD *)(*((void *)v257 + 4) + 388);
                  uint64_t v918 = 0;
                  *(_OWORD *)v919 = 0uLL;
                  HIDWORD(v917) = v286;
                  LODWORD(v917) = 6656;
                  llvm::MachineInstr::addOperand(v277, v275, (const llvm::MachineOperand *)&v917);
                  v287 = (llvm::MachineFunction *)v924;
                  uint64_t v288 = *(void *)(*((void *)&v924 + 1) + 8) + 912;
                  v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                  if (*((void *)&v925 + 1)) {
                    llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                  }
                  v289 = llvm::MachineFunction::CreateMachineInstr(v287, v288, &v985, 0);
                  if (!v985)
                  {
LABEL_388:
                    v290 = (unint64_t *)v926[1];
                    uint64_t v291 = *(void *)(v926[0] + 40);
                    *((void *)v289 + 3) = v291;
                    uint64_t v292 = *(void *)(v291 + 32);
                    uint64_t v293 = *((unsigned int *)v289 + 10);
                    if (v293)
                    {
                      uint64_t v571 = *((void *)v289 + 4);
                      uint64_t v572 = *(void *)(v292 + 40);
                      uint64_t v573 = 32 * v293;
                      v257 = v899;
                      do
                      {
                        if (!*(unsigned char *)v571)
                        {
                          uint64_t v574 = *(unsigned int *)(v571 + 4);
                          if ((int)v574 >= 0) {
                            v575 = (uint64_t *)(*(void *)(v572 + 272) + 8 * v574);
                          }
                          else {
                            v575 = (uint64_t *)(*(void *)(v572 + 24) + 16 * (v574 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v576 = *v575;
                          if (*v575)
                          {
                            uint64_t v577 = *(void *)(v576 + 16);
                            *(void *)(v576 + 16) = v571;
                            *(void *)(v571 + 16) = v577;
                            if (*(unsigned char *)(v571 + 3))
                            {
                              *(void *)(v571 + 24) = v576;
                            }
                            else
                            {
                              *(void *)(v571 + 24) = 0;
                              v575 = (uint64_t *)(v577 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v571 + 16) = v571;
                            *(void *)(v571 + 24) = 0;
                          }
                          uint64_t *v575 = v571;
                        }
                        v571 += 32;
                        v573 -= 32;
                      }
                      while (v573);
                    }
                    uint64_t v294 = *(void *)(v292 + 728);
                    if (v294) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v294 + 24))(v294, v289);
                    }
                    unint64_t v295 = *v290 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)v289 = v295 | *(void *)v289 & 7;
                    *((void *)v289 + 1) = v290;
                    *(void *)(v295 + 8) = v289;
                    unint64_t *v290 = *v290 & 7 | (unint64_t)v289;
                    if (v926[2]) {
                      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v289);
                    }
                    int v296 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                    *(void *)(*(void *)(v4 + 24) + 16 * (v296 & 0x7FFFFFFF)) = &off_1E66AB080;
                    uint64_t v297 = *(void *)(v4 + 8);
                    if (v297) {
                      (*(void (**)(uint64_t))(*(void *)v297 + 24))(v297);
                    }
                    uint64_t v918 = 0;
                    *(_OWORD *)v919 = 0uLL;
                    HIDWORD(v917) = v296;
                    LODWORD(v917) = 0x1000000;
                    llvm::MachineInstr::addOperand(v289, v287, (const llvm::MachineOperand *)&v917);
                    int v298 = *(_DWORD *)(*((void *)v257 + 4) + 388);
                    uint64_t v918 = 0;
                    *(_OWORD *)v919 = 0uLL;
                    HIDWORD(v917) = v298;
                    LODWORD(v917) = 6400;
                    llvm::MachineInstr::addOperand(v289, v287, (const llvm::MachineOperand *)&v917);
                    v299 = (llvm::MachineFunction *)v924;
                    uint64_t v300 = *(void *)(*((void *)&v924 + 1) + 8) + 864;
                    v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                    if (*((void *)&v925 + 1)) {
                      llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                    }
                    v301 = llvm::MachineFunction::CreateMachineInstr(v299, v300, &v985, 0);
                    if (!v985)
                    {
LABEL_398:
                      v302 = (unint64_t *)v926[1];
                      uint64_t v303 = *(void *)(v926[0] + 40);
                      *((void *)v301 + 3) = v303;
                      uint64_t v304 = *(void *)(v303 + 32);
                      uint64_t v305 = *((unsigned int *)v301 + 10);
                      if (v305)
                      {
                        uint64_t v578 = *((void *)v301 + 4);
                        uint64_t v579 = *(void *)(v304 + 40);
                        uint64_t v580 = 32 * v305;
                        do
                        {
                          if (!*(unsigned char *)v578)
                          {
                            uint64_t v581 = *(unsigned int *)(v578 + 4);
                            if ((int)v581 >= 0) {
                              v582 = (uint64_t *)(*(void *)(v579 + 272) + 8 * v581);
                            }
                            else {
                              v582 = (uint64_t *)(*(void *)(v579 + 24) + 16 * (v581 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v583 = *v582;
                            if (*v582)
                            {
                              uint64_t v584 = *(void *)(v583 + 16);
                              *(void *)(v583 + 16) = v578;
                              *(void *)(v578 + 16) = v584;
                              if (*(unsigned char *)(v578 + 3))
                              {
                                *(void *)(v578 + 24) = v583;
                              }
                              else
                              {
                                *(void *)(v578 + 24) = 0;
                                v582 = (uint64_t *)(v584 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v578 + 16) = v578;
                              *(void *)(v578 + 24) = 0;
                            }
                            uint64_t *v582 = v578;
                          }
                          v578 += 32;
                          v580 -= 32;
                        }
                        while (v580);
                      }
                      uint64_t v306 = *(void *)(v304 + 728);
                      if (v306) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v306 + 24))(v306, v301);
                      }
                      unint64_t v307 = *v302 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)v301 = v307 | *(void *)v301 & 7;
                      *((void *)v301 + 1) = v302;
                      *(void *)(v307 + 8) = v301;
                      unint64_t *v302 = *v302 & 7 | (unint64_t)v301;
                      if (v926[2]) {
                        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v301);
                      }
                      int v308 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
                      *(void *)(*(void *)(v4 + 24) + 16 * (v308 & 0x7FFFFFFF)) = &off_1E66AB2E8;
                      uint64_t v309 = *(void *)(v4 + 8);
                      if (v309) {
                        (*(void (**)(uint64_t))(*(void *)v309 + 24))(v309);
                      }
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v308;
                      LODWORD(v917) = 0x1000000;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v310 = *(_DWORD *)(*((void *)v899 + 4) + 100);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v310;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 25;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v311 = *(_DWORD *)(*((void *)v899 + 4) + 132);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v311;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 26;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v312 = *(_DWORD *)(*((void *)v899 + 4) + 164);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v312;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 27;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v313 = *(_DWORD *)(*((void *)v899 + 4) + 196);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v313;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 28;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v314 = *(_DWORD *)(*((void *)v899 + 4) + 228);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v314;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 29;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v315 = *(_DWORD *)(*((void *)v899 + 4) + 260);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v315;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 30;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v316 = *(_DWORD *)(*((void *)v899 + 4) + 292);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v316;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 31;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v317 = *(_DWORD *)(*((void *)v899 + 4) + 324);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v317;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 32;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v318 = *(_DWORD *)(*((void *)v899 + 4) + 356);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v318;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 33;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v319 = *(_DWORD *)(*((void *)v289 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v319;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 34;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v320 = *(_DWORD *)(*((void *)v277 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v320;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 35;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      int v321 = *(_DWORD *)(*((void *)v266 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v321;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 36;
                      llvm::MachineInstr::addOperand(v301, v299, (const llvm::MachineOperand *)&v917);
                      v322 = (llvm::MachineFunction *)v924;
                      uint64_t v323 = *(void *)(*((void *)&v924 + 1) + 8) + 38256;
                      v985 = (unsigned __int8 *)*((void *)&v925 + 1);
                      if (*((void *)&v925 + 1)) {
                        llvm::MetadataTracking::track((uint64_t)&v985, *((unsigned __int8 **)&v925 + 1), 2);
                      }
                      v324 = llvm::MachineFunction::CreateMachineInstr(v322, v323, &v985, 0);
                      if (!v985) {
                        goto LABEL_408;
                      }
                      int v853 = *v985;
                      if ((v853 - 4) > 0x1E)
                      {
                        if ((v853 - 3) >= 0xFFFFFFFE) {
                          v880 = v985;
                        }
                        else {
                          v880 = 0;
                        }
                        if ((v853 - 3) < 0xFFFFFFFE)
                        {
                          if (v853 == 3) {
                            *((void *)v985 + 1) = 0;
                          }
                          goto LABEL_408;
                        }
                        unint64_t v855 = (unint64_t)(v880 + 8);
                      }
                      else
                      {
                        if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                          goto LABEL_408;
                        }
                        uint64_t v854 = *((void *)v985 + 2);
                        if ((v854 & 4) == 0) {
                          goto LABEL_408;
                        }
                        unint64_t v855 = v854 & 0xFFFFFFFFFFFFFFF8;
                        if (!v855) {
                          goto LABEL_408;
                        }
                      }
                      v917 = &v985;
                      sub_1CC5FA668(v855 + 16, &v917);
LABEL_408:
                      v325 = (unint64_t *)v926[1];
                      uint64_t v326 = *(void *)(v926[0] + 40);
                      *((void *)v324 + 3) = v326;
                      uint64_t v327 = *(void *)(v326 + 32);
                      uint64_t v328 = *((unsigned int *)v324 + 10);
                      if (v328)
                      {
                        uint64_t v585 = *((void *)v324 + 4);
                        uint64_t v586 = *(void *)(v327 + 40);
                        uint64_t v587 = 32 * v328;
                        do
                        {
                          if (!*(unsigned char *)v585)
                          {
                            uint64_t v588 = *(unsigned int *)(v585 + 4);
                            if ((int)v588 >= 0) {
                              v589 = (uint64_t *)(*(void *)(v586 + 272) + 8 * v588);
                            }
                            else {
                              v589 = (uint64_t *)(*(void *)(v586 + 24) + 16 * (v588 & 0x7FFFFFFF) + 8);
                            }
                            uint64_t v590 = *v589;
                            if (*v589)
                            {
                              uint64_t v591 = *(void *)(v590 + 16);
                              *(void *)(v590 + 16) = v585;
                              *(void *)(v585 + 16) = v591;
                              if (*(unsigned char *)(v585 + 3))
                              {
                                *(void *)(v585 + 24) = v590;
                              }
                              else
                              {
                                *(void *)(v585 + 24) = 0;
                                v589 = (uint64_t *)(v591 + 24);
                              }
                            }
                            else
                            {
                              *(void *)(v585 + 16) = v585;
                              *(void *)(v585 + 24) = 0;
                            }
                            uint64_t *v589 = v585;
                          }
                          v585 += 32;
                          v587 -= 32;
                        }
                        while (v587);
                      }
                      uint64_t v329 = *(void *)(v327 + 728);
                      if (v329) {
                        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v329 + 24))(v329, v324);
                      }
                      unint64_t v330 = *v325 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)v324 = v330 | *(void *)v324 & 7;
                      *((void *)v324 + 1) = v325;
                      *(void *)(v330 + 8) = v324;
                      unint64_t *v325 = *v325 & 7 | (unint64_t)v324;
                      if (v926[2]) {
                        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v324);
                      }
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      int v331 = *(_DWORD *)(*((void *)v899 + 4) + 420);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v331;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      int v332 = *(_DWORD *)(*((void *)v899 + 4) + 36);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v332;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      int v333 = *(_DWORD *)(*((void *)v899 + 4) + 68);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v333;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      int v334 = *(_DWORD *)(*((void *)v301 + 4) + 4);
                      uint64_t v918 = 0;
                      *(_OWORD *)v919 = 0uLL;
                      HIDWORD(v917) = v334;
                      LODWORD(v917) = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      LODWORD(v917) = 1;
                      uint64_t v918 = 0;
                      *(void *)v919 = 0;
                      llvm::MachineInstr::addOperand(v324, v322, (const llvm::MachineOperand *)&v917);
                      llvm::MachineInstr::eraseFromParent(v899);
                      v923 = (void **)&unk_1F261CD58;
                      uint64_t v335 = *((void *)&v925 + 1);
                      if (!*((void *)&v925 + 1)) {
                        goto LABEL_652;
                      }
                      int v336 = **((unsigned char **)&v925 + 1);
                      if ((v336 - 4) > 0x1E)
                      {
                        if ((v336 - 3) >= 0xFFFFFFFE) {
                          uint64_t v460 = *((void *)&v925 + 1);
                        }
                        else {
                          uint64_t v460 = 0;
                        }
                        if ((v336 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v338 = v460 + 8;
                          goto LABEL_684;
                        }
                        goto LABEL_768;
                      }
                      if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                        && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                      {
                        goto LABEL_652;
                      }
                      uint64_t v337 = *(void *)(*((void *)&v925 + 1) + 16);
                      if ((v337 & 4) == 0) {
                        goto LABEL_652;
                      }
                      unint64_t v338 = v337 & 0xFFFFFFFFFFFFFFF8;
                      if (!v338) {
                        goto LABEL_652;
                      }
LABEL_684:
                      v917 = (char *)&v925 + 8;
                      goto LABEL_767;
                    }
                    int v850 = *v985;
                    if ((v850 - 4) > 0x1E)
                    {
                      if ((v850 - 3) >= 0xFFFFFFFE) {
                        v879 = v985;
                      }
                      else {
                        v879 = 0;
                      }
                      if ((v850 - 3) < 0xFFFFFFFE)
                      {
                        if (v850 == 3) {
                          *((void *)v985 + 1) = 0;
                        }
                        goto LABEL_398;
                      }
                      unint64_t v852 = (unint64_t)(v879 + 8);
                    }
                    else
                    {
                      if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                        goto LABEL_398;
                      }
                      uint64_t v851 = *((void *)v985 + 2);
                      if ((v851 & 4) == 0) {
                        goto LABEL_398;
                      }
                      unint64_t v852 = v851 & 0xFFFFFFFFFFFFFFF8;
                      if (!v852) {
                        goto LABEL_398;
                      }
                    }
                    v917 = &v985;
                    sub_1CC5FA668(v852 + 16, &v917);
                    goto LABEL_398;
                  }
                  int v847 = *v985;
                  if ((v847 - 4) > 0x1E)
                  {
                    if ((v847 - 3) >= 0xFFFFFFFE) {
                      v878 = v985;
                    }
                    else {
                      v878 = 0;
                    }
                    if ((v847 - 3) < 0xFFFFFFFE)
                    {
                      v257 = v899;
                      if (v847 == 3) {
                        *((void *)v985 + 1) = 0;
                      }
                      goto LABEL_388;
                    }
                    unint64_t v849 = (unint64_t)(v878 + 8);
                  }
                  else
                  {
                    v257 = v899;
                    if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                      goto LABEL_388;
                    }
                    uint64_t v848 = *((void *)v985 + 2);
                    if ((v848 & 4) == 0) {
                      goto LABEL_388;
                    }
                    unint64_t v849 = v848 & 0xFFFFFFFFFFFFFFF8;
                    if (!v849) {
                      goto LABEL_388;
                    }
                  }
                  v917 = &v985;
                  sub_1CC5FA668(v849 + 16, &v917);
                  v257 = v899;
                  goto LABEL_388;
                }
                int v844 = *v985;
                if ((v844 - 4) > 0x1E)
                {
                  if ((v844 - 3) >= 0xFFFFFFFE) {
                    v877 = v985;
                  }
                  else {
                    v877 = 0;
                  }
                  if ((v844 - 3) < 0xFFFFFFFE)
                  {
                    v257 = v899;
                    if (v844 == 3) {
                      *((void *)v985 + 1) = 0;
                    }
                    goto LABEL_378;
                  }
                  unint64_t v846 = (unint64_t)(v877 + 8);
                }
                else
                {
                  v257 = v899;
                  if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                    goto LABEL_378;
                  }
                  uint64_t v845 = *((void *)v985 + 2);
                  if ((v845 & 4) == 0) {
                    goto LABEL_378;
                  }
                  unint64_t v846 = v845 & 0xFFFFFFFFFFFFFFF8;
                  if (!v846) {
                    goto LABEL_378;
                  }
                }
                v917 = &v985;
                sub_1CC5FA668(v846 + 16, &v917);
                v257 = v899;
                goto LABEL_378;
              }
LABEL_858:
              v257 = v899;
              goto LABEL_363;
            }
          }
        }
        v260 = 0;
        *((void *)&v925 + 1) = 0;
        goto LABEL_858;
      case 1274:
        int v339 = v5[1725];
        v340 = v899;
        if (!v339) {
          goto LABEL_593;
        }
        uint64_t v341 = *((void *)v899 + 3);
        memset(v926, 0, 32);
        long long v925 = 0u;
        long long v924 = 0u;
        uint64_t v342 = *(void *)(v341 + 32);
        v923 = (void **)&unk_1F261CD58;
        *(void *)&long long v924 = v342;
        *(void *)&long long v925 = *(void *)(v342 + 40);
        *((void *)&v924 + 1) = (*(uint64_t (**)(void))(**(void **)(v342 + 16) + 104))(*(void *)(v342 + 16));
        v985 = 0;
        if (!*((void *)&v925 + 1))
        {
          v343 = 0;
          *((void *)&v925 + 1) = 0;
          goto LABEL_423;
        }
        int v547 = **((unsigned char **)&v925 + 1);
        if ((v547 - 4) > 0x1E)
        {
          if ((v547 - 3) >= 0xFFFFFFFE) {
            uint64_t v690 = *((void *)&v925 + 1);
          }
          else {
            uint64_t v690 = 0;
          }
          if ((v547 - 3) > 0xFFFFFFFD)
          {
            unint64_t v691 = v690 + 8;
            goto LABEL_1175;
          }
          if (v547 == 3) {
            *(void *)(*((void *)&v925 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v925 + 1) + 12))
        {
          uint64_t v813 = *(void *)(*((void *)&v925 + 1) + 16);
          if ((v813 & 4) != 0)
          {
            unint64_t v691 = v813 & 0xFFFFFFFFFFFFFFF8;
            if (v691)
            {
LABEL_1175:
              v917 = (char *)&v925 + 8;
              sub_1CC5FA668(v691 + 16, &v917);
              v343 = v985;
              *((void *)&v925 + 1) = v985;
              if (v985)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v985, v985, (uint64_t)&v925 + 8);
                v343 = (unsigned __int8 *)*((void *)&v925 + 1);
              }
LABEL_863:
              v340 = v899;
LABEL_423:
              v926[1] = v340;
              v926[2] = 0;
              v926[0] = *((void *)v340 + 3);
              if (v18 == (long long *)((char *)&v925 + 8)) {
                goto LABEL_884;
              }
              if (v343)
              {
                int v647 = *v343;
                if ((v647 - 4) > 0x1E)
                {
                  if ((v647 - 3) >= 0xFFFFFFFE) {
                    v699 = v343;
                  }
                  else {
                    v699 = 0;
                  }
                  if ((v647 - 3) < 0xFFFFFFFE)
                  {
                    v340 = v899;
                    if (v647 == 3) {
                      *((void *)v343 + 1) = 0;
                    }
                    goto LABEL_425;
                  }
                  unint64_t v649 = (unint64_t)(v699 + 8);
                }
                else
                {
                  v340 = v899;
                  if ((v343[1] & 0x7F) != 2 && !*((_DWORD *)v343 + 3)) {
                    goto LABEL_425;
                  }
                  uint64_t v648 = *((void *)v343 + 2);
                  if ((v648 & 4) == 0) {
                    goto LABEL_425;
                  }
                  unint64_t v649 = v648 & 0xFFFFFFFFFFFFFFF8;
                  if (!v649) {
                    goto LABEL_425;
                  }
                }
                v917 = (char *)&v925 + 8;
                sub_1CC5FA668(v649 + 16, &v917);
                v340 = v899;
              }
LABEL_425:
              v344 = *(unsigned __int8 **)v18;
              *((void *)&v925 + 1) = v344;
              if (!v344)
              {
                v345 = (llvm::MachineFunction *)v924;
                uint64_t v346 = *(void *)(*((void *)&v924 + 1) + 8) + 38304;
                v985 = 0;
                goto LABEL_427;
              }
              llvm::MetadataTracking::track((uint64_t)&v925 + 8, v344, 2);
              v343 = (unsigned __int8 *)*((void *)&v925 + 1);
LABEL_884:
              v345 = (llvm::MachineFunction *)v924;
              uint64_t v346 = *(void *)(*((void *)&v924 + 1) + 8) + 38304;
              v985 = v343;
              if (v343) {
                llvm::MetadataTracking::track((uint64_t)&v985, v343, 2);
              }
              v340 = v899;
LABEL_427:
              v347 = llvm::MachineFunction::CreateMachineInstr(v345, v346, &v985, 0);
              if (v985)
              {
                int v856 = *v985;
                if ((v856 - 4) > 0x1E)
                {
                  if ((v856 - 3) >= 0xFFFFFFFE) {
                    v881 = v985;
                  }
                  else {
                    v881 = 0;
                  }
                  if ((v856 - 3) < 0xFFFFFFFE)
                  {
                    v340 = v899;
                    if (v856 == 3) {
                      *((void *)v985 + 1) = 0;
                    }
                    goto LABEL_428;
                  }
                  unint64_t v858 = (unint64_t)(v881 + 8);
                }
                else
                {
                  v340 = v899;
                  if ((v985[1] & 0x7F) != 2 && !*((_DWORD *)v985 + 3)) {
                    goto LABEL_428;
                  }
                  uint64_t v857 = *((void *)v985 + 2);
                  if ((v857 & 4) == 0) {
                    goto LABEL_428;
                  }
                  unint64_t v858 = v857 & 0xFFFFFFFFFFFFFFF8;
                  if (!v858) {
                    goto LABEL_428;
                  }
                }
                v917 = &v985;
                sub_1CC5FA668(v858 + 16, &v917);
                v340 = v899;
              }
LABEL_428:
              v348 = (unint64_t *)v926[1];
              uint64_t v349 = *(void *)(v926[0] + 40);
              *((void *)v347 + 3) = v349;
              uint64_t v350 = *(void *)(v349 + 32);
              uint64_t v351 = *((unsigned int *)v347 + 10);
              if (v351)
              {
                uint64_t v592 = *((void *)v347 + 4);
                uint64_t v593 = *(void *)(v350 + 40);
                uint64_t v594 = 32 * v351;
                v340 = v899;
                do
                {
                  if (!*(unsigned char *)v592)
                  {
                    uint64_t v595 = *(unsigned int *)(v592 + 4);
                    if ((int)v595 >= 0) {
                      v596 = (uint64_t *)(*(void *)(v593 + 272) + 8 * v595);
                    }
                    else {
                      v596 = (uint64_t *)(*(void *)(v593 + 24) + 16 * (v595 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v597 = *v596;
                    if (*v596)
                    {
                      uint64_t v598 = *(void *)(v597 + 16);
                      *(void *)(v597 + 16) = v592;
                      *(void *)(v592 + 16) = v598;
                      if (*(unsigned char *)(v592 + 3))
                      {
                        *(void *)(v592 + 24) = v597;
                      }
                      else
                      {
                        *(void *)(v592 + 24) = 0;
                        v596 = (uint64_t *)(v598 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v592 + 16) = v592;
                      *(void *)(v592 + 24) = 0;
                    }
                    uint64_t *v596 = v592;
                  }
                  v592 += 32;
                  v594 -= 32;
                }
                while (v594);
              }
              uint64_t v352 = *(void *)(v350 + 728);
              if (v352) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v352 + 24))(v352, v347);
              }
              unint64_t v353 = *v348 & 0xFFFFFFFFFFFFFFF8;
              *(void *)v347 = v353 | *(void *)v347 & 7;
              *((void *)v347 + 1) = v348;
              *(void *)(v353 + 8) = v347;
              unint64_t *v348 = *v348 & 7 | (unint64_t)v347;
              if (v926[2]) {
                (*(void (**)(void, llvm::MachineInstr *))(*(void *)v926[2] + 24))(v926[2], v347);
              }
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              int v354 = *(_DWORD *)(*((void *)v340 + 4) + 132);
              uint64_t v918 = 0;
              *(_OWORD *)v919 = 0uLL;
              HIDWORD(v917) = v354;
              LODWORD(v917) = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              int v355 = *(_DWORD *)(*((void *)v340 + 4) + 36);
              uint64_t v918 = 0;
              *(_OWORD *)v919 = 0uLL;
              HIDWORD(v917) = v355;
              LODWORD(v917) = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              int v356 = *(_DWORD *)(*((void *)v340 + 4) + 68);
              uint64_t v918 = 0;
              *(_OWORD *)v919 = 0uLL;
              HIDWORD(v917) = v356;
              LODWORD(v917) = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              int v357 = *(_DWORD *)(*((void *)v340 + 4) + 100);
              uint64_t v918 = 0;
              *(_OWORD *)v919 = 0uLL;
              HIDWORD(v917) = v357;
              LODWORD(v917) = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              LODWORD(v917) = 1;
              uint64_t v918 = 0;
              *(void *)v919 = 0;
              llvm::MachineInstr::addOperand(v347, v345, (const llvm::MachineOperand *)&v917);
              v245 = v340;
LABEL_434:
              llvm::MachineInstr::eraseFromParent(v245);
              v923 = (void **)&unk_1F261CD58;
              uint64_t v335 = *((void *)&v925 + 1);
              if (!*((void *)&v925 + 1)) {
                goto LABEL_652;
              }
              int v336 = **((unsigned char **)&v925 + 1);
              if ((v336 - 4) > 0x1E)
              {
                if ((v336 - 3) >= 0xFFFFFFFE) {
                  uint64_t v435 = *((void *)&v925 + 1);
                }
                else {
                  uint64_t v435 = 0;
                }
                if ((v336 - 3) < 0xFFFFFFFE) {
                  goto LABEL_768;
                }
                unint64_t v338 = v435 + 8;
              }
              else
              {
                if ((*(unsigned char *)(*((void *)&v925 + 1) + 1) & 0x7F) != 2
                  && !*(_DWORD *)(*((void *)&v925 + 1) + 12))
                {
                  goto LABEL_652;
                }
                uint64_t v358 = *(void *)(*((void *)&v925 + 1) + 16);
                if ((v358 & 4) == 0) {
                  goto LABEL_652;
                }
                unint64_t v338 = v358 & 0xFFFFFFFFFFFFFFF8;
                if (!v338) {
                  goto LABEL_652;
                }
              }
              v917 = (char *)&v925 + 8;
              goto LABEL_767;
            }
          }
        }
        v343 = 0;
        *((void *)&v925 + 1) = 0;
        goto LABEL_863;
      default:
        goto LABEL_101;
    }
  }
  v985 = (unsigned __int8 *)&unk_1F25F0210;
  long long v46 = (unsigned __int8 **)&v902;
  *(void *)&long long v902 = &unk_1F25F03A8;
  *(void *)&long long v900 = &unk_1F25F0540;
  if (!*(unsigned char *)(a1 + 98))
  {
    long long v46 = (unsigned __int8 **)&v900;
    if (!*(unsigned char *)(a1 + 99) && !*(unsigned char *)(a1 + 101)) {
      long long v46 = &v985;
    }
  }
  memset((char *)&v926[1] + 4, 0, 24);
  long long v927 = 0u;
  long long v929 = 0u;
  int v928 = 0;
  int v930 = 0;
  long long v931 = 0u;
  long long v933 = 0u;
  int v932 = 0;
  int v934 = 0;
  long long v935 = 0u;
  int v936 = 0;
  int v938 = 0;
  long long v937 = 0u;
  v939 = v941;
  uint64_t v940 = 0x800000000;
  v942 = v944;
  uint64_t v943 = 0x600000000;
  int v945 = 0;
  long long v946 = 0u;
  int v947 = 0;
  int v949 = 0;
  long long v948 = 0u;
  v950 = v952;
  uint64_t v951 = 0x3200000000;
  long long v953 = 0u;
  uint64_t v954 = 0;
  int v955 = 0;
  v956 = v960;
  v957 = v960;
  uint64_t v958 = 4;
  int v959 = 0;
  long long v961 = 0u;
  uint64_t v962 = 0;
  v963 = &v965;
  uint64_t v964 = 0;
  unsigned int v965 = 0x80000000;
  int v967 = 1;
  uint64_t v966 = 0;
  int v969 = 1;
  uint64_t v968 = 0;
  BOOL v21 = v896;
  uint64_t v47 = *((void *)v899 + 3);
  uint64_t v48 = *(void *)(a1 + 72);
  uint64_t v49 = *(void *)(a1 + 80);
  uint64_t v918 = (uint64_t)v46;
  *(void *)v919 = v47;
  *(void *)&v919[8] = v899;
  *(void *)&v919[16] = v896;
  *(void *)&v919[24] = v48;
  uint64_t v920 = v4;
  uint64_t v921 = v49;
  v922 = &v905;
  v917 = &unk_1F25F06D8;
  v896[91] = (uint64_t)v970;
  BOOL v25 = 0;
  if (!sub_1CB99CF74(&v917, (uint64_t)v899, v10, v896[43], 4)) {
    goto LABEL_100;
  }
  sub_1CB99DD40(v904);
  int v50 = v978;
  if (!v978) {
    goto LABEL_97;
  }
  while (1)
  {
    unsigned int v51 = v975;
    do
      uint64_t v52 = *((void *)v974 + --v51);
    while (!v52);
    LODWORD(v975) = v51;
    if (v979)
    {
      LODWORD(v53) = (v979 - 1) & ((v52 >> 4) ^ (v52 >> 9));
      int v54 = &v977[2 * v53];
      uint64_t v55 = *v54;
      if (v52 == *v54)
      {
LABEL_72:
        *int v54 = -8192;
        unint64_t v978 = __PAIR64__(HIDWORD(v978), v50 - 1) + 0x100000000;
      }
      else
      {
        int v56 = 1;
        while (v55 != -4096)
        {
          int v57 = v53 + v56++;
          uint64_t v53 = v57 & (v979 - 1);
          uint64_t v55 = v977[2 * v53];
          if (v52 == v55)
          {
            int v54 = &v977[2 * v53];
            goto LABEL_72;
          }
        }
      }
    }
    unsigned int v58 = **(unsigned __int16 **)(v52 + 16);
    BOOL v35 = v58 > 0x20;
    uint64_t v59 = (1 << v58) & 0x100600000;
    if (!v35 && v59 != 0) {
      break;
    }
    BOOL v916 = 0;
    if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v52, 0, &v916))
    {
      int v67 = **(unsigned __int16 **)(v52 + 16);
      if (v67 != 69 && v67 != 0) {
        break;
      }
    }
    uint64_t v61 = *(unsigned int *)(v52 + 40);
    if (v61)
    {
      char v62 = *(_DWORD **)(v52 + 32);
      uint64_t v63 = &v62[8 * v61];
      while (1)
      {
        if ((*v62 & 0x10000FF) == 0x1000000)
        {
          uint64_t v64 = v62[1];
          if ((v64 - 1) < 0x3FFFFFFF) {
            goto LABEL_95;
          }
          unint64_t v65 = (uint64_t *)((int)v64 < 0
                          ? *(void *)(v4 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8
                          : *(void *)(v4 + 272) + 8 * v64);
          uint64_t v66 = *v65;
          if (v66) {
            break;
          }
        }
LABEL_89:
        v62 += 8;
        if (v62 == v63) {
          goto LABEL_90;
        }
      }
      while ((*(_DWORD *)v66 & 0x81000000) != 0)
      {
        uint64_t v66 = *(void *)(v66 + 24);
        if (!v66) {
          goto LABEL_89;
        }
      }
      break;
    }
LABEL_90:
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v52);
LABEL_96:
    int v50 = v978;
    if (!v978) {
      goto LABEL_97;
    }
  }
LABEL_95:
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v52)) {
    goto LABEL_96;
  }
LABEL_98:
  BOOL v25 = 0;
LABEL_99:
  BOOL v21 = v896;
LABEL_100:
  v21[91] = 0;
  sub_1CB9A4128((uint64_t)&v923);
LABEL_101:
  v905 = &unk_1F261CD58;
  if (*((void *)&v907 + 1))
  {
    int v69 = **((unsigned char **)&v907 + 1);
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        uint64_t v71 = *((void *)&v907 + 1);
      }
      else {
        uint64_t v71 = 0;
      }
      if ((v69 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v72 = v71 + 8;
        goto LABEL_117;
      }
      if (v69 == 3) {
        *(void *)(*((void *)&v907 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v907 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v907 + 1) + 12))
    {
      uint64_t v663 = *(void *)(*((void *)&v907 + 1) + 16);
      if ((v663 & 4) != 0)
      {
        unint64_t v72 = v663 & 0xFFFFFFFFFFFFFFF8;
        if (v72)
        {
LABEL_117:
          v923 = (void **)&v907 + 1;
          sub_1CC5FA668(v72 + 16, &v923);
        }
      }
    }
  }
  sub_1CD3FC494(v970);
  v910 = &unk_1F25F0A58;
  if (v912 != v911) {
    free(v912);
  }
  MEMORY[0x1D25D9CD0](v977, 8);
  if (v974 != v976) {
    free(v974);
  }
  MEMORY[0x1D25D9CD0](v982, 8);
  if (v980[0] != v981) {
    free(v980[0]);
  }
  return v25;
}

uint64_t sub_1CB9970F8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = 0;
  v50[0] = a3;
  uint64_t v10 = *(void *)(a2 + 24);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  uint64_t v11 = *(void *)(v10 + 32);
  int v44 = &unk_1F261CD58;
  uint64_t v45 = v11;
  *((void *)&v46 + 1) = *(void *)(v11 + 40);
  *(void *)&long long v46 = (*(uint64_t (**)(void))(**(void **)(v11 + 16) + 104))(*(void *)(v11 + 16));
  v50[1] = 0;
  *(void *)&long long v47 = 0;
  long long v48 = a2;
  *((void *)&v47 + 1) = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) != &v47)
  {
    uint64_t v12 = *(unsigned __int8 **)(a2 + 56);
    *(void *)&long long v47 = v12;
    if (v12) {
      llvm::MetadataTracking::track((uint64_t)&v47, v12, 2);
    }
  }
  if (a3 == 513)
  {
    int v13 = sub_1CB9970F8(a1, a2, 257, a4, 0);
    int v14 = sub_1CB9970F8(a1, a2, 257, HIDWORD(a4), 0);
    unsigned int v51 = (long long *)v50[0];
    LODWORD(v52) = 0;
    uint64_t v15 = (llvm::MachineFunction *)sub_1CC739C54(&v44, 0x12u, (unint64_t *)&v51, 1, 0, 0, 0);
    unint64_t v17 = v16;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    LODWORD(v51) = 0;
    HIDWORD(v51) = v13;
    uint64_t v54 = 0;
    llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v51);
    LODWORD(v51) = 1;
    uint64_t v52 = 0;
    uint64_t v53 = 25;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v51);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    LODWORD(v51) = 0;
    HIDWORD(v51) = v14;
    uint64_t v54 = 0;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v51);
    LODWORD(v51) = 1;
    uint64_t v52 = 0;
    uint64_t v53 = 26;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v51);
    uint64_t v18 = *(void *)(v45 + 40);
    uint64_t v20 = *((void *)v17 + 4);
    int v19 = (void *)((char *)v17 + 32);
    int v21 = *(_DWORD *)(v20 + 4);
    int v23 = sub_1CB8F1DC4(v50);
    if (v22 == 1) {
    if (v23 > 111)
    }
    {
      if (v23 <= 191)
      {
        if (v23 == 112)
        {
          uint64_t v24 = (__int16 ***)&off_1E66AB198;
        }
        else if (v23 == 128)
        {
          uint64_t v24 = (__int16 ***)&off_1E66AB1D0;
        }
        else
        {
          uint64_t v24 = (__int16 ***)&off_1E66AB208;
        }
      }
      else if (v23 > 287)
      {
        if (v23 == 288) {
          uint64_t v24 = (__int16 ***)&off_1E66AB2B0;
        }
        else {
          uint64_t v24 = (__int16 ***)&off_1E66AB2E8;
        }
      }
      else if (v23 == 192)
      {
        uint64_t v24 = (__int16 ***)&off_1E66AB240;
      }
      else
      {
        uint64_t v24 = (__int16 ***)&off_1E66AB278;
      }
    }
    else if (v23 <= 47)
    {
      uint64_t v24 = &off_1E66AB048;
      if (v23 != 1 && v23 != 16) {
        uint64_t v24 = &off_1E66AB080;
      }
    }
    else if (v23 > 79)
    {
      if (v23 == 80) {
        uint64_t v24 = (__int16 ***)&off_1E66AB160;
      }
      else {
        uint64_t v24 = (__int16 ***)&off_1E66AB0F0;
      }
    }
    else if (v23 == 48)
    {
      uint64_t v24 = (__int16 ***)&off_1E66AB128;
    }
    else
    {
      uint64_t v24 = (__int16 ***)&off_1E66AB358;
    }
    *(void *)(*(void *)(v18 + 24) + 16 * (v21 & 0x7FFFFFFF)) = v24;
  }
  else
  {
    int v25 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 1646);
    sub_1CB8F1DC4(v50);
    if (v26 == 1) {
    int v28 = sub_1CB8F1DC4(v50);
    }
    if (v27 == 1) {
    if (v25)
    }
      int v29 = 4075;
    else {
      int v29 = 4077;
    }
    if (v25) {
      int v30 = 4072;
    }
    else {
      int v30 = 4073;
    }
    if (v28 == 16) {
      int v29 = v30;
    }
    if (v25) {
      int v31 = 4070;
    }
    else {
      int v31 = 4071;
    }
    if (v25) {
      int v32 = 4066;
    }
    else {
      int v32 = 4067;
    }
    if (v28 == 16) {
      unsigned int v33 = v32;
    }
    else {
      unsigned int v33 = v31;
    }
    if (a5) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = v29;
    }
    unsigned int v51 = (long long *)v50[0];
    LODWORD(v52) = 0;
    BOOL v35 = (llvm::MachineFunction *)sub_1CC739C54(&v44, v34, (unint64_t *)&v51, 1, 0, 0, 0);
    int v37 = v36;
    LODWORD(v51) = 1;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    llvm::MachineInstr::addOperand(v36, v35, (const llvm::MachineOperand *)&v51);
    LODWORD(v51) = 1;
    uint64_t v52 = 0;
    uint64_t v53 = a4;
    llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v51);
    sub_1CC73B5D0(v37, *(void *)(a1 + 72), *(void **)(a1 + 80));
    int v19 = (void *)((char *)v37 + 32);
  }
  uint64_t v38 = *(unsigned int *)(*v19 + 4);
  int v44 = &unk_1F261CD58;
  if ((void)v47)
  {
    int v39 = *(unsigned __int8 *)v47;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        uint64_t v41 = v47;
      }
      else {
        uint64_t v41 = 0;
      }
      if ((v39 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v42 = v41 + 8;
LABEL_68:
        unsigned int v51 = &v47;
        sub_1CC5FA668(v42 + 16, &v51);
        return v38;
      }
      if (v39 == 3) {
        *(void *)(v47 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v47 + 1) & 0x7F) == 2 || *(_DWORD *)(v47 + 12))
    {
      uint64_t v43 = *(void *)(v47 + 16);
      if ((v43 & 4) != 0)
      {
        unint64_t v42 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (v42) {
          goto LABEL_68;
        }
      }
    }
  }
  return v38;
}

uint64_t sub_1CB997700(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v7 = (unsigned __int8 *)*((unsigned int *)a3 + 2);
  uint64_t v8 = (_UNKNOWN **)&off_1E66AB358;
  switch((int)v7)
  {
    case 2:
      goto LABEL_8;
    case 3:
      uint64_t v8 = &off_1E66AB0F0;
      goto LABEL_8;
    case 4:
      uint64_t v8 = &off_1E66AB1D0;
      goto LABEL_8;
    case 5:
    case 7:
    case 8:
    case 10:
    case 11:
      __break(1u);
      goto LABEL_46;
    case 6:
      uint64_t v8 = &off_1E66AB240;
      goto LABEL_8;
    case 9:
      uint64_t v8 = &off_1E66AB2B0;
      goto LABEL_8;
    case 12:
      uint64_t v8 = &off_1E66AB2E8;
LABEL_8:
      uint64_t v6 = *(void *)(a2 + 24);
      uint64_t v13 = a4 + 864;
      if ((*(_WORD *)(a2 + 44) & 4) == 0)
      {
        uint64_t v4 = *(llvm::MachineFunction **)(v6 + 32);
        int v14 = *(unsigned __int8 **)(a2 + 56);
        unsigned int v51 = v14;
        if (v14) {
          llvm::MetadataTracking::track((uint64_t)&v51, v14, 2);
        }
        uint64_t v5 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v4, v13, &v51, 0);
        uint64_t v7 = v51;
        if (!v51) {
          goto LABEL_12;
        }
LABEL_46:
        int v39 = *v7;
        if ((v39 - 4) > 0x1E)
        {
          if ((v39 - 3) >= 0xFFFFFFFE) {
            uint64_t v45 = v7;
          }
          else {
            uint64_t v45 = 0;
          }
          if ((v39 - 3) < 0xFFFFFFFE)
          {
            if (v39 == 3) {
              *((void *)v7 + 1) = 0;
            }
            goto LABEL_12;
          }
          unint64_t v41 = (unint64_t)(v45 + 8);
        }
        else
        {
          if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 + 3)) {
            goto LABEL_12;
          }
          uint64_t v40 = *((void *)v7 + 2);
          if ((v40 & 4) == 0) {
            goto LABEL_12;
          }
          unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
          if (!v41) {
            goto LABEL_12;
          }
        }
        long long v47 = &v51;
        sub_1CC5FA668(v41 + 16, &v47);
LABEL_12:
        uint64_t v15 = *(void *)(v6 + 40);
        *(void *)(v5 + 24) = v15;
        uint64_t v16 = *(void *)(v15 + 32);
        uint64_t v17 = *(unsigned int *)(v5 + 40);
        if (v17)
        {
          uint64_t v32 = *(void *)(v5 + 32);
          uint64_t v33 = *(void *)(v16 + 40);
          uint64_t v34 = 32 * v17;
          do
          {
            if (!*(unsigned char *)v32)
            {
              uint64_t v35 = *(unsigned int *)(v32 + 4);
              if ((int)v35 >= 0) {
                uint64_t v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
              }
              else {
                uint64_t v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
              }
              uint64_t v37 = *v36;
              if (*v36)
              {
                uint64_t v38 = *(void *)(v37 + 16);
                *(void *)(v37 + 16) = v32;
                *(void *)(v32 + 16) = v38;
                if (*(unsigned char *)(v32 + 3))
                {
                  *(void *)(v32 + 24) = v37;
                }
                else
                {
                  *(void *)(v32 + 24) = 0;
                  uint64_t v36 = (uint64_t *)(v38 + 24);
                }
              }
              else
              {
                *(void *)(v32 + 16) = v32;
                *(void *)(v32 + 24) = 0;
              }
              *uint64_t v36 = v32;
            }
            v32 += 32;
            v34 -= 32;
          }
          while (v34);
        }
        uint64_t v18 = *(void *)(v16 + 728);
        if (v18) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 24))(v18, v5);
        }
        unint64_t v19 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v5 = v19 | *(void *)v5 & 7;
        *(void *)(v5 + 8) = a2;
        *(void *)(v19 + 8) = v5;
        *(void *)a2 = *(void *)a2 & 7 | v5;
        goto LABEL_23;
      }
      uint64_t v4 = *(llvm::MachineFunction **)(v6 + 32);
      uint64_t v20 = *(unsigned __int8 **)(a2 + 56);
      unsigned int v51 = v20;
      if (v20) {
        llvm::MetadataTracking::track((uint64_t)&v51, v20, 2);
      }
      uint64_t v5 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v4, v13, &v51, 0);
      if (!v51) {
        goto LABEL_19;
      }
      int v42 = *v51;
      if ((v42 - 4) > 0x1E)
      {
        if ((v42 - 3) >= 0xFFFFFFFE) {
          long long v46 = v51;
        }
        else {
          long long v46 = 0;
        }
        if ((v42 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v44 = (unint64_t)(v46 + 8);
LABEL_69:
          long long v47 = &v51;
          sub_1CC5FA668(v44 + 16, &v47);
          goto LABEL_19;
        }
        if (v42 == 3) {
          *((void *)v51 + 1) = 0;
        }
      }
      else if ((v51[1] & 0x7F) == 2 || *((_DWORD *)v51 + 3))
      {
        uint64_t v43 = *((void *)v51 + 2);
        if ((v43 & 4) != 0)
        {
          unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
          if (v44) {
            goto LABEL_69;
          }
        }
      }
LABEL_19:
      if (v6 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0) {
        *(_WORD *)(v5 + 44) |= 0xCu;
      }
      sub_1CC31973C((uint64_t *)(v6 + 40), (uint64_t *)a2, v5);
LABEL_23:
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, "", 0);
      *(void *)(*(void *)(a1 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v8;
      uint64_t v22 = *(void *)(a1 + 8);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      }
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      LODWORD(v47) = 0x1000000;
      HIDWORD(v47) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v4, (const llvm::MachineOperand *)&v47);
      uint64_t v23 = *((unsigned int *)a3 + 2);
      if (v23)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 2 * v23;
        int v26 = 25;
        do
        {
          unsigned int v27 = &(*a3)[v24];
          unsigned int v28 = *v27;
          unsigned int v29 = v27[1];
          uint64_t v48 = 0;
          LODWORD(v47) = 0;
          HIDWORD(v47) = v28;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v4, (const llvm::MachineOperand *)&v47);
          unsigned int v30 = v24 + 1;
          if (v29 != 16) {
            unsigned int v30 = v26;
          }
          LODWORD(v47) = 1;
          uint64_t v48 = 0;
          uint64_t v49 = v30;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v4, (const llvm::MachineOperand *)&v47);
          v24 += 2;
          ++v26;
        }
        while (v25 != v24);
      }
      uint64_t v12 = (unsigned int *)(*(void *)(v5 + 32) + 4);
      return *v12;
    default:
      uint64_t v12 = *a3;
      return *v12;
  }
}

__int16 ***sub_1CB997BA0(unint64_t *a1, const char *a2)
{
  unint64_t v3 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 4) == 0) {
    goto LABEL_6;
  }
  char v16 = 3;
  if ((v3 & 1) == 0) {
    char v16 = 19;
  }
  unint64_t v17 = v3 >> v16;
  unint64_t v18 = v3 & 0x8000000000000000 | (8 * v17) | 1;
  uint64_t v19 = 0x8000000000000;
  uint64_t v20 = (v3 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v17) | 2;
  if ((v3 & 2) != 0) {
    uint64_t v19 = 0x800000000000000;
  }
  else {
    uint64_t v20 = v18;
  }
  uint64_t v30 = v20;
  if ((v19 & v3) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    unint64_t v3 = *a1;
  }
  unsigned int v21 = (unsigned __int16)(v3 >> 3);
  uint64_t v22 = sub_1CB8F1DC4((unint64_t *)&v30);
  if (v23 == 1)
  {
    uint64_t v28 = v22;
    uint64_t v22 = v28;
  }
  if (v22 == 8)
  {
    uint64_t v30 = 129;
    v21 >>= 1;
  }
  uint64_t v24 = sub_1CB8F1DC4((unint64_t *)&v30);
  if (v25 == 1)
  {
    uint64_t v29 = v24;
    uint64_t v24 = v29;
  }
  switch(v21)
  {
    case 4u:
      int v26 = &off_1E66AB1D0;
      unsigned int v27 = &off_1E66AB320;
LABEL_54:
      if (v24 == 16) {
        return (__int16 ***)v27;
      }
      else {
        return (__int16 ***)v26;
      }
    case 3u:
      int v26 = &off_1E66AB0F0;
      unsigned int v27 = &off_1E66AB128;
      goto LABEL_54;
    case 2u:
      int v26 = (_UNKNOWN **)&off_1E66AB358;
      unsigned int v27 = &off_1E66AB0B8;
      goto LABEL_54;
  }
LABEL_6:
  int v6 = sub_1CB8F1DC4(a1);
  if (v5 == 1) {
  uint64_t v7 = &off_1E66AB048;
  }
  uint64_t v8 = &off_1E66AB2B0;
  if (v6 != 288) {
    uint64_t v8 = &off_1E66AB2E8;
  }
  int v9 = &off_1E66AB240;
  if (v6 != 192) {
    int v9 = &off_1E66AB278;
  }
  if (v6 <= 287) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = &off_1E66AB198;
  uint64_t v11 = &off_1E66AB1D0;
  if (v6 != 128) {
    uint64_t v11 = &off_1E66AB208;
  }
  if (v6 != 112) {
    uint64_t v10 = v11;
  }
  if (v6 <= 191) {
    uint64_t v8 = v10;
  }
  uint64_t v12 = (__int16 ***)&off_1E66AB160;
  if (v6 != 80) {
    uint64_t v12 = (__int16 ***)&off_1E66AB0F0;
  }
  uint64_t v13 = (__int16 ***)&off_1E66AB128;
  if (v6 != 48) {
    uint64_t v13 = (__int16 ***)&off_1E66AB358;
  }
  if (v6 <= 79) {
    uint64_t v12 = v13;
  }
  int v14 = &off_1E66AB080;
  if (v6 == 16) {
    int v14 = &off_1E66AB048;
  }
  if (v6 != 1) {
    uint64_t v7 = v14;
  }
  if (v6 > 47) {
    uint64_t v7 = v12;
  }
  if (v6 <= 111) {
    return v7;
  }
  else {
    return (__int16 ***)v8;
  }
}

void sub_1CB997E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 96))
  {
    v15[0] = sub_1CB9A4BCC;
    v15[1] = 0;
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    char v16 = 1;
    uint64_t v7 = v19;
    __dst = v19;
    uint64_t v18 = 0x600000000;
    if (&__dst != (void **)a5)
    {
      unsigned int v8 = *(_DWORD *)(a5 + 8);
      if (v8)
      {
        if (v8 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v19, *(const void **)a5, 8 * *(unsigned int *)(a5 + 8));
        LODWORD(v18) = v8;
      }
    }
    v19[12] = *(_DWORD *)(a5 + 64);
    sub_1CB9A56A8(a1, (uint64_t)v15);
    uint64_t v10 = __dst;
  }
  else
  {
    v11[0] = sub_1CB9A57DC;
    v11[1] = 0;
    v11[2] = a2;
    v11[3] = a3;
    uint64_t v7 = v14;
    v11[4] = a4;
    uint64_t v12 = v14;
    uint64_t v13 = 0x600000000;
    if (&v12 != (void **)a5)
    {
      unsigned int v9 = *(_DWORD *)(a5 + 8);
      if (v9)
      {
        if (v9 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v14, *(const void **)a5, 8 * *(unsigned int *)(a5 + 8));
        LODWORD(v13) = v9;
      }
    }
    v14[12] = *(_DWORD *)(a5 + 64);
    sub_1CB9A6258(a1, (uint64_t)v11);
    uint64_t v10 = v12;
  }
  if (v10 != v7) {
    free(v10);
  }
}

void sub_1CB997FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 96))
  {
    v15[0] = sub_1CB9A4BCC;
    v15[1] = 0;
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    char v16 = 0;
    uint64_t v7 = v19;
    __dst = v19;
    uint64_t v18 = 0x600000000;
    if (&__dst != (void **)a5)
    {
      unsigned int v8 = *(_DWORD *)(a5 + 8);
      if (v8)
      {
        if (v8 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v19, *(const void **)a5, 8 * *(unsigned int *)(a5 + 8));
        LODWORD(v18) = v8;
      }
    }
    v19[12] = *(_DWORD *)(a5 + 64);
    sub_1CB9A56A8(a1, (uint64_t)v15);
    uint64_t v10 = __dst;
  }
  else
  {
    v11[0] = sub_1CB9A57DC;
    v11[1] = 0;
    v11[2] = a2;
    v11[3] = a3;
    uint64_t v7 = v14;
    v11[4] = a4;
    uint64_t v12 = v14;
    uint64_t v13 = 0x600000000;
    if (&v12 != (void **)a5)
    {
      unsigned int v9 = *(_DWORD *)(a5 + 8);
      if (v9)
      {
        if (v9 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v14, *(const void **)a5, 8 * *(unsigned int *)(a5 + 8));
        LODWORD(v13) = v9;
      }
    }
    v14[12] = *(_DWORD *)(a5 + 64);
    sub_1CB9A6258(a1, (uint64_t)v11);
    uint64_t v10 = v12;
  }
  if (v10 != v7) {
    free(v10);
  }
}

void sub_1CB998184(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  int v12 = a8;
  int v11 = a2;
  char v10 = a7;
  if (a1)
  {
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(*(void *)a1 + 48))(a1, &v11, a3, a4, a5, a6, &v10, &v12);
  }
  else
  {
    sub_1CB920400();
    sub_1CB9981E4(v8, v9);
  }
}

void sub_1CB9981E4(unsigned int *a1, uint64_t a2)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a1[20];
  if (v3) {
    BOOL v4 = v3 == 2;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return;
  }
  v14[0] = v15;
  v14[1] = (void *)0x200000000;
  if (!a2)
  {
    sub_1CB920400();
LABEL_22:
    *((unsigned char *)v2 + 32) = 1;
LABEL_9:
    int v8 = *((unsigned __int8 *)v2 + 72);
    long long v9 = v5[3];
    *(_OWORD *)(v2 + 10) = v5[2];
    *(_OWORD *)(v2 + 14) = v9;
    if (!v8) {
      *((unsigned char *)v2 + 72) = 1;
    }
    goto LABEL_11;
  }
  unsigned int v2 = a1;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, void **))(*(void *)a2 + 48))(a2, a1, v14))
  {
    uint64_t v5 = v14[0];
    int v6 = *((unsigned __int8 *)v2 + 32);
    long long v7 = *((_OWORD *)v14[0] + 1);
    *(_OWORD *)unsigned int v2 = *(_OWORD *)v14[0];
    *((_OWORD *)v2 + 1) = v7;
    if (v6) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_11:
  v2[20] = 1;
  unint64_t v10 = *v2;
  if (*v2 == 7)
  {
    if (v2[4] == 64) {
      v2[20] = 2;
    }
    unsigned int RegSizeInBits = dword_1CDAF3B28[((v10 >> 8) & 0xFFF) - 1];
  }
  else
  {
    unsigned int v11 = v2[1];
    if (v11 - 1 <= 0x3FFFFFFE)
    {
      uint64_t v12 = *((void *)v2 + 13);
      unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v12 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*((void *)v2 + 14), v11, v12)+ 24)+ *(_DWORD *)(v12 + 272)* ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3)));
    }
    else
    {
      unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*((void *)v2 + 13), v11, *((void *)v2 + 12));
    }
  }
  v2[22] = RegSizeInBits;
  if (v14[0] != v15) {
    free(v14[0]);
  }
}

void sub_1CB9983A0(llvm::MachineFunction **a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v4;
  int v6 = *a1;
  uint64_t v5 = a1[1];
  if (LOBYTE(v15[0]))
  {
    long long v7 = (const llvm::MachineOperand *)v15;
  }
  else
  {
    *((void *)&v12 + 1) = 0;
    long long v13 = 0uLL;
    LODWORD(v12) = 0;
    DWORD1(v12) = DWORD1(v15[0]);
    long long v7 = (const llvm::MachineOperand *)&v12;
  }
  llvm::MachineInstr::addOperand(v5, v6, v7);
  long long v8 = *(_OWORD *)(a2 + 56);
  long long v12 = *(_OWORD *)(a2 + 40);
  long long v13 = v8;
  uint64_t v14 = *(void *)(a2 + 72);
  if ((_BYTE)v14)
  {
    unint64_t v10 = *a1;
    long long v9 = a1[1];
    if ((_BYTE)v12)
    {
      unsigned int v11 = (const llvm::MachineOperand *)&v12;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      v16[0] = 0;
      v16[1] = DWORD1(v12);
      uint64_t v19 = 0;
      unsigned int v11 = (const llvm::MachineOperand *)v16;
    }
    llvm::MachineInstr::addOperand(v9, v10, v11);
  }
}

uint64_t sub_1CB998450(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (**(unsigned __int16 **)(a1 + 16) - 65 > 1) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 40);
  sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 68), v8, (uint64_t)&v70);
  if (BYTE8(v71))
  {
    if (v71 < 0x41)
    {
      uint64_t v14 = (uint64_t)((void)v70 << -(uint64_t)v71) >> -(uint64_t)v71;
      char v15 = 1;
      goto LABEL_12;
    }
    if (v70) {
      MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
    }
  }
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 32) + 68);
  if ((v9 & 0x80000000) != 0) {
    unint64_t v10 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v10 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) != 121) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v12 + 32) + 48);
  if (result)
  {
    unsigned int v51 = *(void **)(result + 32);
    uint64_t v50 = (llvm::detail::DoubleAPFloat *)(result + 32);
    if (v51 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v50, (llvm::APInt *)&v70);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v50, (uint64_t)&v70);
    }
    if (v71 >= 0x41) {
      uint64_t v52 = (uint64_t *)v70;
    }
    else {
      uint64_t v52 = (uint64_t *)&v70;
    }
    uint64_t v14 = *v52;
    if (v71 >= 0x41 && v70) {
      MEMORY[0x1D25D9CB0]();
    }
    char v15 = 0;
LABEL_12:
    uint64_t v16 = *(void *)(a1 + 32);
    int v17 = *(_DWORD *)(v16 + 4);
    if (v17 < 0 && (v17 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
    {
      BOOL v18 = *(void *)(*(void *)(v8 + 424) + 8 * (v17 & 0x7FFFFFFF)) == 257;
      uint64_t v19 = 0xFFFFLL;
      if (*(void *)(*(void *)(v8 + 424) + 8 * (v17 & 0x7FFFFFFF)) == 257) {
        uint64_t v19 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      BOOL v18 = 0;
      uint64_t v19 = 0xFFFFLL;
    }
    int v20 = *(_DWORD *)(v16 + 36);
    unint64_t v21 = v19 & ~v14;
    if (v21 <= 0xFF)
    {
      uint64_t v22 = *(void *)(a1 + 24);
      long long v70 = &unk_1F261CD58;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v23 = *(void *)(v22 + 32);
      uint64_t v24 = *(void *)(v23 + 40);
      *(void *)&long long v71 = v23;
      *(void *)&long long v72 = v24;
      *((void *)&v71 + 1) = (*(uint64_t (**)(void))(**(void **)(v23 + 16) + 104))(*(void *)(v23 + 16));
      long long v79 = 0;
      if (!*((void *)&v72 + 1))
      {
LABEL_20:
        int v25 = v20;
        *((void *)&v72 + 1) = 0;
        goto LABEL_21;
      }
      int v53 = **((unsigned char **)&v72 + 1);
      if ((v53 - 4) > 0x1E)
      {
        if ((v53 - 3) >= 0xFFFFFFFE) {
          uint64_t v65 = *((void *)&v72 + 1);
        }
        else {
          uint64_t v65 = 0;
        }
        if ((v53 - 3) <= 0xFFFFFFFD)
        {
          if (v53 == 3) {
            *(void *)(*((void *)&v72 + 1) + 8) = 0;
          }
          goto LABEL_20;
        }
        unint64_t v55 = v65 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v72 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v72 + 1) + 12)) {
          goto LABEL_20;
        }
        uint64_t v54 = *(void *)(*((void *)&v72 + 1) + 16);
        if ((v54 & 4) == 0) {
          goto LABEL_20;
        }
        unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
        if (!v55) {
          goto LABEL_20;
        }
      }
      int v25 = v20;
      uint64_t v75 = (char *)&v72 + 8;
      sub_1CC5FA668(v55 + 16, &v75);
      *((void *)&v72 + 1) = v79;
      if (v79) {
        llvm::MetadataTracking::retrack((uint64_t)&v79, v79, (uint64_t)&v72 + 8);
      }
LABEL_21:
      *((void *)&v73 + 1) = a1;
      *(void *)&long long v74 = 0;
      *(void *)&long long v73 = *(void *)(a1 + 24);
      if ((long long *)(a1 + 56) == (long long *)((char *)&v72 + 8))
      {
LABEL_25:
        if (v18) {
          int v27 = 4768;
        }
        else {
          int v27 = 4778;
        }
        if (v18) {
          int v28 = 4755;
        }
        else {
          int v28 = 4765;
        }
        if (a2) {
          int v27 = v28;
        }
        if (v18) {
          int v29 = 379;
        }
        else {
          int v29 = 389;
        }
        if (v18) {
          int v30 = 366;
        }
        else {
          int v30 = 376;
        }
        if (a2) {
          int v29 = v30;
        }
        if (**(_WORD **)(a1 + 16) == 65) {
          unsigned int v31 = v29;
        }
        else {
          unsigned int v31 = v27;
        }
        LODWORD(v79) = v17;
        int v80 = 1;
        uint64_t v32 = (llvm::MachineFunction *)sub_1CC739C54(&v70, v31, (unint64_t *)&v79, 1, 0, 0, 0);
        uint64_t v34 = v33;
        LODWORD(v75) = 1;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        llvm::MachineInstr::addOperand(v33, v32, (const llvm::MachineOperand *)&v75);
        LODWORD(v75) = 1;
        uint64_t v76 = 0;
        unint64_t v77 = v21;
        llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v75);
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        LODWORD(v75) = 0;
        HIDWORD(v75) = v25;
        uint64_t v78 = 0;
        llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v75);
        LODWORD(v75) = 1;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v75);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
        sub_1CC73B5D0(v34, a3, a4);
        long long v70 = &unk_1F261CD58;
        goto LABEL_74;
      }
      if (!*((void *)&v72 + 1))
      {
LABEL_23:
        int v26 = *(unsigned __int8 **)(a1 + 56);
        *((void *)&v72 + 1) = v26;
        if (v26) {
          llvm::MetadataTracking::track((uint64_t)&v72 + 8, v26, 2);
        }
        goto LABEL_25;
      }
      int v56 = **((unsigned char **)&v72 + 1);
      if ((v56 - 4) > 0x1E)
      {
        if ((v56 - 3) >= 0xFFFFFFFE) {
          uint64_t v66 = *((void *)&v72 + 1);
        }
        else {
          uint64_t v66 = 0;
        }
        if ((v56 - 3) < 0xFFFFFFFE)
        {
          if (v56 == 3) {
            *(void *)(*((void *)&v72 + 1) + 8) = 0;
          }
          goto LABEL_23;
        }
        unint64_t v58 = v66 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v72 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v72 + 1) + 12)) {
          goto LABEL_23;
        }
        uint64_t v57 = *(void *)(*((void *)&v72 + 1) + 16);
        if ((v57 & 4) == 0) {
          goto LABEL_23;
        }
        unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
        if (!v58) {
          goto LABEL_23;
        }
      }
      uint64_t v75 = (char *)&v72 + 8;
      sub_1CC5FA668(v58 + 16, &v75);
      goto LABEL_23;
    }
    if (v14 > 255) {
      char v15 = 1;
    }
    if ((v15 & 1) == 0)
    {
      uint64_t v35 = *(void *)(a1 + 24);
      long long v70 = &unk_1F261CD58;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v36 = *(void *)(v35 + 32);
      uint64_t v37 = *(void *)(v36 + 40);
      *(void *)&long long v71 = v36;
      *(void *)&long long v72 = v37;
      *((void *)&v71 + 1) = (*(uint64_t (**)(void))(**(void **)(v36 + 16) + 104))(*(void *)(v36 + 16));
      long long v79 = 0;
      if (!*((void *)&v72 + 1))
      {
LABEL_49:
        *((void *)&v72 + 1) = 0;
        goto LABEL_50;
      }
      int v59 = **((unsigned char **)&v72 + 1);
      if ((v59 - 4) > 0x1E)
      {
        if ((v59 - 3) >= 0xFFFFFFFE) {
          uint64_t v67 = *((void *)&v72 + 1);
        }
        else {
          uint64_t v67 = 0;
        }
        if ((v59 - 3) <= 0xFFFFFFFD)
        {
          if (v59 == 3) {
            *(void *)(*((void *)&v72 + 1) + 8) = 0;
          }
          goto LABEL_49;
        }
        unint64_t v61 = v67 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v72 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v72 + 1) + 12)) {
          goto LABEL_49;
        }
        uint64_t v60 = *(void *)(*((void *)&v72 + 1) + 16);
        if ((v60 & 4) == 0) {
          goto LABEL_49;
        }
        unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
        if (!v61) {
          goto LABEL_49;
        }
      }
      uint64_t v75 = (char *)&v72 + 8;
      sub_1CC5FA668(v61 + 16, &v75);
      *((void *)&v72 + 1) = v79;
      if (v79) {
        llvm::MetadataTracking::retrack((uint64_t)&v79, v79, (uint64_t)&v72 + 8);
      }
LABEL_50:
      *((void *)&v73 + 1) = a1;
      *(void *)&long long v74 = 0;
      *(void *)&long long v73 = *(void *)(a1 + 24);
      if ((long long *)(a1 + 56) == (long long *)((char *)&v72 + 8))
      {
LABEL_54:
        if (v18) {
          int v39 = 4806;
        }
        else {
          int v39 = 4818;
        }
        if (v18) {
          int v40 = 4787;
        }
        else {
          int v40 = 4799;
        }
        if (a2) {
          int v39 = v40;
        }
        if (v18) {
          int v41 = 417;
        }
        else {
          int v41 = 429;
        }
        if (v18) {
          int v42 = 398;
        }
        else {
          int v42 = 410;
        }
        if (a2) {
          int v41 = v42;
        }
        if (**(_WORD **)(a1 + 16) == 65) {
          unsigned int v43 = v41;
        }
        else {
          unsigned int v43 = v39;
        }
        LODWORD(v79) = v17;
        int v80 = 1;
        unint64_t v44 = (llvm::MachineFunction *)sub_1CC739C54(&v70, v43, (unint64_t *)&v79, 1, 0, 0, 0);
        long long v46 = v45;
        LODWORD(v75) = 1;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        llvm::MachineInstr::addOperand(v45, v44, (const llvm::MachineOperand *)&v75);
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        LODWORD(v75) = 0;
        HIDWORD(v75) = v20;
        uint64_t v78 = 0;
        llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v75);
        LODWORD(v75) = 1;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v75);
        LODWORD(v75) = 1;
        uint64_t v76 = 0;
        unint64_t v77 = v14;
        llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v75);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
        sub_1CC73B5D0(v46, a3, a4);
        long long v70 = &unk_1F261CD58;
LABEL_74:
        if (*((void *)&v72 + 1))
        {
          int v47 = **((unsigned char **)&v72 + 1);
          if ((v47 - 4) > 0x1E)
          {
            if ((v47 - 3) >= 0xFFFFFFFE) {
              uint64_t v48 = *((void *)&v72 + 1);
            }
            else {
              uint64_t v48 = 0;
            }
            if ((v47 - 3) < 0xFFFFFFFE)
            {
              if (v47 == 3) {
                *(void *)(*((void *)&v72 + 1) + 8) = 0;
              }
              return 1;
            }
            unint64_t v49 = v48 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*((void *)&v72 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v72 + 1) + 12)) {
              return 1;
            }
            uint64_t v69 = *(void *)(*((void *)&v72 + 1) + 16);
            if ((v69 & 4) == 0) {
              return 1;
            }
            unint64_t v49 = v69 & 0xFFFFFFFFFFFFFFF8;
            if (!v49) {
              return 1;
            }
          }
          uint64_t v75 = (char *)&v72 + 8;
          sub_1CC5FA668(v49 + 16, &v75);
        }
        return 1;
      }
      if (!*((void *)&v72 + 1))
      {
LABEL_52:
        uint64_t v38 = *(unsigned __int8 **)(a1 + 56);
        *((void *)&v72 + 1) = v38;
        if (v38) {
          llvm::MetadataTracking::track((uint64_t)&v72 + 8, v38, 2);
        }
        goto LABEL_54;
      }
      int v62 = **((unsigned char **)&v72 + 1);
      if ((v62 - 4) > 0x1E)
      {
        if ((v62 - 3) >= 0xFFFFFFFE) {
          uint64_t v68 = *((void *)&v72 + 1);
        }
        else {
          uint64_t v68 = 0;
        }
        if ((v62 - 3) < 0xFFFFFFFE)
        {
          if (v62 == 3) {
            *(void *)(*((void *)&v72 + 1) + 8) = 0;
          }
          goto LABEL_52;
        }
        unint64_t v64 = v68 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v72 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v72 + 1) + 12)) {
          goto LABEL_52;
        }
        uint64_t v63 = *(void *)(*((void *)&v72 + 1) + 16);
        if ((v63 & 4) == 0) {
          goto LABEL_52;
        }
        unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (!v64) {
          goto LABEL_52;
        }
      }
      uint64_t v75 = (char *)&v72 + 8;
      sub_1CC5FA668(v64 + 16, &v75);
      goto LABEL_52;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CB998CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v137)(void **__return_ptr, void *, uint64_t);
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _DWORD *v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int *v179;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  llvm::MachineFunction *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  int v205;
  BOOL v207;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  llvm::MachineMemOperand **v222;
  int *v223;
  uint64_t v225;
  uint64_t v226;
  llvm::MachineMemOperand **v227;
  llvm::MachineMemOperand *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int IncompleteVirtualRegister;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  int v237;
  void *v238;
  uint64_t v239;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned int *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(void *, char *, uint64_t, uint64_t);
  uint64_t v272;
  void *v273;
  char *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void (*v280)(void *, char *, uint64_t, uint64_t);
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  char v297;
  uint64_t *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  unsigned __int8 *v302;
  llvm::MachineFunction **v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  int v309;
  int64_t v310;
  unint64_t v311;
  int v312;
  uint64_t v313;
  const char *v314;
  char v315;
  int v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  int v323;
  int v324;
  BOOL v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v332;
  char *v333;
  int *v334;
  unint64_t v335;
  uint64_t v337;
  int *v338;
  uint64_t v339;
  int *v340;
  int *v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  BOOL v346;
  BOOL v347;
  uint64_t v348;
  int *v349;
  unint64_t v350;
  uint64_t v352;
  int *v353;
  uint64_t v354;
  int *v355;
  int *v356;
  unsigned int v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  BOOL v361;
  BOOL v362;
  int *v363;
  unint64_t v364;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  int *v369;
  int *v370;
  unsigned int v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  BOOL v375;
  BOOL v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  uint64_t v384;
  void *v385;
  const char *v386;
  unsigned int v387;
  unint64_t *v388;
  uint64_t v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int *v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  const char *v414;
  unint64_t v415;
  unint64_t *v416;
  uint64_t v417;
  const char *v418;
  unint64_t v419;
  unint64_t *v420;
  uint64_t v421;
  const char *v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  unint64_t v434;
  int v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 *v438;
  unsigned __int8 *v439;
  char *v441;
  char *v442;
  uint64_t v443;
  __int16 v444;
  __int16 v445;
  uint64_t v446;
  uint64_t v448;
  uint64_t v450;
  uint64_t v451;
  unsigned char *v452;
  __int16 v453;
  uint64_t v454;
  void *v455;
  char v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t **v465;
  unsigned __int8 *v466;
  void *v467;
  uint64_t v468;
  unsigned char v469[64];
  void *__dst;
  uint64_t v471;
  uint64_t *v472;
  int v473;
  char v474;
  char v475;
  void *v476;
  uint64_t v477;
  void v478[6];

  uint64_t v3 = a1;
  v478[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v5 = *(void *)(a1 + 112) | *(void *)(a1 + 104);
  int v6 = v469;
  int v467 = v469;
  int v468 = 0x400000000;
  unint64_t v465 = (uint64_t **)(a1 + 144);
  *(_DWORD *)(a1 + 152) = 0;
  if (!*(_DWORD *)(a1 + 156)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **(void **)(a1 + 144) = a2;
  ++*(_DWORD *)(a1 + 152);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v3 + 72);
  int v458 = *(void *)(v3 + 88);
  uint64_t v459 = *(void **)(v3 + 80);
  int v476 = v478;
  int v477 = 0x400000000;
  uint64_t v10 = **(void **)(v3 + 144);
  int v450 = *(void *)(*(void *)(v10 + 16) + 8);
  uint64_t v461 = v3 + 192;
  int v463 = v9;
  uint64_t v464 = (uint64_t *)&v472;
  int v455 = (void *)(v4 + 424);
  BOOL v453 = *(_WORD *)(v10 + 44);
  uint64_t v457 = v3 + 216;
  unsigned int v451 = v3 + 280;
  uint64_t v454 = ~(_WORD)v5 & 0x7FF;
  uint64_t v460 = v3;
  uint64_t v462 = v4;
LABEL_3:
  while (2)
  {
    uint64_t v11 = v8 + 1;
    uint64_t v12 = *(void *)(v7 + 8 * v8);
    uint64_t v13 = v8;
    switch(v12)
    {
      case 1:
        uint64_t v167 = *(void *)(v7 + 8 * v11);
        uint64_t v168 = (void *)(v7 + 8 * v8);
        unint64_t v169 = v168[2];
        uint64_t v8 = v168[4];
        int v170 = **(unsigned __int16 **)((*v465)[v167] + 16);
        int v171 = v169 > v170 || v168[3] <= v170;
        if (!v171)
        {
          int v172 = *(void *)(v7 + 8 * (v13 - v169 + v170) + 40);
          if (v172) {
            goto LABEL_143;
          }
        }
        continue;
      case 2:
        uint64_t v146 = *(void *)(v7 + 8 * v11);
        int v147 = v7 + 8 * v8;
        int v148 = *(unsigned int *)(v147 + 16);
        uint64_t v8 = *(void *)(v147 + 40);
        int v149 = *(void *)((*v465)[v146] + 32);
        if (*(unsigned char *)(v149 + 32 * v148)) {
          continue;
        }
        int v150 = *(_DWORD *)(v149 + 32 * v148 + 4);
        if (v150 < 0 && (int v151 = v150 & 0x7FFFFFFF, v151 < *(_DWORD *)(v4 + 432))) {
          int v152 = *(void *)(*v455 + 8 * v151);
        }
        else {
          int v152 = 0;
        }
        int v316 = *(_DWORD *)(v3 + 272);
        if (v316)
        {
          int v317 = 64;
          int v318 = v451;
        }
        else
        {
          int v318 = *(void *)(v3 + 280);
          int v317 = *(_DWORD *)(v3 + 288);
          if (!v317)
          {
            char v431 = 0;
            goto LABEL_544;
          }
          uint64_t v3 = v460;
          uint64_t v4 = v462;
        }
        int v319 = v317 - 1;
        LODWORD(v320) = (v317 - 1) & (37 * (v152 & 0xFFFFFFFA | (4 * (v152 & 1)) | (v152 >> 2) & 1));
        int v321 = (uint64_t *)(v318 + 16 * v320);
        v322 = *v321;
        if (v152 == *v321) {
          goto LABEL_348;
        }
        uint64_t v323 = 1;
        while (v322 != 2)
        {
          v324 = v320 + v323++;
          int v320 = v324 & v319;
          v322 = *(void *)(v318 + 16 * v320);
          if (v152 == v322)
          {
            int v321 = (uint64_t *)(v318 + 16 * v320);
            goto LABEL_348;
          }
        }
        if (v316)
        {
          char v431 = 64;
          int v318 = v451;
        }
        else
        {
          int v318 = *(void *)(v460 + 280);
          char v431 = *(unsigned int *)(v460 + 288);
        }
LABEL_544:
        int v321 = (uint64_t *)(v318 + 16 * v431);
        uint64_t v3 = v460;
        uint64_t v4 = v462;
LABEL_348:
        v325 = (v316 & 1) == 0;
        uint64_t v326 = v451;
        if (v325) {
          uint64_t v326 = *(void *)(v3 + 280);
        }
        uint64_t v327 = *(_DWORD *)(v3 + 288);
        if (!v325) {
          uint64_t v327 = 64;
        }
        if ((uint64_t *)(v326 + 16 * v327) != v321)
        {
          uint64_t v328 = *(void *)(v147 + 24);
          uint64_t v329 = *(void *)(v147 + 32);
          unint64_t v330 = *((unsigned int *)v321 + 2);
          if (v328 <= v330 && v329 > v330)
          {
            int v172 = *(void *)(v7 + 8 * (v13 - v328 + v330) + 48);
            if (v172)
            {
LABEL_143:
              if (v477 >= (unint64_t)HIDWORD(v477)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v476[v477] = v8;
              LODWORD(v477) = v477 + 1;
              uint64_t v8 = v172;
            }
          }
        }
        continue;
      case 3:
        uint64_t v116 = v7 + 8 * v8;
        uint64_t v117 = *(void *)(v116 + 16);
        uint64_t v118 = *(unsigned int *)(v116 + 24);
        uint64_t v119 = *v465;
        uint64_t v120 = *(void *)((*v465)[v117] + 32);
        if (*(unsigned char *)(v120 + 32 * v118)) {
          goto LABEL_498;
        }
        uint64_t v121 = *(unsigned int *)(v120 + 32 * v118 + 4);
        if ((v121 - 1) <= 0x3FFFFFFE) {
          goto LABEL_498;
        }
        if ((v121 & 0x80000000) != 0) {
          uint64_t v122 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v122 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v121);
        }
        uint64_t v123 = *v122;
        if (!v123) {
          goto LABEL_539;
        }
        if (*(unsigned char *)(v123 + 3)) {
          goto LABEL_108;
        }
        uint64_t v123 = *(void *)(v123 + 24);
        if (v123)
        {
          uint64_t v3 = v460;
          uint64_t v4 = v462;
          if (*(unsigned char *)(v123 + 3)) {
LABEL_108:
          }
            uint64_t v124 = *(void *)(v123 + 8);
          else {
LABEL_539:
          }
            uint64_t v124 = 0;
        }
        else
        {
          uint64_t v124 = 0;
          uint64_t v3 = v460;
          uint64_t v4 = v462;
        }
        unint64_t v125 = *(void *)(v7 + 8 * v11);
        v8 += 4;
        unint64_t v126 = *(unsigned int *)(v3 + 152);
        if (v125 >= v126)
        {
          if (v126 >= *(_DWORD *)(v3 + 156)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v119[v126] = v124;
          ++*(_DWORD *)(v3 + 152);
        }
        else
        {
          v119[v125] = v124;
        }
        continue;
      case 4:
        if ((v454 & *(void *)(*(void *)(v3 + 248) + 8 * *(void *)(v7 + 8 * v11))) != 0) {
          goto LABEL_498;
        }
        v8 += 2;
        continue;
      case 5:
      case 6:
        v8 += 3;
        if (v12 == 6)
        {
          uint64_t v23 = *(void *)(v7 + 8 * v8);
          uint64_t v8 = v13 + 4;
        }
        else
        {
          uint64_t v23 = -1;
        }
        uint64_t v28 = **(unsigned __int16 **)((*v465)[*(void *)(v7 + 8 * v11)] + 16);
        if (*(void *)(v7 + 8 * v13 + 16) != v28 && v23 != v28) {
          goto LABEL_498;
        }
        continue;
      case 7:
        v8 += 3;
        int v53 = *(void **)(v7 + 8 * v13 + 16);
        uint64_t v82 = (void *)*(unsigned int *)((*v465)[*(void *)(v7 + 8 * v11)] + 40);
        goto LABEL_333;
      case 8:
      case 11:
        uint64_t v24 = v8 + 2;
        if (v12 == 11)
        {
          uint64_t v25 = *(unsigned int *)(v7 + 8 * v24);
          uint64_t v24 = v8 + 3;
        }
        else
        {
          uint64_t v25 = 1;
        }
        uint64_t v30 = *(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32);
        int v31 = *(unsigned __int8 *)(v30 + 32 * v25);
        uint64_t v32 = v30 + 32 * v25;
        if (v31 == 2)
        {
          uint64_t v33 = *(void *)(v32 + 16);
          unsigned int v34 = *(_DWORD *)(v33 + 32);
          if (v34 > 0x40) {
            uint64_t v35 = **(void **)(v33 + 24);
          }
          else {
            uint64_t v35 = (uint64_t)(*(void *)(v33 + 24) << -(char)v34) >> -(char)v34;
          }
        }
        else
        {
          uint64_t v35 = *(void *)(v32 + 16);
        }
        uint64_t v8 = v24 + 1;
        if (((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 48))(v3, *(void *)(v7 + 8 * v24), v35) & 1) == 0)goto LABEL_498; {
        continue;
        }
      case 9:
        uint64_t v127 = *(void *)(v7 + 8 * v11);
        uint64_t v128 = *(void *)(v7 + 8 * v8 + 16);
        LODWORD(v471) = 1;
        __dst = 0;
        uint64_t v129 = *(void *)(*(void *)((*v465)[v127] + 32) + 48);
        uint64_t v130 = (void **)(v129 + 24);
        unsigned int v131 = *(_DWORD *)(v129 + 32);
        if (v131 > 0x40)
        {
          if (&__dst != v130)
          {
            llvm::APInt::reallocate((uint64_t)&__dst, v131);
            if (v471 <= 0x40) {
              __dst = *v130;
            }
            else {
              memcpy(__dst, *v130, (((unint64_t)v471 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          __dst = *v130;
          LODWORD(v471) = v131;
        }
        v8 += 3;
        if ((*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 56))(v3, v128, &__dst)) {
          goto LABEL_286;
        }
        if (v477)
        {
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
LABEL_286:
          uint64_t v297 = 1;
        }
        else
        {
          uint64_t v297 = 0;
          unsigned __int8 v456 = 0;
        }
        if (v471 >= 0x41 && __dst) {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        }
        if ((v297 & 1) == 0) {
          goto LABEL_585;
        }
        continue;
      case 10:
        uint64_t v201 = *(void *)(v7 + 8 * v8 + 16);
        uint64_t v202 = *(void *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32) + 48);
        v203 = *(void *)(v202 + 32);
        if ((_UNKNOWN *)v203 == &unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v471, (const llvm::detail::DoubleAPFloat *)(v202 + 32));
        }
        else
        {
          uint64_t v471 = *(void *)(v202 + 32);
          if ((*(_DWORD *)(v203 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          unint64_t v204 = *(unsigned char *)(v202 + 52);
          int v205 = v204 & 7;
          int v474 = v474 & 0xF0 | v204 & 0xF;
          uint64_t v473 = *(_DWORD *)(v202 + 48);
          unint64_t v207 = (v204 & 6) != 0 && v205 != 3;
          if (v205 == 1 || v207)
          {
            v209 = *(unsigned int *)(v471 + 8);
            int v210 = v464;
            if ((v209 - 64) <= 0xFFFFFF7F) {
              int v210 = v472;
            }
            uint64_t v213 = *(uint64_t **)(v202 + 40);
            uint64_t v212 = (uint64_t *)(v202 + 40);
            v211 = v213;
            if ((*(_DWORD *)(*(v212 - 1) + 8) - 64) >= 0xFFFFFF80) {
              v211 = v212;
            }
            if (v209 <= 0xFFFFFFBF)
            {
              v214 = (unint64_t)(v209 + 64) >> 6;
              do
              {
                v215 = *v211++;
                *v210++ = v215;
                --v214;
              }
              while (v214);
            }
          }
        }
        v8 += 3;
        if ((*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 64))(v3, v201, &__dst)) {
          goto LABEL_193;
        }
        if (v477)
        {
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
LABEL_193:
          uint64_t v216 = 1;
        }
        else
        {
          uint64_t v216 = 0;
          unsigned __int8 v456 = 0;
        }
        if ((_UNKNOWN *)v471 == &unk_1CFB2E344)
        {
          sub_1CB845718(v464);
        }
        else if ((*(_DWORD *)(v471 + 8) - 64) <= 0xFFFFFF7F && v472)
        {
          MEMORY[0x1D25D9CB0](v472, 0x1000C8000313F17);
        }
        if ((v216 & 1) == 0) {
          goto LABEL_585;
        }
        continue;
      case 12:
        uint64_t v87 = *(void *)(v7 + 8 * v11);
        int v88 = *(_DWORD *)(v7 + 8 * v8 + 16);
        uint64_t v89 = (*v465)[v87];
        unint64_t v90 = *(void *)(v89 + 48);
        if (v90 < 8) {
          goto LABEL_82;
        }
        v8 += 3;
        if ((v90 & 7) != 0)
        {
          uint64_t v91 = (_DWORD *)(v90 & 0xFFFFFFFFFFFFFFF8);
          BOOL v92 = (*(void *)(v89 + 48) & 7) != 3 || v91 == 0;
          if (!v92 && *v91 == 1) {
            goto LABEL_398;
          }
LABEL_82:
          if (!v477) {
            goto LABEL_584;
          }
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
        }
        else
        {
          *(void *)(v89 + 48) = v90 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v89 = (*v465)[v87];
          unint64_t v90 = *(void *)(v89 + 48);
        }
        if (v90 < 8) {
          continue;
        }
LABEL_398:
        uint64_t v349 = (int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v350 = v90 & 7;
        if (v350)
        {
          if (v350 != 3 || v349 == 0) {
            continue;
          }
          int v354 = *v349;
          unint64_t v353 = v349 + 2;
          uint64_t v352 = v354;
          if (!v354) {
            continue;
          }
          int v355 = &v353[2 * v352];
          int v356 = v353;
        }
        else
        {
          *(void *)(v89 + 48) = v349;
          int v356 = (int *)(v89 + 48);
          int v355 = v356 + 2;
        }
        int v357 = v477;
        do
        {
          uint64_t v358 = *(unsigned __int16 *)(*(void *)v356 + 36);
          v359 = (v358 >> 8) & 0xF;
          uint64_t v360 = v358 >> 12;
          uint64_t v361 = v360 == 5 && v359 == 4;
          if (v361 || (v360 == 4 ? (v362 = v359 == 5) : (v362 = 0), v362))
          {
            LODWORD(v359) = 6;
          }
          else if (!byte_1CDAF3AB8[8 * v359 + v360])
          {
            LODWORD(v359) = v360;
          }
          if (v359 != v88)
          {
            if (!v357) {
              goto LABEL_584;
            }
            uint64_t v8 = v476[--v357];
            LODWORD(v477) = v357;
          }
          v356 += 2;
        }
        while (v356 != v355);
        continue;
      case 13:
        int v153 = *(void *)(v7 + 8 * v11);
        int v154 = *(unsigned int *)(v7 + 8 * v8 + 16);
        int v155 = (*v465)[v153];
        int v156 = *(void *)(v155 + 48);
        if (v156 < 8) {
          goto LABEL_130;
        }
        v8 += 3;
        if ((v156 & 7) != 0)
        {
          int v157 = (_DWORD *)(v156 & 0xFFFFFFFFFFFFFFF8);
          int v158 = (*(void *)(v155 + 48) & 7) != 3 || v157 == 0;
          if (!v158 && *v157 == 1) {
            goto LABEL_429;
          }
LABEL_130:
          if (!v477) {
            goto LABEL_584;
          }
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
        }
        else
        {
          *(void *)(v155 + 48) = v156 & 0xFFFFFFFFFFFFFFF8;
          int v155 = (*v465)[v153];
          int v156 = *(void *)(v155 + 48);
        }
        if (v156 < 8) {
          continue;
        }
LABEL_429:
        int v363 = (int *)(v156 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v364 = v156 & 7;
        if (v364)
        {
          if (v364 != 3 || v363 == 0) {
            continue;
          }
          v368 = *v363;
          v367 = v363 + 2;
          uint64_t v366 = v368;
          if (!v368) {
            continue;
          }
          uint64_t v369 = &v367[2 * v366];
          uint64_t v370 = v367;
        }
        else
        {
          *(void *)(v155 + 48) = v363;
          uint64_t v370 = (int *)(v155 + 48);
          uint64_t v369 = v370 + 2;
        }
        uint64_t v371 = v477;
        do
        {
          uint64_t v372 = *(unsigned __int16 *)(*(void *)v370 + 36);
          unint64_t v373 = (v372 >> 8) & 0xF;
          int v374 = v372 >> 12;
          int v375 = v374 == 5 && v373 == 4;
          if (v375 || (v374 == 4 ? (int v376 = v373 == 5) : (int v376 = 0), v376))
          {
            unint64_t v373 = 6;
          }
          else if (byte_1CDAF3AB8[8 * v373 + v374])
          {
            unint64_t v373 = v373;
          }
          else
          {
            unint64_t v373 = v374;
          }
          if (!byte_1CD973E80[8 * v373 + v154])
          {
            if (!v371) {
              goto LABEL_584;
            }
            uint64_t v8 = v476[--v371];
            LODWORD(v477) = v371;
          }
          v370 += 2;
        }
        while (v370 != v369);
        continue;
      case 14:
        uint64_t v73 = *(void *)(v7 + 8 * v11);
        uint64_t v74 = *(unsigned int *)(v7 + 8 * v8 + 16);
        uint64_t v75 = (*v465)[v73];
        unint64_t v76 = *(void *)(v75 + 48);
        if (v76 < 8) {
          goto LABEL_67;
        }
        v8 += 3;
        if ((v76 & 7) != 0)
        {
          unint64_t v77 = (_DWORD *)(v76 & 0xFFFFFFFFFFFFFFF8);
          BOOL v78 = (*(void *)(v75 + 48) & 7) != 3 || v77 == 0;
          if (!v78 && *v77 == 1) {
            goto LABEL_370;
          }
LABEL_67:
          if (!v477) {
            goto LABEL_584;
          }
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
        }
        else
        {
          *(void *)(v75 + 48) = v76 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v75 = (*v465)[v73];
          unint64_t v76 = *(void *)(v75 + 48);
        }
        if (v76 < 8) {
          continue;
        }
LABEL_370:
        int v334 = (int *)(v76 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v335 = v76 & 7;
        if (v335)
        {
          if (v335 != 3 || v334 == 0) {
            continue;
          }
          int v339 = *v334;
          unint64_t v338 = v334 + 2;
          uint64_t v337 = v339;
          if (!v339) {
            continue;
          }
          v340 = &v338[2 * v337];
          uint64_t v341 = v338;
        }
        else
        {
          *(void *)(v75 + 48) = v334;
          uint64_t v341 = (int *)(v75 + 48);
          v340 = v341 + 2;
        }
        uint64_t v342 = v477;
        do
        {
          v343 = *(unsigned __int16 *)(*(void *)v341 + 36);
          v344 = (v343 >> 8) & 0xF;
          v345 = v343 >> 12;
          uint64_t v346 = (v343 >> 12) == 5 && v344 == 4;
          if (v346 || (v345 == 4 ? (v347 = v344 == 5) : (v347 = 0), v347))
          {
            v348 = 6;
          }
          else if (byte_1CDAF3AB8[8 * v344 + v345])
          {
            v348 = (v343 >> 8) & 0xF;
          }
          else
          {
            v348 = v345;
          }
          if (!byte_1CDAF3AB8[8 * v74 + v348])
          {
            if (!v342) {
              goto LABEL_584;
            }
            uint64_t v8 = v476[--v342];
            LODWORD(v477) = v342;
          }
          v341 += 2;
        }
        while (v341 != v340);
        continue;
      case 15:
        v173 = *(void *)(v7 + 8 * v11);
        v174 = v7 + 8 * v8;
        uint64_t v175 = *(void *)(v174 + 16);
        v176 = *(void *)(v174 + 24);
        uint64_t v177 = (*v465)[v173];
        v178 = *(void *)(v177 + 48);
        if (v178 < 8) {
          goto LABEL_152;
        }
        if ((v178 & 7) != 0)
        {
          uint64_t v179 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
          if ((v178 & 7) != 3 || v179 == 0) {
LABEL_152:
          }
            unint64_t v406 = 0;
          else {
            unint64_t v406 = *v179;
          }
        }
        else
        {
          *(void *)(v177 + 48) = v178 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v406 = 1;
        }
        if (v175 >= v406) {
          goto LABEL_498;
        }
        int v407 = (*v465)[v173];
        uint64_t v410 = *(void *)(v407 + 48);
        uint64_t v408 = (unint64_t *)(v407 + 48);
        unint64_t v409 = v410;
        if ((v410 & 7) != 0) {
          uint64_t v408 = (unint64_t *)((v409 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else {
          *uint64_t v408 = v409 & 0xFFFFFFFFFFFFFFF8;
        }
        char v411 = v408[v175];
        uint64_t v413 = *(void *)(v411 + 24);
        uint64_t v412 = (unint64_t *)(v411 + 24);
        if ((v413 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          uint64_t v415 = (unint64_t)(sub_1CB8F1DC4(v412) + 7) >> 3;
          if (v414 == 1) {
        }
          }
        else
        {
          uint64_t v415 = -1;
        }
        v8 += 4;
        if (v415 != v176) {
          goto LABEL_498;
        }
        continue;
      case 16:
        uint64_t v93 = *(void *)(v7 + 8 * v11);
        uint64_t v94 = v7 + 8 * v8;
        uint64_t v96 = *(void *)(v94 + 16);
        uint64_t v95 = *(void *)(v94 + 24);
        uint64_t v97 = (*v465)[v93];
        unint64_t v98 = *(void *)(v97 + 48);
        if (v98 < 8) {
          goto LABEL_91;
        }
        if ((v98 & 7) != 0)
        {
          uint64_t v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
          if ((v98 & 7) != 3 || v99 == 0) {
LABEL_91:
          }
            unint64_t v392 = 0;
          else {
            unint64_t v392 = *v99;
          }
        }
        else
        {
          *(void *)(v97 + 48) = v98 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v392 = 1;
        }
        if (v96 >= v392) {
          goto LABEL_498;
        }
        unint64_t v393 = (*v465)[v93];
        int v396 = *(void *)(v393 + 48);
        v394 = (unint64_t *)(v393 + 48);
        v395 = v396;
        if ((v396 & 7) != 0)
        {
          v394 = (unint64_t *)((v395 & 0xFFFFFFFFFFFFFFF8) + 8);
          if (!v95) {
            goto LABEL_498;
          }
        }
        else
        {
          unsigned __int8 *v394 = v395 & 0xFFFFFFFFFFFFFFF8;
          if (!v95) {
            goto LABEL_498;
          }
        }
        v8 += 4 + (int)v95;
        v397 = *(_DWORD *)(v394[v96] + 16);
        uint64_t v398 = (int *)(v7 + 32 + 8 * v13);
        while (1)
        {
          uint64_t v399 = *v398;
          v398 += 2;
          if (v397 == v399) {
            goto LABEL_3;
          }
          LODWORD(v95) = v95 - 1;
          if (!v95) {
            goto LABEL_498;
          }
        }
      case 17:
        uint64_t v108 = *(void *)(v7 + 8 * v11);
        uint64_t v109 = v7 + 8 * v8;
        uint64_t v110 = *(void *)(v109 + 16);
        unint64_t v111 = *(unsigned int *)(v109 + 24);
        uint64_t v112 = (*v465)[v108];
        unint64_t v113 = *(void *)(v112 + 48);
        if (v113 < 8) {
          goto LABEL_101;
        }
        if ((v113 & 7) != 0)
        {
          long long v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
          if ((v113 & 7) != 3 || v114 == 0) {
LABEL_101:
          }
            uint64_t v400 = 0;
          else {
            uint64_t v400 = *v114;
          }
        }
        else
        {
          *(void *)(v112 + 48) = v113 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v400 = 1;
        }
        if (v110 >= v400) {
          goto LABEL_498;
        }
        uint64_t v401 = (*v465)[v108];
        uint64_t v404 = *(void *)(v401 + 48);
        v402 = (unint64_t *)(v401 + 48);
        uint64_t v403 = v404;
        if ((v404 & 7) != 0) {
          v402 = (unint64_t *)((v403 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else {
          uint64_t *v402 = v403 & 0xFFFFFFFFFFFFFFF8;
        }
        v8 += 4;
        v405 = (1 << *(unsigned char *)(v402[v110] + 34)) | *(void *)(v402[v110] + 8);
        if (1 << (63 - __clz(v405 & -v405)) < v111) {
          goto LABEL_498;
        }
        continue;
      case 18:
      case 19:
      case 20:
        uint64_t v14 = *(void *)(v7 + 8 * v11);
        uint64_t v15 = v7 + 8 * v8;
        uint64_t v16 = *(unsigned int *)(v15 + 24);
        uint64_t v17 = (*v465)[v14];
        uint64_t v18 = *(void *)(v17 + 32);
        if (*(unsigned char *)(v18 + 32 * v16)) {
          goto LABEL_498;
        }
        uint64_t v19 = *(void *)(v15 + 16);
        unint64_t v20 = *(void *)(v17 + 48);
        if (v20 < 8) {
          goto LABEL_12;
        }
        if ((v20 & 7) != 0)
        {
          unint64_t v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 7) != 3 || v21 == 0) {
LABEL_12:
          }
            uint64_t v377 = 0;
          else {
            uint64_t v377 = *v21;
          }
        }
        else
        {
          *(void *)(v17 + 48) = v20 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v377 = 1;
        }
        if (v19 >= v377) {
          goto LABEL_498;
        }
        v378 = (*v465)[v14];
        uint64_t v381 = *(void *)(v378 + 48);
        uint64_t v379 = (unint64_t *)(v378 + 48);
        v380 = v381;
        if ((v381 & 7) != 0) {
          uint64_t v379 = (unint64_t *)((v380 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else {
          *uint64_t v379 = v380 & 0xFFFFFFFFFFFFFFF8;
        }
        v382 = v379[v19];
        uint64_t v383 = *(_DWORD *)(v18 + 32 * v16 + 4);
        if (v383 < 0 && (v384 = v383 & 0x7FFFFFFF, v384 < *(_DWORD *)(v4 + 432))) {
          v385 = *(void **)(*v455 + 8 * v384);
        }
        else {
          v385 = 0;
        }
        __dst = v385;
        uint64_t v387 = sub_1CB8F1DC4((unint64_t *)&__dst);
        if (v386 == 1) {
        v8 += 4;
        }
        switch(v12)
        {
          case 20:
            uint64_t v421 = *(void *)(v382 + 24);
            uint64_t v420 = (unint64_t *)(v382 + 24);
            if ((v421 & 0xFFFFFFFFFFFFFFF9) == 0) {
              continue;
            }
            unint64_t v423 = sub_1CB8F1DC4(v420);
            if (v422 == 1) {
            if (v423 > v387)
            }
              continue;
            break;
          case 19:
            uint64_t v417 = *(void *)(v382 + 24);
            unint64_t v416 = (unint64_t *)(v382 + 24);
            if ((v417 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              unint64_t v419 = sub_1CB8F1DC4(v416);
              if (v418 == 1) {
              if (v419 < v387)
              }
                continue;
            }
            break;
          case 18:
            uint64_t v389 = *(void *)(v382 + 24);
            uint64_t v388 = (unint64_t *)(v382 + 24);
            if ((v389 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              __int16 v391 = sub_1CB8F1DC4(v388);
              if (v390 == 1) {
              if (v391 == v387)
              }
                continue;
            }
            break;
          default:
            continue;
        }
        goto LABEL_498;
      case 21:
      case 22:
        v8 += 2;
        if (v12 == 21) {
          uint64_t v26 = -1;
        }
        else {
          uint64_t v26 = 0;
        }
        if ((sub_1CC73F70C(*(_DWORD *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32) + 4), v4, v26, 0) & 1) == 0) {
          goto LABEL_498;
        }
        continue;
      case 23:
        v8 += 3;
        if (((*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v3 + 72))(v3, *(unsigned int *)(v7 + 8 * v13 + 16), *(void *)(*(void *)(v3 + 144) + 8 * *(void *)(v7 + 8 * v11)), v457) & 1) == 0)goto LABEL_498; {
        continue;
        }
      case 24:
        uint64_t v47 = *(void *)(v7 + 8 * v11);
        uint64_t v48 = v7 + 8 * v8;
        uint64_t v49 = *(unsigned int *)(v48 + 16);
        uint64_t v50 = *(void *)((*v465)[v47] + 32);
        if (*(unsigned char *)(v50 + 32 * v49)) {
          goto LABEL_498;
        }
        int v51 = *(_DWORD *)(v50 + 32 * v49 + 4);
        if (v51 < 0 && (uint64_t v52 = v51 & 0x7FFFFFFF, v52 < *(_DWORD *)(v4 + 432))) {
          int v53 = *(void **)(*v455 + 8 * v52);
        }
        else {
          int v53 = 0;
        }
        v8 += 4;
        uint64_t v82 = *(void **)(*(void *)(v3 + 240) + 8 * *(void *)(v48 + 24));
        goto LABEL_333;
      case 25:
        uint64_t v160 = *(void *)(v7 + 8 * v11);
        v161 = v7 + 8 * v8;
        uint64_t v162 = *v465;
        v163 = *(void *)((*v465)[v160] + 32) + 32 * *(unsigned int *)(v161 + 16);
        v164 = *(_DWORD *)(v163 + 4);
        if (v164 < 0 && (uint64_t v165 = v164 & 0x7FFFFFFF, v165 < *(_DWORD *)(v4 + 432))) {
          uint64_t v166 = *(void *)(*v455 + 8 * v165);
        }
        else {
          uint64_t v166 = 0;
        }
        int v284 = *(void *)(v161 + 24);
        __dst = (void *)v166;
        if (!v284)
        {
          uint64_t v285 = *(void *)(*(void *)(v162[v160] + 24) + 32);
          int v286 = 35;
          if ((v166 & 4) == 0) {
            int v286 = 19;
          }
          v287 = *(void *)(*(void *)v285 + 40);
          uint64_t v288 = *(void *)(v287 + 504);
          v289 = (v166 >> v286) & 0xFFFFFF;
          if (!v289) {
            goto LABEL_271;
          }
          v290 = *(unsigned int *)(v287 + 512);
          uint64_t v291 = *(void *)(v287 + 504);
          if (v290)
          {
            uint64_t v291 = v288;
            uint64_t v292 = v290;
            do
            {
              uint64_t v293 = v292 >> 1;
              uint64_t v294 = v291 + 16 * (v292 >> 1);
              unint64_t v295 = *(_DWORD *)(v294 + 8);
              int v296 = v294 + 16;
              v292 += ~(v292 >> 1);
              if (v295 < v289) {
                uint64_t v291 = v296;
              }
              else {
                uint64_t v292 = v293;
              }
            }
            while (v292);
          }
          if (v291 == v288 + 16 * v290 || *(_DWORD *)(v291 + 8) != v289) {
LABEL_271:
          }
            uint64_t v291 = v288;
          int v284 = *(unsigned int *)(v291 + 4);
        }
        if (!*(unsigned char *)v163 && (v166 & 0xFFFFFFFFFFFFFFF9) != 0 && (v166 & 2) != 0 && (v166 & 4) == 0)
        {
          uint64_t v305 = sub_1CB8F1DC4((unint64_t *)&__dst);
          if (v304 == 1) {
          if (v305 == v284)
          }
            goto LABEL_339;
        }
        if (!v477) {
          goto LABEL_584;
        }
        uint64_t v8 = v476[v477 - 1];
        LODWORD(v477) = v477 - 1;
        continue;
      case 26:
        uint64_t v250 = *(void *)(v7 + 8 * v11);
        v251 = v7 + 8 * v8;
        uint64_t v252 = *(unsigned int *)(v251 + 16);
        uint64_t v253 = *(void *)((*v465)[v250] + 32);
        if (!*(unsigned char *)(v253 + 32 * v252))
        {
          v254 = v253 + 32 * v252;
          v257 = *(_DWORD *)(v254 + 4);
          char v256 = (unsigned int *)(v254 + 4);
          v255 = v257;
          if (v257 < 0 && (uint64_t v258 = v255 & 0x7FFFFFFF, v258 < *(_DWORD *)(v4 + 432))) {
            uint64_t v259 = *(void *)(*v455 + 8 * v258);
          }
          else {
            uint64_t v259 = 0;
          }
          v8 += 4;
          int v332 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v458 + 24))(v458, *(void *)(v459[30] + 8 * *(unsigned int *)(v251 + 24)), v259);
          if (v332 == llvm::RegisterBankInfo::getRegBank(v458, *v256, v4, (uint64_t)v459)) {
            continue;
          }
        }
        goto LABEL_498;
      case 27:
        uint64_t v132 = *(void *)(v7 + 8 * v11);
        uint64_t v133 = v7 + 8 * v8;
        uint64_t v134 = *(unsigned int *)(v133 + 16);
        uint64_t v135 = *(void *)(v133 + 24);
        uint64_t v136 = *(void *)(v3 + 256) + 16 * *(void *)(v133 + 32);
        uint64_t v137 = *(void (**)(void **__return_ptr, void *, uint64_t))v136;
        long long v138 = *(void *)(v136 + 8);
        long long v139 = (void *)(v3 + (v138 >> 1));
        if (v138) {
          uint64_t v137 = *(void (**)(void **__return_ptr, void *, uint64_t))(*v139 + v137);
        }
        v137(&__dst, v139, *(void *)((*v465)[v132] + 32) + 32 * v134);
        if (!v475) {
          goto LABEL_498;
        }
        v8 += 5;
        sub_1CB9A6FAC((unsigned int *)(*(void *)(v3 + 120) + 144 * v135), (uint64_t)&__dst);
        if (v475)
        {
          int v298 = (uint64_t *)__dst;
          if (v471)
          {
            v299 = 32 * v471;
            uint64_t v300 = (char *)__dst - 32;
            do
            {
              v301 = *(char **)&v300[v299 + 24];
              if (&v300[v299] == v301)
              {
                (*(void (**)(char *))(*(void *)&v300[v299] + 32))(&v300[v299]);
              }
              else if (v301)
              {
                (*(void (**)(char *))(*(void *)v301 + 40))(v301);
              }
              v299 -= 32;
            }
            while (v299);
            int v298 = (uint64_t *)__dst;
          }
          if (v298 != v464) {
            free(v298);
          }
        }
        continue;
      case 28:
        uint64_t v140 = *(void *)(v7 + 8 * v11);
        uint64_t v141 = v7 + 8 * v8;
        uint64_t v142 = *(void *)((*v465)[v140] + 32) + 32 * *(unsigned int *)(v141 + 16);
        if (*(unsigned char *)v142) {
          goto LABEL_498;
        }
        uint64_t v143 = *(_DWORD *)(v142 + 4);
        if (v143 < 0 && (unint64_t v144 = v143 & 0x7FFFFFFF, v144 < *(_DWORD *)(v4 + 432))) {
          int v145 = *(void **)(*v455 + 8 * v144);
        }
        else {
          int v145 = 0;
        }
        int v313 = *(void *)(v141 + 24);
        __dst = v145;
        int v315 = sub_1CB8F1DC4((unint64_t *)&__dst);
        if (v314 == 1) {
        if ((sub_1CC70A570(v3, v142, v313 << -v315 >> -v315, v4) & 1) == 0)
        }
          goto LABEL_498;
LABEL_339:
        v8 += 4;
        continue;
      case 29:
        uint64_t v79 = v7 + 8 * v8;
        uint64_t v80 = *(unsigned int *)(v79 + 16);
        v8 += 4;
        uint64_t v81 = (*v465)[*(void *)(v7 + 8 * v11)];
        uint64_t v82 = *(void **)(v79 + 24);
        uint64_t v83 = *(void *)(v81 + 32);
        int v84 = *(unsigned __int8 *)(v83 + 32 * v80);
        if (v84 == 2)
        {
          uint64_t v306 = *(void *)(v83 + 32 * v80 + 16);
          unint64_t v307 = (void *)(v306 + 24);
          int v308 = *(unsigned int *)(v306 + 32);
          if (v308 >= 0x41)
          {
            uint64_t v309 = 0;
            int v310 = (unint64_t)(v308 + 63) >> 6;
            do
            {
              int v171 = v310-- < 1;
              if (v171) {
                break;
              }
              int v311 = *(void *)(*v307 + 8 * v310);
              v309 += __clz(v311);
            }
            while (!v311);
            int v312 = v308 | 0xFFFFFFC0;
            if ((v308 & 0x3F) == 0) {
              int v312 = 0;
            }
            if ((v308 - v309 - v312) > 0x40) {
              goto LABEL_498;
            }
            unint64_t v307 = (void *)*v307;
          }
          int v53 = (void *)*v307;
        }
        else
        {
          if (v84 != 1) {
            goto LABEL_498;
          }
          int v53 = *(void **)(v83 + 32 * v80 + 16);
        }
LABEL_333:
        if (v53 == v82) {
          continue;
        }
LABEL_498:
        if (!v477)
        {
LABEL_584:
          unsigned __int8 v456 = 0;
          goto LABEL_585;
        }
        uint64_t v8 = v476[v477 - 1];
        LODWORD(v477) = v477 - 1;
        continue;
      case 30:
        uint64_t v61 = *(void *)(v7 + 8 * v11);
        uint64_t v62 = v7 + 8 * v8;
        uint64_t v63 = (*v465)[v61];
        uint64_t v64 = *(unsigned int *)(v62 + 16);
        uint64_t v65 = *(void *)(v63 + 32);
        if (*(unsigned char *)(v65 + 32 * v64) != 17) {
          goto LABEL_498;
        }
        goto LABEL_73;
      case 31:
        uint64_t v85 = *(void *)(v7 + 8 * v11);
        uint64_t v62 = v7 + 8 * v8;
        uint64_t v86 = (*v465)[v85];
        uint64_t v64 = *(unsigned int *)(v62 + 16);
        uint64_t v65 = *(void *)(v86 + 32);
        if (*(unsigned char *)(v65 + 32 * v64) != 18) {
          goto LABEL_498;
        }
LABEL_73:
        v8 += 4;
        if (*(void *)(v62 + 24) != *(_DWORD *)(v65 + 32 * v64 + 16)) {
          goto LABEL_498;
        }
        continue;
      case 32:
        v8 += 3;
        if (*(unsigned char *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)
                      + 32 * *(unsigned int *)(v7 + 8 * v13 + 16)) != 4)
          goto LABEL_498;
        continue;
      case 33:
        v8 += 3;
        if (*(unsigned char *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)
                      + 32 * *(unsigned int *)(v7 + 8 * v13 + 16)) != 1)
          goto LABEL_498;
        continue;
      case 34:
        v8 += 2;
        if (!sub_1CC70A610(v3, *(llvm::MachineInstr **)(*(void *)(v3 + 144) + 8 * *(void *)(v7 + 8 * v11)), **(void **)(v3 + 144)))goto LABEL_498; {
        continue;
        }
      case 35:
        v264 = v7 + 8 * v8;
        v8 += 5;
        if (!llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)+ 32 * *(unsigned int *)(v264 + 16)), (const llvm::MachineOperand *)(*(void *)((*v465)[*(void *)(v264 + 24)] + 32)+ 32 * *(unsigned int *)(v264 + 32))))goto LABEL_498; {
        continue;
        }
      case 36:
        v265 = v7 + 8 * v8;
        v8 += 4;
        *(void *)(v457 + 8 * *(void *)(v265 + 24)) = *(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)
                                                         + 32 * *(unsigned int *)(v265 + 16);
        continue;
      case 37:
        goto LABEL_498;
      case 38:
        uint64_t v242 = *(void *)(v7 + 8 * v11);
        uint64_t v243 = v7 + 8 * v8;
        unint64_t v244 = *(void *)(v243 + 16);
        v245 = *(_DWORD *)(v243 + 24);
        uint64_t v246 = v244 + 1;
        if (v244 >= v468 && v246 != v468)
        {
          if (v246 >= v468)
          {
            if (v246 > HIDWORD(v468)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v468 != v246) {
              bzero((char *)v467 + 16 * v468, 16 * (v244 - v468) + 16);
            }
          }
          LODWORD(v468) = v244 + 1;
        }
        v8 += 4;
        char v248 = (*v465)[v242];
        v249 = (char *)v467 + 16 * v244;
        *v249 = *(void *)(*(void *)(v248 + 24) + 32);
        v249[1] = v248;
        uint64_t v4 = v462;
        *(void *)(*((void *)v467 + 2 * v244 + 1) + 16) = *(void *)(v463 + 8) + 48 * v245;
        continue;
      case 39:
        uint64_t v181 = *(void *)(v7 + 8 * v11);
        v182 = *(_DWORD *)(v7 + 8 * v8 + 16);
        v183 = v181 + 1;
        if (v181 >= v468 && v183 != v468)
        {
          if (v183 >= v468)
          {
            if (v183 > HIDWORD(v468)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v468 != v183) {
              bzero((char *)v467 + 16 * v468, 16 * (v181 - v468) + 16);
            }
          }
          LODWORD(v468) = v181 + 1;
        }
        uint64_t v185 = **v465;
        uint64_t v186 = *(void *)(v185 + 24);
        uint64_t v187 = *(void *)(v463 + 8) + 48 * v182;
        if ((*(_WORD *)(v185 + 44) & 4) == 0)
        {
          unint64_t v188 = *(llvm::MachineFunction **)(v186 + 32);
          __int16 v189 = *(unsigned __int8 **)(v185 + 56);
          uint64_t v466 = v189;
          uint64_t v4 = v462;
          if (v189) {
            llvm::MetadataTracking::track((uint64_t)&v466, v189, 2);
          }
          unint64_t v190 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v188, v187, &v466, 0);
          if (!v466) {
            goto LABEL_166;
          }
          int v432 = *v466;
          if ((v432 - 4) > 0x1E)
          {
            if ((v432 - 3) >= 0xFFFFFFFE) {
              unint64_t v438 = v466;
            }
            else {
              unint64_t v438 = 0;
            }
            if ((v432 - 3) >= 0xFFFFFFFE)
            {
              uint64_t v434 = (unint64_t)(v438 + 8);
              goto LABEL_572;
            }
            uint64_t v4 = v462;
            if (v432 == 3) {
              *((void *)v466 + 1) = 0;
            }
          }
          else
          {
            uint64_t v4 = v462;
            if ((v466[1] & 0x7F) == 2 || *((_DWORD *)v466 + 3))
            {
              unint64_t v433 = *((void *)v466 + 2);
              if ((v433 & 4) != 0)
              {
                uint64_t v434 = v433 & 0xFFFFFFFFFFFFFFF8;
                if (v434)
                {
LABEL_572:
                  __dst = &v466;
                  sub_1CC5FA668(v434 + 16, &__dst);
                  uint64_t v4 = v462;
                }
              }
            }
          }
LABEL_166:
          unint64_t v191 = *(void *)(v186 + 40);
          *(void *)(v190 + 24) = v191;
          v192 = *(void *)(v191 + 32);
          v193 = *(unsigned int *)(v190 + 40);
          uint64_t v3 = v460;
          if (v193)
          {
            uint64_t v424 = *(void *)(v190 + 32);
            uint64_t v425 = *(void *)(v192 + 40);
            unsigned int v426 = 32 * v193;
            do
            {
              if (!*(unsigned char *)v424)
              {
                uint64_t v427 = *(unsigned int *)(v424 + 4);
                if ((int)v427 >= 0) {
                  unint64_t v428 = (uint64_t *)(*(void *)(v425 + 272) + 8 * v427);
                }
                else {
                  unint64_t v428 = (uint64_t *)(*(void *)(v425 + 24) + 16 * (v427 & 0x7FFFFFFF) + 8);
                }
                uint64_t v429 = *v428;
                if (*v428)
                {
                  unint64_t v430 = *(void *)(v429 + 16);
                  *(void *)(v429 + 16) = v424;
                  *(void *)(v424 + 16) = v430;
                  if (*(unsigned char *)(v424 + 3))
                  {
                    *(void *)(v424 + 24) = v429;
                  }
                  else
                  {
                    *(void *)(v424 + 24) = 0;
                    unint64_t v428 = (uint64_t *)(v430 + 24);
                  }
                }
                else
                {
                  *(void *)(v424 + 16) = v424;
                  *(void *)(v424 + 24) = 0;
                }
                *unint64_t v428 = v424;
              }
              v424 += 32;
              v426 -= 32;
            }
            while (v426);
          }
          int v194 = *(void *)(v192 + 728);
          if (v194) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v194 + 24))(v194, v190);
          }
          v195 = *(void *)v185 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v190 = v195 | *(void *)v190 & 7;
          *(void *)(v190 + 8) = v185;
          *(void *)(v195 + 8) = v190;
          *(void *)uint64_t v185 = *(void *)v185 & 7 | v190;
          goto LABEL_310;
        }
        unint64_t v188 = *(llvm::MachineFunction **)(v186 + 32);
        v302 = *(unsigned __int8 **)(v185 + 56);
        uint64_t v466 = v302;
        uint64_t v4 = v462;
        if (v302) {
          llvm::MetadataTracking::track((uint64_t)&v466, v302, 2);
        }
        unint64_t v190 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v188, v187, &v466, 0);
        if (!v466) {
          goto LABEL_306;
        }
        uint64_t v435 = *v466;
        if ((v435 - 4) > 0x1E)
        {
          if ((v435 - 3) >= 0xFFFFFFFE) {
            unint64_t v439 = v466;
          }
          else {
            unint64_t v439 = 0;
          }
          if ((v435 - 3) >= 0xFFFFFFFE)
          {
            uint64_t v437 = (unint64_t)(v439 + 8);
LABEL_578:
            __dst = &v466;
            sub_1CC5FA668(v437 + 16, &__dst);
            uint64_t v4 = v462;
            goto LABEL_306;
          }
          uint64_t v4 = v462;
          if (v435 == 3) {
            *((void *)v466 + 1) = 0;
          }
        }
        else
        {
          uint64_t v4 = v462;
          if ((v466[1] & 0x7F) == 2 || *((_DWORD *)v466 + 3))
          {
            int v436 = *((void *)v466 + 2);
            if ((v436 & 4) != 0)
            {
              uint64_t v437 = v436 & 0xFFFFFFFFFFFFFFF8;
              if (v437) {
                goto LABEL_578;
              }
            }
          }
        }
LABEL_306:
        if (v186 + 48 != v185 && (*(_WORD *)(v185 + 44) & 4) != 0) {
          *(_WORD *)(v190 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v186 + 40), (uint64_t *)v185, v190);
        uint64_t v3 = v460;
LABEL_310:
        uint64_t v8 = v13 + 3;
        uint64_t v303 = (llvm::MachineFunction **)((char *)v467 + 16 * v181);
        *uint64_t v303 = v188;
        v303[1] = (llvm::MachineFunction *)v190;
        continue;
      case 40:
        uint64_t v71 = v7 + 8 * v8;
        v8 += 4;
        long long v72 = (llvm::MachineFunction **)((char *)v467 + 16 * *(void *)(v7 + 8 * v11));
        int v42 = (const llvm::MachineOperand *)(*(void *)((*v465)[*(void *)(v71 + 16)] + 32)
                                           + 32 * *(unsigned int *)(v71 + 24));
        goto LABEL_280;
      case 41:
        uint64_t v101 = *(void *)(v7 + 8 * v11);
        uint64_t v102 = v7 + 8 * v8;
        v8 += 5;
        uint64_t v103 = *(void *)(v102 + 32);
        uint64_t v104 = (const llvm::MachineOperand *)(*(void *)(*(void *)(*(void *)(v3 + 144)
                                                                    + 8 * *(void *)(v102 + 16))
                                                        + 32)
                                            + 32 * *(unsigned int *)(v102 + 24));
        int v105 = sub_1CC70A570(v3, (uint64_t)v104, 0, v4);
        uint64_t v106 = (llvm::MachineFunction **)((char *)v467 + 16 * v101);
        if (v105)
        {
          uint64_t v57 = *v106;
          int v56 = v106[1];
          uint64_t v471 = 0;
          HIDWORD(__dst) = v103;
          LODWORD(__dst) = 0;
          uint64_t v107 = v464;
          *uint64_t v464 = 0;
          v107[1] = 0;
          goto LABEL_366;
        }
        llvm::MachineInstr::addOperand(v106[1], *v106, v104);
        continue;
      case 42:
        uint64_t v196 = v7 + 8 * v8;
        uint64_t v197 = *(void *)(v196 + 16);
        uint64_t v198 = *(unsigned int *)(v196 + 24);
        v8 += 5;
        LOWORD(v196) = *(_DWORD *)(v196 + 32);
        uint64_t v199 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        LODWORD(v197) = *(_DWORD *)(*(void *)((*v465)[v197] + 32) + 32 * v198 + 4);
        uint64_t v57 = *(llvm::MachineFunction **)v199;
        int v56 = (llvm::MachineInstr *)*((void *)v199 + 1);
        uint64_t v471 = 0;
        int v59 = (v196 & 0xFFF) << 8;
        v200 = v464;
        *uint64_t v464 = 0;
        v200[1] = 0;
        HIDWORD(__dst) = v197;
        goto LABEL_253;
      case 43:
        uint64_t v54 = *(void *)(v7 + 8 * v8 + 16);
        uint64_t v274 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v57 = *(llvm::MachineFunction **)v274;
        int v56 = (llvm::MachineInstr *)*((void *)v274 + 1);
        v8 += 3;
        uint64_t v471 = 0;
        v275 = v464;
        *uint64_t v464 = 0;
        v275[1] = 0;
        int v59 = 50331648;
        goto LABEL_252;
      case 44:
        uint64_t v54 = *(void *)(v7 + 8 * v8 + 16);
        unint64_t v55 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v57 = *(llvm::MachineFunction **)v55;
        int v56 = (llvm::MachineInstr *)*((void *)v55 + 1);
        v8 += 3;
        uint64_t v471 = 0;
        unint64_t v58 = v464;
        *uint64_t v464 = 0;
        v58[1] = 0;
        int v59 = 0x2000000;
LABEL_252:
        HIDWORD(__dst) = v54;
LABEL_253:
        LODWORD(__dst) = v59;
        goto LABEL_366;
      case 45:
        int v159 = v7 + 8 * v8;
        v8 += 4;
        sub_1CB89517C((llvm::MachineFunction **)v467 + 2 * *(void *)(v7 + 8 * v11), *(_DWORD *)(v159 + 16), *(_DWORD *)(v159 + 24), 0);
        continue;
      case 46:
      case 47:
        v8 += 4;
        if (v12 == 47)
        {
          uint64_t v27 = *(void *)(v7 + 8 * v8);
          uint64_t v8 = v13 + 5;
        }
        else
        {
          LOWORD(v27) = 0;
        }
        uint64_t v36 = v7 + 8 * v13;
        uint64_t v37 = *(void *)(v36 + 24);
        uint64_t v38 = (llvm::MachineFunction **)((char *)v467 + 16 * *(void *)(v7 + 8 * v11));
        LODWORD(__dst) = *(void *)(v36 + 16);
        int v39 = sub_1CB9A74A0(v461, &__dst);
        sub_1CB89517C(v38, v39[1], v37, v27);
        continue;
      case 48:
        v8 += 3;
        uint64_t v46 = *(void *)(v7 + 8 * v13 + 16);
        uint64_t v60 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v57 = *(llvm::MachineFunction **)v60;
        int v56 = (llvm::MachineInstr *)*((void *)v60 + 1);
        goto LABEL_364;
      case 49:
        v8 += 3;
        uint64_t v66 = *(void *)(v3 + 120) + 144 * *(void *)(v7 + 8 * v13 + 16);
        uint64_t v67 = *(unsigned int *)(v66 + 8);
        if (!v67) {
          continue;
        }
        uint64_t v68 = *(void *)(v7 + 8 * v11);
        uint64_t v69 = 32 * v67;
        long long v70 = (void *)(*(void *)v66 + 24);
        do
        {
          if (!*v70) {
LABEL_607:
          }
            sub_1CB920400();
          (*(void (**)(void, char *))(*(void *)*v70 + 48))(*v70, (char *)v467 + 16 * v68);
          v70 += 4;
          v69 -= 32;
        }
        while (v69);
        continue;
      case 50:
        unint64_t v283 = *(void *)(*(void *)(*(void *)(v3 + 120) + 144 * *(void *)(v7 + 8 * v8 + 16))
                         + 32 * *(void *)(v7 + 8 * v8 + 24)
                         + 24);
        if (!v283) {
          goto LABEL_607;
        }
        v8 += 4;
        (*(void (**)(uint64_t, char *))(*(void *)v283 + 48))(v283, (char *)v467 + 16 * *(void *)(v7 + 8 * v11));
        continue;
      case 51:
        uint64_t v276 = *(void *)(v7 + 8 * v11);
        v277 = v7 + 8 * v8;
        v278 = *(void *)(v277 + 16);
        uint64_t v279 = *(void *)(v3 + 264) + 16 * *(void *)(v277 + 24);
        uint64_t v280 = *(void (**)(void *, char *, uint64_t, uint64_t))v279;
        uint64_t v281 = *(void *)(v279 + 8);
        uint64_t v282 = (void *)(v3 + (v281 >> 1));
        if (v281) {
          uint64_t v280 = *(void (**)(void *, char *, uint64_t, uint64_t))(*v282 + v280);
        }
        v8 += 4;
        v280(v282, (char *)v467 + 16 * v276, (*v465)[v278], 0xFFFFFFFFLL);
        continue;
      case 52:
        v266 = *(void *)(v7 + 8 * v11);
        v267 = (void *)(v7 + 8 * v8);
        uint64_t v269 = v267[2];
        uint64_t v268 = v267[3];
        uint64_t v270 = *(void *)(v3 + 264) + 16 * v267[4];
        uint64_t v271 = *(void (**)(void *, char *, uint64_t, uint64_t))v270;
        unint64_t v272 = *(void *)(v270 + 8);
        int v273 = (void *)(v3 + (v272 >> 1));
        if (v272) {
          uint64_t v271 = *(void (**)(void *, char *, uint64_t, uint64_t))(*v273 + v271);
        }
        v8 += 5;
        v271(v273, (char *)v467 + 16 * v266, (*v465)[v269], v268);
        continue;
      case 53:
        uint64_t v40 = *(void *)(v7 + 8 * v11);
        v8 += 3;
        uint64_t v41 = *(void *)((*v465)[*(void *)(v7 + 8 * v13 + 16)] + 32);
        int v43 = *(unsigned __int8 *)(v41 + 32);
        int v42 = (const llvm::MachineOperand *)(v41 + 32);
        if (v43 == 2)
        {
          uint64_t v44 = *(void *)(*(void *)((*v465)[*(void *)(v7 + 8 * v13 + 16)] + 32) + 48);
          unsigned int v45 = *(_DWORD *)(v44 + 32);
          if (v45 > 0x40) {
            uint64_t v46 = **(void **)(v44 + 24);
          }
          else {
            uint64_t v46 = (uint64_t)(*(void *)(v44 + 24) << -(char)v45) >> -(char)v45;
          }
          int v333 = (char *)v467 + 16 * v40;
          int v56 = (llvm::MachineInstr *)*((void *)v333 + 1);
          uint64_t v57 = *(llvm::MachineFunction **)v333;
LABEL_364:
          v261 = 1;
LABEL_365:
          LODWORD(__dst) = v261;
          uint64_t v471 = 0;
          unsigned int v472 = (uint64_t *)v46;
LABEL_366:
          llvm::MachineInstr::addOperand(v56, v57, (const llvm::MachineOperand *)&__dst);
        }
        else
        {
          long long v72 = (llvm::MachineFunction **)((char *)v467 + 16 * v40);
LABEL_280:
          llvm::MachineInstr::addOperand(v72[1], *v72, v42);
        }
        continue;
      case 54:
        v8 += 3;
        v260 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v46 = *(void *)(*(void *)((*v465)[*(void *)(v7 + 8 * v13 + 16)] + 32) + 48);
        uint64_t v57 = *(llvm::MachineFunction **)v260;
        int v56 = (llvm::MachineInstr *)*((void *)v260 + 1);
        v261 = 3;
        goto LABEL_365;
      case 55:
        v262 = v7 + 8 * v8;
        v8 += 4;
        uint64_t v263 = *((void *)v467 + 2 * *(void *)(v7 + 8 * v11) + 1);
        sub_1CC73AFF8(*(void *)(*(void *)(v263 + 24) + 32), (uint64_t)v459, *(void **)(*(void *)(*(void *)(v263 + 24) + 32) + 40), v463, v458, v263, *(void *)(v459[30] + 8 * *(unsigned int *)(v262 + 24)), *(void *)(v263 + 32) + 32 * *(unsigned int *)(v262 + 16));
        continue;
      case 56:
        v8 += 2;
        sub_1CC73B5D0(*((void **)v467 + 2 * *(void *)(v7 + 8 * v11) + 1), v463, v459);
        continue;
      case 57:
        v8 += 3;
        uint64_t v217 = *(void *)(v7 + 8 * v13 + 16);
        if (v217 == -1) {
          continue;
        }
        v218 = *(void *)(v7 + 8 * v11);
        while (1)
        {
          v219 = v8;
          uint64_t v220 = (*v465)[v217];
          uint64_t v222 = (llvm::MachineMemOperand **)(v220 + 48);
          uint64_t v221 = *(void *)(v220 + 48);
          if (v221 >= 8)
          {
            if ((v221 & 7) != 0)
            {
              uint64_t v223 = (int *)(v221 & 0xFFFFFFFFFFFFFFF8);
              if ((*(void *)(v220 + 48) & 7) != 3 || v223 == 0) {
                goto LABEL_212;
              }
              uint64_t v226 = *v223;
              uint64_t v222 = (llvm::MachineMemOperand **)(v223 + 2);
              v225 = v226;
              if (!v226) {
                goto LABEL_212;
              }
              uint64_t v227 = &v222[v225];
            }
            else
            {
              *(void *)(v220 + 48) = v221 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v227 = (llvm::MachineMemOperand **)(v220 + 56);
            }
            do
            {
              v228 = *v222++;
              llvm::MachineInstr::addMemOperand(*((llvm::MachineInstr **)v467 + 2 * v218 + 1), *((llvm::MachineFunction **)v467 + 2 * v218), v228);
            }
            while (v222 != v227);
          }
LABEL_212:
          ++v8;
          uint64_t v217 = *(void *)(v7 + 8 * v219);
          if (v217 == -1)
          {
            uint64_t v3 = v460;
            goto LABEL_3;
          }
        }
      case 58:
        v8 += 2;
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)(*v465)[*(void *)(v7 + 8 * v11)]);
        continue;
      case 59:
        int v452 = v6;
        v229 = *(void *)(v7 + 8 * v11);
        uint64_t v230 = *(void *)(*(void *)(v3 + 240) + 8 * *(void *)(v7 + 8 * v8 + 16));
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
        uint64_t v232 = v4;
        uint64_t v233 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v232 + 24) + 16 * v233) = 4;
        unint64_t v234 = *(unsigned int *)(v232 + 432);
        if (v233 >= v234)
        {
          v235 = v233 + 1;
          uint64_t v236 = *(void *)(v232 + 440);
          if (v233 >= *(unsigned int *)(v232 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v237 = *(_DWORD *)(v232 + 432);
          if (v235 != v234)
          {
            v238 = (void *)(*v455 + 8 * *(unsigned int *)(v232 + 432));
            v239 = ~v233 + v234;
            do
              *v238++ = v236;
            while (!__CFADD__(v239++, 1));
            uint64_t v237 = *(_DWORD *)(v462 + 432);
          }
          uint64_t v232 = v462;
          *(_DWORD *)(v462 + 432) = v237 + v235 - v234;
        }
        *(void *)(*(void *)(v232 + 424) + 8 * v233) = v230;
        uint64_t v241 = *(void *)(v232 + 8);
        int v6 = v452;
        uint64_t v3 = v460;
        uint64_t v4 = v232;
        if (v241) {
          (*(void (**)(uint64_t, void))(*(void *)v241 + 24))(v241, IncompleteVirtualRegister);
        }
        uint64_t v8 = v13 + 3;
        LODWORD(__dst) = v229;
        sub_1CB9A74A0(v461, &__dst)[1] = IncompleteVirtualRegister;
        continue;
      case 60:
        if (v468)
        {
          BOOL v441 = (char *)v467;
          uint64_t v442 = (char *)v467 + 16 * v468;
          while (1)
          {
            BOOL v443 = *((void *)v441 + 1);
            int v444 = *(_WORD *)(v443 + 44);
            int v445 = v453;
            if ((v450 & 0x200000) == 0)
            {
              int v446 = *(void *)(*(void *)(v443 + 16) + 8);
              if ((v444 & 0xC) != 0 && (v444 & 4) == 0)
              {
                unsigned int v448 = *((void *)v441 + 1);
                if ((v446 & 0x200000) != 0)
                {
LABEL_603:
                  int v445 = ~v444 & 0x4000 | v453;
                  goto LABEL_598;
                }
                while ((*(_WORD *)(v448 + 44) & 8) != 0)
                {
                  unsigned int v448 = *(void *)(v448 + 8);
                  if ((*(unsigned char *)(*(void *)(v448 + 16) + 10) & 0x20) != 0) {
                    goto LABEL_603;
                  }
                }
                int v445 = v453;
              }
              else
              {
                int v445 = v453;
                if ((v446 & 0x200000) != 0) {
                  goto LABEL_603;
                }
              }
            }
LABEL_598:
            *(_WORD *)(v443 + 44) = *(_WORD *)(v443 + 44) & 0xC | v445 & 0xFFF3;
            v441 += 16;
            unsigned __int8 v456 = 1;
            if (v441 == v442) {
              goto LABEL_585;
            }
          }
        }
        unsigned __int8 v456 = 1;
LABEL_585:
        if (v476 != v478) {
          free(v476);
        }
        if (v467 != v6) {
          free(v467);
        }
        return v456 & 1;
      case 61:
        v8 += 2;
        llvm::CodeGenCoverage::setCovered(a3, *(void *)(v7 + 8 * v11));
        continue;
      default:
        if (v477 >= (unint64_t)HIDWORD(v477)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v8 += 2;
        v476[v477] = *(void *)(v7 + 8 * v11);
        LODWORD(v477) = v477 + 1;
        continue;
    }
  }
}

void sub_1CB99B294(llvm::MachineFunction ***a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a2 + 80) >= 4)
  {
    uint64_t v3 = *a1;
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    long long v18 = v4;
    int v6 = *v3;
    uint64_t v5 = v3[1];
LABEL_5:
    llvm::MachineInstr::addOperand(v5, v6, (const llvm::MachineOperand *)v17);
    return;
  }
  long long v7 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v7;
  uint64_t v8 = (uint64_t)a1[2];
  if (*(unsigned char *)a1[1])
  {
    uint64_t v9 = *a1;
    llvm::MachineInstr::addOperand(v9[1], *v9, (const llvm::MachineOperand *)v16);
    int v6 = *v9;
    uint64_t v5 = v9[1];
    LODWORD(v17[0]) = 1;
    v17[1] = 0;
    *(void *)&long long v18 = 0;
    goto LABEL_5;
  }
  sub_1CB984008(v8, (uint64_t)v16, (uint64_t)v17);
  if (LODWORD(v17[1]))
  {
    uint64_t v10 = 32 * LODWORD(v17[1]);
    uint64_t v11 = (char *)v17[0] + 24;
    do
    {
      if (!*v11) {
        sub_1CB920400();
      }
      (*(void (**)(void, llvm::MachineFunction **))(*(void *)*v11 + 48))(*v11, *a1);
      v11 += 4;
      v10 -= 32;
    }
    while (v10);
  }
  if (v19)
  {
    uint64_t v12 = (long long *)v17[0];
    if (LODWORD(v17[1]))
    {
      uint64_t v13 = 32 * LODWORD(v17[1]);
      uint64_t v14 = (char *)v17[0] - 32;
      do
      {
        uint64_t v15 = *(char **)&v14[v13 + 24];
        if (&v14[v13] == v15)
        {
          (*(void (**)(char *))(*(void *)&v14[v13] + 32))(&v14[v13]);
        }
        else if (v15)
        {
          (*(void (**)(char *))(*(void *)v15 + 40))(v15);
        }
        v13 -= 32;
      }
      while (v13);
      uint64_t v12 = (long long *)v17[0];
    }
    if (v12 != &v18) {
      free(v12);
    }
  }
}

void sub_1CB99B454(uint64_t **a1, int a2, int a3, uint64_t a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (a3 != 5)
  {
    uint64_t v15 = (llvm::MachineFunction **)a1[2];
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    long long v63 = 0uLL;
    LODWORD(v62) = 0;
    HIDWORD(v62) = a2;
    *(void *)&long long v64 = 0;
    llvm::MachineInstr::addOperand(v16, v17, (const llvm::MachineOperand *)&v62);
    char v19 = *v15;
    long long v18 = v15[1];
    LODWORD(v62) = 1;
    long long v63 = 0uLL;
    llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v62);
    return;
  }
  uint64_t v6 = **a1;
  uint64_t v7 = *(void *)(v6 + 24);
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = *(void *)(v8 + 40);
  uint64_t v62 = &unk_1F261CD58;
  *(void *)&long long v63 = v8;
  long long v64 = v9;
  *((void *)&v63 + 1) = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 104))(*(void *)(v8 + 16));
  uint64_t v73 = 0;
  *((void *)&v65 + 1) = v6;
  *(void *)&long long v66 = 0;
  *(void *)&long long v65 = *(void *)(v6 + 24);
  *((void *)&v65 + 1) = v6;
  uint64_t v10 = (_OWORD *)(v6 + 56);
  if (v10 != (long long *)((char *)&v64 + 8))
  {
    uint64_t v11 = *(unsigned __int8 **)v10;
    *((void *)&v64 + 1) = v11;
    if (v11) {
      llvm::MetadataTracking::track((uint64_t)&v64 + 8, v11, 2);
    }
  }
  uint64_t v12 = a1[1];
  uint64_t v13 = *(unsigned int *)(a4 + 4);
  if ((v13 & 0x80000000) == 0)
  {
    unint64_t v61 = 0;
    uint64_t v14 = (uint64_t *)(v12[34] + 8 * v13);
LABEL_17:
    uint64_t v26 = *v14;
    if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
      uint64_t v26 = *(void *)(v26 + 24);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    if (**(_WORD **)(v27 + 16) == 121) {
      uint64_t v24 = *(void *)(*(void *)(v27 + 32) + 48);
    }
    else {
      uint64_t v24 = 0;
    }
    int v25 = 32;
    goto LABEL_22;
  }
  uint64_t v20 = v13 & 0x7FFFFFFF;
  if ((v13 & 0x7FFFFFFF) >= *((_DWORD *)v12 + 108))
  {
    unint64_t v61 = 0;
    uint64_t v14 = (uint64_t *)(v12[3] + 16 * v20 + 8);
    goto LABEL_17;
  }
  unint64_t v21 = *(void *)(v12[53] + 8 * v20);
  unint64_t v61 = v21;
  uint64_t v22 = *(void *)(v12[3] + 16 * v20 + 8);
  if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
    uint64_t v22 = *(void *)(v22 + 24);
  }
  uint64_t v23 = *(void *)(v22 + 8);
  if (**(_WORD **)(v23 + 16) == 121) {
    uint64_t v24 = *(void *)(*(void *)(v23 + 32) + 48);
  }
  else {
    uint64_t v24 = 0;
  }
  if (v21 == 129) {
    int v25 = 16;
  }
  else {
    int v25 = 32;
  }
LABEL_22:
  uint64_t v28 = *(void *)(v24 + 32);
  if ((_UNKNOWN *)v28 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v74, (const llvm::detail::DoubleAPFloat *)(v24 + 32));
  }
  else
  {
    uint64_t v74 = *(void *)(v24 + 32);
    if ((*(_DWORD *)(v28 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v29 = *(unsigned char *)(v24 + 52);
    int v30 = v29 & 7;
    char v77 = v77 & 0xF0 | v29 & 0xF;
    int v76 = *(_DWORD *)(v24 + 48);
    BOOL v32 = (v29 & 6) != 0 && v30 != 3;
    if (v30 == 1 || v32)
    {
      uint64_t v33 = *(unsigned int *)(v74 + 8);
      if ((v33 - 64) <= 0xFFFFFF7F) {
        unsigned int v34 = v75;
      }
      else {
        unsigned int v34 = (uint64_t *)&v75;
      }
      uint64_t v37 = *(uint64_t **)(v24 + 40);
      uint64_t v36 = (uint64_t *)(v24 + 40);
      uint64_t v35 = v37;
      if ((*(_DWORD *)(*(v36 - 1) + 8) - 64) >= 0xFFFFFF80) {
        uint64_t v35 = v36;
      }
      if (v33 <= 0xFFFFFFBF)
      {
        unint64_t v38 = (unint64_t)(v33 + 64) >> 6;
        do
        {
          uint64_t v39 = *v35++;
          *v34++ = v39;
          --v38;
        }
        while (v38);
      }
    }
  }
  if ((_UNKNOWN *)v74 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v74, (llvm::APInt *)&v67);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v74, (uint64_t)&v67);
  }
  uint64_t v40 = (char **)&v67;
  if (v68 >= 0x41) {
    uint64_t v40 = v67;
  }
  uint64_t v41 = *v40;
  if (v68 >= 0x41 && v67 != 0) {
    MEMORY[0x1D25D9CB0]();
  }
  if (v25 == 16) {
    unsigned int v43 = 4073;
  }
  else {
    unsigned int v43 = 4077;
  }
  int v44 = sub_1CB8F1DC4(&v61);
  if (v45 == 1)
  {
    int v60 = v44;
    int v44 = v60;
  }
  if (v44 > 111)
  {
    if (v44 <= 191)
    {
      if (v44 == 112)
      {
        uint64_t v46 = (__int16 ***)&off_1E66AB198;
      }
      else if (v44 == 128)
      {
        uint64_t v46 = (__int16 ***)&off_1E66AB1D0;
      }
      else
      {
        uint64_t v46 = (__int16 ***)&off_1E66AB208;
      }
    }
    else if (v44 > 287)
    {
      if (v44 == 288) {
        uint64_t v46 = (__int16 ***)&off_1E66AB2B0;
      }
      else {
        uint64_t v46 = (__int16 ***)&off_1E66AB2E8;
      }
    }
    else if (v44 == 192)
    {
      uint64_t v46 = (__int16 ***)&off_1E66AB240;
    }
    else
    {
      uint64_t v46 = (__int16 ***)&off_1E66AB278;
    }
  }
  else if (v44 <= 47)
  {
    uint64_t v46 = &off_1E66AB048;
    if (v44 != 1 && v44 != 16) {
      uint64_t v46 = &off_1E66AB080;
    }
  }
  else if (v44 > 79)
  {
    if (v44 == 80) {
      uint64_t v46 = (__int16 ***)&off_1E66AB160;
    }
    else {
      uint64_t v46 = (__int16 ***)&off_1E66AB0F0;
    }
  }
  else if (v44 == 48)
  {
    uint64_t v46 = (__int16 ***)&off_1E66AB128;
  }
  else
  {
    uint64_t v46 = (__int16 ***)&off_1E66AB358;
  }
  uint64_t v71 = v46;
  int v72 = 2;
  uint64_t v47 = (llvm::MachineFunction *)sub_1CC739C54(&v62, v43, (unint64_t *)&v71, 1, 0, 0, 0);
  uint64_t v49 = v48;
  LODWORD(v67) = 1;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  llvm::MachineInstr::addOperand(v48, v47, (const llvm::MachineOperand *)&v67);
  LODWORD(v67) = 1;
  uint64_t v68 = 0;
  uint64_t v69 = v41;
  llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v67);
  uint64_t v50 = (llvm::MachineFunction **)a1[2];
  int v51 = *(_DWORD *)(*((void *)v49 + 4) + 4);
  int v53 = *v50;
  uint64_t v52 = v50[1];
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  LODWORD(v67) = 0;
  HIDWORD(v67) = v51;
  uint64_t v70 = 0;
  llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v67);
  unint64_t v55 = *v50;
  uint64_t v54 = v50[1];
  LODWORD(v67) = 1;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  llvm::MachineInstr::addOperand(v54, v55, (const llvm::MachineOperand *)&v67);
  if ((_UNKNOWN *)v74 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v75);
  }
  else if ((*(_DWORD *)(v74 + 8) - 64) <= 0xFFFFFF7F && v75)
  {
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
  }
  uint64_t v62 = &unk_1F261CD58;
  if (*((void *)&v64 + 1))
  {
    int v56 = **((unsigned char **)&v64 + 1);
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        uint64_t v57 = *((void *)&v64 + 1);
      }
      else {
        uint64_t v57 = 0;
      }
      if ((v56 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v58 = v57 + 8;
LABEL_90:
        uint64_t v67 = (char **)&v64 + 1;
        sub_1CC5FA668(v58 + 16, &v67);
        return;
      }
      if (v56 == 3) {
        *(void *)(*((void *)&v64 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v64 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v64 + 1) + 12))
    {
      uint64_t v59 = *(void *)(*((void *)&v64 + 1) + 16);
      if ((v59 & 4) != 0)
      {
        unint64_t v58 = v59 & 0xFFFFFFFFFFFFFFF8;
        if (v58) {
          goto LABEL_90;
        }
      }
    }
  }
}

void sub_1CB99BBB0(llvm::MachineFunction ***a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 80) == 5)
  {
    uint64_t v3 = *a1;
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v21 = *(_OWORD *)a2;
    long long v22 = v4;
    llvm::MachineInstr::addOperand(v3[1], *v3, (const llvm::MachineOperand *)v21);
    return;
  }
  uint64_t v5 = (uint64_t)a1[2];
  long long v6 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v6;
  if ((DWORD1(v20[0]) & 0x80000000) != 0
    && (uint64_t v7 = a1[1], v8 = DWORD1(v20[0]) & 0x7FFFFFFF, v8 < *((_DWORD *)v7 + 108))
    && *((void *)v7[53] + v8) == 257)
  {
    sub_1CB982D0C(v5, (uint64_t)v20, (uint64_t)v21);
    if (LODWORD(v21[1]))
    {
      uint64_t v9 = 32 * LODWORD(v21[1]);
      uint64_t v10 = (char *)v21[0] + 24;
      while (*v10)
      {
        (*(void (**)(void, llvm::MachineFunction **))(*(void *)*v10 + 48))(*v10, *a1);
        v10 += 4;
        v9 -= 32;
        if (!v9) {
          goto LABEL_10;
        }
      }
      goto LABEL_36;
    }
LABEL_10:
    if (v23)
    {
      uint64_t v11 = (long long *)v21[0];
      if (!LODWORD(v21[1])) {
        goto LABEL_33;
      }
      uint64_t v12 = 32 * LODWORD(v21[1]);
      uint64_t v13 = (char *)v21[0] - 32;
      do
      {
        uint64_t v14 = *(char **)&v13[v12 + 24];
        if (&v13[v12] == v14)
        {
          (*(void (**)(char *))(*(void *)&v13[v12] + 32))(&v13[v12]);
        }
        else if (v14)
        {
          (*(void (**)(char *))(*(void *)v14 + 40))(v14);
        }
        v12 -= 32;
      }
      while (v12);
      goto LABEL_32;
    }
  }
  else
  {
    sub_1CB982A4C(v5, (uint64_t)v20, (uint64_t)v21);
    if (LODWORD(v21[1]))
    {
      uint64_t v15 = 32 * LODWORD(v21[1]);
      uint64_t v16 = (char *)v21[0] + 24;
      while (*v16)
      {
        (*(void (**)(void, llvm::MachineFunction **))(*(void *)*v16 + 48))(*v16, *a1);
        v16 += 4;
        v15 -= 32;
        if (!v15) {
          goto LABEL_23;
        }
      }
LABEL_36:
      sub_1CB920400();
    }
LABEL_23:
    if (v23)
    {
      uint64_t v11 = (long long *)v21[0];
      if (!LODWORD(v21[1])) {
        goto LABEL_33;
      }
      uint64_t v17 = 32 * LODWORD(v21[1]);
      long long v18 = (char *)v21[0] - 32;
      do
      {
        char v19 = *(char **)&v18[v17 + 24];
        if (&v18[v17] == v19)
        {
          (*(void (**)(char *))(*(void *)&v18[v17] + 32))(&v18[v17]);
        }
        else if (v19)
        {
          (*(void (**)(char *))(*(void *)v19 + 40))(v19);
        }
        v17 -= 32;
      }
      while (v17);
LABEL_32:
      uint64_t v11 = (long long *)v21[0];
LABEL_33:
      if (v11 != &v22) {
        free(v11);
      }
    }
  }
}

uint64_t sub_1CB99BE5C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v2 != 3 || (uint64_t Metadata = llvm::Value::getMetadata(a1, "agx.bind", 8uLL)) == 0)
  {
LABEL_19:
    if (v2) {
      unsigned int v13 = 10;
    }
    else {
      unsigned int v13 = 11;
    }
    if ((*(unsigned char *)(a1 + 33) & 0x1C) != 0) {
      return 13;
    }
    else {
      return v13;
    }
  }
  long long v4 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  if (*(unsigned char *)(*(void *)(*(void *)(v6 + 128) + 24) + 8) != 17) {
    goto LABEL_8;
  }
  if (*(unsigned char *)v5 != 1 || (uint64_t v7 = *(void *)(v5 + 128), *(unsigned char *)(v7 + 16) != 16))
  {
    uint64_t v5 = *(void *)(v5 - 8 * *(unsigned int *)(v5 + 8));
LABEL_8:
    uint64_t v7 = *(void *)(v5 + 128);
  }
  uint64_t v8 = (void *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    uint64_t v8 = (void *)*v8;
  }
  int v9 = *(_DWORD *)v8;
  uint64_t result = 12;
  BOOL v12 = (v9 - 93) <= 0x15 && ((1 << (v9 - 93)) & 0x300001) != 0 || v9 == 18;
  if (!v12 && v9 != 43) {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1CB99BF54(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8 || **(_WORD **)(v8 + 16) != 129 || *(_DWORD *)(v8 + 40) != 3) {
    return 0;
  }
  unsigned int v10 = *(_DWORD *)(*(void *)(v8 + 32) + 36);
  uint64_t result = sub_1CB99C080(a1, a2, &v10);
  if (result)
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(v8 + 32) + 68), a2, (uint64_t)&v11);
    if (v13)
    {
      if (v12 < 0x41)
      {
        **(void **)(a1 + 16) = v11 << -(char)v12 >> -(char)v12;
        return 1;
      }
      if (v11) {
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CB99C080(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = *a3;
  if ((v4 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    if (*(unsigned char *)(v6 + 3) & 1) != 0 || (uint64_t v6 = *(void *)(v6 + 24)) != 0 && (*(unsigned char *)(v6 + 3))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7)
      {
        if (**(_WORD **)(v7 + 16) == 127 && *(_DWORD *)(v7 + 40) == 3)
        {
          uint64_t v8 = *(void *)(v7 + 32);
          **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
          sub_1CC73C210(*(_DWORD *)(v8 + 68), a2, (uint64_t)&v10);
          if (v12)
          {
            if (v11 < 0x41)
            {
              **(void **)(a1 + 8) = v10 << -(char)v11 >> -(char)v11;
              return 1;
            }
            if (v10) {
              MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CB99C188(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 144))
  {
    if (*(unsigned char *)(a1 + 144))
    {
      sub_1CB986D14((unsigned int *)a1, (unsigned int *)a2);
    }
    else
    {
      *(void *)a1 = a1 + 16;
      *(void *)(a1 + 8) = 0x400000000;
      if (*(_DWORD *)(a2 + 8)) {
        sub_1CB986D14((unsigned int *)a1, (unsigned int *)a2);
      }
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 144))
  {
    sub_1CB987018((char **)a1);
    *(unsigned char *)(a1 + 144) = 0;
  }
  return a1;
}

uint64_t sub_1CB99C208(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  char v13 = (void *)a1[1];
  if (!*(unsigned char *)(a5 + 32))
  {
    *(_DWORD *)a5 = 1;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(unsigned char *)(a5 + 32) = 1;
  }
  sub_1CB986134((uint64_t)v34, *a1, v13[10], v13[11], a6, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v29, *a1, v13[10], v13[11], a7, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v24, *a1, v13[10], v13[11], (unsigned __int8 *)a5, 0, 0, 0, 0);
  if (v28 == 32) {
    int v14 = 5;
  }
  else {
    int v14 = 2;
  }
  if ((v27 & 0xFFFFFFFE) == 4) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  v46[0] = 5;
  v46[1] = v15;
  if (v38 == 32) {
    int v16 = 5;
  }
  else {
    int v16 = 2;
  }
  if ((v37 & 0xFFFFFFFE) == 4) {
    int v17 = 1;
  }
  else {
    int v17 = v16;
  }
  if (v33 == 32) {
    int v18 = 5;
  }
  else {
    int v18 = 2;
  }
  if ((v32 & 0xFFFFFFFE) == 4) {
    int v18 = 1;
  }
  v46[2] = v17;
  v46[3] = v18;
  uint64_t v19 = sub_1CB951118(a3, v46, 4, (unsigned char *)(v13[7] + 1328));
  int v44 = &off_1E66AB080;
  int v45 = 2;
  uint64_t v20 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, uint64_t))(*(void *)a2 + 32))(a2, v19, &v44, 1, 0, 0, a4 | 0x100000000);
  long long v22 = v21;
  int v39 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v39);
  if (v27 < 4)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v39 = 0;
    int v40 = v25;
    uint64_t v43 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
    int v39 = 1;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  else
  {
    int v39 = 1;
    uint64_t v41 = 0;
    uint64_t v42 = v26;
  }
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  if (v37 < 4)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v39 = 0;
    int v40 = v35;
    uint64_t v43 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
    int v39 = 1;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  else
  {
    int v39 = 1;
    uint64_t v41 = 0;
    uint64_t v42 = v36;
  }
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  if (v32 < 4)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v39 = 0;
    int v40 = v30;
    uint64_t v43 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
    int v39 = 1;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  else
  {
    int v39 = 1;
    uint64_t v41 = 0;
    uint64_t v42 = v31;
  }
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  int v39 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 32;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  return *((void *)v22 + 4);
}

uint64_t sub_1CB99C534(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v9 = (void *)a1[1];
  sub_1CB986134((uint64_t)v21, *a1, v9[10], v9[11], a4, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v17, *a1, v9[10], v9[11], a5, 0, 0, 0, 0);
  if (v24 > 3) {
    int v10 = 1;
  }
  else {
    int v10 = 5;
  }
  v32[0] = 5;
  v32[1] = v10;
  if (v20 > 3) {
    int v11 = 1;
  }
  else {
    int v11 = 5;
  }
  v32[2] = v11;
  uint64_t v12 = sub_1CB951118(45, v32, 3, (unsigned char *)(v9[7] + 1328));
  int v30 = &off_1E66AB080;
  int v31 = 2;
  char v13 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, uint64_t))(*(void *)a2 + 32))(a2, v12, &v30, 1, 0, 0, a3 | 0x100000000);
  int v15 = v14;
  int v25 = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v25);
  if (v24 < 4)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v25 = 0;
    int v26 = v22;
    uint64_t v29 = 0;
    llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
    int v25 = 1;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    int v25 = 1;
    uint64_t v27 = 0;
    uint64_t v28 = v23;
  }
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
  if (v20 < 4)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v25 = 0;
    int v26 = v18;
    uint64_t v29 = 0;
    llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
    int v25 = 1;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    int v25 = 1;
    uint64_t v27 = 0;
    uint64_t v28 = v19;
  }
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
  return *((void *)v15 + 4);
}

uint64_t sub_1CB99C758(uint64_t a1, void *a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, int a8, int a9)
{
  v71[3] = *MEMORY[0x1E4F143B8];
  int v16 = (uint64_t *)a2[1];
  uint64_t v17 = v16[5];
  sub_1CB986134((uint64_t)v61, v17, *(void *)(a1 + 80), *(void *)(a1 + 88), a4, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v60, v17, *(void *)(a1 + 80), *(void *)(a1 + 88), a5, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v59, v17, *(void *)(a1 + 80), *(void *)(a1 + 88), a6, 1, 0, 0, 0);
  sub_1CB986134((uint64_t)v58, v17, *(void *)(a1 + 80), *(void *)(a1 + 88), a7, 1, 0, 0, 0);
  int v18 = operator new(0x28uLL);
  void *v18 = &unk_1F25F0930;
  v18[1] = sub_1CB989BF0;
  v18[2] = 0;
  v18[3] = a1;
  v18[4] = v17;
  uint64_t v19 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v19 = &unk_1F25F0930;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v18 + 1);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v18 + 3);
  sub_1CB9981E4(v61, (uint64_t)v19);
  (*(void (**)(char *))(*(void *)v19 + 40))(v19);
  uint64_t v68 = (void *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
  sub_1CB9981E4(v60, (uint64_t)v68);
  if (v68 == v67)
  {
    (*(void (**)(void *))(v67[0] + 32))(v67);
  }
  else if (v68)
  {
    (*(void (**)(void *))(*v68 + 40))(v68);
  }
  long long v66 = (void *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
  sub_1CB9981E4(v59, (uint64_t)v66);
  if (v66 == v65)
  {
    (*(void (**)(void *))(v65[0] + 32))(v65);
  }
  else if (v66)
  {
    (*(void (**)(void *))(*v66 + 40))(v66);
  }
  long long v64 = (void *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
  sub_1CB9981E4(v58, (uint64_t)v64);
  if (v64 == v63)
  {
    (*(void (**)(void *))(v63[0] + 32))(v63);
  }
  else if (v64)
  {
    (*(void (**)(void *))(*v64 + 40))(v64);
  }
  uint64_t v21 = *v16;
  uint64_t v20 = v16[1];
  if (a8) {
    int v22 = 5;
  }
  else {
    int v22 = 2;
  }
  uint64_t v69 = (unsigned __int8 **)v71;
  LODWORD(v71[0]) = v22;
  uint64_t v70 = 0x500000001;
  uint64_t v23 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v21);
  if ((int)v61[20] >= 4)
  {
    unsigned int v25 = v70;
    unsigned int v26 = HIDWORD(v70);
    int v24 = 1;
  }
  else
  {
    if (v61[22] == 32) {
      int v24 = 5;
    }
    else {
      int v24 = 2;
    }
    unsigned int v25 = v70;
    unsigned int v26 = HIDWORD(v70);
  }
  if (v25 >= v26) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v69 + v25) = v24;
  unsigned int v27 = v70 + 1;
  LODWORD(v70) = v70 + 1;
  if ((int)v60[20] >= 4)
  {
    unsigned int v29 = HIDWORD(v70);
    int v28 = 1;
  }
  else
  {
    if (v60[22] == 32) {
      int v28 = 5;
    }
    else {
      int v28 = 2;
    }
    unsigned int v29 = HIDWORD(v70);
  }
  if (v27 >= v29) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v69 + v27) = v28;
  unsigned int v30 = v70 + 1;
  LODWORD(v70) = v70 + 1;
  if ((int)v59[20] > 3) {
    int v31 = 1;
  }
  else {
    int v31 = v22;
  }
  if (v30 >= HIDWORD(v70)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v69 + v30) = v31;
  unsigned int v32 = v70 + 1;
  LODWORD(v70) = v70 + 1;
  if ((int)v58[20] > 3) {
    int v22 = 1;
  }
  if (v32 >= HIDWORD(v70)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v69 + v32) = v22;
  LODWORD(v70) = v70 + 1;
  uint64_t v33 = (llvm::MachineFunction *)v69;
  unsigned int v34 = sub_1CB951118(44, v69, v70, v23);
  if (v33 != (llvm::MachineFunction *)v71) {
    free(v33);
  }
  int v35 = (llvm::MachineFunction *)a2[1];
  uint64_t v36 = *(void *)(a2[2] + 8) + 48 * v34;
  int v37 = (unsigned __int8 *)a2[4];
  uint64_t v62 = v37;
  if (v37) {
    llvm::MetadataTracking::track((uint64_t)&v62, v37, 2);
  }
  int v38 = llvm::MachineFunction::CreateMachineInstr(v35, v36, &v62, 0);
  if (v62)
  {
    int v54 = *v62;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        uint64_t v57 = v62;
      }
      else {
        uint64_t v57 = 0;
      }
      if ((v54 - 3) < 0xFFFFFFFE)
      {
        if (v54 == 3) {
          *((void *)v62 + 1) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v56 = (unint64_t)(v57 + 8);
    }
    else
    {
      if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
        goto LABEL_42;
      }
      uint64_t v55 = *((void *)v62 + 2);
      if ((v55 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
      if (!v56) {
        goto LABEL_42;
      }
    }
    uint64_t v69 = &v62;
    sub_1CC5FA668(v56 + 16, &v69);
  }
LABEL_42:
  int v39 = (unint64_t *)a2[6];
  uint64_t v40 = *(void *)(a2[5] + 40);
  *((void *)v38 + 3) = v40;
  uint64_t v41 = *(void *)(v40 + 32);
  uint64_t v42 = *((unsigned int *)v38 + 10);
  if (v42)
  {
    uint64_t v47 = *((void *)v38 + 4);
    uint64_t v48 = *(void *)(v41 + 40);
    uint64_t v49 = 32 * v42;
    do
    {
      if (!*(unsigned char *)v47)
      {
        uint64_t v50 = *(unsigned int *)(v47 + 4);
        if ((int)v50 >= 0) {
          int v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
        }
        else {
          int v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
        }
        uint64_t v52 = *v51;
        if (*v51)
        {
          uint64_t v53 = *(void *)(v52 + 16);
          *(void *)(v52 + 16) = v47;
          *(void *)(v47 + 16) = v53;
          if (*(unsigned char *)(v47 + 3))
          {
            *(void *)(v47 + 24) = v52;
          }
          else
          {
            *(void *)(v47 + 24) = 0;
            int v51 = (uint64_t *)(v53 + 24);
          }
        }
        else
        {
          *(void *)(v47 + 16) = v47;
          *(void *)(v47 + 24) = 0;
        }
        *int v51 = v47;
      }
      v47 += 32;
      v49 -= 32;
    }
    while (v49);
  }
  uint64_t v43 = *(void *)(v41 + 728);
  if (v43) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v43 + 24))(v43, v38);
  }
  unint64_t v44 = *v39 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v38 = v44 | *(void *)v38 & 7;
  *((void *)v38 + 1) = v39;
  *(void *)(v44 + 8) = v38;
  *int v39 = *v39 & 7 | (unint64_t)v38;
  uint64_t v45 = a2[7];
  if (v45) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v45 + 24))(v45, v38);
  }
  uint64_t v70 = 0;
  v71[0] = 0;
  v71[1] = 0;
  LODWORD(v69) = 0x1000000;
  HIDWORD(v69) = a9;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  uint64_t v70 = 0;
  v71[0] = 0;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  uint64_t v70 = 0;
  v71[0] = a3;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v69);
  uint64_t v69 = (unsigned __int8 **)v35;
  uint64_t v70 = (uint64_t)v38;
  sub_1CB9983A0((llvm::MachineFunction **)&v69, (uint64_t)v61);
  sub_1CB9983A0((llvm::MachineFunction **)&v69, (uint64_t)v60);
  sub_1CB9983A0((llvm::MachineFunction **)&v69, (uint64_t)v59);
  sub_1CB9983A0((llvm::MachineFunction **)&v69, (uint64_t)v58);
  return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
}

BOOL sub_1CB99CF74(void *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v139[16] = *MEMORY[0x1E4F143B8];
  llvm::SampleInfo::SampleInfo((uint64_t)v104, a3, a5);
  char v103 = 0;
  (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t, void, void, void, char *))(*a1 + 48))(v90, a1, a4, a2, v111, v112, v113, &v103);
  BOOL v8 = 0;
  if (v103) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v102 == 0;
  }
  if (v9) {
    return v8;
  }
  int v89 = v98;
  long long v86 = v90[0];
  long long v87 = v90[1];
  uint64_t v88 = v91;
  long long v83 = v92;
  long long v84 = v93;
  uint64_t v85 = v94;
  long long v80 = v95;
  long long v81 = v96;
  uint64_t v82 = v97;
  long long v77 = v99;
  long long v78 = v100;
  uint64_t v79 = v101;
  uint64_t v137 = v139;
  uint64_t v138 = 0x400000000;
  int v10 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v114);
  uint64_t v11 = v106 + v117;
  char v12 = (*(uint64_t (**)(void))(*(void *)a1[1] + 200))(a1[1]);
  if (v105) {
    char v13 = v12;
  }
  else {
    char v13 = 0;
  }
  int v14 = (*(uint64_t (**)(void))(*(void *)a1[1] + 168))(a1[1]);
  if (v116 == -1) {
    int v15 = 0;
  }
  else {
    int v15 = v14;
  }
  char v16 = v15 & v13;
  if ((v123 & v115) == 0xFFFFFFFF) {
    char v16 = v13;
  }
  if (v11 == 2) {
    char v17 = ((v121 == -1) | ~(_BYTE)v15) & v16;
  }
  else {
    char v17 = v16;
  }
  if (v11 == 1)
  {
    if (v123 == -1)
    {
      if (v115 == -1) {
        LOBYTE(v15) = 0;
      }
      if (v15)
      {
LABEL_19:
        if ((v120 & v122) == 0xFFFFFFFF) {
          char v18 = v17;
        }
        else {
          char v18 = 0;
        }
        v134[0] = 0;
        uint64_t v133 = 0;
        uint64_t v132 = v10;
        if ((v18 & 1) == 0)
        {
LABEL_69:
          uint64_t v33 = &v132;
          do
          {
            (*(void (**)(long long *__return_ptr, void *, void *))(*a1 + 168))(&v135, a1, *v33);
            BOOL v35 = v135 == 1 && *(void *)&v136[0] == 0xFFFFFFFFLL;
            v103 |= v35;
            if (v138 >= HIDWORD(v138))
            {
              if (v137 > &v135 || (char *)v137 + 32 * v138 <= (char *)&v135) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v36 = (char *)v137 + 32 * v138;
            long long v37 = v136[0];
            *uint64_t v36 = v135;
            v36[1] = v37;
            LODWORD(v138) = v138 + 1;
            ++v33;
            --v11;
          }
          while (v11);
          goto LABEL_85;
        }
        goto LABEL_34;
      }
    }
    else if (v15)
    {
      goto LABEL_19;
    }
    v134[0] = 0;
    uint64_t v133 = 0;
    uint64_t v132 = v10;
    if ((v17 & 1) == 0) {
      goto LABEL_69;
    }
LABEL_34:
    uint64_t v21 = 1;
    goto LABEL_35;
  }
  uint64_t v133 = 0;
  uint64_t v132 = 0;
  v134[0] = 0;
  if (!v11)
  {
    uint64_t v132 = v10;
    if ((v17 & 1) == 0)
    {
LABEL_84:
      uint64_t v11 = 0;
      goto LABEL_85;
    }
    uint64_t v23 = 0;
    uint64_t v130 = 0;
    uint64_t v129 = 0;
    v131[0] = 0;
    goto LABEL_46;
  }
  uint64_t v19 = &v132;
  (*(void (**)(void *, void *, void **, uint64_t))(*a1 + 120))(a1, v10, &v132, v11);
  uint64_t v20 = v11;
  do
  {
    if (!*v19)
    {
      (*(void (**)(void *, void *, void **, uint64_t))(*a1 + 80))(a1, v10, &v137, v11);
      goto LABEL_84;
    }
    ++v19;
    --v20;
  }
  while (v20);
  if ((v17 & 1) == 0) {
    goto LABEL_69;
  }
  uint64_t v21 = v11;
LABEL_35:
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v130 = 0;
  uint64_t v129 = 0;
  v131[0] = 0;
  while (1)
  {
    *(void *)&long long v135 = 0;
    unint64_t v126 = 0;
    if (!(*(unsigned int (**)(void *, void, long long *, void **))(*a1 + 128))(a1, *(&v132 + v22), &v135, &v126))
    {
      *(void *)&long long v135 = 0;
      unint64_t v126 = 0;
      if (!(*(unsigned int (**)(void *, void, long long *, void **))(*a1 + 136))(a1, *(&v132 + v22), &v135, &v126))break; {
    }
      }
    *(&v129 + v22) = (void *)v135;
    if (v23)
    {
      if (v23 != v126) {
        break;
      }
    }
    else
    {
      uint64_t v23 = v126;
    }
    if (v21 == ++v22) {
      goto LABEL_55;
    }
  }
  if (v11 != v22) {
    goto LABEL_69;
  }
LABEL_55:
  int v28 = &v129;
  do
  {
    (*(void (**)(long long *__return_ptr, void *, void *))(*a1 + 168))(&v135, a1, *v28);
    BOOL v30 = v135 == 1 && *(void *)&v136[0] == 0xFFFFFFFFLL;
    v103 |= v30;
    if (v138 >= HIDWORD(v138))
    {
      if (v137 > &v135 || (char *)v137 + 32 * v138 <= (char *)&v135) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v31 = (char *)v137 + 32 * v138;
    long long v32 = v136[0];
    _OWORD *v31 = v135;
    v31[1] = v32;
    LODWORD(v138) = v138 + 1;
    ++v28;
    --v21;
  }
  while (v21);
LABEL_46:
  (*(void (**)(long long *__return_ptr, void *, void *))(*a1 + 168))(&v135, a1, v23);
  BOOL v25 = v135 == 1 && *(void *)&v136[0] == 0xFFFFFFFFLL;
  v103 |= v25;
  if (v138 >= HIDWORD(v138))
  {
    if (v137 > &v135 || (char *)v137 + 32 * v138 <= (char *)&v135) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v26 = (char *)v137 + 32 * v138;
  long long v27 = v136[0];
  *unsigned int v26 = v135;
  v26[1] = v27;
  LODWORD(v138) = v138 + 1;
  uint64_t v11 = 1;
LABEL_85:
  if (!v103)
  {
    unsigned int v76 = -1;
    *(void *)&long long v135 = v136;
    *((void *)&v135 + 1) = 0x400000000;
    (*(void (**)(void *, unsigned char *, uint64_t, uint64_t, unsigned int *, long long *, char *))(*a1 + 256))(a1, v104, a4, a2, &v76, &v135, &v103);
    if (v103)
    {
      BOOL v8 = 0;
LABEL_117:
      if ((_OWORD *)v135 != v136) {
        free((void *)v135);
      }
      goto LABEL_119;
    }
    uint64_t v132 = v134;
    uint64_t v133 = 0x200000000;
    if (v116 != -1 && (*(unsigned int (**)(void))(*(void *)a1[1] + 168))(a1[1]))
    {
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v116);
      (*(void (**)(void *, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v38, &v132, 0xFFFFFFFFLL);
    }
    if (v103)
    {
      BOOL v8 = 0;
LABEL_115:
      if (v132 != v134) {
        free(v132);
      }
      goto LABEL_117;
    }
    BOOL v39 = (v123 & v119) != -1;
    uint64_t v129 = v131;
    uint64_t v130 = 0x200000000;
    (*(void (**)(void *, unsigned char *, uint64_t, void **))(*a1 + 264))(a1, v104, a2, &v129);
    int v40 = v107;
    unsigned int v75 = -1;
    int v41 = v118;
    unsigned int v63 = v106;
    if (!v118 || v124 == -1)
    {
      if (!v118)
      {
LABEL_101:
        if (v118) {
          int v41 = 1;
        }
        unsigned int v62 = v41;
        unint64_t v126 = v128;
        uint64_t v127 = 0x200000000;
        if (v109 != -1)
        {
          uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v125);
          (*(void (**)(void *, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v43, &v126, 0xFFFFFFFFLL);
        }
        if (v103)
        {
          BOOL v8 = 0;
        }
        else
        {
          BOOL v61 = v39;
          (*(void (**)(void *, unsigned char *, uint64_t, void **, long long *, void, void **, void **, void **))(*a1 + 272))(a1, v104, a2, &v137, &v135, v76, &v129, &v132, &v126);
          unsigned int v74 = -1;
          if (v110 != -1)
          {
            uint64_t v44 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
            (*(void (**)(void *, uint64_t, unsigned int *, void))(*a1 + 144))(a1, v44, &v74, 0);
          }
          char v60 = (*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 200))(a1, v104, a2);
          char v59 = (*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 208))(a1, v104, a2);
          uint64_t v45 = a1[1];
          uint64_t v46 = v76;
          unsigned int v56 = v109;
          unsigned int v57 = v108;
          unsigned int v58 = v75;
          BOOL v54 = v119 != -1;
          unsigned int v55 = v105;
          char v53 = v104[1];
          char v47 = (*(uint64_t (**)(uint64_t, void, unsigned char *, uint64_t))(*(void *)v45 + 104))(v45, v76, v104, v11);
          HIDWORD(v51) = v74;
          BYTE1(v51) = v59;
          LOBYTE(v51) = v60;
          HIBYTE(v50) = v53;
          BYTE2(v50) = v40 == 0;
          BYTE1(v50) = v54;
          LOBYTE(v50) = v61;
          uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, int, int *, char, uint64_t))(*(void *)v45 + 112))(v45, v46, v63, v57, v56, v55, v62, v58, v50, &v89, v47, v51);
          v70[0] = v86;
          v70[1] = v87;
          uint64_t v71 = v88;
          v68[0] = v83;
          v68[1] = v84;
          uint64_t v69 = v85;
          v66[0] = v80;
          v66[1] = v81;
          uint64_t v67 = v82;
          v64[0] = v77;
          v64[1] = v78;
          uint64_t v65 = v79;
          HIDWORD(v52) = v76;
          BYTE2(v52) = v59;
          BYTE1(v52) = v60;
          LOBYTE(v52) = v11;
          (*(void (**)(void *__return_ptr, void *, unsigned char *, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, _OWORD *, void *, void, void, void, void *, void, void *, void, uint64_t, unsigned int))(*a1 + 88))(v72, a1, v104, a2, v48, v70, v68, v66, v64, v137, v138, v135, DWORD2(v135), v129, v130, v126, v127, v52, v75);
          BOOL v8 = v73 != 0;
          if (v73)
          {
            (*(void (**)(void *, unsigned char *, uint64_t, void *))(*a1 + 104))(a1, v104, a2, v72);
            (*(void (**)(void *, unsigned char *, uint64_t, void, void, void, void))(*a1 + 112))(a1, v104, a2, v72[0], v72[1], v75, v74);
          }
        }
        if (v126 != v128) {
          free(v126);
        }
        if (v129 != v131) {
          free(v129);
        }
        goto LABEL_115;
      }
    }
    else
    {
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
      (*(void (**)(void *, uint64_t, unsigned int *, void))(*a1 + 144))(a1, v42, &v75, 0);
      if (v75 < 4) {
        goto LABEL_100;
      }
    }
    unsigned int v75 = 0;
LABEL_100:
    int v41 = -1;
    goto LABEL_101;
  }
  BOOL v8 = 0;
LABEL_119:
  if (v137 != v139) {
    free(v137);
  }
  return v8;
}

void sub_1CB99DD40(void *a1)
{
  v43[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1 + 8;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  v39[0] = v2;
  v39[1] = v5;
  v39[2] = v3;
  memset(&v39[3], 0, 24);
  v39[6] = (*(uint64_t (**)(void))(**(void **)(v4 + 16) + 184))(*(void *)(v4 + 16));
  v39[7] = (*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 8) + 16) + 176))(*(void *)(*(void *)(v2 + 8) + 16));
  int v41 = v43;
  uint64_t v42 = 0x400000000;
  uint64_t v6 = a1[2];
  uint64_t v7 = (_DWORD *)(v6 + 56);
  int v8 = *(_DWORD *)(v6 + 56);
  if (v8)
  {
    do
    {
      unsigned int v9 = *(_DWORD *)(v6 + 8);
      do
        int v10 = *(unsigned __int16 ***)(*(void *)v6 - 8 + 8 * v9--);
      while (!v10);
      *(_DWORD *)(v6 + 8) = v9;
      int v11 = *(_DWORD *)(v6 + 64);
      if (v11)
      {
        uint64_t v12 = *(void *)(v6 + 48);
        unsigned int v13 = v11 - 1;
        LODWORD(v14) = (v11 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        int v15 = (unsigned __int16 ***)(v12 + 16 * v14);
        char v16 = *v15;
        if (v10 == *v15)
        {
LABEL_10:
          llvm::MachineInstr *v15 = (unsigned __int16 **)-8192;
          _DWORD *v7 = v8 - 1;
          ++*(_DWORD *)(v6 + 60);
        }
        else
        {
          int v17 = 1;
          while (v16 != (unsigned __int16 **)-4096)
          {
            int v18 = v14 + v17++;
            uint64_t v14 = v18 & v13;
            char v16 = *(unsigned __int16 ***)(v12 + 16 * v14);
            if (v10 == v16)
            {
              int v15 = (unsigned __int16 ***)(v12 + 16 * v14);
              goto LABEL_10;
            }
          }
        }
      }
      int v19 = *v10[2];
      if (v19 != 77 && v19 != 74 || (sub_1CBAB8F90(v39, (llvm::MachineInstr *)v10) & 1) == 0)
      {
        if (v42 >= (unint64_t)HIDWORD(v42)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v41 + v42) = v10;
        LODWORD(v42) = v42 + 1;
      }
      uint64_t v6 = a1[2];
      uint64_t v7 = (_DWORD *)(v6 + 56);
      int v8 = *(_DWORD *)(v6 + 56);
    }
    while (v8);
    uint64_t v20 = (char *)v41;
    if (v42)
    {
      uint64_t v21 = (char *)v41 + 8 * v42;
      while (1)
      {
        uint64_t v22 = a1[3];
        uint64_t v24 = *((void *)v21 - 1);
        v21 -= 8;
        uint64_t v23 = v24;
        uint64_t v40 = v24;
        uint64_t v25 = *(void *)(v22 + 80);
        int v26 = *(_DWORD *)(v22 + 8);
        int v27 = *(_DWORD *)(v22 + 96);
        if (!v27) {
          break;
        }
        int v28 = v27 - 1;
        unsigned int v29 = v28 & ((v23 >> 4) ^ (v23 >> 9));
        BOOL v30 = (void *)(v25 + 16 * v29);
        uint64_t v31 = *v30;
        if (*v30 != v23)
        {
          long long v32 = 0;
          int v33 = 1;
          while (v31 != -4096)
          {
            if (v32) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v31 == -8192;
            }
            if (v34) {
              long long v32 = v30;
            }
            unsigned int v35 = v29 + v33++;
            unsigned int v29 = v35 & v28;
            BOOL v30 = (void *)(v25 + 16 * v29);
            uint64_t v31 = *v30;
            if (*v30 == v23) {
              goto LABEL_37;
            }
          }
          if (v32) {
            uint64_t v36 = v32;
          }
          else {
            uint64_t v36 = v30;
          }
          goto LABEL_35;
        }
LABEL_37:
        if (v21 == v20)
        {
          uint64_t v20 = (char *)v41;
          goto LABEL_41;
        }
      }
      uint64_t v36 = 0;
LABEL_35:
      long long v37 = sub_1CB9A052C(v22 + 80, (uint64_t)&v40, &v40, v36);
      *long long v37 = v40;
      *((_DWORD *)v37 + 2) = v26;
      unint64_t v38 = *(unsigned int *)(v22 + 8);
      if (v38 >= *(unsigned int *)(v22 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v22 + 8 * v38) = v40;
      ++*(_DWORD *)(v22 + 8);
      goto LABEL_37;
    }
LABEL_41:
    if (v20 != (char *)v43) {
      free(v20);
    }
  }
}

uint64_t sub_1CB99E078(uint64_t a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  if (!a4) {
    return 0;
  }
  uint64_t v17 = *(void *)(a1 + 24);
  long long v319 = 0u;
  long long v318 = 0u;
  long long v317 = 0u;
  int v315 = *(llvm::MachineFunction **)(v17 + 32);
  uint64_t v316 = (*(uint64_t (**)(void *))(**((void **)v315 + 2) + 104))(*((void **)v315 + 2));
  uint64_t v323 = 0;
  *((void *)&v317 + 1) = 0;
  *((void *)&v318 + 1) = a1;
  *(void *)&long long v319 = 0;
  *(void *)&long long v318 = *(void *)(a1 + 24);
  if ((long long *)(a1 + 56) != (long long *)((char *)&v317 + 8))
  {
    int v18 = *(unsigned __int8 **)(a1 + 56);
    *((void *)&v317 + 1) = v18;
    if (v18) {
      llvm::MetadataTracking::track((uint64_t)&v317 + 8, v18, 2);
    }
  }
  BOOL v19 = 1;
  if (a7 != 3 && a8) {
    BOOL v19 = (a9 - 5) < 2;
  }
  if ((a3 & 0xFFFFFFFB) != 3)
  {
    unsigned int v61 = a4 - 4;
    if ((a2 & 1) == 0 || v61 < 0xFFFFFFFE) {
      goto LABEL_96;
    }
    unsigned int v62 = a9 - 7;
    if (a6)
    {
LABEL_75:
      if (v62 >= 3) {
        uint64_t v72 = 8260;
      }
      else {
        uint64_t v72 = 8261;
      }
      uint64_t v73 = *(void *)(v316 + 8) + 48 * v72;
      uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
      if (*((void *)&v317 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
      }
      unsigned int v74 = llvm::MachineFunction::CreateMachineInstr(v315, v73, &v323, 0);
      if (!v323)
      {
LABEL_81:
        unsigned int v75 = (unint64_t *)*((void *)&v318 + 1);
        uint64_t v76 = *(void *)(v318 + 40);
        *((void *)v74 + 3) = v76;
        uint64_t v77 = *(void *)(v76 + 32);
        uint64_t v78 = *((unsigned int *)v74 + 10);
        if (v78)
        {
          uint64_t v173 = *((void *)v74 + 4);
          uint64_t v174 = *(void *)(v77 + 40);
          uint64_t v175 = 32 * v78;
          do
          {
            if (!*(unsigned char *)v173)
            {
              uint64_t v176 = *(unsigned int *)(v173 + 4);
              if ((int)v176 >= 0) {
                uint64_t v177 = (uint64_t *)(*(void *)(v174 + 272) + 8 * v176);
              }
              else {
                uint64_t v177 = (uint64_t *)(*(void *)(v174 + 24) + 16 * (v176 & 0x7FFFFFFF) + 8);
              }
              uint64_t v178 = *v177;
              if (*v177)
              {
                uint64_t v179 = *(void *)(v178 + 16);
                *(void *)(v178 + 16) = v173;
                *(void *)(v173 + 16) = v179;
                if (*(unsigned char *)(v173 + 3))
                {
                  *(void *)(v173 + 24) = v178;
                }
                else
                {
                  *(void *)(v173 + 24) = 0;
                  uint64_t v177 = (uint64_t *)(v179 + 24);
                }
              }
              else
              {
                *(void *)(v173 + 16) = v173;
                *(void *)(v173 + 24) = 0;
              }
              *uint64_t v177 = v173;
            }
            v173 += 32;
            v175 -= 32;
          }
          while (v175);
        }
        uint64_t v79 = *(void *)(v77 + 728);
        if (v79) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v79 + 24))(v79, v74);
        }
        unint64_t v80 = *v75 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unsigned int v74 = v80 | *(void *)v74 & 7;
        *((void *)v74 + 1) = v75;
        *(void *)(v80 + 8) = v74;
        *unsigned int v75 = *v75 & 7 | (unint64_t)v74;
        if ((void)v319) {
          (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v74);
        }
        LODWORD(v320) = 1;
        uint64_t v321 = 0;
        uint64_t v322 = 2;
        llvm::MachineInstr::addOperand(v74, v315, (const llvm::MachineOperand *)&v320);
        LODWORD(v320) = 1;
        uint64_t v321 = 0;
        uint64_t v322 = 1;
        llvm::MachineInstr::addOperand(v74, v315, (const llvm::MachineOperand *)&v320);
        if (a4 != 3)
        {
LABEL_96:
          if ((a2 & 4) == 0) {
            goto LABEL_181;
          }
          unsigned int v89 = a9 - 7;
          if (v61 < 0xFFFFFFFE || a7)
          {
LABEL_109:
            int v99 = 8262;
            if ((a9 - 5) < 2) {
              int v99 = 8264;
            }
            if (v89 >= 3) {
              unsigned int v100 = v99;
            }
            else {
              unsigned int v100 = 8263;
            }
            uint64_t v101 = *(void *)(v316 + 8) + 48 * v100;
            uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
            if (*((void *)&v317 + 1)) {
              llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
            }
            char v102 = llvm::MachineFunction::CreateMachineInstr(v315, v101, &v323, 0);
            if (!v323)
            {
LABEL_117:
              char v103 = (unint64_t *)*((void *)&v318 + 1);
              uint64_t v104 = *(void *)(v318 + 40);
              *((void *)v102 + 3) = v104;
              uint64_t v105 = *(void *)(v104 + 32);
              uint64_t v106 = *((unsigned int *)v102 + 10);
              if (v106)
              {
                uint64_t v159 = *((void *)v102 + 4);
                uint64_t v160 = *(void *)(v105 + 40);
                uint64_t v161 = 32 * v106;
                do
                {
                  if (!*(unsigned char *)v159)
                  {
                    uint64_t v162 = *(unsigned int *)(v159 + 4);
                    if ((int)v162 >= 0) {
                      v163 = (uint64_t *)(*(void *)(v160 + 272) + 8 * v162);
                    }
                    else {
                      v163 = (uint64_t *)(*(void *)(v160 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v164 = *v163;
                    if (*v163)
                    {
                      uint64_t v165 = *(void *)(v164 + 16);
                      *(void *)(v164 + 16) = v159;
                      *(void *)(v159 + 16) = v165;
                      if (*(unsigned char *)(v159 + 3))
                      {
                        *(void *)(v159 + 24) = v164;
                      }
                      else
                      {
                        *(void *)(v159 + 24) = 0;
                        v163 = (uint64_t *)(v165 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v159 + 16) = v159;
                      *(void *)(v159 + 24) = 0;
                    }
                    uint64_t *v163 = v159;
                  }
                  v159 += 32;
                  v161 -= 32;
                }
                while (v161);
              }
              uint64_t v107 = *(void *)(v105 + 728);
              if (v107) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v107 + 24))(v107, v102);
              }
              unint64_t v108 = *v103 & 0xFFFFFFFFFFFFFFF8;
              *(void *)char v102 = v108 | *(void *)v102 & 7;
              *((void *)v102 + 1) = v103;
              *(void *)(v108 + 8) = v102;
              *char v103 = *v103 & 7 | (unint64_t)v102;
              if ((void)v319) {
                (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v102);
              }
              LODWORD(v320) = 1;
              uint64_t v321 = 0;
              uint64_t v322 = 2;
              llvm::MachineInstr::addOperand(v102, v315, (const llvm::MachineOperand *)&v320);
              LODWORD(v320) = 1;
              uint64_t v321 = 0;
              uint64_t v322 = 1;
              llvm::MachineInstr::addOperand(v102, v315, (const llvm::MachineOperand *)&v320);
              if (!v19) {
                goto LABEL_181;
              }
              unsigned int v109 = v315;
              uint64_t v110 = *(void *)(v316 + 8) + 48 * v100;
              uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
              if (*((void *)&v317 + 1)) {
                llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
              }
              unsigned int v111 = llvm::MachineFunction::CreateMachineInstr(v315, v110, &v323, 0);
              if (v323)
              {
                int v279 = *v323;
                if ((v279 - 4) > 0x1E)
                {
                  if ((v279 - 3) >= 0xFFFFFFFE) {
                    unint64_t v307 = v323;
                  }
                  else {
                    unint64_t v307 = 0;
                  }
                  if ((v279 - 3) < 0xFFFFFFFE)
                  {
                    if (v279 == 3) {
                      *((void *)v323 + 1) = 0;
                    }
                    goto LABEL_126;
                  }
                  unint64_t v281 = (unint64_t)(v307 + 8);
                }
                else
                {
                  if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
                    goto LABEL_126;
                  }
                  uint64_t v280 = *((void *)v323 + 2);
                  if ((v280 & 4) == 0) {
                    goto LABEL_126;
                  }
                  unint64_t v281 = v280 & 0xFFFFFFFFFFFFFFF8;
                  if (!v281) {
                    goto LABEL_126;
                  }
                }
                int v320 = &v323;
                sub_1CC5FA668(v281 + 16, &v320);
              }
LABEL_126:
              unsigned int v112 = (unint64_t *)*((void *)&v318 + 1);
              uint64_t v113 = *(void *)(v318 + 40);
              *((void *)v111 + 3) = v113;
              uint64_t v114 = *(void *)(v113 + 32);
              uint64_t v115 = *((unsigned int *)v111 + 10);
              if (v115)
              {
                uint64_t v194 = *((void *)v111 + 4);
                uint64_t v195 = *(void *)(v114 + 40);
                uint64_t v196 = 32 * v115;
                do
                {
                  if (!*(unsigned char *)v194)
                  {
                    uint64_t v197 = *(unsigned int *)(v194 + 4);
                    if ((int)v197 >= 0) {
                      uint64_t v198 = (uint64_t *)(*(void *)(v195 + 272) + 8 * v197);
                    }
                    else {
                      uint64_t v198 = (uint64_t *)(*(void *)(v195 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v199 = *v198;
                    if (*v198)
                    {
                      uint64_t v200 = *(void *)(v199 + 16);
                      *(void *)(v199 + 16) = v194;
                      *(void *)(v194 + 16) = v200;
                      if (*(unsigned char *)(v194 + 3))
                      {
                        *(void *)(v194 + 24) = v199;
                      }
                      else
                      {
                        *(void *)(v194 + 24) = 0;
                        uint64_t v198 = (uint64_t *)(v200 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v194 + 16) = v194;
                      *(void *)(v194 + 24) = 0;
                    }
                    *uint64_t v198 = v194;
                  }
                  v194 += 32;
                  v196 -= 32;
                }
                while (v196);
              }
              uint64_t v116 = *(void *)(v114 + 728);
              if (v116) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v116 + 24))(v116, v111);
              }
              unint64_t v117 = *v112 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unsigned int v111 = v117 | *(void *)v111 & 7;
              *((void *)v111 + 1) = v112;
              *(void *)(v117 + 8) = v111;
              unint64_t *v112 = *v112 & 7 | (unint64_t)v111;
              if ((void)v319) {
                (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v111);
              }
              LODWORD(v320) = 1;
              uint64_t v321 = 0;
              uint64_t v322 = 3;
              llvm::MachineInstr::addOperand(v111, v315, (const llvm::MachineOperand *)&v320);
              LODWORD(v320) = 1;
              uint64_t v321 = 0;
              uint64_t v322 = 1;
              goto LABEL_180;
            }
            int v261 = *v323;
            if ((v261 - 4) > 0x1E)
            {
              if ((v261 - 3) >= 0xFFFFFFFE) {
                unint64_t v295 = v323;
              }
              else {
                unint64_t v295 = 0;
              }
              if ((v261 - 3) < 0xFFFFFFFE)
              {
                if (v261 == 3) {
                  *((void *)v323 + 1) = 0;
                }
                goto LABEL_117;
              }
              unint64_t v263 = (unint64_t)(v295 + 8);
            }
            else
            {
              if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
                goto LABEL_117;
              }
              uint64_t v262 = *((void *)v323 + 2);
              if ((v262 & 4) == 0) {
                goto LABEL_117;
              }
              unint64_t v263 = v262 & 0xFFFFFFFFFFFFFFF8;
              if (!v263) {
                goto LABEL_117;
              }
            }
            int v320 = &v323;
            sub_1CC5FA668(v263 + 16, &v320);
            goto LABEL_117;
          }
          uint64_t v90 = 116544;
          if (v89 < 3) {
            uint64_t v90 = 116592;
          }
          uint64_t v91 = *(void *)(v316 + 8) + v90;
          uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
          if (*((void *)&v317 + 1)) {
            llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
          }
          long long v92 = llvm::MachineFunction::CreateMachineInstr(v315, v91, &v323, 0);
          if (v323)
          {
            int v276 = *v323;
            if ((v276 - 4) > 0x1E)
            {
              if ((v276 - 3) >= 0xFFFFFFFE) {
                uint64_t v306 = v323;
              }
              else {
                uint64_t v306 = 0;
              }
              if ((v276 - 3) < 0xFFFFFFFE)
              {
                if (v276 == 3) {
                  *((void *)v323 + 1) = 0;
                }
                goto LABEL_104;
              }
              unint64_t v278 = (unint64_t)(v306 + 8);
            }
            else
            {
              if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
                goto LABEL_104;
              }
              uint64_t v277 = *((void *)v323 + 2);
              if ((v277 & 4) == 0) {
                goto LABEL_104;
              }
              unint64_t v278 = v277 & 0xFFFFFFFFFFFFFFF8;
              if (!v278) {
                goto LABEL_104;
              }
            }
            int v320 = &v323;
            sub_1CC5FA668(v278 + 16, &v320);
          }
LABEL_104:
          long long v93 = (unint64_t *)*((void *)&v318 + 1);
          uint64_t v94 = *(void *)(v318 + 40);
          *((void *)v92 + 3) = v94;
          uint64_t v95 = *(void *)(v94 + 32);
          uint64_t v96 = *((unsigned int *)v92 + 10);
          if (v96)
          {
            uint64_t v215 = *((void *)v92 + 4);
            uint64_t v216 = *(void *)(v95 + 40);
            uint64_t v217 = 32 * v96;
            do
            {
              if (!*(unsigned char *)v215)
              {
                uint64_t v218 = *(unsigned int *)(v215 + 4);
                if ((int)v218 >= 0) {
                  v219 = (uint64_t *)(*(void *)(v216 + 272) + 8 * v218);
                }
                else {
                  v219 = (uint64_t *)(*(void *)(v216 + 24) + 16 * (v218 & 0x7FFFFFFF) + 8);
                }
                uint64_t v220 = *v219;
                if (*v219)
                {
                  uint64_t v221 = *(void *)(v220 + 16);
                  *(void *)(v220 + 16) = v215;
                  *(void *)(v215 + 16) = v221;
                  if (*(unsigned char *)(v215 + 3))
                  {
                    *(void *)(v215 + 24) = v220;
                  }
                  else
                  {
                    *(void *)(v215 + 24) = 0;
                    v219 = (uint64_t *)(v221 + 24);
                  }
                }
                else
                {
                  *(void *)(v215 + 16) = v215;
                  *(void *)(v215 + 24) = 0;
                }
                uint64_t *v219 = v215;
              }
              v215 += 32;
              v217 -= 32;
            }
            while (v217);
          }
          uint64_t v97 = *(void *)(v95 + 728);
          if (v97) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v92);
          }
          unint64_t v98 = *v93 & 0xFFFFFFFFFFFFFFF8;
          *(void *)long long v92 = v98 | *(void *)v92 & 7;
          *((void *)v92 + 1) = v93;
          *(void *)(v98 + 8) = v92;
          *long long v93 = *v93 & 7 | (unint64_t)v92;
          if ((void)v319) {
            (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v92);
          }
          goto LABEL_109;
        }
        uint64_t v81 = *(void *)(v316 + 8) + 48 * v72;
        uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
        if (*((void *)&v317 + 1)) {
          llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
        }
        uint64_t v82 = llvm::MachineFunction::CreateMachineInstr(v315, v81, &v323, 0);
        if (v323)
        {
          int v273 = *v323;
          if ((v273 - 4) > 0x1E)
          {
            if ((v273 - 3) >= 0xFFFFFFFE) {
              uint64_t v305 = v323;
            }
            else {
              uint64_t v305 = 0;
            }
            if ((v273 - 3) < 0xFFFFFFFE)
            {
              if (v273 == 3) {
                *((void *)v323 + 1) = 0;
              }
              goto LABEL_90;
            }
            unint64_t v275 = (unint64_t)(v305 + 8);
          }
          else
          {
            if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
              goto LABEL_90;
            }
            uint64_t v274 = *((void *)v323 + 2);
            if ((v274 & 4) == 0) {
              goto LABEL_90;
            }
            unint64_t v275 = v274 & 0xFFFFFFFFFFFFFFF8;
            if (!v275) {
              goto LABEL_90;
            }
          }
          int v320 = &v323;
          sub_1CC5FA668(v275 + 16, &v320);
        }
LABEL_90:
        long long v83 = (unint64_t *)*((void *)&v318 + 1);
        uint64_t v84 = *(void *)(v318 + 40);
        *((void *)v82 + 3) = v84;
        uint64_t v85 = *(void *)(v84 + 32);
        uint64_t v86 = *((unsigned int *)v82 + 10);
        if (v86)
        {
          uint64_t v208 = *((void *)v82 + 4);
          uint64_t v209 = *(void *)(v85 + 40);
          uint64_t v210 = 32 * v86;
          do
          {
            if (!*(unsigned char *)v208)
            {
              uint64_t v211 = *(unsigned int *)(v208 + 4);
              if ((int)v211 >= 0) {
                uint64_t v212 = (uint64_t *)(*(void *)(v209 + 272) + 8 * v211);
              }
              else {
                uint64_t v212 = (uint64_t *)(*(void *)(v209 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
              }
              uint64_t v213 = *v212;
              if (*v212)
              {
                uint64_t v214 = *(void *)(v213 + 16);
                *(void *)(v213 + 16) = v208;
                *(void *)(v208 + 16) = v214;
                if (*(unsigned char *)(v208 + 3))
                {
                  *(void *)(v208 + 24) = v213;
                }
                else
                {
                  *(void *)(v208 + 24) = 0;
                  uint64_t v212 = (uint64_t *)(v214 + 24);
                }
              }
              else
              {
                *(void *)(v208 + 16) = v208;
                *(void *)(v208 + 24) = 0;
              }
              *uint64_t v212 = v208;
            }
            v208 += 32;
            v210 -= 32;
          }
          while (v210);
        }
        uint64_t v87 = *(void *)(v85 + 728);
        if (v87) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v87 + 24))(v87, v82);
        }
        unint64_t v88 = *v83 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v82 = v88 | *(void *)v82 & 7;
        *((void *)v82 + 1) = v83;
        *(void *)(v88 + 8) = v82;
        *long long v83 = *v83 & 7 | (unint64_t)v82;
        if ((void)v319) {
          (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v82);
        }
        LODWORD(v320) = 1;
        uint64_t v321 = 0;
        uint64_t v322 = 3;
        llvm::MachineInstr::addOperand(v82, v315, (const llvm::MachineOperand *)&v320);
        LODWORD(v320) = 1;
        uint64_t v321 = 0;
        uint64_t v322 = 1;
        llvm::MachineInstr::addOperand(v82, v315, (const llvm::MachineOperand *)&v320);
        goto LABEL_96;
      }
      int v258 = *v323;
      if ((v258 - 4) > 0x1E)
      {
        if ((v258 - 3) >= 0xFFFFFFFE) {
          uint64_t v294 = v323;
        }
        else {
          uint64_t v294 = 0;
        }
        if ((v258 - 3) < 0xFFFFFFFE)
        {
          if (v258 == 3) {
            *((void *)v323 + 1) = 0;
          }
          goto LABEL_81;
        }
        unint64_t v260 = (unint64_t)(v294 + 8);
      }
      else
      {
        if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
          goto LABEL_81;
        }
        uint64_t v259 = *((void *)v323 + 2);
        if ((v259 & 4) == 0) {
          goto LABEL_81;
        }
        unint64_t v260 = v259 & 0xFFFFFFFFFFFFFFF8;
        if (!v260) {
          goto LABEL_81;
        }
      }
      int v320 = &v323;
      sub_1CC5FA668(v260 + 16, &v320);
      goto LABEL_81;
    }
    uint64_t v63 = 24432;
    if (v62 < 3) {
      uint64_t v63 = 24480;
    }
    uint64_t v64 = *(void *)(v316 + 8) + v63;
    uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
    if (*((void *)&v317 + 1)) {
      llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
    }
    uint64_t v65 = llvm::MachineFunction::CreateMachineInstr(v315, v64, &v323, 0);
    if (v323)
    {
      int v288 = *v323;
      if ((v288 - 4) > 0x1E)
      {
        if ((v288 - 3) >= 0xFFFFFFFE) {
          int v310 = v323;
        }
        else {
          int v310 = 0;
        }
        if ((v288 - 3) < 0xFFFFFFFE)
        {
          if (v288 == 3) {
            *((void *)v323 + 1) = 0;
          }
          goto LABEL_70;
        }
        unint64_t v290 = (unint64_t)(v310 + 8);
      }
      else
      {
        if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
          goto LABEL_70;
        }
        uint64_t v289 = *((void *)v323 + 2);
        if ((v289 & 4) == 0) {
          goto LABEL_70;
        }
        unint64_t v290 = v289 & 0xFFFFFFFFFFFFFFF8;
        if (!v290) {
          goto LABEL_70;
        }
      }
      int v320 = &v323;
      sub_1CC5FA668(v290 + 16, &v320);
    }
LABEL_70:
    long long v66 = (unint64_t *)*((void *)&v318 + 1);
    uint64_t v67 = *(void *)(v318 + 40);
    *((void *)v65 + 3) = v67;
    uint64_t v68 = *(void *)(v67 + 32);
    uint64_t v69 = *((unsigned int *)v65 + 10);
    if (v69)
    {
      uint64_t v236 = *((void *)v65 + 4);
      uint64_t v237 = *(void *)(v68 + 40);
      uint64_t v238 = 32 * v69;
      do
      {
        if (!*(unsigned char *)v236)
        {
          uint64_t v239 = *(unsigned int *)(v236 + 4);
          if ((int)v239 >= 0) {
            uint64_t v240 = (uint64_t *)(*(void *)(v237 + 272) + 8 * v239);
          }
          else {
            uint64_t v240 = (uint64_t *)(*(void *)(v237 + 24) + 16 * (v239 & 0x7FFFFFFF) + 8);
          }
          uint64_t v241 = *v240;
          if (*v240)
          {
            uint64_t v242 = *(void *)(v241 + 16);
            *(void *)(v241 + 16) = v236;
            *(void *)(v236 + 16) = v242;
            if (*(unsigned char *)(v236 + 3))
            {
              *(void *)(v236 + 24) = v241;
            }
            else
            {
              *(void *)(v236 + 24) = 0;
              uint64_t v240 = (uint64_t *)(v242 + 24);
            }
          }
          else
          {
            *(void *)(v236 + 16) = v236;
            *(void *)(v236 + 24) = 0;
          }
          *uint64_t v240 = v236;
        }
        v236 += 32;
        v238 -= 32;
      }
      while (v238);
    }
    uint64_t v70 = *(void *)(v68 + 728);
    if (v70) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, v65);
    }
    unint64_t v71 = *v66 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v65 = v71 | *(void *)v65 & 7;
    *((void *)v65 + 1) = v66;
    *(void *)(v71 + 8) = v65;
    *long long v66 = *v66 & 7 | (unint64_t)v65;
    if ((void)v319) {
      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v65);
    }
    goto LABEL_75;
  }
  BOOL v314 = v19;
  if ((a2 & 1) == 0) {
    goto LABEL_58;
  }
  unsigned int v20 = a9 - 7;
  if ((a4 - 4) < 0xFFFFFFFE || !a6)
  {
    uint64_t v21 = 396480;
    if (v20 < 3) {
      uint64_t v21 = 396528;
    }
    uint64_t v22 = *(void *)(v316 + 8) + v21;
    uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
    if (*((void *)&v317 + 1)) {
      llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
    }
    uint64_t v23 = llvm::MachineFunction::CreateMachineInstr(v315, v22, &v323, 0);
    if (!v323)
    {
LABEL_17:
      uint64_t v24 = (unint64_t *)*((void *)&v318 + 1);
      uint64_t v25 = *(void *)(v318 + 40);
      *((void *)v23 + 3) = v25;
      uint64_t v26 = *(void *)(v25 + 32);
      uint64_t v27 = *((unsigned int *)v23 + 10);
      if (v27)
      {
        uint64_t v187 = *((void *)v23 + 4);
        uint64_t v188 = *(void *)(v26 + 40);
        uint64_t v189 = 32 * v27;
        do
        {
          if (!*(unsigned char *)v187)
          {
            uint64_t v190 = *(unsigned int *)(v187 + 4);
            if ((int)v190 >= 0) {
              unint64_t v191 = (uint64_t *)(*(void *)(v188 + 272) + 8 * v190);
            }
            else {
              unint64_t v191 = (uint64_t *)(*(void *)(v188 + 24) + 16 * (v190 & 0x7FFFFFFF) + 8);
            }
            uint64_t v192 = *v191;
            if (*v191)
            {
              uint64_t v193 = *(void *)(v192 + 16);
              *(void *)(v192 + 16) = v187;
              *(void *)(v187 + 16) = v193;
              if (*(unsigned char *)(v187 + 3))
              {
                *(void *)(v187 + 24) = v192;
              }
              else
              {
                *(void *)(v187 + 24) = 0;
                unint64_t v191 = (uint64_t *)(v193 + 24);
              }
            }
            else
            {
              *(void *)(v187 + 16) = v187;
              *(void *)(v187 + 24) = 0;
            }
            *unint64_t v191 = v187;
          }
          v187 += 32;
          v189 -= 32;
        }
        while (v189);
      }
      uint64_t v28 = *(void *)(v26 + 728);
      if (v28) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v28 + 24))(v28, v23);
      }
      unint64_t v29 = *v24 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v23 = v29 | *(void *)v23 & 7;
      *((void *)v23 + 1) = v24;
      *(void *)(v29 + 8) = v23;
      *uint64_t v24 = *v24 & 7 | (unint64_t)v23;
      if ((void)v319) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v23);
      }
      LODWORD(v320) = 1;
      uint64_t v321 = 0;
      uint64_t v322 = 1;
      llvm::MachineInstr::addOperand(v23, v315, (const llvm::MachineOperand *)&v320);
      LODWORD(v320) = 1;
      uint64_t v321 = 0;
      uint64_t v322 = 2;
      llvm::MachineInstr::addOperand(v23, v315, (const llvm::MachineOperand *)&v320);
      if ((a4 - 4) < 0xFFFFFFFE) {
        goto LABEL_58;
      }
      uint64_t v30 = 501;
      if (v20 < 3) {
        uint64_t v30 = 502;
      }
      uint64_t v31 = 505;
      if (v20 < 3) {
        uint64_t v31 = 506;
      }
      if (a3 != 7) {
        uint64_t v30 = v31;
      }
      uint64_t v32 = *(void *)(v316 + 8) + 48 * v30;
      uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
      if (*((void *)&v317 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
      }
      int v33 = llvm::MachineFunction::CreateMachineInstr(v315, v32, &v323, 0);
      if (!v323) {
        goto LABEL_32;
      }
      int v297 = *v323;
      if ((v297 - 4) > 0x1E)
      {
        if ((v297 - 3) >= 0xFFFFFFFE) {
          int v312 = v323;
        }
        else {
          int v312 = 0;
        }
        if ((v297 - 3) < 0xFFFFFFFE)
        {
          if (v297 == 3) {
            *((void *)v323 + 1) = 0;
          }
          goto LABEL_32;
        }
        unint64_t v299 = (unint64_t)(v312 + 8);
      }
      else
      {
        if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
          goto LABEL_32;
        }
        uint64_t v298 = *((void *)v323 + 2);
        if ((v298 & 4) == 0) {
          goto LABEL_32;
        }
        unint64_t v299 = v298 & 0xFFFFFFFFFFFFFFF8;
        if (!v299) {
          goto LABEL_32;
        }
      }
      int v320 = &v323;
      sub_1CC5FA668(v299 + 16, &v320);
LABEL_32:
      BOOL v34 = (unint64_t *)*((void *)&v318 + 1);
      uint64_t v35 = *(void *)(v318 + 40);
      *((void *)v33 + 3) = v35;
      uint64_t v36 = *(void *)(v35 + 32);
      uint64_t v37 = *((unsigned int *)v33 + 10);
      if (v37)
      {
        uint64_t v243 = *((void *)v33 + 4);
        uint64_t v244 = *(void *)(v36 + 40);
        uint64_t v245 = 32 * v37;
        do
        {
          if (!*(unsigned char *)v243)
          {
            uint64_t v246 = *(unsigned int *)(v243 + 4);
            if ((int)v246 >= 0) {
              int v247 = (uint64_t *)(*(void *)(v244 + 272) + 8 * v246);
            }
            else {
              int v247 = (uint64_t *)(*(void *)(v244 + 24) + 16 * (v246 & 0x7FFFFFFF) + 8);
            }
            uint64_t v248 = *v247;
            if (*v247)
            {
              uint64_t v249 = *(void *)(v248 + 16);
              *(void *)(v248 + 16) = v243;
              *(void *)(v243 + 16) = v249;
              if (*(unsigned char *)(v243 + 3))
              {
                *(void *)(v243 + 24) = v248;
              }
              else
              {
                *(void *)(v243 + 24) = 0;
                int v247 = (uint64_t *)(v249 + 24);
              }
            }
            else
            {
              *(void *)(v243 + 16) = v243;
              *(void *)(v243 + 24) = 0;
            }
            *int v247 = v243;
          }
          v243 += 32;
          v245 -= 32;
        }
        while (v245);
      }
      uint64_t v38 = *(void *)(v36 + 728);
      if (v38) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v38 + 24))(v38, v33);
      }
      unint64_t v39 = *v34 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v33 = v39 | *(void *)v33 & 7;
      *((void *)v33 + 1) = v34;
      *(void *)(v39 + 8) = v33;
      *BOOL v34 = *v34 & 7 | (unint64_t)v33;
      if ((void)v319) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v33);
      }
      goto LABEL_37;
    }
    int v270 = *v323;
    if ((v270 - 4) > 0x1E)
    {
      if ((v270 - 3) >= 0xFFFFFFFE) {
        uint64_t v304 = v323;
      }
      else {
        uint64_t v304 = 0;
      }
      if ((v270 - 3) < 0xFFFFFFFE)
      {
        if (v270 == 3) {
          *((void *)v323 + 1) = 0;
        }
        goto LABEL_17;
      }
      unint64_t v272 = (unint64_t)(v304 + 8);
    }
    else
    {
      if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
        goto LABEL_17;
      }
      uint64_t v271 = *((void *)v323 + 2);
      if ((v271 & 4) == 0) {
        goto LABEL_17;
      }
      unint64_t v272 = v271 & 0xFFFFFFFFFFFFFFF8;
      if (!v272) {
        goto LABEL_17;
      }
    }
    int v320 = &v323;
    sub_1CC5FA668(v272 + 16, &v320);
    goto LABEL_17;
  }
LABEL_37:
  if (v20 >= 3) {
    uint64_t v40 = 8260;
  }
  else {
    uint64_t v40 = 8261;
  }
  uint64_t v41 = *(void *)(v316 + 8) + 48 * v40;
  uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
  if (*((void *)&v317 + 1)) {
    llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
  }
  uint64_t v42 = llvm::MachineFunction::CreateMachineInstr(v315, v41, &v323, 0);
  if (v323)
  {
    int v267 = *v323;
    if ((v267 - 4) > 0x1E)
    {
      if ((v267 - 3) >= 0xFFFFFFFE) {
        uint64_t v303 = v323;
      }
      else {
        uint64_t v303 = 0;
      }
      if ((v267 - 3) < 0xFFFFFFFE)
      {
        if (v267 == 3) {
          *((void *)v323 + 1) = 0;
        }
        goto LABEL_43;
      }
      unint64_t v269 = (unint64_t)(v303 + 8);
    }
    else
    {
      if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
        goto LABEL_43;
      }
      uint64_t v268 = *((void *)v323 + 2);
      if ((v268 & 4) == 0) {
        goto LABEL_43;
      }
      unint64_t v269 = v268 & 0xFFFFFFFFFFFFFFF8;
      if (!v269) {
        goto LABEL_43;
      }
    }
    int v320 = &v323;
    sub_1CC5FA668(v269 + 16, &v320);
  }
LABEL_43:
  uint64_t v43 = (unint64_t *)*((void *)&v318 + 1);
  uint64_t v44 = *(void *)(v318 + 40);
  *((void *)v42 + 3) = v44;
  uint64_t v45 = *(void *)(v44 + 32);
  uint64_t v46 = *((unsigned int *)v42 + 10);
  if (v46)
  {
    uint64_t v180 = *((void *)v42 + 4);
    uint64_t v181 = *(void *)(v45 + 40);
    uint64_t v182 = 32 * v46;
    do
    {
      if (!*(unsigned char *)v180)
      {
        uint64_t v183 = *(unsigned int *)(v180 + 4);
        if ((int)v183 >= 0) {
          uint64_t v184 = (uint64_t *)(*(void *)(v181 + 272) + 8 * v183);
        }
        else {
          uint64_t v184 = (uint64_t *)(*(void *)(v181 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
        }
        uint64_t v185 = *v184;
        if (*v184)
        {
          uint64_t v186 = *(void *)(v185 + 16);
          *(void *)(v185 + 16) = v180;
          *(void *)(v180 + 16) = v186;
          if (*(unsigned char *)(v180 + 3))
          {
            *(void *)(v180 + 24) = v185;
          }
          else
          {
            *(void *)(v180 + 24) = 0;
            uint64_t v184 = (uint64_t *)(v186 + 24);
          }
        }
        else
        {
          *(void *)(v180 + 16) = v180;
          *(void *)(v180 + 24) = 0;
        }
        *uint64_t v184 = v180;
      }
      v180 += 32;
      v182 -= 32;
    }
    while (v182);
  }
  uint64_t v47 = *(void *)(v45 + 728);
  if (v47) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v47 + 24))(v47, v42);
  }
  unint64_t v48 = *v43 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v42 = v48 | *(void *)v42 & 7;
  *((void *)v42 + 1) = v43;
  *(void *)(v48 + 8) = v42;
  unint64_t *v43 = *v43 & 7 | (unint64_t)v42;
  if ((void)v319) {
    (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v42);
  }
  LODWORD(v320) = 1;
  uint64_t v321 = 0;
  uint64_t v322 = 2;
  llvm::MachineInstr::addOperand(v42, v315, (const llvm::MachineOperand *)&v320);
  LODWORD(v320) = 1;
  uint64_t v321 = 0;
  uint64_t v322 = 2;
  llvm::MachineInstr::addOperand(v42, v315, (const llvm::MachineOperand *)&v320);
  if (a4 == 3)
  {
    uint64_t v49 = *(void *)(v316 + 8) + 48 * v40;
    uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
    if (*((void *)&v317 + 1)) {
      llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
    }
    int v50 = llvm::MachineFunction::CreateMachineInstr(v315, v49, &v323, 0);
    if (!v323) {
      goto LABEL_52;
    }
    int v285 = *v323;
    if ((v285 - 4) > 0x1E)
    {
      if ((v285 - 3) >= 0xFFFFFFFE) {
        uint64_t v309 = v323;
      }
      else {
        uint64_t v309 = 0;
      }
      if ((v285 - 3) < 0xFFFFFFFE)
      {
        if (v285 == 3) {
          *((void *)v323 + 1) = 0;
        }
        goto LABEL_52;
      }
      unint64_t v287 = (unint64_t)(v309 + 8);
    }
    else
    {
      if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
        goto LABEL_52;
      }
      uint64_t v286 = *((void *)v323 + 2);
      if ((v286 & 4) == 0) {
        goto LABEL_52;
      }
      unint64_t v287 = v286 & 0xFFFFFFFFFFFFFFF8;
      if (!v287) {
        goto LABEL_52;
      }
    }
    int v320 = &v323;
    sub_1CC5FA668(v287 + 16, &v320);
LABEL_52:
    uint64_t v51 = (unint64_t *)*((void *)&v318 + 1);
    uint64_t v52 = *(void *)(v318 + 40);
    *((void *)v50 + 3) = v52;
    uint64_t v53 = *(void *)(v52 + 32);
    uint64_t v54 = *((unsigned int *)v50 + 10);
    if (v54)
    {
      uint64_t v229 = *((void *)v50 + 4);
      uint64_t v230 = *(void *)(v53 + 40);
      uint64_t v231 = 32 * v54;
      do
      {
        if (!*(unsigned char *)v229)
        {
          uint64_t v232 = *(unsigned int *)(v229 + 4);
          if ((int)v232 >= 0) {
            uint64_t v233 = (uint64_t *)(*(void *)(v230 + 272) + 8 * v232);
          }
          else {
            uint64_t v233 = (uint64_t *)(*(void *)(v230 + 24) + 16 * (v232 & 0x7FFFFFFF) + 8);
          }
          uint64_t v234 = *v233;
          if (*v233)
          {
            uint64_t v235 = *(void *)(v234 + 16);
            *(void *)(v234 + 16) = v229;
            *(void *)(v229 + 16) = v235;
            if (*(unsigned char *)(v229 + 3))
            {
              *(void *)(v229 + 24) = v234;
            }
            else
            {
              *(void *)(v229 + 24) = 0;
              uint64_t v233 = (uint64_t *)(v235 + 24);
            }
          }
          else
          {
            *(void *)(v229 + 16) = v229;
            *(void *)(v229 + 24) = 0;
          }
          *uint64_t v233 = v229;
        }
        v229 += 32;
        v231 -= 32;
      }
      while (v231);
    }
    uint64_t v55 = *(void *)(v53 + 728);
    if (v55) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v55 + 24))(v55, v50);
    }
    unint64_t v56 = *v51 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v50 = v56 | *(void *)v50 & 7;
    *((void *)v50 + 1) = v51;
    *(void *)(v56 + 8) = v50;
    *uint64_t v51 = *v51 & 7 | (unint64_t)v50;
    if ((void)v319) {
      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v50);
    }
    LODWORD(v320) = 1;
    uint64_t v321 = 0;
    uint64_t v322 = 3;
    llvm::MachineInstr::addOperand(v50, v315, (const llvm::MachineOperand *)&v320);
    LODWORD(v320) = 1;
    uint64_t v321 = 0;
    uint64_t v322 = 2;
    llvm::MachineInstr::addOperand(v50, v315, (const llvm::MachineOperand *)&v320);
  }
LABEL_58:
  BOOL v57 = v314;
  if ((a2 & 4) == 0) {
    goto LABEL_181;
  }
  if (a7)
  {
    int v58 = a9;
    unsigned int v59 = a9 - 7;
    goto LABEL_157;
  }
  unsigned int v59 = a9 - 7;
  uint64_t v118 = v316;
  int v119 = (unsigned __int8 *)*((void *)&v317 + 1);
  if (a5)
  {
    unsigned int v120 = 8262;
    if ((a9 - 5) < 2) {
      unsigned int v120 = 8264;
    }
    if (v59 < 3) {
      unsigned int v120 = 8263;
    }
    uint64_t v121 = *(void *)(v316 + 8) + 48 * v120;
    uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
    if (*((void *)&v317 + 1)) {
      llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
    }
    int v122 = llvm::MachineFunction::CreateMachineInstr(v315, v121, &v323, 0);
    if (!v323) {
      goto LABEL_140;
    }
    int v300 = *v323;
    if ((v300 - 4) > 0x1E)
    {
      if ((v300 - 3) >= 0xFFFFFFFE) {
        int v313 = v323;
      }
      else {
        int v313 = 0;
      }
      if ((v300 - 3) < 0xFFFFFFFE)
      {
        BOOL v57 = v314;
        if (v300 == 3) {
          *((void *)v323 + 1) = 0;
        }
        goto LABEL_140;
      }
      unint64_t v302 = (unint64_t)(v313 + 8);
    }
    else
    {
      BOOL v57 = v314;
      if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
        goto LABEL_140;
      }
      uint64_t v301 = *((void *)v323 + 2);
      if ((v301 & 4) == 0) {
        goto LABEL_140;
      }
      unint64_t v302 = v301 & 0xFFFFFFFFFFFFFFF8;
      if (!v302) {
        goto LABEL_140;
      }
    }
    int v320 = &v323;
    sub_1CC5FA668(v302 + 16, &v320);
    BOOL v57 = v314;
LABEL_140:
    int v123 = (unint64_t *)*((void *)&v318 + 1);
    uint64_t v124 = *(void *)(v318 + 40);
    *((void *)v122 + 3) = v124;
    uint64_t v125 = *(void *)(v124 + 32);
    uint64_t v126 = *((unsigned int *)v122 + 10);
    if (v126)
    {
      uint64_t v250 = *((void *)v122 + 4);
      uint64_t v251 = *(void *)(v125 + 40);
      uint64_t v252 = 32 * v126;
      do
      {
        if (!*(unsigned char *)v250)
        {
          uint64_t v253 = *(unsigned int *)(v250 + 4);
          if ((int)v253 >= 0) {
            v254 = (uint64_t *)(*(void *)(v251 + 272) + 8 * v253);
          }
          else {
            v254 = (uint64_t *)(*(void *)(v251 + 24) + 16 * (v253 & 0x7FFFFFFF) + 8);
          }
          uint64_t v255 = *v254;
          if (*v254)
          {
            uint64_t v256 = *(void *)(v255 + 16);
            *(void *)(v255 + 16) = v250;
            *(void *)(v250 + 16) = v256;
            if (*(unsigned char *)(v250 + 3))
            {
              *(void *)(v250 + 24) = v255;
            }
            else
            {
              *(void *)(v250 + 24) = 0;
              v254 = (uint64_t *)(v256 + 24);
            }
          }
          else
          {
            *(void *)(v250 + 16) = v250;
            *(void *)(v250 + 24) = 0;
          }
          uint64_t *v254 = v250;
        }
        v250 += 32;
        v252 -= 32;
      }
      while (v252);
    }
    uint64_t v127 = *(void *)(v125 + 728);
    if (v127) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v127 + 24))(v127, v122);
    }
    unint64_t v128 = *v123 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v122 = v128 | *(void *)v122 & 7;
    *((void *)v122 + 1) = v123;
    *(void *)(v128 + 8) = v122;
    *int v123 = *v123 & 7 | (unint64_t)v122;
    if ((void)v319) {
      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v122);
    }
    LODWORD(v320) = 1;
    uint64_t v321 = 0;
    uint64_t v322 = 1;
    llvm::MachineInstr::addOperand(v122, v315, (const llvm::MachineOperand *)&v320);
    LODWORD(v320) = 1;
    uint64_t v321 = 0;
    uint64_t v322 = 2;
    llvm::MachineInstr::addOperand(v122, v315, (const llvm::MachineOperand *)&v320);
    uint64_t v118 = v316;
    int v119 = (unsigned __int8 *)*((void *)&v317 + 1);
  }
  uint64_t v129 = 116448;
  if (v59 < 3) {
    uint64_t v129 = 116496;
  }
  uint64_t v130 = *(void *)(v118 + 8) + v129;
  uint64_t v323 = v119;
  if (v119) {
    llvm::MetadataTracking::track((uint64_t)&v323, v119, 2);
  }
  unsigned int v131 = llvm::MachineFunction::CreateMachineInstr(v315, v130, &v323, 0);
  if (!v323) {
    goto LABEL_151;
  }
  int v291 = *v323;
  if ((v291 - 4) > 0x1E)
  {
    if ((v291 - 3) >= 0xFFFFFFFE) {
      int v311 = v323;
    }
    else {
      int v311 = 0;
    }
    if ((v291 - 3) < 0xFFFFFFFE)
    {
      BOOL v57 = v314;
      if (v291 == 3) {
        *((void *)v323 + 1) = 0;
      }
      goto LABEL_151;
    }
    unint64_t v293 = (unint64_t)(v311 + 8);
  }
  else
  {
    BOOL v57 = v314;
    if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
      goto LABEL_151;
    }
    uint64_t v292 = *((void *)v323 + 2);
    if ((v292 & 4) == 0) {
      goto LABEL_151;
    }
    unint64_t v293 = v292 & 0xFFFFFFFFFFFFFFF8;
    if (!v293) {
      goto LABEL_151;
    }
  }
  int v320 = &v323;
  sub_1CC5FA668(v293 + 16, &v320);
  BOOL v57 = v314;
LABEL_151:
  uint64_t v132 = (unint64_t *)*((void *)&v318 + 1);
  uint64_t v133 = *(void *)(v318 + 40);
  *((void *)v131 + 3) = v133;
  uint64_t v134 = *(void *)(v133 + 32);
  uint64_t v135 = *((unsigned int *)v131 + 10);
  if (v135)
  {
    uint64_t v222 = *((void *)v131 + 4);
    uint64_t v223 = *(void *)(v134 + 40);
    uint64_t v224 = 32 * v135;
    do
    {
      if (!*(unsigned char *)v222)
      {
        uint64_t v225 = *(unsigned int *)(v222 + 4);
        if ((int)v225 >= 0) {
          uint64_t v226 = (uint64_t *)(*(void *)(v223 + 272) + 8 * v225);
        }
        else {
          uint64_t v226 = (uint64_t *)(*(void *)(v223 + 24) + 16 * (v225 & 0x7FFFFFFF) + 8);
        }
        uint64_t v227 = *v226;
        if (*v226)
        {
          uint64_t v228 = *(void *)(v227 + 16);
          *(void *)(v227 + 16) = v222;
          *(void *)(v222 + 16) = v228;
          if (*(unsigned char *)(v222 + 3))
          {
            *(void *)(v222 + 24) = v227;
          }
          else
          {
            *(void *)(v222 + 24) = 0;
            uint64_t v226 = (uint64_t *)(v228 + 24);
          }
        }
        else
        {
          *(void *)(v222 + 16) = v222;
          *(void *)(v222 + 24) = 0;
        }
        *uint64_t v226 = v222;
      }
      v222 += 32;
      v224 -= 32;
    }
    while (v224);
  }
  uint64_t v136 = *(void *)(v134 + 728);
  if (v136) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v136 + 24))(v136, v131);
  }
  unint64_t v137 = *v132 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v131 = v137 | *(void *)v131 & 7;
  *((void *)v131 + 1) = v132;
  *(void *)(v137 + 8) = v131;
  *uint64_t v132 = *v132 & 7 | (unint64_t)v131;
  if ((void)v319) {
    (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v131);
  }
  int v58 = a9;
LABEL_157:
  BOOL v138 = (v58 - 5) >= 2;
  int v139 = 8262;
  if (!v138) {
    int v139 = 8264;
  }
  if (v59 >= 3) {
    unsigned int v140 = v139;
  }
  else {
    unsigned int v140 = 8263;
  }
  uint64_t v141 = *(void *)(v316 + 8) + 48 * v140;
  uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
  if (*((void *)&v317 + 1)) {
    llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
  }
  uint64_t v142 = llvm::MachineFunction::CreateMachineInstr(v315, v141, &v323, 0);
  if (v323)
  {
    int v264 = *v323;
    if ((v264 - 4) > 0x1E)
    {
      if ((v264 - 3) >= 0xFFFFFFFE) {
        int v296 = v323;
      }
      else {
        int v296 = 0;
      }
      if ((v264 - 3) < 0xFFFFFFFE)
      {
        BOOL v57 = v314;
        if (v264 == 3) {
          *((void *)v323 + 1) = 0;
        }
        goto LABEL_165;
      }
      unint64_t v266 = (unint64_t)(v296 + 8);
    }
    else
    {
      BOOL v57 = v314;
      if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
        goto LABEL_165;
      }
      uint64_t v265 = *((void *)v323 + 2);
      if ((v265 & 4) == 0) {
        goto LABEL_165;
      }
      unint64_t v266 = v265 & 0xFFFFFFFFFFFFFFF8;
      if (!v266) {
        goto LABEL_165;
      }
    }
    int v320 = &v323;
    sub_1CC5FA668(v266 + 16, &v320);
    BOOL v57 = v314;
  }
LABEL_165:
  uint64_t v143 = (unint64_t *)*((void *)&v318 + 1);
  uint64_t v144 = *(void *)(v318 + 40);
  *((void *)v142 + 3) = v144;
  uint64_t v145 = *(void *)(v144 + 32);
  uint64_t v146 = *((unsigned int *)v142 + 10);
  if (v146)
  {
    uint64_t v166 = *((void *)v142 + 4);
    uint64_t v167 = *(void *)(v145 + 40);
    uint64_t v168 = 32 * v146;
    do
    {
      if (!*(unsigned char *)v166)
      {
        uint64_t v169 = *(unsigned int *)(v166 + 4);
        if ((int)v169 >= 0) {
          int v170 = (uint64_t *)(*(void *)(v167 + 272) + 8 * v169);
        }
        else {
          int v170 = (uint64_t *)(*(void *)(v167 + 24) + 16 * (v169 & 0x7FFFFFFF) + 8);
        }
        uint64_t v171 = *v170;
        if (*v170)
        {
          uint64_t v172 = *(void *)(v171 + 16);
          *(void *)(v171 + 16) = v166;
          *(void *)(v166 + 16) = v172;
          if (*(unsigned char *)(v166 + 3))
          {
            *(void *)(v166 + 24) = v171;
          }
          else
          {
            *(void *)(v166 + 24) = 0;
            int v170 = (uint64_t *)(v172 + 24);
          }
        }
        else
        {
          *(void *)(v166 + 16) = v166;
          *(void *)(v166 + 24) = 0;
        }
        *int v170 = v166;
      }
      v166 += 32;
      v168 -= 32;
    }
    while (v168);
  }
  uint64_t v147 = *(void *)(v145 + 728);
  if (v147) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v147 + 24))(v147, v142);
  }
  unint64_t v148 = *v143 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v142 = v148 | *(void *)v142 & 7;
  *((void *)v142 + 1) = v143;
  *(void *)(v148 + 8) = v142;
  *uint64_t v143 = *v143 & 7 | (unint64_t)v142;
  if ((void)v319) {
    (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v142);
  }
  LODWORD(v320) = 1;
  uint64_t v321 = 0;
  uint64_t v322 = 2;
  llvm::MachineInstr::addOperand(v142, v315, (const llvm::MachineOperand *)&v320);
  LODWORD(v320) = 1;
  uint64_t v321 = 0;
  uint64_t v322 = 2;
  llvm::MachineInstr::addOperand(v142, v315, (const llvm::MachineOperand *)&v320);
  if (v57)
  {
    unsigned int v109 = v315;
    uint64_t v149 = *(void *)(v316 + 8) + 48 * v140;
    uint64_t v323 = (unsigned __int8 *)*((void *)&v317 + 1);
    if (*((void *)&v317 + 1)) {
      llvm::MetadataTracking::track((uint64_t)&v323, *((unsigned __int8 **)&v317 + 1), 2);
    }
    unsigned int v111 = llvm::MachineFunction::CreateMachineInstr(v315, v149, &v323, 0);
    if (!v323) {
      goto LABEL_174;
    }
    int v282 = *v323;
    if ((v282 - 4) > 0x1E)
    {
      if ((v282 - 3) >= 0xFFFFFFFE) {
        int v308 = v323;
      }
      else {
        int v308 = 0;
      }
      if ((v282 - 3) < 0xFFFFFFFE)
      {
        if (v282 == 3) {
          *((void *)v323 + 1) = 0;
        }
        goto LABEL_174;
      }
      unint64_t v284 = (unint64_t)(v308 + 8);
    }
    else
    {
      if ((v323[1] & 0x7F) != 2 && !*((_DWORD *)v323 + 3)) {
        goto LABEL_174;
      }
      uint64_t v283 = *((void *)v323 + 2);
      if ((v283 & 4) == 0) {
        goto LABEL_174;
      }
      unint64_t v284 = v283 & 0xFFFFFFFFFFFFFFF8;
      if (!v284) {
        goto LABEL_174;
      }
    }
    int v320 = &v323;
    sub_1CC5FA668(v284 + 16, &v320);
LABEL_174:
    int v150 = (unint64_t *)*((void *)&v318 + 1);
    uint64_t v151 = *(void *)(v318 + 40);
    *((void *)v111 + 3) = v151;
    uint64_t v152 = *(void *)(v151 + 32);
    uint64_t v153 = *((unsigned int *)v111 + 10);
    if (v153)
    {
      uint64_t v201 = *((void *)v111 + 4);
      uint64_t v202 = *(void *)(v152 + 40);
      uint64_t v203 = 32 * v153;
      do
      {
        if (!*(unsigned char *)v201)
        {
          uint64_t v204 = *(unsigned int *)(v201 + 4);
          if ((int)v204 >= 0) {
            int v205 = (uint64_t *)(*(void *)(v202 + 272) + 8 * v204);
          }
          else {
            int v205 = (uint64_t *)(*(void *)(v202 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8);
          }
          uint64_t v206 = *v205;
          if (*v205)
          {
            uint64_t v207 = *(void *)(v206 + 16);
            *(void *)(v206 + 16) = v201;
            *(void *)(v201 + 16) = v207;
            if (*(unsigned char *)(v201 + 3))
            {
              *(void *)(v201 + 24) = v206;
            }
            else
            {
              *(void *)(v201 + 24) = 0;
              int v205 = (uint64_t *)(v207 + 24);
            }
          }
          else
          {
            *(void *)(v201 + 16) = v201;
            *(void *)(v201 + 24) = 0;
          }
          *int v205 = v201;
        }
        v201 += 32;
        v203 -= 32;
      }
      while (v203);
    }
    uint64_t v154 = *(void *)(v152 + 728);
    if (v154) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v154 + 24))(v154, v111);
    }
    unint64_t v155 = *v150 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unsigned int v111 = v155 | *(void *)v111 & 7;
    *((void *)v111 + 1) = v150;
    *(void *)(v155 + 8) = v111;
    *int v150 = *v150 & 7 | (unint64_t)v111;
    if ((void)v319) {
      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v111);
    }
    LODWORD(v320) = 1;
    uint64_t v321 = 0;
    uint64_t v322 = 3;
    llvm::MachineInstr::addOperand(v111, v315, (const llvm::MachineOperand *)&v320);
    LODWORD(v320) = 1;
    uint64_t v321 = 0;
    uint64_t v322 = 2;
LABEL_180:
    llvm::MachineInstr::addOperand(v111, v109, (const llvm::MachineOperand *)&v320);
  }
LABEL_181:
  if (*((void *)&v317 + 1))
  {
    int v156 = **((unsigned char **)&v317 + 1);
    if ((v156 - 4) > 0x1E)
    {
      if ((v156 - 3) >= 0xFFFFFFFE) {
        uint64_t v157 = *((void *)&v317 + 1);
      }
      else {
        uint64_t v157 = 0;
      }
      if ((v156 - 3) < 0xFFFFFFFE)
      {
        if (v156 == 3) {
          *(void *)(*((void *)&v317 + 1) + 8) = 0;
        }
        return 1;
      }
      unint64_t v158 = v157 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v317 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v317 + 1) + 12)) {
        return 1;
      }
      uint64_t v257 = *(void *)(*((void *)&v317 + 1) + 16);
      if ((v257 & 4) == 0) {
        return 1;
      }
      unint64_t v158 = v257 & 0xFFFFFFFFFFFFFFF8;
      if (!v158) {
        return 1;
      }
    }
    int v320 = (unsigned __int8 **)&v317 + 1;
    sub_1CC5FA668(v158 + 16, &v320);
  }
  return 1;
}

int32x2_t sub_1CB9A0254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int32x2_t **)(a1 + 72);
  int32x2_t v3 = v2[6];
  uint64_t v4 = v2[8].u32[0];
  unsigned int v5 = a2 >> 4;
  if (v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v7 = *(void *)&v3 + 16 * v6;
    uint64_t v8 = *(void *)v7;
    if (*(void *)v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v4 - 1);
      uint64_t v8 = *(void *)(*(void *)&v3 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = *(void *)&v3 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = *(void *)&v3 + 16 * v4;
LABEL_8:
  if (v7 != *(void *)&v3 + 16 * v4)
  {
    *(void *)(*(void *)v2 + 8 * *(unsigned int *)(v7 + 8)) = 0;
    *(void *)uint64_t v7 = -8192;
    int32x2_t result = vadd_s32(v2[7], (int32x2_t)0x1FFFFFFFFLL);
    v2[7] = result;
  }
  int v11 = *(int32x2_t **)(a1 + 80);
  int32x2_t v12 = v11[10];
  uint64_t v13 = v11[12].u32[0];
  if (v13)
  {
    LODWORD(v14) = (v13 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v15 = *(void *)&v12 + 16 * v14;
    uint64_t v16 = *(void *)v15;
    if (*(void *)v15 == a2) {
      goto LABEL_17;
    }
    int v17 = 1;
    while (v16 != -4096)
    {
      int v18 = v14 + v17++;
      uint64_t v14 = v18 & (v13 - 1);
      uint64_t v16 = *(void *)(*(void *)&v12 + 16 * v14);
      if (v16 == a2)
      {
        uint64_t v15 = *(void *)&v12 + 16 * v14;
        goto LABEL_17;
      }
    }
  }
  uint64_t v15 = *(void *)&v12 + 16 * v13;
LABEL_17:
  if (v15 != *(void *)&v12 + 16 * v13)
  {
    *(void *)(*(void *)v11 + 8 * *(unsigned int *)(v15 + 8)) = 0;
    *(void *)uint64_t v15 = -8192;
    int32x2_t result = vadd_s32(v11[11], (int32x2_t)0x1FFFFFFFFLL);
    v11[11] = result;
  }
  return result;
}

void *sub_1CB9A038C(uint64_t a1, uint64_t a2)
{
  int v2 = **(unsigned __int16 **)(a2 + 16);
  if (v2 == 19 || (v2 - 45) <= 0xD2)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v26 = a2;
    int32x2_t result = (void *)(v3 + 48);
    uint64_t v5 = *(void *)(v3 + 48);
    int v6 = *(_DWORD *)(v3 + 8);
    int v7 = *(_DWORD *)(v3 + 64);
    if (v7)
    {
      int v8 = v7 - 1;
      unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      int v10 = (void *)(v5 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        return result;
      }
      int32x2_t v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          int32x2_t v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        int v10 = (void *)(v5 + 16 * v9);
        uint64_t v11 = *v10;
        if (*v10 == a2) {
          return result;
        }
      }
LABEL_25:
      if (v12) {
        uint64_t v24 = v12;
      }
      else {
        uint64_t v24 = v10;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v26 = a2;
    int32x2_t result = (void *)(v3 + 80);
    uint64_t v16 = *(void *)(v3 + 80);
    int v6 = *(_DWORD *)(v3 + 8);
    int v17 = *(_DWORD *)(v3 + 96);
    if (v17)
    {
      int v18 = v17 - 1;
      unsigned int v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
      int v10 = (void *)(v16 + 16 * v19);
      uint64_t v20 = *v10;
      if (*v10 == a2) {
        return result;
      }
      int32x2_t v12 = 0;
      int v21 = 1;
      while (v20 != -4096)
      {
        if (v12) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v20 == -8192;
        }
        if (v22) {
          int32x2_t v12 = v10;
        }
        unsigned int v23 = v19 + v21++;
        unsigned int v19 = v23 & v18;
        int v10 = (void *)(v16 + 16 * v19);
        uint64_t v20 = *v10;
        if (*v10 == a2) {
          return result;
        }
      }
      goto LABEL_25;
    }
  }
  uint64_t v24 = 0;
LABEL_28:
  int32x2_t result = sub_1CB9A052C((uint64_t)result, (uint64_t)&v26, &v26, v24);
  *int32x2_t result = v26;
  *((_DWORD *)result + 2) = v6;
  unsigned int v25 = *(_DWORD *)(v3 + 8);
  if (v25 >= *(_DWORD *)(v3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v3 + 8 * v25) = v26;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void *sub_1CB9A052C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CB9A06A8(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          int v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CB9A06A8(a1, v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          int v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CB9A06A8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int32x2_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB9A0774(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *int32x2_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CB9A0774(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    uint64_t v6 = *a2;
    if (*a2 != -4096 && v6 != -8192)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 16 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 16 * (v14 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_21;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_21:
      *(void *)uint64_t v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CB9A0854(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t sub_1CB9A0878(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t sub_1CB9A089C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 80);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB9A0908(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 80);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB9A0974(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 80);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB9A09E0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 80);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB9A0A4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 80);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 72);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB9A0AB8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 80);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 72);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB9A0B24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 80);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 72);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int32x2_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void sub_1CB9A0B90()
{
}

uint64_t sub_1CB9A0BA4()
{
  return 1;
}

uint64_t sub_1CB9A0BAC()
{
  return 0;
}

uint64_t sub_1CB9A0BB4()
{
  return 0;
}

uint64_t sub_1CB9A0BBC()
{
  return 24;
}

uint64_t sub_1CB9A0BC4()
{
  return 8;
}

uint64_t sub_1CB9A0BCC(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1CB9A0BD4()
{
  return 1;
}

uint64_t sub_1CB9A0BDC()
{
  return 0;
}

uint64_t sub_1CB9A0BE4(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return 1;
}

uint64_t sub_1CB9A0BF4()
{
  return 1;
}

uint64_t sub_1CB9A0BFC()
{
  return 0;
}

uint64_t sub_1CB9A0C04()
{
  return 1;
}

uint64_t sub_1CB9A0C0C(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, _DWORD *a14, uint64_t a15, int a16, __int32 a17)
{
  if (a5 == -1)
  {
    uint64_t v20 = 16;
    if (a13) {
      uint64_t v20 = 8;
    }
    uint64_t v19 = (char *)&unk_1CD9739A0 + 24 * (a12 ^ 1u) + 4 * (a3 != 7) + v20;
  }
  else
  {
    a1.i32[0] = a17;
    uint8x8_t v17 = (uint8x8_t)vcnt_s8(a1);
    v17.i16[0] = vaddlv_u8(v17);
    int v18 = *a14 - 1;
    if (!*a14) {
      int v18 = 0;
    }
    uint64_t v19 = (char *)&unk_1CD971AA0
        + 768 * a7
        + 384 * (a12 ^ 1)
        + 96 * (v17.i32[0] - 1)
        + 48 * (a13 ^ 1)
        + 16 * v18
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

uint64_t sub_1CB9A0CD4()
{
  return 0;
}

uint64_t sub_1CB9A0CDC()
{
  return 0;
}

uint64_t sub_1CB9A0CE4(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1CB9A0CF8(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB9A0D0C(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1CB9A0D20()
{
  return 417;
}

uint64_t sub_1CB9A0D28()
{
  return 0;
}

uint64_t sub_1CB9A0D30()
{
  return 0;
}

uint64_t sub_1CB9A0D38()
{
  return 1;
}

uint64_t sub_1CB9A0D40()
{
  return 0;
}

uint64_t sub_1CB9A0D48()
{
  return 0;
}

uint64_t sub_1CB9A0D50()
{
  return 3;
}

uint64_t sub_1CB9A0D58()
{
  return 0;
}

uint64_t sub_1CB9A0D60(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 61)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(_DWORD *)(a2 + 4) == 3;
  }
  if (v2) {
    return 6;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CB9A0D80()
{
  return 0;
}

uint64_t sub_1CB9A0D88()
{
  return 1;
}

uint64_t sub_1CB9A0D90(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2, 1)+ 24);
  }
  else {
    return dword_1CDAF3B44[(int)a2 - 2];
  }
}

__int16 ***sub_1CB9A0DF4(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = &off_1E66A9918[a2 - 1];
  if (!a3) {
    uint64_t v3 = &(&off_1E66A9890)[a2 - 1];
  }
  return *v3;
}

uint64_t sub_1CB9A0E24()
{
  return 0x1900000001;
}

uint64_t sub_1CB9A0E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 8) + 216))(*(void *)(a3 + 8), a3 + 128, a3);
    *(void *)(a3 + 48) = v5;
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 112);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8))
    {
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(void *)(v7 + 24);
          uint64_t v10 = &unk_1EBCBE000;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v24 = v9;
            uint64_t v25 = v5;
            int v23 = v8;
            int v20 = __cxa_guard_acquire(&qword_1EBCBE588);
            uint64_t v10 = &unk_1EBCBE000;
            int v8 = v23;
            int v21 = v20;
            uint64_t v9 = v24;
            uint64_t v5 = v25;
            if (v21)
            {
              unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v22 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v22;
              __cxa_guard_release(&qword_1EBCBE588);
              uint64_t v10 = (void *)&unk_1EBCBE000;
              int v8 = v23;
              uint64_t v9 = v24;
              uint64_t v5 = v25;
            }
          }
          unint64_t v11 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v10[176] ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v10[176] ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
          unsigned int v12 = (-348639895 * ((v11 >> 47) ^ v11)) ^ 0x616F6E73;
          int v13 = v8 - 1;
          for (int i = 1; ; ++i)
          {
            unsigned int v15 = v12 & v13;
            uint64_t v16 = v9 + 24 * v15;
            uint8x8_t v17 = *(void **)v16;
            if (*(void *)v16 == -1)
            {
              if ("samplesnoalias" == (char *)-1) {
                break;
              }
            }
            else if (v17 == (void *)-2)
            {
              if ("samplesnoalias" == (char *)-2) {
                break;
              }
            }
            else if (*(void *)(v16 + 8) == 14 {
                   && *v17 == 0x6E73656C706D6173
            }
                   && *(void *)((char *)v17 + 6) == 0x7361696C616F6E73)
            {
              break;
            }
            if (v17 == (void *)-1) {
              break;
            }
            unsigned int v12 = i + v15;
          }
        }
      }
    }
  }

  return sub_1CB9A15FC(v5, a2, a3);
}

uint64_t sub_1CB9A107C(uint64_t a1, int a2)
{
  return dword_1CDAF3B70[a2];
}

uint64_t sub_1CB9A108C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, char a6, uint64_t a7, int a8, char a9, uint64_t a10)
{
  if (*(unsigned char *)(a2 + 1)) {
    uint64_t v15 = 17301504;
  }
  else {
    uint64_t v15 = 0x80000;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3[1] + 16))(a3[1], *a3);
  int v17 = v16;
  BOOL v18 = *(unsigned char *)(v16 + 404) == 0;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    BOOL v22 = *(unsigned char *)(v16 + 297) == 0;
    uint64_t v23 = *a3;
    int v46 = 0;
    int v24 = sub_1CBA864D8(v16, v23, "SampleWriteCacheCtl", &v46);
    int v21 = v46;
    if (!v24) {
      int v21 = v22;
    }
  }
  else
  {
    uint64_t v19 = *a3;
    int v46 = 0;
    int v20 = sub_1CBA864D8(v16, v19, "SampleReadCacheCtl", &v46);
    int v21 = v46;
    if (!v20) {
      int v21 = 0;
    }
  }
  int v45 = v21;
  uint64_t v25 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    int v46 = 0;
    if (sub_1CBA864D8(v17, v25, "SampleWriteL2Pers", &v46)) {
      int v26 = v46;
    }
    else {
      int v26 = v18;
    }
  }
  else
  {
    int v46 = 0;
    if (sub_1CBA864D8(v17, v25, "SampleReadL2Pers", &v46)) {
      int v26 = v46;
    }
    else {
      int v26 = 1;
    }
  }
  int v27 = *(_DWORD *)(a2 + 4);
  if (v27 == 1)
  {
    uint64_t v30 = *(_DWORD *)(a2 + 56) != -1;
    goto LABEL_35;
  }
  if (v27 != 2)
  {
    if (*(_DWORD *)(a2 + 48) == -1 && !*(unsigned char *)(a2 + 60))
    {
      uint64_t v30 = 5;
      goto LABEL_35;
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a2 + 61) || *(_DWORD *)(a2 + 48) != -1)
  {
LABEL_27:
    if (*(_DWORD *)(a2 + 56) == -1) {
      uint64_t v30 = 6;
    }
    else {
      uint64_t v30 = 7;
    }
    goto LABEL_35;
  }
  int v28 = *(_DWORD *)(a2 + 52);
  int v29 = *(_DWORD *)(a2 + 56);
  if (v28 == -1 || v29 == -1)
  {
    BOOL v31 = v29 == -1;
    uint64_t v32 = 2;
    if (!v31) {
      uint64_t v32 = 3;
    }
    if (v28 == -1) {
      uint64_t v30 = v32;
    }
    else {
      uint64_t v30 = 4;
    }
  }
  else
  {
    uint64_t v30 = 8;
  }
LABEL_35:
  BOOL v33 = *(_DWORD *)(a2 + 64) != -1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a4);
  unint64_t v35 = v15 | ((a6 & 0xF) << 11) | (unint64_t)v30 | (16 * v33) | ((unint64_t)(result & 0xF) << 6) | ((unint64_t)(*(_DWORD *)(a2 + 80) != -1) << 10) | ((unint64_t)*(unsigned __int8 *)(a2 + 62) << 17);
  if (*(unsigned char *)(a2 + 62))
  {
    if (*(_DWORD *)(a2 + 84) == -1 || (a5 - 1) > 2) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = ((unint64_t)(a5 - 1) << 15) + 0x8000;
    }
    int v37 = a8;
    v35 |= v36;
  }
  else
  {
    int v37 = a8;
  }
  unint64_t v38 = v35 | ((unint64_t)(*(_DWORD *)(a2 + 48) != -1) << 18);
  if (v37) {
    v38 |= 0x200000uLL;
  }
  if (a9) {
    v38 |= 0x400000uLL;
  }
  if (*(unsigned char *)a2) {
    uint64_t v39 = v38 | 0x800000;
  }
  else {
    uint64_t v39 = v38;
  }
  unsigned int v40 = *(_DWORD *)(a10 + 8);
  if (v40 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v40) = v39;
  unsigned int v41 = *(_DWORD *)(a10 + 12);
  unsigned int v42 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v42;
  if (v42 >= v41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v42) = v45 | (4 * v26);
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void sub_1CB9A1408(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4072;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB048;
}

void sub_1CB9A14D8(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4075;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB080;
}

uint64_t sub_1CB9A15A8()
{
  return 0;
}

uint64_t sub_1CB9A15B0()
{
  return 0;
}

uint64_t sub_1CB9A15B8()
{
  return 1;
}

uint64_t sub_1CB9A15C0()
{
  return 0;
}

uint64_t sub_1CB9A15C8()
{
  return 1;
}

uint64_t sub_1CB9A15D0()
{
  return 0;
}

uint64_t sub_1CB9A15D8()
{
  return 395;
}

BOOL sub_1CB9A15E0(uint64_t a1, int a2)
{
  return a2 == 318;
}

uint64_t sub_1CB9A15EC()
{
  return 0;
}

uint64_t sub_1CB9A15F4()
{
  return 0;
}

uint64_t sub_1CB9A15FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  (*(void (**)(void))(**(void **)(a3 + 16) + 104))(*(void *)(a3 + 16));
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  if (!sub_1CB834D78((uint64_t *)(a1 + 160), &v7, &v8)
    || v8 == *(void *)(a1 + 160) + 16 * *(unsigned int *)(a1 + 176))
  {
    sub_1CB9A17A0((uint64_t *)(a1 + 160), &v6);
    operator new();
  }
  return *(void *)(v8 + 8);
}

void *sub_1CB9A17A0(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB834D78(a1, a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CB9A1800((uint64_t)a1, (uint64_t)a2, a2, v7);
    *unsigned int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CB9A1800(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CB9A18B4(a1, v7);
  uint64_t v9 = 0;
  sub_1CB834D78((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CB9A18B4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB9A1980(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CB9A1980(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CB834D78((uint64_t *)v5, a2, &v11);
      uint64_t v9 = v11;
      void *v11 = *a2;
      uint64_t v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      uint64_t result = a2[1];
      a2[1] = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
    }
    a2 += 2;
  }
  return result;
}

void sub_1CB9A1A68()
{
}

uint64_t sub_1CB9A1A7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1CB9A1A84()
{
  return 1;
}

uint64_t sub_1CB9A1A8C()
{
  return 1;
}

uint64_t sub_1CB9A1A94()
{
  return 1;
}

void sub_1CB9A1A9C()
{
}

uint64_t sub_1CB9A1AB0()
{
  return 1;
}

uint64_t sub_1CB9A1AB8(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned int *a14, uint64_t a15, unsigned __int8 a16, __int32 a17)
{
  unsigned int v17 = a12 ^ 1;
  if (a5 == -1)
  {
    uint64_t v20 = 80;
    if (a13) {
      uint64_t v20 = 40;
    }
    uint64_t v19 = (char *)&unk_1CD9739D0 + 120 * v17 + 20 * (a3 != 7) + v20 + ((2 * *a14) & 0x1FFFFFFFCLL);
  }
  else
  {
    a1.i32[0] = a17;
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(a1);
    v18.i16[0] = vaddlv_u8(v18);
    uint64_t v19 = (char *)&unk_1CD9720A0
        + 3200 * a7
        + 1600 * v17
        + 320 * (v18.i32[0] - (a16 ^ 1))
        + 160 * (a13 ^ 1)
        + 16 * *a14
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

void sub_1CB9A1B90(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4073;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB048;
}

void sub_1CB9A1C60(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4077;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB080;
}

uint64_t sub_1CB9A1D30()
{
  return 1;
}

void sub_1CB9A1D38()
{
}

uint64_t sub_1CB9A1D4C()
{
  return 1;
}

uint64_t sub_1CB9A1D54(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  if ((v6 & 0x80000000) != 0) {
    unsigned int v7 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v7 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if (*(unsigned char *)(v8 + 3) & 1) != 0 || (uint64_t v8 = *(void *)(v8 + 24)) != 0 && (*(unsigned char *)(v8 + 3))
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        int v10 = **(unsigned __int16 **)(v9 + 16);
        if (v10 == 120)
        {
          if (a4) {
            *a4 = 0;
          }
          uint64_t v11 = *(void *)(v9 + 32);
          int v12 = *(unsigned __int8 *)(v11 + 32);
          int v13 = (void *)(v11 + 48);
          if (v12 != 1)
          {
            uint64_t v14 = *v13;
            int v13 = (void *)(*v13 + 24);
            if (*(_DWORD *)(v14 + 32) >= 0x41u) {
              int v13 = (void *)*v13;
            }
          }
          *a3 = *v13;
          return 1;
        }
        if (v10 == 121)
        {
          if (a4) {
            *a4 = 1;
          }
          uint64_t v16 = *(void *)(*(void *)(v9 + 32) + 48);
          uint8x8_t v18 = *(void **)(v16 + 32);
          unsigned int v17 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
          if (v18 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v17, (llvm::APInt *)&v22);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v17, (uint64_t)&v22);
          }
          uint64_t v19 = v22;
          BOOL v20 = v23 >= 0x41;
          if (v23 >= 0x41) {
            int v21 = v22;
          }
          else {
            int v21 = &v22;
          }
          *a3 = *v21;
          if (v20 && v19) {
            MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CB9A1EAC(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  if ((v6 & 0x80000000) != 0) {
    unsigned int v7 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v7 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (!v8) {
    return 0;
  }
  if ((*(unsigned char *)(v8 + 3) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v8 + 24);
    if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    return 0;
  }
  int v10 = **(unsigned __int16 **)(v9 + 16);
  if (v10 != 121)
  {
    if (v10 == 120)
    {
      if (a4) {
        *a4 = 0;
      }
      uint64_t v16 = *(void *)(v9 + 32);
      if (*(unsigned char *)(v16 + 32) == 1)
      {
        uint64_t v14 = *(void *)(v16 + 48);
      }
      else
      {
        uint64_t v17 = *(void *)(v16 + 48);
        unsigned int v18 = *(_DWORD *)(v17 + 32);
        if (v18 > 0x40) {
          uint64_t v14 = **(void **)(v17 + 24);
        }
        else {
          uint64_t v14 = (uint64_t)(*(void *)(v17 + 24) << -(char)v18) >> -(char)v18;
        }
      }
      goto LABEL_13;
    }
    return 0;
  }
  if (a4) {
    *a4 = 1;
  }
  uint64_t v11 = *(void *)(*(void *)(v9 + 32) + 48);
  int v13 = *(void **)(v11 + 32);
  int v12 = (llvm::detail::DoubleAPFloat *)(v11 + 32);
  if (v13 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (llvm::APInt *)&v19);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v12, (uint64_t)&v19);
  }
  if (v20 > 0x40)
  {
    *a3 = *v19;
    MEMORY[0x1D25D9CB0]();
    return 1;
  }
  uint64_t v14 = (uint64_t)((void)v19 << -(uint64_t)v20) >> -(uint64_t)v20;
LABEL_13:
  *a3 = v14;
  return 1;
}

uint64_t sub_1CB9A2020@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v8 = 0;
  uint64_t result = (*(uint64_t (**)(void, int *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), &v8);
  __int16 v6 = v8;
  unsigned int v7 = *(_DWORD *)a3 & 0xFFF00000;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 64;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = v7 & 0xFFF000FF | ((v6 & 0xFFF) << 8) | 7;
  *(_DWORD *)(a3 + 4) = a2;
  return result;
}

void sub_1CB9A20A4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
}

void *sub_1CB9A20B8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  int v10 = (void **)result;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a4);
    LODWORD(v66) = -1;
    uint64_t result = (void *)((uint64_t (*)(void **, uint64_t, long long *, void))(*v10)[19])(v10, v11, &v66, 0);
    if ((int)v66 >= 0) {
      int v12 = (int)result;
    }
    else {
      int v12 = 0;
    }
    if (!(v12 | result ^ 1)) {
      uint64_t v11 = 0;
    }
  }
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(unsigned char *)(a2 + 61)) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = *(unsigned char *)(a2 + 60) == 0;
    }
    if (v13 && *(_DWORD *)(a2 + 48) == -1)
    {
      unsigned int v15 = *(_DWORD *)(a2 + 4);
      if (!v15) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*v10[1] + 224))(v10[1], a2);
      unsigned int v15 = result >> 1;
      if (!(result >> 1)) {
        goto LABEL_34;
      }
    }
    int v23 = 0;
    do
    {
      uint64_t v24 = ((uint64_t (*)(void **, uint64_t, void))(*v10)[2])(v10, a4, (v23 + *(_DWORD *)(a2 + 72)));
      uint64_t result = (void *)((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v24, a6, 0xFFFFFFFFLL);
      ++v23;
    }
    while (v15 != v23);
LABEL_34:
    if (v11)
    {
      uint64_t result = ((void *(*)(long long *__return_ptr, void **, uint64_t))(*v10)[21])(&v66, v10, v11);
      uint64_t v25 = *(unsigned int *)(a6 + 8);
      unint64_t v26 = *(void *)a6;
      if (v25 >= *(_DWORD *)(a6 + 12))
      {
        BOOL v59 = v26 + 32 * v25 > (unint64_t)&v66;
        if (v26 <= (unint64_t)&v66 && v59) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v27 = (_OWORD *)(v26 + 32 * *(unsigned int *)(a6 + 8));
      long long v28 = v67;
      *int v27 = v66;
      v27[1] = v28;
      ++*(_DWORD *)(a6 + 8);
      int v29 = 12;
    }
    else
    {
      int v29 = 8;
    }
    goto LABEL_38;
  }
  unsigned int v16 = *(_DWORD *)(a2 + 76);
  unsigned int v17 = *(_DWORD *)(a2 + 68);
  if (v16 != -1 || v17 != -1)
  {
    if (v17 == -1) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = v17;
    }
    uint64_t v20 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v19);
    if (*(_DWORD *)(a2 + 92) != -1)
    {
      unsigned int v65 = -1;
      unsigned __int8 v21 = ((uint64_t (*)(void **, uint64_t, unsigned int *, void))(*v10)[18])(v10, v20, &v65, 0);
      if ((v21 & (v65 < 0xFF)) != 0) {
        int v22 = 7;
      }
      else {
        int v22 = 6;
      }
      *a5 = v22;
      uint64_t result = ((void *(*)(long long *__return_ptr, void **, uint64_t))(*v10)[21])(&v66, v10, v20);
      goto LABEL_47;
    }
    if ((((uint64_t (*)(void **, uint64_t))(*v10)[30])(v10, v20) & 1) != 0
      || ((unsigned int (*)(void **, uint64_t))(*v10)[28])(v10, v20))
    {
      if ((*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1])) {
        goto LABEL_127;
      }
    }
    else if ((((uint64_t (*)(void **, uint64_t))(*v10)[31])(v10, v20) & 1) == 0 {
           && !((unsigned int (*)(void **, uint64_t))(*v10)[29])(v10, v20)
    }
           || (*(unsigned int (**)(void *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_127:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const llvm::Twine *)1);
    }
    unsigned int v65 = -1;
    char v64 = 0;
    int v34 = ((uint64_t (*)(void **, uint64_t, unsigned int *, char *))(*v10)[18])(v10, v20, &v65, &v64);
    uint64_t result = 0;
    if (v65) {
      int v35 = 1;
    }
    else {
      int v35 = v34 ^ 1;
    }
    if (v17 == -1) {
      int v36 = v35;
    }
    else {
      int v36 = 1;
    }
    if (((v34 ^ 1) & 1) == 0)
    {
      if (v11)
      {
        if (v36)
        {
          LODWORD(v66) = 0;
          uint64_t result = (void *)((uint64_t (*)(void **, uint64_t, long long *, void))(*v10)[18])(v10, v11, &v66, 0);
          if (result) {
            v65 |= v66 << 16;
          }
        }
      }
    }
    if ((v36 & ~result) != 1 || v11 == 0)
    {
      if ((v34 & v36 | result) != 1) {
        goto LABEL_88;
      }
      unint64_t v38 = v10[4];
      if (*(_DWORD *)(v38[1] + 544) == 1) {
        goto LABEL_88;
      }
      uint64_t v39 = v65;
      uint64_t v40 = v38[43];
      if (((*(uint64_t (**)(uint64_t, void))(*(void *)v40 + 224))(v40, v65) & 0xFF00000000) == 0)
      {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v40 + 376))(v40, 1);
        if (result == -1) {
          goto LABEL_88;
        }
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v40 + 232))(v40, v39, result);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 328))(v40, v39);
      }
      unsigned int v42 = *(uint64_t (**)(void))(*v10[1] + 56);
    }
    else
    {
      uint64_t result = (void *)((uint64_t (*)(void **, uint64_t))(*v10)[22])(v10, v20);
      if (result == -1) {
        goto LABEL_88;
      }
      unsigned int v41 = result;
      uint64_t result = (void *)((uint64_t (*)(void **, uint64_t))(*v10)[22])(v10, v11);
      if ((v41 & 3) != 0 || result == -1 || v41 > 0xFF || result != v41 + 2) {
        goto LABEL_88;
      }
      unsigned int v42 = *(uint64_t (**)(void))(*v10[1] + 56);
    }
    uint64_t result = (void *)v42();
    if (result != -1)
    {
      if (v11) {
        int v43 = v36;
      }
      else {
        int v43 = 0;
      }
      if (v43 == 1) {
        uint64_t result = ((void *(*)(long long *__return_ptr, void **, void *))(*v10)[45])(&v66, v10, result);
      }
      else {
        uint64_t result = ((void *(*)(long long *__return_ptr, void **, void *))(*v10)[20])(&v66, v10, result);
      }
      uint64_t v55 = *(unsigned int *)(a6 + 8);
      unint64_t v56 = *(void *)a6;
      if (v55 >= *(_DWORD *)(a6 + 12))
      {
        BOOL v63 = v56 + 32 * v55 > (unint64_t)&v66;
        if (v56 > (unint64_t)&v66 || !v63) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v52 = 0;
      BOOL v57 = (_OWORD *)(v56 + 32 * *(unsigned int *)(a6 + 8));
      long long v58 = v67;
      _OWORD *v57 = v66;
      v57[1] = v58;
      ++*(_DWORD *)(a6 + 8);
      goto LABEL_95;
    }
LABEL_88:
    if (v36)
    {
      uint64_t result = ((void *(*)(long long *__return_ptr, void **, uint64_t))(*v10)[21])(&v66, v10, v20);
      uint64_t v44 = *(unsigned int *)(a6 + 8);
      unint64_t v45 = *(void *)a6;
      if (v44 >= *(_DWORD *)(a6 + 12))
      {
        BOOL v62 = v45 + 32 * v44 > (unint64_t)&v66;
        if (v45 > (unint64_t)&v66 || !v62) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v46 = (_OWORD *)(v45 + 32 * *(unsigned int *)(a6 + 8));
      long long v47 = v67;
      _OWORD *v46 = v66;
      v46[1] = v47;
      ++*(_DWORD *)(a6 + 8);
    }
    if (v11)
    {
      uint64_t result = ((void *(*)(long long *__return_ptr, void **, uint64_t))(*v10)[21])(&v66, v10, v11);
      uint64_t v48 = *(unsigned int *)(a6 + 8);
      unint64_t v49 = *(void *)a6;
      if (v48 >= *(_DWORD *)(a6 + 12))
      {
        BOOL v61 = v49 + 32 * v48 > (unint64_t)&v66;
        if (v49 > (unint64_t)&v66 || !v61) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v50 = (_OWORD *)(v49 + 32 * *(unsigned int *)(a6 + 8));
      long long v51 = v67;
      *int v50 = v66;
      v50[1] = v51;
      ++*(_DWORD *)(a6 + 8);
    }
    int v52 = 1;
LABEL_95:
    if (v17 != -1)
    {
      BOOL v53 = v52 == 0;
      int v29 = 2;
      int v54 = 6;
      goto LABEL_97;
    }
    BOOL v53 = v11 == 0;
    if (v36)
    {
      if (v52)
      {
        int v29 = 5;
        int v54 = 11;
LABEL_97:
        if (!v53) {
          int v29 = v54;
        }
        goto LABEL_38;
      }
      if (v11) {
        int v29 = 10;
      }
      else {
        int v29 = 1;
      }
    }
    else if (v11)
    {
      int v29 = 9;
    }
    else
    {
      int v29 = 0;
    }
LABEL_38:
    *a5 = v29;
    return result;
  }
  if (*(_DWORD *)(a2 + 92) == -1)
  {
    if (!v11)
    {
      *a5 = 0;
      return result;
    }
    *a5 = 9;
    uint64_t result = ((void *(*)(long long *__return_ptr, void **, uint64_t))(*v10)[21])(&v66, v10, v11);
  }
  else
  {
    *a5 = 7;
    uint64_t result = ((void *(*)(long long *__return_ptr, void **, void))(*v10)[9])(&v66, v10, 0);
  }
LABEL_47:
  uint64_t v30 = *(unsigned int *)(a6 + 8);
  unint64_t v31 = *(void *)a6;
  if (v30 >= *(_DWORD *)(a6 + 12))
  {
    BOOL v60 = v31 + 32 * v30 > (unint64_t)&v66;
    if (v31 > (unint64_t)&v66 || !v60) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v32 = (_OWORD *)(v31 + 32 * *(unsigned int *)(a6 + 8));
  long long v33 = v67;
  _OWORD *v32 = v66;
  v32[1] = v33;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

void *sub_1CB9A2C24(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 64);
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1) {
    int v10 = 1;
  }
  else {
    int v10 = (int)result;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || v11 != -1)
  {
    BOOL v13 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[2];
    if (v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if (v11 == -1) {
        uint64_t v11 = *(unsigned int *)(a2 + 64);
      }
      uint64_t v15 = v13(a1, a3, v11);
      uint64_t result = ((void *(*)(long long *__return_ptr, void **, uint64_t))(*a1)[21])(&v30, a1, v15);
      uint64_t v16 = *(unsigned int *)(a4 + 8);
      unint64_t v17 = *(void *)a4;
      if (v16 >= *(_DWORD *)(a4 + 12))
      {
        BOOL v25 = v17 + 32 * v16 > (unint64_t)&v30;
        if (v17 > (unint64_t)&v30 || !v25) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v18 = (_OWORD *)(v17 + 32 * *(unsigned int *)(a4 + 8));
      long long v19 = v30;
      long long v20 = v31;
    }
    else
    {
      uint64_t v21 = ((uint64_t (*)(void **, uint64_t))v13)(a1, a3);
      uint64_t v22 = ((uint64_t (*)(void **, uint64_t, void))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      ((void (*)(_OWORD *__return_ptr, void **, uint64_t))(*a1)[21])(v29, a1, v22);
      ((void (*)(_OWORD *__return_ptr, void **, uint64_t))(*a1)[21])(v28, a1, v21);
      long long v30 = v29[0];
      long long v31 = v29[1];
      long long v32 = v28[0];
      long long v33 = v28[1];
      uint64_t result = ((void *(*)(_OWORD *__return_ptr, void **, uint64_t, long long *, uint64_t))(*a1)[12])(v27, a1, a3, &v30, 2);
      uint64_t v23 = *(unsigned int *)(a4 + 8);
      unint64_t v24 = *(void *)a4;
      if (v23 >= *(_DWORD *)(a4 + 12))
      {
        BOOL v26 = v24 + 32 * v23 > (unint64_t)v27;
        if (v24 <= (unint64_t)v27 && v26) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v18 = (_OWORD *)(v24 + 32 * *(unsigned int *)(a4 + 8));
      long long v19 = v27[0];
      long long v20 = v27[1];
    }
    _OWORD *v18 = v19;
    v18[1] = v20;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

void sub_1CB9A2F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 48) != -1)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v40, a1, v19);
    uint64_t v20 = *(unsigned int *)(a4 + 8);
    unint64_t v21 = *(void *)a4;
    if (v20 >= *(_DWORD *)(a4 + 12))
    {
      BOOL v35 = v21 + 32 * v20 > (unint64_t)&v40;
      if (v21 > (unint64_t)&v40 || !v35) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v22 = (_OWORD *)(v21 + 32 * *(unsigned int *)(a4 + 8));
    long long v23 = v41[0];
    _OWORD *v22 = v40;
    v22[1] = v23;
    ++*(_DWORD *)(a4 + 8);
  }
  int v8 = *(_DWORD *)(a2 + 52);
  if (*(unsigned char *)(a2 + 1))
  {
    if (v8 == -1)
    {
LABEL_4:
      if (*(_DWORD *)(a2 + 56) != -1)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v40, a1, v9);
        uint64_t v10 = *(unsigned int *)(a4 + 8);
        unint64_t v11 = *(void *)a4;
        if (v10 >= *(_DWORD *)(a4 + 12))
        {
          BOOL v34 = v11 + 32 * v10 > (unint64_t)&v40;
          if (v11 <= (unint64_t)&v40 && v34) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v12 = (_OWORD *)(v11 + 32 * *(unsigned int *)(a4 + 8));
        long long v13 = v41[0];
        *int v12 = v40;
        v12[1] = v13;
        ++*(_DWORD *)(a4 + 8);
      }
      return;
    }
LABEL_11:
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v40, a1, v14);
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    unint64_t v16 = *(void *)a4;
    if (v15 >= *(_DWORD *)(a4 + 12))
    {
      BOOL v36 = v16 + 32 * v15 > (unint64_t)&v40;
      if (v16 > (unint64_t)&v40 || !v36) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v17 = (_OWORD *)(v16 + 32 * *(unsigned int *)(a4 + 8));
    long long v18 = v41[0];
    *unint64_t v17 = v40;
    v17[1] = v18;
    ++*(_DWORD *)(a4 + 8);
    goto LABEL_4;
  }
  if (v8 == -1) {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a2 + 56) == -1) {
    goto LABEL_11;
  }
  *(void *)&long long v40 = v41;
  *((void *)&v40 + 1) = 0x200000000;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v38, a1, v24);
  if (DWORD2(v40) >= HIDWORD(v40))
  {
    if ((unint64_t)v40 > (unint64_t)&v38
      || (unint64_t)v40 + 32 * DWORD2(v40) <= (unint64_t)&v38)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v25 = (_OWORD *)(v40 + 32 * DWORD2(v40));
  long long v26 = v39;
  _OWORD *v25 = v38;
  v25[1] = v26;
  ++DWORD2(v40);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 56));
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v38, a1, v27);
  if (DWORD2(v40) >= HIDWORD(v40))
  {
    if ((unint64_t)v40 > (unint64_t)&v38
      || (unint64_t)v40 + 32 * DWORD2(v40) <= (unint64_t)&v38)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v28 = (_OWORD *)(v40 + 32 * DWORD2(v40));
  long long v29 = v39;
  _OWORD *v28 = v38;
  v28[1] = v29;
  ++DWORD2(v40);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 96))(&v38, a1, a3, v40);
  uint64_t v30 = *(unsigned int *)(a4 + 8);
  unint64_t v31 = *(void *)a4;
  if (v30 >= *(_DWORD *)(a4 + 12))
  {
    BOOL v37 = v31 + 32 * v30 > (unint64_t)&v38;
    if (v31 > (unint64_t)&v38 || !v37) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v32 = (_OWORD *)(v31 + 32 * *(unsigned int *)(a4 + 8));
  long long v33 = v39;
  _OWORD *v32 = v38;
  v32[1] = v33;
  ++*(_DWORD *)(a4 + 8);
  if ((_OWORD *)v40 != v41) {
    free((void *)v40);
  }
}

uint64_t sub_1CB9A357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *a5;
  if ((*a5 & 1) == 0) {
    return 1;
  }
  if (v5 <= 1)
  {
    *a5 = v5 | 2;
    unint64_t v10 = *(unsigned int *)(a3 + 4) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    uint64_t v11 = *(void *)(a1 + 64);
    unint64_t v26 = 129;
    int v27 = 0;
    sub_1CC7362A8(v11, &v26, v10);
    int v13 = *(_DWORD *)(*(void *)(v12 + 32) + 4);
    int v14 = *(unsigned __int8 *)(a3 + 32);
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v13;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    if (!v14) {
      *(unsigned char *)(a3 + 32) = 1;
    }
  }
  if (!*(unsigned char *)(a4 + 32) || *(unsigned char *)a4 || !*(unsigned char *)(a3 + 32) || *(unsigned char *)a3) {
    return 0;
  }
  uint64_t v15 = *(void **)(a1 + 64);
  unint64_t v29 = 129;
  int v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a3 + 4);
  int v28 = 0;
  sub_1CC7382A0(v15, &v29, (int *)&v26);
  uint64_t v17 = v16;
  long long v18 = *(void **)(a1 + 64);
  unint64_t v29 = 129;
  int v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a4 + 4);
  int v28 = 0;
  sub_1CC7382A0(v18, &v29, (int *)&v26);
  uint64_t v20 = v19;
  int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(void *)(a1 + 48), 4194324, "", 0);
  uint64_t v22 = *(void *)(a1 + 64);
  LODWORD(v26) = GenericVirtualRegister;
  int v27 = 1;
  int v23 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
  LODWORD(v29) = *(_DWORD *)(*(void *)(v17 + 32) + 4);
  HIDWORD(v29) = v23;
  sub_1CC738E00(v22, (uint64_t)&v26, (int *)&v29, 2);
  int v25 = *(_DWORD *)(*(void *)(v24 + 32) + 4);
  if (!*(unsigned char *)(a3 + 32)) {
    *(unsigned char *)(a3 + 32) = 1;
  }
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v25;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)a4 = 0;
  uint64_t result = 1;
  *(unsigned char *)(a4 + 32) = 0;
  return result;
}

__n128 sub_1CB9A3754(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, unint64_t a6, unint64_t a7, uint64_t a8, void *a9, uint64_t a10, _OWORD *a11, __n128 *a12, uint64_t a13, int a14, __n128 *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10)
  {
    uint64_t v29 = 8 * a10;
    while (1)
    {
      LODWORD(v97[0]) = *a9;
      uint64_t v30 = *(void *)(a21 + 24);
      if (!v30) {
        goto LABEL_87;
      }
      (*(void (**)(__n128 *__return_ptr))(*(void *)v30 + 48))(&v98);
      uint64_t v31 = *(unsigned int *)(a20 + 8);
      unint64_t v32 = *(void *)a20;
      if (v31 >= *(_DWORD *)(a20 + 12)) {
        break;
      }
      long long v33 = (__n128 *)(v32 + 32 * *(unsigned int *)(a20 + 8));
      __n128 v34 = v99;
      *long long v33 = v98;
      v33[1] = v34;
      ++*(_DWORD *)(a20 + 8);
      ++a9;
      v29 -= 8;
      if (!v29) {
        goto LABEL_6;
      }
    }
    BOOL v87 = v32 + 32 * v31 > (unint64_t)&v98;
    if (v32 > (unint64_t)&v98 || !v87) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
LABEL_88:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
LABEL_6:
  if (a18)
  {
    ((void (*)(uint64_t *__return_ptr, void **, uint64_t, uint64_t, uint64_t))(*a1)[12])(v97, a1, a3, a17, a18);
    uint64_t v70 = *(void *)(a22 + 24);
    if (!v70) {
      goto LABEL_87;
    }
    (*(void (**)(__n128 *__return_ptr))(*(void *)v70 + 48))(&v98);
    uint64_t v71 = *(unsigned int *)(a20 + 8);
    unint64_t v72 = *(void *)a20;
    if (v71 >= *(_DWORD *)(a20 + 12))
    {
      BOOL v95 = v72 + 32 * v71 > (unint64_t)&v98;
      if (v72 > (unint64_t)&v98 || !v95) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v73 = (__n128 *)(v72 + 32 * *(unsigned int *)(a20 + 8));
    __n128 v74 = v99;
    *uint64_t v73 = v98;
    v73[1] = v74;
    unsigned int v35 = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v35;
  }
  else
  {
    unsigned int v35 = *(_DWORD *)(a20 + 8);
  }
  unint64_t v36 = *(void *)a20;
  if (v35 >= *(_DWORD *)(a20 + 12))
  {
    unint64_t v89 = v36 + 32 * v35;
    if (v36 > (unint64_t)a5 || v89 <= (unint64_t)a5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v37 = (_OWORD *)(v36 + 32 * *(unsigned int *)(a20 + 8));
  long long v38 = a5[1];
  *BOOL v37 = *a5;
  v37[1] = v38;
  unint64_t v39 = (*(_DWORD *)(a20 + 8) + 1);
  *(_DWORD *)(a20 + 8) = v39;
  if (*(unsigned char *)(a6 + 32))
  {
    unint64_t v68 = *(void *)a20;
    if (v39 >= *(_DWORD *)(a20 + 12))
    {
      if (v68 > a6 || v68 + 32 * v39 <= a6) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v39 = v68 + 32 * *(unsigned int *)(a20 + 8);
    long long v69 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)unint64_t v39 = *(_OWORD *)a6;
    *(_OWORD *)(v39 + 16) = v69;
    LODWORD(v39) = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v39;
  }
  if (*(_DWORD *)(a2 + 92) == -1 && *(unsigned char *)(a7 + 32))
  {
    unint64_t v40 = *(void *)a20;
    if (v39 >= *(_DWORD *)(a20 + 12))
    {
      if (v40 > a7 || v40 + 32 * v39 <= a7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v39 = v40 + 32 * *(unsigned int *)(a20 + 8);
    long long v41 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)unint64_t v39 = *(_OWORD *)a7;
    *(_OWORD *)(v39 + 16) = v41;
    LODWORD(v39) = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v39;
  }
  unint64_t v42 = *(void *)a20;
  if (v39 >= *(_DWORD *)(a20 + 12))
  {
    if (v42 > (unint64_t)a11 || v42 + 32 * v39 <= (unint64_t)a11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v43 = (_OWORD *)(v42 + 32 * *(unsigned int *)(a20 + 8));
  long long v44 = a11[1];
  _OWORD *v43 = *a11;
  v43[1] = v44;
  ++*(_DWORD *)(a20 + 8);
  if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1]))
  {
    LODWORD(v97[0]) = 0;
    uint64_t v46 = *(void *)(a21 + 24);
    if (!v46) {
      goto LABEL_87;
    }
    (*(void (**)(__n128 *__return_ptr))(*(void *)v46 + 48))(&v98);
    uint64_t v47 = *(unsigned int *)(a20 + 8);
    unint64_t v48 = *(void *)a20;
    if (v47 >= *(_DWORD *)(a20 + 12))
    {
      BOOL v91 = v48 + 32 * v47 > (unint64_t)&v98;
      if (v48 > (unint64_t)&v98 || !v91) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v49 = (__n128 *)(v48 + 32 * *(unsigned int *)(a20 + 8));
    __n128 result = v98;
    __n128 v50 = v99;
    __n128 *v49 = v98;
    v49[1] = v50;
    ++*(_DWORD *)(a20 + 8);
  }
  if (a13)
  {
    uint64_t v52 = 32 * a13;
    unsigned int v53 = *(_DWORD *)(a20 + 8);
    do
    {
      __n128 v54 = a12[1];
      __n128 v98 = *a12;
      __n128 v99 = v54;
      unint64_t v55 = *(void *)a20;
      if (v53 >= *(_DWORD *)(a20 + 12))
      {
        BOOL v88 = v55 + 32 * v53 > (unint64_t)&v98;
        if (v55 > (unint64_t)&v98 || !v88) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v56 = (__n128 *)(v55 + 32 * *(unsigned int *)(a20 + 8));
      __n128 result = v98;
      __n128 v57 = v99;
      __n128 *v56 = v98;
      v56[1] = v57;
      unsigned int v53 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v53;
      a12 += 2;
      v52 -= 32;
    }
    while (v52);
    if (a14 != 7
      && (*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1])
      && (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(void *))(*a1[1] + 320))(a1[1])))
    {
      LODWORD(v97[0]) = 0;
      uint64_t v58 = *(void *)(a21 + 24);
      if (!v58) {
        goto LABEL_87;
      }
      (*(void (**)(__n128 *__return_ptr))(*(void *)v58 + 48))(&v98);
      uint64_t v59 = *(unsigned int *)(a20 + 8);
      unint64_t v60 = *(void *)a20;
      if (v59 >= *(_DWORD *)(a20 + 12))
      {
        BOOL v93 = v60 + 32 * v59 > (unint64_t)&v98;
        if (v60 > (unint64_t)&v98 || !v93) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v61 = (__n128 *)(v60 + 32 * *(unsigned int *)(a20 + 8));
      __n128 result = v98;
      __n128 v62 = v99;
      *BOOL v61 = v98;
      v61[1] = v62;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (a16)
  {
    unsigned int v76 = *(_DWORD *)(a20 + 8);
    uint64_t v77 = 32 * a16;
    do
    {
      __n128 v78 = a15[1];
      __n128 v98 = *a15;
      __n128 v99 = v78;
      unint64_t v79 = *(void *)a20;
      if (v76 >= *(_DWORD *)(a20 + 12))
      {
        BOOL v94 = v79 + 32 * v76 > (unint64_t)&v98;
        if (v79 > (unint64_t)&v98 || !v94) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v80 = (__n128 *)(v79 + 32 * *(unsigned int *)(a20 + 8));
      __n128 result = v98;
      __n128 v81 = v99;
      *unint64_t v80 = v98;
      v80[1] = v81;
      unsigned int v76 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v76;
      a15 += 2;
      v77 -= 32;
    }
    while (v77);
    if (!a18)
    {
      LODWORD(v97[0]) = 0;
      uint64_t v82 = *(void *)(a21 + 24);
      if (!v82) {
        goto LABEL_87;
      }
      (*(void (**)(__n128 *__return_ptr))(*(void *)v82 + 48))(&v98);
      uint64_t v83 = *(unsigned int *)(a20 + 8);
      unint64_t v84 = *(void *)a20;
      if (v83 >= *(_DWORD *)(a20 + 12))
      {
        BOOL v96 = v84 + 32 * v83 > (unint64_t)&v98;
        if (v84 > (unint64_t)&v98 || !v96) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v85 = (__n128 *)(v84 + 32 * *(unsigned int *)(a20 + 8));
      __n128 result = v98;
      __n128 v86 = v99;
      *uint64_t v85 = v98;
      v85[1] = v86;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (*(_DWORD *)(a2 + 92) != -1) {
    return result;
  }
  LODWORD(v97[0]) = 0;
  uint64_t v63 = *(void *)(a21 + 24);
  if (!v63)
  {
LABEL_87:
    sub_1CB920400();
    goto LABEL_88;
  }
  (*(void (**)(__n128 *__return_ptr))(*(void *)v63 + 48))(&v98);
  uint64_t v64 = *(unsigned int *)(a20 + 8);
  unint64_t v65 = *(void *)a20;
  if (v64 >= *(_DWORD *)(a20 + 12))
  {
    BOOL v92 = v65 + 32 * v64 > (unint64_t)&v98;
    if (v65 <= (unint64_t)&v98 && v92) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v66 = (__n128 *)(v65 + 32 * *(unsigned int *)(a20 + 8));
  __n128 result = v98;
  __n128 v67 = v99;
  *long long v66 = v98;
  v66[1] = v67;
  ++*(_DWORD *)(a20 + 8);
  return result;
}

uint64_t sub_1CB9A4128(uint64_t a1)
{
  int v2 = (void **)(a1 + 784);
  if (*(_DWORD *)(a1 + 832) >= 0x41u)
  {
    uint64_t v9 = *(void *)(a1 + 824);
    if (v9)
    {
      uint64_t v11 = v2;
      MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      int v2 = v11;
    }
  }
  if (*(_DWORD *)(a1 + 816) >= 0x41u)
  {
    uint64_t v10 = *(void *)(a1 + 808);
    if (v10)
    {
      uint64_t v12 = v2;
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      int v2 = v12;
    }
  }
  sub_1CB9A42C0(v2);
  uint64_t v3 = *(void **)(a1 + 744);
  if (v3)
  {
    *(void *)(a1 + 752) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a1 + 688);
  if (v4 != *(void **)(a1 + 680)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 656), 8);
  unsigned int v5 = *(void **)(a1 + 424);
  if (v5 != (void *)(a1 + 440)) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 400), 4);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 376), 4);
  __int16 v6 = *(void **)(a1 + 304);
  if (v6 != (void *)(a1 + 320)) {
    free(v6);
  }
  unsigned int v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 240)) {
    free(v7);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 200), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 176), 8);
  sub_1CB9A433C(a1 + 152);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 152), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 128), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 104), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 80), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 56), 8);
  return a1;
}

void **sub_1CB9A42C0(void **result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    __int16 v6 = result;
    uint64_t v3 = (char *)(v1 - 4);
    uint64_t v4 = 40 * v2;
    do
    {
      sub_1CB8F0DC4((uint64_t)&v3[v4]);
      v4 -= 40;
    }
    while (v4);
    __n128 result = v6;
    uint64_t v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    unsigned int v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

uint64_t sub_1CB9A433C(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        __n128 result = MEMORY[0x1D25D9CD0](*v3, 8);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1CB9A4398(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[1];
  sub_1CC73C210(a2, *a1, (uint64_t)&v62);
  if (!(_BYTE)v64)
  {
LABEL_2:
    uint64_t v9 = 0;
    char v10 = 1;
    goto LABEL_5;
  }
  if (v63 > 0x40)
  {
    if (v62) {
      MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  char v10 = 0;
  uint64_t v9 = ((uint64_t)(v62 << -(uint64_t)v63) >> -(uint64_t)v63);
LABEL_5:
  sub_1CC73C210(a3, *a1, (uint64_t)&v62);
  if ((_BYTE)v64)
  {
    if (v63 >= 0x41)
    {
      if (v62) {
        MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
      }
    }
    else if ((v10 & 1) == 0)
    {
      unsigned int IncompleteVirtualRegister = sub_1CB9970F8(v8, a1[2], 0x81uLL, v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)((uint64_t)(v62 << -(uint64_t)v63) >> -(uint64_t)v63) << 8), 0);
      return IncompleteVirtualRegister | 0x100000000;
    }
  }
  uint64_t v11 = *a1;
  if ((a3 & 0x80000000) != 0) {
    uint64_t v12 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v12 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a3);
  }
  uint64_t v13 = *v12;
  if (v13 && ((*(unsigned char *)(v13 + 3) & 1) != 0 || (uint64_t v13 = *(void *)(v13 + 24)) != 0 && (*(unsigned char *)(v13 + 3) & 1) != 0))
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if ((a2 & 0x80000000) == 0)
    {
LABEL_85:
      uint64_t v15 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a2);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  uint64_t v15 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
LABEL_14:
  uint64_t v16 = *v15;
  if (v16 && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = **(unsigned __int16 **)(v14 + 16);
  if (v18 == 68)
  {
    if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)) {
      unint64_t v19 = *(void *)(*(void *)(v11 + 424) + 8 * (a2 & 0x7FFFFFFF));
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v62 = v19;
    uint64_t v28 = sub_1CB8F1DC4(&v62);
    if (v27 == 1) {
    if (v28 == 16)
    }
    {
      uint64_t v29 = a1[3];
      unint64_t v66 = 4194324;
      int v67 = 0;
      LODWORD(v62) = a2;
      LODWORD(v64) = 0;
      sub_1CC7382B0(v29);
      uint64_t v31 = v30;
      unsigned int v32 = *(_DWORD *)(a4 + 8);
      if (v32 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v32) = v30;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_32;
    }
    goto LABEL_74;
  }
  int v20 = **(unsigned __int16 **)(v17 + 16);
  if (v20 == 68)
  {
    if (*(unsigned char *)(v8 + 96)) {
      unsigned int v21 = 6197;
    }
    else {
      unsigned int v21 = 6251;
    }
    uint64_t v22 = (void *)a1[3];
    unint64_t v66 = (unint64_t)&off_1E66AB048;
    int v67 = 2;
    int v23 = (llvm::MachineFunction *)sub_1CC739C54(v22, v21, &v66, 1, 0, 0, 0);
    int v25 = v24;
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    llvm::MachineInstr::addOperand(v24, v23, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v62);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    LODWORD(v62) = 0;
    HIDWORD(v62) = a3;
    uint64_t v65 = 0;
    llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 8;
    llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 8;
    llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v62);
    sub_1CC73B5D0(v25, *(void *)(v8 + 72), *(void **)(v8 + 80));
    uint64_t v26 = *((void *)v25 + 4);
    goto LABEL_33;
  }
  if (v18 != 128)
  {
    if (v18 == 260 && v20 == 260)
    {
      unsigned int IncompleteVirtualRegister = *(_DWORD *)(*(void *)(v17 + 32) + 36);
      if ((IncompleteVirtualRegister & 0x80000000) != 0
        && (IncompleteVirtualRegister & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432))
      {
        unint64_t v44 = *(void *)(*(void *)(v11 + 424) + 8 * (IncompleteVirtualRegister & 0x7FFFFFFF));
      }
      else
      {
        unint64_t v44 = 0;
      }
      unint64_t v62 = v44;
      int v46 = sub_1CB8F1DC4(&v62);
      if (v45 == 1) {
      uint64_t v47 = *(_DWORD **)(v14 + 32);
      }
      if (v47[9] == IncompleteVirtualRegister)
      {
        uint64_t v48 = *(void *)(v17 + 32);
        if (*(_DWORD *)(v48 + 112) == 8 && v47[28] == 8)
        {
          int v49 = *(_DWORD *)(v48 + 80);
          if ((v49 & 1) == 0 && v49 + 1 == v47[20])
          {
            if (v46 == 16) {
              return IncompleteVirtualRegister | 0x100000000;
            }
            if (v46 == 32)
            {
              __n128 v50 = (void *)a1[3];
              unint64_t v66 = (unint64_t)&off_1E66AB048;
              int v67 = 2;
              long long v51 = (llvm::MachineFunction *)sub_1CC739C54(v50, 0x13u, &v66, 1, 0, 0, 0);
              uint64_t v31 = v52;
              uint64_t v63 = 0;
              uint64_t v64 = 0;
              uint64_t v65 = 0;
              LODWORD(v62) = ((v49 << 7) + 256) & 0xFFF00;
              HIDWORD(v62) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand(v52, v51, (const llvm::MachineOperand *)&v62);
LABEL_32:
              uint64_t v26 = *((void *)v31 + 4);
LABEL_33:
              unsigned int IncompleteVirtualRegister = *(_DWORD *)(v26 + 4);
              return IncompleteVirtualRegister | 0x100000000;
            }
          }
        }
      }
    }
    goto LABEL_74;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v14 + 32) + 68), v11, (uint64_t)&v62);
  if (*(_DWORD *)(*(void *)(v14 + 32) + 36) != a2)
  {
    if ((_BYTE)v64)
    {
      unsigned int v34 = v63;
      goto LABEL_60;
    }
LABEL_74:
    uint64_t v53 = *a1;
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
    *(void *)(*(void *)(v53 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AB048;
    uint64_t v54 = *(void *)(v53 + 8);
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 24))(v54);
    }
    unint64_t v55 = (void *)a1[3];
    if (*(unsigned char *)(v8 + 96)) {
      unsigned int v56 = 6215;
    }
    else {
      unsigned int v56 = 6269;
    }
    LODWORD(v66) = IncompleteVirtualRegister;
    int v67 = 1;
    __n128 v57 = (llvm::MachineFunction *)sub_1CC739C54(v55, v56, &v66, 1, 0, 0, 0);
    uint64_t v59 = v58;
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    llvm::MachineInstr::addOperand(v58, v57, (const llvm::MachineOperand *)&v62);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    LODWORD(v62) = 0;
    HIDWORD(v62) = a2;
    uint64_t v65 = 0;
    llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v62);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    LODWORD(v62) = 0;
    HIDWORD(v62) = a3;
    uint64_t v65 = 0;
    llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 8;
    llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v62);
    LODWORD(v62) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 8;
    llvm::MachineInstr::addOperand(v59, v57, (const llvm::MachineOperand *)&v62);
    sub_1CC73B5D0(v59, *(void *)(v8 + 72), *(void **)(v8 + 80));
    return IncompleteVirtualRegister | 0x100000000;
  }
  if (!(_BYTE)v64) {
    goto LABEL_74;
  }
  unsigned int v34 = v63;
  unint64_t v35 = v62;
  if (v63 >= 0x41)
  {
    int v36 = 0;
    int64_t v37 = ((unint64_t)v63 + 63) >> 6;
    do
    {
      if (v37-- < 1) {
        break;
      }
      unint64_t v39 = *(void *)(v62 + 8 * v37);
      v36 += __clz(v39);
    }
    while (!v39);
    int v40 = v63 | 0xFFFFFFC0;
    if ((v63 & 0x3F) == 0) {
      int v40 = 0;
    }
    if ((v63 - v36 - v40) > 0x40) {
      goto LABEL_60;
    }
    unint64_t v35 = *(void *)v62;
  }
  if (v35 != 8)
  {
LABEL_60:
    if (v34 >= 0x41 && v62) {
      MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
    goto LABEL_74;
  }
  uint64_t v41 = *a1;
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
  *(void *)(*(void *)(v41 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AB048;
  uint64_t v42 = *(void *)(v41 + 8);
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
  }
  uint64_t v43 = a1[3];
  v61[0] = IncompleteVirtualRegister;
  v61[2] = 1;
  LODWORD(v66) = a2;
  int v68 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v43 + 32))(v43, 19, v61, 1, &v66, 1, 0);
  if ((_BYTE)v64 && v63 >= 0x41 && v62) {
    MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
  }
  return IncompleteVirtualRegister | 0x100000000;
}

uint64_t sub_1CB9A4BCC(void *a1, uint64_t a2, unint64_t a3, int a4, unsigned int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, unsigned __int8 *a9, char a10, int a11, int a12)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *(void *)(a3 + 24);
  unint64_t v19 = *(uint64_t **)(v18 + 32);
  sub_1CB986134((uint64_t)v80, a2, a1[10], a1[11], a6, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v77, a2, a1[10], a1[11], a7, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v73, a2, a1[10], a1[11], a8, 1, 0, 0, 0);
  sub_1CB986134((uint64_t)v69, a2, a1[10], a1[11], a9, 1, 0, 0, 0);
  int v20 = 0;
  if (*a8 && (int)v74 <= 3)
  {
    int v20 = sub_1CB9A6384((const llvm::MachineOperand *)a8, a3);
    sub_1CB986134((uint64_t)&v92, a2, a1[10], a1[11], *((unsigned __int8 **)v20 + 4), 1, 0, 0, 0);
    v73[4] = v96;
    long long v74 = v97;
    long long v75 = v98;
    uint64_t v76 = v99;
    v73[0] = v92;
    v73[1] = v93;
    v73[2] = v94;
    v73[3] = v95;
  }
  unsigned int v21 = 0;
  if (*a9 && (int)v70 <= 3)
  {
    unsigned int v21 = sub_1CB9A6384((const llvm::MachineOperand *)a9, a3);
    sub_1CB986134((uint64_t)&v92, a2, a1[10], a1[11], *((unsigned __int8 **)v21 + 4), 1, 0, 0, 0);
    v69[4] = v96;
    long long v70 = v97;
    long long v71 = v98;
    uint64_t v72 = v99;
    v69[0] = v92;
    v69[1] = v93;
    v69[2] = v94;
    v69[3] = v95;
  }
  uint64_t v22 = operator new(0x30uLL);
  void *v22 = &unk_1F25F08E8;
  v22[1] = sub_1CB987D10;
  v22[2] = 0;
  v22[3] = a1;
  v22[4] = a2;
  *((_DWORD *)v22 + 10) = 0;
  *((unsigned char *)v22 + 44) = 1;
  BOOL v91 = v22;
  sub_1CB9981E4(v80, (uint64_t)v22);
  if (v91 == v90)
  {
    (*(void (**)(void *))(v90[0] + 32))(v90);
  }
  else if (v91)
  {
    (*(void (**)(void *))(*v91 + 40))(v91);
  }
  int v23 = operator new(0x30uLL);
  *int v23 = &unk_1F25F08E8;
  v23[1] = sub_1CB987D10;
  v23[2] = 0;
  v23[3] = a1;
  v23[4] = a2;
  *((_DWORD *)v23 + 10) = 0;
  *((unsigned char *)v23 + 44) = 1;
  unint64_t v89 = v23;
  sub_1CB9981E4(v77, (uint64_t)v23);
  if (v89 == v88)
  {
    (*(void (**)(void *))(v88[0] + 32))(v88);
  }
  else if (v89)
  {
    (*(void (**)(void))(*v89 + 40))();
  }
  uint64_t v24 = operator new(0x28uLL);
  *uint64_t v24 = &unk_1F25F0930;
  v24[1] = sub_1CB989BF0;
  v24[2] = 0;
  v24[3] = a1;
  unsigned char v24[4] = a2;
  BOOL v87 = v24;
  sub_1CB9981E4((unsigned int *)v73, (uint64_t)v24);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
  }
  else if (v87)
  {
    (*(void (**)(void))(*v87 + 40))();
  }
  int v25 = operator new(0x28uLL);
  void *v25 = &unk_1F25F0930;
  v25[1] = sub_1CB989BF0;
  v25[2] = 0;
  v25[3] = a1;
  v25[4] = a2;
  uint64_t v85 = v25;
  sub_1CB9981E4((unsigned int *)v69, (uint64_t)v25);
  if (v85 == v84)
  {
    (*(void (**)(void *))(v84[0] + 32))(v84);
  }
  else if (v85)
  {
    (*(void (**)(void))(*v85 + 40))();
  }
  if (a4)
  {
    unsigned int v26 = dword_1CD973B40[8 * (v81 > 3) + 4 * (v78 > 3) + 2 * ((int)v74 > 3) + ((int)v70 > 3)];
  }
  else
  {
    uint64_t v28 = *v19;
    uint64_t v27 = v19[1];
    if (a10) {
      int v29 = 5;
    }
    else {
      int v29 = 2;
    }
    *(void *)&long long v92 = &v93;
    LODWORD(v93) = v29;
    *((void *)&v92 + 1) = 0x500000001;
    uint64_t v30 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v28);
    if (v81 >= 4)
    {
      unsigned int v32 = DWORD2(v92);
      unsigned int v33 = HIDWORD(v92);
      int v31 = 1;
    }
    else
    {
      if (v82 == 32) {
        int v31 = 5;
      }
      else {
        int v31 = 2;
      }
      unsigned int v32 = DWORD2(v92);
      unsigned int v33 = HIDWORD(v92);
    }
    if (v32 >= v33) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v92 + 4 * v32) = v31;
    unsigned int v34 = ++DWORD2(v92);
    if (v78 >= 4)
    {
      unsigned int v36 = HIDWORD(v92);
      int v35 = 1;
    }
    else
    {
      if (v79 == 32) {
        int v35 = 5;
      }
      else {
        int v35 = 2;
      }
      unsigned int v36 = HIDWORD(v92);
    }
    if (v34 >= v36) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v92 + 4 * v34) = v35;
    unsigned int v37 = ++DWORD2(v92);
    if ((int)v74 > 3) {
      int v38 = 1;
    }
    else {
      int v38 = v29;
    }
    if (v37 >= HIDWORD(v92)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v92 + 4 * v37) = v38;
    unsigned int v39 = ++DWORD2(v92);
    if ((int)v70 > 3) {
      int v29 = 1;
    }
    if (v39 >= HIDWORD(v92)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v92 + 4 * v39) = v29;
    ++DWORD2(v92);
    int v40 = (long long *)v92;
    unsigned int v26 = sub_1CB951118(30, (_DWORD *)v92, DWORD2(v92), v30);
    if (v40 != &v93) {
      free(v40);
    }
  }
  uint64_t v41 = *(void *)(a1[9] + 8) + 48 * v26;
  if ((*(_WORD *)(a3 + 44) & 4) == 0)
  {
    uint64_t v42 = *(llvm::MachineFunction **)(v18 + 32);
    uint64_t v43 = *(unsigned __int8 **)(a3 + 56);
    uint64_t v83 = v43;
    if (v43) {
      llvm::MetadataTracking::track((uint64_t)&v83, v43, 2);
    }
    uint64_t v44 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v42, v41, &v83, 0);
    if (!v83) {
      goto LABEL_53;
    }
    int v60 = *v83;
    if ((v60 - 4) > 0x1E)
    {
      if ((v60 - 3) >= 0xFFFFFFFE) {
        unint64_t v66 = v83;
      }
      else {
        unint64_t v66 = 0;
      }
      if ((v60 - 3) < 0xFFFFFFFE)
      {
        if (v60 == 3) {
          *((void *)v83 + 1) = 0;
        }
        goto LABEL_53;
      }
      unint64_t v62 = (unint64_t)(v66 + 8);
    }
    else
    {
      if ((v83[1] & 0x7F) != 2 && !*((_DWORD *)v83 + 3)) {
        goto LABEL_53;
      }
      uint64_t v61 = *((void *)v83 + 2);
      if ((v61 & 4) == 0) {
        goto LABEL_53;
      }
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFF8;
      if (!v62) {
        goto LABEL_53;
      }
    }
    *(void *)&long long v92 = &v83;
    sub_1CC5FA668(v62 + 16, &v92);
LABEL_53:
    uint64_t v45 = *(void *)(v18 + 40);
    *(void *)(v44 + 24) = v45;
    uint64_t v46 = *(void *)(v45 + 32);
    uint64_t v47 = *(unsigned int *)(v44 + 40);
    if (v47)
    {
      uint64_t v53 = *(void *)(v44 + 32);
      uint64_t v54 = *(void *)(v46 + 40);
      uint64_t v55 = 32 * v47;
      do
      {
        if (!*(unsigned char *)v53)
        {
          uint64_t v56 = *(unsigned int *)(v53 + 4);
          if ((int)v56 >= 0) {
            __n128 v57 = (uint64_t *)(*(void *)(v54 + 272) + 8 * v56);
          }
          else {
            __n128 v57 = (uint64_t *)(*(void *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
          }
          uint64_t v58 = *v57;
          if (*v57)
          {
            uint64_t v59 = *(void *)(v58 + 16);
            *(void *)(v58 + 16) = v53;
            *(void *)(v53 + 16) = v59;
            if (*(unsigned char *)(v53 + 3))
            {
              *(void *)(v53 + 24) = v58;
            }
            else
            {
              *(void *)(v53 + 24) = 0;
              __n128 v57 = (uint64_t *)(v59 + 24);
            }
          }
          else
          {
            *(void *)(v53 + 16) = v53;
            *(void *)(v53 + 24) = 0;
          }
          uint64_t *v57 = v53;
        }
        v53 += 32;
        v55 -= 32;
      }
      while (v55);
    }
    uint64_t v48 = *(void *)(v46 + 728);
    if (v48) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 24))(v48, v44);
    }
    unint64_t v49 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v44 = v49 | *(void *)v44 & 7;
    *(void *)(v44 + 8) = a3;
    *(void *)(v49 + 8) = v44;
    *(void *)a3 = *(void *)a3 & 7 | v44;
    goto LABEL_64;
  }
  uint64_t v42 = *(llvm::MachineFunction **)(v18 + 32);
  __n128 v50 = *(unsigned __int8 **)(a3 + 56);
  uint64_t v83 = v50;
  if (v50) {
    llvm::MetadataTracking::track((uint64_t)&v83, v50, 2);
  }
  uint64_t v44 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v42, v41, &v83, 0);
  if (v83)
  {
    int v63 = *v83;
    if ((v63 - 4) > 0x1E)
    {
      if ((v63 - 3) >= 0xFFFFFFFE) {
        int v67 = v83;
      }
      else {
        int v67 = 0;
      }
      if ((v63 - 3) < 0xFFFFFFFE)
      {
        if (v63 == 3) {
          *((void *)v83 + 1) = 0;
        }
        goto LABEL_60;
      }
      unint64_t v65 = (unint64_t)(v67 + 8);
    }
    else
    {
      if ((v83[1] & 0x7F) != 2 && !*((_DWORD *)v83 + 3)) {
        goto LABEL_60;
      }
      uint64_t v64 = *((void *)v83 + 2);
      if ((v64 & 4) == 0) {
        goto LABEL_60;
      }
      unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v65) {
        goto LABEL_60;
      }
    }
    *(void *)&long long v92 = &v83;
    sub_1CC5FA668(v65 + 16, &v92);
  }
LABEL_60:
  if (v18 + 48 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0) {
    *(_WORD *)(v44 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v18 + 40), (uint64_t *)a3, v44);
LABEL_64:
  *((void *)&v92 + 1) = 0;
  long long v93 = 0uLL;
  LODWORD(v92) = 0x1000000;
  DWORD1(v92) = a12;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v92);
  uint64_t v51 = 1;
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v92);
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v92);
  *(void *)&long long v92 = v42;
  *((void *)&v92 + 1) = v44;
  sub_1CB9983A0((llvm::MachineFunction **)&v92, (uint64_t)v80);
  sub_1CB9983A0((llvm::MachineFunction **)&v92, (uint64_t)v77);
  sub_1CB9983A0((llvm::MachineFunction **)&v92, (uint64_t)v73);
  sub_1CB9983A0((llvm::MachineFunction **)&v92, (uint64_t)v69);
  if (v20) {
    uint64_t v51 = (*(uint64_t (**)(void *, llvm::MachineInstr *))(*a1 + 16))(a1, v20);
  }
  if (v21) {
    return v51 & (*(unsigned int (**)(void *, llvm::MachineInstr *))(*a1 + 16))(a1, v21);
  }
  return v51;
}

uint64_t sub_1CB9A56A8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x80uLL);
  unsigned int v5 = v4;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)uint64_t v4 = &unk_1F25F0858;
  *(_OWORD *)(v4 + 24) = v6;
  *((void *)v4 + 5) = *(void *)(a2 + 32);
  v4[48] = *(unsigned char *)(a2 + 40);
  *((void *)v4 + 7) = v4 + 72;
  *((void *)v4 + 8) = 0x600000000;
  unsigned int v7 = *(_DWORD *)(a2 + 56);
  if (v7 && v4 + 56 != (char *)(a2 + 48))
  {
    uint64_t v8 = *(const void **)(a2 + 48);
    if (v8 == (const void *)(a2 + 64))
    {
      if (v7 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v4 + 72, v8, 8 * *(unsigned int *)(a2 + 56));
      *((_DWORD *)v5 + 16) = v7;
    }
    else
    {
      *((void *)v4 + 7) = v8;
      int v10 = *(_DWORD *)(a2 + 60);
      *((_DWORD *)v4 + 16) = v7;
      *((_DWORD *)v4 + 17) = v10;
      *(void *)(a2 + 48) = a2 + 64;
      *(_DWORD *)(a2 + 60) = 0;
    }
    *(_DWORD *)(a2 + 56) = 0;
  }
  *((_DWORD *)v5 + 30) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 24) = v5;
  return a1;
}

uint64_t sub_1CB9A57DC(void *a1, uint64_t a2, unint64_t a3, unsigned int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, char a9, int a10, int a11)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(uint64_t **)(v17 + 32);
  sub_1CB986134((uint64_t)v78, a2, a1[10], a1[11], a5, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v77, a2, a1[10], a1[11], a6, 0, 0, 0, 0);
  sub_1CB986134((uint64_t)v73, a2, a1[10], a1[11], a7, 1, 0, 0, 0);
  sub_1CB986134((uint64_t)v69, a2, a1[10], a1[11], a8, 1, 0, 0, 0);
  unint64_t v19 = 0;
  if (*a7 && (int)v74 <= 3)
  {
    unint64_t v19 = sub_1CB9A6384((const llvm::MachineOperand *)a7, a3);
    sub_1CB986134((uint64_t)&v88, a2, a1[10], a1[11], *((unsigned __int8 **)v19 + 4), 1, 0, 0, 0);
    v73[4] = v92;
    long long v74 = v93;
    long long v75 = v94;
    uint64_t v76 = v95;
    v73[0] = v88;
    v73[1] = v89;
    v73[2] = v90;
    v73[3] = v91;
  }
  int v20 = 0;
  if (*a8 && (int)v70 <= 3)
  {
    int v20 = sub_1CB9A6384((const llvm::MachineOperand *)a8, a3);
    sub_1CB986134((uint64_t)&v88, a2, a1[10], a1[11], *((unsigned __int8 **)v20 + 4), 1, 0, 0, 0);
    v69[4] = v92;
    long long v70 = v93;
    long long v71 = v94;
    uint64_t v72 = v95;
    v69[0] = v88;
    v69[1] = v89;
    v69[2] = v90;
    v69[3] = v91;
  }
  unsigned int v21 = operator new(0x30uLL);
  void *v21 = &unk_1F25F08E8;
  v21[1] = sub_1CB987D10;
  v21[2] = 0;
  v21[3] = a1;
  unsigned char v21[4] = a2;
  *((_DWORD *)v21 + 10) = 0;
  *((unsigned char *)v21 + 44) = 1;
  BOOL v87 = v21;
  sub_1CB9981E4(v78, (uint64_t)v21);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
  }
  else if (v87)
  {
    (*(void (**)(void *))(*v87 + 40))(v87);
  }
  uint64_t v22 = operator new(0x30uLL);
  void *v22 = &unk_1F25F08E8;
  v22[1] = sub_1CB987D10;
  v22[2] = 0;
  v22[3] = a1;
  v22[4] = a2;
  *((_DWORD *)v22 + 10) = 0;
  *((unsigned char *)v22 + 44) = 1;
  uint64_t v85 = v22;
  sub_1CB9981E4(v77, (uint64_t)v22);
  if (v85 == v84)
  {
    (*(void (**)(void *))(v84[0] + 32))(v84);
  }
  else if (v85)
  {
    (*(void (**)(void))(*v85 + 40))();
  }
  int v23 = operator new(0x28uLL);
  *int v23 = &unk_1F25F0930;
  v23[1] = sub_1CB989BF0;
  v23[2] = 0;
  v23[3] = a1;
  v23[4] = a2;
  uint64_t v83 = v23;
  sub_1CB9981E4((unsigned int *)v73, (uint64_t)v23);
  if (v83 == v82)
  {
    (*(void (**)(void *))(v82[0] + 32))(v82);
  }
  else if (v83)
  {
    (*(void (**)(void))(*v83 + 40))();
  }
  uint64_t v24 = operator new(0x28uLL);
  *uint64_t v24 = &unk_1F25F0930;
  v24[1] = sub_1CB989BF0;
  v24[2] = 0;
  v24[3] = a1;
  unsigned char v24[4] = a2;
  int v81 = v24;
  sub_1CB9981E4((unsigned int *)v69, (uint64_t)v24);
  if (v81 == v80)
  {
    (*(void (**)(void *))(v80[0] + 32))(v80);
  }
  else if (v81)
  {
    (*(void (**)(void))(*v81 + 40))();
  }
  uint64_t v26 = *v18;
  uint64_t v25 = v18[1];
  if (a9) {
    int v27 = 5;
  }
  else {
    int v27 = 2;
  }
  *(void *)&long long v88 = &v89;
  LODWORD(v89) = v27;
  *((void *)&v88 + 1) = 0x500000001;
  uint64_t v28 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v26);
  if ((int)v78[20] >= 4)
  {
    unsigned int v30 = DWORD2(v88);
    unsigned int v31 = HIDWORD(v88);
    int v29 = 1;
  }
  else
  {
    if (v78[22] == 32) {
      int v29 = 5;
    }
    else {
      int v29 = 2;
    }
    unsigned int v30 = DWORD2(v88);
    unsigned int v31 = HIDWORD(v88);
  }
  if (v30 >= v31) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(v88 + 4 * v30) = v29;
  unsigned int v32 = ++DWORD2(v88);
  if ((int)v77[20] >= 4)
  {
    unsigned int v34 = HIDWORD(v88);
    int v33 = 1;
  }
  else
  {
    if (v77[22] == 32) {
      int v33 = 5;
    }
    else {
      int v33 = 2;
    }
    unsigned int v34 = HIDWORD(v88);
  }
  if (v32 >= v34) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(v88 + 4 * v32) = v33;
  unsigned int v35 = ++DWORD2(v88);
  if ((int)v74 > 3) {
    int v36 = 1;
  }
  else {
    int v36 = v27;
  }
  if (v35 >= HIDWORD(v88)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(v88 + 4 * v35) = v36;
  unsigned int v37 = ++DWORD2(v88);
  if ((int)v70 > 3) {
    int v38 = 1;
  }
  else {
    int v38 = v27;
  }
  if (v37 >= HIDWORD(v88)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(v88 + 4 * v37) = v38;
  ++DWORD2(v88);
  unsigned int v39 = (long long *)v88;
  unsigned int v40 = sub_1CB951118(34, (_DWORD *)v88, DWORD2(v88), v28);
  if (v39 != &v89) {
    free(v39);
  }
  uint64_t v41 = *(void *)(a1[9] + 8) + 48 * v40;
  if ((*(_WORD *)(a3 + 44) & 4) == 0)
  {
    uint64_t v42 = *(llvm::MachineFunction **)(v17 + 32);
    uint64_t v43 = *(unsigned __int8 **)(a3 + 56);
    int v79 = v43;
    if (v43) {
      llvm::MetadataTracking::track((uint64_t)&v79, v43, 2);
    }
    uint64_t v44 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v42, v41, &v79, 0);
    if (!v79) {
      goto LABEL_52;
    }
    int v60 = *v79;
    if ((v60 - 4) > 0x1E)
    {
      if ((v60 - 3) >= 0xFFFFFFFE) {
        unint64_t v66 = v79;
      }
      else {
        unint64_t v66 = 0;
      }
      if ((v60 - 3) < 0xFFFFFFFE)
      {
        if (v60 == 3) {
          *((void *)v79 + 1) = 0;
        }
        goto LABEL_52;
      }
      unint64_t v62 = (unint64_t)(v66 + 8);
    }
    else
    {
      if ((v79[1] & 0x7F) != 2 && !*((_DWORD *)v79 + 3)) {
        goto LABEL_52;
      }
      uint64_t v61 = *((void *)v79 + 2);
      if ((v61 & 4) == 0) {
        goto LABEL_52;
      }
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFF8;
      if (!v62) {
        goto LABEL_52;
      }
    }
    *(void *)&long long v88 = &v79;
    sub_1CC5FA668(v62 + 16, &v88);
LABEL_52:
    uint64_t v45 = *(void *)(v17 + 40);
    *(void *)(v44 + 24) = v45;
    uint64_t v46 = *(void *)(v45 + 32);
    uint64_t v47 = *(unsigned int *)(v44 + 40);
    if (v47)
    {
      uint64_t v53 = *(void *)(v44 + 32);
      uint64_t v54 = *(void *)(v46 + 40);
      uint64_t v55 = 32 * v47;
      do
      {
        if (!*(unsigned char *)v53)
        {
          uint64_t v56 = *(unsigned int *)(v53 + 4);
          if ((int)v56 >= 0) {
            __n128 v57 = (uint64_t *)(*(void *)(v54 + 272) + 8 * v56);
          }
          else {
            __n128 v57 = (uint64_t *)(*(void *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
          }
          uint64_t v58 = *v57;
          if (*v57)
          {
            uint64_t v59 = *(void *)(v58 + 16);
            *(void *)(v58 + 16) = v53;
            *(void *)(v53 + 16) = v59;
            if (*(unsigned char *)(v53 + 3))
            {
              *(void *)(v53 + 24) = v58;
            }
            else
            {
              *(void *)(v53 + 24) = 0;
              __n128 v57 = (uint64_t *)(v59 + 24);
            }
          }
          else
          {
            *(void *)(v53 + 16) = v53;
            *(void *)(v53 + 24) = 0;
          }
          uint64_t *v57 = v53;
        }
        v53 += 32;
        v55 -= 32;
      }
      while (v55);
    }
    uint64_t v48 = *(void *)(v46 + 728);
    if (v48) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 24))(v48, v44);
    }
    unint64_t v49 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v44 = v49 | *(void *)v44 & 7;
    *(void *)(v44 + 8) = a3;
    *(void *)(v49 + 8) = v44;
    *(void *)a3 = *(void *)a3 & 7 | v44;
    goto LABEL_63;
  }
  uint64_t v42 = *(llvm::MachineFunction **)(v17 + 32);
  __n128 v50 = *(unsigned __int8 **)(a3 + 56);
  int v79 = v50;
  if (v50) {
    llvm::MetadataTracking::track((uint64_t)&v79, v50, 2);
  }
  uint64_t v44 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v42, v41, &v79, 0);
  if (v79)
  {
    int v63 = *v79;
    if ((v63 - 4) > 0x1E)
    {
      if ((v63 - 3) >= 0xFFFFFFFE) {
        int v67 = v79;
      }
      else {
        int v67 = 0;
      }
      if ((v63 - 3) < 0xFFFFFFFE)
      {
        if (v63 == 3) {
          *((void *)v79 + 1) = 0;
        }
        goto LABEL_59;
      }
      unint64_t v65 = (unint64_t)(v67 + 8);
    }
    else
    {
      if ((v79[1] & 0x7F) != 2 && !*((_DWORD *)v79 + 3)) {
        goto LABEL_59;
      }
      uint64_t v64 = *((void *)v79 + 2);
      if ((v64 & 4) == 0) {
        goto LABEL_59;
      }
      unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v65) {
        goto LABEL_59;
      }
    }
    *(void *)&long long v88 = &v79;
    sub_1CC5FA668(v65 + 16, &v88);
  }
LABEL_59:
  if (v17 + 48 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0) {
    *(_WORD *)(v44 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v17 + 40), (uint64_t *)a3, v44);
LABEL_63:
  *((void *)&v88 + 1) = 0;
  long long v89 = 0uLL;
  LODWORD(v88) = 0x1000000;
  DWORD1(v88) = a11;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v88);
  uint64_t v51 = 1;
  LODWORD(v88) = 1;
  *((void *)&v88 + 1) = 0;
  *(void *)&long long v89 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v88);
  LODWORD(v88) = 1;
  *((void *)&v88 + 1) = 0;
  *(void *)&long long v89 = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v88);
  *(void *)&long long v88 = v42;
  *((void *)&v88 + 1) = v44;
  sub_1CB9983A0((llvm::MachineFunction **)&v88, (uint64_t)v78);
  sub_1CB9983A0((llvm::MachineFunction **)&v88, (uint64_t)v77);
  sub_1CB9983A0((llvm::MachineFunction **)&v88, (uint64_t)v73);
  sub_1CB9983A0((llvm::MachineFunction **)&v88, (uint64_t)v69);
  if (v19) {
    uint64_t v51 = (*(uint64_t (**)(void *, llvm::MachineInstr *))(*a1 + 16))(a1, v19);
  }
  if (v20) {
    return v51 & (*(unsigned int (**)(void *, llvm::MachineInstr *))(*a1 + 16))(a1, v20);
  }
  return v51;
}

uint64_t sub_1CB9A6258(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x78uLL);
  unsigned int v5 = v4;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)uint64_t v4 = &unk_1F25F08A0;
  *(_OWORD *)(v4 + 24) = v6;
  *((void *)v4 + 5) = *(void *)(a2 + 32);
  *((void *)v4 + 6) = v4 + 64;
  *((void *)v4 + 7) = 0x600000000;
  unsigned int v7 = *(_DWORD *)(a2 + 48);
  if (v7 && v4 + 48 != (char *)(a2 + 40))
  {
    uint64_t v8 = *(const void **)(a2 + 40);
    if (v8 == (const void *)(a2 + 56))
    {
      if (v7 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v4 + 64, v8, 8 * *(unsigned int *)(a2 + 48));
      *((_DWORD *)v5 + 14) = v7;
    }
    else
    {
      *((void *)v4 + 6) = v8;
      int v10 = *(_DWORD *)(a2 + 52);
      *((_DWORD *)v4 + 14) = v7;
      *((_DWORD *)v4 + 15) = v10;
      *(void *)(a2 + 40) = a2 + 56;
      *(_DWORD *)(a2 + 52) = 0;
    }
    *(_DWORD *)(a2 + 48) = 0;
  }
  *((_DWORD *)v5 + 28) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 24) = v5;
  return a1;
}

llvm::MachineInstr *sub_1CB9A6384(const llvm::MachineOperand *a1, unint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a1 == 3) {
    unsigned int v4 = 121;
  }
  else {
    unsigned int v4 = 120;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v21 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  uint64_t v6 = *(void *)(v5 + 32);
  v17[0] = &unk_1F261CD58;
  v17[1] = v6;
  *((void *)&v18 + 1) = *(void *)(v6 + 40);
  *(void *)&long long v18 = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 104))(*(void *)(v6 + 16));
  uint64_t v22 = 0;
  *(void *)&long long v19 = 0;
  long long v20 = a2;
  *((void *)&v19 + 1) = *(void *)(a2 + 24);
  unsigned int v7 = (long long *)(a2 + 56);
  if (v7 != &v19)
  {
    uint64_t v8 = *(unsigned __int8 **)v7;
    *(void *)&long long v19 = v8;
    if (v8) {
      llvm::MetadataTracking::track((uint64_t)&v19, v8, 2);
    }
  }
  unint64_t v23 = 129;
  int v24 = 0;
  uint64_t v9 = (llvm::MachineFunction *)sub_1CC739C54(v17, v4, &v23, 1, 0, 0, 0);
  uint64_t v11 = v10;
  llvm::MachineInstr::addOperand(v10, v9, a1);
  v17[0] = &unk_1F261CD58;
  if ((void)v19)
  {
    int v12 = *(unsigned __int8 *)v19;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v19;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v12 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = v14 + 8;
LABEL_17:
        unint64_t v23 = (unint64_t)&v19;
        sub_1CC5FA668(v15 + 16, &v23);
        return v11;
      }
      if (v12 == 3) {
        *(void *)(v19 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v19 + 1) & 0x7F) == 2 || *(_DWORD *)(v19 + 12))
    {
      uint64_t v16 = *(void *)(v19 + 16);
      if ((v16 & 4) != 0)
      {
        unint64_t v15 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          goto LABEL_17;
        }
      }
    }
  }
  return v11;
}

void *sub_1CB9A668C(void *a1)
{
  *a1 = &unk_1F25F0858;
  uint64_t v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }
  return a1;
}

void sub_1CB9A66E0(void *a1)
{
  *a1 = &unk_1F25F0858;
  uint64_t v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB9A6754(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x80uLL);
  void *v2 = &unk_1F25F0858;
  sub_1CB9A68E0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CB9A67A8(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F0858;
  return sub_1CB9A68E0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1CB9A67D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2 != (void *)(a1 + 72)) {
    free(v2);
  }
}

void sub_1CB9A67F0(void *__p)
{
  uint64_t v2 = (void *)__p[7];
  if (v2 != __p + 9) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t sub_1CB9A6838(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, unsigned int *a8)
{
  uint64_t v9 = *(void *)(a1 + 16);
  int v10 = *(uint64_t (**)(void *, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, void, uint64_t))(a1 + 8);
  uint64_t v11 = (void *)(*(void *)(a1 + 24) + (v9 >> 1));
  if (v9) {
    int v10 = *(uint64_t (**)(void *, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, void, uint64_t))(*v11 + v10);
  }
  return v10(v11, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *a2, a3, a4, a5, a6, *a7, *a8, a1 + 56);
}

uint64_t sub_1CB9A68E0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = a1 + 64;
  *(void *)(a1 + 56) = 0x600000000;
  unsigned int v4 = *(_DWORD *)(a2 + 56);
  if (v4 && a2 != a1)
  {
    if (v4 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(a1 + 64), *(const void **)(a2 + 48), 8 * *(unsigned int *)(a2 + 56));
    *(_DWORD *)(a1 + 56) = v4;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

void *sub_1CB9A69AC(void *a1)
{
  *a1 = &unk_1F25F08A0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

void sub_1CB9A6A00(void *a1)
{
  *a1 = &unk_1F25F08A0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CB9A6A74(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x78uLL);
  void *v2 = &unk_1F25F08A0;
  sub_1CB9A6BF8((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CB9A6AC8(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F08A0;
  return sub_1CB9A6BF8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1CB9A6AF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64)) {
    free(v2);
  }
}

void sub_1CB9A6B10(void *__p)
{
  uint64_t v2 = (void *)__p[6];
  if (v2 != __p + 8) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t sub_1CB9A6B58(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, unsigned int *a8)
{
  uint64_t v9 = a1[2];
  int v10 = (uint64_t (*)(void *, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, void, void *))a1[1];
  uint64_t v11 = (void *)(a1[3] + (v9 >> 1));
  if (v9) {
    int v10 = *(uint64_t (**)(void *, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, void, void *))(*v11 + v10);
  }
  return v10(v11, a1[4], a1[5], *a2, a3, a4, a5, a6, *a7, *a8, a1 + 6);
}

uint64_t sub_1CB9A6BF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = a1 + 56;
  *(void *)(a1 + 48) = 0x600000000;
  unsigned int v4 = *(_DWORD *)(a2 + 48);
  if (v4 && a2 != a1)
  {
    if (v4 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(a1 + 56), *(const void **)(a2 + 40), 8 * *(unsigned int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) = v4;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

void *sub_1CB9A6CBC(void *a1, uint64_t a2)
{
  unsigned int v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void sub_1CB9A6DA0()
{
}

__n128 sub_1CB9A6DB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25F08E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CB9A6E10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F08E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9A6E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t, void, void))(a1 + 8);
  uint64_t v5 = (void *)(*(void *)(a1 + 24) + (v3 >> 1));
  if (v3) {
    unsigned int v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t, void, void))(*v5 + v4);
  }
  return v4(v5, *(void *)(a1 + 32), a2, a3, *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

void sub_1CB9A6EB4()
{
}

__n128 sub_1CB9A6EC8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F0930;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB9A6F1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F0930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9A6F54(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[2];
  unsigned int v4 = (uint64_t (*)(void *, void, uint64_t, uint64_t))a1[1];
  uint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    unsigned int v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*v5 + v4);
  }
  return v4(v5, a1[4], a2, a3);
}

unsigned int *sub_1CB9A6FAC(unsigned int *a1, uint64_t a2)
{
  if (a1 != (unsigned int *)a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = a1[2];
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = *(void **)a1;
        do
        {
          sub_1CB9A7168(&v11[v9], v10 + v9 * 8);
          v9 += 4;
        }
        while (4 * v4 != v9);
        uint64_t v5 = a1[2];
        int v12 = *(void **)a1;
        uint64_t v13 = &v11[v9];
      }
      else
      {
        int v12 = *(void **)a1;
        uint64_t v13 = *(void **)a1;
      }
      uint64_t v14 = &v12[4 * v5];
      if (v14 != v13)
      {
        unint64_t v15 = v14 - 4;
        uint64_t v16 = v14 - 4;
        do
        {
          uint64_t v17 = (void *)v16[3];
          if (v16 == v17)
          {
            (*(void (**)(void *))(*v16 + 32))(v16);
          }
          else if (v17)
          {
            (*(void (**)(void *))(*v17 + 40))(v17);
          }
          v15 -= 4;
          BOOL v18 = v16 == v13;
          v16 -= 4;
        }
        while (!v18);
      }
    }
    else
    {
      if (a1[3] < v4)
      {
        sub_1CB986B44(a1);
        sub_1CD3FBB80();
      }
      if (v5)
      {
        uint64_t v6 = *(void *)a2;
        unsigned int v7 = *(void **)a1;
        uint64_t v8 = 32 * v5;
        do
        {
          sub_1CB9A7168(v7, v6);
          v6 += 32;
          v7 += 4;
          v8 -= 32;
        }
        while (v8);
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v5 != v19)
      {
        uint64_t v20 = *(void *)a1 + 32 * v5;
        uint64_t v21 = *(void *)a2 + 32 * v5;
        uint64_t v22 = 32 * v19 - 32 * v5;
        do
        {
          uint64_t v23 = sub_1CB986C7C(v20, v21);
          v21 += 32;
          uint64_t v20 = v23 + 32;
          v22 -= 32;
        }
        while (v22);
      }
    }
    a1[2] = v4;
  }
  return a1;
}

void *sub_1CB9A7168(void *a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CB986C7C((uint64_t)v4, a2);
  sub_1CB9A7238(v4, a1);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return a1;
}

void *sub_1CB9A7238(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

_DWORD *sub_1CB9A74A0(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v10 = 0;
LABEL_8:
    uint64_t v6 = sub_1CB83889C(a1, (uint64_t)a2, a2, v10);
    *(void *)uint64_t v6 = *a2;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  uint64_t v6 = (_DWORD *)(*(void *)a1 + 8 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -2;
      }
      if (v12) {
        uint64_t v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      uint64_t v6 = (_DWORD *)(*(void *)a1 + 8 * (v13 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

void sub_1CB9A755C()
{
}

void sub_1CB9A75F8()
{
}

void sub_1CB9A769C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unsigned int v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB9A7750(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB9A77FC()
{
  return "AGX2 iterator forwarding pass";
}

void sub_1CB9A780C(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CB9A7868(uint64_t a1, uint64_t a2)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t v112 = a2 + 320;
  uint64_t v2 = *(void **)(a2 + 320);
  if (v2 != (void *)(a2 + 320))
  {
    int v3 = 0;
    while (1)
    {
      int v117 = v3;
      uint64_t v119 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
      v120[0] = 0;
      v122[0] = 0;
      v122[1] = 0;
      int v123 = 0;
      int v4 = v2 + 6;
      v120[1] = 0;
      int v5 = -1;
      uint64_t v6 = v2 + 6;
      int v121 = 0;
      do
      {
        uint64_t v6 = (void *)v6[1];
        ++v5;
      }
      while (v6 != v4);
      uint64_t v115 = *(void *)(v2[4] + 16);
      uint64_t v116 = v2;
      unint64_t v7 = v2[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(unsigned char *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v7 != v4) {
        break;
      }
      uint64_t v103 = 0;
      uint64_t v102 = 0;
      int v104 = 0;
LABEL_137:
      MEMORY[0x1D25D9CD0](v102, 8);
      MEMORY[0x1D25D9CD0](v103, 8);
      int v3 = v117 | v104;
      uint64_t v2 = (void *)*v116;
      if (*v116 == v112) {
        return v3 & 1;
      }
    }
    int v114 = 0;
    uint64_t v118 = v2 + 6;
    while (1)
    {
      uint64_t v8 = *(unsigned __int16 **)(v7 + 16);
      int v9 = *v8;
      BOOL v11 = (v9 - 9) <= 0x3C && ((1 << (v9 - 9)) & 0x1000000000000605) != 0
         || v9 == 0;
      if (v11 || (v8[4] & 0x10) != 0)
      {
        ++v5;
        goto LABEL_129;
      }
      if ((v8[8] & 0x10) == 0) {
        goto LABEL_21;
      }
      unsigned int v18 = *(_DWORD *)(*(void *)(v7 + 32) + 4);
      if (sub_1CB91FC94(v9) <= 3) {
        break;
      }
LABEL_129:
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(unsigned char *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      --v5;
      if ((void *)v7 == v4)
      {
        uint64_t v102 = v120[0];
        uint64_t v103 = v122[0];
        int v104 = v114;
        goto LABEL_137;
      }
    }
    int v19 = *(_DWORD *)(v119 + 44);
    unsigned int v20 = v19 + 63;
    uint64_t v21 = (v19 + 63) >> 6;
    unint64_t v128 = v131;
    int v130 = 6;
    if ((v19 + 63) > 0x1BF)
    {
      unsigned int v129 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v20 >= 0x40)
    {
      bzero(v131, 8 * v21);
      uint64_t v21 = v20 >> 6;
    }
    unsigned int v129 = (v19 + 63) >> 6;
    int v132 = v19;
    uint64_t v124 = v127;
    int v126 = 6;
    if (v20 >= 0x40) {
      bzero(v127, 8 * v21);
    }
    unsigned int v22 = (v19 + 63) >> 6;
    uint64_t v23 = 0;
    unsigned int v125 = v22;
    v127[12] = v19;
    uint64_t v24 = *(void *)(v119 + 8);
    unint64_t v25 = *(unsigned int *)(v24 + 24 * v18 + 16);
    uint64_t v26 = *(void *)(v119 + 56);
    int v27 = (_WORD *)(v26 + ((v25 >> 3) & 0x1FFFFFFE));
    __int16 v29 = *v27;
    uint64_t v28 = v27 + 1;
    unsigned __int16 v30 = v29 + (v25 & 0xF) * v18;
    uint64_t v31 = v122[0];
    int v32 = v123;
    int v33 = v123 - 1;
    unsigned int v34 = -1;
    unsigned int v35 = v28;
    unsigned __int16 v36 = v30;
    do
    {
      int v37 = v36;
      *(void *)&v131[v36 >> 6] |= 1 << v36;
      if (v32)
      {
        unsigned int v38 = (37 * v36) & v33;
        unsigned int v39 = (int *)(v31 + 24 * v38);
        int v40 = *v39;
        if (*v39 == v37)
        {
LABEL_36:
          if (v38 != v32 && v39[2] < v34)
          {
            uint64_t v23 = *((void *)v39 + 2);
            unsigned int v34 = v39[2];
          }
        }
        else
        {
          int v42 = 1;
          while (v40 != -1)
          {
            unsigned int v43 = v38 + v42++;
            unsigned int v38 = v43 & v33;
            unsigned int v39 = (int *)(v31 + 24 * v38);
            int v40 = *v39;
            if (*v39 == v37) {
              goto LABEL_36;
            }
          }
        }
      }
      int v41 = *v35++;
      unsigned __int16 v36 = v41 + v37;
    }
    while (v41);
    int v44 = v121 - 1;
    unsigned int v45 = -1;
    do
    {
      if (v121)
      {
        unsigned int v46 = (37 * v30) & v44;
        int v47 = *(_DWORD *)(v120[0] + 24 * v46);
        if (v47 == v30)
        {
LABEL_47:
          if (v46 != v121)
          {
            unsigned int v48 = *(_DWORD *)(v120[0] + 24 * v46 + 8);
            if (v48 < v45) {
              unsigned int v45 = v48;
            }
          }
        }
        else
        {
          int v50 = 1;
          while (v47 != -1)
          {
            unsigned int v51 = v46 + v50++;
            unsigned int v46 = v51 & v44;
            int v47 = *(_DWORD *)(v120[0] + 24 * v46);
            if (v47 == v30) {
              goto LABEL_47;
            }
          }
        }
      }
      int v49 = *v28++;
      v30 += v49;
    }
    while (v49);
    uint64_t v52 = *(void *)(v7 + 32);
    uint64_t v53 = *(unsigned int *)(v7 + 40);
    if (v53)
    {
      uint64_t v54 = (_DWORD *)(v52 + 32 * v53);
      uint64_t v55 = v124;
      uint64_t v56 = *(_DWORD **)(v7 + 32);
      do
      {
        if ((*v56 & 0x30000FF) == 0)
        {
          unsigned int v57 = v56[1];
          unint64_t v58 = ((unint64_t)*(unsigned int *)(v24 + 24 * v57 + 16) >> 3) & 0x1FFFFFFE;
          int v59 = *(unsigned __int16 *)(v26 + v58) + (*(_DWORD *)(v24 + 24 * v57 + 16) & 0xF) * v57;
          int v60 = (unsigned __int16 *)(v26 + 2 + v58);
          do
          {
            v55[(unsigned __int16)v59 >> 6] |= 1 << v59;
            int v61 = *v60++;
            v59 += v61;
          }
          while (v61);
        }
        v56 += 8;
      }
      while (v56 != v54);
    }
    int v62 = 1;
    if (v34 != -1 && v5 == v34 - 1 && v34 <= v45)
    {
      int v63 = *(unsigned __int16 **)(v23 + 16);
      if ((v63[8] & 2) != 0)
      {
        unsigned int v110 = v22;
        int v64 = *v63;
        uint64_t v65 = v23;
        int v109 = sub_1CBC7A3F8(v64, 0x24u);
        int v111 = v64;
        int v66 = sub_1CBC7A3F8(v64, 0x25u);
        uint64_t v67 = v52 + 32 * sub_1CBC7A3F8(**(unsigned __int16 **)(v7 + 16), 0x16u);
        uint64_t v70 = *(void *)(v67 + 16);
        uint64_t v69 = (uint64_t *)(v67 + 16);
        uint64_t v68 = v70;
        if (*(unsigned char *)(v115 + 380) && (v68 & 3) == 3) {
          goto LABEL_68;
        }
        uint64_t v106 = v68;
        unint64_t v108 = *(_DWORD **)(v65 + 32);
        int v107 = sub_1CBC7A3F8(v111, 0x33u);
        int v71 = sub_1CBC7A3F8(v111, 0x39u);
        if ((v107 & 0x80000000) == 0 || (v71 & 0x80000000) == 0 && !LOBYTE(v108[8 * v71]))
        {
          if (v110 >= v129) {
            uint64_t v72 = v129;
          }
          else {
            uint64_t v72 = v110;
          }
          if (v72)
          {
            uint64_t v73 = (uint64_t *)v124;
            long long v74 = v131;
            do
            {
              uint64_t v76 = (uint64_t)*v74++;
              uint64_t v75 = v76;
              uint64_t v77 = *v73++;
              if ((v77 & v75) != 0) {
                goto LABEL_68;
              }
            }
            while (--v72);
          }
          uint64_t v78 = *(unsigned int *)(v65 + 40);
          if (v78)
          {
            int v79 = &v108[8 * v78];
            unint64_t v80 = v108;
            while ((*v80 & 0x30000FF) != 0x1000000)
            {
LABEL_89:
              v80 += 8;
              if (v80 == v79) {
                goto LABEL_93;
              }
            }
            unsigned int v81 = v80[1];
            unint64_t v82 = *(unsigned int *)(v24 + 24 * v81 + 16);
            __int16 v83 = v82 & 0xF;
            uint64_t v84 = (v82 >> 3) & 0x1FFFFFFE;
            unsigned __int16 v85 = *(_WORD *)(v26 + v84) + v83 * v81;
            __n128 v86 = (unsigned __int16 *)(v26 + 2 + v84);
            while (((*((void *)v124 + (v85 >> 6)) >> v85) & 1) == 0)
            {
              int v87 = *v86++;
              v85 += v87;
              if (!v87) {
                goto LABEL_89;
              }
            }
            goto LABEL_68;
          }
        }
LABEL_93:
        unsigned int v88 = v129;
        if (!sub_1CB9A81B0(v131, v129, v108[8 * v109 + 1], v24, v26)
          && (v66 == -1
           || (*(void *)&v108[8 * sub_1CBC7A3F8(v111, 0x16u) + 4] & 0x3C0) != 0x100
           || LOBYTE(v108[8 * v66])
           || !sub_1CB9A81B0(v131, v88, v108[8 * v66 + 1], v24, v26)))
        {
LABEL_68:
          int v62 = 0;
          goto LABEL_69;
        }
        *uint64_t v69 = v106 | 8;
        int v62 = 1;
        int v114 = 1;
      }
    }
LABEL_69:
    int v4 = v118;
    if (v124 != v127) {
      free(v124);
    }
    if (v128 != v131) {
      free(v128);
    }
    if (v62)
    {
LABEL_21:
      unint64_t v12 = v7;
      if ((*(_WORD *)(v7 + 44) & 4) != 0)
      {
        unint64_t v12 = v7;
        do
          unint64_t v12 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v12 + 44) & 4) != 0);
      }
      uint64_t v13 = *(void *)(v7 + 24) + 48;
      uint64_t v14 = *(int **)(v12 + 32);
      uint64_t v15 = *(unsigned int *)(v12 + 40);
      uint64_t v16 = &v14[8 * v15];
      if (!v15)
      {
        unint64_t v17 = *(void *)(v12 + 8);
        if (v17 == v13)
        {
          unint64_t v12 = *(void *)(v7 + 24) + 48;
          goto LABEL_111;
        }
        unint64_t v12 = *(void *)(v7 + 24) + 48;
        if ((*(_WORD *)(v17 + 44) & 4) != 0)
        {
          do
          {
            unint64_t v89 = v17;
            uint64_t v90 = *(unsigned int *)(v17 + 40);
            if (v90) {
              goto LABEL_109;
            }
            unint64_t v17 = *(void *)(v17 + 8);
          }
          while (v17 != v13 && (*(_WORD *)(v17 + 44) & 4) != 0);
LABEL_108:
          unint64_t v12 = v13;
LABEL_110:
          uint64_t v14 = *(int **)(v89 + 32);
          uint64_t v16 = &v14[8 * v90];
        }
      }
LABEL_111:
      while (v14 != v16)
      {
        int v91 = *v14;
        if (!*v14 && (v91 & 0x2000000) == 0)
        {
          unsigned int v93 = v14[1];
          if (v93)
          {
            long long v94 = (unsigned __int16 *)(*(void *)(v119 + 56)
                                     + (((unint64_t)*(unsigned int *)(*(void *)(v119 + 8) + 24 * v93 + 16) >> 3) & 0x1FFFFFFE));
            int v96 = *v94;
            uint64_t v95 = v94 + 1;
            int v97 = v96 + (*(_DWORD *)(*(void *)(v119 + 8) + 24 * v93 + 16) & 0xF) * v93;
            if ((v91 & 0x1000000) != 0)
            {
              do
              {
                LODWORD(v128) = (unsigned __int16)v97;
                uint64_t v100 = sub_1CB8F4ED0((uint64_t)v120, (int *)&v128);
                *(_DWORD *)uint64_t v100 = v5;
                *(void *)(v100 + 8) = v7;
                int v101 = *v95++;
                v97 += v101;
              }
              while (v101);
            }
            else
            {
              do
              {
                LODWORD(v128) = (unsigned __int16)v97;
                uint64_t v98 = sub_1CB8F4ED0((uint64_t)v122, (int *)&v128);
                *(_DWORD *)uint64_t v98 = v5;
                *(void *)(v98 + 8) = v7;
                int v99 = *v95++;
                v97 += v99;
              }
              while (v99);
            }
          }
        }
        v14 += 8;
        if (v14 == v16)
        {
          unint64_t v92 = *(void *)(v12 + 8);
          if (v92 == v13) {
            break;
          }
          uint64_t v14 = v16;
          unint64_t v12 = v13;
          if ((*(_WORD *)(v92 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v89 = v92;
              uint64_t v90 = *(unsigned int *)(v92 + 40);
              if (v90) {
                break;
              }
              unint64_t v92 = *(void *)(v92 + 8);
              if (v92 == v13 || (*(_WORD *)(v92 + 44) & 4) == 0) {
                goto LABEL_108;
              }
            }
LABEL_109:
            unint64_t v12 = v89;
            goto LABEL_110;
          }
        }
      }
      int v4 = v118;
      goto LABEL_129;
    }
    goto LABEL_129;
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

BOOL sub_1CB9A81B0(int8x8_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(unsigned int *)(a4 + 24 * a3 + 16);
  __int16 v7 = v6 & 0xF;
  uint64_t v8 = (__int16 *)(a5 + ((v6 >> 3) & 0x1FFFFFFE));
  __int16 v10 = *v8;
  int v9 = v8 + 1;
  unsigned __int16 v11 = v10 + v7 * a3;
  do
  {
    if (((*(void *)&a1[v11 >> 6] >> v11) & 1) == 0) {
      return 0;
    }
    int v12 = (unsigned __int16)v9[v5];
    v11 += v12;
    ++v5;
  }
  while (v12);
  int v13 = 0;
  if (a2)
  {
    uint64_t v14 = 8 * a2;
    do
    {
      int8x8_t v15 = *a1++;
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v13 += v16.i32[0];
      v14 -= 8;
    }
    while (v14);
  }
  return v13 == v5;
}

void sub_1CB9A823C(llvm::Pass *a1)
{
  sub_1CD807DD8(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB9A8274()
{
  return "AGX2 Instruction Selection";
}

uint64_t sub_1CB9A8284(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v1101 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 296);
  int v3 = *(void **)(a1 + 296);
  int v4 = (void *)v3[27];
  v1052 = v2;
  uint64_t v1053 = (uint64_t)(v3 + 26);
  uint64_t v1055 = v1;
  if (v4 != v3 + 26)
  {
    unint64_t v1054 = (unint64_t)&v1095;
    while (1)
    {
      if (v4) {
        uint64_t v5 = (uint64_t)(v4 - 1);
      }
      else {
        uint64_t v5 = 0;
      }
      unint64_t v6 = *(unsigned __int8 **)(v5 + 64);
      v1069 = v6;
      if (v6) {
        llvm::MetadataTracking::track((uint64_t)&v1069, v6, 2);
      }
      int v1070 = *(_DWORD *)(v5 + 60);
      int v7 = *(unsigned __int16 *)(v5 + 24);
      if (v7 != 65517) {
        break;
      }
      __src[0] = &v1095;
      __src[1] = (void *)0x1000000000;
      LOWORD(v8) = *(_WORD *)(v5 + 56);
      if ((_WORD)v8)
      {
        uint64_t v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if (v10 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)__src[0] + v10) = *(_OWORD *)(*(void *)(v5 + 32) + v9);
          unsigned int v10 = ++LODWORD(__src[1]);
          ++v11;
          uint64_t v8 = (char *)*(unsigned __int16 *)(v5 + 56);
          v9 += 40;
        }
        while (v11 < (unint64_t)v8);
        if (v8 == 4) {
          goto LABEL_150;
        }
      }
      char v52 = 0;
      unsigned int v53 = 1;
      do
      {
        while (1)
        {
          uint64_t v54 = *(void *)(v5 + 32);
          uint64_t v55 = *(void *)(*(void *)(v54 + 40 * (v53 + 1)) + 80);
          uint64_t v56 = (void *)(v55 + 24);
          if (*(_DWORD *)(v55 + 32) >= 0x41u) {
            uint64_t v56 = (void *)*v56;
          }
          uint64_t v57 = *(void *)(*(void *)(v54 + 40 * (v53 + 3)) + 80);
          unint64_t v58 = (void *)(v57 + 24);
          if (*(_DWORD *)(v57 + 32) >= 0x41u) {
            unint64_t v58 = (void *)*v58;
          }
          unsigned int v59 = *(_DWORD *)v56 - 1;
          unsigned int v60 = *(_DWORD *)v58 - 1;
          BOOL v61 = v59 > 0xF || v60 > 0xF;
          BOOL v62 = !v61 && v60 - v59 == 1;
          if (!v62 || (v59 & 1) != 0) {
            break;
          }
          int v64 = (uint64_t *)(v54 + 40 * v53);
          uint64_t v65 = *v64;
          uint64_t v66 = v64[1];
          uint64_t v67 = v53 + 2;
          uint64_t v68 = (uint64_t *)(v54 + 40 * v67);
          uint64_t v69 = *v68;
          uint64_t v70 = v68[1];
          v1067 = v1069;
          if (v1069) {
            llvm::MetadataTracking::track((uint64_t)&v1067, v1069, 2);
          }
          int v1068 = v1070;
          int v71 = sub_1CB9C2B30(v1, v65, v66, v69, v70, (const llvm::APInt *)&v1067, (llvm *)0x26, 0);
          if (v1067)
          {
            int v72 = *v1067;
            if ((v72 - 4) > 0x1E)
            {
              if ((v72 - 3) >= 0xFFFFFFFE) {
                uint64_t v73 = v1067;
              }
              else {
                uint64_t v73 = 0;
              }
              if ((v72 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v74 = (unint64_t)(v73 + 8);
LABEL_136:
                *(void *)&long long v1085 = &v1067;
                sub_1CC5FA668(v74 + 16, &v1085);
                goto LABEL_127;
              }
              if (v72 == 3) {
                *((void *)v1067 + 1) = 0;
              }
            }
            else if ((v1067[1] & 0x7F) == 2 || *((_DWORD *)v1067 + 3))
            {
              uint64_t v89 = *((void *)v1067 + 2);
              if ((v89 & 4) != 0)
              {
                unint64_t v74 = v89 & 0xFFFFFFFFFFFFFFF8;
                if (v74) {
                  goto LABEL_136;
                }
              }
            }
          }
LABEL_127:
          if (!v71)
          {
            LOWORD(v8) = *(_WORD *)(v5 + 56);
            break;
          }
          uint64_t v75 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, (llvm *)5, 0, 0, 0);
          uint64_t v77 = v76;
          int v79 = sub_1CD7EBF14(*v1052, 1, (const llvm::APInt *)&v1069, (llvm *)5, 0, 0, 0);
          uint64_t v80 = *(void *)(*v1052 + 832);
          uint64_t v1030 = v81;
          if (v80) {
            LOWORD(v80) = *(_WORD *)(v80 + 8);
          }
          unint64_t v82 = sub_1CCFDED5C(*v1052, 148, (const llvm::APInt *)&v1069, (llvm *)4, 0, (uint64_t)v71, 0, v78, (uint64_t)v75, v77, v80);
          uint64_t v84 = (char *)__src[0] + 16 * v53;
          *(void *)uint64_t v84 = v82;
          *((_DWORD *)v84 + 2) = v85;
          uint64_t v86 = *(void *)(*v1052 + 832);
          if (v86) {
            LOWORD(v86) = *(_WORD *)(v86 + 8);
          }
          int v87 = sub_1CCFDED5C(*v1052, 148, (const llvm::APInt *)&v1069, (llvm *)4, 0, (uint64_t)v71, 0, v83, (uint64_t)v79, v1030, v86);
          uint64_t v8 = (char *)__src[0] + 16 * v67;
          *(void *)uint64_t v8 = v87;
          *((_DWORD *)v8 + 2) = v88;
          v53 += 4;
          LODWORD(v8) = *(unsigned __int16 *)(v5 + 56);
          char v52 = 1;
          if (v53 > (int)v8 - 4) {
            goto LABEL_149;
          }
        }
        v53 += 4;
      }
      while (v53 <= (unsigned __int16)v8 - 4);
      if ((v52 & 1) == 0) {
        goto LABEL_150;
      }
LABEL_149:
      sub_1CD800398(*v1052, v5, (uint64_t *)__src[0], LODWORD(__src[1]));
LABEL_150:
      if (__src[0] != &v1095) {
        free(__src[0]);
      }
LABEL_152:
      if (v1069)
      {
        int v90 = *v1069;
        if ((v90 - 4) > 0x1E)
        {
          if ((v90 - 3) >= 0xFFFFFFFE) {
            int v91 = v1069;
          }
          else {
            int v91 = 0;
          }
          if ((v90 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v92 = (unint64_t)(v91 + 8);
            goto LABEL_163;
          }
          if (v90 == 3) {
            *((void *)v1069 + 1) = 0;
          }
        }
        else if ((v1069[1] & 0x7F) == 2 || *((_DWORD *)v1069 + 3))
        {
          uint64_t v688 = *((void *)v1069 + 2);
          if ((v688 & 4) != 0)
          {
            unint64_t v92 = v688 & 0xFFFFFFFFFFFFFFF8;
            if (v92)
            {
LABEL_163:
              __src[0] = &v1069;
              sub_1CC5FA668(v92 + 16, __src);
            }
          }
        }
      }
      int v4 = (void *)v4[1];
      if (v4 == (void *)v1053)
      {
        uint64_t v2 = v1052;
        int v3 = (void *)*v1052;
        goto LABEL_939;
      }
    }
    if (!sub_1CB9C2DD8(*(unsigned __int16 *)(v5 + 24))) {
      goto LABEL_193;
    }
    BOOL v15 = (~*(unsigned __int16 *)(v5 + 72) & 0x7C0) != 0 && (*(_WORD *)(*(void *)*v1052 + 1020) & 1) == 0;
    if (v15 || **(unsigned char **)(v5 + 40) != 9) {
      goto LABEL_193;
    }
    BYTE2(v1082) = 0;
    LOWORD(v1082) = 0;
    int v16 = *(unsigned __int16 *)(v5 + 56);
    if (*(_WORD *)(v5 + 56))
    {
      unint64_t v17 = 0;
      while (1)
      {
        unsigned int v18 = (_DWORD *)(*(void *)(v5 + 32) + 40 * v17);
        uint64_t v19 = *(void *)v18;
        int v20 = *(unsigned __int16 *)(*(void *)v18 + 24);
        if (v20 == 46)
        {
          uint64_t v21 = *(void *)(v19 + 32);
          uint64_t v22 = *(void *)(*(void *)v21 + 80);
          uint64_t v23 = (void *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u) {
            uint64_t v23 = (void *)*v23;
          }
          if (*v23 == 2131)
          {
            uint64_t v24 = *(void *)(v21 + 40);
            uint64_t v25 = *(void *)(v24 + 48);
            if (!v25) {
              goto LABEL_193;
            }
            int v26 = *(_DWORD *)(v21 + 48);
            int v27 = 1;
            do
            {
              if (*(_DWORD *)(v25 + 8) == v26)
              {
                if (!v27) {
                  goto LABEL_193;
                }
                --v27;
              }
              uint64_t v25 = *(void *)(v25 + 32);
            }
            while (v25);
            if (v27 || (sub_1CB9C2DD8(*(unsigned __int16 *)(v24 + 24)) & 1) == 0) {
              goto LABEL_193;
            }
            goto LABEL_93;
          }
          int v20 = 46;
        }
        else
        {
          int v28 = v18[2];
          if (v20 != 222) {
            goto LABEL_47;
          }
          uint64_t v29 = *(void *)(v19 + 48);
          if (!v29) {
            goto LABEL_93;
          }
          int v30 = 1;
          do
          {
            if (*(_DWORD *)(v29 + 8) == v28)
            {
              if (!v30) {
                goto LABEL_93;
              }
              --v30;
            }
            uint64_t v29 = *(void *)(v29 + 32);
          }
          while (v29);
          if (v30) {
            goto LABEL_93;
          }
          unsigned int v18 = *(_DWORD **)(v19 + 32);
          uint64_t v19 = *(void *)v18;
          int v20 = *(unsigned __int16 *)(*(void *)v18 + 24);
        }
        int v28 = v18[2];
LABEL_47:
        if (v20 == 223)
        {
          uint64_t v31 = *(void *)(v19 + 48);
          if (!v31) {
            goto LABEL_93;
          }
          int v32 = 1;
          do
          {
            if (*(_DWORD *)(v31 + 8) == v28)
            {
              if (!v32) {
                goto LABEL_93;
              }
              --v32;
            }
            uint64_t v31 = *(void *)(v31 + 32);
          }
          while (v31);
          if (v32) {
            goto LABEL_93;
          }
          uint64_t v33 = *(void *)(v19 + 32);
          uint64_t v19 = *(void *)v33;
          int v28 = *(_DWORD *)(v33 + 8);
          int v20 = *(unsigned __int16 *)(v19 + 24);
        }
        if (v20 == 212)
        {
          unsigned int v34 = *(void **)(v19 + 32);
          uint64_t v35 = *v34;
          uint64_t v36 = v34[1];
          int v37 = *(unsigned __int16 *)(*v34 + 24);
          if (v37 == 395) {
            char v38 = ((v7 - 96) < 0x2E) & (0x200000000005uLL >> (v7 - 96));
          }
          else {
            char v38 = 1;
          }
          if ((v38 & 1) != 0
            || ((unsigned int v48 = *(unsigned char **)(v1 + 480), v48[319]) ? (v49 = v48[338] == 0) : (v49 = 0), !v49 && !v48[326]))
          {
            uint64_t v39 = *(void *)(v19 + 48);
            if (!v39) {
              goto LABEL_68;
            }
            int v40 = 1;
            do
            {
              if (*(_DWORD *)(v39 + 8) == v28)
              {
                if (!v40) {
                  goto LABEL_68;
                }
                --v40;
              }
              uint64_t v39 = *(void *)(v39 + 32);
            }
            while (v39);
            if (!v40)
            {
              if (v37 == 395) {
                goto LABEL_93;
              }
            }
            else
            {
LABEL_68:
              __src[0] = &v1097;
              __src[1] = &v1097;
              uint64_t v1095 = 8;
              unsigned int v1096 = 0;
              char v41 = sub_1CB9C3CFC(v19, (uint64_t)__src);
              if (__src[1] != __src[0]) {
                free(__src[1]);
              }
              if (v37 == 395) {
                char v42 = 0;
              }
              else {
                char v42 = v41;
              }
              if ((v42 & 1) == 0) {
                goto LABEL_93;
              }
            }
            uint64_t v43 = *(void *)(v35 + 48);
            if (!v43) {
              goto LABEL_81;
            }
            int v44 = 1;
            do
            {
              if (*(_DWORD *)(v43 + 8) == v36)
              {
                if (!v44) {
                  goto LABEL_81;
                }
                --v44;
              }
              uint64_t v43 = *(void *)(v43 + 32);
            }
            while (v43);
            if (v44) {
LABEL_81:
            }
              *((unsigned char *)&v1082 + v17) = 1;
            int v45 = *(unsigned __int16 *)(v35 + 24);
            if (v45 == 46)
            {
              uint64_t v46 = *(void *)(**(void **)(v35 + 32) + 80);
              int v47 = (void *)(v46 + 24);
              if (*(_DWORD *)(v46 + 32) >= 0x41u) {
                int v47 = (void *)*v47;
              }
              if (*v47 == 2131) {
                goto LABEL_93;
              }
            }
            else
            {
              if (sub_1CB9C2DD8(*(unsigned __int16 *)(v35 + 24))) {
                goto LABEL_93;
              }
              if ((v45 - 202) <= 0x15 && ((1 << (v45 + 54)) & 0x300003) != 0) {
                goto LABEL_93;
              }
            }
          }
          *((unsigned char *)&v1082 + v17) = 1;
        }
LABEL_93:
        ++v17;
        int v50 = (uint64_t **)*(unsigned __int16 *)(v5 + 56);
        if (v17 >= (unint64_t)v50)
        {
          int v16 = BYTE1(v1082);
          int v93 = BYTE2(v1082);
          if (!LOBYTE(v1082)) {
            goto LABEL_168;
          }
          goto LABEL_170;
        }
      }
    }
    LODWORD(v50) = 0;
    int v93 = 0;
LABEL_168:
    if (!v16 && !v93) {
      goto LABEL_193;
    }
LABEL_170:
    long long v94 = *(unsigned __int8 **)(v5 + 64);
    *(void *)&long long v1085 = v94;
    if (v94)
    {
      llvm::MetadataTracking::track((uint64_t)&v1085, v94, 2);
      LODWORD(v50) = *(unsigned __int16 *)(v5 + 56);
    }
    DWORD2(v1085) = *(_DWORD *)(v5 + 60);
    uint64_t v95 = &v1095;
    __src[0] = &v1095;
    __src[1] = (void *)0x300000000;
    if (v50)
    {
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      do
      {
        int v99 = sub_1CB9C3F24(v1, *(void *)(*(void *)(v5 + 32) + v96), *(void *)(*(void *)(v5 + 32) + v96 + 8), *((unsigned __int8 *)&v1082 + v97), 1, 0, 0);
        if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v50 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
        *int v50 = v99;
        v50[1] = v98;
        LODWORD(v50) = ++LODWORD(__src[1]);
        ++v97;
        v96 += 40;
      }
      while (v97 < *(unsigned __int16 *)(v5 + 56));
      uint64_t v95 = (uint64_t *)__src[0];
    }
    uint64_t v100 = sub_1CD7FF4E8((void *)*v1052, (const char *)*(unsigned __int16 *)(v5 + 24), (const llvm::APInt *)&v1085, (llvm *)0xA, 0, v95, v50, *(unsigned __int16 *)(v5 + 72));
    uint64_t v102 = v101;
    uint64_t v103 = *(void *)(v5 + 48);
    if (!v103) {
      goto LABEL_673;
    }
    int v104 = 1;
    uint64_t v105 = *(void *)(v5 + 48);
    do
    {
      if (!*(_DWORD *)(v105 + 8))
      {
        if (!v104) {
          goto LABEL_652;
        }
        --v104;
      }
      uint64_t v105 = *(void *)(v105 + 32);
    }
    while (v105);
    if (!v104)
    {
      uint64_t v106 = *(void *)(v103 + 16);
      if (*(_WORD *)(v106 + 24) == 215)
      {
        uint64_t v107 = *v1052;
        unint64_t v108 = v100;
        int v109 = v102;
        goto LABEL_187;
      }
    }
LABEL_652:
    int v505 = 1;
    uint64_t v506 = *(void *)(v5 + 48);
    do
    {
      if (!*(_DWORD *)(v506 + 8))
      {
        if (!v505) {
          goto LABEL_673;
        }
        --v505;
      }
      uint64_t v506 = *(void *)(v506 + 32);
    }
    while (v506);
    if (v505) {
      goto LABEL_673;
    }
    uint64_t v507 = *(void *)(v103 + 16);
    if (*(_WORD *)(v507 + 24) != 46) {
      goto LABEL_673;
    }
    uint64_t v508 = *(void *)(**(void **)(v507 + 32) + 80);
    v509 = (void *)(v508 + 24);
    if (*(_DWORD *)(v508 + 32) >= 0x41u) {
      v509 = (void *)*v509;
    }
    if (*v509 != 2131)
    {
LABEL_673:
      uint64_t v526 = *v1052;
      uint64_t v527 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1085, (llvm *)5, 0, 0, 0);
      uint64_t v530 = *(void *)(v526 + 832);
      if (v530) {
        LOWORD(v530) = *(_WORD *)(v530 + 8);
      }
      unint64_t v108 = sub_1CCFDED5C(v526, 212, (const llvm::APInt *)&v1085, (llvm *)9, 0, (uint64_t)v100, v102, v529, (uint64_t)v527, v528, v530);
      int v109 = v531;
      uint64_t v107 = *v1052;
      uint64_t v106 = v5;
LABEL_187:
      sub_1CD801F28(v107, v106, 0, (uint64_t)v108, v109);
      if (__src[0] != &v1095) {
        free(__src[0]);
      }
      if (!(void)v1085) {
        goto LABEL_193;
      }
      int v110 = *(unsigned __int8 *)v1085;
      if ((v110 - 4) > 0x1E)
      {
        if ((v110 - 3) >= 0xFFFFFFFE) {
          uint64_t v454 = v1085;
        }
        else {
          uint64_t v454 = 0;
        }
        if ((v110 - 3) < 0xFFFFFFFE)
        {
          if (v110 == 3) {
            *(void *)(v1085 + 8) = 0;
          }
          goto LABEL_193;
        }
        unint64_t v455 = v454 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v1085 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1085 + 12)) {
          goto LABEL_193;
        }
        uint64_t v719 = *(void *)(v1085 + 16);
        if ((v719 & 4) == 0) {
          goto LABEL_193;
        }
        unint64_t v455 = v719 & 0xFFFFFFFFFFFFFFF8;
        if (!v455) {
          goto LABEL_193;
        }
      }
      __src[0] = &v1085;
      sub_1CC5FA668(v455 + 16, __src);
LABEL_193:
      if (v7 > 170)
      {
        if (v7 <= 191)
        {
          switch(v7)
          {
            case 171:
              int v264 = *(uint64_t **)(v5 + 32);
              uint64_t v263 = *(void *)(v5 + 40);
              unint64_t v266 = *(llvm **)v263;
              uint64_t v265 = *(void *)(v263 + 8);
              uint64_t v267 = *v264;
              uint64_t v268 = *((unsigned int *)v264 + 2);
              uint64_t v269 = v264[5];
              if (*(unsigned __int16 *)(*v264 + 24) - 198 > 2) {
                goto LABEL_375;
              }
              uint64_t v270 = *(void *)(v267 + 48);
              if (!v270) {
                goto LABEL_152;
              }
              int v271 = 1;
              do
              {
                if (*(_DWORD *)(v270 + 8) == v268)
                {
                  if (!v271) {
                    goto LABEL_152;
                  }
                  --v271;
                }
                uint64_t v270 = *(void *)(v270 + 32);
              }
              while (v270);
              if (v271) {
                goto LABEL_152;
              }
              unint64_t v272 = *(uint64_t **)(v267 + 32);
              uint64_t v267 = *v272;
              uint64_t v268 = *((unsigned int *)v272 + 2);
LABEL_375:
              if (*(unsigned char *)(*(void *)(v1 + 480) + 318)) {
                goto LABEL_152;
              }
              uint64_t v273 = *(void *)(v267 + 48);
              if (!v273) {
                goto LABEL_152;
              }
              int v274 = 1;
              do
              {
                if (*(_DWORD *)(v273 + 8) == v268)
                {
                  if (!v274) {
                    goto LABEL_152;
                  }
                  --v274;
                }
                uint64_t v273 = *(void *)(v273 + 32);
              }
              while (v273);
              if (v274) {
                goto LABEL_152;
              }
              int v275 = *(unsigned __int16 *)(v267 + 24);
              if (v275 != 177 && v275 != 175) {
                goto LABEL_152;
              }
              uint64_t v276 = *(void *)(v267 + 40) + 16 * v268;
              unint64_t v278 = *(void **)v276;
              uint64_t v277 = *(void **)(v276 + 8);
              __src[0] = v278;
              __src[1] = v277;
              if (v278 == v266)
              {
                if ((_BYTE)v278) {
                  goto LABEL_735;
                }
                BOOL v279 = v277 != (void *)v265;
              }
              else
              {
                BOOL v279 = 1;
              }
              if (v275 != 175 && v279) {
                goto LABEL_152;
              }
LABEL_735:
              int v601 = *(unsigned __int16 *)(v269 + 24);
              if (v601 != 35 && v601 != 11) {
                goto LABEL_152;
              }
              uint64_t v602 = *(int8x8_t **)(v269 + 80);
              v603 = v602 + 3;
              if (v602[4].i32[0] >= 0x41u) {
                v603 = (int8x8_t *)*v603;
              }
              unint64_t v604 = (unint64_t)*v603;
              uint8x8_t v605 = (uint8x8_t)vcnt_s8(*v603);
              v605.i16[0] = vaddlv_u8(v605);
              if (v605.u32[0] != 1) {
                goto LABEL_152;
              }
              uint64_t v606 = sub_1CD3E12F4((unsigned __int8 *)__src, v12, v13);
              if (!v604) {
                goto LABEL_152;
              }
              if (__clz(__rbit64(v604)) >= (unint64_t)v606) {
                goto LABEL_152;
              }
              uint64_t v607 = *(void *)(*(void *)(v267 + 32) + 40);
              int v608 = *(unsigned __int16 *)(v607 + 24);
              if (v608 != 35 && v608 != 11) {
                goto LABEL_152;
              }
              uint64_t v609 = *(void *)(v607 + 80);
              v610 = (unint64_t *)(v609 + 24);
              unsigned int v611 = *(_DWORD *)(v609 + 32);
              if (v275 == 175)
              {
                if (v611 > 0x40) {
                  v610 = (unint64_t *)*v610;
                }
                unint64_t v612 = *v610;
                if (v612 < 5) {
                  goto LABEL_152;
                }
                uint64_t v613 = v604 >> v612;
              }
              else
              {
                if (v611 >= 0x41) {
                  v610 = (unint64_t *)*v610;
                }
                uint64_t v613 = v604 << *v610;
              }
              unsigned int v720 = sub_1CD7EBF14(*v1052, v604, (const llvm::APInt *)&v1069, v266, v265, 0, 0);
              unsigned int v1040 = v721;
              uint64_t v722 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, v266, v265, 0, 0);
              uint64_t v724 = v723;
              uint64_t v727 = sub_1CD7EBF14(*v1052, v613, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              int v728 = v725;
              __int16 v729 = 0;
              uint64_t v730 = *(void *)(*v1052 + 832);
              if (v730) {
                __int16 v729 = *(_WORD *)(v730 + 8);
              }
              v731 = sub_1CCFDED5C(*v1052, 171, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], **(void **)(v267 + 32), *(void *)(*(void *)(v267 + 32) + 8), v726, (uint64_t)v727, v725, v729);
              unint64_t v416 = v1052;
              uint64_t v491 = sub_1CD3D6058((void *)*v1052, (const llvm::APInt *)&v1069, (uint64_t)v731, v732, (uint64_t)v727, v728, (uint64_t)v720, v1040, (uint64_t)v722, v724, SHIDWORD(v724), 0x11u);
              goto LABEL_727;
            case 172:
              for (uint64_t i = 0; i != 8; i += 4)
              {
                uint64_t v457 = &__src[i];
                *((_DWORD *)v457 + 2) = 1;
                *uint64_t v457 = 0;
                *((_DWORD *)v457 + 6) = 1;
                v457[2] = 0;
              }
              sub_1CD7F121C(*v1052, **(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), 0, (uint64_t)&v1085);
              if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
                MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
              }
              __src[0] = (void *)v1085;
              LODWORD(__src[1]) = DWORD2(v1085);
              DWORD2(v1085) = 0;
              if (v1096 >= 0x41 && v1095)
              {
                MEMORY[0x1D25D9CB0](v1095, 0x1000C8000313F17);
                uint64_t v1095 = v1086;
                unsigned int v1096 = v1087;
                unsigned int v1087 = 0;
                if (DWORD2(v1085) >= 0x41 && (void)v1085) {
                  MEMORY[0x1D25D9CB0](v1085, 0x1000C8000313F17);
                }
              }
              else
              {
                uint64_t v1095 = v1086;
                unsigned int v1096 = v1087;
              }
              sub_1CD7F121C(*v1052, *(void *)(*(void *)(v5 + 32) + 40), *(void *)(*(void *)(v5 + 32) + 48), 0, (uint64_t)&v1085);
              if (v1098 >= 0x41 && v1097) {
                MEMORY[0x1D25D9CB0](v1097, 0x1000C8000313F17);
              }
              v1097 = (void *)v1085;
              unsigned int v1098 = DWORD2(v1085);
              DWORD2(v1085) = 0;
              if (v1100[0] >= 0x41u && v1099)
              {
                MEMORY[0x1D25D9CB0](v1099, 0x1000C8000313F17);
                uint64_t v1099 = v1086;
                v1100[0] = v1087;
                unsigned int v1087 = 0;
                if (DWORD2(v1085) >= 0x41 && (void)v1085) {
                  MEMORY[0x1D25D9CB0](v1085, 0x1000C8000313F17);
                }
              }
              else
              {
                uint64_t v1099 = v1086;
                v1100[0] = v1087;
              }
              int v1063 = (int)__src[1];
              if (LODWORD(__src[1]) > 0x40) {
                operator new[]();
              }
              if (LODWORD(__src[1])) {
                unint64_t v459 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
              }
              else {
                unint64_t v459 = 0;
              }
              uint64_t v460 = v459 & ~(uint64_t)__src[0];
              uint64_t v1062 = v460;
              int v1063 = 0;
              unsigned int v1061 = v1098;
              if (v1098 > 0x40) {
                operator new[]();
              }
              if (v1098) {
                unint64_t v546 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1098;
              }
              else {
                unint64_t v546 = 0;
              }
              unint64_t v1060 = v546 & ~(unint64_t)v1097;
              unsigned int v1061 = 0;
              if ((v546 & ~(unint64_t)v1097 & v460) == 0)
              {
                uint64_t v662 = *(uint64_t **)(v5 + 32);
                uint64_t v664 = *v662;
                uint64_t v663 = v662[1];
                uint64_t v665 = v662[5];
                unint64_t v666 = v662[6];
                if (*(_WORD *)(v664 + 24) != 175) {
                  goto LABEL_836;
                }
                uint64_t v667 = *(void *)(*(void *)(v664 + 32) + 40);
                int v668 = *(unsigned __int16 *)(v667 + 24);
                if (v668 != 35 && v668 != 11) {
                  goto LABEL_836;
                }
                uint64_t v670 = *(void *)(v667 + 80);
                uint64_t v671 = (void *)(v670 + 24);
                if (*(_DWORD *)(v670 + 32) >= 0x41u) {
                  uint64_t v671 = (void *)*v671;
                }
                if (*v671 <= 4uLL)
                {
                  unint64_t v672 = v663 & 0xFFFFFFFF00000000 | v666;
                  unint64_t v666 = v666 & 0xFFFFFFFF00000000 | v663;
                  uint64_t v673 = v664;
                  uint64_t v663 = v672;
                }
                else
                {
LABEL_836:
                  uint64_t v673 = v665;
                  uint64_t v665 = v664;
                }
                uint64_t v674 = *(void *)(*v1052 + 832);
                if (v674) {
                  LOWORD(v674) = *(_WORD *)(v674 + 8);
                }
                BOOL v675 = sub_1CCFDED5C(*v1052, 56, (const llvm::APInt *)&v1069, **(llvm ***)(v5 + 40), *(void *)(*(void *)(v5 + 40) + 8), v665, v663, v458, v673, v666, v674);
                sub_1CD800DA0(*v1052, v5, 0, (uint64_t)v675, v676);
                sub_1CD808A6C((uint64_t)v675);
              }
              for (unint64_t j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
              {
                int v548 = &__src[j / 2];
                if (v1100[j] >= 0x41u)
                {
                  int v549 = v548[6];
                  if (v549) {
                    MEMORY[0x1D25D9CB0](v549, 0x1000C8000313F17);
                  }
                }
                if (*((_DWORD *)v548 + 10) >= 0x41u)
                {
                  uint64_t v550 = v548[4];
                  if (v550) {
                    MEMORY[0x1D25D9CB0](v550, 0x1000C8000313F17);
                  }
                }
              }
              goto LABEL_152;
            case 173:
              long long v251 = *(_OWORD *)*(void *)(v5 + 40);
              *(_OWORD *)__src = v251;
              if (*(_WORD *)(v5 + 24) != 173) {
                goto LABEL_152;
              }
              uint64_t v252 = *(uint64_t **)(v5 + 32);
              uint64_t v253 = *v252;
              if (*(_WORD *)(*v252 + 24) != 56) {
                goto LABEL_152;
              }
              uint64_t v254 = v252[5];
              uint64_t v255 = *(void *)(v253 + 32);
              if (*(void *)(v255 + 40) != v254) {
                goto LABEL_152;
              }
              if (*(_DWORD *)(v255 + 48) != *((_DWORD *)v252 + 12)) {
                goto LABEL_152;
              }
              if (*(_WORD *)(v254 + 24) != 176) {
                goto LABEL_152;
              }
              uint64_t v256 = *(void *)(v254 + 32);
              if (*(void *)v256 != *(void *)v255 || *(_DWORD *)(v256 + 8) != *(_DWORD *)(v255 + 8)) {
                goto LABEL_152;
              }
              uint64_t v257 = *(void *)(v256 + 40);
              int v258 = *(unsigned __int16 *)(v257 + 24);
              if (v258 != 35 && v258 != 11) {
                goto LABEL_152;
              }
              uint64_t v260 = *(void *)(v257 + 80);
              if ((_BYTE)v251) {
                uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
              }
              else {
                uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
              }
              uint64_t v689 = ExtendedSizeInBits;
              if (v262 == 1) {
              uint64_t v690 = (void *)(v260 + 24);
              }
              uint64_t v691 = *(unsigned int *)(v260 + 32);
              if (v691 < 0x41) {
                goto LABEL_859;
              }
              int v692 = 0;
              int64_t v693 = (unint64_t)(v691 + 63) >> 6;
              do
              {
                BOOL v61 = v693-- < 1;
                if (v61) {
                  break;
                }
                unint64_t v694 = *(void *)(*v690 + 8 * v693);
                v692 += __clz(v694);
              }
              while (!v694);
              int v695 = v691 | 0xFFFFFFC0;
              if ((v691 & 0x3F) == 0) {
                int v695 = 0;
              }
              if ((v691 - v692 - v695) > 0x40) {
                goto LABEL_152;
              }
              uint64_t v690 = (void *)*v690;
LABEL_859:
              if (*v690 != v689 - 1) {
                goto LABEL_152;
              }
              v698 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              int v699 = v696;
              v700 = *(uint64_t **)(v253 + 32);
              uint64_t v701 = *v700;
              uint64_t v702 = v700[1];
              uint64_t v703 = *v1052;
              if (*(_WORD *)(*v700 + 24) == 57)
              {
                uint64_t v704 = *(void *)(v703 + 832);
                if (v704) {
                  LOWORD(v704) = *(_WORD *)(v704 + 8);
                }
                unint64_t v705 = sub_1CCFDED5C(v703, 57, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], *(void *)(*(void *)(v701 + 32) + 40), *(void *)(*(void *)(v701 + 32) + 48), v697, **(void **)(v701 + 32), *(void *)(*(void *)(v701 + 32) + 8), v704);
              }
              else
              {
                uint64_t v713 = *(void *)(v703 + 832);
                if (v713) {
                  LOWORD(v713) = *(_WORD *)(v713 + 8);
                }
                unint64_t v705 = sub_1CCFDED5C(v703, 57, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v698, v696, v697, v701, v702, v713);
              }
              unint64_t v416 = v1052;
              uint64_t v491 = sub_1CD3D6058((void *)*v1052, (const llvm::APInt *)&v1069, **(void **)(v253 + 32), *(void *)(*(void *)(v253 + 32) + 8), (uint64_t)v698, v699, (uint64_t)v705, v706, **(void **)(v253 + 32), *(void *)(*(void *)(v253 + 32) + 8), HIDWORD(*(void *)(*(void *)(v253 + 32) + 8)), 0x14u);
              goto LABEL_727;
            case 175:
            case 177:
              uint64_t v112 = *(uint64_t **)(v5 + 32);
              uint64_t v111 = *(void *)(v5 + 40);
              uint64_t v113 = *(llvm **)v111;
              int v114 = *(void **)(v111 + 8);
              __src[0] = *(void **)v111;
              __src[1] = v114;
              uint64_t v115 = v112[5];
              int v116 = *(unsigned __int16 *)(v115 + 24);
              if (v116 != 35 && v116 != 11 || v113 == 6) {
                goto LABEL_152;
              }
              uint64_t v119 = *v112;
              uint64_t v120 = v112[6];
              int v121 = *(unsigned __int16 *)(*v112 + 24);
              if (v7 != 177) {
                goto LABEL_222;
              }
              if ((v121 - 171) > 2) {
                goto LABEL_222;
              }
              uint64_t v122 = *(void *)(v119 + 48);
              if (!v122) {
                goto LABEL_222;
              }
              int v123 = *((_DWORD *)v112 + 2);
              int v124 = 1;
              break;
            default:
              goto LABEL_152;
          }
          do
          {
            if (*(_DWORD *)(v122 + 8) == v123)
            {
              if (!v124) {
                goto LABEL_222;
              }
              --v124;
            }
            uint64_t v122 = *(void *)(v122 + 32);
          }
          while (v122);
          if (!v124)
          {
            unsigned int v125 = *(uint64_t **)(v119 + 32);
            uint64_t v126 = v125[5];
            int v127 = *(unsigned __int16 *)(v126 + 24);
            if (v127 == 35 || v127 == 11)
            {
              uint64_t v129 = *(void *)(v126 + 80);
              int v130 = (unint64_t *)(v129 + 24);
              if (*(_DWORD *)(v129 + 32) >= 0x41u) {
                int v130 = (unint64_t *)*v130;
              }
              uint64_t v131 = *(void *)(v115 + 80);
              int v132 = (void *)(v131 + 24);
              if (*(_DWORD *)(v131 + 32) >= 0x41u) {
                int v132 = (void *)*v132;
              }
              unint64_t v133 = *v130;
              uint64_t v134 = (void *)*v132;
              uint64_t v135 = v133 >> (char)v134;
              if (v133 >> (char)v134 << (char)v134 == v133)
              {
                uint64_t v677 = *(void *)(*v1052 + 832);
                if (v677) {
                  LOWORD(v677) = *(_WORD *)(v677 + 8);
                }
                unsigned int v678 = sub_1CCFDED5C(*v1052, 177, (const llvm::APInt *)&v1069, v113, (uint64_t)v114, *v125, v125[1], v14, v115, v120, v677);
                uint64_t v680 = v679;
                uint64_t v681 = sub_1CD7EBF14(*v1052, v135, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
                uint64_t v684 = *(void *)(*v1052 + 832);
                if (v684) {
                  __int16 v685 = *(_WORD *)(v684 + 8);
                }
                else {
                  __int16 v685 = 0;
                }
                int v247 = sub_1CCFDED5C(*v1052, *(unsigned __int16 *)(v119 + 24), (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v678, v680, v683, (uint64_t)v681, v682, v685);
                LODWORD(v246) = v707;
                unint64_t v416 = v1052;
                goto LABEL_728;
              }
            }
          }
LABEL_222:
          if (v121 != 176) {
            goto LABEL_152;
          }
          uint64_t v136 = *(void *)(*(void *)(v119 + 32) + 40);
          int v137 = *(unsigned __int16 *)(v136 + 24);
          if (v137 != 35 && v137 != 11) {
            goto LABEL_152;
          }
          uint64_t v139 = *(void *)(v136 + 80);
          unsigned int v140 = (void *)(v139 + 24);
          if (*(_DWORD *)(v139 + 32) >= 0x41u) {
            unsigned int v140 = (void *)*v140;
          }
          uint64_t v141 = (void *)*v140;
          if ((_BYTE)v113) {
            uint64_t v142 = sub_1CB87E200((unsigned __int8 *)__src);
          }
          else {
            uint64_t v142 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          }
          uint64_t v437 = v142;
          if (v143 == 1) {
          if (v141 != (void *)(v437 - 1))
          }
            goto LABEL_152;
          v1034 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
          int v1024 = v438;
          uint64_t v440 = sub_1CD7EBF14(*v1052, -1, (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
          __int16 v442 = 0;
          uint64_t v443 = *(void *)(*v1052 + 832);
          if (v443) {
            __int16 v442 = *(_WORD *)(v443 + 8);
          }
          int v444 = sub_1CCFDED5C(*v1052, *(unsigned __int16 *)(v5 + 24), (const llvm::APInt *)&v1069, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v440, v439, v441, v115, v120, v442);
          int v446 = v445;
          unint64_t v416 = v1052;
          uint64_t v447 = *v1052;
          unsigned int v448 = *(uint64_t **)(v119 + 32);
          uint64_t v426 = v448[1];
          uint64_t v1016 = *v448;
          uint64_t v449 = (llvm **)(v444[5] + 16 * v445);
          int v450 = *v449;
          uint64_t v451 = (uint64_t)v449[1];
          uint64_t v986 = sub_1CD7EE368((void *)*v1052, 0x14u);
          LODWORD(v990) = v452;
          uint64_t v435 = v1016;
          uint64_t v982 = (uint64_t)v1034;
          int v984 = v1024;
          unint64_t v978 = v444;
          int v980 = v446;
          uint64_t v974 = (uint64_t)v1034;
          int v976 = v1024;
          char v431 = (void *)v447;
          uint64_t v432 = 192;
          unint64_t v433 = v450;
          uint64_t v434 = v451;
          goto LABEL_605;
        }
        if (v7 != 192)
        {
          if (v7 == 201)
          {
            int v300 = *(unsigned int **)(v5 + 32);
            uint64_t v301 = *(uint64_t **)v300;
            int v302 = *(unsigned __int16 *)(*(void *)v300 + 24);
            if (v302 == 46)
            {
              uint64_t v303 = *(void *)(*(void *)v301[4] + 80);
              uint64_t v304 = (void *)(v303 + 24);
              if (*(_DWORD *)(v303 + 32) >= 0x41u) {
                uint64_t v304 = (void *)*v304;
              }
              int v305 = *(_DWORD *)v304;
              BOOL v306 = (v305 - 2578) > 0x19 || ((1 << (v305 - 18)) & 0x3FC0001) == 0;
              if (!v306 || (v305 - 2501) < 8) {
                goto LABEL_152;
              }
              unsigned int v307 = v305 - 2109;
              BOOL v61 = v307 > 0x3B;
              uint64_t v308 = (1 << v307) & 0x800000001000003;
              if (!v61 && v308 != 0) {
                goto LABEL_152;
              }
            }
            else if ((v302 - 435) < 2)
            {
              goto LABEL_152;
            }
            uint64_t v310 = v300[2];
            uint64_t v311 = v301[6];
            if (v311)
            {
              int v312 = 1;
              while (1)
              {
                if (*(_DWORD *)(v311 + 8) == v310)
                {
                  if (!v312)
                  {
                    int v436 = 0;
                    goto LABEL_631;
                  }
                  --v312;
                }
                uint64_t v311 = *(void *)(v311 + 32);
                if (!v311) {
                  goto LABEL_597;
                }
              }
            }
            int v312 = 1;
LABEL_597:
            int v436 = 1;
LABEL_631:
            uint64_t v493 = **(unsigned __int8 **)(v5 + 40);
            if (v436 && !v312 && v493 == 4)
            {
              if (*(unsigned char *)(v301[5] + 16 * v310) == 5 && (v302 - 171) <= 6 && v302 != 174) {
                goto LABEL_152;
              }
            }
            else if (v493 == 5)
            {
              uint64_t v494 = v301[5];
              if (*(void *)v494 == 6)
              {
                uint64_t v660 = *((void *)v300 + 1);
                if (v302 == 9)
                {
                  uint64_t v301 = sub_1CD3D6670((void *)*v1052, *v1052 + 112, 0, (const llvm::APInt *)&v1069, *((_DWORD *)v301 + 19), *(llvm **)v494, *(void *)(v494 + 8));
                  LODWORD(v660) = v661;
                }
                uint64_t v686 = sub_1CD8015C0(*v1052, 25, (const llvm::APInt *)&v1069, (llvm *)5, 0, (uint64_t)v301, v660);
                sub_1CD800DA0(*v1052, v5, 0, (uint64_t)v686, v687);
                sub_1CD808A6C((uint64_t)v686);
                uint64_t v493 = **(unsigned __int8 **)(v5 + 40);
              }
            }
            if (v493 != 4) {
              goto LABEL_152;
            }
            uint64_t v495 = *(uint64_t ***)(v5 + 32);
            v496 = *v495;
            uint64_t v497 = (*v495)[5];
            if ((unint64_t)*(void *)v497 - 5 > 1) {
              goto LABEL_152;
            }
            uint64_t v498 = v495[1];
            unint64_t v416 = v1052;
            if (*((_WORD *)v496 + 12) == 9)
            {
              v496 = sub_1CD3D6670((void *)*v1052, *v1052 + 112, 0, (const llvm::APInt *)&v1069, *((_DWORD *)v496 + 19), *(llvm **)v497, *(void *)(v497 + 8));
              LODWORD(v498) = v499;
            }
            uint64_t v491 = sub_1CD8015C0(*v1052, 1, (const llvm::APInt *)&v1069, (llvm *)4, 0, (uint64_t)v496, (int)v498);
            goto LABEL_727;
          }
          if (v7 != 260) {
            goto LABEL_152;
          }
          uint64_t v190 = *(void *)(v5 + 32);
          LODWORD(v1071) = *(_DWORD *)(*(void *)(v190 + 40) + 76);
          *(_OWORD *)__src = *(_OWORD *)(v190 + 80);
          long long v1085 = *(_OWORD *)(v190 + 120);
          if (sub_1CB9C3048(v1, __src, &v1085, (int *)&v1071))
          {
            unint64_t v416 = v1052;
            int v481 = (void *)*v1052;
            int v483 = *(uint64_t **)(v5 + 32);
            uint64_t v482 = *(void *)(v5 + 40);
            BOOL v484 = *(llvm **)v482;
            uint64_t v485 = *(void *)(v482 + 8);
            uint64_t v486 = *v483;
            uint64_t v487 = v483[1];
            uint64_t v488 = sub_1CD7EE368((void *)*v1052, v1071);
            uint64_t v491 = sub_1CD7F6564(v481, (const char *)0x104, (const llvm::APInt *)&v1069, v484, v485, v486, v487, v490, v488, v489, (uint64_t)__src[0], (int)__src[1], v1085, SDWORD2(v1085), *(void *)(*(void *)(v5 + 32) + 160), *(void *)(*(void *)(v5 + 32) + 168));
LABEL_727:
            int v247 = v491;
            LODWORD(v246) = v492;
LABEL_728:
            uint64_t v248 = *v416;
            goto LABEL_729;
          }
          int v191 = *(unsigned __int16 *)(v1085 + 24);
          if (v191 != 35 && v191 != 11) {
            goto LABEL_152;
          }
          if (v1071 == 12 || v1071 == 20)
          {
            uint64_t v317 = *(void *)(v1085 + 80);
            long long v318 = (void *)(v317 + 24);
            unsigned int v319 = *(_DWORD *)(v317 + 32);
            if (v319 >= 0x41) {
              long long v318 = (void *)*v318;
            }
            if (*v318 != 256) {
              goto LABEL_152;
            }
            if (v1071 == 12) {
              int v586 = 13;
            }
            else {
              int v586 = 21;
            }
            unsigned int v1039 = v586;
            unint64_t v416 = v1052;
            uint64_t v587 = *(void *)(v1085 + 40) + 16 * DWORD2(v1085);
            uint64_t v588 = sub_1CD7EBF14(*v1052, 255, (const llvm::APInt *)&v1069, *(llvm **)v587, *(void *)(v587 + 8), 0, 0);
            *(void *)&long long v1085 = v588;
            DWORD2(v1085) = v589;
            uint64_t v590 = *v1052;
            uint64_t v592 = *(uint64_t **)(v5 + 32);
            uint64_t v591 = *(llvm ***)(v5 + 40);
            uint64_t v593 = *v591;
            uint64_t v594 = (uint64_t)v591[1];
            uint64_t v596 = *v592;
            uint64_t v595 = v592[1];
            uint64_t v597 = sub_1CD7EE368((void *)*v1052, v1039);
            uint64_t v598 = *(void *)(v5 + 32);
            uint64_t v986 = *(void *)(v598 + 160);
            uint64_t v990 = *(void *)(v598 + 168);
            uint64_t v982 = (uint64_t)v588;
            int v984 = DWORD2(v1085);
            unint64_t v978 = (uint64_t *)__src[0];
            int v980 = (int)__src[1];
            uint64_t v974 = v597;
            int v976 = v599;
            char v431 = (void *)v590;
            uint64_t v432 = 260;
            unint64_t v433 = v593;
            uint64_t v434 = v594;
            uint64_t v435 = v596;
            int v453 = v595;
            goto LABEL_726;
          }
          if (v1071 != 18) {
            goto LABEL_152;
          }
          uint64_t v192 = *(void *)(v1085 + 80);
          unsigned int v193 = *(_DWORD *)(v192 + 32);
          uint64_t v320 = v193 > 0x40
               ? **(void **)(v192 + 24)
               : (uint64_t)(*(void *)(v192 + 24) << -(char)v193) >> -(char)v193;
          if (v320 != -1) {
            goto LABEL_152;
          }
          LODWORD(v1071) = 19;
          unint64_t v416 = v1052;
          uint64_t v417 = *(void *)(v1085 + 40) + 16 * DWORD2(v1085);
          unint64_t v418 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, *(llvm **)v417, *(void *)(v417 + 8), 0, 0);
          *(void *)&long long v1085 = v418;
          DWORD2(v1085) = v419;
          uint64_t v420 = *v1052;
          uint64_t v422 = *(uint64_t **)(v5 + 32);
          uint64_t v421 = *(llvm ***)(v5 + 40);
          unint64_t v423 = *v421;
          uint64_t v424 = (uint64_t)v421[1];
          uint64_t v425 = *v422;
          uint64_t v426 = v422[1];
          uint64_t v427 = sub_1CD7EE368((void *)*v1052, 0x13u);
          uint64_t v429 = *(void *)(v5 + 32);
          uint64_t v986 = *(void *)(v429 + 160);
          uint64_t v990 = *(void *)(v429 + 168);
          uint64_t v982 = (uint64_t)v418;
          int v984 = DWORD2(v1085);
          unint64_t v978 = (uint64_t *)__src[0];
          int v980 = (int)__src[1];
          uint64_t v974 = v427;
          int v976 = v430;
          char v431 = (void *)v420;
          uint64_t v432 = 260;
          unint64_t v433 = v423;
          uint64_t v434 = v424;
          uint64_t v435 = v425;
LABEL_605:
          int v453 = v426;
LABEL_726:
          uint64_t v491 = sub_1CD7F6564(v431, (const char *)v432, (const llvm::APInt *)&v1069, v433, v434, v435, v453, v428, v974, v976, (uint64_t)v978, v980, v982, v984, v986, v990);
          goto LABEL_727;
        }
        uint64_t v280 = *(void *)(v5 + 32);
        *(_OWORD *)__src = *(_OWORD *)v280;
        long long v1085 = *(_OWORD *)(v280 + 40);
        LODWORD(v1071) = *(_DWORD *)(*(void *)(v280 + 160) + 76);
        if (sub_1CB9C3048(v1, __src, &v1085, (int *)&v1071))
        {
          uint64_t v471 = *v1052;
          v1033 = __src[0];
          uint64_t v1017 = v1085;
          int v1023 = (int)__src[1];
          int v1006 = DWORD2(v1085);
          unsigned int v472 = *(void **)(v5 + 32);
          uint64_t v473 = v472[10];
          uint64_t v474 = v472[11];
          uint64_t v475 = v472[15];
          uint64_t v476 = v472[16];
          int v477 = (llvm **)(*(void *)(v473 + 40) + 16 * v474);
          uint64_t v478 = *v477;
          uint64_t v479 = (uint64_t)v477[1];
          uint64_t v985 = sub_1CD7EE368((void *)*v1052, v1071);
          int v989 = v480;
          uint64_t v981 = v475;
          int v983 = v476;
          uint64_t v977 = v473;
          int v979 = v474;
          uint64_t v973 = v1017;
          int v975 = v1006;
          int v414 = (void *)v471;
          uint64_t v413 = v478;
          uint64_t v415 = v479;
        }
        else
        {
          int v281 = *(unsigned __int16 *)(v1085 + 24);
          if (v281 != 35 && v281 != 11) {
            goto LABEL_152;
          }
          if (v1071 == 12 || v1071 == 20)
          {
            uint64_t v313 = *(void *)(v1085 + 80);
            BOOL v314 = (void *)(v313 + 24);
            unsigned int v315 = *(_DWORD *)(v313 + 32);
            if (v315 >= 0x41) {
              BOOL v314 = (void *)*v314;
            }
            if (*v314 != 256) {
              goto LABEL_152;
            }
            if (v1071 == 12) {
              int v572 = 13;
            }
            else {
              int v572 = 21;
            }
            unsigned int v1038 = v572;
            uint64_t v573 = *(void *)(v1085 + 40) + 16 * DWORD2(v1085);
            uint64_t v574 = sub_1CD7EBF14(*v1052, 255, (const llvm::APInt *)&v1069, *(llvm **)v573, *(void *)(v573 + 8), 0, 0);
            *(void *)&long long v1085 = v574;
            DWORD2(v1085) = v575;
            uint64_t v576 = (void *)*v1052;
            int v1021 = (int)__src[1];
            v1028 = __src[0];
            int v1011 = v575;
            uint64_t v577 = *(void **)(v5 + 32);
            uint64_t v578 = v577[10];
            uint64_t v579 = v577[11];
            uint64_t v580 = v577[15];
            uint64_t v581 = v577[16];
            uint64_t v582 = *(void *)(v578 + 40) + 16 * v579;
            uint64_t v583 = *(void *)(v582 + 8);
            v1001 = *(llvm **)v582;
            uint64_t v987 = sub_1CD7EE368((void *)*v1052, v1038);
            int v469 = sub_1CD7F6564(v576, (const char *)0xC0, (const llvm::APInt *)&v1069, v1001, v583, (uint64_t)v1028, v1021, v585, (uint64_t)v574, v1011, v578, v579, v580, v581, v987, v584);
            goto LABEL_677;
          }
          if (v1071 != 18) {
            goto LABEL_152;
          }
          uint64_t v283 = *(void *)(v1085 + 80);
          unsigned int v284 = *(_DWORD *)(v283 + 32);
          uint64_t v316 = v284 > 0x40
               ? **(void **)(v283 + 24)
               : (uint64_t)(*(void *)(v283 + 24) << -(char)v284) >> -(char)v284;
          if (v316 != -1) {
            goto LABEL_152;
          }
          LODWORD(v1071) = 19;
          uint64_t v400 = *(void *)(v1085 + 40) + 16 * DWORD2(v1085);
          uint64_t v401 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, *(llvm **)v400, *(void *)(v400 + 8), 0, 0);
          *(void *)&long long v1085 = v401;
          DWORD2(v1085) = v402;
          uint64_t v403 = *v1052;
          v1033 = __src[0];
          int v1015 = v402;
          int v1023 = (int)__src[1];
          uint64_t v404 = *(void **)(v5 + 32);
          uint64_t v405 = v404[10];
          uint64_t v406 = v404[11];
          uint64_t v407 = v404[15];
          uint64_t v408 = v404[16];
          unint64_t v409 = (llvm **)(*(void *)(v405 + 40) + 16 * v406);
          uint64_t v410 = (uint64_t)v409[1];
          v1005 = *v409;
          uint64_t v985 = sub_1CD7EE368((void *)*v1052, 0x13u);
          int v989 = v411;
          uint64_t v981 = v407;
          int v983 = v408;
          uint64_t v977 = v405;
          int v979 = v406;
          uint64_t v413 = v1005;
          uint64_t v973 = (uint64_t)v401;
          int v975 = v1015;
          int v414 = (void *)v403;
          uint64_t v415 = v410;
        }
        int v469 = sub_1CD7F6564(v414, (const char *)0xC0, (const llvm::APInt *)&v1069, v413, v415, (uint64_t)v1033, v1023, v412, v973, v975, v977, v979, v981, v983, v985, v989);
LABEL_677:
        int v247 = v469;
        LODWORD(v246) = v470;
        uint64_t v248 = *v1052;
LABEL_729:
        uint64_t v249 = v5;
        int v250 = 0;
LABEL_730:
        uint64_t v600 = (uint64_t)v247;
LABEL_731:
        sub_1CD800DA0(v248, v249, v250, v600, v246);
        sub_1CD808A6C((uint64_t)v247);
        goto LABEL_152;
      }
      if (v7 <= 95)
      {
        if ((v7 - 56) >= 2)
        {
          if (v7 != 47) {
            goto LABEL_152;
          }
          uint64_t v242 = *(void *)(v5 + 32);
          uint64_t v243 = *(void *)(*(void *)(v242 + 40) + 80);
          uint64_t v244 = (void *)(v243 + 24);
          if (*(_DWORD *)(v243 + 32) >= 0x41u) {
            uint64_t v244 = (void *)*v244;
          }
          if ((*(_DWORD *)v244 - 1282) > 0x18F) {
            goto LABEL_152;
          }
          for (uint64_t k = *(void *)(v5 + 48); k; uint64_t k = *(void *)(k + 32))
          {
            if (!*(_DWORD *)(k + 8)) {
              goto LABEL_152;
            }
          }
          int v247 = *(uint64_t **)v242;
          uint64_t v246 = *(void *)(v242 + 8);
          uint64_t v248 = *v1052;
          uint64_t v249 = v5;
          int v250 = 1;
          goto LABEL_730;
        }
        uint64_t v144 = 0;
        uint64_t v145 = *(void *)(v5 + 40);
        uint64_t v146 = *(llvm **)v145;
        uint64_t v147 = *(void *)(v145 + 8);
        int v148 = *(unsigned __int8 *)(*(void *)(v1 + 480) + 318);
        uint64_t v149 = *(void *)v145;
        char v150 = 1;
        do
        {
          char v151 = v150;
          uint64_t v152 = (uint64_t *)(*(void *)(v5 + 32) + 40 * v144);
          uint64_t v153 = *v152;
          if (*(_WORD *)(*v152 + 24) == 171)
          {
            uint64_t v154 = *(void *)(v153 + 48);
            if (v154)
            {
              uint64_t v155 = v152[1];
              int v156 = 1;
              do
              {
                if (*(_DWORD *)(v154 + 8) == v155)
                {
                  if (!v156) {
                    goto LABEL_243;
                  }
                  --v156;
                }
                uint64_t v154 = *(void *)(v154 + 32);
              }
              while (v154);
              if (!v156)
              {
                uint64_t v157 = *(uint64_t **)(v153 + 32);
                uint64_t v158 = v157[5];
                int v159 = *(unsigned __int16 *)(v158 + 24);
                if (v159 == 35 || v159 == 11)
                {
                  uint64_t v161 = *(void *)(v158 + 80);
                  uint64_t v162 = (void *)(v161 + 24);
                  if (*(_DWORD *)(v161 + 32) >= 0x41u) {
                    uint64_t v162 = (void *)*v162;
                  }
                  uint64_t v163 = *v157;
                  if (*(_WORD *)(*v157 + 24) == 175)
                  {
                    uint64_t v164 = *(void *)(v163 + 48);
                    if (v164)
                    {
                      unsigned int v165 = *(_DWORD *)v162;
                      int v166 = *((_DWORD *)v157 + 2);
                      int v167 = 1;
                      do
                      {
                        if (*(_DWORD *)(v164 + 8) == v166)
                        {
                          if (!v167) {
                            goto LABEL_243;
                          }
                          --v167;
                        }
                        uint64_t v164 = *(void *)(v164 + 32);
                      }
                      while (v164);
                      if (!v167)
                      {
                        uint64_t v168 = *(uint64_t **)(v163 + 32);
                        uint64_t v169 = v168[5];
                        int v170 = *(unsigned __int16 *)(v169 + 24);
                        if (v170 == 35 || v170 == 11)
                        {
                          uint64_t v172 = *(void *)(v169 + 80);
                          uint64_t v173 = (unsigned int *)(v172 + 24);
                          if (*(_DWORD *)(v172 + 32) >= 0x41u) {
                            uint64_t v173 = *(unsigned int **)v173;
                          }
                          uint64_t v174 = *v1052;
                          uint64_t v1003 = *v168;
                          uint64_t v1013 = *v173;
                          uint64_t v997 = v168[1];
                          v1031 = v146;
                          uint64_t v1022 = v147;
                          uint64_t v175 = sub_1CD7EBF14(*v1052, v165 >> v1013, (const llvm::APInt *)&v1069, v146, v147, 0, 0);
                          uint64_t v178 = *(void *)(v174 + 832);
                          if (v178) {
                            LOWORD(v178) = *(_WORD *)(v178 + 8);
                          }
                          v1004 = sub_1CCFDED5C(v174, 171, (const llvm::APInt *)&v1069, v1031, v1022, v1003, v997, v177, (uint64_t)v175, v176, v178);
                          uint64_t v998 = v179;
                          uint64_t v180 = *v1052;
                          uint64_t v181 = sub_1CD7EBF14(*v1052, v1013, (const llvm::APInt *)&v1069, v1031, v1022, 0, 0);
                          uint64_t v184 = *(void *)(v180 + 832);
                          if (v184) {
                            LOWORD(v184) = *(_WORD *)(v184 + 8);
                          }
                          uint64_t v185 = sub_1CCFDED5C(v180, 175, (const llvm::APInt *)&v1069, v1031, v1022, (uint64_t)v1004, v998, v183, (uint64_t)v181, v182, v184);
                          int v187 = v186;
                          uint64_t v188 = v153;
                          uint64_t v189 = (uint64_t)v185;
                          sub_1CD800DA0(*v1052, v188, v155, (uint64_t)v185, v187);
                          sub_1CD808A6C(v189);
                          uint64_t v147 = v1022;
                          uint64_t v146 = v1031;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_243:
          char v150 = 0;
          uint64_t v144 = 1;
        }
        while ((v151 & 1) != 0);
        if (v149 == 6) {
          unsigned int v225 = 4;
        }
        else {
          unsigned int v225 = 8;
        }
        if (v148) {
          unint64_t v226 = 4;
        }
        else {
          unint64_t v226 = v225;
        }
        uint64_t v227 = *(uint64_t **)(v5 + 32);
        uint64_t v229 = *v227;
        unint64_t v228 = v227[1];
        uint64_t v230 = v227[5];
        unint64_t v231 = v227[6];
        if (*(_WORD *)(*v227 + 24) != 175) {
          goto LABEL_339;
        }
        uint64_t v232 = *(uint64_t **)(v229 + 32);
        if (v149 == 6 && (*(_WORD *)(*v232 + 24) & 0xFFFE) != 0xC6)
        {
          int v240 = *(unsigned __int16 *)(v230 + 24);
          if (v240 != 175) {
            goto LABEL_467;
          }
          BOOL v239 = 0;
          goto LABEL_455;
        }
        uint64_t v233 = v232[5];
        int v234 = *(unsigned __int16 *)(v233 + 24);
        if (v234 == 35 || v234 == 11)
        {
          uint64_t v236 = *(void *)(v233 + 80);
          uint64_t v237 = (void *)(v236 + 24);
          if (*(_DWORD *)(v236 + 32) > 0x40u) {
            uint64_t v237 = (void *)*v237;
          }
          if (*v237 > (unint64_t)v226)
          {
            uint64_t v1008 = *v232;
            unint64_t v1019 = v228;
            uint64_t v995 = *v1052;
            uint64_t v999 = v232[1];
            v1036 = v146;
            uint64_t v1026 = v147;
            uint64_t v551 = sub_1CD7EBF14(*v1052, (1 << *v237), (const llvm::APInt *)&v1069, v146, v147, 0, 0);
            uint64_t v554 = *(void *)(v995 + 832);
            if (v554) {
              LOWORD(v554) = *(_WORD *)(v554 + 8);
            }
            v1009 = sub_1CCFDED5C(v995, 58, (const llvm::APInt *)&v1069, v1036, v1026, v1008, v999, v553, (uint64_t)v551, v552, v554);
            unsigned int v1000 = v555;
            sub_1CD800DA0(*v1052, v229, v1019, (uint64_t)v1009, v555);
            sub_1CD808A6C((uint64_t)v1009);
            unint64_t v228 = v1019 & 0xFFFFFFFF00000000 | v1000;
            uint64_t v556 = *(void *)(v233 + 80);
            uint64_t v237 = (void *)(v556 + 24);
            if (*(_DWORD *)(v556 + 32) >= 0x41u) {
              uint64_t v237 = (void *)*v237;
            }
            char v238 = 1;
            uint64_t v229 = (uint64_t)v1009;
            uint64_t v146 = v1036;
            uint64_t v147 = v1026;
          }
          else
          {
            char v238 = 0;
          }
          BOOL v239 = *v237 <= (unint64_t)v226;
        }
        else
        {
LABEL_339:
          BOOL v239 = 0;
          char v238 = 0;
        }
        int v240 = *(unsigned __int16 *)(v230 + 24);
        if ((v238 & 1) != 0 || v240 != 175) {
          goto LABEL_467;
        }
        if (v149 != 6)
        {
          uint64_t v241 = *(uint64_t **)(v230 + 32);
LABEL_456:
          uint64_t v321 = v241[5];
          int v322 = *(unsigned __int16 *)(v321 + 24);
          if (v322 != 35 && v322 != 11) {
            goto LABEL_466;
          }
          uint64_t v324 = *(void *)(v321 + 80);
          v325 = (void **)(v324 + 24);
          unsigned int v326 = *(_DWORD *)(v324 + 32);
          uint64_t v327 = v325;
          if (v326 >= 0x41) {
            uint64_t v327 = *v325;
          }
          if (*v327 <= (unint64_t)v226 && (!v239 || !*(unsigned char *)(*(void *)(v1 + 480) + 318))) {
            goto LABEL_466;
          }
          unint64_t v1018 = v228;
          if (v326 >= 0x41) {
            v325 = (void **)*v325;
          }
          uint64_t v535 = *v1052;
          uint64_t v1025 = *v241;
          uint64_t v1007 = v241[1];
          v1035 = v146;
          uint64_t v536 = v147;
          uint64_t v537 = sub_1CD7EBF14(*v1052, (1 << *(_DWORD *)v325), (const llvm::APInt *)&v1069, v146, v147, 0, 0);
          uint64_t v540 = *(void *)(v535 + 832);
          if (v540) {
            LOWORD(v540) = *(_WORD *)(v540 + 8);
          }
          unint64_t v541 = sub_1CCFDED5C(v535, 58, (const llvm::APInt *)&v1069, v1035, v536, v1025, v1007, v539, (uint64_t)v537, v538, v540);
          int v543 = v542;
          uint64_t v544 = v230;
          unsigned int v545 = v543;
          sub_1CD800DA0(*v1052, v544, v231, (uint64_t)v541, v543);
          sub_1CD808A6C((uint64_t)v541);
          uint64_t v147 = v536;
          uint64_t v146 = v1035;
          unint64_t v231 = v231 & 0xFFFFFFFF00000000 | v545;
          int v240 = *((unsigned __int16 *)v541 + 12);
          uint64_t v230 = (uint64_t)v541;
          unint64_t v228 = v1018;
LABEL_467:
          if (v7 == 56)
          {
            if (v240 != 11 && v240 != 35 && *(_WORD *)(v229 + 24) == 175)
            {
              uint64_t v328 = *(void *)(*(void *)(v229 + 32) + 40);
              int v329 = *(unsigned __int16 *)(v328 + 24);
              if (v329 == 35 || v329 == 11)
              {
                uint64_t v331 = *(void *)(v328 + 80);
                int v332 = (void *)(v331 + 24);
                if (*(_DWORD *)(v331 + 32) >= 0x41u) {
                  int v332 = (void *)*v332;
                }
                if (*v332 <= (unint64_t)v226)
                {
                  if (v240 != 175) {
                    goto LABEL_749;
                  }
                  uint64_t v333 = *(void *)(*(void *)(v230 + 32) + 40);
                  int v334 = *(unsigned __int16 *)(v333 + 24);
                  if (v334 != 35 && v334 != 11) {
                    goto LABEL_749;
                  }
                  uint64_t v336 = *(void *)(v333 + 80);
                  uint64_t v337 = (unint64_t *)(v336 + 24);
                  if (*(_DWORD *)(v336 + 32) >= 0x41u) {
                    uint64_t v337 = (unint64_t *)*v337;
                  }
                  if (*v337 > v226)
                  {
LABEL_749:
                    uint64_t v614 = *(void *)(*v1052 + 832);
                    if (v614) {
                      LOWORD(v614) = *(_WORD *)(v614 + 8);
                    }
                    int v469 = sub_1CCFDED5C(*v1052, 56, (const llvm::APInt *)&v1069, v146, v147, v230, v231, v14, v229, v228, v614);
                    goto LABEL_677;
                  }
                }
              }
            }
            uint64_t v338 = *(void *)(v5 + 32);
            uint64_t v339 = *(void *)(v338 + 40);
            int v340 = *(unsigned __int16 *)(v339 + 24);
            if (v340 == 35 || v340 == 11)
            {
              uint64_t v342 = *(void *)(v339 + 80);
              unsigned int v343 = *(_DWORD *)(v342 + 32);
              unint64_t v344 = v343 > 0x40
                   ? **(void **)(v342 + 24)
                   : (uint64_t)(*(void *)(v342 + 24) << -(char)v343) >> -(char)v343;
              if (v344 >= 0x8000000000000001)
              {
                uint64_t v354 = *(void *)v338;
                if (*(_WORD *)(*(void *)v338 + 24) != 175) {
                  goto LABEL_624;
                }
                uint64_t v355 = *(void *)(*(void *)(v354 + 32) + 40);
                int v356 = *(unsigned __int16 *)(v355 + 24);
                if (v356 != 35 && v356 != 11) {
                  goto LABEL_624;
                }
                uint64_t v358 = *(void *)(v355 + 80);
                v359 = (void *)(v358 + 24);
                if (*(_DWORD *)(v358 + 32) >= 0x41u) {
                  v359 = (void *)*v359;
                }
                if (*v359 > 4uLL
                  || (v360 = v146, v361 = v147, v362 = sub_1CB9C2E80(v354), v147 = v361, uint64_t v146 = v360, (v362 & 1) == 0))
                {
LABEL_624:
                  uint64_t v461 = -(uint64_t)v344;
                  uint64_t v462 = v146;
                  uint64_t v463 = v147;
                  uint64_t v464 = sub_1CD7EBF14(*v1052, v461, (const llvm::APInt *)&v1069, v146, v147, 0, 0);
                  __int16 v467 = 0;
                  uint64_t v468 = *(void *)(*v1052 + 832);
                  if (v468) {
                    __int16 v467 = *(_WORD *)(v468 + 8);
                  }
                  int v469 = sub_1CCFDED5C(*v1052, 57, (const llvm::APInt *)&v1069, v462, v463, **(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), v466, (uint64_t)v464, v465, v467);
                  goto LABEL_677;
                }
              }
            }
          }
          else
          {
            uint64_t v338 = *(void *)(v5 + 32);
            if (v7 == 57)
            {
              uint64_t v345 = *(void *)(v338 + 40);
              if (*(_WORD *)(v345 + 24) == 58)
              {
                uint64_t v346 = *(uint64_t **)(v345 + 32);
                uint64_t v347 = v346[5];
                int v348 = *(unsigned __int16 *)(v347 + 24);
                BOOL v349 = v348 == 35 || v348 == 11;
                if (v349 && (v146 & 0xFE) == 4)
                {
                  uint64_t v351 = *(void *)(v347 + 80);
                  unsigned int v352 = *(_DWORD *)(v351 + 32);
                  if (v352 > 0x40) {
                    uint64_t v353 = **(void **)(v351 + 24);
                  }
                  else {
                    uint64_t v353 = (uint64_t)(*(void *)(v351 + 24) << -(char)v352) >> -(char)v352;
                  }
                  uint64_t v643 = *v1052;
                  uint64_t v645 = *v346;
                  uint64_t v644 = v346[1];
                  unint64_t v646 = v146;
                  uint64_t v647 = v147;
                  uint64_t v648 = sub_1CD7EBF14(*v1052, -v353, (const llvm::APInt *)&v1069, v146, v147, 0, 0);
                  __int16 v651 = 0;
                  uint64_t v652 = *(void *)(v643 + 832);
                  if (v652) {
                    __int16 v651 = *(_WORD *)(v652 + 8);
                  }
                  uint64_t v654 = sub_1CCFDED5C(v643, 58, (const llvm::APInt *)&v1069, v646, v647, v645, v644, v650, (uint64_t)v648, v649, v651);
                  uint64_t v656 = *(uint64_t **)(v5 + 32);
                  uint64_t v657 = *v656;
                  uint64_t v658 = v656[1];
                  uint64_t v659 = *(void *)(*v1052 + 832);
                  if (v659) {
                    LOWORD(v659) = *(_WORD *)(v659 + 8);
                  }
                  int v469 = sub_1CCFDED5C(*v1052, 56, (const llvm::APInt *)&v1069, v646, v647, (uint64_t)v654, v653, v655, v657, v658, v659);
                  goto LABEL_677;
                }
              }
            }
          }
          int v363 = v146;
          if (v146 == 6)
          {
            uint64_t v364 = *(void *)(v338 + 40);
            if (*(_WORD *)(v364 + 24) != 175) {
              goto LABEL_529;
            }
            uint64_t v365 = *(void *)(*(void *)(v364 + 32) + 40);
            int v366 = *(unsigned __int16 *)(v365 + 24);
            if (v366 != 35 && v366 != 11) {
              goto LABEL_529;
            }
            uint64_t v368 = *(void *)(v365 + 80);
            uint64_t v369 = (void *)(v368 + 24);
            if (*(_DWORD *)(v368 + 32) >= 0x41u) {
              uint64_t v369 = (void *)*v369;
            }
            if (*v369 >= 5uLL)
            {
LABEL_529:
              if (v7 == 56)
              {
                uint64_t v370 = *(void *)v338;
                int v371 = *(unsigned __int16 *)(*(void *)v338 + 24);
                if (v371 == 175)
                {
                  uint64_t v372 = *(void *)(*(void *)(v370 + 32) + 40);
                  int v373 = *(unsigned __int16 *)(v372 + 24);
                  if (v373 == 35 || v373 == 11)
                  {
                    uint64_t v375 = *(void *)(v372 + 80);
                    int v376 = (void *)(v375 + 24);
                    if (*(_DWORD *)(v375 + 32) >= 0x41u) {
                      int v376 = (void *)*v376;
                    }
                    if (*v376 < 5uLL) {
                      goto LABEL_555;
                    }
                  }
                  int v371 = 175;
                }
              }
              else
              {
                uint64_t v370 = *(void *)v338;
                int v371 = *(unsigned __int16 *)(*(void *)v338 + 24);
              }
              BOOL v377 = v7 == 56;
              BOOL v378 = v371 == 175;
              if (v377 && v378) {
                uint64_t v379 = v370;
              }
              else {
                uint64_t v379 = *(void *)(v338 + 40);
              }
              if (v377 && v378) {
                LODWORD(v380) = *(_DWORD *)(v338 + 8);
              }
              else {
                uint64_t v380 = *(void *)(v338 + 48);
              }
              if (*(_WORD *)(v379 + 24) == 175)
              {
                uint64_t v381 = *(void *)(v379 + 48);
                if (v381)
                {
                  int v382 = 1;
                  do
                  {
                    if (*(_DWORD *)(v381 + 8) == v380)
                    {
                      if (!v382) {
                        goto LABEL_555;
                      }
                      --v382;
                    }
                    uint64_t v381 = *(void *)(v381 + 32);
                  }
                  while (v381);
                  if (!v382)
                  {
                    uint64_t v500 = *(void *)(*(void *)(v379 + 32) + 40);
                    int v501 = *(unsigned __int16 *)(v500 + 24);
                    if (v501 == 35 || v501 == 11)
                    {
                      uint64_t v503 = *(void *)(v500 + 80);
                      if (*(_DWORD *)(v503 + 32) > 0x40u)
                      {
                        uint64_t v504 = **(void **)(v503 + 24);
                        if ((unint64_t)(v504 - 5) > 3) {
                          goto LABEL_555;
                        }
                      }
                      else
                      {
                        uint64_t v504 = *(void *)(v503 + 24);
                        if ((unint64_t)(v504 - 5) >= 4) {
                          goto LABEL_555;
                        }
                      }
                      uint64_t v1027 = v147;
                      v1037 = v146;
                      uint64_t v558 = sub_1CD7EBF14(*v1052, v504 - 4, (const llvm::APInt *)&v1069, (llvm *)5, 0, 0, 0);
                      uint64_t v560 = v559;
                      v561 = sub_1CD7EBF14(*v1052, 4, (const llvm::APInt *)&v1069, (llvm *)5, 0, 0, 0);
                      uint64_t v1010 = v563;
                      uint64_t v1020 = (uint64_t)v561;
                      __int16 v564 = 0;
                      uint64_t v565 = *(void *)(*v1052 + 832);
                      if (v565) {
                        __int16 v564 = *(_WORD *)(v565 + 8);
                      }
                      uint64_t v567 = sub_1CCFDED5C(*v1052, 175, (const llvm::APInt *)&v1069, v1037, v1027, **(void **)(v379 + 32), *(void *)(*(void *)(v379 + 32) + 8), v562, (uint64_t)v558, v560, v564);
                      uint64_t v569 = *(void *)(*v1052 + 832);
                      if (v569) {
                        LOWORD(v569) = *(_WORD *)(v569 + 8);
                      }
                      uint64_t v570 = sub_1CCFDED5C(*v1052, 175, (const llvm::APInt *)&v1069, v1037, v1027, (uint64_t)v567, v566, v568, v1020, v1010, v569);
                      sub_1CD800DA0(*v1052, v379, v380, (uint64_t)v570, v571);
                      sub_1CD808A6C((uint64_t)v570);
                      uint64_t v147 = v1027;
                      uint64_t v146 = v1037;
                      uint64_t v338 = *(void *)(v5 + 32);
                    }
                  }
                }
              }
            }
          }
LABEL_555:
          int v383 = *(unsigned __int16 *)(*(void *)(v338 + 40) + 24);
          if (v383 == 35 || v383 == 11) {
            uint64_t v385 = *(void *)(v338 + 40);
          }
          else {
            uint64_t v385 = 0;
          }
          if (v7 != 56
            || !*(unsigned char *)(*(void *)(v1 + 480) + 318)
            || !v385
            || *(_WORD *)(*(void *)v338 + 24) == 58)
          {
            goto LABEL_152;
          }
          uint64_t v386 = *(void *)(v385 + 80);
          uint64_t v387 = (void *)(v386 + 24);
          if (*(_DWORD *)(v386 + 32) >= 0x41u) {
            uint64_t v387 = (void *)*v387;
          }
          if (*v387 > 0xFE01uLL) {
            goto LABEL_152;
          }
          uint64_t v388 = v147;
          uint64_t v389 = v146;
          sub_1CD3FC878((uint64_t)&v1085, *v1052, v385, 0, 0, 1, 0);
          long long v1071 = *(_OWORD *)*(void *)(v5 + 32);
          if (v1088 >= 4)
          {
            if (!v1089 || *(_WORD *)(v1071 + 24) != 175) {
              goto LABEL_152;
            }
            uint64_t v390 = *(void *)(*(void *)(v1071 + 32) + 40);
            int v391 = *(unsigned __int16 *)(v390 + 24);
            if (v391 != 35 && v391 != 11) {
              goto LABEL_152;
            }
            uint64_t v393 = *(void *)(v390 + 80);
            v394 = (void *)(v393 + 24);
            if (*(_DWORD *)(v393 + 32) >= 0x41u) {
              v394 = (void *)*v394;
            }
            if (*v394 > 4uLL) {
              goto LABEL_152;
            }
          }
          uint64_t v395 = *(void *)(v385 + 80);
          int v396 = (void *)(v395 + 24);
          if (*(_DWORD *)(v395 + 32) >= 0x41u) {
            int v396 = (void *)*v396;
          }
          unsigned int v397 = *(_DWORD *)v396;
          unsigned int v398 = v397 >> 8;
          if (v397 >> 8 <= 2) {
            unsigned int v398 = 2;
          }
          if (v398 > 0xFF) {
            goto LABEL_152;
          }
          while (1)
          {
            int v1079 = v397 / v398;
            if (v397 / v398 <= 0xFF && v397 % v398 == 0) {
              break;
            }
            if (++v398 == 256) {
              goto LABEL_152;
            }
          }
          LODWORD(v1082) = v398;
          v1090 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1069, (llvm *)5, 0, 1, 0);
          *(void *)&long long v1091 = v710;
          if (v363 == 6)
          {
            uint64_t v711 = v1;
            sub_1CD3FC878((uint64_t)__src, *(void *)(v1 + 296), v1071, SDWORD2(v1071), 0, 1, 0);
            if (sub_1CB9C4298(v1, (uint64_t)__src[0], (int)__src[1], (uint64_t)&v1071, (uint64_t)&v1090, HIDWORD(v1097) << 6))
            {
              int v712 = 165;
              goto LABEL_891;
            }
            sub_1CD3FC878((uint64_t)__src, *(void *)(v1 + 296), v1071, SDWORD2(v1071), 0, 1, 0);
            if (sub_1CB9C488C(v1, (uint64_t)__src[0], (uint64_t)__src[1], (uint64_t)&v1071, (uint64_t)&v1090, HIDWORD(v1097) << 6))
            {
              int v712 = 164;
              goto LABEL_882;
            }
            int v712 = 163;
          }
          else if (v363 == 5)
          {
            sub_1CD3FC878((uint64_t)__src, *(void *)(v1 + 296), v1071, SDWORD2(v1071), 0, 1, 0);
            if (sub_1CB9C4298(v1, (uint64_t)__src[0], (int)__src[1], (uint64_t)&v1071, (uint64_t)&v1090, HIDWORD(v1097) << 6))
            {
              int v712 = 218;
LABEL_882:
              uint64_t v711 = v1;
              goto LABEL_891;
            }
            int v712 = 217;
          }
          else
          {
            int v712 = 316;
          }
          uint64_t v711 = v1;
          sub_1CD3FC878((uint64_t)__src, *(void *)(v1 + 296), v1071, SDWORD2(v1071), 0, 1, 0);
          sub_1CB9C44B4(v1, (uint64_t)__src[0], (uint64_t)__src[1], (uint64_t)&v1071, (uint64_t)&v1090, HIDWORD(v1097) << 6);
LABEL_891:
          int v714 = sub_1CB952700(40, v712, *(unsigned char **)(v711 + 480));
          uint64_t v715 = *(void *)(v711 + 296);
          v1064 = v1069;
          if (v1069) {
            llvm::MetadataTracking::track((uint64_t)&v1064, v1069, 2);
          }
          int v1065 = v1070;
          int v247 = sub_1CD3FC664(v715, v714, (uint64_t)&v1064, v389, v388, 0, (unsigned int *)&v1082, (unsigned int *)&v1079, &v1071, &v1090);
          if (!v1064) {
            goto LABEL_897;
          }
          int v716 = *v1064;
          if ((v716 - 4) > 0x1E)
          {
            if ((v716 - 3) >= 0xFFFFFFFE) {
              unsigned int v717 = v1064;
            }
            else {
              unsigned int v717 = 0;
            }
            if ((v716 - 3) < 0xFFFFFFFE)
            {
              if (v716 == 3) {
                *((void *)v1064 + 1) = 0;
              }
              goto LABEL_897;
            }
            unint64_t v718 = (unint64_t)(v717 + 8);
          }
          else
          {
            if ((v1064[1] & 0x7F) != 2 && !*((_DWORD *)v1064 + 3)) {
              goto LABEL_897;
            }
            uint64_t v734 = *((void *)v1064 + 2);
            if ((v734 & 4) == 0) {
              goto LABEL_897;
            }
            unint64_t v718 = v734 & 0xFFFFFFFFFFFFFFF8;
            if (!v718) {
              goto LABEL_897;
            }
          }
          __src[0] = &v1064;
          sub_1CC5FA668(v718 + 16, __src);
LABEL_897:
          uint64_t v248 = *v1052;
          uint64_t v249 = v5;
          int v250 = 0;
          uint64_t v600 = (uint64_t)v247;
          LODWORD(v246) = 0;
          goto LABEL_731;
        }
LABEL_455:
        uint64_t v241 = *(uint64_t **)(v230 + 32);
        if ((*(_WORD *)(*v241 + 24) & 0xFFFE) != 0xC6)
        {
LABEL_466:
          int v240 = 175;
          goto LABEL_467;
        }
        goto LABEL_456;
      }
      if (v7 != 96)
      {
        if (v7 == 98)
        {
          uint64_t v194 = *(void *)(*(void *)(v5 + 32) + 40);
          int v195 = *(unsigned __int16 *)(v194 + 24);
          if (v195 == 36 || v195 == 12)
          {
            uint64_t v197 = *(void *)(v5 + 40);
            uint64_t v198 = *(void *)(v197 + 8);
            v1032 = *(llvm **)v197;
            sub_1CD3FC878((uint64_t)__src, *v1052, v194, 0, 0, 0, 0);
            if ((int)v1097 <= 3)
            {
              char v199 = 0;
              char v200 = 1;
              do
              {
                uint64_t v201 = *(void *)(v194 + 80);
                uint64_t v203 = *(void **)(v201 + 32);
                uint64_t v202 = (const llvm::detail::DoubleAPFloat *)(v201 + 32);
                if (v203 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1071 + 1, v202);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1071 + 8, v202);
                }
                if (v199) {
                  double v204 = -1.0;
                }
                else {
                  double v204 = 1.0;
                }
                LODWORD(v1083) = 64;
                double v1082 = v204;
                llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v1085, (const llvm::APInt **)&v1082);
                long long v1091 = v1085;
                int v1092 = v1086;
                unsigned __int8 v1093 = v1093 & 0xF0 | BYTE4(v1086) & 0xF;
                llvm::APFloat::convert((uint64_t)&v1090, *((void **)&v1071 + 1), 1, &v1082);
                int v205 = sub_1CB9C2E3C((uint64_t)&v1071, (uint64_t)&v1090, 1);
                int v206 = 14;
                if (!sub_1CB8456FC((uint64_t)&v1071) && !v205)
                {
                  uint64_t v208 = sub_1CD7ECA8C(*v1052, (llvm::LLVMContext *)&v1071, (const llvm::APFloat *)&v1069, v1032, v198, 0);
                  uint64_t v210 = v209;
                  sub_1CD3FC878((uint64_t)&v1085, *v1052, (uint64_t)v208, v209, 0, 0, 0);
                  if (v1088 >= 4)
                  {
                    uint64_t v212 = *(uint64_t **)(v5 + 32);
                    uint64_t v213 = *v212;
                    uint64_t v214 = (void *)v212[1];
                    if (v199)
                    {
                      uint64_t v215 = *(void *)(*v1052 + 832);
                      if (v215) {
                        __int16 v216 = *(_WORD *)(v215 + 8);
                      }
                      else {
                        __int16 v216 = 0;
                      }
                      v219 = v1032;
                      unint64_t v220 = (unint64_t)v214;
                      uint64_t v217 = sub_1CD7F3564((llvm::APFloatBase *)*v1052, (const char *)0xDE, (uint64_t)&v1069, v1032, v198, v213, v214, v216);
                      unint64_t v218 = v220 & 0xFFFFFFFF00000000 | v221;
                      uint64_t v222 = *(uint64_t **)(v5 + 32);
                      uint64_t v213 = *v222;
                      uint64_t v214 = (void *)v222[1];
                    }
                    else
                    {
                      uint64_t v217 = (uint64_t *)*v212;
                      unint64_t v218 = v212[1];
                      v219 = v1032;
                    }
                    uint64_t v223 = sub_1CD7F5D38((void *)*v1052, (const char *)0x8D, (const llvm::APInt *)&v1069, v219, v198, v213, (uint64_t)v214, v211, (uint64_t)v208, v210, (uint64_t)v217, v218, SHIDWORD(v218), *(_WORD *)(v5 + 72));
                    sub_1CD800DA0(*v1052, v5, 0, (uint64_t)v223, v224);
                    sub_1CD808A6C((uint64_t)v223);
                    int v206 = 12;
                  }
                  else
                  {
                    int v206 = 14;
                  }
                }
                if ((_UNKNOWN *)v1091 == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v1091 + 1);
                }
                else if ((*(_DWORD *)(v1091 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v1091 + 1))
                {
                  MEMORY[0x1D25D9CB0](*((void *)&v1091 + 1), 0x1000C8000313F17);
                }
                if (*((_UNKNOWN **)&v1071 + 1) == &unk_1CFB2E344)
                {
                  sub_1CB845718(&v1072);
                }
                else if ((*(_DWORD *)(*((void *)&v1071 + 1) + 8) - 64) <= 0xFFFFFF7F && v1072)
                {
                  MEMORY[0x1D25D9CB0](v1072, 0x1000C8000313F17);
                }
                char v207 = v200 & (v206 == 14);
                char v199 = 1;
                char v200 = 0;
              }
              while ((v207 & 1) != 0);
            }
          }
        }
        goto LABEL_152;
      }
      uint64_t v286 = *(void *)(v5 + 32);
      uint64_t v285 = *(void *)(v5 + 40);
      int v288 = *(llvm **)v285;
      uint64_t v287 = *(void *)(v285 + 8);
      uint64_t v289 = *(void *)v286;
      uint64_t v290 = *(void *)(v286 + 8);
      uint64_t v291 = *(void *)(v286 + 40);
      uint64_t v292 = *v1052;
      if (((*(_WORD *)(*(void *)*v1052 + 1020) & 1) != 0 || (~*(unsigned __int16 *)(v5 + 72) & 0x440) == 0)
        && v289 == v291
        && *(_DWORD *)(v286 + 48) == v290)
      {
        uint64_t v532 = sub_1CD7ECDC4(*v1052, (uint64_t)&v1069, (BOOL)v288, v287, 0, 2.0);
        int v469 = sub_1CCFDED5C(v292, 98, (const llvm::APInt *)&v1069, v288, v287, v289, v290, v534, (uint64_t)v532, v533, *(_WORD *)(v5 + 72));
        goto LABEL_677;
      }
      int v294 = *(unsigned __int16 *)(v291 + 24);
      if (v294 != 36 && v294 != 12) {
        goto LABEL_152;
      }
      uint64_t v1014 = v287;
      sub_1CD3FC878((uint64_t)__src, v292, v291, 0, 0, 0, 0);
      if ((int)v1097 > 3) {
        goto LABEL_152;
      }
      uint64_t v296 = *(void *)(v291 + 80);
      uint64_t v298 = *(void **)(v296 + 32);
      int v297 = (const llvm::detail::DoubleAPFloat *)(v296 + 32);
      if (v298 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1091, v297);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1091, v297);
      }
      char v1066 = 0;
      if (v288 == 10
        && (llvm::APFloat::convert((uint64_t)&v1090, &unk_1CFB2E2E0, 1, &v1066) || v1066)
        || sub_1CB8456FC((uint64_t)&v1090))
      {
        goto LABEL_416;
      }
      uint64_t v299 = v1091;
      if ((_UNKNOWN *)v1091 == &unk_1CFB2E344)
      {
        unsigned int v735 = *(unsigned char *)(*((void *)&v1091 + 1) + 28) & 7;
        if (v735 <= 3 && v735 != 2)
        {
LABEL_416:
          uint64_t v299 = v1091;
          if ((_UNKNOWN *)v1091 == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1091 + 1);
            goto LABEL_152;
          }
          goto LABEL_709;
        }
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v1091, (llvm::APInt *)&v1085);
      }
      else
      {
        unsigned int v557 = v1093 & 7;
        if (v557 <= 3 && v557 != 2)
        {
LABEL_709:
          if ((*(_DWORD *)(v299 + 8) - 64) <= 0xFFFFFF7F && *((void *)&v1091 + 1)) {
            MEMORY[0x1D25D9CB0](*((void *)&v1091 + 1), 0x1000C8000313F17);
          }
          goto LABEL_152;
        }
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v1091, (uint64_t)&v1085);
      }
      uint64_t v615 = (unsigned int *)&v1085;
      if (DWORD2(v1085) >= 0x41) {
        uint64_t v615 = (unsigned int *)v1085;
      }
      unsigned int v616 = *v615;
      if (DWORD2(v1085) >= 0x41 && (void)v1085) {
        MEMORY[0x1D25D9CB0]();
      }
      unsigned int v617 = v616 & 0x3FF | 0x400;
      int v618 = (v616 >> 10) & 0x1F;
      int v996 = v616 & 0x8000;
      __int16 v994 = ((_WORD)v618 << 10) + 6144;
      int v619 = v618 - 14;
      unsigned int v620 = 2;
      unsigned int v1002 = v617;
      int v1029 = v618 - 14;
      while (1)
      {
        unsigned int v621 = v617 / v620;
        if (!(v617 % v620) && v620 >> __clz(__rbit32(v620)) <= 0x1F)
        {
          char v622 = __clz(__rbit32(v621));
          if (v620 > v617) {
            char v622 = 32;
          }
          if (v621 >> v622 <= 0x1F) {
            break;
          }
        }
        char v623 = 0;
LABEL_765:
        if (++v620 > 0x2D || (v623 & 1) != 0) {
          goto LABEL_416;
        }
      }
      int v624 = 0;
      char v1012 = 0;
      v620 <<= __clz(v620) - 21;
      uint64_t v625 = (v621 << (__clz(v621) - 21)) & 0x3FFLL | 0x2400;
      __int16 v626 = v994;
      while (1)
      {
        if ((v619 + v624) < 0xFFFFFFF5) {
          goto LABEL_782;
        }
        DWORD2(v1085) = 16;
        *(void *)&long long v1085 = v620 & 0x3FF | v996 | v626 & 0xFC00;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v1083, (const llvm::APInt **)&v1085);
        DWORD2(v1085) = 16;
        *(void *)&long long v1085 = v625;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v1080, (const llvm::APInt **)&v1085);
        if ((_UNKNOWN *)v1083 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1075, (const llvm::detail::DoubleAPFloat *)&v1083);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1075, (const llvm::detail::IEEEFloat *)&v1083);
        }
        if (sub_1CB9C2E60((uint64_t)v1074, (uint64_t)&v1079, 1)) {
          goto LABEL_773;
        }
        uint64_t v628 = v1075;
        if (v1075 == (void)v1091) {
          break;
        }
        int v627 = 20;
LABEL_775:
        if ((_UNKNOWN *)v628 == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v1076);
        }
        else if ((*(_DWORD *)(v628 + 8) - 64) <= 0xFFFFFF7F && v1076)
        {
          MEMORY[0x1D25D9CB0](v1076, 0x1000C8000313F17);
        }
        if ((_UNKNOWN *)v1080 == &unk_1CFB2E344)
        {
          sub_1CB845718(&v1081);
        }
        else if ((*(_DWORD *)(v1080 + 8) - 64) <= 0xFFFFFF7F && v1081)
        {
          MEMORY[0x1D25D9CB0](v1081, 0x1000C8000313F17);
        }
        if ((_UNKNOWN *)v1083 == &unk_1CFB2E344)
        {
          sub_1CB845718(&v1084);
        }
        else if ((*(_DWORD *)(v1083 + 8) - 64) <= 0xFFFFFF7F && v1084)
        {
          MEMORY[0x1D25D9CB0](v1084, 0x1000C8000313F17);
        }
        int v619 = v1029;
        if (v627 != 20)
        {
LABEL_816:
          unsigned int v617 = v1002;
          char v623 = v1012;
          goto LABEL_765;
        }
LABEL_782:
        v625 += 1024;
        --v624;
        v626 -= 1024;
        if (v624 == -11) {
          goto LABEL_816;
        }
      }
      if ((_UNKNOWN *)v1075 == &unk_1CFB2E344)
      {
        if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v1075, (const llvm::detail::DoubleAPFloat *)&v1091))
        {
LABEL_798:
          if (v288 == 10)
          {
            llvm::APFloat::convert((uint64_t)&v1082, &unk_1CFB2E308, 1, &v1085);
            llvm::APFloat::convert((uint64_t)&v1079, &unk_1CFB2E308, 1, &v1085);
          }
          uint64_t v635 = sub_1CD7ECA8C(*v1052, (llvm::LLVMContext *)&v1082, (const llvm::APFloat *)&v1069, v288, v1014, 0);
          uint64_t v993 = v636;
          uint64_t v637 = (uint64_t)v635;
          v638 = sub_1CD7ECA8C(*v1052, (llvm::LLVMContext *)&v1079, (const llvm::APFloat *)&v1069, v288, v1014, 0);
          uint64_t v991 = v639;
          uint64_t v992 = (uint64_t)v638;
          sub_1CD3FC878((uint64_t)&v1085, *v1052, v637, v993, 0, 0, 0);
          sub_1CD3FC878((uint64_t)&v1071, *v1052, v992, v991, 0, 0, 0);
          int v627 = 20;
          if (v1088 >= 4 && v1073 >= 4)
          {
            int v641 = sub_1CD7F5D38((void *)*v1052, (const char *)0x8D, (const llvm::APInt *)&v1069, v288, v1014, v637, v993, v640, v992, v991, **(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), HIDWORD(*(void *)(*(void *)(v5 + 32) + 8)), *(_WORD *)(v5 + 72));
            sub_1CD800DA0(*v1052, v5, 0, (uint64_t)v641, v642);
            sub_1CD808A6C((uint64_t)v641);
            int v627 = 18;
            char v1012 = 1;
          }
          goto LABEL_774;
        }
      }
      else
      {
        int v629 = v1078 & 7;
        if (v629 == (v1093 & 7) && ((v1093 ^ v1078) & 8) == 0)
        {
          if (v629 == 3 || (v1078 & 7) == 0) {
            goto LABEL_798;
          }
          if ((v1078 & 6) == 0 || v1077 == v1092)
          {
            int v630 = *(_DWORD *)(v1075 + 8);
            unsigned int v631 = v630 - 64;
            uint64_t v632 = (uint64_t *)&v1076;
            if ((v630 - 64) <= 0xFFFFFF7F) {
              uint64_t v632 = v1076;
            }
            unsigned int v633 = v630 + 64;
            uint64_t v634 = v631 >= 0xFFFFFF80 ? (long long *)((char *)&v1091 + 8) : (long long *)*((void *)&v1091 + 1);
            if (!memcmp(v632, v634, (v633 >> 3) & 0x1FFFFFF8)) {
              goto LABEL_798;
            }
          }
        }
      }
LABEL_773:
      int v627 = 20;
LABEL_774:
      uint64_t v628 = v1075;
      goto LABEL_775;
    }
    *(void *)&long long v1071 = v1085;
    if ((void)v1085) {
      llvm::MetadataTracking::track((uint64_t)&v1071, (unsigned __int8 *)v1085, 2);
    }
    DWORD2(v1071) = DWORD2(v1085);
    uint64_t v510 = *v1052;
    uint64_t v512 = sub_1CD7EBF14(*v1052, 2131, (const llvm::APInt *)&v1071, (llvm *)5, 0, 1, 0);
    __int16 v514 = 0;
    uint64_t v515 = *(void *)(v510 + 832);
    if (v515) {
      __int16 v514 = *(_WORD *)(v515 + 8);
    }
    uint64_t v516 = sub_1CCFDED5C(v510, 46, (const llvm::APInt *)&v1071, (llvm *)0xA, 0, (uint64_t)v512, v511, v513, (uint64_t)v100, v102, v514);
    unsigned int v518 = v517;
    if ((void)v1071)
    {
      int v519 = *(unsigned __int8 *)v1071;
      if ((v519 - 4) > 0x1E)
      {
        if ((v519 - 3) >= 0xFFFFFFFE) {
          uint64_t v708 = v1071;
        }
        else {
          uint64_t v708 = 0;
        }
        if ((v519 - 3) < 0xFFFFFFFE)
        {
          if (v519 == 3) {
            *(void *)(v1071 + 8) = 0;
          }
          goto LABEL_670;
        }
        unint64_t v709 = v708 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v1071 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1071 + 12)) {
          goto LABEL_670;
        }
        uint64_t v733 = *(void *)(v1071 + 16);
        if ((v733 & 4) == 0) {
          goto LABEL_670;
        }
        unint64_t v709 = v733 & 0xFFFFFFFFFFFFFFF8;
        if (!v709) {
          goto LABEL_670;
        }
      }
      v1090 = (uint64_t *)&v1071;
      sub_1CC5FA668(v709 + 16, &v1090);
    }
LABEL_670:
    uint64_t v520 = *v1052;
    uint64_t v521 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1085, (llvm *)5, 0, 0, 0);
    uint64_t v524 = *(void *)(v520 + 832);
    if (v524) {
      LOWORD(v524) = *(_WORD *)(v524 + 8);
    }
    unint64_t v108 = sub_1CCFDED5C(v520, 212, (const llvm::APInt *)&v1085, (llvm *)9, 0, (uint64_t)v516, v102 & 0xFFFFFFFF00000000 | v518, v523, (uint64_t)v521, v522, v524);
    int v109 = v525;
    uint64_t v107 = *v1052;
    uint64_t v106 = *(void *)(*(void *)(v5 + 48) + 16);
    goto LABEL_187;
  }
LABEL_939:
  sub_1CD7EA154(v3);
  unint64_t v736 = (void *)*v2;
  uint64_t v737 = *v2 + 208;
  uint64_t v738 = *(void *)(*v2 + 216);
  if (v738 != v737)
  {
    while (1)
    {
      uint64_t v739 = v738 - 8;
      BOOL v15 = v738 == 0;
      uint64_t v738 = *(void *)(v738 + 8);
      if (v15) {
        uint64_t v740 = 0;
      }
      else {
        uint64_t v740 = v739;
      }
      uint64_t v741 = *(unsigned __int8 **)(v740 + 64);
      *(void *)&long long v1071 = v741;
      if (v741) {
        llvm::MetadataTracking::track((uint64_t)&v1071, v741, 2);
      }
      int v742 = *(_DWORD *)(v740 + 60);
      DWORD2(v1071) = v742;
      uint64_t v743 = *(void *)(v740 + 48);
      if (!v743) {
        goto LABEL_1047;
      }
      int v744 = *(unsigned __int16 *)(v740 + 24);
      if ((v744 - 176) < 2)
      {
        if (!*(unsigned char *)(*(void *)(v1 + 480) + 318))
        {
          unsigned int v758 = *(uint64_t **)(v740 + 32);
          long long v759 = *(_OWORD *)*(void *)(v740 + 40);
          *(_OWORD *)__src = v759;
          uint64_t v760 = v758[5];
          int v761 = *(unsigned __int16 *)(v760 + 24);
          if (v761 == 35 || v761 == 11)
          {
            uint64_t v763 = *(void *)(v760 + 80);
            int v764 = (void *)(v763 + 24);
            if (*(_DWORD *)(v763 + 32) >= 0x41u) {
              int v764 = (void *)*v764;
            }
            uint64_t v765 = *v758;
            uint64_t v766 = v758[1];
            uint64_t v767 = (void *)*v764;
            if ((_BYTE)v759) {
              uint64_t v768 = sub_1CB87E200((unsigned __int8 *)__src);
            }
            else {
              uint64_t v768 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            }
            uint64_t v802 = v768;
            if (v769 == 1) {
            if (v767 == (void *)(v802 - 1))
            }
            {
              v1048 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1071, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              int v807 = v806;
              if (*(_WORD *)(v740 + 24) == 176) {
                uint64_t v808 = -1;
              }
              else {
                uint64_t v808 = 1;
              }
              uint64_t v809 = sub_1CD7EBF14(*v1052, v808, (const llvm::APInt *)&v1071, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              int v811 = v810;
              uint64_t v812 = *v1052;
              uint64_t v813 = v809[5] + 16 * v810;
              v1044 = *(llvm **)v813;
              uint64_t v1041 = *(void *)(v813 + 8);
              uint64_t v988 = sub_1CD7EE368((void *)*v1052, 0x14u);
              uint64_t v814 = (void *)v812;
              uint64_t v1 = v1055;
              int v817 = sub_1CD7F6564(v814, (const char *)0xC0, (const llvm::APInt *)&v1071, v1044, v1041, v765, v766, v816, (uint64_t)v1048, v807, (uint64_t)v809, v811, (uint64_t)v1048, v807, v988, v815);
              sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v817, v818);
              sub_1CD808A6C((uint64_t)v817);
            }
          }
        }
        goto LABEL_1047;
      }
      if (v744 != 175)
      {
        if (v744 == 46)
        {
          if (**(unsigned char **)(v740 + 40) == 9)
          {
            uint64_t v745 = *(void **)(v740 + 32);
            uint64_t v746 = *(void *)(*v745 + 80);
            unint64_t v747 = (void *)(v746 + 24);
            if (*(_DWORD *)(v746 + 32) >= 0x41u) {
              unint64_t v747 = (void *)*v747;
            }
            if (*v747 == 2131)
            {
              uint64_t v748 = v745[5];
              char v749 = (void *)v745[6];
              if (!sub_1CB9C2DD8(*(unsigned __int16 *)(v748 + 24))) {
                goto LABEL_961;
              }
              uint64_t v750 = *(void *)(v748 + 48);
              if (!v750) {
                goto LABEL_961;
              }
              int v751 = 1;
              do
              {
                if (*(_DWORD *)(v750 + 8) == v749)
                {
                  if (!v751) {
                    goto LABEL_961;
                  }
                  --v751;
                }
                uint64_t v750 = *(void *)(v750 + 32);
              }
              while (v750);
              if (v751)
              {
LABEL_961:
                while (1)
                {
                  uint64_t v752 = *(void *)(v743 + 16);
                  int v753 = *(unsigned __int16 *)(v752 + 24);
                  if ((v753 - 96) > 0x2D
                    || ((1 << (v753 - 96)) & 0x200000000005) == 0)
                  {
                    if (v753 != 222) {
                      break;
                    }
                    uint64_t v755 = *(void *)(v752 + 48);
                    if (!v755 || *(void *)(v755 + 32) || *(_WORD *)(*(void *)(v755 + 16) + 24) != 96) {
                      break;
                    }
                  }
                  uint64_t v743 = *(void *)(v743 + 32);
                  if (!v743)
                  {
                    uint64_t v756 = *(void *)(*v1052 + 832);
                    if (v756) {
                      __int16 v757 = *(_WORD *)(v756 + 8);
                    }
                    else {
                      __int16 v757 = 0;
                    }
                    unint64_t v837 = sub_1CD7F3564((llvm::APFloatBase *)*v1052, (const char *)0x1AE, (uint64_t)&v1071, (llvm *)9, 0, v748, v749, v757);
                    sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v837, v838);
                    sub_1CD808A6C((uint64_t)v837);
                    goto LABEL_1047;
                  }
                }
              }
            }
          }
          goto LABEL_1047;
        }
        uint64_t v783 = *(void *)(v1 + 480);
        BOOL v784 = (v744 & 0xFFFE) != 0x38 || *(unsigned char *)(v783 + 357) == 0;
        if (!v784 && **(unsigned char **)(v740 + 40) == 6)
        {
          unint64_t v819 = (llvm::APFloatBase *)*v1052;
          v1058 = (unsigned __int8 *)v1071;
          if ((void)v1071)
          {
            llvm::MetadataTracking::track((uint64_t)&v1058, (unsigned __int8 *)v1071, 2);
            int v742 = DWORD2(v1071);
          }
          int v1059 = v742;
          int v820 = sub_1CD41A260(v740, v819, (const llvm::APInt *)&v1058);
          int v822 = v821;
          int v823 = v1058;
          if (!v1058) {
            goto LABEL_1071;
          }
          int v824 = *v1058;
          if ((v824 - 4) > 0x1E)
          {
            if ((v824 - 3) >= 0xFFFFFFFE) {
              uint64_t v860 = v1058;
            }
            else {
              uint64_t v860 = 0;
            }
            if ((v824 - 3) < 0xFFFFFFFE) {
              goto LABEL_1275;
            }
            unint64_t v861 = (unint64_t)(v860 + 8);
          }
          else
          {
            if ((v1058[1] & 0x7F) != 2 && !*((_DWORD *)v1058 + 3)) {
              goto LABEL_1071;
            }
            uint64_t v971 = *((void *)v1058 + 2);
            if ((v971 & 4) == 0) {
              goto LABEL_1071;
            }
            unint64_t v861 = v971 & 0xFFFFFFFFFFFFFFF8;
            if (!v861) {
              goto LABEL_1071;
            }
          }
          int v862 = &v1058;
          goto LABEL_1139;
        }
        if (*(unsigned __int16 *)(v740 + 24) <= 0x22u)
        {
          if (v744 != 11)
          {
            if (v744 != 12) {
              goto LABEL_1047;
            }
            goto LABEL_1029;
          }
        }
        else if (v744 != 35)
        {
          if (v744 != 36)
          {
            if (v744 != 56 || *(unsigned char *)(v783 + 318) || **(unsigned char **)(v740 + 40) != 6) {
              goto LABEL_1047;
            }
            uint64_t v785 = *(uint64_t **)(v740 + 32);
            uint64_t v786 = *v785;
            unint64_t v787 = v785[1];
            uint64_t v789 = v785[5];
            uint64_t v788 = v785[6];
            int v790 = *(unsigned __int16 *)(*v785 + 24);
            if (v790 != 175)
            {
              int v791 = *(unsigned __int16 *)(v789 + 24);
              if (v791 != 175)
              {
                if (v790 != 58) {
                  goto LABEL_1017;
                }
                uint64_t v792 = *(void *)(v786 + 48);
                if (!v792) {
                  goto LABEL_1017;
                }
                int v793 = 1;
                do
                {
                  if (*(_DWORD *)(v792 + 8) == v787)
                  {
                    if (!v793) {
                      goto LABEL_1017;
                    }
                    --v793;
                  }
                  uint64_t v792 = *(void *)(v792 + 32);
                }
                while (v792);
                if (v793)
                {
LABEL_1017:
                  if (v791 == 58)
                  {
                    uint64_t v794 = *(void *)(v789 + 48);
                    if (v794)
                    {
                      int v795 = 1;
                      do
                      {
                        if (*(_DWORD *)(v794 + 8) == v788)
                        {
                          if (!v795) {
                            goto LABEL_1097;
                          }
                          --v795;
                        }
                        uint64_t v794 = *(void *)(v794 + 32);
                      }
                      while (v794);
                      if (v790 != 198 && v795)
                      {
LABEL_1158:
                        v871 = (llvm::APFloatBase *)*v1052;
                        v1056 = (unsigned __int8 *)v1071;
                        if ((void)v1071)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v1056, (unsigned __int8 *)v1071, 2);
                          int v742 = DWORD2(v1071);
                        }
                        int v1057 = v742;
                        int v820 = sub_1CD41A260(v740, v871, (const llvm::APInt *)&v1056);
                        int v822 = v872;
                        uint64_t v1 = v1055;
                        int v823 = v1056;
                        if (!v1056) {
                          goto LABEL_1071;
                        }
                        int v824 = *v1056;
                        if ((v824 - 4) <= 0x1E)
                        {
                          if ((v1056[1] & 0x7F) == 2 || *((_DWORD *)v1056 + 3))
                          {
                            uint64_t v873 = *((void *)v1056 + 2);
                            if ((v873 & 4) != 0)
                            {
                              unint64_t v861 = v873 & 0xFFFFFFFFFFFFFFF8;
                              if (v861)
                              {
LABEL_1274:
                                int v862 = &v1056;
LABEL_1139:
                                __src[0] = v862;
                                sub_1CC5FA668(v861 + 16, __src);
                              }
                            }
                          }
LABEL_1071:
                          sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v820, v822);
                          sub_1CD808A6C((uint64_t)v820);
                          uint64_t v825 = *v1052;
                          sub_1CCFCBF2C(*v1052, v740);
                          sub_1CD7EA4EC(v825, v740);
                          goto LABEL_1047;
                        }
                        if ((v824 - 3) >= 0xFFFFFFFE) {
                          v970 = v1056;
                        }
                        else {
                          v970 = 0;
                        }
                        if ((v824 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v861 = (unint64_t)(v970 + 8);
                          goto LABEL_1274;
                        }
LABEL_1275:
                        if (v824 == 3) {
                          *((void *)v823 + 1) = 0;
                        }
                        goto LABEL_1071;
                      }
                    }
                    else if (v790 != 198)
                    {
                      goto LABEL_1158;
                    }
                  }
                  else
                  {
LABEL_1097:
                    if (v790 != 198 && v791 != 198) {
                      goto LABEL_1158;
                    }
                  }
                }
              }
            }
            if (sub_1CB9C366C(v786) && (uint64_t v852 = *(void *)(v786 + 48)) != 0)
            {
              int v853 = 1;
              do
              {
                if (*(_DWORD *)(v852 + 8) == v787)
                {
                  if (!v853) {
                    goto LABEL_1122;
                  }
                  --v853;
                }
                uint64_t v852 = *(void *)(v852 + 32);
              }
              while (v852);
              unint64_t v854 = v787 & 0xFFFFFFFF00000000 | v788;
              BOOL v855 = v853 == 0;
              if (v853) {
                uint64_t v856 = v789;
              }
              else {
                uint64_t v856 = v786;
              }
              if (v855) {
                LODWORD(v788) = v787;
              }
              if (v855) {
                uint64_t v786 = v789;
              }
              if (v855) {
                unint64_t v787 = v854;
              }
              int v857 = v855;
              uint64_t v789 = v856;
            }
            else
            {
LABEL_1122:
              int v857 = 0;
            }
            if (sub_1CB9C366C(v789) && (uint64_t v858 = *(void *)(v789 + 48)) != 0)
            {
              int v859 = 1;
              do
              {
                if (*(_DWORD *)(v858 + 8) == v788)
                {
                  if (!v859) {
                    goto LABEL_1132;
                  }
                  --v859;
                }
                uint64_t v858 = *(void *)(v858 + 32);
              }
              while (v858);
              if (v859)
              {
                uint64_t v1 = v1055;
              }
              else
              {
                uint64_t v891 = sub_1CD7EBF14(*v1052, 0, (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
                uint64_t v893 = v892;
                v1047 = sub_1CD7EBF14(*v1052, 1, (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
                uint64_t v1043 = v894;
                __int16 v895 = 0;
                uint64_t v896 = *(void *)(*v1052 + 832);
                if (v896) {
                  __int16 v895 = *(_WORD *)(v896 + 8);
                }
                v897 = *(uint64_t **)(**(void **)(v789 + 32) + 32);
                unint64_t v898 = v897[1];
                unint64_t v899 = v898 & 0xFFFFFFFF00000000;
                uint64_t v900 = v897[6];
                v1051 = (llvm::detail::IEEEFloat *)v897[5];
                long long v903 = sub_1CD7F3564((llvm::APFloatBase *)*v1052, (const char *)0xC7, (uint64_t)&v1071, (llvm *)6, 0, *v897, (void *)v898, v895);
                __int16 v904 = 0;
                uint64_t v905 = *v1052;
                if (v857) {
                  uint64_t v906 = (uint64_t)v903;
                }
                else {
                  uint64_t v906 = v786;
                }
                uint64_t v907 = v901 | v899;
                if (v857) {
                  uint64_t v908 = v901 | v899;
                }
                else {
                  uint64_t v908 = v787;
                }
                if (v857)
                {
                  long long v903 = (uint64_t *)v786;
                  uint64_t v907 = v787;
                }
                uint64_t v909 = *(void *)(v905 + 832);
                if (v909) {
                  __int16 v904 = *(_WORD *)(v909 + 8);
                }
                v911 = sub_1CCFDED5C(v905, 56, (const llvm::APInt *)&v1071, (llvm *)6, 0, v906, v908, v902, (uint64_t)v903, v907, v904);
                unint64_t v912 = (unint64_t)v910;
                __int16 v913 = 0;
                uint64_t v914 = *(void *)(*v1052 + 832);
                if (v914) {
                  __int16 v913 = *(_WORD *)(v914 + 8);
                }
                v917 = sub_1CD7F3564((llvm::APFloatBase *)*v1052, (const char *)0xD8, (uint64_t)&v1071, (llvm *)0x31, 0, (uint64_t)v911, v910, v913);
                __int16 v918 = 0;
                uint64_t v919 = *(void *)(*v1052 + 832);
                if (v919) {
                  __int16 v918 = *(_WORD *)(v919 + 8);
                }
                unint64_t v920 = v912 & 0xFFFFFFFF00000000 | v915;
                v922 = sub_1CCFDED5C(*v1052, 148, (const llvm::APInt *)&v1071, (llvm *)5, 0, (uint64_t)v917, v920, v916, (uint64_t)v891, v893, v918);
                uint64_t v924 = v923;
                __int16 v925 = 0;
                uint64_t v926 = *(void *)(*v1052 + 832);
                if (v926) {
                  __int16 v925 = *(_WORD *)(v926 + 8);
                }
                int v928 = sub_1CCFDED5C(*v1052, 148, (const llvm::APInt *)&v1071, (llvm *)5, 0, (uint64_t)v917, v920, v921, (uint64_t)v1047, v1043, v925);
                uint64_t v930 = v927;
                __int16 v931 = 0;
                uint64_t v932 = *(void *)(*v1052 + 832);
                if (v932) {
                  __int16 v931 = *(_WORD *)(v932 + 8);
                }
                long long v933 = sub_1CCFDED5C(*v1052, 56, (const llvm::APInt *)&v1071, (llvm *)5, 0, (uint64_t)v928, v927, v929, (uint64_t)v1051, v900, v931);
                __int16 v936 = 0;
                uint64_t v937 = *(void *)(*v1052 + 832);
                if (v937) {
                  __int16 v936 = *(_WORD *)(v937 + 8);
                }
                v939 = sub_1CCFDED5C(*v1052, 146, (const llvm::APInt *)&v1071, (llvm *)0x31, 0, (uint64_t)v922, v924, v935, (uint64_t)v933, v930 & 0xFFFFFFFF00000000 | v934, v936);
                __int16 v940 = 0;
                uint64_t v941 = *(void *)(*v1052 + 832);
                uint64_t v1 = v1055;
                if (v941) {
                  __int16 v940 = *(_WORD *)(v941 + 8);
                }
                v942 = sub_1CD7F3564((llvm::APFloatBase *)*v1052, (const char *)0xD8, (uint64_t)&v1071, (llvm *)6, 0, (uint64_t)v939, v938, v940);
                sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v942, v943);
                sub_1CD808A6C((uint64_t)v942);
                uint64_t v944 = *v1052;
                sub_1CCFCBF2C(*v1052, v740);
                sub_1CD7EA4EC(v944, v740);
              }
            }
            else
            {
LABEL_1132:
              uint64_t v1 = v1055;
            }
            goto LABEL_1047;
          }
LABEL_1029:
          if (**(unsigned char **)(v740 + 40) == 10)
          {
            if (sub_1CB9C36D4(v740))
            {
              sub_1CD3FC878((uint64_t)__src, *v1052, v740, 0, 0, 0, 0);
              if ((int)v1097 <= 3)
              {
                uint64_t v796 = *(void *)(v740 + 80);
                int v798 = *(void **)(v796 + 32);
                v797 = (const llvm::detail::DoubleAPFloat *)(v796 + 32);
                if (v798 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1085 + 1, v797);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v1085 + 8, v797);
                }
                LOBYTE(v1090) = 0;
                if (!llvm::APFloat::convert((uint64_t)&v1085, &unk_1CFB2E2E0, 1, &v1090)
                  && !(_BYTE)v1090
                  && !sub_1CB8456FC((uint64_t)&v1085))
                {
                  uint64_t v962 = sub_1CD7ECA8C(*(void *)(v1 + 296), (llvm::LLVMContext *)&v1085, (const llvm::APFloat *)&v1071, (llvm *)9, 0, 0);
                  uint64_t v964 = sub_1CB9C37A8(v1, (uint64_t)v962);
                  __int16 v965 = 0;
                  uint64_t v966 = *(llvm::APFloatBase **)(v1 + 296);
                  uint64_t v967 = *((void *)v966 + 104);
                  if (v967) {
                    __int16 v965 = *(_WORD *)(v967 + 8);
                  }
                  uint64_t v968 = sub_1CD7F3564(v966, (const char *)0xD7, (uint64_t)&v1071, (llvm *)0xA, 0, (uint64_t)v964, v963, v965);
                  sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v968, v969);
                  sub_1CD808A6C((uint64_t)v968);
                }
                if (*((_UNKNOWN **)&v1085 + 1) == &unk_1CFB2E344)
                {
                  sub_1CB845718(&v1086);
                }
                else if ((*(_DWORD *)(*((void *)&v1085 + 1) + 8) - 64) <= 0xFFFFFF7F && v1086)
                {
                  MEMORY[0x1D25D9CB0](v1086, 0x1000C8000313F17);
                }
              }
            }
          }
          goto LABEL_1047;
        }
        uint64_t v799 = *(void *)(v740 + 40);
        unint64_t v800 = *(llvm **)v799;
        int v801 = *(void *)v799;
        if ((v801 == 5) != (v801 != 6)) {
          goto LABEL_1047;
        }
        uint64_t v826 = *(void *)(v799 + 8);
        sub_1CD3FC878((uint64_t)__src, *v1052, v740, 0, 0, 1, 0);
        if (int)v1097 >= 4 && !HIDWORD(v1097) || (int)v1097 >= 4 && HIDWORD(v1097) && (sub_1CB9C2E80(v740)) {
          goto LABEL_1265;
        }
        uint64_t v828 = *(void *)(v740 + 80);
        unsigned int v829 = *(_DWORD *)(v828 + 32);
        if (v829 > 0x40) {
          uint64_t v830 = **(void **)(v828 + 24);
        }
        else {
          uint64_t v830 = (uint64_t)(*(void *)(v828 + 24) << -(char)v829) >> -(char)v829;
        }
        uint64_t v863 = *(void *)(v740 + 48);
        if (v863)
        {
          while (*(_WORD *)(*(void *)(v863 + 16) + 24) == 171)
          {
            uint64_t v863 = *(void *)(v863 + 32);
            if (!v863) {
              goto LABEL_1144;
            }
          }
        }
        else
        {
LABEL_1144:
          v827.i32[0] = v830 + 1;
          uint8x8_t v864 = (uint8x8_t)vcnt_s8(v827);
          v864.i16[0] = vaddlv_u8(v864);
          if (v864.i32[0] == 1) {
            goto LABEL_1265;
          }
        }
        if (sub_1CB9C2E80(v740))
        {
          unsigned int v865 = __clz(__rbit64(v830));
          if (v865 >= 4) {
            unint64_t v866 = 4;
          }
          else {
            unint64_t v866 = v865;
          }
          if (v866)
          {
            unint64_t v867 = 1;
            BOOL v868 = 1;
            while (1)
            {
              uint64_t v869 = sub_1CD7EBF14(*v1052, v830 >> v867, (const llvm::APInt *)&v1071, v800, v826, 0, 0)[6];
              if (v869) {
                break;
              }
LABEL_1154:
              BOOL v868 = v867++ < v866;
              if (v867 == v866 + 1) {
                goto LABEL_1155;
              }
            }
            while (*(_DWORD *)(v869 + 8))
            {
              uint64_t v869 = *(void *)(v869 + 32);
              if (!v869) {
                goto LABEL_1154;
              }
            }
            LODWORD(v866) = v867;
          }
          else
          {
LABEL_1155:
            BOOL v868 = 0;
          }
          unsigned int v870 = v866;
          v830 >>= v866;
        }
        else
        {
          unsigned int v870 = 0;
          BOOL v868 = 0;
        }
        if ((unint64_t)(v830 - 0x10000) > 0xFFFFFFFFFFFE7FFFLL)
        {
          uint64_t v874 = 4;
        }
        else
        {
          if ((unint64_t)(v830 - 0x100000000) < 0xFFFFFFFE80000000 || v801 == 5 && !v868) {
            goto LABEL_1265;
          }
          uint64_t v874 = 5;
        }
        uint64_t v875 = *(void *)(v740 + 48);
        if ((v830 & 0x8000000000000000) == 0)
        {
          if (!v875) {
            goto LABEL_1257;
          }
          uint64_t v876 = *(void *)(v740 + 48);
          while (1)
          {
            uint64_t v877 = *(void *)(v876 + 16);
            unsigned int v878 = *(unsigned __int16 *)(v877 + 24);
            if (v878 <= 0xAB)
            {
              if (v878 - 57 >= 2)
              {
                if (v878 == 56)
                {
                  if (*(_WORD *)(**(void **)(v877 + 32) + 24) == 15) {
                    goto LABEL_1225;
                  }
                }
                else
                {
                  if (v878 != 171) {
                    goto LABEL_1225;
                  }
                  int v879 = *(unsigned __int16 *)(v740 + 24);
                  if (v879 == 35 || v879 == 11)
                  {
                    uint64_t v880 = *(void *)(v740 + 80);
                    v881 = (void *)(v880 + 24);
                    if (*(_DWORD *)(v880 + 32) >= 0x41u) {
                      v881 = (void *)*v881;
                    }
                    if (*v881 == 0xFFFFLL) {
                      goto LABEL_1225;
                    }
                  }
                }
              }
            }
            else if (*(unsigned __int16 *)(v877 + 24) > 0xBFu)
            {
              if (v878 == 192)
              {
                uint64_t v882 = *(void *)(v877 + 32);
                if (*(void *)(v882 + 80) == v740 || *(void *)(v882 + 120) == v740) {
                  goto LABEL_1225;
                }
              }
              else
              {
                if (v878 != 260) {
                  goto LABEL_1225;
                }
                uint64_t v882 = *(void *)(v877 + 32);
              }
              BOOL v15 = v878 == 260;
              uint64_t v883 = 160;
              if (v15) {
                uint64_t v883 = 40;
              }
              if ((*(_DWORD *)(*(void *)(v882 + v883) + 76) - 22) >= 0xFFFFFFFC) {
                goto LABEL_1225;
              }
            }
            else if (v878 - 172 >= 2)
            {
              if (v878 - 175 < 3 && **(unsigned char **)(v877 + 40) != 6) {
                goto LABEL_1257;
              }
LABEL_1225:
              if (v801 != 6) {
                goto LABEL_1265;
              }
              while (*(_WORD *)(*(void *)(v875 + 16) + 24) != 58)
              {
                uint64_t v875 = *(void *)(v875 + 32);
                if (!v875) {
                  goto LABEL_1265;
                }
              }
LABEL_1257:
              uint64_t v889 = 199;
LABEL_1258:
              int v945 = sub_1CD7EBF14(*(void *)(v1055 + 296), v830, (const llvm::APInt *)&v1071, (llvm *)v874, 0, 0, 0);
              int v947 = sub_1CB9C3BE8(v1055, (uint64_t)v945);
              __int16 v948 = 0;
              int v949 = *(llvm::APFloatBase **)(v1055 + 296);
              uint64_t v950 = *((void *)v949 + 104);
              if (v950) {
                __int16 v948 = *(_WORD *)(v950 + 8);
              }
              uint64_t v951 = v826;
              v952 = sub_1CD7F3564(v949, (const char *)v889, (uint64_t)&v1071, v800, v826, (uint64_t)v947, v946, v948);
              uint64_t v954 = v953;
              if (v870)
              {
                uint64_t v955 = *v1052;
                v956 = sub_1CD7EBF14(*v1052, v870, (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
                __int16 v959 = 0;
                uint64_t v960 = *(void *)(v955 + 832);
                if (v960) {
                  __int16 v959 = *(_WORD *)(v960 + 8);
                }
                v952 = sub_1CCFDED5C(v955, 175, (const llvm::APInt *)&v1071, v800, v951, (uint64_t)v952, v954, v958, (uint64_t)v956, v957, v959);
                LODWORD(v954) = v961;
              }
              sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v952, v954);
              sub_1CD808A6C((uint64_t)v952);
LABEL_1265:
              uint64_t v1 = v1055;
              goto LABEL_1047;
            }
            uint64_t v876 = *(void *)(v876 + 32);
            if (!v876) {
              goto LABEL_1257;
            }
          }
        }
        if (!v875)
        {
LABEL_1218:
          uint64_t v889 = 198;
          goto LABEL_1258;
        }
        uint64_t v884 = *(void *)(v740 + 48);
        while (2)
        {
          uint64_t v885 = *(void *)(v884 + 16);
          int v886 = *(unsigned __int16 *)(v885 + 24);
          switch(v886)
          {
            case 56:
              if (*(_WORD *)(**(void **)(v885 + 32) + 24) == 15) {
                goto LABEL_1219;
              }
              break;
            case 192:
              uint64_t v887 = *(void *)(v885 + 32);
              if (*(void *)(v887 + 80) == v740 || *(void *)(v887 + 120) == v740) {
                goto LABEL_1219;
              }
              goto LABEL_1210;
            case 260:
              uint64_t v887 = *(void *)(v885 + 32);
LABEL_1210:
              BOOL v15 = v886 == 260;
              uint64_t v888 = 160;
              if (v15) {
                uint64_t v888 = 40;
              }
              if ((*(_DWORD *)(*(void *)(v887 + v888) + 76) - 10) < 4)
              {
LABEL_1219:
                if (v801 != 6) {
                  goto LABEL_1265;
                }
                while (*(_WORD *)(*(void *)(v875 + 16) + 24) != 58)
                {
                  uint64_t v875 = *(void *)(v875 + 32);
                  if (!v875) {
                    goto LABEL_1265;
                  }
                }
                goto LABEL_1218;
              }
              break;
            default:
              if ((v886 - 56) > 2) {
                goto LABEL_1219;
              }
              break;
          }
          uint64_t v884 = *(void *)(v884 + 32);
          if (!v884) {
            goto LABEL_1218;
          }
          continue;
        }
      }
      if (!*(unsigned char *)(*(void *)(v1 + 480) + 318))
      {
        int v771 = *(uint64_t **)(v740 + 32);
        uint64_t v770 = *(void *)(v740 + 40);
        unsigned int v772 = *(llvm **)v770;
        uint64_t v773 = v771[5];
        int v774 = *(unsigned __int16 *)(v773 + 24);
        BOOL v775 = v774 == 35 || v774 == 11;
        if (v775 && *(void *)v770 != 6)
        {
          uint64_t v777 = *(void *)(v773 + 80);
          v778 = (void *)(v777 + 24);
          if (*(_DWORD *)(v777 + 32) >= 0x41u) {
            v778 = (void *)*v778;
          }
          uint64_t v779 = *(void *)(v770 + 8);
          uint64_t v780 = *v771;
          uint64_t v781 = v771[1];
          uint64_t v782 = (void *)*v778;
          v1053 &= 0xFFFFFFFF00000000;
          v1054 &= 0xFFFFFFFF00000000;
          if (*v778 - 5 <= 3)
          {
            unint64_t v831 = v1052;
            int v832 = sub_1CD7EBF14(*v1052, (v782 - 4), (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
            unsigned int v1042 = v833;
            uint64_t v836 = sub_1CD7EBF14(*v1052, 4, (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
          }
          else
          {
            if ((v782 - 17) > 3)
            {
              uint64_t v1 = v1055;
              goto LABEL_1047;
            }
            unint64_t v831 = v1052;
            uint64_t v839 = sub_1CD7EBF14(*v1052, (v782 - 16), (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
            unsigned int v1045 = v840;
            v1049 = (llvm::detail::IEEEFloat *)v839;
            int v832 = sub_1CD7EBF14(*v1052, 16, (const llvm::APInt *)&v1071, (llvm *)5, 0, 0, 0);
            unsigned int v842 = v841;
            int v843 = sub_1CB9C2E80(v740);
            if (v843) {
              uint64_t v836 = (uint64_t *)v1049;
            }
            else {
              uint64_t v836 = v832;
            }
            if (v843) {
              unsigned int v834 = v1045;
            }
            else {
              unsigned int v834 = v842;
            }
            if (v843)
            {
              unsigned int v844 = v842;
            }
            else
            {
              int v832 = (uint64_t *)v1049;
              unsigned int v844 = v1045;
            }
            unsigned int v1042 = v844;
          }
          uint64_t v845 = *(void *)(*v831 + 832);
          uint64_t v1046 = (uint64_t)v836;
          unsigned int v1050 = v834;
          if (v845) {
            LOWORD(v845) = *(_WORD *)(v845 + 8);
          }
          int v847 = sub_1CCFDED5C(*v831, 175, (const llvm::APInt *)&v1071, v772, v779, v780, v781, v835, (uint64_t)v832, v1042 | v1054, v845);
          uint64_t v849 = *(void *)(*v1052 + 832);
          v1054 |= v1042;
          if (v849) {
            LOWORD(v849) = *(_WORD *)(v849 + 8);
          }
          uint64_t v1 = v1055;
          uint64_t v1053 = v1050 | (unint64_t)v1053;
          int v850 = sub_1CCFDED5C(*v1052, 175, (const llvm::APInt *)&v1071, v772, v779, (uint64_t)v847, v846, v848, v1046, v1053, v849);
          sub_1CD800DA0(*v1052, v740, 0, (uint64_t)v850, v851);
          sub_1CD808A6C((uint64_t)v850);
        }
      }
LABEL_1047:
      if ((void)v1071)
      {
        int v803 = *(unsigned __int8 *)v1071;
        if ((v803 - 4) > 0x1E)
        {
          if ((v803 - 3) >= 0xFFFFFFFE) {
            uint64_t v804 = v1071;
          }
          else {
            uint64_t v804 = 0;
          }
          if ((v803 - 3) < 0xFFFFFFFE)
          {
            if (v803 == 3) {
              *(void *)(v1071 + 8) = 0;
            }
            goto LABEL_1051;
          }
          unint64_t v805 = v804 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v1071 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1071 + 12)) {
            goto LABEL_1051;
          }
          uint64_t v890 = *(void *)(v1071 + 16);
          if ((v890 & 4) == 0) {
            goto LABEL_1051;
          }
          unint64_t v805 = v890 & 0xFFFFFFFFFFFFFFF8;
          if (!v805) {
            goto LABEL_1051;
          }
        }
        __src[0] = &v1071;
        sub_1CC5FA668(v805 + 16, __src);
      }
LABEL_1051:
      if (v738 == v737)
      {
        unint64_t v736 = (void *)*v1052;
        return sub_1CD7EA154(v736);
      }
    }
  }
  return sub_1CD7EA154(v736);
}

#error "1CB9ACFD8: too big function (funcsize=0)"

BOOL sub_1CB9C1B48(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      return *(unsigned char *)(*(void *)(a1 + 480) + 318) == 0;
    case 2:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 322);
      return v2 != 0;
    case 3:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 327);
      return v2 != 0;
    case 4:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 326);
      return v2 != 0;
    case 5:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 398);
      return v2 != 0;
    case 6:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 397);
      return v2 != 0;
    case 7:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 319);
      return v2 != 0;
    case 8:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 324);
      return v2 != 0;
    case 9:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 323);
      return v2 != 0;
    case 10:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 325);
      return v2 != 0;
    default:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 318);
      return v2 != 0;
  }
}

uint64_t sub_1CB9C1C2C(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t v6 = *(void *)(a2 + 80);
      int v7 = (unint64_t *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u) {
        int v7 = (unint64_t *)*v7;
      }
      unint64_t v8 = *v7;
      uint64_t result = 1;
      if ((v8 & 0xFFFFFFFFFFFFF807) != 0
        && (v8 & 0xFFFFFFFFFFFFFC03) != 0
        && v8 >= 0x100
        && (v8 & 0xFFFFFFFFFFFFFE01) != 0)
      {
        uint64_t result = (v8 & 0xFFFFFFFFFFFFF00FLL) == 0;
      }
      break;
    case 2:
      uint64_t result = sub_1CB9868C0(*(void *)(a2 + 80) + 24);
      break;
    case 3:
      uint64_t result = sub_1CB9867B8(*(void *)(a2 + 80) + 24);
      break;
    default:
      uint64_t v3 = *(void *)(a2 + 80);
      int v4 = (void *)(v3 + 24);
      if (*(_DWORD *)(v3 + 32) >= 0x41u) {
        int v4 = (void *)*v4;
      }
      uint64_t result = *v4 < 0x100uLL;
      break;
  }
  return result;
}

uint64_t sub_1CB9C1CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v7 = *(_DWORD *)(a7 + 8);
  switch(a6)
  {
    case 1:
    case 14:
    case 16:
    case 17:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v21 = *(void *)a7;
      uint64_t v22 = *(void *)a7 + 24 * v7;
      uint64_t v23 = v21 + 24 * (v7 + 1);
      sub_1CD3FC878((uint64_t)&v67, *(void *)(a1 + 296), (uint64_t)a4, a5, 0, 1, 0);
      return sub_1CB9C4298(a1, (uint64_t)v67, v68, v22, v23, v69 << 6);
    case 2:
    case 4:
    case 7:
    case 18:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v24 = *(void *)a7 + 24 * v7;
      uint64_t v25 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9C4298(a1, (uint64_t)a4, a5, v24, v25, 0);
    case 3:
    case 5:
    case 8:
    case 10:
    case 29:
    case 30:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v15 = *(void *)a7;
      uint64_t v16 = *(void *)a7 + 24 * v7;
      uint64_t v17 = v15 + 24 * (v7 + 1);
      sub_1CD3FC878((uint64_t)&v67, *(void *)(a1 + 296), (uint64_t)a4, a5, 0, 1, 0);
      return sub_1CB9C44B4(a1, (uint64_t)v67, v68, v16, v17, v69 << 6);
    case 6:
    case 9:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v28 = *(void *)a7 + 24 * v7;
      uint64_t v29 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9C488C(a1, (uint64_t)a4, a5, v28, v29, 0);
    case 15:
    case 19:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v30 = *(void *)a7;
      uint64_t v31 = *(void *)a7 + 24 * v7;
      uint64_t v32 = v30 + 24 * (v7 + 1);
      sub_1CD3FC878((uint64_t)&v67, *(void *)(a1 + 296), (uint64_t)a4, a5, 0, 1, 0);
      return sub_1CB9C488C(a1, (uint64_t)v67, v68, v31, v32, v69 << 6);
    case 20:
    case 21:
    case 22:
    case 23:
    case 27:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v19 = *(void *)a7 + 24 * v7;
      uint64_t v20 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9C7AD4(a1, a4, a5, v19, v20);
    case 24:
    case 31:
    case 46:
    case 47:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v26 = *(void *)a7 + 24 * v7;
      uint64_t v27 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9D0800(a1, (uint64_t)a4, a5, v26, v27);
    case 33:
    case 34:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v34 = *(void *)a7 + 24 * v7;
      uint64_t v35 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9D095C(a1, a4, a5, v34, v35);
    case 39:
    case 40:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v36 = *(void *)a7 + 24 * v7;
      uint64_t v37 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9C7B8C(a1, (uint64_t)a4, a5, v36, v37);
    case 44:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v41 = *(void *)a7 + 24 * v7;
      uint64_t v42 = *(void *)a7 + 24 * (v7 + 1);
      uint64_t v43 = *(unsigned char **)(a1 + 480);
      if (v43[319]) {
        BOOL v44 = v43[338] == 0;
      }
      else {
        BOOL v44 = 0;
      }
      BOOL v45 = v44 || v43[326] != 0;
      uint64_t v55 = *(void *)(a1 + 296);
      return sub_1CD402A24(a4, a5, v41, v42, 0, v45, v55);
    case 45:
      sub_1CD3D6DA0(a7, v7 + 2);
      char v38 = *(unsigned char **)(a1 + 480);
      if (v38[319]) {
        BOOL v39 = v38[338] == 0;
      }
      else {
        BOOL v39 = 0;
      }
      BOOL v40 = v39 || v38[326] != 0;
      uint64_t v46 = *(void *)a7;
      uint64_t v47 = *(void *)(a1 + 296);
      uint64_t v67 = a4;
      uint64_t v68 = a5;
      unsigned int v48 = (unsigned __int8 **)a4[5];
      BOOL v49 = *v48;
      int v50 = v48[1];
      if ((_BYTE)v49)
      {
        BOOL v51 = v49 - 120 < 0x20;
        if (v49 - 15 < 0x3C) {
          BOOL v51 = 1;
        }
        BOOL v52 = v49 - 2 < 6 || v51;
        uint64_t v70 = v49;
        int v71 = v50;
        unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v70);
      }
      else
      {
        if ((*((_DWORD *)v50 + 2) & 0xFE) == 0x12) {
          int v56 = *(unsigned __int8 *)(**((void **)v50 + 2) + 8);
        }
        else {
          int v56 = *((_DWORD *)v50 + 2);
        }
        BOOL v52 = v56 == 13;
        uint64_t v70 = v49;
        int v71 = v50;
        unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v70);
      }
      unsigned int v57 = ExtendedSizeInBits;
      if (v54 == 1) {
      BOOL v33 = v57 == 16 && v52;
      }
      if (!v33) {
        return v33;
      }
      unsigned int v58 = v7 + 1;
      uint64_t v59 = v46 + 24 * v7;
      uint64_t v60 = v46 + 24 * v58;
      sub_1CD3FCE48(a4, a5, (uint64_t)&v67, 0, 1, v40, v47);
      uint64_t v61 = (uint64_t)v67;
      *(_DWORD *)(v59 + 8) = v68;
      *(void *)uint64_t v59 = v61;
      uint64_t v70 = 0;
      int v71 = 0;
      *(void *)uint64_t v60 = sub_1CD7EBF14(v47, 0, (const llvm::APInt *)&v70, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(v60 + 8) = v62;
      if (!v70) {
        return v33;
      }
      int v63 = *v70;
      if ((v63 - 4) > 0x1E)
      {
        if ((v63 - 3) >= 0xFFFFFFFE) {
          uint64_t v66 = v70;
        }
        else {
          uint64_t v66 = 0;
        }
        if ((v63 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v65 = (unint64_t)(v66 + 8);
LABEL_71:
          int v72 = &v70;
          sub_1CC5FA668(v65 + 16, &v72);
          return v33;
        }
        if (v63 == 3) {
          *((void *)v70 + 1) = 0;
        }
      }
      else if ((v70[1] & 0x7F) == 2 || *((_DWORD *)v70 + 3))
      {
        uint64_t v64 = *((void *)v70 + 2);
        if ((v64 & 4) != 0)
        {
          unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
          if (v65) {
            goto LABEL_71;
          }
        }
      }
      return v33;
    default:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v12 = *(void *)a7 + 24 * v7;
      uint64_t v13 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CB9C44B4(a1, (uint64_t)a4, a5, v12, v13, 0);
  }
}

uint64_t *sub_1CB9C2420(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  switch(a4)
  {
    case 1:
      uint64_t v53 = *(void *)(a2 + 80);
      uint64_t v54 = (unsigned __int16 *)(v53 + 24);
      if (*(_DWORD *)(v53 + 32) >= 0x41u) {
        uint64_t v54 = *(unsigned __int16 **)v54;
      }
      uint64_t v8 = *v54;
      goto LABEL_66;
    case 2:
      uint64_t v9 = *(void *)(a2 + 80);
      unsigned int v10 = (llvm::detail::DoubleAPFloat *)&v86;
      uint64_t v11 = *(void *)(v9 + 32);
      if ((_UNKNOWN *)v11 == &unk_1CFB2E344)
      {
        unsigned int v10 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v86, (const llvm::detail::DoubleAPFloat *)(v9 + 32));
      }
      else
      {
        uint64_t v86 = *(void *)(v9 + 32);
        uint64_t v12 = (uint64_t *)*(unsigned int *)(v11 + 8);
        if ((v12 + 64) >= 0x80) {
          operator new[]();
        }
        char v13 = *(unsigned char *)(v9 + 52);
        int v14 = v13 & 7;
        char v89 = v13 & 0xF;
        int v88 = *(_DWORD *)(v9 + 48);
        BOOL v16 = (v13 & 6) != 0 && v14 != 3;
        if (v14 == 1 || v16)
        {
          uint64_t v18 = *(unsigned int *)(v11 + 8);
          if ((v18 - 64) > 0xFFFFFF7F) {
            uint64_t v12 = (uint64_t *)&v87;
          }
          uint64_t v21 = *(uint64_t **)(v9 + 40);
          uint64_t v20 = (uint64_t *)(v9 + 40);
          uint64_t v19 = v21;
          if ((*(_DWORD *)(*(v20 - 1) + 8) - 64) >= 0xFFFFFF80) {
            uint64_t v19 = v20;
          }
          if (v18 <= 0xFFFFFFBF)
          {
            unint64_t v22 = (unint64_t)(v18 + 64) >> 6;
            do
            {
              uint64_t v23 = *v19++;
              *v12++ = v23;
              --v22;
            }
            while (v22);
          }
        }
      }
      uint64_t v24 = v87;
      if ((_UNKNOWN *)v86 != &unk_1CFB2E344) {
        uint64_t v24 = &v85;
      }
      char v25 = *((unsigned char *)v24 + 28);
      if ((v25 & 7) == 3) {
        goto LABEL_59;
      }
      if ((_UNKNOWN *)v86 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v10, (llvm::APInt *)&v82);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v10, (uint64_t)&v82);
      }
      uint64_t v26 = (unsigned int *)&v82;
      if (v83 >= 0x41) {
        uint64_t v26 = (unsigned int *)v82;
      }
      unsigned int v27 = *v26;
      unsigned int v28 = (v27 >> 23);
      int v29 = (v27 >> 19) & 0xF;
      unsigned int v30 = v28 - 124;
      unsigned int v31 = (v29 | 0x10u) >> (125 - v28);
      if (v28 > 0x7C) {
        unsigned int v31 = (v27 >> 19) & 0xF;
      }
      else {
        unsigned int v30 = 0;
      }
      if (v28 | v29)
      {
        unsigned int v28 = v30;
        int v29 = v31;
      }
      int v32 = (16 * v28) | (v27 >> 31 << 7);
      goto LABEL_95;
    case 3:
      uint64_t v33 = *(void *)(a2 + 80);
      uint64_t v34 = (llvm::detail::DoubleAPFloat *)&v86;
      uint64_t v35 = *(void *)(v33 + 32);
      if ((_UNKNOWN *)v35 == &unk_1CFB2E344)
      {
        uint64_t v34 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v86, (const llvm::detail::DoubleAPFloat *)(v33 + 32));
      }
      else
      {
        uint64_t v86 = *(void *)(v33 + 32);
        uint64_t v36 = (uint64_t *)*(unsigned int *)(v35 + 8);
        if ((v36 + 64) >= 0x80) {
          operator new[]();
        }
        char v37 = *(unsigned char *)(v33 + 52);
        int v38 = v37 & 7;
        char v89 = v37 & 0xF;
        int v88 = *(_DWORD *)(v33 + 48);
        BOOL v40 = (v37 & 6) != 0 && v38 != 3;
        if (v38 == 1 || v40)
        {
          uint64_t v42 = *(unsigned int *)(v35 + 8);
          if ((v42 - 64) > 0xFFFFFF7F) {
            uint64_t v36 = (uint64_t *)&v87;
          }
          BOOL v45 = *(uint64_t **)(v33 + 40);
          BOOL v44 = (uint64_t *)(v33 + 40);
          uint64_t v43 = v45;
          if ((*(_DWORD *)(*(v44 - 1) + 8) - 64) >= 0xFFFFFF80) {
            uint64_t v43 = v44;
          }
          if (v42 <= 0xFFFFFFBF)
          {
            unint64_t v46 = (unint64_t)(v42 + 64) >> 6;
            do
            {
              uint64_t v47 = *v43++;
              *v36++ = v47;
              --v46;
            }
            while (v46);
          }
        }
      }
      unsigned int v48 = v87;
      if ((_UNKNOWN *)v86 != &unk_1CFB2E344) {
        unsigned int v48 = &v85;
      }
      char v25 = *((unsigned char *)v48 + 28);
      if ((v25 & 7) != 3)
      {
        if ((_UNKNOWN *)v86 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v34, (llvm::APInt *)&v82);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v34, (uint64_t)&v82);
        }
        unint64_t v65 = (unsigned int *)&v82;
        if (v83 >= 0x41) {
          unint64_t v65 = (unsigned int *)v82;
        }
        unsigned int v66 = *v65;
        unsigned int v67 = (v66 >> 10) & 0x1F;
        int v29 = (v66 >> 6) & 0xF;
        unsigned int v68 = v67 - 12;
        unsigned int v69 = (v29 | 0x10u) >> (13 - ((v66 >> 10) & 0x1F));
        if (v67 > 0xC) {
          unsigned int v69 = (v66 >> 6) & 0xF;
        }
        else {
          unsigned int v68 = 0;
        }
        if (v67 | v29)
        {
          unsigned int v67 = v68;
          int v29 = v69;
        }
        int v32 = (v66 >> 8) & 0x80 | (16 * v67);
LABEL_95:
        uint64_t v70 = v32 | v29;
        uint64_t v71 = *(void *)(a1 + 296);
        int v72 = *(unsigned __int8 **)(a2 + 64);
        uint64_t v80 = v72;
        if (v72) {
          llvm::MetadataTracking::track((uint64_t)&v80, v72, 2);
        }
        int v81 = *(_DWORD *)(a2 + 60);
        unsigned int v57 = sub_1CD7EBF14(v71, v70, (const llvm::APInt *)&v80, (llvm *)6, 0, 1, 0);
        if (!v80) {
          goto LABEL_101;
        }
        int v73 = *v80;
        if ((v73 - 4) > 0x1E)
        {
          if ((v73 - 3) >= 0xFFFFFFFE) {
            uint64_t v76 = v80;
          }
          else {
            uint64_t v76 = 0;
          }
          if ((v73 - 3) < 0xFFFFFFFE)
          {
            if (v73 == 3) {
              *((void *)v80 + 1) = 0;
            }
            goto LABEL_101;
          }
          unint64_t v77 = (unint64_t)(v76 + 8);
        }
        else if ((v80[1] & 0x7F) != 2 && !*((_DWORD *)v80 + 3) {
               || (uint64_t v79 = *((void *)v80 + 2), (v79 & 4) == 0)
        }
               || (unint64_t v77 = v79 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_101:
          if (v83 >= 0x41 && v82) {
            MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
          }
          goto LABEL_126;
        }
        uint64_t v84 = &v80;
        sub_1CC5FA668(v77 + 16, &v84);
        goto LABEL_101;
      }
LABEL_59:
      uint64_t v49 = *(void *)(a1 + 296);
      if ((v25 & 8) != 0)
      {
        uint64_t v61 = *(unsigned __int8 **)(a2 + 64);
        unint64_t v82 = v61;
        if (v61) {
          llvm::MetadataTracking::track((uint64_t)&v82, v61, 2);
        }
        unsigned int v83 = *(_DWORD *)(a2 + 60);
        uint64_t v51 = v49;
        uint64_t v52 = 128;
      }
      else
      {
        int v50 = *(unsigned __int8 **)(a2 + 64);
        unint64_t v82 = v50;
        if (v50) {
          llvm::MetadataTracking::track((uint64_t)&v82, v50, 2);
        }
        unsigned int v83 = *(_DWORD *)(a2 + 60);
        uint64_t v51 = v49;
        uint64_t v52 = 0;
      }
      unsigned int v57 = sub_1CD7EBF14(v51, v52, (const llvm::APInt *)&v82, (llvm *)6, 0, 1, 0);
      if (v82)
      {
        int v62 = *v82;
        if ((v62 - 4) > 0x1E)
        {
          if ((v62 - 3) >= 0xFFFFFFFE) {
            uint64_t v75 = v82;
          }
          else {
            uint64_t v75 = 0;
          }
          if ((v62 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v64 = (unint64_t)(v75 + 8);
LABEL_115:
            uint64_t v80 = (unsigned __int8 *)&v82;
            sub_1CC5FA668(v64 + 16, &v80);
            goto LABEL_126;
          }
          if (v62 == 3) {
            *((void *)v82 + 1) = 0;
          }
        }
        else if ((v82[1] & 0x7F) == 2 || *((_DWORD *)v82 + 3))
        {
          uint64_t v63 = *((void *)v82 + 2);
          if ((v63 & 4) != 0)
          {
            unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
            if (v64) {
              goto LABEL_115;
            }
          }
        }
      }
LABEL_126:
      if ((_UNKNOWN *)v86 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v87);
      }
      else if ((*(_DWORD *)(v86 + 8) - 64) <= 0xFFFFFF7F && v87)
      {
        MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
      }
      return v57;
    default:
      uint64_t v6 = *(void *)(a2 + 80);
      unsigned int v7 = (uint64_t *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u) {
        unsigned int v7 = (uint64_t *)*v7;
      }
      uint64_t v8 = *v7;
LABEL_66:
      uint64_t v55 = *(void *)(a1 + 296);
      int v56 = *(unsigned __int8 **)(a2 + 64);
      int v85 = v56;
      if (v56) {
        llvm::MetadataTracking::track((uint64_t)&v85, v56, 2);
      }
      LODWORD(v86) = *(_DWORD *)(a2 + 60);
      unsigned int v57 = sub_1CD7EBF14(v55, v8, (const llvm::APInt *)&v85, (llvm *)6, 0, 1, 0);
      if (!v85) {
        return v57;
      }
      int v58 = *v85;
      if ((v58 - 4) > 0x1E)
      {
        if ((v58 - 3) >= 0xFFFFFFFE) {
          unint64_t v74 = v85;
        }
        else {
          unint64_t v74 = 0;
        }
        if ((v58 - 3) < 0xFFFFFFFE)
        {
          if (v58 == 3) {
            *((void *)v85 + 1) = 0;
          }
          return v57;
        }
        unint64_t v60 = (unint64_t)(v74 + 8);
      }
      else
      {
        if ((v85[1] & 0x7F) != 2 && !*((_DWORD *)v85 + 3)) {
          return v57;
        }
        uint64_t v59 = *((void *)v85 + 2);
        if ((v59 & 4) == 0) {
          return v57;
        }
        unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
        if (!v60) {
          return v57;
        }
      }
      unint64_t v82 = (unsigned __int8 *)&v85;
      sub_1CC5FA668(v60 + 16, &v82);
      return v57;
  }
}

uint64_t *sub_1CB9C2B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6, llvm *a7, uint64_t a8)
{
  int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 36 || v8 == 12) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8 == 35 || v8 == 11) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(unsigned __int16 *)(a4 + 24);
  if (v13 == 36 || v13 == 12) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v13 == 35 || v13 == 11) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  if (!(v10 | v12) || !(v15 | v17)) {
    return 0;
  }
  if (v10)
  {
    uint64_t v24 = *(void *)(v10 + 80);
    uint64_t v26 = *(void **)(v24 + 32);
    char v25 = (llvm::detail::DoubleAPFloat *)(v24 + 32);
    if (v26 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v25, (llvm::APInt *)&v48);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v25, (uint64_t)&v48);
    }
    if (DWORD2(v48) >= 0x41) {
      unsigned int v27 = (uint64_t *)v48;
    }
    else {
      unsigned int v27 = (uint64_t *)&v48;
    }
    uint64_t v28 = *v27;
    if (DWORD2(v48) >= 0x41 && (void)v48) {
      MEMORY[0x1D25D9CB0]();
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v12 + 80);
    unsigned int v30 = (unsigned __int16 *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u) {
      unsigned int v30 = *(unsigned __int16 **)v30;
    }
    uint64_t v28 = *v30;
  }
  if (v15)
  {
    uint64_t v31 = *(void *)(v15 + 80);
    uint64_t v33 = *(void **)(v31 + 32);
    int v32 = (llvm::detail::DoubleAPFloat *)(v31 + 32);
    if (v33 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v32, (llvm::APInt *)&v48);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v32, (uint64_t)&v48);
    }
    if (DWORD2(v48) >= 0x41) {
      uint64_t v34 = (uint64_t *)v48;
    }
    else {
      uint64_t v34 = (uint64_t *)&v48;
    }
    uint64_t v35 = *v34;
    if (DWORD2(v48) >= 0x41 && (void)v48) {
      MEMORY[0x1D25D9CB0]();
    }
  }
  else
  {
    uint64_t v36 = *(void *)(v17 + 80);
    char v37 = (unsigned __int16 *)(v36 + 24);
    if (*(_DWORD *)(v36 + 32) >= 0x41u) {
      char v37 = *(unsigned __int16 **)v37;
    }
    uint64_t v35 = *v37;
  }
  *(void *)&long long v48 = sub_1CD7EBF14(*(void *)(a1 + 296), v28 + (v35 << 16), a6, (llvm *)6, 0, 1, 0);
  *((void *)&v48 + 1) = v38;
  uint64_t v39 = *(void *)(a1 + 296);
  if (*(unsigned char *)(*(void *)(*(void *)(v39 + 40) + 16) + 318)) {
    int v40 = 4068;
  }
  else {
    int v40 = 4069;
  }
  uint64_t v41 = *(unsigned __int8 **)a6;
  unint64_t v46 = v41;
  if (v41) {
    llvm::MetadataTracking::track((uint64_t)&v46, v41, 2);
  }
  int v47 = *((_DWORD *)a6 + 2);
  uint64_t v18 = sub_1CD3FC77C(v39, v40, (uint64_t)&v46, a7, a8, 0, &v48);
  if (v46)
  {
    int v42 = *v46;
    if ((v42 - 4) > 0x1E)
    {
      if ((v42 - 3) >= 0xFFFFFFFE) {
        BOOL v45 = v46;
      }
      else {
        BOOL v45 = 0;
      }
      if ((v42 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v44 = (unint64_t)(v45 + 8);
LABEL_70:
        uint64_t v49 = &v46;
        sub_1CC5FA668(v44 + 16, &v49);
        return v18;
      }
      if (v42 == 3) {
        *((void *)v46 + 1) = 0;
      }
    }
    else if ((v46[1] & 0x7F) == 2 || *((_DWORD *)v46 + 3))
    {
      uint64_t v43 = *((void *)v46 + 2);
      if ((v43 & 4) != 0)
      {
        unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (v44) {
          goto LABEL_70;
        }
      }
    }
  }
  return v18;
}

uint64_t sub_1CB9C2DD8(int a1)
{
  uint64_t result = 1;
  if ((a1 - 417) >= 5
    && ((a1 - 96) > 0x2D || ((1 << (a1 - 96)) & 0x200000000005) == 0))
  {
    unsigned int v3 = a1 - 231;
    if (v3 > 0xA || ((1 << v3) & 0x409) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CB9C2E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 8);
  unsigned int v3 = (llvm::detail::IEEEFloat *)(a1 + 8);
  uint64_t v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  if (v4 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::subtract((uint64_t)v3, (uint64_t)v5, a3);
  }
  else {
    return llvm::detail::IEEEFloat::addOrSubtract(v3, v5, a3, 1);
  }
}

uint64_t sub_1CB9C2E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 8);
  unsigned int v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v4 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::multiply(v3, v5, a3);
  }
  else {
    return llvm::detail::IEEEFloat::multiply(v3, v5, a3);
  }
}

uint64_t sub_1CB9C2E80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    int v3 = *(unsigned __int16 *)(v2 + 24);
    if ((v3 - 58) < 0xFFFFFFFE) {
      break;
    }
    int v4 = *(uint64_t **)(v2 + 32);
    uint64_t v5 = *v4;
    if (*v4 == a1) {
      break;
    }
    if (*(_WORD *)(v5 + 24) == 175)
    {
      uint64_t v6 = *(void *)(*(void *)(v5 + 32) + 40);
      int v7 = *(unsigned __int16 *)(v6 + 24);
      if (v7 == 35 || v7 == 11)
      {
        uint64_t v9 = *(void *)(v6 + 80);
        uint64_t v10 = (void *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u) {
          uint64_t v10 = (void *)*v10;
        }
        if (v3 == 56 && *v10 < 5uLL) {
          break;
        }
      }
    }
    uint64_t v11 = v4[5];
    if (*(_WORD *)(v11 + 24) == 175)
    {
      uint64_t v12 = *(void *)(*(void *)(v11 + 32) + 40);
      int v13 = *(unsigned __int16 *)(v12 + 24);
      if (v13 == 35 || v13 == 11)
      {
        uint64_t v15 = *(void *)(v12 + 80);
        BOOL v16 = (void *)(v15 + 24);
        if (*(_DWORD *)(v15 + 32) >= 0x41u) {
          BOOL v16 = (void *)*v16;
        }
        if (*v16 < 5uLL) {
          break;
        }
      }
    }
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return 1;
    }
  }
  return 0;
}

BOOL sub_1CB9C2F60(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  sub_1CD3FC878((uint64_t)&v9, *(void *)(a1 + 296), a2, a3, 0, 1, 0);
  return sub_1CB9C4298(a1, v9, v10, a4, a5, v11 << 6);
}

BOOL sub_1CB9C2FD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  sub_1CD3FC878((uint64_t)v9, *(void *)(a1 + 296), a2, a3, 0, 1, 0);
  return sub_1CB9C44B4(a1, v9[0], v9[1], a4, a5, v10 << 6);
}

uint64_t sub_1CB9C3048(uint64_t a1, void **a2, _DWORD *a3, int *a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int16 *)(*(void *)a3 + 24);
  if (v4 != 35 && v4 != 11) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)a3 + 80);
  uint64_t v9 = (unint64_t *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u) {
    uint64_t v9 = (unint64_t *)*v9;
  }
  int v10 = *a2;
  int v11 = *((unsigned __int16 *)*a2 + 12);
  if ((v11 - 173) < 0xFFFFFFFE) {
    return 0;
  }
  if (*(unsigned char *)(v10[5] + 16 * *((unsigned int *)a2 + 2)) != 4) {
    return 0;
  }
  unint64_t v12 = *v9;
  if (*a4 != 22 && *a4 != 17) {
    return 0;
  }
  if (v12 > 1) {
    return 0;
  }
  uint64_t v14 = v10[6];
  if (v14)
  {
    int v15 = 4;
    do
    {
      int v16 = *(unsigned __int16 *)(*(void *)(v14 + 16) + 24);
      if (v16 != 260 && v16 != 192) {
        return 0;
      }
      if (!--v15) {
        return 0;
      }
      uint64_t v14 = *(void *)(v14 + 32);
    }
    while (v14);
  }
  uint64_t result = 0;
  uint64_t v17 = (BOOL *)v10[4];
  uint64_t v18 = *v17;
  int v19 = *(unsigned __int16 *)(*v17 + 24);
  if (v19 != 50 && v19 != 148 && v19 != 65527)
  {
    uint64_t v21 = *(void *)(v18 + 48);
    if (v21)
    {
      while (*(_WORD *)(*(void *)(v21 + 16) + 24) != 49)
      {
        uint64_t v21 = *(void *)(v21 + 32);
        if (!v21) {
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_29:
    uint64_t result = 0;
    uint64_t v22 = v17[5];
    int v23 = *(unsigned __int16 *)(v22 + 24);
    if (v23 != 50 && v23 != 148 && v23 != 65527)
    {
      uint64_t v25 = *(void *)(v22 + 48);
      if (v25)
      {
        while (*(_WORD *)(*(void *)(v25 + 16) + 24) != 49)
        {
          uint64_t v25 = *(void *)(v25 + 32);
          if (!v25) {
            goto LABEL_37;
          }
        }
        return 0;
      }
LABEL_37:
      unint64_t v65 = v12;
      for (uint64_t i = 0; i != 8; i += 4)
      {
        unsigned int v27 = &(&v71)[i];
        *((_DWORD *)v27 + 2) = 1;
        *unsigned int v27 = 0;
        *((_DWORD *)v27 + 6) = 1;
        _OWORD v27[2] = 0;
      }
      sub_1CD7F121C(*(void *)(a1 + 296), v18, v17[1], 0, (uint64_t)&v66);
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      uint64_t v28 = v66;
      uint64_t v71 = v66;
      unsigned int v29 = v67;
      unsigned int v72 = v67;
      unsigned int v67 = 0;
      if (v74 >= 0x41 && v73)
      {
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        uint64_t v73 = v68;
        unsigned int v74 = v69;
        unsigned int v69 = 0;
        if (v67 >= 0x41 && v66) {
          MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v73 = v68;
        unsigned int v74 = v69;
      }
      sub_1CD7F121C(*(void *)(a1 + 296), *(void *)(*((void *)*a2 + 4) + 40), *(void *)(*((void *)*a2 + 4) + 48), 0, (uint64_t)&v66);
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      uint64_t v31 = v66;
      uint64_t v75 = v66;
      unsigned int v32 = v67;
      unsigned int v76 = v67;
      unsigned int v67 = 0;
      if (v78[0] >= 0x41u && v77)
      {
        int v62 = v66;
        unsigned int v61 = v32;
        MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
        unsigned int v32 = v61;
        uint64_t v31 = v62;
        uint64_t v77 = v68;
        v78[0] = v69;
        unsigned int v69 = 0;
        if (v67 >= 0x41 && v66)
        {
          MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
          unsigned int v32 = v61;
          uint64_t v31 = v62;
        }
      }
      else
      {
        uint64_t v77 = v68;
        v78[0] = v69;
      }
      uint64_t v33 = &v71;
      if (v29 >= 0x41) {
        uint64_t v33 = v28;
      }
      if (*v33 != 65534) {
        goto LABEL_51;
      }
      if (v32 < 0x41) {
        uint64_t v31 = (unsigned __int8 *)&v75;
      }
      if (*(void *)v31 == 65534)
      {
        if (v11 == 172 && v65 == 1 || v11 == 171 && !v65)
        {
          uint64_t v39 = (void *)(*((void *)*a2 + 5) + 16 * *((unsigned int *)a2 + 2));
          *a4 = sub_1CD7E9F74(*a4, *v39, v39[1]);
          v65 ^= 1uLL;
        }
      }
      else
      {
LABEL_51:
        uint64_t result = 0;
        if (v11 != 172 || v65)
        {
LABEL_53:
          for (unint64_t j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
          {
            uint64_t v35 = &(&v71)[j / 2];
            if (v78[j] >= 0x41u && v35[6])
            {
              uint64_t v36 = result;
              MEMORY[0x1D25D9CB0](v35[6], 0x1000C8000313F17);
              uint64_t result = v36;
            }
            if (*((_DWORD *)v35 + 10) >= 0x41u)
            {
              char v37 = v35[4];
              if (v37)
              {
                uint64_t v38 = result;
                MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
                uint64_t result = v38;
              }
            }
          }
          return result;
        }
        unint64_t v65 = 0;
      }
      int v40 = (unsigned int *)*a2;
      uint64_t v41 = (unsigned __int8 *)*((void *)*a2 + 8);
      unsigned int v66 = v41;
      int v42 = v40;
      if (v41)
      {
        llvm::MetadataTracking::track((uint64_t)&v66, v41, 2);
        int v42 = *a2;
      }
      unsigned int v67 = v40[15];
      uint64_t v43 = *(void *)(a1 + 296);
      unint64_t v44 = (uint64_t *)*((void *)v42 + 4);
      uint64_t v45 = *v44;
      uint64_t v46 = v44[1];
      uint64_t v47 = v44[5];
      uint64_t v48 = v44[6];
      uint64_t v49 = *(void *)(v43 + 832);
      if (v49) {
        LOWORD(v49) = *(_WORD *)(v49 + 8);
      }
      int v50 = sub_1CCFDED5C(v43, 146, (const llvm::APInt *)&v66, (llvm *)0x26, 0, v45, v46, v30, v47, v48, v49);
      __int16 v51 = 0;
      *a2 = v50;
      *((_DWORD *)a2 + 2) = v52;
      uint64_t v53 = *(llvm::APFloatBase **)(a1 + 296);
      uint64_t v54 = *((void *)v53 + 104);
      if (v54) {
        __int16 v51 = *(_WORD *)(v54 + 8);
      }
      *a2 = sub_1CD7F3564(v53, (const char *)0xD8, (uint64_t)&v66, (llvm *)5, 0, (uint64_t)v50, a2[1], v51);
      *((_DWORD *)a2 + 2) = v55;
      *(void *)a3 = sub_1CD7EBF14(*(void *)(a1 + 296), 65537 * v65, (const llvm::APInt *)&v66, (llvm *)5, 0, 0, 0);
      a3[2] = v56;
      if (v66)
      {
        int v57 = *v66;
        if ((v57 - 4) > 0x1E)
        {
          if ((v57 - 3) >= 0xFFFFFFFE) {
            int v58 = v66;
          }
          else {
            int v58 = 0;
          }
          if ((v57 - 3) < 0xFFFFFFFE)
          {
            if (v57 == 3) {
              *((void *)v66 + 1) = 0;
            }
            goto LABEL_78;
          }
          unint64_t v59 = (unint64_t)(v58 + 8);
        }
        else
        {
          if ((v66[1] & 0x7F) != 2 && !*((_DWORD *)v66 + 3)) {
            goto LABEL_78;
          }
          uint64_t v60 = *((void *)v66 + 2);
          if ((v60 & 4) == 0) {
            goto LABEL_78;
          }
          unint64_t v59 = v60 & 0xFFFFFFFFFFFFFFF8;
          if (!v59) {
            goto LABEL_78;
          }
        }
        uint64_t v70 = &v66;
        sub_1CC5FA668(v59 + 16, &v70);
      }
LABEL_78:
      uint64_t result = 1;
      goto LABEL_53;
    }
  }
  return result;
}

BOOL sub_1CB9C366C(uint64_t a1)
{
  if (*(_WORD *)(a1 + 24) == 216
    && (uint64_t v1 = *(unsigned int **)(a1 + 32), v2 = *(void *)v1, *(_WORD *)(*(void *)v1 + 24) == 146)
    && *(unsigned char *)(*(void *)(v2 + 40) + 16 * v1[2]) == 49
    && (int v3 = *(void **)(v2 + 32), *(_WORD *)(*v3 + 24) == 395))
  {
    return *(unsigned __int16 *)(v3[5] + 24) == 395;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1CB9C36D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = 1;
  if (v1)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v1 + 16);
      unsigned int v5 = *(unsigned __int16 *)(v4 + 24);
      if (v5 <= 0x103)
      {
        if (v5 == 192) {
          goto LABEL_7;
        }
        if (v5 == 46) {
          return 0;
        }
      }
      else
      {
        if (v5 == 260) {
          goto LABEL_16;
        }
        if (v5 == 428)
        {
LABEL_7:
          uint64_t v6 = *(void *)(v4 + 32);
          if (*(void *)(v6 + 80) == a1 || *(void *)(v6 + 120) == a1) {
            return 0;
          }
          goto LABEL_16;
        }
      }
      if ((sub_1CB9C2DD8(*(unsigned __int16 *)(v4 + 24)) & 1) == 0
        && (v5 - 202 > 0x15 || ((1 << (v5 + 54)) & 0x300003) == 0))
      {
        return 0;
      }
LABEL_16:
      uint64_t v1 = *(void *)(v1 + 32);
      if (!v1) {
        return 1;
      }
    }
  }
  return v2;
}

uint64_t *sub_1CB9C37A8(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v36 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v36, v4, 2);
  }
  int v37 = *(_DWORD *)(a2 + 60);
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = (const llvm::detail::IEEEFloat *)(v5 + 32);
  if (*(_UNKNOWN **)(v5 + 32) != &unk_1CFB2E344)
  {
    if ((*(unsigned char *)(v5 + 52) & 8) == 0)
    {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (uint64_t)&v39);
      goto LABEL_6;
    }
    uint64_t v17 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v40, v6);
LABEL_42:
    if ((_UNKNOWN *)v40 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::changeSign(v17);
    }
    else {
      v42 ^= 8u;
    }
    uint64_t v18 = sub_1CD7ECA8C(*(void *)(a1 + 296), (llvm::LLVMContext *)&v39, (const llvm::APFloat *)&v36, (llvm *)9, 0, 0);
    if ((_UNKNOWN *)v40 == &unk_1CFB2E344)
    {
      sub_1CB845718(&v41);
    }
    else if ((*(_DWORD *)(v40 + 8) - 64) <= 0xFFFFFF7F && v41)
    {
      MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
    }
    uint64_t v19 = v18[10];
    uint64_t v21 = *(void **)(v19 + 32);
    uint64_t v20 = (llvm::detail::DoubleAPFloat *)(v19 + 32);
    if (v21 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v20, (llvm::APInt *)&v39);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v20, (uint64_t)&v39);
    }
    uint64_t v22 = (unint64_t *)&v39;
    if (v40 >= 0x41) {
      uint64_t v22 = (unint64_t *)v39;
    }
    unint64_t v23 = *v22;
    uint64_t v34 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v34, v36, 2);
    }
    int v35 = v37;
    uint64_t v24 = sub_1CB9C48D8(a1, v23, (uint64_t)&v34, *(llvm **)v18[5], *(void *)(v18[5] + 8));
    if (!v34) {
      goto LABEL_56;
    }
    int v25 = *v34;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        unsigned int v29 = v34;
      }
      else {
        unsigned int v29 = 0;
      }
      if ((v25 - 3) < 0xFFFFFFFE)
      {
        if (v25 == 3) {
          *((void *)v34 + 1) = 0;
        }
        goto LABEL_56;
      }
      unint64_t v30 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        goto LABEL_56;
      }
      uint64_t v33 = *((void *)v34 + 2);
      if ((v33 & 4) == 0) {
        goto LABEL_56;
      }
      unint64_t v30 = v33 & 0xFFFFFFFFFFFFFFF8;
      if (!v30) {
        goto LABEL_56;
      }
    }
    uint64_t v38 = &v34;
    sub_1CC5FA668(v30 + 16, &v38);
LABEL_56:
    uint64_t v26 = *(llvm::APFloatBase **)(a1 + 296);
    uint64_t v27 = *((void *)v26 + 104);
    if (v27) {
      __int16 v28 = *(_WORD *)(v27 + 8);
    }
    else {
      __int16 v28 = 0;
    }
    uint64_t v9 = sub_1CD7F3564(v26, (const char *)0xDE, (uint64_t)&v36, (llvm *)9, 0, (uint64_t)v24, 0, v28);
    goto LABEL_14;
  }
  if ((*(unsigned char *)(*(void *)(v5 + 40) + 28) & 8) != 0)
  {
    uint64_t v17 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v40, v6);
    goto LABEL_42;
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (llvm::APInt *)&v39);
LABEL_6:
  int v7 = (unint64_t *)&v39;
  if (v40 >= 0x41) {
    int v7 = (unint64_t *)v39;
  }
  unint64_t v8 = *v7;
  uint64_t v34 = v36;
  if (v36) {
    llvm::MetadataTracking::track((uint64_t)&v34, v36, 2);
  }
  int v35 = v37;
  uint64_t v9 = sub_1CB9C48D8(a1, v8, (uint64_t)&v34, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8));
  if (v34)
  {
    int v10 = *v34;
    if ((v10 - 4) > 0x1E)
    {
      if ((v10 - 3) >= 0xFFFFFFFE) {
        int v15 = v34;
      }
      else {
        int v15 = 0;
      }
      if ((v10 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v16 = (unint64_t)(v15 + 8);
LABEL_33:
        uint64_t v38 = &v34;
        sub_1CC5FA668(v16 + 16, &v38);
        goto LABEL_14;
      }
      if (v10 == 3) {
        *((void *)v34 + 1) = 0;
      }
    }
    else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
    {
      uint64_t v32 = *((void *)v34 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v16 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v16) {
          goto LABEL_33;
        }
      }
    }
  }
LABEL_14:
  if (v40 >= 0x41 && v39) {
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
  }
  if (v36)
  {
    int v11 = *v36;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        int v13 = v36;
      }
      else {
        int v13 = 0;
      }
      if ((v11 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v14 = (unint64_t)(v13 + 8);
LABEL_27:
        uint64_t v39 = &v36;
        sub_1CC5FA668(v14 + 16, &v39);
        return v9;
      }
      if (v11 == 3) {
        *((void *)v36 + 1) = 0;
      }
    }
    else if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
    {
      uint64_t v31 = *((void *)v36 + 2);
      if ((v31 & 4) != 0)
      {
        unint64_t v14 = v31 & 0xFFFFFFFFFFFFFFF8;
        if (v14) {
          goto LABEL_27;
        }
      }
    }
  }
  return v9;
}

uint64_t *sub_1CB9C3BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v5 = (unint64_t *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = (unint64_t *)*v5;
  }
  unint64_t v6 = *v5;
  int v7 = *(unsigned __int8 **)(a2 + 64);
  unint64_t v14 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v14, v7, 2);
  }
  int v15 = *(_DWORD *)(a2 + 60);
  unint64_t v8 = sub_1CB9C48D8(a1, v6, (uint64_t)&v14, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8));
  if (v14)
  {
    int v9 = *v14;
    if ((v9 - 4) > 0x1E)
    {
      if ((v9 - 3) >= 0xFFFFFFFE) {
        int v11 = v14;
      }
      else {
        int v11 = 0;
      }
      if ((v9 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v12 = (unint64_t)(v11 + 8);
LABEL_15:
        unint64_t v16 = &v14;
        sub_1CC5FA668(v12 + 16, &v16);
        return v8;
      }
      if (v9 == 3) {
        *((void *)v14 + 1) = 0;
      }
    }
    else if ((v14[1] & 0x7F) == 2 || *((_DWORD *)v14 + 3))
    {
      uint64_t v13 = *((void *)v14 + 2);
      if ((v13 & 4) != 0)
      {
        unint64_t v12 = v13 & 0xFFFFFFFFFFFFFFF8;
        if (v12) {
          goto LABEL_15;
        }
      }
    }
  }
  return v8;
}

uint64_t sub_1CB9C3CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = 1;
  if (v2)
  {
    while (1)
    {
      uint64_t v5 = *(void *)(v2 + 16);
      int v6 = *(unsigned __int16 *)(v5 + 24);
      if (v6 == 46) {
        return 0;
      }
      if ((sub_1CB9C2DD8(*(unsigned __int16 *)(v5 + 24)) & 1) == 0
        && ((v6 - 202) > 0x15 || ((1 << (v6 + 54)) & 0x300003) == 0))
      {
        return 0;
      }
      if ((v6 & 0xFFFE) == 0xDE)
      {
        if ((sub_1CB9C3CFC(v5, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_44;
      }
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 20);
      if (v8 != *(void *)a2)
      {
        unsigned int v13 = *(_DWORD *)(a2 + 16);
        goto LABEL_22;
      }
      if (!v9) {
        break;
      }
      int v10 = 0;
      uint64_t v11 = 8 * v9;
      unint64_t v12 = *(void **)(a2 + 8);
      while (*v12 != v5)
      {
        if (*v12 == -2) {
          int v10 = v12;
        }
        ++v12;
        v11 -= 8;
        if (!v11)
        {
          if (!v10) {
            goto LABEL_19;
          }
          void *v10 = v5;
          --*(_DWORD *)(a2 + 24);
          break;
        }
      }
LABEL_43:
      if ((*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24)) > 2) {
        return 0;
      }
LABEL_44:
      uint64_t v2 = *(void *)(v2 + 32);
      if (!v2) {
        return 1;
      }
    }
LABEL_19:
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    if (v9 < v13)
    {
      *(_DWORD *)(a2 + 20) = v9 + 1;
      *(void *)(v8 + 8 * v9) = v5;
      goto LABEL_43;
    }
LABEL_22:
    if (3 * v13 <= 4 * ((int)v9 - *(_DWORD *)(a2 + 24)))
    {
      if (v13 >= 0x40) {
        v13 *= 2;
      }
      else {
        unsigned int v13 = 128;
      }
    }
    else if (v13 - v9 >= v13 >> 3)
    {
      goto LABEL_24;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v13);
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 8);
LABEL_24:
    unsigned int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    unint64_t v16 = (void *)(v8 + 8 * v15);
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      uint64_t v18 = 0;
LABEL_36:
      if (v18) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v16;
      }
      if (*v22 != v5)
      {
        if (*v22 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        void *v22 = v5;
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != v5)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        unint64_t v16 = (void *)(v8 + 8 * (v21 & v14));
        uint64_t v17 = *v16;
        if (*v16 == -1) {
          goto LABEL_36;
        }
      }
    }
    goto LABEL_43;
  }
  return v3;
}

uint64_t *sub_1CB9C3F24(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  unint64_t v12 = (uint64_t *)a2;
  unsigned int v14 = *(unsigned __int8 **)(a2 + 64);
  __int16 v51 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v51, v14, 2);
  }
  unint64_t v15 = a3 & 0xFFFFFFFF00000000;
  int v52 = *((_DWORD *)v12 + 15);
  int v16 = *((unsigned __int16 *)v12 + 12);
  if (v16 == 222)
  {
    uint64_t v17 = *(uint64_t **)v12[4];
    int v18 = *((unsigned __int16 *)v17 + 12);
    unint64_t v19 = a3 & 0xFFFFFFFF00000000;
  }
  else
  {
    int v18 = *((unsigned __int16 *)v12 + 12);
    uint64_t v17 = v12;
    unint64_t v19 = a3;
  }
  if (v18 == 223)
  {
    uint64_t v17 = *(uint64_t **)v17[4];
    v19 &= 0xFFFFFFFF00000000;
    int v20 = *((unsigned __int16 *)v17 + 12);
  }
  else
  {
    int v20 = v18;
  }
  if (v20 == 212 && (a4 & 1) == 0)
  {
    unsigned int v21 = (_DWORD *)v17[4];
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(*(void *)v21 + 48);
    if (v23)
    {
      int v24 = v21[2];
      int v25 = 1;
      while (1)
      {
        if (*(_DWORD *)(v23 + 8) == v24)
        {
          if (!v25)
          {
            LODWORD(v23) = 1;
            goto LABEL_20;
          }
          --v25;
        }
        uint64_t v23 = *(void *)(v23 + 32);
        if (!v23) {
          goto LABEL_20;
        }
      }
    }
    int v25 = 1;
LABEL_20:
    if (v25) {
      a4 = 1;
    }
    else {
      a4 = v23;
    }
    if (*(_WORD *)(v22 + 24) == 395)
    {
      uint64_t v26 = *(unsigned char **)(a1 + 480);
      if (v26[319]) {
        BOOL v27 = v26[338] == 0;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        a4 = 1;
      }
      else if (v26[326])
      {
        a4 = 1;
      }
    }
  }
  if (*((_WORD *)v17 + 12) != 212 || a4 == 0)
  {
    if (v16 == 36 || v16 == 12)
    {
      if (a5)
      {
        sub_1CD3FC878((uint64_t)v49, *(void *)(a1 + 296), (uint64_t)v12, a3, 0, 0, 0);
        if (v50 <= 3)
        {
          unint64_t v12 = sub_1CB9C37A8(a1, (uint64_t)v12);
          LODWORD(a3) = v37;
        }
      }
    }
    uint64_t v38 = *(llvm::APFloatBase **)(a1 + 296);
    uint64_t v39 = *((void *)v38 + 104);
    if (v39) {
      __int16 v40 = *(_WORD *)(v39 + 8);
    }
    else {
      __int16 v40 = 0;
    }
    unint64_t v30 = sub_1CD7F3564(v38, (const char *)0xD7, (uint64_t)&v51, (llvm *)0xA, 0, (uint64_t)v12, (void *)(a3 | v15), v40);
    if (a6) {
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v29 = v17[4];
    unint64_t v30 = *(uint64_t **)v29;
    unint64_t v31 = v19 & 0xFFFFFFFF00000000;
    uint64_t v32 = (void *)(v19 & 0xFFFFFFFF00000000 | *(unsigned int *)(v29 + 8));
    if (v18 == 223)
    {
      uint64_t v41 = *(llvm::APFloatBase **)(a1 + 296);
      uint64_t v42 = *((void *)v41 + 104);
      __int16 v43 = v42 ? *(_WORD *)(v42 + 8) : 0;
      unint64_t v30 = sub_1CD7F3564(v41, (const char *)0xDF, (uint64_t)&v51, (llvm *)0xA, 0, *(void *)v29, (void *)(v19 & 0xFFFFFFFF00000000 | *(unsigned int *)(v29 + 8)), v43);
      uint64_t v32 = (void *)(v47 | v31);
      if (a6) {
        sub_1CD3D60FC(*(void *)(a1 + 296), a6, a7, (uint64_t)v30);
      }
    }
    if (v16 == 222)
    {
      unint64_t v44 = *(llvm::APFloatBase **)(a1 + 296);
      uint64_t v45 = *((void *)v44 + 104);
      __int16 v46 = v45 ? *(_WORD *)(v45 + 8) : 0;
      unint64_t v30 = sub_1CD7F3564(v44, (const char *)0xDE, (uint64_t)&v51, (llvm *)0xA, 0, (uint64_t)v30, v32, v46);
      if (a6) {
LABEL_69:
      }
        sub_1CD3D60FC(*(void *)(a1 + 296), a6, a7, (uint64_t)v30);
    }
  }
  if (v51)
  {
    int v33 = *v51;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        int v35 = v51;
      }
      else {
        int v35 = 0;
      }
      if ((v33 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v36 = (unint64_t)(v35 + 8);
LABEL_47:
        v49[0] = &v51;
        sub_1CC5FA668(v36 + 16, v49);
        return v30;
      }
      if (v33 == 3) {
        *((void *)v51 + 1) = 0;
      }
    }
    else if ((v51[1] & 0x7F) == 2 || *((_DWORD *)v51 + 3))
    {
      uint64_t v48 = *((void *)v51 + 2);
      if ((v48 & 4) != 0)
      {
        unint64_t v36 = v48 & 0xFFFFFFFFFFFFFFF8;
        if (v36) {
          goto LABEL_47;
        }
      }
    }
  }
  return v30;
}

BOOL sub_1CB9C4298(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6 = a6;
  LODWORD(v9) = a3;
  int v12 = *(unsigned __int16 *)(a2 + 24);
  if ((v12 - 198) > 2
    || (unsigned int v13 = *(unsigned int **)(a2 + 32),
        uint64_t v14 = *(void *)v13,
        *(unsigned char *)(*(void *)(*(void *)v13 + 40) + 16 * v13[2]) != 4))
  {
    if (v12 != 171) {
      return 0;
    }
    uint64_t v17 = *(uint64_t **)(a2 + 32);
    uint64_t v18 = v17[5];
    int v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 != 35 && v19 != 11) {
      return 0;
    }
    uint64_t v21 = *(void *)(v18 + 80);
    if (*(_DWORD *)(v21 + 32) > 0x40u)
    {
      unint64_t v22 = **(void **)(v21 + 24);
      if (!(v22 >> 16))
      {
LABEL_16:
        uint64_t v23 = a2;
        if (v22 == 0xFFFF)
        {
          uint64_t v23 = *v17;
          uint64_t v9 = v17[1];
        }
        uint64_t v24 = *(void *)(a1 + 296);
        int v25 = *(unsigned __int8 **)(a2 + 64);
        int v33 = v25;
        if (v25) {
          llvm::MetadataTracking::track((uint64_t)&v33, v25, 2);
        }
        int v34 = *(_DWORD *)(a2 + 60);
        uint64_t v26 = sub_1CD8015C0(v24, 1, (const llvm::APInt *)&v33, (llvm *)4, 0, v23, v9);
        uint64_t v28 = v27;
        if (!v33) {
          return sub_1CB9C44B4(a1, (uint64_t)v26, v28, a4, a5, v6);
        }
        int v29 = *v33;
        if ((v29 - 4) > 0x1E)
        {
          if ((v29 - 3) >= 0xFFFFFFFE) {
            unint64_t v30 = v33;
          }
          else {
            unint64_t v30 = 0;
          }
          if ((v29 - 3) < 0xFFFFFFFE)
          {
            if (v29 == 3) {
              *((void *)v33 + 1) = 0;
            }
            return sub_1CB9C44B4(a1, (uint64_t)v26, v28, a4, a5, v6);
          }
          unint64_t v31 = (unint64_t)(v30 + 8);
        }
        else
        {
          if ((v33[1] & 0x7F) != 2 && !*((_DWORD *)v33 + 3)) {
            return sub_1CB9C44B4(a1, (uint64_t)v26, v28, a4, a5, v6);
          }
          uint64_t v32 = *((void *)v33 + 2);
          if ((v32 & 4) == 0) {
            return sub_1CB9C44B4(a1, (uint64_t)v26, v28, a4, a5, v6);
          }
          unint64_t v31 = v32 & 0xFFFFFFFFFFFFFFF8;
          if (!v31) {
            return sub_1CB9C44B4(a1, (uint64_t)v26, v28, a4, a5, v6);
          }
        }
        int v35 = &v33;
        sub_1CC5FA668(v31 + 16, &v35);
        return sub_1CB9C44B4(a1, (uint64_t)v26, v28, a4, a5, v6);
      }
    }
    else
    {
      unint64_t v22 = *(void *)(v21 + 24);
      if (v22 < 0x10000) {
        goto LABEL_16;
      }
    }
    return 0;
  }
  if (v12 == 198) {
    a6 |= 8u;
  }
  uint64_t v15 = *((void *)v13 + 1);

  return sub_1CB9C44B4(a1, v14, v15, a4, a5, a6);
}

BOOL sub_1CB9C44B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v10 = a2;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  sub_1CD3FC878((uint64_t)v43, *(void *)(a1 + 296), a2, a3, 0, 0, 0);
  int v12 = v44;
  if (v44 > 3) {
    return v12 < 4;
  }
  int v14 = *(unsigned __int16 *)(v10 + 24);
  if (v14 == 36 || v14 == 12)
  {
    uint64_t v16 = *(void *)(v10 + 80);
    uint64_t v17 = (const llvm::detail::DoubleAPFloat *)(v16 + 32);
    uint64_t v18 = *(void **)(v16 + 32);
    if (v18 == &unk_1CFB2E344) {
      uint64_t v19 = *(void *)(v16 + 40);
    }
    else {
      uint64_t v19 = v16 + 24;
    }
    if ((*(unsigned char *)(v19 + 28) & 8) == 0 || !sub_1CB9C36D4(v10)) {
      goto LABEL_29;
    }
    if (v18 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v49, v17);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v49, v17);
    }
    if ((_UNKNOWN *)v49 == &unk_1CFB2E344)
    {
      sub_1CBFC6FB8(v50);
      sub_1CBFC6FB8(v50 + 32);
    }
    else
    {
      v51 ^= 8u;
    }
    uint64_t v20 = *(void *)(a1 + 296);
    v42[0] = 0;
    v42[1] = 0;
    uint64_t v21 = *(void *)(v10 + 40) + 16 * a3;
    int v25 = sub_1CD7ECA8C(v20, (llvm::LLVMContext *)&v48, (const llvm::APFloat *)v42, *(llvm **)v21, *(void *)(v21 + 8), 0);
    int v23 = v22;
    if (!v42[0]) {
      goto LABEL_21;
    }
    int v24 = *(unsigned __int8 *)v42[0];
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = v42[0];
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v24 - 3) < 0xFFFFFFFE)
      {
        if (v24 == 3) {
          *(void *)(v42[0] + 8) = 0;
        }
        goto LABEL_21;
      }
      unint64_t v40 = v39 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v42[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v42[0] + 12)) {
        goto LABEL_21;
      }
      uint64_t v41 = *(void *)(v42[0] + 16);
      if ((v41 & 4) == 0) {
        goto LABEL_21;
      }
      unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (!v40) {
        goto LABEL_21;
      }
    }
    unsigned int v47 = v42;
    sub_1CC5FA668(v40 + 16, &v47);
LABEL_21:
    sub_1CD3D60FC(*(void *)(a1 + 296), v10, a3, (uint64_t)v25);
    uint64_t v45 = (uint64_t)v25;
    LODWORD(v46) = v23;
    a6 ^= 2u;
    if ((_UNKNOWN *)v49 == &unk_1CFB2E344)
    {
      sub_1CB845718(&v50);
    }
    else if ((*(_DWORD *)(v49 + 8) - 64) <= 0xFFFFFF7F && v50)
    {
      MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
    int v14 = *((unsigned __int16 *)v25 + 12);
    goto LABEL_24;
  }
  int v25 = (uint64_t *)v10;
LABEL_24:
  if (v14 == 222)
  {
    uint64_t v26 = v25[4];
    int v27 = *(_DWORD *)(v26 + 8);
    int v25 = *(uint64_t **)v26;
    uint64_t v45 = (uint64_t)v25;
    LODWORD(v46) = v27;
    a6 ^= 2u;
    int v14 = *((unsigned __int16 *)v25 + 12);
  }
  if (v14 == 223)
  {
    uint64_t v28 = v25[4];
    int v29 = *(_DWORD *)(v28 + 8);
    uint64_t v10 = *(void *)v28;
    uint64_t v45 = *(void *)v28;
    LODWORD(v46) = v29;
    a6 |= 4u;
  }
  else
  {
    uint64_t v10 = (uint64_t)v25;
  }
LABEL_29:
  unint64_t v30 = *(unsigned char **)(a1 + 480);
  if (v30[319]) {
    BOOL v31 = v30[338] == 0;
  }
  else {
    BOOL v31 = 0;
  }
  BOOL v32 = v31 || v30[326] != 0;
  sub_1CD3FCE48((uint64_t *)v10, v46, (uint64_t)&v45, 1, 1, v32, *(void *)(a1 + 296));
  *(void *)a4 = v45;
  *(_DWORD *)(a4 + 8) = v46;
  uint64_t v33 = *(void *)(a1 + 296);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  *(void *)a5 = sub_1CD7EBF14(v33, a6, (const llvm::APInt *)&v48, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v34;
  if (v48)
  {
    int v35 = *v48;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = v48;
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v37 = (unint64_t)(v38 + 8);
LABEL_47:
        v42[0] = &v48;
        sub_1CC5FA668(v37 + 16, v42);
        return v12 < 4;
      }
      if (v35 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v36 = *((void *)v48 + 2);
      if ((v36 & 4) != 0)
      {
        unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
        if (v37) {
          goto LABEL_47;
        }
      }
    }
  }
  return v12 < 4;
}

BOOL sub_1CB9C488C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 198) > 2) {
    return 0;
  }
  int v7 = *(uint64_t **)(a2 + 32);
  if (*(unsigned char *)(*(void *)(*v7 + 40) + 16 * *((unsigned int *)v7 + 2)) != 5) {
    return 0;
  }
  if (v6 == 198) {
    a6 |= 8u;
  }
  return sub_1CB9C44B4(a1, *v7, v7[1], a4, a5, a6);
}

uint64_t *sub_1CB9C48D8(uint64_t a1, unint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  v52[10] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  if ((_BYTE)a4) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v46);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v46);
  }
  uint64_t v10 = ExtendedSizeInBits;
  if (v9 == 1) {
  if (v10 == 64)
  }
  {
    uint64_t v19 = a2;
    uint64_t v20 = *(unsigned __int8 **)a3;
    __int16 v43 = v20;
    if (v20) {
      llvm::MetadataTracking::track((uint64_t)&v43, v20, 2);
    }
    uint64_t v21 = HIDWORD(a2);
    int v44 = *(_DWORD *)(a3 + 8);
    *(void *)&long long v45 = sub_1CB9C4D10(a1, v19, (uint64_t)&v43, (llvm *)5, 0);
    DWORD2(v45) = 0;
    if (v43)
    {
      int v22 = *v43;
      if ((v22 - 4) > 0x1E)
      {
        if ((v22 - 3) >= 0xFFFFFFFE) {
          int v29 = v43;
        }
        else {
          int v29 = 0;
        }
        if ((v22 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v30 = (unint64_t)(v29 + 8);
LABEL_57:
          uint64_t v50 = &v43;
          sub_1CC5FA668(v30 + 16, &v50);
          goto LABEL_27;
        }
        if (v22 == 3) {
          *((void *)v43 + 1) = 0;
        }
      }
      else if ((v43[1] & 0x7F) == 2 || *((_DWORD *)v43 + 3))
      {
        uint64_t v34 = *((void *)v43 + 2);
        if ((v34 & 4) != 0)
        {
          unint64_t v30 = v34 & 0xFFFFFFFFFFFFFFF8;
          if (v30) {
            goto LABEL_57;
          }
        }
      }
    }
LABEL_27:
    int v23 = *(unsigned __int8 **)a3;
    unint64_t v40 = v23;
    if (v23) {
      llvm::MetadataTracking::track((uint64_t)&v40, v23, 2);
    }
    int v41 = *(_DWORD *)(a3 + 8);
    *(void *)&long long v42 = sub_1CB9C4D10(a1, v21, (uint64_t)&v40, (llvm *)5, 0);
    DWORD2(v42) = 0;
    if (v40)
    {
      int v24 = *v40;
      if ((v24 - 4) > 0x1E)
      {
        if ((v24 - 3) >= 0xFFFFFFFE) {
          BOOL v31 = v40;
        }
        else {
          BOOL v31 = 0;
        }
        if ((v24 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v32 = (unint64_t)(v31 + 8);
LABEL_63:
          uint64_t v50 = &v40;
          sub_1CC5FA668(v32 + 16, &v50);
          goto LABEL_33;
        }
        if (v24 == 3) {
          *((void *)v40 + 1) = 0;
        }
      }
      else if ((v40[1] & 0x7F) == 2 || *((_DWORD *)v40 + 3))
      {
        uint64_t v35 = *((void *)v40 + 2);
        if ((v35 & 4) != 0)
        {
          unint64_t v32 = v35 & 0xFFFFFFFFFFFFFFF8;
          if (v32) {
            goto LABEL_63;
          }
        }
      }
    }
LABEL_33:
    uint64_t v25 = *(void *)(a1 + 296);
    uint64_t v26 = *(unsigned __int8 **)a3;
    uint64_t v38 = v26;
    if (v26) {
      llvm::MetadataTracking::track((uint64_t)&v38, v26, 2);
    }
    int v39 = *(_DWORD *)(a3 + 8);
    uint64_t v50 = v52;
    uint64_t v51 = 0x500000000;
    uint64_t v48 = 17;
    char v49 = 6;
    sub_1CD3D5EA0(v25, (uint64_t)&v50, (uint64_t)&v48);
    sub_1CD3D5F48(v25, (uint64_t)&v50, &v45);
    uint64_t v48 = 25;
    char v49 = 6;
    sub_1CD3D5EA0(v25, (uint64_t)&v50, (uint64_t)&v48);
    sub_1CD3D5F48(v25, (uint64_t)&v50, &v42);
    uint64_t v48 = 26;
    char v49 = 6;
    sub_1CD3D5EA0(v25, (uint64_t)&v50, (uint64_t)&v48);
    int v12 = sub_1CD801450(v25, 18, (uint64_t)&v38, (llvm *)6, 0, (uint64_t *)v50, v51);
    if (v50 != v52) {
      free(v50);
    }
    unsigned int v13 = v38;
    if (!v38) {
      return v12;
    }
    int v14 = *v38;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v28 = v38;
      }
      else {
        uint64_t v28 = 0;
      }
      if ((v14 - 3) < 0xFFFFFFFE)
      {
LABEL_50:
        if (v14 == 3) {
          *((void *)v13 + 1) = 0;
        }
        return v12;
      }
      unint64_t v17 = (unint64_t)(v28 + 8);
    }
    else
    {
      if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
        return v12;
      }
      uint64_t v27 = *((void *)v38 + 2);
      if ((v27 & 4) == 0) {
        return v12;
      }
      unint64_t v17 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (!v17) {
        return v12;
      }
    }
    uint64_t v18 = &v38;
    goto LABEL_20;
  }
  uint64_t v11 = *(unsigned __int8 **)a3;
  uint64_t v36 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v36, v11, 2);
  }
  int v37 = *(_DWORD *)(a3 + 8);
  int v12 = sub_1CB9C4D10(a1, a2, (uint64_t)&v36, v46, v47);
  unsigned int v13 = v36;
  if (!v36) {
    return v12;
  }
  int v14 = *v36;
  if ((v14 - 4) > 0x1E)
  {
    if ((v14 - 3) >= 0xFFFFFFFE) {
      uint64_t v16 = v36;
    }
    else {
      uint64_t v16 = 0;
    }
    if ((v14 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v17 = (unint64_t)(v16 + 8);
LABEL_19:
      uint64_t v18 = &v36;
LABEL_20:
      uint64_t v50 = v18;
      sub_1CC5FA668(v17 + 16, &v50);
      return v12;
    }
    goto LABEL_50;
  }
  if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
  {
    uint64_t v33 = *((void *)v36 + 2);
    if ((v33 & 4) != 0)
    {
      unint64_t v17 = v33 & 0xFFFFFFFFFFFFFFF8;
      if (v17) {
        goto LABEL_19;
      }
    }
  }
  return v12;
}

uint64_t *sub_1CB9C4D10(uint64_t a1, uint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  uint64_t v21 = a2;
  if (*(unsigned char *)(*(void *)(a1 + 480) + 318)) {
    int v9 = 4;
  }
  else {
    int v9 = 3;
  }
  int v10 = sub_1CD3FB4E4(a4, v9);
  uint64_t v11 = *(void *)(a1 + 296);
  int v12 = *(unsigned __int8 **)a3;
  uint64_t v19 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v19, v12, 2);
  }
  int v20 = *(_DWORD *)(a3 + 8);
  LODWORD(v22) = 0;
  unsigned int v13 = sub_1CD3FD0DC(v11, v10, (uint64_t)&v19, a4, a5, (unsigned int *)&v22, &v21);
  if (v19)
  {
    int v14 = *v19;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        uint64_t v16 = v19;
      }
      else {
        uint64_t v16 = 0;
      }
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v17 = (unint64_t)(v16 + 8);
LABEL_16:
        int v22 = &v19;
        sub_1CC5FA668(v17 + 16, &v22);
        return v13;
      }
      if (v14 == 3) {
        *((void *)v19 + 1) = 0;
      }
    }
    else if ((v19[1] & 0x7F) == 2 || *((_DWORD *)v19 + 3))
    {
      uint64_t v18 = *((void *)v19 + 2);
      if ((v18 & 4) != 0)
      {
        unint64_t v17 = v18 & 0xFFFFFFFFFFFFFFF8;
        if (v17) {
          goto LABEL_16;
        }
      }
    }
  }
  return v13;
}

uint64_t sub_1CB9C4E48(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 40 * a2);
  int v3 = *(unsigned __int16 *)(v2 + 24);
  if (v3 == 215) {
    uint64_t v2 = **(void **)(v2 + 32);
  }
  if (*(unsigned __int16 *)(v2 + 24) - 437 > 1)
  {
    BOOL v6 = 0;
  }
  else
  {
    int v4 = *(unsigned __int16 *)(*(void *)(*(void *)(v2 + 32) + 40) + 24);
    BOOL v6 = v4 == 35 || v4 == 11;
  }
  return v6 | ((v3 == 215) << 8);
}

uint64_t *sub_1CB9C4EB0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v165 = *MEMORY[0x1E4F143B8];
  int v12 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v149 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v149, v12, 2);
  }
  int v150 = *(_DWORD *)(a2 + 60);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(v13 + 40 * a3);
  uint64_t v130 = a2;
  int v128 = a5;
  if (a6) {
    uint64_t v14 = **(void **)(v14 + 32);
  }
  uint64_t v15 = (uint64_t *)(v13 + 40 * a4);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (**(unsigned char **)(*v15 + 40) == 10 && *(_WORD *)(v16 + 24) == 215)
  {
    uint64_t v18 = *(void *)(v16 + 32);
    uint64_t v16 = *(void *)v18;
    LODWORD(v17) = *(_DWORD *)(v18 + 8);
  }
  uint64_t v19 = *(void *)(v13 + 80);
  uint64_t v20 = *(void *)(v13 + 88);
  if (**(unsigned char **)(v19 + 40) == 10 && *(_WORD *)(v19 + 24) == 215)
  {
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v19 = *(void *)v21;
    LODWORD(v20) = *(_DWORD *)(v21 + 8);
  }
  int v22 = *(uint64_t **)(v14 + 32);
  uint64_t v23 = *(void *)(v22[5] + 80);
  int v24 = (void *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u) {
    int v24 = (void *)*v24;
  }
  uint64_t v26 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v27 = (void *)*v24;
  uint64_t v28 = v22[11];
  uint64_t v29 = *(void *)(v22[15] + 80);
  unint64_t v30 = (unsigned int *)(v29 + 24);
  unsigned int v131 = v27;
  if (*(_DWORD *)(v29 + 32) >= 0x41u) {
    unint64_t v30 = *(unsigned int **)v30;
  }
  uint64_t v31 = v22[10];
  uint64_t v32 = *v30;
  uint64_t v129 = v14;
  int v127 = *(unsigned __int16 *)(v14 + 24);
  if (v32 == 5)
  {
    int v33 = *(unsigned __int16 *)(v14 + 24);
    uint64_t v153 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    uint64_t v154 = v34;
    uint64_t v155 = v26;
    int v156 = v25;
    uint64_t v157 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    uint64_t v158 = v35;
    int v159 = sub_1CD7EBF14(*(void *)(a1 + 296), 16, (const llvm::APInt *)&v149, (llvm *)4, 0, 1, 0);
    uint64_t v160 = v36;
    uint64_t v161 = v31;
    int v162 = v28;
    uint64_t v163 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    uint64_t v164 = v37;
    uint64_t v38 = *(void *)(v26 + 40);
    int v39 = *(llvm **)v38;
    uint64_t v40 = *(void *)(v38 + 8);
    uint64_t v41 = *(void *)v38;
    if (v33 == 437) {
      int v42 = 5708;
    }
    else {
      int v42 = 5468;
    }
    if (v33 == 437) {
      int v43 = 5638;
    }
    else {
      int v43 = 5398;
    }
    if (v41 == 9) {
      int v44 = v42;
    }
    else {
      int v44 = v43;
    }
    long long v45 = sub_1CD801450(*(void *)(a1 + 296), v44, (uint64_t)&v149, v39, v40, (uint64_t *)&v153, 6);
    if ((v131 & 0xFFFFFFF0) != 0)
    {
      LODWORD(v25) = 0;
      v131 -= 16;
      uint64_t v26 = (uint64_t)v45;
    }
    else
    {
      LODWORD(v28) = 0;
      uint64_t v31 = (uint64_t)v45;
    }
    LOBYTE(v32) = 4;
  }
  sub_1CD3FC878((uint64_t)&v146, *(void *)(a1 + 296), v26, v25, 0, 0, 0);
  sub_1CD3FC878((uint64_t)&v143, *(void *)(a1 + 296), v16, v17, 0, 0, 0);
  sub_1CD3FC878((uint64_t)&v140, *(void *)(a1 + 296), v19, v20, 0, 0, 0);
  sub_1CD3FC878((uint64_t)&v137, *(void *)(a1 + 296), v31, v28, 0, 0, 0);
  uint64_t v153 = &v155;
  uint64_t v154 = 0x800000000;
  uint64_t v47 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
  if (v154 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v48 = (uint64_t **)&v153[2 * v154];
  unsigned __int8 *v48 = v47;
  v48[1] = v46;
  LODWORD(v154) = v154 + 1;
  uint64_t v50 = sub_1CD7EBF14(*(void *)(a1 + 296), v32 & 7, (const llvm::APInt *)&v149, (llvm *)6, 0, 1, 0);
  if (v154 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v51 = (uint64_t **)&v153[2 * v154];
  *uint64_t v51 = v50;
  v51[1] = v49;
  unsigned int v52 = v154 + 1;
  LODWORD(v154) = v154 + 1;
  if ((v147 & 0xFFFFFFFD) == 5)
  {
    uint64_t v53 = *(void *)(v26 + 80);
    int v55 = *(void **)(v53 + 32);
    uint64_t v54 = (llvm::detail::DoubleAPFloat *)(v53 + 32);
    if (v55 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v54, (llvm::APInt *)&v151);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v54, (uint64_t)&v151);
    }
    int v56 = (unint64_t *)&v151;
    if (DWORD2(v151) >= 0x41) {
      int v56 = (unint64_t *)v151;
    }
    unint64_t v57 = *v56;
    uint64_t v135 = v149;
    if (v149) {
      llvm::MetadataTracking::track((uint64_t)&v135, v149, 2);
    }
    int v136 = v150;
    int v58 = sub_1CB9C48D8(a1, v57, (uint64_t)&v135, **(llvm ***)(v26 + 40), *(void *)(*(void *)(v26 + 40) + 8));
    if (!v135) {
      goto LABEL_42;
    }
    int v59 = *v135;
    if ((v59 - 4) > 0x1E)
    {
      if ((v59 - 3) >= 0xFFFFFFFE) {
        uint64_t v120 = v135;
      }
      else {
        uint64_t v120 = 0;
      }
      if ((v59 - 3) < 0xFFFFFFFE)
      {
        if (v59 == 3) {
          *((void *)v135 + 1) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v121 = (unint64_t)(v120 + 8);
    }
    else
    {
      if ((v135[1] & 0x7F) != 2 && !*((_DWORD *)v135 + 3)) {
        goto LABEL_42;
      }
      uint64_t v125 = *((void *)v135 + 2);
      if ((v125 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v121 = v125 & 0xFFFFFFFFFFFFFFF8;
      if (!v121) {
        goto LABEL_42;
      }
    }
    *(void *)&long long v134 = &v135;
    sub_1CC5FA668(v121 + 16, &v134);
LABEL_42:
    if (v154 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v60 = (uint64_t **)&v153[2 * v154];
    *uint64_t v60 = v58;
    v60[1] = 0;
    LODWORD(v154) = v154 + 1;
    int v62 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    if (v154 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v63 = (uint64_t **)&v153[2 * v154];
    *uint64_t v63 = v62;
    v63[1] = v61;
    LODWORD(v154) = v154 + 1;
    if (DWORD2(v151) >= 0x41 && (void)v151) {
      MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
    }
    goto LABEL_50;
  }
  if (v52 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v153[2 * v52] = v146;
  LODWORD(v154) = v154 + 1;
  unint64_t v65 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
  if (v154 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v66 = (uint64_t **)&v153[2 * v154];
  *unsigned int v66 = v65;
  v66[1] = v64;
  LODWORD(v154) = v154 + 1;
LABEL_50:
  if ((v144 & 0xFFFFFFFD) == 5)
  {
    long long v67 = v143;
    unsigned int v68 = v154;
    unsigned int v69 = HIDWORD(v154);
  }
  else
  {
    *(void *)&long long v151 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    *((void *)&v151 + 1) = v70;
    long long v134 = v143;
    if (*(unsigned char *)(*(void *)(v143 + 40) + 16 * DWORD2(v143)) == 10) {
      sub_1CB9C44B4(a1, v143, *((uint64_t *)&v143 + 1), (uint64_t)&v134, (uint64_t)&v151, 0);
    }
    else {
      sub_1CB9C7B8C(a1, v143, *((uint64_t *)&v143 + 1), (uint64_t)&v134, (uint64_t)&v151);
    }
    if (v154 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)&v153[2 * v154] = v134;
    unsigned int v69 = HIDWORD(v154);
    unsigned int v68 = v154 + 1;
    LODWORD(v154) = v154 + 1;
    long long v67 = v151;
  }
  if (v68 >= v69) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)&v153[2 * v68] = v67;
  unsigned int v71 = v154 + 1;
  LODWORD(v154) = v154 + 1;
  if ((v141 & 0xFFFFFFFD) == 5)
  {
    if (v71 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)&v153[2 * v71] = v140;
  }
  else
  {
    *(void *)&long long v151 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    *((void *)&v151 + 1) = v72;
    long long v134 = v140;
    if (*(unsigned char *)(*(void *)(v140 + 40) + 16 * DWORD2(v140)) == 10) {
      sub_1CB9C44B4(a1, v140, *((uint64_t *)&v140 + 1), (uint64_t)&v134, (uint64_t)&v151, 0);
    }
    else {
      sub_1CB9C7B8C(a1, v140, *((uint64_t *)&v140 + 1), (uint64_t)&v134, (uint64_t)&v151);
    }
    if (v154 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)&v153[2 * v154] = v134;
    unsigned int v73 = v154 + 1;
    LODWORD(v154) = v73;
    if (v73 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)&v153[2 * v73] = v151;
  }
  unsigned int v74 = v154 + 1;
  LODWORD(v154) = v154 + 1;
  if ((v138 & 0xFFFFFFFD) == 5)
  {
    uint64_t v75 = *(void *)(v31 + 80);
    uint64_t v77 = *(void **)(v75 + 32);
    unsigned int v76 = (llvm::detail::DoubleAPFloat *)(v75 + 32);
    if (v77 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v76, (llvm::APInt *)&v151);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v76, (uint64_t)&v151);
    }
    uint64_t v78 = (unint64_t *)&v151;
    if (DWORD2(v151) >= 0x41) {
      uint64_t v78 = (unint64_t *)v151;
    }
    unint64_t v79 = *v78;
    int v132 = v149;
    uint64_t v80 = v130;
    int v81 = v128;
    if (v149) {
      llvm::MetadataTracking::track((uint64_t)&v132, v149, 2);
    }
    int v133 = v150;
    unint64_t v82 = sub_1CB9C48D8(a1, v79, (uint64_t)&v132, **(llvm ***)(v31 + 40), *(void *)(*(void *)(v31 + 40) + 8));
    if (!v132) {
      goto LABEL_78;
    }
    int v83 = *v132;
    if ((v83 - 4) > 0x1E)
    {
      if ((v83 - 3) >= 0xFFFFFFFE) {
        uint64_t v122 = v132;
      }
      else {
        uint64_t v122 = 0;
      }
      if ((v83 - 3) < 0xFFFFFFFE)
      {
        if (v83 == 3) {
          *((void *)v132 + 1) = 0;
        }
        goto LABEL_78;
      }
      unint64_t v123 = (unint64_t)(v122 + 8);
    }
    else
    {
      if ((v132[1] & 0x7F) != 2 && !*((_DWORD *)v132 + 3)) {
        goto LABEL_78;
      }
      uint64_t v126 = *((void *)v132 + 2);
      if ((v126 & 4) == 0) {
        goto LABEL_78;
      }
      unint64_t v123 = v126 & 0xFFFFFFFFFFFFFFF8;
      if (!v123) {
        goto LABEL_78;
      }
    }
    *(void *)&long long v134 = &v132;
    sub_1CC5FA668(v123 + 16, &v134);
LABEL_78:
    if (v154 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v84 = (uint64_t **)&v153[2 * v154];
    *uint64_t v84 = v82;
    v84[1] = 0;
    LODWORD(v154) = v154 + 1;
    uint64_t v86 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
    if (v154 >= HIDWORD(v154)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v87 = (uint64_t **)&v153[2 * v154];
    *int v87 = v86;
    v87[1] = v85;
    LODWORD(v154) = v154 + 1;
    if (DWORD2(v151) >= 0x41 && (void)v151) {
      MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
    }
    goto LABEL_86;
  }
  if (v74 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v80 = v130;
  int v81 = v128;
  *(_OWORD *)&v153[2 * v74] = v137;
  LODWORD(v154) = v154 + 1;
  char v89 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v149, (llvm *)5, 0, 1, 0);
  if (v154 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v90 = (uint64_t **)&v153[2 * v154];
  *uint64_t v90 = v89;
  v90[1] = v88;
  LODWORD(v154) = v154 + 1;
LABEL_86:
  unint64_t v92 = sub_1CD7EBF14(*(void *)(a1 + 296), v131, (const llvm::APInt *)&v149, (llvm *)4, 0, 1, 0);
  if (v154 >= HIDWORD(v154)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v93 = (uint64_t **)&v153[2 * v154];
  *int v93 = v92;
  v93[1] = v91;
  uint64_t v94 = (v154 + 1);
  LODWORD(v154) = v154 + 1;
  uint64_t v95 = *(unsigned __int8 **)(v80 + 40);
  uint64_t v96 = *v95;
  if (v96 == 9)
  {
    uint64_t v97 = v129;
    BOOL v98 = v127 == 437;
    if (v81)
    {
      int v99 = 9;
      int v100 = 11;
    }
    else
    {
      int v99 = 8;
      int v100 = 10;
    }
  }
  else
  {
    uint64_t v97 = v129;
    BOOL v98 = v127 == 437;
    if (v81)
    {
      int v99 = 23;
      int v100 = 25;
    }
    else
    {
      int v99 = 22;
      int v100 = 24;
    }
  }
  if (v98) {
    int v101 = v100;
  }
  else {
    int v101 = v99;
  }
  int v102 = 5;
  if (v96 == 10) {
    int v103 = 5;
  }
  else {
    int v103 = 2;
  }
  LODWORD(v151) = v103;
  if ((v147 & 0xFFFFFFFD) == 5)
  {
    BOOL v104 = **(unsigned char **)(v97 + 40) == 9;
  }
  else
  {
    if ((v147 & 0xFFFFFFFC) == 4)
    {
      int v105 = 1;
      goto LABEL_111;
    }
    if (v148 == 32) {
      int v102 = 5;
    }
    else {
      int v102 = 10;
    }
    BOOL v104 = v148 == 16;
  }
  if (v104) {
    int v105 = 2;
  }
  else {
    int v105 = v102;
  }
LABEL_111:
  DWORD1(v151) = v105;
  if ((v144 & 0xFFFFFFFC) == 4)
  {
    int v106 = 1;
  }
  else
  {
    if (v145 == 32) {
      int v107 = 5;
    }
    else {
      int v107 = 10;
    }
    if (v145 == 16) {
      int v106 = 2;
    }
    else {
      int v106 = v107;
    }
  }
  DWORD2(v151) = v106;
  if ((v141 & 0xFFFFFFFC) == 4)
  {
    int v108 = 1;
  }
  else
  {
    if (v142 == 32) {
      int v109 = 5;
    }
    else {
      int v109 = 10;
    }
    if (v142 == 16) {
      int v108 = 2;
    }
    else {
      int v108 = v109;
    }
  }
  HIDWORD(v151) = v108;
  if ((v138 & 0xFFFFFFFD) == 5)
  {
    if (**(unsigned char **)(v97 + 40) == 9) {
      int v110 = 2;
    }
    else {
      int v110 = 5;
    }
  }
  else if ((v138 & 0xFFFFFFFC) == 4)
  {
    int v110 = 1;
  }
  else
  {
    if (v139 == 32) {
      int v111 = 5;
    }
    else {
      int v111 = 10;
    }
    if (v139 == 16) {
      int v110 = 2;
    }
    else {
      int v110 = v111;
    }
  }
  int v152 = v110;
  if (v103 == v108 || v108 == 1) {
    uint64_t v113 = 5;
  }
  else {
    uint64_t v113 = 4;
  }
  int v114 = sub_1CB951118(v101, &v151, v113, *(unsigned char **)(a1 + 480));
  uint64_t v115 = sub_1CD801044(*(void *)(a1 + 296), v114, (uint64_t)&v149, (uint64_t)v95, *(unsigned __int16 *)(v80 + 58), v153, v94);
  if (v153 != &v155) {
    free(v153);
  }
  if (v149)
  {
    int v116 = *v149;
    if ((v116 - 4) > 0x1E)
    {
      if ((v116 - 3) >= 0xFFFFFFFE) {
        uint64_t v118 = v149;
      }
      else {
        uint64_t v118 = 0;
      }
      if ((v116 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v119 = (unint64_t)(v118 + 8);
LABEL_157:
        uint64_t v153 = (uint64_t *)&v149;
        sub_1CC5FA668(v119 + 16, &v153);
        return v115;
      }
      if (v116 == 3) {
        *((void *)v149 + 1) = 0;
      }
    }
    else if ((v149[1] & 0x7F) == 2 || *((_DWORD *)v149 + 3))
    {
      uint64_t v124 = *((void *)v149 + 2);
      if ((v124 & 4) != 0)
      {
        unint64_t v119 = v124 & 0xFFFFFFFFFFFFFFF8;
        if (v119) {
          goto LABEL_157;
        }
      }
    }
  }
  return v115;
}

uint64_t *sub_1CB9C5D30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  long long v40 = *(_OWORD *)(v6 + 40);
  int v9 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v38 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v38, v9, 2);
  }
  int v39 = *(_DWORD *)(a2 + 60);
  uint64_t v10 = v40;
  if (*(_WORD *)(v40 + 24) == 15)
  {
    *(void *)&long long v40 = v7;
    DWORD2(v40) = v8;
    uint64_t v11 = v7;
  }
  else
  {
    uint64_t v11 = v40;
    uint64_t v10 = v7;
  }
  if (*(_WORD *)(v10 + 24) != 15) {
    goto LABEL_7;
  }
  *(void *)&long long v37 = sub_1CD7ED208(*(void *)(a1 + 296), *(_DWORD *)(v10 + 76), (llvm *)5, 0, 1);
  *((void *)&v37 + 1) = v17;
  *(void *)&long long v36 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v38, (llvm *)5, 0, 1, 0);
  *((void *)&v36 + 1) = v18;
  sub_1CD3FC878((uint64_t)&v41, *(void *)(a1 + 296), v11, SDWORD2(v40), 0, 1, 0);
  if (sub_1CB9C4298(a1, (uint64_t)v41, v42, (uint64_t)&v40, (uint64_t)&v36, v43 << 6))
  {
    int v19 = 250;
  }
  else
  {
    sub_1CD3FC878((uint64_t)&v41, *(void *)(a1 + 296), v40, SDWORD2(v40), 0, 1, 0);
    sub_1CB9C44B4(a1, (uint64_t)v41, v42, (uint64_t)&v40, (uint64_t)&v36, v43 << 6);
    int v19 = 241;
  }
  int v20 = sub_1CB952700(35, v19, *(unsigned char **)(a1 + 480));
  if (a3)
  {
    uint64_t v21 = *(void *)(v36 + 80);
    int v22 = (void *)(v21 + 24);
    if (*(_DWORD *)(v21 + 32) >= 0x41u) {
      int v22 = (void *)*v22;
    }
    unsigned int v23 = *(_DWORD *)v22;
    unsigned int v24 = (v23 >> 6) & 7;
    BOOL v25 = v24 >= a3;
    unsigned int v26 = v24 - a3;
    if (!v25)
    {
LABEL_7:
      int v12 = 0;
      goto LABEL_8;
    }
    *(void *)&long long v36 = sub_1CD7EBF14(*(void *)(a1 + 296), v23 & 0xFFFFFE3F | (v26 << 6), (const llvm::APInt *)&v38, (llvm *)6, 0, 1, 0);
    DWORD2(v36) = v27;
  }
  uint64_t v28 = *(void *)(a1 + 296);
  uint64_t v34 = v38;
  if (v38) {
    llvm::MetadataTracking::track((uint64_t)&v34, v38, 2);
  }
  int v35 = v39;
  LODWORD(v41) = a3 << 6;
  int v12 = sub_1CD400DE4(v28, v20, (uint64_t)&v34, 0, &v37, (unsigned int *)&v41, &v40, &v36);
  if (v34)
  {
    int v29 = *v34;
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        uint64_t v32 = v34;
      }
      else {
        uint64_t v32 = 0;
      }
      if ((v29 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v31 = (unint64_t)(v32 + 8);
LABEL_44:
        uint64_t v41 = &v34;
        sub_1CC5FA668(v31 + 16, &v41);
        goto LABEL_8;
      }
      if (v29 == 3) {
        *((void *)v34 + 1) = 0;
      }
    }
    else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
    {
      uint64_t v30 = *((void *)v34 + 2);
      if ((v30 & 4) != 0)
      {
        unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v31) {
          goto LABEL_44;
        }
      }
    }
  }
LABEL_8:
  if (v38)
  {
    int v13 = *v38;
    if ((v13 - 4) > 0x1E)
    {
      if ((v13 - 3) >= 0xFFFFFFFE) {
        uint64_t v15 = v38;
      }
      else {
        uint64_t v15 = 0;
      }
      if ((v13 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v16 = (unint64_t)(v15 + 8);
LABEL_18:
        uint64_t v41 = &v38;
        sub_1CC5FA668(v16 + 16, &v41);
        return v12;
      }
      if (v13 == 3) {
        *((void *)v38 + 1) = 0;
      }
    }
    else if ((v38[1] & 0x7F) == 2 || *((_DWORD *)v38 + 3))
    {
      uint64_t v33 = *((void *)v38 + 2);
      if ((v33 & 4) != 0)
      {
        unint64_t v16 = v33 & 0xFFFFFFFFFFFFFFF8;
        if (v16) {
          goto LABEL_18;
        }
      }
    }
  }
  return v12;
}

uint64_t *sub_1CB9C6060(uint64_t a1, const llvm::APInt *a2, _DWORD *a3)
{
  v23[16] = *MEMORY[0x1E4F143B8];
  int v4 = a3[2];
  if (v4 == 1) {
    return **(uint64_t ***)a3;
  }
  uint64_t v7 = 17;
  switch(v4)
  {
    case 3:
      uint64_t v7 = 27;
      break;
    case 4:
      uint64_t v7 = 35;
      break;
    case 5:
    case 7:
    case 8:
    case 10:
    case 11:
      __break(1u);
      JUMPOUT(0x1CB9C6310);
    case 6:
      uint64_t v7 = 39;
      break;
    case 9:
      uint64_t v7 = 43;
      break;
    case 12:
      uint64_t v7 = 45;
      break;
    default:
      break;
  }
  v23[0] = (uint64_t)sub_1CD7EBF14(a1, v7, a2, (llvm *)5, 0, 1, 0);
  v23[1] = v9;
  unsigned int v10 = 1;
  int v21 = 1;
  uint64_t v11 = a3[2];
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 16 * v11;
    int v15 = 1;
    int v16 = 25;
    do
    {
      if (v10 >= 8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)&v23[2 * v10] = *(_OWORD *)(*(void *)a3 + v13);
      unsigned int v22 = v21 + 1;
      if (*(unsigned char *)(*(void *)(*(void *)(*(void *)a3 + v13) + 40)
                    + 16 * *(unsigned int *)(*(void *)a3 + v13 + 8)) == 4)
        unsigned int v17 = v15;
      else {
        unsigned int v17 = v16;
      }
      int v19 = sub_1CD7EBF14(a1, v17, a2, (llvm *)5, 0, 1, 0);
      if (v22 >= 8uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v20 = &v23[2 * v22];
      *int v20 = (uint64_t)v19;
      v20[1] = v18;
      unsigned int v10 = v22 + 1;
      int v21 = v22 + 1;
      v13 += 16;
      v15 += 2;
      ++v16;
    }
    while (v14 != v13);
  }
  return sub_1CD801450(a1, 18, (uint64_t)a2, (llvm *)6, 0, v23, v10);
}

uint64_t sub_1CB9C633C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)(result + 32) | 2) != 2) {
    return result;
  }
  uint64_t v2 = (unsigned int *)result;
  long long v7 = *(_OWORD *)result;
  if (!a2)
  {
    sub_1CB920400();
LABEL_17:
    uint64_t v6 = result;
    uint64_t result = v6;
LABEL_14:
    v2[10] = result;
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, &v7, result, result + 16);
  v2[8] = 1;
  uint64_t v3 = *(void *)v2;
  int v4 = *(unsigned __int16 *)(*(void *)v2 + 24);
  if (!*(void *)v2 || v4 != 45)
  {
    if (v4 == 35) {
      v2[8] = 6;
    }
    long long v7 = *(_OWORD *)(*(void *)(v3 + 40) + 16 * v2[2]);
    if ((_BYTE)v7) {
      uint64_t result = sub_1CB87E200((unsigned __int8 *)&v7);
    }
    else {
      uint64_t result = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v7);
    }
    if (v5 != 1) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)(v3 + 80) == 64) {
    v2[8] = 3;
  }
  v2[10] = dword_1CDB0CF08[*(int *)(v3 + 76) - 1];
  return result;
}

uint64_t *sub_1CB9C64AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  *(void *)&long long v73 = a2;
  *((void *)&v73 + 1) = a3;
  *(void *)&long long v72 = a4;
  *((void *)&v72 + 1) = a5;
  int v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 == 11 || v10 == 35)
  {
    int v11 = *(unsigned __int16 *)(a4 + 24);
    if (v11 == 35 || v11 == 11)
    {
      uint64_t v13 = *(void *)(a2 + 80);
      uint64_t v14 = (unsigned __int8 *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u) {
        uint64_t v14 = *(unsigned __int8 **)v14;
      }
      uint64_t v15 = *v14;
      uint64_t v16 = *(void *)(a4 + 80);
      unsigned int v17 = (void *)(v16 + 24);
      if (*(_DWORD *)(v16 + 32) >= 0x41u) {
        unsigned int v17 = (void *)*v17;
      }
      unint64_t v18 = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(_DWORD *)v17 << 8);
      int v19 = *(unsigned __int8 **)a6;
      uint64_t v70 = v19;
      if (v19) {
        llvm::MetadataTracking::track((uint64_t)&v70, v19, 2);
      }
      int v71 = *((_DWORD *)a6 + 2);
      int v20 = sub_1CB9C48D8(v9, v18, (uint64_t)&v70, (llvm *)0x1B, 0);
      int v21 = v70;
      if (!v70) {
        return v20;
      }
      int v22 = *v70;
      if ((v22 - 4) > 0x1E)
      {
        if ((v22 - 3) >= 0xFFFFFFFE) {
          uint64_t v34 = v70;
        }
        else {
          uint64_t v34 = 0;
        }
        if ((v22 - 3) < 0xFFFFFFFE) {
          goto LABEL_104;
        }
        unint64_t v35 = (unint64_t)(v34 + 8);
      }
      else
      {
        if ((v70[1] & 0x7F) != 2 && !*((_DWORD *)v70 + 3)) {
          return v20;
        }
        uint64_t v62 = *((void *)v70 + 2);
        if ((v62 & 4) == 0) {
          return v20;
        }
        unint64_t v35 = v62 & 0xFFFFFFFFFFFFFFF8;
        if (!v35) {
          return v20;
        }
      }
      long long v36 = &v70;
LABEL_46:
      unsigned int v74 = v36;
      sub_1CC5FA668(v35 + 16, &v74);
      return v20;
    }
  }
  else
  {
    int v11 = *(unsigned __int16 *)(a4 + 24);
  }
  if ((v11 & 0xFFFE) != 0x1A6)
  {
    if ((v10 & 0xFFFE) != 0x1A6)
    {
      if (v11 == 51)
      {
        long long v37 = *(llvm::APFloatBase **)(a1 + 296);
        uint64_t v38 = *((void *)v37 + 104);
        if (v38) {
          __int16 v39 = *(_WORD *)(v38 + 8);
        }
        else {
          __int16 v39 = 0;
        }
        int v20 = sub_1CD7F3564(v37, (const char *)0xD8, (uint64_t)a6, (llvm *)0x1B, 0, a2, a3, v39);
        sub_1CD3D60FC(*(void *)(v9 + 296), v8, (uint64_t)a3, (uint64_t)v20);
        return v20;
      }
      uint64_t v45 = *(void *)(a1 + 480);
      int v46 = *(unsigned __int8 *)(v45 + 318);
      BOOL v47 = *(unsigned char *)(v45 + 318) == 0;
      if (v10 == 51)
      {
        uint64_t v48 = *(void *)(a1 + 296);
        if (v46) {
          int v49 = 6197;
        }
        else {
          int v49 = 6251;
        }
        uint64_t v50 = *(unsigned __int8 **)a6;
        unsigned int v68 = v50;
        if (v50) {
          llvm::MetadataTracking::track((uint64_t)&v68, v50, 2);
        }
        int v69 = *((_DWORD *)a6 + 2);
        LODWORD(v74) = 0;
        int v66 = 8;
        unsigned int v67 = 0;
        int v65 = 8;
        int v20 = sub_1CD401918(v48, v49, (uint64_t)&v68, 0x1Bu, 0, (int *)&v74, &v72, &v67, &v66, &v65);
        int v21 = v68;
        if (!v68) {
          return v20;
        }
        int v22 = *v68;
        if ((v22 - 4) > 0x1E)
        {
          if ((v22 - 3) >= 0xFFFFFFFE) {
            unsigned int v61 = v68;
          }
          else {
            unsigned int v61 = 0;
          }
          if ((v22 - 3) < 0xFFFFFFFE) {
            goto LABEL_104;
          }
          unint64_t v35 = (unint64_t)(v61 + 8);
        }
        else
        {
          if ((v68[1] & 0x7F) != 2 && !*((_DWORD *)v68 + 3)) {
            return v20;
          }
          uint64_t v51 = *((void *)v68 + 2);
          if ((v51 & 4) == 0) {
            return v20;
          }
          unint64_t v35 = v51 & 0xFFFFFFFFFFFFFFF8;
          if (!v35) {
            return v20;
          }
        }
        long long v36 = &v68;
        goto LABEL_46;
      }
      goto LABEL_80;
    }
    if (v11 != 53)
    {
      if (v11 == 51)
      {
        unsigned int v24 = 0;
        uint64_t v25 = 0;
LABEL_36:
        int v26 = 0;
        goto LABEL_37;
      }
      goto LABEL_79;
    }
    int v27 = *(uint64_t **)(a4 + 32);
    int v28 = *(unsigned __int8 *)(*(void *)(*v27 + 40) + 16 * *((unsigned int *)v27 + 2));
    if (v28 == 27)
    {
      uint64_t v29 = v27[5];
      int v30 = *(unsigned __int16 *)(v29 + 24);
      if (v30 == 35 || v30 == 11)
      {
        uint64_t v32 = *(void *)(v29 + 80);
        uint64_t v33 = (void *)(v32 + 24);
        if (*(_DWORD *)(v32 + 32) >= 0x41u) {
          uint64_t v33 = (void *)*v33;
        }
        if (*v33 == 1)
        {
          uint64_t v25 = v27[1];
          unsigned int v24 = (uint64_t *)*v27;
          goto LABEL_36;
        }
      }
      goto LABEL_79;
    }
    if (v28 != 28
      || ((v40 = v27[5], v41 = *(unsigned __int16 *)(v40 + 24), v41 != 35) ? (BOOL v42 = v41 == 11) : (BOOL v42 = 1), !v42))
    {
LABEL_79:
      BOOL v47 = *(unsigned char *)(*(void *)(a1 + 480) + 318) == 0;
LABEL_80:
      uint64_t v56 = *(void *)(a1 + 296);
      if (v47) {
        int v57 = 6269;
      }
      else {
        int v57 = 6215;
      }
      int v58 = *(unsigned __int8 **)a6;
      uint64_t v63 = v58;
      if (v58) {
        llvm::MetadataTracking::track((uint64_t)&v63, v58, 2);
      }
      int v64 = *((_DWORD *)a6 + 2);
      LODWORD(v74) = 0;
      int v66 = 8;
      unsigned int v67 = 0;
      int v65 = 8;
      int v20 = sub_1CD3FD8B0(v56, v57, (uint64_t)&v63, 0x1Bu, 0, &v73, (unsigned int *)&v74, &v72, &v67, &v66, &v65);
      int v21 = v63;
      if (!v63) {
        return v20;
      }
      int v22 = *v63;
      if ((v22 - 4) <= 0x1E)
      {
        if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
          return v20;
        }
        uint64_t v59 = *((void *)v63 + 2);
        if ((v59 & 4) == 0) {
          return v20;
        }
        unint64_t v35 = v59 & 0xFFFFFFFFFFFFFFF8;
        if (!v35) {
          return v20;
        }
        goto LABEL_97;
      }
      if ((v22 - 3) >= 0xFFFFFFFE) {
        uint64_t v60 = v63;
      }
      else {
        uint64_t v60 = 0;
      }
      if ((v22 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v35 = (unint64_t)(v60 + 8);
LABEL_97:
        long long v36 = &v63;
        goto LABEL_46;
      }
LABEL_104:
      if (v22 == 3) {
        *((void *)v21 + 1) = 0;
      }
      return v20;
    }
    uint64_t v43 = *(void *)(v40 + 80);
    if (*(_DWORD *)(v43 + 32) > 0x40u) {
      uint64_t v44 = **(void **)(v43 + 24);
    }
    else {
      uint64_t v44 = *(void *)(v43 + 24);
    }
    if (v44 == 1)
    {
      uint64_t v52 = *(void *)(a1 + 296);
      uint64_t v53 = v27[1];
      int v54 = 1;
    }
    else
    {
      if (v44 != 3) {
        goto LABEL_79;
      }
      uint64_t v52 = *(void *)(a1 + 296);
      uint64_t v53 = v27[1];
      int v54 = 2;
    }
    unsigned int v24 = sub_1CD8015C0(v52, v54, a6, (llvm *)0x1B, 0, *v27, v53);
    uint64_t v25 = v55;
    a1 = v9;
    a2 = v8;
    goto LABEL_36;
  }
  a2 = a4;
  unsigned int v24 = (uint64_t *)v8;
  uint64_t v25 = (uint64_t)a3;
  int v26 = 1;
LABEL_37:

  return sub_1CB9C7338(a1, a2, (llvm *)0x1B, 0, (uint64_t)v24, v25, v26);
}

uint64_t sub_1CB9C69E4(int a1, int a2)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 4:
    case 9:
    case 10:
    case 15:
    case 16:
    case 19:
    case 20:
    case 36:
    case 41:
    case 43:
    case 45:
    case 47:
    case 48:
    case 49:
    case 52:
    case 53:
    case 54:
      return 32;
    case 5:
    case 12:
      return 16;
    case 6:
      return 8;
    case 7:
    case 35:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 2;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0CE00;
      return v5[v4];
    case 8:
    case 17:
    case 22:
    case 29:
    case 31:
      return 2;
    case 14:
    case 55:
      return 5;
    case 21:
      return result;
    case 23:
    case 24:
    case 38:
    case 39:
    case 40:
    case 42:
    case 44:
    case 46:
      return 11;
    case 25:
    case 37:
      return 10;
    case 26:
    case 27:
    case 28:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 8;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0CD88;
      return v5[v4];
    case 30:
    case 50:
      return 3;
    case 32:
      BOOL v6 = (a2 - 6) >= 0xA;
      unsigned int v7 = 2;
      unsigned int v8 = 5;
      goto LABEL_22;
    case 33:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 1;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0CE3C;
      return v5[v4];
    case 34:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 8;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0CDC4;
      return v5[v4];
    case 51:
      BOOL v6 = (a2 - 6) >= 0xA;
      unsigned int v7 = 3;
      unsigned int v8 = 6;
LABEL_22:
      if (v6) {
        return v7;
      }
      else {
        return v8;
      }
    default:
      return 1;
  }
}

uint64_t *sub_1CB9C6BBC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v8 = *(uint64_t **)(a2 + 32);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = v8[5];
  uint64_t v12 = v8[6];
  uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v40 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v40, v13, 2);
  }
  int v41 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v9 + 24) == 215)
  {
    uint64_t v14 = *(void *)(v9 + 32);
    uint64_t v9 = *(void *)v14;
    LODWORD(v10) = *(_DWORD *)(v14 + 8);
  }
  sub_1CD3FC878((uint64_t)v37, *(void *)(a1 + 296), v9, v10, 0, 0, 1);
  sub_1CD3FC878((uint64_t)v35, *(void *)(a1 + 296), v11, v12, 0, 0, 1);
  uint64_t v15 = operator new(0x28uLL);
  void *v15 = &unk_1F25F0D40;
  v15[1] = sub_1CB9C44B4;
  _OWORD v15[2] = 0;
  v15[3] = a1;
  *((_DWORD *)v15 + 8) = 0;
  sub_1CB9C633C((uint64_t)v37, (uint64_t)v15);
  (*(void (**)(void *))(*v15 + 40))(v15);
  uint64_t v16 = operator new(0x28uLL);
  void *v16 = &unk_1F25F0D40;
  v16[1] = sub_1CB9C44B4;
  _OWORD v16[2] = 0;
  v16[3] = a1;
  *((_DWORD *)v16 + 8) = 0;
  sub_1CB9C633C((uint64_t)v35, (uint64_t)v16);
  (*(void (**)(void *))(*v16 + 40))(v16);
  if (v39 == 16) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = 2;
  }
  if (v38 <= 3) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  if ((a3 & a4) != 0) {
    int v19 = 29;
  }
  else {
    int v19 = 28;
  }
  int v20 = sub_1CB952700(v19, dword_1CDAF3F74[6 * a3 + 2 * v18 + (v36 < 4)], *(unsigned char **)(a1 + 480));
  uint64_t v21 = *(void *)(a1 + 296);
  uint64_t v33 = v40;
  if (v40) {
    llvm::MetadataTracking::track((uint64_t)&v33, v40, 2);
  }
  int v34 = v41;
  if (a3) {
    unsigned int v22 = 9;
  }
  else {
    unsigned int v22 = 10;
  }
  unsigned int v23 = sub_1CD401AB0(v21, v20, (uint64_t)&v33, v22, 0x1000u, (uint64_t)v37, (uint64_t)v35);
  if (v33)
  {
    int v24 = *v33;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        int v27 = v33;
      }
      else {
        int v27 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v28 = (unint64_t)(v27 + 8);
LABEL_33:
        BOOL v42 = &v33;
        sub_1CC5FA668(v28 + 16, &v42);
        goto LABEL_23;
      }
      if (v24 == 3) {
        *((void *)v33 + 1) = 0;
      }
    }
    else if ((v33[1] & 0x7F) == 2 || *((_DWORD *)v33 + 3))
    {
      uint64_t v31 = *((void *)v33 + 2);
      if ((v31 & 4) != 0)
      {
        unint64_t v28 = v31 & 0xFFFFFFFFFFFFFFF8;
        if (v28) {
          goto LABEL_33;
        }
      }
    }
  }
LABEL_23:
  if (v40)
  {
    int v25 = *v40;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v40;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v30 = (unint64_t)(v29 + 8);
LABEL_39:
        v37[0] = &v40;
        sub_1CC5FA668(v30 + 16, v37);
        return v23;
      }
      if (v25 == 3) {
        *((void *)v40 + 1) = 0;
      }
    }
    else if ((v40[1] & 0x7F) == 2 || *((_DWORD *)v40 + 3))
    {
      uint64_t v32 = *((void *)v40 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v30 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v30) {
          goto LABEL_39;
        }
      }
    }
  }
  return v23;
}

uint64_t sub_1CB9C6F20(uint64_t a1, void *a2)
{
  if (**(unsigned char **)(a1 + 40) != 9) {
    return 0;
  }
  int v4 = *(unsigned __int8 **)(a1 + 64);
  unsigned int v22 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v22, v4, 2);
  }
  int v23 = *(_DWORD *)(a1 + 60);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = *(void *)(v5 + 48);
  if (*(_WORD *)(v6 + 24) == 222 && *(_WORD *)(**(void **)(v6 + 32) + 24) == 430)
  {
    unint64_t v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 8);
    uint64_t v8 = *(void *)v5;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 40);
    uint64_t v6 = *(void *)v5;
  }
  if (*(_WORD *)(v6 + 24) == 222 && (uint64_t v10 = *(uint64_t **)(v6 + 32), v11 = *v10, *(_WORD *)(*v10 + 24) == 430))
  {
    uint64_t v16 = v10[1];
    uint64_t v17 = sub_1CD7ECDC4((uint64_t)a2, (uint64_t)&v22, 9, 0, 0, -1.0);
    int v20 = sub_1CD7F5D38(a2, (const char *)0x8D, (const llvm::APInt *)&v22, (llvm *)9, 0, v11, v16, v19, (uint64_t)v17, v18, v8, v7, SHIDWORD(v7), *(_WORD *)(a1 + 72));
    sub_1CD3D60FC((uint64_t)a2, a1, 0, (uint64_t)v20);
    sub_1CCFCC50C((uint64_t)a2, a1, (uint64_t)v20);
    sub_1CD7EA438(a2, a1);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v22)
  {
    int v12 = *v22;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v22;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v12 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = (unint64_t)(v14 + 8);
LABEL_22:
        int v24 = &v22;
        sub_1CC5FA668(v15 + 16, &v24);
        return v9;
      }
      if (v12 == 3) {
        *((void *)v22 + 1) = 0;
      }
    }
    else if ((v22[1] & 0x7F) == 2 || *((_DWORD *)v22 + 3))
    {
      uint64_t v21 = *((void *)v22 + 2);
      if ((v21 & 4) != 0)
      {
        unint64_t v15 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          goto LABEL_22;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_1CB9C7114(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v10 = 1;
  sub_1CD3FC878((uint64_t)v14, *(void *)(a1 + 296), (uint64_t)a2, a3, 1, 0, 0);
  uint64_t v11 = *(unsigned char **)(a1 + 480);
  if (v11[319]) {
    BOOL v12 = v11[338] == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    BOOL v10 = v11[326] != 0;
  }
  return sub_1CD401D24(a2, a3, a4, a5, v14[8] > 3, v10, *(void *)(a1 + 296));
}

void *sub_1CB9C71CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 480) + 318))
  {
    uint64_t result = operator new(0x28uLL);
    *uint64_t result = &unk_1F25F0D88;
    result[1] = sub_1CB9CCECC;
    result[2] = 0;
    result[3] = a2;
    *((unsigned char *)result + 32) = 1;
  }
  else
  {
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = &unk_1F25F0DD0;
    result[1] = sub_1CB9CD558;
    result[2] = 0;
    result[3] = a2;
  }
  *(void *)(a1 + 24) = result;
  return result;
}

void *sub_1CB9C7284(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 480) + 318))
  {
    uint64_t result = operator new(0x28uLL);
    *uint64_t result = &unk_1F25F0D88;
    result[1] = sub_1CB9CCECC;
    result[2] = 0;
    result[3] = a2;
    *((unsigned char *)result + 32) = 0;
  }
  else
  {
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = &unk_1F25F0DD0;
    result[1] = sub_1CB9CD558;
    result[2] = 0;
    result[3] = a2;
  }
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t *sub_1CB9C7338(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)&long long v55 = a5;
  *((void *)&v55 + 1) = a6;
  unsigned int v54 = sub_1CB9CE0CC(a2);
  uint64_t v14 = *(void *)(*(void *)(a2 + 32) + 40 * (*(_WORD *)(a2 + 24) == 46));
  uint64_t v13 = *(void *)(*(void *)(a2 + 32) + 40 * (*(_WORD *)(a2 + 24) == 46) + 8);
  *(void *)&long long v53 = v14;
  *((void *)&v53 + 1) = v13;
  if (*(_WORD *)(v14 + 24) == 215)
  {
    uint64_t v15 = *(void *)(v14 + 32);
    int v16 = *(_DWORD *)(v15 + 8);
    *(void *)&long long v53 = *(void *)v15;
    DWORD2(v53) = v16;
    BOOL v17 = *(unsigned char *)(*(void *)(a1 + 480) + 318) == 0;
LABEL_4:
    int v18 = 2056;
    int v19 = 2072;
    goto LABEL_6;
  }
  BOOL v17 = *(unsigned char *)(*(void *)(a1 + 480) + 318) == 0;
  if (*(void *)(*(void *)(v14 + 40) + 16 * v13) == 9) {
    goto LABEL_4;
  }
  int v18 = 2055;
  int v19 = 2071;
LABEL_6:
  if (v17) {
    int v20 = v19;
  }
  else {
    int v20 = v18;
  }
  uint64_t v21 = *(void *)(a1 + 296);
  unsigned int v22 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v51 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v51, v22, 2);
  }
  int v52 = *(_DWORD *)(a2 + 60);
  LODWORD(v47) = 0;
  int v23 = sub_1CD402558(v21, v20, (uint64_t)&v51, 0, &v54, &v53, (unsigned int *)&v47);
  if (v51)
  {
    int v24 = *v51;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        unint64_t v35 = v51;
      }
      else {
        unint64_t v35 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v36 = (unint64_t)(v35 + 8);
LABEL_45:
        *(void *)&long long v47 = &v51;
        sub_1CC5FA668(v36 + 16, &v47);
        goto LABEL_15;
      }
      if (v24 == 3) {
        *((void *)v51 + 1) = 0;
      }
    }
    else if ((v51[1] & 0x7F) == 2 || *((_DWORD *)v51 + 3))
    {
      uint64_t v41 = *((void *)v51 + 2);
      if ((v41 & 4) != 0)
      {
        unint64_t v36 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v36) {
          goto LABEL_45;
        }
      }
    }
  }
LABEL_15:
  uint64_t v25 = *(void *)(a1 + 296);
  int v26 = *(unsigned __int8 **)(a2 + 64);
  if (a5)
  {
    if (v17) {
      int v33 = 6269;
    }
    else {
      int v33 = 6215;
    }
    int v49 = *(unsigned __int8 **)(a2 + 64);
    if (v26) {
      llvm::MetadataTracking::track((uint64_t)&v49, v26, 2);
    }
    int v50 = *(_DWORD *)(a2 + 60);
    int v48 = 0;
    *(void *)&long long v47 = v23;
    DWORD2(v47) = 0;
    int v45 = 8 * (a7 != 0);
    unsigned int v46 = 0;
    int v44 = 8;
    unint64_t v28 = sub_1CD40265C(v25, v33, (uint64_t)&v49, a3, a4, 0, &v55, (unsigned int *)&v48, &v47, &v46, &v45, &v44);
    uint64_t v29 = v49;
    if (!v49) {
      return v28;
    }
    int v30 = *v49;
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        int v39 = v49;
      }
      else {
        int v39 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
LABEL_59:
        if (v30 == 3) {
          *((void *)v29 + 1) = 0;
        }
        return v28;
      }
      unint64_t v32 = (unint64_t)(v39 + 8);
    }
    else
    {
      if ((v49[1] & 0x7F) != 2 && !*((_DWORD *)v49 + 3)) {
        return v28;
      }
      uint64_t v34 = *((void *)v49 + 2);
      if ((v34 & 4) == 0) {
        return v28;
      }
      unint64_t v32 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        return v28;
      }
    }
    int v38 = &v49;
    goto LABEL_58;
  }
  if (v17) {
    int v27 = 6251;
  }
  else {
    int v27 = 6197;
  }
  BOOL v42 = *(unsigned __int8 **)(a2 + 64);
  if (v26) {
    llvm::MetadataTracking::track((uint64_t)&v42, v26, 2);
  }
  int v43 = *(_DWORD *)(a2 + 60);
  int v48 = 0;
  *(void *)&long long v47 = v23;
  DWORD2(v47) = 0;
  int v45 = 8 * (a7 != 0);
  unsigned int v46 = 0;
  int v44 = 8;
  unint64_t v28 = sub_1CD402778(v25, v27, (uint64_t)&v42, a3, a4, 0, &v48, &v47, &v46, &v45, &v44);
  uint64_t v29 = v42;
  if (!v42) {
    return v28;
  }
  int v30 = *v42;
  if ((v30 - 4) > 0x1E)
  {
    if ((v30 - 3) >= 0xFFFFFFFE) {
      long long v37 = v42;
    }
    else {
      long long v37 = 0;
    }
    if ((v30 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v32 = (unint64_t)(v37 + 8);
LABEL_51:
      int v38 = &v42;
LABEL_58:
      *(void *)&long long v47 = v38;
      sub_1CC5FA668(v32 + 16, &v47);
      return v28;
    }
    goto LABEL_59;
  }
  if ((v42[1] & 0x7F) == 2 || *((_DWORD *)v42 + 3))
  {
    uint64_t v31 = *((void *)v42 + 2);
    if ((v31 & 4) != 0)
    {
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (v32) {
        goto LABEL_51;
      }
    }
  }
  return v28;
}

uint64_t *sub_1CB9C7714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v41 = a2;
  *((void *)&v41 + 1) = a3;
  uint64_t v5 = *(unsigned __int8 **)(a2 + 64);
  int v39 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v39, v5, 2);
    uint64_t v5 = v39;
  }
  int v6 = *(_DWORD *)(a2 + 60);
  int v40 = v6;
  uint64_t v7 = *(void *)(a1 + 296);
  if (!*(unsigned char *)(*(void *)(a1 + 480) + 318))
  {
    unint64_t v32 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track((uint64_t)&v32, v5, 2);
      int v6 = v40;
    }
    int v33 = v6;
    LODWORD(v29) = 0;
    int v36 = 256;
    uint64_t v8 = sub_1CD3FED88(v7, 2343, (uint64_t)&v32, 0, (int *)&v29, &v41, &v36);
    if (v32)
    {
      int v9 = *v32;
      if ((v9 - 4) > 0x1E)
      {
        if ((v9 - 3) >= 0xFFFFFFFE) {
          uint64_t v21 = v32;
        }
        else {
          uint64_t v21 = 0;
        }
        if ((v9 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_47:
          *(void *)&long long v29 = &v32;
          sub_1CC5FA668(v22 + 16, &v29);
          goto LABEL_10;
        }
        if (v9 == 3) {
          *((void *)v32 + 1) = 0;
        }
      }
      else if ((v32[1] & 0x7F) == 2 || *((_DWORD *)v32 + 3))
      {
        uint64_t v27 = *((void *)v32 + 2);
        if ((v27 & 4) != 0)
        {
          unint64_t v22 = v27 & 0xFFFFFFFFFFFFFFF8;
          if (v22) {
            goto LABEL_47;
          }
        }
      }
    }
LABEL_10:
    uint64_t v10 = *(void *)(a1 + 296);
    int v30 = v39;
    if (v39) {
      llvm::MetadataTracking::track((uint64_t)&v30, v39, 2);
    }
    int v31 = v40;
    *(void *)&long long v29 = v8;
    DWORD2(v29) = 0;
    int v35 = 256;
    int v36 = 0;
    uint64_t v11 = sub_1CD3FED88(v10, 2342, (uint64_t)&v30, 0, &v36, &v29, &v35);
    if (!v30) {
      goto LABEL_16;
    }
    int v12 = *v30;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        int v23 = v30;
      }
      else {
        int v23 = 0;
      }
      if ((v12 - 3) < 0xFFFFFFFE)
      {
        if (v12 == 3) {
          *((void *)v30 + 1) = 0;
        }
        goto LABEL_16;
      }
      unint64_t v24 = (unint64_t)(v23 + 8);
    }
    else
    {
      if ((v30[1] & 0x7F) != 2 && !*((_DWORD *)v30 + 3)) {
        goto LABEL_16;
      }
      uint64_t v28 = *((void *)v30 + 2);
      if ((v28 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v24 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v24) {
        goto LABEL_16;
      }
    }
    *(void *)&long long v29 = &v30;
    sub_1CC5FA668(v24 + 16, &v29);
LABEL_16:
    uint64_t v13 = sub_1CD8015C0(*(void *)(a1 + 296), 2, (const llvm::APInt *)&v39, (llvm *)4, 0, (uint64_t)v11, 0);
    goto LABEL_23;
  }
  long long v37 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v37, v5, 2);
    int v6 = v40;
  }
  int v38 = v6;
  LODWORD(v29) = 0;
  int v35 = 8;
  int v36 = 0;
  int v34 = 8;
  uint64_t v13 = sub_1CD401918(v7, 8093, (uint64_t)&v37, 4u, 0, (int *)&v29, &v41, (unsigned int *)&v36, &v35, &v34);
  if (v37)
  {
    int v14 = *v37;
    if ((v14 - 4) <= 0x1E)
    {
      if ((v37[1] & 0x7F) != 2 && !*((_DWORD *)v37 + 3)) {
        goto LABEL_23;
      }
      uint64_t v26 = *((void *)v37 + 2);
      if ((v26 & 4) == 0) {
        goto LABEL_23;
      }
      unint64_t v20 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_23;
      }
LABEL_39:
      *(void *)&long long v29 = &v37;
      sub_1CC5FA668(v20 + 16, &v29);
      goto LABEL_23;
    }
    if ((v14 - 3) >= 0xFFFFFFFE) {
      int v19 = v37;
    }
    else {
      int v19 = 0;
    }
    if ((v14 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unint64_t)(v19 + 8);
      goto LABEL_39;
    }
    if (v14 == 3) {
      *((void *)v37 + 1) = 0;
    }
  }
LABEL_23:
  if (v39)
  {
    int v15 = *v39;
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        BOOL v17 = v39;
      }
      else {
        BOOL v17 = 0;
      }
      if ((v15 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = (unint64_t)(v17 + 8);
LABEL_33:
        *(void *)&long long v29 = &v39;
        sub_1CC5FA668(v18 + 16, &v29);
        return v13;
      }
      if (v15 == 3) {
        *((void *)v39 + 1) = 0;
      }
    }
    else if ((v39[1] & 0x7F) == 2 || *((_DWORD *)v39 + 3))
    {
      uint64_t v25 = *((void *)v39 + 2);
      if ((v25 & 4) != 0)
      {
        unint64_t v18 = v25 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_33;
        }
      }
    }
  }
  return v13;
}

uint64_t sub_1CB9C7AD4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CD3FC878((uint64_t)v14, *(void *)(a1 + 296), (uint64_t)a2, a3, 0, 0, 0);
  uint64_t v10 = *(unsigned char **)(a1 + 480);
  if (v10[319]) {
    BOOL v11 = v10[338] == 0;
  }
  else {
    BOOL v11 = 0;
  }
  BOOL v12 = v11 || v10[326] != 0;
  return sub_1CD402A24(a2, a3, a4, a5, v14[8] > 3, v12, *(void *)(a1 + 296));
}

BOOL sub_1CB9C7B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v44 = (uint64_t *)a2;
  uint64_t v45 = a3;
  sub_1CD3FC878((uint64_t)v42, *(void *)(a1 + 296), a2, a3, 0, 0, 0);
  int v10 = v43;
  if (v43 > 3) {
    return v10 < 4;
  }
  int v12 = *(unsigned __int16 *)(a2 + 24);
  if (v12 != 12)
  {
    if (v12 == 430)
    {
      uint64_t v16 = *(void *)(a2 + 32);
      int v17 = *(_DWORD *)(v16 + 8);
      unint64_t v18 = *(uint64_t **)v16;
      int v44 = *(uint64_t **)v16;
      LODWORD(v45) = v17;
      unsigned int v19 = 1;
      goto LABEL_22;
    }
    if (v12 != 36) {
      goto LABEL_11;
    }
  }
  uint64_t v13 = *(void *)(a2 + 80);
  int v14 = (const llvm::detail::DoubleAPFloat *)(v13 + 32);
  if (*(_UNKNOWN **)(v13 + 32) == &unk_1CFB2E344)
  {
    if ((*(unsigned char *)(*(void *)(v13 + 40) + 28) & 8) != 0)
    {
      int v15 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v48, v14);
      goto LABEL_13;
    }
LABEL_11:
    unsigned int v19 = 0;
    unint64_t v18 = (uint64_t *)a2;
    goto LABEL_22;
  }
  if ((*(unsigned char *)(v13 + 52) & 8) == 0) {
    goto LABEL_11;
  }
  int v15 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v48, v14);
LABEL_13:
  if ((_UNKNOWN *)v48 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::changeSign(v15);
  }
  else {
    v50 ^= 8u;
  }
  uint64_t v20 = *(void *)(a1 + 296);
  v41[0] = 0;
  v41[1] = 0;
  uint64_t v21 = *(void *)(a2 + 40) + 16 * a3;
  unint64_t v18 = sub_1CD7ECA8C(v20, (llvm::LLVMContext *)&v47, (const llvm::APFloat *)v41, *(llvm **)v21, *(void *)(v21 + 8), 0);
  int v23 = v22;
  if (!v41[0]) {
    goto LABEL_19;
  }
  int v24 = *(unsigned __int8 *)v41[0];
  if ((v24 - 4) > 0x1E)
  {
    if ((v24 - 3) >= 0xFFFFFFFE) {
      uint64_t v38 = v41[0];
    }
    else {
      uint64_t v38 = 0;
    }
    if ((v24 - 3) < 0xFFFFFFFE)
    {
      if (v24 == 3) {
        *(void *)(v41[0] + 8) = 0;
      }
      goto LABEL_19;
    }
    unint64_t v39 = v38 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v41[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v41[0] + 12)) {
      goto LABEL_19;
    }
    uint64_t v40 = *(void *)(v41[0] + 16);
    if ((v40 & 4) == 0) {
      goto LABEL_19;
    }
    unint64_t v39 = v40 & 0xFFFFFFFFFFFFFFF8;
    if (!v39) {
      goto LABEL_19;
    }
  }
  unsigned int v46 = v41;
  sub_1CC5FA668(v39 + 16, &v46);
LABEL_19:
  sub_1CD3D60FC(*(void *)(a1 + 296), a2, a3, (uint64_t)v18);
  int v44 = v18;
  LODWORD(v45) = v23;
  if ((_UNKNOWN *)v48 == &unk_1CFB2E344)
  {
    sub_1CB845718(&v49);
  }
  else if ((*(_DWORD *)(v48 + 8) - 64) <= 0xFFFFFF7F && v49)
  {
    MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
  }
  unsigned int v19 = 2;
LABEL_22:
  int v25 = *((unsigned __int16 *)v18 + 12);
  if (v25 == 222)
  {
    uint64_t v26 = v18[4];
    int v27 = *(_DWORD *)(v26 + 8);
    unint64_t v18 = *(uint64_t **)v26;
    int v44 = v18;
    LODWORD(v45) = v27;
    v19 ^= 2u;
    int v25 = *((unsigned __int16 *)v18 + 12);
  }
  if (v25 == 223)
  {
    uint64_t v28 = v18[4];
    int v29 = *(_DWORD *)(v28 + 8);
    unint64_t v18 = *(uint64_t **)v28;
    int v44 = *(uint64_t **)v28;
    LODWORD(v45) = v29;
    v19 |= 4u;
  }
  int v30 = *(unsigned char **)(a1 + 480);
  int v31 = v30[319] && !v30[338] || v30[326] != 0;
  sub_1CD3FCE48(v18, v45, (uint64_t)&v44, 1, 0, v31, *(void *)(a1 + 296));
  *(void *)a4 = v44;
  *(_DWORD *)(a4 + 8) = v45;
  uint64_t v32 = *(void *)(a1 + 296);
  long long v47 = 0;
  uint64_t v48 = 0;
  *(void *)a5 = sub_1CD7EBF14(v32, v19, (const llvm::APInt *)&v47, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v33;
  if (v47)
  {
    int v34 = *v47;
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        long long v37 = v47;
      }
      else {
        long long v37 = 0;
      }
      if ((v34 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v36 = (unint64_t)(v37 + 8);
LABEL_42:
        v41[0] = &v47;
        sub_1CC5FA668(v36 + 16, v41);
        return v10 < 4;
      }
      if (v34 == 3) {
        *((void *)v47 + 1) = 0;
      }
    }
    else if ((v47[1] & 0x7F) == 2 || *((_DWORD *)v47 + 3))
    {
      uint64_t v35 = *((void *)v47 + 2);
      if ((v35 & 4) != 0)
      {
        unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (v36) {
          goto LABEL_42;
        }
      }
    }
  }
  return v10 < 4;
}

uint64_t *sub_1CB9C7F60(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 296);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  int v10 = *(llvm **)v8;
  uint64_t v11 = *(void *)(v8 + 8);
  long long v12 = *(_OWORD *)(v9 + 40);
  long long v104 = *(_OWORD *)(v9 + 80);
  long long v105 = v12;
  int v13 = *(unsigned __int16 *)(v12 + 24);
  if (v13 == 35 || v13 == 11) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0;
  }
  int v16 = *(unsigned __int16 *)(v104 + 24);
  if (v16 == 35 || v16 == 11) {
    uint64_t v18 = v104;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v15)
  {
    uint64_t v19 = *(void *)(v15 + 80);
    uint64_t v20 = (void *)(v19 + 24);
    if (*(_DWORD *)(v19 + 32) >= 0x41u) {
      uint64_t v20 = (void *)*v20;
    }
    BOOL v21 = *v20 < 0x100uLL;
  }
  else
  {
    BOOL v21 = 0;
  }
  if (v18)
  {
    uint64_t v22 = *(void *)(v18 + 80);
    int v23 = (unint64_t *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u) {
      int v23 = (unint64_t *)*v23;
    }
    unint64_t v24 = *v23;
    unint64_t v25 = *v23 & 0xFFFFFFFFFFFFFC03;
    unint64_t v26 = *v23 & 0xFFFFFFFFFFFFF807;
    BOOL v27 = 1;
    if (v26) {
      BOOL v28 = v25 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28) {
      BOOL v27 = v24 < 0x100 || (v24 & 0xFFFFFFFFFFFFFE01) == 0 || (v24 & 0xFFFFFFFFFFFFF00FLL) == 0;
    }
  }
  else
  {
    BOOL v27 = 0;
  }
  if (!v21)
  {
    if (a3 != 58 || !v27)
    {
      if (a3 == 56)
      {
        if (a4) {
          unsigned int v46 = 8;
        }
        else {
          unsigned int v46 = 0;
        }
        unsigned int v101 = v46;
        int v31 = 36;
        if (v27) {
          goto LABEL_150;
        }
      }
      else
      {
        if (a3 == 57) {
          int v31 = 46;
        }
        else {
          int v31 = 41;
        }
        if (a4) {
          unsigned int v66 = 8;
        }
        else {
          unsigned int v66 = 0;
        }
        unsigned int v101 = v66;
        if (v27) {
          goto LABEL_150;
        }
      }
      goto LABEL_76;
    }
LABEL_43:
    if (v15)
    {
      uint64_t v33 = *(void *)(v15 + 80);
      int v34 = (void *)(v33 + 24);
      if (*(_DWORD *)(v33 + 32) >= 0x41u) {
        int v34 = (void *)*v34;
      }
      if (!*v34) {
        goto LABEL_51;
      }
    }
    if (v18)
    {
      uint64_t v35 = *(void *)(v18 + 80);
      unint64_t v36 = (void *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u) {
        unint64_t v36 = (void *)*v36;
      }
      if (!*v36)
      {
LABEL_51:
        long long v37 = *(unsigned __int8 **)(a2 + 64);
        int v102 = v37;
        if (v37) {
          llvm::MetadataTracking::track((uint64_t)&v102, v37, 2);
        }
        int v103 = *(_DWORD *)(a2 + 60);
        uint64_t v38 = sub_1CB9C48D8(a1, 0, (uint64_t)&v102, v10, v11);
        unint64_t v39 = v102;
        if (!v102) {
          return v38;
        }
        int v40 = *v102;
        if ((v40 - 4) > 0x1E)
        {
          if ((v40 - 3) >= 0xFFFFFFFE) {
            BOOL v42 = v102;
          }
          else {
            BOOL v42 = 0;
          }
          if ((v40 - 3) < 0xFFFFFFFE) {
            goto LABEL_218;
          }
          unint64_t v43 = (unint64_t)(v42 + 8);
        }
        else
        {
          if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
            return v38;
          }
          uint64_t v84 = *((void *)v102 + 2);
          if ((v84 & 4) == 0) {
            return v38;
          }
          unint64_t v43 = v84 & 0xFFFFFFFFFFFFFFF8;
          if (!v43) {
            return v38;
          }
        }
        int v44 = &v102;
LABEL_64:
        uint64_t v95 = v44;
        sub_1CC5FA668(v43 + 16, &v95);
        return v38;
      }
    }
    if (a4) {
      unsigned int v45 = 8;
    }
    else {
      unsigned int v45 = 0;
    }
    unsigned int v101 = v45;
    int v31 = 41;
    if (v21 || v27)
    {
      if (v21) {
        goto LABEL_102;
      }
LABEL_150:
      if (a3 == 58) {
        int v67 = 366;
      }
      else {
        int v67 = 365;
      }
      if (a3 == 58) {
        int v68 = 236;
      }
      else {
        int v68 = 235;
      }
      if (v10 == 4) {
        int v69 = v67;
      }
      else {
        int v69 = v68;
      }
      int v70 = sub_1CB952700(v31, v69, *(unsigned char **)(a1 + 480));
      int v71 = *(unsigned __int8 **)(a2 + 64);
      if (a3 == 58)
      {
        int v85 = *(unsigned __int8 **)(a2 + 64);
        if (v71) {
          llvm::MetadataTracking::track((uint64_t)&v85, v71, 2);
        }
        int v86 = *(_DWORD *)(a2 + 60);
        uint64_t v72 = *(void *)(v18 + 80);
        long long v73 = (unsigned __int8 **)(v72 + 24);
        if (*(_DWORD *)(v72 + 32) >= 0x41u) {
          long long v73 = (unsigned __int8 **)*v73;
        }
        uint64_t v95 = (unsigned __int8 **)*v73;
        char v96 = (char)v10;
        uint64_t v89 = 0;
        char v90 = (char)v10;
        uint64_t v38 = sub_1CD403484(v7, v70, (uint64_t)&v85, v10, 0, &v105, &v101, (uint64_t)&v95, (uint64_t)&v89);
        unint64_t v39 = v85;
        if (!v85) {
          return v38;
        }
        int v40 = *v85;
        if ((v40 - 4) > 0x1E)
        {
          if ((v40 - 3) >= 0xFFFFFFFE) {
            unint64_t v82 = v85;
          }
          else {
            unint64_t v82 = 0;
          }
          if ((v40 - 3) < 0xFFFFFFFE) {
            goto LABEL_218;
          }
          unint64_t v43 = (unint64_t)(v82 + 8);
        }
        else
        {
          if ((v85[1] & 0x7F) != 2 && !*((_DWORD *)v85 + 3)) {
            return v38;
          }
          uint64_t v74 = *((void *)v85 + 2);
          if ((v74 & 4) == 0) {
            return v38;
          }
          unint64_t v43 = v74 & 0xFFFFFFFFFFFFFFF8;
          if (!v43) {
            return v38;
          }
        }
        int v44 = &v85;
        goto LABEL_64;
      }
      int v87 = *(unsigned __int8 **)(a2 + 64);
      if (v71) {
        llvm::MetadataTracking::track((uint64_t)&v87, v71, 2);
      }
      int v88 = *(_DWORD *)(a2 + 60);
      uint64_t v75 = *(void *)(v18 + 80);
      unsigned int v76 = (unsigned __int8 **)(v75 + 24);
      if (*(_DWORD *)(v75 + 32) >= 0x41u) {
        unsigned int v76 = (unsigned __int8 **)*v76;
      }
      uint64_t v95 = (unsigned __int8 **)*v76;
      char v96 = (char)v10;
      uint64_t v38 = sub_1CD4033AC(v7, v70, (uint64_t)&v87, v10, 0, &v105, &v101, (uint64_t)&v95);
      unint64_t v39 = v87;
      if (!v87) {
        return v38;
      }
      int v40 = *v87;
      if ((v40 - 4) > 0x1E)
      {
        if ((v40 - 3) >= 0xFFFFFFFE) {
          int v83 = v87;
        }
        else {
          int v83 = 0;
        }
        if ((v40 - 3) < 0xFFFFFFFE) {
          goto LABEL_218;
        }
        unint64_t v43 = (unint64_t)(v83 + 8);
      }
      else
      {
        if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
          return v38;
        }
        uint64_t v77 = *((void *)v87 + 2);
        if ((v77 & 4) == 0) {
          return v38;
        }
        unint64_t v43 = v77 & 0xFFFFFFFFFFFFFFF8;
        if (!v43) {
          return v38;
        }
      }
      int v44 = &v87;
      goto LABEL_64;
    }
LABEL_76:
    if (a3 == 58) {
      int v47 = 381;
    }
    else {
      int v47 = 380;
    }
    if (a3 == 58) {
      int v48 = 242;
    }
    else {
      int v48 = 241;
    }
    if (v10 == 4) {
      int v49 = v47;
    }
    else {
      int v49 = v48;
    }
    int v50 = sub_1CB952700(v31, v49, *(unsigned char **)(a1 + 480));
    uint64_t v51 = *(unsigned __int8 **)(a2 + 64);
    if (a3 == 58)
    {
      uint64_t v97 = *(unsigned __int8 **)(a2 + 64);
      if (v51) {
        llvm::MetadataTracking::track((uint64_t)&v97, v51, 2);
      }
      int v98 = *(_DWORD *)(a2 + 60);
      uint64_t v95 = 0;
      char v96 = (char)v10;
      uint64_t v38 = sub_1CD403094(v7, v50, (uint64_t)&v97, v10, 0, &v105, &v101, &v104, &v101, (uint64_t)&v95);
      unint64_t v39 = v97;
      if (!v97) {
        return v38;
      }
      int v40 = *v97;
      if ((v40 - 4) > 0x1E)
      {
        if ((v40 - 3) >= 0xFFFFFFFE) {
          uint64_t v80 = v97;
        }
        else {
          uint64_t v80 = 0;
        }
        if ((v40 - 3) < 0xFFFFFFFE) {
          goto LABEL_218;
        }
        unint64_t v43 = (unint64_t)(v80 + 8);
      }
      else
      {
        if ((v97[1] & 0x7F) != 2 && !*((_DWORD *)v97 + 3)) {
          return v38;
        }
        uint64_t v52 = *((void *)v97 + 2);
        if ((v52 & 4) == 0) {
          return v38;
        }
        unint64_t v43 = v52 & 0xFFFFFFFFFFFFFFF8;
        if (!v43) {
          return v38;
        }
      }
      int v44 = &v97;
      goto LABEL_64;
    }
    int v99 = *(unsigned __int8 **)(a2 + 64);
    if (v51) {
      llvm::MetadataTracking::track((uint64_t)&v99, v51, 2);
    }
    int v100 = *(_DWORD *)(a2 + 60);
    uint64_t v38 = sub_1CD402F70(v7, v50, (uint64_t)&v99, v10, 0, &v105, &v101, &v104, &v101);
    unint64_t v39 = v99;
    if (!v99) {
      return v38;
    }
    int v40 = *v99;
    if ((v40 - 4) > 0x1E)
    {
      if ((v40 - 3) >= 0xFFFFFFFE) {
        int v81 = v99;
      }
      else {
        int v81 = 0;
      }
      if ((v40 - 3) < 0xFFFFFFFE) {
        goto LABEL_218;
      }
      unint64_t v43 = (unint64_t)(v81 + 8);
    }
    else
    {
      if ((v99[1] & 0x7F) != 2 && !*((_DWORD *)v99 + 3)) {
        return v38;
      }
      uint64_t v65 = *((void *)v99 + 2);
      if ((v65 & 4) == 0) {
        return v38;
      }
      unint64_t v43 = v65 & 0xFFFFFFFFFFFFFFF8;
      if (!v43) {
        return v38;
      }
    }
    int v44 = &v99;
    goto LABEL_64;
  }
  if (a3 == 58) {
    goto LABEL_43;
  }
  if (a3 == 56)
  {
    if (a4) {
      unsigned int v30 = 8;
    }
    else {
      unsigned int v30 = 0;
    }
    unsigned int v101 = v30;
    int v31 = 36;
  }
  else
  {
    if (a3 == 57) {
      int v31 = 46;
    }
    else {
      int v31 = 41;
    }
    if (a4) {
      unsigned int v53 = 8;
    }
    else {
      unsigned int v53 = 0;
    }
    unsigned int v101 = v53;
  }
LABEL_102:
  if (a3 == 58) {
    int v54 = 324;
  }
  else {
    int v54 = 323;
  }
  if (a3 == 58) {
    int v55 = 221;
  }
  else {
    int v55 = 220;
  }
  if (v10 == 4) {
    int v56 = v54;
  }
  else {
    int v56 = v55;
  }
  int v57 = sub_1CB952700(v31, v56, *(unsigned char **)(a1 + 480));
  int v58 = *(unsigned __int8 **)(a2 + 64);
  if (a3 != 58)
  {
    int v93 = *(unsigned __int8 **)(a2 + 64);
    if (v58) {
      llvm::MetadataTracking::track((uint64_t)&v93, v58, 2);
    }
    int v94 = *(_DWORD *)(a2 + 60);
    uint64_t v62 = *(void *)(v15 + 80);
    uint64_t v63 = (unsigned __int8 **)(v62 + 24);
    if (*(_DWORD *)(v62 + 32) >= 0x41u) {
      uint64_t v63 = (unsigned __int8 **)*v63;
    }
    uint64_t v95 = (unsigned __int8 **)*v63;
    char v96 = (char)v10;
    uint64_t v38 = sub_1CD4031BC(v7, v57, (uint64_t)&v93, v10, 0, (uint64_t)&v95, &v104, &v101);
    unint64_t v39 = v93;
    if (!v93) {
      return v38;
    }
    int v40 = *v93;
    if ((v40 - 4) <= 0x1E)
    {
      if ((v93[1] & 0x7F) != 2 && !*((_DWORD *)v93 + 3)) {
        return v38;
      }
      uint64_t v64 = *((void *)v93 + 2);
      if ((v64 & 4) == 0) {
        return v38;
      }
      unint64_t v43 = v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v43) {
        return v38;
      }
LABEL_193:
      int v44 = &v93;
      goto LABEL_64;
    }
    if ((v40 - 3) >= 0xFFFFFFFE) {
      unint64_t v79 = v93;
    }
    else {
      unint64_t v79 = 0;
    }
    if ((v40 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v43 = (unint64_t)(v79 + 8);
      goto LABEL_193;
    }
LABEL_218:
    if (v40 == 3) {
      *((void *)v39 + 1) = 0;
    }
    return v38;
  }
  int v91 = *(unsigned __int8 **)(a2 + 64);
  if (v58) {
    llvm::MetadataTracking::track((uint64_t)&v91, v58, 2);
  }
  int v92 = *(_DWORD *)(a2 + 60);
  uint64_t v59 = *(void *)(v15 + 80);
  uint64_t v60 = (unsigned __int8 **)(v59 + 24);
  if (*(_DWORD *)(v59 + 32) >= 0x41u) {
    uint64_t v60 = (unsigned __int8 **)*v60;
  }
  uint64_t v95 = (unsigned __int8 **)*v60;
  char v96 = (char)v10;
  uint64_t v89 = 0;
  char v90 = (char)v10;
  uint64_t v38 = sub_1CD403294(v7, v57, (uint64_t)&v91, v10, 0, (uint64_t)&v95, &v104, &v101, (uint64_t)&v89);
  unint64_t v39 = v91;
  if (!v91) {
    return v38;
  }
  int v40 = *v91;
  if ((v40 - 4) > 0x1E)
  {
    if ((v40 - 3) >= 0xFFFFFFFE) {
      uint64_t v78 = v91;
    }
    else {
      uint64_t v78 = 0;
    }
    if ((v40 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v43 = (unint64_t)(v78 + 8);
LABEL_187:
      int v44 = &v91;
      goto LABEL_64;
    }
    goto LABEL_218;
  }
  if ((v91[1] & 0x7F) == 2 || *((_DWORD *)v91 + 3))
  {
    uint64_t v61 = *((void *)v91 + 2);
    if ((v61 & 4) != 0)
    {
      unint64_t v43 = v61 & 0xFFFFFFFFFFFFFFF8;
      if (v43) {
        goto LABEL_187;
      }
    }
  }
  return v38;
}

void sub_1CB9C8790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v27 = v29;
  *(_OWORD *)int v29 = xmmword_1CDAF6004;
  *(_OWORD *)&v29[12] = *(long long *)((char *)&xmmword_1CDAF6004 + 12);
  uint64_t v28 = 0x700000007;
  uint64_t v22 = &v24;
  int v24 = 168430090;
  __int16 v25 = 1285;
  char v26 = 4;
  int64x2_t v23 = vdupq_n_s64(7uLL);
  do
  {
    long long v12 = *(unsigned __int8 **)a3;
    uint64_t v20 = v12;
    if (v12) {
      llvm::MetadataTracking::track((uint64_t)&v20, v12, 2);
    }
    int v21 = *(_DWORD *)(a3 + 8);
    unsigned __int8 v13 = *((unsigned char *)v22 + v11);
    *(void *)&long long v19 = a5;
    DWORD2(v19) = 0;
    int v14 = sub_1CD4050A4(a2, (uint64_t)&v20, v13, &v19, (unsigned int *)((char *)v27 + v10));
    sub_1CD800DA0(*(void *)(a1 + 296), a4, v11, (uint64_t)v14, 0);
    sub_1CD808A6C((uint64_t)v14);
    if (v20)
    {
      int v15 = *v20;
      if ((v15 - 4) > 0x1E)
      {
        if ((v15 - 3) >= 0xFFFFFFFE) {
          int v16 = v20;
        }
        else {
          int v16 = 0;
        }
        if ((v15 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v17 = (unint64_t)(v16 + 8);
LABEL_15:
          *(void *)&long long v19 = &v20;
          sub_1CC5FA668(v17 + 16, &v19);
          goto LABEL_8;
        }
        if (v15 == 3) {
          *((void *)v20 + 1) = 0;
        }
      }
      else if ((v20[1] & 0x7F) == 2 || *((_DWORD *)v20 + 3))
      {
        uint64_t v18 = *((void *)v20 + 2);
        if ((v18 & 4) != 0)
        {
          unint64_t v17 = v18 & 0xFFFFFFFFFFFFFFF8;
          if (v17) {
            goto LABEL_15;
          }
        }
      }
    }
LABEL_8:
    ++v11;
    v10 += 4;
  }
  while (v11 < v28);
  if (v22 != &v24) {
    free(v22);
  }
  if (v27 != v29) {
    free(v27);
  }
}

uint64_t *sub_1CB9C89A0(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, unsigned __int16 *a5, _OWORD *a6, unsigned __int16 *a7, _OWORD *a8, unsigned __int16 *a9, _OWORD *a10, unsigned __int16 *a11, _OWORD *a12, unsigned __int16 *a13, _OWORD *a14, unsigned __int16 *a15, _OWORD *a16, unsigned __int16 *a17, _OWORD *a18, unsigned __int16 *a19, _OWORD *a20,unsigned __int16 *a21,_OWORD *a22,unsigned __int16 *a23,_OWORD *a24,unsigned __int16 *a25,_OWORD *a26,unsigned __int16 *a27)
{
  v40[50] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = v40;
  uint64_t v39 = 0x1900000000;
  uint64_t v36 = a3;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a4);
  uint64_t v36 = *a5;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a6);
  uint64_t v36 = *a7;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a8);
  uint64_t v36 = *a9;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a10);
  uint64_t v36 = *a11;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a12);
  uint64_t v36 = *a13;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a14);
  uint64_t v36 = *a15;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a16);
  uint64_t v36 = *a17;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a18);
  uint64_t v36 = *a19;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a20);
  uint64_t v36 = *a21;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a22);
  uint64_t v36 = *a23;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a24);
  uint64_t v36 = *a25;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  sub_1CD3D5F48(a1, (uint64_t)&v38, a26);
  uint64_t v36 = *a27;
  char v37 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v38, (uint64_t)&v36);
  uint64_t v33 = sub_1CD801450(a1, 18, a2, (llvm *)0xAE, 0, (uint64_t *)v38, v39);
  if (v38 != v40) {
    free(v38);
  }
  return v33;
}

uint64_t *sub_1CB9C8D58(uint64_t *a1, int a2, uint64_t *a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *a1;
  sub_1CD3FC878((uint64_t)v62, *(void *)(*a1 + 296), a5, a6, 0, 0, 0);
  sub_1CD3FC878((uint64_t)v59, *(void *)(v14 + 296), a7, a8, 0, 0, 0);
  if (!a3)
  {
    a3 = sub_1CD7EBF14(*(void *)(v14 + 296), 0, (const llvm::APInt *)(a1 + 4), (llvm *)5, 0, 1, 0);
    a4 = v15;
  }
  sub_1CD3FC878((uint64_t)v56, *(void *)(v14 + 296), (uint64_t)a3, a4, 0, 0, 0);
  int v16 = (unsigned __int8 *)a1[2];
  uint64_t v53 = a1[1];
  int v54 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v54, v16, 2);
  }
  int v55 = *((_DWORD *)a1 + 6);
  sub_1CB9D06E0((uint64_t)v62, &v53);
  if (v54)
  {
    int v17 = *v54;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = v54;
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v36 = (unint64_t)(v35 + 8);
LABEL_62:
        unsigned int v66 = &v54;
        sub_1CC5FA668(v36 + 16, &v66);
        goto LABEL_9;
      }
      if (v17 == 3) {
        *((void *)v54 + 1) = 0;
      }
    }
    else if ((v54[1] & 0x7F) == 2 || *((_DWORD *)v54 + 3))
    {
      uint64_t v42 = *((void *)v54 + 2);
      if ((v42 & 4) != 0)
      {
        unint64_t v36 = v42 & 0xFFFFFFFFFFFFFFF8;
        if (v36) {
          goto LABEL_62;
        }
      }
    }
  }
LABEL_9:
  uint64_t v18 = (unsigned __int8 *)a1[2];
  uint64_t v50 = a1[1];
  uint64_t v51 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v51, v18, 2);
  }
  int v52 = *((_DWORD *)a1 + 6);
  sub_1CB9D06E0((uint64_t)v59, &v50);
  if (v51)
  {
    int v19 = *v51;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        char v37 = v51;
      }
      else {
        char v37 = 0;
      }
      if ((v19 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_68:
        unsigned int v66 = &v51;
        sub_1CC5FA668(v38 + 16, &v66);
        goto LABEL_15;
      }
      if (v19 == 3) {
        *((void *)v51 + 1) = 0;
      }
    }
    else if ((v51[1] & 0x7F) == 2 || *((_DWORD *)v51 + 3))
    {
      uint64_t v43 = *((void *)v51 + 2);
      if ((v43 & 4) != 0)
      {
        unint64_t v38 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (v38) {
          goto LABEL_68;
        }
      }
    }
  }
LABEL_15:
  uint64_t v20 = (unsigned __int8 *)a1[2];
  uint64_t v47 = a1[1];
  int v48 = v20;
  if (v20) {
    llvm::MetadataTracking::track((uint64_t)&v48, v20, 2);
  }
  int v49 = *((_DWORD *)a1 + 6);
  sub_1CB9D06E0((uint64_t)v56, &v47);
  if (v48)
  {
    int v21 = *v48;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = v48;
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v21 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = (unint64_t)(v39 + 8);
LABEL_74:
        unsigned int v66 = &v48;
        sub_1CC5FA668(v40 + 16, &v66);
        goto LABEL_21;
      }
      if (v21 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v44 = *((void *)v48 + 2);
      if ((v44 & 4) != 0)
      {
        unint64_t v40 = v44 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_74;
        }
      }
    }
  }
LABEL_21:
  LODWORD(v66) = 5;
  if ((v57 & 0xFFFFFFFC) == 4)
  {
    int v22 = 1;
  }
  else
  {
    if (v58 == 32) {
      int v22 = 5;
    }
    else {
      int v22 = 10;
    }
    if (v58 == 16) {
      int v22 = 2;
    }
  }
  HIDWORD(v66) = v22;
  if ((v63 & 0xFFFFFFFC) == 4)
  {
    int v23 = 1;
  }
  else
  {
    if (v64 == 32) {
      int v24 = 5;
    }
    else {
      int v24 = 10;
    }
    if (v64 == 16) {
      int v23 = 2;
    }
    else {
      int v23 = v24;
    }
  }
  int v67 = v23;
  if ((v60 & 0xFFFFFFFC) == 4)
  {
    int v25 = 1;
  }
  else
  {
    if (v61 == 32) {
      int v26 = 5;
    }
    else {
      int v26 = 10;
    }
    if (v61 == 16) {
      int v25 = 2;
    }
    else {
      int v25 = v26;
    }
  }
  int v68 = v25;
  int v27 = sub_1CB951118(a2, &v66, 4, *(unsigned char **)(v14 + 480));
  uint64_t v28 = *(void *)(v14 + 296);
  int v29 = (unsigned __int8 *)a1[4];
  unsigned int v45 = v29;
  if (v29) {
    llvm::MetadataTracking::track((uint64_t)&v45, v29, 2);
  }
  int v46 = *((_DWORD *)a1 + 10);
  LODWORD(v65) = 32;
  uint64_t v30 = sub_1CD4054D4(v28, v27, (uint64_t)&v45, 0, (uint64_t)v56, (uint64_t)v62, (uint64_t)v59, (int *)&v65);
  if (v45)
  {
    int v31 = *v45;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v33 = v45;
      }
      else {
        uint64_t v33 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v34 = (unint64_t)(v33 + 8);
LABEL_56:
        uint64_t v65 = &v45;
        sub_1CC5FA668(v34 + 16, &v65);
        return v30;
      }
      if (v31 == 3) {
        *((void *)v45 + 1) = 0;
      }
    }
    else if ((v45[1] & 0x7F) == 2 || *((_DWORD *)v45 + 3))
    {
      uint64_t v41 = *((void *)v45 + 2);
      if ((v41 & 4) != 0)
      {
        unint64_t v34 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v34) {
          goto LABEL_56;
        }
      }
    }
  }
  return v30;
}

uint64_t *sub_1CB9C9234(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  sub_1CD3FC878((uint64_t)v40, *(void *)(*a1 + 296), a2, a3, 0, 0, 0);
  sub_1CD3FC878((uint64_t)v38, *(void *)(v8 + 296), a4, a5, 0, 0, 0);
  uint64_t v9 = (unsigned __int8 *)a1[2];
  uint64_t v35 = a1[1];
  unint64_t v36 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v36, v9, 2);
  }
  int v37 = *((_DWORD *)a1 + 6);
  sub_1CB9D06E0((uint64_t)v40, &v35);
  if (v36)
  {
    int v10 = *v36;
    if ((v10 - 4) > 0x1E)
    {
      if ((v10 - 3) >= 0xFFFFFFFE) {
        int v23 = v36;
      }
      else {
        int v23 = 0;
      }
      if ((v10 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v24 = (unint64_t)(v23 + 8);
LABEL_37:
        uint64_t v43 = &v36;
        sub_1CC5FA668(v24 + 16, &v43);
        goto LABEL_7;
      }
      if (v10 == 3) {
        *((void *)v36 + 1) = 0;
      }
    }
    else if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
    {
      uint64_t v28 = *((void *)v36 + 2);
      if ((v28 & 4) != 0)
      {
        unint64_t v24 = v28 & 0xFFFFFFFFFFFFFFF8;
        if (v24) {
          goto LABEL_37;
        }
      }
    }
  }
LABEL_7:
  unint64_t v11 = (unsigned __int8 *)a1[2];
  uint64_t v32 = a1[1];
  uint64_t v33 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v33, v11, 2);
  }
  int v34 = *((_DWORD *)a1 + 6);
  sub_1CB9D06E0((uint64_t)v38, &v32);
  if (v33)
  {
    int v12 = *v33;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        int v25 = v33;
      }
      else {
        int v25 = 0;
      }
      if ((v12 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v26 = (unint64_t)(v25 + 8);
LABEL_43:
        uint64_t v43 = &v33;
        sub_1CC5FA668(v26 + 16, &v43);
        goto LABEL_13;
      }
      if (v12 == 3) {
        *((void *)v33 + 1) = 0;
      }
    }
    else if ((v33[1] & 0x7F) == 2 || *((_DWORD *)v33 + 3))
    {
      uint64_t v29 = *((void *)v33 + 2);
      if ((v29 & 4) != 0)
      {
        unint64_t v26 = v29 & 0xFFFFFFFFFFFFFFF8;
        if (v26) {
          goto LABEL_43;
        }
      }
    }
  }
LABEL_13:
  if (v41 > 3) {
    int v13 = 1;
  }
  else {
    int v13 = 5;
  }
  LODWORD(v43) = 5;
  HIDWORD(v43) = v13;
  if (v39 > 3) {
    int v14 = 1;
  }
  else {
    int v14 = 5;
  }
  int v44 = v14;
  int v15 = sub_1CB951118(45, &v43, 3, *(unsigned char **)(v8 + 480));
  uint64_t v16 = *(void *)(v8 + 296);
  int v17 = (unsigned __int8 *)a1[4];
  uint64_t v30 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v30, v17, 2);
  }
  int v31 = *((_DWORD *)a1 + 10);
  uint64_t v18 = sub_1CD401AB0(v16, v15, (uint64_t)&v30, 5u, 0, (uint64_t)v40, (uint64_t)v38);
  if (v30)
  {
    int v19 = *v30;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        int v21 = v30;
      }
      else {
        int v21 = 0;
      }
      if ((v19 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_31:
        uint64_t v42 = &v30;
        sub_1CC5FA668(v22 + 16, &v42);
        return v18;
      }
      if (v19 == 3) {
        *((void *)v30 + 1) = 0;
      }
    }
    else if ((v30[1] & 0x7F) == 2 || *((_DWORD *)v30 + 3))
    {
      uint64_t v27 = *((void *)v30 + 2);
      if ((v27 & 4) != 0)
      {
        unint64_t v22 = v27 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_31;
        }
      }
    }
  }
  return v18;
}

uint64_t *sub_1CB9C9548(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  unsigned int v69 = a2;
  sub_1CD3FC878((uint64_t)&v67, *(void *)(a1 + 296), a3, a4, 0, 0, 0);
  sub_1CD3FC878((uint64_t)&v65, *(void *)(a1 + 296), a5, a6, 0, 0, 0);
  sub_1CD3FC878((uint64_t)&v63, *(void *)(a1 + 296), a7, a8, 1, 0, 0);
  sub_1CD3FC878((uint64_t)&v61, *(void *)(a1 + 296), a9, a10, 1, 0, 0);
  uint64_t v18 = (unsigned __int8 *)(*(void *)(v67 + 40) + 16 * v68);
  int v19 = *v18;
  if (*v18)
  {
    BOOL v22 = (v19 - 120) >= 0x20 && (v19 - 2) >= 6;
    if (!v22 || (v19 - 15) < 0x3C) {
      goto LABEL_13;
    }
LABEL_12:
    int v23 = operator new(0x20uLL);
    uint64_t v24 = (uint64_t)v23;
    *int v23 = &unk_1F25F0CF8;
    int v25 = sub_1CB9C7114;
    goto LABEL_14;
  }
  uint64_t v20 = *((void *)v18 + 1);
  if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12) {
    int v21 = *(unsigned __int8 *)(**(void **)(v20 + 16) + 8);
  }
  else {
    int v21 = *(_DWORD *)(v20 + 8);
  }
  if (v21 != 13) {
    goto LABEL_12;
  }
LABEL_13:
  int v23 = operator new(0x20uLL);
  uint64_t v24 = (uint64_t)v23;
  *int v23 = &unk_1F25F0CF8;
  int v25 = sub_1CB9C7AD4;
LABEL_14:
  v23[1] = v25;
  v23[2] = 0;
  v23[3] = a1;
  uint64_t v74 = v23;
  sub_1CB9C633C((uint64_t)&v67, v24);
  if (v74 == v73)
  {
    (*(void (**)(void *))(v73[0] + 32))(v73);
  }
  else if (v74)
  {
    (*(void (**)(void *))(*v74 + 40))(v74);
  }
  unint64_t v26 = (unsigned __int8 *)(*(void *)(v65 + 40) + 16 * v66);
  int v27 = *v26;
  if (*v26)
  {
    BOOL v30 = (v27 - 120) >= 0x20 && (v27 - 2) >= 6;
    if (!v30 || (v27 - 15) < 0x3C) {
      goto LABEL_30;
    }
LABEL_29:
    int v31 = operator new(0x20uLL);
    uint64_t v32 = (uint64_t)v31;
    void *v31 = &unk_1F25F0CF8;
    uint64_t v33 = sub_1CB9C7114;
    goto LABEL_31;
  }
  uint64_t v28 = *((void *)v26 + 1);
  if ((*(_DWORD *)(v28 + 8) & 0xFE) == 0x12) {
    int v29 = *(unsigned __int8 *)(**(void **)(v28 + 16) + 8);
  }
  else {
    int v29 = *(_DWORD *)(v28 + 8);
  }
  if (v29 != 13) {
    goto LABEL_29;
  }
LABEL_30:
  int v31 = operator new(0x20uLL);
  uint64_t v32 = (uint64_t)v31;
  void *v31 = &unk_1F25F0CF8;
  uint64_t v33 = sub_1CB9C7AD4;
LABEL_31:
  v31[1] = v33;
  v31[2] = 0;
  v31[3] = a1;
  uint64_t v72 = v31;
  sub_1CB9C633C((uint64_t)&v65, v32);
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
  }
  else if (v72)
  {
    (*(void (**)(void *))(*v72 + 40))(v72);
  }
  int v34 = (unsigned __int8 *)(*(void *)(v63 + 40) + 16 * v64);
  int v35 = *v34;
  if (!*v34)
  {
    uint64_t v36 = *((void *)v34 + 1);
    if ((*(_DWORD *)(v36 + 8) & 0xFE) == 0x12) {
      int v37 = *(unsigned __int8 *)(**(void **)(v36 + 16) + 8);
    }
    else {
      int v37 = *(_DWORD *)(v36 + 8);
    }
    unint64_t v38 = sub_1CB9C7AD4;
    if (v37 == 13) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  int v39 = sub_1CB9C7AD4;
  if ((v35 - 120) >= 0x20 && (v35 - 2) >= 6 && (v35 - 15) >= 0x3C)
  {
LABEL_43:
    unint64_t v38 = sub_1CB9C7114;
LABEL_44:
    int v39 = v38;
  }
  uint64_t v40 = a8;
  int v41 = operator new(0x20uLL);
  *int v41 = &unk_1F25F0CF8;
  v41[1] = v39;
  void v41[2] = 0;
  v41[3] = a1;
  sub_1CB9C633C((uint64_t)&v63, (uint64_t)v41);
  (*(void (**)(void *))(*v41 + 40))(v41);
  uint64_t v42 = (unsigned __int8 *)(*(void *)(v61 + 40) + 16 * v62);
  int v43 = *v42;
  if (!*v42)
  {
    uint64_t v44 = *((void *)v42 + 1);
    if ((*(_DWORD *)(v44 + 8) & 0xFE) == 0x12) {
      int v45 = *(unsigned __int8 *)(**(void **)(v44 + 16) + 8);
    }
    else {
      int v45 = *(_DWORD *)(v44 + 8);
    }
    int v46 = sub_1CB9C7AD4;
    if (v45 == 13) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t v47 = sub_1CB9C7AD4;
  if ((v43 - 120) >= 0x20 && (v43 - 2) >= 6 && (v43 - 15) >= 0x3C)
  {
LABEL_53:
    int v46 = sub_1CB9C7114;
LABEL_54:
    uint64_t v47 = v46;
  }
  int v48 = operator new(0x20uLL);
  void *v48 = &unk_1F25F0CF8;
  v48[1] = v47;
  v48[2] = 0;
  v48[3] = a1;
  sub_1CB9C633C((uint64_t)&v61, (uint64_t)v48);
  (*(void (**)(void *))(*v48 + 40))(v48);
  unsigned __int8 v49 = *(unsigned char *)(*(void *)(a7 + 40) + 16 * v40);
  int v50 = sub_1CD405674(a12, (uint64_t)&v67, (uint64_t)&v65, (uint64_t)&v63, (uint64_t)&v61, *(void *)(*(void *)(a1 + 296) + 40));
  uint64_t v51 = *(void *)(a1 + 296);
  int v52 = *(unsigned __int8 **)a13;
  uint64_t v59 = v52;
  if (v52) {
    llvm::MetadataTracking::track((uint64_t)&v59, v52, 2);
  }
  int v60 = *(_DWORD *)(a13 + 8);
  uint64_t v53 = sub_1CD402034(v51, v50, (uint64_t)&v59, v49, 0, &v69, (uint64_t)&v67, (uint64_t)&v65, (uint64_t)&v63, (uint64_t)&v61);
  if (v59)
  {
    int v54 = *v59;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        int v56 = v59;
      }
      else {
        int v56 = 0;
      }
      if ((v54 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v57 = (unint64_t)(v56 + 8);
LABEL_67:
        int v70 = &v59;
        sub_1CC5FA668(v57 + 16, &v70);
        return v53;
      }
      if (v54 == 3) {
        *((void *)v59 + 1) = 0;
      }
    }
    else if ((v59[1] & 0x7F) == 2 || *((_DWORD *)v59 + 3))
    {
      uint64_t v58 = *((void *)v59 + 2);
      if ((v58 & 4) != 0)
      {
        unint64_t v57 = v58 & 0xFFFFFFFFFFFFFFF8;
        if (v57) {
          goto LABEL_67;
        }
      }
    }
  }
  return v53;
}

uint64_t sub_1CB9C9C24(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4 = *(unsigned __int16 *)(a2 + 24);
  switch(v4)
  {
    case 11:
LABEL_4:
      uint64_t v5 = *(void *)(a2 + 80);
      int v6 = (void *)(v5 + 24);
      if (*(_DWORD *)(v5 + 32) >= 0x41u) {
        int v6 = (void *)*v6;
      }
      int v7 = *(_DWORD *)v6;
LABEL_7:
      *a4 = v7;
      return 1;
    case 199:
      uint64_t v9 = **(void **)(a2 + 32);
      if (v9) {
        BOOL v10 = (*(_WORD *)(v9 + 24) & 0xFFFE) == 61462;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        uint64_t v11 = *(void *)(*(void *)(*(void *)(v9 + 32) + 40) + 80);
        int v12 = (unsigned __int16 *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u) {
          int v12 = *(unsigned __int16 **)v12;
        }
        int v7 = *v12;
        goto LABEL_7;
      }
      break;
    case 35:
      goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1CB9C9CB8()
{
  return 1;
}

uint64_t sub_1CB9C9CC0(uint64_t a1, uint64_t a2, int a3, int *a4, __n128 a5)
{
  int v7 = *(unsigned __int8 **)(a2 + 64);
  unint64_t v218 = v7;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)&v218, v7, 2);
  }
  int v219 = *(_DWORD *)(a2 + 60);
  *(void *)&long long v217 = 0;
  DWORD2(v217) = 0;
  uint64_t v8 = *(void *)(a2 + 40);
  int v206 = *(llvm **)v8;
  uint64_t v204 = *(void *)(v8 + 8);
  int v203 = *(unsigned __int8 *)(*(void *)(a1 + 2184) + 318);
  *(_DWORD *)(a1 + 1096) = 0;
  LODWORD(v9) = **(_DWORD **)(a1 + 800);
  LODWORD(v10) = **(_DWORD **)(a1 + 944);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  if (*((_DWORD *)v11 + 5) == 1)
  {
    uint64_t v13 = *v11;
    unint64_t v12 = v11[1];
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v12 = 0;
  }
  uint64_t v202 = a2;
  unsigned int v14 = *(_DWORD *)(a1 + 16);
  if (v14 < 2)
  {
    int v17 = 0;
    if (v13)
    {
LABEL_33:
      *(void *)&long long v220 = v13;
      *((void *)&v220 + 1) = v12;
      int v221 = v9;
      int v222 = v10;
      int v223 = v17;
      unsigned int v224 = v14 - 1;
      a5 = sub_1CB8BBE7C((unint64_t *)(a1 + 1088), (unint64_t)&v220);
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    int v18 = 1;
    uint64_t v19 = **(unsigned int **)(a1 + 800);
    uint64_t v20 = **(unsigned int **)(a1 + 944);
    uint64_t v21 = v13;
    do
    {
      uint64_t v22 = *(void *)(a1 + 8) + v15;
      if (*(_DWORD *)(v22 + 44) == 1)
      {
        uint64_t v13 = *(void *)(v22 + 24);
        uint64_t v23 = *(unsigned int *)(v22 + 32);
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 800) + 4 * v16 + 4);
      uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 944) + 4 * v16 + 4);
      if (a3 && !v13)
      {
        uint64_t v23 = v12;
        if (!*(_DWORD *)(a1 + 1096)) {
          int v17 = 0;
        }
        uint64_t v13 = v21;
        uint64_t v9 = v19;
        uint64_t v10 = v20;
      }
      if (v9 == v19 && v10 == v20 && v13 == v21 && v23 == v12)
      {
        uint64_t v13 = v21;
        LODWORD(v10) = v20;
        LODWORD(v9) = v19;
      }
      else
      {
        if (v21)
        {
          *(void *)&long long v220 = v21;
          *((void *)&v220 + 1) = v12;
          int v221 = v19;
          int v222 = v20;
          int v223 = v17;
          unsigned int v224 = v16;
          a5 = sub_1CB8BBE7C((unint64_t *)(a1 + 1088), (unint64_t)&v220);
          unsigned int v14 = *(_DWORD *)(a1 + 16);
          int v17 = v18;
        }
        else
        {
          int v17 = v16 + 1;
        }
        unint64_t v12 = v23 | v12 & 0xFFFFFFFF00000000;
        uint64_t v19 = v9;
        uint64_t v20 = v10;
        uint64_t v21 = v13;
      }
      ++v18;
      unint64_t v27 = v16 + 2;
      ++v16;
      v15 += 24;
    }
    while (v27 < v14);
    if (v13) {
      goto LABEL_33;
    }
  }
  if (!*(_DWORD *)(a1 + 1096)) {
    goto LABEL_250;
  }
  int v28 = *(_DWORD *)(a1 + 1624);
  if (v28 || *(_DWORD *)(a1 + 1628))
  {
    unsigned int v29 = *(_DWORD *)(a1 + 1632);
    uint64_t v30 = *(void *)(a1 + 1616);
    uint64_t v31 = v30 + 56 * v29;
    if (v29 <= 4 * v28 || v29 < 0x41)
    {
      if (v29)
      {
        do
        {
          *(void *)uint64_t v30 = 0;
          *(_DWORD *)(v30 + 8) = -1;
          *(_DWORD *)(v30 + 16) = -1;
          v30 += 56;
        }
        while (v30 != v31);
      }
      *(void *)(a1 + 1624) = 0;
    }
    else if (v28)
    {
      int v32 = 1 << (33 - __clz(v28 - 1));
      if (v32 <= 64) {
        int v33 = 64;
      }
      else {
        int v33 = v32;
      }
      if (v33 == v29)
      {
        *(void *)(a1 + 1624) = 0;
        do
        {
          *(_OWORD *)uint64_t v30 = xmmword_1CD923640;
          *(_DWORD *)(v30 + 16) = -1;
          v30 += 56;
        }
        while (v30 != v31);
      }
      else
      {
        MEMORY[0x1D25D9CD0](a5);
        unint64_t v34 = (4 * v33 / 3u + 1) | ((unint64_t)(4 * v33 / 3u + 1) >> 1);
        unint64_t v35 = v34 | (v34 >> 2) | ((v34 | (v34 >> 2)) >> 4);
        LODWORD(v35) = (((v35 | (v35 >> 8)) >> 16) | v35 | (v35 >> 8)) + 1;
        *(_DWORD *)(a1 + 1632) = v35;
        uint64_t v36 = (char *)operator new(56 * v35, (std::align_val_t)8uLL);
        *(void *)(a1 + 1616) = v36;
        *(void *)(a1 + 1624) = 0;
        int v37 = *(_DWORD *)(a1 + 1632);
        if (v37)
        {
          unint64_t v38 = &v36[56 * v37];
          do
          {
            *(_OWORD *)uint64_t v36 = xmmword_1CD923640;
            *((_DWORD *)v36 + 4) = -1;
            v36 += 56;
          }
          while (v36 != v38);
        }
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0](a5);
      *(void *)(a1 + 1616) = 0;
      *(void *)(a1 + 1624) = 0;
      *(_DWORD *)(a1 + 1632) = 0;
    }
  }
  uint64_t v39 = *(unsigned int *)(a1 + 1096);
  if (v39)
  {
    uint64_t v40 = *(long long **)(a1 + 1088);
    int v41 = &v40[2 * v39];
    while (1)
    {
      int v42 = *((_DWORD *)v40 + 4) + ((*((_DWORD *)v40 + 5) == 0) << 6);
      long long v220 = *v40;
      int v221 = v42;
      uint64_t v225 = 0;
      int v43 = sub_1CB8BBF18(*(void *)(a1 + 1616), *(_DWORD *)(a1 + 1632), (uint64_t)&v220, &v225);
      uint64_t v44 = v225;
      if (!v43) {
        break;
      }
      int v45 = *(_DWORD *)(v225 + 48);
      unsigned int v46 = *(_DWORD *)(v225 + 52);
LABEL_70:
      uint64_t v51 = *(void *)v40;
      *(_DWORD *)(v44 + 32) = *((_DWORD *)v40 + 2);
      *(void *)(v44 + 24) = v51;
      *(void *)(v44 + 40) = *((void *)v40 + 2);
      *(_DWORD *)(v44 + 48) = v45 + 1;
      unsigned int v52 = *((_DWORD *)v40 + 6);
      if (v52 >= v46) {
        unsigned int v52 = v46;
      }
      *(_DWORD *)(v44 + 52) = v52;
      v40 += 2;
      if (v40 == v41) {
        goto LABEL_103;
      }
    }
    *(void *)unint64_t v226 = v225;
    int v47 = *(_DWORD *)(a1 + 1624);
    uint64_t v48 = *(unsigned int *)(a1 + 1632);
    if (4 * v47 + 4 >= (3 * v48))
    {
      int v49 = 2 * v48;
    }
    else
    {
      int v49 = *(_DWORD *)(a1 + 1632);
      if ((int)v48 + ~v47 - *(_DWORD *)(a1 + 1628) > v48 >> 3)
      {
LABEL_62:
        *(_DWORD *)(a1 + 1624) = v47 + 1;
        if (*(void *)v44) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = *(_DWORD *)(v44 + 8) == -1;
        }
        if (!v50 || *(_DWORD *)(v44 + 16) != -1) {
          --*(_DWORD *)(a1 + 1628);
        }
        int v45 = 0;
        *(void *)uint64_t v44 = v220;
        *(_DWORD *)(v44 + 8) = DWORD2(v220);
        *(_DWORD *)(v44 + 16) = v42;
        *(void *)(v44 + 24) = 0;
        *(_DWORD *)(v44 + 32) = 0;
        *(_OWORD *)(v44 + 40) = xmmword_1CD923650;
        unsigned int v46 = -1;
        goto LABEL_70;
      }
    }
    uint64_t v53 = *(void *)(a1 + 1616);
    unint64_t v54 = (v49 - 1) | ((unint64_t)(v49 - 1) >> 1);
    unint64_t v55 = v54 | (v54 >> 2) | ((v54 | (v54 >> 2)) >> 4);
    int v56 = ((v55 | (v55 >> 8)) >> 16) | v55 | (v55 >> 8);
    if ((v56 + 1) > 0x40) {
      unsigned int v57 = v56 + 1;
    }
    else {
      unsigned int v57 = 64;
    }
    *(_DWORD *)(a1 + 1632) = v57;
    uint64_t v58 = (char *)operator new(56 * v57, (std::align_val_t)8uLL);
    *(void *)(a1 + 1616) = v58;
    if (v53)
    {
      *(void *)(a1 + 1624) = 0;
      int v59 = *(_DWORD *)(a1 + 1632);
      __n128 v60 = (__n128)xmmword_1CD923640;
      if (v59)
      {
        uint64_t v61 = &v58[56 * v59];
        do
        {
          *(_OWORD *)uint64_t v58 = xmmword_1CD923640;
          *((_DWORD *)v58 + 4) = -1;
          v58 += 56;
        }
        while (v58 != v61);
      }
      if (v48)
      {
        uint64_t v62 = 56 * v48;
        uint64_t v63 = v53;
        while (1)
        {
          int v64 = *(_DWORD *)(v63 + 8);
          if (*(void *)v63 || v64 != -1) {
            break;
          }
          if (*(_DWORD *)(v63 + 16) != -1) {
            goto LABEL_96;
          }
LABEL_97:
          v63 += 56;
          v62 -= 56;
          if (!v62) {
            goto LABEL_98;
          }
        }
        if (*(void *)v63) {
          BOOL v66 = 0;
        }
        else {
          BOOL v66 = v64 == -2;
        }
        if (v66 && *(_DWORD *)(v63 + 16) == -2) {
          goto LABEL_97;
        }
LABEL_96:
        *(void *)&long long v214 = 0;
        sub_1CB8BBF18(*(void *)(a1 + 1616), *(_DWORD *)(a1 + 1632), v63, &v214);
        uint64_t v67 = v214;
        uint64_t v68 = *(void *)v63;
        *(_DWORD *)(v214 + 8) = *(_DWORD *)(v63 + 8);
        *(void *)uint64_t v67 = v68;
        *(_DWORD *)(v67 + 16) = *(_DWORD *)(v63 + 16);
        __n128 v60 = *(__n128 *)(v63 + 40);
        *(_OWORD *)(v67 + 24) = *(_OWORD *)(v63 + 24);
        *(__n128 *)(v67 + 40) = v60;
        ++*(_DWORD *)(a1 + 1624);
        goto LABEL_97;
      }
LABEL_98:
      MEMORY[0x1D25D9CD0](v53, 8, v60);
      uint64_t v58 = *(char **)(a1 + 1616);
      unsigned int v69 = *(_DWORD *)(a1 + 1632);
    }
    else
    {
      *(void *)(a1 + 1624) = 0;
      unsigned int v69 = *(_DWORD *)(a1 + 1632);
      if (v69)
      {
        int v70 = v58;
        do
        {
          *(_OWORD *)int v70 = xmmword_1CD923640;
          *((_DWORD *)v70 + 4) = -1;
          v70 += 56;
        }
        while (v70 != &v58[56 * v69]);
      }
    }
    sub_1CB8BBF18((uint64_t)v58, v69, (uint64_t)&v220, v226);
    int v47 = *(_DWORD *)(a1 + 1624);
    uint64_t v44 = *(void *)v226;
    goto LABEL_62;
  }
LABEL_103:
  *(_DWORD *)(a1 + 1648) = 0;
  uint64_t v71 = *(void *)(a1 + 1616);
  uint64_t v72 = *(unsigned int *)(a1 + 1632);
  uint64_t v73 = v71 + 56 * v72;
  if (*(_DWORD *)(a1 + 1624))
  {
    if (v72)
    {
      uint64_t v74 = 56 * v72;
      uint64_t v75 = *(void *)(a1 + 1616);
      while (1)
      {
        int v76 = *(_DWORD *)(v75 + 8);
        if (*(void *)v75) {
          BOOL v77 = 0;
        }
        else {
          BOOL v77 = v76 == -1;
        }
        if (v77)
        {
          if (*(_DWORD *)(v75 + 16) != -1) {
            goto LABEL_121;
          }
        }
        else
        {
          if (*(void *)v75) {
            BOOL v78 = 0;
          }
          else {
            BOOL v78 = v76 == -2;
          }
          if (!v78 || *(_DWORD *)(v75 + 16) != -2) {
            goto LABEL_121;
          }
        }
        v75 += 56;
        v74 -= 56;
        if (!v74) {
          goto LABEL_119;
        }
      }
    }
    uint64_t v75 = *(void *)(a1 + 1616);
  }
  else
  {
LABEL_119:
    uint64_t v75 = v71 + 56 * v72;
  }
LABEL_121:
  unint64_t v79 = (long long **)(a1 + 1640);
  uint64_t v80 = v71 + 56 * v72;
  if (v75 == v80)
  {
    int v93 = *v79;
    unint64_t v92 = (unint64_t)*v79;
  }
  else
  {
    LODWORD(v81) = 0;
    do
    {
      unint64_t v82 = (_OWORD *)(v75 + 24);
      unint64_t v83 = *(void *)(a1 + 1640);
      if (v81 >= *(_DWORD *)(a1 + 1652))
      {
        unint64_t v90 = v83 + 32 * v81;
        if (v83 > (unint64_t)v82 || v90 <= (unint64_t)v82) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v84 = (_OWORD *)(v83 + 32 * *(unsigned int *)(a1 + 1648));
      long long v85 = *(_OWORD *)(v75 + 40);
      *uint64_t v84 = *v82;
      v84[1] = v85;
      unint64_t v81 = (*(_DWORD *)(a1 + 1648) + 1);
      *(_DWORD *)(a1 + 1648) = v81;
      uint64_t v86 = v75 + 56;
      uint64_t v75 = v73;
      if (v86 != v73)
      {
        uint64_t v75 = v86;
        do
        {
          int v87 = *(_DWORD *)(v75 + 8);
          if (*(void *)v75) {
            BOOL v88 = 0;
          }
          else {
            BOOL v88 = v87 == -1;
          }
          if (v88)
          {
            if (*(_DWORD *)(v75 + 16) != -1) {
              goto LABEL_140;
            }
          }
          else
          {
            if (*(void *)v75) {
              BOOL v89 = 0;
            }
            else {
              BOOL v89 = v87 == -2;
            }
            if (!v89 || *(_DWORD *)(v75 + 16) != -2) {
              goto LABEL_140;
            }
          }
          v75 += 56;
        }
        while (v75 != v73);
        uint64_t v75 = v73;
      }
LABEL_140:
      ;
    }
    while (v75 != v80);
    unint64_t v92 = (unint64_t)*v79;
    int v93 = &(*v79)[2 * v81];
    if (v81)
    {
      uint64_t v94 = 126 - 2 * __clz(v81);
      uint64_t v95 = a4;
      goto LABEL_152;
    }
  }
  uint64_t v95 = a4;
  uint64_t v94 = 0;
LABEL_152:
  sub_1CB9CAD94(v92, v93, v94, 1);
  if (v95) {
    *uint64_t v95 = 0;
  }
  if (v206 == 5)
  {
    uint64_t v215 = v218;
    if (v218) {
      llvm::MetadataTracking::track((uint64_t)&v215, v218, 2);
    }
    int v216 = v219;
    int v183 = sub_1CD40047C(a1, v206, v204, (uint64_t)&v215, (uint64_t)&v217, v95, v203 == 0);
    char v184 = v183;
    if (!v215)
    {
      if (v183) {
        goto LABEL_252;
      }
      goto LABEL_155;
    }
    int v185 = *v215;
    if ((v185 - 4) > 0x1E)
    {
      if ((v185 - 3) >= 0xFFFFFFFE) {
        uint64_t v197 = v215;
      }
      else {
        uint64_t v197 = 0;
      }
      if ((v185 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v198 = (unint64_t)(v197 + 8);
LABEL_299:
        *(void *)&long long v220 = &v215;
        sub_1CC5FA668(v198 + 16, &v220);
        goto LABEL_272;
      }
      if (v185 == 3) {
        *((void *)v215 + 1) = 0;
      }
    }
    else if ((v215[1] & 0x7F) == 2 || *((_DWORD *)v215 + 3))
    {
      uint64_t v201 = *((void *)v215 + 2);
      if ((v201 & 4) != 0)
      {
        unint64_t v198 = v201 & 0xFFFFFFFFFFFFFFF8;
        if (v198) {
          goto LABEL_299;
        }
      }
    }
LABEL_272:
    if (v184) {
      goto LABEL_252;
    }
  }
LABEL_155:
  uint64_t v96 = *(unsigned int *)(a1 + 1096);
  if (!v96) {
    goto LABEL_251;
  }
  unsigned __int32 v97 = 0;
  int v98 = *(uint64_t **)(a1 + 1088);
  int v99 = &v98[4 * v96];
  if (v203) {
    int v100 = 1;
  }
  else {
    int v100 = 4;
  }
  int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
  v102.i64[0] = 0x100000001;
  v102.i64[1] = 0x100000001;
  v103.i64[0] = 0x400000004;
  v103.i64[1] = 0x400000004;
  do
  {
    long long v104 = v99;
    int v106 = (unsigned int *)(v99 - 2);
    unsigned int v105 = *((_DWORD *)v99 - 4);
    v99 -= 4;
    unsigned int v107 = v106[3];
    int v108 = v107 + 1;
    if ((void)v217) {
      BOOL v109 = 0;
    }
    else {
      BOOL v109 = v105 == 0;
    }
    if (v109 && *(_DWORD *)(a1 + 16) == v108)
    {
      uint64_t v110 = *v99;
      DWORD2(v217) = *((_DWORD *)v99 + 2);
      *(void *)&long long v217 = v110;
      int v111 = *((_DWORD *)v104 - 2);
      if (v111)
      {
        unsigned int v112 = (v111 + 3) & 0xFFFFFFFC;
        uint32x4_t v113 = (uint32x4_t)vdupq_n_s32(v111 - 1);
        int8x16_t v114 = (int8x16_t)v97;
        int32x4_t v115 = v101;
        do
        {
          uint32x4_t v116 = (uint32x4_t)v115;
          int8x16_t v117 = v114;
          int8x16_t v114 = vorrq_s8((int8x16_t)vshlq_u32(v102, (uint32x4_t)v115), v114);
          int32x4_t v115 = vaddq_s32(v115, v103);
          v112 -= 4;
        }
        while (v112);
        int8x16_t v118 = vbslq_s8((int8x16_t)vcgtq_u32(v116, v113), v117, v114);
        *(int8x8_t *)v118.i8 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
        unsigned __int32 v97 = v118.i32[0] | v118.i32[1];
      }
      continue;
    }
    if (*((_DWORD *)v104 - 3))
    {
      unsigned int v138 = *((_DWORD *)v104 - 2);
      unsigned int v139 = v138 - v105;
      if (v138 > v105)
      {
        int v140 = 0;
        uint32x4_t v141 = (uint32x4_t)vdupq_n_s32(v139 - 1);
        int8x16_t v142 = (int8x16_t)v97;
        int32x4_t v143 = vaddq_s32(vdupq_n_s32(v105), v101);
        do
        {
          int8x16_t v144 = v142;
          int8x16_t v142 = vorrq_s8((int8x16_t)vshlq_u32(v102, (uint32x4_t)v143), v142);
          v140 += 4;
          int32x4_t v143 = vaddq_s32(v143, v103);
        }
        while (((v139 + 3) & 0xFFFFFFFC) != v140);
        int8x16_t v145 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v140 - 4), (int8x16_t)v101), v141), v144, v142);
        int8x8_t v146 = vorr_s8(*(int8x8_t *)v145.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL));
        unsigned __int32 v97 = v146.i32[0] | v146.i32[1];
      }
      int v147 = v108 - v105;
      if (v138 <= v107)
      {
        int v148 = 0;
        if (v138 + 1 > v108) {
          int v108 = v138 + 1;
        }
        unsigned int v149 = v108 - v138;
        unsigned int v150 = (v108 - v138 + 3) & 0xFFFFFFFC;
        uint32x4_t v151 = (uint32x4_t)vdupq_n_s32(v149 - 1);
        v152.i64[1] = -1;
        v152.i64[0] = v97 | 0xFFFFFFFF00000000;
        int32x4_t v153 = vaddq_s32(vdupq_n_s32(v138), v101);
        do
        {
          int8x16_t v154 = v152;
          int8x16_t v152 = vbicq_s8(v152, (int8x16_t)vshlq_u32(v102, (uint32x4_t)v153));
          v148 += 4;
          int32x4_t v153 = vaddq_s32(v153, v103);
        }
        while (v150 != v148);
        int8x16_t v155 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v148 - 4), (int8x16_t)v101), v151), v154, v152);
        int8x8_t v156 = vand_s8(*(int8x8_t *)v155.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v155, v155, 8uLL));
        unsigned __int32 v97 = v156.i32[0] & v156.i32[1];
      }
      int v108 = v147;
    }
    else
    {
      unsigned int v119 = *((_DWORD *)v104 - 2);
      if (v119)
      {
        unsigned int v120 = (v119 + 3) & 0xFFFFFFFC;
        uint32x4_t v121 = (uint32x4_t)vdupq_n_s32(v119 - 1);
        int8x16_t v122 = (int8x16_t)v97;
        int32x4_t v123 = v101;
        do
        {
          uint32x4_t v124 = (uint32x4_t)v123;
          int8x16_t v125 = v122;
          int8x16_t v122 = vorrq_s8((int8x16_t)vshlq_u32(v102, (uint32x4_t)v123), v122);
          int32x4_t v123 = vaddq_s32(v123, v103);
          v120 -= 4;
        }
        while (v120);
        int8x16_t v126 = vbslq_s8((int8x16_t)vcgtq_u32(v124, v121), v125, v122);
        int8x8_t v127 = vorr_s8(*(int8x8_t *)v126.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
        unsigned __int32 v97 = v127.i32[0] | v127.i32[1];
      }
      if (v119 <= v107)
      {
        int v128 = 0;
        if (v119 + 1 > v108) {
          int v129 = v119 + 1;
        }
        else {
          int v129 = v108;
        }
        unsigned int v130 = v129 - v119;
        unsigned int v131 = (v129 - v119 + 3) & 0xFFFFFFFC;
        uint32x4_t v132 = (uint32x4_t)vdupq_n_s32(v130 - 1);
        v133.i64[1] = -1;
        v133.i64[0] = v97 | 0xFFFFFFFF00000000;
        int32x4_t v134 = vaddq_s32(vdupq_n_s32(v119), v101);
        do
        {
          int8x16_t v135 = v133;
          int8x16_t v133 = vbicq_s8(v133, (int8x16_t)vshlq_u32(v102, (uint32x4_t)v134));
          v128 += 4;
          int32x4_t v134 = vaddq_s32(v134, v103);
        }
        while (v131 != v128);
        int8x16_t v136 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v128 - 4), (int8x16_t)v101), v132), v135, v133);
        int8x8_t v137 = vand_s8(*(int8x8_t *)v136.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL));
        unsigned __int32 v97 = v137.i32[0] & v137.i32[1];
      }
    }
    int v157 = v108 & ~(v108 >> 31);
    if (*(_DWORD *)(a1 + 16) < v157) {
      int v157 = *(_DWORD *)(a1 + 16);
    }
    LODWORD(v225) = v157;
    long long v220 = *(_OWORD *)v99;
    *(void *)&long long v214 = sub_1CD7EBF14(*(void *)(a1 + 2168), 0, (const llvm::APInt *)&v218, (llvm *)5, 0, 1, 0);
    *((void *)&v214 + 1) = v158;
    if (*((_DWORD *)v104 - 3)) {
      int v159 = 67;
    }
    else {
      int v159 = 71;
    }
    if ((void)v217)
    {
      if (v206 == 5)
      {
        if (*(_WORD *)(v220 + 24) == 199)
        {
          uint64_t v163 = *(void *)(v220 + 32);
          int v164 = *(_DWORD *)(v163 + 8);
          *(void *)&long long v220 = *(void *)v163;
          DWORD2(v220) = v164;
          int v165 = 251;
        }
        else
        {
          int v165 = 242;
        }
      }
      else
      {
        int v165 = 381;
      }
      int v172 = sub_1CB952700(v159, v165, *(unsigned char **)(a1 + 2184));
      sub_1CB9C7AD4(*(void *)(a1 + 2176), (uint64_t *)v220, *((uint64_t *)&v220 + 1), (uint64_t)&v220, (uint64_t)&v214);
      uint64_t v173 = *(void *)(a1 + 2168);
      uint64_t v210 = v218;
      if (v218) {
        llvm::MetadataTracking::track((uint64_t)&v210, v218, 2);
      }
      int v211 = v219;
      v226[0] = 0;
      *(void *)&long long v217 = sub_1CD4007D8(v173, v172, (uint64_t)&v210, v206, v204, 0, &v217, v226, &v220, &v214, v106, (int *)&v225);
      DWORD2(v217) = 0;
      uint64_t v168 = v210;
      uint64_t v95 = a4;
      int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
      v102.i64[0] = 0x100000001;
      v102.i64[1] = 0x100000001;
      v103.i64[0] = 0x400000004;
      v103.i64[1] = 0x400000004;
      if (!v210)
      {
LABEL_244:
        if (!v95) {
          continue;
        }
LABEL_245:
        *v95 += v100;
        continue;
      }
      int v169 = *v210;
      if ((v169 - 4) > 0x1E)
      {
        if ((v169 - 3) >= 0xFFFFFFFE) {
          uint64_t v177 = v210;
        }
        else {
          uint64_t v177 = 0;
        }
        if ((v169 - 3) < 0xFFFFFFFE) {
          goto LABEL_243;
        }
        unint64_t v171 = (unint64_t)(v177 + 8);
      }
      else
      {
        if ((v210[1] & 0x7F) != 2 && !*((_DWORD *)v210 + 3)) {
          goto LABEL_244;
        }
        uint64_t v174 = *((void *)v210 + 2);
        if ((v174 & 4) == 0) {
          goto LABEL_244;
        }
        unint64_t v171 = v174 & 0xFFFFFFFFFFFFFFF8;
        if (!v171) {
          goto LABEL_244;
        }
      }
      uint64_t v176 = &v210;
LABEL_241:
      *(void *)unint64_t v226 = v176;
      sub_1CC5FA668(v171 + 16, v226);
      int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
      v102.i64[0] = 0x100000001;
      v102.i64[1] = 0x100000001;
      v103.i64[0] = 0x400000004;
      v103.i64[1] = 0x400000004;
      if (v95) {
        goto LABEL_245;
      }
      continue;
    }
    if (v206 == 5)
    {
      if (*(_WORD *)(v220 + 24) == 199)
      {
        uint64_t v160 = *(void *)(v220 + 32);
        int v161 = *(_DWORD *)(v160 + 8);
        *(void *)&long long v220 = *(void *)v160;
        DWORD2(v220) = v161;
        int v162 = 226;
      }
      else
      {
        int v162 = 221;
      }
    }
    else
    {
      int v162 = 324;
    }
    int v166 = sub_1CB952700(v159, v162, *(unsigned char **)(a1 + 2184));
    sub_1CB9C7AD4(*(void *)(a1 + 2176), (uint64_t *)v220, *((uint64_t *)&v220 + 1), (uint64_t)&v220, (uint64_t)&v214);
    uint64_t v167 = *(void *)(a1 + 2168);
    uint64_t v212 = v218;
    if (v218) {
      llvm::MetadataTracking::track((uint64_t)&v212, v218, 2);
    }
    int v213 = v219;
    v226[0] = 0;
    *(void *)&long long v217 = sub_1CD4006EC(v167, v166, (uint64_t)&v212, v206, v204, 0, (int *)v226, &v220, &v214, v106, (int *)&v225);
    DWORD2(v217) = 0;
    uint64_t v168 = v212;
    uint64_t v95 = a4;
    int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
    v102.i64[0] = 0x100000001;
    v102.i64[1] = 0x100000001;
    v103.i64[0] = 0x400000004;
    v103.i64[1] = 0x400000004;
    if (!v212) {
      goto LABEL_244;
    }
    int v169 = *v212;
    if ((v169 - 4) <= 0x1E)
    {
      if ((v212[1] & 0x7F) != 2 && !*((_DWORD *)v212 + 3)) {
        goto LABEL_244;
      }
      uint64_t v170 = *((void *)v212 + 2);
      if ((v170 & 4) == 0) {
        goto LABEL_244;
      }
      unint64_t v171 = v170 & 0xFFFFFFFFFFFFFFF8;
      if (!v171) {
        goto LABEL_244;
      }
      goto LABEL_234;
    }
    if ((v169 - 3) >= 0xFFFFFFFE) {
      uint64_t v175 = v212;
    }
    else {
      uint64_t v175 = 0;
    }
    if ((v169 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v171 = (unint64_t)(v175 + 8);
LABEL_234:
      uint64_t v176 = &v212;
      goto LABEL_241;
    }
LABEL_243:
    if (v169 != 3) {
      goto LABEL_244;
    }
    *((void *)v168 + 1) = 0;
    if (v95) {
      goto LABEL_245;
    }
  }
  while (v99 != v98);
  if ((a3 & 1) == 0 && v97)
  {
LABEL_250:
    uint64_t v178 = 0;
    goto LABEL_253;
  }
LABEL_251:
  if (a3)
  {
    uint64_t v186 = *(unsigned int *)(a1 + 16);
    if (v186)
    {
      uint64_t v189 = 0;
      unsigned int v187 = 0;
      uint64_t v190 = (int *)(*(void *)(a1 + 8) + 20);
      uint64_t v188 = v202;
      do
      {
        int v191 = *v190;
        v190 += 6;
        if (v191 == 1) {
          int v192 = 1 << v189;
        }
        else {
          int v192 = 0;
        }
        v187 |= v192;
        ++v189;
      }
      while (v186 != v189);
    }
    else
    {
      unsigned int v187 = 0;
      uint64_t v188 = v202;
    }
    if (v95) {
      ++*v95;
    }
    uint64_t v208 = v218;
    if (v218) {
      llvm::MetadataTracking::track((uint64_t)&v208, v218, 2);
    }
    int v209 = v219;
    *(void *)&long long v217 = sub_1CD4008F4(a1, v188, v206, v204, (const llvm::APInt *)&v208, v217, *((uint64_t *)&v217 + 1), v187);
    DWORD2(v217) = v193;
    if (v208)
    {
      int v194 = *v208;
      if ((v194 - 4) > 0x1E)
      {
        if ((v194 - 3) >= 0xFFFFFFFE) {
          char v199 = v208;
        }
        else {
          char v199 = 0;
        }
        if ((v194 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v196 = (unint64_t)(v199 + 8);
          goto LABEL_305;
        }
        if (v194 == 3) {
          *((void *)v208 + 1) = 0;
        }
      }
      else if ((v208[1] & 0x7F) == 2 || *((_DWORD *)v208 + 3))
      {
        uint64_t v195 = *((void *)v208 + 2);
        if ((v195 & 4) != 0)
        {
          unint64_t v196 = v195 & 0xFFFFFFFFFFFFFFF8;
          if (v196)
          {
LABEL_305:
            *(void *)&long long v220 = &v208;
            sub_1CC5FA668(v196 + 16, &v220);
          }
        }
      }
    }
  }
LABEL_252:
  uint64_t v178 = v217;
LABEL_253:
  if (v218)
  {
    int v179 = *v218;
    if ((v179 - 4) > 0x1E)
    {
      if ((v179 - 3) >= 0xFFFFFFFE) {
        uint64_t v181 = v218;
      }
      else {
        uint64_t v181 = 0;
      }
      if ((v179 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v182 = (unint64_t)(v181 + 8);
        goto LABEL_263;
      }
      if (v179 == 3) {
        *((void *)v218 + 1) = 0;
      }
    }
    else if ((v218[1] & 0x7F) == 2 || *((_DWORD *)v218 + 3))
    {
      uint64_t v200 = *((void *)v218 + 2);
      if ((v200 & 4) != 0)
      {
        unint64_t v182 = v200 & 0xFFFFFFFFFFFFFFF8;
        if (v182)
        {
LABEL_263:
          *(void *)&long long v220 = &v218;
          sub_1CC5FA668(v182 + 16, &v220);
        }
      }
    }
  }
  return v178;
}

uint64_t sub_1CB9CAD4C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 != 35 && v4 != 11) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 80);
  int v7 = (void *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    int v7 = (void *)*v7;
  }
  *a4 = *v7;
  return 1;
}

void sub_1CB9CAD94(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
BOOL sub_1CB9CB900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 8);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      if (v6 > v7 || v6 >= v7 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 28))
      {
        uint64_t v8 = (long long *)(a2 - 32);
        long long v10 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        long long v11 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v11;
        long long *v8 = v10;
        v8[1] = v9;
      }
      return result;
    case 3:
      sub_1CB8BCBA4((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_1CB8BCFCC(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      int v25 = (long long *)(a1 + 32);
      unsigned int v26 = (long long *)(a1 + 64);
      unsigned int v27 = (long long *)(a1 + 96);
      sub_1CB8BCFCC(a1, a1 + 32, a1 + 64, a1 + 96);
      unsigned int v28 = *(_DWORD *)(a2 - 8);
      unsigned int v29 = *(_DWORD *)(a1 + 120);
      if (v28 > v29 || v28 >= v29 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 124))
      {
        unsigned int v30 = (_OWORD *)(a2 - 32);
        long long v32 = *v27;
        long long v31 = *(_OWORD *)(a1 + 112);
        long long v33 = *(_OWORD *)(a2 - 16);
        *unsigned int v27 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v33;
        *unsigned int v30 = v32;
        v30[1] = v31;
        unsigned int v34 = *(_DWORD *)(a1 + 120);
        unsigned int v35 = *(_DWORD *)(a1 + 88);
        if (v34 > v35 || v34 >= v35 && *(_DWORD *)(a1 + 124) < *(_DWORD *)(a1 + 92))
        {
          long long v37 = *v26;
          long long v36 = *(_OWORD *)(a1 + 80);
          long long v38 = *(_OWORD *)(a1 + 112);
          *unsigned int v26 = *v27;
          *(_OWORD *)(a1 + 80) = v38;
          *unsigned int v27 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          unsigned int v39 = *(_DWORD *)(a1 + 88);
          unsigned int v40 = *(_DWORD *)(a1 + 56);
          if (v39 > v40 || v39 >= v40 && *(_DWORD *)(a1 + 92) < *(_DWORD *)(a1 + 60))
          {
            long long v42 = *v25;
            long long v41 = *(_OWORD *)(a1 + 48);
            long long v43 = *(_OWORD *)(a1 + 80);
            long long *v25 = *v26;
            *(_OWORD *)(a1 + 48) = v43;
            *unsigned int v26 = v42;
            *(_OWORD *)(a1 + 80) = v41;
            unsigned int v44 = *(_DWORD *)(a1 + 56);
            unsigned int v45 = *(_DWORD *)(a1 + 24);
            if (v44 > v45 || v44 >= v45 && *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 28))
            {
              long long v47 = *(_OWORD *)a1;
              long long v46 = *(_OWORD *)(a1 + 16);
              long long v48 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v25;
              *(_OWORD *)(a1 + 16) = v48;
              long long *v25 = v47;
              *(_OWORD *)(a1 + 48) = v46;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a1 + 64;
      sub_1CB8BCBA4((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v13 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v16 = *(_DWORD *)(v13 + 24);
    unsigned int v17 = *(_DWORD *)(v12 + 24);
    if (v16 > v17) {
      break;
    }
    if (v16 >= v17)
    {
      unsigned int v18 = *(_DWORD *)(v13 + 28);
      if (v18 < *(_DWORD *)(v12 + 28)) {
        goto LABEL_10;
      }
    }
LABEL_20:
    uint64_t v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v18 = *(_DWORD *)(v13 + 28);
LABEL_10:
  uint64_t v50 = *(void *)(v13 + 16);
  long long v49 = *(_OWORD *)v13;
  long long v19 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v19;
  uint64_t v20 = a1;
  if (v12 != a1)
  {
    uint64_t v21 = v14;
    while (1)
    {
      unint64_t v22 = (_OWORD *)(a1 + v21);
      unsigned int v23 = *(_DWORD *)(a1 + v21 + 56);
      if (v16 <= v23)
      {
        if (v16 < v23)
        {
          uint64_t v20 = a1 + v21 + 64;
          goto LABEL_19;
        }
        if (v18 >= *(_DWORD *)(a1 + v21 + 60)) {
          break;
        }
      }
      v12 -= 32;
      long long v24 = v22[3];
      v22[4] = v22[2];
      v22[5] = v24;
      v21 -= 32;
      if (v21 == -64)
      {
        uint64_t v20 = a1;
        goto LABEL_19;
      }
    }
    uint64_t v20 = v12;
  }
LABEL_19:
  *(void *)(v20 + 16) = v50;
  *(_OWORD *)uint64_t v20 = v49;
  *(_DWORD *)(v20 + 24) = v16;
  *(_DWORD *)(v20 + 28) = v18;
  if (++v15 != 8) {
    goto LABEL_20;
  }
  return v13 + 32 == a2;
}

unint64_t sub_1CB9CBC18(uint64_t *a1, uint64_t a2, BOOL a3, uint64_t a4, int a5)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 48);
  if (v10)
  {
    int v11 = 1;
    while (1)
    {
      if (*(_DWORD *)(v10 + 8) == a3)
      {
        if (!v11)
        {
          int v12 = 0;
          goto LABEL_11;
        }
        --v11;
      }
      uint64_t v10 = *(void *)(v10 + 32);
      if (!v10) {
        goto LABEL_9;
      }
    }
  }
  int v11 = 1;
LABEL_9:
  int v12 = 1;
LABEL_11:
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v12;
  }
  if (a5 && !v13) {
    goto LABEL_128;
  }
  int v14 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 0xAB:
      LODWORD(v102) = 0;
      if (((*(uint64_t (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102) & 1) == 0)goto LABEL_128; {
      unint64_t v15 = *(unsigned int *)(a4 + 8);
      }
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v15, &v107);
      uint64_t v16 = sub_1CB9CBC18(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
      if (*(_DWORD *)(a4 + 8))
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        do
        {
          if ((v102 >> v18))
          {
            uint64_t v19 = *(void *)a4 + v17;
            long long v20 = *(_OWORD *)((char *)__src + v17);
            *(void *)(v19 + 16) = *(void *)((char *)__src + v17 + 16);
            *(_OWORD *)uint64_t v19 = v20;
          }
          else
          {
            uint64_t v21 = *(void *)a4 + v17;
            *(void *)uint64_t v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
            *(void *)(v21 + 16) = 0xFFFFFFFFLL;
          }
          ++v18;
          v17 += 24;
        }
        while (v18 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v16 + 1;
      uint64_t v23 = (HIDWORD(v16) + 1);
      long long v24 = (uint64_t *)__src;
      goto LABEL_71;
    case 0xAC:
      goto LABEL_103;
    case 0xAD:
    case 0xAE:
    case 0xB0:
      goto LABEL_128;
    case 0xAF:
      LODWORD(v102) = 0;
      if (((*(uint64_t (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102) & 1) == 0)goto LABEL_128; {
      unint64_t v36 = *(unsigned int *)(a4 + 8);
      }
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v36, &v107);
      unint64_t v37 = sub_1CB9CBC18(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
      unint64_t v30 = HIDWORD(v37);
      int v38 = v102;
      if (*(_DWORD *)(a4 + 8) > v102)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 24 * v102;
        unint64_t v41 = v102;
        do
        {
          uint64_t v42 = *(void *)a4 + v40 + v39;
          long long v43 = *(_OWORD *)((char *)__src + v39);
          *(void *)(v42 + 16) = *(void *)((char *)__src + v39 + 16);
          *(_OWORD *)uint64_t v42 = v43;
          ++v41;
          v39 += 24;
        }
        while (v41 < *(unsigned int *)(a4 + 8));
      }
      if (v38)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          uint64_t v46 = *(void *)a4 + v44;
          *(void *)uint64_t v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          *(void *)(v46 + 16) = 0xFFFFFFFFLL;
          ++v45;
          v44 += 24;
        }
        while (v45 < v102);
        if (v102 <= 4) {
          int v47 = 1;
        }
        else {
          int v47 = 2;
        }
        if (v102 <= 8) {
          int v48 = v47;
        }
        else {
          int v48 = 4;
        }
        if (v102 == 16) {
          int v35 = 1;
        }
        else {
          int v35 = v48;
        }
      }
      else
      {
        int v35 = 1;
      }
      LODWORD(v22) = v37 + 1;
      goto LABEL_69;
    case 0xB1:
      LODWORD(v102) = 0;
      if (((*(uint64_t (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102) & 1) == 0)goto LABEL_128; {
      unint64_t v49 = *(unsigned int *)(a4 + 8);
      }
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v49, &v107);
      uint64_t v50 = sub_1CB9CBC18(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
      uint64_t v51 = v102;
      LODWORD(v52) = v102;
      if (*(_DWORD *)(a4 + 8) != v102)
      {
        uint64_t v53 = 0;
        unsigned int v54 = 1;
        do
        {
          unsigned int v55 = (char *)__src + 24 * v51 + 24 * v54 - 24;
          uint64_t v56 = *(void *)a4 + 24 * v53;
          long long v57 = *(_OWORD *)v55;
          *(void *)(v56 + 16) = *((void *)v55 + 2);
          *(_OWORD *)uint64_t v56 = v57;
          uint64_t v53 = v54;
          uint64_t v52 = *(unsigned int *)(a4 + 8);
        }
        while (v52 - v51 > (unint64_t)v54++);
      }
      unint64_t v59 = (v52 - v51);
      if (v52 > v59)
      {
        uint64_t v60 = 24 * v59;
        do
        {
          uint64_t v61 = *(void *)a4 + v60;
          *(void *)uint64_t v61 = 0;
          *(_DWORD *)(v61 + 8) = 0;
          *(void *)(v61 + 16) = 0xFFFFFFFFLL;
          ++v59;
          v60 += 24;
        }
        while (v59 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v50 + 1;
      uint64_t v23 = (HIDWORD(v50) + 4);
      goto LABEL_70;
    default:
      if (v14 == 58)
      {
        LODWORD(v102) = 0;
        if (!(*(unsigned int (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102))goto LABEL_128; {
        uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
        }
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.i32[0] != 1) {
          goto LABEL_128;
        }
        unsigned int v26 = __clz(v102);
        unsigned int v27 = 31 - v26;
        unint64_t v28 = *(unsigned int *)(a4 + 8);
        *(void *)&long long v107 = 0;
        DWORD2(v107) = 0;
        uint64_t v108 = 0x1FFFFFFFFLL;
        sub_1CB8BDE30(&__src, v28, &v107);
        unint64_t v29 = sub_1CB9CBC18(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
        unint64_t v30 = HIDWORD(v29);
        if (*(_DWORD *)(a4 + 8) > 31 - v26)
        {
          uint64_t v31 = 0;
          unint64_t v32 = 31 - v26;
          do
          {
            uint64_t v33 = *(void *)a4 + 24 * (31 - v26) + v31;
            long long v34 = *(_OWORD *)((char *)__src + v31);
            *(void *)(v33 + 16) = *(void *)((char *)__src + v31 + 16);
            *(_OWORD *)uint64_t v33 = v34;
            ++v32;
            v31 += 24;
          }
          while (v32 < *(unsigned int *)(a4 + 8));
        }
        if (v26 == 31)
        {
          LODWORD(v22) = v29 + 1;
        }
        else
        {
          uint64_t v62 = 0;
          if (v27 <= 1) {
            unsigned int v63 = 1;
          }
          else {
            unsigned int v63 = 31 - v26;
          }
          uint64_t v64 = 24 * v63;
          do
          {
            uint64_t v65 = *(void *)a4 + v62;
            *(void *)uint64_t v65 = 0;
            *(_DWORD *)(v65 + 8) = 0;
            *(void *)(v65 + 16) = 0xFFFFFFFFLL;
            v62 += 24;
          }
          while (v64 != v62);
          LODWORD(v22) = v29 + 1;
          if (v26 == 15)
          {
            int v35 = 1;
            goto LABEL_69;
          }
          if (v27 > 8)
          {
            int v35 = 4;
            goto LABEL_69;
          }
        }
        if (v27 <= 4) {
          int v35 = 1;
        }
        else {
          int v35 = 2;
        }
LABEL_69:
        uint64_t v23 = (v35 + v30);
LABEL_70:
        long long v24 = (uint64_t *)__src;
LABEL_71:
        if (v24 != &v112) {
          free(v24);
        }
        return v22 | (unint64_t)(v23 << 32);
      }
      if (v14 != 56) {
        goto LABEL_128;
      }
      for (uint64_t i = 0; i != 64; i += 32)
      {
        long long v67 = (char *)&__src + i;
        *((_DWORD *)v67 + 2) = 1;
        *(void *)long long v67 = 0;
        *((_DWORD *)v67 + 6) = 1;
        *((void *)v67 + 2) = 0;
      }
      sub_1CD7F121C(a1[271], **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, (uint64_t)&v107);
      if (v111 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      __src = (void *)v107;
      unsigned int v111 = DWORD2(v107);
      DWORD2(v107) = 0;
      if (v113 >= 0x41 && v112)
      {
        MEMORY[0x1D25D9CB0](v112, 0x1000C8000313F17);
        uint64_t v112 = v108;
        unsigned int v113 = v109;
        unsigned int v109 = 0;
        if (DWORD2(v107) >= 0x41 && (void)v107) {
          MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v112 = v108;
        unsigned int v113 = v109;
      }
      sub_1CD7F121C(a1[271], *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, (uint64_t)&v107);
      if (v115 >= 0x41 && v114) {
        MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
      }
      uint64_t v114 = (void *)v107;
      unsigned int v115 = DWORD2(v107);
      DWORD2(v107) = 0;
      if (v117[0] >= 0x41u && v116)
      {
        MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
        uint64_t v116 = v108;
        v117[0] = v109;
        unsigned int v109 = 0;
        if (DWORD2(v107) >= 0x41 && (void)v107) {
          MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v116 = v108;
        v117[0] = v109;
      }
      unsigned int v106 = v111;
      if (v111 > 0x40) {
        operator new[]();
      }
      unint64_t v68 = ~(unint64_t)__src;
      if (v111) {
        unint64_t v69 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v111;
      }
      else {
        unint64_t v69 = 0;
      }
      unint64_t v70 = v69 & v68;
      unint64_t v105 = v69 & v68;
      unsigned int v104 = v115;
      if (v115 > 0x40) {
        operator new[]();
      }
      unint64_t v71 = v115 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v115 : 0;
      BOOL v72 = (v71 & ~(unint64_t)v114 & v70) != 0;
      for (uint64_t j = 0; j != -16; j -= 8)
      {
        long long v74 = (char *)&__src + j * 4;
        if (v117[j] >= 0x41u)
        {
          uint64_t v75 = *((void *)v74 + 6);
          if (v75)
          {
            MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
            long long v74 = (char *)&__src + j * 4;
          }
        }
        if (*((_DWORD *)v74 + 10) >= 0x41u)
        {
          uint64_t v76 = *((void *)v74 + 4);
          if (v76) {
            MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
          }
        }
      }
      if (v72) {
        goto LABEL_128;
      }
LABEL_103:
      unint64_t v77 = *(unsigned int *)(a4 + 8);
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v77, &v107);
      unint64_t v78 = *(unsigned int *)(a4 + 8);
      *(void *)&long long v102 = 0;
      DWORD2(v102) = 0;
      uint64_t v103 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&v107, v78, &v102);
      uint64_t v23 = (a5 + 1);
      unint64_t v22 = sub_1CB9CBC18(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, v23);
      uint64_t v79 = sub_1CB9CBC18(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v107, v23);
      if (!*(_DWORD *)(a4 + 8))
      {
LABEL_110:
        unint64_t v86 = HIDWORD(v22);
        LODWORD(v22) = v79 + v22;
        uint64_t v23 = (HIDWORD(v79) + v86);
        if (!(*(unsigned int (**)(uint64_t *))(*a1 + 8))(a1)) {
          goto LABEL_122;
        }
        if (*(_WORD *)(a2 + 24) != 56) {
          goto LABEL_122;
        }
        uint64_t v87 = *(void *)(*(void *)(a2 + 32) + 40);
        if (*(_WORD *)(v87 + 24) != 175) {
          goto LABEL_122;
        }
        uint64_t v88 = *(void *)(*(void *)(v87 + 32) + 40);
        int v89 = *(unsigned __int16 *)(v88 + 24);
        if (v89 != 35 && v89 != 11) {
          goto LABEL_122;
        }
        uint64_t v91 = *(void *)(v88 + 80);
        long long v92 = (void *)(v91 + 24);
        if (*(_DWORD *)(v91 + 32) >= 0x41u) {
          long long v92 = (void *)*v92;
        }
        if (*v92 < 5uLL)
        {
          int v93 = 0;
        }
        else
        {
LABEL_122:
          int v93 = 0;
          LODWORD(v22) = v22 + 1;
          uint64_t v23 = (v23 + 1);
        }
        goto LABEL_123;
      }
      uint64_t v80 = 0;
      unint64_t v81 = 0;
      break;
  }
  while (1)
  {
    uint64_t v82 = (uint64_t)__src;
    if (!*(_DWORD *)((char *)__src + v80 + 20))
    {
      uint64_t v82 = v107;
      goto LABEL_109;
    }
    if (*(_DWORD *)(v107 + v80 + 20)) {
      break;
    }
LABEL_109:
    unint64_t v83 = (long long *)(v82 + v80);
    uint64_t v84 = *(void *)a4 + v80;
    long long v85 = *v83;
    *(void *)(v84 + 16) = *((void *)v83 + 2);
    *(_OWORD *)uint64_t v84 = v85;
    ++v81;
    v80 += 24;
    if (v81 >= *(unsigned int *)(a4 + 8)) {
      goto LABEL_110;
    }
  }
  int v93 = 1;
LABEL_123:
  if ((uint64_t *)v107 != &v108) {
    free((void *)v107);
  }
  if (__src != &v112) {
    free(__src);
  }
  if (!v93) {
    return v22 | (unint64_t)(v23 << 32);
  }
LABEL_128:
  sub_1CD7F121C(a1[271], a2, a3, 0, (uint64_t)&__src);
  if (*(_DWORD *)(a4 + 8))
  {
    uint64_t v94 = 0;
    unint64_t v95 = 0;
    do
    {
      if (v111 >= 0x41) {
        p_src = (unint64_t *)__src;
      }
      else {
        p_src = (unint64_t *)&__src;
      }
      unint64_t v97 = *p_src;
      uint64_t v98 = *(void *)a4 + v94;
      if ((v97 >> v95))
      {
        uint64_t v99 = 0;
        *(_DWORD *)(v98 + 8) = 0;
        uint64_t v100 = 0xFFFFFFFFLL;
      }
      else
      {
        *(void *)(v98 + 8) = a3;
        uint64_t v100 = v95 | 0x100000000;
        uint64_t v99 = a2;
      }
      *(void *)uint64_t v98 = v99;
      *(void *)(v98 + 16) = v100;
      ++v95;
      v94 += 24;
    }
    while (v95 < *(unsigned int *)(a4 + 8));
  }
  if (v113 >= 0x41 && v112) {
    MEMORY[0x1D25D9CB0](v112, 0x1000C8000313F17);
  }
  if (v111 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  LODWORD(v22) = 0;
  uint64_t v23 = 0;
  return v22 | (unint64_t)(v23 << 32);
}

BOOL sub_1CB9CC910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_1CB9C4298(a1, a2, a3, a4, a5, 0) || sub_1CB9C488C(a1, a2, a3, a4, a5, 0)) {
    return 1;
  }

  return sub_1CB9C44B4(a1, a2, a3, a4, a5, 0);
}

void sub_1CB9CC9C0()
{
}

__n128 sub_1CB9CC9D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F0CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CB9CCA28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F0CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9CCA60(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  BOOL v5 = (uint64_t (*)(void *, void, void, uint64_t, uint64_t))a1[1];
  unsigned int v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    BOOL v5 = *(uint64_t (**)(void *, void, void, uint64_t, uint64_t))(*v6 + v5);
  }
  return v5(v6, *a2, a2[1], a3, a4);
}

uint64_t *sub_1CB9CCAB8(void *a1, const llvm::APInt *a2, unsigned int a3, unsigned int a4, void *a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = sub_1CB9511F0(a1[60], a4, 1);
  uint64_t v42 = 4;
  *(void *)&long long v41 = sub_1CD7ED9FC(a1[37], 64, (llvm *)6, 0, a3, 3);
  *((void *)&v41 + 1) = v11;
  uint64_t ConstantPool = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(a1[35] + 432));
  uint64_t v13 = ConstantPool | 4;
  if (ConstantPool) {
    int v14 = *(_DWORD *)(ConstantPool + 12);
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = a1[35];
  v38[0] = v13;
  v38[1] = 0;
  int v39 = v14;
  char v40 = 0;
  *(_OWORD *)long long v43 = 0u;
  long long v44 = 0u;
  MachineMemOperand = (void *)llvm::MachineFunction::getMachineMemOperand(v15, (uint64_t)v38, 1, a4, 63 - __clz(a4), (long long *)v43, 0, 1, 0, 0, 0);
  uint64_t v17 = a1[37];
  unint64_t v18 = *(unsigned __int8 **)a2;
  unint64_t v36 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v36, v18, 2);
  }
  int v37 = *((_DWORD *)a2 + 2);
  v43[0] = a5;
  LODWORD(v43[1]) = 0;
  int v35 = 0;
  uint64_t v19 = sub_1CD40176C(v17, 4137, (uint64_t)&v36, 5u, v10, &v42, &v41, v43, &v35);
  if (v36)
  {
    int v20 = *v36;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        unint64_t v29 = v36;
      }
      else {
        unint64_t v29 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v30 = (unint64_t)(v29 + 8);
LABEL_30:
        v43[0] = &v36;
        sub_1CC5FA668(v30 + 16, v43);
        goto LABEL_10;
      }
      if (v20 == 3) {
        *((void *)v36 + 1) = 0;
      }
    }
    else if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
    {
      uint64_t v32 = *((void *)v36 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v30 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v30) {
          goto LABEL_30;
        }
      }
    }
  }
LABEL_10:
  uint64_t v21 = (uint64_t *)a1[37];
  v43[0] = MachineMemOperand;
  sub_1CD8005B8(v21, (uint64_t)v19, v43, 1);
  unint64_t v22 = *(unsigned __int8 **)a2;
  uint64_t v33 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v33, v22, 2);
  }
  int v34 = *((_DWORD *)a2 + 2);
  uint64_t v23 = sub_1CB9C48D8((uint64_t)a1, 0, (uint64_t)&v33, (llvm *)5, 0);
  if (v33)
  {
    int v24 = *v33;
    if ((v24 - 4) <= 0x1E)
    {
      if ((v33[1] & 0x7F) != 2 && !*((_DWORD *)v33 + 3)) {
        goto LABEL_16;
      }
      uint64_t v31 = *((void *)v33 + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v28 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v28) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
    if ((v24 - 3) >= 0xFFFFFFFE) {
      unsigned int v27 = v33;
    }
    else {
      unsigned int v27 = 0;
    }
    if ((v24 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v28 = (unint64_t)(v27 + 8);
LABEL_24:
      v43[0] = &v33;
      sub_1CC5FA668(v28 + 16, v43);
      goto LABEL_16;
    }
    if (v24 == 3) {
      *((void *)v33 + 1) = 0;
    }
  }
LABEL_16:
  v43[0] = &v44;
  long long v44 = (unint64_t)v19;
  unint64_t v45 = v23;
  uint64_t v46 = 0;
  v43[1] = (void *)0x200000002;
  uint8x8_t v25 = sub_1CB9C6060(a1[37], a2, v43);
  if (v43[0] != &v44) {
    free(v43[0]);
  }
  return v25;
}

void sub_1CB9CCDCC()
{
}

__n128 sub_1CB9CCDE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F0D40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB9CCE34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F0D40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9CCE6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v5 = *(uint64_t (**)(void *, void, void, uint64_t, uint64_t, void))(a1 + 8);
  unsigned int v6 = (void *)(*(void *)(a1 + 24) + (v4 >> 1));
  if (v4) {
    BOOL v5 = *(uint64_t (**)(void *, void, void, uint64_t, uint64_t, void))(*v6 + v5);
  }
  return v5(v6, *a2, a2[1], a3, a4, *(unsigned int *)(a1 + 32));
}

uint64_t *sub_1CB9CCECC(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, int a13, unsigned __int8 a14, uint64_t a15)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unsigned int v63 = a3;
  uint64_t v16 = (unsigned __int8 *)(*(void *)(a9 + 40) + 16 * a10);
  int v17 = *v16;
  if (!*v16)
  {
    uint64_t v18 = *((void *)v16 + 1);
    if ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x12) {
      int v19 = *(unsigned __int8 *)(**(void **)(v18 + 16) + 8);
    }
    else {
      int v19 = *(_DWORD *)(v18 + 8);
    }
    uint64_t v20 = a4;
    int v21 = a5;
    uint64_t v22 = a6;
    int v23 = a7;
    int v24 = sub_1CB9C7AD4;
    if (v19 == 13) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint8x8_t v25 = sub_1CB9C7AD4;
  uint64_t v20 = a4;
  int v21 = a5;
  uint64_t v22 = a6;
  int v23 = a7;
  BOOL v26 = (v17 - 120) >= 0x20 && (v17 - 2) >= 6;
  if (v26 && (v17 - 15) >= 0x3C)
  {
LABEL_12:
    int v24 = sub_1CB9C7114;
LABEL_13:
    uint8x8_t v25 = v24;
  }
  unsigned int v27 = operator new(0x20uLL);
  *unsigned int v27 = &unk_1F25F0CF8;
  v27[1] = v25;
  _OWORD v27[2] = 0;
  v27[3] = a1;
  unint64_t v28 = (unsigned __int8 *)(*(void *)(a11 + 40) + 16 * a12);
  int v29 = *v28;
  if (!*v28)
  {
    uint64_t v30 = *((void *)v28 + 1);
    if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12) {
      int v31 = *(unsigned __int8 *)(**(void **)(v30 + 16) + 8);
    }
    else {
      int v31 = *(_DWORD *)(v30 + 8);
    }
    uint64_t v32 = sub_1CB9C7AD4;
    if (v31 == 13) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v33 = sub_1CB9C7AD4;
  BOOL v34 = (v29 - 120) >= 0x20 && (v29 - 2) >= 6;
  if (v34 && (v29 - 15) >= 0x3C)
  {
LABEL_25:
    uint64_t v32 = sub_1CB9C7114;
LABEL_26:
    uint64_t v33 = v32;
  }
  int v35 = operator new(0x20uLL);
  void *v35 = &unk_1F25F0CF8;
  v35[1] = v33;
  v35[2] = 0;
  v35[3] = a1;
  sub_1CD3FC878((uint64_t)v61, *(void *)(a1 + 296), v20, v21, 0, 0, 0);
  sub_1CD3FC878((uint64_t)v59, *(void *)(a1 + 296), v22, v23, 0, 0, 0);
  sub_1CD3FC878((uint64_t)v57, *(void *)(a1 + 296), a9, a10, 1, 0, 0);
  sub_1CD3FC878((uint64_t)v55, *(void *)(a1 + 296), a11, a12, 1, 0, 0);
  unint64_t v36 = operator new(0x28uLL);
  *unint64_t v36 = &unk_1F25F0D40;
  v36[1] = sub_1CB9C44B4;
  v36[2] = 0;
  v36[3] = a1;
  *((_DWORD *)v36 + 8) = 0;
  sub_1CB9C633C((uint64_t)v61, (uint64_t)v36);
  (*(void (**)(void *))(*v36 + 40))(v36);
  int v37 = operator new(0x28uLL);
  *int v37 = &unk_1F25F0D40;
  v37[1] = sub_1CB9C44B4;
  void v37[2] = 0;
  v37[3] = a1;
  *((_DWORD *)v37 + 8) = 0;
  sub_1CB9C633C((uint64_t)v59, (uint64_t)v37);
  (*(void (**)(void *))(*v37 + 40))(v37);
  int v38 = (unsigned char *)(*(uint64_t (**)(void *))(*v27 + 16))(v27);
  unint64_t v68 = v38;
  sub_1CB9C633C((uint64_t)v57, (uint64_t)v38);
  if (v38 == v67)
  {
    (*(void (**)(unsigned char *))(v39 + 32))(v67);
  }
  else if (v38)
  {
    (*(void (**)(unsigned char *))(*(void *)v38 + 40))(v38);
  }
  char v40 = (unsigned char *)(*(uint64_t (**)(void *))(*v35 + 16))(v35);
  unsigned int v66 = v40;
  sub_1CB9C633C((uint64_t)v55, (uint64_t)v40);
  if (v40 == v65)
  {
    (*(void (**)(unsigned char *))(v41 + 32))(v65);
  }
  else if (v40)
  {
    (*(void (**)(unsigned char *))(*(void *)v40 + 40))(v40);
  }
  unsigned __int8 v42 = *(unsigned char *)(*(void *)(a9 + 40) + 16 * a10);
  if (a2) {
    int v43 = dword_1CDAF3FA4[8 * (v62 > 3) + 4 * (v60 > 3) + 2 * (v58 > 3) + (v56 > 3)];
  }
  else {
    int v43 = sub_1CD401ECC(a14, (uint64_t)v61, (uint64_t)v59, (uint64_t)v57, (uint64_t)v55, *(void *)(*(void *)(a1 + 296) + 40));
  }
  uint64_t v44 = *(void *)(a1 + 296);
  unint64_t v45 = *(unsigned __int8 **)a15;
  uint64_t v53 = v45;
  if (v45) {
    llvm::MetadataTracking::track((uint64_t)&v53, v45, 2);
  }
  int v54 = *(_DWORD *)(a15 + 8);
  uint64_t v46 = sub_1CD402034(v44, v43, (uint64_t)&v53, v42, 0, &v63, (uint64_t)v61, (uint64_t)v59, (uint64_t)v57, (uint64_t)v55);
  if (v53)
  {
    int v47 = *v53;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        unint64_t v49 = v53;
      }
      else {
        unint64_t v49 = 0;
      }
      if ((v47 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v50 = (unint64_t)(v49 + 8);
LABEL_50:
        uint64_t v64 = &v53;
        sub_1CC5FA668(v50 + 16, &v64);
        goto LABEL_44;
      }
      if (v47 == 3) {
        *((void *)v53 + 1) = 0;
      }
    }
    else if ((v53[1] & 0x7F) == 2 || *((_DWORD *)v53 + 3))
    {
      uint64_t v51 = *((void *)v53 + 2);
      if ((v51 & 4) != 0)
      {
        unint64_t v50 = v51 & 0xFFFFFFFFFFFFFFF8;
        if (v50) {
          goto LABEL_50;
        }
      }
    }
  }
LABEL_44:
  (*(void (**)(void *))(*v35 + 40))(v35);
  (*(void (**)(void *))(*v27 + 40))(v27);
  return v46;
}

uint64_t *sub_1CB9CD558(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unsigned int v54 = a2;
  sub_1CD3FC878((uint64_t)v53, *(void *)(a1 + 296), a3, a4, 0, 0, 0);
  sub_1CD3FC878((uint64_t)v52, *(void *)(a1 + 296), a5, a6, 0, 0, 0);
  sub_1CD3FC878((uint64_t)&v50, *(void *)(a1 + 296), a7, a8, 1, 0, 0);
  sub_1CD3FC878((uint64_t)&v48, *(void *)(a1 + 296), a9, a10, 1, 0, 0);
  uint64_t v18 = operator new(0x28uLL);
  void *v18 = &unk_1F25F0D40;
  v18[1] = sub_1CB9C44B4;
  v18[2] = 0;
  v18[3] = a1;
  *((_DWORD *)v18 + 8) = 0;
  sub_1CB9C633C((uint64_t)v53, (uint64_t)v18);
  (*(void (**)(void *))(*v18 + 40))(v18);
  int v19 = operator new(0x28uLL);
  *int v19 = &unk_1F25F0D40;
  v19[1] = sub_1CB9C44B4;
  v19[2] = 0;
  v19[3] = a1;
  *((_DWORD *)v19 + 8) = 0;
  long long v57 = v19;
  sub_1CB9C633C((uint64_t)v52, (uint64_t)v19);
  if (v57 == v56)
  {
    (*(void (**)(void *))(v56[0] + 32))(v56);
  }
  else if (v57)
  {
    (*(void (**)(void *))(*v57 + 40))(v57);
  }
  uint64_t v20 = (unsigned __int8 *)(*(void *)(v50 + 40) + 16 * v51);
  int v21 = *v20;
  if (!*v20)
  {
    uint64_t v22 = *((void *)v20 + 1);
    if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12) {
      int v23 = *(unsigned __int8 *)(**(void **)(v22 + 16) + 8);
    }
    else {
      int v23 = *(_DWORD *)(v22 + 8);
    }
    int v24 = sub_1CB9C7AD4;
    if (v23 == 13) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint8x8_t v25 = sub_1CB9C7AD4;
  BOOL v26 = (v21 - 120) >= 0x20 && (v21 - 2) >= 6;
  if (v26 && (v21 - 15) >= 0x3C)
  {
LABEL_16:
    int v24 = sub_1CB9C7114;
LABEL_17:
    uint8x8_t v25 = v24;
  }
  uint64_t v27 = a8;
  unint64_t v28 = operator new(0x20uLL);
  void *v28 = &unk_1F25F0CF8;
  v28[1] = v25;
  _OWORD v28[2] = 0;
  v28[3] = a1;
  sub_1CB9C633C((uint64_t)&v50, (uint64_t)v28);
  (*(void (**)(void *))(*v28 + 40))(v28);
  int v29 = (unsigned __int8 *)(*(void *)(v48 + 40) + 16 * v49);
  int v30 = *v29;
  if (!*v29)
  {
    uint64_t v31 = *((void *)v29 + 1);
    if ((*(_DWORD *)(v31 + 8) & 0xFE) == 0x12) {
      int v32 = *(unsigned __int8 *)(**(void **)(v31 + 16) + 8);
    }
    else {
      int v32 = *(_DWORD *)(v31 + 8);
    }
    uint64_t v33 = sub_1CB9C7AD4;
    if (v32 == 13) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  BOOL v34 = sub_1CB9C7AD4;
  if ((v30 - 120) >= 0x20 && (v30 - 2) >= 6 && (v30 - 15) >= 0x3C)
  {
LABEL_26:
    uint64_t v33 = sub_1CB9C7114;
LABEL_27:
    BOOL v34 = v33;
  }
  int v35 = operator new(0x20uLL);
  void *v35 = &unk_1F25F0CF8;
  v35[1] = v34;
  v35[2] = 0;
  v35[3] = a1;
  sub_1CB9C633C((uint64_t)&v48, (uint64_t)v35);
  (*(void (**)(void *))(*v35 + 40))(v35);
  unsigned __int8 v36 = *(unsigned char *)(*(void *)(a7 + 40) + 16 * v27);
  int v37 = sub_1CD4022DC(a12, (uint64_t)v53, (uint64_t)v52, (uint64_t)&v50, (uint64_t)&v48, *(void *)(*(void *)(a1 + 296) + 40));
  uint64_t v38 = *(void *)(a1 + 296);
  uint64_t v39 = *(unsigned __int8 **)a13;
  uint64_t v46 = v39;
  if (v39) {
    llvm::MetadataTracking::track((uint64_t)&v46, v39, 2);
  }
  int v47 = *(_DWORD *)(a13 + 8);
  char v40 = sub_1CD402034(v38, v37, (uint64_t)&v46, v36, 0, &v54, (uint64_t)v53, (uint64_t)v52, (uint64_t)&v50, (uint64_t)&v48);
  if (v46)
  {
    int v41 = *v46;
    if ((v41 - 4) > 0x1E)
    {
      if ((v41 - 3) >= 0xFFFFFFFE) {
        int v43 = v46;
      }
      else {
        int v43 = 0;
      }
      if ((v41 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v44 = (unint64_t)(v43 + 8);
LABEL_40:
        unsigned int v55 = &v46;
        sub_1CC5FA668(v44 + 16, &v55);
        return v40;
      }
      if (v41 == 3) {
        *((void *)v46 + 1) = 0;
      }
    }
    else if ((v46[1] & 0x7F) == 2 || *((_DWORD *)v46 + 3))
    {
      uint64_t v45 = *((void *)v46 + 2);
      if ((v45 & 4) != 0)
      {
        unint64_t v44 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (v44) {
          goto LABEL_40;
        }
      }
    }
  }
  return v40;
}

uint64_t sub_1CB9CDA9C(uint64_t result, unint64_t a2, int a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = *(_DWORD **)result;
  BOOL v5 = (_DWORD *)(result + 8);
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(unsigned int *)(result + 8);
  }
  if (v6)
  {
    unint64_t v10 = *(_DWORD **)result;
    do
    {
      *v10++ = a3;
      --v6;
    }
    while (v6);
    unint64_t v4 = *v5;
  }
  unint64_t v7 = v4 - a2;
  if (v4 < a2)
  {
    uint64_t v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *BOOL v5 = a2;
  return result;
}

void sub_1CB9CDB5C()
{
}

__n128 sub_1CB9CDB70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F0D88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CB9CDBC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F0D88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9CDBFC(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(uint64_t (**)(void *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8);
  unint64_t v10 = (void *)(*(void *)(a1 + 24) + (v8 >> 1));
  if (v8) {
    long long v9 = *(uint64_t (**)(void *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + v9);
  }
  int v11 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v12 = *a2;
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  int v17 = *(unsigned __int8 **)a8;
  BOOL v26 = v17;
  if (v17)
  {
    uint64_t v25 = v15;
    int v24 = (void *)a8;
    llvm::MetadataTracking::retrack(a8, v17, (uint64_t)&v26);
    a8 = (uint64_t)v24;
    uint64_t v15 = v25;
    *int v24 = 0;
  }
  int v27 = *(_DWORD *)(a8 + 8);
  uint64_t v18 = v9(v10, v11 != 0, v12, v14, v13, v16, v15);
  if (v26)
  {
    int v19 = *v26;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        int v21 = v26;
      }
      else {
        int v21 = 0;
      }
      if ((v19 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_15:
        unint64_t v28 = &v26;
        sub_1CC5FA668(v22 + 16, &v28);
        return v18;
      }
      if (v19 == 3) {
        *((void *)v26 + 1) = 0;
      }
    }
    else if ((v26[1] & 0x7F) == 2 || *((_DWORD *)v26 + 3))
    {
      uint64_t v23 = *((void *)v26 + 2);
      if ((v23 & 4) != 0)
      {
        unint64_t v22 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_15;
        }
      }
    }
  }
  return v18;
}

void sub_1CB9CDDA8()
{
}

__n128 sub_1CB9CDDBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F0DD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CB9CDE10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F0DD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9CDE48(void *a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7, unsigned __int8 **a8)
{
  uint64_t v9 = a1[2];
  unint64_t v10 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, unsigned __int8 **))a1[1];
  int v11 = (void *)(a1[3] + (v9 >> 1));
  if (v9) {
    unint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, unsigned __int8 **))(*v11 + v10);
  }
  uint64_t v12 = *a2;
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  uint64_t v18 = *a5;
  uint64_t v17 = a5[1];
  uint64_t v19 = *a6;
  uint64_t v20 = a6[1];
  int v21 = *a7;
  unint64_t v22 = *a8;
  int v35 = v22;
  if (v22)
  {
    uint64_t v33 = v19;
    BOOL v34 = v11;
    uint64_t v23 = (uint64_t)a8;
    int v32 = a8;
    uint64_t v24 = v17;
    int v31 = v21;
    llvm::MetadataTracking::retrack(v23, v22, (uint64_t)&v35);
    int v21 = v31;
    uint64_t v17 = v24;
    a8 = v32;
    uint64_t v19 = v33;
    int v11 = v34;
    _DWORD *v32 = 0;
  }
  int v36 = *((_DWORD *)a8 + 2);
  uint64_t v25 = v10(v11, v12, v14, v13, v16, v15, v18, v17, v19, v20, v21 != 0, &v35);
  if (v35)
  {
    int v26 = *v35;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        unint64_t v28 = v35;
      }
      else {
        unint64_t v28 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v28 + 8);
LABEL_15:
        int v37 = &v35;
        sub_1CC5FA668(v29 + 16, &v37);
        return v25;
      }
      if (v26 == 3) {
        *((void *)v35 + 1) = 0;
      }
    }
    else if ((v35[1] & 0x7F) == 2 || *((_DWORD *)v35 + 3))
    {
      uint64_t v30 = *((void *)v35 + 2);
      if ((v30 & 4) != 0)
      {
        unint64_t v29 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_15;
        }
      }
    }
  }
  return v25;
}

void *sub_1CB9CDFEC(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_1CB9CE0CC(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 == 422) {
    return 0;
  }
  if (v1 == 423) {
    return 1;
  }
  uint64_t v3 = *(void *)(**(void **)(a1 + 32) + 80);
  unint64_t v4 = (void *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    unint64_t v4 = (void *)*v4;
  }
  uint64_t v5 = (void *)*v4;
  if (v5 == (void *)2443) {
    return 10;
  }
  if (v5 != (void *)2442) {
    llvm::report_fatal_error((llvm *)"Unimplemented pack opcode!", (const llvm::Twine *)1);
  }
  return 11;
}

uint64_t sub_1CB9CE154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 24) != 146) {
    goto LABEL_65;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v131 = *(_OWORD **)v12;
  uint64_t v13 = (uint64_t)v131;
  LODWORD(v132) = *(_DWORD *)(v12 + 8);
  uint64_t v133 = *(void *)(v12 + 40);
  LODWORD(v134) = *(_DWORD *)(v12 + 48);
  int v14 = *((unsigned __int16 *)v131 + 12);
  if (v14 == 12 || v14 == 36)
  {
    uint64_t v15 = v133;
    int v16 = *(unsigned __int16 *)(v133 + 24);
    if (v16 != 36 && v16 != 12) {
      goto LABEL_54;
    }
    sub_1CD3FC878((uint64_t)v128, *(void *)(a1 + 296), (uint64_t)v131, 0, 0, 0, 0);
    if (v13 == v15 && (v129 & 0xFFFFFFFD) == 5)
    {
      uint64_t v18 = *(void *)(v13 + 80);
      uint64_t v20 = *(void **)(v18 + 32);
      uint64_t v19 = (llvm::detail::DoubleAPFloat *)(v18 + 32);
      if (v20 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v19, (llvm::APInt *)&v126);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v19, (uint64_t)&v126);
      }
      if (v127 >= 0x41) {
        int v21 = v126;
      }
      else {
        int v21 = (unsigned __int8 **)&v126;
      }
      unint64_t v22 = *v21;
      if (v127 >= 0x41 && v126) {
        MEMORY[0x1D25D9CB0]();
      }
      uint64_t v23 = **(unsigned __int8 **)(v13 + 40);
      unsigned int v24 = (v22 >> 23);
      unsigned int v25 = (v22 >> 19) & 0xF;
      unsigned int v26 = v24 - 124;
      unsigned int v27 = (v25 | 0x10) >> (125 - v24);
      if (v24 > 0x7C) {
        unsigned int v27 = (v22 >> 19) & 0xF;
      }
      else {
        unsigned int v26 = 0;
      }
      if (v24 | v25)
      {
        unsigned int v24 = v26;
        unsigned int v25 = v27;
      }
      unsigned int v28 = (v22 >> 10) & 0x1F;
      unsigned int v29 = (v22 >> 6) & 0xF;
      unsigned int v30 = v28 - 12;
      unsigned int v31 = (v29 | 0x10) >> (13 - ((v22 >> 10) & 0x1F));
      if (v28 > 0xC) {
        unsigned int v31 = (v22 >> 6) & 0xF;
      }
      else {
        unsigned int v30 = 0;
      }
      if (v28 | v29)
      {
        unsigned int v28 = v30;
        unsigned int v29 = v31;
      }
      BOOL v32 = v23 == 9;
      if (v23 == 9) {
        char v33 = 8;
      }
      else {
        char v33 = 24;
      }
      if (v32) {
        unsigned int v24 = v28;
      }
      if (v32) {
        unsigned int v25 = v29;
      }
      uint64_t v34 = *(void *)(a1 + 296);
      unint64_t v126 = 0;
      uint64_t v127 = 0;
      *(void *)a4 = sub_1CD7EBF14(v34, (v22 >> v33) & 0x80 | (16 * v24) | v25, (const llvm::APInt *)&v126, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(a4 + 8) = v35;
      if (v126)
      {
        int v36 = *(unsigned __int8 *)v126;
        if ((v36 - 4) > 0x1E)
        {
          if ((v36 - 3) >= 0xFFFFFFFE) {
            uint64_t v116 = v126;
          }
          else {
            uint64_t v116 = 0;
          }
          if ((v36 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v117 = (unint64_t)(v116 + 1);
LABEL_150:
            unsigned int v130 = (unsigned __int8 **)&v126;
            sub_1CC5FA668(v117 + 16, &v130);
            goto LABEL_42;
          }
          if (v36 == 3) {
            v126[1] = 0;
          }
        }
        else if ((*((unsigned char *)v126 + 1) & 0x7F) == 2 || *((_DWORD *)v126 + 3))
        {
          unsigned int v120 = v126[2];
          if ((v120 & 4) != 0)
          {
            unint64_t v117 = (unint64_t)v120 & 0xFFFFFFFFFFFFFFF8;
            if (v117) {
              goto LABEL_150;
            }
          }
        }
      }
LABEL_42:
      uint64_t v37 = *(void *)(a1 + 296);
      unint64_t v126 = 0;
      uint64_t v127 = 0;
      *(void *)a5 = sub_1CD7EBF14(v37, 0, (const llvm::APInt *)&v126, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(a5 + 8) = v38;
      uint64_t v39 = v126;
      if (!v126) {
        return 1;
      }
      int v40 = *(unsigned __int8 *)v126;
      if ((v40 - 4) > 0x1E)
      {
        if ((v40 - 3) >= 0xFFFFFFFE) {
          unsigned int v115 = v126;
        }
        else {
          unsigned int v115 = 0;
        }
        if ((v40 - 3) < 0xFFFFFFFE) {
          goto LABEL_143;
        }
        unint64_t v42 = (unint64_t)(v115 + 1);
      }
      else
      {
        if ((*((unsigned char *)v126 + 1) & 0x7F) != 2 && !*((_DWORD *)v126 + 3)) {
          return 1;
        }
        int v41 = v126[2];
        if ((v41 & 4) == 0) {
          return 1;
        }
        unint64_t v42 = (unint64_t)v41 & 0xFFFFFFFFFFFFFFF8;
        if (!v42) {
          return 1;
        }
      }
      unsigned int v130 = (unsigned __int8 **)&v126;
      uint64_t v62 = v42 + 16;
      unsigned int v63 = &v130;
      goto LABEL_76;
    }
    int v14 = *(unsigned __int16 *)(v13 + 24);
  }
  else
  {
    uint64_t v15 = v133;
  }
  if (v14 == 215 && *(_WORD *)(v15 + 24) == 215)
  {
    uint64_t v43 = *(void *)(v13 + 32);
    uint64_t v13 = *(void *)v43;
    unsigned int v131 = *(_OWORD **)v43;
    LODWORD(v132) = *(_DWORD *)(v43 + 8);
    uint64_t v44 = *(void *)(v15 + 32);
    uint64_t v133 = *(void *)v44;
    LODWORD(v134) = *(_DWORD *)(v44 + 8);
    uint64_t v15 = v133;
  }
LABEL_54:
  uint64_t v45 = (unsigned __int8 *)(*(void *)(v13 + 40) + 16 * v132);
  int v46 = *v45;
  int v47 = (unsigned __int8 *)(*(void *)(v15 + 40) + 16 * v134);
  if (v46 == *v47)
  {
    uint64_t v48 = *((void *)v47 + 1);
    uint64_t v49 = *((void *)v45 + 1);
    if (v46 || v49 == v48)
    {
      if ((a6 & 6) == 0)
      {
        uint64_t v51 = 0;
        char v52 = 1;
        while (*((_WORD *)(&v131)[2 * v51] + 12) == 430)
        {
          char v53 = v52;
          char v52 = 0;
          uint64_t v51 = 1;
          if ((v53 & 1) == 0)
          {
            uint64_t v54 = *(void *)(v13 + 32);
            uint64_t v13 = *(void *)v54;
            unsigned int v131 = *(_OWORD **)v54;
            LODWORD(v132) = *(_DWORD *)(v54 + 8);
            uint64_t v55 = *(void *)(v15 + 32);
            uint64_t v133 = *(void *)v55;
            LODWORD(v134) = *(_DWORD *)(v55 + 8);
            int v56 = 1;
            uint64_t v15 = v133;
            goto LABEL_78;
          }
        }
      }
      int v56 = 0;
LABEL_78:
      int v64 = *(unsigned __int16 *)(v13 + 24);
      uint64_t v124 = a3;
      unsigned int v123 = a6;
      if (v64 == 222)
      {
        if (*(_WORD *)(v15 + 24) != 222) {
          goto LABEL_106;
        }
        uint64_t v65 = *(void *)(v13 + 32);
        unsigned int v131 = *(_OWORD **)v65;
        uint64_t v13 = (uint64_t)v131;
        LODWORD(v132) = *(_DWORD *)(v65 + 8);
        uint64_t v66 = *(void *)(v15 + 32);
        uint64_t v133 = *(void *)v66;
        LODWORD(v134) = *(_DWORD *)(v66 + 8);
        v56 |= 2u;
        int v64 = *((unsigned __int16 *)v131 + 12);
        uint64_t v15 = v133;
      }
      if (v64 != 223)
      {
LABEL_84:
        uint64_t v69 = v132;
        uint64_t v70 = v15;
        uint64_t v71 = v13;
        LODWORD(v72) = v132;
        int v125 = v56;
        if (v64 == 212)
        {
          if (*(_WORD *)(v15 + 24) != 212) {
            goto LABEL_107;
          }
          long long v73 = *(unsigned int **)(v13 + 32);
          uint64_t v71 = *(void *)v73;
          uint64_t v72 = v73[2];
          long long v74 = (unsigned __int8 *)(*(void *)(*(void *)v73 + 40) + 16 * v72);
          int v75 = *v74;
          uint64_t v76 = *(unsigned int **)(v15 + 32);
          uint64_t v70 = *(void *)v76;
          unint64_t v77 = (unsigned __int8 *)(*(void *)(*(void *)v76 + 40) + 16 * v76[2]);
          if (v75 != *v77) {
            goto LABEL_107;
          }
          uint64_t v78 = *((void *)v77 + 1);
          uint64_t v79 = *((void *)v74 + 1);
          if (!v75 && v79 != v78) {
            goto LABEL_107;
          }
          int v64 = *(unsigned __int16 *)(v71 + 24);
        }
        if (v64 == 395 && *(_WORD *)(v70 + 24) == 395)
        {
          uint64_t v121 = v132;
          v128[0] = *(_OWORD *)(*(void *)(v71 + 40) + 16 * v72);
          unsigned int v82 = sub_1CB896FB8((unsigned __int8 *)v128);
          if (v81 == 1)
          {
            unsigned int v122 = v82;
            unsigned int v82 = v122;
          }
          uint64_t v83 = *(void *)(**(void **)(v71 + 32) + 80);
          uint64_t v84 = (void *)(v83 + 24);
          if (*(_DWORD *)(v83 + 32) >= 0x41u) {
            uint64_t v84 = (void *)*v84;
          }
          uint64_t v69 = v121;
          uint64_t v85 = *v84 + v82;
          uint64_t v86 = *(void *)(**(void **)(v70 + 32) + 80);
          uint64_t v87 = (void *)(v86 + 24);
          if (*(_DWORD *)(v86 + 32) >= 0x41u) {
            uint64_t v87 = (void *)*v87;
          }
          if (v85 == *v87)
          {
            unsigned int v88 = v82;
            int v89 = (uint64_t *)(*(void *)(v71 + 40) + 16 * v72);
            uint64_t v91 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*(void *)(a1 + 296) + 56), *v89, v89[1], 2u, 0);
            uint64_t v92 = *(void *)(**(void **)(v71 + 32) + 80);
            int v93 = (void *)(v92 + 24);
            if (*(_DWORD *)(v92 + 32) >= 0x41u) {
              int v93 = (void *)*v93;
            }
            uint64_t v94 = sub_1CD7ED9FC(*(void *)(a1 + 296), 64, v91, v90, *v93 >> 1, dword_1CDB0CE78[(v88 - 1) & 0x7FFFFFFF]);
            *(void *)a4 = v94;
            *(_DWORD *)(a4 + 8) = v95;
            if (v94) {
              goto LABEL_118;
            }
            uint64_t v69 = v121;
LABEL_108:
            uint64_t v96 = v69;
            unint64_t v97 = (uint64_t *)(*(void *)(v13 + 40) + 16 * v69);
            uint64_t v99 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*(void *)(a1 + 296) + 56), *v97, v97[1], 2u, 0);
            uint64_t v101 = v100;
            uint64_t v102 = *(void *)(a1 + 296);
            uint64_t v103 = *(unsigned __int8 **)(a2 + 64);
            *(void *)&v128[0] = v103;
            if (v103) {
              llvm::MetadataTracking::track((uint64_t)v128, v103, 2);
            }
            DWORD2(v128[0]) = *(_DWORD *)(a2 + 60);
            uint64_t v104 = *(void *)(v102 + 832);
            if (v104) {
              LOWORD(v104) = *(_WORD *)(v104 + 8);
            }
            unint64_t v105 = sub_1CCFDED5C(v102, 146, (const llvm::APInt *)v128, v99, v101, v13, v96, v98, v15, v134, v104);
            *(void *)a4 = v105;
            *(_DWORD *)(a4 + 8) = v106;
            a6 = v123;
            if (!*(void *)&v128[0]) {
              goto LABEL_117;
            }
            int v107 = **(unsigned char **)&v128[0];
            if ((v107 - 4) > 0x1E)
            {
              if ((v107 - 3) >= 0xFFFFFFFE) {
                uint64_t v113 = *(void *)&v128[0];
              }
              else {
                uint64_t v113 = 0;
              }
              if ((v107 - 3) < 0xFFFFFFFE)
              {
                if (v107 == 3) {
                  *(void *)(*(void *)&v128[0] + 8) = 0;
                }
                goto LABEL_116;
              }
              unint64_t v114 = v113 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*(void *)&v128[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v128[0] + 12)) {
                goto LABEL_116;
              }
              uint64_t v119 = *(void *)(*(void *)&v128[0] + 16);
              if ((v119 & 4) == 0) {
                goto LABEL_116;
              }
              unint64_t v114 = v119 & 0xFFFFFFFFFFFFFFF8;
              if (!v114) {
                goto LABEL_116;
              }
            }
            unint64_t v126 = (unsigned __int8 **)v128;
            sub_1CC5FA668(v114 + 16, &v126);
LABEL_116:
            unint64_t v105 = *(uint64_t **)a4;
LABEL_117:
            sub_1CD3D60FC(*(void *)(a1 + 296), a2, v124, (uint64_t)v105);
LABEL_118:
            uint64_t v108 = *(void *)(a1 + 296);
            v128[0] = 0uLL;
            *(void *)a5 = sub_1CD7EBF14(v108, v125 | a6, (const llvm::APInt *)v128, (llvm *)5, 0, 1, 0);
            *(_DWORD *)(a5 + 8) = v109;
            uint64_t v39 = *(unsigned __int8 ***)&v128[0];
            if (!*(void *)&v128[0]) {
              return 1;
            }
            int v40 = **(unsigned char **)&v128[0];
            if ((v40 - 4) <= 0x1E)
            {
              if ((*(unsigned char *)(*(void *)&v128[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v128[0] + 12)) {
                return 1;
              }
              uint64_t v110 = *(void *)(*(void *)&v128[0] + 16);
              if ((v110 & 4) == 0) {
                return 1;
              }
              unint64_t v111 = v110 & 0xFFFFFFFFFFFFFFF8;
              if (!v111) {
                return 1;
              }
LABEL_130:
              unint64_t v126 = (unsigned __int8 **)v128;
              uint64_t v62 = v111 + 16;
              unsigned int v63 = &v126;
              goto LABEL_76;
            }
            if ((v40 - 3) >= 0xFFFFFFFE) {
              uint64_t v112 = *(void *)&v128[0];
            }
            else {
              uint64_t v112 = 0;
            }
            if ((v40 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v111 = v112 + 8;
              goto LABEL_130;
            }
LABEL_143:
            if (v40 == 3) {
              v39[1] = 0;
            }
            return 1;
          }
        }
LABEL_107:
        *(void *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
        goto LABEL_108;
      }
      if (*(_WORD *)(v15 + 24) == 223)
      {
        uint64_t v67 = *(void *)(v13 + 32);
        unsigned int v131 = *(_OWORD **)v67;
        uint64_t v13 = (uint64_t)v131;
        LODWORD(v132) = *(_DWORD *)(v67 + 8);
        uint64_t v68 = *(void *)(v15 + 32);
        uint64_t v133 = *(void *)v68;
        LODWORD(v134) = *(_DWORD *)(v68 + 8);
        v56 |= 4u;
        uint64_t v15 = v133;
        int v64 = *((unsigned __int16 *)v131 + 12);
        goto LABEL_84;
      }
LABEL_106:
      int v125 = v56;
      uint64_t v69 = v132;
      goto LABEL_107;
    }
  }
LABEL_65:
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  uint64_t v57 = *(void *)(a1 + 296);
  v128[0] = 0uLL;
  *(void *)a5 = sub_1CD7EBF14(v57, a6, (const llvm::APInt *)v128, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v58;
  uint64_t v39 = *(unsigned __int8 ***)&v128[0];
  if (!*(void *)&v128[0]) {
    return 1;
  }
  int v40 = **(unsigned char **)&v128[0];
  if ((v40 - 4) > 0x1E)
  {
    if ((v40 - 3) >= 0xFFFFFFFE) {
      uint64_t v60 = *(void *)&v128[0];
    }
    else {
      uint64_t v60 = 0;
    }
    if ((v40 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v61 = v60 + 8;
LABEL_75:
      unsigned int v131 = v128;
      uint64_t v62 = v61 + 16;
      unsigned int v63 = (unsigned __int8 ***)&v131;
LABEL_76:
      sub_1CC5FA668(v62, v63);
      return 1;
    }
    goto LABEL_143;
  }
  if ((*(unsigned char *)(*(void *)&v128[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v128[0] + 12))
  {
    uint64_t v118 = *(void *)(*(void *)&v128[0] + 16);
    if ((v118 & 4) != 0)
    {
      unint64_t v61 = v118 & 0xFFFFFFFFFFFFFFF8;
      if (v61) {
        goto LABEL_75;
      }
    }
  }
  return 1;
}

void sub_1CB9CEAC0()
{
}

uint64_t sub_1CB9CEAD4()
{
  return 1;
}

uint64_t sub_1CB9CEADC()
{
  return 0;
}

uint64_t sub_1CB9CEAE4()
{
  return 1;
}

uint64_t sub_1CB9CEAEC()
{
  return 24;
}

uint64_t sub_1CB9CEAF4()
{
  return 8;
}

uint64_t sub_1CB9CEAFC(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1CB9CEB04()
{
  return 1;
}

uint64_t sub_1CB9CEB0C()
{
  return 0;
}

uint64_t sub_1CB9CEB14(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return 1;
}

uint64_t sub_1CB9CEB24()
{
  return 1;
}

uint64_t sub_1CB9CEB2C()
{
  return 0;
}

uint64_t sub_1CB9CEB34()
{
  return 1;
}

uint64_t sub_1CB9CEB3C(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned int *a14, uint64_t a15, unsigned __int8 a16, __int32 a17)
{
  unsigned int v17 = a12 ^ 1;
  if (a5 == -1)
  {
    uint64_t v20 = 80;
    if (a13) {
      uint64_t v20 = 40;
    }
    uint64_t v19 = (char *)&unk_1CDAF5F14 + 120 * v17 + 20 * (a3 != 7) + v20 + ((2 * *a14) & 0x1FFFFFFFCLL);
  }
  else
  {
    a1.i32[0] = a17;
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(a1);
    v18.i16[0] = vaddlv_u8(v18);
    uint64_t v19 = (char *)&unk_1CDAF45E4
        + 3200 * a7
        + 1600 * v17
        + 320 * (v18.i32[0] - (a16 ^ 1))
        + 160 * (a13 ^ 1)
        + 16 * *a14
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

uint64_t sub_1CB9CEC14()
{
  return 0;
}

uint64_t sub_1CB9CEC1C()
{
  return 0;
}

uint64_t sub_1CB9CEC24(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1CB9CEC38(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB9CEC4C(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1CB9CEC60()
{
  return 417;
}

uint64_t sub_1CB9CEC68()
{
  return 0;
}

uint64_t sub_1CB9CEC70()
{
  return 0;
}

uint64_t sub_1CB9CEC78()
{
  return 1;
}

uint64_t sub_1CB9CEC80()
{
  return 0;
}

uint64_t sub_1CB9CEC88()
{
  return 0;
}

uint64_t sub_1CB9CEC90()
{
  return 3;
}

uint64_t sub_1CB9CEC98()
{
  return 0;
}

uint64_t sub_1CB9CECA0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 61)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(_DWORD *)(a2 + 4) == 3;
  }
  if (v2) {
    return 6;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CB9CECC0()
{
  return 0;
}

uint64_t sub_1CB9CECC8()
{
  return 1;
}

uint64_t sub_1CB9CECD0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2, 1)+ 24);
  }
  else {
    return dword_1CDB0CEA8[(int)a2 - 2];
  }
}

__int16 ***sub_1CB9CED34(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = &off_1E66A99E8[a2 - 1];
  if (!a3) {
    uint64_t v3 = &(&off_1E66A99C0)[a2 - 1];
  }
  return *v3;
}

uint64_t sub_1CB9CED64()
{
  return 0x1900000001;
}

uint64_t sub_1CB9CED70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 8) + 216))(*(void *)(a3 + 8), a3 + 128, a3);
    *(void *)(a3 + 48) = v5;
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 112);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8))
    {
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(void *)(v7 + 24);
          unint64_t v10 = &unk_1EBCBE000;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v24 = v9;
            uint64_t v25 = v5;
            int v23 = v8;
            int v20 = __cxa_guard_acquire(&qword_1EBCBE588);
            unint64_t v10 = &unk_1EBCBE000;
            int v8 = v23;
            int v21 = v20;
            uint64_t v9 = v24;
            uint64_t v5 = v25;
            if (v21)
            {
              unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v22 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v22;
              __cxa_guard_release(&qword_1EBCBE588);
              unint64_t v10 = (void *)&unk_1EBCBE000;
              int v8 = v23;
              uint64_t v9 = v24;
              uint64_t v5 = v25;
            }
          }
          unint64_t v11 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v10[176] ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v10[176] ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
          unsigned int v12 = (-348639895 * ((v11 >> 47) ^ v11)) ^ 0x616F6E73;
          int v13 = v8 - 1;
          for (int i = 1; ; ++i)
          {
            unsigned int v15 = v12 & v13;
            uint64_t v16 = v9 + 24 * v15;
            unsigned int v17 = *(void **)v16;
            if (*(void *)v16 == -1)
            {
              if ("samplesnoalias" == (char *)-1) {
                break;
              }
            }
            else if (v17 == (void *)-2)
            {
              if ("samplesnoalias" == (char *)-2) {
                break;
              }
            }
            else if (*(void *)(v16 + 8) == 14 {
                   && *v17 == 0x6E73656C706D6173
            }
                   && *(void *)((char *)v17 + 6) == 0x7361696C616F6E73)
            {
              break;
            }
            if (v17 == (void *)-1) {
              break;
            }
            unsigned int v12 = i + v15;
          }
        }
      }
    }
  }

  return sub_1CB9A15FC(v5, a2, a3);
}

uint64_t sub_1CB9CEFBC(uint64_t a1, int a2)
{
  return dword_1CDB0CED4[a2];
}

uint64_t sub_1CB9CEFCC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, char a6, uint64_t a7, int a8, char a9, uint64_t a10)
{
  if (*(unsigned char *)(a2 + 1)) {
    uint64_t v15 = 17301504;
  }
  else {
    uint64_t v15 = 0x80000;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3[1] + 16))(a3[1], *a3);
  int v17 = v16;
  BOOL v18 = *(unsigned char *)(v16 + 404) == 0;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    BOOL v22 = *(unsigned char *)(v16 + 297) == 0;
    uint64_t v23 = *a3;
    int v46 = 0;
    int v24 = sub_1CBA864D8(v16, v23, "SampleWriteCacheCtl", &v46);
    int v21 = v46;
    if (!v24) {
      int v21 = v22;
    }
  }
  else
  {
    uint64_t v19 = *a3;
    int v46 = 0;
    int v20 = sub_1CBA864D8(v16, v19, "SampleReadCacheCtl", &v46);
    int v21 = v46;
    if (!v20) {
      int v21 = 0;
    }
  }
  int v45 = v21;
  uint64_t v25 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    int v46 = 0;
    if (sub_1CBA864D8(v17, v25, "SampleWriteL2Pers", &v46)) {
      int v26 = v46;
    }
    else {
      int v26 = v18;
    }
  }
  else
  {
    int v46 = 0;
    if (sub_1CBA864D8(v17, v25, "SampleReadL2Pers", &v46)) {
      int v26 = v46;
    }
    else {
      int v26 = 1;
    }
  }
  int v27 = *(_DWORD *)(a2 + 4);
  if (v27 == 1)
  {
    uint64_t v30 = *(_DWORD *)(a2 + 56) != -1;
    goto LABEL_35;
  }
  if (v27 != 2)
  {
    if (*(_DWORD *)(a2 + 48) == -1 && !*(unsigned char *)(a2 + 60))
    {
      uint64_t v30 = 5;
      goto LABEL_35;
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a2 + 61) || *(_DWORD *)(a2 + 48) != -1)
  {
LABEL_27:
    if (*(_DWORD *)(a2 + 56) == -1) {
      uint64_t v30 = 6;
    }
    else {
      uint64_t v30 = 7;
    }
    goto LABEL_35;
  }
  int v28 = *(_DWORD *)(a2 + 52);
  int v29 = *(_DWORD *)(a2 + 56);
  if (v28 == -1 || v29 == -1)
  {
    BOOL v31 = v29 == -1;
    uint64_t v32 = 2;
    if (!v31) {
      uint64_t v32 = 3;
    }
    if (v28 == -1) {
      uint64_t v30 = v32;
    }
    else {
      uint64_t v30 = 4;
    }
  }
  else
  {
    uint64_t v30 = 8;
  }
LABEL_35:
  BOOL v33 = *(_DWORD *)(a2 + 64) != -1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a4);
  unint64_t v35 = v15 | ((a6 & 0xF) << 11) | (unint64_t)v30 | (16 * v33) | ((unint64_t)(result & 0xF) << 6) | ((unint64_t)(*(_DWORD *)(a2 + 80) != -1) << 10) | ((unint64_t)*(unsigned __int8 *)(a2 + 62) << 17);
  if (*(unsigned char *)(a2 + 62))
  {
    if (*(_DWORD *)(a2 + 84) == -1 || (a5 - 1) > 2) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = ((unint64_t)(a5 - 1) << 15) + 0x8000;
    }
    int v37 = a8;
    v35 |= v36;
  }
  else
  {
    int v37 = a8;
  }
  unint64_t v38 = v35 | ((unint64_t)(*(_DWORD *)(a2 + 48) != -1) << 18);
  if (v37) {
    v38 |= 0x200000uLL;
  }
  if (a9) {
    v38 |= 0x400000uLL;
  }
  if (*(unsigned char *)a2) {
    uint64_t v39 = v38 | 0x800000;
  }
  else {
    uint64_t v39 = v38;
  }
  unsigned int v40 = *(_DWORD *)(a10 + 8);
  if (v40 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v40) = v39;
  unsigned int v41 = *(_DWORD *)(a10 + 12);
  unsigned int v42 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v42;
  if (v42 >= v41) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v42) = v45 | (4 * v26);
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void sub_1CB9CF348(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4073;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB048;
}

void sub_1CB9CF418(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4077;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB080;
}

uint64_t sub_1CB9CF4E8()
{
  return 0;
}

uint64_t sub_1CB9CF4F0()
{
  return 1;
}

uint64_t sub_1CB9CF4F8()
{
  return 1;
}

uint64_t sub_1CB9CF500()
{
  return 0;
}

uint64_t sub_1CB9CF508()
{
  return 1;
}

uint64_t sub_1CB9CF510()
{
  return 0;
}

uint64_t sub_1CB9CF518()
{
  return 395;
}

BOOL sub_1CB9CF520(uint64_t a1, int a2)
{
  return a2 == 318;
}

uint64_t sub_1CB9CF52C()
{
  return 0;
}

uint64_t sub_1CB9CF534()
{
  return 0;
}

uint64_t sub_1CB9CF53C()
{
  return 0;
}

void sub_1CB9CF544()
{
}

uint64_t sub_1CB9CF558()
{
  return 1;
}

uint64_t sub_1CB9CF560(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t result = 0;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 > 0x22)
  {
    if (v8 == 36) {
      goto LABEL_11;
    }
    if (v8 != 35) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *(void *)(a2 + 80);
    unint64_t v10 = (void *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u) {
      unint64_t v10 = (void *)*v10;
    }
    *a4 = *v10;
    if (!a5) {
      return 1;
    }
    LOBYTE(result) = 0;
LABEL_21:
    *a5 = result;
    return 1;
  }
  if (v8 == 11) {
    goto LABEL_7;
  }
  if (v8 != 12) {
    return result;
  }
LABEL_11:
  uint64_t v11 = *(void *)(a2 + 80);
  int v13 = *(void **)(v11 + 32);
  unsigned int v12 = (llvm::detail::DoubleAPFloat *)(v11 + 32);
  if (v13 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (llvm::APInt *)&v17);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v12, (uint64_t)&v17);
  }
  int v14 = v17;
  BOOL v15 = v18 >= 0x41;
  if (v18 >= 0x41) {
    uint64_t v16 = v17;
  }
  else {
    uint64_t v16 = &v17;
  }
  *a4 = *v16;
  if (v15)
  {
    if (v14) {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
  }
  uint64_t result = 1;
  if (a5) {
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_1CB9CF660(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t result = 0;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 > 0x22)
  {
    if (v8 == 36) {
      goto LABEL_9;
    }
    if (v8 != 35) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *(void *)(a2 + 80);
    unsigned int v10 = *(_DWORD *)(v9 + 32);
    if (v10 > 0x40) {
      uint64_t v11 = **(void **)(v9 + 24);
    }
    else {
      uint64_t v11 = (uint64_t)(*(void *)(v9 + 24) << -(char)v10) >> -(char)v10;
    }
    *a4 = v11;
    if (!a5) {
      return 1;
    }
    LOBYTE(result) = 0;
LABEL_18:
    *a5 = result;
    return 1;
  }
  if (v8 == 11) {
    goto LABEL_7;
  }
  if (v8 != 12) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(void *)(a2 + 80);
  int v14 = *(void **)(v12 + 32);
  int v13 = (llvm::detail::DoubleAPFloat *)(v12 + 32);
  if (v14 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v13, (llvm::APInt *)&v15);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v13, (uint64_t)&v15);
  }
  if (v16 > 0x40)
  {
    *a4 = *v15;
    MEMORY[0x1D25D9CB0]();
  }
  else
  {
    *a4 = (uint64_t)((void)v15 << -(uint64_t)v16) >> -(uint64_t)v16;
  }
  uint64_t result = 1;
  if (a5) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1CB9CF77C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  unsigned int v10 = (uint64_t *)result;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, a4);
    LODWORD(v13) = v12;
    unsigned int v63 = -1;
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, unsigned int *, void))(*v10 + 152))(v10, v11, v12, &v63, 0);
    if ((v63 & 0x80000000) == 0) {
      int v14 = result;
    }
    else {
      int v14 = 0;
    }
    if (v14 | result ^ 1)
    {
      uint64_t v13 = v13;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = 0;
    }
  }
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(unsigned char *)(a2 + 61)) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = *(unsigned char *)(a2 + 60) == 0;
    }
    if (v15 && *(_DWORD *)(a2 + 48) == -1)
    {
      unsigned int v17 = *(_DWORD *)(a2 + 4);
      if (!v17) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10[1] + 224))(v10[1], a2);
      unsigned int v17 = result >> 1;
      if (!(result >> 1)) {
        goto LABEL_34;
      }
    }
    int v28 = 0;
    do
    {
      uint64_t v29 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 16))(v10, a4, (v28 + *(_DWORD *)(a2 + 72)));
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 80))(v10, v29, v30, a6, 0xFFFFFFFFLL);
      ++v28;
    }
    while (v17 != v28);
LABEL_34:
    if (v11)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v11, v13);
      unsigned int v32 = *(_DWORD *)(a6 + 8);
      if (v32 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v33 = (uint64_t *)(*(void *)a6 + 16 * v32);
      *BOOL v33 = result;
      v33[1] = v31;
      ++*(_DWORD *)(a6 + 8);
      int v34 = 12;
    }
    else
    {
      int v34 = 8;
    }
    goto LABEL_38;
  }
  unsigned int v18 = *(_DWORD *)(a2 + 76);
  unsigned int v19 = *(_DWORD *)(a2 + 68);
  if (v18 != -1 || v19 != -1)
  {
    if (v19 == -1) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = v19;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 16))(v10, a4, v21);
    uint64_t v24 = v22;
    if (*(_DWORD *)(a2 + 92) != -1)
    {
      unsigned int v63 = -1;
      unsigned __int8 v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, unsigned int *, void))(*v10 + 144))(v10, v23, v22, &v63, 0);
      if ((v25 & (v63 < 0xFF)) != 0) {
        int v26 = 7;
      }
      else {
        int v26 = 6;
      }
      *a5 = v26;
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v23, v24);
      goto LABEL_47;
    }
    if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 240))(v10, v23, v22) & 1) != 0
      || (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 224))(v10, v23, v24))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10[1] + 176))(v10[1])) {
        goto LABEL_44;
      }
    }
    else if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 248))(v10, v23, v24) & 1) == 0 {
           && !(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 232))(v10, v23, v24)
    }
           || (*(unsigned int (**)(uint64_t))(*(void *)v10[1] + 176))(v10[1]) != 2)
    {
LABEL_44:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const llvm::Twine *)1);
    }
    unsigned int v63 = -1;
    char v62 = 0;
    int v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, unsigned int *, char *))(*v10 + 144))(v10, v23, v24, &v63, &v62);
    uint64_t result = 0;
    if (v63) {
      int v38 = 1;
    }
    else {
      int v38 = v37 ^ 1;
    }
    if (v19 == -1) {
      int v39 = v38;
    }
    else {
      int v39 = 1;
    }
    if (((v37 ^ 1) & 1) == 0)
    {
      if (v11)
      {
        if (v39)
        {
          int v61 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, int *, void))(*v10 + 144))(v10, v11, v13, &v61, 0);
          if (result) {
            v63 |= v61 << 16;
          }
        }
      }
    }
    BOOL v40 = (v39 & ~result) != 1 || v11 == 0;
    int v60 = v39;
    if (v40)
    {
      if ((v37 & v39 | result) != 1) {
        goto LABEL_87;
      }
      unsigned int v41 = (void *)v10[4];
      if (*(_DWORD *)(v41[1] + 544) == 1) {
        goto LABEL_87;
      }
      uint64_t v42 = v63;
      uint64_t v43 = v41[43];
      if (((*(uint64_t (**)(uint64_t, void))(*(void *)v43 + 224))(v43, v63) & 0xFF00000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v43 + 376))(v43, 1);
        if (result == -1) {
          goto LABEL_87;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 232))(v43, v42, result);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 328))(v43, v42);
      }
      uint64_t v44 = *(uint64_t (**)(void))(*(void *)v10[1] + 56);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 176))(v10, v23, v24);
      if (result == -1) {
        goto LABEL_87;
      }
      unsigned int v45 = result;
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 176))(v10, v11, v13);
      if ((v45 & 3) != 0 || result == -1 || v45 > 0xFF || result != v45 + 2) {
        goto LABEL_87;
      }
      uint64_t v44 = *(uint64_t (**)(void))(*(void *)v10[1] + 56);
    }
    uint64_t result = v44();
    if (result != -1)
    {
      int v46 = v60;
      if (v11) {
        int v47 = v60;
      }
      else {
        int v47 = 0;
      }
      uint64_t v48 = *v10;
      uint64_t v49 = (_DWORD *)(a6 + 8);
      if (v47 == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v48 + 296))(v10, result);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v48 + 160))(v10, result);
      }
      uint64_t v55 = v50;
      unsigned int v59 = *(_DWORD *)(a6 + 8);
      if (v59 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v58 = 0;
      uint64_t v57 = (uint64_t *)(*(void *)a6 + 16 * v59);
      uint64_t *v57 = result;
      goto LABEL_93;
    }
LABEL_87:
    int v46 = v60;
    if (v60)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v23, v24);
      unsigned int v52 = *(_DWORD *)(a6 + 8);
      if (v52 >= *(_DWORD *)(a6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v53 = (uint64_t *)(*(void *)a6 + 16 * v52);
      *char v53 = result;
      v53[1] = v51;
      ++*(_DWORD *)(a6 + 8);
    }
    if (!v11)
    {
      int v58 = 1;
LABEL_95:
      if (v19 == -1)
      {
        if (v46)
        {
          if (v58)
          {
            if (v11) {
              int v34 = 11;
            }
            else {
              int v34 = 5;
            }
          }
          else if (v11)
          {
            int v34 = 10;
          }
          else
          {
            int v34 = 1;
          }
        }
        else if (v11)
        {
          int v34 = 9;
        }
        else
        {
          int v34 = 0;
        }
      }
      else if (v58)
      {
        int v34 = 6;
      }
      else
      {
        int v34 = 2;
      }
LABEL_38:
      *a5 = v34;
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v11, v13);
    uint64_t v55 = v54;
    unsigned int v56 = *(_DWORD *)(a6 + 8);
    uint64_t v49 = (_DWORD *)(a6 + 8);
    if (v56 >= *(_DWORD *)(a6 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v57 = (uint64_t *)(*(void *)a6 + 16 * v56);
    uint64_t *v57 = result;
    int v58 = 1;
LABEL_93:
    v57[1] = v55;
    ++*v49;
    goto LABEL_95;
  }
  if (*(_DWORD *)(a2 + 92) == -1)
  {
    if (!v11)
    {
      *a5 = 0;
      return result;
    }
    *a5 = 9;
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v11, v13);
  }
  else
  {
    *a5 = 7;
    uint64_t result = (*(uint64_t (**)(uint64_t *, void))(*v10 + 72))(v10, 0);
  }
LABEL_47:
  unsigned int v35 = *(_DWORD *)(a6 + 8);
  if (v35 >= *(_DWORD *)(a6 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v36 = (uint64_t *)(*(void *)a6 + 16 * v35);
  *unint64_t v36 = result;
  v36[1] = v27;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

uint64_t sub_1CB9D01D8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 64);
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1) {
    int v10 = 1;
  }
  else {
    int v10 = result;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || v11 != -1)
  {
    uint64_t v13 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[2];
    if (v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if (v11 == -1) {
        uint64_t v11 = *(unsigned int *)(a2 + 64);
      }
      uint64_t v15 = v13(a1, a3, v11);
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v15, v16);
    }
    else
    {
      uint64_t v17 = ((uint64_t (*)(void **, uint64_t))v13)(a1, a3);
      uint64_t v19 = v18;
      uint64_t v20 = ((uint64_t (*)(void **, uint64_t, void))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      uint64_t v22 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v20, v21);
      int v24 = v23;
      uint64_t v25 = ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[21])(a1, v17, v19);
      uint64_t v30 = v22;
      int v31 = v24;
      uint64_t v32 = v25;
      int v33 = v26;
      uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t *, uint64_t))(*a1)[12])(a1, a3, &v30, 2);
    }
    unsigned int v28 = *(_DWORD *)(a4 + 8);
    if (v28 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v29 = (uint64_t *)(*(void *)a4 + 16 * v28);
    uint64_t *v29 = result;
    v29[1] = v27;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

void sub_1CB9D045C()
{
}

uint64_t sub_1CB9D0470()
{
  return 0;
}

uint64_t sub_1CB9D0478(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, _DWORD *a14, uint64_t a15, int a16, __int32 a17)
{
  if (a5 == -1)
  {
    uint64_t v20 = 16;
    if (a13) {
      uint64_t v20 = 8;
    }
    uint64_t v19 = (char *)&unk_1CDAF5EE4 + 24 * (a12 ^ 1u) + 4 * (a3 != 7) + v20;
  }
  else
  {
    a1.i32[0] = a17;
    uint8x8_t v17 = (uint8x8_t)vcnt_s8(a1);
    v17.i16[0] = vaddlv_u8(v17);
    int v18 = *a14 - 1;
    if (!*a14) {
      int v18 = 0;
    }
    uint64_t v19 = (char *)&unk_1CDAF3FE4
        + 768 * a7
        + 384 * (a12 ^ 1)
        + 96 * (v17.i32[0] - 1)
        + 48 * (a13 ^ 1)
        + 16 * v18
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

void sub_1CB9D0540(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4072;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB048;
}

void sub_1CB9D0610(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 4075;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v8 = a2 | 0x100000000;
  v8[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66AB080;
}

uint64_t sub_1CB9D06E0(uint64_t result, uint64_t *a2)
{
  if ((*(_DWORD *)(result + 32) | 2) == 2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *a2;
    *(_DWORD *)(result + 8) = *(void *)(result + 8);
    uint64_t result = (uint64_t)sub_1CD7EBF14(*(void *)(v3 + 296), 0, (const llvm::APInt *)(a2 + 1), (llvm *)5, 0, 1, 0);
    *(void *)(v2 + 16) = result;
    *(_DWORD *)(v2 + 24) = v4;
    *(_DWORD *)(v2 + 32) = 1;
    uint64_t v5 = *(void *)v2;
    int v6 = *(unsigned __int16 *)(*(void *)v2 + 24);
    if (*(void *)v2 && v6 == 45)
    {
      if (*(_DWORD *)(v5 + 80) == 64) {
        *(_DWORD *)(v2 + 32) = 3;
      }
      *(_DWORD *)(v2 + 40) = dword_1CDB0CF08[*(int *)(v5 + 76) - 1];
    }
    else
    {
      if (v6 == 35) {
        *(_DWORD *)(v2 + 32) = 6;
      }
      long long v9 = *(_OWORD *)(*(void *)(v5 + 40) + 16 * *(unsigned int *)(v2 + 8));
      if ((_BYTE)v9) {
        uint64_t result = sub_1CB87E200((unsigned __int8 *)&v9);
      }
      else {
        uint64_t result = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v9);
      }
      if (v7 == 1)
      {
        uint64_t v8 = result;
        uint64_t result = v8;
      }
      *(_DWORD *)(v2 + 40) = result;
    }
  }
  return result;
}

BOOL sub_1CB9D0800(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)uint64_t v21 = *(_OWORD *)*(void *)(a2 + 40);
  if (v21[0]) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200(v21);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v21);
  }
  unsigned int v12 = ExtendedSizeInBits;
  if (v11 == 1) {
  if (v12 == 32 || v12 == 16)
  }
  {
    *(void *)a4 = a2;
    *(_DWORD *)(a4 + 8) = a3;
    uint64_t v15 = *(void *)(a1 + 296);
    *(_OWORD *)uint64_t v21 = 0uLL;
    *(void *)a5 = sub_1CD7EBF14(v15, 0, (const llvm::APInt *)v21, (llvm *)5, 0, 1, 0);
    *(_DWORD *)(a5 + 8) = v16;
    if (*(void *)v21)
    {
      int v17 = **(unsigned char **)v21;
      if ((v17 - 4) > 0x1E)
      {
        if ((v17 - 3) >= 0xFFFFFFFE) {
          uint64_t v20 = *(void *)v21;
        }
        else {
          uint64_t v20 = 0;
        }
        if ((v17 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v19 = v20 + 8;
LABEL_26:
          uint64_t v22 = v21;
          sub_1CC5FA668(v19 + 16, &v22);
          return v12 == 32 || v12 == 16;
        }
        if (v17 == 3) {
          *(void *)(*(void *)v21 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*(void *)v21 + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)v21 + 12))
      {
        uint64_t v18 = *(void *)(*(void *)v21 + 16);
        if ((v18 & 4) != 0)
        {
          unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
          if (v19) {
            goto LABEL_26;
          }
        }
      }
    }
  }
  return v12 == 32 || v12 == 16;
}

uint64_t sub_1CB9D095C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = a3;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  sub_1CD3FC878((uint64_t)v32, *(void *)(a1 + 296), (uint64_t)a2, a3, 0, 0, 0);
  int v10 = (unsigned __int8 **)a2[5];
  uint64_t v11 = *v10;
  unsigned int v12 = v10[1];
  if ((_BYTE)v11)
  {
    BOOL v13 = ((_BYTE)v11 - 75) < 0x2Du || ((_BYTE)v11 + 104) < 0x13u;
    BOOL v14 = ((_BYTE)v11 - 8) < 7u || v13;
    uint64_t v30 = v11;
    int v31 = v12;
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v30);
  }
  else
  {
    if ((*((_DWORD *)v12 + 2) & 0xFE) == 0x12) {
      unsigned int v17 = *(unsigned __int8 *)(**((void **)v12 + 2) + 8);
    }
    else {
      unsigned int v17 = *((_DWORD *)v12 + 2);
    }
    BOOL v14 = v17 < 7;
    uint64_t v30 = v11;
    int v31 = v12;
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
  }
  if (v16 == 1)
  {
    unsigned int v29 = ExtendedSizeInBits;
    unsigned int ExtendedSizeInBits = v29;
  }
  BOOL v18 = v33 < 4 && v14;
  if (!v18 || ExtendedSizeInBits != 32 && ExtendedSizeInBits != 16) {
    return 0;
  }
  uint64_t v20 = *(unsigned char **)(a1 + 480);
  if (v20[319]) {
    BOOL v21 = v20[338] == 0;
  }
  else {
    BOOL v21 = 0;
  }
  BOOL v22 = v21 || v20[326] != 0;
  sub_1CD3FCE48(a2, v7, (uint64_t)&v34, 0, 0, v22, *(void *)(a1 + 296));
  *(void *)a4 = v34;
  *(_DWORD *)(a4 + 8) = v35;
  uint64_t v23 = *(void *)(a1 + 296);
  uint64_t v30 = 0;
  int v31 = 0;
  *(void *)a5 = sub_1CD7EBF14(v23, 0, (const llvm::APInt *)&v30, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v24;
  if (v30)
  {
    int v25 = *v30;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        int v26 = v30;
      }
      else {
        int v26 = 0;
      }
      if ((v25 - 3) < 0xFFFFFFFE)
      {
        if (v25 == 3) {
          *((void *)v30 + 1) = 0;
        }
        return 1;
      }
      unint64_t v27 = (unint64_t)(v26 + 8);
    }
    else
    {
      if ((v30[1] & 0x7F) != 2 && !*((_DWORD *)v30 + 3)) {
        return 1;
      }
      uint64_t v28 = *((void *)v30 + 2);
      if ((v28 & 4) == 0) {
        return 1;
      }
      unint64_t v27 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v27) {
        return 1;
      }
    }
    unint64_t v36 = &v30;
    sub_1CC5FA668(v27 + 16, &v36);
  }
  return 1;
}

uint64_t sub_1CB9D0BAC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 184252;
  uint64_t v5 = (unsigned char *)(a1 + 40958);
  int v6 = (unsigned char *)(a1 + 33514);
  uint64_t v7 = a1 + 23020;
  uint64_t v8 = a1 + 18730;
  uint64_t v9 = a1 + 14448;
  uint64_t v10 = a1 + 4509;
  uint64_t v11 = sub_1CD80D0B0((llvm::TargetLoweringBase *)a1, (const llvm::TargetMachine *)a2);
  *(void *)uint64_t v11 = &unk_1F25F1420;
  *(void *)(v4 + 44) = a2 + 1328;
  *((void *)v11 + 18) = &off_1E66AB358;
  *((void *)v11 + 61) = &off_1E66AB358;
  int v12 = a2[1655];
  if (a2[1655]) {
    *(void *)(a1 + 856) = &off_1E66AB358;
  }
  *(void *)(a1 + 704) = &off_1E66AB080;
  *(void *)(a1 + 400) = &off_1E66AB080;
  *(void *)(a1 + 128) = &off_1E66AB048;
  *(void *)(a1 + 136) = &off_1E66AB080;
  *(void *)(a1 + 312) = &off_1E66AB048;
  *(void *)(a1 + 320) = &off_1E66AB080;
  *(void *)(a1 + 168) = &off_1E66AB048;
  *(void *)(a1 + 176) = &off_1E66AB080;
  *(unsigned char *)(v4 + 36) = 0;
  *(_DWORD *)(v4 + 8) = 4096;
  *(_DWORD *)(v4 + 28) = 4096;
  *(_DWORD *)uint64_t v4 = 4096;
  *(void *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = 1;
  *(unsigned char *)(v10 + 1875) = 2;
  *(unsigned char *)(v10 + 1485) = 0;
  *(unsigned char *)(v10 + 1095) = 2;
  *(unsigned char *)(v7 + 134) = 2;
  *(unsigned char *)(v8 + 914) = 2;
  *(unsigned char *)(v8 + 134) = 2;
  *(unsigned char *)(v10 + 2960) = 2;
  *(unsigned char *)(v10 + 3350) = 2;
  *(unsigned char *)(v10 + 3104) = 0;
  *(unsigned char *)(v10 + 3494) = 0;
  *(unsigned char *)(v10 + 3098) = 0;
  *(unsigned char *)(v10 + 3488) = 0;
  *(unsigned char *)(v10 + 3100) = 0;
  *(unsigned char *)(v10 + 3490) = 0;
  if (v12)
  {
    *(unsigned char *)(v10 + 3099) = 0;
    *(unsigned char *)(v10 + 3489) = 0;
  }
  *(_WORD *)(v10 + 3109) = 0;
  *(_WORD *)(v10 + 3499) = 0;
  *(unsigned char *)(v10 + 2962) = 4;
  *(unsigned char *)(v10 + 3352) = 4;
  *(unsigned char *)(v10 + 3092) = 4;
  *(unsigned char *)(v10 + 3482) = 4;
  *(unsigned char *)(v10 + 3115) = 2;
  *(unsigned char *)(v10 + 3505) = 2;
  *(unsigned char *)(v10 + 2875) = 0;
  *(unsigned char *)(v10 + 3265) = 0;
  *int v6 = 0;
  *(_WORD *)(v10 + 731) = 1028;
  *(_WORD *)(v8 + 160) = 514;
  *(_WORD *)(v7 + 160) = 514;
  *(_WORD *)(v10 + 1901) = 514;
  *(_WORD *)(v9 + 146) = 514;
  *(unsigned char *)(v8 + 155) = 2;
  *(unsigned char *)(v8 + 154) = 2;
  *(_WORD *)(v7 + 154) = 514;
  *(_WORD *)(v10 + 1895) = 1028;
  *(_WORD *)(v10 + 1498) = 1028;
  *(unsigned char *)(v10 + 1500) = 4;
  *(unsigned char *)(v9 + 97) = 4;
  *(unsigned char *)(v9 + 487) = 4;
  *(unsigned char *)(v8 + 105) = 4;
  v6[141] = 4;
  *(unsigned char *)(v7 + 105) = 4;
  v5[107] = 4;
  *(unsigned char *)(v10 + 3055) = 4;
  *(unsigned char *)(v10 + 3445) = 4;
  *(unsigned char *)(v10 + 715) = 4;
  *(unsigned char *)(v10 + 1105) = 4;
  *(unsigned char *)(v10 + 1495) = 4;
  *(unsigned char *)(v10 + 1885) = 4;
  v6[180] = 4;
  *(unsigned char *)(v8 + 144) = 4;
  *(unsigned char *)(v7 + 144) = 4;
  v5[146] = 4;
  *(unsigned char *)(v10 + 3053) = 2;
  *(unsigned char *)(v9 + 134) = 2;
  v6[178] = 2;
  v5[144] = 2;
  *(unsigned char *)(v8 + 142) = 2;
  *(unsigned char *)(v10 + 3443) = 2;
  *(_WORD *)(v10 + 1102) = 514;
  *(_WORD *)(v10 + 1492) = 514;
  *(unsigned char *)(v10 + 1882) = 4;
  *(unsigned char *)(v10 + 707) = 2;
  *(unsigned char *)(v10 + 1097) = 2;
  *(unsigned char *)(v10 + 1487) = 2;
  *(unsigned char *)(v10 + 1877) = 4;
  *(_WORD *)(v10 + 711) = 514;
  *(unsigned char *)(v10 + 1101) = 2;
  *(unsigned char *)(v10 + 1491) = 2;
  *(unsigned char *)(v10 + 706) = 2;
  *(unsigned char *)(v10 + 1096) = 2;
  *(unsigned char *)(v10 + 1486) = 2;
  *(unsigned char *)(v10 + 708) = 2;
  *(unsigned char *)(v10 + 1106) = 2;
  *(unsigned char *)(v10 + 3056) = 2;
  *(unsigned char *)(v9 + 137) = 2;
  *(unsigned char *)(v10 + 1496) = 2;
  *(unsigned char *)(v10 + 3446) = 2;
  v6[181] = 2;
  v5[147] = 2;
  *(unsigned char *)(v8 + 145) = 2;
  *(unsigned char *)(v10 + 1886) = 4;
  *(unsigned char *)(v10 + 1751) = 4;
  uint64_t v13 = *(void *)(v4 + 44);
  int v14 = *(unsigned __int8 *)(v13 + 357);
  if (*(unsigned char *)(v13 + 357)) {
    char v15 = 4;
  }
  else {
    char v15 = 2;
  }
  *(unsigned char *)(v10 + 1463) = v15;
  *(unsigned char *)(v10 + 1462) = v15;
  *(unsigned char *)(v10 + 1371) = 2;
  *(unsigned char *)(v10 + 1091) = 2;
  *(unsigned char *)(v10 + 1481) = 2;
  *(unsigned char *)(v10 + 1871) = 2;
  *(unsigned char *)(v10 + 1092) = 1;
  *(unsigned char *)(v10 + 1872) = 2;
  *(unsigned char *)(v9 + 483) = 4;
  *(unsigned char *)(v10 + 1844) = 4;
  *(unsigned char *)(v9 + 95) = 4;
  v6[139] = 4;
  v5[105] = 4;
  *(unsigned char *)(v8 + 103) = 4;
  *(unsigned char *)(v10 + 3097) = 0;
  *(unsigned char *)(v10 + 3487) = 0;
  *(unsigned char *)(v10 + 3087) = 4;
  *(unsigned char *)(v10 + 3477) = 4;
  *(unsigned char *)(v10 + 3094) = 0;
  *(unsigned char *)(v10 + 3484) = 0;
  *(unsigned char *)(v10 + 3096) = 4;
  *(unsigned char *)(v10 + 3486) = 4;
  *(unsigned char *)(v10 + 3093) = 4;
  *(unsigned char *)(v10 + 3483) = 4;
  *(unsigned char *)(v10 + 2) = 2;
  *(unsigned char *)(v10 + 783) = 1;
  *(unsigned char *)(v10 + 1173) = 0;
  *(unsigned char *)(v10 + 1563) = 0;
  *(unsigned char *)(v10 + 3123) = 0;
  *(unsigned char *)(v10 + 3513) = 0;
  *(unsigned char *)(v10 + 1953) = 4;
  *(unsigned char *)(v10 + 1) = 2;
  *(unsigned char *)uint64_t v10 = 2;
  *(unsigned char *)(v10 + 1316) = 4;
  *(unsigned char *)(v10 + 1706) = 4;
  *(unsigned char *)uint64_t v8 = 4;
  *(unsigned char *)(v8 + 780) = 4;
  *(unsigned char *)uint64_t v7 = 4;
  *(unsigned char *)(v7 + 780) = 4;
  v6[36] = 4;
  v6[816] = 4;
  void v5[2] = 4;
  v5[782] = 4;
  *(unsigned char *)(v10 + 1740) = 4;
  v6[35] = 4;
  *(unsigned char *)(v8 + 779) = 4;
  v6[815] = 4;
  v5[1] = 4;
  v5[781] = 4;
  *(unsigned char *)(v7 + 779) = 4;
  *(unsigned char *)(v10 + 179) = 4;
  *(unsigned char *)(v10 + 959) = 4;
  v6[34] = 4;
  *(unsigned char *)(v8 + 778) = 4;
  v6[814] = 4;
  *uint64_t v5 = 4;
  v5[780] = 4;
  *(unsigned char *)(v7 + 778) = 4;
  *(unsigned char *)(v10 + 3006) = 0;
  *(unsigned char *)(v10 + 3396) = 0;
  if (!*(unsigned char *)(v13 + 327))
  {
    *(unsigned char *)(v10 + 3099) = 4;
    *(unsigned char *)(v10 + 3489) = 4;
  }
  v5[100] = 0;
  v5[880] = 4;
  *(_WORD *)uint64_t v9 = 514;
  *(_WORD *)(v9 + 390) = 514;
  *(_WORD *)(v8 + 8) = 514;
  *(_WORD *)(v7 + 8) = 514;
  if (v14) {
    *(_WORD *)(v10 + 1749) = 1028;
  }
  *(unsigned char *)(v10 + 1762) = 2;
  *(unsigned char *)(v10 + 1372) = 2;
  *(unsigned char *)(v10 + 982) = 2;
  *(unsigned char *)(v9 + 2) = 2;
  *(unsigned char *)(v9 + 392) = 2;
  *(unsigned char *)(v8 + 10) = 2;
  *(unsigned char *)(v7 + 10) = 2;
  *(unsigned char *)(v10 + 1480) = 0;
  *(unsigned char *)(v9 + 121) = 2;
  *(unsigned char *)(v9 + 511) = 2;
  *(unsigned char *)(v8 + 129) = 2;
  *(unsigned char *)(v7 + 129) = 2;
  *(_WORD *)(v9 + 119) = 514;
  *(_WORD *)(v9 + 509) = 514;
  *(_WORD *)(v8 + 127) = 514;
  *(_WORD *)(v7 + 127) = 514;
  if (v14) {
    *(unsigned char *)(v10 + 1868) = 4;
  }
  *(unsigned char *)(v9 + 137) = 2;
  *(unsigned char *)(v9 + 527) = 2;
  *(unsigned char *)(v8 + 145) = 2;
  *(unsigned char *)(v7 + 145) = 2;
  *(unsigned char *)(v9 + 148) = 2;
  *(unsigned char *)(v9 + 538) = 2;
  *(unsigned char *)(v8 + 156) = 2;
  *(unsigned char *)(v7 + 156) = 2;
  *(unsigned char *)(v10 + 337) = 4;
  *(unsigned char *)(v10 + 727) = 4;
  *(unsigned char *)(v10 + 1117) = 4;
  *(unsigned char *)(v10 + 1507) = 4;
  *(unsigned char *)(v10 + 1897) = 4;
  *(_DWORD *)(v9 + 142) = 33686018;
  *(_DWORD *)(a1 + 14980) = 33686018;
  *(_DWORD *)(v8 + 150) = 33686018;
  *(_DWORD *)(v7 + 150) = 33686018;
  *(_WORD *)(v10 + 1864) = 1028;
  *(unsigned char *)(v10 + 1866) = 4;
  *(_WORD *)(v10 + 1072) = 514;
  int v16 = *(unsigned char **)(v4 + 44);
  if (v16[357]) {
    *(unsigned char *)(v10 + 1891) = 4;
  }
  char v17 = 0;
  uint64_t v18 = 0;
  *(unsigned char *)(v10 + 1356) = 4;
  *(unsigned char *)(v9 + 115) = 4;
  *(unsigned char *)(v9 + 505) = 4;
  *(unsigned char *)(v8 + 123) = 4;
  *(_WORD *)(v9 + 116) = 1028;
  *(_WORD *)(v9 + 506) = 1028;
  *(unsigned char *)(v10 + 1892) = 2;
  *(unsigned char *)(v10 + 1883) = 2;
  *(unsigned char *)(v7 + 123) = 2;
  *(_WORD *)(v8 + 124) = 1028;
  *(_WORD *)(v7 + 124) = 514;
  v5[169] = 2;
  v6[200] = 2;
  __int16 v35 = 24396;
  do
  {
    uint64_t v19 = 0;
    char v20 = v17;
    unsigned int v21 = *((unsigned __int8 *)&v35 + v18);
    do
      *(unsigned char *)(a1 + 390 * v21 + dword_1CDB0D010[v19++] + 3862) = 2;
    while (v19 != 32);
    char v17 = 1;
    uint64_t v18 = 1;
  }
  while ((v20 & 1) == 0);
  *(unsigned char *)(v10 + 27) = 0;
  uint64_t v22 = 177;
  uint64_t v23 = 74032;
  do
  {
    *(_WORD *)(a1 + v23) = *(_WORD *)(a1 + v23) & 0xF | 0x2220;
    v23 += 360;
    --v22;
  }
  while (v22);
  *(_WORD *)(a1 + 77270) &= 0xFF0Fu;
  *(_WORD *)(a1 + 107834) &= 0xFF0Fu;
  *(_WORD *)(a1 + 108550) &= 0xFF0Fu;
  uint64_t v24 = 170;
  uint64_t v25 = 137934;
  *(void *)&long long v26 = 0x202020202020202;
  *((void *)&v26 + 1) = 0x202020202020202;
  do
  {
    unint64_t v27 = (_OWORD *)(a1 + v25);
    *(_OWORD *)((char *)v27 + 154) = v26;
    v27[8] = v26;
    v27[9] = v26;
    v27[6] = v26;
    v27[7] = v26;
    v27[4] = v26;
    v27[5] = v26;
    _OWORD v27[2] = v26;
    v27[3] = v26;
    v25 += 179;
    *unint64_t v27 = v26;
    v27[1] = v26;
    --v24;
  }
  while (v24);
  uint64_t v28 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(unsigned char *))(*(void *)v16 + 176))(v16);
  llvm::TargetLoweringBase::computeRegisterProperties((llvm::TargetLoweringBase *)a1, v28);
  *(_DWORD *)(a1 + 64) = 1;
  llvm::TargetLoweringBase::setJumpIsExpensive(a1, 1);
  *(unsigned char *)(a1 + 173982) |= 7u;
  char v29 = *(unsigned char *)(a1 + 173993);
  char v30 = *(unsigned char *)(a1 + 174011);
  char v31 = *(unsigned char *)(a1 + 174012);
  *(unsigned char *)(a1 + 174013) |= 3u;
  *(unsigned char *)(a1 + 174012) = v31 | 0xFB;
  *(unsigned char *)(a1 + 174011) = v30 | 0xFC;
  *(unsigned char *)(a1 + 174006) |= 0x60u;
  *(unsigned char *)(a1 + 173977) |= 8u;
  char v32 = *(unsigned char *)(a1 + 173987);
  char v33 = *(unsigned char *)(a1 + 173980);
  *(unsigned char *)(a1 + 173981) |= 1u;
  *(unsigned char *)(a1 + 173980) = v33 | 0xC0;
  *(unsigned char *)(a1 + 174004) |= 4u;
  *(unsigned char *)(a1 + 173976) |= 0x80u;
  *(unsigned char *)(a1 + 173992) |= 0x20u;
  *(unsigned char *)(a1 + 173987) = v32 | 0xD;
  *(unsigned char *)(a1 + 174005) |= 0xC0u;
  *(unsigned char *)(a1 + 173993) = v29 | 0x9C;
  *(int8x8_t *)(a1 + 173996) = vorr_s8(*(int8x8_t *)(a1 + 173996), (int8x8_t)0x81C1931E03800BB8);
  *(unsigned char *)(a1 + 173975) |= 0x10u;
  return a1;
}

uint64_t *sub_1CB9D1380(uint64_t a1, uint64_t a2, llvm::APFloatBase *a3, unsigned int a4, unsigned __int8 a5)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  char v9 = a5;
  char v48 = a5;
  uint64_t v10 = a2;
  uint64_t v11 = *(unsigned __int8 **)(a1 + 64);
  int v46 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v46, v11, 2);
  }
  int v47 = *(_DWORD *)(a1 + 60);
  uint64_t v50 = v52;
  uint64_t v51 = 0x400000000;
  LOBYTE(v49) = *(void *)(*(void *)(a1 + 40) + 16 * v10);
  unsigned __int8 v45 = sub_1CB8C2FBC((unsigned __int8 *)&v49);
  if (a4)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (llvm *)v45;
      int v14 = sub_1CD7EBF14((uint64_t)a3, v12, (const llvm::APInt *)&v46, (llvm *)5, 0, 0, 0);
      uint64_t v17 = *((void *)a3 + 104);
      if (v17) {
        LOWORD(v17) = *(_WORD *)(v17 + 8);
      }
      uint64_t v18 = sub_1CCFDED5C((uint64_t)a3, 148, (const llvm::APInt *)&v46, v13, 0, a1, a2, v16, (uint64_t)v14, v15, v17);
      unint64_t v20 = v19;
      unint64_t v22 = sub_1CB87E200(&v45);
      if (v21 == 1) {
      unint64_t v24 = sub_1CB87E200((unsigned __int8 *)&v48);
      }
      if (v23 == 1) {
      if (v22 > v24)
      }
      {
        if ((v45 - 75) >= 0x2Du
          && (v45 - 8) >= 7u
          && (v45 + 104) >= 0x13u)
        {
          uint64_t v27 = 201;
        }
        else
        {
          uint64_t v27 = 236;
        }
        uint64_t v28 = *((void *)a3 + 104);
        if (v28) {
          __int16 v29 = *(_WORD *)(v28 + 8);
        }
        else {
          __int16 v29 = 0;
        }
        uint64_t v18 = sub_1CD7F3564(a3, (const char *)v27, (uint64_t)&v46, (llvm *)v48, 0, (uint64_t)v18, (void *)v20, v29);
        unint64_t v20 = v20 & 0xFFFFFFFF00000000 | v30;
      }
      if (v51 >= (unint64_t)HIDWORD(v51)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v31 = (uint64_t **)((char *)v50 + 16 * v51);
      unsigned __int8 *v31 = v18;
      v31[1] = (uint64_t *)v20;
      LODWORD(v51) = v51 + 1;
      ++v12;
    }
    while (a4 != v12);
    char v9 = v48;
  }
  char v32 = v50;
  uint64_t v43 = v46;
  if (v46) {
    llvm::MetadataTracking::track((uint64_t)&v43, v46, 2);
  }
  int v44 = v47;
  char v33 = sub_1CD41A028(v32, a4, v9, (uint64_t)a3, (const llvm::APInt *)&v43);
  if (v43)
  {
    int v34 = *v43;
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        int v37 = v43;
      }
      else {
        int v37 = 0;
      }
      if ((v34 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_47:
        uint64_t v49 = &v43;
        sub_1CC5FA668(v38 + 16, &v49);
        goto LABEL_35;
      }
      if (v34 == 3) {
        *((void *)v43 + 1) = 0;
      }
    }
    else if ((v43[1] & 0x7F) == 2 || *((_DWORD *)v43 + 3))
    {
      uint64_t v41 = *((void *)v43 + 2);
      if ((v41 & 4) != 0)
      {
        unint64_t v38 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v38) {
          goto LABEL_47;
        }
      }
    }
  }
LABEL_35:
  if (v50 != v52) {
    free(v50);
  }
  if (v46)
  {
    int v35 = *v46;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        int v39 = v46;
      }
      else {
        int v39 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = (unint64_t)(v39 + 8);
LABEL_53:
        uint64_t v50 = &v46;
        sub_1CC5FA668(v40 + 16, &v50);
        return v33;
      }
      if (v35 == 3) {
        *((void *)v46 + 1) = 0;
      }
    }
    else if ((v46[1] & 0x7F) == 2 || *((_DWORD *)v46 + 3))
    {
      uint64_t v42 = *((void *)v46 + 2);
      if ((v42 & 4) != 0)
      {
        unint64_t v40 = v42 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_53;
        }
      }
    }
  }
  return v33;
}

uint64_t sub_1CB9D1740(uint64_t a1, unsigned int a2, int a3)
{
  if ((a3 & 0xFFFFFFFB) == 3) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 1;
  }
  unsigned int v18 = v5;
  uint64_t v6 = **(void **)(a1 + 8);
  if (*(unsigned char *)(**(void **)(a1 + 16) + 327)) {
    int v7 = 8261;
  }
  else {
    int v7 = 8260;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned __int8 **)v8;
  uint64_t v16 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v16, v9, 2);
  }
  int v17 = *(_DWORD *)(v8 + 8);
  uint64_t result = (uint64_t)sub_1CD40A284(v6, v7, (uint64_t)&v16, a2, &v18, **(_OWORD ***)(a1 + 32));
  **(void **)a1 = result;
  if (v16)
  {
    int v11 = *v16;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v13 = v16;
      }
      else {
        uint64_t v13 = 0;
      }
      if ((v11 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v14 = (unint64_t)(v13 + 8);
LABEL_19:
        unint64_t v19 = &v16;
        uint64_t result = sub_1CC5FA668(v14 + 16, &v19);
        goto LABEL_13;
      }
      if (v11 == 3) {
        *((void *)v16 + 1) = 0;
      }
    }
    else if ((v16[1] & 0x7F) == 2 || *((_DWORD *)v16 + 3))
    {
      uint64_t v15 = *((void *)v16 + 2);
      if ((v15 & 4) != 0)
      {
        unint64_t v14 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (v14) {
          goto LABEL_19;
        }
      }
    }
  }
LABEL_13:
  uint64_t v12 = **(void **)(a1 + 32);
  *(void *)uint64_t v12 = **(void **)a1;
  *(_DWORD *)(v12 + 8) = 0;
  return result;
}

uint64_t sub_1CB9D1890(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  if (*(unsigned char *)(**(void **)(a1 + 16) + 327)) {
    int v3 = 502;
  }
  else {
    int v3 = 501;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int8 **)v4;
  uint64_t v12 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v12, v5, 2);
  }
  int v13 = *(_DWORD *)(v4 + 8);
  uint64_t result = (uint64_t)sub_1CD3FF88C(v2, v3, (uint64_t)&v12, 1u, **(_OWORD ***)(a1 + 32));
  **(void **)a1 = result;
  if (v12)
  {
    int v7 = *v12;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        char v9 = v12;
      }
      else {
        char v9 = 0;
      }
      if ((v7 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_16:
        unint64_t v14 = &v12;
        uint64_t result = sub_1CC5FA668(v10 + 16, &v14);
        goto LABEL_10;
      }
      if (v7 == 3) {
        *((void *)v12 + 1) = 0;
      }
    }
    else if ((v12[1] & 0x7F) == 2 || *((_DWORD *)v12 + 3))
    {
      uint64_t v11 = *((void *)v12 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_10:
  uint64_t v8 = **(void **)(a1 + 32);
  *(void *)uint64_t v8 = **(void **)a1;
  *(_DWORD *)(v8 + 8) = 0;
  return result;
}

uint64_t sub_1CB9D19BC(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  if (*(unsigned char *)(**(void **)(a1 + 16) + 327)) {
    int v3 = 506;
  }
  else {
    int v3 = 505;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int8 **)v4;
  uint64_t v12 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v12, v5, 2);
  }
  int v13 = *(_DWORD *)(v4 + 8);
  uint64_t result = (uint64_t)sub_1CD3FF88C(v2, v3, (uint64_t)&v12, 1u, **(_OWORD ***)(a1 + 32));
  **(void **)a1 = result;
  if (v12)
  {
    int v7 = *v12;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        char v9 = v12;
      }
      else {
        char v9 = 0;
      }
      if ((v7 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_16:
        unint64_t v14 = &v12;
        uint64_t result = sub_1CC5FA668(v10 + 16, &v14);
        goto LABEL_10;
      }
      if (v7 == 3) {
        *((void *)v12 + 1) = 0;
      }
    }
    else if ((v12[1] & 0x7F) == 2 || *((_DWORD *)v12 + 3))
    {
      uint64_t v11 = *((void *)v12 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_10:
  uint64_t v8 = **(void **)(a1 + 32);
  *(void *)uint64_t v8 = **(void **)a1;
  *(_DWORD *)(v8 + 8) = 0;
  return result;
}

uint64_t sub_1CB9D1AE8(uint64_t a1, unsigned int a2, int a3)
{
  if ((a3 & 0xFFFFFFFB) == 3) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 1;
  }
  unsigned int v19 = v5;
  uint64_t v6 = **(void **)(a1 + 8);
  uint64_t v7 = **(void **)(a1 + 16);
  if (*(unsigned char *)(v7 + 327))
  {
    int v8 = 8263;
  }
  else if (*(unsigned char *)(v7 + 325))
  {
    int v8 = 8264;
  }
  else
  {
    int v8 = 8262;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(unsigned __int8 **)v9;
  int v17 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v17, v10, 2);
  }
  int v18 = *(_DWORD *)(v9 + 8);
  uint64_t result = (uint64_t)sub_1CD40A284(v6, v8, (uint64_t)&v17, a2, &v19, **(_OWORD ***)(a1 + 32));
  **(void **)a1 = result;
  if (v17)
  {
    int v12 = *v17;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        unint64_t v14 = v17;
      }
      else {
        unint64_t v14 = 0;
      }
      if ((v12 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = (unint64_t)(v14 + 8);
LABEL_21:
        unint64_t v20 = &v17;
        uint64_t result = sub_1CC5FA668(v15 + 16, &v20);
        goto LABEL_15;
      }
      if (v12 == 3) {
        *((void *)v17 + 1) = 0;
      }
    }
    else if ((v17[1] & 0x7F) == 2 || *((_DWORD *)v17 + 3))
    {
      uint64_t v16 = *((void *)v17 + 2);
      if ((v16 & 4) != 0)
      {
        unint64_t v15 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_15:
  uint64_t v13 = **(void **)(a1 + 32);
  *(void *)uint64_t v13 = **(void **)a1;
  *(_DWORD *)(v13 + 8) = 0;
  return result;
}

uint64_t sub_1CB9D1C4C(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  if (*(unsigned char *)(**(void **)(a1 + 16) + 327)) {
    int v3 = 510;
  }
  else {
    int v3 = 509;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int8 **)v4;
  int v12 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v12, v5, 2);
  }
  int v13 = *(_DWORD *)(v4 + 8);
  uint64_t result = (uint64_t)sub_1CD3FF88C(v2, v3, (uint64_t)&v12, 1u, **(_OWORD ***)(a1 + 32));
  **(void **)a1 = result;
  if (v12)
  {
    int v7 = *v12;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        uint64_t v9 = v12;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v7 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_16:
        unint64_t v14 = &v12;
        uint64_t result = sub_1CC5FA668(v10 + 16, &v14);
        goto LABEL_10;
      }
      if (v7 == 3) {
        *((void *)v12 + 1) = 0;
      }
    }
    else if ((v12[1] & 0x7F) == 2 || *((_DWORD *)v12 + 3))
    {
      uint64_t v11 = *((void *)v12 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_10:
  uint64_t v8 = **(void **)(a1 + 32);
  *(void *)uint64_t v8 = **(void **)a1;
  *(_DWORD *)(v8 + 8) = 0;
  return result;
}

uint64_t sub_1CB9D1D78(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  if (*(unsigned char *)(**(void **)(a1 + 16) + 327)) {
    int v3 = 2429;
  }
  else {
    int v3 = 2428;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int8 **)v4;
  int v12 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v12, v5, 2);
  }
  int v13 = *(_DWORD *)(v4 + 8);
  uint64_t result = (uint64_t)sub_1CD3FF88C(v2, v3, (uint64_t)&v12, 1u, **(_OWORD ***)(a1 + 32));
  **(void **)a1 = result;
  if (v12)
  {
    int v7 = *v12;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        uint64_t v9 = v12;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v7 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_16:
        unint64_t v14 = &v12;
        uint64_t result = sub_1CC5FA668(v10 + 16, &v14);
        goto LABEL_10;
      }
      if (v7 == 3) {
        *((void *)v12 + 1) = 0;
      }
    }
    else if ((v12[1] & 0x7F) == 2 || *((_DWORD *)v12 + 3))
    {
      uint64_t v11 = *((void *)v12 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_10:
  uint64_t v8 = **(void **)(a1 + 32);
  *(void *)uint64_t v8 = **(void **)a1;
  *(_DWORD *)(v8 + 8) = 0;
  return result;
}

BOOL sub_1CB9D1EA4(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 - 11) >= 0x1A || ((0x3000003u >> (v6 - 11)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
      return 0;
    }
    int v8 = 1;
    uint64_t v9 = *(void *)(a1 + 48);
    do
    {
      if (*(_DWORD *)(v9 + 8) == a2)
      {
        if (!v8) {
          goto LABEL_10;
        }
        --v8;
      }
      uint64_t v9 = *(void *)(v9 + 32);
    }
    while (v9);
    if (!v8) {
      goto LABEL_18;
    }
LABEL_10:
    if (!a4) {
      return 0;
    }
    int v10 = 2;
    do
    {
      if (!*(_DWORD *)(v7 + 8))
      {
        if (!v10) {
          return 0;
        }
        --v10;
      }
      uint64_t v7 = *(void *)(v7 + 32);
    }
    while (v7);
    if (v10) {
      return 0;
    }
LABEL_18:
    if (v6 == 395) {
      char v12 = a3;
    }
    else {
      char v12 = 0;
    }
    BOOL result = 1;
    if ((v12 & 1) != 0 || (v6 - 401) < 4) {
      return result;
    }
    if (sub_1CD406AAC(v6)) {
      return 1;
    }
    if (v6 > 211)
    {
      if (v6 != 212) {
        return v6 == 215 && (a3 & 1) != 0;
      }
      if (a3) {
        return 1;
      }
      unsigned int v19 = *(uint64_t **)(a1 + 32);
      uint64_t v14 = *v19;
      uint64_t v15 = v19[1];
      uint64_t v16 = 0;
    }
    else
    {
      if (v6 == 46)
      {
        uint64_t v17 = *(void *)(**(void **)(a1 + 32) + 80);
        int v18 = (void *)(v17 + 24);
        if (*(_DWORD *)(v17 + 32) >= 0x41u) {
          int v18 = (void *)*v18;
        }
        return *v18 == 2131;
      }
      if (v6 != 192) {
        return 0;
      }
      int v13 = *(void **)(a1 + 32);
      if (!sub_1CB9D1EA4(v13[10], v13[11], a3, 0)) {
        return 0;
      }
      uint64_t v14 = v13[15];
      uint64_t v15 = v13[16];
      uint64_t v16 = a3;
    }
    if ((sub_1CB9D1EA4(v14, v15, v16, 0) & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CB9D201C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, void *a8, uint64_t a9, void *a10, unsigned int a11, uint64_t *a12, unsigned __int8 a13)
{
  unsigned int v21 = (uint64_t *)a9;
  int v20 = (int)a10;
  unint64_t v22 = a12;
  uint64_t v304 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v292 = v23;
  if (v23) {
    llvm::MetadataTracking::track((uint64_t)&v292, v23, 2);
  }
  int v24 = a13;
  int v293 = *(_DWORD *)(a2 + 60);
  uint64_t v25 = (llvm **)(*(void *)(a7 + 40) + 16 * a8);
  long long v26 = *v25;
  uint64_t v27 = (uint64_t)v25[1];
  int v28 = *v25;
  uint64_t v289 = a5;
  if (v28 != 4 || *(unsigned char *)(*(void *)(a3 + 40) + 16 * a4) != 5) {
    goto LABEL_51;
  }
  int v29 = *(unsigned __int16 *)(a5 + 24);
  if (v29 == 35 || v29 == 11) {
    uint64_t v30 = a5;
  }
  else {
    uint64_t v30 = 0;
  }
  int v31 = *(unsigned __int16 *)(a7 + 24);
  if (v31 == 35 || v31 == 11) {
    uint64_t v32 = a7;
  }
  else {
    uint64_t v32 = 0;
  }
  int v33 = *(unsigned __int16 *)(a9 + 24);
  if (v33 == 35 || v33 == 11) {
    uint64_t v35 = a9;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v31 == 201)
  {
    uint64_t v36 = *(void *)(a7 + 32);
    if (*(void *)v36 == a3 && *(_DWORD *)(v36 + 8) == a4) {
      goto LABEL_43;
    }
    if (*(void *)v36 == a5 && *(_DWORD *)(v36 + 8) == a6) {
      goto LABEL_43;
    }
  }
  if (!v32 || !v30) {
    goto LABEL_51;
  }
  uint64_t v37 = *(void *)(v32 + 80);
  unint64_t v38 = (uint64_t *)(v37 + 24);
  uint64_t v39 = *(unsigned int *)(v37 + 32);
  unint64_t v40 = v38;
  if (v39 >= 0x41) {
    unint64_t v40 = (uint64_t *)*v38;
  }
  uint64_t v41 = *v40;
  uint64_t v42 = *(void *)(v30 + 80);
  uint64_t v43 = (void *)(v42 + 24);
  if (*(_DWORD *)(v42 + 32) >= 0x41u) {
    uint64_t v43 = (void *)*v43;
  }
  if (v41 != *v43) {
    goto LABEL_51;
  }
  if (v39 > 0x40)
  {
    int v44 = 0;
    int64_t v45 = (unint64_t)(v39 + 63) >> 6;
    do
    {
      BOOL v46 = v45-- < 1;
      if (v46) {
        break;
      }
      unint64_t v47 = *(void *)(*v38 + 8 * v45);
      v44 += __clz(v47);
    }
    while (!v47);
    int v48 = v39 | 0xFFFFFFC0;
    if ((v39 & 0x3F) == 0) {
      int v48 = 0;
    }
    if (v44 + v48 == v39) {
      goto LABEL_51;
    }
  }
  else if (!*v38)
  {
    goto LABEL_51;
  }
  if (!v35)
  {
LABEL_43:
    uint64_t v51 = (llvm::APFloatBase *)a12[2];
    uint64_t v52 = *((void *)v51 + 104);
    if (v52) {
      __int16 v53 = *(_WORD *)(v52 + 8);
    }
    else {
      __int16 v53 = 0;
    }
    uint64_t v284 = a3;
    uint64_t v287 = a1;
    unint64_t v143 = sub_1CD7F3564(v51, (const char *)0xC8, (uint64_t)&v292, (llvm *)5, 0, a7, a8, v53);
    unsigned int v145 = v144;
    __int16 v146 = 0;
    long long v147 = (llvm::APFloatBase *)a12[2];
    uint64_t v148 = *((void *)v147 + 104);
    if (v148) {
      __int16 v146 = *(_WORD *)(v148 + 8);
    }
    uint64_t v149 = sub_1CD7F3564(v147, (const char *)0xC8, (uint64_t)&v292, (llvm *)5, 0, a9, a10, v146);
    if (a13) {
      uint64_t v151 = (uint64_t)v143;
    }
    else {
      uint64_t v151 = (uint64_t)v149;
    }
    if (a13) {
      int v152 = v145;
    }
    else {
      int v152 = v150;
    }
    if (a13) {
      uint64_t v153 = (uint64_t)v149;
    }
    else {
      uint64_t v153 = (uint64_t)v143;
    }
    if (a13) {
      unsigned int v154 = v150;
    }
    else {
      unsigned int v154 = v145;
    }
    long long v155 = (void *)a12[2];
    uint64_t v156 = *(void *)(v153 + 40) + 16 * v154;
    long long v157 = *(llvm **)v156;
    uint64_t v158 = *(void *)(v156 + 8);
    uint64_t v159 = sub_1CD7EE368(v155, a11);
    long long v163 = sub_1CD7F6564(v155, (const char *)0xC0, (const llvm::APInt *)&v292, v157, v158, v284, a4, v161, v289, a6, v153, v154, v151, v152, v159, v160);
    long long v164 = (llvm::APFloatBase *)a12[2];
    uint64_t v165 = *((void *)v164 + 104);
    if (v165) {
      __int16 v166 = *(_WORD *)(v165 + 8);
    }
    else {
      __int16 v166 = 0;
    }
    *(void *)uint64_t v287 = sub_1CD7F3564(v164, (const char *)0xC9, (uint64_t)&v292, (llvm *)4, 0, (uint64_t)v163, v162, v166);
    *(_DWORD *)(v287 + 8) = v171;
    goto LABEL_286;
  }
  uint64_t v49 = *(void *)(v35 + 80);
  uint64_t v50 = *(unsigned int *)(v49 + 32);
  if (v50 > 0x40)
  {
    int v54 = 0;
    int64_t v55 = (unint64_t)(v50 + 63) >> 6;
    do
    {
      BOOL v46 = v55-- < 1;
      if (v46) {
        break;
      }
      unint64_t v56 = *(void *)(*(void *)(v49 + 24) + 8 * v55);
      v54 += __clz(v56);
    }
    while (!v56);
    int v57 = v50 | 0xFFFFFFC0;
    if ((v50 & 0x3F) == 0) {
      int v57 = 0;
    }
    if (v54 + v57 == v50) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }
  if (*(void *)(v49 + 24)) {
    goto LABEL_43;
  }
LABEL_51:
  int v58 = *(unsigned __int16 *)(a9 + 24);
  if (v58 == 35 || v58 == 11) {
    uint64_t v60 = a9;
  }
  else {
    uint64_t v60 = 0;
  }
  int v61 = *(unsigned __int16 *)(a7 + 24);
  if ((v61 & 0xFFFE) == 0xC6)
  {
    uint64_t v62 = *(void *)(a7 + 48);
    if (v62)
    {
      int v63 = 1;
      do
      {
        if (*(_DWORD *)(v62 + 8) == a8)
        {
          if (!v63) {
            goto LABEL_74;
          }
          --v63;
        }
        uint64_t v62 = *(void *)(v62 + 32);
      }
      while (v62);
      if (!v63)
      {
        if (v60)
        {
          if (v28 == 5)
          {
            int v64 = *(uint64_t **)(a7 + 32);
            uint64_t v65 = *v64;
            if (*(unsigned char *)(*(void *)(*v64 + 40) + 16 * *((unsigned int *)v64 + 2)) == 4)
            {
              if (v61 == 198)
              {
                uint64_t v136 = *(void *)(v60 + 80);
                unsigned int v137 = *(_DWORD *)(v136 + 32);
                if (v137 > 0x40) {
                  uint64_t v138 = **(void **)(v136 + 24);
                }
                else {
                  uint64_t v138 = (uint64_t)(*(void *)(v136 + 24) << -(char)v137) >> -(char)v137;
                }
                if (v138 < 0x8000 && v138 >= -32768)
                {
LABEL_220:
                  uint64_t v285 = a3;
                  uint64_t v288 = a1;
                  uint64_t v167 = v64[1];
                  uint64_t v168 = (llvm::APFloatBase *)a12[2];
                  uint64_t v169 = *((void *)v168 + 104);
                  if (v169) {
                    __int16 v170 = *(_WORD *)(v169 + 8);
                  }
                  else {
                    __int16 v170 = 0;
                  }
                  uint64_t v200 = sub_1CD7F3564(v168, (const char *)0xC9, (uint64_t)&v292, (llvm *)4, 0, a9, a10, v170);
                  if (a13) {
                    uint64_t v202 = v65;
                  }
                  else {
                    uint64_t v202 = (uint64_t)v200;
                  }
                  if (a13) {
                    int v203 = v167;
                  }
                  else {
                    int v203 = v201;
                  }
                  if (a13)
                  {
                    uint64_t v65 = (uint64_t)v200;
                    LODWORD(v167) = v201;
                  }
                  uint64_t v204 = (void *)a12[2];
                  uint64_t v205 = *(void *)(v65 + 40) + 16 * v167;
                  int v206 = *(llvm **)v205;
                  uint64_t v207 = *(void *)(v205 + 8);
                  uint64_t v208 = sub_1CD7EE368(v204, a11);
                  uint64_t v212 = sub_1CD7F6564(v204, (const char *)0xC0, (const llvm::APInt *)&v292, v206, v207, v285, a4, v210, v289, a6, v65, v167, v202, v203, v208, v209);
                  int v213 = (llvm::APFloatBase *)a12[2];
                  uint64_t v214 = *((void *)v213 + 104);
                  if (v214) {
                    __int16 v215 = *(_WORD *)(v214 + 8);
                  }
                  else {
                    __int16 v215 = 0;
                  }
                  *(void *)uint64_t v288 = sub_1CD7F3564(v213, (const char *)*(unsigned __int16 *)(a7 + 24), (uint64_t)&v292, (llvm *)5, 0, (uint64_t)v212, v211, v215);
                  *(_DWORD *)(v288 + 8) = v225;
                  sub_1CCEF0788(*a12, (uint64_t)v212);
LABEL_286:
                  uint64_t v128 = 1;
                  goto LABEL_190;
                }
              }
              else
              {
                if (v61 != 199) {
                  goto LABEL_220;
                }
                uint64_t v66 = *(void *)(v60 + 80);
                uint64_t v67 = (void *)(v66 + 24);
                if (*(_DWORD *)(v66 + 32) >= 0x41u) {
                  uint64_t v67 = (void *)*v67;
                }
                if (!(*v67 >> 16)) {
                  goto LABEL_220;
                }
              }
LABEL_189:
              uint64_t v128 = 0;
              goto LABEL_190;
            }
          }
        }
      }
    }
  }
LABEL_74:
  if (v58 != 36 && v58 != 12) {
    goto LABEL_189;
  }
  uint64_t v283 = a3;
  uint64_t v286 = a1;
  uint64_t v68 = *(void *)(a9 + 80);
  uint64_t v69 = *(void *)(v68 + 32);
  if ((_UNKNOWN *)v69 == &unk_1CFB2E344)
  {
    unsigned int v279 = a4;
    uint64_t v266 = v27;
    uint64_t v267 = v26;
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v300, (const llvm::detail::DoubleAPFloat *)(v68 + 32));
    long long v26 = v267;
    uint64_t v27 = v266;
    unint64_t v22 = a12;
    a4 = v279;
    int v24 = a13;
  }
  else
  {
    uint64_t v300 = *(void *)(v68 + 32);
    if ((*(_DWORD *)(v69 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v70 = *(unsigned char *)(v68 + 52);
    int v71 = v70 & 7;
    char v303 = v303 & 0xF0 | v70 & 0xF;
    int v302 = *(_DWORD *)(v68 + 48);
    BOOL v73 = (v70 & 6) != 0 && v71 != 3;
    if (v71 == 1 || v73)
    {
      uint64_t v75 = *(unsigned int *)(v300 + 8);
      if ((v75 - 64) <= 0xFFFFFF7F) {
        uint64_t v76 = (uint64_t **)v301;
      }
      else {
        uint64_t v76 = &v301;
      }
      uint64_t v79 = *(uint64_t ***)(v68 + 40);
      uint64_t v78 = (uint64_t **)(v68 + 40);
      unint64_t v77 = v79;
      if ((*((_DWORD *)*(v78 - 1) + 2) - 64) >= 0xFFFFFF80) {
        unint64_t v77 = v78;
      }
      if (v75 <= 0xFFFFFFBF)
      {
        unint64_t v80 = (unint64_t)(v75 + 64) >> 6;
        do
        {
          unint64_t v81 = *v77++;
          *v76++ = v81;
          --v80;
        }
        while (v80);
      }
    }
  }
  uint64_t v82 = *(void *)(a7 + 48);
  if (v82)
  {
    int v83 = 1;
    uint64_t v84 = *(void *)(a7 + 48);
    do
    {
      if (*(_DWORD *)(v84 + 8) == a8)
      {
        if (!v83) {
          goto LABEL_125;
        }
        --v83;
      }
      uint64_t v84 = *(void *)(v84 + 32);
    }
    while (v84);
    if (!v83 && *(_WORD *)(a7 + 24) == 215)
    {
      int v275 = v22;
      int v277 = a4;
      if ((_UNKNOWN *)v300 == &unk_1CFB2E344)
      {
        int v268 = v24;
        uint64_t v269 = v27;
        uint64_t v270 = v26;
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v295, (const llvm::detail::DoubleAPFloat *)&v300);
        long long v26 = v270;
        uint64_t v27 = v269;
        int v24 = v268;
      }
      else
      {
        uint64_t v295 = v300;
        if ((*(_DWORD *)(v300 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        int v85 = v303 & 7;
        char v298 = v298 & 0xF0 | v303 & 0xF;
        int v297 = v302;
        BOOL v87 = (v303 & 6) != 0 && v85 != 3;
        if (v85 == 1 || v87)
        {
          uint64_t v88 = *(unsigned int *)(v295 + 8);
          int v89 = (v88 - 64) <= 0xFFFFFF7F ? v296 : (uint64_t *)&v296;
          uint64_t v90 = (*(_DWORD *)(v300 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v301 : v301;
          if (v88 <= 0xFFFFFFBF)
          {
            unint64_t v91 = (unint64_t)(v88 + 64) >> 6;
            do
            {
              uint64_t v92 = *v90++;
              *v89++ = v92;
              --v91;
            }
            while (v91);
          }
        }
      }
      int v93 = v26;
      uint64_t v94 = v27;
      int v95 = v24;
      char v291 = 0;
      llvm::APFloat::convert((uint64_t)v294, &unk_1CFB2E2E0, 1, &v291);
      if (!v291)
      {
        int v172 = sub_1CD7ECA8C(v275[2], (llvm::LLVMContext *)v294, (const llvm::APFloat *)&v292, (llvm *)9, 0, 0);
        uint64_t v174 = *(uint64_t **)(a7 + 32);
        uint64_t v176 = *v174;
        uint64_t v175 = v174[1];
        BOOL v177 = v95 == 0;
        if (v95) {
          uint64_t v178 = v176;
        }
        else {
          uint64_t v178 = (uint64_t)v172;
        }
        if (v177) {
          int v179 = v173;
        }
        else {
          int v179 = v175;
        }
        if (v177) {
          uint64_t v180 = v176;
        }
        else {
          uint64_t v180 = (uint64_t)v172;
        }
        if (v177) {
          int v181 = v175;
        }
        else {
          int v181 = v173;
        }
        unint64_t v182 = (void *)v275[2];
        int v183 = (const char *)*(unsigned __int16 *)(a2 + 24);
        uint64_t v184 = sub_1CD7EE368(v182, a11);
        uint64_t v188 = sub_1CD7F6564(v182, v183, (const llvm::APInt *)&v292, (llvm *)9, 0, v283, v277, v186, v289, a6, v180, v181, v178, v179, v184, v185);
        uint64_t v189 = (llvm::APFloatBase *)v275[2];
        uint64_t v190 = *((void *)v189 + 104);
        if (v190) {
          __int16 v191 = *(_WORD *)(v190 + 8);
        }
        else {
          __int16 v191 = 0;
        }
        *(void *)a1 = sub_1CD7F3564(v189, (const char *)0xD7, (uint64_t)&v292, (llvm *)0xA, 0, (uint64_t)v188, v187, v191);
        *(_DWORD *)(a1 + 8) = v226;
        sub_1CCEF0788(*v275, (uint64_t)v188);
        if ((_UNKNOWN *)v295 == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v296);
        }
        else if ((*(_DWORD *)(v295 + 8) - 64) <= 0xFFFFFF7F && v296)
        {
          MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
        }
        goto LABEL_166;
      }
      if ((_UNKNOWN *)v295 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v296);
        int v24 = v95;
        uint64_t v27 = v94;
        long long v26 = v93;
      }
      else
      {
        int v24 = v95;
        uint64_t v27 = v94;
        long long v26 = v93;
        if ((*(_DWORD *)(v295 + 8) - 64) <= 0xFFFFFF7F && v296)
        {
          MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
          long long v26 = v93;
          uint64_t v27 = v94;
          int v24 = v95;
        }
      }
      uint64_t v82 = *(void *)(a7 + 48);
      unint64_t v22 = v275;
      a4 = v277;
    }
LABEL_125:
    if (v82)
    {
      int v96 = 1;
      do
      {
        if (*(_DWORD *)(v82 + 8) == a8)
        {
          if (!v96) {
            goto LABEL_134;
          }
          --v96;
        }
        uint64_t v82 = *(void *)(v82 + 32);
      }
      while (v82);
      if (!v96)
      {
        int v97 = *(unsigned __int16 *)(a7 + 24);
        if (v97 != 212) {
          goto LABEL_135;
        }
        uint64_t v98 = v27;
        unint64_t v272 = v26;
        int v280 = v24;
        BOOL v99 = sub_1CB9D1EA4(**(void **)(a7 + 32), *(void *)(*(void *)(a7 + 32) + 8), 1, 0);
        long long v26 = v272;
        uint64_t v27 = v98;
        int v24 = v280;
        if (!v99)
        {
          int v216 = sub_1CD406B10(a2);
          long long v26 = v272;
          uint64_t v27 = v98;
          int v24 = v280;
          if (v216)
          {
            if ((_UNKNOWN *)v300 == &unk_1CFB2E344)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v295, (const llvm::detail::DoubleAPFloat *)&v300);
            }
            else
            {
              uint64_t v295 = v300;
              if ((*(_DWORD *)(v300 + 8) + 64) >= 0x80) {
                operator new[]();
              }
              int v217 = v303 & 7;
              char v298 = v298 & 0xF0 | v303 & 0xF;
              int v297 = v302;
              BOOL v219 = (v303 & 6) != 0 && v217 != 3;
              if (v217 == 1 || v219)
              {
                uint64_t v220 = *(unsigned int *)(v295 + 8);
                int v221 = (v220 - 64) <= 0xFFFFFF7F ? v296 : (uint64_t *)&v296;
                int v222 = (*(_DWORD *)(v300 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v301 : v301;
                if (v220 <= 0xFFFFFFBF)
                {
                  unint64_t v223 = (unint64_t)(v220 + 64) >> 6;
                  do
                  {
                    uint64_t v224 = *v222++;
                    *v221++ = v224;
                    --v223;
                  }
                  while (v223);
                }
              }
            }
            char v291 = 0;
            llvm::APFloat::convert((uint64_t)v294, &unk_1CFB2E308, 1, &v291);
            if (!v291)
            {
              uint64_t v242 = sub_1CD7ECA8C(v22[2], (llvm::LLVMContext *)v294, (const llvm::APFloat *)&v292, (llvm *)0xA, 0, 0);
              uint64_t v244 = *(uint64_t **)(a7 + 32);
              uint64_t v246 = *v244;
              uint64_t v245 = v244[1];
              if (v280) {
                uint64_t v247 = v246;
              }
              else {
                uint64_t v247 = (uint64_t)v242;
              }
              if (v280) {
                int v248 = v245;
              }
              else {
                int v248 = v243;
              }
              if (v280) {
                uint64_t v249 = (uint64_t)v242;
              }
              else {
                uint64_t v249 = v246;
              }
              if (v280) {
                int v250 = v243;
              }
              else {
                int v250 = v245;
              }
              long long v251 = (void *)v22[2];
              uint64_t v252 = (const char *)*(unsigned __int16 *)(a2 + 24);
              uint64_t v253 = sub_1CD7EE368(v251, a11);
              int v258 = sub_1CD7F6564(v251, v252, (const llvm::APInt *)&v292, (llvm *)0xA, 0, v283, a4, v255, v289, a6, v249, v250, v247, v248, v253, v254);
              uint64_t v259 = v22[2];
              uint64_t v260 = *(void *)(a7 + 32);
              uint64_t v261 = *(void *)(v260 + 40);
              uint64_t v262 = *(void *)(v260 + 48);
              uint64_t v263 = *(void *)(v259 + 832);
              if (v263) {
                LOWORD(v263) = *(_WORD *)(v263 + 8);
              }
              *(void *)uint64_t v286 = sub_1CCFDED5C(v259, 212, (const llvm::APInt *)&v292, (llvm *)9, 0, (uint64_t)v258, v256, v257, v261, v262, v263);
              *(_DWORD *)(v286 + 8) = v264;
              sub_1CCEF0788(*v22, (uint64_t)v258);
              if ((_UNKNOWN *)v295 == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v296);
              }
              else if ((*(_DWORD *)(v295 + 8) - 64) <= 0xFFFFFF7F && v296)
              {
                MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
              }
              uint64_t v128 = 1;
              goto LABEL_180;
            }
            int v24 = v280;
            long long v26 = v272;
            if ((_UNKNOWN *)v295 == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v296);
              goto LABEL_335;
            }
            uint64_t v27 = v98;
            if ((*(_DWORD *)(v295 + 8) - 64) <= 0xFFFFFF7F && v296)
            {
              MEMORY[0x1D25D9CB0](v296, 0x1000C8000313F17);
LABEL_335:
              long long v26 = v272;
              uint64_t v27 = v98;
              int v24 = v280;
            }
          }
        }
      }
    }
  }
LABEL_134:
  int v97 = *(unsigned __int16 *)(a7 + 24);
LABEL_135:
  if ((v97 & 0xFFFE) != 0xDE) {
    goto LABEL_136;
  }
  int v282 = v24;
  uint64_t v271 = v27;
  int v274 = v26;
  int v129 = sub_1CD406BEC(a2);
  uint64_t v27 = v271;
  long long v26 = v274;
  int v24 = v282;
  if (!v129) {
    goto LABEL_136;
  }
  unsigned int v130 = *(uint64_t **)(a7 + 32);
  uint64_t v131 = *v130;
  uint64_t v132 = v130[1];
  uint64_t v133 = *(void *)(*v130 + 48);
  if (!v133) {
    goto LABEL_175;
  }
  int v134 = 1;
  do
  {
    if (*(_DWORD *)(v133 + 8) == v132)
    {
      if (!v134) {
        goto LABEL_175;
      }
      --v134;
    }
    uint64_t v133 = *(void *)(v133 + 32);
  }
  while (v133);
  if (v134)
  {
LABEL_175:
    if (v97 != 222) {
      goto LABEL_176;
    }
LABEL_244:
    uint64_t v196 = v131;
    uint64_t v197 = (llvm::APFloatBase *)v22[2];
    uint64_t v198 = *((void *)v197 + 104);
    if (v198) {
      __int16 v199 = *(_WORD *)(v198 + 8);
    }
    else {
      __int16 v199 = 0;
    }
    unsigned int v21 = sub_1CD7F3564(v197, (const char *)0xDE, (uint64_t)&v292, v274, v271, a9, a10, v199);
    int v20 = v227;
    int v24 = v282;
    uint64_t v131 = v196;
LABEL_294:
    if (v24)
    {
      int v228 = v20;
      int v20 = v132;
      LODWORD(v132) = v228;
      uint64_t v229 = (uint64_t)v21;
      unsigned int v21 = (uint64_t *)v131;
      unsigned int v230 = a11;
    }
    else
    {
      unsigned int v230 = a11;
      uint64_t v229 = v131;
    }
    unint64_t v231 = (void *)v22[2];
    uint64_t v232 = (const char *)*(unsigned __int16 *)(a2 + 24);
    uint64_t v233 = sub_1CD7EE368(v231, v230);
    uint64_t v237 = sub_1CD7F6564(v231, v232, (const llvm::APInt *)&v292, v274, v271, v283, a4, v235, v289, a6, v229, v132, (uint64_t)v21, v20, v233, v234);
    char v238 = (llvm::APFloatBase *)v22[2];
    uint64_t v239 = *((void *)v238 + 104);
    if (v239) {
      __int16 v240 = *(_WORD *)(v239 + 8);
    }
    else {
      __int16 v240 = 0;
    }
    *(void *)a1 = sub_1CD7F3564(v238, (const char *)*(unsigned __int16 *)(a7 + 24), (uint64_t)&v292, v274, v271, (uint64_t)v237, v236, v240);
    *(_DWORD *)(a1 + 8) = v241;
    uint64_t v126 = *v22;
    uint64_t v127 = (uint64_t)v237;
LABEL_165:
    sub_1CCEF0788(v126, v127);
LABEL_166:
    uint64_t v128 = 1;
    goto LABEL_180;
  }
  int v192 = *(unsigned __int16 *)(v131 + 24);
  if (v97 == 222)
  {
    unsigned int v193 = v192 - 96;
    BOOL v46 = v193 > 0x2D;
    uint64_t v194 = (1 << v193) & 0x200000000005;
    if (v46 || v194 == 0) {
      goto LABEL_244;
    }
LABEL_136:
    int v100 = *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 32) + 160) + 72);
    if ((v100 & 1) == 0) {
      int v100 = *(unsigned __int16 *)(a2 + 72);
    }
    uint64_t v101 = v22[2];
    if ((~v100 & 0x7C0) != 0 && (*(_WORD *)(*(void *)v101 + 1020) & 1) == 0) {
      goto LABEL_179;
    }
    uint64_t v103 = (uint64_t *)&v299;
    if ((_UNKNOWN *)v300 == &unk_1CFB2E344) {
      uint64_t v103 = v301;
    }
    if ((*((unsigned char *)v103 + 28) & 0xF) != 0xB) {
      goto LABEL_179;
    }
    unsigned int v104 = a4;
    BOOL v105 = (BOOL)v26;
    uint64_t v106 = v27;
    int v281 = v24;
    uint64_t v276 = v22;
    int v278 = v104;
    for (uint64_t i = *(void *)(a2 + 48); i; uint64_t i = *(void *)(i + 32))
    {
      uint64_t v108 = *(void *)(i + 16);
      int v109 = *(unsigned __int16 *)(v108 + 24);
      if ((sub_1CD406AAC(v109) & 1) == 0)
      {
        if (v109 != 46) {
          goto LABEL_179;
        }
        uint64_t v110 = *(void *)(**(void **)(v108 + 32) + 80);
        unint64_t v111 = (void *)(v110 + 24);
        if (*(_DWORD *)(v110 + 32) >= 0x41u) {
          unint64_t v111 = (void *)*v111;
        }
        if (*v111 != 2131) {
          goto LABEL_179;
        }
      }
    }
    uint64_t v273 = (llvm *)v105;
    uint64_t v112 = v106;
    uint64_t v113 = sub_1CD7ECDC4(v101, (uint64_t)&v292, v105, v106, 0, 0.0);
    if (v281) {
      int v115 = v114;
    }
    else {
      int v115 = (int)a8;
    }
    if (v281) {
      uint64_t v116 = (uint64_t)v113;
    }
    else {
      uint64_t v116 = a7;
    }
    if (v281) {
      int v117 = (int)a8;
    }
    else {
      int v117 = v114;
    }
    if (v281) {
      uint64_t v118 = a7;
    }
    else {
      uint64_t v118 = (uint64_t)v113;
    }
    uint64_t v119 = (void *)v276[2];
    unsigned int v120 = (const char *)*(unsigned __int16 *)(a2 + 24);
    uint64_t v121 = sub_1CD7EE368(v119, a11);
    uint64_t v124 = sub_1CD7F6564(v119, v120, (const llvm::APInt *)&v292, v273, v112, v283, v278, v123, v289, a6, v116, v115, v118, v117, v121, v122);
    *(void *)a1 = v124;
    *(_DWORD *)(a1 + 8) = v125;
    uint64_t v126 = *v276;
    uint64_t v127 = (uint64_t)v124;
    goto LABEL_165;
  }
  if (v97 == 223 && v192 == 98) {
    goto LABEL_136;
  }
LABEL_176:
  uint64_t v135 = (uint64_t *)&v299;
  if ((_UNKNOWN *)v300 == &unk_1CFB2E344) {
    uint64_t v135 = v301;
  }
  if ((*((unsigned char *)v135 + 28) & 8) == 0) {
    goto LABEL_294;
  }
LABEL_179:
  uint64_t v128 = 0;
LABEL_180:
  if ((_UNKNOWN *)v300 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v301);
  }
  else if ((*(_DWORD *)(v300 + 8) - 64) <= 0xFFFFFF7F && v301)
  {
    MEMORY[0x1D25D9CB0](v301, 0x1000C8000313F17);
  }
LABEL_190:
  if (v292)
  {
    int v139 = *v292;
    if ((v139 - 4) > 0x1E)
    {
      if ((v139 - 3) >= 0xFFFFFFFE) {
        unsigned int v141 = v292;
      }
      else {
        unsigned int v141 = 0;
      }
      if ((v139 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v142 = (unint64_t)(v141 + 8);
LABEL_200:
        uint64_t v299 = &v292;
        sub_1CC5FA668(v142 + 16, &v299);
        return v128;
      }
      if (v139 == 3) {
        *((void *)v292 + 1) = 0;
      }
    }
    else if ((v292[1] & 0x7F) == 2 || *((_DWORD *)v292 + 3))
    {
      uint64_t v265 = *((void *)v292 + 2);
      if ((v265 & 4) != 0)
      {
        unint64_t v142 = v265 & 0xFFFFFFFFFFFFFFF8;
        if (v142) {
          goto LABEL_200;
        }
      }
    }
  }
  return v128;
}

uint64_t sub_1CB9D3204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)v5;
  unint64_t v7 = *(void *)(v5 + 8);
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = *(unsigned int *)(v5 + 48);
  uint64_t v110 = *(llvm **)v6;
  uint64_t v108 = *(void *)(v6 + 8);
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v112 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v112, v11, 2);
  }
  int v113 = *(_DWORD *)(a2 + 60);
  int v12 = *(unsigned __int16 *)(v9 + 24);
  BOOL v14 = v12 == 12 || v12 == 36;
  uint64_t v15 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v107 = a1;
  if (*(_WORD *)(v8 + 24) != 192) {
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(v8 + 48);
  if (!v16) {
    goto LABEL_17;
  }
  unsigned int v17 = v7;
  int v18 = 1;
  do
  {
    if (*(_DWORD *)(v16 + 8) == v7)
    {
      if (!v18) {
        goto LABEL_17;
      }
      --v18;
    }
    uint64_t v16 = *(void *)(v16 + 32);
  }
  while (v16);
  if (!v18)
  {
    unint64_t v7 = v7 & 0xFFFFFFFF00000000 | v10;
    uint64_t v19 = v9;
    uint64_t v9 = v8;
  }
  else
  {
LABEL_17:
    uint64_t v19 = v8;
    unsigned int v17 = v10;
    if (v12 != 192) {
      goto LABEL_26;
    }
  }
  uint64_t v20 = *(void *)(v9 + 48);
  if (v20)
  {
    int v21 = 1;
    do
    {
      if (*(_DWORD *)(v20 + 8) == v17)
      {
        if (!v21) {
          goto LABEL_25;
        }
        --v21;
      }
      uint64_t v20 = *(void *)(v20 + 32);
    }
    while (v20);
    if (!v21)
    {
      uint64_t v40 = *(void *)(v9 + 32);
      int v41 = *(unsigned __int16 *)(*(void *)(v40 + 80) + 24);
      BOOL v42 = v41 == 36 || v41 == 12;
      uint64_t v43 = v42 ? *(void *)(v40 + 80) : 0;
      uint64_t v44 = *(void *)(v40 + 120);
      int v45 = *(unsigned __int16 *)(v44 + 24);
      BOOL v46 = v45 == 36 || v45 == 12;
      uint64_t v47 = v46 ? v44 : 0;
      if (v43)
      {
        uint64_t v48 = *(unsigned __int16 *)(a2 + 24);
        int v49 = sub_1CB8BE1E4(*(void *)(v43 + 80) + 24, 1.0);
        uint64_t v15 = v48;
        if (v49 && v48 == 98)
        {
          int v50 = 1;
        }
        else
        {
          uint64_t v51 = *(void *)(v43 + 80);
          uint64_t v52 = *(_UNKNOWN **)(v51 + 32) == &unk_1CFB2E344 ? *(void *)(v51 + 40) : v51 + 24;
          int v50 = (*(unsigned char *)(v52 + 28) & 7) == 3 || v14;
        }
      }
      else
      {
        int v50 = 0;
      }
      if (v47)
      {
        int v104 = v50;
        uint64_t v55 = v15;
        int v56 = sub_1CB8BE1E4(*(void *)(v47 + 80) + 24, 1.0);
        uint64_t v15 = v55;
        if (v56 && v55 == 98)
        {
          int v58 = 1;
          uint64_t v59 = v47;
        }
        else
        {
          uint64_t v59 = v47;
          uint64_t v60 = *(void *)(v47 + 80);
          uint64_t v61 = *(_UNKNOWN **)(v60 + 32) == &unk_1CFB2E344 ? *(void *)(v60 + 40) : v60 + 24;
          int v58 = (*(unsigned char *)(v61 + 28) & 7) == 3 || v14;
        }
        if (v43 && v104 | v58)
        {
          uint64_t v62 = v15;
          int v63 = sub_1CCFDED5C(*(void *)(a3 + 16), v15, (const llvm::APInt *)&v112, v110, v108, v19, v7, v57, v43, 0, *(_WORD *)(a2 + 72));
          int v105 = v64;
          uint64_t v66 = sub_1CCFDED5C(*(void *)(a3 + 16), v62, (const llvm::APInt *)&v112, v110, v108, v19, v7, v65, v59, 0, *(_WORD *)(a2 + 72));
          uint64_t v67 = *(uint64_t **)(v9 + 32);
          char v70 = sub_1CD7F6564(*(void **)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v112, v110, v108, *v67, v67[1], v69, v67[5], v67[6], (uint64_t)v63, v105, (uint64_t)v66, v68, v67[20], v67[21]);
          uint64_t v72 = v107;
LABEL_138:
          *(void *)uint64_t v72 = v70;
          *(_DWORD *)(v72 + 8) = v71;
          uint64_t v74 = 1;
          goto LABEL_111;
        }
      }
    }
  }
LABEL_25:
  uint64_t v8 = v19;
  if (*(_WORD *)(v8 + 24) != 215) {
    goto LABEL_36;
  }
  uint64_t v22 = *(void *)(v8 + 48);
  if (!v22) {
    goto LABEL_36;
  }
LABEL_26:
  int v23 = 1;
  do
  {
    if (*(_DWORD *)(v22 + 8) == v7)
    {
      if (!v23) {
        goto LABEL_36;
      }
      --v23;
    }
    uint64_t v22 = *(void *)(v22 + 32);
  }
  while (v22);
  if (!v23 && *(_WORD *)(**(void **)(v8 + 32) + 24) == 192)
  {
    uint64_t v24 = v17;
    unsigned int v17 = v7;
    unint64_t v7 = v7 & 0xFFFFFFFF00000000 | v24;
    uint64_t v25 = v8;
  }
  else
  {
LABEL_36:
    uint64_t v25 = v9;
    uint64_t v9 = v8;
  }
  if (*(_WORD *)(v25 + 24) != 215) {
    goto LABEL_110;
  }
  uint64_t v26 = *(void *)(v25 + 48);
  if (!v26) {
    goto LABEL_110;
  }
  int v27 = 1;
  do
  {
    if (*(_DWORD *)(v26 + 8) == v17)
    {
      if (!v27) {
        goto LABEL_110;
      }
      --v27;
    }
    uint64_t v26 = *(void *)(v26 + 32);
  }
  while (v26);
  if (v27) {
    goto LABEL_110;
  }
  uint64_t v28 = **(void **)(v25 + 32);
  if (*(_WORD *)(v28 + 24) != 192) {
    goto LABEL_110;
  }
  uint64_t v29 = *(void *)(v28 + 32);
  int v30 = *(unsigned __int16 *)(*(void *)(v29 + 80) + 24);
  BOOL v31 = v30 == 36 || v30 == 12;
  uint64_t v32 = v31 ? *(void *)(v29 + 80) : 0;
  uint64_t v33 = *(void *)(v29 + 120);
  int v34 = *(unsigned __int16 *)(v33 + 24);
  BOOL v35 = v34 == 36 || v34 == 12;
  uint64_t v36 = v35 ? v33 : 0;
  if (v32)
  {
    int v37 = v15;
    int v38 = sub_1CB8BE1E4(*(void *)(v32 + 80) + 24, 1.0);
    LODWORD(v15) = v37;
    if (v38 && v37 == 98)
    {
      int v39 = 1;
    }
    else
    {
      uint64_t v53 = *(void *)(v32 + 80);
      uint64_t v54 = *(_UNKNOWN **)(v53 + 32) == &unk_1CFB2E344 ? *(void *)(v53 + 40) : v53 + 24;
      int v39 = (*(unsigned char *)(v54 + 28) & 7) == 3 || v14;
    }
  }
  else
  {
    int v39 = 0;
  }
  if (!v36)
  {
LABEL_110:
    uint64_t v74 = 0;
    goto LABEL_111;
  }
  unsigned int v106 = v15;
  if (sub_1CB8BE1E4(*(void *)(v36 + 80) + 24, 1.0) && v106 == 98)
  {
    int v73 = 1;
  }
  else
  {
    uint64_t v79 = *(void *)(v36 + 80);
    if (*(_UNKNOWN **)(v79 + 32) == &unk_1CFB2E344) {
      uint64_t v80 = *(void *)(v79 + 40);
    }
    else {
      uint64_t v80 = v79 + 24;
    }
    int v73 = (*(unsigned char *)(v80 + 28) & 7) == 3 || v14;
  }
  uint64_t v74 = 0;
  if (v32 && v39 | v73)
  {
    unint64_t v81 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v82 = *((void *)v81 + 104);
    if (v82) {
      __int16 v83 = *(_WORD *)(v82 + 8);
    }
    else {
      __int16 v83 = 0;
    }
    uint64_t v72 = v107;
    uint64_t v84 = v108;
    int v85 = sub_1CD7F3564(v81, (const char *)0xD7, (uint64_t)&v112, v110, v108, v32, 0, v83);
    uint64_t v87 = v86;
    __int16 v88 = 0;
    int v89 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v90 = *((void *)v89 + 104);
    if (v90) {
      __int16 v88 = *(_WORD *)(v90 + 8);
    }
    unint64_t v91 = sub_1CD7F3564(v89, (const char *)0xD7, (uint64_t)&v112, v110, v108, v36, 0, v88);
    uint64_t v102 = v92;
    uint64_t v103 = (uint64_t)v91;
    uint64_t v94 = sub_1CCFDED5C(*(void *)(a3 + 16), v106, (const llvm::APInt *)&v112, v110, v108, v9, v7, v93, (uint64_t)v85, v87, *(_WORD *)(a2 + 72));
    int v109 = v95;
    int v97 = sub_1CCFDED5C(*(void *)(a3 + 16), v106, (const llvm::APInt *)&v112, v110, v84, v9, v7, v96, v103, v102, *(_WORD *)(a2 + 72));
    uint64_t v98 = *(uint64_t **)(v28 + 32);
    char v70 = sub_1CD7F6564(*(void **)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v112, v110, v84, *v98, v98[1], v100, v98[5], v98[6], (uint64_t)v94, v109, (uint64_t)v97, v99, v98[20], v98[21]);
    goto LABEL_138;
  }
LABEL_111:
  if (v112)
  {
    int v75 = *v112;
    if ((v75 - 4) > 0x1E)
    {
      if ((v75 - 3) >= 0xFFFFFFFE) {
        unint64_t v77 = v112;
      }
      else {
        unint64_t v77 = 0;
      }
      if ((v75 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v78 = (unint64_t)(v77 + 8);
LABEL_121:
        int v114 = &v112;
        sub_1CC5FA668(v78 + 16, &v114);
        return v74;
      }
      if (v75 == 3) {
        *((void *)v112 + 1) = 0;
      }
    }
    else if ((v112[1] & 0x7F) == 2 || *((_DWORD *)v112 + 3))
    {
      uint64_t v101 = *((void *)v112 + 2);
      if ((v101 & 4) != 0)
      {
        unint64_t v78 = v101 & 0xFFFFFFFFFFFFFFF8;
        if (v78) {
          goto LABEL_121;
        }
      }
    }
  }
  return v74;
}

uint64_t sub_1CB9D3894(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v3585 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(unsigned __int8 **)(a2 + 64);
  v3551 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v3551, v10, 2);
  }
  int v11 = *(_DWORD *)(a2 + 60);
  int v3552 = v11;
  int v12 = (const char *)*(unsigned __int16 *)(a2 + 24);
  if (*(unsigned __int16 *)(a2 + 24) > 0xF5u)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0x18E:
      case 0x191:
      case 0x192:
      case 0x193:
      case 0x194:
      case 0x195:
      case 0x196:
      case 0x197:
      case 0x198:
      case 0x199:
      case 0x19A:
      case 0x19B:
      case 0x19C:
      case 0x19D:
      case 0x19E:
      case 0x19F:
      case 0x1A0:
        uint64_t v13 = *(void *)(a2 + 32);
        uint64_t v14 = *(void *)(v13 + 40);
        if (*(_WORD *)(v14 + 24) != 177) {
          goto LABEL_2037;
        }
        uint64_t v15 = *(unsigned int *)(v13 + 48);
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344);
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 336))(v16);
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 16);
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 336))(v16);
        unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 56))(v19, v18);
        if (v20)
        {
          unint64_t v21 = (v20 - 1) | (((unint64_t)v20 - 1) >> 1);
          unint64_t v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
          unint64_t v23 = (v22 | (v22 >> 8) | ((v22 | (v22 >> 8)) >> 16)) + 1;
        }
        else
        {
          unint64_t v23 = 0;
        }
        uint64_t v113 = *(void *)(*(void *)(v14 + 32) + 40);
        int v114 = *(unsigned __int16 *)(v113 + 24);
        if (v114 != 35 && v114 != 11) {
          goto LABEL_2037;
        }
        uint64_t v116 = *(void *)(v113 + 80);
        int v117 = (uint64_t *)(v116 + 24);
        if (*(_DWORD *)(v116 + 32) >= 0x41u) {
          int v117 = (uint64_t *)*v117;
        }
        uint64_t v118 = *v117;
        uint64_t v119 = *(void *)(v14 + 40) + 16 * v15;
        uint64_t v121 = *(void **)v119;
        unsigned int v120 = *(_DWORD **)(v119 + 8);
        v3555[0] = v121;
        v3555[1] = v120;
        if ((_BYTE)v121)
        {
          if (v121 - 15 < 0x9C) {
            goto LABEL_2037;
          }
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v3555);
        }
        else
        {
          if ((v120[2] & 0xFE) == 0x12) {
            goto LABEL_2037;
          }
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3555);
        }
        unint64_t v147 = ExtendedSizeInBits;
        int v148 = __clz(v23);
        if (v123 == 1) {
        if (v147 >= (v118 - v148 + 63))
        }
        {
          uint64_t v149 = sub_1CB9FA11C(**(void **)(v14 + 32), *(void *)(*(void *)(v14 + 32) + 8), v118, a3, 0);
          if (v149)
          {
            uint64_t v151 = *(uint64_t **)a3;
            v3555[0] = v149;
            v3555[1] = v150;
            sub_1CCEF083C(v151, v14, (uint64_t *)v3555, 1, 1);
          }
        }
        goto LABEL_2037;
      case 0x18F:
      case 0x190:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
        goto LABEL_2037;
      case 0x1A1:
        uint64_t v491 = *(uint64_t **)(a2 + 40);
        uint64_t v492 = **(void **)(a2 + 32);
        uint64_t v493 = *v491;
        uint64_t v27 = v491[1];
        int v494 = *(unsigned __int16 *)(v492 + 24);
        if (v494 != 36 && v494 != 12)
        {
          __int16 v35 = *(_WORD *)(a2 + 72);
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          if (!(v35 & 0x80 | *(_WORD *)(*(void *)v32 + 1020) & 1)) {
            goto LABEL_2037;
          }
          if (v494 == 224)
          {
            uint64_t v766 = *(uint64_t **)(v492 + 32);
            uint64_t v31 = *v766;
            uint64_t v33 = (void *)v766[1];
            uint64_t v563 = 418;
            uint64_t v564 = v493;
            goto LABEL_1274;
          }
          if (v494 != 417) {
            goto LABEL_2037;
          }
          unsigned int v397 = *(_DWORD **)(v492 + 32);
          goto LABEL_493;
        }
        uint64_t v829 = *(void *)(v492 + 80);
        uint64_t v830 = *(void *)(v829 + 32);
        if ((_UNKNOWN *)v830 == &unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], (const llvm::detail::DoubleAPFloat *)(v829 + 32));
        }
        else
        {
          v3555[1] = *(void **)(v829 + 32);
          if ((*(_DWORD *)(v830 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v831 = *(unsigned char *)(v829 + 52);
          int v832 = v831 & 7;
          BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v831 & 0xF;
          LODWORD(v3557) = *(_DWORD *)(v829 + 48);
          BOOL v834 = (v831 & 6) != 0 && v832 != 3;
          if (v832 == 1 || v834)
          {
            uint64_t v836 = *((unsigned int *)v3555[1] + 2);
            if ((v836 - 64) <= 0xFFFFFF7F) {
              unint64_t v837 = (uint64_t **)v3556;
            }
            else {
              unint64_t v837 = &v3556;
            }
            unsigned int v840 = *(uint64_t ***)(v829 + 40);
            uint64_t v839 = (uint64_t **)(v829 + 40);
            int v838 = v840;
            if ((*((_DWORD *)*(v839 - 1) + 2) - 64) >= 0xFFFFFF80) {
              int v838 = v839;
            }
            if (v836 <= 0xFFFFFFBF)
            {
              unint64_t v841 = (unint64_t)(v836 + 64) >> 6;
              do
              {
                unsigned int v842 = *v838++;
                *v837++ = v842;
                --v841;
              }
              while (v841);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, v3569);
        double v843 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3555);
        *(void *)&long long v3553 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3551, v493, v27, 0, 1.0 / v843);
        *((void *)&v3553 + 1) = v844;
        uint64_t v354 = v3555[1];
        if (v3555[1] == &unk_1CFB2E344) {
          goto LABEL_3667;
        }
        goto LABEL_949;
      case 0x1A2:
        uint64_t v482 = *(uint64_t **)(a2 + 32);
        uint64_t v483 = *v482;
        int v484 = *(unsigned __int16 *)(*v482 + 24);
        if (v484 == 36 || v484 == 12)
        {
          uint64_t v813 = *(void *)(v483 + 80);
          uint64_t v799 = (const llvm::detail::DoubleAPFloat *)(v813 + 32);
          uint64_t v814 = *(void *)(v813 + 32);
          if ((_UNKNOWN *)v814 == &unk_1CFB2E344) {
            goto LABEL_3656;
          }
          v3555[1] = *(void **)(v813 + 32);
          if ((*(_DWORD *)(v814 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v815 = *(unsigned char *)(v813 + 52);
          int v816 = v815 & 7;
          BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v815 & 0xF;
          LODWORD(v3557) = *(_DWORD *)(v813 + 48);
          BOOL v818 = (v815 & 6) != 0 && v816 != 3;
          if (v816 == 1 || v818)
          {
            uint64_t v820 = *((unsigned int *)v3555[1] + 2);
            if ((v820 - 64) <= 0xFFFFFF7F) {
              int v821 = (uint64_t **)v3556;
            }
            else {
              int v821 = &v3556;
            }
            int v824 = *(uint64_t ***)(v813 + 40);
            int v823 = (uint64_t **)(v813 + 40);
            int v822 = v824;
            if ((*((_DWORD *)*(v823 - 1) + 2) - 64) >= 0xFFFFFF80) {
              int v822 = v823;
            }
            if (v820 <= 0xFFFFFFBF)
            {
              unint64_t v825 = (unint64_t)(v820 + 64) >> 6;
              do
              {
                uint64_t v826 = *v822++;
                *v821++ = v826;
                --v825;
              }
              while (v825);
            }
          }
          goto LABEL_927;
        }
        if (**(unsigned char **)(a2 + 40) == 9)
        {
          unint64_t v486 = v482[1];
          __int16 v487 = *(_WORD *)(a2 + 72);
          if (v484 == 212)
          {
            uint64_t v488 = *(void *)(v483 + 32);
            int v489 = *(uint64_t **)v488;
            uint64_t v490 = (void *)(v486 & 0xFFFFFFFF00000000 | *(unsigned int *)(v488 + 8));
          }
          else
          {
            uint64_t v679 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v680 = *((void *)v679 + 104);
            __int16 v681 = v680 ? *(_WORD *)(v680 + 8) : 0;
            int v489 = sub_1CD7F3564(v679, (const char *)0xD7, (uint64_t)&v3551, (llvm *)0xA, 0, v483, (void *)v486, v681);
            uint64_t v490 = (void *)(v486 & 0xFFFFFFFF00000000 | v958);
          }
          __int16 v959 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0x1A2, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v489, v490, v487);
          uint64_t v961 = v959[6];
          if (v961)
          {
            v956 = v959;
            uint64_t v957 = v960;
            do
            {
              if (*(_DWORD *)(v961 + 8) == v960) {
                goto LABEL_1336;
              }
              uint64_t v961 = *(void *)(v961 + 32);
            }
            while (v961);
          }
        }
        goto LABEL_2037;
      case 0x1A3:
        unsigned int v448 = *(uint64_t **)(a2 + 32);
        uint64_t v449 = *v448;
        int v450 = *(unsigned __int16 *)(*v448 + 24);
        if (v450 != 36 && v450 != 12)
        {
          if (**(unsigned char **)(a2 + 40) != 9) {
            goto LABEL_2037;
          }
          unint64_t v452 = v448[1];
          __int16 v453 = *(_WORD *)(a2 + 72);
          if (v450 == 212)
          {
            uint64_t v454 = *(void *)(v449 + 32);
            unint64_t v455 = *(uint64_t **)v454;
            unsigned __int8 v456 = (void *)(v452 & 0xFFFFFFFF00000000 | *(unsigned int *)(v454 + 8));
          }
          else
          {
            int v676 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v677 = *((void *)v676 + 104);
            __int16 v678 = v677 ? *(_WORD *)(v677 + 8) : 0;
            unint64_t v455 = sub_1CD7F3564(v676, (const char *)0xD7, (uint64_t)&v3551, (llvm *)0xA, 0, v449, (void *)v452, v678);
            unsigned __int8 v456 = (void *)(v452 & 0xFFFFFFFF00000000 | v952);
          }
          uint64_t v953 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0x1A3, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v455, v456, v453);
          uint64_t v955 = v953[6];
          if (!v955) {
            goto LABEL_2037;
          }
          v956 = v953;
          uint64_t v957 = v954;
          while (*(_DWORD *)(v955 + 8) != v954)
          {
            uint64_t v955 = *(void *)(v955 + 32);
            if (!v955) {
              goto LABEL_2037;
            }
          }
LABEL_1336:
          uint64_t v1165 = *(void *)(a3 + 16);
          uint64_t v1166 = v1165;
          uint64_t v1167 = 1;
          goto LABEL_1337;
        }
        uint64_t v798 = *(void *)(v449 + 80);
        uint64_t v799 = (const llvm::detail::DoubleAPFloat *)(v798 + 32);
        uint64_t v800 = *(void *)(v798 + 32);
        if ((_UNKNOWN *)v800 == &unk_1CFB2E344)
        {
LABEL_3656:
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], v799);
        }
        else
        {
          v3555[1] = *(void **)(v798 + 32);
          if ((*(_DWORD *)(v800 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v801 = *(unsigned char *)(v798 + 52);
          int v802 = v801 & 7;
          BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v801 & 0xF;
          LODWORD(v3557) = *(_DWORD *)(v798 + 48);
          BOOL v804 = (v801 & 6) != 0 && v802 != 3;
          if (v802 == 1 || v804)
          {
            uint64_t v806 = *((unsigned int *)v3555[1] + 2);
            if ((v806 - 64) <= 0xFFFFFF7F) {
              int v807 = (uint64_t **)v3556;
            }
            else {
              int v807 = &v3556;
            }
            unsigned int v810 = *(uint64_t ***)(v798 + 40);
            uint64_t v809 = (uint64_t **)(v798 + 40);
            uint64_t v808 = v810;
            if ((*((_DWORD *)*(v809 - 1) + 2) - 64) >= 0xFFFFFF80) {
              uint64_t v808 = v809;
            }
            if (v806 <= 0xFFFFFFBF)
            {
              unint64_t v811 = (unint64_t)(v806 + 64) >> 6;
              do
              {
                uint64_t v812 = *v808++;
                *v807++ = v812;
                --v811;
              }
              while (v811);
            }
          }
        }
LABEL_927:
        llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, v3569);
        double v827 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3555);
        *(void *)&long long v3553 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3551, **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), 0, 1.0 / sqrt(v827));
        *((void *)&v3553 + 1) = v828;
        uint64_t v354 = v3555[1];
        if (v3555[1] != &unk_1CFB2E344) {
          goto LABEL_949;
        }
        goto LABEL_3667;
      case 0x1AB:
        uint64_t v457 = *(uint64_t **)(a2 + 32);
        uint64_t v458 = *v457;
        uint64_t v459 = v457[5];
        uint64_t v460 = v457[10];
        int v461 = *(unsigned __int16 *)(v458 + 24);
        if (v461 == 35 || v461 == 11) {
          uint64_t v463 = v458;
        }
        else {
          uint64_t v463 = 0;
        }
        int v464 = *(unsigned __int16 *)(v459 + 24);
        if (v464 == 35 || v464 == 11) {
          uint64_t v466 = v459;
        }
        else {
          uint64_t v466 = 0;
        }
        int v467 = *(unsigned __int16 *)(v460 + 24);
        if (v467 != 35 && v467 != 11) {
          uint64_t v460 = 0;
        }
        if (!v463) {
          goto LABEL_2037;
        }
        BOOL v469 = **(unsigned char **)(a2 + 40) != 5 || v466 == 0;
        if (v469 || v460 == 0) {
          goto LABEL_2037;
        }
        uint64_t v471 = *(void *)(v463 + 80);
        unsigned int v472 = (unint64_t *)(v471 + 24);
        if (*(_DWORD *)(v471 + 32) >= 0x41u) {
          unsigned int v472 = (unint64_t *)*v472;
        }
        uint64_t v473 = *(void *)(v466 + 80);
        uint64_t v474 = (void *)(v473 + 24);
        if (*(_DWORD *)(v473 + 32) >= 0x41u) {
          uint64_t v474 = (void *)*v474;
        }
        unint64_t v475 = *v472;
        uint64_t v476 = (void *)*v474;
        uint64_t v477 = *(void *)(v460 + 80);
        uint64_t v478 = (void *)(v477 + 24);
        if (*(_DWORD *)(v477 + 32) >= 0x41u) {
          uint64_t v478 = (void *)*v478;
        }
        uint64_t v479 = *(void *)(a3 + 16);
        unint64_t v480 = (v475 | ((void)v476 << 32)) >> *v478;
        goto LABEL_474;
      case 0x1AC:
        goto LABEL_136;
      default:
        uint64_t v36 = (v12 - 253);
        if (v36 > 0x34) {
          goto LABEL_654;
        }
        if (((1 << (v12 + 3)) & 0x1FDFE000000000) != 0)
        {
          uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 2256))(a1, a2, a3);
          goto LABEL_20;
        }
        if (v12 == 253)
        {
          uint64_t v37 = sub_1CD40704C((uint64_t)a1, a2, a3);
          goto LABEL_20;
        }
        if (v36 == 1)
        {
          uint64_t v37 = sub_1CD407804((uint64_t)a1, a2, a3);
          goto LABEL_20;
        }
LABEL_654:
        if ((v12 - 246) >= 2 || !*(_DWORD *)(a3 + 8)) {
          goto LABEL_2037;
        }
        unsigned int v616 = *(uint64_t **)(a2 + 32);
        uint64_t v615 = *(void *)(a2 + 40);
        int v618 = *(llvm **)v615;
        uint64_t v617 = *(void *)(v615 + 8);
        uint64_t v619 = v616[5];
        uint64_t v620 = v616[6];
        uint64_t v621 = *v616;
        uint64_t v622 = v616[1];
        __int16 v623 = *(_WORD *)(a2 + 72);
        if (sub_1CD407020(a2)) {
          int v624 = 0;
        }
        else {
          int v624 = 2048;
        }
        int v625 = v624 | v623 & 0xF7FE;
        __int16 v626 = v625 | 1;
        if (*(_WORD *)(a2 + 24) == 247) {
          unsigned int v627 = 2;
        }
        else {
          unsigned int v627 = 4;
        }
        uint64_t v628 = *(void **)(a3 + 16);
        uint64_t v629 = sub_1CD7EE368(v628, v627);
        *(void *)&long long v3553 = sub_1CD7F6564(v628, (const char *)0x1AC, (const llvm::APInt *)&v3551, v618, v617, v621, v622, v631, v619, v620, v621, v622, v619, v620, v629, v630);
        *((void *)&v3553 + 1) = v632;
        *(_WORD *)(v3553 + 72) = v626;
        if (v618 == 10
          && (*(_WORD *)(**(void **)(a3 + 16) + 1020) & 1) == 0
          && ((~v625 & 0xBF0) != 0 || (v623 & 0x400) == 0))
        {
          if ((int v633 = *(unsigned __int16 *)(v621 + 24), v633 != 36) && v633 != 12
            || (uint64_t v634 = *(void *)(v621 + 80), sub_1CB8456FC(v634 + 24))
            || (*(_UNKNOWN **)(v634 + 32) == &unk_1CFB2E344
              ? (char v635 = *(unsigned char *)(*(void *)(v634 + 40) + 28))
              : (char v635 = *(unsigned char *)(v634 + 52)),
                (unsigned int v636 = v635 & 7, v636 < 2) || v636 == 3))
          {
            if ((int v637 = *(unsigned __int16 *)(v619 + 24), v637 != 36) && v637 != 12
              || (uint64_t v638 = *(void *)(v619 + 80), sub_1CB8456FC(v638 + 24))
              || (*(_UNKNOWN **)(v638 + 32) == &unk_1CFB2E344
                ? (char v639 = *(unsigned char *)(*(void *)(v638 + 40) + 28))
                : (char v639 = *(unsigned char *)(v638 + 52)),
                  (unsigned int v640 = v639 & 7, v640 < 2) || v640 == 3))
            {
              int v641 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v642 = *((void *)v641 + 104);
              if (v642) {
                __int16 v643 = *(_WORD *)(v642 + 8);
              }
              else {
                __int16 v643 = 0;
              }
              *(void *)&long long v3553 = sub_1CD7F3564(v641, (const char *)0x1AD, (uint64_t)&v3551, v618, v617, v3553, *((void **)&v3553 + 1), v643);
              DWORD2(v3553) = v2032;
              *(_WORD *)(v3553 + 72) = v626;
            }
          }
        }
        break;
    }
    goto LABEL_2038;
  }
  if (*(unsigned __int16 *)(a2 + 24) <= 0xAAu)
  {
    if (*(unsigned __int16 *)(a2 + 24) <= 0x5Fu)
    {
      if (*(unsigned __int16 *)(a2 + 24) > 0x2Eu)
      {
        if (*(unsigned __int16 *)(a2 + 24) > 0x37u)
        {
          if (v12 != 56)
          {
            if (v12 == 58 && *(_DWORD *)(a3 + 8) && !*(unsigned char *)(a1[23037] + 318))
            {
              uint64_t v37 = (uint64_t)sub_1CBA01874((uint64_t)a1, a2, *(void *)(a3 + 16));
              goto LABEL_20;
            }
            goto LABEL_2037;
          }
          if (!*(_DWORD *)(a3 + 8)) {
            goto LABEL_2037;
          }
          uint64_t v371 = *(void *)(a2 + 32);
          uint64_t v372 = *(void *)(a2 + 40);
          uint64_t v373 = *(void *)v371;
          unint64_t v374 = *(void *)(v371 + 8);
          uint64_t v375 = *(void *)(v371 + 40);
          uint64_t v376 = *(unsigned int *)(v371 + 48);
          BOOL v378 = *(llvm **)v372;
          uint64_t v377 = *(void *)(v372 + 8);
          BOOL v379 = *(unsigned __int16 *)(*(void *)v371 + 24) == 57;
          if (*(_WORD *)(*(void *)v371 + 24) == 57) {
            uint64_t v380 = *(void *)v371;
          }
          else {
            uint64_t v380 = *(void *)(v371 + 40);
          }
          if (v379) {
            uint64_t v381 = v374;
          }
          else {
            uint64_t v381 = v376;
          }
          if (v379) {
            uint64_t v382 = v375;
          }
          else {
            uint64_t v382 = v373;
          }
          if (v379) {
            unint64_t v383 = v374 & 0xFFFFFFFF00000000 | v376;
          }
          else {
            unint64_t v383 = v374;
          }
          int v384 = *(unsigned __int16 *)(v380 + 24);
          if (v384 != 57) {
            goto LABEL_371;
          }
          uint64_t v385 = *(void *)(v380 + 48);
          if (!v385) {
            goto LABEL_371;
          }
          int v386 = 1;
          do
          {
            if (*(_DWORD *)(v385 + 8) == v381)
            {
              if (!v386) {
                goto LABEL_371;
              }
              --v386;
            }
            uint64_t v385 = *(void *)(v385 + 32);
          }
          while (v385);
          if (v386) {
            goto LABEL_371;
          }
          uint64_t v387 = *(uint64_t **)(v380 + 32);
          uint64_t v388 = v387[5];
          if (*(_WORD *)(v388 + 24) != 58) {
            goto LABEL_371;
          }
          uint64_t v389 = *(void *)(v388 + 48);
          if (!v389) {
            goto LABEL_371;
          }
          int v390 = 1;
          uint64_t v391 = v387[6];
          do
          {
            if (*(_DWORD *)(v389 + 8) == v391)
            {
              if (!v390) {
                goto LABEL_371;
              }
              --v390;
            }
            uint64_t v389 = *(void *)(v389 + 32);
          }
          while (v389);
          if (!v390)
          {
            uint64_t v1989 = *(void *)(a3 + 16);
            uint64_t v1990 = *(void *)(v1989 + 832);
            if (v1990) {
              LOWORD(v1990) = *(_WORD *)(v1990 + 8);
            }
            v1991 = sub_1CCFDED5C(v1989, 57, (const llvm::APInt *)&v3551, v378, v377, v388, v391, a8, *v387, v387[1], v1990);
            uint64_t v1994 = *(void *)(a3 + 16);
            uint64_t v1995 = *(void *)(v1994 + 832);
            if (v1995) {
              LOWORD(v1995) = *(_WORD *)(v1995 + 8);
            }
            uint64_t v516 = sub_1CCFDED5C(v1994, 57, (const llvm::APInt *)&v3551, v378, v377, v382, v383, v1993, (uint64_t)v1991, v1992, v1995);
          }
          else
          {
            if (*(_WORD *)(v382 + 24) != 56) {
              goto LABEL_505;
            }
            uint64_t v392 = *(void *)(v382 + 48);
            if (!v392) {
              goto LABEL_505;
            }
LABEL_371:
            int v393 = v383;
            int v394 = 1;
            do
            {
              if (*(_DWORD *)(v392 + 8) == v383)
              {
                if (!v394) {
                  goto LABEL_505;
                }
                --v394;
              }
              uint64_t v392 = *(void *)(v392 + 32);
            }
            while (v392);
            if (!v394
              && (uint64_t v395 = *(void **)(v382 + 32), *(_WORD *)(*v395 + 24) == 58)
              && *(_WORD *)(v395[5] + 24) == 58)
            {
              unint64_t v383 = v383 & 0xFFFFFFFF00000000 | v381;
              uint64_t v396 = v380;
              LODWORD(v381) = v393;
              uint64_t v380 = v382;
            }
            else
            {
LABEL_505:
              uint64_t v396 = v382;
              if (v384 != 56) {
                goto LABEL_2037;
              }
            }
            uint64_t v502 = *(void *)(v380 + 48);
            if (!v502) {
              goto LABEL_2037;
            }
            int v503 = 1;
            do
            {
              if (*(_DWORD *)(v502 + 8) == v381)
              {
                if (!v503) {
                  goto LABEL_2037;
                }
                --v503;
              }
              uint64_t v502 = *(void *)(v502 + 32);
            }
            while (v502);
            if (v503
              || (uint64_t v504 = *(uint64_t **)(v380 + 32), v505 = *v504, *(_WORD *)(*v504 + 24) != 58)
              || (uint64_t v506 = v504[5], *(_WORD *)(v506 + 24) != 58))
            {
LABEL_2037:
              long long v3553 = 0uLL;
              goto LABEL_2038;
            }
            uint64_t v507 = v504[1];
            uint64_t v508 = v504[6];
            uint64_t v509 = *(void *)(a3 + 16);
            uint64_t v510 = *(void *)(v509 + 832);
            if (v510) {
              LOWORD(v510) = *(_WORD *)(v510 + 8);
            }
            uint64_t v512 = sub_1CCFDED5C(v509, 56, (const llvm::APInt *)&v3551, v378, v377, v396, v383, a8, v505, v507, v510);
            uint64_t v514 = *(void *)(a3 + 16);
            uint64_t v515 = *(void *)(v514 + 832);
            if (v515) {
              LOWORD(v515) = *(_WORD *)(v515 + 8);
            }
            uint64_t v516 = sub_1CCFDED5C(v514, 56, (const llvm::APInt *)&v3551, v378, v377, (uint64_t)v512, v511, v513, v506, v508, v515);
          }
          v1996 = *(uint64_t **)a3;
          v3555[0] = v516;
          v3555[1] = v517;
          uint64_t v37 = sub_1CCEF083C(v1996, a2, (uint64_t *)v3555, 1, 0);
          goto LABEL_20;
        }
        if (v12 != 47)
        {
          if (v12 != 48) {
            goto LABEL_2037;
          }
          uint64_t v39 = *(void *)(a2 + 32);
          uint64_t v40 = *(void *)(*(void *)(v39 + 40) + 80);
          int v41 = (int *)(v40 + 24);
          unsigned int v42 = *(_DWORD *)(v40 + 32);
          uint64_t v43 = v41;
          if (v42 >= 0x41) {
            uint64_t v43 = *(int **)v41;
          }
          int v44 = *v43;
          if ((v44 - 2177) < 0x80)
          {
            if (v42 >= 0x41) {
              int v41 = *(int **)v41;
            }
            uint64_t v45 = *v41;
            BYTE4(v3570) = 0;
            LOBYTE(v3571) = 0;
            unsigned __int8 v3572 = 0;
            LOBYTE(v3573) = 0;
            unsigned __int8 v3574 = 0;
            LOBYTE(v3575) = 0;
            char v3576 = 0;
            LOBYTE(v3577) = 0;
            char v3578 = 0;
            v3569[1] = 0;
            v3569[0] = 0;
            LOBYTE(v3570) = 0;
            sub_1CBC83150(v45, (uint64_t)v3569, 0);
            uint64_t v46 = *(void *)(a2 + 32);
            uint64_t v47 = (uint64_t *)(v46 + 40 * LODWORD(v3569[1]));
            uint64_t v48 = *v47;
            unint64_t v49 = v47[1];
            uint64_t v50 = v46 + 40 * HIDWORD(v3569[1]);
            uint64_t v51 = *(void *)v50;
            unsigned int v52 = *(_DWORD *)(v50 + 8);
            if (*(_WORD *)(*v47 + 24) == 216)
            {
              uint64_t v53 = *(void *)(v48 + 32);
              uint64_t v48 = *(void *)v53;
              unint64_t v49 = v49 & 0xFFFFFFFF00000000 | *(unsigned int *)(v53 + 8);
            }
            v3470 = *(uint64_t **)(v46 + 40 * HIDWORD(v3569[0]));
            int v54 = *(unsigned __int16 *)(v51 + 24);
            if (v54 != 11)
            {
              switch(v54)
              {
                case 199:
                  __int16 v685 = *(_DWORD **)(v51 + 32);
                  uint64_t v51 = *(void *)v685;
                  unsigned int v52 = v685[2];
                  int v54 = *(unsigned __int16 *)(*(void *)v685 + 24);
                  break;
                case 35:
                  goto LABEL_36;
                case 216:
                  uint64_t v686 = *(_DWORD **)(v51 + 32);
                  uint64_t v51 = *(void *)v686;
                  unsigned int v52 = v686[2];
                  int v54 = *(unsigned __int16 *)(*(void *)v686 + 24);
                  break;
              }
              goto LABEL_760;
            }
LABEL_36:
            uint64_t v55 = *(void *)(v51 + 80);
            unsigned int v56 = *(_DWORD *)(v55 + 32);
            if (v56 > 0x40) {
              uint64_t v57 = **(void **)(v55 + 24);
            }
            else {
              uint64_t v57 = (uint64_t)(*(void *)(v55 + 24) << -(char)v56) >> -(char)v56;
            }
            if (v57 < 0)
            {
              v3414 = 0;
              v3417 = a1 + 23037;
              BOOL v3424 = *(unsigned char *)(a1[23037] + 326) != 0;
              goto LABEL_771;
            }
LABEL_760:
            v3414 = (uint64_t *)v49;
            if (v54 == 35 || v54 == 11)
            {
              uint64_t v687 = *(void *)(v51 + 80);
              unsigned int v688 = *(_DWORD *)(v687 + 32);
              uint64_t v689 = v688 > 0x40
                   ? **(void **)(v687 + 24)
                   : (uint64_t)(*(void *)(v687 + 24) << -(char)v688) >> -(char)v688;
              if (v689 < 0x10000) {
                uint64_t v51 = (uint64_t)sub_1CD7EBF14(*(void *)(a3 + 16), v689, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
              }
            }
            unint64_t v49 = v49 & 0xFFFFFFFF00000000 | v52;
            v3417 = a1 + 23037;
            BOOL v3424 = *(unsigned char *)(a1[23037] + 326) != 0;
            if (v48)
            {
              char v690 = 0;
              uint64_t v691 = (uint64_t *)v48;
              goto LABEL_774;
            }
            uint64_t v48 = v51;
LABEL_771:
            unsigned int v692 = *(unsigned __int16 *)(v48 + 24);
            if (v692 > 0x26 || ((1 << v692) & 0x6000006000) == 0)
            {
              BOOL v868 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v869 = *((void *)v868 + 104);
              if (v869) {
                __int16 v870 = *(_WORD *)(v869 + 8);
              }
              else {
                __int16 v870 = 0;
              }
              uint64_t v51 = (uint64_t)sub_1CD7F3564(v868, (const char *)0xC9, (uint64_t)&v3551, (llvm *)4, 0, v48, (void *)v49, v870);
              uint64_t v48 = 0;
              uint64_t v691 = 0;
              unint64_t v49 = v49 & 0xFFFFFFFF00000000 | v1088;
              int v3445 = 1;
LABEL_1240:
              if (LODWORD(v3569[0]) == -1)
              {
                uint64_t v3416 = 0;
              }
              else
              {
                uint64_t v1089 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40 * LODWORD(v3569[0])) + 80);
                v1090 = (void *)(v1089 + 24);
                if (*(_DWORD *)(v1089 + 32) >= 0x41u) {
                  v1090 = (void *)*v1090;
                }
                unsigned int v1091 = *(_DWORD *)v1090;
                LOBYTE(v3416) = v1091;
                HIDWORD(v3416) = (v1091 >> 1) & 0x4000;
              }
              int v1092 = v3579;
              if (v3579 <= 2) {
                int v1093 = 2;
              }
              else {
                int v1093 = v3579;
              }
              int v1094 = v1093 - 2;
              if (v3581) {
                int v1092 = v1094;
              }
              int v1095 = v1092 + v3574;
              if (v3580 == 8) {
                ++v1095;
              }
              unsigned int v3460 = v1095 + v3572;
              unint64_t v3419 = v49;
              uint64_t v3421 = v48;
              v3431 = v691;
              v3437 = (uint64_t *)v51;
              if (!v3460)
              {
                v1100 = 0;
                uint64_t v1101 = 0;
                uint64_t v1102 = (uint64_t)v3470;
                goto LABEL_1526;
              }
              BOOL v1096 = v3581 != 0;
              uint64_t v1097 = 4;
              if (!v3582) {
                uint64_t v1097 = 5;
              }
              v3492 = (llvm *)v1097;
              if (v3582)
              {
                switch(v3580)
                {
                  case 1:
                    unsigned int v1099 = 4 * (v3581 == 0);
                    break;
                  case 2:
                  case 4:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 4;
LABEL_1463:
                    int v1117 = -1;
                    goto LABEL_1467;
                  case 3:
                  case 5:
                  case 6:
                    unsigned int v1099 = 10;
                    if (v3581) {
                      unsigned int v1099 = 0;
                    }
                    break;
                  case 7:
                  case 8:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 15;
                    int v1117 = 4;
                    goto LABEL_1467;
                  default:
                    if (v3581) {
                      unsigned int v1099 = -1;
                    }
                    else {
                      unsigned int v1099 = 0;
                    }
                    break;
                }
              }
              else
              {
                switch(v3580)
                {
                  case 1:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 12;
                    goto LABEL_1465;
                  case 2:
                  case 4:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 17;
                    goto LABEL_1463;
                  case 3:
                  case 6:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 22;
LABEL_1465:
                    int v1117 = 2;
                    break;
                  case 5:
                  case 8:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 27;
                    int v1117 = 6;
                    break;
                  case 7:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 32;
                    int v1117 = 12;
                    break;
                  default:
                    BOOL v1098 = v3581 == 0;
                    unsigned int v1099 = 6;
                    goto LABEL_1463;
                }
LABEL_1467:
                if (!v1098) {
                  unsigned int v1099 = v1117;
                }
              }
              v3555[0] = &v3556;
              v3555[1] = (void *)0x900000000;
              v1245 = sub_1CD7EBF14(*(void *)(a3 + 16), v1099, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
              if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v1246 = (2 * v1096);
              v1247 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
              *v1247 = v1245;
              v1247[1] = v1244;
              unsigned int v1248 = ++LODWORD(v3555[1]);
              if (BYTE4(v3570))
              {
                uint64_t v1251 = *(void *)(a2 + 32) + 40 * v3570;
                uint64_t v1249 = *(void *)v1251;
                uint64_t v1250 = *(unsigned int *)(v1251 + 8);
              }
              else
              {
                uint64_t v1249 = 0;
                uint64_t v1250 = 0;
              }
              unsigned int v1252 = 1;
              int v1253 = v3579 - v1246;
              if (v3579 > v1246)
              {
                do
                {
                  unint64_t v1254 = v51 & 0xFFFFFFFF00000000;
                  if (v1253 == 1)
                  {
                    uint64_t v51 = v1254 | v1250;
                    v1255 = (uint64_t *)v1249;
                  }
                  else
                  {
                    uint64_t v1256 = *(void *)(a3 + 16);
                    v1257 = sub_1CD7EBF14(v1256, v1246, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                    __int16 v1260 = 0;
                    uint64_t v1261 = *(void *)(v1256 + 832);
                    if (v1261) {
                      __int16 v1260 = *(_WORD *)(v1261 + 8);
                    }
                    v1255 = sub_1CCFDED5C(v1256, 148, (const llvm::APInt *)&v3551, v3492, 0, v1249, v1250, v1259, (uint64_t)v1257, v1258, v1260);
                    uint64_t v51 = v1262 | v1254;
                    if (!v3582)
                    {
                      v1264 = sub_1CD8015C0(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v1255, v1262 | v1254);
                      if (LODWORD(v3555[1]) >= (unint64_t)HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1265 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                      *v1265 = v1264;
                      v1265[1] = v1263;
                      ++LODWORD(v3555[1]);
                      v1267 = sub_1CD7EBF14(*(void *)(a3 + 16), v1252, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                      if (LODWORD(v3555[1]) >= (unint64_t)HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1268 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                      *v1268 = v1267;
                      v1268[1] = v1266;
                      ++LODWORD(v3555[1]);
                      v1270 = sub_1CD8015C0(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v1255, v51);
                      if (LODWORD(v3555[1]) >= (unint64_t)HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1271 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                      *v1271 = v1270;
                      v1271[1] = v1269;
                      ++LODWORD(v3555[1]);
                      v1272 = sub_1CD7EBF14(*(void *)(a3 + 16), v1252 + 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                      v1274 = v1273;
                      uint64_t v1275 = LODWORD(v3555[1]);
                      if (LODWORD(v3555[1]) >= (unint64_t)HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1252 += 2;
                      goto LABEL_1488;
                    }
                    unsigned int v1248 = v3555[1];
                  }
                  if (v1248 >= HIDWORD(v3555[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v1276 = (uint64_t **)((char *)v3555[0] + 16 * v1248);
                  *v1276 = v1255;
                  v1276[1] = (uint64_t *)v51;
                  ++LODWORD(v3555[1]);
                  v1272 = sub_1CD7EBF14(*(void *)(a3 + 16), v1252, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                  v1274 = v1277;
                  uint64_t v1275 = LODWORD(v3555[1]);
                  if (LODWORD(v3555[1]) >= (unint64_t)HIDWORD(v3555[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  ++v1252;
LABEL_1488:
                  v1278 = (uint64_t **)((char *)v3555[0] + 16 * v1275);
                  *v1278 = v1272;
                  v1278[1] = v1274;
                  unsigned int v1248 = ++LODWORD(v3555[1]);
                  ++v1246;
                }
                while (v1246 < v3579);
              }
              if (v3572)
              {
                uint64_t v691 = v3431;
                uint64_t v51 = (uint64_t)v3437;
                if (v1248 >= HIDWORD(v3555[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_OWORD *)v3555[0] + v1248) = *(_OWORD *)(*(void *)(a2 + 32) + 40 * v3571);
                ++LODWORD(v3555[1]);
                uint64_t v1279 = v1252 + 1;
                v1281 = sub_1CD7EBF14(*(void *)(a3 + 16), v1252, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v1282 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                *v1282 = v1281;
                v1282[1] = v1280;
                unsigned int v1248 = ++LODWORD(v3555[1]);
                int v1283 = v3580;
                if (v3582 || v3580 != 7)
                {
LABEL_1506:
                  if (v1283 != 8)
                  {
                    uint64_t v1102 = (uint64_t)v3470;
LABEL_1517:
                    if (v3574)
                    {
                      if (v1248 >= HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_OWORD *)v3555[0] + v1248) = *(_OWORD *)(*(void *)(a2 + 32) + 40 * v3573);
                      ++LODWORD(v3555[1]);
                      v1300 = sub_1CD7EBF14(*(void *)(a3 + 16), v1279, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                      if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1301 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                      *v1301 = v1300;
                      v1301[1] = v1299;
                      unsigned int v1248 = ++LODWORD(v3555[1]);
                    }
                    if (v3460 < 2)
                    {
                      v1302 = (uint64_t **)v3555[0];
                      v1100 = (uint64_t *)*((void *)v3555[0] + 2);
                      uint64_t v1101 = (uint64_t *)*((unsigned int *)v3555[0] + 6);
                    }
                    else
                    {
                      v1100 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v3551, (llvm *)0xAE, 0, (uint64_t *)v3555[0], v1248);
                      uint64_t v1101 = 0;
                      v1302 = (uint64_t **)v3555[0];
                    }
                    if (v1302 != &v3556) {
                      free(v1302);
                    }
LABEL_1526:
                    v3412 = v1101;
                    v3413 = v1100;
                    if (v3576)
                    {
                      v1304 = (unsigned int *)(*(void *)(a2 + 32) + 40 * v3575);
                      v1303 = *(uint64_t **)v1304;
                      int v1305 = *(unsigned __int16 *)(*(void *)v1304 + 24);
                      if (v1305 == 35 || v1305 == 11)
                      {
                        uint64_t v1307 = v1303[10];
                        v1308 = (uint64_t *)(v1307 + 24);
                        if (*(_DWORD *)(v1307 + 32) >= 0x41u) {
                          v1308 = (uint64_t *)*v1308;
                        }
                        unsigned int v3493 = *v1308 != 0;
                        v1303 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1308, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                        v3411 = (uint64_t *)v1309;
                      }
                      else
                      {
                        v3411 = (uint64_t *)v1304[2];
                        unsigned int v3493 = 2;
                      }
                    }
                    else
                    {
                      v1303 = 0;
                      v3411 = 0;
                      unsigned int v3493 = 0;
                    }
                    int v1310 = *(unsigned __int16 *)(v1102 + 24);
                    v3415 = v1303;
                    if (v1310 == 35 || v1310 == 11)
                    {
                      if (!v3578)
                      {
                        uint64_t v1311 = *(void *)(v1102 + 80);
                        v1312 = (uint64_t *)(v1311 + 24);
                        if (*(_DWORD *)(v1311 + 32) >= 0x41u) {
                          v1312 = (uint64_t *)*v1312;
                        }
                        v3470 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1312, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                        unsigned int v1313 = 0;
                        v1315 = (uint64_t *)v1314;
                        goto LABEL_1574;
                      }
                    }
                    else if (!v3578)
                    {
                      v1315 = 0;
                      unsigned int v1313 = 1;
                      goto LABEL_1574;
                    }
                    uint64_t v1316 = *(void *)(a2 + 32);
                    v1317 = (uint64_t *)(v1316 + 40 * v3577);
                    uint64_t v1318 = *v1317;
                    uint64_t v1319 = v1317[1];
                    v1320 = (uint64_t *)(v1316 + 40 * (v3577 + 1));
                    uint64_t v1322 = *v1320;
                    uint64_t v1321 = v1320[1];
                    v1323 = (uint64_t *)(v1316 + 40 * (v3577 + 2));
                    uint64_t v1324 = *v1323;
                    uint64_t v1325 = v1323[1];
                    v1326 = (uint64_t *)(v1316 + 40 * (v3577 + 3));
                    uint64_t v3408 = v1326[1];
                    uint64_t v3409 = *v1326;
                    uint64_t v1327 = *(void *)(a3 + 16);
                    v1328 = sub_1CD7EBF14(v1327, 8, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                    __int16 v1331 = 0;
                    uint64_t v1332 = *(void *)(v1327 + 832);
                    if (v1332) {
                      __int16 v1331 = *(_WORD *)(v1332 + 8);
                    }
                    v1333 = sub_1CCFDED5C(v1327, 175, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1318, v1319, v1330, (uint64_t)v1328, v1329, v1331);
                    __int16 v1336 = 0;
                    uint64_t v1337 = *(void *)(v1327 + 832);
                    if (v1337) {
                      __int16 v1336 = *(_WORD *)(v1337 + 8);
                    }
                    v3474 = sub_1CCFDED5C(v1327, 56, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1102, 0, v1335, (uint64_t)v1333, v1334, v1336);
                    v3410 = v1338;
                    uint64_t v1339 = *(void *)(a3 + 16);
                    v1340 = sub_1CD7EBF14(v1339, 8, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                    __int16 v1343 = 0;
                    uint64_t v1344 = *(void *)(v1339 + 832);
                    if (v1344) {
                      __int16 v1343 = *(_WORD *)(v1344 + 8);
                    }
                    v1345 = sub_1CCFDED5C(v1339, 177, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1318, v1319, v1342, (uint64_t)v1340, v1341, v1343);
                    uint64_t v1347 = v1346;
                    uint64_t v1348 = *(void *)(a3 + 16);
                    v1349 = sub_1CD7EBF14(v1348, 2, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                    __int16 v1352 = 0;
                    uint64_t v1353 = *(void *)(v1348 + 832);
                    if (v1353) {
                      __int16 v1352 = *(_WORD *)(v1353 + 8);
                    }
                    v1354 = sub_1CCFDED5C(v1348, 175, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1324, v1325, v1351, (uint64_t)v1349, v1350, v1352);
                    uint64_t v1356 = v1355;
                    uint64_t v1357 = *(void *)(a3 + 16);
                    v1358 = sub_1CD7EBF14(v1357, 12, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                    __int16 v1361 = 0;
                    uint64_t v1362 = *(void *)(v1357 + 832);
                    if (v1362) {
                      __int16 v1361 = *(_WORD *)(v1362 + 8);
                    }
                    v1364 = sub_1CCFDED5C(v1357, 175, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1322, v1321, v1360, (uint64_t)v1358, v1359, v1361);
                    uint64_t v1366 = v1365;
                    __int16 v1367 = 0;
                    uint64_t v1368 = *(void *)(a3 + 16);
                    uint64_t v1369 = *(void *)(v1368 + 832);
                    if (v1369) {
                      __int16 v1367 = *(_WORD *)(v1369 + 8);
                    }
                    v1371 = sub_1CCFDED5C(v1368, 56, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v1345, v1347, v1363, (uint64_t)v1354, v1356, v1367);
                    uint64_t v1373 = v1370;
                    __int16 v1374 = 0;
                    uint64_t v1375 = *(void *)(a3 + 16);
                    uint64_t v1376 = *(void *)(v1375 + 832);
                    if (v1376) {
                      __int16 v1374 = *(_WORD *)(v1376 + 8);
                    }
                    v1377 = sub_1CCFDED5C(v1375, 56, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v1371, v1370, v1372, (uint64_t)v1364, v1366, v1374);
                    unsigned int v1379 = v1378;
                    uint64_t v1380 = *(void *)(a3 + 16);
                    v1381 = sub_1CD7EBF14(v1380, 4, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                    __int16 v1384 = 0;
                    uint64_t v1385 = *(void *)(v1380 + 832);
                    if (v1385) {
                      __int16 v1384 = *(_WORD *)(v1385 + 8);
                    }
                    v1386 = sub_1CCFDED5C(v1380, 177, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1322, v1321, v1383, (uint64_t)v1381, v1382, v1384);
                    uint64_t v1388 = v1387;
                    uint64_t v1389 = *(void *)(a3 + 16);
                    v1390 = sub_1CD7EBF14(v1389, 6, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                    __int16 v1393 = 0;
                    uint64_t v1394 = *(void *)(v1389 + 832);
                    if (v1394) {
                      __int16 v1393 = *(_WORD *)(v1394 + 8);
                    }
                    v1395 = sub_1CCFDED5C(v1389, 175, (const llvm::APInt *)&v3551, (llvm *)4, 0, v3409, v3408, v1392, (uint64_t)v1390, v1391, v1393);
                    __int16 v1398 = 0;
                    uint64_t v1399 = *(void *)(a3 + 16);
                    uint64_t v1400 = *(void *)(v1399 + 832);
                    if (v1400) {
                      __int16 v1398 = *(_WORD *)(v1400 + 8);
                    }
                    v1401 = sub_1CCFDED5C(v1399, 56, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v1386, v1388, v1397, (uint64_t)v1395, v1396, v1398);
                    unsigned int v1403 = v1402;
                    v3555[0] = &v3556;
                    v3555[1] = (void *)0x800000000;
                    v1405 = sub_1CD7EBF14(*(void *)(a3 + 16), 10, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                    if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1406 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                    *v1406 = v1405;
                    v1406[1] = v1404;
                    unsigned int v1407 = LODWORD(v3555[1]) + 1;
                    LODWORD(v3555[1]) = v1407;
                    if (v1407 >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1408 = (uint64_t **)((char *)v3555[0] + 16 * v1407);
                    *v1408 = v3474;
                    v1408[1] = v3410;
                    ++LODWORD(v3555[1]);
                    v1410 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                    if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    unint64_t v1411 = v1373 & 0xFFFFFFFF00000000 | v1379;
                    v1412 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                    *v1412 = v1410;
                    v1412[1] = v1409;
                    unsigned int v1413 = LODWORD(v3555[1]) + 1;
                    LODWORD(v3555[1]) = v1413;
                    if (v1413 >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1414 = (uint64_t **)((char *)v3555[0] + 16 * v1413);
                    *v1414 = v1377;
                    v1414[1] = (uint64_t *)v1411;
                    ++LODWORD(v3555[1]);
                    v1416 = sub_1CD7EBF14(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                    if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    unint64_t v1417 = v1388 & 0xFFFFFFFF00000000 | v1403;
                    v1418 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                    *v1418 = v1416;
                    v1418[1] = v1415;
                    unsigned int v1419 = LODWORD(v3555[1]) + 1;
                    LODWORD(v3555[1]) = v1419;
                    uint64_t v51 = (uint64_t)v3437;
                    if (v1419 >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1420 = (uint64_t **)((char *)v3555[0] + 16 * v1419);
                    *v1420 = v1401;
                    v1420[1] = (uint64_t *)v1417;
                    ++LODWORD(v3555[1]);
                    v1422 = sub_1CD7EBF14(*(void *)(a3 + 16), 3, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                    if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1423 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                    *v1423 = v1422;
                    v1423[1] = v1421;
                    ++LODWORD(v3555[1]);
                    v3470 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v3551, (llvm *)0xAE, 0, (uint64_t *)v3555[0], LODWORD(v3555[1]));
                    if (v3555[0] != &v3556) {
                      free(v3555[0]);
                    }
                    v1315 = 0;
                    unsigned int v1313 = 2;
                    uint64_t v691 = v3431;
LABEL_1574:
                    int v1424 = v3445;
                    if (v691) {
                      int v1424 = 1;
                    }
                    if (v1424 == 1)
                    {
                      if (v691)
                      {
                        *(_OWORD *)v3555 = *(_OWORD *)*(void *)(v51 + 40);
                        if (LOBYTE(v3555[0])) {
                          uint64_t v1426 = sub_1CB87E200((unsigned __int8 *)v3555);
                        }
                        else {
                          uint64_t v1426 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3555);
                        }
                        uint64_t v1428 = v1426;
                        if (v1427 == 1) {
                        uint64_t v1425 = 2;
                        }
                        if (v1428 != 16) {
                          uint64_t v1425 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v1425 = 1;
                      }
                    }
                    else
                    {
                      uint64_t v1425 = 0;
                    }
                    v1429 = &unk_1CDE157C0;
                    if (v3424) {
                      v1429 = &unk_1CDE15808;
                    }
                    int v1430 = v1429[18 * v1425 + 6 * v1313 + 3 * (v3460 != 0) + v3493];
                    int v1431 = ((v3416 & 0xF) << 9) | HIDWORD(v3416) | (2 * (v3493 < 2)) | (4 * v1313) | (32 * (v3580 & 0xF)) | (16 * v3582);
                    if (!v3581) {
                      ++v1431;
                    }
                    uint64_t v1432 = v1431 | (v3583 << 16);
                    uint64_t v1433 = *(void *)(*(void *)(a3 + 16) + 40);
                    uint64_t v1434 = *v3417;
                    BOOL v1435 = *(unsigned char *)(*v3417 + 404) == 0;
                    if (*(unsigned char *)(*v3417 + 318)) {
                      LODWORD(v1436) = 3;
                    }
                    else {
                      LODWORD(v1436) = 1;
                    }
                    uint64_t v1437 = *(void *)v1433;
                    LODWORD(v3555[0]) = 0;
                    if (sub_1CBA864D8(v1434, v1437, "ImageWriteBlockCacheCtl", (int *)v3555)) {
                      uint64_t v1436 = LODWORD(v3555[0]);
                    }
                    else {
                      uint64_t v1436 = v1436;
                    }
                    uint64_t v1438 = *v3417;
                    uint64_t v1439 = *(void *)v1433;
                    LODWORD(v3555[0]) = 0;
                    int v1440 = sub_1CBA864D8(v1438, v1439, "ImageWriteBlockL2Pers", (int *)v3555);
                    unsigned int v1441 = v3555[0];
                    if (!v1440) {
                      unsigned int v1441 = v1435;
                    }
                    uint64_t v1442 = 4 * v1441;
                    if (v1436 == 3) {
                      uint64_t v1442 = 4;
                    }
                    uint64_t v1443 = v1442 | v1436;
                    v3555[0] = &v3556;
                    v3555[1] = (void *)0x800000000;
                    v1445 = sub_1CD7EBF14(*(void *)(a3 + 16), v1432, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
                    if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1446 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                    *v1446 = v1445;
                    v1446[1] = v1444;
                    ++LODWORD(v3555[1]);
                    v1448 = sub_1CD7EBF14(*(void *)(a3 + 16), v1443, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
                    if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1449 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                    *v1449 = v1448;
                    v1449[1] = v1447;
                    unsigned int v1450 = LODWORD(v3555[1]) + 1;
                    LODWORD(v3555[1]) = v1450;
                    if (v1450 >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1451 = (uint64_t **)((char *)v3555[0] + 16 * v1450);
                    *v1451 = v3470;
                    v1451[1] = v1315;
                    unsigned int v1452 = ++LODWORD(v3555[1]);
                    if (v3431)
                    {
                      unint64_t v1453 = v3419;
                      uint64_t v1454 = v3421;
                      if (v1452 >= HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1455 = (uint64_t **)((char *)v3555[0] + 16 * v1452);
                      *v1455 = v3431;
                      v1455[1] = v3414;
                      unsigned int v1452 = ++LODWORD(v3555[1]);
                    }
                    else
                    {
                      unint64_t v1453 = v3419;
                      uint64_t v1454 = v3421;
                    }
                    if (v1452 >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1456 = (uint64_t **)((char *)v3555[0] + 16 * v1452);
                    *v1456 = v3437;
                    v1456[1] = (uint64_t *)v1453;
                    unsigned int v1457 = ++LODWORD(v3555[1]);
                    if (v3460)
                    {
                      if (v1457 >= HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1458 = (uint64_t **)((char *)v3555[0] + 16 * v1457);
                      *v1458 = v3413;
                      v1458[1] = v3412;
                      ++LODWORD(v3555[1]);
                      v1460 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                      if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1461 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                      *v1461 = v1460;
                      v1461[1] = v1459;
                      unsigned int v1457 = ++LODWORD(v3555[1]);
                    }
                    if (v3493)
                    {
                      if (v1457 >= HIDWORD(v3555[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v1462 = (uint64_t **)((char *)v3555[0] + 16 * v1457);
                      *v1462 = v3415;
                      v1462[1] = v3411;
                      unsigned int v1457 = ++LODWORD(v3555[1]);
                      char v1463 = !v3424;
                      if (v3493 != 2) {
                        char v1463 = 1;
                      }
                      if ((v1463 & 1) == 0)
                      {
                        v1465 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
                        if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        v1466 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                        *v1466 = v1465;
                        v1466[1] = v1464;
                        unsigned int v1457 = ++LODWORD(v3555[1]);
                      }
                    }
                    if (v1457 >= HIDWORD(v3555[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_OWORD *)v3555[0] + v1457) = *(_OWORD *)*(void *)(a2 + 32);
                    ++LODWORD(v3555[1]);
                    v1467 = sub_1CD801450(*(void *)(a3 + 16), v1430, (uint64_t)&v3551, (llvm *)1, 0, (uint64_t *)v3555[0], LODWORD(v3555[1]));
                    uint64_t v1468 = *(void *)(v1433 + 48);
                    if (!v1468)
                    {
                      uint64_t v1468 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1433 + 8) + 216))(*(void *)(v1433 + 8), v1433 + 128, v1433);
                      *(void *)(v1433 + 48) = v1468;
                    }
                    if (v3445)
                    {
                      int v1469 = 0;
                      long long v3537 = xmmword_1CD91CB40;
                      char v3539 = 0;
                    }
                    else
                    {
                      uint64_t v1470 = sub_1CB9A15FC(v1468, *(void *)(v1454 + 80), v1433);
                      int v1469 = 0;
                      *(void *)&long long v3537 = v1470 | 4;
                      *((void *)&v3537 + 1) = 0;
                      char v3539 = 0;
                      if (v1470) {
                        int v1469 = *(_DWORD *)(v1470 + 12);
                      }
                    }
                    int v3538 = v1469;
                    memset(v3584, 0, sizeof(v3584));
                    unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v1433, (uint64_t)&v3537, 2, -1, 2, v3584, 0, 1, 0, 0, 0);
                    v1472 = *(uint64_t **)(a3 + 16);
                    *(void *)&v3584[0] = MachineMemOperand;
                    sub_1CD8005B8(v1472, (uint64_t)v1467, v3584, 1);
                    *(void *)&long long v3553 = v1467;
                    DWORD2(v3553) = 0;
                    unint64_t v646 = v3555[0];
                    if (v3555[0] == &v3556) {
                      goto LABEL_2038;
                    }
LABEL_1628:
                    free(v646);
                    goto LABEL_2038;
                  }
                  uint64_t v1290 = *(void *)(a3 + 16);
                  v1291 = *(unsigned __int8 **)(a2 + 64);
                  *(void *)&v3584[0] = v1291;
                  uint64_t v1102 = (uint64_t)v3470;
                  if (v1291) {
                    llvm::MetadataTracking::track((uint64_t)v3584, v1291, 2);
                  }
                  DWORD2(v3584[0]) = *(_DWORD *)(a2 + 60);
                  v1293 = sub_1CD7F330C(v1290, 51, (uint64_t)v3584, (llvm *)4, 0);
                  if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v1294 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                  *v1294 = v1293;
                  v1294[1] = v1292;
                  ++LODWORD(v3555[1]);
                  if (*(void *)&v3584[0])
                  {
                    int v1295 = **(unsigned char **)&v3584[0];
                    if ((v1295 - 4) > 0x1E)
                    {
                      if ((v1295 - 3) >= 0xFFFFFFFE) {
                        uint64_t v1473 = *(void *)&v3584[0];
                      }
                      else {
                        uint64_t v1473 = 0;
                      }
                      if ((v1295 - 3) < 0xFFFFFFFE)
                      {
                        if (v1295 == 3) {
                          *(void *)(*(void *)&v3584[0] + 8) = 0;
                        }
                        goto LABEL_1514;
                      }
                      unint64_t v1474 = v1473 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) != 2
                        && !*(_DWORD *)(*(void *)&v3584[0] + 12))
                      {
                        goto LABEL_1514;
                      }
                      uint64_t v3317 = *(void *)(*(void *)&v3584[0] + 16);
                      if ((v3317 & 4) == 0) {
                        goto LABEL_1514;
                      }
                      unint64_t v1474 = v3317 & 0xFFFFFFFFFFFFFFF8;
                      if (!v1474) {
                        goto LABEL_1514;
                      }
                    }
                    *(void *)&long long v3554 = v3584;
                    sub_1CC5FA668(v1474 + 16, &v3554);
                  }
LABEL_1514:
                  v1297 = sub_1CD7EBF14(*(void *)(a3 + 16), v1279, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                  if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v1298 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                  *v1298 = v1297;
                  v1298[1] = v1296;
                  unsigned int v1248 = ++LODWORD(v3555[1]);
                  LODWORD(v1279) = v1279 + 1;
                  goto LABEL_1517;
                }
                v1285 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v1286 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                *v1286 = v1285;
                v1286[1] = v1284;
                ++LODWORD(v3555[1]);
                v1252 += 2;
                v1288 = sub_1CD7EBF14(*(void *)(a3 + 16), v1279, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v1289 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
                *v1289 = v1288;
                v1289[1] = v1287;
                unsigned int v1248 = ++LODWORD(v3555[1]);
              }
              else
              {
                uint64_t v691 = v3431;
                uint64_t v51 = (uint64_t)v3437;
              }
              int v1283 = v3580;
              LODWORD(v1279) = v1252;
              goto LABEL_1506;
            }
            uint64_t v691 = 0;
            char v690 = 1;
            uint64_t v51 = v48;
LABEL_774:
            unsigned int v693 = sub_1CD1117B0(*(llvm::GlobalValue **)(v48 + 80), *(void *)(v48 + 88), *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344), 0);
            uint64_t v694 = *(void *)(a3 + 16);
            if (v690)
            {
              uint64_t v51 = (uint64_t)sub_1CD7ED9FC(v694, 67, (llvm *)5, 0, v693, 5);
              int v3445 = 0;
              unint64_t v49 = v49 & 0xFFFFFFFF00000000 | v695;
            }
            else
            {
              uint64_t v691 = sub_1CD7ED9FC(v694, 64, (llvm *)6, 0, v693 >> 1, 3);
              int v3445 = 0;
              v3414 = (uint64_t *)v696;
            }
            goto LABEL_1240;
          }
          if (v44 <= 2451)
          {
            if ((v44 - 2419) < 2)
            {
              *(_OWORD *)v3569 = *(_OWORD *)(v39 + 80);
              v1536 = *(uint64_t **)(v39 + 120);
              int v1537 = *((unsigned __int16 *)v1536 + 12);
              if (v1537 == 35 || v1537 == 11) {
                int v1539 = 8184;
              }
              else {
                int v1539 = 8185;
              }
              if (v42 >= 0x41) {
                int v41 = *(int **)v41;
              }
              if (*(void *)v41 == 2419) {
                uint64_t v1540 = 16;
              }
              else {
                uint64_t v1540 = 272;
              }
              if (v1537 == 35 || v1537 == 11)
              {
                uint64_t v1541 = v1536[10];
                v1542 = (uint64_t *)(v1541 + 24);
                if (*(_DWORD *)(v1541 + 32) >= 0x41u) {
                  v1542 = (uint64_t *)*v1542;
                }
                v1536 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1542, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                int v1544 = v1543;
              }
              else
              {
                int v1544 = *(_DWORD *)(v39 + 128);
              }
              v3555[0] = sub_1CD7EBF14(*(void *)(a3 + 16), v1540, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
              v3555[1] = v1929;
              v3556 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
              *(void *)&long long v3557 = v1930;
              *((void **)&v3557 + 1) = v3569[0];
              LODWORD(v3558) = v3569[1];
              v3559 = (const char *)v1536;
              LODWORD(v3560) = v1544;
              v3561 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
              uint64_t v3562 = v1931;
              uint64_t v1933 = *(void *)(a2 + 32);
              uint64_t v1932 = *(void *)(a2 + 40);
              v1934 = *(void **)v1933;
              LODWORD(v3564) = *(_DWORD *)(v1933 + 8);
              v3563 = v1934;
              v1793 = sub_1CD801044(*(void *)(a3 + 16), v1539, (uint64_t)&v3551, v1932, *(unsigned __int16 *)(a2 + 58), (uint64_t *)v3555, 6);
            }
            else
            {
              if (v44 != 2424)
              {
                if (v44 != 2451) {
                  goto LABEL_2037;
                }
                goto LABEL_1217;
              }
              uint64_t v1787 = *(void *)(*(void *)(v39 + 80) + 80);
              v1788 = (unsigned int *)(v1787 + 24);
              if (*(_DWORD *)(v1787 + 32) >= 0x41u) {
                v1788 = *(unsigned int **)v1788;
              }
              uint64_t v1789 = *(void *)(a3 + 16);
              v1790 = sub_1CD7EBF14(v1789, *v1788, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
              v1793 = sub_1CD8012C4(v1789, 4593, (uint64_t)&v3551, (llvm *)1, 0, (uint64_t)v1790, v1791, v1792, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
            }
            *(void *)&long long v3553 = v1793;
            DWORD2(v3553) = 0;
            goto LABEL_2038;
          }
          if ((v44 - 2703) < 2)
          {
            uint64_t v647 = sub_1CB9E5C1C(0, a2, 0, *(uint64_t **)(a3 + 16), (unsigned char *)a1[23037], 0);
            uint64_t v37 = (uint64_t)sub_1CB9E5C1C(1, a2, 0, *(uint64_t **)(a3 + 16), (unsigned char *)a1[23037], (uint64_t)v647);
            goto LABEL_20;
          }
          if (v44 != 2452)
          {
            if (v44 != 2453) {
              goto LABEL_2037;
            }
LABEL_1217:
            long long v3491 = *(_OWORD *)(v39 + 80);
            int v1065 = *(uint64_t **)(v39 + 120);
            unint64_t v1066 = *(void *)(v39 + 128);
            int v1067 = *((unsigned __int16 *)v1065 + 12);
            if (v1067 == 35 || v1067 == 11)
            {
              uint64_t v1068 = v1065[10];
              v1069 = (unsigned __int8 *)(v1068 + 24);
              if (*(_DWORD *)(v1068 + 32) >= 0x41u) {
                v1069 = *(unsigned __int8 **)v1069;
              }
              int v1065 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1069, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
              unint64_t v1066 = v1066 & 0xFFFFFFFF00000000 | v1070;
            }
            v3555[0] = &v3556;
            v3555[1] = (void *)0x800000000;
            uint64_t v1072 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
            if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v1073 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
            *int v1073 = v1072;
            v1073[1] = v1071;
            unsigned int v1074 = LODWORD(v3555[1]) + 1;
            LODWORD(v3555[1]) = v1074;
            if (v1074 >= HIDWORD(v3555[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v1075 = (uint64_t **)((char *)v3555[0] + 16 * v1074);
            *uint64_t v1075 = v1065;
            v1075[1] = (uint64_t *)v1066;
            unsigned int v1076 = LODWORD(v3555[1]) + 1;
            LODWORD(v3555[1]) = v1076;
            if (v1076 >= HIDWORD(v3555[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v3555[0] + v1076) = v3491;
            unsigned int v1077 = LODWORD(v3555[1]) + 1;
            LODWORD(v3555[1]) = v1077;
            if (v1077 >= HIDWORD(v3555[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v3555[0] + v1077) = *(_OWORD *)*(void *)(a2 + 32);
            uint64_t v1078 = ++LODWORD(v3555[1]);
            uint64_t v1079 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
            uint64_t v1080 = (void *)(v1079 + 24);
            unsigned int v1081 = *(_DWORD *)(v1079 + 32);
            if (*(unsigned char *)(a1[23037] + 326))
            {
              if (v1081 >= 0x41) {
                uint64_t v1080 = (void *)*v1080;
              }
              v1800 = (void *)*v1080;
              if (v1800 == (void *)2453)
              {
                int v2177 = *((unsigned __int16 *)v1065 + 12);
                BOOL v1084 = v2177 == 35 || v2177 == 11;
                int v1085 = 756;
                int v1086 = 753;
                goto LABEL_2524;
              }
              if (v1800 == (void *)2451)
              {
                int v1801 = *((unsigned __int16 *)v1065 + 12);
                BOOL v1084 = v1801 == 35 || v1801 == 11;
                int v1085 = 754;
                int v1086 = 751;
                goto LABEL_2524;
              }
            }
            else
            {
              if (v1081 >= 0x41) {
                uint64_t v1080 = (void *)*v1080;
              }
              double v1082 = (void *)*v1080;
              if (v1082 == (void *)2453)
              {
                int v2176 = *((unsigned __int16 *)v1065 + 12);
                BOOL v1084 = v2176 == 35 || v2176 == 11;
                int v1085 = 750;
                int v1086 = 747;
                goto LABEL_2524;
              }
              if (v1082 == (void *)2451)
              {
                int v1083 = *((unsigned __int16 *)v1065 + 12);
                BOOL v1084 = v1083 == 35 || v1083 == 11;
                int v1085 = 748;
                int v1086 = 745;
LABEL_2524:
                if (v1084) {
                  int v1988 = v1086;
                }
                else {
                  int v1988 = v1085;
                }
                goto LABEL_2527;
              }
            }
            int v1988 = 0;
LABEL_2527:
            *(void *)&long long v3553 = sub_1CD801450(*(void *)(a3 + 16), v1988, (uint64_t)&v3551, (llvm *)1, 0, (uint64_t *)v3555[0], v1078);
            DWORD2(v3553) = 0;
            goto LABEL_3533;
          }
          uint64_t v1843 = *(void *)(v39 + 80);
          uint64_t v1844 = *(void *)(v39 + 88);
          long long v3477 = *(_OWORD *)(v39 + 120);
          v1846 = *(uint64_t **)(v39 + 160);
          unint64_t v1845 = *(void *)(v39 + 168);
          int v1847 = *((unsigned __int16 *)v1846 + 12);
          if (v1847 == 35 || v1847 == 11)
          {
            uint64_t v1848 = v1846[10];
            v1849 = (unsigned __int8 *)(v1848 + 24);
            if (*(_DWORD *)(v1848 + 32) >= 0x41u) {
              v1849 = *(unsigned __int8 **)v1849;
            }
            v1846 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1849, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
            unint64_t v1845 = v1845 & 0xFFFFFFFF00000000 | v1850;
          }
          v3555[0] = &v3556;
          v3555[1] = (void *)0x800000000;
          v1852 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
          if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1853 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
          *v1853 = v1852;
          v1853[1] = v1851;
          unsigned int v1854 = LODWORD(v3555[1]) + 1;
          LODWORD(v3555[1]) = v1854;
          if (v1854 >= HIDWORD(v3555[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1855 = (uint64_t **)((char *)v3555[0] + 16 * v1854);
          *v1855 = v1846;
          v1855[1] = (uint64_t *)v1845;
          ++LODWORD(v3555[1]);
          v1856 = sub_1CD8015C0(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1843, v1844);
          v1858 = v1857;
          v1859 = sub_1CD8015C0(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3551, (llvm *)4, 0, v1843, v1844);
          v1861 = v1860;
          v3569[0] = &v3570;
          v3569[1] = (void *)0x800000000;
          v1863 = sub_1CD7EBF14(*(void *)(a3 + 16), 12, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
          if (LODWORD(v3569[1]) >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1864 = (uint64_t **)((char *)v3569[0] + 16 * LODWORD(v3569[1]));
          *v1864 = v1863;
          v1864[1] = v1862;
          unsigned int v1865 = LODWORD(v3569[1]) + 1;
          LODWORD(v3569[1]) = v1865;
          if (v1865 >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1866 = (uint64_t **)((char *)v3569[0] + 16 * v1865);
          *v1866 = v1856;
          v1866[1] = v1858;
          ++LODWORD(v3569[1]);
          v1868 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
          if (LODWORD(v3569[1]) >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1869 = (uint64_t **)((char *)v3569[0] + 16 * LODWORD(v3569[1]));
          *v1869 = v1868;
          v1869[1] = v1867;
          unsigned int v1870 = LODWORD(v3569[1]) + 1;
          LODWORD(v3569[1]) = v1870;
          if (v1870 >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1871 = (uint64_t **)((char *)v3569[0] + 16 * v1870);
          *v1871 = v1859;
          v1871[1] = v1861;
          ++LODWORD(v3569[1]);
          v1873 = sub_1CD7EBF14(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
          if (LODWORD(v3569[1]) >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1874 = (uint64_t **)((char *)v3569[0] + 16 * LODWORD(v3569[1]));
          *v1874 = v1873;
          v1874[1] = v1872;
          unsigned int v1875 = LODWORD(v3569[1]) + 1;
          LODWORD(v3569[1]) = v1875;
          if (v1875 >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v3569[0] + v1875) = v3477;
          ++LODWORD(v3569[1]);
          v1877 = sub_1CD7EBF14(*(void *)(a3 + 16), 3, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
          if (LODWORD(v3569[1]) >= HIDWORD(v3569[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1878 = (uint64_t **)((char *)v3569[0] + 16 * LODWORD(v3569[1]));
          *v1878 = v1877;
          v1878[1] = v1876;
          ++LODWORD(v3569[1]);
          v1879 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v3551, (llvm *)0xAE, 0, (uint64_t *)v3569[0], LODWORD(v3569[1]));
          if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1880 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
          *v1880 = v1879;
          v1880[1] = 0;
          unsigned int v1881 = LODWORD(v3555[1]) + 1;
          LODWORD(v3555[1]) = v1881;
          if (v1881 >= HIDWORD(v3555[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v3555[0] + v1881) = *(_OWORD *)*(void *)(a2 + 32);
          uint64_t v1882 = ++LODWORD(v3555[1]);
          int v1883 = *((unsigned __int16 *)v1846 + 12);
          BOOL v1884 = v1883 == 11 || v1883 == 35;
          if (v1884) {
            int v1885 = 752;
          }
          else {
            int v1885 = 755;
          }
          if (v1884) {
            int v1886 = 746;
          }
          else {
            int v1886 = 749;
          }
          if (*(unsigned char *)(a1[23037] + 326)) {
            int v1887 = v1885;
          }
          else {
            int v1887 = v1886;
          }
          *(void *)&long long v3553 = sub_1CD801450(*(void *)(a3 + 16), v1887, (uint64_t)&v3551, (llvm *)1, 0, (uint64_t *)v3555[0], v1882);
          DWORD2(v3553) = 0;
          v1888 = v3569[0];
          if (v3569[0] == &v3570) {
            goto LABEL_2268;
          }
LABEL_2267:
          free(v1888);
          goto LABEL_2268;
        }
        uint64_t v355 = *(void *)(a2 + 32);
        uint64_t v356 = *(void *)(*(void *)(v355 + 40) + 80);
        int v357 = (unsigned int *)(v356 + 24);
        if (*(_DWORD *)(v356 + 32) >= 0x41u) {
          int v357 = *(unsigned int **)v357;
        }
        uint64_t v358 = *v357;
        v3569[0] = &v3570;
        v3569[1] = (void *)0x100000000;
        if ((v358 - 1282) < 0x190)
        {
          llvm::GPUSDISel::ExpandIntrinsicSample(a2, *(llvm::APFloatBase **)(a3 + 16), v358, v3569, 4, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB9D1380, 0, 1, 25);
          int v359 = (int)v3569[1];
          if (LODWORD(v3569[1]) != 1)
          {
            if (LODWORD(v3569[1]))
            {
              if (LODWORD(v3569[1]) == 3)
              {
                uint64_t v360 = *(void **)(a3 + 16);
                uint64_t v361 = (uint64_t *)(*(void *)(*(void *)v3569[0] + 40) + 16 * *((unsigned int *)v3569[0] + 2));
                uint64_t v362 = *v361;
                uint64_t v363 = v361[1];
                uint64_t v364 = (uint64_t *)(*(void *)(*((void *)v3569[0] + 2) + 40) + 16
                                                                                 * *((unsigned int *)v3569[0] + 6));
                uint64_t v365 = (uint64_t *)(*(void *)(*((void *)v3569[0] + 4) + 40)
                                 + 16 * *((unsigned int *)v3569[0] + 10));
                uint64_t v366 = sub_1CD7FAB44((uint64_t)v360, v362, v363, *v364, v364[1], *v365, v365[1]);
                uint64_t v369 = (uint64_t)sub_1CD7FFB94(v360, (const char *)0x37, (const llvm::APInt *)&v3551, v366, v367, *(void *)v3569[0], *((void *)v3569[0] + 1), v368, *((void *)v3569[0] + 2), *(_OWORD *)((char *)v3569[0] + 24), *((void *)v3569[0] + 4), *((void *)v3569[0] + 5));
LABEL_1642:
                *(void *)&long long v3553 = v369;
                *((void *)&v3553 + 1) = v370;
                goto LABEL_692;
              }
              goto LABEL_1640;
            }
            goto LABEL_689;
          }
          goto LABEL_691;
        }
        if ((int)v358 > 2305)
        {
          switch((int)v358)
          {
            case 2544:
            case 2706:
            case 2707:
            case 2708:
              goto LABEL_2578;
            case 2545:
            case 2546:
            case 2547:
            case 2548:
            case 2549:
            case 2550:
            case 2551:
            case 2552:
            case 2553:
            case 2554:
            case 2555:
            case 2556:
            case 2557:
            case 2558:
            case 2559:
            case 2560:
            case 2561:
            case 2562:
            case 2563:
            case 2564:
            case 2565:
            case 2566:
            case 2567:
            case 2568:
            case 2569:
            case 2570:
            case 2571:
            case 2572:
            case 2573:
            case 2574:
            case 2575:
            case 2576:
              uint64_t v369 = (uint64_t)sub_1CB9E5C1C(0, a2, 0, *(uint64_t **)(a3 + 16), (unsigned char *)a1[23037], 0);
              goto LABEL_1642;
            case 2577:
            case 2578:
            case 2579:
            case 2580:
            case 2581:
            case 2582:
            case 2583:
            case 2584:
            case 2585:
            case 2586:
            case 2587:
            case 2588:
            case 2589:
            case 2590:
            case 2591:
            case 2592:
            case 2593:
            case 2594:
            case 2595:
            case 2596:
            case 2597:
            case 2598:
            case 2599:
            case 2600:
            case 2601:
            case 2602:
            case 2603:
            case 2604:
            case 2605:
            case 2606:
            case 2607:
            case 2608:
            case 2609:
            case 2610:
            case 2611:
            case 2612:
            case 2613:
            case 2614:
            case 2615:
            case 2616:
            case 2617:
            case 2618:
            case 2619:
            case 2620:
            case 2621:
            case 2622:
            case 2623:
            case 2624:
            case 2625:
            case 2626:
            case 2627:
            case 2628:
            case 2629:
            case 2662:
            case 2663:
            case 2664:
            case 2665:
            case 2666:
            case 2667:
            case 2668:
            case 2669:
            case 2670:
            case 2671:
            case 2672:
            case 2673:
            case 2674:
            case 2675:
            case 2676:
            case 2677:
            case 2678:
            case 2679:
            case 2680:
            case 2681:
            case 2682:
            case 2683:
            case 2684:
            case 2687:
            case 2688:
            case 2689:
            case 2690:
            case 2691:
            case 2692:
            case 2693:
            case 2694:
            case 2695:
            case 2696:
            case 2697:
            case 2698:
            case 2699:
            case 2700:
            case 2701:
            case 2702:
            case 2703:
            case 2704:
            case 2705:
              goto LABEL_2037;
            case 2630:
            case 2631:
            case 2632:
            case 2633:
            case 2634:
            case 2635:
            case 2636:
            case 2637:
            case 2638:
            case 2639:
            case 2640:
            case 2641:
            case 2642:
            case 2643:
            case 2644:
            case 2645:
            case 2646:
            case 2647:
            case 2648:
            case 2649:
            case 2650:
            case 2651:
            case 2652:
            case 2653:
            case 2654:
            case 2655:
            case 2656:
            case 2657:
            case 2658:
            case 2659:
            case 2660:
            case 2661:
              uint64_t v369 = sub_1CD407804((uint64_t)a1, a2, a3);
              goto LABEL_1642;
            case 2685:
            case 2686:
              v2963 = *(uint64_t **)(v355 + 80);
              int v2964 = *((unsigned __int16 *)v2963 + 12);
              if (v2964 == 35 || v2964 == 11) {
                int v2966 = 4096;
              }
              else {
                int v2966 = 4097;
              }
              if (v358 == 2685) {
                uint64_t v2967 = 16;
              }
              else {
                uint64_t v2967 = 272;
              }
              if (v2964 == 35 || v2964 == 11)
              {
                uint64_t v2968 = v2963[10];
                v2969 = (uint64_t *)(v2968 + 24);
                if (*(_DWORD *)(v2968 + 32) >= 0x41u) {
                  v2969 = (uint64_t *)*v2969;
                }
                v2963 = sub_1CD7EBF14(*(void *)(a3 + 16), *v2969, (const llvm::APInt *)&v3551, (llvm *)5, 0, 1, 0);
                int v2971 = v2970;
              }
              else
              {
                int v2971 = *(_DWORD *)(v355 + 88);
              }
              v3555[0] = sub_1CD7EBF14(*(void *)(a3 + 16), v2967, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
              v3555[1] = v3149;
              v3556 = sub_1CD7EBF14(*(void *)(a3 + 16), 4, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
              *(void *)&long long v3557 = v3150;
              *((void *)&v3557 + 1) = v2963;
              LODWORD(v3558) = v2971;
              v3559 = (const char *)sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)6, 0, 1, 0);
              uint64_t v3560 = v3151;
              uint64_t v3153 = *(void *)(a2 + 32);
              uint64_t v3152 = *(void *)(a2 + 40);
              v3154 = *(uint64_t **)v3153;
              LODWORD(v3562) = *(_DWORD *)(v3153 + 8);
              v3561 = v3154;
              *(void *)&long long v3553 = sub_1CD801044(*(void *)(a3 + 16), v2966, (uint64_t)&v3551, v3152, *(unsigned __int16 *)(a2 + 58), (uint64_t *)v3555, 5);
              goto LABEL_690;
            default:
              if ((v358 - 2376) < 0x20)
              {
                uint64_t v369 = sub_1CD40704C((uint64_t)a1, a2, a3);
                goto LABEL_1642;
              }
              if (v358 != 2306) {
                goto LABEL_2037;
              }
              v2550 = *(uint64_t **)(a2 + 40);
              uint64_t v2551 = *v2550;
              uint64_t v2552 = v2550[1];
              uint64_t v2554 = sub_1CD7EEB94(*(void *)(a3 + 16), 18, (llvm *)5, 0);
              v2555 = v2553;
              if (v2551 == 5)
              {
                v2556 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2557 = *((void *)v2556 + 104);
                if (v2557) {
                  __int16 v2558 = *(_WORD *)(v2557 + 8);
                }
                else {
                  __int16 v2558 = 0;
                }
                uint64_t v2554 = (uint64_t)sub_1CD7F3564(v2556, (const char *)0x18C, (uint64_t)&v3551, (llvm *)4, 0, v2554, v2553, v2558);
                v2555 = v3239;
                __int16 v3202 = 0;
                v3200 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v3240 = *((void *)v3200 + 104);
                if (v3240) {
                  __int16 v3202 = *(_WORD *)(v3240 + 8);
                }
                uint64_t v3241 = 199;
                uint64_t v3242 = 5;
                uint64_t v3243 = 0;
              }
              else
              {
                v3200 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v3201 = *((void *)v3200 + 104);
                if (v3201) {
                  __int16 v3202 = *(_WORD *)(v3201 + 8);
                }
                else {
                  __int16 v3202 = 0;
                }
                uint64_t v3241 = 396;
                uint64_t v3242 = v2551;
                uint64_t v3243 = v2552;
              }
              v3244 = sub_1CD7F3564(v3200, (const char *)v3241, (uint64_t)&v3551, (llvm *)v3242, v3243, v2554, v2555, v3202);
              uint64_t v369 = (uint64_t)sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v3551, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v3244, v3245, v3246, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8));
              break;
          }
          goto LABEL_1642;
        }
        if ((v358 - 1682) < 0x8C)
        {
          llvm::GPUSDISel::ExpandIntrinsicSample(a2, *(llvm::APFloatBase **)(a3 + 16), v358, v3569, 4, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB9D1380, 0, 1, 25);
          int v359 = (int)v3569[1];
          if (LODWORD(v3569[1]) != 1)
          {
            if (LODWORD(v3569[1]))
            {
LABEL_1640:
              if (v359 == 2)
              {
                v1480 = *(void **)(a3 + 16);
                v1481 = (uint64_t *)(*(void *)(*(void *)v3569[0] + 40) + 16 * *((unsigned int *)v3569[0] + 2));
                v1482 = (uint64_t *)(*(void *)(*((void *)v3569[0] + 2) + 40)
                                  + 16 * *((unsigned int *)v3569[0] + 6));
                uint64_t v1483 = sub_1CD7F95FC((uint64_t)v1480, *v1481, v1481[1], *v1482, v1482[1]);
                uint64_t v369 = (uint64_t)sub_1CD7FFB18(v1480, (const char *)0x37, (const llvm::APInt *)&v3551, v1483, v1484, *(void *)v3569[0], *((void *)v3569[0] + 1), v1485, *((void *)v3569[0] + 2), *((void *)v3569[0] + 3));
                goto LABEL_1642;
              }
              v3393 = "Not yet supported!";
LABEL_3624:
              llvm::report_fatal_error((llvm *)v3393, (const llvm::Twine *)1);
            }
LABEL_689:
            *(void *)&long long v3553 = a2;
LABEL_690:
            DWORD2(v3553) = 0;
LABEL_692:
            unint64_t v646 = v3569[0];
            if (v3569[0] == &v3570) {
              goto LABEL_2038;
            }
            goto LABEL_1628;
          }
LABEL_691:
          long long v3553 = *(_OWORD *)v3569[0];
          goto LABEL_692;
        }
        int v2319 = v358 - 2134;
        if ((v358 - 2134) >= 5)
        {
          if (v358 != 2140) {
            goto LABEL_2037;
          }
LABEL_2578:
          uint64_t v2320 = *(void *)v355;
          uint64_t v2321 = *(void *)(v355 + 8);
          uint64_t v2322 = *(void *)(a2 + 40);
          v2323 = *(llvm **)v2322;
          uint64_t v2324 = *(void *)(v2322 + 8);
          int v2325 = sub_1CB9F6460(v358);
          uint64_t v2326 = *(void *)(a3 + 16);
          uint64_t v2328 = sub_1CD7EEB94(v2326, dword_1CDB0D6CC[v2325], (llvm *)5, 0);
          __int16 v2330 = 0;
          uint64_t v2331 = *(void *)(v2326 + 832);
          if (v2331) {
            __int16 v2330 = *(_WORD *)(v2331 + 8);
          }
          v2332 = sub_1CCFDED5C(v2326, 397, (const llvm::APInt *)&v3551, v2323, v2324, v2328, v2327, v2329, v2320, v2321, v2330);
          uint64_t v369 = (uint64_t)sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v3551, *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v2332, v2333, v2334, v2320, v2321);
          goto LABEL_1642;
        }
        v3584[0] = *(_OWORD *)v355;
        *(void *)&long long v3554 = 0;
        DWORD2(v3554) = 0;
        uint64_t v2877 = *(void *)(*(void *)(a3 + 16) + 40);
        uint64_t v2878 = *(void *)(v2877 + 48);
        if (!v2878)
        {
          uint64_t v2878 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v2877 + 8) + 216))(*(void *)(v2877 + 8), v2877 + 128, *(void *)(*(void *)(a3 + 16) + 40));
          *(void *)(v2877 + 48) = v2878;
        }
        switch(v2319)
        {
          case 1:
            v2879 = (unsigned char *)a1[23037];
            if (v2879[320])
            {
              int v2880 = 4824;
            }
            else
            {
              int v2880 = 4824;
              if (!v2879[321])
              {
                if (v2879[322]) {
                  int v2880 = 4824;
                }
                else {
                  int v2880 = 4822;
                }
              }
            }
            uint64_t v3190 = *(void *)(a2 + 32);
            *(void *)&long long v3554 = *(void *)(v3190 + 80);
            DWORD2(v3554) = *(_DWORD *)(v3190 + 88);
            goto LABEL_3252;
          case 2:
            v2879 = (unsigned char *)a1[23037];
            if (v2879[320])
            {
              int v2880 = 4824;
            }
            else
            {
              int v2880 = 4824;
              if (!v2879[321])
              {
                if (v2879[322]) {
                  int v2880 = 4824;
                }
                else {
                  int v2880 = 4822;
                }
              }
            }
            uint64_t v3181 = *(void *)(a2 + 32);
            *(void *)&long long v3554 = *(void *)(v3181 + 80);
            DWORD2(v3554) = *(_DWORD *)(v3181 + 88);
            uint64_t v3182 = *(void *)(*(void *)(v3181 + 120) + 80);
            v3183 = (void *)(v3182 + 24);
            if (*(_DWORD *)(v3182 + 32) >= 0x41u) {
              v3183 = (void *)*v3183;
            }
            HIDWORD(v3550) = *v3183;
            uint64_t v3184 = *(void *)(v3181 + 160);
            goto LABEL_3247;
          case 3:
            v2879 = (unsigned char *)a1[23037];
            if (v2879[320])
            {
              int v2880 = 4823;
            }
            else
            {
              int v2880 = 4823;
              if (!v2879[321])
              {
                if (v2879[322]) {
                  int v2880 = 4823;
                }
                else {
                  int v2880 = 4821;
                }
              }
            }
            uint64_t v3185 = *(void *)(a2 + 32);
            uint64_t v3186 = *(void *)(*(void *)(v3185 + 80) + 80);
            v3187 = (void *)(v3186 + 24);
            if (*(_DWORD *)(v3186 + 32) >= 0x41u) {
              v3187 = (void *)*v3187;
            }
            HIDWORD(v3550) = *v3187;
            uint64_t v3184 = *(void *)(v3185 + 120);
LABEL_3247:
            uint64_t v3188 = *(void *)(v3184 + 80);
            v3189 = (void *)(v3188 + 24);
            if (*(_DWORD *)(v3188 + 32) >= 0x41u) {
              v3189 = (void *)*v3189;
            }
            LODWORD(v3550) = *v3189;
            break;
          case 4:
            uint64_t v3012 = 0;
            v3555[0] = &v3556;
            *(void *)&long long v3557 = 0;
            v3556 = 0;
            v3555[1] = (void *)0x400000004;
            uint64_t v3013 = *(void *)(*(void *)(*(void *)(a2 + 32) + 80) + 32);
            char v3014 = 1;
            while (1)
            {
              char v3015 = v3014;
              uint64_t v3016 = *(void *)(*(void *)(v3013 + 40 * v3012) + 80);
              v3017 = (uint64_t *)(v3016 + 24);
              if (*(_DWORD *)(v3016 + 32) >= 0x41u) {
                v3017 = (uint64_t *)*v3017;
              }
              char v3014 = 0;
              v3018 = (uint64_t *)&(&v3556)[v3012];
              int v3019 = *((_DWORD *)v3018 + 1) | *((_DWORD *)v3017 + 1);
              *(_DWORD *)v3018 |= *(_DWORD *)v3017;
              *((_DWORD *)v3018 + 1) = v3019;
              uint64_t v3012 = 1;
              if ((v3015 & 1) == 0) {
                sub_1CB9E57D8(v2878, (unsigned int *)&v3556, 4u, v2877);
              }
            }
          default:
            v2879 = (unsigned char *)a1[23037];
            if (v2879[320])
            {
              int v2880 = 4823;
            }
            else
            {
              int v2880 = 4823;
              if (!v2879[321])
              {
                if (v2879[322]) {
                  int v2880 = 4823;
                }
                else {
                  int v2880 = 4821;
                }
              }
            }
LABEL_3252:
            uint64_t v3550 = 0;
            break;
        }
        int v3549 = 16;
        int v3191 = v2879[326];
        uint64_t v3192 = *(void *)(a3 + 16);
        if (!(void)v3554)
        {
          if (v3191)
          {
            v3542 = v3551;
            if (v3551) {
              llvm::MetadataTracking::track((uint64_t)&v3542, v3551, 2);
            }
            int v3543 = v3552;
            LODWORD(v3555[0]) = 15;
            sub_1CD407FD4(v3192, v2880, (uint64_t)&v3542, 0, (unsigned int *)&v3549, (unsigned int *)v3555, (unsigned int *)&v3550 + 1, (unsigned int *)&v3550, v3584);
            v3193 = v3542;
            if (!v3542) {
              goto LABEL_3406;
            }
            int v3194 = *v3542;
            if ((v3194 - 4) > 0x1E)
            {
              if ((v3194 - 3) >= 0xFFFFFFFE) {
                v3276 = v3542;
              }
              else {
                v3276 = 0;
              }
              if ((v3194 - 3) < 0xFFFFFFFE) {
                goto LABEL_3404;
              }
              unint64_t v3196 = (unint64_t)(v3276 + 8);
            }
            else
            {
              if ((v3542[1] & 0x7F) != 2 && !*((_DWORD *)v3542 + 3)) {
                goto LABEL_3406;
              }
              uint64_t v3198 = *((void *)v3542 + 2);
              if ((v3198 & 4) == 0) {
                goto LABEL_3406;
              }
              unint64_t v3196 = v3198 & 0xFFFFFFFFFFFFFFF8;
              if (!v3196) {
                goto LABEL_3406;
              }
            }
            v3274 = &v3542;
            goto LABEL_3403;
          }
          v3540 = v3551;
          if (v3551) {
            llvm::MetadataTracking::track((uint64_t)&v3540, v3551, 2);
          }
          int v3541 = v3552;
          LODWORD(v3555[0]) = 15;
          sub_1CD4080F0(v3192, v2880, (uint64_t)&v3540, 0x10u, (unsigned int *)v3555, (unsigned int *)&v3550 + 1, (unsigned int *)&v3550, v3584);
          v3193 = v3540;
          if (!v3540) {
            goto LABEL_3406;
          }
          int v3194 = *v3540;
          if ((v3194 - 4) <= 0x1E)
          {
            if ((v3540[1] & 0x7F) == 2 || *((_DWORD *)v3540 + 3))
            {
              uint64_t v3195 = *((void *)v3540 + 2);
              if ((v3195 & 4) != 0)
              {
                unint64_t v3196 = v3195 & 0xFFFFFFFFFFFFFFF8;
                if (v3196) {
                  goto LABEL_3384;
                }
              }
            }
LABEL_3406:
            sub_1CB9E59E0(v2878, 0, 128, v2877);
          }
          if ((v3194 - 3) >= 0xFFFFFFFE) {
            v3273 = v3540;
          }
          else {
            v3273 = 0;
          }
          if ((v3194 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v3196 = (unint64_t)(v3273 + 8);
LABEL_3384:
            v3274 = &v3540;
LABEL_3403:
            v3555[0] = v3274;
            sub_1CC5FA668(v3196 + 16, v3555);
            goto LABEL_3406;
          }
LABEL_3404:
          if (v3194 == 3) {
            *((void *)v3193 + 1) = 0;
          }
          goto LABEL_3406;
        }
        if (!v3191)
        {
          v3544 = v3551;
          if (v3551) {
            llvm::MetadataTracking::track((uint64_t)&v3544, v3551, 2);
          }
          int v3545 = v3552;
          LODWORD(v3555[0]) = 15;
          sub_1CD407EFC(v3192, v2880, (uint64_t)&v3544, 0x10u, (unsigned int *)v3555, &v3554, (unsigned int *)&v3550 + 1, (unsigned int *)&v3550, v3584);
          v3193 = v3544;
          if (!v3544) {
            goto LABEL_3406;
          }
          int v3194 = *v3544;
          if ((v3194 - 4) > 0x1E)
          {
            if ((v3194 - 3) >= 0xFFFFFFFE) {
              v3275 = v3544;
            }
            else {
              v3275 = 0;
            }
            if ((v3194 - 3) < 0xFFFFFFFE) {
              goto LABEL_3404;
            }
            unint64_t v3196 = (unint64_t)(v3275 + 8);
          }
          else
          {
            if ((v3544[1] & 0x7F) != 2 && !*((_DWORD *)v3544 + 3)) {
              goto LABEL_3406;
            }
            uint64_t v3197 = *((void *)v3544 + 2);
            if ((v3197 & 4) == 0) {
              goto LABEL_3406;
            }
            unint64_t v3196 = v3197 & 0xFFFFFFFFFFFFFFF8;
            if (!v3196) {
              goto LABEL_3406;
            }
          }
          v3274 = &v3544;
          goto LABEL_3403;
        }
        v3547 = v3551;
        if (v3551) {
          llvm::MetadataTracking::track((uint64_t)&v3547, v3551, 2);
        }
        int v3548 = v3552;
        LODWORD(v3555[0]) = 15;
        unsigned int v3546 = 0;
        sub_1CD407E1C(v3192, v2880, (uint64_t)&v3547, 0, (unsigned int *)&v3549, (unsigned int *)v3555, &v3554, (int *)&v3546, (unsigned int *)&v3550 + 1, (unsigned int *)&v3550, v3584);
        v3193 = v3547;
        if (!v3547) {
          goto LABEL_3406;
        }
        int v3194 = *v3547;
        if ((v3194 - 4) > 0x1E)
        {
          if ((v3194 - 3) >= 0xFFFFFFFE) {
            v3277 = v3547;
          }
          else {
            v3277 = 0;
          }
          if ((v3194 - 3) < 0xFFFFFFFE) {
            goto LABEL_3404;
          }
          unint64_t v3196 = (unint64_t)(v3277 + 8);
        }
        else
        {
          if ((v3547[1] & 0x7F) != 2 && !*((_DWORD *)v3547 + 3)) {
            goto LABEL_3406;
          }
          uint64_t v3199 = *((void *)v3547 + 2);
          if ((v3199 & 4) == 0) {
            goto LABEL_3406;
          }
          unint64_t v3196 = v3199 & 0xFFFFFFFFFFFFFFF8;
          if (!v3196) {
            goto LABEL_3406;
          }
        }
        v3274 = &v3547;
        goto LABEL_3403;
      }
      if (v12 == 4)
      {
        unsigned int v397 = *(_DWORD **)(a2 + 32);
        uint64_t v398 = *(void *)v397;
        uint64_t v399 = *(void *)(*(void *)v397 + 48);
        if (!v399) {
          goto LABEL_2037;
        }
        int v400 = v397[2];
        int v401 = 1;
        uint64_t v402 = *(void *)(*(void *)v397 + 48);
        do
        {
          if (*(_DWORD *)(v402 + 8) == v400)
          {
            if (!v401) {
              goto LABEL_392;
            }
            --v401;
          }
          uint64_t v402 = *(void *)(v402 + 32);
        }
        while (v402);
        if (!v401)
        {
          int v403 = *(unsigned __int16 *)(v398 + 24);
          if (v403 == 201 || v403 == 199)
          {
            uint64_t v404 = *(_DWORD **)(v398 + 32);
            uint64_t v398 = *(void *)v404;
            int v400 = v404[2];
            uint64_t v399 = *(void *)(*(void *)v404 + 48);
          }
        }
LABEL_392:
        if (!v399) {
          goto LABEL_2037;
        }
        int v405 = 1;
        do
        {
          if (*(_DWORD *)(v399 + 8) == v400)
          {
            if (!v405) {
              goto LABEL_2037;
            }
            --v405;
          }
          uint64_t v399 = *(void *)(v399 + 32);
        }
        while (v399);
        if (v405 || (*(_WORD *)(v398 + 24) & 0xFFFE) != 0x18C) {
          goto LABEL_2037;
        }
LABEL_493:
        long long v312 = *(_OWORD *)v397;
        goto LABEL_2009;
      }
      if (v12 == 15)
      {
        if (**(unsigned char **)(a2 + 40) != 6) {
          goto LABEL_2037;
        }
        uint64_t v424 = sub_1CD7ED208(*(void *)(a3 + 16), *(_DWORD *)(a2 + 76), (llvm *)5, 0, 0);
        uint64_t v426 = v425;
        uint64_t v427 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v428 = *(void **)(a2 + 64);
        v3555[0] = v428;
        if (v428) {
          llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v428, 2);
        }
        LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
        uint64_t v429 = *((void *)v427 + 104);
        if (v429) {
          __int16 v324 = *(_WORD *)(v429 + 8);
        }
        else {
          __int16 v324 = 0;
        }
        uint64_t v683 = v427;
        uint64_t v684 = 199;
        uint64_t v318 = 6;
        goto LABEL_982;
      }
      if (v12 != 46) {
        goto LABEL_2037;
      }
      uint64_t v94 = *(void *)(a2 + 32);
      uint64_t v95 = *(void *)v94;
      uint64_t v96 = *(void *)(*(void *)v94 + 80);
      int v97 = (unsigned int *)(v96 + 24);
      if (*(_DWORD *)(v96 + 32) >= 0x41u) {
        int v97 = *(unsigned int **)v97;
      }
      uint64_t v98 = *v97;
      if ((int)v98 > 2304)
      {
        if ((int)v98 > 2605)
        {
          switch((int)v98)
          {
            case 2665:
            case 2666:
            case 2667:
            case 2669:
            case 2670:
            case 2671:
            case 2672:
            case 2673:
            case 2674:
            case 2675:
            case 2676:
            case 2677:
            case 2678:
            case 2679:
              goto LABEL_698;
            case 2668:
            case 2680:
            case 2683:
            case 2685:
            case 2686:
            case 2687:
            case 2688:
            case 2689:
            case 2690:
            case 2691:
            case 2692:
            case 2693:
            case 2694:
            case 2695:
            case 2696:
            case 2697:
            case 2698:
            case 2699:
            case 2700:
            case 2701:
            case 2702:
            case 2703:
            case 2704:
              goto LABEL_2037;
            case 2681:
              goto LABEL_1423;
            case 2682:
LABEL_1431:
              if (!sub_1CB8C2014(*(void *)(v94 + 40)) && !sub_1CB8C2014(*(void *)(v94 + 80))) {
                goto LABEL_2037;
              }
              long long v312 = *(_OWORD *)(v94 + 120);
              goto LABEL_2009;
            case 2684:
LABEL_1425:
              unsigned int v397 = (_DWORD *)(v94 + 40);
              uint64_t v1228 = *(void *)(v94 + 40);
              int v1229 = *(unsigned __int16 *)(v1228 + 24);
              if (v1229 == 35 || v1229 == 11)
              {
                uint64_t v1230 = *(void *)(v1228 + 80);
                v1231 = (void *)(v1230 + 24);
                if (*(_DWORD *)(v1230 + 32) >= 0x41u) {
                  v1231 = (void *)*v1231;
                }
                if (*v1231 == 1)
                {
                  long long v312 = *(_OWORD *)(v94 + 80);
                  goto LABEL_2009;
                }
              }
              uint64_t v1490 = *(void *)(v94 + 80);
              int v1491 = *(unsigned __int16 *)(v1490 + 24);
              if (v1491 == 35 || v1491 == 11)
              {
                uint64_t v1492 = *(void *)(v1490 + 80);
                v1493 = (void *)(v1492 + 24);
                if (*(_DWORD *)(v1492 + 32) >= 0x41u) {
                  v1493 = (void *)*v1493;
                }
                if (*v1493 == 1) {
                  goto LABEL_493;
                }
              }
              if (!sub_1CB8C2014(v1228) && !sub_1CB8C2014(v1490)) {
                goto LABEL_2037;
              }
              uint64_t v479 = *(void *)(a3 + 16);
              v1494 = *(uint64_t **)(a2 + 40);
              uint64_t v186 = *v1494;
              unsigned int v187 = (void *)v1494[1];
              goto LABEL_797;
            case 2705:
LABEL_1434:
              if (!sub_1CB8C2014(*(void *)(v94 + 80))) {
                goto LABEL_2037;
              }
              long long v312 = *(_OWORD *)(v94 + 40);
              goto LABEL_2009;
            default:
              unsigned int v791 = v98 - 2606;
              switch((int)v98)
              {
                case 2606:
                case 2607:
                case 2608:
                case 2609:
                  int v793 = *(uint64_t **)(v94 + 40);
                  uint64_t v792 = *(void *)(v94 + 48);
                  uint64_t v794 = *(uint64_t **)(v94 + 120);
                  uint64_t v795 = *(void *)(v94 + 128);
                  if (v98 != 2608) {
                    goto LABEL_1961;
                  }
                  int v796 = *((unsigned __int16 *)v793 + 12);
                  if (v796 == 36 || v796 == 12) {
                    v797 = v793;
                  }
                  else {
                    v797 = 0;
                  }
                  int v1723 = *((unsigned __int16 *)v794 + 12);
                  if (v1723 == 12 || v1723 == 36)
                  {
                    if (v797) {
                      goto LABEL_1961;
                    }
                    uint64_t v1724 = v794[10];
                    v1726 = *(void **)(v1724 + 32);
                    v1725 = (llvm::detail::DoubleAPFloat *)(v1724 + 32);
                    if (v1726 == &unk_1CFB2E344) {
                      llvm::detail::DoubleAPFloat::bitcastToAPInt(v1725, (llvm::APInt *)v3569);
                    }
                    else {
                      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v1725, (uint64_t)v3569);
                    }
                    v1727 = v3569;
                    if (LODWORD(v3569[1]) >= 0x41) {
                      v1727 = (void **)v3569[0];
                    }
                    *(void *)&long long v3554 = *v1727;
                    uint64_t v1728 = v794[5] + 16 * v795;
                    v1729 = *(llvm **)v1728;
                    uint64_t v1730 = *(void *)(v1728 + 8);
                    int v1731 = sub_1CD3FB4E4(*(void *)v1728, 3);
                    uint64_t v1732 = *(void *)(a3 + 16);
                    v3555[0] = v3551;
                    if (v3551) {
                      llvm::MetadataTracking::track((uint64_t)v3555, v3551, 2);
                    }
                    LODWORD(v3555[1]) = v3552;
                    LODWORD(v3584[0]) = 0;
                    uint64_t v794 = sub_1CD3FD0DC(v1732, v1731, (uint64_t)v3555, v1729, v1730, (unsigned int *)v3584, (uint64_t *)&v3554);
                    if (!v3555[0]) {
                      goto LABEL_1959;
                    }
                    int v1733 = *(unsigned __int8 *)v3555[0];
                    if ((v1733 - 4) > 0x1E)
                    {
                      if ((v1733 - 3) >= 0xFFFFFFFE) {
                        v3009 = v3555[0];
                      }
                      else {
                        v3009 = 0;
                      }
                      if ((v1733 - 3) < 0xFFFFFFFE)
                      {
                        if (v1733 == 3) {
                          *((void *)v3555[0] + 1) = 0;
                        }
                        goto LABEL_1959;
                      }
                      unint64_t v3010 = (unint64_t)v3009 + 8;
                    }
                    else
                    {
                      if ((*((unsigned char *)v3555[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3555[0] + 3)) {
                        goto LABEL_1959;
                      }
                      uint64_t v3398 = *((void *)v3555[0] + 2);
                      if ((v3398 & 4) == 0) {
                        goto LABEL_1959;
                      }
                      unint64_t v3010 = v3398 & 0xFFFFFFFFFFFFFFF8;
                      if (!v3010) {
                        goto LABEL_1959;
                      }
                    }
                    *(void *)&v3584[0] = v3555;
                    sub_1CC5FA668(v3010 + 16, v3584);
LABEL_1959:
                    LODWORD(v795) = 0;
                    goto LABEL_3007;
                  }
                  if (!v797) {
                    goto LABEL_1961;
                  }
                  uint64_t v2926 = v797[10];
                  v2928 = *(void **)(v2926 + 32);
                  v2927 = (llvm::detail::DoubleAPFloat *)(v2926 + 32);
                  if (v2928 == &unk_1CFB2E344) {
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2927, (llvm::APInt *)v3569);
                  }
                  else {
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2927, (uint64_t)v3569);
                  }
                  v2929 = v3569;
                  if (LODWORD(v3569[1]) >= 0x41) {
                    v2929 = (void **)v3569[0];
                  }
                  *(void *)&long long v3554 = *v2929;
                  uint64_t v2930 = v793[5] + 16 * v792;
                  v2931 = *(llvm **)v2930;
                  uint64_t v2932 = *(void *)(v2930 + 8);
                  int v2933 = sub_1CD3FB4E4(*(void *)v2930, 3);
                  uint64_t v2934 = *(void *)(a3 + 16);
                  v3555[0] = v3551;
                  if (v3551) {
                    llvm::MetadataTracking::track((uint64_t)v3555, v3551, 2);
                  }
                  LODWORD(v3555[1]) = v3552;
                  LODWORD(v3584[0]) = 0;
                  int v793 = sub_1CD3FD0DC(v2934, v2933, (uint64_t)v3555, v2931, v2932, (unsigned int *)v3584, (uint64_t *)&v3554);
                  if (!v3555[0]) {
                    goto LABEL_3006;
                  }
                  int v2935 = *(unsigned __int8 *)v3555[0];
                  if ((v2935 - 4) > 0x1E)
                  {
                    if ((v2935 - 3) >= 0xFFFFFFFE) {
                      v3147 = v3555[0];
                    }
                    else {
                      v3147 = 0;
                    }
                    if ((v2935 - 3) < 0xFFFFFFFE)
                    {
                      if (v2935 == 3) {
                        *((void *)v3555[0] + 1) = 0;
                      }
                      goto LABEL_3006;
                    }
                    unint64_t v3148 = (unint64_t)v3147 + 8;
                  }
                  else
                  {
                    if ((*((unsigned char *)v3555[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3555[0] + 3)) {
                      goto LABEL_3006;
                    }
                    uint64_t v3399 = *((void *)v3555[0] + 2);
                    if ((v3399 & 4) == 0) {
                      goto LABEL_3006;
                    }
                    unint64_t v3148 = v3399 & 0xFFFFFFFFFFFFFFF8;
                    if (!v3148) {
                      goto LABEL_3006;
                    }
                  }
                  *(void *)&v3584[0] = v3555;
                  sub_1CC5FA668(v3148 + 16, v3584);
LABEL_3006:
                  LODWORD(v792) = 0;
LABEL_3007:
                  if (LODWORD(v3569[1]) >= 0x41 && v3569[0]) {
                    MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
                  }
LABEL_1961:
                  uint64_t v1734 = *(void *)(a2 + 32);
                  uint64_t v1735 = *(void *)(v1734 + 80);
                  int v1736 = *(unsigned __int16 *)(v1735 + 24);
                  if (v1736 == 11 || v1736 == 35)
                  {
                    uint64_t v1737 = *(void *)(v1735 + 80);
                    v1738 = (void *)(v1737 + 24);
                    if (*(_DWORD *)(v1737 + 32) >= 0x41u) {
                      v1738 = (void *)*v1738;
                    }
                    if (!*v1738)
                    {
                      long long v312 = *(_OWORD *)(v1734 + 40);
                      goto LABEL_2009;
                    }
                  }
                  else
                  {
                    uint64_t v2419 = *(void *)(*(void *)(a3 + 16) + 40);
                    uint64_t v2420 = *(void *)(v2419 + 48);
                    if (!v2420)
                    {
                      uint64_t v2420 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2419 + 8) + 216))(*(void *)(v2419 + 8), v2419 + 128, v2419);
                      *(void *)(v2419 + 48) = v2420;
                    }
                    *(unsigned char *)(v2420 + 453) = 1;
                  }
                  if (v791 > 3) {
                    uint64_t v2421 = 0xFFFFFFFFLL;
                  }
                  else {
                    uint64_t v2421 = dword_1CDB0D000[v791];
                  }
                  uint64_t v37 = (uint64_t)sub_1CD7EBE80(*(void **)(a3 + 16), (const char *)v2421, (const llvm::APInt *)&v3551, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)v793, v792, a8, *(void *)(*(void *)(a2 + 32) + 80), *(void *)(*(void *)(a2 + 32) + 88), (uint64_t)v794, v795, *(void *)(*(void *)(a2 + 32) + 160), *(void *)(*(void *)(a2 + 32) + 168));
                  goto LABEL_20;
                case 2610:
                case 2611:
                case 2612:
                case 2613:
                case 2614:
                case 2615:
                case 2618:
                case 2619:
                case 2620:
                case 2621:
                case 2622:
                case 2624:
                case 2626:
                  goto LABEL_2037;
                case 2616:
                case 2617:
                  v2350 = *(void **)(a2 + 64);
                  v3555[0] = v2350;
                  if (v2350)
                  {
                    llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v2350, 2);
                    int v11 = *(_DWORD *)(a2 + 60);
                    uint64_t v94 = *(void *)(a2 + 32);
                  }
                  LODWORD(v3555[1]) = v11;
                  uint64_t v3452 = *(void *)(v94 + 48);
                  uint64_t v3465 = *(void *)(v94 + 40);
                  uint64_t v3500 = *(void *)(v94 + 80);
                  uint64_t v3481 = *(void *)(v94 + 88);
                  uint64_t v2351 = *(void *)(a2 + 40);
                  v2352 = *(llvm **)v2351;
                  uint64_t v3441 = *(void *)(v2351 + 8);
                  if (*(void *)v2351 == 4) {
                    uint64_t v2353 = 2580;
                  }
                  else {
                    uint64_t v2353 = 2581;
                  }
                  v2354 = sub_1CD7EBF14(*(void *)(a3 + 16), v2353, (const llvm::APInt *)v3555, (llvm *)5, 0, 0, 0);
                  uint64_t v2356 = v2355;
                  v2357 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)v3555, (llvm *)4, 0, 0, 0);
                  uint64_t v3427 = v2358;
                  uint64_t v3433 = (uint64_t)v2357;
                  uint64_t v2359 = *(void *)(a3 + 16);
                  v2360 = sub_1CD7EBF14(v2359, 28, (const llvm::APInt *)v3555, (llvm *)4, 0, 0, 0);
                  __int16 v2363 = 0;
                  uint64_t v2364 = *(void *)(v2359 + 832);
                  if (v2364) {
                    __int16 v2363 = *(_WORD *)(v2364 + 8);
                  }
                  v2367 = sub_1CCFDED5C(v2359, 171, (const llvm::APInt *)v3555, (llvm *)4, 0, v3500, v3481, v2362, (uint64_t)v2360, v2361, v2363);
                  uint64_t v2368 = v2365;
                  __int16 v2369 = 0;
                  v2370 = *(void **)(a3 + 16);
                  uint64_t v2371 = v2370[104];
                  if (v2371) {
                    __int16 v2369 = *(_WORD *)(v2371 + 8);
                  }
                  v2373 = sub_1CD7F5D38(v2370, (const char *)0x2E, (const llvm::APInt *)v3555, v2352, v3441, (uint64_t)v2354, v2356, v2366, v3465, v3452, (uint64_t)v2367, v2365, SHIDWORD(v2365), v2369);
                  uint64_t v2375 = v2374;
                  uint64_t v2376 = *(void *)(a3 + 16);
                  uint64_t v2377 = *(void *)(v2376 + 832);
                  if (v2377) {
                    LOWORD(v2377) = *(_WORD *)(v2377 + 8);
                  }
                  v2380 = sub_1CCFDED5C(v2376, 56, (const llvm::APInt *)v3555, (llvm *)4, 0, (uint64_t)v2367, v2368, v2372, v3433, v3427, v2377);
                  __int16 v2381 = 0;
                  unint64_t v2382 = v2368 & 0xFFFFFFFF00000000 | v2378;
                  v2383 = *(void **)(a3 + 16);
                  uint64_t v2384 = v2383[104];
                  if (v2384) {
                    __int16 v2381 = *(_WORD *)(v2384 + 8);
                  }
                  unint64_t v2385 = v2368 & 0xFFFFFFFF00000000;
                  v2386 = sub_1CD7F5D38(v2383, (const char *)0x2E, (const llvm::APInt *)v3555, v2352, v3441, (uint64_t)v2354, v2356, v2379, v3465, v3452, (uint64_t)v2380, v2378, (v2368 & 0xFFFFFFFF00000000) >> 32, v2381);
                  v2390 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3555, (uint64_t)v2380, v2382, v3500, v3481, (uint64_t)v2386, v2387, (uint64_t)v2373, v2375, SHIDWORD(v2375), 0x11u);
                  uint64_t v2391 = *(void *)(a3 + 16);
                  uint64_t v2392 = *(void *)(v2391 + 832);
                  if (v2392) {
                    LOWORD(v2392) = *(_WORD *)(v2392 + 8);
                  }
                  unint64_t v2393 = v2375 & 0xFFFFFFFF00000000 | v2388;
                  v2396 = sub_1CCFDED5C(v2391, 56, (const llvm::APInt *)v3555, (llvm *)4, 0, (uint64_t)v2380, v2382, v2389, v3433, v3427, v2392);
                  __int16 v2397 = 0;
                  uint64_t v2398 = v2394 | v2385;
                  v2399 = *(void **)(a3 + 16);
                  uint64_t v2400 = v2399[104];
                  if (v2400) {
                    __int16 v2397 = *(_WORD *)(v2400 + 8);
                  }
                  unint64_t v2401 = v2375 & 0xFFFFFFFF00000000;
                  v2402 = sub_1CD7F5D38(v2399, (const char *)0x2E, (const llvm::APInt *)v3555, v2352, v3441, (uint64_t)v2354, v2356, v2395, v3465, v3452, (uint64_t)v2396, v2394 | v2385, SHIDWORD(v2385), v2397);
                  v2406 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3555, (uint64_t)v2396, v2398, v3500, v3481, (uint64_t)v2402, v2403, (uint64_t)v2390, v2393, SHIDWORD(v2393), 0x11u);
                  uint64_t v2407 = *(void *)(a3 + 16);
                  uint64_t v2408 = *(void *)(v2407 + 832);
                  if (v2408) {
                    LOWORD(v2408) = *(_WORD *)(v2408 + 8);
                  }
                  unint64_t v2409 = v2404 | v2401;
                  v2412 = sub_1CCFDED5C(v2407, 56, (const llvm::APInt *)v3555, (llvm *)4, 0, (uint64_t)v2396, v2398, v2405, v3433, v3427, v2408);
                  __int16 v2413 = 0;
                  int v2414 = v2410 | v2385;
                  v2415 = *(void **)(a3 + 16);
                  uint64_t v2416 = v2415[104];
                  if (v2416) {
                    __int16 v2413 = *(_WORD *)(v2416 + 8);
                  }
                  v2417 = sub_1CD7F5D38(v2415, (const char *)0x2E, (const llvm::APInt *)v3555, v2352, v3441, (uint64_t)v2354, v2356, v2411, v3465, v3452, (uint64_t)v2412, v2410 | v2385, SHIDWORD(v2385), v2413);
                  int v859 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3555, (uint64_t)v2412, v2414, v3500, v3481, (uint64_t)v2417, v2418, (uint64_t)v2406, v2409, SHIDWORD(v2409), 0x11u);
                  goto LABEL_984;
                case 2623:
                  v1596 = *(unsigned __int8 **)(a2 + 64);
                  *(void *)&v3584[0] = v1596;
                  if (v1596)
                  {
                    llvm::MetadataTracking::track((uint64_t)v3584, v1596, 2);
                    int v11 = *(_DWORD *)(a2 + 60);
                    uint64_t v94 = *(void *)(a2 + 32);
                  }
                  DWORD2(v3584[0]) = v11;
                  __int16 v1597 = *(_WORD *)(a2 + 72);
                  uint64_t v1598 = *(void *)(a3 + 16);
                  v1599 = *(uint64_t **)(a2 + 40);
                  uint64_t v1600 = *v1599;
                  uint64_t v1601 = v1599[1];
                  uint64_t v1602 = *(void *)(v94 + 40);
                  int v1603 = *(unsigned __int16 *)(v1602 + 24);
                  if (v1603 != 36 && v1603 != 12)
                  {
                    uint64_t v1604 = 0;
                    v1605 = 0;
                    goto LABEL_1816;
                  }
                  uint64_t v2456 = *(void *)(v1602 + 80);
                  uint64_t v2457 = *(void *)(v2456 + 32);
                  if ((_UNKNOWN *)v2457 == &unk_1CFB2E344)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], (const llvm::detail::DoubleAPFloat *)(v2456 + 32));
                  }
                  else
                  {
                    v3555[1] = *(void **)(v2456 + 32);
                    if ((*(_DWORD *)(v2457 + 8) + 64) >= 0x80) {
                      operator new[]();
                    }
                    char v2458 = *(unsigned char *)(v2456 + 52);
                    int v2459 = v2458 & 7;
                    BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v2458 & 8 | v2458 & 7;
                    LODWORD(v3557) = *(_DWORD *)(v2456 + 48);
                    BOOL v2461 = (v2458 & 6) != 0 && v2459 != 3;
                    if (v2459 == 1 || v2461)
                    {
                      uint64_t v2462 = *((unsigned int *)v3555[1] + 2);
                      if ((v2462 - 64) <= 0xFFFFFF7F) {
                        v2463 = (uint64_t **)v3556;
                      }
                      else {
                        v2463 = &v3556;
                      }
                      v2466 = *(uint64_t ***)(v2456 + 40);
                      v2465 = (uint64_t **)(v2456 + 40);
                      v2464 = v2466;
                      if ((*((_DWORD *)*(v2465 - 1) + 2) - 64) >= 0xFFFFFF80) {
                        v2464 = v2465;
                      }
                      if (v2462 <= 0xFFFFFFBF)
                      {
                        unint64_t v2467 = (unint64_t)(v2462 + 64) >> 6;
                        do
                        {
                          v2468 = *v2464++;
                          *v2463++ = v2468;
                          --v2467;
                        }
                        while (v2467);
                      }
                    }
                  }
                  BYTE4(v3550) = 0;
                  llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, (unsigned char *)&v3550 + 4);
                  double v2469 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3555);
                  double v2470 = sin(v2469 * 1.57079633);
                  v2471 = *(void **)(a2 + 64);
                  v3569[0] = v2471;
                  if (v2471) {
                    llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v2471, 2);
                  }
                  LODWORD(v3569[1]) = *(_DWORD *)(a2 + 60);
                  v1605 = sub_1CD7ECDC4(v1598, (uint64_t)v3569, v1600, v1601, 0, v2470);
                  uint64_t v1604 = v2472;
                  if (!v3569[0]) {
                    goto LABEL_2717;
                  }
                  int v2473 = *(unsigned __int8 *)v3569[0];
                  if ((v2473 - 4) > 0x1E)
                  {
                    if ((v2473 - 3) >= 0xFFFFFFFE) {
                      v2961 = v3569[0];
                    }
                    else {
                      v2961 = 0;
                    }
                    if ((v2473 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v2962 = (unint64_t)v2961 + 8;
LABEL_3069:
                      *(void *)&long long v3554 = v3569;
                      sub_1CC5FA668(v2962 + 16, &v3554);
                      goto LABEL_2717;
                    }
                    if (v2473 == 3) {
                      *((void *)v3569[0] + 1) = 0;
                    }
                  }
                  else if ((*((unsigned char *)v3569[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3569[0] + 3))
                  {
                    uint64_t v3397 = *((void *)v3569[0] + 2);
                    if ((v3397 & 4) != 0)
                    {
                      unint64_t v2962 = v3397 & 0xFFFFFFFFFFFFFFF8;
                      if (v2962) {
                        goto LABEL_3069;
                      }
                    }
                  }
LABEL_2717:
                  if (v3555[1] == &unk_1CFB2E344)
                  {
                    sub_1CB845718((uint64_t *)&v3556);
                  }
                  else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
                  {
                    MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
                  }
LABEL_1816:
                  if ((unint64_t)v1605 | v1604)
                  {
                    *(void *)&long long v3553 = v1605;
                    *((void *)&v3553 + 1) = v1604;
                  }
                  else
                  {
                    uint64_t v2673 = *(void *)(a2 + 32);
                    v2674 = *(uint64_t **)(v2673 + 40);
                    unint64_t v2675 = *(void *)(v2673 + 48);
                    uint64_t v2676 = **(unsigned __int8 **)(a2 + 40);
                    v2677 = *(llvm::APFloatBase **)(a3 + 16);
                    if (v2676 == 9)
                    {
                      uint64_t v2678 = *((void *)v2677 + 104);
                      if (v2678) {
                        __int16 v2679 = *(_WORD *)(v2678 + 8);
                      }
                      else {
                        __int16 v2679 = 0;
                      }
                      v2674 = sub_1CD7F3564(v2677, (const char *)0xD7, (uint64_t)v3584, (llvm *)0xA, 0, (uint64_t)v2674, (void *)v2675, v2679);
                      unint64_t v2675 = v2675 & 0xFFFFFFFF00000000 | v2986;
                      v2677 = *(llvm::APFloatBase **)(a3 + 16);
                    }
                    uint64_t v2987 = *((void *)v2677 + 104);
                    if (v2987) {
                      __int16 v2988 = *(_WORD *)(v2987 + 8);
                    }
                    else {
                      __int16 v2988 = 0;
                    }
                    v2989 = sub_1CD7F3564(v2677, (const char *)0x1A4, (uint64_t)v3584, (llvm *)0xA, 0, (uint64_t)v2674, (void *)v2675, v2988);
                    uint64_t v2991 = v2990;
                    uint64_t v2992 = *(void *)(a3 + 16);
                    v2993 = sub_1CD7EBF14(v2992, 2624, (const llvm::APInt *)v3584, (llvm *)5, 0, 0, 0);
                    v2996 = sub_1CCFDED5C(v2992, 46, (const llvm::APInt *)v3584, (llvm *)0xA, 0, (uint64_t)v2993, v2994, v2995, (uint64_t)v2989, v2991, v1597);
                    v2999 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3584, (llvm *)0xA, 0, (uint64_t)v2989, v2991, v2998, (uint64_t)v2996, v2997, v1597);
                    *(void *)&long long v3553 = v2999;
                    *((void *)&v3553 + 1) = v3000;
                    if (v2676 == 9)
                    {
                      uint64_t v3001 = (uint64_t)v2999;
                      uint64_t v3002 = v3000;
                      uint64_t v3003 = *(void *)(a3 + 16);
                      v3004 = sub_1CD7EBF14(v3003, 0, (const llvm::APInt *)v3584, (llvm *)5, 0, 0, 0);
                      uint64_t v3007 = *(void *)(v3003 + 832);
                      if (v3007) {
                        LOWORD(v3007) = *(_WORD *)(v3007 + 8);
                      }
                      *(void *)&long long v3553 = sub_1CCFDED5C(v3003, 212, (const llvm::APInt *)v3584, (llvm *)9, 0, v3001, v3002, v3006, (uint64_t)v3004, v3005, v3007);
                      DWORD2(v3553) = v3008;
                    }
                  }
                  unint64_t v861 = *(void **)&v3584[0];
                  if (!*(void *)&v3584[0]) {
                    goto LABEL_2038;
                  }
                  int v862 = **(unsigned char **)&v3584[0];
                  if ((v862 - 4) > 0x1E)
                  {
                    if ((v862 - 3) >= 0xFFFFFFFE) {
                      uint64_t v2172 = *(void *)&v3584[0];
                    }
                    else {
                      uint64_t v2172 = 0;
                    }
                    if ((v862 - 3) < 0xFFFFFFFE) {
                      goto LABEL_3016;
                    }
                    unint64_t v1196 = v2172 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) != 2
                      && !*(_DWORD *)(*(void *)&v3584[0] + 12))
                    {
                      goto LABEL_2038;
                    }
                    uint64_t v1606 = *(void *)(*(void *)&v3584[0] + 16);
                    if ((v1606 & 4) == 0) {
                      goto LABEL_2038;
                    }
                    unint64_t v1196 = v1606 & 0xFFFFFFFFFFFFFFF8;
                    if (!v1196) {
                      goto LABEL_2038;
                    }
                  }
                  v1645 = (void **)v3584;
                  break;
                case 2625:
                  goto LABEL_1431;
                case 2627:
                  goto LABEL_1425;
                case 2628:
                  if (*(unsigned char *)(a1[23037] + 353))
                  {
                    v1594 = *(void **)(a2 + 64);
                    v3555[0] = v1594;
                    if (v1594)
                    {
                      llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1594, 2);
                      int v11 = *(_DWORD *)(a2 + 60);
                      uint64_t v94 = *(void *)(a2 + 32);
                    }
                    LODWORD(v3555[1]) = v11;
                    uint64_t v321 = *(void *)(v94 + 40);
                    int v322 = *(void **)(v94 + 48);
                    __int16 v324 = *(_WORD *)(a2 + 72);
                    uint64_t v683 = *(llvm::APFloatBase **)(a3 + 16);
                    v1595 = *(uint64_t **)(a2 + 40);
                    uint64_t v318 = *v1595;
                    uint64_t v319 = v1595[1];
                    uint64_t v684 = 419;
LABEL_983:
                    int v859 = sub_1CD7F3564(v683, (const char *)v684, (uint64_t)v3555, (llvm *)v318, v319, v321, v322, v324);
LABEL_984:
                    *(void *)&long long v3553 = v859;
                    *((void *)&v3553 + 1) = v860;
                    unint64_t v861 = v3555[0];
                    if (!v3555[0]) {
                      goto LABEL_2038;
                    }
                    int v862 = *(unsigned __int8 *)v3555[0];
                    if ((v862 - 4) <= 0x1E)
                    {
                      if ((*((unsigned char *)v3555[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3555[0] + 3)) {
                        goto LABEL_2038;
                      }
                      uint64_t v863 = *((void *)v3555[0] + 2);
                      if ((v863 & 4) == 0) {
                        goto LABEL_2038;
                      }
                      unint64_t v864 = v863 & 0xFFFFFFFFFFFFFFF8;
                      if (!v864) {
                        goto LABEL_2038;
                      }
                      goto LABEL_996;
                    }
                    if ((v862 - 3) >= 0xFFFFFFFE) {
                      unsigned int v865 = v3555[0];
                    }
                    else {
                      unsigned int v865 = 0;
                    }
                    if ((v862 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v864 = (unint64_t)v865 + 8;
LABEL_996:
                      v3569[0] = v3555;
                      uint64_t v866 = v864 + 16;
                      unint64_t v867 = v3569;
LABEL_997:
                      sub_1CC5FA668(v866, v867);
                      goto LABEL_2038;
                    }
LABEL_3016:
                    if (v862 == 3) {
                      v861[1] = 0;
                    }
                    goto LABEL_2038;
                  }
                  v3393 = "Unsupported sqrt intrinsic.";
                  goto LABEL_3624;
                case 2629:
                  goto LABEL_1434;
                default:
                  if (v98 != 2732) {
                    goto LABEL_2037;
                  }
                  goto LABEL_698;
              }
              break;
          }
LABEL_1871:
          v3555[0] = v1645;
          uint64_t v866 = v1196 + 16;
          unint64_t v867 = v3555;
          goto LABEL_997;
        }
        switch((int)v98)
        {
          case 2305:
          case 2307:
          case 2308:
          case 2365:
          case 2408:
          case 2409:
          case 2410:
          case 2423:
          case 2444:
          case 2484:
          case 2485:
          case 2486:
            goto LABEL_698;
          case 2306:
          case 2333:
          case 2334:
          case 2335:
          case 2336:
          case 2361:
          case 2362:
          case 2363:
          case 2364:
          case 2366:
          case 2367:
          case 2368:
          case 2369:
          case 2370:
          case 2371:
          case 2372:
          case 2373:
          case 2376:
          case 2377:
          case 2378:
          case 2379:
          case 2380:
          case 2381:
          case 2382:
          case 2383:
          case 2384:
          case 2385:
          case 2386:
          case 2387:
          case 2388:
          case 2389:
          case 2390:
          case 2391:
          case 2392:
          case 2393:
          case 2394:
          case 2395:
          case 2396:
          case 2397:
          case 2398:
          case 2399:
          case 2400:
          case 2401:
          case 2402:
          case 2403:
          case 2404:
          case 2405:
          case 2406:
          case 2407:
          case 2411:
          case 2412:
          case 2413:
          case 2414:
          case 2415:
          case 2416:
          case 2417:
          case 2418:
          case 2419:
          case 2420:
          case 2421:
          case 2422:
          case 2424:
          case 2425:
          case 2426:
          case 2427:
          case 2428:
          case 2429:
          case 2430:
          case 2431:
          case 2432:
          case 2433:
          case 2434:
          case 2435:
          case 2436:
          case 2437:
          case 2438:
          case 2439:
          case 2440:
          case 2441:
          case 2442:
          case 2443:
          case 2447:
          case 2448:
          case 2449:
          case 2450:
          case 2451:
          case 2452:
          case 2453:
          case 2470:
          case 2471:
          case 2472:
          case 2473:
          case 2474:
          case 2475:
          case 2476:
          case 2477:
          case 2478:
          case 2479:
          case 2480:
          case 2481:
          case 2482:
          case 2483:
          case 2488:
          case 2489:
          case 2490:
          case 2493:
          case 2494:
          case 2495:
          case 2496:
          case 2497:
          case 2498:
          case 2499:
          case 2500:
          case 2501:
          case 2502:
          case 2503:
          case 2504:
          case 2505:
          case 2506:
          case 2507:
          case 2508:
          case 2509:
          case 2510:
          case 2511:
          case 2512:
          case 2513:
          case 2514:
          case 2515:
          case 2516:
          case 2518:
          case 2519:
          case 2520:
          case 2521:
          case 2523:
          case 2524:
          case 2525:
            goto LABEL_2037;
          case 2309:
          case 2310:
          case 2311:
          case 2312:
          case 2313:
          case 2314:
          case 2315:
          case 2316:
          case 2317:
          case 2318:
          case 2319:
          case 2320:
          case 2321:
          case 2322:
          case 2323:
          case 2324:
          case 2325:
          case 2326:
          case 2327:
          case 2328:
          case 2329:
          case 2330:
          case 2331:
          case 2332:
          case 2337:
          case 2338:
          case 2339:
          case 2340:
          case 2341:
          case 2342:
          case 2343:
          case 2344:
          case 2345:
          case 2346:
          case 2347:
          case 2348:
          case 2349:
          case 2350:
          case 2351:
          case 2352:
          case 2353:
          case 2354:
          case 2355:
          case 2356:
          case 2357:
          case 2358:
          case 2359:
          case 2360:
          case 2454:
          case 2455:
          case 2456:
          case 2457:
          case 2458:
          case 2459:
          case 2460:
          case 2461:
          case 2462:
          case 2463:
          case 2464:
          case 2465:
          case 2466:
          case 2467:
          case 2468:
          case 2469:
          case 2528:
          case 2529:
          case 2530:
          case 2531:
          case 2532:
          case 2533:
          case 2534:
          case 2535:
          case 2536:
          case 2537:
          case 2538:
          case 2539:
          case 2540:
          case 2541:
          case 2542:
          case 2543:
            goto LABEL_1091;
          case 2374:
          case 2375:
            uint64_t v2343 = *(void *)(v94 + 40);
            uint64_t v2344 = *(void *)(v94 + 120);
            uint64_t v2345 = *(void *)(v94 + 128);
            v2346 = *(llvm::APFloatBase **)(a3 + 16);
            if (**(unsigned char **)(v2343 + 40) == 5) {
              uint64_t v2347 = 38;
            }
            else {
              uint64_t v2347 = 40;
            }
            uint64_t v2348 = *((void *)v2346 + 104);
            if (v2348) {
              __int16 v2349 = *(_WORD *)(v2348 + 8);
            }
            else {
              __int16 v2349 = 0;
            }
            uint64_t v2585 = *(void *)(v94 + 80);
            uint64_t v2584 = *(void *)(v94 + 88);
            v2586 = sub_1CD7F3564(v2346, (const char *)0xD8, (uint64_t)&v3551, (llvm *)v2347, 0, v2343, *(void **)(v94 + 48), v2349);
            uint64_t v2588 = v2587;
            uint64_t v2589 = *(void *)(a3 + 16);
            v2590 = sub_1CD7EBF14(v2589, 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            uint64_t v2593 = *(void *)(v2589 + 832);
            if (v2593) {
              LOWORD(v2593) = *(_WORD *)(v2593 + 8);
            }
            v2594 = sub_1CCFDED5C(v2589, 148, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v2586, v2588, v2592, (uint64_t)v2590, v2591, v2593);
            unint64_t v2597 = v2588 & 0xFFFFFFFF00000000 | v2596;
            uint64_t v2598 = *(void *)(a3 + 16);
            uint64_t v2599 = *(void *)(v2598 + 832);
            if (v2599) {
              LOWORD(v2599) = *(_WORD *)(v2599 + 8);
            }
            v2601 = sub_1CCFDED5C(v2598, 146, (const llvm::APInt *)&v3551, (llvm *)0x26, 0, (uint64_t)v2594, v2597, v2595, v2344, v2345, v2599);
            unint64_t v2602 = (unint64_t)v2600;
            v2603 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2604 = *((void *)v2603 + 104);
            if (v2604) {
              __int16 v2605 = *(_WORD *)(v2604 + 8);
            }
            else {
              __int16 v2605 = 0;
            }
            v2868 = sub_1CD7F3564(v2603, (const char *)0xD8, (uint64_t)&v3551, (llvm *)5, 0, (uint64_t)v2601, v2600, v2605);
            unint64_t v2870 = v2602 & 0xFFFFFFFF00000000 | v2869;
            if (v98 != 2375)
            {
              v2871 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v2872 = *((void *)v2871 + 104);
              if (v2872) {
                __int16 v2873 = *(_WORD *)(v2872 + 8);
              }
              else {
                __int16 v2873 = 0;
              }
              v2881 = sub_1CD7F3564(v2871, (const char *)0xC7, (uint64_t)&v3551, (llvm *)5, 0, v2585, (void *)v2584, v2873);
              unint64_t v2884 = v2584 & 0xFFFFFFFF00000000 | v2883;
              uint64_t v2885 = *(void *)(a3 + 16);
              uint64_t v2886 = *(void *)(v2885 + 832);
              if (v2886) {
                LOWORD(v2886) = *(_WORD *)(v2886 + 8);
              }
              v2887 = sub_1CCFDED5C(v2885, 146, (const llvm::APInt *)&v3551, (llvm *)0x31, 0, (uint64_t)v2868, v2870, v2882, (uint64_t)v2881, v2884, v2886);
              goto LABEL_2963;
            }
            v3060 = *(void **)(a2 + 32);
            uint64_t v3061 = v3060[20];
            uint64_t v3062 = v3060[21];
            uint64_t v3063 = v3060[25];
            uint64_t v3064 = v3060[26];
            uint64_t v3065 = *(void *)(a3 + 16);
            v3066 = sub_1CD7EBF14(v3065, 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
            __int16 v3069 = 0;
            uint64_t v3070 = *(void *)(v3065 + 832);
            if (v3070) {
              __int16 v3069 = *(_WORD *)(v3070 + 8);
            }
            v3555[0] = sub_1CCFDED5C(v3065, 57, (const llvm::APInt *)&v3551, (llvm *)4, 0, v3063, v3064, v3068, (uint64_t)v3066, v3067, v3069);
            v3555[1] = v3071;
            uint64_t v3072 = *(void *)(a3 + 16);
            v3509 = v3551;
            if (v3551) {
              llvm::MetadataTracking::track((uint64_t)&v3509, v3551, 2);
            }
            int v3510 = v3552;
            LODWORD(v3569[0]) = 0;
            LODWORD(v3584[0]) = 0;
            v3073 = sub_1CD4081C0(v3072, (uint64_t)&v3509, (int *)v3569, v3555, (int *)v3584);
            if (!v3509) {
              goto LABEL_3179;
            }
            int v3074 = *v3509;
            if ((v3074 - 4) > 0x1E)
            {
              if ((v3074 - 3) >= 0xFFFFFFFE) {
                v3315 = v3509;
              }
              else {
                v3315 = 0;
              }
              if ((v3074 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v3316 = (unint64_t)(v3315 + 8);
LABEL_3462:
                v3569[0] = &v3509;
                sub_1CC5FA668(v3316 + 16, v3569);
                goto LABEL_3179;
              }
              if (v3074 == 3) {
                *((void *)v3509 + 1) = 0;
              }
            }
            else if ((v3509[1] & 0x7F) == 2 || *((_DWORD *)v3509 + 3))
            {
              uint64_t v3401 = *((void *)v3509 + 2);
              if ((v3401 & 4) != 0)
              {
                unint64_t v3316 = v3401 & 0xFFFFFFFFFFFFFFF8;
                if (v3316) {
                  goto LABEL_3462;
                }
              }
            }
LABEL_3179:
            uint64_t v3075 = *(void *)(a3 + 16);
            v3076 = sub_1CD7EBF14(v3075, 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
            __int16 v3079 = 0;
            uint64_t v3080 = *(void *)(v3075 + 832);
            if (v3080) {
              __int16 v3079 = *(_WORD *)(v3080 + 8);
            }
            v3081 = sub_1CCFDED5C(v3075, 56, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v3073, 0, v3078, (uint64_t)v3076, v3077, v3079);
            uint64_t v3083 = v3082;
            uint64_t v3084 = *(void *)(a3 + 16);
            v3085 = sub_1CD7EBF14(v3084, 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
            __int16 v3088 = 0;
            uint64_t v3089 = *(void *)(v3084 + 832);
            if (v3089) {
              __int16 v3088 = *(_WORD *)(v3089 + 8);
            }
            v3090 = sub_1CCFDED5C(v3084, 57, (const llvm::APInt *)&v3551, (llvm *)4, 0, v3061, v3062, v3087, (uint64_t)v3085, v3086, v3088);
            __int16 v3092 = 0;
            unint64_t v3094 = v3062 & 0xFFFFFFFF00000000 | v3093;
            uint64_t v3095 = *(void *)(a3 + 16);
            uint64_t v3096 = *(void *)(v3095 + 832);
            if (v3096) {
              __int16 v3092 = *(_WORD *)(v3096 + 8);
            }
            v3098 = sub_1CCFDED5C(v3095, 175, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v3090, v3094, v3091, (uint64_t)v3081, v3083, v3092);
            unint64_t v3099 = (unint64_t)v3097;
            __int16 v3100 = 0;
            v3101 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v3102 = *((void *)v3101 + 104);
            if (v3102) {
              __int16 v3100 = *(_WORD *)(v3102 + 8);
            }
            v3103 = sub_1CD7F3564(v3101, (const char *)0xC7, (uint64_t)&v3551, (llvm *)5, 0, (uint64_t)v3098, v3097, v3100);
            __int16 v3104 = 0;
            unint64_t v3106 = v3099 & 0xFFFFFFFF00000000 | v3105;
            v3107 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v3108 = *((void *)v3107 + 104);
            if (v3108) {
              __int16 v3104 = *(_WORD *)(v3108 + 8);
            }
            unint64_t v3109 = v3099 & 0xFFFFFFFF00000000;
            v3110 = sub_1CD7F3564(v3107, (const char *)0xC7, (uint64_t)&v3551, (llvm *)5, 0, (uint64_t)v3555[0], v3555[1], v3104);
            __int16 v3112 = 0;
            v3555[0] = v3110;
            LODWORD(v3555[1]) = v3113;
            uint64_t v3114 = *(void *)(a3 + 16);
            uint64_t v3115 = *(void *)(v3114 + 832);
            if (v3115) {
              __int16 v3112 = *(_WORD *)(v3115 + 8);
            }
            v3116 = sub_1CCFDED5C(v3114, 172, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v3103, v3106, v3111, (uint64_t)v3110, (uint64_t)v3555[1], v3112);
            uint64_t v3118 = v3117 | v3109;
            uint64_t v3119 = *(void *)(a3 + 16);
            v3120 = sub_1CD7EBF14(v3119, 15, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            __int16 v3123 = 0;
            uint64_t v3124 = *(void *)(v3119 + 832);
            if (v3124) {
              __int16 v3123 = *(_WORD *)(v3124 + 8);
            }
            v3125 = sub_1CCFDED5C(v3119, 175, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v3116, v3118, v3122, (uint64_t)v3120, v3121, v3123);
            uint64_t v3127 = v3126;
            uint64_t v3128 = *(void *)(a3 + 16);
            v3129 = sub_1CD7EBF14(v3128, 4, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            uint64_t v3132 = *(void *)(v3128 + 832);
            if (v3132) {
              LOWORD(v3132) = *(_WORD *)(v3132 + 8);
            }
            uint64_t v3133 = v3127 | v3109;
            v3135 = sub_1CCFDED5C(v3128, 175, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v3081, v3083, v3131, (uint64_t)v3129, v3130, v3132);
            uint64_t v3137 = v3134;
            uint64_t v3138 = *(void *)(a3 + 16);
            uint64_t v3139 = *(void *)(v3138 + 832);
            if (v3139) {
              LOWORD(v3139) = *(_WORD *)(v3139 + 8);
            }
            v3140 = sub_1CCFDED5C(v3138, 172, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v3135, v3134, v3136, v2585, v2584, v3139);
            unint64_t v3141 = v3137 & 0xFFFFFFFF00000000;
            v3143 = (void *)(v3137 & 0xFFFFFFFF00000000 | v3142);
            v3144 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v3145 = *((void *)v3144 + 104);
            if (v3145) {
              __int16 v3146 = *(_WORD *)(v3145 + 8);
            }
            else {
              __int16 v3146 = 0;
            }
            v3225 = sub_1CD7F3564(v3144, (const char *)0xC7, (uint64_t)&v3551, (llvm *)5, 0, (uint64_t)v3140, v3143, v3146);
            uint64_t v3228 = *(void *)(a3 + 16);
            uint64_t v3229 = *(void *)(v3228 + 832);
            if (v3229) {
              LOWORD(v3229) = *(_WORD *)(v3229 + 8);
            }
            v3230 = sub_1CCFDED5C(v3228, 172, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v3125, v3133, v3227, (uint64_t)v3225, v3226 | v3141, v3229);
            uint64_t v3233 = *(void *)(a3 + 16);
            uint64_t v3234 = *(void *)(v3233 + 832);
            if (v3234) {
              LOWORD(v3234) = *(_WORD *)(v3234 + 8);
            }
            v2887 = sub_1CCFDED5C(v3233, 146, (const llvm::APInt *)&v3551, (llvm *)0x31, 0, (uint64_t)v2868, v2870, v3232, (uint64_t)v3230, v3231, v3234);
LABEL_2963:
            uint64_t v2889 = (uint64_t)v2887;
            *(void *)&long long v3553 = v2887;
            *((void *)&v3553 + 1) = v2888;
            v2890 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2891 = *((void *)v2890 + 104);
            if (v2891) {
              __int16 v2892 = *(_WORD *)(v2891 + 8);
            }
            else {
              __int16 v2892 = 0;
            }
            v1526 = sub_1CD7F3564(v2890, (const char *)0xD8, (uint64_t)&v3551, (llvm *)6, 0, v2889, v2888, v2892);
LABEL_2967:
            *(void *)&long long v3553 = v1526;
            DWORD2(v3553) = v1527;
            goto LABEL_2038;
          case 2445:
            __int16 v2656 = *(_WORD *)(a2 + 72);
            v2657 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2658 = (uint64_t)v2657;
            int v2659 = 47;
            goto LABEL_2839;
          case 2446:
            __int16 v2656 = *(_WORD *)(a2 + 72);
            v2657 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2658 = (uint64_t)v2657;
            int v2659 = 48;
LABEL_2839:
            uint64_t v2661 = sub_1CD7EEB94(v2658, v2659, (llvm *)5, 0);
            __int16 v2662 = 0;
            uint64_t v2663 = *((void *)v2657 + 104);
            if (v2663) {
              __int16 v2662 = *(_WORD *)(v2663 + 8);
            }
            v2665 = sub_1CD7F3564(v2657, (const char *)0x18C, (uint64_t)&v3551, (llvm *)5, 0, v2661, v2660, v2662);
            __int16 v2666 = 0;
            v2667 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2668 = *((void *)v2667 + 104);
            if (v2668) {
              __int16 v2666 = *(_WORD *)(v2668 + 8);
            }
            v956 = sub_1CD7F3564(v2667, (const char *)0xCB, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v2665, v2664, v2666);
            uint64_t v957 = v2669;
            uint64_t v2670 = *(void *)(a3 + 16);
            v2671 = sub_1CD7ECDC4(v2670, (uint64_t)&v3551, 10, 0, 0, 0.5);
            uint64_t v3403 = v2672;
            __int16 v3405 = v2656;
            uint64_t v3402 = (uint64_t)v2671;
            uint64_t v208 = v2670;
            uint64_t v215 = 96;
            uint64_t v216 = 10;
            goto LABEL_1340;
          case 2487:
            v1583 = *(void **)(a2 + 64);
            v3555[0] = v1583;
            if (v1583)
            {
              llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1583, 2);
              int v11 = *(_DWORD *)(a2 + 60);
              uint64_t v94 = *(void *)(a2 + 32);
            }
            LODWORD(v3555[1]) = v11;
            uint64_t v683 = *(llvm::APFloatBase **)(a3 + 16);
            v1584 = *(uint64_t **)(a2 + 40);
            uint64_t v318 = *v1584;
            uint64_t v319 = v1584[1];
            uint64_t v321 = *(void *)(v94 + 40);
            int v322 = *(void **)(v94 + 48);
            uint64_t v1585 = *((void *)v683 + 104);
            if (v1585) {
              __int16 v324 = *(_WORD *)(v1585 + 8);
            }
            else {
              __int16 v324 = 0;
            }
            uint64_t v684 = 420;
            goto LABEL_983;
          case 2491:
            uint64_t v1586 = *(void *)(a2 + 40);
            v1587 = *(llvm **)v1586;
            uint64_t v1588 = *(void *)(v1586 + 8);
            v1589 = (unsigned char *)a1[23037];
            if (v1589[318])
            {
              char v1590 = 4;
            }
            else if (v1589[319])
            {
              char v1590 = 5;
            }
            else if (v1589[320])
            {
              char v1590 = 6;
            }
            else if (v1589[321])
            {
              char v1590 = 7;
            }
            else
            {
              char v1590 = 9;
            }
            uint64_t v2771 = sub_1CD7EEB94(*(void *)(a3 + 16), 33, (llvm *)5, 0);
            v2772 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2773 = *((void *)v2772 + 104);
            if (v2773) {
              __int16 v2774 = *(_WORD *)(v2773 + 8);
            }
            else {
              __int16 v2774 = 0;
            }
            v2775 = sub_1CD7F3564(v2772, (const char *)0x18C, (uint64_t)&v3551, v1587, v1588, v2771, v2770, v2774);
            unint64_t v2777 = v2776;
            if (((1 << v1590) & 0x2C0) != 0)
            {
              uint64_t v2778 = *(void *)(a3 + 16);
              v2779 = sub_1CD7EBF14(v2778, 3, (const llvm::APInt *)&v3551, v1587, v1588, 0, 0);
              uint64_t v2782 = *(void *)(v2778 + 832);
              if (v2782) {
                LOWORD(v2782) = *(_WORD *)(v2782 + 8);
              }
              v2775 = sub_1CCFDED5C(v2778, 171, (const llvm::APInt *)&v3551, v1587, v1588, (uint64_t)v2775, v2777, v2781, (uint64_t)v2779, v2780, v2782);
              unint64_t v2777 = v2777 & 0xFFFFFFFF00000000 | v2783;
            }
            if (v1587 != 5)
            {
              *(void *)&long long v3553 = v2775;
              *((void *)&v3553 + 1) = v2777;
              goto LABEL_2038;
            }
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2784 = *((void *)v32 + 104);
            if (v2784) {
              __int16 v35 = *(_WORD *)(v2784 + 8);
            }
            else {
              __int16 v35 = 0;
            }
            uint64_t v563 = 199;
            uint64_t v564 = 5;
            uint64_t v565 = 0;
            uint64_t v31 = (uint64_t)v2775;
            uint64_t v33 = (void *)v2777;
            goto LABEL_2058;
          case 2492:
            uint64_t v1591 = *(void *)(a2 + 40);
            v1592 = (unsigned char *)a1[23037];
            if (v1592[318])
            {
              char v1593 = 4;
            }
            else if (v1592[319])
            {
              char v1593 = 5;
            }
            else if (v1592[320])
            {
              char v1593 = 6;
            }
            else if (v1592[321])
            {
              char v1593 = 7;
            }
            else
            {
              char v1593 = 9;
            }
            v2786 = *(llvm **)v1591;
            uint64_t v2785 = *(void *)(v1591 + 8);
            uint64_t v2788 = sub_1CD7EEB94(*(void *)(a3 + 16), 34, (llvm *)5, 0);
            v2789 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2790 = *((void *)v2789 + 104);
            if (v2790) {
              __int16 v2791 = *(_WORD *)(v2790 + 8);
            }
            else {
              __int16 v2791 = 0;
            }
            v2793 = sub_1CD7F3564(v2789, (const char *)0x18C, (uint64_t)&v3551, (llvm *)4, 0, v2788, v2787, v2791);
            unint64_t v2794 = (unint64_t)v2792;
            if (((1 << v1593) & 0x2C0) != 0)
            {
              if (v2786 != 4)
              {
                v2795 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2796 = *((void *)v2795 + 104);
                if (v2796) {
                  __int16 v2797 = *(_WORD *)(v2796 + 8);
                }
                else {
                  __int16 v2797 = 0;
                }
                v2793 = sub_1CD7F3564(v2795, (const char *)0xC7, (uint64_t)&v3551, v2786, v2785, (uint64_t)v2793, v2792, v2797);
                unint64_t v2794 = v2794 & 0xFFFFFFFF00000000 | v2894;
              }
              uint64_t v2895 = *(void *)(a3 + 16);
              v2896 = sub_1CD7EBF14(v2895, 8, (const llvm::APInt *)&v3551, v2786, v2785, 0, 0);
              uint64_t v2899 = *(void *)(v2895 + 832);
              if (v2899) {
                LOWORD(v2899) = *(_WORD *)(v2899 + 8);
              }
              v2900 = sub_1CCFDED5C(v2895, 58, (const llvm::APInt *)&v3551, v2786, v2785, (uint64_t)v2793, v2794, v2898, (uint64_t)v2896, v2897, v2899);
              unint64_t v2902 = v2794 & 0xFFFFFFFF00000000 | v2901;
              v2903 = *(llvm::APFloatBase **)(a3 + 16);
              v2905 = sub_1CD7EBF14((uint64_t)v2903, 2586, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
              __int16 v2906 = 0;
              uint64_t v2907 = *((void *)v2903 + 104);
              if (v2907) {
                __int16 v2906 = *(_WORD *)(v2907 + 8);
              }
              v2908 = sub_1CD7F3564(v2903, (const char *)0x2E, (uint64_t)&v3551, v2786, v2785, (uint64_t)v2905, v2904, v2906);
              uint64_t v2910 = v2909;
              uint64_t v2911 = *(void *)(a3 + 16);
              v2912 = sub_1CD7EBF14(v2911, 2, (const llvm::APInt *)&v3551, v2786, v2785, 0, 0);
              uint64_t v2915 = *(void *)(v2911 + 832);
              if (v2915) {
                LOWORD(v2915) = *(_WORD *)(v2915 + 8);
              }
              unint64_t v2916 = v2794 & 0xFFFFFFFF00000000;
              v2917 = sub_1CCFDED5C(v2911, 177, (const llvm::APInt *)&v3551, v2786, v2785, (uint64_t)v2908, v2910, v2914, (uint64_t)v2912, v2913, v2915);
              unint64_t v2920 = v2910 & 0xFFFFFFFF00000000 | v2919;
              uint64_t v2921 = *(void *)(a3 + 16);
              uint64_t v2922 = *(void *)(v2921 + 832);
              if (v2922) {
                LOWORD(v2922) = *(_WORD *)(v2922 + 8);
              }
              v2793 = sub_1CCFDED5C(v2921, 56, (const llvm::APInt *)&v3551, v2786, v2785, (uint64_t)v2900, v2902, v2918, (uint64_t)v2917, v2920, v2922);
              unint64_t v2794 = v2923 | v2916;
            }
            v2924 = (unsigned __int8 *)(v2793[5] + 16 * v2794);
            if (*v2924 == v2786 && (*v2924 || *((void *)v2924 + 1) == v2785))
            {
              *(void *)&long long v3553 = v2793;
              goto LABEL_2993;
            }
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2925 = *((void *)v32 + 104);
            if (v2925) {
              __int16 v35 = *(_WORD *)(v2925 + 8);
            }
            else {
              __int16 v35 = 0;
            }
            uint64_t v563 = 199;
            uint64_t v564 = (uint64_t)v2786;
            uint64_t v565 = (void *)v2785;
            uint64_t v31 = (uint64_t)v2793;
            goto LABEL_2991;
          case 2517:
            goto LABEL_1351;
          case 2522:
            uint64_t v479 = *(void *)(a3 + 16);
            uint64_t v2606 = *(void *)(*(void *)(*(void *)(v479 + 16) + 640) + 16);
            while (1)
            {
              uint64_t v2606 = *(void *)(v2606 + 8);
              if (!v2606) {
                break;
              }
              uint64_t v2607 = *(void *)(v2606 + 24);
              unsigned int v2608 = *(unsigned __int8 *)(v2607 + 16);
              if (v2607) {
                BOOL v2609 = v2608 >= 0x1C;
              }
              else {
                BOOL v2609 = 0;
              }
              if (v2609 && v2608 - 29 < 0xB)
              {
                uint64_t v2611 = sub_1CD7EEB94(v479, 313, (llvm *)4, 0);
                uint64_t v2613 = v2612;
                uint64_t v2614 = *(void *)(a3 + 16);
                if (*(unsigned char *)(a1[23037] + 326))
                {
                  v3020 = sub_1CD7EBF14(v2614, 2579, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  uint64_t v3022 = v3021;
                  v3023 = sub_1CD7EBF14(*(void *)(a3 + 16), 2524, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  uint64_t v3025 = v3024;
                  v3026 = sub_1CD7EBF14(*(void *)(a3 + 16), 2168, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  uint64_t v3028 = v3027;
                  v3029 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                  v3031 = sub_1CD3DC614(*(void **)(a3 + 16), (const llvm::APInt *)&v3551, (llvm *)2, 0, v2611, v2613, (uint64_t)v3029, v3030, 0x11u, 0, 0, (unsigned __int128)0 >> 96, 0);
                  __int16 v3034 = 0;
                  uint64_t v3035 = *(void *)(a3 + 16);
                  uint64_t v3036 = *(void *)(v3035 + 832);
                  if (v3036) {
                    __int16 v3034 = *(_WORD *)(v3036 + 8);
                  }
                  v3037 = sub_1CCFDED5C(v3035, 46, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v3020, v3022, v3033, (uint64_t)v3031, v3032, v3034);
                  __int16 v3040 = 0;
                  *(void *)&long long v3553 = v3037;
                  *((void *)&v3553 + 1) = v3038;
                  uint64_t v3041 = *(void *)(a3 + 16);
                  uint64_t v3042 = *(void *)(v3041 + 832);
                  if (v3042) {
                    __int16 v3040 = *(_WORD *)(v3042 + 8);
                  }
                  v3043 = sub_1CCFDED5C(v3041, 46, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v3023, v3025, v3039, (uint64_t)v3037, v3038, v3040);
                  __int16 v3045 = 0;
                  *(void *)&long long v3553 = v3043;
                  DWORD2(v3553) = v3046;
                  uint64_t v3047 = *(void *)(a3 + 16);
                  uint64_t v3048 = *(void *)(v3047 + 832);
                  if (v3048) {
                    __int16 v3045 = *(_WORD *)(v3048 + 8);
                  }
                  v3049 = sub_1CCFDED5C(v3047, 46, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v3026, v3028, v3044, (uint64_t)v3043, *((uint64_t *)&v3553 + 1), v3045);
                  __int16 v3050 = 0;
                  *(void *)&long long v3553 = v3049;
                  DWORD2(v3553) = v3051;
                  v3052 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v3053 = *((void *)v3052 + 104);
                  if (v3053) {
                    __int16 v3050 = *(_WORD *)(v3053 + 8);
                  }
                  *(void *)&long long v3553 = sub_1CD7F3564(v3052, (const char *)0xC9, (uint64_t)&v3551, (llvm *)4, 0, (uint64_t)v3049, *((void **)&v3553 + 1), v3050);
                  DWORD2(v3553) = v3054;
                  uint64_t v3055 = *(void *)(a3 + 16);
                  v3057 = sub_1CD7EBF14(v3055, 31, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                  uint64_t v3059 = *(void *)(v3055 + 832);
                  if (v3059) {
                    LOWORD(v3059) = *(_WORD *)(v3059 + 8);
                  }
                  v1526 = sub_1CCFDED5C(v3055, 57, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v3057, v3056, v3058, v3553, *((uint64_t *)&v3553 + 1), v3059);
                }
                else
                {
                  v2615 = sub_1CD7EBF14(v2614, 2584, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  uint64_t v2617 = v2616;
                  v2618 = *(void **)(a3 + 16);
                  v2619 = sub_1CD7EBF14((uint64_t)v2618, 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  __int16 v2622 = 0;
                  uint64_t v2623 = v2618[104];
                  if (v2623) {
                    __int16 v2622 = *(_WORD *)(v2623 + 8);
                  }
                  v3505 = sub_1CD7F5D38(v2618, (const char *)0x2E, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v2615, v2617, v2621, v2611, v2613, (uint64_t)v2619, v2620, SHIDWORD(v2620), v2622);
                  int v3485 = v2624;
                  v2625 = *(void **)(a3 + 16);
                  v2626 = sub_1CD7EBF14((uint64_t)v2625, 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  __int16 v2629 = 0;
                  uint64_t v2630 = v2625[104];
                  if (v2630) {
                    __int16 v2629 = *(_WORD *)(v2630 + 8);
                  }
                  v2631 = sub_1CD7F5D38(v2625, (const char *)0x2E, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v2615, v2617, v2628, v2611, v2613, (uint64_t)v2626, v2627, SHIDWORD(v2627), v2629);
                  int v3454 = v2632;
                  uint64_t v3467 = (uint64_t)v2631;
                  v2633 = *(void **)(a3 + 16);
                  v2634 = sub_1CD7EBF14((uint64_t)v2633, 2, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  __int16 v2637 = 0;
                  uint64_t v2638 = v2633[104];
                  if (v2638) {
                    __int16 v2637 = *(_WORD *)(v2638 + 8);
                  }
                  v2639 = sub_1CD7F5D38(v2633, (const char *)0x2E, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v2615, v2617, v2636, v2611, v2613, (uint64_t)v2634, v2635, SHIDWORD(v2635), v2637);
                  int v2641 = v2640;
                  v2642 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                  unsigned int v2644 = v2643;
                  v2645 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                  unsigned int v2647 = v2646;
                  v2648 = sub_1CD7EBF14(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                  unsigned int v2650 = v2649;
                  v2651 = sub_1CD7EBF14(*(void *)(a3 + 16), 3, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
                  *(void *)&long long v3553 = 0;
                  DWORD2(v3553) = 0;
                  *(void *)&long long v3553 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)&v3551, (uint64_t)v2639, v2641, (uint64_t)v2642, v2644, (uint64_t)v2648, v2650, (uint64_t)v2651, v2652, v2653, 0x11u);
                  DWORD2(v3553) = v2654;
                  *(void *)&long long v3553 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)&v3551, v3467, v3454, (uint64_t)v2642, v2644, (uint64_t)v2645, v2647, v3553, v2654, SHIDWORD(v3553), 0x11u);
                  DWORD2(v3553) = v2655;
                  v1526 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)&v3551, (uint64_t)v3505, v3485, (uint64_t)v2642, v2644, (uint64_t)v2642, v2644, v3553, v2655, SHIDWORD(v3553), 0x11u);
                }
                goto LABEL_2967;
              }
            }
            uint64_t v481 = 0;
            uint64_t v186 = 4;
LABEL_476:
            unsigned int v187 = 0;
            goto LABEL_477;
          case 2526:
            goto LABEL_1341;
          case 2527:
LABEL_1423:
            if (sub_1CB8C2014(*(void *)(v94 + 40)))
            {
              unsigned int v397 = (_DWORD *)(v94 + 80);
              goto LABEL_493;
            }
            if (!sub_1CB8C2014(*(void *)(v94 + 80))) {
              goto LABEL_2037;
            }
            long long v312 = *(_OWORD *)(v94 + 40);
            goto LABEL_2009;
          default:
            if ((v98 - 2586) >= 2) {
              goto LABEL_2037;
            }
            goto LABEL_698;
        }
      }
      if ((int)v98 > 1280)
      {
        switch((int)v98)
        {
          case 2107:
          case 2108:
          case 2139:
          case 2145:
          case 2146:
          case 2147:
          case 2150:
          case 2151:
          case 2152:
          case 2154:
          case 2155:
          case 2156:
          case 2167:
          case 2169:
          case 2170:
          case 2173:
          case 2174:
          case 2175:
          case 2176:
            goto LABEL_698;
          case 2109:
          case 2110:
          case 2111:
          case 2112:
          case 2113:
          case 2114:
          case 2133:
          case 2134:
          case 2135:
          case 2136:
          case 2137:
          case 2138:
          case 2140:
          case 2141:
          case 2142:
          case 2143:
          case 2144:
          case 2148:
          case 2149:
          case 2153:
          case 2157:
          case 2158:
          case 2163:
          case 2164:
          case 2165:
          case 2166:
            goto LABEL_2037;
          case 2115:
          case 2116:
          case 2117:
          case 2118:
          case 2119:
          case 2120:
          case 2121:
          case 2122:
          case 2123:
          case 2124:
          case 2125:
          case 2126:
          case 2127:
          case 2128:
          case 2129:
          case 2130:
LABEL_1091:
            uint64_t v962 = *(void *)(v94 + 40);
            uint64_t v963 = *(void *)(v94 + 48);
            uint64_t v3550 = 0;
            int v3549 = 0;
            unsigned int v3546 = 0;
            sub_1CD40AEC0(v98, (int *)&v3550 + 1, (int *)&v3550, &v3549, (int *)&v3546);
            uint64_t v964 = sub_1CD7EBF14(*(void *)(a3 + 16), (int)v3550, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            uint64_t v966 = v965;
            uint64_t v967 = *(void *)(a3 + 16);
            uint64_t v968 = *(void *)(*(void *)(v967 + 40) + 344);
            unsigned int v969 = *(unsigned __int16 *)(v962 + 24);
            if (v969 <= 0x26 && ((1 << v969) & 0x6000006000) != 0)
            {
              unsigned int v970 = sub_1CD1117B0(*(llvm::GlobalValue **)(v962 + 80), *(void *)(v962 + 88), v968, 256);
              uint64_t v971 = sub_1CD7EBF14(*(void *)(a3 + 16), v970, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
            }
            else
            {
              uint64_t v1528 = sub_1CD7EB67C(v967, v962, v963, (uint64_t)&v3551, 4, 0);
              uint64_t v971 = sub_1CB9E7A40(v1528, v1529, *(void *)(a3 + 16));
            }
            if (v3549)
            {
              uint64_t v974 = *(void *)(*(void *)(a2 + 32) + 80);
              unsigned int v975 = *(unsigned __int16 *)(v974 + 24);
              if (v975 > 0x26 || ((1 << v975) & 0x6000006000) == 0) {
                goto LABEL_2037;
              }
              unsigned int v976 = 3;
            }
            else
            {
              uint64_t v974 = 0;
              unsigned int v976 = 2;
            }
            v3555[0] = &v3556;
            v3556 = v964;
            *(void *)&long long v3557 = v966;
            *((void *)&v3557 + 1) = v971;
            unint64_t v3558 = v972;
            v3555[1] = (void *)0x400000002;
            if (v3549)
            {
              unsigned int v1936 = sub_1CD1117B0(*(llvm::GlobalValue **)(v974 + 80), *(void *)(v974 + 88), v968, 256);
              v1937 = sub_1CD7EBF14(*(void *)(a3 + 16), v1936, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
              if (LODWORD(v3555[1]) >= HIDWORD(v3555[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1938 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
              *v1938 = v1937;
              v1938[1] = (uint64_t *)v972;
              unsigned int v1935 = ++LODWORD(v3555[1]);
            }
            else
            {
              unsigned int v1935 = 2;
            }
            if (v976 >= *(unsigned __int16 *)(a2 + 56)
              || ((v98 - 2325) > 0x23 || ((1 << (v98 - 21)) & 0xFF00000FFLL) == 0)
              && (v98 - 2528) >= 0x10)
            {
              goto LABEL_2218;
            }
            v1939 = (uint64_t **)(*(void *)(a2 + 32) + 40 * v976);
            v1940 = *v1939;
            unint64_t v1941 = (unint64_t)v1939[1];
            int v1942 = *((unsigned __int16 *)*v1939 + 12);
            if (v1942 != 35 && v1942 != 11) {
              goto LABEL_2216;
            }
            uint64_t v1943 = v1940[10];
            v1944 = (void *)(v1943 + 24);
            if (*(_DWORD *)(v1943 + 32) >= 0x41u) {
              v1944 = (void *)*v1944;
            }
            if (*v1944 >= 4uLL)
            {
              v3393 = "Invalid sample offset in sample mode itr/itrproj. Only 0, 1, 2, and 3 are supported sample mode offsets.";
              goto LABEL_3624;
            }
            v1940 = sub_1CD7EC028(*(void *)(a3 + 16), v1943, (const llvm::APInt *)&v3551, (llvm *)4, 0, 1, 0);
            unint64_t v1941 = v1941 & 0xFFFFFFFF00000000 | v972;
            unsigned int v1935 = v3555[1];
LABEL_2216:
            if (v1935 >= HIDWORD(v3555[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v1945 = (uint64_t **)((char *)v3555[0] + 16 * v1935);
            *v1945 = v1940;
            v1945[1] = (uint64_t *)v1941;
            ++LODWORD(v3555[1]);
LABEL_2218:
            *(_OWORD *)v3569 = *(_OWORD *)*(void *)(a2 + 40);
            v1946 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v3569, v972, v973);
            uint64_t v1948 = v1947;
            int v1949 = HIDWORD(v3550);
            if (HIDWORD(v3550) == 1)
            {
              v1950 = *(void **)(a3 + 16);
              v1951 = (const char *)v3546;
              v1952 = *(void **)(a2 + 64);
              v3569[0] = v1952;
              if (v1952) {
                llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v1952, 2);
              }
              LODWORD(v3569[1]) = *(_DWORD *)(a2 + 60);
              uint64_t v1953 = v1950[104];
              if (v1953) {
                uint64_t v1954 = *(unsigned __int16 *)(v1953 + 8);
              }
              else {
                uint64_t v1954 = 0;
              }
              *(void *)&long long v3553 = sub_1CD7FF4E8(v1950, v1951, (const llvm::APInt *)v3569, v1946, v1948, (uint64_t *)v3555[0], LODWORD(v3555[1]), v1954);
              *((void *)&v3553 + 1) = v1960;
              if (v3569[0])
              {
                int v1961 = *(unsigned __int8 *)v3569[0];
                if ((v1961 - 4) > 0x1E)
                {
                  if ((v1961 - 3) >= 0xFFFFFFFE) {
                    v2335 = v3569[0];
                  }
                  else {
                    v2335 = 0;
                  }
                  if ((v1961 - 3) < 0xFFFFFFFE)
                  {
                    if (v1961 == 3) {
                      *((void *)v3569[0] + 1) = 0;
                    }
                    goto LABEL_2268;
                  }
                  unint64_t v1963 = (unint64_t)v2335 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v3569[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3569[0] + 3)) {
                    goto LABEL_2268;
                  }
                  uint64_t v1962 = *((void *)v3569[0] + 2);
                  if ((v1962 & 4) == 0) {
                    goto LABEL_2268;
                  }
                  unint64_t v1963 = v1962 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1963) {
                    goto LABEL_2268;
                  }
                }
                *(void *)&v3584[0] = v3569;
                sub_1CC5FA668(v1963 + 16, v3584);
              }
LABEL_2268:
              unint64_t v646 = v3555[0];
              if (v3555[0] == &v3556) {
                goto LABEL_2038;
              }
              goto LABEL_1628;
            }
            v1955 = *(void **)(a3 + 16);
            v1956 = (const char *)v3546;
            v1957 = *(void **)(a2 + 64);
            v3569[0] = v1957;
            if (v1957) {
              llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v1957, 2);
            }
            LODWORD(v3569[1]) = *(_DWORD *)(a2 + 60);
            uint64_t v1958 = v1955[104];
            if (v1958) {
              uint64_t v1959 = *(unsigned __int16 *)(v1958 + 8);
            }
            else {
              uint64_t v1959 = 0;
            }
            v1964 = sub_1CD7FF4E8(v1955, v1956, (const llvm::APInt *)v3569, (llvm *)0xAE, 0, (uint64_t *)v3555[0], LODWORD(v3555[1]), v1959);
            int v1966 = v1965;
            if (!v3569[0]) {
              goto LABEL_2240;
            }
            int v1967 = *(unsigned __int8 *)v3569[0];
            if ((v1967 - 4) > 0x1E)
            {
              if ((v1967 - 3) >= 0xFFFFFFFE) {
                v2501 = v3569[0];
              }
              else {
                v2501 = 0;
              }
              if ((v1967 - 3) < 0xFFFFFFFE)
              {
                if (v1967 == 3) {
                  *((void *)v3569[0] + 1) = 0;
                }
LABEL_2240:
                v3569[0] = &v3570;
                v3569[1] = (void *)0x400000000;
                if (v1946 == 9) {
                  int v1968 = 1;
                }
                else {
                  int v1968 = 25;
                }
                if (v1949)
                {
                  for (int i = 0; i != v1949; ++i)
                  {
                    v1971 = sub_1CD8015C0(*(void *)(a3 + 16), v1968 + i, (const llvm::APInt *)&v3551, v1946, v1948, (uint64_t)v1964, v1966);
                    if (LODWORD(v3569[1]) >= (unint64_t)HIDWORD(v3569[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1972 = (uint64_t **)((char *)v3569[0] + 16 * LODWORD(v3569[1]));
                    *v1972 = v1971;
                    v1972[1] = v1970;
                    ++LODWORD(v3569[1]);
                  }
                  if (v1949 == 3)
                  {
                    uint64_t v1973 = *(void *)(a3 + 16);
                    v1974 = *(unsigned __int8 **)(a2 + 64);
                    *(void *)&v3584[0] = v1974;
                    if (v1974) {
                      llvm::MetadataTracking::track((uint64_t)v3584, v1974, 2);
                    }
                    DWORD2(v3584[0]) = *(_DWORD *)(a2 + 60);
                    v1976 = sub_1CD7F330C(v1973, 51, (uint64_t)v3584, v1946, v1948);
                    if (LODWORD(v3569[1]) >= HIDWORD(v3569[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v1977 = (uint64_t **)((char *)v3569[0] + 16 * LODWORD(v3569[1]));
                    *v1977 = v1976;
                    v1977[1] = v1975;
                    ++LODWORD(v3569[1]);
                    if (*(void *)&v3584[0])
                    {
                      int v1978 = **(unsigned char **)&v3584[0];
                      if ((v1978 - 4) > 0x1E)
                      {
                        if ((v1978 - 3) >= 0xFFFFFFFE) {
                          uint64_t v2939 = *(void *)&v3584[0];
                        }
                        else {
                          uint64_t v2939 = 0;
                        }
                        if ((v1978 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v2940 = v2939 + 8;
LABEL_3035:
                          *(void *)&long long v3554 = v3584;
                          sub_1CC5FA668(v2940 + 16, &v3554);
                          goto LABEL_2257;
                        }
                        if (v1978 == 3) {
                          *(void *)(*(void *)&v3584[0] + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) == 2 {
                             || *(_DWORD *)(*(void *)&v3584[0] + 12))
                      }
                      {
                        uint64_t v3396 = *(void *)(*(void *)&v3584[0] + 16);
                        if ((v3396 & 4) != 0)
                        {
                          unint64_t v2940 = v3396 & 0xFFFFFFFFFFFFFFF8;
                          if (v2940) {
                            goto LABEL_3035;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_2257:
                v1979 = *(void **)(a3 + 16);
                v1980 = *(unsigned __int8 **)(a2 + 64);
                *(void *)&v3584[0] = v1980;
                if (v1980) {
                  llvm::MetadataTracking::track((uint64_t)v3584, v1980, 2);
                }
                DWORD2(v3584[0]) = *(_DWORD *)(a2 + 60);
                uint64_t v1981 = *(void *)(a2 + 40);
                v1982 = *(llvm **)v1981;
                uint64_t v1983 = *(void *)(v1981 + 8);
                uint64_t v1984 = v1979[104];
                if (v1984) {
                  uint64_t v1985 = *(unsigned __int16 *)(v1984 + 8);
                }
                else {
                  uint64_t v1985 = 0;
                }
                *(void *)&long long v3553 = sub_1CD7FF4E8(v1979, (const char *)0x92, (const llvm::APInt *)v3584, v1982, v1983, (uint64_t *)v3569[0], LODWORD(v3569[1]), v1985);
                *((void *)&v3553 + 1) = v1986;
                if (*(void *)&v3584[0])
                {
                  int v1987 = **(unsigned char **)&v3584[0];
                  if ((v1987 - 4) > 0x1E)
                  {
                    if ((v1987 - 3) >= 0xFFFFFFFE) {
                      uint64_t v2336 = *(void *)&v3584[0];
                    }
                    else {
                      uint64_t v2336 = 0;
                    }
                    if ((v1987 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v2337 = v2336 + 8;
LABEL_2592:
                      *(void *)&long long v3554 = v3584;
                      sub_1CC5FA668(v2337 + 16, &v3554);
                      goto LABEL_2266;
                    }
                    if (v1987 == 3) {
                      *(void *)(*(void *)&v3584[0] + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) == 2 {
                         || *(_DWORD *)(*(void *)&v3584[0] + 12))
                  }
                  {
                    uint64_t v3391 = *(void *)(*(void *)&v3584[0] + 16);
                    if ((v3391 & 4) != 0)
                    {
                      unint64_t v2337 = v3391 & 0xFFFFFFFFFFFFFFF8;
                      if (v2337) {
                        goto LABEL_2592;
                      }
                    }
                  }
                }
LABEL_2266:
                v1888 = v3569[0];
                if (v3569[0] == &v3570) {
                  goto LABEL_2268;
                }
                goto LABEL_2267;
              }
              unint64_t v2502 = (unint64_t)v2501 + 8;
            }
            else
            {
              if ((*((unsigned char *)v3569[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3569[0] + 3)) {
                goto LABEL_2240;
              }
              uint64_t v3392 = *((void *)v3569[0] + 2);
              if ((v3392 & 4) == 0) {
                goto LABEL_2240;
              }
              unint64_t v2502 = v3392 & 0xFFFFFFFFFFFFFFF8;
              if (!v2502) {
                goto LABEL_2240;
              }
            }
            *(void *)&v3584[0] = v3569;
            sub_1CC5FA668(v2502 + 16, v3584);
            int v1949 = HIDWORD(v3550);
            goto LABEL_2240;
          case 2131:
            v1633 = *(uint64_t **)(v94 + 40);
            v1634 = (uint64_t *)v1633[5];
            int v1635 = *((unsigned __int16 *)v1633 + 12);
            if (v1635 == 12) {
              goto LABEL_1861;
            }
            uint64_t v1636 = *(void *)(v94 + 48);
            if (v1635 == 46)
            {
              uint64_t v2089 = *(void *)(*(void *)v1633[4] + 80);
              v2090 = (void *)(v2089 + 24);
              if (*(_DWORD *)(v2089 + 32) >= 0x41u) {
                v2090 = (void *)*v2090;
              }
              if (*v2090 == 2131)
              {
                *(void *)&long long v3553 = *(void *)(v94 + 40);
                *((void *)&v3553 + 1) = v1636;
                goto LABEL_2038;
              }
              goto LABEL_2037;
            }
            if (v1635 == 36)
            {
LABEL_1861:
              uint64_t v1637 = *(void *)(a3 + 16);
              uint64_t v1639 = *v1634;
              uint64_t v1638 = v1634[1];
              v1640 = (unsigned __int8 *)v1633[8];
              *(void *)&long long v3554 = v1640;
              if (v1640) {
                llvm::MetadataTracking::track((uint64_t)&v3554, v1640, 2);
              }
              DWORD2(v3554) = *((_DWORD *)v1633 + 15);
              uint64_t v1641 = v1633[10];
              v1642 = (llvm::detail::IEEEFloat *)(v1641 + 32);
              if (*(_UNKNOWN **)(v1641 + 32) == &unk_1CFB2E344) {
                char v1643 = *(unsigned char *)(*(void *)(v1641 + 40) + 28);
              }
              else {
                char v1643 = *(unsigned char *)(v1641 + 52);
              }
              if ((v1643 & 7) == 1 || (v1643 & 8) != 0)
              {
                double v2769 = 0.0;
              }
              else
              {
                if ((v1643 & 7) != 0)
                {
                  DWORD2(v3584[0]) = 32;
                  *(void *)&v3584[0] = 1065353216;
                  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v3569, (const llvm::APInt **)v3584);
                  v3555[1] = v3569[0];
                  v3556 = (uint64_t *)v3569[1];
                  LODWORD(v3557) = v3570;
                  BYTE4(v3557) = BYTE4(v3557) & 0xF0 | BYTE4(v3570) & 0xF;
                  if (v1639 == 9) {
                    llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E2E0, 1, v3569);
                  }
                  if (*(_UNKNOWN **)v1642 != &unk_1CFB2E344)
                  {
                    unsigned int v2168 = *(unsigned __int8 *)(v1641 + 52);
                    unsigned int v2169 = 0;
                    unint64_t v2170 = 0;
                    switch(4 * (v2168 & 7) + (BYTE4(v3557) & 7))
                    {
                      case 1u:
                      case 4u:
                      case 5u:
                      case 6u:
                      case 7u:
                      case 9u:
                      case 0xDu:
                      case 0xFu:
                        goto LABEL_2597;
                      case 2u:
                      case 3u:
                      case 0xBu:
                        int v2171 = ~(v2168 >> 2) & 2;
                        goto LABEL_2595;
                      case 8u:
                      case 0xCu:
                      case 0xEu:
                        int v2171 = (BYTE4(v3557) >> 2) & 2;
                        goto LABEL_2595;
                      case 0xAu:
                        int v2338 = (v2168 >> 3) & 1;
                        if (v2338 != ((BYTE4(v3557) >> 3) & 1)) {
                          goto LABEL_3619;
                        }
                        int v2171 = llvm::detail::IEEEFloat::compareAbsoluteValue(v1642, (const llvm::detail::IEEEFloat *)&v3555[1]);
                        if ((*(unsigned char *)(v1641 + 52) & 8) == 0) {
                          goto LABEL_2595;
                        }
                        if (!v2171) {
                          goto LABEL_3453;
                        }
                        goto LABEL_2596;
                      default:
                        int v2338 = (v2168 >> 3) & 1;
                        if (v2338 == ((BYTE4(v3557) >> 3) & 1)) {
                          goto LABEL_2596;
                        }
LABEL_3619:
                        int v2171 = (2 * v2338) ^ 2;
                        goto LABEL_2595;
                    }
                  }
                  int v2171 = llvm::detail::DoubleAPFloat::compare(v1642, (const llvm::detail::DoubleAPFloat *)&v3555[1]);
LABEL_2595:
                  if (v2171 == 2)
                  {
LABEL_3453:
                    v1633 = sub_1CD7ECDC4(v1637, (uint64_t)&v3554, v1639, v1638, 0, 1.0);
                    unsigned int v2169 = v3313;
                    unint64_t v2170 = v3313 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
LABEL_2596:
                    unsigned int v2169 = 0;
                    unint64_t v2170 = 0;
                  }
LABEL_2597:
                  if (v3555[1] == &unk_1CFB2E344)
                  {
                    sub_1CB845718((uint64_t *)&v3556);
                  }
                  else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
                  {
                    MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
                  }
LABEL_2599:
                  if ((void)v3554)
                  {
                    int v2339 = *(unsigned __int8 *)v3554;
                    if ((v2339 - 4) > 0x1E)
                    {
                      if ((v2339 - 3) >= 0xFFFFFFFE) {
                        uint64_t v2533 = v3554;
                      }
                      else {
                        uint64_t v2533 = 0;
                      }
                      if ((v2339 - 3) < 0xFFFFFFFE)
                      {
                        if (v2339 == 3) {
                          *(void *)(v3554 + 8) = 0;
                        }
                        goto LABEL_2603;
                      }
                      unint64_t v2534 = v2533 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v3554 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3554 + 12)) {
                        goto LABEL_2603;
                      }
                      uint64_t v3394 = *(void *)(v3554 + 16);
                      if ((v3394 & 4) == 0) {
                        goto LABEL_2603;
                      }
                      unint64_t v2534 = v3394 & 0xFFFFFFFFFFFFFFF8;
                      if (!v2534) {
                        goto LABEL_2603;
                      }
                    }
                    v3555[0] = &v3554;
                    sub_1CC5FA668(v2534 + 16, v3555);
                  }
LABEL_2603:
                  *(void *)&long long v3553 = v1633;
                  *((void *)&v3553 + 1) = v2170 | v2169;
                  goto LABEL_2038;
                }
                double v2769 = 1.0;
              }
              v1633 = sub_1CD7ECDC4(v1637, (uint64_t)&v3554, v1639, v1638, 0, v2769);
              unsigned int v2169 = v2942;
              unint64_t v2170 = v2942 & 0xFFFFFFFF00000000;
              goto LABEL_2599;
            }
            uint64_t v2091 = *(void *)(v94 + 8);
            v2092 = (llvm **)&v1634[2 * v1636];
            v2093 = *v2092;
            uint64_t v2094 = (uint64_t)v2092[1];
            if ((v1635 - 401) > 1) {
              goto LABEL_2416;
            }
            uint64_t v2095 = v1633[6];
            if (!v2095) {
              goto LABEL_2416;
            }
            int v2096 = 1;
            do
            {
              if (*(_DWORD *)(v2095 + 8) == v1636)
              {
                if (!v2096) {
                  goto LABEL_2416;
                }
                --v2096;
              }
              uint64_t v2095 = *(void *)(v2095 + 32);
            }
            while (v2095);
            if (v2096)
            {
LABEL_2416:
              if (*(int *)(a3 + 8) >= 2 && v1635 == 212)
              {
                uint64_t v2097 = v1633[6];
                if (!v2097) {
                  goto LABEL_2037;
                }
                int v2098 = 1;
                do
                {
                  if (*(_DWORD *)(v2097 + 8) == v1636)
                  {
                    if (!v2098) {
                      goto LABEL_2037;
                    }
                    --v2098;
                  }
                  uint64_t v2097 = *(void *)(v2097 + 32);
                }
                while (v2097);
                if (v2098) {
                  goto LABEL_2037;
                }
                v2099 = (uint64_t *)v1633[4];
                uint64_t v2100 = *v2099;
                uint64_t v2101 = v2099[1];
                uint64_t v2102 = *(void *)(a3 + 16);
                uint64_t v2103 = *(void *)(*v2099 + 40);
                uint64_t v2104 = *(unsigned __int16 *)(*v2099 + 58);
                v3555[0] = *(void **)v94;
                LODWORD(v3555[1]) = v2091;
                v3556 = (uint64_t *)v2100;
                LODWORD(v3557) = v2101;
                uint64_t v2105 = *(void *)(v2102 + 832);
                if (v2105) {
                  __int16 v2106 = *(_WORD *)(v2105 + 8);
                }
                else {
                  __int16 v2106 = 0;
                }
                if (sub_1CD801794(v2102, 0x2Eu, v2103, v2104, (uint64_t *)v3555, 2, v2106)
                  || sub_1CB9D1EA4(v2100, v2101, 0, 0))
                {
                  uint64_t v3343 = *(void *)(a3 + 16);
                  uint64_t v3344 = *(void *)(v3343 + 832);
                  if (v3344) {
                    LOWORD(v3344) = *(_WORD *)(v3344 + 8);
                  }
                  v956 = sub_1CCFDED5C(v3343, 46, (const llvm::APInt *)&v3551, (llvm *)0xA, 0, v95, v2091, a8, v2100, v2101, v3344);
                  uint64_t v957 = v3345;
                  sub_1CCEF0788(*(void *)a3, (uint64_t)v956);
                  uint64_t v1165 = *(void *)(a3 + 16);
                  uint64_t v1166 = v1165;
                  uint64_t v1167 = 0;
LABEL_1337:
                  v1168 = sub_1CD7EBF14(v1166, v1167, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                  uint64_t v1170 = *(void *)(v1165 + 832);
                  if (v1170) {
                    LOWORD(v1170) = *(_WORD *)(v1170 + 8);
                  }
                  uint64_t v3403 = v1169;
                  __int16 v3405 = v1170;
                  uint64_t v3402 = (uint64_t)v1168;
                  uint64_t v208 = v1165;
                  uint64_t v215 = 212;
                  uint64_t v216 = 9;
LABEL_1340:
                  uint64_t v744 = 0;
LABEL_2194:
                  uint64_t v210 = v956;
                  uint64_t v211 = v957;
                  goto LABEL_1787;
                }
                int v1635 = *((unsigned __int16 *)v1633 + 12);
              }
              if (v1635 != 192)
              {
                if (v1635 != 215) {
                  goto LABEL_2037;
                }
                uint64_t v3281 = v1633[6];
                if (!v3281) {
                  goto LABEL_2037;
                }
                int v3282 = 1;
                do
                {
                  if (*(_DWORD *)(v3281 + 8) == v1636)
                  {
                    if (!v3282) {
                      goto LABEL_2037;
                    }
                    --v3282;
                  }
                  uint64_t v3281 = *(void *)(v3281 + 32);
                }
                while (v3281);
                if (v3282) {
                  goto LABEL_2037;
                }
                v3283 = (uint64_t *)v1633[4];
                if (*(unsigned char *)(a1[23037] + 347))
                {
                  uint64_t v3284 = *v3283;
                  if (*(_WORD *)(*v3283 + 24) == 99) {
                    goto LABEL_2037;
                  }
                }
                else
                {
                  uint64_t v3284 = *v3283;
                }
                uint64_t v3306 = v3283[1];
                uint64_t v3307 = *(void *)(a3 + 16);
                uint64_t v3308 = *(void *)(v3307 + 832);
                if (v3308) {
                  LOWORD(v3308) = *(_WORD *)(v3308 + 8);
                }
                v3309 = sub_1CCFDED5C(v3307, 46, (const llvm::APInt *)&v3551, (llvm *)9, 0, v95, v2091, a8, v3284, v3306, v3308);
                v3311 = v3310;
                sub_1CCEF0788(*(void *)a3, (uint64_t)v3309);
                uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v3312 = *((void *)v32 + 104);
                if (v3312) {
                  __int16 v35 = *(_WORD *)(v3312 + 8);
                }
                else {
                  __int16 v35 = 0;
                }
                uint64_t v563 = 215;
                uint64_t v564 = 10;
                uint64_t v565 = 0;
                uint64_t v31 = (uint64_t)v3309;
                uint64_t v33 = v3311;
                goto LABEL_2058;
              }
              uint64_t v3285 = v1633[6];
              if (!v3285) {
                goto LABEL_2037;
              }
              int v3286 = 1;
              do
              {
                if (*(_DWORD *)(v3285 + 8) == v1636)
                {
                  if (!v3286) {
                    goto LABEL_2037;
                  }
                  --v3286;
                }
                uint64_t v3285 = *(void *)(v3285 + 32);
              }
              while (v3285);
              if (v3286) {
                goto LABEL_2037;
              }
              v3287 = (void *)v1633[4];
              uint64_t v3289 = v3287[10];
              uint64_t v3288 = v3287[11];
              uint64_t v3290 = v3287[16];
              if (!sub_1CB9D1EA4(v3289, v3288, 0, 0)) {
                goto LABEL_2037;
              }
              uint64_t v3291 = v3287[15];
              if (!sub_1CB9D1EA4(v3291, v3290, 0, 0)) {
                goto LABEL_2037;
              }
              uint64_t v3293 = *(void *)(a3 + 16);
              uint64_t v3294 = *(void *)(v3293 + 832);
              if (v3294) {
                LOWORD(v3294) = *(_WORD *)(v3294 + 8);
              }
              v3296 = sub_1CCFDED5C(v3293, 46, (const llvm::APInt *)&v3551, v2093, v2094, v95, v2091, v3292, v3289, v3288, v3294);
              int v3298 = v3297;
              uint64_t v3299 = *(void *)(a3 + 16);
              uint64_t v3300 = *(void *)(v3299 + 832);
              if (v3300) {
                LOWORD(v3300) = *(_WORD *)(v3300 + 8);
              }
              v3301 = sub_1CCFDED5C(v3299, 46, (const llvm::APInt *)&v3551, v2093, v2094, v95, v2091, v3295, v3291, v3290, v3300);
              int v3303 = v3302;
              sub_1CCEF0788(*(void *)a3, (uint64_t)v3296);
              sub_1CCEF0788(*(void *)a3, (uint64_t)v3301);
              v3304 = (uint64_t *)v1633[4];
              uint64_t v37 = (uint64_t)sub_1CD7F6564(*(void **)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v3551, v2093, v2094, *v3304, v3304[1], v3305, v3304[5], v3304[6], (uint64_t)v3296, v3298, (uint64_t)v3301, v3303, v3304[20], v3304[21]);
LABEL_20:
              *(void *)&long long v3553 = v37;
              *((void *)&v3553 + 1) = v38;
              goto LABEL_2038;
            }
            v3555[0] = &v3556;
            v3555[1] = (void *)0x400000000;
            sub_1CD3DF8C4((uint64_t)v3555, (uint64_t)&v3556, (char *)v1633[4], (char *)(v1633[4] + 40 * *((unsigned __int16 *)v1633 + 28)));
            int v3215 = *((unsigned __int16 *)v1633 + 12);
            if (v3215 == 402) {
              unsigned int v3216 = 404;
            }
            else {
              unsigned int v3216 = 0;
            }
            if (v3215 == 401) {
              uint64_t v3217 = 403;
            }
            else {
              uint64_t v3217 = v3216;
            }
            v3218 = *(void **)(a3 + 16);
            v3219 = (void *)v1633[8];
            v3569[0] = v3219;
            if (v3219) {
              llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v3219, 2);
            }
            LODWORD(v3569[1]) = *((_DWORD *)v1633 + 15);
            uint64_t v3220 = *(void *)(a2 + 40);
            v3221 = *(llvm **)v3220;
            uint64_t v3222 = *(void *)(v3220 + 8);
            uint64_t v3223 = v3218[104];
            if (v3223) {
              uint64_t v3224 = *(unsigned __int16 *)(v3223 + 8);
            }
            else {
              uint64_t v3224 = 0;
            }
            *(void *)&long long v3553 = sub_1CD7FF4E8(v3218, (const char *)v3217, (const llvm::APInt *)v3569, v3221, v3222, (uint64_t *)v3555[0], LODWORD(v3555[1]), v3224);
            *((void *)&v3553 + 1) = v3278;
            v1222 = v3569[0];
            if (!v3569[0]) {
              goto LABEL_3533;
            }
            int v1223 = *(unsigned __int8 *)v3569[0];
            if ((v1223 - 4) <= 0x1E)
            {
              if ((*((unsigned char *)v3569[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3569[0] + 3)) {
                goto LABEL_3533;
              }
              uint64_t v3279 = *((void *)v3569[0] + 2);
              if ((v3279 & 4) == 0) {
                goto LABEL_3533;
              }
              unint64_t v3280 = v3279 & 0xFFFFFFFFFFFFFFF8;
              if (!v3280) {
                goto LABEL_3533;
              }
              goto LABEL_3530;
            }
            if ((v1223 - 3) >= 0xFFFFFFFE) {
              v3342 = v3569[0];
            }
            else {
              v3342 = 0;
            }
            if ((v1223 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v3280 = (unint64_t)v3342 + 8;
LABEL_3530:
              *(void *)&v3584[0] = v3569;
              uint64_t v1581 = v3280 + 16;
              v1582 = v3584;
LABEL_1796:
              sub_1CC5FA668(v1581, v1582);
LABEL_3533:
              unint64_t v646 = v3555[0];
              if (v3555[0] == &v3556) {
                goto LABEL_2038;
              }
              goto LABEL_1628;
            }
            break;
          case 2132:
            v1630 = a1 + 23037;
            v1631 = (unsigned char *)*v1630;
            int v1632 = 4;
            if (!*(unsigned char *)(*v1630 + 318))
            {
              if (v1631[319])
              {
                int v1632 = 5;
              }
              else if (v1631[320])
              {
                int v1632 = 6;
              }
              else if (v1631[321])
              {
                int v1632 = 7;
              }
              else
              {
                int v1632 = 9;
              }
            }
            uint64_t v2818 = *(void *)(a2 + 40);
            v2819 = *(llvm **)v2818;
            uint64_t v2820 = *(void *)(v2818 + 8);
            unsigned int v2821 = sub_1CB9E757C(5, v1632);
            if (v2821 < 0x11) {
              unsigned __int8 v2822 = 4;
            }
            else {
              unsigned __int8 v2822 = 5;
            }
            if (v2821 < 0x11) {
              uint64_t v2823 = 4;
            }
            else {
              uint64_t v2823 = 5;
            }
            uint64_t v2825 = sub_1CD7EEB94(*(void *)(a3 + 16), 5, v2819, v2820);
            v2826 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2827 = *((void *)v2826 + 104);
            if (v2827) {
              __int16 v2828 = *(_WORD *)(v2827 + 8);
            }
            else {
              __int16 v2828 = 0;
            }
            v2829 = sub_1CD7F3564(v2826, (const char *)0x18C, (uint64_t)&v3551, (llvm *)v2823, 0, v2825, v2824, v2828);
            unint64_t v2794 = v2830;
            if (*(unsigned char *)(*v1630 + 328))
            {
              uint64_t v2832 = *(void *)(a3 + 16);
              v2833 = sub_1CD7EBF14(v2832, 4, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, 0, 0);
              __int16 v2836 = 0;
              uint64_t v2837 = *(void *)(v2832 + 832);
              if (v2837) {
                __int16 v2836 = *(_WORD *)(v2837 + 8);
              }
              v2838 = sub_1CCFDED5C(v2832, 177, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, (uint64_t)v2829, v2794, v2835, (uint64_t)v2833, v2834, v2836);
              uint64_t v2840 = v2839;
              v2841 = sub_1CD7EBF14(*(void *)(a3 + 16), 7, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, 0, 0);
              __int16 v2844 = 0;
              uint64_t v2845 = *(void *)(v2832 + 832);
              if (v2845) {
                __int16 v2844 = *(_WORD *)(v2845 + 8);
              }
              v2846 = sub_1CCFDED5C(v2832, 171, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, (uint64_t)v2838, v2840, v2843, (uint64_t)v2841, v2842, v2844);
              uint64_t v2848 = v2847;
              v2849 = sub_1CD7EBF14(*(void *)(a3 + 16), 10, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, 0, 0);
              __int16 v2852 = 0;
              uint64_t v2853 = *(void *)(v2832 + 832);
              if (v2853) {
                __int16 v2852 = *(_WORD *)(v2853 + 8);
              }
              v2854 = sub_1CCFDED5C(v2832, 58, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, (uint64_t)v2846, v2848, v2851, (uint64_t)v2849, v2850, v2852);
              uint64_t v2856 = v2855;
              uint64_t v2857 = *(void *)(a3 + 16);
              v2858 = sub_1CD7EBF14(v2857, 15, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, 0, 0);
              uint64_t v2861 = *(void *)(v2857 + 832);
              if (v2861) {
                LOWORD(v2861) = *(_WORD *)(v2861 + 8);
              }
              v2862 = sub_1CCFDED5C(v2857, 171, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, (uint64_t)v2829, v2794, v2860, (uint64_t)v2858, v2859, v2861);
              uint64_t v2865 = *(void *)(a3 + 16);
              uint64_t v2866 = *(void *)(v2865 + 832);
              if (v2866) {
                LOWORD(v2866) = *(_WORD *)(v2866 + 8);
              }
              v2829 = sub_1CCFDED5C(v2865, 56, (const llvm::APInt *)&v3551, (llvm *)v2823, 0, (uint64_t)v2854, v2856, v2864, (uint64_t)v2862, v2863, v2866);
              unint64_t v2794 = v2794 & 0xFFFFFFFF00000000 | v2867;
            }
            if (v2822 == v2819)
            {
              *(void *)&long long v3553 = v2829;
LABEL_2993:
              *((void *)&v3553 + 1) = v2794;
              goto LABEL_2038;
            }
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2831 = *((void *)v32 + 104);
            if (v2831) {
              __int16 v35 = *(_WORD *)(v2831 + 8);
            }
            else {
              __int16 v35 = 0;
            }
            uint64_t v563 = 199;
            uint64_t v564 = (uint64_t)v2819;
            uint64_t v565 = (void *)v2820;
            uint64_t v31 = (uint64_t)v2829;
LABEL_2991:
            uint64_t v33 = (void *)v2794;
            goto LABEL_2058;
          case 2159:
          case 2160:
          case 2161:
          case 2162:
            int v571 = *(void **)(a3 + 16);
            if ((v98 - 2159) >= 4) {
              uint64_t v572 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v572 = (v98 - 1728);
            }
            uint64_t v573 = v571[104];
            if (v573) {
              LOWORD(v573) = *(_WORD *)(v573 + 8);
            }
            uint64_t v37 = (uint64_t)sub_1CD7F5D38(v571, (const char *)v572, (const llvm::APInt *)&v3551, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), *(void *)(v94 + 40), *(void *)(v94 + 48), a8, *(void *)(v94 + 80), *(void *)(v94 + 88), *(void *)(v94 + 120), *(void *)(v94 + 128), HIDWORD(*(void *)(v94 + 128)), v573);
            goto LABEL_20;
          case 2168:
            uint64_t v1625 = *(void *)(v94 + 40);
            int v1626 = *(unsigned __int16 *)(v1625 + 24);
            if (v1626 != 35 && v1626 != 11) {
              goto LABEL_2037;
            }
            uint64_t v1627 = *(void *)(v1625 + 80);
            v1628 = (unsigned int *)(v1627 + 24);
            if (*(_DWORD *)(v1627 + 32) >= 0x41u) {
              v1628 = *(unsigned int **)v1628;
            }
            uint64_t v479 = *(void *)(a3 + 16);
            uint64_t v481 = 31 - __clz(*v1628);
            v1629 = *(uint64_t **)(a2 + 40);
            uint64_t v186 = *v1629;
            unsigned int v187 = (void *)v1629[1];
            goto LABEL_477;
          case 2171:
          case 2172:
            uint64_t v2422 = *(void *)(v94 + 40);
            v2423 = *(void **)(v94 + 48);
            v2424 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2425 = *((void *)v2424 + 104);
            if (v2425) {
              __int16 v2426 = *(_WORD *)(v2425 + 8);
            }
            else {
              __int16 v2426 = 0;
            }
            uint64_t v2680 = *(void *)(v94 + 80);
            uint64_t v2681 = *(void *)(v94 + 88);
            uint64_t v3506 = *(void *)(v94 + 128);
            uint64_t v3486 = *(void *)(v94 + 120);
            v2682 = sub_1CD7F3564(v2424, (const char *)0xD8, (uint64_t)&v3551, (llvm *)0x31, 0, v2422, v2423, v2426);
            uint64_t v2684 = v2683;
            uint64_t v2685 = *(void *)(a3 + 16);
            v2686 = sub_1CD7EBF14(v2685, 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            __int16 v2689 = 0;
            uint64_t v2690 = *(void *)(v2685 + 832);
            if (v2690) {
              __int16 v2689 = *(_WORD *)(v2690 + 8);
            }
            v2691 = sub_1CCFDED5C(v2685, 148, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v2682, v2684, v2688, (uint64_t)v2686, v2687, v2689);
            unsigned int v2693 = v2692;
            uint64_t v2694 = *(void *)(a3 + 16);
            v2695 = sub_1CD7EBF14(v2694, 0xFF00000000, (const llvm::APInt *)&v3551, (llvm *)6, 0, 0, 0);
            __int16 v2698 = 0;
            uint64_t v2699 = *(void *)(v2694 + 832);
            if (v2699) {
              __int16 v2698 = *(_WORD *)(v2699 + 8);
            }
            v2700 = sub_1CCFDED5C(v2694, 171, (const llvm::APInt *)&v3551, (llvm *)6, 0, v2422, (uint64_t)v2423, v2697, (uint64_t)v2695, v2696, v2698);
            uint64_t v2702 = v2701;
            uint64_t v2703 = *(void *)(a3 + 16);
            v2704 = sub_1CD7EBF14(v2703, 32, (const llvm::APInt *)&v3551, (llvm *)6, 0, 0, 0);
            __int16 v2707 = 0;
            uint64_t v2708 = *(void *)(v2703 + 832);
            if (v2708) {
              __int16 v2707 = *(_WORD *)(v2708 + 8);
            }
            v2709 = sub_1CCFDED5C(v2703, 177, (const llvm::APInt *)&v3551, (llvm *)6, 0, (uint64_t)v2700, v2702, v2706, (uint64_t)v2704, v2705, v2707);
            __int16 v2710 = 0;
            unint64_t v2711 = v2702 & 0xFFFFFFFF00000000;
            v2713 = (void *)(v2702 & 0xFFFFFFFF00000000 | v2712);
            v2714 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2715 = *((void *)v2714 + 104);
            if (v2715) {
              __int16 v2710 = *(_WORD *)(v2715 + 8);
            }
            unint64_t v2716 = v2684 & 0xFFFFFFFF00000000 | v2693;
            v2718 = sub_1CD7F3564(v2714, (const char *)0xC9, (uint64_t)&v3551, (llvm *)4, 0, (uint64_t)v2709, v2713, v2710);
            __int16 v2720 = 0;
            uint64_t v2721 = *(void *)(a3 + 16);
            uint64_t v2722 = *(void *)(v2721 + 832);
            if (v2722) {
              __int16 v2720 = *(_WORD *)(v2722 + 8);
            }
            v2724 = sub_1CCFDED5C(v2721, 146, (const llvm::APInt *)&v3551, (llvm *)0x26, 0, (uint64_t)v2718, v2717 | v2711, v2719, v2680, v2681, v2720);
            unint64_t v2725 = (unint64_t)v2723;
            __int16 v2726 = 0;
            v2727 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2728 = *((void *)v2727 + 104);
            if (v2728) {
              __int16 v2726 = *(_WORD *)(v2728 + 8);
            }
            v2729 = sub_1CD7F3564(v2727, (const char *)0xD8, (uint64_t)&v3551, (llvm *)5, 0, (uint64_t)v2724, v2723, v2726);
            __int16 v2731 = 0;
            unint64_t v2733 = v2725 & 0xFFFFFFFF00000000 | v2732;
            uint64_t v2734 = *(void *)(a3 + 16);
            uint64_t v2735 = *(void *)(v2734 + 832);
            if (v2735) {
              __int16 v2731 = *(_WORD *)(v2735 + 8);
            }
            v2737 = sub_1CCFDED5C(v2734, 146, (const llvm::APInt *)&v3551, (llvm *)0x31, 0, (uint64_t)v2691, v2716, v2730, (uint64_t)v2729, v2733, v2731);
            __int16 v2738 = 0;
            v2739 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2740 = *((void *)v2739 + 104);
            if (v2740) {
              __int16 v2738 = *(_WORD *)(v2740 + 8);
            }
            v2741 = sub_1CD7F3564(v2739, (const char *)0xD8, (uint64_t)&v3551, (llvm *)6, 0, (uint64_t)v2737, v2736, v2738);
            v2744 = v2741;
            int v2745 = v2742;
            if (v98 == 2171)
            {
              v3555[0] = v2741;
              LODWORD(v3555[1]) = v2742;
              v3556 = (uint64_t *)v3486;
              LODWORD(v3557) = v3506;
              uint64_t v2746 = *(void *)(a3 + 16);
              uint64_t v2747 = sub_1CD7F95FC(v2746, 6, 0, 5, 0);
              uint64_t v2749 = v2748;
              __int16 v2750 = 0;
              uint64_t v2751 = *(void *)(v2746 + 832);
              if (v2751) {
                __int16 v2750 = *(_WORD *)(v2751 + 8);
              }
              v2752 = (void *)v2746;
              uint64_t v2753 = 2;
            }
            else
            {
              uint64_t v2754 = *(void *)(a2 + 32);
              uint64_t v2755 = *(void *)(v2754 + 160);
              uint64_t v2756 = *(void *)(v2754 + 168);
              *(_OWORD *)v3569 = *(_OWORD *)(v2754 + 200);
              uint64_t v2757 = *(void *)(a3 + 16);
              uint64_t v2758 = *(void *)(v2757 + 832);
              if (v2758) {
                LOWORD(v2758) = *(_WORD *)(v2758 + 8);
              }
              v2760 = sub_1CCFDED5C(v2757, 146, (const llvm::APInt *)&v3551, (llvm *)0x31, 0, v3486, v3506, v2743, v2755, v2756, v2758);
              __int16 v2761 = 0;
              v2762 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v2763 = *((void *)v2762 + 104);
              if (v2763) {
                __int16 v2761 = *(_WORD *)(v2763 + 8);
              }
              v2764 = sub_1CD7F3564(v2762, (const char *)0xD8, (uint64_t)&v3551, (llvm *)6, 0, (uint64_t)v2760, v2759, v2761);
              v3555[0] = v2744;
              LODWORD(v3555[1]) = v2745;
              v3556 = v2764;
              LODWORD(v3557) = v2765;
              *((void **)&v3557 + 1) = v3569[0];
              LODWORD(v3558) = v3569[1];
              uint64_t v2766 = *(void *)(a3 + 16);
              uint64_t v2747 = sub_1CD7FAB44(v2766, 6, 0, 6, 0, 5, 0);
              uint64_t v2749 = v2767;
              __int16 v2750 = 0;
              uint64_t v2768 = *(void *)(v2766 + 832);
              if (v2768) {
                __int16 v2750 = *(_WORD *)(v2768 + 8);
              }
              v2752 = (void *)v2766;
              uint64_t v2753 = 3;
            }
            uint64_t v37 = (uint64_t)sub_1CD7FF854(v2752, (const char *)0x37, (const llvm::APInt *)&v3551, v2747, v2749, (uint64_t *)v3555, v2753, v2750);
            goto LABEL_20;
          default:
            if (v98 == 1281)
            {
              v1646 = *(void **)(a2 + 64);
              v3555[0] = v1646;
              if (v1646)
              {
                llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1646, 2);
                int v11 = *(_DWORD *)(a2 + 60);
                uint64_t v94 = *(void *)(a2 + 32);
              }
              LODWORD(v3555[1]) = v11;
              v1233 = *(uint64_t **)(v94 + 40);
              int v1647 = *((unsigned __int16 *)v1233 + 12);
              if (v1647 == 35 || v1647 == 11)
              {
                unsigned int v1648 = *(_DWORD *)(v94 + 48);
              }
              else
              {
                v1233 = sub_1CB9E7754(*(void *)(v94 + 40), *(llvm::APFloatBase **)(a3 + 16));
                uint64_t v94 = *(void *)(a2 + 32);
              }
              uint64_t v1235 = v1648;
              uint64_t v1237 = *(void *)(v94 + 80);
              uint64_t v1238 = *(void *)(v94 + 88);
              uint64_t v1239 = *(void *)(a3 + 16);
            }
            else
            {
              if (v98 != 1822) {
                goto LABEL_2037;
              }
              v1232 = *(void **)(a2 + 64);
              v3555[0] = v1232;
              if (v1232)
              {
                llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1232, 2);
                int v11 = *(_DWORD *)(a2 + 60);
                uint64_t v94 = *(void *)(a2 + 32);
              }
              LODWORD(v3555[1]) = v11;
              v1233 = sub_1CB9E7754(*(void *)(v94 + 40), *(llvm::APFloatBase **)(a3 + 16));
              uint64_t v1235 = v1234;
              uint64_t v1236 = *(void *)(a2 + 32);
              uint64_t v1237 = *(void *)(v1236 + 80);
              uint64_t v1238 = *(void *)(v1236 + 88);
              uint64_t v1239 = *(void *)(a3 + 16);
            }
            uint64_t v2031 = *(void *)(v1239 + 832);
            if (v2031) {
              LOWORD(v2031) = *(_WORD *)(v2031 + 8);
            }
            int v859 = sub_1CCFDED5C(v1239, 56, (const llvm::APInt *)v3555, (llvm *)6, 0, (uint64_t)v1233, v1235, a8, v1237, v1238, v2031);
            goto LABEL_984;
        }
LABEL_3531:
        if (v1223 == 3) {
          v1222[1] = 0;
        }
        goto LABEL_3533;
      }
      switch(v98)
      {
        case 0xFD:
LABEL_1351:
          v1184 = *(void **)(a2 + 64);
          v3569[0] = v1184;
          if (v1184)
          {
            llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v1184, 2);
            int v11 = *(_DWORD *)(a2 + 60);
            uint64_t v94 = *(void *)(a2 + 32);
          }
          LODWORD(v3569[1]) = v11;
          uint64_t v1185 = *(void *)(v94 + 40);
          int v1186 = *(unsigned __int16 *)(v1185 + 24);
          if (v1186 != 36 && v1186 != 12)
          {
            v1187 = *(void **)(v94 + 48);
            uint64_t v1188 = *(void *)(a2 + 40);
            v1176 = *(llvm **)v1188;
            __int16 v1177 = *(_WORD *)(a2 + 72);
            uint64_t v1189 = *(void *)(a3 + 16);
            if (v1186 != 215)
            {
              BOOL v1190 = v98 != 2517 && (*(_WORD *)(*(void *)v1189 + 1020) & 1) == 0;
              BOOL v1191 = v1190 && (v1177 & 0x80) == 0;
              if (v1191 && *(void *)v1188 != 9)
              {
                DWORD2(v3584[0]) = 32;
                *(void *)&v3584[0] = 1602224128;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3555[1], (const llvm::APInt **)v3584);
                v3499 = sub_1CD7ECA8C(v1189, (llvm::LLVMContext *)v3555, (const llvm::APFloat *)v3569, (llvm *)0xA, 0, 0);
                int v3480 = v2256;
                if (v3555[1] == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v3556);
                }
                else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
                {
                  MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
                }
                uint64_t v2257 = *(void *)(a3 + 16);
                DWORD2(v3584[0]) = 32;
                *(void *)&v3584[0] = 528482304;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3555[1], (const llvm::APInt **)v3584);
                v2258 = sub_1CD7ECA8C(v2257, (llvm::LLVMContext *)v3555, (const llvm::APFloat *)v3569, (llvm *)0xA, 0, 0);
                uint64_t v3451 = v2260;
                uint64_t v3464 = (uint64_t)v2258;
                if (v3555[1] == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v3556);
                }
                else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
                {
                  MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
                }
                v2261 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3569, (llvm *)0xA, 0, v1185, (uint64_t)v1187, v2259, v3464, v3451, v1177);
                unsigned int v2263 = v2262;
                __int16 v2264 = 0;
                v2265 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2266 = *((void *)v2265 + 104);
                if (v2266) {
                  __int16 v2264 = *(_WORD *)(v2266 + 8);
                }
                v2267 = sub_1CD7F3564(v2265, (const char *)0xDF, (uint64_t)v3569, (llvm *)0xA, 0, v1185, v1187, v2264);
                int v2269 = v2268;
                v2270 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3569, (uint64_t)v2267, v2268, (uint64_t)v3499, v3480, (uint64_t)v2261, v2263, v1185, (int)v1187, SHIDWORD(v1187), 2u);
                v2272 = v2271;
                v2273 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0x1A1, (uint64_t)v3569, (llvm *)0xA, 0, (uint64_t)v2270, v2271, v1177);
                v2275 = v2274;
                v2276 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)v3569, 10, 0, 0, 1.0);
                uint64_t v2278 = v2277;
                __int16 v2279 = 0;
                v2280 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2281 = *((void *)v2280 + 104);
                if (v2281) {
                  __int16 v2279 = *(_WORD *)(v2281 + 8);
                }
                v2282 = sub_1CD7F3564(v2280, (const char *)0xDE, (uint64_t)v3569, (llvm *)0xA, 0, (uint64_t)v2270, v2272, v2279);
                v2285 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2282, v2283, v2284, (uint64_t)v2273, (uint64_t)v2275, (uint64_t)v2276, v2278, SHIDWORD(v2278), v1177);
                v2288 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2285, v2286, v2287, (uint64_t)v2273, (uint64_t)v2275, (uint64_t)v2273, (int)v2275, SHIDWORD(v2275), v1177);
                uint64_t v2290 = v2289;
                __int16 v2291 = 0;
                v2292 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2293 = *((void *)v2292 + 104);
                if (v2293) {
                  __int16 v2291 = *(_WORD *)(v2293 + 8);
                }
                v2295 = sub_1CD7F3564(v2292, (const char *)0xDF, (uint64_t)v3569, (llvm *)0xA, 0, (uint64_t)v2273, v2275, v2291);
                __int16 v2296 = 0;
                v2297 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2298 = *((void *)v2297 + 104);
                if (v2298) {
                  __int16 v2296 = *(_WORD *)(v2298 + 8);
                }
                v2299 = sub_1CD7F3564(v2297, (const char *)0xD8, (uint64_t)v3569, (llvm *)5, 0, (uint64_t)v2295, v2294, v2296);
                uint64_t v2301 = v2300;
                uint64_t v2302 = *(void *)(a3 + 16);
                v2303 = sub_1CD7EBF14(v2302, 1, (const llvm::APInt *)v3569, (llvm *)5, 0, 0, 0);
                __int16 v2306 = 0;
                uint64_t v2307 = *(void *)(v2302 + 832);
                if (v2307) {
                  __int16 v2306 = *(_WORD *)(v2307 + 8);
                }
                v2308 = sub_1CCFDED5C(v2302, 57, (const llvm::APInt *)v3569, (llvm *)5, 0, (uint64_t)v2299, v2301, v2305, (uint64_t)v2303, v2304, v2306);
                int v2310 = v2309;
                v2311 = sub_1CD7EBF14(*(void *)(a3 + 16), 2139095039, (const llvm::APInt *)v3569, (llvm *)5, 0, 0, 0);
                v2313 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3569, (uint64_t)v2308, v2310, (uint64_t)v2311, v2312, (uint64_t)v2273, v2275, (uint64_t)v2288, v2290, SHIDWORD(v2290), 0xBu);
                unint64_t v2315 = v2290 & 0xFFFFFFFF00000000 | v2314;
                v2317 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2313, v2315, v2316, v3464, v3451, v1177);
                v1193 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3569, (uint64_t)v2267, v2269, (uint64_t)v3499, v3480, (uint64_t)v2317, v2318, (uint64_t)v2313, v2315, SHIDWORD(v2315), 2u);
                goto LABEL_1369;
              }
            }
            uint64_t v1179 = *(void *)(v1188 + 8);
            v1180 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1181 = 417;
            uint64_t v1182 = v1185;
            v1183 = v1187;
LABEL_1368:
            v1193 = sub_1CD7F3564(v1180, (const char *)v1181, (uint64_t)v3569, v1176, v1179, v1182, v1183, v1177);
LABEL_1369:
            *(void *)&long long v3553 = v1193;
            *((void *)&v3553 + 1) = v1194;
LABEL_1370:
            unint64_t v861 = v3569[0];
            if (!v3569[0]) {
              goto LABEL_2038;
            }
            int v862 = *(unsigned __int8 *)v3569[0];
            if ((v862 - 4) > 0x1E)
            {
              if ((v862 - 3) >= 0xFFFFFFFE) {
                v1644 = v3569[0];
              }
              else {
                v1644 = 0;
              }
              if ((v862 - 3) < 0xFFFFFFFE) {
                goto LABEL_3016;
              }
              unint64_t v1196 = (unint64_t)v1644 + 8;
            }
            else
            {
              if ((*((unsigned char *)v3569[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3569[0] + 3)) {
                goto LABEL_2038;
              }
              uint64_t v1195 = *((void *)v3569[0] + 2);
              if ((v1195 & 4) == 0) {
                goto LABEL_2038;
              }
              unint64_t v1196 = v1195 & 0xFFFFFFFFFFFFFFF8;
              if (!v1196) {
                goto LABEL_2038;
              }
            }
            v1645 = v3569;
            goto LABEL_1871;
          }
          uint64_t v2051 = *(void *)(v1185 + 80);
          uint64_t v2052 = *(void *)(v2051 + 32);
          if ((_UNKNOWN *)v2052 == &unk_1CFB2E344)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], (const llvm::detail::DoubleAPFloat *)(v2051 + 32));
          }
          else
          {
            v3555[1] = *(void **)(v2051 + 32);
            if ((*(_DWORD *)(v2052 + 8) + 64) >= 0x80) {
              operator new[]();
            }
            char v2053 = *(unsigned char *)(v2051 + 52);
            int v2054 = v2053 & 7;
            BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v2053 & 8 | v2053 & 7;
            LODWORD(v3557) = *(_DWORD *)(v2051 + 48);
            BOOL v2056 = (v2053 & 6) != 0 && v2054 != 3;
            if (v2054 == 1 || v2056)
            {
              uint64_t v2058 = *((unsigned int *)v3555[1] + 2);
              if ((v2058 - 64) <= 0xFFFFFF7F) {
                v2059 = (uint64_t **)v3556;
              }
              else {
                v2059 = &v3556;
              }
              v2062 = *(uint64_t ***)(v2051 + 40);
              v2061 = (uint64_t **)(v2051 + 40);
              v2060 = v2062;
              if ((*((_DWORD *)*(v2061 - 1) + 2) - 64) >= 0xFFFFFF80) {
                v2060 = v2061;
              }
              if (v2058 <= 0xFFFFFFBF)
              {
                unint64_t v2063 = (unint64_t)(v2058 + 64) >> 6;
                do
                {
                  v2064 = *v2060++;
                  *v2059++ = v2064;
                  --v2063;
                }
                while (v2063);
              }
            }
          }
          llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, v3584);
          double v2065 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3555);
          uint64_t v2047 = *(void *)(a3 + 16);
          v2066 = *(uint64_t **)(a2 + 40);
          uint64_t v2049 = *v2066;
          uint64_t v2050 = v2066[1];
          double v2046 = 1.0 / v2065;
          break;
        case 0x105:
LABEL_1341:
          v1171 = *(void **)(a2 + 64);
          v3569[0] = v1171;
          if (v1171)
          {
            llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v1171, 2);
            int v11 = *(_DWORD *)(a2 + 60);
            uint64_t v94 = *(void *)(a2 + 32);
          }
          LODWORD(v3569[1]) = v11;
          uint64_t v1172 = *(void *)(v94 + 40);
          int v1173 = *(unsigned __int16 *)(v1172 + 24);
          if (v1173 != 36 && v1173 != 12)
          {
            uint64_t v1174 = *(void *)(v94 + 48);
            uint64_t v1175 = *(void *)(a2 + 40);
            v1176 = *(llvm **)v1175;
            __int16 v1177 = *(_WORD *)(a2 + 72);
            uint64_t v1178 = *(void *)(a3 + 16);
            if (v1173 != 215
              && v98 != 2526
              && (*(_WORD *)(*(void *)v1178 + 1020) & 1) == 0
              && (v1177 & 0x200) == 0
              && *(void *)v1175 != 9)
            {
              DWORD2(v3584[0]) = 32;
              *(void *)&v3584[0] = 1593835520;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3555[1], (const llvm::APInt **)v3584);
              v2182 = sub_1CD7ECA8C(v1178, (llvm::LLVMContext *)v3555, (const llvm::APFloat *)v3569, (llvm *)0xA, 0, 0);
              int v3450 = v2183;
              uint64_t v3463 = (uint64_t)v2182;
              if (v3555[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v3556);
              }
              else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
              {
                MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
              }
              uint64_t v2184 = *(void *)(a3 + 16);
              DWORD2(v3584[0]) = 32;
              *(void *)&v3584[0] = 528482304;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3555[1], (const llvm::APInt **)v3584);
              v2186 = sub_1CD7ECA8C(v2184, (llvm::LLVMContext *)v3555, (const llvm::APFloat *)v3569, (llvm *)0xA, 0, 0);
              uint64_t v2188 = v2187;
              if (v3555[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v3556);
              }
              else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
              {
                MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
              }
              v2189 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3569, (llvm *)0xA, 0, v1172, v1174, v2185, (uint64_t)v2186, v2188, v1177);
              v2191 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3569, v1172, v1174, v3463, v3450, (uint64_t)v2189, v2190, v1172, v1174, SHIDWORD(v1174), 2u);
              uint64_t v2193 = (uint64_t)v2192;
              v2194 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0x1A2, (uint64_t)v3569, (llvm *)0xA, 0, (uint64_t)v2191, v2192, v1177);
              v2196 = v2195;
              v2197 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)v3569, 10, 0, 0, 0.5);
              uint64_t v3432 = v2198;
              uint64_t v3440 = (uint64_t)v2197;
              v2199 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)v3569, 10, 0, 0, -0.5);
              uint64_t v3423 = v2200;
              uint64_t v3426 = (uint64_t)v2199;
              unsigned int v3479 = v2196;
              uint64_t v3498 = (uint64_t)v2194;
              v2203 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2191, v2193, v2201, (uint64_t)v2194, (uint64_t)v2196, v1177);
              uint64_t v2204 = (uint64_t)v2202;
              __int16 v2205 = 0;
              v2206 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v2207 = *((void *)v2206 + 104);
              if (v2207) {
                __int16 v2205 = *(_WORD *)(v2207 + 8);
              }
              v2208 = sub_1CD7F3564(v2206, (const char *)0xDE, (uint64_t)v3569, (llvm *)0xA, 0, (uint64_t)v2203, v2202, v2205);
              v2212 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2191, v2193, v2211, (uint64_t)v2194, (uint64_t)v2196, (uint64_t)v2208, v2209, v2210, v1177);
              uint64_t v3418 = v2213;
              uint64_t v3420 = (uint64_t)v2212;
              v2215 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3569, (llvm *)0xA, 0, v3426, v3423, v2214, (uint64_t)v2194, (uint64_t)v2196, v1177);
              uint64_t v2217 = v2216;
              v2219 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2203, v2204, v2218, (uint64_t)v2215, v2216, v3440, v3432, SHIDWORD(v3432), v1177);
              v2223 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2215, v2217, v2222, v3420, v3418, (uint64_t)v2219, v2220, v2221, v1177);
              v2226 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2223, v2224, v2225, v3498, (uint64_t)v2196, v3498, (int)v2196, SHIDWORD(v2196), v1177);
              uint64_t v2228 = v2227;
              __int16 v2229 = 0;
              v2230 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v2231 = *((void *)v2230 + 104);
              if (v2231) {
                __int16 v2229 = *(_WORD *)(v2231 + 8);
              }
              v2232 = sub_1CD7F3564(v2230, (const char *)0xD8, (uint64_t)v3569, (llvm *)5, 0, v3498, v2196, v2229);
              uint64_t v2234 = v2233;
              uint64_t v2235 = *(void *)(a3 + 16);
              v2236 = sub_1CD7EBF14(v2235, 1, (const llvm::APInt *)v3569, (llvm *)5, 0, 0, 0);
              __int16 v2239 = 0;
              uint64_t v2240 = *(void *)(v2235 + 832);
              if (v2240) {
                __int16 v2239 = *(_WORD *)(v2240 + 8);
              }
              v2241 = sub_1CCFDED5C(v2235, 57, (const llvm::APInt *)v3569, (llvm *)5, 0, (uint64_t)v2232, v2234, v2238, (uint64_t)v2236, v2237, v2239);
              int v2243 = v2242;
              v2244 = sub_1CD7EBF14(*(void *)(a3 + 16), 2139095039, (const llvm::APInt *)v3569, (llvm *)5, 0, 0, 0);
              v2246 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3569, (uint64_t)v2241, v2243, (uint64_t)v2244, v2245, v3498, v3479, (uint64_t)v2226, v2228, SHIDWORD(v2228), 0xBu);
              unint64_t v2248 = v2228 & 0xFFFFFFFF00000000 | v2247;
              uint64_t v2249 = *(void *)(a3 + 16);
              DWORD2(v3584[0]) = 32;
              *(void *)&v3584[0] = 796917760;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3555[1], (const llvm::APInt **)v3584);
              v2251 = sub_1CD7ECA8C(v2249, (llvm::LLVMContext *)v3555, (const llvm::APFloat *)v3569, (llvm *)0xA, 0, 0);
              uint64_t v2253 = v2252;
              if (v3555[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v3556);
              }
              else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
              {
                MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
              }
              v2254 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3569, (llvm *)0xA, 0, (uint64_t)v2246, v2248, v2250, (uint64_t)v2251, v2253, v1177);
              v1193 = sub_1CD3D6058(*(void **)(a3 + 16), (const llvm::APInt *)v3569, v1172, v1174, v3463, v3450, (uint64_t)v2254, v2255, (uint64_t)v2246, v2248, SHIDWORD(v2248), 2u);
              goto LABEL_1369;
            }
            uint64_t v1179 = *(void *)(v1175 + 8);
            v1180 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1181 = 418;
            uint64_t v1182 = *(void *)(v94 + 40);
            v1183 = *(void **)(v94 + 48);
            goto LABEL_1368;
          }
          uint64_t v2033 = *(void *)(v1172 + 80);
          uint64_t v2034 = *(void *)(v2033 + 32);
          if ((_UNKNOWN *)v2034 == &unk_1CFB2E344)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], (const llvm::detail::DoubleAPFloat *)(v2033 + 32));
          }
          else
          {
            v3555[1] = *(void **)(v2033 + 32);
            if ((*(_DWORD *)(v2034 + 8) + 64) >= 0x80) {
              operator new[]();
            }
            char v2035 = *(unsigned char *)(v2033 + 52);
            int v2036 = v2035 & 7;
            BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v2035 & 8 | v2035 & 7;
            LODWORD(v3557) = *(_DWORD *)(v2033 + 48);
            BOOL v2038 = (v2035 & 6) != 0 && v2036 != 3;
            if (v2036 == 1 || v2038)
            {
              uint64_t v2039 = *((unsigned int *)v3555[1] + 2);
              if ((v2039 - 64) <= 0xFFFFFF7F) {
                v2040 = (uint64_t **)v3556;
              }
              else {
                v2040 = &v3556;
              }
              v2043 = *(uint64_t ***)(v2033 + 40);
              v2042 = (uint64_t **)(v2033 + 40);
              v2041 = v2043;
              if ((*((_DWORD *)*(v2042 - 1) + 2) - 64) >= 0xFFFFFF80) {
                v2041 = v2042;
              }
              if (v2039 <= 0xFFFFFFBF)
              {
                unint64_t v2044 = (unint64_t)(v2039 + 64) >> 6;
                do
                {
                  v2045 = *v2041++;
                  *v2040++ = v2045;
                  --v2044;
                }
                while (v2044);
              }
            }
          }
          llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, v3584);
          double v2046 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v3555));
          uint64_t v2047 = *(void *)(a3 + 16);
          v2048 = *(uint64_t **)(a2 + 40);
          uint64_t v2049 = *v2048;
          uint64_t v2050 = v2048[1];
          break;
        case 0x4F5:
LABEL_698:
          uint64_t v648 = (unsigned char *)a1[23037];
          if (v648[318])
          {
            int v649 = 4;
          }
          else if (v648[319])
          {
            int v649 = 5;
          }
          else if (v648[320])
          {
            int v649 = 6;
          }
          else if (v648[321])
          {
            int v649 = 7;
          }
          else
          {
            int v649 = 9;
          }
          int v1197 = dword_1CDB0D6CC[(int)sub_1CB9F6460(v98)];
          uint64_t v1198 = *(void *)(a2 + 40);
          uint64_t v286 = *(llvm **)v1198;
          uint64_t v287 = *(void *)(v1198 + 8);
          unsigned int v1199 = sub_1CB9E757C(v1197, v649);
          uint64_t v31 = sub_1CD7EEB94(*(void *)(a3 + 16), v1197, (llvm *)5, 0);
          uint64_t v33 = v1200;
          if (v286 != 5 || v1199 > 0x10)
          {
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1204 = *((void *)v32 + 104);
            if (v1204) {
              __int16 v35 = *(_WORD *)(v1204 + 8);
            }
            else {
              __int16 v35 = 0;
            }
LABEL_1390:
            uint64_t v563 = 396;
            uint64_t v564 = (uint64_t)v286;
            uint64_t v565 = (void *)v287;
            goto LABEL_2058;
          }
          v1201 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v1202 = *((void *)v1201 + 104);
          if (v1202) {
            __int16 v1203 = *(_WORD *)(v1202 + 8);
          }
          else {
            __int16 v1203 = 0;
          }
          uint64_t v31 = (uint64_t)sub_1CD7F3564(v1201, (const char *)0x18C, (uint64_t)&v3551, (llvm *)4, 0, v31, v1200, v1203);
          uint64_t v33 = v1205;
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v1206 = *((void *)v32 + 104);
          if (v1206) {
            __int16 v35 = *(_WORD *)(v1206 + 8);
          }
          else {
            __int16 v35 = 0;
          }
          uint64_t v563 = 199;
          uint64_t v564 = 5;
          goto LABEL_1396;
        default:
          goto LABEL_2037;
      }
      *(void *)&long long v3553 = sub_1CD7ECDC4(v2047, (uint64_t)v3569, v2049, v2050, 0, v2046);
      *((void *)&v3553 + 1) = v2067;
      if (v3555[1] == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v3556);
      }
      else if ((*((_DWORD *)v3555[1] + 2) - 64) <= 0xFFFFFF7F && v3556)
      {
        MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
      }
      goto LABEL_1370;
    }
    if (*(unsigned __int16 *)(a2 + 24) > 0x8Cu)
    {
      switch(*(_WORD *)(a2 + 24))
      {
        case 0x8D:
          int v58 = *(uint64_t **)(a2 + 32);
          uint64_t v59 = *(void *)(a2 + 40);
          uint64_t v61 = *v58;
          uint64_t v60 = v58[1];
          uint64_t v62 = (uint64_t *)v58[5];
          unint64_t v63 = v58[6];
          uint64_t v65 = (uint64_t *)v58[10];
          unint64_t v64 = v58[11];
          uint64_t v66 = *(llvm **)v59;
          int v67 = *(unsigned __int16 *)(a2 + 72);
          if (*(_WORD *)(*v58 + 24) == 222)
          {
            int v68 = *((unsigned __int16 *)v62 + 12);
            if (v68 == 36 || v68 == 12)
            {
              char v70 = *(void **)(a3 + 16);
              int v71 = *(uint64_t **)(v61 + 32);
              uint64_t v72 = *v71;
              uint64_t v73 = v71[1];
              uint64_t v74 = v70[104];
              if (v74) {
                __int16 v75 = *(_WORD *)(v74 + 8);
              }
              else {
                __int16 v75 = 0;
              }
              uint64_t v767 = *(void *)(v59 + 8);
              uint64_t v768 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)&v3551, *(llvm **)v59, v767, (uint64_t)v62, (void *)v63, v75);
              uint64_t v37 = (uint64_t)sub_1CD7F5D38(v70, (const char *)0x8D, (const llvm::APInt *)&v3551, v66, v767, v72, v73, v770, (uint64_t)v768, v769, (uint64_t)v65, v64, SHIDWORD(v64), v67);
              goto LABEL_20;
            }
          }
          uint64_t v3488 = *(void *)(v59 + 8);
          int v496 = *((unsigned __int16 *)v65 + 12);
          if (v496 == 36 || v496 == 12) {
            uint64_t v498 = v65;
          }
          else {
            uint64_t v498 = 0;
          }
          int v499 = *(void **)(a3 + 16);
          if (*(_WORD *)(*v499 + 1020)) {
            goto LABEL_1124;
          }
          if ((v67 & 0x40) == 0 && v498)
          {
            uint64_t v500 = v498[10];
            uint64_t v501 = *(_UNKNOWN **)(v500 + 32) == &unk_1CFB2E344 ? *(void *)(v500 + 40) : v500 + 24;
            if ((*(unsigned char *)(v501 + 28) & 7) == 3)
            {
              uint64_t v3476 = v499[2];
              llvm::DiagnosticLocation::DiagnosticLocation(v3569, (const llvm::DebugLoc *)&v3551);
              uint64_t v1649 = *(void *)(*(void *)(v3476 + 640) + 16);
              v1650 = *(uint64_t **)(v1649 + 56);
              LODWORD(v3555[1]) = 11;
              BYTE4(v3555[1]) = 2;
              long long v3557 = *(_OWORD *)v3569;
              v3556 = v1650;
              unint64_t v3558 = (unint64_t)"agx2-lower";
              v3559 = "SlowMathFAddWithZero";
              uint64_t v3560 = 20;
              LOBYTE(v3561) = 0;
              LOBYTE(v3562) = 0;
              v3563 = v3565;
              uint64_t v3564 = 0x400000000;
              char v3566 = 0;
              int v3567 = -1;
              uint64_t v3568 = v1649;
              v3555[0] = &unk_1F26165E0;
              char v3518 = 6;
              strcpy((char *)v3517, "String");
              v3519 = operator new(0x58uLL);
              long long v3520 = xmmword_1CD935ED0;
              strcpy((char *)v3519, "A floating point add with zero cannot be optimized away because fast-math is disabled.");
              uint64_t v3521 = 0;
              uint64_t v3522 = 0;
              sub_1CD3D6290((uint64_t)v3555, (long long *)v3517);
              if (SHIBYTE(v3520) < 0) {
                operator delete(v3519);
              }
              if (v3518 < 0) {
                operator delete(v3517[0]);
              }
              llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3555);
              v3555[0] = &unk_1F2616800;
              v1651 = (char *)v3563;
              if (v3564)
              {
                unint64_t v1652 = (unint64_t)v3564 << 6;
                v3448 = (char *)v3563;
                do
                {
                  v1653 = (void **)&v1651[v1652];
                  if (v1651[v1652 - 17] < 0)
                  {
                    v3461 = &v1651[v1652];
                    operator delete(*(v1653 - 5));
                    v1651 = v3448;
                    v1653 = (void **)v3461;
                  }
                  if (*((char *)v1653 - 41) < 0)
                  {
                    operator delete(*(v1653 - 8));
                    v1651 = v3448;
                  }
                  v1652 -= 64;
                }
                while (v1652);
                v1651 = (char *)v3563;
              }
              if (v1651 != v3565) {
                free(v1651);
              }
            }
          }
          if ((~v67 & 0x7C0) != 0)
          {
            int v1009 = 0;
          }
          else
          {
LABEL_1124:
            int v996 = *((unsigned __int16 *)v62 + 12);
            if (v996 == 36 || v996 == 12)
            {
              int v997 = *(unsigned __int16 *)(v61 + 24);
              if (v997 == 215 || v997 == 212)
              {
                uint64_t v998 = **(void **)(v61 + 32);
                if (*(_WORD *)(v998 + 24) == 98)
                {
                  uint64_t v999 = *(void *)(v998 + 32);
                  unsigned int v1000 = *(uint64_t **)(v999 + 40);
                  int v1001 = *((unsigned __int16 *)v1000 + 12);
                  if (v1001 == 36 || v1001 == 12)
                  {
                    unint64_t v1003 = *(void *)(v999 + 48);
                    v1004 = *(uint64_t **)v999;
                    unint64_t v1005 = *(void *)(v999 + 8);
                    int v1006 = *(llvm::APFloatBase **)(a3 + 16);
                    if (*(unsigned char *)(v62[5] + 16 * v63) != 10)
                    {
                      uint64_t v1007 = *((void *)v1006 + 104);
                      if (v1007) {
                        __int16 v1008 = *(_WORD *)(v1007 + 8);
                      }
                      else {
                        __int16 v1008 = 0;
                      }
                      uint64_t v62 = sub_1CD7F3564(v1006, (const char *)0xD7, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v62, (void *)v63, v1008);
                      unint64_t v63 = v63 & 0xFFFFFFFF00000000 | v1500;
                      int v1006 = *(llvm::APFloatBase **)(a3 + 16);
                    }
                    if (*(unsigned char *)(v1000[5] + 16 * v1003) != 10)
                    {
                      uint64_t v1501 = *((void *)v1006 + 104);
                      if (v1501) {
                        __int16 v1502 = *(_WORD *)(v1501 + 8);
                      }
                      else {
                        __int16 v1502 = 0;
                      }
                      unsigned int v1000 = sub_1CD7F3564(v1006, (const char *)0xD7, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v1000, (void *)v1003, v1502);
                      unint64_t v1003 = v1003 & 0xFFFFFFFF00000000 | v1503;
                      int v1006 = *(llvm::APFloatBase **)(a3 + 16);
                    }
                    uint64_t v3475 = v1003;
                    if (*(unsigned char *)(v1004[5] + 16 * v1005) != 10)
                    {
                      uint64_t v1504 = *((void *)v1006 + 104);
                      if (v1504) {
                        __int16 v1505 = *(_WORD *)(v1504 + 8);
                      }
                      else {
                        __int16 v1505 = 0;
                      }
                      v1004 = sub_1CD7F3564(v1006, (const char *)0xD7, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v1004, (void *)v1005, v1505);
                      unint64_t v1005 = v1005 & 0xFFFFFFFF00000000 | v1506;
                      int v1006 = *(llvm::APFloatBase **)(a3 + 16);
                    }
                    uint64_t v1507 = v1005;
                    uint64_t v1508 = (uint64_t)v1004;
                    if (*(unsigned char *)(v65[5] + 16 * v64) == 10)
                    {
                      uint64_t v1509 = (uint64_t)v1000;
                      uint64_t v1510 = a3;
                    }
                    else
                    {
                      uint64_t v1511 = *((void *)v1006 + 104);
                      uint64_t v1509 = (uint64_t)v1000;
                      if (v1511) {
                        __int16 v1512 = *(_WORD *)(v1511 + 8);
                      }
                      else {
                        __int16 v1512 = 0;
                      }
                      uint64_t v65 = sub_1CD7F3564(v1006, (const char *)0xD7, (uint64_t)&v3551, (llvm *)0xA, 0, (uint64_t)v65, (void *)v64, v1512);
                      unint64_t v64 = v64 & 0xFFFFFFFF00000000 | v1513;
                      uint64_t v1510 = a3;
                      int v1006 = *(llvm::APFloatBase **)(a3 + 16);
                    }
                    v1514 = sub_1CCFDED5C((uint64_t)v1006, 98, (const llvm::APInt *)&v3551, (llvm *)0xA, 0, (uint64_t)v62, v63, a8, v1509, v3475, v67);
                    v1517 = sub_1CD7F5D38(*(void **)(v1510 + 16), (const char *)0x8D, (const llvm::APInt *)&v3551, (llvm *)0xA, 0, v1508, v1507, v1516, (uint64_t)v1514, v1515, (uint64_t)v65, v64, SHIDWORD(v64), v67);
                    *(void *)&long long v3553 = v1517;
                    *((void *)&v3553 + 1) = v1518;
                    if (v66 == 9)
                    {
                      uint64_t v1519 = (uint64_t)v1517;
                      uint64_t v1520 = v1518;
                      uint64_t v1521 = *(void *)(a3 + 16);
                      v1522 = sub_1CD7EBF14(v1521, 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                      uint64_t v1525 = *(void *)(v1521 + 832);
                      if (v1525) {
                        LOWORD(v1525) = *(_WORD *)(v1525 + 8);
                      }
                      v1526 = sub_1CCFDED5C(v1521, 212, (const llvm::APInt *)&v3551, v66, v3488, v1519, v1520, v1524, (uint64_t)v1522, v1523, v1525);
                      goto LABEL_2967;
                    }
                    goto LABEL_2038;
                  }
                }
              }
            }
            int v1009 = 1;
          }
          if (*(int *)(a3 + 8) < 2) {
            goto LABEL_2037;
          }
          if (*(_WORD *)(v61 + 24) == 222)
          {
            if ((v1009 & sub_1CD406BEC(a2)) != 1) {
              goto LABEL_2037;
            }
            uint64_t v1486 = *(void *)(v61 + 32);
            uint64_t v61 = *(void *)v1486;
            LODWORD(v60) = *(_DWORD *)(v1486 + 8);
          }
          else
          {
            int v1010 = *((unsigned __int16 *)v62 + 12);
            if (v1010 == 222)
            {
              if ((v1009 & sub_1CD406BEC(a2)) != 1) {
                goto LABEL_2037;
              }
              uint64_t v1487 = v62[4];
              uint64_t v62 = *(uint64_t **)v1487;
              LODWORD(v63) = *(_DWORD *)(v1487 + 8);
            }
            else
            {
              if (*((_WORD *)v65 + 12) != 222 && v1010 != 36 && v1010 != 12
                || (v1009 & sub_1CD406BEC(a2) & 1) == 0)
              {
                goto LABEL_2037;
              }
              int v1011 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1012 = *((void *)v1011 + 104);
              if (v1012) {
                __int16 v1013 = *(_WORD *)(v1012 + 8);
              }
              else {
                __int16 v1013 = 0;
              }
              uint64_t v62 = sub_1CD7F3564(v1011, (const char *)0xDE, (uint64_t)&v3551, v66, v3488, (uint64_t)v62, (void *)v63, v1013);
              LODWORD(v63) = v2474;
            }
          }
          if (*((_WORD *)v65 + 12) == 222)
          {
            uint64_t v2475 = v65[4];
            v2476 = *(uint64_t **)v2475;
            int v2477 = *(_DWORD *)(v2475 + 8);
          }
          else
          {
            v2478 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2479 = *((void *)v2478 + 104);
            if (v2479) {
              __int16 v2480 = *(_WORD *)(v2479 + 8);
            }
            else {
              __int16 v2480 = 0;
            }
            v2476 = sub_1CD7F3564(v2478, (const char *)0xDE, (uint64_t)&v3551, v66, v3488, (uint64_t)v65, (void *)v64, v2480);
            int v2477 = v2521;
          }
          uint64_t v2522 = *(void *)(a3 + 16);
          uint64_t v2523 = *(void *)(a2 + 40);
          uint64_t v2524 = *(unsigned __int16 *)(a2 + 58);
          v3555[0] = (void *)v61;
          LODWORD(v3555[1]) = v60;
          v3556 = v62;
          LODWORD(v3557) = v63;
          *((void *)&v3557 + 1) = v2476;
          LODWORD(v3558) = v2477;
          uint64_t v31 = (uint64_t)sub_1CD801794(v2522, 0x8Du, v2523, v2524, (uint64_t *)v3555, 3, v67);
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          if (!v31 || v31 == a2)
          {
            uint64_t v2955 = *(void *)(a2 + 40);
            uint64_t v2956 = *(unsigned __int16 *)(a2 + 58);
            v3555[0] = v62;
            LODWORD(v3555[1]) = v63;
            v3556 = (uint64_t *)v61;
            LODWORD(v3557) = v60;
            *((void *)&v3557 + 1) = v2476;
            LODWORD(v3558) = v2477;
            v2957 = sub_1CD801794((uint64_t)v32, 0x8Du, v2955, v2956, (uint64_t *)v3555, 3, v67);
            if (!v2957) {
              goto LABEL_2037;
            }
            uint64_t v31 = (uint64_t)v2957;
            if (v2957 == (unsigned __int8 **)a2) {
              goto LABEL_2037;
            }
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          }
          uint64_t v2525 = *((void *)v32 + 104);
          if (v2525) {
            __int16 v35 = *(_WORD *)(v2525 + 8);
          }
          else {
            __int16 v35 = 0;
          }
          uint64_t v563 = 222;
          uint64_t v564 = (uint64_t)v66;
          uint64_t v565 = (void *)v3488;
          goto LABEL_2750;
        case 0x92:
          if (!*(_DWORD *)(a3 + 8)) {
            goto LABEL_2037;
          }
          *(_OWORD *)v3555 = *(_OWORD *)*(void *)(a2 + 40);
          if (LOBYTE(v3555[0]) == 49)
          {
            uint64_t v168 = 6;
          }
          else
          {
            if (LOBYTE(v3555[0]) != 38) {
              goto LABEL_2037;
            }
            uint64_t v168 = 5;
          }
          uint64_t v671 = *(void *)(*(void *)(a2 + 32) + 40);
          int v672 = *(unsigned __int16 *)(v671 + 24);
          if (v672 != 35 && v672 != 11) {
            goto LABEL_2037;
          }
          uint64_t v674 = *(void *)(v671 + 80);
          uint64_t v675 = *(unsigned int *)(v674 + 32);
          if (v675 > 0x40)
          {
            int v754 = 0;
            int64_t v755 = (unint64_t)(v675 + 63) >> 6;
            do
            {
              BOOL v224 = v755-- < 1;
              if (v224) {
                break;
              }
              unint64_t v756 = *(void *)(*(void *)(v674 + 24) + 8 * v755);
              v754 += __clz(v756);
            }
            while (!v756);
            int v757 = v675 | 0xFFFFFFC0;
            if ((v675 & 0x3F) == 0) {
              int v757 = 0;
            }
            if (v754 + v757 != v675) {
              goto LABEL_2037;
            }
          }
          else if (*(void *)(v674 + 24))
          {
            goto LABEL_2037;
          }
          unsigned int v758 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v760 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v3555, (uint64_t)v10, a3);
          int v761 = *(uint64_t **)(a2 + 32);
          uint64_t v762 = *v761;
          uint64_t v763 = (void *)v761[1];
          uint64_t v764 = *((void *)v758 + 104);
          if (v764) {
            __int16 v765 = *(_WORD *)(v764 + 8);
          }
          else {
            __int16 v765 = 0;
          }
          v1795 = sub_1CD7F3564(v758, (const char *)0xC9, (uint64_t)&v3551, v760, v759, v762, v763, v765);
          v1796 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v1797 = *((void *)v1796 + 104);
          if (v1797) {
            __int16 v1798 = *(_WORD *)(v1797 + 8);
          }
          else {
            __int16 v1798 = 0;
          }
          uint64_t v31 = (uint64_t)sub_1CD7F3564(v1796, (const char *)0xC7, (uint64_t)&v3551, (llvm *)v168, 0, (uint64_t)v1795, v1794, v1798);
          uint64_t v33 = v1799;
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v564 = (uint64_t)v3555[0];
          uint64_t v565 = v3555[1];
          goto LABEL_2324;
        case 0x93:
          uint64_t v169 = *(uint64_t **)(a2 + 32);
          uint64_t v170 = *v169;
          if (*(_WORD *)(*v169 + 24) != 146) {
            goto LABEL_2037;
          }
          uint64_t v171 = v169[10];
          int v172 = *(unsigned __int16 *)(v171 + 24);
          if (v172 != 35 && v172 != 11) {
            goto LABEL_2037;
          }
          *(_OWORD *)v3569 = *(_OWORD *)(v169 + 5);
          uint64_t v174 = *(void *)(v171 + 80);
          uint64_t v175 = (unsigned int *)(v174 + 24);
          if (*(_DWORD *)(v174 + 32) >= 0x41u) {
            uint64_t v175 = *(unsigned int **)v175;
          }
          uint64_t v176 = *v175;
          v3555[0] = &v3556;
          v3555[1] = (void *)0x400000000;
          if (*(_WORD *)(v170 + 56))
          {
            uint64_t v1207 = 0;
            unsigned int v1208 = 0;
            uint64_t v1209 = 40 * *(unsigned __int16 *)(v170 + 56);
            do
            {
              if (v1208 >= HIDWORD(v3555[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_OWORD *)v3555[0] + v1208) = *(_OWORD *)(*(void *)(v170 + 32) + v1207);
              unsigned int v1208 = ++LODWORD(v3555[1]);
              v1207 += 40;
            }
            while (v1209 != v1207);
            BOOL v177 = (uint64_t **)v3555[0];
          }
          else
          {
            BOOL v177 = &v3556;
          }
          v1210 = &v177[2 * v176];
          *v1210 = (uint64_t *)v3569[0];
          *((_DWORD *)v1210 + 2) = v3569[1];
          v1211 = *(void **)(a3 + 16);
          v1212 = *(unsigned __int8 **)(a2 + 64);
          *(void *)&v3584[0] = v1212;
          if (v1212) {
            llvm::MetadataTracking::track((uint64_t)v3584, v1212, 2);
          }
          DWORD2(v3584[0]) = *(_DWORD *)(a2 + 60);
          uint64_t v1213 = *(void *)(a2 + 40);
          v1214 = *(llvm **)v1213;
          v1215 = *(void **)(v1213 + 8);
          v1216 = (uint64_t *)v3555[0];
          uint64_t v1217 = LODWORD(v3555[1]);
          uint64_t v1218 = v1211[104];
          if (v1218) {
            uint64_t v1219 = *(unsigned __int16 *)(v1218 + 8);
          }
          else {
            uint64_t v1219 = 0;
          }
          v1220 = v1211;
LABEL_1408:
          *(void *)&long long v3553 = sub_1CD7FF4E8(v1220, (const char *)0x92, (const llvm::APInt *)v3584, v1214, (uint64_t)v1215, v1216, v1217, v1219);
          *((void *)&v3553 + 1) = v1221;
          v1222 = *(void **)&v3584[0];
          if (!*(void *)&v3584[0]) {
            goto LABEL_3533;
          }
          int v1223 = **(unsigned char **)&v3584[0];
          if ((v1223 - 4) > 0x1E)
          {
            if ((v1223 - 3) >= 0xFFFFFFFE) {
              uint64_t v1580 = *(void *)&v3584[0];
            }
            else {
              uint64_t v1580 = 0;
            }
            if ((v1223 - 3) < 0xFFFFFFFE) {
              goto LABEL_3531;
            }
            unint64_t v1225 = v1580 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v3584[0] + 12)) {
              goto LABEL_3533;
            }
            uint64_t v1224 = *(void *)(*(void *)&v3584[0] + 16);
            if ((v1224 & 4) == 0) {
              goto LABEL_3533;
            }
            unint64_t v1225 = v1224 & 0xFFFFFFFFFFFFFFF8;
            if (!v1225) {
              goto LABEL_3533;
            }
          }
          *(void *)&long long v3554 = v3584;
          uint64_t v1581 = v1225 + 16;
          v1582 = &v3554;
          goto LABEL_1796;
        case 0x94:
          uint64_t v178 = *(uint64_t **)(a2 + 32);
          uint64_t v179 = v178[5];
          int v180 = *(unsigned __int16 *)(v179 + 24);
          if (v180 != 35 && v180 != 11) {
            goto LABEL_2037;
          }
          uint64_t v182 = *(void *)(v179 + 80);
          int v183 = (void *)(v182 + 24);
          if (*(_DWORD *)(v182 + 32) >= 0x41u) {
            int v183 = (void *)*v183;
          }
          uint64_t v184 = (void *)*v183;
          int v185 = *(uint64_t **)(a2 + 40);
          uint64_t v186 = *v185;
          unsigned int v187 = (void *)v185[1];
          v3555[0] = (void *)*v185;
          v3555[1] = v187;
          uint64_t v188 = *v178;
          uint64_t v189 = *((unsigned int *)v178 + 2);
          if (*(_WORD *)(*v178 + 24) != 216) {
            goto LABEL_1982;
          }
          uint64_t v190 = *(unsigned int **)(v188 + 32);
          uint64_t v191 = *(void *)v190;
          uint64_t v192 = v190[2];
          int v193 = *(unsigned __int16 *)(*(void *)v190 + 24);
          if ((v193 - 198) <= 2
            && (uint64_t v194 = *(void **)(v191 + 32),
                uint64_t v195 = *v194,
                uint64_t v196 = v194[1],
                uint64_t v197 = (unsigned __int8 *)(*(void *)(*v194 + 40) + 16 * v196),
                int v198 = *v197,
                v198 == v186)
            && ((__int16 v199 = (void *)*((void *)v197 + 1), !v198) ? (v200 = v199 == v187) : (v200 = 1), v200))
          {
            if (!v184)
            {
              *(void *)&long long v3553 = v195;
              *((void *)&v3553 + 1) = v196;
              goto LABEL_2038;
            }
            if (v193 != 146)
            {
              if (v193 == 200)
              {
                uint64_t v1749 = *(void *)(a3 + 16);
                uint64_t v1750 = v186;
                uint64_t v1751 = (uint64_t)v187;
                goto LABEL_2641;
              }
              if (v193 == 199) {
                goto LABEL_796;
              }
              goto LABEL_701;
            }
          }
          else if (v193 != 146)
          {
LABEL_701:
            if (v193 != 4 || v184 != 1)
            {
              if (v193 == 35 || v193 == 11)
              {
                uint64_t v652 = *(void *)(v188 + 40) + 16 * v189;
                uint64_t v654 = *(void **)v652;
                uint64_t v653 = *(llvm::EVT ***)(v652 + 8);
                v3569[0] = v654;
                v3569[1] = v653;
                char v655 = (_BYTE)v654 ? sub_1CB8C2FBC((unsigned __int8 *)v3569) : llvm::EVT::getEVT(v653[3], 0, a3);
                if (v655 != 3)
                {
                  v1112 = (uint64_t *)(*(void *)(v188 + 40) + 16 * v189);
                  uint64_t v1114 = *v1112;
                  uint64_t v1113 = v1112[1];
                  *(void *)&v3584[0] = v1114;
                  *((void *)&v3584[0] + 1) = v1113;
                  if ((_BYTE)v1114)
                  {
                    char EVT = sub_1CB8C2FBC((unsigned __int8 *)v3584);
                    uint64_t v1116 = 0;
                  }
                  else
                  {
                    char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v1113 + 24), 0, a3);
                  }
                  if (EVT)
                  {
                    if ((EVT - 8) < 7u
                      || (EVT - 75) < 0x2Du
                      || (EVT + 104) < 0x13u)
                    {
                      goto LABEL_1982;
                    }
                    goto LABEL_1930;
                  }
                  if ((*(_DWORD *)(v1116 + 8) & 0xFE) == 0x12) {
                    unsigned int v1243 = *(unsigned __int8 *)(**(void **)(v1116 + 16) + 8);
                  }
                  else {
                    unsigned int v1243 = *(_DWORD *)(v1116 + 8);
                  }
                  if (v1243 >= 7)
                  {
LABEL_1930:
                    v1687 = (uint64_t *)(*(void *)(v188 + 40) + 16 * v189);
                    uint64_t v1689 = *v1687;
                    uint64_t v1688 = v1687[1];
                    *(void *)&v3584[0] = v1689;
                    *((void *)&v3584[0] + 1) = v1688;
                    if ((_BYTE)v1689)
                    {
                      LOBYTE(v1690) = sub_1CB8C2FBC((unsigned __int8 *)v3584);
                      unint64_t v1691 = 0;
                      v1692 = 0;
                    }
                    else
                    {
                      unint64_t v1690 = llvm::EVT::getEVT(*(llvm::EVT **)(v1688 + 24), 0, a3);
                      unint64_t v1691 = v1690 & 0xFFFFFFFFFFFFFF00;
                    }
                    v3569[0] = (void *)(v1691 | v1690);
                    v3569[1] = v1692;
                    uint64_t v1741 = *(void *)(**(void **)(v188 + 32) + 80);
                    v1742 = (unint64_t *)(v1741 + 24);
                    if (*(_DWORD *)(v1741 + 32) >= 0x41u) {
                      v1742 = (unint64_t *)*v1742;
                    }
                    unint64_t v1743 = *v1742;
                    if ((_BYTE)v1690) {
                      unsigned __int8 v1744 = sub_1CB87E200((unsigned __int8 *)v3569);
                    }
                    else {
                      unsigned __int8 v1744 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3569);
                    }
                    unsigned __int8 v1746 = v1744;
                    if (v1745 == 1) {
                    uint64_t v1747 = ~(-1 << v1746);
                    }
                    if (v184)
                    {
                      if (v184 != 1) {
                        goto LABEL_1982;
                      }
                      if (LOBYTE(v3569[0])) {
                        unsigned __int8 v2526 = sub_1CB87E200((unsigned __int8 *)v3569);
                      }
                      else {
                        unsigned __int8 v2526 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3569);
                      }
                      unsigned __int8 v2893 = v2526;
                      if (v2527 == 1) {
                      uint64_t v481 = (v1743 >> v2893) & v1747;
                      }
                    }
                    else
                    {
                      uint64_t v481 = v1743 & v1747;
                    }
                    uint64_t v479 = *(void *)(a3 + 16);
                    uint64_t v186 = (uint64_t)v3555[0];
                    unsigned int v187 = v3555[1];
LABEL_477:
                    uint64_t v37 = (uint64_t)sub_1CD7EBF14(v479, v481, (const llvm::APInt *)&v3551, (llvm *)v186, (uint64_t)v187, 0, 0);
                    goto LABEL_20;
                  }
                }
              }
LABEL_1982:
              if (LOBYTE(v3555[0]) == 5)
              {
                int v1748 = *(unsigned __int16 *)(v188 + 24);
                if (*(unsigned char *)(*(void *)(v188 + 40) + 16 * v189) == 6)
                {
                  if (v1748 != 146)
                  {
                    if (v1748 == 35 || v1748 == 11)
                    {
                      uint64_t v1785 = *(void *)(**(void **)(a2 + 32) + 80);
                      v1786 = (unint64_t *)(v1785 + 24);
                      if (*(_DWORD *)(v1785 + 32) >= 0x41u) {
                        v1786 = (unint64_t *)*v1786;
                      }
                      unint64_t v480 = *v1786;
                      if (v184)
                      {
                        uint64_t v479 = *(void *)(a3 + 16);
                        uint64_t v481 = HIDWORD(v480);
                      }
                      else
                      {
                        uint64_t v479 = *(void *)(a3 + 16);
LABEL_474:
                        uint64_t v481 = v480;
                      }
                    }
                    else
                    {
                      if (((v1748 & 0xFFFE) == 0xC6 || v1748 == 200) && !v184)
                      {
                        v1761 = *(unsigned int **)(v188 + 32);
                        if (*(unsigned char *)(*(void *)(*(void *)v1761 + 40) + 16 * v1761[2]) == 5)
                        {
                          long long v312 = *(_OWORD *)v1761;
                          goto LABEL_2009;
                        }
                        goto LABEL_2010;
                      }
                      if (v1748 != 199 || !v184)
                      {
                        if (v1748 == 200 && v184)
                        {
                          uint64_t v1749 = *(void *)(a3 + 16);
                          uint64_t v1750 = 5;
                          uint64_t v1751 = 0;
LABEL_2641:
                          uint64_t v37 = (uint64_t)sub_1CD3DD4D8(v1749, (llvm *)v1750, v1751);
                          goto LABEL_20;
                        }
LABEL_2010:
                        v1762 = *(_DWORD **)(a2 + 32);
                        uint64_t v1763 = *(void *)v1762;
                        if (*(_WORD *)(*(void *)v1762 + 24) != 395) {
                          goto LABEL_2037;
                        }
                        int v1764 = *(unsigned __int16 *)(**(void **)(v1763 + 32) + 24);
                        if (v1764 != 35 && v1764 != 11) {
                          goto LABEL_2037;
                        }
                        uint64_t v1766 = *(void *)(v1763 + 48);
                        if (!v1766) {
                          goto LABEL_2023;
                        }
                        int v1767 = v1762[2];
                        int v1768 = 1;
                        do
                        {
                          if (*(_DWORD *)(v1766 + 8) == v1767)
                          {
                            if (!v1768) {
                              goto LABEL_2023;
                            }
                            --v1768;
                          }
                          uint64_t v1766 = *(void *)(v1766 + 32);
                        }
                        while (v1766);
                        if (v1768)
                        {
LABEL_2023:
                          if (LOBYTE(v3555[0])) {
                            uint64_t v1769 = sub_1CB87E200((unsigned __int8 *)v3555);
                          }
                          else {
                            uint64_t v1769 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3555);
                          }
                          unint64_t v1771 = v1769;
                          if (v1770 == 1) {
                          if (v1771 <= 0x1F)
                          }
                          {
                            v1772 = (unsigned char *)a1[23037];
                            BOOL v1773 = v1772[319] && v1772[338] == 0;
                            if (!v1773 && !v1772[326]) {
                              goto LABEL_2037;
                            }
                          }
                        }
                        v1774 = *(unsigned int **)(a2 + 32);
                        uint64_t v1775 = *(void *)(**(void **)(*(void *)v1774 + 32) + 80);
                        v1776 = (void *)(v1775 + 24);
                        if (*(_DWORD *)(v1775 + 32) >= 0x41u) {
                          v1776 = (void *)*v1776;
                        }
                        v1777 = (void *)*v1776;
                        uint64_t v1778 = *(void *)(*(void *)v1774 + 40) + 16 * v1774[2];
                        v1780 = *(void **)v1778;
                        v1779 = *(llvm::EVT ***)(v1778 + 8);
                        v3569[0] = v1780;
                        v3569[1] = v1779;
                        if (v1780 - 27 < 2) {
                          goto LABEL_2037;
                        }
                        if ((_BYTE)v1780)
                        {
                          LOBYTE(v1840) = sub_1CB8C2FBC((unsigned __int8 *)v3569);
                          unint64_t v1842 = 0;
                          uint64_t v1841 = 0;
                        }
                        else
                        {
                          unint64_t v1840 = llvm::EVT::getEVT(v1779[3], 0, a3);
                          unint64_t v1842 = v1840 & 0xFFFFFFFFFFFFFF00;
                        }
                        *(void *)&v3584[0] = v1842 | v1840;
                        *((void *)&v3584[0] + 1) = v1841;
                        int v2108 = sub_1CB896FB8((unsigned __int8 *)v3584) * v184;
                        if (v2107 == 1) {
                        v2109 = *(llvm::APFloatBase **)(a3 + 16);
                        }
                        v2110 = *(unsigned __int8 **)(a2 + 64);
                        *(void *)&v3584[0] = v2110;
                        uint64_t v2111 = (uint64_t)v2109;
                        if (v2110)
                        {
                          llvm::MetadataTracking::track((uint64_t)v3584, v2110, 2);
                          uint64_t v2111 = *(void *)(a3 + 16);
                        }
                        DWORD2(v3584[0]) = *(_DWORD *)(a2 + 60);
                        v2112 = (llvm *)v3555[0];
                        v2113 = v3555[1];
                        v2115 = sub_1CD7EBF14(v2111, (v2108 + v1777), (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
                        uint64_t v2116 = *((void *)v2109 + 104);
                        if (v2116) {
                          __int16 v2117 = *(_WORD *)(v2116 + 8);
                        }
                        else {
                          __int16 v2117 = 0;
                        }
                        *(void *)&long long v3553 = sub_1CD7F3564(v2109, (const char *)0x18B, (uint64_t)v3584, v2112, (uint64_t)v2113, (uint64_t)v2115, v2114, v2117);
                        *((void *)&v3553 + 1) = v2173;
                        unint64_t v861 = *(void **)&v3584[0];
                        if (*(void *)&v3584[0])
                        {
                          int v862 = **(unsigned char **)&v3584[0];
                          if ((v862 - 4) > 0x1E)
                          {
                            if ((v862 - 3) >= 0xFFFFFFFE) {
                              uint64_t v2535 = *(void *)&v3584[0];
                            }
                            else {
                              uint64_t v2535 = 0;
                            }
                            if ((v862 - 3) < 0xFFFFFFFE) {
                              goto LABEL_3016;
                            }
                            unint64_t v2175 = v2535 + 8;
                          }
                          else
                          {
                            if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) != 2
                              && !*(_DWORD *)(*(void *)&v3584[0] + 12))
                            {
                              goto LABEL_2038;
                            }
                            uint64_t v2174 = *(void *)(*(void *)&v3584[0] + 16);
                            if ((v2174 & 4) == 0) {
                              goto LABEL_2038;
                            }
                            unint64_t v2175 = v2174 & 0xFFFFFFFFFFFFFFF8;
                            if (!v2175) {
                              goto LABEL_2038;
                            }
                          }
                          *(void *)&long long v3554 = v3584;
                          uint64_t v866 = v2175 + 16;
                          unint64_t v867 = (void **)&v3554;
                          goto LABEL_997;
                        }
                        goto LABEL_2038;
                      }
                      uint64_t v479 = *(void *)(a3 + 16);
                      uint64_t v481 = 0;
                    }
                    uint64_t v186 = 5;
                    goto LABEL_476;
                  }
LABEL_1997:
                  uint64_t v1752 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
                  v1753 = (unsigned int *)(v1752 + 24);
                  if (*(_DWORD *)(v1752 + 32) >= 0x41u) {
                    v1753 = *(unsigned int **)v1753;
                  }
                  v1754 = (uint64_t *)(*(void *)(v188 + 32) + 40 * *v1753);
                  uint64_t v1755 = *v1754;
                  uint64_t v1756 = v1754[1];
                  v1757 = (unsigned __int8 *)(*(void *)(*v1754 + 40) + 16 * v1756);
                  int v1758 = *v1757;
                  if (v1758 != LOBYTE(v3555[0])
                    || ((v1759 = (void *)*((void *)v1757 + 1), !v1758) ? (BOOL v1760 = v1759 == v3555[1]) : (BOOL v1760 = 1),
                        !v1760))
                  {
                    uint64_t v37 = sub_1CD7EB67C(*(void *)(a3 + 16), v1755, v1756, (uint64_t)&v3551, (uint64_t)v3555[0], (uint64_t)v3555[1]);
                    goto LABEL_20;
                  }
                  *(void *)&long long v3553 = v1755;
                  *((void *)&v3553 + 1) = v1756;
                  goto LABEL_2038;
                }
              }
              else
              {
                int v1748 = *(unsigned __int16 *)(v188 + 24);
              }
              if (v1748 != 146) {
                goto LABEL_2010;
              }
              goto LABEL_1997;
            }
            uint64_t v708 = *(void *)(*(void *)(v191 + 32) + 40);
            int v709 = *(unsigned __int8 *)(v708 + 80);
            uint64_t v186 = (uint64_t)v3555[0];
            if (v709 != LOBYTE(v3555[0])) {
              goto LABEL_1982;
            }
            unsigned int v187 = v3555[1];
            uint64_t v710 = *(void **)(v708 + 88);
            if (!v709 && v710 != v3555[1]) {
              goto LABEL_1982;
            }
LABEL_796:
            uint64_t v479 = *(void *)(a3 + 16);
LABEL_797:
            uint64_t v481 = 0;
            goto LABEL_477;
          }
          *(_OWORD *)v3569 = *(_OWORD *)(*(void *)(v191 + 40) + 16 * v192);
          v3584[0] = *(_OWORD *)(*(void *)(v188 + 40) + 16 * v189);
          int v1475 = sub_1CD3DB440((llvm::EVT *)v3584, (const char *)v10);
          if (v1475 == sub_1CD3DB440((llvm::EVT *)v3569, v1476))
          {
            if (LOBYTE(v3569[0]))
            {
              LOBYTE(v1477) = sub_1CB8C2FBC((unsigned __int8 *)v3569);
              unint64_t v1478 = 0;
              uint64_t v1479 = 0;
            }
            else
            {
              unint64_t v1477 = llvm::EVT::getEVT(*((llvm::EVT **)v3569[1] + 3), 0, a3);
              unint64_t v1478 = v1477 & 0xFFFFFFFFFFFFFF00;
            }
            *(void *)&long long v3554 = v1478 | v1477;
            *((void *)&v3554 + 1) = v1479;
            v2021 = (_BYTE)v1477
                  ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v3554)
                  : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
            v2023 = v2021;
            int v2024 = v2022;
            v2025 = LOBYTE(v3555[0])
                  ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)v3555)
                  : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3555);
            if (v2023 == v2025 && v2024 == v2026)
            {
              uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v564 = (uint64_t)v3555[0];
              uint64_t v565 = v3555[1];
              v2027 = (uint64_t *)(*(void *)(v191 + 32) + 40 * v184);
              uint64_t v31 = *v2027;
              uint64_t v33 = (void *)v2027[1];
LABEL_2324:
              uint64_t v2028 = *((void *)v32 + 104);
              if (v2028) {
                __int16 v35 = *(_WORD *)(v2028 + 8);
              }
              else {
                __int16 v35 = 0;
              }
              uint64_t v563 = 216;
              goto LABEL_2058;
            }
          }
          int v193 = *(unsigned __int16 *)(v191 + 24);
          goto LABEL_701;
        default:
          goto LABEL_2037;
      }
    }
    if (v12 != 96)
    {
      if (v12 != 98)
      {
        if (v12 != 99) {
          goto LABEL_2037;
        }
        uint64_t v99 = *(void *)(a2 + 40);
        uint64_t v101 = *(llvm **)v99;
        uint64_t v100 = *(void *)(v99 + 8);
        __int16 v102 = *(_WORD *)(a2 + 72);
        uint64_t v103 = **(void **)(a2 + 32);
        int v104 = *(unsigned __int16 *)(v103 + 24);
        BOOL v105 = v104 == 36 || v104 == 12;
        if (v105 && sub_1CB8BE1E4(*(void *)(v103 + 80) + 24, 1.0))
        {
          uint64_t v210 = sub_1CD7EBF14(*(void *)(a3 + 16), 253, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
          uint64_t v211 = v1110;
          uint64_t v208 = *(void *)(a3 + 16);
          uint64_t v1111 = *(void *)(a2 + 32);
          uint64_t v3403 = *(void *)(v1111 + 48);
          __int16 v3405 = v102;
          uint64_t v3402 = *(void *)(v1111 + 40);
          uint64_t v215 = 46;
          goto LABEL_1267;
        }
        unsigned int v106 = *(llvm::APFloatBase **)(a3 + 16);
        if (!(v102 & 0x80 | *(_WORD *)(*(void *)v106 + 1020) & 1)) {
          goto LABEL_2037;
        }
        uint64_t v107 = *(void *)(a2 + 32);
        uint64_t v108 = *(void *)(v107 + 40);
        int v109 = *(unsigned __int16 *)(v108 + 24);
        if (v109 == 215 || v109 == 212)
        {
          uint64_t v110 = *(void **)(v108 + 32);
          uint64_t v112 = *v110;
          unint64_t v111 = (unsigned int *)(v110 + 1);
          uint64_t v108 = v112;
          int v109 = *(unsigned __int16 *)(v112 + 24);
        }
        else
        {
          unint64_t v111 = (unsigned int *)(v107 + 48);
        }
        if (v109 != 224) {
          goto LABEL_2037;
        }
        uint64_t v701 = *(void *)(v108 + 40) + 16 * *v111;
        uint64_t v703 = *(llvm **)v701;
        uint64_t v702 = *(void *)(v701 + 8);
        unint64_t v705 = sub_1CD7F3564(v106, (const char *)0x1A2, (uint64_t)&v3551, *(llvm **)v701, v702, **(void **)(v108 + 32), *(void **)(*(void *)(v108 + 32) + 8), v102);
        unint64_t v706 = (unint64_t)v704;
        if (v703 == v101)
        {
          if ((_BYTE)v703) {
            BOOL v707 = 1;
          }
          else {
            BOOL v707 = v702 == v100;
          }
          if (v707) {
            goto LABEL_1266;
          }
        }
        else if (v703 == 9)
        {
          uint64_t v788 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v789 = *((void *)v788 + 104);
          if (v789) {
            __int16 v790 = *(_WORD *)(v789 + 8);
          }
          else {
            __int16 v790 = 0;
          }
          v1103 = sub_1CD7F3564(v788, (const char *)0xD7, (uint64_t)&v3551, v101, v100, (uint64_t)v705, v704, v790);
LABEL_1265:
          unint64_t v705 = v1103;
          unint64_t v706 = v706 & 0xFFFFFFFF00000000 | v1104;
LABEL_1266:
          uint64_t v208 = *(void *)(a3 + 16);
          uint64_t v1105 = *(void *)(a2 + 32);
          uint64_t v210 = *(uint64_t **)v1105;
          uint64_t v211 = *(void *)(v1105 + 8);
          uint64_t v3403 = v706;
          __int16 v3405 = v102;
          uint64_t v3402 = (uint64_t)v705;
          uint64_t v215 = 98;
LABEL_1267:
          uint64_t v216 = (uint64_t)v101;
          uint64_t v744 = v100;
          goto LABEL_1787;
        }
        uint64_t v1495 = *(void *)(a3 + 16);
        v1496 = sub_1CD7EBF14(v1495, 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
        uint64_t v1499 = *(void *)(v1495 + 832);
        if (v1499) {
          LOWORD(v1499) = *(_WORD *)(v1499 + 8);
        }
        v1103 = sub_1CCFDED5C(v1495, 212, (const llvm::APInt *)&v3551, v101, v100, (uint64_t)v705, v706, v1498, (uint64_t)v1496, v1497, v1499);
        goto LABEL_1265;
      }
      char v431 = *(uint64_t **)(a2 + 32);
      uint64_t v430 = *(void *)(a2 + 40);
      unint64_t v433 = *(llvm **)v430;
      uint64_t v432 = *(void *)(v430 + 8);
      uint64_t v434 = *v431;
      uint64_t v435 = v431[1];
      int v436 = (uint64_t *)v431[5];
      uint64_t v437 = (void *)v431[6];
      int v438 = *(void **)(a2 + 64);
      v3569[0] = v438;
      if (v438)
      {
        llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v438, 2);
        int v11 = *(_DWORD *)(a2 + 60);
      }
      LODWORD(v3569[1]) = v11;
      int v439 = *(unsigned __int16 *)(a2 + 72);
      int v440 = *((unsigned __int16 *)v436 + 12);
      if (*(_WORD *)(v434 + 24) == 222)
      {
        if (v440 == 36 || v440 == 12)
        {
          uint64_t v442 = *(void *)(a3 + 16);
          uint64_t v443 = *(uint64_t **)(v434 + 32);
          uint64_t v444 = *v443;
          uint64_t v445 = v443[1];
          uint64_t v446 = *(void *)(v442 + 832);
          if (v446) {
            __int16 v447 = *(_WORD *)(v446 + 8);
          }
          else {
            __int16 v447 = 0;
          }
          uint64_t v782 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)v3569, v433, v432, (uint64_t)v436, v437, v447);
          uint64_t v785 = sub_1CCFDED5C(v442, 98, (const llvm::APInt *)v3569, v433, v432, v444, v445, v784, (uint64_t)v782, v783, v439);
          goto LABEL_879;
        }
        uint64_t v697 = 0;
      }
      else if (v440 == 36 || v440 == 12)
      {
        uint64_t v697 = v436;
      }
      else
      {
        uint64_t v697 = 0;
      }
      v698 = *(void **)(a3 + 16);
      if ((*(_WORD *)(*v698 + 1020) & 1) == 0 && (~v439 & 0x50) != 0 && v697)
      {
        uint64_t v699 = v697[10];
        uint64_t v700 = *(_UNKNOWN **)(v699 + 32) == &unk_1CFB2E344 ? *(void *)(v699 + 40) : v699 + 24;
        if ((*(unsigned char *)(v700 + 28) & 7) == 3)
        {
          uint64_t v1681 = v698[2];
          llvm::DiagnosticLocation::DiagnosticLocation(v3584, (const llvm::DebugLoc *)v3569);
          uint64_t v1682 = *(void *)(*(void *)(v1681 + 640) + 16);
          v1683 = *(uint64_t **)(v1682 + 56);
          LODWORD(v3555[1]) = 11;
          BYTE4(v3555[1]) = 2;
          long long v3557 = v3584[0];
          v3556 = v1683;
          unint64_t v3558 = (unint64_t)"agx2-lower";
          v3559 = "SlowMathFMulWithZero";
          uint64_t v3560 = 20;
          LOBYTE(v3561) = 0;
          LOBYTE(v3562) = 0;
          v3563 = v3565;
          uint64_t v3564 = 0x400000000;
          char v3566 = 0;
          int v3567 = -1;
          uint64_t v3568 = v1682;
          v3555[0] = &unk_1F26165E0;
          char v3512 = 6;
          strcpy((char *)v3511, "String");
          v3513 = operator new(0x58uLL);
          long long v3514 = xmmword_1CD935ED0;
          strcpy((char *)v3513, "A floating point mul with zero cannot be optimized away because fast-math is disabled.");
          uint64_t v3515 = 0;
          uint64_t v3516 = 0;
          sub_1CD3D6290((uint64_t)v3555, (long long *)v3511);
          if (SHIBYTE(v3514) < 0) {
            operator delete(v3513);
          }
          if (v3512 < 0) {
            operator delete(v3511[0]);
          }
          llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3555);
          v3555[0] = &unk_1F2616800;
          v1684 = (char *)v3563;
          if (v3564)
          {
            unint64_t v1685 = (unint64_t)v3564 << 6;
            v3494 = (char *)v3563;
            do
            {
              v1686 = (void **)&v1684[v1685];
              if (v1684[v1685 - 17] < 0)
              {
                operator delete(*(v1686 - 5));
                v1684 = v3494;
              }
              if (*((char *)v1686 - 41) < 0)
              {
                operator delete(*(v1686 - 8));
                v1684 = v3494;
              }
              v1685 -= 64;
            }
            while (v1685);
            v1684 = (char *)v3563;
          }
          if (v1684 != v3565) {
            free(v1684);
          }
        }
      }
      if (*(int *)(a3 + 8) < 2)
      {
        int v787 = 2;
        goto LABEL_1184;
      }
      if (*(_WORD *)(v434 + 24) == 222)
      {
        if (!sub_1CD406BEC(a2)) {
          goto LABEL_1181;
        }
        uint64_t v1242 = *(void *)(v434 + 32);
        uint64_t v434 = *(void *)v1242;
        LODWORD(v435) = *(_DWORD *)(v1242 + 8);
      }
      else
      {
        int v1043 = *((unsigned __int16 *)v436 + 12);
        if (v1043 != 12 && v1043 != 222 && v1043 != 36 || (sub_1CD406BEC(a2) & 1) == 0) {
          goto LABEL_1181;
        }
        if (v1043 == 222)
        {
          uint64_t v1087 = v436[4];
          int v436 = *(uint64_t **)v1087;
          LODWORD(v437) = *(_DWORD *)(v1087 + 8);
        }
        else
        {
          v2340 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2341 = *((void *)v2340 + 104);
          if (v2341) {
            __int16 v2342 = *(_WORD *)(v2341 + 8);
          }
          else {
            __int16 v2342 = 0;
          }
          int v436 = sub_1CD7F3564(v2340, (const char *)0xDE, (uint64_t)v3569, v433, v432, (uint64_t)v436, v437, v2342);
          LODWORD(v437) = v2576;
        }
      }
      uint64_t v2577 = *(void *)(a3 + 16);
      uint64_t v2578 = *(void *)(a2 + 40);
      uint64_t v2579 = *(unsigned __int16 *)(a2 + 58);
      v3555[0] = (void *)v434;
      LODWORD(v3555[1]) = v435;
      v3556 = v436;
      LODWORD(v3557) = v437;
      v2580 = sub_1CD801794(v2577, 0x62u, v2578, v2579, (uint64_t *)v3555, 2, v439);
      v2581 = *(llvm::APFloatBase **)(a3 + 16);
      if (v2580 && v2580 != (unsigned __int8 **)a2)
      {
LABEL_2809:
        uint64_t v2582 = *((void *)v2581 + 104);
        if (v2582) {
          __int16 v2583 = *(_WORD *)(v2582 + 8);
        }
        else {
          __int16 v2583 = 0;
        }
        uint64_t v785 = sub_1CD7F3564(v2581, (const char *)0xDE, (uint64_t)v3569, v433, v432, (uint64_t)v2580, 0, v2583);
LABEL_879:
        *(void *)&long long v3553 = v785;
        *((void *)&v3553 + 1) = v786;
        int v787 = 1;
        goto LABEL_1184;
      }
      uint64_t v2958 = *(void *)(a2 + 40);
      uint64_t v2959 = *(unsigned __int16 *)(a2 + 58);
      v3555[0] = v436;
      LODWORD(v3555[1]) = v437;
      v3556 = (uint64_t *)v434;
      LODWORD(v3557) = v435;
      v2960 = sub_1CD801794((uint64_t)v2581, 0x62u, v2958, v2959, (uint64_t *)v3555, 2, v439);
      if (v2960)
      {
        v2580 = v2960;
        if (v2960 != (unsigned __int8 **)a2)
        {
          v2581 = *(llvm::APFloatBase **)(a3 + 16);
          goto LABEL_2809;
        }
      }
LABEL_1181:
      *(void *)&long long v3553 = 0;
      DWORD2(v3553) = 0;
      if (sub_1CB9D3204((uint64_t)&v3553, a2, a3)) {
        int v787 = 1;
      }
      else {
        int v787 = 2;
      }
LABEL_1184:
      if (!v3569[0]) {
        goto LABEL_1188;
      }
      int v1044 = *(unsigned __int8 *)v3569[0];
      if ((v1044 - 4) > 0x1E)
      {
        if ((v1044 - 3) >= 0xFFFFFFFE) {
          unsigned int v1045 = v3569[0];
        }
        else {
          unsigned int v1045 = 0;
        }
        if ((v1044 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1046 = (unint64_t)v1045 + 8;
LABEL_1195:
          v3555[0] = v3569;
          sub_1CC5FA668(v1046 + 16, v3555);
          goto LABEL_1188;
        }
        if (v1044 == 3) {
          *((void *)v3569[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v3569[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3569[0] + 3))
      {
        uint64_t v3203 = *((void *)v3569[0] + 2);
        if ((v3203 & 4) != 0)
        {
          unint64_t v1046 = v3203 & 0xFFFFFFFFFFFFFFF8;
          if (v1046) {
            goto LABEL_1195;
          }
        }
      }
LABEL_1188:
      if (v787 == 2) {
        goto LABEL_2037;
      }
      goto LABEL_2038;
    }
    uint64_t v406 = *(uint64_t **)(a2 + 32);
    uint64_t v407 = *(void *)(a2 + 40);
    uint64_t v408 = *v406;
    unint64_t v409 = v406[1];
    uint64_t v410 = v406[5];
    unint64_t v411 = v406[6];
    v3444 = *(llvm **)v407;
    uint64_t v3457 = *(void *)(v407 + 8);
    int v412 = *(unsigned __int16 *)(v410 + 24);
    if (v412 == 36 || v412 == 12) {
      uint64_t v414 = v410;
    }
    else {
      uint64_t v414 = 0;
    }
    uint64_t v415 = *(void **)(a3 + 16);
    int v3487 = *(unsigned __int16 *)(*v415 + 1020);
    unsigned __int16 v416 = *(_WORD *)(a2 + 72);
    uint64_t v3471 = v416;
    if (v414)
    {
      uint64_t v417 = *(void *)(v414 + 80);
      uint64_t v418 = v417 + 24;
      int v419 = *(void **)(v417 + 32);
      uint64_t v420 = v417 + 24;
      if (v419 == &unk_1CFB2E344) {
        uint64_t v420 = *(void *)(v417 + 40);
      }
      if ((*(unsigned char *)(v420 + 28) & 7) == 3)
      {
        if ((v3487 & 1) == 0 || (v416 & 0x40) == 0) {
          goto LABEL_1309;
        }
        if (v419 == &unk_1CFB2E344) {
          uint64_t v418 = *(void *)(v417 + 40);
        }
        if ((*(unsigned char *)(v418 + 28) & 8) == 0)
        {
LABEL_1309:
          uint64_t v1155 = v415[2];
          llvm::DiagnosticLocation::DiagnosticLocation(v3569, (const llvm::DebugLoc *)&v3551);
          uint64_t v1156 = *(void *)(*(void *)(v1155 + 640) + 16);
          v1157 = *(uint64_t **)(v1156 + 56);
          LODWORD(v3555[1]) = 11;
          BYTE4(v3555[1]) = 2;
          long long v3557 = *(_OWORD *)v3569;
          v3556 = v1157;
          unint64_t v3558 = (unint64_t)"agx2-lower";
          v3559 = "SlowMathFAddWithZero";
          uint64_t v3560 = 20;
          LOBYTE(v3561) = 0;
          LOBYTE(v3562) = 0;
          v3563 = v3565;
          uint64_t v3564 = 0x400000000;
          char v3566 = 0;
          int v3567 = -1;
          uint64_t v3568 = v1156;
          v3555[0] = &unk_1F26165E0;
          char v3532 = 6;
          strcpy((char *)v3531, "String");
          __p = operator new(0x58uLL);
          long long v3534 = xmmword_1CD935ED0;
          strcpy((char *)__p, "A floating point add with zero cannot be optimized away because fast-math is disabled.");
          uint64_t v3536 = 0;
          uint64_t v3535 = 0;
          sub_1CD3D6290((uint64_t)v3555, (long long *)v3531);
          if (SHIBYTE(v3534) < 0) {
            operator delete(__p);
          }
          if (v3532 < 0) {
            operator delete(v3531[0]);
          }
          llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3555);
          v3555[0] = &unk_1F2616800;
          v1158 = (char *)v3563;
          if (v3564)
          {
            unint64_t v1159 = (unint64_t)v3564 << 6;
            do
            {
              v1160 = (void **)&v1158[v1159];
              if (v1158[v1159 - 17] < 0) {
                operator delete(*(v1160 - 5));
              }
              if (*((char *)v1160 - 41) < 0) {
                operator delete(*(v1160 - 8));
              }
              v1159 -= 64;
            }
            while (v1159);
            v1158 = (char *)v3563;
          }
          if (v1158 != v3565) {
            free(v1158);
          }
        }
      }
    }
    if (!*(_DWORD *)(a3 + 8)) {
      goto LABEL_2037;
    }
    int v421 = *(unsigned __int16 *)(v408 + 24);
    int v422 = *(unsigned __int16 *)(v410 + 24);
    if ((v421 == 222) != (v422 == 222) && sub_1CD406BEC(a2) && v3471 & 0x40 | v3487 & 1)
    {
      if (v421 == 222)
      {
        uint64_t v1153 = *(void *)(v408 + 32);
        v3438 = *(uint64_t **)v1153;
        int v1154 = *(_DWORD *)(v1153 + 8);
      }
      else
      {
        v2874 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v2875 = *((void *)v2874 + 104);
        if (v2875) {
          __int16 v2876 = *(_WORD *)(v2875 + 8);
        }
        else {
          __int16 v2876 = 0;
        }
        v3438 = sub_1CD7F3564(v2874, (const char *)0xDE, (uint64_t)&v3551, v3444, v3457, v408, (void *)v409, v2876);
        int v1154 = v2943;
        int v422 = *(unsigned __int16 *)(v410 + 24);
      }
      if (v422 == 222)
      {
        uint64_t v2944 = *(void *)(v410 + 32);
        v2945 = *(uint64_t **)v2944;
        int v2946 = *(_DWORD *)(v2944 + 8);
      }
      else
      {
        v2947 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v2948 = *((void *)v2947 + 104);
        if (v2948) {
          __int16 v2949 = *(_WORD *)(v2948 + 8);
        }
        else {
          __int16 v2949 = 0;
        }
        v2945 = sub_1CD7F3564(v2947, (const char *)0xDE, (uint64_t)&v3551, v3444, v3457, v410, (void *)v411, v2949);
        int v2946 = v2950;
      }
      uint64_t v2951 = *(void *)(a3 + 16);
      uint64_t v2952 = *(void *)(a2 + 40);
      uint64_t v2953 = *(unsigned __int16 *)(a2 + 58);
      v3555[0] = v3438;
      LODWORD(v3555[1]) = v1154;
      v3556 = v2945;
      LODWORD(v3557) = v2946;
      uint64_t v31 = (uint64_t)sub_1CD801794(v2951, 0x60u, v2952, v2953, (uint64_t *)v3555, 2, v3471);
      uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
      if (v31 && v31 != a2)
      {
LABEL_3054:
        uint64_t v2954 = *((void *)v32 + 104);
        if (v2954) {
          __int16 v35 = *(_WORD *)(v2954 + 8);
        }
        else {
          __int16 v35 = 0;
        }
        uint64_t v563 = 222;
        uint64_t v564 = (uint64_t)v3444;
        uint64_t v565 = (void *)v3457;
LABEL_2750:
        uint64_t v33 = 0;
        goto LABEL_2058;
      }
      uint64_t v3174 = *(void *)(a2 + 40);
      uint64_t v3175 = *(unsigned __int16 *)(a2 + 58);
      v3555[0] = v2945;
      LODWORD(v3555[1]) = v2946;
      v3556 = v3438;
      LODWORD(v3557) = v1154;
      v3176 = sub_1CD801794((uint64_t)v32, 0x60u, v3174, v3175, (uint64_t *)v3555, 2, v3471);
      if (v3176)
      {
        uint64_t v31 = (uint64_t)v3176;
        if (v3176 != (unsigned __int8 **)a2)
        {
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          goto LABEL_3054;
        }
      }
    }
    v3555[0] = 0;
    LODWORD(v3555[1]) = 0;
    if (sub_1CB9D3204((uint64_t)v3555, a2, a3))
    {
LABEL_419:
      long long v312 = *(_OWORD *)v3555;
LABEL_2009:
      long long v3553 = v312;
      goto LABEL_2038;
    }
    int v644 = v3471;
    if (!((*(_DWORD *)(**(void **)(a3 + 16) + 1104) == 0) | v3487 & 1) && (v3471 & 0x100) == 0)
    {
      int v645 = v3471 & 0x400;
      goto LABEL_1757;
    }
    v3435 = a1 + 23037;
    char v712 = 1;
    unint64_t v713 = v409;
    uint64_t v714 = v408;
    unint64_t v715 = v411;
    uint64_t v716 = v410;
    int v3429 = (*(_DWORD *)(**(void **)(a3 + 16) + 1104) == 0) | v3487 | ((unsigned __int16)(v3471 & 0x400) >> 10);
    while (1)
    {
      uint64_t v717 = v716;
      uint64_t v716 = v714;
      char v718 = v712;
      v3529 = v3551;
      if (v3551) {
        llvm::MetadataTracking::track((uint64_t)&v3529, v3551, 2);
      }
      int v3530 = v3552;
      int v719 = sub_1CD4060D8((uint64_t)v3555, v3444, v3457, (const llvm::APInt *)&v3529, v716, v713, v717, v715, (uint64_t *)a3, v3487 & 1, v3404, v3471, SHIDWORD(v3471), 1, 0, 1, 98);
      if (v3529)
      {
        int v720 = *v3529;
        if ((v720 - 4) > 0x1E)
        {
          if ((v720 - 3) >= 0xFFFFFFFE) {
            uint64_t v723 = v3529;
          }
          else {
            uint64_t v723 = 0;
          }
          if ((v720 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v724 = (unint64_t)(v723 + 8);
LABEL_815:
            v3569[0] = &v3529;
            sub_1CC5FA668(v724 + 16, v3569);
            goto LABEL_805;
          }
          if (v720 == 3) {
            *((void *)v3529 + 1) = 0;
          }
        }
        else if ((v3529[1] & 0x7F) == 2 || *((_DWORD *)v3529 + 3))
        {
          uint64_t v729 = *((void *)v3529 + 2);
          if ((v729 & 4) != 0)
          {
            unint64_t v724 = v729 & 0xFFFFFFFFFFFFFFF8;
            if (v724) {
              goto LABEL_815;
            }
          }
        }
      }
LABEL_805:
      if (v719) {
        goto LABEL_419;
      }
      if (!*(unsigned char *)(*v3435 + 347)) {
        goto LABEL_807;
      }
      v3527 = v3551;
      if (v3551) {
        llvm::MetadataTracking::track((uint64_t)&v3527, v3551, 2);
      }
      int v3528 = v3552;
      int v725 = sub_1CD4060D8((uint64_t)v3555, v3444, v3457, (const llvm::APInt *)&v3527, v716, v713, v717, v715, (uint64_t *)a3, v3487 & 1, v3404, v3471, SHIDWORD(v3471), 1, 0, 1, 421);
      if (v3527)
      {
        int v726 = *v3527;
        if ((v726 - 4) > 0x1E)
        {
          if ((v726 - 3) >= 0xFFFFFFFE) {
            uint64_t v727 = v3527;
          }
          else {
            uint64_t v727 = 0;
          }
          if ((v726 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v728 = (unint64_t)(v727 + 8);
LABEL_831:
            v3569[0] = &v3527;
            sub_1CC5FA668(v728 + 16, v3569);
            goto LABEL_824;
          }
          if (v726 == 3) {
            *((void *)v3527 + 1) = 0;
          }
        }
        else if ((v3527[1] & 0x7F) == 2 || *((_DWORD *)v3527 + 3))
        {
          uint64_t v730 = *((void *)v3527 + 2);
          if ((v730 & 4) != 0)
          {
            unint64_t v728 = v730 & 0xFFFFFFFFFFFFFFF8;
            if (v728) {
              goto LABEL_831;
            }
          }
        }
      }
LABEL_824:
      if (v725) {
        goto LABEL_419;
      }
LABEL_807:
      if ((v3429 & 1) == 0)
      {
        uint64_t v716 = v410;
        unint64_t v715 = v411;
        uint64_t v721 = v408;
        unint64_t v722 = v409;
LABEL_1715:
        char v1545 = 1;
        unint64_t v1546 = v722;
        uint64_t v3422 = v721;
        uint64_t v1547 = v721;
        unint64_t v411 = v715;
        uint64_t v410 = v716;
        while (2)
        {
          uint64_t v408 = v410;
          uint64_t v410 = v1547;
          char v1548 = v1545;
          v3525 = v3551;
          if (v3551) {
            llvm::MetadataTracking::track((uint64_t)&v3525, v3551, 2);
          }
          int v3526 = v3552;
          int v1549 = sub_1CD4060D8((uint64_t)v3555, v3444, v3457, (const llvm::APInt *)&v3525, v410, v1546, v408, v411, (uint64_t *)a3, v3487 & 1, v3404, v3471, SHIDWORD(v3471), 0, 0, 1, 98);
          if (v3525)
          {
            int v1550 = *v3525;
            if ((v1550 - 4) > 0x1E)
            {
              if ((v1550 - 3) >= 0xFFFFFFFE) {
                v1551 = v3525;
              }
              else {
                v1551 = 0;
              }
              if ((v1550 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v1552 = (unint64_t)(v1551 + 8);
                goto LABEL_1732;
              }
              if (v1550 == 3) {
                *((void *)v3525 + 1) = 0;
              }
            }
            else if ((v3525[1] & 0x7F) == 2 || *((_DWORD *)v3525 + 3))
            {
              uint64_t v1557 = *((void *)v3525 + 2);
              if ((v1557 & 4) != 0)
              {
                unint64_t v1552 = v1557 & 0xFFFFFFFFFFFFFFF8;
                if (v1552)
                {
LABEL_1732:
                  v3569[0] = &v3525;
                  sub_1CC5FA668(v1552 + 16, v3569);
                }
              }
            }
          }
          if (v1549) {
            goto LABEL_419;
          }
          if (!*(unsigned char *)(*v3435 + 347))
          {
LABEL_1724:
            if ((v3429 & 1) == 0)
            {
              int v645 = 0;
              uint64_t v410 = v716;
              unint64_t v411 = v715;
              uint64_t v408 = v3422;
              unint64_t v409 = v722;
              int v644 = v3471;
LABEL_1757:
              if (v3487 & 1 | v645)
              {
                char v1559 = 1;
                while (1)
                {
                  uint64_t v1560 = v410;
                  uint64_t v410 = v408;
                  char v1561 = v1559;
                  if (*(_WORD *)(v408 + 24) == 96) {
                    break;
                  }
LABEL_1764:
                  char v1559 = 0;
                  unint64_t v1566 = v409 & 0xFFFFFFFF00000000 | v411;
                  unint64_t v411 = v411 & 0xFFFFFFFF00000000 | v409;
                  unint64_t v409 = v1566;
                  uint64_t v408 = v1560;
                  if ((v1561 & 1) == 0)
                  {
                    if (v3487) {
                      goto LABEL_1769;
                    }
                    goto LABEL_1768;
                  }
                }
                uint64_t v1562 = 0;
                char v1563 = 1;
                while (1)
                {
                  char v1564 = v1563;
                  v1565 = (void *)(*(void *)(v408 + 32) + 40 * v1562);
                  if (*v1565 == v1560 && *((_DWORD *)v1565 + 2) == v411) {
                    break;
                  }
                  char v1563 = 0;
                  uint64_t v1562 = 1;
                  if ((v1564 & 1) == 0) {
                    goto LABEL_1764;
                  }
                }
                __int16 v1577 = v644;
                uint64_t v82 = v3444;
                uint64_t v81 = v3457;
                uint64_t v210 = sub_1CCFDED5C(*(void *)(a3 + 16), 96, (const llvm::APInt *)&v3551, v3444, v3457, v1560, v1565[1], v423, v1560, v411, v644);
                uint64_t v211 = v1578;
                uint64_t v208 = *(void *)(a3 + 16);
                v1579 = (uint64_t *)(*(void *)(v408 + 32) + 40 * (v1562 ^ 1));
                uint64_t v3403 = v1579[1];
                __int16 v3405 = v1577;
                uint64_t v3402 = *v1579;
                uint64_t v215 = 96;
LABEL_1785:
                uint64_t v216 = (uint64_t)v82;
LABEL_1786:
                uint64_t v744 = v81;
LABEL_1787:
                uint64_t v37 = (uint64_t)sub_1CCFDED5C(v208, v215, (const llvm::APInt *)&v3551, (llvm *)v216, v744, (uint64_t)v210, v211, a8, v3402, v3403, v3405);
                goto LABEL_20;
              }
              unint64_t v1566 = v409;
              uint64_t v1560 = v408;
LABEL_1768:
              if ((~v644 & 0x500) == 0)
              {
LABEL_1769:
                char v1567 = 1;
                while (1)
                {
                  uint64_t v1568 = v410;
                  uint64_t v410 = v1560;
                  char v1569 = v1567;
                  if (*(_WORD *)(v1568 + 24) == 141)
                  {
                    uint64_t v1570 = *(void *)(v1568 + 48);
                    if (v1570)
                    {
                      int v1571 = 1;
                      do
                      {
                        if (*(_DWORD *)(v1570 + 8) == v411)
                        {
                          if (!v1571) {
                            goto LABEL_1782;
                          }
                          --v1571;
                        }
                        uint64_t v1570 = *(void *)(v1570 + 32);
                      }
                      while (v1570);
                      if (!v1571)
                      {
                        v1572 = *(uint64_t **)(v1568 + 32);
                        uint64_t v1573 = v1572[10];
                        int v1574 = *(unsigned __int16 *)(v1573 + 24);
                        if (v1574 == 215)
                        {
                          uint64_t v1575 = **(void **)(v1573 + 32);
                          if (*(_WORD *)(v1575 + 24) == 98)
                          {
                            v2079 = *(llvm::APFloatBase **)(a3 + 16);
                            v2080 = *(uint64_t **)(v1575 + 32);
                            uint64_t v2081 = *v2080;
                            v2082 = (void *)v2080[1];
                            uint64_t v2083 = *((void *)v2079 + 104);
                            if (v2083) {
                              __int16 v2084 = *(_WORD *)(v2083 + 8);
                            }
                            else {
                              __int16 v2084 = 0;
                            }
                            v3502 = sub_1CD7F3564(v2079, (const char *)0xD7, (uint64_t)&v3551, v3444, v3457, v2081, v2082, v2084);
                            uint64_t v3443 = v2481;
                            v2482 = *(llvm::APFloatBase **)(a3 + 16);
                            uint64_t v2483 = *(void *)(v1575 + 32);
                            uint64_t v2484 = *(void *)(v2483 + 40);
                            v2485 = *(void **)(v2483 + 48);
                            uint64_t v2486 = *((void *)v2482 + 104);
                            if (v2486) {
                              __int16 v2487 = *(_WORD *)(v2486 + 8);
                            }
                            else {
                              __int16 v2487 = 0;
                            }
                            v2488 = sub_1CD7F3564(v2482, (const char *)0xD7, (uint64_t)&v3551, v3444, v3457, v2484, v2485, v2487);
                            v2489 = *(void **)(a3 + 16);
                            v2490 = *(uint64_t **)(v1568 + 32);
                            uint64_t v2491 = *v2490;
                            uint64_t v2492 = v2490[1];
                            uint64_t v2493 = v2490[5];
                            uint64_t v2494 = v2490[6];
                            v2497 = sub_1CD7F5D38(v2489, (const char *)0x8D, (const llvm::APInt *)&v3551, v3444, v3457, (uint64_t)v3502, v3443, v2496, (uint64_t)v2488, v2495, v410, v1566, SHIDWORD(v1566), v3471);
                            uint64_t v37 = (uint64_t)sub_1CD7F5D38(v2489, (const char *)0x8D, (const llvm::APInt *)&v3551, v3444, v3457, v2491, v2492, v2500, v2493, v2494, (uint64_t)v2497, v2498, v2499, v3471);
                            goto LABEL_20;
                          }
                        }
                        else if (v1574 == 98)
                        {
                          v2068 = *(void **)(a3 + 16);
                          uint64_t v2069 = *v1572;
                          uint64_t v2070 = v1572[1];
                          uint64_t v2071 = v1572[5];
                          uint64_t v2072 = v1572[6];
                          __int16 v2073 = v644;
                          v2074 = sub_1CD7F5D38(v2068, (const char *)0x8D, (const llvm::APInt *)&v3551, v3444, v3457, **(void **)(v1573 + 32), *(void *)(*(void *)(v1573 + 32) + 8), v423, *(void *)(*(void *)(v1573 + 32) + 40), *(void *)(*(void *)(v1573 + 32) + 48), v1560, v1566, SHIDWORD(v1566), v644);
                          uint64_t v37 = (uint64_t)sub_1CD7F5D38(v2068, (const char *)0x8D, (const llvm::APInt *)&v3551, v3444, v3457, v2069, v2070, v2077, v2071, v2072, (uint64_t)v2074, v2075, v2076, v2073);
                          goto LABEL_20;
                        }
                      }
                    }
                  }
LABEL_1782:
                  char v1567 = 0;
                  int v1576 = v1566;
                  unint64_t v1566 = v1566 & 0xFFFFFFFF00000000 | v411;
                  uint64_t v1560 = v1568;
                  LODWORD(v411) = v1576;
                  if ((v1569 & 1) == 0) {
                    goto LABEL_2037;
                  }
                }
              }
              goto LABEL_2037;
            }
            char v1545 = 0;
            unint64_t v409 = v1546 & 0xFFFFFFFF00000000 | v411;
            unint64_t v411 = v411 & 0xFFFFFFFF00000000 | v1546;
            unint64_t v1546 = v409;
            uint64_t v1547 = v408;
            if ((v1548 & 1) == 0)
            {
              int v644 = v3471;
              int v645 = v3471 & 0x400;
              goto LABEL_1757;
            }
            continue;
          }
          break;
        }
        v3523 = v3551;
        if (v3551) {
          llvm::MetadataTracking::track((uint64_t)&v3523, v3551, 2);
        }
        int v3524 = v3552;
        int v1553 = sub_1CD4060D8((uint64_t)v3555, v3444, v3457, (const llvm::APInt *)&v3523, v410, v1546, v408, v411, (uint64_t *)a3, v3487 & 1, v3404, v3471, SHIDWORD(v3471), 0, 0, 1, 421);
        if (v3523)
        {
          int v1554 = *v3523;
          if ((v1554 - 4) > 0x1E)
          {
            if ((v1554 - 3) >= 0xFFFFFFFE) {
              v1555 = v3523;
            }
            else {
              v1555 = 0;
            }
            if ((v1554 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v1556 = (unint64_t)(v1555 + 8);
              goto LABEL_1748;
            }
            if (v1554 == 3) {
              *((void *)v3523 + 1) = 0;
            }
          }
          else if ((v3523[1] & 0x7F) == 2 || *((_DWORD *)v3523 + 3))
          {
            uint64_t v1558 = *((void *)v3523 + 2);
            if ((v1558 & 4) != 0)
            {
              unint64_t v1556 = v1558 & 0xFFFFFFFFFFFFFFF8;
              if (v1556)
              {
LABEL_1748:
                v3569[0] = &v3523;
                sub_1CC5FA668(v1556 + 16, v3569);
              }
            }
          }
        }
        if (v1553) {
          goto LABEL_419;
        }
        goto LABEL_1724;
      }
      char v712 = 0;
      uint64_t v721 = v717;
      unint64_t v722 = v713 & 0xFFFFFFFF00000000 | v715;
      unint64_t v715 = v715 & 0xFFFFFFFF00000000 | v713;
      unint64_t v713 = v722;
      uint64_t v714 = v721;
      if ((v718 & 1) == 0) {
        goto LABEL_1715;
      }
    }
  }
  if (*(unsigned __int16 *)(a2 + 24) <= 0xDDu)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xAB:
        uint64_t v1019 = *(void *)(a2 + 40);
        uint64_t v82 = *(llvm **)v1019;
        uint64_t v81 = *(void *)(v1019 + 8);
        v3555[0] = 0;
        LODWORD(v3555[1]) = 0;
        if (sub_1CD406C90((uint64_t)v3555, a2, a3)) {
          goto LABEL_419;
        }
        if (v82 != 5) {
          goto LABEL_2463;
        }
        int v1021 = *(uint64_t **)(a2 + 32);
        uint64_t v1022 = v1021[5];
        int v1023 = *(unsigned __int16 *)(v1022 + 24);
        if (v1023 != 35 && v1023 != 11) {
          goto LABEL_2463;
        }
        uint64_t v1025 = *(void *)(v1022 + 80);
        uint64_t v1026 = (void *)(v1025 + 24);
        if (*(_DWORD *)(v1025 + 32) >= 0x41u) {
          uint64_t v1026 = (void *)*v1026;
        }
        if (*v1026 != 0xFFFFLL) {
          goto LABEL_2463;
        }
        uint64_t v1027 = *v1021;
        uint64_t v1028 = v1021[1];
        int v1029 = *(unsigned __int16 *)(*v1021 + 24);
        if ((v1029 - 56) >= 3 && v1029 != 175) {
          goto LABEL_2459;
        }
        if (sub_1CB8D66E8(v1027, v1028, v1020))
        {
          uint64_t v1030 = *(llvm::APFloatBase **)(a3 + 16);
          v1031 = *(uint64_t **)(v1027 + 32);
          uint64_t v1032 = *v1031;
          v1033 = (void *)v1031[1];
          uint64_t v1034 = *((void *)v1030 + 104);
          if (v1034) {
            __int16 v1035 = *(_WORD *)(v1034 + 8);
          }
          else {
            __int16 v1035 = 0;
          }
          v2559 = sub_1CD7F3564(v1030, (const char *)0xC9, (uint64_t)&v3551, (llvm *)4, 0, v1032, v1033, v1035);
          uint64_t v2561 = v2560;
          v2562 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2563 = *(void *)(v1027 + 32);
          uint64_t v2564 = *(void *)(v2563 + 40);
          v2565 = *(void **)(v2563 + 48);
          uint64_t v2566 = *((void *)v2562 + 104);
          if (v2566) {
            __int16 v2567 = *(_WORD *)(v2566 + 8);
          }
          else {
            __int16 v2567 = 0;
          }
          v2568 = sub_1CD7F3564(v2562, (const char *)0xC9, (uint64_t)&v3551, (llvm *)4, 0, v2564, v2565, v2567);
          uint64_t v2570 = v2569;
          sub_1CCEF0788(*(void *)a3, (uint64_t)v2559);
          sub_1CCEF0788(*(void *)a3, (uint64_t)v2568);
          uint64_t v2572 = *(void *)(a3 + 16);
          uint64_t v2573 = *(void *)(v2572 + 832);
          if (v2573) {
            LOWORD(v2573) = *(_WORD *)(v2573 + 8);
          }
          v2574 = sub_1CCFDED5C(v2572, *(unsigned __int16 *)(v1027 + 24), (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v2559, v2561, v2571, (uint64_t)v2568, v2570, v2573);
          goto LABEL_3038;
        }
        int v1029 = *(unsigned __int16 *)(v1027 + 24);
LABEL_2459:
        if (v1029 == 396 && sub_1CB8D66E8(v1027, v1028, v1020))
        {
          v2133 = *(llvm::APFloatBase **)(a3 + 16);
          v2134 = *(uint64_t **)(v1027 + 32);
          uint64_t v2135 = *v2134;
          v2136 = (void *)v2134[1];
          uint64_t v2137 = *((void *)v2133 + 104);
          if (v2137) {
            __int16 v2138 = *(_WORD *)(v2137 + 8);
          }
          else {
            __int16 v2138 = 0;
          }
          v2574 = sub_1CD7F3564(v2133, (const char *)0x18C, (uint64_t)&v3551, (llvm *)4, 0, v2135, v2136, v2138);
LABEL_3038:
          uint64_t v31 = (uint64_t)v2574;
          uint64_t v33 = v2575;
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2941 = *((void *)v32 + 104);
          if (v2941) {
            __int16 v35 = *(_WORD *)(v2941 + 8);
          }
          else {
            __int16 v35 = 0;
          }
          uint64_t v563 = 199;
          goto LABEL_1655;
        }
LABEL_2463:
        if (**(unsigned char **)(a2 + 40) != 5) {
          goto LABEL_2037;
        }
        v2139 = *(void **)(a2 + 32);
        uint64_t v2140 = v2139[5];
        int v2141 = *(unsigned __int16 *)(v2140 + 24);
        if (v2141 != 35 && v2141 != 11) {
          goto LABEL_2037;
        }
        uint64_t v2143 = *v2139;
        if (*(_WORD *)(*v2139 + 24) != 395) {
          goto LABEL_2037;
        }
        uint64_t v2144 = *(void *)(v2140 + 80);
        if (*(_DWORD *)(v2144 + 32) > 0x40u) {
          unint64_t v2145 = **(void **)(v2144 + 24);
        }
        else {
          unint64_t v2145 = *(void *)(v2144 + 24);
        }
        if (v2145 == 0xFFFF)
        {
          v2146 = *(llvm::APFloatBase **)(a3 + 16);
          v2147 = *(void **)(v2143 + 64);
          v3569[0] = v2147;
          uint64_t v2148 = v2143;
          if (v2147)
          {
            llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v2147, 2);
            uint64_t v2148 = **(void **)(a2 + 32);
          }
          LODWORD(v3569[1]) = *(_DWORD *)(v2143 + 60);
          v2149 = *(uint64_t **)(v2148 + 32);
          uint64_t v2150 = *v2149;
          v2151 = (void *)v2149[1];
          uint64_t v2152 = *((void *)v2146 + 104);
          if (v2152) {
            __int16 v2153 = *(_WORD *)(v2152 + 8);
          }
          else {
            __int16 v2153 = 0;
          }
          v2536 = sub_1CD7F3564(v2146, (const char *)0x18B, (uint64_t)v3569, (llvm *)4, 0, v2150, v2151, v2153);
          v2538 = v2537;
          if (!v3569[0]) {
            goto LABEL_2777;
          }
          int v2539 = *(unsigned __int8 *)v3569[0];
          if ((v2539 - 4) > 0x1E)
          {
            if ((v2539 - 3) >= 0xFFFFFFFE) {
              v2937 = v3569[0];
            }
            else {
              v2937 = 0;
            }
            if ((v2539 - 3) < 0xFFFFFFFE)
            {
              if (v2539 == 3) {
                *((void *)v3569[0] + 1) = 0;
              }
              goto LABEL_2777;
            }
            unint64_t v2938 = (unint64_t)v2937 + 8;
          }
          else
          {
            if ((*((unsigned char *)v3569[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3569[0] + 3)) {
              goto LABEL_2777;
            }
            uint64_t v3395 = *((void *)v3569[0] + 2);
            if ((v3395 & 4) == 0) {
              goto LABEL_2777;
            }
            unint64_t v2938 = v3395 & 0xFFFFFFFFFFFFFFF8;
            if (!v2938) {
              goto LABEL_2777;
            }
          }
          *(void *)&v3584[0] = v3569;
          sub_1CC5FA668(v2938 + 16, v3584);
LABEL_2777:
          v2540 = *(llvm::APFloatBase **)(a3 + 16);
          v2541 = *(void **)(a2 + 64);
          v3569[0] = v2541;
          if (v2541) {
            llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v2541, 2);
          }
          LODWORD(v3569[1]) = *(_DWORD *)(a2 + 60);
          uint64_t v2542 = *((void *)v2540 + 104);
          if (v2542) {
            __int16 v2543 = *(_WORD *)(v2542 + 8);
          }
          else {
            __int16 v2543 = 0;
          }
          v2544 = v2540;
          uint64_t v2545 = (uint64_t)v2536;
          v2546 = v2538;
          goto LABEL_2783;
        }
        if (v2145 > 0xFFFE) {
          goto LABEL_2037;
        }
        v2154 = *(llvm::APFloatBase **)(a3 + 16);
        v2155 = *(void **)(v2143 + 64);
        v3569[0] = v2155;
        uint64_t v2156 = v2143;
        if (v2155)
        {
          llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v2155, 2);
          uint64_t v2156 = **(void **)(a2 + 32);
        }
        LODWORD(v3569[1]) = *(_DWORD *)(v2143 + 60);
        v2157 = *(uint64_t **)(v2156 + 32);
        uint64_t v2158 = *v2157;
        v2159 = (void *)v2157[1];
        uint64_t v2160 = *((void *)v2154 + 104);
        if (v2160) {
          __int16 v2161 = *(_WORD *)(v2160 + 8);
        }
        else {
          __int16 v2161 = 0;
        }
        v3157 = sub_1CD7F3564(v2154, (const char *)0x18B, (uint64_t)v3569, (llvm *)4, 0, v2158, v2159, v2161);
        uint64_t v3159 = v3158;
        if (!v3569[0]) {
          goto LABEL_3216;
        }
        int v3160 = *(unsigned __int8 *)v3569[0];
        if ((v3160 - 4) > 0x1E)
        {
          if ((v3160 - 3) >= 0xFFFFFFFE) {
            v3271 = v3569[0];
          }
          else {
            v3271 = 0;
          }
          if ((v3160 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v3272 = (unint64_t)v3271 + 8;
LABEL_3378:
            *(void *)&v3584[0] = v3569;
            sub_1CC5FA668(v3272 + 16, v3584);
            goto LABEL_3216;
          }
          if (v3160 == 3) {
            *((void *)v3569[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v3569[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3569[0] + 3))
        {
          uint64_t v3400 = *((void *)v3569[0] + 2);
          if ((v3400 & 4) != 0)
          {
            unint64_t v3272 = v3400 & 0xFFFFFFFFFFFFFFF8;
            if (v3272) {
              goto LABEL_3378;
            }
          }
        }
LABEL_3216:
        uint64_t v3161 = *(void *)(a3 + 16);
        uint64_t v3162 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
        v3163 = (uint64_t *)(v3162 + 24);
        if (*(_DWORD *)(v3162 + 32) >= 0x41u) {
          v3163 = (uint64_t *)*v3163;
        }
        v3164 = sub_1CD7EBF14(*(void *)(a3 + 16), *v3163, (const llvm::APInt *)&v3551, (llvm *)4, 0, 0, 0);
        uint64_t v3167 = *(void *)(v3161 + 832);
        if (v3167) {
          LOWORD(v3167) = *(_WORD *)(v3167 + 8);
        }
        v3168 = sub_1CCFDED5C(v3161, 171, (const llvm::APInt *)&v3551, (llvm *)4, 0, (uint64_t)v3157, v3159, v3166, (uint64_t)v3164, v3165, v3167);
        unint64_t v3170 = v3159 & 0xFFFFFFFF00000000 | v3169;
        v3171 = *(llvm::APFloatBase **)(a3 + 16);
        v3172 = *(void **)(a2 + 64);
        v3569[0] = v3172;
        if (v3172) {
          llvm::MetadataTracking::track((uint64_t)v3569, (unsigned __int8 *)v3172, 2);
        }
        LODWORD(v3569[1]) = *(_DWORD *)(a2 + 60);
        uint64_t v3173 = *((void *)v3171 + 104);
        if (v3173) {
          __int16 v2543 = *(_WORD *)(v3173 + 8);
        }
        else {
          __int16 v2543 = 0;
        }
        v2544 = v3171;
        uint64_t v2545 = (uint64_t)v3168;
        v2546 = (void *)v3170;
LABEL_2783:
        *(void *)&long long v3553 = sub_1CD7F3564(v2544, (const char *)0xC7, (uint64_t)v3569, (llvm *)5, 0, v2545, v2546, v2543);
        *((void *)&v3553 + 1) = v2547;
        unint64_t v861 = v3569[0];
        if (!v3569[0]) {
          goto LABEL_2038;
        }
        int v862 = *(unsigned __int8 *)v3569[0];
        if ((v862 - 4) <= 0x1E)
        {
          if ((*((unsigned char *)v3569[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3569[0] + 3)) {
            goto LABEL_2038;
          }
          uint64_t v2548 = *((void *)v3569[0] + 2);
          if ((v2548 & 4) == 0) {
            goto LABEL_2038;
          }
          unint64_t v2549 = v2548 & 0xFFFFFFFFFFFFFFF8;
          if (!v2549) {
            goto LABEL_2038;
          }
LABEL_3015:
          *(void *)&v3584[0] = v3569;
          uint64_t v866 = v2549 + 16;
          unint64_t v867 = (void **)v3584;
          goto LABEL_997;
        }
        if ((v862 - 3) >= 0xFFFFFFFE) {
          v2936 = v3569[0];
        }
        else {
          v2936 = 0;
        }
        if ((v862 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v2549 = (unint64_t)v2936 + 8;
          goto LABEL_3015;
        }
        goto LABEL_3016;
      case 0xAC:
        *(void *)&v3584[0] = 0;
        DWORD2(v3584[0]) = 0;
        if (sub_1CD406C90((uint64_t)v3584, a2, a3))
        {
          long long v312 = v3584[0];
          goto LABEL_2009;
        }
        uint64_t v1997 = *(void *)(a2 + 40);
        v1999 = *(llvm **)v1997;
        uint64_t v1998 = *(void *)(v1997 + 8);
        if (sub_1CD7F3030(*(void *)(a3 + 16), a2)
          && sub_1CD7F3030(*(void *)(a3 + 16), **(void **)(a2 + 32)))
        {
          v2972 = *(void **)(a2 + 32);
          uint64_t v2973 = *(void *)(v2972[5] + 80);
          v2974 = (void *)(v2973 + 24);
          if (*(_DWORD *)(v2973 + 32) >= 0x41u) {
            v2974 = (void *)*v2974;
          }
          v2975 = (void *)*v2974;
          v2976 = *(uint64_t ***)(*v2972 + 32);
          uint64_t v2977 = v2976[5][10];
          v2978 = (void *)(v2977 + 24);
          if (*(_DWORD *)(v2977 + 32) >= 0x41u) {
            v2978 = (void *)*v2978;
          }
          uint64_t v2979 = *(void *)(a3 + 16);
          v2980 = *v2976;
          uint64_t v733 = (uint64_t)v2976[1];
          v2981 = sub_1CD7EBF14(v2979, (uint64_t)v2975 + *v2978, (const llvm::APInt *)&v3551, v1999, v1998, 0, 0);
          uint64_t v2983 = *(void *)(v2979 + 832);
          if (v2983) {
            LOWORD(v2983) = *(_WORD *)(v2983 + 8);
          }
          uint64_t v3403 = v2982;
          __int16 v3405 = v2983;
          uint64_t v3402 = (uint64_t)v2981;
          uint64_t v208 = v2979;
          uint64_t v215 = 56;
          uint64_t v216 = (uint64_t)v1999;
          uint64_t v744 = v1998;
          uint64_t v210 = v2980;
          goto LABEL_847;
        }
        if (v1999 - 7 <= 0xFFFFFFFD) {
          goto LABEL_2037;
        }
        uint64_t v2000 = 0;
        v2001 = *(uint64_t **)(a2 + 32);
        uint64_t v3462 = *v2001;
        unint64_t v3478 = v2001[1];
        uint64_t v2002 = v2001[5];
        uint64_t v3496 = v2001[6];
        if (v1999 == 6) {
          char v2003 = 5;
        }
        else {
          char v2003 = 4;
        }
        LOBYTE(v3554) = v2003;
        *((void *)&v3554 + 1) = 0;
        do
        {
          v2004 = &v3555[v2000];
          *((_DWORD *)v2004 + 2) = 1;
          *v2004 = 0;
          *((_DWORD *)v2004 + 6) = 1;
          v2004[2] = 0;
          v2000 += 4;
        }
        while (v2000 != 8);
        uint64_t v2005 = 38;
        if (v1999 == 6) {
          uint64_t v2005 = 49;
        }
        v3449 = (llvm *)v2005;
        sub_1CD7F121C(*(void *)(a3 + 16), v3462, v3478, 0, (uint64_t)v3569);
        if (LODWORD(v3555[1]) >= 0x41 && v3555[0]) {
          MEMORY[0x1D25D9CB0](v3555[0], 0x1000C8000313F17);
        }
        v2006 = v3569[0];
        v3555[0] = v3569[0];
        unsigned int v2007 = v3569[1];
        LODWORD(v3555[1]) = v3569[1];
        LODWORD(v3569[1]) = 0;
        if (v3557 >= 0x41 && v3556)
        {
          MEMORY[0x1D25D9CB0](v3556, 0x1000C8000313F17);
          v3556 = v3570;
          LODWORD(v3557) = v3571;
          unsigned int v3571 = 0;
          if (LODWORD(v3569[1]) >= 0x41 && v3569[0]) {
            MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
          }
        }
        else
        {
          v3556 = v3570;
          LODWORD(v3557) = v3571;
        }
        sub_1CD7F121C(*(void *)(a3 + 16), v2002, v3496, 0, (uint64_t)v3569);
        if (v3558 >= 0x41 && *((void *)&v3557 + 1)) {
          MEMORY[0x1D25D9CB0](*((void *)&v3557 + 1), 0x1000C8000313F17);
        }
        v2008 = v3569[0];
        *((void **)&v3557 + 1) = v3569[0];
        unsigned int v2009 = v3569[1];
        LODWORD(v3558) = v3569[1];
        LODWORD(v3569[1]) = 0;
        if (v3560 >= 0x41 && v3559)
        {
          MEMORY[0x1D25D9CB0](v3559, 0x1000C8000313F17);
          v3559 = (const char *)v3570;
          LODWORD(v3560) = v3571;
          unsigned int v3571 = 0;
          if (LODWORD(v3569[1]) >= 0x41 && v3569[0]) {
            MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
          }
        }
        else
        {
          v3559 = (const char *)v3570;
          LODWORD(v3560) = v3571;
        }
        int v2010 = *(unsigned __int16 *)(v2002 + 24);
        if (v2010 == 35 || v2010 == 11)
        {
          uint64_t v2011 = *(void *)(v2002 + 80);
          v2012 = (unint64_t *)(v2011 + 24);
          if (*(_DWORD *)(v2011 + 32) >= 0x41u) {
            v2012 = (unint64_t *)*v2012;
          }
          unint64_t v2013 = *v2012;
          if ((_BYTE)v3554) {
            unsigned int v2014 = sub_1CB87E200((unsigned __int8 *)&v3554);
          }
          else {
            unsigned int v2014 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
          }
          unsigned int v3177 = v2014;
          if (v2015 == 1) {
          LODWORD(v3569[1]) = v2007;
          }
          if (v2007 >= 0x41) {
            operator new[]();
          }
          char v3178 = v3177;
          if (v2007 == v3177) {
            char v3178 = 63;
          }
          uint64_t v3179 = (uint64_t)((void)v2006 << -(char)v2007) >> -(char)v2007 >> v3178;
          if (v2007) {
            unint64_t v3180 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2007;
          }
          else {
            unint64_t v3180 = 0;
          }
          v3569[0] = (void *)(v3180 & v3179);
          if (!v2007 || v3569[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2007))
          {
            if ((_BYTE)v3554) {
              unsigned __int8 v3204 = sub_1CB87E200((unsigned __int8 *)&v3554);
            }
            else {
              unsigned __int8 v3204 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
            }
            unsigned __int8 v3206 = v3204;
            if (v3205 == 1) {
            if ((_BYTE)v3554)
            }
              unsigned __int8 v3207 = sub_1CB87E200((unsigned __int8 *)&v3554);
            else {
              unsigned __int8 v3207 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
            }
            unsigned __int8 v3209 = v3207;
            unint64_t v3210 = v2013 >> v3206;
            if (v3208 == 1) {
            unint64_t v3211 = v3210 << v3209;
            }
            if (LODWORD(v3569[1]) >= 0x41 && v3569[0]) {
              MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
            }
            if (v3211 == v2013)
            {
              v3212 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v3213 = *((void *)v3212 + 104);
              if (v3213) {
                __int16 v3214 = *(_WORD *)(v3213 + 8);
              }
              else {
                __int16 v3214 = 0;
              }
              v3346 = sub_1CD7F3564(v3212, (const char *)0xC9, (uint64_t)&v3551, (llvm *)v3554, *((uint64_t *)&v3554 + 1), v3462, (void *)v3478, v3214);
              unint64_t v3348 = v3478 & 0xFFFFFFFF00000000 | v3358;
              uint64_t v3359 = *(void *)(a3 + 16);
              if ((_BYTE)v3554) {
                unsigned __int8 v3360 = sub_1CB87E200((unsigned __int8 *)&v3554);
              }
              else {
                unsigned __int8 v3360 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
              }
              unsigned __int8 v3362 = v3360;
              if (v3361 == 1) {
              v3355 = sub_1CD7EBF14(v3359, v2013 >> v3362, (const llvm::APInt *)&v3551, (llvm *)v3554, *((uint64_t *)&v3554 + 1), 0, 0);
              }
              goto LABEL_3552;
            }
          }
        }
        else
        {
          if ((_BYTE)v3554) {
            unsigned int v3155 = sub_1CB87E200((unsigned __int8 *)&v3554);
          }
          else {
            unsigned int v3155 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
          }
          unsigned int v3235 = v3155;
          if (v3156 == 1) {
          LODWORD(v3569[1]) = v2007;
          }
          if (v2007 >= 0x41) {
            operator new[]();
          }
          char v3236 = v3235;
          if (v2007 == v3235) {
            char v3236 = 63;
          }
          uint64_t v3237 = (uint64_t)((void)v2006 << -(char)v2007) >> -(char)v2007 >> v3236;
          if (v2007) {
            unint64_t v3238 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2007;
          }
          else {
            unint64_t v3238 = 0;
          }
          v3569[0] = (void *)(v3238 & v3237);
          if (v2007 && v3569[0] != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2007)) {
            goto LABEL_3476;
          }
          if (*(_WORD *)(v2002 + 24) != 175) {
            goto LABEL_3476;
          }
          uint64_t v3247 = *(void *)(*(void *)(v2002 + 32) + 40);
          int v3248 = *(unsigned __int16 *)(v3247 + 24);
          if (v3248 != 35 && v3248 != 11) {
            goto LABEL_3476;
          }
          uint64_t v3249 = *(void *)(v3247 + 80);
          v3250 = (void *)(v3249 + 24);
          if (*(_DWORD *)(v3249 + 32) >= 0x41u) {
            v3250 = (void *)*v3250;
          }
          v3251 = (void *)*v3250;
          if ((_BYTE)v3554) {
            uint64_t v3252 = sub_1CB87E200((unsigned __int8 *)&v3554);
          }
          else {
            uint64_t v3252 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
          }
          uint64_t v3318 = v3252;
          if (v3253 == 1) {
          if (LODWORD(v3569[1]) >= 0x41 && v3569[0])
          }
            MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
          if (v3251 == (void *)v3318)
          {
            uint64_t v3319 = v2002;
            uint64_t v2002 = v3462;
          }
          else
          {
LABEL_3476:
            unint64_t v3478 = v3478 & 0xFFFFFFFF00000000 | v3496;
            v3496 &= 0xFFFFFFFF00000000;
            v3555[0] = v2008;
            *((void *)&v3557 + 1) = v2006;
            LODWORD(v3558) = v2007;
            v2006 = v2008;
            unsigned int v2007 = v2009;
            uint64_t v3319 = v3462;
            LODWORD(v3555[1]) = v2009;
          }
          if ((_BYTE)v3554) {
            unsigned int v3320 = sub_1CB87E200((unsigned __int8 *)&v3554);
          }
          else {
            unsigned int v3320 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
          }
          unsigned int v3322 = v3320;
          if (v3321 == 1) {
          LODWORD(v3569[1]) = v2007;
          }
          if (v2007 >= 0x41) {
            operator new[]();
          }
          char v3323 = v3322;
          if (v2007 == v3322) {
            char v3323 = 63;
          }
          uint64_t v3324 = (uint64_t)((void)v2006 << -(char)v2007) >> -(char)v2007 >> v3323;
          if (v2007) {
            unint64_t v3325 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2007;
          }
          else {
            unint64_t v3325 = 0;
          }
          v3569[0] = (void *)(v3325 & v3324);
          if ((!v2007 || v3569[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2007)) && *(_WORD *)(v3319 + 24) == 175)
          {
            uint64_t v3326 = *(void *)(*(void *)(v3319 + 32) + 40);
            int v3327 = *(unsigned __int16 *)(v3326 + 24);
            if (v3327 == 35 || v3327 == 11)
            {
              uint64_t v3328 = *(void *)(v3326 + 80);
              v3329 = (void *)(v3328 + 24);
              if (*(_DWORD *)(v3328 + 32) >= 0x41u) {
                v3329 = (void *)*v3329;
              }
              v3330 = (void *)*v3329;
              if ((_BYTE)v3554) {
                uint64_t v3331 = sub_1CB87E200((unsigned __int8 *)&v3554);
              }
              else {
                uint64_t v3331 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3554);
              }
              uint64_t v3333 = v3331;
              if (v3332 == 1) {
              if (LODWORD(v3569[1]) >= 0x41 && v3569[0])
              }
                MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
              if (v3330 == (void *)v3333)
              {
                v3334 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v3335 = *((void *)v3334 + 104);
                if (v3335) {
                  __int16 v3336 = *(_WORD *)(v3335 + 8);
                }
                else {
                  __int16 v3336 = 0;
                }
                v3346 = sub_1CD7F3564(v3334, (const char *)0xC9, (uint64_t)&v3551, (llvm *)v3554, *((uint64_t *)&v3554 + 1), v2002, (void *)v3478, v3336);
                unint64_t v3348 = v3478 & 0xFFFFFFFF00000000 | v3347;
                v3349 = *(llvm::APFloatBase **)(a3 + 16);
                v3350 = *(uint64_t **)(v3319 + 32);
                uint64_t v3351 = *v3350;
                v3352 = (void *)v3350[1];
                uint64_t v3353 = *((void *)v3349 + 104);
                if (v3353) {
                  __int16 v3354 = *(_WORD *)(v3353 + 8);
                }
                else {
                  __int16 v3354 = 0;
                }
                v3355 = sub_1CD7F3564(v3349, (const char *)0xC9, (uint64_t)&v3551, (llvm *)v3554, *((uint64_t *)&v3554 + 1), v3351, v3352, v3354);
LABEL_3552:
                unint64_t v3507 = v3496 & 0xFFFFFFFF00000000 | v3356;
                uint64_t v3363 = *(void *)(a3 + 16);
                uint64_t v3364 = *(void *)(v3363 + 832);
                if (v3364) {
                  LOWORD(v3364) = *(_WORD *)(v3364 + 8);
                }
                v3366 = sub_1CCFDED5C(v3363, 146, (const llvm::APInt *)&v3551, v3449, 0, (uint64_t)v3346, v3348, v3357, (uint64_t)v3355, v3507, v3364);
                v3367 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v3368 = *((void *)v3367 + 104);
                if (v3368) {
                  __int16 v3369 = *(_WORD *)(v3368 + 8);
                }
                else {
                  __int16 v3369 = 0;
                }
                char v3337 = 0;
                *(void *)&long long v3553 = sub_1CD7F3564(v3367, (const char *)0xD8, (uint64_t)&v3551, v1999, v1998, (uint64_t)v3366, v3365, v3369);
                *((void *)&v3553 + 1) = v3370;
LABEL_3508:
                for (uint64_t j = 0; j != -8; j -= 4)
                {
                  v3339 = &v3555[j];
                  if (*(_DWORD *)((char *)&v3560 + j * 8) >= 0x41u)
                  {
                    v3340 = v3339[6];
                    if (v3340) {
                      MEMORY[0x1D25D9CB0](v3340, 0x1000C8000313F17);
                    }
                  }
                  if (*((_DWORD *)v3339 + 10) >= 0x41u)
                  {
                    v3341 = v3339[4];
                    if (v3341) {
                      MEMORY[0x1D25D9CB0](v3341, 0x1000C8000313F17);
                    }
                  }
                }
                if (v3337) {
                  goto LABEL_2037;
                }
                goto LABEL_2038;
              }
            }
          }
        }
        char v3337 = 1;
        goto LABEL_3508;
      case 0xAD:
        *(void *)&long long v3553 = 0;
        DWORD2(v3553) = 0;
        if ((sub_1CD3DCE78((uint64_t)&v3553, a2, a3, a4, a5, a6, a7, a8) & 1) == 0) {
          goto LABEL_2037;
        }
        goto LABEL_2038;
      case 0xAF:
        uint64_t v242 = *(uint64_t **)(a2 + 32);
        uint64_t v241 = *(void *)(a2 + 40);
        uint64_t v244 = *(llvm **)v241;
        uint64_t v243 = *(void *)(v241 + 8);
        uint64_t v245 = *v242;
        int v246 = *((_DWORD *)v242 + 2);
        uint64_t v247 = v242[5];
        uint64_t v248 = v242[6];
        int v249 = *(unsigned __int16 *)(v247 + 24);
        if (v249 == 35 || v249 == 11) {
          uint64_t v251 = v242[5];
        }
        else {
          uint64_t v251 = 0;
        }
        if (v244 == 4)
        {
          if (!v251) {
            goto LABEL_2037;
          }
        }
        else
        {
          if (v244 == 6)
          {
            if (v251 && *(_DWORD *)(a3 + 8))
            {
              uint64_t v252 = *(void *)(v251 + 80);
              uint64_t v253 = (void *)(v252 + 24);
              if (*(_DWORD *)(v252 + 32) >= 0x41u) {
                uint64_t v253 = (void *)*v253;
              }
              if (*v253 >= 0x20uLL)
              {
                uint64_t v37 = (uint64_t)sub_1CB9E53D4(a2, 0, *(llvm::APFloatBase **)(a3 + 16));
                goto LABEL_20;
              }
            }
            goto LABEL_2037;
          }
          if (v244 != 5 || v251 == 0) {
            goto LABEL_2037;
          }
        }
        uint64_t v589 = *(void *)(v245 + 48);
        if (!v589) {
          goto LABEL_2037;
        }
        int v590 = 1;
        do
        {
          if (*(_DWORD *)(v589 + 8) == v246)
          {
            if (!v590) {
              goto LABEL_2037;
            }
            --v590;
          }
          uint64_t v589 = *(void *)(v589 + 32);
        }
        while (v589);
        if (v590 || *(_WORD *)(v245 + 24) != 56) {
          goto LABEL_2037;
        }
        uint64_t v591 = *(uint64_t **)(v245 + 32);
        uint64_t v592 = *v591;
        if (*(_WORD *)(*v591 + 24) == 58)
        {
          int v593 = *(unsigned __int16 *)(*(void *)(*(void *)(v592 + 32) + 40) + 24);
          if (v593 != 35 && v593 != 11) {
            goto LABEL_2037;
          }
        }
        uint64_t v595 = v591[5];
        if (*(_WORD *)(v595 + 24) == 58)
        {
          int v596 = *(unsigned __int16 *)(*(void *)(*(void *)(v595 + 32) + 40) + 24);
          if (v596 != 35 && v596 != 11) {
            goto LABEL_2037;
          }
        }
        uint64_t v598 = *(void *)(a2 + 48);
        if (!v598) {
          goto LABEL_2037;
        }
        while (1)
        {
          uint64_t v599 = *(void *)(v598 + 16);
          if ((*(_WORD *)(v599 + 24) & 0xFFFE) != 0x38) {
            break;
          }
          uint64_t v600 = 0;
          int v601 = 0;
          int v602 = 0;
          uint64_t v603 = *(void *)(v599 + 32);
          char v604 = 1;
          do
          {
            char v605 = v604;
            uint64_t v606 = *(void *)(v603 + 40 * v600);
            int v607 = *(unsigned __int16 *)(v606 + 24);
            if (v607 == 175)
            {
              uint64_t v610 = *(void *)(*(void *)(v606 + 32) + 40);
              int v611 = *(unsigned __int16 *)(v610 + 24);
              if (v611 == 35 || v611 == 11)
              {
                uint64_t v613 = *(void *)(v610 + 80);
                uint64_t v614 = (void *)(v613 + 24);
                if (*(_DWORD *)(v613 + 32) >= 0x41u) {
                  uint64_t v614 = (void *)*v614;
                }
                if (*(_DWORD *)v614 > 4u) {
                  ++v601;
                }
              }
            }
            else if (v607 == 58)
            {
              int v608 = *(unsigned __int16 *)(*(void *)(*(void *)(v606 + 32) + 40) + 24);
              if (v608 == 35 || v608 == 11) {
                ++v601;
              }
              else {
                ++v602;
              }
            }
            char v604 = 0;
            uint64_t v600 = 1;
          }
          while ((v605 & 1) != 0);
          if ((v601 + v602) >= 2) {
            break;
          }
          uint64_t v598 = *(void *)(v598 + 32);
          if (!v598) {
            goto LABEL_2037;
          }
        }
        uint64_t v1693 = *(void *)(v251 + 80);
        if (*(_DWORD *)(v1693 + 32) > 0x40u)
        {
          unint64_t v1694 = **(void **)(v1693 + 24);
          if (v1694 >= 5) {
            goto LABEL_1934;
          }
        }
        else
        {
          unint64_t v1694 = *(void *)(v1693 + 24);
          if (v1694 > 4)
          {
LABEL_1934:
            v1696 = sub_1CD7EBF14(*(void *)(a3 + 16), v1694 - 4, (const llvm::APInt *)&v3551, v244, v243, 0, 0);
            unint64_t v1698 = v248 & 0xFFFFFFFF00000000 | v1697;
            uint64_t v1699 = *(void *)(a3 + 16);
            v1700 = *(uint64_t **)(v245 + 32);
            uint64_t v1701 = *v1700;
            uint64_t v1702 = v1700[1];
            uint64_t v1703 = *(void *)(v1699 + 832);
            if (v1703) {
              LOWORD(v1703) = *(_WORD *)(v1703 + 8);
            }
            v1705 = sub_1CCFDED5C(v1699, 175, (const llvm::APInt *)&v3551, v244, v243, v1701, v1702, v1695, (uint64_t)v1696, v1698, v1703);
            uint64_t v1707 = v1706;
            uint64_t v1708 = *(void *)(a3 + 16);
            uint64_t v1709 = *(void *)(v245 + 32);
            uint64_t v1710 = *(void *)(v1709 + 40);
            uint64_t v1711 = *(void *)(v1709 + 48);
            uint64_t v1712 = *(void *)(v1708 + 832);
            if (v1712) {
              LOWORD(v1712) = *(_WORD *)(v1712 + 8);
            }
            v1713 = sub_1CCFDED5C(v1708, 175, (const llvm::APInt *)&v3551, v244, v243, v1710, v1711, v1704, (uint64_t)v1696, v1698, v1712);
            uint64_t v1716 = *(void *)(a3 + 16);
            uint64_t v1717 = *(void *)(v1716 + 832);
            if (v1717) {
              LOWORD(v1717) = *(_WORD *)(v1717 + 8);
            }
            v956 = sub_1CCFDED5C(v1716, 56, (const llvm::APInt *)&v3551, v244, v243, (uint64_t)v1705, v1707, v1715, (uint64_t)v1713, v1714, v1717);
            uint64_t v957 = v1718;
            uint64_t v1719 = *(void *)(a3 + 16);
            v1720 = sub_1CD7EBF14(v1719, 4, (const llvm::APInt *)&v3551, v244, v243, 0, 0);
            uint64_t v1722 = *(void *)(v1719 + 832);
            if (v1722) {
              LOWORD(v1722) = *(_WORD *)(v1722 + 8);
            }
            uint64_t v3403 = v1721;
            __int16 v3405 = v1722;
            uint64_t v3402 = (uint64_t)v1720;
            uint64_t v208 = v1719;
            uint64_t v215 = 175;
LABEL_2193:
            uint64_t v216 = (uint64_t)v244;
            uint64_t v744 = v243;
            goto LABEL_2194;
          }
        }
        uint64_t v1917 = *(void *)(a3 + 16);
        uint64_t v1918 = *(void *)(v1917 + 832);
        if (v1918) {
          LOWORD(v1918) = *(_WORD *)(v1918 + 8);
        }
        v956 = sub_1CCFDED5C(v1917, 175, (const llvm::APInt *)&v3551, v244, v243, v592, v591[1], a8, v247, v248, v1918);
        uint64_t v957 = v1920;
        uint64_t v1921 = *(void *)(a3 + 16);
        uint64_t v1922 = *(void *)(v245 + 32);
        uint64_t v1923 = *(void *)(v1922 + 40);
        uint64_t v1924 = *(void *)(v1922 + 48);
        uint64_t v1925 = *(void *)(v1921 + 832);
        if (v1925) {
          LOWORD(v1925) = *(_WORD *)(v1925 + 8);
        }
        v1926 = sub_1CCFDED5C(v1921, 175, (const llvm::APInt *)&v3551, v244, v243, v1923, v1924, v1919, v247, v248, v1925);
        uint64_t v1928 = *(void *)(*(void *)(a3 + 16) + 832);
        if (v1928) {
          LOWORD(v1928) = *(_WORD *)(v1928 + 8);
        }
        uint64_t v3403 = v1927;
        __int16 v3405 = v1928;
        uint64_t v3402 = (uint64_t)v1926;
        uint64_t v208 = *(void *)(a3 + 16);
        uint64_t v215 = 56;
        goto LABEL_2193;
      case 0xB0:
        uint64_t v229 = **(unsigned __int8 **)(a2 + 40);
        if (v229 == 5)
        {
          uint64_t v230 = *(void *)(a2 + 32);
          uint64_t v231 = *(void *)(v230 + 40);
          int v232 = *(unsigned __int16 *)(v231 + 24);
          if (v232 != 35 && v232 != 11) {
            goto LABEL_2037;
          }
          uint64_t v234 = *(void *)(v231 + 80);
          uint64_t v235 = (void *)(v234 + 24);
          if (*(_DWORD *)(v234 + 32) >= 0x41u) {
            uint64_t v235 = (void *)*v235;
          }
          if (*v235 != 16 || *(_DWORD *)(a3 + 8) < 2) {
            goto LABEL_2037;
          }
          uint64_t v237 = *(llvm::APFloatBase **)(a3 + 16);
          char v238 = *(void **)(a2 + 64);
          v3555[0] = v238;
          if (v238)
          {
            llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v238, 2);
            int v11 = *(_DWORD *)(a2 + 60);
            uint64_t v230 = *(void *)(a2 + 32);
          }
          LODWORD(v3555[1]) = v11;
          uint64_t v239 = *((void *)v237 + 104);
          if (v239) {
            __int16 v240 = *(_WORD *)(v239 + 8);
          }
          else {
            __int16 v240 = 0;
          }
          v1670 = sub_1CD7F3564(v237, (const char *)0xD8, (uint64_t)v3555, (llvm *)0x26, 0, *(void *)v230, *(void **)(v230 + 8), v240);
          uint64_t v1672 = v1671;
          if (v3555[0])
          {
            int v1673 = *(unsigned __int8 *)v3555[0];
            if ((v1673 - 4) > 0x1E)
            {
              if ((v1673 - 3) >= 0xFFFFFFFE) {
                v2087 = v3555[0];
              }
              else {
                v2087 = 0;
              }
              if ((v1673 - 3) < 0xFFFFFFFE)
              {
                if (v1673 == 3) {
                  *((void *)v3555[0] + 1) = 0;
                }
                goto LABEL_1911;
              }
              unint64_t v2088 = (unint64_t)v2087 + 8;
            }
            else
            {
              if ((*((unsigned char *)v3555[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3555[0] + 3)) {
                goto LABEL_1911;
              }
              uint64_t v3385 = *((void *)v3555[0] + 2);
              if ((v3385 & 4) == 0) {
                goto LABEL_1911;
              }
              unint64_t v2088 = v3385 & 0xFFFFFFFFFFFFFFF8;
              if (!v2088) {
                goto LABEL_1911;
              }
            }
            v3569[0] = v3555;
            sub_1CC5FA668(v2088 + 16, v3569);
          }
LABEL_1911:
          uint64_t v1674 = *(void *)(a3 + 16);
          v1675 = *(void **)(a2 + 64);
          v3555[0] = v1675;
          uint64_t v1676 = v1674;
          if (v1675)
          {
            llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1675, 2);
            uint64_t v1676 = *(void *)(a3 + 16);
          }
          LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
          v1677 = sub_1CD7EBF14(v1676, 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
          uint64_t v1680 = *(void *)(v1674 + 832);
          if (v1680) {
            LOWORD(v1680) = *(_WORD *)(v1680 + 8);
          }
          int v853 = sub_1CCFDED5C(v1674, 148, (const llvm::APInt *)v3555, (llvm *)4, 0, (uint64_t)v1670, v1672, v1679, (uint64_t)v1677, v1678, v1680);
          goto LABEL_971;
        }
        if (v229 != 6 || *(_DWORD *)(a3 + 8) == 0) {
          goto LABEL_2037;
        }
        uint64_t v554 = *(void *)(*(void *)(a2 + 32) + 40);
        int v555 = *(unsigned __int16 *)(v554 + 24);
        if (v555 != 35 && v555 != 11) {
          goto LABEL_2037;
        }
        uint64_t v557 = *(void *)(v554 + 80);
        if (*(_DWORD *)(v557 + 32) > 0x40u)
        {
          unint64_t v558 = **(void **)(v557 + 24);
          if (v558 < 0x20) {
            goto LABEL_2037;
          }
        }
        else
        {
          unint64_t v558 = *(void *)(v557 + 24);
          if (v558 <= 0x1F) {
            goto LABEL_2037;
          }
        }
        unint64_t v912 = sub_1CD7EBF14(*(void *)(a3 + 16), v558 - 32, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
        uint64_t v914 = v913;
        __int16 v915 = 0;
        uint64_t v916 = *(llvm::APFloatBase **)(a3 + 16);
        v917 = *(uint64_t **)(a2 + 32);
        uint64_t v918 = *v917;
        uint64_t v919 = (void *)v917[1];
        uint64_t v920 = *((void *)v916 + 104);
        if (v920) {
          __int16 v915 = *(_WORD *)(v920 + 8);
        }
        uint64_t v921 = sub_1CD7F3564(v916, (const char *)0xD8, (uint64_t)&v3551, (llvm *)0x31, 0, v918, v919, v915);
        uint64_t v923 = v922;
        uint64_t v924 = *(void *)(a3 + 16);
        __int16 v925 = sub_1CD7EBF14(v924, 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
        uint64_t v928 = *(void *)(v924 + 832);
        if (v928) {
          LOWORD(v928) = *(_WORD *)(v928 + 8);
        }
        uint64_t v930 = sub_1CCFDED5C(v924, 148, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v921, v923, v927, (uint64_t)v925, v926, v928);
        uint64_t v932 = *(void *)(a3 + 16);
        uint64_t v933 = *(void *)(v932 + 832);
        if (v933) {
          LOWORD(v933) = *(_WORD *)(v933 + 8);
        }
        uint64_t v31 = (uint64_t)sub_1CCFDED5C(v932, 176, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v930, v929, v931, (uint64_t)v912, v914, v933);
        uint64_t v33 = v934;
        uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v935 = *((void *)v32 + 104);
        if (v935) {
          __int16 v35 = *(_WORD *)(v935 + 8);
        }
        else {
          __int16 v35 = 0;
        }
        uint64_t v563 = 198;
        goto LABEL_2283;
      case 0xB1:
        uint64_t v217 = **(unsigned __int8 **)(a2 + 40);
        if (v217 == 5)
        {
          uint64_t v218 = *(void *)(a2 + 32);
          uint64_t v219 = *(void *)(v218 + 40);
          int v220 = *(unsigned __int16 *)(v219 + 24);
          if (v220 == 35 || v220 == 11)
          {
            uint64_t v222 = *(void *)(v219 + 80);
            unint64_t v223 = (void *)(v222 + 24);
            if (*(_DWORD *)(v222 + 32) >= 0x41u) {
              unint64_t v223 = (void *)*v223;
            }
            BOOL v224 = *v223 != 16 || *(_DWORD *)(a3 + 8) < 2;
            if (!v224)
            {
              int v225 = *(llvm::APFloatBase **)(a3 + 16);
              int v226 = *(void **)(a2 + 64);
              v3555[0] = v226;
              if (v226)
              {
                llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v226, 2);
                int v11 = *(_DWORD *)(a2 + 60);
                uint64_t v218 = *(void *)(a2 + 32);
              }
              LODWORD(v3555[1]) = v11;
              uint64_t v227 = *((void *)v225 + 104);
              if (v227) {
                __int16 v228 = *(_WORD *)(v227 + 8);
              }
              else {
                __int16 v228 = 0;
              }
              v1654 = sub_1CD7F3564(v225, (const char *)0xD8, (uint64_t)v3555, (llvm *)0x26, 0, *(void *)v218, *(void **)(v218 + 8), v228);
              uint64_t v1656 = v1655;
              if (v3555[0])
              {
                int v1657 = *(unsigned __int8 *)v3555[0];
                if ((v1657 - 4) > 0x1E)
                {
                  if ((v1657 - 3) >= 0xFFFFFFFE) {
                    v2085 = v3555[0];
                  }
                  else {
                    v2085 = 0;
                  }
                  if ((v1657 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v2086 = (unint64_t)v2085 + 8;
LABEL_2397:
                    v3569[0] = v3555;
                    sub_1CC5FA668(v2086 + 16, v3569);
                    goto LABEL_1894;
                  }
                  if (v1657 == 3) {
                    *((void *)v3555[0] + 1) = 0;
                  }
                }
                else if ((*((unsigned char *)v3555[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3555[0] + 3))
                {
                  uint64_t v3384 = *((void *)v3555[0] + 2);
                  if ((v3384 & 4) != 0)
                  {
                    unint64_t v2086 = v3384 & 0xFFFFFFFFFFFFFFF8;
                    if (v2086) {
                      goto LABEL_2397;
                    }
                  }
                }
              }
LABEL_1894:
              uint64_t v1658 = *(void *)(a3 + 16);
              v1659 = *(void **)(a2 + 64);
              v3555[0] = v1659;
              uint64_t v1660 = v1658;
              if (v1659)
              {
                llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1659, 2);
                uint64_t v1660 = *(void *)(a3 + 16);
              }
              LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
              v1661 = sub_1CD7EBF14(v1660, 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
              uint64_t v1664 = *(void *)(v1658 + 832);
              if (v1664) {
                LOWORD(v1664) = *(_WORD *)(v1664 + 8);
              }
              uint64_t v424 = sub_1CCFDED5C(v1658, 148, (const llvm::APInt *)v3555, (llvm *)4, 0, (uint64_t)v1654, v1656, v1663, (uint64_t)v1661, v1662, v1664);
              uint64_t v426 = v1665;
              if (!v3555[0]) {
                goto LABEL_1902;
              }
              int v1666 = *(unsigned __int8 *)v3555[0];
              if ((v1666 - 4) > 0x1E)
              {
                if ((v1666 - 3) >= 0xFFFFFFFE) {
                  v2029 = v3555[0];
                }
                else {
                  v2029 = 0;
                }
                if ((v1666 - 3) < 0xFFFFFFFE)
                {
                  if (v1666 == 3) {
                    *((void *)v3555[0] + 1) = 0;
                  }
                  goto LABEL_1902;
                }
                unint64_t v2030 = (unint64_t)v2029 + 8;
              }
              else
              {
                if ((*((unsigned char *)v3555[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3555[0] + 3)) {
                  goto LABEL_1902;
                }
                uint64_t v3383 = *((void *)v3555[0] + 2);
                if ((v3383 & 4) == 0) {
                  goto LABEL_1902;
                }
                unint64_t v2030 = v3383 & 0xFFFFFFFFFFFFFFF8;
                if (!v2030) {
                  goto LABEL_1902;
                }
              }
              v3569[0] = v3555;
              sub_1CC5FA668(v2030 + 16, v3569);
LABEL_1902:
              v1667 = *(llvm::APFloatBase **)(a3 + 16);
              v1668 = *(void **)(a2 + 64);
              v3555[0] = v1668;
              if (v1668) {
                llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1668, 2);
              }
              LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
              uint64_t v1669 = *((void *)v1667 + 104);
              if (v1669) {
                __int16 v324 = *(_WORD *)(v1669 + 8);
              }
              else {
                __int16 v324 = 0;
              }
              uint64_t v683 = v1667;
              uint64_t v684 = 199;
              goto LABEL_981;
            }
          }
LABEL_1003:
          uint64_t v871 = *(void *)v218;
          if (*(_WORD *)(*(void *)v218 + 24) != 192) {
            goto LABEL_2037;
          }
          uint64_t v872 = *(void *)(v218 + 40);
          int v873 = *(unsigned __int16 *)(v872 + 24);
          if (v873 != 35 && v873 != 11) {
            goto LABEL_2037;
          }
          uint64_t v875 = *(void *)(v871 + 32);
          int v876 = *(unsigned __int16 *)(*(void *)(v875 + 80) + 24);
          BOOL v877 = v876 == 35 || v876 == 11;
          uint64_t v878 = v877 ? *(void *)(v875 + 80) : 0;
          uint64_t v879 = *(void *)(v875 + 120);
          int v880 = *(unsigned __int16 *)(v879 + 24);
          BOOL v881 = v880 == 35 || v880 == 11;
          if (!v881 || v878 == 0) {
            goto LABEL_2037;
          }
          uint64_t v883 = *(void *)(v872 + 80);
          uint64_t v884 = (void *)(v883 + 24);
          if (*(_DWORD *)(v883 + 32) >= 0x41u) {
            uint64_t v884 = (void *)*v884;
          }
          uint64_t v885 = (void *)*v884;
          char v886 = *v884;
          uint64_t v887 = *(void *)(v878 + 80);
          unsigned int v888 = *(_DWORD *)(v887 + 32);
          LODWORD(v3555[1]) = v888;
          if (v888 > 0x40) {
            operator new[]();
          }
          if (v888 == v885) {
            v3555[0] = 0;
          }
          else {
            v3555[0] = (void *)(*(void *)(v887 + 24) >> v886);
          }
          uint64_t v889 = *(void *)(v879 + 80);
          unsigned int v890 = *(_DWORD *)(v889 + 32);
          LODWORD(v3569[1]) = v890;
          if (v890 > 0x40) {
            operator new[]();
          }
          if (v890 == v885) {
            v3569[0] = 0;
          }
          else {
            v3569[0] = (void *)(*(void *)(v889 + 24) >> v886);
          }
          uint64_t v891 = *(void *)(a2 + 40);
          uint64_t v892 = *(llvm **)v891;
          uint64_t v893 = *(void *)(v891 + 8);
          uint64_t v894 = *(void *)(a3 + 16);
          __int16 v895 = *(unsigned __int8 **)(v878 + 64);
          *(void *)&v3584[0] = v895;
          if (v895) {
            llvm::MetadataTracking::track((uint64_t)v3584, v895, 2);
          }
          DWORD2(v3584[0]) = *(_DWORD *)(v878 + 60);
          uint64_t v896 = sub_1CD7EBB14(v894, (llvm::LLVMContext *)v3555, (const llvm::APInt *)v3584, (uint64_t)v892, v893, 0, 0);
          int v898 = v897;
          if (*(void *)&v3584[0])
          {
            int v899 = **(unsigned char **)&v3584[0];
            if ((v899 - 4) > 0x1E)
            {
              if ((v899 - 3) >= 0xFFFFFFFE) {
                uint64_t v2178 = *(void *)&v3584[0];
              }
              else {
                uint64_t v2178 = 0;
              }
              if ((v899 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v2179 = v2178 + 8;
LABEL_2539:
                *(void *)&long long v3554 = v3584;
                sub_1CC5FA668(v2179 + 16, &v3554);
                goto LABEL_1036;
              }
              if (v899 == 3) {
                *(void *)(*(void *)&v3584[0] + 8) = 0;
              }
            }
            else if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v3584[0] + 12))
            {
              uint64_t v3389 = *(void *)(*(void *)&v3584[0] + 16);
              if ((v3389 & 4) != 0)
              {
                unint64_t v2179 = v3389 & 0xFFFFFFFFFFFFFFF8;
                if (v2179) {
                  goto LABEL_2539;
                }
              }
            }
          }
LABEL_1036:
          uint64_t v900 = *(void *)(a3 + 16);
          unsigned int v901 = *(unsigned __int8 **)(v879 + 64);
          *(void *)&v3584[0] = v901;
          if (v901) {
            llvm::MetadataTracking::track((uint64_t)v3584, v901, 2);
          }
          DWORD2(v3584[0]) = *(_DWORD *)(v879 + 60);
          uint64_t v903 = sub_1CD7EBB14(v900, (llvm::LLVMContext *)v3569, (const llvm::APInt *)v3584, (uint64_t)v892, v893, 0, 0);
          int v905 = v904;
          if (*(void *)&v3584[0])
          {
            int v906 = **(unsigned char **)&v3584[0];
            if ((v906 - 4) > 0x1E)
            {
              if ((v906 - 3) >= 0xFFFFFFFE) {
                uint64_t v2180 = *(void *)&v3584[0];
              }
              else {
                uint64_t v2180 = 0;
              }
              if ((v906 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v2181 = v2180 + 8;
LABEL_2545:
                *(void *)&long long v3554 = v3584;
                sub_1CC5FA668(v2181 + 16, &v3554);
                goto LABEL_1042;
              }
              if (v906 == 3) {
                *(void *)(*(void *)&v3584[0] + 8) = 0;
              }
            }
            else if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v3584[0] + 12))
            {
              uint64_t v3390 = *(void *)(*(void *)&v3584[0] + 16);
              if ((v3390 & 4) != 0)
              {
                unint64_t v2181 = v3390 & 0xFFFFFFFFFFFFFFF8;
                if (v2181) {
                  goto LABEL_2545;
                }
              }
            }
          }
LABEL_1042:
          uint64_t v907 = *(void **)(a3 + 16);
          uint64_t v908 = *(unsigned __int8 **)(v871 + 64);
          *(void *)&v3584[0] = v908;
          if (v908) {
            llvm::MetadataTracking::track((uint64_t)v3584, v908, 2);
          }
          DWORD2(v3584[0]) = *(_DWORD *)(v871 + 60);
          uint64_t v909 = *(uint64_t **)(v871 + 32);
          *(void *)&long long v3553 = sub_1CD7F6564(v907, (const char *)0xC0, (const llvm::APInt *)v3584, v892, v893, *v909, v909[1], v902, v909[5], v909[6], v896, v898, v903, v905, v909[20], v909[21]);
          *((void *)&v3553 + 1) = v910;
          if (!*(void *)&v3584[0]) {
            goto LABEL_1048;
          }
          int v911 = **(unsigned char **)&v3584[0];
          if ((v911 - 4) > 0x1E)
          {
            if ((v911 - 3) >= 0xFFFFFFFE) {
              uint64_t v2166 = *(void *)&v3584[0];
            }
            else {
              uint64_t v2166 = 0;
            }
            if ((v911 - 3) < 0xFFFFFFFE)
            {
              if (v911 == 3) {
                *(void *)(*(void *)&v3584[0] + 8) = 0;
              }
              goto LABEL_1048;
            }
            unint64_t v2167 = v2166 + 8;
          }
          else if ((*(unsigned char *)(*(void *)&v3584[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v3584[0] + 12) {
                 || (uint64_t v3388 = *(void *)(*(void *)&v3584[0] + 16), (v3388 & 4) == 0)
          }
                 || (unint64_t v2167 = v3388 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_1048:
            if (LODWORD(v3569[1]) >= 0x41 && v3569[0]) {
              MEMORY[0x1D25D9CB0](v3569[0], 0x1000C8000313F17);
            }
LABEL_252:
            if (LODWORD(v3555[1]) < 0x41) {
              goto LABEL_2038;
            }
            uint64_t v263 = (uint64_t *)v3555[0];
            if (!v3555[0]) {
              goto LABEL_2038;
            }
LABEL_254:
            MEMORY[0x1D25D9CB0](v263, 0x1000C8000313F17);
            goto LABEL_2038;
          }
          *(void *)&long long v3554 = v3584;
          sub_1CC5FA668(v2167 + 16, &v3554);
          goto LABEL_1048;
        }
        uint64_t v218 = *(void *)(a2 + 32);
        if (v217 != 6 || *(_DWORD *)(a3 + 8) == 0) {
          goto LABEL_1003;
        }
        uint64_t v524 = *(void *)(v218 + 40);
        int v525 = *(unsigned __int16 *)(v524 + 24);
        if (v525 != 35 && v525 != 11) {
          goto LABEL_1003;
        }
        uint64_t v527 = *(void *)(v524 + 80);
        if (*(_DWORD *)(v527 + 32) > 0x40u)
        {
          unint64_t v528 = **(void **)(v527 + 24);
          if (v528 >= 0x20)
          {
LABEL_540:
            uint64_t v529 = sub_1CD7EBF14(*(void *)(a3 + 16), v528 - 32, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            uint64_t v531 = v530;
            __int16 v532 = 0;
            uint64_t v533 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v534 = *(uint64_t **)(a2 + 32);
            uint64_t v535 = *v534;
            uint64_t v536 = (void *)v534[1];
            uint64_t v537 = *((void *)v533 + 104);
            if (v537) {
              __int16 v532 = *(_WORD *)(v537 + 8);
            }
            uint64_t v538 = sub_1CD7F3564(v533, (const char *)0xD8, (uint64_t)&v3551, (llvm *)0x31, 0, v535, v536, v532);
            uint64_t v540 = v539;
            uint64_t v541 = *(void *)(a3 + 16);
            int v542 = sub_1CD7EBF14(v541, 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
            uint64_t v545 = *(void *)(v541 + 832);
            if (v545) {
              LOWORD(v545) = *(_WORD *)(v545 + 8);
            }
            int v547 = sub_1CCFDED5C(v541, 148, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v538, v540, v544, (uint64_t)v542, v543, v545);
            uint64_t v549 = *(void *)(a3 + 16);
            uint64_t v550 = *(void *)(v549 + 832);
            if (v550) {
              LOWORD(v550) = *(_WORD *)(v550 + 8);
            }
            uint64_t v31 = (uint64_t)sub_1CCFDED5C(v549, 177, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v547, v546, v548, (uint64_t)v529, v531, v550);
            uint64_t v33 = v551;
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v552 = *((void *)v32 + 104);
            if (v552) {
              __int16 v35 = *(_WORD *)(v552 + 8);
            }
            else {
              __int16 v35 = 0;
            }
            uint64_t v563 = 199;
LABEL_2283:
            uint64_t v564 = 6;
LABEL_1396:
            uint64_t v565 = 0;
            goto LABEL_2058;
          }
        }
        else
        {
          unint64_t v528 = *(void *)(v527 + 24);
          if (v528 > 0x1F) {
            goto LABEL_540;
          }
        }
        if (*(_WORD *)(*(void *)v218 + 24) == 199)
        {
          uint64_t v37 = (uint64_t)sub_1CB9E4F8C(a2, 0, *(llvm::APFloatBase **)(a3 + 16));
          goto LABEL_20;
        }
        goto LABEL_1003;
      case 0xB3:
        if (**(unsigned char **)(a2 + 40) != 5) {
          goto LABEL_2037;
        }
        int v254 = *(void **)(a2 + 32);
        uint64_t v255 = *v254;
        int v256 = *(unsigned __int16 *)(*v254 + 24);
        if (v256 != 35 && v256 != 11) {
          goto LABEL_2037;
        }
        uint64_t v258 = v254[5];
        int v259 = *(unsigned __int16 *)(v258 + 24);
        if (v259 != 35 && v259 != 11) {
          goto LABEL_2037;
        }
        uint64_t v261 = *(void *)(a3 + 16);
        llvm::APInt::rotr((llvm::APInt *)(*(void *)(v255 + 80) + 24), (const llvm::APInt *)(*(void *)(v258 + 80) + 24), (uint64_t)v3555);
        *(void *)&long long v3553 = sub_1CD7EBB14(v261, (llvm::LLVMContext *)v3555, (const llvm::APInt *)&v3551, 5, 0, 0, 0);
        *((void *)&v3553 + 1) = v262;
        goto LABEL_252;
      case 0xBF:
        uint64_t v1014 = *(void *)(a2 + 40);
        int v1015 = *(llvm **)v1014;
        uint64_t v1016 = *(void *)(v1014 + 8);
        uint64_t v1017 = *(void **)(a2 + 64);
        v3555[0] = v1017;
        if (v1017)
        {
          llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1017, 2);
          int v11 = *(_DWORD *)(a2 + 60);
        }
        LODWORD(v3555[1]) = v11;
        unint64_t v1018 = *(uint64_t **)(a2 + 32);
        int v859 = sub_1CD3DA974(v1015, v1016, (BOOL)v3555, *v1018, v1018[1], v1018[5], v1018[6], a8, v1018[10], v1018[11], (uint64_t *)a3);
        goto LABEL_984;
      case 0xC0:
LABEL_136:
        int v152 = *(uint64_t **)(a2 + 32);
        uint64_t v153 = v152[20];
        unsigned int v154 = *(_DWORD *)(v153 + 76);
        uint64_t v155 = *v152;
        uint64_t v156 = v152[1];
        uint64_t v157 = v152[5];
        uint64_t v158 = v152[10];
        uint64_t v159 = (void *)v152[11];
        uint64_t v160 = v152[15];
        unsigned int v161 = *(unsigned __int16 *)(v153 + 72);
        if ((v161 & 1) == 0) {
          unsigned int v161 = *(unsigned __int16 *)(a2 + 72);
        }
        uint64_t v162 = v152[6];
        long long v163 = (void *)v152[16];
        long long v164 = *(llvm::APFloatBase **)(a3 + 16);
        int v165 = *(_WORD *)(*(void *)v164 + 1020) & 1 | ((v161 & 0x10) != 0);
        if ((~v161 & 0x3C0) != 0) {
          int v166 = 0;
        }
        else {
          int v166 = (v161 >> 10) & 1;
        }
        int v167 = *(_WORD *)(*(void *)v164 + 1020) & 1 | v166;
        if (v12 != 192) {
          int v167 = *(_WORD *)(*(void *)v164 + 1020) & 1;
        }
        if (v12 != 428) {
          int v165 = v167;
        }
        if (!v165) {
          goto LABEL_963;
        }
        if (v154 == 8)
        {
          *(void *)&long long v3553 = v160;
          *((void *)&v3553 + 1) = v163;
          goto LABEL_2038;
        }
        if (v154 == 7)
        {
          *(void *)&long long v3553 = v158;
          *((void *)&v3553 + 1) = v159;
          goto LABEL_2038;
        }
        int v567 = *(unsigned __int16 *)(v157 + 24);
        if (v567 != 36 && v567 != 12) {
          goto LABEL_963;
        }
        uint64_t v569 = *(void *)(v157 + 80);
        uint64_t v570 = *(_UNKNOWN **)(v569 + 32) == &unk_1CFB2E344 ? *(void *)(v569 + 40) : v569 + 24;
        if ((*(unsigned char *)(v570 + 28) & 7) != 3) {
          goto LABEL_963;
        }
        uint64_t v845 = *(void *)(v155 + 48);
        if (!v845) {
          goto LABEL_963;
        }
        int v846 = 1;
        do
        {
          if (*(_DWORD *)(v845 + 8) == v156)
          {
            if (!v846) {
              goto LABEL_963;
            }
            --v846;
          }
          uint64_t v845 = *(void *)(v845 + 32);
        }
        while (v845);
        if (v846) {
          goto LABEL_963;
        }
        int v847 = *(unsigned __int16 *)(v155 + 24);
        if (v847 == 141)
        {
          uint64_t v2510 = v158;
          uint64_t v2511 = *(void *)(v155 + 40) + 16 * v156;
          uint64_t v2512 = v155;
          v3504 = sub_1CCFDED5C((uint64_t)v164, 98, (const llvm::APInt *)&v3551, *(llvm **)v2511, *(void *)(v2511 + 8), **(void **)(v155 + 32), *(void *)(*(void *)(v155 + 32) + 8), a8, *(void *)(*(void *)(v155 + 32) + 40), *(void *)(*(void *)(v155 + 32) + 48), *(_WORD *)(v155 + 72));
          int v3484 = v2513;
          v2514 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2515 = *(void *)(v2512 + 32);
          uint64_t v2516 = *(void *)(v2515 + 80);
          v2517 = *(void **)(v2515 + 88);
          uint64_t v2518 = *(void *)(v2516 + 40) + 16 * *(unsigned int *)(v2515 + 88);
          uint64_t v2519 = *((void *)v2514 + 104);
          if (v2519) {
            __int16 v2520 = *(_WORD *)(v2519 + 8);
          }
          else {
            __int16 v2520 = 0;
          }
          v2809 = sub_1CD7F3564(v2514, (const char *)0xDE, (uint64_t)&v3551, *(llvm **)v2518, *(void *)(v2518 + 8), v2516, v2517, v2520);
          int v3456 = v2810;
          uint64_t v3469 = (uint64_t)v2809;
          v2811 = *(void **)(a3 + 16);
          v2812 = (const char *)*(unsigned __int16 *)(a2 + 24);
          uint64_t v2813 = *(void *)(v2510 + 40) + 16 * v159;
          v2814 = *(llvm **)v2813;
          uint64_t v2815 = *(void *)(v2813 + 8);
          uint64_t v3407 = sub_1CD7EE368(v2811, v154);
          v2807 = sub_1CD7F6564(v2811, v2812, (const llvm::APInt *)&v3551, v2814, v2815, (uint64_t)v3504, v3484, v2817, v3469, v3456, v2510, (int)v159, v160, (int)v163, v3407, v2816);
        }
        else
        {
          if (v847 != 96)
          {
LABEL_963:
            int v848 = *(unsigned __int16 *)(v158 + 24);
            if (v848 != *(unsigned __int16 *)(v160 + 24) || (v848 & 0xFFFE) != 0xDE) {
              goto LABEL_965;
            }
            uint64_t v3490 = v158;
            uint64_t v3473 = v155;
            char v980 = sub_1CD406BEC(a2);
            uint64_t v155 = v3473;
            uint64_t v158 = v3490;
            if ((v980 & 1) == 0)
            {
              uint64_t v981 = *(void *)(v3490 + 48);
              if (v981)
              {
                int v982 = 1;
                do
                {
                  if (*(_DWORD *)(v981 + 8) == v159)
                  {
                    if (!v982) {
                      goto LABEL_1117;
                    }
                    --v982;
                  }
                  uint64_t v981 = *(void *)(v981 + 32);
                }
                while (v981);
                if (!v982)
                {
                  uint64_t v983 = *(void *)(v160 + 48);
                  if (v983)
                  {
                    int v984 = 1;
                    do
                    {
                      if (*(_DWORD *)(v983 + 8) == v163)
                      {
                        if (!v984) {
                          goto LABEL_1117;
                        }
                        --v984;
                      }
                      uint64_t v983 = *(void *)(v983 + 32);
                    }
                    while (v983);
                    if (!v984)
                    {
LABEL_965:
                      *(void *)&long long v3553 = 0;
                      DWORD2(v3553) = 0;
                      uint64_t v849 = v155;
                      uint64_t v850 = v158;
                      if ((sub_1CB9D201C((uint64_t)&v3553, a2, v155, v156, v157, v162, v158, v159, v160, v163, v154, (uint64_t *)a3, 0) & 1) == 0&& (sub_1CB9D201C((uint64_t)&v3553, a2, v849, v156, v157,
                              v162,
                              v160,
                              v163,
                              v850,
                              v159,
                              v154,
                              (uint64_t *)a3,
                              1u) & 1) == 0)
                      {
                        goto LABEL_2037;
                      }
                      goto LABEL_2038;
                    }
                  }
                }
              }
            }
LABEL_1117:
            uint64_t v3459 = 16 * v159;
            uint64_t v985 = *(uint64_t **)(v3490 + 32);
            uint64_t v986 = *(void *)(v3490 + 40) + v3459;
            uint64_t v3436 = *(void *)(v986 + 8);
            v3447 = *(llvm **)v986;
            uint64_t v3425 = v985[1];
            uint64_t v3430 = *v985;
            uint64_t v987 = *(uint64_t **)(v160 + 32);
            uint64_t v988 = *v987;
            uint64_t v989 = v987[1];
            uint64_t v990 = sub_1CD7EE368(v164, v154);
            uint64_t v31 = (uint64_t)sub_1CD7F6564(v164, v12, (const llvm::APInt *)&v3551, v3447, v3436, v3473, v156, v992, v157, v162, v3430, v3425, v988, v989, v990, v991);
            uint64_t v33 = v993;
            *(_WORD *)(v31 + 72) = *(_WORD *)(a2 + 72);
            uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v563 = *(unsigned __int16 *)(v3490 + 24);
            __int16 v994 = (uint64_t *)(*(void *)(v3490 + 40) + v3459);
            uint64_t v564 = *v994;
            uint64_t v565 = (void *)v994[1];
            uint64_t v995 = *((void *)v32 + 104);
            if (v995) {
              __int16 v35 = *(_WORD *)(v995 + 8);
            }
            else {
              __int16 v35 = 0;
            }
LABEL_2058:
            uint64_t v37 = (uint64_t)sub_1CD7F3564(v32, (const char *)v563, (uint64_t)&v3551, (llvm *)v564, (uint64_t)v565, v31, v33, v35);
            goto LABEL_20;
          }
          uint64_t v2503 = v158;
          v2504 = *(uint64_t **)(v155 + 32);
          uint64_t v3503 = *v2504;
          uint64_t v3483 = v2504[1];
          uint64_t v2505 = v2504[5];
          v2506 = (void *)v2504[6];
          uint64_t v2507 = *(void *)(v2505 + 40) + 16 * *((unsigned int *)v2504 + 12);
          uint64_t v2508 = *((void *)v164 + 104);
          if (v2508) {
            __int16 v2509 = *(_WORD *)(v2508 + 8);
          }
          else {
            __int16 v2509 = 0;
          }
          v2798 = sub_1CD7F3564(v164, (const char *)0xDE, (uint64_t)&v3551, *(llvm **)v2507, *(void *)(v2507 + 8), v2505, v2506, v2509);
          int v3455 = v2799;
          uint64_t v3468 = (uint64_t)v2798;
          v2800 = *(void **)(a3 + 16);
          v2801 = (const char *)*(unsigned __int16 *)(a2 + 24);
          uint64_t v2802 = *(void *)(v2503 + 40) + 16 * v159;
          v2804 = *(llvm **)v2802;
          uint64_t v2803 = *(void *)(v2802 + 8);
          uint64_t v3406 = sub_1CD7EE368(v2800, v154);
          v2807 = sub_1CD7F6564(v2800, v2801, (const llvm::APInt *)&v3551, v2804, v2803, v3503, v3483, v2806, v3468, v3455, v2503, (int)v159, v160, (int)v163, v3406, v2805);
        }
        *(void *)&long long v3553 = v2807;
        *((void *)&v3553 + 1) = v2808;
        *((_WORD *)v2807 + 36) = *(_WORD *)(a2 + 72);
        goto LABEL_2038;
      case 0xC1:
        if (*(_DWORD *)(a3 + 8)) {
          goto LABEL_2037;
        }
        uint64_t v277 = *(void *)(a2 + 40);
        unsigned int v279 = *(void **)v277;
        uint64_t v278 = *(void *)(v277 + 8);
        v3569[0] = v279;
        v3569[1] = (void *)v278;
        if ((_BYTE)v279)
        {
          if (v279 - 15 >= 0x9C) {
            goto LABEL_2037;
          }
          char v280 = sub_1CB8C2FBC((unsigned __int8 *)v3569);
        }
        else
        {
          if ((*(_DWORD *)(v278 + 8) & 0xFE) != 0x12) {
            goto LABEL_2037;
          }
          char v280 = llvm::EVT::getEVT(*(llvm::EVT **)(v278 + 24), 0, a3);
        }
        if (v280 != 2) {
          goto LABEL_2037;
        }
        uint64_t v745 = *(uint64_t **)(a2 + 32);
        uint64_t v3446 = v745[6];
        uint64_t v3458 = v745[5];
        uint64_t v3489 = *v745;
        uint64_t v3472 = v745[1];
        uint64_t v746 = *(void *)(*v745 + 40) + 16 * v3472;
        uint64_t v748 = *(void **)v746;
        unint64_t v747 = *(llvm::EVT ***)(v746 + 8);
        v3555[0] = v748;
        v3555[1] = v747;
        if ((_BYTE)v748)
        {
          unsigned __int8 v750 = sub_1CB8C2FBC((unsigned __int8 *)v3555);
          unint64_t v753 = 0;
          uint64_t v752 = 0;
        }
        else
        {
          unint64_t v749 = llvm::EVT::getEVT(v747[3], 0, v281);
          unsigned __int8 v750 = v749;
          uint64_t v752 = v751;
          unint64_t v753 = v749 & 0xFFFFFFFFFFFFFF00;
        }
        v3555[0] = &v3556;
        v3555[1] = (void *)0x400000000;
        v1802 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&v3584[0] = v1802;
        if (v1802) {
          llvm::MetadataTracking::track((uint64_t)v3584, v1802, 2);
        }
        DWORD2(v3584[0]) = *(_DWORD *)(a2 + 60);
        unsigned int v1803 = sub_1CD3DB440((llvm::EVT *)v3569, (const char *)v1802);
        if (v1803)
        {
          uint64_t v1805 = 0;
          v1806 = (llvm *)(v753 | v750);
          uint64_t v3439 = v1803;
          do
          {
            uint64_t v1807 = *(void *)(a3 + 16);
            v1808 = sub_1CD7EBF14(v1807, v1805, (const llvm::APInt *)v3584, (llvm *)5, 0, 0, 0);
            __int16 v1811 = 0;
            uint64_t v1812 = *(void *)(v1807 + 832);
            if (v1812) {
              __int16 v1811 = *(_WORD *)(v1812 + 8);
            }
            v1813 = sub_1CCFDED5C(v1807, 148, (const llvm::APInt *)v3584, v1806, v752, v3489, v3472, v1810, (uint64_t)v1808, v1809, v1811);
            uint64_t v1815 = v1814;
            uint64_t v1816 = *(void *)(a3 + 16);
            v1817 = sub_1CD7EBF14(v1816, v1805, (const llvm::APInt *)v3584, (llvm *)5, 0, 0, 0);
            __int16 v1820 = 0;
            uint64_t v1821 = *(void *)(v1816 + 832);
            if (v1821) {
              __int16 v1820 = *(_WORD *)(v1821 + 8);
            }
            v1824 = sub_1CCFDED5C(v1816, 148, (const llvm::APInt *)v3584, v1806, v752, v3458, v3446, v1819, (uint64_t)v1817, v1818, v1820);
            v1825 = *(void **)(a3 + 16);
            uint64_t v1826 = *(void *)(a2 + 32);
            uint64_t v1827 = *(void *)(v1826 + 80);
            uint64_t v1828 = *(void *)(v1826 + 88);
            uint64_t v1829 = v1825[104];
            if (v1829) {
              LOWORD(v1829) = *(_WORD *)(v1829 + 8);
            }
            v1831 = sub_1CD7F5D38(v1825, (const char *)0xC1, (const llvm::APInt *)v3584, (llvm *)5, 0, (uint64_t)v1813, v1815, v1823, (uint64_t)v1824, v1822, v1827, v1828, SHIDWORD(v1828), v1829);
            __int16 v1832 = 0;
            v1833 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1834 = *((void *)v1833 + 104);
            if (v1834) {
              __int16 v1832 = *(_WORD *)(v1834 + 8);
            }
            v1835 = sub_1CD7F3564(v1833, (const char *)0xC9, (uint64_t)v3584, (llvm *)2, 0, (uint64_t)v1831, v1830, v1832);
            v1837 = v1836;
            sub_1CCEF0788(*(void *)a3, (uint64_t)v1813);
            sub_1CCEF0788(*(void *)a3, (uint64_t)v1824);
            sub_1CCEF0788(*(void *)a3, (uint64_t)v1831);
            sub_1CCEF0788(*(void *)a3, (uint64_t)v1835);
            if (LODWORD(v3555[1]) >= (unint64_t)HIDWORD(v3555[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v1838 = (uint64_t **)((char *)v3555[0] + 16 * LODWORD(v3555[1]));
            *v1838 = v1835;
            v1838[1] = v1837;
            unsigned int v1804 = ++LODWORD(v3555[1]);
            ++v1805;
          }
          while (v3439 != v1805);
        }
        else
        {
          unsigned int v1804 = v3555[1];
        }
        v1220 = *(void **)(a3 + 16);
        v1214 = (llvm *)v3569[0];
        v1215 = v3569[1];
        v1216 = (uint64_t *)v3555[0];
        uint64_t v1217 = v1804;
        uint64_t v1839 = v1220[104];
        if (v1839) {
          uint64_t v1219 = *(unsigned __int16 *)(v1839 + 8);
        }
        else {
          uint64_t v1219 = 0;
        }
        goto LABEL_1408;
      case 0xC9:
        int v264 = *(uint64_t **)(a2 + 32);
        uint64_t v266 = *v264;
        uint64_t v265 = v264[1];
        int v267 = *(unsigned __int16 *)(*v264 + 24);
        if (((v267 - 56) < 3 || v267 == 175) && sub_1CB8D66E8(v266, v265, a3))
        {
          uint64_t v268 = *(void *)(a2 + 40);
          uint64_t v269 = *(llvm **)v268;
          uint64_t v270 = *(void *)(v268 + 8);
          uint64_t v271 = *(llvm::APFloatBase **)(a3 + 16);
          unint64_t v272 = *(uint64_t **)(v266 + 32);
          uint64_t v273 = *v272;
          int v274 = (void *)v272[1];
          uint64_t v275 = *((void *)v271 + 104);
          if (v275) {
            __int16 v276 = *(_WORD *)(v275 + 8);
          }
          else {
            __int16 v276 = 0;
          }
          v731 = sub_1CD7F3564(v271, (const char *)0xC9, (uint64_t)&v3551, v269, v270, v273, v274, v276);
          uint64_t v733 = v732;
          uint64_t v734 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v735 = *(void *)(v266 + 32);
          uint64_t v736 = *(void *)(v735 + 40);
          uint64_t v737 = *(void **)(v735 + 48);
          uint64_t v738 = *((void *)v734 + 104);
          if (v738) {
            __int16 v739 = *(_WORD *)(v738 + 8);
          }
          else {
            __int16 v739 = 0;
          }
          uint64_t v740 = sub_1CD7F3564(v734, (const char *)0xC9, (uint64_t)&v3551, v269, v270, v736, v737, v739);
          uint64_t v742 = v741;
          sub_1CCEF0788(*(void *)a3, (uint64_t)v731);
          sub_1CCEF0788(*(void *)a3, (uint64_t)v740);
          uint64_t v208 = *(void *)(a3 + 16);
          uint64_t v215 = *(unsigned __int16 *)(v266 + 24);
          uint64_t v743 = *(void *)(v208 + 832);
          if (v743) {
            LOWORD(v743) = *(_WORD *)(v743 + 8);
          }
          uint64_t v3403 = v742;
          __int16 v3405 = v743;
          uint64_t v3402 = (uint64_t)v740;
          uint64_t v216 = (uint64_t)v269;
          uint64_t v744 = v270;
          uint64_t v210 = v731;
LABEL_847:
          uint64_t v211 = v733;
          goto LABEL_1787;
        }
        uint64_t v518 = **(void **)(a2 + 40);
        if (**(void **)(a2 + 40) == 5)
        {
          if (*(unsigned char *)(*(void *)(v266 + 40) + 16 * v265) == 6 && *(_WORD *)(v266 + 24) == 216)
          {
            uint64_t v682 = **(void **)(v266 + 32);
            if (*(_WORD *)(v682 + 24) == 146 && **(unsigned char **)(v682 + 40) == 49)
            {
              unsigned int v397 = *(_DWORD **)(v682 + 32);
              goto LABEL_493;
            }
          }
        }
        else if (v518 == 4)
        {
          int v519 = *(unsigned __int8 *)(*(void *)(v266 + 40) + 16 * v265);
          if (v519 == 5)
          {
            int v977 = *(unsigned __int16 *)(v266 + 24);
            if (v977 == 396)
            {
              if (sub_1CB8D66E8(v266, v265, a3))
              {
                uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
                v1240 = *(uint64_t **)(v266 + 32);
                uint64_t v31 = *v1240;
                uint64_t v33 = (void *)v1240[1];
                uint64_t v1241 = *((void *)v32 + 104);
                if (v1241) {
                  __int16 v35 = *(_WORD *)(v1241 + 8);
                }
                else {
                  __int16 v35 = 0;
                }
                uint64_t v563 = 396;
                goto LABEL_2391;
              }
              uint64_t v518 = **(unsigned __int8 **)(a2 + 40);
            }
            else if (v977 == 395)
            {
              uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
              unint64_t v978 = *(uint64_t **)(v266 + 32);
              uint64_t v31 = *v978;
              uint64_t v33 = (void *)v978[1];
              uint64_t v979 = *((void *)v32 + 104);
              if (v979) {
                __int16 v35 = *(_WORD *)(v979 + 8);
              }
              else {
                __int16 v35 = 0;
              }
              uint64_t v563 = 395;
              goto LABEL_2391;
            }
          }
          else if (v519 == 6 && *(_WORD *)(v266 + 24) == 216)
          {
            uint64_t v520 = **(void **)(v266 + 32);
            if (*(_WORD *)(v520 + 24) == 146 && **(unsigned char **)(v520 + 40) == 49)
            {
              uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v521 = *(uint64_t **)(v520 + 32);
              uint64_t v31 = *v521;
              uint64_t v33 = (void *)v521[1];
              uint64_t v522 = *((void *)v32 + 104);
              if (v522) {
                __int16 v35 = *(_WORD *)(v522 + 8);
              }
              else {
                __int16 v35 = 0;
              }
              uint64_t v563 = 201;
LABEL_2391:
              uint64_t v564 = 4;
              goto LABEL_1396;
            }
          }
        }
        if (v518 == 4
          && *(unsigned char *)(*(void *)(v266 + 40) + 16 * v265) == 5
          && *(_WORD *)(v266 + 24) == 46
          && sub_1CB8D66E8(v266, v265, a3))
        {
          uint64_t v1607 = *(void *)(**(void **)(v266 + 32) + 80);
          v1608 = (void *)(v1607 + 24);
          if (*(_DWORD *)(v1607 + 32) >= 0x41u) {
            v1608 = (void *)*v1608;
          }
          int v1609 = *(_DWORD *)v1608;
          if (*(_DWORD *)v1608 == 2579 || v1609 == 2488)
          {
            *(void *)&long long v3553 = sub_1CB9E4120(1, v1609, v266, v265, *(llvm::APFloatBase **)(a3 + 16));
            *((void *)&v3553 + 1) = v1610;
            if (v1609 == 2488 || v1609 == 2579) {
              goto LABEL_2038;
            }
          }
        }
        if (**(unsigned char **)(a2 + 40) != 5
          || *(unsigned char *)(*(void *)(v266 + 40) + 16 * v265) != 6
          || *(_WORD *)(v266 + 24) != 177)
        {
          goto LABEL_2037;
        }
        v1611 = *(uint64_t **)(v266 + 32);
        uint64_t v1612 = v1611[5];
        int v1613 = *(unsigned __int16 *)(v1612 + 24);
        if (v1613 != 35 && v1613 != 11) {
          goto LABEL_2037;
        }
        uint64_t v1615 = *(void *)(v1612 + 80);
        v1616 = (void *)(v1615 + 24);
        if (*(_DWORD *)(v1615 + 32) >= 0x41u) {
          v1616 = (void *)*v1616;
        }
        if (*v1616 != 32) {
          goto LABEL_2037;
        }
        uint64_t v1617 = *v1611;
        v1618 = (void *)v1611[1];
        v1619 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
        uint64_t v1621 = v1620;
        v1622 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v1623 = *((void *)v1622 + 104);
        if (v1623) {
          __int16 v1624 = *(_WORD *)(v1623 + 8);
        }
        else {
          __int16 v1624 = 0;
        }
        v2529 = sub_1CD7F3564(v1622, (const char *)0xD8, (uint64_t)&v3551, (llvm *)0x31, 0, v1617, v1618, v1624);
        uint64_t v2531 = *(void *)(a3 + 16);
        uint64_t v2532 = *(void *)(v2531 + 832);
        if (v2532) {
          LOWORD(v2532) = *(_WORD *)(v2532 + 8);
        }
        uint64_t v37 = (uint64_t)sub_1CCFDED5C(v2531, 148, (const llvm::APInt *)&v3551, (llvm *)5, 0, (uint64_t)v2529, v2528, v2530, (uint64_t)v1619, v1621, v2532);
        goto LABEL_20;
      case 0xCA:
      case 0xCB:
        uint64_t v24 = *(unsigned int **)(a2 + 32);
        uint64_t v25 = *(void *)v24;
        if (*(unsigned char *)(*(void *)(*(void *)v24 + 40) + 16 * v24[2]) != 5) {
          goto LABEL_2037;
        }
        uint64_t v26 = *(uint64_t **)(a2 + 40);
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        int v29 = *(unsigned __int16 *)(v25 + 24);
        if (v29 == 171)
        {
          uint64_t v574 = *(uint64_t **)(v25 + 32);
          uint64_t v575 = v574[5];
          int v576 = *(unsigned __int16 *)(v575 + 24);
          if (v576 != 35 && v576 != 11) {
            goto LABEL_2037;
          }
          uint64_t v578 = *(void *)(v575 + 80);
          uint64_t v579 = (void *)(v578 + 24);
          if (*(_DWORD *)(v578 + 32) >= 0x41u) {
            uint64_t v579 = (void *)*v579;
          }
          if (*v579 != 0xFFFFLL) {
            goto LABEL_2037;
          }
          uint64_t v580 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v581 = *v574;
          uint64_t v582 = (void *)v574[1];
          uint64_t v583 = *((void *)v580 + 104);
          if (v583) {
            __int16 v584 = *(_WORD *)(v583 + 8);
          }
          else {
            __int16 v584 = 0;
          }
          uint64_t v31 = (uint64_t)sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xC9, (uint64_t)&v3551, (llvm *)4, 0, v581, v582, v584);
          uint64_t v33 = v1106;
          uint64_t v1107 = *((void *)v580 + 104);
          if (v1107) {
            __int16 v35 = *(_WORD *)(v1107 + 8);
          }
          else {
            __int16 v35 = 0;
          }
          uint64_t v32 = v580;
        }
        else
        {
          if (v29 != 199) {
            goto LABEL_2037;
          }
          int v30 = *(unsigned int **)(v25 + 32);
          uint64_t v31 = *(void *)v30;
          if (*(unsigned char *)(*(void *)(*(void *)v30 + 40) + 16 * v30[2]) != 4) {
            goto LABEL_2037;
          }
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v33 = (void *)*((void *)v30 + 1);
          uint64_t v34 = *((void *)v32 + 104);
          if (v34) {
            __int16 v35 = *(_WORD *)(v34 + 8);
          }
          else {
            __int16 v35 = 0;
          }
        }
        uint64_t v563 = 203;
        uint64_t v564 = v28;
LABEL_1274:
        uint64_t v565 = (void *)v27;
        goto LABEL_2058;
      case 0xCC:
        uint64_t v289 = *(uint64_t **)(a2 + 32);
        uint64_t v291 = *v289;
        uint64_t v290 = (void *)v289[1];
        int v292 = *(unsigned __int16 *)(*v289 + 24);
        if (v292 != 192
          || ((int v293 = *(void **)(v291 + 32), v294 = v293[10], v295 = *(unsigned __int16 *)(v294 + 24), v295 != 35)
            ? (BOOL v296 = v295 == 11)
            : (BOOL v296 = 1),
              !v296
           || ((int v297 = *(unsigned __int16 *)(v293[15] + 24), v297 != 35) ? (v298 = v297 == 11) : (v298 = 1), !v298)))
        {
          if (*(unsigned char *)(v289[5] + 80) != 4) {
            goto LABEL_2037;
          }
          if (v292 == 395)
          {
            uint64_t v299 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v300 = *(void **)(v291 + 64);
            v3555[0] = v300;
            if (v300) {
              llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v300, 2);
            }
            LODWORD(v3555[1]) = *(_DWORD *)(v291 + 60);
            uint64_t v301 = *(uint64_t **)(v291 + 32);
            uint64_t v302 = *v301;
            char v303 = (void *)v301[1];
            uint64_t v304 = *((void *)v299 + 104);
            if (v304) {
              __int16 v305 = *(_WORD *)(v304 + 8);
            }
            else {
              __int16 v305 = 0;
            }
            int v851 = v299;
            uint64_t v852 = 395;
          }
          else
          {
            if (*(int *)(a3 + 8) < 3 || **(unsigned char **)(a2 + 40) != 5) {
              goto LABEL_2037;
            }
            int v668 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v669 = *(void **)(a2 + 64);
            v3555[0] = v669;
            if (v669)
            {
              llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v669, 2);
              int v11 = *(_DWORD *)(a2 + 60);
            }
            LODWORD(v3555[1]) = v11;
            uint64_t v670 = *((void *)v668 + 104);
            if (v670) {
              __int16 v305 = *(_WORD *)(v670 + 8);
            }
            else {
              __int16 v305 = 0;
            }
            int v851 = v668;
            uint64_t v852 = 201;
            uint64_t v302 = v291;
            char v303 = v290;
          }
          int v853 = sub_1CD7F3564(v851, (const char *)v852, (uint64_t)v3555, (llvm *)4, 0, v302, v303, v305);
LABEL_971:
          uint64_t v424 = v853;
          uint64_t v426 = v854;
          if (!v3555[0]) {
            goto LABEL_975;
          }
          int v855 = *(unsigned __int8 *)v3555[0];
          if ((v855 - 4) > 0x1E)
          {
            if ((v855 - 3) >= 0xFFFFFFFE) {
              v1047 = v3555[0];
            }
            else {
              v1047 = 0;
            }
            if ((v855 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v1048 = (unint64_t)v1047 + 8;
LABEL_1207:
              v3569[0] = v3555;
              sub_1CC5FA668(v1048 + 16, v3569);
              goto LABEL_975;
            }
            if (v855 == 3) {
              *((void *)v3555[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v3555[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3555[0] + 3))
          {
            uint64_t v3314 = *((void *)v3555[0] + 2);
            if ((v3314 & 4) != 0)
            {
              unint64_t v1048 = v3314 & 0xFFFFFFFFFFFFFFF8;
              if (v1048) {
                goto LABEL_1207;
              }
            }
          }
LABEL_975:
          uint64_t v856 = *(llvm::APFloatBase **)(a3 + 16);
          int v857 = *(void **)(a2 + 64);
          v3555[0] = v857;
          if (v857) {
            llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v857, 2);
          }
          LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
          uint64_t v858 = *((void *)v856 + 104);
          if (v858) {
            __int16 v324 = *(_WORD *)(v858 + 8);
          }
          else {
            __int16 v324 = 0;
          }
          uint64_t v683 = v856;
          uint64_t v684 = 198;
LABEL_981:
          uint64_t v318 = 5;
LABEL_982:
          uint64_t v319 = 0;
          uint64_t v321 = (uint64_t)v424;
          int v322 = v426;
          goto LABEL_983;
        }
        uint64_t v1118 = *(void *)(a3 + 16);
        v1119 = *(void **)(a2 + 64);
        v3555[0] = v1119;
        if (v1119)
        {
          llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1119, 2);
          int v11 = *(_DWORD *)(a2 + 60);
          int v293 = *(void **)(v291 + 32);
          uint64_t v294 = v293[10];
          uint64_t v289 = *(uint64_t **)(a2 + 32);
        }
        LODWORD(v3555[1]) = v11;
        uint64_t v1120 = *(void *)(v291 + 40) + 16 * v290;
        v1121 = *(llvm **)v1120;
        uint64_t v1122 = *(void *)(v1120 + 8);
        uint64_t v1123 = v293[11];
        uint64_t v1124 = v289[5];
        uint64_t v1125 = v289[6];
        uint64_t v1126 = *(void *)(v1118 + 832);
        if (v1126) {
          LOWORD(v1126) = *(_WORD *)(v1126 + 8);
        }
        v1128 = sub_1CCFDED5C(v1118, 204, (const llvm::APInt *)v3555, v1121, v1122, v294, v1123, a8, v1124, v1125, v1126);
        int v1130 = v1129;
        if (!v3555[0]) {
          goto LABEL_1294;
        }
        int v1131 = *(unsigned __int8 *)v3555[0];
        if ((v1131 - 4) > 0x1E)
        {
          if ((v1131 - 3) >= 0xFFFFFFFE) {
            v1889 = v3555[0];
          }
          else {
            v1889 = 0;
          }
          if ((v1131 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1890 = (unint64_t)v1889 + 8;
LABEL_2133:
            v3569[0] = v3555;
            sub_1CC5FA668(v1890 + 16, v3569);
            goto LABEL_1294;
          }
          if (v1131 == 3) {
            *((void *)v3555[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v3555[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3555[0] + 3))
        {
          uint64_t v3371 = *((void *)v3555[0] + 2);
          if ((v3371 & 4) != 0)
          {
            unint64_t v1890 = v3371 & 0xFFFFFFFFFFFFFFF8;
            if (v1890) {
              goto LABEL_2133;
            }
          }
        }
LABEL_1294:
        uint64_t v1132 = v290;
        uint64_t v1133 = *(void *)(a3 + 16);
        v1134 = *(void **)(a2 + 64);
        v3555[0] = v1134;
        if (v1134) {
          llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1134, 2);
        }
        LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
        uint64_t v1135 = *(void *)(v291 + 32);
        uint64_t v1136 = *(void *)(v291 + 40) + 16 * v1132;
        v1137 = *(llvm **)v1136;
        uint64_t v1138 = *(void *)(v1136 + 8);
        uint64_t v1139 = *(void *)(v1135 + 120);
        uint64_t v1140 = *(void *)(v1135 + 128);
        uint64_t v1141 = *(void *)(a2 + 32);
        uint64_t v1142 = *(void *)(v1141 + 40);
        uint64_t v1143 = *(void *)(v1141 + 48);
        uint64_t v1144 = *(void *)(v1133 + 832);
        if (v1144) {
          LOWORD(v1144) = *(_WORD *)(v1144 + 8);
        }
        v1146 = sub_1CCFDED5C(v1133, 204, (const llvm::APInt *)v3555, v1137, v1138, v1139, v1140, v1127, v1142, v1143, v1144);
        int v1148 = v1147;
        if (!v3555[0]) {
          goto LABEL_1302;
        }
        int v1149 = *(unsigned __int8 *)v3555[0];
        if ((v1149 - 4) > 0x1E)
        {
          if ((v1149 - 3) >= 0xFFFFFFFE) {
            v1891 = v3555[0];
          }
          else {
            v1891 = 0;
          }
          if ((v1149 - 3) < 0xFFFFFFFE)
          {
            if (v1149 == 3) {
              *((void *)v3555[0] + 1) = 0;
            }
            goto LABEL_1302;
          }
          unint64_t v1892 = (unint64_t)v1891 + 8;
        }
        else
        {
          if ((*((unsigned char *)v3555[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3555[0] + 3)) {
            goto LABEL_1302;
          }
          uint64_t v3372 = *((void *)v3555[0] + 2);
          if ((v3372 & 4) == 0) {
            goto LABEL_1302;
          }
          unint64_t v1892 = v3372 & 0xFFFFFFFFFFFFFFF8;
          if (!v1892) {
            goto LABEL_1302;
          }
        }
        v3569[0] = v3555;
        sub_1CC5FA668(v1892 + 16, v3569);
LABEL_1302:
        v1150 = *(void **)(a3 + 16);
        v1151 = *(void **)(a2 + 64);
        v3555[0] = v1151;
        if (v1151) {
          llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v1151, 2);
        }
        LODWORD(v3555[1]) = *(_DWORD *)(a2 + 60);
        v1152 = *(uint64_t **)(v291 + 32);
        int v859 = sub_1CD7F6564(v1150, (const char *)0xC0, (const llvm::APInt *)v3555, *(llvm **)(*(void *)(v291 + 40) + 16 * v1132), *(void *)(*(void *)(v291 + 40) + 16 * v1132 + 8), *v1152, v1152[1], v1145, v1152[5], v1152[6], (uint64_t)v1128, v1130, (uint64_t)v1146, v1148, v1152[20], v1152[21]);
        goto LABEL_984;
      case 0xD0:
        uint64_t v282 = **(void **)(a2 + 32);
        if (*(_WORD *)(v282 + 24) != 46) {
          goto LABEL_2037;
        }
        goto LABEL_267;
      case 0xD1:
        uint64_t v282 = **(void **)(a2 + 32);
        if (*(_WORD *)(v282 + 24) != 46) {
          goto LABEL_2037;
        }
LABEL_267:
        uint64_t v283 = *(void *)(a2 + 40);
        uint64_t v284 = *(void *)(**(void **)(v282 + 32) + 80);
        uint64_t v285 = (void *)(v284 + 24);
        if (*(_DWORD *)(v284 + 32) >= 0x41u) {
          uint64_t v285 = (void *)*v285;
        }
        uint64_t v286 = *(llvm **)v283;
        uint64_t v287 = *(void *)(v283 + 8);
        if (*(_DWORD *)v285 == 2445)
        {
          int v288 = 47;
        }
        else
        {
          if (*(_DWORD *)v285 != 2446) {
            goto LABEL_2037;
          }
          int v288 = 48;
        }
        uint64_t v585 = *(void *)(a3 + 16);
        uint64_t v31 = sub_1CD7EEB94(v585, v288, v286, v287);
        uint64_t v33 = v586;
        uint64_t v587 = *(void *)(v585 + 832);
        if (v587) {
          __int16 v35 = *(_WORD *)(v587 + 8);
        }
        else {
          __int16 v35 = 0;
        }
        uint64_t v32 = (llvm::APFloatBase *)v585;
        goto LABEL_1390;
      case 0xD4:
        uint64_t v201 = *(void *)(a2 + 32);
        uint64_t v202 = *(void *)v201;
        uint64_t v203 = *(void *)(*(void *)v201 + 48);
        if (!v203) {
          goto LABEL_2037;
        }
        int v204 = 1;
        do
        {
          if (*(_DWORD *)(v203 + 8) == *(_DWORD *)(v201 + 8))
          {
            if (!v204) {
              goto LABEL_2037;
            }
            --v204;
          }
          uint64_t v203 = *(void *)(v203 + 32);
        }
        while (v203);
        if (v204) {
          goto LABEL_2037;
        }
        uint64_t v205 = (const char *)*(unsigned __int16 *)(v202 + 24);
        uint64_t v206 = *(void *)(a2 + 40);
        uint64_t v207 = *(llvm **)v206;
        uint64_t v81 = *(void *)(v206 + 8);
        if ((v205 & 0xFFFFFFFD) == 0x191)
        {
          uint64_t v208 = *(void *)(a3 + 16);
          uint64_t v209 = *(void *)(v202 + 32);
          uint64_t v210 = *(uint64_t **)v209;
          uint64_t v211 = *(void *)(v209 + 8);
          uint64_t v212 = *(void *)(v209 + 40);
          uint64_t v213 = *(void *)(v209 + 48);
          uint64_t v214 = *(void *)(v208 + 832);
          if (v214) {
            LOWORD(v214) = *(_WORD *)(v214 + 8);
          }
          uint64_t v3403 = v213;
          __int16 v3405 = v214;
          uint64_t v3402 = v212;
          uint64_t v215 = *(unsigned __int16 *)(v202 + 24);
          uint64_t v216 = (uint64_t)v207;
          goto LABEL_1786;
        }
        if ((v205 - 402) > 0x12) {
          goto LABEL_1324;
        }
        int v942 = 1 << ((_BYTE)v205 + 110);
        if ((v942 & 0x58000) != 0) {
          goto LABEL_1326;
        }
        if ((v942 & 5) != 0)
        {
          int v943 = *(void **)(a3 + 16);
          uint64_t v944 = *(uint64_t **)(v202 + 32);
          uint64_t v945 = *v944;
          uint64_t v946 = v944[1];
          uint64_t v947 = v944[5];
          uint64_t v948 = v944[6];
          uint64_t v949 = v944[10];
          uint64_t v950 = v944[11];
          uint64_t v951 = v943[104];
          if (v951) {
            LOWORD(v951) = *(_WORD *)(v951 + 8);
          }
          uint64_t v37 = (uint64_t)sub_1CD7F5D38(v943, v205, (const llvm::APInt *)&v3551, v207, v81, v945, v946, a8, v947, v948, v949, v950, SHIDWORD(v950), v951);
          goto LABEL_20;
        }
LABEL_1324:
        if ((v205 - 231) > 0xA || ((1 << ((_BYTE)v205 + 25)) & 0x409) == 0) {
          goto LABEL_1328;
        }
LABEL_1326:
        uint64_t v1161 = **(void **)(v202 + 32);
        if (*(_WORD *)(v1161 + 24) == 215)
        {
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          v1162 = *(uint64_t **)(v1161 + 32);
          uint64_t v31 = *v1162;
          uint64_t v33 = (void *)v1162[1];
          __int16 v35 = *(_WORD *)(v202 + 72);
LABEL_2056:
          uint64_t v563 = (uint64_t)v205;
          uint64_t v564 = (uint64_t)v207;
          goto LABEL_2057;
        }
LABEL_1328:
        if (((unsigned __int16)v205 & 0xFFFE) == 0xDE && sub_1CD406BEC(a2))
        {
          uint64_t v2163 = *(void *)(a3 + 16);
          uint64_t v2164 = *(void *)(v2163 + 832);
          if (v2164) {
            LOWORD(v2164) = *(_WORD *)(v2164 + 8);
          }
          uint64_t v31 = (uint64_t)sub_1CCFDED5C(v2163, 212, (const llvm::APInt *)&v3551, v207, v81, **(void **)(v202 + 32), *(void *)(*(void *)(v202 + 32) + 8), v2162, *(void *)(v201 + 40), *(void *)(v201 + 48), v2164);
          uint64_t v33 = v2165;
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
LABEL_1334:
          uint64_t v1164 = *((void *)v32 + 104);
          if (v1164) {
            __int16 v35 = *(_WORD *)(v1164 + 8);
          }
          else {
            __int16 v35 = 0;
          }
          goto LABEL_2056;
        }
        if (v205 != 428 && v205 != 192 || !*(_DWORD *)(a3 + 8))
        {
          if (((unsigned __int16)v205 & 0xFFFE) != 0xCA) {
            goto LABEL_2037;
          }
          uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
          v1163 = *(uint64_t **)(v202 + 32);
          uint64_t v31 = *v1163;
          uint64_t v33 = (void *)v1163[1];
          goto LABEL_1334;
        }
        uint64_t v2427 = *(void *)(v202 + 32);
        v3466 = *(uint64_t **)(v2427 + 40);
        v3482 = *(uint64_t **)v2427;
        uint64_t v3442 = *(void *)(v2427 + 48);
        uint64_t v3453 = *(void *)(v2427 + 8);
        uint64_t v2428 = *(void *)(v2427 + 80);
        uint64_t v2429 = *(void *)(v2427 + 88);
        uint64_t v2430 = *(void *)(v2427 + 120);
        unint64_t v3501 = *(void *)(v2427 + 128);
        uint64_t v2431 = *(void *)(v2427 + 160);
        v2432 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3551, (llvm *)5, 0, 0, 0);
        uint64_t v3428 = v2433;
        uint64_t v3434 = (uint64_t)v2432;
        if (sub_1CD406B10(v202)) {
          unsigned int v2434 = 2;
        }
        else {
          unsigned int v2434 = 1;
        }
        unsigned int v2435 = *(unsigned __int16 *)(v2431 + 72);
        v2436 = *(void **)(a3 + 16);
        int v2437 = *(_WORD *)(*v2436 + 1020) & 1 | ((v2435 & 0x10) != 0);
        if ((~v2435 & 0x3C0) != 0) {
          int v2438 = 0;
        }
        else {
          int v2438 = (v2435 >> 10) & 1;
        }
        int v2439 = *(_WORD *)(*v2436 + 1020) & 1 | v2438;
        if (v205 != 192) {
          int v2439 = *(_WORD *)(*v2436 + 1020) & 1;
        }
        if (v205 == 428) {
          int v2439 = v2437;
        }
        if (v2439
          && ((uint64_t *)v2428 == v3482
           && v2429 == v3453
           && (uint64_t *)v2430 == v3466
           && v3501 == v3442
           || (uint64_t *)v2428 == v3466
           && v3442 == v2429
           && (uint64_t *)v2430 == v3482
           && v3501 == v3453)
          && (BOOL v2440 = sub_1CB9D1EA4(v2428, v2429, 1, 1), sub_1CB9D1EA4(v2430, v3501, 1, 1) + v2440 >= v2434))
        {
          uint64_t v3254 = v2436[104];
          if (v3254) {
            LOWORD(v3254) = *(_WORD *)(v3254 + 8);
          }
          v3482 = sub_1CCFDED5C((uint64_t)v2436, 212, (const llvm::APInt *)&v3551, v207, v81, (uint64_t)v3482, v3453, v2441, v3434, v3428, v3254);
          int v3257 = v3256;
          uint64_t v3258 = *(void *)(a3 + 16);
          uint64_t v3259 = *(void *)(v3258 + 832);
          if (v3259) {
            LOWORD(v3259) = *(_WORD *)(v3259 + 8);
          }
          v3466 = sub_1CCFDED5C(v3258, 212, (const llvm::APInt *)&v3551, v207, v81, (uint64_t)v3466, v3442, v3255, v3434, v3428, v3259);
          uint64_t v3262 = *(void *)(a3 + 16);
          uint64_t v3263 = *(void *)(v3262 + 832);
          if (v3263) {
            LOWORD(v3263) = *(_WORD *)(v3263 + 8);
          }
          LODWORD(v3453) = v3257;
          LODWORD(v3442) = v3260;
          v2453 = sub_1CCFDED5C(v3262, 212, (const llvm::APInt *)&v3551, v207, v81, v2428, v2429, v3261, v3434, v3428, v3263);
        }
        else
        {
          if (*(_WORD *)(v2428 + 24) == 222)
          {
            uint64_t v2442 = *(void *)(v2428 + 32);
            if (*(void *)v2442 == v2430 && *(_DWORD *)(v2442 + 8) == v3501)
            {
              uint64_t v2443 = *(void *)(v2428 + 48);
              if (v2443)
              {
                int v2444 = 1;
                do
                {
                  if (*(_DWORD *)(v2443 + 8) == v2429)
                  {
                    if (!v2444) {
                      goto LABEL_2679;
                    }
                    --v2444;
                  }
                  uint64_t v2443 = *(void *)(v2443 + 32);
                }
                while (v2443);
                if (!v2444 && sub_1CB9D1EA4(v2430, v3501, 1, 1))
                {
                  uint64_t v3373 = v2436[104];
                  if (v3373) {
                    LOWORD(v3373) = *(_WORD *)(v3373 + 8);
                  }
                  v3268 = sub_1CCFDED5C((uint64_t)v2436, 212, (const llvm::APInt *)&v3551, v207, v81, v2430, v3501, v2445, v3434, v3428, v3373);
                  unint64_t v3501 = v3501 & 0xFFFFFFFF00000000 | v3374;
                  v3375 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v3376 = *((void *)v3375 + 104);
                  if (v3376) {
                    __int16 v3377 = *(_WORD *)(v3376 + 8);
                  }
                  else {
                    __int16 v3377 = 0;
                  }
                  v3264 = sub_1CD7F3564(v3375, (const char *)0xDE, (uint64_t)&v3551, v207, v81, (uint64_t)v3268, (void *)v3501, v3377);
                  LODWORD(v3265) = v3386;
                  goto LABEL_3372;
                }
              }
            }
          }
LABEL_2679:
          if (*(_WORD *)(v2430 + 24) == 222)
          {
            uint64_t v2446 = *(void *)(v2430 + 32);
            if (*(void *)v2446 == v2428 && *(_DWORD *)(v2446 + 8) == v2429)
            {
              uint64_t v2447 = *(void *)(v2430 + 48);
              if (v2447)
              {
                int v2448 = 1;
                do
                {
                  if (*(_DWORD *)(v2447 + 8) == v3501)
                  {
                    if (!v2448) {
                      goto LABEL_2690;
                    }
                    --v2448;
                  }
                  uint64_t v2447 = *(void *)(v2447 + 32);
                }
                while (v2447);
                if (!v2448 && sub_1CB9D1EA4(v2428, v2429, 1, 1))
                {
                  uint64_t v3378 = v2436[104];
                  if (v3378) {
                    LOWORD(v3378) = *(_WORD *)(v3378 + 8);
                  }
                  v3264 = sub_1CCFDED5C((uint64_t)v2436, 212, (const llvm::APInt *)&v3551, v207, v81, v2428, v2429, v2449, v3434, v3428, v3378);
                  v3265 = (void *)(v2429 & 0xFFFFFFFF00000000 | v3379);
                  v3380 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v3381 = *((void *)v3380 + 104);
                  if (v3381) {
                    __int16 v3382 = *(_WORD *)(v3381 + 8);
                  }
                  else {
                    __int16 v3382 = 0;
                  }
                  v3268 = sub_1CD7F3564(v3380, (const char *)0xDE, (uint64_t)&v3551, v207, v81, (uint64_t)v3264, v3265, v3382);
                  LODWORD(v3501) = v3387;
                  goto LABEL_3372;
                }
              }
            }
          }
LABEL_2690:
          BOOL v2450 = sub_1CB9D1EA4(v2428, v2429, 1, 0);
          if (sub_1CB9D1EA4(v2430, v3501, 1, 0) + v2450 < v2434) {
            goto LABEL_2037;
          }
          uint64_t v2452 = v2436[104];
          if (v2452) {
            LOWORD(v2452) = *(_WORD *)(v2452 + 8);
          }
          v2453 = sub_1CCFDED5C((uint64_t)v2436, 212, (const llvm::APInt *)&v3551, v207, v81, v2428, v2429, v2451, v3434, v3428, v2452);
        }
        v3264 = v2453;
        LODWORD(v3265) = v2454;
        uint64_t v3266 = *(void *)(a3 + 16);
        uint64_t v3267 = *(void *)(v3266 + 832);
        if (v3267) {
          LOWORD(v3267) = *(_WORD *)(v3267 + 8);
        }
        v3268 = sub_1CCFDED5C(v3266, 212, (const llvm::APInt *)&v3551, v207, v81, v2430, v3501, v2455, v3434, v3428, v3267);
        LODWORD(v3501) = v3269;
LABEL_3372:
        sub_1CCEF0788(*(void *)a3, (uint64_t)v3264);
        sub_1CCEF0788(*(void *)a3, (uint64_t)v3268);
        uint64_t v37 = (uint64_t)sub_1CD7F6564(*(void **)(a3 + 16), v205, (const llvm::APInt *)&v3551, v207, v81, (uint64_t)v3482, v3453, v3270, (uint64_t)v3466, v3442, (uint64_t)v3264, (int)v3265, (uint64_t)v3268, v3501, *(void *)(*(void *)(v202 + 32) + 160), *(void *)(*(void *)(v202 + 32) + 168));
        goto LABEL_20;
      case 0xD7:
        uint64_t v306 = **(void **)(a2 + 32);
        unsigned int v307 = *(uint64_t **)(v306 + 32);
        uint64_t v308 = *v307;
        uint64_t v309 = *(llvm::APFloatBase **)(a3 + 16);
        __int16 v310 = *(_WORD *)(*(void *)v309 + 1020);
        uint64_t v311 = *(unsigned __int16 *)(v306 + 24);
        if (v311 == 212)
        {
          if ((*(_WORD *)(v308 + 24) == 395
             || !sub_1CD406FA0(a2)
             || !sub_1CB9D1EA4(**(void **)(v308 + 32), *(void *)(*(void *)(v308 + 32) + 8), 1, 0))
            && ((v310 & 1) != 0 || (~*(unsigned __int16 *)(v308 + 72) & 0x7C0) == 0))
          {
            long long v312 = *(_OWORD *)v307;
            goto LABEL_2009;
          }
        }
        else if ((v311 & 0xFFFE) == 0xDE && *(_WORD *)(v308 + 24) == 212)
        {
          uint64_t v559 = *(uint64_t **)(a2 + 40);
          uint64_t v560 = *v559;
          v561 = (void *)v559[1];
          if (!sub_1CD406FA0(a2)
            || !sub_1CB9D1EA4(**(void **)(v308 + 32), *(void *)(*(void *)(v308 + 32) + 8), 1, 0))
          {
            __int16 v35 = *(_WORD *)(v306 + 72);
            if ((v310 & 1) != 0 || (v35 & 0x7C0) == 0x7C0)
            {
              uint64_t v562 = *(uint64_t **)(v308 + 32);
              uint64_t v31 = *v562;
              uint64_t v33 = (void *)v562[1];
              uint64_t v32 = v309;
              uint64_t v563 = v311;
              uint64_t v564 = v560;
              uint64_t v565 = v561;
              goto LABEL_2058;
            }
          }
        }
        goto LABEL_2037;
      case 0xD8:
        uint64_t v313 = **(void **)(a2 + 32);
        if (*(_WORD *)(v313 + 24) != 395) {
          goto LABEL_2037;
        }
        BOOL v314 = *(llvm::APFloatBase **)(a3 + 16);
        unsigned int v315 = *(void **)(v313 + 64);
        v3555[0] = v315;
        uint64_t v316 = v313;
        if (v315)
        {
          llvm::MetadataTracking::track((uint64_t)v3555, (unsigned __int8 *)v315, 2);
          uint64_t v316 = **(void **)(a2 + 32);
        }
        LODWORD(v3555[1]) = *(_DWORD *)(v313 + 60);
        uint64_t v317 = *(uint64_t **)(a2 + 40);
        uint64_t v318 = *v317;
        uint64_t v319 = v317[1];
        uint64_t v320 = *(uint64_t **)(v316 + 32);
        uint64_t v321 = *v320;
        int v322 = (void *)v320[1];
        uint64_t v323 = *((void *)v314 + 104);
        if (v323) {
          __int16 v324 = *(_WORD *)(v323 + 8);
        }
        else {
          __int16 v324 = 0;
        }
        uint64_t v683 = v314;
        uint64_t v684 = 395;
        goto LABEL_983;
      default:
        goto LABEL_2037;
    }
  }
  if (*(unsigned __int16 *)(a2 + 24) <= 0xE6u)
  {
    if (v12 != 222)
    {
      if (v12 != 223 || *(int *)(a3 + 8) < 2) {
        goto LABEL_2037;
      }
      uint64_t v76 = *(uint64_t **)(a2 + 32);
      uint64_t v77 = *(void *)(a2 + 40);
      uint64_t v78 = *v76;
      unsigned int v80 = *((_DWORD *)v76 + 2);
      unsigned int v79 = *((_DWORD *)v76 + 3);
      uint64_t v82 = *(llvm **)v77;
      uint64_t v81 = *(void *)(v77 + 8);
      int v83 = *(unsigned __int16 *)(v78 + 24);
      if (v83 != 215)
      {
        if (v83 != 212)
        {
          if (v83 != 98) {
            goto LABEL_2037;
          }
          uint64_t v84 = *(void *)(v78 + 48);
          if (!v84) {
            goto LABEL_2037;
          }
          int v85 = 1;
          do
          {
            if (*(_DWORD *)(v84 + 8) == v80)
            {
              if (!v85) {
                goto LABEL_2037;
              }
              --v85;
            }
            uint64_t v84 = *(void *)(v84 + 32);
          }
          while (v84);
          if (v85) {
            goto LABEL_2037;
          }
          uint64_t v86 = *(uint64_t ***)(v78 + 32);
          __int16 v88 = *v86;
          unint64_t v87 = (unint64_t)v86[1];
          uint64_t v90 = v86[5];
          unint64_t v89 = (unint64_t)v86[6];
          if (*((_WORD *)*v86 + 12) != 223)
          {
            unint64_t v91 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v92 = *((void *)v91 + 104);
            if (v92) {
              __int16 v93 = *(_WORD *)(v92 + 8);
            }
            else {
              __int16 v93 = 0;
            }
            __int16 v88 = sub_1CD7F3564(v91, (const char *)0xDF, (uint64_t)&v3551, v82, v81, (uint64_t)v88, (void *)v87, v93);
            unint64_t v87 = v87 & 0xFFFFFFFF00000000 | v2016;
          }
          if (*((_WORD *)v90 + 12) != 223)
          {
            v2017 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2018 = *((void *)v2017 + 104);
            if (v2018) {
              __int16 v2019 = *(_WORD *)(v2018 + 8);
            }
            else {
              __int16 v2019 = 0;
            }
            uint64_t v90 = sub_1CD7F3564(v2017, (const char *)0xDF, (uint64_t)&v3551, v82, v81, (uint64_t)v90, (void *)v89, v2019);
            unint64_t v89 = v89 & 0xFFFFFFFF00000000 | v2020;
          }
          uint64_t v37 = (uint64_t)sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)&v3551, v82, v81, (uint64_t)v88, v87, a8, (uint64_t)v90, v89, *(_WORD *)(v78 + 72));
          goto LABEL_20;
        }
        int v771 = *(void ***)(v78 + 32);
        uint64_t v772 = (uint64_t)*v771;
        if (*((_WORD *)*v771 + 12) != 223)
        {
          if (sub_1CD406BEC(a2)) {
            goto LABEL_2037;
          }
          uint64_t v773 = *(void *)(v78 + 48);
          if (!v773) {
            goto LABEL_2037;
          }
          int v774 = 1;
          do
          {
            if (*(_DWORD *)(v773 + 8) == v80)
            {
              if (!v774) {
                goto LABEL_2037;
              }
              --v774;
            }
            uint64_t v773 = *(void *)(v773 + 32);
          }
          while (v773);
          if (v774) {
            goto LABEL_2037;
          }
          BOOL v775 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v776 = *(void *)(v772 + 40) + 16 * *((unsigned int *)v771 + 2);
          uint64_t v777 = *(llvm **)v776;
          uint64_t v778 = *(void *)(v776 + 8);
          uint64_t v779 = *((void *)v775 + 104);
          if (v779) {
            __int16 v780 = *(_WORD *)(v779 + 8);
          }
          else {
            __int16 v780 = 0;
          }
          uint64_t v210 = sub_1CD7F3564(v775, (const char *)0xDF, (uint64_t)&v3551, v777, v778, v772, v771[1], v780);
          uint64_t v211 = v2984;
          uint64_t v208 = *(void *)(a3 + 16);
          uint64_t v2985 = *(void *)(v78 + 32);
          goto LABEL_3129;
        }
LABEL_876:
        *(void *)&long long v3553 = v78;
        *((void *)&v3553 + 1) = __PAIR64__(v79, v80);
        goto LABEL_2038;
      }
      uint64_t v781 = *(unsigned int **)(v78 + 32);
      uint64_t v332 = *(void *)v781;
      if (*(_WORD *)(*(void *)v781 + 24) == 223) {
        goto LABEL_876;
      }
      v1036 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1037 = *(void *)(v332 + 40) + 16 * v781[2];
      unsigned int v1038 = *(llvm **)v1037;
      uint64_t v1039 = *(void *)(v1037 + 8);
      unsigned int v1040 = (void *)*((void *)v781 + 1);
      uint64_t v1041 = *((void *)v1036 + 104);
      if (v1041) {
        __int16 v1042 = *(_WORD *)(v1041 + 8);
      }
      else {
        __int16 v1042 = 0;
      }
      uint64_t v1227 = 223;
      goto LABEL_1650;
    }
    if (*(int *)(a3 + 8) < 2) {
      goto LABEL_2037;
    }
    v325 = *(uint64_t **)(a2 + 32);
    uint64_t v326 = *(void *)(a2 + 40);
    uint64_t v327 = *v325;
    uint64_t v328 = v325[1];
    uint64_t v82 = *(llvm **)v326;
    uint64_t v81 = *(void *)(v326 + 8);
    int v329 = *(unsigned __int16 *)(*v325 + 24);
    if ((v329 - 96) > 0x2D || ((1 << (v329 - 96)) & 0x200000000005) == 0)
    {
      if (v329 == 212)
      {
        uint64_t v936 = *(void *)(v327 + 32);
        uint64_t v937 = *(void *)v936;
        if (*(_WORD *)(*(void *)v936 + 24) == 222)
        {
          uint64_t v208 = *(void *)(a3 + 16);
          uint64_t v938 = *(void *)(v937 + 32);
          uint64_t v210 = *(uint64_t **)v938;
          uint64_t v211 = *(void *)(v938 + 8);
          uint64_t v939 = *(void *)(v936 + 40);
          uint64_t v940 = *(void *)(v936 + 48);
LABEL_1062:
          uint64_t v941 = *(void *)(v208 + 832);
          if (v941) {
            LOWORD(v941) = *(_WORD *)(v941 + 8);
          }
          uint64_t v3403 = v940;
          __int16 v3405 = v941;
          uint64_t v3402 = v939;
          uint64_t v215 = 212;
          goto LABEL_1785;
        }
        if (sub_1CD406BEC(a2)) {
          goto LABEL_2037;
        }
        uint64_t v1909 = *(void *)(v327 + 48);
        if (!v1909) {
          goto LABEL_2037;
        }
        int v1910 = 1;
        do
        {
          if (*(_DWORD *)(v1909 + 8) == v328)
          {
            if (!v1910) {
              goto LABEL_2037;
            }
            --v1910;
          }
          uint64_t v1909 = *(void *)(v1909 + 32);
        }
        while (v1909);
        if (v1910) {
          goto LABEL_2037;
        }
        v1911 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v1912 = *(void *)(v937 + 40) + 16 * *(unsigned int *)(v936 + 8);
        v1913 = *(llvm **)v1912;
        uint64_t v1914 = *(void *)(v1912 + 8);
        uint64_t v1915 = *((void *)v1911 + 104);
        if (v1915) {
          __int16 v1916 = *(_WORD *)(v1915 + 8);
        }
        else {
          __int16 v1916 = 0;
        }
        uint64_t v210 = sub_1CD7F3564(v1911, (const char *)0xDE, (uint64_t)&v3551, v1913, v1914, v937, *(void **)(v936 + 8), v1916);
        uint64_t v211 = v3011;
        uint64_t v208 = *(void *)(a3 + 16);
        uint64_t v2985 = *(void *)(v327 + 32);
LABEL_3129:
        uint64_t v939 = *(void *)(v2985 + 40);
        uint64_t v940 = *(void *)(v2985 + 48);
        goto LABEL_1062;
      }
      if (v329 != 215) {
        goto LABEL_2037;
      }
      uint64_t v331 = *(unsigned int **)(v327 + 32);
      uint64_t v332 = *(void *)v331;
      if (*(_WORD *)(*(void *)v331 + 24) == 222)
      {
        uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v333 = *(uint64_t **)(v332 + 32);
        uint64_t v31 = *v333;
        uint64_t v33 = (void *)v333[1];
LABEL_1651:
        uint64_t v1489 = *((void *)v32 + 104);
        if (v1489) {
          __int16 v35 = *(_WORD *)(v1489 + 8);
        }
        else {
          __int16 v35 = 0;
        }
        uint64_t v563 = 215;
LABEL_1655:
        uint64_t v564 = (uint64_t)v82;
LABEL_2057:
        uint64_t v565 = (void *)v81;
        goto LABEL_2058;
      }
      v1036 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1108 = *(void *)(v332 + 40) + 16 * v331[2];
      unsigned int v1038 = *(llvm **)v1108;
      uint64_t v1039 = *(void *)(v1108 + 8);
      unsigned int v1040 = (void *)*((void *)v331 + 1);
      uint64_t v1109 = *((void *)v1036 + 104);
      if (v1109) {
        __int16 v1042 = *(_WORD *)(v1109 + 8);
      }
      else {
        __int16 v1042 = 0;
      }
      uint64_t v1227 = 222;
LABEL_1650:
      uint64_t v31 = (uint64_t)sub_1CD7F3564(v1036, (const char *)v1227, (uint64_t)&v3551, v1038, v1039, v332, v1040, v1042);
      uint64_t v33 = v1488;
      uint64_t v32 = *(llvm::APFloatBase **)(a3 + 16);
      goto LABEL_1651;
    }
    uint64_t v656 = *(void *)(v327 + 48);
    if (!v656) {
      goto LABEL_1321;
    }
    int v657 = 1;
    do
    {
      if (*(_DWORD *)(v656 + 8) == v328)
      {
        if (!v657) {
          goto LABEL_1321;
        }
        --v657;
      }
      uint64_t v656 = *(void *)(v656 + 32);
    }
    while (v656);
    if (v657)
    {
LABEL_1321:
      if ((sub_1CD406BEC(a2) & 1) != 0 || !sub_1CD406BEC(v327)) {
        goto LABEL_2037;
      }
    }
    switch(v329)
    {
      case 141:
        __int16 v1055 = *(_WORD *)(v327 + 72);
        v1056 = *(llvm::APFloatBase **)(a3 + 16);
        if (!(v1055 & 0x40 | *(_WORD *)(*(void *)v1056 + 1020) & 1)) {
          goto LABEL_2037;
        }
        int v1057 = *(uint64_t **)(v327 + 32);
        uint64_t v1059 = *v1057;
        unint64_t v1058 = v1057[1];
        unsigned int v1061 = (uint64_t *)v1057[5];
        unint64_t v1060 = v1057[6];
        uint64_t v1063 = v1057[10];
        unint64_t v1062 = v1057[11];
        if (*(_WORD *)(*v1057 + 24) == 222)
        {
          uint64_t v1064 = *(void *)(v1059 + 32);
          uint64_t v1059 = *(void *)v1064;
          unint64_t v1058 = v1058 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1064 + 8);
        }
        else if (*((_WORD *)v1061 + 12) == 222)
        {
          uint64_t v1533 = v1061[4];
          unsigned int v1061 = *(uint64_t **)v1533;
          unint64_t v1060 = v1060 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1533 + 8);
        }
        else
        {
          unint64_t v3495 = v1057[1];
          uint64_t v1739 = *((void *)v1056 + 104);
          if (v1739) {
            __int16 v1740 = *(_WORD *)(v1739 + 8);
          }
          else {
            __int16 v1740 = 0;
          }
          unsigned int v1061 = sub_1CD7F3564(v1056, (const char *)0xDE, (uint64_t)&v3551, v82, v81, (uint64_t)v1061, (void *)v1060, v1740);
          unint64_t v1060 = v1060 & 0xFFFFFFFF00000000 | v2118;
          unint64_t v1058 = v3495;
        }
        if (*(_WORD *)(v1063 + 24) == 222)
        {
          uint64_t v2119 = *(void *)(v1063 + 32);
          v2120 = *(uint64_t **)v2119;
          unint64_t v2121 = v1062 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2119 + 8);
        }
        else
        {
          unint64_t v3497 = v1058;
          v2122 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2123 = *((void *)v2122 + 104);
          if (v2123) {
            __int16 v2124 = *(_WORD *)(v2123 + 8);
          }
          else {
            __int16 v2124 = 0;
          }
          v2120 = sub_1CD7F3564(v2122, (const char *)0xDE, (uint64_t)&v3551, v82, v81, v1063, (void *)v1062, v2124);
          unint64_t v2121 = v1062 & 0xFFFFFFFF00000000 | v2125;
          unint64_t v1058 = v3497;
        }
        v1894 = sub_1CD7F5D38(*(void **)(a3 + 16), (const char *)0x8D, (const llvm::APInt *)&v3551, v82, v81, v1059, v1058, a8, (uint64_t)v1061, v1060, (uint64_t)v2120, v2121, SHIDWORD(v2121), v1055);
        v1896 = v2126;
        *(void *)&long long v3553 = v1894;
        *((void *)&v3553 + 1) = v2126;
        uint64_t v2127 = *(void *)(v327 + 48);
        if (!v2127) {
          goto LABEL_2449;
        }
        int v1898 = 1;
        do
        {
          if (*(_DWORD *)(v2127 + 8) == v328)
          {
            if (!v1898) {
              goto LABEL_2449;
            }
            --v1898;
          }
          uint64_t v2127 = *(void *)(v2127 + 32);
        }
        while (v2127);
        break;
      case 98:
        v1049 = *(uint64_t **)(v327 + 32);
        uint64_t v1050 = *v1049;
        unint64_t v1051 = v1049[1];
        v1052 = (uint64_t *)v1049[5];
        unint64_t v1053 = v1049[6];
        if (*(_WORD *)(*v1049 + 24) == 222)
        {
          uint64_t v1054 = *(void *)(v1050 + 32);
          uint64_t v1050 = *(void *)v1054;
          unint64_t v1051 = v1051 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1054 + 8);
        }
        else if (*((_WORD *)v1052 + 12) == 222)
        {
          uint64_t v1226 = v1052[4];
          v1052 = *(uint64_t **)v1226;
          unint64_t v1053 = v1053 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1226 + 8);
        }
        else
        {
          v1530 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v1531 = *((void *)v1530 + 104);
          if (v1531) {
            __int16 v1532 = *(_WORD *)(v1531 + 8);
          }
          else {
            __int16 v1532 = 0;
          }
          v1052 = sub_1CD7F3564(v1530, (const char *)0xDE, (uint64_t)&v3551, v82, v81, (uint64_t)v1052, (void *)v1053, v1532);
          unint64_t v1053 = v1053 & 0xFFFFFFFF00000000 | v1893;
        }
        v1894 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)&v3551, v82, v81, v1050, v1051, a8, (uint64_t)v1052, v1053, *(_WORD *)(v327 + 72));
        v1896 = v1895;
        *(void *)&long long v3553 = v1894;
        *((void *)&v3553 + 1) = v1895;
        uint64_t v1897 = *(void *)(v327 + 48);
        if (!v1897) {
          goto LABEL_2449;
        }
        int v1898 = 1;
        do
        {
          if (*(_DWORD *)(v1897 + 8) == v328)
          {
            if (!v1898) {
              goto LABEL_2449;
            }
            --v1898;
          }
          uint64_t v1897 = *(void *)(v1897 + 32);
        }
        while (v1897);
        break;
      case 96:
        __int16 v658 = *(_WORD *)(v327 + 72);
        uint64_t v659 = *(llvm::APFloatBase **)(a3 + 16);
        if (!(v658 & 0x40 | *(_WORD *)(*(void *)v659 + 1020) & 1)) {
          goto LABEL_2037;
        }
        uint64_t v660 = *(uint64_t **)(v327 + 32);
        uint64_t v661 = *v660;
        unint64_t v662 = v660[1];
        uint64_t v664 = v660[5];
        unint64_t v663 = v660[6];
        if (*(_WORD *)(*v660 + 24) == 222)
        {
          uint64_t v665 = *(void *)(v661 + 32);
          unint64_t v666 = *(uint64_t **)v665;
          unint64_t v667 = v662 & 0xFFFFFFFF00000000 | *(unsigned int *)(v665 + 8);
        }
        else
        {
          uint64_t v1534 = *((void *)v659 + 104);
          if (v1534) {
            __int16 v1535 = *(_WORD *)(v1534 + 8);
          }
          else {
            __int16 v1535 = 0;
          }
          unint64_t v666 = sub_1CD7F3564(v659, (const char *)0xDE, (uint64_t)&v3551, v82, v81, v661, (void *)v662, v1535);
          unint64_t v667 = v662 & 0xFFFFFFFF00000000 | v1899;
        }
        if (*(_WORD *)(v664 + 24) == 222)
        {
          uint64_t v1900 = *(void *)(v664 + 32);
          v1901 = *(uint64_t **)v1900;
          unint64_t v1902 = v663 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1900 + 8);
        }
        else
        {
          v1903 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v1904 = *((void *)v1903 + 104);
          if (v1904) {
            __int16 v1905 = *(_WORD *)(v1904 + 8);
          }
          else {
            __int16 v1905 = 0;
          }
          v1901 = sub_1CD7F3564(v1903, (const char *)0xDE, (uint64_t)&v3551, v82, v81, v664, (void *)v663, v1905);
          unint64_t v1902 = v663 & 0xFFFFFFFF00000000 | v1906;
        }
        v1894 = sub_1CCFDED5C(*(void *)(a3 + 16), 96, (const llvm::APInt *)&v3551, v82, v81, (uint64_t)v666, v667, a8, (uint64_t)v1901, v1902, v658);
        v1896 = v1907;
        *(void *)&long long v3553 = v1894;
        *((void *)&v3553 + 1) = v1907;
        uint64_t v1908 = *(void *)(v327 + 48);
        if (v1908)
        {
          int v1898 = 1;
          do
          {
            if (*(_DWORD *)(v1908 + 8) == v328)
            {
              if (!v1898) {
                goto LABEL_2449;
              }
              --v1898;
            }
            uint64_t v1908 = *(void *)(v1908 + 32);
          }
          while (v1908);
          break;
        }
LABEL_2449:
        uint64_t v2128 = *(void *)(a3 + 16);
        uint64_t v2129 = *(void *)(v2128 + 832);
        if (v2129) {
          __int16 v2130 = *(_WORD *)(v2129 + 8);
        }
        else {
          __int16 v2130 = 0;
        }
        v2131 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)&v3551, v82, v81, (uint64_t)v1894, v1896, v2130);
        sub_1CD801F28(v2128, v327, v328, (uint64_t)v2131, v2132);
        goto LABEL_2038;
      default:
        goto LABEL_2037;
    }
    if (!v1898) {
      goto LABEL_2038;
    }
    goto LABEL_2449;
  }
  if (v12 == 231)
  {
    uint64_t v334 = **(void **)(a2 + 32);
    int v335 = *(unsigned __int16 *)(v334 + 24);
    if (v335 != 36 && v335 != 12) {
      goto LABEL_2037;
    }
    uint64_t v337 = *(uint64_t **)(a2 + 40);
    uint64_t v128 = *v337;
    uint64_t v129 = v337[1];
    uint64_t v338 = *(void *)(v334 + 80);
    uint64_t v339 = *(void *)(v338 + 32);
    if ((_UNKNOWN *)v339 == &unk_1CFB2E344)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], (const llvm::detail::DoubleAPFloat *)(v338 + 32));
    }
    else
    {
      v3555[1] = *(void **)(v338 + 32);
      if ((*(_DWORD *)(v339 + 8) + 64) >= 0x80) {
        operator new[]();
      }
      char v340 = *(unsigned char *)(v338 + 52);
      int v341 = v340 & 7;
      BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v340 & 0xF;
      LODWORD(v3557) = *(_DWORD *)(v338 + 48);
      BOOL v343 = (v340 & 6) != 0 && v341 != 3;
      if (v341 == 1 || v343)
      {
        uint64_t v345 = *((unsigned int *)v3555[1] + 2);
        if ((v345 - 64) <= 0xFFFFFF7F) {
          uint64_t v346 = (uint64_t **)v3556;
        }
        else {
          uint64_t v346 = &v3556;
        }
        BOOL v349 = *(uint64_t ***)(v338 + 40);
        int v348 = (uint64_t **)(v338 + 40);
        uint64_t v347 = v349;
        if ((*((_DWORD *)*(v348 - 1) + 2) - 64) >= 0xFFFFFF80) {
          uint64_t v347 = v348;
        }
        if (v345 <= 0xFFFFFFBF)
        {
          unint64_t v350 = (unint64_t)(v345 + 64) >> 6;
          do
          {
            uint64_t v351 = *v347++;
            *v346++ = v351;
            --v350;
          }
          while (v350);
        }
      }
    }
    llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, v3569);
    double v352 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3555);
    uint64_t v145 = *(void *)(a3 + 16);
    double v146 = log2(v352);
  }
  else
  {
    if (v12 != 234) {
      goto LABEL_2037;
    }
    uint64_t v124 = **(void **)(a2 + 32);
    int v125 = *(unsigned __int16 *)(v124 + 24);
    if (v125 != 36 && v125 != 12) {
      goto LABEL_2037;
    }
    uint64_t v127 = *(uint64_t **)(a2 + 40);
    uint64_t v128 = *v127;
    uint64_t v129 = v127[1];
    uint64_t v130 = *(void *)(v124 + 80);
    uint64_t v131 = *(void *)(v130 + 32);
    if ((_UNKNOWN *)v131 == &unk_1CFB2E344)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3555[1], (const llvm::detail::DoubleAPFloat *)(v130 + 32));
    }
    else
    {
      v3555[1] = *(void **)(v130 + 32);
      if ((*(_DWORD *)(v131 + 8) + 64) >= 0x80) {
        operator new[]();
      }
      char v132 = *(unsigned char *)(v130 + 52);
      int v133 = v132 & 7;
      BYTE4(v3557) = BYTE4(v3557) & 0xF0 | v132 & 0xF;
      LODWORD(v3557) = *(_DWORD *)(v130 + 48);
      BOOL v135 = (v132 & 6) != 0 && v133 != 3;
      if (v133 == 1 || v135)
      {
        uint64_t v137 = *((unsigned int *)v3555[1] + 2);
        if ((v137 - 64) <= 0xFFFFFF7F) {
          uint64_t v138 = (uint64_t **)v3556;
        }
        else {
          uint64_t v138 = &v3556;
        }
        unsigned int v141 = *(uint64_t ***)(v130 + 40);
        unsigned int v140 = (uint64_t **)(v130 + 40);
        int v139 = v141;
        if ((*((_DWORD *)*(v140 - 1) + 2) - 64) >= 0xFFFFFF80) {
          int v139 = v140;
        }
        if (v137 <= 0xFFFFFFBF)
        {
          unint64_t v142 = (unint64_t)(v137 + 64) >> 6;
          do
          {
            unint64_t v143 = *v139++;
            *v138++ = v143;
            --v142;
          }
          while (v142);
        }
      }
    }
    llvm::APFloat::convert((uint64_t)v3555, &unk_1CFB2E31C, 1, v3569);
    double v144 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3555);
    uint64_t v145 = *(void *)(a3 + 16);
    double v146 = exp2(v144);
  }
  *(void *)&long long v3553 = sub_1CD7ECDC4(v145, (uint64_t)&v3551, v128, v129, 0, v146);
  *((void *)&v3553 + 1) = v353;
  uint64_t v354 = v3555[1];
  if (v3555[1] == &unk_1CFB2E344)
  {
LABEL_3667:
    sub_1CB845718((uint64_t *)&v3556);
    goto LABEL_2038;
  }
LABEL_949:
  if ((v354[2] - 64) <= 0xFFFFFF7F)
  {
    uint64_t v263 = v3556;
    if (v3556) {
      goto LABEL_254;
    }
  }
LABEL_2038:
  if (v3551)
  {
    int v1781 = *v3551;
    if ((v1781 - 4) > 0x1E)
    {
      if ((v1781 - 3) >= 0xFFFFFFFE) {
        v1783 = v3551;
      }
      else {
        v1783 = 0;
      }
      if ((v1781 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v1784 = (unint64_t)(v1783 + 8);
LABEL_2048:
        v3555[0] = &v3551;
        sub_1CC5FA668(v1784 + 16, v3555);
        return v3553;
      }
      if (v1781 == 3) {
        *((void *)v3551 + 1) = 0;
      }
    }
    else if ((v3551[1] & 0x7F) == 2 || *((_DWORD *)v3551 + 3))
    {
      uint64_t v2078 = *((void *)v3551 + 2);
      if ((v2078 & 4) != 0)
      {
        unint64_t v1784 = v2078 & 0xFFFFFFFFFFFFFFF8;
        if (v1784) {
          goto LABEL_2048;
        }
      }
    }
  }
  return v3553;
}

uint64_t *sub_1CB9E4120(int a1, int a2, uint64_t a3, uint64_t a4, llvm::APFloatBase *a5)
{
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(void *)(v9 + 40);
  int v11 = *(void **)(v9 + 48);
  unsigned int v12 = *(unsigned __int16 *)(v10 + 24);
  if (v12 > 0xC8)
  {
    if (v12 == 201)
    {
      uint64_t v13 = **(void **)(v10 + 32);
      if (*(_WORD *)(v13 + 24) == 193) {
        goto LABEL_44;
      }
    }
    goto LABEL_34;
  }
  uint64_t v13 = v10;
  if (v12 == 193) {
    goto LABEL_44;
  }
  if (v12 != 11 && v12 != 35)
  {
LABEL_34:
    uint64_t v13 = v10;
    if (**(unsigned char **)(v10 + 40) == 2)
    {
      uint64_t v25 = *(unsigned __int8 **)(a3 + 64);
      uint64_t v159 = v25;
      if (v25) {
        llvm::MetadataTracking::track((uint64_t)&v159, v25, 2);
      }
      int v160 = *(_DWORD *)(a3 + 60);
      unint64_t v22 = sub_1CB9F9548(a1, a2, v10, v11, a5, (uint64_t)&v159);
      uint64_t v26 = v159;
      if (!v159) {
        return v22;
      }
      int v27 = *v159;
      if ((v27 - 4) <= 0x1E)
      {
        if ((v159[1] & 0x7F) != 2 && !*((_DWORD *)v159 + 3)) {
          return v22;
        }
        uint64_t v28 = *((void *)v159 + 2);
        if ((v28 & 4) == 0) {
          return v22;
        }
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if (!v29) {
          return v22;
        }
        goto LABEL_93;
      }
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v50 = v159;
      }
      else {
        uint64_t v50 = 0;
      }
      if ((v27 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v50 + 8);
LABEL_93:
        uint64_t v51 = (uint64_t *)&v159;
LABEL_270:
        uint64_t v149 = v51;
        sub_1CC5FA668(v29 + 16, &v149);
        return v22;
      }
LABEL_271:
      if (v27 == 3) {
        *((void *)v26 + 1) = 0;
      }
      return v22;
    }
LABEL_44:
    int v30 = *(uint64_t **)(v13 + 32);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v34 = v30[5];
    uint64_t v33 = v30[6];
    if (a1) {
      char v35 = 4;
    }
    else {
      char v35 = 5;
    }
    unsigned __int8 v127 = v35;
    int v128 = v31;
    uint64_t v36 = *(unsigned __int8 **)(a3 + 64);
    uint64_t v157 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v157, v36, 2);
    }
    int v37 = *(_DWORD *)(a3 + 60);
    int v158 = v37;
    uint64_t v38 = *(void **)(v32 + 40);
    int v39 = *v38;
    if (*v38)
    {
      BOOL v40 = (v39 - 120) >= 0x20 && (v39 - 2) >= 6;
      if (v40 && (v39 - 15) >= 0x3C) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v41 = v38[1];
      if ((*(_DWORD *)(v41 + 8) & 0xFE) == 0x12) {
        int v42 = *(unsigned __int8 *)(**(void **)(v41 + 16) + 8);
      }
      else {
        int v42 = *(_DWORD *)(v41 + 8);
      }
      if (v42 != 13) {
        goto LABEL_76;
      }
    }
    if ((*v38 & 0xFELL) != 4)
    {
      uint64_t v155 = v157;
      if (v157)
      {
        llvm::MetadataTracking::track((uint64_t)&v155, v157, 2);
        int v37 = v158;
      }
      int v156 = v37;
      unint64_t v22 = sub_1CB9F9548(a1, a2, v10, v11, a5, (uint64_t)&v155);
      if (v155)
      {
        int v43 = *v155;
        if ((v43 - 4) > 0x1E)
        {
          if ((v43 - 3) >= 0xFFFFFFFE) {
            uint64_t v46 = v155;
          }
          else {
            uint64_t v46 = 0;
          }
          if ((v43 - 3) < 0xFFFFFFFE)
          {
            if (v43 == 3) {
              *((void *)v155 + 1) = 0;
            }
            goto LABEL_257;
          }
          unint64_t v45 = (unint64_t)(v46 + 8);
        }
        else
        {
          if ((v155[1] & 0x7F) != 2 && !*((_DWORD *)v155 + 3)) {
            goto LABEL_257;
          }
          uint64_t v44 = *((void *)v155 + 2);
          if ((v44 & 4) == 0) {
            goto LABEL_257;
          }
          unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
          if (!v45) {
            goto LABEL_257;
          }
        }
        uint64_t v149 = (uint64_t *)&v155;
        sub_1CC5FA668(v45 + 16, &v149);
      }
LABEL_257:
      uint64_t v26 = v157;
      if (!v157) {
        return v22;
      }
      int v27 = *v157;
      if ((v27 - 4) > 0x1E)
      {
        if ((v27 - 3) >= 0xFFFFFFFE) {
          uint64_t v119 = v157;
        }
        else {
          uint64_t v119 = 0;
        }
        if ((v27 - 3) < 0xFFFFFFFE) {
          goto LABEL_271;
        }
        unint64_t v29 = (unint64_t)(v119 + 8);
      }
      else
      {
        if ((v157[1] & 0x7F) != 2 && !*((_DWORD *)v157 + 3)) {
          return v22;
        }
        uint64_t v118 = *((void *)v157 + 2);
        if ((v118 & 4) == 0) {
          return v22;
        }
        unint64_t v29 = v118 & 0xFFFFFFFFFFFFFFF8;
        if (!v29) {
          return v22;
        }
      }
      uint64_t v51 = (uint64_t *)&v157;
      goto LABEL_270;
    }
LABEL_76:
    BOOL v47 = 1;
    sub_1CD3FC878((uint64_t)&v149, (uint64_t)a5, v32, v128, 0, 1, 1);
    sub_1CD3FC878((uint64_t)&v143, (uint64_t)a5, v34, v33, 0, 1, 1);
    if (!v154 && !v148 && (v152 & 0xFFFFFFFD) != 5) {
      BOOL v47 = (v146 & 0xFFFFFFFD) == 5;
    }
    int v142 = 0;
    uint64_t v48 = *(unsigned int *)(*(void *)(*(void *)(v13 + 32) + 80) + 76);
    if ((v152 | 2) == 2)
    {
      sub_1CB9F9888(v149, v150, (uint64_t)&v149, (uint64_t)&v151, (unsigned int *)&v149, (uint64_t)a5);
      int v152 = 1;
      int v49 = *((unsigned __int16 *)v149 + 12);
      if (v149 && v49 == 45)
      {
        if (*((_DWORD *)v149 + 20) == 64) {
          int v152 = 3;
        }
        unsigned int v153 = dword_1CDB0D7C4[*((int *)v149 + 19) - 1];
      }
      else
      {
        if (v49 == 35) {
          int v152 = 6;
        }
        long long v138 = *(_OWORD *)(v149[5] + 16 * v150);
        if ((_BYTE)v138) {
          unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v138);
        }
        else {
          unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v138);
        }
        unsigned int v54 = ExtendedSizeInBits;
        if (v53 == 1) {
        unsigned int v153 = v54;
        }
      }
    }
    if ((v146 | 2) == 2)
    {
      sub_1CB9F9888(v143, v144, (uint64_t)&v143, (uint64_t)&v145, (unsigned int *)&v143, (uint64_t)a5);
      int v146 = 1;
      int v55 = *((unsigned __int16 *)v143 + 12);
      if (v143 && v55 == 45)
      {
        if (*((_DWORD *)v143 + 20) == 64) {
          int v146 = 3;
        }
        unsigned int v147 = dword_1CDB0D7C4[*((int *)v143 + 19) - 1];
      }
      else
      {
        if (v55 == 35) {
          int v146 = 6;
        }
        long long v138 = *(_OWORD *)(v143[5] + 16 * v144);
        if ((_BYTE)v138) {
          unsigned int v56 = sub_1CB87E200((unsigned __int8 *)&v138);
        }
        else {
          unsigned int v56 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v138);
        }
        unsigned int v58 = v56;
        if (v57 == 1) {
        unsigned int v147 = v58;
        }
      }
    }
    if ((v48 - 7) > 2)
    {
      int v75 = sub_1CB9F97C0(a1, a2, (uint64_t)&v149, (uint64_t)&v143);
      LOBYTE(v161[0]) = 0;
      if (v47)
      {
        uint64_t v76 = sub_1CBA9F5F0(v48, v161) - 1;
        int v77 = 0;
        switch(v76)
        {
          case 1:
            int v77 = 2;
            break;
          case 2:
            int v77 = 5;
            break;
          case 3:
            int v77 = 1;
            break;
          case 4:
            int v77 = 6;
            break;
          case 5:
            int v84 = LOBYTE(v161[0]);
            goto LABEL_189;
          default:
            break;
        }
        int v84 = LOBYTE(v161[0]);
      }
      else
      {
        LOBYTE(v161[0]) = 1;
        int v83 = v48 - 11;
        if (v48 - 11) < 0xC && ((0xD0Du >> v83))
        {
          LODWORD(v48) = dword_1CDB0D57C[v83];
          int v84 = 1;
        }
        else
        {
          int v84 = 0;
          LOBYTE(v161[0]) = 0;
        }
        int v77 = sub_1CBA9F5DC(v48);
        if ((v77 & 0xF) == 4)
        {
LABEL_189:
          int v77 = 0;
          v84 ^= 1u;
          LOBYTE(v161[0]) = v84;
        }
      }
      int v142 = v77 | (16 * (v84 != 0));
      uint64_t v129 = v157;
      if (v157) {
        llvm::MetadataTracking::track((uint64_t)&v129, v157, 2);
      }
      int v130 = v158;
      unint64_t v22 = sub_1CD40A4DC((uint64_t)a5, v75, (uint64_t)&v129, v127, 0, (unsigned int *)&v142, (uint64_t)&v149, (uint64_t)&v143);
      unsigned int v79 = v129;
      if (!v129) {
        goto LABEL_257;
      }
      int v80 = *v129;
      if ((v80 - 4) > 0x1E)
      {
        if ((v80 - 3) >= 0xFFFFFFFE) {
          int v117 = v129;
        }
        else {
          int v117 = 0;
        }
        if ((v80 - 3) < 0xFFFFFFFE) {
          goto LABEL_255;
        }
        unint64_t v82 = (unint64_t)(v117 + 8);
      }
      else
      {
        if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
          goto LABEL_257;
        }
        uint64_t v116 = *((void *)v129 + 2);
        if ((v116 & 4) == 0) {
          goto LABEL_257;
        }
        unint64_t v82 = v116 & 0xFFFFFFFFFFFFFFF8;
        if (!v82) {
          goto LABEL_257;
        }
      }
      int v114 = &v129;
    }
    else
    {
      int v59 = *(_WORD *)(*(void *)a5 + 1020) & 1;
      unsigned int v60 = *(unsigned __int16 *)(v13 + 72);
      int v61 = *(unsigned __int16 *)(v13 + 24);
      int v62 = *(_WORD *)(*(void *)a5 + 1020) & 1 | ((v60 & 0x10) != 0);
      if ((~v60 & 0x3C0) != 0) {
        int v63 = 0;
      }
      else {
        int v63 = (v60 >> 10) & 1;
      }
      int v64 = v63 | v59;
      if (v61 == 192) {
        int v59 = v64;
      }
      if (v61 == 428) {
        int v65 = v62;
      }
      else {
        int v65 = v59;
      }
      int v125 = sub_1CD7EBF14((uint64_t)a5, 1, (const llvm::APInt *)&v157, (llvm *)4, 0, 0, 0);
      int v126 = v66;
      int v67 = sub_1CD7EBF14((uint64_t)a5, 0, (const llvm::APInt *)&v157, (llvm *)4, 0, 0, 0);
      if (!v65)
      {
        uint64_t v69 = (uint64_t)v67;
        int v70 = v68;
        if (v48 == 7)
        {
          uint64_t v123 = sub_1CD7EE368(a5, 7u);
          uint64_t v73 = sub_1CD7F6564(a5, (const char *)0xC0, (const llvm::APInt *)&v157, (llvm *)4, 0, v32, v128, v72, v34, v33, (uint64_t)v125, v126, v69, v70, v123, v71);
        }
        else
        {
          uint64_t v85 = sub_1CD7EE368(a5, 8u);
          __int16 v88 = sub_1CD7F6564(a5, (const char *)0xC0, (const llvm::APInt *)&v157, (llvm *)4, 0, v32, v128, v87, v34, v33, (uint64_t)v125, v126, v69, v70, v85, v86);
          int v90 = v89;
          if (v48 != 9)
          {
LABEL_147:
            sub_1CD3FC878((uint64_t)&v138, (uint64_t)a5, (uint64_t)v88, v90, 0, 1, 1);
            if ((v140 | 2) == 2)
            {
              sub_1CB9F9888((uint64_t *)v138, *((uint64_t *)&v138 + 1), (uint64_t)&v138, (uint64_t)&v139, (unsigned int *)&v138, (uint64_t)a5);
              int v140 = 1;
              int v93 = *(unsigned __int16 *)(v138 + 24);
              if ((void)v138 && v93 == 45)
              {
                if (*(_DWORD *)(v138 + 80) == 64) {
                  int v140 = 3;
                }
                unsigned int v141 = dword_1CDB0D7C4[*(int *)(v138 + 76) - 1];
              }
              else
              {
                if (v93 == 35) {
                  int v140 = 6;
                }
                *(_OWORD *)unsigned int v161 = *(_OWORD *)(*(void *)(v138 + 40) + 16 * DWORD2(v138));
                if (LOBYTE(v161[0])) {
                  unsigned int v102 = sub_1CB87E200((unsigned __int8 *)v161);
                }
                else {
                  unsigned int v102 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v161);
                }
                unsigned int v104 = v102;
                if (v103 == 1) {
                unsigned int v141 = v104;
                }
              }
            }
            if (a1) {
              int v105 = 5017;
            }
            else {
              int v105 = 5008;
            }
            if (a1) {
              int v106 = 5357;
            }
            else {
              int v106 = 5348;
            }
            if (a2 == 2488) {
              int v107 = v105;
            }
            else {
              int v107 = v106;
            }
            unsigned int v137 = 8;
            BOOL v135 = v157;
            if (v157) {
              llvm::MetadataTracking::track((uint64_t)&v135, v157, 2);
            }
            int v136 = v158;
            v161[0] = 1;
            unint64_t v22 = sub_1CD40A3D4((uint64_t)a5, v107, (uint64_t)&v135, v127, 0, &v137, (uint64_t)&v138, (int *)v161);
            unsigned int v79 = v135;
            if (!v135) {
              goto LABEL_257;
            }
            int v80 = *v135;
            if ((v80 - 4) <= 0x1E)
            {
              if ((v135[1] & 0x7F) == 2 || *((_DWORD *)v135 + 3))
              {
                uint64_t v108 = *((void *)v135 + 2);
                if ((v108 & 4) != 0)
                {
                  unint64_t v109 = v108 & 0xFFFFFFFFFFFFFFF8;
                  if (v109) {
                    goto LABEL_218;
                  }
                }
              }
              goto LABEL_257;
            }
            if ((v80 - 3) >= 0xFFFFFFFE) {
              uint64_t v110 = v135;
            }
            else {
              uint64_t v110 = 0;
            }
            if ((v80 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v109 = (unint64_t)(v110 + 8);
LABEL_218:
              *(void *)unsigned int v161 = &v135;
              uint64_t v111 = v109 + 16;
              uint64_t v112 = (long long *)v161;
LABEL_254:
              sub_1CC5FA668(v111, v112);
              goto LABEL_257;
            }
LABEL_255:
            if (v80 == 3) {
              *((void *)v79 + 1) = 0;
            }
            goto LABEL_257;
          }
          uint64_t v124 = sub_1CD7EE368(a5, 0x11u);
          uint64_t v73 = sub_1CD7F6564(a5, (const char *)0xC0, (const llvm::APInt *)&v157, (llvm *)4, 0, v32, v128, v92, v34, v33, (uint64_t)v125, v126, (uint64_t)v88, v90, v124, v91);
        }
        __int16 v88 = v73;
        int v90 = v74;
        goto LABEL_147;
      }
      int v142 = 0;
      if (v48 == 9)
      {
        int v78 = sub_1CB9F97C0(a1, a2, (uint64_t)&v149, (uint64_t)&v143);
        int v133 = v157;
        if (v157) {
          llvm::MetadataTracking::track((uint64_t)&v133, v157, 2);
        }
        int v134 = v158;
        unint64_t v22 = sub_1CD40A4DC((uint64_t)a5, v78, (uint64_t)&v133, v127, 0, (unsigned int *)&v142, (uint64_t)&v149, (uint64_t)&v143);
        unsigned int v79 = v133;
        if (!v133) {
          goto LABEL_257;
        }
        int v80 = *v133;
        if ((v80 - 4) > 0x1E)
        {
          if ((v80 - 3) >= 0xFFFFFFFE) {
            uint64_t v113 = v133;
          }
          else {
            uint64_t v113 = 0;
          }
          if ((v80 - 3) < 0xFFFFFFFE) {
            goto LABEL_255;
          }
          unint64_t v82 = (unint64_t)(v113 + 8);
        }
        else
        {
          if ((v133[1] & 0x7F) != 2 && !*((_DWORD *)v133 + 3)) {
            goto LABEL_257;
          }
          uint64_t v81 = *((void *)v133 + 2);
          if ((v81 & 4) == 0) {
            goto LABEL_257;
          }
          unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
          if (!v82) {
            goto LABEL_257;
          }
        }
        int v114 = &v133;
      }
      else
      {
        if (a1) {
          int v94 = 4993;
        }
        else {
          int v94 = 4984;
        }
        if (a1) {
          int v95 = 5333;
        }
        else {
          int v95 = 5324;
        }
        if (a2 == 2488) {
          int v96 = v94;
        }
        else {
          int v96 = v95;
        }
        v161[0] = 1;
        unsigned int v137 = v48 == 7;
        uint64_t v131 = v157;
        if (v157) {
          llvm::MetadataTracking::track((uint64_t)&v131, v157, 2);
        }
        int v132 = v158;
        unint64_t v22 = sub_1CD40A5B4((uint64_t)a5, v96, (uint64_t)&v131, v127, 0, (unsigned int *)&v142, v161, &v137);
        unsigned int v79 = v131;
        if (!v131) {
          goto LABEL_257;
        }
        int v80 = *v131;
        if ((v80 - 4) > 0x1E)
        {
          if ((v80 - 3) >= 0xFFFFFFFE) {
            int v115 = v131;
          }
          else {
            int v115 = 0;
          }
          if ((v80 - 3) < 0xFFFFFFFE) {
            goto LABEL_255;
          }
          unint64_t v82 = (unint64_t)(v115 + 8);
        }
        else
        {
          if ((v131[1] & 0x7F) != 2 && !*((_DWORD *)v131 + 3)) {
            goto LABEL_257;
          }
          uint64_t v97 = *((void *)v131 + 2);
          if ((v97 & 4) == 0) {
            goto LABEL_257;
          }
          unint64_t v82 = v97 & 0xFFFFFFFFFFFFFFF8;
          if (!v82) {
            goto LABEL_257;
          }
        }
        int v114 = &v131;
      }
    }
    *(void *)&long long v138 = v114;
    uint64_t v111 = v82 + 16;
    uint64_t v112 = &v138;
    goto LABEL_254;
  }
  if (a1) {
    int v14 = 5011;
  }
  else {
    int v14 = 5002;
  }
  if (a1) {
    int v15 = 5351;
  }
  else {
    int v15 = 5342;
  }
  if (a2 == 2488) {
    int v16 = v14;
  }
  else {
    int v16 = v15;
  }
  uint64_t v17 = *(uint64_t **)(a3 + 64);
  uint64_t v149 = v17;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v149, (unsigned __int8 *)v17, 2);
    uint64_t v10 = *(void *)(*(void *)(a3 + 32) + 40);
  }
  int v18 = *(_DWORD *)(a3 + 60);
  LODWORD(v150) = v18;
  v161[0] = 24;
  uint64_t v19 = *(void *)(v10 + 80);
  unsigned int v20 = (void *)(v19 + 24);
  if (*(_DWORD *)(v19 + 32) >= 0x41u) {
    unsigned int v20 = (void *)*v20;
  }
  LODWORD(v157) = *v20;
  unint64_t v143 = v149;
  if (v149)
  {
    llvm::MetadataTracking::track((uint64_t)&v143, (unsigned __int8 *)v149, 2);
    int v18 = v150;
  }
  LODWORD(v144) = v18;
  LODWORD(v138) = 0;
  if (a1) {
    unsigned __int8 v21 = 4;
  }
  else {
    unsigned __int8 v21 = 5;
  }
  unint64_t v22 = sub_1CD40A6BC((uint64_t)a5, v16, (uint64_t)&v143, v21, 0, v161, (unsigned int *)&v157, (int *)&v138);
  if (v143)
  {
    int v23 = *(unsigned __int8 *)v143;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v98 = v143;
      }
      else {
        uint64_t v98 = 0;
      }
      if ((v23 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v99 = (unint64_t)(v98 + 1);
LABEL_176:
        *(void *)&long long v138 = &v143;
        sub_1CC5FA668(v99 + 16, &v138);
        goto LABEL_27;
      }
      if (v23 == 3) {
        v143[1] = 0;
      }
    }
    else if ((*((unsigned char *)v143 + 1) & 0x7F) == 2 || *((_DWORD *)v143 + 3))
    {
      uint64_t v121 = v143[2];
      if ((v121 & 4) != 0)
      {
        unint64_t v99 = v121 & 0xFFFFFFFFFFFFFFF8;
        if (v99) {
          goto LABEL_176;
        }
      }
    }
  }
LABEL_27:
  if (!v149) {
    return v22;
  }
  int v24 = *(unsigned __int8 *)v149;
  if ((v24 - 4) > 0x1E)
  {
    if ((v24 - 3) >= 0xFFFFFFFE) {
      uint64_t v100 = v149;
    }
    else {
      uint64_t v100 = 0;
    }
    if ((v24 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v101 = (unint64_t)(v100 + 1);
LABEL_182:
      *(void *)&long long v138 = &v149;
      sub_1CC5FA668(v101 + 16, &v138);
      return v22;
    }
    if (v24 == 3) {
      v149[1] = 0;
    }
  }
  else if ((*((unsigned char *)v149 + 1) & 0x7F) == 2 || *((_DWORD *)v149 + 3))
  {
    uint64_t v122 = v149[2];
    if ((v122 & 4) != 0)
    {
      unint64_t v101 = v122 & 0xFFFFFFFFFFFFFFF8;
      if (v101) {
        goto LABEL_182;
      }
    }
  }
  return v22;
}

uint64_t *sub_1CB9E4F8C(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v76 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v76, v6, 2);
  }
  int v77 = *(_DWORD *)(a1 + 60);
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 16 * v5);
  if (v7 == 6)
  {
    int v16 = *(uint64_t **)(a1 + 32);
    uint64_t v17 = v16[5];
    int v18 = *(unsigned __int16 *)(v17 + 24);
    if (v18 == 35 || v18 == 11)
    {
      uint64_t v20 = *(void *)(v17 + 80);
      unsigned __int8 v21 = (void *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u) {
        unsigned __int8 v21 = (void *)*v21;
      }
      unint64_t v22 = v16[1];
      if (*v21 == 32)
      {
        uint64_t v36 = *v16;
        uint64_t v37 = *((void *)a3 + 104);
        if (v37) {
          __int16 v38 = *(_WORD *)(v37 + 8);
        }
        else {
          __int16 v38 = 0;
        }
        int v39 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v76, (llvm *)0x31, 0, v36, (void *)v22, v38);
        uint64_t v41 = v40;
        int v42 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v76, (llvm *)5, 0, 0, 0);
        uint64_t v45 = *((void *)a3 + 104);
        if (v45) {
          LOWORD(v45) = *(_WORD *)(v45 + 8);
        }
        uint64_t v46 = sub_1CCFDED5C((uint64_t)a3, 148, (const llvm::APInt *)&v76, (llvm *)5, 0, (uint64_t)v39, v41, v44, (uint64_t)v42, v43, v45);
        uint64_t v48 = v47;
        if (*(_WORD *)(a1 + 24) == 177) {
          uint64_t v49 = 199;
        }
        else {
          uint64_t v49 = 198;
        }
        uint64_t v50 = *((void *)a3 + 104);
        if (v50) {
          __int16 v51 = *(_WORD *)(v50 + 8);
        }
        else {
          __int16 v51 = 0;
        }
        unsigned int v52 = a3;
      }
      else
      {
        if (*(_WORD *)(a1 + 24) != 177) {
          goto LABEL_30;
        }
        uint64_t v23 = *v16;
        if (*(_WORD *)(*v16 + 24) != 199) {
          goto LABEL_30;
        }
        long long v75 = *(_OWORD *)(*(void *)(**(void **)(v23 + 32) + 40)
                        + 16 * *(unsigned int *)(*(void *)(v23 + 32) + 8));
        if ((_BYTE)v75) {
          unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v75);
        }
        else {
          unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v75);
        }
        if (v25 == 1)
        {
          unint64_t v74 = ExtendedSizeInBits;
          unint64_t ExtendedSizeInBits = v74;
        }
        if (ExtendedSizeInBits > 0x20) {
          goto LABEL_30;
        }
        uint64_t v53 = *((void *)a3 + 104);
        if (v53) {
          __int16 v54 = *(_WORD *)(v53 + 8);
        }
        else {
          __int16 v54 = 0;
        }
        int v55 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v76, (llvm *)5, 0, v23, (void *)v22, v54);
        __int16 v57 = 0;
        unint64_t v59 = v22 & 0xFFFFFFFF00000000 | v58;
        uint64_t v60 = *(void *)(a1 + 32);
        uint64_t v61 = *(void *)(v60 + 40);
        uint64_t v62 = *(void *)(v60 + 48);
        uint64_t v63 = *((void *)a3 + 104);
        if (v63) {
          __int16 v57 = *(_WORD *)(v63 + 8);
        }
        int v64 = sub_1CCFDED5C((uint64_t)a3, 177, (const llvm::APInt *)&v76, (llvm *)5, 0, (uint64_t)v55, v59, v56, v61, v62, v57);
        uint64_t v66 = v65;
        int v67 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v76, (llvm *)5, 0, 0, 0);
        uint64_t v70 = *((void *)a3 + 104);
        if (v70) {
          LOWORD(v70) = *(_WORD *)(v70 + 8);
        }
        uint64_t v46 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v76, (llvm *)0x31, 0, (uint64_t)v64, v66, v69, (uint64_t)v67, v68, v70);
        uint64_t v48 = v71;
        uint64_t v72 = *((void *)a3 + 104);
        if (v72) {
          __int16 v51 = *(_WORD *)(v72 + 8);
        }
        else {
          __int16 v51 = 0;
        }
        unsigned int v52 = a3;
        uint64_t v49 = 216;
      }
      int v30 = sub_1CD7F3564(v52, (const char *)v49, (uint64_t)&v76, (llvm *)6, 0, (uint64_t)v46, v48, v51);
LABEL_25:
      uint64_t v31 = v30;
      goto LABEL_31;
    }
  }
  else if (v7 == 5)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 32);
    uint64_t v9 = *v8;
    if (*(unsigned char *)(*(void *)(*v8 + 40) + 16 * *((unsigned int *)v8 + 2)) == 5)
    {
      uint64_t v10 = v8[5];
      if (*(unsigned char *)(*(void *)(v10 + 40) + 16 * *((unsigned int *)v8 + 12)) == 6)
      {
        uint64_t v11 = *(unsigned __int16 *)(a1 + 24);
        uint64_t v12 = v8[1];
        uint64_t v13 = (void *)v8[6];
        uint64_t v14 = *((void *)a3 + 104);
        if (v14) {
          __int16 v15 = *(_WORD *)(v14 + 8);
        }
        else {
          __int16 v15 = 0;
        }
        uint64_t v26 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v76, (llvm *)5, 0, v10, v13, v15);
        uint64_t v29 = *((void *)a3 + 104);
        if (v29) {
          LOWORD(v29) = *(_WORD *)(v29 + 8);
        }
        int v30 = sub_1CCFDED5C((uint64_t)a3, v11, (const llvm::APInt *)&v76, (llvm *)5, 0, v9, v12, v28, (uint64_t)v26, v27, v29);
        goto LABEL_25;
      }
    }
  }
LABEL_30:
  uint64_t v31 = 0;
LABEL_31:
  if (v76)
  {
    int v32 = *v76;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v34 = v76;
      }
      else {
        uint64_t v34 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v35 = (unint64_t)(v34 + 8);
LABEL_41:
        *(void *)&long long v75 = &v76;
        sub_1CC5FA668(v35 + 16, &v75);
        return v31;
      }
      if (v32 == 3) {
        *((void *)v76 + 1) = 0;
      }
    }
    else if ((v76[1] & 0x7F) == 2 || *((_DWORD *)v76 + 3))
    {
      uint64_t v73 = *((void *)v76 + 2);
      if ((v73 & 4) != 0)
      {
        unint64_t v35 = v73 & 0xFFFFFFFFFFFFFFF8;
        if (v35) {
          goto LABEL_41;
        }
      }
    }
  }
  return v31;
}

uint64_t *sub_1CB9E53D4(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v76 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v76, v6, 2);
  }
  int v77 = *(_DWORD *)(a1 + 60);
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 16 * v5);
  if (v7 == 5)
  {
    int v16 = *(uint64_t **)(a1 + 32);
    uint64_t v17 = *v16;
    if (*(unsigned char *)(*(void *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2)) == 5)
    {
      uint64_t v18 = v16[5];
      if (*(unsigned char *)(*(void *)(v18 + 40) + 16 * *((unsigned int *)v16 + 12)) == 6)
      {
        uint64_t v19 = *(unsigned __int16 *)(a1 + 24);
        uint64_t v20 = v16[1];
        unsigned __int8 v21 = (void *)v16[6];
        uint64_t v22 = *((void *)a3 + 104);
        if (v22) {
          __int16 v23 = *(_WORD *)(v22 + 8);
        }
        else {
          __int16 v23 = 0;
        }
        uint64_t v29 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v76, (llvm *)5, 0, v18, v21, v23);
        uint64_t v32 = *((void *)a3 + 104);
        if (v32) {
          LOWORD(v32) = *(_WORD *)(v32 + 8);
        }
        uint64_t v33 = sub_1CCFDED5C((uint64_t)a3, v19, (const llvm::APInt *)&v76, (llvm *)5, 0, v17, v20, v31, (uint64_t)v29, v30, v32);
        goto LABEL_54;
      }
    }
LABEL_17:
    int v24 = 0;
    goto LABEL_18;
  }
  if (v7 != 6) {
    goto LABEL_17;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 32);
  int v9 = *(unsigned __int16 *)(v8[5] + 24);
  if (v9 == 35 || v9 == 11) {
    uint64_t v11 = v8[5];
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *v8;
  uint64_t v13 = (void *)v8[1];
  uint64_t v14 = *((void *)a3 + 104);
  if (v14) {
    __int16 v15 = *(_WORD *)(v14 + 8);
  }
  else {
    __int16 v15 = 0;
  }
  uint64_t v34 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v76, (llvm *)0x31, 0, v12, v13, v15);
  uint64_t v36 = v35;
  uint64_t v37 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v76, (llvm *)5, 0, 0, 0);
  __int16 v40 = 0;
  uint64_t v41 = *((void *)a3 + 104);
  if (v41) {
    __int16 v40 = *(_WORD *)(v41 + 8);
  }
  int v42 = sub_1CCFDED5C((uint64_t)a3, 148, (const llvm::APInt *)&v76, (llvm *)5, 0, (uint64_t)v34, v36, v39, (uint64_t)v37, v38, v40);
  uint64_t v44 = v43;
  uint64_t v45 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v76, (llvm *)5, 0, 0, 0);
  __int16 v48 = 0;
  uint64_t v49 = *((void *)a3 + 104);
  if (v49) {
    __int16 v48 = *(_WORD *)(v49 + 8);
  }
  uint64_t v50 = sub_1CCFDED5C((uint64_t)a3, 148, (const llvm::APInt *)&v76, (llvm *)5, 0, (uint64_t)v34, v36, v47, (uint64_t)v45, v46, v48);
  int v52 = v51;
  if (!v11) {
    goto LABEL_47;
  }
  uint64_t v53 = *(void *)(v11 + 80);
  __int16 v54 = (void *)(v53 + 24);
  if (*(_DWORD *)(v53 + 32) >= 0x41u) {
    __int16 v54 = (void *)*v54;
  }
  if (*v54 == 32)
  {
    uint64_t v56 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v76, (llvm *)5, 0, 0, 0);
    uint64_t v58 = *((void *)a3 + 104);
    if (v58) {
      LOWORD(v58) = *(_WORD *)(v58 + 8);
    }
    unint64_t v59 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v76, (llvm *)0x31, 0, (uint64_t)v56, v55, v57, (uint64_t)v42, v44, v58);
  }
  else
  {
LABEL_47:
    uint64_t v61 = sub_1CD7F95FC((uint64_t)a3, 5, 0, 5, 0);
    int v64 = sub_1CD7FFB94(a3, (const char *)0xC3, (const llvm::APInt *)&v76, v61, v62, (uint64_t)v42, v44, v63, (uint64_t)v50, v52, *(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48));
    int v67 = (uint64_t *)sub_1CB9EF398((uint64_t)v64, v65, a3)[4];
    uint64_t v68 = *v67;
    uint64_t v69 = v67[1];
    uint64_t v70 = v67[5];
    uint64_t v71 = v67[6];
    uint64_t v72 = *((void *)a3 + 104);
    if (v72) {
      LOWORD(v72) = *(_WORD *)(v72 + 8);
    }
    unint64_t v59 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v76, (llvm *)0x31, 0, v68, v69, v66, v70, v71, v72);
  }
  uint64_t v73 = *((void *)a3 + 104);
  if (v73) {
    __int16 v74 = *(_WORD *)(v73 + 8);
  }
  else {
    __int16 v74 = 0;
  }
  uint64_t v33 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v76, (llvm *)6, 0, (uint64_t)v59, v60, v74);
LABEL_54:
  int v24 = v33;
LABEL_18:
  if (v76)
  {
    int v25 = *v76;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v76;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v28 = (unint64_t)(v27 + 8);
LABEL_28:
        int v78 = &v76;
        sub_1CC5FA668(v28 + 16, &v78);
        return v24;
      }
      if (v25 == 3) {
        *((void *)v76 + 1) = 0;
      }
    }
    else if ((v76[1] & 0x7F) == 2 || *((_DWORD *)v76 + 3))
    {
      uint64_t v75 = *((void *)v76 + 2);
      if ((v75 & 4) != 0)
      {
        unint64_t v28 = v75 & 0xFFFFFFFFFFFFFFF8;
        if (v28) {
          goto LABEL_28;
        }
      }
    }
  }
  return v24;
}

void sub_1CB9E57D8(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = 32 * a3;
  if (v5 <= 0x39)
  {
    uint64_t v6 = (v5 << 58) | 1;
    sub_1CB9F99B4(&v6, a2, a3);
    (*(void (**)(void))(**(void **)(a4 + 16) + 104))(*(void *)(a4 + 16));
    operator new();
  }
  operator new();
}

void sub_1CB9E59E0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v5 = a3 + a2;
  if (v5 <= 0x39)
  {
    uint64_t v6 = (v5 << 58) | 1;
    sub_1CB9F9F38((unint64_t *)&v6, a2, v5);
    (*(void (**)(void))(**(void **)(a4 + 16) + 104))(*(void *)(a4 + 16));
    operator new();
  }
  operator new();
}

uint64_t sub_1CB9E5BDC(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if ((v1 & 1) == 0) {
    return sub_1CB9FA02C((void *)v1, 0, *(_DWORD *)(v1 + 64));
  }
  unint64_t v2 = (v1 >> 1) & ~(-1 << (v1 >> 58));
  if (v2) {
    return __clz(v2) ^ 0x3F;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t *sub_1CB9E5C1C(int a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v11 = v241;
  v260[20] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v253 = (unsigned __int8 *)v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v253, (unsigned __int8 *)v12, 2);
  }
  int v254 = *(_DWORD *)(a2 + 60);
  uint64_t v13 = *(uint64_t **)(a2 + 32);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = 4;
  do
  {
    uint64_t v17 = &v241[v16];
    *(unsigned char *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    v16 += 4;
  }
  while (v17 + 4 != &v248);
  uint64_t v18 = *(void *)(v13[5] + 80);
  uint64_t v19 = (void *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u) {
    uint64_t v19 = (void *)*v19;
  }
  int v20 = *(_DWORD *)v19;
  if (a5[318])
  {
    int v21 = 4;
  }
  else if (a5[319])
  {
    int v21 = 5;
  }
  else if (a5[320])
  {
    int v21 = 6;
  }
  else if (a5[321])
  {
    int v21 = 7;
  }
  else
  {
    int v21 = 9;
  }
  unsigned int v240 = v21;
  if (v20 <= 2560)
  {
    if ((v20 - 2545) < 0x10)
    {
      *(void *)&long long v251 = -1;
      long long v250 = xmmword_1CDB0CFA0;
      uint64_t v22 = 0x700000006;
      int v23 = 8;
      goto LABEL_22;
    }
    if ((v20 - 2471) >= 4)
    {
      long long v250 = xmmword_1CDB0CFA0;
      *(void *)&long long v251 = -4294967290;
      uint64_t v22 = 0x800000007;
      int v23 = 9;
LABEL_22:
      char v25 = 0;
      int v26 = 0;
      *((void *)&v251 + 1) = v22;
      unsigned int v252 = v23;
      unsigned int v27 = v22;
      int v28 = 25;
      long long v29 = xmmword_1CDB0CFB0;
      unsigned int v30 = 3;
      unsigned int v31 = 4;
      unsigned int v32 = 2;
      uint64_t v33 = 51;
      uint64_t v12 = 49;
      uint64_t v34 = 5;
      switch(v20)
      {
        case 2545:
        case 2549:
        case 2553:
        case 2557:
          goto LABEL_25;
        case 2546:
        case 2550:
        case 2554:
        case 2558:
          goto LABEL_29;
        case 2547:
        case 2551:
        case 2555:
        case 2559:
          goto LABEL_66;
        case 2548:
        case 2552:
        case 2556:
        case 2560:
          goto LABEL_31;
        case 2561:
        case 2565:
        case 2569:
        case 2573:
LABEL_24:
          int v26 = 1;
LABEL_25:
          long long v29 = xmmword_1CDB0CFC0;
          int v28 = 1;
          uint64_t v33 = 78;
          uint64_t v12 = 76;
          uint64_t v34 = 9;
          goto LABEL_31;
        case 2562:
        case 2566:
        case 2570:
        case 2574:
LABEL_28:
          int v26 = 1;
LABEL_29:
          uint64_t v33 = 97;
          uint64_t v12 = 95;
          uint64_t v34 = 10;
          goto LABEL_31;
        case 2563:
        case 2567:
        case 2571:
        case 2575:
          goto LABEL_65;
        case 2564:
        case 2568:
        case 2572:
        case 2576:
LABEL_30:
          int v26 = 1;
          uint64_t v33 = 51;
          uint64_t v12 = 49;
          uint64_t v34 = 5;
LABEL_31:
          char v25 = 0;
          long long v244 = (unint64_t)v34;
          long long v245 = (unint64_t)v12;
          long long v246 = (unint64_t)v33;
          long long v247 = (unint64_t)v33;
          *(_OWORD *)&v249[4] = v29;
          *(_DWORD *)&v249[20] = v28;
          unsigned int v32 = 2;
          unsigned int v30 = 3;
          unsigned int v31 = 4;
          *(_DWORD *)int v249 = 2;
          break;
        default:
          switch(v20)
          {
            case 2472:
              goto LABEL_28;
            case 2473:
              goto LABEL_65;
            case 2474:
              goto LABEL_30;
            case 2475:
              goto LABEL_25;
            case 2476:
              goto LABEL_29;
            case 2477:
              goto LABEL_66;
            case 2478:
              goto LABEL_31;
            default:
              goto LABEL_24;
          }
      }
LABEL_32:
      uint64_t v35 = *(void *)(a2 + 32);
      uint64_t v36 = *(void *)(*(void *)(v35 + 40 * v32) + 80);
      uint64_t v37 = (unsigned int *)(v36 + 24);
      if (*(_DWORD *)(v36 + 32) >= 0x41u) {
        uint64_t v37 = *(unsigned int **)v37;
      }
      uint64_t v38 = *v37;
      switch(v38)
      {
        case 1:
          char v41 = 0;
          int v40 = 0;
          LOBYTE(v38) = 1;
          int v243 = 1;
          int v39 = 1;
          if (v25) {
            goto LABEL_78;
          }
          goto LABEL_71;
        case 2:
          LODWORD(v38) = 2;
          goto LABEL_45;
        case 3:
          LODWORD(v38) = 3;
LABEL_45:
          int v243 = v38;
          if ((v25 & 1) == 0) {
            goto LABEL_62;
          }
          int v39 = 1;
          int v40 = 2;
          goto LABEL_78;
        case 4:
          LODWORD(v38) = 4;
          goto LABEL_52;
        case 5:
          LODWORD(v38) = 5;
LABEL_52:
          int v243 = v38;
          if ((v25 & 1) == 0) {
            goto LABEL_62;
          }
          int v39 = 1;
          int v40 = 4;
          goto LABEL_78;
        case 6:
          LODWORD(v38) = 6;
          goto LABEL_55;
        case 7:
          LODWORD(v38) = 7;
LABEL_55:
          int v243 = v38;
          if ((v25 & 1) == 0) {
            goto LABEL_62;
          }
          int v39 = 1;
          int v40 = 6;
          goto LABEL_78;
        case 8:
          LOBYTE(v38) = 8;
          int v243 = 8;
          if (v25) {
            goto LABEL_74;
          }
          char v41 = 1;
          goto LABEL_71;
        case 9:
        case 11:
          __break(1u);
          goto LABEL_287;
        case 10:
          LOBYTE(v38) = 10;
          int v243 = 10;
          if ((v25 & 1) == 0) {
            goto LABEL_62;
          }
          int v39 = 1;
          int v40 = 10;
          goto LABEL_78;
        case 12:
          LODWORD(v38) = 12;
          goto LABEL_49;
        case 13:
          LODWORD(v38) = 13;
LABEL_49:
          int v243 = v38;
          if (v25) {
            goto LABEL_77;
          }
          goto LABEL_62;
        case 14:
        case 16:
          LODWORD(v38) = 14;
          goto LABEL_60;
        case 15:
          LODWORD(v38) = 15;
LABEL_60:
          int v243 = v38;
          if (v25)
          {
            int v39 = 1;
            int v40 = 14;
            goto LABEL_78;
          }
LABEL_62:
          char v41 = 0;
          break;
        default:
          goto LABEL_68;
      }
      goto LABEL_71;
    }
    *((void *)&v251 + 1) = 0x700000006;
    long long v250 = xmmword_1CDB0CFA0;
    unsigned int v252 = 8;
    LODWORD(v251) = 6;
    uint64_t v22 = 0x900000008;
    int v24 = 7;
    int v23 = 10;
LABEL_21:
    DWORD1(v251) = v24;
    goto LABEL_22;
  }
  if ((v20 - 2561) < 0x10)
  {
    *((void *)&v251 + 1) = 0x600000005;
    LODWORD(v251) = -1;
    unsigned int v252 = 7;
    long long v250 = xmmword_1CDB0CFA0;
    uint64_t v22 = 0x800000007;
    int v24 = 6;
    int v23 = 9;
    goto LABEL_21;
  }
  if (v20 == 2703)
  {
    long long v250 = xmmword_1CDB0CF70;
    long long v251 = xmmword_1CDB0CF80;
    unsigned int v252 = 6;
    char v25 = 1;
    unsigned int v32 = -1;
    unsigned int v31 = 2;
    unsigned int v27 = -1;
    unsigned int v30 = -1;
LABEL_65:
    int v26 = 1;
  }
  else
  {
    int v26 = 0;
    long long v250 = xmmword_1CDB0CF70;
    char v25 = 1;
    long long v251 = xmmword_1CDB0CF90;
    unsigned int v252 = 5;
    unsigned int v27 = -1;
    unsigned int v31 = 2;
    unsigned int v32 = -1;
    unsigned int v30 = -1;
  }
LABEL_66:
  long long v244 = xmmword_1CD91CB40;
  long long v245 = xmmword_1CDB0CFD0;
  long long v246 = xmmword_1CDB0CFE0;
  long long v247 = xmmword_1CDB0CFE0;
  *(void *)&v249[16] = 0x10000000FLL;
  DWORD1(v29) = 0;
  *(_OWORD *)int v249 = xmmword_1CDB0CFF0;
  if ((v20 - 2703) >= 2) {
    goto LABEL_32;
  }
  LODWORD(v38) = 1;
LABEL_68:
  int v243 = v38;
  if (v25)
  {
    int v39 = 1;
    goto LABEL_76;
  }
  char v41 = 0;
  uint64_t v35 = *(void *)(a2 + 32);
LABEL_71:
  uint64_t v42 = *(void *)(*(void *)(v35 + 40 * v30) + 80);
  uint64_t v43 = (void *)(v42 + 24);
  if (*(_DWORD *)(v42 + 32) >= 0x41u) {
    uint64_t v43 = (void *)*v43;
  }
  if (v41)
  {
LABEL_74:
    int v44 = 15;
    goto LABEL_84;
  }
  int v39 = *(_DWORD *)v43;
LABEL_76:
  int v40 = v38 & 0xE;
  if (v40 == 12)
  {
LABEL_77:
    int v44 = 7;
  }
  else
  {
LABEL_78:
    if (v40 == 14 && v240 >= 7) {
      int v44 = 7;
    }
    else {
      int v44 = v39;
    }
  }
LABEL_84:
  LODWORD(v29) = v44;
  uint8x8_t v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v29);
  v46.i16[0] = vaddlv_u8(v46);
  unsigned int v242 = v46.i32[0];
  uint64_t v47 = *(void *)(a2 + 32);
  if (v27 == -1 || (int v48 = *(unsigned __int16 *)(*(void *)(v47 + 40 * v27) + 24), v48 == 35) || v48 == 11)
  {
    int v49 = *(unsigned __int16 *)(*(void *)(v47 + 40 * v31) + 24);
    int v51 = v49 != 11 && v49 != 35;
  }
  else
  {
    int v51 = 2;
  }
  int v248 = v51;
  uint64_t v11 = (int *)sub_1CB87E200((unsigned __int8 *)&v244);
  if (v12 == 1) {
LABEL_287:
  }
  v241[0] = dword_1CDB0D1B0[120 * ((v240 & 0xE) != 4) + 60 * a1 + 20 * v248 + 10 * v26 + 5 * (v11 != (int *)16) + v242];
  v241[1] = v11 != (int *)16;
  if (DWORD1(v250) == -1)
  {
    int v52 = 1;
  }
  else
  {
    uint64_t v53 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40 * DWORD1(v250)) + 80);
    __int16 v54 = (void *)(v53 + 24);
    if (*(_DWORD *)(v53 + 32) >= 0x41u) {
      __int16 v54 = (void *)*v54;
    }
    int v52 = *(_DWORD *)v54;
  }
  if (v243 == 8)
  {
    unsigned int v55 = 15;
  }
  else
  {
    unsigned int v55 = 7;
    if ((v243 & 0xFFFFFFFE) != 0xC)
    {
      if ((v243 & 0xFFFFFFFE) != 0xE || a5[327] == 0) {
        unsigned int v55 = v52;
      }
      else {
        unsigned int v55 = 7;
      }
    }
  }
  uint64_t v57 = *(void *)(a2 + 32);
  uint64_t v58 = (uint64_t *)(v57 + 40 * DWORD2(v250));
  if ((a1 & 1) == 0 && a5[361])
  {
    LOBYTE(v61) = 1;
  }
  else
  {
    uint64_t v59 = *(void *)(*(void *)(v57 + 40 * HIDWORD(v250)) + 80);
    uint64_t v60 = (void *)(v59 + 24);
    if (*(_DWORD *)(v59 + 32) >= 0x41u) {
      uint64_t v60 = (void *)*v60;
    }
    int v61 = *(_DWORD *)v60;
  }
  char v236 = v61;
  uint64_t v234 = v15;
  uint64_t v235 = v14;
  uint64_t v62 = *v58;
  uint64_t v227 = v58[1];
  if (a6)
  {
    uint64_t v63 = a6;
    uint64_t v64 = *(void *)(a6 + 32);
    uint64_t v66 = *(uint64_t **)v64;
    unint64_t v65 = *(void *)(v64 + 8);
    if (!a1) {
      goto LABEL_120;
    }
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v66 = sub_1CD7F330C((uint64_t)a4, 51, (uint64_t)&v253, (llvm *)4, 0);
    unint64_t v65 = v67;
    if (!a1) {
      goto LABEL_120;
    }
  }
  if (v251 != -1)
  {
    uint64_t v68 = *(void *)(a2 + 32) + 40 * v251;
    uint64_t v66 = *(uint64_t **)v68;
    unint64_t v65 = v65 & 0xFFFFFFFF00000000 | *(unsigned int *)(v68 + 8);
  }
LABEL_120:
  if (DWORD1(v251) == -1)
  {
    uint64_t v229 = 0;
    uint64_t v230 = 0;
  }
  else
  {
    uint64_t v69 = *(void *)(a2 + 32) + 40 * DWORD1(v251);
    uint64_t v229 = *(unsigned int *)(v69 + 8);
    uint64_t v230 = *(void *)v69;
  }
  char v238 = sub_1CD7EBF14((uint64_t)a4, 0, (const llvm::APInt *)&v253, (llvm *)4, 0, 1, 0);
  uint64_t v72 = *(void *)(a2 + 32);
  if (DWORD2(v251) != -1)
  {
    uint64_t v73 = v72 + 40 * DWORD2(v251);
    char v238 = *(uint64_t **)v73;
    unint64_t v70 = v70 & 0xFFFFFFFF00000000 | *(unsigned int *)(v73 + 8);
  }
  uint64_t v74 = *(void *)(*(void *)(v72 + 40 * HIDWORD(v251)) + 80);
  uint64_t v75 = (unsigned int *)(v74 + 24);
  uint64_t v228 = v70;
  if (*(_DWORD *)(v74 + 32) >= 0x41u) {
    uint64_t v75 = *(unsigned int **)v75;
  }
  uint64_t v76 = *(void *)(*(void *)(v72 + 40 * v252) + 80);
  int v77 = (unsigned int *)(v76 + 24);
  if (*(_DWORD *)(v76 + 32) >= 0x41u) {
    int v77 = *(unsigned int **)v77;
  }
  uint64_t v232 = *v75;
  uint64_t v233 = *v77;
  uint64_t v231 = v62;
  int v237 = a1;
  if (a1)
  {
    uint64_t v79 = *((void *)&v244 + 1);
    int v78 = (llvm *)v244;
    if (*((_WORD *)v66 + 12) == 216)
    {
      int v80 = (unsigned int *)v66[4];
      LOBYTE(v258) = *(void *)(v66[5] + 16 * v65);
      LOBYTE(v255) = *(unsigned char *)(*(void *)(*(void *)v80 + 40) + 16 * v80[2]);
      if (v255 - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", (const char *)v70);
      }
      int v82 = sub_1CB8C32B0((unsigned __int8 *)&v255);
      if (v258 - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v81);
      }
      if (v82 == sub_1CB8C32B0((unsigned __int8 *)&v258))
      {
        uint64_t v79 = 0;
        int v78 = (llvm *)sub_1CB8C2FBC((unsigned __int8 *)&v255);
        uint64_t v83 = v66[4];
        uint64_t v66 = *(uint64_t **)v83;
        unint64_t v65 = v65 & 0xFFFFFFFF00000000 | *(unsigned int *)(v83 + 8);
      }
    }
    if (v242 < 2)
    {
      if (!v63 && v242 == 1)
      {
        unint64_t v101 = sub_1CD7EBF14((uint64_t)a4, 31 - __clz(v55), (const llvm::APInt *)&v253, (llvm *)5, 0, 0, 0);
        __int16 v104 = 0;
        uint64_t v105 = a4[104];
        if (v105) {
          __int16 v104 = *(_WORD *)(v105 + 8);
        }
        uint64_t v66 = sub_1CCFDED5C((uint64_t)a4, 148, (const llvm::APInt *)&v253, v78, v79, (uint64_t)v66, v65, v103, (uint64_t)v101, v102, v104);
        unint64_t v65 = v65 & 0xFFFFFFFF00000000 | v106;
      }
    }
    else
    {
      uint64_t v258 = v260;
      uint64_t v259 = 0xA00000000;
      uint64_t v85 = sub_1CD7EBF14((uint64_t)a4, *(unsigned int *)&v249[4 * v242], (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
      if (v259 >= HIDWORD(v259)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v86 = 0;
      int v87 = 0;
      __int16 v88 = (uint64_t **)((char *)v258 + 16 * v259);
      *__int16 v88 = v85;
      v88[1] = v84;
      unsigned int v89 = v259 + 1;
      LODWORD(v259) = v259 + 1;
      do
      {
        if ((v55 >> v86))
        {
          int v90 = sub_1CD7EBF14((uint64_t)a4, v86, (const llvm::APInt *)&v253, (llvm *)5, 0, 0, 0);
          __int16 v93 = 0;
          uint64_t v94 = a4[104];
          if (v94) {
            __int16 v93 = *(_WORD *)(v94 + 8);
          }
          int v96 = sub_1CCFDED5C((uint64_t)a4, 148, (const llvm::APInt *)&v253, v78, v79, (uint64_t)v66, v65, v92, (uint64_t)v90, v91, v93);
          if (v259 >= (unint64_t)HIDWORD(v259)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v97 = (uint64_t **)((char *)v258 + 16 * v259);
          *uint64_t v97 = v96;
          v97[1] = v95;
          LODWORD(v259) = v259 + 1;
          unint64_t v99 = sub_1CD7EBF14((uint64_t)a4, (*(_DWORD *)&v249[20] + v87), (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
          if (v259 >= (unint64_t)HIDWORD(v259)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v100 = (uint64_t **)((char *)v258 + 16 * v259);
          uint64_t *v100 = v99;
          v100[1] = v98;
          unsigned int v89 = v259 + 1;
          LODWORD(v259) = v259 + 1;
          ++v87;
        }
        ++v86;
      }
      while (v86 != 4);
      int v107 = sub_1CD801450((uint64_t)a4, 18, (uint64_t)&v253, (llvm *)0xAE, 0, (uint64_t *)v258, v89);
      uint64_t v66 = v107;
      v65 &= 0xFFFFFFFF00000000;
      if (v258 != v260) {
        free(v258);
      }
      uint64_t v62 = v231;
    }
  }
  if (!v248)
  {
    uint64_t v108 = 0;
    unint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    goto LABEL_192;
  }
  if (v240 > 6)
  {
    if (v248 == 2)
    {
      int v128 = sub_1CD7EBF14((uint64_t)a4, 8, (const llvm::APInt *)&v253, (llvm *)5, 0, 0, 0);
      __int16 v131 = 0;
      uint64_t v132 = a4[104];
      if (v132) {
        __int16 v131 = *(_WORD *)(v132 + 8);
      }
      char v238 = sub_1CCFDED5C((uint64_t)a4, 175, (const llvm::APInt *)&v253, (llvm *)4, 0, (uint64_t)v238, v228, v130, (uint64_t)v128, v129, v131);
      unint64_t v134 = v228 & 0xFFFFFFFF00000000 | v133;
      uint64_t v110 = v62;
    }
    else
    {
      uint64_t v110 = v62;
      unint64_t v134 = v228;
    }
    unsigned int v127 = v227;
  }
  else
  {
    int v112 = *(unsigned __int16 *)(v62 + 24);
    uint64_t v113 = v62;
    if (v112 == 201)
    {
      uint64_t v113 = **(void **)(v62 + 32);
      int v112 = *(unsigned __int16 *)(v113 + 24);
    }
    if (v112 != 177) {
      goto LABEL_180;
    }
    int v114 = *(uint64_t **)(v113 + 32);
    uint64_t v115 = v114[5];
    int v116 = *(unsigned __int16 *)(v115 + 24);
    if (v116 != 35 && v116 != 11) {
      goto LABEL_180;
    }
    uint64_t v118 = *(void *)(v115 + 80);
    uint64_t v119 = (void *)(v118 + 24);
    if (*(_DWORD *)(v118 + 32) >= 0x41u) {
      uint64_t v119 = (void *)*v119;
    }
    if (*v119 == 8)
    {
      uint64_t v110 = sub_1CD7EB67C((uint64_t)a4, *v114, v114[1], (uint64_t)&v253, 4, 0);
      uint64_t v111 = v120;
      if (v248 != 2)
      {
LABEL_191:
        uint64_t v108 = 0;
        unint64_t v109 = 0;
        goto LABEL_192;
      }
      uint64_t v121 = sub_1CD7EBF14((uint64_t)a4, 65280, (const llvm::APInt *)&v253, (llvm *)4, 0, 0, 0);
      __int16 v124 = 0;
      uint64_t v125 = a4[104];
      if (v125) {
        __int16 v124 = *(_WORD *)(v125 + 8);
      }
      int v126 = sub_1CCFDED5C((uint64_t)a4, 171, (const llvm::APInt *)&v253, (llvm *)4, 0, v110, v111, v123, (uint64_t)v121, v122, v124);
    }
    else
    {
LABEL_180:
      BOOL v135 = sub_1CD7EBF14((uint64_t)a4, 8, (const llvm::APInt *)&v253, (llvm *)5, 0, 0, 0);
      __int16 v138 = 0;
      uint64_t v139 = a4[104];
      if (v139) {
        __int16 v138 = *(_WORD *)(v139 + 8);
      }
      int v126 = sub_1CCFDED5C((uint64_t)a4, 175, (const llvm::APInt *)&v253, (llvm *)4, 0, v62, v227, v137, (uint64_t)v135, v136, v138);
    }
    uint64_t v110 = (uint64_t)v126;
    unint64_t v134 = v228;
  }
  uint64_t v111 = v127;
  if (v248 != 2) {
    goto LABEL_191;
  }
  uint64_t v140 = a4[104];
  if (v140) {
    LOWORD(v140) = *(_WORD *)(v140 + 8);
  }
  uint64_t v108 = sub_1CCFDED5C((uint64_t)a4, 172, (const llvm::APInt *)&v253, (llvm *)4, 0, v110, v127, v71, (uint64_t)v238, v134, v140);
  unint64_t v109 = (uint64_t *)v141;
LABEL_192:
  uint64_t v142 = (16 * (v55 & 0xF)) | ((v236 & 1) << 8) | v243 | ((v250 == -1) << 10);
  uint64_t v258 = v260;
  uint64_t v259 = 0xA00000000;
  if (v237 && v242)
  {
    v260[0] = v66;
    v260[1] = v65;
    LODWORD(v259) = 1;
  }
  else if (v237)
  {
    goto LABEL_199;
  }
  if (((1 << v240) & 0x2C0) != 0)
  {
    uint64_t v144 = sub_1CD7EBF14((uint64_t)a4, 0, (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
    if (v259 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v145 = (uint64_t **)((char *)v258 + 16 * v259);
    *uint64_t v145 = v144;
    v145[1] = v143;
    LODWORD(v259) = v259 + 1;
  }
LABEL_199:
  unsigned int v147 = sub_1CD7EBF14((uint64_t)a4, v142, (const llvm::APInt *)&v253, (llvm *)6, 0, 1, 0);
  if (v259 >= HIDWORD(v259)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  char v148 = (uint64_t **)((char *)v258 + 16 * v259);
  *char v148 = v147;
  v148[1] = v146;
  unsigned int v149 = v259 + 1;
  LODWORD(v259) = v259 + 1;
  if (!v248)
  {
    uint64_t v165 = v238[10];
    int v166 = (unsigned __int8 *)(v165 + 24);
    if (*(_DWORD *)(v165 + 32) >= 0x41u) {
      int v166 = *(unsigned __int8 **)v166;
    }
    uint64_t v167 = *v166;
    uint64_t v168 = *(void *)(v231 + 80);
    uint64_t v169 = (unsigned __int8 *)(v168 + 24);
    if (*(_DWORD *)(v168 + 32) >= 0x41u) {
      uint64_t v169 = *(unsigned __int8 **)v169;
    }
    uint64_t v170 = *v169;
    uint64_t v171 = sub_1CD7EBF14((uint64_t)a4, v167, (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
    int v173 = v172;
    uint64_t v174 = sub_1CD7EBF14((uint64_t)a4, v170, (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
    uint64_t v163 = v175;
    if (v259 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v176 = (uint64_t **)((char *)v258 + 16 * v259);
    unsigned char *v176 = v171;
    v176[1] = v173;
    unsigned int v177 = v259 + 1;
    LODWORD(v259) = v177;
    if (v177 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v178 = (char *)v258 + 16 * v177;
    *(void *)uint64_t v178 = v174;
    char v159 = v237;
    char v158 = v240;
    int v160 = v238;
    goto LABEL_221;
  }
  if (v248 == 1)
  {
    uint64_t v150 = v238[10];
    uint64_t v151 = (unsigned __int8 *)(v150 + 24);
    if (*(_DWORD *)(v150 + 32) >= 0x41u) {
      uint64_t v151 = *(unsigned __int8 **)v151;
    }
    unsigned int v153 = sub_1CD7EBF14((uint64_t)a4, *v151, (const llvm::APInt *)&v253, (llvm *)4, 0, 1, 0);
    if (v259 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    char v154 = (uint64_t **)((char *)v258 + 16 * v259);
    *char v154 = v153;
    v154[1] = v152;
    unsigned int v155 = v259 + 1;
    LODWORD(v259) = v155;
    if (v155 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v156 = (uint64_t *)((char *)v258 + 16 * v155);
    *int v156 = v110;
    v156[1] = v111;
    unsigned int v157 = v259 + 1;
    LODWORD(v259) = v259 + 1;
    char v158 = v240;
    char v159 = v237;
    int v160 = v238;
    if (((1 << v240) & 0x2C0) != 0)
    {
      unsigned int v161 = sub_1CD7EBF14((uint64_t)a4, 0, (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
      uint64_t v163 = v162;
      unsigned int v164 = v259;
      if (v259 >= HIDWORD(v259)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
LABEL_220:
      uint64_t v178 = (char *)v258 + 16 * v164;
      *(void *)uint64_t v178 = v161;
LABEL_221:
      *((void *)v178 + 1) = v163;
      unsigned int v157 = v259 + 1;
      LODWORD(v259) = v259 + 1;
    }
  }
  else
  {
    if (v149 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v160 = 0;
    uint64_t v179 = (uint64_t **)((char *)v258 + 16 * v149);
    *uint64_t v179 = v108;
    v179[1] = v109;
    unsigned int v157 = v259 + 1;
    LODWORD(v259) = v259 + 1;
    char v158 = v240;
    char v159 = v237;
    if (((1 << v240) & 0x2C0) != 0)
    {
      unsigned int v161 = sub_1CD7EBF14((uint64_t)a4, 0, (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
      uint64_t v163 = v180;
      unsigned int v164 = v259;
      if (v259 >= HIDWORD(v259)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v160 = 0;
      goto LABEL_220;
    }
  }
  if (DWORD1(v251) != -1)
  {
    if (v157 >= HIDWORD(v259)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v181 = (char *)v258 + 16 * v157;
    *int v181 = v230;
    v181[1] = v229;
    LODWORD(v259) = v259 + 1;
    if (((1 << v158) & 0x2C0) != 0)
    {
      int v183 = sub_1CD7EBF14((uint64_t)a4, 0, (const llvm::APInt *)&v253, (llvm *)5, 0, 1, 0);
      if (v259 >= HIDWORD(v259)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v184 = (uint64_t **)((char *)v258 + 16 * v259);
      *uint64_t v184 = v183;
      v184[1] = v182;
      LODWORD(v259) = v259 + 1;
    }
  }
  uint64_t v186 = sub_1CD7EBF14((uint64_t)a4, v232, (const llvm::APInt *)&v253, (llvm *)4, 0, 1, 0);
  if (v259 >= HIDWORD(v259)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v187 = (uint64_t **)((char *)v258 + 16 * v259);
  *unsigned int v187 = v186;
  v187[1] = v185;
  LODWORD(v259) = v259 + 1;
  uint64_t v189 = sub_1CD7EBF14((uint64_t)a4, v233, (const llvm::APInt *)&v253, (llvm *)4, 0, 1, 0);
  if (v259 >= HIDWORD(v259)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v191 = (uint64_t **)((char *)v258 + 16 * v259);
  *uint64_t v191 = v189;
  v191[1] = v188;
  unsigned int v192 = v259 + 1;
  LODWORD(v259) = v192;
  if (v192 >= HIDWORD(v259)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v193 = (uint64_t *)((char *)v258 + 16 * v192);
  uint64_t *v193 = v235;
  v193[1] = v234;
  uint64_t v194 = (v259 + 1);
  LODWORD(v259) = v259 + 1;
  if (v159)
  {
    uint64_t v195 = sub_1CD801450((uint64_t)a4, v241[0], (uint64_t)&v253, (llvm *)1, 0, (uint64_t *)v258, v194);
    __int16 v196 = 2;
    uint64_t v197 = v195;
  }
  else
  {
    v190.i32[0] = v55;
    uint8x8_t v198 = (uint8x8_t)vcnt_s8(v190);
    v198.i16[0] = vaddlv_u8(v198);
    unsigned int v199 = v198.i32[0];
    if (v198.i32[0] < 2u)
    {
      uint64_t v197 = sub_1CD801450((uint64_t)a4, v241[0], (uint64_t)&v253, (llvm *)v244, *((uint64_t *)&v244 + 1), (uint64_t *)v258, v194);
      __int16 v196 = 1;
      uint64_t v204 = sub_1CD7F95FC((uint64_t)a4, v244, *((uint64_t *)&v244 + 1), 1, 0);
      uint64_t v195 = sub_1CD7FFB18(a4, (const char *)0x37, (const llvm::APInt *)&v253, v204, v205, (uint64_t)v197, 0, v206, v235, v234);
    }
    else
    {
      uint64_t v239 = v160;
      uint64_t v197 = sub_1CD801450((uint64_t)a4, v241[0], (uint64_t)&v253, (llvm *)0xAE, 0, (uint64_t *)v258, v194);
      int v200 = 0;
      uint64_t v255 = v257;
      uint64_t v256 = 0x400000000;
      do
      {
        uint64_t v202 = sub_1CD8015C0((uint64_t)a4, v200 + *(_DWORD *)&v249[20], (const llvm::APInt *)&v253, (llvm *)v244, *((uint64_t *)&v244 + 1), (uint64_t)v197, 0);
        if (v256 >= (unint64_t)HIDWORD(v256)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v203 = (uint64_t **)((char *)v255 + 16 * v256);
        void *v203 = v202;
        v203[1] = v201;
        LODWORD(v256) = v256 + 1;
        ++v200;
      }
      while (v199 != v200);
      if (v199 == 3)
      {
        uint64_t v208 = sub_1CD7F330C((uint64_t)a4, 51, (uint64_t)&v253, (llvm *)v244, *((uint64_t *)&v244 + 1));
        if (v256 >= HIDWORD(v256)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v209 = (uint64_t **)((char *)v255 + 16 * v256);
        llvm::MachineInstr *v209 = v208;
        v209[1] = v207;
        LODWORD(v256) = v256 + 1;
        unsigned int v199 = 4;
      }
      uint64_t v210 = &v241[4 * v199 - 4];
      uint64_t v211 = sub_1CD7F95FC((uint64_t)a4, *((void *)v210 + 2), *((void *)v210 + 3), 1, 0);
      uint64_t v213 = v212;
      uint64_t v214 = 0;
      uint64_t v215 = a4[104];
      if (v215) {
        uint64_t v214 = *(unsigned __int16 *)(v215 + 8);
      }
      uint64_t v216 = sub_1CD7FF4E8(a4, (const char *)0x92, (const llvm::APInt *)&v253, *((llvm **)v210 + 2), *((void *)v210 + 3), (uint64_t *)v255, v199, v214);
      uint64_t v195 = sub_1CD7FFB18(a4, (const char *)0x37, (const llvm::APInt *)&v253, v211, v213, (uint64_t)v216, v217, v218, v235, v234);
      int v160 = v239;
      if (v255 != v257) {
        free(v255);
      }
      __int16 v196 = 1;
    }
  }
  if (v160)
  {
    uint64_t v220 = v160[10];
    int v221 = (unsigned int *)(v220 + 24);
    if (*(_DWORD *)(v220 + 32) >= 0x41u) {
      int v221 = *(unsigned int **)v221;
    }
    uint64_t v219 = *v221 | 0x100000000;
  }
  else
  {
    uint64_t v219 = 0;
  }
  uint64_t v255 = (void *)sub_1CBA9F684(v219, v55, v243, v196, a4[5]);
  sub_1CD8005B8(a4, (uint64_t)v197, &v255, 1);
  if (v258 != v260) {
    free(v258);
  }
  if (v253)
  {
    int v222 = *v253;
    if ((v222 - 4) > 0x1E)
    {
      if ((v222 - 3) >= 0xFFFFFFFE) {
        BOOL v224 = v253;
      }
      else {
        BOOL v224 = 0;
      }
      if ((v222 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v225 = (unint64_t)(v224 + 8);
LABEL_264:
        uint64_t v258 = &v253;
        sub_1CC5FA668(v225 + 16, &v258);
        return v195;
      }
      if (v222 == 3) {
        *((void *)v253 + 1) = 0;
      }
    }
    else if ((v253[1] & 0x7F) == 2 || *((_DWORD *)v253 + 3))
    {
      uint64_t v226 = *((void *)v253 + 2);
      if ((v226 & 4) != 0)
      {
        unint64_t v225 = v226 & 0xFFFFFFFFFFFFFFF8;
        if (v225) {
          goto LABEL_264;
        }
      }
    }
  }
  return v195;
}

uint64_t sub_1CB9E757C(int a1, int a2)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 4:
    case 9:
    case 10:
    case 15:
    case 16:
    case 19:
    case 20:
    case 36:
    case 41:
    case 43:
    case 45:
    case 47:
    case 48:
    case 49:
    case 52:
    case 53:
    case 54:
      return 32;
    case 5:
    case 12:
      return 16;
    case 6:
      return 8;
    case 7:
    case 35:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 2;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0D624;
      return v5[v4];
    case 8:
    case 17:
    case 22:
    case 29:
    case 31:
      return 2;
    case 14:
    case 55:
      return 5;
    case 21:
      return result;
    case 23:
    case 24:
    case 38:
    case 39:
    case 40:
    case 42:
    case 44:
    case 46:
      return 11;
    case 25:
    case 37:
      return 10;
    case 26:
    case 27:
    case 28:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 8;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0D5AC;
      return v5[v4];
    case 30:
    case 50:
      return 3;
    case 32:
      BOOL v6 = (a2 - 6) >= 0xA;
      unsigned int v7 = 2;
      unsigned int v8 = 5;
      goto LABEL_22;
    case 33:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 1;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0D660;
      return v5[v4];
    case 34:
      int v4 = a2 - 1;
      if ((a2 - 1) >= 0xF) {
        return 8;
      }
      uint64_t v5 = (unsigned int *)&unk_1CDB0D5E8;
      return v5[v4];
    case 51:
      BOOL v6 = (a2 - 6) >= 0xA;
      unsigned int v7 = 3;
      unsigned int v8 = 6;
LABEL_22:
      if (v6) {
        return v7;
      }
      else {
        return v8;
      }
    default:
      return 1;
  }
}

uint64_t *sub_1CB9E7754(uint64_t a1, llvm::APFloatBase *a2)
{
  int v4 = *(unsigned __int8 **)(a1 + 64);
  char v41 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v41, v4, 2);
  }
  int v42 = *(_DWORD *)(a1 + 60);
  uint64_t v5 = *(llvm::GlobalValue **)(a1 + 80);
  int v6 = *(_DWORD *)(*(void *)v5 + 8) >> 8;
  int v7 = *(_DWORD *)(*(void *)(*((void *)a2 + 5) + 8) + 544);
  if (*((unsigned char *)v5 + 16) != 3 || (uint64_t Metadata = llvm::Value::getMetadata(*(void *)(a1 + 80), "agx.bind", 8uLL)) == 0)
  {
    int v16 = 0;
    goto LABEL_19;
  }
  int v9 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (*(unsigned char *)(*(void *)(*(void *)(v11 + 128) + 24) + 8) == 17)
  {
    if (*(unsigned char *)v10 == 1)
    {
      uint64_t v12 = *(void *)(v10 + 128);
      if (*(unsigned char *)(v12 + 16) == 16) {
        goto LABEL_10;
      }
    }
    uint64_t v10 = *(void *)(v10 - 8 * *(unsigned int *)(v10 + 8));
  }
  uint64_t v12 = *(void *)(v10 + 128);
LABEL_10:
  uint64_t v13 = (void *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u) {
    uint64_t v13 = (void *)*v13;
  }
  int v14 = *(_DWORD *)v13;
  BOOL v15 = v14 == 18 || v14 == 114;
  int v16 = v15;
LABEL_19:
  BOOL v15 = v7 == 1;
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v19 = *(llvm **)v17;
  uint64_t v18 = *(void *)(v17 + 8);
  if (!v15) {
    int v16 = 0;
  }
  if (*((unsigned char *)v5 + 16)) {
    BOOL v20 = v6 == 2;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20 && v16 == 0)
  {
    if (v6 == 64 || v6 == 3)
    {
      unsigned int v35 = sub_1CD1117B0(v5, *(void *)(a1 + 88), *(void *)(*((void *)a2 + 5) + 344), 0);
      int v28 = sub_1CD7EBF14((uint64_t)a2, v35, (const llvm::APInt *)&v41, v19, v18, 0, 0);
    }
    else
    {
      int v28 = 0;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 88);
    int v24 = sub_1CD7ECF00((uint64_t)a2, (uint64_t)v5, (uint64_t)&v41, (llvm *)6, 0, 0, 1, 0);
    uint64_t v25 = *((void *)a2 + 104);
    if (v25) {
      __int16 v26 = *(_WORD *)(v25 + 8);
    }
    else {
      __int16 v26 = 0;
    }
    int v28 = sub_1CD7F3564(a2, (const char *)0x190, (uint64_t)&v41, (llvm *)6, 0, (uint64_t)v24, v23, v26);
    uint64_t v30 = v29;
    if (v22)
    {
      uint64_t v36 = sub_1CD7EBF14((uint64_t)a2, v22, (const llvm::APInt *)&v41, v19, v18, 0, 0);
      uint64_t v39 = *((void *)a2 + 104);
      if (v39) {
        LOWORD(v39) = *(_WORD *)(v39 + 8);
      }
      int v28 = sub_1CCFDED5C((uint64_t)a2, 56, (const llvm::APInt *)&v41, v19, v18, (uint64_t)v28, v30, v38, (uint64_t)v36, v37, v39);
    }
  }
  if (v41)
  {
    int v31 = *v41;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v33 = v41;
      }
      else {
        uint64_t v33 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v34 = (unint64_t)(v33 + 8);
LABEL_47:
        uint64_t v43 = &v41;
        sub_1CC5FA668(v34 + 16, &v43);
        return v28;
      }
      if (v31 == 3) {
        *((void *)v41 + 1) = 0;
      }
    }
    else if ((v41[1] & 0x7F) == 2 || *((_DWORD *)v41 + 3))
    {
      uint64_t v40 = *((void *)v41 + 2);
      if ((v40 & 4) != 0)
      {
        unint64_t v34 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v34) {
          goto LABEL_47;
        }
      }
    }
  }
  return v28;
}

uint64_t *sub_1CB9E7A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 40) + 344) + 336))(*(void *)(*(void *)(a3 + 40) + 344));
  unsigned int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, 16);
  unsigned int v8 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v22 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v22, v8, 2);
  }
  int v23 = *(_DWORD *)(a1 + 60);
  uint64_t v9 = *(void *)(a1 + 40) + 16 * a2;
  uint64_t v10 = *(llvm **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = sub_1CD7EBF14(a3, 31 - __clz(v7), (const llvm::APInt *)&v22, *(llvm **)v9, v11, 0, 0);
  uint64_t v15 = *(void *)(a3 + 832);
  if (v15) {
    LOWORD(v15) = *(_WORD *)(v15 + 8);
  }
  int v16 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v22, v10, v11, a1, a2, v14, (uint64_t)v12, v13, v15);
  if (v22)
  {
    int v17 = *v22;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v19 = v22;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v20 = (unint64_t)(v19 + 8);
LABEL_15:
        int v24 = &v22;
        sub_1CC5FA668(v20 + 16, &v24);
        return v16;
      }
      if (v17 == 3) {
        *((void *)v22 + 1) = 0;
      }
    }
    else if ((v22[1] & 0x7F) == 2 || *((_DWORD *)v22 + 3))
    {
      uint64_t v21 = *((void *)v22 + 2);
      if ((v21 & 4) != 0)
      {
        unint64_t v20 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (v20) {
          goto LABEL_15;
        }
      }
    }
  }
  return v16;
}

void sub_1CB9E7BFC(uint64_t a1, int a2, const llvm::APInt *a3, llvm::APFloatBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v74[12] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a6 + 8))
  {
    uint64_t v10 = a4;
    uint64_t v12 = *((void *)a4 + 5);
    uint64_t v13 = *((void *)a4 + 7);
    uint64_t v72 = v74;
    uint64_t v73 = 0x800000000;
    sub_1CD3FA640(v12, v13, a5, a6, (uint64_t)&v72);
    if (v73)
    {
      uint64_t v14 = 12 * v73;
      uint64_t v15 = (unsigned __int8 *)v72 + 10;
      uint64_t v63 = (uint64_t)a3;
      uint64_t v64 = v12;
      do
      {
        if (*(v15 - 2))
        {
          uint64_t v18 = (uint64_t)v10;
          LOBYTE(v68[0]) = *(v15 - 1);
          uint64_t v20 = sub_1CB87E200((unsigned __int8 *)v68);
          if (v19 == 1) {
          int FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(v12 + 56), ((unint64_t)(v20 + 7) >> 3), *(unsigned int *)(v15 - 6), 1, 0);
          }
          unsigned __int8 v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a7 + 32))(a7, *(void *)(**(void **)(v18 + 40) + 40) + 272, 0);
          int v23 = sub_1CD7ED208(v18, FixedObject, (llvm *)v22, 0, 0);
          uint64_t v25 = v24;
          int v26 = 0;
          uint64_t v27 = *(v15 - 1);
          switch(*(v15 - 2) >> 2)
          {
            case 1:
              int v26 = 2;
              break;
            case 2:
              int v26 = 3;
              break;
            case 3:
              int v26 = 1;
              break;
            case 7:
              int v26 = 0;
              uint64_t v27 = *v15;
              break;
            default:
              break;
          }
          uint64_t v37 = *v15;
          FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v64 + 432), FixedObject);
          if (FixedStack) {
            int v40 = *((_DWORD *)FixedStack + 3);
          }
          else {
            int v40 = 0;
          }
          memset(v68, 0, sizeof(v68));
          *(void *)&long long v69 = (unint64_t)FixedStack | 4;
          *((void *)&v69 + 1) = 0;
          int v70 = v40;
          char v71 = 0;
          int v42 = sub_1CD7FAEE8(v18, v26, v63, v37, 0, a1, a2, v39, (uint64_t)v23, v25, &v69, v27, 0, 0, 0, 0, v68);
          unint64_t v43 = *(unsigned int *)(a8 + 8);
          if (v43 >= *(unsigned int *)(a8 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v34 = v41 | v61 & 0xFFFFFFFF00000000;
          int v44 = (uint64_t **)(*(void *)a8 + 16 * v43);
          *int v44 = v42;
          unint64_t v61 = v34;
          uint64_t v10 = (llvm::APFloatBase *)v18;
          a3 = (const llvm::APInt *)v63;
          uint64_t v12 = v64;
          goto LABEL_31;
        }
        uint64_t v16 = *v15;
        if (*v15 > 0x4Bu)
        {
          if (*v15 <= 0x5Eu)
          {
            int v17 = &off_1E66AB080;
            if (v16 == 76) {
              goto LABEL_17;
            }
          }
        }
        else if (((1 << (v16 - 4)) & 0x1000201002000084) == 0)
        {
          if (((1 << (v16 - 4)) & 0x800021) != 0) {
            int v17 = &off_1E66AB048;
          }
          else {
            int v17 = &off_1E66AB080;
          }
          goto LABEL_17;
        }
        int v17 = (__int16 ***)&off_1E66AB358;
LABEL_17:
        int v28 = (llvm *)((unint64_t)v62 & 0xFFFFFFFFFFFFFF00 | v16);
        int v29 = llvm::MachineFunction::addLiveIn(v12, *(_DWORD *)(v15 - 6), (uint64_t)v17);
        uint64_t v62 = v28;
        uint64_t v30 = sub_1CD3D6670(v10, a1, a2, a3, v29, v28, 0);
        unsigned int v32 = (llvm *)*(v15 - 1);
        uint64_t v33 = v30;
        unint64_t v34 = (unint64_t)v31;
        switch(*(v15 - 2) >> 2)
        {
          case 1:
            uint64_t v47 = sub_1CD7EDE1C((uint64_t)v10, *(v15 - 1), 0);
            uint64_t v50 = *((void *)v10 + 104);
            if (v50) {
              LOWORD(v50) = *(_WORD *)(v50 + 8);
            }
            int v51 = sub_1CCFDED5C((uint64_t)v10, 3, a3, v62, 0, (uint64_t)v33, v34, v49, v47, v48, v50);
            goto LABEL_39;
          case 2:
            uint64_t v53 = sub_1CD7EDE1C((uint64_t)v10, *(v15 - 1), 0);
            uint64_t v56 = *((void *)v10 + 104);
            if (v56) {
              LOWORD(v56) = *(_WORD *)(v56 + 8);
            }
            int v51 = sub_1CCFDED5C((uint64_t)v10, 4, a3, v62, 0, (uint64_t)v33, v34, v55, v53, v54, v56);
LABEL_39:
            uint64_t v57 = *((void *)v10 + 104);
            if (v57) {
              __int16 v58 = *(_WORD *)(v57 + 8);
            }
            else {
              __int16 v58 = 0;
            }
            a3 = (const llvm::APInt *)v63;
            uint64_t v33 = sub_1CD7F3564(v10, (const char *)0xC9, v63, v32, 0, (uint64_t)v51, (void *)(v34 & 0xFFFFFFFF00000000 | v52), v58);
            unint64_t v34 = v59 | v34 & 0xFFFFFFFF00000000;
            uint64_t v12 = v64;
            break;
          case 3:
          case 4:
          case 5:
          case 6:
            __break(1u);
            JUMPOUT(0x1CB9E817CLL);
          case 7:
            uint64_t v35 = *((void *)v10 + 104);
            if (v35) {
              __int16 v36 = *(_WORD *)(v35 + 8);
            }
            else {
              __int16 v36 = 0;
            }
            uint64_t v33 = sub_1CD7F3564(v10, (const char *)0xD8, (uint64_t)a3, (llvm *)*(v15 - 1), 0, (uint64_t)v30, v31, v36);
            unint64_t v34 = v34 & 0xFFFFFFFF00000000 | v45;
            break;
          default:
            break;
        }
        unint64_t v46 = *(unsigned int *)(a8 + 8);
        if (v46 >= *(unsigned int *)(a8 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v44 = (uint64_t **)(*(void *)a8 + 16 * v46);
        *int v44 = v33;
LABEL_31:
        v44[1] = (uint64_t *)v34;
        ++*(_DWORD *)(a8 + 8);
        v15 += 12;
        v14 -= 12;
      }
      while (v14);
    }
    if ((a9 & 1) == 0)
    {
      uint64_t v60 = *(void *)(v12 + 48);
      if (!v60)
      {
        uint64_t v60 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v12 + 8) + 216))(*(void *)(v12 + 8), v12 + 128, v12);
        *(void *)(v12 + 48) = v60;
      }
      *(_DWORD *)(v60 + 440) = 4 * sub_1CB920798((unsigned int *)&v72);
    }
    if (v72 != v74) {
      free(v72);
    }
  }
}

uint64_t *sub_1CB9E81B8(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  uint64_t v9 = (const llvm::APInt *)a3;
  v91[16] = *MEMORY[0x1E4F143B8];
  if (a8) {
    uint64_t v12 = 393;
  }
  else {
    uint64_t v12 = 392;
  }
  if (!*(_DWORD *)(a6 + 8))
  {
    uint64_t v13 = a4[104];
    if (v13) {
      __int16 v14 = *(_WORD *)(v13 + 8);
    }
    else {
      __int16 v14 = 0;
    }
    return sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)v12, a3, (llvm *)1, 0, a1, a2, v14);
  }
  uint64_t v86 = v88;
  uint64_t v87 = 0x800000000;
  sub_1CD3FA570(a4[5], a4[7], a5, a6, (uint64_t)&v86);
  uint64_t v83 = v85;
  uint64_t v84 = 0x800000000;
  sub_1CD3E535C((uint64_t *)&v83, 1uLL, a1, (uint64_t)a2);
  int v17 = *(unsigned __int8 **)v9;
  int v77 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v77, v17, 2);
  }
  int v78 = *((_DWORD *)v9 + 2);
  unsigned int v89 = v91;
  uint64_t v90 = 0x800000000;
  if ((int)v87 >= 1)
  {
    uint64_t v75 = 0;
    uint64_t v76 = a1;
    unsigned int v69 = v12;
    int v70 = v9;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v73 = 0;
    int v74 = (int)a2;
    uint64_t v21 = a7;
    do
    {
      uint64_t v22 = *v21 + v18;
      int v23 = *(uint64_t **)v22;
      uint64_t v24 = *(void *)(v22 + 8);
      uint64_t v25 = *(int *)((char *)v86 + v19 + 4);
      if (*((unsigned char *)v86 + v19 + 8))
      {
        int v29 = sub_1CD7EBF14((uint64_t)a4, *(int *)((char *)v86 + v19 + 4), (const llvm::APInt *)&v77, (llvm *)5, 0, 0, 0);
        uint64_t v31 = v30;
        unsigned int v32 = (unsigned char *)(*(uint64_t (**)(void, void))(**(void **)(a4[5] + 8) + 16))(*(void *)(a4[5] + 8), *(void *)a4[5]);
        (*(void (**)(unsigned char *))(*(void *)v32 + 176))(v32);
        if (v32[381])
        {
          int v40 = sub_1CD7EBF14((uint64_t)a4, v25, (const llvm::APInt *)&v77, (llvm *)5, 0, 1, 0);
          int v33 = v74;
        }
        else
        {
          int v33 = v74;
          uint64_t v35 = sub_1CD3D6670(a4, v76, v74, (const llvm::APInt *)&v77, 66, (llvm *)5, 0);
          __int16 v37 = 0;
          uint64_t v38 = a4[104];
          if (v38) {
            __int16 v37 = *(_WORD *)(v38 + 8);
          }
          int v40 = sub_1CCFDED5C((uint64_t)a4, 56, (const llvm::APInt *)&v77, (llvm *)5, 0, (uint64_t)v35, v34, v36, (uint64_t)v29, v31, v37);
        }
        unint64_t v41 = v39 | v72 & 0xFFFFFFFF00000000;
        uint64_t v42 = *(void *)(a4[5] + 432);
        uint64_t v43 = (v42 + 8) | 4;
        LODWORD(v42) = *(_DWORD *)(v42 + 20);
        v80[0] = v43;
        v80[1] = v25;
        int v81 = v42;
        char v82 = 0;
        memset(v79, 0, sizeof(v79));
        int v44 = (uint64_t *)(v23[5] + 16 * v24);
        char v45 = sub_1CD7EA9CC((uint64_t)a4, *v44, v44[1]);
        unint64_t v72 = v41;
        unint64_t v46 = sub_1CD7FB188((uint64_t)a4, v76, v33, (uint64_t)&v77, (uint64_t)v23, v24, (uint64_t)v40, v41, (uint64_t)v80, v45, 0, 0, v79);
        uint64_t v48 = v47;
        uint64_t v21 = a7;
        if (v90 >= (unint64_t)HIDWORD(v90)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v49 = &v89[2 * v90];
        uint64_t *v49 = (uint64_t)v46;
        uint64_t v50 = &v90;
      }
      else
      {
        int v26 = (llvm *)*((unsigned __int8 *)v86 + v19 + 10);
        if ((*((unsigned char *)v86 + v19 + 8) & 0xFC) == 0x1C)
        {
          uint64_t v27 = a4[104];
          if (v27) {
            __int16 v28 = *(_WORD *)(v27 + 8);
          }
          else {
            __int16 v28 = 0;
          }
          int v23 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v77, (llvm *)*((unsigned __int8 *)v86 + v19 + 10), 0, *(void *)v22, *(void **)(v22 + 8), v28);
          LODWORD(v24) = v51;
        }
        uint64_t v75 = sub_1CD3E5420(a4, v76, v74, (const llvm::APInt *)&v77, v25, (uint64_t)v23, v24, v16, (uint64_t)v75, v73);
        int v53 = v52;
        uint64_t v54 = sub_1CD7EEB94((uint64_t)a4, v25, v26, 0);
        uint64_t v48 = v55;
        if (v84 >= (unint64_t)HIDWORD(v84)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v49 = (uint64_t *)((char *)v83 + 16 * v84);
        uint64_t *v49 = v54;
        uint64_t v50 = &v84;
        uint64_t v73 = 1;
        int v74 = v53;
        uint64_t v76 = (uint64_t)v75;
      }
      v49[1] = v48;
      ++*(_DWORD *)v50;
      ++v20;
      v19 += 12;
      v18 += 16;
    }
    while (v20 < (int)v87);
    if (v90)
    {
      uint64_t v57 = a4[104];
      uint64_t v9 = v70;
      uint64_t v12 = v69;
      if (v57) {
        uint64_t v58 = *(unsigned __int16 *)(v57 + 8);
      }
      else {
        uint64_t v58 = 0;
      }
      unsigned int v59 = sub_1CD7FF4E8(a4, (const char *)2, (const llvm::APInt *)&v77, (llvm *)1, 0, v89, v90, v58);
      uint64_t v60 = v83;
      *(void *)uint64_t v83 = v59;
      v60[2] = v61;
    }
    else
    {
      uint64_t v9 = v70;
      uint64_t v12 = v69;
      if (v75)
      {
        if (v84 >= HIDWORD(v84)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v56 = (uint64_t **)((char *)v83 + 16 * v84);
        uint64_t *v56 = v75;
        v56[1] = (uint64_t *)v73;
        LODWORD(v84) = v84 + 1;
      }
    }
  }
  if (v89 != v91) {
    free(v89);
  }
  if (v77)
  {
    int v62 = *v77;
    if ((v62 - 4) > 0x1E)
    {
      if ((v62 - 3) >= 0xFFFFFFFE) {
        uint64_t v66 = v77;
      }
      else {
        uint64_t v66 = 0;
      }
      if ((v62 - 3) < 0xFFFFFFFE)
      {
        if (v62 == 3) {
          *((void *)v77 + 1) = 0;
        }
        goto LABEL_48;
      }
      unint64_t v67 = (unint64_t)(v66 + 8);
    }
    else
    {
      if ((v77[1] & 0x7F) != 2 && !*((_DWORD *)v77 + 3)) {
        goto LABEL_48;
      }
      uint64_t v68 = *((void *)v77 + 2);
      if ((v68 & 4) == 0) {
        goto LABEL_48;
      }
      unint64_t v67 = v68 & 0xFFFFFFFFFFFFFFF8;
      if (!v67) {
        goto LABEL_48;
      }
    }
    unsigned int v89 = (uint64_t *)&v77;
    sub_1CC5FA668(v67 + 16, &v89);
  }
LABEL_48:
  uint64_t v63 = a4[104];
  if (v63) {
    uint64_t v64 = *(unsigned __int16 *)(v63 + 8);
  }
  else {
    uint64_t v64 = 0;
  }
  unint64_t v65 = sub_1CD7FF4E8(a4, (const char *)v12, v9, (llvm *)1, 0, (uint64_t *)v83, v84, v64);
  if (v83 != v85) {
    free(v83);
  }
  if (v86 != v88) {
    free(v86);
  }
  return v65;
}

uint64_t *sub_1CB9E88B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3;
  unsigned int v7 = (uint64_t *)a2;
  uint64_t v1648 = *MEMORY[0x1E4F143B8];
  uint64_t v1635 = a2;
  unint64_t v1636 = a3;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 24);
  if (v9 <= 0x91)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case '.':
        uint64_t v150 = *(void *)(**(void **)(a2 + 32) + 80);
        uint64_t v151 = (int *)(v150 + 24);
        if (*(_DWORD *)(v150 + 32) >= 0x41u) {
          uint64_t v151 = *(int **)v151;
        }
        return sub_1CB9E4120(0, *v151, a2, a3, (llvm::APFloatBase *)a4);
      case '/':
        uint64_t v152 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
        unsigned int v153 = (unsigned int *)(v152 + 24);
        if (*(_DWORD *)(v152 + 32) >= 0x41u) {
          unsigned int v153 = *(unsigned int **)v153;
        }
        uint64_t v154 = *v153;
        if ((v154 - 1282) > 0x18F)
        {
          *(void *)&long long v1639 = &v1640;
          *((void *)&v1639 + 1) = 0x200000000;
          llvm::GPUSDISel::ExpandIntrinsicSample(a2, (llvm::APFloatBase *)a4, v154, &v1639, 4, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB9D1380, 0, 1, 25);
          int v220 = DWORD2(v1639);
          if (DWORD2(v1639) == 1) {
            int v4 = *(llvm::IntegerType **)v1639;
          }
          if ((void **)v1639 != &v1640) {
            free((void *)v1639);
          }
          if (v220 != 1) {
            return 0;
          }
          return (uint64_t *)v4;
        }
        *(void *)&long long v1639 = &v1640;
        *((void *)&v1639 + 1) = 0x200000000;
        llvm::GPUSDISel::ExpandIntrinsicSample(a2, (llvm::APFloatBase *)a4, v154, &v1639, 4, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB9D1380, 0, 1, 25);
        unsigned int v155 = DWORD2(v1639);
        if (DWORD2(v1639) == 1)
        {
          int v156 = (void **)v1639;
          int v4 = *(llvm::IntegerType **)v1639;
          goto LABEL_108;
        }
        uint64_t v724 = v1635;
        int v725 = *(unsigned __int8 **)(v1635 + 64);
        *(void *)&long long v1619 = v725;
        if (v725)
        {
          llvm::MetadataTracking::track((uint64_t)&v1619, v725, 2);
          uint64_t v726 = v1635;
          unsigned int v155 = DWORD2(v1639);
        }
        else
        {
          uint64_t v726 = v1635;
        }
        DWORD2(v1619) = *(_DWORD *)(v724 + 60);
        uint64_t v1133 = v155;
        uint64_t v1134 = *(void *)(a4 + 832);
        if (v1134) {
          __int16 v1135 = *(_WORD *)(v1134 + 8);
        }
        else {
          __int16 v1135 = 0;
        }
        int v4 = (llvm::IntegerType *)sub_1CD7FF854((void *)a4, (const char *)0x37, (const llvm::APInt *)&v1619, *(void *)(v726 + 40), *(unsigned __int16 *)(v726 + 58), (uint64_t *)v1639, v1133, v1135);
        uint64_t v524 = v1619;
        if (!(void)v1619) {
          goto LABEL_954;
        }
        int v525 = *(unsigned __int8 *)v1619;
        if ((v525 - 4) > 0x1E)
        {
          if ((v525 - 3) >= 0xFFFFFFFE) {
            uint64_t v1295 = v1619;
          }
          else {
            uint64_t v1295 = 0;
          }
          if ((v525 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1137 = v1295 + 8;
LABEL_950:
            *(void *)&long long v1637 = &v1619;
            uint64_t v1174 = v1137 + 16;
            uint64_t v1175 = &v1637;
            goto LABEL_951;
          }
LABEL_952:
          if (v525 == 3) {
            *(void *)(v524 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1619 + 1) & 0x7F) == 2 || *(_DWORD *)(v1619 + 12))
        {
          uint64_t v1136 = *(void *)(v1619 + 16);
          if ((v1136 & 4) != 0)
          {
            unint64_t v1137 = v1136 & 0xFFFFFFFFFFFFFFF8;
            if (v1137) {
              goto LABEL_950;
            }
          }
        }
LABEL_954:
        int v156 = (void **)v1639;
LABEL_108:
        if (v156 != &v1640) {
          free(v156);
        }
        return (uint64_t *)v4;
      case '0':
        return sub_1CB9E5C1C(1, a2, a3, (uint64_t *)a4, *(unsigned char **)(a1 + 184296), 0);
      case '1':
      case '2':
      case '3':
      case '4':
      case '6':
      case '7':
LABEL_1156:
        __break(1u);
LABEL_1157:
LABEL_272:
        if ((int)v6 <= 31)
        {
          switch(v6)
          {
            case 1:
              uint64_t v297 = 0;
              int v298 = 0;
              uint64_t v299 = 2;
              goto LABEL_859;
            case 0x10:
              uint64_t v297 = 0;
              int v298 = 0;
              uint64_t v299 = 4;
              goto LABEL_859;
            case 8:
              uint64_t v297 = 0;
              int v298 = 0;
              uint64_t v299 = 3;
              goto LABEL_859;
          }
        }
        else
        {
          switch(v6)
          {
            case 0x20:
              uint64_t v297 = 0;
              int v298 = 0;
              uint64_t v299 = 5;
              goto LABEL_859;
            case 0x40:
              uint64_t v297 = 0;
              int v298 = 1;
              uint64_t v299 = 6;
              goto LABEL_859;
            case 0x80:
              uint64_t v297 = 0;
              int v298 = 0;
              uint64_t v299 = 7;
              goto LABEL_859;
          }
        }
        uint64_t v297 = llvm::IntegerType::get(v4, (llvm::LLVMContext *)v6);
        int v298 = 0;
        uint64_t v299 = 0;
LABEL_859:
        uint64_t v1208 = *(unsigned __int16 *)(v1635 + 24);
        uint64_t v1209 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1637, (llvm *)5, 0, 0, 0);
        uint64_t v1211 = v1210;
        v1212 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1637, (llvm *)5, 0, 0, 0);
        uint64_t v1609 = v1213;
        if (v298 && v1208 == 172)
        {
          if (*(unsigned char *)(*(void *)(a1 + 184296) + 318))
          {
            for (uint64_t i = 0; i != 64; i += 32)
            {
              v1289 = (char *)&v1639 + i;
              *((_DWORD *)v1289 + 2) = 1;
              *(void *)v1289 = 0;
              *((_DWORD *)v1289 + 6) = 1;
              *((void *)v1289 + 2) = 0;
            }
            sub_1CD7F121C(a4, **(void **)(v1635 + 32), *(void *)(*(void *)(v1635 + 32) + 8), 0, (uint64_t)&v1619);
            if (DWORD2(v1639) >= 0x41 && (void)v1639) {
              MEMORY[0x1D25D9CB0](v1639, 0x1000C8000313F17);
            }
            *(void *)&long long v1639 = v1619;
            DWORD2(v1639) = DWORD2(v1619);
            DWORD2(v1619) = 0;
            if (v1641 >= 0x41 && v1640)
            {
              MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
              v1640 = v1620;
              LODWORD(v1641) = v1621;
              int v1621 = 0;
              if (DWORD2(v1619) >= 0x41 && (void)v1619) {
                MEMORY[0x1D25D9CB0](v1619, 0x1000C8000313F17);
              }
            }
            else
            {
              v1640 = v1620;
              LODWORD(v1641) = v1621;
            }
            sub_1CD7F121C(a4, *(void *)(*(void *)(v1635 + 32) + 40), *(void *)(*(void *)(v1635 + 32) + 48), 0, (uint64_t)&v1619);
            if (v1643 >= 0x41 && v1642) {
              MEMORY[0x1D25D9CB0](v1642, 0x1000C8000313F17);
            }
            v1642 = (uint64_t *)v1619;
            LODWORD(v1643) = DWORD2(v1619);
            DWORD2(v1619) = 0;
            if (v1645 >= 0x41 && v1644)
            {
              MEMORY[0x1D25D9CB0](v1644, 0x1000C8000313F17);
              v1644 = v1620;
              LODWORD(v1645) = v1621;
              int v1621 = 0;
              if (DWORD2(v1619) >= 0x41 && (void)v1619) {
                MEMORY[0x1D25D9CB0](v1619, 0x1000C8000313F17);
              }
            }
            else
            {
              v1644 = v1620;
              LODWORD(v1645) = v1621;
            }
            int v1618 = DWORD2(v1639);
            v1594 = v1212;
            if (DWORD2(v1639) > 0x40) {
              operator new[]();
            }
            uint64_t v1290 = ~(void)v1639;
            if (DWORD2(v1639)) {
              unint64_t v1291 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1639);
            }
            else {
              unint64_t v1291 = 0;
            }
            unint64_t v1292 = v1291 & v1290;
            unint64_t v1617 = v1291 & v1290;
            int v1618 = 0;
            int v1616 = v1643;
            if (v1643 > 0x40) {
              operator new[]();
            }
            unint64_t v1391 = ~(unint64_t)v1642;
            if (v1643) {
              unint64_t v1392 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1643;
            }
            else {
              unint64_t v1392 = 0;
            }
            unint64_t v1615 = v1392 & v1391;
            int v1616 = 0;
            if ((v1392 & v1391 & v1292) != 0) {
              uint64_t v1208 = 172;
            }
            else {
              uint64_t v1208 = 56;
            }
            for (uint64_t j = 0; j != -64; j -= 32)
            {
              uint64_t v1394 = (char *)&v1639 + j;
              if (*(_DWORD *)((char *)&v1645 + j) >= 0x41u)
              {
                uint64_t v1395 = *((void *)v1394 + 6);
                if (v1395) {
                  MEMORY[0x1D25D9CB0](v1395, 0x1000C8000313F17);
                }
              }
              if (*((_DWORD *)v1394 + 10) >= 0x41u)
              {
                uint64_t v1396 = *((void *)v1394 + 4);
                if (v1396) {
                  MEMORY[0x1D25D9CB0](v1396, 0x1000C8000313F17);
                }
              }
            }
            v1212 = v1594;
          }
          else
          {
            uint64_t v1208 = 172;
          }
        }
        char v1214 = v298 ^ 1;
        v1215 = *(uint64_t **)(v1635 + 32);
        uint64_t v1216 = *v1215;
        uint64_t v1217 = (void *)v1215[1];
        uint64_t v1218 = *(void *)(a4 + 832);
        if (v1208 == 56) {
          char v1214 = 1;
        }
        if (v1214)
        {
          if (v1218) {
            __int16 v1220 = *(_WORD *)(v1218 + 8);
          }
          else {
            __int16 v1220 = 0;
          }
          int v1229 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1637, (llvm *)v299, v297, v1216, v1217, v1220);
          uint64_t v1231 = v1230;
          uint64_t v1232 = *(void *)(v1635 + 32);
          uint64_t v1233 = *(void *)(v1232 + 40);
          uint64_t v1234 = *(void **)(v1232 + 48);
          uint64_t v1235 = *(void *)(a4 + 832);
          if (v1235) {
            __int16 v1236 = *(_WORD *)(v1235 + 8);
          }
          else {
            __int16 v1236 = 0;
          }
          v1276 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1637, (llvm *)v299, v297, v1233, v1234, v1236);
          uint64_t v1279 = *(void *)(a4 + 832);
          if (v1279) {
            LOWORD(v1279) = *(_WORD *)(v1279 + 8);
          }
          v1271 = sub_1CCFDED5C(a4, v1208, (const llvm::APInt *)&v1637, (llvm *)v299, v297, (uint64_t)v1229, v1231, v1278, (uint64_t)v1276, v1277, v1279);
          v1273 = v1280;
          v1281 = (uint64_t *)(*(void *)(v1635 + 40) + 16 * v1636);
          uint64_t v1282 = *v1281;
          uint64_t v1283 = v1281[1];
          uint64_t v1284 = *(void *)(a4 + 832);
          if (v1284) {
            __int16 v1275 = *(_WORD *)(v1284 + 8);
          }
          else {
            __int16 v1275 = 0;
          }
          v1285 = (llvm::APFloatBase *)a4;
        }
        else
        {
          if (v1218) {
            __int16 v1219 = *(_WORD *)(v1218 + 8);
          }
          else {
            __int16 v1219 = 0;
          }
          uint64_t v1221 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1637, (llvm *)0x31, 0, v1216, v1217, v1219);
          uint64_t v1223 = v1222;
          uint64_t v1224 = *(void *)(v1635 + 32);
          uint64_t v1225 = *(void *)(v1224 + 40);
          uint64_t v1226 = *(void **)(v1224 + 48);
          uint64_t v1227 = *(void *)(a4 + 832);
          if (v1227) {
            __int16 v1228 = *(_WORD *)(v1227 + 8);
          }
          else {
            __int16 v1228 = 0;
          }
          uint64_t v1238 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1637, (llvm *)0x31, 0, v1225, v1226, v1228);
          uint64_t v1240 = v1239;
          uint64_t v1241 = *(void *)(a4 + 832);
          if (v1241) {
            LOWORD(v1241) = *(_WORD *)(v1241 + 8);
          }
          unsigned int v1243 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1637, (llvm *)5, 0, (uint64_t)v1221, v1223, v1237, (uint64_t)v1209, v1211, v1241);
          uint64_t v1245 = v1244;
          uint64_t v1246 = *(void *)(a4 + 832);
          if (v1246) {
            LOWORD(v1246) = *(_WORD *)(v1246 + 8);
          }
          unsigned int v1248 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1637, (llvm *)5, 0, (uint64_t)v1221, v1223, v1242, (uint64_t)v1212, v1609, v1246);
          uint64_t v1250 = v1249;
          uint64_t v1251 = *(void *)(a4 + 832);
          if (v1251) {
            LOWORD(v1251) = *(_WORD *)(v1251 + 8);
          }
          int v1253 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1637, (llvm *)5, 0, (uint64_t)v1238, v1240, v1247, (uint64_t)v1209, v1211, v1251);
          uint64_t v1255 = v1254;
          uint64_t v1256 = *(void *)(a4 + 832);
          if (v1256) {
            LOWORD(v1256) = *(_WORD *)(v1256 + 8);
          }
          uint64_t v1258 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1637, (llvm *)5, 0, (uint64_t)v1238, v1240, v1252, (uint64_t)v1212, v1609, v1256);
          uint64_t v1260 = v1259;
          uint64_t v1261 = *(void *)(a4 + 832);
          if (v1261) {
            LOWORD(v1261) = *(_WORD *)(v1261 + 8);
          }
          v1263 = sub_1CCFDED5C(a4, *(unsigned __int16 *)(v1635 + 24), (const llvm::APInt *)&v1637, (llvm *)5, 0, (uint64_t)v1243, v1245, v1257, (uint64_t)v1253, v1255, v1261);
          uint64_t v1265 = v1264;
          uint64_t v1266 = *(void *)(a4 + 832);
          if (v1266) {
            LOWORD(v1266) = *(_WORD *)(v1266 + 8);
          }
          v1267 = sub_1CCFDED5C(a4, *(unsigned __int16 *)(v1635 + 24), (const llvm::APInt *)&v1637, (llvm *)5, 0, (uint64_t)v1248, v1250, v1262, (uint64_t)v1258, v1260, v1266);
          uint64_t v1270 = *(void *)(a4 + 832);
          if (v1270) {
            LOWORD(v1270) = *(_WORD *)(v1270 + 8);
          }
          v1271 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1637, (llvm *)0x31, 0, (uint64_t)v1263, v1265, v1269, (uint64_t)v1267, v1268, v1270);
          v1273 = v1272;
          uint64_t v1274 = *(void *)(a4 + 832);
          if (v1274) {
            __int16 v1275 = *(_WORD *)(v1274 + 8);
          }
          else {
            __int16 v1275 = 0;
          }
          v1285 = (llvm::APFloatBase *)a4;
          uint64_t v1282 = 6;
          uint64_t v1283 = 0;
        }
        uint64_t v968 = sub_1CD7F3564(v1285, (const char *)0xD8, (uint64_t)&v1637, (llvm *)v1282, v1283, (uint64_t)v1271, v1273, v1275);
        goto LABEL_903;
      case '5':
        if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 5) {
          return 0;
        }
        uint64_t v118 = *(unsigned int **)(a2 + 32);
        uint64_t v119 = *(void *)v118;
        if (*(unsigned char *)(*(void *)(*(void *)v118 + 40) + 16 * v118[2]) != 6) {
          return 0;
        }
        unsigned int v120 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1639 = v120;
        if (v120)
        {
          llvm::MetadataTracking::track((uint64_t)&v1639, v120, 2);
          uint64_t v118 = *(unsigned int **)(v1635 + 32);
          uint64_t v119 = *(void *)v118;
        }
        DWORD2(v1639) = *((_DWORD *)v7 + 15);
        uint64_t v121 = (void *)*((void *)v118 + 1);
        uint64_t v122 = *(void *)(a4 + 832);
        if (v122) {
          __int16 v123 = *(_WORD *)(v122 + 8);
        }
        else {
          __int16 v123 = 0;
        }
        uint64_t v291 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1639, (llvm *)0x31, 0, v119, v121, v123);
        uint64_t v293 = *(void *)(v1635 + 32);
        uint64_t v294 = *(void *)(v293 + 40);
        uint64_t v295 = *(void *)(v293 + 48);
        uint64_t v296 = *(void *)(a4 + 832);
        if (v296) {
          LOWORD(v296) = *(_WORD *)(v296 + 8);
        }
        uint64_t v229 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v291, v290, v292, v294, v295, v296);
        goto LABEL_151;
      case '8':
      case '9':
        uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
        v1622 = v11;
        if (v11) {
          llvm::MetadataTracking::track((uint64_t)&v1622, v11, 2);
        }
        int v1623 = *((_DWORD *)v7 + 15);
        int v4 = (llvm::IntegerType *)sub_1CD41A260((uint64_t)v7, (llvm::APFloatBase *)a4, (const llvm::APInt *)&v1622);
        uint64_t v12 = v1622;
        if (!v1622) {
          return (uint64_t *)v4;
        }
        int v13 = *v1622;
        if ((v13 - 4) > 0x1E)
        {
          if ((v13 - 3) >= 0xFFFFFFFE) {
            uint64_t v277 = v1622;
          }
          else {
            uint64_t v277 = 0;
          }
          if ((v13 - 3) < 0xFFFFFFFE) {
            goto LABEL_917;
          }
          unint64_t v15 = (unint64_t)(v277 + 8);
        }
        else
        {
          if ((v1622[1] & 0x7F) != 2 && !*((_DWORD *)v1622 + 3)) {
            return (uint64_t *)v4;
          }
          uint64_t v14 = *((void *)v1622 + 2);
          if ((v14 & 4) == 0) {
            return (uint64_t *)v4;
          }
          unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
          if (!v15) {
            return (uint64_t *)v4;
          }
        }
        uint64_t v261 = &v1622;
        goto LABEL_237;
      case ':':
        if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 6) {
          return 0;
        }
        uint64_t v135 = *(void *)(a1 + 184296);
        uint64_t v136 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1619 = v136;
        if (v136) {
          llvm::MetadataTracking::track((uint64_t)&v1619, v136, 2);
        }
        DWORD2(v1619) = *((_DWORD *)v7 + 15);
        uint64_t v137 = (uint64_t *)v7[4];
        if (*(unsigned char *)(v135 + 357))
        {
          uint64_t v138 = *v137;
          goto LABEL_559;
        }
        uint64_t v138 = *v137;
        uint64_t v139 = v137[5];
        int v140 = *(unsigned __int16 *)(*v137 + 24);
        int v141 = *(unsigned __int16 *)(v139 + 24);
        if (v140 == 35 || v140 == 11) {
          uint64_t v143 = *v137;
        }
        else {
          uint64_t v143 = 0;
        }
        if (v141 != 35 && v141 != 11) {
          uint64_t v139 = 0;
        }
        if (!v143) {
          goto LABEL_281;
        }
        uint64_t v145 = *(void *)(v143 + 80);
        unsigned int v146 = *(_DWORD *)(v145 + 32);
        if (v146 > 0x40)
        {
          uint64_t v143 = **(void **)(v145 + 24);
          if (HIDWORD(v143))
          {
            if (v143 > 0x7FFFFFFF) {
              goto LABEL_97;
            }
LABEL_280:
            LODWORD(v143) = v143 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
LABEL_281:
            if (!v139) {
              goto LABEL_290;
            }
            uint64_t v300 = *(void *)(v139 + 80);
            unsigned int v301 = *(_DWORD *)(v300 + 32);
            if (v301 > 0x40)
            {
              uint64_t v139 = **(void **)(v300 + 24);
              if (HIDWORD(v139))
              {
                if (v139 > 0x7FFFFFFF) {
                  goto LABEL_285;
                }
LABEL_289:
                LODWORD(v139) = v139 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
LABEL_290:
                if ((v140 & 0xFFFE) == 0xC6) {
                  int v303 = 1;
                }
                else {
                  int v303 = v143;
                }
                int v304 = v139 ^ 1;
                if (v141 == 198) {
                  int v304 = 0;
                }
                if (v141 == 199) {
                  int v305 = 0;
                }
                else {
                  int v305 = v304;
                }
                if (v303 != 1 || v305 != 0)
                {
LABEL_559:
                  uint64_t v721 = (void *)v137[1];
                  uint64_t v722 = *(void *)(a4 + 832);
                  if (v722) {
                    __int16 v723 = *(_WORD *)(v722 + 8);
                  }
                  else {
                    __int16 v723 = 0;
                  }
                  unint64_t v747 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0x31, 0, v138, v721, v723);
                  uint64_t v749 = v748;
                  __int16 v750 = 0;
                  uint64_t v751 = v7[4];
                  uint64_t v752 = *(void *)(v751 + 40);
                  unint64_t v753 = *(void **)(v751 + 48);
                  uint64_t v754 = *(void *)(a4 + 832);
                  if (v754) {
                    __int16 v750 = *(_WORD *)(v754 + 8);
                  }
                  int64_t v755 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0x31, 0, v752, v753, v750);
                  uint64_t v757 = v756;
                  unsigned int v758 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
                  __int16 v761 = 0;
                  uint64_t v762 = *(void *)(a4 + 832);
                  if (v762) {
                    __int16 v761 = *(_WORD *)(v762 + 8);
                  }
                  uint64_t v763 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v747, v749, v760, (uint64_t)v758, v759, v761);
                  uint64_t v765 = v764;
                  uint64_t v766 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
                  __int16 v769 = 0;
                  uint64_t v770 = *(void *)(a4 + 832);
                  if (v770) {
                    __int16 v769 = *(_WORD *)(v770 + 8);
                  }
                  uint64_t v1604 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v747, v749, v768, (uint64_t)v766, v767, v769);
                  uint64_t v772 = v771;
                  uint64_t v773 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
                  __int16 v776 = 0;
                  uint64_t v777 = *(void *)(a4 + 832);
                  if (v777) {
                    __int16 v776 = *(_WORD *)(v777 + 8);
                  }
                  uint64_t v778 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v755, v757, v775, (uint64_t)v773, v774, v776);
                  uint64_t v780 = v779;
                  uint64_t v781 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
                  __int16 v784 = 0;
                  uint64_t v785 = *(void *)(a4 + 832);
                  if (v785) {
                    __int16 v784 = *(_WORD *)(v785 + 8);
                  }
                  uint64_t v786 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v755, v757, v783, (uint64_t)v781, v782, v784);
                  uint64_t v788 = v787;
                  if (!*(unsigned char *)(v135 + 357))
                  {
                    uint64_t v789 = sub_1CD7F95FC(a4, 5, 0, 5, 0);
                    int v793 = sub_1CD7FFB18((void *)a4, (const char *)0x40, (const llvm::APInt *)&v1619, v789, v790, (uint64_t)v763, v765, v791, (uint64_t)v778, v780);
                    uint64_t v1589 = v794;
                    uint64_t v795 = *(void *)(a4 + 832);
                    if (v795) {
                      LOWORD(v795) = *(_WORD *)(v795 + 8);
                    }
                    v797 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v763, v765, v792, (uint64_t)v786, v788, v795);
                    unint64_t v799 = v788 & 0xFFFFFFFF00000000 | v798;
                    uint64_t v800 = *(void *)(a4 + 832);
                    if (v800) {
                      LOWORD(v800) = *(_WORD *)(v800 + 8);
                    }
                    int v802 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v1604, v772, v796, (uint64_t)v778, v780, v800);
                    unint64_t v804 = v772 & 0xFFFFFFFF00000000 | v803;
                    uint64_t v805 = *(void *)(a4 + 832);
                    if (v805) {
                      LOWORD(v805) = *(_WORD *)(v805 + 8);
                    }
                    int v807 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v793, 1, v801, (uint64_t)v797, v799, v805);
                    uint64_t v809 = *(void *)(a4 + 832);
                    if (v809) {
                      LOWORD(v809) = *(_WORD *)(v809 + 8);
                    }
                    unsigned int v810 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v807, v806, v808, (uint64_t)v802, v804, v809);
                    uint64_t v813 = *(void *)(a4 + 832);
                    if (v813) {
                      LOWORD(v813) = *(_WORD *)(v813 + 8);
                    }
                    char v815 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1619, (llvm *)0x31, 0, (uint64_t)v793, v1589, v812, (uint64_t)v810, v811, v813);
                    uint64_t v816 = *(void *)(a4 + 832);
                    if (v816) {
                      __int16 v817 = *(_WORD *)(v816 + 8);
                    }
                    else {
                      __int16 v817 = 0;
                    }
LABEL_797:
                    unsigned int v7 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)6, 0, (uint64_t)v815, v814, v817);
                    goto LABEL_303;
                  }
                  *(void *)&long long v1637 = v1619;
                  if ((void)v1619) {
                    llvm::MetadataTracking::track((uint64_t)&v1637, (unsigned __int8 *)v1619, 2);
                  }
                  DWORD2(v1637) = DWORD2(v1619);
                  sub_1CD41A994((uint64_t)v763, v765, (uint64_t)v1604, v772, (uint64_t)v778, v780, (uint64_t)v786, v788, (uint64_t **)&v1639, a4, (const llvm::APInt *)&v1637);
                  if ((void)v1637)
                  {
                    int v819 = *(unsigned __int8 *)v1637;
                    if ((v819 - 4) > 0x1E)
                    {
                      if ((v819 - 3) >= 0xFFFFFFFE) {
                        uint64_t v1329 = v1637;
                      }
                      else {
                        uint64_t v1329 = 0;
                      }
                      if ((v819 - 3) < 0xFFFFFFFE)
                      {
                        if (v819 == 3) {
                          *(void *)(v1637 + 8) = 0;
                        }
                        goto LABEL_620;
                      }
                      unint64_t v1330 = v1329 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v1637 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1637 + 12)) {
                        goto LABEL_620;
                      }
                      uint64_t v1507 = *(void *)(v1637 + 16);
                      if ((v1507 & 4) == 0) {
                        goto LABEL_620;
                      }
                      unint64_t v1330 = v1507 & 0xFFFFFFFFFFFFFFF8;
                      if (!v1330) {
                        goto LABEL_620;
                      }
                    }
                    *(void *)&long long v1632 = &v1637;
                    sub_1CC5FA668(v1330 + 16, &v1632);
                  }
LABEL_620:
                  uint64_t v820 = *(void *)(a4 + 832);
                  if (v820) {
                    LOWORD(v820) = *(_WORD *)(v820 + 8);
                  }
                  char v815 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1619, (llvm *)0x31, 0, v1639, *((uint64_t *)&v1639 + 1), v818, (uint64_t)v1640, v1641, v820);
                  uint64_t v821 = *(void *)(a4 + 832);
                  if (v821) {
                    __int16 v817 = *(_WORD *)(v821 + 8);
                  }
                  else {
                    __int16 v817 = 0;
                  }
                  goto LABEL_797;
                }
LABEL_303:
                if ((void)v1619)
                {
                  int v307 = *(unsigned __int8 *)v1619;
                  if ((v307 - 4) > 0x1E)
                  {
                    if ((v307 - 3) >= 0xFFFFFFFE) {
                      uint64_t v308 = v1619;
                    }
                    else {
                      uint64_t v308 = 0;
                    }
                    if ((v307 - 3) < 0xFFFFFFFE)
                    {
                      if (v307 == 3) {
                        *(void *)(v1619 + 8) = 0;
                      }
                      return v7;
                    }
                    unint64_t v309 = v308 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(v1619 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1619 + 12)) {
                      return v7;
                    }
                    uint64_t v1497 = *(void *)(v1619 + 16);
                    if ((v1497 & 4) == 0) {
                      return v7;
                    }
                    unint64_t v309 = v1497 & 0xFFFFFFFFFFFFFFF8;
                    if (!v309) {
                      return v7;
                    }
                  }
                  *(void *)&long long v1639 = &v1619;
                  sub_1CC5FA668(v309 + 16, &v1639);
                }
                return v7;
              }
            }
            else
            {
              unint64_t v302 = *(void *)(v300 + 24);
              if (HIDWORD(v302))
              {
                uint64_t v139 = (uint64_t)(v302 << -(char)v301) >> -(char)v301;
                if (v139 >= 0x80000000)
                {
LABEL_285:
                  LODWORD(v139) = 0;
                  goto LABEL_290;
                }
                goto LABEL_289;
              }
            }
            LODWORD(v139) = 1;
            goto LABEL_290;
          }
        }
        else
        {
          unint64_t v147 = *(void *)(v145 + 24);
          if (HIDWORD(v147))
          {
            uint64_t v143 = (uint64_t)(v147 << -(char)v146) >> -(char)v146;
            if (v143 >= 0x80000000)
            {
LABEL_97:
              LODWORD(v143) = 0;
              goto LABEL_281;
            }
            goto LABEL_280;
          }
        }
        LODWORD(v143) = 1;
        goto LABEL_281;
      default:
        if (v9 == 13)
        {
          uint64_t v103 = *(unsigned __int8 **)(a2 + 64);
          *(void *)&long long v1639 = v103;
          if (v103)
          {
            llvm::MetadataTracking::track((uint64_t)&v1639, v103, 2);
            uint64_t v104 = v1635;
          }
          else
          {
            uint64_t v104 = (uint64_t)v7;
          }
          DWORD2(v1639) = *((_DWORD *)v7 + 15);
          uint64_t v229 = sub_1CB9E7754(v104, (llvm::APFloatBase *)a4);
LABEL_151:
          int v4 = (llvm::IntegerType *)v229;
LABEL_152:
          uint64_t v12 = (unsigned __int8 *)v1639;
          if (!(void)v1639) {
            return (uint64_t *)v4;
          }
          int v13 = *(unsigned __int8 *)v1639;
          if ((v13 - 4) > 0x1E)
          {
            if ((v13 - 3) >= 0xFFFFFFFE) {
              uint64_t v232 = v1639;
            }
            else {
              uint64_t v232 = 0;
            }
            if ((v13 - 3) < 0xFFFFFFFE) {
              goto LABEL_917;
            }
            unint64_t v231 = v232 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1639 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1639 + 12)) {
              return (uint64_t *)v4;
            }
            uint64_t v230 = *(void *)(v1639 + 16);
            if ((v230 & 4) == 0) {
              return (uint64_t *)v4;
            }
            unint64_t v231 = v230 & 0xFFFFFFFFFFFFFFF8;
            if (!v231) {
              return (uint64_t *)v4;
            }
          }
          *(void *)&long long v1619 = &v1639;
          uint64_t v233 = v231 + 16;
          uint64_t v234 = &v1619;
LABEL_238:
          sub_1CC5FA668(v233, v234);
          return (uint64_t *)v4;
        }
        char v148 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1619 = v148;
        if (v148)
        {
          llvm::MetadataTracking::track((uint64_t)&v1619, v148, 2);
          unsigned int v149 = (uint64_t *)v1635;
          LODWORD(v6) = v1636;
        }
        else
        {
          unsigned int v149 = v7;
        }
        DWORD2(v1619) = *((_DWORD *)v7 + 15);
        uint64_t v235 = v149[4];
        uint64_t v236 = v149[5] + 16 * v6;
        int v237 = *(llvm **)v236;
        uint64_t v238 = *(void *)(v236 + 8);
        uint64_t v240 = *(void *)v235;
        uint64_t v239 = *(void *)(v235 + 8);
        uint64_t v242 = *(void *)(v235 + 40);
        uint64_t v241 = *(void **)(v235 + 48);
        __int16 v243 = *((_WORD *)v149 + 36);
        uint64_t v244 = *(void *)v236;
        if ((*(_WORD *)(*(void *)a4 + 1020) & 1) == 0 && (v243 & 0x80) == 0 && v244 == 10)
        {
          uint64_t v413 = *(void *)(a4 + 832);
          if (v413) {
            __int16 v414 = *(_WORD *)(v413 + 8);
          }
          else {
            __int16 v414 = 0;
          }
          unint64_t v528 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)5, 0, *(void *)v235, *(void **)(v235 + 8), v414);
          uint64_t v1560 = v529;
          uint64_t v1567 = (uint64_t)v528;
          __int16 v530 = 0;
          uint64_t v531 = *(void *)(a4 + 832);
          if (v531) {
            __int16 v530 = *(_WORD *)(v531 + 8);
          }
          __int16 v532 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)5, 0, v242, v241, v530);
          uint64_t v1549 = v533;
          uint64_t v1553 = (uint64_t)v532;
          uint64_t v534 = sub_1CD7EBF14(a4, 2139095040, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
          uint64_t v536 = v535;
          uint64_t v537 = sub_1CD7EBF14(a4, -2139095041, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
          uint64_t v539 = v538;
          uint64_t v541 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
          uint64_t v543 = v542;
          __int16 v544 = 0;
          uint64_t v545 = *(void *)(a4 + 832);
          if (v545) {
            __int16 v544 = *(_WORD *)(v545 + 8);
          }
          uint64_t v546 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1567, v1560, v540, (uint64_t)v534, v536, v544);
          uint64_t v1526 = v548;
          uint64_t v1528 = (uint64_t)v546;
          __int16 v549 = 0;
          uint64_t v550 = *(void *)(a4 + 832);
          if (v550) {
            __int16 v549 = *(_WORD *)(v550 + 8);
          }
          uint64_t v1516 = v536;
          uint64_t v1517 = (uint64_t)v534;
          uint64_t v551 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1553, v1549, v547, (uint64_t)v534, v536, v549);
          uint64_t v1521 = v553;
          uint64_t v1523 = (uint64_t)v551;
          __int16 v554 = 0;
          uint64_t v555 = *(void *)(a4 + 832);
          if (v555) {
            __int16 v554 = *(_WORD *)(v555 + 8);
          }
          uint64_t v557 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1528, v1526, v552, (uint64_t)v541, v543, v554);
          unsigned int v559 = v558;
          __int16 v560 = 0;
          uint64_t v561 = *(void *)(a4 + 832);
          if (v561) {
            __int16 v560 = *(_WORD *)(v561 + 8);
          }
          uint64_t v1514 = v543;
          uint64_t v1515 = (uint64_t)v541;
          uint64_t v562 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1523, v1521, v556, (uint64_t)v541, v543, v560);
          uint64_t v564 = v563;
          uint64_t v565 = sub_1CD7EBF14(a4, 2130706432, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
          int v1544 = v566;
          uint64_t v1546 = (uint64_t)v565;
          int v567 = sub_1CD7EBF14(a4, 1065353216, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
          uint64_t v1577 = v568;
          uint64_t v1587 = (uint64_t)v567;
          uint64_t v569 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, (uint64_t)v557, v559, (uint64_t)v562, v564, (uint64_t)v557, v559, (uint64_t)v562, v564, SHIDWORD(v564), 0xAu);
          int v1537 = v571;
          uint64_t v1540 = (uint64_t)v569;
          __int16 v572 = 0;
          uint64_t v573 = *(void *)(a4 + 832);
          if (v573) {
            __int16 v572 = *(_WORD *)(v573 + 8);
          }
          uint64_t v575 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1567, v1560, v570, (uint64_t)v537, v539, v572);
          uint64_t v577 = v576;
          __int16 v578 = 0;
          uint64_t v579 = *(void *)(a4 + 832);
          if (v579) {
            __int16 v578 = *(_WORD *)(v579 + 8);
          }
          uint64_t v581 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1553, v1549, v574, (uint64_t)v537, v539, v578);
          uint64_t v1519 = v582;
          __int16 v583 = 0;
          uint64_t v584 = *(void *)(a4 + 832);
          if (v584) {
            __int16 v583 = *(_WORD *)(v584 + 8);
          }
          uint64_t v1513 = v240;
          uint64_t v1603 = v239;
          int v586 = sub_1CCFDED5C(a4, 172, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v575, v577, v580, v1587, v1577, v583);
          __int16 v587 = 0;
          unint64_t v1533 = v577 & 0xFFFFFFFF00000000;
          unint64_t v589 = v577 & 0xFFFFFFFF00000000 | v588;
          uint64_t v590 = *(void *)(a4 + 832);
          if (v590) {
            __int16 v587 = *(_WORD *)(v590 + 8);
          }
          uint64_t v591 = sub_1CCFDED5C(a4, 172, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v581, v1519, v585, v1587, v1577, v587);
          unint64_t v593 = v1519 & 0xFFFFFFFF00000000 | v592;
          uint64_t v594 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v1540, v1537, v1546, v1544, v1567, v1560, (uint64_t)v586, v589, SHIDWORD(v589), 0xAu);
          char v1561 = (void *)(v595 | v1533);
          uint64_t v1568 = (uint64_t)v594;
          int v596 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v1540, v1537, v1546, v1544, v1553, v1549, (uint64_t)v591, v593, SHIDWORD(v593), 0xAu);
          __int16 v597 = 0;
          uint64_t v599 = (void *)(v1519 & 0xFFFFFFFF00000000 | v598);
          uint64_t v600 = *(void *)(a4 + 832);
          if (v600) {
            __int16 v597 = *(_WORD *)(v600 + 8);
          }
          int v601 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0xA, 0, v1568, v1561, v597);
          unsigned int v1554 = v602;
          uint64_t v1562 = (uint64_t)v601;
          __int16 v603 = 0;
          uint64_t v604 = *(void *)(a4 + 832);
          if (v604) {
            __int16 v603 = *(_WORD *)(v604 + 8);
          }
          char v1569 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v596, v599, v603);
          unsigned int v1550 = v606;
          __int16 v607 = 0;
          uint64_t v608 = *(void *)(a4 + 832);
          if (v608) {
            __int16 v607 = *(_WORD *)(v608 + 8);
          }
          int v611 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1619, (llvm *)5, 0, v1528, v1526, v605, v1523, v1521, v607);
          uint64_t v612 = v609;
          __int16 v613 = 0;
          uint64_t v614 = *(void *)(a4 + 832);
          if (v614) {
            __int16 v613 = *(_WORD *)(v614 + 8);
          }
          unsigned int v616 = sub_1CCFDED5C(a4, 177, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v611, v609, v610, v1515, v1514, v613);
          uint64_t v618 = v615;
          __int16 v619 = 0;
          uint64_t v620 = *(void *)(a4 + 832);
          if (v620) {
            __int16 v619 = *(_WORD *)(v620 + 8);
          }
          uint64_t v621 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v616, v615, v617, v1517, v1516, v619);
          uint64_t v624 = (uint64_t)v621;
          __int16 v625 = 0;
          unint64_t v626 = v618 & 0xFFFFFFFF00000000 | v622;
          uint64_t v627 = *(void *)(a4 + 832);
          if (v627) {
            __int16 v625 = *(_WORD *)(v627 + 8);
          }
          unint64_t v628 = v618 & 0xFFFFFFFF00000000;
          int v630 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v611, v612, v623, (uint64_t)v621, v618 & 0xFFFFFFFF00000000 | v622, v625);
          uint64_t v632 = v631;
          __int16 v633 = 0;
          uint64_t v634 = *(void *)(a4 + 832);
          if (v634) {
            __int16 v633 = *(_WORD *)(v634 + 8);
          }
          unsigned int v636 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1619, (llvm *)5, 0, v624, v626, v629, v1587, v1577, v633);
          __int16 v637 = 0;
          unint64_t v1529 = v628;
          char v639 = (void *)(v638 | v628);
          uint64_t v640 = *(void *)(a4 + 832);
          if (v640) {
            __int16 v637 = *(_WORD *)(v640 + 8);
          }
          int v641 = (void *)(v1550 | v1519 & 0xFFFFFFFF00000000);
          uint64_t v642 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v630, v632, v635, v1587, v1577, v637);
          __int16 v643 = 0;
          int v645 = (void *)(v632 & 0xFFFFFFFF00000000 | v644);
          uint64_t v646 = *(void *)(a4 + 832);
          if (v646) {
            __int16 v643 = *(_WORD *)(v646 + 8);
          }
          v1551 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v636, v639, v643);
          __int16 v648 = 0;
          uint64_t v649 = *(void *)(a4 + 832);
          if (v649) {
            __int16 v648 = *(_WORD *)(v649 + 8);
          }
          uint64_t v650 = v1554;
          uint64_t v651 = v647;
          v1555 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v642, v645, v648);
          __int16 v653 = 0;
          uint64_t v654 = *(void *)(a4 + 832);
          if (v654) {
            __int16 v653 = *(_WORD *)(v654 + 8);
          }
          uint64_t v655 = v650 | v1533;
          uint64_t v1530 = v651 | v1529;
          unint64_t v1534 = v652 | v632 & 0xFFFFFFFF00000000;
          uint64_t v656 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A1, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v1569, v641, v653);
          uint64_t v1578 = v657;
          uint64_t v1588 = (uint64_t)v656;
          __int16 v658 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, 10, 0, 0, 1.0);
          uint64_t v660 = v659;
          __int16 v661 = 0;
          uint64_t v662 = *(void *)(a4 + 832);
          if (v662) {
            __int16 v661 = *(_WORD *)(v662 + 8);
          }
          uint64_t v1524 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v1569, v641, v661);
          uint64_t v664 = v663;
          unint64_t v666 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, v1588, (uint64_t)v1578, v665, (uint64_t)v1524, v663, (uint64_t)v658, v660, SHIDWORD(v660), v243);
          uint64_t v669 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v666, v667, v668, v1588, (uint64_t)v1578, v1588, (int)v1578, SHIDWORD(v1578), v243);
          uint64_t v671 = v670;
          uint64_t v673 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, v1562, v655, v672, (uint64_t)v669, v670, v243);
          uint64_t v674 = v655;
          uint64_t v675 = (uint64_t)v673;
          uint64_t v677 = v676;
          uint64_t v679 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1524, v664, v678, (uint64_t)v673, v676, v1562, v674, SHIDWORD(v674), v243);
          uint64_t v682 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v679, v680, v681, (uint64_t)v669, v671, v675, v677, SHIDWORD(v677), v243);
          uint64_t v684 = v683;
          uint64_t v686 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v682, v683, v685, (uint64_t)v1551, v1530, v243);
          char v1563 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v686, v684 & 0xFFFFFFFF00000000 | v687, v688, (uint64_t)v1555, v1534, v243);
          unsigned int v690 = v689;
          unsigned int v692 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1569, (uint64_t)v641, v691, v1588, (uint64_t)v1578, v243);
          int v1570 = v693;
          __int16 v694 = 0;
          uint64_t v695 = *(void *)(a4 + 832);
          if (v695) {
            __int16 v694 = *(_WORD *)(v695 + 8);
          }
          unsigned int v696 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)5, 0, v1588, v1578, v694);
          uint64_t v698 = v697;
          uint64_t v699 = sub_1CD7EBF14(a4, 0x800000, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
          __int16 v702 = 0;
          uint64_t v703 = *(void *)(a4 + 832);
          if (v703) {
            __int16 v702 = *(_WORD *)(v703 + 8);
          }
          unint64_t v704 = v684 & 0xFFFFFFFF00000000 | v690;
          unint64_t v705 = sub_1CCFDED5C(a4, 172, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v696, v698, v701, (uint64_t)v699, v700, v702);
          __int16 v706 = 0;
          unint64_t v707 = v698 & 0xFFFFFFFF00000000;
          int v709 = (void *)(v698 & 0xFFFFFFFF00000000 | v708);
          uint64_t v710 = *(void *)(a4 + 832);
          if (v710) {
            __int16 v706 = *(_WORD *)(v710 + 8);
          }
          uint64_t v711 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v705, v709, v706);
          unsigned int v713 = v712 | v707;
          uint64_t v714 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, 10, 0, 0, 0.0);
          uint64_t v716 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, (uint64_t)v692, v1570, (uint64_t)v714, v715, (uint64_t)v711, v713, v1588, (int)v1578, SHIDWORD(v1578), 1u);
          int v719 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v716, v717 | v707, v718, v1513, v1603, v243);
          long long v250 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v1540, v1537, v1546, v1544, (uint64_t)v719, v720 | v707, (uint64_t)v1563, v704, SHIDWORD(v704), 0xAu);
          goto LABEL_176;
        }
        int v245 = *(unsigned __int16 *)(v242 + 24);
        if (v245 == 36 || v245 == 12)
        {
          uint64_t v1600 = *(void *)(v235 + 8);
          uint64_t v288 = *(void *)(v242 + 80);
          if (*(_UNKNOWN **)(v288 + 32) == &unk_1CFB2E344) {
            char v289 = *(unsigned char *)(*(void *)(v288 + 40) + 28);
          }
          else {
            char v289 = *(unsigned char *)(v288 + 52);
          }
          if ((v289 & 7) == 3)
          {
            unint64_t v433 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, (BOOL)v237, v238, 0, 0.0);
            int v435 = v434;
            int v436 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, (BOOL)v237, v238, 0, NAN);
            unsigned int v438 = v437;
            double v439 = -INFINITY;
            if ((v289 & 8) == 0) {
              double v439 = INFINITY;
            }
            int v440 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, (BOOL)v237, v238, 0, v439);
            uint64_t v239 = v1600;
            long long v247 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v240, v1600, (uint64_t)v433, v435, (uint64_t)v436, v438, (uint64_t)v440, v441, v442, 9u);
          }
          else
          {
            uint64_t v443 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, (BOOL)v237, v238, 0, 1.0);
            long long v247 = sub_1CCFDED5C(a4, 99, (const llvm::APInt *)&v1619, v237, v238, (uint64_t)v443, v444, v445, v242, (uint64_t)v241, v243);
            uint64_t v239 = v1600;
          }
          goto LABEL_175;
        }
        if (v244 != 9)
        {
          long long v247 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A1, (uint64_t)&v1619, v237, v238, *(void *)(v235 + 40), *(void **)(v235 + 48), v243);
LABEL_175:
          long long v250 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, v237, v238, v240, v239, v249, (uint64_t)v247, v248, v243);
          goto LABEL_176;
        }
        uint64_t v446 = *(void *)(a4 + 832);
        if (v446) {
          __int16 v447 = *(_WORD *)(v446 + 8);
        }
        else {
          __int16 v447 = 0;
        }
        int v822 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)&v1619, (llvm *)0xA, 0, *(void *)v235, *(void **)(v235 + 8), v447);
        uint64_t v824 = v823;
        __int16 v825 = 0;
        uint64_t v826 = *(void *)(a4 + 832);
        if (v826) {
          __int16 v825 = *(_WORD *)(v826 + 8);
        }
        double v827 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)&v1619, (llvm *)0xA, 0, v242, v241, v825);
        uint64_t v829 = v828;
        unsigned int v833 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A1, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v827, v828, v243);
        uint64_t v834 = v830;
        uint64_t v835 = a1 + 184296;
        if (*(unsigned char *)(*(void *)(a1 + 184296) + 347) && (uint64_t v836 = *(void *)(v1635 + 48)) != 0)
        {
          while (1)
          {
            uint64_t v837 = *(void *)(v836 + 16);
            int v838 = *(unsigned __int16 *)(v837 + 24);
            long long v1639 = *(_OWORD *)*(void *)(v837 + 40);
            if (v838 != 215 || (unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v1639, v830, v831) < 0x10) {
              break;
            }
            uint64_t v836 = *(void *)(v836 + 32);
            if (!v836) {
              goto LABEL_632;
            }
          }
          int v1186 = sub_1CCFDED5C(a4, 421, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v822, v824, v832, (uint64_t)v833, v834, v243);
        }
        else
        {
LABEL_632:
          uint64_t v839 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v822, v824, v832, (uint64_t)v833, v834, v243);
          uint64_t v841 = (uint64_t)v839;
          uint64_t v1605 = v840;
          if (v243 & 0x80 | *(_WORD *)(*(void *)a4 + 1020) & 1)
          {
            uint64_t v842 = v840;
LABEL_966:
            uint64_t v1325 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
            uint64_t v1328 = *(void *)(a4 + 832);
            if (v1328) {
              LOWORD(v1328) = *(_WORD *)(v1328 + 8);
            }
            long long v250 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)&v1619, (llvm *)9, 0, v841, v842, v1327, (uint64_t)v1325, v1326, v1328);
            goto LABEL_176;
          }
          if (*(unsigned char *)(*(void *)v835 + 323))
          {
            uint64_t v1180 = *(void *)(a4 + 832);
            if (v1180) {
              __int16 v1181 = *(_WORD *)(v1180 + 8);
            }
            else {
              __int16 v1181 = 0;
            }
            v1595 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDF, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v839, (void *)v840, v1181);
            int v1314 = v1313;
            DWORD2(v1637) = 32;
            *(void *)&long long v1637 = 947912704;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v1639 + 8), (const llvm::APInt **)&v1637);
            v1315 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, (llvm *)0xA, 0, 0);
            int v1317 = v1316;
            if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v1640);
            }
            else if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) <= 0xFFFFFF7F && v1640)
            {
              MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
            }
            DWORD2(v1637) = 32;
            *(void *)&long long v1637 = 1065357312;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v1639 + 8), (const llvm::APInt **)&v1637);
            uint64_t v1319 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, (llvm *)0xA, 0, 0);
            uint64_t v1321 = v1320;
            if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v1640);
              uint64_t v1322 = v1605;
            }
            else
            {
              uint64_t v1322 = v1605;
              if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) <= 0xFFFFFF7F && v1640) {
                MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
              }
            }
            v1323 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, v841, v1322, v1318, (uint64_t)v1319, v1321, v243);
            int v1186 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, (uint64_t)v1595, v1314, (uint64_t)v1315, v1317, (uint64_t)v1323, v1324, v841, v1322, SHIDWORD(v1322), 4u);
          }
          else
          {
            uint64_t v846 = *(void *)(a4 + 832);
            if (v846) {
              __int16 v847 = *(_WORD *)(v846 + 8);
            }
            else {
              __int16 v847 = 0;
            }
            v1296 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v827, v829, v847);
            v1299 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1296, v1297, v1298, v841, v1605, (uint64_t)v822, v824, SHIDWORD(v824), v243);
            uint64_t v1301 = v1300;
            v1303 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1299, v1300, v1302, (uint64_t)v833, v834, v841, v1605, SHIDWORD(v1605), v243);
            __int16 v1304 = 0;
            v1306 = (void *)(v1301 & 0xFFFFFFFF00000000 | v1305);
            uint64_t v1307 = *(void *)(a4 + 832);
            if (v1307) {
              __int16 v1304 = *(_WORD *)(v1307 + 8);
            }
            v1308 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDF, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v1303, v1306, v1304);
            int v1310 = v1309;
            uint64_t v1311 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, 10, 0, 0, 0.0);
            int v1186 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, (uint64_t)v1308, v1310, (uint64_t)v1311, v1312, (uint64_t)v1303, v1306, v841, v1605, SHIDWORD(v1605), 2u);
          }
        }
        uint64_t v841 = (uint64_t)v1186;
        uint64_t v842 = v1187;
        goto LABEL_966;
    }
  }
  if (*(unsigned __int16 *)(a2 + 24) > 0xDFu)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xE5:
        uint64_t v335 = *(void *)(a2 + 32);
        uint64_t v336 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
        __int16 v337 = *(_WORD *)(a2 + 72);
        uint64_t v339 = *(uint64_t **)v335;
        unint64_t v338 = *(void *)(v335 + 8);
        int v341 = *(uint64_t **)(v335 + 40);
        unint64_t v340 = *(void *)(v335 + 48);
        uint64_t v342 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1639 = v342;
        if (v342) {
          llvm::MetadataTracking::track((uint64_t)&v1639, v342, 2);
        }
        DWORD2(v1639) = *((_DWORD *)v7 + 15);
        uint64_t v1601 = v336;
        if (v336 == 9)
        {
          uint64_t v343 = *(void *)(a4 + 832);
          if (v343) {
            __int16 v344 = *(_WORD *)(v343 + 8);
          }
          else {
            __int16 v344 = 0;
          }
          uint64_t v339 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)&v1639, (llvm *)0xA, 0, (uint64_t)v339, (void *)v338, v344);
          __int16 v854 = 0;
          unint64_t v338 = v338 & 0xFFFFFFFF00000000 | v855;
          uint64_t v856 = *(void *)(a4 + 832);
          if (v856) {
            __int16 v854 = *(_WORD *)(v856 + 8);
          }
          int v341 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)&v1639, (llvm *)0xA, 0, (uint64_t)v341, (void *)v340, v854);
          unint64_t v340 = v340 & 0xFFFFFFFF00000000 | v857;
        }
        int v1571 = v338;
        uint64_t v1579 = (uint64_t)v341;
        int v1591 = v340;
        uint64_t v858 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xE7, (uint64_t)&v1639, (llvm *)0xA, 0, (uint64_t)v339, (void *)v338, v337);
        unint64_t v861 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1639, (llvm *)0xA, 0, (uint64_t)v341, v340, v860, (uint64_t)v858, v859, v337);
        uint64_t v863 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xEA, (uint64_t)&v1639, (llvm *)0xA, 0, (uint64_t)v861, v862, v337);
        uint64_t v865 = v864;
        uint64_t v866 = (uint64_t)v339;
        unint64_t v867 = sub_1CD7ECDC4(a4, (uint64_t)&v1639, 10, 0, 0, 0.0);
        int v869 = v868;
        __int16 v870 = sub_1CD7ECDC4(a4, (uint64_t)&v1639, 10, 0, 0, 0.0);
        int v872 = v871;
        uint64_t v873 = v870[5] + 16 * v871;
        uint64_t v874 = *(llvm **)v873;
        uint64_t v875 = *(void *)(v873 + 8);
        uint64_t v876 = sub_1CD7EE368((void *)a4, 1u);
        sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1639, v874, v875, v866, v1571, v878, (uint64_t)v867, v869, (uint64_t)v870, v872, (uint64_t)v863, v865, v876, v877);
        uint64_t v879 = sub_1CD7ECDC4(a4, (uint64_t)&v1639, 10, 0, 0, 0.0);
        int v881 = v880;
        uint64_t v882 = sub_1CD7ECDC4(a4, (uint64_t)&v1639, 10, 0, 0, 1.0);
        LODWORD(v875) = v883;
        uint64_t v884 = v882[5] + 16 * v883;
        uint64_t v885 = *(llvm **)v884;
        uint64_t v886 = *(void *)(v884 + 8);
        uint64_t v887 = sub_1CD7EE368((void *)a4, 1u);
        int v4 = (llvm::IntegerType *)sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1639, v885, v886, v1579, v1591, v889, (uint64_t)v879, v881, (uint64_t)v882, v875, (uint64_t)v863, v865, v887, v888);
        unint64_t v891 = v865 & 0xFFFFFFFF00000000 | v890;
        if (v1601 == 9)
        {
          uint64_t v892 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
          uint64_t v895 = *(void *)(a4 + 832);
          if (v895) {
            LOWORD(v895) = *(_WORD *)(v895 + 8);
          }
          int v4 = (llvm::IntegerType *)sub_1CCFDED5C(a4, 212, (const llvm::APInt *)&v1639, (llvm *)9, 0, (uint64_t)v4, v891, v894, (uint64_t)v892, v893, v895);
        }
        goto LABEL_152;
      case 0xE6:
        uint64_t v345 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1639 = v345;
        uint64_t v346 = v7;
        if (v345)
        {
          llvm::MetadataTracking::track((uint64_t)&v1639, v345, 2);
          uint64_t v346 = (uint64_t *)v1635;
          LODWORD(v6) = v1636;
        }
        DWORD2(v1639) = *((_DWORD *)v7 + 15);
        uint64_t v347 = (BOOL *)(v346[5] + 16 * v6);
        int v348 = (llvm *)*v347;
        uint64_t v349 = v347[1];
        unint64_t v350 = sub_1CD7ECDC4(a4, (uint64_t)&v1639, *v347, v349, 0, 0.693147181);
        uint64_t v352 = v351;
        uint64_t v353 = *(uint64_t **)(v1635 + 32);
        uint64_t v354 = *v353;
        uint64_t v355 = (void *)v353[1];
        uint64_t v356 = *(void *)(a4 + 832);
        if (v356) {
          __int16 v357 = *(_WORD *)(v356 + 8);
        }
        else {
          __int16 v357 = 0;
        }
        double v843 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xE7, (uint64_t)&v1639, v348, v349, v354, v355, v357);
        uint64_t v229 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1639, v348, v349, (uint64_t)v843, v844, v845, (uint64_t)v350, v352, *(_WORD *)(v1635 + 72));
        goto LABEL_151;
      case 0xE7:
      case 0xE8:
      case 0xEA:
      case 0xEB:
        goto LABEL_1156;
      case 0xE9:
        v325 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1639 = v325;
        uint64_t v326 = v7;
        if (v325)
        {
          llvm::MetadataTracking::track((uint64_t)&v1639, v325, 2);
          uint64_t v326 = (uint64_t *)v1635;
          LODWORD(v6) = v1636;
        }
        DWORD2(v1639) = *((_DWORD *)v7 + 15);
        uint64_t v327 = (BOOL *)(v326[5] + 16 * v6);
        uint64_t v328 = (llvm *)*v327;
        uint64_t v329 = v327[1];
        unint64_t v330 = sub_1CD7ECDC4(a4, (uint64_t)&v1639, *v327, v329, 0, 1.44269504);
        uint64_t v98 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1639, v328, v329, **(void **)(v1635 + 32), *(void *)(*(void *)(v1635 + 32) + 8), v332, (uint64_t)v330, v331, *(_WORD *)(v1635 + 72));
        uint64_t v100 = v333;
        uint64_t v334 = *(void *)(a4 + 832);
        if (v334) {
          __int16 v102 = *(_WORD *)(v334 + 8);
        }
        else {
          __int16 v102 = 0;
        }
        unsigned int v448 = (llvm::APFloatBase *)a4;
        uint64_t v449 = 234;
        uint64_t v450 = (uint64_t)v328;
        uint64_t v451 = v329;
LABEL_636:
        uint64_t v229 = sub_1CD7F3564(v448, (const char *)v449, (uint64_t)&v1639, (llvm *)v450, v451, (uint64_t)v98, v100, v102);
        goto LABEL_151;
      case 0xEC:
        uint64_t v16 = *(uint64_t **)(a2 + 32);
        uint64_t v17 = *v16;
        uint64_t v18 = (void *)v16[1];
        uint64_t v19 = *(void *)(*v16 + 40) + 16 * v18;
        uint64_t v20 = *(llvm **)v19;
        uint64_t v21 = *(void *)(v19 + 8);
        uint64_t v22 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1639 = v22;
        if (v22) {
          llvm::MetadataTracking::track((uint64_t)&v1639, v22, 2);
        }
        DWORD2(v1639) = *((_DWORD *)v7 + 15);
        uint64_t v23 = *(void *)(a4 + 832);
        if (v23) {
          __int16 v24 = *(_WORD *)(v23 + 8);
        }
        else {
          __int16 v24 = 0;
        }
        int v222 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDF, (uint64_t)&v1639, v20, v21, v17, v18, v24);
        uint64_t v223 = *(void *)(a4 + 832);
        if (v223) {
          __int16 v224 = *(_WORD *)(v223 + 8);
        }
        else {
          __int16 v224 = 0;
        }
        uint64_t v226 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xF1, (uint64_t)&v1639, v20, v21, (uint64_t)v222, v221, v224);
        uint64_t v228 = *(void *)(a4 + 832);
        if (v228) {
          LOWORD(v228) = *(_WORD *)(v228 + 8);
        }
        uint64_t v229 = sub_1CCFDED5C(a4, 143, (const llvm::APInt *)&v1639, v20, v21, (uint64_t)v226, v225, v227, v17, (uint64_t)v18, v228);
        goto LABEL_151;
      default:
        if (v9 == 260)
        {
          uint64_t v105 = *(void *)(a2 + 32);
          if (*(unsigned char *)(*(void *)(*(void *)(v105 + 80) + 40) + 16 * *(unsigned int *)(v105 + 88)) != 6) {
            return 0;
          }
          unsigned int v106 = *(unsigned __int8 **)(a2 + 64);
          *(void *)&long long v1619 = v106;
          if (v106)
          {
            llvm::MetadataTracking::track((uint64_t)&v1619, v106, 2);
            unsigned int v106 = (unsigned __int8 *)v1619;
            uint64_t v105 = *(void *)(v1635 + 32);
          }
          int v107 = *((_DWORD *)v7 + 15);
          DWORD2(v1619) = v107;
          long long v1637 = *(_OWORD *)(v105 + 80);
          long long v1632 = *(_OWORD *)(v105 + 120);
          unsigned int v108 = *(_DWORD *)(*(void *)(v105 + 40) + 76);
          LODWORD(v1638) = v108;
          __int16 v1624 = v106;
          if (v106)
          {
            llvm::MetadataTracking::track((uint64_t)&v1624, v106, 2);
            int v107 = DWORD2(v1619);
          }
          int v1625 = v107;
          sub_1CD408AB8((unsigned int *)a1, (uint64_t)&v1637, (uint64_t)&v1632, (unsigned int *)&v1638, (const llvm::APInt *)&v1624, a4);
          if (!v1624) {
            goto LABEL_54;
          }
          int v109 = *v1624;
          if ((v109 - 4) > 0x1E)
          {
            if ((v109 - 3) >= 0xFFFFFFFE) {
              uint64_t v1188 = v1624;
            }
            else {
              uint64_t v1188 = 0;
            }
            if ((v109 - 3) < 0xFFFFFFFE)
            {
              if (v109 == 3) {
                *((void *)v1624 + 1) = 0;
              }
              goto LABEL_54;
            }
            unint64_t v1189 = (unint64_t)(v1188 + 8);
          }
          else
          {
            if ((v1624[1] & 0x7F) != 2 && !*((_DWORD *)v1624 + 3)) {
              goto LABEL_54;
            }
            uint64_t v1505 = *((void *)v1624 + 2);
            if ((v1505 & 4) == 0) {
              goto LABEL_54;
            }
            unint64_t v1189 = v1505 & 0xFFFFFFFFFFFFFFF8;
            if (!v1189) {
              goto LABEL_54;
            }
          }
          *(void *)&long long v1639 = &v1624;
          sub_1CC5FA668(v1189 + 16, &v1639);
LABEL_54:
          if (!(void)v1632)
          {
            uint64_t v110 = *(void *)(v1637 + 40) + 16 * DWORD2(v1637);
            *(void *)&long long v1632 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, *(llvm **)v110, *(void *)(v110 + 8), 0, 0);
            DWORD2(v1632) = v111;
            unsigned int v108 = 22;
          }
          uint64_t v112 = *(void *)(v1635 + 32);
          int v113 = *(_DWORD *)(v112 + 8);
          *(void *)&long long v1639 = *(void *)v112;
          DWORD2(v1639) = v113;
          v1640 = (void *)sub_1CD7EE368((void *)a4, v108);
          uint64_t v1641 = v114;
          v1642 = (uint64_t *)v1637;
          LODWORD(v1643) = DWORD2(v1637);
          v1644 = (uint64_t *)v1632;
          LODWORD(v1645) = DWORD2(v1632);
          uint64_t v115 = *(void *)(v1635 + 32);
          LODWORD(v1647) = *(_DWORD *)(v115 + 168);
          uint64_t v1646 = *(void *)(v115 + 160);
          uint64_t v116 = *(void *)(a4 + 832);
          if (v116) {
            uint64_t v117 = *(unsigned __int16 *)(v116 + 8);
          }
          else {
            uint64_t v117 = 0;
          }
          uint64_t v210 = (void *)a4;
          uint64_t v211 = 260;
          uint64_t v212 = 1;
          uint64_t v213 = 5;
LABEL_557:
          long long v250 = sub_1CD7FF4E8(v210, (const char *)v211, (const llvm::APInt *)&v1619, (llvm *)v212, 0, (uint64_t *)&v1639, v213, v117);
LABEL_176:
          int v4 = (llvm::IntegerType *)v250;
LABEL_195:
          uint64_t v12 = (unsigned __int8 *)v1619;
          if (!(void)v1619) {
            return (uint64_t *)v4;
          }
          int v13 = *(unsigned __int8 *)v1619;
          if ((v13 - 4) <= 0x1E)
          {
            if ((*(unsigned char *)(v1619 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1619 + 12)) {
              return (uint64_t *)v4;
            }
            uint64_t v259 = *(void *)(v1619 + 16);
            if ((v259 & 4) == 0) {
              return (uint64_t *)v4;
            }
            unint64_t v15 = v259 & 0xFFFFFFFFFFFFFFF8;
            if (!v15) {
              return (uint64_t *)v4;
            }
            goto LABEL_207;
          }
          if ((v13 - 3) >= 0xFFFFFFFE) {
            uint64_t v260 = v1619;
          }
          else {
            uint64_t v260 = 0;
          }
          if ((v13 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v15 = v260 + 8;
LABEL_207:
            uint64_t v261 = (unsigned __int8 **)&v1619;
LABEL_237:
            *(void *)&long long v1639 = v261;
            uint64_t v233 = v15 + 16;
            uint64_t v234 = &v1639;
            goto LABEL_238;
          }
LABEL_917:
          if (v13 == 3) {
            *((void *)v12 + 1) = 0;
          }
          return (uint64_t *)v4;
        }
        __int16 v310 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1619 = v310;
        uint64_t v311 = v7;
        if (v310)
        {
          llvm::MetadataTracking::track((uint64_t)&v1619, v310, 2);
          uint64_t v311 = (uint64_t *)v1635;
          LODWORD(v6) = v1636;
        }
        DWORD2(v1619) = *((_DWORD *)v7 + 15);
        long long v312 = (uint64_t *)v311[4];
        uint64_t v314 = *v312;
        unint64_t v313 = v312[1];
        unsigned int v315 = (llvm **)(v311[5] + 16 * v6);
        int v316 = *v315;
        __int16 v317 = *((_WORD *)v311 + 36);
        BOOL v318 = (v317 & 0x200 | *(_WORD *)(*(void *)a4 + 1020) & 1) == 0;
        int v319 = *(unsigned __int16 *)(v314 + 24);
        uint64_t v1543 = (uint64_t)v315[1];
        char v1545 = *v315;
        if (v319 == 215)
        {
          uint64_t v320 = *(void *)(v314 + 32);
          unint64_t v313 = v313 & 0xFFFFFFFF00000000 | *(unsigned int *)(v320 + 8);
          uint64_t v314 = *(void *)v320;
          BOOL v321 = v316 == 9;
          int v322 = &unk_1CFB2E2E0;
          if (v316 != 9) {
            int v322 = &unk_1CFB2E308;
          }
          uint64_t v1552 = 9;
          uint64_t v1559 = 0;
          goto LABEL_320;
        }
        if (v319 != 212 || (v317 & 0x200 | *(_WORD *)(*(void *)a4 + 1020) & 1) == 0)
        {
          if (v316 == 9)
          {
            BOOL v321 = 1;
            uint64_t v1552 = (uint64_t)*v315;
            uint64_t v1559 = (uint64_t)v315[1];
            int v322 = &unk_1CFB2E2E0;
LABEL_320:
            uint64_t v323 = *(void *)(a4 + 832);
            uint64_t v1547 = v322;
            if (v323) {
              __int16 v324 = *(_WORD *)(v323 + 8);
            }
            else {
              __int16 v324 = 0;
            }
            int v848 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)&v1619, (llvm *)0xA, 0, v314, (void *)v313, v324);
            unint64_t v850 = v313 & 0xFFFFFFFF00000000 | v849;
            char v1590 = &unk_1CFB2E2E0;
            uint64_t v1606 = (uint64_t)v848;
            int v851 = 9;
LABEL_834:
            BOOL v1190 = v851 == 10 && v318;
            BOOL v1191 = v316 == 10 && v1190;
            DWORD2(v1637) = 32;
            *(void *)&long long v1637 = 0x20000000;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v1639 + 8), (const llvm::APInt **)&v1637);
            v1192 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, (llvm *)0xA, 0, 0);
            int v1575 = v1193;
            uint64_t v1583 = (uint64_t)v1192;
            if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v1640);
            }
            else if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) <= 0xFFFFFF7F && v1640)
            {
              MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
            }
            if (v1191)
            {
              uint64_t v1194 = *(void *)(a1 + 184296);
              if (!*(unsigned char *)(v1194 + 353) || *(unsigned char *)(v1194 + 354))
              {
                DWORD2(v1637) = 32;
                *(void *)&long long v1637 = 1333788672;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v1639 + 8), (const llvm::APInt **)&v1637);
                uint64_t v1351 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, (llvm *)0xA, 0, 0);
                uint64_t v1353 = v1352;
                if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v1640);
                }
                else if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) <= 0xFFFFFF7F && v1640)
                {
                  MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
                }
                v1354 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, v1606, v850, v1350, (uint64_t)v1351, v1353, v317);
                uint64_t v1356 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v314, v313, v1583, v1575, (uint64_t)v1354, v1355, v1606, v850, SHIDWORD(v850), 4u);
                unint64_t v850 = v850 & 0xFFFFFFFF00000000 | v1357;
                uint64_t v1606 = (uint64_t)v1356;
                *((_WORD *)v1356 + 36) = v317;
              }
            }
            uint64_t v1195 = a1 + 184296;
            if (*(unsigned char *)(*(void *)v1195 + 353))
            {
              int v1197 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A3, (uint64_t)&v1619, (llvm *)0xA, 0, v1606, (void *)v850, v317);
              uint64_t v1199 = v1198;
            }
            else
            {
              int v1197 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A2, (uint64_t)&v1619, (llvm *)0xA, 0, v1606, (void *)v850, v317);
              uint64_t v1199 = v1200;
              if ((sub_1CB9EF928(v314, v313, 0) & 1) == 0)
              {
                v1460 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, v1552, v1559, 0, 0.0);
                int v1539 = v1461;
                uint64_t v1542 = (uint64_t)v1460;
                v1462 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, 10, 0, 0, 0.0);
                int v1197 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v314, v313, v1542, v1539, (uint64_t)v1462, v1463, (uint64_t)v1197, v1199, SHIDWORD(v1199), 1u);
                uint64_t v1199 = v1464;
                *((_WORD *)v1197 + 36) = v317;
              }
            }
            int v1538 = v1199;
            uint64_t v1541 = (uint64_t)v1197;
            if (v1191)
            {
              __int16 v1535 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, 10, 0, 0, 0.5);
              uint64_t v1332 = v1331;
              uint64_t v1334 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, v1606, v850, v1333, (uint64_t)v1197, v1199, v317);
              uint64_t v1335 = (uint64_t)v1197;
              uint64_t v1336 = (uint64_t)v1334;
              uint64_t v1337 = v1199;
              uint64_t v1339 = v1338;
              int v1527 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1535, v1332, v1340, v1335, v1337, v317);
              uint64_t v1531 = v1341;
              uint64_t v1342 = *(void *)(a4 + 832);
              if (v1342) {
                __int16 v1343 = *(_WORD *)(v1342 + 8);
              }
              else {
                __int16 v1343 = 0;
              }
              v1465 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)&v1619, (llvm *)0xA, 0, v1336, v1339, v1343);
              uint64_t v1468 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1465, v1466, v1467, v1336, (uint64_t)v1339, v1606, v850, SHIDWORD(v850), v317);
              uint64_t v1520 = v1469;
              uint64_t v1522 = (uint64_t)v1468;
              uint64_t v1470 = *(void *)(a4 + 832);
              if (v1470) {
                __int16 v1471 = *(_WORD *)(v1470 + 8);
              }
              else {
                __int16 v1471 = 0;
              }
              v1472 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)&v1619, (llvm *)0xA, 0, v1336, v1339, v1471);
              uint64_t v1525 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1472, v1473, v1474, (uint64_t)v1527, v1531, (uint64_t)v1535, v1332, SHIDWORD(v1332), v317);
              uint64_t v1518 = v1475;
              v1536 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, v1522, v1520, v1476, (uint64_t)v1527, v1531, v1336, (int)v1339, SHIDWORD(v1339), v317);
              unint64_t v1478 = v1477;
              v1480 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1527, v1531, v1479, (uint64_t)v1525, v1518, (uint64_t)v1527, v1531, SHIDWORD(v1531), v317);
              uint64_t v1532 = v1481;
              uint64_t v1482 = *(void *)(a4 + 832);
              if (v1482) {
                __int16 v1483 = *(_WORD *)(v1482 + 8);
              }
              else {
                __int16 v1483 = 0;
              }
              uint64_t v1484 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)&v1619, (llvm *)0xA, 0, (uint64_t)v1536, v1478, v1483);
              uint64_t v1487 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1484, v1485, v1486, (uint64_t)v1536, (uint64_t)v1478, v1606, v850, SHIDWORD(v850), v317);
              uint64_t v1362 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1487, v1488, v1489, (uint64_t)v1480, v1532, (uint64_t)v1536, (int)v1478, SHIDWORD(v1478), v317);
            }
            else
            {
              int v4 = (llvm::IntegerType *)sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v1197, v1199, v1196, v1606, v850, v317);
              uint64_t v1202 = v1201;
              if (!v321) {
                goto LABEL_851;
              }
              v1358 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
              uint64_t v1361 = *(void *)(a4 + 832);
              if (v1361) {
                LOWORD(v1361) = *(_WORD *)(v1361 + 8);
              }
              uint64_t v1362 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)&v1619, (llvm *)9, 0, (uint64_t)v4, v1202, v1360, (uint64_t)v1358, v1359, v1361);
            }
            int v4 = (llvm::IntegerType *)v1362;
            uint64_t v1202 = v1363;
LABEL_851:
            if (*(unsigned char *)(*(void *)v1195 + 353))
            {
              if (!v1191) {
                goto LABEL_195;
              }
              goto LABEL_853;
            }
            *((void *)&v1639 + 1) = v1590;
            if ((v1590[2] + 64) >= 0x80) {
              operator new[]();
            }
            BYTE4(v1641) = BYTE4(v1641) & 0xF0 | 3;
            LODWORD(v1641) = v1590[1] - 1;
            int v1344 = v1590[2];
            if ((v1344 - 64) < 0xFFFFFF80)
            {
              uint64_t v1511 = v1640;
              void *v1640 = 0;
              bzero(v1511 + 1, 8 * (((v1344 + 64) >> 6) - 2) + 8);
            }
            else
            {
              v1640 = 0;
            }
            sub_1CB87E790((uint64_t)&v1639, 0);
            v1596 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, (llvm *)v1552, v1559, 0);
            int v1566 = v1345;
            if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v1640);
            }
            else if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) <= 0xFFFFFF7F && v1640)
            {
              MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
            }
            *((void *)&v1639 + 1) = v1547;
            if ((v1547[2] + 64) > 0x7F) {
              operator new[]();
            }
            BYTE4(v1641) = 3;
            LODWORD(v1641) = v1547[1] - 1;
            v1640 = 0;
            sub_1CB87E790((uint64_t)&v1639, 0);
            uint64_t v1347 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, v1545, v1543, 0);
            unsigned int v1348 = v1346;
            if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
            {
              uint64_t v1558 = v1347;
              unsigned int v1512 = v1346;
              sub_1CB845718((uint64_t *)&v1640);
            }
            else
            {
              if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) > 0xFFFFFF7F || !v1640)
              {
LABEL_995:
                int v4 = (llvm::IntegerType *)sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v314, v313, (uint64_t)v1596, v1566, (uint64_t)v1347, v1348, (uint64_t)v4, v1202, SHIDWORD(v1202), 1u);
                uint64_t v1202 = v1349;
                *((_WORD *)v4 + 36) = v317;
                if (!v1191) {
                  goto LABEL_195;
                }
LABEL_853:
                DWORD2(v1637) = 32;
                *(void *)&long long v1637 = 931135488;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v1639 + 8), (const llvm::APInt **)&v1637);
                v1205 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1639, (const llvm::APFloat *)&v1619, (llvm *)0xA, 0, 0);
                if (*((_UNKNOWN **)&v1639 + 1) == &unk_1CFB2E344)
                {
                  uint64_t v1510 = v1203;
                  sub_1CB845718((uint64_t *)&v1640);
                }
                else
                {
                  if ((*(_DWORD *)(*((void *)&v1639 + 1) + 8) - 64) > 0xFFFFFF7F || !v1640)
                  {
LABEL_855:
                    if (*(unsigned char *)(*(void *)v1195 + 353))
                    {
                      uint64_t v1408 = v1203;
                      v1409 = sub_1CD7ECDC4(a4, (uint64_t)&v1619, 10, 0, 0, 1.0);
                      int v4 = (llvm::IntegerType *)sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v1541, v1538, (uint64_t)v1409, v1410, v1606, v850, (uint64_t)v4, v1202, SHIDWORD(v1202), 1u);
                      uint64_t v1202 = v1411;
                      *((_WORD *)v4 + 36) = v317;
                      if (!*(unsigned char *)(*(void *)v1195 + 354)) {
                        goto LABEL_195;
                      }
                      uint64_t v1203 = v1408;
                    }
                    uint64_t v1206 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1619, (llvm *)0xA, 0, (uint64_t)v4, v1202, v1204, (uint64_t)v1205, v1203, v317);
                    int v4 = (llvm::IntegerType *)sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1619, v314, v313, v1583, v1575, (uint64_t)v1206, v1207, (uint64_t)v4, v1202, SHIDWORD(v1202), 4u);
                    *((_WORD *)v4 + 36) = v317;
                    goto LABEL_195;
                  }
                  uint64_t v1510 = v1203;
                  MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
                }
                uint64_t v1203 = v1510;
                goto LABEL_855;
              }
              uint64_t v1558 = v1347;
              unsigned int v1512 = v1346;
              MEMORY[0x1D25D9CB0](v1640, 0x1000C8000313F17);
            }
            unsigned int v1348 = v1512;
            uint64_t v1347 = v1558;
            goto LABEL_995;
          }
          BOOL v321 = 0;
          int v851 = *v315;
          uint64_t v1552 = (uint64_t)*v315;
          uint64_t v1559 = (uint64_t)v315[1];
          uint64_t v1547 = &unk_1CFB2E308;
          char v1590 = &unk_1CFB2E308;
        }
        else
        {
          uint64_t v852 = *(void *)(v314 + 32);
          unint64_t v313 = v313 & 0xFFFFFFFF00000000 | *(unsigned int *)(v852 + 8);
          uint64_t v314 = *(void *)v852;
          int v853 = &unk_1CFB2E2E0;
          BOOL v321 = v316 == 9;
          char v1590 = &unk_1CFB2E308;
          if (v316 != 9) {
            int v853 = &unk_1CFB2E308;
          }
          uint64_t v1547 = v853;
          int v851 = 10;
          uint64_t v1552 = 10;
          uint64_t v1559 = 0;
        }
        uint64_t v1606 = v314;
        unint64_t v850 = v313;
        goto LABEL_834;
    }
  }
  switch(*(_WORD *)(a2 + 24))
  {
    case 0x93:
    case 0x96:
    case 0x98:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAE:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBE:
    case 0xBF:
    case 0xC2:
    case 0xC7:
    case 0xC8:
    case 0xC9:
      goto LABEL_1156;
    case 0x94:
      uint64_t v215 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
      uint64_t v216 = *v215;
      uint64_t v217 = v215[1];
      uint64_t v218 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1639 = v218;
      if (v218)
      {
        llvm::MetadataTracking::track((uint64_t)&v1639, v218, 2);
        uint64_t v219 = (uint64_t *)v1635;
      }
      else
      {
        uint64_t v219 = v7;
      }
      DWORD2(v1639) = *((_DWORD *)v7 + 15);
      uint64_t v262 = (uint64_t *)v219[4];
      uint64_t v263 = v262[5];
      int v264 = *(unsigned __int16 *)(v263 + 24);
      BOOL v265 = v264 == 35 || v264 == 11;
      if (v265 && (uint64_t v266 = *v262, *(_WORD *)(v266 + 24) == 146))
      {
        uint64_t v267 = *(void *)(v263 + 80);
        uint64_t v268 = (unsigned int *)(v267 + 24);
        if (*(_DWORD *)(v267 + 32) >= 0x41u) {
          uint64_t v268 = *(unsigned int **)v268;
        }
        uint64_t v269 = (llvm::IntegerType **)(*(void *)(v266 + 32) + 40 * *v268);
        int v4 = *v269;
        uint64_t v270 = (uint64_t)v269[1];
        uint64_t v271 = (unsigned __int8 *)(*((void *)*v269 + 5) + 16 * v270);
        int v272 = *v271;
        if (v272 != v216
          || ((uint64_t v273 = *((void *)v271 + 1), !v272) ? (v274 = v273 == v217) : (v274 = 1), !v274))
        {
          int v4 = (llvm::IntegerType *)sub_1CD7EB67C(a4, (uint64_t)v4, v270, (uint64_t)&v1639, v216, v217);
        }
        char v275 = 1;
      }
      else
      {
        char v275 = 0;
      }
      if (!(void)v1639) {
        goto LABEL_229;
      }
      int v276 = *(unsigned __int8 *)v1639;
      if ((v276 - 4) > 0x1E)
      {
        if ((v276 - 3) >= 0xFFFFFFFE) {
          uint64_t v284 = v1639;
        }
        else {
          uint64_t v284 = 0;
        }
        if ((v276 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v285 = v284 + 8;
LABEL_259:
          *(void *)&long long v1619 = &v1639;
          sub_1CC5FA668(v285 + 16, &v1619);
          goto LABEL_229;
        }
        if (v276 == 3) {
          *(void *)(v1639 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v1639 + 1) & 0x7F) == 2 || *(_DWORD *)(v1639 + 12))
      {
        uint64_t v1496 = *(void *)(v1639 + 16);
        if ((v1496 & 4) != 0)
        {
          unint64_t v285 = v1496 & 0xFFFFFFFFFFFFFFF8;
          if (v285) {
            goto LABEL_259;
          }
        }
      }
LABEL_229:
      if (v275) {
        return (uint64_t *)v4;
      }
      return 0;
    case 0x95:
      if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 28) {
        return 0;
      }
      uint64_t v170 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1619 = v170;
      uint64_t v171 = v7;
      if (v170)
      {
        llvm::MetadataTracking::track((uint64_t)&v1619, v170, 2);
        uint64_t v171 = (uint64_t *)v1635;
      }
      DWORD2(v1619) = *((_DWORD *)v7 + 15);
      int v172 = (uint64_t *)v171[4];
      uint64_t v173 = *v172;
      uint64_t v174 = v172[1];
      uint64_t v175 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
      __int16 v178 = 0;
      uint64_t v179 = *(void *)(a4 + 832);
      if (v179) {
        __int16 v178 = *(_WORD *)(v179 + 8);
      }
      *(void *)&long long v1639 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)4, 0, v173, v174, v177, (uint64_t)v175, v176, v178);
      *((void *)&v1639 + 1) = v180;
      int v181 = *(uint64_t **)(v1635 + 32);
      uint64_t v182 = *v181;
      uint64_t v183 = v181[1];
      uint64_t v184 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
      __int16 v187 = 0;
      uint64_t v188 = *(void *)(a4 + 832);
      if (v188) {
        __int16 v187 = *(_WORD *)(v188 + 8);
      }
      v1640 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)4, 0, v182, v183, v186, (uint64_t)v184, v185, v187);
      uint64_t v1641 = v189;
      uint64_t v190 = *(void *)(v1635 + 32);
      uint64_t v191 = *(void *)(v190 + 40);
      uint64_t v192 = *(void *)(v190 + 48);
      int v193 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
      __int16 v196 = 0;
      uint64_t v197 = *(void *)(a4 + 832);
      if (v197) {
        __int16 v196 = *(_WORD *)(v197 + 8);
      }
      v1642 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)4, 0, v191, v192, v195, (uint64_t)v193, v194, v196);
      uint64_t v1643 = v198;
      uint64_t v199 = *(void *)(v1635 + 32);
      uint64_t v200 = *(void *)(v199 + 40);
      uint64_t v201 = *(void *)(v199 + 48);
      uint64_t v202 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
      __int16 v205 = 0;
      uint64_t v206 = *(void *)(a4 + 832);
      if (v206) {
        __int16 v205 = *(_WORD *)(v206 + 8);
      }
      uint64_t v207 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)4, 0, v200, v201, v204, (uint64_t)v202, v203, v205);
      uint64_t v117 = 0;
      v1644 = v207;
      uint64_t v1645 = v208;
      uint64_t v209 = *(void *)(a4 + 832);
      if (v209) {
        uint64_t v117 = *(unsigned __int16 *)(v209 + 8);
      }
      uint64_t v210 = (void *)a4;
      uint64_t v211 = 146;
      uint64_t v212 = 28;
      uint64_t v213 = 4;
      goto LABEL_557;
    case 0x97:
      *(void *)&long long v1639 = &v1640;
      *((void *)&v1639 + 1) = 0x800000000;
      uint64_t v402 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
      int v403 = (void *)(v402 + 24);
      if (*(_DWORD *)(v402 + 32) >= 0x41u) {
        int v403 = (void *)*v403;
      }
      unsigned int v404 = *(_DWORD *)v403;
      int v405 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
      uint64_t v407 = *v405;
      uint64_t v406 = v405[1];
      *(void *)&long long v1619 = v407;
      *((void *)&v1619 + 1) = v406;
      if ((_BYTE)v407)
      {
        unsigned __int8 v412 = sub_1CB8C2FBC((unsigned __int8 *)&v1619);
        unint64_t v411 = 0;
        uint64_t v410 = 0;
      }
      else
      {
        unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v406 + 24), 0, a3);
        uint64_t v410 = v409;
        unint64_t v411 = EVT & 0xFFFFFFFFFFFFFF00;
        unsigned __int8 v412 = EVT;
      }
      unint64_t v502 = v411 | v412;
      if (v412 == 3) {
        uint64_t v503 = 4;
      }
      else {
        uint64_t v503 = v502;
      }
      uint64_t v504 = v1635;
      uint64_t v505 = *(unsigned __int8 **)(v1635 + 64);
      *(void *)&long long v1637 = v505;
      if (v505) {
        llvm::MetadataTracking::track((uint64_t)&v1637, v505, 2);
      }
      DWORD2(v1637) = *(_DWORD *)(v504 + 60);
      int v506 = sub_1CD3DB440((llvm::EVT *)&v1619, (const char *)v505);
      if (v506)
      {
        int v511 = v506;
        if (v412 == 3) {
          uint64_t v410 = 0;
        }
        do
        {
          uint64_t v512 = *(uint64_t **)(v1635 + 32);
          uint64_t v513 = *v512;
          uint64_t v514 = v512[1];
          uint64_t v515 = sub_1CD7EBF14(a4, v404, (const llvm::APInt *)&v1637, (llvm *)5, 0, 0, 0);
          __int16 v518 = 0;
          uint64_t v519 = *(void *)(a4 + 832);
          if (v519) {
            __int16 v518 = *(_WORD *)(v519 + 8);
          }
          uint64_t v521 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1637, (llvm *)v503, v410, v513, v514, v517, (uint64_t)v515, v516, v518);
          if (DWORD2(v1639) >= (unint64_t)HIDWORD(v1639)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v522 = (uint64_t **)(v1639 + 16 * DWORD2(v1639));
          uint64_t *v522 = v521;
          v522[1] = v520;
          ++DWORD2(v1639);
          ++v404;
          --v511;
        }
        while (v511);
      }
      uint64_t v507 = v1635;
      uint64_t v508 = *(unsigned __int8 **)(v1635 + 64);
      *(void *)&long long v1632 = v508;
      if (v508) {
        llvm::MetadataTracking::track((uint64_t)&v1632, v508, 2);
      }
      DWORD2(v1632) = *(_DWORD *)(v507 + 60);
      uint64_t v509 = *(void *)(a4 + 832);
      if (v509) {
        uint64_t v510 = *(unsigned __int16 *)(v509 + 8);
      }
      else {
        uint64_t v510 = 0;
      }
      int v4 = (llvm::IntegerType *)sub_1CD7FF4E8((void *)a4, (const char *)0x92, (const llvm::APInt *)&v1632, (llvm *)v1619, *((uint64_t *)&v1619 + 1), (uint64_t *)v1639, DWORD2(v1639), v510);
      if (!(void)v1632) {
        goto LABEL_498;
      }
      int v523 = *(unsigned __int8 *)v1632;
      if ((v523 - 4) > 0x1E)
      {
        if ((v523 - 3) >= 0xFFFFFFFE) {
          uint64_t v1171 = v1632;
        }
        else {
          uint64_t v1171 = 0;
        }
        if ((v523 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1172 = v1171 + 8;
LABEL_789:
          uint64_t v1638 = &v1632;
          sub_1CC5FA668(v1172 + 16, &v1638);
          goto LABEL_498;
        }
        if (v523 == 3) {
          *(void *)(v1632 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v1632 + 1) & 0x7F) == 2 || *(_DWORD *)(v1632 + 12))
      {
        uint64_t v1500 = *(void *)(v1632 + 16);
        if ((v1500 & 4) != 0)
        {
          unint64_t v1172 = v1500 & 0xFFFFFFFFFFFFFFF8;
          if (v1172) {
            goto LABEL_789;
          }
        }
      }
LABEL_498:
      uint64_t v524 = v1637;
      if (!(void)v1637) {
        goto LABEL_954;
      }
      int v525 = *(unsigned __int8 *)v1637;
      if ((v525 - 4) > 0x1E)
      {
        if ((v525 - 3) >= 0xFFFFFFFE) {
          uint64_t v1173 = v1637;
        }
        else {
          uint64_t v1173 = 0;
        }
        if ((v525 - 3) < 0xFFFFFFFE) {
          goto LABEL_952;
        }
        unint64_t v527 = v1173 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v1637 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1637 + 12)) {
          goto LABEL_954;
        }
        uint64_t v526 = *(void *)(v1637 + 16);
        if ((v526 & 4) == 0) {
          goto LABEL_954;
        }
        unint64_t v527 = v526 & 0xFFFFFFFFFFFFFFF8;
        if (!v527) {
          goto LABEL_954;
        }
      }
      *(void *)&long long v1632 = &v1637;
      uint64_t v1174 = v527 + 16;
      uint64_t v1175 = &v1632;
LABEL_951:
      sub_1CC5FA668(v1174, v1175);
      goto LABEL_954;
    case 0x99:
      long long v1619 = *(_OWORD *)*(void *)(a2 + 40);
      uint64_t v380 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1637 = v380;
      if (v380) {
        llvm::MetadataTracking::track((uint64_t)&v1637, v380, 2);
      }
      DWORD2(v1637) = *((_DWORD *)v7 + 15);
      *(void *)&long long v1639 = &v1640;
      *((void *)&v1639 + 1) = 0x800000000;
      uint64_t v381 = (uint64_t *)(*(void *)(*(void *)v7[4] + 40) + 16 * *(unsigned int *)(v7[4] + 8));
      uint64_t v383 = *v381;
      uint64_t v382 = v381[1];
      *(void *)&long long v1632 = v383;
      *((void *)&v1632 + 1) = v382;
      if ((_BYTE)v383)
      {
        unsigned __int8 v386 = sub_1CB8C2FBC((unsigned __int8 *)&v1632);
        unint64_t v388 = 0;
        uint64_t v387 = 0;
      }
      else
      {
        unint64_t v384 = llvm::EVT::getEVT(*(llvm::EVT **)(v382 + 24), 0, a3);
        unsigned __int8 v386 = v384;
        uint64_t v387 = (uint64_t)v385;
        unint64_t v388 = v384 & 0xFFFFFFFFFFFFFF00;
      }
      unsigned int v479 = sub_1CD3DB440((llvm::EVT *)&v1632, v385);
      unsigned int v481 = sub_1CD3DB440((llvm::EVT *)&v1619, v480);
      if (v481)
      {
        uint64_t v483 = 0;
        BOOL v484 = v386 == 3;
        if (v386 == 3) {
          uint64_t v485 = 4;
        }
        else {
          uint64_t v485 = v388 | v386;
        }
        if (v484) {
          uint64_t v387 = 0;
        }
        uint64_t v486 = 4 * v481;
        do
        {
          unsigned int v487 = *(_DWORD *)(v7[10] + v483);
          uint64_t v488 = (uint64_t *)(v7[4] + 40 * (v487 >= v479));
          uint64_t v489 = *v488;
          uint64_t v490 = v488[1];
          uint64_t v491 = sub_1CD7EBF14(a4, v487 % v479, (const llvm::APInt *)&v1637, (llvm *)5, 0, 0, 0);
          __int16 v494 = 0;
          uint64_t v495 = *(void *)(a4 + 832);
          if (v495) {
            __int16 v494 = *(_WORD *)(v495 + 8);
          }
          uint64_t v497 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1637, (llvm *)v485, v387, v489, v490, v493, (uint64_t)v491, v492, v494);
          if (DWORD2(v1639) >= (unint64_t)HIDWORD(v1639)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v498 = (uint64_t **)(v1639 + 16 * DWORD2(v1639));
          *uint64_t v498 = v497;
          v498[1] = v496;
          unsigned int v482 = ++DWORD2(v1639);
          v483 += 4;
        }
        while (v486 != v483);
      }
      else
      {
        unsigned int v482 = DWORD2(v1639);
      }
      uint64_t v499 = v482;
      uint64_t v500 = *(void *)(a4 + 832);
      if (v500) {
        uint64_t v501 = *(unsigned __int16 *)(v500 + 8);
      }
      else {
        uint64_t v501 = 0;
      }
      int v4 = (llvm::IntegerType *)sub_1CD7FF4E8((void *)a4, (const char *)0x92, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), (uint64_t *)v1639, v499, v501);
      if ((void **)v1639 != &v1640) {
        free((void *)v1639);
      }
      goto LABEL_904;
    case 0x9F:
      uint64_t v389 = *(uint64_t **)(a2 + 32);
      uint64_t v390 = *v389;
      uint64_t v391 = v389[1];
      uint64_t v392 = v389[5];
      uint64_t v393 = v389[6];
      int v394 = *(unsigned __int8 **)(*v389 + 64);
      *(void *)&long long v1639 = v394;
      if (v394) {
        llvm::MetadataTracking::track((uint64_t)&v1639, v394, 2);
      }
      DWORD2(v1639) = *(_DWORD *)(v390 + 60);
      uint64_t v395 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      uint64_t v397 = v396;
      if (!(void)v1639) {
        goto LABEL_371;
      }
      int v398 = *(unsigned __int8 *)v1639;
      if ((v398 - 4) > 0x1E)
      {
        if ((v398 - 3) >= 0xFFFFFFFE) {
          uint64_t v1184 = v1639;
        }
        else {
          uint64_t v1184 = 0;
        }
        if ((v398 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1185 = v1184 + 8;
LABEL_824:
          *(void *)&long long v1619 = &v1639;
          sub_1CC5FA668(v1185 + 16, &v1619);
          goto LABEL_371;
        }
        if (v398 == 3) {
          *(void *)(v1639 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v1639 + 1) & 0x7F) == 2 || *(_DWORD *)(v1639 + 12))
      {
        uint64_t v1504 = *(void *)(v1639 + 16);
        if ((v1504 & 4) != 0)
        {
          unint64_t v1185 = v1504 & 0xFFFFFFFFFFFFFFF8;
          if (v1185) {
            goto LABEL_824;
          }
        }
      }
LABEL_371:
      uint64_t v399 = v1635;
      int v400 = *(unsigned __int8 **)(v1635 + 64);
      v1611 = v400;
      if (v400) {
        llvm::MetadataTracking::track((uint64_t)&v1611, v400, 2);
      }
      int v1612 = *(_DWORD *)(v399 + 60);
      sub_1CD41A994(v390, v391, (uint64_t)v395, v397, v392, v393, (uint64_t)v395, v397, (uint64_t **)&v1639, a4, (const llvm::APInt *)&v1611);
      if (!v1611) {
        return v1640;
      }
      int v401 = *v1611;
      if ((v401 - 4) > 0x1E)
      {
        if ((v401 - 3) >= 0xFFFFFFFE) {
          uint64_t v1169 = v1611;
        }
        else {
          uint64_t v1169 = 0;
        }
        if ((v401 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1170 = (unint64_t)(v1169 + 8);
LABEL_783:
          *(void *)&long long v1619 = &v1611;
          sub_1CC5FA668(v1170 + 16, &v1619);
          return v1640;
        }
        if (v401 == 3) {
          *((void *)v1611 + 1) = 0;
        }
      }
      else if ((v1611[1] & 0x7F) == 2 || *((_DWORD *)v1611 + 3))
      {
        uint64_t v1498 = *((void *)v1611 + 2);
        if ((v1498 & 4) != 0)
        {
          unint64_t v1170 = v1498 & 0xFFFFFFFFFFFFFFF8;
          if (v1170) {
            goto LABEL_783;
          }
        }
      }
      return v1640;
    case 0xA0:
      BOOL v378 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1619 = v378;
      if (v378)
      {
        llvm::MetadataTracking::track((uint64_t)&v1619, v378, 2);
        BOOL v379 = (uint64_t *)v1635;
        BOOL v378 = (unsigned __int8 *)v1619;
      }
      else
      {
        BOOL v379 = v7;
      }
      int v457 = *((_DWORD *)v7 + 15);
      DWORD2(v1619) = v457;
      uint64_t v458 = (uint64_t *)v379[4];
      uint64_t v459 = *v458;
      uint64_t v460 = v458[1];
      uint64_t v461 = v458[5];
      uint64_t v462 = v458[6];
      *(void *)&long long v1639 = v378;
      if (v378)
      {
        llvm::MetadataTracking::track((uint64_t)&v1639, v378, 2);
        int v457 = DWORD2(v1619);
      }
      DWORD2(v1639) = v457;
      int v464 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)&v1639, (llvm *)6, 0, 0, 0);
      uint64_t v466 = v465;
      if (!(void)v1639) {
        goto LABEL_443;
      }
      int v467 = *(unsigned __int8 *)v1639;
      if ((v467 - 4) > 0x1E)
      {
        if ((v467 - 3) >= 0xFFFFFFFE) {
          uint64_t v1182 = v1639;
        }
        else {
          uint64_t v1182 = 0;
        }
        if ((v467 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1183 = v1182 + 8;
LABEL_818:
          *(void *)&long long v1637 = &v1639;
          sub_1CC5FA668(v1183 + 16, &v1637);
          goto LABEL_443;
        }
        if (v467 == 3) {
          *(void *)(v1639 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v1639 + 1) & 0x7F) == 2 || *(_DWORD *)(v1639 + 12))
      {
        uint64_t v1503 = *(void *)(v1639 + 16);
        if ((v1503 & 4) != 0)
        {
          unint64_t v1183 = v1503 & 0xFFFFFFFFFFFFFFF8;
          if (v1183) {
            goto LABEL_818;
          }
        }
      }
LABEL_443:
      uint64_t v468 = *(void *)(a4 + 832);
      if (v468) {
        LOWORD(v468) = *(_WORD *)(v468 + 8);
      }
      int v470 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)&v1619, (llvm *)5, 0, v459, v460, v463, (uint64_t)v464, v466, v468);
      uint64_t v472 = v471;
      __int16 v473 = 0;
      uint64_t v474 = *(void *)(a4 + 832);
      if (v474) {
        __int16 v473 = *(_WORD *)(v474 + 8);
      }
      unint64_t v475 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)&v1619, (llvm *)5, 0, v461, v462, v469, (uint64_t)v464, v466, v473);
      uint64_t v477 = v476;
      int v1613 = (unsigned __int8 *)v1619;
      if ((void)v1619) {
        llvm::MetadataTracking::track((uint64_t)&v1613, (unsigned __int8 *)v1619, 2);
      }
      int v1614 = DWORD2(v1619);
      sub_1CD41A994(v459, v460, (uint64_t)v470, v472, v461, v462, (uint64_t)v475, v477, (uint64_t **)&v1639, a4, (const llvm::APInt *)&v1613);
      if (!v1613) {
        goto LABEL_453;
      }
      int v478 = *v1613;
      if ((v478 - 4) > 0x1E)
      {
        if ((v478 - 3) >= 0xFFFFFFFE) {
          uint64_t v1167 = v1613;
        }
        else {
          uint64_t v1167 = 0;
        }
        if ((v478 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1168 = (unint64_t)(v1167 + 8);
LABEL_777:
          *(void *)&long long v1637 = &v1613;
          sub_1CC5FA668(v1168 + 16, &v1637);
          goto LABEL_453;
        }
        if (v478 == 3) {
          *((void *)v1613 + 1) = 0;
        }
      }
      else if ((v1613[1] & 0x7F) == 2 || *((_DWORD *)v1613 + 3))
      {
        uint64_t v1499 = *((void *)v1613 + 2);
        if ((v1499 & 4) != 0)
        {
          unint64_t v1168 = v1499 & 0xFFFFFFFFFFFFFFF8;
          if (v1168) {
            goto LABEL_777;
          }
        }
      }
LABEL_453:
      int v4 = (llvm::IntegerType *)v1640;
      goto LABEL_195;
    case 0xAB:
    case 0xAC:
    case 0xAD:
      unsigned int v279 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1637 = v279;
      char v280 = v7;
      if (v279)
      {
        llvm::MetadataTracking::track((uint64_t)&v1637, v279, 2);
        char v280 = (uint64_t *)v1635;
        LODWORD(v6) = v1636;
      }
      DWORD2(v1637) = *((_DWORD *)v7 + 15);
      int v4 = *(llvm::IntegerType **)(a4 + 56);
      long long v1639 = *(_OWORD *)(v280[5] + 16 * v6);
      if ((_BYTE)v1639) {
        uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v1639);
      }
      else {
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1639);
      }
      unint64_t v6 = ExtendedSizeInBits;
      if (a2 != 1) {
        goto LABEL_272;
      }
      goto LABEL_1157;
    case 0xAF:
      return sub_1CB9E53D4(a2, a3, (llvm::APFloatBase *)a4);
    case 0xB0:
    case 0xB1:
      return sub_1CB9E4F8C(a2, a3, (llvm::APFloatBase *)a4);
    case 0xB8:
    case 0xBD:
      int v4 = (llvm::IntegerType *)a2;
      if (*(unsigned char *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8)) != 6) {
        return (uint64_t *)v4;
      }
      uint64_t v25 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1639 = v25;
      if (v25) {
        llvm::MetadataTracking::track((uint64_t)&v1639, v25, 2);
      }
      DWORD2(v1639) = *((_DWORD *)v7 + 15);
      int v26 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      int v1585 = v27;
      uint64_t v1598 = (uint64_t)v26;
      __int16 v28 = 0;
      int v29 = *(uint64_t **)(v1635 + 32);
      uint64_t v30 = *v29;
      uint64_t v31 = (void *)v29[1];
      uint64_t v32 = *(void *)(a4 + 832);
      if (v32) {
        __int16 v28 = *(_WORD *)(v32 + 8);
      }
      int v33 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1639, (llvm *)0x31, 0, v30, v31, v28);
      uint64_t v35 = v34;
      uint64_t v36 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v39 = 0;
      uint64_t v40 = *(void *)(a4 + 832);
      if (v40) {
        __int16 v39 = *(_WORD *)(v40 + 8);
      }
      unint64_t v41 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v33, v35, v38, (uint64_t)v36, v37, v39);
      uint64_t v43 = v42;
      char v45 = sub_1CD7EBF14(a4, 2168, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v47 = 0;
      uint64_t v48 = *(void *)(a4 + 832);
      if (v48) {
        __int16 v47 = *(_WORD *)(v48 + 8);
      }
      uint64_t v49 = sub_1CCFDED5C(a4, 46, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v45, v44, v46, (uint64_t)v41, v43, v47);
      uint64_t v51 = v50;
      int v53 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v55 = 0;
      uint64_t v56 = *(void *)(a4 + 832);
      if (v56) {
        __int16 v55 = *(_WORD *)(v56 + 8);
      }
      uint64_t v57 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v53, v52, v54, (uint64_t)v49, v51, v55);
      int v59 = v58;
      uint64_t v60 = sub_1CD7EBF14(a4, 2168, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      uint64_t v62 = v61;
      uint64_t v63 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v66 = 0;
      uint64_t v67 = *(void *)(a4 + 832);
      if (v67) {
        __int16 v66 = *(_WORD *)(v67 + 8);
      }
      uint64_t v68 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v33, v35, v65, (uint64_t)v63, v64, v66);
      __int16 v71 = 0;
      uint64_t v72 = *(void *)(a4 + 832);
      if (v72) {
        __int16 v71 = *(_WORD *)(v72 + 8);
      }
      uint64_t v73 = sub_1CCFDED5C(a4, 46, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v60, v62, v70, (uint64_t)v68, v69, v71);
      uint64_t v75 = v74;
      int v77 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v79 = 0;
      uint64_t v80 = *(void *)(a4 + 832);
      if (v80) {
        __int16 v79 = *(_WORD *)(v80 + 8);
      }
      int v81 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v77, v76, v78, (uint64_t)v73, v75, v79);
      unint64_t v83 = v75 & 0xFFFFFFFF00000000 | v82;
      uint64_t v84 = sub_1CD7EBF14(a4, 32, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v87 = 0;
      uint64_t v88 = *(void *)(a4 + 832);
      if (v88) {
        __int16 v87 = *(_WORD *)(v88 + 8);
      }
      unsigned int v89 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v81, v83, v86, (uint64_t)v84, v85, v87);
      int v91 = v90;
      uint64_t v92 = v89[5] + 16 * v90;
      __int16 v93 = *(llvm **)v92;
      uint64_t v94 = *(void *)(v92 + 8);
      uint64_t v95 = sub_1CD7EE368((void *)a4, 0x11u);
      uint64_t v98 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1639, v93, v94, (uint64_t)v41, v43, v97, v1598, v1585, (uint64_t)v89, v91, (uint64_t)v57, v59, v95, v96);
      uint64_t v100 = v99;
      uint64_t v101 = *(void *)(a4 + 832);
      if (v101) {
        __int16 v102 = *(_WORD *)(v101 + 8);
      }
      else {
        __int16 v102 = 0;
      }
      unsigned int v448 = (llvm::APFloatBase *)a4;
      uint64_t v449 = 199;
      uint64_t v450 = 6;
      uint64_t v451 = 0;
      goto LABEL_636;
    case 0xC0:
      uint64_t v214 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1619 = v214;
      if (v214)
      {
        llvm::MetadataTracking::track((uint64_t)&v1619, v214, 2);
        int v4 = (llvm::IntegerType *)v1635;
        unint64_t v6 = v1636;
      }
      else
      {
        int v4 = (llvm::IntegerType *)v7;
      }
      DWORD2(v1619) = *((_DWORD *)v7 + 15);
      if (*(unsigned char *)(*(void *)(**((void **)v4 + 4) + 40) + 16 * *(unsigned int *)(*((void *)v4 + 4) + 8)) == 3)
      {
        int v4 = 0;
        goto LABEL_195;
      }
      uint64_t v418 = *((void *)v4 + 5) + 16 * v6;
      int v419 = *(llvm **)v418;
      uint64_t v420 = *(void *)(v418 + 8);
      uint64_t v423 = sub_1CD3E3904((unsigned int *)&v1635);
      if (v421 == 1) {
      if (v423 == (llvm::Type *)64)
      }
      {
        uint64_t v1373 = *(void *)(v1635 + 32);
        uint64_t v1374 = *(void *)(v1373 + 80);
        uint64_t v1375 = *(void **)(v1373 + 88);
        uint64_t v1376 = *(void *)(a4 + 832);
        if (v1376) {
          __int16 v1377 = *(_WORD *)(v1376 + 8);
        }
        else {
          __int16 v1377 = 0;
        }
        v1412 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0x31, 0, v1374, v1375, v1377);
        uint64_t v1414 = v1413;
        __int16 v1415 = 0;
        uint64_t v1416 = *(void *)(v1635 + 32);
        uint64_t v1417 = *(void *)(v1416 + 120);
        v1418 = *(void **)(v1416 + 128);
        uint64_t v1419 = *(void *)(a4 + 832);
        if (v1419) {
          __int16 v1415 = *(_WORD *)(v1419 + 8);
        }
        v1420 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, (llvm *)0x31, 0, v1417, v1418, v1415);
        uint64_t v1422 = v1421;
        v1423 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
        __int16 v1426 = 0;
        uint64_t v1427 = *(void *)(a4 + 832);
        if (v1427) {
          __int16 v1426 = *(_WORD *)(v1427 + 8);
        }
        uint64_t v1428 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v1412, v1414, v1425, (uint64_t)v1423, v1424, v1426);
        int v1597 = v1429;
        uint64_t v1610 = (uint64_t)v1428;
        int v1430 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
        __int16 v1433 = 0;
        uint64_t v1434 = *(void *)(a4 + 832);
        if (v1434) {
          __int16 v1433 = *(_WORD *)(v1434 + 8);
        }
        BOOL v1435 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v1412, v1414, v1432, (uint64_t)v1430, v1431, v1433);
        int v1576 = v1436;
        uint64_t v1584 = (uint64_t)v1435;
        uint64_t v1437 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
        __int16 v1440 = 0;
        uint64_t v1441 = *(void *)(a4 + 832);
        if (v1441) {
          __int16 v1440 = *(_WORD *)(v1441 + 8);
        }
        uint64_t v1442 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v1420, v1422, v1439, (uint64_t)v1437, v1438, v1440);
        int v1444 = v1443;
        v1445 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1619, (llvm *)5, 0, 0, 0);
        __int16 v1448 = 0;
        uint64_t v1449 = *(void *)(a4 + 832);
        if (v1449) {
          __int16 v1448 = *(_WORD *)(v1449 + 8);
        }
        unsigned int v1450 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)&v1619, (llvm *)5, 0, (uint64_t)v1420, v1422, v1447, (uint64_t)v1445, v1446, v1448);
        int v1452 = v1451;
        unint64_t v1453 = *(uint64_t **)(v1635 + 32);
        int v4 = (llvm::IntegerType *)sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1619, (llvm *)5, 0, *v1453, v1453[1], v1454, v1453[5], v1453[6], v1610, v1597, (uint64_t)v1442, v1444, v1453[20], v1453[21]);
        unint64_t v6 = v6 & 0xFFFFFFFF00000000 | v1455;
        v1456 = *(uint64_t **)(v1635 + 32);
        uint64_t v424 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1619, (llvm *)5, 0, *v1456, v1456[1], v1457, v1456[5], v1456[6], v1584, v1576, (uint64_t)v1450, v1452, v1456[20], v1456[21]);
        uint64_t v425 = v1458;
      }
      else
      {
        uint64_t v424 = 0;
        uint64_t v425 = 0;
      }
      uint64_t v426 = (long long *)*((void *)v4 + 4);
      if (*(unsigned char *)(*(void *)(*(void *)v426 + 40) + 16 * *((unsigned int *)v426 + 2)) != 6)
      {
        if (!v424) {
          goto LABEL_195;
        }
LABEL_400:
        uint64_t v427 = v424[4];
        if (*(unsigned char *)(*(void *)(*(void *)v427 + 40) + 16 * *(unsigned int *)(v427 + 8)) != 6)
        {
LABEL_401:
          uint64_t v428 = *(void *)(a4 + 832);
          if (v428) {
            LOWORD(v428) = *(_WORD *)(v428 + 8);
          }
          uint64_t v430 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1619, (llvm *)0x31, 0, (uint64_t)v4, v6, v422, (uint64_t)v424, v425, v428);
          uint64_t v431 = *(void *)(a4 + 832);
          if (v431) {
            __int16 v432 = *(_WORD *)(v431 + 8);
          }
          else {
            __int16 v432 = 0;
          }
          long long v250 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1619, v419, v420, (uint64_t)v430, v429, v432);
          goto LABEL_176;
        }
        long long v1637 = *(_OWORD *)v427;
        long long v1632 = *(_OWORD *)(v427 + 40);
        unsigned int v1397 = *(_DWORD *)(*(void *)(v427 + 160) + 76);
        LODWORD(v1638) = v1397;
        v1628 = (unsigned __int8 *)v1619;
        if ((void)v1619) {
          llvm::MetadataTracking::track((uint64_t)&v1628, (unsigned __int8 *)v1619, 2);
        }
        int v1629 = DWORD2(v1619);
        sub_1CD408AB8((unsigned int *)a1, (uint64_t)&v1637, (uint64_t)&v1632, (unsigned int *)&v1638, (const llvm::APInt *)&v1628, a4);
        if (v1628)
        {
          int v1398 = *v1628;
          if ((v1398 - 4) > 0x1E)
          {
            if ((v1398 - 3) >= 0xFFFFFFFE) {
              v1493 = v1628;
            }
            else {
              v1493 = 0;
            }
            if ((v1398 - 3) < 0xFFFFFFFE)
            {
              if (v1398 == 3) {
                *((void *)v1628 + 1) = 0;
              }
              goto LABEL_1046;
            }
            unint64_t v1494 = (unint64_t)(v1493 + 8);
          }
          else
          {
            if ((v1628[1] & 0x7F) != 2 && !*((_DWORD *)v1628 + 3)) {
              goto LABEL_1046;
            }
            uint64_t v1509 = *((void *)v1628 + 2);
            if ((v1509 & 4) == 0) {
              goto LABEL_1046;
            }
            unint64_t v1494 = v1509 & 0xFFFFFFFFFFFFFFF8;
            if (!v1494) {
              goto LABEL_1046;
            }
          }
          *(void *)&long long v1639 = &v1628;
          sub_1CC5FA668(v1494 + 16, &v1639);
        }
LABEL_1046:
        if (!(void)v1632)
        {
          uint64_t v1399 = *(void *)(v1637 + 40) + 16 * DWORD2(v1637);
          *(void *)&long long v1632 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, *(llvm **)v1399, *(void *)(v1399 + 8), 0, 0);
          DWORD2(v1632) = v1400;
          unsigned int v1397 = 22;
        }
        uint64_t v1401 = v424[4];
        uint64_t v1402 = v424[5] + 16 * v425;
        unsigned int v1403 = *(llvm **)v1402;
        uint64_t v1404 = *(void *)(v1402 + 8);
        *(void *)&long long v1639 = v1637;
        DWORD2(v1639) = DWORD2(v1637);
        v1640 = (void *)v1632;
        LODWORD(v1641) = DWORD2(v1632);
        LODWORD(v1643) = *(_DWORD *)(v1401 + 88);
        v1642 = *(uint64_t **)(v1401 + 80);
        LODWORD(v1645) = *(_DWORD *)(v1401 + 128);
        v1644 = *(uint64_t **)(v1401 + 120);
        uint64_t v1646 = sub_1CD7EE368((void *)a4, v1397);
        uint64_t v1647 = v1405;
        uint64_t v1406 = *(void *)(a4 + 832);
        if (v1406) {
          uint64_t v1407 = *(unsigned __int16 *)(v1406 + 8);
        }
        else {
          uint64_t v1407 = 0;
        }
        uint64_t v424 = sub_1CD7FF4E8((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1619, v1403, v1404, (uint64_t *)&v1639, 5, v1407);
        uint64_t v425 = v1490;
        goto LABEL_401;
      }
      long long v1637 = *v426;
      long long v1632 = *(long long *)((char *)v426 + 40);
      unsigned int v1378 = *(_DWORD *)(*((void *)v426 + 20) + 76);
      LODWORD(v1638) = v1378;
      v1630 = (unsigned __int8 *)v1619;
      if ((void)v1619) {
        llvm::MetadataTracking::track((uint64_t)&v1630, (unsigned __int8 *)v1619, 2);
      }
      int v1631 = DWORD2(v1619);
      sub_1CD408AB8((unsigned int *)a1, (uint64_t)&v1637, (uint64_t)&v1632, (unsigned int *)&v1638, (const llvm::APInt *)&v1630, a4);
      if (!v1630) {
        goto LABEL_1014;
      }
      int v1379 = *v1630;
      if ((v1379 - 4) > 0x1E)
      {
        if ((v1379 - 3) >= 0xFFFFFFFE) {
          int v1491 = v1630;
        }
        else {
          int v1491 = 0;
        }
        if ((v1379 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1492 = (unint64_t)(v1491 + 8);
LABEL_1086:
          *(void *)&long long v1639 = &v1630;
          sub_1CC5FA668(v1492 + 16, &v1639);
          goto LABEL_1014;
        }
        if (v1379 == 3) {
          *((void *)v1630 + 1) = 0;
        }
      }
      else if ((v1630[1] & 0x7F) == 2 || *((_DWORD *)v1630 + 3))
      {
        uint64_t v1508 = *((void *)v1630 + 2);
        if ((v1508 & 4) != 0)
        {
          unint64_t v1492 = v1508 & 0xFFFFFFFFFFFFFFF8;
          if (v1492) {
            goto LABEL_1086;
          }
        }
      }
LABEL_1014:
      unsigned int v1380 = v1378;
      if (!(void)v1632)
      {
        uint64_t v1381 = *(void *)(v1637 + 40) + 16 * DWORD2(v1637);
        *(void *)&long long v1632 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1619, *(llvm **)v1381, *(void *)(v1381 + 8), 0, 0);
        DWORD2(v1632) = v1382;
        unsigned int v1380 = 22;
      }
      uint64_t v1383 = *((void *)v4 + 4);
      uint64_t v1384 = *((void *)v4 + 5) + 16 * v6;
      uint64_t v1385 = *(llvm **)v1384;
      uint64_t v1386 = *(void *)(v1384 + 8);
      *(void *)&long long v1639 = v1637;
      DWORD2(v1639) = DWORD2(v1637);
      v1640 = (void *)v1632;
      LODWORD(v1641) = DWORD2(v1632);
      LODWORD(v1643) = *(_DWORD *)(v1383 + 88);
      v1642 = *(uint64_t **)(v1383 + 80);
      uint64_t v1387 = *((void *)v4 + 4);
      LODWORD(v1645) = *(_DWORD *)(v1387 + 128);
      v1644 = *(uint64_t **)(v1387 + 120);
      uint64_t v1646 = sub_1CD7EE368((void *)a4, v1380);
      uint64_t v1647 = v1388;
      uint64_t v1389 = *(void *)(a4 + 832);
      if (v1389) {
        uint64_t v1390 = *(unsigned __int16 *)(v1389 + 8);
      }
      else {
        uint64_t v1390 = 0;
      }
      int v4 = (llvm::IntegerType *)sub_1CD7FF4E8((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1619, v1385, v1386, (uint64_t *)&v1639, 5, v1390);
      unint64_t v6 = v6 & 0xFFFFFFFF00000000 | v1459;
      if (v424) {
        goto LABEL_400;
      }
      goto LABEL_195;
    case 0xC1:
      unsigned int v157 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1639 = v157;
      if (v157)
      {
        llvm::MetadataTracking::track((uint64_t)&v1639, v157, 2);
        char v158 = (uint64_t *)v1635;
        unsigned int v157 = (unsigned __int8 *)v1639;
      }
      else
      {
        char v158 = v7;
      }
      int v251 = *((_DWORD *)v7 + 15);
      DWORD2(v1639) = v251;
      uint64_t v252 = v158[4];
      long long v1619 = *(_OWORD *)v252;
      long long v1637 = *(_OWORD *)(v252 + 40);
      uint64_t v253 = *(unsigned __int8 *)(*(void *)(v1619 + 40) + 16 * DWORD2(v1619));
      if (v253 != 6)
      {
        if (!v157) {
          goto LABEL_183;
        }
        goto LABEL_180;
      }
      unsigned int v415 = *(_DWORD *)(*(void *)(v252 + 80) + 76);
      LODWORD(v1638) = v415;
      int v1626 = v157;
      if (v157)
      {
        llvm::MetadataTracking::track((uint64_t)&v1626, v157, 2);
        int v251 = DWORD2(v1639);
      }
      int v1627 = v251;
      sub_1CD408AB8((unsigned int *)a1, (uint64_t)&v1619, (uint64_t)&v1637, (unsigned int *)&v1638, (const llvm::APInt *)&v1626, a4);
      if (!v1626) {
        goto LABEL_390;
      }
      int v416 = *v1626;
      if ((v416 - 4) > 0x1E)
      {
        if ((v416 - 3) >= 0xFFFFFFFE) {
          v1176 = v1626;
        }
        else {
          v1176 = 0;
        }
        if ((v416 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1177 = (unint64_t)(v1176 + 8);
LABEL_804:
          *(void *)&long long v1632 = &v1626;
          sub_1CC5FA668(v1177 + 16, &v1632);
          goto LABEL_390;
        }
        if (v416 == 3) {
          *((void *)v1626 + 1) = 0;
        }
      }
      else if ((v1626[1] & 0x7F) == 2 || *((_DWORD *)v1626 + 3))
      {
        uint64_t v1501 = *((void *)v1626 + 2);
        if ((v1501 & 4) != 0)
        {
          unint64_t v1177 = v1501 & 0xFFFFFFFFFFFFFFF8;
          if (v1177) {
            goto LABEL_804;
          }
        }
      }
LABEL_390:
      uint64_t v417 = v1637;
      if ((void)v1637)
      {
        uint64_t v1364 = *(void *)(v1635 + 40) + 16 * v1636;
        uint64_t v1365 = *(llvm **)v1364;
        uint64_t v1366 = *(void *)(v1364 + 8);
        long long v1367 = v1619;
        uint64_t v1368 = *((void *)&v1637 + 1);
        uint64_t v1369 = sub_1CD7EE368((void *)a4, v415);
        uint64_t v1372 = *(void *)(a4 + 832);
        if (v1372) {
          LOWORD(v1372) = *(_WORD *)(v1372 + 8);
        }
        int v4 = (llvm::IntegerType *)sub_1CD7F5D38((void *)a4, (const char *)0xC1, (const llvm::APInt *)&v1639, v1365, v1366, v1367, *((uint64_t *)&v1367 + 1), v1371, v417, v1368, v1369, v1370, SHIDWORD(v1370), v1372);
      }
      else
      {
        int v4 = (llvm::IntegerType *)v1619;
      }
      unsigned int v157 = (unsigned __int8 *)v1639;
      if (!(void)v1639) {
        goto LABEL_183;
      }
LABEL_180:
      int v254 = *v157;
      if ((v254 - 4) > 0x1E)
      {
        if ((v254 - 3) >= 0xFFFFFFFE) {
          uint64_t v282 = v157;
        }
        else {
          uint64_t v282 = 0;
        }
        if ((v254 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v283 = (unint64_t)(v282 + 8);
LABEL_253:
          *(void *)&long long v1619 = &v1639;
          sub_1CC5FA668(v283 + 16, &v1619);
          goto LABEL_183;
        }
        if (v254 == 3) {
          *((void *)v157 + 1) = 0;
        }
      }
      else if ((v157[1] & 0x7F) == 2 || *((_DWORD *)v157 + 3))
      {
        uint64_t v1495 = *((void *)v157 + 2);
        if ((v1495 & 4) != 0)
        {
          unint64_t v283 = v1495 & 0xFFFFFFFFFFFFFFF8;
          if (v283) {
            goto LABEL_253;
          }
        }
      }
LABEL_183:
      if (v253 == 6) {
        return (uint64_t *)v4;
      }
      return 0;
    case 0xC3:
      return sub_1CB9EF398(a2, a3, (llvm::APFloatBase *)a4);
    case 0xC4:
    case 0xC5:
      long long v1619 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
      if ((_BYTE)v1619) {
        unsigned int v286 = sub_1CB87E200((unsigned __int8 *)&v1619);
      }
      else {
        unsigned int v286 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1619);
      }
      unsigned int v360 = v286;
      if (v287 == 1) {
      uint64_t v361 = (unsigned __int8 *)v7[8];
      }
      *(void *)&long long v1637 = v361;
      if (v361) {
        llvm::MetadataTracking::track((uint64_t)&v1637, v361, 2);
      }
      DWORD2(v1637) = *((_DWORD *)v7 + 15);
      uint64_t v362 = (uint64_t *)v7[4];
      uint64_t v363 = *v362;
      uint64_t v364 = v362[1];
      uint64_t v365 = v362[5];
      uint64_t v1586 = v362[6];
      uint64_t v367 = (uint64_t *)v362[10];
      unint64_t v366 = v362[11];
      long long v1639 = *(_OWORD *)(v367[5] + 16 * v366);
      if ((_BYTE)v1639) {
        uint64_t v368 = sub_1CB87E200((unsigned __int8 *)&v1639);
      }
      else {
        uint64_t v368 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1639);
      }
      unint64_t v370 = v368;
      uint64_t v1602 = v365;
      if (v369 == 1) {
      uint64_t v371 = v360;
      }
      unsigned int v1548 = v360;
      if (v370 < v360)
      {
        uint64_t v373 = *((void *)&v1619 + 1);
        uint64_t v372 = (llvm *)v1619;
        uint64_t v374 = *(void *)(a4 + 832);
        if (v374) {
          __int16 v375 = *(_WORD *)(v374 + 8);
        }
        else {
          __int16 v375 = 0;
        }
        __int16 v453 = (llvm::APFloatBase *)a4;
        uint64_t v454 = 199;
LABEL_659:
        uint64_t v367 = sub_1CD7F3564(v453, (const char *)v454, (uint64_t)&v1637, v372, v373, (uint64_t)v367, (void *)v366, v375);
        unint64_t v366 = v366 & 0xFFFFFFFF00000000 | v896;
        goto LABEL_660;
      }
      long long v1639 = *(_OWORD *)(v367[5] + 16 * v366);
      if ((_BYTE)v1639) {
        uint64_t v376 = sub_1CB87E200((unsigned __int8 *)&v1639);
      }
      else {
        uint64_t v376 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1639);
      }
      unint64_t v455 = v376;
      if (v377 == 1) {
      if (v455 > v360)
      }
      {
        uint64_t v373 = *((void *)&v1619 + 1);
        uint64_t v372 = (llvm *)v1619;
        uint64_t v456 = *(void *)(a4 + 832);
        if (v456) {
          __int16 v375 = *(_WORD *)(v456 + 8);
        }
        else {
          __int16 v375 = 0;
        }
        __int16 v453 = (llvm::APFloatBase *)a4;
        uint64_t v454 = 201;
        goto LABEL_659;
      }
LABEL_660:
      int v1580 = *((unsigned __int16 *)v7 + 12);
      if (v1580 == 196) {
        int v897 = 176;
      }
      else {
        int v897 = 177;
      }
      unsigned int v1572 = v897;
      long long v898 = v1619;
      uint64_t v900 = sub_1CD7EBF14(a4, v360, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), 0, 0);
      uint64_t v902 = *(void *)(a4 + 832);
      if (v902) {
        LOWORD(v902) = *(_WORD *)(v902 + 8);
      }
      int v904 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1637, (llvm *)v898, *((uint64_t *)&v898 + 1), (uint64_t)v900, v899, v901, (uint64_t)v367, v366, v902);
      uint64_t v906 = v905;
      uint64_t v907 = *(void *)(a4 + 832);
      if (v907) {
        LOWORD(v907) = *(_WORD *)(v907 + 8);
      }
      uint64_t v908 = sub_1CCFDED5C(a4, 177, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), v363, v364, v903, (uint64_t)v367, v366, v907);
      uint64_t v910 = v909;
      long long v911 = v1619;
      unint64_t v912 = sub_1CD7EBF14(a4, v371, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), 0, 0);
      uint64_t v915 = *(void *)(a4 + 832);
      if (v915) {
        LOWORD(v915) = *(_WORD *)(v915 + 8);
      }
      uint64_t v916 = v1602;
      uint64_t v918 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1637, (llvm *)v911, *((uint64_t *)&v911 + 1), (uint64_t)v367, v366, v914, (uint64_t)v912, v913, v915);
      uint64_t v1607 = v919;
      uint64_t v920 = *(void *)(a4 + 832);
      if (v920) {
        LOWORD(v920) = *(_WORD *)(v920 + 8);
      }
      uint64_t v921 = v1586;
      uint64_t v922 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), v916, v1586, v917, (uint64_t)v904, v906, v920);
      uint64_t v925 = *(void *)(a4 + 832);
      if (v925) {
        LOWORD(v925) = *(_WORD *)(v925 + 8);
      }
      v1592 = sub_1CCFDED5C(a4, 172, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), (uint64_t)v908, v910, v924, (uint64_t)v922, v923, v925);
      int v1564 = v927;
      uint64_t v928 = *(void *)(a4 + 832);
      if (v928) {
        LOWORD(v928) = *(_WORD *)(v928 + 8);
      }
      uint64_t v929 = v1572;
      uint64_t v1573 = sub_1CCFDED5C(a4, v1572, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), v916, v921, v926, (uint64_t)v918, v1607, v928);
      unsigned int v1556 = v931;
      uint64_t v932 = *(void *)(a4 + 832);
      if (v932) {
        LOWORD(v932) = *(_WORD *)(v932 + 8);
      }
      uint64_t v933 = sub_1CCFDED5C(a4, v929, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), v916, v921, v930, (uint64_t)v367, v366, v932);
      int v935 = v934;
      long long v936 = v1619;
      if (v1580 == 196)
      {
        uint64_t v937 = sub_1CD7EBF14(a4, v1548 - 1, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), 0, 0);
        uint64_t v940 = *(void *)(a4 + 832);
        if (v940) {
          LOWORD(v940) = *(_WORD *)(v940 + 8);
        }
        uint64_t v941 = (uint64_t)v918;
        int v942 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)&v1637, (llvm *)v936, *((uint64_t *)&v936 + 1), v916, v921, v939, (uint64_t)v937, v938, v940);
      }
      else
      {
        uint64_t v941 = (uint64_t)v918;
        int v942 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), 0, 0);
      }
      uint64_t v944 = (uint64_t)v942;
      unsigned int v945 = v943;
      int v946 = v943;
      uint64_t v947 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), 0, 0);
      int v949 = v948;
      uint64_t v950 = *(void *)(v944 + 40) + 16 * v945;
      uint64_t v951 = *(llvm **)v950;
      uint64_t v952 = *(void *)(v950 + 8);
      uint64_t v953 = sub_1CD7EE368((void *)a4, 0x13u);
      v956 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1637, v951, v952, v941, v1607, v955, (uint64_t)v947, v949, v944, v946, (uint64_t)v933, v935, v953, v954);
      int v1581 = v957;
      unsigned int v958 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1637, (llvm *)v1619, *((uint64_t *)&v1619 + 1), 0, 0);
      int v960 = v959;
      uint64_t v961 = v1573[5] + 16 * v1556;
      uint64_t v962 = *(llvm **)v961;
      uint64_t v963 = *(void *)(v961 + 8);
      uint64_t v964 = sub_1CD7EE368((void *)a4, 0x13u);
      *(void *)&long long v1639 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1637, v962, v963, v941, v1607, v966, (uint64_t)v958, v960, (uint64_t)v1573, v1556, (uint64_t)v1592, v1564, v964, v965);
      DWORD2(v1639) = v967;
      v1640 = v956;
      LODWORD(v1641) = v1581;
      uint64_t v968 = sub_1CD7F9858((void *)a4, (uint64_t *)&v1639, 2uLL, (const llvm::APInt *)&v1637);
LABEL_903:
      int v4 = (llvm::IntegerType *)v968;
LABEL_904:
      uint64_t v12 = (unsigned __int8 *)v1637;
      if (!(void)v1637) {
        return (uint64_t *)v4;
      }
      int v13 = *(unsigned __int8 *)v1637;
      if ((v13 - 4) <= 0x1E)
      {
        if ((*(unsigned char *)(v1637 + 1) & 0x7F) == 2 || *(_DWORD *)(v1637 + 12))
        {
          uint64_t v1286 = *(void *)(v1637 + 16);
          if ((v1286 & 4) != 0)
          {
            unint64_t v15 = v1286 & 0xFFFFFFFFFFFFFFF8;
            if (v15) {
              goto LABEL_916;
            }
          }
        }
        return (uint64_t *)v4;
      }
      if ((v13 - 3) >= 0xFFFFFFFE) {
        uint64_t v1287 = v1637;
      }
      else {
        uint64_t v1287 = 0;
      }
      if ((v13 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = v1287 + 8;
LABEL_916:
        uint64_t v261 = (unsigned __int8 **)&v1637;
        goto LABEL_237;
      }
      goto LABEL_917;
    case 0xC6:
      uint64_t v358 = *(unsigned __int8 **)(a2 + 64);
      v1633 = v358;
      if (v358) {
        llvm::MetadataTracking::track((uint64_t)&v1633, v358, 2);
      }
      int v1634 = *((_DWORD *)v7 + 15);
      int v4 = (llvm::IntegerType *)sub_1CD41A8A8((uint64_t)v7, (llvm::APFloatBase *)a4, (const llvm::APInt *)&v1633);
      uint64_t v12 = v1633;
      if (!v1633) {
        return (uint64_t *)v4;
      }
      int v13 = *v1633;
      if ((v13 - 4) <= 0x1E)
      {
        if ((v1633[1] & 0x7F) == 2 || *((_DWORD *)v1633 + 3))
        {
          uint64_t v359 = *((void *)v1633 + 2);
          if ((v359 & 4) != 0)
          {
            unint64_t v15 = v359 & 0xFFFFFFFFFFFFFFF8;
            if (v15) {
              goto LABEL_771;
            }
          }
        }
        return (uint64_t *)v4;
      }
      if ((v13 - 3) >= 0xFFFFFFFE) {
        uint64_t v1166 = v1633;
      }
      else {
        uint64_t v1166 = 0;
      }
      if ((v13 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = (unint64_t)(v1166 + 8);
LABEL_771:
        uint64_t v261 = &v1633;
        goto LABEL_237;
      }
      goto LABEL_917;
    case 0xCA:
      int v4 = (llvm::IntegerType *)a2;
      if (*(unsigned char *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8)) != 6) {
        return (uint64_t *)v4;
      }
      int v124 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
      if ((v124 - 11) < 0xFFFFFFFE) {
        return 0;
      }
      uint64_t v125 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1639 = v125;
      if (v125) {
        llvm::MetadataTracking::track((uint64_t)&v1639, v125, 2);
      }
      DWORD2(v1639) = *((_DWORD *)v7 + 15);
      if (v124 == 9)
      {
        int v126 = (uint64_t *)v1635;
LABEL_76:
        uint64_t v129 = (const char *)*((unsigned __int16 *)v126 + 12);
        uint64_t v130 = (uint64_t *)v126[4];
        uint64_t v131 = *v130;
        uint64_t v132 = (void *)v130[1];
        uint64_t v133 = *(void *)(a4 + 832);
        if (v133) {
          __int16 v134 = *(_WORD *)(v133 + 8);
        }
        else {
          __int16 v134 = 0;
        }
        __int16 v1013 = sub_1CD7F3564((llvm::APFloatBase *)a4, v129, (uint64_t)&v1639, (llvm *)0xA, 0, v131, v132, v134);
        uint64_t v1015 = v1014;
        uint64_t v1016 = v1635;
        uint64_t v1017 = *(unsigned __int8 **)(v1635 + 64);
        *(void *)&long long v1619 = v1017;
        if (v1017) {
          llvm::MetadataTracking::track((uint64_t)&v1619, v1017, 2);
        }
        DWORD2(v1619) = *(_DWORD *)(v1016 + 60);
        uint64_t v1019 = sub_1CD7EB364(a4, 0, (const llvm::APInt *)&v1619, 0);
        uint64_t v1021 = v1020;
        if (!(void)v1619) {
          goto LABEL_703;
        }
        int v1022 = *(unsigned __int8 *)v1619;
        if ((v1022 - 4) > 0x1E)
        {
          if ((v1022 - 3) >= 0xFFFFFFFE) {
            uint64_t v1293 = v1619;
          }
          else {
            uint64_t v1293 = 0;
          }
          if ((v1022 - 3) < 0xFFFFFFFE)
          {
            if (v1022 == 3) {
              *(void *)(v1619 + 8) = 0;
            }
            goto LABEL_703;
          }
          unint64_t v1294 = v1293 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v1619 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1619 + 12)) {
            goto LABEL_703;
          }
          uint64_t v1506 = *(void *)(v1619 + 16);
          if ((v1506 & 4) == 0) {
            goto LABEL_703;
          }
          unint64_t v1294 = v1506 & 0xFFFFFFFFFFFFFFF8;
          if (!v1294) {
            goto LABEL_703;
          }
        }
        *(void *)&long long v1637 = &v1619;
        sub_1CC5FA668(v1294 + 16, &v1637);
LABEL_703:
        uint64_t v1023 = *(void *)(a4 + 832);
        if (v1023) {
          LOWORD(v1023) = *(_WORD *)(v1023 + 8);
        }
        uint64_t v229 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)&v1639, (llvm *)9, 0, (uint64_t)v1013, v1015, v1018, (uint64_t)v1019, v1021, v1023);
        goto LABEL_151;
      }
      unsigned int v969 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      int v971 = v970;
      uint64_t v972 = *(uint64_t **)(v1635 + 32);
      uint64_t v973 = *v972;
      uint64_t v974 = v972[1];
      unsigned int v975 = sub_1CD7EBF14(a4, 63, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v978 = 0;
      uint64_t v979 = *(void *)(a4 + 832);
      if (v979) {
        __int16 v978 = *(_WORD *)(v979 + 8);
      }
      char v980 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)&v1639, (llvm *)6, 0, v973, v974, v977, (uint64_t)v975, v976, v978);
      uint64_t v983 = (uint64_t)v980;
      int v984 = (void *)v981;
      __int16 v985 = 0;
      uint64_t v986 = *(uint64_t **)(v1635 + 32);
      uint64_t v987 = *v986;
      uint64_t v988 = v986[1];
      uint64_t v989 = *(void *)(a4 + 832);
      if (v989) {
        __int16 v985 = *(_WORD *)(v989 + 8);
      }
      int v991 = sub_1CCFDED5C(a4, 173, (const llvm::APInt *)&v1639, (llvm *)6, 0, v987, v988, v982, (uint64_t)v980, v981, v985);
      uint64_t v993 = v990;
      __int16 v994 = 0;
      uint64_t v995 = *(void *)(a4 + 832);
      if (v995) {
        __int16 v994 = *(_WORD *)(v995 + 8);
      }
      int v996 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1639, (llvm *)6, 0, (uint64_t)v991, v990, v992, v983, (uint64_t)v984, v994);
      __int16 v997 = 0;
      uint64_t v999 = (void *)(v993 & 0xFFFFFFFF00000000 | v998);
      uint64_t v1000 = *(void *)(a4 + 832);
      if (v1000) {
        __int16 v997 = *(_WORD *)(v1000 + 8);
      }
      unsigned int v1002 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xCB, (uint64_t)&v1639, (llvm *)0xA, 0, (uint64_t)v996, v999, v997);
      unsigned int v1003 = v1001;
      __int16 v1004 = 0;
      uint64_t v1005 = *(void *)(a4 + 832);
      if (v1005) {
        __int16 v1004 = *(_WORD *)(v1005 + 8);
      }
      int v1006 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)&v1639, (llvm *)0xA, 0, (uint64_t)v1002, v1001, v1004);
      uint64_t v1008 = v1007;
      __int16 v1009 = 0;
      uint64_t v1010 = *(void *)(a4 + 832);
      if (v1010) {
        __int16 v1009 = *(_WORD *)(v1010 + 8);
      }
      int v1011 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)&v1639, (llvm *)5, 0, v983, v984, v1009);
      uint64_t v229 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1639, (uint64_t)v1011, v1012, (uint64_t)v969, v971, (uint64_t)v1002, v1003, (uint64_t)v1006, v1008, SHIDWORD(v1008), 0x11u);
      goto LABEL_151;
    case 0xCB:
      int v4 = (llvm::IntegerType *)a2;
      if (*(unsigned char *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8)) != 6) {
        return (uint64_t *)v4;
      }
      int v127 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
      if ((v127 - 11) < 0xFFFFFFFE) {
        return 0;
      }
      int v128 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1639 = v128;
      int v126 = v7;
      if (v128)
      {
        llvm::MetadataTracking::track((uint64_t)&v1639, v128, 2);
        int v126 = (uint64_t *)v1635;
      }
      DWORD2(v1639) = *((_DWORD *)v7 + 15);
      if (v127 == 9) {
        goto LABEL_76;
      }
      int v1024 = (uint64_t *)v126[4];
      uint64_t v1025 = *v1024;
      uint64_t v1026 = (void *)v1024[1];
      v1582 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a4 + 40) + 40) + 272, *(void *)(a4 + 56), 10, 0);
      uint64_t v1028 = v1027;
      int v1029 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      uint64_t v1593 = v1030;
      uint64_t v1608 = (uint64_t)v1029;
      v1031 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1639, (llvm *)6, 0, 0, 0);
      uint64_t v1033 = v1032;
      __int16 v1034 = 0;
      uint64_t v1035 = *(void *)(a4 + 832);
      if (v1035) {
        __int16 v1034 = *(_WORD *)(v1035 + 8);
      }
      uint64_t v1037 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xBD, (uint64_t)&v1639, (llvm *)6, 0, v1025, v1026, v1034);
      unint64_t v1038 = (unint64_t)v1036;
      __int16 v1039 = 0;
      uint64_t v1040 = *(void *)(a4 + 832);
      if (v1040) {
        __int16 v1039 = *(_WORD *)(v1040 + 8);
      }
      uint64_t v1041 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)&v1639, (llvm *)5, 0, (uint64_t)v1037, v1036, v1039);
      unint64_t v1043 = v1038 & 0xFFFFFFFF00000000 | v1042;
      int v1044 = sub_1CD7EBF14(a4, 190, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      uint64_t v1046 = v1045;
      unint64_t v1048 = sub_1CD3DC614((void *)a4, (const llvm::APInt *)&v1639, v1582, v1028, v1025, (uint64_t)v1026, (uint64_t)v1031, v1033, 0x16u, 0, 0, 0, 0);
      uint64_t v1050 = v1049;
      __int16 v1051 = 0;
      uint64_t v1052 = *(void *)(a4 + 832);
      if (v1052) {
        __int16 v1051 = *(_WORD *)(v1052 + 8);
      }
      unint64_t v1053 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1044, v1046, v1047, (uint64_t)v1041, v1043, v1051);
      v1056 = sub_1CD3E1260((void *)a4, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1048, v1050, (uint64_t)v1053, v1054, v1608, v1593, SHIDWORD(v1593));
      uint64_t v1058 = v1057;
      __int16 v1059 = 0;
      uint64_t v1060 = *(void *)(a4 + 832);
      if (v1060) {
        __int16 v1059 = *(_WORD *)(v1060 + 8);
      }
      unsigned int v1061 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)&v1639, (llvm *)6, 0, v1025, (uint64_t)v1026, v1055, (uint64_t)v1041, v1043, v1059);
      uint64_t v1063 = v1062;
      uint64_t v1064 = sub_1CD7EBF14(a4, 0x7FFFFFFFFFFFFFFFLL, (const llvm::APInt *)&v1639, (llvm *)6, 0, 0, 0);
      __int16 v1067 = 0;
      uint64_t v1068 = *(void *)(a4 + 832);
      if (v1068) {
        __int16 v1067 = *(_WORD *)(v1068 + 8);
      }
      v1069 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1639, (llvm *)6, 0, (uint64_t)v1061, v1063, v1066, (uint64_t)v1064, v1065, v1067);
      uint64_t v1071 = v1070;
      uint64_t v1072 = sub_1CD7EBF14(a4, 0xFFFFFFFFFFLL, (const llvm::APInt *)&v1639, (llvm *)6, 0, 0, 0);
      __int16 v1075 = 0;
      uint64_t v1076 = *(void *)(a4 + 832);
      if (v1076) {
        __int16 v1075 = *(_WORD *)(v1076 + 8);
      }
      unsigned int v1077 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1639, (llvm *)6, 0, (uint64_t)v1069, v1071, v1074, (uint64_t)v1072, v1073, v1075);
      uint64_t v1565 = v1078;
      uint64_t v1574 = (uint64_t)v1077;
      uint64_t v1079 = sub_1CD7EBF14(a4, 40, (const llvm::APInt *)&v1639, (llvm *)6, 0, 0, 0);
      __int16 v1082 = 0;
      uint64_t v1083 = *(void *)(a4 + 832);
      if (v1083) {
        __int16 v1082 = *(_WORD *)(v1083 + 8);
      }
      BOOL v1084 = sub_1CCFDED5C(a4, 177, (const llvm::APInt *)&v1639, (llvm *)6, 0, (uint64_t)v1069, v1071, v1081, (uint64_t)v1079, v1080, v1082);
      int v1086 = v1085;
      uint64_t v1087 = sub_1CD7EBF14(a4, 23, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      __int16 v1090 = 0;
      uint64_t v1091 = *(void *)(a4 + 832);
      if (v1091) {
        __int16 v1090 = *(_WORD *)(v1091 + 8);
      }
      int v1092 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1056, v1058, v1089, (uint64_t)v1087, v1088, v1090);
      uint64_t v1094 = v1093;
      __int16 v1095 = 0;
      uint64_t v1096 = *(void *)(a4 + 832);
      if (v1096) {
        __int16 v1095 = *(_WORD *)(v1096 + 8);
      }
      uint64_t v1097 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)&v1639, (llvm *)5, 0, (uint64_t)v1084, v1086, v1095);
      __int16 v1100 = 0;
      uint64_t v1101 = *(void *)(a4 + 832);
      if (v1101) {
        __int16 v1100 = *(_WORD *)(v1101 + 8);
      }
      uint64_t v1102 = sub_1CCFDED5C(a4, 172, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1092, v1094, v1099, (uint64_t)v1097, v1098, v1100);
      uint64_t v1557 = v1103;
      unsigned int v1104 = sub_1CD7EBF14(a4, 0x8000000000, (const llvm::APInt *)&v1639, (llvm *)6, 0, 0, 0);
      uint64_t v1106 = v1105;
      uint64_t v1107 = sub_1CD3DC614((void *)a4, (const llvm::APInt *)&v1639, v1582, v1028, v1574, v1565, (uint64_t)v1104, v1105, 0xAu, 0, 0, 0, 0);
      uint64_t v1109 = v1108;
      uint64_t v1110 = sub_1CD3DC614((void *)a4, (const llvm::APInt *)&v1639, v1582, v1028, v1574, v1565, (uint64_t)v1104, v1106, 0x11u, 0, 0, 0, 0);
      uint64_t v1112 = v1111;
      uint64_t v1113 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      uint64_t v1116 = (uint64_t)v1113;
      uint64_t v1117 = v1114;
      __int16 v1118 = 0;
      uint64_t v1119 = *(void *)(a4 + 832);
      if (v1119) {
        __int16 v1118 = *(_WORD *)(v1119 + 8);
      }
      uint64_t v1120 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1102, v1557, v1115, (uint64_t)v1113, v1114, v1118);
      uint64_t v1122 = sub_1CD3E1260((void *)a4, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1110, v1112, (uint64_t)v1120, v1121, v1608, v1593, SHIDWORD(v1593));
      uint64_t v1125 = sub_1CD3E1260((void *)a4, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1107, v1109, v1116, v1117, (uint64_t)v1122, v1123, v1124);
      uint64_t v1128 = v1126;
      uint64_t v1129 = *(void *)(a4 + 832);
      if (v1129) {
        LOWORD(v1129) = *(_WORD *)(v1129 + 8);
      }
      uint64_t v98 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v1102, v1557, v1127, (uint64_t)v1125, v1126, v1129);
      unint64_t v1131 = v1128 & 0xFFFFFFFF00000000 | v1130;
      uint64_t v1132 = *(void *)(a4 + 832);
      if (v1132) {
        __int16 v102 = *(_WORD *)(v1132 + 8);
      }
      else {
        __int16 v102 = 0;
      }
      unsigned int v448 = (llvm::APFloatBase *)a4;
      uint64_t v449 = 216;
      uint64_t v450 = 10;
      uint64_t v451 = 0;
      uint64_t v100 = (void *)v1131;
      goto LABEL_636;
    case 0xCC:
      int v4 = (llvm::IntegerType *)a2;
      if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 6) {
        return (uint64_t *)v4;
      }
      char v159 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long v1639 = v159;
      int v160 = v7;
      if (v159)
      {
        llvm::MetadataTracking::track((uint64_t)&v1639, v159, 2);
        int v160 = (uint64_t *)v1635;
      }
      DWORD2(v1639) = *((_DWORD *)v7 + 15);
      unsigned int v161 = (uint64_t *)v160[4];
      uint64_t v162 = *v161;
      uint64_t v163 = (void *)v161[1];
      long long v1599 = *(_OWORD *)(v161[5] + 80);
      long long v1619 = v1599;
      uint64_t v164 = *(void *)(a4 + 832);
      if (v164) {
        __int16 v165 = *(_WORD *)(v164 + 8);
      }
      else {
        __int16 v165 = 0;
      }
      uint64_t v727 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)&v1639, (llvm *)5, 0, v162, v163, v165);
      unint64_t v729 = v728;
      if ((_BYTE)v1599) {
        uint64_t v730 = sub_1CB87E200((unsigned __int8 *)&v1619);
      }
      else {
        uint64_t v730 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1619);
      }
      unint64_t v732 = v730;
      if (v731 == 1) {
      if (v732 > 0x1F)
      }
      {
        uint64_t v735 = v727;
        unsigned int v736 = v729;
      }
      else
      {
        if ((_BYTE)v1619) {
          uint64_t v733 = sub_1CB87E200((unsigned __int8 *)&v1619);
        }
        else {
          uint64_t v733 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1619);
        }
        uint64_t v1138 = v733;
        if (v734 == 1) {
        uint64_t v1139 = sub_1CD7EBF14(a4, 32 - v1138, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
        }
        __int16 v1142 = 0;
        uint64_t v1143 = *(void *)(a4 + 832);
        if (v1143) {
          __int16 v1142 = *(_WORD *)(v1143 + 8);
        }
        uint64_t v727 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v727, v729, v1141, (uint64_t)v1139, v1140, v1142);
        unint64_t v729 = v729 & 0xFFFFFFFF00000000 | v1144;
        if ((_BYTE)v1619) {
          uint64_t v1145 = sub_1CB87E200((unsigned __int8 *)&v1619);
        }
        else {
          uint64_t v1145 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1619);
        }
        uint64_t v1147 = v1145;
        if (v1146 == 1) {
        int v1148 = sub_1CD7EBF14(a4, 32 - v1147, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
        }
        __int16 v1151 = 0;
        uint64_t v1152 = *(void *)(a4 + 832);
        if (v1152) {
          __int16 v1151 = *(_WORD *)(v1152 + 8);
        }
        uint64_t v735 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v727, v729, v1150, (uint64_t)v1148, v1149, v1151);
        unsigned int v736 = v1153;
      }
      int v1154 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)&v1639, (llvm *)5, 0, 0, 0);
      uint64_t v1157 = *(void *)(a4 + 832);
      if (v1157) {
        LOWORD(v1157) = *(_WORD *)(v1157 + 8);
      }
      v1158 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)&v1639, (llvm *)5, 0, (uint64_t)v727, v729, v1156, (uint64_t)v1154, v1155, v1157);
      uint64_t v1161 = *(void *)(a4 + 832);
      if (v1161) {
        LOWORD(v1161) = *(_WORD *)(v1161 + 8);
      }
      v1163 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1639, (llvm *)0x31, 0, (uint64_t)v735, v736, v1160, (uint64_t)v1158, v1159, v1161);
      uint64_t v1164 = *(void *)(a4 + 832);
      if (v1164) {
        __int16 v1165 = *(_WORD *)(v1164 + 8);
      }
      else {
        __int16 v1165 = 0;
      }
      int v4 = (llvm::IntegerType *)sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1639, (llvm *)6, 0, (uint64_t)v1163, v1162, v1165);
      goto LABEL_152;
    default:
      int v166 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
      uint64_t v168 = *v166;
      uint64_t v167 = v166[1];
      *(void *)&long long v1619 = v168;
      *((void *)&v1619 + 1) = v167;
      if ((_BYTE)v168) {
        char v169 = sub_1CB8C2FBC((unsigned __int8 *)&v1619);
      }
      else {
        char v169 = llvm::EVT::getEVT(*(llvm::EVT **)(v167 + 24), 0, a3);
      }
      if (v169 != 10) {
        return 0;
      }
      uint64_t v255 = v1635;
      uint64_t v256 = *(unsigned __int8 **)(v1635 + 64);
      *(void *)&long long v1637 = v256;
      if (v256) {
        llvm::MetadataTracking::track((uint64_t)&v1637, v256, 2);
      }
      DWORD2(v1637) = *(_DWORD *)(v255 + 60);
      *(void *)&long long v1639 = &v1640;
      *((void *)&v1639 + 1) = 0x800000000;
      if (v1619 == 97)
      {
        uint64_t v257 = a4;
        uint64_t v258 = 35;
      }
      else
      {
        if (v1619 != 95) {
          llvm::report_fatal_error((llvm *)"Unsupported vector width!", (const llvm::Twine *)1);
        }
        uint64_t v257 = a4;
        uint64_t v258 = 17;
      }
      uint64_t v738 = sub_1CD7EBF14(v257, v258, (const llvm::APInt *)&v1637, (llvm *)5, 0, 1, 0);
      if (DWORD2(v1639) >= HIDWORD(v1639)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      __int16 v739 = (uint64_t **)(v1639 + 16 * DWORD2(v1639));
      *__int16 v739 = v738;
      v739[1] = v737;
      unsigned int v740 = ++DWORD2(v1639);
      uint64_t v741 = v1635;
      if (*(_WORD *)(v1635 + 56))
      {
        unsigned int v743 = 0;
        do
        {
          if (v740 >= HIDWORD(v1639)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)(v1639 + 16 * v740) = *(_OWORD *)(*(void *)(v741 + 32) + 40 * v743);
          ++DWORD2(v1639);
          uint64_t v745 = sub_1CD7EBF14(a4, v743 + 25, (const llvm::APInt *)&v1637, (llvm *)5, 0, 1, 0);
          if (DWORD2(v1639) >= (unint64_t)HIDWORD(v1639)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v746 = (uint64_t **)(v1639 + 16 * DWORD2(v1639));
          unint64_t *v746 = v745;
          v746[1] = v744;
          unsigned int v740 = ++DWORD2(v1639);
          ++v743;
          uint64_t v741 = v1635;
        }
        while (v743 != *(unsigned __int16 *)(v1635 + 56));
      }
      int v4 = (llvm::IntegerType *)sub_1CD801450(a4, 18, (uint64_t)&v1637, (llvm *)0xAE, 0, (uint64_t *)v1639, v740);
      if ((void **)v1639 != &v1640) {
        free((void *)v1639);
      }
      if (!(void)v1637) {
        return (uint64_t *)v4;
      }
      int v742 = *(unsigned __int8 *)v1637;
      if ((v742 - 4) > 0x1E)
      {
        if ((v742 - 3) >= 0xFFFFFFFE) {
          uint64_t v1178 = v1637;
        }
        else {
          uint64_t v1178 = 0;
        }
        if ((v742 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1179 = v1178 + 8;
LABEL_810:
          *(void *)&long long v1639 = &v1637;
          sub_1CC5FA668(v1179 + 16, &v1639);
          return (uint64_t *)v4;
        }
        if (v742 == 3) {
          *(void *)(v1637 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v1637 + 1) & 0x7F) == 2 || *(_DWORD *)(v1637 + 12))
      {
        uint64_t v1502 = *(void *)(v1637 + 16);
        if ((v1502 & 4) != 0)
        {
          unint64_t v1179 = v1502 & 0xFFFFFFFFFFFFFFF8;
          if (v1179) {
            goto LABEL_810;
          }
        }
      }
      break;
  }
  return (uint64_t *)v4;
}

uint64_t *sub_1CB9EF398(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  long long v107 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v107) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v107);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v107);
  }
  unsigned int v7 = ExtendedSizeInBits;
  if (v6 == 1) {
  unsigned int v8 = *(unsigned __int8 **)(a1 + 64);
  }
  uint64_t v105 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v105, v8, 2);
  }
  int v106 = *(_DWORD *)(a1 + 60);
  unsigned int v9 = *(uint64_t **)(a1 + 32);
  uint64_t v10 = *v9;
  uint64_t v103 = v9[1];
  uint64_t v11 = v9[5];
  uint64_t v12 = v9[6];
  uint64_t v14 = (uint64_t *)v9[10];
  unint64_t v13 = v9[11];
  long long v108 = *(_OWORD *)(v14[5] + 16 * v13);
  if ((_BYTE)v108) {
    uint64_t v15 = sub_1CB87E200((unsigned __int8 *)&v108);
  }
  else {
    uint64_t v15 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v108);
  }
  unint64_t v17 = v15;
  if (v16 == 1) {
  unint64_t v18 = v7;
  }
  if (v17 < v7)
  {
    uint64_t v20 = *((void *)&v107 + 1);
    uint64_t v19 = (llvm *)v107;
    uint64_t v21 = *((void *)a3 + 104);
    if (v21) {
      __int16 v22 = *(_WORD *)(v21 + 8);
    }
    else {
      __int16 v22 = 0;
    }
    uint64_t v25 = a3;
    uint64_t v26 = 199;
LABEL_28:
    uint64_t v14 = sub_1CD7F3564(v25, (const char *)v26, (uint64_t)&v105, v19, v20, (uint64_t)v14, (void *)v13, v22);
    unint64_t v13 = v13 & 0xFFFFFFFF00000000 | v29;
    goto LABEL_29;
  }
  long long v108 = *(_OWORD *)(v14[5] + 16 * v13);
  if ((_BYTE)v108) {
    uint64_t v23 = sub_1CB87E200((unsigned __int8 *)&v108);
  }
  else {
    uint64_t v23 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v108);
  }
  unint64_t v27 = v23;
  if (v24 == 1) {
  if (v27 > v18)
  }
  {
    uint64_t v20 = *((void *)&v107 + 1);
    uint64_t v19 = (llvm *)v107;
    uint64_t v28 = *((void *)a3 + 104);
    if (v28) {
      __int16 v22 = *(_WORD *)(v28 + 8);
    }
    else {
      __int16 v22 = 0;
    }
    uint64_t v25 = a3;
    uint64_t v26 = 201;
    goto LABEL_28;
  }
LABEL_29:
  long long v30 = v107;
  uint64_t v32 = sub_1CD7EBF14((uint64_t)a3, v18, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), 0, 0);
  uint64_t v34 = *((void *)a3 + 104);
  if (v34) {
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  }
  uint64_t v35 = sub_1CCFDED5C((uint64_t)a3, 57, (const llvm::APInt *)&v105, (llvm *)v30, *((uint64_t *)&v30 + 1), (uint64_t)v32, v31, v33, (uint64_t)v14, v13, v34);
  uint64_t v38 = *((void *)a3 + 104);
  if (v38) {
    LOWORD(v38) = *(_WORD *)(v38 + 8);
  }
  __int16 v39 = sub_1CCFDED5C((uint64_t)a3, 177, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), v10, v103, v37, (uint64_t)v35, v36, v38);
  uint64_t v98 = v40;
  long long v41 = v107;
  uint64_t v42 = sub_1CD7EBF14((uint64_t)a3, v18, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), 0, 0);
  uint64_t v45 = *((void *)a3 + 104);
  if (v45) {
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  }
  __int16 v47 = sub_1CCFDED5C((uint64_t)a3, 57, (const llvm::APInt *)&v105, (llvm *)v41, *((uint64_t *)&v41 + 1), (uint64_t)v14, v13, v44, (uint64_t)v42, v43, v45);
  uint64_t v102 = v48;
  uint64_t v49 = *((void *)a3 + 104);
  if (v49) {
    LOWORD(v49) = *(_WORD *)(v49 + 8);
  }
  uint64_t v51 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), v11, v12, v46, (uint64_t)v14, v13, v49);
  uint64_t v53 = v52;
  uint64_t v54 = *((void *)a3 + 104);
  if (v54) {
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  }
  __int16 v55 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), v10, v103, v50, (uint64_t)v47, v102, v54);
  unsigned int v100 = v57;
  uint64_t v101 = (uint64_t)v55;
  uint64_t v58 = *((void *)a3 + 104);
  if (v58) {
    LOWORD(v58) = *(_WORD *)(v58 + 8);
  }
  int v59 = sub_1CCFDED5C((uint64_t)a3, 172, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), (uint64_t)v39, v98, v56, (uint64_t)v51, v53, v58);
  int v97 = v61;
  uint64_t v99 = (uint64_t)v59;
  uint64_t v62 = *((void *)a3 + 104);
  uint64_t v63 = (uint64_t)v47;
  if (v62) {
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  }
  uint64_t v64 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), v10, v103, v60, (uint64_t)v14, v13, v62);
  int v66 = v65;
  uint64_t v67 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), 0, 0);
  unsigned int v69 = v68;
  uint64_t v70 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), 0, 0);
  int v72 = v71;
  uint64_t v73 = v67[5] + 16 * v69;
  uint64_t v75 = *(llvm **)v73;
  uint64_t v74 = *(void *)(v73 + 8);
  uint64_t v76 = sub_1CD7EE368(a3, 0x13u);
  __int16 v79 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v105, v75, v74, v63, v102, v78, (uint64_t)v70, v72, (uint64_t)v67, v69, (uint64_t)v64, v66, v76, v77);
  int v104 = v80;
  int v81 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v105, (llvm *)v107, *((uint64_t *)&v107 + 1), 0, 0);
  LODWORD(v67) = v82;
  uint64_t v83 = *(void *)(v101 + 40) + 16 * v100;
  uint64_t v84 = *(llvm **)v83;
  uint64_t v85 = *(void *)(v83 + 8);
  uint64_t v86 = sub_1CD7EE368(a3, 0x13u);
  unsigned int v89 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v105, v84, v85, v63, v102, v88, (uint64_t)v81, (int)v67, v101, v100, v99, v97, v86, v87);
  *(void *)&long long v108 = v79;
  DWORD2(v108) = v104;
  int v109 = v89;
  int v110 = v90;
  int v91 = sub_1CD7F9858(a3, (uint64_t *)&v108, 2uLL, (const llvm::APInt *)&v105);
  if (v105)
  {
    int v92 = *v105;
    if ((v92 - 4) > 0x1E)
    {
      if ((v92 - 3) >= 0xFFFFFFFE) {
        uint64_t v94 = v105;
      }
      else {
        uint64_t v94 = 0;
      }
      if ((v92 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v95 = (unint64_t)(v94 + 8);
LABEL_53:
        *(void *)&long long v108 = &v105;
        sub_1CC5FA668(v95 + 16, &v108);
        return v91;
      }
      if (v92 == 3) {
        *((void *)v105 + 1) = 0;
      }
    }
    else if ((v105[1] & 0x7F) == 2 || *((_DWORD *)v105 + 3))
    {
      uint64_t v96 = *((void *)v105 + 2);
      if ((v96 & 4) != 0)
      {
        unint64_t v95 = v96 & 0xFFFFFFFFFFFFFFF8;
        if (v95) {
          goto LABEL_53;
        }
      }
    }
  }
  return v91;
}

uint64_t sub_1CB9EF928(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 3)
  {
    LODWORD(v4) = a3;
    while (1)
    {
      if (!v4)
      {
        uint64_t result = sub_1CB9FA97C(a1, a2, 0);
        if (!result) {
          return result;
        }
      }
      int v6 = *(unsigned __int16 *)(a1 + 24);
      if (v6 == 36 || v6 == 12)
      {
        uint64_t v8 = *(void *)(a1 + 80);
        if (*(_UNKNOWN **)(v8 + 32) == &unk_1CFB2E344)
        {
          char v9 = *(unsigned char *)(*(void *)(v8 + 40) + 28);
          if ((v9 & 8) != 0) {
            goto LABEL_18;
          }
        }
        else
        {
          char v9 = *(unsigned char *)(v8 + 52);
          if ((v9 & 8) != 0) {
            goto LABEL_18;
          }
        }
        if ((v9 & 7) != 3)
        {
          if (!sub_1CB8456FC(v8 + 24)) {
            return 1;
          }
          int v6 = *(unsigned __int16 *)(a1 + 24);
        }
      }
LABEL_18:
      if (v6 == 141)
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v11 = (uint64_t *)(v13 + 80);
        uint64_t v12 = (uint64_t *)(v13 + 88);
        LODWORD(v4) = v4 + 1;
      }
      else
      {
        if (v6 != 96) {
          return 0;
        }
        uint64_t v4 = (v4 + 1);
        if (sub_1CB9EF928(**(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), v4)) {
          return 1;
        }
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = (uint64_t *)(v10 + 40);
        uint64_t v12 = (uint64_t *)(v10 + 48);
      }
      a2 = *v12;
      a1 = *v11;
      if (v4 > 3) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1CB9EFA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  v280[4] = *MEMORY[0x1E4F143B8];
  int v6 = *(llvm::APFloatBase **)(a2 + 80);
  uint64_t v215 = (const llvm::APInt *)(a2 + 88);
  uint64_t v210 = *(void *)(a2 + 8);
  uint64_t v208 = *(void *)(a2 + 40);
  uint64_t v209 = *(void *)(a2 + 48);
  int v7 = *(_DWORD *)(a2 + 32);
  int v8 = (*(unsigned __int16 *)(a2 + 24) >> 2) & 1;
  uint64_t v225 = *(void *)(*((void *)v6 + 5) + 56);
  uint64_t v229 = *(void *)a2;
  uint64_t v9 = a1 + 184296;
  uint64_t v223 = (*(uint64_t (**)(void))(**(void **)(a1 + 184296) + 112))(*(void *)(a1 + 184296));
  uint64_t v213 = v9;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v9 + 176))();
  *(unsigned char *)(v4 + 26) = 0;
  uint64_t v206 = v10;
  uint64_t v261 = v263;
  uint64_t v262 = 0x1000000000;
  llvm::CCState::CCState((uint64_t)v251, v7, v8, *((void *)v6 + 5), (uint64_t)&v261, *((void *)v6 + 7));
  uint64_t v11 = *(unsigned int *)(v4 + 120);
  uint64_t v231 = v4;
  uint64_t v234 = (uint64_t)v6;
  if (v11)
  {
    uint64_t v12 = 0;
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v14 = *(void *)(v4 + 112) + v12;
      unsigned int v15 = *(unsigned __int8 *)(v14 + 12);
      unsigned int v16 = sub_1CB87DC14(v5, *(void *)(**((void **)v6 + 5) + 40) + 272, *(llvm::EVT **)(*(void *)(v4 + 56) + 48 * *(unsigned int *)(v14 + 36) + 24), (llvm::Type *)1);
      if (!v16) {
        unsigned int v16 = v15;
      }
      unint64_t v17 = (uint64_t *)(*(void *)(v4 + 112) + v12);
      uint64_t v18 = *v17;
      uint64_t v19 = *((unsigned int *)v17 + 2);
      uint64_t v20 = v5;
      if (v16 - 2 >= 3) {
        uint64_t v21 = v15;
      }
      else {
        uint64_t v21 = 4;
      }
      __int16 v22 = sub_1CB9211AC(v7);
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v19;
      uint64_t v23 = v21;
      uint64_t v24 = v21;
      uint64_t v5 = v20;
      uint64_t v25 = v18;
      uint64_t v4 = v231;
      int v6 = (llvm::APFloatBase *)v234;
      v22(i, v23, v24, 0, v25, v3, (uint64_t)v251);
      v12 += 48;
    }
  }
  unsigned int v207 = v7;
  unsigned int v26 = *(unsigned __int8 *)(v225 + 60);
  unsigned __int8 v27 = 63 - __clz((1 << *(unsigned char *)(v223 + 12)));
  if (v26 <= v27) {
    LOBYTE(v26) = v27;
  }
  uint64_t v205 = -(int)(1 << v26) & (v252 + (1 << v26) - 1);
  uint64_t v28 = v215;
  uint64_t v216 = sub_1CD409700(v6, v229, v210, v205, 0, v215);
  uint64_t v30 = v210 & 0xFFFFFFFF00000000 | v29;
  v243[0] = 0;
  v243[1] = 0;
  uint64_t v242 = (uint64_t *)v243;
  unsigned int v248 = v250;
  uint64_t v249 = 0x800000000;
  uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 32))(v5, *(void *)(**((void **)v6 + 5) + 40) + 272, 0);
  unsigned __int8 v204 = v31;
  uint64_t v212 = v5;
  if (v262)
  {
    uint64_t v38 = 0;
    uint64_t v221 = 12 * v262;
    uint64_t v39 = 4;
    uint64_t v40 = 8;
    uint64_t v217 = v30;
    do
    {
      uint64_t v226 = v39;
      long long v41 = (char *)v261;
      uint64_t v42 = (unint64_t *)(*(void *)(v4 + 1664) + v40);
      uint64_t v43 = (uint64_t *)*(v42 - 1);
      unint64_t v44 = *v42;
      uint64_t v45 = (char *)v261 + v38;
      switch(*((unsigned __int8 *)v261 + v38 + 8) >> 2)
      {
        case 1:
          uint64_t v46 = *((void *)v6 + 104);
          if (v46) {
            __int16 v47 = *(_WORD *)(v46 + 8);
          }
          else {
            __int16 v47 = 0;
          }
          uint64_t v52 = (llvm *)*((unsigned __int8 *)v261 + v38 + 10);
          uint64_t v53 = v6;
          uint64_t v54 = 198;
          goto LABEL_37;
        case 2:
          uint64_t v48 = *((void *)v6 + 104);
          if (v48) {
            __int16 v47 = *(_WORD *)(v48 + 8);
          }
          else {
            __int16 v47 = 0;
          }
          uint64_t v52 = (llvm *)*((unsigned __int8 *)v261 + v38 + 10);
          uint64_t v53 = v6;
          uint64_t v54 = 199;
          goto LABEL_37;
        case 3:
          uint64_t v49 = *((void *)v6 + 104);
          if (v49) {
            __int16 v47 = *(_WORD *)(v49 + 8);
          }
          else {
            __int16 v47 = 0;
          }
          uint64_t v52 = (llvm *)*((unsigned __int8 *)v261 + v38 + 10);
          uint64_t v53 = v6;
          uint64_t v54 = 200;
          goto LABEL_37;
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          __break(1u);
          goto LABEL_224;
        case 7:
          uint64_t v51 = *((void *)v6 + 104);
          if (v51) {
            __int16 v47 = *(_WORD *)(v51 + 8);
          }
          else {
            __int16 v47 = 0;
          }
          uint64_t v52 = (llvm *)*((unsigned __int8 *)v261 + v38 + 10);
          uint64_t v53 = v6;
          uint64_t v54 = 216;
          goto LABEL_37;
        case 0xA:
          uint64_t v50 = *((void *)v6 + 104);
          if (v50) {
            __int16 v47 = *(_WORD *)(v50 + 8);
          }
          else {
            __int16 v47 = 0;
          }
          uint64_t v52 = (llvm *)*((unsigned __int8 *)v261 + v38 + 10);
          uint64_t v53 = v6;
          uint64_t v54 = 215;
LABEL_37:
          uint64_t v43 = sub_1CD7F3564(v53, (const char *)v54, (uint64_t)v28, v52, 0, (uint64_t)v43, (void *)v44, v47);
          unint64_t v44 = v44 & 0xFFFFFFFF00000000 | v55;
          break;
        default:
          break;
      }
      if (v45[8])
      {
        uint64_t v220 = (uint64_t)v43;
        uint64_t v64 = *(int *)&v41[v38 + 4];
        int v65 = sub_1CD7EBF14((uint64_t)v6, v64, v28, (llvm *)5, 0, 0, 0);
        if (*(unsigned char *)(*(void *)v213 + 381))
        {
          uint64_t v74 = sub_1CD7EBF14((uint64_t)v6, v64, v28, (llvm *)5, 0, 1, 0);
        }
        else
        {
          uint64_t v67 = (uint64_t)v65;
          uint64_t v68 = v66;
          uint64_t v70 = sub_1CD3D6670(v6, (uint64_t)v216, v217, v28, 66, (llvm *)5, 0);
          __int16 v72 = 0;
          uint64_t v73 = *((void *)v6 + 104);
          if (v73) {
            __int16 v72 = *(_WORD *)(v73 + 8);
          }
          uint64_t v74 = sub_1CCFDED5C((uint64_t)v6, 56, v28, (llvm *)5, 0, (uint64_t)v70, v69, v71, v67, v68, v72);
        }
        unint64_t v76 = v75 | v223 & 0xFFFFFFFF00000000;
        uint64_t v77 = v64;
        uint64_t v78 = *(void *)(*((void *)v6 + 5) + 432);
        __int16 v79 = (void *)((v78 + 8) | 4);
        int v80 = *(_DWORD *)(v78 + 20);
        uint64_t v81 = *(void *)(v231 + 112);
        uint64_t v223 = v76;
        if ((*(unsigned char *)(v81 + v226 - 4) & 0x10) != 0)
        {
          uint64_t v211 = (uint64_t)v74;
          uint64_t v86 = sub_1CD7EBF14((uint64_t)v6, *(unsigned int *)(v81 + v226), v215, (llvm *)6, 0, 0, 0);
          uint64_t v28 = v215;
          LODWORD(v89) = *(_DWORD *)(*(void *)(v231 + 112) + 4 * v38);
          *(void *)&long long v239 = v79;
          *((void *)&v239 + 1) = v77;
          int v240 = v80;
          BOOL v88 = ((v89 >> 19) & 0xF) == 0;
          LODWORD(v89) = (((v89 >> 19) & 0xF) - 1);
          char v241 = 0;
          *(void *)((char *)v238 + 5) = 0;
          uint64_t v237 = 0;
          v238[0] = 0;
          if (v88) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = v89;
          }
          long long v264 = 0u;
          long long v265 = 0u;
          uint64_t v30 = v217;
          uint64_t v31 = sub_1CD7F6720((uint64_t)v6, (uint64_t)v216, v217, (uint64_t)v215, v211, v76, v220, v44, (uint64_t)v86, v87, SHIDWORD(v87), v89, SHIDWORD(v89), 0, 0, 0, &v239, (long long *)&v237, (uint64_t)&v264);
          uint64_t v91 = v90;
          if (v249 >= (unint64_t)HIDWORD(v249)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v92 = (char *)v248 + 16 * v249;
          void *v92 = v31;
          uint64_t v4 = v231;
          uint64_t v63 = v226;
        }
        else
        {
          int v82 = (llvm *)v41[v38 + 9];
          if ((v82 - 2) > 2)
          {
            uint64_t v84 = (uint64_t)v74;
            uint64_t v28 = v215;
            __int16 v93 = (uint64_t *)v220;
          }
          else
          {
            uint64_t v83 = *((void *)v6 + 104);
            uint64_t v28 = v215;
            uint64_t v84 = (uint64_t)v74;
            if (v83) {
              __int16 v85 = *(_WORD *)(v83 + 8);
            }
            else {
              __int16 v85 = 0;
            }
            __int16 v93 = sub_1CD7F3564(v6, (const char *)0xC9, (uint64_t)v215, v82, 0, v220, (void *)v44, v85);
            LODWORD(v44) = v94;
          }
          BOOL v274 = v79;
          uint64_t v275 = v77;
          int v276 = v80;
          char v277 = 0;
          long long v264 = 0u;
          long long v265 = 0u;
          unint64_t v95 = (uint64_t *)(v93[5] + 16 * v44);
          char v96 = sub_1CD7EA9CC((uint64_t)v6, *v95, v95[1]);
          uint64_t v30 = v217;
          uint64_t v31 = sub_1CD7FB188((uint64_t)v6, (uint64_t)v216, v217, (uint64_t)v28, (uint64_t)v93, v44, v84, v223, (uint64_t)&v274, v96, 0, 0, &v264);
          uint64_t v91 = v97;
          if (v249 >= (unint64_t)HIDWORD(v249)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v4 = v231;
          uint64_t v63 = v226;
          int v92 = (char *)v248 + 16 * v249;
          void *v92 = v31;
        }
        v92[1] = v91;
        LODWORD(v249) = v249 + 1;
      }
      else
      {
        LODWORD(v264) = *(_DWORD *)&v41[v38 + 4];
        uint64_t v56 = (uint64_t)v43;
        *((void *)&v264 + 1) = v43;
        *(void *)&long long v265 = v44;
        uint64_t v31 = sub_1CD40B208(&v242, (int *)&v264);
        if (!v57)
        {
          uint64_t v58 = v31;
          uint64_t v59 = *((void *)v6 + 104);
          if (v59) {
            LOWORD(v59) = *(_WORD *)(v59 + 8);
          }
          uint64_t v60 = v31[5];
          uint64_t v61 = *(void *)(v60 + 40) + 16 * *((unsigned int *)v31 + 12);
          uint64_t v31 = sub_1CCFDED5C((uint64_t)v6, 172, v28, *(llvm **)v61, *(void *)(v61 + 8), v60, v31[6], v32, v56, v44, v59);
          v58[5] = v31;
          *((_DWORD *)v58 + 12) = v62;
        }
        uint64_t v63 = v226;
      }
      v38 += 12;
      uint64_t v39 = v63 + 48;
      v40 += 16;
    }
    while (v221 != v38);
  }
  uint64_t v34 = v208;
  unint64_t v33 = v209;
  uint64_t v35 = v216;
  if (v249)
  {
    uint64_t v36 = *((void *)v6 + 104);
    if (v36) {
      uint64_t v37 = *(unsigned __int16 *)(v36 + 8);
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v35 = sub_1CD7FF4E8(v6, (const char *)2, v28, (llvm *)1, 0, (uint64_t *)v248, v249, v37);
    uint64_t v30 = v98 | v210 & 0xFFFFFFFF00000000;
  }
  uint64_t v99 = v242;
  if (v242 == (uint64_t *)v243)
  {
    uint64_t v224 = 0;
    uint64_t v227 = 0;
  }
  else
  {
    uint64_t v100 = 0;
    int v101 = 0;
    do
    {
      uint64_t v102 = sub_1CD3E5420(v6, (uint64_t)v35, v30, v28, *((_DWORD *)v99 + 8), v99[5], v99[6], v32, v100, v101);
      uint64_t v35 = v102;
      int v104 = (uint64_t *)v99[1];
      if (v104)
      {
        do
        {
          uint64_t v105 = v104;
          int v104 = (uint64_t *)*v104;
        }
        while (v104);
      }
      else
      {
        do
        {
          uint64_t v105 = (uint64_t *)v99[2];
          BOOL v88 = *v105 == (void)v99;
          uint64_t v99 = v105;
        }
        while (!v88);
      }
      uint64_t v30 = v30 & 0xFFFFFFFF00000000 | v103;
      uint64_t v99 = v105;
      uint64_t v100 = (uint64_t)v102;
      int v101 = 1;
    }
    while (v105 != (uint64_t *)v243);
    uint64_t v224 = 1;
    uint64_t v227 = v102;
  }
  unsigned int v106 = *(unsigned __int16 *)(v208 + 24);
  if (v106 > 0x2A)
  {
LABEL_87:
    uint64_t v107 = sub_1CD7EB67C((uint64_t)v6, v208, v209, (uint64_t)v28, 5, 0);
    goto LABEL_88;
  }
  if (((1 << v106) & 0x6000006000) == 0)
  {
    if (((1 << v106) & 0x40000040000) != 0) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  if (*(unsigned char *)(*(void *)v213 + 340))
  {
    if (v106 == 18) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  uint64_t v107 = (uint64_t)sub_1CD7ECF00((uint64_t)v6, *(void *)(v208 + 80), (uint64_t)v28, (llvm *)v204, 0, 0, 1, 0);
LABEL_88:
  uint64_t v34 = v107;
  unint64_t v33 = v209 & 0xFFFFFFFF00000000 | v108;
LABEL_89:
  int v109 = operator new(0x10uLL);
  *int v109 = v35;
  v109[1] = v30;
  uint64_t v218 = v30;
  uint64_t v28 = (const llvm::APInt *)operator new(0x20uLL);
  *((void *)v28 + 2) = v34;
  *((void *)v28 + 3) = v33;
  *(void *)uint64_t v28 = *v109;
  *((_DWORD *)v28 + 2) = *((_DWORD *)v109 + 2);
  int v110 = (char *)v28 + 32;
  operator delete(v109);
  uint64_t v111 = v242;
  if (v242 == (uint64_t *)v243)
  {
    uint64_t v112 = (char *)v28 + 32;
  }
  else
  {
    uint64_t v112 = (char *)v28 + 32;
    do
    {
      uint64_t v113 = *(void *)(v111[5] + 40) + 16 * *((unsigned int *)v111 + 12);
      uint64_t v114 = sub_1CD7EEB94((uint64_t)v6, *((_DWORD *)v111 + 8), *(llvm **)v113, *(void *)(v113 + 8));
      uint64_t v116 = v114;
      uint64_t v117 = v115;
      if (v110 >= v112)
      {
        uint64_t v118 = (v110 - (char *)v28) >> 4;
        unint64_t v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) >> 60) {
          goto LABEL_218;
        }
        if ((v112 - (char *)v28) >> 3 > v119) {
          unint64_t v119 = (v112 - (char *)v28) >> 3;
        }
        if ((unint64_t)(v112 - (char *)v28) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v120 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v120 = v119;
        }
        if (v120)
        {
          if (v120 >> 60) {
            goto LABEL_219;
          }
          uint64_t v121 = (char *)operator new(16 * v120);
        }
        else
        {
          uint64_t v121 = 0;
        }
        uint64_t v122 = (uint64_t *)&v121[16 * v118];
        uint64_t v112 = &v121[16 * v120];
        *uint64_t v122 = v116;
        v122[1] = v117;
        __int16 v123 = (char *)(v122 + 2);
        if (v110 == (char *)v28) {
          goto LABEL_107;
        }
        do
        {
          uint64_t v124 = *((void *)v110 - 2);
          v110 -= 16;
          int v125 = *((_DWORD *)v110 + 2);
          *(v122 - 2) = v124;
          v122 -= 2;
          *((_DWORD *)v122 + 2) = v125;
        }
        while (v110 != (char *)v28);
        if (v28) {
LABEL_107:
        }
          operator delete(v28);
        uint64_t v28 = (const llvm::APInt *)v122;
        int v110 = v123;
      }
      else
      {
        *(void *)int v110 = v114;
        *((void *)v110 + 1) = v115;
        v110 += 16;
      }
      int v126 = (uint64_t *)v111[1];
      if (v126)
      {
        do
        {
          int v127 = v126;
          int v126 = (uint64_t *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          int v127 = (uint64_t *)v111[2];
          BOOL v88 = *v127 == (void)v111;
          uint64_t v111 = v127;
        }
        while (!v88);
      }
      uint64_t v111 = v127;
    }
    while (v127 != (uint64_t *)v243);
  }
  uint64_t v128 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v206 + 40))(v206, *((void *)v6 + 5), v207);
  uint64_t v129 = sub_1CD7EEDF4(v6, v128);
  uint64_t v131 = v129;
  uint64_t v132 = v130;
  if (v110 < v112)
  {
    *(void *)int v110 = v129;
    *((void *)v110 + 1) = v130;
    uint64_t v133 = v110 + 16;
    uint64_t v134 = v231;
    uint64_t v135 = v218;
    goto LABEL_134;
  }
  uint64_t v136 = (v110 - (char *)v28) >> 4;
  unint64_t v137 = v136 + 1;
  uint64_t v134 = v231;
  if ((unint64_t)(v136 + 1) >> 60) {
    goto LABEL_218;
  }
  if ((v112 - (char *)v28) >> 3 > v137) {
    unint64_t v137 = (v112 - (char *)v28) >> 3;
  }
  if ((unint64_t)(v112 - (char *)v28) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v138 = v137;
  }
  if (v138)
  {
    if (v138 >> 60) {
      goto LABEL_219;
    }
    uint64_t v139 = (char *)operator new(16 * v138);
  }
  else
  {
    uint64_t v139 = 0;
  }
  int v140 = (uint64_t **)&v139[16 * v136];
  uint64_t v112 = &v139[16 * v138];
  *int v140 = v131;
  v140[1] = v132;
  uint64_t v133 = (char *)(v140 + 2);
  if (v110 == (char *)v28)
  {
    uint64_t v28 = (const llvm::APInt *)v110;
    uint64_t v135 = v218;
  }
  else
  {
    uint64_t v135 = v218;
    do
    {
      int v141 = (uint64_t *)*((void *)v110 - 2);
      v110 -= 16;
      int v142 = *((_DWORD *)v110 + 2);
      *(v140 - 2) = v141;
      v140 -= 2;
      *((_DWORD *)v140 + 2) = v142;
    }
    while (v110 != (char *)v28);
    if (!v28) {
      goto LABEL_133;
    }
  }
  operator delete(v28);
LABEL_133:
  uint64_t v28 = (const llvm::APInt *)v140;
LABEL_134:
  if (!v227)
  {
    uint64_t v143 = v133;
    goto LABEL_152;
  }
  if (v133 < v112)
  {
    *(void *)uint64_t v133 = v227;
    *((void *)v133 + 1) = v224;
    uint64_t v143 = v133 + 16;
    goto LABEL_152;
  }
  uint64_t v144 = (v133 - (char *)v28) >> 4;
  unint64_t v145 = v144 + 1;
  if ((unint64_t)(v144 + 1) >> 60) {
LABEL_218:
  }
    abort();
  if ((v112 - (char *)v28) >> 3 > v145) {
    unint64_t v145 = (v112 - (char *)v28) >> 3;
  }
  if ((unint64_t)(v112 - (char *)v28) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v145 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (!v145)
  {
    unsigned int v146 = 0;
    goto LABEL_147;
  }
  if (v145 >> 60) {
LABEL_219:
  }
    sub_1CB833614();
  unsigned int v146 = (char *)operator new(16 * v145);
LABEL_147:
  unint64_t v147 = (uint64_t **)&v146[16 * v144];
  *unint64_t v147 = v227;
  v147[1] = (uint64_t *)v224;
  uint64_t v143 = (char *)(v147 + 2);
  if (v133 == (char *)v28) {
    goto LABEL_150;
  }
  do
  {
    char v148 = (uint64_t *)*((void *)v133 - 2);
    v133 -= 16;
    int v149 = *((_DWORD *)v133 + 2);
    *(v147 - 2) = v148;
    v147 -= 2;
    *((_DWORD *)v147 + 2) = v149;
  }
  while (v133 != (char *)v28);
  if (v28) {
LABEL_150:
  }
    operator delete(v28);
  uint64_t v28 = (const llvm::APInt *)v147;
LABEL_152:
  uint64_t v151 = sub_1CD7F95FC((uint64_t)v6, 1, 0, 172, 0);
  __int16 v152 = 0;
  uint64_t v153 = *((void *)v6 + 104);
  if (v153) {
    __int16 v152 = *(_WORD *)(v153 + 8);
  }
  uint64_t v154 = sub_1CD7FF854(v6, (const char *)0x18A, v215, v151, v150, (uint64_t *)v28, (v143 - (char *)v28) >> 4, v152);
  unint64_t v156 = v135 & 0xFFFFFFFF00000000 | v155;
  unsigned int v157 = sub_1CD7EB364((uint64_t)v6, v205, v215, 1);
  uint64_t v232 = v158;
  char v159 = sub_1CD7EB364((uint64_t)v6, (v205 + 15) & 0x1FFFFFFF0, v215, 1);
  uint64_t v162 = sub_1CD409804(v6, (uint64_t)v154, v156, (uint64_t)v157, v232, (uint64_t)v159, v160, v161, (uint64_t)v154, 1, v215);
  uint64_t v30 = (uint64_t)v162;
  int v164 = v163;
  if (*(_DWORD *)(v134 + 2200)) {
    uint64_t v165 = (uint64_t)v162;
  }
  else {
    uint64_t v165 = (uint64_t)v154;
  }
  int v166 = *(unsigned __int8 **)(v134 + 88);
  uint64_t v235 = v166;
  if (v166) {
    llvm::MetadataTracking::track((uint64_t)&v235, v166, 2);
  }
  int v236 = *(_DWORD *)(v134 + 96);
  int v233 = v164;
  uint64_t v216 = v280;
  uint64_t v278 = v280;
  uint64_t v279 = 0x400000000;
  uint64_t v215 = (const llvm::APInt *)&v276;
  BOOL v274 = &v276;
  uint64_t v275 = 0x1000000000;
  llvm::CCState::CCState((uint64_t)&v264, v207, 0, *((void *)v6 + 5), (uint64_t)&v274, *((void *)v6 + 7));
  uint64_t v167 = sub_1CB920814(v207);
  llvm::CCState::AnalyzeCallResult((uint64_t)&v264, v134 + 2192, (uint64_t (*)(uint64_t, void, void, void, void, unint64_t, uint64_t))v167);
  uint64_t v169 = a3;
  if (v275)
  {
    uint64_t v172 = 0;
    uint64_t v173 = 12 * v275;
    uint64_t v174 = 1;
    uint64_t v219 = v173;
    do
    {
      uint64_t v175 = (char *)v274;
      uint64_t v176 = (char *)v274 + v172;
      if (*((unsigned char *)v274 + v172 + 8))
      {
        uint64_t v222 = v174;
        uint64_t v228 = v165;
        uint64_t v230 = v30;
        LOBYTE(v244[0]) = v176[9];
        uint64_t v181 = sub_1CB87E200((unsigned __int8 *)v244);
        if (v180 == 1) {
        uint64_t v182 = &v175[v172];
        }
        uint64_t v183 = *(void *)(v234 + 40);
        int FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(v183 + 56), ((unint64_t)(v181 + 7) >> 3), *(unsigned int *)&v175[v172 + 4], 1, 0);
        unsigned __int8 v185 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v212 + 32))(v212, *(void *)(**(void **)(v234 + 40) + 40) + 272, 0);
        uint64_t v186 = sub_1CD7ED208(v234, FixedObject, (llvm *)v185, 0, 0);
        int v187 = 0;
        uint64_t v188 = v176[9];
        int v189 = (v176[8] >> 2) - 1;
        uint64_t v191 = v190;
        uint64_t v192 = (uint64_t)v186;
        switch(v189)
        {
          case 0:
            int v187 = 2;
            break;
          case 1:
            int v187 = 3;
            break;
          case 2:
            int v187 = 1;
            break;
          case 6:
            int v187 = 0;
            uint64_t v188 = v175[v172 + 10];
            break;
          default:
            break;
        }
        uint64_t v193 = v188;
        uint64_t v194 = v182[10];
        FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v183 + 432), FixedObject);
        if (FixedStack) {
          int v197 = *((_DWORD *)FixedStack + 3);
        }
        else {
          int v197 = 0;
        }
        uint64_t v169 = a3;
        uint64_t v30 = v230;
        memset(v244, 0, sizeof(v244));
        *(void *)&long long v245 = (unint64_t)FixedStack | 4;
        *((void *)&v245 + 1) = 0;
        int v246 = v197;
        char v247 = 0;
        uint64_t v199 = sub_1CD7FAEE8(v234, v187, (uint64_t)&v235, v194, 0, v230, v233, v196, v192, v191, &v245, v193, 0, 0, 0, 0, v244);
        unint64_t v200 = *(unsigned int *)(a3 + 8);
        if (v200 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v173 = v219;
        unint64_t v178 = v198 | v224 & 0xFFFFFFFF00000000;
        uint64_t v179 = (void *)(*(void *)a3 + 16 * v200);
        *uint64_t v179 = v199;
        uint64_t v224 = v178;
        int v6 = (llvm::APFloatBase *)v234;
        uint64_t v165 = v228;
        uint64_t v174 = v222;
      }
      else
      {
        uint64_t v30 = (uint64_t)sub_1CD40AAE8(v6, v30, v233, (const llvm::APInt *)&v235, *((_DWORD *)v176 + 1), (llvm *)v176[9], 0, v168, v165, v174);
        unint64_t v177 = *(unsigned int *)(v169 + 8);
        if (v177 >= *(unsigned int *)(v169 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v178 = 0;
        uint64_t v179 = (void *)(*(void *)v169 + 16 * v177);
        *uint64_t v179 = v30;
        int v233 = 1;
        uint64_t v165 = v30;
        uint64_t v174 = 2;
      }
      v179[1] = v178;
      ++*(_DWORD *)(v169 + 8);
      v172 += 12;
    }
    while (v173 != v172);
  }
  uint64_t v31 = v272;
  if (v272 != &v273) {
LABEL_224:
  }
    free(v31);
  if (v270 != &v271) {
    free(v270);
  }
  if (v268 != &v269) {
    free(v268);
  }
  if (v266 != &v267) {
    free(v266);
  }
  if (v274 != v215) {
    free(v274);
  }
  if (v278 != v216) {
    free(v278);
  }
  if (v235)
  {
    int v170 = *v235;
    if ((v170 - 4) > 0x1E)
    {
      if ((v170 - 3) >= 0xFFFFFFFE) {
        uint64_t v201 = v235;
      }
      else {
        uint64_t v201 = 0;
      }
      if ((v170 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v202 = (unint64_t)(v201 + 8);
LABEL_215:
        *(void *)&long long v264 = &v235;
        sub_1CC5FA668(v202 + 16, &v264);
        goto LABEL_175;
      }
      if (v170 == 3) {
        *((void *)v235 + 1) = 0;
      }
    }
    else if ((v235[1] & 0x7F) == 2 || *((_DWORD *)v235 + 3))
    {
      uint64_t v203 = *((void *)v235 + 2);
      if ((v203 & 4) != 0)
      {
        unint64_t v202 = v203 & 0xFFFFFFFFFFFFFFF8;
        if (v202) {
          goto LABEL_215;
        }
      }
    }
  }
LABEL_175:
  if (v28) {
    operator delete(v28);
  }
  if (v248 != v250) {
    free(v248);
  }
  sub_1CD40B1BC(v243[0]);
  if (v259 != &v260) {
    free(v259);
  }
  if (v257 != &v258) {
    free(v257);
  }
  if (v255 != &v256) {
    free(v255);
  }
  if (v253 != &v254) {
    free(v253);
  }
  if (v261 != v263) {
    free(v261);
  }
  return v30;
}

uint64_t sub_1CB9F0D48(uint64_t a1, uint64_t a2, llvm::LLVMContext ***a3, uint64_t a4, int a5)
{
  uint64_t result = 0;
  switch(a5)
  {
    case 1282:
    case 1285:
    case 1286:
    case 1289:
    case 1290:
    case 1293:
    case 1294:
    case 1297:
    case 1298:
    case 1301:
    case 1302:
    case 1305:
    case 1306:
    case 1309:
    case 1310:
    case 1313:
    case 1314:
    case 1317:
    case 1318:
    case 1321:
    case 1322:
    case 1325:
    case 1326:
    case 1329:
    case 1330:
    case 1333:
    case 1334:
    case 1337:
    case 1338:
    case 1341:
    case 1342:
    case 1345:
    case 1346:
    case 1349:
    case 1350:
    case 1353:
    case 1354:
    case 1357:
    case 1358:
    case 1361:
    case 1362:
    case 1365:
    case 1366:
    case 1369:
    case 1370:
    case 1373:
    case 1374:
    case 1376:
    case 1378:
    case 1380:
    case 1382:
    case 1384:
    case 1386:
    case 1388:
    case 1390:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1401:
    case 1402:
    case 1405:
    case 1406:
    case 1409:
    case 1410:
    case 1413:
    case 1414:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1425:
    case 1426:
    case 1429:
    case 1430:
    case 1433:
    case 1434:
    case 1437:
    case 1438:
    case 1441:
    case 1442:
    case 1445:
    case 1446:
    case 1449:
    case 1450:
    case 1453:
    case 1454:
    case 1457:
    case 1458:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1469:
    case 1470:
    case 1473:
    case 1474:
    case 1476:
    case 1478:
    case 1480:
    case 1482:
    case 1484:
    case 1486:
    case 1488:
    case 1490:
    case 1493:
    case 1494:
    case 1497:
    case 1498:
    case 1501:
    case 1502:
    case 1505:
    case 1506:
    case 1509:
    case 1510:
    case 1513:
    case 1514:
    case 1517:
    case 1518:
    case 1521:
    case 1522:
    case 1525:
    case 1526:
    case 1529:
    case 1530:
    case 1532:
    case 1534:
    case 1536:
    case 1538:
    case 1540:
    case 1542:
    case 1544:
    case 1546:
    case 1548:
    case 1550:
    case 1552:
    case 1554:
    case 1557:
    case 1558:
    case 1561:
    case 1562:
    case 1565:
    case 1566:
    case 1569:
    case 1570:
    case 1573:
    case 1574:
    case 1576:
    case 1578:
    case 1580:
    case 1582:
    case 1585:
    case 1586:
    case 1589:
    case 1590:
    case 1593:
    case 1594:
    case 1596:
    case 1598:
    case 1600:
    case 1602:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1613:
    case 1614:
    case 1617:
    case 1618:
    case 1621:
    case 1622:
    case 1625:
    case 1626:
    case 1629:
    case 1630:
    case 1633:
    case 1634:
    case 1637:
    case 1638:
    case 1640:
    case 1642:
    case 1644:
    case 1646:
    case 1649:
    case 1650:
    case 1653:
    case 1654:
    case 1657:
    case 1658:
    case 1661:
    case 1662:
    case 1665:
    case 1666:
    case 1669:
    case 1670:
    case 1673:
    case 1674:
    case 1676:
    case 1678:
    case 1680:
      uint64_t v9 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v10 = (llvm::Type *)*a3;
      unint64_t v11 = (unint64_t)(sub_1CB83544C((uint64_t)v9, (uint64_t)*a3) + 7) >> 3;
      BOOL v13 = v12 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v9, v10, 1);
      unint64_t v16 = ((1 << Alignment) + 0x3FFFFFFFFLL + v11) & -(1 << Alignment);
      if (v13) {
      *(void *)(a2 + 8) = sub_1CB8E5DAC(**a3, 10, 0, v16 >> 2, 0);
      }
      *(void *)(a2 + 16) = v17;
      llvm::SampleInfo::SampleInfo((uint64_t)v99, a5, 1);
      uint64_t v18 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v19 = v18[4 * v102];
      unsigned int v20 = *((unsigned __int8 *)v19 + 16);
      if (v19) {
        BOOL v21 = v20 > 0x14;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21) {
        goto LABEL_49;
      }
      __int16 v22 = v18[4 * v102];
      if (v20 == 5)
      {
        __int16 v22 = v18[4 * v102];
        if (*((_WORD *)v19 + 9) != 48) {
          goto LABEL_26;
        }
        __int16 v22 = (llvm::LLVMContext **)v19[-4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)];
        if (!v22) {
          goto LABEL_49;
        }
        unsigned int v20 = *((unsigned __int8 *)v22 + 16);
      }
      if (v20 != 19) {
        goto LABEL_26;
      }
      goto LABEL_49;
    case 1283:
    case 1284:
    case 1287:
    case 1288:
    case 1291:
    case 1292:
    case 1295:
    case 1296:
    case 1299:
    case 1300:
    case 1303:
    case 1304:
    case 1307:
    case 1308:
    case 1311:
    case 1312:
    case 1315:
    case 1316:
    case 1319:
    case 1320:
    case 1323:
    case 1324:
    case 1327:
    case 1328:
    case 1331:
    case 1332:
    case 1335:
    case 1336:
    case 1339:
    case 1340:
    case 1343:
    case 1344:
    case 1347:
    case 1348:
    case 1351:
    case 1352:
    case 1355:
    case 1356:
    case 1359:
    case 1360:
    case 1363:
    case 1364:
    case 1367:
    case 1368:
    case 1371:
    case 1372:
    case 1375:
    case 1377:
    case 1379:
    case 1381:
    case 1383:
    case 1385:
    case 1387:
    case 1389:
    case 1391:
    case 1392:
    case 1395:
    case 1396:
    case 1399:
    case 1400:
    case 1403:
    case 1404:
    case 1407:
    case 1408:
    case 1411:
    case 1412:
    case 1415:
    case 1416:
    case 1419:
    case 1420:
    case 1423:
    case 1424:
    case 1427:
    case 1428:
    case 1431:
    case 1432:
    case 1435:
    case 1436:
    case 1439:
    case 1440:
    case 1443:
    case 1444:
    case 1447:
    case 1448:
    case 1451:
    case 1452:
    case 1455:
    case 1456:
    case 1459:
    case 1460:
    case 1463:
    case 1464:
    case 1467:
    case 1468:
    case 1471:
    case 1472:
    case 1475:
    case 1477:
    case 1479:
    case 1481:
    case 1483:
    case 1485:
    case 1487:
    case 1489:
    case 1491:
    case 1492:
    case 1495:
    case 1496:
    case 1499:
    case 1500:
    case 1503:
    case 1504:
    case 1507:
    case 1508:
    case 1511:
    case 1512:
    case 1515:
    case 1516:
    case 1519:
    case 1520:
    case 1523:
    case 1524:
    case 1527:
    case 1528:
    case 1531:
    case 1533:
    case 1535:
    case 1537:
    case 1539:
    case 1541:
    case 1543:
    case 1545:
    case 1547:
    case 1549:
    case 1551:
    case 1553:
    case 1555:
    case 1556:
    case 1559:
    case 1560:
    case 1563:
    case 1564:
    case 1567:
    case 1568:
    case 1571:
    case 1572:
    case 1575:
    case 1577:
    case 1579:
    case 1581:
    case 1583:
    case 1584:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1595:
    case 1597:
    case 1599:
    case 1601:
    case 1603:
    case 1604:
    case 1607:
    case 1608:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1619:
    case 1620:
    case 1623:
    case 1624:
    case 1627:
    case 1628:
    case 1631:
    case 1632:
    case 1635:
    case 1636:
    case 1639:
    case 1641:
    case 1643:
    case 1645:
    case 1647:
    case 1648:
    case 1651:
    case 1652:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1663:
    case 1664:
    case 1667:
    case 1668:
    case 1671:
    case 1672:
    case 1675:
    case 1677:
    case 1679:
    case 1681:
      uint64_t v23 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v24 = (llvm::Type *)*a3;
      unint64_t v25 = (unint64_t)(sub_1CB83544C((uint64_t)v23, (uint64_t)*a3) + 7) >> 3;
      BOOL v27 = v26 == 1;
      char v28 = llvm::DataLayout::getAlignment(v23, v24, 1);
      unint64_t v30 = ((1 << v28) + 0x1FFFFFFFFLL + v25) & -(1 << v28);
      if (v27) {
      *(void *)(a2 + 8) = sub_1CB8E5DAC(**a3, 9, 0, v30 >> 1, 0);
      }
      *(void *)(a2 + 16) = v31;
      llvm::SampleInfo::SampleInfo((uint64_t)v99, a5, 1);
      uint64_t v18 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v19 = v18[4 * v102];
      unsigned int v32 = *((unsigned __int8 *)v19 + 16);
      if (v19) {
        BOOL v33 = v32 > 0x14;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33) {
        goto LABEL_49;
      }
      __int16 v22 = v18[4 * v102];
      if (v32 != 5) {
        goto LABEL_24;
      }
      if (*((_WORD *)v19 + 9) != 48) {
        goto LABEL_48;
      }
      __int16 v22 = (llvm::LLVMContext **)v19[-4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)];
      if (!v22) {
        goto LABEL_49;
      }
      unsigned int v32 = *((unsigned __int8 *)v22 + 16);
LABEL_24:
      if (v32 == 19) {
        goto LABEL_49;
      }
      if (v32 != 16) {
        goto LABEL_48;
      }
LABEL_26:
      unsigned int v34 = *((_DWORD *)v22 + 8);
      if (v34 > 0x40)
      {
        if ((*(void *)v22[3] & 0x8000000000000000) == 0) {
          goto LABEL_49;
        }
      }
      else if ((((uint64_t)((void)v22[3] << -(char)v34) >> -(char)v34) & 0x8000000000000000) == 0)
      {
        goto LABEL_49;
      }
LABEL_48:
      uint64_t v19 = v18[4 * v101];
LABEL_49:
      *(void *)(a2 + 24) = (unint64_t)v19 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      __int16 v61 = sub_1CB9F2AE0((uint64_t)a3);
      *(_WORD *)(a2 + 50) = v61 | 1;
      if (v100 == -1) {
        return 1;
      }
      int v62 = (&a3[4 * v100])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v63 = v62 + 3;
      if (*((_DWORD *)v62 + 8) >= 0x41u) {
        uint64_t v63 = (void *)*v63;
      }
      if ((*(unsigned char *)v63 & 0x20) == 0) {
        return 1;
      }
      __int16 v64 = v61 | 0x41;
      goto LABEL_78;
    case 1682:
    case 1683:
    case 1686:
    case 1687:
    case 1691:
    case 1692:
    case 1693:
    case 1696:
    case 1697:
    case 1701:
    case 1702:
    case 1703:
    case 1706:
    case 1707:
    case 1711:
    case 1712:
    case 1713:
    case 1716:
    case 1717:
    case 1721:
    case 1722:
    case 1723:
    case 1726:
    case 1727:
    case 1731:
    case 1732:
    case 1733:
    case 1736:
    case 1737:
    case 1741:
    case 1742:
    case 1743:
    case 1746:
    case 1747:
    case 1751:
    case 1752:
    case 1753:
    case 1756:
    case 1757:
    case 1761:
    case 1762:
    case 1763:
    case 1766:
    case 1767:
    case 1771:
    case 1772:
    case 1773:
    case 1776:
    case 1777:
    case 1781:
    case 1782:
    case 1783:
    case 1786:
    case 1787:
    case 1791:
    case 1792:
    case 1793:
    case 1796:
    case 1797:
    case 1801:
    case 1802:
    case 1803:
    case 1806:
    case 1807:
    case 1811:
    case 1812:
    case 1813:
    case 1816:
    case 1817:
    case 1821:
      uint64_t v46 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      __int16 v47 = *(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      unint64_t v48 = (unint64_t)(sub_1CB83544C((uint64_t)v46, (uint64_t)v47) + 7) >> 3;
      BOOL v50 = v49 == 1;
      char v51 = llvm::DataLayout::getAlignment(v46, v47, 1);
      unint64_t v53 = ((1 << v51) + 0x3FFFFFFFFLL + v48) & -(1 << v51);
      if (v50) {
      unint64_t v43 = v53 >> 2;
      }
      unint64_t v44 = **a3;
      uint64_t v45 = 10;
      goto LABEL_35;
    case 1684:
    case 1685:
    case 1688:
    case 1689:
    case 1690:
    case 1694:
    case 1695:
    case 1698:
    case 1699:
    case 1700:
    case 1704:
    case 1705:
    case 1708:
    case 1709:
    case 1710:
    case 1714:
    case 1715:
    case 1718:
    case 1719:
    case 1720:
    case 1724:
    case 1725:
    case 1728:
    case 1729:
    case 1730:
    case 1734:
    case 1735:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
    case 1749:
    case 1750:
    case 1754:
    case 1755:
    case 1758:
    case 1759:
    case 1760:
    case 1764:
    case 1765:
    case 1768:
    case 1769:
    case 1770:
    case 1774:
    case 1775:
    case 1778:
    case 1779:
    case 1780:
    case 1784:
    case 1785:
    case 1788:
    case 1789:
    case 1790:
    case 1794:
    case 1795:
    case 1798:
    case 1799:
    case 1800:
    case 1804:
    case 1805:
    case 1808:
    case 1809:
    case 1810:
    case 1814:
    case 1815:
    case 1818:
    case 1819:
    case 1820:
      uint64_t v35 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v36 = *(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      unint64_t v37 = (unint64_t)(sub_1CB83544C((uint64_t)v35, (uint64_t)v36) + 7) >> 3;
      BOOL v39 = v38 == 1;
      char v40 = llvm::DataLayout::getAlignment(v35, v36, 1);
      unint64_t v42 = ((1 << v40) + 0x1FFFFFFFFLL + v37) & -(1 << v40);
      if (v39) {
      unint64_t v43 = v42 >> 1;
      }
      unint64_t v44 = **a3;
      uint64_t v45 = 9;
LABEL_35:
      *(void *)(a2 + 8) = sub_1CB8E5DAC(v44, v45, 0, v43, 0);
      *(void *)(a2 + 16) = v54;
      llvm::SampleInfo::SampleInfo((uint64_t)v99, a5, 1);
      unsigned int v55 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v56 = v55[4 * v102];
      unsigned int v57 = *((unsigned __int8 *)v56 + 16);
      if (v56) {
        BOOL v58 = v57 > 0x14;
      }
      else {
        BOOL v58 = 1;
      }
      if (v58) {
        goto LABEL_77;
      }
      uint64_t v59 = v55[4 * v102];
      if (v57 != 5) {
        goto LABEL_43;
      }
      uint64_t v59 = v55[4 * v102];
      if (*((_WORD *)v56 + 9) == 48)
      {
        uint64_t v59 = (llvm::LLVMContext **)v56[-4 * (*((_DWORD *)v56 + 5) & 0x7FFFFFF)];
        if (!v59) {
          goto LABEL_77;
        }
        unsigned int v57 = *((unsigned __int8 *)v59 + 16);
LABEL_43:
        if (v57 == 19) {
          goto LABEL_77;
        }
      }
      unsigned int v60 = *((_DWORD *)v59 + 8);
      if (v60 > 0x40)
      {
        if ((*(void *)v59[3] & 0x8000000000000000) == 0) {
          goto LABEL_77;
        }
      }
      else if ((((uint64_t)((void)v59[3] << -(char)v60) >> -(char)v60) & 0x8000000000000000) == 0)
      {
        goto LABEL_77;
      }
      uint64_t v56 = v55[4 * v101];
LABEL_77:
      *(void *)(a2 + 24) = (unint64_t)v56 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      __int16 v64 = sub_1CB9F2AE0((uint64_t)a3) | 2;
LABEL_78:
      *(_WORD *)(a2 + 50) = v64;
      return 1;
    case 2142:
    case 2144:
      if (a5 == 2142)
      {
        __int16 v90 = 1;
        uint64_t v91 = 2;
        int v92 = (llvm::EVT **)a3;
      }
      else
      {
        int v92 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
        __int16 v90 = 2;
        uint64_t v91 = 3;
      }
      __int16 v93 = *v92;
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a2 + 8) = llvm::EVT::getEVT(v93, 0, (BOOL)a3);
      *(void *)(a2 + 16) = v94;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = v90;
      unint64_t v95 = (&a3[4 * v91])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (v95) {
        BOOL v96 = *((unsigned __int8 *)v95 + 16) > 0x14u;
      }
      else {
        BOOL v96 = 1;
      }
      if (!v96)
      {
        unsigned int v97 = *((_DWORD *)v95 + 8);
        if (!(v97 > 0x40 ? *(void *)v95[3] : (uint64_t)((void)v95[3] << -(char)v97) >> -(char)v97)) {
          return 1;
        }
      }
      __int16 v64 = v90 | 4;
      goto LABEL_78;
    case 2376:
    case 2377:
    case 2378:
    case 2379:
    case 2380:
    case 2381:
    case 2382:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2387:
    case 2388:
    case 2389:
    case 2390:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2395:
    case 2396:
    case 2397:
    case 2398:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2406:
    case 2407:
      uint64_t v69 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v70 = *v69 + 3;
      if (*((_DWORD *)*v69 + 8) >= 0x41u) {
        uint64_t v70 = (void *)*v70;
      }
      uint64_t v71 = 8;
      int v72 = 1 << (*(_DWORD *)v70 & 0xF);
      if ((v72 & 0xF531) == 0)
      {
        if ((v72 & 0xCA) != 0) {
          uint64_t v71 = 16;
        }
        else {
          uint64_t v71 = 32;
        }
      }
      uint64_t v73 = v69[4];
      uint64_t v74 = v73 + 3;
      if (*((_DWORD *)v73 + 8) >= 0x41u) {
        uint64_t v74 = (void *)*v74;
      }
      int v75 = *(_DWORD *)v74;
      if ((v75 & 2) != 0) {
        unsigned int v76 = 2;
      }
      else {
        unsigned int v76 = 1;
      }
      if ((v75 & 0xC) != 0) {
        uint64_t v77 = 4;
      }
      else {
        uint64_t v77 = v76;
      }
      uint64_t v78 = (llvm::FixedVectorType *)llvm::IntegerType::get(**a3, (llvm::LLVMContext *)v71);
      if (v77 >= 2) {
        llvm::FixedVectorType::get(v78, (llvm::Type *)v77);
      }
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 8] & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a2 + 8) = llvm::EVT::getEVT(v78, 0, v79);
      *(void *)(a2 + 16) = v80;
      *(_DWORD *)(a2 + 32) = 0;
      int v81 = 65794;
      goto LABEL_92;
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
      int v65 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v66 = *v65 + 3;
      if (*((_DWORD *)*v65 + 8) >= 0x41u) {
        uint64_t v66 = (void *)*v66;
      }
      uint64_t v67 = 8;
      int v68 = 1 << (*(_DWORD *)v66 & 0xF);
      if ((v68 & 0xF531) == 0)
      {
        if ((v68 & 0xCA) != 0) {
          uint64_t v67 = 16;
        }
        else {
          uint64_t v67 = 32;
        }
      }
      int v82 = v65[4];
      uint64_t v83 = v82 + 3;
      if (*((_DWORD *)v82 + 8) >= 0x41u) {
        uint64_t v83 = (void *)*v83;
      }
      int v84 = *(_DWORD *)v83;
      if ((v84 & 2) != 0) {
        unsigned int v85 = 2;
      }
      else {
        unsigned int v85 = 1;
      }
      if ((v84 & 0xC) != 0) {
        uint64_t v86 = 4;
      }
      else {
        uint64_t v86 = v85;
      }
      uint64_t v87 = (llvm::FixedVectorType *)llvm::IntegerType::get(**a3, (llvm::LLVMContext *)v67);
      if (v86 >= 2) {
        llvm::FixedVectorType::get(v87, (llvm::Type *)v86);
      }
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 12] & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a2 + 8) = llvm::EVT::getEVT(v87, 0, v88);
      *(void *)(a2 + 16) = v89;
      *(_DWORD *)(a2 + 32) = 0;
      int v81 = 131330;
LABEL_92:
      *(_DWORD *)(a2 + 48) = v81;
      return 1;
    default:
      return result;
  }
}

uint64_t sub_1CB9F2AE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1 || !*(_DWORD *)(v1 + 8) || (uint64_t v2 = *(void *)(v1 + 40)) == 0 || (v3 = *(_DWORD *)(v2 + 40)) == 0) {
LABEL_24:
  }
    llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>();
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = v4;
    int v21 = v3;
    int v19 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v5 = &unk_1EBCBE000;
    int v3 = v21;
    uint64_t v4 = v22;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v20;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v5 = (void *)&unk_1EBCBE000;
      int v3 = v21;
      uint64_t v4 = v22;
    }
  }
  uint64_t v6 = v5[176];
  uint64_t v7 = __ROR8__(v6 ^ 0xA998C8AA3BC31F8DLL, 30);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((v6 + 0x35F7FFDAEA461458) ^ ((0x9DDFEA08EB382D69
                                      * ((v7 - 0x7CB6A14CA0FD4217) ^ (v6 + 0x35F7FFDAEA461458))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v7 - 0x7CB6A14CA0FD4217) ^ (v6 + 0x35F7FFDAEA461458))));
  unsigned int v9 = -348639895 * ((v8 >> 47) ^ v8);
  int v10 = v3 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v10;
    BOOL v13 = (uint64_t *)(v4 + 24 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      if ("globally-coherent" == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    if (v14 != -2) {
      break;
    }
    if ("globally-coherent" == (char *)-2) {
      goto LABEL_23;
    }
LABEL_9:
    if (v14 == -1) {
      goto LABEL_24;
    }
    unsigned int v9 = i + v12;
  }
  if (v13[1] != 17) {
    goto LABEL_9;
  }
  BOOL v15 = *(void *)v14 == 0x796C6C61626F6C67 && *(void *)(v14 + 8) == 0x6E657265686F632DLL;
  if (!v15 || *(unsigned char *)(v14 + 16) != 116) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v17 = v13[2];
  if (!v17) {
    goto LABEL_24;
  }
  return (v17 != 0) << 7;
}

uint64_t sub_1CB9F2CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void **)(v5 + 40);
  uint64_t v59 = a1 + 184296;
  (*(void (**)(void))(**(void **)(a1 + 184296) + 176))(*(void *)(a1 + 184296));
  uint64_t v7 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v8 = *((void *)v7 + 2);
  if ((v8 & 0x8000002) != 0)
  {
    uint64_t v58 = v3;
    int v9 = *(_DWORD *)(a2 + 40);
    int v10 = *v7;
    unsigned int v11 = sub_1CBC7A3F8(v10, 0x16u);
    unsigned int v57 = sub_1CBC7A3F8(v10, 0x23u);
    unsigned int v12 = sub_1CBC7A3F8(v10, 0x24u);
    int v13 = sub_1CBC7A3F8(v10, 0x34u);
    unsigned int v14 = v9 - 1;
    if (v9 - 1 > v12)
    {
      int v15 = 0;
      uint64_t v16 = *(void *)(*(void *)(a2 + 32) + 32 * v11 + 16);
      uint64_t v17 = v16 & 0xF;
      unint64_t v18 = v17 - 3;
      int v19 = v12 - v13;
      do
      {
        unint64_t v20 = (unsigned int *)(*(void *)(a2 + 32) + 32 * (v12 + v15));
        unsigned int v21 = *v20;
        if (!*v20)
        {
          int v22 = v20[1];
          uint64_t v23 = v6[3];
          uint64_t v24 = (__int16 ***)(*(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (!v15)
          {
            if (v17 == 1 && v24 == (__int16 ***)&off_1E66AB358)
            {
LABEL_25:
              unsigned int v26 = v21 & 0xFFF000FF | 0x2600;
LABEL_26:
              *unint64_t v20 = v26;
              goto LABEL_27;
            }
            if (v18 <= 1 && v24 == (__int16 ***)&off_1E66AB0F0) {
              goto LABEL_31;
            }
            if (v17 == 6)
            {
              if (((v7[10] & 0x80) != 0 || (v16 & 0x40000) != 0) && v24 == (__int16 ***)&off_1E66AB0F0)
              {
LABEL_31:
                unsigned int v26 = v21 & 0xFFF000FF | 0x2C00;
                goto LABEL_26;
              }
            }
            else if (v17 == 7 && v24 == (__int16 ***)&off_1E66AB1D0)
            {
              unsigned int v26 = v21 & 0xFFF000FF | 0x3600;
              goto LABEL_26;
            }
          }
          if (!(v19 + v15) && (v16 & 0x10) != 0 && (v16 & 0x400) != 0 && v24 == (__int16 ***)&off_1E66AB358) {
            goto LABEL_25;
          }
          if ((v8 & 2) == 0) {
            goto LABEL_27;
          }
          BOOL v25 = *(unsigned char *)(*(void *)v59 + 323) || (v16 & 0x1000000) == 0;
          if (!v25) {
            goto LABEL_27;
          }
          if (v24 == &off_1E66AB048)
          {
            unint64_t v27 = *(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            char v28 = v6;
            unsigned int v29 = (__int16 ***)&off_1E66A9B18;
LABEL_43:
            uint64_t v56 = v17;
            unint64_t v30 = v18;
            sub_1CC38D61C(v28, v22, v27, (uint64_t)v29, 0);
            unint64_t v18 = v30;
            uint64_t v17 = v56;
            goto LABEL_27;
          }
          if (v24 == (__int16 ***)&off_1E66AB0B8)
          {
            unint64_t v27 = *(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            char v28 = v6;
            unsigned int v29 = &off_1E66AB080;
            goto LABEL_43;
          }
          if (v24 == (__int16 ***)&off_1E66AB128)
          {
            unint64_t v27 = *(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            char v28 = v6;
            unsigned int v29 = (__int16 ***)&off_1E66A9D38;
            goto LABEL_43;
          }
          unint64_t v55 = v18;
          if (v24 == (__int16 ***)&off_1E66AB320)
          {
            unint64_t v31 = *(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v32 = v6;
            BOOL v33 = &off_1E66AB358;
          }
          else
          {
            if (v24 != (__int16 ***)&off_1E66AB160)
            {
              if (v24 == (__int16 ***)&off_1E66AB010)
              {
                sub_1CC38D61C(v6, v22, *(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E66AB0F0, 0);
                unint64_t v18 = v55;
              }
              goto LABEL_27;
            }
            unint64_t v31 = *(void *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v32 = v6;
            BOOL v33 = &off_1E66A9F70;
          }
          sub_1CC38D61C(v32, v22, v31, (uint64_t)v33, 0);
          unint64_t v18 = v55;
        }
LABEL_27:
        v15 += 2;
      }
      while (v12 + v15 < v14);
    }
    uint64_t v3 = v58;
    if ((v8 & 2) != 0 && sub_1CB9551C4((void *)a2))
    {
      int v34 = **(unsigned __int16 **)(a2 + 16);
      unsigned int v35 = sub_1CBC7A3F8(v34, 0x39u);
      int v36 = sub_1CBC7A3F8(v34, 0x53u);
      uint64_t v37 = v36 >= 0 ? v36 : v35;
      uint64_t v38 = *(void *)(a2 + 32);
      uint64_t v39 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
      if (!sub_1CB9FABA0(v38 + 32 * v37, v39)) {
        goto LABEL_90;
      }
      if ((v35 & 0x80000000) == 0 && !sub_1CB9FABA0(v38 + 32 * v35, v39))
      {
        uint64_t v40 = *(void *)(a2 + 48);
        if ((v40 & 7) != 0)
        {
          long long v41 = *(void **)((v40 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          long long v41 = (void *)(v40 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(a2 + 48) = v41;
        }
        uint64_t v47 = *(void *)((*v41 & ((uint64_t)(*v41 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
        int v49 = (unsigned __int8 *)(v47 + 16);
        unsigned int v48 = *(unsigned __int8 *)(v47 + 16);
        if (!v47 || v48 < 0x1C) {
          goto LABEL_90;
        }
        while (1)
        {
          if (*(void *)(v47 + 48) || (*(unsigned char *)(v47 + 23) & 0x20) != 0)
          {
            if (llvm::Instruction::getMetadataImpl((uint64_t ***)v47, "agx.uniform", 0xBuLL)) {
              return v3;
            }
            unsigned int v48 = *v49;
          }
          if (v48 - 66 > 0xC) {
            break;
          }
          int v51 = *(_DWORD *)(v47 + 20);
          if ((v51 & 0x40000000) != 0) {
            uint64_t v52 = *(uint64_t **)(v47 - 8);
          }
          else {
            uint64_t v52 = (uint64_t *)(v47 - 32 * (v51 & 0x7FFFFFF));
          }
          uint64_t v47 = *v52;
          BOOL v25 = *v52 == 0;
          int v49 = (unsigned __int8 *)(*v52 + 16);
          unsigned int v48 = *v49;
          if (v25 || v48 <= 0x1B) {
            goto LABEL_90;
          }
        }
        if ((sub_1CB9F9158(v47) & 1) == 0) {
LABEL_90:
        }
          *(_DWORD *)(*(void *)(a2 + 32) + 32 * v57) |= 0x40000000u;
      }
    }
  }
  else
  {
    int v42 = *v7;
    if ((v8 & 0x10000000) != 0)
    {
      unsigned int v43 = sub_1CBC7A3F8(v42, 0x24u);
      if (v43 != -1)
      {
        uint64_t v44 = *(void *)(a2 + 32);
        if (!*(unsigned char *)(v44 + 32 * v43))
        {
          int v45 = *(_DWORD *)(v44 + 32 * v43 + 4);
          if ((__int16 ***)(*(void *)(v6[3] + 16 * (v45 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66AB048) {
            sub_1CC38D61C(v6, v45, (uint64_t)&off_1E66AB048, (uint64_t)&off_1E66A9B18, 0);
          }
        }
      }
    }
    else
    {
      if ((v42 & 0xFFFE) == 0x166)
      {
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v60 = 0x4203000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)a2, *(llvm::MachineFunction **)(*(void *)(a2 + 24) + 32), (const llvm::MachineOperand *)&v60);
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v60 = 0x4202000000;
      }
      else
      {
        if (*(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(v5 + 8) + 16))(*(void *)(v5 + 8), *(void *)v5)+ 381))int v46 = 2; {
        else
        }
          int v46 = 66;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        LODWORD(v60) = 0x2000000;
        HIDWORD(v60) = v46;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)a2, *(llvm::MachineFunction **)(*(void *)(a2 + 24) + 32), (const llvm::MachineOperand *)&v60);
    }
  }
  return v3;
}

uint64_t sub_1CB9F3338(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, unsigned char *a7)
{
  v19[0] = a2;
  v19[1] = a3;
  char v9 = a4 - 10;
  if ((a4 - 10) > 0x3E
    || ((v11 = ((1 << v9) & 0x7880000000000001) == 0, uint64_t v10 = (1 << v9) & 0x740000000000000, v11)
      ? (BOOL v11 = v10 == 0)
      : (BOOL v11 = 1),
        v11))
  {
    if ((_BYTE)a2) {
      unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v19);
    }
    else {
      unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v19);
    }
    if (v13 == 1)
    {
      unint64_t v17 = ExtendedSizeInBits;
      unint64_t ExtendedSizeInBits = v17;
    }
    if (ExtendedSizeInBits <= 0x40 && a5) {
      goto LABEL_20;
    }
    unsigned int v14 = LOBYTE(v19[0])
        ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)v19)
        : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v19);
    if (v15 == 1)
    {
      unint64_t v18 = v14;
      unsigned int v14 = v18;
    }
    if ((unint64_t)v14 <= 0x20)
    {
LABEL_20:
      if (a7)
      {
LABEL_21:
        uint64_t result = 1;
        *a7 = 1;
        return result;
      }
      return 1;
    }
  }
  if ((a5 & 0xFE) != 0)
  {
    if (a7) {
      goto LABEL_21;
    }
    return 1;
  }
  return 0;
}

void sub_1CB9F3460(uint64_t a1, uint64_t a2, unint64_t a3, const llvm::APInt *a4, uint64_t a5)
{
  uint64_t v7 = a2;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v32 = HIDWORD(a3);
  int v33 = a3;
  uint64_t v9 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v10 = *(llvm **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  LODWORD(v9) = *(unsigned __int16 *)(a2 + 24);
  BOOL v12 = v9 > 0x26;
  uint64_t v13 = (1 << v9) & 0x6000006000;
  if (v12 || v13 == 0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a2;
  }
  unint64_t v17 = sub_1CD7EBF14(a5, 0, a4, v10, v11, 0, 0);
  unint64_t v19 = v18;
  int v34 = 0;
  if (!v15)
  {
    unsigned int v20 = 0;
    unsigned int v21 = *(unsigned __int16 *)(v7 + 24);
    uint64_t v15 = v7;
    do
    {
      if (v21 != 56)
      {
        unint64_t v17 = sub_1CD7EBF14(a5, 0, a4, (llvm *)5, 0, 0, 0);
        uint64_t v15 = 0;
        unint64_t v19 = v19 & 0xFFFFFFFF00000000 | v31;
        goto LABEL_23;
      }
      if (v20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v35 = *(_OWORD *)(*(void *)(v15 + 32) + 40);
      unsigned int v20 = ++v34;
      int v22 = *(_DWORD **)(v15 + 32);
      uint64_t v15 = *(void *)v22;
      unsigned int v21 = *(unsigned __int16 *)(*(void *)v22 + 24);
    }
    while (v21 > 0x26 || ((1 << v21) & 0x6000006000) == 0);
    int v24 = v22[2];
    if (!v20)
    {
      uint64_t v7 = *(void *)v22;
      goto LABEL_24;
    }
    int v33 = v22[2];
    BOOL v25 = (uint64_t *)&v35;
    unsigned int v26 = (uint64_t *)(&v35 + v20);
    do
    {
      uint64_t v27 = *(void *)(a5 + 832);
      if (v27) {
        LOWORD(v27) = *(_WORD *)(v27 + 8);
      }
      uint64_t v28 = *v25;
      uint64_t v29 = v25[1];
      v25 += 2;
      unint64_t v17 = sub_1CCFDED5C(a5, 56, a4, v10, v11, (uint64_t)v17, v19, v16, v28, v29, v27);
      unint64_t v19 = v19 & 0xFFFFFFFF00000000 | v30;
    }
    while (v25 != v26);
    uint64_t v7 = v15;
  }
LABEL_23:
  int v24 = v33;
LABEL_24:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v24;
  *(_DWORD *)(a1 + 20) = v32;
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 32) = v19;
}

uint64_t sub_1CB9F36B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t **a6)
{
  uint64_t v348 = *MEMORY[0x1E4F143B8];
  int v12 = *(unsigned __int16 *)(a1 + 24);
  if (v12 == 254) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12 == 253) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v332 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v332, v15, 2);
  }
  int v333 = *(_DWORD *)(a1 + 60);
  unsigned int v16 = sub_1CD1117B0(*(llvm::GlobalValue **)(a2 + 80), *(void *)(a2 + 88), *(void *)(a6[2][5] + 344), 0);
  unint64_t v17 = sub_1CD7EBF14((uint64_t)a6[2], v16, (const llvm::APInt *)&v332, (llvm *)4, 0, 0, 0);
  uint64_t v19 = v18;
  uint64_t v20 = sub_1CD7EB67C((uint64_t)a6[2], a3, a4, (uint64_t)&v332, 4, 0);
  uint64_t v23 = (uint64_t)a6[2];
  uint64_t v24 = *(void *)(v23 + 832);
  if (v24) {
    LOWORD(v24) = *(_WORD *)(v24 + 8);
  }
  uint64_t v29 = sub_1CCFDED5C(v23, 56, (const llvm::APInt *)&v332, (llvm *)4, 0, (uint64_t)v17, v19, v22, v20, v21, v24);
  unint64_t v31 = v19 & 0xFFFFFFFF00000000 | v30;
  if (v13)
  {
    uint64_t v32 = *(void *)(*(void *)(*(void *)(v13 + 32) + 40) + 40)
        + 16 * *(unsigned int *)(*(void *)(v13 + 32) + 48);
    int v34 = *(llvm **)v32;
    uint64_t v33 = *(void *)(v32 + 8);
    unint64_t v330 = v34;
    uint64_t v331 = v33;
    if (!v14)
    {
      BOOL v35 = 1;
      goto LABEL_26;
    }
    BOOL v35 = 0;
  }
  else
  {
    uint64_t v36 = *(void *)(v14 + 40);
    int v34 = *(llvm **)v36;
    uint64_t v33 = *(void *)(v36 + 8);
    unint64_t v330 = v34;
    uint64_t v331 = v33;
    BOOL v35 = v14 == 0;
  }
  LODWORD(v34) = v34;
  if ((_BYTE)v34)
  {
    if (v34 - 15 >= 0x9C)
    {
LABEL_27:
      if (v34)
      {
        if ((v34 - 15) <= 0x9B)
        {
          char EVT = sub_1CB8C2FBC((unsigned __int8 *)&v330);
LABEL_65:
          LOBYTE(v334) = EVT;
          BOOL v320 = v35;
          if ((_BYTE)v330) {
            unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v330);
          }
          else {
            unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v330);
          }
          unsigned int v326 = ExtendedSizeInBits;
          if (v82 == 1) {
          __int16 v337 = v339;
          }
          uint64_t v338 = 0x400000000;
          if (!v326)
          {
LABEL_71:
            uint64_t v83 = a6[2];
            if (v320)
            {
              uint64_t v84 = v83[104];
              if (v84) {
                uint64_t v85 = *(unsigned __int16 *)(v84 + 8);
              }
              else {
                uint64_t v85 = 0;
              }
              uint64_t v211 = sub_1CD7FF4E8(v83, (const char *)2, (const llvm::APInt *)&v332, (llvm *)1, 0, (uint64_t *)v337, v338, v85);
              uint64_t v212 = *a6;
              __int16 v344 = (unsigned __int8 **)v211;
              uint64_t v345 = v213;
              uint64_t v214 = v212;
              uint64_t v215 = v13;
              int v216 = 1;
            }
            else
            {
              uint64_t v199 = v83[104];
              if (v199) {
                uint64_t v200 = *(unsigned __int16 *)(v199 + 8);
              }
              else {
                uint64_t v200 = 0;
              }
              uint64_t v217 = sub_1CD7FF4E8(v83, (const char *)0x92, (const llvm::APInt *)&v332, v330, v331, (uint64_t *)v337, v338, v200);
              uint64_t v218 = *(uint64_t **)(v14 + 32);
              uint64_t v219 = *v218;
              uint64_t v220 = v218[1];
              uint64_t v221 = *a6;
              __int16 v344 = (unsigned __int8 **)v217;
              LODWORD(v345) = v222;
              uint64_t v346 = v219;
              int v347 = v220;
              uint64_t v214 = v221;
              uint64_t v215 = v14;
              int v216 = 2;
            }
            uint64_t v223 = sub_1CCEF083C(v214, v215, (uint64_t *)&v344, v216, 1);
            uint64_t v224 = v337;
            if (v337 == v339) {
              goto LABEL_217;
            }
LABEL_199:
            free(v224);
            goto LABEL_217;
          }
          unsigned int v86 = 0;
          unsigned int v87 = v16 >> 1;
          unsigned int v88 = 0;
          char v325 = v87;
          unsigned int v319 = a5;
          uint64_t v327 = v13;
          uint64_t v318 = v14;
          while (1)
          {
            if (v320)
            {
              if (v334 == 6)
              {
                uint64_t v89 = sub_1CB9FB180((uint64_t)a6, v13, (uint64_t)v29, v31);
                unsigned int v91 = v90;
              }
              else
              {
                uint64_t v324 = (uint64_t)v29;
                unsigned int v112 = v326 - v86;
                if (v325) {
                  int v113 = 16;
                }
                else {
                  int v113 = 32;
                }
                if (v112 >= 0x10) {
                  unsigned int v88 = v113;
                }
                else {
                  unsigned int v88 = 16;
                }
                if (v112 >= 0x20) {
                  unsigned int v114 = 32;
                }
                else {
                  unsigned int v114 = v326 - v86;
                }
                unsigned int v116 = sub_1CB87E200((unsigned __int8 *)&v334);
                if (v115 == 1) {
                int v117 = v88 / v116;
                }
                __int16 v344 = (unsigned __int8 **)&v346;
                uint64_t v345 = 0x400000000;
                unsigned int v322 = v88;
                if (v88 / v116 == 1)
                {
                  uint64_t v118 = (uint64_t)a6[2];
                  unint64_t v119 = (llvm *)v334;
                  uint64_t v120 = *(void *)(v13 + 32);
                  uint64_t v121 = *(void *)(v120 + 40);
                  uint64_t v122 = *(void *)(v120 + 48);
                  __int16 v123 = sub_1CD7EBF14(v118, v86 / v116, (const llvm::APInt *)&v332, (llvm *)6, 0, 0, 0);
                  __int16 v126 = 0;
                  uint64_t v127 = *(void *)(v118 + 832);
                  uint64_t v29 = (uint64_t *)v324;
                  if (v127) {
                    __int16 v126 = *(_WORD *)(v127 + 8);
                  }
                  uint64_t v129 = sub_1CCFDED5C(v118, 148, (const llvm::APInt *)&v332, v119, 0, v121, v122, v125, (uint64_t)v123, v124, v126);
                  __int16 v131 = 0;
                  uint64_t v132 = a6[2];
                  uint64_t v13 = v327;
                  uint64_t v133 = *(uint64_t **)(v327 + 32);
                  uint64_t v134 = *v133;
                  uint64_t v135 = v133[1];
                  uint64_t v136 = v132[104];
                  if (v136) {
                    __int16 v131 = *(_WORD *)(v136 + 8);
                  }
                  v86 += v116;
                  a5 = (const char *)v319;
                  uint64_t v89 = sub_1CD7F5D38(v132, (const char *)v319, (const llvm::APInt *)&v332, (llvm *)1, 0, (uint64_t)v129, v128, v130, v324, v31, v134, v135, SHIDWORD(v135), v131);
                  unsigned int v91 = v137;
                  unsigned int v88 = v322;
                }
                else
                {
                  unint64_t v340 = &v342;
                  uint64_t v341 = 0x400000000;
                  if (v88 >= v116)
                  {
                    unint64_t v317 = v31;
                    unsigned int v163 = 0;
                    unsigned int v164 = v114 / v116;
                    do
                    {
                      uint64_t v165 = (uint64_t)a6[2];
                      int v166 = (llvm *)v334;
                      if (v163 >= v164)
                      {
                        uint64_t v175 = sub_1CD3DD4D8((uint64_t)a6[2], (llvm *)v334, 0);
                        unsigned int v177 = v178;
                      }
                      else
                      {
                        uint64_t v167 = *(void *)(v13 + 32);
                        uint64_t v169 = *(void *)(v167 + 40);
                        uint64_t v168 = *(void *)(v167 + 48);
                        int v170 = sub_1CD7EBF14((uint64_t)a6[2], v86 / v116, (const llvm::APInt *)&v332, (llvm *)6, 0, 0, 0);
                        __int16 v173 = 0;
                        uint64_t v174 = *(void *)(v165 + 832);
                        if (v174) {
                          __int16 v173 = *(_WORD *)(v174 + 8);
                        }
                        uint64_t v175 = sub_1CCFDED5C(v165, 148, (const llvm::APInt *)&v332, v166, 0, v169, v168, v172, (uint64_t)v170, v171, v173);
                        unsigned int v177 = v176;
                        unsigned int v88 = v322;
                      }
                      if (v341 >= (unint64_t)HIDWORD(v341)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v86 += v116;
                      uint64_t v179 = (uint64_t **)((char *)v340 + 16 * v341);
                      *uint64_t v179 = v175;
                      v179[1] = (uint64_t *)v177;
                      int v145 = v341 + 1;
                      LODWORD(v341) = v341 + 1;
                      ++v163;
                      uint64_t v13 = v327;
                    }
                    while (v117 != v163);
                    uint64_t v14 = v318;
                    unint64_t v31 = v317;
                  }
                  else
                  {
                    int v145 = 0;
                  }
                  unsigned __int8 v180 = sub_1CB883124((char)v334, v145);
                  uint64_t v181 = a6[2];
                  uint64_t v182 = v181[104];
                  a5 = (const char *)v319;
                  uint64_t v29 = (uint64_t *)v324;
                  if (v182) {
                    uint64_t v183 = *(unsigned __int16 *)(v182 + 8);
                  }
                  else {
                    uint64_t v183 = 0;
                  }
                  unsigned __int8 v185 = sub_1CD7FF4E8(v181, (const char *)0x92, (const llvm::APInt *)&v332, (llvm *)v180, 0, (uint64_t *)v340, v341, v183);
                  __int16 v187 = 0;
                  uint64_t v188 = a6[2];
                  int v189 = *(uint64_t **)(v13 + 32);
                  uint64_t v190 = *v189;
                  uint64_t v191 = v189[1];
                  uint64_t v192 = v188[104];
                  if (v192) {
                    __int16 v187 = *(_WORD *)(v192 + 8);
                  }
                  uint64_t v89 = sub_1CD7F5D38(v188, (const char *)v319, (const llvm::APInt *)&v332, (llvm *)1, 0, (uint64_t)v185, v184, v186, v324, v31, v190, v191, SHIDWORD(v191), v187);
                  unsigned int v91 = v193;
                  if (v340 != &v342) {
                    free(v340);
                  }
                }
                if (v344 != (unsigned __int8 **)&v346) {
                  free(v344);
                }
              }
              if (v338 >= (unint64_t)HIDWORD(v338)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v194 = (uint64_t **)((char *)v337 + 16 * v338);
              *uint64_t v194 = v89;
              v194[1] = (uint64_t *)v91;
              LODWORD(v338) = v338 + 1;
              goto LABEL_168;
            }
            unsigned int v92 = v326 - v86;
            if (v325) {
              int v93 = 16;
            }
            else {
              int v93 = 32;
            }
            if (v325) {
              uint64_t v94 = 4;
            }
            else {
              uint64_t v94 = 5;
            }
            if (v325) {
              char v95 = 1;
            }
            else {
              char v95 = 2;
            }
            if (v92 >= 0x11) {
              unsigned int v96 = v93;
            }
            else {
              unsigned int v96 = 16;
            }
            if (v92 >= 0x11) {
              uint64_t v97 = v94;
            }
            else {
              uint64_t v97 = 4;
            }
            if (v92 >= 0x11) {
              char v98 = v95;
            }
            else {
              char v98 = 1;
            }
            char v321 = v98;
            unsigned int v101 = sub_1CB87E200((unsigned __int8 *)&v334);
            if (v99 == 1) {
            unsigned int v102 = (llvm::APFloatBase *)a6[2];
            }
            __int16 v344 = (unsigned __int8 **)v332;
            if (v332) {
              llvm::MetadataTracking::track((uint64_t)&v344, v332, 2);
            }
            LODWORD(v345) = v333;
            unsigned int v103 = sub_1CB9FB4A4(v102, a5, (uint64_t)&v344, (llvm *)v97, 0, (uint64_t)v29, (void *)v31, v100, v97, 0);
            unint64_t v105 = v104;
            if (v344)
            {
              int v106 = *(unsigned __int8 *)v344;
              if ((v106 - 4) > 0x1E)
              {
                if ((v106 - 3) >= 0xFFFFFFFE) {
                  uint64_t v161 = v344;
                }
                else {
                  uint64_t v161 = 0;
                }
                if ((v106 - 3) < 0xFFFFFFFE)
                {
                  if (v106 == 3) {
                    v344[1] = 0;
                  }
                  goto LABEL_104;
                }
                unint64_t v162 = (unint64_t)(v161 + 1);
              }
              else
              {
                if ((*((unsigned char *)v344 + 1) & 0x7F) != 2 && !*((_DWORD *)v344 + 3)) {
                  goto LABEL_104;
                }
                unint64_t v198 = (unint64_t)v344[2];
                if ((v198 & 4) == 0) {
                  goto LABEL_104;
                }
                unint64_t v162 = v198 & 0xFFFFFFFFFFFFFFF8;
                if (!v162) {
                  goto LABEL_104;
                }
              }
              unint64_t v340 = &v344;
              sub_1CC5FA668(v162 + 16, &v340);
            }
LABEL_104:
            unsigned int v107 = v96;
            uint64_t v108 = v96 / v101;
            uint64_t v323 = v29;
            if (v108 == 1)
            {
              int v109 = (llvm::APFloatBase *)a6[2];
              uint64_t v110 = *((void *)v109 + 104);
              if (v110) {
                __int16 v111 = *(_WORD *)(v110 + 8);
              }
              else {
                __int16 v111 = 0;
              }
              uint64_t v143 = sub_1CD7F3564(v109, (const char *)0xD8, (uint64_t)&v332, (llvm *)v334, 0, (uint64_t)v103, (void *)v105, v111);
              if (v338 >= (unint64_t)HIDWORD(v338)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v144 = (uint64_t **)((char *)v337 + 16 * v338);
              *uint64_t v144 = v143;
              v144[1] = v142;
              LODWORD(v338) = v338 + 1;
            }
            else
            {
              unsigned __int8 v138 = sub_1CB883124((char)v334, v108);
              uint64_t v139 = (llvm::APFloatBase *)a6[2];
              uint64_t v140 = *((void *)v139 + 104);
              if (v140) {
                __int16 v141 = *(_WORD *)(v140 + 8);
              }
              else {
                __int16 v141 = 0;
              }
              unsigned int v146 = sub_1CD7F3564(v139, (const char *)0xD8, (uint64_t)&v332, (llvm *)v138, 0, (uint64_t)v103, (void *)v105, v141);
              if (v107 >= v101)
              {
                uint64_t v148 = (uint64_t)v146;
                uint64_t v149 = 0;
                unint64_t v150 = v105 & 0xFFFFFFFF00000000 | v147;
                do
                {
                  uint64_t v151 = (uint64_t)a6[2];
                  __int16 v152 = (llvm *)v334;
                  uint64_t v153 = sub_1CD7EBF14(v151, v149, (const llvm::APInt *)&v332, (llvm *)5, 0, 0, 0);
                  __int16 v156 = 0;
                  uint64_t v157 = *(void *)(v151 + 832);
                  if (v157) {
                    __int16 v156 = *(_WORD *)(v157 + 8);
                  }
                  char v159 = sub_1CCFDED5C(v151, 148, (const llvm::APInt *)&v332, v152, 0, v148, v150, v155, (uint64_t)v153, v154, v156);
                  if (v338 >= (unint64_t)HIDWORD(v338)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v160 = (uint64_t **)((char *)v337 + 16 * v338);
                  *uint64_t v160 = v159;
                  v160[1] = v158;
                  LODWORD(v338) = v338 + 1;
                  ++v149;
                }
                while (v108 != v149);
              }
            }
            v325 += v321;
            unsigned int v88 = v107;
            v86 += v107;
            a5 = (const char *)v319;
            uint64_t v29 = v323;
            uint64_t v14 = v318;
            uint64_t v13 = v327;
LABEL_168:
            if (v86 >= v326) {
              goto LABEL_71;
            }
            uint64_t v195 = v29[10];
            uint64_t v196 = (void *)(v195 + 24);
            if (*(_DWORD *)(v195 + 32) >= 0x41u) {
              uint64_t v196 = (void *)*v196;
            }
            uint64_t v29 = sub_1CD7EBF14((uint64_t)a6[2], *v196 + (v88 >> 3), (const llvm::APInt *)&v332, (llvm *)4, 0, 0, 0);
            unint64_t v31 = v31 & 0xFFFFFFFF00000000 | v197;
          }
        }
        goto LABEL_32;
      }
      uint64_t v33 = v331;
      int v39 = *(_DWORD *)(v331 + 8);
LABEL_31:
      if ((v39 & 0xFE) == 0x12)
      {
        char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v33 + 24), 0, v25);
        goto LABEL_65;
      }
LABEL_32:
      unsigned int v48 = *(llvm **)(a1 + 80);
      if (v48 - 2 < 2)
      {
        if (v35)
        {
          uint64_t v49 = *(void *)(v13 + 32);
          uint64_t v50 = *(void *)(v49 + 40);
          int v51 = (void *)*(unsigned int *)(v49 + 48);
          uint64_t v52 = (llvm::APFloatBase *)a6[2];
          uint64_t v53 = *((void *)v52 + 104);
          if (v53) {
            __int16 v54 = *(_WORD *)(v53 + 8);
          }
          else {
            __int16 v54 = 0;
          }
          uint64_t v61 = sub_1CD7F3564(v52, (const char *)0xC7, (uint64_t)&v332, (llvm *)4, 0, v50, v51, v54);
          uint64_t v62 = v77;
          uint64_t v78 = a6[2];
          uint64_t v60 = *(void *)(v13 + 32);
LABEL_184:
          uint64_t v202 = *(void *)v60;
          uint64_t v203 = *(void *)(v60 + 8);
          uint64_t v204 = v78[104];
          if (v204) {
            LOWORD(v204) = *(_WORD *)(v204 + 8);
          }
          unint64_t v55 = sub_1CD7F5D38(v78, a5, (const llvm::APInt *)&v332, (llvm *)1, 0, (uint64_t)v61, v62, v28, (uint64_t)v29, v31, v202, v203, SHIDWORD(v203), v204);
          goto LABEL_187;
        }
        unsigned int v57 = sub_1CB9FAC90((uint64_t)a6, (uint64_t)v29, (void *)v31, v14, a5, v26, v27, v28);
        goto LABEL_214;
      }
      if (v48 == 6)
      {
        if (v35)
        {
          unint64_t v55 = sub_1CB9FB180((uint64_t)a6, v13, (uint64_t)v29, v31);
LABEL_187:
          uint64_t v205 = *a6;
          __int16 v344 = (unsigned __int8 **)v55;
          uint64_t v345 = v56;
          uint64_t v206 = v205;
          uint64_t v207 = v13;
          int v208 = 1;
LABEL_216:
          uint64_t v223 = sub_1CCEF083C(v206, v207, (uint64_t *)&v344, v208, 1);
          goto LABEL_217;
        }
        uint64_t v225 = *(unsigned __int8 ***)(v14 + 64);
        __int16 v344 = v225;
        uint64_t v226 = (uint64_t)v29;
        if (v225)
        {
          llvm::MetadataTracking::track((uint64_t)&v344, (unsigned __int8 *)v225, 2);
          uint64_t v229 = (int *)(v14 + 60);
          int v228 = *(_DWORD *)(v14 + 60);
          int v240 = *(void **)(v14 + 64);
          LODWORD(v345) = v228;
          uint64_t v230 = (llvm::APFloatBase *)a6[2];
          unint64_t v340 = v240;
          uint64_t v227 = v14;
          if (v240)
          {
            llvm::MetadataTracking::track((uint64_t)&v340, (unsigned __int8 *)v240, 2);
            int v228 = *v229;
          }
        }
        else
        {
          uint64_t v227 = v14;
          uint64_t v229 = (int *)(v14 + 60);
          int v228 = *(_DWORD *)(v14 + 60);
          LODWORD(v345) = v228;
          uint64_t v230 = (llvm::APFloatBase *)a6[2];
          unint64_t v340 = 0;
        }
        LODWORD(v341) = v228;
        char v241 = sub_1CB9FB4A4(v230, a5, (uint64_t)&v340, (llvm *)5, 0, v226, (void *)v31, v28, 5, 0);
        uint64_t v243 = v242;
        if (v340)
        {
          int v244 = *(unsigned __int8 *)v340;
          if ((v244 - 4) > 0x1E)
          {
            if ((v244 - 3) >= 0xFFFFFFFE) {
              uint64_t v308 = v340;
            }
            else {
              uint64_t v308 = 0;
            }
            if ((v244 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v309 = (unint64_t)v308 + 8;
LABEL_316:
              __int16 v337 = &v340;
              sub_1CC5FA668(v309 + 16, &v337);
              goto LABEL_238;
            }
            if (v244 == 3) {
              *((void *)v340 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v340 + 1) & 0x7F) == 2 || *((_DWORD *)v340 + 3))
          {
            uint64_t v316 = *((void *)v340 + 2);
            if ((v316 & 4) != 0)
            {
              unint64_t v309 = v316 & 0xFFFFFFFFFFFFFFF8;
              if (v309) {
                goto LABEL_316;
              }
            }
          }
        }
LABEL_238:
        int v245 = *(unsigned __int16 *)(v226 + 24);
        if (v245 == 35 || v245 == 11)
        {
          uint64_t v247 = *(void *)(v226 + 80);
          unsigned int v248 = (void *)(v247 + 24);
          if (*(_DWORD *)(v247 + 32) >= 0x41u) {
            unsigned int v248 = (void *)*v248;
          }
          uint64_t v249 = sub_1CD7EBF14((uint64_t)a6[2], *v248 + 4, (const llvm::APInt *)&v344, (llvm *)4, 0, 0, 0);
        }
        else
        {
          uint64_t v271 = sub_1CD7EBF14((uint64_t)a6[2], 4, (const llvm::APInt *)&v344, (llvm *)4, 0, 0, 0);
          uint64_t v274 = (uint64_t)a6[2];
          uint64_t v275 = *(void *)(v274 + 832);
          if (v275) {
            LOWORD(v275) = *(_WORD *)(v275 + 8);
          }
          uint64_t v249 = sub_1CCFDED5C(v274, 56, (const llvm::APInt *)&v344, (llvm *)4, 0, v226, v31, v273, (uint64_t)v271, v272, v275);
        }
        uint64_t v276 = (uint64_t)v249;
        unint64_t v277 = v250;
        uint64_t v278 = (llvm::APFloatBase *)a6[2];
        uint64_t v279 = *(void **)(v227 + 64);
        __int16 v337 = v279;
        if (v279) {
          llvm::MetadataTracking::track((uint64_t)&v337, (unsigned __int8 *)v279, 2);
        }
        LODWORD(v338) = *v229;
        BOOL v281 = sub_1CB9FB4A4(v278, (const char *)0x18B, (uint64_t)&v337, (llvm *)5, 0, v276, (void *)v277, v251, 5, 0);
        uint64_t v283 = v282;
        if (v337)
        {
          int v284 = *(unsigned __int8 *)v337;
          if ((v284 - 4) > 0x1E)
          {
            if ((v284 - 3) >= 0xFFFFFFFE) {
              uint64_t v300 = v337;
            }
            else {
              uint64_t v300 = 0;
            }
            if ((v284 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v301 = (unint64_t)v300 + 8;
LABEL_292:
              uint64_t v334 = &v337;
              sub_1CC5FA668(v301 + 16, &v334);
              goto LABEL_265;
            }
            if (v284 == 3) {
              *((void *)v337 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v337 + 1) & 0x7F) == 2 || *((_DWORD *)v337 + 3))
          {
            uint64_t v312 = *((void *)v337 + 2);
            if ((v312 & 4) != 0)
            {
              unint64_t v301 = v312 & 0xFFFFFFFFFFFFFFF8;
              if (v301) {
                goto LABEL_292;
              }
            }
          }
        }
LABEL_265:
        uint64_t v285 = (uint64_t)a6[2];
        unsigned int v286 = *(unsigned __int8 **)(v227 + 64);
        uint64_t v334 = (void **)v286;
        if (v286) {
          llvm::MetadataTracking::track((uint64_t)&v334, v286, 2);
        }
        int v335 = *v229;
        uint64_t v287 = *(void *)(v285 + 832);
        if (v287) {
          LOWORD(v287) = *(_WORD *)(v287 + 8);
        }
        uint64_t v288 = sub_1CCFDED5C(v285, 146, (const llvm::APInt *)&v334, (llvm *)0x31, 0, (uint64_t)v241, v243, v280, (uint64_t)v281, v283, v287);
        uint64_t v290 = v289;
        uint64_t v14 = v227;
        if (v334)
        {
          int v291 = *(unsigned __int8 *)v334;
          if ((v291 - 4) > 0x1E)
          {
            if ((v291 - 3) >= 0xFFFFFFFE) {
              unint64_t v302 = v334;
            }
            else {
              unint64_t v302 = 0;
            }
            if ((v291 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v303 = (unint64_t)(v302 + 1);
LABEL_298:
              uint64_t v336 = &v334;
              sub_1CC5FA668(v303 + 16, &v336);
              goto LABEL_273;
            }
            if (v291 == 3) {
              v334[1] = 0;
            }
          }
          else if ((*((unsigned char *)v334 + 1) & 0x7F) == 2 || *((_DWORD *)v334 + 3))
          {
            unint64_t v313 = (unint64_t)v334[2];
            if ((v313 & 4) != 0)
            {
              unint64_t v303 = v313 & 0xFFFFFFFFFFFFFFF8;
              if (v303) {
                goto LABEL_298;
              }
            }
          }
        }
LABEL_273:
        uint64_t v292 = (llvm::APFloatBase *)a6[2];
        uint64_t v293 = *(unsigned __int8 **)(v227 + 64);
        uint64_t v334 = (void **)v293;
        if (v293) {
          llvm::MetadataTracking::track((uint64_t)&v334, v293, 2);
        }
        int v335 = *v229;
        uint64_t v294 = *((void *)v292 + 104);
        if (v294) {
          __int16 v295 = *(_WORD *)(v294 + 8);
        }
        else {
          __int16 v295 = 0;
        }
        uint64_t v67 = sub_1CD7F3564(v292, (const char *)0xD8, (uint64_t)&v334, (llvm *)6, 0, (uint64_t)v288, v290, v295);
        int v297 = v296;
        if (v334)
        {
          int v298 = *(unsigned __int8 *)v334;
          if ((v298 - 4) > 0x1E)
          {
            if ((v298 - 3) >= 0xFFFFFFFE) {
              int v304 = v334;
            }
            else {
              int v304 = 0;
            }
            if ((v298 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v305 = (unint64_t)(v304 + 1);
LABEL_304:
              uint64_t v336 = &v334;
              sub_1CC5FA668(v305 + 16, &v336);
              goto LABEL_282;
            }
            if (v298 == 3) {
              v334[1] = 0;
            }
          }
          else if ((*((unsigned char *)v334 + 1) & 0x7F) == 2 || *((_DWORD *)v334 + 3))
          {
            unint64_t v314 = (unint64_t)v334[2];
            if ((v314 & 4) != 0)
            {
              unint64_t v305 = v314 & 0xFFFFFFFFFFFFFFF8;
              if (v305) {
                goto LABEL_304;
              }
            }
          }
        }
LABEL_282:
        if (v344)
        {
          int v299 = *(unsigned __int8 *)v344;
          if ((v299 - 4) > 0x1E)
          {
            if ((v299 - 3) >= 0xFFFFFFFE) {
              uint64_t v306 = v344;
            }
            else {
              uint64_t v306 = 0;
            }
            if ((v299 - 3) < 0xFFFFFFFE)
            {
              if (v299 == 3) {
                v344[1] = 0;
              }
              goto LABEL_286;
            }
            unint64_t v307 = (unint64_t)(v306 + 1);
          }
          else
          {
            if ((*((unsigned char *)v344 + 1) & 0x7F) != 2 && !*((_DWORD *)v344 + 3)) {
              goto LABEL_286;
            }
            unint64_t v315 = (unint64_t)v344[2];
            if ((v315 & 4) == 0) {
              goto LABEL_286;
            }
            unint64_t v307 = v315 & 0xFFFFFFFFFFFFFFF8;
            if (!v307) {
              goto LABEL_286;
            }
          }
          uint64_t v334 = (void **)&v344;
          sub_1CC5FA668(v307 + 16, &v334);
        }
LABEL_286:
        LODWORD(v69) = v297;
        goto LABEL_215;
      }
      uint64_t v59 = *(void *)(a1 + 88);
      if (v35)
      {
        uint64_t v60 = *(void *)(v13 + 32);
        uint64_t v61 = *(uint64_t **)(v60 + 40);
        uint64_t v62 = *(unsigned int *)(v60 + 48);
        if ((*(_WORD *)(v13 + 26) & 0x400) != 0)
        {
          uint64_t v63 = (llvm::APFloatBase *)a6[2];
          uint64_t v64 = *((void *)v63 + 104);
          if (v64) {
            __int16 v65 = *(_WORD *)(v64 + 8);
          }
          else {
            __int16 v65 = 0;
          }
          uint64_t v61 = sub_1CD7F3564(v63, (const char *)0xC9, (uint64_t)&v332, v48, v59, (uint64_t)v61, (void *)v62, v65);
          uint64_t v62 = v201;
          uint64_t v60 = *(void *)(v13 + 32);
        }
        uint64_t v78 = a6[2];
        goto LABEL_184;
      }
      uint64_t v66 = (llvm::APFloatBase *)a6[2];
      uint64_t v328 = v332;
      if (v332) {
        llvm::MetadataTracking::track((uint64_t)&v328, v332, 2);
      }
      int v329 = v333;
      uint64_t v67 = sub_1CB9FB4A4(v66, a5, (uint64_t)&v328, v48, v59, (uint64_t)v29, (void *)v31, v28, (uint64_t)v48, v59);
      unint64_t v69 = v68;
      if (v328)
      {
        int v70 = *v328;
        if ((v70 - 4) > 0x1E)
        {
          if ((v70 - 3) >= 0xFFFFFFFE) {
            uint64_t v209 = v328;
          }
          else {
            uint64_t v209 = 0;
          }
          if ((v70 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v210 = (unint64_t)(v209 + 8);
LABEL_193:
            __int16 v344 = &v328;
            sub_1CC5FA668(v210 + 16, &v344);
            goto LABEL_50;
          }
          if (v70 == 3) {
            *((void *)v328 + 1) = 0;
          }
        }
        else if ((v328[1] & 0x7F) == 2 || *((_DWORD *)v328 + 3))
        {
          uint64_t v311 = *((void *)v328 + 2);
          if ((v311 & 4) != 0)
          {
            unint64_t v210 = v311 & 0xFFFFFFFFFFFFFFF8;
            if (v210) {
              goto LABEL_193;
            }
          }
        }
      }
LABEL_50:
      int v71 = (*(unsigned __int16 *)(v14 + 26) >> 10) & 3;
      if (v71 != 1)
      {
        if (v71 == 3)
        {
          int v72 = (llvm::APFloatBase *)a6[2];
          uint64_t v73 = v330;
          uint64_t v74 = v331;
          uint64_t v79 = *((void *)v72 + 104);
          if (v79) {
            __int16 v76 = *(_WORD *)(v79 + 8);
          }
          else {
            __int16 v76 = 0;
          }
          uint64_t v80 = 199;
        }
        else
        {
          if (v71 != 2)
          {
LABEL_215:
            int v233 = *(uint64_t **)(v14 + 32);
            uint64_t v235 = *v233;
            uint64_t v234 = v233[1];
            uint64_t v206 = *a6;
            __int16 v344 = (unsigned __int8 **)v67;
            LODWORD(v345) = v69;
            uint64_t v346 = v235;
            int v347 = v234;
            uint64_t v207 = v14;
            int v208 = 2;
            goto LABEL_216;
          }
          int v72 = (llvm::APFloatBase *)a6[2];
          uint64_t v73 = v330;
          uint64_t v74 = v331;
          uint64_t v75 = *((void *)v72 + 104);
          if (v75) {
            __int16 v76 = *(_WORD *)(v75 + 8);
          }
          else {
            __int16 v76 = 0;
          }
          uint64_t v80 = 198;
        }
        goto LABEL_213;
      }
      if ((_BYTE)v330)
      {
        if (((_BYTE)v330 + 104) >= 0x13u
          && ((_BYTE)v330 - 8) >= 7u
          && ((_BYTE)v330 - 75) >= 0x2Du)
        {
LABEL_63:
          uint64_t v80 = 200;
          goto LABEL_208;
        }
      }
      else
      {
        int v231 = *(_DWORD *)(v331 + 8);
        if ((v231 & 0xFE) == 0x12) {
          int v231 = *(_DWORD *)(**(void **)(v331 + 16) + 8);
        }
        if (v231 > 6u) {
          goto LABEL_63;
        }
      }
      uint64_t v80 = 215;
LABEL_208:
      int v72 = (llvm::APFloatBase *)a6[2];
      uint64_t v73 = v330;
      uint64_t v74 = v331;
      uint64_t v232 = *((void *)v72 + 104);
      if (v232) {
        __int16 v76 = *(_WORD *)(v232 + 8);
      }
      else {
        __int16 v76 = 0;
      }
LABEL_213:
      unsigned int v57 = sub_1CD7F3564(v72, (const char *)v80, (uint64_t)&v332, v73, v74, (uint64_t)v67, (void *)v69, v76);
LABEL_214:
      uint64_t v67 = v57;
      LODWORD(v69) = v58;
      goto LABEL_215;
    }
    char v37 = sub_1CB8C2FBC((unsigned __int8 *)&v330);
  }
  else
  {
    int v39 = *(_DWORD *)(v33 + 8);
    if ((v39 & 0xFE) != 0x12) {
      goto LABEL_31;
    }
    char v37 = llvm::EVT::getEVT(*(llvm::EVT **)(v33 + 24), 0, v25);
  }
  if (v37 != 3
    || (uint64_t v40 = (1 << *(unsigned char *)(*(void *)(a1 + 96) + 34)) | *(void *)(*(void *)(a1 + 96) + 8),
        (v40 & -v40) != 1))
  {
LABEL_26:
    LODWORD(v34) = v330;
    goto LABEL_27;
  }
  __int16 v344 = (unsigned __int8 **)&v346;
  uint64_t v345 = 0x400000000;
  if (sub_1CD3DB440((llvm::EVT *)&v330, v38))
  {
    int v252 = (void *)v31;
    unsigned int v253 = 0;
    do
    {
      uint64_t v254 = (uint64_t)v252;
      uint64_t v256 = sub_1CB9FAC90((uint64_t)a6, (uint64_t)v29, v252, v14, a5, v41, v42, v43);
      if (v345 >= (unint64_t)HIDWORD(v345)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v257 = (uint64_t **)&v344[2 * v345];
      void *v257 = v256;
      v257[1] = v255;
      LODWORD(v345) = v345 + 1;
      uint64_t v258 = (uint64_t)a6[2];
      uint64_t v259 = sub_1CD7EBF14(v258, 1, (const llvm::APInt *)&v332, (llvm *)4, 0, 0, 0);
      __int16 v262 = 0;
      uint64_t v263 = *(void *)(v258 + 832);
      if (v263) {
        __int16 v262 = *(_WORD *)(v263 + 8);
      }
      uint64_t v29 = sub_1CCFDED5C(v258, 56, (const llvm::APInt *)&v332, (llvm *)4, 0, (uint64_t)v29, v254, v261, (uint64_t)v259, v260, v262);
      int v252 = (void *)(v254 & 0xFFFFFFFF00000000 | v264);
      ++v253;
    }
    while (v253 < sub_1CD3DB440((llvm::EVT *)&v330, v264));
  }
  uint64_t v44 = a6[2];
  uint64_t v45 = v44[104];
  if (v45) {
    uint64_t v46 = *(unsigned __int16 *)(v45 + 8);
  }
  else {
    uint64_t v46 = 0;
  }
  long long v265 = sub_1CD7FF4E8(v44, (const char *)0x92, (const llvm::APInt *)&v332, v330, v331, (uint64_t *)v344, v345, v46);
  uint64_t v266 = *(uint64_t **)(v14 + 32);
  uint64_t v267 = *v266;
  uint64_t v268 = v266[1];
  uint64_t v269 = *a6;
  unint64_t v340 = v265;
  LODWORD(v341) = v270;
  uint64_t v342 = v267;
  int v343 = v268;
  uint64_t v223 = sub_1CCEF083C(v269, v14, (uint64_t *)&v340, 2, 1);
  uint64_t v224 = v344;
  if (v344 != (unsigned __int8 **)&v346) {
    goto LABEL_199;
  }
LABEL_217:
  if (v332)
  {
    int v236 = *v332;
    if ((v236 - 4) > 0x1E)
    {
      if ((v236 - 3) >= 0xFFFFFFFE) {
        uint64_t v238 = v332;
      }
      else {
        uint64_t v238 = 0;
      }
      if ((v236 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v239 = (unint64_t)(v238 + 8);
LABEL_227:
        __int16 v344 = &v332;
        sub_1CC5FA668(v239 + 16, &v344);
        return v223;
      }
      if (v236 == 3) {
        *((void *)v332 + 1) = 0;
      }
    }
    else if ((v332[1] & 0x7F) == 2 || *((_DWORD *)v332 + 3))
    {
      uint64_t v310 = *((void *)v332 + 2);
      if ((v310 & 4) != 0)
      {
        unint64_t v239 = v310 & 0xFFFFFFFFFFFFFFF8;
        if (v239) {
          goto LABEL_227;
        }
      }
    }
  }
  return v223;
}

uint64_t *sub_1CB9F4BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(llvm ***)(*(void *)a2 + 40);
  uint64_t v6 = *v5;
  uint64_t v7 = (uint64_t)v5[1];
  uint64_t v8 = *(void *)(*(void *)a2 + 96);
  unint64_t v9 = sub_1CD40B7CC((_DWORD *)a2);
  uint64_t v10 = (1 << *(unsigned char *)(v8 + 34)) | *(void *)(v8 + 8);
  int v11 = __clz(v10 & -v10);
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = *(unsigned __int8 **)(*(void *)a2 + 64);
  uint64_t v128 = v13;
  uint64_t v14 = (void *)v12;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v128, v13, 2);
    uint64_t v14 = *(void **)a2;
  }
  int v129 = *(_DWORD *)(v12 + 60);
  uint64_t v15 = (uint64_t *)v14[4];
  uint64_t v113 = *v15;
  uint64_t v114 = v15[1];
  if ((63 - v11) <= 1u && (1 << (63 - v11)) % v9)
  {
    if (v9 <= 8 && v11 != 63 && v9 != 3) {
      goto LABEL_10;
    }
  }
  else if (v9 != 3)
  {
LABEL_10:
    if (*(_DWORD *)(a2 + 88)) {
      BOOL v17 = *(_DWORD *)(a2 + 68) == 1;
    }
    else {
      BOOL v17 = 1;
    }
    char v18 = v17;
    if (v17)
    {
      long long v19 = *(_OWORD *)(a2 + 48);
      v147[1] = *(_OWORD *)(a2 + 32);
      v147[2] = v19;
      long long v20 = *(_OWORD *)(a2 + 80);
      v147[3] = *(_OWORD *)(a2 + 64);
      v147[4] = v20;
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v146 = *(_OWORD *)a2;
      v147[0] = v21;
    }
    else
    {
      int v72 = sub_1CD7FAE3C(*(void *)(a3 + 16), v14[10], v14[11], (uint64_t)&v128, v113, v114, *(void *)(a2 + 8), *(void *)(a2 + 16), v8);
      uint64_t v73 = v72[4];
      uint64_t v113 = *(void *)v73;
      LODWORD(v114) = *(_DWORD *)(v73 + 8);
      sub_1CD40B83C((uint64_t)&v146, (uint64_t)v72);
    }
    uint64_t v74 = sub_1CD40B754(a2);
    switch((int)v74)
    {
      case 0:
        uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2192))(a1, a2, a3);
        goto LABEL_67;
      case 1:
        LOBYTE(v130) = 0;
        uint64_t v74 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, long long *))(*(void *)a1 + 2200))(a1, &v146, a3, &v130);
        int v71 = (uint64_t *)v74;
        unsigned int v79 = v78;
        if ((_BYTE)v130)
        {
          uint64_t v97 = *(void *)(*(void *)(a3 + 16) + 16);
          llvm::DiagnosticLocation::DiagnosticLocation(v125, (const llvm::DebugLoc *)&v128);
          uint64_t v98 = *(void *)(*(void *)(v97 + 640) + 16);
          uint64_t v99 = *(void *)(v98 + 56);
          LODWORD(v133) = 11;
          BYTE4(v133) = 2;
          long long v135 = v125[0];
          uint64_t v134 = v99;
          uint64_t v136 = "agx2-lower";
          unsigned int v137 = "DeviceLoadAddrMode";
          uint64_t v138 = 18;
          char v139 = 0;
          char v140 = 0;
          __int16 v141 = v143;
          uint64_t v142 = 0x400000000;
          v143[256] = 0;
          int v144 = -1;
          uint64_t v145 = v98;
          uint64_t v132 = &unk_1F26165E0;
          char v118 = 6;
          strcpy((char *)v117, "String");
          __p = operator new(0x38uLL);
          long long v120 = xmmword_1CD935EE0;
          strcpy((char *)__p, "Zero-extended device memory load cannot fold addr mode");
          uint64_t v121 = 0;
          uint64_t v122 = 0;
          sub_1CD3D6290((uint64_t)&v132, (long long *)v117);
          if (SHIBYTE(v120) < 0) {
            operator delete(__p);
          }
          if (v118 < 0) {
            operator delete(v117[0]);
          }
          uint64_t v74 = llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)&v132);
          uint64_t v132 = &unk_1F2616800;
          uint64_t v100 = (char *)v141;
          if (v142)
          {
            unint64_t v101 = (unint64_t)v142 << 6;
            do
            {
              unsigned int v102 = (void **)&v100[v101];
              if (v100[v101 - 17] < 0) {
                operator delete(*(v102 - 5));
              }
              if (*((char *)v102 - 41) < 0) {
                operator delete(*(v102 - 8));
              }
              v101 -= 64;
            }
            while (v101);
            uint64_t v100 = (char *)v141;
          }
          if (v100 != v143) {
            free(v100);
          }
        }
        unsigned int v75 = v79;
        break;
      case 2:
        uint64_t v74 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 2208))(a1, &v146, a3);
        goto LABEL_67;
      case 3:
        uint64_t v74 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 2216))(a1, &v146, a3);
LABEL_67:
        int v71 = (uint64_t *)v74;
        break;
      default:
        int v71 = 0;
        unsigned int v75 = 0;
        break;
    }
    if (v18) {
      goto LABEL_72;
    }
    uint64_t v84 = *(void *)(*(void *)a2 + 40);
    uint64_t v85 = *(llvm **)v84;
    uint64_t v86 = *(void *)(v84 + 8);
    unint64_t v87 = v75;
    int v88 = *(_DWORD *)(a2 + 88);
    uint64_t v115 = v128;
    if (v128) {
      uint64_t v74 = llvm::MetadataTracking::track((uint64_t)&v115, v128, 2);
    }
    int v116 = v129;
    uint64_t v89 = sub_1CD4099D4(v74, (uint64_t)v71, (void *)v87, v85, v86, v88, (uint64_t)&v115, a3);
    int v91 = v90;
    if (v115)
    {
      int v92 = *v115;
      if ((v92 - 4) > 0x1E)
      {
        if ((v92 - 3) >= 0xFFFFFFFE) {
          unsigned int v103 = v115;
        }
        else {
          unsigned int v103 = 0;
        }
        if ((v92 - 3) < 0xFFFFFFFE)
        {
          if (v92 == 3) {
            *((void *)v115 + 1) = 0;
          }
          goto LABEL_93;
        }
        unint64_t v104 = (unint64_t)(v103 + 8);
      }
      else
      {
        if ((v115[1] & 0x7F) != 2 && !*((_DWORD *)v115 + 3)) {
          goto LABEL_93;
        }
        uint64_t v107 = *((void *)v115 + 2);
        if ((v107 & 4) == 0) {
          goto LABEL_93;
        }
        unint64_t v104 = v107 & 0xFFFFFFFFFFFFFFF8;
        if (!v104) {
          goto LABEL_93;
        }
      }
      uint64_t v132 = &v115;
      sub_1CC5FA668(v104 + 16, &v132);
    }
LABEL_93:
    int v93 = *(void **)(a3 + 16);
    uint64_t v94 = sub_1CD7F95FC((uint64_t)v93, (uint64_t)v85, v86, 1, 0);
    int v71 = sub_1CD7FFB18(v93, (const char *)0x37, (const llvm::APInt *)&v128, v94, v95, (uint64_t)v89, v91, v96, v113, v114);
    goto LABEL_72;
  }
  uint64_t v108 = v7;
  int v109 = v6;
  uint64_t v110 = v14;
  uint64_t v111 = a2;
  uint64_t v22 = *(uint64_t **)(a2 + 8);
  unint64_t v23 = *(void *)(a2 + 16);
  uint64_t v132 = &v134;
  uint64_t v133 = 0x800000000;
  *(void *)&long long v146 = v147;
  *((void *)&v146 + 1) = 0x800000000;
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v47 = *(void *)(a3 + 16);
      sub_1CB8F0264((uint64_t *)v8, i, (uint64_t)&v126);
      __int16 v48 = *(_WORD *)(v8 + 32);
      memset(v125, 0, 32);
      long long v130 = v126;
      uint64_t v131 = v127;
      uint64_t v49 = sub_1CD7F00F8(v47, 3, 0, (uint64_t)&v128, v113, v114, (uint64_t)v22, v23, &v130, 256, 0, v48, v125, 0);
      sub_1CD40B83C((uint64_t)v125, (uint64_t)v49);
      uint64_t v50 = sub_1CB9F4BE0(a1, v125, a3);
      if (v50) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = (uint64_t)v49;
      }
      uint64_t v52 = v22[5] + 16 * v23;
      uint64_t v53 = *(llvm **)v52;
      uint64_t v54 = *(void *)(v52 + 8);
      uint64_t v55 = *(void *)(a3 + 16);
      unsigned int v56 = sub_1CD7EBF14(v55, 1, (const llvm::APInt *)&v128, *(llvm **)v52, v54, 0, 0);
      __int16 v59 = 0;
      uint64_t v60 = *(void *)(v55 + 832);
      if (v60) {
        __int16 v59 = *(_WORD *)(v60 + 8);
      }
      uint64_t v22 = sub_1CCFDED5C(v55, 56, (const llvm::APInt *)&v128, v53, v54, (uint64_t)v22, v23, v58, (uint64_t)v56, v57, v59);
      if (v133 >= (unint64_t)HIDWORD(v133)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v62 = (uint64_t *)((char *)v132 + 16 * v133);
      *uint64_t v62 = v51;
      v62[1] = 0;
      LODWORD(v133) = v133 + 1;
      if (DWORD2(v146) >= (unint64_t)HIDWORD(v146)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v23 = v23 & 0xFFFFFFFF00000000 | v61;
      uint64_t v63 = (uint64_t *)(v146 + 16 * DWORD2(v146));
      *uint64_t v63 = v51;
      v63[1] = 1;
      ++DWORD2(v146);
    }
  }
  BOOL v25 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56), 3, 0, v9, 0);
  uint64_t v26 = 0;
  uint64_t v27 = *(void **)(a3 + 16);
  uint64_t v28 = v27[104];
  if (v28) {
    uint64_t v26 = *(unsigned __int16 *)(v28 + 8);
  }
  uint64_t v29 = (uint64_t)sub_1CD7FF4E8(v27, (const char *)0x92, (const llvm::APInt *)&v128, v25, v24, (uint64_t *)v132, v133, v26);
  uint64_t v30 = v29;
  unint64_t v32 = v31;
  int v33 = *(_DWORD *)(v111 + 88);
  __int16 v123 = v128;
  if (v128) {
    uint64_t v29 = llvm::MetadataTracking::track((uint64_t)&v123, v128, 2);
  }
  int v124 = v129;
  int v34 = sub_1CD4099D4(v29, v30, (void *)v32, v109, v108, v33, (uint64_t)&v123, a3);
  uint64_t v36 = v35;
  char v37 = (void *)(v32 & 0xFFFFFFFF00000000 | v35);
  if (v123)
  {
    int v38 = *v123;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        __int16 v76 = v123;
      }
      else {
        __int16 v76 = 0;
      }
      if ((v38 - 3) < 0xFFFFFFFE)
      {
        if (v38 == 3) {
          *((void *)v123 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v77 = (unint64_t)(v76 + 8);
    }
    else
    {
      if ((v123[1] & 0x7F) != 2 && !*((_DWORD *)v123 + 3)) {
        goto LABEL_29;
      }
      uint64_t v106 = *((void *)v123 + 2);
      if ((v106 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v77 = v106 & 0xFFFFFFFFFFFFFFF8;
      if (!v77) {
        goto LABEL_29;
      }
    }
    *(void *)&v125[0] = &v123;
    sub_1CC5FA668(v77 + 16, v125);
  }
LABEL_29:
  int v39 = (unsigned __int8 *)(v34[5] + 16 * v36);
  int v40 = *v39;
  if (v40 != v109 || ((v41 = *((void *)v39 + 1), !v40) ? (BOOL v42 = v41 == v108) : (BOOL v42 = 1), !v42))
  {
    uint64_t v43 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v44 = *((void *)v43 + 104);
    if (v44) {
      __int16 v45 = *(_WORD *)(v44 + 8);
    }
    else {
      __int16 v45 = 0;
    }
    int v34 = sub_1CD7F3564(v43, (const char *)0xD8, (uint64_t)&v128, v109, v108, (uint64_t)v34, v37, v45);
    LODWORD(v37) = v64;
  }
  __int16 v65 = *(void **)(a3 + 16);
  uint64_t v66 = v65[104];
  if (v66) {
    uint64_t v67 = *(unsigned __int16 *)(v66 + 8);
  }
  else {
    uint64_t v67 = 0;
  }
  unsigned int v68 = sub_1CD7FF4E8(v65, (const char *)2, (const llvm::APInt *)&v128, (llvm *)1, 0, (uint64_t *)v146, DWORD2(v146), v67);
  int v71 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v128, v110[5], *((unsigned __int16 *)v110 + 29), (uint64_t)v34, (int)v37, v70, (uint64_t)v68, v69);
  if ((_OWORD *)v146 != v147) {
    free((void *)v146);
  }
  if (v132 != &v134) {
    free(v132);
  }
LABEL_72:
  if (v128)
  {
    int v80 = *v128;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        int v82 = v128;
      }
      else {
        int v82 = 0;
      }
      if ((v80 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v83 = (unint64_t)(v82 + 8);
LABEL_82:
        uint64_t v132 = &v128;
        sub_1CC5FA668(v83 + 16, &v132);
        return v71;
      }
      if (v80 == 3) {
        *((void *)v128 + 1) = 0;
      }
    }
    else if ((v128[1] & 0x7F) == 2 || *((_DWORD *)v128 + 3))
    {
      uint64_t v105 = *((void *)v128 + 2);
      if ((v105 & 4) != 0)
      {
        unint64_t v83 = v105 & 0xFFFFFFFFFFFFFFF8;
        if (v83) {
          goto LABEL_82;
        }
      }
    }
  }
  return v71;
}

uint64_t *sub_1CB9F567C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(unsigned __int8 **)(*(void *)a2 + 64);
  uint64_t v106 = v6;
  uint64_t v7 = (void *)v5;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)&v106, v6, 2);
    uint64_t v7 = *(void **)a2;
  }
  int v107 = *(_DWORD *)(v5 + 60);
  uint64_t v8 = (uint64_t *)v7[4];
  uint64_t v93 = v8[1];
  uint64_t v94 = *v8;
  uint64_t v10 = *(uint64_t **)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  uint64_t v95 = a3;
  if (*(unsigned char *)(a2 + 88))
  {
    int v11 = (llvm *)v7[10];
    uint64_t v12 = v7[11];
    if ((_BYTE)v11)
    {
      BOOL v14 = v11 - 120 >= 0x20 && v11 - 2 >= 6;
      if (!v14 || v11 - 15 < 0x3C) {
        goto LABEL_18;
      }
    }
    else
    {
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
        int v13 = *(unsigned __int8 *)(**(void **)(v12 + 16) + 8);
      }
      else {
        int v13 = *(_DWORD *)(v12 + 8);
      }
      if (v13 == 13)
      {
LABEL_18:
        uint64_t v22 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v23 = *((void *)v22 + 104);
        if (v23) {
          __int16 v24 = *(_WORD *)(v23 + 8);
        }
        else {
          __int16 v24 = 0;
        }
        uint64_t v10 = sub_1CD7F3564(v22, (const char *)0xC9, (uint64_t)&v106, v11, v12, (uint64_t)v10, (void *)v9, v24);
        unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v25;
        goto LABEL_22;
      }
    }
    uint64_t v15 = *(void *)(a3 + 16);
    unsigned int v16 = sub_1CD7EBF14(v15, 0, (const llvm::APInt *)&v106, (llvm *)5, 0, 0, 0);
    __int16 v19 = 0;
    uint64_t v20 = *(void *)(v15 + 832);
    if (v20) {
      __int16 v19 = *(_WORD *)(v20 + 8);
    }
    uint64_t v10 = sub_1CCFDED5C(v15, 212, (const llvm::APInt *)&v106, v11, v12, (uint64_t)v10, v9, v18, (uint64_t)v16, v17, v19);
    unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v21;
    a3 = v95;
  }
LABEL_22:
  uint64_t v26 = *(void *)(*(void *)a2 + 96);
  unint64_t v27 = sub_1CD40B8B4(a2);
  uint64_t v92 = v26;
  int v28 = __clz(((1 << *(unsigned char *)(v26 + 34)) | *(void *)(v26 + 8)) & -((1 << *(unsigned char *)(v26 + 34)) | *(void *)(v26 + 8)));
  if ((1 << (63 - v28)) % v27) {
    BOOL v29 = (63 - v28) > 1u;
  }
  else {
    BOOL v29 = 1;
  }
  if (v29)
  {
    if (v27 != 3)
    {
LABEL_32:
      switch(sub_1CD40B754(a2))
      {
        case 0u:
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2224))(a1, a2, a3);
          goto LABEL_60;
        case 1u:
          LOBYTE(v108) = 0;
          unint64_t v77 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a1 + 2232))(a1, a2, a3, &v108);
          if (!(_BYTE)v108) {
            goto LABEL_75;
          }
          uint64_t v79 = *(void *)(*(void *)(a3 + 16) + 16);
          llvm::DiagnosticLocation::DiagnosticLocation(v103, (const llvm::DebugLoc *)&v106);
          uint64_t v80 = *(void *)(*(void *)(v79 + 640) + 16);
          uint64_t v81 = *(void *)(v80 + 56);
          LODWORD(v111) = 11;
          BYTE4(v111) = 2;
          long long v113 = v103[0];
          uint64_t v112 = v81;
          uint64_t v114 = "agx2-lower";
          uint64_t v115 = "DeviceStoreAddrMode";
          uint64_t v116 = 19;
          char v117 = 0;
          char v118 = 0;
          unint64_t v119 = v121;
          uint64_t v120 = 0x400000000;
          v121[256] = 0;
          int v122 = -1;
          uint64_t v123 = v80;
          uint64_t v110 = &unk_1F26165E0;
          char v98 = 6;
          strcpy((char *)v97, "String");
          __p = operator new(0x38uLL);
          long long v100 = xmmword_1CD935EF0;
          strcpy((char *)__p, "Zero-extended device memory store cannot fold addr mode");
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          sub_1CD3D6290((uint64_t)&v110, (long long *)v97);
          if (SHIBYTE(v100) < 0) {
            operator delete(__p);
          }
          if (v98 < 0) {
            operator delete(v97[0]);
          }
          llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)&v110);
          uint64_t v110 = &unk_1F2616800;
          int v82 = v119;
          if (v120)
          {
            unint64_t v83 = (unint64_t)v120 << 6;
            do
            {
              uint64_t v84 = (void **)&v82[v83];
              if ((char)v82[v83 - 17] < 0) {
                operator delete(*(v84 - 5));
              }
              if (*((char *)v84 - 41) < 0) {
                operator delete(*(v84 - 8));
              }
              v83 -= 64;
            }
            while (v83);
            int v82 = v119;
          }
          if (v82 == v121) {
            goto LABEL_75;
          }
          unsigned int v78 = v82;
          goto LABEL_57;
        case 2u:
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2240))(a1, a2, a3);
          goto LABEL_60;
        case 3u:
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2248))(a1, a2, a3);
LABEL_60:
          unint64_t v77 = (uint64_t *)v30;
          goto LABEL_75;
        default:
          unint64_t v77 = 0;
          goto LABEL_75;
      }
    }
  }
  else if (v27 <= 8 && v27 != 3 && v28 != 63)
  {
    goto LABEL_32;
  }
  unint64_t v32 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56), 3, 0, v27, 0);
  __int16 v33 = 0;
  int v34 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v35 = *((void *)v34 + 104);
  if (v35) {
    __int16 v33 = *(_WORD *)(v35 + 8);
  }
  uint64_t v36 = sub_1CD7F3564(v34, (const char *)0xD8, (uint64_t)&v106, v32, v31, (uint64_t)v10, (void *)v9, v33);
  uint64_t v90 = v37;
  uint64_t v91 = (uint64_t)v36;
  int v38 = *(uint64_t **)(a2 + 8);
  unint64_t v39 = *(void *)(a2 + 16);
  uint64_t v110 = &v112;
  uint64_t v111 = 0x800000000;
  if (v27)
  {
    uint64_t v42 = 0;
    do
    {
      unint64_t v43 = v27;
      uint64_t v44 = *(void *)(a3 + 16);
      __int16 v45 = sub_1CD7EB364(v44, v42, (const llvm::APInt *)&v106, 0);
      uint64_t v48 = *(void *)(v44 + 832);
      if (v48) {
        LOWORD(v48) = *(_WORD *)(v48 + 8);
      }
      uint64_t v49 = sub_1CCFDED5C(v44, 148, (const llvm::APInt *)&v106, (llvm *)3, 0, v91, v90, v47, (uint64_t)v45, v46, v48);
      unsigned int v51 = v50;
      uint64_t v52 = *(void *)(a3 + 16);
      sub_1CB8F0264((uint64_t *)v92, v42, (uint64_t)&v104);
      uint64_t v53 = a3;
      __int16 v54 = *(_WORD *)(v92 + 32);
      memset(v103, 0, 32);
      long long v108 = v104;
      uint64_t v109 = v105;
      uint64_t v55 = (uint64_t *)(v49[5] + 16 * v51);
      sub_1CD7EA9CC(v52, *v55, v55[1]);
      unsigned int v56 = sub_1CD7FB188(v52, v94, v93, (uint64_t)&v106, (uint64_t)v49, v51, (uint64_t)v38, v39, (uint64_t)&v108, 0, 0, v54, v103);
      unint64_t v58 = v57;
      sub_1CD40B878((uint64_t)v103, (uint64_t)v56);
      uint64_t v59 = sub_1CB9F567C(a1, v103, v53);
      if (v59) {
        uint64_t v61 = v59;
      }
      else {
        uint64_t v61 = (uint64_t)v56;
      }
      if (v59) {
        unint64_t v62 = v58 & 0xFFFFFFFF00000000 | v60;
      }
      else {
        unint64_t v62 = v58;
      }
      uint64_t v63 = v38[5] + 16 * v39;
      int v64 = *(llvm **)v63;
      uint64_t v65 = *(void *)(v63 + 8);
      uint64_t v66 = *(void *)(v53 + 16);
      uint64_t v67 = sub_1CD7EBF14(v66, 1, (const llvm::APInt *)&v106, *(llvm **)v63, v65, 0, 0);
      __int16 v70 = 0;
      uint64_t v71 = *(void *)(v66 + 832);
      if (v71) {
        __int16 v70 = *(_WORD *)(v71 + 8);
      }
      int v38 = sub_1CCFDED5C(v66, 56, (const llvm::APInt *)&v106, v64, v65, (uint64_t)v38, v39, v69, (uint64_t)v67, v68, v70);
      if (v111 >= (unint64_t)HIDWORD(v111)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v39 = v39 & 0xFFFFFFFF00000000 | v72;
      uint64_t v73 = (uint64_t *)((char *)v110 + 16 * v111);
      *uint64_t v73 = v61;
      v73[1] = v62;
      uint64_t v40 = (v111 + 1);
      LODWORD(v111) = v111 + 1;
      ++v42;
      unint64_t v27 = v43;
      a3 = v95;
    }
    while (v43 != v42);
    uint64_t v41 = (uint64_t *)v110;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v41 = &v112;
  }
  uint64_t v74 = *(void **)(a3 + 16);
  uint64_t v75 = v74[104];
  if (v75) {
    uint64_t v76 = *(unsigned __int16 *)(v75 + 8);
  }
  else {
    uint64_t v76 = 0;
  }
  unint64_t v77 = sub_1CD7FF4E8(v74, (const char *)2, (const llvm::APInt *)&v106, (llvm *)1, 0, v41, v40, v76);
  unsigned int v78 = v110;
  if (v110 != &v112) {
LABEL_57:
  }
    free(v78);
LABEL_75:
  if (v106)
  {
    int v85 = *v106;
    if ((v85 - 4) > 0x1E)
    {
      if ((v85 - 3) >= 0xFFFFFFFE) {
        unint64_t v87 = v106;
      }
      else {
        unint64_t v87 = 0;
      }
      if ((v85 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v88 = (unint64_t)(v87 + 8);
LABEL_85:
        uint64_t v110 = &v106;
        sub_1CC5FA668(v88 + 16, &v110);
        return v77;
      }
      if (v85 == 3) {
        *((void *)v106 + 1) = 0;
      }
    }
    else if ((v106[1] & 0x7F) == 2 || *((_DWORD *)v106 + 3))
    {
      uint64_t v89 = *((void *)v106 + 2);
      if ((v89 & 4) != 0)
      {
        unint64_t v88 = v89 & 0xFFFFFFFFFFFFFFF8;
        if (v88) {
          goto LABEL_85;
        }
      }
    }
  }
  return v77;
}

uint64_t sub_1CB9F5F14(uint64_t result, uint64_t a2, int a3, llvm::APInt *this)
{
  uint64_t v6 = result;
  unsigned int v7 = *((_DWORD *)this + 2);
  int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v7 >= 0x41) {
    operator new[]();
  }
  if (*((_DWORD *)this + 6) >= 0x41u)
  {
    uint64_t result = *((void *)this + 2);
    if (result) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = v7;
  if (*((_DWORD *)this + 2) > 0x40u)
  {
    uint64_t result = llvm::APInt::reallocate((uint64_t)this, v7);
    uint64_t v9 = *((unsigned int *)this + 2);
    if (v9 <= 0x40)
    {
      *(void *)this = *((void *)this + 2);
      if (!a2) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t result = (uint64_t)memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
      if (!a2) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = v7;
    if (!a2) {
      goto LABEL_27;
    }
  }
  if ((*(_WORD *)(a2 + 24) & 0xFFFE) == 0xF016)
  {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
    int v11 = (unsigned __int16 *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u) {
      int v11 = *(unsigned __int16 **)v11;
    }
    uint64_t v12 = *v11;
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v13 = 0;
    }
    unint64_t v14 = v13 & v12;
    if (*((_DWORD *)this + 6) >= 0x41u)
    {
      uint64_t result = *((void *)this + 2);
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *((void *)this + 2) = v14;
    *((_DWORD *)this + 6) = v7;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v15 = 0;
    }
    unint64_t v16 = v15 & ~v14;
    if (*((_DWORD *)this + 2) <= 0x40u) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
LABEL_27:
  if ((v8 - 396) >= 2)
  {
    if (v8 != 46) {
      return result;
    }
    uint64_t v19 = *(void *)(**(void **)(a2 + 32) + 80);
    uint64_t v20 = (int *)(v19 + 24);
    if (*(_DWORD *)(v19 + 32) >= 0x41u) {
      uint64_t v20 = *(int **)v20;
    }
    uint64_t result = sub_1CB9F6460(*v20);
    if ((result & 0xFF00000000) == 0) {
      return result;
    }
    int v21 = dword_1CDB0D6CC[(int)result];
    uint64_t v22 = *(unsigned char **)(v6 + 184296);
    if (v22[318])
    {
      int v23 = 4;
    }
    else if (v22[319])
    {
      int v23 = 5;
    }
    else if (v22[320])
    {
      int v23 = 6;
    }
    else
    {
      int v23 = v22[321] ? 7 : 9;
    }
    uint64_t result = sub_1CB9E757C(v21, v23);
    if (result > 0x1F) {
      return result;
    }
    if (result == v7) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> (result - v7) << result;
    }
    if (*((_DWORD *)this + 2) < 0x41u)
    {
LABEL_23:
      *(void *)this = v16;
LABEL_24:
      *((_DWORD *)this + 2) = v7;
      return result;
    }
LABEL_21:
    uint64_t result = *(void *)this;
    if (*(void *)this) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
    goto LABEL_23;
  }
  uint64_t v17 = *(unsigned char **)(v6 + 184296);
  if (v17[318])
  {
    int v18 = 4;
  }
  else if (v17[319])
  {
    int v18 = 5;
  }
  else if (v17[320])
  {
    int v18 = 6;
  }
  else if (v17[321])
  {
    int v18 = 7;
  }
  else
  {
    int v18 = 9;
  }
  uint64_t result = sub_1CB9E757C(*(_DWORD *)(**(void **)(a2 + 32) + 76), v18);
  if (result <= 0x1F)
  {
    if (result == v7) {
      unint64_t v24 = 0;
    }
    else {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> (result - v7) << result;
    }
    if (*((_DWORD *)this + 2) >= 0x41u)
    {
      uint64_t result = *(void *)this;
      if (*(void *)this) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)this = v24;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_1CB9F6460(int a1)
{
  uint64_t v1 = 0;
  if (a1 > 2543)
  {
    if (a1 <= 2706)
    {
      if (a1 <= 2664)
      {
        if (a1 == 2544)
        {
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 28;
        }
        else if (a1 == 2586)
        {
LABEL_66:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 21;
        }
        else
        {
          uint64_t v2 = 0;
          if (a1 == 2587)
          {
LABEL_62:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 22;
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
        switch(a1)
        {
          case 2665:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 35;
            break;
          case 2666:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 36;
            break;
          case 2667:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 37;
            break;
          case 2668:
            return v2 | v1;
          case 2669:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 39;
            break;
          case 2670:
            uint64_t v2 = 0;
            uint64_t v1 = 0x100000000;
            break;
          case 2671:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 4;
            break;
          case 2672:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 1;
            break;
          case 2673:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 5;
            break;
          case 2674:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 2;
            break;
          case 2675:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 6;
            break;
          case 2676:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 54;
            break;
          case 2677:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 26;
            break;
          case 2678:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 24;
            break;
          case 2679:
            goto LABEL_65;
          default:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 60;
            if (a1 != 2706)
            {
              uint64_t v1 = 0;
              uint64_t v2 = 0;
            }
            break;
        }
      }
      return v2 | v1;
    }
    if (a1 <= 2794)
    {
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 40;
      uint64_t v3 = 0x100000000;
      uint64_t v4 = 63;
      if (a1 != 2769)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 0;
      }
      if (a1 != 2732)
      {
        uint64_t v1 = v3;
        uint64_t v2 = v4;
      }
      uint64_t v5 = 0x100000000;
      uint64_t v6 = 59;
      uint64_t v7 = 0x100000000;
      uint64_t v8 = 61;
      if (a1 != 2708)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      if (a1 != 2707)
      {
        uint64_t v5 = v7;
        uint64_t v6 = v8;
      }
      BOOL v9 = a1 <= 2731;
    }
    else
    {
      if (a1 <= 2819)
      {
        uint64_t v2 = 0;
        switch(a1)
        {
          case 2795:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 78;
            break;
          case 2796:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 77;
            break;
          case 2797:
          case 2798:
          case 2799:
          case 2800:
          case 2801:
          case 2802:
          case 2803:
          case 2804:
          case 2805:
          case 2806:
          case 2811:
          case 2812:
          case 2813:
            return v2 | v1;
          case 2807:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 65;
            break;
          case 2808:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 68;
            break;
          case 2809:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 66;
            break;
          case 2810:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 67;
            break;
          case 2814:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 76;
            break;
          case 2815:
          case 2816:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 69;
            break;
          default:
LABEL_112:
            uint64_t v2 = 0;
            break;
        }
        return v2 | v1;
      }
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 64;
      uint64_t v10 = 0x100000000;
      uint64_t v11 = 62;
      if (a1 != 2848)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      if (a1 != 2841)
      {
        uint64_t v1 = v10;
        uint64_t v2 = v11;
      }
      uint64_t v5 = 0x100000000;
      uint64_t v6 = 70;
      uint64_t v12 = 0x100000000;
      uint64_t v13 = 79;
      if (a1 != 2822)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      if (a1 != 2820)
      {
        uint64_t v5 = v12;
        uint64_t v6 = v13;
      }
      BOOL v9 = a1 <= 2840;
    }
LABEL_47:
    if (v9) {
      uint64_t v1 = v5;
    }
    if (v9) {
      uint64_t v2 = v6;
    }
    return v2 | v1;
  }
  if (a1 <= 2304)
  {
    if (a1 <= 2131)
    {
      if (a1 == 1269)
      {
LABEL_67:
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 16;
      }
      else
      {
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 29;
        uint64_t v19 = 0x100000000;
        uint64_t v20 = 52;
        if (a1 != 2108)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
        }
        if (a1 != 2107)
        {
          uint64_t v1 = v19;
          uint64_t v2 = v20;
        }
      }
    }
    else
    {
      uint64_t v2 = 0;
      switch(a1)
      {
        case 2132:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 42;
          break;
        case 2133:
        case 2134:
        case 2135:
        case 2136:
        case 2137:
        case 2138:
        case 2141:
        case 2142:
        case 2143:
        case 2144:
        case 2148:
        case 2149:
        case 2153:
        case 2157:
        case 2158:
        case 2159:
        case 2160:
        case 2161:
        case 2162:
        case 2163:
        case 2164:
        case 2165:
        case 2166:
        case 2167:
        case 2168:
        case 2171:
        case 2172:
          return v2 | v1;
        case 2139:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 43;
          break;
        case 2140:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 27;
          break;
        case 2145:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 7;
          break;
        case 2146:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 8;
          break;
        case 2147:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 9;
          break;
        case 2150:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 34;
          break;
        case 2151:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 33;
          break;
        case 2152:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 57;
          break;
        case 2154:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 55;
          break;
        case 2155:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 56;
          break;
        case 2156:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 41;
          break;
        case 2169:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 3;
          break;
        case 2170:
          goto LABEL_67;
        case 2173:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 13;
          break;
        case 2174:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 12;
          break;
        case 2175:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 10;
          break;
        case 2176:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 11;
          break;
        default:
          goto LABEL_112;
      }
    }
    return v2 | v1;
  }
  if (a1 <= 2422)
  {
    if (a1 <= 2364)
    {
      uint64_t v2 = 0;
      switch(a1)
      {
        case 2305:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 38;
          break;
        case 2306:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 30;
          break;
        case 2307:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 32;
          break;
        case 2308:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 31;
          break;
        default:
          return v2 | v1;
      }
      return v2 | v1;
    }
    uint64_t v1 = 0x100000000;
    uint64_t v2 = 18;
    uint64_t v14 = 0x100000000;
    uint64_t v15 = 19;
    if (a1 != 2410)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    if (a1 != 2409)
    {
      uint64_t v1 = v14;
      uint64_t v2 = v15;
    }
    uint64_t v5 = 0x100000000;
    uint64_t v6 = 20;
    uint64_t v16 = 0x100000000;
    uint64_t v17 = 17;
    if (a1 != 2408)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    if (a1 != 2365)
    {
      uint64_t v5 = v16;
      uint64_t v6 = v17;
    }
    BOOL v9 = a1 <= 2408;
    goto LABEL_47;
  }
  uint64_t v2 = 0;
  switch(a1)
  {
    case 2484:
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 25;
      return v2 | v1;
    case 2485:
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 23;
      return v2 | v1;
    case 2486:
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 44;
      return v2 | v1;
    case 2487:
    case 2488:
    case 2489:
    case 2490:
      return v2 | v1;
    case 2491:
      goto LABEL_66;
    case 2492:
      goto LABEL_62;
    default:
      if (a1 == 2423)
      {
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 53;
        return v2 | v1;
      }
      uint64_t v2 = 0;
      if (a1 != 2444) {
        return v2 | v1;
      }
      break;
  }
LABEL_65:
  uint64_t v1 = 0x100000000;
  uint64_t v2 = 14;
  return v2 | v1;
}

uint64_t sub_1CB9F6B14(int a1, int a2, unsigned int a3, llvm::APInt *this, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) != 0) {
    uint64_t v11 = (uint64_t *)(*(void *)(a6 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v11 = (uint64_t *)(*(void *)(a6 + 272) + 8 * a3);
  }
  uint64_t v12 = *v11;
  if (v12 && ((*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3) & 1) != 0)) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned int v14 = *((_DWORD *)this + 2);
  int v15 = **(unsigned __int16 **)(v13 + 16);
  if (v14 >= 0x41) {
    operator new[]();
  }
  uint64_t v16 = (void *)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
    MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = v14;
  if (*((_DWORD *)this + 2) > 0x40u)
  {
    llvm::APInt::reallocate((uint64_t)this, v14);
    uint64_t v17 = *((unsigned int *)this + 2);
    if (v17 <= 0x40) {
      *(void *)this = *((void *)this + 2);
    }
    else {
      memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = v14;
  }
  int v18 = *(void **)(*(void *)(v13 + 24) + 32);
  v209[1] = v211;
  v209[2] = v211;
  v209[3] = 4;
  int v210 = 0;
  v209[0] = &unk_1F261BC50;
  v211[4] = v18;
  v211[5] = v18[5];
  v211[6] = (*(uint64_t (**)(void))(*(void *)v18[2] + 120))(v18[2]);
  v211[7] = *(void *)(*v18 + 40) + 272;
  int v212 = 6;
  uint64_t v213 = 1;
  for (uint64_t i = 15; i != 95; i += 5)
    LODWORD(v209[i]) = -1;
  uint64_t v20 = (unsigned char *)(*(uint64_t (**)(void, void))(*(void *)v18[1] + 16))(v18[1], *v18);
  if (v15 <= 256)
  {
    if ((v15 - 52) >= 2)
    {
      if (v15 != 51)
      {
        if (v15 == 116)
        {
          uint64_t v21 = *(unsigned int *)(v13 + 40);
          if (v21)
          {
            uint64_t v22 = 0;
            int v23 = *(unsigned __int8 **)(v13 + 32);
            while (1)
            {
              int v24 = *v23;
              v23 += 32;
              if (v24 == 17) {
                break;
              }
              if (v21 == ++v22) {
                goto LABEL_24;
              }
            }
          }
          else
          {
LABEL_24:
            LODWORD(v22) = -1;
          }
          uint64_t v25 = sub_1CB9F6460(*(_DWORD *)(*(void *)(v13 + 32) + 32 * v22 + 16));
          if ((v25 & 0xFF00000000) != 0)
          {
            int v26 = dword_1CDB0D6CC[(int)v25];
            if (v20[318])
            {
              int v27 = 4;
            }
            else if (v20[319])
            {
              int v27 = 5;
            }
            else if (v20[320])
            {
              int v27 = 6;
            }
            else
            {
              int v27 = v20[321] ? 7 : 9;
            }
            unsigned int v150 = sub_1CB9E757C(v26, v27);
            if (v150 <= 0x1F)
            {
              unsigned int v204 = v14;
              if (v150 == v14) {
                unint64_t v42 = 0;
              }
              else {
                unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> (v150 - v14) << v150;
              }
LABEL_231:
              if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
                MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
              }
              *(void *)this = v42;
LABEL_235:
              *((_DWORD *)this + 2) = v14;
              return sub_1CB9FB5B0((uint64_t)v209);
            }
          }
        }
        return sub_1CB9FB5B0((uint64_t)v209);
      }
      unsigned int v47 = *(_DWORD *)(*(void *)(v13 + 32) + 164);
      unsigned int v195 = 1;
      uint64_t v194 = (void *)1;
      sub_1CC6DF17C((char *)v209, v47, this, (uint64_t)&v194, (a7 + 1));
      uint64_t v48 = *((unsigned int *)this + 6);
      if (v48 > 0x40)
      {
        int v79 = 0;
        int64_t v80 = (unint64_t)(v48 + 63) >> 6;
        do
        {
          BOOL v81 = v80-- < 1;
          if (v81) {
            break;
          }
          unint64_t v82 = *(void *)(*v16 + 8 * v80);
          v79 += __clz(v82);
        }
        while (!v82);
        int v83 = v48 | 0xFFFFFFC0;
        if ((v48 & 0x3F) == 0) {
          int v83 = 0;
        }
        if (v79 + v83 != v48) {
          goto LABEL_193;
        }
      }
      else if (*v16)
      {
        goto LABEL_193;
      }
      uint64_t v84 = *((unsigned int *)this + 2);
      if (v84 > 0x40)
      {
        int v132 = 0;
        int64_t v133 = (unint64_t)(v84 + 63) >> 6;
        do
        {
          BOOL v81 = v133-- < 1;
          if (v81) {
            break;
          }
          unint64_t v134 = *(void *)(*(void *)this + 8 * v133);
          v132 += __clz(v134);
        }
        while (!v134);
        int v135 = v84 | 0xFFFFFFC0;
        if ((v84 & 0x3F) == 0) {
          int v135 = 0;
        }
        if (v132 + v135 == v84)
        {
LABEL_203:
          if (v195 < 0x41) {
            return sub_1CB9FB5B0((uint64_t)v209);
          }
          unsigned int v147 = v194;
          if (!v194) {
            return sub_1CB9FB5B0((uint64_t)v209);
          }
          goto LABEL_205;
        }
      }
      else if (!*(void *)this)
      {
        goto LABEL_203;
      }
LABEL_193:
      unsigned int v136 = *(_DWORD *)(*(void *)(v13 + 32) + 132);
      unsigned int v204 = 1;
      __src = 0;
      unsigned int v206 = 1;
      uint64_t v205 = 0;
      sub_1CC6DF17C((char *)v209, v136, (llvm::MDNode *)&__src, (uint64_t)&v194, (a7 + 1));
      uint64_t v137 = *((unsigned int *)this + 6);
      if (v137 > 0x40)
      {
        uint64_t v138 = (void *)*v16;
        char v139 = (uint64_t *)v205;
        unint64_t v140 = (unint64_t)(v137 + 63) >> 6;
        do
        {
          uint64_t v141 = *v139++;
          *v138++ &= v141;
          --v140;
        }
        while (v140);
      }
      else
      {
        *v16 &= (unint64_t)v205;
      }
      uint64_t v142 = *((unsigned int *)this + 2);
      if (v142 > 0x40)
      {
        uint64_t v143 = *(void **)this;
        int v144 = (uint64_t *)__src;
        unint64_t v145 = (unint64_t)(v142 + 63) >> 6;
        do
        {
          uint64_t v146 = *v144++;
          *v143++ &= v146;
          --v145;
        }
        while (v145);
      }
      else
      {
        *(void *)this &= (unint64_t)__src;
      }
      if (v206 >= 0x41 && v205) {
        MEMORY[0x1D25D9CB0](v205, 0x1000C8000313F17);
      }
      if (v204 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      goto LABEL_203;
    }
    uint64_t v32 = *(void *)(v13 + 32);
    unsigned int v33 = *(_DWORD *)(v32 + 36);
    unsigned int v204 = 1;
    __src = 0;
    unsigned int v206 = 1;
    uint64_t v205 = 0;
    uint64_t v34 = (a7 + 1);
    sub_1CC6DF17C((char *)v209, *(_DWORD *)(v32 + 68), (llvm::MDNode *)&__src, a5, v34);
    if (v204 > 0x40)
    {
      __int32 v36 = 0;
      unint64_t v162 = ((unint64_t)v204 + 63) >> 6;
      unsigned int v163 = (int8x8_t *)__src;
      do
      {
        int8x8_t v164 = *v163++;
        uint8x8_t v165 = (uint8x8_t)vcnt_s8(v164);
        v165.i16[0] = vaddlv_u8(v165);
        v36 += v165.i32[0];
        --v162;
      }
      while (v162);
    }
    else
    {
      uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
      v35.i16[0] = vaddlv_u8(v35);
      __int32 v36 = v35.i32[0];
    }
    unsigned int v37 = v206;
    if (v206 > 0x40)
    {
      __int32 v39 = 0;
      unint64_t v166 = ((unint64_t)v206 + 63) >> 6;
      uint64_t v167 = (int8x8_t *)v205;
      do
      {
        int8x8_t v168 = *v167++;
        uint8x8_t v169 = (uint8x8_t)vcnt_s8(v168);
        v169.i16[0] = vaddlv_u8(v169);
        v39 += v169.i32[0];
        --v166;
      }
      while (v166);
    }
    else
    {
      uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v205);
      v38.i16[0] = vaddlv_u8(v38);
      __int32 v39 = v38.i32[0];
    }
    if (v39 + v36 != v204)
    {
LABEL_183:
      if (v37 < 0x41) {
        goto LABEL_274;
      }
      goto LABEL_309;
    }
    if ((v33 & 0x80000000) != 0 && (v33 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432)) {
      unint64_t v40 = *(void *)(*(void *)(a6 + 424) + 8 * (v33 & 0x7FFFFFFF));
    }
    else {
      unint64_t v40 = 0;
    }
    unint64_t v202 = v40;
    sub_1CC6DF17C((char *)v209, v33, this, a5, v34);
    unint64_t v58 = sub_1CB8F1DC4(&v202);
    if (v57 == 1) {
    if (v58 > 0x3F)
    }
    {
LABEL_88:
      if (v206 >= 0x41) {
        uint64_t v65 = (uint64_t *)v205;
      }
      else {
        uint64_t v65 = (uint64_t *)&v205;
      }
      uint64_t v66 = *v65;
      if (v15 == 52)
      {
        unsigned int v67 = *((_DWORD *)this + 2);
        unsigned int v195 = v67;
        if (v67 > 0x40) {
          operator new[]();
        }
        if (v67 == v66)
        {
          uint64_t v68 = 0;
          if (v66 >= 0x41 && *(void *)this) {
            MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v68 = *(void *)this >> v66;
        }
        *(void *)this = v68;
        *((_DWORD *)this + 2) = v67;
        unsigned int v69 = *((_DWORD *)this + 6);
        unsigned int v195 = v69;
        if (v69 > 0x40) {
          operator new[]();
        }
        if (v69 == v66)
        {
          uint64_t v70 = 0;
          if (v66 >= 0x41 && *v16) {
            MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v70 = *v16 >> v66;
        }
        *((void *)this + 2) = v70;
        *((_DWORD *)this + 6) = v69;
        unsigned int v71 = *((_DWORD *)this + 2);
        unsigned int v195 = v71;
        if (v71 >= 0x41) {
          operator new[]();
        }
        unint64_t v72 = 0;
        uint64_t v194 = 0;
        unsigned int v73 = v71 - v66;
        if (v71 - v66 != v71)
        {
          if (v73 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v194, v73, v71);
          }
          else
          {
            unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66 << v73;
            uint64_t v194 = (void *)v72;
          }
        }
        uint64_t v74 = *(void *)(*(void *)(v13 + 32) + 112);
        if (v74 != v71)
        {
          if (v74 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v194, v74, v71);
          }
          else
          {
            v72 |= 0xFFFFFFFFFFFFFFFFLL >> (v74 - v71) << v74;
            uint64_t v194 = (void *)v72;
          }
        }
        uint64_t v75 = *((unsigned int *)this + 2);
        if (v75 > 0x40)
        {
          int v85 = *(void **)this;
          unint64_t v86 = (unint64_t)(v75 + 63) >> 6;
          unint64_t v87 = (uint64_t *)v72;
          do
          {
            uint64_t v88 = *v87++;
            *v85++ |= v88;
            --v86;
          }
          while (v86);
        }
        else
        {
          *(void *)this |= v72;
        }
        unsigned int v201 = v71;
        unint64_t v89 = ~v72;
        unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
        if (!v71) {
          unint64_t v90 = 0;
        }
        unint64_t v91 = v90 & v89;
        unint64_t v200 = v90 & v89;
        unsigned int v201 = 0;
        uint64_t v95 = *((unsigned int *)this + 6);
        if (v95 > 0x40)
        {
          uint64_t v96 = (void *)*v16;
          unint64_t v97 = (unint64_t)(v95 + 63) >> 6;
          char v98 = (uint64_t *)v91;
          do
          {
            uint64_t v99 = *v98++;
            *v96++ &= v99;
            --v97;
          }
          while (v97);
          goto LABEL_160;
        }
      }
      else
      {
        unsigned int v76 = *((_DWORD *)this + 2);
        unsigned int v195 = v76;
        if (v76 > 0x40) {
          operator new[]();
        }
        uint64_t v77 = *(void *)this << v66;
        if (v76 == v66) {
          uint64_t v77 = 0;
        }
        if (v76) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
        }
        else {
          unint64_t v78 = 0;
        }
        uint64_t v194 = (void *)(v78 & v77);
        *(void *)this = v194;
        *((_DWORD *)this + 2) = v195;
        unsigned int v92 = *((_DWORD *)this + 6);
        unsigned int v195 = v92;
        if (v92 > 0x40) {
          operator new[]();
        }
        uint64_t v93 = *v16 << v66;
        if (v92 == v66) {
          uint64_t v93 = 0;
        }
        if (v92) {
          unint64_t v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v92;
        }
        else {
          unint64_t v94 = 0;
        }
        uint64_t v194 = (void *)(v94 & v93);
        *((void *)this + 2) = v194;
        *((_DWORD *)this + 6) = v195;
        unsigned int v100 = *((_DWORD *)this + 2);
        unsigned int v195 = v100;
        if (v100 >= 0x41) {
          operator new[]();
        }
        unint64_t v101 = 0;
        uint64_t v194 = 0;
        if (v66)
        {
          if (v66 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(&v194, 0, v66);
          }
          else
          {
            unint64_t v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
            uint64_t v194 = (void *)v101;
          }
        }
        uint64_t v102 = *(void *)(*(void *)(v13 + 32) + 112) + v66;
        if (v102 != v100)
        {
          if (v102 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v194, v102, v100);
          }
          else
          {
            v101 |= 0xFFFFFFFFFFFFFFFFLL >> (v102 - v100) << v102;
            uint64_t v194 = (void *)v101;
          }
        }
        uint64_t v103 = *((unsigned int *)this + 2);
        if (v103 > 0x40)
        {
          long long v104 = *(void **)this;
          unint64_t v105 = (unint64_t)(v103 + 63) >> 6;
          uint64_t v106 = (uint64_t *)v101;
          do
          {
            uint64_t v107 = *v106++;
            *v104++ |= v107;
            --v105;
          }
          while (v105);
        }
        else
        {
          *(void *)this |= v101;
        }
        unsigned int v199 = v100;
        unint64_t v108 = ~v101;
        unint64_t v109 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
        if (!v100) {
          unint64_t v109 = 0;
        }
        unint64_t v91 = v109 & v108;
        v198[1] = v109 & v108;
        unsigned int v199 = 0;
        uint64_t v110 = *((unsigned int *)this + 6);
        if (v110 > 0x40)
        {
          uint64_t v111 = (void *)*v16;
          unint64_t v112 = (unint64_t)(v110 + 63) >> 6;
          long long v113 = (uint64_t *)v91;
          do
          {
            uint64_t v114 = *v113++;
            *v111++ &= v114;
            --v112;
          }
          while (v112);
          goto LABEL_160;
        }
      }
      *v16 &= v91;
LABEL_160:
      int v115 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
      if (v115 < 0 && (uint64_t v116 = v115 & 0x7FFFFFFF, v116 < *(_DWORD *)(a6 + 432))) {
        unint64_t v117 = *(void *)(*(void *)(a6 + 424) + 8 * v116);
      }
      else {
        unint64_t v117 = 0;
      }
      v198[0] = v117;
      unint64_t v119 = sub_1CB8F1DC4(v198);
      if (v118 == 1) {
      if (v119 <= 0x3F)
      }
      {
        unsigned int v121 = sub_1CB8F1DC4(v198);
        if (v120 == 1) {
        unsigned int v122 = *((_DWORD *)this + 2);
        }
        if (v121 > 0x40)
        {
          if (v122 != v121) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v194, (uint64_t)this);
          if (*((_DWORD *)this + 6) != v121) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v207, (uint64_t)this + 16);
          unsigned int v121 = v208;
          unint64_t v129 = v207;
        }
        else
        {
          uint64_t v123 = this;
          if (v122 >= 0x41) {
            uint64_t v123 = *(llvm::APInt **)this;
          }
          uint64_t v124 = *(void *)v123;
          unsigned int v195 = v121;
          unint64_t v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v121;
          unint64_t v126 = v125;
          if (!v121) {
            unint64_t v126 = 0;
          }
          uint64_t v194 = (void *)(v126 & v124);
          uint64_t v127 = (uint64_t *)((char *)this + 16);
          if (*((_DWORD *)this + 6) >= 0x41u) {
            uint64_t v127 = (uint64_t *)*v16;
          }
          uint64_t v128 = *v127;
          if (!v121) {
            unint64_t v125 = 0;
          }
          unint64_t v129 = v125 & v128;
        }
        unsigned int v130 = v195;
        uint64_t v131 = v194;
        if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
          MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
        }
        *(void *)this = v131;
        *((_DWORD *)this + 2) = v130;
        if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
          MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
        }
        *((void *)this + 2) = v129;
        *((_DWORD *)this + 6) = v121;
      }
      unsigned int v37 = v206;
      goto LABEL_183;
    }
    unint64_t v59 = *((unsigned int *)this + 2);
    uint64_t v60 = *(void *)this;
    if (v59 != 64)
    {
      if (v59 > 0x3F)
      {
        *(void *)(v60 + ((v59 >> 3) & 0x1FFFFFF8)) |= -1 << *((_DWORD *)this + 2);
        uint64_t v61 = (uint64_t *)*((void *)this + 2);
        if (*(void *)this) {
          MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
        }
        goto LABEL_81;
      }
      v60 |= -1 << v59;
    }
    uint64_t v61 = (uint64_t *)*v16;
LABEL_81:
    *(void *)this = v60;
    *((_DWORD *)this + 2) = 64;
    if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
      MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
    }
    *((void *)this + 2) = v61;
    *((_DWORD *)this + 6) = 64;
    unsigned int v63 = sub_1CB8F1DC4(&v202);
    if (v62 == 1) {
    unsigned int v64 = *((_DWORD *)this + 2);
    }
    if (v64 != v63)
    {
      if (v63 > 0x3F || v64 > 0x40) {
        llvm::APInt::setBitsSlowCase(this, v63, v64);
      }
      else {
        *(void *)this |= 0xFFFFFFFFFFFFFFFFLL >> (v63 - v64) << v63;
      }
    }
    goto LABEL_88;
  }
  if (v15 > 312)
  {
    if (v15 != 313)
    {
      if (v15 == 320)
      {
        if (v20[318])
        {
          int v31 = 4;
        }
        else if (v20[319])
        {
          int v31 = 5;
        }
        else if (v20[320])
        {
          int v31 = 6;
        }
        else
        {
          int v31 = v20[321] ? 7 : 9;
        }
        unsigned int v148 = sub_1CB9E757C(*(_DWORD *)(*(void *)(v13 + 32) + 48), v31);
        if (v148 <= 0x1F)
        {
          unsigned int v204 = v14;
          if (v148 == v14) {
            unint64_t v149 = 0;
          }
          else {
            unint64_t v149 = 0xFFFFFFFFFFFFFFFFLL >> (v148 - v14) << v148;
          }
          if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
            MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
          }
          *(void *)this = v149;
          goto LABEL_235;
        }
      }
      return sub_1CB9FB5B0((uint64_t)v209);
    }
    uint64_t v43 = *(void *)(v13 + 32);
    int v44 = *(_DWORD *)(v43 + 4);
    if (v44 < 0 && (uint64_t v45 = v44 & 0x7FFFFFFF, v45 < *(_DWORD *)(a6 + 432))) {
      unint64_t v46 = *(void *)(*(void *)(a6 + 424) + 8 * v45);
    }
    else {
      unint64_t v46 = 0;
    }
    unsigned int v49 = *(_DWORD *)(v43 + 36);
    unsigned int v50 = *(_DWORD *)(v43 + 100);
    if ((v49 & 0x80000000) != 0 && (v49 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
    {
      unint64_t v51 = *(void *)(*(void *)(a6 + 424) + 8 * (v49 & 0x7FFFFFFF));
      if (v51)
      {
        unsigned int v52 = v51 >> 3;
        goto LABEL_65;
      }
      if ((v51 & 4) != 0)
      {
        if ((v51 & 2) != 0) {
          unsigned int v52 = (unsigned __int16)(v51 >> 19);
        }
        else {
          unsigned int v52 = v51 >> 19;
        }
LABEL_65:
        char v53 = *(unsigned char *)(v43 + 80);
        char v54 = *(unsigned char *)(v43 + 144);
        unsigned int v204 = v52;
        if (v52 > 0x40) {
          operator new[]();
        }
        unsigned int v206 = v52;
        __src = 0;
        uint64_t v205 = 0;
        if ((v50 & 0x80000000) != 0 && (v50 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
        {
          unint64_t v55 = *(void *)(*(void *)(a6 + 424) + 8 * (v50 & 0x7FFFFFFF));
          if (v55)
          {
            unsigned int v56 = v55 >> 3;
            goto LABEL_250;
          }
          if ((v55 & 4) != 0)
          {
            if ((v55 & 2) != 0) {
              unsigned int v56 = (unsigned __int16)(v55 >> 19);
            }
            else {
              unsigned int v56 = v55 >> 19;
            }
LABEL_250:
            unsigned int v195 = v56;
            if (v56 > 0x40) {
              operator new[]();
            }
            unsigned int v197 = v56;
            uint64_t v194 = 0;
            uint64_t v196 = 0;
            sub_1CC6DF17C((char *)v209, v49, (llvm::MDNode *)&__src, a5, (a7 + 1));
            if (v204 > 0x40)
            {
              __int32 v152 = 0;
              unint64_t v170 = ((unint64_t)v204 + 63) >> 6;
              uint64_t v171 = (int8x8_t *)__src;
              do
              {
                int8x8_t v172 = *v171++;
                uint8x8_t v173 = (uint8x8_t)vcnt_s8(v172);
                v173.i16[0] = vaddlv_u8(v173);
                v152 += v173.i32[0];
                --v170;
              }
              while (v170);
            }
            else
            {
              uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
              v151.i16[0] = vaddlv_u8(v151);
              __int32 v152 = v151.i32[0];
            }
            if (v206 > 0x40)
            {
              __int32 v154 = 0;
              unint64_t v174 = ((unint64_t)v206 + 63) >> 6;
              uint64_t v175 = (int8x8_t *)v205;
              do
              {
                int8x8_t v176 = *v175++;
                uint8x8_t v177 = (uint8x8_t)vcnt_s8(v176);
                v177.i16[0] = vaddlv_u8(v177);
                v154 += v177.i32[0];
                --v174;
              }
              while (v174);
            }
            else
            {
              uint8x8_t v153 = (uint8x8_t)vcnt_s8((int8x8_t)v205);
              v153.i16[0] = vaddlv_u8(v153);
              __int32 v154 = v153.i32[0];
            }
            if (v154 + v152 == v204)
            {
              sub_1CC6DF17C((char *)v209, v50, (llvm::MDNode *)&v194, a5, (a7 + 1));
              if (v195 > 0x40)
              {
                __int32 v156 = 0;
                unint64_t v178 = ((unint64_t)v195 + 63) >> 6;
                uint64_t v179 = (int8x8_t *)v194;
                do
                {
                  int8x8_t v180 = *v179++;
                  uint8x8_t v181 = (uint8x8_t)vcnt_s8(v180);
                  v181.i16[0] = vaddlv_u8(v181);
                  v156 += v181.i32[0];
                  --v178;
                }
                while (v178);
              }
              else
              {
                uint8x8_t v155 = (uint8x8_t)vcnt_s8((int8x8_t)v194);
                v155.i16[0] = vaddlv_u8(v155);
                __int32 v156 = v155.i32[0];
              }
              if (v197 > 0x40)
              {
                __int32 v158 = 0;
                unint64_t v182 = ((unint64_t)v197 + 63) >> 6;
                uint64_t v183 = (int8x8_t *)v196;
                do
                {
                  int8x8_t v184 = *v183++;
                  uint8x8_t v185 = (uint8x8_t)vcnt_s8(v184);
                  v185.i16[0] = vaddlv_u8(v185);
                  v158 += v185.i32[0];
                  --v182;
                }
                while (v182);
              }
              else
              {
                uint8x8_t v157 = (uint8x8_t)vcnt_s8((int8x8_t)v196);
                v157.i16[0] = vaddlv_u8(v157);
                __int32 v158 = v157.i32[0];
              }
              if (v158 + v156 == v195)
              {
                unsigned int v191 = v204;
                if (v204 > 0x40) {
                  operator new[]();
                }
                uint64_t v190 = __src;
                unsigned int v193 = v206;
                if (v206 > 0x40) {
                  operator new[]();
                }
                uint64_t v192 = v205;
                char v159 = sub_1CB9F8A88((llvm::APInt *)&v190, v53, v46);
                unsigned int v187 = v195;
                if (v195 > 0x40) {
                  operator new[]();
                }
                uint64_t v186 = v194;
                unsigned int v189 = v197;
                if (v197 > 0x40) {
                  operator new[]();
                }
                uint64_t v188 = v196;
                uint64_t v160 = (void)sub_1CB9F8A88((llvm::APInt *)&v186, v54, v46) * (void)v159;
                if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
                  MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
                }
                *(void *)this = ~v160;
                *((_DWORD *)this + 2) = 64;
                if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
                  MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
                }
                *((void *)this + 2) = v160;
                *((_DWORD *)this + 6) = 64;
                if (v189 >= 0x41 && v188) {
                  MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
                }
                if (v187 >= 0x41 && v186) {
                  MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
                }
                if (v193 >= 0x41 && v192) {
                  MEMORY[0x1D25D9CB0](v192, 0x1000C8000313F17);
                }
                if (v191 >= 0x41 && v190) {
                  MEMORY[0x1D25D9CB0](v190, 0x1000C8000313F17);
                }
              }
            }
            if (v197 >= 0x41 && v196) {
              MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
            }
            if (v195 >= 0x41 && v194) {
              MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
            }
            if (v206 < 0x41)
            {
LABEL_274:
              if (v204 < 0x41) {
                return sub_1CB9FB5B0((uint64_t)v209);
              }
              unsigned int v147 = __src;
              if (!__src) {
                return sub_1CB9FB5B0((uint64_t)v209);
              }
LABEL_205:
              MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
              return sub_1CB9FB5B0((uint64_t)v209);
            }
LABEL_309:
            if (v205) {
              MEMORY[0x1D25D9CB0](v205, 0x1000C8000313F17);
            }
            goto LABEL_274;
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        unsigned int v56 = (unsigned __int16)(v55 >> 3);
        goto LABEL_250;
      }
    }
    else
    {
      unint64_t v51 = 0;
    }
    unsigned int v52 = (unsigned __int16)(v51 >> 3);
    goto LABEL_65;
  }
  if (v15 == 257)
  {
    uint64_t v41 = *(void *)(*(void *)(v13 + 32) + 80);
    unsigned int v204 = v14;
    unint64_t v42 = 0;
    __src = 0;
    if (v41 != v14)
    {
      if (v41 > 0x3F) {
        llvm::APInt::setBitsSlowCase(&__src, v41, v14);
      }
      else {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> (v41 - v14) << v41;
      }
    }
    goto LABEL_231;
  }
  if (v15 == 269)
  {
    uint64_t v28 = *(void *)(v18[7] + 8)
        + 40 * (*(_DWORD *)(v18[7] + 32) + *(_DWORD *)(*(void *)(v13 + 32) + 48));
    unsigned int v29 = *(unsigned __int8 *)(v28 + 16);
    if (*(unsigned char *)(v28 + 16))
    {
      if (v29 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(this, 0, v29);
      }
      else
      {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
        if (*((_DWORD *)this + 2) > 0x40u) {
          **(void **)this |= v30;
        }
        else {
          *(void *)this |= v30;
        }
      }
    }
  }
  return sub_1CB9FB5B0((uint64_t)v209);
}

uint64_t *sub_1CB9F87DC@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v4 = (uint64_t)result;
  unsigned int v6 = *((_DWORD *)result + 2);
  if (a2 > 0x40)
  {
    if (v6 != a2) {
      operator new[]();
    }
    uint64_t result = (uint64_t *)sub_1CD0463BC((uint64_t)&__src, (uint64_t)result);
    unsigned int v9 = v17;
  }
  else
  {
    uint64_t v7 = *result;
    unsigned int v17 = a2;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v8 = 0;
    }
    __src = (void *)(v8 & v7);
    unsigned int v9 = a2;
  }
  if (v6 == v9)
  {
    unsigned int v9 = v6;
  }
  else
  {
    if (v6 <= 0x3F && v9 <= 0x40)
    {
      uint64_t v10 = (void *)((unint64_t)__src | (0xFFFFFFFFFFFFFFFFLL >> (v6 - v9) << v6));
      __src = v10;
      goto LABEL_9;
    }
    uint64_t result = llvm::APInt::setBitsSlowCase(&__src, v6, v9);
    unsigned int v9 = v17;
  }
  if (v9 > 0x40) {
    operator new[]();
  }
  uint64_t v10 = __src;
LABEL_9:
  if (v3 > 0x40)
  {
    if (*(_DWORD *)(v4 + 24) != v3) {
      operator new[]();
    }
    uint64_t result = (uint64_t *)sub_1CD0463BC((uint64_t)&v14, v4 + 16);
    unsigned int v3 = v15;
    unint64_t v13 = v14;
  }
  else
  {
    uint64_t v11 = *(void *)(v4 + 16);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    if (!v3) {
      unint64_t v12 = 0;
    }
    unint64_t v13 = v12 & v11;
    unint64_t v14 = v12 & v11;
  }
  *(_DWORD *)(a3 + 8) = v9;
  *(void *)a3 = v10;
  *(_DWORD *)(a3 + 24) = v3;
  *(void *)(a3 + 16) = v13;
  unsigned int v15 = 0;
  if (v17 >= 0x41)
  {
    uint64_t result = (uint64_t *)__src;
    if (__src) {
      return (uint64_t *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return result;
}

void *sub_1CB9F8A88(llvm::APInt *this, int a2, unint64_t a3)
{
  if (a2 == 2)
  {
    unsigned int v7 = (unsigned __int16)(a3 >> 3);
    unsigned int v8 = (unsigned __int16)(a3 >> 19);
    if ((a3 & 2) == 0) {
      unsigned int v8 = a3 >> 19;
    }
    if ((a3 & 4) != 0) {
      unsigned int v7 = v8;
    }
    if (a3) {
      unsigned int v9 = a3 >> 3;
    }
    else {
      unsigned int v9 = v7;
    }
    llvm::APInt::sext((uint64_t)this, v9, (uint64_t)&v28);
    llvm::APInt::sext((uint64_t)this + 16, v9, (uint64_t)&v32);
    unsigned int v10 = v29;
    uint64_t v11 = v28;
    unint64_t v12 = v32;
    if (v33 >= 0x41)
    {
      unint64_t v13 = (void *)*v32;
      MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
      unint64_t v12 = v13;
    }
    if (v10 >= 0x41 && v11) {
      MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  else
  {
    if (a2 == 1)
    {
      if (a3)
      {
        unint64_t v5 = a3 >> 3;
        int v6 = a3 >> 3;
      }
      else if ((a3 & 4) != 0)
      {
        uint64_t v15 = 0xFFFFLL;
        if ((a3 & 2) == 0) {
          uint64_t v15 = 0xFFFFFFFFLL;
        }
        unint64_t v5 = v15 & (a3 >> 19);
        if ((a3 & 2) != 0) {
          int v6 = (unsigned __int16)(a3 >> 19);
        }
        else {
          int v6 = a3 >> 19;
        }
      }
      else
      {
        LODWORD(v5) = (unsigned __int16)(a3 >> 3);
        int v6 = v5;
      }
      int v16 = *((_DWORD *)this + 2);
      unsigned int v33 = v5;
      if (v5 >= 0x41) {
        operator new[]();
      }
      unint64_t v17 = 0;
      uint64_t v32 = 0;
      if (v16 != v6)
      {
        unsigned int v18 = v16 - v6 + v5;
        if (v18 > 0x3F)
        {
          llvm::APInt::setBitsSlowCase(&v32, v18, v5);
          if ((a3 & 1) == 0)
          {
LABEL_32:
            if ((a3 & 4) != 0)
            {
              if ((a3 & 2) != 0) {
                unsigned int v19 = (unsigned __int16)(a3 >> 19);
              }
              else {
                unsigned int v19 = a3 >> 19;
              }
            }
            else
            {
              unsigned int v19 = (unsigned __int16)(a3 >> 3);
            }
            goto LABEL_40;
          }
LABEL_39:
          unsigned int v19 = a3 >> 3;
LABEL_40:
          sub_1CB9F87DC((uint64_t *)this, v19, (uint64_t)&v28);
          if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
            MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
          }
          *(void *)this = v28;
          *((_DWORD *)this + 2) = v29;
          unsigned int v29 = 0;
          uint64_t v20 = (void *)((char *)this + 16);
          if (*((_DWORD *)this + 6) >= 0x41u && *v20)
          {
            MEMORY[0x1D25D9CB0](*v20, 0x1000C8000313F17);
            unsigned int v27 = v29;
            *((void *)this + 2) = v30;
            *((_DWORD *)this + 6) = v31;
            int v31 = 0;
            if (v27 >= 0x41 && v28) {
              MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
            }
          }
          else
          {
            *((void *)this + 2) = v30;
            *((_DWORD *)this + 6) = v31;
          }
          uint64_t v21 = *((unsigned int *)this + 2);
          if (v21 > 0x40)
          {
            uint64_t v22 = *(void **)this;
            unint64_t v23 = (unint64_t)(v21 + 63) >> 6;
            int v24 = (uint64_t *)v17;
            do
            {
              uint64_t v25 = *v24++;
              *v22++ |= v25;
              --v23;
            }
            while (v23);
          }
          else
          {
            *(void *)this |= v17;
          }
          if (*((_DWORD *)this + 6) >= 0x41u) {
            uint64_t v20 = (void *)*v20;
          }
          return (void *)*v20;
        }
        unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> (v16 - v6) << v18;
        uint64_t v32 = (void *)v17;
      }
      if ((a3 & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_39;
    }
    unint64_t v14 = (char *)this + 16;
    if (*((_DWORD *)this + 6) >= 0x41u) {
      unint64_t v14 = *(char **)v14;
    }
    return *(void **)v14;
  }
  return v12;
}

BOOL sub_1CB9F8DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  if ((_BYTE)a2)
  {
    if (a2 - 15 < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  int v5 = a4;
  if ((_BYTE)a4)
  {
    if (a4 - 15 < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  if ((_BYTE)a2)
  {
    if (a2 - 2 >= 6) {
      return 0;
    }
  }
  else
  {
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
      int v13 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
    }
    else {
      int v13 = *(_DWORD *)(a3 + 8);
    }
    if (v13 != 13) {
      return 0;
    }
  }
  if (!(_BYTE)a4)
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
      int v14 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8);
    }
    else {
      int v14 = *(_DWORD *)(a5 + 8);
    }
    if (v14 == 13) {
      goto LABEL_9;
    }
    return 0;
  }
  if (a4 - 2 >= 6) {
    return 0;
  }
LABEL_9:
  if ((_BYTE)a2) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v17);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  }
  unsigned int v8 = ExtendedSizeInBits;
  if (v7 == 1) {
  if (v5)
  }
    unsigned int v9 = sub_1CB87E200((unsigned __int8 *)v16);
  else {
    unsigned int v9 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  }
  if (v10 == 1)
  {
    unsigned int v15 = v9;
    unsigned int v9 = v15;
  }
  return v9 > 0xF && v8 > v9;
}

BOOL sub_1CB9F8F6C(int a1, llvm::Type *this, llvm::Type *a3)
{
  if (*((unsigned char *)this + 8) != 13 || *((unsigned char *)a3 + 8) != 13) {
    return 0;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  if (v4 == 1) {
  unsigned int v7 = llvm::Type::getPrimitiveSizeInBits(a3);
  }
  if (v6 == 1) {
  return v7 > 0xF && PrimitiveSizeInBits > v7;
  }
}

BOOL sub_1CB9F9000(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (!*a3) {
    goto LABEL_2;
  }
  unsigned int v7 = *(_DWORD *)(*(void *)v3 + 8);
  if ((v7 & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(**(void **)(*(void *)v3 + 16) + 8);
  }
  unsigned int v8 = v7 >> 8;
  BOOL result = 1;
  if (v8 != 3 && v8 != 64)
  {
LABEL_2:
    if (v3) {
      BOOL v4 = *((unsigned char *)a3 + 16) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    return v4 || a3[3] == 0;
  }
  return result;
}

uint64_t sub_1CB9F9064(uint64_t a1, uint64_t a2)
{
  unsigned int v9 = &v10;
  uint64_t v10 = 0;
  if (sub_1CC04C34C(&v9, a2) && v10) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 62)
  {
    uint64_t v7 = **(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v8 = *(_DWORD *)(v7 + 8);
    if ((v8 & 0xFE) == 0x12) {
      int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
    }
    if ((v8 & 0xFFFFFF00) == 0x4000) {
      return 0;
    }
    return sub_1CB9F9158(a2) ^ 1;
  }
  if (v4 != 84) {
    return sub_1CB9F9158(a2) ^ 1;
  }
  uint64_t v5 = *(void *)(a2 - 32);
  if (!v5) {
    return sub_1CB9F9158(a2) ^ 1;
  }
  if (*(unsigned char *)(v5 + 16)) {
    return sub_1CB9F9158(a2) ^ 1;
  }
  if (*(void *)(v5 + 24) != *(void *)(a2 + 72)) {
    return sub_1CB9F9158(a2) ^ 1;
  }
  if ((*(unsigned char *)(v5 + 33) & 0x20) == 0) {
    return sub_1CB9F9158(a2) ^ 1;
  }
  uint64_t result = 0;
  int v6 = *(_DWORD *)(v5 + 36);
  if (v6 != 139 && v6 != 2484 && v6 != 2677) {
    return sub_1CB9F9158(a2) ^ 1;
  }
  return result;
}

uint64_t sub_1CB9F9158(uint64_t a1)
{
  if (a1)
  {
    unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
    do
    {
      uint64_t v2 = v1 - 54;
      if (v2 > 0x23) {
        break;
      }
      if (((1 << v2) & 0x800987000) == 0)
      {
        if (v2)
        {
          if (v2 == 6)
          {
            uint64_t v11 = **(void **)(a1 - 32);
            int v12 = *(_DWORD *)(v11 + 8);
            if ((v12 & 0xFE) == 0x12) {
              int v12 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
            }
            if ((v12 & 0xFFFFFF00) == 0x4000) {
              return 1;
            }
          }
          return 0;
        }
        int v6 = *(_DWORD *)(a1 + 20);
        if ((v6 & 0x40000000) != 0) {
          uint64_t v7 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v7 = a1 - 32 * (v6 & 0x7FFFFFF);
        }
        uint64_t v8 = *(void *)(v7 + 32);
        if (v8) {
          BOOL v9 = *(unsigned char *)(v8 + 16) == 16;
        }
        else {
          BOOL v9 = 0;
        }
        if (!v9) {
          return 0;
        }
        uint64_t v10 = (void *)(v8 + 24);
        if (*(_DWORD *)(v8 + 32) >= 0x41u) {
          uint64_t v10 = (void *)*v10;
        }
        if (*v10 != 16) {
          return 0;
        }
      }
      int v3 = *(_DWORD *)(a1 + 20);
      if ((v3 & 0x40000000) != 0) {
        int v4 = *(uint64_t **)(a1 - 8);
      }
      else {
        int v4 = (uint64_t *)(a1 - 32 * (v3 & 0x7FFFFFF));
      }
      a1 = *v4;
      unsigned int v1 = *(unsigned __int8 *)(*v4 + 16);
      if (a1) {
        BOOL v5 = v1 >= 0x1C;
      }
      else {
        BOOL v5 = 0;
      }
    }
    while (v5);
  }
  return 0;
}

BOOL sub_1CB9F9254(int a1, llvm::Type ***this, uint64_t a3)
{
  int v4 = (llvm::Type *)this;
  if ((this[1] & 0xFE) == 0x12) {
    int v4 = *this[2];
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  if (PrimitiveSizeInBits != 32 && PrimitiveSizeInBits != 16) {
    return 0;
  }
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  int v7 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
  return v7 == 32 || v7 == 64;
}

BOOL sub_1CB9F92E4(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  return (a2 & 0xFE) == 4 && a4 - 5 < 2;
}

uint64_t sub_1CB9F9300(uint64_t a1, uint64_t a2)
{
  int v3 = **(unsigned __int16 **)(a2 + 16);
  BOOL v4 = (v3 - 81) > 0x2D || ((1 << (v3 - 81)) & 0x218000000001) == 0;
  if (v4 && v3 != 269) {
    return 0;
  }
  uint64_t result = 1;
  if (v3 != 81 && v3 != 269)
  {
    int v6 = *(void **)(*(void *)(a2 + 24) + 32);
    uint64_t v7 = v6[5];
    if (v3 == 126)
    {
      uint64_t v8 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
      BOOL v9 = (uint64_t *)((v8 & 0x80000000) != 0
                     ? *(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                     : *(void *)(v7 + 272) + 8 * v8);
      uint64_t v10 = *v9;
      if (v10)
      {
        while ((*(unsigned char *)(v10 + 3) & 1) != 0)
        {
          uint64_t v10 = *(void *)(v10 + 24);
          if (!v10) {
            goto LABEL_15;
          }
        }
        uint64_t v18 = *(void *)(v10 + 8);
        if (**(_WORD **)(v18 + 16) == 81) {
          return 1;
        }
        uint64_t result = 1;
        while (1)
        {
          uint64_t v10 = *(void *)(v10 + 24);
          if (!v10) {
            break;
          }
          if ((*(unsigned char *)(v10 + 3) & 1) == 0)
          {
            uint64_t v19 = *(void *)(v10 + 8);
            if (v19 != v18)
            {
              uint64_t v18 = *(void *)(v10 + 8);
              if (**(_WORD **)(v19 + 16) == 81) {
                return result;
              }
            }
          }
        }
      }
    }
LABEL_15:
    uint64_t v11 = *(llvm::Module **)(*v6 + 40);
    unint64_t v23 = "agx.reduce.reg.pressure";
    __int16 v24 = 259;
    Nameduint64_t Metadata = llvm::Module::getNamedMetadata(v11, &v23);
    if (!NamedMetadata) {
      goto LABEL_41;
    }
    uint64_t v13 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                    + 128);
    int v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      int v14 = (void *)*v14;
    }
    if (!*v14)
    {
LABEL_41:
      if ((v3 & 0xFFFE) != 0x78) {
        return 0;
      }
      uint64_t v15 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
      int v16 = (uint64_t *)((v15 & 0x80000000) != 0
                      ? *(void *)(v7 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                      : *(void *)(v7 + 272) + 8 * v15);
      uint64_t v17 = *v16;
      if (v17)
      {
        while ((*(unsigned char *)(v17 + 3) & 1) != 0)
        {
          uint64_t v17 = *(void *)(v17 + 24);
          if (!v17) {
            return 1;
          }
        }
        char v20 = 0;
        uint64_t v21 = *(void *)(v17 + 8);
LABEL_34:
        int v22 = **(unsigned __int16 **)(v21 + 16);
        if (v22 != 69 && v22 != 81)
        {
          v20 |= *(void *)(v21 + 24) == *(void *)(a2 + 24);
          while (1)
          {
            uint64_t v17 = *(void *)(v17 + 24);
            if (!v17) {
              break;
            }
            if ((*(unsigned char *)(v17 + 3) & 1) == 0 && *(void *)(v17 + 8) != v21)
            {
              uint64_t v21 = *(void *)(v17 + 8);
              goto LABEL_34;
            }
          }
          if (v20) {
            return 0;
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1CB9F9530()
{
  return 5;
}

uint64_t sub_1CB9F9538()
{
  return 1;
}

uint64_t sub_1CB9F9540()
{
  return 1;
}

uint64_t *sub_1CB9F9548(int a1, int a2, uint64_t a3, void *a4, llvm::APFloatBase *a5, uint64_t a6)
{
  if (a1) {
    int v9 = 5017;
  }
  else {
    int v9 = 5008;
  }
  if (a1) {
    int v10 = 5357;
  }
  else {
    int v10 = 5348;
  }
  if (a2 == 2488) {
    int v11 = v9;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = *((void *)a5 + 104);
  if (v12) {
    __int16 v13 = *(_WORD *)(v12 + 8);
  }
  else {
    __int16 v13 = 0;
  }
  int v14 = sub_1CD7F3564(a5, (const char *)0xC7, a6, (llvm *)4, 0, a3, a4, v13);
  sub_1CD3FC878((uint64_t)&v31, (uint64_t)a5, (uint64_t)v14, v15, 0, 1, 1);
  if ((v34 | 2) == 2)
  {
    sub_1CB9F9888(v31, v32, (uint64_t)&v31, (uint64_t)&v33, (unsigned int *)&v31, (uint64_t)a5);
    int v34 = 1;
    int v16 = *((unsigned __int16 *)v31 + 12);
    if (v31 && v16 == 45)
    {
      if (*((_DWORD *)v31 + 20) == 64) {
        int v34 = 3;
      }
      unsigned int v35 = dword_1CDB0D7C4[*((int *)v31 + 19) - 1];
    }
    else
    {
      if (v16 == 35) {
        int v34 = 6;
      }
      long long v36 = *(_OWORD *)(v31[5] + 16 * v32);
      if ((_BYTE)v36) {
        unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v36);
      }
      else {
        unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v36);
      }
      if (v18 == 1)
      {
        unsigned int v27 = ExtendedSizeInBits;
        unsigned int ExtendedSizeInBits = v27;
      }
      unsigned int v35 = ExtendedSizeInBits;
    }
  }
  uint64_t v19 = *(unsigned __int8 **)a6;
  unsigned int v29 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v29, v19, 2);
  }
  int v30 = *(_DWORD *)(a6 + 8);
  LODWORD(v36) = 0;
  int v28 = 1;
  if (a1) {
    unsigned __int8 v20 = 4;
  }
  else {
    unsigned __int8 v20 = 5;
  }
  uint64_t v21 = sub_1CD40A3D4((uint64_t)a5, v11, (uint64_t)&v29, v20, 0, (unsigned int *)&v36, (uint64_t)&v31, &v28);
  if (v29)
  {
    int v22 = *v29;
    if ((v22 - 4) > 0x1E)
    {
      if ((v22 - 3) >= 0xFFFFFFFE) {
        __int16 v24 = v29;
      }
      else {
        __int16 v24 = 0;
      }
      if ((v22 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v25 = (unint64_t)(v24 + 8);
LABEL_42:
        *(void *)&long long v36 = &v29;
        sub_1CC5FA668(v25 + 16, &v36);
        return v21;
      }
      if (v22 == 3) {
        *((void *)v29 + 1) = 0;
      }
    }
    else if ((v29[1] & 0x7F) == 2 || *((_DWORD *)v29 + 3))
    {
      uint64_t v26 = *((void *)v29 + 2);
      if ((v26 & 4) != 0)
      {
        unint64_t v25 = v26 & 0xFFFFFFFFFFFFFFF8;
        if (v25) {
          goto LABEL_42;
        }
      }
    }
  }
  return v21;
}

uint64_t sub_1CB9F97C0(int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(a3 + 44) | *(unsigned __int8 *)(a4 + 44))
  {
    BOOL v6 = 0;
    int v7 = *(_DWORD *)(a3 + 32);
  }
  else
  {
    int v7 = *(_DWORD *)(a3 + 32);
    BOOL v6 = (v7 & 0xFFFFFFFD) != 5 && (*(_DWORD *)(a4 + 32) & 0xFFFFFFFD) != 5;
  }
  BOOL v8 = a2 == 2488;
  int v9 = sub_1CB9F9920(*(void *)a3, v7);
  return dword_1CDB0D090[36 * a1
                       + 18 * v8
                       + 9 * v6
                       + 3 * v9
                       + sub_1CB9F9920(*(void *)a4, *(_DWORD *)(a4 + 32))];
}

uint64_t sub_1CB9F9888(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  BOOL v6 = (unsigned __int8 *)(*(void *)(*(void *)a5 + 40) + 16 * a5[2]);
  int v7 = *v6;
  if (*v6)
  {
    BOOL v10 = (v7 - 120) >= 0x20 && (v7 - 2) >= 6;
    if (!v10 || (v7 - 15) < 0x3C) {
      return sub_1CD402A24(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
    }
    return sub_1CD401D24(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
  }
  uint64_t v8 = *((void *)v6 + 1);
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(v8 + 16) + 8);
  }
  else {
    int v9 = *(_DWORD *)(v8 + 8);
  }
  if (v9 != 13) {
    return sub_1CD401D24(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
  }
  return sub_1CD402A24(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
}

uint64_t sub_1CB9F9920(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2 <= 3 && (a2 & 0xFFFFFFFD) != 5)
  {
    uint64_t v10 = v2;
    uint64_t v11 = v3;
    long long v9 = *(_OWORD *)*(void *)(a1 + 40);
    if ((_BYTE)v9) {
      unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v9);
    }
    else {
      unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v9);
    }
    if (v7 == 1)
    {
      unsigned int v8 = ExtendedSizeInBits;
      unsigned int ExtendedSizeInBits = v8;
    }
    if (ExtendedSizeInBits == 16) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t *sub_1CB9F99B4(uint64_t *result, unsigned int *a2, unsigned int a3)
{
  if ((*result & 1) == 0) {
    return (uint64_t *)sub_1CB9F9B60(*result, a2, a3);
  }
  *uint64_t result = *result & 0xFC00000000000000 | (2
                                            * ((*(void *)a2 | ((unint64_t)*result >> 1) & ~(-1 << ((unint64_t)*result >> 58))) & ~(-1 << ((unint64_t)*result >> 58)))) | 1;
  return result;
}

void sub_1CB9F99F8(uint64_t a1, char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      uint64_t v11 = &a2[-v5];
      sub_1CB9F9C00(a1, v8);
      unint64_t v5 = *(void *)a1;
      a2 = &v11[*(void *)a1];
    }
    else
    {
      sub_1CB9F9C00(a1, v8);
      unint64_t v5 = *(void *)a1;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_1CB9F9A80(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = (a2 + 63) >> 6;
  *(void *)uint64_t result = result + 16;
  *(_DWORD *)(result + 12) = 6;
  if ((a2 + 63) >= 0x1C0)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((a2 + 63) >= 0x40)
  {
    uint64_t v4 = (uint64_t *)(result + 16);
    uint64_t v5 = (a2 + 63) >> 6;
    do
    {
      *v4++ = a3 << 63 >> 63;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 64) = a2;
  if (a3)
  {
    if ((a2 & 0x3F) != 0) {
      *(void *)(result + 16 + 8 * v3 - 8) &= ~(-1 << (a2 & 0x3F));
    }
  }
  return result;
}

uint64_t sub_1CB9F9B60(uint64_t result, unsigned int *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(result + 64);
  unsigned int v4 = (v3 + 31) >> 5;
  if (v4 >= a3) {
    unsigned int v4 = a3;
  }
  if (v4 < 2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(void **)result;
    uint64_t v6 = ((v4 - 2) >> 1) + 1;
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      a2 += 2;
      *v5++ |= v8 | (v9 << 32);
      --v7;
    }
    while (v7);
    v4 &= 1u;
  }
  if (v4) {
    *(void *)(*(void *)result + 8 * v6) |= *a2;
  }
  int v10 = v3 & 0x3F;
  if (v10)
  {
    uint64_t v11 = *(void *)result + 8 * *(unsigned int *)(result + 8);
    *(void *)(v11 - 8) &= ~(-1 << v10);
  }
  return result;
}

void sub_1CB9F9C00(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(8 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = v10;
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = *v8;
      *v8++ = 0;
      *v12++ = v13;
      v11 -= 8;
    }
    while (v11);
    uint64_t v14 = *(void *)a1 - 8;
    do
    {
      uint64_t v15 = *(void *)(v14 + v10);
      *(void *)(v14 + v10) = 0;
      if (v15)
      {
        uint64_t v16 = v14;
        uint64_t v17 = v10;
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = v16;
        uint64_t v10 = v17;
      }
      v10 -= 8;
    }
    while (v10);
    uint64_t v8 = *(uint64_t **)a1;
  }
  if (v8 != (uint64_t *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CB9F9D30(void *a1)
{
  *a1 = &unk_1F25F1D08;
  unsigned int v1 = (void **)a1[2];
  if ((v1 & 1) == 0 && v1)
  {
    if (*v1 != v1 + 2) {
      free(*v1);
    }
    MEMORY[0x1D25D9CE0](v1, 0x1080C40EF38A13ELL);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB9F9DD0()
{
  return 0;
}

uint64_t sub_1CB9F9DD8()
{
  return 1;
}

uint64_t sub_1CB9F9DE0()
{
  return 1;
}

uint64_t sub_1CB9F9DE8()
{
  return 0;
}

unint64_t sub_1CB9F9DF0(unint64_t *a1, int a2)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v21 = (-1 << (a2 + 1)) & (v2 >> 1) & ~(-1 << (v2 >> 58));
    BOOL v22 = v2 >> 58 <= (a2 + 1) || v21 == 0;
    if (!v22) {
      return __clz(__rbit64(v21));
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v3 = a2 + 1;
  int v4 = *(_DWORD *)(v2 + 64);
  if (a2 + 1 == v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = v3 >> 6;
  unsigned int v6 = v4 - 1;
  if (v3 >> 6 > (v4 - 1) >> 6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = 0;
  uint64_t v8 = v6 >> 6;
  int v9 = v3 & 0x3F;
  BOOL v22 = v9 == 0;
  unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v6;
  uint64_t v12 = *(void *)v2;
  if (v22) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ~v10;
  }
  int v14 = -64 * v5;
  uint64_t v15 = v8 - v5;
  uint64_t v16 = v12 + 8 * v5;
  while (1)
  {
    uint64_t v17 = v7 ? -1 : v13;
    unint64_t v18 = v15 == v7 ? v11 : -1;
    unint64_t v19 = v17 & v18 & *(void *)(v16 + 8 * v7);
    if (v19) {
      break;
    }
    v14 -= 64;
    ++v7;
    unint64_t result = 0xFFFFFFFFLL;
    if (v15 + 1 == v7) {
      return result;
    }
  }
  return __clz(__rbit64(v19)) - v14;
}

void ***sub_1CB9F9ED4(void ***a1)
{
  unint64_t v2 = *a1;
  if ((*a1 & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2) {
      free(*v2);
    }
    MEMORY[0x1D25D9CE0](v2, 0x1080C40EF38A13ELL);
  }
  return a1;
}

unint64_t *sub_1CB9F9F38(unint64_t *result, unsigned int a2, unsigned int a3)
{
  if (a2 != a3)
  {
    unint64_t v3 = *result;
    if (*result)
    {
      *unint64_t result = v3 & 0xFC00000000000000 | (2
                                           * (((v3 >> 1) & ~(-1 << (v3 >> 58)) | ((1 << a3) + (-1 << a2))) & ~(-1 << (v3 >> 58)))) | 1;
      return result;
    }
    unsigned int v4 = a2 >> 6;
    if (a2 >> 6 == a3 >> 6)
    {
      uint64_t v5 = (1 << a3) + (-1 << a2);
      uint64_t v6 = *(void *)v3;
LABEL_6:
      *(void *)(v6 + 8 * v4) |= v5;
      return result;
    }
    uint64_t v6 = *(void *)v3;
    *(void *)(v6 + 8 * v4) |= -1 << a2;
    unsigned int v7 = (a2 + 63) & 0xFFFFFFC0;
    if (v7 + 64 <= a3)
    {
      do
      {
        *(void *)(v6 + 8 * (v7 >> 6)) = -1;
        unsigned int v8 = v7 + 64;
        unsigned int v9 = v7 + 128;
        v7 += 64;
      }
      while (v9 <= a3);
    }
    else
    {
      unsigned int v8 = (a2 + 63) & 0xFFFFFFC0;
    }
    if (v8 < a3)
    {
      uint64_t v5 = ~(-1 << a3);
      unsigned int v4 = v8 >> 6;
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_1CB9FA02C(void *a1, unsigned int a2, int a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = 0;
    unint64_t v4 = a2 >> 6;
    for (uint64_t i = (a3 - 1) >> 6; i + 1 > v4; --i)
    {
      if (v3) {
        unint64_t v6 = -1;
      }
      else {
        unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
      }
      unint64_t v7 = *(void *)(*a1 + 8 * i) & v6;
      if ((a2 & 0x3F) != 0) {
        unint64_t v8 = ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
      }
      else {
        unint64_t v8 = -1;
      }
      unint64_t v9 = v7 & v8;
      if (v4 == i) {
        unint64_t v7 = v9;
      }
      v3 += 64;
      if (v7) {
        return ((a3 - 1) >> 6 << 6) - __clz(v7) - v3 + 127;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CB9FA0BC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = 0;
  int v3 = -v1;
  int v4 = v1 - 1;
  uint64_t v5 = *(uint64_t **)a1;
  unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v3;
  uint64_t v7 = v4 & 0xFFFFFFC0;
  while (1)
  {
    uint64_t v9 = *v5++;
    uint64_t v8 = v9;
    unint64_t v10 = v7 == v2 ? v6 : -1;
    unint64_t v11 = v10 & v8;
    if (v11) {
      break;
    }
    v2 += 64;
    if (v7 + 64 == v2) {
      return 0xFFFFFFFFLL;
    }
  }
  return __clz(__rbit64(v11)) + v2;
}

uint64_t *sub_1CB9FA11C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a5 > 5) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 40) + 16 * a2;
  uint64_t v9 = *(llvm **)v8;
  unint64_t v10 = *(uint64_t **)(v8 + 8);
  int v11 = *(unsigned __int16 *)(a1 + 24);
  if (v11 != 175)
  {
    if (v11 != 56) {
      return 0;
    }
    uint64_t v13 = *(uint64_t **)(a1 + 32);
    uint64_t v15 = *v13;
    unint64_t v14 = v13[1];
    uint64_t v17 = v13[5];
    uint64_t v16 = v13[6];
    unsigned int v78 = 1;
    __src = 0;
    if (sub_1CB9FA710(v17, v16, (const void **)&__src))
    {
      uint64_t v18 = v15;
      uint64_t v15 = v17;
    }
    else
    {
      if (!sub_1CB9FA710(v15, v14, (const void **)&__src))
      {
LABEL_26:
        char v33 = 1;
        goto LABEL_27;
      }
      unint64_t v14 = v14 & 0xFFFFFFFF00000000 | v16;
      uint64_t v18 = v17;
    }
    if (v78 > 0x40)
    {
      unsigned int v30 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__src);
    }
    else
    {
      unsigned int v29 = __clz(__rbit64((unint64_t)__src));
      if (v78 >= v29) {
        unsigned int v30 = v29;
      }
      else {
        unsigned int v30 = v78;
      }
    }
    if (v30 < a3) {
      goto LABEL_26;
    }
    uint64_t v31 = sub_1CB9FA11C(v18, v14, a3, a4, a5 + 1);
    if (!v31) {
      goto LABEL_26;
    }
    uint64_t v48 = v31;
    uint64_t v49 = v32;
    unsigned int v76 = v78;
    if (v78 > 0x40) {
      operator new[]();
    }
    if (v78 == a3) {
      unint64_t v75 = 0;
    }
    else {
      unint64_t v75 = (unint64_t)__src >> a3;
    }
    uint64_t v50 = *(void *)(a4 + 16);
    unint64_t v51 = *(unsigned __int8 **)(v15 + 64);
    unsigned int v73 = (unint64_t *)v51;
    if (v51) {
      llvm::MetadataTracking::track((uint64_t)&v73, v51, 2);
    }
    int v74 = *(_DWORD *)(v15 + 60);
    uint64_t v53 = sub_1CD7EBB14(v50, (llvm::LLVMContext *)&v75, (const llvm::APInt *)&v73, (uint64_t)v9, (uint64_t)v10, 0, 0);
    uint64_t v55 = v54;
    if (v73)
    {
      int v56 = *(unsigned __int8 *)v73;
      if ((v56 - 4) > 0x1E)
      {
        if ((v56 - 3) >= 0xFFFFFFFE) {
          uint64_t v65 = v73;
        }
        else {
          uint64_t v65 = 0;
        }
        if ((v56 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v66 = (unint64_t)(v65 + 1);
LABEL_85:
          int v79 = &v73;
          sub_1CC5FA668(v66 + 16, &v79);
          goto LABEL_56;
        }
        if (v56 == 3) {
          v73[1] = 0;
        }
      }
      else if ((*((unsigned char *)v73 + 1) & 0x7F) == 2 || *((_DWORD *)v73 + 3))
      {
        unint64_t v71 = v73[2];
        if ((v71 & 4) != 0)
        {
          unint64_t v66 = v71 & 0xFFFFFFFFFFFFFFF8;
          if (v66) {
            goto LABEL_85;
          }
        }
      }
    }
LABEL_56:
    uint64_t v57 = *(void *)(a4 + 16);
    unint64_t v58 = *(unsigned __int8 **)(a1 + 64);
    unsigned int v73 = (unint64_t *)v58;
    if (v58) {
      llvm::MetadataTracking::track((uint64_t)&v73, v58, 2);
    }
    int v74 = *(_DWORD *)(a1 + 60);
    uint64_t v59 = *(void *)(v57 + 832);
    if (v59) {
      LOWORD(v59) = *(_WORD *)(v59 + 8);
    }
    unint64_t v10 = sub_1CCFDED5C(v57, 56, (const llvm::APInt *)&v73, v9, (uint64_t)v10, v48, v49, v52, v53, v55, v59);
    if (!v73) {
      goto LABEL_64;
    }
    int v60 = *(unsigned __int8 *)v73;
    if ((v60 - 4) > 0x1E)
    {
      if ((v60 - 3) >= 0xFFFFFFFE) {
        unsigned int v67 = v73;
      }
      else {
        unsigned int v67 = 0;
      }
      if ((v60 - 3) < 0xFFFFFFFE)
      {
        if (v60 == 3) {
          v73[1] = 0;
        }
        goto LABEL_64;
      }
      unint64_t v68 = (unint64_t)(v67 + 1);
    }
    else
    {
      if ((*((unsigned char *)v73 + 1) & 0x7F) != 2 && !*((_DWORD *)v73 + 3)) {
        goto LABEL_64;
      }
      unint64_t v72 = v73[2];
      if ((v72 & 4) == 0) {
        goto LABEL_64;
      }
      unint64_t v68 = v72 & 0xFFFFFFFFFFFFFFF8;
      if (!v68) {
        goto LABEL_64;
      }
    }
    int v79 = &v73;
    sub_1CC5FA668(v68 + 16, &v79);
LABEL_64:
    if (v76 >= 0x41 && v75) {
      MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    }
    char v33 = 0;
LABEL_27:
    if (v78 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    if ((v33 & 1) == 0) {
      return v10;
    }
    return 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v21 = *(void *)(v19 + 40);
  uint64_t v20 = *(void *)(v19 + 48);
  int v22 = 1;
  unsigned int v78 = 1;
  __src = 0;
  int v23 = sub_1CB9FA710(v21, v20, (const void **)&__src);
  unsigned int v24 = v78;
  if (v23)
  {
    p_src = (unsigned int *)__src;
    if (v78 < 0x41) {
      p_src = (unsigned int *)&__src;
    }
    unsigned int v26 = *p_src;
    uint64_t v27 = v26 - a3;
    if (v26 < a3)
    {
      int v22 = 1;
      goto LABEL_11;
    }
    uint64_t v34 = *(void *)(a4 + 16);
    unsigned int v35 = *(unsigned __int8 **)(v21 + 64);
    unint64_t v75 = (unint64_t)v35;
    if (v35) {
      llvm::MetadataTracking::track((uint64_t)&v75, v35, 2);
    }
    unsigned int v76 = *(_DWORD *)(v21 + 60);
    unsigned int v37 = sub_1CD7EBF14(v34, v27, (const llvm::APInt *)&v75, v9, (uint64_t)v10, 0, 0);
    uint64_t v39 = v38;
    if (v75)
    {
      int v40 = *(unsigned __int8 *)v75;
      if ((v40 - 4) > 0x1E)
      {
        if ((v40 - 3) >= 0xFFFFFFFE) {
          unint64_t v61 = v75;
        }
        else {
          unint64_t v61 = 0;
        }
        if ((v40 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v62 = v61 + 8;
LABEL_73:
          unsigned int v73 = &v75;
          sub_1CC5FA668(v62 + 16, &v73);
          goto LABEL_38;
        }
        if (v40 == 3) {
          *(void *)(v75 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v75 + 1) & 0x7F) == 2 || *(_DWORD *)(v75 + 12))
      {
        uint64_t v69 = *(void *)(v75 + 16);
        if ((v69 & 4) != 0)
        {
          unint64_t v62 = v69 & 0xFFFFFFFFFFFFFFF8;
          if (v62) {
            goto LABEL_73;
          }
        }
      }
    }
LABEL_38:
    uint64_t v41 = *(void *)(a4 + 16);
    unint64_t v42 = *(unsigned __int8 **)(a1 + 64);
    unint64_t v75 = (unint64_t)v42;
    if (v42) {
      llvm::MetadataTracking::track((uint64_t)&v75, v42, 2);
    }
    unsigned int v76 = *(_DWORD *)(a1 + 60);
    uint64_t v43 = *(uint64_t **)(a1 + 32);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    uint64_t v46 = *(void *)(v41 + 832);
    if (v46) {
      LOWORD(v46) = *(_WORD *)(v46 + 8);
    }
    unint64_t v10 = sub_1CCFDED5C(v41, 175, (const llvm::APInt *)&v75, v9, (uint64_t)v10, v44, v45, v36, (uint64_t)v37, v39, v46);
    if (!v75) {
      goto LABEL_46;
    }
    int v47 = *(unsigned __int8 *)v75;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        unint64_t v63 = v75;
      }
      else {
        unint64_t v63 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *(void *)(v75 + 8) = 0;
        }
        goto LABEL_46;
      }
      unint64_t v64 = v63 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v75 + 1) & 0x7F) != 2 && !*(_DWORD *)(v75 + 12)) {
        goto LABEL_46;
      }
      uint64_t v70 = *(void *)(v75 + 16);
      if ((v70 & 4) == 0) {
        goto LABEL_46;
      }
      unint64_t v64 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v64) {
        goto LABEL_46;
      }
    }
    unsigned int v73 = &v75;
    sub_1CC5FA668(v64 + 16, &v73);
LABEL_46:
    int v22 = 0;
    unsigned int v24 = v78;
  }
LABEL_11:
  if (v24 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v22) {
    return 0;
  }
  return v10;
}

uint64_t sub_1CB9FA710(uint64_t a1, uint64_t a2, const void **a3)
{
  v21[0] = a1;
  v21[1] = a2;
  int v4 = *(unsigned __int16 *)(a1 + 24);
  switch(v4)
  {
    case 11:
LABEL_4:
      uint64_t v5 = *(void *)(a1 + 80);
      if (*((_DWORD *)a3 + 2) > 0x40u || *(_DWORD *)(v5 + 32) > 0x40u)
      {
        unint64_t v6 = (const void **)(v5 + 24);
        if ((const void **)(v5 + 24) != a3)
        {
          llvm::APInt::reallocate((uint64_t)a3, *(_DWORD *)(v5 + 32));
          uint64_t v7 = *((unsigned int *)a3 + 2);
          if (v7 <= 0x40) {
            *a3 = *v6;
          }
          else {
            memcpy((void *)*a3, *v6, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else
      {
        *a3 = *(const void **)(v5 + 24);
        *((_DWORD *)a3 + 2) = *(_DWORD *)(v5 + 32);
      }
      return 1;
    case 201:
      unsigned int v20 = 1;
      uint64_t v19 = 0;
      int v8 = sub_1CB9FA710(**(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), &v19);
      char v9 = v8;
      if (v8)
      {
        unsigned int v11 = sub_1CD3E3904((unsigned int *)v21);
        if (v12 == 1)
        {
          unsigned int v16 = v11;
          unsigned int v11 = v16;
        }
        if (v11 > 0x40)
        {
          if (v20 != v11) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v17, (uint64_t)&v19);
        }
        else
        {
          if (v20 >= 0x41) {
            uint64_t v13 = v19;
          }
          else {
            uint64_t v13 = (uint64_t *)&v19;
          }
          uint64_t v14 = *v13;
          unsigned int v18 = v11;
          unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
          if (!v11) {
            unint64_t v15 = 0;
          }
          unint64_t v17 = v15 & v14;
        }
        if (*((_DWORD *)a3 + 2) >= 0x41u && *a3) {
          MEMORY[0x1D25D9CB0](*a3, 0x1000C8000313F17);
        }
        *a3 = (const void *)v17;
        *((_DWORD *)a3 + 2) = v18;
      }
      if (v20 >= 0x41 && v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
      if (v9) {
        return 1;
      }
      break;
    case 35:
      goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1CB9FA97C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 3) {
    return 0;
  }
  LODWORD(v4) = a3;
  while (1)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 24);
    if (v5 <= 0xD3) {
      break;
    }
    if (*(unsigned __int16 *)(a1 + 24) > 0xF5u)
    {
      if (v5 - 246 >= 2)
      {
        if (v5 != 428) {
          return 0;
        }
LABEL_20:
        int v8 = *(void **)(a1 + 32);
        uint64_t v4 = (v4 + 1);
        uint64_t result = sub_1CB9FA97C(v8[10], v8[11], v4);
        if (!result) {
          return result;
        }
        uint64_t v7 = v8 + 15;
        goto LABEL_32;
      }
      goto LABEL_12;
    }
    if (v5 != 212 && v5 != 215) {
      return v5 == 223;
    }
    uint64_t v7 = *(uint64_t **)(a1 + 32);
    LODWORD(v4) = v4 + 1;
LABEL_32:
    a1 = *v7;
    if (v4 > 3) {
      return 0;
    }
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x61u)
  {
    if (v5 != 98)
    {
      if (v5 == 141)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(v10 + 40);
        if (*(void *)v10 == v11 && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v10 + 48))
        {
          LODWORD(v4) = v4 + 1;
        }
        else
        {
          uint64_t v4 = (v4 + 1);
          uint64_t result = ((uint64_t (*)(void))sub_1CB9FA97C)();
          if (!result) {
            return result;
          }
          uint64_t result = sub_1CB9FA97C(v11, *(void *)(v10 + 48), v4);
          if (!result) {
            return result;
          }
        }
        uint64_t v7 = (uint64_t *)(v10 + 80);
        goto LABEL_32;
      }
      if (v5 != 192) {
        return 0;
      }
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v7 = (uint64_t *)(v9 + 40);
    if (*(void *)v9 == *(void *)(v9 + 40) && *(_DWORD *)(v9 + 8) == *(_DWORD *)(v9 + 48)) {
      return 1;
    }
    LODWORD(v4) = v4 + 1;
    if ((((uint64_t (*)(void))sub_1CB9FA97C)() & 1) == 0) {
      return 0;
    }
    goto LABEL_32;
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x5Fu)
  {
    if (v5 != 96) {
      return 0;
    }
LABEL_12:
    unint64_t v6 = *(void **)(a1 + 32);
    uint64_t v4 = (v4 + 1);
    uint64_t result = sub_1CB9FA97C(*v6, v6[1], v4);
    if (!result) {
      return result;
    }
    uint64_t v7 = v6 + 5;
    goto LABEL_32;
  }
  if (v5 == 12 || v5 == 36)
  {
    uint64_t v15 = *(void *)(a1 + 80);
    if (*(_UNKNOWN **)(v15 + 32) == &unk_1CFB2E344) {
      uint64_t v16 = *(void *)(v15 + 40);
    }
    else {
      uint64_t v16 = v15 + 24;
    }
    return (*(unsigned char *)(v16 + 28) & 8) == 0;
  }
  else
  {
    if (v5 != 46) {
      return 0;
    }
    uint64_t v12 = *(void *)(**(void **)(a1 + 32) + 80);
    uint64_t v13 = (void *)(v12 + 24);
    if (*(_DWORD *)(v12 + 32) >= 0x41u) {
      uint64_t v13 = (void *)*v13;
    }
    return *v13 == 2131;
  }
}

BOOL sub_1CB9FABA0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  while (1)
  {
    int v5 = *(_DWORD *)(a1 + 4);
    if ((v5 & 0x80000000) == 0) {
      break;
    }
    uint64_t v6 = *(void *)(v4 + 16 * (v5 & 0x7FFFFFFF) + 8);
    if ((*(unsigned char *)(v6 + 3) & 1) == 0) {
      uint64_t v6 = *(void *)(v6 + 24);
    }
    uint64_t v7 = *(void *)(v6 + 8);
    int v8 = *(unsigned __int16 **)(v7 + 16);
    if ((*((unsigned char *)v8 + 9) & 0x20) != 0) {
      return 1;
    }
    int v9 = *v8;
    if (v9 <= 4579)
    {
      if (v9 != 738 && v9 != 742) {
        return 0;
      }
      uint64_t v11 = *(void *)(v7 + 32);
      uint64_t v12 = 2;
    }
    else
    {
      if (v9 != 6215 && v9 != 6269) {
        return v9 == 4580;
      }
      uint64_t v11 = *(void *)(v7 + 32);
      if ((sub_1CB9FABA0(v11 + 64, a2) & 1) == 0) {
        return 0;
      }
      uint64_t v12 = 4;
    }
    a1 = v11 + 32 * v12;
    if (*(unsigned char *)a1) {
      return 1;
    }
  }
  return 0;
}

uint64_t *sub_1CB9FAC90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(unsigned __int8 **)(a4 + 64);
  unsigned int v76 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v76, v13, 2);
    int v14 = *(_DWORD *)(a4 + 60);
    int v77 = v14;
    unint64_t v17 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v16 = (llvm::APFloatBase **)(a1 + 16);
    uint64_t v15 = v17;
    int v74 = v76;
    if (v76)
    {
      llvm::MetadataTracking::track((uint64_t)&v74, v76, 2);
      int v14 = v77;
    }
  }
  else
  {
    int v14 = *(_DWORD *)(a4 + 60);
    int v77 = v14;
    uint64_t v16 = (llvm::APFloatBase **)(a1 + 16);
    uint64_t v15 = *(llvm::APFloatBase **)(a1 + 16);
    int v74 = 0;
  }
  int v75 = v14;
  unsigned int v18 = sub_1CB9FB4A4(v15, a5, (uint64_t)&v74, (llvm *)4, 0, a2, a3, a8, 3, 0);
  unint64_t v20 = v19;
  if (v74)
  {
    int v21 = *v74;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        uint64_t v43 = v74;
      }
      else {
        uint64_t v43 = 0;
      }
      if ((v21 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v44 = (unint64_t)(v43 + 8);
LABEL_43:
        unsigned int v78 = &v74;
        sub_1CC5FA668(v44 + 16, &v78);
        goto LABEL_9;
      }
      if (v21 == 3) {
        *((void *)v74 + 1) = 0;
      }
    }
    else if ((v74[1] & 0x7F) == 2 || *((_DWORD *)v74 + 3))
    {
      uint64_t v71 = *((void *)v74 + 2);
      if ((v71 & 4) != 0)
      {
        unint64_t v44 = v71 & 0xFFFFFFFFFFFFFFF8;
        if (v44) {
          goto LABEL_43;
        }
      }
    }
  }
LABEL_9:
  int v22 = (*(unsigned __int16 *)(a4 + 26) >> 10) & 3;
  uint64_t v23 = *(void *)(a4 + 40);
  unsigned int v24 = *(llvm **)v23;
  uint64_t v25 = *(void *)(v23 + 8);
  if (a5 == 395)
  {
    uint64_t v47 = *((void *)*v16 + 104);
    if (v47) {
      __int16 v48 = *(_WORD *)(v47 + 8);
    }
    else {
      __int16 v48 = 0;
    }
    unsigned int v73 = sub_1CD7F3564(*v16, (const char *)0xD8, (uint64_t)&v76, (llvm *)0x1B, 0, (uint64_t)v18, (void *)v20, v48);
    unsigned int v55 = v54;
    uint64_t v56 = *(void *)(a2 + 40) + 16 * a3;
    unint64_t v58 = *(llvm **)v56;
    uint64_t v57 = *(void *)(v56 + 8);
    int v59 = *(unsigned __int16 *)(a2 + 24);
    if (v59 == 35 || v59 == 11)
    {
      uint64_t v60 = *(void *)(a2 + 80);
      unint64_t v61 = (void *)(v60 + 24);
      if (*(_DWORD *)(v60 + 32) >= 0x41u) {
        unint64_t v61 = (void *)*v61;
      }
      unint64_t v62 = sub_1CD7EBF14((uint64_t)*v16, *v61 & 1, (const llvm::APInt *)&v76, v58, v57, 0, 0);
    }
    else
    {
      uint64_t v65 = sub_1CD7EBF14((uint64_t)*v16, 1, (const llvm::APInt *)&v76, v58, v57, 0, 0);
      uint64_t v68 = *((void *)*v16 + 104);
      if (v68) {
        LOWORD(v68) = *(_WORD *)(v68 + 8);
      }
      unint64_t v62 = sub_1CCFDED5C((uint64_t)*v16, 171, (const llvm::APInt *)&v76, v58, v57, a2, (uint64_t)a3, v67, (uint64_t)v65, v66, v68);
    }
    uint64_t v69 = *((void *)*v16 + 104);
    if (v69) {
      LOWORD(v69) = *(_WORD *)(v69 + 8);
    }
    unsigned int v18 = sub_1CCFDED5C((uint64_t)*v16, 148, (const llvm::APInt *)&v76, (llvm *)4, 0, (uint64_t)v73, v55 | v20 & 0xFFFFFFFF00000000, v64, (uint64_t)v62, v63, v69);
    unsigned int v26 = v70;
  }
  else
  {
    unsigned int v26 = v20;
  }
  if ((v22 - 1) <= 2 && v24 != 4)
  {
    uint64_t v27 = *((void *)*v16 + 104);
    if (v27) {
      __int16 v28 = *(_WORD *)(v27 + 8);
    }
    else {
      __int16 v28 = 0;
    }
    unsigned int v18 = sub_1CD7F3564(*v16, (const char *)0xC8, (uint64_t)&v76, v24, v25, (uint64_t)v18, (void *)(v20 & 0xFFFFFFFF00000000 | v26), v28);
    unsigned int v26 = v29;
  }
  if (v22)
  {
    if (v22 == 2)
    {
      uint64_t v49 = *v16;
      uint64_t v50 = sub_1CD7EDE1C((uint64_t)*v16, 3, 0);
      uint64_t v53 = *((void *)v49 + 104);
      if (v53) {
        LOWORD(v53) = *(_WORD *)(v53 + 8);
      }
      unsigned int v35 = sub_1CCFDED5C((uint64_t)v49, 204, (const llvm::APInt *)&v76, v24, v25, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v26, v52, v50, v51, v53);
    }
    else
    {
      if (v22 != 3) {
        goto LABEL_28;
      }
      unsigned int v30 = *v16;
      uint64_t v31 = sub_1CD7EBF14((uint64_t)*v16, 255, (const llvm::APInt *)&v76, v24, v25, 0, 0);
      uint64_t v34 = *((void *)v30 + 104);
      if (v34) {
        LOWORD(v34) = *(_WORD *)(v34 + 8);
      }
      unsigned int v35 = sub_1CCFDED5C((uint64_t)v30, 171, (const llvm::APInt *)&v76, v24, v25, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v26, v33, (uint64_t)v31, v32, v34);
    }
  }
  else
  {
    uint64_t v37 = *((void *)*v16 + 104);
    if (v37) {
      __int16 v38 = *(_WORD *)(v37 + 8);
    }
    else {
      __int16 v38 = 0;
    }
    unsigned int v35 = sub_1CD7F3564(*v16, (const char *)0xC9, (uint64_t)&v76, (llvm *)3, 0, (uint64_t)v18, (void *)(v20 & 0xFFFFFFFF00000000 | v26), v38);
  }
  unsigned int v18 = v35;
  unsigned int v26 = v36;
LABEL_28:
  if (v24 == 2)
  {
    uint64_t v39 = *((void *)*v16 + 104);
    if (v39) {
      __int16 v40 = *(_WORD *)(v39 + 8);
    }
    else {
      __int16 v40 = 0;
    }
    unsigned int v18 = sub_1CD7F3564(*v16, (const char *)0xC9, (uint64_t)&v76, v24, v25, (uint64_t)v18, (void *)(v20 & 0xFFFFFFFF00000000 | v26), v40);
  }
  if (v76)
  {
    int v41 = *v76;
    if ((v41 - 4) > 0x1E)
    {
      if ((v41 - 3) >= 0xFFFFFFFE) {
        uint64_t v45 = v76;
      }
      else {
        uint64_t v45 = 0;
      }
      if ((v41 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v46 = (unint64_t)(v45 + 8);
LABEL_49:
        unsigned int v78 = &v76;
        sub_1CC5FA668(v46 + 16, &v78);
        return v18;
      }
      if (v41 == 3) {
        *((void *)v76 + 1) = 0;
      }
    }
    else if ((v76[1] & 0x7F) == 2 || *((_DWORD *)v76 + 3))
    {
      uint64_t v72 = *((void *)v76 + 2);
      if ((v72 & 4) != 0)
      {
        unint64_t v46 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (v46) {
          goto LABEL_49;
        }
      }
    }
  }
  return v18;
}

uint64_t *sub_1CB9FB180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(uint64_t **)(a2 + 32);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v63 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v63, v11, 2);
  }
  int v64 = *(_DWORD *)(a2 + 60);
  uint64_t v12 = *(void *)(a3 + 80);
  uint64_t v13 = (void *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u) {
    uint64_t v13 = (void *)*v13;
  }
  unint64_t v62 = (void *)*v13;
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v16 = *(uint64_t **)(v14 + 40);
  unint64_t v15 = *(void *)(v14 + 48);
  if (*(unsigned char *)v16[5] != 49)
  {
    unint64_t v17 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v18 = *((void *)v17 + 104);
    if (v18) {
      __int16 v19 = *(_WORD *)(v18 + 8);
    }
    else {
      __int16 v19 = 0;
    }
    uint64_t v16 = sub_1CD7F3564(v17, (const char *)0xD8, (uint64_t)&v63, (llvm *)0x31, 0, (uint64_t)v16, (void *)v15, v19);
    unint64_t v15 = v15 & 0xFFFFFFFF00000000 | v20;
  }
  uint64_t v21 = *(void *)(a1 + 16);
  int v22 = sub_1CD7EBF14(v21, 0, (const llvm::APInt *)&v63, (llvm *)5, 0, 0, 0);
  __int16 v25 = 0;
  uint64_t v26 = *(void *)(v21 + 832);
  if (v26) {
    __int16 v25 = *(_WORD *)(v26 + 8);
  }
  uint64_t v27 = sub_1CCFDED5C(v21, 148, (const llvm::APInt *)&v63, (llvm *)5, 0, (uint64_t)v16, v15, v24, (uint64_t)v22, v23, v25);
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = sub_1CD7EBF14(v30, 1, (const llvm::APInt *)&v63, (llvm *)5, 0, 0, 0);
  __int16 v34 = 0;
  uint64_t v35 = *(void *)(v30 + 832);
  if (v35) {
    __int16 v34 = *(_WORD *)(v35 + 8);
  }
  uint64_t v37 = sub_1CCFDED5C(v30, 148, (const llvm::APInt *)&v63, (llvm *)5, 0, (uint64_t)v16, v15, v33, (uint64_t)v31, v32, v34);
  uint64_t v39 = v38;
  __int16 v40 = 0;
  int v41 = *(void **)(a1 + 16);
  uint64_t v42 = v41[104];
  if (v42) {
    __int16 v40 = *(_WORD *)(v42 + 8);
  }
  uint64_t v43 = sub_1CD7F5D38(v41, (const char *)0x18F, (const llvm::APInt *)&v63, (llvm *)1, 0, (uint64_t)v27, v29, v36, a3, a4, v9, v10, SHIDWORD(v10), v40);
  uint64_t v45 = v44;
  unint64_t v46 = sub_1CD7EBF14(*(void *)(a1 + 16), (uint64_t)v62 + 4, (const llvm::APInt *)&v63, (llvm *)6, 0, 0, 0);
  uint64_t v49 = *(void **)(a1 + 16);
  uint64_t v50 = v49[104];
  if (v50) {
    LOWORD(v50) = *(_WORD *)(v50 + 8);
  }
  uint64_t v51 = sub_1CD7F5D38(v49, (const char *)0x18F, (const llvm::APInt *)&v63, (llvm *)1, 0, (uint64_t)v37, v39, v48, (uint64_t)v46, v47, v9, v10, SHIDWORD(v10), v50);
  uint64_t v54 = *(void *)(a1 + 16);
  uint64_t v55 = *(void *)(v54 + 832);
  if (v55) {
    LOWORD(v55) = *(_WORD *)(v55 + 8);
  }
  uint64_t v56 = sub_1CCFDED5C(v54, 2, (const llvm::APInt *)&v63, (llvm *)1, 0, (uint64_t)v43, v45, v53, (uint64_t)v51, v52, v55);
  if (v63)
  {
    int v57 = *v63;
    if ((v57 - 4) > 0x1E)
    {
      if ((v57 - 3) >= 0xFFFFFFFE) {
        int v59 = v63;
      }
      else {
        int v59 = 0;
      }
      if ((v57 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v60 = (unint64_t)(v59 + 8);
LABEL_30:
        uint64_t v65 = &v63;
        sub_1CC5FA668(v60 + 16, &v65);
        return v56;
      }
      if (v57 == 3) {
        *((void *)v63 + 1) = 0;
      }
    }
    else if ((v63[1] & 0x7F) == 2 || *((_DWORD *)v63 + 3))
    {
      uint64_t v61 = *((void *)v63 + 2);
      if ((v61 & 4) != 0)
      {
        unint64_t v60 = v61 & 0xFFFFFFFFFFFFFFF8;
        if (v60) {
          goto LABEL_30;
        }
      }
    }
  }
  return v56;
}

uint64_t *sub_1CB9FB4A4(llvm::APFloatBase *a1, const char *a2, uint64_t a3, llvm *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v26[0] = a9;
  v26[1] = a10;
  uint64_t v17 = *(void *)(a6 + 80);
  uint64_t v18 = (unint64_t *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    uint64_t v18 = (unint64_t *)*v18;
  }
  unint64_t v19 = *v18;
  if ((_BYTE)a9) {
    unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v26);
  }
  else {
    unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v26);
  }
  if (v21 == 1)
  {
    unint64_t v25 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v25;
  }
  if (v19 % (ExtendedSizeInBits >> 3)) {
    llvm::report_fatal_error((llvm *)"Unaligned shared/coeff register accesses are not supported", (const llvm::Twine *)1);
  }
  uint64_t v22 = *((void *)a1 + 104);
  if (v22) {
    __int16 v23 = *(_WORD *)(v22 + 8);
  }
  else {
    __int16 v23 = 0;
  }
  return sub_1CD7F3564(a1, a2, a3, a4, a5, a6, a7, v23);
}

uint64_t sub_1CB9FB5B0(uint64_t a1)
{
  *(void *)a1 = &unk_1F261BC50;
  int v2 = *(_DWORD *)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = a1 + 120;
    uint64_t v4 = 16;
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 128);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v3 = *(void *)(a1 + 120);
  }
  uint64_t v5 = 40 * v4;
  uint64_t v6 = v3 + 16;
  do
  {
    if (*(_DWORD *)(v6 - 16) <= 0xFFFFFFFD)
    {
      if (*(_DWORD *)(v6 + 16) >= 0x41u)
      {
        uint64_t v8 = *(void *)(v6 + 8);
        if (v8)
        {
          uint64_t v12 = v6;
          uint64_t v14 = v5;
          MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
          uint64_t v6 = v12;
          uint64_t v5 = v14;
        }
      }
      if (*(_DWORD *)v6 >= 0x41u)
      {
        uint64_t v7 = *(void *)(v6 - 8);
        if (v7)
        {
          uint64_t v11 = v6;
          uint64_t v13 = v5;
          MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
          uint64_t v6 = v11;
          uint64_t v5 = v13;
        }
      }
    }
    v6 += 40;
    v5 -= 40;
  }
  while (v5);
  int v2 = *(_DWORD *)(a1 + 112);
LABEL_13:
  if ((v2 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 120), 8);
  }
  *(void *)a1 = &unk_1F25F0A58;
  uint64_t v9 = *(void **)(a1 + 16);
  if (v9 != *(void **)(a1 + 8)) {
    free(v9);
  }
  return a1;
}

uint64_t sub_1CB9FB87C(uint64_t a1, const char *a2, uint64_t *a3, uint64_t a4, int8x8_t a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = a3[3];
  long long v7 = *(_OWORD *)(*(void *)(v6 + 40) + 16 * *((unsigned int *)a3 + 8));
  long long v111 = v7;
  uint64_t v8 = *a3;
  uint64_t v9 = *(void *)(*a3 + 96);
  int v10 = *(unsigned __int16 *)(*a3 + 24);
  if (((v10 - 47) > 1 || (*(unsigned char *)(v8 + 26) & 2) == 0) && v10 != 287 && (__int16)v10 < 890)
  {
    char v11 = 63
        - __clz(((1 << *(unsigned char *)(v9 + 34)) | *(void *)(v9 + 8)) & -((1 << *(unsigned char *)(v9 + 34)) | *(void *)(v9 + 8)));
    if ((v10 - 290) < 0x12)
    {
      int v12 = 0;
      int v13 = 1;
      goto LABEL_45;
    }
    if (v10 != 254)
    {
      int v12 = 0;
      int v13 = 0;
      if (v10 == 253) {
        uint64_t v50 = *a3;
      }
      else {
        uint64_t v50 = 0;
      }
      long long v111 = *(_OWORD *)(v50 + 80);
      goto LABEL_45;
    }
    int v12 = 0;
    int v36 = *((_DWORD *)a3 + 16);
    int v13 = 1;
    if (v36 == 2 || v36 == 5) {
      goto LABEL_45;
    }
    unint64_t v38 = *(void *)(v8 + 80);
    uint64_t v37 = *(void *)(v8 + 88);
    unint64_t v113 = v38;
    uint64_t v114 = v37;
    int v39 = v38;
    if (!*((unsigned char *)a3 + 88))
    {
      if ((_BYTE)v38)
      {
        if (v38 - 15 >= 0x9C) {
          goto LABEL_118;
        }
        char EVT = sub_1CB8C2FBC((unsigned __int8 *)&v113);
      }
      else
      {
        if ((*(_DWORD *)(v37 + 8) & 0xFE) != 0x12) {
          goto LABEL_118;
        }
        char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v37 + 24), 0, (BOOL)a3);
      }
      LOBYTE(v38) = EVT;
LABEL_118:
      if (*(_WORD *)(v6 + 24) != 201) {
        goto LABEL_154;
      }
      uint64_t v84 = *(unsigned int **)(v6 + 32);
      uint64_t v85 = *(void *)v84;
      if (*(_WORD *)(*(void *)v84 + 24) == 46)
      {
        uint64_t v86 = *(void *)(**(void **)(v85 + 32) + 80);
        unint64_t v87 = (void *)(v86 + 24);
        if (*(_DWORD *)(v86 + 32) >= 0x41u) {
          unint64_t v87 = (void *)*v87;
        }
        int v88 = 0;
        int v89 = *(_DWORD *)v87;
        int v90 = 1;
        BOOL v91 = (v89 - 2493) > 0xF || ((1 << (v89 + 67)) & 0xFF0F) == 0;
        if (!v91
          || ((v92 = v89 - 2588, BOOL v93 = v92 > 0xF, v94 = (1 << v92) & 0xFF0F, !v93) ? (v95 = v94 == 0) : (v95 = 1), !v95))
        {
LABEL_155:
          int v12 = 0;
          uint64_t v102 = v5[3];
          long long v7 = *(_OWORD *)(*(void *)(v102 + 40) + 16 * *((unsigned int *)v5 + 8));
          int v13 = 1;
          if (v88 && v90)
          {
LABEL_157:
            long long v7 = *(_OWORD *)(*(void *)(**(void **)(v102 + 32) + 40)
                           + 16 * *(unsigned int *)(*(void *)(v102 + 32) + 8));
            int v12 = 1;
          }
LABEL_45:
          unint64_t v51 = 1 << v11;
          long long v108 = v7;
          int v107 = v13;
          if ((_BYTE)v111)
          {
            if (v111 - 15 >= 0x9C)
            {
              uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v111);
              goto LABEL_52;
            }
          }
          else if ((*(_DWORD *)(*((void *)&v111 + 1) + 8) & 0xFE) != 0x12)
          {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v111);
LABEL_52:
            unint64_t v58 = ExtendedSizeInBits;
            if (v53 == 1) {
            if ((v58 >> 3) <= 1)
            }
              LODWORD(v47) = 1;
            else {
              LODWORD(v47) = v58 >> 3;
            }
            unsigned int v46 = 1;
LABEL_65:
            unint64_t v45 = 0;
            char v48 = 0;
            if (v51 >= v47)
            {
              uint64_t v27 = -1;
            }
            else
            {
              unsigned int v62 = v46 * v47;
              uint64_t v27 = -1;
              LODWORD(v47) = v51;
              unsigned int v46 = v62 / v51;
            }
            uint64_t v49 = (llvm::LLVMContext *)a2;
            goto LABEL_69;
          }
          unsigned int v46 = sub_1CD3DB440((llvm::EVT *)&v111, a2);
          if ((_BYTE)v111)
          {
            LOBYTE(v55) = sub_1CB8C2FBC((unsigned __int8 *)&v111);
            unint64_t v57 = 0;
            uint64_t v56 = 0;
          }
          else
          {
            unint64_t v55 = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v111 + 1) + 24), 0, v54);
            unint64_t v57 = v55 & 0xFFFFFFFFFFFFFF00;
          }
          *(void *)&long long v111 = v57 | v55;
          *((void *)&v111 + 1) = v56;
          if ((_BYTE)v55) {
            uint64_t v59 = sub_1CB87E200((unsigned __int8 *)&v111);
          }
          else {
            uint64_t v59 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v111);
          }
          unint64_t v61 = v59;
          if (v60 == 1) {
          unint64_t v47 = v61 >> 3;
          }
          goto LABEL_65;
        }
      }
      uint64_t v96 = (uint64_t *)(*(void *)(v85 + 40) + 16 * v84[2]);
      uint64_t v97 = *v96;
      uint64_t v98 = v96[1];
      *(void *)&long long v112 = v97;
      *((void *)&v112 + 1) = v98;
      if ((_BYTE)v97)
      {
        if (v97 - 15 < 0x9C)
        {
          char v99 = sub_1CB8C2FBC((unsigned __int8 *)&v112);
          goto LABEL_150;
        }
      }
      else if ((*(_DWORD *)(v98 + 8) & 0xFE) == 0x12)
      {
        char v99 = llvm::EVT::getEVT(*(llvm::EVT **)(v98 + 24), 0, (BOOL)a3);
LABEL_150:
        LOBYTE(v97) = v99;
      }
      if (v38 == 4 && v97 == 5)
      {
        int v88 = 1;
        int v90 = 1;
        goto LABEL_155;
      }
LABEL_154:
      int v88 = 0;
      int v90 = 0;
      goto LABEL_155;
    }
    long long v112 = v7;
    char v82 = v7;
    if ((_BYTE)v7)
    {
      if (v7 - 15 >= 0x9C) {
        goto LABEL_138;
      }
      char v83 = sub_1CB8C2FBC((unsigned __int8 *)&v112);
      int v39 = v113;
    }
    else
    {
      if ((*(_DWORD *)(*((void *)&v7 + 1) + 8) & 0xFE) != 0x12) {
        goto LABEL_138;
      }
      char v83 = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v7 + 1) + 24), 0, (BOOL)a3);
    }
    char v82 = v83;
LABEL_138:
    if (v39)
    {
      if ((v39 - 15) < 0x9C)
      {
        unsigned __int8 v100 = sub_1CB8C2FBC((unsigned __int8 *)&v113);
        goto LABEL_143;
      }
    }
    else if ((*(_DWORD *)(v114 + 8) & 0xFE) == 0x12)
    {
      unsigned __int8 v100 = llvm::EVT::getEVT(*(llvm::EVT **)(v114 + 24), 0, (BOOL)a3);
LABEL_143:
      uint64_t v101 = v100;
LABEL_145:
      int v12 = 0;
      uint64_t v102 = v5[3];
      long long v7 = *(_OWORD *)(*(void *)(v102 + 40) + 16 * *((unsigned int *)v5 + 8));
      int v13 = 1;
      if (v82 == 5 && v101 == 4) {
        goto LABEL_157;
      }
      goto LABEL_45;
    }
    uint64_t v101 = v113;
    goto LABEL_145;
  }
  unsigned int v15 = *(_WORD *)(v9 + 32) & 2;
  uint64_t v16 = *(void *)(v8 + 32);
  uint64_t v17 = *(void *)(*(void *)(v16 + 120) + 80);
  uint64_t v18 = (void *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    uint64_t v18 = (void *)*v18;
  }
  int v19 = *(_DWORD *)v18 & 0xF;
  uint64_t v20 = *(void *)(*(void *)(v16 + 80) + 80);
  uint64_t v21 = (unint64_t *)(v20 + 24);
  if (*(_DWORD *)(v20 + 32) >= 0x41u) {
    uint64_t v21 = (unint64_t *)*v21;
  }
  unint64_t v22 = *v21;
  int v23 = *(unsigned __int16 *)(v8 + 56);
  if (v15)
  {
    if (v23 == 7)
    {
      unsigned int v24 = 6;
      goto LABEL_16;
    }
LABEL_19:
    uint64_t v27 = -1;
    goto LABEL_20;
  }
  if (v23 != 6) {
    goto LABEL_19;
  }
  unsigned int v24 = 5;
LABEL_16:
  uint64_t v25 = *(void *)(*(void *)(v16 + 40 * v24) + 80);
  uint64_t v26 = (uint64_t *)(v25 + 24);
  if (*(_DWORD *)(v25 + 32) >= 0x41u) {
    uint64_t v26 = (uint64_t *)*v26;
  }
  uint64_t v27 = *v26;
LABEL_20:
  unint64_t v28 = v22 >> 4;
  unint64_t v29 = (16 * v19) | v22 & 0xF;
  a5.i32[0] = v19;
  uint8x8_t v30 = (uint8x8_t)vcnt_s8(a5);
  v30.i16[0] = vaddlv_u8(v30);
  unsigned int v105 = v30.i32[0];
  long long v108 = v7;
  if ((_BYTE)v7)
  {
    __int16 v34 = (unsigned __int8 *)&v111;
    if ((v7 - 15) >= 0x9Cu)
    {
LABEL_37:
      unsigned int v41 = sub_1CB87E200(v34);
      goto LABEL_38;
    }
    LOBYTE(v31) = sub_1CB8C2FBC((unsigned __int8 *)&v111);
    unint64_t v33 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    if ((*(_DWORD *)(*((void *)&v7 + 1) + 8) & 0xFE) != 0x12)
    {
      uint64_t v35 = (llvm::EVT *)&v111;
      goto LABEL_35;
    }
    unint64_t v31 = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v7 + 1) + 24), 0, (BOOL)a3);
    unint64_t v33 = v31 & 0xFFFFFFFFFFFFFF00;
  }
  unint64_t v113 = v33 | v31;
  uint64_t v114 = v32;
  if ((_BYTE)v31)
  {
    __int16 v34 = (unsigned __int8 *)&v113;
    goto LABEL_37;
  }
  uint64_t v35 = (llvm::EVT *)&v113;
LABEL_35:
  unsigned int v41 = llvm::EVT::getExtendedSizeInBits(v35);
LABEL_38:
  unsigned int v44 = v41;
  unint64_t v45 = v29 & 0xC03FFFFFFFFFFFFFLL | ((unint64_t)v28 << 54);
  int v107 = v15 >> 1;
  if (v42 == 1) {
  int v12 = 0;
  }
  unsigned int v46 = v105;
  LODWORD(v47) = v44 >> 3;
  char v48 = 1;
  uint64_t v49 = (llvm::LLVMContext *)a2;
  uint64_t v5 = a3;
LABEL_69:
  uint64_t v63 = *(void *)(v8 + 88);
  unint64_t v113 = *(void *)(v8 + 80);
  uint64_t v114 = v63;
  if ((_BYTE)v113)
  {
    if (v113 - 15 < 0x9C)
    {
      LOBYTE(v64) = sub_1CB8C2FBC((unsigned __int8 *)&v113);
      unint64_t v66 = 0;
      uint64_t v65 = 0;
      goto LABEL_74;
    }
    unsigned int v69 = sub_1CB87E200((unsigned __int8 *)&v113);
  }
  else
  {
    if ((*(_DWORD *)(v63 + 8) & 0xFE) == 0x12)
    {
      unint64_t v64 = llvm::EVT::getEVT(*(llvm::EVT **)(v63 + 24), 0, v43);
      unint64_t v66 = v64 & 0xFFFFFFFFFFFFFF00;
LABEL_74:
      *(void *)&long long v112 = v66 | v64;
      *((void *)&v112 + 1) = v65;
      if ((_BYTE)v64) {
        unsigned int v67 = sub_1CB87E200((unsigned __int8 *)&v112);
      }
      else {
        unsigned int v67 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v112);
      }
      int v74 = v67;
      if (v68 == 1) {
      uint64_t v75 = 0;
      }
      if (v74 > 31)
      {
        switch(v74)
        {
          case 32:
            uint64_t v75 = 5;
            break;
          case 64:
            uint64_t v75 = 6;
            break;
          case 128:
            uint64_t v75 = 7;
            break;
        }
      }
      else
      {
        switch(v74)
        {
          case 1:
            uint64_t v75 = 2;
            break;
          case 8:
            uint64_t v75 = 3;
            break;
          case 16:
            uint64_t v75 = 4;
            break;
        }
      }
      unsigned int v80 = sub_1CD3DB440((llvm::EVT *)&v113, v68);
      unint64_t v77 = sub_1CB8E5DAC(v49, v75, 0, v80, 0);
      unint64_t v113 = v77;
      uint64_t v114 = v76;
      uint64_t v79 = a4;
      uint64_t v78 = a1;
      long long v72 = v108;
      goto LABEL_111;
    }
    unsigned int v69 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v113);
  }
  int v71 = v69;
  long long v72 = v108;
  if (v70 == 1)
  {
    long long v72 = v108;
  }
  char v73 = 0;
  if (v71 > 31)
  {
    switch(v71)
    {
      case 32:
        char v73 = 5;
        break;
      case 64:
        char v73 = 6;
        break;
      case 128:
        char v73 = 7;
        break;
    }
  }
  else
  {
    switch(v71)
    {
      case 1:
        char v73 = 2;
        break;
      case 8:
        char v73 = 3;
        break;
      case 16:
        char v73 = 4;
        break;
    }
  }
  uint64_t v76 = 0;
  LOBYTE(v113) = v73;
  HIDWORD(v113) = *(_DWORD *)((char *)&v112 + 3);
  *(_DWORD *)((char *)&v113 + 1) = v112;
  uint64_t v114 = 0;
  unint64_t v77 = v113;
  uint64_t v79 = a4;
  uint64_t v78 = a1;
LABEL_111:
  *(void *)&long long v103 = v77;
  *((void *)&v103 + 1) = v76;
  return sub_1CD40B2EC(v78, (char *)v49, v47, v46, v107, v48, v12, v45, v27, v72, *((uint64_t *)&v72 + 1), v103, *(_DWORD *)(*(void *)(*v5 + 96) + 16), v79);
}

void sub_1CB9FC120(unint64_t *a1, llvm::raw_ostream *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "(", 1uLL);
  }
  else
  {
    *uint64_t v4 = 40;
    ++*((void *)this + 4);
  }
  sub_1CD806F78(a1[1], this, 0);
  uint64_t v5 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v5 > 1uLL)
  {
    *uint64_t v5 = 10528;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ")", 2uLL);
  }
  unint64_t v6 = a1[5];
  if (v6 && *(_WORD *)(v6 + 24) != 51)
  {
    int v13 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v13 > 3uLL)
    {
      _DWORD *v13 = 673196832;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " + (", 4uLL);
    }
    sub_1CD806F78(a1[5], this, 0);
    uint64_t v14 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v14 > 1uLL)
    {
      *uint64_t v14 = 10528;
      *((void *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ")", 2uLL);
    }
  }
  uint64_t v7 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v7) > 2)
  {
    *(unsigned char *)(v7 + 2) = 32;
    *(_WORD *)uint64_t v7 = 8251;
    *((void *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, ";  ", 3uLL);
  }
  uint64_t v8 = 0;
  uint64_t v9 = **(void **)(*a1 + 96);
  if ((v9 & 4) == 0)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 5)
      {
        do
        {
          unint64_t v10 = *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
          unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
          if (v10) {
            BOOL v12 = v11 == 5;
          }
          else {
            BOOL v12 = 0;
          }
        }
        while (v12);
      }
      if (v11 <= 3)
      {
        uint64_t v8 = *(void *)(v10 + 40);
      }
      else
      {
        if (v11 > 0x1B)
        {
          unsigned int v15 = *(const llvm::Function **)(*(void *)(v10 + 40) + 56);
          uint64_t v16 = *((void *)v15 + 5);
          uint64_t v20 = (const llvm::Function *)&unk_1F26160C0;
          uint64_t v21 = 0;
          BOOL v22 = v16 != 0;
          char v23 = 1;
          uint64_t v28 = 0;
          uint64_t v27 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v24 = v16;
          llvm::ModuleSlotTracker::incorporateFunction(&v20, v15);
LABEL_21:
          uint64_t v18 = &v20;
          uint64_t v19 = 0;
          llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v17);
        }
        uint64_t v8 = 0;
      }
    }
  }
  uint64_t v20 = (const llvm::Function *)&unk_1F26160C0;
  uint64_t v21 = 0;
  BOOL v22 = v8 != 0;
  char v23 = 1;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = v8;
  goto LABEL_21;
}

uint64_t *sub_1CB9FC45C(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned char *a4)
{
  v154[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  unint64_t v9 = *(void *)(*a2 + 96);
  long long v10 = *(_OWORD *)*(void *)(*a2 + 32);
  long long v121 = v10;
  int v122 = *(_DWORD *)(v9 + 16);
  unsigned int v11 = *(unsigned __int8 **)(*a2 + 64);
  unsigned int v150 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v150, v11, 2);
  }
  int v151 = *(_DWORD *)(v8 + 60);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v123 = *(uint64_t **)(v12 + 40);
  uint64_t v13 = *v123;
  uint64_t v14 = (uint64_t *)(a1 + 184296);
  sub_1CB9FB87C((uint64_t)&v142, *(const char **)(v12 + 56), a2, *(void *)(a1 + 184296), *(int8x8_t *)&v10);
  unsigned int v15 = *(unsigned char **)(a1 + 184296);
  unint64_t v115 = v9;
  uint64_t v116 = a1;
  if (v15[318])
  {
    uint64_t v16 = 4;
  }
  else if (v15[319])
  {
    uint64_t v16 = 5;
  }
  else if (v15[320])
  {
    uint64_t v16 = 6;
  }
  else if (v15[321])
  {
    uint64_t v16 = 7;
  }
  else
  {
    uint64_t v16 = 9;
  }
  LODWORD(v152) = 0;
  int v17 = sub_1CBA864D8((int)v15, v13, "MemoryReadL2Pers", (int *)&v152);
  uint64_t v18 = v123[43];
  unsigned int v19 = v145;
  if (v145 == -1)
  {
    int v20 = v17;
    int v21 = v152;
    uint64_t v22 = *v14;
    if (*(unsigned char *)(*v14 + 364)) {
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 648))(v123[43]);
    }
    else {
      int v23 = 1;
    }
    int v24 = 4 * v21;
    if (*(unsigned char *)(v22 + 371))
    {
      int v27 = 0;
      int v28 = 4;
      if (v20) {
        int v28 = v24;
      }
    }
    else
    {
      if (v122 == 1)
      {
        if (v16 == 5) {
          int v25 = v23;
        }
        else {
          int v25 = 0;
        }
        if (*(unsigned char *)(*v14 + 372)) {
          int v26 = 3;
        }
        else {
          int v26 = v25;
        }
      }
      else
      {
        int v26 = 0;
      }
      LODWORD(v152) = 0;
      if (sub_1CBA864D8(v22, v13, "MemoryReadCacheCtl", (int *)&v152)) {
        int v27 = v152;
      }
      else {
        int v27 = v26;
      }
      int v28 = 4;
      if (v20) {
        int v29 = v24;
      }
      else {
        int v29 = 4;
      }
      if (v27 != 3) {
        int v28 = v29;
      }
    }
    unsigned int v19 = v28 | v27;
  }
  uint8x8_t v30 = sub_1CD7EBF14(*(void *)(a3 + 16), v19, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
  uint64_t v117 = v31;
  char v118 = v30;
  uint64_t v32 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
  unint64_t v119 = v34;
  uint64_t v120 = v32;
  int v35 = 3;
  char v36 = 9;
  if (v146 == 3)
  {
    if (*(unsigned char *)(v142 + 326)) {
      char v36 = 12;
    }
    else {
      char v36 = 9;
    }
    if (*(unsigned char *)(v142 + 326)) {
      int v35 = 127;
    }
    else {
      int v35 = 3;
    }
  }
  unsigned int v37 = 0;
  unsigned int v114 = (v144 >> v36) & v35;
  char v38 = *(unsigned char *)(*v14 + 326);
  uint64_t v128 = 0;
  int v129 = 0;
  char v130 = 0;
  uint64_t v131 = 0;
  char v132 = 0;
  uint64_t v136 = 0;
  int v137 = 0;
  uint64_t v133 = 0;
  unint64_t v134 = 0;
  LODWORD(v135) = 0;
  uint64_t v124 = a3;
  uint64_t v138 = a3;
  char v139 = v38;
  char v140 = 0;
  int v141 = 0;
  do
  {
    char v39 = 2;
    uint64_t v40 = 1024;
    do
    {
      if (v146 == 3)
      {
        unint64_t v41 = v144;
        if (*(unsigned char *)(v142 + 326))
        {
          unint64_t v42 = v144 & 0xFFFFFFFFFFF80FFFLL;
          uint64_t v43 = (4096 << v39);
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v41 = v144;
      }
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFF9FFLL;
      uint64_t v43 = v40 & 0xFFFFFE00;
LABEL_50:
      unint64_t v144 = v42 | v43;
      int v44 = (v42 | v43) & 0xF;
      unsigned int v45 = (v144 >> 12) & 0x7F;
      unsigned int v46 = (v144 >> 9) & 3;
      int v47 = v45 == 2;
      if (v45 == 4) {
        int v47 = 2;
      }
      if (v45) {
        unsigned int v46 = v47;
      }
      if (v44 == 2)
      {
        unsigned int v48 = v46 + 2;
      }
      else
      {
        int v50 = 1 << v44;
        if ((v50 & 0xC2) != 0)
        {
          unsigned int v48 = v46 + 1;
        }
        else if ((v50 & 0x431) != 0)
        {
          unsigned int v48 = v46;
        }
        else
        {
          unsigned int v48 = 2;
        }
      }
      long long v152 = *(_OWORD *)(a2 + 1);
      char v49 = sub_1CD40F52C((uint64_t)v127, (uint64_t *)&v152, v48, v33, 6, 0, 5, 0, 6, 0, v37, a4);
      if (!v40) {
        break;
      }
      v40 -= 512;
      --v39;
    }
    while ((v49 & 1) == 0);
    if (v37++ > 1) {
      char v52 = 1;
    }
    else {
      char v52 = v49;
    }
  }
  while ((v52 & 1) == 0);
  if (v49)
  {
    *a4 = 0;
    uint64_t v53 = v124;
    uint64_t v54 = v18;
  }
  else
  {
    uint64_t v54 = v18;
    if (v146 == 3 && *(unsigned char *)(v142 + 326))
    {
      unint64_t v55 = v144 & 0xFFFFFFFFFFF80FFFLL;
      unsigned int v56 = 4096 << v114;
    }
    else
    {
      unint64_t v55 = v144 & 0xFFFFFFFFFFFFF9FFLL;
      unsigned int v56 = v114 << 9;
    }
    unint64_t v57 = v55 | v56;
    unint64_t v144 = v57;
    int v58 = v57 & 0xF;
    unsigned int v59 = (v57 >> 12) & 0x7F;
    uint64_t v53 = v124;
    if (v59)
    {
      if (v59 == 4) {
        unsigned int v60 = 2;
      }
      else {
        unsigned int v60 = v59 == 2;
      }
    }
    else
    {
      unsigned int v60 = (v57 >> 9) & 3;
    }
    if (v58 == 2)
    {
      v60 += 2;
    }
    else
    {
      int v109 = 1 << v58;
      if ((v109 & 0xC2) != 0)
      {
        ++v60;
      }
      else if ((v109 & 0x431) == 0)
      {
        unsigned int v60 = 2;
      }
    }
    long long v152 = *(_OWORD *)(a2 + 1);
    sub_1CD40F52C((uint64_t)v127, (uint64_t *)&v152, v60, v33, 6, 0, 5, 0, 6, 0, 0, 0);
  }
  v144 |= (unint64_t)v127[2] << 11;
  unint64_t v61 = sub_1CD7EBF14(*(void *)(v53 + 16), v144, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  uint64_t v63 = v62;
  uint64_t v65 = v134;
  unint64_t v64 = v135;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v54 + 288))(v54) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v54)(v54, 37, 0, 1, 2))
  {
    uint64_t v66 = *(void *)(v53 + 16);
    unsigned int v67 = sub_1CD7EBF14(v66, 0, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
    int v69 = v68;
    unsigned int v70 = sub_1CD8015C0(*(void *)(v53 + 16), 26, (const llvm::APInt *)&v150, (llvm *)5, 0, (uint64_t)v65, v64);
    int v72 = v71;
    char v73 = sub_1CD7EBF14(*(void *)(v124 + 16), 0, (const llvm::APInt *)&v150, (llvm *)5, 0, 1, 0);
    int v113 = v72;
    uint64_t v53 = v124;
    uint64_t v76 = sub_1CD801380(v66, 495, (uint64_t)&v150, (llvm *)5, 0, (uint64_t)v67, v69, v75, (uint64_t)v70, v113, (uint64_t)v73, v74);
    uint64_t v65 = sub_1CD8016A0(*(void *)(v124 + 16), 26, (const llvm::APInt *)&v150, (llvm *)6, 0, (uint64_t)v65, v64, v77, (uint64_t)v76, 0);
    unint64_t v64 = v64 & 0xFFFFFFFF00000000 | v78;
  }
  *(void *)&long long v152 = v153;
  v153[0] = v61;
  v153[1] = v63;
  v153[2] = v118;
  v153[3] = v117;
  v153[4] = v65;
  v153[5] = v64;
  *((void *)&v152 + 1) = 0x800000003;
  unsigned int v80 = sub_1CD40CAC4((uint64_t)v127);
  if (DWORD2(v152) >= HIDWORD(v152)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v81 = (uint64_t **)(v152 + 16 * DWORD2(v152));
  *BOOL v81 = v80;
  v81[1] = v79;
  unsigned int v82 = DWORD2(v152) + 1;
  DWORD2(v152) = v82;
  if (v82 >= HIDWORD(v152)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  char v83 = (uint64_t **)(v152 + 16 * v82);
  *char v83 = v120;
  v83[1] = v119;
  unsigned int v84 = DWORD2(v152) + 1;
  DWORD2(v152) = v84;
  if (v84 >= HIDWORD(v152)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(v152 + 16 * v84) = v121;
  ++DWORD2(v152);
  uint64_t v85 = DWORD2(v152);
  int v86 = sub_1CB950FDC((uint64_t)&v142, v146, 1, v127[1]);
  uint64_t v87 = *(void *)(v53 + 16);
  int v88 = (uint64_t *)v152;
  uint64_t v89 = sub_1CD7F95FC(v87, v148, v149, 1, 0);
  BOOL v91 = sub_1CD801044(v87, v86, (uint64_t)&v150, v89, v90, v88, v85);
  if (v122 == 65)
  {
    uint64_t v94 = (v144 >> 54);
    if ((v144 & 0x2000000000000000) != 0) {
      uint64_t v94 = 0;
    }
    if (v143 == 1) {
      __int16 v95 = 2;
    }
    else {
      __int16 v95 = 1;
    }
    unint64_t v93 = sub_1CBA9F684((v94 | ((v144 & 0x2000000000000000) >> 29)) ^ 0x100000000, v144 >> 4, v144 & 0xF, v95, (uint64_t)v123);
    uint64_t v92 = v116;
  }
  else
  {
    uint64_t v92 = v116;
    unint64_t v93 = v115;
    if (v122 == 2) {
      *(_WORD *)(v115 + 32) |= 0x20u;
    }
  }
  uint64_t v96 = *(uint64_t **)(v53 + 16);
  v154[0] = v93;
  sub_1CD8005B8(v96, (uint64_t)v91, v154, 1);
  if (v147) {
    int v97 = 0;
  }
  else {
    int v97 = *((_DWORD *)a2 + 22);
  }
  unint64_t v125 = v150;
  if (v150) {
    llvm::MetadataTracking::track((uint64_t)&v125, v150, 2);
  }
  int v126 = v151;
  uint64_t v98 = sub_1CD40BA70(v92, v97, (const llvm::APInt *)&v125, (uint64_t)v91, (uint64_t)&v142, v53);
  if (v125)
  {
    int v99 = *v125;
    if ((v99 - 4) > 0x1E)
    {
      if ((v99 - 3) >= 0xFFFFFFFE) {
        long long v103 = v125;
      }
      else {
        long long v103 = 0;
      }
      if ((v99 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v104 = (unint64_t)(v103 + 8);
        goto LABEL_119;
      }
      if (v99 == 3) {
        *((void *)v125 + 1) = 0;
      }
    }
    else if ((v125[1] & 0x7F) == 2 || *((_DWORD *)v125 + 3))
    {
      uint64_t v110 = *((void *)v125 + 2);
      if ((v110 & 4) != 0)
      {
        unint64_t v104 = v110 & 0xFFFFFFFFFFFFFFF8;
        if (v104)
        {
LABEL_119:
          v154[0] = &v125;
          sub_1CC5FA668(v104 + 16, v154);
        }
      }
    }
  }
  if ((void *)v152 != v153) {
    free((void *)v152);
  }
  if (v128)
  {
    int v100 = *v128;
    if ((v100 - 4) > 0x1E)
    {
      if ((v100 - 3) >= 0xFFFFFFFE) {
        unsigned int v105 = v128;
      }
      else {
        unsigned int v105 = 0;
      }
      if ((v100 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v106 = (unint64_t)(v105 + 8);
        goto LABEL_125;
      }
      if (v100 == 3) {
        *((void *)v128 + 1) = 0;
      }
    }
    else if ((v128[1] & 0x7F) == 2 || *((_DWORD *)v128 + 3))
    {
      uint64_t v111 = *((void *)v128 + 2);
      if ((v111 & 4) != 0)
      {
        unint64_t v106 = v111 & 0xFFFFFFFFFFFFFFF8;
        if (v106)
        {
LABEL_125:
          *(void *)&long long v152 = &v128;
          sub_1CC5FA668(v106 + 16, &v152);
        }
      }
    }
  }
  if (v150)
  {
    int v101 = *v150;
    if ((v101 - 4) > 0x1E)
    {
      if ((v101 - 3) >= 0xFFFFFFFE) {
        int v107 = v150;
      }
      else {
        int v107 = 0;
      }
      if ((v101 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v108 = (unint64_t)(v107 + 8);
        goto LABEL_131;
      }
      if (v101 == 3) {
        *((void *)v150 + 1) = 0;
      }
    }
    else if ((v150[1] & 0x7F) == 2 || *((_DWORD *)v150 + 3))
    {
      uint64_t v112 = *((void *)v150 + 2);
      if ((v112 & 4) != 0)
      {
        unint64_t v108 = v112 & 0xFFFFFFFFFFFFFFF8;
        if (v108)
        {
LABEL_131:
          *(void *)&long long v152 = &v150;
          sub_1CC5FA668(v108 + 16, &v152);
        }
      }
    }
  }
  return v98;
}

uint64_t *sub_1CB9FCED0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v118[1] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *(uint64_t **)(*a2 + 32);
  uint64_t v84 = *v11;
  uint64_t v85 = *(void *)(*a2 + 96);
  uint64_t v83 = v11[1];
  uint64_t v12 = sub_1CB9FD5FC(a2[1], a2[2], *(llvm::APFloatBase **)(a3 + 16), a4, a5, a6, a7, a8);
  uint64_t v15 = v14;
  uint64_t v16 = *a2;
  int v17 = *(unsigned __int8 **)(*a2 + 64);
  int v113 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v113, v17, 2);
  }
  int v114 = *(_DWORD *)(v16 + 60);
  uint64_t v18 = (unsigned __int8 *)v12[8];
  uint64_t v111 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v111, v18, 2);
  }
  int v112 = *((_DWORD *)v12 + 15);
  uint64_t v19 = a1 + 184296;
  uint64_t v20 = *(void *)(a1 + 184296);
  if (*(unsigned char *)(v20 + 405)) {
    uint64_t v21 = 5;
  }
  else {
    uint64_t v21 = 4;
  }
  sub_1CB9FB87C((uint64_t)v105, *(const char **)(*(void *)(a3 + 16) + 56), a2, v20, v13);
  int v23 = 3;
  char v24 = 9;
  int v86 = a2;
  uint64_t v87 = a1;
  if (v107 == 3)
  {
    if (*(unsigned char *)(v105[0] + 326)) {
      char v24 = 12;
    }
    else {
      char v24 = 9;
    }
    if (*(unsigned char *)(v105[0] + 326)) {
      int v23 = 127;
    }
    else {
      int v23 = 3;
    }
  }
  unsigned int v25 = 0;
  unsigned int v82 = (v106 >> v24) & v23;
  uint64_t v26 = *(void *)v19;
  if (*(unsigned char *)(*(void *)v19 + 407)) {
    int v27 = 2 * *(unsigned __int8 *)(*(void *)v19 + 406);
  }
  else {
    int v27 = (2 * *(unsigned __int8 *)(*(void *)v19 + 406)) | 0x10000;
  }
  char v28 = *(unsigned char *)(v26 + 326);
  char v29 = *(unsigned char *)(v26 + 405);
  BOOL v91 = 0;
  int v92 = 0;
  char v93 = 0;
  uint64_t v94 = 0;
  char v95 = 0;
  uint64_t v99 = 0;
  int v100 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  int v98 = 0;
  uint64_t v101 = a3;
  char v102 = v28;
  char v103 = v29;
  int v104 = v27;
  do
  {
    char v30 = 2;
    uint64_t v31 = 1024;
    do
    {
      if (v107 == 3)
      {
        uint64_t v32 = v106;
        if (*(unsigned char *)(v105[0] + 326))
        {
          unint64_t v33 = v106 & 0xFFFFFFFFFFF80FFFLL;
          uint64_t v34 = (4096 << v30);
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v32 = v106;
      }
      unint64_t v33 = v32 & 0xFFFFFFFFFFFFF9FFLL;
      uint64_t v34 = v31 & 0xFFFFFE00;
LABEL_25:
      uint64_t v106 = v33 | v34;
      int v35 = (v33 | v34) & 0xF;
      unsigned int v36 = (v106 >> 12) & 0x7F;
      unsigned int v37 = (v106 >> 9) & 3;
      int v38 = v36 == 2;
      if (v36 == 4) {
        int v38 = 2;
      }
      if (v36) {
        unsigned int v37 = v38;
      }
      if (v35 == 2)
      {
        unsigned int v39 = v37 + 2;
      }
      else
      {
        int v41 = 1 << v35;
        if ((v41 & 0xC2) != 0)
        {
          unsigned int v39 = v37 + 1;
        }
        else if ((v41 & 0x431) != 0)
        {
          unsigned int v39 = v37;
        }
        else
        {
          unsigned int v39 = 2;
        }
      }
      unint64_t v115 = (unsigned __int8 **)v12;
      uint64_t v116 = v15;
      char v40 = sub_1CD40F52C((uint64_t)v90, (uint64_t *)&v115, v39, v22, v21, 0, 4, 0, 4, 0, v25, 0);
      if (!v31) {
        break;
      }
      v31 -= 512;
      --v30;
    }
    while ((v40 & 1) == 0);
    if (v25++ > 1) {
      char v43 = 1;
    }
    else {
      char v43 = v40;
    }
  }
  while ((v43 & 1) == 0);
  if ((v40 & 1) == 0)
  {
    if (v107 == 3 && *(unsigned char *)(v105[0] + 326))
    {
      unint64_t v44 = v106 & 0xFFFFFFFFFFF80FFFLL;
      unsigned int v45 = 4096 << v82;
    }
    else
    {
      unint64_t v44 = v106 & 0xFFFFFFFFFFFFF9FFLL;
      unsigned int v45 = v82 << 9;
    }
    uint64_t v46 = v44 | v45;
    uint64_t v106 = v46;
    int v47 = v46 & 0xF;
    unsigned int v48 = (v46 >> 12) & 0x7F;
    if (v48)
    {
      if (v48 == 4) {
        unsigned int v49 = 2;
      }
      else {
        unsigned int v49 = v48 == 2;
      }
    }
    else
    {
      unsigned int v49 = (v46 >> 9) & 3;
    }
    if (v47 == 2)
    {
      unsigned int v50 = v49 + 2;
    }
    else
    {
      int v77 = 1 << v47;
      if ((v77 & 0xC2) != 0)
      {
        unsigned int v50 = v49 + 1;
      }
      else if ((v77 & 0x431) != 0)
      {
        unsigned int v50 = v49;
      }
      else
      {
        unsigned int v50 = 2;
      }
    }
    unint64_t v115 = (unsigned __int8 **)v12;
    uint64_t v116 = v15;
    sub_1CD40F52C((uint64_t)v90, (uint64_t *)&v115, v50, v22, v21, 0, 4, 0, 4, 0, 0, 0);
  }
  v106 |= (unint64_t)v90[2] << 11;
  unint64_t v51 = sub_1CD7EBF14(*(void *)(a3 + 16), v106, (const llvm::APInt *)&v113, (llvm *)6, 0, 1, 0);
  unint64_t v115 = (unsigned __int8 **)v117;
  uint64_t v116 = 0x800000000;
  sub_1CB9FE228(*(llvm::APFloatBase **)(a3 + 16), (const llvm::APInt *)&v113, *(unsigned __int8 *)(*(void *)(a1 + 184296) + 326), (uint64_t)v90, (uint64_t)v51, v52, v21, v53, v84, v83, (uint64_t)&v115);
  int v54 = sub_1CB950FDC((uint64_t)v105, v107, v90[0] == 0, v90[1]);
  uint64_t v55 = *(void *)(a3 + 16);
  unsigned int v56 = (uint64_t *)v115;
  uint64_t v57 = v116;
  uint64_t v58 = sub_1CD7F95FC(v55, v109, v110, 1, 0);
  unsigned int v60 = sub_1CD801044(v55, v54, (uint64_t)&v113, v58, v59, v56, v57);
  unint64_t v61 = *(uint64_t **)(a3 + 16);
  v118[0] = v85;
  sub_1CD8005B8(v61, (uint64_t)v60, v118, 1);
  if (v108) {
    int v62 = 0;
  }
  else {
    int v62 = *((_DWORD *)v86 + 22);
  }
  int v88 = v113;
  if (v113) {
    llvm::MetadataTracking::track((uint64_t)&v88, v113, 2);
  }
  int v89 = v114;
  uint64_t v63 = sub_1CD40BA70(v87, v62, (const llvm::APInt *)&v88, (uint64_t)v60, (uint64_t)v105, a3);
  if (v88)
  {
    int v64 = *v88;
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        int v69 = v88;
      }
      else {
        int v69 = 0;
      }
      if ((v64 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v70 = (unint64_t)(v69 + 8);
        goto LABEL_82;
      }
      if (v64 == 3) {
        *((void *)v88 + 1) = 0;
      }
    }
    else if ((v88[1] & 0x7F) == 2 || *((_DWORD *)v88 + 3))
    {
      uint64_t v78 = *((void *)v88 + 2);
      if ((v78 & 4) != 0)
      {
        unint64_t v70 = v78 & 0xFFFFFFFFFFFFFFF8;
        if (v70)
        {
LABEL_82:
          v118[0] = &v88;
          sub_1CC5FA668(v70 + 16, v118);
        }
      }
    }
  }
  if (v115 != (unsigned __int8 **)v117) {
    free(v115);
  }
  if (v91)
  {
    int v65 = *v91;
    if ((v65 - 4) > 0x1E)
    {
      if ((v65 - 3) >= 0xFFFFFFFE) {
        int v71 = v91;
      }
      else {
        int v71 = 0;
      }
      if ((v65 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v72 = (unint64_t)(v71 + 8);
        goto LABEL_88;
      }
      if (v65 == 3) {
        *((void *)v91 + 1) = 0;
      }
    }
    else if ((v91[1] & 0x7F) == 2 || *((_DWORD *)v91 + 3))
    {
      uint64_t v79 = *((void *)v91 + 2);
      if ((v79 & 4) != 0)
      {
        unint64_t v72 = v79 & 0xFFFFFFFFFFFFFFF8;
        if (v72)
        {
LABEL_88:
          unint64_t v115 = &v91;
          sub_1CC5FA668(v72 + 16, &v115);
        }
      }
    }
  }
  if (v111)
  {
    int v66 = *v111;
    if ((v66 - 4) > 0x1E)
    {
      if ((v66 - 3) >= 0xFFFFFFFE) {
        char v73 = v111;
      }
      else {
        char v73 = 0;
      }
      if ((v66 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v74 = (unint64_t)(v73 + 8);
        goto LABEL_94;
      }
      if (v66 == 3) {
        *((void *)v111 + 1) = 0;
      }
    }
    else if ((v111[1] & 0x7F) == 2 || *((_DWORD *)v111 + 3))
    {
      uint64_t v80 = *((void *)v111 + 2);
      if ((v80 & 4) != 0)
      {
        unint64_t v74 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v74)
        {
LABEL_94:
          unint64_t v115 = &v111;
          sub_1CC5FA668(v74 + 16, &v115);
        }
      }
    }
  }
  if (v113)
  {
    int v67 = *v113;
    if ((v67 - 4) > 0x1E)
    {
      if ((v67 - 3) >= 0xFFFFFFFE) {
        uint64_t v75 = v113;
      }
      else {
        uint64_t v75 = 0;
      }
      if ((v67 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v76 = (unint64_t)(v75 + 8);
        goto LABEL_100;
      }
      if (v67 == 3) {
        *((void *)v113 + 1) = 0;
      }
    }
    else if ((v113[1] & 0x7F) == 2 || *((_DWORD *)v113 + 3))
    {
      uint64_t v81 = *((void *)v113 + 2);
      if ((v81 & 4) != 0)
      {
        unint64_t v76 = v81 & 0xFFFFFFFFFFFFFFF8;
        if (v76)
        {
LABEL_100:
          unint64_t v115 = &v113;
          sub_1CC5FA668(v76 + 16, &v115);
        }
      }
    }
  }
  return v63;
}

uint64_t *sub_1CB9FD5FC(uint64_t a1, unint64_t a2, llvm::APFloatBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = (uint64_t *)a1;
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *(unsigned __int8 **)(a1 + 64);
  int v126 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v126, v11, 2);
  }
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  int v127 = *((_DWORD *)v10 + 15);
  uint64_t v12 = *((void *)a3 + 5);
  if (*(unsigned char *)(*(void *)(v12 + 16) + 405)) {
    unint64_t v13 = 32;
  }
  else {
    unint64_t v13 = 16;
  }
  if (*(unsigned char *)(*(void *)(v12 + 16) + 405)) {
    unsigned __int8 v14 = 5;
  }
  else {
    unsigned __int8 v14 = 4;
  }
  uint64_t v118 = *(void *)(v12 + 344);
  unint64_t v119 = 0;
  unsigned __int8 v125 = v14;
  uint64_t v120 = v10;
LABEL_10:
  unint64_t v121 = v122 & 0xFFFFFFFF00000000;
  uint64_t v15 = 1;
  while (1)
  {
    while (1)
    {
      int v16 = *((unsigned __int16 *)v10 + 12);
      if ((v16 - 198) <= 2)
      {
        while (1)
        {
          long long v136 = *(_OWORD *)(*(void *)(*(void *)v10[4] + 40) + 16 * *(unsigned int *)(v10[4] + 8));
          if ((_BYTE)v136) {
            uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v136);
          }
          else {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v136);
          }
          unint64_t v19 = ExtendedSizeInBits;
          if (v18 == 1) {
          if (v19 < v13)
          }
            break;
          uint64_t v20 = (unsigned int *)v10[4];
          long long v10 = *(uint64_t **)v20;
          a2 = a2 & 0xFFFFFFFF00000000 | v20[2];
          int v16 = *(unsigned __int16 *)(*(void *)v20 + 24);
          if ((v16 - 198) >= 3) {
            goto LABEL_21;
          }
        }
        int v16 = *((unsigned __int16 *)v10 + 12);
      }
LABEL_21:
      if (v16 != 56) {
        break;
      }
      uint64_t v21 = v10[4];
      unsigned int v22 = *(unsigned __int16 *)(*(void *)v21 + 24);
      BOOL v23 = v22 > 0x26;
      uint64_t v24 = (1 << v22) & 0x6000006000;
      if (v23 || v24 == 0)
      {
        uint64_t v26 = (unsigned __int16 *)(v10 + 3);
LABEL_28:
        uint64_t v27 = 0;
        char v28 = 1;
        while (1)
        {
          char v29 = v28;
          uint64_t v30 = *(void *)(v21 + 40 * v27);
          int v31 = *(unsigned __int16 *)(v30 + 24);
          if (v31 == 35 || v31 == 11) {
            break;
          }
          char v28 = 0;
          uint64_t v27 = 1;
          if ((v29 & 1) == 0) {
            goto LABEL_36;
          }
        }
        uint64_t v44 = *(void *)(v30 + 80);
        unsigned int v45 = *(_DWORD *)(v44 + 32);
        if (v45 > 0x40) {
          uint64_t v46 = **(void **)(v44 + 24);
        }
        else {
          uint64_t v46 = (uint64_t)(*(void *)(v44 + 24) << -(char)v45) >> -(char)v45;
        }
        uint64_t v49 = v21 + 40 * (v27 ^ 1);
        long long v10 = *(uint64_t **)v49;
        unint64_t v50 = *(unsigned int *)(v49 + 8);
        unint64_t v51 = a2 & 0xFFFFFFFF00000000;
LABEL_55:
        a2 = v51 | v50;
        v124 += v46 * v15;
      }
      else
      {
        v124 += v15
              * (unsigned __int16)sub_1CD1117B0(*(llvm::GlobalValue **)(*(void *)v21 + 80), *(void *)(*(void *)v21 + 88), v118, 0);
        uint64_t v55 = v10[4];
        long long v10 = *(uint64_t **)(v55 + 40);
        a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v55 + 48);
        unint64_t v122 = v121;
      }
    }
    uint64_t v26 = (unsigned __int16 *)(v10 + 3);
    if (v16 == 172)
    {
      for (uint64_t i = 0; i != 64; i += 32)
      {
        uint64_t v63 = (char *)&v136 + i;
        *((_DWORD *)v63 + 2) = 1;
        *(void *)uint64_t v63 = 0;
        *((_DWORD *)v63 + 6) = 1;
        *((void *)v63 + 2) = 0;
      }
      sub_1CD7F121C((uint64_t)a3, *(void *)v10[4], *(void *)(v10[4] + 8), 0, (uint64_t)&v132);
      if (DWORD2(v136) >= 0x41 && (void)v136) {
        MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
      }
      *(void *)&long long v136 = v132;
      DWORD2(v136) = v133;
      unsigned int v133 = 0;
      if (v138 >= 0x41 && v137)
      {
        MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
        uint64_t v137 = v134;
        unsigned int v138 = v135;
        unsigned int v135 = 0;
        if (v133 >= 0x41 && v132) {
          MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v137 = v134;
        unsigned int v138 = v135;
      }
      sub_1CD7F121C((uint64_t)a3, *(void *)(v10[4] + 40), *(void *)(v10[4] + 48), 0, (uint64_t)&v132);
      if (v140 >= 0x41 && v139) {
        MEMORY[0x1D25D9CB0](v139, 0x1000C8000313F17);
      }
      uint64_t v139 = v132;
      unsigned int v140 = v133;
      unsigned int v133 = 0;
      if (v142[0] >= 0x41u && v141)
      {
        MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
        uint64_t v141 = v134;
        v142[0] = v135;
        unsigned int v135 = 0;
        if (v133 >= 0x41 && v132) {
          MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v141 = v134;
        v142[0] = v135;
      }
      int v131 = DWORD2(v136);
      if (DWORD2(v136) > 0x40) {
        operator new[]();
      }
      if (DWORD2(v136)) {
        unint64_t v64 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v136);
      }
      else {
        unint64_t v64 = 0;
      }
      unint64_t v65 = v64 & ~(void)v136;
      unint64_t v130 = v65;
      int v131 = 0;
      unsigned int v129 = v140;
      uint64_t v117 = a3;
      if (v140 > 0x40) {
        operator new[]();
      }
      if (v140) {
        unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v140;
      }
      else {
        unint64_t v72 = 0;
      }
      unint64_t v128 = v72 & ~v139;
      unsigned int v129 = 0;
      uint64_t v73 = (v128 & v65) == 0;
      for (uint64_t j = 0; j != -16; j -= 8)
      {
        uint64_t v75 = (char *)&v136 + j * 4;
        if (v142[j] >= 0x41u)
        {
          uint64_t v76 = *((void *)v75 + 6);
          if (v76)
          {
            unsigned int v116 = v73;
            MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
            uint64_t v73 = v116;
          }
        }
        if (*((_DWORD *)v75 + 10) >= 0x41u)
        {
          uint64_t v77 = *((void *)v75 + 4);
          if (v77)
          {
            uint64_t v78 = v73;
            MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
            uint64_t v73 = v78;
          }
        }
      }
      if (v73)
      {
        uint64_t v21 = v10[4];
        a3 = v117;
        goto LABEL_28;
      }
      a3 = v117;
    }
LABEL_36:
    int v33 = *v26;
    if (v33 == 56)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v10[4];
      char v36 = 1;
      do
      {
        char v37 = v36;
        int v38 = (unsigned int *)(v35 + 40 * v34);
        uint64_t v39 = *(void *)v38;
        if (*(_WORD *)(*(void *)v38 + 24) == 56)
        {
          char v40 = *(uint64_t **)(v39 + 32);
          uint64_t v41 = v40[5];
          int v42 = *(unsigned __int16 *)(v41 + 24);
          if (v42 == 35 || v42 == 11)
          {
            uint64_t v47 = *(void *)(v41 + 80);
            unsigned int v48 = *(_DWORD *)(v47 + 32);
            if (v48 > 0x40) {
              uint64_t v46 = **(void **)(v47 + 24);
            }
            else {
              uint64_t v46 = (uint64_t)(*(void *)(v47 + 24) << -(char)v48) >> -(char)v48;
            }
            uint64_t v52 = *((void *)a3 + 104);
            if (v52) {
              LOWORD(v52) = *(_WORD *)(v52 + 8);
            }
            uint64_t v53 = *(void *)(v39 + 40) + 16 * v38[2];
            long long v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v126, *(llvm **)v53, *(void *)(v53 + 8), *v40, v40[1], a8, *(void *)(v35 + 40 * (v34 ^ 1)), *(void *)(v35 + 40 * (v34 ^ 1) + 8), v52);
            unint64_t v51 = v54;
            unint64_t v50 = a2 & 0xFFFFFFFF00000000;
            goto LABEL_55;
          }
        }
        char v36 = 0;
        uint64_t v34 = 1;
      }
      while ((v37 & 1) != 0);
      uint64_t v79 = (uint64_t)v123;
      if (v123 || v15 != 1) {
        goto LABEL_133;
      }
      uint64_t v80 = v10[6];
      if (!v80) {
        goto LABEL_132;
      }
      int v81 = 1;
      do
      {
        if (*(_DWORD *)(v80 + 8) == a2)
        {
          if (!v81) {
            goto LABEL_132;
          }
          --v81;
        }
        uint64_t v80 = *(void *)(v80 + 32);
      }
      while (v80);
      if (v81)
      {
LABEL_132:
        uint64_t v79 = 0;
        uint64_t v15 = 1;
        goto LABEL_133;
      }
      unsigned int v82 = (void *)v10[4];
      long long v10 = (uint64_t *)*v82;
      if (*(_WORD *)(*v82 + 24) == 175)
      {
        uint64_t v123 = (uint64_t *)v82[5];
        uint64_t v83 = (unsigned int *)(v82 + 6);
        uint64_t v84 = (unsigned int *)(v82 + 1);
      }
      else
      {
        uint64_t v83 = (unsigned int *)(v82 + 1);
        uint64_t v123 = (uint64_t *)*v82;
        long long v10 = (uint64_t *)v82[5];
        uint64_t v84 = (unsigned int *)(v82 + 6);
      }
      a2 = a2 & 0xFFFFFFFF00000000 | *v84;
      unint64_t v119 = (void *)*v83;
      goto LABEL_10;
    }
    if (v33 == 58) {
      break;
    }
    if (v33 != 175) {
      goto LABEL_145;
    }
    uint64_t v56 = v10[4];
    uint64_t v57 = *(void *)(v56 + 40);
    int v58 = *(unsigned __int16 *)(v57 + 24);
    if (v58 != 35 && v58 != 11) {
      goto LABEL_145;
    }
    uint64_t v60 = *(void *)(v57 + 80);
    unint64_t v61 = (void *)(v60 + 24);
    if (*(_DWORD *)(v60 + 32) >= 0x41u) {
      unint64_t v61 = (void *)*v61;
    }
    v15 <<= *v61;
LABEL_93:
    a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v56 + 8);
    long long v10 = *(uint64_t **)v56;
  }
  uint64_t v56 = v10[4];
  uint64_t v66 = *(void *)(v56 + 40);
  int v67 = *(unsigned __int16 *)(v66 + 24);
  if (v67 == 35 || v67 == 11)
  {
    uint64_t v69 = *(void *)(v66 + 80);
    unsigned int v70 = *(_DWORD *)(v69 + 32);
    if (v70 > 0x40) {
      uint64_t v71 = **(void **)(v69 + 24);
    }
    else {
      uint64_t v71 = (uint64_t)(*(void *)(v69 + 24) << -(char)v70) >> -(char)v70;
    }
    v15 *= v71;
    goto LABEL_93;
  }
LABEL_145:
  uint64_t v79 = (uint64_t)v123;
LABEL_133:
  if (v124 < 0x8000 && (v15 & 0x8000000000000000) == 0)
  {
    unsigned int v86 = sub_1CB87E200(&v125);
    if (v85 == 1) {
    if (v86 > 0x40)
    }
      operator new[]();
    if (v86) {
      unint64_t v87 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
    }
    else {
      unint64_t v87 = 0;
    }
    int v88 = (unsigned __int8 *)(v10[5] + 16 * a2);
    if (v125 != *v88 || !v125 && *((void *)v88 + 1))
    {
      uint64_t v89 = *((void *)a3 + 104);
      if (v89) {
        __int16 v90 = *(_WORD *)(v89 + 8);
      }
      else {
        __int16 v90 = 0;
      }
      long long v10 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v126, (llvm *)v125, 0, (uint64_t)v10, (void *)a2, v90);
      a2 = a2 & 0xFFFFFFFF00000000 | v91;
    }
    if ((v87 & v15) >= 2)
    {
      uint64_t v96 = (llvm *)v125;
      uint64_t v97 = sub_1CD7EBF14((uint64_t)a3, v87 & v15, (const llvm::APInt *)&v126, (llvm *)v125, 0, 0, 0);
      uint64_t v100 = *((void *)a3 + 104);
      if (v100) {
        LOWORD(v100) = *(_WORD *)(v100 + 8);
      }
      long long v10 = sub_1CCFDED5C((uint64_t)a3, 58, (const llvm::APInt *)&v126, v96, 0, (uint64_t)v10, a2, v99, (uint64_t)v97, v98, v100);
      a2 = a2 & 0xFFFFFFFF00000000 | v101;
    }
    if ((uint64_t)(v87 & v124) >= 1)
    {
      char v102 = (llvm *)v125;
      char v103 = sub_1CD7EBF14((uint64_t)a3, v87 & v124, (const llvm::APInt *)&v126, (llvm *)v125, 0, 0, 0);
      uint64_t v106 = *((void *)a3 + 104);
      if (v106) {
        LOWORD(v106) = *(_WORD *)(v106 + 8);
      }
      long long v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v126, v102, 0, (uint64_t)v10, a2, v105, (uint64_t)v103, v104, v106);
      a2 = a2 & 0xFFFFFFFF00000000 | v107;
      if (v79) {
        goto LABEL_171;
      }
    }
    else
    {
      if (!v79) {
        goto LABEL_151;
      }
LABEL_171:
      char v108 = (llvm *)v125;
      uint64_t v109 = *((void *)a3 + 104);
      if (v109) {
        __int16 v110 = *(_WORD *)(v109 + 8);
      }
      else {
        __int16 v110 = 0;
      }
      int v112 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v126, (llvm *)v125, 0, v79, v119, v110);
      uint64_t v114 = *((void *)a3 + 104);
      if (v114) {
        LOWORD(v114) = *(_WORD *)(v114 + 8);
      }
      long long v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v126, v108, 0, (uint64_t)v112, v111, v113, (uint64_t)v10, a2, v114);
    }
LABEL_151:
    uint64_t v120 = v10;
  }
  if (v126)
  {
    int v92 = *v126;
    if ((v92 - 4) > 0x1E)
    {
      if ((v92 - 3) >= 0xFFFFFFFE) {
        uint64_t v94 = v126;
      }
      else {
        uint64_t v94 = 0;
      }
      if ((v92 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v95 = (unint64_t)(v94 + 8);
        goto LABEL_162;
      }
      if (v92 == 3) {
        *((void *)v126 + 1) = 0;
      }
    }
    else if ((v126[1] & 0x7F) == 2 || *((_DWORD *)v126 + 3))
    {
      uint64_t v115 = *((void *)v126 + 2);
      if ((v115 & 4) != 0)
      {
        unint64_t v95 = v115 & 0xFFFFFFFFFFFFFFF8;
        if (v95)
        {
LABEL_162:
          *(void *)&long long v136 = &v126;
          sub_1CC5FA668(v95 + 16, &v136);
        }
      }
    }
  }
  return v120;
}

uint64_t *sub_1CB9FE228(llvm::APFloatBase *a1, const llvm::APInt *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = a10;
  int v15 = a7;
  if (a3)
  {
    int v17 = sub_1CD7EBF14((uint64_t)a1, 0, a2, (llvm *)5, 0, 1, 0);
    unsigned int v18 = *(_DWORD *)(a11 + 8);
    unint64_t v19 = (unsigned int *)(a11 + 8);
    if (v18 >= *(_DWORD *)(a11 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v20 = (uint64_t **)(*(void *)a11 + 16 * v18);
    *uint64_t v20 = v17;
    v20[1] = v16;
    unsigned int v21 = *(_DWORD *)(a11 + 12);
    unsigned int v22 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v22;
    if (v22 >= v21) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v23 = (void *)(*(void *)a11 + 16 * v22);
    *BOOL v23 = a5;
    v23[1] = a6;
    unsigned int v24 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v24;
    uint64_t v14 = a10;
    if (!*(unsigned char *)a4)
    {
      uint64_t v26 = *(uint64_t **)(a4 + 64);
      unint64_t v25 = *(void *)(a4 + 72);
      if (v15 == 5)
      {
        uint64_t v27 = *((void *)a1 + 104);
        if (v27) {
          __int16 v28 = *(_WORD *)(v27 + 8);
        }
        else {
          __int16 v28 = 0;
        }
        uint64_t v26 = sub_1CD7F3564(a1, (const char *)0xC9, (uint64_t)a2, (llvm *)4, 0, *(void *)(a4 + 64), *(void **)(a4 + 72), v28);
        unint64_t v25 = v25 & 0xFFFFFFFF00000000 | v36;
        unsigned int v24 = *v19;
      }
      if (v24 >= *(_DWORD *)(a11 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v37 = (uint64_t **)(*(void *)a11 + 16 * v24);
      *char v37 = v26;
      v37[1] = (uint64_t *)v25;
      ++*(_DWORD *)(a11 + 8);
      uint64_t v39 = sub_1CD7EBF14((uint64_t)a1, 0, a2, (llvm *)5, 0, 1, 0);
      unsigned int v40 = *(_DWORD *)(a11 + 8);
      if (v40 >= *(_DWORD *)(a11 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v41 = (uint64_t **)(*(void *)a11 + 16 * v40);
      *uint64_t v41 = v39;
      v41[1] = v38;
      ++*(_DWORD *)(a11 + 8);
    }
    uint64_t result = sub_1CD40CAC4(a4);
    unsigned int v44 = *(_DWORD *)(a11 + 8);
    if (v44 >= *(_DWORD *)(a11 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v45 = (uint64_t **)(*(void *)a11 + 16 * v44);
    *unsigned int v45 = result;
    v45[1] = v43;
    unsigned int v46 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v46;
    if (!*(unsigned char *)(a4 + 1))
    {
      uint64_t result = sub_1CD7EBF14((uint64_t)a1, 0, a2, (llvm *)5, 0, 1, 0);
      unsigned int v56 = *(_DWORD *)(a11 + 8);
      if (v56 >= *(_DWORD *)(a11 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v57 = (uint64_t **)(*(void *)a11 + 16 * v56);
      const char *v57 = result;
      v57[1] = v55;
      unsigned int v46 = *(_DWORD *)(a11 + 8) + 1;
      *(_DWORD *)(a11 + 8) = v46;
    }
    if (v46 >= *(_DWORD *)(a11 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v47 = (void *)(*(void *)a11 + 16 * v46);
    *uint64_t v47 = a9;
  }
  else
  {
    unsigned int v29 = *(_DWORD *)(a11 + 8);
    unint64_t v19 = (unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v30 = (void *)(*(void *)a11 + 16 * v29);
    *uint64_t v30 = a5;
    v30[1] = a6;
    unsigned int v31 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v31;
    if (!*(unsigned char *)a4)
    {
      int v33 = *(uint64_t **)(a4 + 64);
      unint64_t v32 = *(void *)(a4 + 72);
      if (a7 == 5)
      {
        uint64_t v34 = *((void *)a1 + 104);
        if (v34) {
          __int16 v35 = *(_WORD *)(v34 + 8);
        }
        else {
          __int16 v35 = 0;
        }
        int v33 = sub_1CD7F3564(a1, (const char *)0xC9, (uint64_t)a2, (llvm *)4, 0, *(void *)(a4 + 64), *(void **)(a4 + 72), v35);
        unint64_t v32 = v32 & 0xFFFFFFFF00000000 | v48;
        unsigned int v31 = *v19;
      }
      if (v31 >= *(_DWORD *)(a11 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v49 = (uint64_t **)(*(void *)a11 + 16 * v31);
      llvm::LLVMContext *v49 = v33;
      v49[1] = (uint64_t *)v32;
      ++*(_DWORD *)(a11 + 8);
    }
    uint64_t result = sub_1CD40CAC4(a4);
    unsigned int v51 = *(_DWORD *)(a11 + 8);
    if (v51 >= *(_DWORD *)(a11 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v52 = (uint64_t **)(*(void *)a11 + 16 * v51);
    *uint64_t v52 = result;
    v52[1] = v50;
    unsigned int v53 = *(_DWORD *)(a11 + 12);
    unsigned int v54 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v54;
    if (v54 >= v53) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v47 = (void *)(*(void *)a11 + 16 * v54);
    *uint64_t v47 = a9;
  }
  v47[1] = v14;
  ++*v19;
  return result;
}

uint64_t *sub_1CB9FE6B0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  v157[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  unint64_t v9 = *(unsigned __int8 **)(*a2 + 64);
  uint8x8_t v153 = v9;
  uint64_t v10 = v8;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v153, v9, 2);
    uint64_t v10 = *a2;
  }
  int v154 = *(_DWORD *)(v8 + 60);
  uint64_t v11 = *(void *)(v10 + 88);
  int v12 = *(_DWORD *)(*(void *)(v10 + 96) + 16);
  long long v126 = *(_OWORD *)*(void *)(v10 + 32);
  unint64_t v13 = a2[4];
  uint64_t v129 = a2[3];
  uint64_t v14 = *(llvm **)(v10 + 80);
  uint64_t v15 = a1 + 184296;
  sub_1CB9FB87C((uint64_t)&v147, *(const char **)(*(void *)(a3 + 16) + 56), a2, *(void *)(a1 + 184296), **(int8x8_t **)(v10 + 32));
  int v16 = *(uint64_t **)(*(void *)(a3 + 16) + 40);
  uint64_t v17 = *v16;
  unsigned int v18 = *(unsigned char **)v15;
  uint64_t v118 = (uint64_t)v16;
  uint64_t v121 = v16[43];
  if (*(unsigned char *)(*(void *)v15 + 318))
  {
    uint64_t v19 = 4;
  }
  else if (v18[319])
  {
    uint64_t v19 = 5;
  }
  else if (v18[320])
  {
    uint64_t v19 = 6;
  }
  else if (v18[321])
  {
    uint64_t v19 = 7;
  }
  else
  {
    uint64_t v19 = 9;
  }
  if (v18[364])
  {
    int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v121 + 648))(v121);
    unsigned int v18 = *(unsigned char **)v15;
  }
  else
  {
    int v20 = 1;
  }
  if (v12 == 1)
  {
    if (v19 != 5) {
      int v20 = 0;
    }
    if (v18[372]) {
      LODWORD(v21) = 3;
    }
    else {
      LODWORD(v21) = v20;
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  unsigned int v22 = v150;
  if (v150 == -1)
  {
    if (v18[371])
    {
      uint64_t v21 = 0;
    }
    else
    {
      LODWORD(v155) = 0;
      if (sub_1CBA864D8((int)v18, v17, "MemoryWriteCacheCtl", (int *)&v155)) {
        uint64_t v21 = v155;
      }
      else {
        uint64_t v21 = v21;
      }
      unsigned int v18 = *(unsigned char **)v15;
    }
    LODWORD(v155) = 0;
    int v23 = sub_1CBA864D8((int)v18, v17, "MemoryWriteL2Pers", (int *)&v155);
    int v24 = 4 * v155;
    if (!v23) {
      int v24 = 4;
    }
    if (v21 == 3) {
      int v24 = 4;
    }
    unsigned int v22 = v24 | v21;
  }
  unint64_t v25 = sub_1CD7EBF14(*(void *)(a3 + 16), v22, (const llvm::APInt *)&v153, (llvm *)5, 0, 1, 0);
  uint64_t v119 = v26;
  uint64_t v120 = v25;
  uint64_t v27 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v153, (llvm *)5, 0, 1, 0);
  unint64_t v122 = v28;
  uint64_t v123 = v27;
  uint64_t v125 = sub_1CD7FFC1C((llvm *)1, 0);
  if (!*((unsigned char *)a2 + 88) || v152)
  {
    if (v152)
    {
      uint64_t v31 = *(void *)(v129 + 32);
      uint64_t v129 = *(void *)v31;
      unint64_t v13 = v13 & 0xFFFFFFFF00000000 | *(unsigned int *)(v31 + 8);
    }
    goto LABEL_53;
  }
  if (!(_BYTE)v14)
  {
    if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
      int v30 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
    }
    else {
      int v30 = *(_DWORD *)(v11 + 8);
    }
    if (v30 == 13) {
      goto LABEL_48;
    }
LABEL_45:
    uint64_t v32 = *(void *)(a3 + 16);
    int v33 = sub_1CD7EBF14(v32, 0, (const llvm::APInt *)&v153, (llvm *)5, 0, 0, 0);
    __int16 v36 = 0;
    uint64_t v37 = *(void *)(v32 + 832);
    if (v37) {
      __int16 v36 = *(_WORD *)(v37 + 8);
    }
    int v38 = sub_1CCFDED5C(v32, 212, (const llvm::APInt *)&v153, v14, v11, v129, v13, v35, (uint64_t)v33, v34, v36);
    goto LABEL_52;
  }
  if (v14 - 120 >= 0x20
    && v14 - 2 >= 6
    && v14 - 15 >= 0x3C)
  {
    goto LABEL_45;
  }
LABEL_48:
  unsigned int v40 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v41 = *((void *)v40 + 104);
  if (v41) {
    __int16 v42 = *(_WORD *)(v41 + 8);
  }
  else {
    __int16 v42 = 0;
  }
  int v38 = sub_1CD7F3564(v40, (const char *)0xC9, (uint64_t)&v153, v14, v11, v129, (void *)v13, v42);
LABEL_52:
  uint64_t v129 = (uint64_t)v38;
  unint64_t v13 = v13 & 0xFFFFFFFF00000000 | v39;
LABEL_53:
  int v43 = 3;
  char v44 = 9;
  int v127 = v12;
  unint64_t v124 = v13;
  if (v151 == 3)
  {
    if (*(unsigned char *)(v147 + 326)) {
      char v44 = 12;
    }
    else {
      char v44 = 9;
    }
    if (*(unsigned char *)(v147 + 326)) {
      int v43 = 127;
    }
    else {
      int v43 = 3;
    }
  }
  unsigned int v45 = 0;
  unsigned int v117 = (v149 >> v44) & v43;
  char v46 = *(unsigned char *)(*(void *)v15 + 326);
  unsigned int v133 = 0;
  int v134 = 0;
  char v135 = 0;
  uint64_t v136 = 0;
  char v137 = 0;
  uint64_t v141 = 0;
  int v142 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  LODWORD(v140) = 0;
  uint64_t v128 = a3;
  uint64_t v143 = a3;
  char v144 = v46;
  char v145 = 0;
  int v146 = 0;
  do
  {
    char v47 = 2;
    uint64_t v48 = 1024;
    do
    {
      if (v151 == 3)
      {
        unint64_t v49 = v149;
        if (*(unsigned char *)(v147 + 326))
        {
          unint64_t v50 = v149 & 0xFFFFFFFFFFF80FFFLL;
          uint64_t v51 = (4096 << v47);
          goto LABEL_67;
        }
      }
      else
      {
        unint64_t v49 = v149;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFF9FFLL;
      uint64_t v51 = v48 & 0xFFFFFE00;
LABEL_67:
      unint64_t v149 = v50 | v51;
      int v52 = (v50 | v51) & 0xF;
      unsigned int v53 = (v149 >> 12) & 0x7F;
      unsigned int v54 = (v149 >> 9) & 3;
      int v55 = v53 == 2;
      if (v53 == 4) {
        int v55 = 2;
      }
      if (v53) {
        unsigned int v54 = v55;
      }
      if (v52 == 2)
      {
        unsigned int v56 = v54 + 2;
      }
      else
      {
        int v58 = 1 << v52;
        if ((v58 & 0xC2) != 0)
        {
          unsigned int v56 = v54 + 1;
        }
        else if ((v58 & 0x431) != 0)
        {
          unsigned int v56 = v54;
        }
        else
        {
          unsigned int v56 = 2;
        }
      }
      long long v155 = *(_OWORD *)(a2 + 1);
      char v57 = sub_1CD40F52C((uint64_t)v132, (uint64_t *)&v155, v56, v29, 6, 0, 5, 0, 6, 0, v45, a4);
      if (!v48) {
        break;
      }
      v48 -= 512;
      --v47;
    }
    while ((v57 & 1) == 0);
    if (v45++ > 1) {
      char v60 = 1;
    }
    else {
      char v60 = v57;
    }
  }
  while ((v60 & 1) == 0);
  if (v57)
  {
    *a4 = 0;
    uint64_t v61 = v128;
    uint64_t v62 = v121;
  }
  else
  {
    uint64_t v62 = v121;
    if (v151 == 3 && *(unsigned char *)(v147 + 326))
    {
      unint64_t v63 = v149 & 0xFFFFFFFFFFF80FFFLL;
      unsigned int v64 = 4096 << v117;
    }
    else
    {
      unint64_t v63 = v149 & 0xFFFFFFFFFFFFF9FFLL;
      unsigned int v64 = v117 << 9;
    }
    unint64_t v65 = v63 | v64;
    unint64_t v149 = v65;
    int v66 = v65 & 0xF;
    unsigned int v67 = (v65 >> 12) & 0x7F;
    uint64_t v61 = v128;
    if (v67)
    {
      if (v67 == 4) {
        unsigned int v68 = 2;
      }
      else {
        unsigned int v68 = v67 == 2;
      }
    }
    else
    {
      unsigned int v68 = (v65 >> 9) & 3;
    }
    if (v66 == 2)
    {
      v68 += 2;
    }
    else
    {
      int v112 = 1 << v66;
      if ((v112 & 0xC2) != 0)
      {
        ++v68;
      }
      else if ((v112 & 0x431) == 0)
      {
        unsigned int v68 = 2;
      }
    }
    long long v155 = *(_OWORD *)(a2 + 1);
    sub_1CD40F52C((uint64_t)v132, (uint64_t *)&v155, v68, v29, 6, 0, 5, 0, 6, 0, 0, 0);
  }
  v149 |= (unint64_t)v132[2] << 11;
  uint64_t v69 = sub_1CD7EBF14(*(void *)(v61 + 16), v149, (const llvm::APInt *)&v153, (llvm *)6, 0, 1, 0);
  uint64_t v71 = v70;
  unint64_t v72 = v139;
  unint64_t v73 = v140;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v62 + 288))(v62) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v62)(v62, 37, 0, 1, 2))
  {
    uint64_t v74 = *(void *)(v61 + 16);
    uint64_t v75 = sub_1CD7EBF14(v74, 0, (const llvm::APInt *)&v153, (llvm *)5, 0, 1, 0);
    int v77 = v76;
    uint64_t v78 = sub_1CD8015C0(*(void *)(v128 + 16), 26, (const llvm::APInt *)&v153, (llvm *)5, 0, (uint64_t)v72, v73);
    int v80 = v79;
    int v81 = sub_1CD7EBF14(*(void *)(v128 + 16), 0, (const llvm::APInt *)&v153, (llvm *)5, 0, 1, 0);
    int v116 = v80;
    uint64_t v61 = v128;
    uint64_t v84 = sub_1CD801380(v74, 495, (uint64_t)&v153, (llvm *)5, 0, (uint64_t)v75, v77, v83, (uint64_t)v78, v116, (uint64_t)v81, v82);
    unint64_t v72 = sub_1CD8016A0(*(void *)(v128 + 16), 26, (const llvm::APInt *)&v153, (llvm *)6, 0, (uint64_t)v72, v73, v85, (uint64_t)v84, 0);
    unint64_t v73 = v73 & 0xFFFFFFFF00000000 | v86;
  }
  *(void *)&long long v155 = v156;
  v156[0] = v69;
  v156[1] = v71;
  v156[2] = v120;
  v156[3] = v119;
  v156[4] = v129;
  v156[5] = v124;
  v156[6] = v72;
  v156[7] = v73;
  *((void *)&v155 + 1) = 0x800000004;
  int v88 = sub_1CD40CAC4((uint64_t)v132);
  if (DWORD2(v155) >= HIDWORD(v155)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v89 = (uint64_t **)(v155 + 16 * DWORD2(v155));
  *uint64_t v89 = v88;
  v89[1] = v87;
  unsigned int v90 = DWORD2(v155) + 1;
  DWORD2(v155) = v90;
  if (v90 >= HIDWORD(v155)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v91 = (uint64_t **)(v155 + 16 * v90);
  unsigned __int8 *v91 = v123;
  v91[1] = v122;
  unsigned int v92 = DWORD2(v155) + 1;
  DWORD2(v155) = v92;
  if (v92 >= HIDWORD(v155)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(v155 + 16 * v92) = v126;
  ++DWORD2(v155);
  unint64_t v130 = v153;
  if (v153) {
    llvm::MetadataTracking::track((uint64_t)&v130, v153, 2);
  }
  int v131 = v154;
  char v93 = sub_1CD40C064((const llvm::APInt *)&v130, *(uint64_t **)(v155 + 32), *(void *)(v155 + 40), (uint64_t)&v147, v61);
  uint64_t v94 = v155;
  *(void *)(v155 + 32) = v93;
  *(_DWORD *)(v94 + 40) = v95;
  if (v130)
  {
    int v96 = *v130;
    if ((v96 - 4) > 0x1E)
    {
      if ((v96 - 3) >= 0xFFFFFFFE) {
        __int16 v110 = v130;
      }
      else {
        __int16 v110 = 0;
      }
      if ((v96 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v111 = (unint64_t)(v110 + 8);
        goto LABEL_144;
      }
      if (v96 == 3) {
        *((void *)v130 + 1) = 0;
      }
    }
    else if ((v130[1] & 0x7F) == 2 || *((_DWORD *)v130 + 3))
    {
      uint64_t v115 = *((void *)v130 + 2);
      if ((v115 & 4) == 0)
      {
        uint64_t v61 = v128;
        goto LABEL_108;
      }
      unint64_t v111 = v115 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v61 = v128;
      if (v111)
      {
LABEL_144:
        v157[0] = &v130;
        sub_1CC5FA668(v111 + 16, v157);
        uint64_t v94 = v155;
      }
    }
  }
LABEL_108:
  int v97 = sub_1CB950FDC((uint64_t)&v147, v151, 1, v132[1]);
  uint64_t v98 = sub_1CD801044(*(void *)(v61 + 16), v97, (uint64_t)&v153, v125, 1, (uint64_t *)v94, DWORD2(v155));
  if (v127 == 65)
  {
    uint64_t v99 = (v149 >> 54);
    if ((v149 & 0x2000000000000000) != 0) {
      uint64_t v99 = 0;
    }
    if (v148 == 1) {
      __int16 v100 = 2;
    }
    else {
      __int16 v100 = 1;
    }
    unint64_t v101 = sub_1CBA9F684((v99 | ((v149 & 0x2000000000000000) >> 29)) ^ 0x100000000, v149 >> 4, v149 & 0xF, v100, v118);
  }
  else
  {
    unint64_t v101 = *(void *)(*a2 + 96);
  }
  char v102 = *(uint64_t **)(v61 + 16);
  v157[0] = v101;
  sub_1CD8005B8(v102, (uint64_t)v98, v157, 1);
  if ((void *)v155 != v156) {
    free((void *)v155);
  }
  if (v133)
  {
    int v103 = *v133;
    if ((v103 - 4) > 0x1E)
    {
      if ((v103 - 3) >= 0xFFFFFFFE) {
        uint64_t v106 = v133;
      }
      else {
        uint64_t v106 = 0;
      }
      if ((v103 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v107 = (unint64_t)(v106 + 8);
        goto LABEL_132;
      }
      if (v103 == 3) {
        *((void *)v133 + 1) = 0;
      }
    }
    else if ((v133[1] & 0x7F) == 2 || *((_DWORD *)v133 + 3))
    {
      uint64_t v113 = *((void *)v133 + 2);
      if ((v113 & 4) != 0)
      {
        unint64_t v107 = v113 & 0xFFFFFFFFFFFFFFF8;
        if (v107)
        {
LABEL_132:
          *(void *)&long long v155 = &v133;
          sub_1CC5FA668(v107 + 16, &v155);
        }
      }
    }
  }
  if (v153)
  {
    int v104 = *v153;
    if ((v104 - 4) > 0x1E)
    {
      if ((v104 - 3) >= 0xFFFFFFFE) {
        char v108 = v153;
      }
      else {
        char v108 = 0;
      }
      if ((v104 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v109 = (unint64_t)(v108 + 8);
        goto LABEL_138;
      }
      if (v104 == 3) {
        *((void *)v153 + 1) = 0;
      }
    }
    else if ((v153[1] & 0x7F) == 2 || *((_DWORD *)v153 + 3))
    {
      uint64_t v114 = *((void *)v153 + 2);
      if ((v114 & 4) != 0)
      {
        unint64_t v109 = v114 & 0xFFFFFFFFFFFFFFF8;
        if (v109)
        {
LABEL_138:
          *(void *)&long long v155 = &v153;
          sub_1CC5FA668(v109 + 16, &v155);
        }
      }
    }
  }
  return v98;
}

uint64_t *sub_1CB9FF234(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v181[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a2;
  int v12 = *(unsigned __int8 **)(*a2 + 64);
  int8x8_t v176 = v12;
  uint64_t v13 = v11;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v176, v12, 2);
    uint64_t v13 = *a2;
  }
  int v177 = *(_DWORD *)(v11 + 60);
  uint64_t v14 = *(unsigned __int8 ***)(v13 + 32);
  char v144 = *v14;
  char v145 = v14[1];
  int v16 = (uint64_t *)a2[3];
  unint64_t v15 = a2[4];
  uint64_t v17 = sub_1CB9FD5FC(a2[1], a2[2], *(llvm::APFloatBase **)(a3 + 16), a4, a5, a6, a7, a8);
  uint64_t v19 = v18;
  uint64_t v21 = *(llvm **)(*a2 + 80);
  uint64_t v20 = *(void *)(*a2 + 88);
  unsigned int v22 = (unsigned __int8 *)v17[8];
  unint64_t v174 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v174, v22, 2);
  }
  int v175 = *((_DWORD *)v17 + 15);
  int v23 = (uint64_t *)(a1 + 184296);
  int v143 = *(unsigned __int8 *)(*v23 + 405);
  if (*(unsigned char *)(*v23 + 405)) {
    uint64_t v24 = 5;
  }
  else {
    uint64_t v24 = 4;
  }
  uint64_t v147 = sub_1CD7FFC1C((llvm *)1, 0);
  sub_1CB9FB87C((uint64_t)v170, *(const char **)(*(void *)(a3 + 16) + 56), a2, *v23, v25);
  int v148 = v23;
  if (!*((unsigned char *)a2 + 88) || v173)
  {
    if (v173)
    {
      uint64_t v28 = v16[4];
      int v16 = *(uint64_t **)v28;
      unint64_t v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v28 + 8);
    }
    goto LABEL_27;
  }
  if (!(_BYTE)v21)
  {
    if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12) {
      int v27 = *(unsigned __int8 *)(**(void **)(v20 + 16) + 8);
    }
    else {
      int v27 = *(_DWORD *)(v20 + 8);
    }
    if (v27 == 13) {
      goto LABEL_23;
    }
LABEL_20:
    uint64_t v29 = *(void *)(a3 + 16);
    int v30 = sub_1CD7EBF14(v29, 0, (const llvm::APInt *)&v176, (llvm *)5, 0, 0, 0);
    __int16 v33 = 0;
    uint64_t v34 = *(void *)(v29 + 832);
    if (v34) {
      __int16 v33 = *(_WORD *)(v34 + 8);
    }
    int v16 = sub_1CCFDED5C(v29, 212, (const llvm::APInt *)&v176, v21, v20, (uint64_t)v16, v15, v32, (uint64_t)v30, v31, v33);
    unint64_t v15 = v15 & 0xFFFFFFFF00000000 | v35;
    int v23 = v148;
    goto LABEL_27;
  }
  if (v21 - 120 >= 0x20
    && v21 - 2 >= 6
    && v21 - 15 >= 0x3C)
  {
    goto LABEL_20;
  }
LABEL_23:
  __int16 v36 = *(llvm::APFloatBase **)(a3 + 16);
  uint64_t v37 = *((void *)v36 + 104);
  if (v37) {
    __int16 v38 = *(_WORD *)(v37 + 8);
  }
  else {
    __int16 v38 = 0;
  }
  int v16 = sub_1CD7F3564(v36, (const char *)0xC9, (uint64_t)&v176, v21, v20, (uint64_t)v16, (void *)v15, v38);
  unint64_t v15 = v15 & 0xFFFFFFFF00000000 | v39;
LABEL_27:
  int v40 = 3;
  char v41 = 9;
  int v146 = v16;
  if (v172 == 3)
  {
    if (*(unsigned char *)(v170[0] + 326)) {
      char v41 = 12;
    }
    else {
      char v41 = 9;
    }
    if (*(unsigned char *)(v170[0] + 326)) {
      int v40 = 127;
    }
    else {
      int v40 = 3;
    }
  }
  unsigned int v42 = 0;
  unsigned int v142 = (v171 >> v41) & v40;
  uint64_t v43 = *v23;
  if (*(unsigned char *)(*v23 + 407)) {
    int v44 = 2 * *(unsigned __int8 *)(*v23 + 406);
  }
  else {
    int v44 = (2 * *(unsigned __int8 *)(*v23 + 406)) | 0x10000;
  }
  char v45 = *(unsigned char *)(v43 + 326);
  char v46 = *(unsigned char *)(v43 + 405);
  __int32 v156 = 0;
  int v157 = 0;
  char v158 = 0;
  uint64_t v159 = 0;
  char v160 = 0;
  uint64_t v164 = 0;
  int v165 = 0;
  uint64_t v161 = 0;
  unint64_t v162 = 0;
  LODWORD(v163) = 0;
  uint64_t v166 = a3;
  char v167 = v45;
  char v168 = v46;
  int v169 = v44;
  do
  {
    char v47 = 2;
    uint64_t v48 = 1024;
    do
    {
      if (v172 == 3)
      {
        uint64_t v49 = v171;
        if (*(unsigned char *)(v170[0] + 326))
        {
          unint64_t v50 = v171 & 0xFFFFFFFFFFF80FFFLL;
          uint64_t v51 = (4096 << v47);
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v49 = v171;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFF9FFLL;
      uint64_t v51 = v48 & 0xFFFFFE00;
LABEL_44:
      uint64_t v171 = v50 | v51;
      int v52 = (v50 | v51) & 0xF;
      unsigned int v53 = (v171 >> 12) & 0x7F;
      unsigned int v54 = (v171 >> 9) & 3;
      int v55 = v53 == 2;
      if (v53 == 4) {
        int v55 = 2;
      }
      if (v53) {
        unsigned int v54 = v55;
      }
      if (v52 == 2)
      {
        unsigned int v56 = v54 + 2;
      }
      else
      {
        int v58 = 1 << v52;
        if ((v58 & 0xC2) != 0)
        {
          unsigned int v56 = v54 + 1;
        }
        else if ((v58 & 0x431) != 0)
        {
          unsigned int v56 = v54;
        }
        else
        {
          unsigned int v56 = 2;
        }
      }
      unint64_t v178 = (unsigned __int8 **)v17;
      uint64_t v179 = v19;
      char v57 = sub_1CD40F52C((uint64_t)&v153, (uint64_t *)&v178, v56, v26, v24, 0, 4, 0, 4, 0, v42, 0);
      if (!v48) {
        break;
      }
      v48 -= 512;
      --v47;
    }
    while ((v57 & 1) == 0);
    if (v42++ > 1) {
      char v60 = 1;
    }
    else {
      char v60 = v57;
    }
  }
  while ((v60 & 1) == 0);
  if ((v57 & 1) == 0)
  {
    if (v172 == 3 && *(unsigned char *)(v170[0] + 326))
    {
      unint64_t v61 = v171 & 0xFFFFFFFFFFF80FFFLL;
      unsigned int v62 = 4096 << v142;
    }
    else
    {
      unint64_t v61 = v171 & 0xFFFFFFFFFFFFF9FFLL;
      unsigned int v62 = v142 << 9;
    }
    uint64_t v63 = v61 | v62;
    uint64_t v171 = v63;
    int v64 = v63 & 0xF;
    unsigned int v65 = (v63 >> 12) & 0x7F;
    if (v65)
    {
      if (v65 == 4) {
        unsigned int v66 = 2;
      }
      else {
        unsigned int v66 = v65 == 2;
      }
    }
    else
    {
      unsigned int v66 = (v63 >> 9) & 3;
    }
    if (v64 == 2)
    {
      v66 += 2;
    }
    else
    {
      int v90 = 1 << v64;
      if ((v90 & 0xC2) != 0)
      {
        ++v66;
      }
      else if ((v90 & 0x431) == 0)
      {
        unsigned int v66 = 2;
      }
    }
    unint64_t v178 = (unsigned __int8 **)v17;
    uint64_t v179 = v19;
    sub_1CD40F52C((uint64_t)&v153, (uint64_t *)&v178, v66, v26, v24, 0, 4, 0, 4, 0, 0, 0);
  }
  v171 |= (unint64_t)v155 << 11;
  unsigned int v67 = sub_1CD7EBF14(*(void *)(a3 + 16), v171, (const llvm::APInt *)&v176, (llvm *)6, 0, 1, 0);
  uint64_t v69 = v67;
  uint64_t v70 = v68;
  unint64_t v178 = (unsigned __int8 **)v180;
  uint64_t v179 = 0x800000000;
  if (*(unsigned char *)(*v148 + 326))
  {
    uint64_t v75 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v176, (llvm *)5, 0, 1, 0);
    if (v179 >= HIDWORD(v179)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v76 = (uint64_t **)&v178[2 * v179];
    *int v76 = v75;
    v76[1] = v74;
    unsigned int v77 = v179 + 1;
    LODWORD(v179) = v77;
    if (v77 >= HIDWORD(v179)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v78 = &v178[2 * v77];
    *uint64_t v78 = (unsigned __int8 *)v69;
    v78[1] = v70;
    unsigned int v79 = v179 + 1;
    LODWORD(v179) = v79;
    if (v79 >= HIDWORD(v179)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v80 = (uint64_t **)&v178[2 * v79];
    *int v80 = v146;
    v80[1] = (uint64_t *)v15;
    unsigned int v81 = v179 + 1;
    LODWORD(v179) = v179 + 1;
    if (!v153)
    {
      uint64_t v83 = v162;
      unint64_t v82 = (unint64_t)v163;
      if (v143)
      {
        uint64_t v84 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v85 = *((void *)v84 + 104);
        if (v85) {
          __int16 v86 = *(_WORD *)(v85 + 8);
        }
        else {
          __int16 v86 = 0;
        }
        uint64_t v83 = sub_1CD7F3564(v84, (const char *)0xC9, (uint64_t)&v176, (llvm *)4, 0, (uint64_t)v162, v163, v86);
        unint64_t v82 = v82 & 0xFFFFFFFF00000000 | v91;
        unsigned int v81 = v179;
      }
      if (v81 >= HIDWORD(v179)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v92 = (uint64_t **)&v178[2 * v81];
      void *v92 = v83;
      v92[1] = (uint64_t *)v82;
      LODWORD(v179) = v179 + 1;
      uint64_t v94 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v176, (llvm *)5, 0, 1, 0);
      if (v179 >= HIDWORD(v179)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v95 = (uint64_t **)&v178[2 * v179];
      *int v95 = v94;
      v95[1] = v93;
      LODWORD(v179) = v179 + 1;
    }
    int v97 = sub_1CD40CAC4((uint64_t)&v153);
    if (v179 >= HIDWORD(v179)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v98 = (uint64_t **)&v178[2 * v179];
    *uint64_t v98 = v97;
    v98[1] = v96;
    unsigned int v99 = v179 + 1;
    LODWORD(v179) = v179 + 1;
    if (!v154)
    {
      unint64_t v101 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v176, (llvm *)5, 0, 1, 0);
      if (v179 >= HIDWORD(v179)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v102 = (uint64_t **)&v178[2 * v179];
      *char v102 = v101;
      v102[1] = v100;
      unsigned int v99 = v179 + 1;
      LODWORD(v179) = v179 + 1;
    }
    if (v99 >= HIDWORD(v179)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v103 = v147;
    int v104 = &v178[2 * v99];
    *int v104 = v144;
    v104[1] = v145;
    LODWORD(v179) = v179 + 1;
    int v151 = v176;
    if (v176) {
      llvm::MetadataTracking::track((uint64_t)&v151, v176, 2);
    }
    int v152 = v177;
    uint64_t v105 = sub_1CD40C064((const llvm::APInt *)&v151, v146, v15, (uint64_t)v170, a3);
    uint64_t v106 = v178;
    v178[4] = (unsigned __int8 *)v105;
    *((_DWORD *)v106 + 10) = v107;
    char v108 = v151;
    if (!v151) {
      goto LABEL_135;
    }
    int v109 = *v151;
    if ((v109 - 4) > 0x1E)
    {
      if ((v109 - 3) >= 0xFFFFFFFE) {
        int v112 = v151;
      }
      else {
        int v112 = 0;
      }
      if ((v109 - 3) < 0xFFFFFFFE)
      {
LABEL_133:
        if (v109 == 3) {
          *((void *)v108 + 1) = 0;
        }
        goto LABEL_135;
      }
      unint64_t v111 = (unint64_t)(v112 + 8);
    }
    else
    {
      if ((v151[1] & 0x7F) != 2 && !*((_DWORD *)v151 + 3)) {
        goto LABEL_135;
      }
      uint64_t v110 = *((void *)v151 + 2);
      if ((v110 & 4) == 0) {
        goto LABEL_135;
      }
      unint64_t v111 = v110 & 0xFFFFFFFFFFFFFFF8;
      if (!v111) {
        goto LABEL_135;
      }
    }
    uint64_t v113 = &v151;
    goto LABEL_132;
  }
  v180[0] = v67;
  v180[1] = v68;
  v180[2] = v146;
  v180[3] = v15;
  LODWORD(v179) = 2;
  if (!v153)
  {
    unint64_t v72 = v162;
    unint64_t v71 = (unint64_t)v163;
    if (v143)
    {
      unint64_t v87 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v88 = *((void *)v87 + 104);
      if (v88) {
        __int16 v89 = *(_WORD *)(v88 + 8);
      }
      else {
        __int16 v89 = 0;
      }
      unint64_t v72 = sub_1CD7F3564(v87, (const char *)0xC9, (uint64_t)&v176, (llvm *)4, 0, (uint64_t)v162, v163, v89);
      unint64_t v71 = v71 & 0xFFFFFFFF00000000 | v114;
      unsigned int v73 = v179;
      if (v179 >= HIDWORD(v179)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    else
    {
      unsigned int v73 = 2;
    }
    uint64_t v115 = (uint64_t **)&v178[2 * v73];
    *uint64_t v115 = v72;
    v115[1] = (uint64_t *)v71;
    LODWORD(v179) = v179 + 1;
  }
  unsigned int v117 = sub_1CD40CAC4((uint64_t)&v153);
  if (v179 >= HIDWORD(v179)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v118 = (uint64_t **)&v178[2 * v179];
  *uint64_t v118 = v117;
  v118[1] = v116;
  unsigned int v119 = v179 + 1;
  LODWORD(v179) = v119;
  if (v119 >= HIDWORD(v179)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v120 = &v178[2 * v119];
  *uint64_t v120 = v144;
  v120[1] = v145;
  LODWORD(v179) = v179 + 1;
  unint64_t v149 = v176;
  uint64_t v103 = v147;
  if (v176) {
    llvm::MetadataTracking::track((uint64_t)&v149, v176, 2);
  }
  int v150 = v177;
  uint64_t v121 = sub_1CD40C064((const llvm::APInt *)&v149, v146, v15, (uint64_t)v170, a3);
  unint64_t v122 = v178;
  v178[2] = (unsigned __int8 *)v121;
  *((_DWORD *)v122 + 6) = v123;
  char v108 = v149;
  if (!v149) {
    goto LABEL_135;
  }
  int v109 = *v149;
  if ((v109 - 4) > 0x1E)
  {
    if ((v109 - 3) >= 0xFFFFFFFE) {
      uint64_t v125 = v149;
    }
    else {
      uint64_t v125 = 0;
    }
    if ((v109 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v111 = (unint64_t)(v125 + 8);
      goto LABEL_131;
    }
    goto LABEL_133;
  }
  if ((v149[1] & 0x7F) == 2 || *((_DWORD *)v149 + 3))
  {
    uint64_t v124 = *((void *)v149 + 2);
    if ((v124 & 4) != 0)
    {
      unint64_t v111 = v124 & 0xFFFFFFFFFFFFFFF8;
      if (v111)
      {
LABEL_131:
        uint64_t v113 = &v149;
LABEL_132:
        v181[0] = v113;
        sub_1CC5FA668(v111 + 16, v181);
      }
    }
  }
LABEL_135:
  int v126 = sub_1CB950FDC((uint64_t)v170, v172, v153 == 0, v154);
  int v127 = sub_1CD801044(*(void *)(a3 + 16), v126, (uint64_t)&v176, v103, 1, (uint64_t *)v178, v179);
  uint64_t v128 = *(uint64_t **)(a3 + 16);
  v181[0] = *(void *)(*a2 + 96);
  sub_1CD8005B8(v128, (uint64_t)v127, v181, 1);
  if (v178 != v180) {
    free(v178);
  }
  if (v156)
  {
    int v129 = *v156;
    if ((v129 - 4) > 0x1E)
    {
      if ((v129 - 3) >= 0xFFFFFFFE) {
        unsigned int v133 = v156;
      }
      else {
        unsigned int v133 = 0;
      }
      if ((v129 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v134 = (unint64_t)(v133 + 8);
        goto LABEL_155;
      }
      if (v129 == 3) {
        *((void *)v156 + 1) = 0;
      }
    }
    else if ((v156[1] & 0x7F) == 2 || *((_DWORD *)v156 + 3))
    {
      uint64_t v139 = *((void *)v156 + 2);
      if ((v139 & 4) != 0)
      {
        unint64_t v134 = v139 & 0xFFFFFFFFFFFFFFF8;
        if (v134)
        {
LABEL_155:
          unint64_t v178 = &v156;
          sub_1CC5FA668(v134 + 16, &v178);
        }
      }
    }
  }
  if (v174)
  {
    int v130 = *v174;
    if ((v130 - 4) > 0x1E)
    {
      if ((v130 - 3) >= 0xFFFFFFFE) {
        char v135 = v174;
      }
      else {
        char v135 = 0;
      }
      if ((v130 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v136 = (unint64_t)(v135 + 8);
        goto LABEL_161;
      }
      if (v130 == 3) {
        *((void *)v174 + 1) = 0;
      }
    }
    else if ((v174[1] & 0x7F) == 2 || *((_DWORD *)v174 + 3))
    {
      uint64_t v140 = *((void *)v174 + 2);
      if ((v140 & 4) != 0)
      {
        unint64_t v136 = v140 & 0xFFFFFFFFFFFFFFF8;
        if (v136)
        {
LABEL_161:
          unint64_t v178 = &v174;
          sub_1CC5FA668(v136 + 16, &v178);
        }
      }
    }
  }
  if (v176)
  {
    int v131 = *v176;
    if ((v131 - 4) > 0x1E)
    {
      if ((v131 - 3) >= 0xFFFFFFFE) {
        char v137 = v176;
      }
      else {
        char v137 = 0;
      }
      if ((v131 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v138 = (unint64_t)(v137 + 8);
        goto LABEL_167;
      }
      if (v131 == 3) {
        *((void *)v176 + 1) = 0;
      }
    }
    else if ((v176[1] & 0x7F) == 2 || *((_DWORD *)v176 + 3))
    {
      uint64_t v141 = *((void *)v176 + 2);
      if ((v141 & 4) != 0)
      {
        unint64_t v138 = v141 & 0xFFFFFFFFFFFFFFF8;
        if (v138)
        {
LABEL_167:
          unint64_t v178 = &v176;
          sub_1CC5FA668(v138 + 16, &v178);
        }
      }
    }
  }
  return v127;
}

uint64_t sub_1CB9FFF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v262[17] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v7 = *(long long **)(a2 + 32);
  if (v6 == 291) {
    uint64_t v8 = (uint64_t *)(*(void *)(*((void *)v7 + 10) + 40) + 16 * *((unsigned int *)v7 + 22));
  }
  else {
    uint64_t v8 = *(uint64_t **)(a2 + 40);
  }
  uint64_t v9 = *v8;
  long long v259 = *v7;
  uint64_t v11 = (uint64_t *)*((void *)v7 + 5);
  unint64_t v10 = *((void *)v7 + 6);
  int v12 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v257 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v257, v12, 2);
  }
  int v258 = *(_DWORD *)(a2 + 60);
  if (v6 == 291) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = a2;
  }
  if (v9 != 6)
  {
    if (v9 == 5)
    {
      int v14 = 0;
      uint64_t v15 = *(void *)(a1 + 184296);
      uint64_t v16 = v6;
      goto LABEL_14;
    }
LABEL_431:
    llvm::report_fatal_error((llvm *)"Atomic operations only support i32", (const llvm::Twine *)1);
  }
  uint64_t v15 = *(void *)(a1 + 184296);
  if (!*(unsigned char *)(v15 + 382)) {
    goto LABEL_431;
  }
  uint64_t v16 = 293;
  int v14 = 1;
LABEL_14:
  int v198 = *(unsigned __int8 *)(v15 + 326);
  uint64_t v17 = *(void *)(a2 + 96);
  int v18 = *(_DWORD *)(v17 + 16);
  int v252 = &unk_1F25EF9F8;
  uint64_t v253 = 0x2FFFFFFFFLL;
  uint64_t v255 = 0;
  int v256 = 0;
  unint64_t v19 = *(unsigned __int16 *)(v17 + 36);
  uint64_t v20 = (v19 >> 8) & 0xF;
  unint64_t v21 = v19 >> 12;
  if (v21 == 5 && v20 == 4 || v21 == 4 && v20 == 5)
  {
    int v22 = 6;
  }
  else if (byte_1CDAF3AB8[8 * v20 + v21])
  {
    int v22 = v20;
  }
  else
  {
    int v22 = v21;
  }
  sub_1CB950D24((uint64_t)&v252, v16, v18, v22, v15);
  if ((_BYTE)v255) {
    long long v251 = 0uLL;
  }
  else {
    long long v251 = *(_OWORD *)(*(void *)(a2 + 32) + 80);
  }
  unint64_t v200 = (uint64_t *)(a1 + 184296);
  if (HIDWORD(v253) == 3) {
    uint64_t v23 = a2;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23) {
    char v24 = v14;
  }
  else {
    char v24 = 1;
  }
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = *(void *)(v23 + 48);
    if (v25)
    {
      while (*(_DWORD *)(v25 + 8) != (HIDWORD(v253) == 3))
      {
        uint64_t v25 = *(void *)(v25 + 32);
        if (!v25) {
          goto LABEL_35;
        }
      }
      char v196 = 1;
      if (v14) {
        goto LABEL_44;
      }
      goto LABEL_46;
    }
  }
LABEL_35:
  if (v14)
  {
    char v196 = 0;
    goto LABEL_44;
  }
  if (v13)
  {
    uint64_t v26 = *(void *)(v13 + 48);
    if (v26)
    {
      while (*(_DWORD *)(v26 + 8))
      {
        uint64_t v26 = *(void *)(v26 + 32);
        if (!v26) {
          goto LABEL_41;
        }
      }
      char v196 = 0;
      goto LABEL_46;
    }
  }
LABEL_41:
  char v196 = 0;
  if (!(_BYTE)v255)
  {
LABEL_44:
    int v27 = v14;
    uint64_t v195 = 1;
    uint64_t v194 = sub_1CD7FFC1C((llvm *)1, 0);
    unsigned int v199 = 0;
    goto LABEL_47;
  }
LABEL_46:
  int v27 = v14;
  unsigned int v199 = 1;
  uint64_t v194 = sub_1CD7F95FC(*(void *)(a3 + 16), 5, 0, 1, 0);
  uint64_t v195 = v33;
LABEL_47:
  uint64_t v34 = *(llvm::APFloatBase **)(a3 + 16);
  unsigned int v35 = (uint64_t *)*((void *)v34 + 5);
  uint64_t v36 = *v35;
  uint64_t v192 = v35[43];
  char v37 = BYTE3(v255);
  if (BYTE3(v255))
  {
    uint64_t v11 = sub_1CB9FD5FC((uint64_t)v11, v10, v34, v28, v29, v30, v31, v32);
    unint64_t v10 = v10 & 0xFFFFFFFF00000000 | v39;
    char v37 = *(unsigned char *)(*v200 + 405) != 0;
    if (*(unsigned char *)(*v200 + 407)) {
      int v38 = 2 * *(unsigned __int8 *)(*v200 + 406);
    }
    else {
      int v38 = (2 * *(unsigned __int8 *)(*v200 + 406)) | 0x10000;
    }
    unsigned int v250 = 0;
    if (BYTE3(v255))
    {
      uint64_t v40 = 4;
      goto LABEL_55;
    }
  }
  else
  {
    int v38 = 0;
    unsigned int v250 = 0;
  }
  uint64_t v40 = 6;
LABEL_55:
  int v41 = 0;
  char v248 = v37;
  uint64_t v237 = 0;
  int v238 = 0;
  char v239 = 0;
  uint64_t v240 = 0;
  char v241 = 0;
  uint64_t v244 = 0;
  int v245 = 0;
  uint64_t v242 = 0;
  *(void *)&long long v243 = 0;
  DWORD2(v243) = 0;
  uint64_t v246 = a3;
  int v249 = v38;
  char v247 = v198;
  do
  {
    if (BYTE3(v255)) {
      uint64_t v42 = 4;
    }
    else {
      uint64_t v42 = 5;
    }
    *(void *)&long long v261 = v11;
    *((void *)&v261 + 1) = v10;
    if (sub_1CD40F52C((uint64_t)v235, (uint64_t *)&v261, 2, v28, v40, 0, v42, 0, v40, 0, v41, 0)) {
      break;
    }
  }
  while (v41++ != 2);
  int v44 = BYTE3(v255);
  if (BYTE3(v255)) {
    int v44 = v235[0];
  }
  else {
    v235[0] = 0;
  }
  int v193 = sub_1CB950EFC((uint64_t)&v252, v199, v44 == 0, v235[1]);
  if (BYTE2(v255)) {
    char v45 = v27;
  }
  else {
    char v45 = 1;
  }
  if (v45)
  {
    uint64_t v190 = 0;
    uint64_t v191 = 0;
    goto LABEL_79;
  }
  uint64_t v190 = DWORD2(v251);
  uint64_t v191 = v251;
  uint64_t v46 = *(void *)(a3 + 16);
  int v233 = v257;
  if (v257) {
    llvm::MetadataTracking::track((uint64_t)&v233, v257, 2);
  }
  int v234 = v258;
  unsigned int v47 = sub_1CD3FB644(49, 0);
  uint64_t v48 = (_OWORD *)(*(void *)(a2 + 32) + 120);
  *(void *)&long long v261 = v262;
  *((void *)&v261 + 1) = 0x500000000;
  *(void *)&long long v260 = v47;
  BYTE8(v260) = 6;
  sub_1CD3D5EA0(v46, (uint64_t)&v261, (uint64_t)&v260);
  sub_1CD3D5F48(v46, (uint64_t)&v261, v48);
  *(void *)&long long v260 = 25;
  BYTE8(v260) = 6;
  sub_1CD3D5EA0(v46, (uint64_t)&v261, (uint64_t)&v260);
  if (DWORD2(v261) >= HIDWORD(v261)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v49 = (uint64_t *)(v261 + 16 * DWORD2(v261));
  uint64_t *v49 = v191;
  v49[1] = v190;
  ++DWORD2(v261);
  *(void *)&long long v260 = 26;
  BYTE8(v260) = 6;
  sub_1CD3D5EA0(v46, (uint64_t)&v261, (uint64_t)&v260);
  unint64_t v50 = sub_1CD801450(v46, 18, (uint64_t)&v233, (llvm *)0x31, 0, (uint64_t *)v261, DWORD2(v261));
  if ((void *)v261 != v262) {
    free((void *)v261);
  }
  *(void *)&long long v251 = v50;
  DWORD2(v251) = 0;
  if (v233)
  {
    int v51 = *v233;
    if ((v51 - 4) > 0x1E)
    {
      if ((v51 - 3) >= 0xFFFFFFFE) {
        __int16 v86 = v233;
      }
      else {
        __int16 v86 = 0;
      }
      if ((v51 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v87 = (unint64_t)(v86 + 8);
LABEL_177:
        *(void *)&long long v261 = &v233;
        sub_1CC5FA668(v87 + 16, &v261);
        goto LABEL_79;
      }
      if (v51 == 3) {
        *((void *)v233 + 1) = 0;
      }
    }
    else if ((v233[1] & 0x7F) == 2 || *((_DWORD *)v233 + 3))
    {
      uint64_t v184 = *((void *)v233 + 2);
      if ((v184 & 4) != 0)
      {
        unint64_t v87 = v184 & 0xFFFFFFFFFFFFFFF8;
        if (v87) {
          goto LABEL_177;
        }
      }
    }
  }
LABEL_79:
  int v52 = (unsigned char *)*v200;
  if (*(unsigned char *)(*v200 + 318))
  {
    uint64_t v53 = 4;
  }
  else if (v52[319])
  {
    uint64_t v53 = 5;
  }
  else if (v52[320])
  {
    uint64_t v53 = 6;
  }
  else if (v52[321])
  {
    uint64_t v53 = 7;
  }
  else
  {
    uint64_t v53 = 9;
  }
  if (v52[362]) {
    unsigned int v54 = 3;
  }
  else {
    unsigned int v54 = 1;
  }
  LODWORD(v261) = 0;
  if (sub_1CBA864D8((int)v52, v36, "AtomicCacheCtl", (int *)&v261)) {
    unsigned int v54 = v261;
  }
  int v55 = (unsigned char *)*v200;
  if (*(unsigned char *)(*v200 + 364))
  {
    unsigned int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v192 + 648))(v192);
    int v55 = (unsigned char *)*v200;
  }
  else
  {
    unsigned int v56 = 1;
  }
  if (v53 != 5) {
    unsigned int v56 = 0;
  }
  if (v55[372]) {
    unsigned int v56 = 3;
  }
  if (v54 >= v56) {
    unsigned int v57 = v56;
  }
  else {
    unsigned int v57 = v54;
  }
  if (v55[371])
  {
    unsigned int v58 = 0;
LABEL_111:
    unsigned int v60 = 0;
    goto LABEL_112;
  }
  LODWORD(v261) = 0;
  if (sub_1CBA864D8((int)v55, v36, "MemoryReadCacheCtl", (int *)&v261)) {
    unsigned int v58 = v261;
  }
  else {
    unsigned int v58 = v57;
  }
  int v55 = (unsigned char *)*v200;
  if (*(unsigned char *)(*v200 + 371)) {
    goto LABEL_111;
  }
  LODWORD(v261) = 0;
  int v59 = sub_1CBA864D8((int)v55, v36, "MemoryWriteCacheCtl", (int *)&v261);
  unsigned int v60 = v261;
  if (!v59) {
    unsigned int v60 = v57;
  }
  int v55 = (unsigned char *)*v200;
LABEL_112:
  if (v60 >= v58) {
    unsigned int v60 = v58;
  }
  int v197 = v60;
  if (v27)
  {
    if (v55[383]) {
      int v61 = 1;
    }
    else {
      int v61 = 3;
    }
    int v62 = v61 | (4 * (v6 != 304));
    int v232 = v62;
    int v63 = v27;
    int v64 = v200;
    goto LABEL_125;
  }
  LODWORD(v261) = 0;
  int v65 = sub_1CBA864D8((int)v55, v36, "AtomicL2Pers", (int *)&v261);
  int v66 = 4 * v261;
  if (!v65) {
    int v66 = 4;
  }
  if (v54 == 3) {
    int v66 = 4;
  }
  int v62 = v66 | v54;
  int v232 = v66 | v54;
  int v64 = v200;
  if (!*(unsigned char *)(*v200 + 384))
  {
    int v63 = v27;
LABEL_125:
    int v67 = v197;
    goto LABEL_126;
  }
  int v63 = v27;
  if (v253 != 1) {
    goto LABEL_125;
  }
  int v67 = v197;
  if (v54 == 3)
  {
    uint64_t v80 = *(void *)(a3 + 16);
    uint64_t v230 = v257;
    uint64_t v81 = v80;
    if (v257)
    {
      llvm::MetadataTracking::track((uint64_t)&v230, v257, 2);
      uint64_t v81 = *(void *)(a3 + 16);
    }
    int v231 = v258;
    *(void *)&long long v261 = sub_1CD7EBF14(v81, 0, (const llvm::APInt *)&v257, (llvm *)5, 0, 1, 0);
    *((void *)&v261 + 1) = v82;
    *(void *)&long long v260 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v257, (llvm *)5, 0, 1, 0);
    *((void *)&v260 + 1) = v83;
    *(void *)&long long v229 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v257, (llvm *)5, 0, 1, 0);
    *((void *)&v229 + 1) = v84;
    *(void *)&long long v251 = sub_1CD3D650C(v80, 3796, (uint64_t)&v230, 5u, &v261, &v260, &v251, &v229);
    DWORD2(v251) = 0;
    if (!v230) {
      goto LABEL_171;
    }
    int v85 = *v230;
    if ((v85 - 4) > 0x1E)
    {
      if ((v85 - 3) >= 0xFFFFFFFE) {
        unsigned int v142 = v230;
      }
      else {
        unsigned int v142 = 0;
      }
      if ((v85 - 3) < 0xFFFFFFFE)
      {
        if (v85 == 3) {
          *((void *)v230 + 1) = 0;
        }
        goto LABEL_171;
      }
      unint64_t v143 = (unint64_t)(v142 + 8);
    }
    else
    {
      if ((v230[1] & 0x7F) != 2 && !*((_DWORD *)v230 + 3)) {
        goto LABEL_171;
      }
      uint64_t v187 = *((void *)v230 + 2);
      if ((v187 & 4) == 0) {
        goto LABEL_171;
      }
      unint64_t v143 = v187 & 0xFFFFFFFFFFFFFFF8;
      if (!v143) {
        goto LABEL_171;
      }
    }
    *(void *)&long long v261 = &v230;
    sub_1CC5FA668(v143 + 16, &v261);
LABEL_171:
    LODWORD(v253) = 0;
  }
LABEL_126:
  if (v254 > 0xC) {
    goto LABEL_199;
  }
  if (((1 << v254) & 0x404) != 0)
  {
    uint64_t v78 = *(void *)(a3 + 16);
    uint64_t v227 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v227, v257, 2);
    }
    int v228 = v258;
    sub_1CD405E28(v78, (uint64_t)&v227, 1, 3u, 1, 2, v67, 1, 1, 1, &v259, *v64);
    uint64_t v69 = v227;
    if (!v227) {
      goto LABEL_199;
    }
    int v70 = *v227;
    if ((v70 - 4) > 0x1E)
    {
      if ((v70 - 3) >= 0xFFFFFFFE) {
        unsigned int v92 = v227;
      }
      else {
        unsigned int v92 = 0;
      }
      if ((v70 - 3) < 0xFFFFFFFE)
      {
LABEL_197:
        if (v70 == 3) {
          *((void *)v69 + 1) = 0;
        }
        goto LABEL_199;
      }
      unint64_t v72 = (unint64_t)(v92 + 8);
    }
    else
    {
      if ((v227[1] & 0x7F) != 2 && !*((_DWORD *)v227 + 3)) {
        goto LABEL_199;
      }
      uint64_t v79 = *((void *)v227 + 2);
      if ((v79 & 4) == 0) {
        goto LABEL_199;
      }
      unint64_t v72 = v79 & 0xFFFFFFFFFFFFFFF8;
      if (!v72) {
        goto LABEL_199;
      }
    }
    unsigned int v91 = &v227;
    goto LABEL_196;
  }
  if (((1 << v254) & 0x808) != 0)
  {
    uint64_t v73 = *(void *)(a3 + 16);
    uint64_t v225 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v225, v257, 2);
    }
    int v226 = v258;
    sub_1CD405E28(v73, (uint64_t)&v225, 1, 3u, 2, 2, v67, 1, 1, 1, &v259, *v64);
    if (v225)
    {
      int v74 = *v225;
      if ((v74 - 4) > 0x1E)
      {
        if ((v74 - 3) >= 0xFFFFFFFE) {
          uint64_t v88 = v225;
        }
        else {
          uint64_t v88 = 0;
        }
        if ((v74 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v89 = (unint64_t)(v88 + 8);
LABEL_183:
          *(void *)&long long v261 = &v225;
          sub_1CC5FA668(v89 + 16, &v261);
          goto LABEL_145;
        }
        if (v74 == 3) {
          *((void *)v225 + 1) = 0;
        }
      }
      else if ((v225[1] & 0x7F) == 2 || *((_DWORD *)v225 + 3))
      {
        uint64_t v185 = *((void *)v225 + 2);
        if ((v185 & 4) != 0)
        {
          unint64_t v89 = v185 & 0xFFFFFFFFFFFFFFF8;
          if (v89) {
            goto LABEL_183;
          }
        }
      }
    }
LABEL_145:
    if ((v63 & 1) == 0 && !*(unsigned char *)(*v64 + 383)) {
      goto LABEL_199;
    }
    uint64_t v75 = *(void *)(a3 + 16);
    uint64_t v223 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v223, v257, 2);
    }
    int v224 = v258;
    LODWORD(v261) = 3;
    LODWORD(v260) = 2;
    int v76 = sub_1CD3FF7B8(v75, 8261, (uint64_t)&v223, 1u, (unsigned int *)&v261, (unsigned int *)&v260, &v259);
    if (v223)
    {
      int v77 = *v223;
      if ((v77 - 4) > 0x1E)
      {
        if ((v77 - 3) >= 0xFFFFFFFE) {
          char v135 = v223;
        }
        else {
          char v135 = 0;
        }
        if ((v77 - 3) < 0xFFFFFFFE)
        {
          if (v77 == 3) {
            *((void *)v223 + 1) = 0;
          }
          goto LABEL_153;
        }
        unint64_t v136 = (unint64_t)(v135 + 8);
      }
      else
      {
        if ((v223[1] & 0x7F) != 2 && !*((_DWORD *)v223 + 3)) {
          goto LABEL_153;
        }
        uint64_t v186 = *((void *)v223 + 2);
        if ((v186 & 4) == 0) {
          goto LABEL_153;
        }
        unint64_t v136 = v186 & 0xFFFFFFFFFFFFFFF8;
        if (!v136) {
          goto LABEL_153;
        }
      }
      *(void *)&long long v261 = &v223;
      sub_1CC5FA668(v136 + 16, &v261);
    }
LABEL_153:
    *(void *)&long long v259 = v76;
    DWORD2(v259) = 0;
    goto LABEL_199;
  }
  if (((1 << v254) & 0x1010) == 0) {
    goto LABEL_199;
  }
  uint64_t v68 = *(void *)(a3 + 16);
  uint64_t v221 = v257;
  if (v257) {
    llvm::MetadataTracking::track((uint64_t)&v221, v257, 2);
  }
  int v222 = v258;
  sub_1CD405E28(v68, (uint64_t)&v221, 1, 3u, 3, 2, v67, 1, 1, 1, &v259, *v64);
  uint64_t v69 = v221;
  if (!v221) {
    goto LABEL_199;
  }
  int v70 = *v221;
  if ((v70 - 4) > 0x1E)
  {
    if ((v70 - 3) >= 0xFFFFFFFE) {
      int v90 = v221;
    }
    else {
      int v90 = 0;
    }
    if ((v70 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v72 = (unint64_t)(v90 + 8);
LABEL_189:
      unsigned int v91 = &v221;
LABEL_196:
      *(void *)&long long v261 = v91;
      sub_1CC5FA668(v72 + 16, &v261);
      goto LABEL_199;
    }
    goto LABEL_197;
  }
  if ((v221[1] & 0x7F) == 2 || *((_DWORD *)v221 + 3))
  {
    uint64_t v71 = *((void *)v221 + 2);
    if ((v71 & 4) != 0)
    {
      unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFF8;
      if (v72) {
        goto LABEL_189;
      }
    }
  }
LABEL_199:
  long long v260 = v243;
  if (!BYTE3(v255)
    && ((*(uint64_t (**)(uint64_t))(*(void *)v192 + 288))(v192) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))v192)(v192, 37, 0, 1, 2))
  {
    uint64_t v93 = *(void *)(a3 + 16);
    uint64_t v94 = sub_1CD7EBF14(v93, 0, (const llvm::APInt *)&v257, (llvm *)5, 0, 1, 0);
    int v96 = v95;
    int v97 = v63;
    uint64_t v98 = sub_1CD8015C0(*(void *)(a3 + 16), 26, (const llvm::APInt *)&v257, (llvm *)5, 0, v260, SDWORD2(v260));
    int v100 = v99;
    unint64_t v101 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v257, (llvm *)5, 0, 1, 0);
    uint64_t v188 = (uint64_t)v98;
    int v189 = v100;
    int v64 = v200;
    int v63 = v97;
    int v67 = v197;
    int v104 = sub_1CD801380(v93, 495, (uint64_t)&v257, (llvm *)5, 0, (uint64_t)v94, v96, v103, v188, v189, (uint64_t)v101, v102);
    *(void *)&long long v260 = sub_1CD8016A0(*(void *)(a3 + 16), 26, (const llvm::APInt *)&v257, (llvm *)6, 0, v260, SDWORD2(v260), v105, (uint64_t)v104, 0);
    DWORD2(v260) = v106;
  }
  if ((_BYTE)v255)
  {
    uint64_t v114 = 2066;
    if (!v236) {
      uint64_t v114 = 18;
    }
    unint64_t v115 = v114 | ((unint64_t)*(unsigned __int8 *)(*v64 + 326) << 12);
    uint64_t v116 = *(void *)(a3 + 16);
    if (BYTE3(v255))
    {
      unint64_t v122 = sub_1CD7EBF14(*(void *)(a3 + 16), v114 | ((unint64_t)*(unsigned __int8 *)(*v64 + 326) << 12), (const llvm::APInt *)&v257, (llvm *)6, 0, 1, 0);
      *(void *)&long long v261 = v262;
      *((void *)&v261 + 1) = 0x800000000;
      sub_1CB9FE228(*(llvm::APFloatBase **)(a3 + 16), (const llvm::APInt *)&v257, v198 != 0, (uint64_t)v235, (uint64_t)v122, v123, v40, v124, v259, *((uint64_t *)&v259 + 1), (uint64_t)&v261);
      int v109 = sub_1CD801044(*(void *)(a3 + 16), v193, (uint64_t)&v257, v194, v195, (uint64_t *)v261, DWORD2(v261));
      if ((void *)v261 != v262) {
        free((void *)v261);
      }
      goto LABEL_328;
    }
    unint64_t v207 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v207, v257, 2);
    }
    int v208 = v258;
    *(void *)&long long v261 = sub_1CD40CAC4((uint64_t)v235);
    *((void *)&v261 + 1) = v117;
    int v109 = sub_1CD40D680(v116, v193, (uint64_t)&v207, v194, v195, v115, (unsigned int *)&v232, &v260, &v261, &v250, &v259);
    uint64_t v110 = v207;
    if (!v207) {
      goto LABEL_328;
    }
    int v111 = *v207;
    if ((v111 - 4) > 0x1E)
    {
      if ((v111 - 3) >= 0xFFFFFFFE) {
        unsigned int v133 = v207;
      }
      else {
        unsigned int v133 = 0;
      }
      if ((v111 - 3) < 0xFFFFFFFE) {
        goto LABEL_326;
      }
      unint64_t v113 = (unint64_t)(v133 + 8);
    }
    else
    {
      if ((v207[1] & 0x7F) != 2 && !*((_DWORD *)v207 + 3)) {
        goto LABEL_328;
      }
      uint64_t v118 = *((void *)v207 + 2);
      if ((v118 & 4) == 0) {
        goto LABEL_268;
      }
      unint64_t v113 = v118 & 0xFFFFFFFFFFFFFFF8;
      if (!v113) {
        goto LABEL_268;
      }
      int v64 = v200;
      int v67 = v197;
    }
    unint64_t v134 = &v207;
LABEL_303:
    *(void *)&long long v261 = v134;
    uint64_t v140 = v113 + 16;
    uint64_t v141 = &v261;
LABEL_304:
    sub_1CC5FA668(v140, v141);
    goto LABEL_328;
  }
  uint64_t v220 = v253 | (v62 << 6);
  if (*(unsigned char *)(*v64 + 326)) {
    uint64_t v220 = v253 | (v62 << 6) | ((unint64_t)v236 << 9) | 0x1000;
  }
  if (v235[0])
  {
    uint64_t v119 = *(void *)(a3 + 16);
    if (v198)
    {
      uint64_t v218 = v257;
      if (v257) {
        llvm::MetadataTracking::track((uint64_t)&v218, v257, 2);
      }
      int v219 = v258;
      *(void *)&long long v261 = sub_1CD40CAC4((uint64_t)v235);
      *((void *)&v261 + 1) = v120;
      LODWORD(v229) = 0;
      int v109 = sub_1CD40D18C(v119, v193, (uint64_t)&v218, v194, v195, 0, &v220, &v261, &v251, (int *)&v229, &v259);
      uint64_t v110 = v218;
      if (!v218) {
        goto LABEL_328;
      }
      int v111 = *v218;
      if ((v111 - 4) > 0x1E)
      {
        if ((v111 - 3) >= 0xFFFFFFFE) {
          unint64_t v138 = v218;
        }
        else {
          unint64_t v138 = 0;
        }
        if ((v111 - 3) < 0xFFFFFFFE) {
          goto LABEL_326;
        }
        unint64_t v113 = (unint64_t)(v138 + 8);
      }
      else
      {
        if ((v218[1] & 0x7F) != 2 && !*((_DWORD *)v218 + 3)) {
          goto LABEL_328;
        }
        uint64_t v121 = *((void *)v218 + 2);
        if ((v121 & 4) == 0) {
          goto LABEL_268;
        }
        unint64_t v113 = v121 & 0xFFFFFFFFFFFFFFF8;
        if (!v113) {
          goto LABEL_268;
        }
        int v64 = v200;
        int v67 = v197;
      }
      unint64_t v134 = &v218;
      goto LABEL_303;
    }
    int v216 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v216, v257, 2);
    }
    int v217 = v258;
    *(void *)&long long v261 = sub_1CD40CAC4((uint64_t)v235);
    *((void *)&v261 + 1) = v129;
    int v109 = sub_1CD40D278(v119, v193, (uint64_t)&v216, v194, v195, &v220, &v261, &v251, &v259);
    uint64_t v110 = v216;
    if (!v216) {
      goto LABEL_328;
    }
    int v111 = *v216;
    if ((v111 - 4) > 0x1E)
    {
      if ((v111 - 3) >= 0xFFFFFFFE) {
        uint64_t v139 = v216;
      }
      else {
        uint64_t v139 = 0;
      }
      if ((v111 - 3) < 0xFFFFFFFE) {
        goto LABEL_326;
      }
      unint64_t v113 = (unint64_t)(v139 + 8);
    }
    else
    {
      if ((v216[1] & 0x7F) != 2 && !*((_DWORD *)v216 + 3)) {
        goto LABEL_328;
      }
      uint64_t v130 = *((void *)v216 + 2);
      if ((v130 & 4) == 0) {
        goto LABEL_268;
      }
      unint64_t v113 = v130 & 0xFFFFFFFFFFFFFFF8;
      if (!v113) {
        goto LABEL_268;
      }
      int v64 = v200;
      int v67 = v197;
    }
    unint64_t v134 = &v216;
    goto LABEL_303;
  }
  if (BYTE3(v255))
  {
    long long v261 = v243;
    uint64_t v125 = *(void *)(a3 + 16);
    if (!v198)
    {
      uint64_t v211 = v257;
      if (v257) {
        llvm::MetadataTracking::track((uint64_t)&v211, v257, 2);
      }
      int v212 = v258;
      *(void *)&long long v229 = sub_1CD40CAC4((uint64_t)v235);
      *((void *)&v229 + 1) = v131;
      int v109 = sub_1CD40D444(v125, v193, (uint64_t)&v211, v194, v195, v220, &v261, &v229, &v251, &v259);
      uint64_t v110 = v211;
      if (!v211) {
        goto LABEL_328;
      }
      int v111 = *v211;
      if ((v111 - 4) > 0x1E)
      {
        if ((v111 - 3) >= 0xFFFFFFFE) {
          int v146 = v211;
        }
        else {
          int v146 = 0;
        }
        if ((v111 - 3) < 0xFFFFFFFE) {
          goto LABEL_326;
        }
        unint64_t v128 = (unint64_t)(v146 + 8);
      }
      else
      {
        if ((v211[1] & 0x7F) != 2 && !*((_DWORD *)v211 + 3)) {
          goto LABEL_328;
        }
        uint64_t v132 = *((void *)v211 + 2);
        if ((v132 & 4) == 0) {
          goto LABEL_268;
        }
        unint64_t v128 = v132 & 0xFFFFFFFFFFFFFFF8;
        if (!v128) {
          goto LABEL_268;
        }
        int v64 = v200;
        int v67 = v197;
      }
      char v145 = &v211;
      goto LABEL_325;
    }
    uint64_t v214 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v214, v257, 2);
    }
    int v215 = v258;
    *(void *)&long long v229 = sub_1CD40CAC4((uint64_t)v235);
    *((void *)&v229 + 1) = v126;
    int v213 = 0;
    int v109 = sub_1CD40D358(v125, v193, (uint64_t)&v214, v194, v195, 0, &v220, &v261, &v229, &v251, &v213, &v259);
    uint64_t v110 = v214;
    if (!v214) {
      goto LABEL_328;
    }
    int v111 = *v214;
    if ((v111 - 4) <= 0x1E)
    {
      if ((v214[1] & 0x7F) != 2 && !*((_DWORD *)v214 + 3)) {
        goto LABEL_328;
      }
      uint64_t v127 = *((void *)v214 + 2);
      if ((v127 & 4) == 0) {
        goto LABEL_268;
      }
      unint64_t v128 = v127 & 0xFFFFFFFFFFFFFFF8;
      if (!v128) {
        goto LABEL_268;
      }
      int v64 = v200;
      int v67 = v197;
      goto LABEL_318;
    }
    if ((v111 - 3) >= 0xFFFFFFFE) {
      char v144 = v214;
    }
    else {
      char v144 = 0;
    }
    if ((v111 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v128 = (unint64_t)(v144 + 8);
LABEL_318:
      char v145 = &v214;
LABEL_325:
      *(void *)&long long v229 = v145;
      uint64_t v140 = v128 + 16;
      uint64_t v141 = &v229;
      goto LABEL_304;
    }
LABEL_326:
    if (v111 == 3) {
      *((void *)v110 + 1) = 0;
    }
    goto LABEL_328;
  }
  uint64_t v107 = *(void *)(a3 + 16);
  uint64_t v209 = v257;
  if (v257) {
    llvm::MetadataTracking::track((uint64_t)&v209, v257, 2);
  }
  int v210 = v258;
  *(void *)&long long v261 = sub_1CD40CAC4((uint64_t)v235);
  *((void *)&v261 + 1) = v108;
  int v109 = sub_1CD40D558(v107, v193, (uint64_t)&v209, v194, v195, v220, &v260, &v261, &v251, &v250, &v259);
  uint64_t v110 = v209;
  if (!v209) {
    goto LABEL_328;
  }
  int v111 = *v209;
  if ((v111 - 4) > 0x1E)
  {
    if ((v111 - 3) >= 0xFFFFFFFE) {
      char v137 = v209;
    }
    else {
      char v137 = 0;
    }
    if ((v111 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v113 = (unint64_t)(v137 + 8);
      goto LABEL_290;
    }
    goto LABEL_326;
  }
  if ((v209[1] & 0x7F) == 2 || *((_DWORD *)v209 + 3))
  {
    uint64_t v112 = *((void *)v209 + 2);
    if ((v112 & 4) != 0)
    {
      unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
      if (v113)
      {
        int v64 = v200;
        int v67 = v197;
LABEL_290:
        unint64_t v134 = &v209;
        goto LABEL_303;
      }
    }
LABEL_268:
    int v64 = v200;
    int v67 = v197;
  }
LABEL_328:
  uint64_t v147 = *(uint64_t **)(a3 + 16);
  *(void *)&long long v261 = *(void *)(a2 + 96);
  sub_1CD8005B8(v147, (uint64_t)v109, &v261, 1);
  *(void *)&long long v259 = v109;
  DWORD2(v259) = v199;
  if (v254 > 0xC) {
    goto LABEL_380;
  }
  if (((1 << v254) & 0x440) != 0)
  {
    uint64_t v155 = *(void *)(a3 + 16);
    uint64_t v205 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v205, v257, 2);
    }
    int v206 = v258;
    sub_1CD405E28(v155, (uint64_t)&v205, 1, 2u, 1, 2, v67, 1, 1, 1, &v259, *v64);
    unint64_t v149 = v205;
    if (!v205) {
      goto LABEL_380;
    }
    int v150 = *v205;
    if ((v150 - 4) > 0x1E)
    {
      if ((v150 - 3) >= 0xFFFFFFFE) {
        char v160 = v205;
      }
      else {
        char v160 = 0;
      }
      if ((v150 - 3) < 0xFFFFFFFE) {
        goto LABEL_378;
      }
      unint64_t v152 = (unint64_t)(v160 + 8);
    }
    else
    {
      if ((v205[1] & 0x7F) != 2 && !*((_DWORD *)v205 + 3)) {
        goto LABEL_380;
      }
      uint64_t v156 = *((void *)v205 + 2);
      if ((v156 & 4) == 0) {
        goto LABEL_380;
      }
      unint64_t v152 = v156 & 0xFFFFFFFFFFFFFFF8;
      if (!v152) {
        goto LABEL_380;
      }
    }
    char v158 = &v205;
    goto LABEL_377;
  }
  if (((1 << v254) & 0x880) != 0)
  {
    uint64_t v153 = *(void *)(a3 + 16);
    uint64_t v203 = v257;
    if (v257) {
      llvm::MetadataTracking::track((uint64_t)&v203, v257, 2);
    }
    int v204 = v258;
    sub_1CD405E28(v153, (uint64_t)&v203, 1, 2u, 2, 2, v67, 1, 1, 1, &v259, *v64);
    unint64_t v149 = v203;
    if (!v203) {
      goto LABEL_380;
    }
    int v150 = *v203;
    if ((v150 - 4) <= 0x1E)
    {
      if ((v203[1] & 0x7F) != 2 && !*((_DWORD *)v203 + 3)) {
        goto LABEL_380;
      }
      uint64_t v154 = *((void *)v203 + 2);
      if ((v154 & 4) == 0) {
        goto LABEL_380;
      }
      unint64_t v152 = v154 & 0xFFFFFFFFFFFFFFF8;
      if (!v152) {
        goto LABEL_380;
      }
LABEL_364:
      char v158 = &v203;
LABEL_377:
      *(void *)&long long v261 = v158;
      sub_1CC5FA668(v152 + 16, &v261);
      goto LABEL_380;
    }
    if ((v150 - 3) >= 0xFFFFFFFE) {
      int v157 = v203;
    }
    else {
      int v157 = 0;
    }
    if ((v150 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v152 = (unint64_t)(v157 + 8);
      goto LABEL_364;
    }
LABEL_378:
    if (v150 == 3) {
      *((void *)v149 + 1) = 0;
    }
    goto LABEL_380;
  }
  if (((1 << v254) & 0x1100) == 0) {
    goto LABEL_380;
  }
  uint64_t v148 = *(void *)(a3 + 16);
  unsigned int v201 = v257;
  if (v257) {
    llvm::MetadataTracking::track((uint64_t)&v201, v257, 2);
  }
  int v202 = v258;
  sub_1CD405E28(v148, (uint64_t)&v201, 1, 2u, 3, 2, v67, 1, 1, 1, &v259, *v64);
  unint64_t v149 = v201;
  if (!v201) {
    goto LABEL_380;
  }
  int v150 = *v201;
  if ((v150 - 4) > 0x1E)
  {
    if ((v150 - 3) >= 0xFFFFFFFE) {
      uint64_t v159 = v201;
    }
    else {
      uint64_t v159 = 0;
    }
    if ((v150 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v152 = (unint64_t)(v159 + 8);
LABEL_370:
      char v158 = &v201;
      goto LABEL_377;
    }
    goto LABEL_378;
  }
  if ((v201[1] & 0x7F) == 2 || *((_DWORD *)v201 + 3))
  {
    uint64_t v151 = *((void *)v201 + 2);
    if ((v151 & 4) != 0)
    {
      unint64_t v152 = v151 & 0xFFFFFFFFFFFFFFF8;
      if (v152) {
        goto LABEL_370;
      }
    }
  }
LABEL_380:
  if (BYTE1(v255)) {
    unsigned int v161 = 0;
  }
  else {
    unsigned int v161 = v199;
  }
  if (v161 == 1) {
    sub_1CD800DA0(*(void *)(a3 + 16), a2, 0, (uint64_t)v109, 0);
  }
  if (v196)
  {
    unint64_t v170 = *(void **)(a3 + 16);
    uint64_t v171 = sub_1CD7EE368(v170, 0x11u);
    uint64_t v174 = v170[104];
    if (v174) {
      LOWORD(v174) = *(_WORD *)(v174 + 8);
    }
    int8x8_t v176 = sub_1CD7F5D38(v170, (const char *)0xC1, (const llvm::APInt *)&v257, (llvm *)5, 0, (uint64_t)v109, 0, v173, v191, v190, v171, v172, SHIDWORD(v172), v174);
    __int16 v177 = 0;
    unint64_t v178 = *(llvm::APFloatBase **)(a3 + 16);
    uint64_t v179 = *((void *)v178 + 104);
    if (v179) {
      __int16 v177 = *(_WORD *)(v179 + 8);
    }
    int8x8_t v180 = sub_1CD7F3564(v178, (const char *)0xC9, (uint64_t)&v257, (llvm *)2, 0, (uint64_t)v176, v175, v177);
    sub_1CD800DA0(*(void *)(a3 + 16), a2, 1, (uint64_t)v180, v181);
  }
  if (v63) {
    int v162 = 1;
  }
  else {
    int v162 = HIDWORD(v253) - 1;
  }
  sub_1CD800DA0(*(void *)(a3 + 16), a2, v162, v259, SDWORD2(v259));
  if (v237)
  {
    int v163 = *v237;
    if ((v163 - 4) > 0x1E)
    {
      if ((v163 - 3) >= 0xFFFFFFFE) {
        uint64_t v166 = v237;
      }
      else {
        uint64_t v166 = 0;
      }
      if ((v163 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v167 = (unint64_t)(v166 + 8);
LABEL_403:
        *(void *)&long long v261 = &v237;
        sub_1CC5FA668(v167 + 16, &v261);
        goto LABEL_393;
      }
      if (v163 == 3) {
        *((void *)v237 + 1) = 0;
      }
    }
    else if ((v237[1] & 0x7F) == 2 || *((_DWORD *)v237 + 3))
    {
      uint64_t v182 = *((void *)v237 + 2);
      if ((v182 & 4) != 0)
      {
        unint64_t v167 = v182 & 0xFFFFFFFFFFFFFFF8;
        if (v167) {
          goto LABEL_403;
        }
      }
    }
  }
LABEL_393:
  if (v257)
  {
    int v164 = *v257;
    if ((v164 - 4) > 0x1E)
    {
      if ((v164 - 3) >= 0xFFFFFFFE) {
        char v168 = v257;
      }
      else {
        char v168 = 0;
      }
      if ((v164 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v169 = (unint64_t)(v168 + 8);
LABEL_409:
        *(void *)&long long v261 = &v257;
        sub_1CC5FA668(v169 + 16, &v261);
        return 0;
      }
      if (v164 == 3) {
        *((void *)v257 + 1) = 0;
      }
    }
    else if ((v257[1] & 0x7F) == 2 || *((_DWORD *)v257 + 3))
    {
      uint64_t v183 = *((void *)v257 + 2);
      if ((v183 & 4) != 0)
      {
        unint64_t v169 = v183 & 0xFFFFFFFFFFFFFFF8;
        if (v169) {
          goto LABEL_409;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_1CBA01874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v153[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(llvm **)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v148 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v148, v8, 2);
  }
  int v9 = *(_DWORD *)(a2 + 60);
  int v149 = v9;
  if (v6 == 6
    || ((v10 = *(void *)(a2 + 32), v11 = *(void *)(v10 + 40), int v12 = *(unsigned __int16 *)(v11 + 24), v12 != 35)
      ? (BOOL v13 = v12 == 11)
      : (BOOL v13 = 1),
        !v13))
  {
    uint64_t v25 = 0;
    goto LABEL_19;
  }
  int v14 = *(uint64_t **)v10;
  uint64_t v15 = *(void *)(v10 + 8);
  uint64_t v16 = *(int8x8_t **)(v11 + 80);
  uint64_t v17 = v16 + 3;
  if (v16[4].i32[0] >= 0x41u) {
    uint64_t v17 = (int8x8_t *)*v17;
  }
  unint64_t v18 = (unint64_t)*v17;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(*v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] != 1)
  {
    long long v152 = *(_OWORD *)*(void *)(a2 + 40);
    uint64_t v20 = *(unsigned __int8 **)(a2 + 64);
    int v150 = v20;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)&v150, v20, 2);
      int v9 = *(_DWORD *)(a2 + 60);
    }
    uint64_t v21 = 0;
    int v151 = v9;
    while (1)
    {
      unint64_t v22 = byte_1CDB0D808[v21];
      int8x8_t v23 = (int8x8_t)(v18 / v22);
      if (!(v18 % v22)) {
        break;
      }
      if (++v21 == 4)
      {
LABEL_17:
        LODWORD(v24) = 0;
        uint64_t v25 = 0;
        goto LABEL_65;
      }
    }
    LODWORD(v24) = 0;
    v153[0] = byte_1CDB0D808[v21];
    v153[1] = v18 / v22;
    if (v22 <= 0x11)
    {
      uint64_t v25 = 0;
      if ((unint64_t)(*(void *)&v23 - 18) < 0xFFFFFFFFFFFFFFEFLL) {
        goto LABEL_65;
      }
      uint8x8_t v30 = (uint8x8_t)vcnt_s8(v23);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] != 1)
      {
        uint64_t v88 = 0;
        while (*(void *)&v23 != byte_1CDB0D808[v88])
        {
          if (++v88 == 4) {
            goto LABEL_17;
          }
        }
      }
      char v31 = 0;
      uint64_t v32 = 0;
      unint64_t v24 = v15;
      uint64_t v25 = v14;
      while (1)
      {
        char v33 = v31;
        unint64_t v34 = v153[v32];
        if (!v34) {
          goto LABEL_39;
        }
        if (v34 != 1) {
          break;
        }
LABEL_59:
        char v31 = 1;
        uint64_t v32 = 1;
        if (v33) {
          goto LABEL_65;
        }
      }
      if ((v34 & (v34 - 1)) != 0)
      {
LABEL_39:
        unint64_t v37 = v34 - 1;
        uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
        v38.i16[0] = vaddlv_u8(v38);
        if (v38.u32[0] != 1) {
          llvm::llvm_unreachable_internal((llvm *)"Invalid multiply factor", 0, 0);
        }
        if ((_BYTE)v152) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v152);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v152);
        }
        unint64_t v41 = ExtendedSizeInBits;
        if (v40 == 1) {
        unint64_t v42 = 63 - __clz(v37);
        }
        if (v41 <= v42)
        {
LABEL_63:
          LODWORD(v24) = 0;
          uint64_t v25 = 0;
          goto LABEL_65;
        }
        long long v43 = v152;
        int v44 = sub_1CD7EBF14(a3, v42, (const llvm::APInt *)&v150, (llvm *)5, 0, 0, 0);
        uint64_t v47 = *(void *)(a3 + 832);
        if (v47) {
          LOWORD(v47) = *(_WORD *)(v47 + 8);
        }
        uint64_t v48 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v150, (llvm *)v43, *((uint64_t *)&v43 + 1), (uint64_t)v25, v24, v46, (uint64_t)v44, v45, v47);
        uint64_t v51 = *(void *)(a3 + 832);
        if (v51) {
          LOWORD(v51) = *(_WORD *)(v51 + 8);
        }
        int v52 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v150, (llvm *)v152, *((uint64_t *)&v152 + 1), (uint64_t)v25, v24, v50, (uint64_t)v48, v49, v51);
      }
      else
      {
        if ((_BYTE)v152) {
          uint64_t v35 = sub_1CB87E200((unsigned __int8 *)&v152);
        }
        else {
          uint64_t v35 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v152);
        }
        unint64_t v54 = v35;
        if (v36 == 1) {
        unint64_t v55 = 63 - __clz(v34);
        }
        if (v54 <= v55) {
          goto LABEL_63;
        }
        long long v56 = v152;
        unsigned int v57 = sub_1CD7EBF14(a3, v55, (const llvm::APInt *)&v150, (llvm *)5, 0, 0, 0);
        uint64_t v60 = *(void *)(a3 + 832);
        if (v60) {
          LOWORD(v60) = *(_WORD *)(v60 + 8);
        }
        int v52 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v150, (llvm *)v56, *((uint64_t *)&v56 + 1), (uint64_t)v25, v24, v59, (uint64_t)v57, v58, v60);
      }
      uint64_t v25 = v52;
      unint64_t v24 = v24 & 0xFFFFFFFF00000000 | v53;
      goto LABEL_59;
    }
    uint64_t v25 = 0;
LABEL_65:
    if (v150)
    {
      int v61 = *v150;
      if ((v61 - 4) > 0x1E)
      {
        if ((v61 - 3) >= 0xFFFFFFFE) {
          uint64_t v69 = v150;
        }
        else {
          uint64_t v69 = 0;
        }
        if ((v61 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v70 = (unint64_t)(v69 + 8);
LABEL_83:
          v153[0] = &v150;
          sub_1CC5FA668(v70 + 16, v153);
          goto LABEL_69;
        }
        if (v61 == 3) {
          *((void *)v150 + 1) = 0;
        }
      }
      else if ((v150[1] & 0x7F) == 2 || *((_DWORD *)v150 + 3))
      {
        uint64_t v144 = *((void *)v150 + 2);
        if ((v144 & 4) != 0)
        {
          unint64_t v70 = v144 & 0xFFFFFFFFFFFFFFF8;
          if (v70) {
            goto LABEL_83;
          }
        }
      }
    }
LABEL_69:
    if (v25 || v24) {
      goto LABEL_19;
    }
    uint64_t v62 = *(void *)(a2 + 40);
    int v63 = *(llvm **)v62;
    uint64_t v64 = *(void *)(v62 + 8);
    int v65 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long v152 = v65;
    if (v65) {
      llvm::MetadataTracking::track((uint64_t)&v152, v65, 2);
    }
    uint64_t v66 = 0;
    DWORD2(v152) = *(_DWORD *)(a2 + 60);
    while (1)
    {
      uint64_t v67 = byte_1CDB0D810[v66];
      unint64_t v68 = v18 - v67;
      if (v18 != v67 && (v68 & (v68 - 1)) == 0) {
        break;
      }
      if (++v66 == 10) {
        goto LABEL_86;
      }
    }
    if (!byte_1CDB0D810[v66] || (uint64_t v71 = 63 - __clz(v68), v71 > 4))
    {
LABEL_86:
      int v72 = 0;
      uint64_t v25 = 0;
      goto LABEL_87;
    }
    uint64_t v114 = sub_1CD7EBF14(a3, v71, (const llvm::APInt *)&v152, (llvm *)5, 0, 0, 0);
    uint64_t v117 = *(void *)(a3 + 832);
    if (v117) {
      LOWORD(v117) = *(_WORD *)(v117 + 8);
    }
    uint64_t v118 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v152, v63, v64, (uint64_t)v14, v15, v116, (uint64_t)v114, v115, v117);
    uint64_t v121 = v15;
    uint64_t v122 = (uint64_t)v118;
    uint64_t v123 = v119;
    if ((int)v67 >= 0) {
      LOBYTE(v124) = v67;
    }
    else {
      int v124 = -(int)v67;
    }
    unsigned int v125 = v124;
    uint64_t v126 = (uint64_t)v14;
    uint64_t v127 = v14;
    uint64_t v128 = v121;
    unint64_t v129 = v121;
    if (v125 >= 2)
    {
      uint64_t v147 = v119;
      unint64_t v138 = sub_1CD7EBF14(a3, __clz(v125) ^ 0x1F, (const llvm::APInt *)&v152, (llvm *)5, 0, 0, 0);
      uint64_t v141 = *(void *)(a3 + 832);
      if (v141) {
        LOWORD(v141) = *(_WORD *)(v141 + 8);
      }
      uint64_t v127 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v152, v63, v64, v126, v128, v140, (uint64_t)v138, v139, v141);
      uint64_t v123 = v147;
      unint64_t v129 = v128 & 0xFFFFFFFF00000000 | v142;
    }
    if ((int)v67 > 0) {
      uint64_t v130 = 56;
    }
    else {
      uint64_t v130 = 57;
    }
    uint64_t v131 = *(void *)(a3 + 832);
    if (v131) {
      LOWORD(v131) = *(_WORD *)(v131 + 8);
    }
    uint64_t v25 = sub_1CCFDED5C(a3, v130, (const llvm::APInt *)&v152, v63, v64, v122, v123, v120, (uint64_t)v127, v129, v131);
    int v72 = v132;
    uint64_t v15 = v128;
    int v14 = (uint64_t *)v126;
LABEL_87:
    if ((void)v152)
    {
      int v73 = *(unsigned __int8 *)v152;
      if ((v73 - 4) > 0x1E)
      {
        if ((v73 - 3) >= 0xFFFFFFFE) {
          uint64_t v89 = v152;
        }
        else {
          uint64_t v89 = 0;
        }
        if ((v73 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v90 = v89 + 8;
LABEL_129:
          int v150 = (unsigned __int8 *)&v152;
          sub_1CC5FA668(v90 + 16, &v150);
          goto LABEL_91;
        }
        if (v73 == 3) {
          *(void *)(v152 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v152 + 1) & 0x7F) == 2 || *(_DWORD *)(v152 + 12))
      {
        uint64_t v145 = *(void *)(v152 + 16);
        if ((v145 & 4) != 0)
        {
          unint64_t v90 = v145 & 0xFFFFFFFFFFFFFFF8;
          if (v90) {
            goto LABEL_129;
          }
        }
      }
    }
LABEL_91:
    if (v25 || v72) {
      goto LABEL_19;
    }
    uint64_t v74 = *(void *)(a2 + 40);
    uint64_t v75 = *(llvm **)v74;
    uint64_t v76 = *(void *)(v74 + 8);
    int v77 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long v152 = v77;
    if (v77) {
      llvm::MetadataTracking::track((uint64_t)&v152, v77, 2);
    }
    DWORD2(v152) = *(_DWORD *)(a2 + 60);
    if (v18 > 0x21) {
      goto LABEL_108;
    }
    unint64_t v78 = 0;
    int v79 = 0;
    do
    {
      uint64_t v80 = 0;
      while (1)
      {
        int v81 = byte_1CDB0D80C[v80];
        uint64_t v82 = (v81 + byte_1CDB0D810[v78]);
        if ((int)v82 >= 1 && v18 == v82) {
          break;
        }
        if (++v80 == 4)
        {
          int v81 = 0;
          goto LABEL_105;
        }
      }
      int v79 = byte_1CDB0D810[v78];
LABEL_105:
      if (v78 > 8) {
        break;
      }
      ++v78;
    }
    while (!v81);
    if (v81)
    {
      int v97 = sub_1CD7EBF14(a3, 63 - __clz(v81 - 1), (const llvm::APInt *)&v152, (llvm *)5, 0, 0, 0);
      uint64_t v100 = *(void *)(a3 + 832);
      if (v100) {
        LOWORD(v100) = *(_WORD *)(v100 + 8);
      }
      unint64_t v101 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v152, v75, v76, (uint64_t)v14, v15, v99, (uint64_t)v97, v98, v100);
      uint64_t v104 = *(void *)(a3 + 832);
      if (v104) {
        LOWORD(v104) = *(_WORD *)(v104 + 8);
      }
      unint64_t v105 = v15;
      uint64_t v107 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v152, v75, v76, (uint64_t)v14, v15, v103, (uint64_t)v101, v102, v104);
      uint64_t v109 = v108;
      if (v79 >= 0) {
        unsigned int v110 = v79;
      }
      else {
        unsigned int v110 = -v79;
      }
      if (v110 >= 2)
      {
        unsigned int v133 = sub_1CD7EBF14(a3, __clz(v110) ^ 0x1F, (const llvm::APInt *)&v152, (llvm *)5, 0, 0, 0);
        uint64_t v136 = *(void *)(a3 + 832);
        if (v136) {
          LOWORD(v136) = *(_WORD *)(v136 + 8);
        }
        int v14 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v152, v75, v76, (uint64_t)v14, v105, v135, (uint64_t)v133, v134, v136);
        unint64_t v105 = v105 & 0xFFFFFFFF00000000 | v137;
      }
      if (v79 > 0) {
        uint64_t v111 = 56;
      }
      else {
        uint64_t v111 = 57;
      }
      uint64_t v112 = *(void *)(a3 + 832);
      if (v112) {
        LOWORD(v112) = *(_WORD *)(v112 + 8);
      }
      int v85 = sub_1CCFDED5C(a3, v111, (const llvm::APInt *)&v152, v75, v76, (uint64_t)v107, v109, v106, (uint64_t)v14, v105, v112);
      int v84 = v113;
    }
    else
    {
LABEL_108:
      int v84 = 0;
      int v85 = 0;
    }
    if (!(void)v152) {
      goto LABEL_113;
    }
    int v86 = *(unsigned __int8 *)v152;
    if ((v86 - 4) > 0x1E)
    {
      if ((v86 - 3) >= 0xFFFFFFFE) {
        uint64_t v95 = v152;
      }
      else {
        uint64_t v95 = 0;
      }
      if ((v86 - 3) < 0xFFFFFFFE)
      {
        if (v86 == 3) {
          *(void *)(v152 + 8) = 0;
        }
        goto LABEL_113;
      }
      unint64_t v96 = v95 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v152 + 1) & 0x7F) != 2 && !*(_DWORD *)(v152 + 12)) {
        goto LABEL_113;
      }
      uint64_t v146 = *(void *)(v152 + 16);
      if ((v146 & 4) == 0) {
        goto LABEL_113;
      }
      unint64_t v96 = v146 & 0xFFFFFFFFFFFFFFF8;
      if (!v96) {
        goto LABEL_113;
      }
    }
    int v150 = (unsigned __int8 *)&v152;
    sub_1CC5FA668(v96 + 16, &v150);
LABEL_113:
    if (v85) {
      BOOL v87 = 0;
    }
    else {
      BOOL v87 = v84 == 0;
    }
    if (v87) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v85;
    }
    goto LABEL_19;
  }
  unsigned int v91 = sub_1CD7EBF14(a3, 63 - __clz(v18), (const llvm::APInt *)&v148, (llvm *)5, 0, 0, 0);
  uint64_t v94 = *(void *)(a3 + 832);
  if (v94) {
    LOWORD(v94) = *(_WORD *)(v94 + 8);
  }
  uint64_t v25 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v148, v6, v7, (uint64_t)v14, v15, v93, (uint64_t)v91, v92, v94);
LABEL_19:
  if (v148)
  {
    int v26 = *v148;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v28 = v148;
      }
      else {
        uint64_t v28 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v28 + 8);
LABEL_29:
        *(void *)&long long v152 = &v148;
        sub_1CC5FA668(v29 + 16, &v152);
        return v25;
      }
      if (v26 == 3) {
        *((void *)v148 + 1) = 0;
      }
    }
    else if ((v148[1] & 0x7F) == 2 || *((_DWORD *)v148 + 3))
    {
      uint64_t v143 = *((void *)v148 + 2);
      if ((v143 & 4) != 0)
      {
        unint64_t v29 = v143 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_29;
        }
      }
    }
  }
  return v25;
}

void sub_1CBA02270(uint64_t a1)
{
}

uint64_t sub_1CBA02330(uint64_t a1)
{
  if (!*(void *)(a1 + 248)) {
    operator new();
  }
  return *(void *)(a1 + 248);
}

uint64_t sub_1CBA02460(void *a1, _DWORD *a2, unsigned int *a3, uint64_t a4, int *a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  sub_1CC73C210(*a3, a1[34], (uint64_t)&v73);
  if (!(_BYTE)v75) {
    return 0;
  }
  if (v74 >= 0x41)
  {
    if (v73) {
      MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
    }
    return 0;
  }
  uint64_t v10 = a1[34];
  uint64_t v11 = *a2;
  if ((v11 & 0x80000000) != 0) {
    int v12 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  }
  else {
    int v12 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v11);
  }
  uint64_t v13 = *v12;
  if (*(unsigned char *)(v13 + 3))
  {
    if ((v11 & 0x80000000) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v13 + 24);
    if ((v11 & 0x80000000) == 0) {
      return 0;
    }
  }
  uint64_t v14 = v11 & 0x7FFFFFFF;
  if (v14 >= *(_DWORD *)(v10 + 432)) {
    return 0;
  }
  uint64_t v15 = 0;
  if (*(void *)(*(void *)(v10 + 424) + 8 * v14) != 129) {
    return v15;
  }
  uint64_t v16 = *(void *)(v13 + 8);
  int v17 = **(unsigned __int16 **)(v16 + 16);
  if ((v17 - 67) < 0xFFFFFFFE) {
    return v15;
  }
  uint64_t v15 = 0;
  if ((*a5 & 0xFFFFFFFE) != 0x20 || (unint64_t)(v73 << -(uint64_t)v74 >> -(uint64_t)v74) > 1) {
    return v15;
  }
  uint64_t v18 = *(void *)(v10 + 24);
  uint64_t v19 = *(void *)(v18 + 16 * v14 + 8);
  if (v19)
  {
    while ((*(unsigned char *)(v19 + 3) & 1) != 0)
    {
      uint64_t v19 = *(void *)(v19 + 24);
      if (!v19) {
        goto LABEL_15;
      }
    }
    uint64_t v38 = *(void *)(v19 + 8);
    if ((**(_WORD **)(v38 + 16) & 0xFFFE) != 0x32) {
      return 0;
    }
    int v39 = 1;
    while (1)
    {
      uint64_t v19 = *(void *)(v19 + 24);
      if (!v19) {
        break;
      }
      if ((*(unsigned char *)(v19 + 3) & 1) == 0)
      {
        uint64_t v40 = *(void *)(v19 + 8);
        if (v40 != v38)
        {
          uint64_t v15 = 0;
          unsigned int v41 = v39 + 1;
          if ((**(_WORD **)(v40 + 16) & 0xFFFE) == 0x32)
          {
            ++v39;
            BOOL v42 = v41 >= 4;
          }
          else
          {
            BOOL v42 = 1;
          }
          uint64_t v38 = *(void *)(v19 + 8);
          if (v42) {
            return v15;
          }
        }
      }
    }
  }
LABEL_15:
  uint64_t v20 = *(void *)(v16 + 32);
  uint64_t v21 = *(unsigned int *)(v20 + 36);
  unint64_t v22 = (uint64_t *)((v21 & 0x80000000) != 0 ? v18 + 16 * (v21 & 0x7FFFFFFF) + 8 : *(void *)(v10 + 272) + 8 * v21);
  uint64_t v23 = *v22;
  int v63 = (const char *)*(unsigned int *)(v20 + 36);
  uint64_t v65 = v73 << -(uint64_t)v74 >> -(uint64_t)v74;
  if (v23 && ((*(unsigned char *)(v23 + 3) & 1) != 0 || (uint64_t v23 = *(void *)(v23 + 24)) != 0 && (*(unsigned char *)(v23 + 3) & 1) != 0)) {
    uint64_t v24 = *(void *)(v23 + 8);
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(v10 + 272);
  if (sub_1CBA02C0C(v24, v18, v25)) {
    return 0;
  }
  uint64_t v26 = *(unsigned int *)(v20 + 68);
  int v27 = (uint64_t *)((int)v26 < 0 ? v18 + 16 * (v26 & 0x7FFFFFFF) + 8 : v25 + 8 * v26);
  uint64_t v28 = *v27;
  if (v28 && ((*(unsigned char *)(v28 + 3) & 1) != 0 || (uint64_t v28 = *(void *)(v28 + 24)) != 0 && (*(unsigned char *)(v28 + 3) & 1) != 0)) {
    uint64_t v29 = *(void *)(v28 + 8);
  }
  else {
    uint64_t v29 = 0;
  }
  if (sub_1CBA02C0C(v29, v18, v25)) {
    return 0;
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    char v31 = (char *)&v73 + i;
    *((_DWORD *)v31 + 2) = 1;
    *(void *)char v31 = 0;
    *((_DWORD *)v31 + 6) = 1;
    *((void *)v31 + 2) = 0;
  }
  sub_1CC6DEE8C(a1[33], v63, (uint64_t)&v68);
  if (v74 >= 0x41 && v73) {
    MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
  }
  uint64_t v64 = (uint64_t *)v68;
  uint64_t v73 = v68;
  unsigned int v32 = v69;
  unsigned int v74 = v69;
  unsigned int v69 = 0;
  if (v76 >= 0x41 && v75)
  {
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    uint64_t v75 = v70;
    unsigned int v76 = v71;
    unsigned int v71 = 0;
    if (v69 >= 0x41 && v68) {
      MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v75 = v70;
    unsigned int v76 = v71;
  }
  sub_1CC6DEE8C(a1[33], (const char *)*(unsigned int *)(*(void *)(v16 + 32) + 68), (uint64_t)&v68);
  if (v78 >= 0x41 && v77) {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
  }
  char v33 = (uint64_t *)v68;
  uint64_t v77 = v68;
  unsigned int v34 = v69;
  unsigned int v78 = v69;
  unsigned int v69 = 0;
  if (v80[0] >= 0x41u && v79)
  {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
    uint64_t v79 = v70;
    v80[0] = v71;
    unsigned int v71 = 0;
    if (v69 >= 0x41 && v68) {
      MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v79 = v70;
    v80[0] = v71;
  }
  uint64_t v35 = &v73;
  if (v32 >= 0x41) {
    uint64_t v35 = v64;
  }
  if (*v35 == 65534)
  {
    uint64_t v36 = &v77;
    if (v34 >= 0x41) {
      uint64_t v36 = v33;
    }
    if (*v36 == 65534)
    {
      uint64_t v37 = v65;
      if (v17 == 66 && v65 == 1 || v17 == 65 && !v65)
      {
        *a5 = dword_1CDB0D81C[*a5];
        uint64_t v37 = v65 ^ 1;
      }
      goto LABEL_61;
    }
  }
  uint64_t v15 = 0;
  if (v17 == 66 && !v65)
  {
    uint64_t v37 = 0;
LABEL_61:
    uint64_t v66 = v37;
    uint64_t v43 = a1[31];
    *(void *)(v43 + 40) = *(void *)(a4 + 24);
    *(void *)(v43 + 48) = a4;
    uint64_t v44 = a1[34];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
    unint64_t v46 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v44 + 24) + 16 * v46) = 4;
    unint64_t v47 = *(unsigned int *)(v44 + 432);
    if (v46 >= v47)
    {
      uint64_t v48 = *(void *)(v44 + 440);
      uint64_t v49 = v46 + 1 - v47;
      if (v46 >= *(unsigned int *)(v44 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v50 = *(_DWORD *)(v44 + 432);
      if (v49)
      {
        uint64_t v51 = (void *)(*(void *)(v44 + 424) + 8 * *(unsigned int *)(v44 + 432));
        uint64_t v52 = ~v46 + v47;
        do
        {
          *v51++ = v48;
          BOOL v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
        int v50 = *(_DWORD *)(v44 + 432);
      }
      *(_DWORD *)(v44 + 432) = v50 + v49;
    }
    *(void *)(*(void *)(v44 + 424) + 8 * v46) = 257;
    uint64_t v53 = *(void *)(v44 + 8);
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 24))(v53);
    }
    *a2 = IncompleteVirtualRegister;
    uint64_t v15 = 1;
    v67[0] = IncompleteVirtualRegister;
    v67[2] = 1;
    uint64_t v54 = *(void *)(v16 + 32);
    LODWORD(v68) = *(_DWORD *)(v54 + 36);
    LODWORD(v70) = 0;
    unsigned int v71 = *(_DWORD *)(v54 + 68);
    int v72 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v43 + 32))(v43, 76, v67, 1, &v68, 2, 0);
    uint64_t v68 = 257;
    unsigned int v69 = 0;
    unint64_t v55 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v43 + 8), (llvm::LLVMContext *)0x20);
    long long v56 = llvm::ConstantInt::get(v55, 65537 * v66, (const llvm::APInt *)1);
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v43 + 16))(v43, &v68, v56);
    *a3 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
  }
  for (uint64_t j = 0; j != -16; j -= 8)
  {
    uint64_t v59 = (char *)&v73 + j * 4;
    if (v80[j] >= 0x41u)
    {
      uint64_t v60 = *((void *)v59 + 6);
      if (v60) {
        MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v59 + 10) >= 0x41u)
    {
      uint64_t v61 = *((void *)v59 + 4);
      if (v61) {
        MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
    }
  }
  return v15;
}

uint64_t sub_1CBA02BCC(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    int v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  for (uint64_t result = *v2; result; uint64_t result = *(void *)(result + 24))
  {
    if ((*(unsigned char *)(result + 3) & 1) == 0) {
      break;
    }
  }
  return result;
}

uint64_t sub_1CBA02C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int **)(a1 + 32);
  if (**(_WORD **)(a1 + 16) != 19 || (v3[8] & 0xFFF00) == 0 && (v3[9] & 0x80000000) != 0)
  {
    uint64_t v4 = v3[1];
    if ((int)v4 < 0) {
      uint64_t v5 = (uint64_t *)(a2 + 16 * (v4 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v5 = (uint64_t *)(a3 + 8 * v4);
    }
    uint64_t v6 = *v5;
    if (v6)
    {
      while ((*(unsigned char *)(v6 + 3) & 1) != 0)
      {
        uint64_t v6 = *(void *)(v6 + 24);
        if (!v6) {
          return 0;
        }
      }
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(v6 + 8);
      if (*(void *)(v9 + 24) != v8) {
        return 1;
      }
      uint64_t result = 1;
      while (1)
      {
        uint64_t v6 = *(void *)(v6 + 24);
        if (!v6) {
          break;
        }
        if ((*(unsigned char *)(v6 + 3) & 1) == 0)
        {
          uint64_t v10 = *(void *)(v6 + 8);
          if (v10 != v9)
          {
            uint64_t v9 = *(void *)(v6 + 8);
            if (*(void *)(v10 + 24) != v8) {
              return result;
            }
          }
        }
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1CBA02CCC(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v398 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 248);
  *(void *)(v5 + 40) = *(void *)(a2 + 24);
  *(void *)(v5 + 48) = a2;
  unsigned int v6 = **(unsigned __int16 **)(a2 + 16);
  if (v6 <= 0x4C)
  {
    switch(**(_WORD **)(a2 + 16))
    {
      case '-':
        uint64_t v37 = *(_DWORD **)(a2 + 32);
        int v38 = v37[1];
        if (v38 < 0
          && (uint64_t v39 = *(void *)(a1 + 272), v40 = v38 & 0x7FFFFFFF, v40 < *(_DWORD *)(v39 + 432)))
        {
          unint64_t v383 = *(void *)(*(void *)(v39 + 424) + 8 * v40);
          uint64_t v372 = 513;
          if (v383 == 513) {
            int v41 = 4;
          }
          else {
            int v41 = 8;
          }
        }
        else
        {
          unint64_t v383 = 0;
          uint64_t v372 = 513;
          int v41 = 8;
        }
        if (*(unsigned char *)(*(void *)(a1 + 256) + 318)) {
          int v41 = 4;
        }
        unsigned int v371 = v41;
        uint64_t v42 = (uint64_t)(v37 + 8);
        uint64_t v43 = (uint64_t)(v37 + 16);
        unsigned int v44 = v37[9];
        unsigned int v45 = v37[17];
        unint64_t v385 = a1;
        uint64_t v386 = (uint64_t)&v371;
        uint64_t v387 = a2;
        unint64_t v388 = &v383;
        uint64_t v389 = (uint64_t)&v372;
        uint64_t v390 = v5;
        char v370 = 0;
        uint64_t v4 = sub_1CBA05A98((uint64_t *)&v385, (uint64_t)(v37 + 8), &v370, 0);
        if (v4) {
          unsigned int v44 = v37[9];
        }
        if (v370) {
          BOOL v46 = *(unsigned char *)(*(void *)(a1 + 256) + 318) != 0;
        }
        else {
          BOOL v46 = 0;
        }
        if (sub_1CBA05A98((uint64_t *)&v385, (uint64_t)(v37 + 16), &v370, v46))
        {
          unsigned int v45 = v37[17];
          uint64_t v4 = 1;
        }
        sub_1CC73C210(v45, *(void *)(a1 + 272), (uint64_t)&v373);
        if (!(_BYTE)v375) {
          goto LABEL_70;
        }
        if (v374 >= 0x41)
        {
          if (v373) {
            MEMORY[0x1D25D9CB0](v373, 0x1000C8000313F17);
          }
LABEL_70:
          uint64_t v47 = *(void *)(a1 + 272);
          uint64_t v48 = v371;
          uint64_t v380 = 0;
          uint64_t v374 = &v380;
          if (sub_1CBA0DCF4((uint64_t)&v373, v47, v44))
          {
            if ((uint64_t)v380 <= v48)
            {
              uint64_t v49 = *(void *)(a1 + 272);
              uint64_t v50 = v371;
              uint64_t v380 = 0;
              uint64_t v374 = &v380;
              if (!sub_1CBA0DCF4((uint64_t)&v373, v49, v45) || (uint64_t)v380 > v50)
              {
                (*(void (**)(void, uint64_t))(**(void **)(a1 + 288) + 32))(*(void *)(a1 + 288), a2);
                llvm::MachineOperand::setReg(v42, v45);
                llvm::MachineOperand::setReg(v43, v44);
                goto LABEL_75;
              }
            }
          }
        }
        return v4;
      case '.':
        if (*(unsigned char *)(*(void *)(a1 + 256) + 318)) {
          return 0;
        }
        uint64_t v128 = *(_DWORD **)(a2 + 32);
        int v129 = v128[1];
        if ((v129 & 0x80000000) == 0) {
          return 0;
        }
        uint64_t v130 = *(void *)(a1 + 272);
        if ((v129 & 0x7FFFFFFFu) >= *(_DWORD *)(v130 + 432)) {
          return 0;
        }
        uint64_t v131 = *(unsigned __int16 *)(a2 + 44);
        uint64_t v132 = *(void *)(*(void *)(v130 + 424) + 8 * (v129 & 0x7FFFFFFF));
        if (v132 != 257 && v132 != 129) {
          return 0;
        }
        uint64_t v133 = v128[9];
        if ((v133 & 0x80000000) != 0) {
          uint64_t v134 = (uint64_t *)(*(void *)(v130 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v134 = (uint64_t *)(*(void *)(v130 + 272) + 8 * v133);
        }
        uint64_t v135 = *v134;
        if ((*(unsigned char *)(v135 + 3) & 1) == 0) {
          uint64_t v135 = *(void *)(v135 + 24);
        }
        uint64_t v136 = *(void *)(v135 + 8);
        if (**(_WORD **)(v136 + 16) != 47) {
          return 0;
        }
        unsigned int v137 = (uint64_t *)((v133 & 0x80000000) != 0
                         ? *(void *)(v130 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8
                         : *(void *)(v130 + 272) + 8 * v133);
        uint64_t v138 = *v137;
        if (!v138) {
          return 0;
        }
        while ((*(unsigned char *)(v138 + 3) & 1) != 0)
        {
          uint64_t v138 = *(void *)(v138 + 24);
          if (!v138) {
            return 0;
          }
        }
        while (1)
        {
          uint64_t v138 = *(void *)(v138 + 24);
          if (!v138) {
            break;
          }
          uint64_t v4 = 0;
          if ((*(unsigned char *)(v138 + 3) & 1) == 0) {
            return v4;
          }
        }
        uint64_t v220 = *(void *)(a1 + 280);
        int v221 = *(_DWORD *)(v220 + 264);
        if (!v221) {
          goto LABEL_323;
        }
        uint64_t v222 = *(void *)(v136 + 24);
        uint64_t v223 = *(void *)(v220 + 248);
        unsigned int v224 = v221 - 1;
        uint64_t v225 = ((v222 >> 4) ^ (v222 >> 9)) & v224;
        uint64_t v226 = *(void *)(v223 + 16 * v225);
        if (v222 == v226) {
          goto LABEL_297;
        }
        int v227 = 1;
        do
        {
          if (v226 == -4096) {
            goto LABEL_312;
          }
          int v228 = v225 + v227++;
          uint64_t v225 = v228 & v224;
          uint64_t v226 = *(void *)(v223 + 16 * v225);
        }
        while (v222 != v226);
LABEL_297:
        long long v229 = *(void **)(v223 + 16 * v225 + 8);
        if (v229)
        {
          int v230 = 0;
          do
          {
            long long v229 = (void *)*v229;
            ++v230;
          }
          while (v229);
        }
        else
        {
LABEL_312:
          int v230 = 0;
        }
        uint64_t v238 = *(void *)(a2 + 24);
        uint64_t v239 = ((v238 >> 4) ^ (v238 >> 9)) & v224;
        uint64_t v240 = *(void *)(v223 + 16 * v239);
        if (v238 == v240)
        {
LABEL_317:
          long long v243 = *(void **)(v223 + 16 * v239 + 8);
          if (v243)
          {
            int v244 = 0;
            do
            {
              long long v243 = (void *)*v243;
              ++v244;
            }
            while (v243);
LABEL_322:
            if (v230 != v244) {
              return 0;
            }
LABEL_323:
            uint64_t v4 = 1;
            LODWORD(v373) = v128[1];
            LODWORD(v374) = 1;
            uint64_t v245 = *(void *)(v136 + 32);
            LODWORD(v385) = *(_DWORD *)(v245 + 36);
            LODWORD(v387) = 0;
            LODWORD(v388) = *(_DWORD *)(v245 + 68);
            LODWORD(v390) = 0;
            LODWORD(v391) = v128[17];
            int v393 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 57, &v373, 1, &v385, 3, v131 | 0x100000000);
            goto LABEL_324;
          }
        }
        else
        {
          int v241 = 1;
          while (v240 != -4096)
          {
            int v242 = v239 + v241++;
            uint64_t v239 = v242 & v224;
            uint64_t v240 = *(void *)(v223 + 16 * v239);
            if (v238 == v240) {
              goto LABEL_317;
            }
          }
        }
        int v244 = 0;
        goto LABEL_322;
      case '/':
      case '0':
      case '1':
        return v4;
      case '2':
        uint64_t v51 = *(_DWORD **)(a2 + 32);
        LODWORD(v380) = v51[4];
        LODWORD(v383) = v51[9];
        LODWORD(v372) = v51[17];
        if (sub_1CBA02460((void *)a1, &v383, (unsigned int *)&v372, a2, (int *)&v380))
        {
          *(void *)(v5 + 40) = *(void *)(a2 + 24);
          *(void *)(v5 + 48) = a2;
          uint64_t v187 = *(llvm::MachineFunction **)(v5 + 8);
          uint64_t v188 = *(void *)(*(void *)(v5 + 16) + 8) + 2400;
          int v189 = *(unsigned __int8 **)(v5 + 32);
          unint64_t v385 = (unint64_t)v189;
          if (v189) {
            llvm::MetadataTracking::track((uint64_t)&v385, v189, 2);
          }
          uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v187, v188, (unsigned __int8 **)&v385, 0);
          if (v385) {
            llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
          }
          uint64_t v191 = *(unint64_t **)(v5 + 48);
          uint64_t v192 = *(void *)(*(void *)(v5 + 40) + 40);
          *((void *)MachineInstr + 3) = v192;
          uint64_t v193 = *(void *)(v192 + 32);
          uint64_t v194 = *((unsigned int *)MachineInstr + 10);
          if (v194)
          {
            uint64_t v231 = *((void *)MachineInstr + 4);
            uint64_t v232 = *(void *)(v193 + 40);
            uint64_t v233 = 32 * v194;
            do
            {
              if (!*(unsigned char *)v231)
              {
                uint64_t v234 = *(unsigned int *)(v231 + 4);
                if ((int)v234 >= 0) {
                  uint64_t v235 = (uint64_t *)(*(void *)(v232 + 272) + 8 * v234);
                }
                else {
                  uint64_t v235 = (uint64_t *)(*(void *)(v232 + 24) + 16 * (v234 & 0x7FFFFFFF) + 8);
                }
                uint64_t v236 = *v235;
                if (*v235)
                {
                  uint64_t v237 = *(void *)(v236 + 16);
                  *(void *)(v236 + 16) = v231;
                  *(void *)(v231 + 16) = v237;
                  if (*(unsigned char *)(v231 + 3))
                  {
                    *(void *)(v231 + 24) = v236;
                  }
                  else
                  {
                    *(void *)(v231 + 24) = 0;
                    uint64_t v235 = (uint64_t *)(v237 + 24);
                  }
                }
                else
                {
                  *(void *)(v231 + 16) = v231;
                  *(void *)(v231 + 24) = 0;
                }
                uint64_t *v235 = v231;
              }
              v231 += 32;
              v233 -= 32;
            }
            while (v233);
          }
          uint64_t v195 = *(void *)(v193 + 728);
          if (v195) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v195 + 24))(v195, MachineInstr);
          }
          unint64_t v196 = *v191 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t MachineInstr = v196 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v191;
          *(void *)(v196 + 8) = MachineInstr;
          *uint64_t v191 = *v191 & 7 | (unint64_t)MachineInstr;
          uint64_t v197 = *(void *)(v5 + 56);
          if (v197) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v197 + 24))(v197, MachineInstr);
          }
          LODWORD(v385) = 18;
          uint64_t v386 = 0;
          LODWORD(v387) = v380;
          llvm::MachineInstr::addOperand(MachineInstr, v187, (const llvm::MachineOperand *)&v385);
          uint64_t v386 = 0;
          uint64_t v387 = 0;
          LODWORD(v385) = 0;
          HIDWORD(v385) = v383;
          unint64_t v388 = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v187, (const llvm::MachineOperand *)&v385);
          uint64_t v386 = 0;
          uint64_t v387 = 0;
          LODWORD(v385) = 0;
          HIDWORD(v385) = v372;
          unint64_t v388 = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v187, (const llvm::MachineOperand *)&v385);
          uint64_t v70 = (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 96);
          unsigned int v69 = MachineInstr;
          unsigned int v71 = v187;
          goto LABEL_260;
        }
        sub_1CC73C210(v372, *(void *)(a1 + 272), (uint64_t)&v385);
        if (!(_BYTE)v387) {
          return 0;
        }
        if (v386 < 0x41)
        {
          uint64_t v52 = (uint64_t)(v385 << -(char)v386) >> -(char)v386;
          BOOL v53 = v380 == 40 || v380 == 36;
          if (v53 && v52 == 256)
          {
            if (v380 == 36) {
              int v250 = 37;
            }
            else {
              int v250 = 41;
            }
            int v251 = v383;
            if ((v383 & 0x80000000) != 0
              && (uint64_t v252 = *(void *)(a1 + 272), (v383 & 0x7FFFFFFF) < *(_DWORD *)(v252 + 432)))
            {
              uint64_t v253 = *(unsigned __int8 **)(*(void *)(v252 + 424) + 8 * (v383 & 0x7FFFFFFF));
            }
            else
            {
              uint64_t v253 = 0;
            }
            unint64_t v385 = (unint64_t)v253;
            LODWORD(v386) = 0;
            uint64_t v65 = sub_1CC7362A8(v5, &v385, 0xFFuLL);
            LODWORD(v385) = v250;
            LODWORD(v387) = 2;
            LODWORD(v388) = v251;
          }
          else
          {
            uint64_t v4 = 0;
            if (v380 != 38 || v52 != -1) {
              return v4;
            }
            int v54 = v383;
            if ((v383 & 0x80000000) != 0 && (uint64_t v55 = *(void *)(a1 + 272), (v383 & 0x7FFFFFFF) < *(_DWORD *)(v55 + 432))) {
              unint64_t v56 = *(void *)(*(void *)(v55 + 424) + 8 * (v383 & 0x7FFFFFFF));
            }
            else {
              unint64_t v56 = 0;
            }
            uint64_t v373 = v56;
            LODWORD(v374) = 0;
            uint64_t v57 = (llvm::LLVMContext *)(unsigned __int16)(v56 >> 3);
            uint64_t v58 = (llvm::LLVMContext *)(unsigned __int16)(v56 >> 19);
            if ((v56 & 2) == 0) {
              uint64_t v58 = (llvm::LLVMContext *)(v56 >> 19);
            }
            if ((v56 & 4) != 0) {
              uint64_t v57 = v58;
            }
            if (v56) {
              uint64_t v59 = (llvm::LLVMContext *)(v56 >> 3);
            }
            else {
              uint64_t v59 = v57;
            }
            uint64_t v60 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v5 + 8), v59);
            uint64_t v62 = *(llvm::ConstantInt **)v60;
            unsigned int v63 = *(_DWORD *)(v60 + 8);
            LODWORD(v386) = v63 >> 8;
            if (v63 >> 8 >= 0x41) {
              operator new[]();
            }
            unint64_t v385 = 0;
            uint64_t v64 = llvm::ConstantInt::get(v62, (llvm::LLVMContext *)&v385, v61);
            if (v386 >= 0x41 && v385) {
              MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
            }
            uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v5 + 16))(v5, &v373, v64);
            LODWORD(v385) = 39;
            LODWORD(v387) = 2;
            LODWORD(v388) = v54;
          }
          LODWORD(v390) = 0;
          uint64_t v391 = v65;
          uint64_t v392 = v66;
          int v393 = 1;
          uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, unint64_t *, uint64_t, void))(*(void *)v5 + 32))(v5, 50, 0, 0, &v385, 3, 0);
          unsigned int v69 = v68;
          uint64_t v70 = (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 96);
          unsigned int v71 = (llvm::MachineFunction *)v67;
LABEL_260:
          llvm::MachineInstr::addOperand(v69, v71, v70);
          goto LABEL_28;
        }
        goto LABEL_343;
      case '3':
        *(void *)(v5 + 40) = *(void *)(a2 + 24);
        *(void *)(v5 + 48) = a2;
        uint64_t v8 = *(_DWORD **)(a2 + 32);
        LODWORD(v380) = v8[12];
        int v9 = v8[1];
        LODWORD(v383) = v8[17];
        LODWORD(v372) = v8[25];
        int v10 = v8[33];
        int v11 = v8[41];
        if (sub_1CBA02460((void *)a1, &v383, (unsigned int *)&v372, a2, (int *)&v380))
        {
          LODWORD(v373) = v9;
          LODWORD(v374) = 1;
          LODWORD(v385) = v380;
          LODWORD(v387) = 2;
          LODWORD(v388) = v383;
          LODWORD(v390) = 0;
          LODWORD(v391) = v372;
          int v393 = 0;
        }
        else
        {
          sub_1CC73C210(v372, *(void *)(a1 + 272), (uint64_t)&v385);
          if (!(_BYTE)v387) {
            return 0;
          }
          if (v386 >= 0x41)
          {
LABEL_343:
            if (v385) {
              MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
            }
            return 0;
          }
          uint64_t v12 = (uint64_t)(v385 << -(char)v386) >> -(char)v386;
          BOOL v13 = v380 == 40 || v380 == 36;
          if (v13 && v12 == 256)
          {
            if (v380 == 36) {
              int v246 = 37;
            }
            else {
              int v246 = 41;
            }
            int v247 = v383;
            if ((v383 & 0x80000000) != 0
              && (uint64_t v248 = *(void *)(a1 + 272), (v383 & 0x7FFFFFFF) < *(_DWORD *)(v248 + 432)))
            {
              int v249 = *(unsigned __int8 **)(*(void *)(v248 + 424) + 8 * (v383 & 0x7FFFFFFF));
            }
            else
            {
              int v249 = 0;
            }
            unint64_t v385 = (unint64_t)v249;
            LODWORD(v386) = 0;
            uint64_t v23 = sub_1CC7362A8(v5, &v385, 0xFFuLL);
            LODWORD(v373) = v9;
            LODWORD(v374) = 1;
            LODWORD(v385) = v246;
            LODWORD(v387) = 2;
            LODWORD(v388) = v247;
          }
          else
          {
            uint64_t v4 = 0;
            if (v380 != 38 || v12 != -1) {
              return v4;
            }
            int v14 = v383;
            if ((v383 & 0x80000000) != 0 && (uint64_t v15 = *(void *)(a1 + 272), (v383 & 0x7FFFFFFF) < *(_DWORD *)(v15 + 432))) {
              unint64_t v16 = *(void *)(*(void *)(v15 + 424) + 8 * (v383 & 0x7FFFFFFF));
            }
            else {
              unint64_t v16 = 0;
            }
            uint64_t v373 = v16;
            LODWORD(v374) = 0;
            if (v16)
            {
              unint64_t v17 = (v16 >> 3);
            }
            else if ((v16 & 4) != 0)
            {
              if ((v16 & 2) != 0) {
                unint64_t v17 = (unsigned __int16)(v16 >> 19);
              }
              else {
                unint64_t v17 = (v16 >> 19);
              }
            }
            else
            {
              unint64_t v17 = (unsigned __int16)(v16 >> 3);
            }
            uint64_t v18 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v5 + 8), (llvm::LLVMContext *)v17);
            uint64_t v20 = *(llvm::ConstantInt **)v18;
            unsigned int v21 = *(_DWORD *)(v18 + 8);
            LODWORD(v386) = v21 >> 8;
            if (v21 >> 8 >= 0x41) {
              operator new[]();
            }
            unint64_t v385 = 0;
            unint64_t v22 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v385, v19);
            if (v386 >= 0x41 && v385) {
              MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
            }
            uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v5 + 16))(v5, &v373, v22);
            LODWORD(v373) = v9;
            LODWORD(v374) = 1;
            LODWORD(v385) = 39;
            LODWORD(v387) = 2;
            LODWORD(v388) = v14;
          }
          LODWORD(v390) = 0;
          uint64_t v391 = v23;
          uint64_t v392 = v24;
          int v393 = 1;
        }
        int v394 = v10;
        int v395 = 0;
        int v396 = v11;
        int v397 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v5 + 32))(v5, 51, &v373, 1, &v385, 5, 0);
LABEL_28:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        return 1;
      default:
        if (v6 != 66) {
          return v4;
        }
        uint64_t v25 = *(void *)(a2 + 32);
        uint64_t v26 = (const char *)*(unsigned int *)(v25 + 36);
        int v27 = (const char *)*(unsigned int *)(v25 + 68);
        uint64_t v28 = *(void *)(a1 + 264);
        sub_1CC6DEE8C(v28, v26, (uint64_t)&v385);
        sub_1CC6DEE8C(v28, v27, (uint64_t)&v373);
        int v384 = v386;
        if (v386 > 0x40) {
          operator new[]();
        }
        unint64_t v383 = v373 | v385;
        LODWORD(v381) = v386;
        uint64_t v380 = (void *)(v373 | v385);
        int v384 = 0;
        if (v386) {
          BOOL v29 = (v373 | v385) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v386;
        }
        else {
          BOOL v29 = 1;
        }
        if (v376 >= 0x41 && v375) {
          MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
        }
        if (v374 >= 0x41 && v373) {
          MEMORY[0x1D25D9CB0](v373, 0x1000C8000313F17);
        }
        if (v388 >= 0x41 && v387) {
          MEMORY[0x1D25D9CB0](v387, 0x1000C8000313F17);
        }
        if (v386 >= 0x41 && v385) {
          MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
        }
        if (!v29) {
          return 0;
        }
        sub_1CC73C210(v27, *(void *)(a1 + 272), (uint64_t)&v385);
        if (!(_BYTE)v387) {
          goto LABEL_39;
        }
        if (v386 >= 0x41)
        {
          if (v385) {
            MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
          }
LABEL_39:
          uint64_t v30 = *(void *)(a1 + 272);
          if ((v26 & 0x80000000) != 0) {
            char v31 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
          }
          else {
            char v31 = (uint64_t *)(*(void *)(v30 + 272) + 8 * (void)v26);
          }
          uint64_t v32 = *v31;
          if (v32)
          {
            if (*(unsigned char *)(v32 + 3) & 1) != 0 || (uint64_t v32 = *(void *)(v32 + 24)) != 0 && (*(unsigned char *)(v32 + 3))
            {
              uint64_t v33 = *(void *)(v32 + 8);
              if (v33)
              {
                if (**(_WORD **)(v33 + 16) == 127 && *(_DWORD *)(v33 + 40) == 3)
                {
                  sub_1CC73C210(*(_DWORD *)(*(void *)(v33 + 32) + 68), v30, (uint64_t)&v385);
                  if ((_BYTE)v387)
                  {
                    if (v386 >= 0x41)
                    {
                      if (v385) {
                        MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
                      }
                    }
                    else
                    {
                      uint64_t v34 = (uint64_t)(v385 << -(char)v386) >> -(char)v386;
                      BOOL v35 = v34 < 5;
                      if (v34 >= 5) {
                        int v36 = (int)v27;
                      }
                      else {
                        int v36 = (int)v26;
                      }
                      if (v35) {
                        LODWORD(v26) = v27;
                      }
                      LODWORD(v27) = v36;
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v4 = 1;
        LODWORD(v373) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        LODWORD(v374) = 1;
        LODWORD(v385) = v26;
        LODWORD(v387) = 0;
        LODWORD(v388) = v27;
        LODWORD(v390) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v5 + 32))(v5, 45, &v373, 1, &v385, 2, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        return v4;
    }
  }
  if (v6 != 166)
  {
    if (v6 == 77)
    {
      int v72 = *(_DWORD *)(a2 + 40);
      if ((v72 - 6) >= 0xFFFFFFFD)
      {
        int v73 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        if (v73 < 0
          && (v74 = *(void *)(a1 + 272), uint64_t v75 = v73 & 0x7FFFFFFF, v75 < *(_DWORD *)(v74 + 432)))
        {
          unsigned int v76 = *(unsigned __int8 **)(*(void *)(v74 + 424) + 8 * v75);
        }
        else
        {
          unsigned int v76 = 0;
        }
        unint64_t v385 = (unint64_t)v76;
        int v78 = sub_1CB8F1DC4(&v385);
        if (v77 == 1) {
        if (v78 == 16)
        }
        {
          char v79 = 0;
          unint64_t v368 = (v72 - 1);
          unint64_t v80 = 1;
LABEL_113:
          char v358 = v79;
          uint64_t v81 = *(void *)(a1 + 272);
          uint64_t v82 = 32 * v80;
          do
          {
            uint64_t v363 = *(llvm::MachineInstr **)(a2 + 32);
            uint64_t v83 = (char *)v363 + v82;
            sub_1CC73C210(*(_DWORD *)((char *)v363 + v82 + 4), v81, (uint64_t)&v385);
            if ((_BYTE)v387)
            {
              if (v386 > 0x40)
              {
                if (v385) {
                  MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
                }
                __int16 v98 = 0;
                __int16 v99 = 0;
                uint64_t v84 = 0;
              }
              else
              {
                __int16 v98 = ((uint64_t)(v385 << -(char)v386) >> -(char)v386) & 0xFF00;
                __int16 v99 = ((uint64_t)(v385 << -(char)v386) >> -(char)v386);
                uint64_t v84 = 1;
              }
              unsigned __int16 v85 = v99 | v98;
            }
            else
            {
              uint64_t v84 = 0;
              unsigned __int16 v85 = 0;
            }
            sub_1CC73C210(*((_DWORD *)v83 + 9), *(void *)(a1 + 272), (uint64_t)&v385);
            if ((_BYTE)v387)
            {
              if (v386 > 0x40)
              {
                if (v385) {
                  MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
                }
                LOWORD(v100) = 0;
                __int16 v101 = 0;
                uint64_t v86 = 0;
              }
              else
              {
                unint64_t v100 = ((uint64_t)(v385 << -(char)v386) >> -(char)v386) & 0xFFFFFFFFFFFFFF00;
                __int16 v101 = ((uint64_t)(v385 << -(char)v386) >> -(char)v386);
                uint64_t v86 = 1;
              }
              unsigned __int16 v87 = v101 | v100;
            }
            else
            {
              uint64_t v86 = 0;
              unsigned __int16 v87 = 0;
            }
            uint64_t v88 = *((unsigned int *)v83 + 1);
            uint64_t v81 = *(void *)(a1 + 272);
            if ((v88 & 0x80000000) != 0) {
              uint64_t v89 = (uint64_t *)(*(void *)(v81 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v89 = (uint64_t *)(*(void *)(v81 + 272) + 8 * v88);
            }
            uint64_t v90 = *v89;
            if ((*(unsigned char *)(v90 + 3) & 1) == 0) {
              uint64_t v90 = *(void *)(v90 + 24);
            }
            uint64_t v91 = *(void *)(v90 + 8);
            if (**(_WORD **)(v91 + 16) == 121) {
              uint64_t v92 = *(void *)(*(void *)(v91 + 32) + 48);
            }
            else {
              uint64_t v92 = 0;
            }
            uint64_t v93 = *((unsigned int *)v83 + 9);
            if ((v93 & 0x80000000) != 0) {
              uint64_t v94 = (uint64_t *)(*(void *)(v81 + 24) + 16 * (v93 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v94 = (uint64_t *)(*(void *)(v81 + 272) + 8 * v93);
            }
            uint64_t v95 = *v94;
            if ((*(unsigned char *)(v95 + 3) & 1) == 0) {
              uint64_t v95 = *(void *)(v95 + 24);
            }
            uint64_t v96 = *(void *)(v95 + 8);
            if (**(_WORD **)(v96 + 16) == 121) {
              uint64_t v97 = *(void *)(*(void *)(v96 + 32) + 48);
            }
            else {
              uint64_t v97 = 0;
            }
            if ((v84 || v92) && (v86 || v97))
            {
              if (v84)
              {
                LODWORD(v102) = v85;
              }
              else
              {
                unsigned __int16 v182 = v87;
                uint64_t v184 = *(void **)(v92 + 32);
                uint64_t v183 = (llvm::detail::DoubleAPFloat *)(v92 + 32);
                if (v184 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::bitcastToAPInt(v183, (llvm::APInt *)&v385);
                }
                else {
                  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v183, (uint64_t)&v385);
                }
                if (v386 > 0x40)
                {
                  uint64_t v102 = *(void *)v385;
                  MEMORY[0x1D25D9CB0]();
                  unsigned __int16 v87 = v182;
                }
                else
                {
                  unsigned __int16 v87 = v182;
                  LODWORD(v102) = v385;
                }
              }
              if (v86)
              {
                LODWORD(v103) = v87;
              }
              else
              {
                uint64_t v186 = *(void **)(v97 + 32);
                uint64_t v185 = (llvm::detail::DoubleAPFloat *)(v97 + 32);
                if (v186 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::bitcastToAPInt(v185, (llvm::APInt *)&v385);
                }
                else {
                  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v185, (uint64_t)&v385);
                }
                if (v386 > 0x40)
                {
                  uint64_t v103 = *(void *)v385;
                  MEMORY[0x1D25D9CB0]();
                }
                else
                {
                  LODWORD(v103) = v385;
                }
              }
              unint64_t v385 = 257;
              LODWORD(v386) = 0;
              uint64_t v104 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v5 + 8), (llvm::LLVMContext *)0x20);
              unint64_t v105 = llvm::ConstantInt::get(v104, v102 | (v103 << 16), (const llvm::APInt *)1);
              uint64_t v373 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v5 + 16))(v5, &v385, v105);
              uint64_t v374 = v106;
              LODWORD(v375) = 1;
              unint64_t v385 = (unint64_t)&v387;
              uint64_t v387 = 129;
              LODWORD(v388) = 0;
              uint64_t v389 = 129;
              LODWORD(v390) = 0;
              uint64_t v386 = 0x800000002;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v5 + 32))(v5, 74, &v387, 2, &v373, 1, 0);
              uint64_t v108 = v107;
              if ((uint64_t *)v385 != &v387) {
                free((void *)v385);
              }
              llvm::MachineOperand::setReg((uint64_t)v363 + v82, *(_DWORD *)(*(void *)(v108 + 32) + 4));
              llvm::MachineOperand::setReg((uint64_t)v363 + v82 + 32, *(_DWORD *)(*(void *)(v108 + 32) + 36));
              v80 += 2;
              char v79 = 1;
              if (v80 < v368) {
                goto LABEL_113;
              }
              goto LABEL_75;
            }
            v80 += 2;
            v82 += 64;
          }
          while (v80 < v368);
          if ((v358 & 1) == 0)
          {
            int v158 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
            if (v158 < 0 && (uint64_t v159 = v158 & 0x7FFFFFFF, v159 < *(_DWORD *)(v81 + 432))) {
              char v160 = *(void **)(*(void *)(v81 + 424) + 8 * v159);
            }
            else {
              char v160 = 0;
            }
            uint64_t v380 = v160;
            uint64_t v162 = sub_1CB8F1DC4((unint64_t *)&v380);
            if (v161 == 1) {
            if (v162 != 16)
            }
              return 0;
            char v163 = 0;
            unint64_t v164 = 1;
            while (2)
            {
              uint64_t v165 = *(void *)(a2 + 32);
              uint64_t v166 = *(void *)(a1 + 272);
              while (1)
              {
                uint64_t v167 = v165 + 32 * v164;
                unsigned int v170 = *(_DWORD *)(v167 + 4);
                unint64_t v169 = (unsigned int *)(v167 + 4);
                uint64_t v168 = v170;
                uint64_t v171 = (uint64_t *)((v170 & 0x80000000) != 0
                                 ? *(void *)(v166 + 24) + 16 * (v168 & 0x7FFFFFFF) + 8
                                 : *(void *)(v166 + 272) + 8 * v168);
                uint64_t v172 = *v171;
                if (v172
                  && ((*(unsigned char *)(v172 + 3) & 1) != 0
                   || (uint64_t v172 = *(void *)(v172 + 24)) != 0 && (*(unsigned char *)(v172 + 3) & 1) != 0))
                {
                  uint64_t v173 = *(void *)(v172 + 8);
                }
                else
                {
                  uint64_t v173 = 0;
                }
                uint64_t v174 = v165 + 32 * (v164 + 1);
                unsigned int v177 = *(_DWORD *)(v174 + 4);
                int8x8_t v176 = (unsigned int *)(v174 + 4);
                uint64_t v175 = v177;
                unint64_t v178 = (uint64_t *)((v177 & 0x80000000) != 0
                                 ? *(void *)(v166 + 24) + 16 * (v175 & 0x7FFFFFFF) + 8
                                 : *(void *)(v166 + 272) + 8 * v175);
                uint64_t v179 = *v178;
                if (v179
                  && ((*(unsigned char *)(v179 + 3) & 1) != 0
                   || (uint64_t v179 = *(void *)(v179 + 24)) != 0 && (*(unsigned char *)(v179 + 3) & 1) != 0))
                {
                  uint64_t v180 = *(void *)(v179 + 8);
                }
                else
                {
                  uint64_t v180 = 0;
                }
                if (**(_WORD **)(v173 + 16) == 318 && **(_WORD **)(v180 + 16) == 318)
                {
                  int v210 = (uint64_t *)((v168 & 0x80000000) != 0
                                   ? *(void *)(v166 + 24) + 16 * (v168 & 0x7FFFFFFF) + 8
                                   : *(void *)(v166 + 272) + 8 * v168);
                  uint64_t v211 = *v210;
                  if (v211)
                  {
                    while ((*(unsigned char *)(v211 + 3) & 1) != 0)
                    {
                      uint64_t v211 = *(void *)(v211 + 24);
                      if (!v211) {
                        goto LABEL_224;
                      }
                    }
                    while (1)
                    {
                      uint64_t v211 = *(void *)(v211 + 24);
                      if (!v211) {
                        break;
                      }
                      if ((*(unsigned char *)(v211 + 3) & 1) == 0) {
                        goto LABEL_224;
                      }
                    }
                    int v298 = (uint64_t *)((v175 & 0x80000000) != 0
                                     ? *(void *)(v166 + 24) + 16 * (v175 & 0x7FFFFFFF) + 8
                                     : *(void *)(v166 + 272) + 8 * v175);
                    uint64_t v299 = *v298;
                    if (v299)
                    {
                      while ((*(unsigned char *)(v299 + 3) & 1) != 0)
                      {
                        uint64_t v299 = *(void *)(v299 + 24);
                        if (!v299) {
                          goto LABEL_224;
                        }
                      }
                      while (1)
                      {
                        uint64_t v299 = *(void *)(v299 + 24);
                        if (!v299) {
                          break;
                        }
                        if ((*(unsigned char *)(v299 + 3) & 1) == 0) {
                          goto LABEL_224;
                        }
                      }
                      uint64_t v353 = *(void *)(*(void *)(v173 + 32) + 48);
                      if (*(_DWORD *)(*(void *)(v180 + 32) + 48)
                         - *(void *)(*(void *)(v173 + 32) + 48) == 2)
                      {
                        uint64_t v300 = *(void *)(*(void *)(v173 + 32) + 48);
                        BOOL v301 = ((v300 + 3) & 0x1FFFFFFFCLL) == v300;
                      }
                      else
                      {
                        BOOL v301 = 0;
                      }
                      if (v301) {
                        break;
                      }
                    }
                  }
                }
LABEL_224:
                v164 += 2;
                if (v164 >= v368)
                {
                  if ((v163 & 1) == 0) {
                    return 0;
                  }
                  goto LABEL_75;
                }
              }
              unsigned int v360 = *(llvm::MachineFunction **)(v5 + 8);
              uint64_t v302 = *(void *)(*(void *)(v5 + 16) + 8);
              unint64_t v303 = *(unsigned __int8 **)(v5 + 32);
              unint64_t v385 = (unint64_t)v303;
              if (v303) {
                llvm::MetadataTracking::track((uint64_t)&v385, v303, 2);
              }
              uint64_t v365 = llvm::MachineFunction::CreateMachineInstr(v360, v302 + 15264, (unsigned __int8 **)&v385, 0);
              if (v385) {
                llvm::MetadataTracking::untrack((uint64_t)&v385, (unsigned __int8 *)v385);
              }
              int v304 = *(unint64_t **)(v5 + 48);
              uint64_t v305 = *(void *)(*(void *)(v5 + 40) + 40);
              *((void *)v365 + 3) = v305;
              uint64_t v306 = *(void *)(v305 + 32);
              uint64_t v307 = *((unsigned int *)v365 + 10);
              if (v307)
              {
                uint64_t v339 = *((void *)v365 + 4);
                uint64_t v340 = *(void *)(v306 + 40);
                uint64_t v341 = 32 * v307;
                do
                {
                  if (!*(unsigned char *)v339)
                  {
                    uint64_t v342 = *(unsigned int *)(v339 + 4);
                    if ((int)v342 >= 0) {
                      int v343 = (uint64_t *)(*(void *)(v340 + 272) + 8 * v342);
                    }
                    else {
                      int v343 = (uint64_t *)(*(void *)(v340 + 24) + 16 * (v342 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v344 = *v343;
                    if (*v343)
                    {
                      uint64_t v345 = *(void *)(v344 + 16);
                      *(void *)(v344 + 16) = v339;
                      *(void *)(v339 + 16) = v345;
                      if (*(unsigned char *)(v339 + 3))
                      {
                        *(void *)(v339 + 24) = v344;
                      }
                      else
                      {
                        *(void *)(v339 + 24) = 0;
                        int v343 = (uint64_t *)(v345 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v339 + 16) = v339;
                      *(void *)(v339 + 24) = 0;
                    }
                    uint64_t *v343 = v339;
                  }
                  v339 += 32;
                  v341 -= 32;
                }
                while (v341);
              }
              uint64_t v308 = *(void *)(v306 + 728);
              if (v308) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v308 + 24))(v308, v365);
              }
              unint64_t v309 = *v304 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v365 = v309 | *(void *)v365 & 7;
              *((void *)v365 + 1) = v304;
              *(void *)(v309 + 8) = v365;
              *int v304 = *v304 & 7 | (unint64_t)v365;
              uint64_t v310 = *(void *)(v5 + 56);
              if (v310) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v310 + 24))(v310, v365);
              }
              uint64_t v311 = *(void *)(a1 + 272);
              unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v311, "", 0);
              unsigned int v348 = IncompleteVirtualRegister;
              uint64_t v346 = IncompleteVirtualRegister;
              unint64_t v313 = IncompleteVirtualRegister & 0x7FFFFFFF;
              *(void *)(*(void *)(v311 + 24) + 16 * v313) = 4;
              uint64_t v314 = v311;
              unint64_t v315 = *(unsigned int *)(v311 + 432);
              if (v313 >= v315)
              {
                int v347 = (void *)(v314 + 424);
                unint64_t v349 = v313 + 1;
                uint64_t v351 = *(void *)(v314 + 440);
                uint64_t v357 = v314;
                if (v313 >= *(unsigned int *)(v314 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v316 = v315;
                if (v349 != v315)
                {
                  unint64_t v317 = (void *)(*v347 + 8 * v315);
                  uint64_t v318 = ~(unint64_t)(IncompleteVirtualRegister & 0x7FFFFFFF) + v315;
                  do
                    *v317++ = v351;
                  while (!__CFADD__(v318++, 1));
                  int v316 = *(_DWORD *)(v357 + 432);
                }
                int v320 = v316 + v349 - v315;
                unint64_t v313 = IncompleteVirtualRegister & 0x7FFFFFFF;
                uint64_t v314 = v357;
                *(_DWORD *)(v357 + 432) = v320;
              }
              *(void *)(*(void *)(v314 + 424) + 8 * v313) = 257;
              uint64_t v321 = *(void *)(v314 + 8);
              if (v321) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v321 + 24))(v321, v346);
              }
              uint64_t v386 = 0;
              uint64_t v387 = 0;
              unint64_t v388 = 0;
              LODWORD(v385) = 0x1000000;
              HIDWORD(v385) = v348;
              llvm::MachineInstr::addOperand(v365, v360, (const llvm::MachineOperand *)&v385);
              LODWORD(v385) = 1;
              uint64_t v386 = 0;
              uint64_t v387 = v353;
              llvm::MachineInstr::addOperand(v365, v360, (const llvm::MachineOperand *)&v385);
              uint64_t v373 = (uint64_t)v360;
              uint64_t v374 = (void **)v365;
              LODWORD(v375) = 1;
              unint64_t v385 = (unint64_t)&v387;
              uint64_t v387 = 129;
              LODWORD(v388) = 0;
              uint64_t v389 = 129;
              LODWORD(v390) = 0;
              uint64_t v386 = 0x800000002;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 74);
              uint64_t v361 = v322;
              if ((uint64_t *)v385 != &v387) {
                free((void *)v385);
              }
              uint64_t v323 = *v169;
              unsigned int v366 = *(_DWORD *)(*((void *)v361 + 4) + 4);
              uint64_t v324 = *(void **)(a1 + 272);
              uint64_t v355 = (*(uint64_t (**)(void))(**(void **)(*v324 + 16) + 176))(*(void *)(*v324 + 16));
              if ((v323 & 0x80000000) != 0) {
                char v325 = (uint64_t *)(v324[3] + 16 * (v323 & 0x7FFFFFFF) + 8);
              }
              else {
                char v325 = (uint64_t *)(v324[34] + 8 * v323);
              }
              uint64_t v326 = *v325;
              if (*v325)
              {
                do
                {
                  uint64_t v327 = *(void *)(v326 + 24);
                  if (v366 - 1 <= 0x3FFFFFFE) {
                    llvm::MachineOperand::substPhysReg((unsigned int *)v326, v366, v355);
                  }
                  else {
                    llvm::MachineOperand::setReg(v326, v366);
                  }
                  uint64_t v326 = v327;
                }
                while (v327);
              }
              uint64_t v328 = *(void **)(a1 + 272);
              uint64_t v329 = v328[3];
              uint64_t v330 = *(void *)(v329 + 16 * (v323 & 0x7FFFFFFF));
              if ((v330 & 4) == 0)
              {
                unint64_t v331 = v330 & 0xFFFFFFFFFFFFFFF8;
                if (v331) {
                  *(void *)(v329 + 16 * (v366 & 0x7FFFFFFF)) = v331;
                }
              }
              uint64_t v332 = *v176;
              unsigned int v367 = *(_DWORD *)(*((void *)v361 + 4) + 36);
              uint64_t v362 = (llvm::MachineFunction *)(*(uint64_t (**)(void))(**(void **)(*v328 + 16) + 176))(*(void *)(*v328 + 16));
              if ((v332 & 0x80000000) != 0) {
                int v333 = (uint64_t *)(v328[3] + 16 * (v332 & 0x7FFFFFFF) + 8);
              }
              else {
                int v333 = (uint64_t *)(v328[34] + 8 * v332);
              }
              uint64_t v334 = *v333;
              if (*v333)
              {
                do
                {
                  uint64_t v335 = *(void *)(v334 + 24);
                  if (v367 - 1 <= 0x3FFFFFFE) {
                    llvm::MachineOperand::substPhysReg((unsigned int *)v334, v367, (uint64_t)v362);
                  }
                  else {
                    llvm::MachineOperand::setReg(v334, v367);
                  }
                  uint64_t v334 = v335;
                }
                while (v335);
              }
              uint64_t v336 = *(void *)(*(void *)(a1 + 272) + 24);
              uint64_t v337 = *(void *)(v336 + 16 * (v332 & 0x7FFFFFFF));
              if ((v337 & 4) == 0)
              {
                unint64_t v338 = v337 & 0xFFFFFFFFFFFFFFF8;
                if (v338) {
                  *(void *)(v336 + 16 * (v367 & 0x7FFFFFFF)) = v338;
                }
              }
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v173);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v180);
              v164 += 2;
              char v163 = 1;
              if (v164 < v368) {
                continue;
              }
              break;
            }
          }
LABEL_75:
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 288) + 40))(*(void *)(a1 + 288), a2);
          return 1;
        }
      }
    }
    else
    {
      if (v6 != 127) {
        return v4;
      }
      uint64_t v109 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
      uint64_t v110 = *(void *)(a1 + 272);
      if ((v109 & 0x80000000) != 0 && (v109 & 0x7FFFFFFF) < *(_DWORD *)(v110 + 432)) {
        unint64_t v111 = *(void *)(*(void *)(v110 + 424) + 8 * (v109 & 0x7FFFFFFF));
      }
      else {
        unint64_t v111 = 0;
      }
      if (!*(unsigned char *)(*(void *)(a1 + 256) + 318) && (v111 == 257 || v111 == 129))
      {
        uint64_t v112 = (uint64_t *)((v109 & 0x80000000) != 0
                         ? *(void *)(v110 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8
                         : *(void *)(v110 + 272) + 8 * v109);
        uint64_t v113 = *v112;
        if (v113)
        {
          if ((*(unsigned char *)(v113 + 3) & 1) != 0
            || (uint64_t v113 = *(void *)(v113 + 24)) != 0 && (*(unsigned char *)(v113 + 3) & 1) != 0)
          {
            uint64_t v114 = *(void *)(v113 + 8);
            if (v114)
            {
              if (**(_WORD **)(v114 + 16) == 127 && *(_DWORD *)(v114 + 40) == 3)
              {
                uint64_t v115 = *(void *)(v114 + 32);
                int v116 = *(_DWORD *)(v115 + 36);
                sub_1CC73C210(*(_DWORD *)(v115 + 68), v110, (uint64_t)&v385);
                if ((_BYTE)v387)
                {
                  if (v386 < 0x41)
                  {
                    uint64_t v117 = (uint64_t)(v385 << -(char)v386) >> -(char)v386;
                    if ((unint64_t)(v117 - 5) <= 3)
                    {
                      uint64_t v373 = v111;
                      LODWORD(v374) = 0;
                      LODWORD(v385) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
                      LODWORD(v387) = 0;
                      uint64_t v380 = (void *)v111;
                      LODWORD(v381) = 0;
                      unint64_t v198 = v117 - 4;
                      unsigned int v199 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v5 + 8), (llvm::LLVMContext *)(v111 >> 3));
                      unint64_t v200 = llvm::ConstantInt::get(v199, v198, (const llvm::APInt *)1);
                      unint64_t v388 = (unint64_t *)(*(uint64_t (**)(uint64_t, void **, void *))(*(void *)v5 + 16))(v5, &v380, v200);
                      uint64_t v389 = (uint64_t)v201;
                      LODWORD(v390) = 1;
                      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 127, &v373, 1, &v385, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                      LODWORD(v380) = v109;
                      LODWORD(v381) = 1;
                      LODWORD(v385) = *(_DWORD *)(*(void *)(v202 + 32) + 4);
                      LODWORD(v387) = 0;
                      unint64_t v383 = v111;
                      int v384 = 0;
                      uint64_t v203 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v5 + 8), (llvm::LLVMContext *)(v111 >> 3));
                      uint64_t v205 = *(llvm::ConstantInt **)v203;
                      unsigned int v206 = *(_DWORD *)(v203 + 8);
                      LODWORD(v374) = v206 >> 8;
                      if (v206 >> 8 > 0x40) {
                        operator new[]();
                      }
                      if (v206 <= 0xFF) {
                        LOBYTE(v207) = 0;
                      }
                      else {
                        unint64_t v207 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v206) + 63);
                      }
                      uint64_t v373 = v207 & 4;
                      int v208 = llvm::ConstantInt::get(v205, (llvm::LLVMContext *)&v373, v204);
                      if (v374 >= 0x41 && v373) {
                        MEMORY[0x1D25D9CB0](v373, 0x1000C8000313F17);
                      }
                      unint64_t v388 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v5 + 16))(v5, &v383, v208);
                      uint64_t v389 = (uint64_t)v209;
                      LODWORD(v390) = 1;
                      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 127, &v380, 1, &v385, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                      return 1;
                    }
                    else
                    {
                      uint64_t v4 = 0;
                      if (v117 == 16 && v111 == 257)
                      {
                        uint64_t v373 = 129;
                        LODWORD(v374) = 0;
                        uint64_t v118 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v5 + 8), (llvm::LLVMContext *)0x10);
                        uint64_t v120 = *(llvm::ConstantInt **)v118;
                        unsigned int v121 = *(_DWORD *)(v118 + 8);
                        LODWORD(v386) = v121 >> 8;
                        if (v121 >> 8 >= 0x41) {
                          operator new[]();
                        }
                        unint64_t v385 = 0;
                        uint64_t v122 = llvm::ConstantInt::get(v120, (llvm::LLVMContext *)&v385, v119);
                        if (v386 >= 0x41 && v385) {
                          MEMORY[0x1D25D9CB0](v385, 0x1000C8000313F17);
                        }
                        uint64_t v123 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v5 + 16))(v5, &v373, v122);
                        uint64_t v125 = v124;
                        uint64_t v373 = 129;
                        LODWORD(v374) = 0;
                        LODWORD(v385) = v116;
                        LODWORD(v387) = 0;
                        uint64_t v4 = 1;
                        uint64_t v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v5 + 32))(v5, 119, &v373, 1, &v385, 1, 0);
                        LODWORD(v373) = v109;
                        LODWORD(v374) = 1;
                        unint64_t v385 = (unint64_t)v123;
                        uint64_t v386 = v125;
                        LODWORD(v387) = 1;
                        unint64_t v388 = (unint64_t *)v126;
                        uint64_t v389 = (uint64_t)v127;
                        LODWORD(v390) = 1;
                        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v5 + 32))(v5, 76, &v373, 1, &v385, 2, 0);
LABEL_324:
                        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                      }
                    }
                    return v4;
                  }
                  goto LABEL_343;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 256) + 322) || (~*(unsigned __int16 *)(a2 + 44) & 0x570) != 0) {
    return 0;
  }
  unsigned int v139 = 0;
  char v140 = 0;
  uint64_t v141 = *(unsigned __int16 *)(a2 + 44);
  unsigned int v142 = *(unsigned int **)(a2 + 32);
  uint64_t v143 = v142[1];
  unsigned int v144 = v142[9];
  unsigned int v145 = v142[17];
  unsigned int v146 = v142[25];
  uint64_t v380 = v382;
  uint64_t v381 = 0x800000000;
  while (1)
  {
    uint64_t v147 = *(void *)(a1 + 272);
    if ((v144 & 0x80000000) != 0) {
      uint64_t v148 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v144 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v148 = (uint64_t *)(*(void *)(v147 + 272) + 8 * v144);
    }
    uint64_t v149 = *v148;
    if (!v149) {
      goto LABEL_506;
    }
    if ((*(unsigned char *)(v149 + 3) & 1) == 0)
    {
      uint64_t v149 = *(void *)(v149 + 24);
      if (!v149 || (*(unsigned char *)(v149 + 3) & 1) == 0) {
        goto LABEL_506;
      }
    }
    uint64_t v150 = *(void *)(v149 + 8);
    if (!v150 || **(_WORD **)(v150 + 16) != 163 || *(_DWORD *)(v150 + 40) != 3) {
      goto LABEL_506;
    }
    int v151 = (uint64_t *)((v144 & 0x80000000) != 0
                     ? *(void *)(v147 + 24) + 16 * (v144 & 0x7FFFFFFF) + 8
                     : *(void *)(v147 + 272) + 8 * v144);
    uint64_t v152 = *v151;
    if (!v152) {
      goto LABEL_506;
    }
    uint64_t v153 = *(void *)(v150 + 32);
    uint64_t v154 = (llvm::MachineInstr *)*(unsigned int *)(v153 + 36);
    uint64_t v155 = *(unsigned int *)(v153 + 68);
    if ((*(unsigned char *)(v152 + 3) & 1) == 0)
    {
      uint64_t v152 = *(void *)(v152 + 24);
      if (!v152 || (*(unsigned char *)(v152 + 3) & 1) == 0) {
        goto LABEL_506;
      }
    }
    uint64_t v156 = *(void *)(v152 + 8);
    if (!v156) {
      goto LABEL_506;
    }
    if ((~*(unsigned __int16 *)(v156 + 44) & 0x570) != 0) {
      goto LABEL_507;
    }
    int v181 = (uint64_t *)((v144 & 0x80000000) != 0
                     ? *(void *)(v147 + 24) + 16 * (v144 & 0x7FFFFFFF) + 8
                     : *(void *)(v147 + 272) + 8 * v144);
    uint64_t v157 = *v181;
    if (!v157) {
      goto LABEL_507;
    }
    while ((*(unsigned char *)(v157 + 3) & 1) != 0)
    {
      uint64_t v157 = *(void *)(v157 + 24);
      if (!v157) {
        goto LABEL_507;
      }
    }
    while (1)
    {
      uint64_t v157 = *(void *)(v157 + 24);
      if (!v157) {
        break;
      }
      uint64_t v4 = 0;
      if ((*(unsigned char *)(v157 + 3) & 1) == 0) {
        goto LABEL_508;
      }
    }
    uint64_t v364 = v154;
    uint64_t v369 = v155;
    uint64_t v352 = v141;
    uint64_t v354 = v143;
    unsigned int v359 = v146;
    unsigned int v356 = v145;
    if ((v154 & 0x80000000) != 0) {
      int v212 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
    }
    else {
      int v212 = (uint64_t *)(*(void *)(v147 + 272) + 8 * (void)v154);
    }
    uint64_t v213 = *v212;
    if (v213)
    {
      if (*(unsigned char *)(v213 + 3) & 1) != 0 || (uint64_t v213 = *(void *)(v213 + 24)) != 0 && (*(unsigned char *)(v213 + 3))
      {
        uint64_t v214 = *(void *)(v213 + 8);
        if (v214)
        {
          if ((**(_WORD **)(v214 + 16) & 0xFFFE) == 0x152)
          {
            LOBYTE(v215) = 1;
            goto LABEL_284;
          }
        }
      }
    }
    if ((v154 & 0x80000000) != 0) {
      unsigned int v254 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v254 = (uint64_t *)(*(void *)(v147 + 272) + 8 * (void)v154);
    }
    uint64_t v215 = *v254;
    if (v215)
    {
      if ((*(unsigned char *)(v215 + 3) & 1) == 0)
      {
        uint64_t v215 = *(void *)(v215 + 24);
        if (!v215) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(v215 + 3) & 1) == 0) {
          goto LABEL_424;
        }
      }
      uint64_t v215 = *(void *)(v215 + 8);
      if (!v215) {
        goto LABEL_284;
      }
      if (**(_WORD **)(v215 + 16) != 178)
      {
LABEL_424:
        LOBYTE(v215) = 0;
        goto LABEL_284;
      }
      uint64_t v215 = *(unsigned int *)(*(void *)(v215 + 32) + 36);
      if (v215)
      {
        uint64_t v255 = (uint64_t *)((v215 & 0x80000000) != 0
                         ? *(void *)(v147 + 24) + 16 * (v215 & 0x7FFFFFFF) + 8
                         : *(void *)(v147 + 272) + 8 * v215);
        uint64_t v215 = *v255;
        if (v215)
        {
          if ((*(unsigned char *)(v215 + 3) & 1) == 0)
          {
            uint64_t v215 = *(void *)(v215 + 24);
            if (!v215) {
              goto LABEL_284;
            }
            if ((*(unsigned char *)(v215 + 3) & 1) == 0) {
              goto LABEL_424;
            }
          }
          uint64_t v215 = *(void *)(v215 + 8);
          if (v215) {
            LOBYTE(v215) = (**(_WORD **)(v215 + 16) & 0xFFFE) == 338;
          }
        }
      }
    }
LABEL_284:
    if ((v155 & 0x80000000) != 0) {
      int v216 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
    }
    else {
      int v216 = (uint64_t *)(*(void *)(v147 + 272) + 8 * v155);
    }
    uint64_t v217 = *v216;
    if (v217
      && ((*(unsigned char *)(v217 + 3) & 1) != 0 || (uint64_t v217 = *(void *)(v217 + 24)) != 0 && (*(unsigned char *)(v217 + 3) & 1) != 0)
      && (uint64_t v218 = *(void *)(v217 + 8)) != 0
      && (**(_WORD **)(v218 + 16) & 0xFFFE) == 0x152)
    {
      BOOL v219 = 1;
    }
    else
    {
      if ((v155 & 0x80000000) != 0) {
        int v256 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
      }
      else {
        int v256 = (uint64_t *)(*(void *)(v147 + 272) + 8 * v155);
      }
      uint64_t v257 = *v256;
      BOOL v219 = v257
          && ((*(unsigned char *)(v257 + 3) & 1) != 0 || (uint64_t v257 = *(void *)(v257 + 24)) != 0 && (*(unsigned char *)(v257 + 3) & 1) != 0)
          && (uint64_t v258 = *(void *)(v257 + 8)) != 0
          && **(_WORD **)(v258 + 16) == 178
          && (uint64_t v259 = *(unsigned int *)(*(void *)(v258 + 32) + 36), v259)
          && ((v259 & 0x80000000) == 0
            ? (long long v260 = (uint64_t *)(*(void *)(v147 + 272) + 8 * v259))
            : (long long v260 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v259 & 0x7FFFFFFF) + 8)),
              (uint64_t v261 = *v260) != 0
           && ((*(unsigned char *)(v261 + 3) & 1) != 0 || (uint64_t v261 = *(void *)(v261 + 24)) != 0
                                               && (*(unsigned char *)(v261 + 3) & 1) != 0)
           && (uint64_t v262 = *(void *)(v261 + 8)) != 0)
          && (**(_WORD **)(v262 + 16) & 0xFFFE) == 338;
    }
    if (v215)
    {
      char v140 = 1;
LABEL_442:
      BOOL v350 = 1;
      goto LABEL_467;
    }
    if ((v154 & 0x80000000) != 0) {
      uint64_t v263 = (uint64_t *)(*(void *)(v147 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v263 = (uint64_t *)(*(void *)(v147 + 272) + 8 * (void)v154);
    }
    v140 |= v219;
    uint64_t v264 = *v263;
    if (v264)
    {
      if (*(unsigned char *)(v264 + 3) & 1) != 0 || (uint64_t v264 = *(void *)(v264 + 24)) != 0 && (*(unsigned char *)(v264 + 3))
      {
        uint64_t v265 = *(void *)(v264 + 8);
        if (v265)
        {
          if (**(_WORD **)(v265 + 16) == 177 && *(_DWORD *)(v265 + 40) == 2)
          {
            uint64_t v266 = *(unsigned int *)(*(void *)(v265 + 32) + 36);
            uint64_t v267 = (uint64_t *)((v266 & 0x80000000) != 0
                             ? *(void *)(v147 + 24) + 16 * (v266 & 0x7FFFFFFF) + 8
                             : *(void *)(v147 + 272) + 8 * v266);
            uint64_t v268 = *v267;
            if (v268)
            {
              if ((*(unsigned char *)(v268 + 3) & 1) != 0
                || (uint64_t v268 = *(void *)(v268 + 24)) != 0 && (*(unsigned char *)(v268 + 3) & 1) != 0)
              {
                uint64_t v269 = *(void *)(v268 + 8);
                if (v269)
                {
                  if ((**(_WORD **)(v269 + 16) & 0xFFFE) == 0x152) {
                    goto LABEL_442;
                  }
                }
              }
            }
            uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef(v147, v266);
            if (VRegDef)
            {
              if (**(_WORD **)(VRegDef + 16) == 178)
              {
                unsigned int v271 = *(_DWORD *)(*(void *)(VRegDef + 32) + 36);
                if (v271)
                {
                  uint64_t v272 = llvm::MachineRegisterInfo::getVRegDef(v147, v271);
                  if (v272)
                  {
                    if ((**(_WORD **)(v272 + 16) & 0xFFFE) == 0x152) {
                      goto LABEL_442;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v273 = (uint64_t *)((v364 & 0x80000000) != 0
                     ? *(void *)(v147 + 24) + 16 * (v364 & 0x7FFFFFFF) + 8
                     : *(void *)(v147 + 272) + 8 * (void)v364);
    v350 = (uint64_t v274 = *v273) != 0
        && ((*(unsigned char *)(v274 + 3) & 1) != 0 || (uint64_t v274 = *(void *)(v274 + 24)) != 0 && (*(unsigned char *)(v274 + 3) & 1) != 0)
        && (uint64_t v275 = *(void *)(v274 + 8)) != 0
        && **(_WORD **)(v275 + 16) == 178
        && (int v276 = *(_DWORD *)(*(void *)(v275 + 32) + 36)) != 0
        && sub_1CBA0DDF0(*(void *)(v147 + 24), *(void *)(v147 + 272), v276);
LABEL_467:
    if (v219) {
      goto LABEL_481;
    }
    unint64_t v277 = (uint64_t *)((v369 & 0x80000000) != 0
                     ? *(void *)(v147 + 24) + 16 * (v369 & 0x7FFFFFFF) + 8
                     : *(void *)(v147 + 272) + 8 * v369);
    uint64_t v278 = *v277;
    if (!v278) {
      goto LABEL_492;
    }
    if ((*(unsigned char *)(v278 + 3) & 1) == 0)
    {
      uint64_t v278 = *(void *)(v278 + 24);
      if (!v278 || (*(unsigned char *)(v278 + 3) & 1) == 0) {
        goto LABEL_492;
      }
    }
    uint64_t v279 = *(void *)(v278 + 8);
    if (!v279 || **(_WORD **)(v279 + 16) != 177 || *(_DWORD *)(v279 + 40) != 2) {
      goto LABEL_492;
    }
    uint64_t v280 = *(unsigned int *)(*(void *)(v279 + 32) + 36);
    BOOL v281 = (uint64_t *)((v280 & 0x80000000) != 0
                     ? *(void *)(v147 + 24) + 16 * (v280 & 0x7FFFFFFF) + 8
                     : *(void *)(v147 + 272) + 8 * v280);
    if ((uint64_t v282 = *v281) != 0
      && ((*(unsigned char *)(v282 + 3) & 1) != 0 || (uint64_t v282 = *(void *)(v282 + 24)) != 0 && (*(unsigned char *)(v282 + 3) & 1) != 0)
      && (uint64_t v283 = *(void *)(v282 + 8)) != 0
      && (**(_WORD **)(v283 + 16) & 0xFFFE) == 0x152
      || (uint64_t v285 = llvm::MachineRegisterInfo::getVRegDef(v147, v280)) != 0
      && **(_WORD **)(v285 + 16) == 178
      && (unsigned int v286 = *(_DWORD *)(*(void *)(v285 + 32) + 36)) != 0
      && (uint64_t v287 = llvm::MachineRegisterInfo::getVRegDef(v147, v286)) != 0
      && (**(_WORD **)(v287 + 16) & 0xFFFE) == 0x152)
    {
LABEL_481:
      BOOL v284 = 1;
    }
    else
    {
LABEL_492:
      uint64_t v288 = (uint64_t *)((v369 & 0x80000000) != 0
                       ? *(void *)(v147 + 24) + 16 * (v369 & 0x7FFFFFFF) + 8
                       : *(void *)(v147 + 272) + 8 * v369);
      BOOL v284 = (v289 = *v288) != 0
          && ((*(unsigned char *)(v289 + 3) & 1) != 0 || (uint64_t v289 = *(void *)(v289 + 24)) != 0 && (*(unsigned char *)(v289 + 3) & 1) != 0)
          && (uint64_t v290 = *(void *)(v289 + 8)) != 0
          && **(_WORD **)(v290 + 16) == 178
          && (int v291 = *(_DWORD *)(*(void *)(v290 + 32) + 36)) != 0
          && sub_1CBA0DDF0(*(void *)(v147 + 24), *(void *)(v147 + 272), v291);
    }
    if (!v350) {
      break;
    }
    if (v139 >= HIDWORD(v381)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v380 + v139) = v364;
    unsigned int v139 = v381 + 1;
    LODWORD(v381) = v381 + 1;
    if (v284) {
      goto LABEL_560;
    }
LABEL_556:
    if (v350) {
      unsigned int v144 = v369;
    }
    else {
      unsigned int v144 = v364;
    }
    uint64_t v141 = v352;
    uint64_t v143 = v354;
    unsigned int v145 = v356;
    unsigned int v146 = v359;
  }
  if (!v284)
  {
    uint64_t v141 = v352;
    LODWORD(v143) = v354;
    unsigned int v145 = v356;
    unsigned int v146 = v359;
LABEL_506:
    if (v140)
    {
      uint64_t v352 = v141;
      LODWORD(v354) = v143;
      unsigned int v359 = v146;
      unsigned int v356 = v145;
      if (v139 >= HIDWORD(v381)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v380 + v139) = v144;
      LODWORD(v381) = v381 + 1;
      goto LABEL_530;
    }
LABEL_507:
    uint64_t v4 = 0;
    goto LABEL_508;
  }
LABEL_560:
  if (v139 >= HIDWORD(v381)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_DWORD *)v380 + v139) = v369;
  unsigned int v139 = v381 + 1;
  LODWORD(v381) = v381 + 1;
  if (!v350) {
    goto LABEL_556;
  }
  if ((v140 & 1) == 0) {
    goto LABEL_507;
  }
LABEL_530:
  if ((v354 & 0x80000000) != 0
    && (uint64_t v296 = *(void *)(a1 + 272), v297 = v354 & 0x7FFFFFFF, v297 < *(_DWORD *)(v296 + 432)))
  {
    unint64_t v292 = *(void *)(*(void *)(v296 + 424) + 8 * v297);
  }
  else
  {
    unint64_t v292 = 0;
  }
  sub_1CBA05F5C((uint64_t)&v385, a2);
  for (unsigned int i = v381; v381; unsigned int i = v381)
  {
    int v294 = *((_DWORD *)v380 + i - 1);
    LODWORD(v381) = i - 1;
    unint64_t v383 = v292;
    int v384 = 0;
    LODWORD(v373) = v294;
    LODWORD(v375) = 0;
    unsigned int v376 = v356;
    int v377 = 0;
    unsigned int v378 = v359;
    int v379 = 0;
    sub_1CC739C54(&v385, 0xA6u, &v383, 1, (int *)&v373, 3, v352 | 0x100000000);
    unsigned int v359 = *(_DWORD *)(*(void *)(v295 + 32) + 4);
  }
  LODWORD(v383) = v354;
  int v384 = 1;
  LODWORD(v373) = v359;
  LODWORD(v375) = 0;
  (*(void (**)(unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(v385 + 32))(&v385, 19, &v383, 1, &v373, 1, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  unint64_t v385 = (unint64_t)&unk_1F261CD58;
  if (v389) {
    llvm::MetadataTracking::untrack((uint64_t)&v389, (unsigned __int8 *)v389);
  }
  uint64_t v4 = 1;
LABEL_508:
  if (v380 != v382) {
    free(v380);
  }
  return v4;
}