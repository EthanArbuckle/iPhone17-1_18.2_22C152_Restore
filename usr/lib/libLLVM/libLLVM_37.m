uint64_t sub_1CCA3029C(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;

  if (a2 > 6) {
    return 0;
  }
  LODWORD(v3) = a2;
  while (1)
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (a1)
    {
      if (v5 == 17) {
        break;
      }
    }
    if (v5 == 85)
    {
      v3 = (v3 + 1);
      result = sub_1CCA3029C(*(void *)(a1 - 64), v3);
      if (!result) {
        return result;
      }
      v8 = (uint64_t *)(a1 - 32);
    }
    else
    {
      if (v5 != 84) {
        return 0;
      }
      v6 = *(void *)(a1 - 32);
      if (!v6
        || *(unsigned char *)(v6 + 16)
        || *(void *)(v6 + 24) != *(void *)(a1 + 72)
        || (*(unsigned char *)(v6 + 33) & 0x20) == 0)
      {
        return 0;
      }
      v7 = *(_DWORD *)(v6 + 36);
      if (v7 != 1847) {
        return v7 == 1851;
      }
      v8 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
      LODWORD(v3) = v3 + 1;
    }
    a1 = *v8;
    if (v3 > 6) {
      return 0;
    }
  }
  if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
    v9 = *(void *)(a1 + 40);
  }
  else {
    v9 = a1 + 24;
  }
  return (*(unsigned char *)(v9 + 28) & 7) != 1;
}

uint64_t sub_1CCA303B0(uint64_t a1, llvm::Instruction *this)
{
  NextNonDebugInstruction = (const llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(this, 0);
  if (NextNonDebugInstruction
    && (v5 = NextNonDebugInstruction, *((unsigned char *)NextNonDebugInstruction + 16) == 63)
    && (llvm::Instruction::isIdenticalToWhenDefined(this, NextNonDebugInstruction)
     && (*((unsigned __int8 *)v5 + 17) ^ *((unsigned __int8 *)this + 17)) < 2
     || ((unsigned int v6 = *((unsigned __int8 *)v5 + 60), v6 <= 1) ? (v7 = v6 == *((unsigned __int8 *)this + 60)) : (v7 = 0),
         v7 && byte_1CD973E80[8 * (*((_WORD *)v5 + 9) & 7) + (*((_WORD *)this + 9) & 7)]))
    || (PrevNonDebugInstruction = llvm::Instruction::getPrevNonDebugInstruction(this, 0)) != 0
    && *((unsigned char *)PrevNonDebugInstruction + 16) == 63
    && ((unsigned int v9 = *((unsigned __int8 *)PrevNonDebugInstruction + 60), v9 <= 1)
      ? (BOOL v10 = v9 == *((unsigned __int8 *)this + 60))
      : (BOOL v10 = 0),
        v10 && byte_1CD973E80[8 * (*((_WORD *)PrevNonDebugInstruction + 9) & 7) + (*((_WORD *)this + 9) & 7)]))
  {
    sub_1CC9D6844(a1, (uint64_t)this);
  }
  return 0;
}

uint64_t sub_1CCA304D8(uint64_t a1, llvm::Value *a2)
{
  v2 = a2;
  v274[8] = *MEMORY[0x1E4F143B8];
  v3 = (void **)((char *)a2 - 32);
  v4 = llvm::Value::stripPointerCasts(*((llvm::Value **)a2 - 4));
  unint64_t v6 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)v4, v5);
  *(void *)&long long v265 = v6;
  *((void *)&v265 + 1) = v8;
  uint64_t v9 = v8;
  if ((_BYTE)v8)
  {
    BOOL v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)(*(void *)(v6 - 32)
                                                         - 32 * (*(_DWORD *)(*(void *)(v6 - 32) + 20) & 0x7FFFFFF)));
    if (*((unsigned char *)v10 + 16)) {
      return 0;
    }
    v4 = v10;
    sub_1CD615F38(v2, "ptrauth", 7uLL, v256);
    if (!(_BYTE)v258
      || (llvm::GlobalPtrAuthInfo::isCompatibleWith((llvm::GlobalPtrAuthInfo *)&v265, *(const llvm::Value **)v256[0], *((const llvm::Value **)v256[0] + 4), *(const llvm::DataLayout **)(a1 + 80), v11, v12, v13) & 1) == 0)
    {
      return 0;
    }
  }
  if (!v4 || *((unsigned char *)v4 + 16) != 0) {
    return 0;
  }
  uint64_t v16 = *((void *)v4 + 14);
  if (v16)
  {
    if (*(_DWORD *)(v16 + 8))
    {
      uint64_t v17 = *(void *)(v16 + 40);
      if (v17)
      {
        int v18 = *(_DWORD *)(v17 + 40);
        if (v18)
        {
          uint64_t v19 = *(void *)(v17 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v208 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v208 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v208;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          unint64_t v20 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0x318C536CDLL)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1EBCBE580 ^ 0x318C536CDLL)) >> 47) ^ qword_1EBCBE580 ^ 0x6B6E7568);
          unsigned int v21 = -348639895 * ((v20 >> 47) ^ v20);
          for (int i = 1; ; ++i)
          {
            unsigned int v23 = v21 & (v18 - 1);
            v24 = (uint64_t *)(v19 + 24 * v23);
            uint64_t v25 = *v24;
            if (*v24 == -1)
            {
              if ("thunk" == (char *)-1) {
                return 0;
              }
            }
            else if (v25 == -2)
            {
              if ("thunk" == (char *)-2) {
                return 0;
              }
            }
            else if (v24[1] == 5 && *(_DWORD *)v25 == 1853188212 && *(unsigned char *)(v25 + 4) == 107)
            {
              return 0;
            }
            if (v25 == -1) {
              break;
            }
            unsigned int v21 = i + v23;
          }
        }
      }
    }
  }
  int v27 = *((unsigned __int8 *)v2 + 16);
  if (v27 == 84 && (*((_WORD *)v2 + 9) & 3) == 2) {
    return 0;
  }
  v248 = v2;
  v249 = (void *)*((void *)v2 + 8);
  uint64_t v28 = *((void *)v4 + 3);
  v29 = *(llvm::Value **)v2;
  v30 = *(void **)(v28 + 16);
  v31 = (void *)*v30;
  if (*(void *)v2 != *v30)
  {
    if (*((unsigned char *)v31 + 8) == 16) {
      return 0;
    }
    if (llvm::CastInst::isBitOrNoopPointerCastable((llvm::CastInst *)v31, *(llvm::Type **)v2, *(llvm::Type **)(a1 + 80), v7))
    {
      v32 = (void *)*((void *)v2 + 1);
    }
    else
    {
      if (*((unsigned char *)v4 + 16))
      {
        if (*((unsigned char *)v4 + 16) == 3 && (*((_DWORD *)v4 + 5) & 0x7FFFFFF) == 0) {
          return 0;
        }
      }
      else if (*((llvm::Value **)v4 + 9) == (llvm::Value *)((char *)v4 + 72) && (*((unsigned char *)v4 + 34) & 0x80) == 0)
      {
        return 0;
      }
      v32 = (void *)*((void *)v2 + 1);
      if (!v32)
      {
        int v27 = *((unsigned __int8 *)v2 + 16);
        goto LABEL_74;
      }
      if (*((unsigned char *)v31 + 8) != 7) {
        return 0;
      }
    }
    if (!v249 || !v32) {
      goto LABEL_65;
    }
    if (*((_DWORD *)v249 + 2) > 1u)
    {
      uint64_t v146 = v249[6];
      v256[0] = *(void **)v28;
      v256[1] = &v258;
      uint64_t v257 = 0x800000000;
      if (v146)
      {
        v33 = (char *)(v146 + 48);
        v34 = (char *)(v146 + 48 + 8 * *(unsigned int *)(v146 + 8));
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v256[0] = *(void **)v28;
      v256[1] = &v258;
      uint64_t v257 = 0x800000000;
    }
    sub_1CC512940((uint64_t)&v256[1], (uint64_t)&v258, v33, v34);
    long long v265 = 0uLL;
    uint64_t v268 = 0;
    v267 = 0;
    uint64_t v266 = (uint64_t)&v267;
    int v35 = *((unsigned __int8 *)v31 + 8);
    if (v35 == 13)
    {
      unint64_t v36 = 0x80003080004C0000;
      uint64_t v37 = 13296;
    }
    else
    {
      long long v265 = xmmword_1CFAC6340;
      if (v35 == 15)
      {
        unint64_t v36 = 0x1000000000002;
        uint64_t v37 = 8;
        goto LABEL_55;
      }
      unint64_t v36 = 0x80013080004C0002;
      uint64_t v37 = 13304;
    }
    *(void *)&long long v265 = v36;
    *((void *)&v265 + 1) = v37;
LABEL_55:
    int v38 = v35;
    if ((v35 & 0xFE) == 0x12) {
      int v38 = *(unsigned __int8 *)(*(void *)v31[2] + 8);
    }
    if (v38 != 15) {
      *((void *)&v265 + 1) = v37 | 0x400;
    }
    if (v35 == 7) {
      *(void *)&long long v265 = v36 | 0x1000000000;
    }
    BOOL v39 = llvm::AttrBuilder::overlaps((uint64_t)v256, (uint64_t)&v265);
    sub_1CC1E4850((uint64_t)&v266, v267);
    if (v256[1] != &v258) {
      free(v256[1]);
    }
    if (v39) {
      return 0;
    }
    v32 = (void *)*((void *)v2 + 1);
LABEL_65:
    int v27 = *((unsigned __int8 *)v2 + 16);
    if (v32)
    {
      if (v27 == 39) {
        return 0;
      }
      if (v27 == 33)
      {
        while (1)
        {
          uint64_t v40 = v32[3];
          if (v40)
          {
            if (*(unsigned char *)(v40 + 16) == 83)
            {
              v41 = *(void **)(v40 + 40);
              if (v41 == *((void **)v2 - 12) || v41 == *((void **)v2 - 8)) {
                return 0;
              }
            }
          }
          v32 = (void *)v32[1];
          if (!v32) {
            goto LABEL_73;
          }
        }
      }
    }
  }
LABEL_74:
  if (v27 == 84)
  {
    uint64_t v42 = 0;
  }
  else if (v27 == 39)
  {
    uint64_t v42 = (*((_DWORD *)v2 + 20) + 1);
  }
  else
  {
LABEL_73:
    uint64_t v42 = 2;
  }
  int v43 = *((_DWORD *)v2 + 5);
  if (v43 < 0
    && (v209 = (void **)((char *)v2 - 32 * (v43 & 0x7FFFFFF)), uint64_t v210 = (uint64_t)*(v209 - 1),
                                                                 (v210 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v45 = -(uint64_t)(v43 & 0x7FFFFFF);
    uint64_t v44 = (*((_DWORD *)v209 - 3) - *(_DWORD *)((char *)v209 - v210));
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = -(uint64_t)(v43 & 0x7FFFFFF);
  }
  unint64_t v46 = -32 * v42 - 32 * v44 - 32 * v45 - 32;
  unsigned int v47 = *(_DWORD *)(v28 + 12) - 1;
  unint64_t v245 = v46 >> 5;
  if (v47 >= (v46 >> 5)) {
    uint64_t v48 = (v46 >> 5);
  }
  else {
    uint64_t v48 = v47;
  }
  uint64_t v49 = *((void *)v4 + 14);
  if (!v49 || (*(char *)(v49 + 32) & 0x80000000) == 0 && (*(unsigned char *)(v49 + 33) & 1) == 0)
  {
    v241 = v29;
    unint64_t v242 = v46;
    v244 = v31;
    v239 = v3;
    uint64_t v240 = v9;
    if (v48)
    {
      uint64_t v50 = 0;
      v243 = v249 + 5;
      uint64_t v51 = 32 * v45;
      while (1)
      {
        uint64_t v52 = *(void *)(*(void *)(v28 + 16) + 8 * v50 + 8);
        v53 = **(llvm::CastInst ***)((char *)v2 + v51);
        uint64_t result = llvm::CastInst::isBitOrNoopPointerCastable(v53, (llvm::Type *)v52, *(llvm::Type **)(a1 + 80), v7);
        if (!result) {
          return result;
        }
        if (v249 && (v50 + 2) < *((_DWORD *)v249 + 2))
        {
          uint64_t v59 = v243[(v50 + 2)];
          v256[0] = *(void **)v28;
          v256[1] = &v258;
          uint64_t v257 = 0x800000000;
          if (v59)
          {
            v54 = (char *)(v59 + 48);
            v55 = (char *)(v59 + 48 + 8 * *(unsigned int *)(v59 + 8));
          }
          else
          {
            v54 = 0;
            v55 = 0;
          }
        }
        else
        {
          v54 = 0;
          v55 = 0;
          v256[0] = *(void **)v28;
          v256[1] = &v258;
          uint64_t v257 = 0x800000000;
        }
        sub_1CC512940((uint64_t)&v256[1], (uint64_t)&v258, v54, v55);
        long long v265 = 0uLL;
        v267 = 0;
        uint64_t v268 = 0;
        uint64_t v266 = (uint64_t)&v267;
        int v56 = *(unsigned __int8 *)(v52 + 8);
        long long v57 = xmmword_1CFB27720;
        if (v56 != 13)
        {
          long long v57 = xmmword_1CFB27710;
          if (v56 != 15) {
            long long v57 = xmmword_1CFB27730;
          }
        }
        long long v265 = v57;
        BOOL v58 = llvm::AttrBuilder::overlaps((uint64_t)v256, (uint64_t)&v265);
        sub_1CC1E4850((uint64_t)&v266, v267);
        if (v256[1] != &v258) {
          free(v256[1]);
        }
        if (v58) {
          return 0;
        }
        v2 = v248;
        if (llvm::CallBase::paramHasAttr((uint64_t)v248, v50, 71)) {
          return 0;
        }
        if (v249 && (v50 + 2) < *((_DWORD *)v249 + 2))
        {
          uint64_t v60 = v243[(v50 + 2)];
          if (v60 && (*(unsigned char *)(v60 + 21) & 1) != 0) {
            return 0;
          }
          uint64_t v61 = (v50 + 2);
          uint64_t v62 = v243[v61];
          if (v62)
          {
            if (*(char *)(v62 + 19) < 0) {
              return 0;
            }
          }
          if ((llvm::CastInst *)v52 != v53)
          {
            uint64_t v63 = v243[v61];
            if (v63)
            {
              if ((*(unsigned char *)(v63 + 20) & 0x20) != 0)
              {
                if (*(unsigned char *)(v52 + 8) != 15) {
                  return 0;
                }
                if (*(void *)(v52 + 24)) {
                  break;
                }
              }
            }
          }
        }
LABEL_99:
        ++v50;
        v51 += 32;
        if (v48 == v50) {
          goto LABEL_125;
        }
      }
      v64 = **(unsigned __int8 ***)(v52 + 16);
      unsigned int v65 = v64[8];
      if (v65 <= 0x11)
      {
        if (((1 << v65) & 0x30000) != 0)
        {
LABEL_121:
          uint64_t result = llvm::Type::isSizedDerivedType(**(void **)(v52 + 16), 0);
          if (!result) {
            return result;
          }
LABEL_122:
          v67 = (llvm::Type *)sub_1CD49471C((uint64_t)v248, v50);
          v68 = *(llvm::DataLayout **)(a1 + 80);
          unint64_t v237 = (unint64_t)(sub_1CB83544C((uint64_t)v68, (uint64_t)v67) + 7) >> 3;
          BOOL v235 = v69 == 1;
          char Alignment = llvm::DataLayout::getAlignment(v68, v67, 1);
          uint64_t v238 = ((1 << Alignment) + v237 - 1) & -(1 << Alignment);
          v71 = *(llvm::DataLayout **)(a1 + 80);
          unint64_t v236 = (unint64_t)(sub_1CB83544C((uint64_t)v71, (uint64_t)v64) + 7) >> 3;
          BOOL v73 = v72 == 1;
          char v74 = llvm::DataLayout::getAlignment(v71, (llvm::Type *)v64, 1);
          uint64_t result = 0;
          if (v238 != (((1 << v74) + v236 - 1) & -(1 << v74))) {
            return result;
          }
          v2 = v248;
          if ((v235 ^ v73)) {
            return result;
          }
          goto LABEL_99;
        }
        if (((1 << v65) & 0xAC7F) != 0) {
          goto LABEL_122;
        }
      }
      if ((v65 & 0xFE) != 0x12 && v65 != 21) {
        return 0;
      }
      goto LABEL_121;
    }
LABEL_125:
    if (*((unsigned char *)v4 + 16))
    {
      unsigned int v75 = v245;
      unint64_t v76 = v242;
      if (*((unsigned char *)v4 + 16) == 3)
      {
        int v77 = *(_DWORD *)(v28 + 12);
        unsigned int v78 = v77 - 1;
        if ((*((_DWORD *)v4 + 5) & 0x7FFFFFF) != 0) {
          goto LABEL_137;
        }
LABEL_131:
        unsigned int v79 = *(_DWORD *)(v28 + 8);
        BOOL v80 = v79 > 0xFF;
        if (v78 >= v75)
        {
          BOOL v147 = v79 > 0xFF;
          v81 = (void *)*((void *)v2 + 9);
          BOOL v82 = *((_DWORD *)v81 + 2) > 0xFFu;
          if ((v147 ^ v82)) {
            return 0;
          }
        }
        else
        {
          if (v79 < 0x100) {
            return 0;
          }
          v81 = (void *)*((void *)v2 + 9);
          if (*((_DWORD *)v81 + 2) <= 0xFFu) {
            return 0;
          }
          BOOL v82 = 1;
          BOOL v80 = 1;
        }
        if (v82 && v80 && v77 != *((_DWORD *)v81 + 3)) {
          return 0;
        }
LABEL_137:
        if (v78 < v75 && *(_DWORD *)(v28 + 8) >= 0x100u && v249 && (*((unsigned char *)v249 + 33) & 2) != 0)
        {
          uint64_t v205 = *((unsigned int *)v249 + 2);
          if (v205)
          {
            v206 = v249 + 5;
            int v207 = -1;
            while (!*v206 || (*(unsigned char *)(*v206 + 21) & 2) == 0)
            {
              ++v207;
              ++v206;
              if (!--v205) {
                goto LABEL_369;
              }
            }
          }
          else
          {
LABEL_369:
            int v207 = 0;
          }
          v2 = v248;
          unint64_t v76 = v242;
          if (v207 - 1 >= v78) {
            return 0;
          }
        }
        v272 = v274;
        uint64_t v273 = 0x800000000;
        __src = &v271;
        size_t __n = 0x800000000;
        if ((v76 >> 5) >= 9uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v249 && *((_DWORD *)v249 + 2) > 1u)
        {
          uint64_t v145 = v249[6];
          *(void *)&long long v265 = *(void *)v28;
          *((void *)&v265 + 1) = &v267;
          uint64_t v266 = 0x800000000;
          if (v145)
          {
            v83 = (char *)(v145 + 48);
            v84 = (char *)(v145 + 48 + 8 * *(unsigned int *)(v145 + 8));
          }
          else
          {
            v83 = 0;
            v84 = 0;
          }
        }
        else
        {
          v83 = 0;
          v84 = 0;
          *(void *)&long long v265 = *(void *)v28;
          *((void *)&v265 + 1) = &v267;
          uint64_t v266 = 0x800000000;
        }
        sub_1CC512940((uint64_t)&v265 + 8, (uint64_t)&v267, v83, v84);
        v256[0] = 0;
        v256[1] = 0;
        v258 = 0;
        uint64_t v259 = 0;
        uint64_t v257 = (uint64_t)&v258;
        int v85 = *((unsigned __int8 *)v244 + 8);
        if (v85 == 13)
        {
          unint64_t v86 = 0x80003080004C0000;
          uint64_t v87 = 13296;
        }
        else
        {
          *(_OWORD *)v256 = xmmword_1CFAC6340;
          if (v85 == 15)
          {
            unint64_t v86 = 0x1000000000002;
            uint64_t v87 = 8;
LABEL_151:
            int v88 = v85;
            if ((v85 & 0xFE) == 0x12) {
              int v88 = *(unsigned __int8 *)(*(void *)v244[2] + 8);
            }
            if (v88 != 15) {
              v256[1] = (void *)(v87 | 0x400);
            }
            if (v85 == 7) {
              v256[0] = (void *)(v86 | 0x1000000000);
            }
            llvm::AttrBuilder::remove((uint64_t)&v265, (uint64_t)v256);
            sub_1CC1E4850((uint64_t)&v257, v258);
            v246 = **(uint64_t ***)v2;
            v91 = (llvm::CastInst **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
            if (v48)
            {
              uint64_t v92 = 0;
              *(void *)v247 = v249 + 5;
              do
              {
                uint64_t v93 = *(void *)(*(void *)(v28 + 16) + 8 * v92 + 8);
                v94 = *v91;
                if (*(void *)*v91 != v93)
                {
                  uint64_t v95 = *(void *)(a1 + 24);
                  LOWORD(v259) = 257;
                  v94 = sub_1CC240E88(v95, (uint64_t)v94, v93, (uint64_t)v256);
                }
                if (v273 >= (unint64_t)HIDWORD(v273)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v272[v273] = (uint64_t)v94;
                LODWORD(v273) = v273 + 1;
                v260 = 0;
                *(void *)v261 = 0;
                v263 = 0;
                uint64_t v264 = 0;
                v262 = &v263;
                int v96 = *(unsigned __int8 *)(v93 + 8);
                if (v96 == 13)
                {
                  uint64_t v97 = 0x308000480000;
                }
                else
                {
                  v260 = (void *)2;
                  uint64_t v97 = 0x308000480002;
                  if (v96 == 15)
                  {
                    uint64_t v97 = 2;
                    uint64_t v98 = 1024;
                    goto LABEL_167;
                  }
                }
                v260 = (void *)v97;
                *(void *)v261 = 12288;
                uint64_t v98 = 13312;
LABEL_167:
                int v99 = v96;
                if ((v96 & 0xFE) == 0x12) {
                  int v99 = *(unsigned __int8 *)(**(void **)(v93 + 16) + 8);
                }
                if (v99 != 15) {
                  *(void *)v261 = v98;
                }
                if (v96 == 7) {
                  v260 = (void *)(v97 | 0x1000000000);
                }
                v100 = v249;
                if (!v249) {
                  goto LABEL_178;
                }
                unsigned int v101 = *((_DWORD *)v249 + 2);
                if ((int)v92 + 2 >= v101
                  || (uint64_t v103 = *(void *)(*(void *)v247 + 8 * (v92 + 2))) == 0
                  || (*(unsigned char *)(v103 + 20) & 0x20) == 0
                  || *(unsigned char *)(v93 + 8) == 15 && !*(void *)(v93 + 24))
                {
                  if ((int)v92 + 2 < v101) {
                    v100 = *(void **)(*(void *)v247 + 8 * (v92 + 2));
                  }
                  else {
                    v100 = 0;
                  }
LABEL_178:
                  v256[0] = v100;
                  uint64_t v102 = llvm::AttributeSet::removeAttributes((uint64_t *)v256, v246, (uint64_t)&v260);
                  if (__n >= (unint64_t)HIDWORD(__n)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)__src + __n) = v102;
                  LODWORD(__n) = __n + 1;
                  goto LABEL_180;
                }
                if ((int)v92 + 2 < v101) {
                  uint64_t v104 = *(void *)(*(void *)v247 + 8 * (v92 + 2));
                }
                else {
                  uint64_t v104 = 0;
                }
                *(void *)__s = v104;
                uint64_t v105 = llvm::AttributeSet::removeAttributes((uint64_t *)__s, v246, (uint64_t)&v260);
                v256[0] = v246;
                v256[1] = &v258;
                uint64_t v257 = 0x800000000;
                if (v105)
                {
                  v106 = (char *)(v105 + 48);
                  v107 = (char *)(v105 + 48 + 8 * *(unsigned int *)(v105 + 8));
                }
                else
                {
                  v106 = 0;
                  v107 = 0;
                }
                sub_1CC512940((uint64_t)&v256[1], (uint64_t)&v258, v106, v107);
                llvm::AttrBuilder::addByValAttr((uint64_t **)v256, **(llvm::Type ***)(v93 + 16));
                uint64_t Sorted = llvm::AttributeSetNode::getSorted(v246, (uint64_t *)v256[1], v257);
                if (__n >= (unint64_t)HIDWORD(__n)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__src + __n) = Sorted;
                LODWORD(__n) = __n + 1;
                if (v256[1] != &v258) {
                  free(v256[1]);
                }
LABEL_180:
                ++v92;
                sub_1CC1E4850((uint64_t)&v262, v263);
                v91 += 4;
              }
              while (v48 != v92);
            }
            v109 = v248;
            int v110 = v245;
            if (v48 != *(_DWORD *)(v28 + 12) - 1)
            {
              int v111 = v48 - 1;
              do
              {
                NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(v28 + 16) + 8 * (v111 + 2)), v89, v90);
                if (v273 >= (unint64_t)HIDWORD(v273)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v272[v273] = (uint64_t)NullValue;
                LODWORD(v273) = v273 + 1;
                if (__n >= (unint64_t)HIDWORD(__n)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__src + __n) = 0;
                LODWORD(__n) = __n + 1;
                ++v111;
              }
              while (v111 != *(_DWORD *)(v28 + 12) - 2);
              LODWORD(v48) = v111 + 1;
            }
            if (v48 < v245 && *(_DWORD *)(v28 + 8) >= 0x100u)
            {
              do
              {
                v131 = *v91;
                uint64_t v132 = *(void *)*v91;
                if (v132) {
                  BOOL v133 = (*(_DWORD *)(v132 + 8) & 0xFFFFE0FF) == 13;
                }
                else {
                  BOOL v133 = 0;
                }
                if (v133)
                {
                  uint64_t v134 = **(void **)v132 + 1960;
                  if (v134 != v132)
                  {
                    uint64_t CastOpcode = llvm::CastInst::getCastOpcode(*v91, 0, **(void **)v132 + 1960, 0);
                    v136 = *(uint64_t **)(a1 + 24);
                    v131 = *v91;
                    LOWORD(v264) = 257;
                    if (*(void *)v131 != v134)
                    {
                      if (*((unsigned __int8 *)v131 + 16) <= 0x14u)
                      {
                        v131 = (llvm::CastInst *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::CastInst *, uint64_t))(*(void *)v136[9] + 224))(v136[9], CastOpcode, v131, v134);
                        if (v131) {
                          BOOL v140 = *((unsigned __int8 *)v131 + 16) >= 0x1Cu;
                        }
                        else {
                          BOOL v140 = 0;
                        }
                        if (v140)
                        {
                          (*(void (**)(uint64_t, llvm::CastInst *, void **, uint64_t, uint64_t))(*(void *)v136[10] + 16))(v136[10], v131, &v260, v136[6], v136[7]);
                          uint64_t v142 = *((unsigned int *)v136 + 2);
                          if (v142)
                          {
                            uint64_t v143 = *v136;
                            uint64_t v144 = *v136 + 16 * v142;
                            do
                            {
                              llvm::Instruction::setMetadata(v131, *(_DWORD *)v143, *(llvm::MDNode **)(v143 + 8));
                              v143 += 16;
                            }
                            while (v143 != v144);
                          }
                          int v110 = v245;
                        }
                      }
                      else
                      {
                        LOWORD(v259) = 257;
                        v131 = llvm::CastInst::Create(CastOpcode, (uint64_t)v131, v134, (const char **)v256, 0);
                        (*(void (**)(uint64_t, llvm::CastInst *, void **, uint64_t, uint64_t))(*(void *)v136[10] + 16))(v136[10], v131, &v260, v136[6], v136[7]);
                        uint64_t v137 = *((unsigned int *)v136 + 2);
                        if (v137)
                        {
                          uint64_t v138 = *v136;
                          uint64_t v139 = *v136 + 16 * v137;
                          do
                          {
                            llvm::Instruction::setMetadata(v131, *(_DWORD *)v138, *(llvm::MDNode **)(v138 + 8));
                            v138 += 16;
                          }
                          while (v138 != v139);
                        }
                      }
                    }
                    v109 = v248;
                  }
                }
                if (v273 >= (unint64_t)HIDWORD(v273)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v272[v273] = (uint64_t)v131;
                LODWORD(v273) = v273 + 1;
                if (v249 && (v48 + 2) < *((_DWORD *)v249 + 2)) {
                  uint64_t v141 = v249[(v48 + 2) + 5];
                }
                else {
                  uint64_t v141 = 0;
                }
                if (__n >= (unint64_t)HIDWORD(__n)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__src + __n) = v141;
                LODWORD(__n) = __n + 1;
                LODWORD(v48) = v48 + 1;
                v91 += 4;
              }
              while (v48 != v110);
            }
            if (v249)
            {
              uint64_t v113 = v240;
              v114 = v29;
              if (*((_DWORD *)v249 + 2)) {
                uint64_t v115 = v249[5];
              }
              else {
                uint64_t v115 = 0;
              }
            }
            else
            {
              uint64_t v115 = 0;
              uint64_t v113 = v240;
              v114 = v29;
            }
            if (*((unsigned char *)v244 + 8) == 7)
            {
              LOWORD(v259) = 257;
              llvm::Value::setNameImpl(v109, (const char **)v256);
              if (!*((unsigned char *)v109 + 16))
              {
                if ((*((unsigned char *)v109 + 23) & 0x10) == 0) {
                  goto LABEL_354;
                }
                uint64_t v187 = ***(void ***)v109;
                uint64_t v188 = *(void *)(v187 + 152);
                uint64_t v189 = *(unsigned int *)(v187 + 168);
                if (v189)
                {
                  LODWORD(v190) = (v189 - 1) & ((v109 >> 4) ^ (v109 >> 9));
                  v191 = (llvm::Value **)(v188 + 16 * v190);
                  v192 = *v191;
                  if (*v191 != v109)
                  {
                    int v193 = 1;
                    do
                    {
                      if (v192 == (llvm::Value *)-4096) {
                        goto LABEL_346;
                      }
                      int v194 = v190 + v193++;
                      uint64_t v190 = v194 & (v189 - 1);
                      v192 = *(llvm::Value **)(v188 + 16 * v190);
                    }
                    while (v192 != v109);
                    v191 = (llvm::Value **)(v188 + 16 * v190);
                  }
                }
                else
                {
LABEL_346:
                  v191 = (llvm::Value **)(v188 + 16 * v189);
                }
                v198 = v191[1];
                unint64_t v201 = *(void *)v198;
                v199 = (char *)v198 + 16;
                unint64_t v200 = v201;
                if (v201 >= 5
                  && (*(_DWORD *)v199 == *(_DWORD *)"llvm." ? (BOOL v202 = v199[4] == aLlvm_1[4]) : (BOOL v202 = 0), v202))
                {
                  *((_DWORD *)v109 + 8) |= 0x2000u;
                  int v203 = llvm::Function::lookupIntrinsicID(v199, v200);
                }
                else
                {
LABEL_354:
                  int v203 = 0;
                  *((_DWORD *)v109 + 8) &= ~0x2000u;
                }
                *((_DWORD *)v109 + 9) = v203;
                uint64_t v113 = v240;
                v114 = v29;
              }
            }
            uint64_t v116 = llvm::AttributeSetNode::getSorted(v246, *((uint64_t **)&v265 + 1), v266);
            uint64_t v118 = llvm::AttributeList::get(v246, v115, v116, __src, __n);
            v260 = &v262;
            *(void *)v261 = 0x100000000;
            if (v113)
            {
              __s[0] = 7;
              int v119 = *((_DWORD *)v248 + 5);
              if (v119 < 0)
              {
                unint64_t v211 = *((void *)v248 - 4 * (v119 & 0x7FFFFFF) - 1);
                if ((v211 & 0xFFFFFFFF0) != 0)
                {
                  uint64_t v212 = (v211 >> 4);
                  v213 = v248;
                  v114 = v29;
                  do
                  {
                    uint64_t v214 = *((_DWORD *)v248 + 5) & 0x7FFFFFF;
                    v215 = (unsigned int *)((char *)v213 - *((void *)v248 - 4 * v214 - 1) + -32 * v214);
                    uint64_t v216 = *v215;
                    v217 = (char *)v248 + 32 * v216 + -32 * v214;
                    v218 = (void *)(v215[1] - v216);
                    uint64_t v219 = *((void *)v215 - 1);
                    v256[0] = v217;
                    v256[1] = v218;
                    uint64_t v257 = v219;
                    v220 = wmemchr(__s, *(_DWORD *)(v219 + 8), 1uLL);
                    if (v220) {
                      v221 = v220;
                    }
                    else {
                      v221 = &__s[1];
                    }
                    if ((char *)v221 - (char *)__s == 4) {
                      sub_1CD5C74F0((uint64_t)&v260, (uint64_t)v256);
                    }
                    v213 = (llvm::Value *)((char *)v213 + 16);
                    --v212;
                  }
                  while (v212);
                }
              }
              v120 = v248;
            }
            else
            {
              v120 = v248;
              int v121 = *((_DWORD *)v248 + 5);
              if (v121 < 0)
              {
                unint64_t v222 = *((void *)v248 - 4 * (v121 & 0x7FFFFFF) - 1);
                if ((v222 & 0xFFFFFFFF0) != 0)
                {
                  uint64_t v223 = (v222 >> 4);
                  v224 = v248;
                  do
                  {
                    uint64_t v225 = *((_DWORD *)v248 + 5) & 0x7FFFFFF;
                    v226 = (char *)v248 - 32 * v225;
                    v227 = (unsigned int *)((char *)v224 - *((void *)v226 - 1) + -32 * v225);
                    uint64_t v228 = *v227;
                    uint64_t v229 = v227[1];
                    uint64_t v230 = *((void *)v227 - 1);
                    v256[0] = &v226[32 * v228];
                    v256[1] = (void *)(v229 - v228);
                    uint64_t v257 = v230;
                    sub_1CD5C74F0((uint64_t)&v260, (uint64_t)v256);
                    v224 = (llvm::Value *)((char *)v224 + 16);
                    --v223;
                  }
                  while (v223);
                }
              }
            }
            int v122 = *((unsigned __int8 *)v120 + 16);
            if (v122 == 39)
            {
              v150 = *(uint64_t **)(a1 + 24);
              uint64_t v151 = *((void *)v4 + 3);
              uint64_t v152 = (uint64_t)v239[-4 * *((unsigned int *)v248 + 20) - 4];
              sub_1CD5C85DC((uint64_t)v248, (uint64_t)v256);
              __int16 v253 = 257;
              __int16 v255 = 257;
              uint64_t BitOrPointerCast = (uint64_t)sub_1CD4EFB0C(v151, (uint64_t)v4, v152, (uint64_t)v256[0], (int)v256[1], v272, v273, v153, 0, 0, (const char **)__s, 0);
              sub_1CD509770(v150, (llvm::Instruction *)BitOrPointerCast, (uint64_t)v252);
              if (v256[0] != &v257) {
                free(v256[0]);
              }
              uint64_t v126 = (uint64_t)v248;
            }
            else
            {
              v123 = *(uint64_t **)(a1 + 24);
              v124 = (uint64_t **)*((void *)v4 + 3);
              if (v122 == 33)
              {
                uint64_t v126 = (uint64_t)v248;
                uint64_t v148 = *((void *)v248 - 12);
                uint64_t v149 = *((void *)v248 - 8);
                LOWORD(v259) = 257;
                uint64_t BitOrPointerCast = (uint64_t)sub_1CD5C4DB8((uint64_t)v123, (uint64_t)v124, (uint64_t)v4, v148, v149, v272, v273, v117, (uint64_t)v260, v261[0], (uint64_t)v256);
              }
              else
              {
                LOWORD(v259) = 257;
                uint64_t BitOrPointerCast = sub_1CC233B6C(v123, v124, (uint64_t **)v4, v272, v273, (uint64_t)v260, v261[0], (uint64_t)v256, 0);
                uint64_t v126 = (uint64_t)v248;
                *(_WORD *)(BitOrPointerCast + 18) = *(_WORD *)(BitOrPointerCast + 18) & 0xFFFC | *((_WORD *)v248 + 9) & 3;
              }
            }
            llvm::Value::takeName((int32x2_t ****)BitOrPointerCast, (llvm::Value *)v126);
            *(_WORD *)(BitOrPointerCast + 18) = *(_WORD *)(BitOrPointerCast + 18) & 0xF003 | *(_WORD *)(v126 + 18) & 0xFFC;
            *(void *)(BitOrPointerCast + 64) = v118;
            LODWORD(v256[0]) = 2;
            llvm::Instruction::copyMetadata(BitOrPointerCast, v126, (int *)v256, 1);
            if (v114 == *(llvm::Value **)BitOrPointerCast || !*(void *)(v126 + 8))
            {
LABEL_225:
              if (*(void *)(v126 + 8))
              {
                uint64_t v130 = a1;
                sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v126, (llvm::Value *)BitOrPointerCast);
              }
              else
              {
                uint64_t v130 = a1;
                if (*(unsigned char *)(v126 + 17))
                {
                  if (v114 == *(llvm::Value **)BitOrPointerCast) {
                    llvm::ValueHandleBase::ValueIsRAUWd((llvm::ValueHandleBase *)v126, (llvm::Value *)BitOrPointerCast, v128);
                  }
                  else {
                    llvm::ValueHandleBase::ValueIsDeleted((llvm::ValueHandleBase *)v126, v127);
                  }
                  uint64_t v130 = a1;
                }
              }
              sub_1CC9D6844(v130, v126);
            }
            if (*(unsigned char *)(*(void *)BitOrPointerCast + 8) == 7)
            {
              uint64_t BitOrPointerCast = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)v126, v127);
              goto LABEL_225;
            }
            LOWORD(v259) = 257;
            uint64_t BitOrPointerCast = (uint64_t)llvm::CastInst::CreateBitOrPointerCast((llvm::CastInst *)BitOrPointerCast, v114, (const char **)v256, 0, v129);
            v154 = *(unsigned __int8 **)(v126 + 48);
            v251 = v154;
            if (v154) {
              llvm::MetadataTracking::track((uint64_t)&v251, v154, 2);
            }
            v155 = (unsigned __int8 **)(BitOrPointerCast + 48);
            if (&v251 == (unsigned __int8 **)(BitOrPointerCast + 48))
            {
              if (!v251) {
                goto LABEL_288;
              }
              int v231 = *v251;
              if ((v231 - 4) > 0x1E)
              {
                if ((v231 - 3) >= 0xFFFFFFFE) {
                  v234 = v251;
                }
                else {
                  v234 = 0;
                }
                if ((v231 - 3) < 0xFFFFFFFE)
                {
                  uint64_t v126 = (uint64_t)v248;
                  v114 = v241;
                  if (v231 == 3) {
                    *((void *)v251 + 1) = 0;
                  }
LABEL_288:
                  int v158 = *(unsigned __int8 *)(v126 + 16);
                  if (v158 == 39)
                  {
                    v164 = v239[-4 * *(unsigned int *)(v126 + 80) - 4];
                    v161 = v164 + 5;
                    for (j = (void *)v164[6]; ; j = (void *)j[1])
                    {
                      if (j == v161) {
                        goto LABEL_308;
                      }
                      v165 = j - 3;
                      if (!j) {
                        v165 = 0;
                      }
                      if (*((unsigned char *)v165 + 16) != 83) {
                        break;
                      }
                    }
LABEL_302:
                    unsigned int v166 = *((unsigned __int8 *)j - 8) - 38;
                    BOOL v167 = v166 > 0x38;
                    uint64_t v168 = (1 << v166) & 0x100060000000001;
                    if (v167 || v168 == 0) {
                      v161 = j;
                    }
                    else {
                      v161 = (void *)j[1];
                    }
                  }
                  else
                  {
                    uint64_t v159 = v126;
                    if (v158 != 33)
                    {
LABEL_311:
                      sub_1CCA331D4(a1, (llvm::Value *)BitOrPointerCast, v159);
                      uint64_t v170 = *(void *)(v126 + 8);
                      if (!v170) {
                        goto LABEL_225;
                      }
                      uint64_t v171 = *(void *)(a1 + 32);
                      while (1)
                      {
                        v172 = *(void **)(v170 + 24);
                        int v173 = *(_DWORD *)(v171 + 8);
                        v256[0] = v172;
                        LODWORD(v256[1]) = v173;
                        int v174 = *(_DWORD *)(v171 + 2080);
                        if (!v174) {
                          break;
                        }
                        uint64_t v175 = *(void *)(v171 + 2064);
                        int v176 = v174 - 1;
                        unsigned int v177 = v176 & ((v172 >> 4) ^ (v172 >> 9));
                        v178 = (void *)(v175 + 16 * v177);
                        v179 = (void *)*v178;
                        if ((void *)*v178 != v172)
                        {
                          v180 = 0;
                          int v181 = 1;
                          while (v179 != (void *)-4096)
                          {
                            if (v180) {
                              BOOL v182 = 0;
                            }
                            else {
                              BOOL v182 = v179 == (void *)-8192;
                            }
                            if (v182) {
                              v180 = v178;
                            }
                            unsigned int v183 = v177 + v181++;
                            unsigned int v177 = v183 & v176;
                            v178 = (void *)(v175 + 16 * v177);
                            v179 = (void *)*v178;
                            if ((void *)*v178 == v172) {
                              goto LABEL_329;
                            }
                          }
                          if (v180) {
                            v184 = v180;
                          }
                          else {
                            v184 = v178;
                          }
                          goto LABEL_327;
                        }
LABEL_329:
                        uint64_t v170 = *(void *)(v170 + 8);
                        if (!v170)
                        {
                          uint64_t v126 = (uint64_t)v248;
                          goto LABEL_225;
                        }
                      }
                      v184 = 0;
LABEL_327:
                      v185 = sub_1CBF569E0((_DWORD *)(v171 + 2064), (uint64_t)v256, (uint64_t *)v256, v184);
                      void *v185 = v256[0];
                      *((_DWORD *)v185 + 2) = v256[1];
                      unint64_t v186 = *(unsigned int *)(v171 + 8);
                      if (v186 >= *(unsigned int *)(v171 + 12)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(*(void *)v171 + 8 * v186) = v172;
                      ++*(_DWORD *)(v171 + 8);
                      goto LABEL_329;
                    }
                    uint64_t v160 = *(void *)(v126 - 96);
                    v161 = (void *)(v160 + 40);
                    for (j = *(void **)(v160 + 48); j != v161; j = (void *)j[1])
                    {
                      v163 = j - 3;
                      if (!j) {
                        v163 = 0;
                      }
                      if (*((unsigned char *)v163 + 16) != 83) {
                        goto LABEL_302;
                      }
                    }
                  }
LABEL_308:
                  if (v161) {
                    uint64_t v159 = (uint64_t)(v161 - 3);
                  }
                  else {
                    uint64_t v159 = 0;
                  }
                  goto LABEL_311;
                }
                unint64_t v233 = (unint64_t)(v234 + 8);
              }
              else
              {
                uint64_t v126 = (uint64_t)v248;
                v114 = v241;
                if ((v251[1] & 0x7F) != 2 && !*((_DWORD *)v251 + 3)) {
                  goto LABEL_288;
                }
                uint64_t v232 = *((void *)v251 + 2);
                if ((v232 & 4) == 0) {
                  goto LABEL_288;
                }
                unint64_t v233 = v232 & 0xFFFFFFFFFFFFFFF8;
                if (!v233) {
                  goto LABEL_288;
                }
              }
              v256[0] = &v251;
              sub_1CC5FA668(v233 + 16, v256);
              uint64_t v126 = (uint64_t)v248;
              v114 = v241;
              goto LABEL_288;
            }
            v156 = *v155;
            if (!*v155)
            {
LABEL_286:
              v157 = v251;
              *v155 = v251;
              if (v157)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v251, v157, BitOrPointerCast + 48);
                v251 = 0;
              }
              goto LABEL_288;
            }
            int v195 = *v156;
            if ((v195 - 4) > 0x1E)
            {
              if ((v195 - 3) >= 0xFFFFFFFE) {
                v204 = *v155;
              }
              else {
                v204 = 0;
              }
              if ((v195 - 3) < 0xFFFFFFFE)
              {
                uint64_t v126 = (uint64_t)v248;
                v114 = v241;
                if (v195 == 3) {
                  *((void *)v156 + 1) = 0;
                }
                goto LABEL_286;
              }
              unint64_t v197 = (unint64_t)(v204 + 8);
            }
            else
            {
              uint64_t v126 = (uint64_t)v248;
              v114 = v241;
              if ((v156[1] & 0x7F) != 2 && !*((_DWORD *)v156 + 3)) {
                goto LABEL_286;
              }
              uint64_t v196 = *((void *)v156 + 2);
              if ((v196 & 4) == 0) {
                goto LABEL_286;
              }
              unint64_t v197 = v196 & 0xFFFFFFFFFFFFFFF8;
              if (!v197) {
                goto LABEL_286;
              }
            }
            v256[0] = (void *)(BitOrPointerCast + 48);
            sub_1CC5FA668(v197 + 16, v256);
            uint64_t v126 = (uint64_t)v248;
            v114 = v241;
            goto LABEL_286;
          }
          unint64_t v86 = 0x80013080004C0002;
          uint64_t v87 = 13304;
        }
        v256[0] = (void *)v86;
        v256[1] = (void *)v87;
        goto LABEL_151;
      }
      int v77 = *(_DWORD *)(v28 + 12);
    }
    else
    {
      int v77 = *(_DWORD *)(v28 + 12);
      unsigned int v75 = v245;
      unint64_t v76 = v242;
      if (*((llvm::Value **)v4 + 9) == (llvm::Value *)((char *)v4 + 72))
      {
        unsigned int v78 = v77 - 1;
        if ((*((unsigned char *)v4 + 34) & 0x80) != 0) {
          goto LABEL_137;
        }
        goto LABEL_131;
      }
    }
    unsigned int v78 = v77 - 1;
    goto LABEL_137;
  }
  return 0;
}

char *sub_1CCA32034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  v4 = (llvm::detail::IEEEFloat **)(a2 - 32);
  v5 = **(llvm::Constant ***)(a2 - 32);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  if (v6 && (*(unsigned char *)(v6 + 26) & 4) != 0) {
    return 0;
  }
  uint64_t v188 = *(void *)(a2 + 64);
  uint64_t v8 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32));
  uint64_t v9 = v8;
  uint64_t v10 = *((void *)v8 + 14);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = *((void *)v8 + 3);
  uint64_t v12 = *(unsigned int *)(v11 + 12);
  if (v12 == 1) {
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(v11 + 16) + 8;
  unsigned int v15 = *(_DWORD *)(v10 + 8);
  uint64_t v16 = v10 + 40;
  uint64_t v17 = 8 * v12 - 8;
  while (1)
  {
    if ((int)v13 + 2 < v15)
    {
      uint64_t v18 = *(void *)(v16 + 8 * (v13 + 2));
      if (v18)
      {
        if ((*(unsigned char *)(v18 + 14) & 4) != 0) {
          break;
        }
      }
    }
    ++v13;
    v17 -= 8;
    if (!v17) {
      goto LABEL_13;
    }
  }
  uint64_t v20 = *(void *)(v14 + 8 * v13);
  if (!v20)
  {
LABEL_13:
    if (*(llvm::Constant **)v8 != v5) {
      uint64_t v9 = sub_1CC56C0C0((llvm *)0x31, v8, v5, 0);
    }
    *(void *)(a2 + 72) = v7;
    if (*(void *)(a2 - 32))
    {
      **(void **)(a2 - 16) = *(void *)(a2 - 24);
      uint64_t v21 = *(void *)(a2 - 24);
      if (v21) {
        *(void *)(v21 + 16) = *(void *)(a2 - 16);
      }
    }
    llvm::Value *v4 = v9;
    if (v9)
    {
      uint64_t v24 = *((void *)v9 + 1);
      unsigned int v23 = (llvm::detail::IEEEFloat ***)((char *)v9 + 8);
      uint64_t v22 = v24;
      *(void *)(a2 - 24) = v24;
      if (v24) {
        *(void *)(v22 + 16) = a2 - 24;
      }
      *(void *)(a2 - 16) = v23;
      *unsigned int v23 = v4;
    }
    return (char *)a2;
  }
  uint64_t v182 = v20;
  uint64_t v26 = 0;
  v198 = 0;
  v199 = 0;
  unint64_t v200 = 0;
  int v195 = 0;
  uint64_t v196 = 0;
  unint64_t v197 = 0;
  int v27 = *(unsigned __int8 *)(a2 + 16);
  v178 = v4;
  uint64_t v179 = a2;
  uint64_t v180 = v7;
  if (v27 != 84)
  {
    if (v27 == 39) {
      uint64_t v26 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v26 = 2;
    }
  }
  int v28 = *(_DWORD *)(a2 + 20);
  if (v28 < 0 && (uint64_t v156 = a2 - 32 * (v28 & 0x7FFFFFF), v157 = *(void *)(v156 - 8), (v157 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v30 = -(uint64_t)(v28 & 0x7FFFFFF);
    int v29 = *(_DWORD *)(v156 - 12) - *(_DWORD *)(v156 - v157);
  }
  else
  {
    int v29 = 0;
    uint64_t v30 = -(uint64_t)(v28 & 0x7FFFFFF);
  }
  sub_1CD4F8818((uint64_t)&v198, ((-32 * v26 + 32 * (unint64_t)-v29 - 32 * v30 - 32) >> 5) + 1);
  int v31 = *(unsigned __int8 *)(a2 + 16);
  if (v31 == 84)
  {
    uint64_t v32 = 0;
  }
  else if (v31 == 39)
  {
    uint64_t v32 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v32 = 2;
  }
  int v33 = *(_DWORD *)(a2 + 20);
  if (v33 < 0 && (uint64_t v158 = a2 - 32 * (v33 & 0x7FFFFFF), v159 = *(void *)(v158 - 8), (v159 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v35 = -(uint64_t)(v33 & 0x7FFFFFF);
    int v34 = *(_DWORD *)(v158 - 12) - *(_DWORD *)(v158 - v159);
  }
  else
  {
    int v34 = 0;
    uint64_t v35 = -(uint64_t)(v33 & 0x7FFFFFF);
  }
  sub_1CD45A1D4((uint64_t)&v195, ((-32 * v32 + 32 * (unint64_t)-v34 - 32 * v35 - 32) >> 5));
  int v36 = *(_DWORD *)(a2 + 20);
  uint64_t v37 = (void *)(a2 - 32 * (v36 & 0x7FFFFFF));
  int v38 = *(unsigned __int8 *)(a2 + 16);
  if (v38 == 84)
  {
    uint64_t v39 = 0;
  }
  else if (v38 == 39)
  {
    uint64_t v39 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v39 = 2;
  }
  if (v36 < 0 && (uint64_t v160 = *(v37 - 1), (v160 & 0xFFFFFFFF0) != 0)) {
    uint64_t v40 = (*((_DWORD *)v37 - 3) - *(_DWORD *)((char *)v37 - v160));
  }
  else {
    uint64_t v40 = 0;
  }
  int v41 = 0;
  uint64_t v186 = a2 - 32 * v39 - 32 * v40 - 32;
  int v181 = (uint64_t *)(v188 + 40);
  while (1)
  {
    if (v13 == v41)
    {
      uint64_t v42 = *(unsigned __int8 **)(a3 + 64 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      if (*(void *)v42 != v182)
      {
        int v43 = *(uint64_t **)(a1 + 24);
        uint64_t v205 = "nest";
        v207[8] = 259;
        if (*(void *)v42 != v182)
        {
          if (v42[16] <= 0x14u)
          {
            uint64_t v42 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v43[9] + 224))(v43[9], 49, v42, v182);
            if (v42) {
              BOOL v47 = v42[16] >= 0x1Cu;
            }
            else {
              BOOL v47 = 0;
            }
            if (v47)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, const char **, uint64_t, uint64_t))(*(void *)v43[10]
                                                                                                  + 16))(v43[10], v42, &v205, v43[6], v43[7]);
              uint64_t v90 = *((unsigned int *)v43 + 2);
              if (v90)
              {
                uint64_t v91 = *v43;
                uint64_t v92 = *v43 + 16 * v90;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v42, *(_DWORD *)v91, *(llvm::MDNode **)(v91 + 8));
                  v91 += 16;
                }
                while (v91 != v92);
              }
            }
          }
          else
          {
            __int16 v204 = 257;
            uint64_t v42 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v42, v182, (const char **)&v201, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, const char **, uint64_t, uint64_t))(*(void *)v43[10]
                                                                                                + 16))(v43[10], v42, &v205, v43[6], v43[7]);
            uint64_t v44 = *((unsigned int *)v43 + 2);
            if (v44)
            {
              uint64_t v45 = *v43;
              uint64_t v46 = *v43 + 16 * v44;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v42, *(_DWORD *)v45, *(llvm::MDNode **)(v45 + 8));
                v45 += 16;
              }
              while (v45 != v46);
            }
          }
        }
      }
      uint64_t v48 = v199;
      if (v199 >= v200)
      {
        uint64_t v50 = (char *)v198;
        uint64_t v51 = (v199 - (unsigned char *)v198) >> 3;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61) {
          goto LABEL_226;
        }
        uint64_t v53 = v200 - (unsigned char *)v198;
        if ((v200 - (unsigned char *)v198) >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          if (v54 >> 61) {
            goto LABEL_227;
          }
          v55 = (char *)operator new(8 * v54);
        }
        else
        {
          v55 = 0;
        }
        int v56 = (unsigned __int8 **)&v55[8 * v51];
        *int v56 = v42;
        uint64_t v49 = (char *)(v56 + 1);
        if (v48 != v50)
        {
          do
          {
            long long v57 = (unsigned __int8 *)*((void *)v48 - 1);
            v48 -= 8;
            *--int v56 = v57;
          }
          while (v48 != v50);
          uint64_t v48 = (char *)v198;
        }
        v198 = v56;
        v199 = v49;
        unint64_t v200 = &v55[8 * v54];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *(void *)v199 = v42;
        uint64_t v49 = v48 + 8;
      }
      v199 = v49;
      BOOL v58 = v196;
      if (v196 >= v197)
      {
        uint64_t v60 = (char *)v195;
        uint64_t v61 = (v196 - (unsigned char *)v195) >> 3;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_226;
        }
        uint64_t v63 = v197 - (unsigned char *)v195;
        if ((v197 - (unsigned char *)v195) >> 2 > v62) {
          unint64_t v62 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          if (v64 >> 61) {
            goto LABEL_227;
          }
          unsigned int v65 = (char *)operator new(8 * v64);
        }
        else
        {
          unsigned int v65 = 0;
        }
        v66 = &v65[8 * v61];
        *(void *)v66 = v18;
        uint64_t v59 = v66 + 8;
        if (v58 != v60)
        {
          do
          {
            uint64_t v67 = *((void *)v58 - 1);
            v58 -= 8;
            *((void *)v66 - 1) = v67;
            v66 -= 8;
          }
          while (v58 != v60);
          BOOL v58 = (char *)v195;
        }
        int v195 = v66;
        unint64_t v197 = &v65[8 * v64];
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *(void *)uint64_t v196 = v18;
        uint64_t v59 = v58 + 8;
      }
      uint64_t v196 = v59;
    }
    if (v37 == (void *)v186) {
      break;
    }
    uint64_t v68 = *v37;
    int v69 = v199;
    if (v199 >= v200)
    {
      v71 = (char *)v198;
      uint64_t v72 = (v199 - (unsigned char *)v198) >> 3;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61) {
        goto LABEL_226;
      }
      uint64_t v74 = v200 - (unsigned char *)v198;
      if ((v200 - (unsigned char *)v198) >> 2 > v73) {
        unint64_t v73 = v74 >> 2;
      }
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v73;
      }
      if (v75)
      {
        if (v75 >> 61) {
          goto LABEL_227;
        }
        unint64_t v76 = (char *)operator new(8 * v75);
      }
      else
      {
        unint64_t v76 = 0;
      }
      int v77 = &v76[8 * v72];
      *(void *)int v77 = v68;
      v70 = v77 + 8;
      if (v69 != v71)
      {
        do
        {
          uint64_t v78 = *((void *)v69 - 1);
          v69 -= 8;
          *((void *)v77 - 1) = v78;
          v77 -= 8;
        }
        while (v69 != v71);
        int v69 = (char *)v198;
      }
      v198 = v77;
      v199 = v70;
      unint64_t v200 = &v76[8 * v75];
      if (v69) {
        operator delete(v69);
      }
    }
    else
    {
      *(void *)v199 = v68;
      v70 = v69 + 8;
    }
    v199 = v70;
    if (v188 && (v41 + 2) < *(_DWORD *)(v188 + 8)) {
      uint64_t v79 = v181[v41 + 2];
    }
    else {
      uint64_t v79 = 0;
    }
    BOOL v80 = v196;
    if (v196 >= v197)
    {
      BOOL v82 = (char *)v195;
      uint64_t v83 = (v196 - (unsigned char *)v195) >> 3;
      unint64_t v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61) {
LABEL_226:
      }
        abort();
      uint64_t v85 = v197 - (unsigned char *)v195;
      if ((v197 - (unsigned char *)v195) >> 2 > v84) {
        unint64_t v84 = v85 >> 2;
      }
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v84;
      }
      if (v86)
      {
        if (v86 >> 61) {
LABEL_227:
        }
          sub_1CB833614();
        uint64_t v87 = (char *)operator new(8 * v86);
      }
      else
      {
        uint64_t v87 = 0;
      }
      int v88 = (uint64_t *)&v87[8 * v83];
      *int v88 = v79;
      v81 = (char *)(v88 + 1);
      if (v80 != v82)
      {
        do
        {
          uint64_t v89 = *((void *)v80 - 1);
          v80 -= 8;
          *--int v88 = v89;
        }
        while (v80 != v82);
        BOOL v80 = (char *)v195;
      }
      int v195 = v88;
      unint64_t v197 = &v87[8 * v86];
      if (v80) {
        operator delete(v80);
      }
    }
    else
    {
      *(void *)uint64_t v196 = v79;
      v81 = v80 + 8;
    }
    uint64_t v196 = v81;
    ++v41;
    v37 += 4;
  }
  __p = 0;
  int v193 = 0;
  int v194 = 0;
  uint64_t v93 = v180;
  sub_1CD45A1D4((uint64_t)&__p, *(unsigned int *)(v180 + 12));
  int v94 = 0;
  uint64_t v95 = *(uint64_t **)(v180 + 16);
  int v96 = &v95[*(unsigned int *)(v180 + 12)];
  while (1)
  {
    if (v13 == v94)
    {
      uint64_t v97 = (char *)v193;
      if (v193 >= (uint64_t *)v194)
      {
        int v99 = (char *)__p;
        uint64_t v100 = ((char *)v193 - (unsigned char *)__p) >> 3;
        unint64_t v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 61) {
          goto LABEL_226;
        }
        uint64_t v102 = v194 - (unsigned char *)__p;
        if ((v194 - (unsigned char *)__p) >> 2 > v101) {
          unint64_t v101 = v102 >> 2;
        }
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v103 = v101;
        }
        if (v103)
        {
          if (v103 >> 61) {
            goto LABEL_227;
          }
          uint64_t v104 = (char *)operator new(8 * v103);
        }
        else
        {
          uint64_t v104 = 0;
        }
        uint64_t v105 = (uint64_t *)&v104[8 * v100];
        *uint64_t v105 = v182;
        uint64_t v98 = v105 + 1;
        if (v97 != v99)
        {
          do
          {
            uint64_t v106 = *((void *)v97 - 1);
            v97 -= 8;
            *--uint64_t v105 = v106;
          }
          while (v97 != v99);
          uint64_t v97 = (char *)__p;
        }
        __p = v105;
        int v194 = &v104[8 * v103];
        if (v97) {
          operator delete(v97);
        }
      }
      else
      {
        *int v193 = v182;
        uint64_t v98 = (uint64_t *)(v97 + 8);
      }
      int v193 = v98;
      uint64_t v93 = v180;
    }
    if (++v95 == v96) {
      break;
    }
    v107 = (char *)v193;
    if (v193 >= (uint64_t *)v194)
    {
      v109 = (char *)__p;
      uint64_t v110 = ((char *)v193 - (unsigned char *)__p) >> 3;
      unint64_t v111 = v110 + 1;
      if ((unint64_t)(v110 + 1) >> 61) {
        goto LABEL_226;
      }
      uint64_t v112 = v194 - (unsigned char *)__p;
      if ((v194 - (unsigned char *)__p) >> 2 > v111) {
        unint64_t v111 = v112 >> 2;
      }
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v113 = v111;
      }
      if (v113)
      {
        if (v113 >> 61) {
          goto LABEL_227;
        }
        v114 = (char *)operator new(8 * v113);
      }
      else
      {
        v114 = 0;
      }
      uint64_t v115 = &v114[8 * v110];
      *(void *)uint64_t v115 = *v95;
      v108 = (uint64_t *)(v115 + 8);
      if (v107 != v109)
      {
        do
        {
          uint64_t v116 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v115 - 1) = v116;
          v115 -= 8;
        }
        while (v107 != v109);
        v107 = (char *)__p;
      }
      __p = v115;
      int v194 = &v114[8 * v113];
      if (v107) {
        operator delete(v107);
      }
    }
    else
    {
      *int v193 = *v95;
      v108 = (uint64_t *)(v107 + 8);
    }
    uint64_t v93 = v180;
    int v193 = v108;
    ++v94;
  }
  uint64_t v117 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(v93 + 16), (uint64_t)__p, ((char *)v193 - (unsigned char *)__p) >> 3, *(_DWORD *)(v93 + 8) > 0xFFu);
  uint64_t v118 = *(void *)v9;
  if (v118 == llvm::PointerType::get(v117, 0))
  {
    uint64_t v120 = v188;
  }
  else
  {
    int v119 = (llvm::Constant *)llvm::PointerType::get(v117, 0);
    uint64_t v120 = v188;
    if (*(llvm::Constant **)v9 != v119) {
      uint64_t v9 = sub_1CC56C0C0((llvm *)0x31, v9, v119, 0);
    }
  }
  if (!v120 || (int v121 = *(_DWORD *)(v120 + 8)) == 0)
  {
    uint64_t v122 = 0;
    goto LABEL_175;
  }
  uint64_t v122 = *v181;
  if (v121 == 1)
  {
LABEL_175:
    uint64_t v123 = 0;
    goto LABEL_176;
  }
  uint64_t v123 = *(void *)(v120 + 48);
LABEL_176:
  uint64_t v124 = llvm::AttributeList::get(*(uint64_t **)v180, v122, v123, v195, (v196 - (unsigned char *)v195) >> 3);
  uint64_t v205 = (const char *)v207;
  uint64_t v206 = 0x100000000;
  int v125 = *(_DWORD *)(v179 + 20);
  if (v125 < 0)
  {
    unint64_t v161 = *(void *)(v179 - 32 * (v125 & 0x7FFFFFF) - 8);
    if ((v161 & 0xFFFFFFFF0) != 0)
    {
      uint64_t v162 = (v161 >> 4);
      uint64_t v163 = v179;
      do
      {
        uint64_t v164 = *(_DWORD *)(v179 + 20) & 0x7FFFFFF;
        uint64_t v165 = v179 - 32 * v164;
        unsigned int v166 = (unsigned int *)(v163 - (*(void *)(v165 - 8) + 32 * v164));
        uint64_t v167 = *v166;
        uint64_t v168 = v166[1];
        uint64_t v169 = *((void *)v166 - 1);
        unint64_t v201 = (void *)(v165 + 32 * v167);
        uint64_t v202 = v168 - v167;
        uint64_t v203 = v169;
        sub_1CD5C74F0((uint64_t)&v205, (uint64_t)&v201);
        v163 += 16;
        --v162;
      }
      while (v162);
    }
  }
  int v126 = *(unsigned __int8 *)(v179 + 16);
  if (v126 == 39)
  {
    uint64_t v153 = (uint64_t)v178[-4 * *(unsigned int *)(v179 + 80) - 4];
    sub_1CD5C85DC(v179, (uint64_t)&v201);
    __int16 v191 = 257;
    uint64_t v19 = sub_1CD4EFB0C((uint64_t)v117, (uint64_t)v9, v153, (uint64_t)v201, v202, (uint64_t *)v198, (v199 - (unsigned char *)v198) >> 3, v154, (uint64_t)v205, v206, &v190, 0);
    if (v201 != &v203) {
      free(v201);
    }
    uint64_t v140 = v179;
    *((_WORD *)v19 + 9) = *((_WORD *)v19 + 9) & 0xF003 | *(_WORD *)(v179 + 18) & 0xFFC;
    *((void *)v19 + 8) = v124;
  }
  else if (v126 == 33)
  {
    uint64_t v140 = v179;
    uint64_t v151 = *(void *)(v179 - 96);
    uint64_t v152 = *(void *)(v179 - 64);
    __int16 v204 = 257;
    uint64_t v19 = sub_1CD4EF89C((uint64_t)v117, (uint64_t)v9, v151, v152, (uint64_t *)v198, (v199 - (unsigned char *)v198) >> 3, (uint64_t)v205, v206, (const char **)&v201, 0);
    *((_WORD *)v19 + 9) = *((_WORD *)v19 + 9) & 0xF003 | *(_WORD *)(v179 + 18) & 0xFFC;
    *((void *)v19 + 8) = v124;
  }
  else
  {
    uint64_t v187 = (uint64_t **)v117;
    v185 = (uint64_t *)v198;
    uint64_t v127 = v199 - (unsigned char *)v198;
    uint64_t v128 = v206;
    __int16 v204 = 257;
    if (v206)
    {
      uint64_t v130 = v124;
      int v131 = 0;
      uint64_t v173 = 48 * v206;
      uint64_t v129 = (uint64_t)v205;
      int v174 = v205 + 32;
      do
      {
        v131 += (*v174 - *(v174 - 1)) >> 3;
        v174 += 6;
        v173 -= 48;
      }
      while (v173);
    }
    else
    {
      uint64_t v129 = (uint64_t)v205;
      uint64_t v130 = v124;
      int v131 = 0;
    }
    int v132 = ((unint64_t)v127 >> 3) + 1;
    uint64_t v133 = (v131 + v132);
    uint64_t v134 = (16 * v206);
    if (v134) {
      uint64_t v135 = (16 * v206) | 8u;
    }
    else {
      uint64_t v135 = 0;
    }
    v136 = (char *)operator new(v135 + 32 * v133 + 80);
    uint64_t v137 = &v136[v135];
    uint64_t v19 = &v136[32 * v133 + v135];
    *((_DWORD *)v19 + 5) = v133 & 0x7FFFFFF | ((v134 != 0) << 31) | *((_DWORD *)v19 + 5) & 0x38000000;
    if (v133)
    {
      do
      {
        *(void *)uint64_t v137 = 0;
        *((void *)v137 + 1) = 0;
        *((void *)v137 + 2) = 0;
        *((void *)v137 + 3) = v19;
        v137 += 32;
      }
      while (v137 != v19);
    }
    if (v134) {
      *(void *)&v136[v134] = v134;
    }
    int v138 = 0;
    if (v128)
    {
      uint64_t v175 = 48 * v128;
      int v176 = (void *)(v129 + 32);
      do
      {
        v138 += (*v176 - *(v176 - 1)) >> 3;
        v176 += 6;
        v175 -= 48;
      }
      while (v175);
    }
    *(void *)uint64_t v19 = *v187[2];
    *((void *)v19 + 1) = 0;
    unsigned int v139 = *((_DWORD *)v19 + 5) & 0xC0000000 | (v138 + v132) & 0x7FFFFFF;
    *((_DWORD *)v19 + 4) = 84;
    *((_DWORD *)v19 + 5) = v139;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *((_DWORD *)v19 + 14) = 0;
    *((void *)v19 + 8) = 0;
    llvm::CallInst::init((uint64_t ***)v19, v187, (uint64_t **)v9, v185, v127 >> 3, v129, v128, (const char **)&v201);
    uint64_t v140 = v179;
    *((_WORD *)v19 + 9) = *((_WORD *)v19 + 9) & 0xF000 | *(_WORD *)(v179 + 18) & 0xFFF;
    *((void *)v19 + 8) = v130;
  }
  uint64_t v141 = *(unsigned __int8 **)(v140 + 48);
  uint64_t v189 = v141;
  if (v141) {
    llvm::MetadataTracking::track((uint64_t)&v189, v141, 2);
  }
  uint64_t v142 = (unsigned __int8 **)(v19 + 48);
  if (&v189 != (unsigned __int8 **)(v19 + 48))
  {
    uint64_t v143 = *v142;
    if (!*v142) {
      goto LABEL_194;
    }
    int v148 = *v143;
    if ((v148 - 4) > 0x1E)
    {
      if ((v148 - 3) >= 0xFFFFFFFE) {
        v155 = *v142;
      }
      else {
        v155 = 0;
      }
      if ((v148 - 3) < 0xFFFFFFFE)
      {
        if (v148 == 3) {
          *((void *)v143 + 1) = 0;
        }
        goto LABEL_194;
      }
      unint64_t v150 = (unint64_t)(v155 + 8);
    }
    else if ((v143[1] & 0x7F) != 2 && !*((_DWORD *)v143 + 3) {
           || (uint64_t v149 = *((void *)v143 + 2), (v149 & 4) == 0)
    }
           || (unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_194:
      uint64_t v144 = v189;
      *uint64_t v142 = v189;
      if (v144)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v189, v144, (uint64_t)(v19 + 48));
        uint64_t v189 = 0;
      }
      goto LABEL_196;
    }
    unint64_t v201 = v19 + 48;
    sub_1CC5FA668(v150 + 16, &v201);
    goto LABEL_194;
  }
  if (v189)
  {
    int v170 = *v189;
    if ((v170 - 4) > 0x1E)
    {
      if ((v170 - 3) >= 0xFFFFFFFE) {
        unsigned int v177 = v189;
      }
      else {
        unsigned int v177 = 0;
      }
      if ((v170 - 3) < 0xFFFFFFFE)
      {
        if (v170 == 3) {
          *((void *)v189 + 1) = 0;
        }
        goto LABEL_196;
      }
      unint64_t v172 = (unint64_t)(v177 + 8);
    }
    else
    {
      if ((v189[1] & 0x7F) != 2 && !*((_DWORD *)v189 + 3)) {
        goto LABEL_196;
      }
      uint64_t v171 = *((void *)v189 + 2);
      if ((v171 & 4) == 0) {
        goto LABEL_196;
      }
      unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFF8;
      if (!v172) {
        goto LABEL_196;
      }
    }
    unint64_t v201 = &v189;
    sub_1CC5FA668(v172 + 16, &v201);
  }
LABEL_196:
  uint64_t v145 = (char *)v205;
  if (v206)
  {
    uint64_t v146 = 48 * v206;
    BOOL v147 = v205 - 48;
    do
    {
      sub_1CD4AF9B4((uint64_t)&v147[v146]);
      v146 -= 48;
    }
    while (v146);
    uint64_t v145 = (char *)v205;
  }
  if (v145 != (char *)v207) {
    free(v145);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v195) {
    operator delete(v195);
  }
  if (v198)
  {
    v199 = (char *)v198;
    operator delete(v198);
  }
  return v19;
}

void sub_1CCA32FA0(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    v5 = 0;
    if (!a1) {
      return;
    }
    goto LABEL_29;
  }
  v5 = 0;
  do
  {
    uint64_t v6 = *(void *)(v4 + 24);
    BOOL v7 = sub_1CC070820(v6);
    if (v6) {
      BOOL v8 = !v7;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      unint64_t v9 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v9)
      {
        uint64_t v11 = *a2;
        uint64_t v12 = v5 - *a2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
LABEL_55:
        }
          abort();
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 >> 61) {
LABEL_56:
          }
            sub_1CB833614();
          uint64_t v16 = (char *)operator new(8 * v15);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (uint64_t *)&v16[8 * v12];
        *uint64_t v17 = v6;
        uint64_t v10 = v17 + 1;
        if (v5 != v11)
        {
          do
          {
            uint64_t v18 = *--v5;
            *--uint64_t v17 = v18;
          }
          while (v5 != v11);
          v5 = *a2;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = (uint64_t *)&v16[8 * v15];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        uint64_t *v5 = v6;
        uint64_t v10 = v5 + 1;
      }
      a2[1] = v10;
      v5 = v10;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
  if (a1)
  {
LABEL_29:
    if (*(unsigned char *)(a1 + 16) == 33)
    {
      for (uint64_t i = *(void *)(llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(a1 - 64)) + 8);
            i;
            uint64_t i = *(void *)(i + 8))
      {
        uint64_t v20 = *(void *)(i + 24);
        BOOL v21 = sub_1CC070820(v20);
        if (v20) {
          BOOL v22 = !v21;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22)
        {
          unint64_t v23 = (unint64_t)a2[2];
          if ((unint64_t)v5 >= v23)
          {
            uint64_t v25 = *a2;
            uint64_t v26 = v5 - *a2;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              goto LABEL_55;
            }
            uint64_t v28 = v23 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              if (v29 >> 61) {
                goto LABEL_56;
              }
              uint64_t v30 = (char *)operator new(8 * v29);
            }
            else
            {
              uint64_t v30 = 0;
            }
            int v31 = (uint64_t *)&v30[8 * v26];
            uint64_t *v31 = v20;
            uint64_t v24 = v31 + 1;
            if (v5 != v25)
            {
              do
              {
                uint64_t v32 = *--v5;
                *--int v31 = v32;
              }
              while (v5 != v25);
              v5 = *a2;
            }
            *a2 = v31;
            a2[1] = v24;
            a2[2] = (uint64_t *)&v30[8 * v29];
            if (v5) {
              operator delete(v5);
            }
          }
          else
          {
            uint64_t *v5 = v20;
            uint64_t v24 = v5 + 1;
          }
          a2[1] = v24;
          v5 = v24;
        }
      }
    }
  }
}

llvm::Value *sub_1CCA331D4(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = (uint64_t *)(a3 + 24);
  *((void *)a2 + 5) = v5;
  *(_WORD *)(v5 + 18) &= ~0x8000u;
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v23 = *(void *)(v5 + 56);
    if (v23)
    {
      uint64_t v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24) {
        llvm::ValueSymbolTable::reinsertValue(v24, a2);
      }
    }
  }
  uint64_t v7 = *v6;
  *((void *)a2 + 3) = *v6;
  *((void *)a2 + 4) = v6;
  *(void *)(v7 + 8) = (char *)a2 + 24;
  *uint64_t v6 = (uint64_t)a2 + 24;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v25 = a2;
  if (*(unsigned char *)(v8 + 2088))
  {
    uint64_t v10 = v8 + 2096;
    int v9 = 16;
  }
  else
  {
    int v9 = *(_DWORD *)(v8 + 2104);
    if (!v9)
    {
      uint64_t v19 = 0;
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(v8 + 2096);
  }
  int v11 = v9 - 1;
  unsigned int v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v13 = (llvm::Value **)(v10 + 8 * v12);
  uint64_t v14 = *v13;
  if (*v13 == a2) {
    return a2;
  }
  unint64_t v15 = 0;
  int v16 = 1;
  while (v14 != (llvm::Value *)-4096)
  {
    if (v15) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v14 == (llvm::Value *)-8192;
    }
    if (v17) {
      unint64_t v15 = v13;
    }
    unsigned int v18 = v12 + v16++;
    unsigned int v12 = v18 & v11;
    unint64_t v13 = (llvm::Value **)(v10 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 == a2) {
      return a2;
    }
  }
  if (v15) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = v13;
  }
LABEL_18:
  uint64_t v20 = sub_1CBFD5BBC(v8 + 2088, (uint64_t)&v25, &v25, v19);
  *uint64_t v20 = v25;
  unsigned int v21 = *(_DWORD *)(v8 + 2232);
  if (v21 >= *(_DWORD *)(v8 + 2236)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v8 + 2224) + 8 * v21) = v25;
  ++*(_DWORD *)(v8 + 2232);
  return a2;
}

uint64_t sub_1CCA33354(uint64_t a1, uint64_t *a2)
{
  if (!sub_1CCA339A8(a1, 0, 1)) {
    return 0;
  }
  llvm::SampleInfo::SampleInfo((uint64_t)v6, *(_DWORD *)(*(void *)(a1 - 32) + 36), 1);
  if (v7 != -1) {
    return 0;
  }
  uint64_t v4 = sub_1CCA33BC0((uint64_t)v6, a1, a2);
  sub_1CCA33E84(a1, v4, (uint64_t)a2);
  return v4;
}

uint64_t sub_1CCA333E8(uint64_t a1, uint64_t *a2)
{
  if (!sub_1CCA339A8(a1, 1, 1)) {
    return 0;
  }
  llvm::SampleInfo::SampleInfo((uint64_t)v6, *(_DWORD *)(*(void *)(a1 - 32) + 36), 1);
  if (v7 != -1) {
    return 0;
  }
  uint64_t v4 = sub_1CCA33BC0((uint64_t)v6, a1, a2);
  sub_1CCA343DC(a1, v4, (uint64_t)a2);
  return v4;
}

void sub_1CCA3347C(uint64_t a1)
{
  v67[8] = *MEMORY[0x1E4F143B8];
  llvm::SampleInfo::SampleInfo((uint64_t)&v62, *(_DWORD *)(*(void *)(a1 - 32) + 36), 1);
  uint64_t v3 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v63);
  uint64_t v4 = (unsigned int *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    uint64_t v4 = *(unsigned int **)v4;
  }
  int8x8_t v5 = (int8x8_t)*v4;
  int8x8_t v6 = vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8((uint8x8_t)v6);
  __int32 v7 = v6.i32[0];
  BOOL v9 = v6.i32[0] == 1;
  v6.i32[0] = v5.i32[0] + 1;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  BOOL v9 = !v9 && v8.i32[0] == 1;
  if (v9)
  {
    unsigned int v65 = v67;
    v10.i32[1] = 4;
    uint64_t v66 = 0x400000000;
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(v11 + 24);
        if (v12 >= HIDWORD(v66)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v14 = (char *)v65 + 16 * v12;
        *uint64_t v14 = a1;
        v14[1] = v13;
        unsigned int v12 = v66 + 1;
        LODWORD(v66) = v66 + 1;
        uint64_t v11 = *(void *)(v11 + 8);
      }
      while (v11);
      if (v12)
      {
        int v15 = 0;
        do
        {
          int v16 = v65;
          BOOL v17 = (char *)v65 + 16 * v12;
          uint64_t v18 = *((void *)v17 - 2);
          uint64_t v19 = *((void *)v17 - 1);
          LODWORD(v66) = --v12;
          int v20 = *(unsigned __int8 *)(v19 + 16);
          if (v19 && v20 == 89)
          {
            uint64_t v21 = *(void *)(v19 - 32);
            if (v21) {
              BOOL v22 = *(unsigned char *)(v21 + 16) == 16;
            }
            else {
              BOOL v22 = 0;
            }
            if (!v22) {
              goto LABEL_88;
            }
            uint64_t v23 = (void *)(v21 + 24);
            if (*(_DWORD *)(v21 + 32) >= 0x41u) {
              uint64_t v23 = (void *)*v23;
            }
            unsigned int v24 = *(_DWORD *)v23;
            BOOL v25 = v24 >= 4;
            if (v24 >= 4) {
              int v26 = 0;
            }
            else {
              int v26 = 1 << v24;
            }
            if (v25)
            {
              int v15 = -1;
              goto LABEL_68;
            }
            v15 |= v26;
          }
          else if (v19 && v20 == 92)
          {
            if (!**(_DWORD **)(v19 + 64))
            {
              for (uint64_t i = *(void *)(v19 + 8); i; uint64_t i = *(void *)(i + 8))
              {
                uint64_t v45 = *(void *)(i + 24);
                if (v12 >= HIDWORD(v66)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v46 = (char *)v65 + 16 * v12;
                *uint64_t v46 = v19;
                v46[1] = v45;
                unsigned int v12 = v66 + 1;
                LODWORD(v66) = v66 + 1;
              }
            }
          }
          else if (v19 && v20 == 77)
          {
            uint64_t v28 = *(llvm::Type **)v19;
            if ((*(_DWORD *)(*(void *)v19 + 8) & 0xFE) == 0x12) {
              uint64_t v28 = (llvm::Type *)**((void **)v28 + 2);
            }
            int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v28);
            uint64_t v30 = **(void **)(v19 - 32);
            if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12) {
              uint64_t v30 = **(void **)(v30 + 16);
            }
            if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v30))
            {
LABEL_88:
              int v15 = 0;
              goto LABEL_68;
            }
            for (uint64_t j = *(void *)(v19 + 8); j; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v32 = *(void *)(j + 24);
              if (v12 >= HIDWORD(v66)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v33 = (char *)v65 + 16 * v12;
              void *v33 = v19;
              v33[1] = v32;
              unsigned int v12 = v66 + 1;
              LODWORD(v66) = v66 + 1;
            }
          }
          else
          {
            if (!v19) {
              goto LABEL_88;
            }
            if (v20 != 91) {
              goto LABEL_88;
            }
            if (*(_DWORD *)(*(void *)v19 + 32) != 4) {
              goto LABEL_88;
            }
            uint64_t v34 = *(void *)(v19 - 32);
            if (*(void *)(v19 - 64) == v34) {
              goto LABEL_88;
            }
            BOOL v35 = v34 == v18;
            uint64_t v36 = *(unsigned int *)(v19 + 72);
            if (v36)
            {
              int v37 = 4 * v35;
              int v38 = *(int **)(v19 + 64);
              uint64_t v39 = 4 * v36;
              do
              {
                int v41 = *v38++;
                int v40 = v41;
                char v42 = v41 - v37;
                BOOL v43 = v41 >= v37 + 4 || v40 < v37;
                int v44 = 1 << v42;
                if (v43) {
                  int v44 = 0;
                }
                v15 |= v44;
                v39 -= 4;
              }
              while (v39);
            }
          }
        }
        while (v12);
        if (v15) {
          goto LABEL_67;
        }
      }
    }
    int v15 = -1;
LABEL_67:
    int v16 = v65;
LABEL_68:
    if (v16 != v67) {
      free(v16);
    }
    if ((v15 + 1) >= 2)
    {
      v10.i32[0] = v15;
      uint8x8_t v47 = (uint8x8_t)vcnt_s8(v10);
      v47.i16[0] = vaddlv_u8(v47);
      if (v47.i32[0] != v7 && v64 == 0)
      {
        uint64_t v49 = v63;
        uint64_t v50 = **(void **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v63);
        uint64_t v51 = *(llvm::ConstantInt **)v50;
        unint64_t v52 = *(unsigned int *)(v50 + 8);
        LODWORD(v66) = v52 >> 8;
        if (v52 >> 8 > 0x40) {
          operator new[]();
        }
        if (v52 <= 0xFF) {
          LODWORD(v53) = 0;
        }
        else {
          unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v52) + 63);
        }
        unsigned int v65 = (void *)(v53 & v15);
        unint64_t v54 = llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v65, v2);
        if (v66 >= 0x41 && v65) {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
        }
        uint64_t v55 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        uint64_t v56 = v55 + 32 * v49;
        if (*(void *)v56)
        {
          **(void **)(v56 + 16) = *(void *)(v56 + 8);
          uint64_t v57 = *(void *)(v56 + 8);
          if (v57) {
            *(void *)(v57 + 16) = *(void *)(v56 + 16);
          }
        }
        *(void *)uint64_t v56 = v54;
        if (v54)
        {
          uint64_t v60 = v54[1];
          uint64_t v59 = v54 + 1;
          uint64_t v58 = v60;
          uint64_t v61 = v55 + 32 * v49;
          *(void *)(v61 + 8) = v60;
          if (v60) {
            *(void *)(v58 + 16) = v61 + 8;
          }
          *(void *)(v61 + 16) = v59;
          *uint64_t v59 = v56;
        }
      }
    }
  }
}

uint64_t sub_1CCA339A8(uint64_t a1, int a2, int a3)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 8))
  {
    char v5 = 0;
    unsigned int v23 = 8;
    v24[0] = a1;
    char v21 = a3 ^ 1;
    unsigned int v6 = 1;
    while (1)
    {
      uint64_t v7 = v24[--v6];
      unsigned int v22 = v6;
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        break;
      }
LABEL_39:
      if (!v6) {
        return v5 & 1;
      }
    }
    while (1)
    {
      uint64_t v9 = *(void *)(v8 + 24);
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v9)
      {
        if (v10 == 89) {
          break;
        }
      }
      if (v9) {
        BOOL v11 = v10 >= 0x1C;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        if (v10 != 92 || a3 == 0)
        {
          unsigned int v13 = v10 - 28;
          if (a2)
          {
            if (v10 == 74)
            {
              uint64_t v14 = *(void *)(v9 + 8);
              if (v14)
              {
                while (1)
                {
                  uint64_t v15 = *(void *)(v14 + 24);
                  unsigned int v16 = *(unsigned __int8 *)(v15 + 16) - 42;
                  BOOL v17 = v16 > 0x1F;
                  unsigned int v18 = (1 << v16) & 0x98000095;
                  BOOL v19 = v17 || v18 == 0;
                  if (v19 && !sub_1CCA34334(v15)) {
                    break;
                  }
                  uint64_t v14 = *(void *)(v14 + 8);
                  if (!v14) {
                    goto LABEL_36;
                  }
                }
                if (sub_1CCA34240(v9))
                {
                  char v5 = a2;
                  return v5 & 1;
                }
                v5 |= v21;
              }
            }
          }
          else
          {
            if ((sub_1CCA34334(*(void *)(v8 + 24)) & 1) == 0 && (v13 != 45 || *(unsigned char *)(*(void *)v9 + 8) == 1))
            {
              char v5 = 0;
              return v5 & 1;
            }
            char v5 = 1;
          }
        }
        else if (!**(_DWORD **)(v9 + 64))
        {
          break;
        }
      }
LABEL_36:
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_39;
      }
    }
    if (v6 >= v23) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v24[v6] = v9;
    unsigned int v6 = ++v22;
    goto LABEL_36;
  }
  char v5 = 0;
  return v5 & 1;
}

uint64_t sub_1CCA33BC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v33[8] = *MEMORY[0x1E4F143B8];
  int v31 = v33;
  uint64_t v32 = 0x800000000;
  uint64_t v28 = v30;
  uint64_t v29 = 0x800000000;
  uint64_t v4 = *(unsigned int *)(a1 + 56);
  if (v4 == -1)
  {
    unsigned int v5 = 0;
  }
  else
  {
    v33[0] = **(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v4);
    unsigned int v5 = 1;
    LODWORD(v32) = 1;
  }
  unsigned int v6 = v33;
  uint64_t v7 = *(unsigned int *)(a1 + 68);
  if (v7 != -1)
  {
    v33[v5++] = **(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v7);
    LODWORD(v32) = v5;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 76);
  if (v8 != -1)
  {
    v33[v5++] = **(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v8);
    LODWORD(v32) = v5;
  }
  int v9 = *(unsigned __int8 *)(a2 + 16);
  if (v9 == 84)
  {
    uint64_t v10 = 0;
  }
  else if (v9 == 39)
  {
    uint64_t v10 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v10 = 2;
  }
  uint64_t v11 = 0;
  int v12 = *(_DWORD *)(a2 + 20);
  uint64_t v13 = -(uint64_t)(v12 & 0x7FFFFFF);
  if (v12 < 0)
  {
    uint64_t v25 = a2 - 32 * (v12 & 0x7FFFFFF);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((v26 & 0xFFFFFFFF0) != 0) {
      uint64_t v11 = (*(_DWORD *)(v25 - 12) - *(_DWORD *)(v25 - v26));
    }
    else {
      uint64_t v11 = 0;
    }
  }
  unint64_t v14 = -32 * v10 - 32 * v11 - 32 * v13 - 32;
  if ((v14 & 0x1FFFFFFFE0) != 0)
  {
    unsigned int v15 = 0;
    uint64_t v16 = -(uint64_t)(v14 >> 5);
    uint64_t v17 = a2;
    do
    {
      if (v15 >= HIDWORD(v29)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v28 + v15) = *(void *)(v17 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      unsigned int v15 = v29 + 1;
      LODWORD(v29) = v29 + 1;
      v17 += 32;
    }
    while (!__CFADD__(v16++, 1));
    unsigned int v5 = v32;
    unsigned int v6 = v31;
  }
  if (v5) {
    uint64_t v19 = (uint64_t)v6;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v5) {
    uint64_t v20 = v5;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a2 + 40) + 56) + 40), *(_DWORD *)(a1 + 100), v19, v20);
  if (Declaration) {
    unsigned int v22 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    unsigned int v22 = 0;
  }
  v27[16] = 257;
  uint64_t v23 = sub_1CB845BAC(a3, v22, (uint64_t **)Declaration, (uint64_t *)v28, v29, (uint64_t)v27, 0);
  if (v28 != v30) {
    free(v28);
  }
  if (v31 != v33) {
    free(v31);
  }
  return v23;
}

void sub_1CCA33E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v42[16] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = v42;
  unsigned int v41 = 8;
  v42[0] = a1;
  v42[1] = a2;
  uint64_t v4 = (void *)(a3 + 48);
  unsigned int v5 = 1;
  do
  {
    unsigned int v6 = (char *)v39 + 16 * v5;
    uint64_t v7 = (uint64_t **)*((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    unsigned int v40 = v5 - 1;
    int v9 = v7[1];
    if (!v9) {
      goto LABEL_65;
    }
    char v35 = 0;
    do
    {
      while (1)
      {
        uint64_t v10 = v9[3];
        int v11 = *(unsigned __int8 *)(v10 + 16);
        if (v10)
        {
          if (v11 == 89) {
            break;
          }
        }
        if (v10 && v11 == 92)
        {
          uint64_t v13 = *(void *)(a3 + 48);
          uint64_t v12 = *(void *)(a3 + 56);
          *(void *)(a3 + 48) = *(void *)(v10 + 40);
          *(void *)(a3 + 56) = v10 + 24;
          unsigned int v18 = *(unsigned __int8 **)(v10 + 48);
          int v38 = v18;
          if (v18)
          {
            llvm::MetadataTracking::track((uint64_t)&v38, v18, 2);
            uint64_t v19 = (uint64_t)v38;
          }
          else
          {
            uint64_t v19 = 0;
          }
          sub_1CB8461A4(a3, 0, v19);
          if (!v38) {
            goto LABEL_15;
          }
          int v26 = *v38;
          if ((v26 - 4) > 0x1E)
          {
            if ((v26 - 3) >= 0xFFFFFFFE) {
              uint64_t v30 = v38;
            }
            else {
              uint64_t v30 = 0;
            }
            if ((v26 - 3) < 0xFFFFFFFE)
            {
              if (v26 == 3) {
                *((void *)v38 + 1) = 0;
              }
              goto LABEL_15;
            }
            unint64_t v28 = (unint64_t)(v30 + 8);
          }
          else
          {
            if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
              goto LABEL_15;
            }
            uint64_t v27 = *((void *)v38 + 2);
            if ((v27 & 4) == 0) {
              goto LABEL_15;
            }
            unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
            if (!v28) {
              goto LABEL_15;
            }
          }
          v36[0] = &v38;
          sub_1CC5FA668(v28 + 16, v36);
LABEL_15:
          uint64_t v20 = *(unsigned int **)(v10 + 64);
          uint64_t v21 = *(unsigned int *)(v10 + 72);
          __int16 v37 = 257;
          uint64_t v17 = sub_1CC2415A4(a3, (uint64_t *)v8, v20, v21, (uint64_t)v36);
          goto LABEL_16;
        }
        if (v10 && v11 == 73)
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9[3], (llvm::Value *)v8, (llvm::Value *)1);
          goto LABEL_23;
        }
        int v9 = (uint64_t *)v9[1];
        char v35 = 1;
        if (!v9) {
          goto LABEL_59;
        }
      }
      uint64_t v13 = *(void *)(a3 + 48);
      uint64_t v12 = *(void *)(a3 + 56);
      *(void *)(a3 + 48) = *(void *)(v10 + 40);
      *(void *)(a3 + 56) = v10 + 24;
      unint64_t v14 = *(unsigned __int8 **)(v10 + 48);
      int v38 = v14;
      if (v14)
      {
        llvm::MetadataTracking::track((uint64_t)&v38, v14, 2);
        uint64_t v15 = (uint64_t)v38;
      }
      else
      {
        uint64_t v15 = 0;
      }
      sub_1CB8461A4(a3, 0, v15);
      if (!v38) {
        goto LABEL_9;
      }
      int v23 = *v38;
      if ((v23 - 4) > 0x1E)
      {
        if ((v23 - 3) >= 0xFFFFFFFE) {
          uint64_t v29 = v38;
        }
        else {
          uint64_t v29 = 0;
        }
        if ((v23 - 3) < 0xFFFFFFFE)
        {
          if (v23 == 3) {
            *((void *)v38 + 1) = 0;
          }
          goto LABEL_9;
        }
        unint64_t v25 = (unint64_t)(v29 + 8);
      }
      else
      {
        if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
          goto LABEL_9;
        }
        uint64_t v24 = *((void *)v38 + 2);
        if ((v24 & 4) == 0) {
          goto LABEL_9;
        }
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (!v25) {
          goto LABEL_9;
        }
      }
      v36[0] = &v38;
      sub_1CC5FA668(v25 + 16, v36);
LABEL_9:
      uint64_t v16 = *(unsigned __int8 **)(v10 - 32);
      __int16 v37 = 257;
      uint64_t v17 = sub_1CB8445F4(a3, (unsigned __int8 *)v8, v16, (uint64_t)v36);
LABEL_16:
      if (v40 >= (unint64_t)v41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v22 = (uint64_t *)((char *)v39 + 16 * v40);
      *unsigned int v22 = v10;
      v22[1] = (uint64_t)v17;
      ++v40;
      if (v13)
      {
        sub_1CBF5385C(a3, v13, v12);
      }
      else
      {
        void *v4 = 0;
        v4[1] = 0;
      }
LABEL_23:
      int v9 = (uint64_t *)v9[1];
    }
    while (v9);
    if ((v35 & 1) == 0) {
      goto LABEL_65;
    }
LABEL_59:
    uint64_t v32 = *(void *)(a3 + 48);
    uint64_t v31 = *(void *)(a3 + 56);
    if (*(unsigned __int8 *)(v8 + 16) >= 0x1Cu && v8) {
      sub_1CBF5385C(a3, *(void *)(v8 + 40), *(void *)(v8 + 32));
    }
    int v33 = *v7;
    __int16 v37 = 257;
    uint64_t v34 = sub_1CB843944(a3, v8, v33, (uint64_t)v36);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v34, (llvm::Value *)1);
    if (v32)
    {
      sub_1CBF5385C(a3, v32, v31);
    }
    else
    {
      void *v4 = 0;
      v4[1] = 0;
    }
LABEL_65:
    unsigned int v5 = v40;
  }
  while (v40);
  if (v39 != v42) {
    free(v39);
  }
}

uint64_t sub_1CCA34240(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    int v3 = *(unsigned __int8 *)(v2 + 16);
    if (v3 == 77 || v3 == 90) {
      break;
    }
    if (v3 == 84)
    {
      uint64_t v4 = *(void *)(v2 - 32);
      if (v4)
      {
        if (!*(unsigned char *)(v4 + 16) && *(void *)(v4 + 24) == *(void *)(v2 + 72) && (*(unsigned char *)(v4 + 33) & 0x20) != 0)
        {
          int v5 = *(_DWORD *)(v4 + 36);
          BOOL v6 = sub_1CB859A14(v5);
          uint64_t result = 1;
          if (v6 || (v5 - 1682) < 0x8C) {
            return result;
          }
          BOOL v8 = (v5 - 2713) > 0x12 || ((1 << (v5 + 103)) & 0x76055) == 0;
          if (!v8 || (v5 - 2098) < 7 || (v5 - 1996) < 2) {
            return result;
          }
        }
      }
    }
LABEL_20:
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  if ((sub_1CCA34240() & 1) == 0) {
    goto LABEL_20;
  }
  return 1;
}

uint64_t sub_1CCA34334(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 - 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v1 + 33) & 0x20) == 0) {
      return 0;
    }
    int v2 = *(_DWORD *)(v1 + 36);
    uint64_t v1 = 1;
    if (v2 != 1988 && v2 != 1986)
    {
      if (v2 == 1982)
      {
        uint64_t v3 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
        if (v3 && *(unsigned char *)(v3 + 16) == 16)
        {
          int v5 = (void *)(v3 + 24);
          if (*(_DWORD *)(v3 + 32) >= 0x41u) {
            int v5 = (void *)*v5;
          }
          if (*v5 < 4uLL) {
            return 1;
          }
        }
      }
      return 0;
    }
  }
  return v1;
}

void sub_1CCA343DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v42[16] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = v42;
  unsigned int v41 = 8;
  v42[0] = a1;
  v42[1] = a2;
  uint64_t v4 = (void *)(a3 + 48);
  unsigned int v5 = 1;
  do
  {
    BOOL v6 = (char *)v39 + 16 * v5;
    uint64_t v7 = (uint64_t **)*((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    unsigned int v40 = v5 - 1;
    int v9 = v7[1];
    if (!v9) {
      goto LABEL_65;
    }
    char v35 = 0;
    do
    {
      while (1)
      {
        uint64_t v10 = v9[3];
        int v11 = *(unsigned __int8 *)(v10 + 16);
        if (v10)
        {
          if (v11 == 89) {
            break;
          }
        }
        if (v10 && v11 == 92)
        {
          uint64_t v13 = *(void *)(a3 + 48);
          uint64_t v12 = *(void *)(a3 + 56);
          *(void *)(a3 + 48) = *(void *)(v10 + 40);
          *(void *)(a3 + 56) = v10 + 24;
          unsigned int v18 = *(unsigned __int8 **)(v10 + 48);
          int v38 = v18;
          if (v18)
          {
            llvm::MetadataTracking::track((uint64_t)&v38, v18, 2);
            uint64_t v19 = (uint64_t)v38;
          }
          else
          {
            uint64_t v19 = 0;
          }
          sub_1CB8461A4(a3, 0, v19);
          if (!v38) {
            goto LABEL_15;
          }
          int v26 = *v38;
          if ((v26 - 4) > 0x1E)
          {
            if ((v26 - 3) >= 0xFFFFFFFE) {
              uint64_t v30 = v38;
            }
            else {
              uint64_t v30 = 0;
            }
            if ((v26 - 3) < 0xFFFFFFFE)
            {
              if (v26 == 3) {
                *((void *)v38 + 1) = 0;
              }
              goto LABEL_15;
            }
            unint64_t v28 = (unint64_t)(v30 + 8);
          }
          else
          {
            if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
              goto LABEL_15;
            }
            uint64_t v27 = *((void *)v38 + 2);
            if ((v27 & 4) == 0) {
              goto LABEL_15;
            }
            unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
            if (!v28) {
              goto LABEL_15;
            }
          }
          v36[0] = &v38;
          sub_1CC5FA668(v28 + 16, v36);
LABEL_15:
          uint64_t v20 = *(unsigned int **)(v10 + 64);
          uint64_t v21 = *(unsigned int *)(v10 + 72);
          __int16 v37 = 257;
          uint64_t v17 = sub_1CC2415A4(a3, (uint64_t *)v8, v20, v21, (uint64_t)v36);
          goto LABEL_16;
        }
        if (v10 && v11 == 74)
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9[3], (llvm::Value *)v8, (llvm::Value *)1);
          goto LABEL_23;
        }
        int v9 = (uint64_t *)v9[1];
        char v35 = 1;
        if (!v9) {
          goto LABEL_59;
        }
      }
      uint64_t v13 = *(void *)(a3 + 48);
      uint64_t v12 = *(void *)(a3 + 56);
      *(void *)(a3 + 48) = *(void *)(v10 + 40);
      *(void *)(a3 + 56) = v10 + 24;
      unint64_t v14 = *(unsigned __int8 **)(v10 + 48);
      int v38 = v14;
      if (v14)
      {
        llvm::MetadataTracking::track((uint64_t)&v38, v14, 2);
        uint64_t v15 = (uint64_t)v38;
      }
      else
      {
        uint64_t v15 = 0;
      }
      sub_1CB8461A4(a3, 0, v15);
      if (!v38) {
        goto LABEL_9;
      }
      int v23 = *v38;
      if ((v23 - 4) > 0x1E)
      {
        if ((v23 - 3) >= 0xFFFFFFFE) {
          uint64_t v29 = v38;
        }
        else {
          uint64_t v29 = 0;
        }
        if ((v23 - 3) < 0xFFFFFFFE)
        {
          if (v23 == 3) {
            *((void *)v38 + 1) = 0;
          }
          goto LABEL_9;
        }
        unint64_t v25 = (unint64_t)(v29 + 8);
      }
      else
      {
        if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
          goto LABEL_9;
        }
        uint64_t v24 = *((void *)v38 + 2);
        if ((v24 & 4) == 0) {
          goto LABEL_9;
        }
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (!v25) {
          goto LABEL_9;
        }
      }
      v36[0] = &v38;
      sub_1CC5FA668(v25 + 16, v36);
LABEL_9:
      uint64_t v16 = *(unsigned __int8 **)(v10 - 32);
      __int16 v37 = 257;
      uint64_t v17 = sub_1CB8445F4(a3, (unsigned __int8 *)v8, v16, (uint64_t)v36);
LABEL_16:
      if (v40 >= (unint64_t)v41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v22 = (uint64_t *)((char *)v39 + 16 * v40);
      *unsigned int v22 = v10;
      v22[1] = (uint64_t)v17;
      ++v40;
      if (v13)
      {
        sub_1CBF5385C(a3, v13, v12);
      }
      else
      {
        void *v4 = 0;
        v4[1] = 0;
      }
LABEL_23:
      int v9 = (uint64_t *)v9[1];
    }
    while (v9);
    if ((v35 & 1) == 0) {
      goto LABEL_65;
    }
LABEL_59:
    uint64_t v32 = *(void *)(a3 + 48);
    uint64_t v31 = *(void *)(a3 + 56);
    if (*(unsigned __int8 *)(v8 + 16) >= 0x1Cu && v8) {
      sub_1CBF5385C(a3, *(void *)(v8 + 40), *(void *)(v8 + 32));
    }
    int v33 = *v7;
    __int16 v37 = 257;
    uint64_t v34 = sub_1CB845034(a3, v8, v33, (uint64_t)v36);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, v34, (llvm::Value *)1);
    if (v32)
    {
      sub_1CBF5385C(a3, v32, v31);
    }
    else
    {
      void *v4 = 0;
      v4[1] = 0;
    }
LABEL_65:
    unsigned int v5 = v40;
  }
  while (v40);
  if (v39 != v42) {
    free(v39);
  }
}

uint64_t sub_1CCA34798(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  if (!sub_1CCA339A8(a1, 0, 0)) {
    return 0;
  }
  uint64_t v8 = sub_1CCA34894(a1, a2, a3, a4);
  sub_1CCA33E84(a1, v8, (uint64_t)a2);
  return v8;
}

void sub_1CCA34810(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  if (sub_1CCA339A8(a1, 1, 0))
  {
    uint64_t v8 = sub_1CCA34894(a1, a2, a3, a4);
    sub_1CCA343DC(a1, v8, (uint64_t)a2);
  }
}

uint64_t sub_1CCA34894(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  v30[8] = *MEMORY[0x1E4F143B8];
  unint64_t v28 = v30;
  uint64_t v29 = 0x800000000;
  int v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == 84)
  {
    uint64_t v7 = 0;
  }
  else if (v6 == 39)
  {
    uint64_t v7 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    uint64_t v7 = 2;
  }
  uint64_t v8 = 0;
  int v9 = *(_DWORD *)(a1 + 20);
  uint64_t v10 = -(uint64_t)(v9 & 0x7FFFFFF);
  if (v9 < 0)
  {
    uint64_t v25 = a1 - 32 * (v9 & 0x7FFFFFF);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((v26 & 0xFFFFFFFF0) != 0) {
      uint64_t v8 = (*(_DWORD *)(v25 - 12) - *(_DWORD *)(v25 - v26));
    }
    else {
      uint64_t v8 = 0;
    }
  }
  unint64_t v11 = -32 * v7 - 32 * v8 - 32 * v10 - 32;
  if ((v11 & 0x1FFFFFFFE0) != 0)
  {
    unsigned int v12 = 0;
    uint64_t v13 = -(uint64_t)(v11 >> 5);
    uint64_t v14 = a1;
    do
    {
      if (v12 >= HIDWORD(v29)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v28 + v12) = *(void *)(v14 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      unsigned int v12 = v29 + 1;
      LODWORD(v29) = v29 + 1;
      v14 += 32;
    }
    while (!__CFADD__(v13++, 1));
  }
  int ItrIntrinsic = llvm::getItrIntrinsic(1, a3, *(unsigned __int8 *)(*(void *)a1 + 8) == 2, a4);
  uint64_t v17 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
  llvm::Intrinsic::getType(*v17, ItrIntrinsic, 0, 0);
  unsigned int v18 = (unsigned __int8 *)off_1E6830B58[ItrIntrinsic];
  if (v18) {
    uint64_t v19 = (const char *)strlen(off_1E6830B58[ItrIntrinsic]);
  }
  else {
    uint64_t v19 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v17, ItrIntrinsic, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v17, v18, v19, Type, 0);
  unsigned int v22 = (uint64_t **)v21;
  if (v21) {
    uint64_t v21 = *(void *)(v21 + 24);
  }
  v27[16] = 257;
  uint64_t v23 = sub_1CB845BAC(a2, (uint64_t **)v21, v22, (uint64_t *)v28, v29, (uint64_t)v27, 0);
  if (v28 != v30) {
    free(v28);
  }
  return v23;
}

uint64_t sub_1CCA34AF8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  unsigned int v2 = v1 - 2561;
  BOOL v3 = (v1 - 2471) < 4;
  return v2 < 0x10 || v3;
}

uint64_t sub_1CCA34B1C(void **a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    uint64_t v8 = *(void *)(a2 - 96);
    if (v8 && *(unsigned char *)(v8 + 16) == 81)
    {
      uint64_t v9 = *(void *)(a2 - 64);
      uint64_t v10 = *(void *)(a2 - 32);
      uint64_t v11 = *(void *)(v8 - 64);
      uint64_t v12 = *(void *)(v8 - 32);
      BOOL v13 = v9 == v11 && v10 == v12;
      if (v13 || (v9 == v12 ? (BOOL v14 = v10 == v11) : (BOOL v14 = 0), v14))
      {
        unsigned int v15 = *(_WORD *)(v8 + 18) & 0x3F;
        if (v9 != v11)
        {
          if (v15 - 32 < 8 || v15 < 0x10) {
            goto LABEL_35;
          }
          if (v15 == 40) {
            LOBYTE(v15) = 39;
          }
          else {
            LOBYTE(v15) = 38;
          }
        }
        if (v11)
        {
          if ((v15 & 0x3E) == 0x26)
          {
            **a1 = v11;
            if (v12)
            {
              unsigned int v61 = *(unsigned __int8 *)(v12 + 16);
              if (v61 <= 0x14)
              {
                *a1[1] = v12;
                if (v61 != 5) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
LABEL_35:
    uint64_t v17 = *(void *)(a2 - 96);
    if (v17 && *(unsigned char *)(v17 + 16) == 81)
    {
      uint64_t v18 = *(void *)(a2 - 64);
      uint64_t v19 = *(void *)(a2 - 32);
      uint64_t v20 = *(void *)(v17 - 64);
      uint64_t v21 = *(void *)(v17 - 32);
      BOOL v22 = v18 == v20 && v19 == v21;
      if (v22 || (v18 == v21 ? (BOOL v23 = v19 == v20) : (BOOL v23 = 0), v23))
      {
        uint64_t v24 = *(_WORD *)(v17 + 18) & 0x3F;
        if (v18 == v20)
        {
          __int16 v53 = *(_WORD *)(v17 + 18) & 0x3F;
        }
        else
        {
          if ((v24 - 32) < 6) {
            goto LABEL_48;
          }
          LOBYTE(v53) = 41;
          if (((1 << v24) & 0x3000000FFFFLL) != 0) {
            goto LABEL_48;
          }
          if (v24 != 38) {
            LOBYTE(v53) = 40;
          }
        }
        if (v20)
        {
          if ((v53 & 0x3E) == 0x28)
          {
            *a1[3] = v20;
            if (v21)
            {
              unsigned int v54 = *(unsigned __int8 *)(v21 + 16);
              if (v54 <= 0x14)
              {
                *a1[4] = v21;
                if (v54 != 5) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    uint64_t v25 = *(void *)(a2 - 96);
    if (v25 && *(unsigned char *)(v25 + 16) == 81)
    {
      uint64_t v26 = *(void *)(a2 - 64);
      uint64_t v27 = *(void *)(a2 - 32);
      uint64_t v28 = *(void *)(v25 - 64);
      uint64_t v29 = *(void *)(v25 - 32);
      BOOL v30 = v26 == v28 && v27 == v29;
      if (v30 || (v26 == v29 ? (BOOL v31 = v27 == v28) : (BOOL v31 = 0), v31))
      {
        uint64_t v32 = *(_WORD *)(v25 + 18) & 0x3F;
        if (v26 == v28)
        {
          __int16 v33 = *(_WORD *)(v25 + 18) & 0x3F;
        }
        else
        {
          LOBYTE(v33) = 35;
          if (((1 << v32) & 0x3CF0000FFFFLL) != 0) {
            goto LABEL_61;
          }
          if (v32 != 36) {
            LOBYTE(v33) = 34;
          }
        }
        if (v28)
        {
          if ((v33 & 0x3E) == 0x22)
          {
            *a1[6] = v28;
            if (v29)
            {
              unsigned int v55 = *(unsigned __int8 *)(v29 + 16);
              if (v55 <= 0x14)
              {
                *a1[7] = v29;
                if (v55 != 5) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
LABEL_61:
    uint64_t v3 = 0;
    uint64_t v34 = *(void *)(a2 - 96);
    if (!v34 || *(unsigned char *)(v34 + 16) != 81) {
      return v3;
    }
    uint64_t v35 = *(void *)(a2 - 64);
    uint64_t v36 = *(void *)(a2 - 32);
    uint64_t v37 = *(void *)(v34 - 64);
    uint64_t v38 = *(void *)(v34 - 32);
    BOOL v39 = v35 == v37 && v36 == v38;
    if (v39 || (v35 == v38 ? (BOOL v40 = v36 == v37) : (BOOL v40 = 0), v40))
    {
      uint64_t v42 = *(_WORD *)(v34 + 18) & 0x3F;
      if (v35 == v37)
      {
        __int16 v43 = *(_WORD *)(v34 + 18) & 0x3F;
      }
      else
      {
        LOBYTE(v43) = 37;
        uint64_t v3 = 0;
        if (((1 << v42) & 0x3F30000FFFFLL) != 0) {
          return v3;
        }
        if (v42 != 34) {
          LOBYTE(v43) = 36;
        }
      }
      uint64_t v3 = 0;
      if (!v37 || (v43 & 0x3E) != 0x24) {
        return v3;
      }
      *a1[9] = v37;
      if (v38)
      {
        unsigned int v56 = *(unsigned __int8 *)(v38 + 16);
        if (v56 <= 0x14)
        {
          *a1[10] = v38;
          if (v56 != 5) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  if (v2 != 84) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 - 32);
  if (v3)
  {
    if (!*(unsigned char *)(v3 + 16)
      && *(void *)(v3 + 24) == *(void *)(a2 + 72)
      && (*(unsigned char *)(v3 + 33) & 0x20) != 0
      && *(_DWORD *)(v3 + 36) == 274)
    {
      int v44 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      uint64_t v45 = *v44;
      if (*v44)
      {
        uint64_t v46 = v44[4];
        **a1 = v45;
        unsigned int v47 = *(unsigned __int8 *)(v46 + 16);
        if (v46 && v47 <= 0x14)
        {
          *a1[1] = v46;
          if (v47 != 5) {
            return 1;
          }
        }
      }
    }
    uint64_t v3 = *(void *)(a2 - 32);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 16)
        && *(void *)(v3 + 24) == *(void *)(a2 + 72)
        && (*(unsigned char *)(v3 + 33) & 0x20) != 0
        && *(_DWORD *)(v3 + 36) == 275)
      {
        uint64_t v49 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t v50 = *v49;
        if (*v49)
        {
          uint64_t v51 = v49[4];
          *a1[3] = v50;
          if (v51)
          {
            unsigned int v52 = *(unsigned __int8 *)(v51 + 16);
            if (v52 <= 0x14)
            {
              *a1[4] = v51;
              if (v52 != 5) {
                return 1;
              }
            }
          }
        }
      }
      uint64_t v3 = *(void *)(a2 - 32);
      if (v3)
      {
        if (!*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(a2 + 72)
          && (*(unsigned char *)(v3 + 33) & 0x20) != 0
          && *(_DWORD *)(v3 + 36) == 305)
        {
          uint64_t v57 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          uint64_t v58 = *v57;
          if (*v57)
          {
            uint64_t v59 = v57[4];
            *a1[6] = v58;
            if (v59)
            {
              unsigned int v60 = *(unsigned __int8 *)(v59 + 16);
              if (v60 <= 0x14)
              {
                *a1[7] = v59;
                if (v60 != 5) {
                  return 1;
                }
              }
            }
          }
        }
        uint64_t v3 = *(void *)(a2 - 32);
        if (v3)
        {
          if (!*(unsigned char *)(v3 + 16)
            && *(void *)(v3 + 24) == *(void *)(a2 + 72)
            && (*(unsigned char *)(v3 + 33) & 0x20) != 0
            && *(_DWORD *)(v3 + 36) == 306)
          {
            uint64_t v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            uint64_t v5 = *v4;
            if (*v4)
            {
              uint64_t v6 = v4[4];
              *a1[9] = v5;
              if (v6)
              {
                unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
                if (v7 <= 0x14)
                {
                  *a1[10] = v6;
                  if (v7 != 5) {
                    return 1;
                  }
                }
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return v3;
}

void sub_1CCA35010()
{
}

void *sub_1CCA35024()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262B5C0;
  return result;
}

void sub_1CCA3505C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262B5C0;
}

BOOL sub_1CCA35084(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(a2 - 32) + 36) & 0xFFFFFFFD) == 313;
}

uint64_t sub_1CCA3509C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7)
{
  v112[5] = *MEMORY[0x1E4F143B8];
  unsigned int v14 = *(_DWORD *)(*(void *)(a1 - 32) + 36);
  sub_1CBA5AD88(v14, (uint64_t)&v101);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    uint64_t v70 = *(void *)(a2 + 24);
    uint64_t v71 = **(void **)(a2 + 16);
    if ((*(_DWORD *)(v70 + 8) & 0xFE) == 0x12) {
      uint64_t v70 = **(void **)(v70 + 16);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v70);
    int v96 = *(_DWORD *)(a2 + 32);
    int v97 = *(unsigned __int8 *)(v71 + 8);
  }
  else
  {
    int v97 = *(_DWORD *)(a2 + 8);
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a2);
    int v96 = 1;
  }
  unsigned int v16 = PrimitiveSizeInBits >> 3;
  uint64_t v110 = v112;
  uint64_t v111 = 0x500000000;
  unsigned int v17 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  if (v17 != 1)
  {
    unsigned int v18 = 0;
    unint64_t v19 = 0;
    uint64_t v20 = a1;
    do
    {
      if (v18 >= HIDWORD(v111)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v110[v18] = *(void *)(v20 - 32 * v17);
      unsigned int v18 = v111 + 1;
      LODWORD(v111) = v111 + 1;
      ++v19;
      unsigned int v17 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
      v20 += 32;
    }
    while (v19 < v17 - 1);
    unsigned int v14 = *(_DWORD *)(*(void *)(a1 - 32) + 36);
    unsigned int v16 = PrimitiveSizeInBits >> 3;
  }
  if (sub_1CD0FF1D0(v14))
  {
    int v22 = dword_1CFB27740[8 * (v96 - 1) + 4 * (v16 == 4) + 2 * (v97 == 13) + (v104 != -1)];
    if (a4 != -1)
    {
      uint64_t v23 = **(void **)(a3 + 64);
      uint64_t v24 = (unsigned __int16)a4;
      uint64_t v25 = *(llvm::ConstantInt **)(v23 + 1936);
      unint64_t v26 = *(unsigned int *)(v23 + 1944);
      LODWORD(v107) = v26 >> 8;
      if (v26 >> 8 > 0x40) {
        operator new[]();
      }
      if (v26 <= 0xFF) {
        unint64_t v27 = 0;
      }
      else {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v26) + 63);
      }
      uint64_t v106 = (void *)(v27 & v24);
      uint64_t v28 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v106, v21);
      if (v107 >= 0x41 && v106) {
        MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
      }
      v110[v101] = (uint64_t)v28;
    }
    if (a5 != -1)
    {
      uint64_t v29 = **(void **)(a3 + 64);
      uint64_t v30 = (unsigned __int16)a5;
      BOOL v31 = *(llvm::ConstantInt **)(v29 + 1936);
      unint64_t v32 = *(unsigned int *)(v29 + 1944);
      LODWORD(v107) = v32 >> 8;
      if (v32 >> 8 > 0x40) {
        operator new[]();
      }
      if (v32 <= 0xFF) {
        unint64_t v33 = 0;
      }
      else {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v32) + 63);
      }
      uint64_t v106 = (void *)(v33 & v30);
      uint64_t v34 = llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v106, v21);
      if (v107 >= 0x41 && v106) {
        MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
      }
      v110[v102] = (uint64_t)v34;
    }
    if (a6 != -1)
    {
      uint64_t v35 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a3 + 64) + 1936), (unsigned __int16)a6, 0);
      v110[v105] = (uint64_t)v35;
    }
  }
  else
  {
    if (a4 != -1)
    {
      uint64_t v36 = **(void **)(a3 + 64);
      uint64_t v37 = (unsigned __int16)a4;
      uint64_t v38 = *(llvm::ConstantInt **)(v36 + 1936);
      unint64_t v39 = *(unsigned int *)(v36 + 1944);
      LODWORD(v107) = v39 >> 8;
      if (v39 >> 8 > 0x40) {
        operator new[]();
      }
      if (v39 <= 0xFF) {
        unint64_t v40 = 0;
      }
      else {
        unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
      }
      uint64_t v106 = (void *)(v40 & v37);
      unsigned int v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v106, v21);
      if (v107 >= 0x41 && v106) {
        MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
      }
      v110[v101] = (uint64_t)v41;
    }
    if (a5 != -1)
    {
      uint64_t v42 = **(void **)(a3 + 64);
      uint64_t v43 = (unsigned __int16)a5;
      int v44 = *(llvm::ConstantInt **)(v42 + 1936);
      unint64_t v45 = *(unsigned int *)(v42 + 1944);
      LODWORD(v107) = v45 >> 8;
      if (v45 >> 8 > 0x40) {
        operator new[]();
      }
      if (v45 <= 0xFF) {
        unint64_t v46 = 0;
      }
      else {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
      }
      uint64_t v106 = (void *)(v46 & v43);
      unsigned int v47 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v106, v21);
      if (v107 >= 0x41 && v106) {
        MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
      }
      v110[v102] = (uint64_t)v47;
    }
    if (a6 != -1)
    {
      int v94 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a3 + 64) + 1936), (unsigned __int16)a6, 0);
      v110[v105] = (uint64_t)v94;
    }
    if (a7)
    {
      uint64_t v48 = *(llvm::FixedVectorType **)a7;
      if ((*(_DWORD *)(*(void *)a7 + 8) & 0xFE) == 0x12)
      {
        uint64_t v72 = *((unsigned int *)v48 + 8);
        if (v72 <= 3)
        {
          uint64_t v106 = v108;
          uint64_t v107 = 0x400000000;
          if (v72)
          {
            for (uint64_t i = 0; i != v72; ++i)
            {
              uint64_t v74 = **(void **)(a3 + 64);
              unint64_t v75 = *(llvm::ConstantInt **)(v74 + 1960);
              unint64_t v76 = *(unsigned int *)(v74 + 1968);
              unsigned int v99 = v76 >> 8;
              if (v76 >> 8 > 0x40) {
                operator new[]();
              }
              if (v76 <= 0xFF) {
                unint64_t v77 = 0;
              }
              else {
                unint64_t v77 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v76) + 63);
              }
              uint64_t v98 = (unsigned __int8 *)(v77 & i);
              uint64_t v78 = (unsigned __int8 *)llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v98, v21);
              if (v99 >= 0x41 && v98) {
                MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
              }
              __int16 v100 = 257;
              uint64_t v79 = sub_1CB8445F4(a3, a7, v78, (uint64_t)&v98);
              if (v107 >= (unint64_t)HIDWORD(v107)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v106 + v107) = v79;
              LODWORD(v107) = v107 + 1;
            }
          }
          llvm::FixedVectorType::get(*((llvm::FixedVectorType **)v48 + 3), (llvm::Type *)4);
          a7 = (unsigned __int8 *)llvm::UndefValue::get(v80, v81);
          for (unint64_t j = 0; j != 4; ++j)
          {
            if (j < v107) {
              uint64_t v85 = (unsigned __int8 *)*((void *)v106 + j);
            }
            else {
              uint64_t v85 = (unsigned __int8 *)llvm::UndefValue::get(*((llvm::UndefValue **)v48 + 3), v82);
            }
            uint64_t v86 = **(void **)(a3 + 64);
            uint64_t v87 = *(llvm::ConstantInt **)(v86 + 1960);
            unint64_t v88 = *(unsigned int *)(v86 + 1968);
            unsigned int v99 = v88 >> 8;
            if (v88 >> 8 > 0x40) {
              operator new[]();
            }
            if (v88 <= 0xFF) {
              unint64_t v89 = 0;
            }
            else {
              unint64_t v89 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v88) + 63);
            }
            uint64_t v98 = (unsigned __int8 *)(v89 & j);
            uint64_t v90 = (unsigned __int8 *)llvm::ConstantInt::get(v87, (llvm::LLVMContext *)&v98, v83);
            if (v99 >= 0x41 && v98) {
              MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
            }
            __int16 v100 = 257;
            a7 = (unsigned __int8 *)sub_1CB84478C(a3, a7, v85, v90, (uint64_t)&v98);
          }
          if (v106 != v108) {
            free(v106);
          }
        }
      }
      else
      {
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a7, (llvm::Type *)4);
        unsigned int v52 = (unsigned __int8 *)llvm::UndefValue::get(v49, v50);
        uint64_t v53 = **(void **)(a3 + 64);
        unsigned int v54 = *(llvm::ConstantInt **)(v53 + 1960);
        unsigned int v55 = *(_DWORD *)(v53 + 1968);
        LODWORD(v107) = v55 >> 8;
        if (v55 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v106 = 0;
        unsigned int v56 = (unsigned __int8 *)llvm::ConstantInt::get(v54, (llvm::LLVMContext *)&v106, v51);
        if (v107 >= 0x41 && v106) {
          MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
        }
        __int16 v109 = 257;
        a7 = (unsigned __int8 *)sub_1CB84478C(a3, v52, a7, v56, (uint64_t)&v106);
      }
      v110[v103] = (uint64_t)a7;
    }
    int v22 = dword_1CFB277C0[4 * (v16 == 4) + 2 * (v97 == 13) + (v104 != -1)];
  }
  uint64_t v57 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
  llvm::Intrinsic::getType(*v57, v22, 0, 0);
  uint64_t v58 = (unsigned __int8 *)off_1E6830B58[v22];
  if (v58) {
    uint64_t v59 = (const char *)strlen(off_1E6830B58[v22]);
  }
  else {
    uint64_t v59 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v57, v22, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v57, v58, v59, Type, 0);
  uint64_t v62 = v61;
  uint64_t v63 = 0;
  uint64_t v65 = *(void *)(a3 + 48);
  uint64_t v64 = *(void *)(a3 + 56);
  *(void *)(a3 + 48) = *(void *)(a1 + 40);
  *(void *)(a3 + 56) = a1 + 24;
  uint64_t v66 = *(unsigned __int8 **)(a1 + 48);
  uint64_t v98 = v66;
  if (v66)
  {
    llvm::MetadataTracking::track((uint64_t)&v98, v66, 2);
    uint64_t v63 = (uint64_t)v98;
  }
  sub_1CB8461A4(a3, 0, v63);
  if (v98)
  {
    int v91 = *v98;
    if ((v91 - 4) > 0x1E)
    {
      if ((v91 - 3) >= 0xFFFFFFFE) {
        uint64_t v95 = v98;
      }
      else {
        uint64_t v95 = 0;
      }
      if ((v91 - 3) < 0xFFFFFFFE)
      {
        if (v91 == 3) {
          *((void *)v98 + 1) = 0;
        }
        goto LABEL_54;
      }
      unint64_t v93 = (unint64_t)(v95 + 8);
    }
    else
    {
      if ((v98[1] & 0x7F) != 2 && !*((_DWORD *)v98 + 3)) {
        goto LABEL_54;
      }
      uint64_t v92 = *((void *)v98 + 2);
      if ((v92 & 4) == 0) {
        goto LABEL_54;
      }
      unint64_t v93 = v92 & 0xFFFFFFFFFFFFFFF8;
      if (!v93) {
        goto LABEL_54;
      }
    }
    uint64_t v106 = &v98;
    sub_1CC5FA668(v93 + 16, &v106);
  }
LABEL_54:
  uint64_t v67 = *(uint64_t ***)(v62 + 24);
  __int16 v109 = 257;
  uint64_t v68 = sub_1CB845BAC((uint64_t *)a3, v67, (uint64_t **)v62, v110, v111, (uint64_t)&v106, 0);
  sub_1CBF5385C(a3, v65, v64);
  if (v110 != v112) {
    free(v110);
  }
  return v68;
}

double sub_1CCA35CFC(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CCA36328(a1, a2);
  uint64_t v4 = *(void *)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)a1 + 112 * v5;
  unsigned int v7 = (void *)(v6 + 32);
  *(void *)uint64_t v6 = v6 + 32;
  uint64_t v9 = *(void *)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  if (v8 == *(void *)v3)
  {
    *(void *)(v6 + 8) = v7;
    uint64_t v10 = *(unsigned int *)(v3 + 20);
    if (v10) {
      memmove(v7, *(const void **)(v3 + 8), 8 * v10);
    }
  }
  else
  {
    *(void *)(v6 + 8) = v8;
    *(void *)(v3 + 8) = v9;
  }
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(v3 + 24);
  *(void *)&double result = 8;
  *(void *)(v3 + 16) = 8;
  *(_DWORD *)(v3 + 24) = 0;
  uint64_t v12 = v4 + 112 * v5;
  uint64_t v13 = *(void *)(v3 + 96);
  *(unsigned char *)(v12 + 104) = *(unsigned char *)(v3 + 104);
  *(void *)(v12 + 96) = v13;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

char **sub_1CCA35DC0(void *a1, uint64_t a2)
{
  v69[112] = *MEMORY[0x1E4F143B8];
  uint64_t v67 = (char *)v69;
  uint64_t v68 = 0x800000000;
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = *(void *)a2 + 112 * v4;
  unint64_t v6 = 126 - 2 * __clz(v4);
  if (v4) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  sub_1CCA36528(v3, v5, v7, 1);
  uint64_t v8 = 0;
  int v9 = *(_DWORD *)(a2 + 8);
  if (v9 != 1)
  {
    uint64_t v8 = 0;
    for (uint64_t i = 1; v9 != i; ++i)
    {
      uint64_t v23 = *(void *)a2;
      if (!*(unsigned char *)(*(void *)a2 + 112 * i + 104))
      {
        uint64_t v24 = (llvm::SmallPtrSetImplBase *)(v23 + 112 * v8);
        uint64_t v25 = (void *)*((void *)v24 + 1);
        if (v25 == *(void **)v24) {
          uint64_t v26 = 20;
        }
        else {
          uint64_t v26 = 16;
        }
        uint64_t v27 = *(unsigned int *)((char *)v24 + v26);
        if (v27)
        {
          uint64_t v28 = 8 * v27;
          uint64_t v29 = &v25[v27];
          while (*v25 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v25;
            v28 -= 8;
            if (!v28)
            {
              uint64_t v25 = v29;
              break;
            }
          }
        }
        uint64_t v30 = (uint64_t **)(v23 + 112 * i);
        BOOL v31 = v30[1];
        if (v31 == *v30) {
          uint64_t v32 = 20;
        }
        else {
          uint64_t v32 = 16;
        }
        uint64_t v33 = *(unsigned int *)((char *)v30 + v32);
        uint64_t v34 = &v31[v33];
        uint64_t v35 = v31;
        if (v33)
        {
          uint64_t v36 = 8 * v33;
          uint64_t v35 = v31;
          while ((unint64_t)*v35 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v35;
            v36 -= 8;
            if (!v36)
            {
              uint64_t v35 = &v31[v33];
              break;
            }
          }
        }
        if (*(void *)*v25 == *(void *)*v35 && !*(unsigned char *)(v23 + 112 * v8 + 104))
        {
          uint64_t v48 = v23 + 112 * v8;
          int v49 = *(_DWORD *)(v48 + 96);
          int v50 = *(_DWORD *)(v23 + 112 * i + 96);
          uint64_t v51 = (unsigned int *)(v48 + 100);
          if (v49 == v50)
          {
            unsigned int v60 = *(_DWORD *)(v23 + 112 * i + 100);
            if (*v51 > v60) {
              unsigned int v60 = *v51;
            }
            *uint64_t v51 = v60;
            if (v33)
            {
              uint64_t v61 = 8 * v33;
              while ((unint64_t)*v31 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v31;
                v61 -= 8;
                if (!v61)
                {
LABEL_69:
                  BOOL v31 = v34;
                  goto LABEL_70;
                }
              }
            }
            goto LABEL_70;
          }
          if (*v51 + v49 == v50)
          {
            *v51 += *(_DWORD *)(v23 + 112 * i + 100);
            if (v33)
            {
              uint64_t v62 = 8 * v33;
              while ((unint64_t)*v31 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v31;
                v62 -= 8;
                if (!v62) {
                  goto LABEL_69;
                }
              }
            }
LABEL_70:
            sub_1CD63F044(v24, v31, v34, v34);
            continue;
          }
          unint64_t v37 = sub_1CCA36328((uint64_t)&v67, (unint64_t)v24);
          unsigned int v52 = v67;
          int v53 = v68;
          unsigned int v54 = &v67[112 * v68];
          unsigned int v55 = v54 + 32;
          *(void *)unsigned int v54 = v54 + 32;
          unsigned int v56 = *(const void **)(v37 + 8);
          if (v56 == *(const void **)v37)
          {
            *((void *)v54 + 1) = v55;
          }
          else
          {
            uint64_t v65 = *(unsigned int *)(v37 + 16);
            unsigned int v55 = malloc_type_malloc(8 * v65, 0x4065EBACuLL);
            if (!v55)
            {
              if (v65) {
                goto LABEL_83;
              }
              unsigned int v55 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
              if (!v55) {
                goto LABEL_83;
              }
            }
            *((void *)v54 + 1) = v55;
            unsigned int v56 = *(const void **)v37;
          }
          *((_DWORD *)v54 + 4) = *(_DWORD *)(v37 + 16);
          uint64_t v57 = *(const void **)(v37 + 8);
          int v58 = *(_DWORD *)(v37 + 20);
          if (v57 == v56) {
            unsigned int v59 = *(_DWORD *)(v37 + 20);
          }
          else {
            unsigned int v59 = *(_DWORD *)(v37 + 16);
          }
          if (v59)
          {
            memmove(v55, v57, 8 * v59);
            int v58 = *(_DWORD *)(v37 + 20);
          }
          *((_DWORD *)v54 + 5) = v58;
          *((_DWORD *)v54 + 6) = *(_DWORD *)(v37 + 24);
          unint64_t v46 = &v52[112 * v53];
        }
        else
        {
          unint64_t v37 = sub_1CCA36328((uint64_t)&v67, (unint64_t)v24);
          uint64_t v38 = v67;
          int v39 = v68;
          unint64_t v40 = &v67[112 * v68];
          unsigned int v41 = v40 + 32;
          *(void *)unint64_t v40 = v40 + 32;
          uint64_t v42 = *(const void **)(v37 + 8);
          if (v42 == *(const void **)v37)
          {
            *((void *)v40 + 1) = v41;
          }
          else
          {
            uint64_t v64 = *(unsigned int *)(v37 + 16);
            unsigned int v41 = malloc_type_malloc(8 * v64, 0x4065EBACuLL);
            if (!v41)
            {
              if (v64) {
                goto LABEL_83;
              }
              unsigned int v41 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
              if (!v41) {
                goto LABEL_83;
              }
            }
            *((void *)v40 + 1) = v41;
            uint64_t v42 = *(const void **)v37;
          }
          *((_DWORD *)v40 + 4) = *(_DWORD *)(v37 + 16);
          uint64_t v43 = *(const void **)(v37 + 8);
          int v44 = *(_DWORD *)(v37 + 20);
          if (v43 == v42) {
            unsigned int v45 = *(_DWORD *)(v37 + 20);
          }
          else {
            unsigned int v45 = *(_DWORD *)(v37 + 16);
          }
          if (v45)
          {
            memmove(v41, v43, 8 * v45);
            int v44 = *(_DWORD *)(v37 + 20);
          }
          *((_DWORD *)v40 + 5) = v44;
          *((_DWORD *)v40 + 6) = *(_DWORD *)(v37 + 24);
          unint64_t v46 = &v38[112 * v39];
        }
        uint64_t v47 = *(void *)(v37 + 96);
        v46[104] = *(unsigned char *)(v37 + 104);
        *((void *)v46 + 12) = v47;
        LODWORD(v68) = v68 + 1;
        uint64_t v8 = i;
      }
    }
  }
  unint64_t v10 = sub_1CCA36328((uint64_t)&v67, *(void *)a2 + 112 * v8);
  uint64_t v11 = v67;
  int v12 = v68;
  uint64_t v13 = &v67[112 * v68];
  unsigned int v14 = v13 + 32;
  *(void *)uint64_t v13 = v13 + 32;
  unsigned int v15 = *(const void **)(v10 + 8);
  if (v15 == *(const void **)v10)
  {
    *((void *)v13 + 1) = v14;
  }
  else
  {
    uint64_t v63 = *(unsigned int *)(v10 + 16);
    unsigned int v14 = malloc_type_malloc(8 * v63, 0x4065EBACuLL);
    if (!v14 && (v63 || (unsigned int v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_83:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((void *)v13 + 1) = v14;
    unsigned int v15 = *(const void **)v10;
  }
  *((_DWORD *)v13 + 4) = *(_DWORD *)(v10 + 16);
  unsigned int v16 = *(const void **)(v10 + 8);
  int v17 = *(_DWORD *)(v10 + 20);
  if (v16 == v15) {
    unsigned int v18 = *(_DWORD *)(v10 + 20);
  }
  else {
    unsigned int v18 = *(_DWORD *)(v10 + 16);
  }
  if (v18)
  {
    memmove(v14, v16, 8 * v18);
    int v17 = *(_DWORD *)(v10 + 20);
  }
  *((_DWORD *)v13 + 5) = v17;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(v10 + 24);
  unint64_t v19 = &v11[112 * v12];
  uint64_t v20 = *(void *)(v10 + 96);
  v19[104] = *(unsigned char *)(v10 + 104);
  *((void *)v19 + 12) = v20;
  LODWORD(v19) = v68;
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  LODWORD(v68) = v19 + 1;
  if (v19 != -1) {
    sub_1CCA386AC((uint64_t)a1, (uint64_t *)&v67);
  }
  return sub_1CCA362B4(&v67);
}

char **sub_1CCA362B4(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    do
    {
      unint64_t v5 = *(void **)&v2[v4 - 104];
      if (v5 != *(void **)&v2[v4 - 112]) {
        free(v5);
      }
      v4 -= 112;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t sub_1CCA36328(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + 112 * v3;
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      sub_1CCA36394(a1, v5);
      return *(void *)a1 + v8;
    }
    else
    {
      sub_1CCA36394(a1, v5);
    }
  }
  return a2;
}

void sub_1CCA36394(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (char *)malloc_type_malloc(112 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(unsigned char **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 112 * v9;
    do
    {
      int v12 = (const void **)&v8[v10];
      uint64_t v13 = &v7[v10];
      unsigned int v14 = &v7[v10 + 32];
      *(void *)&v7[v10] = v14;
      unsigned int v16 = *(const void **)&v8[v10];
      unsigned int v15 = *(const void **)&v8[v10 + 8];
      if (v15 == v16)
      {
        *((void *)v13 + 1) = v14;
        uint64_t v17 = *((unsigned int *)v12 + 5);
        if (v17) {
          memmove(v14, v12[1], 8 * v17);
        }
      }
      else
      {
        *((void *)v13 + 1) = v15;
        v12[1] = v16;
      }
      unsigned int v18 = &v8[v10];
      unint64_t v19 = &v7[v10];
      *((void *)v19 + 2) = *(void *)&v8[v10 + 16];
      *((_DWORD *)v19 + 6) = *(_DWORD *)&v8[v10 + 24];
      *((void *)v18 + 2) = 8;
      *((_DWORD *)v18 + 6) = 0;
      uint64_t v20 = *(void *)&v8[v10 + 96];
      v19[104] = v8[v10 + 104];
      *((void *)v19 + 12) = v20;
      v10 += 112;
    }
    while (v11 != v10);
    unint64_t v8 = *(unsigned char **)a1;
    uint64_t v21 = *(unsigned int *)(a1 + 8);
    if (v21)
    {
      uint64_t v22 = 112 * v21;
      do
      {
        uint64_t v23 = *(void **)&v8[v22 - 104];
        if (v23 != *(void **)&v8[v22 - 112]) {
          free(v23);
        }
        v22 -= 112;
      }
      while (v22);
      unint64_t v8 = *(unsigned char **)a1;
    }
  }
  if (v8 != (unsigned char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CCA36528(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v164 = a2 - 112;
    uint64_t v162 = a2 - 336;
    uint64_t v163 = a2 - 224;
    unint64_t v9 = a1;
    uint64_t v166 = a2;
    while (1)
    {
      while (1)
      {
        a1 = v9;
        uint64_t v10 = a2 - v9;
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v9) >> 4);
        if (v5 || !v4)
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              unsigned int v62 = *(_DWORD *)(a2 - 16);
              unint64_t v61 = a2 - 16;
              uint64_t v63 = (uint64_t *)(a1 + 96);
              if (v62 >= *(_DWORD *)(a1 + 96)) {
                return;
              }
              uint64_t v64 = (void *)(v61 - 96);
              uint64_t v175 = v179;
              double v65 = *(double *)a1;
              if (*(void *)(a1 + 8) == *(void *)a1)
              {
                int v176 = v179;
                uint64_t v66 = *(unsigned int *)(a1 + 20);
                if (v66) {
                  memmove(v179, *(const void **)(a1 + 8), 8 * v66);
                }
              }
              else
              {
                int v176 = *(unsigned char **)(a1 + 8);
                *(double *)(a1 + 8) = v65;
              }
              uint64_t v177 = *(void *)(a1 + 16);
              int v178 = *(_DWORD *)(a1 + 24);
              *(void *)(a1 + 16) = 8;
              *(_DWORD *)(a1 + 24) = 0;
              uint64_t v67 = *v63;
              char v181 = *(unsigned char *)(a1 + 104);
              uint64_t v180 = v67;
              if (v64 != (void *)a1) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v61 - 96));
              }
              uint64_t v68 = *(void *)v61;
              *(unsigned char *)(a1 + 104) = *(unsigned char *)(v61 + 8);
              *uint64_t v63 = v68;
              if (&v175 != v64) {
                llvm::SmallPtrSetImplBase::MoveFrom(v61 - 96, 8, (double *)&v175);
              }
              uint64_t v69 = v180;
              *(unsigned char *)(v61 + 8) = v181;
              *(void *)unint64_t v61 = v69;
              break;
            case 3uLL:
              sub_1CCA3783C(a1, a1 + 112, v164);
              return;
            case 4uLL:
              sub_1CCA383A8(a1, a1 + 112, a1 + 224, v164);
              return;
            case 5uLL:
              uint64_t v70 = (void *)(a1 + 336);
              sub_1CCA383A8(a1, a1 + 112, a1 + 224, a1 + 336);
              unsigned int v72 = *(_DWORD *)(a2 - 16);
              unint64_t v71 = a2 - 16;
              if (v72 >= *(_DWORD *)(a1 + 432)) {
                return;
              }
              unint64_t v73 = (void *)(v71 - 96);
              uint64_t v74 = (uint64_t *)(a1 + 432);
              uint64_t v175 = v179;
              unint64_t v76 = *(const void **)(a1 + 336);
              unint64_t v75 = *(const void **)(a1 + 344);
              if (v75 == v76)
              {
                int v176 = v179;
                uint64_t v77 = *(unsigned int *)(a1 + 356);
                if (v77) {
                  memmove(v179, v75, 8 * v77);
                }
              }
              else
              {
                int v176 = *(unsigned char **)(a1 + 344);
                *(void *)(a1 + 344) = v76;
              }
              uint64_t v177 = *(void *)(a1 + 352);
              int v178 = *(_DWORD *)(a1 + 360);
              *(void *)(a1 + 352) = 8;
              *(_DWORD *)(a1 + 360) = 0;
              uint64_t v180 = *v74;
              char v181 = *(unsigned char *)(a1 + 440);
              if (v73 != v70) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, (double *)(v71 - 96));
              }
              uint64_t v78 = *(void *)v71;
              *(unsigned char *)(a1 + 440) = *(unsigned char *)(v71 + 8);
              *uint64_t v74 = v78;
              if (&v175 != v73) {
                llvm::SmallPtrSetImplBase::MoveFrom(v71 - 96, 8, (double *)&v175);
              }
              uint64_t v79 = v180;
              *(unsigned char *)(v71 + 8) = v181;
              *(void *)unint64_t v71 = v79;
              if (v176 != v175) {
                free(v176);
              }
              if (*(_DWORD *)(a1 + 432) >= *(_DWORD *)(a1 + 320)) {
                return;
              }
              BOOL v80 = (uint64_t *)(a1 + 320);
              uint64_t v175 = v179;
              BOOL v82 = *(const void **)(a1 + 224);
              v81 = *(const void **)(a1 + 232);
              if (v81 == v82)
              {
                int v176 = v179;
                uint64_t v83 = *(unsigned int *)(a1 + 244);
                if (v83) {
                  memmove(v179, v81, 8 * v83);
                }
              }
              else
              {
                int v176 = *(unsigned char **)(a1 + 232);
                *(void *)(a1 + 232) = v82;
              }
              uint64_t v177 = *(void *)(a1 + 240);
              int v178 = *(_DWORD *)(a1 + 248);
              *(void *)(a1 + 240) = 8;
              *(_DWORD *)(a1 + 248) = 0;
              uint64_t v180 = *v80;
              char v181 = *(unsigned char *)(a1 + 328);
              llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)(a1 + 336));
              *BOOL v80 = *v74;
              *(unsigned char *)(a1 + 328) = *(unsigned char *)(a1 + 440);
              if (&v175 != v70) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, (double *)&v175);
              }
              *uint64_t v74 = v180;
              *(unsigned char *)(a1 + 440) = v181;
              if (v176 != v175) {
                free(v176);
              }
              unint64_t v84 = (uint64_t *)(a1 + 208);
              if (*(_DWORD *)(a1 + 320) >= *(_DWORD *)(a1 + 208)) {
                return;
              }
              uint64_t v175 = v179;
              uint64_t v86 = *(const void **)(a1 + 112);
              uint64_t v85 = *(const void **)(a1 + 120);
              if (v85 == v86)
              {
                int v176 = v179;
                uint64_t v87 = *(unsigned int *)(a1 + 132);
                if (v87) {
                  memmove(v179, v85, 8 * v87);
                }
              }
              else
              {
                int v176 = *(unsigned char **)(a1 + 120);
                *(void *)(a1 + 120) = v86;
              }
              uint64_t v177 = *(void *)(a1 + 128);
              int v178 = *(_DWORD *)(a1 + 136);
              *(void *)(a1 + 128) = 8;
              *(_DWORD *)(a1 + 136) = 0;
              uint64_t v180 = *v84;
              char v181 = *(unsigned char *)(a1 + 216);
              llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)(a1 + 224));
              uint64_t *v84 = *v80;
              *(unsigned char *)(a1 + 216) = *(unsigned char *)(a1 + 328);
              if (&v175 != (unsigned char **)(a1 + 224)) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)&v175);
              }
              *BOOL v80 = v180;
              *(unsigned char *)(a1 + 328) = v181;
              if (v176 != v175) {
                free(v176);
              }
              unint64_t v88 = (uint64_t *)(a1 + 96);
              if (*(_DWORD *)(a1 + 208) >= *(_DWORD *)(a1 + 96)) {
                return;
              }
              uint64_t v175 = v179;
              double v89 = *(double *)a1;
              if (*(void *)(a1 + 8) == *(void *)a1)
              {
                int v176 = v179;
                uint64_t v90 = *(unsigned int *)(a1 + 20);
                if (v90) {
                  memmove(v179, *(const void **)(a1 + 8), 8 * v90);
                }
              }
              else
              {
                int v176 = *(unsigned char **)(a1 + 8);
                *(double *)(a1 + 8) = v89;
              }
              uint64_t v177 = *(void *)(a1 + 16);
              int v178 = *(_DWORD *)(a1 + 24);
              *(void *)(a1 + 16) = 8;
              *(_DWORD *)(a1 + 24) = 0;
              uint64_t v91 = *v88;
              char v181 = *(unsigned char *)(a1 + 104);
              uint64_t v180 = v91;
              llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 112));
              *unint64_t v88 = *v84;
              *(unsigned char *)(a1 + 104) = *(unsigned char *)(a1 + 216);
              if (&v175 != (unsigned char **)(a1 + 112)) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)&v175);
              }
              uint64_t *v84 = v180;
              *(unsigned char *)(a1 + 216) = v181;
              break;
            default:
              JUMPOUT(0);
          }
          if (v176 != v175) {
            free(v176);
          }
          return;
        }
        if (v10 <= 2687)
        {
          if (a4)
          {
            if (a1 != a2)
            {
              uint64_t v92 = a1 + 112;
              if (a1 + 112 != a2)
              {
                uint64_t v93 = 0;
                uint64_t v94 = a1;
                do
                {
                  uint64_t v95 = v94;
                  uint64_t v94 = v92;
                  unsigned int v97 = *(_DWORD *)(v95 + 208);
                  int v96 = (uint64_t *)(v95 + 208);
                  if (v97 < *((_DWORD *)v96 - 28))
                  {
                    uint64_t v175 = v179;
                    uint64_t v98 = *(void *)v92;
                    if (*(void *)(v92 + 8) == *(void *)v92)
                    {
                      int v176 = v179;
                      uint64_t v99 = *(unsigned int *)(v92 + 20);
                      if (v99) {
                        memmove(v179, *(const void **)(v94 + 8), 8 * v99);
                      }
                    }
                    else
                    {
                      int v176 = *(unsigned char **)(v92 + 8);
                      *(void *)(v92 + 8) = v98;
                    }
                    uint64_t v177 = *(void *)(v94 + 16);
                    int v178 = *(_DWORD *)(v94 + 24);
                    *(void *)(v94 + 16) = 8;
                    *(_DWORD *)(v94 + 24) = 0;
                    uint64_t v180 = *v96;
                    char v181 = *((unsigned char *)v96 + 8);
                    uint64_t v100 = v93;
                    while (1)
                    {
                      uint64_t v101 = a1 + v100;
                      llvm::SmallPtrSetImplBase::MoveFrom(a1 + v100 + 112, 8, (double *)(a1 + v100));
                      *(void *)(v101 + 208) = *(void *)(v101 + 96);
                      *(unsigned char *)(v101 + 216) = *(unsigned char *)(v101 + 104);
                      if (!v100) {
                        break;
                      }
                      v100 -= 112;
                      if (v180 >= *(_DWORD *)(v101 - 16))
                      {
                        int v102 = (void *)(a1 + v100 + 112);
                        goto LABEL_154;
                      }
                    }
                    int v102 = (void *)a1;
LABEL_154:
                    if (&v175 != v102) {
                      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v102, 8, (double *)&v175);
                    }
                    uint64_t v103 = v180;
                    *(unsigned char *)(v101 + 104) = v181;
                    *(void *)(v101 + 96) = v103;
                    if (v176 != v175) {
                      free(v176);
                    }
                  }
                  uint64_t v92 = v94 + 112;
                  v93 += 112;
                }
                while (v94 + 112 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            uint64_t v155 = a1 + 112;
            if (a1 + 112 != a2)
            {
              do
              {
                uint64_t v156 = v155;
                if (*(_DWORD *)(a1 + 208) < *(_DWORD *)(a1 + 96))
                {
                  uint64_t v175 = v179;
                  uint64_t v157 = *(void *)v155;
                  if (*(void *)(v155 + 8) == *(void *)v155)
                  {
                    int v176 = v179;
                    uint64_t v158 = *(unsigned int *)(v155 + 20);
                    if (v158) {
                      memmove(v179, *(const void **)(v156 + 8), 8 * v158);
                    }
                  }
                  else
                  {
                    int v176 = *(unsigned char **)(v155 + 8);
                    *(void *)(v155 + 8) = v157;
                  }
                  uint64_t v177 = *(void *)(v156 + 16);
                  int v178 = *(_DWORD *)(v156 + 24);
                  *(void *)(v156 + 16) = 8;
                  *(_DWORD *)(v156 + 24) = 0;
                  uint64_t v180 = *(void *)(a1 + 208);
                  char v181 = *(unsigned char *)(a1 + 216);
                  do
                  {
                    llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)a1);
                    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a1 + 104);
                    *(void *)(a1 + 208) = *(void *)(a1 + 96);
                    uint64_t v159 = a1 - 112;
                    unsigned int v160 = *(_DWORD *)(a1 - 16);
                    a1 -= 112;
                  }
                  while (v180 < v160);
                  if ((unsigned char **)(v159 + 112) != &v175) {
                    llvm::SmallPtrSetImplBase::MoveFrom(v159 + 112, 8, (double *)&v175);
                  }
                  uint64_t v161 = v180;
                  *(unsigned char *)(v159 + 216) = v181;
                  *(void *)(v159 + 208) = v161;
                  if (v176 != v175) {
                    free(v176);
                  }
                }
                uint64_t v155 = v156 + 112;
                a1 = v156;
              }
              while (v156 + 112 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v104 = (v11 - 2) >> 1;
            int64_t v105 = v104;
            do
            {
              int64_t v106 = v105;
              if (v104 >= v105)
              {
                uint64_t v107 = (2 * v105) | 1;
                uint64_t v108 = a1 + 112 * v107;
                if (2 * v105 + 2 < (uint64_t)v11)
                {
                  unsigned int v109 = *(_DWORD *)(a1 + 112 * v107 + 96);
                  unsigned int v110 = *(_DWORD *)(v108 + 208);
                  v108 += 112 * (v109 < v110);
                  if (v109 < v110) {
                    uint64_t v107 = 2 * v105 + 2;
                  }
                }
                uint64_t v111 = a1 + 112 * v105;
                unsigned int v113 = *(_DWORD *)(v111 + 96);
                uint64_t v112 = v111 + 96;
                if (*(_DWORD *)(v108 + 96) >= v113)
                {
                  uint64_t v114 = a1 + 112 * v105;
                  uint64_t v175 = v179;
                  uint64_t v116 = *(void *)v114;
                  uint64_t v115 = *(const void **)(v114 + 8);
                  if (v115 == *(const void **)v114)
                  {
                    int v176 = v179;
                    uint64_t v124 = *(unsigned int *)(v114 + 20);
                    if (v124) {
                      memmove(v179, v115, 8 * v124);
                    }
                  }
                  else
                  {
                    int v176 = *(unsigned char **)(v114 + 8);
                    *(void *)(v114 + 8) = v116;
                    LODWORD(v124) = *(_DWORD *)(v114 + 20);
                  }
                  LODWORD(v177) = *(_DWORD *)(v114 + 16);
                  HIDWORD(v177) = v124;
                  int v178 = *(_DWORD *)(v114 + 24);
                  *(void *)(v114 + 16) = 8;
                  *(_DWORD *)(v114 + 24) = 0;
                  uint64_t v117 = *(void *)v112;
                  char v181 = *(unsigned char *)(v112 + 8);
                  uint64_t v180 = v117;
                  do
                  {
                    uint64_t v118 = v108;
                    if (v108 != v114) {
                      llvm::SmallPtrSetImplBase::MoveFrom(v114, 8, (double *)v108);
                    }
                    uint64_t v119 = *(void *)(v108 + 96);
                    *(unsigned char *)(v114 + 104) = *(unsigned char *)(v108 + 104);
                    *(void *)(v114 + 96) = v119;
                    if (v104 < v107) {
                      break;
                    }
                    uint64_t v120 = (2 * v107) | 1;
                    uint64_t v108 = a1 + 112 * v120;
                    if (2 * v107 + 2 < (uint64_t)v11)
                    {
                      unsigned int v121 = *(_DWORD *)(a1 + 112 * v120 + 96);
                      unsigned int v122 = *(_DWORD *)(v108 + 208);
                      v108 += 112 * (v121 < v122);
                      if (v121 < v122) {
                        uint64_t v120 = 2 * v107 + 2;
                      }
                    }
                    uint64_t v114 = v118;
                    uint64_t v107 = v120;
                  }
                  while (*(_DWORD *)(v108 + 96) >= v180);
                  if (&v175 != (unsigned char **)v118) {
                    llvm::SmallPtrSetImplBase::MoveFrom(v118, 8, (double *)&v175);
                  }
                  uint64_t v123 = v180;
                  *(unsigned char *)(v118 + 104) = v181;
                  *(void *)(v118 + 96) = v123;
                  if (v176 != v175) {
                    free(v176);
                  }
                }
              }
              int64_t v105 = v106 - 1;
            }
            while (v106);
            int v125 = (double *)v166;
            do
            {
              uint64_t v168 = v172;
              double v126 = *(double *)a1;
              uint64_t v127 = v125;
              if (*(void *)(a1 + 8) == *(void *)a1)
              {
                uint64_t v169 = v172;
                uint64_t v128 = *(unsigned int *)(a1 + 20);
                if (v128) {
                  memmove(v172, *(const void **)(a1 + 8), 8 * v128);
                }
              }
              else
              {
                uint64_t v169 = *(unsigned char **)(a1 + 8);
                *(double *)(a1 + 8) = v126;
              }
              uint64_t v129 = 0;
              uint64_t v170 = *(void *)(a1 + 16);
              int v171 = *(_DWORD *)(a1 + 24);
              *(void *)(a1 + 16) = 8;
              *(_DWORD *)(a1 + 24) = 0;
              uint64_t v130 = *(void *)(a1 + 96);
              char v174 = *(unsigned char *)(a1 + 104);
              uint64_t v173 = v130;
              uint64_t v131 = a1;
              do
              {
                uint64_t v132 = v129 + 1;
                uint64_t v133 = v131 + 112 * (v129 + 1);
                uint64_t v134 = 2 * v129;
                uint64_t v129 = (2 * v129) | 1;
                uint64_t v135 = v134 + 2;
                if (v134 + 2 < (uint64_t)v11)
                {
                  unsigned int v136 = *(_DWORD *)(v131 + 112 * v132 + 96);
                  unsigned int v137 = *(_DWORD *)(v133 + 208);
                  v133 += 112 * (v136 < v137);
                  if (v136 < v137) {
                    uint64_t v129 = v135;
                  }
                }
                if (v133 != v131) {
                  llvm::SmallPtrSetImplBase::MoveFrom(v131, 8, (double *)v133);
                }
                unsigned int v139 = (uint64_t *)(v133 + 96);
                uint64_t v138 = *(void *)(v133 + 96);
                *(unsigned char *)(v131 + 104) = *(unsigned char *)(v133 + 104);
                *(void *)(v131 + 96) = v138;
                uint64_t v131 = v133;
              }
              while (v129 <= (uint64_t)((v11 - 2) >> 1));
              int v125 = v127 - 14;
              if ((double *)v133 == v127 - 14)
              {
                if (&v168 != (unsigned char **)v133) {
                  llvm::SmallPtrSetImplBase::MoveFrom(v133, 8, (double *)&v168);
                }
                uint64_t v153 = v173;
                *(unsigned char *)(v133 + 104) = v174;
                *unsigned int v139 = v153;
              }
              else
              {
                llvm::SmallPtrSetImplBase::MoveFrom(v133, 8, v127 - 14);
                uint64_t v141 = *((void *)v127 - 2);
                uint64_t v140 = v127 - 2;
                *(unsigned char *)(v133 + 104) = *((unsigned char *)v140 + 8);
                *unsigned int v139 = v141;
                if (&v168 != (unsigned char **)v125) {
                  llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v125, 8, (double *)&v168);
                }
                uint64_t v142 = v173;
                *((unsigned char *)v140 + 8) = v174;
                *(void *)uint64_t v140 = v142;
                uint64_t v143 = v133 + 112 - a1;
                if (v143 >= 113)
                {
                  unint64_t v144 = (unint64_t)(((((unint64_t)v143 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                          - 2) >> 1;
                  if (*(_DWORD *)(a1 + 112 * v144 + 96) < *(_DWORD *)v139)
                  {
                    uint64_t v175 = v179;
                    double v145 = *(double *)v133;
                    if (*(void *)(v133 + 8) == *(void *)v133)
                    {
                      int v176 = v179;
                      uint64_t v146 = *(unsigned int *)(v133 + 20);
                      if (v146) {
                        memmove(v179, *(const void **)(v133 + 8), 8 * v146);
                      }
                    }
                    else
                    {
                      int v176 = *(unsigned char **)(v133 + 8);
                      *(double *)(v133 + 8) = v145;
                    }
                    uint64_t v177 = *(void *)(v133 + 16);
                    int v178 = *(_DWORD *)(v133 + 24);
                    *(void *)(v133 + 16) = 8;
                    *(_DWORD *)(v133 + 24) = 0;
                    uint64_t v147 = *v139;
                    char v181 = *(unsigned char *)(v133 + 104);
                    uint64_t v180 = v147;
                    do
                    {
                      int v148 = (void *)(a1 + 112 * v144);
                      if (v148 != (void *)v133) {
                        llvm::SmallPtrSetImplBase::MoveFrom(v133, 8, (double *)(a1 + 112 * v144));
                      }
                      unint64_t v149 = a1 + 112 * v144;
                      uint64_t v151 = *(void *)(v149 + 96);
                      unint64_t v150 = v149 + 96;
                      *(unsigned char *)(v133 + 104) = *(unsigned char *)(v150 + 8);
                      *(void *)(v133 + 96) = v151;
                      if (!v144) {
                        break;
                      }
                      unint64_t v144 = (v144 - 1) >> 1;
                      uint64_t v133 = (uint64_t)v148;
                    }
                    while (*(_DWORD *)(a1 + 112 * v144 + 96) < v180);
                    if (&v175 != v148) {
                      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v148, 8, (double *)&v175);
                    }
                    uint64_t v152 = v180;
                    *(unsigned char *)(v150 + 8) = v181;
                    *(void *)unint64_t v150 = v152;
                    if (v176 != v175) {
                      free(v176);
                    }
                  }
                }
              }
              if (v169 != v168) {
                free(v169);
              }
            }
            while ((uint64_t)v11-- > 2);
          }
          return;
        }
        unint64_t v12 = v11 >> 1;
        if ((unint64_t)v10 >= 0x3801)
        {
          sub_1CCA3783C(a1, a1 + 112 * (v11 >> 1), v164);
          sub_1CCA3783C(a1 + 112, 112 * v12 + a1 - 112, v163);
          sub_1CCA3783C(a1 + 224, a1 + 112 + 112 * v12, v162);
          sub_1CCA3783C(112 * v12 + a1 - 112, a1 + 112 * (v11 >> 1), a1 + 112 + 112 * v12);
          uint64_t v175 = v179;
          double v13 = *(double *)a1;
          if (*(void *)(a1 + 8) == *(void *)a1)
          {
            int v176 = v179;
            uint64_t v14 = *(unsigned int *)(a1 + 20);
            if (v14) {
              memmove(v179, *(const void **)(a1 + 8), 8 * v14);
            }
          }
          else
          {
            int v176 = *(unsigned char **)(a1 + 8);
            *(double *)(a1 + 8) = v13;
          }
          uint64_t v15 = *(void *)(a1 + 96);
          uint64_t v177 = *(void *)(a1 + 16);
          int v178 = *(_DWORD *)(a1 + 24);
          *(void *)(a1 + 16) = 8;
          *(_DWORD *)(a1 + 24) = 0;
          char v181 = *(unsigned char *)(a1 + 104);
          uint64_t v180 = v15;
          a2 = v166;
          if (v11 >= 2) {
            llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 112 * (v11 >> 1)));
          }
          uint64_t v16 = a1 + 112 * v12;
          uint64_t v18 = *(void *)(v16 + 96);
          uint64_t v17 = v16 + 96;
          *(unsigned char *)(a1 + 104) = *(unsigned char *)(v17 + 8);
          *(void *)(a1 + 96) = v18;
          if (&v175 != (unsigned char **)(a1 + 112 * (v11 >> 1))) {
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112 * (v11 >> 1), 8, (double *)&v175);
          }
          uint64_t v19 = v180;
          *(unsigned char *)(v17 + 8) = v181;
          *(void *)uint64_t v17 = v19;
          if (v176 != v175) {
            free(v176);
          }
        }
        else
        {
          sub_1CCA3783C(a1 + 112 * (v11 >> 1), a1, v164);
        }
        --a3;
        if ((a4 & 1) != 0 || *(_DWORD *)(a1 - 16) < *(_DWORD *)(a1 + 96)) {
          break;
        }
        uint64_t v168 = v172;
        double v43 = *(double *)a1;
        if (*(void *)(a1 + 8) == *(void *)a1)
        {
          uint64_t v169 = v172;
          uint64_t v44 = *(unsigned int *)(a1 + 20);
          if (v44) {
            memmove(v172, *(const void **)(a1 + 8), 8 * v44);
          }
        }
        else
        {
          uint64_t v169 = *(unsigned char **)(a1 + 8);
          *(double *)(a1 + 8) = v43;
        }
        uint64_t v170 = *(void *)(a1 + 16);
        int v171 = *(_DWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        uint64_t v45 = *(void *)(a1 + 96);
        char v174 = *(unsigned char *)(a1 + 104);
        uint64_t v173 = v45;
        if (v45 < *(_DWORD *)(a2 - 16))
        {
          uint64_t v46 = a1;
          do
          {
            unint64_t v9 = v46 + 112;
            unsigned int v47 = *(_DWORD *)(v46 + 208);
            v46 += 112;
          }
          while (v173 >= v47);
        }
        else
        {
          unint64_t v48 = a1 + 112;
          do
          {
            unint64_t v9 = v48;
            if (v48 >= a2) {
              break;
            }
            unsigned int v49 = *(_DWORD *)(v48 + 96);
            v48 += 112;
          }
          while (v173 >= v49);
        }
        if (v9 < a2)
        {
          uint64_t v50 = v166;
          do
          {
            a2 = v50 - 112;
            unsigned int v51 = *(_DWORD *)(v50 - 16);
            v50 -= 112;
          }
          while (v173 < v51);
        }
        while (v9 < a2)
        {
          uint64_t v175 = v179;
          uint64_t v52 = *(void *)v9;
          if (*(void *)(v9 + 8) == *(void *)v9)
          {
            int v176 = v179;
            uint64_t v53 = *(unsigned int *)(v9 + 20);
            if (v53) {
              memmove(v179, *(const void **)(v9 + 8), 8 * v53);
            }
          }
          else
          {
            int v176 = *(unsigned char **)(v9 + 8);
            *(void *)(v9 + 8) = v52;
          }
          uint64_t v177 = *(void *)(v9 + 16);
          int v178 = *(_DWORD *)(v9 + 24);
          *(void *)(v9 + 16) = 8;
          *(_DWORD *)(v9 + 24) = 0;
          uint64_t v54 = *(void *)(v9 + 96);
          char v181 = *(unsigned char *)(v9 + 104);
          uint64_t v180 = v54;
          llvm::SmallPtrSetImplBase::MoveFrom(v9, 8, (double *)a2);
          uint64_t v55 = *(void *)(a2 + 96);
          *(unsigned char *)(v9 + 104) = *(unsigned char *)(a2 + 104);
          *(void *)(v9 + 96) = v55;
          if (&v175 != (unsigned char **)a2) {
            llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v175);
          }
          uint64_t v56 = v180;
          *(unsigned char *)(a2 + 104) = v181;
          *(void *)(a2 + 96) = v56;
          if (v176 != v175) {
            free(v176);
          }
          do
          {
            unsigned int v57 = *(_DWORD *)(v9 + 208);
            v9 += 112;
          }
          while (v173 >= v57);
          do
          {
            unsigned int v58 = *(_DWORD *)(a2 - 16);
            a2 -= 112;
          }
          while (v173 < v58);
        }
        if (v9 - 112 != a1)
        {
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v9 - 112));
          uint64_t v59 = *(void *)(v9 - 16);
          *(unsigned char *)(a1 + 104) = *(unsigned char *)(v9 - 8);
          *(void *)(a1 + 96) = v59;
        }
        a2 = v166;
        if (&v168 != (unsigned char **)(v9 - 112)) {
          llvm::SmallPtrSetImplBase::MoveFrom(v9 - 112, 8, (double *)&v168);
        }
        uint64_t v60 = v173;
        *(unsigned char *)(v9 - 8) = v174;
        *(void *)(v9 - 16) = v60;
        BOOL v4 = v169 >= v168;
        BOOL v5 = v169 == v168;
        if (v169 != v168) {
          free(v169);
        }
LABEL_58:
        a4 = 0;
      }
      uint64_t v168 = v172;
      double v20 = *(double *)a1;
      if (*(void *)(a1 + 8) == *(void *)a1)
      {
        uint64_t v169 = v172;
        uint64_t v21 = *(unsigned int *)(a1 + 20);
        if (v21) {
          memmove(v172, *(const void **)(a1 + 8), 8 * v21);
        }
      }
      else
      {
        uint64_t v169 = *(unsigned char **)(a1 + 8);
        *(double *)(a1 + 8) = v20;
      }
      uint64_t v167 = a3;
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)(a1 + 96);
      uint64_t v170 = *(void *)(a1 + 16);
      int v171 = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 8;
      *(_DWORD *)(a1 + 24) = 0;
      char v174 = *(unsigned char *)(a1 + 104);
      uint64_t v173 = v23;
      do
      {
        unsigned int v24 = *(_DWORD *)(a1 + v22 + 208);
        v22 += 112;
      }
      while (v24 < v173);
      unint64_t v25 = a1 + v22;
      unint64_t v26 = a2;
      if (v22 == 112)
      {
        unint64_t v29 = v166;
        while (v25 < v29)
        {
          unint64_t v27 = v29 - 112;
          unsigned int v30 = *(_DWORD *)(v29 - 16);
          v29 -= 112;
          if (v30 < v173) {
            goto LABEL_33;
          }
        }
        unint64_t v27 = v29;
      }
      else
      {
        do
        {
          unint64_t v27 = v26 - 112;
          unsigned int v28 = *(_DWORD *)(v26 - 16);
          v26 -= 112;
        }
        while (v28 >= v173);
      }
LABEL_33:
      unint64_t v9 = v25;
      if (v25 < v27)
      {
        unint64_t v31 = v27;
        do
        {
          uint64_t v175 = v179;
          uint64_t v33 = *(void *)v9;
          uint64_t v32 = *(const void **)(v9 + 8);
          if (v32 == *(const void **)v9)
          {
            int v176 = v179;
            uint64_t v34 = *(unsigned int *)(v9 + 20);
            if (v34) {
              memmove(v179, v32, 8 * v34);
            }
          }
          else
          {
            int v176 = *(unsigned char **)(v9 + 8);
            *(void *)(v9 + 8) = v33;
          }
          uint64_t v177 = *(void *)(v9 + 16);
          int v178 = *(_DWORD *)(v9 + 24);
          *(void *)(v9 + 16) = 8;
          *(_DWORD *)(v9 + 24) = 0;
          uint64_t v35 = *(void *)(v9 + 96);
          char v181 = *(unsigned char *)(v9 + 104);
          uint64_t v180 = v35;
          llvm::SmallPtrSetImplBase::MoveFrom(v9, 8, (double *)v31);
          uint64_t v36 = *(void *)(v31 + 96);
          *(unsigned char *)(v9 + 104) = *(unsigned char *)(v31 + 104);
          *(void *)(v9 + 96) = v36;
          if (&v175 != (unsigned char **)v31) {
            llvm::SmallPtrSetImplBase::MoveFrom(v31, 8, (double *)&v175);
          }
          uint64_t v37 = v180;
          *(unsigned char *)(v31 + 104) = v181;
          *(void *)(v31 + 96) = v37;
          if (v176 != v175) {
            free(v176);
          }
          do
          {
            unsigned int v38 = *(_DWORD *)(v9 + 208);
            v9 += 112;
          }
          while (v38 < v173);
          do
          {
            unsigned int v39 = *(_DWORD *)(v31 - 16);
            v31 -= 112;
          }
          while (v39 >= v173);
        }
        while (v9 < v31);
      }
      if (v9 - 112 != a1)
      {
        llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v9 - 112));
        uint64_t v40 = *(void *)(v9 - 16);
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(v9 - 8);
        *(void *)(a1 + 96) = v40;
      }
      if (&v168 != (unsigned char **)(v9 - 112)) {
        llvm::SmallPtrSetImplBase::MoveFrom(v9 - 112, 8, (double *)&v168);
      }
      uint64_t v41 = v173;
      *(unsigned char *)(v9 - 8) = v174;
      *(void *)(v9 - 16) = v41;
      if (v169 != v168) {
        free(v169);
      }
      BOOL v4 = v25 >= v27;
      a2 = v166;
      a3 = v167;
      if (!v4)
      {
LABEL_57:
        sub_1CCA36528(a1, v9 - 112, v167, a4 & 1);
        goto LABEL_58;
      }
      BOOL v42 = sub_1CCA37CD4(a1, v9 - 112);
      if (sub_1CCA37CD4(v9, v166)) {
        break;
      }
      if (!v42) {
        goto LABEL_57;
      }
    }
    a2 = v9 - 112;
    if (!v42) {
      continue;
    }
    break;
  }
}

void sub_1CCA3783C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2 + 96;
  unsigned int v6 = *(_DWORD *)(a2 + 96);
  uint64_t v8 = a1 + 96;
  uint64_t v10 = a3 + 96;
  unsigned int v9 = *(_DWORD *)(a3 + 96);
  if (v6 >= *(_DWORD *)(a1 + 96))
  {
    if (v9 < v6)
    {
      uint64_t v32 = v37;
      double v17 = *(double *)a2;
      uint64_t v16 = *(const void **)(a2 + 8);
      if (v16 == *(const void **)a2)
      {
        uint64_t v33 = v37;
        uint64_t v18 = *(unsigned int *)(a2 + 20);
        if (v18) {
          memmove(v37, v16, 8 * v18);
        }
      }
      else
      {
        uint64_t v33 = *(unsigned char **)(a2 + 8);
        *(double *)(a2 + 8) = v17;
        LODWORD(v18) = *(_DWORD *)(a2 + 20);
      }
      int v34 = *(_DWORD *)(a2 + 16);
      int v35 = v18;
      int v36 = *(_DWORD *)(a2 + 24);
      *(void *)(a2 + 16) = 8;
      *(_DWORD *)(a2 + 24) = 0;
      uint64_t v38 = *(void *)v7;
      char v39 = *(unsigned char *)(v7 + 8);
      if (a3 != a2) {
        llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
      }
      uint64_t v19 = *(void *)v10;
      *(unsigned char *)(v7 + 8) = *(unsigned char *)(v10 + 8);
      *(void *)uint64_t v7 = v19;
      if (&v32 != (unsigned char **)a3) {
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v32);
      }
      *(void *)uint64_t v10 = v38;
      *(unsigned char *)(v10 + 8) = v39;
      if (v33 != v32) {
        free(v33);
      }
      if (*(_DWORD *)v7 < *(_DWORD *)v8)
      {
        uint64_t v32 = v37;
        uint64_t v21 = *(void *)a1;
        double v20 = *(const void **)(a1 + 8);
        if (v20 == *(const void **)a1)
        {
          uint64_t v33 = v37;
          uint64_t v22 = *(unsigned int *)(a1 + 20);
          if (v22) {
            memmove(v37, v20, 8 * v22);
          }
        }
        else
        {
          uint64_t v33 = *(unsigned char **)(a1 + 8);
          *(void *)(a1 + 8) = v21;
          LODWORD(v22) = *(_DWORD *)(a1 + 20);
        }
        int v34 = *(_DWORD *)(a1 + 16);
        int v35 = v22;
        int v36 = *(_DWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        uint64_t v38 = *(void *)v8;
        char v39 = *(unsigned char *)(v8 + 8);
        if (a2 != a1) {
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
        }
        uint64_t v23 = *(void *)v7;
        *(unsigned char *)(v8 + 8) = *(unsigned char *)(v7 + 8);
        *(void *)uint64_t v8 = v23;
        if (&v32 != (unsigned char **)a2) {
          llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v32);
        }
        *(void *)uint64_t v7 = v38;
        *(unsigned char *)(v7 + 8) = v39;
        goto LABEL_49;
      }
    }
  }
  else
  {
    if (v9 < v6)
    {
      uint64_t v32 = v37;
      uint64_t v12 = *(void *)a1;
      unint64_t v11 = *(const void **)(a1 + 8);
      if (v11 == *(const void **)a1)
      {
        uint64_t v33 = v37;
        uint64_t v13 = *(unsigned int *)(a1 + 20);
        if (v13) {
          memmove(v37, v11, 8 * v13);
        }
      }
      else
      {
        uint64_t v33 = *(unsigned char **)(a1 + 8);
        *(void *)(a1 + 8) = v12;
        LODWORD(v13) = *(_DWORD *)(a1 + 20);
      }
      int v34 = *(_DWORD *)(a1 + 16);
      int v35 = v13;
      int v36 = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 8;
      *(_DWORD *)(a1 + 24) = 0;
      uint64_t v38 = *(void *)v8;
      char v39 = *(unsigned char *)(v8 + 8);
      if (a3 != a1) {
        llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a3);
      }
      uint64_t v14 = *(void *)v10;
      *(unsigned char *)(v8 + 8) = *(unsigned char *)(v10 + 8);
      *(void *)uint64_t v8 = v14;
      if (&v32 != (unsigned char **)a3) {
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v32);
      }
      *(void *)uint64_t v10 = v38;
      char v15 = v39;
LABEL_48:
      *(unsigned char *)(v10 + 8) = v15;
LABEL_49:
      if (v33 != v32) {
        free(v33);
      }
      return;
    }
    uint64_t v32 = v37;
    uint64_t v25 = *(void *)a1;
    unsigned int v24 = *(const void **)(a1 + 8);
    if (v24 == *(const void **)a1)
    {
      uint64_t v33 = v37;
      uint64_t v26 = *(unsigned int *)(a1 + 20);
      if (v26) {
        memmove(v37, v24, 8 * v26);
      }
    }
    else
    {
      uint64_t v33 = *(unsigned char **)(a1 + 8);
      *(void *)(a1 + 8) = v25;
      LODWORD(v26) = *(_DWORD *)(a1 + 20);
    }
    int v34 = *(_DWORD *)(a1 + 16);
    int v35 = v26;
    int v36 = *(_DWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v38 = *(void *)v8;
    char v39 = *(unsigned char *)(v8 + 8);
    if (a2 != a1) {
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    }
    uint64_t v27 = *(void *)v7;
    *(unsigned char *)(v8 + 8) = *(unsigned char *)(v7 + 8);
    *(void *)uint64_t v8 = v27;
    if (&v32 != (unsigned char **)a2) {
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v32);
    }
    *(void *)uint64_t v7 = v38;
    *(unsigned char *)(v7 + 8) = v39;
    if (v33 != v32) {
      free(v33);
    }
    if (*(_DWORD *)v10 < *(_DWORD *)v7)
    {
      uint64_t v32 = v37;
      double v29 = *(double *)a2;
      unsigned int v28 = *(const void **)(a2 + 8);
      if (v28 == *(const void **)a2)
      {
        uint64_t v33 = v37;
        uint64_t v30 = *(unsigned int *)(a2 + 20);
        if (v30) {
          memmove(v37, v28, 8 * v30);
        }
      }
      else
      {
        uint64_t v33 = *(unsigned char **)(a2 + 8);
        *(double *)(a2 + 8) = v29;
        LODWORD(v30) = *(_DWORD *)(a2 + 20);
      }
      int v34 = *(_DWORD *)(a2 + 16);
      int v35 = v30;
      int v36 = *(_DWORD *)(a2 + 24);
      *(void *)(a2 + 16) = 8;
      *(_DWORD *)(a2 + 24) = 0;
      uint64_t v38 = *(void *)v7;
      char v39 = *(unsigned char *)(v7 + 8);
      if (a3 != a2) {
        llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
      }
      uint64_t v31 = *(void *)v10;
      *(unsigned char *)(v7 + 8) = *(unsigned char *)(v10 + 8);
      *(void *)uint64_t v7 = v31;
      if (&v32 != (unsigned char **)a3) {
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v32);
      }
      *(void *)uint64_t v10 = v38;
      char v15 = v39;
      goto LABEL_48;
    }
  }
}

BOOL sub_1CCA37CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = (uint64_t *)(a2 - 16);
      uint64_t v7 = (uint64_t *)(a1 + 96);
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 96))
      {
        uint64_t v8 = (double *)(a2 - 112);
        uint64_t v44 = v49;
        uint64_t v10 = *(void *)a1;
        unsigned int v9 = *(const void **)(a1 + 8);
        if (v9 == *(const void **)a1)
        {
          uint64_t v45 = v49;
          uint64_t v11 = *(unsigned int *)(a1 + 20);
          if (v11) {
            memmove(v49, v9, 8 * v11);
          }
        }
        else
        {
          uint64_t v45 = *(unsigned char **)(a1 + 8);
          *(void *)(a1 + 8) = v10;
          LODWORD(v11) = *(_DWORD *)(a1 + 20);
        }
        int v46 = *(_DWORD *)(a1 + 16);
        int v47 = v11;
        int v48 = *(_DWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        uint64_t v50 = *v7;
        char v51 = *(unsigned char *)(a1 + 104);
        if (v8 != (double *)a1) {
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, v8);
        }
        uint64_t v12 = *v6;
        *(unsigned char *)(a1 + 104) = *((unsigned char *)v6 + 8);
        *uint64_t v7 = v12;
        if (&v44 != (unsigned char **)v8) {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v8, 8, (double *)&v44);
        }
        *unsigned int v6 = v50;
        *((unsigned char *)v6 + 8) = v51;
        goto LABEL_11;
      }
      return result;
    case 3:
      sub_1CCA3783C(a1, a1 + 112, a2 - 112);
      return 1;
    case 4:
      sub_1CCA383A8(a1, a1 + 112, a1 + 224, a2 - 112);
      return 1;
    case 5:
      uint64_t v23 = (uint64_t *)(a1 + 336);
      sub_1CCA383A8(a1, a1 + 112, a1 + 224, a1 + 336);
      unsigned int v25 = *(_DWORD *)(a2 - 16);
      unsigned int v24 = (double *)(a2 - 16);
      if (v25 < *(_DWORD *)(a1 + 432))
      {
        uint64_t v26 = (uint64_t *)(v24 - 12);
        uint64_t v27 = (uint64_t *)(a1 + 432);
        uint64_t v44 = v49;
        double v29 = *(const void **)(a1 + 336);
        unsigned int v28 = *(const void **)(a1 + 344);
        if (v28 == v29)
        {
          uint64_t v45 = v49;
          uint64_t v30 = *(unsigned int *)(a1 + 356);
          if (v30) {
            memmove(v49, v28, 8 * v30);
          }
        }
        else
        {
          uint64_t v45 = *(unsigned char **)(a1 + 344);
          *(void *)(a1 + 344) = v29;
          LODWORD(v30) = *(_DWORD *)(a1 + 356);
        }
        int v46 = *(_DWORD *)(a1 + 352);
        int v47 = v30;
        int v48 = *(_DWORD *)(a1 + 360);
        *(void *)(a1 + 352) = 8;
        *(_DWORD *)(a1 + 360) = 0;
        uint64_t v50 = *v27;
        char v51 = *(unsigned char *)(a1 + 440);
        if (v26 != v23) {
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, v24 - 12);
        }
        double v31 = *v24;
        *(unsigned char *)(a1 + 440) = *((unsigned char *)v24 + 8);
        *(double *)uint64_t v27 = v31;
        if (&v44 != (unsigned char **)v26) {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v24 - 12), 8, (double *)&v44);
        }
        *(void *)unsigned int v24 = v50;
        *((unsigned char *)v24 + 8) = v51;
        if (v45 != v44) {
          free(v45);
        }
        if (*(_DWORD *)(a1 + 432) < *(_DWORD *)(a1 + 320))
        {
          uint64_t v32 = (uint64_t *)(a1 + 320);
          uint64_t v44 = v49;
          int v34 = *(const void **)(a1 + 224);
          uint64_t v33 = *(const void **)(a1 + 232);
          if (v33 == v34)
          {
            uint64_t v45 = v49;
            uint64_t v35 = *(unsigned int *)(a1 + 244);
            if (v35) {
              memmove(v49, v33, 8 * v35);
            }
          }
          else
          {
            uint64_t v45 = *(unsigned char **)(a1 + 232);
            *(void *)(a1 + 232) = v34;
            LODWORD(v35) = *(_DWORD *)(a1 + 244);
          }
          int v46 = *(_DWORD *)(a1 + 240);
          int v47 = v35;
          int v48 = *(_DWORD *)(a1 + 248);
          *(void *)(a1 + 240) = 8;
          *(_DWORD *)(a1 + 248) = 0;
          uint64_t v50 = *v32;
          char v51 = *(unsigned char *)(a1 + 328);
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)(a1 + 336));
          uint64_t *v32 = *v27;
          *(unsigned char *)(a1 + 328) = *(unsigned char *)(a1 + 440);
          if (&v44 != (unsigned char **)v23) {
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, (double *)&v44);
          }
          *uint64_t v27 = v50;
          *(unsigned char *)(a1 + 440) = v51;
          if (v45 != v44) {
            free(v45);
          }
          int v36 = (uint64_t *)(a1 + 208);
          if (*(_DWORD *)(a1 + 320) < *(_DWORD *)(a1 + 208))
          {
            uint64_t v44 = v49;
            uint64_t v38 = *(const void **)(a1 + 112);
            uint64_t v37 = *(const void **)(a1 + 120);
            if (v37 == v38)
            {
              uint64_t v45 = v49;
              uint64_t v39 = *(unsigned int *)(a1 + 132);
              if (v39) {
                memmove(v49, v37, 8 * v39);
              }
            }
            else
            {
              uint64_t v45 = *(unsigned char **)(a1 + 120);
              *(void *)(a1 + 120) = v38;
              LODWORD(v39) = *(_DWORD *)(a1 + 132);
            }
            int v46 = *(_DWORD *)(a1 + 128);
            int v47 = v39;
            int v48 = *(_DWORD *)(a1 + 136);
            *(void *)(a1 + 128) = 8;
            *(_DWORD *)(a1 + 136) = 0;
            uint64_t v50 = *v36;
            char v51 = *(unsigned char *)(a1 + 216);
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)(a1 + 224));
            *int v36 = *v32;
            *(unsigned char *)(a1 + 216) = *(unsigned char *)(a1 + 328);
            if (&v44 != (unsigned char **)(a1 + 224)) {
              llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)&v44);
            }
            uint64_t *v32 = v50;
            *(unsigned char *)(a1 + 328) = v51;
            if (v45 != v44) {
              free(v45);
            }
            uint64_t v40 = (uint64_t *)(a1 + 96);
            if (*(_DWORD *)(a1 + 208) < *(_DWORD *)(a1 + 96))
            {
              uint64_t v44 = v49;
              uint64_t v42 = *(void *)a1;
              uint64_t v41 = *(const void **)(a1 + 8);
              if (v41 == *(const void **)a1)
              {
                uint64_t v45 = v49;
                uint64_t v43 = *(unsigned int *)(a1 + 20);
                if (v43) {
                  memmove(v49, v41, 8 * v43);
                }
              }
              else
              {
                uint64_t v45 = *(unsigned char **)(a1 + 8);
                *(void *)(a1 + 8) = v42;
                LODWORD(v43) = *(_DWORD *)(a1 + 20);
              }
              int v46 = *(_DWORD *)(a1 + 16);
              int v47 = v43;
              int v48 = *(_DWORD *)(a1 + 24);
              *(void *)(a1 + 16) = 8;
              *(_DWORD *)(a1 + 24) = 0;
              uint64_t v50 = *v40;
              char v51 = *(unsigned char *)(a1 + 104);
              llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 112));
              *uint64_t v40 = *v36;
              *(unsigned char *)(a1 + 104) = *(unsigned char *)(a1 + 216);
              if (&v44 != (unsigned char **)(a1 + 112)) {
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)&v44);
              }
              *int v36 = v50;
              *(unsigned char *)(a1 + 216) = v51;
LABEL_11:
              if (v45 != v44) {
                free(v45);
              }
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v13 = a1 + 224;
      sub_1CCA3783C(a1, a1 + 112, a1 + 224);
      uint64_t v14 = a1 + 336;
      if (a1 + 336 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v14 + 96) < *(_DWORD *)(v13 + 96))
    {
      uint64_t v44 = v49;
      uint64_t v18 = *(const void **)v14;
      double v17 = *(const void **)(v14 + 8);
      if (v17 == *(const void **)v14)
      {
        uint64_t v45 = v49;
        uint64_t v19 = *(unsigned int *)(v14 + 20);
        if (v19) {
          memmove(v49, v17, 8 * v19);
        }
      }
      else
      {
        uint64_t v45 = *(unsigned char **)(v14 + 8);
        *(void *)(v14 + 8) = v18;
        LODWORD(v19) = *(_DWORD *)(v14 + 20);
      }
      int v46 = *(_DWORD *)(v14 + 16);
      int v47 = v19;
      int v48 = *(_DWORD *)(v14 + 24);
      *(void *)(v14 + 16) = 8;
      *(_DWORD *)(v14 + 24) = 0;
      uint64_t v50 = *(void *)(v14 + 96);
      uint64_t v20 = v15;
      char v51 = *(unsigned char *)(v14 + 104);
      while (1)
      {
        uint64_t v21 = a1 + v20;
        llvm::SmallPtrSetImplBase::MoveFrom(a1 + v20 + 336, 8, (double *)(a1 + v20 + 224));
        *(void *)(v21 + 432) = *(void *)(v21 + 320);
        *(unsigned char *)(v21 + 440) = *(unsigned char *)(v21 + 328);
        if (v20 == -224) {
          break;
        }
        v20 -= 112;
        if (v50 >= *(_DWORD *)(v21 + 208))
        {
          uint64_t v22 = (void *)(a1 + v20 + 336);
          goto LABEL_24;
        }
      }
      uint64_t v22 = (void *)a1;
LABEL_24:
      if (&v44 != v22) {
        llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v22, 8, (double *)&v44);
      }
      *(void *)(v21 + 320) = v50;
      *(unsigned char *)(v21 + 328) = v51;
      if (v45 != v44) {
        free(v45);
      }
      if (++v16 == 8) {
        return v14 + 112 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 112;
    v14 += 112;
    if (v14 == a2) {
      return 1;
    }
  }
}

void sub_1CCA383A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CCA3783C(a1, a2, a3);
  uint64_t v8 = (uint64_t *)(a4 + 96);
  unsigned int v9 = (uint64_t *)(a3 + 96);
  if (*(_DWORD *)(a4 + 96) < *(_DWORD *)(a3 + 96))
  {
    unsigned int v24 = v29;
    double v11 = *(double *)a3;
    uint64_t v10 = *(const void **)(a3 + 8);
    if (v10 == *(const void **)a3)
    {
      unsigned int v25 = v29;
      uint64_t v12 = *(unsigned int *)(a3 + 20);
      if (v12) {
        memmove(v29, v10, 8 * v12);
      }
    }
    else
    {
      unsigned int v25 = *(unsigned char **)(a3 + 8);
      *(double *)(a3 + 8) = v11;
      LODWORD(v12) = *(_DWORD *)(a3 + 20);
    }
    int v26 = *(_DWORD *)(a3 + 16);
    int v27 = v12;
    int v28 = *(_DWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 8;
    *(_DWORD *)(a3 + 24) = 0;
    uint64_t v30 = *v9;
    char v31 = *(unsigned char *)(a3 + 104);
    if (a4 != a3) {
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)a4);
    }
    uint64_t v13 = *v8;
    *(unsigned char *)(a3 + 104) = *(unsigned char *)(a4 + 104);
    *unsigned int v9 = v13;
    if (&v24 != (unsigned char **)a4) {
      llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)&v24);
    }
    *uint64_t v8 = v30;
    *(unsigned char *)(a4 + 104) = v31;
    if (v25 != v24) {
      free(v25);
    }
    uint64_t v14 = (uint64_t *)(a2 + 96);
    if (*(_DWORD *)v9 < *(_DWORD *)(a2 + 96))
    {
      unsigned int v24 = v29;
      double v16 = *(double *)a2;
      uint64_t v15 = *(const void **)(a2 + 8);
      if (v15 == *(const void **)a2)
      {
        unsigned int v25 = v29;
        uint64_t v17 = *(unsigned int *)(a2 + 20);
        if (v17) {
          memmove(v29, v15, 8 * v17);
        }
      }
      else
      {
        unsigned int v25 = *(unsigned char **)(a2 + 8);
        *(double *)(a2 + 8) = v16;
        LODWORD(v17) = *(_DWORD *)(a2 + 20);
      }
      int v26 = *(_DWORD *)(a2 + 16);
      int v27 = v17;
      int v28 = *(_DWORD *)(a2 + 24);
      *(void *)(a2 + 16) = 8;
      *(_DWORD *)(a2 + 24) = 0;
      uint64_t v30 = *v14;
      char v31 = *(unsigned char *)(a2 + 104);
      if (a3 != a2) {
        llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
      }
      uint64_t v18 = *v9;
      *(unsigned char *)(a2 + 104) = *(unsigned char *)(a3 + 104);
      *uint64_t v14 = v18;
      if (&v24 != (unsigned char **)a3) {
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v24);
      }
      *unsigned int v9 = v30;
      *(unsigned char *)(a3 + 104) = v31;
      if (v25 != v24) {
        free(v25);
      }
      uint64_t v19 = (uint64_t *)(a1 + 96);
      if (*(_DWORD *)v14 < *(_DWORD *)(a1 + 96))
      {
        unsigned int v24 = v29;
        uint64_t v21 = *(void *)a1;
        uint64_t v20 = *(const void **)(a1 + 8);
        if (v20 == *(const void **)a1)
        {
          unsigned int v25 = v29;
          uint64_t v22 = *(unsigned int *)(a1 + 20);
          if (v22) {
            memmove(v29, v20, 8 * v22);
          }
        }
        else
        {
          unsigned int v25 = *(unsigned char **)(a1 + 8);
          *(void *)(a1 + 8) = v21;
          LODWORD(v22) = *(_DWORD *)(a1 + 20);
        }
        int v26 = *(_DWORD *)(a1 + 16);
        int v27 = v22;
        int v28 = *(_DWORD *)(a1 + 24);
        *(void *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        uint64_t v30 = *v19;
        char v31 = *(unsigned char *)(a1 + 104);
        if (a2 != a1) {
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
        }
        uint64_t v23 = *v14;
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        *uint64_t v19 = v23;
        if (&v24 != (unsigned char **)a2) {
          llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v24);
        }
        *uint64_t v14 = v30;
        *(unsigned char *)(a2 + 104) = v31;
        if (v25 != v24) {
          free(v25);
        }
      }
    }
  }
}

uint64_t sub_1CCA386AC(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    BOOL v5 = a2 + 2;
    uint64_t v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      unsigned int v6 = *(char **)a1;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = 112 * v7;
        do
        {
          unsigned int v9 = *(void **)&v6[v8 - 104];
          if (v9 != *(void **)&v6[v8 - 112]) {
            free(v9);
          }
          v8 -= 112;
        }
        while (v8);
        unsigned int v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16)) {
        free(v6);
      }
      *(void *)a1 = *a2;
      uint64_t v10 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_12:
      *uint64_t v10 = 0;
      return a1;
    }
    uint64_t v10 = a2 + 1;
    unint64_t v12 = *((unsigned int *)a2 + 2);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      uint64_t v17 = *(void *)a1;
      if (v12)
      {
        uint64_t v18 = 112 * v12;
        do
        {
          if (v4 != v17) {
            llvm::SmallPtrSetImplBase::MoveFrom(v17, 8, (double *)v4);
          }
          uint64_t v19 = *(void *)(v4 + 96);
          *(unsigned char *)(v17 + 104) = *(unsigned char *)(v4 + 104);
          *(void *)(v17 + 96) = v19;
          v4 += 112;
          v17 += 112;
          v18 -= 112;
        }
        while (v18);
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        uint64_t v20 = *(void *)a1;
      }
      else
      {
        uint64_t v20 = *(void *)a1;
      }
      for (uint64_t i = v20 + 112 * v13; i != v17; i -= 112)
      {
        uint64_t v43 = *(void **)(i - 112);
        uint64_t v42 = *(void **)(i - 104);
        if (v42 != v43) {
          free(v42);
        }
      }
      *(_DWORD *)(a1 + 8) = v12;
      uint64_t v44 = *((unsigned int *)a2 + 2);
      if (v44)
      {
        uint64_t v45 = *a2;
        uint64_t v46 = 112 * v44;
        do
        {
          int v47 = *(void **)(v45 + v46 - 104);
          if (v47 != *(void **)(v45 + v46 - 112)) {
            free(v47);
          }
          v46 -= 112;
        }
        while (v46);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if (v13)
      {
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = 112 * v13;
        do
        {
          if (v4 != v21) {
            llvm::SmallPtrSetImplBase::MoveFrom(v21, 8, (double *)v4);
          }
          uint64_t v23 = *(void *)(v4 + 96);
          *(unsigned char *)(v21 + 104) = *(unsigned char *)(v4 + 104);
          *(void *)(v21 + 96) = v23;
          v4 += 112;
          v21 += 112;
          v22 -= 112;
        }
        while (v22);
        goto LABEL_35;
      }
    }
    else
    {
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = 112 * v13;
        do
        {
          double v16 = *(void **)(v14 + v15 - 104);
          if (v16 != *(void **)(v14 + v15 - 112)) {
            free(v16);
          }
          v15 -= 112;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1CCA36394(a1, v12);
    }
    uint64_t v13 = 0;
LABEL_35:
    uint64_t v24 = *a2;
    uint64_t v25 = *((unsigned int *)a2 + 2);
    if (v13 != v25)
    {
      uint64_t v26 = *(void *)a1;
      uint64_t v27 = 112 * v13;
      uint64_t v28 = 112 * v25;
      do
      {
        uint64_t v29 = v24 + v27;
        uint64_t v30 = v26 + v27;
        char v31 = (void *)(v26 + v27 + 32);
        *(void *)(v26 + v27) = v31;
        uint64_t v33 = *(void *)(v24 + v27);
        uint64_t v32 = *(void *)(v24 + v27 + 8);
        if (v32 == v33)
        {
          *(void *)(v30 + 8) = v31;
          uint64_t v34 = *(unsigned int *)(v29 + 20);
          if (v34) {
            memmove(v31, *(const void **)(v29 + 8), 8 * v34);
          }
        }
        else
        {
          *(void *)(v30 + 8) = v32;
          *(void *)(v29 + 8) = v33;
        }
        uint64_t v35 = v24 + v27;
        uint64_t v36 = v26 + v27;
        *(void *)(v36 + 16) = *(void *)(v24 + v27 + 16);
        *(_DWORD *)(v36 + 24) = *(_DWORD *)(v24 + v27 + 24);
        *(void *)(v35 + 16) = 8;
        *(_DWORD *)(v35 + 24) = 0;
        uint64_t v37 = *(void *)(v24 + v27 + 96);
        *(unsigned char *)(v36 + 104) = *(unsigned char *)(v24 + v27 + 104);
        *(void *)(v36 + 96) = v37;
        v26 += 112;
        v28 -= 112;
        v24 += 112;
      }
      while (v27 != v28);
      uint64_t v24 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    uint64_t v38 = *v10;
    if (v38)
    {
      uint64_t v39 = 112 * v38;
      do
      {
        uint64_t v40 = *(void **)(v24 + v39 - 104);
        if (v40 != *(void **)(v24 + v39 - 112)) {
          free(v40);
        }
        v39 -= 112;
      }
      while (v39);
    }
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1CCA389C4(uint64_t a1, uint64_t a2)
{
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if (v4 == 5)
    {
      LODWORD(v4) = *(unsigned __int16 *)(a2 + 18);
      HIDWORD(v11) = v4 - 13;
      LODWORD(v11) = v4 - 13;
      unsigned int v10 = v11 >> 1;
      BOOL v7 = v10 > 6;
      int v12 = (1 << v10) & 0x47;
      if (!v7 && v12 != 0) {
        goto LABEL_12;
      }
    }
LABEL_16:
    int v16 = 0;
    return v16 & v4;
  }
  HIDWORD(v6) = v4 - 41;
  LODWORD(v6) = v4 - 41;
  unsigned int v5 = v6 >> 1;
  BOOL v7 = v5 > 6;
  int v8 = (1 << v5) & 0x47;
  if (v7 || v8 == 0) {
    goto LABEL_16;
  }
  LODWORD(v4) = v4 - 28;
LABEL_12:
  if (v4 == 15
    && (*(unsigned char *)(a2 + 17) & 4) != 0
    && ((int v14 = *(_DWORD *)(a2 + 20), (v14 & 0x40000000) != 0)
      ? (uint64_t v15 = *(llvm::Constant ***)(a2 - 8))
      : (uint64_t v15 = (llvm::Constant **)(a2 - 32 * (v14 & 0x7FFFFFF))),
        sub_1CBF535C4(a1, *v15)))
  {
    int v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x40000000) != 0) {
      uint64_t v18 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v18 = a2 - 32 * (v17 & 0x7FFFFFF);
    }
    uint64_t v4 = *(void *)(v18 + 32);
    if (v4)
    {
      **(void **)(a1 + 8) = v4;
      int v16 = 1;
      LODWORD(v4) = 1;
      return v16 & v4;
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  int v16 = 1;
  return v16 & v4;
}

uint64_t sub_1CCA38AD0(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 46
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (unsigned int v9 = *(uint64_t **)(a2 - 8))
        : (unsigned int v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

void sub_1CCA38B40()
{
}

void *sub_1CCA38B54()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F262B608;
  return result;
}

void sub_1CCA38B8C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262B608;
}

BOOL sub_1CCA38BB4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(void *)(a2 - 32) + 36) == 168;
}

uint64_t sub_1CCA38BC8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 56)
  {
    uint64_t v4 = *(void *)(a2 - 64);
    if (v4)
    {
      **a1 = v4;
      uint64_t v5 = *(void *)(a2 - 32);
      if (v5) {
        BOOL v6 = *(unsigned char *)(v5 + 16) == 16;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        return 0;
      }
      int v7 = (void *)(v5 + 24);
      uint64_t v8 = *(unsigned int *)(v5 + 32);
      if (v8 < 0x41)
      {
LABEL_9:
        *a1[1] = *v7;
        return 1;
      }
      int v11 = 0;
      int64_t v12 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        if (v12-- < 1) {
          break;
        }
        unint64_t v14 = *(void *)(*v7 + 8 * v12);
        v11 += __clz(v14);
      }
      while (!v14);
      uint64_t v4 = 0;
      int v15 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v15 = 0;
      }
      if ((v8 - v11 - v15) <= 0x40)
      {
        int v7 = (void *)*v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v3 == 5)
    {
      a3 = 0;
      if (*(_WORD *)(a2 + 18) == 28)
      {
        uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v9)
        {
          **a1 = v9;
          if (sub_1CD497E24(a1 + 1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))) {
            a3 = 1;
          }
        }
      }
    }
    return (v3 == 5) & a3;
  }
  return v4;
}

uint64_t sub_1CCA38CF4(void **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2 || *(void *)(v2 + 8)) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  LODWORD(v5) = v4 - 41;
  BOOL v7 = v4 > 0x1B && v5 < 0x12;
  if (v7)
  {
    uint64_t v5 = *(void *)(a2 - 64);
    if (v5)
    {
      **a1 = v5;
      uint64_t v5 = *(void *)(a2 - 32);
      if (v5)
      {
        *a1[1] = v5;
        LODWORD(v5) = 1;
      }
    }
  }
  return v7 & v5;
}

llvm::UndefValue **sub_1CCA38D54(uint64_t *a1, llvm::ValueAsMetadata *a2, llvm::Value *a3)
{
  return sub_1CC9D3C84(*a1, a2, a3);
}

void sub_1CCA38D5C(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_1CCA38D64()
{
  int v2 = 3;
  int v3 = &v2;
  *(void *)&long long v1 = "How wide an instruction window to bypass looking for another guard";
  *((void *)&v1 + 1) = 66;
  sub_1CD68B16C(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EBCE5B78, &dword_1CB82C000);
}

void *sub_1CCA38DD0(void *result, _DWORD *a2, void *a3)
{
  unsigned int v5 = *((unsigned __int8 *)result + 16);
  if (result && v5 == 16)
  {
    BOOL v6 = result + 3;
    if (*((_DWORD *)result + 8) >= 0x41u) {
      BOOL v6 = (void *)*v6;
    }
    *a3 = *v6;
    *a2 = 0;
    BOOL v7 = (llvm::ConstantInt *)*result;
    return llvm::ConstantInt::get(v7, 0, 0);
  }
  if (!result) {
    goto LABEL_26;
  }
  BOOL v8 = v5 < 0x1C || v5 - 41 > 0x11;
  if (v8) {
    goto LABEL_26;
  }
  HIDWORD(v10) = v5 - 41;
  LODWORD(v10) = v5 - 41;
  unsigned int v9 = v10 >> 1;
  BOOL v8 = v9 > 6;
  int v11 = (1 << v9) & 0x47;
  BOOL v12 = v8 || v11 == 0;
  if (!v12 && (*((unsigned char *)result + 17) & 6) == 0) {
    goto LABEL_26;
  }
  uint64_t v13 = *(result - 4);
  if (!v13 || *(unsigned char *)(v13 + 16) != 16) {
    goto LABEL_26;
  }
  if (v5 != 41)
  {
    if (v5 == 45)
    {
      int v17 = (uint64_t *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u) {
        int v17 = (uint64_t *)*v17;
      }
      uint64_t v15 = *v17;
      goto LABEL_34;
    }
    if (v5 == 53)
    {
      unint64_t v14 = (void *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u) {
        unint64_t v14 = (void *)*v14;
      }
      uint64_t v15 = 1 << *v14;
LABEL_34:
      *a2 = v15;
      *a3 = 0;
      return (void *)*(result - 8);
    }
LABEL_26:
    *a2 = 1;
    *a3 = 0;
    return result;
  }
  int v18 = 0;
  BOOL result = (void *)sub_1CCA38DD0(*(result - 8), &v18, a3);
  int v16 = (void *)(v13 + 24);
  if (*(_DWORD *)(v13 + 32) >= 0x41u) {
    int v16 = (void *)*v16;
  }
  *a3 += *v16;
  *a2 = v18;
  return result;
}

llvm::Value *sub_1CCA38F6C(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type *a4, uint64_t a5, llvm::Instruction *a6)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v10 > 0x14)
  {
    unsigned int v11 = v10 - 28;
    if (v10 - 66 < 3)
    {
      int v12 = *(_DWORD *)(a2 + 20);
      if ((v12 & 0x40000000) != 0) {
        uint64_t v13 = *(llvm::Value ***)(a2 - 8);
      }
      else {
        uint64_t v13 = (llvm::Value **)(a2 - 32 * (v12 & 0x7FFFFFF));
      }
      unint64_t v14 = *v13;
      if (*(llvm::Type ****)*v13 == a3) {
        return v14;
      }
      __int16 v93 = 257;
      IntegerCast = llvm::CastInst::CreateIntegerCast(v14, a3, (llvm::Type *)(v11 == 40), v92, 0, a6);
      goto LABEL_14;
    }
    uint64_t v16 = v10 - 41;
    if (((1 << v16) & 0x3F255) != 0)
    {
      int v17 = *(_DWORD *)(a2 + 20);
      if ((v17 & 0x40000000) != 0) {
        int v18 = *(void **)(a2 - 8);
      }
      else {
        int v18 = (void *)(a2 - 32 * (v17 & 0x7FFFFFF));
      }
      uint64_t v19 = (void *)sub_1CCA38F6C(a1, *v18, a3, a4);
      int v20 = *(_DWORD *)(a2 + 20);
      if ((v20 & 0x40000000) != 0) {
        uint64_t v21 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v21 = a2 - 32 * (v20 & 0x7FFFFFF);
      }
      uint64_t v22 = sub_1CCA38F6C(a1, *(void *)(v21 + 32), a3, a4);
      __int16 v93 = 257;
      IntegerCast = llvm::BinaryOperator::Create(v11, v19, v22, v92, 0);
LABEL_14:
      uint64_t v24 = (int32x2_t ****)IntegerCast;
LABEL_15:
      llvm::Value::takeName(v24, (llvm::Value *)a2);
      return sub_1CC9D2AB4(a1, (llvm::Value *)v24, a2);
    }
    if (v16 == 44)
    {
      int v29 = *(_DWORD *)(a2 + 20);
      if ((v29 & 0x40000000) != 0) {
        uint64_t v30 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v30 = a2 - 32 * (v29 & 0x7FFFFFF);
      }
      char v31 = (uint64_t *)sub_1CCA38F6C(a1, *(void *)(v30 + 32), a3, a4);
      int v32 = *(_DWORD *)(a2 + 20);
      if ((v32 & 0x40000000) != 0) {
        uint64_t v33 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v33 = a2 - 32 * (v32 & 0x7FFFFFF);
      }
      uint64_t v34 = sub_1CCA38F6C(a1, *(void *)(v33 + 64), a3, a4);
      int v35 = *(_DWORD *)(a2 + 20);
      if ((v35 & 0x40000000) != 0) {
        uint64_t v36 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v36 = (uint64_t *)(a2 - 32 * (v35 & 0x7FFFFFF));
      }
      uint64_t v37 = *v36;
      __int16 v93 = 257;
      IntegerCast = sub_1CC199EFC(v37, v31, v34, v92, 0, 0);
      goto LABEL_14;
    }
    int v38 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    __int16 v93 = 257;
    uint64_t v39 = (char *)operator new(0x48uLL);
    *((void *)v39 + 1) = a3;
    uint64_t v24 = (int32x2_t ****)(v39 + 8);
    *(void *)uint64_t v39 = 0;
    *((void *)v39 + 2) = 0;
    *((void *)v39 + 3) = 0x4000000000000053;
    *((_OWORD *)v39 + 2) = 0u;
    *((_OWORD *)v39 + 3) = 0u;
    *((_DWORD *)v39 + 16) = 0;
    *((_DWORD *)v39 + 17) = v38;
    llvm::Value::setNameImpl((llvm::Value *)(v39 + 8), v92);
    if (v39[24])
    {
LABEL_30:
      uint64_t v40 = *((unsigned int *)v39 + 17);
      uint64_t v41 = operator new(40 * v40);
      *(void *)uint64_t v39 = v41;
      if (v40)
      {
        uint64_t v42 = &v41[4 * v40];
        do
        {
          void *v41 = 0;
          v41[1] = 0;
          v41[2] = 0;
          v41[3] = v24;
          v41 += 4;
        }
        while (v41 != v42);
      }
      uint64_t v91 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if (v91)
      {
        for (uint64_t i = 0; i != v91; ++i)
        {
          int v44 = *(_DWORD *)(a2 + 20);
          if ((v44 & 0x40000000) != 0) {
            uint64_t v45 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v45 = a2 - 32 * (v44 & 0x7FFFFFF);
          }
          uint64_t v46 = sub_1CCA38F6C(a1, *(void *)(v45 + 32 * i), a3, a4);
          int v47 = *(_DWORD *)(a2 + 20);
          if ((v47 & 0x40000000) != 0) {
            uint64_t v48 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v48 = a2 - 32 * (v47 & 0x7FFFFFF);
          }
          unsigned int v49 = *(int32x2_t ****)(v48 + 32 * *(unsigned int *)(a2 + 60) + 8 * i);
          int v50 = *((_DWORD *)v39 + 7);
          uint64_t v51 = v50 & 0x7FFFFFF;
          if ((v50 & 0x7FFFFFF) == *((_DWORD *)v39 + 17))
          {
            LODWORD(v64) = v51 + (v51 >> 1);
            if (v64 <= 2) {
              uint64_t v64 = 2;
            }
            else {
              uint64_t v64 = v64;
            }
            unint64_t v88 = v49;
            uint64_t v89 = v64;
            *((_DWORD *)v39 + 17) = v64;
            if ((v50 & 0x40000000) != 0) {
              double v65 = *(uint64_t **)v39;
            }
            else {
              double v65 = (uint64_t *)&v24[-4 * v51];
            }
            __p = v65;
            uint64_t v66 = operator new(40 * v64);
            *(void *)uint64_t v39 = v66;
            uint64_t v67 = v66;
            do
            {
              void *v67 = 0;
              v67[1] = 0;
              v67[2] = 0;
              v67[3] = v24;
              v67 += 4;
            }
            while (v67 != &v66[4 * v89]);
            int v68 = *((_DWORD *)v39 + 7);
            if ((v68 & 0x40000000) != 0) {
              uint64_t v69 = (uint64_t)v66;
            }
            else {
              uint64_t v69 = (uint64_t)&v24[-4 * (v68 & 0x7FFFFFF)];
            }
            uint64_t v87 = v69;
            sub_1CC5E4108((uint64_t)v92, __p, &__p[4 * v51], v69);
            if (v51)
            {
              memmove((void *)(v87 + 32 * v89), &__p[4 * v51], 8 * v51);
              uint64_t v70 = 4 * v51;
              do
              {
                unint64_t v71 = &__p[v70];
                if (__p[v70 - 4])
                {
                  *(void *)*(v71 - 2) = *(v71 - 3);
                  uint64_t v72 = *(v71 - 3);
                  if (v72) {
                    *(void *)(v72 + 16) = *(v71 - 2);
                  }
                }
                v70 -= 4;
              }
              while (v70 * 8);
            }
            operator delete(__p);
            int v50 = *((_DWORD *)v39 + 7);
            unsigned int v49 = v88;
          }
          uint64_t v52 = (v50 + 1) & 0x7FFFFFF;
          *((_DWORD *)v39 + 7) = v50 & 0xF8000000 | (v50 + 1) & 0x7FFFFFF;
          if ((v50 & 0x40000000) != 0) {
            uint64_t v53 = *(int32x2_t *****)v39;
          }
          else {
            uint64_t v53 = &v24[-4 * v52];
          }
          uint64_t v54 = (v52 - 1);
          uint64_t v55 = &v53[4 * v54];
          if (*v55)
          {
            *v55[2] = (int32x2_t **)v55[1];
            uint64_t v63 = v55[1];
            if (v63) {
              v63[2] = (int32x2_t **)v55[2];
            }
          }
          void *v55 = (int32x2_t ***)v46;
          if (v46)
          {
            unsigned int v58 = *(int32x2_t ****)(v46 + 8);
            unsigned int v57 = (int32x2_t *****)(v46 + 8);
            uint64_t v56 = v58;
            uint64_t v59 = &v53[4 * v54];
            v59[1] = v58;
            if (v58) {
              v56[2] = (int32x2_t **)(v59 + 1);
            }
            v59[2] = (int32x2_t ***)v57;
            *unsigned int v57 = v55;
          }
          int v60 = *((_DWORD *)v39 + 7);
          uint64_t v61 = v60 & 0x7FFFFFF;
          if ((v60 & 0x40000000) != 0) {
            unsigned int v62 = *(int32x2_t *****)v39;
          }
          else {
            unsigned int v62 = &v24[-4 * v61];
          }
          (&v62[4 * *((unsigned int *)v39 + 17)])[(v61 - 1)] = v49;
        }
      }
      goto LABEL_15;
    }
    if ((v39[31] & 0x10) == 0) {
      goto LABEL_86;
    }
    unint64_t v73 = ***v24;
    int32x2_t v74 = v73[19];
    uint64_t v75 = v73[21].u32[0];
    if (v75)
    {
      LODWORD(v76) = (v75 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v77 = (int32x2_t *****)(*(void *)&v74 + 16 * v76);
      uint64_t v78 = *v77;
      if (*v77 == v24)
      {
LABEL_78:
        v81 = v77[1];
        unint64_t v84 = (unint64_t)*v81;
        BOOL v82 = v81 + 2;
        unint64_t v83 = v84;
        if (v84 >= 5 && *(_DWORD *)v82 == *(_DWORD *)"llvm." && v82[4] == aLlvm_1[4])
        {
          *((_DWORD *)v39 + 10) |= 0x2000u;
          int v86 = llvm::Function::lookupIntrinsicID(v82, v83);
LABEL_85:
          *((_DWORD *)v39 + 11) = v86;
          goto LABEL_30;
        }
LABEL_86:
        int v86 = 0;
        *((_DWORD *)v39 + 10) &= ~0x2000u;
        goto LABEL_85;
      }
      int v79 = 1;
      while (v78 != (int32x2_t ****)-4096)
      {
        int v80 = v76 + v79++;
        uint64_t v76 = v80 & (v75 - 1);
        uint64_t v78 = *(int32x2_t *****)(*(void *)&v74 + 16 * v76);
        if (v78 == v24)
        {
          uint64_t v77 = (int32x2_t *****)(*(void *)&v74 + 16 * v76);
          goto LABEL_78;
        }
      }
    }
    uint64_t v77 = (int32x2_t *****)(*(void *)&v74 + 16 * v75);
    goto LABEL_78;
  }
  uint64_t v25 = llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)a2, a3, a4);
  uint64_t v26 = *(llvm::DataLayout **)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 64);
  v92[0] = (const char *)1;
  for (uint64_t j = 1; j != 9; j += 2)
    v92[j] = (const char *)-4096;
  unint64_t v14 = sub_1CBFB8694((uint64_t)v25, v26, v27, (uint64_t)v92);
  if (((uint64_t)v92[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v92[1], 8);
  }
  return v14;
}

uint64_t sub_1CCA395B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)*(a2 - 4);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)a3;
  int v7 = *((unsigned __int8 *)a2 + 16);
  int v8 = *(unsigned __int8 *)(a3 + 16);
  unsigned int v9 = *(_DWORD *)(v4 + 8);
  if ((v9 & 0xFE) == 0x12) {
    unsigned int v9 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
  }
  if (v9 == 15)
  {
    uint64_t v10 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(v10 + 232);
    if (v9 < 0x100) {
      goto LABEL_13;
    }
    unsigned int v12 = v9 >> 8;
    unint64_t v13 = *(unsigned int *)(v10 + 240);
    uint64_t v14 = v11;
    if (v13)
    {
      uint64_t v14 = v11;
      unint64_t v15 = v13;
      do
      {
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = v14 + 16 * (v15 >> 1);
        unsigned int v18 = *(_DWORD *)(v17 + 8);
        uint64_t v19 = v17 + 16;
        v15 += ~(v15 >> 1);
        if (v18 < v12) {
          uint64_t v14 = v19;
        }
        else {
          unint64_t v15 = v16;
        }
      }
      while (v15);
    }
    if (v14 == v11 + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_13:
    }
      uint64_t v14 = v11;
    int v20 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v4, (llvm::LLVMContext *)*(unsigned int *)(v14 + 4));
    uint64_t v21 = (uint64_t)v20;
    if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    {
      uint64_t v22 = (llvm::Type *)*(unsigned int *)(v4 + 32);
      if (*(_DWORD *)(v4 + 8) == 19) {
        llvm::ScalableVectorType::get(v20, v22);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v20, v22);
      }
      uint64_t v21 = v23;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v24 = (v7 - 28);
  uint64_t v25 = (v8 - 28);
  unsigned int v26 = *(_DWORD *)(v5 + 8);
  if ((v26 & 0xFE) == 0x12) {
    unsigned int v26 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
  }
  if (v26 == 15)
  {
    uint64_t v27 = *(void *)(a1 + 80);
    uint64_t v28 = *(void *)(v27 + 232);
    if (v26 < 0x100) {
      goto LABEL_31;
    }
    unsigned int v29 = v26 >> 8;
    unint64_t v30 = *(unsigned int *)(v27 + 240);
    uint64_t v31 = v28;
    if (v30)
    {
      uint64_t v31 = v28;
      unint64_t v32 = v30;
      do
      {
        unint64_t v33 = v32 >> 1;
        uint64_t v34 = v31 + 16 * (v32 >> 1);
        unsigned int v35 = *(_DWORD *)(v34 + 8);
        uint64_t v36 = v34 + 16;
        v32 += ~(v32 >> 1);
        if (v35 < v29) {
          uint64_t v31 = v36;
        }
        else {
          unint64_t v32 = v33;
        }
      }
      while (v32);
    }
    if (v31 == v28 + 16 * v30 || *(_DWORD *)(v31 + 8) != v29) {
LABEL_31:
    }
      uint64_t v31 = v28;
    uint64_t v37 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v5, (llvm::LLVMContext *)*(unsigned int *)(v31 + 4));
    int v38 = (llvm::Type *)v37;
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      uint64_t v39 = (llvm::Type *)*(unsigned int *)(v5 + 32);
      if (*(_DWORD *)(v5 + 8) == 19) {
        llvm::ScalableVectorType::get(v37, v39);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v37, v39);
      }
      int v38 = v40;
    }
  }
  else
  {
    int v38 = 0;
  }
  unsigned int v41 = *(_DWORD *)(v6 + 8);
  if ((v41 & 0xFE) == 0x12) {
    unsigned int v41 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
  }
  if (v41 == 15)
  {
    uint64_t v42 = *(void *)(a1 + 80);
    uint64_t v43 = *(void *)(v42 + 232);
    if (v41 < 0x100) {
      goto LABEL_49;
    }
    unsigned int v44 = v41 >> 8;
    unint64_t v45 = *(unsigned int *)(v42 + 240);
    uint64_t v46 = v43;
    if (v45)
    {
      uint64_t v46 = v43;
      unint64_t v47 = v45;
      do
      {
        unint64_t v48 = v47 >> 1;
        uint64_t v49 = v46 + 16 * (v47 >> 1);
        unsigned int v50 = *(_DWORD *)(v49 + 8);
        uint64_t v51 = v49 + 16;
        v47 += ~(v47 >> 1);
        if (v50 < v44) {
          uint64_t v46 = v51;
        }
        else {
          unint64_t v47 = v48;
        }
      }
      while (v47);
    }
    if (v46 == v43 + 16 * v45 || *(_DWORD *)(v46 + 8) != v44) {
LABEL_49:
    }
      uint64_t v46 = v43;
    uint64_t v52 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)*(unsigned int *)(v46 + 4));
    uint64_t v53 = (uint64_t)v52;
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    {
      uint64_t v54 = (llvm::Type *)*(unsigned int *)(v6 + 32);
      if (*(_DWORD *)(v6 + 8) == 19) {
        llvm::ScalableVectorType::get(v52, v54);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v52, v54);
      }
      uint64_t v53 = v55;
    }
  }
  else
  {
    uint64_t v53 = 0;
  }
  uint64_t result = llvm::CastInst::isEliminableCastPair(v24, v25, (llvm::Type ***)v4, (llvm::Type *)v5, v6, v21, v38, v53);
  if (v4 == v53 || result != 48)
  {
    if (result != 47) {
      return result;
    }
    if (v6 == v21) {
      return 47;
    }
  }
  return 0;
}

llvm::Instruction *sub_1CCA39904(uint64_t a1, llvm::Instruction *this, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v7 = *((void *)this - 4);
  uint64_t v8 = *(void *)this;
  unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
  if (v7) {
    BOOL v10 = v9 >= 0x1C;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 && v9 - 79 >= 0xFFFFFFF3)
  {
    int v12 = sub_1CCA395B0(a1, *((uint64_t **)this - 4), (uint64_t)this);
    if (v12)
    {
      uint64_t v13 = *(void *)(v7 - 32);
      __int16 v66 = 257;
      unint64_t v15 = llvm::CastInst::Create(v12, v13, v8, v65, 0);
      uint64_t v16 = *(void *)(v7 + 8);
      if (v16 && !*(void *)(v16 + 8)) {
        goto LABEL_27;
      }
      return v15;
    }
    unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
  }
  if (v7 && v9 == 85)
  {
    uint64_t v17 = *(void *)(v7 - 96);
    unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
    BOOL v19 = v17 && v18 >= 0x1C;
    BOOL v20 = v19 && v18 - 83 >= 0xFFFFFFFE;
    if (!v20 || **(void **)(v17 - 64) != *(void *)v7) {
      goto LABEL_25;
    }
    if (*((unsigned char *)this + 16) == 66)
    {
      uint64_t v22 = (llvm::Type *)**((void **)this - 4);
      if (*((unsigned char *)v22 + 8) == 13)
      {
        uint64_t v23 = *(llvm::Type **)this;
        if (*(unsigned char *)(*(void *)this + 8) == 13)
        {
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v22);
          if (v24 == 1) {
          unsigned int v27 = llvm::Type::getPrimitiveSizeInBits(v23);
          }
          if (v26 == 1) {
          if (sub_1CC9D18E0(a1, PrimitiveSizeInBits, v27))
          }
          {
LABEL_25:
            uint64_t v21 = sub_1CC9D447C(a1, this, (void *)v7, 0, a5);
            if (v21)
            {
              unint64_t v15 = (llvm::Instruction *)v21;
LABEL_27:
              llvm::replaceAllDbgUsesWith((llvm *)v7, v15, this, *(llvm::Instruction **)(a1 + 72), v14);
              return v15;
            }
          }
        }
      }
    }
  }
  if (!v7 || *(unsigned char *)(v7 + 16) != 83) {
    goto LABEL_47;
  }
  if (*(unsigned char *)(*(void *)v7 + 8) == 13)
  {
    uint64_t v28 = *(llvm::Type **)this;
    if (*(unsigned char *)(*(void *)this + 8) == 13)
    {
      unsigned int v29 = (llvm::Type *)**((void **)this - 4);
      if (*((unsigned char *)v29 + 8) != 13) {
        goto LABEL_47;
      }
      unsigned int v31 = llvm::Type::getPrimitiveSizeInBits(v29);
      if (v30 == 1) {
      unsigned int v33 = llvm::Type::getPrimitiveSizeInBits(v28);
      }
      if (v32 == 1) {
      if (!sub_1CC9D18E0(a1, v31, v33))
      }
        goto LABEL_47;
    }
  }
  unint64_t v15 = (llvm::Instruction *)sub_1CC9D50C0(a1, this, v7);
  if (!v15)
  {
LABEL_47:
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unsigned int v62 = 0;
    v65[0] = (const char *)&v64;
    v65[2] = (const char *)&v62;
    uint64_t v34 = *(void *)(v7 + 8);
    if (!v34 || *(void *)(v34 + 8) || !sub_1CC9E8D20((uint64_t)v65, v7)) {
      return 0;
    }
    unint64_t v15 = 0;
    unsigned int v35 = v64;
    uint64_t v36 = *(llvm::Type **)v64;
    if (*(unsigned char *)(*(void *)v64 + 8) == 18) {
      uint64_t v37 = *(llvm::Type **)v64;
    }
    else {
      uint64_t v37 = 0;
    }
    if (*(unsigned char *)(v8 + 8) != 18) {
      uint64_t v8 = 0;
    }
    if (v37) {
      BOOL v38 = v8 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (!v38)
    {
      if (*((_DWORD *)v37 + 8) != *(_DWORD *)(v8 + 32)) {
        return 0;
      }
      unint64_t v39 = llvm::Type::getPrimitiveSizeInBits(v37);
      int v41 = v40;
      if (v39 != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8) || v41 != v42) {
        return 0;
      }
      unint64_t v45 = *(uint64_t **)(a1 + 24);
      int v46 = *((unsigned __int8 *)this + 16);
      __int16 v61 = 257;
      if (v36 != (llvm::Type *)v8)
      {
        uint64_t v47 = (v46 - 28);
        if (v35[16] <= 0x14u)
        {
          unsigned int v35 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v45[9] + 224))(v45[9], v47, v35, v8);
          if (v35) {
            BOOL v51 = v35[16] >= 0x1Cu;
          }
          else {
            BOOL v51 = 0;
          }
          if (v51)
          {
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v45[10] + 16))(v45[10], v35, v60, v45[6], v45[7]);
            uint64_t v57 = *((unsigned int *)v45 + 2);
            if (v57)
            {
              uint64_t v58 = *v45;
              uint64_t v59 = *v45 + 16 * v57;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v35, *(_DWORD *)v58, *(llvm::MDNode **)(v58 + 8));
                v58 += 16;
              }
              while (v58 != v59);
            }
          }
        }
        else
        {
          __int16 v66 = 257;
          unsigned int v35 = (unsigned __int8 *)llvm::CastInst::Create(v47, (uint64_t)v35, v8, v65, 0);
          (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v45[10] + 16))(v45[10], v35, v60, v45[6], v45[7]);
          uint64_t v48 = *((unsigned int *)v45 + 2);
          if (v48)
          {
            uint64_t v49 = *v45;
            uint64_t v50 = *v45 + 16 * v48;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v35, *(_DWORD *)v49, *(llvm::MDNode **)(v49 + 8));
              v49 += 16;
            }
            while (v49 != v50);
          }
        }
      }
      uint64_t v52 = operator new(0xA8uLL);
      v52[21] = v52[21] & 0x38000000 | 2;
      unint64_t v15 = (llvm::Instruction *)(v52 + 16);
      *(void *)uint64_t v52 = 0;
      *((void *)v52 + 1) = 0;
      *((void *)v52 + 2) = 0;
      *((void *)v52 + 3) = v52 + 16;
      *((void *)v52 + 4) = 0;
      *((void *)v52 + 5) = 0;
      *((void *)v52 + 6) = 0;
      *((void *)v52 + 7) = v52 + 16;
      uint64_t v53 = v62;
      uint64_t v54 = v63;
      __int16 v66 = 257;
      uint64_t v56 = (uint64_t **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v35, v55);
      llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v15, (uint64_t **)v35, v56, v53, v54, v65, 0);
    }
  }
  return v15;
}

llvm *sub_1CCA39DB8(uint64_t a1, llvm *this, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(const llvm::DataLayout ***)(a1 + 32);
  unsigned int v9 = **(_DWORD **)a1;
  unsigned int v10 = __clz(v9);
  unsigned int v34 = **(_DWORD **)(a1 + 8);
  if (v34 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__b);
  }
  __b = 0;
  if (v10 != 31)
  {
    if (v9)
    {
      __b = (void *)((unint64_t)__b | (0xFFFFFFFFFFFFFFFFLL >> (v10 + 33)));
    }
    else
    {
      uint64_t v24 = __b;
      *((void *)__b + 0x3FFFFFF) |= 0x7FFFFFFFFFFFFFFFuLL;
      memset(v24, 255, 0x1FFFFFF8uLL);
    }
  }
  unsigned int v11 = v34;
  if (v34 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&__b);
    unsigned int v11 = v34;
    unint64_t v13 = (unint64_t)__b;
  }
  else
  {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
    if (!v34) {
      unint64_t v12 = 0;
    }
    unint64_t v13 = v12 & ~(unint64_t)__b;
  }
  unsigned int v36 = v11;
  unint64_t v35 = v13;
  if (**(void **)(a1 + 16) != **(void **)(a1 + 24)
    && !llvm::MaskedValueIsZero(this, (const llvm::Value *)&v35, v8[10], 0, v8[7], 0, v8[9], (const llvm::DominatorTree *)1, v25))
  {
LABEL_18:
    if (**(void **)(a1 + 16) != **(void **)(a1 + 24))
    {
      this = 0;
      goto LABEL_49;
    }
    unint64_t v32 = 0;
    uint64_t v17 = (llvm *)(a4 - 1);
    unsigned int v31 = 64;
    unsigned int v29 = &v32;
    unint64_t v30 = v17;
    int v18 = *((unsigned __int8 *)this + 16);
    if (v18 == 5)
    {
      if (*((_WORD *)this + 9) != 28
        || (BOOL v20 = (llvm::Constant **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), !*v20)
        || (unint64_t v32 = *v20, !sub_1CBF531E4((llvm::APInt *)&v30, v20[4])))
      {
LABEL_35:
        int v21 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      if (v18 != 56)
      {
LABEL_39:
        unsigned int v31 = 64;
        unsigned int v29 = &v32;
        unint64_t v30 = v17;
        if (sub_1CCA15F48(&v29, (uint64_t)this, (BOOL)&v32))
        {
          unsigned int v28 = 64;
          unsigned int v26 = v32;
          unsigned int v27 = v17;
          int v22 = sub_1CD68AC2C((uint64_t)&v25, a3, v32);
          if (v28 >= 0x41 && v27) {
            MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
          }
        }
        else
        {
          int v22 = 0;
        }
        if (v31 >= 0x41 && v30) {
          MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        }
        if (v22) {
          this = v32;
        }
        else {
          this = 0;
        }
        goto LABEL_49;
      }
      if (!*((void *)this - 8)) {
        goto LABEL_35;
      }
      unint64_t v32 = (llvm *)*((void *)this - 8);
      if (!sub_1CBF53154((llvm::APInt *)&v30, *((unsigned __int8 **)this - 4))) {
        goto LABEL_35;
      }
    }
    unsigned int v28 = 64;
    unsigned int v26 = v32;
    unsigned int v27 = (llvm *)(a4 - 1);
    int v21 = sub_1CCA15DB0((uint64_t)&v25, 28, a3);
    if (v28 >= 0x41 && v27) {
      MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
LABEL_36:
    if (v31 >= 0x41 && v30)
    {
      MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
      if ((v21 & 1) == 0) {
        goto LABEL_39;
      }
    }
    else if (!v21)
    {
      goto LABEL_39;
    }
    this = v32;
    goto LABEL_49;
  }
  LODWORD(v26) = 64;
  uint64_t v25 = a4;
  unsigned int v27 = this;
  uint64_t v14 = *(void *)(a3 + 8);
  if (!v14 || (uint64_t v15 = *(void *)(v14 + 8)) != 0)
  {
LABEL_13:
    char v16 = 0;
    goto LABEL_14;
  }
  int v19 = *(unsigned __int8 *)(a3 + 16);
  if (v19 == 43)
  {
    if (sub_1CBF53154((llvm::APInt *)&v25, *(unsigned __int8 **)(a3 - 64)) && v27 == *(llvm **)(a3 - 32))
    {
      char v16 = 1;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19 == 5) {
    LOBYTE(v15) = *(_WORD *)(a3 + 18) == 15
  }
               && sub_1CBF531E4((llvm::APInt *)&v25, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)))&& v27 == *(llvm **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
  char v16 = (v19 == 5) & v15;
LABEL_14:
  if (v26 >= 0x41 && v25) {
    MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
  }
  if ((v16 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_49:
  if (v36 >= 0x41 && v35) {
    MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
  }
  return this;
}

llvm::Value *sub_1CCA3A208(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v5 = (uint64_t *)a2;
  uint64_t v464 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1CCA39904(a1, a2, a3, a4, a5);
  if (v7) {
    return v7;
  }
  uint64_t v8 = (uint64_t ***)*(v5 - 4);
  uint64_t v9 = *v5;
  unsigned int v10 = *v8;
  int v11 = *(_DWORD *)(*v5 + 8);
  unint64_t v12 = (llvm::Type *)*v5;
  if ((v11 & 0xFE) == 0x12) {
    unint64_t v12 = **(llvm::Type ***)(v9 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v12);
  int v14 = *((_DWORD *)v10 + 2);
  uint64_t v15 = (llvm::Type *)v10;
  if ((v14 & 0xFE) == 0x12) {
    uint64_t v15 = (llvm::Type *)*v10[2];
  }
  unsigned int v435 = llvm::Type::getPrimitiveSizeInBits(v15);
  if ((v11 & 0xFE) != 0x12)
  {
    if (v11 != 13 || v14 != 13) {
      goto LABEL_18;
    }
    unsigned int v18 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
    if (v17 == 1) {
    unsigned int v20 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
    }
    if (v19 == 1) {
    if (!sub_1CC9D18E0(a1, v18, v20))
    }
      goto LABEL_18;
  }
  if (!sub_1CCA3D55C((uint64_t)v8, v9, (const llvm::DataLayout **)a1, (llvm::AssumptionCache *)v5))
  {
LABEL_18:
    if (*(unsigned char *)(v9 + 8) == 13) {
      uint64_t v23 = v9;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v23) {
      BOOL v24 = 2 * PrimitiveSizeInBits >= v435;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      uint64_t v50 = *(llvm::IntegerType **)v23;
      BOOL v51 = (llvm::Type *)v9;
      if ((*(_DWORD *)(v23 + 8) & 0xFE) == 0x12) {
        BOOL v51 = **(llvm::Type ***)(v23 + 16);
      }
      int v52 = llvm::Type::getPrimitiveSizeInBits(v51);
      uint64_t v53 = llvm::IntegerType::get(v50, (llvm::LLVMContext *)(2 * v52));
      if (*((unsigned char *)v10 + 8) == 13)
      {
        uint64_t v54 = (llvm::Type *)v53;
        if (*(unsigned char *)(v53 + 8) == 13)
        {
          unsigned int v56 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
          if (v55 == 1) {
          unsigned int v58 = llvm::Type::getPrimitiveSizeInBits(v54);
          }
          if (v57 == 1) {
          if (sub_1CC9D18E0(a1, v56, v58)
          }
            && sub_1CCA3D55C((uint64_t)v8, (uint64_t)v54, (const llvm::DataLayout **)a1, (llvm::AssumptionCache *)v5))
          {
            __int16 v61 = sub_1CCA38F6C(a1, (uint64_t)v8, (llvm::Type ***)v54, 0, v59, v60);
            unsigned int v62 = (char *)operator new(0x60uLL);
            *((_DWORD *)v62 + 13) = *((_DWORD *)v62 + 13) & 0x38000000 | 1;
            uint64_t v5 = (uint64_t *)(v62 + 32);
            *(void *)unsigned int v62 = 0;
            *((void *)v62 + 1) = 0;
            *((void *)v62 + 2) = 0;
            *((void *)v62 + 3) = v62 + 32;
            LOWORD(v445[0]) = 257;
            llvm::TruncInst::TruncInst((llvm::TruncInst *)(v62 + 32), v61, (llvm::Type *)v9, (const char **)&__p, 0);
            return (llvm::Value *)v5;
          }
        }
      }
    }
    uint64_t v439 = 0;
    uint64_t v440 = 0;
    if (*((unsigned char *)v8 + 16) == 85 && llvm::matchSelectPattern((uint64_t)v8, (uint64_t)&v440, &v439, 0, 0)) {
      return 0;
    }
    if (!sub_1CCAB350C(a1, (llvm::UndefValue *)v5))
    {
      if (PrimitiveSizeInBits != 1) {
        goto LABEL_29;
      }
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)v10, v25, v26);
      if (*(unsigned char *)(v9 + 8) == 13)
      {
        uint64_t v64 = *(void *)(a1 + 24);
        double v65 = llvm::ConstantInt::get((llvm::ConstantInt *)v10, 1uLL, 0);
        LOWORD(v445[0]) = 257;
        __int16 v66 = sub_1CBF52474(v64, v8, (uint64_t)v65, (uint64_t)&__p);
        uint64_t v67 = (char *)operator new(0x80uLL);
        uint64_t v5 = (uint64_t *)(v67 + 64);
        *((_DWORD *)v67 + 21) = *((_DWORD *)v67 + 21) & 0x38000000 | 2;
        *(void *)uint64_t v67 = 0;
        *((void *)v67 + 1) = 0;
        *((void *)v67 + 2) = 0;
        *((void *)v67 + 3) = v67 + 64;
        *((void *)v67 + 4) = 0;
        *((void *)v67 + 5) = 0;
        *((void *)v67 + 6) = 0;
        *((void *)v67 + 7) = v67 + 64;
        LOWORD(v445[0]) = 257;
        int v68 = *(void ***)v66;
        uint64_t v69 = (llvm::FixedVectorType *)(***(void ***)v66 + 1888);
        if (!*(void *)v66 || (v68[1] & 0xFE) != 0x12) {
          goto LABEL_70;
        }
        llvm::VectorType::get(v69, (llvm::Type *)(*((unsigned int *)v68 + 8) | ((unint64_t)(*((_DWORD *)v68 + 2) == 19) << 32)));
LABEL_77:
        uint64_t v69 = v72;
LABEL_70:
        llvm::CmpInst::CmpInst((llvm::Value *)v5, (uint64_t)v69, 53, 33, (uint64_t)v66, (uint64_t)NullValue, (const char **)&__p, 0, 0);
        return (llvm::Value *)v5;
      }
      FnAttribute = 0;
      p_p = 0;
      __p = &FnAttribute;
      p_p_p = (llvm::Constant **)&p_p;
      v337 = v8[1];
      if (v337 && !v337[1])
      {
        if (sub_1CCA48144((void **)&__p, (uint64_t)v8))
        {
          sub_1CB8F1EEC((uint64_t)&__p, v435, 1);
          v354 = llvm::ConstantInt::get((llvm::ConstantInt **)v10, (llvm::Type *)&__p, v353);
          if (p_p_p >= 0x41 && __p) {
            MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
          }
          Shl = llvm::ConstantExpr::getShl(v354, (llvm::Constant *)p_p, 0, 0);
LABEL_524:
          uint64_t v355 = (uint64_t)Shl;
          uint64_t v356 = *(void *)(a1 + 24);
          LOWORD(v445[0]) = 257;
          __int16 v66 = sub_1CBF52474(v356, FnAttribute, v355, (uint64_t)&__p);
          v357 = (char *)operator new(0x80uLL);
          *((_DWORD *)v357 + 21) = *((_DWORD *)v357 + 21) & 0x38000000 | 2;
          uint64_t v5 = (uint64_t *)(v357 + 64);
          *(void *)v357 = 0;
          *((void *)v357 + 1) = 0;
          *((void *)v357 + 2) = 0;
          *((void *)v357 + 3) = v357 + 64;
          *((void *)v357 + 4) = 0;
          *((void *)v357 + 5) = 0;
          *((void *)v357 + 6) = 0;
          *((void *)v357 + 7) = v357 + 64;
          LOWORD(v445[0]) = 257;
          sub_1CB90C994(*(_DWORD **)v66);
          goto LABEL_77;
        }
        v337 = v8[1];
      }
      __p = &FnAttribute;
      p_p_p = (llvm::Constant **)&p_p;
      uint64_t v443 = (uint64_t)&FnAttribute;
      if (!v337 || v337[1] || !sub_1CCA481F4((void **)&__p, (uint64_t)v8))
      {
LABEL_29:
        uint64_t v437 = 0;
        v438 = 0;
        v436 = 0;
        __p = &v438;
        p_p_p = &v436;
        int v27 = *((unsigned __int8 *)v8 + 16);
        if (v27 == 5)
        {
          if (*((_WORD *)v8 + 9) != 26) {
            goto LABEL_83;
          }
          if (!sub_1CBC5BEAC((void **)&__p, (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)])) {
            goto LABEL_83;
          }
          unsigned int v28 = (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
          if (!v28) {
            goto LABEL_83;
          }
        }
        else
        {
          if (v27 != 54) {
            goto LABEL_83;
          }
          if (!sub_1CBC5BEAC((void **)&__p, (uint64_t)*(v8 - 8))) {
            goto LABEL_83;
          }
          unsigned int v28 = (unsigned __int8 *)*(v8 - 4);
          if (!v28 || v28[16] > 0x14u) {
            goto LABEL_83;
          }
        }
        *p_p_p = (llvm::Constant *)v28;
        unsigned int v29 = *v438;
        if ((*((_DWORD *)*v438 + 2) & 0xFE) == 0x12) {
          unsigned int v29 = (llvm::Type *)**((void **)v29 + 2);
        }
        unsigned int v30 = llvm::Type::getPrimitiveSizeInBits(v29);
        unsigned int v31 = v30;
        if (PrimitiveSizeInBits <= v30) {
          unsigned int v32 = v30;
        }
        else {
          unsigned int v32 = PrimitiveSizeInBits;
        }
        uint64_t v33 = v435 - v32;
        char v34 = *((unsigned char *)v8 + 17);
        LODWORD(v455) = v435;
        if (v435 > 0x40) {
          operator new[]();
        }
        if (v435) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v435;
        }
        else {
          unint64_t v35 = 0;
        }
        FnAttribute = (unsigned int *)(v35 & v33);
        __p = (void *)37;
        p_p_p = (llvm::Constant **)&FnAttribute;
        int v36 = sub_1CC9F981C((uint64_t)&__p, v436);
        if (v455 >= 0x41 && FnAttribute) {
          MEMORY[0x1D25D9CB0](FnAttribute, 0x1000C8000313F17);
        }
        if (v36)
        {
          if (*v438 == (llvm::Type *)v9)
          {
            uint64_t v37 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v10, PrimitiveSizeInBits - 1, 0);
            UMin = llvm::ConstantExpr::getUMin(v436, v37, v38, v39, v40);
            int v42 = sub_1CC56C0C0((llvm *)0x26, UMin, *v438, 0);
            unsigned int v44 = llvm::Constant::mergeUndefsWith(v42, v436, v43);
            Intrinsic = v438;
            if ((v34 & 2) != 0)
            {
              LOWORD(v445[0]) = 257;
              uint64_t v49 = (uint64_t ***)llvm::BinaryOperator::Create(27, v438, (uint64_t)v44, (const char **)&__p, 0);
              llvm::Instruction::setIsExact((uint64_t)v49, 1);
              return (llvm::Value *)v49;
            }
            LOWORD(v457) = 257;
            int v46 = (void **)&FnAttribute;
            char v47 = 27;
            return llvm::BinaryOperator::Create(v47, Intrinsic, (uint64_t)v44, (const char **)v46, 0);
          }
          unint64_t v73 = v8[1];
          if (v73 && !v73[1])
          {
            v344 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v10, v31 - 1, 0);
            v348 = llvm::ConstantExpr::getUMin(v436, v344, v345, v346, v347);
            v349 = sub_1CC56C0C0((llvm *)0x26, v348, *v438, 0);
            uint64_t v350 = *(void *)(a1 + 24);
            LOWORD(v445[0]) = 257;
            v351 = sub_1CC5357E8(v350, (uint64_t)v438, (uint64_t)v349, (uint64_t)&__p, (v34 & 2) != 0);
            LOWORD(v445[0]) = 257;
            return llvm::CastInst::CreateIntegerCast(v351, (llvm::Type ***)v9, (llvm::Type *)1, (const char **)&__p, 0, v352);
          }
        }
LABEL_83:
        __p = &v438;
        p_p_p = &v436;
        int32x2_t v74 = v8[1];
        if (!v74 || v74[1]) {
          goto LABEL_116;
        }
        unsigned int v75 = *((unsigned __int8 *)v8 + 16);
        if (v75 >= 0x1C)
        {
          if ((v75 & 0xFE) != 0x36) {
            goto LABEL_116;
          }
          int v99 = *((_DWORD *)v8 + 5);
          uint64_t v100 = (v99 & 0x40000000) != 0 ? (uint64_t *)*(v8 - 1) : (uint64_t *)&v8[-4 * (v99 & 0x7FFFFFF)];
          if (!sub_1CBC5BF18((void **)&__p, *v100)) {
            goto LABEL_116;
          }
          int v101 = *((_DWORD *)v8 + 5);
          int v102 = (v101 & 0x40000000) != 0 ? *(v8 - 1) : (uint64_t **)&v8[-4 * (v101 & 0x7FFFFFF)];
          uint64_t v76 = (unsigned __int8 *)v102[4];
          if (!v76 || v76[16] > 0x14u) {
            goto LABEL_116;
          }
        }
        else
        {
          if (v75 != 5) {
            goto LABEL_116;
          }
          if ((*((_WORD *)v8 + 9) & 0xFFFE) != 0x1A) {
            goto LABEL_116;
          }
          if (!sub_1CBC5BF18((void **)&__p, (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)])) {
            goto LABEL_116;
          }
          uint64_t v76 = (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
          if (!v76) {
            goto LABEL_116;
          }
        }
        *p_p_p = (llvm::Constant *)v76;
        LODWORD(v455) = v435;
        if (v435 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&FnAttribute);
        }
        if (v435) {
          unint64_t v77 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v435;
        }
        else {
          LODWORD(v77) = 0;
        }
        FnAttribute = (unsigned int *)(v77 & (v435 - PrimitiveSizeInBits));
        __p = (void *)37;
        p_p_p = (llvm::Constant **)&FnAttribute;
        int v78 = sub_1CC9F981C((uint64_t)&__p, v436);
        if (v455 >= 0x41 && FnAttribute) {
          MEMORY[0x1D25D9CB0](FnAttribute, 0x1000C8000313F17);
        }
        if (v78)
        {
          char v79 = *((unsigned char *)v8 + 17);
          IntegerCast = llvm::ConstantExpr::getIntegerCast(v436, (llvm::Type ***)*v438, (llvm::Type *)1);
          BOOL v82 = llvm::Constant::mergeUndefsWith(IntegerCast, v436, v81);
          int v83 = *((unsigned __int8 *)v8 + 16);
          uint64_t v84 = *(void *)(a1 + 24);
          if ((*((unsigned char *)v8 + 23) & 0x10) == 0)
          {
            uint64_t v94 = 0;
            uint64_t v95 = &byte_1CFBCE98E;
            goto LABEL_103;
          }
          uint64_t v85 = ***v8;
          uint64_t v86 = *(void *)(v85 + 152);
          uint64_t v87 = *(unsigned int *)(v85 + 168);
          if (v87)
          {
            LODWORD(v88) = (v87 - 1) & ((v8 >> 4) ^ (v8 >> 9));
            uint64_t v89 = (uint64_t ****)(v86 + 16 * v88);
            uint64_t v90 = *v89;
            if (*v89 == v8)
            {
LABEL_102:
              __int16 v93 = v89[1];
              int v96 = (llvm::Constant **)*v93;
              uint64_t v95 = (char *)(v93 + 2);
              uint64_t v94 = v96;
LABEL_103:
              LOWORD(v445[0]) = 261;
              __p = v95;
              p_p_p = v94;
              if (v83 == 55) {
                unsigned int v97 = sub_1CC5357E8(v84, (uint64_t)v438, (uint64_t)v82, (uint64_t)&__p, (v79 & 2) != 0);
              }
              else {
                unsigned int v97 = sub_1CC2429AC(v84, (uint64_t)v438, (uint64_t)v82, (uint64_t)&__p, (v79 & 2) != 0);
              }
              LOWORD(v445[0]) = 257;
              return llvm::CastInst::CreateTruncOrBitCast(v97, (llvm::Type ***)v9, (const char **)&__p, 0, v98);
            }
            int v91 = 1;
            while (v90 != (uint64_t ***)-4096)
            {
              int v92 = v88 + v91++;
              uint64_t v88 = v92 & (v87 - 1);
              uint64_t v90 = *(uint64_t ****)(v86 + 16 * v88);
              if (v90 == v8)
              {
                uint64_t v89 = (uint64_t ****)(v86 + 16 * v88);
                goto LABEL_102;
              }
            }
          }
          uint64_t v89 = (uint64_t ****)(v86 + 16 * v87);
          goto LABEL_102;
        }
LABEL_116:
        uint64_t v103 = *(v5 - 4);
        int64_t v104 = (llvm::Type *)*v5;
        if ((*(_DWORD *)(*(void *)v103 + 8) & 0xFE) != 0x12)
        {
          if (*(_DWORD *)(*(void *)v103 + 8) != 13 || *((unsigned char *)v104 + 8) != 13) {
            goto LABEL_141;
          }
          unsigned int v116 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v103);
          if (v115 == 1) {
          unsigned int v118 = llvm::Type::getPrimitiveSizeInBits(v104);
          }
          if (v117 == 1) {
          int v119 = sub_1CC9D18E0(a1, v116, v118);
          }
          uint64_t v103 = *(v5 - 4);
          if (!v119) {
            goto LABEL_141;
          }
        }
        uint64_t v105 = *(void *)(v103 + 8);
        if (!v105) {
          goto LABEL_141;
        }
        if (*(void *)(v105 + 8)) {
          goto LABEL_141;
        }
        unsigned int v106 = *(unsigned __int8 *)(v103 + 16);
        if (v106 < 0x1C || v106 - 59 < 0xFFFFFFEE) {
          goto LABEL_141;
        }
        if (v106 <= 0x3A && ((1 << v106) & 0x7002A0000000000) != 0)
        {
          uint64_t v107 = *(unsigned __int8 **)(v103 - 64);
          uint64_t v108 = *(unsigned __int8 **)(v103 - 32);
          if (v107[16] <= 0x14u && v107)
          {
            unsigned int v109 = sub_1CC56C0C0((llvm *)0x26, *(llvm::detail::IEEEFloat **)(v103 - 64), v104, 0);
            unsigned int v110 = (void **)v109;
            uint64_t v111 = *(uint64_t **)(a1 + 24);
            LOWORD(v457) = 257;
            if (*(llvm::Type **)v108 != v104)
            {
              size_t v429 = (size_t)v109;
              if (v108[16] <= 0x14u)
              {
                uint64_t v162 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v111[9] + 224))(v111[9], 38, v108, v104);
                uint64_t v108 = (unsigned __int8 *)v162;
                if (v162)
                {
                  unsigned int v110 = (void **)v429;
                  if (*(unsigned __int8 *)(v162 + 16) < 0x1Cu) {
                    goto LABEL_129;
                  }
                  (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(void *)v111[10]
                                                                                              + 16))(v111[10], v162, &FnAttribute, v111[6], v111[7]);
                  uint64_t v163 = *((unsigned int *)v111 + 2);
                  if (v163)
                  {
                    uint64_t v164 = *v111;
                    uint64_t v165 = v164 + 16 * v163;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v108, *(_DWORD *)v164, *(llvm::MDNode **)(v164 + 8));
                      v164 += 16;
                    }
                    while (v164 != v165);
                  }
                }
              }
              else
              {
                LOWORD(v445[0]) = 257;
                uint64_t v108 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v108, (uint64_t)v104, (const char **)&__p, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, uint64_t, uint64_t))(*(void *)v111[10] + 16))(v111[10], v108, &FnAttribute, v111[6], v111[7]);
                uint64_t v112 = *((unsigned int *)v111 + 2);
                if (v112)
                {
                  uint64_t v271 = *v111;
                  uint64_t v272 = v271 + 16 * v112;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v108, *(_DWORD *)v271, *(llvm::MDNode **)(v271 + 8));
                    v271 += 16;
                  }
                  while (v271 != v272);
                }
              }
              unsigned int v110 = (void **)v429;
            }
LABEL_129:
            char v113 = *(unsigned char *)(v103 + 16) - 28;
LABEL_130:
            LOWORD(v445[0]) = 257;
            uint64_t v114 = (llvm::SmallPtrSetImplBase *)v108;
LABEL_131:
            uint64_t v49 = (uint64_t ***)llvm::BinaryOperator::Create(v113, v110, (uint64_t)v114, (const char **)&__p, 0);
LABEL_132:
            if (v49) {
              return (llvm::Value *)v49;
            }
            uint64_t v103 = *(v5 - 4);
LABEL_141:
            if (v103)
            {
              if (*(unsigned char *)(v103 + 16) == 91)
              {
                uint64_t v120 = *(void *)(v103 + 8);
                if (v120)
                {
                  if (!*(void *)(v120 + 8))
                  {
                    uint64_t v131 = *(uint64_t **)(a1 + 24);
                    uint64_t v132 = *(void *)(v103 - 32);
                    unsigned int v133 = (*(unsigned char *)(v132 + 16) - 11);
                    if (v133 < 2) {
                      goto LABEL_177;
                    }
                    if (v133 >= 0xFD)
                    {
                      __p = v445;
                      p_p_p = (llvm::Constant **)v445;
                      uint64_t v443 = 8;
                      LODWORD(v444) = 0;
                      FnAttribute = (unsigned int *)v456;
                      uint64_t v455 = 0x800000000;
                      p_p = &__p;
                      v459 = &FnAttribute;
                      BOOL v134 = 0;
                      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_p, v132))
                      {
                        do
                        {
                          BOOL v134 = v455 == 0;
                          if (!v455) {
                            break;
                          }
                          uint64_t v415 = *(void *)&FnAttribute[2 * v455 - 2];
                          LODWORD(v455) = v455 - 1;
                        }
                        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&p_p, v415) & 1) != 0);
                      }
                      if (FnAttribute != (unsigned int *)v456) {
                        free(FnAttribute);
                      }
                      if (p_p_p != __p) {
                        free(p_p_p);
                      }
                      if (v134)
                      {
LABEL_177:
                        uint64_t v135 = *(unsigned int *)(v103 + 72);
                        if (v135
                          && (v135 == 1
                           || !memcmp((const void *)(*(void *)(v103 + 64) + 4), *(const void **)(v103 + 64), 4 * v135 - 4)))
                        {
                          unsigned int v136 = *(llvm::Type **)v103;
                          unsigned int v137 = *(unsigned __int8 **)(v103 - 64);
                          if (*(void *)v103 == *(void *)v137)
                          {
                            uint64_t v138 = *v5;
                            LOWORD(v457) = 257;
                            if (v136 != (llvm::Type *)v138)
                            {
                              if (v137[16] <= 0x14u)
                              {
                                unsigned int v137 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v131[9] + 224))(v131[9], 38, v137, v138);
                                if (v137) {
                                  BOOL v277 = v137[16] >= 0x1Cu;
                                }
                                else {
                                  BOOL v277 = 0;
                                }
                                if (v277)
                                {
                                  (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, uint64_t, uint64_t))(*(void *)v131[10] + 16))(v131[10], v137, &FnAttribute, v131[6], v131[7]);
                                  uint64_t v278 = *((unsigned int *)v131 + 2);
                                  if (v278)
                                  {
                                    uint64_t v279 = *v131;
                                    uint64_t v280 = *v131 + 16 * v278;
                                    do
                                    {
                                      llvm::Instruction::setMetadata((llvm::Instruction *)v137, *(_DWORD *)v279, *(llvm::MDNode **)(v279 + 8));
                                      v279 += 16;
                                    }
                                    while (v279 != v280);
                                  }
                                }
                              }
                              else
                              {
                                LOWORD(v445[0]) = 257;
                                unsigned int v137 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v137, v138, (const char **)&__p, 0);
                                (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, uint64_t, uint64_t))(*(void *)v131[10] + 16))(v131[10], v137, &FnAttribute, v131[6], v131[7]);
                                uint64_t v139 = *((unsigned int *)v131 + 2);
                                if (v139)
                                {
                                  uint64_t v316 = *v131;
                                  uint64_t v317 = *v131 + 16 * v139;
                                  do
                                  {
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v137, *(_DWORD *)v316, *(llvm::MDNode **)(v316 + 8));
                                    v316 += 16;
                                  }
                                  while (v316 != v317);
                                }
                              }
                            }
                            uint64_t v140 = (char *)operator new(0xA8uLL);
                            *((_DWORD *)v140 + 21) = *((_DWORD *)v140 + 21) & 0x38000000 | 2;
                            uint64_t v49 = (uint64_t ***)(v140 + 64);
                            *(void *)uint64_t v140 = 0;
                            *((void *)v140 + 1) = 0;
                            *((void *)v140 + 2) = 0;
                            *((void *)v140 + 3) = v140 + 64;
                            *((void *)v140 + 4) = 0;
                            *((void *)v140 + 5) = 0;
                            *((void *)v140 + 6) = 0;
                            *((void *)v140 + 7) = v140 + 64;
                            uint64_t v141 = *(void **)(v103 + 64);
                            uint64_t v142 = (llvm::Type *)*(unsigned int *)(v103 + 72);
                            LOWORD(v445[0]) = 257;
                            unint64_t v144 = (uint64_t **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v137, v143);
                            llvm::ShuffleVectorInst::ShuffleVectorInst(v49, (uint64_t **)v137, v144, v141, v142, (const char **)&__p, 0);
                            return (llvm::Value *)v49;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v48 = sub_1CCA3E2A8((unsigned __int8 *)v5, *(uint64_t **)(a1 + 24));
            if (v48) {
              return v48;
            }
            unsigned int v121 = v8[1];
            if (!v121 || v121[1]) {
              goto LABEL_240;
            }
            if ((v10[1] & 0xFE) != 0x12)
            {
              if (*((_DWORD *)v10 + 2) != 13 || *(unsigned char *)(v9 + 8) != 13) {
                goto LABEL_240;
              }
              unsigned int v123 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
              if (v122 == 1) {
              unsigned int v125 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
              }
              if (v124 == 1) {
              if (!sub_1CC9D18E0(a1, v123, v125))
              }
              {
LABEL_240:
                uint64_t v175 = *(v5 - 4);
                uint64_t v176 = *(void *)(v175 + 8);
                if (!v176) {
                  goto LABEL_242;
                }
                if (*(void *)(v176 + 8)) {
                  goto LABEL_242;
                }
                uint64_t v179 = (llvm::Type *)*v5;
                if (*(unsigned char *)(*v5 + 8) != 13) {
                  goto LABEL_242;
                }
                p_p = 0;
                v446.__r_.__value_.__r.__words[0] = 0;
                __p = &p_p;
                p_p_p = (llvm::Constant **)&p_p;
                uint64_t v443 = (uint64_t)&v446;
                if ((sub_1CCA4756C((void **)&__p, v175) & 1) == 0)
                {
                  int v203 = *(unsigned __int8 *)(v175 + 16);
                  if (v203 == 5)
                  {
                    if (*(_WORD *)(v175 + 18) != 26) {
                      goto LABEL_242;
                    }
                    uint64_t v226 = *(void *)(v175 - 32 * (*(_DWORD *)(v175 + 20) & 0x7FFFFFF));
                    unsigned int v227 = *(unsigned __int8 *)(v226 + 16);
                    unsigned int v228 = v227 - 28;
                    BOOL v229 = v227 >= 0x1C || v227 == 5;
                    BOOL v230 = !v229;
                    if (!v226 || v230) {
                      goto LABEL_242;
                    }
                    if (v227 <= 0x1B) {
                      unsigned int v228 = *(unsigned __int16 *)(v226 + 18);
                    }
                    if (v228 != 49) {
                      goto LABEL_242;
                    }
                    int v231 = *(_DWORD *)(v226 + 20);
                    uint64_t v232 = (v231 & 0x40000000) != 0
                         ? *(llvm::Constant ***)(v226 - 8)
                         : (llvm::Constant **)(v226 - 32 * (v231 & 0x7FFFFFF));
                    uint64_t v266 = *v232;
                    if (!v266) {
                      goto LABEL_242;
                    }
                    *p_p_p = v266;
                    uint64_t v204 = *(void *)(v175 - 32 * (*(_DWORD *)(v175 + 20) & 0x7FFFFFF) + 32);
                    if (!v204) {
                      goto LABEL_242;
                    }
                  }
                  else
                  {
                    if (v203 != 54) {
                      goto LABEL_242;
                    }
                    if (!sub_1CCA4756C(&p_p_p, *(void *)(v175 - 64))) {
                      goto LABEL_242;
                    }
                    uint64_t v204 = *(void *)(v175 - 32);
                    if (!v204) {
                      goto LABEL_242;
                    }
                  }
                  if (*(unsigned char *)(v204 + 16) != 16) {
                    goto LABEL_242;
                  }
                  *(void *)uint64_t v443 = v204;
                }
                if ((*((_DWORD *)*p_p + 2) & 0xFE) == 0x12)
                {
                  uint64_t v180 = (llvm::Type **)*p_p;
                  unsigned int v182 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*p_p);
                  if (v181 == 1) {
                  unsigned int v185 = llvm::Type::getPrimitiveSizeInBits(v179);
                  }
                  if (v183 == 1) {
                  if (v446.__r_.__value_.__r.__words[0])
                  }
                  {
                    uint64_t v186 = (void *)(v446.__r_.__value_.__r.__words[0] + 24);
                    if (*(_DWORD *)(v446.__r_.__value_.__r.__words[0] + 32) >= 0x41u) {
                      uint64_t v186 = (void *)*v186;
                    }
                    unsigned int v187 = *(_DWORD *)v186;
                  }
                  else
                  {
                    unsigned int v187 = 0;
                  }
                  uint64_t v188 = (llvm::Type *)(v182 / v185);
                  if (!(v182 % v185))
                  {
                    unsigned int v189 = v187 / v185;
                    if (!(v187 % v185))
                    {
                      if (v180[3] == v179)
                      {
                        int v193 = (llvm::Instruction *)p_p;
                      }
                      else
                      {
                        double v191 = llvm::FixedVectorType::get(v179, v188);
                        v192 = *(uint64_t **)(a1 + 24);
                        int v193 = (llvm::Instruction *)p_p;
                        FnAttribute = (unsigned int *)"bc";
                        LOWORD(v457) = 259;
                        if (*p_p != (void *)v190)
                        {
                          if (*((unsigned __int8 *)p_p + 16) <= 0x14u)
                          {
                            uint64_t v267 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)v192[9] + 224))(v192[9], 49, p_p, v190, v191);
                            int v193 = (llvm::Instruction *)v267;
                            if (v267)
                            {
                              if (*(unsigned __int8 *)(v267 + 16) >= 0x1Cu)
                              {
                                (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(void *)v192[10] + 16))(v192[10], v267, &FnAttribute, v192[6], v192[7]);
                                uint64_t v268 = *((unsigned int *)v192 + 2);
                                if (v268)
                                {
                                  uint64_t v269 = *v192;
                                  uint64_t v270 = v269 + 16 * v268;
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v193, *(_DWORD *)v269, *(llvm::MDNode **)(v269 + 8));
                                    v269 += 16;
                                  }
                                  while (v269 != v270);
                                }
                              }
                            }
                          }
                          else
                          {
                            LOWORD(v445[0]) = 257;
                            int v193 = llvm::CastInst::Create(49, (uint64_t)p_p, v190, (const char **)&__p, 0);
                            (*(void (**)(uint64_t, llvm::Instruction *, unsigned int **, uint64_t, uint64_t))(*(void *)v192[10] + 16))(v192[10], v193, &FnAttribute, v192[6], v192[7]);
                            uint64_t v194 = *((unsigned int *)v192 + 2);
                            if (v194)
                            {
                              uint64_t v287 = *v192;
                              uint64_t v288 = v287 + 16 * v194;
                              do
                              {
                                llvm::Instruction::setMetadata(v193, *(_DWORD *)v287, *(llvm::MDNode **)(v287 + 8));
                                v287 += 16;
                              }
                              while (v287 != v288);
                            }
                          }
                        }
                        LODWORD(v188) = v182 / v185;
                        p_p = (void **)v193;
                      }
                      if (**(unsigned char **)(a1 + 80)) {
                        uint64_t v195 = v188 + ~v189;
                      }
                      else {
                        uint64_t v195 = v189;
                      }
                      uint64_t v196 = **(void **)(*(void *)(a1 + 24) + 64);
LABEL_355:
                      v248 = *(llvm::ConstantInt **)(v196 + 1960);
                      unint64_t v249 = *(unsigned int *)(v196 + 1968);
                      LODWORD(p_p_p) = v249 >> 8;
                      if (v249 >> 8 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&__p);
                      }
                      if (v249 <= 0xFF) {
                        unint64_t v250 = 0;
                      }
                      else {
                        unint64_t v250 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v249);
                      }
                      __p = (void *)(v250 & v195);
                      v251 = (llvm::Value *)llvm::ConstantInt::get(v248, (llvm::LLVMContext *)&__p, v184);
                      if (p_p_p >= 0x41 && __p) {
                        MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
                      }
                      LOWORD(v445[0]) = 257;
                      v252 = (char *)operator new(0x80uLL);
                      *((_DWORD *)v252 + 21) = *((_DWORD *)v252 + 21) & 0x38000000 | 2;
                      uint64_t v49 = (uint64_t ***)(v252 + 64);
                      *(void *)v252 = 0;
                      *((void *)v252 + 1) = 0;
                      *((void *)v252 + 2) = 0;
                      *((void *)v252 + 3) = v252 + 64;
                      *((void *)v252 + 4) = 0;
                      *((void *)v252 + 5) = 0;
                      *((void *)v252 + 6) = 0;
                      *((void *)v252 + 7) = v252 + 64;
                      llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v252 + 64), v193, v251, (const char **)&__p, 0);
                      return (llvm::Value *)v49;
                    }
                  }
                }
LABEL_242:
                p_p = 0;
                v446.__r_.__value_.__r.__words[0] = 0;
                __p = &p_p;
                p_p_p = (llvm::Constant **)&v446;
                uint64_t v177 = v8[1];
                if (!v177
                  || v177[1]
                  || !sub_1CCA484B4((void **)&__p, (uint64_t)v8)
                  || (uint64_t v234 = v435 / PrimitiveSizeInBits, v435 % PrimitiveSizeInBits))
                {
                  LODWORD(__p) = 52;
                  p_p_p = 0;
                  uint64_t v443 = (uint64_t)&v438;
                  uint64_t v444 = 1;
                  v445[0] = &v437;
                  int v178 = v8[1];
                  if (v178)
                  {
                    if (!v178[1] && *((unsigned char *)v8 + 16) == 84)
                    {
                      uint64_t v197 = (uint64_t)*(v8 - 4);
                      if (v197)
                      {
                        if (!*(unsigned char *)(v197 + 16)
                          && *(uint64_t ***)(v197 + 24) == v8[9]
                          && *(_DWORD *)(v197 + 36) == 52)
                        {
                          if (sub_1CBC5BE40((void **)&v443, (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]))
                          {
                            if (*((unsigned char *)v8 + 16) == 84)
                            {
                              v198 = (&v8[4 * v444])[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                              if (v198)
                              {
                                *(void *)v445[0] = v198;
                                v199 = *v438;
                                unint64_t v200 = *v438;
                                if ((*((_DWORD *)*v438 + 2) & 0xFE) == 0x12) {
                                  unint64_t v200 = (llvm::Type *)**((void **)v199 + 2);
                                }
                                if (llvm::Type::getPrimitiveSizeInBits(v200) == PrimitiveSizeInBits
                                  && 31 - __clz(v435) < PrimitiveSizeInBits)
                                {
                                  unint64_t v201 = (llvm::UndefValue *)llvm::ConstantInt::get(v199, v435 - PrimitiveSizeInBits, 0);
                                  uint64_t v202 = *(uint64_t **)(a1 + 24);
                                  uint64_t v462 = *v5;
                                  FnAttribute = (unsigned int *)v438;
                                  uint64_t v455 = v437;
                                  LOWORD(v445[0]) = 257;
                                  Intrinsic = (void *)llvm::IRBuilderBase::CreateIntrinsic(v202, 52, (uint64_t)&v462, 1, (uint64_t *)&FnAttribute, 2, 0, (uint64_t)&__p);
                                  LOWORD(v445[0]) = 257;
                                  int v46 = &__p;
                                  char v47 = 13;
                                  unsigned int v44 = v201;
                                  return llvm::BinaryOperator::Create(v47, Intrinsic, (uint64_t)v44, (const char **)v46, 0);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  __p = *(void **)(a1 + 80);
                  if (sub_1CC5E5624((llvm::DataLayout **)&__p, (uint64_t)v8))
                  {
                    if (llvm::Instruction::getFunction((llvm::Instruction *)v5))
                    {
                      uint64_t Function = llvm::Instruction::getFunction((llvm::Instruction *)v5);
                      if (llvm::Function::hasFnAttribute(Function, 80))
                      {
                        uint64_t v332 = llvm::Instruction::getFunction((llvm::Instruction *)v5);
                        FnAttribute = (unsigned int *)llvm::Function::getFnAttribute(v332, 80);
                        uint64_t VScaleRangeMax = llvm::Attribute::getVScaleRangeMax((llvm::Attribute *)&FnAttribute);
                        if ((VScaleRangeMax & 0xFF00000000) != 0 && 31 - __clz(VScaleRangeMax) < PrimitiveSizeInBits)
                        {
                          v334 = *(llvm::IRBuilderBase **)(a1 + 24);
                          v335 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1uLL, 0);
                          LOWORD(v445[0]) = 257;
                          VScale = llvm::IRBuilderBase::CreateVScale(v334, v335, (const llvm::Twine *)&__p);
                          return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v5, VScale);
                        }
                      }
                    }
                  }
                }
                else
                {
                  unint64_t v235 = *((unsigned int *)*p_p + 8) * (unint64_t)v234;
                  unint64_t v236 = (void *)(v446.__r_.__value_.__r.__words[0] + 24);
                  if (*(_DWORD *)(v446.__r_.__value_.__r.__words[0] + 32) >= 0x41u) {
                    unint64_t v236 = (void *)*v236;
                  }
                  int v237 = *((unsigned __int8 *)*p_p + 8);
                  uint64_t v238 = *v236 * v234;
                  unsigned int v239 = v234 - 1 + v238;
                  if (**(unsigned char **)(a1 + 80)) {
                    unsigned int v240 = v239;
                  }
                  else {
                    unsigned int v240 = v238;
                  }
                  v241 = (unsigned int *)(*(void *)(*(void *)(v5[5] + 56) + 40) + 216);
                  LOWORD(v457) = 260;
                  FnAttribute = v241;
                  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&FnAttribute);
                  BOOL v243 = (v444 & 0xFFFFFFFE) == 0x30 && v235 > 4;
                  if (SHIBYTE(v443) < 0) {
                    operator delete(__p);
                  }
                  if (!v243)
                  {
                    if (v237 == 19) {
                      v245.n128_f64[0] = llvm::ScalableVectorType::get((uint64_t **)v9, (llvm::Type *)v235);
                    }
                    else {
                      v245.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, (llvm::Type *)v235);
                    }
                    uint64_t v246 = *(void *)(a1 + 24);
                    int v193 = (llvm::Instruction *)p_p;
                    LOWORD(v457) = 257;
                    if (*p_p != (void *)v244)
                    {
                      if (*((unsigned __int8 *)p_p + 16) <= 0x14u)
                      {
                        uint64_t v257 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, void **, uint64_t, __n128))(**(void **)(v246 + 72) + 224))(*(void *)(v246 + 72), 49, p_p, v244, v245);
                        int v193 = (llvm::Instruction *)v257;
                        if (v257 && v257[16] >= 0x1Cu) {
                          int v193 = sub_1CB844E0C((uint64_t *)v246, (llvm::Instruction *)v257, (uint64_t)&FnAttribute);
                        }
                      }
                      else
                      {
                        LOWORD(v445[0]) = 257;
                        int v193 = llvm::CastInst::Create(49, (uint64_t)p_p, v244, (const char **)&__p, 0);
                        (*(void (**)(void, llvm::Instruction *, unsigned int **, void, void))(**(void **)(v246 + 80) + 16))(*(void *)(v246 + 80), v193, &FnAttribute, *(void *)(v246 + 48), *(void *)(v246 + 56));
                        uint64_t v247 = *(unsigned int *)(v246 + 8);
                        if (v247)
                        {
                          uint64_t v281 = *(void *)v246;
                          uint64_t v282 = v281 + 16 * v247;
                          do
                          {
                            llvm::Instruction::setMetadata(v193, *(_DWORD *)v281, *(llvm::MDNode **)(v281 + 8));
                            v281 += 16;
                          }
                          while (v281 != v282);
                        }
                      }
                    }
                    uint64_t v196 = **(void **)(*(void *)(a1 + 24) + 64);
                    uint64_t v195 = v240;
                    goto LABEL_355;
                  }
                }
                return 0;
              }
            }
            int v126 = *((unsigned __int8 *)v8 + 16);
            if (v126 == 5)
            {
              if (*((_WORD *)v8 + 9) != 25) {
                goto LABEL_240;
              }
              uint64_t v129 = (llvm::Type ***)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
              uint64_t v127 = *v129;
              if (!*v129) {
                goto LABEL_240;
              }
              v438 = *v129;
              uint64_t v128 = (unsigned __int8 *)v129[4];
              if (!v128) {
                goto LABEL_240;
              }
            }
            else
            {
              if (v126 != 53) {
                goto LABEL_240;
              }
              uint64_t v127 = (llvm::Type **)*(v8 - 8);
              if (!v127) {
                goto LABEL_240;
              }
              v438 = (llvm::Type **)*(v8 - 8);
              uint64_t v128 = (unsigned __int8 *)*(v8 - 4);
              if (!v128 || v128[16] > 0x14u) {
                goto LABEL_240;
              }
            }
            v436 = (llvm::Constant *)v128;
            unsigned int v130 = *((unsigned __int8 *)v127 + 16);
            if (v130 >= 0x1C)
            {
              if ((v130 & 0xFE) == 0x36)
              {
                int v148 = *((_DWORD *)v127 + 5);
                unint64_t v149 = (v148 & 0x40000000) != 0 ? *(v127 - 1) : (llvm::Type *)&v127[-4 * (v148 & 0x7FFFFFF)];
                if (*(unsigned __int8 *)(*((void *)v149 + 4) + 16) < 0x15u) {
                  goto LABEL_240;
                }
              }
            }
            else if (v130 == 5 && (*((_WORD *)v127 + 9) & 0xFFFE) == 0x1A)
            {
              goto LABEL_240;
            }
            uint64_t v205 = *(llvm::Type **)v128;
            if ((*(_DWORD *)(*(void *)v128 + 8) & 0xFE) == 0x12) {
              uint64_t v205 = (llvm::Type *)**((void **)v205 + 2);
            }
            unsigned int v206 = llvm::Type::getPrimitiveSizeInBits(v205);
            LODWORD(v459) = v206;
            if (v206 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&p_p);
            }
            if (v206) {
              unint64_t v207 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v206;
            }
            else {
              LODWORD(v207) = 0;
            }
            p_p = (void **)(v207 & PrimitiveSizeInBits);
            __p = (void *)36;
            p_p_p = (llvm::Constant **)&p_p;
            int v208 = sub_1CC9F981C((uint64_t)&__p, (llvm::Constant *)v128);
            char v209 = v208;
            if (!v208)
            {
              uint64_t v49 = 0;
              goto LABEL_310;
            }
            uint64_t v210 = (unsigned __int8 *)v438;
            if ((*((unsigned char *)v438 + 23) & 0x10) == 0)
            {
              uint64_t v221 = 0;
              v220 = &byte_1CFBCE98E;
              goto LABEL_306;
            }
            uint64_t v211 = **(void **)*v438;
            uint64_t v212 = *(void *)(v211 + 152);
            uint64_t v213 = *(unsigned int *)(v211 + 168);
            if (v213)
            {
              LODWORD(v214) = (v213 - 1) & ((v438 >> 4) ^ (v438 >> 9));
              uint64_t v215 = v212 + 16 * v214;
              uint64_t v216 = *(llvm::Type ***)v215;
              if (*(llvm::Type ***)v215 == v438)
              {
LABEL_305:
                uint64_t v219 = *(void **)(v215 + 8);
                uint64_t v222 = *v219;
                v220 = (char *)(v219 + 2);
                uint64_t v221 = v222;
LABEL_306:
                uint64_t v223 = *(void *)(a1 + 24);
                LOWORD(v457) = 773;
                FnAttribute = (unsigned int *)v220;
                uint64_t v455 = v221;
                v456[0] = ".tr";
                if (*v438 != (llvm::Type *)v9)
                {
                  if (*((unsigned __int8 *)v438 + 16) <= 0x14u)
                  {
                    uint64_t v210 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Type **, uint64_t))(**(void **)(v223 + 72) + 224))(*(void *)(v223 + 72), 38, v438, v9);
                    if (v210) {
                      BOOL v233 = v210[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v233 = 0;
                    }
                    if (v233) {
                      uint64_t v210 = (unsigned __int8 *)sub_1CB844E0C((uint64_t *)v223, (llvm::Instruction *)v210, (uint64_t)&FnAttribute);
                    }
                  }
                  else
                  {
                    LOWORD(v445[0]) = 257;
                    uint64_t v210 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v438, v9, (const char **)&__p, 0);
                    (*(void (**)(void, unsigned __int8 *, unsigned int **, void, void))(**(void **)(v223 + 80) + 16))(*(void *)(v223 + 80), v210, &FnAttribute, *(void *)(v223 + 48), *(void *)(v223 + 56));
                    uint64_t v224 = *(unsigned int *)(v223 + 8);
                    if (v224)
                    {
                      uint64_t v273 = *(void *)v223;
                      uint64_t v274 = *(void *)v223 + 16 * v224;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v210, *(_DWORD *)v273, *(llvm::MDNode **)(v273 + 8));
                        v273 += 16;
                      }
                      while (v273 != v274);
                    }
                  }
                }
                uint64_t v225 = sub_1CC56C0C0((llvm *)0x26, v436, (llvm::Constant *)v9, 0);
                LOWORD(v445[0]) = 257;
                uint64_t v49 = (uint64_t ***)llvm::BinaryOperator::Create(25, v210, (uint64_t)v225, (const char **)&__p, 0);
LABEL_310:
                if (v459 >= 0x41 && p_p) {
                  MEMORY[0x1D25D9CB0](p_p, 0x1000C8000313F17);
                }
                if (v209) {
                  return (llvm::Value *)v49;
                }
                goto LABEL_240;
              }
              int v217 = 1;
              while (v216 != (llvm::Type **)-4096)
              {
                int v218 = v214 + v217++;
                uint64_t v214 = v218 & (v213 - 1);
                uint64_t v216 = *(llvm::Type ***)(v212 + 16 * v214);
                if (v216 == v438)
                {
                  uint64_t v215 = v212 + 16 * v214;
                  goto LABEL_305;
                }
              }
            }
            uint64_t v215 = v212 + 16 * v213;
            goto LABEL_305;
          }
          if (v108[16] <= 0x14u && v108)
          {
            double v145 = sub_1CC56C0C0((llvm *)0x26, *(llvm::detail::IEEEFloat **)(v103 - 32), v104, 0);
            uint64_t v114 = v145;
            uint64_t v146 = *(uint64_t **)(a1 + 24);
            LOWORD(v457) = 257;
            if (*(llvm::Type **)v107 != v104)
            {
              size_t v430 = (size_t)v145;
              if (v107[16] <= 0x14u)
              {
                uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v146[9] + 224))(v146[9], 38, v107, v104);
                uint64_t v107 = (unsigned __int8 *)v166;
                if (v166)
                {
                  uint64_t v114 = (llvm::SmallPtrSetImplBase *)v430;
                  if (*(unsigned __int8 *)(v166 + 16) < 0x1Cu) {
                    goto LABEL_190;
                  }
                  (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(void *)v146[10]
                                                                                              + 16))(v146[10], v166, &FnAttribute, v146[6], v146[7]);
                  uint64_t v167 = *((unsigned int *)v146 + 2);
                  if (v167)
                  {
                    uint64_t v168 = *v146;
                    uint64_t v169 = v168 + 16 * v167;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v107, *(_DWORD *)v168, *(llvm::MDNode **)(v168 + 8));
                      v168 += 16;
                    }
                    while (v168 != v169);
                  }
                }
              }
              else
              {
                LOWORD(v445[0]) = 257;
                uint64_t v107 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v107, (uint64_t)v104, (const char **)&__p, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, uint64_t, uint64_t))(*(void *)v146[10] + 16))(v146[10], v107, &FnAttribute, v146[6], v146[7]);
                uint64_t v147 = *((unsigned int *)v146 + 2);
                if (v147)
                {
                  uint64_t v275 = *v146;
                  uint64_t v276 = v275 + 16 * v147;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v107, *(_DWORD *)v275, *(llvm::MDNode **)(v275 + 8));
                    v275 += 16;
                  }
                  while (v275 != v276);
                }
              }
              uint64_t v114 = (llvm::SmallPtrSetImplBase *)v430;
            }
LABEL_190:
            char v113 = *(unsigned char *)(v103 + 16) - 28;
LABEL_191:
            LOWORD(v445[0]) = 257;
            unsigned int v110 = (void **)v107;
            goto LABEL_131;
          }
          p_p = 0;
          __p = &p_p;
          p_p_p = (llvm::Constant **)&p_p;
          if (((sub_1CBC5BE40((void **)&__p, (uint64_t)v107) & 1) != 0
             || sub_1CBC5BEAC(&p_p_p, (uint64_t)v107))
            && *p_p == v104)
          {
            __int16 v253 = *(uint64_t **)(a1 + 24);
            LOWORD(v457) = 257;
            if (*(llvm::Type **)v108 != v104)
            {
              if (v108[16] <= 0x14u)
              {
                uint64_t v258 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v253[9] + 224))(v253[9], 38, v108, v104);
                uint64_t v108 = (unsigned __int8 *)v258;
                if (v258)
                {
                  if (*(unsigned __int8 *)(v258 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(void *)v253[10]
                                                                                                + 16))(v253[10], v258, &FnAttribute, v253[6], v253[7]);
                    uint64_t v259 = *((unsigned int *)v253 + 2);
                    if (v259)
                    {
                      uint64_t v260 = *v253;
                      uint64_t v261 = v260 + 16 * v259;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v108, *(_DWORD *)v260, *(llvm::MDNode **)(v260 + 8));
                        v260 += 16;
                      }
                      while (v260 != v261);
                    }
                  }
                }
              }
              else
              {
                LOWORD(v445[0]) = 257;
                uint64_t v108 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v108, (uint64_t)v104, (const char **)&__p, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, uint64_t, uint64_t))(*(void *)v253[10] + 16))(v253[10], v108, &FnAttribute, v253[6], v253[7]);
                uint64_t v254 = *((unsigned int *)v253 + 2);
                if (v254)
                {
                  uint64_t v283 = *v253;
                  uint64_t v284 = v283 + 16 * v254;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v108, *(_DWORD *)v283, *(llvm::MDNode **)(v283 + 8));
                    v283 += 16;
                  }
                  while (v283 != v284);
                }
              }
            }
            char v113 = *(unsigned char *)(v103 + 16) - 28;
            unsigned int v110 = p_p;
            goto LABEL_130;
          }
          __p = &p_p;
          p_p_p = (llvm::Constant **)&p_p;
          if (((sub_1CBC5BE40((void **)&__p, (uint64_t)v108) & 1) != 0
             || sub_1CBC5BEAC(&p_p_p, (uint64_t)v108))
            && *p_p == v104)
          {
            __int16 v255 = *(uint64_t **)(a1 + 24);
            LOWORD(v457) = 257;
            if (*(llvm::Type **)v107 != v104)
            {
              if (v107[16] <= 0x14u)
              {
                uint64_t v262 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v255[9] + 224))(v255[9], 38, v107, v104);
                uint64_t v107 = (unsigned __int8 *)v262;
                if (v262)
                {
                  if (*(unsigned __int8 *)(v262 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(void *)v255[10]
                                                                                                + 16))(v255[10], v262, &FnAttribute, v255[6], v255[7]);
                    uint64_t v263 = *((unsigned int *)v255 + 2);
                    if (v263)
                    {
                      uint64_t v264 = *v255;
                      uint64_t v265 = v264 + 16 * v263;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v107, *(_DWORD *)v264, *(llvm::MDNode **)(v264 + 8));
                        v264 += 16;
                      }
                      while (v264 != v265);
                    }
                  }
                }
              }
              else
              {
                LOWORD(v445[0]) = 257;
                uint64_t v107 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v107, (uint64_t)v104, (const char **)&__p, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, unsigned int **, uint64_t, uint64_t))(*(void *)v255[10] + 16))(v255[10], v107, &FnAttribute, v255[6], v255[7]);
                uint64_t v256 = *((unsigned int *)v255 + 2);
                if (v256)
                {
                  uint64_t v285 = *v255;
                  uint64_t v286 = v285 + 16 * v256;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v107, *(_DWORD *)v285, *(llvm::MDNode **)(v285 + 8));
                    v285 += 16;
                  }
                  while (v285 != v286);
                }
              }
            }
            char v113 = *(unsigned char *)(v103 + 16) - 28;
            uint64_t v114 = (llvm::SmallPtrSetImplBase *)p_p;
            goto LABEL_191;
          }
        }
        uint64_t v453 = *v5;
        unint64_t v150 = (llvm::ConstantInt *)v453;
        uint64_t v151 = (llvm::Type *)v453;
        if ((*(_DWORD *)(v453 + 8) & 0xFE) == 0x12) {
          uint64_t v151 = **(llvm::Type ***)(v453 + 16);
        }
        unsigned int v152 = llvm::Type::getPrimitiveSizeInBits(v151);
        unsigned int v452 = v152;
        uint64_t v153 = *(v5 - 4);
        uint64_t v154 = *(llvm::Type **)v153;
        if ((*(_DWORD *)(*(void *)v153 + 8) & 0xFE) == 0x12) {
          uint64_t v154 = (llvm::Type *)**((void **)v154 + 2);
        }
        unsigned int v451 = llvm::Type::getPrimitiveSizeInBits(v154);
        v155.i32[0] = v152;
        uint8x8_t v156 = (uint8x8_t)vcnt_s8(v155);
        v156.i16[0] = vaddlv_u8(v156);
        if (v156.i32[0] == 1)
        {
          uint64_t v157 = *(void *)(v153 + 8);
          if (v157)
          {
            if (!*(void *)(v157 + 8))
            {
              int v158 = *(unsigned __int8 *)(v153 + 16);
              if (v158 == 5)
              {
                if (*(_WORD *)(v153 + 18) != 29) {
                  goto LABEL_237;
                }
                uint64_t v49 = 0;
                uint64_t v170 = (uint64_t *)(v153 - 32 * (*(_DWORD *)(v153 + 20) & 0x7FFFFFF));
                uint64_t v159 = *v170;
                if (!*v170) {
                  goto LABEL_132;
                }
                unsigned int v171 = *(unsigned __int8 *)(v159 + 16);
                if (v171 < 0x1C) {
                  goto LABEL_132;
                }
                v431 = v150;
                if (v171 - 59 < 0xFFFFFFEE) {
                  goto LABEL_132;
                }
                uint64_t v49 = 0;
                uint64_t v161 = v170[4];
                if (!v161) {
                  goto LABEL_132;
                }
              }
              else
              {
                if (v158 != 57) {
                  goto LABEL_237;
                }
                uint64_t v49 = 0;
                uint64_t v159 = *(void *)(v153 - 64);
                if (!v159) {
                  goto LABEL_132;
                }
                unsigned int v160 = *(unsigned __int8 *)(v159 + 16);
                if (v160 < 0x1C) {
                  goto LABEL_132;
                }
                v431 = v150;
                if (v160 - 59 < 0xFFFFFFEE) {
                  goto LABEL_132;
                }
                uint64_t v49 = 0;
                uint64_t v161 = *(void *)(v153 - 32);
                if (!v161) {
                  goto LABEL_132;
                }
              }
              unsigned int v172 = *(unsigned __int8 *)(v161 + 16);
              if (v172 < 0x1C || v172 - 59 < 0xFFFFFFEE) {
                goto LABEL_132;
              }
              v449 = 0;
              v450 = 0;
              v447 = 0;
              v448 = 0;
              __p = &v450;
              p_p_p = &v448;
              uint64_t v173 = *(void *)(v159 + 8);
              if (v173)
              {
                if (!*(void *)(v173 + 8))
                {
                  char v174 = (unsigned __int8 *)v159;
                  if (sub_1CCA15BF0((void **)&__p, v159))
                  {
                    FnAttribute = (unsigned int *)&v449;
                    uint64_t v455 = (uint64_t)&v447;
                    uint64_t v289 = *(void *)(v161 + 8);
                    if (v289)
                    {
                      if (!*(void *)(v289 + 8))
                      {
                        if (sub_1CCA15BF0((void **)&FnAttribute, v161))
                        {
                          v425 = (llvm::Instruction *)v174;
                          int v290 = v174[16];
                          if (v290 != *(unsigned __int8 *)(v161 + 16))
                          {
                            v291 = v447;
                            v292 = v448;
                            if (v290 == 54)
                            {
                              v293 = v449;
                              v449 = (llvm *)v450;
                              v450 = (unsigned __int8 *)v293;
                              v447 = v448;
                              v448 = v291;
                              v294 = v292;
                              uint64_t v424 = v161;
                            }
                            else
                            {
                              v294 = v447;
                              v291 = v448;
                              uint64_t v424 = (uint64_t)v174;
                              v425 = (llvm::Instruction *)v161;
                            }
                            FnAttribute = &v452;
                            uint64_t v455 = (uint64_t)&v451;
                            v456[0] = &v450;
                            v456[1] = &v449;
                            uint64_t v457 = a1;
                            v295 = (unsigned __int8 *)sub_1CCA39DB8((uint64_t)&FnAttribute, v291, (uint64_t)v294, v152);
                            v296 = v295;
                            if (v295)
                            {
LABEL_442:
                              unsigned int v463 = v451;
                              if (v451 > 0x40) {
                                operator new[]();
                              }
                              uint64_t v462 = 0;
                              if (v452 != v451)
                              {
                                if (v452 > 0x3F) {
                                  llvm::APInt::setBitsSlowCase(&v462, v452, v451);
                                }
                                else {
                                  v462 |= 0xFFFFFFFFFFFFFFFFLL >> (v452 - v451) << v452;
                                }
                              }
                              if (llvm::MaskedValueIsZero(v449, (const llvm::Value *)&v462, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)v5, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v416))
                              {
                                uint64_t v298 = *(void *)(*(void *)(v5[5] + 56) + 40);
                                if (*(char *)(v298 + 239) < 0) {
                                  sub_1CB8BDF7C((uint64_t)&v446, *(const void **)(v298 + 216), *(void *)(v298 + 224));
                                }
                                else {
                                  std::string v446 = *(std::string *)(v298 + 216);
                                }
                                int ArchFromTriple = llvm::GPUBaseInfo::getArchFromTriple(&v446);
                                if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v446.__r_.__value_.__l.__data_);
                                }
                                if ((ArchFromTriple & 0xFFFFFFFE) != 0x1C)
                                {
                                  v373 = *(uint64_t **)(a1 + 24);
                                  __int16 v461 = 257;
                                  if (*(llvm::ConstantInt **)v295 != v431)
                                  {
                                    if (v295[16] <= 0x14u)
                                    {
                                      uint64_t v396 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*(void *)v373[9] + 224))(v373[9], 38, v295, v431);
                                      v295 = (unsigned __int8 *)v396;
                                      if (v396)
                                      {
                                        if (*(unsigned __int8 *)(v396 + 16) >= 0x1Cu)
                                        {
                                          (*(void (**)(uint64_t, uint64_t, void ***, uint64_t, uint64_t))(*(void *)v373[10] + 16))(v373[10], v396, &p_p, v373[6], v373[7]);
                                          uint64_t v397 = *((unsigned int *)v373 + 2);
                                          if (v397)
                                          {
                                            uint64_t v398 = *v373;
                                            v427 = (llvm::Instruction *)(v398 + 16 * v397);
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v295, *(_DWORD *)v398, *(llvm::MDNode **)(v398 + 8));
                                              v398 += 16;
                                            }
                                            while ((llvm::Instruction *)v398 != v427);
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v445[0]) = 257;
                                      v295 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v295, (uint64_t)v431, (const char **)&__p, 0);
                                      (*(void (**)(uint64_t))(*(void *)v373[10] + 16))(v373[10]);
                                      uint64_t v374 = *((unsigned int *)v373 + 2);
                                      if (v374)
                                      {
                                        uint64_t v411 = *v373;
                                        v428 = (llvm::Instruction *)(v411 + 16 * v374);
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v295, *(_DWORD *)v411, *(llvm::MDNode **)(v411 + 8));
                                          v411 += 16;
                                        }
                                        while ((llvm::Instruction *)v411 != v428);
                                      }
                                    }
                                  }
                                  v375 = *(uint64_t **)(a1 + 24);
                                  __int16 v461 = 257;
                                  v426 = (llvm::Value *)v450;
                                  if (*(llvm::ConstantInt **)v450 != v431)
                                  {
                                    if (v450[16] <= 0x14u)
                                    {
                                      uint64_t v399 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*(void *)v375[9] + 224))(v375[9], 38, v450, v431);
                                      v426 = (llvm::Value *)v399;
                                      if (v399) {
                                        BOOL v400 = *(unsigned __int8 *)(v399 + 16) >= 0x1Cu;
                                      }
                                      else {
                                        BOOL v400 = 0;
                                      }
                                      if (v400)
                                      {
                                        (*(void (**)(uint64_t, uint64_t, void ***, uint64_t, uint64_t))(*(void *)v375[10] + 16))(v375[10], v399, &p_p, v375[6], v375[7]);
                                        uint64_t v401 = *((unsigned int *)v375 + 2);
                                        if (v401)
                                        {
                                          uint64_t v402 = *v375;
                                          uint64_t v403 = *v375 + 16 * v401;
                                          do
                                          {
                                            llvm::Instruction::setMetadata(v426, *(_DWORD *)v402, *(llvm::MDNode **)(v402 + 8));
                                            v402 += 16;
                                          }
                                          while (v402 != v403);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v445[0]) = 257;
                                      v426 = llvm::CastInst::Create(38, (uint64_t)v450, (uint64_t)v431, (const char **)&__p, 0);
                                      (*(void (**)(uint64_t))(*(void *)v375[10] + 16))(v375[10]);
                                      uint64_t v376 = *((unsigned int *)v375 + 2);
                                      if (v376)
                                      {
                                        uint64_t v412 = *v375;
                                        uint64_t v413 = *v375 + 16 * v376;
                                        do
                                        {
                                          llvm::Instruction::setMetadata(v426, *(_DWORD *)v412, *(llvm::MDNode **)(v412 + 8));
                                          v412 += 16;
                                        }
                                        while (v412 != v413);
                                      }
                                    }
                                  }
                                  v377 = (unsigned __int8 *)v449;
                                  v378 = (unsigned int **)v426;
                                  if (v450 != (unsigned __int8 *)v449)
                                  {
                                    v379 = *(uint64_t **)(a1 + 24);
                                    __int16 v461 = 257;
                                    if (*(llvm::ConstantInt **)v449 != v431)
                                    {
                                      if (*((unsigned __int8 *)v449 + 16) <= 0x14u)
                                      {
                                        v377 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, llvm *, llvm::ConstantInt *))(*(void *)v379[9] + 224))(v379[9], 38, v449, v431);
                                        if (v377) {
                                          BOOL v404 = v377[16] >= 0x1Cu;
                                        }
                                        else {
                                          BOOL v404 = 0;
                                        }
                                        if (v404)
                                        {
                                          (*(void (**)(uint64_t, unsigned __int8 *, void ***, uint64_t, uint64_t))(*(void *)v379[10] + 16))(v379[10], v377, &p_p, v379[6], v379[7]);
                                          uint64_t v405 = *((unsigned int *)v379 + 2);
                                          if (v405)
                                          {
                                            uint64_t v406 = *v379;
                                            size_t v433 = v406 + 16 * v405;
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v377, *(_DWORD *)v406, *(llvm::MDNode **)(v406 + 8));
                                              v406 += 16;
                                            }
                                            while (v406 != v433);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        LOWORD(v445[0]) = 257;
                                        v377 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v449, (uint64_t)v431, (const char **)&__p, 0);
                                        (*(void (**)(uint64_t, unsigned __int8 *, void ***, uint64_t, uint64_t))(*(void *)v379[10] + 16))(v379[10], v377, &p_p, v379[6], v379[7]);
                                        uint64_t v380 = *((unsigned int *)v379 + 2);
                                        if (v380)
                                        {
                                          uint64_t v414 = *v379;
                                          size_t v434 = v414 + 16 * v380;
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v377, *(_DWORD *)v414, *(llvm::MDNode **)(v414 + 8));
                                            v414 += 16;
                                          }
                                          while (v414 != v434);
                                        }
                                      }
                                    }
                                    v378 = (unsigned int **)v377;
                                  }
                                  if (v296) {
                                    int v381 = 148;
                                  }
                                  else {
                                    int v381 = 149;
                                  }
                                  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(v5[5] + 56) + 40), v381, (uint64_t)&v453, 1);
                                  v383 = (uint64_t **)Declaration;
                                  if (Declaration) {
                                    v432 = *(uint64_t ***)(Declaration + 24);
                                  }
                                  else {
                                    v432 = 0;
                                  }
                                  p_p = (void **)v426;
                                  v459 = v378;
                                  v460 = v295;
                                  LOWORD(v445[0]) = 257;
                                  v384 = (char *)operator new(0xD0uLL);
                                  uint64_t v385 = 0;
                                  uint64_t v49 = (uint64_t ***)(v384 + 128);
                                  *((_DWORD *)v384 + 37) = *((_DWORD *)v384 + 37) & 0x38000000 | 4;
                                  do
                                  {
                                    v386 = &v384[v385];
                                    *(void *)v386 = 0;
                                    *((void *)v386 + 1) = 0;
                                    *((void *)v386 + 2) = 0;
                                    *((void *)v386 + 3) = v49;
                                    v385 += 32;
                                  }
                                  while (v385 != 128);
                                  *((void *)v384 + 16) = *v432[2];
                                  *((void *)v384 + 17) = 0;
                                  v384[144] = 84;
                                  v384[145] = 0;
                                  *((_WORD *)v384 + 73) = 0;
                                  *((_DWORD *)v384 + 37) = *((_DWORD *)v384 + 37) & 0xC0000000 | 4;
                                  *(_OWORD *)(v384 + 152) = 0u;
                                  *(_OWORD *)(v384 + 168) = 0u;
                                  *((_DWORD *)v384 + 46) = 0;
                                  *((void *)v384 + 24) = 0;
                                  llvm::CallInst::init((uint64_t ***)v384 + 16, v432, v383, (uint64_t *)&p_p, 3, 0, 0, (const char **)&__p);
                                  goto LABEL_462;
                                }
                                v423 = v450;
                                if (v450 == (unsigned __int8 *)v449 && v296)
                                {
                                  v300 = *(uint64_t **)(a1 + 24);
                                  __int16 v461 = 257;
                                  if (*(llvm::ConstantInt **)v295 != v431)
                                  {
                                    if (v295[16] <= 0x14u)
                                    {
                                      uint64_t v318 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*(void *)v300[9] + 224))(v300[9], 38, v295, v431);
                                      v295 = (unsigned __int8 *)v318;
                                      if (v318)
                                      {
                                        if (*(unsigned __int8 *)(v318 + 16) >= 0x1Cu)
                                        {
                                          (*(void (**)(uint64_t, uint64_t, void ***, uint64_t, uint64_t))(*(void *)v300[10] + 16))(v300[10], v318, &p_p, v300[6], v300[7]);
                                          uint64_t v319 = *((unsigned int *)v300 + 2);
                                          if (v319)
                                          {
                                            uint64_t v320 = *v300;
                                            uint64_t v321 = v320 + 16 * v319;
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v295, *(_DWORD *)v320, *(llvm::MDNode **)(v320 + 8));
                                              v320 += 16;
                                            }
                                            while (v320 != v321);
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v445[0]) = 257;
                                      v295 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v295, (uint64_t)v431, (const char **)&__p, 0);
                                      (*(void (**)(uint64_t))(*(void *)v300[10] + 16))(v300[10]);
                                      uint64_t v301 = *((unsigned int *)v300 + 2);
                                      if (v301)
                                      {
                                        uint64_t v327 = *v300;
                                        uint64_t v328 = v327 + 16 * v301;
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v295, *(_DWORD *)v327, *(llvm::MDNode **)(v327 + 8));
                                          v327 += 16;
                                        }
                                        while (v327 != v328);
                                      }
                                    }
                                  }
                                  uint64_t v302 = *(void *)(a1 + 24);
                                  LOWORD(v445[0]) = 257;
                                  v303 = v295;
                                  v417 = sub_1CD5A6358(v302, (llvm::BinaryOperator *)v295, (uint64_t)&__p, 0, 0);
                                  v304 = llvm::ConstantInt::get(v431, v452 - 1, 0);
                                  uint64_t v305 = *(void *)(a1 + 24);
                                  LOWORD(v445[0]) = 257;
                                  v421 = sub_1CBF52474(v305, v303, (uint64_t)v304, (uint64_t)&__p);
                                  uint64_t v306 = *(void *)(a1 + 24);
                                  LOWORD(v445[0]) = 257;
                                  v418 = sub_1CBF52474(v306, v417, (uint64_t)v304, (uint64_t)&__p);
                                  v307 = *(uint64_t **)(a1 + 24);
                                  __int16 v461 = 257;
                                  if (*(llvm::ConstantInt **)v423 != v431)
                                  {
                                    if (v423[16] <= 0x14u)
                                    {
                                      uint64_t v322 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*(void *)v307[9] + 224))(v307[9], 38, v423, v431);
                                      v423 = (unsigned __int8 *)v322;
                                      if (v322) {
                                        BOOL v323 = *(unsigned __int8 *)(v322 + 16) >= 0x1Cu;
                                      }
                                      else {
                                        BOOL v323 = 0;
                                      }
                                      if (v323)
                                      {
                                        (*(void (**)(uint64_t, uint64_t, void ***, uint64_t, uint64_t))(*(void *)v307[10] + 16))(v307[10], v322, &p_p, v307[6], v307[7]);
                                        uint64_t v324 = *((unsigned int *)v307 + 2);
                                        if (v324)
                                        {
                                          uint64_t v325 = *v307;
                                          uint64_t v326 = *v307 + 16 * v324;
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v423, *(_DWORD *)v325, *(llvm::MDNode **)(v325 + 8));
                                            v325 += 16;
                                          }
                                          while (v325 != v326);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v445[0]) = 257;
                                      v423 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v423, (uint64_t)v431, (const char **)&__p, 0);
                                      (*(void (**)(uint64_t))(*(void *)v307[10] + 16))(v307[10]);
                                      uint64_t v308 = *((unsigned int *)v307 + 2);
                                      if (v308)
                                      {
                                        uint64_t v329 = *v307;
                                        uint64_t v330 = *v307 + 16 * v308;
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v423, *(_DWORD *)v329, *(llvm::MDNode **)(v329 + 8));
                                          v329 += 16;
                                        }
                                        while (v329 != v330);
                                      }
                                    }
                                  }
                                  uint64_t v309 = *(void *)(a1 + 24);
                                  uint64_t v310 = *(unsigned __int8 *)(v424 + 16) - 28;
                                  LOWORD(v445[0]) = 257;
                                  v311 = sub_1CB844E98(v309, v310, (uint64_t)v423, (uint64_t)v421, (uint64_t)&__p, 0);
                                  uint64_t v312 = *(void *)(a1 + 24);
                                  uint64_t v313 = *((unsigned __int8 *)v425 + 16) - 28;
                                  LOWORD(v445[0]) = 257;
                                  v314 = sub_1CB844E98(v312, v313, (uint64_t)v423, (uint64_t)v418, (uint64_t)&__p, 0);
                                  LOWORD(v445[0]) = 257;
                                  v315 = v311;
LABEL_461:
                                  uint64_t v49 = (uint64_t ***)llvm::BinaryOperator::Create(29, v315, (uint64_t)v314, (const char **)&__p, 0);
LABEL_462:
                                  if (v463 >= 0x41 && v462) {
                                    MEMORY[0x1D25D9CB0](v462, 0x1000C8000313F17);
                                  }
                                  goto LABEL_132;
                                }
                                if (v450 == (unsigned __int8 *)v449)
                                {
                                  v358 = *(uint64_t **)(a1 + 24);
                                  __int16 v461 = 257;
                                  if (*(llvm::ConstantInt **)v295 != v431)
                                  {
                                    if (v295[16] < 0x15u)
                                    {
                                      uint64_t v387 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*(void *)v358[9] + 224))(v358[9], 38, v295, v431);
                                      v295 = (unsigned __int8 *)v387;
                                      if (v387)
                                      {
                                        if (*(unsigned __int8 *)(v387 + 16) >= 0x1Cu)
                                        {
                                          (*(void (**)(uint64_t, uint64_t, void ***, uint64_t, uint64_t))(*(void *)v358[10] + 16))(v358[10], v387, &p_p, v358[6], v358[7]);
                                          uint64_t v388 = *((unsigned int *)v358 + 2);
                                          if (v388)
                                          {
                                            uint64_t v389 = *v358;
                                            uint64_t v390 = v389 + 16 * v388;
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v295, *(_DWORD *)v389, *(llvm::MDNode **)(v389 + 8));
                                              v389 += 16;
                                            }
                                            while (v389 != v390);
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v445[0]) = 257;
                                      v295 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v295, (uint64_t)v431, (const char **)&__p, 0);
                                      (*(void (**)(uint64_t))(*(void *)v358[10] + 16))(v358[10]);
                                      uint64_t v359 = *((unsigned int *)v358 + 2);
                                      if (v359)
                                      {
                                        uint64_t v407 = *v358;
                                        uint64_t v408 = v407 + 16 * v359;
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v295, *(_DWORD *)v407, *(llvm::MDNode **)(v407 + 8));
                                          v407 += 16;
                                        }
                                        while (v407 != v408);
                                      }
                                    }
                                  }
                                  uint64_t v360 = *(void *)(a1 + 24);
                                  LOWORD(v445[0]) = 257;
                                  v419 = sub_1CD5A6358(v360, (llvm::BinaryOperator *)v295, (uint64_t)&__p, 0, 0);
                                  v361 = llvm::ConstantInt::get(v431, v452 - 1, 0);
                                  uint64_t v362 = *(void *)(a1 + 24);
                                  LOWORD(v445[0]) = 257;
                                  v422 = sub_1CBF52474(v362, v295, (uint64_t)v361, (uint64_t)&__p);
                                  uint64_t v363 = *(void *)(a1 + 24);
                                  LOWORD(v445[0]) = 257;
                                  v420 = sub_1CBF52474(v363, v419, (uint64_t)v361, (uint64_t)&__p);
                                  v364 = *(uint64_t **)(a1 + 24);
                                  __int16 v461 = 257;
                                  if (*(llvm::ConstantInt **)v423 != v431)
                                  {
                                    if (v423[16] < 0x15u)
                                    {
                                      uint64_t v391 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(*(void *)v364[9] + 224))(v364[9], 38, v423, v431);
                                      v423 = (unsigned __int8 *)v391;
                                      if (v391) {
                                        BOOL v392 = *(unsigned __int8 *)(v391 + 16) >= 0x1Cu;
                                      }
                                      else {
                                        BOOL v392 = 0;
                                      }
                                      if (v392)
                                      {
                                        (*(void (**)(uint64_t, uint64_t, void ***, uint64_t, uint64_t))(*(void *)v364[10] + 16))(v364[10], v391, &p_p, v364[6], v364[7]);
                                        uint64_t v393 = *((unsigned int *)v364 + 2);
                                        if (v393)
                                        {
                                          uint64_t v394 = *v364;
                                          uint64_t v395 = *v364 + 16 * v393;
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v423, *(_DWORD *)v394, *(llvm::MDNode **)(v394 + 8));
                                            v394 += 16;
                                          }
                                          while (v394 != v395);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v445[0]) = 257;
                                      v423 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v423, (uint64_t)v431, (const char **)&__p, 0);
                                      (*(void (**)(uint64_t))(*(void *)v364[10] + 16))(v364[10]);
                                      uint64_t v365 = *((unsigned int *)v364 + 2);
                                      if (v365)
                                      {
                                        uint64_t v409 = *v364;
                                        uint64_t v410 = *v364 + 16 * v365;
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v423, *(_DWORD *)v409, *(llvm::MDNode **)(v409 + 8));
                                          v409 += 16;
                                        }
                                        while (v409 != v410);
                                      }
                                    }
                                  }
                                  if (v296) {
                                    uint64_t v366 = (uint64_t)v422;
                                  }
                                  else {
                                    uint64_t v366 = (uint64_t)v420;
                                  }
                                  if (v296) {
                                    uint64_t v367 = (uint64_t)v420;
                                  }
                                  else {
                                    uint64_t v367 = (uint64_t)v422;
                                  }
                                  uint64_t v368 = *(void *)(a1 + 24);
                                  uint64_t v369 = *(unsigned __int8 *)(v424 + 16) - 28;
                                  LOWORD(v445[0]) = 257;
                                  v370 = sub_1CB844E98(v368, v369, (uint64_t)v423, v366, (uint64_t)&__p, 0);
                                  uint64_t v371 = *(void *)(a1 + 24);
                                  uint64_t v372 = *((unsigned __int8 *)v425 + 16) - 28;
                                  LOWORD(v445[0]) = 257;
                                  v314 = sub_1CB844E98(v371, v372, (uint64_t)v423, v367, (uint64_t)&__p, 0);
                                  LOWORD(v445[0]) = 257;
                                  v315 = v370;
                                  goto LABEL_461;
                                }
                              }
                              uint64_t v49 = 0;
                              goto LABEL_462;
                            }
                            v297 = sub_1CCA39DB8((uint64_t)&FnAttribute, v447, (uint64_t)v448, v452);
                            if (v297)
                            {
                              v295 = (unsigned __int8 *)v297;
                              goto LABEL_442;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_237:
        uint64_t v49 = 0;
        goto LABEL_132;
      }
      sub_1CB8F1EEC((uint64_t)&__p, v435, 1);
      v339 = llvm::ConstantInt::get((llvm::ConstantInt **)v10, (llvm::Type *)&__p, v338);
      if (p_p_p >= 0x41 && __p) {
        MEMORY[0x1D25D9CB0](__p, 0x1000C8000313F17);
      }
      v340 = llvm::ConstantExpr::getShl(v339, (llvm::Constant *)p_p, 0, 0);
      Shl = llvm::ConstantExpr::getOr(v340, v339, v341, v342);
      goto LABEL_524;
    }
    return (llvm::Value *)v5;
  }
  uint64_t v70 = sub_1CCA38F6C(a1, (uint64_t)v8, (llvm::Type ***)v9, 0, v21, v22);

  return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v5, v70);
}

uint64_t sub_1CCA3D55C(uint64_t a1, uint64_t a2, const llvm::DataLayout **a3, llvm::AssumptionCache *a4)
{
  uint64_t v7 = a1;
  if (sub_1CCA474C8(a1, a2))
  {
LABEL_2:
    LOBYTE(PrimitiveSizeInBits) = 1;
    return PrimitiveSizeInBits & 1;
  }
  LOBYTE(PrimitiveSizeInBits) = 1;
  while (2)
  {
    unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
    if (v9 < 0x1C) {
      goto LABEL_169;
    }
    uint64_t v10 = *(void *)(v7 + 8);
    if (!v10 || *(void *)(v10 + 8)) {
      goto LABEL_169;
    }
    uint64_t v11 = *(void *)v7;
    switch(*(unsigned char *)(v7 + 16))
    {
      case ')':
      case '+':
      case '-':
      case '8':
      case '9':
      case ':':
        int v12 = *(_DWORD *)(v7 + 20);
        if ((v12 & 0x40000000) != 0) {
          unint64_t v13 = *(void **)(v7 - 8);
        }
        else {
          unint64_t v13 = (void *)(v7 - 32 * (v12 & 0x7FFFFFF));
        }
        if (!sub_1CCA3D55C(*v13, a2, a3, a4)) {
          goto LABEL_169;
        }
        int v14 = *(_DWORD *)(v7 + 20);
        if ((v14 & 0x40000000) != 0) {
          uint64_t v15 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v15 = v7 - 32 * (v14 & 0x7FFFFFF);
        }
        char v16 = (uint64_t *)(v15 + 32);
        goto LABEL_16;
      case '*':
      case ',':
      case '.':
      case '0':
      case '1':
      case '3':
      case '4':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
        goto LABEL_169;
      case '/':
      case '2':
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
          uint64_t v11 = **(void **)(v11 + 16);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        uint64_t v17 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          uint64_t v17 = **(llvm::Type ***)(a2 + 16);
        }
        unsigned int v18 = llvm::Type::getPrimitiveSizeInBits(v17);
        LODWORD(v93) = PrimitiveSizeInBits;
        if (PrimitiveSizeInBits > 0x40) {
          operator new[]();
        }
        unint64_t v92 = 0;
        if (PrimitiveSizeInBits != v18)
        {
          if (v18 > 0x3F) {
            llvm::APInt::setBitsSlowCase(&v92, v18, PrimitiveSizeInBits);
          }
          else {
            unint64_t v92 = 0xFFFFFFFFFFFFFFFFLL >> (v18 - PrimitiveSizeInBits) << v18;
          }
        }
        int v19 = *(_DWORD *)(v7 + 20);
        if ((v19 & 0x40000000) != 0) {
          unsigned int v20 = *(llvm ***)(v7 - 8);
        }
        else {
          unsigned int v20 = (llvm **)(v7 - 32 * (v19 & 0x7FFFFFF));
        }
        char v35 = 1;
        if (llvm::MaskedValueIsZero(*v20, (const llvm::Value *)&v92, a3[10], 0, a3[7], a4, a3[9], (const llvm::DominatorTree *)1, v86[0]))
        {
          int v36 = *(_DWORD *)(v7 + 20);
          uint64_t v37 = (v36 & 0x40000000) != 0 ? *(void *)(v7 - 8) : v7 - 32 * (v36 & 0x7FFFFFF);
          if (llvm::MaskedValueIsZero(*(llvm **)(v37 + 32), (const llvm::Value *)&v92, a3[10], 0, a3[7], a4, a3[9], (const llvm::DominatorTree *)1, v86[0]))
          {
            int v59 = *(_DWORD *)(v7 + 20);
            if ((v59 & 0x40000000) != 0) {
              int v60 = *(void **)(v7 - 8);
            }
            else {
              int v60 = (void *)(v7 - 32 * (v59 & 0x7FFFFFF));
            }
            if (sub_1CCA3D55C(*v60, a2, a3, a4))
            {
              int v65 = *(_DWORD *)(v7 + 20);
              if ((v65 & 0x40000000) != 0) {
                uint64_t v66 = *(void *)(v7 - 8);
              }
              else {
                uint64_t v66 = v7 - 32 * (v65 & 0x7FFFFFF);
              }
              LOBYTE(PrimitiveSizeInBits) = sub_1CCA3D55C(*(void *)(v66 + 32), a2, a3, a4);
              char v35 = 0;
            }
            else
            {
              char v35 = 0;
              LOBYTE(PrimitiveSizeInBits) = 0;
            }
          }
        }
        if (v93 >= 0x41 && v92) {
          MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
        }
        if (v35) {
          goto LABEL_169;
        }
        return PrimitiveSizeInBits & 1;
      case '5':
        BOOL v24 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          BOOL v24 = **(llvm::Type ***)(a2 + 16);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v24);
        int v25 = *(_DWORD *)(v7 + 20);
        if ((v25 & 0x40000000) != 0) {
          uint64_t v26 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v26 = v7 - 32 * (v25 & 0x7FFFFFF);
        }
        uint64_t v38 = *(void *)(v26 + 32);
        if (!v38
          || *(unsigned __int8 *)(v38 + 16) < 0x1Cu
          || (uint64_t v39 = *(llvm::AssumptionCache **)(v26 + 32), !*(void *)(v38 + 40)))
        {
          uint64_t v39 = 0;
        }
        unint64_t v92 = (unint64_t)a3[10];
        __int16 v93 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v94 = v39;
        char v97 = 1;
        sub_1CC16089C((uint64_t *)v38, 0, (const llvm::DataLayout **)&v92, (uint64_t)&__src);
        LODWORD(v93) = v89;
        if (v89 > 0x40) {
          operator new[]();
        }
        if (v89) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
        }
        else {
          unint64_t v40 = 0;
        }
        if ((v40 & ~(unint64_t)__src) >= PrimitiveSizeInBits)
        {
          char v79 = 0;
        }
        else
        {
          int v41 = *(_DWORD *)(v7 + 20);
          if ((v41 & 0x40000000) != 0) {
            int v42 = *(void **)(v7 - 8);
          }
          else {
            int v42 = (void *)(v7 - 32 * (v41 & 0x7FFFFFF));
          }
          if (sub_1CCA3D55C(*v42, a2, a3, a4))
          {
            int v67 = *(_DWORD *)(v7 + 20);
            if ((v67 & 0x40000000) != 0) {
              uint64_t v68 = *(void *)(v7 - 8);
            }
            else {
              uint64_t v68 = v7 - 32 * (v67 & 0x7FFFFFF);
            }
            LOBYTE(PrimitiveSizeInBits) = sub_1CCA3D55C(*(void *)(v68 + 32), a2, a3, a4);
          }
          else
          {
            LOBYTE(PrimitiveSizeInBits) = 0;
          }
          char v79 = 1;
        }
        if (v91 >= 0x41 && v90) {
          MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
        }
        if (v89 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        if ((v79 & 1) == 0) {
          goto LABEL_169;
        }
        return PrimitiveSizeInBits & 1;
      case '6':
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
          uint64_t v11 = **(void **)(v11 + 16);
        }
        unsigned int v31 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        unsigned int v32 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          unsigned int v32 = **(llvm::Type ***)(a2 + 16);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v32);
        int v33 = *(_DWORD *)(v7 + 20);
        if ((v33 & 0x40000000) != 0) {
          uint64_t v34 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v34 = v7 - 32 * (v33 & 0x7FFFFFF);
        }
        uint64_t v51 = *(void *)(v34 + 32);
        if (!v51
          || *(unsigned __int8 *)(v51 + 16) < 0x1Cu
          || (int v52 = *(llvm::AssumptionCache **)(v34 + 32), !*(void *)(v51 + 40)))
        {
          int v52 = 0;
        }
        unint64_t v92 = (unint64_t)a3[10];
        __int16 v93 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v94 = v52;
        char v97 = 1;
        sub_1CC16089C((uint64_t *)v51, 0, (const llvm::DataLayout **)&v92, (uint64_t)&__src);
        unsigned int v87 = v31;
        if (v31 > 0x40) {
          operator new[]();
        }
        *(void *)uint64_t v86 = 0;
        if (v31 != PrimitiveSizeInBits)
        {
          if (PrimitiveSizeInBits > 0x3F) {
            llvm::APInt::setBitsSlowCase(v86, PrimitiveSizeInBits, v31);
          }
          else {
            *(void *)uint64_t v86 = 0xFFFFFFFFFFFFFFFFLL >> (PrimitiveSizeInBits - v31) << PrimitiveSizeInBits;
          }
        }
        unsigned int v53 = v89;
        LODWORD(v93) = v89;
        if (v89 > 0x40) {
          operator new[]();
        }
        unint64_t v54 = ~(unint64_t)__src;
        if (v89) {
          unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
        }
        else {
          unint64_t v55 = 0;
        }
        unint64_t v56 = v55 & v54;
        if ((v55 & v54) >= PrimitiveSizeInBits) {
          goto LABEL_138;
        }
        int v57 = *(_DWORD *)(v7 + 20);
        if ((v57 & 0x40000000) != 0) {
          unsigned int v58 = *(llvm ***)(v7 - 8);
        }
        else {
          unsigned int v58 = (llvm **)(v7 - 32 * (v57 & 0x7FFFFFF));
        }
        unsigned int PrimitiveSizeInBits = llvm::MaskedValueIsZero(*v58, (const llvm::Value *)v86, a3[10], 0, a3[7], a4, a3[9], (const llvm::DominatorTree *)1, v86[0]);
        if (v53 >= 0x41 && v56) {
          MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
        }
        if (PrimitiveSizeInBits)
        {
          int v77 = *(_DWORD *)(v7 + 20);
          if ((v77 & 0x40000000) != 0) {
            int v78 = *(void **)(v7 - 8);
          }
          else {
            int v78 = (void *)(v7 - 32 * (v77 & 0x7FFFFFF));
          }
          if (sub_1CCA3D55C(*v78, a2, a3, a4))
          {
            int v82 = *(_DWORD *)(v7 + 20);
            if ((v82 & 0x40000000) != 0) {
              uint64_t v83 = *(void *)(v7 - 8);
            }
            else {
              uint64_t v83 = v7 - 32 * (v82 & 0x7FFFFFF);
            }
            LOBYTE(PrimitiveSizeInBits) = sub_1CCA3D55C(*(void *)(v83 + 32), a2, a3, a4);
            char v76 = 0;
          }
          else
          {
            char v76 = 0;
            LOBYTE(PrimitiveSizeInBits) = 0;
          }
        }
        else
        {
LABEL_138:
          char v76 = 1;
        }
        if (v87 >= 0x41 && *(void *)v86) {
          MEMORY[0x1D25D9CB0](*(void *)v86, 0x1000C8000313F17);
        }
        goto LABEL_166;
      case '7':
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
          uint64_t v11 = **(void **)(v11 + 16);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        int v27 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          int v27 = **(llvm::Type ***)(a2 + 16);
        }
        unsigned int v28 = llvm::Type::getPrimitiveSizeInBits(v27);
        int v29 = *(_DWORD *)(v7 + 20);
        if ((v29 & 0x40000000) != 0) {
          uint64_t v30 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v30 = v7 - 32 * (v29 & 0x7FFFFFF);
        }
        uint64_t v43 = *(void *)(v30 + 32);
        if (!v43
          || *(unsigned __int8 *)(v43 + 16) < 0x1Cu
          || (unsigned int v44 = *(llvm::AssumptionCache **)(v30 + 32), !*(void *)(v43 + 40)))
        {
          unsigned int v44 = 0;
        }
        unint64_t v92 = (unint64_t)a3[10];
        __int16 v93 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v94 = v44;
        char v97 = 1;
        sub_1CC16089C((uint64_t *)v43, 0, (const llvm::DataLayout **)&v92, (uint64_t)&__src);
        unsigned int v45 = v89;
        LODWORD(v93) = v89;
        if (v89 > 0x40) {
          operator new[]();
        }
        unint64_t v46 = ~(unint64_t)__src;
        if (v89) {
          unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
        }
        else {
          unint64_t v47 = 0;
        }
        unint64_t v48 = v47 & v46;
        if ((v47 & v46) >= v28) {
          goto LABEL_130;
        }
        int v49 = *(_DWORD *)(v7 + 20);
        if ((v49 & 0x40000000) != 0) {
          uint64_t v50 = *(uint64_t **)(v7 - 8);
        }
        else {
          uint64_t v50 = (uint64_t *)(v7 - 32 * (v49 & 0x7FFFFFF));
        }
        uint64_t v69 = *v50;
        uint64_t v70 = a3[7];
        unint64_t v71 = a3[9];
        if (!a4 || (uint64_t v72 = a4, !*((void *)a4 + 5)))
        {
          BOOL v84 = v69 && *(unsigned __int8 *)(v69 + 16) >= 0x1Cu;
          if (!v84 || (uint64_t v72 = (llvm::AssumptionCache *)v69, !*(void *)(v69 + 40))) {
            uint64_t v72 = 0;
          }
        }
        unsigned int v73 = PrimitiveSizeInBits - v28;
        unint64_t v92 = (unint64_t)a3[10];
        __int16 v93 = v70;
        uint64_t v94 = v72;
        uint64_t v95 = v71;
        uint64_t v96 = 0;
        char v97 = 1;
        unsigned int PrimitiveSizeInBits = sub_1CC162D6C((llvm::Constant *)v69, 0, (uint64_t)&v92);
        if (v45 >= 0x41 && v48) {
          MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
        }
        if (v73 >= PrimitiveSizeInBits)
        {
LABEL_130:
          char v76 = 1;
        }
        else
        {
          int v74 = *(_DWORD *)(v7 + 20);
          if ((v74 & 0x40000000) != 0) {
            unsigned int v75 = *(void **)(v7 - 8);
          }
          else {
            unsigned int v75 = (void *)(v7 - 32 * (v74 & 0x7FFFFFF));
          }
          if (sub_1CCA3D55C(*v75, a2, a3, a4))
          {
            int v80 = *(_DWORD *)(v7 + 20);
            if ((v80 & 0x40000000) != 0) {
              uint64_t v81 = *(void *)(v7 - 8);
            }
            else {
              uint64_t v81 = v7 - 32 * (v80 & 0x7FFFFFF);
            }
            LOBYTE(PrimitiveSizeInBits) = sub_1CCA3D55C(*(void *)(v81 + 32), a2, a3, a4);
            char v76 = 0;
          }
          else
          {
            char v76 = 0;
            LOBYTE(PrimitiveSizeInBits) = 0;
          }
        }
LABEL_166:
        if (v91 >= 0x41 && v90) {
          MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
        }
        if (v89 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        if (v76) {
          goto LABEL_169;
        }
        return PrimitiveSizeInBits & 1;
      case 'B':
      case 'C':
      case 'D':
        return PrimitiveSizeInBits & 1;
      default:
        if (v9 == 85)
        {
          if (!sub_1CCA3D55C(*(void *)(v7 - 64), a2, a3, a4)) {
            goto LABEL_169;
          }
          char v16 = (uint64_t *)(v7 - 32);
LABEL_16:
          uint64_t v7 = *v16;
          if (sub_1CCA474C8(*v16, a2)) {
            goto LABEL_2;
          }
          continue;
        }
        if (v9 != 83)
        {
LABEL_169:
          LOBYTE(PrimitiveSizeInBits) = 0;
          return PrimitiveSizeInBits & 1;
        }
        int v21 = *(_DWORD *)(v7 + 20);
        if ((v21 & 0x40000000) != 0)
        {
          uint64_t v23 = *(uint64_t **)(v7 - 8);
          uint64_t v22 = v21 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v22 = v21 & 0x7FFFFFF;
          uint64_t v23 = (uint64_t *)(v7 - 32 * v22);
        }
        if (!v22) {
          goto LABEL_2;
        }
        uint64_t v61 = 32 * v22 - 32;
        do
        {
          uint64_t v62 = *v23;
          v23 += 4;
          int v63 = sub_1CCA3D55C(v62, a2, a3, a4);
          LOBYTE(PrimitiveSizeInBits) = v63;
          if (v63) {
            BOOL v64 = v61 == 0;
          }
          else {
            BOOL v64 = 1;
          }
          v61 -= 32;
        }
        while (!v64);
        return PrimitiveSizeInBits & 1;
    }
  }
}

llvm::InsertElementInst *sub_1CCA3E2A8(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t result = 0;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 - 4);
  if (v4 && *(unsigned char *)(v4 + 16) == 90)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (!v5 || *(void *)(v5 + 8)) {
      return 0;
    }
    uint64_t v7 = *(llvm::UndefValue **)a1;
    uint64_t v8 = *(void *)a1;
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
      uint64_t v8 = **((void **)v7 + 2);
    }
    int v9 = a1[16];
    uint64_t v10 = *(llvm::Type **)(v4 - 96);
    uint64_t v11 = *(unsigned __int8 **)(v4 - 64);
    int v12 = *(llvm::Value **)(v4 - 32);
    unsigned int v13 = (*((unsigned char *)v10 + 16) - 11);
    if (v13 >= 2)
    {
      if (v13 < 0xFD) {
        return 0;
      }
      int v29 = (char *)v33;
      uint64_t v30 = (char *)v33;
      uint64_t v31 = 8;
      int v32 = 0;
      uint64_t v34 = v36;
      uint64_t v35 = 0x800000000;
      v28[0] = (llvm::SmallPtrSetImplBase *)&v29;
      v28[1] = (llvm::SmallPtrSetImplBase *)&v34;
      BOOL v14 = 0;
      if (sub_1CC04C108(v28, (uint64_t)v10))
      {
        do
        {
          BOOL v14 = v35 == 0;
          if (!v35) {
            break;
          }
          uint64_t v27 = *((void *)v34 + v35 - 1);
          LODWORD(v35) = v35 - 1;
        }
        while ((sub_1CC04C108(v28, v27) & 1) != 0);
      }
      if (v34 != v36) {
        free(v34);
      }
      if (v30 == v29)
      {
        if (!v14) {
          return 0;
        }
      }
      else
      {
        free(v30);
        if (!v14) {
          return 0;
        }
      }
    }
    uint64_t v15 = llvm::UndefValue::get(v7, v10);
    v36[8] = 257;
    if (*(void *)v11 != v8)
    {
      if (v11[16] <= 0x14u)
      {
        uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void, unsigned __int8 *, uint64_t))(*(void *)a2[9] + 224))(a2[9], (v9 - 28), v11, v8);
        if (v11) {
          BOOL v19 = v11[16] >= 0x1Cu;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v11, &v34, a2[6], a2[7]);
          uint64_t v24 = *((unsigned int *)a2 + 2);
          if (v24)
          {
            uint64_t v25 = *a2;
            uint64_t v26 = v25 + 16 * v24;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
              v25 += 16;
            }
            while (v25 != v26);
          }
        }
      }
      else
      {
        v33[0] = 257;
        uint64_t v11 = (unsigned __int8 *)llvm::CastInst::Create(v9 - 28, (uint64_t)v11, v8, (const char **)&v29, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v11, &v34, a2[6], a2[7]);
        uint64_t v16 = *((unsigned int *)a2 + 2);
        if (v16)
        {
          uint64_t v17 = *a2;
          uint64_t v18 = v17 + 16 * v16;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v11, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
            v17 += 16;
          }
          while (v17 != v18);
        }
      }
    }
    v33[0] = 257;
    unsigned int v20 = operator new(0xA0uLL);
    uint64_t v21 = 0;
    uint64_t v22 = (llvm::InsertElementInst *)(v20 + 24);
    v20[29] = v20[29] & 0x38000000 | 3;
    do
    {
      uint64_t v23 = &v20[v21];
      *uint64_t v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      v23[3] = v22;
      v21 += 8;
    }
    while (v21 != 24);
    return llvm::InsertElementInst::InsertElementInst(v22, v15, (llvm::Value *)v11, v12, (const char **)&v29, 0);
  }
  return result;
}

llvm::UndefValue **sub_1CCA3E600(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(unsigned __int8 **)(a2 - 32);
  int v193 = 0;
  unint64_t v194 = (unint64_t)&v193;
  uint64_t v195 = 0;
  if (!sub_1CBF528D8((uint64_t)&v194, v7)) {
    goto LABEL_118;
  }
  __int16 v8 = *(_WORD *)(a2 + 18);
  if ((v8 & 0x3F) == 0x26)
  {
    int v3 = (int8x8_t **)v193;
    unsigned int v11 = *((_DWORD *)v193 + 2);
    if (!v11) {
      goto LABEL_22;
    }
    if (v11 > 0x40)
    {
      int v32 = llvm::APInt::countTrailingOnesSlowCase(v193);
      LODWORD(v9) = v11;
      if (v32 == v11) {
        goto LABEL_22;
      }
      goto LABEL_32;
    }
    uint64_t v10 = *(const void **)v193;
    if (*(void *)v193 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v11) {
      goto LABEL_22;
    }
LABEL_13:
    if (!v10) {
      goto LABEL_41;
    }
    goto LABEL_14;
  }
  if ((v8 & 0x3F) != 0x28)
  {
    int v3 = (int8x8_t **)v193;
    LODWORD(v9) = *((_DWORD *)v193 + 2);
    if (v9 > 0x40) {
      goto LABEL_32;
    }
    uint64_t v10 = *(const void **)v193;
    goto LABEL_13;
  }
  int v3 = (int8x8_t **)v193;
  uint64_t v9 = *((unsigned int *)v193 + 2);
  if (v9 <= 0x40)
  {
    uint64_t v10 = *(const void **)v193;
    if (!*(void *)v193) {
      goto LABEL_22;
    }
LABEL_14:
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] != 1) {
      goto LABEL_118;
    }
    goto LABEL_41;
  }
  int v13 = 0;
  int64_t v14 = (unint64_t)(v9 + 63) >> 6;
  do
  {
    BOOL v15 = v14-- < 1;
    if (v15) {
      break;
    }
    unint64_t v16 = *(void *)(*(void *)v193 + 8 * v14);
    v13 += __clz(v16);
  }
  while (!v16);
  int v17 = v9 | 0xFFFFFFC0;
  if ((v9 & 0x3F) == 0) {
    int v17 = 0;
  }
  if (v13 + v17 == v9)
  {
LABEL_22:
    uint64_t v18 = *(unsigned char **)(a2 - 64);
    BOOL v19 = *(llvm::ConstantInt **)v18;
    unsigned int v20 = *(llvm::Type **)v18;
    if ((*(_DWORD *)(*(void *)v18 + 8) & 0xFE) == 0x12) {
      unsigned int v20 = (llvm::Type *)**((void **)v19 + 2);
    }
    int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v20);
    uint64_t v22 = llvm::ConstantInt::get(v19, (PrimitiveSizeInBits - 1), 0);
    uint64_t v23 = a1[3];
    if ((v18[23] & 0x10) == 0)
    {
      unint64_t v55 = 0;
      unint64_t v54 = (const llvm::DataLayout *)&byte_1CFBCE98E;
LABEL_52:
      LOWORD(v198) = 773;
      unint64_t v194 = (unint64_t)v54;
      uint64_t v195 = v55;
      uint64_t v196 = ".lobit";
      unsigned int v58 = sub_1CC2429AC(v23, (uint64_t)v18, (uint64_t)v22, (uint64_t)&v194, 0);
      int v59 = *(llvm::ConstantInt **)a3;
      if (*(void *)v58 != *(void *)a3)
      {
        uint64_t v60 = a1[3];
        LOWORD(v198) = 257;
        unsigned int v58 = sub_1CBF56614(v60, v58, (llvm::Type ***)v59, 0, (uint64_t)&v194, v57);
      }
      if ((*(_WORD *)(a2 + 18) & 0x3F) != 0x26) {
        goto LABEL_81;
      }
      uint64_t v61 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v58, 1uLL, 0);
      uint64_t v62 = a1[3];
      if ((*((unsigned char *)v58 + 23) & 0x10) == 0)
      {
        int v82 = 0;
        uint64_t v81 = (const llvm::DataLayout *)&byte_1CFBCE98E;
        goto LABEL_80;
      }
      uint64_t v63 = ***(void ***)v58;
      uint64_t v64 = *(void *)(v63 + 152);
      uint64_t v65 = *(unsigned int *)(v63 + 168);
      if (v65)
      {
        LODWORD(v66) = (v65 - 1) & ((v58 >> 4) ^ (v58 >> 9));
        int v67 = (llvm::Instruction **)(v64 + 16 * v66);
        uint64_t v68 = *v67;
        if (*v67 == v58)
        {
LABEL_79:
          int v80 = (uint64_t **)v67[1];
          uint64_t v83 = *v80;
          uint64_t v81 = (const llvm::DataLayout *)(v80 + 2);
          int v82 = v83;
LABEL_80:
          LOWORD(v198) = 773;
          unint64_t v194 = (unint64_t)v81;
          uint64_t v195 = v82;
          uint64_t v196 = ".not";
          unsigned int v58 = sub_1CC2428C0(v62, (uint64_t)v58, (uint64_t)v61, (uint64_t)&v194);
LABEL_81:
          uint64_t v84 = (uint64_t)a1;
          uint64_t v85 = (llvm::ValueAsMetadata *)a3;
          uint64_t v86 = v58;
          return sub_1CC9D3C84(v84, v85, v86);
        }
        int v69 = 1;
        while (v68 != (llvm::Instruction *)-4096)
        {
          int v70 = v66 + v69++;
          uint64_t v66 = v70 & (v65 - 1);
          uint64_t v68 = *(llvm::Instruction **)(v64 + 16 * v66);
          if (v68 == v58)
          {
            int v67 = (llvm::Instruction **)(v64 + 16 * v66);
            goto LABEL_79;
          }
        }
      }
      int v67 = (llvm::Instruction **)(v64 + 16 * v65);
      goto LABEL_79;
    }
    uint64_t v24 = ***(void ***)v18;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      unsigned int v28 = (void *)(v25 + 16 * v27);
      int v29 = (unsigned char *)*v28;
      if ((unsigned char *)*v28 == v18)
      {
LABEL_51:
        unsigned int v53 = (uint64_t **)v28[1];
        unint64_t v56 = *v53;
        unint64_t v54 = (const llvm::DataLayout *)(v53 + 2);
        unint64_t v55 = v56;
        goto LABEL_52;
      }
      int v30 = 1;
      while (v29 != (unsigned char *)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        int v29 = *(unsigned char **)(v25 + 16 * v27);
        if (v29 == v18)
        {
          unsigned int v28 = (void *)(v25 + 16 * v27);
          goto LABEL_51;
        }
      }
    }
    unsigned int v28 = (void *)(v25 + 16 * v26);
    goto LABEL_51;
  }
LABEL_32:
  int v33 = 0;
  unint64_t v34 = ((unint64_t)v9 + 63) >> 6;
  uint64_t v35 = v34;
  do
  {
    BOOL v15 = v35-- < 1;
    if (v15) {
      break;
    }
    unint64_t v36 = (unint64_t)(*v3)[v35];
    v33 += __clz(v36);
  }
  while (!v36);
  int v37 = v9 | 0xFFFFFFC0;
  if ((v9 & 0x3F) == 0) {
    int v37 = 0;
  }
  if (v33 + v37 != v9)
  {
    int v38 = 0;
    uint64_t v39 = *v3;
    do
    {
      int8x8_t v40 = *v39++;
      uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
      v41.i16[0] = vaddlv_u8(v41);
      v38 += v41.i32[0];
      --v34;
    }
    while (v34);
    if (v38 != 1) {
      goto LABEL_118;
    }
  }
LABEL_41:
  if ((v8 & 0x3E) != 0x20) {
    goto LABEL_118;
  }
  uint64_t v42 = *(void *)(a2 - 64);
  uint64_t v43 = (uint64_t *)a1[7];
  uint64_t v44 = a1[9];
  unsigned int v45 = (char *)a3;
  if (!*(void *)(a3 + 40))
  {
    if (!v42 || *(unsigned __int8 *)(v42 + 16) < 0x1Cu || (unsigned int v45 = *(char **)(a2 - 64), !*(void *)(v42 + 40))) {
      unsigned int v45 = 0;
    }
  }
  unint64_t v194 = a1[10];
  uint64_t v195 = v43;
  uint64_t v196 = v45;
  uint64_t v197 = v44;
  uint64_t v198 = 0;
  char v199 = 1;
  sub_1CC16089C((uint64_t *)v42, 0, (const llvm::DataLayout **)&v194, (uint64_t)&__src);
  unsigned int v47 = v190;
  unsigned int v188 = v190;
  if (v190 > 0x40) {
    operator new[]();
  }
  unint64_t v48 = ~(unint64_t)__src;
  unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v190;
  if (!v190) {
    unint64_t v49 = 0;
  }
  uint64_t v50 = (const void *)(v49 & v48);
  v187[1] = v49 & v48;
  unsigned int v188 = 0;
  uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
  v51.i16[0] = vaddlv_u8(v51);
  if (v51.u32[0] != 1)
  {
    char v52 = 0;
    goto LABEL_115;
  }
  int v71 = *(_WORD *)(a2 + 18) & 0x3F;
  uint64_t v72 = v193;
  uint64_t v73 = *((unsigned int *)v193 + 2);
  if (v73 > 0x40)
  {
    int v75 = 0;
    int64_t v76 = (unint64_t)(v73 + 63) >> 6;
    do
    {
      BOOL v15 = v76-- < 1;
      if (v15) {
        break;
      }
      unint64_t v77 = *(void *)(*(void *)v193 + 8 * v76);
      v75 += __clz(v77);
    }
    while (!v77);
    int v78 = v73 | 0xFFFFFFC0;
    if ((v73 & 0x3F) == 0) {
      int v78 = 0;
    }
    if (v75 + v78 != v73 && memcmp(*(const void **)v193, v50, ((unint64_t)(v73 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_76;
    }
  }
  else
  {
    if (*(void *)v193) {
      BOOL v74 = *(void *)v193 == (void)v50;
    }
    else {
      BOOL v74 = 1;
    }
    if (!v74)
    {
LABEL_76:
      char v79 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a3, v71 == 33, 0);
      goto LABEL_110;
    }
  }
  int v87 = ~(v47 + __clz((unint64_t)v50) - 64);
  uint64_t v88 = *(llvm::Instruction **)(a2 - 64);
  if (v47 + v87)
  {
    uint64_t v73 = a1[3];
    unsigned int v89 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v88, v47 + v87, 0);
    if ((*((unsigned char *)v88 + 23) & 0x10) == 0)
    {
      uint64_t v100 = 0;
      int v99 = (const llvm::DataLayout *)&byte_1CFBCE98E;
      goto LABEL_94;
    }
    uint64_t v90 = ***(void ***)v88;
    uint64_t v91 = *(void *)(v90 + 152);
    uint64_t v92 = *(unsigned int *)(v90 + 168);
    if (v92)
    {
      LODWORD(v93) = (v92 - 1) & ((v88 >> 4) ^ (v88 >> 9));
      uint64_t v94 = (llvm::Instruction **)(v91 + 16 * v93);
      uint64_t v95 = *v94;
      if (*v94 == v88)
      {
LABEL_93:
        uint64_t v98 = (uint64_t **)v94[1];
        int v101 = *v98;
        int v99 = (const llvm::DataLayout *)(v98 + 2);
        uint64_t v100 = v101;
LABEL_94:
        LOWORD(v198) = 773;
        unint64_t v194 = (unint64_t)v99;
        uint64_t v195 = v100;
        uint64_t v196 = ".lobit";
        uint64_t v88 = sub_1CC2429AC(v73, (uint64_t)v88, (uint64_t)v89, (uint64_t)&v194, 0);
        uint64_t v72 = v193;
        LODWORD(v73) = *((_DWORD *)v193 + 2);
        goto LABEL_95;
      }
      int v96 = 1;
      while (v95 != (llvm::Instruction *)-4096)
      {
        int v97 = v93 + v96++;
        uint64_t v93 = v97 & (v92 - 1);
        uint64_t v95 = *(llvm::Instruction **)(v91 + 16 * v93);
        if (v95 == v88)
        {
          uint64_t v94 = (llvm::Instruction **)(v91 + 16 * v93);
          goto LABEL_93;
        }
      }
    }
    uint64_t v94 = (llvm::Instruction **)(v91 + 16 * v92);
    goto LABEL_93;
  }
LABEL_95:
  if (v73 > 0x40)
  {
    int v103 = 0;
    int64_t v104 = ((unint64_t)v73 + 63) >> 6;
    do
    {
      BOOL v15 = v104-- < 1;
      if (v15) {
        break;
      }
      unint64_t v105 = *(void *)(*(void *)v72 + 8 * v104);
      v103 += __clz(v105);
    }
    while (!v105);
    int v106 = v73 | 0xFFFFFFC0;
    if ((v73 & 0x3F) == 0) {
      int v106 = 0;
    }
    BOOL v102 = v103 + v106 == v73;
  }
  else
  {
    BOOL v102 = *(void *)v72 == 0;
  }
  int v107 = v102;
  if ((v71 == 33) != v107)
  {
    uint64_t v108 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v88, 1uLL, 0);
    uint64_t v109 = a1[3];
    LOWORD(v198) = 257;
    uint64_t v88 = sub_1CC2428C0(v109, (uint64_t)v88, (uint64_t)v108, (uint64_t)&v194);
  }
  unsigned int v110 = *(llvm::ConstantInt **)a3;
  if (*(void *)a3 == *(void *)v88)
  {
    uint64_t v113 = (uint64_t)a1;
    uint64_t v114 = (llvm::ValueAsMetadata *)a3;
    uint64_t v112 = v88;
    goto LABEL_112;
  }
  uint64_t v111 = a1[3];
  LOWORD(v198) = 257;
  char v79 = sub_1CBF56614(v111, v88, (llvm::Type ***)v110, 0, (uint64_t)&v194, v46);
LABEL_110:
  uint64_t v112 = v79;
  uint64_t v113 = (uint64_t)a1;
  uint64_t v114 = (llvm::ValueAsMetadata *)a3;
LABEL_112:
  int v3 = (int8x8_t **)sub_1CC9D3C84(v113, v114, v112);
  char v52 = 1;
  if (v47 >= 0x41 && v50) {
    MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
  }
LABEL_115:
  if (v192 >= 0x41 && __s1) {
    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
  }
  if (v190 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v52) {
    return (llvm::UndefValue **)v3;
  }
LABEL_118:
  if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20 || *(void *)a3 != **(void **)(a2 - 64)) {
    return 0;
  }
  uint64_t v186 = 0;
  v187[0] = 0;
  uint64_t v116 = *(void *)(a2 + 8);
  if (!v116) {
    goto LABEL_127;
  }
  if (*(void *)(v116 + 8)) {
    goto LABEL_127;
  }
  if (!sub_1CBF535C4((uint64_t)&__src, *(llvm::Constant **)(a2 - 32))) {
    goto LABEL_127;
  }
  uint64_t v117 = *(void *)(a2 - 64);
  uint64_t v195 = &v186;
  uint64_t v196 = (char *)v187;
  uint64_t v118 = *(void *)(v117 + 8);
  if (!v118 || *(void *)(v118 + 8)) {
    goto LABEL_127;
  }
  int v136 = *(unsigned __int8 *)(v117 + 16);
  if (v136 == 5)
  {
    if (*(_WORD *)(v117 + 18) != 28) {
      goto LABEL_127;
    }
    uint64_t v161 = *(void *)(v117 - 32 * (*(_DWORD *)(v117 + 20) & 0x7FFFFFF));
    int v162 = *(unsigned __int8 *)(v161 + 16);
    if (v162 == 5)
    {
      if (*(_WORD *)(v161 + 18) != 25) {
        goto LABEL_224;
      }
      if (!sub_1CBF5270C((uint64_t)&v194, *(llvm::Constant **)(v161 - 32 * (*(_DWORD *)(v161 + 20) & 0x7FFFFFF))))goto LABEL_224; {
      uint64_t v163 = *(void *)(v161 - 32 * (*(_DWORD *)(v161 + 20) & 0x7FFFFFF) + 32);
      }
      if (!v163) {
        goto LABEL_224;
      }
    }
    else
    {
      if (v162 != 53) {
        goto LABEL_224;
      }
      if (!sub_1CBF5250C((uint64_t)&v194, *(llvm::Constant **)(v161 - 64))) {
        goto LABEL_224;
      }
      uint64_t v163 = *(void *)(v161 - 32);
      if (!v163) {
        goto LABEL_224;
      }
    }
    *uint64_t v195 = v163;
    uint64_t v164 = *(void *)(v117 - 32 * (*(_DWORD *)(v117 + 20) & 0x7FFFFFF) + 32);
    if (v164) {
      goto LABEL_233;
    }
LABEL_224:
    uint64_t v168 = *(void *)(v117 - 32 * (*(_DWORD *)(v117 + 20) & 0x7FFFFFF) + 32);
    int v169 = *(unsigned __int8 *)(v168 + 16);
    if (v169 == 5)
    {
      if (*(_WORD *)(v168 + 18) != 25) {
        goto LABEL_127;
      }
      if (!sub_1CBF5270C((uint64_t)&v194, *(llvm::Constant **)(v168 - 32 * (*(_DWORD *)(v168 + 20) & 0x7FFFFFF))))goto LABEL_127; {
      uint64_t v170 = *(void *)(v168 - 32 * (*(_DWORD *)(v168 + 20) & 0x7FFFFFF) + 32);
      }
      if (!v170) {
        goto LABEL_127;
      }
    }
    else
    {
      if (v169 != 53) {
        goto LABEL_127;
      }
      if (!sub_1CBF5250C((uint64_t)&v194, *(llvm::Constant **)(v168 - 64))) {
        goto LABEL_127;
      }
      uint64_t v170 = *(void *)(v168 - 32);
      if (!v170) {
        goto LABEL_127;
      }
    }
    *uint64_t v195 = v170;
    uint64_t v164 = *(void *)(v117 - 32 * (*(_DWORD *)(v117 + 20) & 0x7FFFFFF));
    if (!v164) {
      goto LABEL_127;
    }
LABEL_233:
    *(void *)uint64_t v196 = v164;
    unsigned int v171 = (llvm::Instruction *)v187[0];
    if ((*(_WORD *)(a2 + 18) & 0x3F) == 0x20)
    {
      uint64_t v172 = a1[3];
      LOWORD(v198) = 257;
      unsigned int v171 = sub_1CC2427E8(v172, v187[0], (uint64_t)&v194, v139);
      v187[0] = (uint64_t)v171;
    }
    uint64_t v173 = a1[3];
    LOWORD(v198) = 257;
    char v174 = sub_1CC2429AC(v173, (uint64_t)v171, v186, (uint64_t)&v194, 0);
    uint64_t v175 = a1[3];
    uint64_t v176 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v187[0], 1uLL, 0);
    LOWORD(v198) = 257;
    uint64_t v86 = sub_1CBF52474(v175, v174, (uint64_t)v176, (uint64_t)&v194);
    uint64_t v84 = (uint64_t)a1;
    uint64_t v85 = (llvm::ValueAsMetadata *)a3;
    return sub_1CC9D3C84(v84, v85, v86);
  }
  if (v136 != 56) {
    goto LABEL_127;
  }
  uint64_t v137 = *(void *)(v117 - 64);
  int v138 = *(unsigned __int8 *)(v137 + 16);
  if (v138 == 5)
  {
    if (*(_WORD *)(v137 + 18) != 25) {
      goto LABEL_210;
    }
    if (!sub_1CBF5270C((uint64_t)&v194, *(llvm::Constant **)(v137 - 32 * (*(_DWORD *)(v137 + 20) & 0x7FFFFFF))))goto LABEL_210; {
    uint64_t v140 = *(void *)(v137 - 32 * (*(_DWORD *)(v137 + 20) & 0x7FFFFFF) + 32);
    }
    if (!v140) {
      goto LABEL_210;
    }
LABEL_209:
    *uint64_t v195 = v140;
    uint64_t v164 = *(void *)(v117 - 32);
    if (v164) {
      goto LABEL_233;
    }
    goto LABEL_210;
  }
  if (v138 == 53)
  {
    if (sub_1CBF5250C((uint64_t)&v194, *(llvm::Constant **)(v137 - 64)))
    {
      uint64_t v140 = *(void *)(v137 - 32);
      if (v140) {
        goto LABEL_209;
      }
    }
  }
LABEL_210:
  uint64_t v165 = *(void *)(v117 - 32);
  int v166 = *(unsigned __int8 *)(v165 + 16);
  if (v166 != 5)
  {
    if (v166 != 53) {
      goto LABEL_127;
    }
    if (!sub_1CBF5250C((uint64_t)&v194, *(llvm::Constant **)(v165 - 64))) {
      goto LABEL_127;
    }
    uint64_t v167 = *(void *)(v165 - 32);
    if (!v167) {
      goto LABEL_127;
    }
    goto LABEL_218;
  }
  if (*(_WORD *)(v165 + 18) == 25)
  {
    if (sub_1CBF5270C((uint64_t)&v194, *(llvm::Constant **)(v165 - 32 * (*(_DWORD *)(v165 + 20) & 0x7FFFFFF))))
    {
      uint64_t v167 = *(void *)(v165 - 32 * (*(_DWORD *)(v165 + 20) & 0x7FFFFFF) + 32);
      if (v167)
      {
LABEL_218:
        *uint64_t v195 = v167;
        uint64_t v164 = *(void *)(v117 - 64);
        if (!v164) {
          goto LABEL_127;
        }
        goto LABEL_233;
      }
    }
  }
LABEL_127:
  int v119 = *(llvm::ConstantInt **)a3;
  if (!*(void *)a3 || *((unsigned char *)v119 + 8) != 13) {
    return 0;
  }
  uint64_t v120 = *(void *)(a2 - 64);
  uint64_t v121 = *(void *)(a2 - 32);
  unsigned int v122 = (uint64_t *)a1[7];
  uint64_t v123 = a1[9];
  uint64_t v124 = (char *)a3;
  if (!*(void *)(a3 + 40))
  {
    if (!v120 || *(unsigned __int8 *)(v120 + 16) < 0x1Cu || (uint64_t v124 = *(char **)(a2 - 64), !*(void *)(v120 + 40))) {
      uint64_t v124 = 0;
    }
  }
  unint64_t v194 = a1[10];
  uint64_t v195 = v122;
  uint64_t v196 = v124;
  uint64_t v197 = v123;
  uint64_t v198 = 0;
  char v199 = 1;
  sub_1CC16089C((uint64_t *)v120, 0, (const llvm::DataLayout **)&v194, (uint64_t)&__src);
  unsigned int v125 = (uint64_t *)a1[7];
  uint64_t v126 = a1[9];
  uint64_t v127 = (char *)a3;
  if (!*(void *)(a3 + 40))
  {
    if (!v121 || *(unsigned __int8 *)(v121 + 16) < 0x1Cu || (uint64_t v127 = (char *)v121, !*(void *)(v121 + 40))) {
      uint64_t v127 = 0;
    }
  }
  unint64_t v194 = a1[10];
  uint64_t v195 = v125;
  uint64_t v196 = v127;
  uint64_t v197 = v126;
  uint64_t v198 = 0;
  char v199 = 1;
  sub_1CC16089C((uint64_t *)v121, 0, (const llvm::DataLayout **)&v194, (uint64_t)&__s2);
  unsigned int v128 = v190;
  if (v190 > 0x40)
  {
    unint64_t v129 = (unint64_t)__src;
    if (memcmp(__src, __s2, (((unint64_t)v190 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_179;
    }
  }
  else
  {
    unint64_t v129 = (unint64_t)__src;
    if (__src != __s2) {
      goto LABEL_179;
    }
  }
  if (v192 > 0x40)
  {
    unint64_t v130 = (unint64_t)__s1;
    if (!memcmp(__s1, v184, (((unint64_t)v192 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_139;
    }
LABEL_179:
    char v160 = 1;
    goto LABEL_180;
  }
  unint64_t v130 = (unint64_t)__s1;
  if (__s1 != v184) {
    goto LABEL_179;
  }
LABEL_139:
  if (v128 >= 0x41) {
    operator new[]();
  }
  unint64_t v131 = v130 | v129;
  if (v128) {
    unint64_t v132 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v128;
  }
  else {
    unint64_t v132 = 0;
  }
  unsigned int v181 = v128;
  unint64_t v180 = v132 & ~v131;
  unsigned int v133 = v128;
  uint8x8_t v134 = (uint8x8_t)vcnt_s8((int8x8_t)v180);
  v134.i16[0] = vaddlv_u8(v134);
  __int32 v135 = v134.i32[0];
  if (v134.i32[0] == 1)
  {
    uint64_t v141 = a1[3];
    LOWORD(v198) = 257;
    uint64_t v143 = sub_1CC2428C0(v141, v120, v121, (uint64_t)&v194);
    if (v192 > 0x40)
    {
      unint64_t v177 = (((unint64_t)v192 + 63) >> 3) & 0x3FFFFFF8;
      while (v177)
      {
        unint64_t v178 = *(void *)((char *)__s1 + v177 - 8);
        unint64_t v179 = *(void *)(v180 - 8 + v177);
        v177 -= 8;
        if (v178 != v179)
        {
          if (v178 <= v179) {
            goto LABEL_157;
          }
          break;
        }
      }
    }
    else if ((unint64_t)__s1 < v180)
    {
LABEL_157:
      uint64_t v146 = a1[3];
      if (v181 > 0x40)
      {
        unsigned int v148 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v180);
      }
      else
      {
        unsigned int v147 = __clz(__rbit64(v180));
        if (v181 >= v147) {
          unsigned int v148 = v147;
        }
        else {
          unsigned int v148 = v181;
        }
      }
      unint64_t v149 = *(llvm::ConstantInt **)v119;
      unsigned int v150 = *((_DWORD *)v119 + 2);
      LODWORD(v195) = v150 >> 8;
      if (v150 >> 8 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v194);
      }
      if (v150 <= 0xFF) {
        int v151 = 0;
      }
      else {
        int v151 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v150);
      }
      unint64_t v194 = v151 & v148;
      unsigned int v152 = llvm::ConstantInt::get(v149, (llvm::LLVMContext *)&v194, v142);
      if (v195 >= 0x41 && v194) {
        MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
      }
      LOWORD(v198) = 257;
      uint64_t v154 = (int32x2_t ****)sub_1CC2429AC(v146, (uint64_t)v143, (uint64_t)v152, (uint64_t)&v194, 0);
      if ((*(_WORD *)(a2 + 18) & 0x3F) == 0x20)
      {
        uint64_t v155 = a1[3];
        uint8x8_t v156 = *(llvm::ConstantInt **)v119;
        unsigned int v157 = *((_DWORD *)v119 + 2);
        LODWORD(v195) = v157 >> 8;
        if (v157 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v194);
        }
        if (v157 <= 0xFF) {
          LOBYTE(v158) = 0;
        }
        else {
          unint64_t v158 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v157);
        }
        unint64_t v194 = v158 & 1;
        uint64_t v159 = llvm::ConstantInt::get(v156, (llvm::LLVMContext *)&v194, v153);
        if (v195 >= 0x41 && v194) {
          MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
        }
        LOWORD(v198) = 257;
        uint64_t v154 = (int32x2_t ****)sub_1CC2428C0(v155, (uint64_t)v154, (uint64_t)v159, (uint64_t)&v194);
      }
      llvm::Value::takeName(v154, (llvm::Value *)a2);
      int v3 = (int8x8_t **)sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)a3, (llvm::Value *)v154);
      unsigned int v133 = v181;
      goto LABEL_174;
    }
    uint64_t v144 = a1[3];
    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v119, (llvm::LLVMContext *)&v180, v142);
    if ((*((_DWORD *)v119 + 2) & 0xFE) == 0x12) {
      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v119 + 8) | ((unint64_t)(*((_DWORD *)v119 + 2) == 19) << 32)), (uint64_t)Splat);
    }
    LOWORD(v198) = 257;
    uint64_t v143 = sub_1CBF52474(v144, v143, (uint64_t)Splat, (uint64_t)&v194);
    goto LABEL_157;
  }
LABEL_174:
  if (v133 >= 0x41 && v180) {
    MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
  }
  if (v135 != 1) {
    goto LABEL_179;
  }
  char v160 = 0;
LABEL_180:
  if (v185 >= 0x41 && v184) {
    MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
  }
  if (v183 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  if (v192 >= 0x41 && __s1) {
    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
  }
  if (v190 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v160) {
    return 0;
  }
  return (llvm::UndefValue **)v3;
}

llvm::UndefValue **sub_1CCA3F824(uint64_t a1, llvm::Instruction *this, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v7 = *((void *)this + 1);
  if (v7 && !*(void *)(v7 + 8) && *(unsigned char *)(*(void *)(v7 + 24) + 16) == 66) {
    return 0;
  }
  __int16 v8 = sub_1CCA39904(a1, this, a3, a4, a5);
  if (v8) {
    return (llvm::UndefValue **)v8;
  }
  uint64_t v9 = (llvm *)*((void *)this - 4);
  uint64_t v10 = *(llvm::Type **)v9;
  uint64_t v11 = *(void *)this;
  unsigned int v117 = 0;
  if (*((unsigned char *)v10 + 8) == 13 && *(unsigned char *)(v11 + 8) == 13)
  {
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v10);
    if (v12 == 1) {
    unsigned int v15 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
    }
    if (v14 == 1) {
    if (sub_1CC9D18E0(a1, PrimitiveSizeInBits, v15)
    }
      && sub_1CCA4050C((uint64_t)v9, v11, &v117, (const llvm::DataLayout **)a1, this))
    {
      uint64_t v22 = sub_1CCA38F6C(a1, (uint64_t)v9, (llvm::Type ***)v11, 0, v19, v20);
      if (*((unsigned __int8 *)v9 + 16) >= 0x1Cu)
      {
        uint64_t v23 = (void **)*((void *)v9 + 1);
        if (v23)
        {
          if (!v23[1]) {
            llvm::replaceAllDbgUsesWith(v9, v22, this, *(llvm::Instruction **)(a1 + 72), v21);
          }
        }
      }
      if ((*((_DWORD *)v10 + 2) & 0xFE) == 0x12) {
        uint64_t v10 = (llvm::Type *)**((void **)v10 + 2);
      }
      int v24 = llvm::Type::getPrimitiveSizeInBits(v10);
      int v25 = v24;
      unsigned int v26 = v117;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
        uint64_t v11 = **(void **)(v11 + 16);
      }
      unsigned int v27 = v24 - v117;
      unsigned int v28 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
      unsigned int v29 = v28;
      LODWORD(v119) = v28;
      if (v28 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v118);
      }
      unint64_t v118 = 0;
      if (v27 != v28)
      {
        if (v27 > 0x3F) {
          llvm::APInt::setBitsSlowCase(&v118, v27, v28);
        }
        else {
          v118 |= 0xFFFFFFFFFFFFFFFFLL >> (v27 - v28) << v27;
        }
      }
      BOOL IsZero = llvm::MaskedValueIsZero(v22, (const llvm::Value *)&v118, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), this, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v110);
      if (v119 >= 0x41 && v118) {
        MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
      }
      if (IsZero)
      {
        uint64_t v32 = a1;
        int v33 = this;
        VScale = v22;
        return sub_1CC9D3C84(v32, v33, VScale);
      }
      uint64_t v66 = *(void *)v22;
      LODWORD(v119) = v29;
      if (v29 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v118);
      }
      unint64_t v118 = 0;
      if (v25 != v26)
      {
        if (v27 > 0x40)
        {
          llvm::APInt::setBitsSlowCase(&v118, 0, v25 - v26);
        }
        else
        {
          unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
          if (v119 > 0x40) {
            *(void *)v118 |= v67;
          }
          else {
            v118 |= v67;
          }
        }
      }
      Splat = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v66, (llvm::LLVMContext *)&v118, v30);
      if ((*(_DWORD *)(v66 + 8) & 0xFE) == 0x12) {
        Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v66 + 32) | ((unint64_t)(*(_DWORD *)(v66 + 8) == 19) << 32)), (uint64_t)Splat);
      }
      if (v119 >= 0x41 && v118) {
        MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
      }
      __int16 v121 = 257;
      unsigned int v47 = (const char **)&v118;
      char v48 = 28;
      unint64_t v46 = v22;
      goto LABEL_102;
    }
  }
  int v16 = *((unsigned __int8 *)v9 + 16);
  if (v16 != 66)
  {
    if (v16 == 81) {
      return sub_1CCA3E600((void *)a1, (uint64_t)v9, (uint64_t)this);
    }
LABEL_14:
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    unint64_t v118 = (unint64_t)&v112;
    int v119 = &v113;
    int v17 = (void **)*((void *)v9 + 1);
    if (v17 && !v17[1])
    {
      if (v16 == 5)
      {
        if (*((_WORD *)v9 + 9) != 28) {
          goto LABEL_43;
        }
        if (!sub_1CBC5BF18((void **)&v118, *((void *)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)))) {
          goto LABEL_43;
        }
        uint64_t v18 = (unsigned __int8 *)((void *)v9 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF))[4];
        if (!v18) {
          goto LABEL_43;
        }
      }
      else
      {
        if (v16 != 56) {
          goto LABEL_43;
        }
        if (!sub_1CBC5BF18((void **)&v118, *((void *)v9 - 8))) {
          goto LABEL_43;
        }
        uint64_t v18 = (unsigned __int8 *)*((void *)v9 - 4);
        if (!v18 || v18[16] > 0x14u) {
          goto LABEL_43;
        }
      }
      *int v119 = (llvm::detail::IEEEFloat *)v18;
      uint64_t v35 = v112;
      if (*v112 == *(llvm::Constant **)this)
      {
        uint64_t v65 = sub_1CC56C0C0((llvm *)0x27, v113, *v112, 0);
        __int16 v121 = 257;
        unsigned int v47 = (const char **)&v118;
        char v48 = 28;
        unint64_t v46 = (llvm::Instruction *)v35;
        return (llvm::UndefValue **)llvm::BinaryOperator::Create(v48, v46, (uint64_t)v65, v47, 0);
      }
    }
LABEL_43:
    unint64_t v36 = (void **)*((void *)v9 + 1);
    if (!v36 || v36[1]) {
      goto LABEL_88;
    }
    int v37 = *((unsigned __int8 *)v9 + 16);
    if (v37 == 5)
    {
      if (*((_WORD *)v9 + 9) != 30) {
        goto LABEL_88;
      }
      int8x8_t v40 = (uint64_t *)((char *)v9 - 32 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF));
      uint64_t v38 = *v40;
      if (!*v40) {
        goto LABEL_88;
      }
      uint64_t v39 = (unsigned __int8 *)v40[4];
      if (!v39) {
        goto LABEL_88;
      }
    }
    else
    {
      if (v37 != 58) {
        goto LABEL_88;
      }
      uint64_t v38 = *((void *)v9 - 8);
      if (!v38) {
        goto LABEL_88;
      }
      uint64_t v39 = (unsigned __int8 *)*((void *)v9 - 4);
      if (!v39 || v39[16] > 0x14u) {
        goto LABEL_88;
      }
    }
    uint64_t v113 = (llvm::detail::IEEEFloat *)v39;
    unint64_t v118 = (unint64_t)&v112;
    int v119 = (llvm::detail::IEEEFloat **)v39;
    uint64_t v41 = *(void *)(v38 + 8);
    if (v41 && !*(void *)(v41 + 8))
    {
      int v42 = *(unsigned __int8 *)(v38 + 16);
      if (v42 == 5)
      {
        if (*(_WORD *)(v38 + 18) == 28
          && sub_1CBC5BF18((void **)&v118, *(void *)(v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF))))
        {
          uint64_t v43 = *(llvm::detail::IEEEFloat ***)(v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF) + 32);
          goto LABEL_60;
        }
      }
      else if (v42 == 56 && sub_1CBC5BF18((void **)&v118, *(void *)(v38 - 64)))
      {
        uint64_t v43 = *(llvm::detail::IEEEFloat ***)(v38 - 32);
LABEL_60:
        if (v119 == v43 && *v112 == *(llvm::Constant **)this)
        {
          Splat = sub_1CC56C0C0((llvm *)0x27, v113, *v112, 0);
          uint64_t v45 = *(void *)(a1 + 24);
          __int16 v121 = 257;
          unint64_t v46 = sub_1CBF52474(v45, v112, (uint64_t)Splat, (uint64_t)&v118);
          __int16 v116 = 257;
          unsigned int v47 = (const char **)&FnAttribute;
          char v48 = 30;
LABEL_102:
          uint64_t v65 = Splat;
          return (llvm::UndefValue **)llvm::BinaryOperator::Create(v48, v46, (uint64_t)v65, v47, 0);
        }
      }
    }
LABEL_88:
    unint64_t v118 = *(void *)(a1 + 80);
    if (sub_1CC5E5624((llvm::DataLayout **)&v118, (uint64_t)v9))
    {
      if (llvm::Instruction::getFunction(this))
      {
        uint64_t Function = llvm::Instruction::getFunction(this);
        if (llvm::Function::hasFnAttribute(Function, 80))
        {
          uint64_t v97 = llvm::Instruction::getFunction(this);
          uint64_t FnAttribute = llvm::Function::getFnAttribute(v97, 80);
          uint64_t VScaleRangeMax = llvm::Attribute::getVScaleRangeMax((llvm::Attribute *)&FnAttribute);
          if ((VScaleRangeMax & 0xFF00000000) != 0)
          {
            unsigned int v99 = VScaleRangeMax;
            uint64_t v100 = *(llvm::Type **)v9;
            if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
              uint64_t v100 = (llvm::Type *)**((void **)v100 + 2);
            }
            if (31 - __clz(v99) < llvm::Type::getPrimitiveSizeInBits(v100))
            {
              int v101 = *(llvm::IRBuilderBase **)(a1 + 24);
              BOOL v102 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v11, 1uLL, 0);
              __int16 v121 = 257;
              VScale = llvm::IRBuilderBase::CreateVScale(v101, v102, (const llvm::Twine *)&v118);
              uint64_t v32 = a1;
              int v33 = this;
              return sub_1CC9D3C84(v32, v33, VScale);
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t v111 = *((void *)v9 - 4);
  unint64_t v49 = *(llvm::Type **)v111;
  if ((*(_DWORD *)(*(void *)v111 + 8) & 0xFE) == 0x12) {
    uint64_t v50 = (llvm::Type *)**((void **)v49 + 2);
  }
  else {
    uint64_t v50 = *(llvm::Type **)v111;
  }
  unsigned int v51 = llvm::Type::getPrimitiveSizeInBits(v50);
  char v52 = *(llvm::Type **)v9;
  if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
    char v52 = (llvm::Type *)**((void **)v52 + 2);
  }
  unsigned int v53 = llvm::Type::getPrimitiveSizeInBits(v52);
  uint64_t v54 = *(void *)this;
  unint64_t v55 = *(llvm::Type **)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    unint64_t v55 = **(llvm::Type ***)(v54 + 16);
  }
  unsigned int v56 = llvm::Type::getPrimitiveSizeInBits(v55);
  unsigned int v58 = v56;
  if (v51 < v56)
  {
    unsigned int v115 = v51;
    if (v51 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&FnAttribute);
    }
    uint64_t FnAttribute = 0;
    BOOL v74 = (void *)v111;
    if (v53)
    {
      if (v53 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&FnAttribute, 0, v53);
      }
      else
      {
        unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
        if (v115 > 0x40) {
          *(void *)FnAttribute |= v75;
        }
        else {
          FnAttribute |= v75;
        }
      }
    }
    int64_t v76 = *(llvm::Type **)v111;
    unint64_t v77 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v111, (llvm::LLVMContext *)&FnAttribute, v57);
    if ((*((_DWORD *)v76 + 2) & 0xFE) != 0x12)
    {
      uint64_t v78 = *(void *)(a1 + 24);
      if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
      {
        uint64_t v88 = 0;
        unsigned int v89 = &byte_1CFBCE98E;
        goto LABEL_135;
      }
      uint64_t v79 = ***(void ***)v9;
      uint64_t v80 = *(void *)(v79 + 152);
      uint64_t v81 = *(unsigned int *)(v79 + 168);
      if (v81)
      {
        LODWORD(v82) = (v81 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        uint64_t v83 = (llvm **)(v80 + 16 * v82);
        uint64_t v84 = *v83;
        if (*v83 == v9)
        {
LABEL_134:
          int v87 = v83[1];
          uint64_t v90 = *(llvm::detail::IEEEFloat ***)v87;
          unsigned int v89 = (char *)v87 + 16;
          uint64_t v88 = v90;
LABEL_135:
          __int16 v121 = 773;
          unint64_t v118 = (unint64_t)v89;
          int v119 = v88;
          uint64_t v120 = ".mask";
          uint64_t v91 = sub_1CBF52474(v78, v74, (uint64_t)v77, (uint64_t)&v118);
          uint64_t v92 = operator new(0x60uLL);
          uint64_t v63 = (llvm::Value *)(v92 + 8);
          v92[13] = v92[13] & 0x38000000 | 1;
          *(void *)uint64_t v92 = 0;
          *((void *)v92 + 1) = 0;
          *((void *)v92 + 2) = 0;
          *((void *)v92 + 3) = v92 + 8;
          uint64_t v93 = *(llvm::Type **)this;
          __int16 v121 = 257;
          llvm::ZExtInst::ZExtInst((llvm::ZExtInst *)(v92 + 8), v91, v93, (const char **)&v118, 0);
          goto LABEL_80;
        }
        int v85 = 1;
        while (v84 != (llvm *)-4096)
        {
          int v86 = v82 + v85++;
          uint64_t v82 = v86 & (v81 - 1);
          uint64_t v84 = *(llvm **)(v80 + 16 * v82);
          if (v84 == v9)
          {
            uint64_t v83 = (llvm **)(v80 + 16 * v82);
            goto LABEL_134;
          }
        }
      }
      uint64_t v83 = (llvm **)(v80 + 16 * v81);
      goto LABEL_134;
    }
    unint64_t v77 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v76 + 8) | ((unint64_t)(*((_DWORD *)v76 + 2) == 19) << 32)), (uint64_t)v77);
    uint64_t v78 = *(void *)(a1 + 24);
    if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
    {
      uint64_t v88 = 0;
      unsigned int v89 = &byte_1CFBCE98E;
      BOOL v74 = (void *)v111;
      goto LABEL_135;
    }
    uint64_t v103 = ***(void ***)v9;
    uint64_t v104 = *(void *)(v103 + 152);
    uint64_t v105 = *(unsigned int *)(v103 + 168);
    if (v105)
    {
      LODWORD(v106) = (v105 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v83 = (llvm **)(v104 + 16 * v106);
      int v107 = *v83;
      if (*v83 == v9)
      {
LABEL_175:
        BOOL v74 = (void *)v111;
        goto LABEL_134;
      }
      int v108 = 1;
      while (v107 != (llvm *)-4096)
      {
        int v109 = v106 + v108++;
        uint64_t v106 = v109 & (v105 - 1);
        int v107 = *(llvm **)(v104 + 16 * v106);
        if (v107 == v9)
        {
          uint64_t v83 = (llvm **)(v104 + 16 * v106);
          goto LABEL_175;
        }
      }
    }
    uint64_t v83 = (llvm **)(v104 + 16 * v105);
    goto LABEL_175;
  }
  if (v51 == v56)
  {
    unsigned int v115 = v51;
    if (v51 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&FnAttribute);
    }
    uint64_t FnAttribute = 0;
    if (v53)
    {
      if (v53 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&FnAttribute, 0, v53);
      }
      else
      {
        unint64_t v59 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
        if (v115 > 0x40) {
          *(void *)FnAttribute |= v59;
        }
        else {
          FnAttribute |= v59;
        }
      }
    }
    uint64_t v60 = *(llvm::ConstantInt ***)v111;
    uint64_t v61 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v111, (llvm::LLVMContext *)&FnAttribute, v57);
    if ((v60[1] & 0xFE) == 0x12) {
      uint64_t v61 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v60 + 8) | ((unint64_t)(*((_DWORD *)v60 + 2) == 19) << 32)), (uint64_t)v61);
    }
    __int16 v121 = 257;
    uint64_t v62 = (void *)v111;
  }
  else
  {
    if (v51 <= v56) {
      goto LABEL_14;
    }
    uint64_t v68 = *(void *)(a1 + 24);
    __int16 v116 = 257;
    if (v49 == (llvm::Type *)v54)
    {
      int v69 = (unsigned __int8 *)v111;
    }
    else if (*(unsigned __int8 *)(v111 + 16) <= 0x14u)
    {
      int v69 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v68 + 72) + 224))(*(void *)(v68 + 72), 38);
      if (v69) {
        BOOL v73 = v69[16] >= 0x1Cu;
      }
      else {
        BOOL v73 = 0;
      }
      if (v73) {
        int v69 = (unsigned __int8 *)sub_1CB844E0C((uint64_t *)v68, (llvm::Instruction *)v69, (uint64_t)&FnAttribute);
      }
    }
    else
    {
      __int16 v121 = 257;
      int v69 = (unsigned __int8 *)llvm::CastInst::Create(38, v111, v54, (const char **)&v118, 0);
      (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v68 + 80) + 16))(*(void *)(v68 + 80), v69, &FnAttribute, *(void *)(v68 + 48), *(void *)(v68 + 56));
      uint64_t v70 = *(unsigned int *)(v68 + 8);
      if (v70)
      {
        uint64_t v94 = *(void *)v68;
        uint64_t v95 = v94 + 16 * v70;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v69, *(_DWORD *)v94, *(llvm::MDNode **)(v94 + 8));
          v94 += 16;
        }
        while (v94 != v95);
      }
    }
    unsigned int v115 = v58;
    if (v58 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&FnAttribute);
    }
    uint64_t FnAttribute = 0;
    if (v53)
    {
      if (v53 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&FnAttribute, 0, v53);
      }
      else
      {
        unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
        if (v115 > 0x40) {
          *(void *)FnAttribute |= v71;
        }
        else {
          FnAttribute |= v71;
        }
      }
    }
    uint64_t v72 = *(llvm::ConstantInt ***)v69;
    uint64_t v61 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v69, (llvm::LLVMContext *)&FnAttribute, v57);
    if ((v72[1] & 0xFE) == 0x12) {
      uint64_t v61 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v72 + 8) | ((unint64_t)(*((_DWORD *)v72 + 2) == 19) << 32)), (uint64_t)v61);
    }
    __int16 v121 = 257;
    uint64_t v62 = v69;
  }
  uint64_t v63 = llvm::BinaryOperator::Create(28, v62, (uint64_t)v61, (const char **)&v118, 0);
LABEL_80:
  if (v115 >= 0x41 && FnAttribute) {
    MEMORY[0x1D25D9CB0](FnAttribute, 0x1000C8000313F17);
  }
  return (llvm::UndefValue **)v63;
}

uint64_t sub_1CCA4050C(uint64_t a1, uint64_t a2, unsigned int *a3, const llvm::DataLayout **a4, llvm::AssumptionCache *a5)
{
  *a3 = 0;
  if (sub_1CCA474C8(a1, a2)) {
    return 1;
  }
  int v11 = *(unsigned __int8 *)(a1 + 16);
  if (v11 < 0x1C) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (!v12 || *(void *)(v12 + 8)) {
    return 0;
  }
  int v58 = 0;
  if (v11 <= 55)
  {
    if (v11 <= 44)
    {
      if (v11 != 41 && v11 != 43) {
        return 0;
      }
    }
    else if (v11 != 45)
    {
      if (v11 == 53)
      {
        uint64_t v55 = 0;
        int v29 = *(_DWORD *)(a1 + 20);
        if ((v29 & 0x40000000) != 0) {
          uint64_t v30 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v30 = a1 - 32 * (v29 & 0x7FFFFFF);
        }
        uint64_t v41 = *(unsigned __int8 **)(v30 + 32);
        unint64_t v56 = (unint64_t)&v55;
        uint64_t v57 = 0;
        uint64_t result = sub_1CBF528D8((uint64_t)&v56, v41);
        if (!result) {
          return result;
        }
        int v42 = *(_DWORD *)(a1 + 20);
        uint64_t v43 = (v42 & 0x40000000) != 0 ? *(void **)(a1 - 8) : (void *)(a1 - 32 * (v42 & 0x7FFFFFF));
        uint64_t result = sub_1CCA4050C(*v43, a2, a3, a4, a5);
        if (!result) {
          return result;
        }
        unint64_t v49 = (unint64_t *)v55;
        if (*(_DWORD *)(v55 + 8) >= 0x41u) {
          unint64_t v49 = *(unint64_t **)v55;
        }
        unint64_t v50 = *v49;
        unint64_t v51 = *a3;
        if (v50 >= v51) {
          unsigned int v48 = 0;
        }
        else {
          unsigned int v48 = v51 - v50;
        }
      }
      else
      {
        if (v11 != 54) {
          return 0;
        }
        uint64_t v55 = 0;
        int v15 = *(_DWORD *)(a1 + 20);
        if ((v15 & 0x40000000) != 0) {
          uint64_t v16 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v16 = a1 - 32 * (v15 & 0x7FFFFFF);
        }
        int v33 = *(unsigned __int8 **)(v16 + 32);
        unint64_t v56 = (unint64_t)&v55;
        uint64_t v57 = 0;
        uint64_t result = sub_1CBF528D8((uint64_t)&v56, v33);
        if (!result) {
          return result;
        }
        int v34 = *(_DWORD *)(a1 + 20);
        uint64_t v35 = (v34 & 0x40000000) != 0 ? *(void **)(a1 - 8) : (void *)(a1 - 32 * (v34 & 0x7FFFFFF));
        uint64_t result = sub_1CCA4050C(*v35, a2, a3, a4, a5);
        if (!result) {
          return result;
        }
        uint64_t v44 = (_DWORD *)v55;
        if (*(_DWORD *)(v55 + 8) >= 0x41u) {
          uint64_t v44 = *(_DWORD **)v55;
        }
        unsigned int v45 = *a3 + *v44;
        *a3 = v45;
        unint64_t v46 = *(llvm::Type **)a1;
        if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
          unint64_t v46 = (llvm::Type *)**((void **)v46 + 2);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v46);
        if (v45 >= PrimitiveSizeInBits) {
          unsigned int v48 = PrimitiveSizeInBits;
        }
        else {
          unsigned int v48 = v45;
        }
      }
      *a3 = v48;
      return 1;
    }
LABEL_25:
    int v17 = *(_DWORD *)(a1 + 20);
    if ((v17 & 0x40000000) != 0) {
      uint64_t v18 = *(void **)(a1 - 8);
    }
    else {
      uint64_t v18 = (void *)(a1 - 32 * (v17 & 0x7FFFFFF));
    }
    uint64_t result = sub_1CCA4050C(*v18, a2, a3, a4, a5);
    if (!result) {
      return result;
    }
    int v19 = *(_DWORD *)(a1 + 20);
    uint64_t v20 = (v19 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v19 & 0x7FFFFFF);
    uint64_t result = sub_1CCA4050C(*(void *)(v20 + 32), a2, &v58, a4, a5);
    if (!result) {
      return result;
    }
    unsigned int v21 = *a3;
    int v22 = *a3 | v58;
    uint64_t result = v22 == 0;
    if (!v22 || v58) {
      return result;
    }
    if (*(unsigned __int8 *)(a1 + 16) - 56 <= 2)
    {
      uint64_t v23 = *(llvm::Type **)a1;
      if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
        uint64_t v23 = (llvm::Type *)**((void **)v23 + 2);
      }
      unsigned int v24 = llvm::Type::getPrimitiveSizeInBits(v23);
      int v25 = *(_DWORD *)(a1 + 20);
      if ((v25 & 0x40000000) != 0) {
        uint64_t v26 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v26 = a1 - 32 * (v25 & 0x7FFFFFF);
      }
      char v52 = *(llvm **)(v26 + 32);
      LODWORD(v57) = v24;
      if (v24 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v56);
      }
      unint64_t v56 = 0;
      if (v21)
      {
        unsigned int v53 = v24 - v21;
        if (v24 - v21 > 0x3F) {
          llvm::APInt::setBitsSlowCase(&v56, v53, v24);
        }
        else {
          v56 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v21 << v53;
        }
      }
      BOOL IsZero = llvm::MaskedValueIsZero(v52, (const llvm::Value *)&v56, a4[10], 0, a4[7], a5, a4[9], (const llvm::DominatorTree *)1, v55);
      if (v57 >= 0x41 && v56) {
        MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
      }
      if (IsZero)
      {
        if (*(unsigned char *)(a1 + 16) == 56) {
          *a3 = 0;
        }
        return 1;
      }
    }
    return 0;
  }
  if (v11 <= 65)
  {
    if ((v11 - 56) >= 3) {
      return 0;
    }
    goto LABEL_25;
  }
  if ((v11 - 66) < 3) {
    return 1;
  }
  if (v11 != 83)
  {
    if (v11 == 85)
    {
      int v13 = *(_DWORD *)(a1 + 20);
      if ((v13 & 0x40000000) != 0) {
        uint64_t v14 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v14 = a1 - 32 * (v13 & 0x7FFFFFF);
      }
      uint64_t result = sub_1CCA4050C(*(void *)(v14 + 32), a2, &v58, a4, a5);
      if (result)
      {
        int v31 = *(_DWORD *)(a1 + 20);
        if ((v31 & 0x40000000) != 0) {
          uint64_t v32 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v32 = a1 - 32 * (v31 & 0x7FFFFFF);
        }
        uint64_t result = sub_1CCA4050C(*(void *)(v32 + 64), a2, a3, a4, a5);
        if (result) {
          return v58 == *a3;
        }
      }
      return result;
    }
    return 0;
  }
  int v27 = *(_DWORD *)(a1 + 20);
  if ((v27 & 0x40000000) != 0) {
    unsigned int v28 = *(void **)(a1 - 8);
  }
  else {
    unsigned int v28 = (void *)(a1 - 32 * (v27 & 0x7FFFFFF));
  }
  uint64_t result = sub_1CCA4050C(*v28, a2, a3, a4, a5);
  if (!result) {
    return result;
  }
  int v36 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  int v37 = v36 - 1;
  if (v36 == 1) {
    return 1;
  }
  uint64_t v38 = 32;
  do
  {
    int v39 = *(_DWORD *)(a1 + 20);
    if ((v39 & 0x40000000) != 0) {
      uint64_t v40 = *(void *)(a1 - 8);
    }
    else {
      uint64_t v40 = a1 - 32 * (v39 & 0x7FFFFFF);
    }
    uint64_t result = sub_1CCA4050C(*(void *)(v40 + v38), a2, &v58, a4, a5);
    if (!result) {
      break;
    }
    if (v58 != *a3) {
      return 0;
    }
    v38 += 32;
    uint64_t result = 1;
    --v37;
  }
  while (v37);
  return result;
}

llvm::UndefValue **sub_1CCA40A18(void *a1, uint64_t a2, llvm::Type ****a3)
{
  uint64_t v7 = *(void *)(a2 - 32);
  if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFE) == 0x12) {
    int v8 = *(unsigned __int8 *)(**(void **)(*(void *)v7 + 16) + 8);
  }
  else {
    int v8 = *(_DWORD *)(*(void *)v7 + 8);
  }
  if (v8 != 13) {
    return 0;
  }
  uint64_t v9 = *(uint64_t **)(a2 - 64);
  int v10 = *(_WORD *)(a2 + 18) & 0x3F;
  if (v10 == 38)
  {
    if ((sub_1CBF687D0((uint64_t)&__src, (llvm::Constant *)v7) & 1) == 0) {
      goto LABEL_19;
    }
LABEL_10:
    int v11 = (llvm::ConstantInt *)*v9;
    uint64_t v12 = (llvm::Type *)*v9;
    if ((*(_DWORD *)(*v9 + 8) & 0xFE) == 0x12) {
      uint64_t v12 = (llvm::Type *)**((void **)v11 + 2);
    }
    int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v12);
    uint64_t v14 = llvm::ConstantInt::get(v11, (PrimitiveSizeInBits - 1), 0);
    uint64_t v15 = a1[3];
    if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
    {
      uint64_t v28 = 0;
      int v27 = &byte_1CFBCE98E;
LABEL_28:
      LOWORD(v102) = 773;
      uint64_t v98 = v27;
      uint64_t v99 = v28;
      uint64_t v100 = ".lobit";
      uint64_t v32 = sub_1CC5357E8(v15, (uint64_t)v9, (uint64_t)v14, (uint64_t)&v98, 0);
      int v33 = *a3;
      if (*(llvm::Type ****)v32 != *a3)
      {
        uint64_t v34 = a1[3];
        LOWORD(v102) = 257;
        uint64_t v32 = sub_1CBF56614(v34, v32, v33, (llvm::Type *)1, (uint64_t)&v98, v31);
      }
      if (v10 != 38) {
        return sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)a3, v32);
      }
      uint64_t v35 = a1[3];
      if ((*((unsigned char *)v32 + 23) & 0x10) == 0)
      {
        uint64_t v46 = 0;
        unsigned int v45 = &byte_1CFBCE98E;
        goto LABEL_40;
      }
      uint64_t v36 = ***(void ***)v32;
      uint64_t v37 = *(void *)(v36 + 152);
      uint64_t v38 = *(unsigned int *)(v36 + 168);
      if (v38)
      {
        LODWORD(v39) = (v38 - 1) & ((v32 >> 4) ^ (v32 >> 9));
        uint64_t v40 = (llvm::Instruction **)(v37 + 16 * v39);
        uint64_t v41 = *v40;
        if (*v40 == v32)
        {
LABEL_39:
          uint64_t v44 = v40[1];
          uint64_t v47 = *(void *)v44;
          unsigned int v45 = (char *)v44 + 16;
          uint64_t v46 = v47;
LABEL_40:
          LOWORD(v102) = 773;
          uint64_t v98 = v45;
          uint64_t v99 = v46;
          uint64_t v100 = ".not";
          uint64_t v32 = sub_1CC2427E8(v35, (uint64_t)v32, (uint64_t)&v98, v30);
          return sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)a3, v32);
        }
        int v42 = 1;
        while (v41 != (llvm::Instruction *)-4096)
        {
          int v43 = v39 + v42++;
          uint64_t v39 = v43 & (v38 - 1);
          uint64_t v41 = *(llvm::Instruction **)(v37 + 16 * v39);
          if (v41 == v32)
          {
            uint64_t v40 = (llvm::Instruction **)(v37 + 16 * v39);
            goto LABEL_39;
          }
        }
      }
      uint64_t v40 = (llvm::Instruction **)(v37 + 16 * v38);
      goto LABEL_39;
    }
    uint64_t v16 = **(void **)*v9;
    uint64_t v17 = *(void *)(v16 + 152);
    uint64_t v18 = *(unsigned int *)(v16 + 168);
    if (v18)
    {
      LODWORD(v19) = (v18 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v20 = (uint64_t **)(v17 + 16 * v19);
      unsigned int v21 = *v20;
      if (*v20 == v9)
      {
LABEL_27:
        uint64_t v26 = v20[1];
        uint64_t v29 = *v26;
        int v27 = (const char *)(v26 + 2);
        uint64_t v28 = v29;
        goto LABEL_28;
      }
      int v22 = 1;
      while (v21 != (uint64_t *)-4096)
      {
        int v23 = v19 + v22++;
        uint64_t v19 = v23 & (v18 - 1);
        unsigned int v21 = *(uint64_t **)(v17 + 16 * v19);
        if (v21 == v9)
        {
          uint64_t v20 = (uint64_t **)(v17 + 16 * v19);
          goto LABEL_27;
        }
      }
    }
    uint64_t v20 = (uint64_t **)(v17 + 16 * v18);
    goto LABEL_27;
  }
  if (v10 == 40 && (sub_1CBF535C4((uint64_t)&v98, *(llvm::Constant **)(a2 - 32)) & 1) != 0) {
    goto LABEL_10;
  }
LABEL_19:
  if (*(unsigned char *)(v7 + 16) != 16) {
    return 0;
  }
  uint64_t v24 = *(void *)(a2 + 8);
  if (!v24 || *(void *)(v24 + 8) || (*(_WORD *)(a2 + 18) & 0x3E) != 0x20) {
    return 0;
  }
  uint64_t v25 = *(unsigned int *)(v7 + 32);
  if (v25 > 0x40)
  {
    int v48 = 0;
    unint64_t v49 = (unint64_t)(v25 + 63) >> 6;
    uint64_t v50 = v49;
    do
    {
      BOOL v51 = v50-- < 1;
      if (v51) {
        break;
      }
      unint64_t v52 = *(void *)(*(void *)(v7 + 24) + 8 * v50);
      v48 += __clz(v52);
    }
    while (!v52);
    int v53 = v25 | 0xFFFFFFC0;
    if ((v25 & 0x3F) == 0) {
      int v53 = 0;
    }
    if (v48 + v53 != v25)
    {
      int v54 = 0;
      uint64_t v55 = *(int8x8_t **)(v7 + 24);
      do
      {
        int8x8_t v56 = *v55++;
        uint8x8_t v57 = (uint8x8_t)vcnt_s8(v56);
        v57.i16[0] = vaddlv_u8(v57);
        v54 += v57.i32[0];
        --v49;
      }
      while (v49);
      if (v54 != 1) {
        return 0;
      }
    }
  }
  else if ((*(void *)(v7 + 24) & (*(void *)(v7 + 24) - 1)) != 0)
  {
    return 0;
  }
  uint64_t v58 = a1[7];
  uint64_t v59 = a1[9];
  uint64_t v60 = (uint64_t *)a3;
  if (!a3[5])
  {
    if (!v9 || *((unsigned __int8 *)v9 + 16) < 0x1Cu || (uint64_t v60 = v9, !v9[5])) {
      uint64_t v60 = 0;
    }
  }
  uint64_t v98 = (const char *)a1[10];
  uint64_t v99 = v58;
  uint64_t v100 = (const char *)v60;
  uint64_t v101 = v59;
  uint64_t v102 = 0;
  char v103 = 1;
  sub_1CC16089C(v9, 0, (const llvm::DataLayout **)&v98, (uint64_t)&__src);
  unsigned int v63 = v95;
  if (v95 > 0x40) {
    operator new[]();
  }
  unint64_t v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v95;
  if (!v95) {
    unint64_t v64 = 0;
  }
  uint64_t v65 = (const void *)(v64 & ~(unint64_t)__src);
  unsigned int v93 = v95;
  uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
  v66.i16[0] = vaddlv_u8(v66);
  if (v66.u32[0] == 1)
  {
    uint64_t v68 = *(llvm::ConstantInt ***)(a2 - 64);
    uint64_t v69 = *(unsigned int *)(v7 + 32);
    if (v69 > 0x40)
    {
      int v72 = 0;
      int64_t v73 = (unint64_t)(v69 + 63) >> 6;
      do
      {
        BOOL v51 = v73-- < 1;
        if (v51) {
          break;
        }
        unint64_t v74 = *(void *)(*(void *)(v7 + 24) + 8 * v73);
        v72 += __clz(v74);
      }
      while (!v74);
      int v75 = v69 | 0xFFFFFFC0;
      if ((v69 & 0x3F) == 0) {
        int v75 = 0;
      }
      if (v72 + v75 != v69)
      {
        if (!memcmp(*(const void **)(v7 + 24), v65, ((unint64_t)(v69 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_64:
          if (v10 != 33) {
            goto LABEL_65;
          }
          goto LABEL_73;
        }
LABEL_78:
        uint64_t v78 = (llvm::Constant *)*a3;
        if (v10 == 33) {
          AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(v78, v61, v62);
        }
        else {
          AllOnesValue = llvm::Constant::getNullValue(v78, v61, v62);
        }
        uint64_t v90 = AllOnesValue;
        goto LABEL_90;
      }
    }
    else
    {
      uint64_t v70 = *(const void **)(v7 + 24);
      if (v70)
      {
        if (v70 == v65) {
          goto LABEL_64;
        }
        goto LABEL_78;
      }
    }
    if (v10 == 33)
    {
LABEL_65:
      unsigned int v71 = v63 + __clz((unint64_t)v65) - 64;
      if (v71)
      {
        uint64_t v80 = a1[3];
        uint64_t v81 = llvm::ConstantInt::get(*v68, v71, 0);
        LOWORD(v102) = 257;
        uint64_t v68 = (llvm::ConstantInt **)sub_1CC242524(v80, (uint64_t)v68, (uint64_t)v81, (uint64_t)&v98, 0, 0);
        unsigned int v63 = v93;
      }
      uint64_t v82 = a1[3];
      uint64_t v83 = llvm::ConstantInt::get(*v68, v63 - 1, 0);
      uint64_t v98 = "sext";
      LOWORD(v102) = 259;
      uint64_t v84 = sub_1CC5357E8(v82, (uint64_t)v68, (uint64_t)v83, (uint64_t)&v98, 0);
      goto LABEL_86;
    }
LABEL_73:
    unsigned int v76 = __clz(__rbit64((unint64_t)v65));
    if (v63 >= v76) {
      unsigned int v77 = v76;
    }
    else {
      unsigned int v77 = v63;
    }
    if (v77)
    {
      uint64_t v86 = a1[3];
      int v87 = llvm::ConstantInt::get(*v68, v77, 0);
      LOWORD(v102) = 257;
      uint64_t v68 = (llvm::ConstantInt **)sub_1CC2429AC(v86, (uint64_t)v68, (uint64_t)v87, (uint64_t)&v98, 0);
    }
    uint64_t v88 = a1[3];
    unsigned int v89 = llvm::Constant::getAllOnesValue(*v68, v61, v62);
    uint64_t v98 = "sext";
    LOWORD(v102) = 259;
    uint64_t v84 = sub_1CB844A3C(v88, v68, (uint64_t)v89, (uint64_t)&v98, 0, 0);
LABEL_86:
    uint64_t v90 = v84;
    uint64_t v91 = *a3;
    if (*a3 != *(llvm::Type ****)v84)
    {
      LOWORD(v102) = 257;
      char v67 = 1;
      int v3 = llvm::CastInst::CreateIntegerCast(v84, v91, (llvm::Type *)1, &v98, 0, v85);
      goto LABEL_91;
    }
LABEL_90:
    int v3 = sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)a3, v90);
    char v67 = 1;
    goto LABEL_91;
  }
  char v67 = 0;
LABEL_91:
  if (v97 >= 0x41 && v96) {
    MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
  }
  if (v95 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if ((v67 & 1) == 0) {
    return 0;
  }
  return (llvm::UndefValue **)v3;
}

llvm::Instruction *sub_1CCA411F4(void *a1, llvm::Instruction *this, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v7 = *((void *)this + 1);
  if (v7 && !*(void *)(v7 + 8) && *(unsigned char *)(*(void *)(v7 + 24) + 16) == 66) {
    return 0;
  }
  int v8 = sub_1CCA39904((uint64_t)a1, this, a3, a4, a5);
  if (v8) {
    return v8;
  }
  uint64_t v9 = *((void *)this - 4);
  int v10 = *(llvm::Type **)v9;
  uint64_t v11 = *(void *)this;
  uint64_t v12 = *(llvm::Type **)v9;
  if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
    uint64_t v12 = (llvm::Type *)**((void **)v10 + 2);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v12);
  uint64_t v14 = (llvm::Type *)v11;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
    uint64_t v14 = **(llvm::Type ***)(v11 + 16);
  }
  int v15 = llvm::Type::getPrimitiveSizeInBits(v14);
  uint64_t v16 = (llvm::Constant **)a1[7];
  uint64_t v17 = a1[9];
  uint64_t v18 = this;
  if (!*((void *)this + 5))
  {
    if (*(unsigned __int8 *)(v9 + 16) < 0x1Cu || (uint64_t v18 = (llvm::Instruction *)v9, !*(void *)(v9 + 40))) {
      uint64_t v18 = 0;
    }
  }
  unsigned int v97 = (llvm::CastInst **)a1[10];
  unint64_t v98 = (unint64_t)v16;
  uint64_t v99 = (llvm::Constant **)v18;
  uint64_t v100 = v17;
  uint64_t v101 = 0;
  char v102 = 1;
  sub_1CC16089C((uint64_t *)v9, 0, (const llvm::DataLayout **)&v97, (uint64_t)&v93);
  if (v94 >= 0x41) {
    uint64_t v19 = (uint64_t *)(v93 + 8 * ((v94 - 1) >> 6));
  }
  else {
    uint64_t v19 = &v93;
  }
  if (((unint64_t)*v19 >> (v94 - 1)))
  {
    LOWORD(v101) = 257;
    IntegerCast = llvm::CastInst::Create(39, v9, v11, (const char **)&v97, 0);
    goto LABEL_55;
  }
  if (*((unsigned char *)v10 + 8) != 13 || *(unsigned char *)(v11 + 8) != 13) {
    goto LABEL_21;
  }
  unsigned int v21 = llvm::Type::getPrimitiveSizeInBits(v10);
  if (v20 == 1) {
  unsigned int v23 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
  }
  if (v22 == 1) {
  if (!sub_1CC9D18E0((uint64_t)a1, v21, v23) || !sub_1CCA41B2C(v9, v11))
  }
  {
LABEL_21:
    uint64_t v90 = 0;
    unsigned int v97 = &v90;
    if (!sub_1CBC5BF18(&v97, v9)) {
      goto LABEL_22;
    }
    uint64_t v40 = v90;
    uint64_t v41 = *(llvm::Type **)v90;
    if ((*(_DWORD *)(*(void *)v90 + 8) & 0xFE) == 0x12) {
      uint64_t v41 = (llvm::Type *)**((void **)v41 + 2);
    }
    int v42 = llvm::Type::getPrimitiveSizeInBits(v41);
    int v43 = (llvm::Constant **)a1[7];
    uint64_t v44 = a1[9];
    unsigned int v45 = this;
    if (!*((void *)this + 5))
    {
      if (*((unsigned __int8 *)v40 + 16) < 0x1Cu || (unsigned int v45 = v40, !*((void *)v40 + 5))) {
        unsigned int v45 = 0;
      }
    }
    unsigned int v97 = (llvm::CastInst **)a1[10];
    unint64_t v98 = (unint64_t)v43;
    uint64_t v99 = (llvm::Constant **)v45;
    uint64_t v100 = v44;
    uint64_t v101 = 0;
    char v102 = 1;
    unsigned int v46 = sub_1CC162D6C(v40, 0, (uint64_t)&v97);
    unint64_t v48 = (v42 - PrimitiveSizeInBits);
    if (v46 > v48)
    {
      uint64_t v60 = v90;
      LOWORD(v101) = 257;
    }
    else
    {
      uint64_t v49 = *(void *)(v9 + 8);
      if (!v49 || *(void *)(v49 + 8)) {
        goto LABEL_22;
      }
      if (*(void *)v90 == v11)
      {
        uint64_t v37 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, (v15 - PrimitiveSizeInBits), 0);
        uint64_t v50 = a1[3];
        LOWORD(v101) = 257;
        uint64_t v39 = sub_1CC242524(v50, (uint64_t)v90, (uint64_t)v37, (uint64_t)&v97, 0, 0);
        __int16 v92 = 257;
        goto LABEL_52;
      }
      v91[0] = 0;
      int v53 = v91;
      LODWORD(v99) = 64;
      unsigned int v97 = (llvm::CastInst **)v91;
      unint64_t v98 = (v42 - PrimitiveSizeInBits);
      int v54 = *((unsigned __int8 *)v90 + 16);
      if (v54 == 54)
      {
        int v55 = 0;
        if (*((void *)v90 - 8))
        {
          v91[0] = *((void *)v90 - 8);
          if (sub_1CCA4852C((llvm::APInt *)&v98, *((llvm::Constant **)v90 - 4))) {
            int v55 = 1;
          }
        }
      }
      else
      {
        if (v54 == 5) {
          LOBYTE(v53) = *((_WORD *)v90 + 9) == 26
        }
                     && (int8x8_t v56 = (llvm::Constant **)((char *)v90 - 32 * (*((_DWORD *)v90 + 5) & 0x7FFFFFF)), *v56)
                     && (v91[0] = *v56, sub_1CCA15C64((llvm::APInt *)&v98, v56[4]));
        int v55 = (v54 == 5) & v53;
      }
      if (v99 >= 0x41 && v98) {
        MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
      }
      if (!v55)
      {
LABEL_22:
        if (*(unsigned char *)(v9 + 16) == 81)
        {
          IntegerCast = sub_1CCA40A18(a1, v9, (llvm::Type ****)this);
          goto LABEL_55;
        }
        v91[0] = 0;
        uint64_t v88 = 0;
        unsigned int v89 = 0;
        unsigned int v97 = (llvm::CastInst **)v91;
        unint64_t v98 = (unint64_t)&v89;
        uint64_t v99 = &v88;
        if (sub_1CCA485C0(&v97, 27, v9)
          && llvm::Constant::isElementWiseEqual(v89, v88)
          && *(void *)v91[0] == v11)
        {
          SExt = llvm::ConstantExpr::getSExt(v88, (llvm::Constant *)v11, 0);
          if ((*((_DWORD *)v10 + 2) & 0xFE) == 0x12) {
            int v10 = (llvm::Type *)**((void **)v10 + 2);
          }
          unsigned int v62 = llvm::Type::getPrimitiveSizeInBits(v10);
          unsigned int v63 = (llvm::ConstantExpr *)llvm::ConstantInt::get((llvm::ConstantInt *)v11, v62, 0);
          Sub = llvm::ConstantExpr::getSub(v63, SExt, 0, 0);
          uint64_t v65 = (llvm::Type *)v11;
          if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
            uint64_t v65 = **(llvm::Type ***)(v11 + 16);
          }
          unsigned int v66 = llvm::Type::getPrimitiveSizeInBits(v65);
          char v67 = (llvm::ConstantExpr *)llvm::ConstantInt::get((llvm::ConstantInt *)v11, v66, 0);
          uint64_t v68 = llvm::ConstantExpr::getSub(v67, Sub, 0, 0);
          uint64_t v70 = llvm::Constant::mergeUndefsWith(v68, v89, v69);
          uint64_t v37 = llvm::Constant::mergeUndefsWith(v70, v88, v71);
          uint64_t v72 = a1[3];
          uint64_t v73 = v91[0];
          Name = llvm::Value::getName(this);
          LOWORD(v101) = 261;
          unsigned int v97 = (llvm::CastInst **)Name;
          unint64_t v98 = (unint64_t)v75;
          uint64_t v39 = sub_1CC242524(v72, v73, (uint64_t)v37, (uint64_t)&v97, 0, 0);
          v91[0] = v39;
          LOWORD(v101) = 257;
          goto LABEL_97;
        }
        LODWORD(v99) = 64;
        unsigned int v97 = &v90;
        unint64_t v98 = (PrimitiveSizeInBits - 1);
        uint64_t v24 = *(void *)(v9 + 8);
        if (!v24)
        {
LABEL_35:
          unsigned int v97 = (llvm::CastInst **)a1[10];
          if (!sub_1CC5E5624((llvm::DataLayout **)&v97, v9)
            || !llvm::Instruction::getFunction(this)
            || (uint64_t Function = llvm::Instruction::getFunction(this),
                !llvm::Function::hasFnAttribute(Function, 80))
            || (uint64_t v77 = llvm::Instruction::getFunction(this),
                uint64_t FnAttribute = llvm::Function::getFnAttribute(v77, 80),
                uint64_t VScaleRangeMax = llvm::Attribute::getVScaleRangeMax((llvm::Attribute *)&FnAttribute),
                (VScaleRangeMax & 0xFF00000000) == 0)
            || 31 - __clz(VScaleRangeMax) >= PrimitiveSizeInBits - 1)
          {
            uint64_t v26 = 0;
            goto LABEL_37;
          }
          uint64_t v79 = (llvm::IRBuilderBase *)a1[3];
          uint64_t v80 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v11, 1uLL, 0);
          LOWORD(v101) = 257;
          VScale = llvm::IRBuilderBase::CreateVScale(v79, v80, (const llvm::Twine *)&v97);
          uint64_t v82 = (uint64_t)a1;
          uint64_t v83 = this;
          goto LABEL_105;
        }
        if (!*(void *)(v24 + 8))
        {
          int v25 = *(unsigned __int8 *)(v9 + 16);
          if (v25 == 5)
          {
            if (*(_WORD *)(v9 + 18) == 27
              && sub_1CBC5BF18(&v97, *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))
              && sub_1CBF531E4((llvm::APInt *)&v98, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32)))
            {
LABEL_106:
              uint64_t v84 = *(llvm::Type **)v90;
              if (v99 >= 0x41 && v98) {
                MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
              }
              if (v84 == (llvm::Type *)v11)
              {
                int v85 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, (v15 - PrimitiveSizeInBits), 0);
                uint64_t v37 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, (v15 - 1), 0);
                uint64_t v86 = a1[3];
                LOWORD(v101) = 257;
                uint64_t v39 = sub_1CC242524(v86, (uint64_t)v90, (uint64_t)v85, (uint64_t)&v97, 0, 0);
                LOWORD(v101) = 257;
LABEL_97:
                BOOL v51 = (const char **)&v97;
                goto LABEL_53;
              }
              goto LABEL_35;
            }
          }
          else if (v25 == 55 {
                 && sub_1CBC5BF18(&v97, *(void *)(v9 - 64))
          }
                 && sub_1CBF53154((llvm::APInt *)&v98, *(unsigned __int8 **)(v9 - 32)))
          {
            goto LABEL_106;
          }
        }
        if (v99 >= 0x41 && v98) {
          MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
        }
        goto LABEL_35;
      }
      uint64_t v57 = a1[3];
      uint64_t v58 = v91[0];
      LOWORD(v101) = 257;
      uint64_t v59 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v91[0], v48, 0);
      uint64_t v60 = sub_1CC5357E8(v57, v58, (uint64_t)v59, (uint64_t)&v97, 0);
      LOWORD(v101) = 257;
    }
    IntegerCast = llvm::CastInst::CreateIntegerCast(v60, (llvm::Type ***)v11, (llvm::Type *)1, (const char **)&v97, 0, v47);
    goto LABEL_55;
  }
  uint64_t v30 = sub_1CCA38F6C((uint64_t)a1, v9, (llvm::Type ***)v11, (llvm::Type *)1, v28, v29);
  uint64_t v31 = (uint64_t)v30;
  uint64_t v32 = (llvm::Constant **)a1[7];
  uint64_t v33 = a1[9];
  uint64_t v34 = this;
  if (!*((void *)this + 5))
  {
    if (!v30 || *((unsigned __int8 *)v30 + 16) < 0x1Cu || (uint64_t v34 = v30, !*((void *)v30 + 5))) {
      uint64_t v34 = 0;
    }
  }
  unsigned int v97 = (llvm::CastInst **)a1[10];
  unint64_t v98 = (unint64_t)v32;
  uint64_t v99 = (llvm::Constant **)v34;
  uint64_t v100 = v33;
  uint64_t v101 = 0;
  char v102 = 1;
  unsigned int v35 = sub_1CC162D6C(v30, 0, (uint64_t)&v97);
  unint64_t v36 = (v15 - PrimitiveSizeInBits);
  if (v35 > v36)
  {
    uint64_t v82 = (uint64_t)a1;
    uint64_t v83 = this;
    VScale = (llvm::Instruction *)v31;
LABEL_105:
    IntegerCast = sub_1CC9D3C84(v82, v83, VScale);
    goto LABEL_55;
  }
  uint64_t v37 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, v36, 0);
  uint64_t v38 = a1[3];
  unsigned int v97 = (llvm::CastInst **)"sext";
  LOWORD(v101) = 259;
  uint64_t v39 = sub_1CC242524(v38, v31, (uint64_t)v37, (uint64_t)&v97, 0, 0);
  __int16 v92 = 257;
LABEL_52:
  BOOL v51 = (const char **)v91;
LABEL_53:
  IntegerCast = llvm::BinaryOperator::Create(27, v39, (uint64_t)v37, v51, 0);
LABEL_55:
  uint64_t v26 = IntegerCast;
LABEL_37:
  if (v96 >= 0x41 && v95) {
    MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
  }
  if (v94 >= 0x41 && v93) {
    MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
  }
  return (llvm::Instruction *)v26;
}

uint64_t sub_1CCA41B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  while (1)
  {
    if (sub_1CCA474C8(a1, a2)) {
      return 1;
    }
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    if (v4 < 0x1C) {
      return 0;
    }
    uint64_t v5 = *(void *)(v3 + 8);
    if (!v5 || *(void *)(v5 + 8)) {
      return 0;
    }
    if (*(unsigned __int8 *)(v3 + 16) <= 0x37u)
    {
      if (v4 != 41 && v4 != 43 && v4 != 45) {
        return 0;
      }
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(v3 + 16) <= 0x41u)
    {
      if (v4 - 56 >= 3) {
        return 0;
      }
LABEL_13:
      int v6 = *(_DWORD *)(v3 + 20);
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(void **)(v3 - 8);
      }
      else {
        uint64_t v7 = (void *)(v3 - 32 * (v6 & 0x7FFFFFF));
      }
      uint64_t result = sub_1CCA41B2C(*v7, v2);
      if (!result) {
        return result;
      }
      int v9 = *(_DWORD *)(v3 + 20);
      if ((v9 & 0x40000000) != 0) {
        uint64_t v10 = *(void *)(v3 - 8);
      }
      else {
        uint64_t v10 = v3 - 32 * (v9 & 0x7FFFFFF);
      }
      uint64_t v11 = (uint64_t *)(v10 + 32);
      goto LABEL_21;
    }
    if (v4 != 85) {
      break;
    }
    int v12 = *(_DWORD *)(v3 + 20);
    if ((v12 & 0x40000000) != 0) {
      uint64_t v13 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v13 = v3 - 32 * (v12 & 0x7FFFFFF);
    }
    uint64_t result = sub_1CCA41B2C(*(void *)(v13 + 32), v2);
    if (!result) {
      return result;
    }
    int v14 = *(_DWORD *)(v3 + 20);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v15 = v3 - 32 * (v14 & 0x7FFFFFF);
    }
    uint64_t v11 = (uint64_t *)(v15 + 64);
LABEL_21:
    uint64_t v3 = *v11;
    a1 = *v11;
    a2 = v2;
  }
  if (v4 - 66 < 3) {
    return 1;
  }
  if (v4 != 83) {
    return 0;
  }
  int v16 = *(_DWORD *)(v3 + 20);
  if ((v16 & 0x40000000) != 0)
  {
    uint64_t v18 = *(uint64_t **)(v3 - 8);
    uint64_t v17 = v16 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v17 = v16 & 0x7FFFFFF;
    uint64_t v18 = (uint64_t *)(v3 - 32 * v17);
  }
  if (!v17) {
    return 1;
  }
  uint64_t v19 = 32 * v17 - 32;
  do
  {
    uint64_t v20 = *v18;
    v18 += 4;
    uint64_t result = sub_1CCA41B2C(v20, v2);
    if (result) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    v19 -= 32;
  }
  while (!v21);
  return result;
}

llvm::Value *sub_1CCA41CC0(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  v161[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1CCA39904(a1, a2, a3, a4, a5);
  if (v7) {
    return (llvm::Value *)v7;
  }
  uint64_t v8 = *(void *)a2;
  uint64_t v156 = *(void *)a2;
  int v9 = (unsigned char *)*((void *)a2 - 4);
  unsigned int v10 = v9[16];
  if (v9) {
    BOOL v11 = v10 >= 0x1C;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11 && v10 - 59 >= 0xFFFFFFEE)
  {
    uint64_t v13 = *((void *)v9 + 1);
    if (v13)
    {
      if (!*(void *)(v13 + 8))
      {
        sub_1CCA42810(*((llvm::detail::DoubleAPFloat **)v9 - 8));
        int v22 = v21;
        sub_1CCA42810(*((llvm::detail::DoubleAPFloat **)v9 - 4));
        uint64_t v24 = (uint64_t *)v23;
        uint64_t v25 = *(void *)v9;
        if (*(void *)v9) {
          BOOL v26 = (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26)
        {
          do
          {
            uint64_t v25 = *(void *)(v25 + 24);
            unsigned int v27 = *(_DWORD *)(v25 + 8);
            if (v25) {
              BOOL v127 = (*(_DWORD *)(v25 + 8) & 0xFE) == 18;
            }
            else {
              BOOL v127 = 0;
            }
          }
          while (v127);
        }
        else
        {
          unsigned int v27 = *(_DWORD *)(*(void *)v9 + 8);
        }
        if (v27 >= 5)
        {
          if (v27 == 5) {
            unsigned int v28 = 113;
          }
          else {
            unsigned int v28 = -1;
          }
        }
        else
        {
          unsigned int v28 = dword_1CFB27824[(char)v27];
        }
        int v39 = *((_DWORD *)v22 + 2);
        unsigned int v40 = v39;
        if (v22 && (v39 & 0xFE) == 0x12)
        {
          unsigned int v128 = v22;
          do
          {
            unsigned int v128 = (uint64_t *)v128[3];
            unsigned int v40 = *((_DWORD *)v128 + 2);
            if (v128) {
              BOOL v129 = (v128[1] & 0xFE) == 18;
            }
            else {
              BOOL v129 = 0;
            }
          }
          while (v129);
        }
        if (v40 >= 5)
        {
          if (v40 == 5) {
            unsigned int v41 = 113;
          }
          else {
            unsigned int v41 = -1;
          }
        }
        else
        {
          unsigned int v41 = dword_1CFB27824[(char)v40];
        }
        int v42 = *(_DWORD *)(v23 + 8);
        unsigned int v43 = v42;
        if (v23 && (v42 & 0xFE) == 0x12)
        {
          uint64_t v130 = v23;
          do
          {
            uint64_t v130 = *(void *)(v130 + 24);
            unsigned int v43 = *(_DWORD *)(v130 + 8);
            if (v130) {
              BOOL v131 = (*(_DWORD *)(v130 + 8) & 0xFE) == 18;
            }
            else {
              BOOL v131 = 0;
            }
          }
          while (v131);
        }
        if (v43 >= 5)
        {
          if (v43 == 5) {
            unsigned int v44 = 113;
          }
          else {
            unsigned int v44 = -1;
          }
        }
        else
        {
          unsigned int v44 = dword_1CFB27824[(char)v43];
        }
        if (v41 <= v44) {
          unsigned int v45 = v44;
        }
        else {
          unsigned int v45 = v41;
        }
        int v46 = *(_DWORD *)(v8 + 8);
        unsigned int v47 = v46;
        if (v8 && (v46 & 0xFE) == 0x12)
        {
          uint64_t v132 = v8;
          do
          {
            uint64_t v132 = *(void *)(v132 + 24);
            unsigned int v47 = *(_DWORD *)(v132 + 8);
            if (v132) {
              BOOL v133 = (*(_DWORD *)(v132 + 8) & 0xFE) == 18;
            }
            else {
              BOOL v133 = 0;
            }
          }
          while (v133);
        }
        if (v47 >= 5)
        {
          if (v47 == 5) {
            unsigned int v48 = 113;
          }
          else {
            unsigned int v48 = -1;
          }
        }
        else
        {
          unsigned int v48 = dword_1CFB27824[(char)v47];
        }
        switch(v9[16])
        {
          case '*':
          case ',':
            if (v48 < v45 || v28 < ((2 * v48) | 1)) {
              break;
            }
            uint64_t v50 = *(void *)(a1 + 24);
            uint64_t v51 = *((void *)v9 - 8);
            __int16 v160 = 257;
            unint64_t v52 = sub_1CB845034(v50, v51, (uint64_t *)v8, (uint64_t)&v157);
            uint64_t v53 = *(void *)(a1 + 24);
            uint64_t v54 = *((void *)v9 - 4);
            __int16 v160 = 257;
            int v55 = sub_1CB845034(v53, v54, (uint64_t *)v8, (uint64_t)&v157);
            char v56 = v9[16] - 28;
            __int16 v160 = 257;
            uint64_t v7 = llvm::BinaryOperator::Create(v56, v52, (uint64_t)v55, (const char **)&v157, 0);
            v7[17] = v9[17] & 0xFE | v7[17] & 1;
            return (llvm::Value *)v7;
          case '.':
            if (v28 < v44 + v41 || v48 < v45) {
              break;
            }
            uint64_t v57 = *(void *)(a1 + 24);
            uint64_t v58 = *((void *)v9 - 8);
            __int16 v160 = 257;
            uint64_t v59 = sub_1CB845034(v57, v58, (uint64_t *)v8, (uint64_t)&v157);
            uint64_t v60 = *(void *)(a1 + 24);
            uint64_t v61 = *((void *)v9 - 4);
            __int16 v160 = 257;
            unsigned int v62 = sub_1CB845034(v60, v61, (uint64_t *)v8, (uint64_t)&v157);
            __int16 v160 = 257;
            char v63 = 18;
            goto LABEL_90;
          case '1':
            if (v48 < v45 || v28 < 2 * v48) {
              break;
            }
            uint64_t v65 = *(void *)(a1 + 24);
            uint64_t v66 = *((void *)v9 - 8);
            __int16 v160 = 257;
            uint64_t v59 = sub_1CB845034(v65, v66, (uint64_t *)v8, (uint64_t)&v157);
            uint64_t v67 = *(void *)(a1 + 24);
            uint64_t v68 = *((void *)v9 - 4);
            __int16 v160 = 257;
            unsigned int v62 = sub_1CB845034(v67, v68, (uint64_t *)v8, (uint64_t)&v157);
            __int16 v160 = 257;
            char v63 = 21;
LABEL_90:
            uint64_t v7 = llvm::BinaryOperator::Create(v63, v59, (uint64_t)v62, (const char **)&v157, 0);
            llvm::Instruction::copyIRFlags((uint64_t)v7, (uint64_t)v9, 1);
            return (llvm::Value *)v7;
          case '4':
            if (v45 == v28) {
              break;
            }
            uint64_t v69 = *(void *)(a1 + 24);
            uint64_t v70 = *((void *)v9 - 8);
            __int16 v160 = 257;
            if (v41 >= v44)
            {
              unsigned int v71 = v22;
            }
            else
            {
              int v22 = v24;
              unsigned int v71 = v24;
            }
            int v109 = (uint64_t *)sub_1CB845034(v69, v70, v71, (uint64_t)&v157);
            uint64_t v110 = *(void *)(a1 + 24);
            uint64_t v111 = *((void *)v9 - 4);
            __int16 v160 = 257;
            uint64_t v112 = sub_1CB845034(v110, v111, v22, (uint64_t)&v157);
            uint64_t v113 = *(void *)(a1 + 24);
            __int16 v160 = 257;
            uint64_t v114 = sub_1CD68B480(v113, v109, (uint64_t)v112, (llvm::Instruction *)v9, (uint64_t)&v157);
            __int16 v160 = 257;
            return llvm::CastInst::CreateFPCast(v114, (llvm::Type ***)v8, (const char **)&v157, 0, v115);
          default:
            break;
        }
      }
    }
  }
  uint64_t v155 = 0;
  int v14 = (uint64_t ***)*((void *)a2 - 4);
  unsigned int v15 = *((unsigned __int8 *)v14 + 16);
  if (v14)
  {
    if (v15 >= 0x1C)
    {
      int v16 = v14[1];
      if (v16)
      {
        if (!v16[1])
        {
          uint64_t v29 = *(void *)(a1 + 24);
          int v30 = *(_DWORD *)(v29 + 96);
          uint64_t v31 = *(void *)(v29 + 88);
          char v32 = *(unsigned char *)(v29 + 100);
          char v33 = *(unsigned char *)(v29 + 101);
          char v34 = *(unsigned char *)(v29 + 102);
          if (sub_1CB845E74(*((void *)a2 - 4)))
          {
            int v35 = *((unsigned __int8 *)v14 + 17) >> 1;
            if (v35 == 127) {
              int v35 = -1;
            }
            *(_DWORD *)(*(void *)(a1 + 24) + 96) = v35;
          }
          unsigned int v157 = &v155;
          if (sub_1CC04C34C((void **)&v157, (uint64_t)v14))
          {
            uint64_t v36 = *(void *)(a1 + 24);
            __int16 v160 = 257;
            uint64_t v37 = (uint64_t *)sub_1CB845034(v36, v155, (uint64_t *)v8, (uint64_t)&v157);
            __int16 v160 = 257;
            char v38 = v34;
            uint64_t v7 = llvm::UnaryOperator::Create(12, v37, (const char **)&v157, 0);
            llvm::Instruction::copyIRFlags((uint64_t)v7, (uint64_t)v14, 1);
            *(_DWORD *)(v29 + 96) = v30;
            *(void *)(v29 + 88) = v31;
            *(unsigned char *)(v29 + 100) = v32;
            *(unsigned char *)(v29 + 101) = v33;
            *(unsigned char *)(v29 + 102) = v38;
            return (llvm::Value *)v7;
          }
          unsigned int v150 = 0;
          v161[0] = 0;
          uint64_t v154 = 0;
          unsigned int v157 = &v150;
          unint64_t v158 = v161;
          v159[0] = &v154;
          if (sub_1CCA48788((void **)&v157, (uint64_t)v14) && *(void *)v161[0] == v8)
          {
            char v149 = v34;
            uint64_t v72 = *(void *)(a1 + 24);
            __int16 v160 = 257;
            uint64_t v73 = sub_1CB845034(v72, v154, (uint64_t *)v8, (uint64_t)&v157);
            unint64_t v74 = *(llvm::IRBuilderBase **)(a1 + 24);
            int v75 = v150;
            unsigned int v76 = (llvm::Instruction *)v161[0];
          }
          else
          {
            unsigned int v157 = &v150;
            unint64_t v158 = &v154;
            v159[0] = v161;
            if (!sub_1CCA4883C((void **)&v157, (uint64_t)v14) || *(void *)v161[0] != v8)
            {
              *(_DWORD *)(v29 + 96) = v30;
              *(void *)(v29 + 88) = v31;
              *(unsigned char *)(v29 + 100) = v32;
              *(unsigned char *)(v29 + 101) = v33;
              *(unsigned char *)(v29 + 102) = v34;
              int v14 = (uint64_t ***)*((void *)a2 - 4);
              unsigned int v15 = *((unsigned __int8 *)v14 + 16);
              goto LABEL_16;
            }
            char v149 = v34;
            uint64_t v77 = *(void *)(a1 + 24);
            __int16 v160 = 257;
            unsigned int v76 = sub_1CB845034(v77, v154, (uint64_t *)v8, (uint64_t)&v157);
            unint64_t v74 = *(llvm::IRBuilderBase **)(a1 + 24);
            int v75 = v150;
            uint64_t v73 = (llvm::Instruction *)v161[0];
          }
          unsigned int v157 = "narrow.sel";
          __int16 v160 = 259;
          Select = llvm::IRBuilderBase::CreateSelect(v74, v75, v76, v73, (const llvm::Twine *)&v157, v14);
          uint64_t v7 = sub_1CC9D3C84(a1, a2, Select);
          *(_DWORD *)(v29 + 96) = v30;
          *(void *)(v29 + 88) = v31;
          *(unsigned char *)(v29 + 100) = v32;
          *(unsigned char *)(v29 + 101) = v33;
          *(unsigned char *)(v29 + 102) = v149;
          return (llvm::Value *)v7;
        }
      }
    }
  }
LABEL_16:
  if (v15 != 84) {
    goto LABEL_118;
  }
  uint64_t v17 = (uint64_t)*(v14 - 4);
  if (!v17 || *(unsigned char *)(v17 + 16) || *(uint64_t ***)(v17 + 24) != v14[9] || (*(unsigned char *)(v17 + 33) & 0x20) == 0) {
    goto LABEL_118;
  }
  char v18 = 0;
  int v19 = *(_DWORD *)(v17 + 36);
  if (v19 <= 257)
  {
    BOOL v79 = (v19 - 139) < 2 || v19 == 14;
    if (!v79 && v19 != 203) {
      goto LABEL_118;
    }
  }
  else if (v19 > 1829)
  {
    if (v19 != 1830 && v19 != 2131)
    {
      if (v19 != 1851) {
        goto LABEL_118;
      }
      uint64_t v80 = v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
      if (v80)
      {
        unsigned int v81 = *((unsigned __int8 *)v80 + 16);
        if (v81 >= 0x1C && v81 != 89)
        {
          if (v81 != 84) {
            goto LABEL_118;
          }
          uint64_t v82 = (uint64_t)*(v80 - 4);
          if (!v82) {
            goto LABEL_118;
          }
          if (*(unsigned char *)(v82 + 16)) {
            goto LABEL_118;
          }
          if (*(uint64_t **)(v82 + 24) != v80[9]) {
            goto LABEL_118;
          }
          if ((*(unsigned char *)(v82 + 33) & 0x20) == 0) {
            goto LABEL_118;
          }
          int v83 = *(_DWORD *)(v82 + 36);
          if ((v83 - 1282) >= 0x190 && (v83 - 2824) > 0xB) {
            goto LABEL_118;
          }
        }
      }
    }
    char v18 = 1;
  }
  else if ((v19 - 258) > 0x26 || ((1 << (v19 - 2)) & 0x4000000007) == 0)
  {
    goto LABEL_118;
  }
  uint64_t v84 = (uint64_t)v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
  uint64_t v85 = *(void *)(v84 + 8);
  if (v85 && !*(void *)(v85 + 8))
  {
    char v91 = v19 == 139 ? 1 : v18;
    if ((v91 & 1) != 0 || *(unsigned char *)(v84 + 16) == 74 && **(void **)(v84 - 32) == v8)
    {
      uint64_t v92 = *(void *)(a1 + 24);
      __int16 v160 = 257;
      uint64_t v93 = sub_1CB845034(v92, v84, (uint64_t *)v8, (uint64_t)&v157);
      uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)a2 + 5) + 56) + 40), *((_DWORD *)*(v14 - 4) + 9), (uint64_t)&v156, 1);
      unsigned int v157 = v159;
      unint64_t v158 = (uint64_t *)0x100000000;
      if ((*((_DWORD *)v14 + 5) & 0x80000000) != 0)
      {
        Descriptor = llvm::User::getDescriptor((llvm::User *)v14);
        if ((*((_DWORD *)v14 + 5) & 0x80000000) != 0)
        {
          uint8x8_t v134 = llvm::User::getDescriptor((llvm::User *)v14);
          unsigned int v96 = &v134[v135];
LABEL_132:
          unint64_t v97 = v96 - Descriptor;
          if ((v97 & 0xFFFFFFFF0) != 0)
          {
            uint64_t v136 = 0;
            uint64_t v137 = (v97 >> 4);
            do
            {
              int v138 = llvm::User::getDescriptor((llvm::User *)v14);
              uint64_t v139 = *(unsigned int *)&v138[v136 + 8];
              uint64_t v140 = (llvm::Value *)&(&v14[4 * v139])[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
              uint64_t v141 = *(void *)&v138[v136];
              uint64_t v142 = *(unsigned int *)&v138[v136 + 12] - v139;
              unsigned int v150 = v140;
              uint64_t v151 = v142;
              uint64_t v152 = v141;
              sub_1CD5C74F0((uint64_t)&v157, (uint64_t)&v150);
              v136 += 16;
              --v137;
            }
            while (v137);
          }
          if (Declaration) {
            unint64_t v98 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            unint64_t v98 = 0;
          }
          v161[0] = (uint64_t)v93;
          uint64_t v99 = (char *)v157;
          uint64_t v100 = v158;
          if ((*((unsigned char *)v14 + 23) & 0x10) == 0)
          {
            uint64_t v118 = 0;
            unsigned int v117 = (llvm::Value *)&byte_1CFBCE98E;
            goto LABEL_150;
          }
          uint64_t v101 = ***v14;
          uint64_t v102 = *(void *)(v101 + 152);
          uint64_t v103 = *(unsigned int *)(v101 + 168);
          if (v103)
          {
            LODWORD(v104) = (v103 - 1) & ((v14 >> 4) ^ (v14 >> 9));
            uint64_t v105 = (uint64_t ****)(v102 + 16 * v104);
            uint64_t v106 = *v105;
            if (*v105 == v14)
            {
LABEL_149:
              __int16 v116 = (uint64_t *)v105[1];
              uint64_t v119 = *v116;
              unsigned int v117 = (llvm::Value *)(v116 + 2);
              uint64_t v118 = v119;
LABEL_150:
              __int16 v153 = 261;
              unsigned int v150 = v117;
              uint64_t v151 = v118;
              if (v158)
              {
                int v143 = 0;
                uint64_t v144 = 48 * v158;
                double v145 = (char *)v157 + 32;
                do
                {
                  v143 += (*v145 - *(v145 - 1)) >> 3;
                  v145 += 6;
                  v144 -= 48;
                }
                while (v144);
                unsigned int v120 = v143 + 2;
              }
              else
              {
                unsigned int v120 = 2;
              }
              __int16 v121 = llvm::User::operator new((llvm::User *)0x50, v120, 16 * (int)v158);
              uint64_t v7 = v121;
              if (v100)
              {
                int v146 = 0;
                uint64_t v147 = 48 * v100;
                unsigned int v148 = v99 + 32;
                do
                {
                  v146 += (*v148 - *(v148 - 1)) >> 3;
                  v148 += 6;
                  v147 -= 48;
                }
                while (v147);
                int v122 = (v146 + 2) & 0x7FFFFFF;
              }
              else
              {
                int v122 = 2;
              }
              *(void *)__int16 v121 = *v98[2];
              *((void *)v121 + 1) = 0;
              unsigned int v123 = *((_DWORD *)v121 + 5) & 0xC0000000 | v122;
              *((_DWORD *)v121 + 4) = 84;
              *((_DWORD *)v121 + 5) = v123;
              *(_OWORD *)(v121 + 24) = 0u;
              *(_OWORD *)(v121 + 40) = 0u;
              *((_DWORD *)v121 + 14) = 0;
              *((void *)v121 + 8) = 0;
              llvm::CallInst::init((uint64_t ***)v121, v98, (uint64_t **)Declaration, v161, 1, (uint64_t)v99, v100, (const char **)&v150);
              v7[17] = *((unsigned char *)v14 + 17) & 0xFE | v7[17] & 1;
              uint64_t v124 = v157;
              if (v158)
              {
                uint64_t v125 = 48 * v158;
                uint64_t v126 = (char *)v157 - 48;
                do
                {
                  sub_1CD4AF9B4((uint64_t)&v126[v125]);
                  v125 -= 48;
                }
                while (v125);
                uint64_t v124 = v157;
              }
              if (v124 != v159) {
                free(v124);
              }
              return (llvm::Value *)v7;
            }
            int v107 = 1;
            while (v106 != (uint64_t ***)-4096)
            {
              int v108 = v104 + v107++;
              uint64_t v104 = v108 & (v103 - 1);
              uint64_t v106 = *(uint64_t ****)(v102 + 16 * v104);
              if (v106 == v14)
              {
                uint64_t v105 = (uint64_t ****)(v102 + 16 * v104);
                goto LABEL_149;
              }
            }
          }
          uint64_t v105 = (uint64_t ****)(v102 + 16 * v103);
          goto LABEL_149;
        }
      }
      else
      {
        Descriptor = 0;
      }
      unsigned int v96 = 0;
      goto LABEL_132;
    }
  }
LABEL_118:
  uint64_t v7 = sub_1CCA3E2A8((unsigned __int8 *)a2, *(uint64_t **)(a1 + 24));
  if (!v7)
  {
    uint64_t v86 = *((void *)a2 - 4);
    if (*(unsigned __int8 *)(v86 + 16) - 71 <= 1 && sub_1CCA429E8(*((uint64_t **)a2 - 4)))
    {
      int v87 = *(unsigned __int8 *)(v86 + 16) - 28;
      uint64_t v88 = *(void *)(v86 - 32);
      __int16 v160 = 257;
      return llvm::CastInst::Create(v87, v88, v8, (const char **)&v157, 0);
    }
    else
    {
      return 0;
    }
  }
  return (llvm::Value *)v7;
}

double sub_1CCA42810(llvm::detail::DoubleAPFloat *a1)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 16);
  if (!a1 || v2 != 74)
  {
    if (a1 && v2 == 17)
    {
      if (sub_1CCA475D8(a1)) {
        return result;
      }
      unsigned int v2 = *((unsigned __int8 *)a1 + 16);
    }
    if (!a1 || v2 != 5 || *((_WORD *)a1 + 9) != 46)
    {
      if (v2 >= 0x15) {
        unsigned int v4 = 0;
      }
      else {
        unsigned int v4 = a1;
      }
      uint64_t v5 = *(void *)a1;
      if (*(unsigned char *)(*(void *)a1 + 8) != 18) {
        uint64_t v5 = 0;
      }
      if (v2 <= 0x14 && v5 != 0)
      {
        uint64_t v7 = (llvm::Type *)*(unsigned int *)(v5 + 32);
        if (v7)
        {
          uint64_t v8 = 0;
          int v9 = 0;
          while (1)
          {
            AggregateElement = (llvm::detail::DoubleAPFloat *)llvm::Constant::getAggregateElement(v4, v8);
            if (!AggregateElement) {
              break;
            }
            if (*((unsigned char *)AggregateElement + 16) != 17) {
              break;
            }
            uint64_t v11 = sub_1CCA475D8(AggregateElement);
            if (!v11) {
              break;
            }
            if (!v9) {
              goto LABEL_41;
            }
            if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
            {
              uint64_t v16 = v11;
              do
              {
                uint64_t v16 = *(void *)(v16 + 24);
                unsigned int v12 = *(_DWORD *)(v16 + 8);
                if (v16) {
                  BOOL v17 = (*(_DWORD *)(v16 + 8) & 0xFE) == 18;
                }
                else {
                  BOOL v17 = 0;
                }
              }
              while (v17);
            }
            else
            {
              unsigned int v12 = *(_DWORD *)(v11 + 8);
            }
            if (v12 >= 5) {
              int v13 = v12 == 5 ? 113 : -1;
            }
            else {
              int v13 = dword_1CFB27824[(char)v12];
            }
            if ((*((_DWORD *)v9 + 2) & 0xFE) == 0x12)
            {
              char v18 = v9;
              do
              {
                char v18 = (llvm::FixedVectorType *)*((void *)v18 + 3);
                unsigned int v14 = *((_DWORD *)v18 + 2);
                if (v18) {
                  BOOL v19 = (*((_DWORD *)v18 + 2) & 0xFE) == 18;
                }
                else {
                  BOOL v19 = 0;
                }
              }
              while (v19);
            }
            else
            {
              unsigned int v14 = *((_DWORD *)v9 + 2);
            }
            if (v14 >= 5) {
              int v15 = v14 == 5 ? 113 : -1;
            }
            else {
              int v15 = dword_1CFB27824[(char)v14];
            }
            if (v13 > v15) {
LABEL_41:
            }
              int v9 = (llvm::FixedVectorType *)v11;
            uint64_t v8 = (llvm::Type *)(v8 + 1);
            if (v8 == v7) {
              return llvm::FixedVectorType::get(v9, v7);
            }
          }
        }
        else
        {
          int v9 = 0;
          return llvm::FixedVectorType::get(v9, v7);
        }
      }
    }
  }
  return result;
}

BOOL sub_1CCA429E8(uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  uint64_t v3 = *(a1 - 4);
  unsigned int v4 = *(llvm::Type **)v3;
  uint64_t v5 = *a1;
  if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
    unsigned int v4 = (llvm::Type *)**((void **)v4 + 2);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  if (v5) {
    BOOL v7 = (*(_DWORD *)(v5 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    do
    {
      uint64_t v5 = *(void *)(v5 + 24);
      unsigned int v8 = *(_DWORD *)(v5 + 8);
      if (v5) {
        BOOL v22 = (*(_DWORD *)(v5 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v22 = 0;
      }
    }
    while (v22);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(v5 + 8);
  }
  if (v8 >= 5)
  {
    if (v8 == 5) {
      int v9 = 113;
    }
    else {
      int v9 = -1;
    }
  }
  else
  {
    int v9 = dword_1CFB27824[(char)v8];
  }
  if (PrimitiveSizeInBits - (v2 == 72) <= v9) {
    return 1;
  }
  uint64_t v25 = &v26;
  BOOL v26 = 0;
  if ((sub_1CCA47AD4(&v25, v3) & 1) == 0)
  {
    uint64_t v24 = &v26;
    if ((sub_1CCA47B40(&v24, v3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v11 = *v26;
  int v12 = *(_DWORD *)(*v26 + 8);
  unsigned int v13 = v12;
  if (*v26 && (v12 & 0xFE) == 0x12)
  {
    do
    {
      uint64_t v11 = *(void *)(v11 + 24);
      unsigned int v13 = *(_DWORD *)(v11 + 8);
      if (v11) {
        BOOL v23 = (*(_DWORD *)(v11 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v23 = 0;
      }
    }
    while (v23);
  }
  if (v13 >= 5)
  {
    if (v13 == 5) {
      int v14 = 113;
    }
    else {
      int v14 = -1;
    }
  }
  else
  {
    int v14 = dword_1CFB27824[(char)v13];
  }
  if (v2 != 72)
  {
    unsigned int v16 = *(unsigned __int8 *)(v3 + 16);
    BOOL v17 = v16 > 0x1B || v16 == 5;
    int v18 = v17;
    if (v17)
    {
      if (v16 <= 0x1B) {
        unsigned int v19 = *(unsigned __int16 *)(v3 + 18);
      }
      else {
        unsigned int v19 = v16 - 28;
      }
      BOOL v10 = v19 == 42;
    }
    v14 += v18 & v10;
  }
  return v9 > 0 && v14 > 0 && v14 <= v9;
}

llvm::ZExtInst *sub_1CCA42BA8(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = (unsigned __int8 *)*((void *)a2 - 4);
  if (v2[16] - 71 > 1) {
    return 0;
  }
  int v6 = (llvm::Value *)*((void *)v2 - 4);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)a2;
  int v9 = a2[16];
  BOOL v10 = sub_1CCA429E8(*((uint64_t **)a2 - 4));
  int v11 = *(_DWORD *)(v8 + 8);
  if (!v10)
  {
    int v12 = (llvm::Type *)v8;
    if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
      int v12 = **(llvm::Type ***)(v8 + 16);
    }
    int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v12);
    uint64_t v14 = *(void *)v2;
    if (*(void *)v2 && (*(_DWORD *)(*(void *)v2 + 8) & 0xFE) == 18)
    {
      do
      {
        uint64_t v14 = *(void *)(v14 + 24);
        unsigned int v16 = *(_DWORD *)(v14 + 8);
        if (v14) {
          BOOL v25 = (*(_DWORD *)(v14 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v25 = 0;
        }
      }
      while (v25);
    }
    else
    {
      unsigned int v16 = *(_DWORD *)(*(void *)v2 + 8);
    }
    if (v16 >= 5) {
      int v17 = v16 == 5 ? 113 : -1;
    }
    else {
      int v17 = dword_1CFB27824[(char)v16];
    }
    if (PrimitiveSizeInBits - (v9 == 70) > v17) {
      return 0;
    }
  }
  int v18 = (llvm::Type *)v8;
  if ((v11 & 0xFE) == 0x12) {
    int v18 = **(llvm::Type ***)(v8 + 16);
  }
  unsigned int v19 = llvm::Type::getPrimitiveSizeInBits(v18);
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  unsigned int v20 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v7);
  if (v19 > v20)
  {
    int v22 = v2[16];
    BOOL v23 = operator new(0x60uLL);
    v23[13] = v23[13] & 0x38000000 | 1;
    uint64_t v24 = (llvm::SExtInst *)(v23 + 8);
    *(void *)BOOL v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = 0;
    *((void *)v23 + 3) = v23 + 8;
    if (v22 == 72 && v9 == 70)
    {
      __int16 v27 = 257;
      return llvm::SExtInst::SExtInst(v24, v6, (llvm::Type *)v8, v26, 0);
    }
    else
    {
      __int16 v27 = 257;
      return llvm::ZExtInst::ZExtInst(v24, v6, (llvm::Type *)v8, v26, 0);
    }
  }
  else if (v19 >= v20)
  {
    return (llvm::ZExtInst *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v6);
  }
  else
  {
    BOOL v21 = operator new(0x60uLL);
    v21[13] = v21[13] & 0x38000000 | 1;
    *(void *)BOOL v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = v21 + 8;
    __int16 v27 = 257;
    return llvm::TruncInst::TruncInst((llvm::TruncInst *)(v21 + 8), v6, (llvm::Type *)v8, v26, 0);
  }
}

llvm::Instruction *sub_1CCA42E14(uint64_t a1, unsigned __int8 *a2)
{
  double result = sub_1CCA42BA8(a1, a2);
  if (!result)
  {
    return sub_1CCA39904(a1, (llvm::Instruction *)a2, v5, v6, v7);
  }
  return result;
}

llvm::Instruction *sub_1CCA42E64(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
  }
  uint64_t v6 = **((void **)a2 - 4);
  BOOL v7 = (llvm::Type *)v6;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    BOOL v7 = **(llvm::Type ***)(v6 + 16);
  }
  unsigned int v8 = v5 >> 8;
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v7);
  uint64_t v13 = *(void *)(a1 + 80);
  if (v5 < 0x100) {
    goto LABEL_14;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 240);
  uint64_t v15 = *(void *)(v13 + 232);
  if (v14)
  {
    uint64_t v15 = *(void *)(v13 + 232);
    unint64_t v16 = *(unsigned int *)(v13 + 240);
    do
    {
      unint64_t v17 = v16 >> 1;
      uint64_t v18 = v15 + 16 * (v16 >> 1);
      unsigned int v19 = *(_DWORD *)(v18 + 8);
      uint64_t v20 = v18 + 16;
      v16 += ~(v16 >> 1);
      if (v19 < v8) {
        uint64_t v15 = v20;
      }
      else {
        unint64_t v16 = v17;
      }
    }
    while (v16);
  }
  if (v15 == *(void *)(v13 + 232) + 16 * v14 || *(_DWORD *)(v15 + 8) != v8) {
LABEL_14:
  }
    uint64_t v15 = *(void *)(v13 + 232);
  if (*(_DWORD *)(v15 + 4) == PrimitiveSizeInBits)
  {
    return sub_1CCA39904(a1, a2, v9, v10, v11);
  }
  else
  {
    IntPtrType = (llvm::FixedVectorType *)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)v13, *(llvm::LLVMContext **)v4, v5 >> 8);
    uint64_t v23 = (uint64_t)IntPtrType;
    if (v6 && (*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get(IntPtrType, (llvm::Type *)(*(unsigned int *)(v6 + 32) | ((unint64_t)(*(_DWORD *)(v6 + 8) == 19) << 32)));
      uint64_t v23 = v29;
    }
    uint64_t v24 = *(void *)(a1 + 24);
    BOOL v25 = (unsigned __int8 *)*((void *)a2 - 4);
    __int16 v31 = 257;
    BOOL v26 = sub_1CB844B8C(v24, v25, v23, (uint64_t)v30);
    __int16 v27 = operator new(0x60uLL);
    v27[13] = v27[13] & 0x38000000 | 1;
    *(void *)__int16 v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = v27 + 8;
    unsigned int v28 = *(llvm::Type **)a2;
    __int16 v31 = 257;
    return llvm::IntToPtrInst::IntToPtrInst((llvm::IntToPtrInst *)(v27 + 8), v26, v28, v30, 0);
  }
}

llvm::Instruction *sub_1CCA43044(uint64_t a1, llvm::Instruction *this, uint64_t a3, uint64_t a4, BOOL a5)
{
  BOOL v7 = (uint64_t *)*((void *)this - 4);
  if (!v7
    || *((unsigned char *)v7 + 16) != 62
    || !llvm::GetElementPtrInst::hasAllZeroIndices(*((llvm::GetElementPtrInst **)this - 4)))
  {
LABEL_6:
    return sub_1CCA39904(a1, this, a3, a4, a5);
  }
  if (*((unsigned char *)this + 16) == 78)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = (void *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
    if (v8 != *v9) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = (void *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
  }
  int v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x40000000) != 0) {
    int v12 = (uint64_t *)*((void *)this - 1);
  }
  else {
    int v12 = (uint64_t *)((char *)this - 32 * (v11 & 0x7FFFFFF));
  }
  uint64_t v13 = *v12;
  if (v13 && *(unsigned __int8 *)(v13 + 16) >= 0x1Cu)
  {
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v33 = v13;
    if (*(unsigned char *)(v19 + 2088))
    {
      uint64_t v21 = v19 + 2096;
      int v20 = 16;
    }
    else
    {
      int v20 = *(_DWORD *)(v19 + 2104);
      if (!v20)
      {
        int v30 = 0;
        goto LABEL_40;
      }
      uint64_t v21 = *(void *)(v19 + 2096);
    }
    int v22 = v20 - 1;
    unsigned int v23 = v22 & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v24 = (void *)(v21 + 8 * v23);
    uint64_t v25 = *v24;
    if (v13 == *v24) {
      goto LABEL_14;
    }
    BOOL v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        BOOL v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      uint64_t v24 = (void *)(v21 + 8 * v23);
      uint64_t v25 = *v24;
      if (v13 == *v24) {
        goto LABEL_14;
      }
    }
    if (v26) {
      int v30 = v26;
    }
    else {
      int v30 = v24;
    }
LABEL_40:
    __int16 v31 = sub_1CBFD5BBC(v19 + 2088, (uint64_t)&v33, &v33, v30);
    void *v31 = v33;
    unsigned int v32 = *(_DWORD *)(v19 + 2232);
    if (v32 >= *(_DWORD *)(v19 + 2236)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v19 + 2224) + 8 * v32) = v33;
    ++*(_DWORD *)(v19 + 2232);
    int v11 = *((_DWORD *)this + 5);
  }
LABEL_14:
  if ((v11 & 0x40000000) != 0) {
    uint64_t v14 = (char *)*((void *)this - 1);
  }
  else {
    uint64_t v14 = (char *)this - 32 * (v11 & 0x7FFFFFF);
  }
  if (*(void *)v14)
  {
    **((void **)v14 + 2) = *((void *)v14 + 1);
    uint64_t v15 = *((void *)v14 + 1);
    if (v15) {
      *(void *)(v15 + 16) = *((void *)v14 + 2);
    }
  }
  *(void *)uint64_t v14 = v9;
  if (v9)
  {
    uint64_t v18 = v9[1];
    unint64_t v17 = v9 + 1;
    uint64_t v16 = v18;
    *((void *)v14 + 1) = v18;
    if (v18) {
      *(void *)(v16 + 16) = v14 + 8;
    }
    *((void *)v14 + 2) = v17;
    *unint64_t v17 = v14;
  }
  return this;
}

llvm::Instruction *sub_1CCA4328C(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  uint64_t v4 = (llvm::Instruction *)*((void *)a2 - 4);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)a2;
  unsigned int v7 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v7 & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
  }
  uint64_t v8 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(llvm::Type ***)(v6 + 16);
  }
  unsigned int v9 = v7 >> 8;
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v8);
  uint64_t v14 = *(void *)(a1 + 80);
  if (v7 < 0x100) {
    goto LABEL_14;
  }
  uint64_t v15 = *(unsigned int *)(v14 + 240);
  uint64_t v16 = *(void *)(v14 + 232);
  if (v15)
  {
    uint64_t v16 = *(void *)(v14 + 232);
    unint64_t v17 = *(unsigned int *)(v14 + 240);
    do
    {
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = v16 + 16 * (v17 >> 1);
      unsigned int v20 = *(_DWORD *)(v19 + 8);
      uint64_t v21 = v19 + 16;
      v17 += ~(v17 >> 1);
      if (v20 < v9) {
        uint64_t v16 = v21;
      }
      else {
        unint64_t v17 = v18;
      }
    }
    while (v17);
  }
  if (v16 == *(void *)(v14 + 232) + 16 * v15 || *(_DWORD *)(v16 + 8) != v9) {
LABEL_14:
  }
    uint64_t v16 = *(void *)(v14 + 232);
  if (*(_DWORD *)(v16 + 4) == PrimitiveSizeInBits)
  {
    uint64_t v22 = *((void *)v4 + 1);
    if (*((unsigned char *)v4 + 16) == 62
      && v22
      && !*(void *)(v22 + 8)
      && *(unsigned char *)(*((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)) + 16) == 19)
    {
      uint64_t v30 = *(void *)(a1 + 24);
      __int16 v31 = sub_1CD689458(a1, v4);
      __int16 v50 = 257;
      uint64_t v33 = sub_1CBF56614(v30, v31, (llvm::Type ***)v6, 0, (uint64_t)v49, v32);
      return (llvm::Instruction *)sub_1CC9D3C84(a1, a2, v33);
    }
    else
    {
      uint64_t v46 = 0;
      v47[0] = 0;
      unsigned int v45 = 0;
      v49[0] = v47;
      v49[1] = &v46;
      v49[2] = &v45;
      if (v22 && !*(void *)(v22 + 8) && sub_1CCA488C4(v49, (uint64_t)v4) && *(void *)v47[0] == v6)
      {
        uint64_t v36 = *(void *)(a1 + 24);
        if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
          uint64_t v6 = **(void **)(v6 + 16);
        }
        __int16 v50 = 257;
        uint64_t v37 = sub_1CB84580C(v36, 47, v46, v6, (uint64_t)v49);
        char v38 = (llvm::Value *)v47[0];
        int v39 = v45;
        __int16 v50 = 257;
        unsigned int v40 = operator new(0xA0uLL);
        uint64_t v41 = 0;
        int v42 = (llvm::InsertElementInst *)(v40 + 24);
        v40[29] = v40[29] & 0x38000000 | 3;
        do
        {
          unsigned int v43 = &v40[v41];
          *unsigned int v43 = 0;
          v43[1] = 0;
          v43[2] = 0;
          v43[3] = v42;
          v41 += 8;
        }
        while (v41 != 24);
        return llvm::InsertElementInst::InsertElementInst(v42, v38, v37, v39, (const char **)v49, 0);
      }
      else
      {
        return sub_1CCA43044(a1, a2, v10, v11, v12);
      }
    }
  }
  else
  {
    IntPtrType = (llvm::FixedVectorType *)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)v14, *(llvm::LLVMContext **)v6, v7 >> 8);
    uint64_t v26 = (uint64_t)IntPtrType;
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get(IntPtrType, (llvm::Type *)(*(unsigned int *)(v5 + 32) | ((unint64_t)(*(_DWORD *)(v5 + 8) == 19) << 32)));
      uint64_t v26 = v44;
    }
    uint64_t v27 = *(void *)(a1 + 24);
    __int16 v48 = 257;
    if (*(void *)v4 != v26)
    {
      if (*((unsigned __int8 *)v4 + 16) <= 0x14u)
      {
        uint64_t v4 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(v27 + 72) + 224))(*(void *)(v27 + 72), 47, v4, v26);
        if (v4) {
          BOOL v29 = *((unsigned __int8 *)v4 + 16) >= 0x1Cu;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29) {
          uint64_t v4 = sub_1CB844E0C((uint64_t *)v27, v4, (uint64_t)v47);
        }
      }
      else
      {
        __int16 v50 = 257;
        uint64_t v4 = llvm::CastInst::Create(47, (uint64_t)v4, v26, (const char **)v49, 0);
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(v27 + 80) + 16))(*(void *)(v27 + 80), v4, v47, *(void *)(v27 + 48), *(void *)(v27 + 56));
        uint64_t v28 = *(unsigned int *)(v27 + 8);
        if (v28)
        {
          uint64_t v34 = *(void *)v27;
          uint64_t v35 = v34 + 16 * v28;
          do
          {
            llvm::Instruction::setMetadata(v4, *(_DWORD *)v34, *(llvm::MDNode **)(v34 + 8));
            v34 += 16;
          }
          while (v34 != v35);
        }
      }
    }
    __int16 v50 = 257;
    return llvm::CastInst::CreateIntegerCast(v4, (llvm::Type ***)v6, 0, (const char **)v49, 0, v25);
  }
}

uint64_t sub_1CCA43680(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  int v4 = sub_1CCA489E4(a1, *a2, &v11);
  if (v4) {
    return v4 ^ 1u;
  }
  int v5 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_12;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_12:
    sub_1CCA48A90(a1, v6);
    uint64_t v11 = 0;
    sub_1CCA489E4(a1, *a2, &v11);
  }
  unsigned int v7 = v11;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *unsigned int v7 = *a2;
  uint64_t v8 = *a2;
  unsigned int v9 = *(_DWORD *)(a1 + 48);
  if (v9 >= *(_DWORD *)(a1 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 40) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 48);
  return v4 ^ 1u;
}

llvm::Value *sub_1CCA437AC(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = (void *)a1;
  v553[3] = *(unsigned __int8 **)MEMORY[0x1E4F143B8];
  unsigned int v6 = (llvm::Value *)*((void *)a2 - 4);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)a2;
  v534 = (llvm::Type *)v8;
  if (v8 == v7)
  {
    return (llvm::Value *)sub_1CC9D3C84(a1, a2, v6);
  }
  if (*(unsigned char *)(v7 + 8) != 15 || *(unsigned char *)(v8 + 8) != 15) {
    goto LABEL_109;
  }
  uint64_t v9 = v8;
  uint64_t v10 = v7;
  uint64_t v11 = (uint64_t *)v6;
  if (*((unsigned char *)v6 + 16) == 59)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v7;
    uint64_t v11 = (uint64_t *)v6;
    if (*(void *)(v8 + 24))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)v551 = v12;
      long long v552 = *(_OWORD *)(v12 + 48);
      uint64_t v13 = *(unsigned int *)(v12 + 8);
      if (v13)
      {
        uint64_t v170 = (unsigned __int8 **)(*(void *)v12 + 8);
        uint64_t v171 = 16 * v13;
        uint64_t v14 = a2;
        while (*((_DWORD *)v170 - 2))
        {
          v170 += 2;
          v171 -= 16;
          if (!v171) {
            goto LABEL_7;
          }
        }
        v553[0] = *v170;
        if (v553[0])
        {
          uint64_t v172 = v7;
          llvm::MetadataTracking::track((uint64_t)v553, v553[0], 2);
          uint64_t v7 = v172;
          uint64_t v12 = v5[3];
        }
      }
      else
      {
LABEL_7:
        v553[0] = 0;
        uint64_t v14 = a2;
      }
      uint64_t v528 = v7;
      *(void *)(v12 + 48) = *((void *)v6 + 5);
      *(void *)(v12 + 56) = (char *)v6 + 24;
      uint64_t v15 = (unsigned __int8 *)*((void *)v6 + 6);
      *(void *)v542 = v15;
      if (v15)
      {
        llvm::MetadataTracking::track((uint64_t)v542, v15, 2);
        uint64_t v16 = *(void *)v542;
      }
      else
      {
        uint64_t v16 = 0;
      }
      sub_1CB8461A4(v12, 0, v16);
      if (!*(void *)v542) {
        goto LABEL_11;
      }
      int v41 = **(unsigned char **)v542;
      if ((v41 - 4) > 0x1E)
      {
        if ((v41 - 3) >= 0xFFFFFFFE) {
          uint64_t v164 = *(void *)v542;
        }
        else {
          uint64_t v164 = 0;
        }
        if ((v41 - 3) < 0xFFFFFFFE)
        {
          if (v41 == 3) {
            *(void *)(*(void *)v542 + 8) = 0;
          }
          goto LABEL_11;
        }
        unint64_t v43 = v164 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*(void *)v542 + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)v542 + 12)) {
          goto LABEL_11;
        }
        uint64_t v42 = *(void *)(*(void *)v542 + 16);
        if ((v42 & 4) == 0) {
          goto LABEL_11;
        }
        unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
        if (!v43) {
          goto LABEL_11;
        }
      }
      uint64_t v545 = (uint64_t)v542;
      sub_1CC5FA668(v43 + 16, &v545);
LABEL_11:
      unint64_t v17 = (unsigned __int8 *)*((void *)v6 + 8);
      unint64_t v18 = **(unsigned __int8 ***)(v8 + 16);
      unsigned int v19 = v17[8];
      if (v19 > 0x11) {
        goto LABEL_33;
      }
      if (((1 << v19) & 0xAC7F) != 0) {
        goto LABEL_13;
      }
      if (((1 << v19) & 0x30000) == 0)
      {
LABEL_33:
        BOOL v39 = (v19 & 0xFE) == 0x12 || v19 == 21;
        if (!v39) {
          goto LABEL_56;
        }
      }
      __int16 v31 = 0;
      if (!llvm::Type::isSizedDerivedType(*((void *)v6 + 8), 0)) {
        goto LABEL_57;
      }
LABEL_13:
      unsigned int v20 = v18[8];
      if (v20 <= 0x11)
      {
        if (((1 << v20) & 0xAC7F) != 0)
        {
LABEL_15:
          if ((v20 == 19) != (v17[8] == 19)) {
            goto LABEL_56;
          }
          unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 80), (llvm::Type *)v17, 1);
          unsigned __int8 v22 = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 80), (llvm::Type *)v18, 1);
          if (v22 < Alignment) {
            goto LABEL_56;
          }
          uint64_t v23 = *((void *)v6 + 1);
          if ((!v23 || *(void *)(v23 + 8)) && v22 == Alignment) {
            goto LABEL_56;
          }
          uint64_t v24 = *(void *)(a1 + 80);
          unint64_t v25 = (unint64_t)(sub_1CB83544C(v24, (uint64_t)v17) + 7) >> 3;
          LOBYTE(v24) = llvm::DataLayout::getAlignment((llvm::DataLayout *)v24, (llvm::Type *)v17, 1);
          uint64_t v26 = 1 << v24;
          unint64_t v27 = (1 << v24) + v25 - 1;
          uint64_t v28 = *(llvm::DataLayout **)(a1 + 80);
          uint64_t v29 = sub_1CB83544C((uint64_t)v28, (uint64_t)v18);
          char v30 = llvm::DataLayout::getAlignment(v28, (llvm::Type *)v18, 1);
          if (!(v27 >> v24))
          {
            __int16 v31 = 0;
            uint64_t v14 = a2;
            goto LABEL_57;
          }
          __int16 v31 = 0;
          uint64_t v32 = 1 << v30;
          unint64_t v33 = (1 << v30) + ((unint64_t)(v29 + 7) >> 3) - 1;
          uint64_t v14 = a2;
          if (!(v33 >> v30)) {
            goto LABEL_57;
          }
          uint64_t v34 = sub_1CB83544C(*(void *)(a1 + 80), (uint64_t)v17);
          uint64_t v35 = sub_1CB83544C(*(void *)(a1 + 80), (uint64_t)v18);
          uint64_t v36 = *((void *)v6 + 1);
          BOOL v37 = !v36 || *(void *)(v36 + 8) != 0;
          uint64_t v14 = a2;
          if (v37 && (unint64_t)(v35 + 7) >> 3 < (unint64_t)(v34 + 7) >> 3) {
            goto LABEL_56;
          }
          uint64_t v44 = -v26;
          unint64_t v45 = v33 & -v32;
          unint64_t v46 = v27 & v44;
          LODWORD(v535[0]) = 0;
          uint64_t v539 = 0;
          unsigned int v47 = (llvm::Instruction *)sub_1CCA38DD0(*((void **)v6 - 4), v535, &v539);
          __int16 v31 = 0;
          unint64_t v48 = v46 * LODWORD(v535[0]);
          if (v48 % v45) {
            goto LABEL_57;
          }
          unint64_t v49 = v539 * v46;
          if (v49 % v45) {
            goto LABEL_56;
          }
          unsigned int v183 = v47;
          if ((v48 / v45) != 1)
          {
            v184 = llvm::ConstantInt::get(**((llvm::ConstantInt ***)v6 - 4), (v48 / v45), 0);
            uint64_t v185 = *(void *)(a1 + 24);
            v547.i16[4] = 257;
            unsigned int v183 = sub_1CC09A1EC(v185, (uint64_t)v184, (uint64_t)v183, (uint64_t)&v545, 0, 0);
          }
          if (v45 <= v49)
          {
            uint64_t v186 = llvm::ConstantInt::get(**((llvm::ConstantInt ***)v6 - 4), v49 / v45, (const llvm::APInt *)1);
            uint64_t v187 = *(void *)(a1 + 24);
            v547.i16[4] = 257;
            unsigned int v183 = sub_1CB844A3C(v187, v183, (uint64_t)v186, (uint64_t)&v545, 0, 0);
          }
          uint64_t v188 = *(void *)(a1 + 24);
          unsigned int v189 = (llvm::Type *)(*(_DWORD *)(*(void *)v6 + 8) >> 8);
          v547.i16[4] = 257;
          unsigned int v190 = sub_1CD63F438(v188, (llvm::Type *)v18, v189, v183, (uint64_t)&v545);
          *((_WORD *)v190 + 9) = *((_WORD *)v190 + 9) & 0xFFC0 | __clz(1 << *((_WORD *)v6 + 9)) ^ 0x3F;
          llvm::Value::takeName((int32x2_t ****)v190, v6);
          *((_WORD *)v190 + 9) = *((_WORD *)v190 + 9) & 0xFFBF | *((_WORD *)v6 + 9) & 0x40;
          uint64_t v191 = *((void *)v6 + 1);
          if (!v191 || *(void *)(v191 + 8))
          {
            unsigned int v192 = *(uint64_t **)(a1 + 24);
            uint64_t v193 = *(void *)v6;
            *(void *)v542 = "tmpcast";
            __int16 v544 = 259;
            unint64_t v194 = v190;
            if (*(void *)v190 != v193)
            {
              if (*((unsigned __int8 *)v190 + 16) <= 0x14u)
              {
                uint64_t v474 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v192[9]
                                                                                                 + 224))(v192[9], 49, v190, v193);
                unint64_t v194 = (llvm::Instruction *)v474;
                if (v474)
                {
                  if (*(unsigned __int8 *)(v474 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v192[10] + 16))(v192[10], v474, v542, v192[6], v192[7]);
                    uint64_t v517 = *((unsigned int *)v192 + 2);
                    if (v517)
                    {
                      uint64_t v518 = *v192;
                      uint64_t v519 = v518 + 16 * v517;
                      do
                      {
                        llvm::Instruction::setMetadata(v194, *(_DWORD *)v518, *(llvm::MDNode **)(v518 + 8));
                        v518 += 16;
                      }
                      while (v518 != v519);
                    }
                  }
                }
              }
              else
              {
                v547.i16[4] = 257;
                unint64_t v194 = llvm::CastInst::Create(49, (uint64_t)v190, v193, (const char **)&v545, 0);
                (*(void (**)(uint64_t, llvm::Instruction *, BOOL *, uint64_t, uint64_t))(*(void *)v192[10]
                                                                                               + 16))(v192[10], v194, v542, v192[6], v192[7]);
                uint64_t v195 = *((unsigned int *)v192 + 2);
                if (v195)
                {
                  uint64_t v196 = *v192;
                  uint64_t v197 = v196 + 16 * v195;
                  do
                  {
                    llvm::Instruction::setMetadata(v194, *(_DWORD *)v196, *(llvm::MDNode **)(v196 + 8));
                    v196 += 16;
                  }
                  while (v196 != v197);
                }
              }
            }
            sub_1CC9D3C84(a1, v6, v194);
            sub_1CC9D6844(a1, (uint64_t)v6);
          }
          uint64_t v14 = a2;
          __int16 v31 = sub_1CC9D3C84(a1, a2, v190);
LABEL_57:
          uint64_t v50 = *(void *)v551;
          if ((void)v552)
          {
            sub_1CBF5385C(*(uint64_t *)v551, v552, *((uint64_t *)&v552 + 1));
            uint64_t v50 = *(void *)v551;
          }
          else
          {
            *(void *)(*(void *)v551 + 48) = 0;
            *(void *)(v50 + 56) = 0;
          }
          int v5 = (void *)a1;
          *(unsigned __int8 **)v542 = v553[0];
          if (v553[0])
          {
            llvm::MetadataTracking::track((uint64_t)v542, v553[0], 2);
            uint64_t v51 = *(void *)v542;
          }
          else
          {
            uint64_t v51 = 0;
          }
          sub_1CB8461A4(v50, 0, v51);
          uint64_t v7 = v528;
          if (!*(void *)v542) {
            goto LABEL_63;
          }
          int v173 = **(unsigned char **)v542;
          if ((v173 - 4) > 0x1E)
          {
            if ((v173 - 3) >= 0xFFFFFFFE) {
              uint64_t v179 = *(void *)v542;
            }
            else {
              uint64_t v179 = 0;
            }
            if ((v173 - 3) < 0xFFFFFFFE)
            {
              if (v173 == 3) {
                *(void *)(*(void *)v542 + 8) = 0;
              }
LABEL_63:
              if (v553[0])
              {
                int v176 = *v553[0];
                if ((v176 - 4) > 0x1E)
                {
                  if ((v176 - 3) >= 0xFFFFFFFE) {
                    unint64_t v180 = v553[0];
                  }
                  else {
                    unint64_t v180 = 0;
                  }
                  if ((v176 - 3) < 0xFFFFFFFE)
                  {
                    if (v176 == 3) {
                      *((void *)v553[0] + 1) = 0;
                    }
                    goto LABEL_64;
                  }
                  unint64_t v178 = (unint64_t)(v180 + 8);
                }
                else
                {
                  if ((v553[0][1] & 0x7F) != 2 && !*((_DWORD *)v553[0] + 3)) {
                    goto LABEL_64;
                  }
                  uint64_t v177 = *((void *)v553[0] + 2);
                  if ((v177 & 4) == 0) {
                    goto LABEL_64;
                  }
                  unint64_t v178 = v177 & 0xFFFFFFFFFFFFFFF8;
                  if (!v178) {
                    goto LABEL_64;
                  }
                }
                uint64_t v545 = (uint64_t)v553;
                sub_1CC5FA668(v178 + 16, &v545);
                uint64_t v7 = v528;
              }
LABEL_64:
              if (v31) {
                return (llvm::Value *)v31;
              }
              uint64_t v11 = (uint64_t *)*((void *)v14 - 4);
              uint64_t v10 = *v11;
              uint64_t v9 = *(void *)v14;
              goto LABEL_66;
            }
            unint64_t v175 = v179 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*(void *)v542 + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)v542 + 12)) {
              goto LABEL_63;
            }
            uint64_t v174 = *(void *)(*(void *)v542 + 16);
            if ((v174 & 4) == 0) {
              goto LABEL_63;
            }
            unint64_t v175 = v174 & 0xFFFFFFFFFFFFFFF8;
            if (!v175) {
              goto LABEL_63;
            }
          }
          uint64_t v545 = (uint64_t)v542;
          sub_1CC5FA668(v175 + 16, &v545);
          uint64_t v7 = v528;
          goto LABEL_63;
        }
        if (((1 << v20) & 0x30000) != 0) {
          goto LABEL_31;
        }
      }
      if ((v20 & 0xFE) == 0x12 || v20 == 21)
      {
LABEL_31:
        __int16 v31 = 0;
        if (!llvm::Type::isSizedDerivedType((uint64_t)v18, 0)) {
          goto LABEL_57;
        }
        unsigned int v20 = v18[8];
        goto LABEL_15;
      }
LABEL_56:
      __int16 v31 = 0;
      goto LABEL_57;
    }
  }
LABEL_66:
  if (!*(void *)(v10 + 24) || !*(void *)(v9 + 24)) {
    goto LABEL_109;
  }
  uint64_t v52 = v5[3];
  uint64_t v53 = (const llvm::DataLayout *)v5[10];
  uint64_t v54 = **(void **)(v9 + 16);
  uint64_t v55 = **(void **)(v10 + 16);
  unsigned int v56 = *(unsigned __int8 *)(v55 + 8);
  if (v56 > 0x11) {
    goto LABEL_105;
  }
  if (((1 << v56) & 0xAC7F) == 0)
  {
    if (((1 << v56) & 0x30000) != 0)
    {
LABEL_103:
      uint64_t v74 = v7;
      int isSizedDerivedType = llvm::Type::isSizedDerivedType(**(void **)(v10 + 16), 0);
      uint64_t v7 = v74;
      if (!isSizedDerivedType) {
        goto LABEL_109;
      }
      goto LABEL_70;
    }
LABEL_105:
    if ((v56 & 0xFE) != 0x12 && v56 != 21) {
      goto LABEL_109;
    }
    goto LABEL_103;
  }
LABEL_70:
  if (v55 == v54)
  {
    int v57 = 0;
    goto LABEL_88;
  }
  int v57 = 1;
  while (1)
  {
    int v58 = *(_DWORD *)(v55 + 8);
    if (v58 != 17) {
      break;
    }
LABEL_75:
    uint64_t v59 = (uint64_t *)(v55 + 24);
LABEL_76:
    uint64_t v55 = *v59;
    ++v57;
    if (*v59) {
      BOOL v60 = v55 == v54;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      --v57;
      goto LABEL_85;
    }
  }
  if (v58 != 16)
  {
    if ((v58 & 0xFE) != 0x12) {
      goto LABEL_84;
    }
    goto LABEL_75;
  }
  if (*(_DWORD *)(v55 + 12))
  {
    uint64_t v59 = *(uint64_t **)(v55 + 16);
    goto LABEL_76;
  }
LABEL_84:
  uint64_t v55 = 0;
LABEL_85:
  if (v55 == v54)
  {
LABEL_88:
    uint64_t v61 = (v57 + 1);
    uint64_t v62 = **(void **)(v52 + 64);
    char v63 = *(llvm::ConstantInt **)(v62 + 1960);
    v546.i32[0] = *(_DWORD *)(v62 + 1968) >> 8;
    if (v546.i32[0] > 0x40u) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v545);
    }
    uint64_t v545 = 0;
    unint64_t v64 = llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v545, (const llvm::APInt *)a3);
    if (v546.i32[0] >= 0x41u && v545) {
      MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
    }
    uint64_t v545 = (uint64_t)&v546.i64[1];
    v546.i32[1] = 8;
    if (v61 >= 9)
    {
      v546.i32[0] = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v57 != -1)
    {
      uint64_t v65 = &v546.i64[1];
      uint64_t v66 = (v57 + 1);
      do
      {
        *v65++ = (uint64_t)v64;
        --v66;
      }
      while (v66);
    }
    v546.i32[0] = v57 + 1;
    uint64_t v67 = **(void **)(v10 + 16);
    uint64_t v68 = (uint64_t *)v545;
    uint64_t v69 = (v57 + 2);
    __int16 v544 = 257;
    uint64_t v70 = operator new(32 * v69 + 80);
    __int16 v31 = &v70[4 * v69];
    *((_DWORD *)v31 + 5) = *((_DWORD *)v31 + 5) & 0x38000000 | v69 & 0x7FFFFFF;
    if (v57 != -2)
    {
      do
      {
        void *v70 = 0;
        v70[1] = 0;
        v70[2] = 0;
        v70[3] = v31;
        v70 += 4;
      }
      while (v70 != v31);
    }
    sub_1CB845A7C(v67, v11, (uint64_t)v68, v61);
    void *v31 = v71;
    v31[1] = 0;
    int v72 = *((_DWORD *)v31 + 5) & 0xC0000000 | v69 & 0x7FFFFFF;
    *((_DWORD *)v31 + 4) = 62;
    *((_DWORD *)v31 + 5) = v72;
    *(_OWORD *)(v31 + 3) = 0u;
    *(_OWORD *)(v31 + 5) = 0u;
    *((_DWORD *)v31 + 14) = 0;
    v31[8] = v67;
    v31[9] = llvm::GetElementPtrInst::getIndexedType(v67, (uint64_t)v68, v61);
    llvm::GetElementPtrInst::init((uint64_t ***)v31, (uint64_t **)v11, v68, v61, (const char **)v542);
    v542[0] = 0;
    v551[0] = 0;
    if (llvm::Value::getPointerDereferenceableBytes((uint64_t ***)v11, v53, v542, v551)
      && (*(_DWORD *)(v10 + 8) < 0x100u || !v542[0]))
    {
      *((unsigned char *)v31 + 17) |= 2u;
    }
    uint64_t v73 = (void *)v545;
    if ((unint64_t *)v545 != &v546.u64[1]) {
      goto LABEL_101;
    }
    return (llvm::Value *)v31;
  }
LABEL_109:
  int v77 = *(unsigned __int8 *)(v7 + 8);
  if (v8) {
    BOOL v78 = *(unsigned char *)(v8 + 8) == 18;
  }
  else {
    BOOL v78 = 0;
  }
  if (!v78)
  {
    BOOL v79 = (uint64_t ***)a2;
    goto LABEL_114;
  }
  unsigned int v83 = *(_DWORD *)(v8 + 32);
  if (v83 == 1 && v77 == 10)
  {
    uint64_t v110 = (uint64_t *)v5[3];
    uint64_t v111 = *(void *)(v8 + 24);
    __int16 v544 = 257;
    uint64_t v112 = a2;
    if (*(void *)v6 != v111)
    {
      if (*((unsigned __int8 *)v6 + 16) <= 0x14u)
      {
        unsigned int v6 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v110[9]
                                                                                                + 224))(v110[9], 49, v6, v111);
        if (v6) {
          BOOL v123 = *((unsigned __int8 *)v6 + 16) >= 0x1Cu;
        }
        else {
          BOOL v123 = 0;
        }
        if (v123)
        {
          (*(void (**)(uint64_t, llvm::Value *, BOOL *, uint64_t, uint64_t))(*(void *)v110[10] + 16))(v110[10], v6, v542, v110[6], v110[7]);
          uint64_t v480 = *((unsigned int *)v110 + 2);
          if (v480)
          {
            uint64_t v484 = *v110;
            uint64_t v485 = v484 + 16 * v480;
            do
            {
              llvm::Instruction::setMetadata(v6, *(_DWORD *)v484, *(llvm::MDNode **)(v484 + 8));
              v484 += 16;
            }
            while (v484 != v485);
          }
          uint64_t v112 = a2;
        }
      }
      else
      {
        v547.i16[4] = 257;
        unsigned int v6 = llvm::CastInst::Create(49, (uint64_t)v6, v111, (const char **)&v545, 0);
        (*(void (**)(uint64_t, llvm::Value *, BOOL *, uint64_t, uint64_t))(*(void *)v110[10] + 16))(v110[10], v6, v542, v110[6], v110[7]);
        uint64_t v113 = *((unsigned int *)v110 + 2);
        if (v113)
        {
          uint64_t v114 = *v110;
          uint64_t v115 = v114 + 16 * v113;
          do
          {
            llvm::Instruction::setMetadata(v6, *(_DWORD *)v114, *(llvm::MDNode **)(v114 + 8));
            v114 += 16;
          }
          while (v114 != v115);
        }
      }
    }
    uint64_t v124 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)v8, a2);
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)(***(void ***)v112 + 1960), v125, v126);
    v547.i16[4] = 257;
    unsigned int v128 = operator new(0xA0uLL);
    uint64_t v129 = 0;
    __int16 v31 = v128 + 24;
    v128[29] = v128[29] & 0x38000000 | 3;
    do
    {
      uint64_t v130 = &v128[v129];
      *uint64_t v130 = 0;
      v130[1] = 0;
      v130[2] = 0;
      v130[3] = v31;
      v129 += 8;
    }
    while (v129 != 24);
    llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v128 + 24), v124, v6, NullValue, (const char **)&v545, 0);
    return (llvm::Value *)v31;
  }
  BOOL v79 = (uint64_t ***)a2;
  if (v77 != 13) {
    goto LABEL_114;
  }
  if ((*((unsigned char *)v6 + 16) & 0xFE) != 0x42) {
    goto LABEL_134;
  }
  uint64_t v85 = *((void *)v6 - 4);
  if (!v85) {
    goto LABEL_134;
  }
  if (*(unsigned char *)(v85 + 16) != 77) {
    goto LABEL_134;
  }
  uint64_t v86 = *(unsigned __int8 **)(v85 - 32);
  uint64_t v87 = *(void *)v86;
  if ((*(_DWORD *)(*(void *)v86 + 8) & 0xFE) != 0x12) {
    goto LABEL_134;
  }
  uint64_t v88 = *(llvm::Type **)(v87 + 24);
  unsigned int v89 = *(llvm::Type **)(v8 + 24);
  if (v88 == v89) {
    goto LABEL_194;
  }
  uint64_t v90 = v7;
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v88);
  int v93 = v92;
  unint64_t v94 = llvm::Type::getPrimitiveSizeInBits(v89);
  uint64_t v7 = v90;
  if (PrimitiveSizeInBits != v94 || v93 != v95)
  {
LABEL_134:
    uint64_t v529 = v7;
    uint64_t v97 = *(void *)a2;
    unint64_t v98 = (unsigned __int8 *)*((void *)a2 - 4);
    uint64_t v99 = *(unsigned int *)(*(void *)a2 + 32);
    uint64_t v545 = (uint64_t)&v546.i64[1];
    v546.i32[1] = 8;
    if (v99 >= 9)
    {
      v546.i32[0] = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v99) {
      bzero(&v546.u64[1], 8 * v99);
    }
    v546.i32[0] = v99;
    if (sub_1CCA47C3C(v98, 0, (uint64_t)&v545, *(llvm::Type **)(v97 + 24), *(unsigned __int8 *)v5[10]))
    {
      uint64_t v100 = (unsigned __int8 *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, a2, (const llvm::APFloat *)a3);
      uint64_t v101 = v546.u32[0];
      if (v546.i32[0])
      {
        uint64_t v102 = 0;
        do
        {
          uint64_t v103 = *(unsigned __int8 **)(v545 + 8 * v102);
          if (v103)
          {
            uint64_t v104 = *(void *)(a1 + 24);
            uint64_t v105 = **(void **)(v104 + 64);
            uint64_t v106 = *(llvm::ConstantInt **)(v105 + 1960);
            unint64_t v107 = *(unsigned int *)(v105 + 1968);
            LODWORD(v543) = v107 >> 8;
            if (v107 >> 8 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)v542);
            }
            if (v107 <= 0xFF) {
              unint64_t v108 = 0;
            }
            else {
              unint64_t v108 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v107);
            }
            *(void *)v542 = v108 & v102;
            int v109 = (unsigned __int8 *)llvm::ConstantInt::get(v106, (llvm::LLVMContext *)v542, (const llvm::APInt *)a3);
            if (v543 >= 0x41 && *(void *)v542) {
              MEMORY[0x1D25D9CB0](*(void *)v542, 0x1000C8000313F17);
            }
            __int16 v544 = 257;
            uint64_t v100 = (unsigned __int8 *)sub_1CB84478C(v104, v100, v103, v109, (uint64_t)v542);
          }
          ++v102;
        }
        while (v101 != v102);
      }
    }
    else
    {
      uint64_t v100 = 0;
    }
    if ((unint64_t *)v545 != &v546.u64[1]) {
      free((void *)v545);
    }
    BOOL v79 = (uint64_t ***)a2;
    int v5 = (void *)a1;
    if (v100) {
      return (llvm::Value *)sub_1CC9D3C84(a1, a2, (llvm::Value *)v100);
    }
    uint64_t v7 = v529;
    int v77 = *(unsigned __int8 *)(v529 + 8);
LABEL_114:
    if (v77 == 18)
    {
      uint64_t v80 = v534;
      if (*(_DWORD *)(v7 + 32) == 1)
      {
        if ((*((_DWORD *)v534 + 2) & 0xFE) != 0x12)
        {
          uint64_t v131 = v5[3];
          uint64_t v132 = (unsigned __int8 *)llvm::Constant::getNullValue((llvm::Constant *)(***v79 + 1960), a2, (const llvm::APFloat *)a3);
          v547.i16[4] = 257;
          BOOL v133 = sub_1CB8445F4(v131, (unsigned __int8 *)v6, v132, (uint64_t)&v545);
          v547.i16[4] = 257;
          return llvm::CastInst::Create(49, (uint64_t)v133, (uint64_t)v534, (const char **)&v545, 0);
        }
        if (v6 && *((unsigned char *)v6 + 16) == 90)
        {
          unsigned int v81 = operator new(0x60uLL);
          __int16 v31 = v81 + 8;
          v81[13] = v81[13] & 0x38000000 | 1;
          *(void *)unsigned int v81 = 0;
          *((void *)v81 + 1) = 0;
          *((void *)v81 + 2) = 0;
          *((void *)v81 + 3) = v81 + 8;
          uint64_t v82 = (llvm::Value *)*((void *)v6 - 8);
          v547.i16[4] = 257;
          llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v81 + 8), v82, v80, (const char **)&v545, 0);
          return (llvm::Value *)v31;
        }
      }
      uint64_t v116 = v7;
      unsigned int v117 = v534;
      if ((*((_DWORD *)v534 + 2) & 0xFE) == 0x12) {
        unsigned int v117 = (llvm::Type *)**((void **)v534 + 2);
      }
      unint64_t v118 = llvm::Type::getPrimitiveSizeInBits(v117);
      uint64_t v538 = 0;
      uint64_t v539 = 0;
      v535[0] = 0;
      uint64_t v545 = (uint64_t)&v539;
      v546.i64[0] = (uint64_t)v535;
      v546.i64[1] = (uint64_t)&v538;
      uint64_t v119 = *((void *)v6 + 1);
      if (v119 && !*(void *)(v119 + 8) && *((unsigned char *)v6 + 16) == 90)
      {
        unsigned int v120 = (const llvm::APInt *)v118;
        int v121 = *((_DWORD *)v6 + 5);
        int v122 = (v121 & 0x40000000) != 0
             ? (uint64_t *)*((void *)v6 - 1)
             : (uint64_t *)((char *)v6 - 32 * (v121 & 0x7FFFFFF));
        uint64_t v135 = *v122;
        uint64_t v136 = *(void *)(*v122 + 8);
        if (v136)
        {
          if (!*(void *)(v136 + 8) && sub_1CCA4756C((void **)&v545, v135))
          {
            int v137 = *((_DWORD *)v6 + 5);
            int v138 = (v137 & 0x40000000) != 0
                 ? (llvm::Value *)*((void *)v6 - 1)
                 : (llvm::Value *)((char *)v6 - 32 * (v137 & 0x7FFFFFF));
            uint64_t v161 = *((void *)v138 + 4);
            if (v161)
            {
              *(void *)v546.i64[0] = v161;
              int v162 = *((_DWORD *)v6 + 5);
              uint64_t v163 = (v162 & 0x40000000) != 0
                   ? (llvm::Value *)*((void *)v6 - 1)
                   : (llvm::Value *)((char *)v6 - 32 * (v162 & 0x7FFFFFF));
              uint64_t v165 = *((void *)v163 + 8);
              if (v165)
              {
                if (*(unsigned char *)(v165 + 16) == 16)
                {
                  int v166 = (void *)(v165 + 24);
                  uint64_t v167 = *(unsigned int *)(v165 + 32);
                  if (v167 >= 0x41)
                  {
                    int v490 = 0;
                    int64_t v491 = (unint64_t)(v167 + 63) >> 6;
                    do
                    {
                      BOOL v336 = v491-- < 1;
                      if (v336) {
                        break;
                      }
                      unint64_t v492 = *(void *)(*v166 + 8 * v491);
                      v490 += __clz(v492);
                    }
                    while (!v492);
                    int v493 = v167 | 0xFFFFFFC0;
                    if ((v167 & 0x3F) == 0) {
                      int v493 = 0;
                    }
                    BOOL v79 = (uint64_t ***)a2;
                    int v5 = (void *)a1;
                    if ((v167 - v490 - v493) <= 0x40)
                    {
                      int v166 = (void *)*v166;
                      goto LABEL_232;
                    }
                  }
                  else
                  {
LABEL_232:
                    *(void *)v546.i64[1] = *v166;
                    if (*((unsigned char *)v80 + 8) == 13 && *(llvm::Type **)v539 == v80)
                    {
                      uint64_t v168 = v535[0];
                      if (*(unsigned char *)(*(void *)v535[0] + 8) == 13 && sub_1CC9D1850((uint64_t)v5, v120))
                      {
                        if (*(unsigned char *)v5[10])
                        {
                          uint64_t v169 = (*(_DWORD *)(v116 + 32) - 1) - v538;
                          uint64_t v538 = v169;
                        }
                        else
                        {
                          uint64_t v169 = v538;
                        }
                        BOOL v79 = (uint64_t ***)a2;
                        int v5 = (void *)a1;
                        if (!v169)
                        {
                          __int16 v461 = *(llvm::Type **)v168;
                          if ((*(_DWORD *)(*(void *)v168 + 8) & 0xFE) == 0x12) {
                            __int16 v461 = (llvm::Type *)**((void **)v461 + 2);
                          }
                          unsigned int v462 = llvm::Type::getPrimitiveSizeInBits(v461);
                          LODWORD(v552) = v120;
                          if (v120 > 0x40) {
                            llvm::APInt::initSlowCase((llvm::APInt *)v551);
                          }
                          *(void *)v551 = 0;
                          unsigned int v463 = v120;
                          if (v462 != v120)
                          {
                            if (v462 > 0x3F) {
                              llvm::APInt::setBitsSlowCase(v551, v462, v120);
                            }
                            else {
                              *(void *)v551 |= 0xFFFFFFFFFFFFFFFFLL >> (v462 - v120) << v462;
                            }
                          }
                          uint64_t v464 = *(void *)(a1 + 24);
                          v465 = (void *)v539;
                          v547.i16[4] = 257;
                          v466 = *(llvm::ConstantInt ***)v539;
                          Splat = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v539, (llvm::LLVMContext *)v551, v463);
                          if ((v466[1] & 0xFE) == 0x12) {
                            Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v466 + 8) | ((unint64_t)(*((_DWORD *)v466 + 2) == 19) << 32)), (uint64_t)Splat);
                          }
                          v468 = sub_1CBF52474(v464, v465, (uint64_t)Splat, (uint64_t)&v545);
                          v469 = *(uint64_t **)(a1 + 24);
                          v470 = (llvm::Instruction *)v535[0];
                          __int16 v544 = 257;
                          if (*(llvm::Type **)v535[0] != v80)
                          {
                            if (*(unsigned __int8 *)(v535[0] + 16) <= 0x14u)
                            {
                              uint64_t v475 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::Type *))(*(void *)v469[9] + 224))(v469[9], 39, v535[0], v80);
                              v470 = (llvm::Instruction *)v475;
                              if (v475)
                              {
                                if (*(unsigned __int8 *)(v475 + 16) >= 0x1Cu)
                                {
                                  (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v469[10] + 16))(v469[10], v475, v542, v469[6], v469[7]);
                                  uint64_t v520 = *((unsigned int *)v469 + 2);
                                  if (v520)
                                  {
                                    uint64_t v521 = *v469;
                                    uint64_t v522 = v521 + 16 * v520;
                                    do
                                    {
                                      llvm::Instruction::setMetadata(v470, *(_DWORD *)v521, *(llvm::MDNode **)(v521 + 8));
                                      v521 += 16;
                                    }
                                    while (v521 != v522);
                                  }
                                }
                              }
                            }
                            else
                            {
                              v547.i16[4] = 257;
                              v470 = llvm::CastInst::Create(39, v535[0], (uint64_t)v80, (const char **)&v545, 0);
                              (*(void (**)(uint64_t, llvm::Instruction *, BOOL *, uint64_t, uint64_t))(*(void *)v469[10] + 16))(v469[10], v470, v542, v469[6], v469[7]);
                              uint64_t v471 = *((unsigned int *)v469 + 2);
                              if (v471)
                              {
                                uint64_t v472 = *v469;
                                uint64_t v473 = v472 + 16 * v471;
                                do
                                {
                                  llvm::Instruction::setMetadata(v470, *(_DWORD *)v472, *(llvm::MDNode **)(v472 + 8));
                                  v472 += 16;
                                }
                                while (v472 != v473);
                              }
                            }
                          }
                          v547.i16[4] = 257;
                          __int16 v31 = llvm::BinaryOperator::Create(29, v468, (uint64_t)v470, (const char **)&v545, 0);
                          if (v552 >= 0x41 && *(void *)v551) {
                            MEMORY[0x1D25D9CB0](*(void *)v551, 0x1000C8000313F17);
                          }
                          return (llvm::Value *)v31;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v7 = v116;
    }
    int v198 = *((unsigned __int8 *)v6 + 16);
    if (v6 && v198 == 91)
    {
      char v199 = (unsigned __int8 *)*((void *)v6 - 8);
      uint64_t v200 = *((void *)v6 + 1);
      int v201 = *(_DWORD *)(*(void *)v6 + 32);
      uint64_t v202 = *(llvm::Type **)v199;
      uint64_t v203 = *(unsigned int *)(*(void *)v199 + 32);
      if (v200)
      {
        uint64_t v204 = v534;
        if (!*(void *)(v200 + 8) && (*((_DWORD *)v534 + 2) & 0xFE) == 0x12)
        {
          int v205 = *(unsigned __int8 *)(*(void *)v6 + 8);
          if (*((_DWORD *)v534 + 8) == v201 && (v205 == 19) != (*((_DWORD *)v534 + 2) != 19))
          {
            int v206 = (v205 == 19) ^ (*((unsigned char *)v202 + 8) != 19);
            if (v201 == v203 && v206 != 0)
            {
              int v208 = (unsigned __int8 *)*((void *)v6 - 4);
              unsigned int v209 = v199[16];
              if (v209 == 77 && **((llvm::Type ***)v199 - 4) == v534)
              {
                v422 = (uint64_t *)v5[3];
                uint64_t v211 = v5 + 3;
                uint64_t v210 = v422;
                __int16 v544 = 257;
                if (v202 == v534) {
                  goto LABEL_695;
                }
                goto LABEL_693;
              }
              if (v208[16] == 77 && v208 && **((llvm::Type ***)v208 - 4) == v534)
              {
                uint64_t v212 = (uint64_t *)v5[3];
                uint64_t v211 = v5 + 3;
                uint64_t v210 = v212;
                __int16 v544 = 257;
                if (v202 == v534) {
                  goto LABEL_695;
                }
                if (v209 <= 0x14)
                {
                  uint64_t v213 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v210[9] + 224))(v210[9], 49, v199, v534);
                  char v199 = (unsigned __int8 *)v213;
                  if (v213 && *(unsigned __int8 *)(v213 + 16) >= 0x1Cu)
                  {
                    uint64_t v214 = v211;
                    (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v210[10] + 16))(v210[10], v213, v542, v210[6], v210[7]);
                    uint64_t v215 = *((unsigned int *)v210 + 2);
                    if (v215)
                    {
                      uint64_t v216 = *v210;
                      uint64_t v217 = v216 + 16 * v215;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v199, *(_DWORD *)v216, *(llvm::MDNode **)(v216 + 8));
                        v216 += 16;
                      }
                      while (v216 != v217);
                    }
                    goto LABEL_694;
                  }
                  goto LABEL_695;
                }
LABEL_693:
                uint64_t v214 = v211;
                v547.i16[4] = 257;
                char v199 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v199, (uint64_t)v534, (const char **)&v545, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v210[10] + 16))(v210[10], v199, v542, v210[6], v210[7]);
                uint64_t v423 = *((unsigned int *)v210 + 2);
                if (v423)
                {
                  uint64_t v459 = *v210;
                  uint64_t v460 = v459 + 16 * v423;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v199, *(_DWORD *)v459, *(llvm::MDNode **)(v459 + 8));
                    v459 += 16;
                  }
                  while (v459 != v460);
                }
LABEL_694:
                uint64_t v211 = v214;
LABEL_695:
                uint64_t v424 = (uint64_t *)*v211;
                __int16 v544 = 257;
                if (*(llvm::Type **)v208 != v534)
                {
                  if (v208[16] <= 0x14u)
                  {
                    int v208 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v424[9] + 224))(v424[9], 49, v208, v534);
                    if (v208) {
                      BOOL v431 = v208[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v431 = 0;
                    }
                    if (v431)
                    {
                      (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v424[10] + 16))(v424[10], v208, v542, v424[6], v424[7]);
                      uint64_t v495 = *((unsigned int *)v424 + 2);
                      if (v495)
                      {
                        uint64_t v496 = *v424;
                        uint64_t v497 = v496 + 16 * v495;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v208, *(_DWORD *)v496, *(llvm::MDNode **)(v496 + 8));
                          v496 += 16;
                        }
                        while (v496 != v497);
                      }
                    }
                  }
                  else
                  {
                    v547.i16[4] = 257;
                    int v208 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v208, (uint64_t)v534, (const char **)&v545, 0);
                    (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v424[10]
                                                                                                 + 16))(v424[10], v208, v542, v424[6], v424[7]);
                    uint64_t v425 = *((unsigned int *)v424 + 2);
                    if (v425)
                    {
                      uint64_t v426 = *v424;
                      uint64_t v427 = v426 + 16 * v425;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v208, *(_DWORD *)v426, *(llvm::MDNode **)(v426 + 8));
                        v426 += 16;
                      }
                      while (v426 != v427);
                    }
                  }
                }
                v432 = operator new(0xA8uLL);
                v432[21] = v432[21] & 0x38000000 | 2;
                __int16 v31 = v432 + 16;
                *(void *)v432 = 0;
                *((void *)v432 + 1) = 0;
                *((void *)v432 + 2) = 0;
                *((void *)v432 + 3) = v432 + 16;
                *((void *)v432 + 4) = 0;
                *((void *)v432 + 5) = 0;
                *((void *)v432 + 6) = 0;
                *((void *)v432 + 7) = v432 + 16;
                size_t v433 = (void *)*((void *)v6 + 8);
                size_t v434 = (llvm::Type *)*((unsigned int *)v6 + 18);
                v547.i16[4] = 257;
                llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v432 + 8, (uint64_t **)v199, (uint64_t **)v208, v433, v434, (const char **)&v545, 0);
                return (llvm::Value *)v31;
              }
            }
          }
        }
      }
      else
      {
        uint64_t v204 = v534;
      }
      if (*((unsigned char *)v204 + 8) == 13)
      {
        uint64_t v219 = v5[10];
        uint64_t v220 = v7;
        unsigned int v221 = llvm::Type::getPrimitiveSizeInBits(v204);
        uint64_t v222 = *(char **)(v219 + 32);
        size_t v223 = *(void *)(v219 + 40);
        uint64_t v224 = &v222[v223];
        if (v221 <= 0xFF)
        {
          uint64_t v225 = (char *)memchr(v222, (char)v221, v223);
          if (v225) {
            uint64_t v224 = v225;
          }
        }
        BOOL v39 = v224 - v222 == v223;
        int v5 = (void *)a1;
        uint64_t v7 = v220;
        if (!v39)
        {
          uint64_t v226 = (llvm::Type *)v220;
          if ((*(_DWORD *)(v220 + 8) & 0xFE) == 0x12) {
            uint64_t v226 = **(llvm::Type ***)(v220 + 16);
          }
          int v227 = llvm::Type::getPrimitiveSizeInBits(v226);
          uint64_t v7 = v220;
          if (v200)
          {
            if (v227 == 8 && (v201 & 1) == 0 && !*(void *)(v200 + 8) && v203 == *((_DWORD *)v6 + 18))
            {
              int isReverseMask = llvm::ShuffleVectorInst::isReverseMask(*((int **)v6 + 8), v203);
              uint64_t v7 = v220;
              if (isReverseMask)
              {
                uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)v79[5][7][5], 9, (uint64_t)&v534, 1);
                BOOL v230 = *(uint64_t **)(a1 + 24);
                __int16 v544 = 257;
                if (*(llvm::Type **)v199 != v534)
                {
                  if (v199[16] <= 0x14u)
                  {
                    uint64_t v428 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v230[9] + 224))(v230[9], 49, v199, v534);
                    char v199 = (unsigned __int8 *)v428;
                    if (v428)
                    {
                      if (*(unsigned __int8 *)(v428 + 16) >= 0x1Cu)
                      {
                        (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v230[10] + 16))(v230[10], v428, v542, v230[6], v230[7]);
                        uint64_t v498 = *((unsigned int *)v230 + 2);
                        if (v498)
                        {
                          uint64_t v499 = *v230;
                          uint64_t v500 = v499 + 16 * v498;
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v199, *(_DWORD *)v499, *(llvm::MDNode **)(v499 + 8));
                            v499 += 16;
                          }
                          while (v499 != v500);
                        }
                      }
                    }
                  }
                  else
                  {
                    v547.i16[4] = 257;
                    char v199 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v199, (uint64_t)v534, (const char **)&v545, 0);
                    (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v230[10]
                                                                                                 + 16))(v230[10], v199, v542, v230[6], v230[7]);
                    uint64_t v231 = *((unsigned int *)v230 + 2);
                    if (v231)
                    {
                      uint64_t v232 = *v230;
                      uint64_t v233 = v232 + 16 * v231;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v199, *(_DWORD *)v232, *(llvm::MDNode **)(v232 + 8));
                        v232 += 16;
                      }
                      while (v232 != v233);
                    }
                  }
                }
                if (Declaration) {
                  size_t v429 = *(uint64_t ***)(Declaration + 24);
                }
                else {
                  size_t v429 = 0;
                }
                *(void *)v542 = v199;
                v547.i16[4] = 257;
                size_t v430 = (char *)operator new(0x90uLL);
                *((_DWORD *)v430 + 21) = *((_DWORD *)v430 + 21) & 0x38000000 | 2;
                __int16 v31 = v430 + 64;
                *(void *)size_t v430 = 0;
                *((void *)v430 + 1) = 0;
                *((void *)v430 + 2) = 0;
                *((void *)v430 + 3) = v430 + 64;
                *((void *)v430 + 4) = 0;
                *((void *)v430 + 5) = 0;
                *((void *)v430 + 6) = 0;
                *((void *)v430 + 7) = v430 + 64;
                *((void *)v430 + 8) = *v429[2];
                *((void *)v430 + 9) = 0;
                v430[80] = 84;
                v430[81] = 0;
                *((_WORD *)v430 + 41) = 0;
                *((_DWORD *)v430 + 21) = 2;
                *((_DWORD *)v430 + 30) = 0;
                *(_OWORD *)(v430 + 104) = 0u;
                *(_OWORD *)(v430 + 88) = 0u;
                *((void *)v430 + 16) = 0;
                llvm::CallInst::init((uint64_t ***)v430 + 8, v429, (uint64_t **)Declaration, (uint64_t *)v542, 1, 0, 0, (const char **)&v545);
                return (llvm::Value *)v31;
              }
            }
          }
        }
      }
LABEL_445:
      uint64_t v274 = (uint64_t)*(v79 - 4);
      unsigned int v275 = *(unsigned __int8 *)(v274 + 16);
      if (v274)
      {
        if (v275 == 89)
        {
          uint64_t v276 = *(void *)(v274 + 8);
          if (v276)
          {
            if (!*(void *)(v276 + 8))
            {
              v296 = *v79;
              unsigned int v297 = *((unsigned __int8 *)*v79 + 8);
              BOOL v336 = v297 > 0x14;
              int v298 = (1 << v297) & 0x10A07F;
              if (!v336 && v298 != 0)
              {
                uint64_t v300 = **(void **)(v274 - 64);
                uint64_t v301 = (llvm::Type *)*(unsigned int *)(v300 + 32);
                if (*(unsigned char *)(v300 + 8) == 19) {
                  v303.n128_f64[0] = llvm::ScalableVectorType::get(v296, v301);
                }
                else {
                  v303.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v296, v301);
                }
                v304 = (uint64_t *)v5[3];
                uint64_t v305 = *(unsigned __int8 **)(v274 - 64);
                *(void *)v542 = "bc";
                __int16 v544 = 259;
                if (*(void *)v305 != v302)
                {
                  if (v305[16] <= 0x14u)
                  {
                    uint64_t v305 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, __n128))(*(void *)v304[9] + 224))(v304[9], 49, v305, v302, v303);
                    if (v305) {
                      BOOL v321 = v305[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v321 = 0;
                    }
                    if (v321)
                    {
                      (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v304[10] + 16))(v304[10], v305, v542, v304[6], v304[7]);
                      uint64_t v481 = *((unsigned int *)v304 + 2);
                      if (v481)
                      {
                        uint64_t v482 = *v304;
                        uint64_t v483 = v482 + 16 * v481;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v305, *(_DWORD *)v482, *(llvm::MDNode **)(v482 + 8));
                          v482 += 16;
                        }
                        while (v482 != v483);
                      }
                    }
                  }
                  else
                  {
                    v547.i16[4] = 257;
                    uint64_t v305 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v305, v302, (const char **)&v545, 0);
                    (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v304[10]
                                                                                                 + 16))(v304[10], v305, v542, v304[6], v304[7]);
                    uint64_t v306 = *((unsigned int *)v304 + 2);
                    if (v306)
                    {
                      uint64_t v307 = *v304;
                      uint64_t v308 = v307 + 16 * v306;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v305, *(_DWORD *)v307, *(llvm::MDNode **)(v307 + 8));
                        v307 += 16;
                      }
                      while (v307 != v308);
                    }
                  }
                }
                uint64_t v322 = *(llvm::Value **)(v274 - 32);
                v547.i16[4] = 257;
                BOOL v323 = operator new(0x80uLL);
                v323[21] = v323[21] & 0x38000000 | 2;
                __int16 v31 = v323 + 16;
                *(void *)BOOL v323 = 0;
                *((void *)v323 + 1) = 0;
                *((void *)v323 + 2) = 0;
                *((void *)v323 + 3) = v323 + 16;
                *((void *)v323 + 4) = 0;
                *((void *)v323 + 5) = 0;
                *((void *)v323 + 6) = 0;
                *((void *)v323 + 7) = v323 + 16;
                llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v323 + 16), (llvm::Value *)v305, v322, (const char **)&v545, 0);
                return (llvm::Value *)v31;
              }
            }
          }
        }
      }
      uint64_t v277 = (uint64_t)*v79;
      int v278 = (*v79)[1] & 0xFE;
      if (v278 == 18) {
        int v279 = *(unsigned __int8 *)(**(void **)(v277 + 16) + 8);
      }
      else {
        int v279 = *((_DWORD *)*v79 + 2);
      }
      if (v279 != 13) {
        goto LABEL_455;
      }
      uint64_t v280 = *(void *)(v274 + 8);
      if (!v280
        || *(void *)(v280 + 8)
        || v275 < 0x1C
        || v275 - 59 <= 0xFFFFFFFC
        || v278 != 18
        || (*(_DWORD *)(*(void *)v274 + 8) & 0xFE) != 0x12)
      {
        goto LABEL_455;
      }
      uint64_t v309 = (uint64_t *)v5[3];
      *(void *)v551 = 0;
      uint64_t v310 = *(void *)(v274 - 64);
      uint64_t v545 = (uint64_t)v551;
      uint64_t v311 = *(void *)(v310 + 8);
      if (v311
        && !*(void *)(v311 + 8)
        && (v312 = v7, v313 = sub_1CCA4756C((void **)&v545, v310), uint64_t v7 = v312, v313)
        && **(void **)v551 == v277
        && *(unsigned __int8 *)(*(void *)v551 + 16) >= 0x15u)
      {
        uint64_t v437 = *(unsigned __int8 **)(v274 - 32);
        __int16 v544 = 257;
        if (*(void *)v437 != v277)
        {
          if (v437[16] <= 0x14u)
          {
            uint64_t v450 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v309[9] + 224))(v309[9], 49, v437, v277);
            uint64_t v437 = (unsigned __int8 *)v450;
            if (v450)
            {
              if (*(unsigned __int8 *)(v450 + 16) >= 0x1Cu)
              {
                (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v450, v542, v309[6], v309[7]);
                uint64_t v511 = *((unsigned int *)v309 + 2);
                if (v511)
                {
                  uint64_t v512 = *v309;
                  uint64_t v513 = *v309 + 16 * v511;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v437, *(_DWORD *)v512, *(llvm::MDNode **)(v512 + 8));
                    v512 += 16;
                  }
                  while (v512 != v513);
                }
              }
            }
            BOOL v79 = (uint64_t ***)a2;
          }
          else
          {
            v547.i16[4] = 257;
            uint64_t v437 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v437, v277, (const char **)&v545, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v437, v542, v309[6], v309[7]);
            uint64_t v438 = *((unsigned int *)v309 + 2);
            if (v438)
            {
              uint64_t v439 = *v309;
              uint64_t v440 = *v309 + 16 * v438;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v437, *(_DWORD *)v439, *(llvm::MDNode **)(v439 + 8));
                v439 += 16;
              }
              while (v439 != v440);
            }
          }
        }
        char v451 = *(unsigned char *)(v274 + 16) - 28;
        unsigned int v452 = *(void **)v551;
        v547.i16[4] = 257;
        uint64_t v453 = (uint64_t)v437;
      }
      else
      {
        uint64_t v314 = *(void *)(v274 - 32);
        uint64_t v545 = (uint64_t)v551;
        uint64_t v315 = *(void *)(v314 + 8);
        if (!v315
          || *(void *)(v315 + 8)
          || (v312 = v7, v316 = sub_1CCA4756C((void **)&v545, v314), uint64_t v7 = v312, !v316)
          || **(void **)v551 != v277
          || *(unsigned __int8 *)(*(void *)v551 + 16) < 0x15u)
        {
          uint64_t v317 = *(unsigned __int8 **)(v274 - 32);
          if (v317 && v317[16] < 0x15u)
          {
            uint64_t v318 = *(unsigned __int8 **)(v274 - 64);
            __int16 v544 = 257;
            if (*(void *)v318 != v277)
            {
              uint64_t v319 = v7;
              if (v318[16] <= 0x14u)
              {
                uint64_t v418 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v309[9]
                                                                                               + 224))(v309[9], 49, v318, v277);
                uint64_t v318 = (unsigned __int8 *)v418;
                if (v418 && *(unsigned __int8 *)(v418 + 16) >= 0x1Cu)
                {
                  (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v418, v542, v309[6], v309[7]);
                  uint64_t v494 = *((unsigned int *)v309 + 2);
                  if (v494)
                  {
                    uint64_t v503 = *v309;
                    uint64_t v504 = *v309 + 16 * v494;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v318, *(_DWORD *)v503, *(llvm::MDNode **)(v503 + 8));
                      v503 += 16;
                    }
                    while (v503 != v504);
                  }
                  BOOL v79 = (uint64_t ***)a2;
                  int v5 = (void *)a1;
                }
              }
              else
              {
                v547.i16[4] = 257;
                uint64_t v318 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v318, v277, (const char **)&v545, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v318, v542, v309[6], v309[7]);
                uint64_t v320 = *((unsigned int *)v309 + 2);
                if (v320)
                {
                  uint64_t v455 = *v309;
                  uint64_t v456 = *v309 + 16 * v320;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v318, *(_DWORD *)v455, *(llvm::MDNode **)(v455 + 8));
                    v455 += 16;
                  }
                  while (v455 != v456);
                }
                int v5 = (void *)a1;
              }
              uint64_t v7 = v319;
            }
            __int16 v544 = 257;
            uint64_t v312 = v7;
            if (*(void *)v317 != v277)
            {
              if (v317[16] <= 0x14u)
              {
                uint64_t v317 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v309[9] + 224))(v309[9], 49, v317, v277);
                if (v317) {
                  BOOL v420 = v317[16] >= 0x1Cu;
                }
                else {
                  BOOL v420 = 0;
                }
                if (v420)
                {
                  (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v309[10]
                                                                                               + 16))(v309[10], v317, v542, v309[6], v309[7]);
                  uint64_t v486 = *((unsigned int *)v309 + 2);
                  if (v486)
                  {
                    uint64_t v501 = *v309;
                    uint64_t v502 = *v309 + 16 * v486;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v317, *(_DWORD *)v501, *(llvm::MDNode **)(v501 + 8));
                      v501 += 16;
                    }
                    while (v501 != v502);
                  }
                  BOOL v79 = (uint64_t ***)a2;
                  int v5 = (void *)a1;
                }
              }
              else
              {
                v547.i16[4] = 257;
                uint64_t v317 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v317, v277, (const char **)&v545, 0);
                (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v317, v542, v309[6], v309[7]);
                uint64_t v419 = *((unsigned int *)v309 + 2);
                if (v419)
                {
                  uint64_t v457 = *v309;
                  uint64_t v458 = *v309 + 16 * v419;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v317, *(_DWORD *)v457, *(llvm::MDNode **)(v457 + 8));
                    v457 += 16;
                  }
                  while (v457 != v458);
                }
                int v5 = (void *)a1;
              }
            }
            char v421 = *(unsigned char *)(v274 + 16) - 28;
            v547.i16[4] = 257;
            __int16 v31 = llvm::BinaryOperator::Create(v421, v318, (uint64_t)v317, (const char **)&v545, 0);
            goto LABEL_689;
          }
          goto LABEL_455;
        }
        v441 = *(unsigned __int8 **)(v274 - 64);
        __int16 v544 = 257;
        if (*(void *)v441 != v277)
        {
          if (v441[16] <= 0x14u)
          {
            uint64_t v454 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v309[9] + 224))(v309[9], 49, v441, v277);
            v441 = (unsigned __int8 *)v454;
            if (v454)
            {
              if (*(unsigned __int8 *)(v454 + 16) >= 0x1Cu)
              {
                (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v454, v542, v309[6], v309[7]);
                uint64_t v514 = *((unsigned int *)v309 + 2);
                if (v514)
                {
                  uint64_t v515 = *v309;
                  uint64_t v516 = *v309 + 16 * v514;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v441, *(_DWORD *)v515, *(llvm::MDNode **)(v515 + 8));
                    v515 += 16;
                  }
                  while (v515 != v516);
                }
              }
            }
            BOOL v79 = (uint64_t ***)a2;
          }
          else
          {
            v547.i16[4] = 257;
            v441 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v441, v277, (const char **)&v545, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v309[10] + 16))(v309[10], v441, v542, v309[6], v309[7]);
            uint64_t v442 = *((unsigned int *)v309 + 2);
            if (v442)
            {
              uint64_t v443 = *v309;
              uint64_t v444 = *v309 + 16 * v442;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v441, *(_DWORD *)v443, *(llvm::MDNode **)(v443 + 8));
                v443 += 16;
              }
              while (v443 != v444);
            }
          }
        }
        char v451 = *(unsigned char *)(v274 + 16) - 28;
        uint64_t v453 = *(void *)v551;
        v547.i16[4] = 257;
        unsigned int v452 = v441;
      }
      __int16 v31 = llvm::BinaryOperator::Create(v451, v452, v453, (const char **)&v545, 0);
      int v5 = (void *)a1;
LABEL_689:
      uint64_t v7 = v312;
      if (v31) {
        return (llvm::Value *)v31;
      }
LABEL_455:
      uint64_t v281 = (uint64_t *)v5[3];
      uint64_t v282 = (uint64_t)*(v79 - 4);
      uint64_t v545 = (uint64_t)v551;
      v546.i64[0] = (uint64_t)&v539;
      v546.i64[1] = (uint64_t)v535;
      uint64_t v283 = *(void *)(v282 + 8);
      if (v283)
      {
        if (!*(void *)(v283 + 8))
        {
          *(void *)v551 = 0;
          uint64_t v539 = 0;
          v535[0] = 0;
          uint64_t v284 = v7;
          int v285 = sub_1CC189B48((void **)&v545, v282);
          uint64_t v7 = v284;
          if (v285)
          {
            uint64_t v286 = **(void **)v551;
            uint64_t v287 = (uint64_t)*v79;
            int v288 = (*v79)[1] & 0xFE;
            if (**(void **)v551 && (*(_DWORD *)(v286 + 8) & 0xFE) == 0x12)
            {
              if (v288 == 18
                && (*(_DWORD *)(v286 + 8) == 19) == (*((_DWORD *)*v79 + 2) == 19)
                && *(_DWORD *)(v286 + 32) == *(_DWORD *)(v287 + 32))
              {
                int v288 = 18;
                goto LABEL_464;
              }
            }
            else
            {
LABEL_464:
              if ((v288 == 18) == ((*(_DWORD *)(*(void *)v539 + 8) & 0xFE) == 18))
              {
                uint64_t v289 = (uint64_t)*(v79 - 4);
                uint64_t v538 = 0;
                uint64_t v545 = (uint64_t)&v538;
                uint64_t v290 = *(void *)(v539 + 8);
                if (v290
                  && !*(void *)(v290 + 8)
                  && (v291 = sub_1CCA4756C((void **)&v545, v539), uint64_t v7 = v284, v291)
                  && *(void *)v538 == v287
                  && *(unsigned __int8 *)(v538 + 16) >= 0x15u)
                {
                  unsigned int v435 = (llvm::Instruction *)v535[0];
                  __int16 v544 = 257;
                  if (*(void *)v535[0] != v287)
                  {
                    if (*(unsigned __int8 *)(v535[0] + 16) <= 0x14u)
                    {
                      uint64_t v445 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v281[9] + 224))(v281[9], 49, v535[0], v287);
                      unsigned int v435 = (llvm::Instruction *)v445;
                      if (v445)
                      {
                        if (*(unsigned __int8 *)(v445 + 16) >= 0x1Cu)
                        {
                          (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v281[10] + 16))(v281[10], v445, v542, v281[6], v281[7]);
                          uint64_t v505 = *((unsigned int *)v281 + 2);
                          if (v505)
                          {
                            uint64_t v506 = *v281;
                            uint64_t v507 = *v281 + 16 * v505;
                            do
                            {
                              llvm::Instruction::setMetadata(v435, *(_DWORD *)v506, *(llvm::MDNode **)(v506 + 8));
                              v506 += 16;
                            }
                            while (v506 != v507);
                          }
                        }
                        BOOL v79 = (uint64_t ***)a2;
                        int v5 = (void *)a1;
                      }
                    }
                    else
                    {
                      v547.i16[4] = 257;
                      unsigned int v435 = llvm::CastInst::Create(49, v535[0], v287, (const char **)&v545, 0);
                      (*(void (**)(uint64_t, llvm::Instruction *, BOOL *, uint64_t, uint64_t))(*(void *)v281[10] + 16))(v281[10], v435, v542, v281[6], v281[7]);
                      uint64_t v436 = *((unsigned int *)v281 + 2);
                      if (v436)
                      {
                        uint64_t v476 = *v281;
                        uint64_t v477 = *v281 + 16 * v436;
                        do
                        {
                          llvm::Instruction::setMetadata(v435, *(_DWORD *)v476, *(llvm::MDNode **)(v476 + 8));
                          v476 += 16;
                        }
                        while (v476 != v477);
                      }
                      int v5 = (void *)a1;
                    }
                  }
                  uint64_t v446 = *(void *)v551;
                  v447 = (uint64_t *)v538;
                  v547.i16[4] = 257;
                  uint64_t v448 = (uint64_t)v435;
                }
                else
                {
                  uint64_t v545 = (uint64_t)&v538;
                  uint64_t v292 = *(void *)(v535[0] + 8);
                  if (!v292) {
                    goto LABEL_738;
                  }
                  if (*(void *)(v292 + 8)) {
                    goto LABEL_738;
                  }
                  int v293 = sub_1CCA4756C((void **)&v545, v535[0]);
                  uint64_t v7 = v284;
                  if (!v293 || *(void *)v538 != v287 || *(unsigned __int8 *)(v538 + 16) < 0x15u) {
                    goto LABEL_738;
                  }
                  v294 = (llvm::Instruction *)v539;
                  __int16 v544 = 257;
                  if (*(void *)v539 != v287)
                  {
                    if (*(unsigned __int8 *)(v539 + 16) <= 0x14u)
                    {
                      uint64_t v449 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v281[9] + 224))(v281[9], 49, v539, v287);
                      v294 = (llvm::Instruction *)v449;
                      if (v449)
                      {
                        if (*(unsigned __int8 *)(v449 + 16) >= 0x1Cu)
                        {
                          (*(void (**)(uint64_t, uint64_t, BOOL *, uint64_t, uint64_t))(*(void *)v281[10] + 16))(v281[10], v449, v542, v281[6], v281[7]);
                          uint64_t v508 = *((unsigned int *)v281 + 2);
                          if (v508)
                          {
                            uint64_t v509 = *v281;
                            uint64_t v510 = *v281 + 16 * v508;
                            do
                            {
                              llvm::Instruction::setMetadata(v294, *(_DWORD *)v509, *(llvm::MDNode **)(v509 + 8));
                              v509 += 16;
                            }
                            while (v509 != v510);
                          }
                        }
                        BOOL v79 = (uint64_t ***)a2;
                        int v5 = (void *)a1;
                      }
                    }
                    else
                    {
                      v547.i16[4] = 257;
                      v294 = llvm::CastInst::Create(49, v539, v287, (const char **)&v545, 0);
                      (*(void (**)(uint64_t, llvm::Instruction *, BOOL *, uint64_t, uint64_t))(*(void *)v281[10] + 16))(v281[10], v294, v542, v281[6], v281[7]);
                      uint64_t v295 = *((unsigned int *)v281 + 2);
                      if (v295)
                      {
                        uint64_t v478 = *v281;
                        uint64_t v479 = *v281 + 16 * v295;
                        do
                        {
                          llvm::Instruction::setMetadata(v294, *(_DWORD *)v478, *(llvm::MDNode **)(v478 + 8));
                          v478 += 16;
                        }
                        while (v478 != v479);
                      }
                      int v5 = (void *)a1;
                    }
                  }
                  uint64_t v446 = *(void *)v551;
                  uint64_t v448 = v538;
                  v547.i16[4] = 257;
                  v447 = (uint64_t *)v294;
                }
                __int16 v31 = sub_1CC199EFC(v446, v447, v448, (const char **)&v545, 0, v289);
                uint64_t v7 = v284;
                if (v31) {
                  return (llvm::Value *)v31;
                }
              }
            }
          }
        }
      }
LABEL_738:
      if (*(unsigned char *)(v7 + 8) == 15) {
        return sub_1CCA43044((uint64_t)v5, (llvm::Instruction *)v79, a3, a4, a5);
      }
      else {
        return sub_1CCA39904((uint64_t)v5, (llvm::Instruction *)v79, a3, a4, a5);
      }
    }
    if (!v6) {
      goto LABEL_445;
    }
    if (v198 != 83) {
      goto LABEL_445;
    }
    uint64_t v538 = (uint64_t)v6;
    int v218 = v79[1];
    if (!v218) {
      goto LABEL_445;
    }
    while (*((unsigned char *)v218[3] + 16) == 61)
    {
      int v218 = (uint64_t **)v218[1];
      if (!v218) {
        goto LABEL_445;
      }
    }
    uint64_t v530 = v7;
    uint64_t v531 = (uint64_t)**(v79 - 4);
    uint64_t v234 = *v79;
    *(void *)v551 = (char *)&v552 + 8;
    *(void *)&long long v552 = 0x400000001;
    uint64_t v545 = 1;
    int64x2_t v546 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v547 = v546;
    v548 = (uint64_t *)v550;
    uint64_t v549 = 0x400000000;
    *((void *)&v552 + 1) = v6;
    sub_1CCA43680((uint64_t)&v545, &v538);
    unsigned int v235 = v552;
    while (v235)
    {
      uint64_t v236 = *(void *)(*(void *)v551 + 8 * v235-- - 8);
      LODWORD(v552) = v235;
      int v237 = *(_DWORD *)(v236 + 20);
      if ((v237 & 0x40000000) != 0)
      {
        unsigned int v239 = *(uint64_t **)(v236 - 8);
        uint64_t v238 = v237 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v238 = v237 & 0x7FFFFFF;
        unsigned int v239 = (uint64_t *)(v236 - 32 * v238);
      }
      if (v238)
      {
        uint64_t v240 = 32 * v238;
        while (1)
        {
          v241 = (uint64_t *)*v239;
          unsigned int v242 = *(unsigned __int8 *)(*v239 + 16);
          if (v242 >= 0x15)
          {
            if (v242 == 60)
            {
              uint64_t v243 = *(v241 - 4);
              if ((uint64_t ***)v243 == v79) {
                goto LABEL_437;
              }
              if (*(unsigned char *)(v243 + 16) == 60) {
                goto LABEL_437;
              }
              if (*((unsigned char *)v234 + 8) == 11) {
                goto LABEL_437;
              }
              uint64_t v244 = v241[1];
              if (!v244 || *(void *)(v244 + 8) || (*((_WORD *)v241 + 9) & 0x381) != 0) {
                goto LABEL_437;
              }
            }
            else
            {
              if (v242 == 83) {
                __n128 v245 = (uint64_t *)*v239;
              }
              else {
                __n128 v245 = 0;
              }
              *(void *)v542 = v245;
              if (v245)
              {
                if (sub_1CCA43680((uint64_t)&v545, (uint64_t *)v542))
                {
                  if (v552 >= (unint64_t)DWORD1(v552)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v551 + 8 * v552) = v245;
                  LODWORD(v552) = v552 + 1;
                }
                int v5 = (void *)a1;
              }
              else
              {
                if (v242 != 77)
                {
                  __int16 v31 = 0;
                  int v5 = (void *)a1;
                  goto LABEL_438;
                }
                uint64_t v246 = *(uint64_t ***)*(v241 - 4);
                uint64_t v247 = *v241;
                BOOL v248 = v246 == v234 && v247 == v531;
                int v5 = (void *)a1;
                if (!v248)
                {
LABEL_437:
                  __int16 v31 = 0;
                  goto LABEL_438;
                }
              }
            }
          }
          v239 += 4;
          v240 -= 32;
          if (!v240)
          {
            unsigned int v235 = v552;
            break;
          }
        }
      }
    }
    unint64_t v249 = v548;
    uint64_t v250 = v549;
    if (v549)
    {
      v251 = &v546;
      int v252 = v546.i32[2] - 1;
      if (v545)
      {
        uint64_t v253 = 4;
      }
      else
      {
        v251 = (int64x2_t *)v546.i64[0];
        uint64_t v253 = v546.u32[2];
      }
      if (v545) {
        int v252 = 3;
      }
      uint64_t v254 = (char *)v548;
      while (1)
      {
        uint64_t v255 = *(void *)(*(void *)v254 + 8);
        if (v255) {
          break;
        }
LABEL_411:
        v254 += 8;
        if (v254 == (char *)&v548[v549]) {
          goto LABEL_412;
        }
      }
      while (2)
      {
        a3 = *(void *)(v255 + 24);
        a4 = *(unsigned __int8 *)(a3 + 16);
        if (a3 && a4 == 61)
        {
          a4 = *(unsigned __int16 *)(a3 + 18);
          if ((a4 & 0x381) != 0) {
            goto LABEL_437;
          }
          a3 = *(void *)(a3 - 64);
          if (a3 != *(void *)v254) {
            goto LABEL_437;
          }
          goto LABEL_408;
        }
        if (a3 && a4 == 77)
        {
          a4 = **(void **)(a3 - 32);
          BOOL v39 = *(void *)a3 == (void)v234;
          a3 = v531;
          if (!v39 || a4 != v531) {
            goto LABEL_437;
          }
          goto LABEL_408;
        }
        __int16 v31 = 0;
        if (!a3 || a4 != 83) {
          goto LABEL_438;
        }
        if (v545 & 1 | (v546.i32[2] != 0))
        {
          a4 = ((a3 >> 4) ^ (a3 >> 9)) & v252;
          uint64_t v257 = &v251->i64[a4];
          a5 = *v257;
          if (*v257 != a3)
          {
            int v258 = 1;
            while (a5 != -4096)
            {
              int v259 = a4 + v258++;
              a4 = v259 & v252;
              a5 = v251->i64[a4];
              if (a5 == a3)
              {
                uint64_t v257 = &v251->i64[a4];
                goto LABEL_407;
              }
            }
            a4 = (uint64_t)v251;
            a3 = v253;
LABEL_406:
            uint64_t v257 = (uint64_t *)(a4 + 8 * a3);
          }
LABEL_407:
          if ((uint64_t *)((char *)v251 + 8 * v253) == v257) {
            goto LABEL_437;
          }
LABEL_408:
          uint64_t v255 = *(void *)(v255 + 8);
          if (!v255) {
            goto LABEL_411;
          }
          continue;
        }
        break;
      }
      a3 = 0;
      a4 = v546.i64[0];
      goto LABEL_406;
    }
LABEL_412:
    *(void *)v542 = 1;
    for (uint64_t i = 8; i != 72; i += 16)
      *(void *)&v542[i] = -4096;
    if (!v250) {
      goto LABEL_673;
    }
    uint64_t v261 = 8 * v250;
    uint64_t v262 = a1;
    v524 = v234;
    while (1)
    {
      uint64_t v263 = *v249;
      uint64_t v537 = v263;
      uint64_t v264 = *(void *)(v262 + 24);
      *(void *)(v264 + 48) = *(void *)(v263 + 40);
      *(void *)(v264 + 56) = v263 + 24;
      uint64_t v265 = *(unsigned __int8 **)(v263 + 48);
      v535[0] = (uint64_t)v265;
      if (v265)
      {
        llvm::MetadataTracking::track((uint64_t)v535, v265, 2);
        uint64_t v266 = v535[0];
      }
      else
      {
        uint64_t v266 = 0;
      }
      sub_1CB8461A4(v264, 0, v266);
      if (!v535[0]) {
        goto LABEL_419;
      }
      int v270 = *(unsigned __int8 *)v535[0];
      if ((v270 - 4) > 0x1E) {
        break;
      }
      if ((*(unsigned char *)(v535[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v535[0] + 12)) {
        goto LABEL_419;
      }
      uint64_t v271 = *(void *)(v535[0] + 16);
      if ((v271 & 4) != 0)
      {
        unint64_t v273 = v271 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v234 = v524;
        if (!v273) {
          goto LABEL_419;
        }
        goto LABEL_432;
      }
      uint64_t v234 = v524;
LABEL_419:
      uint64_t v262 = a1;
      uint64_t v267 = *(void *)(a1 + 24);
      int v268 = *(_DWORD *)(v263 + 20) & 0x7FFFFFF;
      __int16 v541 = 257;
      uint64_t v269 = sub_1CB93113C(v267, (uint64_t)v234, v268, (uint64_t)&v539);
      sub_1CCA48CC8(v542, &v537)[1] = (uint64_t)v269;
      ++v249;
      v261 -= 8;
      if (!v261)
      {
        if (v549)
        {
          uint64_t v324 = v548;
          v523 = (char *)&v548[v549];
          int v5 = (void *)a1;
          do
          {
            v525 = v324;
            uint64_t v537 = *v324;
            uint64_t v325 = v537;
            uint64_t v326 = sub_1CCA48CC8(v542, &v537);
            int v327 = *(_DWORD *)(v325 + 20);
            uint64_t v328 = v327 & 0x7FFFFFF;
            if ((v327 & 0x7FFFFFF) != 0)
            {
              uint64_t v329 = 0;
              uint64_t v330 = v326[1];
              uint64_t v526 = v327 & 0x7FFFFFF;
              do
              {
                uint64_t v331 = v537;
                int v332 = *(_DWORD *)(v537 + 20);
                if ((v332 & 0x40000000) != 0) {
                  uint64_t v333 = *(void *)(v537 - 8);
                }
                else {
                  uint64_t v333 = v537 - 32 * (v332 & 0x7FFFFFF);
                }
                v334 = *(llvm::detail::IEEEFloat **)(v333 + 32 * v329);
                unsigned int v335 = *((unsigned __int8 *)v334 + 16);
                if (v334) {
                  BOOL v336 = v335 > 0x14;
                }
                else {
                  BOOL v336 = 1;
                }
                if (v336)
                {
                  if (v334 && v335 == 60)
                  {
                    uint64_t v337 = v5[3];
                    *(void *)(v337 + 48) = *((void *)v334 + 5);
                    *(void *)(v337 + 56) = (char *)v334 + 24;
                    v338 = (unsigned __int8 *)*((void *)v334 + 6);
                    v535[0] = (uint64_t)v338;
                    if (v338)
                    {
                      llvm::MetadataTracking::track((uint64_t)v535, v338, 2);
                      uint64_t v339 = v535[0];
                    }
                    else
                    {
                      uint64_t v339 = 0;
                    }
                    sub_1CB8461A4(v337, 0, v339);
                    if (!v535[0]) {
                      goto LABEL_533;
                    }
                    int v370 = *(unsigned __int8 *)v535[0];
                    if ((v370 - 4) > 0x1E)
                    {
                      if ((v370 - 3) >= 0xFFFFFFFE) {
                        uint64_t v372 = v535[0];
                      }
                      else {
                        uint64_t v372 = 0;
                      }
                      if ((v370 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v373 = v372 + 8;
LABEL_590:
                        uint64_t v539 = (uint64_t)v535;
                        sub_1CC5FA668(v373 + 16, &v539);
                        goto LABEL_533;
                      }
                      if (v370 == 3) {
                        *(void *)(v535[0] + 8) = 0;
                      }
                    }
                    else if ((*(unsigned char *)(v535[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v535[0] + 12))
                    {
                      uint64_t v371 = *(void *)(v535[0] + 16);
                      if ((v371 & 4) == 0)
                      {
                        int v5 = (void *)a1;
                        uint64_t v234 = v524;
                        goto LABEL_533;
                      }
                      unint64_t v373 = v371 & 0xFFFFFFFFFFFFFFF8;
                      int v5 = (void *)a1;
                      uint64_t v234 = v524;
                      if (v373) {
                        goto LABEL_590;
                      }
                    }
LABEL_533:
                    __int16 v541 = 257;
                    sub_1CCA7BF64((uint64_t)v5, v334, (llvm::PointerType *)v234, &v539);
                    v341 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v334, v340);
                    sub_1CC9D3C84((uint64_t)v5, v334, v341);
                    sub_1CC9D6844((uint64_t)v5, (uint64_t)v334);
                  }
                  if (v334 && v335 == 77)
                  {
                    v334 = (llvm::detail::IEEEFloat *)*((void *)v334 - 4);
                  }
                  else
                  {
                    if (v335 == 83) {
                      v342 = (const char *)v334;
                    }
                    else {
                      v342 = 0;
                    }
                    uint64_t v539 = (uint64_t)v342;
                    if (v342) {
                      v334 = (llvm::detail::IEEEFloat *)sub_1CCA48CC8(v542, &v539)[1];
                    }
                    else {
                      v334 = 0;
                    }
                  }
                }
                else if (*(uint64_t ***)v334 != v234)
                {
                  v334 = sub_1CC56C0C0((llvm *)0x31, v334, (llvm::Constant *)v234, 0);
                }
                int v343 = *(_DWORD *)(v331 + 20);
                if ((v343 & 0x40000000) != 0) {
                  uint64_t v344 = *(void *)(v331 - 8);
                }
                else {
                  uint64_t v344 = v331 - 32 * (v343 & 0x7FFFFFF);
                }
                uint64_t v345 = *(void *)(v344 + 32 * *(unsigned int *)(v331 + 60) + 8 * v329);
                int v346 = *(_DWORD *)(v330 + 20);
                uint64_t v347 = v346 & 0x7FFFFFF;
                if ((v346 & 0x7FFFFFF) == *(_DWORD *)(v330 + 60))
                {
                  unsigned int v360 = v347 + (v347 >> 1);
                  if (v360 <= 2) {
                    uint64_t v361 = 2;
                  }
                  else {
                    uint64_t v361 = v360;
                  }
                  *(_DWORD *)(v330 + 60) = v361;
                  if ((v346 & 0x40000000) != 0) {
                    uint64_t v362 = *(uint64_t **)(v330 - 8);
                  }
                  else {
                    uint64_t v362 = (uint64_t *)(v330 - 32 * v347);
                  }
                  uint64_t v363 = operator new(40 * v361);
                  *(void *)(v330 - 8) = v363;
                  v364 = v363;
                  do
                  {
                    void *v364 = 0;
                    v364[1] = 0;
                    v364[2] = 0;
                    v364[3] = v330;
                    v364 += 4;
                  }
                  while (v364 != &v363[4 * v361]);
                  int v365 = *(_DWORD *)(v330 + 20);
                  if ((v365 & 0x40000000) != 0) {
                    uint64_t v366 = (uint64_t)v363;
                  }
                  else {
                    uint64_t v366 = v330 - 32 * (v365 & 0x7FFFFFF);
                  }
                  sub_1CC5E4108((uint64_t)&v539, v362, &v362[4 * v347], v366);
                  if (v347)
                  {
                    memmove((void *)(v366 + 32 * v361), &v362[4 * v347], 8 * v347);
                    uint64_t v367 = 4 * v347;
                    do
                    {
                      uint64_t v368 = &v362[v367];
                      if (v362[v367 - 4])
                      {
                        *(void *)*(v368 - 2) = *(v368 - 3);
                        uint64_t v369 = *(v368 - 3);
                        if (v369) {
                          *(void *)(v369 + 16) = *(v368 - 2);
                        }
                      }
                      v367 -= 4;
                    }
                    while (v367 * 8);
                  }
                  operator delete(v362);
                  int v346 = *(_DWORD *)(v330 + 20);
                  uint64_t v234 = v524;
                  uint64_t v328 = v526;
                }
                uint64_t v348 = (v346 + 1) & 0x7FFFFFF;
                *(_DWORD *)(v330 + 20) = v346 & 0xF8000000 | (v346 + 1) & 0x7FFFFFF;
                int v5 = (void *)a1;
                if ((v346 & 0x40000000) != 0) {
                  uint64_t v349 = *(void *)(v330 - 8);
                }
                else {
                  uint64_t v349 = v330 - 32 * v348;
                }
                uint64_t v350 = (v348 - 1);
                uint64_t v351 = v349 + 32 * v350;
                if (*(void *)v351)
                {
                  **(void **)(v351 + 16) = *(void *)(v351 + 8);
                  uint64_t v359 = *(void *)(v351 + 8);
                  if (v359) {
                    *(void *)(v359 + 16) = *(void *)(v351 + 16);
                  }
                }
                *(void *)uint64_t v351 = v334;
                if (v334)
                {
                  uint64_t v354 = *((void *)v334 + 1);
                  v353 = (uint64_t *)((char *)v334 + 8);
                  uint64_t v352 = v354;
                  uint64_t v355 = v349 + 32 * v350;
                  *(void *)(v355 + 8) = v354;
                  if (v354) {
                    *(void *)(v352 + 16) = v355 + 8;
                  }
                  *(void *)(v355 + 16) = v353;
                  uint64_t *v353 = v351;
                }
                int v356 = *(_DWORD *)(v330 + 20);
                uint64_t v357 = v356 & 0x7FFFFFF;
                if ((v356 & 0x40000000) != 0) {
                  uint64_t v358 = *(void *)(v330 - 8);
                }
                else {
                  uint64_t v358 = v330 - 32 * v357;
                }
                *(void *)(v358 + 32 * *(unsigned int *)(v330 + 60) + 8 * (v357 - 1)) = v345;
                ++v329;
              }
              while (v329 != v328);
            }
            uint64_t v324 = v525 + 1;
          }
          while (v525 + 1 != (uint64_t *)v523);
          if (v549)
          {
            __int16 v31 = 0;
            uint64_t v374 = v548;
            v527 = (char *)&v548[v549];
            while (1)
            {
              uint64_t v537 = *v374;
              uint64_t v375 = v537;
              uint64_t v376 = sub_1CCA48CC8(v542, &v537);
              uint64_t v377 = *(void *)(v375 + 8);
              if (v377) {
                break;
              }
LABEL_671:
              if (++v374 == (uint64_t *)v527) {
                goto LABEL_674;
              }
            }
            v378 = (unsigned __int8 *)v376[1];
            while (1)
            {
              while (1)
              {
                uint64_t v379 = *(void *)(v377 + 24);
                uint64_t v377 = *(void *)(v377 + 8);
                int v380 = *(unsigned __int8 *)(v379 + 16);
                if (v379)
                {
                  if (v380 == 61) {
                    break;
                  }
                }
                if (!v379 || v380 != 77)
                {
LABEL_639:
                  if (!v377) {
                    goto LABEL_671;
                  }
                  continue;
                }
                uint64_t v387 = sub_1CC9D3C84((uint64_t)v5, (llvm::ValueAsMetadata *)v379, (llvm::Value *)v378);
                if ((llvm::ValueAsMetadata *)v379 == a2) {
                  __int16 v31 = v387;
                }
                if (!v377) {
                  goto LABEL_671;
                }
              }
              uint64_t v381 = v5[3];
              *(void *)(v381 + 48) = *(void *)(v379 + 40);
              *(void *)(v381 + 56) = v379 + 24;
              v382 = *(unsigned __int8 **)(v379 + 48);
              v535[0] = (uint64_t)v382;
              if (v382)
              {
                llvm::MetadataTracking::track((uint64_t)v535, v382, 2);
                uint64_t v383 = v535[0];
              }
              else
              {
                uint64_t v383 = 0;
              }
              sub_1CB8461A4(v381, 0, v383);
              if (v535[0])
              {
                int v409 = *(unsigned __int8 *)v535[0];
                if ((v409 - 4) > 0x1E)
                {
                  if ((v409 - 3) >= 0xFFFFFFFE) {
                    uint64_t v414 = v535[0];
                  }
                  else {
                    uint64_t v414 = 0;
                  }
                  if ((v409 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v411 = v414 + 8;
LABEL_662:
                    uint64_t v539 = (uint64_t)v535;
                    sub_1CC5FA668(v411 + 16, &v539);
                    goto LABEL_608;
                  }
                  if (v409 == 3) {
                    *(void *)(v535[0] + 8) = 0;
                  }
                }
                else if ((*(unsigned char *)(v535[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v535[0] + 12))
                {
                  uint64_t v410 = *(void *)(v535[0] + 16);
                  if ((v410 & 4) != 0)
                  {
                    unint64_t v411 = v410 & 0xFFFFFFFFFFFFFFF8;
                    if (v411) {
                      goto LABEL_662;
                    }
                  }
                }
              }
LABEL_608:
              v384 = (uint64_t *)v5[3];
              __int16 v536 = 257;
              uint64_t v385 = (llvm::Value *)v378;
              if (*(void *)v378 != v531)
              {
                if (v378[16] > 0x14u)
                {
                  __int16 v541 = 257;
                  uint64_t v385 = llvm::CastInst::Create(49, (uint64_t)v378, v531, (const char **)&v539, 0);
                  (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(void *)v384[10]
                                                                                              + 16))(v384[10], v385, v535, v384[6], v384[7]);
                  uint64_t v386 = *((unsigned int *)v384 + 2);
                  if (v386)
                  {
                    uint64_t v412 = *v384;
                    uint64_t v413 = v412 + 16 * v386;
                    do
                    {
                      llvm::Instruction::setMetadata(v385, *(_DWORD *)v412, *(llvm::MDNode **)(v412 + 8));
                      v412 += 16;
                    }
                    while (v412 != v413);
                  }
LABEL_611:
                  int v5 = (void *)a1;
                  goto LABEL_622;
                }
                uint64_t v385 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v384[9] + 224))(v384[9], 49, v378, v531);
                if (v385) {
                  BOOL v388 = *((unsigned __int8 *)v385 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v388 = 0;
                }
                if (v388)
                {
                  (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(void *)v384[10]
                                                                                              + 16))(v384[10], v385, v535, v384[6], v384[7]);
                  uint64_t v415 = *((unsigned int *)v384 + 2);
                  if (v415)
                  {
                    uint64_t v416 = *v384;
                    uint64_t v417 = v416 + 16 * v415;
                    do
                    {
                      llvm::Instruction::setMetadata(v385, *(_DWORD *)v416, *(llvm::MDNode **)(v416 + 8));
                      v416 += 16;
                    }
                    while (v416 != v417);
                  }
                  goto LABEL_611;
                }
              }
LABEL_622:
              uint64_t v389 = (llvm::Value **)(v379 - 64);
              if (*(void *)(v379 - 64))
              {
                **(void **)(v379 - 48) = *(void *)(v379 - 56);
                uint64_t v390 = *(void *)(v379 - 56);
                if (v390) {
                  *(void *)(v390 + 16) = *(void *)(v379 - 48);
                }
              }
              *uint64_t v389 = v385;
              if (v385)
              {
                uint64_t v393 = *((void *)v385 + 1);
                BOOL v392 = (llvm::Value ***)((char *)v385 + 8);
                uint64_t v391 = v393;
                *(void *)(v379 - 56) = v393;
                if (v393) {
                  *(void *)(v391 + 16) = v379 - 56;
                }
                *(void *)(v379 - 48) = v392;
                *BOOL v392 = v389;
              }
              uint64_t v394 = v5[4];
              int v395 = *(_DWORD *)(v394 + 8);
              uint64_t v539 = v379;
              int v540 = v395;
              int v396 = *(_DWORD *)(v394 + 2080);
              if (v396)
              {
                uint64_t v397 = *(void *)(v394 + 2064);
                int v398 = v396 - 1;
                unsigned int v399 = v398 & ((v379 >> 4) ^ (v379 >> 9));
                BOOL v400 = (void *)(v397 + 16 * v399);
                uint64_t v401 = *v400;
                if (*v400 == v379) {
                  goto LABEL_639;
                }
                uint64_t v402 = 0;
                int v403 = 1;
                while (v401 != -4096)
                {
                  if (v402) {
                    BOOL v404 = 0;
                  }
                  else {
                    BOOL v404 = v401 == -8192;
                  }
                  if (v404) {
                    uint64_t v402 = v400;
                  }
                  unsigned int v405 = v399 + v403++;
                  unsigned int v399 = v405 & v398;
                  BOOL v400 = (void *)(v397 + 16 * v399);
                  uint64_t v401 = *v400;
                  if (*v400 == v379) {
                    goto LABEL_639;
                  }
                }
                if (v402) {
                  uint64_t v406 = v402;
                }
                else {
                  uint64_t v406 = v400;
                }
              }
              else
              {
                uint64_t v406 = 0;
              }
              uint64_t v407 = sub_1CBF569E0((_DWORD *)(v394 + 2064), (uint64_t)&v539, &v539, v406);
              *uint64_t v407 = v539;
              *((_DWORD *)v407 + 2) = v540;
              unint64_t v408 = *(unsigned int *)(v394 + 8);
              if (v408 >= *(unsigned int *)(v394 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)v394 + 8 * v408) = v379;
              ++*(_DWORD *)(v394 + 8);
              if (!v377) {
                goto LABEL_671;
              }
            }
          }
          __int16 v31 = 0;
LABEL_674:
          if (!v542[0]) {
            MEMORY[0x1D25D9CD0](v543, 8);
          }
          BOOL v79 = (uint64_t ***)a2;
LABEL_438:
          if (v548 != (uint64_t *)v550) {
            free(v548);
          }
          if ((v545 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v546.i64[0], 8);
          }
          if (*(long long **)v551 != (long long *)((char *)&v552 + 8)) {
            free(*(void **)v551);
          }
          uint64_t v7 = v530;
          if (v31) {
            return (llvm::Value *)v31;
          }
          goto LABEL_445;
        }
LABEL_673:
        __int16 v31 = 0;
        int v5 = (void *)a1;
        goto LABEL_674;
      }
    }
    if ((v270 - 3) >= 0xFFFFFFFE) {
      uint64_t v272 = v535[0];
    }
    else {
      uint64_t v272 = 0;
    }
    if ((v270 - 3) < 0xFFFFFFFE)
    {
      if (v270 == 3) {
        *(void *)(v535[0] + 8) = 0;
      }
      goto LABEL_419;
    }
    unint64_t v273 = v272 + 8;
LABEL_432:
    uint64_t v539 = (uint64_t)v535;
    sub_1CC5FA668(v273 + 16, &v539);
    uint64_t v263 = v537;
    goto LABEL_419;
  }
  double v140 = llvm::FixedVectorType::get(v89, (llvm::Type *)*(unsigned int *)(v87 + 32));
  uint64_t v87 = v139;
  uint64_t v141 = (uint64_t *)v5[3];
  __int16 v544 = 257;
  if (*(void *)v86 != v139)
  {
    if (v86[16] <= 0x14u)
    {
      uint64_t v86 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, double))(*(void *)v141[9] + 224))(v141[9], 49, v86, v139, v140);
      if (v86) {
        BOOL v143 = v86[16] >= 0x1Cu;
      }
      else {
        BOOL v143 = 0;
      }
      if (!v143) {
        goto LABEL_193;
      }
      (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v141[10] + 16))(v141[10], v86, v542, v141[6], v141[7]);
      uint64_t v487 = *((unsigned int *)v141 + 2);
      if (v487)
      {
        uint64_t v488 = *v141;
        uint64_t v489 = v488 + 16 * v487;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v86, *(_DWORD *)v488, *(llvm::MDNode **)(v488 + 8));
          v488 += 16;
        }
        while (v488 != v489);
      }
    }
    else
    {
      v547.i16[4] = 257;
      uint64_t v86 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v86, v139, (const char **)&v545, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, BOOL *, uint64_t, uint64_t))(*(void *)v141[10] + 16))(v141[10], v86, v542, v141[6], v141[7]);
      uint64_t v142 = *((unsigned int *)v141 + 2);
      if (v142)
      {
        uint64_t v181 = *v141;
        uint64_t v182 = v181 + 16 * v142;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v86, *(_DWORD *)v181, *(llvm::MDNode **)(v181 + 8));
          v181 += 16;
        }
        while (v181 != v182);
      }
    }
    int v5 = (void *)a1;
  }
LABEL_193:
  unsigned int v83 = *(_DWORD *)(v8 + 32);
LABEL_194:
  int v144 = *(unsigned __int8 *)v5[10];
  int v145 = *(_DWORD *)(v87 + 32);
  uint64_t v545 = (uint64_t)&v546.i64[1];
  v546.i64[0] = 0x1000000000;
  sub_1CCA47BAC((uint64_t)&v545, 0, v145);
  unsigned int v148 = v83 - v145;
  if (v83 >= v145)
  {
    char v149 = (uint64_t **)llvm::Constant::getNullValue((llvm::Constant *)v87, v146, v147);
    if (v144)
    {
      sub_1CD68B574((uint64_t)&v545, v545, v83 - v145, v145);
      unsigned __int32 v155 = v546.i32[0];
    }
    else
    {
      __int32 v156 = v546.i32[0];
      if (v546.u32[0] + (unint64_t)v148 > v546.u32[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v83 != v145)
      {
        unsigned int v157 = (int *)(v545 + 4 * v546.u32[0]);
        uint64_t v158 = v83 - v145;
        do
        {
          *v157++ = v145;
          --v158;
        }
        while (v158);
        __int32 v156 = v546.i32[0];
      }
      unsigned __int32 v155 = v156 + v148;
      v546.i32[0] = v155;
    }
    uint64_t v154 = (void *)v545;
  }
  else
  {
    char v149 = (uint64_t **)llvm::PoisonValue::get((llvm::PoisonValue *)v87, v146);
    unsigned int v150 = v546.i32[0];
    if (v546.i32[0] >= v83) {
      unsigned int v151 = v83;
    }
    else {
      unsigned int v151 = v546.i32[0];
    }
    unint64_t v152 = v546.u32[0] - (unint64_t)v83;
    if (v546.i32[0] <= v83) {
      unint64_t v152 = 0;
    }
    __int16 v153 = (char *)(v545 + 4 * v152);
    if (v546.i32[0] >= v83) {
      unsigned int v150 = v83;
    }
    if (v144) {
      uint64_t v154 = v153;
    }
    else {
      uint64_t v154 = (void *)v545;
    }
    if (v144) {
      unsigned __int32 v155 = v150;
    }
    else {
      unsigned __int32 v155 = v151;
    }
  }
  uint64_t v159 = (llvm::Type *)v155;
  __int16 v160 = operator new(0xA8uLL);
  v160[21] = v160[21] & 0x38000000 | 2;
  __int16 v31 = v160 + 16;
  *(void *)__int16 v160 = 0;
  *((void *)v160 + 1) = 0;
  *((void *)v160 + 2) = 0;
  *((void *)v160 + 3) = v160 + 16;
  *((void *)v160 + 4) = 0;
  *((void *)v160 + 5) = 0;
  *((void *)v160 + 6) = 0;
  *((void *)v160 + 7) = v160 + 16;
  __int16 v544 = 257;
  llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v160 + 8, (uint64_t **)v86, v149, v154, v159, (const char **)v542, 0);
  uint64_t v73 = (void *)v545;
  if ((unint64_t *)v545 != &v546.u64[1]) {
LABEL_101:
  }
    free(v73);
  return (llvm::Value *)v31;
}

llvm::Instruction *sub_1CCA4721C(uint64_t a1, llvm::Instruction *this, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v7 = (unsigned __int8 *)*((void *)this - 4);
  uint64_t v8 = *(void *)v7;
  if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(void **)(v8 + 16);
  }
  uint64_t v9 = *(void *)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    uint64_t v9 = **(void **)(v9 + 16);
  }
  uint64_t v10 = *(llvm::PointerType **)(v9 + 24);
  if (*(llvm::PointerType **)(v8 + 24) == v10)
  {
    return sub_1CCA43044(a1, this, a3, a4, a5);
  }
  else
  {
    uint64_t v11 = (llvm::Type *)(*(_DWORD *)(v8 + 8) >> 8);
    if (v10) {
      uint64_t v12 = (uint64_t **)llvm::PointerType::get(v10, v11);
    }
    else {
      uint64_t v12 = (uint64_t **)llvm::PointerType::get(*(uint64_t ***)v9, v11);
    }
    uint64_t v13 = (uint64_t)v12;
    uint64_t v14 = *(void *)this;
    if (*(void *)this && (*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    {
      uint64_t v15 = (llvm::Type *)*(unsigned int *)(v14 + 32);
      if (*(_DWORD *)(v14 + 8) == 19) {
        llvm::ScalableVectorType::get(v12, v15);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v15);
      }
      uint64_t v13 = v16;
    }
    unint64_t v17 = *(uint64_t **)(a1 + 24);
    v28[16] = 257;
    if (*(void *)v7 != v13)
    {
      if (v7[16] <= 0x14u)
      {
        uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v17[9] + 224))(v17[9], 49, v7, v13);
        if (v7) {
          BOOL v22 = v7[16] >= 0x1Cu;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, _WORD *, uint64_t, uint64_t))(*(void *)v17[10] + 16))(v17[10], v7, v28, v17[6], v17[7]);
          uint64_t v25 = *((unsigned int *)v17 + 2);
          if (v25)
          {
            uint64_t v26 = *v17;
            uint64_t v27 = v26 + 16 * v25;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
              v26 += 16;
            }
            while (v26 != v27);
          }
        }
      }
      else
      {
        __int16 v30 = 257;
        uint64_t v7 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v7, v13, v29, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, _WORD *, uint64_t, uint64_t))(*(void *)v17[10] + 16))(v17[10], v7, v28, v17[6], v17[7]);
        uint64_t v18 = *((unsigned int *)v17 + 2);
        if (v18)
        {
          uint64_t v19 = *v17;
          uint64_t v20 = v19 + 16 * v18;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
            v19 += 16;
          }
          while (v19 != v20);
        }
      }
    }
    uint64_t v23 = operator new(0x60uLL);
    v23[13] = v23[13] & 0x38000000 | 1;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = 0;
    *((void *)v23 + 3) = v23 + 8;
    uint64_t v24 = *(llvm::Type **)this;
    __int16 v30 = 257;
    return llvm::AddrSpaceCastInst::AddrSpaceCastInst((llvm::AddrSpaceCastInst *)(v23 + 8), (llvm::Value *)v7, v24, v29, 0);
  }
}

BOOL sub_1CCA474C8(uint64_t a1, uint64_t a2)
{
  BOOL result = 1;
  if (*(unsigned __int8 *)(a1 + 16) >= 0x15u)
  {
    unsigned int v6 = &v8;
    uint64_t v7 = &v8;
    uint64_t v8 = 0;
    if ((sub_1CBC5BE40(&v6, a1) & 1) == 0 && (sub_1CBC5BEAC(&v7, a1) & 1) == 0)
    {
      int v5 = &v8;
      if ((sub_1CBC5BF18(&v5, a1) & 1) == 0) {
        return 0;
      }
    }
    if (*v8 != a2) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CCA4756C(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 49
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (uint64_t v9 = *(uint64_t **)(a2 - 8))
        : (uint64_t v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CCA475D8(llvm::detail::DoubleAPFloat *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 == ***(void ***)a1 + 1816) {
    return 0;
  }
  unsigned __int8 v40 = 0;
  unsigned int v3 = (llvm::detail::DoubleAPFloat *)((char *)a1 + 32);
  uint64_t v2 = *((void *)a1 + 4);
  if ((_UNKNOWN *)v2 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v42, v3);
  }
  else
  {
    uint64_t v42 = *((void *)a1 + 4);
    if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v4 = *((unsigned char *)a1 + 52);
    int v5 = v4 & 7;
    char v45 = v4 & 0xF;
    int v44 = *((_DWORD *)a1 + 12);
    BOOL v7 = (v4 & 6) != 0 && v5 != 3;
    if (v5 == 1 || v7)
    {
      uint64_t v8 = *(unsigned int *)(v2 + 8);
      if ((v8 - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (uint64_t *)a1;
      }
      else {
        uint64_t v9 = (uint64_t *)&v43;
      }
      uint64_t v10 = (uint64_t *)((char *)a1 + 40);
      if ((*(_DWORD *)(*((void *)a1 + 4) + 8) - 64) < 0xFFFFFF80) {
        uint64_t v10 = (uint64_t *)*((void *)a1 + 5);
      }
      if (v8 <= 0xFFFFFFBF)
      {
        unint64_t v11 = (unint64_t)(v8 + 64) >> 6;
        do
        {
          uint64_t v12 = *v10++;
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v41, &unk_1CFB2E2E0, 1, &v40);
  int v13 = v40;
  if ((_UNKNOWN *)v42 == &unk_1CFB2E344)
  {
    int v38 = v40;
    sub_1CB845718((uint64_t *)&v43);
LABEL_73:
    int v13 = v38;
    goto LABEL_22;
  }
  if ((*(_DWORD *)(v42 + 8) - 64) <= 0xFFFFFF7F && v43)
  {
    int v38 = v40;
    MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    goto LABEL_73;
  }
LABEL_22:
  if (!v13) {
    return ***(void ***)a1 + 1624;
  }
  unsigned __int8 v40 = 0;
  uint64_t v14 = *(void *)v3;
  if (*(_UNKNOWN **)v3 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v42, v3);
  }
  else
  {
    uint64_t v42 = *(void *)v3;
    if ((*(_DWORD *)(v14 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v15 = *((unsigned char *)a1 + 52);
    int v16 = v15 & 7;
    char v45 = v45 & 0xF0 | v15 & 0xF;
    int v44 = *((_DWORD *)a1 + 12);
    BOOL v18 = (v15 & 6) != 0 && v16 != 3;
    if (v16 == 1 || v18)
    {
      uint64_t v19 = *(unsigned int *)(v42 + 8);
      if ((v19 - 64) <= 0xFFFFFF7F) {
        uint64_t v20 = v43;
      }
      else {
        uint64_t v20 = (uint64_t *)&v43;
      }
      uint64_t v21 = (uint64_t *)((char *)a1 + 40);
      if ((*(_DWORD *)(*((void *)a1 + 4) + 8) - 64) < 0xFFFFFF80) {
        uint64_t v21 = (uint64_t *)*((void *)a1 + 5);
      }
      if (v19 <= 0xFFFFFFBF)
      {
        unint64_t v22 = (unint64_t)(v19 + 64) >> 6;
        do
        {
          uint64_t v23 = *v21++;
          *v20++ = v23;
          --v22;
        }
        while (v22);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v41, &unk_1CFB2E308, 1, &v40);
  int v24 = v40;
  if ((_UNKNOWN *)v42 == &unk_1CFB2E344)
  {
    int v39 = v40;
    sub_1CB845718((uint64_t *)&v43);
LABEL_79:
    int v24 = v39;
    goto LABEL_42;
  }
  if ((*(_DWORD *)(v42 + 8) - 64) <= 0xFFFFFF7F && v43)
  {
    int v39 = v40;
    MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    goto LABEL_79;
  }
LABEL_42:
  uint64_t v25 = *(void *)a1;
  if (!v24) {
    return **(void **)v25 + 1672;
  }
  if (*(unsigned char *)(v25 + 8) == 3) {
    return 0;
  }
  unsigned __int8 v40 = 0;
  uint64_t v26 = *(void *)v3;
  if (*(_UNKNOWN **)v3 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v42, v3);
  }
  else
  {
    uint64_t v42 = *(void *)v3;
    if ((*(_DWORD *)(v26 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v27 = *((unsigned char *)a1 + 52);
    int v28 = v27 & 7;
    char v45 = v45 & 0xF0 | v27 & 0xF;
    int v44 = *((_DWORD *)a1 + 12);
    BOOL v30 = (v27 & 6) != 0 && v28 != 3;
    if (v28 == 1 || v30)
    {
      uint64_t v31 = *(unsigned int *)(v42 + 8);
      if ((v31 - 64) <= 0xFFFFFF7F) {
        uint64_t v32 = v43;
      }
      else {
        uint64_t v32 = (uint64_t *)&v43;
      }
      unint64_t v33 = (uint64_t *)((char *)a1 + 40);
      if ((*(_DWORD *)(*((void *)a1 + 4) + 8) - 64) < 0xFFFFFF80) {
        unint64_t v33 = (uint64_t *)*((void *)a1 + 5);
      }
      if (v31 <= 0xFFFFFFBF)
      {
        unint64_t v34 = (unint64_t)(v31 + 64) >> 6;
        do
        {
          uint64_t v35 = *v33++;
          *v32++ = v35;
          --v34;
        }
        while (v34);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v41, &unk_1CFB2E31C, 1, &v40);
  int v36 = v40;
  if ((_UNKNOWN *)v42 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v43);
  }
  else if ((*(_DWORD *)(v42 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
  }
  if (v36) {
    return 0;
  }
  return ***(void ***)a1 + 1696;
}

uint64_t sub_1CCA47AD4(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 42
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (uint64_t v9 = *(uint64_t **)(a2 - 8))
        : (uint64_t v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CCA47B40(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 41
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (uint64_t v9 = *(uint64_t **)(a2 - 8))
        : (uint64_t v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CCA47BAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = a3 - a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (a3 - a2 + v4 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3 != a2)
  {
    int v5 = (_DWORD *)(*(void *)result + 4 * v4);
    do
      *v5++ = a2++;
    while (a3 != a2);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

uint64_t sub_1CCA47C3C(unsigned __int8 *a1, unint64_t a2, uint64_t a3, llvm::Type *a4, uint64_t a5)
{
  unsigned int v5 = a1[16];
  if (v5 - 11 < 2) {
    return 1;
  }
  unint64_t v11 = (llvm::detail::IEEEFloat *)a1;
  while (*(llvm::Type **)v11 != a4)
  {
    if (v5 <= 0x14)
    {
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v11);
      if (v15 == 1) {
      unint64_t v17 = llvm::Type::getPrimitiveSizeInBits(a4);
      }
      if (v18 == 1)
      {
        unint64_t v42 = v17;
        unint64_t v17 = v42;
      }
      unint64_t v19 = PrimitiveSizeInBits / v17;
      uint64_t v20 = *(llvm::Type **)v11;
      if (v19 != 1)
      {
        if (*((unsigned char *)v20 + 8) != 13)
        {
          unint64_t v48 = *(llvm::IntegerType **)v20;
          uint64_t v50 = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v20);
          if (v49 == 1) {
          uint64_t v51 = (llvm::Constant *)llvm::IntegerType::get(v48, v50);
          }
          if (*(llvm::Constant **)v11 != v51) {
            unint64_t v11 = sub_1CC56C0C0((llvm *)0x31, v11, v51, 0);
          }
        }
        uint64_t v53 = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(a4);
        if (v52 == 1) {
        uint64_t v54 = llvm::IntegerType::get(**(llvm::IntegerType ***)v11, v53);
        }
        if (v19)
        {
          uint64_t v55 = (llvm::Constant *)v54;
          unint64_t v56 = v19 - 1;
          do
          {
            int v57 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v11, a2, 0);
            LShr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getLShr(v11, v57, 0, v58);
            BOOL v60 = sub_1CC56C0C0((llvm *)0x26, LShr, v55, 0);
            uint64_t result = sub_1CCA47C3C(v60, a2, a3, a4, a5);
            BOOL v62 = v56-- != 0;
            if (!result) {
              break;
            }
            a2 = (a2 + v53);
          }
          while (v62);
          return result;
        }
        return 1;
      }
      if (v20 != a4) {
        unint64_t v11 = sub_1CC56C0C0((llvm *)0x31, v11, a4, 0);
      }
LABEL_46:
      unsigned int v5 = *((unsigned __int8 *)v11 + 16);
      if (v5 - 11 < 2) {
        return 1;
      }
    }
    else
    {
      uint64_t v12 = *((void *)v11 + 1);
      if (!v12) {
        return 0;
      }
      uint64_t result = 0;
      if (v5 < 0x1C || *(void *)(v12 + 8)) {
        return result;
      }
      uint64_t result = 0;
      if ((int)v5 > 66)
      {
        if (v5 == 67)
        {
          int v23 = *((_DWORD *)v11 + 5);
          if ((v23 & 0x40000000) != 0) {
            int v24 = (llvm::Type ***)*((void *)v11 - 1);
          }
          else {
            int v24 = (llvm::Type ***)((char *)v11 - 32 * (v23 & 0x7FFFFFF));
          }
          unsigned int v26 = llvm::Type::getPrimitiveSizeInBits(**v24);
          if (v25 == 1) {
          unint64_t v27 = llvm::Type::getPrimitiveSizeInBits(a4);
          }
          if (v28 == 1)
          {
            unint64_t v43 = v27;
            unint64_t v27 = v43;
          }
          if (v26 % v27) {
            return 0;
          }
          int v29 = *((_DWORD *)v11 + 5);
          if ((v29 & 0x40000000) != 0) {
            BOOL v30 = (llvm::detail::IEEEFloat **)*((void *)v11 - 1);
          }
          else {
            BOOL v30 = (llvm::detail::IEEEFloat **)((char *)v11 - 32 * (v29 & 0x7FFFFFF));
          }
          unint64_t v11 = *v30;
        }
        else
        {
          if (v5 != 77) {
            return result;
          }
          int v13 = *((_DWORD *)v11 + 5);
          if ((v13 & 0x40000000) != 0) {
            uint64_t v14 = (llvm::detail::IEEEFloat **)*((void *)v11 - 1);
          }
          else {
            uint64_t v14 = (llvm::detail::IEEEFloat **)((char *)v11 - 32 * (v13 & 0x7FFFFFF));
          }
          unint64_t v11 = *v14;
          if ((*(_DWORD *)(*(void *)*v14 + 8) & 0xFE) == 0x12) {
            return 0;
          }
        }
        goto LABEL_46;
      }
      if (v5 == 57)
      {
        int v21 = *((_DWORD *)v11 + 5);
        if ((v21 & 0x40000000) != 0) {
          unint64_t v22 = (void *)*((void *)v11 - 1);
        }
        else {
          unint64_t v22 = (void *)((char *)v11 - 32 * (v21 & 0x7FFFFFF));
        }
        uint64_t result = sub_1CCA47C3C(*v22, a2, a3, a4, a5);
        if (!result) {
          return result;
        }
        int v31 = *((_DWORD *)v11 + 5);
        if ((v31 & 0x40000000) != 0) {
          uint64_t v32 = (char *)*((void *)v11 - 1);
        }
        else {
          uint64_t v32 = (char *)v11 - 32 * (v31 & 0x7FFFFFF);
        }
        unint64_t v11 = (llvm::detail::IEEEFloat *)*((void *)v32 + 4);
        goto LABEL_46;
      }
      if (v5 != 53) {
        return result;
      }
      int v33 = *((_DWORD *)v11 + 5);
      unint64_t v34 = (v33 & 0x40000000) != 0
          ? (llvm::detail::IEEEFloat *)*((void *)v11 - 1)
          : (llvm::detail::IEEEFloat *)((char *)v11 - 32 * (v33 & 0x7FFFFFF));
      uint64_t result = 0;
      uint64_t v35 = *((void *)v34 + 4);
      if (!v35 || *(unsigned char *)(v35 + 16) != 16) {
        return result;
      }
      int v36 = (void *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u) {
        int v36 = (void *)*v36;
      }
      int v37 = *(_DWORD *)v36;
      unint64_t v39 = llvm::Type::getPrimitiveSizeInBits(a4);
      if (v38 == 1) {
      a2 = (a2 + v37);
      }
      if (a2 % v39) {
        return 0;
      }
      int v40 = *((_DWORD *)v11 + 5);
      if ((v40 & 0x40000000) != 0) {
        int v41 = (llvm::detail::IEEEFloat **)*((void *)v11 - 1);
      }
      else {
        int v41 = (llvm::detail::IEEEFloat **)((char *)v11 - 32 * (v40 & 0x7FFFFFF));
      }
      unint64_t v11 = *v41;
      unsigned int v5 = *((unsigned __int8 *)*v41 + 16);
      uint64_t result = 1;
      if (v5 - 11 <= 1) {
        return result;
      }
    }
  }
  if (v5 <= 0x14)
  {
    if (v5 == 16)
    {
      uint64_t v44 = *((unsigned int *)v11 + 8);
      if (v44 >= 0x41)
      {
        int v63 = 0;
        int64_t v64 = (unint64_t)(v44 + 63) >> 6;
        do
        {
          if (v64-- < 1) {
            break;
          }
          unint64_t v66 = *(void *)(*((void *)v11 + 3) + 8 * v64);
          v63 += __clz(v66);
        }
        while (!v66);
        int v67 = v44 | 0xFFFFFFC0;
        if ((v44 & 0x3F) == 0) {
          int v67 = 0;
        }
        if (v63 + v67 == v44) {
          return 1;
        }
      }
      else if (!*((void *)v11 + 3))
      {
        return 1;
      }
    }
    else if (v5 == 17)
    {
      if (sub_1CB844168((uint64_t)v11, 0.0)) {
        return 1;
      }
    }
    else
    {
      uint64_t result = 1;
      if (v5 - 18 < 3 || v5 == 13) {
        return result;
      }
    }
  }
  unint64_t v46 = llvm::Type::getPrimitiveSizeInBits(a4);
  if (v45 == 1) {
  unint64_t v47 = a2 / v46;
  }
  if (a5) {
    unint64_t v47 = *(_DWORD *)(a3 + 8) + ~(a2 / v46);
  }
  else {
    unint64_t v47 = v47;
  }
  if (*(void *)(*(void *)a3 + 8 * v47)) {
    return 0;
  }
  *(void *)(*(void *)a3 + 8 * v47) = v11;
  return 1;
}

uint64_t sub_1CCA48144(void **a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 54)
  {
    uint64_t v4 = *(void *)(a2 - 64);
    if (!v4) {
      return 0;
    }
    **a1 = v4;
    uint64_t v5 = *(void *)(a2 - 32);
    if (!v5 || *(unsigned __int8 *)(v5 + 16) > 0x14u)
    {
      return 0;
    }
    else
    {
      *a1[1] = v5;
      return 1;
    }
  }
  else
  {
    if (v3 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 26)
      {
        uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **a1 = v2;
          uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (v2)
          {
            *a1[1] = v2;
            LOBYTE(v2) = 1;
          }
        }
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return (v3 == 5) & v2;
  }
}

BOOL sub_1CCA481F4(void **a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29) {
      return 0;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 26) {
        goto LABEL_40;
      }
      uint64_t v20 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
      if (!v20) {
        goto LABEL_40;
      }
      **a1 = v20;
      uint64_t v12 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v12) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v10 != 54) {
        goto LABEL_40;
      }
      uint64_t v11 = *(void *)(v9 - 64);
      if (!v11) {
        goto LABEL_40;
      }
      **a1 = v11;
      uint64_t v12 = *(void *)(v9 - 32);
      if (!v12 || *(unsigned __int8 *)(v12 + 16) > 0x14u) {
        goto LABEL_40;
      }
    }
    *a1[1] = v12;
    if (*a1[2] == *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) {
      return 1;
    }
LABEL_40:
    uint64_t v21 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    int v22 = *(unsigned __int8 *)(v21 + 16);
    if (v22 == 5)
    {
      if (*(_WORD *)(v21 + 18) != 26) {
        return 0;
      }
      uint64_t v25 = *(void *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF));
      if (!v25) {
        return 0;
      }
      **a1 = v25;
      uint64_t v18 = *(void *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) + 32);
      if (!v18) {
        return v18;
      }
    }
    else
    {
      if (v22 != 54) {
        return 0;
      }
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
        return 0;
      }
      **a1 = v23;
      uint64_t v18 = *(void *)(v21 - 32);
      if (!v18 || *(unsigned __int8 *)(v18 + 16) > 0x14u) {
        return 0;
      }
    }
    *a1[1] = v18;
    uint64_t v4 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return *a1[2] == *v4;
  }
  if (v2 != 57) {
    return 0;
  }
  uint64_t v4 = (void *)(a2 - 64);
  uint64_t v3 = *(void *)(a2 - 64);
  int v5 = *(unsigned __int8 *)(v3 + 16);
  if (v5 == 5)
  {
    if (*(_WORD *)(v3 + 18) == 26)
    {
      uint64_t v14 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
      if (v14)
      {
        **a1 = v14;
        uint64_t v7 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
        if (v7) {
          goto LABEL_25;
        }
      }
    }
  }
  else if (v5 == 54)
  {
    uint64_t v6 = *(void *)(v3 - 64);
    if (v6)
    {
      **a1 = v6;
      uint64_t v7 = *(void *)(v3 - 32);
      if (v7 && *(unsigned __int8 *)(v7 + 16) <= 0x14u)
      {
LABEL_25:
        *a1[1] = v7;
        if (*a1[2] != *(void *)(a2 - 32)) {
          goto LABEL_26;
        }
        return 1;
      }
    }
  }
LABEL_26:
  uint64_t v15 = *(void *)(a2 - 32);
  int v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 == 5)
  {
    if (*(_WORD *)(v15 + 18) == 26)
    {
      uint64_t v18 = *(void *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
      if (!v18) {
        return v18;
      }
      **a1 = v18;
      uint64_t v19 = *(void *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32);
      if (v19) {
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (v16 != 54) {
    return 0;
  }
  uint64_t v17 = *(void *)(v15 - 64);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = 0;
  **a1 = v17;
  uint64_t v19 = *(void *)(v15 - 32);
  if (v19 && *(unsigned __int8 *)(v19 + 16) <= 0x14u)
  {
LABEL_35:
    *a1[1] = v19;
    return *a1[2] == *v4;
  }
  return v18;
}

uint64_t sub_1CCA484B4(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 89) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  uint64_t v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  **a1 = v4;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 32);
  if (!v7 || *(unsigned char *)(v7 + 16) != 16) {
    return 0;
  }
  *a1[1] = v7;
  return 1;
}

BOOL sub_1CCA4852C(llvm::APInt *this, llvm::Constant *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v3 != 16)
  {
    if (v3 > 0x14 || (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 18) {
      return 0;
    }
    SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(a2, (llvm::Type *)1);
    if (!SplatValue) {
      return 0;
    }
    a2 = SplatValue;
    if (*((unsigned char *)SplatValue + 16) != 16) {
      return 0;
    }
  }

  return sub_1CBF53278((uint64_t)a2 + 24, this);
}

uint64_t sub_1CCA485C0(void **a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) != a2) {
        goto LABEL_34;
      }
      uint64_t v12 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      int v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 != 5)
      {
        if (v13 == 53 && sub_1CBC5BF18(a1, *(void *)(v12 - 64)))
        {
          uint64_t v6 = *(void *)(v12 - 32);
          if (v6 && *(unsigned __int8 *)(v6 + 16) <= 0x14u)
          {
LABEL_32:
            *a1[1] = v6;
            uint64_t v6 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
            if (v6)
            {
              *a1[2] = v6;
              LOBYTE(v6) = 1;
            }
            return (v5 == 5) & v6;
          }
        }
        goto LABEL_34;
      }
      if (*(_WORD *)(v12 + 18) != 25
        || !sub_1CBC5BF18(a1, *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF))))
      {
LABEL_34:
        LOBYTE(v6) = 0;
        return (v5 == 5) & v6;
      }
      uint64_t v6 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
      if (v6) {
        goto LABEL_32;
      }
    }
    return (v5 == 5) & v6;
  }
  uint64_t v7 = *(void *)(a3 - 64);
  int v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) == 25)
    {
      uint64_t result = sub_1CBC5BF18(a1, *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t v10 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
      if (v10) {
        goto LABEL_25;
      }
    }
    return 0;
  }
  if (v8 != 53) {
    return 0;
  }
  uint64_t result = sub_1CBC5BF18(a1, *(void *)(v7 - 64));
  if (!result) {
    return result;
  }
  uint64_t v10 = *(void *)(v7 - 32);
  if (!v10 || *(unsigned __int8 *)(v10 + 16) > 0x14u) {
    return 0;
  }
LABEL_25:
  uint64_t result = 0;
  *a1[1] = v10;
  uint64_t v15 = *(void *)(a3 - 32);
  if (v15)
  {
    if (*(unsigned __int8 *)(v15 + 16) <= 0x14u)
    {
      *a1[2] = v15;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CCA48788(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a1 + 1;
  **a1 = v6;
  int v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0) {
    uint64_t v9 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v9 = a2 - 32 * (v8 & 0x7FFFFFF);
  }
  uint64_t result = sub_1CCA38AD0(v7, *(void *)(v9 + 32));
  if (result)
  {
    int v11 = *(_DWORD *)(a2 + 20);
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v12 = a2 - 32 * (v11 & 0x7FFFFFF);
    }
    uint64_t v13 = *(void *)(v12 + 64);
    if (v13)
    {
      *a1[2] = v13;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCA4883C(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  unsigned int v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  **a1 = v4;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 32);
  if (!v7) {
    return 0;
  }
  *a1[1] = v7;
  int v8 = a1 + 2;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  }
  return sub_1CCA38AD0(v8, *(void *)(v10 + 64));
}

uint64_t sub_1CCA488C4(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 90) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    int v5 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v5 = (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  }
  uint64_t result = sub_1CCA48978(a1, *v5);
  if (result)
  {
    int v7 = *(_DWORD *)(a2 + 20);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v8 = a2 - 32 * (v7 & 0x7FFFFFF);
    }
    uint64_t v9 = *(void *)(v8 + 32);
    if (v9)
    {
      *a1[1] = v9;
      int v10 = *(_DWORD *)(a2 + 20);
      uint64_t v11 = (v10 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v10 & 0x7FFFFFF);
      uint64_t v12 = *(void *)(v11 + 64);
      if (v12)
      {
        *a1[2] = v12;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCA48978(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 48
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (uint64_t v9 = *(uint64_t **)(a2 - 8))
        : (uint64_t v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CCA489E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CCA48A90(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CCA48C0C(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CCA48C0C(a1, v14, v6);
}

uint64_t sub_1CCA48C0C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CCA489E4((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1CCA48CC8(_DWORD *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CCA48DB0((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1CCA48E5C((uint64_t)a1, v7);
    uint64_t v8 = 0;
    sub_1CCA48DB0((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*result != -4096) {
    --a1[1];
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CCA48DB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1CCA48E5C(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CCA48FE8(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CCA48FE8(a1, v14, v7);
}

uint64_t sub_1CCA48FE8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CCA48DB0((uint64_t)v5, v10, &v12);
      int v11 = v12;
      *uint64_t v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

llvm::Value *sub_1CCA490AC(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::GlobalValue *this, _WORD *a5, llvm::Constant *a6)
{
  v213[2] = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(a2 + 18) & 1) != 0
    || *(void *)a2 != a3[9]
    || *((void *)this + 3) != a3[8]
    || (*((unsigned char *)this + 80) & 1) == 0)
  {
    return 0;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) {
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  }
  {
    return 0;
  }
  if (llvm::GlobalValue::isInterposable(this)) {
    return 0;
  }
  if ((*((unsigned char *)this + 80) & 2) != 0) {
    return 0;
  }
  int v11 = (unsigned __int8 *)*((void *)this - 4);
  int v12 = v11[16];
  if (v12 != 14 && v12 != 8) {
    return 0;
  }
  uint64_t v13 = *(void *)v11;
  unint64_t v14 = *(void *)(*(void *)v11 + 32);
  if (v14 > *(void *)(a1 + 16)) {
    return 0;
  }
  int v15 = *((_DWORD *)a3 + 5);
  uint64_t v16 = v15 & 0x7FFFFFF;
  if ((v15 & 0x7FFFFFFu) < 3) {
    return 0;
  }
  uint64_t v17 = &a3[-4 * v16];
  uint64_t v18 = v17[4];
  if (*(unsigned char *)(v18 + 16) != 16) {
    return 0;
  }
  uint64_t v19 = *(unsigned int *)(v18 + 32);
  if (v19 > 0x40)
  {
    int v20 = 0;
    int64_t v21 = (unint64_t)(v19 + 63) >> 6;
    do
    {
      BOOL v22 = v21-- < 1;
      if (v22) {
        break;
      }
      unint64_t v23 = *(void *)(*(void *)(v18 + 24) + 8 * v21);
      v20 += __clz(v23);
    }
    while (!v23);
    int v24 = v19 | 0xFFFFFFC0;
    if ((v19 & 0x3F) == 0) {
      int v24 = 0;
    }
    if (v20 + v24 != v19) {
      return 0;
    }
  }
  else if (*(void *)(v18 + 24))
  {
    return 0;
  }
  if (*(unsigned __int8 *)(v17[8] + 16) < 0x15u) {
    return 0;
  }
  uint64_t v211 = (unsigned int *)v213;
  uint64_t v212 = 0x400000000;
  if (v16 != 3)
  {
    unsigned int v56 = 0;
    uint64_t v57 = **(void **)(v13 + 16);
    unsigned int v58 = 3;
    while (1)
    {
      uint64_t v59 = a3[4 * v58 + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (!v59 || *(unsigned char *)(v59 + 16) != 16) {
        break;
      }
      uint64_t v61 = (unint64_t *)(v59 + 24);
      if (*(_DWORD *)(v59 + 32) >= 0x41u) {
        uint64_t v61 = (unint64_t *)*v61;
      }
      unint64_t v62 = *v61;
      if (HIDWORD(*v61)) {
        break;
      }
      int v63 = *(unsigned __int8 *)(v57 + 8);
      if (v63 == 16 && v57)
      {
        int64_t v64 = (uint64_t *)(*(void *)(v57 + 16) + 8 * v62);
      }
      else
      {
        uint64_t v25 = 0;
        if (v63 != 17 || !v57) {
          goto LABEL_208;
        }
        if (v62 >= *(void *)(v57 + 32)) {
          break;
        }
        int64_t v64 = (uint64_t *)(v57 + 24);
      }
      uint64_t v57 = *v64;
      if (v56 >= HIDWORD(v212)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v211[v56] = v62;
      unsigned int v56 = v212 + 1;
      LODWORD(v212) = v212 + 1;
      if (v16 == ++v58) {
        goto LABEL_31;
      }
    }
    uint64_t v25 = 0;
    goto LABEL_208;
  }
LABEL_31:
  unint64_t v199 = v14;
  if (v14)
  {
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    int v29 = (llvm::Constant *)*((void *)a5 - 4);
    uint64_t v30 = v14;
    int v204 = -2;
    int v205 = -2;
    int v31 = -2;
    int v203 = -2;
    int v201 = -2;
    int v202 = -2;
    while (1)
    {
      AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)v11, (llvm::Type *)v27);
      if (!AggregateElement) {
        goto LABEL_207;
      }
      Value = AggregateElement;
      uint64_t v35 = (llvm::Constant *)v212;
      if (v212) {
        Value = llvm::ConstantExpr::getExtractValue(AggregateElement, v211, v212, 0);
      }
      if (a6) {
        Value = (llvm::ConstantExpr *)llvm::ConstantExpr::getAnd(Value, a6, v35, v33);
      }
      int v36 = llvm::ConstantFoldCompareInstOperands(a5[9] & 0x3F, Value, v29, *(llvm::DataLayout **)(a1 + 80), *(void *)(a1 + 64));
      int v37 = *((unsigned __int8 *)v36 + 16);
      if ((v37 - 11) <= 1)
      {
        if (v31 == v27 - 1) {
          int v31 = v27;
        }
        int v38 = v205;
        if (v205 == v27 - 1) {
          int v38 = v27;
        }
        int v205 = v38;
        goto LABEL_96;
      }
      if (v37 != 16) {
        goto LABEL_207;
      }
      uint64_t v39 = *((unsigned int *)v36 + 8);
      if (v39 > 0x40)
      {
        int v45 = 0;
        int64_t v46 = (unint64_t)(v39 + 63) >> 6;
        do
        {
          BOOL v22 = v46-- < 1;
          if (v22) {
            break;
          }
          unint64_t v47 = *(void *)(*((void *)v36 + 3) + 8 * v46);
          v45 += __clz(v47);
        }
        while (!v47);
        int v48 = v39 | 0xFFFFFFC0;
        if ((v39 & 0x3F) == 0) {
          int v48 = 0;
        }
        if (v45 + v48 != v39)
        {
LABEL_47:
          if (v204 == -2) {
            int v40 = v27;
          }
          else {
            int v40 = -3;
          }
          if (v31 == v27 - 1) {
            int v41 = v27;
          }
          else {
            int v41 = -3;
          }
          int v42 = 0;
          if (v202 == -2) {
            int v31 = v27;
          }
          else {
            int v31 = v41;
          }
          if (v202 == -2) {
            int v43 = v204;
          }
          else {
            int v43 = v40;
          }
          int v204 = v43;
          if (v202 == -2) {
            int v44 = v27;
          }
          else {
            int v44 = v202;
          }
          int v202 = v44;
          goto LABEL_85;
        }
      }
      else if (*((void *)v36 + 3))
      {
        goto LABEL_47;
      }
      if (v203 == -2) {
        int v49 = v27;
      }
      else {
        int v49 = -3;
      }
      if (v205 == v27 - 1) {
        int v50 = v27;
      }
      else {
        int v50 = -3;
      }
      BOOL v51 = v201 == -2;
      int v42 = 1;
      if (v201 == -2) {
        int v52 = v27;
      }
      else {
        int v52 = v201;
      }
      int v201 = v52;
      if (v51) {
        int v53 = v203;
      }
      else {
        int v53 = v49;
      }
      int v203 = v53;
      if (v51) {
        int v54 = v27;
      }
      else {
        int v54 = v50;
      }
      int v205 = v54;
LABEL_85:
      if (v27 > 0x3F) {
        int v42 = 1;
      }
      if (v42) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = 1 << v27;
      }
      v28 |= v55;
      if (v27 >= 0x40 && (v27 & 8) == 0 && v204 == -3 && v203 == -3 && v31 == -3 && v205 == -3) {
        goto LABEL_207;
      }
LABEL_96:
      if (++v27 == v30) {
        goto LABEL_120;
      }
    }
  }
  unint64_t v28 = 0;
  int v201 = -2;
  int v202 = -2;
  int v203 = -2;
  int v31 = -2;
  int v205 = -2;
  int v204 = -2;
LABEL_120:
  int v198 = (llvm::Type *)v28;
  uint64_t v200 = (llvm::IntegerType ***)v11;
  uint64_t v65 = (unsigned __int8 *)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 8];
  if ((*((unsigned char *)a3 + 17) & 2) == 0)
  {
    uint64_t v66 = *(void *)(a1 + 80);
    uint64_t v67 = *a3;
    unsigned int v68 = *(_DWORD *)(*a3 + 8);
    if ((v68 & 0xFE) == 0x12) {
      unsigned int v68 = *(_DWORD *)(**(void **)(v67 + 16) + 8);
    }
    uint64_t v69 = *(void *)(v66 + 232);
    if (v68 < 0x100) {
      goto LABEL_132;
    }
    unsigned int v70 = v68 >> 8;
    unint64_t v71 = *(unsigned int *)(v66 + 240);
    uint64_t v72 = *(void *)(v66 + 232);
    if (v71)
    {
      uint64_t v72 = v69;
      unint64_t v73 = v71;
      do
      {
        unint64_t v74 = v73 >> 1;
        uint64_t v75 = v72 + 16 * (v73 >> 1);
        unsigned int v76 = *(_DWORD *)(v75 + 8);
        uint64_t v77 = v75 + 16;
        v73 += ~(v73 >> 1);
        if (v76 < v70) {
          uint64_t v72 = v77;
        }
        else {
          unint64_t v73 = v74;
        }
      }
      while (v73);
    }
    if (v72 == v69 + 16 * v71 || *(_DWORD *)(v72 + 8) != v70) {
LABEL_132:
    }
      uint64_t v72 = v69;
    BOOL v78 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v67, (llvm::LLVMContext *)*(unsigned int *)(v72 + 4));
    uint64_t v79 = (uint64_t)v78;
    if ((*(_DWORD *)(v67 + 8) & 0xFE) == 0x12)
    {
      uint64_t v193 = (llvm::Type *)*(unsigned int *)(v67 + 32);
      if (*(_DWORD *)(v67 + 8) == 19) {
        llvm::ScalableVectorType::get(v78, v193);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v78, v193);
      }
      uint64_t v79 = v194;
    }
    unint64_t v80 = *(unsigned int *)(v79 + 8);
    unsigned int v81 = *(llvm::Type **)v65;
    if (llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v65) > v80 >> 8)
    {
      uint64_t v82 = *(uint64_t **)(a1 + 24);
      __int16 v207 = 257;
      if (v81 != (llvm::Type *)v79)
      {
        if (v65[16] <= 0x14u)
        {
          uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v82[9] + 224))(v82[9], 38, v65, v79);
          uint64_t v65 = (unsigned __int8 *)v86;
          if (v86) {
            BOOL v87 = *(unsigned __int8 *)(v86 + 16) >= 0x1Cu;
          }
          else {
            BOOL v87 = 0;
          }
          if (v87)
          {
            (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v82[10] + 16))(v82[10], v86, v206, v82[6], v82[7]);
            uint64_t v195 = *((unsigned int *)v82 + 2);
            if (v195)
            {
              uint64_t v196 = *v82;
              uint64_t v197 = *v82 + 16 * v195;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v196, *(llvm::MDNode **)(v196 + 8));
                v196 += 16;
              }
              while (v196 != v197);
            }
          }
        }
        else
        {
          __int16 v210 = 257;
          uint64_t v65 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v65, v79, &v208, 0);
          (*(void (**)(uint64_t))(*(void *)v82[10] + 16))(v82[10]);
          uint64_t v83 = *((unsigned int *)v82 + 2);
          if (v83)
          {
            uint64_t v84 = *v82;
            uint64_t v85 = *v82 + 16 * v83;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v84, *(llvm::MDNode **)(v84 + 8));
              v84 += 16;
            }
            while (v84 != v85);
          }
        }
      }
    }
  }
  uint64_t v88 = *(llvm::DataLayout **)(a1 + 80);
  unsigned int v89 = *(llvm::Type **)(*v200)[2];
  unint64_t v90 = (unint64_t)(sub_1CB83544C((uint64_t)v88, (uint64_t)v89) + 7) >> 3;
  BOOL v92 = v91 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v88, v89, 1);
  uint64_t v97 = ((1 << Alignment) + 0xFFFFFFFFLL + v90) & -(1 << Alignment);
  if (v92) {
  if (v204 != -3)
  }
  {
    if (!(*((unsigned char *)a3 + 17) & 2 | v97 & 1))
    {
      uint64_t v103 = (llvm::ConstantInt **)llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t v104 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v105 = llvm::ConstantInt::get(*v103, __clz(__rbit32(v97)), 0);
      uint64_t v106 = sub_1CC2429AC(v104, (uint64_t)v103, (uint64_t)v105, (uint64_t)&v208, 0);
      uint64_t v107 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v65 = (unsigned __int8 *)sub_1CBF52474(v107, v65, (uint64_t)v106, (uint64_t)&v208);
    }
    if (v202 == -2)
    {
      unint64_t v108 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
      uint64_t v109 = *v108;
      uint64_t v110 = *(llvm::Value **)(*v108 + 1568);
      if (!v110)
      {
        uint64_t v111 = *(llvm::ConstantInt **)(v109 + 1888);
        unsigned int v112 = *(_DWORD *)(v109 + 1896);
        unsigned int v209 = v112 >> 8;
        if (v112 >> 8 > 0x40) {
          operator new[]();
        }
        int v208 = 0;
        uint64_t v110 = (llvm::Value *)llvm::ConstantInt::get(v111, (llvm::LLVMContext *)&v208, v95);
        if (v209 >= 0x41 && v208) {
          MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
        }
        *(void *)(v109 + 1568) = v110;
      }
      goto LABEL_168;
    }
    int v121 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, v202, 0);
    if (v204 == -2)
    {
      int v122 = operator new(0x80uLL);
      uint64_t v25 = (llvm::Value *)(v122 + 16);
      v122[21] = v122[21] & 0x38000000 | 2;
      *(void *)int v122 = 0;
      *((void *)v122 + 1) = 0;
      *((void *)v122 + 2) = 0;
      *((void *)v122 + 3) = v122 + 16;
      *((void *)v122 + 4) = 0;
      *((void *)v122 + 5) = 0;
      *((void *)v122 + 6) = 0;
      *((void *)v122 + 7) = v122 + 16;
      __int16 v210 = 257;
      BOOL v123 = *(llvm::Type **)v65;
      uint64_t v124 = ***(void ***)v65 + 1888;
      if (*(void *)v65 && (*((_DWORD *)v123 + 2) & 0xFE) == 0x12)
      {
        unint64_t v178 = (uint64_t **)(***(void ***)v65 + 1888);
        uint64_t v179 = (llvm::Type *)*((unsigned int *)v123 + 8);
        if (*((_DWORD *)v123 + 2) == 19) {
          llvm::ScalableVectorType::get(v178, v179);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v178, v179);
        }
        uint64_t v124 = v180;
      }
      uint64_t v125 = v25;
      __int16 v126 = 32;
      goto LABEL_184;
    }
    uint64_t v141 = *(void *)(a1 + 24);
    __int16 v210 = 257;
    uint64_t v142 = sub_1CB845F20(v141, 32, v65, (uint64_t)v121, (uint64_t)&v208);
    BOOL v143 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, v204, 0);
    uint64_t v144 = *(void *)(a1 + 24);
    __int16 v210 = 257;
    int v145 = sub_1CB845F20(v144, 32, v65, (uint64_t)v143, (uint64_t)&v208);
    __int16 v210 = 257;
    char v146 = 29;
LABEL_197:
    unsigned int v120 = llvm::BinaryOperator::Create(v146, v142, (uint64_t)v145, &v208, 0);
    goto LABEL_198;
  }
  if (v203 != -3)
  {
    if (!(*((unsigned char *)a3 + 17) & 2 | v97 & 1))
    {
      uint64_t v113 = (llvm::ConstantInt **)llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t v114 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v115 = llvm::ConstantInt::get(*v113, __clz(__rbit32(v97)), 0);
      uint64_t v116 = sub_1CC2429AC(v114, (uint64_t)v113, (uint64_t)v115, (uint64_t)&v208, 0);
      uint64_t v117 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v65 = (unsigned __int8 *)sub_1CBF52474(v117, v65, (uint64_t)v116, (uint64_t)&v208);
    }
    if (v201 == -2)
    {
      unint64_t v118 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
      uint64_t v119 = *v118;
      uint64_t v110 = *(llvm::Value **)(*v118 + 1560);
      if (!v110)
      {
        unint64_t v175 = *(llvm::ConstantInt **)(v119 + 1888);
        unsigned int v176 = *(_DWORD *)(v119 + 1896);
        unsigned int v209 = v176 >> 8;
        if (v176 >> 8 > 0x40) {
          operator new[]();
        }
        if (v176 <= 0xFF) {
          LOBYTE(v177) = 0;
        }
        else {
          unint64_t v177 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v176) + 63);
        }
        int v208 = (const char *)(v177 & 1);
        uint64_t v110 = (llvm::Value *)llvm::ConstantInt::get(v175, (llvm::LLVMContext *)&v208, v95);
        if (v209 >= 0x41 && v208) {
          MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
        }
        *(void *)(v119 + 1560) = v110;
      }
LABEL_168:
      unsigned int v120 = (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a5, v110);
LABEL_198:
      uint64_t v25 = v120;
      goto LABEL_208;
    }
    int v121 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, v201, 0);
    if (v203 == -2)
    {
      int v137 = operator new(0x80uLL);
      uint64_t v25 = (llvm::Value *)(v137 + 16);
      v137[21] = v137[21] & 0x38000000 | 2;
      *(void *)int v137 = 0;
      *((void *)v137 + 1) = 0;
      *((void *)v137 + 2) = 0;
      *((void *)v137 + 3) = v137 + 16;
      *((void *)v137 + 4) = 0;
      *((void *)v137 + 5) = 0;
      *((void *)v137 + 6) = 0;
      *((void *)v137 + 7) = v137 + 16;
      __int16 v210 = 257;
      int v138 = *(llvm::Type **)v65;
      uint64_t v124 = ***(void ***)v65 + 1888;
      if (*(void *)v65 && (*((_DWORD *)v138 + 2) & 0xFE) == 0x12)
      {
        v184 = (uint64_t **)(***(void ***)v65 + 1888);
        uint64_t v185 = (llvm::Type *)*((unsigned int *)v138 + 8);
        if (*((_DWORD *)v138 + 2) == 19) {
          llvm::ScalableVectorType::get(v184, v185);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v184, v185);
        }
        uint64_t v124 = v186;
      }
      uint64_t v125 = v25;
      __int16 v126 = 33;
LABEL_184:
      uint64_t v139 = (uint64_t)v65;
LABEL_185:
      uint64_t v140 = (uint64_t)v121;
LABEL_195:
      llvm::CmpInst::CmpInst(v125, v124, 53, v126, v139, v140, &v208, 0, 0);
      goto LABEL_208;
    }
    uint64_t v156 = *(void *)(a1 + 24);
    __int16 v210 = 257;
    uint64_t v142 = sub_1CB845F20(v156, 33, v65, (uint64_t)v121, (uint64_t)&v208);
    unsigned int v157 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, v203, 0);
    uint64_t v158 = *(void *)(a1 + 24);
    __int16 v210 = 257;
    int v145 = sub_1CB845F20(v158, 33, v65, (uint64_t)v157, (uint64_t)&v208);
    __int16 v210 = 257;
    char v146 = 28;
    goto LABEL_197;
  }
  if (v31 != -3)
  {
    if (!(*((unsigned char *)a3 + 17) & 2 | v97 & 1))
    {
      BOOL v127 = (llvm::ConstantInt **)llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t v128 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v129 = llvm::ConstantInt::get(*v127, __clz(__rbit32(v97)), 0);
      uint64_t v130 = sub_1CC2429AC(v128, (uint64_t)v127, (uint64_t)v129, (uint64_t)&v208, 0);
      uint64_t v131 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v65 = (unsigned __int8 *)sub_1CBF52474(v131, v65, (uint64_t)v130, (uint64_t)&v208);
    }
    if (v202)
    {
      uint64_t v132 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, -v202, 0);
      uint64_t v133 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v65 = (unsigned __int8 *)sub_1CB844A3C(v133, v65, (uint64_t)v132, (uint64_t)&v208, 0, 0);
    }
    uint8x8_t v134 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, v31 - v202 + 1, 0);
    uint64_t v135 = operator new(0x80uLL);
    uint64_t v25 = (llvm::Value *)(v135 + 16);
    v135[21] = v135[21] & 0x38000000 | 2;
    *(void *)uint64_t v135 = 0;
    *((void *)v135 + 1) = 0;
    *((void *)v135 + 2) = 0;
    *((void *)v135 + 3) = v135 + 16;
    *((void *)v135 + 4) = 0;
    *((void *)v135 + 5) = 0;
    *((void *)v135 + 6) = 0;
    *((void *)v135 + 7) = v135 + 16;
    __int16 v210 = 257;
    uint64_t v136 = *(llvm::Type **)v65;
    uint64_t v124 = ***(void ***)v65 + 1888;
    if (*(void *)v65 && (*((_DWORD *)v136 + 2) & 0xFE) == 0x12)
    {
      uint64_t v181 = (uint64_t **)(***(void ***)v65 + 1888);
      uint64_t v182 = (llvm::Type *)*((unsigned int *)v136 + 8);
      if (*((_DWORD *)v136 + 2) == 19) {
        llvm::ScalableVectorType::get(v181, v182);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v181, v182);
      }
      uint64_t v124 = v183;
    }
    uint64_t v125 = v25;
    __int16 v126 = 36;
    goto LABEL_194;
  }
  if (v205 != -3)
  {
    if (!(*((unsigned char *)a3 + 17) & 2 | v97 & 1))
    {
      uint64_t v147 = (llvm::ConstantInt **)llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t v148 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      char v149 = llvm::ConstantInt::get(*v147, __clz(__rbit32(v97)), 0);
      unsigned int v150 = sub_1CC2429AC(v148, (uint64_t)v147, (uint64_t)v149, (uint64_t)&v208, 0);
      uint64_t v151 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v65 = (unsigned __int8 *)sub_1CBF52474(v151, v65, (uint64_t)v150, (uint64_t)&v208);
    }
    if (v201)
    {
      unint64_t v152 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, -v201, 0);
      uint64_t v153 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v65 = (unsigned __int8 *)sub_1CB844A3C(v153, v65, (uint64_t)v152, (uint64_t)&v208, 0, 0);
    }
    uint8x8_t v134 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, v205 - v201, 0);
    uint64_t v154 = operator new(0x80uLL);
    uint64_t v25 = (llvm::Value *)(v154 + 16);
    v154[21] = v154[21] & 0x38000000 | 2;
    *(void *)uint64_t v154 = 0;
    *((void *)v154 + 1) = 0;
    *((void *)v154 + 2) = 0;
    *((void *)v154 + 3) = v154 + 16;
    *((void *)v154 + 4) = 0;
    *((void *)v154 + 5) = 0;
    *((void *)v154 + 6) = 0;
    *((void *)v154 + 7) = v154 + 16;
    __int16 v210 = 257;
    unsigned __int32 v155 = *(llvm::Type **)v65;
    uint64_t v124 = ***(void ***)v65 + 1888;
    if (*(void *)v65 && (*((_DWORD *)v155 + 2) & 0xFE) == 0x12)
    {
      uint64_t v187 = (uint64_t **)(***(void ***)v65 + 1888);
      uint64_t v188 = (llvm::Type *)*((unsigned int *)v155 + 8);
      if (*((_DWORD *)v155 + 2) == 19) {
        llvm::ScalableVectorType::get(v187, v188);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v187, v188);
      }
      uint64_t v124 = v189;
    }
    uint64_t v125 = v25;
    __int16 v126 = 34;
LABEL_194:
    uint64_t v139 = (uint64_t)v65;
    uint64_t v140 = (uint64_t)v134;
    goto LABEL_195;
  }
  unint64_t v98 = *(llvm::Type ****)v65;
  if (v199 <= (unint64_t)*(unsigned int *)(*(void *)v65 + 8) >> 8) {
    goto LABEL_252;
  }
  uint64_t v99 = *(void *)(a1 + 80);
  uint64_t v100 = *(void *)(v99 + 40);
  if (v100)
  {
    uint64_t v101 = *(unsigned __int8 **)(v99 + 32);
    while (1)
    {
      uint64_t v102 = (llvm::LLVMContext *)*v101;
      if (v102 >= v199) {
        break;
      }
      uint64_t v25 = 0;
      ++v101;
      if (!--v100) {
        goto LABEL_208;
      }
    }
    unint64_t v98 = (llvm::Type ***)llvm::IntegerType::get(**v200, v102);
    if (v98)
    {
LABEL_252:
      if (!(*((unsigned char *)a3 + 17) & 2 | v97 & 1))
      {
        uint64_t v159 = (llvm::ConstantInt **)llvm::ConstantInt::get(*(llvm::ConstantInt **)v65, 0xFFFFFFFFFFFFFFFFLL, 0);
        uint64_t v160 = *(void *)(a1 + 24);
        __int16 v210 = 257;
        uint64_t v161 = llvm::ConstantInt::get(*v159, __clz(__rbit32(v97)), 0);
        int v162 = sub_1CC2429AC(v160, (uint64_t)v159, (uint64_t)v161, (uint64_t)&v208, 0);
        uint64_t v163 = *(void *)(a1 + 24);
        __int16 v210 = 257;
        uint64_t v65 = (unsigned __int8 *)sub_1CBF52474(v163, v65, (uint64_t)v162, (uint64_t)&v208);
      }
      uint64_t v164 = *(void *)(a1 + 24);
      __int16 v210 = 257;
      uint64_t v165 = sub_1CBF56614(v164, (llvm::CastInst *)v65, v98, 0, (uint64_t)&v208, v96);
      uint64_t v166 = *(void *)(a1 + 24);
      uint64_t v167 = llvm::ConstantInt::get((llvm::ConstantInt *)v98, (unint64_t)v198, 0);
      __int16 v210 = 257;
      uint64_t v168 = sub_1CC2429AC(v166, (uint64_t)v167, (uint64_t)v165, (uint64_t)&v208, 0);
      uint64_t v169 = *(void *)(a1 + 24);
      uint64_t v170 = llvm::ConstantInt::get((llvm::ConstantInt *)v98, 1uLL, 0);
      __int16 v210 = 257;
      uint64_t v171 = sub_1CBF52474(v169, v170, (uint64_t)v168, (uint64_t)&v208);
      uint64_t v172 = operator new(0x80uLL);
      v172[21] = v172[21] & 0x38000000 | 2;
      uint64_t v25 = (llvm::Value *)(v172 + 16);
      *(void *)uint64_t v172 = 0;
      *((void *)v172 + 1) = 0;
      *((void *)v172 + 2) = 0;
      *((void *)v172 + 3) = v172 + 16;
      *((void *)v172 + 4) = 0;
      *((void *)v172 + 5) = 0;
      *((void *)v172 + 6) = 0;
      *((void *)v172 + 7) = v172 + 16;
      int v121 = llvm::ConstantInt::get((llvm::ConstantInt *)v98, 0, 0);
      __int16 v210 = 257;
      uint64_t v173 = ***(void ***)v171;
      uint64_t v124 = v173 + 1888;
      if (*(void *)v171) {
        BOOL v174 = (*(_DWORD *)(*(void *)v171 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v174 = 0;
      }
      if (v174)
      {
        unsigned int v190 = (uint64_t **)(v173 + 1888);
        uint64_t v191 = (llvm::Type *)*(unsigned int *)(*(void *)v171 + 32);
        if (*(_DWORD *)(*(void *)v171 + 8) == 19) {
          llvm::ScalableVectorType::get(v190, v191);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v190, v191);
        }
        uint64_t v124 = v192;
      }
      uint64_t v125 = v25;
      __int16 v126 = 33;
      uint64_t v139 = (uint64_t)v171;
      goto LABEL_185;
    }
  }
LABEL_207:
  uint64_t v25 = 0;
LABEL_208:
  if (v211 != (unsigned int *)v213) {
    free(v211);
  }
  return v25;
}

llvm::UndefValue **sub_1CCA4A35C(uint64_t a1, llvm::Value *i, llvm::Value *this, uint64_t a4, llvm::Instruction *VectorSplat)
{
  if ((a4 - 38) < 4) {
    return 0;
  }
  uint64_t v10 = a4;
LABEL_5:
  uint64_t v13 = (uint64_t)i;
  int v14 = v10 & 0xFFFFFFFE;
  for (uint64_t i = this; ; uint64_t i = *v29)
  {
    if (*((unsigned char *)i + 16) != 62) {
      uint64_t i = llvm::Value::stripPointerCasts(i);
    }
    int v15 = *(_DWORD *)(v13 + 20);
    uint64_t v16 = (v15 & 0x40000000) != 0 ? *(llvm::Value ***)(v13 - 8) : (llvm::Value **)(v13 - 32 * (v15 & 0x7FFFFFF));
    uint64_t v17 = *v16;
    int v18 = *(unsigned char *)(v13 + 17) & 2;
    if (v17 == i) {
      break;
    }
LABEL_15:
    if (v14 != 32) {
      goto LABEL_31;
    }
    if (!v18) {
      goto LABEL_31;
    }
    unsigned int v19 = *((unsigned __int8 *)i + 16);
    if (v19 > 0x14) {
      goto LABEL_31;
    }
    if (v19 == 16)
    {
      uint64_t v20 = *((unsigned int *)i + 8);
      if (v20 >= 0x41)
      {
        int v30 = 0;
        int64_t v31 = (unint64_t)(v20 + 63) >> 6;
        do
        {
          BOOL v32 = v31-- < 1;
          if (v32) {
            break;
          }
          unint64_t v33 = *(void *)(*((void *)i + 3) + 8 * v31);
          v30 += __clz(v33);
        }
        while (!v33);
        int v34 = v20 | 0xFFFFFFC0;
        if ((v20 & 0x3F) == 0) {
          int v34 = 0;
        }
        if (v30 + v34 != v20) {
          goto LABEL_31;
        }
      }
      else if (*((void *)i + 3))
      {
        goto LABEL_31;
      }
    }
    else if (v19 == 17)
    {
      if ((sub_1CB844168((uint64_t)i, 0.0) & 1) == 0) {
        goto LABEL_31;
      }
    }
    else if (v19 - 18 >= 3 && v19 != 13)
    {
      goto LABEL_31;
    }
    unsigned int v21 = *(_DWORD *)(*(void *)i + 8);
    if ((v21 & 0xFE) == 0x12) {
      unsigned int v21 = *(_DWORD *)(**(void **)(*(void *)i + 16) + 8);
    }
    uint64_t v22 = *(void *)(*((void *)VectorSplat + 5) + 56);
    if ((!v22 || (uint64_t v23 = *(void *)(v22 + 112)) == 0 || (*(unsigned char *)(v23 + 17) & 1) == 0) && v21 <= 0xFF)
    {
      int v58 = *(_DWORD *)(v13 + 20);
      if ((v58 & 0x40000000) != 0) {
        uint64_t v59 = *(llvm::Instruction ***)(v13 - 8);
      }
      else {
        uint64_t v59 = (llvm::Instruction **)(v13 - 32 * (v58 & 0x7FFFFFF));
      }
      VectorSplat = *v59;
      int v67 = *(_DWORD *)(*(void *)v13 + 8);
      if ((v67 & 0xFE) == 0x12 && *(unsigned char *)(*(void *)VectorSplat + 8) == 15)
      {
        uint64_t v68 = *(unsigned int *)(*(void *)v13 + 32);
        uint64_t v69 = *(void *)(a1 + 24);
        __int16 v284 = 257;
        VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v69, (llvm::Type *)(v68 | ((unint64_t)(v67 == 19) << 32)), (unsigned __int8 *)VectorSplat, (uint64_t)v283);
      }
      unsigned int v70 = operator new(0x80uLL);
      uint64_t v7 = (llvm::Value *)(v70 + 16);
      v70[21] = v70[21] & 0x38000000 | 2;
      *(void *)unsigned int v70 = 0;
      *((void *)v70 + 1) = 0;
      *((void *)v70 + 2) = 0;
      *((void *)v70 + 3) = v70 + 16;
      *((void *)v70 + 4) = 0;
      *((void *)v70 + 5) = 0;
      *((void *)v70 + 6) = 0;
      *((void *)v70 + 7) = v70 + 16;
      PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(i, *(llvm::Constant **)VectorSplat, v71);
      __int16 v284 = 257;
      unint64_t v73 = *(llvm::Constant **)VectorSplat;
      uint64_t v55 = ***(void ***)VectorSplat + 1888;
      if (*(void *)VectorSplat && (*((_DWORD *)v73 + 2) & 0xFE) == 0x12)
      {
        uint64_t v236 = (uint64_t **)(***(void ***)VectorSplat + 1888);
        int v237 = (llvm::Type *)*((unsigned int *)v73 + 8);
        if (*((_DWORD *)v73 + 2) == 19) {
          llvm::ScalableVectorType::get(v236, v237);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v236, v237);
        }
        uint64_t v55 = v238;
      }
      unsigned int v56 = v7;
      __int16 v57 = v10;
      goto LABEL_336;
    }
LABEL_31:
    int v24 = *((unsigned __int8 *)i + 16);
    if (v24 != 62 && (v24 != 5 || *((_WORD *)i + 9) != 34)) {
      goto LABEL_355;
    }
    int v25 = *((_DWORD *)i + 5);
    if ((v25 & 0x40000000) != 0) {
      unsigned int v26 = (llvm::Value **)*((void *)i - 1);
    }
    else {
      unsigned int v26 = (llvm::Value **)((char *)i - 32 * (v25 & 0x7FFFFFF));
    }
    if (v17 != *v26)
    {
      int v38 = *(_DWORD *)(v13 + 20);
      if (((v38 ^ v25) & 0x7FFFFFF) == 0
        && *(void *)v13 == *(void *)i
        && (*(unsigned char *)(v13 + 16) != 62 ? (uint64_t v39 = 24) : (uint64_t v39 = 64),
            (uint64_t v40 = *(void *)(v13 + v39), v24 != 62) ? (v41 = 24) : (v41 = 64),
            v40 == *(void *)((char *)i + v41)))
      {
        uint64_t v208 = v38 & 0x7FFFFFF;
        if ((v38 & 0x7FFFFFF) == 1)
        {
          int v42 = 1;
        }
        else
        {
          int v229 = 2;
          do
          {
            uint64_t v230 = v13 - 32 * v208;
            if ((v38 & 0x40000000) != 0) {
              uint64_t v230 = *(void *)(v13 - 8);
            }
            uint64_t v231 = (char *)i - 32 * (v25 & 0x7FFFFFF);
            if ((v25 & 0x40000000) != 0) {
              uint64_t v231 = (char *)*((void *)i - 1);
            }
            BOOL v62 = *(void *)(v230 + 32 * (v229 - 1)) == *(void *)&v231[32 * (v229 - 1)];
            int v42 = v62;
          }
          while (v62 && v208 != v229++);
        }
      }
      else
      {
        int v42 = 0;
      }
      if ((v38 & 0x40000000) != 0)
      {
        int v43 = *(void ***)(v13 - 8);
        if (v42) {
          goto LABEL_106;
        }
        goto LABEL_111;
      }
      int v43 = (void **)(v13 - 32 * (v38 & 0x7FFFFFF));
      if (!v42) {
        goto LABEL_111;
      }
LABEL_106:
      BOOL v60 = (_DWORD *)**v43;
      uint64_t v61 = (uint64_t **)(**(void **)v60 + 1888);
      if (v60) {
        BOOL v62 = (v60[2] & 0xFE) == 18;
      }
      else {
        BOOL v62 = 0;
      }
      if (v62)
      {
        unsigned int v239 = (llvm::Type *)v60[8];
        if (v60[2] == 19) {
          llvm::ScalableVectorType::get(v61, v239);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v61, v239);
        }
      }
      if (v61 != *(uint64_t ***)VectorSplat)
      {
LABEL_111:
        if ((*(unsigned char *)(v13 + 17) & 2) != 0 && (*((unsigned char *)i + 17) & 2) != 0)
        {
          int v63 = *(_DWORD *)(v13 + 20);
          if ((v63 & 0x40000000) != 0)
          {
            uint64_t v65 = *(void *)(v13 - 8);
            uint64_t v64 = v63 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v64 = v63 & 0x7FFFFFF;
            uint64_t v65 = v13 - 32 * v64;
          }
          uint64_t v102 = (uint64_t *)(v65 + 32);
          uint64_t v103 = 32 * v64 - 32;
          while (v103)
          {
            uint64_t v104 = *v102;
            v102 += 4;
            v103 -= 32;
            if (*(unsigned char *)(v104 + 16) != 16)
            {
              uint64_t v105 = *(void *)(v13 + 8);
              if (!v105 || *(void *)(v105 + 8)) {
                goto LABEL_355;
              }
              break;
            }
          }
          int v106 = *((_DWORD *)i + 5);
          if ((v106 & 0x40000000) != 0)
          {
            unint64_t v108 = (char *)*((void *)i - 1);
            uint64_t v107 = v106 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v107 = v106 & 0x7FFFFFF;
            unint64_t v108 = (char *)i - 32 * v107;
          }
          int v201 = (uint64_t *)(v108 + 32);
          uint64_t v202 = 32 * v107 - 32;
          while (v202)
          {
            uint64_t v203 = *v201;
            v201 += 4;
            v202 -= 32;
            if (*(unsigned char *)(v203 + 16) != 16)
            {
              uint64_t v204 = *((void *)i + 1);
              if (!v204 || *(void *)(v204 + 8)) {
                goto LABEL_355;
              }
              break;
            }
          }
          int v205 = llvm::Value::stripPointerCasts(v17);
          int v206 = *((_DWORD *)i + 5);
          __int16 v207 = (v206 & 0x40000000) != 0
               ? (llvm::Value **)*((void *)i - 1)
               : (llvm::Value **)((char *)i - 32 * (v206 & 0x7FFFFFF));
          if (v205 == llvm::Value::stripPointerCasts(*v207) && (*(_DWORD *)(*(void *)v13 + 8) & 0xFE) != 0x12)
          {
            unsigned int v209 = sub_1CD4A7084(*(void *)(a1 + 24), *(void *)(a1 + 80), (llvm::GEPOperator *)v13, 0);
            __int16 v210 = (unsigned __int8 *)sub_1CD4A7084(*(void *)(a1 + 24), *(void *)(a1 + 80), i, 0);
            uint64_t v211 = *(llvm::Type **)v209;
            uint64_t v212 = *(llvm::Type **)v210;
            if (*(void *)v209 != *(void *)v210)
            {
              uint64_t v213 = VectorSplat;
              int v214 = v10;
              unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v209);
              unint64_t v216 = llvm::Type::getPrimitiveSizeInBits(v212);
              uint64_t v217 = a1;
              int v218 = *(uint64_t **)(a1 + 24);
              if (PrimitiveSizeInBits >= v216)
              {
                __int16 v280 = 257;
                if (*((unsigned __int8 *)v209 + 16) <= 0x14u)
                {
                  unsigned int v209 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, llvm::Type *))(*(void *)v218[9] + 224))(v218[9], 38, v209, v212);
                  if (v209) {
                    BOOL v253 = *((unsigned __int8 *)v209 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v253 = 0;
                  }
                  if (v253)
                  {
                    (*(void (**)(uint64_t, llvm::Value *, unsigned char *, uint64_t, uint64_t))(*(void *)v218[10]
                                                                                              + 16))(v218[10], v209, v279, v218[6], v218[7]);
                    uint64_t v264 = *((unsigned int *)v218 + 2);
                    if (v264)
                    {
                      uint64_t v265 = *v218;
                      uint64_t v266 = *v218 + 16 * v264;
                      do
                      {
                        llvm::Instruction::setMetadata(v209, *(_DWORD *)v265, *(llvm::MDNode **)(v265 + 8));
                        v265 += 16;
                      }
                      while (v265 != v266);
                    }
                  }
                }
                else
                {
                  __int16 v284 = 257;
                  unsigned int v209 = llvm::CastInst::Create(38, (uint64_t)v209, (uint64_t)v212, v283, 0);
                  (*(void (**)(uint64_t, llvm::Value *, unsigned char *, uint64_t, uint64_t))(*(void *)v218[10] + 16))(v218[10], v209, v279, v218[6], v218[7]);
                  uint64_t v246 = *((unsigned int *)v218 + 2);
                  if (v246)
                  {
                    uint64_t v247 = *v218;
                    uint64_t v248 = *v218 + 16 * v246;
                    do
                    {
                      llvm::Instruction::setMetadata(v209, *(_DWORD *)v247, *(llvm::MDNode **)(v247 + 8));
                      v247 += 16;
                    }
                    while (v247 != v248);
                  }
                }
              }
              else
              {
                __int16 v280 = 257;
                if (v210[16] <= 0x14u)
                {
                  __int16 v210 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Type *))(*(void *)v218[9] + 224))(v218[9], 38, v210, v211);
                  if (v210) {
                    BOOL v249 = v210[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v249 = 0;
                  }
                  if (v249)
                  {
                    (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v218[10]
                                                                                                  + 16))(v218[10], v210, v279, v218[6], v218[7]);
                    uint64_t v250 = *((unsigned int *)v218 + 2);
                    if (v250)
                    {
                      uint64_t v251 = *v218;
                      uint64_t v252 = *v218 + 16 * v250;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v210, *(_DWORD *)v251, *(llvm::MDNode **)(v251 + 8));
                        v251 += 16;
                      }
                      while (v251 != v252);
                    }
                  }
                }
                else
                {
                  __int16 v284 = 257;
                  __int16 v210 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v210, (uint64_t)v211, v283, 0);
                  (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v218[10]
                                                                                                + 16))(v218[10], v210, v279, v218[6], v218[7]);
                  uint64_t v219 = *((unsigned int *)v218 + 2);
                  if (v219)
                  {
                    uint64_t v220 = *v218;
                    uint64_t v221 = *v218 + 16 * v219;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v210, *(_DWORD *)v220, *(llvm::MDNode **)(v220 + 8));
                      v220 += 16;
                    }
                    while (v220 != v221);
                  }
                }
              }
              LODWORD(v10) = v214;
              a1 = v217;
              VectorSplat = v213;
            }
            uint64_t v254 = *(void *)(a1 + 24);
            int v255 = dword_1CFB27850[(int)v10 - 32];
            __int16 v284 = 257;
            uint64_t v256 = sub_1CB845F20(v254, v255, v209, (uint64_t)v210, (uint64_t)v283);
            return sub_1CC9D3C84(a1, VectorSplat, v256);
          }
        }
        goto LABEL_355;
      }
      uint64_t v79 = operator new(0x80uLL);
      uint64_t v7 = (llvm::Value *)(v79 + 16);
      v79[21] = v79[21] & 0x38000000 | 2;
      *(void *)uint64_t v79 = 0;
      *((void *)v79 + 1) = 0;
      *((void *)v79 + 2) = 0;
      *((void *)v79 + 3) = v79 + 16;
      *((void *)v79 + 4) = 0;
      *((void *)v79 + 5) = 0;
      *((void *)v79 + 6) = 0;
      *((void *)v79 + 7) = v79 + 16;
      int v80 = *(_DWORD *)(v13 + 20);
      if ((v80 & 0x40000000) != 0) {
        unsigned int v81 = *(llvm::Value ***)(v13 - 8);
      }
      else {
        unsigned int v81 = (llvm::Value **)(v13 - 32 * (v80 & 0x7FFFFFF));
      }
      int v50 = *v81;
      int v143 = *((_DWORD *)i + 5);
      if ((v143 & 0x40000000) != 0) {
        uint64_t v144 = (llvm::Value **)*((void *)i - 1);
      }
      else {
        uint64_t v144 = (llvm::Value **)((char *)i - 32 * (v143 & 0x7FFFFFF));
      }
      BOOL v51 = *v144;
      __int16 v284 = 257;
      int v145 = *(void ***)v50;
      uint64_t v55 = ***(void ***)v50 + 1888;
      if (*(void *)v50 && (v145[1] & 0xFE) == 0x12)
      {
        uint64_t v243 = (uint64_t **)(***(void ***)v50 + 1888);
        uint64_t v244 = (llvm::Type *)*((unsigned int *)v145 + 8);
        if (*((_DWORD *)v145 + 2) == 19) {
          llvm::ScalableVectorType::get(v243, v244);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v243, v244);
        }
        uint64_t v55 = v245;
      }
      unsigned int v56 = v7;
      __int16 v57 = v10;
LABEL_239:
      uint64_t v146 = (uint64_t)v50;
      uint64_t v147 = (uint64_t)v51;
      goto LABEL_337;
    }
    if ((*(_DWORD *)(*(void *)v13 + 8) & 0xFE) != 0x12)
    {
      unint64_t v27 = (llvm::Constant *)sub_1CC543B10(v13);
      if (v27)
      {
        int v35 = *(_DWORD *)(v13 + 20);
        if ((v35 & 0x40000000) != 0) {
          int v36 = *(llvm::Value ***)(v13 - 8);
        }
        else {
          int v36 = (llvm::Value **)(v13 - 32 * (v35 & 0x7FFFFFF));
        }
        this = *v36;
        switch((int)v10)
        {
          case 2:
            uint64_t v10 = 4;
            goto LABEL_5;
          case 3:
            uint64_t v10 = 5;
            goto LABEL_5;
          case 4:
            uint64_t v10 = 2;
            goto LABEL_5;
          case 5:
            uint64_t v10 = 3;
            goto LABEL_5;
          case 10:
            uint64_t v10 = 12;
            goto LABEL_5;
          case 11:
            uint64_t v10 = 13;
            goto LABEL_5;
          case 12:
            uint64_t v10 = 10;
            goto LABEL_5;
          case 13:
            uint64_t v10 = 11;
            goto LABEL_5;
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            __break(1u);
            goto LABEL_400;
          case 34:
            uint64_t v10 = 36;
            goto LABEL_5;
          case 35:
            uint64_t v10 = 37;
            goto LABEL_5;
          case 36:
            uint64_t v10 = 34;
            goto LABEL_5;
          case 37:
            uint64_t v10 = 35;
            goto LABEL_5;
          case 38:
          case 39:
          case 40:
          case 41:
            return 0;
          default:
            goto LABEL_5;
        }
      }
    }
    if ((*(_DWORD *)(*(void *)i + 8) & 0xFE) == 0x12 || !sub_1CC543B10((uint64_t)i))
    {
      uint64_t v278 = a1;
      unint64_t v273 = (llvm::ConstantInt **)VectorSplat;
      if ((*(unsigned char *)(v13 + 17) & 2) != 0) {
        int v37 = (*((unsigned __int8 *)i + 17) >> 1) & 1;
      }
      else {
        int v37 = 0;
      }
      int v44 = *(_DWORD *)(v13 + 20);
      uint64_t v45 = *((unsigned int *)i + 5);
      if (((v45 ^ v44) & 0x7FFFFFF) != 0) {
        goto LABEL_94;
      }
      uint64_t v46 = 24;
      if (*(unsigned char *)(v13 + 16) == 62) {
        uint64_t v47 = 64;
      }
      else {
        uint64_t v47 = 24;
      }
      uint64_t v48 = *(void *)(v13 + v47);
      if (*((unsigned char *)i + 16) == 62) {
        uint64_t v46 = 64;
      }
      if (v48 == *(void *)((char *)i + v46))
      {
        uint64_t v271 = v45 & 0x7FFFFFF;
        if ((v45 & 0x7FFFFFF) == 1) {
          goto LABEL_126;
        }
        unsigned int v82 = 0;
        int v83 = 0;
        uint64_t v84 = v13 - 32 * (v44 & 0x7FFFFFF);
        int v85 = 1;
        uint64_t v86 = 32;
        BOOL v87 = (char *)i - 32 * v271;
        int v270 = v37;
        int v269 = *(_DWORD *)(v13 + 20);
        uint64_t v268 = v84;
        do
        {
          uint64_t v88 = v84;
          if ((v44 & 0x40000000) != 0) {
            uint64_t v88 = *(void *)(v13 - 8);
          }
          unsigned int v89 = v87;
          if ((v45 & 0x40000000) != 0) {
            unsigned int v89 = (char *)*((void *)i - 1);
          }
          if (*(void *)(v88 + v86) != *(void *)&v89[v86])
          {
            uint64_t v90 = v84;
            if ((v44 & 0x40000000) != 0) {
              uint64_t v90 = *(void *)(v13 - 8);
            }
            int v275 = v83;
            uint64_t v91 = v10;
            BOOL v92 = v87;
            uint64_t v93 = v45;
            if ((v45 & 0x40000000) != 0) {
              BOOL v92 = (char *)*((void *)i - 1);
            }
            unint64_t v94 = **(llvm::Type ***)(v90 + v86);
            int v95 = **(llvm::Type ***)&v92[v86];
            unint64_t v96 = llvm::Type::getPrimitiveSizeInBits(v94);
            int v98 = v97;
            BOOL v100 = v96 == llvm::Type::getPrimitiveSizeInBits(v95) && v98 == v99;
            uint64_t v10 = v91;
            int v37 = v270;
            int v44 = v269;
            if (!v100) {
              goto LABEL_94;
            }
            uint64_t v45 = v93;
            if ((*(_DWORD *)(*(void *)v13 + 8) & 0xFE) == 0x12)
            {
              if ((*((_DWORD *)v94 + 2) & 0xFE) != 0x12) {
                goto LABEL_94;
              }
              if ((*((_DWORD *)v95 + 2) & 0xFE) != 0x12 || v275 != 0) {
                goto LABEL_94;
              }
            }
            else if (v275)
            {
              goto LABEL_94;
            }
            int v83 = 1;
            unsigned int v82 = v85;
            uint64_t v84 = v268;
            BOOL v87 = (char *)i - 32 * v271;
          }
          ++v85;
          v86 += 32;
        }
        while (v271 != v85);
        if (v83 != 1)
        {
LABEL_126:
          unint64_t v74 = v10 <= 0x29 && ((1 << v10) & 0x2A90000AA00) != 0;
          uint64_t v75 = (llvm::Value *)llvm::ConstantInt::get(*v273, v74, 0);
          return sub_1CC9D3C84(v278, (llvm::ValueAsMetadata *)v273, v75);
        }
        a1 = v278;
        if (v37)
        {
          if ((v44 & 0x40000000) != 0) {
            uint64_t v84 = *(void *)(v13 - 8);
          }
          int v50 = *(llvm::Value **)(v84 + 32 * v82);
          if ((v45 & 0x40000000) != 0) {
            BOOL v87 = (char *)*((void *)i - 1);
          }
          BOOL v51 = *(llvm::Value **)&v87[32 * v82];
          goto LABEL_100;
        }
      }
      else
      {
LABEL_94:
        a1 = v278;
        if (v37)
        {
          if ((*(unsigned char *)(v13 + 16) == 5 || (uint64_t v66 = *(void *)(v13 + 8)) != 0 && !*(void *)(v66 + 8))
            && (*((unsigned char *)i + 16) == 5 || (uint64_t v49 = *((void *)i + 1)) != 0 && !*(void *)(v49 + 8)))
          {
            int v50 = sub_1CD4A7084(*(void *)(v278 + 24), *(void *)(v278 + 80), (llvm::GEPOperator *)v13, 0);
            BOOL v51 = sub_1CD4A7084(*(void *)(v278 + 24), *(void *)(v278 + 80), i, 0);
LABEL_100:
            int v52 = operator new(0x80uLL);
            uint64_t v7 = (llvm::Value *)(v52 + 16);
            v52[21] = v52[21] & 0x38000000 | 2;
            *(void *)int v52 = 0;
            *((void *)v52 + 1) = 0;
            *((void *)v52 + 2) = 0;
            *((void *)v52 + 3) = v52 + 16;
            *((void *)v52 + 4) = 0;
            *((void *)v52 + 5) = 0;
            *((void *)v52 + 6) = 0;
            *((void *)v52 + 7) = v52 + 16;
            int v53 = dword_1CFB27850[(int)v10 - 32];
            __int16 v284 = 257;
            uint64_t v54 = *(void *)v50;
            uint64_t v55 = ***(void ***)v50 + 1888;
            if (*(void *)v50 && (*(_DWORD *)(v54 + 8) & 0xFE) == 0x12)
            {
              uint64_t v257 = (uint64_t **)(***(void ***)v50 + 1888);
              int v258 = (llvm::Type *)*(unsigned int *)(v54 + 32);
              if (*(_DWORD *)(v54 + 8) == 19) {
                llvm::ScalableVectorType::get(v257, v258);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v257, v258);
              }
              uint64_t v55 = v259;
            }
            unsigned int v56 = v7;
            __int16 v57 = v53;
            goto LABEL_239;
          }
        }
      }
LABEL_355:
      uint64_t v233 = *(void *)(a1 + 80);
      return (llvm::UndefValue **)sub_1CCA4BAD4((llvm::IntegerType ***)v13, i, v10, v233);
    }
    int v28 = *((_DWORD *)i + 5);
    if ((v28 & 0x40000000) != 0) {
      int v29 = (llvm::Value **)*((void *)i - 1);
    }
    else {
      int v29 = (llvm::Value **)((char *)i - 32 * (v28 & 0x7FFFFFF));
    }
  }
  if ((*(unsigned char *)(v13 + 17) & 2) == 0) {
    goto LABEL_31;
  }
  if ((*(_DWORD *)(*(void *)v13 + 8) & 0xFE) == 0x12)
  {
    int v18 = 1;
    goto LABEL_15;
  }
  uint64_t v76 = 24;
  if (*(unsigned char *)(v13 + 16) == 62) {
    uint64_t v76 = 64;
  }
  uint64_t v77 = *(void *)(v13 + v76);
  int v267 = v10;
  if ((v15 & 0x40000000) != 0)
  {
    uint64_t v78 = *(void *)(v13 - 8);
    int v14 = v15 & 0x7FFFFFF;
  }
  else
  {
    int v14 = v15 & 0x7FFFFFF;
    uint64_t v78 = v13 - 32 * (v15 & 0x7FFFFFF);
  }
  *(void *)uint64_t v277 = a1;
  uint64_t i = *(llvm::Value **)(a1 + 80);
  uint64_t v281 = (llvm::Constant **)(v78 + 32);
  uint64_t v282 = v77 | 4;
  if (v14 == 1) {
    goto LABEL_330;
  }
  uint64_t v17 = 0;
  uint64_t v6 = 1;
  while (2)
  {
    int v109 = *(_DWORD *)(v13 + 20);
    if ((v109 & 0x40000000) != 0) {
      uint64_t v110 = *(void *)(v13 - 8);
    }
    else {
      uint64_t v110 = v13 - 32 * (v109 & 0x7FFFFFF);
    }
    VectorSplat = *(llvm::Instruction **)(v110 + 32 * v6);
    if (VectorSplat) {
      BOOL v111 = *((unsigned char *)VectorSplat + 16) == 16;
    }
    else {
      BOOL v111 = 0;
    }
    if (v111)
    {
      unsigned int v112 = (uint64_t *)((char *)VectorSplat + 24);
      uint64_t v113 = *((unsigned int *)VectorSplat + 8);
      if (v113 > 0x40)
      {
        int v114 = 0;
        int64_t v115 = (unint64_t)(v113 + 63) >> 6;
        do
        {
          BOOL v32 = v115-- < 1;
          if (v32) {
            break;
          }
          unint64_t v116 = *(void *)(*v112 + 8 * v115);
          v114 += __clz(v116);
        }
        while (!v116);
        int v117 = v113 | 0xFFFFFFC0;
        if ((v113 & 0x3F) == 0) {
          int v117 = 0;
        }
        if (v114 + v117 == v113)
        {
LABEL_215:
          ++v6;
          sub_1CB8460E4((uint64_t)&v281);
          if (v14 == v6) {
            goto LABEL_330;
          }
          continue;
        }
      }
      else if (!*v112)
      {
        goto LABEL_215;
      }
      unint64_t v118 = (llvm::Type *)(v282 & 0xFFFFFFFFFFFFFFF8);
      if ((v282 & 4) != 0 || !v118)
      {
        if ((v282 & 4) == 0 || !v118)
        {
          AggregateElement = *v281;
          if (*v281) {
            BOOL v122 = *((unsigned char *)*v281 + 16) == 16;
          }
          else {
            BOOL v122 = 0;
          }
          if (!v122) {
            AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
          }
          uint64_t v125 = (unsigned int *)*((void *)AggregateElement + 3);
          BOOL v123 = (unsigned int *)((char *)AggregateElement + 24);
          uint64_t v124 = v125;
          if (v123[2] < 0x41) {
            uint64_t v124 = v123;
          }
          unint64_t v118 = *(llvm::Type **)(*((void *)v118 + 2) + 8 * *v124);
        }
        uint64_t v126 = sub_1CB83544C((uint64_t)i, (uint64_t)v118);
        BOOL v128 = v127 == 1;
        char Alignment = llvm::DataLayout::getAlignment(i, v118, 1);
        if (v128) {
        unsigned int v131 = *((_DWORD *)VectorSplat + 8);
        }
        if (v131 > 0x40) {
          uint64_t v132 = *(void *)*v112;
        }
        else {
          uint64_t v132 = *v112 << -(char)v131 >> -(char)v131;
        }
        unint64_t v120 = v132 * (((1 << Alignment) + ((unint64_t)(v126 + 7) >> 3) - 1) & -(1 << Alignment));
      }
      else
      {
        StructLayout = llvm::DataLayout::getStructLayout(i, (llvm::StructType *)(v282 & 0xFFFFFFFFFFFFFFF8));
        if (*((_DWORD *)VectorSplat + 8) >= 0x41u) {
          unsigned int v112 = (uint64_t *)*v112;
        }
        unint64_t v120 = *((void *)StructLayout + *(unsigned int *)v112 + 2);
      }
      uint64_t v17 = (llvm::Value *)((char *)v17 + v120);
      goto LABEL_215;
    }
    break;
  }
  int v5 = (llvm::Type *)(v282 & 0xFFFFFFFFFFFFFFF8);
  if ((v282 & 4) == 0 || !v5)
  {
    unint64_t v27 = *v281;
    if (*v281) {
      BOOL v133 = *((unsigned char *)*v281 + 16) == 16;
    }
    else {
      BOOL v133 = 0;
    }
    if (!v133) {
LABEL_400:
    }
      unint64_t v27 = (llvm::Constant *)llvm::Constant::getAggregateElement(v27, 0);
    uint64_t v136 = (unsigned int *)*((void *)v27 + 3);
    uint8x8_t v134 = (unsigned int *)((char *)v27 + 24);
    uint64_t v135 = v136;
    if (v134[2] < 0x41) {
      uint64_t v135 = v134;
    }
    int v5 = *(llvm::Type **)(*((void *)v5 + 2) + 8 * *v135);
  }
  uint64_t v274 = sub_1CB83544C((uint64_t)i, (uint64_t)v5);
  BOOL v138 = v137 == 1;
  char v272 = llvm::DataLayout::getAlignment(i, v5, 1);
  if (v138) {
  sub_1CB8460E4((uint64_t)&v281);
  }
  unsigned int v140 = v6 + 1;
  if (v6 + 1 != v14)
  {
    int v276 = v14;
    while (1)
    {
      int v148 = *(_DWORD *)(v13 + 20);
      if ((v148 & 0x40000000) != 0) {
        uint64_t v149 = *(void *)(v13 - 8);
      }
      else {
        uint64_t v149 = v13 - 32 * (v148 & 0x7FFFFFF);
      }
      uint64_t v150 = *(void *)(v149 + 32 * v140);
      if (v150) {
        BOOL v151 = *(unsigned char *)(v150 + 16) == 16;
      }
      else {
        BOOL v151 = 0;
      }
      if (!v151) {
        goto LABEL_330;
      }
      unint64_t v152 = (uint64_t *)(v150 + 24);
      uint64_t v153 = *(unsigned int *)(v150 + 32);
      if (v153 > 0x40) {
        break;
      }
      if (*v152) {
        goto LABEL_258;
      }
LABEL_280:
      sub_1CB8460E4((uint64_t)&v281);
      if (++v140 == v14) {
        goto LABEL_230;
      }
    }
    int v154 = 0;
    int64_t v155 = (unint64_t)(v153 + 63) >> 6;
    do
    {
      BOOL v32 = v155-- < 1;
      if (v32) {
        break;
      }
      unint64_t v156 = *(void *)(*v152 + 8 * v155);
      v154 += __clz(v156);
    }
    while (!v156);
    int v157 = v153 | 0xFFFFFFC0;
    if ((v153 & 0x3F) == 0) {
      int v157 = 0;
    }
    if (v154 + v157 == v153) {
      goto LABEL_280;
    }
LABEL_258:
    uint64_t v158 = (llvm::Type *)(v282 & 0xFFFFFFFFFFFFFFF8);
    if ((v282 & 4) != 0 || !v158)
    {
      if ((v282 & 4) == 0 || !v158)
      {
        uint64_t v161 = *v281;
        if (*v281) {
          BOOL v162 = *((unsigned char *)*v281 + 16) == 16;
        }
        else {
          BOOL v162 = 0;
        }
        if (!v162) {
          uint64_t v161 = (llvm::Constant *)llvm::Constant::getAggregateElement(v161, 0);
        }
        uint64_t v165 = (unsigned int *)*((void *)v161 + 3);
        uint64_t v163 = (unsigned int *)((char *)v161 + 24);
        uint64_t v164 = v165;
        if (v163[2] < 0x41) {
          uint64_t v164 = v163;
        }
        uint64_t v158 = *(llvm::Type **)(*((void *)v158 + 2) + 8 * *v164);
      }
      uint64_t v166 = v17;
      uint64_t v167 = sub_1CB83544C((uint64_t)i, (uint64_t)v158);
      uint64_t v168 = i;
      BOOL v170 = v169 == 1;
      uint64_t v171 = v168;
      char v173 = llvm::DataLayout::getAlignment(v168, v158, 1);
      if (v170) {
      unsigned int v174 = *(_DWORD *)(v150 + 32);
      }
      if (v174 > 0x40) {
        uint64_t v175 = *(void *)*v152;
      }
      else {
        uint64_t v175 = *v152 << -(char)v174 >> -(char)v174;
      }
      uint64_t i = v171;
      unint64_t v160 = v175 * (((1 << v173) + ((unint64_t)(v167 + 7) >> 3) - 1) & -(1 << v173));
      uint64_t v17 = v166;
      int v14 = v276;
    }
    else
    {
      uint64_t v159 = llvm::DataLayout::getStructLayout(i, (llvm::StructType *)(v282 & 0xFFFFFFFFFFFFFFF8));
      if (*(_DWORD *)(v150 + 32) >= 0x41u) {
        unint64_t v152 = (uint64_t *)*v152;
      }
      unint64_t v160 = *((void *)v159 + *(unsigned int *)v152 + 2);
    }
    uint64_t v17 = (llvm::Value *)((char *)v17 + v160);
    goto LABEL_280;
  }
LABEL_230:
  int v141 = *(_DWORD *)(v13 + 20);
  if ((v141 & 0x40000000) != 0) {
    uint64_t v142 = *(uint64_t ***)(v13 - 8);
  }
  else {
    uint64_t v142 = (uint64_t **)(v13 - 32 * (v141 & 0x7FFFFFF));
  }
  uint64_t v176 = **v142;
  unsigned int v177 = *(_DWORD *)(v176 + 8);
  if ((v177 & 0xFE) == 0x12) {
    unsigned int v177 = *(_DWORD *)(**(void **)(v176 + 16) + 8);
  }
  if (v177 < 0x100) {
    goto LABEL_294;
  }
  unsigned int v178 = v177 >> 8;
  uint64_t v179 = *((unsigned int *)i + 60);
  uint64_t v180 = *((void *)i + 29);
  if (v179)
  {
    uint64_t v180 = *((void *)i + 29);
    unint64_t v181 = *((unsigned int *)i + 60);
    do
    {
      unint64_t v182 = v181 >> 1;
      uint64_t v183 = v180 + 16 * (v181 >> 1);
      unsigned int v184 = *(_DWORD *)(v183 + 8);
      uint64_t v185 = v183 + 16;
      v181 += ~(v181 >> 1);
      if (v184 < v178) {
        uint64_t v180 = v185;
      }
      else {
        unint64_t v181 = v182;
      }
    }
    while (v181);
  }
  if (v180 == *((void *)i + 29) + 16 * v179 || *(_DWORD *)(v180 + 8) != v178) {
LABEL_294:
  }
    uint64_t v180 = *((void *)i + 29);
  uint64_t v186 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v176, (llvm::LLVMContext *)*(unsigned int *)(v180 + 4));
  uint64_t v188 = (uint64_t)v186;
  if ((*(_DWORD *)(v176 + 8) & 0xFE) == 0x12)
  {
    uint64_t v260 = (llvm::Type *)*(unsigned int *)(v176 + 32);
    if (*(_DWORD *)(v176 + 8) == 19) {
      llvm::ScalableVectorType::get(v186, v260);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v186, v260);
    }
    uint64_t v188 = v261;
  }
  unint64_t v189 = (unint64_t)*(unsigned int *)(v188 + 8) >> 8;
  if (v17)
  {
    uint64_t v190 = (uint64_t)((void)v17 << -(char)v189) >> -(char)v189;
    uint64_t v191 = (uint64_t)((((1 << v272) + ((unint64_t)(v274 + 7) >> 3) - 1) & -(1 << v272)) << -(char)v189) >> -(char)v189;
    unint64_t v192 = v190 / v191;
    if (v190 == v190 / v191 * v191)
    {
      uint64_t v193 = *(void *)v277;
      if (*(void *)VectorSplat != v188)
      {
        uint64_t v194 = *(void *)(*(void *)v277 + 24);
        __int16 v284 = 257;
        VectorSplat = sub_1CBF56614(v194, VectorSplat, (llvm::Type ***)v188, (llvm::Type *)1, (uint64_t)v283, v187);
      }
      uint64_t v222 = llvm::ConstantInt::get((llvm::ConstantInt *)v188, v192, 0);
      uint64_t v223 = *(void *)(*(void *)v277 + 24);
      v283[0] = "offset";
      __int16 v284 = 259;
      VectorSplat = sub_1CB844A3C(v223, VectorSplat, (uint64_t)v222, (uint64_t)v283, 0, 0);
      int v197 = v267;
      goto LABEL_328;
    }
LABEL_330:
    int v197 = v267;
    uint64_t v193 = *(void *)v277;
LABEL_331:
    VectorSplat = sub_1CD4A7084(*(void *)(v193 + 24), *(void *)(v193 + 80), (llvm::GEPOperator *)v13, 0);
  }
  else
  {
    uint64_t v195 = *(llvm::Constant **)VectorSplat;
    if (llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)VectorSplat) <= v189)
    {
      int v197 = v267;
    }
    else
    {
      uint64_t v193 = *(void *)v277;
      uint64_t v196 = *(uint64_t **)(*(void *)v277 + 24);
      __int16 v280 = 257;
      BOOL v62 = v195 == (llvm::Constant *)v188;
      int v197 = v267;
      if (!v62)
      {
        if (*((unsigned __int8 *)VectorSplat + 16) <= 0x14u)
        {
          VectorSplat = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v196[9] + 224))(v196[9], 38, VectorSplat, v188);
          if (VectorSplat) {
            BOOL v234 = *((unsigned __int8 *)VectorSplat + 16) >= 0x1Cu;
          }
          else {
            BOOL v234 = 0;
          }
          if (v234)
          {
            (*(void (**)(uint64_t, llvm::Instruction *, unsigned char *, uint64_t, uint64_t))(*(void *)v196[10] + 16))(v196[10], VectorSplat, v279, v196[6], v196[7]);
            uint64_t v235 = *((unsigned int *)v196 + 2);
            if (v235)
            {
              uint64_t v262 = *v196;
              uint64_t v263 = v262 + 16 * v235;
              do
              {
                llvm::Instruction::setMetadata(VectorSplat, *(_DWORD *)v262, *(llvm::MDNode **)(v262 + 8));
                v262 += 16;
              }
              while (v262 != v263);
            }
            uint64_t v193 = *(void *)v277;
          }
        }
        else
        {
          __int16 v284 = 257;
          VectorSplat = llvm::CastInst::Create(38, (uint64_t)VectorSplat, v188, v283, 0);
          (*(void (**)(uint64_t, llvm::Instruction *, unsigned char *, uint64_t, uint64_t))(*(void *)v196[10] + 16))(v196[10], VectorSplat, v279, v196[6], v196[7]);
          uint64_t v198 = *((unsigned int *)v196 + 2);
          if (v198)
          {
            uint64_t v199 = *v196;
            uint64_t v200 = v199 + 16 * v198;
            do
            {
              llvm::Instruction::setMetadata(VectorSplat, *(_DWORD *)v199, *(llvm::MDNode **)(v199 + 8));
              v199 += 16;
            }
            while (v199 != v200);
          }
        }
      }
LABEL_328:
      if (!VectorSplat) {
        goto LABEL_331;
      }
    }
  }
  uint64_t v224 = operator new(0x80uLL);
  uint64_t v7 = (llvm::Value *)(v224 + 16);
  v224[21] = v224[21] & 0x38000000 | 2;
  *(void *)uint64_t v224 = 0;
  *((void *)v224 + 1) = 0;
  *((void *)v224 + 2) = 0;
  *((void *)v224 + 3) = v224 + 16;
  *((void *)v224 + 4) = 0;
  *((void *)v224 + 5) = 0;
  *((void *)v224 + 6) = 0;
  *((void *)v224 + 7) = v224 + 16;
  int v225 = dword_1CFB27850[v197 - 32];
  PointerBitCastOrAddrSpaceCast = llvm::Constant::getNullValue(*(llvm::Constant **)VectorSplat, v226, v227);
  __int16 v284 = 257;
  unsigned int v228 = *(llvm::Constant **)VectorSplat;
  uint64_t v55 = ***(void ***)VectorSplat + 1888;
  if (*(void *)VectorSplat && (*((_DWORD *)v228 + 2) & 0xFE) == 0x12)
  {
    uint64_t v240 = (uint64_t **)(***(void ***)VectorSplat + 1888);
    v241 = (llvm::Type *)*((unsigned int *)v228 + 8);
    if (*((_DWORD *)v228 + 2) == 19) {
      llvm::ScalableVectorType::get(v240, v241);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v240, v241);
    }
    uint64_t v55 = v242;
  }
  unsigned int v56 = v7;
  __int16 v57 = v225;
LABEL_336:
  uint64_t v146 = (uint64_t)VectorSplat;
  uint64_t v147 = (uint64_t)PointerBitCastOrAddrSpaceCast;
LABEL_337:
  llvm::CmpInst::CmpInst(v56, v55, 53, v57, v146, v147, v283, 0, 0);
  return (llvm::UndefValue **)v7;
}

llvm::Value *sub_1CCA4BAD4(llvm::IntegerType ***a1, unsigned char *a2, int a3, uint64_t a4)
{
  v361[2] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)*a1 + 2);
  if ((v4 & 0xFE) == 0x12) {
    return 0;
  }
  uint64_t v6 = (uint64_t)a1;
  int v7 = *((_DWORD *)a1 + 5);
  if ((v7 & 0x40000000) != 0)
  {
    uint64_t v9 = (llvm::IntegerType ***)*(a1 - 1);
    uint64_t v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v8 = v7 & 0x7FFFFFF;
    uint64_t v9 = &a1[-4 * v8];
  }
  uint64_t v10 = (uint64_t *)(v9 + 4);
  for (uint64_t i = 32 * v8 - 32; i; i -= 32)
  {
    uint64_t v12 = *v10;
    v10 += 4;
    if (*(unsigned char *)(v12 + 16) != 16) {
      return 0;
    }
  }
  uint64_t v14 = 3;
  if (*((unsigned char *)a1 + 16) == 62) {
    uint64_t v14 = 8;
  }
  uint64_t v328 = (llvm::PointerType *)a1[v14];
  if (v4 < 0x100) {
    goto LABEL_20;
  }
  unsigned int v15 = v4 >> 8;
  uint64_t v16 = *(unsigned int *)(a4 + 240);
  uint64_t v17 = *(void *)(a4 + 232);
  if (v16)
  {
    uint64_t v17 = *(void *)(a4 + 232);
    unint64_t v18 = *(unsigned int *)(a4 + 240);
    do
    {
      unint64_t v19 = v18 >> 1;
      uint64_t v20 = v17 + 16 * (v18 >> 1);
      unsigned int v21 = *(_DWORD *)(v20 + 8);
      uint64_t v22 = v20 + 16;
      v18 += ~(v18 >> 1);
      if (v21 < v15) {
        uint64_t v17 = v22;
      }
      else {
        unint64_t v18 = v19;
      }
    }
    while (v18);
  }
  if (v17 == *(void *)(a4 + 232) + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_20:
  }
    uint64_t v17 = *(void *)(a4 + 232);
  uint64_t v23 = (llvm::Constant *)llvm::IntegerType::get(**a1, (llvm::LLVMContext *)*(unsigned int *)(v17 + 12));
  for (uint64_t j = llvm::Constant::getNullValue(v23, v24, v25); ; uint64_t j = llvm::ConstantExpr::getAdd(j, SExtOrBitCast, 0, 0))
  {
    while (1)
    {
      unsigned int v28 = *(unsigned __int8 *)(v6 + 16);
      if (v28 <= 0x4B) {
        break;
      }
      if (v28 != 76 || !llvm::CastInst::isNoopCast((llvm::CastInst *)v6, (const llvm::DataLayout *)a4)) {
        goto LABEL_53;
      }
LABEL_28:
      uint64_t v6 = *(void *)(v6 - 32);
    }
    switch(v28)
    {
      case 0x4Bu:
        if (!llvm::CastInst::isNoopCast((llvm::CastInst *)v6, (const llvm::DataLayout *)a4)) {
          goto LABEL_53;
        }
        goto LABEL_28;
      case 5u:
        if (*(_WORD *)(v6 + 18) != 34) {
          goto LABEL_53;
        }
        break;
      case 0x3Eu:
        break;
      default:
        goto LABEL_53;
    }
    if ((*(unsigned char *)(v6 + 17) & 2) == 0) {
      break;
    }
    int v29 = *(_DWORD *)(v6 + 20);
    if ((v29 & 0x40000000) != 0)
    {
      uint64_t v31 = *(void *)(v6 - 8);
      uint64_t v30 = v29 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v30 = v29 & 0x7FFFFFF;
      uint64_t v31 = v6 - 32 * v30;
    }
    BOOL v32 = (uint64_t *)(v31 + 32);
    uint64_t v33 = 32 * v30 - 32;
    while (v33)
    {
      uint64_t v34 = *v32;
      v32 += 4;
      v33 -= 32;
      if (*(unsigned char *)(v34 + 16) != 16) {
        goto LABEL_53;
      }
    }
    if (v30 != 2) {
      break;
    }
    BOOL v35 = v28 != 62 || v6 == 0;
    uint64_t v36 = v35 ? 24 : 64;
    if (*(llvm::PointerType **)(v6 + v36) != v328) {
      break;
    }
    if ((v29 & 0x40000000) != 0) {
      uint64_t v37 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v37 = v6 - 32 * (v29 & 0x7FFFFFF);
    }
    uint64_t v6 = *(void *)v37;
    SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast(*(llvm::Type ***)(v37 + 32), (llvm::Type ***)v23, v26);
  }
LABEL_53:
  BOOL v321 = j;
  v329[0] = 0;
  v329[1] = 0;
  int v330 = 0;
  int v332 = 0;
  uint64_t v333 = 0;
  uint64_t v331 = 0;
  uint64_t v342 = v6;
  uint64_t v345 = v347;
  v347[0] = a2;
  uint64_t v346 = 0x1000000001;
  sub_1CBF5F714(v329, &v342);
  while (1)
  {
    unsigned int v39 = v346;
    if (!v346) {
      break;
    }
    uint64_t v334 = 0;
    unsigned int v335 = 0;
    LODWORD(v336) = 0;
    v338 = 0;
    uint64_t v339 = 0;
    __p = 0;
    do
    {
      while (1)
      {
        if ((unint64_t)((char *)v332 - (unsigned char *)v331) > 0x318)
        {
LABEL_140:
          int v74 = 1;
          goto LABEL_141;
        }
        v341 = 0;
        uint64_t v40 = *((void *)v345 + v39 - 1);
        v341 = (llvm::ValueAsMetadata *)v40;
        if (!v330) {
          break;
        }
        unsigned int v41 = ((v40 >> 4) ^ (v40 >> 9)) & (v330 - 1);
        uint64_t v42 = *(void *)(v329[0] + 8 * v41);
        if (v40 != v42)
        {
          int v68 = 1;
          while (v42 != -4096)
          {
            unsigned int v69 = v41 + v68++;
            unsigned int v41 = v69 & (v330 - 1);
            uint64_t v42 = *(void *)(v329[0] + 8 * v41);
            if (v40 == v42) {
              goto LABEL_59;
            }
          }
          break;
        }
LABEL_59:
        if (v41 == v330) {
          break;
        }
        LODWORD(v346) = --v39;
        if (!v39) {
          goto LABEL_144;
        }
      }
      int v43 = *(unsigned __int8 *)(v40 + 16);
      if ((v43 - 62) > 0x15 || ((1 << (v43 - 62)) & 0x206001) == 0) {
        goto LABEL_140;
      }
      if ((v43 - 75) <= 1)
      {
        if (!llvm::CastInst::isNoopCast((llvm::CastInst *)v40, (const llvm::DataLayout *)a4)) {
          goto LABEL_140;
        }
        uint64_t v45 = *(void *)(v40 - 32);
        if (v330)
        {
          unsigned int v46 = ((v45 >> 4) ^ (v45 >> 9)) & (v330 - 1);
          uint64_t v47 = *(void *)(v329[0] + 8 * v46);
          if (v45 == v47)
          {
LABEL_68:
            if (v46 == v330) {
              goto LABEL_69;
            }
LABEL_71:
            uint64_t v40 = (uint64_t)v341;
            int v43 = *((unsigned __int8 *)v341 + 16);
            goto LABEL_72;
          }
          int v70 = 1;
          while (v47 != -4096)
          {
            unsigned int v71 = v46 + v70++;
            unsigned int v46 = v71 & (v330 - 1);
            uint64_t v47 = *(void *)(v329[0] + 8 * v46);
            if (v45 == v47) {
              goto LABEL_68;
            }
          }
        }
LABEL_69:
        if (v346 >= (unint64_t)HIDWORD(v346)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v345 + v346) = v45;
        LODWORD(v346) = v346 + 1;
        goto LABEL_71;
      }
LABEL_72:
      if (v43 == 62 || v43 == 5 && *(_WORD *)(v40 + 18) == 34)
      {
        int v48 = *(_DWORD *)(v40 + 20);
        if ((v48 & 0x7FFFFFF) != 2 || (*(unsigned char *)(v40 + 17) & 2) == 0) {
          goto LABEL_140;
        }
        BOOL v35 = v43 == 62;
        uint64_t v49 = 64;
        if (!v35) {
          uint64_t v49 = 24;
        }
        if (*(llvm::PointerType **)(v40 + v49) != v328) {
          goto LABEL_140;
        }
        if ((v48 & 0x40000000) != 0) {
          int v50 = *(uint64_t **)(v40 - 8);
        }
        else {
          int v50 = (uint64_t *)(v40 - 64);
        }
        if (v330)
        {
          uint64_t v51 = *v50;
          unsigned int v52 = ((v51 >> 4) ^ (v51 >> 9)) & (v330 - 1);
          uint64_t v53 = *(void *)(v329[0] + 8 * v52);
          if (v51 == v53)
          {
LABEL_87:
            if (v52 != v330) {
              goto LABEL_93;
            }
          }
          else
          {
            int v72 = 1;
            while (v53 != -4096)
            {
              unsigned int v73 = v52 + v72++;
              unsigned int v52 = v73 & (v330 - 1);
              uint64_t v53 = *(void *)(v329[0] + 8 * v52);
              if (v51 == v53) {
                goto LABEL_87;
              }
            }
          }
        }
        if ((v48 & 0x40000000) != 0) {
          uint64_t v54 = *(void **)(v40 - 8);
        }
        else {
          uint64_t v54 = (void *)(v40 - 64);
        }
        if (v346 >= (unint64_t)HIDWORD(v346)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v345 + v346) = *v54;
        LODWORD(v346) = v346 + 1;
        uint64_t v40 = (uint64_t)v341;
      }
LABEL_93:
      if (*((void *)v345 + v346 - 1) == v40)
      {
        LODWORD(v346) = v346 - 1;
        sub_1CBF5F714(v329, &v341);
        uint64_t v40 = (uint64_t)v341;
      }
      if (*(unsigned char *)(v40 + 16) == 83) {
        uint64_t v55 = (llvm::ValueAsMetadata *)v40;
      }
      else {
        uint64_t v55 = 0;
      }
      v340 = v55;
      if (v55)
      {
        uint64_t v56 = *(void *)(*((void *)v55 + 5) + 40);
        if (v56) {
          uint64_t v57 = v56 - 24;
        }
        else {
          uint64_t v57 = 0;
        }
        if (*(unsigned __int8 *)(v57 + 16) - 29 >= 0xB) {
          uint64_t v57 = 0;
        }
        if (*(unsigned char *)(v57 + 16) == 38) {
          goto LABEL_140;
        }
        v343[0] = (uint64_t)v55;
        sub_1CBF5F714(v329, v343);
        sub_1CCA7826C((uint64_t)&v334, &v340, (uint64_t)v343);
        if ((_BYTE)v344)
        {
          int v58 = (char *)v338;
          if (v338 >= v339)
          {
            BOOL v60 = (char *)__p;
            uint64_t v61 = ((char *)v338 - (unsigned char *)__p) >> 3;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61) {
              abort();
            }
            uint64_t v63 = (char *)v339 - (unsigned char *)__p;
            if (((char *)v339 - (unsigned char *)__p) >> 2 > v62) {
              unint64_t v62 = v63 >> 2;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              if (v64 >> 61) {
                sub_1CB833614();
              }
              uint64_t v65 = (char *)operator new(8 * v64);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v66 = (llvm::ValueAsMetadata **)&v65[8 * v61];
            llvm::Instruction *v66 = v340;
            uint64_t v59 = v66 + 1;
            if (v58 != v60)
            {
              do
              {
                int v67 = (llvm::ValueAsMetadata *)*((void *)v58 - 1);
                v58 -= 8;
                *--uint64_t v66 = v67;
              }
              while (v58 != v60);
              int v58 = (char *)__p;
            }
            __p = v66;
            v338 = v59;
            uint64_t v339 = (llvm::ValueAsMetadata **)&v65[8 * v64];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            unsigned __int8 *v338 = v340;
            uint64_t v59 = (llvm::ValueAsMetadata **)(v58 + 8);
          }
          v338 = v59;
        }
      }
      unsigned int v39 = v346;
    }
    while (v346);
LABEL_144:
    uint64_t v75 = (llvm::ValueAsMetadata **)__p;
    uint64_t v76 = v338;
    if (__p != v338)
    {
      unsigned int v77 = 0;
      do
      {
        uint64_t v78 = *v75;
        int v79 = *((_DWORD *)*v75 + 5);
        if ((v79 & 0x40000000) != 0)
        {
          unsigned int v81 = (uint64_t *)*((void *)v78 - 1);
          uint64_t v80 = v79 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v80 = v79 & 0x7FFFFFF;
          unsigned int v81 = (uint64_t *)((char *)v78 - 32 * v80);
        }
        unsigned int v82 = &v81[4 * v80];
        if (v80)
        {
          while (1)
          {
            uint64_t v83 = *v81;
            if (!v330) {
              goto LABEL_153;
            }
            unsigned int v84 = ((v83 >> 4) ^ (v83 >> 9)) & (v330 - 1);
            uint64_t v85 = *(void *)(v329[0] + 8 * v84);
            if (v83 != v85) {
              break;
            }
LABEL_152:
            if (v84 == v330) {
              goto LABEL_153;
            }
LABEL_155:
            v81 += 4;
            if (v81 == v82) {
              goto LABEL_162;
            }
          }
          int v86 = 1;
          while (v85 != -4096)
          {
            unsigned int v87 = v84 + v86++;
            unsigned int v84 = v87 & (v330 - 1);
            uint64_t v85 = *(void *)(v329[0] + 8 * v84);
            if (v83 == v85) {
              goto LABEL_152;
            }
          }
LABEL_153:
          if (v77 >= HIDWORD(v346)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v345 + v77) = v83;
          unsigned int v77 = v346 + 1;
          LODWORD(v346) = v346 + 1;
          goto LABEL_155;
        }
LABEL_162:
        ++v75;
      }
      while (v75 != v76);
      int v74 = 0;
LABEL_141:
      uint64_t v75 = (llvm::ValueAsMetadata **)__p;
      if (!__p) {
        goto LABEL_142;
      }
      goto LABEL_165;
    }
    int v74 = 0;
    if (!__p) {
      goto LABEL_142;
    }
LABEL_165:
    v338 = v75;
    operator delete(v75);
LABEL_142:
    MEMORY[0x1D25D9CD0](v334, 8);
    if (v74)
    {
LABEL_195:
      int v100 = 0;
      goto LABEL_196;
    }
  }
  uint64_t v88 = (char *)v331;
  if (v331 != v332)
  {
    int v89 = v330 - 1;
    do
    {
      uint64_t v90 = *(void *)v88;
      uint64_t v91 = *(void **)(*(void *)v88 + 8);
      if (v91)
      {
        if (*(unsigned __int8 *)(v90 + 16) <= 0x1Bu) {
          uint64_t v90 = 0;
        }
        do
        {
          uint64_t v92 = *v91;
          if (*(unsigned char *)(*v91 + 16) != 83) {
            uint64_t v92 = 0;
          }
          if (v90 != v342)
          {
            BOOL v93 = !v92 || v90 == 0;
            BOOL v94 = v93 || v90 == v92;
            if (!v94 && v330 != 0)
            {
              unsigned int v96 = ((v92 >> 4) ^ (v92 >> 9)) & v89;
              uint64_t v97 = *(void *)(v329[0] + 8 * v96);
              if (v92 == v97)
              {
LABEL_185:
                if (v96 != v330 && *(void *)(v92 + 40) == *(void *)(v90 + 40)) {
                  goto LABEL_195;
                }
              }
              else
              {
                int v98 = 1;
                while (v97 != -4096)
                {
                  unsigned int v99 = v96 + v98++;
                  unsigned int v96 = v99 & v89;
                  uint64_t v97 = *(void *)(v329[0] + 8 * v96);
                  if (v92 == v97) {
                    goto LABEL_185;
                  }
                }
              }
            }
          }
          uint64_t v91 = (void *)v91[1];
        }
        while (v91);
      }
      v88 += 8;
    }
    while (v88 != (char *)v332);
  }
  int v100 = 1;
LABEL_196:
  if (v345 != v347) {
    free(v345);
  }
  if (v100)
  {
    v341 = (llvm::ValueAsMetadata *)v6;
    uint64_t v342 = (uint64_t)a2;
    unsigned int v101 = *(_DWORD *)(*(void *)a2 + 8);
    if ((v101 & 0xFE) == 0x12) {
      unsigned int v101 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
    }
    if (v101 < 0x100) {
      goto LABEL_210;
    }
    unsigned int v102 = v101 >> 8;
    uint64_t v103 = *(unsigned int *)(a4 + 240);
    uint64_t v104 = *(void *)(a4 + 232);
    if (v103)
    {
      uint64_t v104 = *(void *)(a4 + 232);
      unint64_t v105 = *(unsigned int *)(a4 + 240);
      do
      {
        unint64_t v106 = v105 >> 1;
        uint64_t v107 = v104 + 16 * (v105 >> 1);
        unsigned int v108 = *(_DWORD *)(v107 + 8);
        uint64_t v109 = v107 + 16;
        v105 += ~(v105 >> 1);
        if (v108 < v102) {
          uint64_t v104 = v109;
        }
        else {
          unint64_t v105 = v106;
        }
      }
      while (v105);
    }
    if (v104 == *(void *)(a4 + 232) + 16 * v103 || *(_DWORD *)(v104 + 8) != v102) {
LABEL_210:
    }
      uint64_t v104 = *(void *)(a4 + 232);
    uint64_t v110 = (llvm::Constant *)llvm::IntegerType::get(**(llvm::IntegerType ***)v6, (llvm::LLVMContext *)*(unsigned int *)(v104 + 12));
    v343[0] = 0;
    v343[1] = 0;
    int v344 = 0;
    NullValue = llvm::Constant::getNullValue(v110, v111, v112);
    sub_1CC27AF70(v343, &v341)[1] = NullValue;
    int64_t v115 = (uint64_t *)v331;
    int v114 = v332;
    if (v331 == v332)
    {
      int64_t v155 = (uint64_t *)v331;
      unint64_t v116 = a2;
      goto LABEL_256;
    }
    unint64_t v116 = a2;
    while (2)
    {
      uint64_t v117 = *v115;
      if ((llvm::ValueAsMetadata *)*v115 != v341 && v117 && *(unsigned char *)(v117 + 16) == 83)
      {
        int v118 = *(_DWORD *)(v117 + 20);
        if ((v118 & 0x10000000) != 0)
        {
          uint64_t v119 = ***(void ***)v117;
          uint64_t v120 = *(void *)(v119 + 152);
          uint64_t v121 = *(unsigned int *)(v119 + 168);
          if (!v121) {
            goto LABEL_223;
          }
          LODWORD(v122) = (v121 - 1) & ((v117 >> 4) ^ (v117 >> 9));
          BOOL v123 = (uint64_t *)(v120 + 16 * v122);
          uint64_t v124 = *v123;
          if (*v123 != v117)
          {
            int v125 = 1;
            while (v124 != -4096)
            {
              int v126 = v122 + v125++;
              uint64_t v122 = v126 & (v121 - 1);
              uint64_t v124 = *(void *)(v120 + 16 * v122);
              if (v124 == v117)
              {
                BOOL v123 = (uint64_t *)(v120 + 16 * v122);
                goto LABEL_224;
              }
            }
LABEL_223:
            BOOL v123 = (uint64_t *)(v120 + 16 * v121);
          }
LABEL_224:
          int v127 = (void *)v123[1];
          uint64_t v130 = *v127;
          uint64_t v129 = (char *)(v127 + 2);
          uint64_t v128 = v130;
        }
        else
        {
          uint64_t v128 = 0;
          uint64_t v129 = &byte_1CFBCE98E;
        }
        __int16 v348 = 773;
        uint64_t v345 = v129;
        uint64_t v346 = v128;
        v347[0] = ".idx";
        unsigned int v131 = operator new(0x48uLL);
        v131[1] = v110;
        uint64_t v132 = (llvm::Value *)(v131 + 1);
        void *v131 = 0;
        v131[2] = 0;
        v131[3] = 0x4000000000000053;
        *((_OWORD *)v131 + 2) = 0u;
        BOOL v133 = (char *)(v131 + 4);
        *((_OWORD *)v131 + 3) = 0u;
        *((_DWORD *)v131 + 16) = 0;
        uint64_t v134 = *(void *)(v117 + 40);
        v131[6] = v134;
        *(_WORD *)(v134 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v131 + 31) & 0x10) != 0)
        {
          uint64_t v139 = *(void *)(v134 + 56);
          if (v139)
          {
            unsigned int v140 = *(llvm::ValueSymbolTable **)(v139 + 104);
            if (v140) {
              llvm::ValueSymbolTable::reinsertValue(v140, v132);
            }
          }
        }
        uint64_t v135 = *(void *)(v117 + 24);
        v131[4] = v135;
        v131[5] = v117 + 24;
        *(void *)(v135 + 8) = v133;
        *(void *)(v117 + 24) = v133;
        *((_DWORD *)v131 + 17) = v118 & 0x7FFFFFF;
        llvm::Value::setNameImpl(v132, (const char **)&v345);
        if (*((unsigned char *)v131 + 24))
        {
LABEL_227:
          uint64_t v136 = *((unsigned int *)v131 + 17);
          int v137 = operator new(40 * v136);
          void *v131 = v137;
          if (v136)
          {
            BOOL v138 = &v137[4 * v136];
            do
            {
              *int v137 = 0;
              v137[1] = 0;
              v137[2] = 0;
              v137[3] = v132;
              v137 += 4;
            }
            while (v137 != v138);
          }
          uint64_t v334 = v117;
          sub_1CC080DE0(v343, &v334)[1] = v132;
          unint64_t v116 = a2;
          goto LABEL_231;
        }
        if ((*((unsigned char *)v131 + 31) & 0x10) == 0) {
          goto LABEL_252;
        }
        uint64_t v141 = ***(void ***)v132;
        uint64_t v142 = *(void *)(v141 + 152);
        uint64_t v143 = *(unsigned int *)(v141 + 168);
        if (!v143) {
          goto LABEL_244;
        }
        LODWORD(v144) = (v143 - 1) & ((v132 >> 4) ^ (v132 >> 9));
        int v145 = (llvm::Value **)(v142 + 16 * v144);
        uint64_t v146 = *v145;
        if (*v145 != v132)
        {
          int v147 = 1;
          while (v146 != (llvm::Value *)-4096)
          {
            int v148 = v144 + v147++;
            uint64_t v144 = v148 & (v143 - 1);
            uint64_t v146 = *(llvm::Value **)(v142 + 16 * v144);
            if (v146 == v132)
            {
              int v145 = (llvm::Value **)(v142 + 16 * v144);
              goto LABEL_245;
            }
          }
LABEL_244:
          int v145 = (llvm::Value **)(v142 + 16 * v143);
        }
LABEL_245:
        uint64_t v149 = v145[1];
        unint64_t v152 = *(void *)v149;
        uint64_t v150 = (char *)v149 + 16;
        unint64_t v151 = v152;
        if (v152 >= 5 && (*(_DWORD *)v150 == *(_DWORD *)"llvm." ? (BOOL v153 = v150[4] == aLlvm_1[4]) : (BOOL v153 = 0), v153))
        {
          *((_DWORD *)v131 + 10) |= 0x2000u;
          int v154 = llvm::Function::lookupIntrinsicID(v150, v151);
        }
        else
        {
LABEL_252:
          int v154 = 0;
          *((_DWORD *)v131 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v131 + 11) = v154;
        goto LABEL_227;
      }
LABEL_231:
      if (++v115 != v114) {
        continue;
      }
      break;
    }
    int64_t v155 = (uint64_t *)v331;
    int64_t v115 = v332;
LABEL_256:
    uint64_t v156 = **(void **)v341;
    uint64_t v345 = v347;
    uint64_t v346 = 0x200000000;
    uint64_t v351 = v156;
    uint64_t v352 = &v360;
    v353 = v361;
    uint64_t v354 = 0;
    int v355 = 0;
    __int16 v356 = 512;
    char v357 = 7;
    uint64_t v349 = 0;
    uint64_t v350 = 0;
    uint64_t v358 = 0;
    uint64_t v359 = 0;
    unsigned int v360 = &unk_1F2616E88;
    v361[0] = &unk_1F2617008;
    if (v155 == v115) {
      goto LABEL_398;
    }
    while (2)
    {
      uint64_t v157 = *v155;
      if (v344)
      {
        unsigned int v158 = ((v157 >> 4) ^ (v157 >> 9)) & (v344 - 1);
        uint64_t v159 = *(void *)(v343[0] + 16 * v158);
        if (v157 == v159)
        {
LABEL_259:
          if (v158 == v344) {
            goto LABEL_260;
          }
          goto LABEL_334;
        }
        int v221 = 1;
        while (v159 != -4096)
        {
          unsigned int v222 = v158 + v221++;
          unsigned int v158 = v222 & (v344 - 1);
          uint64_t v159 = *(void *)(v343[0] + 16 * v158);
          if (v157 == v159) {
            goto LABEL_259;
          }
        }
      }
LABEL_260:
      unsigned int v160 = *(unsigned __int8 *)(v157 + 16);
      if (v160 >= 0x1C && v160 - 79 >= 0xFFFFFFF3 && v157 != 0)
      {
        uint64_t v334 = *(void *)(v157 - 32);
        uint64_t v165 = sub_1CC080DE0(v343, &v334)[1];
        uint64_t v334 = v157;
        sub_1CC080DE0(v343, &v334)[1] = v165;
        goto LABEL_334;
      }
      if (v160 == 62 || v160 == 5 && *(_WORD *)(v157 + 18) == 34)
      {
        int v163 = *(_DWORD *)(v157 + 20);
        if ((v163 & 0x40000000) != 0) {
          uint64_t v164 = *(void *)(v157 - 8);
        }
        else {
          uint64_t v164 = v157 - 32 * (v163 & 0x7FFFFFF);
        }
        uint64_t v334 = *(void *)(v164 + 32);
        uint64_t v166 = sub_1CC080DE0(v343, &v334);
        int v167 = *(_DWORD *)(v157 + 20);
        if (v166[1])
        {
          if ((v167 & 0x40000000) != 0) {
            uint64_t v168 = *(void *)(v157 - 8);
          }
          else {
            uint64_t v168 = v157 - 32 * (v167 & 0x7FFFFFF);
          }
          v340 = *(llvm::ValueAsMetadata **)(v168 + 32);
          BOOL v170 = (unsigned __int8 **)(sub_1CC080DE0(v343, &v340) + 1);
        }
        else
        {
          if ((v167 & 0x40000000) != 0) {
            uint64_t v169 = *(void *)(v157 - 8);
          }
          else {
            uint64_t v169 = v157 - 32 * (v167 & 0x7FFFFFF);
          }
          BOOL v170 = (unsigned __int8 **)(v169 + 32);
        }
        uint64_t v171 = *v170;
        sub_1CCA782F4((uint64_t)&v345, v157, 1);
        uint64_t v172 = *(llvm::Type **)v171;
        if ((*(_DWORD *)(*(void *)v171 + 8) & 0xFE) == 0x12) {
          uint64_t v172 = (llvm::Type *)**((void **)v172 + 2);
        }
        int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v172);
        int v174 = *(_DWORD *)(v157 + 20);
        if ((v174 & 0x40000000) != 0) {
          uint64_t v175 = *(uint64_t **)(v157 - 8);
        }
        else {
          uint64_t v175 = (uint64_t *)(v157 - 32 * (v174 & 0x7FFFFFF));
        }
        uint64_t v334 = *v175;
        uint64_t v176 = *(void *)sub_1CC080DE0(v343, &v334)[1];
        if ((*(_DWORD *)(v176 + 8) & 0xFE) == 0x12) {
          uint64_t v176 = **(void **)(v176 + 16);
        }
        if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v176))
        {
          int v177 = *(_DWORD *)(v157 + 20);
          if ((v177 & 0x40000000) != 0) {
            unsigned int v178 = *(llvm::ValueAsMetadata ***)(v157 - 8);
          }
          else {
            unsigned int v178 = (llvm::ValueAsMetadata **)(v157 - 32 * (v177 & 0x7FFFFFF));
          }
          v340 = *v178;
          uint64_t v179 = sub_1CC080DE0(v343, &v340);
          int v180 = *(_DWORD *)(v157 + 20);
          if ((v180 & 0x40000000) != 0) {
            unint64_t v181 = *(uint64_t *****)(v157 - 8);
          }
          else {
            unint64_t v181 = (uint64_t ****)(v157 - 32 * (v180 & 0x7FFFFFF));
          }
          uint64_t v182 = *(void *)v179[1];
          uint64_t v183 = *v181;
          if ((*((unsigned char *)v183 + 23) & 0x10) != 0)
          {
            uint64_t v184 = ***v183;
            uint64_t v185 = *(void *)(v184 + 152);
            uint64_t v186 = *(unsigned int *)(v184 + 168);
            if (!v186) {
              goto LABEL_304;
            }
            LODWORD(v187) = (v186 - 1) & ((v183 >> 4) ^ (v183 >> 9));
            uint64_t v188 = (uint64_t ****)(v185 + 16 * v187);
            unint64_t v189 = *v188;
            if (*v188 != v183)
            {
              int v190 = 1;
              while (v189 != (uint64_t ***)-4096)
              {
                int v191 = v187 + v190++;
                uint64_t v187 = v191 & (v186 - 1);
                unint64_t v189 = *(uint64_t ****)(v185 + 16 * v187);
                if (v189 == v183)
                {
                  uint64_t v188 = (uint64_t ****)(v185 + 16 * v187);
                  goto LABEL_305;
                }
              }
LABEL_304:
              uint64_t v188 = (uint64_t ****)(v185 + 16 * v186);
            }
LABEL_305:
            unint64_t v192 = v188[1];
            uint64_t v195 = *v192;
            uint64_t v194 = (char *)(v192 + 2);
            uint64_t v193 = v195;
          }
          else
          {
            uint64_t v193 = 0;
            uint64_t v194 = &byte_1CFBCE98E;
          }
          LOWORD(v338) = 773;
          uint64_t v334 = (uint64_t)v194;
          unsigned int v335 = v193;
          BOOL v336 = ".sext";
          uint64_t v171 = (unsigned __int8 *)sub_1CB845504((uint64_t)&v345, v171, v182, (uint64_t)&v334);
        }
        int v196 = *(_DWORD *)(v157 + 20);
        if ((v196 & 0x40000000) != 0) {
          int v197 = *(uint64_t **)(v157 - 8);
        }
        else {
          int v197 = (uint64_t *)(v157 - 32 * (v196 & 0x7FFFFFF));
        }
        uint64_t v334 = *v197;
        uint64_t v198 = sub_1CC080DE0(v343, &v334)[1];
        if (*(unsigned char *)(v198 + 16) == 16)
        {
          uint64_t v199 = *(unsigned int *)(v198 + 32);
          if (v199 <= 0x40)
          {
            if (*(void *)(v198 + 24)) {
              goto LABEL_313;
            }
LABEL_329:
            uint64_t v334 = v157;
            unint64_t v216 = (llvm::ValueAsMetadata **)&v334;
LABEL_333:
            sub_1CC080DE0(v343, v216)[1] = v171;
            unint64_t v116 = a2;
            goto LABEL_334;
          }
          int v211 = 0;
          int64_t v212 = (unint64_t)(v199 + 63) >> 6;
          do
          {
            if (v212-- < 1) {
              break;
            }
            unint64_t v214 = *(void *)(*(void *)(v198 + 24) + 8 * v212);
            v211 += __clz(v214);
          }
          while (!v214);
          int v215 = v199 | 0xFFFFFFC0;
          if ((v199 & 0x3F) == 0) {
            int v215 = 0;
          }
          if (v211 + v215 == v199) {
            goto LABEL_329;
          }
        }
LABEL_313:
        int v200 = *(_DWORD *)(v157 + 20);
        if ((v200 & 0x40000000) != 0) {
          int v201 = *(uint64_t *****)(v157 - 8);
        }
        else {
          int v201 = (uint64_t ****)(v157 - 32 * (v200 & 0x7FFFFFF));
        }
        uint64_t v202 = *v201;
        if ((*((unsigned char *)v202 + 23) & 0x10) != 0)
        {
          uint64_t v203 = ***v202;
          uint64_t v204 = *(void *)(v203 + 152);
          uint64_t v205 = *(unsigned int *)(v203 + 168);
          if (!v205) {
            goto LABEL_330;
          }
          LODWORD(v206) = (v205 - 1) & ((v202 >> 4) ^ (v202 >> 9));
          __int16 v207 = (uint64_t ****)(v204 + 16 * v206);
          uint64_t v208 = *v207;
          if (*v207 != v202)
          {
            int v209 = 1;
            while (v208 != (uint64_t ***)-4096)
            {
              int v210 = v206 + v209++;
              uint64_t v206 = v210 & (v205 - 1);
              uint64_t v208 = *(uint64_t ****)(v204 + 16 * v206);
              if (v208 == v202)
              {
                __int16 v207 = (uint64_t ****)(v204 + 16 * v206);
                goto LABEL_331;
              }
            }
LABEL_330:
            __int16 v207 = (uint64_t ****)(v204 + 16 * v205);
          }
LABEL_331:
          uint64_t v217 = v207[1];
          uint64_t v220 = *v217;
          uint64_t v219 = (char *)(v217 + 2);
          int v218 = v220;
        }
        else
        {
          int v218 = 0;
          uint64_t v219 = &byte_1CFBCE98E;
        }
        LOWORD(v338) = 773;
        uint64_t v334 = (uint64_t)v219;
        unsigned int v335 = v218;
        BOOL v336 = ".add";
        uint64_t v171 = (unsigned __int8 *)sub_1CB844A3C((uint64_t)&v345, (void *)v198, (uint64_t)v171, (uint64_t)&v334, 0, 1);
        v340 = (llvm::ValueAsMetadata *)v157;
        unint64_t v216 = &v340;
        goto LABEL_333;
      }
LABEL_334:
      if (++v155 != v115) {
        continue;
      }
      break;
    }
    uint64_t v223 = (uint64_t *)v331;
    uint64_t v224 = v332;
    if (v331 != v332)
    {
      BOOL v323 = v332;
      do
      {
        uint64_t v225 = *v223;
        if ((llvm::ValueAsMetadata *)*v223 != v341)
        {
          if (v225)
          {
            if (*(unsigned char *)(v225 + 16) == 83)
            {
              uint64_t v334 = *v223;
              uint64_t v226 = sub_1CC080DE0(v343, &v334);
              int v227 = *(_DWORD *)(v225 + 20);
              uint64_t v228 = v227 & 0x7FFFFFF;
              if ((v227 & 0x7FFFFFF) != 0)
              {
                uint64_t v229 = 0;
                uint64_t v230 = v226[1];
                uint64_t v324 = v227 & 0x7FFFFFF;
                uint64_t v325 = v223;
                do
                {
                  uint64_t v334 = 0;
                  int v231 = *(_DWORD *)(v225 + 20);
                  if ((v231 & 0x40000000) != 0) {
                    uint64_t v232 = *(void *)(v225 - 8);
                  }
                  else {
                    uint64_t v232 = v225 - 32 * (v231 & 0x7FFFFFF);
                  }
                  uint64_t v233 = *(void *)(v232 + 32 * v229);
                  uint64_t v334 = v233;
                  if (v344)
                  {
                    unsigned int v234 = ((v233 >> 4) ^ (v233 >> 9)) & (v344 - 1);
                    uint64_t v235 = *(void *)(v343[0] + 16 * v234);
                    if (v233 == v235)
                    {
LABEL_354:
                      if (v234 != v344)
                      {
                        uint64_t v233 = sub_1CC27AF70(v343, &v334)[1];
                        uint64_t v334 = v233;
                        int v231 = *(_DWORD *)(v225 + 20);
                      }
                    }
                    else
                    {
                      int v262 = 1;
                      while (v235 != -4096)
                      {
                        unsigned int v263 = v234 + v262++;
                        unsigned int v234 = v263 & (v344 - 1);
                        uint64_t v235 = *(void *)(v343[0] + 16 * v234);
                        if (v233 == v235) {
                          goto LABEL_354;
                        }
                      }
                    }
                  }
                  if ((v231 & 0x40000000) != 0) {
                    uint64_t v236 = *(void *)(v225 - 8);
                  }
                  else {
                    uint64_t v236 = v225 - 32 * (v231 & 0x7FFFFFF);
                  }
                  uint64_t v237 = *(void *)(v236 + 32 * *(unsigned int *)(v225 + 60) + 8 * v229);
                  int v238 = *(_DWORD *)(v230 + 20);
                  uint64_t v239 = v238 & 0x7FFFFFF;
                  if ((v238 & 0x7FFFFFF) == *(_DWORD *)(v230 + 60))
                  {
                    unsigned int v252 = v239 + (v239 >> 1);
                    if (v252 <= 2) {
                      uint64_t v253 = 2;
                    }
                    else {
                      uint64_t v253 = v252;
                    }
                    *(_DWORD *)(v230 + 60) = v253;
                    if ((v238 & 0x40000000) != 0) {
                      uint64_t v254 = *(uint64_t **)(v230 - 8);
                    }
                    else {
                      uint64_t v254 = (uint64_t *)(v230 - 32 * v239);
                    }
                    uint64_t v326 = v254;
                    int v255 = operator new(40 * v253);
                    *(void *)(v230 - 8) = v255;
                    uint64_t v256 = v255;
                    do
                    {
                      *uint64_t v256 = 0;
                      v256[1] = 0;
                      v256[2] = 0;
                      v256[3] = v230;
                      v256 += 4;
                    }
                    while (v256 != &v255[4 * v253]);
                    int v257 = *(_DWORD *)(v230 + 20);
                    if ((v257 & 0x40000000) != 0) {
                      uint64_t v258 = (uint64_t)v255;
                    }
                    else {
                      uint64_t v258 = v230 - 32 * (v257 & 0x7FFFFFF);
                    }
                    sub_1CC5E4108((uint64_t)&v340, v326, &v326[4 * v239], v258);
                    if (v239)
                    {
                      memmove((void *)(v258 + 32 * v253), &v326[4 * v239], 8 * v239);
                      uint64_t v259 = 4 * v239;
                      do
                      {
                        uint64_t v260 = &v326[v259];
                        if (v326[v259 - 4])
                        {
                          *(void *)*(v260 - 2) = *(v260 - 3);
                          uint64_t v261 = *(v260 - 3);
                          if (v261) {
                            *(void *)(v261 + 16) = *(v260 - 2);
                          }
                        }
                        v259 -= 4;
                      }
                      while (v259 * 8);
                    }
                    operator delete(v326);
                    int v238 = *(_DWORD *)(v230 + 20);
                    unint64_t v116 = a2;
                    uint64_t v228 = v324;
                    uint64_t v223 = v325;
                    uint64_t v224 = v323;
                  }
                  uint64_t v240 = (v238 + 1) & 0x7FFFFFF;
                  *(_DWORD *)(v230 + 20) = v238 & 0xF8000000 | (v238 + 1) & 0x7FFFFFF;
                  if ((v238 & 0x40000000) != 0) {
                    uint64_t v241 = *(void *)(v230 - 8);
                  }
                  else {
                    uint64_t v241 = v230 - 32 * v240;
                  }
                  uint64_t v242 = (v240 - 1);
                  uint64_t v243 = v241 + 32 * v242;
                  if (*(void *)v243)
                  {
                    **(void **)(v243 + 16) = *(void *)(v243 + 8);
                    uint64_t v251 = *(void *)(v243 + 8);
                    if (v251) {
                      *(void *)(v251 + 16) = *(void *)(v243 + 16);
                    }
                  }
                  *(void *)uint64_t v243 = v233;
                  if (v233)
                  {
                    uint64_t v246 = *(void *)(v233 + 8);
                    uint64_t v245 = (void *)(v233 + 8);
                    uint64_t v244 = v246;
                    uint64_t v247 = v241 + 32 * v242;
                    *(void *)(v247 + 8) = v246;
                    if (v246) {
                      *(void *)(v244 + 16) = v247 + 8;
                    }
                    *(void *)(v247 + 16) = v245;
                    *uint64_t v245 = v243;
                  }
                  int v248 = *(_DWORD *)(v230 + 20);
                  uint64_t v249 = v248 & 0x7FFFFFF;
                  if ((v248 & 0x40000000) != 0) {
                    uint64_t v250 = *(void *)(v230 - 8);
                  }
                  else {
                    uint64_t v250 = v230 - 32 * v249;
                  }
                  *(void *)(v250 + 32 * *(unsigned int *)(v230 + 60) + 8 * (v249 - 1)) = v237;
                  ++v229;
                }
                while (v229 != v228);
              }
            }
          }
        }
        ++v223;
      }
      while (v223 != v224);
    }
LABEL_398:
    unsigned int v264 = *(_DWORD *)(*(void *)v116 + 8);
    if ((v264 & 0xFE) == 0x12) {
      unsigned int v264 = *(_DWORD *)(**(void **)(*(void *)v116 + 16) + 8);
    }
    unint64_t v265 = llvm::PointerType::get(v328, (llvm::Type *)(v264 >> 8));
    uint64_t v266 = (llvm::ValueAsMetadata **)v331;
    int v267 = (llvm::ValueAsMetadata **)v332;
    if (v331 != v332)
    {
      uint64_t v268 = v265;
      unsigned int v269 = (v116 >> 4) ^ (v116 >> 9);
      while (1)
      {
        int v270 = *v266;
        v340 = v270;
        if (v270 != v341) {
          break;
        }
LABEL_431:
        if (++v266 == v267) {
          goto LABEL_436;
        }
      }
      sub_1CCA782F4((uint64_t)&v345, (uint64_t)v270, 0);
      if ((v116[23] & 0x10) == 0)
      {
        __int16 v280 = 0;
        uint64_t v281 = &byte_1CFBCE98E;
LABEL_412:
        LOWORD(v338) = 773;
        uint64_t v334 = (uint64_t)v281;
        unsigned int v335 = v280;
        BOOL v336 = "to.ptr";
        uint64_t v283 = (uint64_t *)sub_1CC240E88((uint64_t)&v345, (uint64_t)v341, v268, (uint64_t)&v334);
        __int16 v284 = sub_1CC27AF70(v343, &v340);
        if ((*((unsigned char *)v340 + 23) & 0x10) == 0)
        {
          v294 = 0;
          uint64_t v295 = &byte_1CFBCE98E;
LABEL_421:
          LOWORD(v338) = 773;
          uint64_t v334 = (uint64_t)v295;
          unsigned int v335 = v294;
          BOOL v336 = ".ptr";
          uint64_t v297 = sub_1CC57EEA0((uint64_t *)&v345, (uint64_t)v328, v283, v284 + 1, 1, (uint64_t)&v334);
          int v298 = *(uint64_t ***)v340;
          if ((*((unsigned char *)v340 + 23) & 0x10) == 0)
          {
            uint64_t v308 = 0;
            uint64_t v309 = &byte_1CFBCE98E;
            unint64_t v116 = a2;
            goto LABEL_430;
          }
          uint64_t v299 = **v298;
          uint64_t v300 = *(void *)(v299 + 152);
          uint64_t v301 = *(unsigned int *)(v299 + 168);
          unint64_t v116 = a2;
          if (v301)
          {
            LODWORD(v302) = (v301 - 1) & ((v340 >> 4) ^ (v340 >> 9));
            uint64_t v303 = v300 + 16 * v302;
            v304 = *(llvm::ValueAsMetadata **)v303;
            if (*(llvm::ValueAsMetadata **)v303 == v340)
            {
LABEL_429:
              uint64_t v307 = *(void **)(v303 + 8);
              uint64_t v310 = (uint64_t **)*v307;
              uint64_t v309 = (char *)(v307 + 2);
              uint64_t v308 = v310;
LABEL_430:
              LOWORD(v338) = 773;
              uint64_t v334 = (uint64_t)v309;
              unsigned int v335 = v308;
              BOOL v336 = ".conv";
              uint64_t v311 = sub_1CC240E88((uint64_t)&v345, v297, (uint64_t)v298, (uint64_t)&v334);
              llvm::Value::doRAUW(v340, v311, (llvm::Value *)1);
              goto LABEL_431;
            }
            int v305 = 1;
            while (v304 != (llvm::ValueAsMetadata *)-4096)
            {
              int v306 = v302 + v305++;
              uint64_t v302 = v306 & (v301 - 1);
              v304 = *(llvm::ValueAsMetadata **)(v300 + 16 * v302);
              if (v304 == v340)
              {
                uint64_t v303 = v300 + 16 * v302;
                goto LABEL_429;
              }
            }
          }
          uint64_t v303 = v300 + 16 * v301;
          goto LABEL_429;
        }
        uint64_t v285 = ***(void ***)v340;
        uint64_t v286 = *(void *)(v285 + 152);
        uint64_t v287 = *(unsigned int *)(v285 + 168);
        if (v287)
        {
          LODWORD(v288) = (v287 - 1) & ((v340 >> 4) ^ (v340 >> 9));
          uint64_t v289 = v286 + 16 * v288;
          uint64_t v290 = *(llvm::ValueAsMetadata **)v289;
          if (*(llvm::ValueAsMetadata **)v289 == v340)
          {
LABEL_420:
            int v293 = *(void **)(v289 + 8);
            v296 = (uint64_t **)*v293;
            uint64_t v295 = (char *)(v293 + 2);
            v294 = v296;
            goto LABEL_421;
          }
          int v291 = 1;
          while (v290 != (llvm::ValueAsMetadata *)-4096)
          {
            int v292 = v288 + v291++;
            uint64_t v288 = v292 & (v287 - 1);
            uint64_t v290 = *(llvm::ValueAsMetadata **)(v286 + 16 * v288);
            if (v290 == v340)
            {
              uint64_t v289 = v286 + 16 * v288;
              goto LABEL_420;
            }
          }
        }
        uint64_t v289 = v286 + 16 * v287;
        goto LABEL_420;
      }
      uint64_t v271 = ***(void ***)v116;
      uint64_t v272 = *(void *)(v271 + 152);
      uint64_t v273 = *(unsigned int *)(v271 + 168);
      if (v273)
      {
        LODWORD(v274) = (v273 - 1) & v269;
        int v275 = (void *)(v272 + 16 * v274);
        int v276 = (unsigned char *)*v275;
        if ((unsigned char *)*v275 == v116)
        {
LABEL_411:
          int v279 = (void *)v275[1];
          uint64_t v282 = (uint64_t **)*v279;
          uint64_t v281 = (char *)(v279 + 2);
          __int16 v280 = v282;
          goto LABEL_412;
        }
        int v277 = 1;
        while (v276 != (unsigned char *)-4096)
        {
          int v278 = v274 + v277++;
          uint64_t v274 = v278 & (v273 - 1);
          int v276 = *(unsigned char **)(v272 + 16 * v274);
          if (v276 == v116)
          {
            int v275 = (void *)(v272 + 16 * v274);
            goto LABEL_411;
          }
        }
      }
      int v275 = (void *)(v272 + 16 * v273);
      goto LABEL_411;
    }
LABEL_436:
    uint64_t v312 = sub_1CC27AF70(v343, &v342)[1];
    if (v345 != v347) {
      free(v345);
    }
    MEMORY[0x1D25D9CD0](v343[0], 8);
    int v313 = operator new(0x80uLL);
    uint64_t v13 = (llvm::Value *)(v313 + 16);
    v313[21] = v313[21] & 0x38000000 | 2;
    *(void *)int v313 = 0;
    *((void *)v313 + 1) = 0;
    *((void *)v313 + 2) = 0;
    *((void *)v313 + 3) = v313 + 16;
    *((void *)v313 + 4) = 0;
    *((void *)v313 + 5) = 0;
    *((void *)v313 + 6) = 0;
    *((void *)v313 + 7) = v313 + 16;
    int v314 = *((_DWORD *)&dword_1CFB27850 + a3 - 32);
    __int16 v348 = 257;
    uint64_t v315 = *(void ***)v321;
    uint64_t v316 = ***(void ***)v321 + 1888;
    if (*(void *)v321 && (v315[1] & 0xFE) == 0x12)
    {
      uint64_t v318 = (uint64_t **)(***(void ***)v321 + 1888);
      uint64_t v319 = (llvm::Type *)*((unsigned int *)v315 + 8);
      if (*((_DWORD *)v315 + 2) == 19) {
        llvm::ScalableVectorType::get(v318, v319);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v318, v319);
      }
      uint64_t v316 = v320;
    }
    llvm::CmpInst::CmpInst(v13, v316, 53, v314, (uint64_t)v321, v312, (const char **)&v345, 0, 0);
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v331)
  {
    int v332 = (uint64_t *)v331;
    operator delete(v331);
  }
  MEMORY[0x1D25D9CD0](v329[0], 8);
  return v13;
}

llvm::UndefValue **sub_1CCA4D33C(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3)
{
  v25[32] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0x2000000000;
  if (!a3) {
    goto LABEL_35;
  }
  uint64_t v5 = a3;
  unsigned int v6 = 0;
  do
  {
    if (v6 > 0x1F) {
      return 0;
    }
    if (v6 >= HIDWORD(v24)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v25[v6] = v5;
    unsigned int v6 = v24 + 1;
    LODWORD(v24) = v24 + 1;
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5);
  if (!v6)
  {
LABEL_35:
    uint64_t v16 = *(llvm::ConstantInt **)a2;
    unsigned int v17 = *((_WORD *)a2 + 9) & 0x3F;
    BOOL v18 = v17 > 0x29;
    uint64_t v19 = (1 << v17) & 0x2A90000AA00;
    unint64_t v21 = v18 || v19 == 0;
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get(v16, v21, 0);
    return sub_1CC9D3C84(a1, a2, v22);
  }
  int v7 = 0;
  unsigned int v8 = 32;
  while (1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (void *)v25[--v6];
    LODWORD(v24) = v6;
    uint64_t v11 = v10[3];
    --v8;
    unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 > 0x4C)
    {
      switch(*(unsigned char *)(v11 + 16))
      {
        case 'M':
        case 'S':
        case 'U':
          goto LABEL_17;
        case 'Q':
          if (v7) {
            return 0;
          }
          int v7 = 1;
          goto LABEL_34;
        case 'T':
          uint64_t v14 = *(void *)(v11 - 32);
          if (v14
            && !*(unsigned char *)(v14 + 16)
            && *(void *)(v14 + 24) == *(void *)(v11 + 72)
            && (*(unsigned char *)(v14 + 33) & 0x20) != 0
            && (*(_DWORD *)(v14 + 36) - 167) <= 0x20
            && ((1 << (*(unsigned char *)(v14 + 36) + 89)) & 0x148000003) != 0)
          {
            goto LABEL_34;
          }
          return 0;
        default:
          return (llvm::UndefValue **)v9;
      }
    }
    if (v12 != 60)
    {
      if (v12 == 61)
      {
        if (*(void *)(v11 - 64) == *v10) {
          return 0;
        }
        goto LABEL_34;
      }
      if (v12 != 62) {
        return (llvm::UndefValue **)v9;
      }
LABEL_17:
      uint64_t v13 = *(void *)(v11 + 8);
      if (v13) {
        break;
      }
    }
LABEL_34:
    if (!v6) {
      goto LABEL_35;
    }
  }
  while (v6 < v8)
  {
    if (v6 >= HIDWORD(v24)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v25[v6] = v13;
    unsigned int v6 = v24 + 1;
    LODWORD(v24) = v24 + 1;
    uint64_t v13 = *(void *)(v13 + 8);
    if (!v13) {
      goto LABEL_34;
    }
  }
  return 0;
}

llvm::Value *sub_1CCA4D608(char a1, int a2, void *a3, uint64_t a4)
{
  LOWORD(v6) = a2;
  if ((a1 & 0x3F) == 0x21) {
    int v6 = dword_1CFB278F0[a2];
  }
  int v7 = operator new(0x80uLL);
  unsigned int v8 = (llvm::Value *)(v7 + 16);
  v7[21] = v7[21] & 0x38000000 | 2;
  *(void *)int v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 3) = v7 + 16;
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 6) = 0;
  *((void *)v7 + 7) = v7 + 16;
  __int16 v16 = 257;
  uint64_t v9 = (void **)*a3;
  uint64_t v10 = **(void **)*a3 + 1888;
  if (*a3 && (v9[1] & 0xFE) == 0x12)
  {
    unsigned int v12 = (uint64_t **)(**(void **)*a3 + 1888);
    uint64_t v13 = (llvm::Type *)*((unsigned int *)v9 + 8);
    if (*((_DWORD *)v9 + 2) == 19) {
      llvm::ScalableVectorType::get(v12, v13);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v13);
    }
    uint64_t v10 = v14;
  }
  return llvm::CmpInst::CmpInst(v8, v10, 53, v6, (uint64_t)a3, a4, &v15, 0, 0);
}

BOOL sub_1CCA4D700(llvm::APInt *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 2);
  unsigned int v2 = v1 - 1;
  if (v1 > 0x40)
  {
    if (((*(void *)(*(void *)a1 + 8 * (v2 >> 6)) >> v2) & 1) == 0) {
      return 0;
    }
    int v6 = llvm::APInt::countLeadingOnesSlowCase(a1);
    int v8 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a1);
  }
  else
  {
    unint64_t v3 = *(void *)a1;
    if (((*(void *)a1 >> v2) & 1) == 0) {
      return 0;
    }
    int v5 = __clz(~(v3 << -(char)v1));
    if (v1) {
      int v6 = v5;
    }
    else {
      int v6 = 0;
    }
    unsigned int v7 = __clz(__rbit64(v3));
    if (v1 >= v7) {
      int v8 = v7;
    }
    else {
      int v8 = *((_DWORD *)a1 + 2);
    }
  }
  return v8 + v6 == v1;
}

BOOL sub_1CCA4D7A8(int *a1, llvm::APInt *this)
{
  int v2 = *a1;
  if ((*a1 - 38) > 3) {
    return 0;
  }
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    int v7 = 0;
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v8-- < 1) {
        break;
      }
      unint64_t v10 = *(void *)(*(void *)this + 8 * v8);
      v7 += __clz(v10);
    }
    while (!v10);
    int v11 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v11 = 0;
    }
    int v12 = v7 + v11;
    if (v12 != v4)
    {
      if (v12 != v4 - 1)
      {
        BOOL v6 = llvm::APInt::countTrailingOnesSlowCase(this) == v4;
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    return (v2 & 0xFFFFFFFE) != 32;
  }
  uint64_t v5 = *(void *)this;
  if (!*(void *)this) {
    return (v2 & 0xFFFFFFFE) != 32;
  }
  if (v5 == 1)
  {
LABEL_16:
    if (v2 == 40)
    {
      int v14 = 41;
LABEL_23:
      *a1 = v14;
      return 1;
    }
    return 0;
  }
  BOOL v6 = v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  if (!v4) {
    BOOL v6 = 1;
  }
LABEL_20:
  BOOL result = 0;
  if (v2 == 38 && v6)
  {
    int v14 = 39;
    goto LABEL_23;
  }
  return result;
}

llvm::UndefValue **sub_1CCA4D8C0(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4)
{
  uint64_t v334 = 0;
  if ((*(_WORD *)(a2 + 18) & 0x3E) == 0x20)
  {
    int64_t v8 = (unsigned __int8 *)*(a3 - 8);
    unsigned int v335 = (const char *)&v334;
    p_src = 0;
    if (sub_1CBF528D8((uint64_t)&v335, v8))
    {
      int v11 = (llvm::ConstantInt **)*(a3 - 4);
      int v12 = v334;
      uint64_t v13 = *((unsigned int *)v334 + 2);
      if (v13 > 0x40)
      {
        int v291 = 0;
        int64_t v292 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          BOOL v36 = v292-- < 1;
          if (v36) {
            break;
          }
          unint64_t v293 = *((void *)*v334 + v292);
          v291 += __clz(v293);
        }
        while (!v293);
        int v294 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0) {
          int v294 = 0;
        }
        if (v291 + v294 != v13)
        {
          int v15 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v334);
          goto LABEL_8;
        }
      }
      else if (*v334)
      {
        unsigned int v14 = __clz(__rbit64((unint64_t)*v334));
        if (v13 >= v14) {
          int v15 = v14;
        }
        else {
          int v15 = *((_DWORD *)v334 + 2);
        }
LABEL_8:
        uint64_t v16 = *(unsigned int *)(a4 + 8);
        if (v16 > 0x40)
        {
          int v295 = 0;
          int64_t v296 = (unint64_t)(v16 + 63) >> 6;
          unsigned int v17 = *(unint64_t **)a4;
          do
          {
            BOOL v36 = v296-- < 1;
            if (v36) {
              break;
            }
            unint64_t v297 = v17[v296];
            v295 += __clz(v297);
          }
          while (!v297);
          int v298 = v16 | 0xFFFFFFC0;
          if ((v16 & 0x3F) == 0) {
            int v298 = 0;
          }
          if (v295 + v298 != v16 || v15 == 0)
          {
            BOOL v18 = *v12;
            if (memcmp(*(const void **)a4, *v12, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8))
            {
              int v20 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4);
              goto LABEL_15;
            }
            goto LABEL_481;
          }
        }
        else
        {
          unsigned int v17 = *(unint64_t **)a4;
          if (*(void *)a4 || !v15)
          {
            BOOL v18 = *v12;
            if (v17 != *v12)
            {
              unsigned int v19 = __clz(__rbit64((unint64_t)v17));
              if (v16 >= v19) {
                int v20 = v19;
              }
              else {
                int v20 = *(_DWORD *)(a4 + 8);
              }
LABEL_15:
              unint64_t v21 = (v20 - v15);
              if ((int)v21 < 1) {
                goto LABEL_516;
              }
              LODWORD(p_src) = v13;
              if (v13 > 0x40) {
                operator new[]();
              }
              uint64_t v22 = (void)v18 << v21;
              if (v13 == v21) {
                uint64_t v22 = 0;
              }
              unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
              if (!v13) {
                unint64_t v23 = 0;
              }
              if ((unint64_t *)(v23 & v22) != v17)
              {
LABEL_516:
                uint64_t v311 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, (*(_WORD *)(a2 + 18) & 0x3F) == 33, 0);
                return sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v311);
              }
              NullValue = llvm::ConstantInt::get(*v11, v21, 0);
              int v25 = *(_WORD *)(a2 + 18) & 0x3F;
              unsigned int v26 = operator new(0x80uLL);
              unint64_t v27 = (llvm::Value *)(v26 + 16);
              v26[21] = v26[21] & 0x38000000 | 2;
              *(void *)unsigned int v26 = 0;
              *((void *)v26 + 1) = 0;
              *((void *)v26 + 2) = 0;
              *((void *)v26 + 3) = v26 + 16;
              *((void *)v26 + 4) = 0;
              *((void *)v26 + 5) = 0;
              *((void *)v26 + 6) = 0;
              *((void *)v26 + 7) = v26 + 16;
              if (v25 == 33) {
                __int16 v28 = 33;
              }
              else {
                __int16 v28 = 32;
              }
              goto LABEL_486;
            }
LABEL_481:
            NullValue = llvm::Constant::getNullValue(*v11, v9, v10);
            BOOL v300 = (*(_WORD *)(a2 + 18) & 0x3F) == 33;
            __int16 v301 = 32;
LABEL_482:
            if (v300) {
              __int16 v28 = v301 + 1;
            }
            else {
              __int16 v28 = v301;
            }
            uint64_t v302 = operator new(0x80uLL);
            unint64_t v27 = (llvm::Value *)(v302 + 16);
            v302[21] = v302[21] & 0x38000000 | 2;
            *(void *)uint64_t v302 = 0;
            *((void *)v302 + 1) = 0;
            *((void *)v302 + 2) = 0;
            *((void *)v302 + 3) = v302 + 16;
            *((void *)v302 + 4) = 0;
            *((void *)v302 + 5) = 0;
            *((void *)v302 + 6) = 0;
            *((void *)v302 + 7) = v302 + 16;
LABEL_486:
            __int16 v338 = 257;
            uint64_t v303 = *v11;
            uint64_t v88 = **(void **)*v11 + 1888;
            if (*v11 && (*((_DWORD *)v303 + 2) & 0xFE) == 0x12)
            {
              int v305 = (uint64_t **)(**(void **)*v11 + 1888);
              int v306 = (llvm::Type *)*((unsigned int *)v303 + 8);
              if (*((_DWORD *)v303 + 2) == 19) {
                llvm::ScalableVectorType::get(v305, v306);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v305, v306);
              }
              uint64_t v88 = v307;
            }
            uint64_t v90 = v27;
            __int16 v91 = v28;
            uint64_t v92 = (uint64_t)v11;
            goto LABEL_489;
          }
        }
        NullValue = llvm::ConstantInt::get(*v11, (v13 - v15), 0);
        BOOL v300 = (*(_WORD *)(a2 + 18) & 0x3F) == 33;
        __int16 v301 = 35;
        goto LABEL_482;
      }
      return 0;
    }
  }
  uint64_t v333 = 0;
  int v29 = (unsigned __int8 *)*(a3 - 4);
  unsigned int v335 = (const char *)&v333;
  p_src = 0;
  if ((sub_1CBF528D8((uint64_t)&v335, v29) & 1) == 0)
  {
    __src = 0;
    p_src = &__src;
    int v44 = *((unsigned __int8 *)a3 + 16);
    if (v44 == 5)
    {
      if (*((_WORD *)a3 + 9) != 25) {
        return 0;
      }
      if (!sub_1CBF5270C((uint64_t)&v335, (llvm::Constant *)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)])) {
        return 0;
      }
      uint64_t v45 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
      if (!v45) {
        return 0;
      }
    }
    else
    {
      if (v44 != 53) {
        return 0;
      }
      if (!sub_1CBF5250C((uint64_t)&v335, (llvm::Constant *)*(a3 - 8))) {
        return 0;
      }
      uint64_t v45 = *(a3 - 4);
      if (!v45) {
        return 0;
      }
    }
    *p_src = v45;
    unsigned int v46 = (llvm::ConstantInt *)*a3;
    uint64_t v47 = *(unsigned int *)(a4 + 8);
    if (v47 > 0x40)
    {
      unint64_t v51 = 0;
      int v52 = 0;
      int v50 = *(unint64_t **)a4;
      do
      {
        uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v50[v51 / 8]);
        v53.i16[0] = vaddlv_u8(v53);
        v52 += v53.i32[0];
        v51 += 8;
      }
      while ((((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8) != v51);
      BOOL v49 = v52 == 1;
      int v48 = *(unint64_t **)a4;
    }
    else
    {
      int v48 = *(unint64_t **)a4;
      if (!*(void *)a4)
      {
        __int16 v54 = *(_WORD *)(a2 + 18);
        int v55 = v54 & 0x3F;
        if ((v55 - 34) < 4)
        {
          int v50 = *(unint64_t **)a4;
          int v48 = 0;
          goto LABEL_94;
        }
        BOOL v49 = 0;
LABEL_154:
        if ((v55 - 38) > 3)
        {
          if ((v54 & 0x3E) != 0x20 || !v49) {
            return 0;
          }
          unsigned int v112 = operator new(0x80uLL);
          v112[21] = v112[21] & 0x38000000 | 2;
          unint64_t v27 = (llvm::Value *)(v112 + 16);
          *(void *)unsigned int v112 = 0;
          *((void *)v112 + 1) = 0;
          *((void *)v112 + 2) = 0;
          *((void *)v112 + 3) = v112 + 16;
          *((void *)v112 + 4) = 0;
          *((void *)v112 + 5) = 0;
          *((void *)v112 + 6) = 0;
          *((void *)v112 + 7) = v112 + 16;
          uint64_t v113 = __src;
          uint64_t v114 = *(unsigned int *)(a4 + 8);
          if (v114 > 0x40)
          {
            int v124 = 0;
            int64_t v125 = (unint64_t)(v114 + 63) >> 6;
            do
            {
              BOOL v36 = v125-- < 1;
              if (v36) {
                break;
              }
              unint64_t v126 = *(void *)(*(void *)a4 + 8 * v125);
              v124 += __clz(v126);
            }
            while (!v126);
            int v127 = v114 | 0xFFFFFFC0;
            if ((v114 & 0x3F) == 0) {
              int v127 = 0;
            }
            int v115 = v124 + v127;
          }
          else
          {
            int v115 = v114 + __clz(*(void *)a4) - 64;
          }
          int v86 = llvm::ConstantInt::get(v46, (v114 + ~v115), 0);
          __int16 v338 = 257;
          uint64_t v128 = (void **)*v113;
          uint64_t v88 = **(void **)*v113 + 1888;
          if (*v113 && (v128[1] & 0xFE) == 0x12)
          {
            int v277 = (uint64_t **)(**(void **)*v113 + 1888);
            int v278 = (llvm::Type *)*((unsigned int *)v128 + 8);
            if (*((_DWORD *)v128 + 2) == 19) {
              llvm::ScalableVectorType::get(v277, v278);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v277, v278);
            }
            uint64_t v88 = v279;
          }
          uint64_t v90 = v27;
          __int16 v91 = v55;
          uint64_t v92 = (uint64_t)v113;
LABEL_314:
          uint64_t v207 = (uint64_t)v86;
LABEL_490:
          llvm::CmpInst::CmpInst(v90, v88, 53, v91, v92, v207, &v335, 0, 0);
          return (llvm::UndefValue **)v27;
        }
        int v86 = llvm::ConstantInt::get((llvm::ConstantInt *)*a3, (v47 - 1), 0);
        uint64_t v110 = *(unsigned int *)(a4 + 8);
        if (v110)
        {
          if (v110 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a4) != v110)
            {
              int v161 = 0;
              int64_t v162 = (unint64_t)(v110 + 63) >> 6;
              do
              {
                BOOL v36 = v162-- < 1;
                if (v36) {
                  break;
                }
                unint64_t v163 = *(void *)(*(void *)a4 + 8 * v162);
                v161 += __clz(v163);
              }
              while (!v163);
              int v164 = v110 | 0xFFFFFFC0;
              if ((v110 & 0x3F) == 0) {
                int v164 = 0;
              }
              if (v161 + v164 != v110) {
                return 0;
              }
              goto LABEL_240;
            }
          }
          else if (*(void *)a4 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v110)
          {
            if (*(void *)a4) {
              return 0;
            }
LABEL_240:
            if ((v55 & 0x3E) != 0x26)
            {
              if ((v55 & 0x3E) != 0x28) {
                return 0;
              }
              uint64_t v165 = operator new(0x80uLL);
              unint64_t v27 = (llvm::Value *)(v165 + 16);
              v165[21] = v165[21] & 0x38000000 | 2;
              *(void *)uint64_t v165 = 0;
              *((void *)v165 + 1) = 0;
              *((void *)v165 + 2) = 0;
              *((void *)v165 + 3) = v165 + 16;
              *((void *)v165 + 4) = 0;
              *((void *)v165 + 5) = 0;
              *((void *)v165 + 6) = 0;
              *((void *)v165 + 7) = v165 + 16;
              uint64_t v117 = __src;
              __int16 v338 = 257;
              uint64_t v118 = *(void *)__src;
              int v119 = *(_DWORD *)(*(void *)__src + 8);
              uint64_t v88 = ***(void ***)__src + 1888;
              if (*(void *)__src) {
                BOOL v166 = (*(_DWORD *)(*(void *)__src + 8) & 0xFE) == 18;
              }
              else {
                BOOL v166 = 0;
              }
              if (!v166) {
                goto LABEL_246;
              }
              goto LABEL_171;
            }
            uint64_t v205 = operator new(0x80uLL);
            unint64_t v27 = (llvm::Value *)(v205 + 16);
            v205[21] = v205[21] & 0x38000000 | 2;
            *(void *)uint64_t v205 = 0;
            *((void *)v205 + 1) = 0;
            *((void *)v205 + 2) = 0;
            *((void *)v205 + 3) = v205 + 16;
            *((void *)v205 + 4) = 0;
            *((void *)v205 + 5) = 0;
            *((void *)v205 + 6) = 0;
            *((void *)v205 + 7) = v205 + 16;
            uint64_t v117 = __src;
            __int16 v338 = 257;
            uint64_t v130 = *(void *)__src;
            int v131 = *(_DWORD *)(*(void *)__src + 8);
            uint64_t v88 = ***(void ***)__src + 1888;
            if (*(void *)__src) {
              BOOL v206 = (*(_DWORD *)(*(void *)__src + 8) & 0xFE) == 18;
            }
            else {
              BOOL v206 = 0;
            }
            if (!v206) {
              goto LABEL_312;
            }
            goto LABEL_193;
          }
        }
        if (v55 != 38)
        {
          if (v55 != 41) {
            return 0;
          }
          unint64_t v116 = operator new(0x80uLL);
          unint64_t v27 = (llvm::Value *)(v116 + 16);
          v116[21] = v116[21] & 0x38000000 | 2;
          *(void *)unint64_t v116 = 0;
          *((void *)v116 + 1) = 0;
          *((void *)v116 + 2) = 0;
          *((void *)v116 + 3) = v116 + 16;
          *((void *)v116 + 4) = 0;
          *((void *)v116 + 5) = 0;
          *((void *)v116 + 6) = 0;
          *((void *)v116 + 7) = v116 + 16;
          uint64_t v117 = __src;
          __int16 v338 = 257;
          uint64_t v118 = *(void *)__src;
          uint64_t v88 = ***(void ***)__src + 1888;
          if (!*(void *)__src) {
            goto LABEL_246;
          }
          int v119 = *(_DWORD *)(v118 + 8);
          if ((v119 & 0xFE) != 0x12) {
            goto LABEL_246;
          }
LABEL_171:
          uint64_t v120 = (uint64_t **)v88;
          uint64_t v121 = (llvm::Type *)*(unsigned int *)(v118 + 32);
          if (v119 == 19) {
            llvm::ScalableVectorType::get(v120, v121);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v120, v121);
          }
          uint64_t v88 = v122;
LABEL_246:
          uint64_t v90 = v27;
          __int16 v91 = 32;
LABEL_313:
          uint64_t v92 = (uint64_t)v117;
          goto LABEL_314;
        }
        uint64_t v129 = operator new(0x80uLL);
        unint64_t v27 = (llvm::Value *)(v129 + 16);
        v129[21] = v129[21] & 0x38000000 | 2;
        *(void *)uint64_t v129 = 0;
        *((void *)v129 + 1) = 0;
        *((void *)v129 + 2) = 0;
        *((void *)v129 + 3) = v129 + 16;
        *((void *)v129 + 4) = 0;
        *((void *)v129 + 5) = 0;
        *((void *)v129 + 6) = 0;
        *((void *)v129 + 7) = v129 + 16;
        uint64_t v117 = __src;
        __int16 v338 = 257;
        uint64_t v130 = *(void *)__src;
        uint64_t v88 = ***(void ***)__src + 1888;
        if (!*(void *)__src || (int v131 = *(_DWORD *)(v130 + 8), (v131 & 0xFE) != 0x12))
        {
LABEL_312:
          uint64_t v90 = v27;
          __int16 v91 = 33;
          goto LABEL_313;
        }
LABEL_193:
        uint64_t v132 = (uint64_t **)v88;
        BOOL v133 = (llvm::Type *)*(unsigned int *)(v130 + 32);
        if (v131 == 19) {
          llvm::ScalableVectorType::get(v132, v133);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v132, v133);
        }
        uint64_t v88 = v134;
        goto LABEL_312;
      }
      BOOL v49 = ((unint64_t)v48 & ((unint64_t)v48 - 1)) == 0;
      int v50 = *(unint64_t **)a4;
    }
    __int16 v54 = *(_WORD *)(a2 + 18);
    int v55 = v54 & 0x3F;
    if ((v55 - 34) < 4)
    {
      if (v49)
      {
LABEL_100:
        if (v47 > 0x40)
        {
          int v77 = 0;
          int64_t v78 = (unint64_t)(v47 + 63) >> 6;
          do
          {
            BOOL v36 = v78-- < 1;
            if (v36) {
              break;
            }
            unint64_t v79 = v50[v78];
            v77 += __clz(v79);
          }
          while (!v79);
          int v80 = v47 | 0xFFFFFFC0;
          if ((v47 & 0x3F) == 0) {
            int v80 = 0;
          }
          int v76 = v77 + v80;
        }
        else
        {
          int v76 = v47 + __clz((unint64_t)v48) - 64;
        }
        unint64_t v81 = (v47 + ~v76);
        if (v55 == 36) {
          __int16 v82 = 33;
        }
        else {
          __int16 v82 = v55;
        }
        if (v55 == 35) {
          __int16 v83 = 32;
        }
        else {
          __int16 v83 = v82;
        }
        if (!v76) {
          LOWORD(v55) = v83;
        }
        unsigned int v84 = operator new(0x80uLL);
        v84[21] = v84[21] & 0x38000000 | 2;
        unint64_t v27 = (llvm::Value *)(v84 + 16);
        *(void *)unsigned int v84 = 0;
        *((void *)v84 + 1) = 0;
        *((void *)v84 + 2) = 0;
        *((void *)v84 + 3) = v84 + 16;
        *((void *)v84 + 4) = 0;
        *((void *)v84 + 5) = 0;
        *((void *)v84 + 6) = 0;
        *((void *)v84 + 7) = v84 + 16;
        uint64_t v85 = (uint64_t ***)__src;
        int v86 = llvm::ConstantInt::get(v46, v81, 0);
        __int16 v338 = 257;
        uint64_t v87 = ***v85;
        uint64_t v88 = v87 + 1888;
        if (*v85) {
          BOOL v89 = ((*v85)[1] & 0xFE) == 18;
        }
        else {
          BOOL v89 = 0;
        }
        if (v89)
        {
          uint64_t v243 = (uint64_t **)(v87 + 1888);
          uint64_t v244 = (llvm::Type *)*((unsigned int *)*v85 + 8);
          if (*((_DWORD *)*v85 + 2) == 19) {
            llvm::ScalableVectorType::get(v243, v244);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v243, v244);
          }
          uint64_t v88 = v245;
        }
        uint64_t v90 = v27;
        __int16 v91 = v55;
        uint64_t v92 = (uint64_t)v85;
        goto LABEL_314;
      }
LABEL_94:
      if (v55 == 35) {
        int v75 = 34;
      }
      else {
        int v75 = v55;
      }
      if (v55 == 36) {
        int v55 = 37;
      }
      else {
        int v55 = v75;
      }
      goto LABEL_100;
    }
    goto LABEL_154;
  }
  unint64_t v31 = *(unsigned int *)(a4 + 8);
  uint64_t v32 = *((unsigned int *)v333 + 2);
  uint64_t v33 = v333;
  if (v32 >= 0x41)
  {
    int v34 = 0;
    int64_t v35 = (unint64_t)(v32 + 63) >> 6;
    do
    {
      BOOL v36 = v35-- < 1;
      if (v36) {
        break;
      }
      unint64_t v37 = *(void *)(*(void *)v333 + 8 * v35);
      v34 += __clz(v37);
    }
    while (!v37);
    int v38 = v32 | 0xFFFFFFC0;
    if ((v32 & 0x3F) == 0) {
      int v38 = 0;
    }
    if ((v32 - v34 - v38) > 0x40) {
      return 0;
    }
    uint64_t v33 = *(const llvm::APInt **)v333;
  }
  if (*(void *)v33 >= v31) {
    return 0;
  }
  int v39 = *(_WORD *)(a2 + 18) & 0x3F;
  int v332 = v39;
  uint64_t v40 = (llvm::Value *)*(a3 - 8);
  unsigned int v41 = (llvm::ConstantInt *)*a3;
  if ((*((unsigned char *)a3 + 17) & 4) == 0)
  {
    if ((*((unsigned char *)a3 + 17) & 2) == 0) {
      goto LABEL_37;
    }
    goto LABEL_377;
  }
  if (v39 == 38)
  {
    unsigned int v314 = v31;
    if (v31 > 0x40) {
      operator new[]();
    }
    __src = *(void **)a4;
    unsigned int v69 = v333;
LABEL_83:
    llvm::APInt::ashrInPlace((unsigned int *)&__src, v69);
LABEL_84:
    int v70 = operator new(0x80uLL);
    unint64_t v27 = (llvm::Value *)(v70 + 16);
    v70[21] = v70[21] & 0x38000000 | 2;
    *(void *)int v70 = 0;
    *((void *)v70 + 1) = 0;
    *((void *)v70 + 2) = 0;
    *((void *)v70 + 3) = v70 + 16;
    *((void *)v70 + 4) = 0;
    *((void *)v70 + 5) = 0;
    *((void *)v70 + 6) = 0;
    *((void *)v70 + 7) = v70 + 16;
    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)&__src, v71);
    if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)Splat);
    }
    __int16 v338 = 257;
    unsigned int v73 = *(void ***)v40;
    uint64_t v74 = ***(void ***)v40 + 1888;
    if (*(void *)v40 && (v73[1] & 0xFE) == 0x12)
    {
      uint64_t v240 = (uint64_t **)(***(void ***)v40 + 1888);
      uint64_t v241 = (llvm::Type *)*((unsigned int *)v73 + 8);
      if (*((_DWORD *)v73 + 2) == 19) {
        llvm::ScalableVectorType::get(v240, v241);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v240, v241);
      }
      uint64_t v74 = v242;
    }
    llvm::CmpInst::CmpInst(v27, v74, 53, v39, (uint64_t)v40, (uint64_t)Splat, &v335, 0, 0);
    goto LABEL_389;
  }
  if ((v39 & 0x3E) != 0x20)
  {
    if (v39 == 40)
    {
      unsigned int v329 = v31;
      if (v31 > 0x40) {
        operator new[]();
      }
      uint64_t v328 = *(unint64_t **)a4;
      llvm::APInt::operator-=((uint64_t)&v328, 1uLL);
      unsigned int v123 = v329;
      unsigned int v329 = 0;
      unsigned int v331 = v123;
      if (v123 > 0x40) {
        operator new[]();
      }
      int v330 = v328;
      llvm::APInt::ashrInPlace((unsigned int *)&v330, v333);
      llvm::APInt::operator+=((uint64_t)&v330, 1uLL);
      unsigned int v314 = v331;
      __src = v330;
      unsigned int v331 = 0;
      if (v329 >= 0x41 && v328) {
        MEMORY[0x1D25D9CB0](v328, 0x1000C8000313F17);
      }
      goto LABEL_84;
    }
    goto LABEL_372;
  }
  uint64_t v312 = (llvm::ConstantInt *)*a3;
  unsigned int v314 = v31;
  if (v31 > 0x40) {
    operator new[]();
  }
  __src = *(void **)a4;
  llvm::APInt::ashrInPlace((unsigned int *)&__src, v333);
  LODWORD(p_src) = v314;
  if (v314 > 0x40) {
    operator new[]();
  }
  unsigned int v335 = (const char *)__src;
  uint64_t v93 = *((unsigned int *)v333 + 2);
  if (v93 < 0x41)
  {
    unint64_t v94 = *(void *)v333;
    goto LABEL_126;
  }
  int v269 = 0;
  int64_t v270 = (unint64_t)(v93 + 63) >> 6;
  uint64_t v271 = *(unint64_t **)v333;
  do
  {
    BOOL v36 = v270-- < 1;
    if (v36) {
      break;
    }
    unint64_t v272 = v271[v270];
    v269 += __clz(v272);
  }
  while (!v272);
  int v273 = v93 | 0xFFFFFFC0;
  if ((v93 & 0x3F) == 0) {
    int v273 = 0;
  }
  int v95 = v314;
  if ((v93 - v269 - v273) <= 0x40)
  {
    unint64_t v94 = *v271;
LABEL_126:
    int v95 = v314;
    if (v94 <= v314) {
      int v95 = v94;
    }
  }
  uint64_t v96 = (void)__src << v95;
  if (v314 == v95) {
    uint64_t v96 = 0;
  }
  if (v314) {
    unint64_t v97 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v314;
  }
  else {
    unint64_t v97 = 0;
  }
  unsigned int v41 = v312;
  if ((v97 & v96) == *(void *)a4)
  {
    unsigned int v314 = *(_DWORD *)(a4 + 8);
    if (v314 > 0x40) {
      operator new[]();
    }
    __src = *(void **)a4;
    unsigned int v69 = v333;
    goto LABEL_83;
  }
LABEL_372:
  if (sub_1CCA4D7A8(&v332, (llvm::APInt *)a4))
  {
    uint64_t v246 = operator new(0x80uLL);
    v246[21] = v246[21] & 0x38000000 | 2;
    unint64_t v27 = (llvm::Value *)(v246 + 16);
    *(void *)uint64_t v246 = 0;
    *((void *)v246 + 1) = 0;
    *((void *)v246 + 2) = 0;
    *((void *)v246 + 3) = v246 + 16;
    *((void *)v246 + 4) = 0;
    *((void *)v246 + 5) = 0;
    *((void *)v246 + 6) = 0;
    *((void *)v246 + 7) = v246 + 16;
    __int16 v172 = v332;
    NullValue = llvm::Constant::getNullValue(v41, v247, v248);
    __int16 v338 = 257;
    uint64_t v178 = *(void *)v40;
    uint64_t v88 = ***(void ***)v40 + 1888;
    if (!*(void *)v40 || (int v179 = *(_DWORD *)(v178 + 8), (v179 & 0xFE) != 0x12))
    {
LABEL_375:
      uint64_t v90 = v27;
      __int16 v91 = v172;
      uint64_t v92 = (uint64_t)v40;
LABEL_489:
      uint64_t v207 = (uint64_t)NullValue;
      goto LABEL_490;
    }
LABEL_432:
    uint64_t v274 = (uint64_t **)v88;
    int v275 = (llvm::Type *)*(unsigned int *)(v178 + 32);
    if (v179 == 19) {
      llvm::ScalableVectorType::get(v274, v275);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v274, v275);
    }
    uint64_t v88 = v276;
    goto LABEL_375;
  }
  if ((*((unsigned char *)a3 + 17) & 2) == 0) {
    goto LABEL_37;
  }
LABEL_377:
  LOWORD(v39) = v332;
  if (v332 != 34)
  {
    if ((v332 & 0xFFFFFFFE) != 0x20)
    {
      if (v332 == 36)
      {
        unsigned int v325 = *(_DWORD *)(a4 + 8);
        if (v325 > 0x40) {
          operator new[]();
        }
        uint64_t v324 = *(unint64_t **)a4;
        llvm::APInt::operator-=((uint64_t)&v324, 1uLL);
        unsigned int v260 = v325;
        unsigned int v325 = 0;
        unsigned int v327 = v260;
        if (v260 > 0x40) {
          operator new[]();
        }
        uint64_t v326 = v324;
        llvm::APInt::lshrInPlace((llvm::APInt *)&v326, v333);
        llvm::APInt::operator+=((uint64_t)&v326, 1uLL);
        unsigned int v314 = v327;
        __src = v326;
        unsigned int v327 = 0;
        if (v325 >= 0x41 && v324) {
          MEMORY[0x1D25D9CB0](v324, 0x1000C8000313F17);
        }
        uint64_t v261 = operator new(0x80uLL);
        unint64_t v27 = (llvm::Value *)(v261 + 16);
        v261[21] = v261[21] & 0x38000000 | 2;
        *(void *)uint64_t v261 = 0;
        *((void *)v261 + 1) = 0;
        *((void *)v261 + 2) = 0;
        *((void *)v261 + 3) = v261 + 16;
        *((void *)v261 + 4) = 0;
        *((void *)v261 + 5) = 0;
        *((void *)v261 + 6) = 0;
        *((void *)v261 + 7) = v261 + 16;
        unsigned int v263 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)&__src, v262);
        if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
          unsigned int v263 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)v263);
        }
        __int16 v338 = 257;
        uint64_t v264 = *(void *)v40;
        uint64_t v265 = ***(void ***)v40 + 1888;
        if (*(void *)v40 && (*(_DWORD *)(v264 + 8) & 0xFE) == 0x12)
        {
          uint64_t v288 = (uint64_t **)(***(void ***)v40 + 1888);
          uint64_t v289 = (llvm::Type *)*(unsigned int *)(v264 + 32);
          if (*(_DWORD *)(v264 + 8) == 19) {
            llvm::ScalableVectorType::get(v288, v289);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v288, v289);
          }
          uint64_t v265 = v290;
        }
        llvm::CmpInst::CmpInst(v27, v265, 53, 36, (uint64_t)v40, (uint64_t)v263, &v335, 0, 0);
        goto LABEL_389;
      }
      goto LABEL_37;
    }
    unsigned int v314 = *(_DWORD *)(a4 + 8);
    if (v314 > 0x40) {
      operator new[]();
    }
    __src = *(void **)a4;
    llvm::APInt::lshrInPlace((llvm::APInt *)&__src, v333);
    LODWORD(p_src) = v314;
    if (v314 > 0x40) {
      operator new[]();
    }
    unsigned int v335 = (const char *)__src;
    uint64_t v255 = *((unsigned int *)v333 + 2);
    if (v255 >= 0x41)
    {
      int v280 = 0;
      int64_t v281 = (unint64_t)(v255 + 63) >> 6;
      uint64_t v282 = *(unint64_t **)v333;
      do
      {
        BOOL v36 = v281-- < 1;
        if (v36) {
          break;
        }
        unint64_t v283 = v282[v281];
        v280 += __clz(v283);
      }
      while (!v283);
      int v284 = v255 | 0xFFFFFFC0;
      if ((v255 & 0x3F) == 0) {
        int v284 = 0;
      }
      int v257 = v314;
      if ((v255 - v280 - v284) > 0x40)
      {
LABEL_402:
        uint64_t v258 = (void)__src << v257;
        if (v314 == v257) {
          uint64_t v258 = 0;
        }
        if (v314) {
          unint64_t v259 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v314;
        }
        else {
          unint64_t v259 = 0;
        }
        unsigned int v335 = (const char *)(v259 & v258);
        if ((v259 & v258) == *(void *)a4)
        {
          unsigned int v314 = *(_DWORD *)(a4 + 8);
          if (v314 > 0x40) {
            operator new[]();
          }
          __src = *(void **)a4;
          llvm::APInt::lshrInPlace((llvm::APInt *)&__src, v333);
          goto LABEL_84;
        }
LABEL_37:
        int v42 = *(_WORD *)(a2 + 18) & 0x3E;
        int v43 = a3[1];
        if (v42 == 32)
        {
          if (!v43 || v43[1])
          {
            char v323 = 0;
            goto LABEL_200;
          }
          int v98 = v333;
          if (*((_DWORD *)v333 + 2) >= 0x41u) {
            int v98 = *(const llvm::APInt **)v333;
          }
          int v99 = *(_DWORD *)v98;
          LODWORD(p_src) = v31;
          if (v31 > 0x40) {
            operator new[]();
          }
          unsigned int v335 = 0;
          if (v31 != v99)
          {
            uint64_t v30 = (const llvm::APInt *)(v31 - v99);
            if (v30 > 0x40) {
              llvm::APInt::setBitsSlowCase(&v335, 0, v30);
            }
            else {
              unsigned int v335 = (const char *)(0xFFFFFFFFFFFFFFFFLL >> (v99 - v31));
            }
          }
          int v100 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)&v335, v30);
          if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
            int v100 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)v100);
          }
          if (p_src >= 0x41 && v335) {
            MEMORY[0x1D25D9CB0](v335, 0x1000C8000313F17);
          }
          uint64_t v101 = *(void *)(a1 + 24);
          if ((*((unsigned char *)a3 + 23) & 0x10) == 0)
          {
            uint64_t v195 = 0;
            uint64_t v194 = &byte_1CFBCE98E;
            goto LABEL_297;
          }
          uint64_t v102 = ***a3;
          uint64_t v103 = *(void *)(v102 + 152);
          uint64_t v104 = *(unsigned int *)(v102 + 168);
          if (v104)
          {
            LODWORD(v105) = (v104 - 1) & ((a3 >> 4) ^ (a3 >> 9));
            unint64_t v106 = (uint64_t ****)(v103 + 16 * v105);
            uint64_t v107 = *v106;
            if (*v106 == a3)
            {
LABEL_296:
              uint64_t v193 = v106[1];
              int v196 = (void **)*v193;
              uint64_t v194 = (const char *)(v193 + 2);
              uint64_t v195 = v196;
LABEL_297:
              __int16 v338 = 773;
              unsigned int v335 = v194;
              p_src = v195;
              uint64_t v337 = ".mask";
              int v197 = sub_1CBF52474(v101, v40, (uint64_t)v100, (uint64_t)&v335);
              LODWORD(p_src) = *(_DWORD *)(a4 + 8);
              if (p_src > 0x40) {
                operator new[]();
              }
              unsigned int v335 = *(const char **)a4;
              llvm::APInt::lshrInPlace((llvm::APInt *)&v335, v333);
              uint64_t v199 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)&v335, v198);
              int v200 = v199;
              if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
                int v200 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)v199);
              }
              if (p_src >= 0x41 && v335) {
                MEMORY[0x1D25D9CB0](v335, 0x1000C8000313F17);
              }
              int v201 = operator new(0x80uLL);
              unint64_t v27 = (llvm::Value *)(v201 + 16);
              v201[21] = v201[21] & 0x38000000 | 2;
              *(void *)int v201 = 0;
              *((void *)v201 + 1) = 0;
              *((void *)v201 + 2) = 0;
              *((void *)v201 + 3) = v201 + 16;
              *((void *)v201 + 4) = 0;
              *((void *)v201 + 5) = 0;
              *((void *)v201 + 6) = 0;
              *((void *)v201 + 7) = v201 + 16;
              __int16 v202 = v332;
              __int16 v338 = 257;
              uint64_t v203 = *(void ***)v197;
              uint64_t v204 = ***(void ***)v197 + 1888;
              if (*(void *)v197 && (v203[1] & 0xFE) == 0x12)
              {
                uint64_t v285 = (uint64_t **)(***(void ***)v197 + 1888);
                uint64_t v286 = (llvm::Type *)*((unsigned int *)v203 + 8);
                if (*((_DWORD *)v203 + 2) == 19) {
                  llvm::ScalableVectorType::get(v285, v286);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v285, v286);
                }
                uint64_t v204 = v287;
              }
              llvm::CmpInst::CmpInst(v27, v204, 53, v202, (uint64_t)v197, (uint64_t)v200, &v335, 0, 0);
              return (llvm::UndefValue **)v27;
            }
            int v108 = 1;
            while (v107 != (uint64_t ***)-4096)
            {
              int v109 = v105 + v108++;
              uint64_t v105 = v109 & (v104 - 1);
              uint64_t v107 = *(uint64_t ****)(v103 + 16 * v105);
              if (v107 == a3)
              {
                unint64_t v106 = (uint64_t ****)(v103 + 16 * v105);
                goto LABEL_296;
              }
            }
          }
          unint64_t v106 = (uint64_t ****)(v103 + 16 * v104);
          goto LABEL_296;
        }
        char v323 = 0;
        if (v43 && !v43[1])
        {
          if (sub_1CC9EAA5C(v332, (llvm::APInt *)a4, &v323))
          {
            uint64_t v57 = v333;
            if (*((_DWORD *)v333 + 2) >= 0x41u) {
              uint64_t v57 = *(const llvm::APInt **)v333;
            }
            int v58 = v31 + ~*(_DWORD *)v57;
            LODWORD(p_src) = v31;
            if (v31 > 0x40) {
              operator new[]();
            }
            unsigned int v335 = (const char *)(1 << v58);
            uint64_t v59 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)&v335, v56);
            if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
              uint64_t v59 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)v59);
            }
            if (p_src >= 0x41 && v335) {
              MEMORY[0x1D25D9CB0](v335, 0x1000C8000313F17);
            }
            uint64_t v60 = *(void *)(a1 + 24);
            if ((*((unsigned char *)a3 + 23) & 0x10) == 0)
            {
              uint64_t v232 = 0;
              int v231 = &byte_1CFBCE98E;
              goto LABEL_348;
            }
            uint64_t v61 = ***a3;
            uint64_t v62 = *(void *)(v61 + 152);
            uint64_t v63 = *(unsigned int *)(v61 + 168);
            if (v63)
            {
              LODWORD(v64) = (v63 - 1) & ((a3 >> 4) ^ (a3 >> 9));
              uint64_t v65 = (uint64_t ****)(v62 + 16 * v64);
              uint64_t v66 = *v65;
              if (*v65 == a3)
              {
LABEL_347:
                uint64_t v230 = v65[1];
                uint64_t v233 = (void **)*v230;
                int v231 = (const char *)(v230 + 2);
                uint64_t v232 = v233;
LABEL_348:
                __int16 v338 = 773;
                unsigned int v335 = v231;
                p_src = v232;
                uint64_t v337 = ".mask";
                int v11 = (llvm::ConstantInt **)sub_1CBF52474(v60, v40, (uint64_t)v59, (uint64_t)&v335);
                unsigned int v234 = operator new(0x80uLL);
                unint64_t v27 = (llvm::Value *)(v234 + 16);
                v234[21] = v234[21] & 0x38000000 | 2;
                *(void *)unsigned int v234 = 0;
                *((void *)v234 + 1) = 0;
                *((void *)v234 + 2) = 0;
                *((void *)v234 + 3) = v234 + 16;
                *((void *)v234 + 4) = 0;
                *((void *)v234 + 5) = 0;
                *((void *)v234 + 6) = 0;
                *((void *)v234 + 7) = v234 + 16;
                BOOL v229 = v323 == 0;
LABEL_360:
                if (v229) {
                  __int16 v28 = 32;
                }
                else {
                  __int16 v28 = 33;
                }
                NullValue = llvm::Constant::getNullValue(v41, v227, v228);
                goto LABEL_486;
              }
              int v67 = 1;
              while (v66 != (uint64_t ***)-4096)
              {
                int v68 = v64 + v67++;
                uint64_t v64 = v68 & (v63 - 1);
                uint64_t v66 = *(uint64_t ****)(v62 + 16 * v64);
                if (v66 == a3)
                {
                  uint64_t v65 = (uint64_t ****)(v62 + 16 * v64);
                  goto LABEL_347;
                }
              }
            }
            uint64_t v65 = (uint64_t ****)(v62 + 16 * v63);
            goto LABEL_347;
          }
          int v42 = *(_WORD *)(a2 + 18) & 0x3E;
        }
        if ((v42 - 34) > 3 || (uint64_t v135 = a3[1]) == 0 || v135[1])
        {
LABEL_200:
          uint64_t v136 = v41;
          int v137 = v333;
          unint64_t v138 = (v31 - 1);
          uint64_t v139 = *((unsigned int *)v333 + 2);
          if (v139 >= 0x41)
          {
            int v140 = 0;
            int64_t v141 = (unint64_t)(v139 + 63) >> 6;
            do
            {
              BOOL v36 = v141-- < 1;
              if (v36) {
                break;
              }
              unint64_t v142 = *(void *)(*(void *)v333 + 8 * v141);
              v140 += __clz(v142);
            }
            while (!v142);
            int v143 = v139 | 0xFFFFFFC0;
            if ((v139 & 0x3F) == 0) {
              int v143 = 0;
            }
            if ((v139 - v140 - v143) > 0x40)
            {
LABEL_210:
              int v145 = a3[1];
              if (v145)
              {
                if (!v145[1] && v138 != 0)
                {
                  unsigned int v147 = *(_DWORD *)(a4 + 8);
                  if (v147 > 0x40)
                  {
                    unsigned int v149 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4);
                  }
                  else
                  {
                    unsigned int v148 = __clz(__rbit64(*(void *)a4));
                    unsigned int v149 = v147 >= v148 ? v148 : *(_DWORD *)(a4 + 8);
                  }
                  if (v149 >= v138)
                  {
                    uint64_t v150 = *(void *)(a1 + 80);
                    unint64_t v151 = (llvm::LLVMContext *)(v31 - v138);
                    uint64_t v152 = *(void *)(v150 + 32);
                    BOOL v153 = *(char **)(v150 + 40);
                    int v154 = &v153[v152];
                    if (v151 <= 0xFF)
                    {
                      int64_t v155 = (char *)memchr(*(void **)(v150 + 32), (char)(v31 - v138), *(void *)(v150 + 40));
                      unint64_t v151 = (llvm::LLVMContext *)(v31 - v138);
                      if (v155) {
                        int v154 = v155;
                      }
                    }
                    if (&v154[-v152] != v153)
                    {
                      unsigned int v156 = v151;
                      uint64_t v157 = (uint64_t **)llvm::IntegerType::get(**(llvm::IntegerType ***)a2, v151);
                      uint64_t v158 = (uint64_t)v157;
                      if ((*((_DWORD *)v136 + 2) & 0xFE) == 0x12 && v136)
                      {
                        uint64_t v159 = (llvm::Type *)*((unsigned int *)v136 + 8);
                        if (*((_DWORD *)v136 + 2) == 19) {
                          llvm::ScalableVectorType::get(v157, v159);
                        }
                        else {
                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v157, v159);
                        }
                        uint64_t v158 = v160;
                      }
                      unsigned int v314 = *(_DWORD *)(a4 + 8);
                      if (v314 > 0x40) {
                        operator new[]();
                      }
                      __src = *(void **)a4;
                      llvm::APInt::ashrInPlace((unsigned int *)&__src, v333);
                      if (v156 > 0x40)
                      {
                        if (v314 != v156) {
                          operator new[]();
                        }
                        sub_1CD0463BC((uint64_t)&v335, (uint64_t)&__src);
                      }
                      else
                      {
                        if (v314 >= 0x41) {
                          uint64_t v168 = (uint64_t *)__src;
                        }
                        else {
                          uint64_t v168 = (uint64_t *)&__src;
                        }
                        uint64_t v169 = *v168;
                        LODWORD(p_src) = v156;
                        unint64_t v170 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v156;
                        if (v31 == v138) {
                          unint64_t v170 = 0;
                        }
                        unsigned int v335 = (const char *)(v170 & v169);
                      }
                      NullValue = llvm::ConstantInt::get(*(llvm::ConstantInt **)v158, (llvm::LLVMContext *)&v335, v167);
                      if ((*(_DWORD *)(v158 + 8) & 0xFE) == 0x12) {
                        NullValue = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v158 + 32) | ((unint64_t)(*(_DWORD *)(v158 + 8) == 19) << 32)), (uint64_t)NullValue);
                      }
                      if (p_src >= 0x41 && v335) {
                        MEMORY[0x1D25D9CB0](v335, 0x1000C8000313F17);
                      }
                      if (v314 >= 0x41 && __src) {
                        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                      }
                      uint64_t v171 = operator new(0x80uLL);
                      unint64_t v27 = (llvm::Value *)(v171 + 16);
                      v171[21] = v171[21] & 0x38000000 | 2;
                      *(void *)uint64_t v171 = 0;
                      *((void *)v171 + 1) = 0;
                      *((void *)v171 + 2) = 0;
                      *((void *)v171 + 3) = v171 + 16;
                      *((void *)v171 + 4) = 0;
                      *((void *)v171 + 5) = 0;
                      *((void *)v171 + 6) = 0;
                      *((void *)v171 + 7) = v171 + 16;
                      __int16 v172 = v332;
                      char v173 = *(uint64_t **)(a1 + 24);
                      __int16 v315 = 257;
                      if (*(void *)v40 != v158)
                      {
                        if (*((unsigned __int8 *)v40 + 16) <= 0x14u)
                        {
                          uint64_t v40 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v173[9] + 224))(v173[9], 38, v40, v158);
                          if (v40) {
                            BOOL v177 = *((unsigned __int8 *)v40 + 16) >= 0x1Cu;
                          }
                          else {
                            BOOL v177 = 0;
                          }
                          if (v177)
                          {
                            (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(void *)v173[10] + 16))(v173[10], v40, &__src, v173[6], v173[7]);
                            uint64_t v308 = *((unsigned int *)v173 + 2);
                            if (v308)
                            {
                              uint64_t v309 = *v173;
                              uint64_t v310 = v309 + 16 * v308;
                              do
                              {
                                llvm::Instruction::setMetadata(v40, *(_DWORD *)v309, *(llvm::MDNode **)(v309 + 8));
                                v309 += 16;
                              }
                              while (v309 != v310);
                            }
                          }
                        }
                        else
                        {
                          __int16 v338 = 257;
                          uint64_t v40 = llvm::CastInst::Create(38, (uint64_t)v40, v158, &v335, 0);
                          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(void *)v173[10] + 16))(v173[10], v40, &__src, v173[6], v173[7]);
                          uint64_t v174 = *((unsigned int *)v173 + 2);
                          if (v174)
                          {
                            uint64_t v175 = *v173;
                            uint64_t v176 = v175 + 16 * v174;
                            do
                            {
                              llvm::Instruction::setMetadata(v40, *(_DWORD *)v175, *(llvm::MDNode **)(v175 + 8));
                              v175 += 16;
                            }
                            while (v175 != v176);
                          }
                        }
                      }
                      __int16 v338 = 257;
                      uint64_t v178 = *(void *)v40;
                      int v179 = *(_DWORD *)(*(void *)v40 + 8);
                      uint64_t v88 = ***(void ***)v40 + 1888;
                      if (*(void *)v40) {
                        BOOL v180 = (*(_DWORD *)(*(void *)v40 + 8) & 0xFE) == 18;
                      }
                      else {
                        BOOL v180 = 0;
                      }
                      if (!v180) {
                        goto LABEL_375;
                      }
                      goto LABEL_432;
                    }
                  }
                }
              }
              return 0;
            }
            int v137 = *(const llvm::APInt **)v333;
          }
          unint64_t v144 = *(void *)v137;
          if (v144 <= v138) {
            LODWORD(v138) = v144;
          }
          goto LABEL_210;
        }
        unsigned int v322 = *(_DWORD *)(a4 + 8);
        if (v322 > 0x40) {
          operator new[]();
        }
        BOOL v321 = *(unint64_t **)a4;
        llvm::APInt::operator+=((uint64_t)&v321, 1uLL);
        uint64_t v182 = v322;
        unsigned int v322 = 0;
        if (v182 > 0x40)
        {
          unint64_t v185 = 0;
          int v186 = 0;
          unint64_t v187 = ((unint64_t)(v182 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            uint8x8_t v188 = (uint8x8_t)vcnt_s8((int8x8_t)v321[v185 / 8]);
            v188.i16[0] = vaddlv_u8(v188);
            v186 += v188.i32[0];
            v185 += 8;
          }
          while (v187 != v185);
          if (v186 == 1)
          {
            int v184 = v332;
            if (v321)
            {
              MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              if (v322 >= 0x41)
              {
                if (v321) {
                  MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
                }
              }
            }
LABEL_289:
            if (v184 == 37 || v184 == 34)
            {
              uint64_t v189 = *(void *)(a1 + 24);
              unsigned int v190 = *(_DWORD *)(a4 + 8);
              unsigned int v320 = v190;
              if (v190 > 0x40) {
                operator new[]();
              }
              unint64_t v191 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v190;
              if (!v190) {
                unint64_t v191 = 0;
              }
              unint64_t v192 = v191 & ~*(void *)a4;
              uint64_t v235 = v333;
              if (*((_DWORD *)v333 + 2) >= 0x41u) {
                uint64_t v235 = *(const llvm::APInt **)v333;
              }
              uint64_t v236 = *(void *)v235;
              unsigned int v314 = v190;
              if (v190 == v236) {
                __src = 0;
              }
              else {
                __src = (void *)(v192 >> v236);
              }
              __int16 v338 = 257;
              uint64_t v237 = *(void *)v40;
              int v238 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v40, (llvm::LLVMContext *)&__src, v181);
              if ((*(_DWORD *)(v237 + 8) & 0xFE) == 0x12) {
                int v238 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v237 + 32) | ((unint64_t)(*(_DWORD *)(v237 + 8) == 19) << 32)), (uint64_t)v238);
              }
              int v11 = (llvm::ConstantInt **)sub_1CBF52474(v189, v40, (uint64_t)v238, (uint64_t)&v335);
              if (v314 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              uint64_t v239 = operator new(0x80uLL);
              v239[21] = v239[21] & 0x38000000 | 2;
              unint64_t v27 = (llvm::Value *)(v239 + 16);
              *(void *)uint64_t v239 = 0;
              *((void *)v239 + 1) = 0;
              *((void *)v239 + 2) = 0;
              *((void *)v239 + 3) = v239 + 16;
              *((void *)v239 + 4) = 0;
              *((void *)v239 + 5) = 0;
              *((void *)v239 + 6) = 0;
              *((void *)v239 + 7) = v239 + 16;
              BOOL v229 = v184 == 37;
              goto LABEL_360;
            }
            goto LABEL_319;
          }
          if (v321)
          {
            MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
            if (v322 >= 0x41)
            {
              if (v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
            }
          }
        }
        else
        {
          uint8x8_t v183 = (uint8x8_t)vcnt_s8((int8x8_t)v321);
          v183.i16[0] = vaddlv_u8(v183);
          if (v183.u32[0] == 1)
          {
            int v184 = v332;
            goto LABEL_289;
          }
        }
LABEL_319:
        uint64_t v208 = *(unsigned int *)(a4 + 8);
        if (v208 > 0x40)
        {
          int v213 = 0;
          unint64_t v214 = (unint64_t)(v208 + 63) >> 6;
          int v215 = *(unint64_t **)a4;
          do
          {
            int8x8_t v216 = (int8x8_t)*v215++;
            uint8x8_t v217 = (uint8x8_t)vcnt_s8(v216);
            v217.i16[0] = vaddlv_u8(v217);
            v213 += v217.i32[0];
            --v214;
          }
          while (v214);
          if (v213 == 1 && (v332 - 35) <= 1)
          {
            unsigned int v317 = *(_DWORD *)(a4 + 8);
            operator new[]();
          }
        }
        else
        {
          int v209 = *(unint64_t **)a4;
          uint8x8_t v210 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a4);
          v210.i16[0] = vaddlv_u8(v210);
          if (v210.u32[0] == 1)
          {
            int v211 = v332;
            if ((v332 - 35) < 2)
            {
              uint64_t v212 = *(void *)(a1 + 24);
              unsigned int v317 = *(_DWORD *)(a4 + 8);
              uint64_t v316 = v209;
              llvm::APInt::operator-=((uint64_t)&v316, 1uLL);
              unsigned int v219 = v317;
              unsigned int v319 = v317;
              uint64_t v318 = v316;
              unsigned int v317 = 0;
              if (v319 > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v318);
                unsigned int v219 = v319;
                unint64_t v221 = (unint64_t)v318;
              }
              else
              {
                unint64_t v220 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v219;
                if (!v219) {
                  unint64_t v220 = 0;
                }
                unint64_t v221 = v220 & ~(unint64_t)v316;
              }
              unsigned int v222 = v333;
              if (*((_DWORD *)v333 + 2) >= 0x41u) {
                unsigned int v222 = *(const llvm::APInt **)v333;
              }
              uint64_t v223 = *(void *)v222;
              unsigned int v314 = v219;
              if (v219 > 0x40) {
                operator new[]();
              }
              if (v219 == v223) {
                __src = 0;
              }
              else {
                __src = (void *)(v221 >> v223);
              }
              __int16 v338 = 257;
              uint64_t v224 = *(llvm::ConstantInt ***)v40;
              uint64_t v225 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v40, (llvm::LLVMContext *)&__src, v218);
              if ((v224[1] & 0xFE) == 0x12) {
                uint64_t v225 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v224 + 8) | ((unint64_t)(*((_DWORD *)v224 + 2) == 19) << 32)), (uint64_t)v225);
              }
              int v11 = (llvm::ConstantInt **)sub_1CBF52474(v212, v40, (uint64_t)v225, (uint64_t)&v335);
              if (v314 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (v317 >= 0x41 && v316) {
                MEMORY[0x1D25D9CB0](v316, 0x1000C8000313F17);
              }
              uint64_t v226 = operator new(0x80uLL);
              v226[21] = v226[21] & 0x38000000 | 2;
              unint64_t v27 = (llvm::Value *)(v226 + 16);
              *(void *)uint64_t v226 = 0;
              *((void *)v226 + 1) = 0;
              *((void *)v226 + 2) = 0;
              *((void *)v226 + 3) = v226 + 16;
              *((void *)v226 + 4) = 0;
              *((void *)v226 + 5) = 0;
              *((void *)v226 + 6) = 0;
              *((void *)v226 + 7) = v226 + 16;
              BOOL v229 = v211 == 36;
              goto LABEL_360;
            }
          }
        }
        goto LABEL_200;
      }
      unint64_t v256 = *v282;
    }
    else
    {
      unint64_t v256 = *(void *)v333;
    }
    int v257 = v314;
    if (v256 <= v314) {
      int v257 = v256;
    }
    goto LABEL_402;
  }
  unsigned int v314 = *(_DWORD *)(a4 + 8);
  if (v314 > 0x40) {
    operator new[]();
  }
  __src = *(void **)a4;
  llvm::APInt::lshrInPlace((llvm::APInt *)&__src, v333);
  uint64_t v249 = operator new(0x80uLL);
  unint64_t v27 = (llvm::Value *)(v249 + 16);
  v249[21] = v249[21] & 0x38000000 | 2;
  *(void *)uint64_t v249 = 0;
  *((void *)v249 + 1) = 0;
  *((void *)v249 + 2) = 0;
  *((void *)v249 + 3) = v249 + 16;
  *((void *)v249 + 4) = 0;
  *((void *)v249 + 5) = 0;
  *((void *)v249 + 6) = 0;
  *((void *)v249 + 7) = v249 + 16;
  uint64_t v251 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v41, (llvm::LLVMContext *)&__src, v250);
  unsigned int v252 = v251;
  if ((*((_DWORD *)v41 + 2) & 0xFE) == 0x12) {
    unsigned int v252 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)v251);
  }
  __int16 v338 = 257;
  uint64_t v253 = *(llvm::ConstantInt ***)v40;
  uint64_t v254 = ***(void ***)v40 + 1888;
  if (*(void *)v40 && (v253[1] & 0xFE) == 0x12)
  {
    uint64_t v266 = (uint64_t **)(***(void ***)v40 + 1888);
    int v267 = (llvm::Type *)*((unsigned int *)v253 + 8);
    if (*((_DWORD *)v253 + 2) == 19) {
      llvm::ScalableVectorType::get(v266, v267);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v266, v267);
    }
    uint64_t v254 = v268;
  }
  llvm::CmpInst::CmpInst(v27, v254, 53, 34, (uint64_t)v40, (uint64_t)v252, &v335, 0, 0);
LABEL_389:
  if (v314 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return (llvm::UndefValue **)v27;
}

BOOL sub_1CCA50068(uint64_t a1, llvm::APInt *this, llvm::APInt *a3, int a4)
{
  BOOL v8 = 0;
  if (a4) {
    llvm::APInt::sadd_ov(this, a3, &v8, (uint64_t)&v6);
  }
  else {
    llvm::APInt::uadd_ov((uint64_t)this, a3, &v8, (uint64_t)&v6);
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
    MEMORY[0x1D25D9CB0](*(void *)a1, 0x1000C8000313F17);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  return v8;
}

BOOL sub_1CCA500F4(uint64_t a1, llvm::APInt *this, llvm::APInt *a3, int a4)
{
  BOOL v8 = 0;
  if (a4) {
    llvm::APInt::ssub_ov(this, a3, &v8, (uint64_t)&v6);
  }
  else {
    llvm::APInt::usub_ov((uint64_t)this, a3, &v8, (uint64_t)&v6);
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
    MEMORY[0x1D25D9CB0](*(void *)a1, 0x1000C8000313F17);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  return v8;
}

uint64_t sub_1CCA50180@<X0>(llvm::Constant *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v3 = this;
  uint64_t v4 = result;
  uint64_t v6 = *(void *)this;
  unsigned int v7 = result - 38;
  char v8 = (result - 38) < 4;
  uint64_t v9 = (int)result - 32;
  BOOL v10 = result == 37 || v9 == 9;
  int v12 = v10 || (v9 & 0xFFFFFFFB) == 2;
  if (*((unsigned char *)this + 16) == 16)
  {
    int v13 = dword_1CFB278C8[v9];
    if (v13 == 37 || v13 == 34)
    {
      BOOL result = sub_1CC0F1DDC((uint64_t)this, v7 < 4);
      if ((result & 1) == 0) {
        goto LABEL_14;
      }
LABEL_52:
      char v17 = 0;
      *(unsigned char *)a3 = 0;
      goto LABEL_21;
    }
    BOOL result = (uint64_t)this + 24;
    uint64_t v20 = *((unsigned int *)this + 8);
    if (v7 > 3)
    {
      if (v20 > 0x40)
      {
        int v21 = 0;
        int64_t v22 = (unint64_t)(v20 + 63) >> 6;
        do
        {
          if (v22-- < 1) {
            break;
          }
          unint64_t v24 = *(void *)(*(void *)result + 8 * v22);
          v21 += __clz(v24);
        }
        while (!v24);
        int v25 = v20 | 0xFFFFFFC0;
        if ((v20 & 0x3F) == 0) {
          int v25 = 0;
        }
        if (v21 + v25 == v20) {
          goto LABEL_52;
        }
      }
      else if (!*(void *)result)
      {
        goto LABEL_52;
      }
    }
    else if (v20 > 0x40)
    {
      int v31 = v20 - 1;
      if ((*(void *)(*(void *)result + 8 * ((v20 - 1) >> 6)) >> (v20 - 1)))
      {
        BOOL result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
        if (result == v31) {
          goto LABEL_52;
        }
      }
    }
    else if (*(void *)result == 1 << (v20 - 1))
    {
      goto LABEL_52;
    }
  }
  else
  {
    if (*(unsigned char *)(v6 + 8) != 18 || v6 == 0) {
      goto LABEL_52;
    }
    int v27 = *(_DWORD *)(v6 + 32);
    if (v27)
    {
      __int16 v28 = 0;
      unsigned int v14 = 0;
      while (1)
      {
        BOOL result = (uint64_t)llvm::Constant::getAggregateElement(v3, v28);
        if (!result) {
          goto LABEL_52;
        }
        uint64_t v29 = result;
        int v30 = *(unsigned __int8 *)(result + 16);
        if ((v30 - 11) >= 2)
        {
          if (v30 != 16) {
            goto LABEL_52;
          }
          BOOL result = sub_1CCA6A5B4(v12, v8, result);
          if ((result & 1) == 0) {
            goto LABEL_52;
          }
          if (!v14) {
            unsigned int v14 = (llvm::Constant *)v29;
          }
        }
        __int16 v28 = (llvm::Type *)(v28 + 1);
        if (v27 == v28) {
          goto LABEL_15;
        }
      }
    }
  }
LABEL_14:
  unsigned int v14 = 0;
LABEL_15:
  if (llvm::Constant::containsUndefOrPoisonElement(v3)) {
    unint64_t v3 = llvm::Constant::replaceUndefsWith(v3, v14, v15);
  }
  unsigned int FlippedStrictnessPredicate = llvm::CmpInst::getFlippedStrictnessPredicate(v4);
  BOOL v10 = v12 == 0;
  char v17 = 1;
  if (v10) {
    unint64_t v18 = -1;
  }
  else {
    unint64_t v18 = 1;
  }
  unsigned int v19 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v6, v18, (const llvm::APInt *)1);
  BOOL result = (uint64_t)llvm::ConstantExpr::getAdd(v3, v19, 0, 0);
  *(void *)a3 = FlippedStrictnessPredicate;
  *(void *)(a3 + 8) = result;
LABEL_21:
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t sub_1CCA503CC(void *a1, uint64_t ***a2)
{
  uint64_t v1868 = *MEMORY[0x1E4F143B8];
  v1818 = 0;
  uint64_t v4 = (unsigned __int8 *)*(a2 - 4);
  unint64_t p_s2 = (unint64_t)&v1818;
  v1854 = 0;
  unint64_t v8 = 0;
  if (!sub_1CBF528D8((uint64_t)&p_s2, v4)) {
    return v8;
  }
  uint64_t v9 = (llvm::ConstantInt ***)*(a2 - 8);
  unsigned int v10 = *((unsigned __int8 *)v9 + 16);
  if (v9) {
    BOOL v11 = v10 >= 0x1C;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11 || v10 - 59 < 0xFFFFFFEE)
  {
LABEL_1492:
    if (v10 != 85)
    {
LABEL_1545:
      if (v10 != 66) {
        goto LABEL_1565;
      }
      v961 = v1818;
      __int16 v962 = *((_WORD *)a2 + 9);
      uint64_t v963 = (uint64_t)*(v9 - 4);
      uint64_t v964 = *((unsigned int *)v1818 + 2);
      if (v964 > 0x40)
      {
        int v1366 = 0;
        int64_t v1367 = (unint64_t)(v964 + 63) >> 6;
        do
        {
          BOOL v109 = v1367-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1368 = *(void *)(*(void *)v1818 + 8 * v1367);
          v1366 += __clz(v1368);
        }
        while (!v1368);
        int v1369 = v964 | 0xFFFFFFC0;
        if ((v964 & 0x3F) == 0) {
          int v1369 = 0;
        }
        BOOL v965 = v1366 + v1369 == v964 - 1;
      }
      else
      {
        BOOL v965 = *(void *)v1818 == 1;
      }
      int v966 = v965;
      int v967 = v962 & 0x3F;
      if (v964 < 2 || !v966 || v967 != 40) {
        goto LABEL_1554;
      }
      v1093 = *(llvm::Type **)v963;
      if ((*(_DWORD *)(*(void *)v963 + 8) & 0xFE) == 0x12) {
        v1093 = (llvm::Type *)**((void **)v1093 + 2);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v1093);
      if (!PrimitiveSizeInBits)
      {
LABEL_1554:
        v968 = (llvm::Type *)*v9;
        if (((*v9)[1] & 0xFE) == 0x12) {
          v968 = (llvm::Type *)**((void **)v968 + 2);
        }
        unsigned int v969 = llvm::Type::getPrimitiveSizeInBits(v968);
        v970 = *(llvm::Type **)v963;
        if ((*(_DWORD *)(*(void *)v963 + 8) & 0xFE) == 0x12) {
          v970 = (llvm::Type *)**((void **)v970 + 2);
        }
        unsigned int v971 = llvm::Type::getPrimitiveSizeInBits(v970);
        if ((v962 & 0x3E) != 0x20 || (v972 = v9[1]) == 0 || v972[1])
        {
LABEL_1561:
          v1849 = 0;
          uint64_t v1859 = 0;
          LOBYTE(__s1) = 0;
          if (!sub_1CC9EAA5C(v967, v961, &__s1)) {
            goto LABEL_1562;
          }
          unint64_t p_s2 = (unint64_t)&v1849;
          v1854 = (llvm::APInt **)&v1859;
          uint64_t v1855 = 0;
          if (!sub_1CCA79B6C((void **)&p_s2, v963)) {
            goto LABEL_1562;
          }
          v993 = (void *)v1859;
          if (*(_DWORD *)(v1859 + 8) >= 0x41u) {
            v993 = *(void **)v1859;
          }
          if (v971 - *v993 == v969)
          {
            int v994 = __s1;
            v995 = operator new(0x80uLL);
            v995[21] = v995[21] & 0x38000000 | 2;
            unint64_t v8 = (unint64_t)(v995 + 16);
            *(void *)v995 = 0;
            *((void *)v995 + 1) = 0;
            *((void *)v995 + 2) = 0;
            *((void *)v995 + 3) = v995 + 16;
            *((void *)v995 + 4) = 0;
            *((void *)v995 + 5) = 0;
            *((void *)v995 + 6) = 0;
            *((void *)v995 + 7) = v995 + 16;
            v998 = v1849;
            v999 = *(llvm::Constant **)v963;
            if (v994)
            {
              NullValue = llvm::Constant::getNullValue(v999, v996, v997);
              WORD4(v1856) = 257;
              v1644 = (void **)*v998;
              uint64_t v1645 = **(void **)*v998 + 1888;
              if (*v998 && (v1644[1] & 0xFE) == 0x12)
              {
                v1728 = (uint64_t **)(**(void **)*v998 + 1888);
                v1729 = (llvm::Type *)*((unsigned int *)v1644 + 8);
                if (*((_DWORD *)v1644 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1728, v1729);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1728, v1729);
                }
                uint64_t v1645 = v1730;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v1645, 53, 40, (uint64_t)v998, (uint64_t)NullValue, (const char **)&p_s2, 0, 0);
            }
            else
            {
              AllOnesValue = llvm::Constant::getAllOnesValue(v999, v996, v997);
              __int16 v1865 = 257;
              uint64_t v1001 = *v998;
              uint64_t v1002 = **(void **)*v998 + 1888;
              if (*v998 && (*(_DWORD *)(v1001 + 8) & 0xFE) == 0x12)
              {
                v1297 = (uint64_t **)(**(void **)*v998 + 1888);
                v1298 = (llvm::Type *)*(unsigned int *)(v1001 + 32);
                if (*(_DWORD *)(v1001 + 8) == 19) {
                  llvm::ScalableVectorType::get(v1297, v1298);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1297, v1298);
                }
                uint64_t v1002 = v1299;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v1002, 53, 38, (uint64_t)v998, (uint64_t)AllOnesValue, (const char **)&v1861, 0, 0);
            }
          }
          else
          {
LABEL_1562:
            unint64_t v8 = 0;
          }
LABEL_1563:
          if (v8) {
            return v8;
          }
          uint64_t v9 = (llvm::ConstantInt ***)*(a2 - 8);
          unsigned int v10 = *((unsigned __int8 *)v9 + 16);
LABEL_1565:
          if (v10 != 84) {
            return 0;
          }
          uint64_t v973 = (uint64_t)*(v9 - 4);
          if (!v973
            || *(unsigned char *)(v973 + 16)
            || *(llvm::ConstantInt ***)(v973 + 24) != v9[9]
            || (*(unsigned char *)(v973 + 33) & 0x20) == 0)
          {
            return 0;
          }
          v975 = v1818;
          __int16 v976 = *((_WORD *)a2 + 9);
          v977 = *v9;
          unint64_t v978 = *((unsigned int *)v1818 + 2);
          int v979 = v976 & 0x3F;
          int v980 = *(_DWORD *)(v973 + 36);
          if ((v976 & 0x3E) == 0x20)
          {
            if (v980 > 52)
            {
              if (v980 <= 147)
              {
                if (v980 != 53)
                {
                  if (v980 == 54)
                  {
LABEL_1787:
                    if (v978 >= 0x41)
                    {
                      int v1703 = 0;
                      int64_t v1704 = (v978 + 63) >> 6;
                      v1705 = *(unint64_t **)v1818;
                      do
                      {
                        BOOL v109 = v1704-- < 1;
                        if (v109) {
                          break;
                        }
                        unint64_t v1706 = v1705[v1704];
                        v1703 += __clz(v1706);
                      }
                      while (!v1706);
                      int v1707 = v978 | 0xFFFFFFC0;
                      if ((v978 & 0x3F) == 0) {
                        int v1707 = 0;
                      }
                      if ((v978 - (v1707 + v1703)) >= 0x41) {
                        return 0;
                      }
                      v1102 = (unint64_t *)*v1705;
                    }
                    else
                    {
                      v1102 = *(unint64_t **)v1818;
                    }
                    if (v1102 == (unint64_t *)v978)
                    {
                      v1103 = operator new(0x80uLL);
                      unint64_t v8 = (unint64_t)(v1103 + 16);
                      v1103[21] = v1103[21] & 0x38000000 | 2;
                      *(void *)v1103 = 0;
                      *((void *)v1103 + 1) = 0;
                      *((void *)v1103 + 2) = 0;
                      *((void *)v1103 + 3) = v1103 + 16;
                      *((void *)v1103 + 4) = 0;
                      *((void *)v1103 + 5) = 0;
                      *((void *)v1103 + 6) = 0;
                      *((void *)v1103 + 7) = v1103 + 16;
                      uint64_t v478 = (llvm::Instruction *)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                      v1054 = (llvm::Constant *)v977;
LABEL_1695:
                      v1055 = (int32x2_t ****)llvm::Constant::getNullValue(v1054, v1052, v1053);
                      goto LABEL_1696;
                    }
                    if ((unint64_t)v1102 > v978 || v978 == v1102) {
                      return 0;
                    }
                    v1709 = v9[1];
                    if (!v1709 || v1709[1]) {
                      return 0;
                    }
                    v1850[0] = *((_DWORD *)v1818 + 2);
                    if (v978 >= 0x41) {
                      operator new[]();
                    }
                    v1849 = 0;
                    if (v980 == 54)
                    {
                      unsigned int v1710 = v1102 + 1;
                      if (v1102 != -1)
                      {
                        if (v1710 <= 0x40)
                        {
                          v1849 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v1102);
                          LODWORD(v1867) = v978;
LABEL_3038:
                          v1750 = (uint64_t *)(1 << (char)v1102);
                          goto LABEL_3039;
                        }
                        llvm::APInt::setBitsSlowCase(&v1849, 0, v1710);
                      }
                      LODWORD(v1867) = v978;
                      goto LABEL_3038;
                    }
                    unsigned int v1731 = v978 + ~v1102;
                    if (v1102 != -1)
                    {
                      if (v1731 <= 0x3F)
                      {
                        v1849 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v1102 << v1731);
                        LODWORD(v1867) = v978;
LABEL_3017:
                        v1750 = (uint64_t *)(1 << v1731);
LABEL_3039:
                        v1866 = v1750;
                        v1757 = operator new(0x80uLL);
                        unint64_t v8 = (unint64_t)(v1757 + 16);
                        v1757[21] = v1757[21] & 0x38000000 | 2;
                        *(void *)v1757 = 0;
                        *((void *)v1757 + 1) = 0;
                        *((void *)v1757 + 2) = 0;
                        *((void *)v1757 + 3) = v1757 + 16;
                        *((void *)v1757 + 4) = 0;
                        *((void *)v1757 + 5) = 0;
                        *((void *)v1757 + 6) = 0;
                        *((void *)v1757 + 7) = v1757 + 16;
                        uint64_t v1758 = a1[3];
                        v1759 = (llvm::ConstantInt ***)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                        WORD4(v1856) = 257;
                        v1760 = *v1759;
                        Splat = llvm::ConstantInt::get(**v1759, (llvm::LLVMContext *)&v1849, v1761);
                        if ((v1760[1] & 0xFE) == 0x12) {
                          Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1760 + 8) | ((unint64_t)(*((_DWORD *)v1760 + 2) == 19) << 32)), (uint64_t)Splat);
                        }
                        v1763 = sub_1CBF52474(v1758, v1759, (uint64_t)Splat, (uint64_t)&p_s2);
                        v1765 = llvm::ConstantInt::get(*v977, (llvm::LLVMContext *)&v1866, v1764);
                        if ((v977[1] & 0xFE) == 0x12) {
                          v1765 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v977 + 8) | ((unint64_t)(*((_DWORD *)v977 + 2) == 19) << 32)), (uint64_t)v1765);
                        }
                        __int16 v1865 = 257;
                        uint64_t v1766 = ***(void ***)v1763;
                        uint64_t v1767 = v1766 + 1888;
                        if (*(void *)v1763) {
                          BOOL v1768 = (*(_DWORD *)(*(void *)v1763 + 8) & 0xFE) == 18;
                        }
                        else {
                          BOOL v1768 = 0;
                        }
                        if (v1768)
                        {
                          v1772 = (uint64_t **)(v1766 + 1888);
                          v1773 = (llvm::Type *)*(unsigned int *)(*(void *)v1763 + 32);
                          if (*(_DWORD *)(*(void *)v1763 + 8) == 19) {
                            llvm::ScalableVectorType::get(v1772, v1773);
                          }
                          else {
                            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1772, v1773);
                          }
                          uint64_t v1767 = v1774;
                        }
                        llvm::CmpInst::CmpInst((llvm::Value *)v8, v1767, 53, v979, (uint64_t)v1763, (uint64_t)v1765, (const char **)&v1861, 0, 0);
                        if (v1867 >= 0x41 && v1866) {
                          MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
                        }
                        goto LABEL_2865;
                      }
                      llvm::APInt::setBitsSlowCase(&v1849, v978 + ~v1102, v978);
                    }
                    LODWORD(v1867) = v978;
                    goto LABEL_3017;
                  }
                  return 0;
                }
                if (v978 > 0x40)
                {
                  int v1561 = 0;
                  int64_t v1562 = (v978 + 63) >> 6;
                  v1563 = *(unint64_t **)v1818;
                  do
                  {
                    BOOL v109 = v1562-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1564 = v1563[v1562];
                    v1561 += __clz(v1564);
                  }
                  while (!v1564);
                  int v1565 = v978 | 0xFFFFFFC0;
                  if ((v978 & 0x3F) == 0) {
                    int v1565 = 0;
                  }
                  unsigned int v1566 = v978 - (v1561 + v1565);
                  if (!v1566) {
                    goto LABEL_1693;
                  }
                  if (v1566 > 0x40) {
                    return 0;
                  }
                  v1049 = (unint64_t *)*v1563;
                }
                else
                {
                  v1049 = *(unint64_t **)v1818;
                  if (!*(void *)v1818)
                  {
LABEL_1693:
                    int v1050 = 1;
                    goto LABEL_1694;
                  }
                }
                if (v1049 != (unint64_t *)v978) {
                  return 0;
                }
                int v1050 = 0;
LABEL_1694:
                v1051 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v1051 + 16);
                v1051[21] = v1051[21] & 0x38000000 | 2;
                *(void *)v1051 = 0;
                *((void *)v1051 + 1) = 0;
                *((void *)v1051 + 2) = 0;
                *((void *)v1051 + 3) = v1051 + 16;
                *((void *)v1051 + 4) = 0;
                *((void *)v1051 + 5) = 0;
                *((void *)v1051 + 6) = 0;
                *((void *)v1051 + 7) = v1051 + 16;
                uint64_t v478 = (llvm::Instruction *)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                v1054 = (llvm::Constant *)v977;
                if (!v1050)
                {
                  v1055 = (int32x2_t ****)llvm::Constant::getAllOnesValue((llvm::Constant *)v977, v1052, v1053);
                  goto LABEL_1696;
                }
                goto LABEL_1695;
              }
              if ((v980 - 148) >= 2)
              {
                if (v980 == 300)
                {
                  if (v978 > 0x40)
                  {
                    int v1525 = 0;
                    int64_t v1526 = (v978 + 63) >> 6;
                    do
                    {
                      BOOL v109 = v1526-- < 1;
                      if (v109) {
                        break;
                      }
                      unint64_t v1527 = *(void *)(*(void *)v1818 + 8 * v1526);
                      v1525 += __clz(v1527);
                    }
                    while (!v1527);
                    int v1528 = v978 | 0xFFFFFFC0;
                    if ((v978 & 0x3F) == 0) {
                      int v1528 = 0;
                    }
                    if (v1525 + v1528 != v978) {
                      return 0;
                    }
                  }
                  else if (*(void *)v1818)
                  {
                    return 0;
                  }
                  uint64_t v1529 = a1[3];
                  v1530 = &v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                  v1531 = *v1530;
                  uint64_t v1532 = (uint64_t)v1530[4];
                  WORD4(v1856) = 257;
                  uint64_t v478 = sub_1CB844AF4(v1529, v1531, v1532, (uint64_t)&p_s2);
                  v1533 = operator new(0x80uLL);
                  v1533[21] = v1533[21] & 0x38000000 | 2;
                  unint64_t v8 = (unint64_t)(v1533 + 16);
                  *(void *)v1533 = 0;
                  *((void *)v1533 + 1) = 0;
                  *((void *)v1533 + 2) = 0;
                  *((void *)v1533 + 3) = v1533 + 16;
                  *((void *)v1533 + 4) = 0;
                  *((void *)v1533 + 5) = 0;
                  *((void *)v1533 + 6) = 0;
                  *((void *)v1533 + 7) = v1533 + 16;
                  BOOL v392 = (int32x2_t ****)llvm::Constant::getNullValue((llvm::Constant *)v977, v1534, v1535);
                  WORD4(v1856) = 257;
LABEL_1698:
                  uint64_t v1056 = ***(void ***)v478;
                  uint64_t v134 = v1056 + 1888;
                  if (*(void *)v478) {
                    BOOL v1057 = (*(_DWORD *)(*(void *)v478 + 8) & 0xFE) == 18;
                  }
                  else {
                    BOOL v1057 = 0;
                  }
                  if (v1057)
                  {
                    v1107 = (uint64_t **)(v1056 + 1888);
                    v1108 = (llvm::Type *)*(unsigned int *)(*(void *)v478 + 32);
                    if (*(_DWORD *)(*(void *)v478 + 8) == 19) {
                      llvm::ScalableVectorType::get(v1107, v1108);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v1107, v1108);
                    }
                    uint64_t v134 = v1109;
                  }
                  uint64_t v135 = (llvm::Value *)v8;
                  __int16 v136 = v979;
LABEL_1703:
                  uint64_t v137 = (uint64_t)v478;
                  goto LABEL_581;
                }
                if (v980 == 311)
                {
                  if (v978 > 0x40)
                  {
                    int v1515 = 0;
                    int64_t v1516 = (v978 + 63) >> 6;
                    do
                    {
                      BOOL v109 = v1516-- < 1;
                      if (v109) {
                        break;
                      }
                      unint64_t v1517 = *(void *)(*(void *)v1818 + 8 * v1516);
                      v1515 += __clz(v1517);
                    }
                    while (!v1517);
                    int v1518 = v978 | 0xFFFFFFC0;
                    if ((v978 & 0x3F) == 0) {
                      int v1518 = 0;
                    }
                    if (v1515 + v1518 != v978) {
                      return 0;
                    }
                  }
                  else if (*(void *)v1818)
                  {
                    return 0;
                  }
                  v1519 = operator new(0x80uLL);
                  unint64_t v8 = (unint64_t)(v1519 + 16);
                  v1519[21] = v1519[21] & 0x38000000 | 2;
                  *(void *)v1519 = 0;
                  *((void *)v1519 + 1) = 0;
                  *((void *)v1519 + 2) = 0;
                  *((void *)v1519 + 3) = v1519 + 16;
                  *((void *)v1519 + 4) = 0;
                  *((void *)v1519 + 5) = 0;
                  *((void *)v1519 + 6) = 0;
                  *((void *)v1519 + 7) = v1519 + 16;
                  if (v979 == 32) {
                    __int16 v898 = 37;
                  }
                  else {
                    __int16 v898 = 34;
                  }
                  v1520 = (llvm::ConstantInt ****)&v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                  uint64_t v9 = *v1520;
                  v382 = (llvm::Value *)v1520[4];
                  WORD4(v1856) = 257;
                  v899 = (llvm::Constant *)*v9;
                  int v900 = *((_DWORD *)*v9 + 2);
                  uint64_t v134 = *(void *)**v9 + 1888;
                  if (*v9) {
                    BOOL v1521 = ((*v9)[1] & 0xFE) == 18;
                  }
                  else {
                    BOOL v1521 = 0;
                  }
                  if (!v1521) {
                    goto LABEL_1429;
                  }
LABEL_2479:
                  v1522 = (uint64_t **)v134;
                  v1523 = (llvm::Type *)*((unsigned int *)v899 + 8);
                  if (v900 == 19) {
                    llvm::ScalableVectorType::get(v1522, v1523);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v1522, v1523);
                  }
                  uint64_t v134 = v1524;
LABEL_1429:
                  uint64_t v135 = (llvm::Value *)v8;
                  __int16 v136 = v898;
                  uint64_t v137 = (uint64_t)v9;
LABEL_1430:
                  uint64_t v138 = (uint64_t)v382;
                  goto LABEL_2287;
                }
                return 0;
              }
              v1089 = &v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
              if (*v1089 != v1089[4]) {
                return 0;
              }
              if (v978 > 0x40)
              {
                int v1646 = 0;
                int64_t v1647 = (v978 + 63) >> 6;
                do
                {
                  BOOL v109 = v1647-- < 1;
                  if (v109) {
                    break;
                  }
                  unint64_t v1648 = *(void *)(*(void *)v1818 + 8 * v1647);
                  v1646 += __clz(v1648);
                }
                while (!v1648);
                int v1649 = v978 | 0xFFFFFFC0;
                if ((v978 & 0x3F) == 0) {
                  int v1649 = 0;
                }
                if (v1646 + v1649 != v978
                  && llvm::APInt::countTrailingOnesSlowCase(v1818) != v978)
                {
                  goto LABEL_2802;
                }
              }
              else if (v978 && *(void *)v1818 && *(void *)v1818 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v978)
              {
LABEL_2802:
                v1866 = 0;
                v1653 = (unsigned __int8 *)v1089[8];
                unint64_t p_s2 = (unint64_t)&v1866;
                v1854 = 0;
                if (!sub_1CBF528D8((uint64_t)&p_s2, v1653)) {
                  return 0;
                }
                v1654 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v1654 + 16);
                v1654[21] = v1654[21] & 0x38000000 | 2;
                *(void *)v1654 = 0;
                *((void *)v1654 + 1) = 0;
                *((void *)v1654 + 2) = 0;
                *((void *)v1654 + 3) = v1654 + 16;
                *((void *)v1654 + 4) = 0;
                *((void *)v1654 + 5) = 0;
                *((void *)v1654 + 6) = 0;
                *((void *)v1654 + 7) = v1654 + 16;
                v1655 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                int v1656 = *((_DWORD *)*(v9 - 4) + 9);
                if (v1656 == 148)
                {
                  v1657 = (void **)&v1861;
                  llvm::APInt::rotr(v975, (const llvm::APInt *)v1866, (uint64_t)&v1861);
                }
                else
                {
                  v1657 = &v1849;
                  llvm::APInt::rotl(v975, (const llvm::APInt *)v1866, (uint64_t)&v1849);
                }
                v1699 = llvm::ConstantInt::get(*v977, (llvm::LLVMContext *)v1657, v1658);
                if ((v977[1] & 0xFE) == 0x12) {
                  v1699 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v977 + 8) | ((unint64_t)(*((_DWORD *)v977 + 2) == 19) << 32)), (uint64_t)v1699);
                }
                WORD4(v1856) = 257;
                uint64_t v1700 = **(void **)*v1655;
                uint64_t v1701 = v1700 + 1888;
                if (*v1655) {
                  BOOL v1702 = (*((_DWORD *)*v1655 + 2) & 0xFE) == 18;
                }
                else {
                  BOOL v1702 = 0;
                }
                if (v1702)
                {
                  v1740 = (uint64_t **)(v1700 + 1888);
                  v1741 = (llvm::Type *)*((unsigned int *)*v1655 + 8);
                  if (*((_DWORD *)*v1655 + 2) == 19) {
                    llvm::ScalableVectorType::get(v1740, v1741);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v1740, v1741);
                  }
                  uint64_t v1701 = v1742;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v1701, 53, v979, (uint64_t)v1655, (uint64_t)v1699, (const char **)&p_s2, 0, 0);
                if (v1656 != 148)
                {
LABEL_2865:
                  if (v1850[0] < 0x41) {
                    return v8;
                  }
                  int v227 = (uint64_t *)v1849;
                  if (!v1849) {
                    return v8;
                  }
LABEL_321:
                  MEMORY[0x1D25D9CB0](v227, 0x1000C8000313F17);
                  return v8;
                }
                goto LABEL_319;
              }
              v1650 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v1650 + 16);
              v1650[21] = v1650[21] & 0x38000000 | 2;
              *(void *)v1650 = 0;
              *((void *)v1650 + 1) = 0;
              *((void *)v1650 + 2) = 0;
              *((void *)v1650 + 3) = v1650 + 16;
              *((void *)v1650 + 4) = 0;
              *((void *)v1650 + 5) = 0;
              *((void *)v1650 + 6) = 0;
              *((void *)v1650 + 7) = v1650 + 16;
              uint64_t v478 = (llvm::Instruction *)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
              BOOL v392 = (int32x2_t ****)*(a2 - 4);
              goto LABEL_1697;
            }
            if (v980 == 1)
            {
              if (v978 > 0x40)
              {
                int v1586 = 0;
                int64_t v1587 = (v978 + 63) >> 6;
                v1588 = *(unint64_t **)v1818;
                do
                {
                  BOOL v109 = v1587-- < 1;
                  if (v109) {
                    break;
                  }
                  unint64_t v1589 = v1588[v1587];
                  v1586 += __clz(v1589);
                }
                while (!v1589);
                int v1590 = v978 | 0xFFFFFFC0;
                if ((v978 & 0x3F) == 0) {
                  int v1590 = 0;
                }
                if (v1586 + v1590 != v978
                  && (((v1588[(v978 - 1) >> 6] >> (v978 - 1)) & 1) == 0
                   || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1818) != v978 - 1))
                {
                  return 0;
                }
              }
              else if (*(void *)v1818 && *(void *)v1818 != 1 << (v978 - 1))
              {
                return 0;
              }
              v1591 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v1591 + 16);
              v1591[21] = v1591[21] & 0x38000000 | 2;
              *(void *)v1591 = 0;
              *((void *)v1591 + 1) = 0;
              *((void *)v1591 + 2) = 0;
              *((void *)v1591 + 3) = v1591 + 16;
              *((void *)v1591 + 4) = 0;
              *((void *)v1591 + 5) = 0;
              *((void *)v1591 + 6) = 0;
              *((void *)v1591 + 7) = v1591 + 16;
              uint64_t v478 = (llvm::Instruction *)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
              BOOL v392 = (int32x2_t ****)llvm::ConstantInt::get(*v977, v975, v1592);
              if ((v977[1] & 0xFE) != 0x12) {
                goto LABEL_1697;
              }
              v1055 = (int32x2_t ****)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v977 + 8) | ((unint64_t)(*((_DWORD *)v977 + 2) == 19) << 32)), (uint64_t)v392);
LABEL_1696:
              BOOL v392 = v1055;
LABEL_1697:
              WORD4(v1856) = 257;
              goto LABEL_1698;
            }
            if (v980 == 52) {
              goto LABEL_1787;
            }
            if (v980 != 9) {
              return 0;
            }
            v989 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v989 + 16);
            v989[21] = v989[21] & 0x38000000 | 2;
            *(void *)v989 = 0;
            *((void *)v989 + 1) = 0;
            *((void *)v989 + 2) = 0;
            *((void *)v989 + 3) = v989 + 16;
            *((void *)v989 + 4) = 0;
            *((void *)v989 + 5) = 0;
            *((void *)v989 + 6) = 0;
            *((void *)v989 + 7) = v989 + 16;
            uint64_t v90 = (llvm::Instruction *)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
            llvm::APInt::byteSwap(v975, (uint64_t)&v1861);
            unint64_t v94 = llvm::ConstantInt::get(*v977, (llvm::LLVMContext *)&v1861, v990);
            if ((v977[1] & 0xFE) == 0x12) {
              unint64_t v94 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v977 + 8) | ((unint64_t)(*((_DWORD *)v977 + 2) == 19) << 32)), (uint64_t)v94);
            }
            WORD4(v1856) = 257;
            uint64_t v991 = ***(void ***)v90;
            uint64_t v96 = v991 + 1888;
            if (*(void *)v90) {
              BOOL v992 = (*(_DWORD *)(*(void *)v90 + 8) & 0xFE) == 18;
            }
            else {
              BOOL v992 = 0;
            }
            if (v992)
            {
              v1636 = (uint64_t **)(v991 + 1888);
              v1637 = (llvm::Type *)*(unsigned int *)(*(void *)v90 + 32);
              if (*(_DWORD *)(*(void *)v90 + 8) == 19) {
                llvm::ScalableVectorType::get(v1636, v1637);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1636, v1637);
              }
              uint64_t v96 = v1638;
            }
            unint64_t v97 = (llvm::Value *)v8;
            __int16 v98 = v979;
LABEL_317:
            uint64_t v226 = (uint64_t)v90;
            goto LABEL_318;
          }
          switch(v980)
          {
            case '4':
              if (v979 == 36)
              {
                if (v978 >= 0x41)
                {
                  int v1038 = 0;
                  int64_t v1039 = (v978 + 63) >> 6;
                  v1040 = *(unint64_t **)v1818;
                  uint64_t v1041 = v1039;
                  do
                  {
                    BOOL v109 = v1041-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1042 = v1040[v1041];
                    v1038 += __clz(v1042);
                  }
                  while (!v1042);
                  int v1043 = v978 | 0xFFFFFFC0;
                  if ((v978 & 0x3F) == 0) {
                    int v1043 = 0;
                  }
                  if ((v978 - (v1043 + v1038)) >= 0x41 || *v1040)
                  {
                    int v1044 = 0;
                    int64_t v1045 = (v978 + 63) >> 6;
                    do
                    {
                      BOOL v109 = v1045-- < 1;
                      if (v109) {
                        break;
                      }
                      unint64_t v1046 = v1040[v1045];
                      v1044 += __clz(v1046);
                    }
                    while (!v1046);
                    if ((v978 - (v1043 + v1044)) <= 0x40 && *v1040 <= v978)
                    {
                      int v1047 = 0;
                      do
                      {
                        BOOL v109 = v1039-- < 1;
                        if (v109) {
                          break;
                        }
                        unint64_t v1048 = v1040[v1039];
                        v1047 += __clz(v1048);
                      }
                      while (!v1048);
                      LODWORD(p_s1) = *((_DWORD *)v1818 + 2);
                      llvm::APInt::initSlowCase((llvm::APInt *)&v1861);
                    }
                  }
                  return 0;
                }
                if (*(void *)v1818 - 1 >= (unint64_t)v978) {
                  return 0;
                }
                v1036 = *(unint64_t **)v1818;
                unsigned int v1037 = v978 - *(void *)v1818;
                LODWORD(p_s1) = *((_DWORD *)v1818 + 2);
                uint64_t v1861 = 0;
                if (v1037)
                {
                  if (v1037 > 0x40) {
                    llvm::APInt::setBitsSlowCase(&v1861, 0, v1037);
                  }
                  else {
                    v1861 |= 0xFFFFFFFFFFFFFFFFLL >> (v1036 - v978);
                  }
                }
                v1015 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                v1016 = llvm::ConstantInt::get(*v977, (llvm::LLVMContext *)&v1861, v6);
                if ((v977[1] & 0xFE) == 0x12) {
                  v1016 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v977 + 8) | ((unint64_t)(*((_DWORD *)v977 + 2) == 19) << 32)), (uint64_t)v1016);
                }
                WORD4(v1856) = 257;
                __int16 v1017 = 34;
              }
              else
              {
                if (v979 != 34) {
                  return 0;
                }
                if (v978 >= 0x41)
                {
                  int v1028 = 0;
                  int64_t v1029 = (v978 + 63) >> 6;
                  v1030 = *(unint64_t **)v1818;
                  uint64_t v1031 = v1029;
                  do
                  {
                    BOOL v109 = v1031-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1032 = v1030[v1031];
                    v1028 += __clz(v1032);
                  }
                  while (!v1032);
                  int v1033 = v978 | 0xFFFFFFC0;
                  if ((v978 & 0x3F) == 0) {
                    int v1033 = 0;
                  }
                  if ((v978 - (v1033 + v1028)) < 0x41 && *v1030 < v978)
                  {
                    int v1034 = 0;
                    do
                    {
                      BOOL v109 = v1029-- < 1;
                      if (v109) {
                        break;
                      }
                      unint64_t v1035 = v1030[v1029];
                      v1034 += __clz(v1035);
                    }
                    while (!v1035);
                    LODWORD(p_s1) = *((_DWORD *)v1818 + 2);
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1861);
                  }
                  return 0;
                }
                v1014 = *(unint64_t **)v1818;
                if (*(void *)v1818 >= v978) {
                  return 0;
                }
                LODWORD(p_s1) = *((_DWORD *)v1818 + 2);
                uint64_t v1861 = 1 << (v978 + ~(_BYTE)v1014);
                v1015 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                v1016 = llvm::ConstantInt::get(*v977, (llvm::LLVMContext *)&v1861, v6);
                if ((v977[1] & 0xFE) == 0x12) {
                  v1016 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v977 + 8) | ((unint64_t)(*((_DWORD *)v977 + 2) == 19) << 32)), (uint64_t)v1016);
                }
                WORD4(v1856) = 257;
                __int16 v1017 = 36;
              }
              unint64_t v8 = (unint64_t)llvm::CmpInst::Create(53, v1017, v1015, (uint64_t)v1016, (const char **)&p_s2, 0);
              if (p_s1 < 0x41) {
                goto LABEL_1655;
              }
              uint64_t v1084 = v1861;
              if (!v1861) {
                goto LABEL_1655;
              }
              break;
            case '6':
              v1003 = v9[1];
              if (!v1003 || v1003[1]) {
                return 0;
              }
              if (v979 == 36)
              {
                if (v978 >= 0x41)
                {
                  int v1067 = 0;
                  int64_t v1068 = (v978 + 63) >> 6;
                  v1069 = *(unint64_t **)v1818;
                  uint64_t v1070 = v1068;
                  do
                  {
                    BOOL v109 = v1070-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1071 = v1069[v1070];
                    v1067 += __clz(v1071);
                  }
                  while (!v1071);
                  int v1072 = v978 | 0xFFFFFFC0;
                  if ((v978 & 0x3F) == 0) {
                    int v1072 = 0;
                  }
                  if ((v978 - (v1072 + v1067)) >= 0x41 || *v1069)
                  {
                    int v1073 = 0;
                    int64_t v1074 = (v978 + 63) >> 6;
                    do
                    {
                      BOOL v109 = v1074-- < 1;
                      if (v109) {
                        break;
                      }
                      unint64_t v1075 = v1069[v1074];
                      v1073 += __clz(v1075);
                    }
                    while (!v1075);
                    if ((v978 - (v1072 + v1073)) <= 0x40 && *v1069 <= v978)
                    {
                      int v1076 = 0;
                      do
                      {
                        BOOL v109 = v1068-- < 1;
                        if (v109) {
                          break;
                        }
                        unint64_t v1077 = v1069[v1068];
                        v1076 += __clz(v1077);
                      }
                      while (!v1077);
                      v1850[0] = *((_DWORD *)v1818 + 2);
                      llvm::APInt::initSlowCase((llvm::APInt *)&v1849);
                    }
                  }
                  return 0;
                }
                v1066 = *(unint64_t **)v1818;
                if (*(void *)v1818 - 1 >= (unint64_t)v978) {
                  return 0;
                }
                v1850[0] = *((_DWORD *)v1818 + 2);
                v1849 = 0;
                if (v1066)
                {
                  if (v1066 > 0x40) {
                    llvm::APInt::setBitsSlowCase(&v1849, 0, v1066);
                  }
                  else {
                    v1849 = (void *)((unint64_t)v1849 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v1066));
                  }
                }
                uint64_t v1078 = a1[3];
                v1079 = (llvm::ConstantInt ***)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                WORD4(v1856) = 257;
                v1080 = *v1079;
                v1081 = llvm::ConstantInt::get(**v1079, (llvm::LLVMContext *)&v1849, v6);
                if ((v1080[1] & 0xFE) == 0x12) {
                  v1081 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1080 + 8) | ((unint64_t)(*((_DWORD *)v1080 + 2) == 19) << 32)), (uint64_t)v1081);
                }
                v1009 = sub_1CBF52474(v1078, v1079, (uint64_t)v1081, (uint64_t)&p_s2);
                v1012 = llvm::Constant::getNullValue((llvm::Constant *)v977, v1082, v1083);
                __int16 v1865 = 257;
                __int16 v1013 = 33;
              }
              else
              {
                if (v979 != 34) {
                  return 0;
                }
                if (v978 >= 0x41)
                {
                  int v1058 = 0;
                  int64_t v1059 = (v978 + 63) >> 6;
                  v1060 = *(unint64_t **)v1818;
                  uint64_t v1061 = v1059;
                  do
                  {
                    BOOL v109 = v1061-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1062 = v1060[v1061];
                    v1058 += __clz(v1062);
                  }
                  while (!v1062);
                  int v1063 = v978 | 0xFFFFFFC0;
                  if ((v978 & 0x3F) == 0) {
                    int v1063 = 0;
                  }
                  if ((v978 - (v1063 + v1058)) < 0x41 && *v1060 < v978)
                  {
                    int v1064 = 0;
                    do
                    {
                      BOOL v109 = v1059-- < 1;
                      if (v109) {
                        break;
                      }
                      unint64_t v1065 = v1060[v1059];
                      v1064 += __clz(v1065);
                    }
                    while (!v1065);
                    v1850[0] = *((_DWORD *)v1818 + 2);
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1849);
                  }
                  return 0;
                }
                v1004 = *(unint64_t **)v1818;
                if (*(void *)v1818 >= v978) {
                  return 0;
                }
                v1850[0] = *((_DWORD *)v1818 + 2);
                v1849 = 0;
                if (v1004 > 0x3F) {
                  llvm::APInt::setBitsSlowCase(&v1849, 0, v1004 + 1);
                }
                else {
                  v1849 = (void *)((unint64_t)v1849 | (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v1004));
                }
                uint64_t v1005 = a1[3];
                v1006 = (llvm::ConstantInt ***)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
                WORD4(v1856) = 257;
                v1007 = *v1006;
                v1008 = llvm::ConstantInt::get(**v1006, (llvm::LLVMContext *)&v1849, v6);
                if ((v1007[1] & 0xFE) == 0x12) {
                  v1008 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1007 + 8) | ((unint64_t)(*((_DWORD *)v1007 + 2) == 19) << 32)), (uint64_t)v1008);
                }
                v1009 = sub_1CBF52474(v1005, v1006, (uint64_t)v1008, (uint64_t)&p_s2);
                v1012 = llvm::Constant::getNullValue((llvm::Constant *)v977, v1010, v1011);
                __int16 v1865 = 257;
                __int16 v1013 = 32;
              }
              unint64_t v8 = (unint64_t)llvm::CmpInst::Create(53, v1013, v1009, (uint64_t)v1012, (const char **)&v1861, 0);
              if (v1850[0] < 0x41 || (uint64_t v1084 = (uint64_t)v1849) == 0)
              {
LABEL_1655:
                if (v8) {
                  return v8;
                }
                return 0;
              }
              break;
            case '5':
              v986 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
              unint64_t v987 = (v978 - 1);
              if (v978 >= 0x41)
              {
                int v1018 = 0;
                int64_t v1019 = (v978 + 63) >> 6;
                v1020 = *(unint64_t **)v1818;
                uint64_t v1021 = v1019;
                do
                {
                  BOOL v109 = v1021-- < 1;
                  if (v109) {
                    break;
                  }
                  unint64_t v1022 = v1020[v1021];
                  v1018 += __clz(v1022);
                }
                while (!v1022);
                int v1023 = v978 | 0xFFFFFFC0;
                if ((v978 & 0x3F) == 0) {
                  int v1023 = 0;
                }
                if ((v978 - (v1023 + v1018)) >= 0x41 || v979 != 34 || *v1020 != v987)
                {
                  int v1026 = 0;
                  do
                  {
                    BOOL v109 = v1019-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1027 = v1020[v1019];
                    v1026 += __clz(v1027);
                  }
                  while (!v1027);
                  if ((v978 - (v1023 + v1026)) > 0x40) {
                    return 0;
                  }
                  v988 = (unint64_t *)*v1020;
                  goto LABEL_1651;
                }
              }
              else
              {
                v988 = *(unint64_t **)v1818;
                if (v979 != 34 || v988 != (unint64_t *)v987)
                {
LABEL_1651:
                  if (v979 != 36 || v988 != (unint64_t *)v978) {
                    return 0;
                  }
                  v1024 = llvm::Constant::getAllOnesValue((llvm::Constant *)v977, (llvm::Type *)v5, v6);
                  WORD4(v1856) = 257;
                  __int16 v1025 = 33;
                  goto LABEL_1654;
                }
              }
              v1024 = llvm::Constant::getAllOnesValue((llvm::Constant *)v977, (llvm::Type *)v5, v6);
              WORD4(v1856) = 257;
              __int16 v1025 = 32;
LABEL_1654:
              unint64_t v8 = (unint64_t)llvm::CmpInst::Create(53, v1025, v986, (uint64_t)v1024, (const char **)&p_s2, 0);
              goto LABEL_1655;
            default:
              return 0;
          }
          MEMORY[0x1D25D9CB0](v1084, 0x1000C8000313F17);
          goto LABEL_1655;
        }
        v981 = (llvm::APInt **)a1[7];
        unint64_t v982 = a1[9];
        v983 = a2;
        if (!a2[5])
        {
          if (*(unsigned __int8 *)(v963 + 16) < 0x1Cu || (v983 = (void **)v963, !*(void *)(v963 + 40))) {
            v983 = 0;
          }
        }
        unint64_t p_s2 = a1[10];
        v1854 = v981;
        uint64_t v1855 = (uint64_t)v983;
        long long v1856 = v982;
        LOBYTE(v1857) = 1;
        sub_1CC16089C((uint64_t *)v963, 0, (const llvm::DataLayout **)&p_s2, (uint64_t)&v1861);
        unint64_t v8 = p_s1;
        LODWORD(v1867) = p_s1;
        if (p_s1 > 0x40) {
          operator new[]();
        }
        v1866 = (uint64_t *)(v1863 | v1861);
        LODWORD(v1867) = 0;
        unsigned int v984 = __clz(~((v1863 | v1861) << -(char)p_s1));
        if (!p_s1) {
          unsigned int v984 = 0;
        }
        if (v984 < v971 - v969)
        {
          int v985 = 1;
          goto LABEL_1584;
        }
        if (v971 > 0x40)
        {
          if (*((_DWORD *)v961 + 2) != v971) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v1849, (uint64_t)v961);
          unsigned int v1860 = v971;
          llvm::APInt::initSlowCase((llvm::APInt *)&v1859);
        }
        uint64_t v1384 = *(void *)v961;
        v1850[0] = v971;
        if (v971) {
          unint64_t v1385 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v971;
        }
        else {
          unint64_t v1385 = 0;
        }
        v1849 = (void *)(v1385 & v1384);
        unsigned int v1860 = v971;
        uint64_t v1859 = 0;
        unsigned int v1386 = v971;
        if (v971 != v969)
        {
          if (v969 <= 0x3F)
          {
            unint64_t v1387 = v1859 | (0xFFFFFFFFFFFFFFFFLL >> (v969 - v971) << v969);
            uint64_t v1859 = v1387;
            goto LABEL_2207;
          }
          llvm::APInt::setBitsSlowCase(&v1859, v969, v971);
          unsigned int v1386 = v1860;
        }
        if (v1386 > 0x40)
        {
          unint64_t v1388 = v1859;
          v1541 = (uint64_t *)v1863;
          unint64_t v1542 = ((unint64_t)v1386 + 63) >> 6;
          v1543 = (void *)v1859;
          do
          {
            uint64_t v1544 = *v1541++;
            *v1543++ &= v1544;
            --v1542;
          }
          while (v1542);
LABEL_2208:
          LODWORD(v1854) = v1386;
          unint64_t p_s2 = v1388;
          unsigned int v1860 = 0;
          if (v1850[0] > 0x40)
          {
            llvm::APInt::orAssignSlowCase((uint64_t)&v1849, (uint64_t **)&p_s2);
            unsigned int v1386 = v1854;
          }
          else
          {
            v1849 = (void *)((unint64_t)v1849 | v1388);
          }
          if (v1386 >= 0x41 && p_s2) {
            MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
          }
          v1389 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1389 + 16);
          v1389[21] = v1389[21] & 0x38000000 | 2;
          *(void *)v1389 = 0;
          *((void *)v1389 + 1) = 0;
          *((void *)v1389 + 2) = 0;
          *((void *)v1389 + 3) = v1389 + 16;
          *((void *)v1389 + 4) = 0;
          *((void *)v1389 + 5) = 0;
          *((void *)v1389 + 6) = 0;
          *((void *)v1389 + 7) = v1389 + 16;
          uint64_t v1390 = *(void *)v963;
          v1392 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v963, (llvm::LLVMContext *)&v1849, v1391);
          if ((*(_DWORD *)(v1390 + 8) & 0xFE) == 0x12) {
            v1392 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v1390 + 32) | ((unint64_t)(*(_DWORD *)(v1390 + 8) == 19) << 32)), (uint64_t)v1392);
          }
          WORD4(v1856) = 257;
          uint64_t v1393 = *(void *)v963;
          uint64_t v1394 = ***(void ***)v963 + 1888;
          if (*(void *)v963 && (*(_DWORD *)(v1393 + 8) & 0xFE) == 0x12)
          {
            v1395 = (uint64_t **)(***(void ***)v963 + 1888);
            v1396 = (llvm::Type *)*(unsigned int *)(v1393 + 32);
            if (*(_DWORD *)(v1393 + 8) == 19) {
              llvm::ScalableVectorType::get(v1395, v1396);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1395, v1396);
            }
            uint64_t v1394 = v1397;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v8, v1394, 53, v967, v963, (uint64_t)v1392, (const char **)&p_s2, 0, 0);
          if (v1850[0] >= 0x41 && v1849) {
            MEMORY[0x1D25D9CB0](v1849, 0x1000C8000313F17);
          }
          int v985 = 0;
LABEL_1584:
          if (v1864 >= 0x41 && v1863) {
            MEMORY[0x1D25D9CB0](v1863, 0x1000C8000313F17);
          }
          if (p_s1 >= 0x41 && v1861) {
            MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
          }
          if (!v985) {
            goto LABEL_1563;
          }
          goto LABEL_1561;
        }
        unint64_t v1387 = v1859;
LABEL_2207:
        unint64_t v1388 = v1863 & v1387;
        goto LABEL_2208;
      }
      uint64_t v1859 = 0;
      __s1 = 0;
      LODWORD(v1851) = 64;
      v1849 = &v1859;
      *(void *)v1850 = (PrimitiveSizeInBits - 1);
      unsigned int v1864 = 64;
      p_s1 = &__s1;
      unint64_t v1863 = *(void *)v1850;
      sub_1CD68C2B0((uint64_t)&p_s2, &v1849, (uint64_t)&v1861);
      int v1095 = *(unsigned __int8 *)(v963 + 16);
      if (v1095 == 5)
      {
        if (*(_WORD *)(v963 + 18) != 29) {
          goto LABEL_2086;
        }
        uint64_t v1110 = *(void *)(v963 - 32 * (*(_DWORD *)(v963 + 20) & 0x7FFFFFF));
        int v1111 = *(unsigned __int8 *)(v1110 + 16);
        if (v1111 == 5)
        {
          if (*(_WORD *)(v1110 + 18) != 27) {
            goto LABEL_2086;
          }
          uint64_t v1300 = *(void *)(v1110 - 32 * (*(_DWORD *)(v1110 + 20) & 0x7FFFFFF));
          if (!v1300) {
            goto LABEL_2086;
          }
          *(void *)unint64_t p_s2 = v1300;
          if (!sub_1CBF531E4((llvm::APInt *)&v1854, *(llvm::Constant **)(v1110 - 32 * (*(_DWORD *)(v1110 + 20) & 0x7FFFFFF) + 32)))goto LABEL_2086; {
        }
          }
        else
        {
          if (v1111 != 55) {
            goto LABEL_2086;
          }
          uint64_t v1112 = *(void *)(v1110 - 64);
          if (!v1112) {
            goto LABEL_2086;
          }
          *(void *)unint64_t p_s2 = v1112;
          if (!sub_1CBF53154((llvm::APInt *)&v1854, *(unsigned __int8 **)(v1110 - 32))) {
            goto LABEL_2086;
          }
        }
        uint64_t v1301 = v963 - 32 * (*(_DWORD *)(v963 + 20) & 0x7FFFFFF);
        if (!sub_1CCA799D0((uint64_t)&v1856, *(void *)(v1301 + 32), v1301)) {
          goto LABEL_2086;
        }
      }
      else
      {
        if (v1095 != 57) {
          goto LABEL_2086;
        }
        uint64_t v1096 = *(void *)(v963 - 64);
        int v1097 = *(unsigned __int8 *)(v1096 + 16);
        if (v1097 == 5)
        {
          if (*(_WORD *)(v1096 + 18) != 27) {
            goto LABEL_2086;
          }
          uint64_t v1116 = *(void *)(v1096 - 32 * (*(_DWORD *)(v1096 + 20) & 0x7FFFFFF));
          if (!v1116) {
            goto LABEL_2086;
          }
          *(void *)unint64_t p_s2 = v1116;
          if (!sub_1CBF531E4((llvm::APInt *)&v1854, *(llvm::Constant **)(v1096 - 32 * (*(_DWORD *)(v1096 + 20) & 0x7FFFFFF) + 32)))goto LABEL_2086; {
        }
          }
        else
        {
          if (v1097 != 55) {
            goto LABEL_2086;
          }
          uint64_t v1098 = *(void *)(v1096 - 64);
          if (!v1098) {
            goto LABEL_2086;
          }
          *(void *)unint64_t p_s2 = v1098;
          if (!sub_1CBF53154((llvm::APInt *)&v1854, *(unsigned __int8 **)(v1096 - 32))) {
            goto LABEL_2086;
          }
        }
        if (!sub_1CCA799D0((uint64_t)&v1856, *(void *)(v963 - 32), (char)&p_s2))
        {
LABEL_2086:
          sub_1CD68C344((uint64_t)&p_s2);
          __int16 v962 = *((_WORD *)a2 + 9);
          goto LABEL_1554;
        }
      }
      v1302 = (llvm::ConstantInt **)v1859;
      if (!v1859 || (void *)v1859 != __s1) {
        goto LABEL_2086;
      }
      sub_1CD68C344((uint64_t)&p_s2);
      v1738 = operator new(0x80uLL);
      unint64_t v8 = (unint64_t)(v1738 + 16);
      v1738[21] = v1738[21] & 0x38000000 | 2;
      *(void *)v1738 = 0;
      *((void *)v1738 + 1) = 0;
      *((void *)v1738 + 2) = 0;
      *((void *)v1738 + 3) = v1738 + 16;
      *((void *)v1738 + 4) = 0;
      *((void *)v1738 + 5) = 0;
      *((void *)v1738 + 6) = 0;
      *((void *)v1738 + 7) = v1738 + 16;
      uint64_t Sub = (uint64_t)llvm::ConstantInt::get(*v1302, 1uLL, 0);
      WORD4(v1856) = 257;
      v1739 = *v1302;
      uint64_t v134 = **(void **)*v1302 + 1888;
      if (*v1302 && (*((_DWORD *)v1739 + 2) & 0xFE) == 0x12)
      {
        v1769 = (uint64_t **)(**(void **)*v1302 + 1888);
        v1770 = (llvm::Type *)*((unsigned int *)v1739 + 8);
        if (*((_DWORD *)v1739 + 2) == 19) {
          llvm::ScalableVectorType::get(v1769, v1770);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v1769, v1770);
        }
        uint64_t v134 = v1771;
      }
      uint64_t v135 = (llvm::Value *)v8;
      __int16 v136 = 40;
      uint64_t v137 = (uint64_t)v1302;
LABEL_175:
      uint64_t v138 = Sub;
LABEL_2287:
      llvm::CmpInst::CmpInst(v135, v134, 53, v136, v137, v138, (const char **)&p_s2, 0, 0);
      return v8;
    }
    v938 = (llvm::Constant *)*(a2 - 4);
    if (!v938 || *((unsigned char *)v938 + 16) != 16) {
      return 0;
    }
    v939 = a2[1];
    if (!v939) {
      goto LABEL_1544;
    }
    if (v939[1]) {
      goto LABEL_1544;
    }
    uint64_t v940 = (uint64_t)*(v9 - 12);
    if (!v940) {
      goto LABEL_1544;
    }
    if (*(unsigned char *)(v940 + 16) != 81) {
      goto LABEL_1544;
    }
    v941 = *(unsigned __int8 **)(v940 - 64);
    if (!v941) {
      goto LABEL_1544;
    }
    uint64_t v942 = *(void *)(v940 - 32);
    if (!v942) {
      goto LABEL_1544;
    }
    __int16 v943 = *(_WORD *)(v940 + 18);
    if ((v943 & 0x3E) != 0x20) {
      goto LABEL_1544;
    }
    int v944 = v943 & 0x3F;
    uint64_t v945 = (uint64_t)*(v9 - 8);
    uint64_t v946 = (uint64_t)*(v9 - 4);
    v947 = v944 == 33 ? *(v9 - 4) : *(v9 - 8);
    if (*((unsigned char *)v947 + 16) != 16 || v947 == 0) {
      goto LABEL_1544;
    }
    if (v944 != 33) {
      uint64_t v945 = v946;
    }
    if (*(unsigned char *)(v945 + 16) != 85) {
      goto LABEL_1544;
    }
    int v949 = *(_DWORD *)(v945 + 20);
    v950 = (v949 & 0x40000000) != 0 ? *(uint64_t **)(v945 - 8) : (uint64_t *)(v945 - 32 * (v949 & 0x7FFFFFF));
    uint64_t v951 = *v950;
    if (!*v950) {
      goto LABEL_1544;
    }
    if (*(unsigned char *)(v951 + 16) != 81) {
      goto LABEL_1544;
    }
    v952 = *(unsigned __int8 **)(v951 - 64);
    if (!v952) {
      goto LABEL_1544;
    }
    unint64_t v5 = *(void *)(v951 - 32);
    if (!v5) {
      goto LABEL_1544;
    }
    __int16 v953 = *(_WORD *)(v951 + 18);
    uint64_t v954 = (v949 & 0x40000000) != 0 ? *(void *)(v945 - 8) : v945 - 32 * (v949 & 0x7FFFFFF);
    v955 = *(llvm::ConstantInt **)(v954 + 32);
    BOOL v956 = v955 && *((unsigned char *)v955 + 16) == 16;
    if (!v956
      || ((v957 = *(llvm::ConstantInt **)(v954 + 64)) != 0 ? (BOOL v958 = *((unsigned char *)v957 + 16) == 16) : (BOOL v958 = 0), !v958))
    {
LABEL_1544:
      uint64_t v9 = (llvm::ConstantInt ***)*(a2 - 8);
      unsigned int v10 = *((unsigned __int8 *)v9 + 16);
      goto LABEL_1545;
    }
    uint64_t v959 = v953 & 0x3F;
    if (v952 != v941)
    {
      if ((unsigned __int8 *)v5 != v941) {
        goto LABEL_1544;
      }
      LODWORD(v959) = dword_1CFB279AC[v959];
      unint64_t v5 = (unint64_t)v952;
    }
    if (v959 == 38)
    {
      if (*(unsigned __int8 *)(v5 + 16) > 0x14u) {
        goto LABEL_1544;
      }
      sub_1CCA50180((llvm::Constant *)v5, 38, (uint64_t)&p_s2);
      if (!(_BYTE)v1855) {
        goto LABEL_1544;
      }
      unint64_t v5 = (unint64_t)v1854;
      LODWORD(v959) = 40;
      uint64_t v6 = v957;
    }
    else
    {
      uint64_t v6 = v955;
      v955 = v957;
    }
    if (v959 != 40 || v942 != v5) {
      goto LABEL_1544;
    }
    v1567 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F);
    if (v1567 <= 0xF) {
      FCmp = (llvm::Constant *)llvm::ConstantExpr::getFCmp(v1567, (uint64_t ***)v6, v938, 0);
    }
    else {
      FCmp = (llvm::Constant *)llvm::ConstantExpr::getICmp(v1567, v6, v938, 0, v7);
    }
    BOOL isAllOnesValue = llvm::Constant::isAllOnesValue(FCmp);
    v1571 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F);
    if (v1571 <= 0xF) {
      ICmp = (llvm::Constant *)llvm::ConstantExpr::getFCmp(v1571, (uint64_t ***)v947, v938, 0);
    }
    else {
      ICmp = (llvm::Constant *)llvm::ConstantExpr::getICmp(v1571, (llvm::Type *)v947, v938, 0, v1569);
    }
    BOOL v1574 = llvm::Constant::isAllOnesValue(ICmp);
    v1575 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F);
    if (v1575 <= 0xF) {
      v1576 = (llvm::Constant *)llvm::ConstantExpr::getFCmp(v1575, (uint64_t ***)v955, v938, 0);
    }
    else {
      v1576 = (llvm::Constant *)llvm::ConstantExpr::getICmp(v1575, v955, v938, 0, v1573);
    }
    BOOL v1578 = llvm::Constant::isAllOnesValue(v1576);
    v1579 = *(uint64_t **)(a1[3] + 64);
    uint64_t v1580 = *v1579;
    v1581 = *(llvm::Value **)(*v1579 + 1568);
    if (v1581)
    {
      if (isAllOnesValue) {
        goto LABEL_2577;
      }
    }
    else
    {
      v1691 = *(llvm::ConstantInt **)(v1580 + 1888);
      LODWORD(v1854) = *(_DWORD *)(v1580 + 1896) >> 8;
      if (v1854 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&p_s2);
      }
      unint64_t p_s2 = 0;
      v1581 = (llvm::Value *)llvm::ConstantInt::get(v1691, (llvm::LLVMContext *)&p_s2, v1577);
      if (v1854 >= 0x41 && p_s2) {
        MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
      }
      *(void *)(v1580 + 1568) = v1581;
      if (isAllOnesValue)
      {
LABEL_2577:
        uint64_t v1582 = a1[3];
        WORD4(v1856) = 257;
        v1583 = sub_1CB845F20(v1582, 40, v941, v942, (uint64_t)&p_s2);
        __int16 v1865 = 257;
        v1581 = sub_1CB844AF4(v1582, v1581, (uint64_t)v1583, (uint64_t)&v1861);
        if (!v1574) {
          goto LABEL_2578;
        }
        goto LABEL_2847;
      }
    }
    if (!v1574)
    {
LABEL_2578:
      if (!v1578) {
        goto LABEL_2580;
      }
      goto LABEL_2579;
    }
LABEL_2847:
    uint64_t v1692 = a1[3];
    WORD4(v1856) = 257;
    v1693 = sub_1CB845F20(v1692, 32, v941, v942, (uint64_t)&p_s2);
    __int16 v1865 = 257;
    v1581 = sub_1CB844AF4(v1692, v1581, (uint64_t)v1693, (uint64_t)&v1861);
    if (!v1578)
    {
LABEL_2580:
      unint64_t v8 = (unint64_t)sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)a2, v1581);
      if (v8) {
        return v8;
      }
      goto LABEL_1544;
    }
LABEL_2579:
    uint64_t v1584 = a1[3];
    WORD4(v1856) = 257;
    v1585 = sub_1CB845F20(v1584, 38, v941, v942, (uint64_t)&p_s2);
    __int16 v1865 = 257;
    v1581 = sub_1CB844AF4(v1584, v1581, (uint64_t)v1585, (uint64_t)&v1861);
    goto LABEL_2580;
  }
  switch(*((unsigned char *)v9 + 16))
  {
    case ')':
      if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20) {
        goto LABEL_1415;
      }
      int v99 = v1818;
      unint64_t v8 = (unint64_t)*(v9 - 4);
      v1823 = 0;
      unint64_t p_s2 = (unint64_t)&v1823;
      v1854 = 0;
      if ((sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v8) & 1) == 0) {
        goto LABEL_1415;
      }
      v1808 = (llvm::Constant *)v8;
      v1815 = v99;
      int v100 = (llvm::ConstantInt ***)*(v9 - 8);
      size_t v101 = (size_t)*v9;
      uint64_t v102 = *((_WORD *)a2 + 9) & 0x3F;
      if ((*((unsigned char *)v9 + 17) & 4) != 0 && (v102 == 38 || v102 == 40))
      {
        LOBYTE(v1849) = 0;
        llvm::APInt::ssub_ov(v99, v1823, (BOOL *)&v1849, (uint64_t)&v1861);
      }
      else
      {
        if ((*((unsigned char *)v9 + 17) & 2) == 0 || v102 != 34 && v102 != 36) {
          goto LABEL_206;
        }
        LOBYTE(v1849) = 0;
        llvm::APInt::usub_ov((uint64_t)v99, v1823, (BOOL *)&v1849, (uint64_t)&v1861);
      }
      int v155 = v1849;
      if (!(_BYTE)v1849)
      {
        unsigned int v156 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v156 + 16);
        v156[21] = v156[21] & 0x38000000 | 2;
        *(void *)unsigned int v156 = 0;
        *((void *)v156 + 1) = 0;
        *((void *)v156 + 2) = 0;
        *((void *)v156 + 3) = v156 + 16;
        *((void *)v156 + 4) = 0;
        *((void *)v156 + 5) = 0;
        *((void *)v156 + 6) = 0;
        *((void *)v156 + 7) = v156 + 16;
        uint64_t v158 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1861, v157);
        if ((*(_DWORD *)(v101 + 8) & 0xFE) == 0x12) {
          uint64_t v158 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v101 + 32) | ((unint64_t)(*(_DWORD *)(v101 + 8) == 19) << 32)), (uint64_t)v158);
        }
        WORD4(v1856) = 257;
        uint64_t v159 = *v100;
        uint64_t v160 = *(void *)**v100 + 1888;
        if (*v100 && (v159[1] & 0xFE) == 0x12)
        {
          v666 = (uint64_t **)(*(void *)**v100 + 1888);
          v667 = (llvm::Type *)*((unsigned int *)v159 + 8);
          if (*((_DWORD *)v159 + 2) == 19) {
            llvm::ScalableVectorType::get(v666, v667);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v666, v667);
          }
          uint64_t v160 = v668;
        }
        llvm::CmpInst::CmpInst((llvm::Value *)v8, v160, 53, v102, (uint64_t)v100, (uint64_t)v158, (const char **)&p_s2, 0, 0);
        int v99 = v1815;
      }
      if (p_s1 >= 0x41 && v1861) {
        MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
      }
      if (!v155) {
        goto LABEL_1414;
      }
LABEL_206:
      llvm::ConstantRange::makeExactICmpRegion(v102, (uint64_t)v99, (uint64_t)&p_s2);
      llvm::ConstantRange::subtract((unsigned int *)&p_s2, v1823, &v1849);
      if (v1856 >= 0x41 && v1855) {
        MEMORY[0x1D25D9CB0](v1855, 0x1000C8000313F17);
      }
      if (v1854 >= 0x41 && p_s2) {
        MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
      }
      if ((*((_WORD *)a2 + 9) & 0x3Eu) - 38 <= 3)
      {
        if (v1850[0] > 0x40)
        {
          if ((*((void *)v1849 + ((v1850[0] - 1) >> 6)) >> (LOBYTE(v1850[0]) - 1)))
          {
            unsigned int v880 = v1850[0] - 1;
            if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1849) == v880) {
              goto LABEL_211;
            }
          }
        }
        else if (v1849 == (void *)(1 << (LOBYTE(v1850[0]) - 1)))
        {
LABEL_211:
          int v161 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v161 + 16);
          v161[21] = v161[21] & 0x38000000 | 2;
          *(void *)int v161 = 0;
          *((void *)v161 + 1) = 0;
          *((void *)v161 + 2) = 0;
          *((void *)v161 + 3) = v161 + 16;
          *((void *)v161 + 4) = 0;
          *((void *)v161 + 5) = 0;
          *((void *)v161 + 6) = 0;
          *((void *)v161 + 7) = v161 + 16;
          unint64_t v163 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1851, v162);
          size_t v164 = v101;
          uint64_t v165 = v163;
          if ((*(_DWORD *)(v164 + 8) & 0xFE) == 0x12) {
            uint64_t v165 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v164 + 32) | ((unint64_t)(*(_DWORD *)(v164 + 8) == 19) << 32)), (uint64_t)v163);
          }
          WORD4(v1856) = 257;
          BOOL v166 = *v100;
          uint64_t v167 = *(void *)**v100 + 1888;
          if (*v100 && (v166[1] & 0xFE) == 0x12)
          {
            v669 = (uint64_t **)(*(void *)**v100 + 1888);
            v670 = (llvm::Type *)*((unsigned int *)v166 + 8);
            if (*((_DWORD *)v166 + 2) == 19) {
              llvm::ScalableVectorType::get(v669, v670);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v669, v670);
            }
            uint64_t v167 = v671;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v8, v167, 53, 40, (uint64_t)v100, (uint64_t)v165, (const char **)&p_s2, 0, 0);
          goto LABEL_1410;
        }
        if (v1852 > 0x40)
        {
          if ((*((void *)v1851 + ((v1852 - 1) >> 6)) >> (v1852 - 1)))
          {
            unsigned int v1126 = v1852 - 1;
            if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1851) == v1126) {
              goto LABEL_1405;
            }
          }
        }
        else if (v1851 == (llvm::APInt *)(1 << (v1852 - 1)))
        {
LABEL_1405:
          v881 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v881 + 16);
          v881[21] = v881[21] & 0x38000000 | 2;
          *(void *)v881 = 0;
          *((void *)v881 + 1) = 0;
          *((void *)v881 + 2) = 0;
          *((void *)v881 + 3) = v881 + 16;
          *((void *)v881 + 4) = 0;
          *((void *)v881 + 5) = 0;
          *((void *)v881 + 6) = 0;
          *((void *)v881 + 7) = v881 + 16;
          v883 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1849, v882);
          size_t v884 = v101;
          v885 = v883;
          if ((*(_DWORD *)(v884 + 8) & 0xFE) == 0x12) {
            v885 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v884 + 32) | ((unint64_t)(*(_DWORD *)(v884 + 8) == 19) << 32)), (uint64_t)v883);
          }
          WORD4(v1856) = 257;
          v886 = *v100;
          uint64_t v887 = *(void *)**v100 + 1888;
          if (*v100 && (v886[1] & 0xFE) == 0x12)
          {
            v1099 = (uint64_t **)(*(void *)**v100 + 1888);
            v1100 = (llvm::Type *)*((unsigned int *)v886 + 8);
            if (*((_DWORD *)v886 + 2) == 19) {
              llvm::ScalableVectorType::get(v1099, v1100);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1099, v1100);
            }
            uint64_t v887 = v1101;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v8, v887, 53, 39, (uint64_t)v100, (uint64_t)v885, (const char **)&p_s2, 0, 0);
          goto LABEL_1410;
        }
LABEL_1827:
        v1127 = (llvm::Type *)v101;
        if ((*(_DWORD *)(v101 + 8) & 0xFE) == 0x12) {
          v1127 = **(llvm::Type ***)(v101 + 16);
        }
        unsigned int v1128 = llvm::Type::getPrimitiveSizeInBits(v1127);
        unsigned int v1129 = v1128;
        unsigned int v1860 = v1128;
        if (v1128 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1859);
        }
        if (v1128) {
          unint64_t v1130 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1128;
        }
        else {
          unint64_t v1130 = 0;
        }
        uint64_t v1859 = v1130 & ~(1 << (v1128 - 1));
        v1131 = (llvm::Type *)v101;
        if ((*(_DWORD *)(v101 + 8) & 0xFE) == 0x12) {
          v1131 = **(llvm::Type ***)(v101 + 16);
        }
        unsigned int v1132 = llvm::Type::getPrimitiveSizeInBits(v1131);
        unsigned int v1848 = v1132;
        if (v1132 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
        }
        __s1 = (void *)(1 << (v1132 - 1));
        if (v102 == 34)
        {
          unsigned int v1133 = *((_DWORD *)v1823 + 2);
          if (v1133 >= 0x41) {
            operator new[]();
          }
          if (v1133) {
            unint64_t v1134 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1133;
          }
          else {
            unint64_t v1134 = 0;
          }
          v1135 = (const void *)(v1134 & (v1859 + *(void *)v1823));
          uint64_t v1139 = *((unsigned int *)v1815 + 2);
          if (v1139 > 0x40) {
            BOOL v1140 = memcmp(*(const void **)v1815, v1135, ((unint64_t)(v1139 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v1140 = *(void *)v1815 == (void)v1135;
          }
          if (v1140)
          {
            v1142 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v1142 + 16);
            v1142[21] = v1142[21] & 0x38000000 | 2;
            *(void *)v1142 = 0;
            *((void *)v1142 + 1) = 0;
            *((void *)v1142 + 2) = 0;
            *((void *)v1142 + 3) = v1142 + 16;
            *((void *)v1142 + 4) = 0;
            *((void *)v1142 + 5) = 0;
            *((void *)v1142 + 6) = 0;
            *((void *)v1142 + 7) = v1142 + 16;
            unsigned int v1143 = *((_DWORD *)v1823 + 2);
            unsigned int v1846 = v1143;
            if (v1143 > 0x40) {
              operator new[]();
            }
            if (v1143) {
              unint64_t v1144 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1143;
            }
            else {
              unint64_t v1144 = 0;
            }
            v1845 = (llvm::APInt *)(v1144 & ~*(void *)v1823);
            llvm::APInt::operator++((uint64_t)&v1845);
            LODWORD(p_s1) = v1846;
            uint64_t v1861 = (uint64_t)v1845;
            unsigned int v1846 = 0;
            v1152 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1861, v1151);
            size_t v1153 = v101;
            v1154 = v1152;
            if ((*(_DWORD *)(v1153 + 8) & 0xFE) == 0x12) {
              v1154 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v1153 + 32) | ((unint64_t)(*(_DWORD *)(v1153 + 8) == 19) << 32)), (uint64_t)v1152);
            }
            WORD4(v1856) = 257;
            v1155 = *v100;
            uint64_t v1156 = *(void *)**v100 + 1888;
            if (*v100 && (v1155[1] & 0xFE) == 0x12)
            {
              v1273 = (uint64_t **)(*(void *)**v100 + 1888);
              v1274 = (llvm::Type *)*((unsigned int *)v1155 + 8);
              if (*((_DWORD *)v1155 + 2) == 19) {
                llvm::ScalableVectorType::get(v1273, v1274);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1273, v1274);
              }
              uint64_t v1156 = v1275;
            }
            llvm::CmpInst::CmpInst((llvm::Value *)v8, v1156, 53, 40, (uint64_t)v100, (uint64_t)v1154, (const char **)&p_s2, 0, 0);
            if (p_s1 >= 0x41 && v1861) {
              MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
            }
            if (v1846 < 0x41) {
              goto LABEL_1964;
            }
            v1157 = v1845;
            if (!v1845) {
              goto LABEL_1964;
            }
            goto LABEL_1943;
          }
          goto LABEL_1893;
        }
        if (v102 != 40)
        {
          if (v102 == 38)
          {
            unsigned int v1842 = *((_DWORD *)v1823 + 2);
            if (v1842 > 0x40) {
              operator new[]();
            }
            __s2 = *(void **)v1823;
            llvm::APInt::operator-=((uint64_t)&__s2, 1uLL);
            unsigned int v1158 = v1842;
            v1159 = __s2;
            unsigned int v1842 = 0;
            uint64_t v1160 = *((unsigned int *)v1815 + 2);
            if (v1160 > 0x40)
            {
              unsigned int v1162 = v1158;
              int v1163 = memcmp(*(const void **)v1815, __s2, ((unint64_t)(v1160 + 63) >> 3) & 0x3FFFFFF8);
              unsigned int v1158 = v1162;
              BOOL v1161 = v1163 == 0;
            }
            else
            {
              BOOL v1161 = *(void *)v1815 == (void)__s2;
            }
            int v1164 = v1161;
            if (v1158 >= 0x41)
            {
              if (v1159)
              {
                MEMORY[0x1D25D9CB0](v1159, 0x1000C8000313F17);
                if (v1842 >= 0x41)
                {
                  if (__s2) {
                    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                  }
                }
              }
            }
            if (v1164)
            {
              size_t v1165 = v101;
              v1166 = operator new(0x80uLL);
              v1166[21] = v1166[21] & 0x38000000 | 2;
              unint64_t v8 = (unint64_t)(v1166 + 16);
              *(void *)v1166 = 0;
              *((void *)v1166 + 1) = 0;
              *((void *)v1166 + 2) = 0;
              *((void *)v1166 + 3) = v1166 + 16;
              *((void *)v1166 + 4) = 0;
              *((void *)v1166 + 5) = 0;
              *((void *)v1166 + 6) = 0;
              *((void *)v1166 + 7) = v1166 + 16;
              if (v1129 >= 0x41) {
                operator new[]();
              }
              uint64_t v1168 = v1859 - *(void *)v1815;
              if (v1129) {
                unint64_t v1169 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1129;
              }
              else {
                unint64_t v1169 = 0;
              }
              LODWORD(p_s1) = v1129;
              uint64_t v1861 = v1169 & v1168;
              v1191 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1861, v1167);
              v1192 = v1191;
              if ((*(_DWORD *)(v1165 + 8) & 0xFE) == 0x12) {
                v1192 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v1165 + 32) | ((unint64_t)(*(_DWORD *)(v1165 + 8) == 19) << 32)), (uint64_t)v1191);
              }
              WORD4(v1856) = 257;
              v1193 = *v100;
              uint64_t v1194 = *(void *)**v100 + 1888;
              if (*v100 && (v1193[1] & 0xFE) == 0x12)
              {
                v1276 = (uint64_t **)(*(void *)**v100 + 1888);
                v1277 = (llvm::Type *)*((unsigned int *)v1193 + 8);
                if (*((_DWORD *)v1193 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1276, v1277);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1276, v1277);
                }
                uint64_t v1194 = v1278;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v1194, 53, 36, (uint64_t)v100, (uint64_t)v1192, (const char **)&p_s2, 0, 0);
              goto LABEL_1941;
            }
          }
          else if (v102 == 36)
          {
            size_t __nd = v101;
            unsigned int v1136 = *((_DWORD *)v1823 + 2);
            if (v1136 >= 0x41) {
              operator new[]();
            }
            if (v1136) {
              unint64_t v1137 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1136;
            }
            else {
              unint64_t v1137 = 0;
            }
            v1138 = (const void *)(v1137 & ((unint64_t)__s1 + *(void *)v1823));
            uint64_t v1176 = *((unsigned int *)v1815 + 2);
            if (v1176 > 0x40) {
              BOOL v1177 = memcmp(*(const void **)v1815, v1138, ((unint64_t)(v1176 + 63) >> 3) & 0x3FFFFFF8) == 0;
            }
            else {
              BOOL v1177 = *(void *)v1815 == (void)v1138;
            }
            if (!v1177)
            {
              int v1170 = 1;
              goto LABEL_1894;
            }
            v1179 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v1179 + 16);
            v1179[21] = v1179[21] & 0x38000000 | 2;
            *(void *)v1179 = 0;
            *((void *)v1179 + 1) = 0;
            *((void *)v1179 + 2) = 0;
            *((void *)v1179 + 3) = v1179 + 16;
            *((void *)v1179 + 4) = 0;
            *((void *)v1179 + 5) = 0;
            *((void *)v1179 + 6) = 0;
            *((void *)v1179 + 7) = v1179 + 16;
            unsigned int v1181 = *((_DWORD *)v1823 + 2);
            unsigned int v1844 = v1181;
            if (v1181 > 0x40) {
              operator new[]();
            }
            if (v1181) {
              unint64_t v1182 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1181;
            }
            else {
              unint64_t v1182 = 0;
            }
            v1183 = (uint64_t *)(v1182 & ~*(void *)v1823);
            LODWORD(p_s1) = v1181;
            uint64_t v1861 = (uint64_t)v1183;
            v1195 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1861, v1180);
            v1196 = v1195;
            if ((*(_DWORD *)(__nd + 8) & 0xFE) == 0x12) {
              v1196 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(__nd + 32) | ((unint64_t)(*(_DWORD *)(__nd + 8) == 19) << 32)), (uint64_t)v1195);
            }
            WORD4(v1856) = 257;
            v1197 = *v100;
            uint64_t v1198 = *(void *)**v100 + 1888;
            if (*v100 && (v1197[1] & 0xFE) == 0x12)
            {
              v1279 = (uint64_t **)(*(void *)**v100 + 1888);
              v1280 = (llvm::Type *)*((unsigned int *)v1197 + 8);
              if (*((_DWORD *)v1197 + 2) == 19) {
                llvm::ScalableVectorType::get(v1279, v1280);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1279, v1280);
              }
              uint64_t v1198 = v1281;
            }
            llvm::CmpInst::CmpInst((llvm::Value *)v8, v1198, 53, 38, (uint64_t)v100, (uint64_t)v1196, (const char **)&p_s2, 0, 0);
LABEL_1941:
            if (p_s1 < 0x41) {
              goto LABEL_1964;
            }
            v1157 = (llvm::APInt *)v1861;
            if (!v1861) {
              goto LABEL_1964;
            }
            goto LABEL_1943;
          }
LABEL_1893:
          int v1170 = 0;
LABEL_1894:
          v1145 = (int8x8_t *)v1815;
LABEL_1895:
          v1171 = v9[1];
          if (!v1171 || v1171[1]) {
            goto LABEL_1963;
          }
          size_t __ne = v101;
          if (v1170)
          {
            uint64_t v1172 = v1145[1].u32[0];
            if (v1172 > 0x40)
            {
              int v1184 = 0;
              unint64_t v1185 = (unint64_t)(v1172 + 63) >> 6;
              v1186 = (int8x8_t *)*v1145;
              do
              {
                int8x8_t v1187 = *v1186++;
                uint8x8_t v1188 = (uint8x8_t)vcnt_s8(v1187);
                v1188.i16[0] = vaddlv_u8(v1188);
                v1184 += v1188.i32[0];
                --v1185;
              }
              while (v1185);
              v1145 = (int8x8_t *)v1815;
              if (v1184 == 1)
              {
                unsigned int v1840 = v1172;
                operator new[]();
              }
              goto LABEL_1960;
            }
            v1173 = (llvm::APInt *)*v1145;
            uint8x8_t v1174 = (uint8x8_t)vcnt_s8(*v1145);
            v1174.i16[0] = vaddlv_u8(v1174);
            if (v1174.u32[0] != 1) {
              goto LABEL_1960;
            }
            v1175 = v1823;
            unsigned int v1840 = v1145[1].u32[0];
            v1839 = v1173;
            llvm::APInt::operator-=((uint64_t)&v1839, 1uLL);
            uint64_t v1189 = v1840;
            v1190 = v1839;
            unsigned int v1840 = 0;
            if (v1189 < 0x41)
            {
              v1145 = (int8x8_t *)v1815;
              if ((*(void *)v1175 & (unint64_t)v1839) == 0) {
                goto LABEL_2031;
              }
              goto LABEL_1960;
            }
            uint64_t v1203 = 0;
            uint64_t v1204 = *(void *)v1175;
            int64_t v1205 = (unint64_t)(v1189 + 63) >> 6;
            do
            {
              *(void *)((char *)v1190 + v1203) &= *(void *)(v1204 + v1203);
              v1203 += 8;
            }
            while (8 * v1205 != v1203);
            int v1206 = 0;
            do
            {
              BOOL v109 = v1205-- < 1;
              if (v109) {
                break;
              }
              unint64_t v1207 = *((void *)v1190 + v1205);
              v1206 += __clz(v1207);
            }
            while (!v1207);
            int v1208 = v1189 | 0xFFFFFFC0;
            if ((v1189 & 0x3F) == 0) {
              int v1208 = 0;
            }
            if ((v1189 - v1206 - v1208) >= 0x41)
            {
              v1145 = (int8x8_t *)v1815;
              if (!v1190) {
                goto LABEL_1960;
              }
              BOOL v1209 = 0;
            }
            else
            {
              BOOL v1209 = *(void *)v1190 == 0;
              if (!v1190)
              {
                v1145 = (int8x8_t *)v1815;
                if (!MEMORY[0])
                {
LABEL_2031:
                  v1255 = operator new(0x80uLL);
                  unint64_t v8 = (unint64_t)(v1255 + 16);
                  v1255[21] = v1255[21] & 0x38000000 | 2;
                  *(void *)v1255 = 0;
                  *((void *)v1255 + 1) = 0;
                  *((void *)v1255 + 2) = 0;
                  *((void *)v1255 + 3) = v1255 + 16;
                  *((void *)v1255 + 4) = 0;
                  *((void *)v1255 + 5) = 0;
                  *((void *)v1255 + 6) = 0;
                  *((void *)v1255 + 7) = v1255 + 16;
                  uint64_t v1256 = a1[3];
                  unsigned int v1257 = v1145[1].u32[0];
                  unsigned int v1836 = v1257;
                  if (v1257 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v1258 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1257;
                  if (!v1257) {
                    unint64_t v1258 = 0;
                  }
                  v1835 = (llvm::APInt *)(v1258 & ~*(void *)v1815);
                  llvm::APInt::operator++((uint64_t)&v1835);
                  unsigned int v1838 = v1836;
                  v1837 = v1835;
                  unsigned int v1836 = 0;
                  __int16 v1865 = 257;
                  v1259 = *v100;
                  v1261 = llvm::ConstantInt::get(**v100, (llvm::LLVMContext *)&v1837, v1260);
                  if ((v1259[1] & 0xFE) == 0x12) {
                    v1261 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1259 + 8) | ((unint64_t)(*((_DWORD *)v1259 + 2) == 19) << 32)), (uint64_t)v1261);
                  }
                  v1264 = sub_1CBF52474(v1256, v100, (uint64_t)v1261, (uint64_t)&v1861);
                  v1265 = *(llvm::ConstantFP **)v1808;
                  if ((*(_DWORD *)(*(void *)v1808 + 8) & 0xFE) == 0x12) {
                    unsigned int v1266 = *(unsigned __int8 *)(**((void **)v1265 + 2) + 8);
                  }
                  else {
                    unsigned int v1266 = *(_DWORD *)(*(void *)v1808 + 8);
                  }
                  if (v1266 <= 6) {
                    Zero = llvm::ConstantFP::getZero(v1265, (llvm::Type *)1, v1263);
                  }
                  else {
                    Zero = llvm::Constant::getNullValue(v1265, v1262, v1263);
                  }
                  v1269 = (uint64_t *)Zero;
                  uint64_t v1270 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v1808, v1268);
                  if (!v1270)
                  {
                    v1364 = (void **)*v1269;
                    if (*v1269)
                    {
                      v1866 = v1269;
                      v1867 = v1808;
                      uint64_t v1365 = **v1364 + 1512;
                      LODWORD(p_s2) = 15;
                      v1854 = (llvm::APInt **)&v1866;
                      uint64_t v1855 = 2;
                      long long v1856 = 0u;
                      long long v1857 = 0u;
                      uint64_t v1858 = 0;
                      uint64_t v1270 = sub_1CC56C20C(v1365, (uint64_t)v1364, (unsigned __int8 *)&p_s2);
                    }
                    else
                    {
                      uint64_t v1270 = 0;
                    }
                  }
                  WORD4(v1856) = 257;
                  v1271 = *(void ***)v1264;
                  uint64_t v1272 = ***(void ***)v1264 + 1888;
                  if (*(void *)v1264 && (v1271[1] & 0xFE) == 0x12)
                  {
                    v1291 = (uint64_t **)(***(void ***)v1264 + 1888);
                    v1292 = (llvm::Type *)*((unsigned int *)v1271 + 8);
                    if (*((_DWORD *)v1271 + 2) == 19) {
                      llvm::ScalableVectorType::get(v1291, v1292);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v1291, v1292);
                    }
                    uint64_t v1272 = v1293;
                  }
                  llvm::CmpInst::CmpInst((llvm::Value *)v8, v1272, 53, 32, (uint64_t)v1264, v1270, (const char **)&p_s2, 0, 0);
                  if (v1838 >= 0x41 && v1837) {
                    MEMORY[0x1D25D9CB0](v1837, 0x1000C8000313F17);
                  }
                  if (v1836 < 0x41) {
                    goto LABEL_1964;
                  }
                  v1157 = v1835;
                  if (!v1835) {
                    goto LABEL_1964;
                  }
                  goto LABEL_1943;
                }
                goto LABEL_1960;
              }
            }
            MEMORY[0x1D25D9CB0]();
            if (v1840 >= 0x41 && v1839)
            {
              MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
              v1145 = (int8x8_t *)v1815;
              if (v1209) {
                goto LABEL_2031;
              }
            }
            else
            {
              v1145 = (int8x8_t *)v1815;
              if (v1209) {
                goto LABEL_2031;
              }
            }
          }
LABEL_1960:
          if (v102 == 34)
          {
            unsigned int v1834 = v1145[1].u32[0];
            if (v1834 > 0x40) {
              operator new[]();
            }
            v1833 = (llvm::APInt *)*v1145;
            llvm::APInt::operator+=((uint64_t)&v1833, 1uLL);
            uint64_t v1210 = v1834;
            v1211 = v1833;
            unsigned int v1834 = 0;
            if (v1210 > 0x40)
            {
              int v1213 = 0;
              unint64_t v1214 = (unint64_t)(v1210 + 63) >> 6;
              do
              {
                int8x8_t v1215 = *(int8x8_t *)v1211;
                v1211 = (llvm::APInt *)((char *)v1211 + 8);
                uint8x8_t v1216 = (uint8x8_t)vcnt_s8(v1215);
                v1216.i16[0] = vaddlv_u8(v1216);
                v1213 += v1216.i32[0];
                --v1214;
              }
              while (v1214);
              if (v1213 != 1)
              {
                BOOL v1217 = 0;
                goto LABEL_1982;
              }
            }
            else
            {
              uint8x8_t v1212 = (uint8x8_t)vcnt_s8((int8x8_t)v1833);
              v1212.i16[0] = vaddlv_u8(v1212);
              if (v1212.u32[0] != 1)
              {
LABEL_1987:
                v1218 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v1218 + 16);
                v1218[21] = v1218[21] & 0x38000000 | 2;
                *(void *)v1218 = 0;
                *((void *)v1218 + 1) = 0;
                *((void *)v1218 + 2) = 0;
                *((void *)v1218 + 3) = v1218 + 16;
                *((void *)v1218 + 4) = 0;
                *((void *)v1218 + 5) = 0;
                *((void *)v1218 + 6) = 0;
                *((void *)v1218 + 7) = v1218 + 16;
                uint64_t v1219 = a1[3];
                unsigned int v1220 = *((_DWORD *)v1823 + 2);
                if (v1220 >= 0x41) {
                  operator new[]();
                }
                uint64_t v1221 = *(void *)v1823 - *(void *)v1815;
                unint64_t v1222 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1220;
                if (!v1220) {
                  unint64_t v1222 = 0;
                }
                unsigned int v1830 = *((_DWORD *)v1823 + 2);
                unint64_t v1829 = v1222 & v1221;
                llvm::APInt::operator-=((uint64_t)&v1829, 1uLL);
                LODWORD(v1867) = v1830;
                v1866 = (uint64_t *)v1829;
                unsigned int v1830 = 0;
                v1230 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)__ne, (llvm::LLVMContext *)&v1866, v1229);
                v1231 = v1230;
                if ((*(_DWORD *)(__ne + 8) & 0xFE) == 0x12) {
                  v1231 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(__ne + 32) | ((unint64_t)(*(_DWORD *)(__ne + 8) == 19) << 32)), (uint64_t)v1230);
                }
                WORD4(v1856) = 257;
                v1233 = sub_1CB844A3C(v1219, v100, (uint64_t)v1231, (uint64_t)&p_s2, 0, 0);
                unsigned int v1234 = *((_DWORD *)v1815 + 2);
                unsigned int v1828 = v1234;
                if (v1234 > 0x40) {
                  operator new[]();
                }
                unint64_t v1235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1234;
                if (!v1234) {
                  unint64_t v1235 = 0;
                }
                v1236 = (llvm::APInt *)(v1235 & ~*(void *)v1815);
                unsigned int v1838 = v1234;
                v1837 = v1236;
                v1237 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)__ne, (llvm::LLVMContext *)&v1837, v1232);
                v1238 = v1237;
                if ((*(_DWORD *)(__ne + 8) & 0xFE) == 0x12) {
                  v1238 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(__ne + 32) | ((unint64_t)(*(_DWORD *)(__ne + 8) == 19) << 32)), (uint64_t)v1237);
                }
                __int16 v1865 = 257;
                v1239 = *(void ***)v1233;
                uint64_t v1240 = ***(void ***)v1233 + 1888;
                if (*(void *)v1233 && (v1239[1] & 0xFE) == 0x12)
                {
                  v1285 = (uint64_t **)(***(void ***)v1233 + 1888);
                  v1286 = (llvm::Type *)*((unsigned int *)v1239 + 8);
                  if (*((_DWORD *)v1239 + 2) == 19) {
                    llvm::ScalableVectorType::get(v1285, v1286);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v1285, v1286);
                  }
                  uint64_t v1240 = v1287;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v1240, 53, 36, (uint64_t)v1233, (uint64_t)v1238, (const char **)&v1861, 0, 0);
                if (v1838 >= 0x41 && v1837) {
                  MEMORY[0x1D25D9CB0](v1837, 0x1000C8000313F17);
                }
                if (v1867 >= 0x41 && v1866) {
                  MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
                }
                if (v1830 < 0x41) {
                  goto LABEL_1964;
                }
                v1157 = (llvm::APInt *)v1829;
                if (!v1829) {
                  goto LABEL_1964;
                }
                goto LABEL_1943;
              }
            }
            if (*((_DWORD *)v1823 + 2) >= 0x41u) {
              operator new[]();
            }
            BOOL v1217 = (*(void *)v1815 & *(void *)v1823) == 0;
            if (v1210 < 0x41)
            {
LABEL_1984:
              if (v1834 >= 0x41 && v1833)
              {
                MEMORY[0x1D25D9CB0](v1833, 0x1000C8000313F17);
                if (!v1217) {
                  goto LABEL_1987;
                }
              }
              else if (!v1217)
              {
                goto LABEL_1987;
              }
              v1223 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v1223 + 16);
              v1223[21] = v1223[21] & 0x38000000 | 2;
              *(void *)v1223 = 0;
              *((void *)v1223 + 1) = 0;
              *((void *)v1223 + 2) = 0;
              *((void *)v1223 + 3) = v1223 + 16;
              *((void *)v1223 + 4) = 0;
              *((void *)v1223 + 5) = 0;
              *((void *)v1223 + 6) = 0;
              *((void *)v1223 + 7) = v1223 + 16;
              uint64_t v1225 = a1[3];
              unsigned int v1226 = *((_DWORD *)v1815 + 2);
              unsigned int v1832 = v1226;
              if (v1226 > 0x40) {
                operator new[]();
              }
              unint64_t v1227 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1226;
              if (!v1226) {
                unint64_t v1227 = 0;
              }
              v1228 = (llvm::APInt *)(v1227 & ~*(void *)v1815);
              unsigned int v1838 = v1226;
              v1837 = v1228;
              __int16 v1865 = 257;
              v1241 = *v100;
              v1242 = (llvm::Value *)llvm::ConstantInt::get(**v100, (llvm::LLVMContext *)&v1837, v1224);
              v1243 = v1242;
              if ((v1241[1] & 0xFE) == 0x12) {
                v1243 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1241 + 8) | ((unint64_t)(*((_DWORD *)v1241 + 2) == 19) << 32)), (uint64_t)v1242);
              }
              v1246 = sub_1CBF52474(v1225, v100, (uint64_t)v1243, (uint64_t)&v1861);
              v1247 = *(llvm::ConstantFP **)v1808;
              if ((*(_DWORD *)(*(void *)v1808 + 8) & 0xFE) == 0x12) {
                unsigned int v1248 = *(unsigned __int8 *)(**((void **)v1247 + 2) + 8);
              }
              else {
                unsigned int v1248 = *(_DWORD *)(*(void *)v1808 + 8);
              }
              if (v1248 <= 6) {
                v1249 = llvm::ConstantFP::getZero(v1247, (llvm::Type *)1, v1245);
              }
              else {
                v1249 = llvm::Constant::getNullValue(v1247, v1244, v1245);
              }
              v1251 = (uint64_t *)v1249;
              uint64_t v1252 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v1249, v1808, v1250);
              if (!v1252)
              {
                v1362 = (void **)*v1251;
                if (*v1251)
                {
                  v1866 = v1251;
                  v1867 = v1808;
                  uint64_t v1363 = **v1362 + 1512;
                  LODWORD(p_s2) = 15;
                  v1854 = (llvm::APInt **)&v1866;
                  uint64_t v1855 = 2;
                  long long v1856 = 0u;
                  long long v1857 = 0u;
                  uint64_t v1858 = 0;
                  uint64_t v1252 = sub_1CC56C20C(v1363, (uint64_t)v1362, (unsigned __int8 *)&p_s2);
                }
                else
                {
                  uint64_t v1252 = 0;
                }
              }
              WORD4(v1856) = 257;
              v1253 = *(void ***)v1246;
              uint64_t v1254 = ***(void ***)v1246 + 1888;
              if (*(void *)v1246 && (v1253[1] & 0xFE) == 0x12)
              {
                v1288 = (uint64_t **)(***(void ***)v1246 + 1888);
                v1289 = (llvm::Type *)*((unsigned int *)v1253 + 8);
                if (*((_DWORD *)v1253 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1288, v1289);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1288, v1289);
                }
                uint64_t v1254 = v1290;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v1254, 53, 33, (uint64_t)v1246, v1252, (const char **)&p_s2, 0, 0);
              if (v1838 < 0x41) {
                goto LABEL_1964;
              }
              v1157 = v1837;
              if (!v1837) {
                goto LABEL_1964;
              }
LABEL_1943:
              MEMORY[0x1D25D9CB0](v1157, 0x1000C8000313F17);
              goto LABEL_1964;
            }
LABEL_1982:
            if (v1833) {
              MEMORY[0x1D25D9CB0](v1833, 0x1000C8000313F17);
            }
            goto LABEL_1984;
          }
LABEL_1963:
          unint64_t v8 = 0;
LABEL_1964:
          if (v1848 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v1860 >= 0x41 && v1859) {
            MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
          }
          goto LABEL_1410;
        }
        v1145 = (int8x8_t *)v1815;
        uint64_t v1146 = *((unsigned int *)v1815 + 2);
        if (v1146 > 0x40)
        {
          if (!memcmp(*(const void **)v1815, *(const void **)v1823, ((unint64_t)(v1146 + 63) >> 3) & 0x3FFFFFF8)) {
            goto LABEL_1863;
          }
        }
        else if (*(void *)v1815 == *(void *)v1823)
        {
LABEL_1863:
          size_t v1147 = v101;
          v1148 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1148 + 16);
          v1148[21] = v1148[21] & 0x38000000 | 2;
          *(void *)v1148 = 0;
          *((void *)v1148 + 1) = 0;
          *((void *)v1148 + 2) = 0;
          *((void *)v1148 + 3) = v1148 + 16;
          *((void *)v1148 + 4) = 0;
          *((void *)v1148 + 5) = 0;
          *((void *)v1148 + 6) = 0;
          *((void *)v1148 + 7) = v1148 + 16;
          if (*((_DWORD *)v1815 + 2) > 0x40u) {
            operator new[]();
          }
          v1150 = (uint64_t *)(v1859 ^ *(void *)v1815);
          LODWORD(p_s1) = *((_DWORD *)v1815 + 2);
          uint64_t v1861 = (uint64_t)v1150;
          v1199 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v1147, (llvm::LLVMContext *)&v1861, v1149);
          v1200 = v1199;
          if ((*(_DWORD *)(v1147 + 8) & 0xFE) == 0x12) {
            v1200 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v1147 + 32) | ((unint64_t)(*(_DWORD *)(v1147 + 8) == 19) << 32)), (uint64_t)v1199);
          }
          WORD4(v1856) = 257;
          v1201 = *v100;
          uint64_t v1202 = *(void *)**v100 + 1888;
          if (*v100 && (v1201[1] & 0xFE) == 0x12)
          {
            v1282 = (uint64_t **)(*(void *)**v100 + 1888);
            v1283 = (llvm::Type *)*((unsigned int *)v1201 + 8);
            if (*((_DWORD *)v1201 + 2) == 19) {
              llvm::ScalableVectorType::get(v1282, v1283);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1282, v1283);
            }
            uint64_t v1202 = v1284;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v8, v1202, 53, 34, (uint64_t)v100, (uint64_t)v1200, (const char **)&p_s2, 0, 0);
          goto LABEL_1941;
        }
        int v1170 = 0;
        goto LABEL_1895;
      }
      if (v1850[0] > 0x40)
      {
        int v261 = 0;
        int64_t v262 = ((unint64_t)v1850[0] + 63) >> 6;
        do
        {
          BOOL v109 = v262-- < 1;
          if (v109) {
            break;
          }
          unint64_t v263 = *((void *)v1849 + v262);
          v261 += __clz(v263);
        }
        while (!v263);
        unsigned int v264 = v1850[0] | 0xFFFFFFC0;
        if ((v1850[0] & 0x3F) == 0) {
          unsigned int v264 = 0;
        }
        if (v261 + v264 != v1850[0]) {
          goto LABEL_324;
        }
      }
      else if (v1849)
      {
LABEL_324:
        if (v1852 > 0x40)
        {
          int v273 = 0;
          int64_t v274 = ((unint64_t)v1852 + 63) >> 6;
          do
          {
            BOOL v109 = v274-- < 1;
            if (v109) {
              break;
            }
            unint64_t v275 = *((void *)v1851 + v274);
            v273 += __clz(v275);
          }
          while (!v275);
          unsigned int v276 = v1852 | 0xFFFFFFC0;
          if ((v1852 & 0x3F) == 0) {
            unsigned int v276 = 0;
          }
          if (v273 + v276 != v1852) {
            goto LABEL_1827;
          }
        }
        else if (v1851)
        {
          goto LABEL_1827;
        }
        int v277 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v277 + 16);
        v277[21] = v277[21] & 0x38000000 | 2;
        *(void *)int v277 = 0;
        *((void *)v277 + 1) = 0;
        *((void *)v277 + 2) = 0;
        *((void *)v277 + 3) = v277 + 16;
        *((void *)v277 + 4) = 0;
        *((void *)v277 + 5) = 0;
        *((void *)v277 + 6) = 0;
        *((void *)v277 + 7) = v277 + 16;
        uint64_t v279 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1849, v278);
        size_t v280 = v101;
        int64_t v281 = v279;
        if ((*(_DWORD *)(v280 + 8) & 0xFE) == 0x12) {
          int64_t v281 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v280 + 32) | ((unint64_t)(*(_DWORD *)(v280 + 8) == 19) << 32)), (uint64_t)v279);
        }
        WORD4(v1856) = 257;
        uint64_t v282 = *v100;
        uint64_t v283 = *(void *)**v100 + 1888;
        if (*v100 && (v282[1] & 0xFE) == 0x12)
        {
          v741 = (uint64_t **)(*(void *)**v100 + 1888);
          v742 = (llvm::Type *)*((unsigned int *)v282 + 8);
          if (*((_DWORD *)v282 + 2) == 19) {
            llvm::ScalableVectorType::get(v741, v742);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v741, v742);
          }
          uint64_t v283 = v743;
        }
        llvm::CmpInst::CmpInst((llvm::Value *)v8, v283, 53, 35, (uint64_t)v100, (uint64_t)v281, (const char **)&p_s2, 0, 0);
LABEL_1410:
        if (v1852 >= 0x41)
        {
          uint64_t v419 = v1851;
          if (v1851) {
            goto LABEL_636;
          }
        }
        goto LABEL_1411;
      }
      uint64_t v265 = operator new(0x80uLL);
      unint64_t v8 = (unint64_t)(v265 + 16);
      v265[21] = v265[21] & 0x38000000 | 2;
      *(void *)uint64_t v265 = 0;
      *((void *)v265 + 1) = 0;
      *((void *)v265 + 2) = 0;
      *((void *)v265 + 3) = v265 + 16;
      *((void *)v265 + 4) = 0;
      *((void *)v265 + 5) = 0;
      *((void *)v265 + 6) = 0;
      *((void *)v265 + 7) = v265 + 16;
      int v267 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v101, (llvm::LLVMContext *)&v1851, v266);
      size_t v268 = v101;
      int v269 = v267;
      if ((*(_DWORD *)(v268 + 8) & 0xFE) == 0x12) {
        int v269 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v268 + 32) | ((unint64_t)(*(_DWORD *)(v268 + 8) == 19) << 32)), (uint64_t)v267);
      }
      WORD4(v1856) = 257;
      int64_t v270 = *v100;
      uint64_t v271 = *(void *)**v100 + 1888;
      if (*v100 && (v270[1] & 0xFE) == 0x12)
      {
        v687 = (uint64_t **)(*(void *)**v100 + 1888);
        v688 = (llvm::Type *)*((unsigned int *)v270 + 8);
        if (*((_DWORD *)v270 + 2) == 19) {
          llvm::ScalableVectorType::get(v687, v688);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v687, v688);
        }
        uint64_t v271 = v689;
      }
      llvm::CmpInst::CmpInst((llvm::Value *)v8, v271, 53, 36, (uint64_t)v100, (uint64_t)v269, (const char **)&p_s2, 0, 0);
      goto LABEL_1410;
    case '+':
      uint64_t v103 = (unsigned int *)v1818;
      uint64_t v104 = (unsigned __int8 *)*(v9 - 8);
      unsigned int v14 = (llvm::ConstantInt ***)*(v9 - 4);
      uint64_t v105 = *((_WORD *)a2 + 9) & 0x3F;
      unint64_t v106 = *v9;
      if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20)
      {
        unsigned int v107 = v104[16];
        BOOL v108 = v107 == 5 || v104 == 0;
        BOOL v109 = v108 || v107 > 0x14;
        if (!v109)
        {
          uint64_t v128 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v128 + 16);
          v128[21] = v128[21] & 0x38000000 | 2;
          *(void *)uint64_t v128 = 0;
          *((void *)v128 + 1) = 0;
          *((void *)v128 + 2) = 0;
          *((void *)v128 + 3) = v128 + 16;
          *((void *)v128 + 4) = 0;
          *((void *)v128 + 5) = 0;
          *((void *)v128 + 6) = 0;
          *((void *)v128 + 7) = v128 + 16;
          uint64_t v130 = (llvm::Constant *)llvm::ConstantInt::get(*v106, (llvm::LLVMContext *)v103, v129);
          int v131 = v130;
          if ((v106[1] & 0xFE) == 0x12) {
            int v131 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v106 + 8) | ((unint64_t)(*((_DWORD *)v106 + 2) == 19) << 32)), (uint64_t)v130);
          }
          uint64_t Sub = (uint64_t)llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v104, v131, 0, 0);
          WORD4(v1856) = 257;
          BOOL v133 = *v14;
          uint64_t v134 = *(void *)**v14 + 1888;
          if (*v14 && (v133[1] & 0xFE) == 0x12)
          {
            uint64_t v480 = (uint64_t **)(*(void *)**v14 + 1888);
            uint64_t v481 = (llvm::Type *)*((unsigned int *)v133 + 8);
            if (*((_DWORD *)v133 + 2) == 19) {
              llvm::ScalableVectorType::get(v480, v481);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v480, v481);
            }
            uint64_t v134 = v482;
          }
          uint64_t v135 = (llvm::Value *)v8;
          __int16 v136 = v105;
          goto LABEL_174;
        }
      }
      v1837 = 0;
      v1850[0] = 1;
      v1849 = 0;
      int v110 = dword_1CFB279AC[v105];
      unsigned int v111 = *((unsigned __int8 *)v9 + 17);
      unint64_t p_s2 = (unint64_t)&v1837;
      v1854 = 0;
      if (sub_1CBF528D8((uint64_t)&p_s2, v104))
      {
        int v112 = (v111 >> 2) & 1;
        int v113 = *((_WORD *)a2 + 9) & 0x3F;
        BOOL v114 = (v113 - 34) < 4 && (v111 & 2) != 0;
        if ((v113 - 38) >= 4) {
          int v112 = 0;
        }
        if ((v114 || v112)
          && !sub_1CCA500F4((uint64_t)&v1849, v1837, (llvm::APInt *)v103, (v113 - 38) < 4))
        {
          __int16 v228 = v110;
          BOOL v229 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v229 + 16);
          v229[21] = v229[21] & 0x38000000 | 2;
          *(void *)BOOL v229 = 0;
          *((void *)v229 + 1) = 0;
          *((void *)v229 + 2) = 0;
          *((void *)v229 + 3) = v229 + 16;
          *((void *)v229 + 4) = 0;
          *((void *)v229 + 5) = 0;
          *((void *)v229 + 6) = 0;
          *((void *)v229 + 7) = v229 + 16;
          uint64_t v104 = (unsigned __int8 *)llvm::ConstantInt::get(*v106, (llvm::LLVMContext *)&v1849, v230);
          if ((v106[1] & 0xFE) == 0x12) {
            uint64_t v104 = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v106 + 8) | ((unint64_t)(*((_DWORD *)v106 + 2) == 19) << 32)), (uint64_t)v104);
          }
          WORD4(v1856) = 257;
          int v231 = *v14;
          uint64_t v175 = *(void *)**v14 + 1888;
          if (*v14 && (v231[1] & 0xFE) == 0x12)
          {
            v646 = (uint64_t **)(*(void *)**v14 + 1888);
            v647 = (llvm::Type *)*((unsigned int *)v231 + 8);
            if (*((_DWORD *)v231 + 2) == 19) {
              llvm::ScalableVectorType::get(v646, v647);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v646, v647);
            }
            uint64_t v175 = v648;
          }
          uint64_t v176 = (const char **)&p_s2;
          BOOL v177 = (llvm::Value *)v8;
          __int16 v178 = v228;
LABEL_332:
          uint64_t v179 = (uint64_t)v14;
          uint64_t v180 = (uint64_t)v104;
          goto LABEL_333;
        }
      }
      if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20) {
        goto LABEL_229;
      }
      uint64_t v115 = v103[2];
      if (v115 > 0x40)
      {
        int v168 = 0;
        int64_t v169 = (unint64_t)(v115 + 63) >> 6;
        do
        {
          BOOL v109 = v169-- < 1;
          if (v109) {
            break;
          }
          unint64_t v170 = *(void *)(*(void *)v103 + 8 * v169);
          v168 += __clz(v170);
        }
        while (!v170);
        int v171 = v115 | 0xFFFFFFC0;
        if ((v115 & 0x3F) == 0) {
          int v171 = 0;
        }
        if (v168 + v171 != v115) {
          goto LABEL_229;
        }
      }
      else if (*(void *)v103)
      {
        goto LABEL_229;
      }
      __int16 v172 = v9[1];
      if (!v172)
      {
LABEL_225:
        char v173 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v173 + 16);
        v173[21] = v173[21] & 0x38000000 | 2;
        *(void *)char v173 = 0;
        *((void *)v173 + 1) = 0;
        *((void *)v173 + 2) = 0;
        *((void *)v173 + 3) = v173 + 16;
        *((void *)v173 + 4) = 0;
        *((void *)v173 + 5) = 0;
        *((void *)v173 + 6) = 0;
        *((void *)v173 + 7) = v173 + 16;
        WORD4(v1856) = 257;
        uint64_t v174 = *(void *)v104;
        uint64_t v175 = ***(void ***)v104 + 1888;
        if (*(void *)v104 && (*(_DWORD *)(v174 + 8) & 0xFE) == 0x12)
        {
          v643 = (uint64_t **)(***(void ***)v104 + 1888);
          v644 = (llvm::Type *)*(unsigned int *)(v174 + 32);
          if (*(_DWORD *)(v174 + 8) == 19) {
            llvm::ScalableVectorType::get(v643, v644);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v643, v644);
          }
          uint64_t v175 = v645;
        }
        uint64_t v176 = (const char **)&p_s2;
        BOOL v177 = (llvm::Value *)v8;
        __int16 v178 = v105;
LABEL_228:
        uint64_t v179 = (uint64_t)v104;
        uint64_t v180 = (uint64_t)v14;
LABEL_333:
        llvm::CmpInst::CmpInst(v177, v175, 53, v178, v179, v180, v176, 0, 0);
        goto LABEL_1411;
      }
      while (*((unsigned char *)v172[3] + 16) != 83)
      {
        __int16 v172 = (llvm::ConstantInt **)v172[1];
        if (!v172) {
          goto LABEL_225;
        }
      }
LABEL_229:
      unint64_t v181 = v9[1];
      if (!v181 || v181[1])
      {
        unint64_t v8 = 0;
        goto LABEL_1411;
      }
      __int16 v1816 = v110;
      if ((*((unsigned char *)v9 + 17) & 4) != 0)
      {
        if (v105 != 38)
        {
          if (v105 != 40) {
            goto LABEL_526;
          }
          unsigned int v185 = v103[2];
          if (v185 > 0x40)
          {
            int v317 = 0;
            int64_t v318 = ((unint64_t)v185 + 63) >> 6;
            do
            {
              BOOL v109 = v318-- < 1;
              if (v109) {
                break;
              }
              unint64_t v319 = *(void *)(*(void *)v103 + 8 * v318);
              v317 += __clz(v319);
            }
            while (!v319);
            unsigned int v320 = v185 | 0xFFFFFFC0;
            if ((v185 & 0x3F) == 0) {
              unsigned int v320 = 0;
            }
            int v321 = v317 + v320;
            if (v321 != v185)
            {
              if (v321 != v185 - 1) {
                goto LABEL_526;
              }
LABEL_523:
              uint64_t v354 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v354 + 16);
              v354[21] = v354[21] & 0x38000000 | 2;
              *(void *)uint64_t v354 = 0;
              *((void *)v354 + 1) = 0;
              *((void *)v354 + 2) = 0;
              *((void *)v354 + 3) = v354 + 16;
              *((void *)v354 + 4) = 0;
              *((void *)v354 + 5) = 0;
              *((void *)v354 + 6) = 0;
              *((void *)v354 + 7) = v354 + 16;
              WORD4(v1856) = 257;
              uint64_t v355 = *(void *)v104;
              uint64_t v175 = ***(void ***)v104 + 1888;
              if (*(void *)v104 && (*(_DWORD *)(v355 + 8) & 0xFE) == 0x12)
              {
                v794 = (uint64_t **)(***(void ***)v104 + 1888);
                v795 = (llvm::Type *)*(unsigned int *)(v355 + 32);
                if (*(_DWORD *)(v355 + 8) == 19) {
                  llvm::ScalableVectorType::get(v794, v795);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v794, v795);
                }
                uint64_t v175 = v796;
              }
              uint64_t v176 = (const char **)&p_s2;
              BOOL v177 = (llvm::Value *)v8;
              __int16 v178 = 41;
              goto LABEL_228;
            }
          }
          else if (*(void *)v103)
          {
            if (*(void *)v103 != 1) {
              goto LABEL_526;
            }
            goto LABEL_523;
          }
          unsigned int v322 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v322 + 16);
          v322[21] = v322[21] & 0x38000000 | 2;
          *(void *)unsigned int v322 = 0;
          *((void *)v322 + 1) = 0;
          *((void *)v322 + 2) = 0;
          *((void *)v322 + 3) = v322 + 16;
          *((void *)v322 + 4) = 0;
          *((void *)v322 + 5) = 0;
          *((void *)v322 + 6) = 0;
          *((void *)v322 + 7) = v322 + 16;
          WORD4(v1856) = 257;
          uint64_t v323 = *(void *)v104;
          uint64_t v175 = ***(void ***)v104 + 1888;
          if (*(void *)v104 && (*(_DWORD *)(v323 + 8) & 0xFE) == 0x12)
          {
            v783 = (uint64_t **)(***(void ***)v104 + 1888);
            v784 = (llvm::Type *)*(unsigned int *)(v323 + 32);
            if (*(_DWORD *)(v323 + 8) == 19) {
              llvm::ScalableVectorType::get(v783, v784);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v783, v784);
            }
            uint64_t v175 = v785;
          }
          uint64_t v176 = (const char **)&p_s2;
          BOOL v177 = (llvm::Value *)v8;
          __int16 v178 = 40;
          goto LABEL_228;
        }
        uint64_t v287 = v103[2];
        if (!v287) {
          goto LABEL_519;
        }
        if (v287 <= 0x40)
        {
          if (*(void *)v103 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v287)
          {
            if (*(void *)v103) {
              goto LABEL_526;
            }
LABEL_656:
            uint64_t v438 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v438 + 16);
            v438[21] = v438[21] & 0x38000000 | 2;
            *(void *)uint64_t v438 = 0;
            *((void *)v438 + 1) = 0;
            *((void *)v438 + 2) = 0;
            *((void *)v438 + 3) = v438 + 16;
            *((void *)v438 + 4) = 0;
            *((void *)v438 + 5) = 0;
            *((void *)v438 + 6) = 0;
            *((void *)v438 + 7) = v438 + 16;
            WORD4(v1856) = 257;
            uint64_t v439 = *(void *)v104;
            uint64_t v175 = ***(void ***)v104 + 1888;
            if (*(void *)v104 && (*(_DWORD *)(v439 + 8) & 0xFE) == 0x12)
            {
              v812 = (uint64_t **)(***(void ***)v104 + 1888);
              v813 = (llvm::Type *)*(unsigned int *)(v439 + 32);
              if (*(_DWORD *)(v439 + 8) == 19) {
                llvm::ScalableVectorType::get(v812, v813);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v812, v813);
              }
              uint64_t v175 = v814;
            }
            uint64_t v176 = (const char **)&p_s2;
            BOOL v177 = (llvm::Value *)v8;
            __int16 v178 = 38;
            goto LABEL_228;
          }
LABEL_519:
          uint64_t v352 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v352 + 16);
          v352[21] = v352[21] & 0x38000000 | 2;
          *(void *)uint64_t v352 = 0;
          *((void *)v352 + 1) = 0;
          *((void *)v352 + 2) = 0;
          *((void *)v352 + 3) = v352 + 16;
          *((void *)v352 + 4) = 0;
          *((void *)v352 + 5) = 0;
          *((void *)v352 + 6) = 0;
          *((void *)v352 + 7) = v352 + 16;
          WORD4(v1856) = 257;
          uint64_t v353 = *(void *)v104;
          uint64_t v175 = ***(void ***)v104 + 1888;
          if (*(void *)v104 && (*(_DWORD *)(v353 + 8) & 0xFE) == 0x12)
          {
            v762 = (uint64_t **)(***(void ***)v104 + 1888);
            v763 = (llvm::Type *)*(unsigned int *)(v353 + 32);
            if (*(_DWORD *)(v353 + 8) == 19) {
              llvm::ScalableVectorType::get(v762, v763);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v762, v763);
            }
            uint64_t v175 = v764;
          }
          uint64_t v176 = (const char **)&p_s2;
          BOOL v177 = (llvm::Value *)v8;
          __int16 v178 = 39;
          goto LABEL_228;
        }
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v103) == v287) {
          goto LABEL_519;
        }
        int v434 = 0;
        int64_t v435 = (unint64_t)(v287 + 63) >> 6;
        do
        {
          BOOL v109 = v435-- < 1;
          if (v109) {
            break;
          }
          unint64_t v436 = *(void *)(*(void *)v103 + 8 * v435);
          v434 += __clz(v436);
        }
        while (!v436);
        int v437 = v287 | 0xFFFFFFC0;
        if ((v287 & 0x3F) == 0) {
          int v437 = 0;
        }
        if (v434 + v437 == v287) {
          goto LABEL_656;
        }
      }
LABEL_526:
      unint64_t p_s2 = (unint64_t)&v1837;
      v1854 = 0;
      unint64_t v8 = 0;
      if (!sub_1CBF528D8((uint64_t)&p_s2, v104)) {
        goto LABEL_1411;
      }
      if (v105 != 34)
      {
        if (v105 == 36)
        {
          uint64_t v356 = v103[2];
          if (v356 > 0x40)
          {
            int v360 = 0;
            unint64_t v361 = (unint64_t)(v356 + 63) >> 6;
            uint64_t v362 = *(int8x8_t **)v103;
            do
            {
              int8x8_t v363 = *v362++;
              uint8x8_t v364 = (uint8x8_t)vcnt_s8(v363);
              v364.i16[0] = vaddlv_u8(v364);
              v360 += v364.i32[0];
              --v361;
            }
            while (v361);
            if (v360 == 1)
            {
              LODWORD(v1867) = v103[2];
              operator new[]();
            }
          }
          else
          {
            char v357 = *(uint64_t **)v103;
            uint8x8_t v358 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v103);
            v358.i16[0] = vaddlv_u8(v358);
            if (v358.u32[0] == 1)
            {
              uint64_t v359 = v1837;
              LODWORD(v1867) = v103[2];
              v1866 = v357;
              llvm::APInt::operator-=((uint64_t)&v1866, 1uLL);
              int v365 = (llvm::Constant *)v1867;
              uint64_t v366 = v1866;
              LODWORD(v1867) = 0;
              v1809 = v365;
              if (v365 > 0x40)
              {
                uint64_t v394 = *(uint64_t **)v359;
                unint64_t v395 = ((unint64_t)v1809 + 63) >> 6;
                __src = v1866;
                do
                {
                  uint64_t v396 = *v394++;
                  *v366++ &= v396;
                  --v395;
                }
                while (v395);
              }
              else
              {
                __src = (uint64_t *)(*(void *)v359 & (unint64_t)v1866);
              }
              unsigned int v1860 = v103[2];
              if (v1860 > 0x40) {
                operator new[]();
              }
              uint64_t v1859 = *(void *)v103;
              llvm::APInt::operator-=((uint64_t)&v1859, 1uLL);
              unsigned int v397 = v1860;
              int v398 = (void *)v1859;
              unsigned int v1860 = 0;
              if (v1809 > 0x40) {
                BOOL v399 = memcmp(__src, (const void *)v1859, (((unint64_t)v1809 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else {
                BOOL v399 = __src == (uint64_t *)v1859;
              }
              int v400 = v399;
              int __n = v400;
              if (v397 >= 0x41)
              {
                if (v398)
                {
                  MEMORY[0x1D25D9CB0](v398, 0x1000C8000313F17);
                  if (v1860 >= 0x41)
                  {
                    if (v1859) {
                      MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
                    }
                  }
                }
              }
              if (v1809 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if (v1867 >= 0x41 && v1866) {
                MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
              }
              if (__n)
              {
                uint64_t v401 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v401 + 16);
                v401[21] = v401[21] & 0x38000000 | 2;
                *(void *)uint64_t v401 = 0;
                *((void *)v401 + 1) = 0;
                *((void *)v401 + 2) = 0;
                *((void *)v401 + 3) = v401 + 16;
                *((void *)v401 + 4) = 0;
                *((void *)v401 + 5) = 0;
                *((void *)v401 + 6) = 0;
                *((void *)v401 + 7) = v401 + 16;
                uint64_t v402 = a1[3];
                unsigned int v1846 = v103[2];
                if (v1846 > 0x40) {
                  operator new[]();
                }
                v1845 = *(llvm::APInt **)v103;
                llvm::APInt::operator-=((uint64_t)&v1845, 1uLL);
                unsigned int v1848 = v1846;
                __s1 = v1845;
                unsigned int v1846 = 0;
                WORD4(v1856) = 257;
                v441 = *v14;
                uint64_t v443 = (llvm::Value *)llvm::ConstantInt::get(**v14, (llvm::LLVMContext *)&__s1, v442);
                uint64_t v444 = v443;
                if ((v441[1] & 0xFE) == 0x12) {
                  uint64_t v444 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v441 + 8) | ((unint64_t)(*((_DWORD *)v441 + 2) == 19) << 32)), (uint64_t)v443);
                }
                uint64_t v445 = sub_1CB844AF4(v402, v14, (uint64_t)v444, (uint64_t)&p_s2);
                uint64_t v446 = (uint64_t)v445;
                __int16 v1865 = 257;
                v447 = *(void ***)v445;
                uint64_t v448 = ***(void ***)v445 + 1888;
                if (*(void *)v445 && (v447[1] & 0xFE) == 0x12)
                {
                  v809 = (uint64_t **)(***(void ***)v445 + 1888);
                  v810 = (llvm::Type *)*((unsigned int *)v447 + 8);
                  if (*((_DWORD *)v447 + 2) == 19) {
                    llvm::ScalableVectorType::get(v809, v810);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v809, v810);
                  }
                  uint64_t v448 = v811;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v448, 53, 32, v446, (uint64_t)v104, (const char **)&v1861, 0, 0);
                if (v1848 >= 0x41 && __s1) {
                  MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                }
                if (v1846 < 0x41) {
                  goto LABEL_1411;
                }
                uint64_t v419 = v1845;
                if (!v1845) {
                  goto LABEL_1411;
                }
                goto LABEL_636;
              }
            }
          }
        }
LABEL_615:
        uint64_t v403 = a1[3];
        unsigned int v404 = *((_DWORD *)v1837 + 2);
        unsigned int v1842 = v404;
        if (v404 > 0x40) {
          operator new[]();
        }
        unint64_t v405 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v404;
        if (!v404) {
          unint64_t v405 = 0;
        }
        uint64_t v406 = (uint64_t *)(v405 & ~*(void *)v1837);
        LODWORD(p_s1) = v404;
        uint64_t v1861 = (uint64_t)v406;
        uint64_t v407 = (llvm::Value *)llvm::ConstantInt::get(*v106, (llvm::LLVMContext *)&v1861, v6);
        unint64_t v408 = v407;
        if ((v106[1] & 0xFE) == 0x12) {
          unint64_t v408 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v106 + 8) | ((unint64_t)(*((_DWORD *)v106 + 2) == 19) << 32)), (uint64_t)v407);
        }
        unint64_t p_s2 = (unint64_t)"notsub";
        WORD4(v1856) = 259;
        int v409 = sub_1CB844A3C(v403, v14, (uint64_t)v408, (uint64_t)&p_s2, (v111 >> 1) & 1, (v111 >> 2) & 1);
        if (p_s1 >= 0x41 && v1861) {
          MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
        }
        uint64_t v410 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v410 + 16);
        v410[21] = v410[21] & 0x38000000 | 2;
        *(void *)uint64_t v410 = 0;
        *((void *)v410 + 1) = 0;
        *((void *)v410 + 2) = 0;
        *((void *)v410 + 3) = v410 + 16;
        *((void *)v410 + 4) = 0;
        *((void *)v410 + 5) = 0;
        *((void *)v410 + 6) = 0;
        *((void *)v410 + 7) = v410 + 16;
        unsigned int v412 = v103[2];
        unsigned int v1840 = v412;
        if (v412 > 0x40) {
          operator new[]();
        }
        unint64_t v413 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v412;
        if (!v412) {
          unint64_t v413 = 0;
        }
        uint64_t v414 = (uint64_t *)(v413 & ~*(void *)v103);
        LODWORD(p_s1) = v412;
        uint64_t v1861 = (uint64_t)v414;
        uint64_t v415 = (llvm::Value *)llvm::ConstantInt::get(*v106, (llvm::LLVMContext *)&v1861, v411);
        uint64_t v416 = v415;
        if ((v106[1] & 0xFE) == 0x12) {
          uint64_t v416 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v106 + 8) | ((unint64_t)(*((_DWORD *)v106 + 2) == 19) << 32)), (uint64_t)v415);
        }
        WORD4(v1856) = 257;
        uint64_t v417 = *(void ***)v409;
        uint64_t v418 = ***(void ***)v409 + 1888;
        if (*(void *)v409 && (v417[1] & 0xFE) == 0x12)
        {
          v690 = (uint64_t **)(***(void ***)v409 + 1888);
          v691 = (llvm::Type *)*((unsigned int *)v417 + 8);
          if (*((_DWORD *)v417 + 2) == 19) {
            llvm::ScalableVectorType::get(v690, v691);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v690, v691);
          }
          uint64_t v418 = v692;
        }
        llvm::CmpInst::CmpInst((llvm::Value *)v8, v418, 53, v1816, (uint64_t)v409, (uint64_t)v416, (const char **)&p_s2, 0, 0);
        if (p_s1 < 0x41 || (uint64_t v419 = (llvm::APInt *)v1861) == 0)
        {
LABEL_1411:
          if (v1850[0] < 0x41) {
            goto LABEL_1414;
          }
          uint64_t v32 = (uint64_t)v1849;
          if (!v1849) {
            goto LABEL_1414;
          }
          goto LABEL_1413;
        }
LABEL_636:
        MEMORY[0x1D25D9CB0](v419, 0x1000C8000313F17);
        goto LABEL_1411;
      }
      unsigned int v1844 = v103[2];
      if (v1844 > 0x40) {
        operator new[]();
      }
      v1843 = *(llvm::Type **)v103;
      llvm::APInt::operator+=((uint64_t)&v1843, 1uLL);
      uint64_t v367 = v1844;
      unsigned int v1844 = 0;
      if (v367 > 0x40)
      {
        int v369 = 0;
        unint64_t v370 = (unint64_t)(v367 + 63) >> 6;
        uint64_t v371 = v1843;
        do
        {
          int8x8_t v372 = *(int8x8_t *)v371;
          uint64_t v371 = (llvm::Type *)((char *)v371 + 8);
          uint8x8_t v373 = (uint8x8_t)vcnt_s8(v372);
          v373.i16[0] = vaddlv_u8(v373);
          v369 += v373.i32[0];
          --v370;
        }
        while (v370);
        if (v369 != 1)
        {
          BOOL v374 = 0;
LABEL_610:
          if (v1843) {
            MEMORY[0x1D25D9CB0](v1843, 0x1000C8000313F17);
          }
LABEL_612:
          if (v1844 >= 0x41 && v1843)
          {
            MEMORY[0x1D25D9CB0](v1843, 0x1000C8000313F17);
            if (!v374) {
              goto LABEL_615;
            }
          }
          else if (!v374)
          {
            goto LABEL_615;
          }
          BOOL v420 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v420 + 16);
          v420[21] = v420[21] & 0x38000000 | 2;
          *(void *)BOOL v420 = 0;
          *((void *)v420 + 1) = 0;
          *((void *)v420 + 2) = 0;
          *((void *)v420 + 3) = v420 + 16;
          *((void *)v420 + 4) = 0;
          *((void *)v420 + 5) = 0;
          *((void *)v420 + 6) = 0;
          *((void *)v420 + 7) = v420 + 16;
          uint64_t v421 = a1[3];
          WORD4(v1856) = 257;
          v422 = *v14;
          uint64_t v424 = llvm::ConstantInt::get(**v14, (llvm::LLVMContext *)v103, v423);
          if ((v422[1] & 0xFE) == 0x12) {
            uint64_t v424 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v422 + 8) | ((unint64_t)(*((_DWORD *)v422 + 2) == 19) << 32)), (uint64_t)v424);
          }
          unsigned int v14 = (llvm::ConstantInt ***)sub_1CB844AF4(v421, v14, (uint64_t)v424, (uint64_t)&p_s2);
          __int16 v1865 = 257;
          uint64_t v425 = *(void *)**v14;
          uint64_t v175 = v425 + 1888;
          if (*v14) {
            BOOL v426 = ((*v14)[1] & 0xFE) == 18;
          }
          else {
            BOOL v426 = 0;
          }
          if (v426)
          {
            v797 = (uint64_t **)(v425 + 1888);
            v798 = (llvm::Type *)*((unsigned int *)*v14 + 8);
            if (*((_DWORD *)*v14 + 2) == 19) {
              llvm::ScalableVectorType::get(v797, v798);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v797, v798);
            }
            uint64_t v175 = v799;
          }
          uint64_t v176 = (const char **)&v1861;
          BOOL v177 = (llvm::Value *)v8;
          __int16 v178 = 33;
          goto LABEL_332;
        }
      }
      else
      {
        uint8x8_t v368 = (uint8x8_t)vcnt_s8((int8x8_t)v1843);
        v368.i16[0] = vaddlv_u8(v368);
        if (v368.u32[0] != 1) {
          goto LABEL_615;
        }
      }
      if (*((_DWORD *)v1837 + 2) >= 0x41u) {
        operator new[]();
      }
      BOOL v374 = (*(void *)v103 & ~*(void *)v1837) == 0;
      if (v367 < 0x41) {
        goto LABEL_612;
      }
      goto LABEL_610;
    case '-':
      uint64_t v65 = v1818;
      uint64_t v1861 = 0;
      uint64_t v66 = (unsigned __int8 *)*(v9 - 4);
      unint64_t p_s2 = (unint64_t)&v1861;
      v1854 = 0;
      if ((sub_1CBF528D8((uint64_t)&p_s2, v66) & 1) == 0) {
        goto LABEL_1415;
      }
      __int16 v67 = *((_WORD *)a2 + 9);
      LODWORD(v1849) = v67 & 0x3F;
      if (sub_1CCA4D7A8((int *)&v1849, v65) && (*((unsigned char *)v9 + 17) & 4) != 0)
      {
        v733 = (void *)v1861;
        unsigned int v734 = *(_DWORD *)(v1861 + 8);
        unsigned int v735 = v734 - 1;
        if (v734 >= 0x41) {
          v733 = (void *)(*(void *)v1861 + 8 * (v735 >> 6));
        }
        LOWORD(v736) = (_WORD)v1849;
        if ((*v733 >> v735)) {
          int v736 = dword_1CFB279AC[(int)v1849];
        }
        v737 = operator new(0x80uLL);
        v737[21] = v737[21] & 0x38000000 | 2;
        unint64_t v8 = (unint64_t)(v737 + 16);
        *(void *)v737 = 0;
        *((void *)v737 + 1) = 0;
        *((void *)v737 + 2) = 0;
        *((void *)v737 + 3) = v737 + 16;
        *((void *)v737 + 4) = 0;
        *((void *)v737 + 5) = 0;
        *((void *)v737 + 6) = 0;
        *((void *)v737 + 7) = v737 + 16;
        int v332 = (llvm::Type *)*(v9 - 8);
        uint64_t Sub = (uint64_t)llvm::Constant::getNullValue((llvm::Constant *)*v9, v738, v739);
        WORD4(v1856) = 257;
        v740 = *(void ***)v332;
        uint64_t v134 = ***(void ***)v332 + 1888;
        if (*(void *)v332 && (v740[1] & 0xFE) == 0x12)
        {
          v1732 = (uint64_t **)(***(void ***)v332 + 1888);
          v1733 = (llvm::Type *)*((unsigned int *)v740 + 8);
          if (*((_DWORD *)v740 + 2) == 19) {
            llvm::ScalableVectorType::get(v1732, v1733);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1732, v1733);
          }
          uint64_t v134 = v1734;
        }
        uint64_t v135 = (llvm::Value *)v8;
        __int16 v136 = v736;
        goto LABEL_761;
      }
      if ((v67 & 0x3E) != 0x20) {
        goto LABEL_1415;
      }
      unint64_t v5 = v1861;
      uint64_t v68 = *(unsigned int *)(v1861 + 8);
      if (v68 > 0x40)
      {
        int v1537 = 0;
        int64_t v1538 = (unint64_t)(v68 + 63) >> 6;
        do
        {
          BOOL v109 = v1538-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1539 = *(void *)(*(void *)v1861 + 8 * v1538);
          v1537 += __clz(v1539);
        }
        while (!v1539);
        int v1540 = v68 | 0xFFFFFFC0;
        if ((v68 & 0x3F) == 0) {
          int v1540 = 0;
        }
        if (v1537 + v1540 == v68) {
          goto LABEL_1415;
        }
      }
      else if (!*(void *)v1861)
      {
        goto LABEL_1415;
      }
      if ((*((unsigned char *)v9 + 17) & 4) == 0) {
        goto LABEL_88;
      }
      llvm::APInt::srem(v65, (const llvm::APInt *)v1861, (uint64_t)&p_s2);
      int v473 = (int)v1854;
      if (v1854 > 0x40)
      {
        int v1602 = 0;
        int64_t v1603 = ((unint64_t)v1854 + 63) >> 6;
        do
        {
          BOOL v109 = v1603-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1604 = *(void *)(p_s2 + 8 * v1603);
          v1602 += __clz(v1604);
        }
        while (!v1604);
        unsigned int v1605 = v1854 | 0xFFFFFFC0;
        if ((v1854 & 0x3F) == 0) {
          unsigned int v1605 = 0;
        }
        int v1606 = v1602 + v1605;
        if (p_s2) {
          MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
        }
        if (v1606 == v473) {
          goto LABEL_728;
        }
      }
      else if (!p_s2)
      {
LABEL_728:
        uint64_t v474 = (llvm::Constant *)*v9;
        llvm::APInt::sdiv(v65, (const llvm::APInt *)v1861, (uint64_t)&p_s2);
        goto LABEL_729;
      }
LABEL_88:
      if ((*((unsigned char *)v9 + 17) & 2) == 0) {
        goto LABEL_1415;
      }
      llvm::APInt::urem(v65, (const llvm::APInt *)v1861, (uint64_t)&p_s2);
      int v69 = (int)v1854;
      if (v1854 > 0x40)
      {
        int v1553 = 0;
        int64_t v1554 = ((unint64_t)v1854 + 63) >> 6;
        do
        {
          BOOL v109 = v1554-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1555 = *(void *)(p_s2 + 8 * v1554);
          v1553 += __clz(v1555);
        }
        while (!v1555);
        unsigned int v1556 = v1854 | 0xFFFFFFC0;
        if ((v1854 & 0x3F) == 0) {
          unsigned int v1556 = 0;
        }
        int v1557 = v1553 + v1556;
        if (p_s2) {
          MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
        }
        if (v1557 != v69) {
          goto LABEL_1415;
        }
      }
      else if (p_s2)
      {
        goto LABEL_1415;
      }
      uint64_t v474 = (llvm::Constant *)*v9;
      llvm::APInt::udiv((uint64_t)v65, (const llvm::APInt *)v1861, (uint64_t)&p_s2);
LABEL_729:
      BOOL v392 = (int32x2_t ****)llvm::ConstantInt::get(*(llvm::ConstantInt **)v474, (llvm::LLVMContext *)&p_s2, v475);
      if ((*((_DWORD *)v474 + 2) & 0xFE) == 0x12) {
        BOOL v392 = (int32x2_t ****)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v474 + 8) | ((unint64_t)(*((_DWORD *)v474 + 2) == 19) << 32)), (uint64_t)v392);
      }
      if (v1854 >= 0x41 && p_s2) {
        MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
      }
      uint64_t v476 = operator new(0x80uLL);
      unint64_t v8 = (unint64_t)(v476 + 16);
      v476[21] = v476[21] & 0x38000000 | 2;
      *(void *)uint64_t v476 = 0;
      *((void *)v476 + 1) = 0;
      *((void *)v476 + 2) = 0;
      *((void *)v476 + 3) = v476 + 16;
      *((void *)v476 + 4) = 0;
      *((void *)v476 + 5) = 0;
      *((void *)v476 + 6) = 0;
      *((void *)v476 + 7) = v476 + 16;
      __int16 v477 = (__int16)v1849;
      uint64_t v478 = (llvm::Instruction *)*(v9 - 8);
      WORD4(v1856) = 257;
      uint64_t v479 = *(uint64_t ***)v478;
      uint64_t v134 = ***(void ***)v478 + 1888;
      if (*(void *)v478 && (v479[1] & 0xFE) == 0x12)
      {
        v859 = (uint64_t **)(***(void ***)v478 + 1888);
        v860 = (llvm::Type *)*((unsigned int *)v479 + 8);
        if (*((_DWORD *)v479 + 2) == 19) {
          llvm::ScalableVectorType::get(v859, v860);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v859, v860);
        }
        uint64_t v134 = v861;
      }
      uint64_t v135 = (llvm::Value *)v8;
      __int16 v136 = v477;
      goto LABEL_1703;
    case '/':
      uint64_t v120 = v1818;
      uint64_t v1859 = 0;
      uint64_t v121 = (unsigned __int8 *)*(v9 - 8);
      unint64_t p_s2 = (unint64_t)&v1859;
      v1854 = 0;
      if (!sub_1CBF528D8((uint64_t)&p_s2, v121)) {
        goto LABEL_162;
      }
      unsigned int v14 = (llvm::ConstantInt ***)*(v9 - 4);
      int v313 = *((_WORD *)a2 + 9) & 0x3F;
      if (v313 == 36)
      {
        v1536 = operator new(0x80uLL);
        v1536[21] = v1536[21] & 0x38000000 | 2;
        unint64_t v8 = (unint64_t)(v1536 + 16);
        *(void *)v1536 = 0;
        *((void *)v1536 + 1) = 0;
        *((void *)v1536 + 2) = 0;
        *((void *)v1536 + 3) = v1536 + 16;
        *((void *)v1536 + 4) = 0;
        *((void *)v1536 + 5) = 0;
        *((void *)v1536 + 6) = 0;
        *((void *)v1536 + 7) = v1536 + 16;
        uint64_t v61 = *v14;
        llvm::APInt::udiv(v1859, v120, (uint64_t)&v1861);
        goto LABEL_1070;
      }
      if (v313 == 34)
      {
        unsigned int v314 = operator new(0x80uLL);
        v314[21] = v314[21] & 0x38000000 | 2;
        unint64_t v8 = (unint64_t)(v314 + 16);
        *(void *)unsigned int v314 = 0;
        *((void *)v314 + 1) = 0;
        *((void *)v314 + 2) = 0;
        *((void *)v314 + 3) = v314 + 16;
        *((void *)v314 + 4) = 0;
        *((void *)v314 + 5) = 0;
        *((void *)v314 + 6) = 0;
        *((void *)v314 + 7) = v314 + 16;
        __int16 v315 = *v14;
        uint64_t v316 = v1859;
        LODWORD(v1867) = *((_DWORD *)v120 + 2);
        if (v1867 > 0x40) {
          operator new[]();
        }
        v1866 = *(uint64_t **)v120;
        llvm::APInt::operator+=((uint64_t)&v1866, 1uLL);
        v1850[0] = v1867;
        v1849 = v1866;
        LODWORD(v1867) = 0;
        llvm::APInt::udiv(v316, (const llvm::APInt *)&v1849, (uint64_t)&v1861);
        v1549 = (llvm::Value *)llvm::ConstantInt::get(*v315, (llvm::LLVMContext *)&v1861, v1548);
        v1550 = v1549;
        if ((v315[1] & 0xFE) == 0x12) {
          v1550 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v315 + 8) | ((unint64_t)(*((_DWORD *)v315 + 2) == 19) << 32)), (uint64_t)v1549);
        }
        WORD4(v1856) = 257;
        v1551 = *v14;
        uint64_t v1552 = *(void *)**v14 + 1888;
        if (*v14 && (v1551[1] & 0xFE) == 0x12)
        {
          v1688 = (uint64_t **)(*(void *)**v14 + 1888);
          v1689 = (llvm::Type *)*((unsigned int *)v1551 + 8);
          if (*((_DWORD *)v1551 + 2) == 19) {
            llvm::ScalableVectorType::get(v1688, v1689);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1688, v1689);
          }
          uint64_t v1552 = v1690;
        }
        llvm::CmpInst::CmpInst((llvm::Value *)v8, v1552, 53, 37, (uint64_t)v14, (uint64_t)v1550, (const char **)&p_s2, 0, 0);
        if (p_s1 >= 0x41 && v1861) {
          MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
        }
        if (v1850[0] >= 0x41 && v1849) {
          MEMORY[0x1D25D9CB0](v1849, 0x1000C8000313F17);
        }
        if (v1867 >= 0x41)
        {
          int v227 = v1866;
          if (v1866) {
            goto LABEL_321;
          }
        }
        return v8;
      }
LABEL_162:
      uint64_t v122 = (uint64_t)v1818;
      v1833 = 0;
      unsigned int v123 = (unsigned __int8 *)*(v9 - 4);
      unint64_t p_s2 = (unint64_t)&v1833;
      v1854 = 0;
      if (!sub_1CBF528D8((uint64_t)&p_s2, v123)) {
        goto LABEL_1415;
      }
      int v124 = *((unsigned __int8 *)v9 + 16);
      int v125 = *((_WORD *)a2 + 9) & 0x3E;
      if (v125 != 32 && (v124 == 48) != (v125 - 38) < 4) {
        goto LABEL_1415;
      }
      unint64_t v126 = v1833;
      uint64_t v127 = *((unsigned int *)v1833 + 2);
      if (v127 > 0x40)
      {
LABEL_2223:
        int v1398 = 0;
        int64_t v1399 = (unint64_t)(v127 + 63) >> 6;
        do
        {
          BOOL v109 = v1399-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1400 = *(void *)(*(void *)v126 + 8 * v1399);
          v1398 += __clz(v1400);
        }
        while (!v1400);
        int v1401 = v127 | 0xFFFFFFC0;
        if ((v127 & 0x3F) == 0) {
          int v1401 = 0;
        }
        int v1402 = v1398 + v1401;
        if (v1402 == v127 || v1402 == v127 - 1) {
          goto LABEL_1415;
        }
      }
      else if (*(void *)v1833 < 2uLL)
      {
        goto LABEL_1415;
      }
      if (v124 == 48)
      {
        if (!v127) {
          goto LABEL_1415;
        }
        if (v127 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v126) == v127) {
            goto LABEL_1415;
          }
        }
        else if (*(void *)v126 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v127)
        {
          goto LABEL_1415;
        }
        llvm::APInt::operator*(v122, v126, (uint64_t)&v1861);
        llvm::APInt::sdiv((llvm::APInt *)&v1861, v1833, (uint64_t)&p_s2);
      }
      else
      {
        llvm::APInt::operator*(v122, v126, (uint64_t)&v1861);
        llvm::APInt::udiv((uint64_t)&v1861, v1833, (uint64_t)&p_s2);
      }
      if (v1854 > 0x40)
      {
        v1404 = (uint64_t *)p_s2;
        BOOL v240 = memcmp((const void *)p_s2, *(const void **)v122, (((unint64_t)v1854 + 63) >> 3) & 0x3FFFFFF8) == 0;
        if (v1404) {
          MEMORY[0x1D25D9CB0](v1404, 0x1000C8000313F17);
        }
      }
      else
      {
        BOOL v240 = p_s2 == *(void *)v122;
      }
      int v241 = !v240;
      __int16 v242 = *((_WORD *)a2 + 9);
      if ((*((unsigned char *)v9 + 17) & 2) != 0)
      {
        unsigned int v243 = *((_DWORD *)v1833 + 2);
        v1850[0] = v243;
        if (v243 > 0x40) {
          operator new[]();
        }
        unint64_t v1405 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v243;
        if (!v243) {
          LOBYTE(v1405) = 0;
        }
        uint64_t v244 = (void *)(v1405 & 1);
      }
      else
      {
        unsigned int v243 = *((_DWORD *)v1833 + 2);
        v1850[0] = v243;
        if (v243 > 0x40) {
          operator new[]();
        }
        uint64_t v244 = *(void **)v1833;
      }
      v1849 = v244;
      LODWORD(v1867) = 1;
      unint64_t v126 = (llvm::APInt *)(v242 & 0x3F);
      v1866 = 0;
      unsigned int v1860 = 1;
      uint64_t v1859 = 0;
      if (v124 != 48)
      {
        unint64_t v5 = p_s1;
        if (p_s1 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&v1866, p_s1);
          if (v1867 <= 0x40) {
            v1866 = (uint64_t *)v1861;
          }
          else {
            memcpy(v1866, (const void *)v1861, (((unint64_t)v1867 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          v1866 = (uint64_t *)v1861;
          LODWORD(v1867) = p_s1;
        }
        if (v240)
        {
          uint64_t v245 = (llvm::APInt *)&v1866;
          int v246 = 0;
LABEL_359:
          uint64_t v122 = sub_1CCA50068((uint64_t)&v1859, v245, (llvm::APInt *)&v1849, v246);
          goto LABEL_360;
        }
LABEL_2260:
        uint64_t v122 = !v240;
        goto LABEL_360;
      }
      uint64_t v255 = *((unsigned int *)v1833 + 2);
      unsigned int v256 = v255 - 1;
      if (v255 > 0x40)
      {
        uint64_t v257 = *(void *)(*(void *)v1833 + 8 * (v256 >> 6)) & (1 << v256);
        if (v257) {
          goto LABEL_1099;
        }
        int v693 = 0;
        int64_t v694 = (unint64_t)(v255 + 63) >> 6;
        do
        {
          BOOL v109 = v694-- < 1;
          if (v109) {
            break;
          }
          unint64_t v695 = *(void *)(*(void *)v1833 + 8 * v694);
          v693 += __clz(v695);
        }
        while (!v695);
        int v696 = v255 | 0xFFFFFFC0;
        if ((v255 & 0x3F) == 0) {
          int v696 = 0;
        }
        if (v693 + v696 != v255) {
          goto LABEL_379;
        }
      }
      else
      {
        uint64_t v257 = *(void *)v1833 & (1 << v256);
        if (*(void *)v1833 && !v257)
        {
LABEL_379:
          uint64_t v258 = *(unsigned int *)(v122 + 8);
          if (v258 > 0x40)
          {
            int v1470 = 0;
            int64_t v1471 = (unint64_t)(v258 + 63) >> 6;
            uint64_t v1472 = v1471;
            do
            {
              BOOL v109 = v1472-- < 1;
              if (v109) {
                break;
              }
              unint64_t v1473 = *(void *)(*(void *)v122 + 8 * v1472);
              v1470 += __clz(v1473);
            }
            while (!v1473);
            int v1474 = v258 | 0xFFFFFFC0;
            if ((v258 & 0x3F) == 0) {
              int v1474 = 0;
            }
            if (v1470 + v1474 != v258)
            {
              if (((*(void *)(*(void *)v122 + 8 * ((v258 - 1) >> 6)) >> (v258 - 1)) & 1) == 0)
              {
                int v1475 = 0;
                do
                {
                  BOOL v109 = v1471-- < 1;
                  if (v109) {
                    break;
                  }
                  unint64_t v1476 = *(void *)(*(void *)v122 + 8 * v1471);
                  v1475 += __clz(v1476);
                }
                while (!v1476);
                if (v1475 + v1474 != v258)
                {
LABEL_382:
                  unint64_t v5 = p_s1;
                  if (p_s1 > 0x40)
                  {
                    llvm::APInt::reallocate((uint64_t)&v1866, p_s1);
                    if (v1867 <= 0x40) {
                      v1866 = (uint64_t *)v1861;
                    }
                    else {
                      memcpy(v1866, (const void *)v1861, (((unint64_t)v1867 + 63) >> 3) & 0x3FFFFFF8);
                    }
                  }
                  else
                  {
                    v1866 = (uint64_t *)v1861;
                    LODWORD(v1867) = p_s1;
                  }
                  if (v240)
                  {
                    uint64_t v245 = (llvm::APInt *)&v1861;
                    int v246 = 1;
                    goto LABEL_359;
                  }
                  goto LABEL_2260;
                }
              }
LABEL_2365:
              unsigned int v1844 = p_s1;
              if (p_s1 > 0x40) {
                operator new[]();
              }
              v1843 = (llvm::Type *)v1861;
              llvm::APInt::operator+=((uint64_t)&v1843, 1uLL);
              unsigned int v1481 = v1844;
              v1482 = v1843;
              unsigned int v1844 = 0;
              if (v1860 > 0x40 && v1859)
              {
                MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
                uint64_t v1859 = (uint64_t)v1482;
                unsigned int v1860 = v1481;
                if (v1844 >= 0x41 && v1843) {
                  MEMORY[0x1D25D9CB0](v1843, 0x1000C8000313F17);
                }
              }
              else
              {
                uint64_t v1859 = (uint64_t)v1843;
                unsigned int v1860 = v1481;
              }
              uint64_t v122 = (v241 << 31 >> 31);
              if (v240)
              {
                unsigned int v1842 = v1850[0];
                if (v1850[0] > 0x40) {
                  operator new[]();
                }
                unint64_t v1483 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v1850[0]);
                if (!v1850[0]) {
                  unint64_t v1483 = 0;
                }
                __s2 = (void *)(v1483 & ~(unint64_t)v1849);
                llvm::APInt::operator++((uint64_t)&__s2);
                LODWORD(v1854) = v1842;
                unint64_t p_s2 = (unint64_t)__s2;
                unsigned int v1842 = 0;
                int v241 = sub_1CCA50068((uint64_t)&v1866, (llvm::APInt *)&v1859, (llvm::APInt *)&p_s2, 1) << 31 >> 31;
                if (v1854 >= 0x41 && p_s2) {
                  MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                }
              }
              else
              {
                int v241 = v241 << 31 >> 31;
              }
              goto LABEL_360;
            }
          }
          else if (*(void *)v122)
          {
            if (((*(void *)v122 >> (v258 - 1)) & 1) == 0) {
              goto LABEL_382;
            }
            goto LABEL_2365;
          }
          unsigned int v1846 = v243;
          v1845 = (llvm::APInt *)v1849;
          llvm::APInt::operator-=((uint64_t)&v1845, 1uLL);
          unsigned int v1477 = v1846;
          unsigned int v1848 = v1846;
          __s1 = v1845;
          unsigned int v1846 = 0;
          if (v1848 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s1);
          }
          else
          {
            if (v1477) {
              unint64_t v1478 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1477;
            }
            else {
              unint64_t v1478 = 0;
            }
            __s1 = (void *)(v1478 & ~(unint64_t)v1845);
          }
          llvm::APInt::operator++((uint64_t)&__s1);
          unsigned int v1479 = v1848;
          v1480 = (uint64_t *)__s1;
          unsigned int v1848 = 0;
          if (v1867 > 0x40 && v1866)
          {
            MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
            v1866 = v1480;
            LODWORD(v1867) = v1479;
            if (v1848 >= 0x41 && __s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
          else
          {
            v1866 = (uint64_t *)__s1;
            LODWORD(v1867) = v1479;
          }
          if (v1846 >= 0x41 && v1845) {
            MEMORY[0x1D25D9CB0](v1845, 0x1000C8000313F17);
          }
          unint64_t v5 = v1850[0];
          if (v1860 <= 0x40 && v1850[0] <= 0x40)
          {
            int v241 = 0;
            uint64_t v122 = 0;
            uint64_t v1859 = (uint64_t)v1849;
            unsigned int v1860 = v1850[0];
            goto LABEL_360;
          }
          llvm::APInt::reallocate((uint64_t)&v1859, v1850[0]);
          if (v1860 > 0x40)
          {
            memcpy((void *)v1859, v1849, (((unint64_t)v1860 + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_2421;
          }
          int v241 = 0;
          uint64_t v122 = 0;
          uint64_t v1859 = (uint64_t)v1849;
LABEL_360:
          uint64_t v127 = (uint64_t)*(v9 - 8);
          switch(v242 & 0x3F)
          {
            case '!':
              if (v241 && v122) {
                goto LABEL_2258;
              }
              if (v122)
              {
                v1651 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v1651 + 16);
                v1651[21] = v1651[21] & 0x38000000 | 2;
                *(void *)v1651 = 0;
                *((void *)v1651 + 1) = 0;
                *((void *)v1651 + 2) = 0;
                *((void *)v1651 + 3) = v1651 + 16;
                *((void *)v1651 + 4) = 0;
                *((void *)v1651 + 5) = 0;
                *((void *)v1651 + 6) = 0;
                *((void *)v1651 + 7) = v1651 + 16;
                BOOL v1503 = v124 == 48;
                __int16 v1504 = 36;
                __int16 v1505 = 40;
                goto LABEL_2447;
              }
              if (!v241)
              {
                BOOL v288 = v124 == 48;
                uint64_t v289 = (uint64_t)a1;
                uint64_t v290 = (llvm::Value *)*(v9 - 8);
                int v291 = 0;
                goto LABEL_431;
              }
              v1652 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v1652 + 16);
              v1652[21] = v1652[21] & 0x38000000 | 2;
              *(void *)v1652 = 0;
              *((void *)v1652 + 1) = 0;
              *((void *)v1652 + 2) = 0;
              *((void *)v1652 + 3) = v1652 + 16;
              *((void *)v1652 + 4) = 0;
              *((void *)v1652 + 5) = 0;
              *((void *)v1652 + 6) = 0;
              *((void *)v1652 + 7) = v1652 + 16;
              BOOL v1507 = v124 == 48;
              __int16 v1508 = 35;
              __int16 v1509 = 39;
              goto LABEL_2451;
            case '""':
            case '&':
              goto LABEL_1169;
            case '#':
            case '%':
            case '\'':
              goto LABEL_2222;
            case '$':
            case '(':
              goto LABEL_361;
            default:
              if (v241 && v122) {
                goto LABEL_2254;
              }
              if (v122)
              {
                v1502 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v1502 + 16);
                v1502[21] = v1502[21] & 0x38000000 | 2;
                *(void *)v1502 = 0;
                *((void *)v1502 + 1) = 0;
                *((void *)v1502 + 2) = 0;
                *((void *)v1502 + 3) = v1502 + 16;
                *((void *)v1502 + 4) = 0;
                *((void *)v1502 + 5) = 0;
                *((void *)v1502 + 6) = 0;
                *((void *)v1502 + 7) = v1502 + 16;
                BOOL v1503 = v124 == 48;
                __int16 v1504 = 35;
                __int16 v1505 = 39;
LABEL_2447:
                if (v1503) {
                  LOWORD(v126) = v1505;
                }
                else {
                  LOWORD(v126) = v1504;
                }
                goto LABEL_364;
              }
              if (!v241)
              {
                BOOL v288 = v124 == 48;
                uint64_t v289 = (uint64_t)a1;
                uint64_t v290 = (llvm::Value *)*(v9 - 8);
                int v291 = 1;
LABEL_431:
                int64_t v292 = sub_1CD68A634(v289, v290, (llvm::APInt *)&v1866, (llvm::Type *)&v1859, v288, v291);
                uint64_t v293 = (uint64_t)a1;
                int v294 = (llvm::ValueAsMetadata *)a2;
                goto LABEL_432;
              }
              v1506 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v1506 + 16);
              v1506[21] = v1506[21] & 0x38000000 | 2;
              *(void *)v1506 = 0;
              *((void *)v1506 + 1) = 0;
              *((void *)v1506 + 2) = 0;
              *((void *)v1506 + 3) = v1506 + 16;
              *((void *)v1506 + 4) = 0;
              *((void *)v1506 + 5) = 0;
              *((void *)v1506 + 6) = 0;
              *((void *)v1506 + 7) = v1506 + 16;
              BOOL v1507 = v124 == 48;
              __int16 v1508 = 36;
              __int16 v1509 = 40;
LABEL_2451:
              if (v1507) {
                LOWORD(v126) = v1509;
              }
              else {
                LOWORD(v126) = v1508;
              }
              uint64_t v249 = (llvm::Constant *)*v9;
              uint64_t v250 = **v9;
              uint64_t v251 = (llvm::LLVMContext *)&v1859;
              break;
          }
LABEL_365:
          unsigned int v252 = llvm::ConstantInt::get(v250, v251, v248);
          if ((*((_DWORD *)v249 + 2) & 0xFE) == 0x12) {
            unsigned int v252 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v249 + 8) | ((unint64_t)(*((_DWORD *)v249 + 2) == 19) << 32)), (uint64_t)v252);
          }
          WORD4(v1856) = 257;
          uint64_t v253 = *(void ***)v127;
          uint64_t v254 = ***(void ***)v127 + 1888;
          if (*(void *)v127 && (v253[1] & 0xFE) == 0x12)
          {
            v602 = (uint64_t **)(***(void ***)v127 + 1888);
            v603 = (llvm::Type *)*((unsigned int *)v253 + 8);
            if (*((_DWORD *)v253 + 2) == 19) {
              llvm::ScalableVectorType::get(v602, v603);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v602, v603);
            }
            uint64_t v254 = v604;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v8, v254, 53, (__int16)v126, v127, (uint64_t)v252, (const char **)&p_s2, 0, 0);
LABEL_370:
          if (v1860 >= 0x41 && v1859) {
            MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
          }
          if (v1867 >= 0x41 && v1866) {
            MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
          }
          if (v1850[0] < 0x41) {
            goto LABEL_373;
          }
          v1406 = v1849;
          if (!v1849) {
            goto LABEL_373;
          }
          goto LABEL_2246;
        }
      }
      if (!v257)
      {
LABEL_2421:
        int v241 = 0;
        uint64_t v122 = 0;
        goto LABEL_360;
      }
LABEL_1099:
      if ((*((unsigned char *)v9 + 17) & 2) != 0)
      {
        if (v243) {
          unint64_t v697 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v243;
        }
        else {
          unint64_t v697 = 0;
        }
        v1849 = (void *)(v697 & ~(unint64_t)v1849);
        llvm::APInt::operator++((uint64_t)&v1849);
      }
      uint64_t v698 = *(unsigned int *)(v122 + 8);
      if (v698 > 0x40)
      {
        int v699 = 0;
        int64_t v700 = (unint64_t)(v698 + 63) >> 6;
        uint64_t v701 = v700;
        do
        {
          BOOL v109 = v701-- < 1;
          if (v109) {
            break;
          }
          unint64_t v702 = *(void *)(*(void *)v122 + 8 * v701);
          v699 += __clz(v702);
        }
        while (!v702);
        int v703 = v698 | 0xFFFFFFC0;
        if ((v698 & 0x3F) == 0) {
          int v703 = 0;
        }
        if (v699 + v703 != v698)
        {
          if ((*(void *)(*(void *)v122 + 8 * ((v698 - 1) >> 6)) >> (v698 - 1))) {
            goto LABEL_1121;
          }
          int v704 = 0;
          do
          {
            BOOL v109 = v700-- < 1;
            if (v109) {
              break;
            }
            unint64_t v705 = *(void *)(*(void *)v122 + 8 * v700);
            v704 += __clz(v705);
          }
          while (!v705);
          if (v704 + v703 == v698) {
            goto LABEL_1121;
          }
          goto LABEL_1125;
        }
      }
      else if (*(void *)v122)
      {
        if ((*(void *)v122 >> (v698 - 1)))
        {
LABEL_1121:
          unint64_t v5 = p_s1;
          if (v1867 > 0x40 || p_s1 > 0x40)
          {
            llvm::APInt::reallocate((uint64_t)&v1866, p_s1);
            if (v1867 <= 0x40)
            {
              v1866 = (uint64_t *)v1861;
              if (v240) {
                goto LABEL_1124;
              }
            }
            else
            {
              memcpy(v1866, (const void *)v1861, (((unint64_t)v1867 + 63) >> 3) & 0x3FFFFFF8);
              if (v240) {
                goto LABEL_1124;
              }
            }
          }
          else
          {
            v1866 = (uint64_t *)v1861;
            LODWORD(v1867) = p_s1;
            if (v240)
            {
LABEL_1124:
              uint64_t v122 = sub_1CCA500F4((uint64_t)&v1859, (llvm::APInt *)&v1861, (llvm::APInt *)&v1849, 1);
              goto LABEL_1165;
            }
          }
          uint64_t v122 = !v240;
LABEL_1165:
          if ((v242 & 0x3Fu) > 0x1F)
          {
            int v712 = 38;
            __int16 v713 = 40;
            switch(v242 & 0x3F)
            {
              case '""':
                __int16 v713 = 36;
                goto LABEL_1178;
              case '#':
              case '%':
              case '\'':
LABEL_2222:
                __break(1u);
                goto LABEL_2223;
              case '$':
                int v712 = 34;
                goto LABEL_1168;
              case '&':
LABEL_1178:
                uint64_t v127 = (uint64_t)*(v9 - 8);
                LOWORD(v126) = v713;
LABEL_361:
                if (v241 == -1) {
                  goto LABEL_2254;
                }
                if (v241 == 1)
                {
LABEL_2258:
                  v1415 = *(uint64_t **)(a1[3] + 64);
                  uint64_t v1416 = *v1415;
                  v1413 = *(llvm::Instruction **)(*v1415 + 1560);
                  if (!v1413)
                  {
                    v1593 = *(llvm::ConstantInt **)(v1416 + 1888);
                    unsigned int v1594 = *(_DWORD *)(v1416 + 1896);
                    LODWORD(v1854) = v1594 >> 8;
                    if (v1594 >> 8 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&p_s2);
                    }
                    if (v1594 <= 0xFF) {
                      char v1595 = 0;
                    }
                    else {
                      char v1595 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1594);
                    }
                    unint64_t p_s2 = v1595 & 1;
                    v1413 = (llvm::Instruction *)llvm::ConstantInt::get(v1593, (llvm::LLVMContext *)&p_s2, v6);
                    if (v1854 >= 0x41 && p_s2) {
                      MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                    }
                    *(void *)(v1416 + 1560) = v1413;
                  }
                  goto LABEL_2259;
                }
                uint64_t v247 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v247 + 16);
                v247[21] = v247[21] & 0x38000000 | 2;
                *(void *)uint64_t v247 = 0;
                *((void *)v247 + 1) = 0;
                *((void *)v247 + 2) = 0;
                *((void *)v247 + 3) = v247 + 16;
                *((void *)v247 + 4) = 0;
                *((void *)v247 + 5) = 0;
                *((void *)v247 + 6) = 0;
                *((void *)v247 + 7) = v247 + 16;
LABEL_364:
                uint64_t v249 = (llvm::Constant *)*v9;
                uint64_t v250 = **v9;
                uint64_t v251 = (llvm::LLVMContext *)&v1866;
                goto LABEL_365;
              case '(':
LABEL_1168:
                uint64_t v127 = (uint64_t)*(v9 - 8);
                LODWORD(v126) = v712;
LABEL_1169:
                if (v122 == -1) {
                  goto LABEL_2258;
                }
                if (v122 == 1)
                {
LABEL_2254:
                  v1411 = *(uint64_t **)(a1[3] + 64);
                  uint64_t v1412 = *v1411;
                  v1413 = *(llvm::Instruction **)(*v1411 + 1568);
                  if (!v1413)
                  {
                    v1414 = *(llvm::ConstantInt **)(v1412 + 1888);
                    LODWORD(v1854) = *(_DWORD *)(v1412 + 1896) >> 8;
                    if (v1854 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&p_s2);
                    }
                    unint64_t p_s2 = 0;
                    v1413 = (llvm::Instruction *)llvm::ConstantInt::get(v1414, (llvm::LLVMContext *)&p_s2, v6);
                    if (v1854 >= 0x41 && p_s2) {
                      MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                    }
                    *(void *)(v1412 + 1568) = v1413;
                  }
LABEL_2259:
                  uint64_t v293 = (uint64_t)a1;
                  int v294 = (llvm::ValueAsMetadata *)a2;
                  int64_t v292 = v1413;
LABEL_432:
                  unint64_t v8 = (unint64_t)sub_1CC9D3C84(v293, v294, v292);
                }
                else
                {
                  v714 = operator new(0x80uLL);
                  unint64_t v8 = (unint64_t)(v714 + 16);
                  v714[21] = v714[21] & 0x38000000 | 2;
                  *(void *)v714 = 0;
                  *((void *)v714 + 1) = 0;
                  *((void *)v714 + 2) = 0;
                  *((void *)v714 + 3) = v714 + 16;
                  *((void *)v714 + 4) = 0;
                  *((void *)v714 + 5) = 0;
                  *((void *)v714 + 6) = 0;
                  *((void *)v714 + 7) = v714 + 16;
                  v715 = (llvm::Constant *)*v9;
                  v717 = llvm::ConstantInt::get(**v9, (llvm::LLVMContext *)&v1859, v716);
                  if ((*((_DWORD *)v715 + 2) & 0xFE) == 0x12) {
                    v717 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v715 + 8) | ((unint64_t)(*((_DWORD *)v715 + 2) == 19) << 32)), (uint64_t)v717);
                  }
                  if (v126 == 34)
                  {
                    WORD4(v1856) = 257;
                    uint64_t v1558 = *(void *)v127;
                    uint64_t v1559 = ***(void ***)v127 + 1888;
                    if (*(void *)v127 && (*(_DWORD *)(v1558 + 8) & 0xFE) == 0x12)
                    {
                      v1715 = (uint64_t **)(***(void ***)v127 + 1888);
                      v1716 = (llvm::Type *)*(unsigned int *)(v1558 + 32);
                      if (*(_DWORD *)(v1558 + 8) == 19) {
                        llvm::ScalableVectorType::get(v1715, v1716);
                      }
                      else {
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v1715, v1716);
                      }
                      uint64_t v1559 = v1717;
                    }
                    llvm::CmpInst::CmpInst((llvm::Value *)v8, v1559, 53, 35, v127, (uint64_t)v717, (const char **)&p_s2, 0, 0);
                  }
                  else
                  {
                    WORD4(v1856) = 257;
                    uint64_t v718 = *(void *)v127;
                    uint64_t v719 = ***(void ***)v127 + 1888;
                    if (*(void *)v127 && (*(_DWORD *)(v718 + 8) & 0xFE) == 0x12)
                    {
                      v803 = (uint64_t **)(***(void ***)v127 + 1888);
                      v804 = (llvm::Type *)*(unsigned int *)(v718 + 32);
                      if (*(_DWORD *)(v718 + 8) == 19) {
                        llvm::ScalableVectorType::get(v803, v804);
                      }
                      else {
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v803, v804);
                      }
                      uint64_t v719 = v805;
                    }
                    llvm::CmpInst::CmpInst((llvm::Value *)v8, v719, 53, 39, v127, (uint64_t)v717, (const char **)&p_s2, 0, 0);
                  }
                }
                goto LABEL_370;
              default:
                goto LABEL_360;
            }
          }
          goto LABEL_360;
        }
LABEL_1125:
        unsigned int v1836 = p_s1;
        if (p_s1 > 0x40) {
          operator new[]();
        }
        v1835 = (llvm::APInt *)v1861;
        llvm::APInt::operator+=((uint64_t)&v1835, 1uLL);
        unsigned int v711 = v1836;
        uint64_t v127 = (uint64_t)v1835;
        unsigned int v1836 = 0;
        if (v1860 > 0x40 && v1859)
        {
          MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
          uint64_t v1859 = v127;
          unsigned int v1860 = v711;
          if (v1836 >= 0x41 && v1835) {
            MEMORY[0x1D25D9CB0](v1835, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v1859 = (uint64_t)v1835;
          unsigned int v1860 = v711;
        }
        uint64_t v122 = (v241 << 31 >> 31);
        if (v240) {
          int v241 = sub_1CCA50068((uint64_t)&v1866, (llvm::APInt *)&v1859, (llvm::APInt *)&v1849, 1) << 31 >> 31;
        }
        else {
          int v241 = v241 << 31 >> 31;
        }
        goto LABEL_1165;
      }
      unsigned int v1840 = v1850[0];
      if (v1850[0] > 0x40) {
        operator new[]();
      }
      v1839 = (llvm::APInt *)v1849;
      llvm::APInt::operator+=((uint64_t)&v1839, 1uLL);
      unsigned int v706 = v1840;
      v707 = v1839;
      unsigned int v1840 = 0;
      if (v1867 > 0x40 && v1866)
      {
        MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
        v1866 = (uint64_t *)v707;
        LODWORD(v1867) = v706;
        if (v1840 >= 0x41 && v1839) {
          MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
        }
      }
      else
      {
        v1866 = (uint64_t *)v1839;
        LODWORD(v1867) = v706;
      }
      unsigned int v1838 = v1850[0];
      if (v1850[0] > 0x40) {
        operator new[]();
      }
      unint64_t v708 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v1850[0]);
      if (!v1850[0]) {
        unint64_t v708 = 0;
      }
      v1837 = (llvm::APInt *)(v708 & ~(unint64_t)v1849);
      llvm::APInt::operator++((uint64_t)&v1837);
      uint64_t v127 = v1838;
      v709 = v1837;
      unsigned int v1838 = 0;
      if (v1860 > 0x40 && v1859)
      {
        MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
        uint64_t v1859 = (uint64_t)v709;
        unsigned int v1860 = v127;
        if (v1838 >= 0x41 && v1837)
        {
          MEMORY[0x1D25D9CB0](v1837, 0x1000C8000313F17);
          uint64_t v127 = v1860;
        }
      }
      else
      {
        uint64_t v1859 = (uint64_t)v1837;
        unsigned int v1860 = v127;
      }
      if (v127 > 0x40)
      {
        v710 = (void *)v1859;
        if (!memcmp((const void *)v1859, *(const void **)v1833, (((unint64_t)v127 + 63) >> 3) & 0x3FFFFFF8))
        {
          if (v710) {
            MEMORY[0x1D25D9CB0](v710, 0x1000C8000313F17);
          }
          goto LABEL_1164;
        }
      }
      else if (v1859 == *(void *)v1833)
      {
LABEL_1164:
        int v241 = 0;
        uint64_t v1859 = 0;
        uint64_t v122 = 1;
        unsigned int v1860 = 1;
        goto LABEL_1165;
      }
      int v241 = 0;
      uint64_t v122 = 0;
      goto LABEL_1165;
    case '0':
      goto LABEL_162;
    case '3':
      unsigned int v70 = *((_WORD *)a2 + 9) & 0x3F;
      if (v70 > 0x28) {
        goto LABEL_1415;
      }
      if (((1 << v70) & 0x14300000000) == 0) {
        goto LABEL_1415;
      }
      unsigned int v71 = v9[1];
      if (!v71 || v71[1]) {
        goto LABEL_1415;
      }
      int v72 = (unsigned int *)v1818;
      unsigned int v73 = (llvm::Constant *)*(v9 - 4);
      unsigned int v74 = *((unsigned __int8 *)v73 + 16);
      if (!v73 || v74 != 16) {
        goto LABEL_928;
      }
      int v75 = (int8x8_t *)((char *)v73 + 24);
      uint64_t v76 = *((unsigned int *)v73 + 8);
      if (v76 > 0x40)
      {
        int v593 = 0;
        unint64_t v594 = (unint64_t)(v76 + 63) >> 6;
        v595 = (int8x8_t *)*v75;
        do
        {
          int8x8_t v596 = *v595++;
          uint8x8_t v597 = (uint8x8_t)vcnt_s8(v596);
          v597.i16[0] = vaddlv_u8(v597);
          v593 += v597.i32[0];
          --v594;
        }
        while (v594);
        if (v593 == 1) {
          goto LABEL_100;
        }
LABEL_928:
        if ((*(_DWORD *)(*(void *)v73 + 8) & 0xFE) != 0x12 || v74 > 0x14) {
          goto LABEL_1415;
        }
      }
      else
      {
        uint8x8_t v77 = (uint8x8_t)vcnt_s8(*v75);
        v77.i16[0] = vaddlv_u8(v77);
        if (v77.u32[0] == 1) {
          goto LABEL_100;
        }
        if ((*(_DWORD *)(*(void *)v73 + 8) & 0xFE) != 0x12) {
          goto LABEL_1415;
        }
      }
      SplatValue = (int8x8_t *)llvm::Constant::getSplatValue(v73, 0);
      if (!SplatValue || SplatValue[2].i8[0] != 16) {
        goto LABEL_1415;
      }
      int v75 = SplatValue + 3;
      uint64_t v600 = SplatValue[4].u32[0];
      if (v600 > 0x40)
      {
        int v1694 = 0;
        unint64_t v1695 = (unint64_t)(v600 + 63) >> 6;
        v1696 = (int8x8_t *)*v75;
        do
        {
          int8x8_t v1697 = *v1696++;
          uint8x8_t v1698 = (uint8x8_t)vcnt_s8(v1697);
          v1698.i16[0] = vaddlv_u8(v1698);
          v1694 += v1698.i32[0];
          --v1695;
        }
        while (v1695);
        if (v1694 != 1) {
          goto LABEL_1415;
        }
      }
      else
      {
        uint8x8_t v601 = (uint8x8_t)vcnt_s8(*v75);
        v601.i16[0] = vaddlv_u8(v601);
        if (v601.u32[0] != 1) {
          goto LABEL_1415;
        }
      }
LABEL_100:
      if (v70 != 38 && v70 != 40) {
        goto LABEL_104;
      }
      uint64_t v78 = v72[2];
      if (v78 > 0x40)
      {
        int v1407 = 0;
        int64_t v1408 = (unint64_t)(v78 + 63) >> 6;
        do
        {
          BOOL v109 = v1408-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1409 = *(void *)(*(void *)v72 + 8 * v1408);
          v1407 += __clz(v1409);
        }
        while (!v1409);
        int v1410 = v78 | 0xFFFFFFC0;
        if ((v78 & 0x3F) == 0) {
          int v1410 = 0;
        }
        if (v1407 + v1410 != v78) {
          goto LABEL_1415;
        }
      }
      else if (*(void *)v72)
      {
        goto LABEL_1415;
      }
LABEL_104:
      if ((v70 & 0x3E) == 0x20)
      {
        uint64_t v79 = v72[2];
        unsigned int v80 = v79 - 1;
        if (v79 > 0x40)
        {
          if ((*(void *)(*(void *)v72 + 8 * (v80 >> 6)) >> v80)) {
            goto LABEL_1415;
          }
          int v659 = 0;
          int64_t v660 = (unint64_t)(v79 + 63) >> 6;
          do
          {
            BOOL v109 = v660-- < 1;
            if (v109) {
              break;
            }
            unint64_t v661 = *(void *)(*(void *)v72 + 8 * v660);
            v659 += __clz(v661);
          }
          while (!v661);
          int v662 = v79 | 0xFFFFFFC0;
          if ((v79 & 0x3F) == 0) {
            int v662 = 0;
          }
          if (v659 + v662 == v79) {
            goto LABEL_1415;
          }
        }
        else if (!*(void *)v72 || (*(void *)v72 & (1 << v80)) != 0)
        {
          goto LABEL_1415;
        }
      }
      unint64_t v81 = (llvm::Constant *)*v9;
      __int16 v82 = (llvm::Type *)*v9;
      if (((*v9)[1] & 0xFE) == 0x12) {
        __int16 v82 = (llvm::Type *)**((void **)v81 + 2);
      }
      unsigned int v83 = llvm::Type::getPrimitiveSizeInBits(v82);
      LODWORD(p_s1) = v83;
      if (v83 > 0x40) {
        operator new[]();
      }
      uint64_t v1861 = 1 << (v83 - 1);
      LODWORD(v1867) = v75[1].i32[0];
      if (v1867 > 0x40) {
        operator new[]();
      }
      v1866 = (uint64_t *)*v75;
      llvm::APInt::operator-=((uint64_t)&v1866, 1uLL);
      v1850[0] = v1867;
      unsigned int v85 = v1867;
      v1849 = v1866;
      LODWORD(v1867) = 0;
      if (v85 > 0x40)
      {
        llvm::APInt::orAssignSlowCase((uint64_t)&v1849, (uint64_t **)&v1861);
        unsigned int v85 = v1850[0];
        int v86 = (uint64_t *)v1849;
      }
      else
      {
        int v86 = (uint64_t *)(v1861 | (unint64_t)v1866);
        v1849 = (void *)(v1861 | (unint64_t)v1866);
      }
      LODWORD(v1854) = v85;
      unint64_t p_s2 = (unint64_t)v86;
      v1850[0] = 0;
      uint64_t v87 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v81, (llvm::LLVMContext *)&p_s2, v84);
      if ((*((_DWORD *)v81 + 2) & 0xFE) == 0x12) {
        uint64_t v87 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v81 + 8) | ((unint64_t)(*((_DWORD *)v81 + 2) == 19) << 32)), (uint64_t)v87);
      }
      if (v1854 >= 0x41 && p_s2) {
        MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
      }
      if (v1850[0] >= 0x41 && v1849) {
        MEMORY[0x1D25D9CB0](v1849, 0x1000C8000313F17);
      }
      if (v1867 >= 0x41 && v1866) {
        MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
      }
      uint64_t v88 = a1[3];
      BOOL v89 = *(v9 - 8);
      WORD4(v1856) = 257;
      uint64_t v90 = sub_1CBF52474(v88, v89, (uint64_t)v87, (uint64_t)&p_s2);
      __int16 v91 = operator new(0x80uLL);
      v91[21] = v91[21] & 0x38000000 | 2;
      unint64_t v8 = (unint64_t)(v91 + 16);
      *(void *)__int16 v91 = 0;
      *((void *)v91 + 1) = 0;
      *((void *)v91 + 2) = 0;
      *((void *)v91 + 3) = v91 + 16;
      *((void *)v91 + 4) = 0;
      *((void *)v91 + 5) = 0;
      *((void *)v91 + 6) = 0;
      *((void *)v91 + 7) = v91 + 16;
      if ((v70 & 0x3E) == 0x20)
      {
        unint64_t v94 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v81, (llvm::LLVMContext *)v72, v93);
        if ((*((_DWORD *)v81 + 2) & 0xFE) == 0x12) {
          unint64_t v94 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v81 + 8) | ((unint64_t)(*((_DWORD *)v81 + 2) == 19) << 32)), (uint64_t)v94);
        }
        WORD4(v1856) = 257;
        int v95 = *(uint64_t ***)v90;
        uint64_t v96 = ***(void ***)v90 + 1888;
        if (*(void *)v90 && (v95[1] & 0xFE) == 0x12)
        {
          v637 = (uint64_t **)(***(void ***)v90 + 1888);
          v638 = (llvm::Type *)*((unsigned int *)v95 + 8);
          if (*((_DWORD *)v95 + 2) == 19) {
            llvm::ScalableVectorType::get(v637, v638);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v637, v638);
          }
          uint64_t v96 = v639;
        }
        unint64_t v97 = (llvm::Value *)v8;
        __int16 v98 = v70;
      }
      else if (v70 == 38)
      {
        unint64_t v94 = llvm::Constant::getNullValue(v81, v92, v93);
        WORD4(v1856) = 257;
        uint64_t v225 = *(uint64_t ***)v90;
        uint64_t v96 = ***(void ***)v90 + 1888;
        if (*(void *)v90 && (v225[1] & 0xFE) == 0x12)
        {
          v640 = (uint64_t **)(***(void ***)v90 + 1888);
          v641 = (llvm::Type *)*((unsigned int *)v225 + 8);
          if (*((_DWORD *)v225 + 2) == 19) {
            llvm::ScalableVectorType::get(v640, v641);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v640, v641);
          }
          uint64_t v96 = v642;
        }
        unint64_t v97 = (llvm::Value *)v8;
        __int16 v98 = 38;
      }
      else
      {
        unint64_t v94 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v81, (llvm::LLVMContext *)&v1861, v93);
        if ((*((_DWORD *)v81 + 2) & 0xFE) == 0x12) {
          unint64_t v94 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v81 + 8) | ((unint64_t)(*((_DWORD *)v81 + 2) == 19) << 32)), (uint64_t)v94);
        }
        WORD4(v1856) = 257;
        v1417 = *(uint64_t ***)v90;
        uint64_t v96 = ***(void ***)v90 + 1888;
        if (*(void *)v90 && (v1417[1] & 0xFE) == 0x12)
        {
          v1620 = (uint64_t **)(***(void ***)v90 + 1888);
          v1621 = (llvm::Type *)*((unsigned int *)v1417 + 8);
          if (*((_DWORD *)v1417 + 2) == 19) {
            llvm::ScalableVectorType::get(v1620, v1621);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1620, v1621);
          }
          uint64_t v96 = v1622;
        }
        unint64_t v97 = (llvm::Value *)v8;
        __int16 v98 = 34;
      }
      goto LABEL_317;
    case '5':
      uint64_t v116 = (uint64_t)sub_1CCA4D8C0((uint64_t)a1, (uint64_t)a2, (uint64_t ***)*(a2 - 8), (uint64_t)v1818);
      goto LABEL_154;
    case '6':
    case '7':
      int v13 = (unsigned int *)v1818;
      unsigned int v14 = (llvm::ConstantInt ***)*(v9 - 8);
      int v15 = *((_WORD *)a2 + 9) & 0x3F;
      if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20)
      {
        v1826 = 0;
        goto LABEL_14;
      }
      if ((*((unsigned char *)v9 + 17) & 2) == 0) {
        goto LABEL_13;
      }
      uint64_t v672 = *((unsigned int *)v1818 + 2);
      if (v672 > 0x40)
      {
        int v1639 = 0;
        int64_t v1640 = (unint64_t)(v672 + 63) >> 6;
        do
        {
          BOOL v109 = v1640-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1641 = *(void *)(*(void *)v1818 + 8 * v1640);
          v1639 += __clz(v1641);
        }
        while (!v1641);
        int v1642 = v672 | 0xFFFFFFC0;
        if ((v672 & 0x3F) == 0) {
          int v1642 = 0;
        }
        if (v1639 + v1642 == v672) {
          goto LABEL_1066;
        }
      }
      else if (!*(void *)v1818)
      {
LABEL_1066:
        v673 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v673 + 16);
        v673[21] = v673[21] & 0x38000000 | 2;
        *(void *)v673 = 0;
        *((void *)v673 + 1) = 0;
        *((void *)v673 + 2) = 0;
        *((void *)v673 + 3) = v673 + 16;
        *((void *)v673 + 4) = 0;
        *((void *)v673 + 5) = 0;
        *((void *)v673 + 6) = 0;
        *((void *)v673 + 7) = v673 + 16;
        uint64_t Sub = (uint64_t)*(a2 - 4);
        WORD4(v1856) = 257;
        v674 = *v14;
        uint64_t v134 = *(void *)**v14 + 1888;
        if (*v14 && (v674[1] & 0xFE) == 0x12)
        {
          v1335 = (uint64_t **)(*(void *)**v14 + 1888);
          v1336 = (llvm::Type *)*((unsigned int *)v674 + 8);
          if (*((_DWORD *)v674 + 2) == 19) {
            llvm::ScalableVectorType::get(v1335, v1336);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1335, v1336);
          }
          uint64_t v134 = v1337;
        }
        uint64_t v135 = (llvm::Value *)v8;
        __int16 v136 = v15;
LABEL_174:
        uint64_t v137 = (uint64_t)v14;
        goto LABEL_175;
      }
LABEL_13:
      v1826 = 0;
      unint64_t p_s2 = (unint64_t)&v1826;
      v1854 = 0;
      if (sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v14))
      {
        unint64_t v151 = sub_1CD68BC1C((uint64_t)a1, (uint64_t)a2, *(v9 - 4), (llvm::APInt *)v13, v1826);
        goto LABEL_184;
      }
LABEL_14:
      uint64_t v1825 = 0;
      uint64_t v16 = (unsigned __int8 *)*(v9 - 4);
      unint64_t p_s2 = (unint64_t)&v1825;
      v1854 = 0;
      unint64_t v8 = 0;
      if (!sub_1CBF528D8((uint64_t)&p_s2, v16)) {
        goto LABEL_1414;
      }
      char v17 = (const llvm::APInt *)v13[2];
      unint64_t v18 = (unint64_t *)v1825;
      uint64_t v19 = *(unsigned int *)(v1825 + 8);
      if (v19 >= 0x41)
      {
        int v1418 = 0;
        int64_t v1419 = (unint64_t)(v19 + 63) >> 6;
        do
        {
          BOOL v109 = v1419-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1420 = *(void *)(*(void *)v1825 + 8 * v1419);
          v1418 += __clz(v1420);
        }
        while (!v1420);
        int v1421 = v19 | 0xFFFFFFC0;
        if ((v19 & 0x3F) == 0) {
          int v1421 = 0;
        }
        unsigned int v21 = v13[2];
        if ((v19 - v1418 - v1421) > 0x40)
        {
LABEL_18:
          unint64_t v8 = 0;
          unsigned int v22 = v21 - v17;
          if (v21 >= v17 || !v21) {
            goto LABEL_1414;
          }
          v1814 = (llvm::Constant *)*v9;
          if (*((unsigned char *)v9 + 16) != 55)
          {
            if (v15 != 36 && (v15 != 34 || (*((unsigned char *)v9 + 17) & 2) == 0))
            {
LABEL_23:
              if (v15 == 34)
              {
                unsigned int v1810 = v22;
                unsigned int v1832 = v13[2];
                if (v1832 > 0x40) {
                  operator new[]();
                }
                unint64_t v1831 = *(void *)v13;
                llvm::APInt::operator+=((uint64_t)&v1831, 1uLL);
                unsigned int v453 = v1832;
                unsigned int v1832 = 0;
                unsigned int v1834 = v453;
                v1783 = (void *)v1831;
                unsigned int __srca = v453;
                if (v453 >= 0x41) {
                  operator new[]();
                }
                unint64_t v454 = v1831 << v21;
                if (v453 == v21) {
                  unint64_t v454 = 0;
                }
                if (v453) {
                  unint64_t v455 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v453;
                }
                else {
                  unint64_t v455 = 0;
                }
                v1833 = (llvm::APInt *)(v455 & v454);
                llvm::APInt::operator-=((uint64_t)&v1833, 1uLL);
                LODWORD(p_s1) = v1834;
                uint64_t v1861 = (uint64_t)v1833;
                unsigned int v1834 = 0;
                if (__srca >= 0x41 && v1783) {
                  MEMORY[0x1D25D9CB0](v1783, 0x1000C8000313F17);
                }
                if (v1832 >= 0x41 && v1831) {
                  MEMORY[0x1D25D9CB0](v1831, 0x1000C8000313F17);
                }
                unsigned int v1830 = p_s1;
                if (p_s1 > 0x40) {
                  operator new[]();
                }
                unint64_t v1829 = v1861;
                llvm::APInt::operator+=((uint64_t)&v1829, 1uLL);
                uint64_t v456 = (void *)v1830;
                v1778 = (void *)v1829;
                unsigned int v1830 = 0;
                LODWORD(v1854) = v456;
                __srcb = v456;
                if (v456 > 0x40) {
                  operator new[]();
                }
                if (v456 == v21)
                {
                  unint64_t v1784 = 0;
                  unint64_t p_s2 = 0;
                }
                else
                {
                  unint64_t v1784 = v1829 >> v21;
                  unint64_t p_s2 = v1829 >> v21;
                }
                unsigned int v1828 = v13[2];
                if (v1828 > 0x40) {
                  operator new[]();
                }
                v1827 = *(void **)v13;
                llvm::APInt::operator+=((uint64_t)&v1827, 1uLL);
                unsigned int v457 = v1828;
                v1780 = v1827;
                unsigned int v1828 = 0;
                if (__srcb > 0x40) {
                  BOOL v458 = memcmp((const void *)v1784, v1827, (((unint64_t)__srcb + 63) >> 3) & 0x3FFFFFF8) == 0;
                }
                else {
                  BOOL v458 = v1784 == (void)v1827;
                }
                int v459 = v458;
                int __na = v459;
                if (v457 >= 0x41)
                {
                  if (v1780)
                  {
                    MEMORY[0x1D25D9CB0](v1780, 0x1000C8000313F17);
                    if (v1828 >= 0x41)
                    {
                      if (v1827) {
                        MEMORY[0x1D25D9CB0](v1827, 0x1000C8000313F17);
                      }
                    }
                  }
                }
                if (__srcb >= 0x41)
                {
                  if (v1784) {
                    MEMORY[0x1D25D9CB0](v1784, 0x1000C8000313F17);
                  }
                  if (v1778) {
                    MEMORY[0x1D25D9CB0](v1778, 0x1000C8000313F17);
                  }
                }
                if (v1830 >= 0x41 && v1829) {
                  MEMORY[0x1D25D9CB0](v1829, 0x1000C8000313F17);
                }
                if (__na)
                {
                  uint64_t v460 = operator new(0x80uLL);
                  unint64_t v8 = (unint64_t)(v460 + 16);
                  v460[21] = v460[21] & 0x38000000 | 2;
                  *(void *)uint64_t v460 = 0;
                  *((void *)v460 + 1) = 0;
                  *((void *)v460 + 2) = 0;
                  *((void *)v460 + 3) = v460 + 16;
                  *((void *)v460 + 4) = 0;
                  *((void *)v460 + 5) = 0;
                  *((void *)v460 + 6) = 0;
                  *((void *)v460 + 7) = v460 + 16;
                  __srcc = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v461);
                  if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                    __srcc = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)__srcc);
                  }
                  WORD4(v1856) = 257;
                  unsigned int v462 = *v14;
                  uint64_t v463 = *(void *)**v14 + 1888;
                  if (*v14 && (v462[1] & 0xFE) == 0x12)
                  {
                    v856 = (uint64_t **)(*(void *)**v14 + 1888);
                    v857 = (llvm::Type *)*((unsigned int *)v462 + 8);
                    if (*((_DWORD *)v462 + 2) == 19) {
                      llvm::ScalableVectorType::get(v856, v857);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v856, v857);
                    }
                    uint64_t v463 = v858;
                  }
                  llvm::CmpInst::CmpInst((llvm::Value *)v8, v463, 53, 34, (uint64_t)v14, (uint64_t)__srcc, (const char **)&p_s2, 0, 0);
                }
                if (p_s1 >= 0x41 && v1861) {
                  MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
                }
                unsigned int v22 = v1810;
                if (__na) {
                  goto LABEL_1414;
                }
              }
              goto LABEL_24;
            }
            LODWORD(p_s1) = v13[2];
            if (v17 > 0x40) {
              operator new[]();
            }
            unint64_t v8 = *(void *)v13;
            uint64_t v464 = *(void *)v13 << v21;
            if (v17 == v21) {
              uint64_t v464 = 0;
            }
            if (v17) {
              unint64_t v465 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
            }
            else {
              unint64_t v465 = 0;
            }
            unint64_t v466 = v465 & v464;
            uint64_t v1861 = v466;
            if (v17 == v21)
            {
              if (v21 >= 0x41)
              {
                unint64_t v8 = 0;
                if (!memcmp(0, *(const void **)v13, (((unint64_t)v21 + 63) >> 3) & 0x3FFFFFF8)) {
                  goto LABEL_718;
                }
                goto LABEL_2563;
              }
              unint64_t v467 = 0;
            }
            else
            {
              unint64_t v467 = v466 >> v21;
            }
            if (v467 == *(void *)v13)
            {
LABEL_718:
              v468 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v468 + 16);
              v468[21] = v468[21] & 0x38000000 | 2;
              *(void *)v468 = 0;
              *((void *)v468 + 1) = 0;
              *((void *)v468 + 2) = 0;
              *((void *)v468 + 3) = v468 + 16;
              *((void *)v468 + 4) = 0;
              *((void *)v468 + 5) = 0;
              *((void *)v468 + 6) = 0;
              *((void *)v468 + 7) = v468 + 16;
              __srcd = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v469);
              if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                __srcd = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)__srcd);
              }
              WORD4(v1856) = 257;
              v470 = *v14;
              uint64_t v471 = *(void *)**v14 + 1888;
              if (*v14 && (v470[1] & 0xFE) == 0x12)
              {
                v818 = (uint64_t **)(*(void *)**v14 + 1888);
                v819 = (llvm::Type *)*((unsigned int *)v470 + 8);
                if (*((_DWORD *)v470 + 2) == 19) {
                  llvm::ScalableVectorType::get(v818, v819);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v818, v819);
                }
                uint64_t v471 = v820;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v471, 53, v15, (uint64_t)v14, (uint64_t)__srcd, (const char **)&p_s2, 0, 0);
              char v472 = 1;
LABEL_723:
              if (p_s1 >= 0x41 && v1861) {
                MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
              }
              unsigned int v22 = v21 - v17;
              if (v472) {
                goto LABEL_1414;
              }
              goto LABEL_23;
            }
LABEL_2563:
            char v472 = 0;
            goto LABEL_723;
          }
          if ((*((unsigned char *)v9 + 17) & 2) != 0 || v15 == 40 || v15 == 36)
          {
            LODWORD(p_s1) = v13[2];
            if (v17 > 0x40) {
              operator new[]();
            }
            uint64_t v720 = *(void *)v13 << v21;
            if (v17 == v21) {
              uint64_t v720 = 0;
            }
            if (v17) {
              unint64_t v721 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
            }
            else {
              unint64_t v721 = 0;
            }
            uint64_t v1861 = v721 & v720;
            LODWORD(v1854) = v17;
            unint64_t v8 = v721 & v720;
            char v722 = v21;
            if (v17 == v21) {
              char v722 = 63;
            }
            uint64_t v723 = (uint64_t)(v8 << -(char)v17) >> -(char)v17 >> v722;
            unint64_t v724 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
            if (!v17) {
              unint64_t v724 = 0;
            }
            unint64_t p_s2 = v724 & v723;
            if ((v724 & v723) == *(void *)v13)
            {
              v725 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v725 + 16);
              v725[21] = v725[21] & 0x38000000 | 2;
              *(void *)v725 = 0;
              *((void *)v725 + 1) = 0;
              *((void *)v725 + 2) = 0;
              *((void *)v725 + 3) = v725 + 16;
              *((void *)v725 + 4) = 0;
              *((void *)v725 + 5) = 0;
              *((void *)v725 + 6) = 0;
              *((void *)v725 + 7) = v725 + 16;
              __srcuint64_t j = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v726);
              if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                __srcuint64_t j = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)__srcj);
              }
              WORD4(v1856) = 257;
              v727 = *v14;
              uint64_t v728 = *(void *)**v14 + 1888;
              if (*v14 && (v727[1] & 0xFE) == 0x12)
              {
                v1338 = (uint64_t **)(*(void *)**v14 + 1888);
                v1339 = (llvm::Type *)*((unsigned int *)v727 + 8);
                if (*((_DWORD *)v727 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1338, v1339);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1338, v1339);
                }
                uint64_t v728 = v1340;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v728, 53, v15, (uint64_t)v14, (uint64_t)__srcj, (const char **)&p_s2, 0, 0);
              char v729 = 1;
            }
            else
            {
              char v729 = 0;
            }
            if (p_s1 >= 0x41 && v1861) {
              MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
            }
            unsigned int v22 = v21 - v17;
            if (v729) {
              goto LABEL_1414;
            }
          }
          if (v15 != 38)
          {
            if (v15 == 34)
            {
              unsigned int v1813 = v22;
              unsigned int v1840 = v13[2];
              if (v1840 > 0x40) {
                operator new[]();
              }
              v1839 = *(llvm::APInt **)v13;
              llvm::APInt::operator+=((uint64_t)&v1839, 1uLL);
              unsigned int v865 = v1840;
              unsigned int v1840 = 0;
              unsigned int v1842 = v865;
              v1787 = v1839;
              unsigned int __srck = v865;
              if (v865 >= 0x41) {
                operator new[]();
              }
              uint64_t v866 = (void)v1839 << v21;
              if (v865 == v21) {
                uint64_t v866 = 0;
              }
              if (v865) {
                unint64_t v867 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v865;
              }
              else {
                unint64_t v867 = 0;
              }
              __s2 = (void *)(v867 & v866);
              llvm::APInt::operator-=((uint64_t)&__s2, 1uLL);
              LODWORD(p_s1) = v1842;
              uint64_t v1861 = (uint64_t)__s2;
              unsigned int v1842 = 0;
              if (__srck >= 0x41 && v1787) {
                MEMORY[0x1D25D9CB0](v1787, 0x1000C8000313F17);
              }
              if (v1840 >= 0x41 && v1839) {
                MEMORY[0x1D25D9CB0](v1839, 0x1000C8000313F17);
              }
              unsigned int v1838 = p_s1;
              if (p_s1 > 0x40) {
                operator new[]();
              }
              v1837 = (llvm::APInt *)v1861;
              llvm::APInt::operator+=((uint64_t)&v1837, 1uLL);
              unsigned int v868 = v1838;
              unsigned int v1838 = 0;
              LODWORD(v1854) = v868;
              v1782 = v1837;
              unsigned int __nb = v868;
              unsigned int v869 = v868;
              if (v868 >= 0x41) {
                operator new[]();
              }
              char v870 = v21;
              if (v869 == v21) {
                char v870 = 63;
              }
              uint64_t v871 = (uint64_t)((void)v1837 << -(char)v869) >> -(char)v869 >> v870;
              if (v869) {
                unint64_t v872 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v869;
              }
              else {
                unint64_t v872 = 0;
              }
              unint64_t p_s2 = v872 & v871;
              unsigned int v1836 = v13[2];
              if (v1836 > 0x40) {
                operator new[]();
              }
              v1835 = *(llvm::APInt **)v13;
              llvm::APInt::operator+=((uint64_t)&v1835, 1uLL);
              unsigned int v873 = v1836;
              v1788 = v1835;
              unsigned int v1836 = 0;
              if (v1854 > 0x40) {
                BOOL v874 = memcmp((const void *)p_s2, v1835, (((unint64_t)v1854 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else {
                BOOL v874 = p_s2 == (void)v1835;
              }
              int v875 = v874;
              int __srcl = v875;
              if (v873 >= 0x41)
              {
                if (v1788)
                {
                  MEMORY[0x1D25D9CB0](v1788, 0x1000C8000313F17);
                  if (v1836 >= 0x41)
                  {
                    if (v1835) {
                      MEMORY[0x1D25D9CB0](v1835, 0x1000C8000313F17);
                    }
                  }
                }
              }
              if (v1854 >= 0x41 && p_s2) {
                MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
              }
              if (__nb >= 0x41 && v1782) {
                MEMORY[0x1D25D9CB0](v1782, 0x1000C8000313F17);
              }
              if (v1838 >= 0x41 && v1837) {
                MEMORY[0x1D25D9CB0](v1837, 0x1000C8000313F17);
              }
              if (__srcl)
              {
                v876 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v876 + 16);
                v876[21] = v876[21] & 0x38000000 | 2;
                *(void *)v876 = 0;
                *((void *)v876 + 1) = 0;
                *((void *)v876 + 2) = 0;
                *((void *)v876 + 3) = v876 + 16;
                *((void *)v876 + 4) = 0;
                *((void *)v876 + 5) = 0;
                *((void *)v876 + 6) = 0;
                *((void *)v876 + 7) = v876 + 16;
                __nc = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v877);
                if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                  __nc = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)__nc);
                }
                WORD4(v1856) = 257;
                v878 = *v14;
                uint64_t v879 = *(void *)**v14 + 1888;
                if (*v14 && (v878[1] & 0xFE) == 0x12)
                {
                  v1359 = (uint64_t **)(*(void *)**v14 + 1888);
                  v1360 = (llvm::Type *)*((unsigned int *)v878 + 8);
                  if (*((_DWORD *)v878 + 2) == 19) {
                    llvm::ScalableVectorType::get(v1359, v1360);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v1359, v1360);
                  }
                  uint64_t v879 = v1361;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v879, 53, 34, (uint64_t)v14, (uint64_t)__nc, (const char **)&p_s2, 0, 0);
              }
              if (p_s1 >= 0x41 && v1861) {
                MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
              }
              unsigned int v22 = v1813;
              if (__srcl) {
                goto LABEL_1414;
              }
              int v302 = 1;
              goto LABEL_452;
            }
LABEL_451:
            int v302 = 0;
LABEL_452:
            uint64_t v303 = v13[2];
            if (v303 >= 3)
            {
              unsigned int v304 = v303 - 1;
              if (v303 > 0x40)
              {
                unsigned int v1510 = v22;
                if ((*(void *)(*(void *)v13 + 8 * (v304 >> 6)) >> v304))
                {
                  unsigned int v306 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v13);
                }
                else
                {
                  int v1511 = 0;
                  int64_t v1512 = (unint64_t)(v303 + 63) >> 6;
                  do
                  {
                    BOOL v109 = v1512-- < 1;
                    if (v109) {
                      break;
                    }
                    unint64_t v1513 = *(void *)(*(void *)v13 + 8 * v1512);
                    v1511 += __clz(v1513);
                  }
                  while (!v1513);
                  int v1514 = (v303 & 0x3F) != 0 ? v303 | 0xFFFFFFC0 : 0;
                  unsigned int v306 = v1511 + v1514;
                }
                unsigned int v22 = v1510;
              }
              else
              {
                unint64_t v305 = *(void *)v13;
                unsigned int v306 = ((*(void *)v13 >> v304) & 1) != 0
                     ? __clz(~(v305 << -(char)v303))
                     : v303 + __clz(v305) - 64;
              }
              if (v306 <= v21)
              {
                if (v302)
                {
                  v1665 = operator new(0x80uLL);
                  v1665[21] = v1665[21] & 0x38000000 | 2;
                  unint64_t v8 = (unint64_t)(v1665 + 16);
                  *(void *)v1665 = 0;
                  *((void *)v1665 + 1) = 0;
                  *((void *)v1665 + 2) = 0;
                  *((void *)v1665 + 3) = v1665 + 16;
                  *((void *)v1665 + 4) = 0;
                  *((void *)v1665 + 5) = 0;
                  *((void *)v1665 + 6) = 0;
                  *((void *)v1665 + 7) = v1665 + 16;
                  v1668 = llvm::Constant::getNullValue(v1814, v1666, v1667);
                  WORD4(v1856) = 257;
                  v1669 = *v14;
                  uint64_t v1670 = *(void *)**v14 + 1888;
                  if (*v14 && (v1669[1] & 0xFE) == 0x12)
                  {
                    v1735 = (uint64_t **)(*(void *)**v14 + 1888);
                    v1736 = (llvm::Type *)*((unsigned int *)v1669 + 8);
                    if (*((_DWORD *)v1669 + 2) == 19) {
                      llvm::ScalableVectorType::get(v1735, v1736);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v1735, v1736);
                    }
                    uint64_t v1670 = v1737;
                  }
                  llvm::CmpInst::CmpInst((llvm::Value *)v8, v1670, 53, 40, (uint64_t)v14, (uint64_t)v1668, (const char **)&p_s2, 0, 0);
                  goto LABEL_1414;
                }
                if (v15 == 36)
                {
                  uint64_t v307 = operator new(0x80uLL);
                  v307[21] = v307[21] & 0x38000000 | 2;
                  unint64_t v8 = (unint64_t)(v307 + 16);
                  *(void *)uint64_t v307 = 0;
                  *((void *)v307 + 1) = 0;
                  *((void *)v307 + 2) = 0;
                  *((void *)v307 + 3) = v307 + 16;
                  *((void *)v307 + 4) = 0;
                  *((void *)v307 + 5) = 0;
                  *((void *)v307 + 6) = 0;
                  *((void *)v307 + 7) = v307 + 16;
                  uint64_t v310 = llvm::Constant::getAllOnesValue(v1814, v308, v309);
                  WORD4(v1856) = 257;
                  uint64_t v311 = *v14;
                  uint64_t v312 = *(void *)**v14 + 1888;
                  if (*v14 && (v311[1] & 0xFE) == 0x12)
                  {
                    v1344 = (uint64_t **)(*(void *)**v14 + 1888);
                    v1345 = (llvm::Type *)*((unsigned int *)v311 + 8);
                    if (*((_DWORD *)v311 + 2) == 19) {
                      llvm::ScalableVectorType::get(v1344, v1345);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v1344, v1345);
                    }
                    uint64_t v312 = v1346;
                  }
                  llvm::CmpInst::CmpInst((llvm::Value *)v8, v312, 53, 38, (uint64_t)v14, (uint64_t)v310, (const char **)&p_s2, 0, 0);
                  goto LABEL_1414;
                }
              }
            }
LABEL_24:
            if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20) {
              goto LABEL_2299;
            }
            if ((*((unsigned char *)v9 + 17) & 2) != 0)
            {
              v786 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v786 + 16);
              v786[21] = v786[21] & 0x38000000 | 2;
              *(void *)v786 = 0;
              *((void *)v786 + 1) = 0;
              *((void *)v786 + 2) = 0;
              *((void *)v786 + 3) = v786 + 16;
              *((void *)v786 + 4) = 0;
              *((void *)v786 + 5) = 0;
              *((void *)v786 + 6) = 0;
              *((void *)v786 + 7) = v786 + 16;
              unsigned int v788 = v13[2];
              LODWORD(p_s1) = v788;
              if (v788 > 0x40) {
                operator new[]();
              }
              uint64_t v789 = *(void *)v13 << v21;
              if (v788 == v21) {
                uint64_t v789 = 0;
              }
              if (v788) {
                unint64_t v790 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v788;
              }
              else {
                unint64_t v790 = 0;
              }
              uint64_t v1861 = v790 & v789;
              v791 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v787);
              if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                v791 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)v791);
              }
              WORD4(v1856) = 257;
              v792 = *v14;
              uint64_t v793 = *(void *)**v14 + 1888;
              if (*v14 && (v792[1] & 0xFE) == 0x12)
              {
                v1347 = (uint64_t **)(*(void *)**v14 + 1888);
                v1348 = (llvm::Type *)*((unsigned int *)v792 + 8);
                if (*((_DWORD *)v792 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1347, v1348);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1347, v1348);
                }
                uint64_t v793 = v1349;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v793, 53, v15, (uint64_t)v14, (uint64_t)v791, (const char **)&p_s2, 0, 0);
              goto LABEL_373;
            }
            uint64_t v23 = v13[2];
            if (v23 > 0x40)
            {
              unsigned int v1430 = v22;
              int v1431 = 0;
              int64_t v1432 = (unint64_t)(v23 + 63) >> 6;
              do
              {
                BOOL v109 = v1432-- < 1;
                if (v109) {
                  break;
                }
                unint64_t v1433 = *(void *)(*(void *)v13 + 8 * v1432);
                v1431 += __clz(v1433);
              }
              while (!v1433);
              int v1434 = v23 | 0xFFFFFFC0;
              if ((v23 & 0x3F) == 0) {
                int v1434 = 0;
              }
              unsigned int v22 = v1430;
              if (v1431 + v1434 == v23) {
                goto LABEL_28;
              }
            }
            else if (!*(void *)v13)
            {
LABEL_28:
              unint64_t v24 = operator new(0x80uLL);
              v24[21] = v24[21] & 0x38000000 | 2;
              unint64_t v8 = (unint64_t)(v24 + 16);
              *(void *)unint64_t v24 = 0;
              *((void *)v24 + 1) = 0;
              *((void *)v24 + 2) = 0;
              *((void *)v24 + 3) = v24 + 16;
              *((void *)v24 + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = v24 + 16;
              if (v15 == 32)
              {
                unsigned int v1824 = v13[2];
                if (v1824 > 0x40) {
                  operator new[]();
                }
                v1823 = *(llvm::APInt **)v13;
                llvm::APInt::operator+=((uint64_t)&v1823, 1uLL);
                unsigned int v26 = v1824;
                unsigned int v1824 = 0;
                LODWORD(p_s1) = v26;
                if (v26 > 0x40) {
                  operator new[]();
                }
                uint64_t v27 = (void)v1823 << v21;
                if (v26 == v21) {
                  uint64_t v27 = 0;
                }
                if (v26) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
                }
                else {
                  unint64_t v28 = 0;
                }
                uint64_t v1861 = v28 & v27;
                uint64_t v29 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v25);
                if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                  uint64_t v29 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)v29);
                }
                WORD4(v1856) = 257;
                int v30 = *v14;
                uint64_t v31 = *(void *)**v14 + 1888;
                if (*v14 && (v30[1] & 0xFE) == 0x12)
                {
                  v663 = (uint64_t **)(*(void *)**v14 + 1888);
                  v664 = (llvm::Type *)*((unsigned int *)v30 + 8);
                  if (*((_DWORD *)v30 + 2) == 19) {
                    llvm::ScalableVectorType::get(v663, v664);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v663, v664);
                  }
                  uint64_t v31 = v665;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v31, 53, 36, (uint64_t)v14, (uint64_t)v29, (const char **)&p_s2, 0, 0);
                if (p_s1 >= 0x41 && v1861) {
                  MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
                }
                if (v1824 < 0x41) {
                  goto LABEL_1414;
                }
                uint64_t v32 = (uint64_t)v1823;
                if (!v1823) {
                  goto LABEL_1414;
                }
LABEL_1413:
                MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
                goto LABEL_1414;
              }
              unsigned int v1820 = v13[2];
              if (v1820 > 0x40) {
                operator new[]();
              }
              unint64_t v1819 = *(void *)v13;
              llvm::APInt::operator+=((uint64_t)&v1819, 1uLL);
              unsigned int v652 = v1820;
              unsigned int v1820 = 0;
              unsigned int v1822 = v652;
              if (v652 >= 0x41) {
                operator new[]();
              }
              unint64_t v653 = v1819 << v21;
              if (v652 == v21) {
                unint64_t v653 = 0;
              }
              if (v652) {
                unint64_t v654 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v652;
              }
              else {
                unint64_t v654 = 0;
              }
              v1821 = (uint64_t *)(v654 & v653);
              llvm::APInt::operator-=((uint64_t)&v1821, 1uLL);
              LODWORD(p_s1) = v1822;
              uint64_t v1861 = (uint64_t)v1821;
              unsigned int v1822 = 0;
              v656 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v655);
              if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                v656 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)v656);
              }
              WORD4(v1856) = 257;
              v657 = *v14;
              uint64_t v658 = *(void *)**v14 + 1888;
              if (*v14 && (v657[1] & 0xFE) == 0x12)
              {
                v1123 = (uint64_t **)(*(void *)**v14 + 1888);
                v1124 = (llvm::Type *)*((unsigned int *)v657 + 8);
                if (*((_DWORD *)v657 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1123, v1124);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1123, v1124);
                }
                uint64_t v658 = v1125;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v658, 53, 34, (uint64_t)v14, (uint64_t)v656, (const char **)&p_s2, 0, 0);
              if (p_s1 >= 0x41 && v1861) {
                MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
              }
              if (v1822 >= 0x41 && v1821) {
                MEMORY[0x1D25D9CB0](v1821, 0x1000C8000313F17);
              }
              if (v1820 >= 0x41)
              {
                uint64_t v32 = v1819;
                if (v1819) {
                  goto LABEL_1413;
                }
              }
LABEL_1414:
              if (v8) {
                return v8;
              }
              goto LABEL_1415;
            }
            v1435 = v9[1];
            if (!v1435 || v1435[1])
            {
LABEL_2299:
              unint64_t v8 = 0;
              goto LABEL_1414;
            }
            LODWORD(p_s1) = v17;
            if (v17 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1861);
            }
            uint64_t v1861 = 0;
            v1436 = v17;
            if (v21 != v17)
            {
              unsigned int v1437 = v17 + v22;
              if (v17 + v22 > 0x3F) {
                llvm::APInt::setBitsSlowCase(&v1861, v1437, v17);
              }
              else {
                v1861 |= 0xFFFFFFFFFFFFFFFFLL >> v22 << v1437;
              }
            }
            v1438 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v1436);
            if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
              v1438 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)v1438);
            }
            uint64_t v1439 = a1[3];
            if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
            {
              v1450 = 0;
              v1449 = (uint64_t *)&byte_1CFBCE98E;
LABEL_2315:
              WORD4(v1856) = 773;
              unint64_t p_s2 = (unint64_t)v1449;
              v1854 = v1450;
              uint64_t v1855 = (uint64_t)".mask";
              v1452 = sub_1CBF52474(v1439, v14, (uint64_t)v1438, (uint64_t)&p_s2);
              v1453 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v1453 + 16);
              v1453[21] = v1453[21] & 0x38000000 | 2;
              *(void *)v1453 = 0;
              *((void *)v1453 + 1) = 0;
              *((void *)v1453 + 2) = 0;
              *((void *)v1453 + 3) = v1453 + 16;
              *((void *)v1453 + 4) = 0;
              *((void *)v1453 + 5) = 0;
              *((void *)v1453 + 6) = 0;
              *((void *)v1453 + 7) = v1453 + 16;
              unsigned int v1455 = v13[2];
              unsigned int v1848 = v1455;
              if (v1455 > 0x40) {
                operator new[]();
              }
              uint64_t v1456 = *(void *)v13 << v21;
              if (v1455 == v21) {
                uint64_t v1456 = 0;
              }
              if (v1455) {
                unint64_t v1457 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1455;
              }
              else {
                unint64_t v1457 = 0;
              }
              __s1 = (void *)(v1457 & v1456);
              v1458 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&__s1, v1454);
              if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                v1458 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)v1458);
              }
              WORD4(v1856) = 257;
              v1459 = *(void ***)v1452;
              uint64_t v1460 = ***(void ***)v1452 + 1888;
              if (*(void *)v1452 && (v1459[1] & 0xFE) == 0x12)
              {
                v1461 = (uint64_t **)(***(void ***)v1452 + 1888);
                v1462 = (llvm::Type *)*((unsigned int *)v1459 + 8);
                if (*((_DWORD *)v1459 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1461, v1462);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1461, v1462);
                }
                uint64_t v1460 = v1463;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v1460, 53, v15, (uint64_t)v1452, (uint64_t)v1458, (const char **)&p_s2, 0, 0);
              if (v1848 >= 0x41)
              {
                v1406 = __s1;
                if (__s1) {
LABEL_2246:
                }
                  MEMORY[0x1D25D9CB0](v1406, 0x1000C8000313F17);
              }
LABEL_373:
              if (p_s1 < 0x41) {
                goto LABEL_1414;
              }
              uint64_t v32 = v1861;
              if (!v1861) {
                goto LABEL_1414;
              }
              goto LABEL_1413;
            }
            uint64_t v1440 = *(void *)**v9;
            uint64_t v1441 = *(void *)(v1440 + 152);
            uint64_t v1442 = *(unsigned int *)(v1440 + 168);
            if (v1442)
            {
              LODWORD(v1443) = (v1442 - 1) & ((v9 >> 4) ^ (v9 >> 9));
              v1444 = (llvm::ConstantInt ****)(v1441 + 16 * v1443);
              v1445 = *v1444;
              if (*v1444 == v9)
              {
LABEL_2314:
                v1448 = v1444[1];
                v1451 = *v1448;
                v1449 = (uint64_t *)(v1448 + 2);
                v1450 = v1451;
                goto LABEL_2315;
              }
              int v1446 = 1;
              while (v1445 != (llvm::ConstantInt ***)-4096)
              {
                int v1447 = v1443 + v1446++;
                uint64_t v1443 = v1447 & (v1442 - 1);
                v1445 = *(llvm::ConstantInt ****)(v1441 + 16 * v1443);
                if (v1445 == v9)
                {
                  v1444 = (llvm::ConstantInt ****)(v1441 + 16 * v1443);
                  goto LABEL_2314;
                }
              }
            }
            v1444 = (llvm::ConstantInt ****)(v1441 + 16 * v1442);
            goto LABEL_2314;
          }
          unsigned int v1812 = v22;
          LODWORD(v1867) = v13[2];
          if (v1867 > 0x40) {
            operator new[]();
          }
          v1866 = *(uint64_t **)v13;
          llvm::APInt::operator+=((uint64_t)&v1866, 1uLL);
          unsigned int v617 = v1867;
          LODWORD(v1867) = 0;
          v1850[0] = v617;
          v1785 = v1866;
          unsigned int __srcg = v617;
          if (v617 >= 0x41) {
            operator new[]();
          }
          uint64_t v618 = (void)v1866 << v21;
          if (v617 == v21) {
            uint64_t v618 = 0;
          }
          if (v617) {
            unint64_t v619 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v617;
          }
          else {
            unint64_t v619 = 0;
          }
          v1849 = (void *)(v619 & v618);
          llvm::APInt::operator-=((uint64_t)&v1849, 1uLL);
          LODWORD(p_s1) = v1850[0];
          uint64_t v1861 = (uint64_t)v1849;
          v1850[0] = 0;
          if (__srcg >= 0x41 && v1785) {
            MEMORY[0x1D25D9CB0](v1785, 0x1000C8000313F17);
          }
          if (v1867 >= 0x41 && v1866) {
            MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
          }
          unsigned int v620 = v13[2];
          if (v620 > 0x40)
          {
            if (((*(void *)(*(void *)v13 + 8 * ((v620 - 1) >> 6)) >> (v620 - 1)) & 1) != 0
              || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v13) != v620 - 1)
            {
              unsigned int v1860 = v620;
              operator new[]();
            }
          }
          else if (*(void *)v13 != ~(-1 << (v620 - 1)))
          {
            unsigned int v1860 = v13[2];
            uint64_t v1859 = *(void *)v13;
            llvm::APInt::operator+=((uint64_t)&v1859, 1uLL);
            unsigned int v621 = v1860;
            v1786 = (void *)v1859;
            unsigned int v1860 = 0;
            LODWORD(v1854) = v621;
            unsigned int __srch = v621;
            if (v621 > 0x40) {
              operator new[]();
            }
            uint64_t v622 = v1859 << v21;
            if (v621 == v21) {
              uint64_t v622 = 0;
            }
            unint64_t v623 = v621 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v621 : 0;
            unint64_t p_s2 = v623 & v622;
            unint64_t v1776 = v623 & v622;
            if ((v623 & v622) == 1 << (__srch - 1))
            {
              int v1779 = 0;
            }
            else
            {
              unsigned int v1846 = p_s1;
              if (p_s1 > 0x40) {
                operator new[]();
              }
              v1845 = (llvm::APInt *)v1861;
              llvm::APInt::operator+=((uint64_t)&v1845, 1uLL);
              unsigned int v624 = v1846;
              unsigned int v1846 = 0;
              unsigned int v1848 = v624;
              v1775 = v1845;
              unsigned int v1781 = v624;
              unsigned int v625 = v624;
              if (v624 >= 0x41) {
                operator new[]();
              }
              char v626 = v21;
              if (v625 == v21) {
                char v626 = 63;
              }
              uint64_t v627 = (uint64_t)((void)v1845 << -(char)v625) >> -(char)v625 >> v626;
              if (v625) {
                unint64_t v628 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v625;
              }
              else {
                unint64_t v628 = 0;
              }
              __s1 = (void *)(v628 & v627);
              unsigned int v1844 = v13[2];
              if (v1844 > 0x40) {
                operator new[]();
              }
              v1843 = *(llvm::Type **)v13;
              llvm::APInt::operator+=((uint64_t)&v1843, 1uLL);
              unsigned int v629 = v1844;
              v1777 = v1843;
              unsigned int v1844 = 0;
              if (v1848 > 0x40) {
                BOOL v630 = memcmp(__s1, v1843, (((unint64_t)v1848 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else {
                BOOL v630 = __s1 == v1843;
              }
              int v631 = v630;
              int v1779 = v631;
              if (v629 >= 0x41)
              {
                if (v1777)
                {
                  MEMORY[0x1D25D9CB0](v1777, 0x1000C8000313F17);
                  if (v1844 >= 0x41)
                  {
                    if (v1843) {
                      MEMORY[0x1D25D9CB0](v1843, 0x1000C8000313F17);
                    }
                  }
                }
              }
              if (v1848 >= 0x41 && __s1) {
                MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
              }
              if (v1781 >= 0x41 && v1775) {
                MEMORY[0x1D25D9CB0](v1775, 0x1000C8000313F17);
              }
              if (v1846 >= 0x41 && v1845) {
                MEMORY[0x1D25D9CB0](v1845, 0x1000C8000313F17);
              }
              if (__srch >= 0x41 && v1776) {
                MEMORY[0x1D25D9CB0](v1776, 0x1000C8000313F17);
              }
            }
            if (__srch >= 0x41 && v1786) {
              MEMORY[0x1D25D9CB0](v1786, 0x1000C8000313F17);
            }
            if (v1860 >= 0x41 && v1859) {
              MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
            }
            if (v1779)
            {
              v632 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v632 + 16);
              v632[21] = v632[21] & 0x38000000 | 2;
              *(void *)v632 = 0;
              *((void *)v632 + 1) = 0;
              *((void *)v632 + 2) = 0;
              *((void *)v632 + 3) = v632 + 16;
              *((void *)v632 + 4) = 0;
              *((void *)v632 + 5) = 0;
              *((void *)v632 + 6) = 0;
              *((void *)v632 + 7) = v632 + 16;
              __srcuint64_t i = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1814, (llvm::LLVMContext *)&v1861, v633);
              if ((*((_DWORD *)v1814 + 2) & 0xFE) == 0x12) {
                __srcuint64_t i = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1814 + 8) | ((unint64_t)(*((_DWORD *)v1814 + 2) == 19) << 32)), (uint64_t)__srci);
              }
              WORD4(v1856) = 257;
              v634 = *v14;
              uint64_t v635 = *(void *)**v14 + 1888;
              if (*v14 && (v634[1] & 0xFE) == 0x12)
              {
                v1113 = (uint64_t **)(*(void *)**v14 + 1888);
                v1114 = (llvm::Type *)*((unsigned int *)v634 + 8);
                if (*((_DWORD *)v634 + 2) == 19) {
                  llvm::ScalableVectorType::get(v1113, v1114);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1113, v1114);
                }
                uint64_t v635 = v1115;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v635, 53, 38, (uint64_t)v14, (uint64_t)__srci, (const char **)&p_s2, 0, 0);
              char v636 = 1;
LABEL_1010:
              if (p_s1 >= 0x41 && v1861) {
                MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
              }
              unsigned int v22 = v1812;
              if (v636) {
                goto LABEL_1414;
              }
              goto LABEL_451;
            }
          }
          char v636 = 0;
          goto LABEL_1010;
        }
        unint64_t v18 = *(unint64_t **)v1825;
      }
      unint64_t v20 = *v18;
      unsigned int v21 = v13[2];
      if (v20 <= (unint64_t)v17) {
        unsigned int v21 = v20;
      }
      goto LABEL_18;
    case '8':
      uint64_t v117 = (unsigned int *)v1818;
      int v118 = *((_WORD *)a2 + 9) & 0x3F;
      if (v118 != 33 || ((*a2)[1] & 0xFE) != 0x12) {
        goto LABEL_264;
      }
      uint64_t v119 = *((unsigned int *)v1818 + 2);
      if (v119 > 0x40)
      {
        int v191 = 0;
        int64_t v192 = (unint64_t)(v119 + 63) >> 6;
        do
        {
          BOOL v109 = v192-- < 1;
          if (v109) {
            break;
          }
          unint64_t v193 = *(void *)(*(void *)v1818 + 8 * v192);
          v191 += __clz(v193);
        }
        while (!v193);
        int v194 = v119 | 0xFFFFFFC0;
        if ((v119 & 0x3F) == 0) {
          int v194 = 0;
        }
        if (v191 + v194 != v119) {
          goto LABEL_264;
        }
      }
      else if (*(void *)v1818)
      {
        goto LABEL_264;
      }
      if (sub_1CBF5250C((uint64_t)&p_s2, (llvm::Constant *)*(v9 - 4)))
      {
        uint64_t v195 = operator new(0x60uLL);
        unint64_t v8 = (unint64_t)(v195 + 8);
        v195[13] = v195[13] & 0x38000000 | 1;
        *(void *)uint64_t v195 = 0;
        *((void *)v195 + 1) = 0;
        *((void *)v195 + 2) = 0;
        *((void *)v195 + 3) = v195 + 8;
        int v196 = (llvm::Value *)*(v9 - 8);
        int v197 = (llvm::Type *)*a2;
        WORD4(v1856) = 257;
        llvm::TruncInst::TruncInst((llvm::TruncInst *)(v195 + 8), v196, v197, (const char **)&p_s2, 0);
        return v8;
      }
LABEL_264:
      v1845 = 0;
      unint64_t p_s2 = (unint64_t)&v1843;
      v1854 = &v1845;
      uint64_t v1855 = 0;
      int v198 = *((unsigned __int8 *)v9 + 16);
      if (v198 == 5)
      {
        if (*((_WORD *)v9 + 9) != 28) {
          goto LABEL_274;
        }
        int v201 = (llvm::Type **)&v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
        if (!*v201) {
          goto LABEL_274;
        }
        v1843 = *v201;
        if ((sub_1CBF5295C((uint64_t)&v1854, v201[4]) & 1) == 0) {
          goto LABEL_274;
        }
      }
      else
      {
        if (v198 != 56) {
          goto LABEL_274;
        }
        if (!*(v9 - 8)) {
          goto LABEL_274;
        }
        v1843 = (llvm::Type *)*(v9 - 8);
        if (!sub_1CBF528D8((uint64_t)&v1854, (unsigned __int8 *)*(v9 - 4))) {
          goto LABEL_274;
        }
      }
      __int16 v202 = v9[1];
      if (!v202 || v202[1]) {
        goto LABEL_274;
      }
      if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20) {
        goto LABEL_762;
      }
      uint64_t v272 = v117[2];
      if (v272 > 0x40)
      {
        int v333 = 0;
        int64_t v334 = (unint64_t)(v272 + 63) >> 6;
        do
        {
          BOOL v109 = v334-- < 1;
          if (v109) {
            break;
          }
          unint64_t v335 = *(void *)(*(void *)v117 + 8 * v334);
          v333 += __clz(v335);
        }
        while (!v335);
        int v336 = v272 | 0xFFFFFFC0;
        if ((v272 & 0x3F) == 0) {
          int v336 = 0;
        }
        if (v333 + v336 != v272) {
          goto LABEL_762;
        }
      }
      else if (*(void *)v117)
      {
        goto LABEL_762;
      }
      unsigned int v337 = *((_DWORD *)v1845 + 2);
      if (v337 > 0x40)
      {
        if (((*(void *)(*(void *)v1845 + 8 * ((v337 - 1) >> 6)) >> (v337 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1845) != v337 - 1)
        {
          unsigned int v1860 = v337;
          operator new[]();
        }
        goto LABEL_501;
      }
      if (*(void *)v1845 == 1 << (v337 - 1))
      {
LABEL_501:
        uint64_t Sub = (uint64_t)llvm::Constant::getNullValue(*(llvm::Constant **)v1843, v199, v200);
        __int16 v338 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v338 + 16);
        v338[21] = v338[21] & 0x38000000 | 2;
        *(void *)__int16 v338 = 0;
        *((void *)v338 + 1) = 0;
        *((void *)v338 + 2) = 0;
        *((void *)v338 + 3) = v338 + 16;
        *((void *)v338 + 4) = 0;
        *((void *)v338 + 5) = 0;
        *((void *)v338 + 6) = 0;
        *((void *)v338 + 7) = v338 + 16;
        if (v118 == 33) {
          __int16 v331 = 40;
        }
        else {
          __int16 v331 = 39;
        }
LABEL_757:
        int v332 = v1843;
        goto LABEL_758;
      }
      uint64_t v427 = ~*(void *)v1845;
      unint64_t v428 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v337;
      if (!v337) {
        unint64_t v428 = 0;
      }
      unint64_t v429 = v428 & v427;
      uint64_t v1859 = v428 & v427;
      LODWORD(v1867) = v337;
      v1866 = (uint64_t *)(v428 & v427);
      unsigned int v1860 = 0;
      llvm::APInt::operator+=((uint64_t)&v1866, 1uLL);
      uint64_t v432 = v1867;
      LODWORD(v1867) = 0;
      if (v432 > 0x40)
      {
        unint64_t v449 = 0;
        int v450 = 0;
        unint64_t v451 = ((unint64_t)(v432 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          uint8x8_t v452 = (uint8x8_t)vcnt_s8((int8x8_t)v1866[v449 / 8]);
          v452.i16[0] = vaddlv_u8(v452);
          v450 += v452.i32[0];
          v449 += 8;
        }
        while (v451 != v449);
        BOOL v433 = v450 == 1;
        if (v1866)
        {
          MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
          if (v1867 >= 0x41)
          {
            if (v1866) {
              MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
            }
          }
        }
      }
      else if (v1866)
      {
        BOOL v433 = ((unint64_t)v1866 & ((unint64_t)v1866 - 1)) == 0;
      }
      else
      {
        BOOL v433 = 0;
      }
      if (v1860 >= 0x41 && v429 != 0) {
        MEMORY[0x1D25D9CB0](v429, 0x1000C8000313F17);
      }
      if (v433)
      {
        uint64_t v486 = (llvm::Constant *)*(v9 - 4);
        uint64_t v487 = *(llvm::ConstantFP **)v486;
        if ((*(_DWORD *)(*(void *)v486 + 8) & 0xFE) == 0x12) {
          unsigned int v488 = *(unsigned __int8 *)(**((void **)v487 + 2) + 8);
        }
        else {
          unsigned int v488 = *(_DWORD *)(*(void *)v486 + 8);
        }
        if (v488 <= 6) {
          uint64_t v489 = llvm::ConstantFP::getZero(v487, (llvm::Type *)1, v431);
        }
        else {
          uint64_t v489 = llvm::Constant::getNullValue(v487, v430, v431);
        }
        int64_t v491 = (uint64_t *)v489;
        uint64_t Sub = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v489, v486, v490);
        if (!Sub)
        {
          v1357 = (void **)*v491;
          if (*v491)
          {
            uint64_t v1861 = (uint64_t)v491;
            p_s1 = v486;
            uint64_t v1358 = **v1357 + 1512;
            LODWORD(p_s2) = 15;
            v1854 = (llvm::APInt **)&v1861;
            uint64_t v1855 = 2;
            long long v1856 = 0u;
            long long v1857 = 0u;
            uint64_t v1858 = 0;
            uint64_t Sub = sub_1CC56C20C(v1358, (uint64_t)v1357, (unsigned __int8 *)&p_s2);
          }
          else
          {
            uint64_t Sub = 0;
          }
        }
        unint64_t v492 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v492 + 16);
        v492[21] = v492[21] & 0x38000000 | 2;
        *(void *)unint64_t v492 = 0;
        *((void *)v492 + 1) = 0;
        *((void *)v492 + 2) = 0;
        *((void *)v492 + 3) = v492 + 16;
        *((void *)v492 + 4) = 0;
        *((void *)v492 + 5) = 0;
        *((void *)v492 + 6) = 0;
        *((void *)v492 + 7) = v492 + 16;
        if (v118 == 33) {
          __int16 v331 = 35;
        }
        else {
          __int16 v331 = 36;
        }
        goto LABEL_757;
      }
LABEL_762:
      __s2 = 0;
      uint64_t v494 = (uint64_t)*(v9 - 8);
      unint64_t p_s2 = (unint64_t)&__s2;
      uint64_t v495 = *(void *)(v494 + 8);
      if (v495 && !*(void *)(v495 + 8) && sub_1CBC5BF18((void **)&p_s2, v494))
      {
        if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20) {
          goto LABEL_766;
        }
        unsigned int v517 = v117[2];
        char v518 = v517 - 1;
        uint64_t v519 = v517 >= 0x41 ? (unsigned int *)(*(void *)v117 + 8 * ((v517 - 1) >> 6)) : v117;
        if (((*(void *)v519 >> v518) & 1) == 0)
        {
          uint64_t v520 = v1845;
          unsigned int v521 = *((_DWORD *)v1845 + 2);
          unsigned int v522 = v521 - 1;
          if (v521 >= 0x41) {
            uint64_t v520 = (llvm::APInt *)(*(void *)v1845 + 8 * (v522 >> 6));
          }
          if (((*(void *)v520 >> v522) & 1) == 0)
          {
LABEL_766:
            if (((*a2)[1] & 0xFE) != 0x12)
            {
              uint64_t v496 = *(llvm::Type **)__s2;
              uint64_t v497 = *(llvm::Type **)__s2;
              if ((*(_DWORD *)(*(void *)__s2 + 8) & 0xFE) == 0x12) {
                uint64_t v497 = (llvm::Type *)**((void **)v496 + 2);
              }
              unsigned int v498 = llvm::Type::getPrimitiveSizeInBits(v497);
              unsigned int v500 = v498;
              if (v498 > 0x40)
              {
                if (v117[2] != v498) {
                  operator new[]();
                }
                sub_1CD0463BC((uint64_t)&p_s2, (uint64_t)v117);
              }
              else
              {
                unint64_t v501 = *(void *)v117;
                LODWORD(v1854) = v498;
                unint64_t v502 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v498;
                if (!v498) {
                  unint64_t v502 = 0;
                }
                unint64_t p_s2 = v502 & v501;
              }
              uint64_t v504 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v496, (llvm::LLVMContext *)&p_s2, v499);
              if ((*((_DWORD *)v496 + 2) & 0xFE) == 0x12) {
                uint64_t v504 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v496 + 8) | ((unint64_t)(*((_DWORD *)v496 + 2) == 19) << 32)), (uint64_t)v504);
              }
              if (v1854 >= 0x41 && p_s2) {
                MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
              }
              if (v500 > 0x40)
              {
                if (*((_DWORD *)v1845 + 2) != v500) {
                  operator new[]();
                }
                sub_1CD0463BC((uint64_t)&p_s2, (uint64_t)v1845);
              }
              else
              {
                uint64_t v505 = *(llvm::Constant **)v1845;
                LODWORD(v1854) = v500;
                if (v500) {
                  unint64_t v506 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v500;
                }
                else {
                  unint64_t v506 = 0;
                }
                unint64_t p_s2 = v506 & (unint64_t)v505;
              }
              uint64_t v507 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v496, (llvm::LLVMContext *)&p_s2, v503);
              if ((*((_DWORD *)v496 + 2) & 0xFE) == 0x12) {
                uint64_t v507 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v496 + 8) | ((unint64_t)(*((_DWORD *)v496 + 2) == 19) << 32)), (uint64_t)v507);
              }
              if (v1854 >= 0x41 && p_s2) {
                MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
              }
              uint64_t v508 = a1[3];
              if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
              {
                v680 = 0;
                v679 = (uint64_t *)&byte_1CFBCE98E;
LABEL_1077:
                WORD4(v1856) = 261;
                unint64_t p_s2 = (unint64_t)v679;
                v1854 = v680;
                v682 = sub_1CBF52474(v508, __s2, (uint64_t)v507, (uint64_t)&p_s2);
                v683 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v683 + 16);
                v683[21] = v683[21] & 0x38000000 | 2;
                *(void *)v683 = 0;
                *((void *)v683 + 1) = 0;
                *((void *)v683 + 2) = 0;
                *((void *)v683 + 3) = v683 + 16;
                *((void *)v683 + 4) = 0;
                *((void *)v683 + 5) = 0;
                *((void *)v683 + 6) = 0;
                *((void *)v683 + 7) = v683 + 16;
                __int16 v684 = *((_WORD *)a2 + 9) & 0x3F;
                WORD4(v1856) = 257;
                v685 = *(void ***)v682;
                uint64_t v686 = ***(void ***)v682 + 1888;
                if (*(void *)v682 && (v685[1] & 0xFE) == 0x12)
                {
                  v862 = (uint64_t **)(***(void ***)v682 + 1888);
                  v863 = (llvm::Type *)*((unsigned int *)v685 + 8);
                  if (*((_DWORD *)v685 + 2) == 19) {
                    llvm::ScalableVectorType::get(v862, v863);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v862, v863);
                  }
                  uint64_t v686 = v864;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v686, 53, v684, (uint64_t)v682, (uint64_t)v504, (const char **)&p_s2, 0, 0);
                return v8;
              }
              uint64_t v509 = *(void *)**v9;
              uint64_t v510 = *(void *)(v509 + 152);
              uint64_t v511 = *(unsigned int *)(v509 + 168);
              if (v511)
              {
                LODWORD(v512) = (v511 - 1) & ((v9 >> 4) ^ (v9 >> 9));
                uint64_t v513 = (llvm::ConstantInt ****)(v510 + 16 * v512);
                uint64_t v514 = *v513;
                if (*v513 == v9)
                {
LABEL_1076:
                  v678 = v513[1];
                  v681 = *v678;
                  v679 = (uint64_t *)(v678 + 2);
                  v680 = v681;
                  goto LABEL_1077;
                }
                int v515 = 1;
                while (v514 != (llvm::ConstantInt ***)-4096)
                {
                  int v516 = v512 + v515++;
                  uint64_t v512 = v516 & (v511 - 1);
                  uint64_t v514 = *(llvm::ConstantInt ****)(v510 + 16 * v512);
                  if (v514 == v9)
                  {
                    uint64_t v513 = (llvm::ConstantInt ****)(v510 + 16 * v512);
                    goto LABEL_1076;
                  }
                }
              }
              uint64_t v513 = (llvm::ConstantInt ****)(v510 + 16 * v511);
              goto LABEL_1076;
            }
          }
        }
      }
      uint64_t v523 = (uint64_t)*(v9 - 8);
      if (!v523
        || ((unsigned int v524 = *(unsigned __int8 *)(v523 + 16), v525 = v524 - 28, v524 >= 0x1C)
          ? (BOOL v526 = v524 - 59 >= 0xFFFFFFEE)
          : (BOOL v526 = 0),
            v526 ? (BOOL v527 = v524 - 56 >= 0xFFFFFFFD) : (BOOL v527 = 0),
            !v527))
      {
LABEL_1214:
        if ((*((_WORD *)a2 + 9) & 0x3Eu) - 38 < 4) {
          goto LABEL_274;
        }
        uint64_t v748 = v117[2];
        if (v748 > 0x40)
        {
          int v749 = 0;
          int64_t v750 = (unint64_t)(v748 + 63) >> 6;
          do
          {
            BOOL v109 = v750-- < 1;
            if (v109) {
              break;
            }
            unint64_t v751 = *(void *)(*(void *)v117 + 8 * v750);
            v749 += __clz(v751);
          }
          while (!v751);
          int v752 = v748 | 0xFFFFFFC0;
          if ((v748 & 0x3F) == 0) {
            int v752 = 0;
          }
          if (v749 + v752 != v748) {
            goto LABEL_274;
          }
        }
        else if (*(void *)v117)
        {
          goto LABEL_274;
        }
        v753 = (*(v9 - 8))[1];
        if (!v753 || *((void *)v753 + 1) || !sub_1CBF5250C((uint64_t)&p_s2, (llvm::Constant *)*(v9 - 4))) {
          goto LABEL_274;
        }
        v754 = (llvm::Constant *)*(v9 - 4);
        v755 = (uint64_t ***)*(v9 - 8);
        int v756 = *((unsigned __int8 *)v755 + 16);
        if (v756 == 5)
        {
          if (*((_WORD *)v755 + 9) != 29) {
            goto LABEL_274;
          }
          v759 = &v755[-4 * (*((_DWORD *)v755 + 5) & 0x7FFFFFF)];
          v757 = (uint64_t ***)*v759;
          if (!*v759) {
            goto LABEL_274;
          }
          v758 = v759[4];
          if (!v758) {
            goto LABEL_274;
          }
        }
        else
        {
          if (v756 != 57) {
            goto LABEL_274;
          }
          v757 = (uint64_t ***)*(v755 - 8);
          if (!v757) {
            goto LABEL_274;
          }
          v758 = *(v755 - 4);
          if (!v758) {
            goto LABEL_274;
          }
        }
        int v760 = *((unsigned __int8 *)v757 + 16);
        if (v760 == 5)
        {
          if (*((_WORD *)v757 + 9) != 26) {
            goto LABEL_274;
          }
          v768 = &v757[-4 * (*((_DWORD *)v757 + 5) & 0x7FFFFFF)];
          if (v758 != *v768) {
            goto LABEL_274;
          }
          v761 = (unsigned __int8 *)v768[4];
          if (!v761) {
            goto LABEL_274;
          }
        }
        else
        {
          if (v760 != 54) {
            goto LABEL_274;
          }
          if (v758 != *(v757 - 8)) {
            goto LABEL_274;
          }
          v761 = (unsigned __int8 *)*(v757 - 4);
          if (!v761) {
            goto LABEL_274;
          }
        }
        v769 = v9[1];
        if (v769) {
          LODWORD(v769) = v769[1] == 0;
        }
        v770 = v755[1];
        if (v770) {
          LODWORD(v770) = v770[1] == 0;
        }
        int v771 = v770 + v769;
        v772 = v757[1];
        if (v772) {
          LODWORD(v772) = v772[1] == 0;
        }
        unsigned int v773 = v771 + v772;
        if (v761[16] <= 0x14u)
        {
          if (!v773) {
            goto LABEL_274;
          }
          Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)*(v9 - 4), (llvm::Constant *)v761, (llvm::Constant *)1, 0);
          v827 = llvm::ConstantExpr::getOr(Shl, v754, v825, v826);
LABEL_2099:
          uint64_t v1320 = (uint64_t)v827;
          if (!v827) {
            goto LABEL_274;
          }
          uint64_t v1321 = a1[3];
          if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
          {
            v1332 = 0;
            v1331 = (uint64_t *)&byte_1CFBCE98E;
LABEL_2109:
            WORD4(v1856) = 261;
            unint64_t p_s2 = (unint64_t)v1331;
            v1854 = v1332;
            v1334 = sub_1CBF52474(v1321, v758, v1320, (uint64_t)&p_s2);
            unint64_t v8 = sub_1CC9D28DC((uint64_t)a1, (uint64_t)a2, 0, (uint64_t)v1334);
            if (v8) {
              return v8;
            }
LABEL_274:
            int v203 = *((_WORD *)a2 + 9) & 0x3F;
            LOBYTE(v1866) = 0;
            if (sub_1CC9EAA5C(v203, (llvm::APInt *)v117, &v1866))
            {
              v1849 = 0;
              uint64_t v204 = (uint64_t)*(v9 - 8);
              unint64_t p_s2 = (unint64_t)&v1849;
              int v205 = *(unsigned __int8 *)(v204 + 16);
              if (v205 == 5)
              {
                if (*(_WORD *)(v204 + 18) != 13) {
                  goto LABEL_560;
                }
                uint64_t v206 = v204 - 32 * (*(_DWORD *)(v204 + 20) & 0x7FFFFFF);
                if (!*(void *)v206) {
                  goto LABEL_560;
                }
                v1849 = *(void **)v206;
                if ((sub_1CBF68974((uint64_t)&v1854, *(llvm::Constant **)(v206 + 32)) & 1) == 0) {
                  goto LABEL_560;
                }
              }
              else
              {
                if (v205 != 41) {
                  goto LABEL_560;
                }
                if (!*(void *)(v204 - 64)) {
                  goto LABEL_560;
                }
                v1849 = *(void **)(v204 - 64);
                if (!sub_1CBF687D0((uint64_t)&v1854, *(llvm::Constant **)(v204 - 32))) {
                  goto LABEL_560;
                }
              }
              uint64_t v207 = (uint64_t)*(v9 - 4);
              uint64_t v208 = v1849;
              uint64_t v1861 = (uint64_t)v1849;
              int v209 = *(unsigned __int8 *)(v207 + 16);
              if (v209 == 5)
              {
                if (*(_WORD *)(v207 + 18) == 30)
                {
                  uint64_t v284 = *(_DWORD *)(v207 + 20) & 0x7FFFFFF;
                  uint64_t v285 = v207 - 32 * v284;
                  if (v1849 == *(void **)v285)
                  {
                    if (sub_1CBF68974((uint64_t)&p_s1, *(llvm::Constant **)(v285 + 32))) {
                      goto LABEL_554;
                    }
                    uint64_t v208 = (void *)v1861;
                    uint64_t v286 = -(uint64_t)(*(_DWORD *)(v207 + 20) & 0x7FFFFFF);
                  }
                  else
                  {
                    uint64_t v286 = -v284;
                  }
                  uint64_t v375 = v207 + 32 * v286;
                  if (v208 != *(void **)(v375 + 32)
                    || !sub_1CBF68974((uint64_t)&p_s1, *(llvm::Constant **)v375))
                  {
                    goto LABEL_560;
                  }
                  goto LABEL_554;
                }
              }
              else if (v209 == 58)
              {
                if (v1849 == *(void **)(v207 - 64))
                {
                  if (sub_1CBF687D0((uint64_t)&p_s1, *(llvm::Constant **)(v207 - 32))) {
                    goto LABEL_554;
                  }
                  uint64_t v208 = (void *)v1861;
                }
                if (v208 != *(void **)(v207 - 32)
                  || (sub_1CBF687D0((uint64_t)&p_s1, *(llvm::Constant **)(v207 - 64)) & 1) == 0)
                {
                  goto LABEL_560;
                }
LABEL_554:
                int v376 = v1866;
                uint64_t v377 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v377 + 16);
                v377[21] = v377[21] & 0x38000000 | 2;
                *(void *)uint64_t v377 = 0;
                *((void *)v377 + 1) = 0;
                *((void *)v377 + 2) = 0;
                *((void *)v377 + 3) = v377 + 16;
                *((void *)v377 + 4) = 0;
                *((void *)v377 + 5) = 0;
                *((void *)v377 + 6) = 0;
                *((void *)v377 + 7) = v377 + 16;
                if (v376) {
                  __int16 v380 = 32;
                }
                else {
                  __int16 v380 = 33;
                }
                uint64_t v381 = v1849;
                v382 = llvm::Constant::getNullValue(*(llvm::Constant **)v1849, v378, v379);
                WORD4(v1856) = 257;
                uint64_t v383 = (void **)*v381;
                uint64_t v134 = **(void **)*v381 + 1888;
                if (*v381 && (v383[1] & 0xFE) == 0x12)
                {
                  v765 = (uint64_t **)(**(void **)*v381 + 1888);
                  v766 = (llvm::Type *)*((unsigned int *)v383 + 8);
                  if (*((_DWORD *)v383 + 2) == 19) {
                    llvm::ScalableVectorType::get(v765, v766);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v765, v766);
                  }
                  uint64_t v134 = v767;
                }
                uint64_t v135 = (llvm::Value *)v8;
                __int16 v136 = v380;
                uint64_t v137 = (uint64_t)v381;
                goto LABEL_1430;
              }
            }
LABEL_560:
            v384 = *(v9 - 8);
            uint64_t v385 = (uint64_t)*(v9 - 4);
            if (v385)
            {
              if (*(unsigned char *)(v385 + 16) == 16 && v384[16] == 60)
              {
                if (v384)
                {
                  uint64_t v6 = (llvm::ConstantInt *)*((void *)v384 - 4);
                  if (v6)
                  {
                    if (*((unsigned char *)v6 + 16) == 62)
                    {
                      uint64_t v386 = (llvm::GlobalValue *)*((void *)v6 - 4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
                      if (v386 && *((unsigned char *)v386 + 16) == 3)
                      {
                        unint64_t v8 = (unint64_t)sub_1CCA490AC((uint64_t)a1, (uint64_t)*(v9 - 8), (uint64_t *)v6, v386, a2, (llvm::Constant *)*(v9 - 4));
                        if (v8) {
                          return v8;
                        }
                      }
                    }
                  }
                }
              }
            }
            if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20
              && *(a2 - 4) == (uint64_t **)v385
              && sub_1CCA4D700((llvm::APInt *)v117))
            {
              BOOL v388 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v388 + 16);
              v388[21] = v388[21] & 0x38000000 | 2;
              *(void *)BOOL v388 = 0;
              *((void *)v388 + 1) = 0;
              *((void *)v388 + 2) = 0;
              *((void *)v388 + 3) = v388 + 16;
              *((void *)v388 + 4) = 0;
              *((void *)v388 + 5) = 0;
              *((void *)v388 + 6) = 0;
              *((void *)v388 + 7) = v388 + 16;
              if (v203 == 32) {
                __int16 v389 = 34;
              }
              else {
                __int16 v389 = 37;
              }
              uint64_t v390 = (llvm::ConstantInt **)*(a2 - 4);
              uint64_t v391 = (llvm::Constant *)llvm::ConstantInt::get(*v390, 1uLL, 0);
              BOOL v392 = (int32x2_t ****)llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v390, v391, 0, 0);
              WORD4(v1856) = 257;
              uint64_t v393 = *(void ***)v384;
              uint64_t v134 = ***(void ***)v384 + 1888;
              if (*(void *)v384 && (v393[1] & 0xFE) == 0x12)
              {
                v649 = (uint64_t **)(***(void ***)v384 + 1888);
                v650 = (llvm::Type *)*((unsigned int *)v393 + 8);
                if (*((_DWORD *)v393 + 2) == 19) {
                  llvm::ScalableVectorType::get(v649, v650);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v649, v650);
                }
                uint64_t v134 = v651;
              }
              uint64_t v135 = (llvm::Value *)v8;
              __int16 v136 = v389;
              uint64_t v137 = (uint64_t)v384;
              goto LABEL_581;
            }
            goto LABEL_1415;
          }
          uint64_t v1322 = *(void *)**v9;
          uint64_t v1323 = *(void *)(v1322 + 152);
          uint64_t v1324 = *(unsigned int *)(v1322 + 168);
          if (v1324)
          {
            LODWORD(v1325) = (v1324 - 1) & ((v9 >> 4) ^ (v9 >> 9));
            v1326 = (llvm::ConstantInt ****)(v1323 + 16 * v1325);
            v1327 = *v1326;
            if (*v1326 == v9)
            {
LABEL_2108:
              v1330 = v1326[1];
              v1333 = *v1330;
              v1331 = (uint64_t *)(v1330 + 2);
              v1332 = v1333;
              goto LABEL_2109;
            }
            int v1328 = 1;
            while (v1327 != (llvm::ConstantInt ***)-4096)
            {
              int v1329 = v1325 + v1328++;
              uint64_t v1325 = v1329 & (v1324 - 1);
              v1327 = *(llvm::ConstantInt ****)(v1323 + 16 * v1325);
              if (v1327 == v9)
              {
                v1326 = (llvm::ConstantInt ****)(v1323 + 16 * v1325);
                goto LABEL_2108;
              }
            }
          }
          v1326 = (llvm::ConstantInt ****)(v1323 + 16 * v1324);
          goto LABEL_2108;
        }
        if (v773 < 3) {
          goto LABEL_274;
        }
        uint64_t v774 = a1[3];
        if ((*((unsigned char *)v757 + 23) & 0x10) == 0)
        {
          v1305 = 0;
          v1304 = (uint64_t *)&byte_1CFBCE98E;
LABEL_2089:
          WORD4(v1856) = 261;
          unint64_t p_s2 = (unint64_t)v1304;
          v1854 = v1305;
          v1307 = sub_1CC242524(v774, (uint64_t)v754, (uint64_t)v761, (uint64_t)&p_s2, 1, 0);
          if ((*((unsigned char *)v755 + 23) & 0x10) == 0)
          {
            v1318 = 0;
            v1317 = (uint64_t *)&byte_1CFBCE98E;
            goto LABEL_2098;
          }
          uint64_t v1308 = ***v755;
          uint64_t v1309 = *(void *)(v1308 + 152);
          uint64_t v1310 = *(unsigned int *)(v1308 + 168);
          if (v1310)
          {
            LODWORD(v1311) = (v1310 - 1) & ((v755 >> 4) ^ (v755 >> 9));
            v1312 = (uint64_t ****)(v1309 + 16 * v1311);
            v1313 = *v1312;
            if (*v1312 == v755)
            {
LABEL_2097:
              v1316 = v1312[1];
              v1319 = *v1316;
              v1317 = (uint64_t *)(v1316 + 2);
              v1318 = v1319;
LABEL_2098:
              __int16 v1865 = 261;
              uint64_t v1861 = (uint64_t)v1317;
              p_s1 = v1318;
              v827 = sub_1CB844AF4(v774, v1307, (uint64_t)v754, (uint64_t)&v1861);
              goto LABEL_2099;
            }
            int v1314 = 1;
            while (v1313 != (uint64_t ***)-4096)
            {
              int v1315 = v1311 + v1314++;
              uint64_t v1311 = v1315 & (v1310 - 1);
              v1313 = *(uint64_t ****)(v1309 + 16 * v1311);
              if (v1313 == v755)
              {
                v1312 = (uint64_t ****)(v1309 + 16 * v1311);
                goto LABEL_2097;
              }
            }
          }
          v1312 = (uint64_t ****)(v1309 + 16 * v1310);
          goto LABEL_2097;
        }
        uint64_t v775 = ***v757;
        uint64_t v776 = *(void *)(v775 + 152);
        uint64_t v777 = *(unsigned int *)(v775 + 168);
        if (v777)
        {
          LODWORD(v778) = (v777 - 1) & ((v757 >> 4) ^ (v757 >> 9));
          v779 = (uint64_t ****)(v776 + 16 * v778);
          v780 = *v779;
          if (*v779 == v757)
          {
LABEL_2088:
            v1303 = v779[1];
            v1306 = (llvm::APInt **)*v1303;
            v1304 = (uint64_t *)(v1303 + 2);
            v1305 = v1306;
            goto LABEL_2089;
          }
          int v781 = 1;
          while (v780 != (uint64_t ***)-4096)
          {
            int v782 = v778 + v781++;
            uint64_t v778 = v782 & (v777 - 1);
            v780 = *(uint64_t ****)(v776 + 16 * v778);
            if (v780 == v757)
            {
              v779 = (uint64_t ****)(v776 + 16 * v778);
              goto LABEL_2088;
            }
          }
        }
        v779 = (uint64_t ****)(v776 + 16 * v777);
        goto LABEL_2088;
      }
      v1817 = v1845;
      __s1 = 0;
      uint64_t v528 = *(unsigned __int8 **)(v523 - 32);
      unint64_t p_s2 = (unint64_t)&__s1;
      v1854 = 0;
      if (!sub_1CBF528D8((uint64_t)&p_s2, v528)) {
        goto LABEL_952;
      }
      LODWORD(p_s1) = 1;
      uint64_t v1861 = 0;
      v1850[0] = 1;
      v1849 = 0;
      unsigned int v1811 = v525;
      if (v525 == 25)
      {
        if ((*((_WORD *)a2 + 9) & 0x3Eu) - 38 >= 4)
        {
          unsigned int v532 = v117[2];
          goto LABEL_825;
        }
        unsigned int v529 = *((_DWORD *)v1817 + 2);
        char v530 = v529 - 1;
        if (v529 >= 0x41) {
          uint64_t v531 = (llvm::Constant *)(*(void *)v1817 + 8 * ((v529 - 1) >> 6));
        }
        else {
          uint64_t v531 = v1817;
        }
        if (((*(void *)v531 >> v530) & 1) == 0)
        {
          unsigned int v532 = v117[2];
          v533 = (unsigned int *)(*(void *)v117 + 8 * ((v532 - 1) >> 6));
          if (v532 < 0x41) {
            v533 = v117;
          }
          if (((*(void *)v533 >> (v532 - 1)) & 1) == 0)
          {
LABEL_825:
            LODWORD(v1854) = v532;
            if (v532 > 0x40) {
              operator new[]();
            }
            unint64_t p_s2 = *(void *)v117;
            llvm::APInt::lshrInPlace((llvm::APInt *)&p_s2, (const llvm::APInt *)__s1);
            unint64_t v8 = p_s2;
            v1849 = (void *)p_s2;
            unint64_t v538 = v1854;
            v1850[0] = v1854;
            LODWORD(v1854) = *((_DWORD *)v1817 + 2);
            if (v1854 > 0x40) {
              operator new[]();
            }
            unint64_t p_s2 = *(void *)v1817;
            llvm::APInt::lshrInPlace((llvm::APInt *)&p_s2, (const llvm::APInt *)__s1);
            if (p_s1 >= 0x41 && v1861) {
              MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
            }
            uint64_t v1861 = p_s2;
            LODWORD(p_s1) = v1854;
            LODWORD(v1854) = v538;
            if (v538 >= 0x41) {
              operator new[]();
            }
            unint64_t p_s2 = v8;
            uint64_t v540 = *((unsigned int *)__s1 + 2);
            if (v540 >= 0x41)
            {
              int v831 = 0;
              int64_t v832 = (unint64_t)(v540 + 63) >> 6;
              v833 = *(llvm::Constant **)__s1;
              do
              {
                BOOL v109 = v832-- < 1;
                if (v109) {
                  break;
                }
                unint64_t v834 = *((void *)v833 + v832);
                v831 += __clz(v834);
              }
              while (!v834);
              int v835 = v540 | 0xFFFFFFC0;
              if ((v540 & 0x3F) == 0) {
                int v835 = 0;
              }
              int v542 = v538;
              if ((v540 - v831 - v835) > 0x40)
              {
LABEL_842:
                unint64_t v543 = v8 << v542;
                if (v538 == v542) {
                  unint64_t v543 = 0;
                }
                if (v538) {
                  unint64_t v544 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v538;
                }
                else {
                  unint64_t v544 = 0;
                }
                if ((v544 & v543) == *(void *)v117) {
                  goto LABEL_847;
                }
                goto LABEL_915;
              }
              __int16 v541 = *(llvm::Constant **)v833;
            }
            else
            {
              __int16 v541 = *(llvm::Constant **)__s1;
            }
            int v542 = v538;
            if ((unint64_t)v541 <= v538) {
              int v542 = (int)v541;
            }
            goto LABEL_842;
          }
        }
LABEL_924:
        int v592 = 0;
        unint64_t v8 = 0;
LABEL_945:
        unsigned int v525 = v1811;
        if (v1850[0] >= 0x41 && v1849) {
          MEMORY[0x1D25D9CB0](v1849, 0x1000C8000313F17);
        }
        if (p_s1 >= 0x41 && v1861) {
          MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
        }
        if (!v592)
        {
LABEL_1213:
          if (v8) {
            return v8;
          }
          goto LABEL_1214;
        }
LABEL_952:
        uint64_t v607 = *(void *)(v523 + 8);
        if (!v607 || *(void *)(v607 + 8)) {
          goto LABEL_1214;
        }
        uint64_t v608 = v117[2];
        if (v608 > 0x40)
        {
          int v609 = 0;
          int64_t v610 = (unint64_t)(v608 + 63) >> 6;
          do
          {
            BOOL v109 = v610-- < 1;
            if (v109) {
              break;
            }
            unint64_t v611 = *(void *)(*(void *)v117 + 8 * v610);
            v609 += __clz(v611);
          }
          while (!v611);
          int v612 = v608 | 0xFFFFFFC0;
          if ((v608 & 0x3F) == 0) {
            int v612 = 0;
          }
          if (v609 + v612 != v608) {
            goto LABEL_1214;
          }
        }
        else if (*(void *)v117)
        {
          goto LABEL_1214;
        }
        if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20
          || *(unsigned char *)(v523 + 16) == 55
          || *(unsigned __int8 *)(*(void *)(v523 - 64) + 16) < 0x15u)
        {
          goto LABEL_1214;
        }
        uint64_t v613 = a1[3];
        uint64_t v614 = (uint64_t)*(v9 - 4);
        uint64_t v615 = *(void *)(v523 - 32);
        WORD4(v1856) = 257;
        if (v525 == 25) {
          v616 = sub_1CC2429AC(v613, v614, v615, (uint64_t)&p_s2, 0);
        }
        else {
          v616 = sub_1CC242524(v613, v614, v615, (uint64_t)&p_s2, 0, 0);
        }
        uint64_t v744 = (uint64_t)v616;
        uint64_t v745 = a1[3];
        v746 = *(void **)(v523 - 64);
        WORD4(v1856) = 257;
        v747 = sub_1CBF52474(v745, v746, v744, (uint64_t)&p_s2);
        unint64_t v8 = sub_1CC9D28DC((uint64_t)a1, (uint64_t)a2, 0, (uint64_t)v747);
        goto LABEL_1213;
      }
      if (v525 == 26)
      {
        unint64_t v534 = v117[2];
        LODWORD(v1854) = v534;
        if (v534 > 0x40) {
          operator new[]();
        }
        unint64_t v535 = *(void *)v117;
        unint64_t p_s2 = *(void *)v117;
        uint64_t v557 = *((unsigned int *)__s1 + 2);
        if (v557 >= 0x41)
        {
          int v836 = 0;
          int64_t v837 = (unint64_t)(v557 + 63) >> 6;
          v838 = *(llvm::Constant **)__s1;
          do
          {
            BOOL v109 = v837-- < 1;
            if (v109) {
              break;
            }
            unint64_t v839 = *((void *)v838 + v837);
            v836 += __clz(v839);
          }
          while (!v839);
          int v840 = v557 | 0xFFFFFFC0;
          if ((v557 & 0x3F) == 0) {
            int v840 = 0;
          }
          int v559 = v534;
          if ((v557 - v836 - v840) > 0x40)
          {
LABEL_859:
            unint64_t v560 = v535 << v559;
            if (v534 == v559) {
              unint64_t v560 = 0;
            }
            unint64_t v561 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v534;
            if (!v534) {
              unint64_t v561 = 0;
            }
            __srce = (uint64_t *)(v561 & v560);
            v1849 = (void *)(v561 & v560);
            v1850[0] = v534;
            unint64_t v8 = *((unsigned int *)v1817 + 2);
            LODWORD(v1854) = v8;
            if (v8 > 0x40) {
              operator new[]();
            }
            unint64_t v562 = *(void *)v1817;
            unint64_t p_s2 = *(void *)v1817;
            uint64_t v570 = *((unsigned int *)__s1 + 2);
            if (v570 >= 0x41)
            {
              int v846 = 0;
              int64_t v847 = (unint64_t)(v570 + 63) >> 6;
              v848 = *(llvm::Constant **)__s1;
              do
              {
                BOOL v109 = v847-- < 1;
                if (v109) {
                  break;
                }
                unint64_t v849 = *((void *)v848 + v847);
                v846 += __clz(v849);
              }
              while (!v849);
              int v850 = v570 | 0xFFFFFFC0;
              if ((v570 & 0x3F) == 0) {
                int v850 = 0;
              }
              int v572 = v8;
              if ((v570 - v846 - v850) > 0x40)
              {
LABEL_881:
                unint64_t v573 = v562 << v572;
                if (v8 == v572) {
                  unint64_t v573 = 0;
                }
                if (v8) {
                  unint64_t v574 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
                }
                else {
                  unint64_t v574 = 0;
                }
                uint64_t v1861 = v574 & v573;
                LODWORD(p_s1) = v1854;
                LODWORD(v1854) = v534;
                unint64_t p_s2 = (unint64_t)__srce;
                llvm::APInt::lshrInPlace((llvm::APInt *)&p_s2, (const llvm::APInt *)__s1);
                if (v1854 > 0x40)
                {
                  v582 = (uint64_t *)p_s2;
                  BOOL v580 = memcmp((const void *)p_s2, *(const void **)v117, (((unint64_t)v1854 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  if (v582) {
                    MEMORY[0x1D25D9CB0](v582, 0x1000C8000313F17);
                  }
                }
                else
                {
                  BOOL v580 = p_s2 == *(void *)v117;
                }
                if ((*((_WORD *)a2 + 9) & 0x3Eu) - 38 <= 3)
                {
                  v583 = &v1861;
                  if (p_s1 >= 0x41) {
                    v583 = (uint64_t *)(v1861 + 8 * ((p_s1 - 1) >> 6));
                  }
                  if ((((unint64_t)*v583 >> (p_s1 - 1)) & 1) != 0
                    || (((unint64_t)v1849 >> (v534 - 1)) & 1) != 0)
                  {
                    goto LABEL_924;
                  }
                }
                goto LABEL_914;
              }
              v571 = *(llvm::Constant **)v848;
            }
            else
            {
              v571 = *(llvm::Constant **)__s1;
            }
            int v572 = v8;
            if ((unint64_t)v571 <= v8) {
              int v572 = (int)v571;
            }
            goto LABEL_881;
          }
          v558 = *(llvm::Constant **)v838;
        }
        else
        {
          v558 = *(llvm::Constant **)__s1;
        }
        int v559 = v534;
        if ((unint64_t)v558 <= v534) {
          int v559 = (int)v558;
        }
        goto LABEL_859;
      }
      unint64_t v536 = v117[2];
      LODWORD(v1854) = v536;
      if (v536 > 0x40) {
        operator new[]();
      }
      unint64_t v537 = *(void *)v117;
      unint64_t p_s2 = *(void *)v117;
      uint64_t v563 = *((unsigned int *)__s1 + 2);
      if (v563 >= 0x41)
      {
        int v841 = 0;
        int64_t v842 = (unint64_t)(v563 + 63) >> 6;
        v843 = *(llvm::Constant **)__s1;
        do
        {
          BOOL v109 = v842-- < 1;
          if (v109) {
            break;
          }
          unint64_t v844 = *((void *)v843 + v842);
          v841 += __clz(v844);
        }
        while (!v844);
        int v845 = v563 | 0xFFFFFFC0;
        if ((v563 & 0x3F) == 0) {
          int v845 = 0;
        }
        int v565 = v536;
        if ((v563 - v841 - v845) > 0x40)
        {
LABEL_870:
          unint64_t v566 = v537 << v565;
          if (v536 == v565) {
            unint64_t v566 = 0;
          }
          unint64_t v567 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v536;
          if (!v536) {
            unint64_t v567 = 0;
          }
          __srcf = (uint64_t *)(v567 & v566);
          v1849 = (void *)(v567 & v566);
          v1850[0] = v536;
          unint64_t v568 = *((unsigned int *)v1817 + 2);
          LODWORD(v1854) = v568;
          if (v568 > 0x40) {
            operator new[]();
          }
          unint64_t v569 = *(void *)v1817;
          unint64_t p_s2 = *(void *)v1817;
          uint64_t v575 = *((unsigned int *)__s1 + 2);
          if (v575 >= 0x41)
          {
            int v851 = 0;
            int64_t v852 = (unint64_t)(v575 + 63) >> 6;
            v853 = *(llvm::Constant **)__s1;
            do
            {
              BOOL v109 = v852-- < 1;
              if (v109) {
                break;
              }
              unint64_t v854 = *((void *)v853 + v852);
              v851 += __clz(v854);
            }
            while (!v854);
            int v855 = v575 | 0xFFFFFFC0;
            if ((v575 & 0x3F) == 0) {
              int v855 = 0;
            }
            int v577 = v568;
            if ((v575 - v851 - v855) > 0x40)
            {
LABEL_891:
              unint64_t v578 = v569 << v577;
              if (v568 == v577) {
                unint64_t v578 = 0;
              }
              if (v568) {
                unint64_t v579 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v568;
              }
              else {
                unint64_t v579 = 0;
              }
              uint64_t v1861 = v579 & v578;
              LODWORD(p_s1) = v1854;
              LODWORD(v1854) = v536;
              unint64_t p_s2 = (unint64_t)__srcf;
              llvm::APInt::ashrInPlace((unsigned int *)&p_s2, (const llvm::APInt *)__s1);
              if (v1854 > 0x40)
              {
                v581 = (uint64_t *)p_s2;
                BOOL v580 = memcmp((const void *)p_s2, *(const void **)v117, (((unint64_t)v1854 + 63) >> 3) & 0x3FFFFFF8) == 0;
                if (v581) {
                  MEMORY[0x1D25D9CB0](v581, 0x1000C8000313F17);
                }
              }
              else
              {
                BOOL v580 = p_s2 == *(void *)v117;
              }
              unint64_t v8 = (unint64_t)__s1;
              LODWORD(v1854) = p_s1;
              if (p_s1 > 0x40) {
                operator new[]();
              }
              unint64_t p_s2 = v1861;
              llvm::APInt::ashrInPlace((unsigned int *)&p_s2, (const llvm::APInt *)__s1);
              if (v1854 > 0x40)
              {
                unint64_t v8 = p_s2;
                int v591 = memcmp((const void *)p_s2, *(const void **)v1817, (((unint64_t)v1854 + 63) >> 3) & 0x3FFFFFF8);
                if (v8) {
                  MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
                }
                if (v591) {
                  goto LABEL_924;
                }
              }
              else if (p_s2 != *(void *)v1817)
              {
                goto LABEL_924;
              }
LABEL_914:
              if (v580)
              {
LABEL_847:
                uint64_t v545 = a1[3];
                int64x2_t v546 = *(void **)(v523 - 64);
                int64x2_t v547 = (llvm::Constant *)*v9;
                v548 = llvm::ConstantInt::get(**v9, (llvm::LLVMContext *)&v1861, v539);
                if ((*((_DWORD *)v547 + 2) & 0xFE) == 0x12) {
                  v548 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v547 + 8) | ((unint64_t)(*((_DWORD *)v547 + 2) == 19) << 32)), (uint64_t)v548);
                }
                WORD4(v1856) = 257;
                uint64_t v549 = sub_1CBF52474(v545, v546, (uint64_t)v548, (uint64_t)&p_s2);
                v550 = operator new(0x80uLL);
                unint64_t v8 = (unint64_t)(v550 + 16);
                v550[21] = v550[21] & 0x38000000 | 2;
                *(void *)v550 = 0;
                *((void *)v550 + 1) = 0;
                *((void *)v550 + 2) = 0;
                *((void *)v550 + 3) = v550 + 16;
                *((void *)v550 + 4) = 0;
                *((void *)v550 + 5) = 0;
                *((void *)v550 + 6) = 0;
                *((void *)v550 + 7) = v550 + 16;
                __int16 v551 = *((_WORD *)a2 + 9) & 0x3F;
                long long v552 = (llvm::Constant *)*v9;
                v554 = llvm::ConstantInt::get(**v9, (llvm::LLVMContext *)&v1849, v553);
                if ((*((_DWORD *)v552 + 2) & 0xFE) == 0x12) {
                  v554 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v552 + 8) | ((unint64_t)(*((_DWORD *)v552 + 2) == 19) << 32)), (uint64_t)v554);
                }
                WORD4(v1856) = 257;
                v555 = *(void ***)v549;
                uint64_t v556 = ***(void ***)v549 + 1888;
                if (*(void *)v549 && (v555[1] & 0xFE) == 0x12)
                {
                  v821 = (uint64_t **)(***(void ***)v549 + 1888);
                  v822 = (llvm::Type *)*((unsigned int *)v555 + 8);
                  if (*((_DWORD *)v555 + 2) == 19) {
                    llvm::ScalableVectorType::get(v821, v822);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v821, v822);
                  }
                  uint64_t v556 = v823;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v8, v556, 53, v551, (uint64_t)v549, (uint64_t)v554, (const char **)&p_s2, 0, 0);
LABEL_944:
                int v592 = 0;
                goto LABEL_945;
              }
LABEL_915:
              int v584 = *((_WORD *)a2 + 9) & 0x3F;
              if (v584 == 33)
              {
                v585 = *a2;
                v605 = **a2;
                uint64_t v606 = *v605;
                v588 = *(llvm::Value **)(*v605 + 1560);
                if (!v588)
                {
                  v828 = *(llvm::ConstantInt **)(v606 + 1888);
                  unsigned int v829 = *(_DWORD *)(v606 + 1896);
                  LODWORD(v1854) = v829 >> 8;
                  if (v829 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v829 <= 0xFF) {
                    LOBYTE(v830) = 0;
                  }
                  else {
                    unint64_t v830 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v829) + 63);
                  }
                  unint64_t p_s2 = v830 & 1;
                  v588 = (llvm::Value *)llvm::ConstantInt::get(v828, (llvm::LLVMContext *)&p_s2, v539);
                  if (v1854 >= 0x41 && p_s2) {
                    MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                  }
                  *(void *)(v606 + 1560) = v588;
                }
              }
              else
              {
                if (v584 != 32)
                {
                  int v592 = 1;
                  goto LABEL_945;
                }
                v585 = *a2;
                v586 = **a2;
                uint64_t v587 = *v586;
                v588 = *(llvm::Value **)(*v586 + 1568);
                if (!v588)
                {
                  v589 = *(llvm::ConstantInt **)(v587 + 1888);
                  unsigned int v590 = *(_DWORD *)(v587 + 1896);
                  LODWORD(v1854) = v590 >> 8;
                  if (v590 >> 8 >= 0x41) {
                    operator new[]();
                  }
                  unint64_t p_s2 = 0;
                  v588 = (llvm::Value *)llvm::ConstantInt::get(v589, (llvm::LLVMContext *)&p_s2, v539);
                  if (v1854 >= 0x41 && p_s2) {
                    MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
                  }
                  *(void *)(v587 + 1568) = v588;
                }
              }
              if ((v585[1] & 0xFE) == 0x12) {
                v588 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v585 + 8) | ((unint64_t)(*((_DWORD *)v585 + 2) == 19) << 32)), (uint64_t)v588);
              }
              unint64_t v8 = (unint64_t)sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)a2, v588);
              goto LABEL_944;
            }
            v576 = *(llvm::Constant **)v853;
          }
          else
          {
            v576 = *(llvm::Constant **)__s1;
          }
          int v577 = v568;
          if ((unint64_t)v576 <= v568) {
            int v577 = (int)v576;
          }
          goto LABEL_891;
        }
        v564 = *(llvm::Constant **)v843;
      }
      else
      {
        v564 = *(llvm::Constant **)__s1;
      }
      int v565 = v536;
      if ((unint64_t)v564 <= v536) {
        int v565 = (int)v564;
      }
      goto LABEL_870;
    case '9':
      uint64_t v33 = v1818;
      int v34 = *((_WORD *)a2 + 9) & 0x3F;
      uint64_t v35 = *((unsigned int *)v1818 + 2);
      if (v35 > 0x40)
      {
        int v1370 = 0;
        int64_t v1371 = (unint64_t)(v35 + 63) >> 6;
        do
        {
          BOOL v109 = v1371-- < 1;
          if (v109) {
            break;
          }
          unint64_t v1372 = *(void *)(*(void *)v1818 + 8 * v1371);
          v1370 += __clz(v1372);
        }
        while (!v1372);
        int v1373 = v35 | 0xFFFFFFC0;
        if ((v35 & 0x3F) == 0) {
          int v1373 = 0;
        }
        if (v1370 + v1373 != v35 - 1) {
          goto LABEL_46;
        }
      }
      else if (*(void *)v1818 != 1)
      {
        goto LABEL_46;
      }
      if (v34 == 40)
      {
        v1378 = (llvm::Constant *)*v9;
        if (((*v9)[1] & 0xFE) == 0x12) {
          v1378 = (llvm::Constant *)**((void **)v1378 + 2);
        }
        int v1379 = llvm::Type::getPrimitiveSizeInBits(v1378);
        if (v1379)
        {
          __s1 = 0;
          v1845 = 0;
          LODWORD(v1851) = 64;
          v1849 = &__s1;
          *(void *)v1850 = (v1379 - 1);
          unsigned int v1864 = 64;
          p_s1 = &v1845;
          unint64_t v1863 = *(void *)v1850;
          sub_1CD68C2B0((uint64_t)&p_s2, &v1849, (uint64_t)&v1861);
          int v1380 = *((unsigned __int8 *)v9 + 16);
          if (v1380 == 5)
          {
            if (*((_WORD *)v9 + 9) != 29) {
              goto LABEL_2610;
            }
            v1545 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
            int v1546 = *((unsigned __int8 *)v1545 + 16);
            if (v1546 == 5)
            {
              if (*((_WORD *)v1545 + 9) != 27) {
                goto LABEL_2610;
              }
              uint64_t v1596 = (uint64_t)v1545[-4 * (*((_DWORD *)v1545 + 5) & 0x7FFFFFF)];
              if (!v1596) {
                goto LABEL_2610;
              }
              *(void *)unint64_t p_s2 = v1596;
              if (!sub_1CBF531E4((llvm::APInt *)&v1854, v1545[-4 * (*((_DWORD *)v1545 + 5) & 0x7FFFFFF) + 4])) {
                goto LABEL_2610;
              }
            }
            else
            {
              if (v1546 != 55) {
                goto LABEL_2610;
              }
              uint64_t v1547 = (uint64_t)*(v1545 - 8);
              if (!v1547) {
                goto LABEL_2610;
              }
              *(void *)unint64_t p_s2 = v1547;
              if (!sub_1CBF53154((llvm::APInt *)&v1854, (unsigned __int8 *)*(v1545 - 4))) {
                goto LABEL_2610;
              }
            }
            v1597 = &v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
            if (!sub_1CCA799D0((uint64_t)&v1856, (uint64_t)v1597[4], (char)v1597)) {
              goto LABEL_2610;
            }
          }
          else
          {
            if (v1380 != 57) {
              goto LABEL_2610;
            }
            uint64_t v1381 = (uint64_t)*(v9 - 8);
            int v1382 = *(unsigned __int8 *)(v1381 + 16);
            if (v1382 == 5)
            {
              if (*(_WORD *)(v1381 + 18) != 27) {
                goto LABEL_2610;
              }
              uint64_t v1560 = *(void *)(v1381 - 32 * (*(_DWORD *)(v1381 + 20) & 0x7FFFFFF));
              if (!v1560) {
                goto LABEL_2610;
              }
              *(void *)unint64_t p_s2 = v1560;
              if (!sub_1CBF531E4((llvm::APInt *)&v1854, *(llvm::Constant **)(v1381 - 32 * (*(_DWORD *)(v1381 + 20) & 0x7FFFFFF) + 32)))goto LABEL_2610; {
            }
              }
            else
            {
              if (v1382 != 55) {
                goto LABEL_2610;
              }
              uint64_t v1383 = *(void *)(v1381 - 64);
              if (!v1383) {
                goto LABEL_2610;
              }
              *(void *)unint64_t p_s2 = v1383;
              if (!sub_1CBF53154((llvm::APInt *)&v1854, *(unsigned __int8 **)(v1381 - 32))) {
                goto LABEL_2610;
              }
            }
            if (!sub_1CCA799D0((uint64_t)&v1856, (uint64_t)*(v9 - 4), (char)&p_s2))
            {
LABEL_2610:
              sub_1CD68C344((uint64_t)&p_s2);
              goto LABEL_46;
            }
          }
          BOOL v36 = (llvm::ConstantInt **)__s1;
          if (__s1 && __s1 == v1845)
          {
            sub_1CD68C344((uint64_t)&p_s2);
            v1751 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v1751 + 16);
            v1751[21] = v1751[21] & 0x38000000 | 2;
            *(void *)v1751 = 0;
            *((void *)v1751 + 1) = 0;
            *((void *)v1751 + 2) = 0;
            *((void *)v1751 + 3) = v1751 + 16;
            *((void *)v1751 + 4) = 0;
            *((void *)v1751 + 5) = 0;
            *((void *)v1751 + 6) = 0;
            *((void *)v1751 + 7) = v1751 + 16;
            uint64_t Sub = (uint64_t)llvm::ConstantInt::get(*v36, 1uLL, 0);
            WORD4(v1856) = 257;
            v1752 = *v36;
            uint64_t v1753 = **(void **)*v36 + 1888;
            if (*v36 && (*((_DWORD *)v1752 + 2) & 0xFE) == 0x12)
            {
              v1754 = (llvm::Type *)*((unsigned int *)v1752 + 8);
              v1755 = (uint64_t **)(**(void **)*v36 + 1888);
              if (*((_DWORD *)v1752 + 2) == 19) {
                llvm::ScalableVectorType::get(v1755, v1754);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1755, v1754);
              }
              uint64_t v1753 = v1756;
            }
            uint64_t v135 = (llvm::Value *)v8;
            uint64_t v134 = v1753;
            __int16 v136 = 40;
            goto LABEL_1489;
          }
          goto LABEL_2610;
        }
      }
LABEL_46:
      unint64_t v37 = (uint64_t *)(v9 - 8);
      BOOL v36 = *(v9 - 8);
      uint64_t v38 = (uint64_t)*(v9 - 4);
      v1849 = 0;
      unint64_t p_s2 = (unint64_t)&v1849;
      v1854 = 0;
      if (!sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v38) || (*((_WORD *)a2 + 9) & 0x3E) != 0x20) {
        goto LABEL_47;
      }
      uint64_t v210 = *((unsigned int *)v1849 + 2);
      if (v210 > 0x40)
      {
        int v211 = *(llvm::Constant **)v33;
        if (memcmp(*(const void **)v1849, *(const void **)v33, ((unint64_t)(v210 + 63) >> 3) & 0x3FFFFFF8)) {
          goto LABEL_296;
        }
      }
      else
      {
        int v211 = *(llvm::Constant **)v1849;
        if (*(void *)v1849 != *(void *)v33) {
          goto LABEL_296;
        }
      }
      LODWORD(v1867) = *((_DWORD *)v33 + 2);
      if (v1867 > 0x40) {
        operator new[]();
      }
      v1866 = (uint64_t *)v211;
      llvm::APInt::operator+=((uint64_t)&v1866, 1uLL);
      uint64_t v1422 = v1867;
      LODWORD(v1867) = 0;
      if (v1422 > 0x40)
      {
        unint64_t v1491 = 0;
        int v1492 = 0;
        unint64_t v1493 = ((unint64_t)(v1422 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          uint8x8_t v1494 = (uint8x8_t)vcnt_s8((int8x8_t)v1866[v1491 / 8]);
          v1494.i16[0] = vaddlv_u8(v1494);
          v1492 += v1494.i32[0];
          v1491 += 8;
        }
        while (v1493 != v1491);
        if (v1866)
        {
          MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
          if (v1867 >= 0x41)
          {
            if (v1866) {
              MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
            }
          }
        }
        if (v1492 != 1)
        {
LABEL_296:
          uint64_t v212 = v9[1];
          if (v212 && !v212[1])
          {
            uint64_t v213 = a1[3];
            unsigned int v214 = *((_DWORD *)v1849 + 2);
            unsigned int v1860 = v214;
            if (v214 > 0x40) {
              operator new[]();
            }
            unint64_t v215 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v214;
            if (!v214) {
              unint64_t v215 = 0;
            }
            int8x8_t v216 = (uint64_t *)(v215 & ~*(void *)v1849);
            LODWORD(p_s1) = v214;
            uint64_t v1861 = (uint64_t)v216;
            WORD4(v1856) = 257;
            uint8x8_t v217 = *v36;
            int v218 = llvm::ConstantInt::get(*(llvm::ConstantInt **)*v36, (llvm::LLVMContext *)&v1861, v39);
            if ((*((_DWORD *)v217 + 2) & 0xFE) == 0x12) {
              int v218 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v217 + 8) | ((unint64_t)(*((_DWORD *)v217 + 2) == 19) << 32)), (uint64_t)v218);
            }
            unint64_t v220 = sub_1CBF52474(v213, v36, (uint64_t)v218, (uint64_t)&p_s2);
            if (p_s1 >= 0x41 && v1861) {
              MEMORY[0x1D25D9CB0](v1861, 0x1000C8000313F17);
            }
            unint64_t v221 = (llvm::Constant *)*v9;
            if (*((_DWORD *)v33 + 2) > 0x40u) {
              operator new[]();
            }
            unsigned int v222 = (uint64_t *)(*(void *)v1849 ^ *(void *)v33);
            LODWORD(v1854) = *((_DWORD *)v33 + 2);
            unint64_t p_s2 = (unint64_t)v222;
            uint64_t Sub = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)v221, (llvm::LLVMContext *)&p_s2, v219);
            if ((*((_DWORD *)v221 + 2) & 0xFE) == 0x12) {
              uint64_t Sub = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v221 + 8) | ((unint64_t)(*((_DWORD *)v221 + 2) == 19) << 32)), Sub);
            }
            if (v1854 >= 0x41 && p_s2) {
              MEMORY[0x1D25D9CB0](p_s2, 0x1000C8000313F17);
            }
            uint64_t v223 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v223 + 16);
            v223[21] = v223[21] & 0x38000000 | 2;
            *(void *)uint64_t v223 = 0;
            *((void *)v223 + 1) = 0;
            *((void *)v223 + 2) = 0;
            *((void *)v223 + 3) = v223 + 16;
            *((void *)v223 + 4) = 0;
            *((void *)v223 + 5) = 0;
            *((void *)v223 + 6) = 0;
            *((void *)v223 + 7) = v223 + 16;
            goto LABEL_309;
          }
LABEL_47:
          uint64_t v1861 = 0;
          LOBYTE(v1843) = 0;
          if (!sub_1CC9EAA5C(v34, v33, &v1843)) {
            goto LABEL_48;
          }
          unint64_t p_s2 = (unint64_t)&v1861;
          uint64_t v1855 = (uint64_t)&v1861;
          int v182 = *((unsigned __int8 *)v9 + 16);
          if (v182 != 5)
          {
            if (v182 != 57) {
              goto LABEL_48;
            }
            uint64_t v183 = *v37;
            int v184 = *(unsigned __int8 *)(*v37 + 16);
            if (v184 == 5)
            {
              if (*(_WORD *)(v183 + 18) != 13) {
                goto LABEL_437;
              }
              uint64_t v295 = v183 - 32 * (*(_DWORD *)(v183 + 20) & 0x7FFFFFF);
              if (!*(void *)v295) {
                goto LABEL_437;
              }
              uint64_t v1861 = *(void *)v295;
              if (!sub_1CBF68974((uint64_t)&v1854, *(llvm::Constant **)(v295 + 32))) {
                goto LABEL_437;
              }
            }
            else if (v184 != 41 {
                   || !*(void *)(v183 - 64)
            }
                   || (uint64_t v1861 = *(void *)(v183 - 64),
                       (sub_1CBF687D0((uint64_t)&v1854, *(llvm::Constant **)(v183 - 32)) & 1) == 0))
            {
LABEL_437:
              uint64_t v296 = (uint64_t)*(v9 - 4);
              int v297 = *(unsigned __int8 *)(v296 + 16);
              if (v297 == 5)
              {
                if (*(_WORD *)(v296 + 18) != 13) {
                  goto LABEL_48;
                }
                uint64_t v300 = *(void *)(v296 - 32 * (*(_DWORD *)(v296 + 20) & 0x7FFFFFF));
                if (!v300) {
                  goto LABEL_48;
                }
                *(void *)unint64_t p_s2 = v300;
                char v299 = sub_1CBF68974((uint64_t)&v1854, *(llvm::Constant **)(v296 - 32 * (*(_DWORD *)(v296 + 20) & 0x7FFFFFF) + 32));
              }
              else
              {
                if (v297 != 41) {
                  goto LABEL_48;
                }
                uint64_t v298 = *(void *)(v296 - 64);
                if (!v298) {
                  goto LABEL_48;
                }
                *(void *)unint64_t p_s2 = v298;
                char v299 = sub_1CBF687D0((uint64_t)&v1854, *(llvm::Constant **)(v296 - 32));
              }
              __int16 v301 = v9 - 8;
              if ((v299 & 1) == 0) {
                goto LABEL_48;
              }
              goto LABEL_488;
            }
            if (*(llvm::ConstantInt ***)v1855 == *(v9 - 4)) {
              goto LABEL_489;
            }
            goto LABEL_437;
          }
          if (*((_WORD *)v9 + 9) != 29) {
            goto LABEL_48;
          }
          unint64_t v259 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
          int v260 = *((unsigned __int8 *)v259 + 16);
          if (v260 == 5)
          {
            if (*((_WORD *)v259 + 9) != 13) {
              goto LABEL_479;
            }
            uint64_t v324 = (uint64_t *)&v259[-4 * (*((_DWORD *)v259 + 5) & 0x7FFFFFF)];
            if (!*v324) {
              goto LABEL_479;
            }
            uint64_t v1861 = *v324;
            if (!sub_1CBF68974((uint64_t)&v1854, (llvm::Constant *)v324[4])) {
              goto LABEL_479;
            }
          }
          else if (v260 != 41 {
                 || !*(v259 - 8)
          }
                 || (uint64_t v1861 = (uint64_t)*(v259 - 8), (sub_1CBF687D0((uint64_t)&v1854, *(v259 - 4)) & 1) == 0))
          {
LABEL_479:
            unsigned int v325 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF) + 4];
            int v326 = *((unsigned __int8 *)v325 + 16);
            if (v326 == 5)
            {
              if (*((_WORD *)v325 + 9) != 13) {
                goto LABEL_48;
              }
              uint64_t v328 = (uint64_t)v325[-4 * (*((_DWORD *)v325 + 5) & 0x7FFFFFF)];
              if (!v328) {
                goto LABEL_48;
              }
              *(void *)unint64_t p_s2 = v328;
              if (!sub_1CBF68974((uint64_t)&v1854, v325[-4 * (*((_DWORD *)v325 + 5) & 0x7FFFFFF) + 4])) {
                goto LABEL_48;
              }
            }
            else
            {
              if (v326 != 41) {
                goto LABEL_48;
              }
              uint64_t v327 = (uint64_t)*(v325 - 8);
              if (!v327) {
                goto LABEL_48;
              }
              *(void *)unint64_t p_s2 = v327;
              if ((sub_1CBF687D0((uint64_t)&v1854, *(v325 - 4)) & 1) == 0) {
                goto LABEL_48;
              }
            }
            __int16 v301 = &v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
LABEL_488:
            if (*(llvm::ConstantInt ***)v1855 == *v301)
            {
LABEL_489:
              int v329 = v1843;
              uint64_t Sub = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)v1861, v1843, 0);
              int v330 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v330 + 16);
              v330[21] = v330[21] & 0x38000000 | 2;
              *(void *)int v330 = 0;
              *((void *)v330 + 1) = 0;
              *((void *)v330 + 2) = 0;
              *((void *)v330 + 3) = v330 + 16;
              *((void *)v330 + 4) = 0;
              *((void *)v330 + 5) = 0;
              *((void *)v330 + 6) = 0;
              *((void *)v330 + 7) = v330 + 16;
              if (v329) {
                __int16 v331 = 40;
              }
              else {
                __int16 v331 = 38;
              }
              int v332 = (llvm::Type *)v1861;
LABEL_758:
              WORD4(v1856) = 257;
              uint64_t v493 = *(void *)v332;
              uint64_t v134 = ***(void ***)v332 + 1888;
              if (*(void *)v332 && (*(_DWORD *)(v493 + 8) & 0xFE) == 0x12)
              {
                v800 = (uint64_t **)(***(void ***)v332 + 1888);
                v801 = (llvm::Type *)*(unsigned int *)(v493 + 32);
                if (*(_DWORD *)(v493 + 8) == 19) {
                  llvm::ScalableVectorType::get(v800, v801);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v800, v801);
                }
                uint64_t v134 = v802;
              }
              uint64_t v135 = (llvm::Value *)v8;
              __int16 v136 = v331;
LABEL_761:
              uint64_t v137 = (uint64_t)v332;
              goto LABEL_175;
            }
LABEL_48:
            if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20) {
              goto LABEL_1415;
            }
            uint64_t v40 = *((unsigned int *)v33 + 2);
            if (v40 > 0x40)
            {
              int v1374 = 0;
              int64_t v1375 = (unint64_t)(v40 + 63) >> 6;
              do
              {
                BOOL v109 = v1375-- < 1;
                if (v109) {
                  break;
                }
                unint64_t v1376 = *(void *)(*(void *)v33 + 8 * v1375);
                v1374 += __clz(v1376);
              }
              while (!v1376);
              int v1377 = v40 | 0xFFFFFFC0;
              if ((v40 & 0x3F) == 0) {
                int v1377 = 0;
              }
              if (v1374 + v1377 != v40) {
                goto LABEL_1415;
              }
            }
            else if (*(void *)v33)
            {
              goto LABEL_1415;
            }
            unsigned int v41 = v9[1];
            if (!v41 || v41[1]) {
              goto LABEL_1415;
            }
            __s1 = 0;
            v1845 = 0;
            unint64_t p_s2 = (unint64_t)&__s1;
            v1854 = &v1845;
            int v42 = *((unsigned __int8 *)v9 + 16);
            if (v42 == 5)
            {
              if (*((_WORD *)v9 + 9) == 29
                && sub_1CC03F934((void **)&p_s2, (uint64_t)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)])
                && (sub_1CC03F934(&v1854, (uint64_t)v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF) + 4]) & 1) != 0)
              {
LABEL_179:
                uint64_t v139 = a1[3];
                int v140 = __s1;
                int64_t v141 = llvm::Constant::getNullValue(*(llvm::Constant **)__s1, (llvm::Type *)v5, v6);
                WORD4(v1856) = 257;
                unint64_t v142 = sub_1CB845F20(v139, v34, v140, (uint64_t)v141, (uint64_t)&p_s2);
                uint64_t v143 = a1[3];
                unint64_t v144 = v1845;
                unsigned int v147 = llvm::Constant::getNullValue(*(llvm::Constant **)v1845, v145, v146);
                WORD4(v1856) = 257;
                unsigned int v148 = sub_1CB845F20(v143, v34, v144, (uint64_t)v147, (uint64_t)&p_s2);
                if (v34 == 32) {
                  char v149 = 28;
                }
                else {
                  char v149 = 29;
                }
                WORD4(v1856) = 257;
                uint64_t v150 = v142;
LABEL_183:
                unint64_t v151 = llvm::BinaryOperator::Create(v149, v150, (uint64_t)v148, (const char **)&p_s2, 0);
LABEL_184:
                unint64_t v8 = (unint64_t)v151;
                goto LABEL_1414;
              }
            }
            else if (v42 == 57 {
                   && sub_1CC03F934((void **)&p_s2, *v37)
            }
                   && sub_1CC03F934(&v1854, (uint64_t)*(v9 - 4)))
            {
              goto LABEL_179;
            }
            uint64_t v152 = v36[1];
            if (!v152 || *((void *)v152 + 1)) {
              goto LABEL_1415;
            }
            int v153 = *((unsigned __int8 *)v36 + 16);
            if (v153 == 5)
            {
              if (*((_WORD *)v36 + 9) != 30) {
                goto LABEL_1415;
              }
              int v186 = &v36[-4 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF)];
              uint64_t v6 = *v186;
              if (!*v186) {
                goto LABEL_1415;
              }
              uint64_t v154 = (uint64_t)v186[4];
              if (!v154) {
                goto LABEL_1415;
              }
            }
            else
            {
              if (v153 != 58) {
                goto LABEL_1415;
              }
              uint64_t v6 = *(v36 - 8);
              if (!v6) {
                goto LABEL_1415;
              }
              uint64_t v154 = (uint64_t)*(v36 - 4);
              if (!v154) {
                goto LABEL_1415;
              }
            }
            uint64_t v187 = *(void *)(v38 + 8);
            if (!v187 || *(void *)(v187 + 8)) {
              goto LABEL_1415;
            }
            int v188 = *(unsigned __int8 *)(v38 + 16);
            if (v188 == 5)
            {
              if (*(_WORD *)(v38 + 18) != 30) {
                goto LABEL_1415;
              }
              uint64_t v339 = v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF);
              uint64_t v189 = *(void **)v339;
              if (!*(void *)v339) {
                goto LABEL_1415;
              }
              uint64_t v190 = *(void *)(v339 + 32);
              if (!v190) {
                goto LABEL_1415;
              }
            }
            else
            {
              if (v188 != 58) {
                goto LABEL_1415;
              }
              uint64_t v189 = *(void **)(v38 - 64);
              if (!v189) {
                goto LABEL_1415;
              }
              uint64_t v190 = *(void *)(v38 - 32);
              if (!v190) {
                goto LABEL_1415;
              }
            }
            uint64_t v340 = a1[3];
            WORD4(v1856) = 257;
            v341 = sub_1CB845F20(v340, v34, v6, v154, (uint64_t)&p_s2);
            uint64_t v342 = a1[3];
            WORD4(v1856) = 257;
            unsigned int v148 = sub_1CB845F20(v342, v34, v189, v190, (uint64_t)&p_s2);
            if (v34 == 32) {
              char v149 = 28;
            }
            else {
              char v149 = 29;
            }
            WORD4(v1856) = 257;
            uint64_t v150 = v341;
            goto LABEL_183;
          }
          if (*(llvm::ConstantInt ***)v1855 == v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF) + 4]) {
            goto LABEL_489;
          }
          goto LABEL_479;
        }
      }
      else
      {
        uint8x8_t v1423 = (uint8x8_t)vcnt_s8((int8x8_t)v1866);
        v1423.i16[0] = vaddlv_u8(v1423);
        if (v1423.u32[0] != 1) {
          goto LABEL_296;
        }
      }
      v1424 = operator new(0x80uLL);
      unint64_t v8 = (unint64_t)(v1424 + 16);
      v1424[21] = v1424[21] & 0x38000000 | 2;
      *(void *)v1424 = 0;
      *((void *)v1424 + 1) = 0;
      *((void *)v1424 + 2) = 0;
      *((void *)v1424 + 3) = v1424 + 16;
      *((void *)v1424 + 4) = 0;
      *((void *)v1424 + 5) = 0;
      *((void *)v1424 + 6) = 0;
      *((void *)v1424 + 7) = v1424 + 16;
      if (v34 == 32) {
        __int16 v1425 = 37;
      }
      else {
        __int16 v1425 = 34;
      }
      WORD4(v1856) = 257;
      v1426 = *v36;
      uint64_t v134 = **(void **)*v36 + 1888;
      if (*v36 && (*((_DWORD *)v1426 + 2) & 0xFE) == 0x12)
      {
        v1427 = (uint64_t **)(**(void **)*v36 + 1888);
        v1428 = (llvm::Type *)*((unsigned int *)v1426 + 8);
        if (*((_DWORD *)v1426 + 2) == 19) {
          llvm::ScalableVectorType::get(v1427, v1428);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v1427, v1428);
        }
        uint64_t v134 = v1429;
      }
      uint64_t v135 = (llvm::Value *)v8;
      __int16 v136 = v1425;
      goto LABEL_2285;
    case ':':
      int v43 = v1818;
      unsigned int v14 = (llvm::ConstantInt ***)*(v9 - 8);
      uint64_t v38 = (uint64_t)*(v9 - 4);
      v1839 = 0;
      unint64_t p_s2 = (unint64_t)&v1839;
      v1854 = 0;
      if ((sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v38) & 1) == 0) {
        goto LABEL_1415;
      }
      int v44 = *((_WORD *)a2 + 9) & 0x3F;
      LOBYTE(v1837) = 0;
      if (sub_1CC9EAA5C(v44, v43, &v1837))
      {
        int v343 = v1839;
        unsigned int v344 = *((_DWORD *)v1839 + 2);
        unsigned int v345 = v344 - 1;
        if (v344 >= 0x41) {
          int v343 = (llvm::APInt *)(*(void *)v1839 + 8 * (v345 >> 6));
        }
        if ((*(void *)v343 >> v345))
        {
          int v346 = v1837;
          uint64_t v347 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v347 + 16);
          v347[21] = v347[21] & 0x38000000 | 2;
          *(void *)uint64_t v347 = 0;
          *((void *)v347 + 1) = 0;
          *((void *)v347 + 2) = 0;
          *((void *)v347 + 3) = v347 + 16;
          *((void *)v347 + 4) = 0;
          *((void *)v347 + 5) = 0;
          *((void *)v347 + 6) = 0;
          *((void *)v347 + 7) = v347 + 16;
          uint64_t v350 = *v14;
          if (v346)
          {
            uint64_t Sub = (uint64_t)llvm::Constant::getAllOnesValue((llvm::Constant *)v350, v348, v349);
            WORD4(v1856) = 257;
            uint64_t v440 = *v14;
            uint64_t v134 = *(void *)**v14 + 1888;
            if (*v14 && (v440[1] & 0xFE) == 0x12)
            {
              v815 = (uint64_t **)(*(void *)**v14 + 1888);
              v816 = (llvm::Type *)*((unsigned int *)v440 + 8);
              if (*((_DWORD *)v440 + 2) == 19) {
                llvm::ScalableVectorType::get(v815, v816);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v815, v816);
              }
              uint64_t v134 = v817;
            }
            uint64_t v135 = (llvm::Value *)v8;
            __int16 v136 = 38;
          }
          else
          {
            uint64_t Sub = (uint64_t)llvm::Constant::getNullValue((llvm::Constant *)v350, v348, v349);
            WORD4(v1856) = 257;
            uint64_t v351 = *v14;
            uint64_t v134 = *(void *)**v14 + 1888;
            if (*v14 && (v351[1] & 0xFE) == 0x12)
            {
              v806 = (uint64_t **)(*(void *)**v14 + 1888);
              v807 = (llvm::Type *)*((unsigned int *)v351 + 8);
              if (*((_DWORD *)v351 + 2) == 19) {
                llvm::ScalableVectorType::get(v806, v807);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v806, v807);
              }
              uint64_t v134 = v808;
            }
            uint64_t v135 = (llvm::Value *)v8;
            __int16 v136 = 40;
          }
          goto LABEL_174;
        }
        uint64_t v116 = sub_1CC9D28DC((uint64_t)a1, (uint64_t)a2, 0, (uint64_t)v14);
LABEL_154:
        unint64_t v8 = v116;
        if (v116) {
          return v8;
        }
LABEL_1415:
        __int16 v888 = *((_WORD *)a2 + 9);
        if ((v888 & 0x3E) != 0x20) {
          goto LABEL_1491;
        }
        v889 = (int8x8_t *)v1818;
        int v34 = v888 & 0x3F;
        v890 = (llvm::Constant **)*(a2 - 4);
        uint64_t v38 = (uint64_t)*(v9 - 4);
        int v891 = *((unsigned __int8 *)v9 + 16);
        if (v891 == 56)
        {
          uint64_t v1861 = 0;
          unint64_t p_s2 = (unint64_t)&v1861;
          v1854 = 0;
          if (sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v38))
          {
            uint64_t v892 = v889[1].u32[0];
            if (v892 <= 0x40)
            {
              uint8x8_t v893 = (uint8x8_t)vcnt_s8(*v889);
              v893.i16[0] = vaddlv_u8(v893);
              if (*v889 != *(void *)v1861 || v893.u32[0] != 1) {
                goto LABEL_1491;
              }
LABEL_1424:
              v895 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v895 + 16);
              v895[21] = v895[21] & 0x38000000 | 2;
              *(void *)v895 = 0;
              *((void *)v895 + 1) = 0;
              *((void *)v895 + 2) = 0;
              *((void *)v895 + 3) = v895 + 16;
              *((void *)v895 + 4) = 0;
              *((void *)v895 + 5) = 0;
              *((void *)v895 + 6) = 0;
              *((void *)v895 + 7) = v895 + 16;
              if (v34 == 33) {
                __int16 v898 = 32;
              }
              else {
                __int16 v898 = 33;
              }
              v382 = llvm::Constant::getNullValue(*v890, v896, v897);
              WORD4(v1856) = 257;
              v899 = (llvm::Constant *)*v9;
              uint64_t v134 = *(void *)**v9 + 1888;
              if (!*v9) {
                goto LABEL_1429;
              }
              int v900 = *((_DWORD *)v899 + 2);
              if ((v900 & 0xFE) != 0x12) {
                goto LABEL_1429;
              }
              goto LABEL_2479;
            }
            v936 = (int8x8_t *)*v889;
            unint64_t v937 = v892 + 63;
            if (!memcmp(v936, *(const void **)v1861, ((unint64_t)(v892 + 63) >> 3) & 0x3FFFFFF8))
            {
              int v1085 = 0;
              unint64_t v1086 = v937 >> 6;
              do
              {
                int8x8_t v1087 = *v936++;
                uint8x8_t v1088 = (uint8x8_t)vcnt_s8(v1087);
                v1088.i16[0] = vaddlv_u8(v1088);
                v1085 += v1088.i32[0];
                --v1086;
              }
              while (v1086);
              if (v1085 == 1) {
                goto LABEL_1424;
              }
            }
          }
          goto LABEL_1491;
        }
        BOOL v36 = *(v9 - 8);
        if (*((unsigned __int8 *)v9 + 16) <= 0x32u)
        {
          if (v891 != 41)
          {
            if (v891 == 47)
            {
              uint64_t v910 = *((unsigned int *)v1818 + 2);
              if (v910 > 0x40)
              {
                int v1623 = 0;
                int64_t v1624 = (unint64_t)(v910 + 63) >> 6;
                do
                {
                  BOOL v109 = v1624-- < 1;
                  if (v109) {
                    break;
                  }
                  unint64_t v1625 = *(void *)(*(void *)v1818 + 8 * v1624);
                  v1623 += __clz(v1625);
                }
                while (!v1625);
                int v1626 = v910 | 0xFFFFFFC0;
                if ((v910 & 0x3F) == 0) {
                  int v1626 = 0;
                }
                if (v1623 + v1626 != v910) {
                  goto LABEL_1491;
                }
              }
              else if (*(void *)v1818)
              {
                goto LABEL_1491;
              }
              v911 = operator new(0x80uLL);
              unint64_t v8 = (unint64_t)(v911 + 16);
              v911[21] = v911[21] & 0x38000000 | 2;
              *(void *)v911 = 0;
              *((void *)v911 + 1) = 0;
              *((void *)v911 + 2) = 0;
              *((void *)v911 + 3) = v911 + 16;
              *((void *)v911 + 4) = 0;
              *((void *)v911 + 5) = 0;
              *((void *)v911 + 6) = 0;
              *((void *)v911 + 7) = v911 + 16;
              if (v34 == 33) {
                __int16 v912 = 37;
              }
              else {
                __int16 v912 = 34;
              }
              WORD4(v1856) = 257;
              uint64_t v913 = *(void *)v38;
              uint64_t v914 = ***(void ***)v38 + 1888;
              if (*(void *)v38 && (*(_DWORD *)(v913 + 8) & 0xFE) == 0x12)
              {
                v1120 = (uint64_t **)(***(void ***)v38 + 1888);
                v1121 = (llvm::Type *)*(unsigned int *)(v913 + 32);
                if (*(_DWORD *)(v913 + 8) == 19) {
                  llvm::ScalableVectorType::get(v1120, v1121);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1120, v1121);
                }
                uint64_t v914 = v1122;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v8, v914, 53, v912, v38, (uint64_t)v36, (const char **)&p_s2, 0, 0);
              return v8;
            }
LABEL_1491:
            uint64_t v9 = (llvm::ConstantInt ***)*(a2 - 8);
            unsigned int v10 = *((unsigned __int8 *)v9 + 16);
            goto LABEL_1492;
          }
          if (*(unsigned __int8 *)(v38 + 16) <= 0x14u && v38 != 0)
          {
            v902 = v9[1];
            if (!v902 || v902[1]) {
              goto LABEL_1491;
            }
            v903 = operator new(0x80uLL);
            v903[21] = v903[21] & 0x38000000 | 2;
            unint64_t v8 = (unint64_t)(v903 + 16);
            *(void *)v903 = 0;
            *((void *)v903 + 1) = 0;
            *((void *)v903 + 2) = 0;
            *((void *)v903 + 3) = v903 + 16;
            *((void *)v903 + 4) = 0;
            *((void *)v903 + 5) = 0;
            *((void *)v903 + 6) = 0;
            *((void *)v903 + 7) = v903 + 16;
            uint64_t Xor = (uint64_t)llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v890, (llvm::Constant *)v38, 0, 0);
            goto LABEL_1486;
          }
          uint64_t v923 = *((unsigned int *)v1818 + 2);
          if (v923 > 0x40)
          {
            int v1466 = 0;
            int64_t v1467 = (unint64_t)(v923 + 63) >> 6;
            do
            {
              BOOL v109 = v1467-- < 1;
              if (v109) {
                break;
              }
              unint64_t v1468 = *(void *)(*(void *)v1818 + 8 * v1467);
              v1466 += __clz(v1468);
            }
            while (!v1468);
            int v1469 = v923 | 0xFFFFFFC0;
            if ((v923 & 0x3F) == 0) {
              int v1469 = 0;
            }
            if (v1466 + v1469 != v923) {
              goto LABEL_1491;
            }
          }
          else if (*(void *)v1818)
          {
            goto LABEL_1491;
          }
          v924 = sub_1CC9D3E08((int)a1, (llvm::ConstantExpr *)*(v9 - 4), v6);
          if (v924)
          {
            uint64_t v1495 = (uint64_t)v924;
            v1496 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v1496 + 16);
            v1496[21] = v1496[21] & 0x38000000 | 2;
            *(void *)v1496 = 0;
            *((void *)v1496 + 1) = 0;
            *((void *)v1496 + 2) = 0;
            *((void *)v1496 + 3) = v1496 + 16;
            *((void *)v1496 + 4) = 0;
            *((void *)v1496 + 5) = 0;
            *((void *)v1496 + 6) = 0;
            *((void *)v1496 + 7) = v1496 + 16;
            WORD4(v1856) = 257;
            v1497 = *v36;
            uint64_t v1498 = **(void **)*v36 + 1888;
            if (*v36 && (*((_DWORD *)v1497 + 2) & 0xFE) == 0x12)
            {
              v1659 = (uint64_t **)(**(void **)*v36 + 1888);
              v1660 = (llvm::Type *)*((unsigned int *)v1497 + 8);
              if (*((_DWORD *)v1497 + 2) == 19) {
                llvm::ScalableVectorType::get(v1659, v1660);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1659, v1660);
              }
              uint64_t v1498 = v1661;
            }
            llvm::CmpInst::CmpInst((llvm::Value *)v8, v1498, 53, v34, (uint64_t)v36, v1495, (const char **)&p_s2, 0, 0);
            return v8;
          }
          v926 = sub_1CC9D3E08((int)a1, (llvm::ConstantExpr *)v36, v925);
          if (!v926)
          {
            v927 = v9[1];
            if (!v927 || v927[1]) {
              goto LABEL_1491;
            }
            uint64_t v928 = a1[3];
            WORD4(v1856) = 257;
            BOOL v392 = (int32x2_t ****)sub_1CD5A6358(v928, (llvm::BinaryOperator *)v38, (uint64_t)&p_s2, 0, 0);
            llvm::Value::takeName(v392, (llvm::Value *)v9);
            v929 = operator new(0x80uLL);
            unint64_t v8 = (unint64_t)(v929 + 16);
            v929[21] = v929[21] & 0x38000000 | 2;
            *(void *)v929 = 0;
            *((void *)v929 + 1) = 0;
            *((void *)v929 + 2) = 0;
            *((void *)v929 + 3) = v929 + 16;
            *((void *)v929 + 4) = 0;
            *((void *)v929 + 5) = 0;
            *((void *)v929 + 6) = 0;
            *((void *)v929 + 7) = v929 + 16;
            WORD4(v1856) = 257;
            v930 = *v36;
            uint64_t v134 = **(void **)*v36 + 1888;
            if (*v36 && (*((_DWORD *)v930 + 2) & 0xFE) == 0x12)
            {
              v1341 = (uint64_t **)(**(void **)*v36 + 1888);
              v1342 = (llvm::Type *)*((unsigned int *)v930 + 8);
              if (*((_DWORD *)v930 + 2) == 19) {
                llvm::ScalableVectorType::get(v1341, v1342);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1341, v1342);
              }
              uint64_t v134 = v1343;
            }
            uint64_t v135 = (llvm::Value *)v8;
            __int16 v136 = v34;
            uint64_t v137 = (uint64_t)v36;
LABEL_581:
            uint64_t v138 = (uint64_t)v392;
            goto LABEL_2287;
          }
          v1499 = v926;
          v1500 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1500 + 16);
          v1500[21] = v1500[21] & 0x38000000 | 2;
          *(void *)v1500 = 0;
          *((void *)v1500 + 1) = 0;
          *((void *)v1500 + 2) = 0;
          *((void *)v1500 + 3) = v1500 + 16;
          *((void *)v1500 + 4) = 0;
          *((void *)v1500 + 5) = 0;
          *((void *)v1500 + 6) = 0;
          *((void *)v1500 + 7) = v1500 + 16;
          WORD4(v1856) = 257;
          v1501 = *(void ***)v1499;
          uint64_t v134 = ***(void ***)v1499 + 1888;
          if (*(void *)v1499 && (v1501[1] & 0xFE) == 0x12)
          {
            v1662 = (uint64_t **)(***(void ***)v1499 + 1888);
            v1663 = (llvm::Type *)*((unsigned int *)v1501 + 8);
            if (*((_DWORD *)v1501 + 2) == 19) {
              llvm::ScalableVectorType::get(v1662, v1663);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1662, v1663);
            }
            uint64_t v134 = v1664;
          }
          uint64_t v135 = (llvm::Value *)v8;
          __int16 v136 = v34;
          uint64_t v137 = (uint64_t)v1499;
LABEL_2286:
          uint64_t v138 = v38;
          goto LABEL_2287;
        }
        if (v891 == 57)
        {
          uint64_t v1861 = 0;
          unint64_t p_s2 = (unint64_t)&v1861;
          v1854 = 0;
          if (!sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v38)) {
            goto LABEL_1491;
          }
          v915 = v9[1];
          if (!v915 || v915[1] || !llvm::Constant::isAllOnesValue((llvm::Constant *)v890)) {
            goto LABEL_1491;
          }
          uint64_t Sub = (uint64_t)llvm::ConstantExpr::getNot((llvm::Constant **)v38, (llvm::Constant *)v5, v6);
          uint64_t v916 = a1[3];
          WORD4(v1856) = 257;
          unint64_t v220 = sub_1CBF52474(v916, v36, Sub, (uint64_t)&p_s2);
          v917 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v917 + 16);
          v917[21] = v917[21] & 0x38000000 | 2;
          *(void *)v917 = 0;
          *((void *)v917 + 1) = 0;
          *((void *)v917 + 2) = 0;
          *((void *)v917 + 3) = v917 + 16;
          *((void *)v917 + 4) = 0;
          *((void *)v917 + 5) = 0;
          *((void *)v917 + 6) = 0;
          *((void *)v917 + 7) = v917 + 16;
          WORD4(v1856) = 257;
          v918 = *(void ***)v220;
          uint64_t v919 = ***(void ***)v220 + 1888;
          if (*(void *)v220 && (v918[1] & 0xFE) == 0x12)
          {
            v920 = (llvm::Type *)*((unsigned int *)v918 + 8);
            v921 = (uint64_t **)(***(void ***)v220 + 1888);
            if (*((_DWORD *)v918 + 2) == 19) {
              llvm::ScalableVectorType::get(v921, v920);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v921, v920);
            }
            uint64_t v919 = v922;
          }
          uint64_t v135 = (llvm::Value *)v8;
          uint64_t v134 = v919;
LABEL_312:
          __int16 v136 = v34;
          uint64_t v137 = (uint64_t)v220;
          goto LABEL_175;
        }
        if (v891 == 58)
        {
          v931 = v9[1];
          if (!v931 || v931[1]) {
            goto LABEL_1491;
          }
          if (*(unsigned __int8 *)(v38 + 16) <= 0x14u && v38)
          {
            v932 = operator new(0x80uLL);
            v932[21] = v932[21] & 0x38000000 | 2;
            unint64_t v8 = (unint64_t)(v932 + 16);
            *(void *)v932 = 0;
            *((void *)v932 + 1) = 0;
            *((void *)v932 + 2) = 0;
            *((void *)v932 + 3) = v932 + 16;
            *((void *)v932 + 4) = 0;
            *((void *)v932 + 5) = 0;
            *((void *)v932 + 6) = 0;
            *((void *)v932 + 7) = v932 + 16;
            uint64_t Xor = llvm::ConstantExpr::getXor((llvm::ConstantExpr *)v890, (llvm::Constant *)v38, v933, v934);
LABEL_1486:
            uint64_t Sub = Xor;
            WORD4(v1856) = 257;
            v935 = *v36;
            uint64_t v134 = **(void **)*v36 + 1888;
            if (*v36 && (*((_DWORD *)v935 + 2) & 0xFE) == 0x12)
            {
              v1104 = (uint64_t **)(**(void **)*v36 + 1888);
              v1105 = (llvm::Type *)*((unsigned int *)v935 + 8);
              if (*((_DWORD *)v935 + 2) == 19) {
                llvm::ScalableVectorType::get(v1104, v1105);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1104, v1105);
              }
              uint64_t v134 = v1106;
            }
            uint64_t v135 = (llvm::Value *)v8;
            __int16 v136 = v34;
LABEL_1489:
            uint64_t v137 = (uint64_t)v36;
            goto LABEL_175;
          }
          uint64_t v1090 = *((unsigned int *)v1818 + 2);
          if (v1090 > 0x40)
          {
            int v1632 = 0;
            int64_t v1633 = (unint64_t)(v1090 + 63) >> 6;
            do
            {
              BOOL v109 = v1633-- < 1;
              if (v109) {
                break;
              }
              unint64_t v1634 = *(void *)(*(void *)v1818 + 8 * v1633);
              v1632 += __clz(v1634);
            }
            while (!v1634);
            int v1635 = v1090 | 0xFFFFFFC0;
            if ((v1090 & 0x3F) == 0) {
              int v1635 = 0;
            }
            if (v1632 + v1635 != v1090) {
              goto LABEL_1491;
            }
          }
          else if (*(void *)v1818)
          {
            goto LABEL_1491;
          }
          v1091 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1091 + 16);
          v1091[21] = v1091[21] & 0x38000000 | 2;
          *(void *)v1091 = 0;
          *((void *)v1091 + 1) = 0;
          *((void *)v1091 + 2) = 0;
          *((void *)v1091 + 3) = v1091 + 16;
          *((void *)v1091 + 4) = 0;
          *((void *)v1091 + 5) = 0;
          *((void *)v1091 + 6) = 0;
          *((void *)v1091 + 7) = v1091 + 16;
          WORD4(v1856) = 257;
          v1092 = *v36;
          uint64_t v134 = **(void **)*v36 + 1888;
          if (*v36 && (*((_DWORD *)v1092 + 2) & 0xFE) == 0x12)
          {
            v1294 = (uint64_t **)(**(void **)*v36 + 1888);
            v1295 = (llvm::Type *)*((unsigned int *)v1092 + 8);
            if (*((_DWORD *)v1092 + 2) == 19) {
              llvm::ScalableVectorType::get(v1294, v1295);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1294, v1295);
            }
            uint64_t v134 = v1296;
          }
          uint64_t v135 = (llvm::Value *)v8;
          __int16 v136 = v34;
LABEL_2285:
          uint64_t v137 = (uint64_t)v36;
          goto LABEL_2286;
        }
        if (v891 != 51) {
          goto LABEL_1491;
        }
        uint64_t v905 = *((unsigned int *)v1818 + 2);
        if (v905 > 0x40)
        {
          int v1598 = 0;
          int64_t v1599 = (unint64_t)(v905 + 63) >> 6;
          do
          {
            BOOL v109 = v1599-- < 1;
            if (v109) {
              break;
            }
            unint64_t v1600 = *(void *)(*(void *)v1818 + 8 * v1599);
            v1598 += __clz(v1600);
          }
          while (!v1600);
          int v1601 = v905 | 0xFFFFFFC0;
          if ((v905 & 0x3F) == 0) {
            int v1601 = 0;
          }
          if (v1598 + v1601 != v905) {
            goto LABEL_1491;
          }
        }
        else if (*(void *)v1818)
        {
          goto LABEL_1491;
        }
        v906 = v9[1];
        if (!v906) {
          goto LABEL_1491;
        }
        if (v906[1]) {
          goto LABEL_1491;
        }
        uint64_t v1861 = 0;
        unint64_t p_s2 = (unint64_t)&v1861;
        v1854 = 0;
        if (!sub_1CBF528D8((uint64_t)&p_s2, (unsigned __int8 *)v38)) {
          goto LABEL_1491;
        }
        uint64_t v907 = *(unsigned int *)(v1861 + 8);
        if (v907 >= 0x41)
        {
          v908 = *(llvm::ConstantInt **)v1861;
          if ((*(void *)(*(void *)v1861 + 8 * ((v907 - 1) >> 6)) >> (v907 - 1)))
          {
            if (v907 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v1861) - 64 < 0xFFFFFFBF) {
              goto LABEL_1491;
            }
          }
          else
          {
            int v1671 = 0;
            int64_t v1672 = (unint64_t)(v907 + 63) >> 6;
            do
            {
              BOOL v109 = v1672-- < 1;
              if (v109) {
                break;
              }
              unint64_t v1673 = *((void *)v908 + v1672);
              v1671 += __clz(v1673);
            }
            while (!v1673);
            int v1674 = v907 | 0xFFFFFFC0;
            if ((v907 & 0x3F) == 0) {
              int v1674 = 0;
            }
            if ((v907 - v1671 - v1674 - 64) < 0xFFFFFFBF) {
              goto LABEL_1451;
            }
          }
          uint64_t v909 = *(void *)v908;
        }
        else
        {
          v908 = *(llvm::ConstantInt **)v1861;
          uint64_t v909 = (uint64_t)(*(void *)v1861 << -(char)v907) >> -(char)v907;
        }
        if (v909 < 2) {
          goto LABEL_1491;
        }
LABEL_1451:
        if (v907 > 0x40)
        {
          int v1675 = 0;
          unint64_t v1676 = (unint64_t)(v907 + 63) >> 6;
          do
          {
            int8x8_t v1677 = *(int8x8_t *)v908;
            v908 = (llvm::ConstantInt *)((char *)v908 + 8);
            uint8x8_t v1678 = (uint8x8_t)vcnt_s8(v1677);
            v1678.i16[0] = vaddlv_u8(v1678);
            v1675 += v1678.i32[0];
            --v1676;
          }
          while (v1676);
          if (v1675 != 1) {
            goto LABEL_1491;
          }
        }
        else if (!v908 || ((unint64_t)v908 & ((unint64_t)v908 - 1)) != 0)
        {
          goto LABEL_1491;
        }
        uint64_t v1679 = a1[3];
        if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
        {
          v1720 = 0;
          v1719 = (uint64_t *)&byte_1CFBCE98E;
LABEL_2909:
          WORD4(v1856) = 261;
          unint64_t p_s2 = (unint64_t)v1719;
          v1854 = v1720;
          unint64_t v220 = sub_1CC57DDE0(v1679, (uint64_t)v36, v38, (uint64_t)&p_s2);
          v1722 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1722 + 16);
          v1722[21] = v1722[21] & 0x38000000 | 2;
          *(void *)v1722 = 0;
          *((void *)v1722 + 1) = 0;
          *((void *)v1722 + 2) = 0;
          *((void *)v1722 + 3) = v1722 + 16;
          *((void *)v1722 + 4) = 0;
          *((void *)v1722 + 5) = 0;
          *((void *)v1722 + 6) = 0;
          *((void *)v1722 + 7) = v1722 + 16;
          uint64_t Sub = (uint64_t)llvm::Constant::getNullValue((llvm::Constant *)*v9, v1723, v1724);
LABEL_309:
          WORD4(v1856) = 257;
          uint64_t v224 = *(void *)v220;
          uint64_t v134 = ***(void ***)v220 + 1888;
          if (*(void *)v220 && (*(_DWORD *)(v224 + 8) & 0xFE) == 0x12)
          {
            v730 = (uint64_t **)(***(void ***)v220 + 1888);
            v731 = (llvm::Type *)*(unsigned int *)(v224 + 32);
            if (*(_DWORD *)(v224 + 8) == 19) {
              llvm::ScalableVectorType::get(v730, v731);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v730, v731);
            }
            uint64_t v134 = v732;
          }
          uint64_t v135 = (llvm::Value *)v8;
          goto LABEL_312;
        }
        uint64_t v1680 = *(void *)**v9;
        uint64_t v1681 = *(void *)(v1680 + 152);
        uint64_t v1682 = *(unsigned int *)(v1680 + 168);
        if (v1682)
        {
          LODWORD(v1683) = (v1682 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          v1684 = (llvm::ConstantInt ****)(v1681 + 16 * v1683);
          v1685 = *v1684;
          if (*v1684 == v9)
          {
LABEL_2908:
            v1718 = v1684[1];
            v1721 = *v1718;
            v1719 = (uint64_t *)(v1718 + 2);
            v1720 = v1721;
            goto LABEL_2909;
          }
          int v1686 = 1;
          while (v1685 != (llvm::ConstantInt ***)-4096)
          {
            int v1687 = v1683 + v1686++;
            uint64_t v1683 = v1687 & (v1682 - 1);
            v1685 = *(llvm::ConstantInt ****)(v1681 + 16 * v1683);
            if (v1685 == v9)
            {
              v1684 = (llvm::ConstantInt ****)(v1681 + 16 * v1683);
              goto LABEL_2908;
            }
          }
        }
        v1684 = (llvm::ConstantInt ****)(v1681 + 16 * v1682);
        goto LABEL_2908;
      }
      uint64_t v45 = v9[1];
      if (!v45) {
        goto LABEL_63;
      }
      if (v45[1]) {
        goto LABEL_63;
      }
      __int16 v46 = *((_WORD *)a2 + 9);
      if ((v46 & 0x3E) == 0x20) {
        goto LABEL_63;
      }
      unsigned int v483 = *((_DWORD *)v1839 + 2);
      if (v483 > 0x40)
      {
        unsigned int v1350 = v483 - 1;
        if (((*(void *)(*(void *)v1839 + 8 * ((v483 - 1) >> 6)) >> (v483 - 1)) & 1) == 0)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v1839) == v1350) {
            goto LABEL_2138;
          }
          goto LABEL_63;
        }
        if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1839) != v1350) {
          goto LABEL_63;
        }
LABEL_2991:
        LOWORD(v1354) = llvm::CmpInst::getFlippedSignednessPredicate(v46 & 0x3F);
        v1743 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v1743 + 16);
        v1743[21] = v1743[21] & 0x38000000 | 2;
        *(void *)v1743 = 0;
        *((void *)v1743 + 1) = 0;
        *((void *)v1743 + 2) = 0;
        *((void *)v1743 + 3) = v1743 + 16;
        *((void *)v1743 + 4) = 0;
        *((void *)v1743 + 5) = 0;
        *((void *)v1743 + 6) = 0;
        *((void *)v1743 + 7) = v1743 + 16;
        v1355 = *v14;
        unsigned int v1356 = *((_DWORD *)v43 + 2);
        if (v1356 > 0x40) {
          operator new[]();
        }
        goto LABEL_2992;
      }
      char v484 = v483 - 1;
      if (*(void *)v1839 == 1 << v484) {
        goto LABEL_2991;
      }
      if (*(void *)v1839 == ~(-1 << v484))
      {
LABEL_2138:
        int FlippedSignednessPredicate = llvm::CmpInst::getFlippedSignednessPredicate(v46 & 0x3F);
        v1352 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v1352 + 16);
        v1352[21] = v1352[21] & 0x38000000 | 2;
        *(void *)v1352 = 0;
        *((void *)v1352 + 1) = 0;
        *((void *)v1352 + 2) = 0;
        *((void *)v1352 + 3) = v1352 + 16;
        *((void *)v1352 + 4) = 0;
        *((void *)v1352 + 5) = 0;
        *((void *)v1352 + 6) = 0;
        *((void *)v1352 + 7) = v1352 + 16;
        int v1354 = dword_1CFB279AC[FlippedSignednessPredicate];
        v1355 = *v14;
        unsigned int v1356 = *((_DWORD *)v43 + 2);
        if (v1356 > 0x40) {
          operator new[]();
        }
LABEL_2992:
        v1744 = (uint64_t *)(*(void *)v1839 ^ *(void *)v43);
        LODWORD(p_s1) = v1356;
        uint64_t v1861 = (uint64_t)v1744;
        v1745 = llvm::ConstantInt::get(*v1355, (llvm::LLVMContext *)&v1861, v1353);
        unint64_t v94 = v1745;
        if ((v1355[1] & 0xFE) == 0x12) {
          unint64_t v94 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v1355 + 8) | ((unint64_t)(*((_DWORD *)v1355 + 2) == 19) << 32)), (uint64_t)v1745);
        }
        WORD4(v1856) = 257;
        v1746 = *v14;
        uint64_t v96 = *(void *)**v14 + 1888;
        if (*v14 && (v1746[1] & 0xFE) == 0x12)
        {
          v1747 = (uint64_t **)(*(void *)**v14 + 1888);
          v1748 = (llvm::Type *)*((unsigned int *)v1746 + 8);
          if (*((_DWORD *)v1746 + 2) == 19) {
            llvm::ScalableVectorType::get(v1747, v1748);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1747, v1748);
          }
          uint64_t v96 = v1749;
        }
        unint64_t v97 = (llvm::Value *)v8;
        __int16 v98 = v1354;
        uint64_t v226 = (uint64_t)v14;
LABEL_318:
        llvm::CmpInst::CmpInst(v97, v96, 53, v98, v226, (uint64_t)v94, (const char **)&p_s2, 0, 0);
        goto LABEL_319;
      }
LABEL_63:
      if (v44 != 36)
      {
        if (v44 != 34) {
          goto LABEL_1415;
        }
        unsigned int v232 = *((_DWORD *)v43 + 2);
        v1850[0] = v232;
        if (v232 > 0x40) {
          operator new[]();
        }
        uint64_t v233 = ~*(void *)v43;
        unint64_t v234 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v232;
        if (!v232) {
          unint64_t v234 = 0;
        }
        uint64_t v235 = (const void *)(v234 & v233);
        v1849 = (void *)(v234 & v233);
        v1850[0] = 0;
        uint64_t v236 = *((unsigned int *)v1839 + 2);
        if (v236 > 0x40)
        {
          if (memcmp(*(const void **)v1839, v235, ((unint64_t)(v236 + 63) >> 3) & 0x3FFFFFF8)) {
            goto LABEL_340;
          }
        }
        else if (*(const void **)v1839 != v235)
        {
LABEL_340:
          BOOL v237 = 0;
          goto LABEL_341;
        }
        LODWORD(v1867) = *((_DWORD *)v43 + 2);
        if (v1867 > 0x40) {
          operator new[]();
        }
        v1866 = *(uint64_t **)v43;
        llvm::APInt::operator+=((uint64_t)&v1866, 1uLL);
        uint64_t v1627 = v1867;
        LODWORD(v1867) = 0;
        if (v1627 > 0x40)
        {
          unint64_t v1628 = 0;
          int v1629 = 0;
          unint64_t v1630 = ((unint64_t)(v1627 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            uint8x8_t v1631 = (uint8x8_t)vcnt_s8((int8x8_t)v1866[v1628 / 8]);
            v1631.i16[0] = vaddlv_u8(v1631);
            v1629 += v1631.i32[0];
            v1628 += 8;
          }
          while (v1630 != v1628);
          BOOL v237 = v1629 == 1;
          if (v1866)
          {
            MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
            if (v1867 >= 0x41)
            {
              if (v1866) {
                MEMORY[0x1D25D9CB0](v1866, 0x1000C8000313F17);
              }
            }
          }
        }
        else
        {
          if (!v1866) {
            goto LABEL_340;
          }
          BOOL v237 = ((unint64_t)v1866 & ((unint64_t)v1866 - 1)) == 0;
        }
LABEL_341:
        if (v237)
        {
          v1607 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1607 + 16);
          v1607[21] = v1607[21] & 0x38000000 | 2;
          *(void *)v1607 = 0;
          *((void *)v1607 + 1) = 0;
          *((void *)v1607 + 2) = 0;
          *((void *)v1607 + 3) = v1607 + 16;
          *((void *)v1607 + 4) = 0;
          *((void *)v1607 + 5) = 0;
          *((void *)v1607 + 6) = 0;
          *((void *)v1607 + 7) = v1607 + 16;
          WORD4(v1856) = 257;
          v1608 = *v14;
          uint64_t v134 = *(void *)**v14 + 1888;
          if (*v14 && (v1608[1] & 0xFE) == 0x12)
          {
            v1725 = (uint64_t **)(*(void *)**v14 + 1888);
            v1726 = (llvm::Type *)*((unsigned int *)v1608 + 8);
            if (*((_DWORD *)v1608 + 2) == 19) {
              llvm::ScalableVectorType::get(v1725, v1726);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1725, v1726);
            }
            uint64_t v134 = v1727;
          }
          uint64_t v135 = (llvm::Value *)v8;
          __int16 v136 = 36;
        }
        else
        {
          uint64_t v238 = *((unsigned int *)v1839 + 2);
          if (v238 > 0x40)
          {
            uint64_t v239 = *(uint64_t **)v43;
            if (memcmp(*(const void **)v1839, *(const void **)v43, ((unint64_t)(v238 + 63) >> 3) & 0x3FFFFFF8)) {
              goto LABEL_1415;
            }
          }
          else
          {
            uint64_t v239 = *(uint64_t **)v1839;
            if (*(void *)v1839 != *(void *)v43) {
              goto LABEL_1415;
            }
          }
          unsigned int v1860 = *((_DWORD *)v43 + 2);
          if (v1860 > 0x40) {
            operator new[]();
          }
          uint64_t v1859 = (uint64_t)v239;
          llvm::APInt::operator+=((uint64_t)&v1859, 1uLL);
          uint64_t v1609 = v1860;
          unsigned int v1860 = 0;
          if (v1609 > 0x40)
          {
            uint64_t v1711 = 0;
            int v1712 = 0;
            unint64_t v1713 = ((unint64_t)(v1609 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              uint8x8_t v1714 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v1859 + v1711));
              v1714.i16[0] = vaddlv_u8(v1714);
              v1712 += v1714.i32[0];
              v1711 += 8;
            }
            while (v1713 != v1711);
            if (v1859)
            {
              MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
              if (v1860 >= 0x41)
              {
                if (v1859) {
                  MEMORY[0x1D25D9CB0](v1859, 0x1000C8000313F17);
                }
              }
            }
            if (v1712 != 1) {
              goto LABEL_1415;
            }
          }
          else
          {
            uint8x8_t v1610 = (uint8x8_t)vcnt_s8((int8x8_t)v1859);
            v1610.i16[0] = vaddlv_u8(v1610);
            if (v1610.u32[0] != 1) {
              goto LABEL_1415;
            }
          }
          v1611 = operator new(0x80uLL);
          unint64_t v8 = (unint64_t)(v1611 + 16);
          v1611[21] = v1611[21] & 0x38000000 | 2;
          *(void *)v1611 = 0;
          *((void *)v1611 + 1) = 0;
          *((void *)v1611 + 2) = 0;
          *((void *)v1611 + 3) = v1611 + 16;
          *((void *)v1611 + 4) = 0;
          *((void *)v1611 + 5) = 0;
          *((void *)v1611 + 6) = 0;
          *((void *)v1611 + 7) = v1611 + 16;
          WORD4(v1856) = 257;
          v1612 = *v14;
          uint64_t v134 = *(void *)**v14 + 1888;
          if (*v14 && (v1612[1] & 0xFE) == 0x12)
          {
            v1613 = (uint64_t **)(*(void *)**v14 + 1888);
            v1614 = (llvm::Type *)*((unsigned int *)v1612 + 8);
            if (*((_DWORD *)v1612 + 2) == 19) {
              llvm::ScalableVectorType::get(v1613, v1614);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1613, v1614);
            }
            uint64_t v134 = v1615;
          }
          uint64_t v135 = (llvm::Value *)v8;
          __int16 v136 = 34;
        }
        uint64_t v137 = (uint64_t)v14;
        goto LABEL_2286;
      }
      uint64_t v47 = v1839;
      unsigned int v48 = *((_DWORD *)v43 + 2);
      unsigned int v1848 = v48;
      if (v48 > 0x40) {
        operator new[]();
      }
      unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
      if (!v48) {
        unint64_t v49 = 0;
      }
      __s1 = (void *)(v49 & ~*(void *)v43);
      llvm::APInt::operator++((uint64_t)&__s1);
      unsigned int v50 = v1848;
      unint64_t v51 = __s1;
      unsigned int v1848 = 0;
      uint64_t v52 = *((unsigned int *)v47 + 2);
      if (v52 > 0x40)
      {
        if (memcmp(*(const void **)v47, __s1, ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8)) {
          goto LABEL_69;
        }
      }
      else if (*(void **)v47 != __s1)
      {
LABEL_69:
        if (v50 >= 0x41)
        {
          if (v51)
          {
            MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
            if (v1848 >= 0x41)
            {
              if (__s1) {
                MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
              }
            }
          }
        }
        goto LABEL_70;
      }
      uint64_t v1464 = *((unsigned int *)v43 + 2);
      if (v1464 > 0x40)
      {
        int v1484 = 0;
        unint64_t v1485 = (unint64_t)(v1464 + 63) >> 6;
        v1486 = *(int8x8_t **)v43;
        do
        {
          int8x8_t v1487 = *v1486++;
          uint8x8_t v1488 = (uint8x8_t)vcnt_s8(v1487);
          v1488.i16[0] = vaddlv_u8(v1488);
          v1484 += v1488.i32[0];
          --v1485;
        }
        while (v1485);
        BOOL v1465 = v1484 == 1;
      }
      else
      {
        if (!*(void *)v43)
        {
          int v1489 = 0;
          goto LABEL_2406;
        }
        BOOL v1465 = (*(void *)v43 & (*(void *)v43 - 1)) == 0;
      }
      int v1489 = v1465;
LABEL_2406:
      if (v50 >= 0x41)
      {
        if (v51)
        {
          MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
          if (v1848 >= 0x41)
          {
            if (__s1) {
              MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v1489)
      {
        v1490 = operator new(0x80uLL);
        unint64_t v8 = (unint64_t)(v1490 + 16);
        v1490[21] = v1490[21] & 0x38000000 | 2;
        *(void *)v1490 = 0;
        *((void *)v1490 + 1) = 0;
        *((void *)v1490 + 2) = 0;
        *((void *)v1490 + 3) = v1490 + 16;
        *((void *)v1490 + 4) = 0;
        *((void *)v1490 + 5) = 0;
        *((void *)v1490 + 6) = 0;
        *((void *)v1490 + 7) = v1490 + 16;
        uint64_t v61 = *v14;
        unsigned int v62 = *((_DWORD *)v43 + 2);
        unsigned int v1846 = v62;
        if (v62 > 0x40) {
          operator new[]();
        }
        goto LABEL_79;
      }
LABEL_70:
      uint64_t v53 = *((unsigned int *)v1839 + 2);
      if (v53 > 0x40)
      {
        __int16 v54 = *(const void **)v43;
        if (memcmp(*(const void **)v1839, *(const void **)v43, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8)) {
          goto LABEL_1415;
        }
      }
      else
      {
        __int16 v54 = *(const void **)v1839;
        if (*(void *)v1839 != *(void *)v43) {
          goto LABEL_1415;
        }
      }
      unsigned int v55 = *((_DWORD *)v43 + 2);
      unsigned int v1844 = v55;
      if (v55 >= 0x41) {
        operator new[]();
      }
      if (v55) {
        unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
      }
      else {
        unint64_t v56 = 0;
      }
      v1843 = (llvm::Type *)(v56 & ~(unint64_t)v54);
      llvm::APInt::operator++((uint64_t)&v1843);
      uint64_t v57 = v1844;
      unsigned int v1844 = 0;
      if (v57 > 0x40)
      {
        uint64_t v1616 = 0;
        int v1617 = 0;
        unint64_t v1618 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          uint8x8_t v1619 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v1843 + v1616));
          v1619.i16[0] = vaddlv_u8(v1619);
          v1617 += v1619.i32[0];
          v1616 += 8;
        }
        while (v1618 != v1616);
        if (v1843)
        {
          MEMORY[0x1D25D9CB0](v1843, 0x1000C8000313F17);
          if (v1844 >= 0x41)
          {
            if (v1843) {
              MEMORY[0x1D25D9CB0](v1843, 0x1000C8000313F17);
            }
          }
        }
        if (v1617 != 1) {
          goto LABEL_1415;
        }
      }
      else
      {
        uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v1843);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] != 1) {
          goto LABEL_1415;
        }
      }
      uint64_t v59 = operator new(0x80uLL);
      unint64_t v8 = (unint64_t)(v59 + 16);
      v59[21] = v59[21] & 0x38000000 | 2;
      *(void *)uint64_t v59 = 0;
      *((void *)v59 + 1) = 0;
      *((void *)v59 + 2) = 0;
      *((void *)v59 + 3) = v59 + 16;
      *((void *)v59 + 4) = 0;
      *((void *)v59 + 5) = 0;
      *((void *)v59 + 6) = 0;
      *((void *)v59 + 7) = v59 + 16;
      uint64_t v61 = *v14;
      unsigned int v62 = *((_DWORD *)v43 + 2);
      unsigned int v1842 = v62;
      if (v62 > 0x40) {
        operator new[]();
      }
LABEL_79:
      unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v62;
      if (!v62) {
        unint64_t v63 = 0;
      }
      uint64_t v64 = (uint64_t *)(v63 & ~*(void *)v43);
      LODWORD(p_s1) = v62;
      uint64_t v1861 = (uint64_t)v64;
LABEL_1070:
      v675 = llvm::ConstantInt::get(*v61, (llvm::LLVMContext *)&v1861, v60);
      if ((v61[1] & 0xFE) == 0x12) {
        v675 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v61 + 8) | ((unint64_t)(*((_DWORD *)v61 + 2) == 19) << 32)), (uint64_t)v675);
      }
      WORD4(v1856) = 257;
      v676 = *v14;
      uint64_t v677 = *(void *)**v14 + 1888;
      if (*v14 && (v676[1] & 0xFE) == 0x12)
      {
        v1117 = (uint64_t **)(*(void *)**v14 + 1888);
        v1118 = (llvm::Type *)*((unsigned int *)v676 + 8);
        if (*((_DWORD *)v676 + 2) == 19) {
          llvm::ScalableVectorType::get(v1117, v1118);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v1117, v1118);
        }
        uint64_t v677 = v1119;
      }
      llvm::CmpInst::CmpInst((llvm::Value *)v8, v677, 53, 34, (uint64_t)v14, (uint64_t)v675, (const char **)&p_s2, 0, 0);
LABEL_319:
      if (p_s1 >= 0x41)
      {
        int v227 = (uint64_t *)v1861;
        if (v1861) {
          goto LABEL_321;
        }
      }
      return v8;
    default:
      goto LABEL_1415;
  }
}

llvm::UndefValue **sub_1CCA5E9E0(uint64_t a1, _WORD *a2, uint64_t a3)
{
  unint64_t v3 = 0;
  uint64_t v714 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 - 8);
  unint64_t v5 = *((void *)a2 - 4);
  unsigned int v6 = *(unsigned __int8 *)(v4 + 16);
  BOOL v7 = v6 - 41 < 0x12 && v6 > 0x1B;
  if (v7) {
    uint64_t v8 = *((void *)a2 - 8);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(v5 + 16);
  if (v9 - 41 < 0x12 && v9 > 0x1B) {
    unint64_t v11 = *((void *)a2 - 4);
  }
  else {
    unint64_t v11 = 0;
  }
  if (!(v8 | v11)) {
    return (llvm::UndefValue **)v3;
  }
  uint64_t v12 = a3;
  int v13 = a2;
  int v15 = *(llvm::detail::IEEEFloat **)(a3 + 16);
  uint64_t v684 = *(void *)(a3 + 24);
  v685 = *(const char **)a3;
  LODWORD(v712) = 0;
  unint64_t v708 = 0;
  uint64_t v695 = (uint64_t)&v712;
  *((void *)&v696 + 1) = &v708;
  *(void *)&long long v697 = &v708;
  int v16 = sub_1CCA389C4((uint64_t)&v696, v4);
  unint64_t v18 = (llvm::Type *)*((void *)v13 - 4);
  ZExtOrBitCast = v15;
  if (v16 && *(llvm::Type **)v697 == v18)
  {
    uint64_t v40 = v12;
    unsigned int v41 = v13;
    int v42 = v13[9] & 0x3F;
  }
  else
  {
    if (!sub_1CCA389C4((uint64_t)&v696, (uint64_t)v18) || *(void *)v697 != *((void *)v13 - 8)) {
      goto LABEL_16;
    }
    uint64_t v40 = v12;
    unsigned int v41 = v13;
    int v42 = dword_1CFB279AC[v13[9] & 0x3F];
  }
  *(_DWORD *)uint64_t v695 = v42;
  LOWORD(v43) = (_WORD)v712;
  if ((v712 - 38) > 3)
  {
    if ((v712 - 34) > 3) {
      goto LABEL_814;
    }
    int v43 = v712 + 4;
  }
  else
  {
    int v43 = dword_1CFB27840[(int)v712 - 38];
  }
  LODWORD(v712) = v43;
LABEL_814:
  v441 = (void *)v708;
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v708, v18, v17);
  if ((*((unsigned char *)v41 + 23) & 0x10) != 0)
  {
    uint64_t v443 = ***(void ***)v41;
    uint64_t v444 = *(void *)(v443 + 152);
    uint64_t v445 = *(unsigned int *)(v443 + 168);
    if (v445)
    {
      LODWORD(v446) = (v445 - 1) & ((v41 >> 4) ^ (v41 >> 9));
      v447 = (void *)(v444 + 16 * v446);
      uint64_t v448 = (_WORD *)*v447;
      if ((_WORD *)*v447 == v41)
      {
LABEL_833:
        uint64_t v460 = (void *)v447[1];
        uint64_t v463 = *v460;
        __int16 v461 = (const char *)(v460 + 2);
        uint64_t v462 = v463;
        goto LABEL_834;
      }
      int v449 = 1;
      while (v448 != (_WORD *)-4096)
      {
        int v450 = v446 + v449++;
        uint64_t v446 = v450 & (v445 - 1);
        uint64_t v448 = *(_WORD **)(v444 + 16 * v446);
        if (v448 == v41)
        {
          v447 = (void *)(v444 + 16 * v446);
          goto LABEL_833;
        }
      }
    }
    v447 = (void *)(v444 + 16 * v445);
    goto LABEL_833;
  }
  uint64_t v462 = 0;
  __int16 v461 = &byte_1CFBCE98E;
LABEL_834:
  WORD4(v697) = 261;
  uint64_t v695 = (uint64_t)v461;
  *(void *)&long long v696 = v462;
  unint64_t v3 = llvm::CmpInst::Create(53, v43, v441, (uint64_t)NullValue, (const char **)&v695, 0);
  int v13 = v41;
  uint64_t v12 = v40;
  if (v3) {
    return (llvm::UndefValue **)v3;
  }
LABEL_16:
  uint64_t v688 = v13[9] & 0x3F;
  uint64_t v19 = *(void *)(v4 + 8);
  if (!v19 || *(void *)(v19 + 8)) {
    goto LABEL_18;
  }
  int v26 = *(unsigned __int8 *)(v4 + 16);
  if (v26 != 5)
  {
    if (v26 != 41) {
      goto LABEL_18;
    }
    uint64_t v27 = *(llvm::Value **)(v4 - 64);
    uint64_t v28 = *(void *)(v4 - 32);
    if ((llvm::Value *)v5 == v27)
    {
      uint64_t v27 = *(llvm::Value **)(v4 - 32);
      if (!v28) {
        goto LABEL_18;
      }
    }
    else if (!v27 || v5 != v28)
    {
      goto LABEL_18;
    }
    if ((v688 - 35) > 1) {
      goto LABEL_18;
    }
LABEL_90:
    uint64_t v47 = (char *)operator new(0x80uLL);
    *((_DWORD *)v47 + 21) = *((_DWORD *)v47 + 21) & 0x38000000 | 2;
    unint64_t v3 = v47 + 64;
    *(void *)uint64_t v47 = 0;
    *((void *)v47 + 1) = 0;
    *((void *)v47 + 2) = 0;
    *((void *)v47 + 3) = v47 + 64;
    *((void *)v47 + 4) = 0;
    *((void *)v47 + 5) = 0;
    *((void *)v47 + 6) = 0;
    *((void *)v47 + 7) = v47 + 64;
    uint64_t v48 = *(void *)(a1 + 24);
    WORD4(v697) = 257;
    unsigned int v50 = sub_1CC2427E8(v48, v5, (uint64_t)&v695, v49);
    __int16 v711 = 257;
    unint64_t v51 = *(void ***)v50;
    uint64_t v52 = ***(void ***)v50 + 1888;
    if (*(void *)v50 && (v51[1] & 0xFE) == 0x12)
    {
      BOOL v240 = (uint64_t **)(***(void ***)v50 + 1888);
      int v241 = (llvm::Type *)*((unsigned int *)v51 + 8);
      if (*((_DWORD *)v51 + 2) == 19) {
        llvm::ScalableVectorType::get(v240, v241);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v240, v241);
      }
      uint64_t v52 = v242;
    }
    uint64_t v53 = (const char **)&v708;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v688;
    uint64_t v56 = (uint64_t)v50;
    goto LABEL_155;
  }
  if (*(_WORD *)(v4 + 18) != 13) {
    goto LABEL_18;
  }
  BOOL v36 = (llvm::Value **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  uint64_t v27 = v36[4];
  if ((llvm::Value *)v5 == *v36)
  {
    if (!v27) {
      goto LABEL_18;
    }
    goto LABEL_89;
  }
  if (*v36) {
    BOOL v37 = v5 == (void)v27;
  }
  else {
    BOOL v37 = 0;
  }
  uint64_t v27 = *v36;
  if (v37)
  {
LABEL_89:
    if ((v688 - 35) >= 2) {
      goto LABEL_18;
    }
    goto LABEL_90;
  }
LABEL_18:
  uint64_t v20 = *(void *)(v5 + 8);
  if (!v20 || *(void *)(v20 + 8)) {
    goto LABEL_20;
  }
  int v29 = *(unsigned __int8 *)(v5 + 16);
  if (v29 == 5)
  {
    if (*(_WORD *)(v5 + 18) != 13) {
      goto LABEL_20;
    }
    uint64_t v38 = (unsigned __int8 **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    int v30 = v38[4];
    if ((unsigned __int8 *)v4 == *v38)
    {
      if (!v30) {
        goto LABEL_20;
      }
    }
    else
    {
      if (*v38) {
        BOOL v39 = v4 == (void)v30;
      }
      else {
        BOOL v39 = 0;
      }
      int v30 = *v38;
      if (!v39) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (v29 != 41) {
      goto LABEL_20;
    }
    int v30 = *(unsigned __int8 **)(v5 - 64);
    uint64_t v31 = *(void *)(v5 - 32);
    if ((unsigned __int8 *)v4 == v30)
    {
      int v30 = *(unsigned __int8 **)(v5 - 32);
      if (!v31) {
        goto LABEL_20;
      }
    }
    else if (!v30 || v4 != v31)
    {
      goto LABEL_20;
    }
  }
  if (v688 == 37 || v688 == 34)
  {
    uint64_t v57 = (char *)operator new(0x80uLL);
    *((_DWORD *)v57 + 21) = *((_DWORD *)v57 + 21) & 0x38000000 | 2;
    unint64_t v3 = v57 + 64;
    *(void *)uint64_t v57 = 0;
    *((void *)v57 + 1) = 0;
    *((void *)v57 + 2) = 0;
    *((void *)v57 + 3) = v57 + 64;
    *((void *)v57 + 4) = 0;
    *((void *)v57 + 5) = 0;
    *((void *)v57 + 6) = 0;
    *((void *)v57 + 7) = v57 + 64;
    uint64_t v58 = *(void *)(a1 + 24);
    WORD4(v697) = 257;
    AllOnesValue = sub_1CC2427E8(v58, v4, (uint64_t)&v695, v59);
    __int16 v711 = 257;
    uint64_t v61 = *(void ***)v30;
    uint64_t v52 = ***(void ***)v30 + 1888;
    if (*(void *)v30 && (v61[1] & 0xFE) == 0x12)
    {
      unint64_t v234 = (uint64_t **)(***(void ***)v30 + 1888);
      uint64_t v235 = (llvm::Type *)*((unsigned int *)v61 + 8);
      if (*((_DWORD *)v61 + 2) == 19) {
        llvm::ScalableVectorType::get(v234, v235);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v234, v235);
      }
      uint64_t v52 = v236;
    }
    uint64_t v53 = (const char **)&v708;
    goto LABEL_213;
  }
LABEL_20:
  int v693 = 0;
  unsigned int v680 = v688 - 35;
  v683 = (llvm::ValueAsMetadata *)v13;
  uint64_t v679 = v12;
  if ((v688 - 35) > 1) {
    goto LABEL_112;
  }
  unint64_t v708 = (unint64_t)&v712;
  *(void *)&long long v709 = &v693;
  int v21 = *(unsigned __int8 *)(v4 + 16);
  if (v21 == 5)
  {
    if (*(_WORD *)(v4 + 18) != 28) {
      goto LABEL_112;
    }
    uint64_t v32 = (llvm::Constant **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    unsigned int v33 = *((unsigned __int8 *)*v32 + 16);
    BOOL v34 = *v32 && v33 >= 0x1C;
    if (!v34 || v33 - 59 < 0xFFFFFFEE) {
      goto LABEL_112;
    }
    int v712 = (const char **)*v32;
    if (!sub_1CD68C3D0((void **)&v709, v32[4])) {
      goto LABEL_112;
    }
  }
  else
  {
    if (v21 != 56) {
      goto LABEL_112;
    }
    uint64_t v22 = *(void *)(v4 - 64);
    if (!v22) {
      goto LABEL_112;
    }
    unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
    if (v23 < 0x1C) {
      goto LABEL_112;
    }
    if (v23 - 59 < 0xFFFFFFEE) {
      goto LABEL_112;
    }
    int v712 = *(const char ***)(v4 - 64);
    if ((sub_1CCA79EB8((void **)&v709, *(llvm::Constant **)(v4 - 32)) & 1) == 0) {
      goto LABEL_112;
    }
  }
  if (*((_DWORD *)v693 + 2) > 0x40u) {
    operator new[]();
  }
  unint64_t v24 = *(char **)v693;
  int v25 = (char **)&v695;
  DWORD2(v696) = *((_DWORD *)v693 + 2);
  uint64_t v695 = v5;
  *(void *)&long long v696 = v24;
  int v44 = *((unsigned __int8 *)v712 + 16);
  if (v44 == 41)
  {
    int v45 = (const char *)v695 == *(v712 - 8) && sub_1CCA4852C((llvm::APInt *)&v696, (llvm::Constant *)*(v712 - 4));
  }
  else
  {
    if (v44 == 5) {
      LOBYTE(v25) = *((_WORD *)v712 + 9) == 13
    }
                 && (__int16 v46 = (llvm::Constant **)&v712[-4 * (*((_DWORD *)v712 + 5) & 0x7FFFFFF)],
                     (llvm::Constant *)v695 == *v46)
                 && sub_1CCA15C64((llvm::APInt *)&v696, v46[4]);
    int v45 = (v44 == 5) & v25;
  }
  if (DWORD2(v696) >= 0x41 && (void)v696) {
    MEMORY[0x1D25D9CB0](v696, 0x1000C8000313F17);
  }
  if (v45)
  {
    uint64_t v27 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v18, v17);
    unsigned int v62 = (char *)operator new(0x80uLL);
    unint64_t v3 = v62 + 64;
    *((_DWORD *)v62 + 21) = *((_DWORD *)v62 + 21) & 0x38000000 | 2;
    *(void *)unsigned int v62 = 0;
    *((void *)v62 + 1) = 0;
    *((void *)v62 + 2) = 0;
    *((void *)v62 + 3) = v62 + 64;
    *((void *)v62 + 4) = 0;
    *((void *)v62 + 5) = 0;
    *((void *)v62 + 6) = 0;
    *((void *)v62 + 7) = v62 + 64;
    if (v688 == 36) {
      __int16 v63 = 33;
    }
    else {
      __int16 v63 = 32;
    }
    WORD4(v697) = 257;
    uint64_t v64 = *(llvm::Constant **)v5;
    uint64_t v52 = ***(void ***)v5 + 1888;
    if (*(void *)v5 && (*((_DWORD *)v64 + 2) & 0xFE) == 0x12)
    {
      unsigned int v252 = (uint64_t **)(***(void ***)v5 + 1888);
      uint64_t v253 = (llvm::Type *)*((unsigned int *)v64 + 8);
      if (*((_DWORD *)v64 + 2) == 19) {
        llvm::ScalableVectorType::get(v252, v253);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v252, v253);
      }
      uint64_t v52 = v254;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v63;
LABEL_111:
    uint64_t v56 = v5;
LABEL_155:
    uint64_t v79 = (uint64_t)v27;
LABEL_215:
    llvm::CmpInst::CmpInst(v54, v52, 53, v55, v56, v79, v53, 0, 0);
    return (llvm::UndefValue **)v3;
  }
LABEL_112:
  if (v688 != 37 && v688 != 34) {
    goto LABEL_156;
  }
  unint64_t v708 = (unint64_t)&v712;
  *(void *)&long long v709 = &v693;
  int v65 = *(unsigned __int8 *)(v5 + 16);
  if (v65 == 5)
  {
    if (*(_WORD *)(v5 + 18) != 28) {
      goto LABEL_156;
    }
    unsigned int v70 = (llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    if (!*v70) {
      goto LABEL_156;
    }
    unsigned int v71 = *((unsigned __int8 *)*v70 + 16);
    if (v71 < 0x1C || v71 - 59 < 0xFFFFFFEE) {
      goto LABEL_156;
    }
    int v712 = (const char **)*v70;
    if (!sub_1CD68C3D0((void **)&v709, v70[4])) {
      goto LABEL_156;
    }
  }
  else
  {
    if (v65 != 56) {
      goto LABEL_156;
    }
    uint64_t v66 = *(void *)(v5 - 64);
    if (!v66) {
      goto LABEL_156;
    }
    unsigned int v67 = *(unsigned __int8 *)(v66 + 16);
    if (v67 < 0x1C) {
      goto LABEL_156;
    }
    if (v67 - 59 < 0xFFFFFFEE) {
      goto LABEL_156;
    }
    int v712 = *(const char ***)(v5 - 64);
    if ((sub_1CCA79EB8((void **)&v709, *(llvm::Constant **)(v5 - 32)) & 1) == 0) {
      goto LABEL_156;
    }
  }
  if (*((_DWORD *)v693 + 2) > 0x40u) {
    operator new[]();
  }
  uint64_t v68 = *(char **)v693;
  int v69 = (char **)&v695;
  DWORD2(v696) = *((_DWORD *)v693 + 2);
  uint64_t v695 = v4;
  *(void *)&long long v696 = v68;
  int v73 = *((unsigned __int8 *)v712 + 16);
  if (v73 == 41)
  {
    int v74 = (const char *)v695 == *(v712 - 8) && sub_1CCA4852C((llvm::APInt *)&v696, (llvm::Constant *)*(v712 - 4));
  }
  else
  {
    if (v73 == 5) {
      LOBYTE(v69) = *((_WORD *)v712 + 9) == 13
    }
                 && (int v75 = (llvm::Constant **)&v712[-4 * (*((_DWORD *)v712 + 5) & 0x7FFFFFF)],
                     (llvm::Constant *)v695 == *v75)
                 && sub_1CCA15C64((llvm::APInt *)&v696, v75[4]);
    int v74 = (v73 == 5) & v69;
  }
  if (DWORD2(v696) >= 0x41 && (void)v696) {
    MEMORY[0x1D25D9CB0](v696, 0x1000C8000313F17);
  }
  if (v74)
  {
    uint64_t v27 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v18, v17);
    uint64_t v76 = (char *)operator new(0x80uLL);
    unint64_t v3 = v76 + 64;
    *((_DWORD *)v76 + 21) = *((_DWORD *)v76 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v76 = 0;
    *((void *)v76 + 1) = 0;
    *((void *)v76 + 2) = 0;
    *((void *)v76 + 3) = v76 + 64;
    *((void *)v76 + 4) = 0;
    *((void *)v76 + 5) = 0;
    *((void *)v76 + 6) = 0;
    *((void *)v76 + 7) = v76 + 64;
    if (v688 == 34) {
      __int16 v77 = 33;
    }
    else {
      __int16 v77 = 32;
    }
    WORD4(v697) = 257;
    uint64_t v78 = *(void *)v4;
    uint64_t v52 = ***(void ***)v4 + 1888;
    if (*(void *)v4 && (*(_DWORD *)(v78 + 8) & 0xFE) == 0x12)
    {
      unsigned int v243 = (uint64_t **)(***(void ***)v4 + 1888);
      uint64_t v244 = (llvm::Type *)*(unsigned int *)(v78 + 32);
      if (*(_DWORD *)(v78 + 8) == 19) {
        llvm::ScalableVectorType::get(v243, v244);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v243, v244);
      }
      uint64_t v52 = v245;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v77;
LABEL_154:
    uint64_t v56 = v4;
    goto LABEL_155;
  }
LABEL_156:
  if (!v8) {
    goto LABEL_169;
  }
  uint64_t v80 = 0;
  HIDWORD(v82) = *(unsigned __int8 *)(v8 + 16) - 41;
  LODWORD(v82) = HIDWORD(v82);
  unsigned int v81 = v82 >> 1;
  if (v81 <= 6 && ((1 << v81) & 0x47) != 0)
  {
    if ((v688 & 0x3E) == 0x20)
    {
      uint64_t v80 = 1;
      if (!v11) {
        goto LABEL_182;
      }
LABEL_170:
      BOOL v84 = 0;
      HIDWORD(v86) = *(unsigned __int8 *)(v11 + 16) - 41;
      LODWORD(v86) = HIDWORD(v86);
      unsigned int v85 = v86 >> 1;
      if (v85 <= 6 && ((1 << v85) & 0x47) != 0)
      {
        if ((v688 & 0x3E) == 0x20)
        {
          BOOL v84 = 1;
          if (!v8) {
            goto LABEL_185;
          }
          goto LABEL_183;
        }
        if ((v688 - 34) >= 4)
        {
          if ((v688 - 38) > 3) {
            goto LABEL_182;
          }
          char v87 = 4;
        }
        else
        {
          char v87 = 2;
        }
        BOOL v84 = (*(unsigned char *)(v11 + 17) & v87) != 0;
      }
      if (!v8) {
        goto LABEL_185;
      }
      goto LABEL_183;
    }
    if ((v688 - 34) < 4)
    {
      char v83 = 2;
LABEL_166:
      uint64_t v80 = (*(unsigned char *)(v8 + 17) & v83) != 0;
      goto LABEL_167;
    }
    if ((v688 - 38) <= 3)
    {
      char v83 = 4;
      goto LABEL_166;
    }
LABEL_169:
    uint64_t v80 = 0;
    if (!v11) {
      goto LABEL_182;
    }
    goto LABEL_170;
  }
LABEL_167:
  if (v11) {
    goto LABEL_170;
  }
LABEL_182:
  BOOL v84 = 0;
  if (!v8)
  {
LABEL_185:
    uint64_t v88 = 0;
    int v30 = 0;
    goto LABEL_186;
  }
LABEL_183:
  if (*(unsigned char *)(v8 + 16) != 41) {
    goto LABEL_185;
  }
  uint64_t v88 = *(unsigned __int8 **)(v8 - 64);
  int v30 = *(unsigned __int8 **)(v8 - 32);
LABEL_186:
  uint64_t v678 = v8;
  if (v11 && *(unsigned char *)(v11 + 16) == 41)
  {
    BOOL v89 = *(unsigned __int8 **)(v11 - 64);
    uint64_t v90 = *(unsigned __int8 **)(v11 - 32);
  }
  else
  {
    BOOL v89 = 0;
    uint64_t v90 = 0;
  }
  BOOL v91 = v30 == (unsigned __int8 *)v5 || v88 == (unsigned __int8 *)v5;
  int v92 = v80 ^ 1;
  if (v91 && (v92 & 1) == 0)
  {
    uint64_t v93 = (char *)operator new(0x80uLL);
    unint64_t v3 = v93 + 64;
    *((_DWORD *)v93 + 21) = *((_DWORD *)v93 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v93 = 0;
    *((void *)v93 + 1) = 0;
    *((void *)v93 + 2) = 0;
    *((void *)v93 + 3) = v93 + 64;
    *((void *)v93 + 4) = 0;
    *((void *)v93 + 5) = 0;
    *((void *)v93 + 6) = 0;
    *((void *)v93 + 7) = v93 + 64;
    if (v88 != (unsigned __int8 *)v5) {
      int v30 = v88;
    }
    AllOnesValue = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v94, v95);
LABEL_199:
    WORD4(v697) = 257;
LABEL_200:
    uint64_t v96 = *(_DWORD **)v30;
    goto LABEL_210;
  }
  BOOL v97 = v90 == (unsigned __int8 *)v4 || v89 == (unsigned __int8 *)v4;
  int v98 = !v84;
  if (v97 && (v98 & 1) == 0)
  {
    AllOnesValue = v89;
    int v99 = (char *)operator new(0x80uLL);
    unint64_t v3 = v99 + 64;
    *((_DWORD *)v99 + 21) = *((_DWORD *)v99 + 21) & 0x38000000 | 2;
    *(void *)int v99 = 0;
    *((void *)v99 + 1) = 0;
    *((void *)v99 + 2) = 0;
    *((void *)v99 + 3) = v99 + 64;
    *((void *)v99 + 4) = 0;
    *((void *)v99 + 5) = 0;
    *((void *)v99 + 6) = 0;
    *((void *)v99 + 7) = v99 + 64;
    uint64_t v102 = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v100, v101);
    int v30 = (unsigned __int8 *)v102;
    if (AllOnesValue == (void *)v4) {
      AllOnesValue = v90;
    }
    WORD4(v697) = 257;
    uint64_t v96 = *(_DWORD **)v102;
LABEL_210:
    uint64_t v52 = **(void **)v96 + 1888;
    if (v96 && (v96[2] & 0xFE) == 0x12)
    {
      uint64_t v176 = (uint64_t **)(**(void **)v96 + 1888);
      BOOL v177 = (llvm::Type *)v96[8];
      if (v96[2] == 19) {
        llvm::ScalableVectorType::get(v176, v177);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v176, v177);
      }
      uint64_t v52 = v178;
    }
    uint64_t v53 = (const char **)&v695;
LABEL_213:
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v688;
LABEL_214:
    uint64_t v56 = (uint64_t)v30;
    uint64_t v79 = (uint64_t)AllOnesValue;
    goto LABEL_215;
  }
  if (v88) {
    BOOL v104 = v89 == 0;
  }
  else {
    BOOL v104 = 1;
  }
  int v105 = !v104;
  int v676 = v105;
  if (!v104)
  {
    int v107 = v88 == v89 || v88 == v90;
    int v108 = (v30 != v89) & ~v107;
    if (v30 == v90) {
      int v108 = 0;
    }
    if (((v108 | v92 | v98) & 1) == 0)
    {
      if (v30 == v89) {
        uint64_t v128 = v90;
      }
      else {
        uint64_t v128 = v89;
      }
      if (!v107) {
        int v30 = v88;
      }
      uint64_t v129 = v89;
      uint64_t v130 = (char *)operator new(0x80uLL);
      unint64_t v3 = v130 + 64;
      *((_DWORD *)v130 + 21) = *((_DWORD *)v130 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v130 = 0;
      *((void *)v130 + 1) = 0;
      *((void *)v130 + 2) = 0;
      *((void *)v130 + 3) = v130 + 64;
      *((void *)v130 + 4) = 0;
      *((void *)v130 + 5) = 0;
      *((void *)v130 + 6) = 0;
      *((void *)v130 + 7) = v130 + 64;
      if (v88 == v90) {
        int v131 = v129;
      }
      else {
        int v131 = v128;
      }
      if (v88 == v129) {
        AllOnesValue = v90;
      }
      else {
        AllOnesValue = v131;
      }
      goto LABEL_199;
    }
  }
  uint64_t v672 = a1;
  uint64_t v677 = v88;
  if (v88) {
    int v109 = v80;
  }
  else {
    int v109 = 0;
  }
  if (v688 == 40) {
    int v110 = v109;
  }
  else {
    int v110 = 0;
  }
  int v674 = !v84;
  int v675 = v80;
  if (v110 == 1)
  {
    uint64_t v80 = v80 ^ 1;
    int v111 = v109;
    unint64_t v112 = v11;
    int v113 = v89;
    if (sub_1CBF687D0((uint64_t)&v695, (llvm::Constant *)v30))
    {
      BOOL v114 = (char *)operator new(0x80uLL);
      unint64_t v3 = v114 + 64;
      *((_DWORD *)v114 + 21) = *((_DWORD *)v114 + 21) & 0x38000000 | 2;
      *(void *)BOOL v114 = 0;
      *((void *)v114 + 1) = 0;
      *((void *)v114 + 2) = 0;
      *((void *)v114 + 3) = v114 + 64;
      *((void *)v114 + 4) = 0;
      *((void *)v114 + 5) = 0;
      *((void *)v114 + 6) = 0;
      *((void *)v114 + 7) = v114 + 64;
      WORD4(v697) = 257;
      uint64_t v115 = *(void ***)v677;
      uint64_t v52 = ***(void ***)v677 + 1888;
      if (*(void *)v677 && (v115[1] & 0xFE) == 0x12)
      {
        BOOL v237 = (uint64_t **)(***(void ***)v677 + 1888);
        uint64_t v238 = (llvm::Type *)*((unsigned int *)v115 + 8);
        if (*((_DWORD *)v115 + 2) == 19) {
          llvm::ScalableVectorType::get(v237, v238);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v237, v238);
        }
        uint64_t v52 = v239;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 41;
      uint64_t v56 = (uint64_t)v677;
      goto LABEL_425;
    }
    goto LABEL_252;
  }
  int v116 = v688 == 39;
  if (v688 == 39) {
    int v117 = v109;
  }
  else {
    int v117 = 0;
  }
  if (v117 == 1)
  {
    uint64_t v80 = v80 ^ 1;
    int v111 = v109;
    unint64_t v112 = v11;
    int v113 = v89;
    if (sub_1CBF687D0((uint64_t)&v695, (llvm::Constant *)v30))
    {
      int v118 = (char *)operator new(0x80uLL);
      unint64_t v3 = v118 + 64;
      *((_DWORD *)v118 + 21) = *((_DWORD *)v118 + 21) & 0x38000000 | 2;
      *(void *)int v118 = 0;
      *((void *)v118 + 1) = 0;
      *((void *)v118 + 2) = 0;
      *((void *)v118 + 3) = v118 + 64;
      *((void *)v118 + 4) = 0;
      *((void *)v118 + 5) = 0;
      *((void *)v118 + 6) = 0;
      *((void *)v118 + 7) = v118 + 64;
      WORD4(v697) = 257;
      uint64_t v56 = (uint64_t)v677;
      uint64_t v119 = *(void *)v677;
      uint64_t v52 = ***(void ***)v677 + 1888;
      if (*(void *)v677 && (*(_DWORD *)(v119 + 8) & 0xFE) == 0x12)
      {
        uint64_t v249 = (uint64_t **)(***(void ***)v677 + 1888);
        uint64_t v250 = (llvm::Type *)*(unsigned int *)(v119 + 32);
        if (*(_DWORD *)(v119 + 8) == 19) {
          llvm::ScalableVectorType::get(v249, v250);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v249, v250);
        }
        uint64_t v52 = v251;
        uint64_t v56 = (uint64_t)v677;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 38;
      goto LABEL_425;
    }
LABEL_252:
    BOOL v89 = v113;
    BOOL v120 = 0;
    BOOL v121 = 0;
    int v116 = v110 ^ 1;
    unint64_t v11 = v112;
    int v109 = v111;
    int v92 = v80;
    goto LABEL_253;
  }
  BOOL v121 = v688 == 41;
  if (v688 == 41) {
    int v134 = v109;
  }
  else {
    int v134 = 0;
  }
  if (v134 == 1)
  {
    uint64_t v135 = v89;
    if (sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v30))
    {
      __int16 v136 = (char *)operator new(0x80uLL);
      unint64_t v3 = v136 + 64;
      *((_DWORD *)v136 + 21) = *((_DWORD *)v136 + 21) & 0x38000000 | 2;
      *(void *)__int16 v136 = 0;
      *((void *)v136 + 1) = 0;
      *((void *)v136 + 2) = 0;
      *((void *)v136 + 3) = v136 + 64;
      *((void *)v136 + 4) = 0;
      *((void *)v136 + 5) = 0;
      *((void *)v136 + 6) = 0;
      *((void *)v136 + 7) = v136 + 64;
      WORD4(v697) = 257;
      uint64_t v56 = (uint64_t)v677;
      uint64_t v137 = *(void *)v677;
      uint64_t v52 = ***(void ***)v677 + 1888;
      if (*(void *)v677 && (*(_DWORD *)(v137 + 8) & 0xFE) == 0x12)
      {
        int v277 = (uint64_t **)(***(void ***)v677 + 1888);
        int v278 = (llvm::Type *)*(unsigned int *)(v137 + 32);
        if (*(_DWORD *)(v137 + 8) == 19) {
          llvm::ScalableVectorType::get(v277, v278);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v277, v278);
        }
        uint64_t v52 = v279;
        uint64_t v56 = (uint64_t)v677;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 40;
      goto LABEL_425;
    }
    BOOL v120 = 0;
    BOOL v121 = 1;
    BOOL v89 = v135;
    int v116 = v688 == 39;
  }
  else
  {
    BOOL v120 = v688 == 38;
    if (v688 == 38) {
      int v141 = v109;
    }
    else {
      int v141 = 0;
    }
    if (v141 == 1)
    {
      unint64_t v142 = v89;
      if (sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v30))
      {
        uint64_t v143 = (char *)operator new(0x80uLL);
        unint64_t v3 = v143 + 64;
        *((_DWORD *)v143 + 21) = *((_DWORD *)v143 + 21) & 0x38000000 | 2;
        *(void *)uint64_t v143 = 0;
        *((void *)v143 + 1) = 0;
        *((void *)v143 + 2) = 0;
        *((void *)v143 + 3) = v143 + 64;
        *((void *)v143 + 4) = 0;
        *((void *)v143 + 5) = 0;
        *((void *)v143 + 6) = 0;
        *((void *)v143 + 7) = v143 + 64;
        WORD4(v697) = 257;
        uint64_t v56 = (uint64_t)v677;
        uint64_t v144 = *(void *)v677;
        uint64_t v52 = ***(void ***)v677 + 1888;
        if (*(void *)v677 && (*(_DWORD *)(v144 + 8) & 0xFE) == 0x12)
        {
          char v299 = (uint64_t **)(***(void ***)v677 + 1888);
          uint64_t v300 = (llvm::Type *)*(unsigned int *)(v144 + 32);
          if (*(_DWORD *)(v144 + 8) == 19) {
            llvm::ScalableVectorType::get(v299, v300);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v299, v300);
          }
          uint64_t v52 = v301;
          uint64_t v56 = (uint64_t)v677;
        }
        uint64_t v53 = (const char **)&v695;
        __int16 v54 = (llvm::Value *)v3;
        __int16 v55 = 39;
        goto LABEL_425;
      }
      BOOL v120 = 1;
      BOOL v89 = v142;
      int v116 = v688 == 39;
      BOOL v121 = v688 == 41;
    }
  }
LABEL_253:
  int v673 = v116;
  uint64_t v671 = v89;
  if (v89) {
    BOOL v122 = v84;
  }
  else {
    BOOL v122 = 0;
  }
  if (v122 && v120)
  {
    uint64_t v80 = v121;
    int v123 = sub_1CBF687D0((uint64_t)&v695, (llvm::Constant *)v90);
    LODWORD(v121) = v80;
    if (v123)
    {
      int v124 = (char *)operator new(0x80uLL);
      unint64_t v3 = v124 + 64;
      *((_DWORD *)v124 + 21) = *((_DWORD *)v124 + 21) & 0x38000000 | 2;
      *(void *)int v124 = 0;
      *((void *)v124 + 1) = 0;
      *((void *)v124 + 2) = 0;
      *((void *)v124 + 3) = v124 + 64;
      *((void *)v124 + 4) = 0;
      *((void *)v124 + 5) = 0;
      *((void *)v124 + 6) = 0;
      *((void *)v124 + 7) = v124 + 64;
      WORD4(v697) = 257;
      int v125 = *(llvm::Constant **)v4;
      uint64_t v52 = ***(void ***)v4 + 1888;
      if (*(void *)v4 && (*((_DWORD *)v125 + 2) & 0xFE) == 0x12)
      {
        int v246 = (uint64_t **)(***(void ***)v4 + 1888);
        uint64_t v247 = (llvm::Type *)*((unsigned int *)v125 + 8);
        if (*((_DWORD *)v125 + 2) == 19) {
          llvm::ScalableVectorType::get(v246, v247);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v246, v247);
        }
        uint64_t v52 = v248;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 39;
LABEL_299:
      uint64_t v56 = v4;
      uint64_t v79 = (uint64_t)v671;
      goto LABEL_215;
    }
  }
  if (v122 && v121 && sub_1CBF687D0((uint64_t)&v695, (llvm::Constant *)v90))
  {
    unint64_t v126 = (char *)operator new(0x80uLL);
    unint64_t v3 = v126 + 64;
    *((_DWORD *)v126 + 21) = *((_DWORD *)v126 + 21) & 0x38000000 | 2;
    *(void *)unint64_t v126 = 0;
    *((void *)v126 + 1) = 0;
    *((void *)v126 + 2) = 0;
    *((void *)v126 + 3) = v126 + 64;
    *((void *)v126 + 4) = 0;
    *((void *)v126 + 5) = 0;
    *((void *)v126 + 6) = 0;
    *((void *)v126 + 7) = v126 + 64;
    WORD4(v697) = 257;
    uint64_t v127 = *(llvm::Constant **)v4;
    uint64_t v52 = ***(void ***)v4 + 1888;
    if (*(void *)v4 && (*((_DWORD *)v127 + 2) & 0xFE) == 0x12)
    {
      unsigned int v256 = (uint64_t **)(***(void ***)v4 + 1888);
      uint64_t v257 = (llvm::Type *)*((unsigned int *)v127 + 8);
      if (*((_DWORD *)v127 + 2) == 19) {
        llvm::ScalableVectorType::get(v256, v257);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v256, v257);
      }
      uint64_t v52 = v258;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = 40;
    goto LABEL_299;
  }
  if ((v122 & v673) == 1 && sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v90))
  {
    uint64_t v132 = (char *)operator new(0x80uLL);
    unint64_t v3 = v132 + 64;
    *((_DWORD *)v132 + 21) = *((_DWORD *)v132 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v132 = 0;
    *((void *)v132 + 1) = 0;
    *((void *)v132 + 2) = 0;
    *((void *)v132 + 3) = v132 + 64;
    *((void *)v132 + 4) = 0;
    *((void *)v132 + 5) = 0;
    *((void *)v132 + 6) = 0;
    *((void *)v132 + 7) = v132 + 64;
    WORD4(v697) = 257;
    BOOL v133 = *(llvm::Constant **)v4;
    uint64_t v52 = ***(void ***)v4 + 1888;
    if (*(void *)v4 && (*((_DWORD *)v133 + 2) & 0xFE) == 0x12)
    {
      unint64_t v259 = (uint64_t **)(***(void ***)v4 + 1888);
      int v260 = (llvm::Type *)*((unsigned int *)v133 + 8);
      if (*((_DWORD *)v133 + 2) == 19) {
        llvm::ScalableVectorType::get(v259, v260);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v259, v260);
      }
      uint64_t v52 = v261;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = 38;
    goto LABEL_299;
  }
  if (v688 == 40 && v122)
  {
    if (sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v90))
    {
      uint64_t v139 = (char *)operator new(0x80uLL);
      unint64_t v3 = v139 + 64;
      *((_DWORD *)v139 + 21) = *((_DWORD *)v139 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v139 = 0;
      *((void *)v139 + 1) = 0;
      *((void *)v139 + 2) = 0;
      *((void *)v139 + 3) = v139 + 64;
      *((void *)v139 + 4) = 0;
      *((void *)v139 + 5) = 0;
      *((void *)v139 + 6) = 0;
      *((void *)v139 + 7) = v139 + 64;
      WORD4(v697) = 257;
      int v140 = *(llvm::Constant **)v4;
      uint64_t v52 = ***(void ***)v4 + 1888;
      if (*(void *)v4 && (*((_DWORD *)v140 + 2) & 0xFE) == 0x12)
      {
        uint64_t v283 = (uint64_t **)(***(void ***)v4 + 1888);
        uint64_t v284 = (llvm::Type *)*((unsigned int *)v140 + 8);
        if (*((_DWORD *)v140 + 2) == 19) {
          llvm::ScalableVectorType::get(v283, v284);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v283, v284);
        }
        uint64_t v52 = v285;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 41;
      goto LABEL_299;
    }
    goto LABEL_316;
  }
  if (v688 == 37) {
    int v145 = v109;
  }
  else {
    int v145 = 0;
  }
  if (v145 == 1)
  {
    if (sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v30))
    {
      uint64_t v146 = (char *)operator new(0x80uLL);
      unint64_t v3 = v146 + 64;
      *((_DWORD *)v146 + 21) = *((_DWORD *)v146 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v146 = 0;
      *((void *)v146 + 1) = 0;
      *((void *)v146 + 2) = 0;
      *((void *)v146 + 3) = v146 + 64;
      *((void *)v146 + 4) = 0;
      *((void *)v146 + 5) = 0;
      *((void *)v146 + 6) = 0;
      *((void *)v146 + 7) = v146 + 64;
      WORD4(v697) = 257;
      uint64_t v56 = (uint64_t)v677;
      uint64_t v147 = *(void *)v677;
      uint64_t v52 = ***(void ***)v677 + 1888;
      if (*(void *)v677 && (*(_DWORD *)(v147 + 8) & 0xFE) == 0x12)
      {
        unint64_t v305 = (uint64_t **)(***(void ***)v677 + 1888);
        unsigned int v306 = (llvm::Type *)*(unsigned int *)(v147 + 32);
        if (*(_DWORD *)(v147 + 8) == 19) {
          llvm::ScalableVectorType::get(v305, v306);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v305, v306);
        }
        uint64_t v52 = v307;
        uint64_t v56 = (uint64_t)v677;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 36;
      goto LABEL_425;
    }
LABEL_316:
    unsigned int v148 = v683;
    goto LABEL_317;
  }
  if (v688 == 34) {
    int v170 = v109;
  }
  else {
    int v170 = 0;
  }
  if (v170 == 1)
  {
    unsigned int v148 = v683;
    if (sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v30))
    {
      int v171 = (char *)operator new(0x80uLL);
      unint64_t v3 = v171 + 64;
      *((_DWORD *)v171 + 21) = *((_DWORD *)v171 + 21) & 0x38000000 | 2;
      *(void *)int v171 = 0;
      *((void *)v171 + 1) = 0;
      *((void *)v171 + 2) = 0;
      *((void *)v171 + 3) = v171 + 64;
      *((void *)v171 + 4) = 0;
      *((void *)v171 + 5) = 0;
      *((void *)v171 + 6) = 0;
      *((void *)v171 + 7) = v171 + 64;
      WORD4(v697) = 257;
      uint64_t v56 = (uint64_t)v677;
      uint64_t v172 = *(void *)v677;
      uint64_t v52 = ***(void ***)v677 + 1888;
      if (*(void *)v677 && (*(_DWORD *)(v172 + 8) & 0xFE) == 0x12)
      {
        int v313 = (uint64_t **)(***(void ***)v677 + 1888);
        unsigned int v314 = (llvm::Type *)*(unsigned int *)(v172 + 32);
        if (*(_DWORD *)(v172 + 8) == 19) {
          llvm::ScalableVectorType::get(v313, v314);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v313, v314);
        }
        uint64_t v52 = v315;
        uint64_t v56 = (uint64_t)v677;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 35;
      goto LABEL_425;
    }
    goto LABEL_317;
  }
  BOOL v173 = v688 == 35 && v122;
  unsigned int v148 = v683;
  if (v173)
  {
    if (sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v90))
    {
      uint64_t v174 = (char *)operator new(0x80uLL);
      unint64_t v3 = v174 + 64;
      *((_DWORD *)v174 + 21) = *((_DWORD *)v174 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v174 = 0;
      *((void *)v174 + 1) = 0;
      *((void *)v174 + 2) = 0;
      *((void *)v174 + 3) = v174 + 64;
      *((void *)v174 + 4) = 0;
      *((void *)v174 + 5) = 0;
      *((void *)v174 + 6) = 0;
      *((void *)v174 + 7) = v174 + 64;
      WORD4(v697) = 257;
      uint64_t v175 = *(llvm::Constant **)v4;
      uint64_t v52 = ***(void ***)v4 + 1888;
      if (*(void *)v4 && (*((_DWORD *)v175 + 2) & 0xFE) == 0x12)
      {
        unint64_t v411 = (uint64_t **)(***(void ***)v4 + 1888);
        unsigned int v412 = (llvm::Type *)*((unsigned int *)v175 + 8);
        if (*((_DWORD *)v175 + 2) == 19) {
          llvm::ScalableVectorType::get(v411, v412);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v411, v412);
        }
        uint64_t v52 = v413;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = 34;
      goto LABEL_299;
    }
    goto LABEL_317;
  }
  if (v688 != 36 || !v122)
  {
LABEL_317:
    int v149 = v675;
    goto LABEL_318;
  }
  int v180 = sub_1CBF5250C((uint64_t)&v695, (llvm::Constant *)v90);
  int v149 = v675;
  if (v180)
  {
    unint64_t v181 = (char *)operator new(0x80uLL);
    unint64_t v3 = v181 + 64;
    *((_DWORD *)v181 + 21) = *((_DWORD *)v181 + 21) & 0x38000000 | 2;
    *(void *)unint64_t v181 = 0;
    *((void *)v181 + 1) = 0;
    *((void *)v181 + 2) = 0;
    *((void *)v181 + 3) = v181 + 64;
    *((void *)v181 + 4) = 0;
    *((void *)v181 + 5) = 0;
    *((void *)v181 + 6) = 0;
    *((void *)v181 + 7) = v181 + 64;
    WORD4(v697) = 257;
    int v182 = *(llvm::Constant **)v4;
    uint64_t v52 = ***(void ***)v4 + 1888;
    if (*(void *)v4 && (*((_DWORD *)v182 + 2) & 0xFE) == 0x12)
    {
      v422 = (uint64_t **)(***(void ***)v4 + 1888);
      uint64_t v423 = (llvm::Type *)*((unsigned int *)v182 + 8);
      if (*((_DWORD *)v182 + 2) == 19) {
        llvm::ScalableVectorType::get(v422, v423);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v422, v423);
      }
      uint64_t v52 = v424;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = 37;
    goto LABEL_299;
  }
LABEL_318:
  if ((v676 & v149 & v84) == 1)
  {
    uint64_t v150 = *(void *)(v678 + 8);
    char v151 = !v84;
    if ((v150 && !*(void *)(v150 + 8) || (uint64_t v152 = *(void *)(v11 + 8)) != 0 && !*(void *)(v152 + 8))
      && (*((_WORD *)v148 + 9) & 0x3Eu) - 34 >= 4)
    {
      unsigned int v706 = 0;
      v707 = 0;
      uint64_t v695 = (uint64_t)&v707;
      *(void *)&long long v696 = 1;
      if (sub_1CBF528D8((uint64_t)&v695, v30)
        && (unint64_t v708 = (unint64_t)&v706, *(void *)&v709 = 1, sub_1CBF528D8((uint64_t)&v708, v90)))
      {
        unsigned int v153 = *((_DWORD *)v707 + 2);
        unsigned int v154 = v153 - 1;
        int v155 = (unint64_t *)v707;
        if (v153 >= 0x41) {
          int v155 = &(*v707)[v154 >> 6];
        }
        uint64_t v156 = *v155 & (1 << v154);
        uint64_t v157 = v706;
        unsigned int v158 = *((_DWORD *)v706 + 2);
        unsigned int v159 = v158 - 1;
        int v149 = v675;
        if (v158 >= 0x41) {
          uint64_t v157 = (const llvm::APInt *)(*(void *)v706 + 8 * (v159 >> 6));
        }
        if ((((v156 != 0) ^ (*(void *)v157 >> v159)) & 1) == 0)
        {
          sub_1CBF71A98((const llvm::APInt *)v707, (llvm::APInt *)&v708);
          sub_1CBF71A98(v706, (llvm::APInt *)&v712);
          if (v709 > 0x40)
          {
            unint64_t v473 = (((unint64_t)v709 + 63) >> 3) & 0x3FFFFFF8;
            while (v473)
            {
              unint64_t v474 = *(void *)(v708 - 8 + v473);
              unint64_t v475 = *(unint64_t *)((char *)v712 + v473 - 8);
              v473 -= 8;
              if (v474 != v475)
              {
                if (v474 <= v475) {
                  goto LABEL_333;
                }
                break;
              }
            }
          }
          else if (v708 < (unint64_t)v712)
          {
LABEL_333:
            unsigned int v161 = *((_DWORD *)v706 + 2);
            if (v161 >= 0x41) {
              operator new[]();
            }
            unint64_t v162 = *(void *)v706;
            if (v161) {
              unint64_t v163 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
            }
            else {
              unint64_t v163 = 0;
            }
            size_t v164 = (const llvm::APInt *)(v163 & (*(void *)v706 - (void)*v707));
            unsigned int v694 = *((_DWORD *)v706 + 2);
            int v693 = v164;
            unsigned int v165 = *(unsigned __int8 *)(v11 + 17);
            if ((v165 & 2) != 0)
            {
              BOOL v34 = (unint64_t)v164 >= v162;
              int v166 = (unint64_t)v164 > v162;
              if (!v34) {
                int v166 = -1;
              }
              BOOL v255 = v166 < 1;
            }
            else
            {
              BOOL v255 = 0;
            }
            uint64_t v286 = (v165 >> 2) & 1;
            IntegerValue = llvm::Constant::getIntegerValue(*(llvm::Constant ****)v678, (llvm::Type *)&v693, v160);
            uint64_t v288 = *(void *)(v672 + 24);
            WORD4(v697) = 257;
            uint64_t v289 = sub_1CB844A3C(v288, v671, (uint64_t)IntegerValue, (uint64_t)&v695, v255, v286);
            uint64_t v290 = (char *)operator new(0x80uLL);
            unint64_t v3 = v290 + 64;
            *((_DWORD *)v290 + 21) = *((_DWORD *)v290 + 21) & 0x38000000 | 2;
            *(void *)uint64_t v290 = 0;
            *((void *)v290 + 1) = 0;
            *((void *)v290 + 2) = 0;
            *((void *)v290 + 3) = v290 + 64;
            *((void *)v290 + 4) = 0;
            *((void *)v290 + 5) = 0;
            *((void *)v290 + 6) = 0;
            *((void *)v290 + 7) = v290 + 64;
            WORD4(v697) = 257;
            uint64_t v291 = *(void *)v677;
            uint64_t v292 = ***(void ***)v677 + 1888;
            if (*(void *)v677 && (*(_DWORD *)(v291 + 8) & 0xFE) == 0x12)
            {
              v470 = (uint64_t **)(***(void ***)v677 + 1888);
              uint64_t v471 = (llvm::Type *)*(unsigned int *)(v291 + 32);
              if (*(_DWORD *)(v291 + 8) == 19) {
                llvm::ScalableVectorType::get(v470, v471);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v470, v471);
              }
              uint64_t v292 = v472;
            }
            llvm::CmpInst::CmpInst((llvm::Value *)v3, v292, 53, v688, (uint64_t)v677, (uint64_t)v289, (const char **)&v695, 0, 0);
LABEL_871:
            if (v694 >= 0x41 && v693) {
              MEMORY[0x1D25D9CB0](v693, 0x1000C8000313F17);
            }
            if (v713 >= 0x41 && v712) {
              MEMORY[0x1D25D9CB0](v712, 0x1000C8000313F17);
            }
            if (v709 >= 0x41 && v708) {
              MEMORY[0x1D25D9CB0](v708, 0x1000C8000313F17);
            }
            return (llvm::UndefValue **)v3;
          }
          unsigned int v476 = *((_DWORD *)v707 + 2);
          if (v476 >= 0x41) {
            operator new[]();
          }
          unint64_t v477 = (unint64_t)*v707;
          if (v476) {
            unint64_t v478 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v476;
          }
          else {
            unint64_t v478 = 0;
          }
          unint64_t v479 = v478 & ((unint64_t)*v707 - *(void *)v706);
          unsigned int v694 = *((_DWORD *)v707 + 2);
          int v693 = (const llvm::APInt *)v479;
          unsigned int v480 = *(unsigned __int8 *)(v678 + 17);
          if ((v480 & 2) != 0)
          {
            BOOL v34 = v479 >= v477;
            int v481 = v479 > v477;
            if (!v34) {
              int v481 = -1;
            }
            BOOL v482 = v481 < 1;
          }
          else
          {
            BOOL v482 = 0;
          }
          uint64_t v483 = (v480 >> 2) & 1;
          char v484 = llvm::Constant::getIntegerValue(*(llvm::Constant ****)v678, (llvm::Type *)&v693, v160);
          uint64_t v485 = *(void *)(v672 + 24);
          WORD4(v697) = 257;
          uint64_t v486 = sub_1CB844A3C(v485, v677, (uint64_t)v484, (uint64_t)&v695, v482, v483);
          uint64_t v487 = (char *)operator new(0x80uLL);
          unint64_t v3 = v487 + 64;
          *((_DWORD *)v487 + 21) = *((_DWORD *)v487 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v487 = 0;
          *((void *)v487 + 1) = 0;
          *((void *)v487 + 2) = 0;
          *((void *)v487 + 3) = v487 + 64;
          *((void *)v487 + 4) = 0;
          *((void *)v487 + 5) = 0;
          *((void *)v487 + 6) = 0;
          *((void *)v487 + 7) = v487 + 64;
          WORD4(v697) = 257;
          uint64_t v488 = ***(void ***)v486;
          uint64_t v489 = v488 + 1888;
          if (*(void *)v486) {
            BOOL v490 = (*(_DWORD *)(*(void *)v486 + 8) & 0xFE) == 18;
          }
          else {
            BOOL v490 = 0;
          }
          if (v490)
          {
            int64_t v491 = (uint64_t **)(v488 + 1888);
            unint64_t v492 = (llvm::Type *)*(unsigned int *)(*(void *)v486 + 32);
            if (*(_DWORD *)(*(void *)v486 + 8) == 19) {
              llvm::ScalableVectorType::get(v491, v492);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v491, v492);
            }
            uint64_t v489 = v493;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v3, v489, 53, v688, (uint64_t)v486, (uint64_t)v671, (const char **)&v695, 0, 0);
          goto LABEL_871;
        }
      }
      else
      {
        int v149 = v675;
      }
      unsigned int v183 = v30[16];
      if (v183 != 5)
      {
        if (v30)
        {
          if (v183 <= 0x14)
          {
            if (v90)
            {
              unsigned int v184 = v90[16];
              if (v184 <= 0x14 && v184 != 5 && (v688 & 0x3E) == 0x20)
              {
                uint64_t Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v90, (llvm::Constant *)v30, 0, 0);
                uint64_t v186 = *(void *)(v672 + 24);
                WORD4(v697) = 257;
                uint64_t v27 = sub_1CB844A3C(v186, v671, (uint64_t)Sub, (uint64_t)&v695, 0, 0);
                uint64_t v187 = (char *)operator new(0x80uLL);
                unint64_t v3 = v187 + 64;
                *((_DWORD *)v187 + 21) = *((_DWORD *)v187 + 21) & 0x38000000 | 2;
                *(void *)uint64_t v187 = 0;
                *((void *)v187 + 1) = 0;
                *((void *)v187 + 2) = 0;
                *((void *)v187 + 3) = v187 + 64;
                *((void *)v187 + 4) = 0;
                *((void *)v187 + 5) = 0;
                *((void *)v187 + 6) = 0;
                *((void *)v187 + 7) = v187 + 64;
                WORD4(v697) = 257;
                uint64_t v188 = *(void *)v677;
                uint64_t v52 = ***(void ***)v677 + 1888;
                if (*(void *)v677 && (*(_DWORD *)(v188 + 8) & 0xFE) == 0x12)
                {
                  unsigned int v457 = (uint64_t **)(***(void ***)v677 + 1888);
                  BOOL v458 = (llvm::Type *)*(unsigned int *)(v188 + 32);
                  if (*(_DWORD *)(v188 + 8) == 19) {
                    llvm::ScalableVectorType::get(v457, v458);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v457, v458);
                  }
                  uint64_t v52 = v459;
                }
                uint64_t v53 = (const char **)&v695;
                __int16 v54 = (llvm::Value *)v3;
                __int16 v55 = v688;
                uint64_t v56 = (uint64_t)v677;
                goto LABEL_155;
              }
            }
          }
        }
      }
      char v151 = !v84;
    }
  }
  else
  {
    char v151 = !v84;
    if (!v678)
    {
      uint64_t v167 = 0;
      unint64_t v168 = 0;
      uint64_t v169 = 0;
      goto LABEL_387;
    }
  }
  uint64_t v169 = v678;
  if (*(unsigned char *)(v678 + 16) == 43)
  {
    uint64_t v167 = *(void **)(v678 - 64);
    unint64_t v168 = *(void *)(v678 - 32);
  }
  else
  {
    uint64_t v167 = 0;
    unint64_t v168 = 0;
  }
LABEL_387:
  if (v11 && *(unsigned char *)(v11 + 16) == 43)
  {
    uint64_t v189 = *(void *)(v11 - 64);
    uint64_t v190 = *(void *)(v11 - 32);
  }
  else
  {
    uint64_t v189 = 0;
    uint64_t v190 = 0;
  }
  if (v167 == (void *)v5) {
    int v191 = v149;
  }
  else {
    int v191 = 0;
  }
  if (v191 == 1)
  {
    int64_t v192 = (char *)operator new(0x80uLL);
    unint64_t v3 = v192 + 64;
    *((_DWORD *)v192 + 21) = *((_DWORD *)v192 + 21) & 0x38000000 | 2;
    *(void *)int64_t v192 = 0;
    *((void *)v192 + 1) = 0;
    *((void *)v192 + 2) = 0;
    *((void *)v192 + 3) = v192 + 64;
    *((void *)v192 + 4) = 0;
    *((void *)v192 + 5) = 0;
    *((void *)v192 + 6) = 0;
    *((void *)v192 + 7) = v192 + 64;
    uint64_t v195 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v193, v194);
    WORD4(v697) = 257;
    int v196 = *(void ***)v195;
    uint64_t v52 = ***(void ***)v195 + 1888;
    if (*(void *)v195 && (v196[1] & 0xFE) == 0x12)
    {
      size_t v280 = (uint64_t **)(***(void ***)v195 + 1888);
      int64_t v281 = (llvm::Type *)*((unsigned int *)v196 + 8);
      if (*((_DWORD *)v196 + 2) == 19) {
        llvm::ScalableVectorType::get(v280, v281);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v280, v281);
      }
      uint64_t v52 = v282;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v688;
    uint64_t v56 = (uint64_t)v195;
LABEL_398:
    uint64_t v79 = v168;
    goto LABEL_215;
  }
  if (v189 == v4) {
    char v197 = v151;
  }
  else {
    char v197 = 1;
  }
  if ((v197 & 1) == 0)
  {
    int v200 = (void *)v190;
    int v201 = (char *)operator new(0x80uLL);
    unint64_t v3 = v201 + 64;
    *((_DWORD *)v201 + 21) = *((_DWORD *)v201 + 21) & 0x38000000 | 2;
    *(void *)int v201 = 0;
    *((void *)v201 + 1) = 0;
    *((void *)v201 + 2) = 0;
    *((void *)v201 + 3) = v201 + 64;
    *((void *)v201 + 4) = 0;
    *((void *)v201 + 5) = 0;
    *((void *)v201 + 6) = 0;
    *((void *)v201 + 7) = v201 + 64;
    uint64_t v204 = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v202, v203);
    uint64_t v56 = (uint64_t)v200;
    uint64_t v27 = v204;
    WORD4(v697) = 257;
    int v205 = (void **)*v200;
    uint64_t v52 = **(void **)*v200 + 1888;
    if (*v200 && (v205[1] & 0xFE) == 0x12)
    {
      int v302 = (uint64_t **)(**(void **)*v200 + 1888);
      uint64_t v303 = (llvm::Type *)*((unsigned int *)v205 + 8);
      if (*((_DWORD *)v205 + 2) == 19) {
        llvm::ScalableVectorType::get(v302, v303);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v302, v303);
      }
      uint64_t v52 = v304;
      uint64_t v56 = (uint64_t)v200;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v688;
    goto LABEL_155;
  }
  if (v167 == (void *)v5 && (v688 == 37 || v688 == 34))
  {
    int v211 = (char *)operator new(0x80uLL);
    unint64_t v3 = v211 + 64;
    *((_DWORD *)v211 + 21) = *((_DWORD *)v211 + 21) & 0x38000000 | 2;
    *(void *)int v211 = 0;
    *((void *)v211 + 1) = 0;
    *((void *)v211 + 2) = 0;
    *((void *)v211 + 3) = v211 + 64;
    *((void *)v211 + 4) = 0;
    *((void *)v211 + 5) = 0;
    *((void *)v211 + 6) = 0;
    *((void *)v211 + 7) = v211 + 64;
    WORD4(v697) = 257;
    uint64_t v212 = *(void ***)v168;
    uint64_t v52 = ***(void ***)v168 + 1888;
    if (*(void *)v168 && (v212[1] & 0xFE) == 0x12)
    {
      unint64_t v408 = (uint64_t **)(***(void ***)v168 + 1888);
      int v409 = (llvm::Type *)*((unsigned int *)v212 + 8);
      if (*((_DWORD *)v212 + 2) == 19) {
        llvm::ScalableVectorType::get(v408, v409);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v408, v409);
      }
      uint64_t v52 = v410;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v688;
LABEL_424:
    uint64_t v56 = v168;
LABEL_425:
    uint64_t v79 = v5;
    goto LABEL_215;
  }
  if (v189 == v4 && v680 <= 1)
  {
    uint64_t v27 = (llvm::Value *)v190;
    int v198 = (char *)operator new(0x80uLL);
    unint64_t v3 = v198 + 64;
    *((_DWORD *)v198 + 21) = *((_DWORD *)v198 + 21) & 0x38000000 | 2;
    *(void *)int v198 = 0;
    *((void *)v198 + 1) = 0;
    *((void *)v198 + 2) = 0;
    *((void *)v198 + 3) = v198 + 64;
    *((void *)v198 + 4) = 0;
    *((void *)v198 + 5) = 0;
    *((void *)v198 + 6) = 0;
    *((void *)v198 + 7) = v198 + 64;
    WORD4(v697) = 257;
    uint64_t v199 = *(llvm::Constant **)v4;
    uint64_t v52 = ***(void ***)v4 + 1888;
    if (*(void *)v4 && (*((_DWORD *)v199 + 2) & 0xFE) == 0x12)
    {
      uint64_t v390 = (uint64_t **)(***(void ***)v4 + 1888);
      uint64_t v391 = (llvm::Type *)*((unsigned int *)v199 + 8);
      if (*((_DWORD *)v199 + 2) == 19) {
        llvm::ScalableVectorType::get(v390, v391);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v390, v391);
      }
      uint64_t v52 = v392;
    }
    uint64_t v53 = (const char **)&v695;
    __int16 v54 = (llvm::Value *)v3;
    __int16 v55 = v688;
    goto LABEL_154;
  }
  if (v680 <= 1 && v167 == (void *)v5)
  {
    uint64_t v681 = v190;
    unint64_t v206 = (unint64_t)v148;
    if (!*((void *)v148 + 5))
    {
      if (!v168 || *(unsigned __int8 *)(v168 + 16) < 0x1Cu || (unint64_t v206 = v168, !*(void *)(v168 + 40))) {
        unint64_t v206 = 0;
      }
    }
    uint64_t v695 = (uint64_t)v685;
    *(void *)&long long v696 = v684;
    *((void *)&v696 + 1) = v206;
    long long v697 = (unint64_t)ZExtOrBitCast;
    LOBYTE(v698) = 1;
    int v207 = sub_1CC1620B8(v168, 0, (uint64_t)&v695);
    uint64_t v190 = v681;
    int v149 = v675;
    if (v207)
    {
      uint64_t v208 = (char *)operator new(0x80uLL);
      *((_DWORD *)v208 + 21) = *((_DWORD *)v208 + 21) & 0x38000000 | 2;
      unint64_t v3 = v208 + 64;
      *(void *)uint64_t v208 = 0;
      *((void *)v208 + 1) = 0;
      *((void *)v208 + 2) = 0;
      *((void *)v208 + 3) = v208 + 64;
      *((void *)v208 + 4) = 0;
      *((void *)v208 + 5) = 0;
      *((void *)v208 + 6) = 0;
      *((void *)v208 + 7) = v208 + 64;
      __int16 FlippedStrictnessPredicate = llvm::CmpInst::getFlippedStrictnessPredicate(v688);
      WORD4(v697) = 257;
      uint64_t v210 = *(void *)v168;
      uint64_t v52 = ***(void ***)v168 + 1888;
      if (*(void *)v168 && (*(_DWORD *)(v210 + 8) & 0xFE) == 0x12)
      {
        unint64_t v451 = (uint64_t **)(***(void ***)v168 + 1888);
        uint8x8_t v452 = (llvm::Type *)*(unsigned int *)(v210 + 32);
        if (*(_DWORD *)(v210 + 8) == 19) {
          llvm::ScalableVectorType::get(v451, v452);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v451, v452);
        }
        uint64_t v52 = v453;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = FlippedStrictnessPredicate;
      goto LABEL_424;
    }
  }
  if (v189 == v4 && (v688 == 37 || v688 == 34))
  {
    uint64_t v225 = (uint64_t)v148;
    if (!*((void *)v148 + 5))
    {
      if (!v190 || *(unsigned __int8 *)(v190 + 16) < 0x1Cu || (uint64_t v225 = v190, !*(void *)(v190 + 40))) {
        uint64_t v225 = 0;
      }
    }
    uint64_t v695 = (uint64_t)v685;
    *(void *)&long long v696 = v684;
    *((void *)&v696 + 1) = v225;
    long long v697 = (unint64_t)ZExtOrBitCast;
    LOBYTE(v698) = 1;
    uint64_t v682 = v190;
    int v226 = sub_1CC1620B8(v190, 0, (uint64_t)&v695);
    uint64_t v190 = v682;
    int v149 = v675;
    if (v226)
    {
      int v227 = (char *)operator new(0x80uLL);
      *((_DWORD *)v227 + 21) = *((_DWORD *)v227 + 21) & 0x38000000 | 2;
      unint64_t v3 = v227 + 64;
      *(void *)int v227 = 0;
      *((void *)v227 + 1) = 0;
      *((void *)v227 + 2) = 0;
      *((void *)v227 + 3) = v227 + 64;
      *((void *)v227 + 4) = 0;
      *((void *)v227 + 5) = 0;
      *((void *)v227 + 6) = 0;
      *((void *)v227 + 7) = v227 + 64;
      __int16 v228 = llvm::CmpInst::getFlippedStrictnessPredicate(v688);
      WORD4(v697) = 257;
      BOOL v229 = *(llvm::Constant **)v4;
      uint64_t v230 = ***(void ***)v4 + 1888;
      if (*(void *)v4 && (*((_DWORD *)v229 + 2) & 0xFE) == 0x12)
      {
        uint64_t v464 = (uint64_t **)(***(void ***)v4 + 1888);
        unint64_t v465 = (llvm::Type *)*((unsigned int *)v229 + 8);
        if (*((_DWORD *)v229 + 2) == 19) {
          llvm::ScalableVectorType::get(v464, v465);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v464, v465);
        }
        uint64_t v230 = v466;
      }
      llvm::CmpInst::CmpInst((llvm::Value *)v3, v230, 53, v228, v4, v682, (const char **)&v695, 0, 0);
      return (llvm::UndefValue **)v3;
    }
  }
  if (v168) {
    BOOL v213 = v190 == 0;
  }
  else {
    BOOL v213 = 1;
  }
  if (!v213 && v168 == v190) {
    int v215 = v92;
  }
  else {
    int v215 = 1;
  }
  if ((v215 | v674))
  {
    if (v167) {
      BOOL v216 = v189 == 0;
    }
    else {
      BOOL v216 = 1;
    }
    if (!v216 && v167 == (void *)v189) {
      int v218 = v92;
    }
    else {
      int v218 = 1;
    }
    if (((v218 | v674) & 1) == 0)
    {
      int v231 = (void *)v190;
      unsigned int v232 = (char *)operator new(0x80uLL);
      uint64_t v56 = (uint64_t)v231;
      unint64_t v3 = v232 + 64;
      *((_DWORD *)v232 + 21) = *((_DWORD *)v232 + 21) & 0x38000000 | 2;
      *(void *)unsigned int v232 = 0;
      *((void *)v232 + 1) = 0;
      *((void *)v232 + 2) = 0;
      *((void *)v232 + 3) = v232 + 64;
      *((void *)v232 + 4) = 0;
      *((void *)v232 + 5) = 0;
      *((void *)v232 + 6) = 0;
      *((void *)v232 + 7) = v232 + 64;
      WORD4(v697) = 257;
      uint64_t v233 = (void **)*v231;
      uint64_t v52 = **(void **)*v231 + 1888;
      if (*v231 && (v233[1] & 0xFE) == 0x12)
      {
        unint64_t v454 = (uint64_t **)(**(void **)*v231 + 1888);
        unint64_t v455 = (llvm::Type *)*((unsigned int *)v233 + 8);
        if (*((_DWORD *)v233 + 2) == 19) {
          llvm::ScalableVectorType::get(v454, v455);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v454, v455);
        }
        uint64_t v52 = v456;
        uint64_t v56 = (uint64_t)v231;
      }
      uint64_t v53 = (const char **)&v695;
      __int16 v54 = (llvm::Value *)v3;
      __int16 v55 = v688;
      goto LABEL_398;
    }
    if ((v688 - 38) < 4) {
      int v219 = v149;
    }
    else {
      int v219 = 0;
    }
    if (v219 == 1)
    {
      int v712 = 0;
      *(void *)&long long v696 = &v712;
      int v220 = *(unsigned __int8 *)(v169 + 16);
      if (v220 == 5)
      {
        if (*(_WORD *)(v169 + 18) != 15) {
          goto LABEL_516;
        }
        if (!sub_1CC03F414((uint64_t)&v695, *(llvm::Constant **)(v169 - 32 * (*(_DWORD *)(v169 + 20) & 0x7FFFFFF))))goto LABEL_516; {
        uint64_t v221 = *(void *)(v169 - 32 * (*(_DWORD *)(v169 + 20) & 0x7FFFFFF) + 32);
        }
        if (!v221) {
          goto LABEL_516;
        }
      }
      else
      {
        if (v220 != 43) {
          goto LABEL_516;
        }
        if (!sub_1CBF535C4((uint64_t)&v695, *(llvm::Constant **)(v169 - 64))) {
          goto LABEL_516;
        }
        uint64_t v221 = *(void *)(v169 - 32);
        if (!v221) {
          goto LABEL_516;
        }
      }
      *(void *)long long v696 = v221;
      if (*(unsigned __int8 *)(v5 + 16) <= 0x14u && llvm::Constant::isNotMinSignedValue(v5))
      {
        int64_t v262 = (char *)operator new(0x80uLL);
        unint64_t v3 = v262 + 64;
        *((_DWORD *)v262 + 21) = *((_DWORD *)v262 + 21) & 0x38000000 | 2;
        *(void *)int64_t v262 = 0;
        *((void *)v262 + 1) = 0;
        *((void *)v262 + 2) = 0;
        *((void *)v262 + 3) = v262 + 64;
        *((void *)v262 + 4) = 0;
        *((void *)v262 + 5) = 0;
        *((void *)v262 + 6) = 0;
        *((void *)v262 + 7) = v262 + 64;
        uint64_t v265 = *(llvm::ConstantFP **)v5;
        if ((*(_DWORD *)(*(void *)v5 + 8) & 0xFE) == 0x12) {
          unsigned int v266 = *(unsigned __int8 *)(**((void **)v265 + 2) + 8);
        }
        else {
          unsigned int v266 = *(_DWORD *)(*(void *)v5 + 8);
        }
        int v267 = dword_1CFB279AC[*((_WORD *)v148 + 9) & 0x3F];
        size_t v268 = v712;
        if (v266 <= 6) {
          Zero = llvm::ConstantFP::getZero(v265, (llvm::Type *)1, v264);
        }
        else {
          Zero = llvm::Constant::getNullValue(v265, v263, v264);
        }
        uint64_t v271 = Zero;
        uint64_t v272 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v5, v270);
        if (!v272)
        {
          unsigned int v621 = *(void ***)v271;
          if (*(void *)v271)
          {
            unint64_t v708 = (unint64_t)v271;
            *(void *)&long long v709 = v5;
            uint64_t v622 = **v621 + 1512;
            LODWORD(v695) = 15;
            *(void *)&long long v696 = &v708;
            *((void *)&v696 + 1) = 2;
            long long v697 = 0u;
            long long v698 = 0u;
            int v699 = 0;
            uint64_t v272 = sub_1CC56C20C(v622, (uint64_t)v621, (unsigned __int8 *)&v695);
          }
          else
          {
            uint64_t v272 = 0;
          }
        }
        WORD4(v697) = 257;
        int v273 = *v268;
        uint64_t v52 = **(void **)*v268 + 1888;
        if (*v268 && (*((_DWORD *)v273 + 2) & 0xFE) == 0x12)
        {
          int64x2_t v546 = (uint64_t **)(**(void **)*v268 + 1888);
          int64x2_t v547 = (llvm::Type *)*((unsigned int *)v273 + 8);
          if (*((_DWORD *)v273 + 2) == 19) {
            llvm::ScalableVectorType::get(v546, v547);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v546, v547);
          }
          uint64_t v52 = v548;
        }
        uint64_t v53 = (const char **)&v695;
        __int16 v54 = (llvm::Value *)v3;
        __int16 v55 = v267;
        uint64_t v56 = (uint64_t)v268;
LABEL_515:
        uint64_t v79 = v272;
        goto LABEL_215;
      }
    }
LABEL_516:
    int v693 = 0;
    v707 = 0;
    uint64_t v695 = (uint64_t)&v712;
    long long v696 = (unint64_t)&v707;
    int v274 = *(unsigned __int8 *)(v4 + 16);
    if (v274 == 5)
    {
      if (*(_WORD *)(v4 + 18) != 17) {
        goto LABEL_591;
      }
      uint64_t v275 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
      if (!*(void *)v275) {
        goto LABEL_591;
      }
      int v712 = *(const char ***)v275;
      if (!sub_1CBF5295C((uint64_t)&v696, *(llvm::Constant **)(v275 + 32))) {
        goto LABEL_591;
      }
    }
    else
    {
      if (v274 != 45) {
        goto LABEL_591;
      }
      if (!*(void *)(v4 - 64)) {
        goto LABEL_591;
      }
      int v712 = *(const char ***)(v4 - 64);
      if ((sub_1CBF528D8((uint64_t)&v696, *(unsigned __int8 **)(v4 - 32)) & 1) == 0) {
        goto LABEL_591;
      }
    }
    unint64_t v168 = v11;
    uint64_t v80 = *((unsigned int *)v707 + 2);
    if (v80 >= 0x41)
    {
      int v293 = 0;
      int64_t v294 = (unint64_t)(v80 + 63) >> 6;
      do
      {
        BOOL v7 = v294-- < 1;
        if (v7) {
          break;
        }
        unint64_t v295 = (*v707)[v294];
        v293 += __clz(v295);
      }
      while (!v295);
      int v296 = v80 | 0xFFFFFFC0;
      if ((v80 & 0x3F) == 0) {
        int v296 = 0;
      }
      if ((v80 - v293 - v296) >= 0x41 || **v707) {
        operator new[]();
      }
      goto LABEL_591;
    }
    uint64_t v276 = (uint64_t)*v707;
    if (!*v707) {
      goto LABEL_591;
    }
    DWORD2(v709) = *((_DWORD *)v707 + 2);
    unint64_t v708 = (unint64_t)&v693;
    *(void *)&long long v709 = v276;
    int v297 = *(unsigned __int8 *)(v5 + 16);
    if (v297 == 5)
    {
      if (*(_WORD *)(v5 + 18) != 17) {
        goto LABEL_570;
      }
      uint64_t v308 = *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
      if (!v308) {
        goto LABEL_570;
      }
      *(void *)unint64_t v708 = v308;
      if (!sub_1CBF531E4((llvm::APInt *)&v709, *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32)))goto LABEL_570; {
    }
      }
    else if (v297 != 45 {
           || (uint64_t v298 = *(void *)(v5 - 64)) == 0
    }
           || (*(void *)unint64_t v708 = v298, !sub_1CBF53154((llvm::APInt *)&v709, *(unsigned __int8 **)(v5 - 32))))
    {
LABEL_570:
      BOOL v309 = 0;
      goto LABEL_571;
    }
    BOOL v309 = (*((_WORD *)v683 + 9) & 0x3E) == 32;
LABEL_571:
    if (DWORD2(v709) >= 0x41 && (void)v709) {
      MEMORY[0x1D25D9CB0](v709, 0x1000C8000313F17);
    }
    if (v309)
    {
      unsigned int v310 = *((_DWORD *)v707 + 2);
      if (v310 > 0x40)
      {
        int v312 = llvm::APInt::countTrailingZerosSlowCase(v707);
      }
      else
      {
        unsigned int v311 = __clz(__rbit64((unint64_t)*v707));
        if (v310 >= v311) {
          int v312 = v311;
        }
        else {
          int v312 = *((_DWORD *)v707 + 2);
        }
      }
      if (v312)
      {
        if (!v169 || !v11) {
          goto LABEL_591;
        }
        if (((*(unsigned char *)(v169 + 17) & 4) == 0 || (*(unsigned char *)(v11 + 17) & 4) == 0)
          && ((*(unsigned char *)(v169 + 17) & 2) == 0 || (*(unsigned char *)(v11 + 17) & 2) == 0))
        {
LABEL_592:
          if (*(unsigned char *)(v169 + 16) == 51)
          {
            uint64_t v316 = *(void *)(v169 - 32);
            if (!v11 || v5 == v316)
            {
              if (v5 != v316) {
                goto LABEL_602;
              }
              goto LABEL_601;
            }
LABEL_598:
            if (*(unsigned char *)(v11 + 16) != 51 || (uint64_t v316 = *(void *)(v11 - 32), v4 != v316))
            {
LABEL_602:
              if (v169 && v11)
              {
                if (*(unsigned __int8 *)(v169 + 16) != *(unsigned __int8 *)(v11 + 16)) {
                  goto LABEL_617;
                }
                uint64_t v317 = *(void *)(v169 + 8);
                if (!v317) {
                  goto LABEL_617;
                }
                if (*(void *)(v317 + 8)) {
                  goto LABEL_617;
                }
                uint64_t v318 = *(void *)(v11 + 8);
                if (!v318) {
                  goto LABEL_617;
                }
                if (*(void *)(v318 + 8)) {
                  goto LABEL_617;
                }
                unint64_t v18 = *(llvm::Type **)(v169 - 32);
                if (v18 != *(llvm::Type **)(v11 - 32)) {
                  goto LABEL_617;
                }
                switch(*(unsigned char *)(v169 + 16))
                {
                  case ')':
                  case '+':
                  case ':':
                    if ((*((_WORD *)v683 + 9) & 0x3E) == 0x20) {
                      goto LABEL_894;
                    }
                    unint64_t v708 = 0;
                    uint64_t v695 = (uint64_t)&v708;
                    *(void *)&long long v696 = 0;
                    if (!sub_1CBF528D8((uint64_t)&v695, (unsigned __int8 *)v18)) {
                      goto LABEL_617;
                    }
                    unsigned int v319 = *(_DWORD *)(v708 + 8);
                    if (v319 > 0x40)
                    {
                      unsigned int v631 = v319 - 1;
                      if ((*(void *)(*(void *)v708 + 8 * ((v319 - 1) >> 6)) >> (v319 - 1)))
                      {
                        if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v708) != v631) {
                          goto LABEL_617;
                        }
                        goto LABEL_615;
                      }
                      if (*(unsigned char *)(v169 + 16) != 58
                        || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v708) != v631)
                      {
                        goto LABEL_617;
                      }
                    }
                    else
                    {
                      char v320 = v319 - 1;
                      if (*(void *)v708 == 1 << v320)
                      {
LABEL_615:
                        LOWORD(v321) = llvm::CmpInst::getFlippedSignednessPredicate(*((_WORD *)v683 + 9) & 0x3F);
                        goto LABEL_978;
                      }
                      if (*(unsigned char *)(v169 + 16) != 58 || *(void *)v708 != ~(-1 << v320)) {
                        goto LABEL_617;
                      }
                    }
                    int v321 = dword_1CFB279AC[(int)llvm::CmpInst::getFlippedSignednessPredicate(*((_WORD *)v683 + 9) & 0x3F)];
LABEL_978:
                    unint64_t v543 = (char *)operator new(0x80uLL);
                    unint64_t v3 = v543 + 64;
                    *((_DWORD *)v543 + 21) = *((_DWORD *)v543 + 21) & 0x38000000 | 2;
                    *(void *)unint64_t v543 = 0;
                    *((void *)v543 + 1) = 0;
                    *((void *)v543 + 2) = 0;
                    *((void *)v543 + 3) = v543 + 64;
                    *((void *)v543 + 4) = 0;
                    *((void *)v543 + 5) = 0;
                    *((void *)v543 + 6) = 0;
                    *((void *)v543 + 7) = v543 + 64;
                    unint64_t v544 = *(void **)(v169 - 64);
                    uint64_t v272 = *(void *)(v11 - 64);
                    WORD4(v697) = 257;
                    uint64_t v545 = (void **)*v544;
                    uint64_t v52 = **(void **)*v544 + 1888;
                    if (*v544 && (v545[1] & 0xFE) == 0x12)
                    {
                      uint64_t v618 = (uint64_t **)(**(void **)*v544 + 1888);
                      unint64_t v619 = (llvm::Type *)*((unsigned int *)v545 + 8);
                      if (*((_DWORD *)v545 + 2) == 19) {
                        llvm::ScalableVectorType::get(v618, v619);
                      }
                      else {
                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v618, v619);
                      }
                      uint64_t v52 = v620;
                    }
                    uint64_t v53 = (const char **)&v695;
                    __int16 v54 = (llvm::Value *)v3;
                    __int16 v55 = v321;
                    uint64_t v56 = (uint64_t)v544;
                    goto LABEL_515;
                  case '-':
                    if ((*((_WORD *)v683 + 9) & 0x3E) != 0x20) {
                      goto LABEL_617;
                    }
                    unint64_t v708 = 0;
                    uint64_t v695 = (uint64_t)&v708;
                    *(void *)&long long v696 = 0;
                    if (!sub_1CBF528D8((uint64_t)&v695, (unsigned __int8 *)v18)) {
                      goto LABEL_617;
                    }
                    uint64_t v498 = *(unsigned int *)(v708 + 8);
                    if (v498 > 0x40)
                    {
                      int v553 = 0;
                      int64_t v554 = (unint64_t)(v498 + 63) >> 6;
                      do
                      {
                        BOOL v7 = v554-- < 1;
                        if (v7) {
                          break;
                        }
                        unint64_t v555 = *(void *)(*(void *)v708 + 8 * v554);
                        v553 += __clz(v555);
                      }
                      while (!v555);
                      int v556 = v498 | 0xFFFFFFC0;
                      if ((v498 & 0x3F) == 0) {
                        int v556 = 0;
                      }
                      int v557 = v553 + v556;
                      if (v557 == v498 || v557 == v498 - 1) {
                        goto LABEL_617;
                      }
                    }
                    else if (*(void *)v708 < 2uLL)
                    {
                      goto LABEL_617;
                    }
                    unsigned int v558 = *(_DWORD *)(v708 + 8);
                    if (v558 > 0x40)
                    {
                      if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v708))
                      {
                        LODWORD(v696) = v558;
                        operator new[]();
                      }
                      goto LABEL_617;
                    }
                    unsigned int v559 = __clz(__rbit64(*(void *)v708));
                    if (v558 >= v559) {
                      unsigned int v560 = v559;
                    }
                    else {
                      unsigned int v560 = *(_DWORD *)(v708 + 8);
                    }
                    if (!v560) {
                      goto LABEL_617;
                    }
                    unint64_t v561 = *(llvm::Constant **)v169;
                    LODWORD(v696) = *(_DWORD *)(v708 + 8);
                    uint64_t v695 = 0;
                    unint64_t v568 = (const llvm::APInt *)(v558 - v560);
                    if (v558 != v560)
                    {
                      if (v568 > 0x40) {
                        llvm::APInt::setBitsSlowCase(&v695, 0, v568);
                      }
                      else {
                        uint64_t v695 = 0xFFFFFFFFFFFFFFFFLL >> (v560 - v558);
                      }
                    }
                    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v561, (llvm::LLVMContext *)&v695, v568);
                    if ((*((_DWORD *)v561 + 2) & 0xFE) == 0x12) {
                      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v561 + 8) | ((unint64_t)(*((_DWORD *)v561 + 2) == 19) << 32)), (uint64_t)Splat);
                    }
                    if (v696 >= 0x41 && v695) {
                      MEMORY[0x1D25D9CB0](v695, 0x1000C8000313F17);
                    }
                    uint64_t v570 = *(void *)(v672 + 24);
                    v571 = *(void **)(v169 - 64);
                    WORD4(v697) = 257;
                    int v30 = (unsigned __int8 *)sub_1CBF52474(v570, v571, (uint64_t)Splat, (uint64_t)&v695);
                    uint64_t v572 = *(void *)(v672 + 24);
                    unint64_t v573 = *(void **)(v11 - 64);
                    WORD4(v697) = 257;
                    AllOnesValue = sub_1CBF52474(v572, v573, (uint64_t)Splat, (uint64_t)&v695);
                    unint64_t v574 = (char *)operator new(0x80uLL);
                    unint64_t v3 = v574 + 64;
                    *((_DWORD *)v574 + 21) = *((_DWORD *)v574 + 21) & 0x38000000 | 2;
                    *(void *)unint64_t v574 = 0;
                    *((void *)v574 + 1) = 0;
                    *((void *)v574 + 2) = 0;
                    *((void *)v574 + 3) = v574 + 64;
                    *((void *)v574 + 4) = 0;
                    *((void *)v574 + 5) = 0;
                    *((void *)v574 + 6) = 0;
                    *((void *)v574 + 7) = v574 + 64;
                    WORD4(v697) = 257;
                    goto LABEL_200;
                  case '/':
                  case '6':
                    if ((*((_WORD *)v683 + 9) & 0x3Eu) - 38 < 4) {
                      goto LABEL_617;
                    }
                    goto LABEL_892;
                  case '0':
                    if ((*((_WORD *)v683 + 9) & 0x3E) != 0x20) {
                      goto LABEL_617;
                    }
                    goto LABEL_892;
                  case '5':
                    if ((*(unsigned char *)(v169 + 17) & 2) != 0)
                    {
                      unsigned int v500 = *(unsigned __int8 *)(v11 + 17);
                      if ((*(unsigned char *)(v169 + 17) & 4) == 0)
                      {
                        if ((v500 & 2) == 0) {
                          goto LABEL_617;
                        }
LABEL_985:
                        if ((*((_WORD *)v683 + 9) & 0x3Eu) - 38 >= 4) {
                          goto LABEL_894;
                        }
                        goto LABEL_617;
                      }
                      int v499 = (v500 >> 1) & 1;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v169 + 17) & 4) == 0) {
                        goto LABEL_617;
                      }
                      LOBYTE(v499) = 0;
                      LOBYTE(v500) = *(unsigned char *)(v11 + 17);
                    }
                    if ((v499 & 1) == 0 && (v500 & 4) == 0) {
                      goto LABEL_617;
                    }
                    if ((v500 & 4) != 0)
                    {
LABEL_894:
                      uint64_t v497 = (char *)operator new(0x80uLL);
                      unint64_t v3 = v497 + 64;
                      *((_DWORD *)v497 + 21) = *((_DWORD *)v497 + 21) & 0x38000000 | 2;
                      *(void *)uint64_t v497 = 0;
                      *((void *)v497 + 1) = 0;
                      *((void *)v497 + 2) = 0;
                      *((void *)v497 + 3) = v497 + 64;
                      *((void *)v497 + 4) = 0;
                      *((void *)v497 + 5) = 0;
                      *((void *)v497 + 6) = 0;
                      *((void *)v497 + 7) = v497 + 64;
                      int v30 = *(unsigned __int8 **)(v169 - 64);
                      AllOnesValue = *(void **)(v11 - 64);
                      goto LABEL_199;
                    }
                    goto LABEL_985;
                  case '7':
LABEL_892:
                    if ((*(unsigned char *)(v169 + 17) & 2) != 0 && (*(unsigned char *)(v11 + 17) & 2) != 0) {
                      goto LABEL_894;
                    }
                    goto LABEL_617;
                  default:
                    goto LABEL_617;
                }
              }
LABEL_616:
              if (!v169) {
                goto LABEL_658;
              }
LABEL_617:
              *(void *)&long long v709 = v5;
              int v322 = *(unsigned __int8 *)(v169 + 16);
              if (v322 == 5)
              {
                if (*(_WORD *)(v169 + 18) != 28) {
                  goto LABEL_658;
                }
                uint64_t v323 = (llvm::Constant **)v169;
                uint64_t v326 = *(void *)(v169 - 32 * (*(_DWORD *)(v169 + 20) & 0x7FFFFFF) + 32);
                int v327 = *(unsigned __int8 *)(v326 + 16);
                if (v327 == 5)
                {
                  if (*(_WORD *)(v326 + 18) == 13)
                  {
                    uint64_t v334 = v326 - 32 * (*(_DWORD *)(v326 + 20) & 0x7FFFFFF);
                    if (v5 == *(void *)v334
                      && (sub_1CBF68974((uint64_t)&v709 + 8, *(llvm::Constant **)(v334 + 32)) & 1) != 0)
                    {
                      goto LABEL_645;
                    }
                  }
                }
                else if (v327 == 41 {
                       && v5 == *(void *)(v326 - 64)
                }
                       && (sub_1CBF687D0((uint64_t)&v709 + 8, *(llvm::Constant **)(v326 - 32)) & 1) != 0)
                {
                  goto LABEL_645;
                }
                LOBYTE(v325) = v169;
                uint64_t v333 = *(void *)(v169 - 32 * (*(_DWORD *)(v169 + 20) & 0x7FFFFFF));
              }
              else
              {
                if (v322 != 56) {
                  goto LABEL_658;
                }
                uint64_t v323 = (llvm::Constant **)v169;
                uint64_t v324 = *(void *)(v169 - 32);
                LODWORD(v325) = *(unsigned __int8 *)(v324 + 16);
                if (v325 == 5)
                {
                  LODWORD(v325) = *(unsigned __int16 *)(v324 + 18);
                  if (v325 == 13)
                  {
                    int v332 = (uint64_t *)(v324 - 32 * (*(_DWORD *)(v324 + 20) & 0x7FFFFFF));
                    uint64_t v325 = *v332;
                    if (v5 == *v332 && (sub_1CBF68974((uint64_t)&v709 + 8, (llvm::Constant *)v332[4]) & 1) != 0) {
                      goto LABEL_645;
                    }
                  }
                }
                else if (v325 == 41)
                {
                  uint64_t v325 = *(void *)(v324 - 64);
                  if (v5 == v325 && (sub_1CBF687D0((uint64_t)&v709 + 8, *(llvm::Constant **)(v324 - 32)) & 1) != 0) {
                    goto LABEL_645;
                  }
                }
                uint64_t v333 = *(void *)(v169 - 64);
              }
              int v335 = *(unsigned __int8 *)(v333 + 16);
              if (v335 != 41)
              {
                if (v335 == 5) {
                  LOBYTE(v325) = *(_WORD *)(v333 + 18) == 13
                }
                              && (uint64_t v337 = v333 - 32 * (*(_DWORD *)(v333 + 20) & 0x7FFFFFF),
                                  (void)v709 == *(void *)v337)
                              && (sub_1CBF68974((uint64_t)&v709 + 8, *(llvm::Constant **)(v337 + 32)) & 1) != 0;
                int v336 = (v335 == 5) & v325;
LABEL_653:
                if (v336 && v688 == 36)
                {
                  uint64_t v27 = llvm::Constant::getNullValue(*v323, v18, v17);
                  __int16 v338 = (char *)operator new(0x80uLL);
                  unint64_t v3 = v338 + 64;
                  *((_DWORD *)v338 + 21) = *((_DWORD *)v338 + 21) & 0x38000000 | 2;
                  *(void *)__int16 v338 = 0;
                  *((void *)v338 + 1) = 0;
                  *((void *)v338 + 2) = 0;
                  *((void *)v338 + 3) = v338 + 64;
                  *((void *)v338 + 4) = 0;
                  *((void *)v338 + 5) = 0;
                  *((void *)v338 + 6) = 0;
                  *((void *)v338 + 7) = v338 + 64;
                  WORD4(v697) = 257;
                  uint64_t v339 = *(llvm::Constant **)v5;
                  uint64_t v52 = ***(void ***)v5 + 1888;
                  if (*(void *)v5 && (*((_DWORD *)v339 + 2) & 0xFE) == 0x12)
                  {
                    uint64_t v494 = (uint64_t **)(***(void ***)v5 + 1888);
                    uint64_t v495 = (llvm::Type *)*((unsigned int *)v339 + 8);
                    if (*((_DWORD *)v339 + 2) == 19) {
                      llvm::ScalableVectorType::get(v494, v495);
                    }
                    else {
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v494, v495);
                    }
                    uint64_t v52 = v496;
                  }
                  uint64_t v53 = (const char **)&v695;
                  __int16 v54 = (llvm::Value *)v3;
                  __int16 v55 = 33;
                  goto LABEL_111;
                }
LABEL_658:
                LODWORD(v704) = 0;
                int v693 = 0;
                unsigned int v706 = 0;
                v707 = 0;
                unint64_t v705 = 0;
                __int16 v340 = *((_WORD *)v683 + 9);
                if ((v340 & 0x3E) != 0x20)
                {
                  uint64_t v695 = (uint64_t)&v704;
                  *((void *)&v696 + 1) = &v693;
                  *(void *)&long long v697 = &v705;
                  *((void *)&v697 + 1) = &v707;
                  int v341 = sub_1CCA79C20((uint64_t)&v696, *((void *)v683 - 8));
                  uint64_t v342 = *((void *)v683 - 4);
                  if (v341 && v342)
                  {
                    **((void **)&v697 + 1) = v342;
                    int v343 = *((_WORD *)v683 + 9) & 0x3F;
                    goto LABEL_665;
                  }
                  if (sub_1CCA79C20((uint64_t)&v696, v342))
                  {
                    uint64_t v344 = *((void *)v683 - 8);
                    if (v344)
                    {
                      **((void **)&v697 + 1) = v344;
                      int v343 = dword_1CFB279AC[*((_WORD *)v683 + 9) & 0x3F];
LABEL_665:
                      *(_DWORD *)uint64_t v695 = v343;
                      unsigned int v706 = 0;
                      if (v704 == 36)
                      {
                        BOOL v345 = 0;
                      }
                      else
                      {
                        if (v704 != 35) {
                          goto LABEL_701;
                        }
                        BOOL v345 = 1;
                      }
                      goto LABEL_678;
                    }
                  }
                  __int16 v340 = *((_WORD *)v683 + 9);
                }
                if ((v340 & 0x3E) != 0x20) {
                  goto LABEL_701;
                }
                uint64_t v695 = (uint64_t)&v704;
                *(void *)&long long v696 = &v707;
                *((void *)&v696 + 1) = &v707;
                *(void *)&long long v697 = &v693;
                *((void *)&v697 + 1) = &v706;
                *(void *)&long long v698 = &v693;
                *((void *)&v698 + 1) = &v705;
                if (*((void *)v683 - 8)
                  && (v707 = (unint64_t **)*((void *)v683 - 8),
                      sub_1CCA79CE8((uint64_t **)&v696 + 1, *((void *)v683 - 4))))
                {
                  int v346 = *((_WORD *)v683 + 9) & 0x3F;
                }
                else
                {
                  if (!*((void *)v683 - 4)) {
                    goto LABEL_701;
                  }
                  v707 = (unint64_t **)*((void *)v683 - 4);
                  if (!sub_1CCA79CE8((uint64_t **)&v696 + 1, *((void *)v683 - 8))) {
                    goto LABEL_701;
                  }
                  int v346 = dword_1CFB279AC[*((_WORD *)v683 + 9) & 0x3F];
                }
                LODWORD(v704) = v346;
                BOOL v345 = v346 == 32;
LABEL_678:
                unint64_t v708 = *(void *)(v672 + 24);
                long long v709 = *(_OWORD *)(v708 + 48);
                llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v708, &v710);
                uint64_t v347 = v706;
                if (!v706 || (uint64_t v348 = *((void *)v706 + 1)) != 0 && !*(void *)(v348 + 8))
                {
                  int v352 = 0;
LABEL_686:
                  uint64_t v353 = *(uint64_t ***)(*(void *)(*((void *)v683 + 5) + 56) + 40);
                  if (v705[16] == 47) {
                    int v354 = 309;
                  }
                  else {
                    int v354 = 278;
                  }
                  uint64_t v695 = *(void *)v693;
                  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v353, v354, (uint64_t)&v695, 1);
                  uint64_t v356 = *(uint64_t **)(v672 + 24);
                  if (Declaration) {
                    char v357 = *(uint64_t ***)(Declaration + 24);
                  }
                  else {
                    char v357 = 0;
                  }
                  int v712 = (const char **)v693;
                  __int16 v713 = v707;
                  uint64_t v695 = (uint64_t)"mul";
                  LODWORD(v5) = 259;
                  WORD4(v697) = 259;
                  uint8x8_t v358 = (uint64_t *)sub_1CB845BAC(v356, v357, (uint64_t **)Declaration, (uint64_t *)&v712, 2, (uint64_t)&v695, 0);
                  if (v352)
                  {
                    uint64_t v359 = v706;
                    uint64_t v360 = *(void *)(v672 + 24);
                    LODWORD(v712) = 0;
                    uint64_t v695 = (uint64_t)"mul.val";
                    WORD4(v697) = 259;
                    unint64_t v361 = sub_1CC2415A4(v360, v358, (unsigned int *)&v712, 1, (uint64_t)&v695);
                    sub_1CC9D3C84(v672, v359, v361);
                  }
                  uint64_t v362 = *(void *)(v672 + 24);
                  LODWORD(v712) = 1;
                  uint64_t v695 = (uint64_t)"mul.ov";
                  WORD4(v697) = 259;
                  uint8x8_t v364 = sub_1CC2415A4(v362, v358, (unsigned int *)&v712, 1, (uint64_t)&v695);
                  if (v345)
                  {
                    uint64_t v365 = *(void *)(v672 + 24);
                    uint64_t v695 = (uint64_t)"mul.not.ov";
                    WORD4(v697) = 259;
                    uint8x8_t v364 = sub_1CC2427E8(v365, (uint64_t)v364, (uint64_t)&v695, v363);
                  }
                  if (v352) {
                    sub_1CC9D6844(v672, (uint64_t)v706);
                  }
                  sub_1CC6DA230((uint64_t *)&v708);
                  if (v364) {
                    goto LABEL_699;
                  }
LABEL_701:
                  uint64_t v369 = *(void *)(v672 + 24);
                  LODWORD(v707) = 0;
                  unint64_t v708 = 0;
                  int v712 = 0;
                  int v693 = 0;
                  uint64_t v695 = (uint64_t)&v707;
                  WORD2(v696) = 0;
                  LODWORD(v696) = 0;
                  *((void *)&v697 + 1) = &v693;
                  *(void *)&long long v698 = &v693;
                  int v699 = &v712;
                  int64_t v700 = &v708;
                  uint64_t v701 = &v708;
                  LODWORD(v11) = v683;
                  int v370 = sub_1CCA78558((uint64_t)&v696, *((void *)v683 - 8), (uint64_t)&v712);
                  uint64_t v372 = *((void *)v683 - 4);
                  if (v370 && (uint64_t v371 = *v701, *v701 == v372))
                  {
                    int v440 = *((_WORD *)v683 + 9) & 0x3F;
                  }
                  else
                  {
                    if (!sub_1CCA78558((uint64_t)&v696, v372, v371) || *v701 != *((void *)v683 - 8)) {
                      goto LABEL_704;
                    }
                    int v440 = dword_1CFB279AC[*((_WORD *)v683 + 9) & 0x3F];
                  }
                  *(_DWORD *)uint64_t v695 = v440;
                  uint64_t v80 = 37;
                  switch((int)v707)
                  {
                    case '!':
                    case '$':
                      LOWORD(v80) = 34;
                      break;
                    case '""':
                    case '%':
                      goto LABEL_1213;
                    case '&':
                    case ')':
                      goto LABEL_704;
                    case '\'':
                      if (*((unsigned __int8 *)v712 + 16) > 0x14u || !sub_1CCA79260((int)&v695, (llvm::Constant *)v712)) {
                        goto LABEL_704;
                      }
                      LOWORD(v80) = 41;
                      break;
                    case '(':
                      if (*((unsigned __int8 *)v712 + 16) > 0x14u || !sub_1CCA79260((int)&v695, (llvm::Constant *)v712)) {
                        goto LABEL_704;
                      }
                      LOWORD(v80) = 38;
                      break;
                    default:
                      break;
                  }
                  char v636 = (llvm::Constant *)v712;
                  unsigned int v637 = *((unsigned __int8 *)v712 + 16);
                  if (v637 >= 0x15) {
                    v638 = 0;
                  }
                  else {
                    v638 = (llvm::Constant *)v712;
                  }
                  if ((*v712)[8] == 18) {
                    uint64_t v639 = *v712;
                  }
                  else {
                    uint64_t v639 = 0;
                  }
                  if (v639 && v637 <= 0x14)
                  {
                    if (llvm::Constant::containsUndefOrPoisonElement(v638))
                    {
                      int v642 = *((_DWORD *)v639 + 8);
                      if (v642)
                      {
                        v643 = 0;
                        while (*((unsigned __int8 *)llvm::Constant::getAggregateElement(v638, v643) + 16)
                              - 11 < 2)
                        {
                          v643 = (llvm::Type *)(v643 + 1);
                          if (v642 == v643) {
                            goto LABEL_1250;
                          }
                        }
                        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(v638, v643);
                      }
                      else
                      {
LABEL_1250:
                        AggregateElement = 0;
                      }
                      char v636 = llvm::Constant::replaceUndefsWith(v638, AggregateElement, v640);
                      int v712 = (const char **)v636;
                    }
                    else
                    {
                      char v636 = (llvm::Constant *)v712;
                    }
                  }
                  WORD4(v697) = 257;
                  v641 = sub_1CB845F20(v369, v80, (void *)v708, (uint64_t)v636, (uint64_t)&v695);
                  if (v641)
                  {
                    uint8x8_t v368 = v641;
                    uint64_t v366 = v672;
                    uint64_t v367 = v683;
                    return sub_1CC9D3C84(v366, v367, v368);
                  }
LABEL_704:
                  uint64_t v373 = *(void *)(v672 + 24);
                  LODWORD(v705) = 0;
                  int v693 = 0;
                  unsigned int v706 = 0;
                  v707 = 0;
                  uint64_t v695 = (uint64_t)&v705;
                  *(void *)&long long v696 = &v693;
                  *((void *)&v696 + 1) = &v707;
                  *(void *)&long long v697 = 0;
                  *((void *)&v697 + 1) = &v706;
                  *(void *)&long long v698 = 0;
                  *((void *)&v698 + 1) = &v693;
                  uint64_t v374 = *((void *)v683 - 8);
                  uint64_t v375 = *(void *)(v374 + 8);
                  if (v375
                    && !*(void *)(v375 + 8)
                    && sub_1CC9F956C((void **)&v696, 27, v374)
                    && **((void **)&v698 + 1) == *((void *)v683 - 4))
                  {
                    int v384 = *((_WORD *)v683 + 9) & 0x3F;
                  }
                  else
                  {
                    uint64_t v376 = *((void *)v683 - 4);
                    uint64_t v377 = *(void *)(v376 + 8);
                    if (!v377
                      || *(void *)(v377 + 8)
                      || !sub_1CC9F956C((void **)&v696, 27, v376)
                      || **((void **)&v698 + 1) != *((void *)v683 - 8))
                    {
                      goto LABEL_709;
                    }
                    int v384 = dword_1CFB279AC[*((_WORD *)v683 + 9) & 0x3F];
                  }
                  *(_DWORD *)uint64_t v695 = v384;
                  uint64_t v467 = *((unsigned int *)v707 + 2);
                  if (v467 > 0x40)
                  {
                    uint64_t v468 = (uint64_t)*v707;
                    if (memcmp(*v707, *(const void **)v706, ((unint64_t)(v467 + 63) >> 3) & 0x3FFFFFF8)) {
                      goto LABEL_709;
                    }
                  }
                  else
                  {
                    uint64_t v468 = (uint64_t)*v707;
                    if (*v707 != *(unint64_t **)v706) {
                      goto LABEL_709;
                    }
                  }
                  if (v705 == 32)
                  {
                    __int16 v645 = 36;
                  }
                  else
                  {
                    if (v705 != 33) {
                      goto LABEL_709;
                    }
                    __int16 v645 = 35;
                  }
                  __int16 v689 = v645;
                  v646 = *(char **)v693;
                  v647 = *(llvm::Type **)v693;
                  if ((*(_DWORD *)(*(void *)v693 + 8) & 0xFE) == 0x12) {
                    v647 = (llvm::Type *)**((void **)v646 + 2);
                  }
                  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v647);
                  unsigned int v650 = PrimitiveSizeInBits;
                  char v651 = PrimitiveSizeInBits;
                  if (PrimitiveSizeInBits > 0x40) {
                    operator new[]();
                  }
                  unint64_t v652 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  if (PrimitiveSizeInBits) {
                    uint64_t v653 = v652 & PrimitiveSizeInBits;
                  }
                  else {
                    uint64_t v653 = 0;
                  }
                  if (PrimitiveSizeInBits) {
                    unint64_t v654 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  }
                  else {
                    unint64_t v654 = 0;
                  }
                  unint64_t v655 = v654 & (v653 - v468);
                  if (!PrimitiveSizeInBits) {
                    LOBYTE(v652) = 0;
                  }
                  LODWORD(v709) = PrimitiveSizeInBits;
                  unint64_t v708 = v652 & 1;
                  int v656 = PrimitiveSizeInBits;
                  if (v655 <= PrimitiveSizeInBits)
                  {
                    int v656 = v655;
                    char v651 = v655;
                  }
                  unint64_t v657 = (v652 & 1) << v651;
                  if (PrimitiveSizeInBits == v656) {
                    unint64_t v657 = 0;
                  }
                  if (PrimitiveSizeInBits) {
                    unint64_t v658 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  }
                  else {
                    unint64_t v658 = 0;
                  }
                  unint64_t v708 = v658 & v657;
                  LODWORD(v713) = v709;
                  if (v709 == 1) {
                    int v712 = 0;
                  }
                  else {
                    int v712 = (const char **)(v708 >> 1);
                  }
                  int v659 = v693;
                  int64_t v660 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v646, (llvm::LLVMContext *)&v712, v649);
                  if ((*((_DWORD *)v646 + 2) & 0xFE) == 0x12) {
                    int64_t v660 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v646 + 8) | ((unint64_t)(*((_DWORD *)v646 + 2) == 19) << 32)), (uint64_t)v660);
                  }
                  WORD4(v697) = 257;
                  unint64_t v661 = sub_1CB844A3C(v373, v659, (uint64_t)v660, (uint64_t)&v695, 0, 0);
                  v663 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v646, (llvm::LLVMContext *)&v708, v662);
                  if ((*((_DWORD *)v646 + 2) & 0xFE) == 0x12) {
                    v663 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v646 + 8) | ((unint64_t)(*((_DWORD *)v646 + 2) == 19) << 32)), (uint64_t)v663);
                  }
                  WORD4(v697) = 257;
                  v664 = sub_1CB845F20(v373, v689, v661, (uint64_t)v663, (uint64_t)&v695);
                  if (v713 >= 0x41 && v712) {
                    MEMORY[0x1D25D9CB0](v712, 0x1000C8000313F17);
                  }
                  if (v709 >= 0x41 && v708) {
                    MEMORY[0x1D25D9CB0](v708, 0x1000C8000313F17);
                  }
                  if (v650 >= 0x41 && v655)
                  {
                    MEMORY[0x1D25D9CB0](v655, 0x1000C8000313F17);
                  }
                  else if (v650 < 0x41)
                  {
                    goto LABEL_1296;
                  }
                  if (v653) {
                    MEMORY[0x1D25D9CB0](v653, 0x1000C8000313F17);
                  }
LABEL_1296:
                  if (v664)
                  {
                    uint64_t v366 = v672;
                    uint64_t v367 = v683;
                    uint8x8_t v368 = v664;
                    return sub_1CC9D3C84(v366, v367, v368);
                  }
LABEL_709:
                  v378 = *(const char **)v679;
                  long long v690 = *(_OWORD *)(v679 + 8);
                  long long v691 = *(_OWORD *)(v679 + 24);
                  uint64_t v692 = *(void *)(v679 + 40);
                  if ((*((_WORD *)v683 + 9) & 0x3E) != 0x20) {
                    return 0;
                  }
                  uint64_t v379 = *((void *)v683 - 4);
                  if (!v379) {
                    return 0;
                  }
                  unsigned int v380 = *(unsigned __int8 *)(v379 + 16);
                  if (v380 > 0x14) {
                    return 0;
                  }
                  uint64_t v80 = *(void *)(v672 + 24);
                  if (v380 == 16)
                  {
                    uint64_t v381 = *(unsigned int *)(v379 + 32);
                    if (v381 < 0x41)
                    {
                      if (*(void *)(v379 + 24)) {
                        goto LABEL_715;
                      }
LABEL_716:
                      uint64_t v382 = *((void *)v683 - 8);
                      uint64_t v383 = *(void *)(v382 + 8);
                      if (!v383 || *(void *)(v383 + 8)) {
                        return 0;
                      }
                      int v693 = 0;
                      unsigned int v706 = 0;
                      v707 = 0;
                      uint64_t v695 = 0;
                      long long v696 = (unint64_t)&v693;
                      long long v697 = (unint64_t)&v706;
                      *(void *)&long long v698 = &v706;
                      *((void *)&v698 + 1) = &v707;
                      int v393 = *(unsigned __int8 *)(v382 + 16);
                      if (v393 == 5)
                      {
                        if (*(_WORD *)(v382 + 18) != 28) {
                          return 0;
                        }
                        uint64_t v431 = *(void *)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF));
                        unsigned int v432 = *(unsigned __int8 *)(v431 + 16);
                        BOOL v433 = v431 && v432 >= 0x1C;
                        BOOL v434 = !v433 || v432 - 53 > 1;
                        if (v434
                          || (int v693 = *(const llvm::APInt **)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF)),
                              uint64_t v398 = *(void *)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF) + 32),
                              int v533 = sub_1CD68C258((uint64_t)&v696 + 8, v398),
                              !v533)
                          || (v398 ? (BOOL v534 = *(unsigned __int8 *)(v398 + 16) > 0x1Bu) : (BOOL v534 = 0), !v534))
                        {
                          uint64_t v435 = *(void *)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF) + 32);
                          unsigned int v436 = *(unsigned __int8 *)(v435 + 16);
                          BOOL v437 = v435 && v436 >= 0x1C;
                          if (!v437 || v436 - 53 > 1) {
                            return 0;
                          }
                          int v693 = *(const llvm::APInt **)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF) + 32);
                          uint64_t v398 = *(void *)(v382 - 32 * (*(_DWORD *)(v382 + 20) & 0x7FFFFFF));
                          if (!sub_1CD68C258((uint64_t)&v696 + 8, v398)) {
                            return 0;
                          }
                          if (!v398 || *(unsigned __int8 *)(v398 + 16) < 0x1Cu) {
                            return 0;
                          }
                        }
                      }
                      else
                      {
                        if (v393 != 56) {
                          return 0;
                        }
                        uint64_t v394 = *(void *)(v382 - 64);
                        unsigned int v395 = *(unsigned __int8 *)(v394 + 16);
                        BOOL v396 = v394 && v395 >= 0x1C;
                        BOOL v397 = !v396 || v395 - 53 > 1;
                        if (v397
                          || (int v693 = *(const llvm::APInt **)(v382 - 64),
                              uint64_t v398 = *(void *)(v382 - 32),
                              !sub_1CCA793C8((uint64_t)&v696 + 8, v398))
                          || !v398
                          || *(unsigned __int8 *)(v398 + 16) <= 0x1Bu)
                        {
                          uint64_t v399 = *(void *)(v382 - 32);
                          if (!v399) {
                            return 0;
                          }
                          unsigned int v400 = *(unsigned __int8 *)(v399 + 16);
                          if (v400 < 0x1C || v400 - 53 > 1) {
                            return 0;
                          }
                          int v693 = *(const llvm::APInt **)(v382 - 32);
                          uint64_t v398 = *(void *)(v382 - 64);
                          if (!sub_1CCA793C8((uint64_t)&v696 + 8, v398)
                            || !v398
                            || *(unsigned __int8 *)(v398 + 16) < 0x1Cu)
                          {
                            return 0;
                          }
                        }
                      }
                      v707 = (unint64_t **)v398;
                      uint64_t v402 = v706;
                      uint64_t v403 = v693;
                      uint64_t v688 = *(void *)v706;
                      unsigned int v404 = *(char **)v693;
                      uint64_t v405 = **((void **)v683 - 8);
                      int v406 = *((unsigned __int8 *)v706 + 16);
                      if (v406 == 54) {
                        goto LABEL_756;
                      }
                      uint64_t v407 = (uint64_t)v693;
                      if (v406 != 5) {
                        goto LABEL_904;
                      }
                      if (*((_WORD *)v706 + 9) == 26)
                      {
LABEL_756:
                        int v693 = v706;
                        unsigned int v706 = v403;
                        uint64_t v407 = (uint64_t)v402;
                        int v406 = *((unsigned __int8 *)v403 + 16);
                      }
                      else
                      {
                        int v406 = 5;
                        uint64_t v407 = (uint64_t)v693;
                      }
LABEL_904:
                      LODWORD(v11) = *(unsigned __int8 *)(v407 + 16);
                      if (v11 == v406) {
                        return 0;
                      }
                      int v704 = 0;
                      unint64_t v705 = 0;
                      unint64_t v702 = 0;
                      int v703 = 0;
                      uint64_t v695 = (uint64_t)&v705;
                      *(void *)&long long v696 = &v704;
                      *((void *)&v696 + 1) = &v704;
                      sub_1CCA794E0((uint64_t)&v695, v407);
                      uint64_t v695 = (uint64_t)&v703;
                      *(void *)&long long v696 = &v702;
                      *((void *)&v696 + 1) = &v702;
                      sub_1CCA794E0((uint64_t)&v695, (uint64_t)v706);
                      if (v705[16] < 0x15u || v703[16] < 0x15u)
                      {
LABEL_907:
                        unint64_t v5 = *(void *)v704;
                        if (*(void *)v704 != *(void *)v702) {
                          return 0;
                        }
                        unint64_t v501 = (llvm::Type *)v688;
                        if ((*(_DWORD *)(v688 + 8) & 0xFE) == 0x12) {
                          unint64_t v501 = **(llvm::Type ***)(v688 + 16);
                        }
                        int v502 = llvm::Type::getPrimitiveSizeInBits(v501);
                        if ((*((_DWORD *)v404 + 2) & 0xFE) == 0x12) {
                          unsigned int v404 = (char *)**((void **)v404 + 2);
                        }
                        int v503 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v404);
                        if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
                          unint64_t v5 = **(void **)(v5 + 16);
                        }
                        unsigned int v504 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
                        LODWORD(v5) = v504;
                        if (v504 > 0x40) {
                          operator new[]();
                        }
                        if (v504)
                        {
                          unint64_t v168 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v504;
                          unint64_t v505 = v168;
                        }
                        else
                        {
                          unint64_t v168 = 0;
                          unint64_t v505 = 0;
                        }
                        if (v505 < (v502 + v503 - 2)) {
                          goto LABEL_1157;
                        }
                        uint64_t v695 = (uint64_t)v378;
                        long long v696 = v690;
                        *(void *)&long long v697 = v691;
                        *((void *)&v697 + 1) = v683;
                        *(void *)&long long v698 = v692;
                        unint64_t v506 = sub_1CC02A5B0(v704, v702, 0, 0, (uint64_t)&v695, (llvm::DSOLocalEquivalent **)3);
                        if (!v506 || *((unsigned __int8 *)v506 + 16) >= 0x15u) {
                          goto LABEL_1157;
                        }
                        uint64_t v508 = (llvm::Type *)v688;
                        ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast((llvm::Type **)v506, (llvm::Type ***)v688, v507);
                        if ((*(_DWORD *)(v688 + 8) & 0xFE) == 0x12) {
                          uint64_t v508 = **(llvm::Type ***)(v688 + 16);
                        }
                        unsigned int v509 = llvm::Type::getPrimitiveSizeInBits(v508);
                        unsigned int v510 = v509;
                        LODWORD(v709) = v509;
                        if (v509 > 0x40) {
                          operator new[]();
                        }
                        unint64_t v511 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v509;
                        if (!v509) {
                          LODWORD(v511) = 0;
                        }
                        unint64_t v708 = v511 & v509;
                        uint64_t v695 = 36;
                        *(void *)&long long v696 = &v708;
                        int v512 = sub_1CC9F981C((uint64_t)&v695, ZExtOrBitCast);
                        if (v709 >= 0x41 && v708) {
                          MEMORY[0x1D25D9CB0](v708, 0x1000C8000313F17);
                        }
                        if (!v512) {
                          goto LABEL_1157;
                        }
                        if (v688 == v405) {
                          goto LABEL_1099;
                        }
                        int v513 = *((unsigned __int8 *)v402 + 16);
                        if (v513 != 54 && (v513 != 5 || *((_WORD *)v402 + 9) != 26)) {
                          goto LABEL_1099;
                        }
                        SplatValue = (unsigned int *)ZExtOrBitCast;
                        if ((*(_DWORD *)(*(void *)ZExtOrBitCast + 8) & 0xFE) == 0x12)
                        {
                          SplatValue = (unsigned int *)llvm::Constant::getSplatValue(ZExtOrBitCast, 0);
                          if (!SplatValue)
                          {
                            char v524 = 1;
LABEL_1054:
                            int v581 = *((_DWORD *)v403 + 5);
                            if ((v581 & 0x40000000) != 0) {
                              v582 = (uint64_t **)*((void *)v403 - 1);
                            }
                            else {
                              v582 = (uint64_t **)((char *)v403 - 32 * (v581 & 0x7FFFFFF));
                            }
                            v583 = *v582;
                            unsigned int v584 = *((unsigned __int8 *)*v582 + 16);
                            if (v583) {
                              BOOL v585 = v584 > 0x14;
                            }
                            else {
                              BOOL v585 = 1;
                            }
                            if (!v585)
                            {
                              uint64_t v695 = (uint64_t)v378;
                              long long v696 = 0u;
                              long long v697 = 0u;
                              LOBYTE(v698) = 1;
                              sub_1CC16089C(v583, 0, (const llvm::DataLayout **)&v695, (uint64_t)&v708);
                              int v586 = v709;
                              if (v709 > 0x40)
                              {
                                unsigned int v686 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v708);
                              }
                              else if (v709)
                              {
                                unsigned int v686 = __clz(~(v708 << -(char)v709));
                              }
                              else
                              {
                                unsigned int v686 = 0;
                              }
                              if (v586 - v686 < 2) {
                                goto LABEL_1097;
                              }
                              if ((v524 & 1) == 0)
                              {
                                if (!SplatValue || (uint64_t v587 = SplatValue, *((unsigned char *)SplatValue + 16) != 16)) {
                                  uint64_t v587 = llvm::Constant::getAggregateElement((llvm::Constant *)SplatValue, 0);
                                }
                                v588 = v587 + 3;
                                uint64_t v589 = *((unsigned int *)v587 + 8);
                                if (v589 < 0x41) {
                                  goto LABEL_1078;
                                }
                                int v590 = 0;
                                int64_t v591 = (unint64_t)(v589 + 63) >> 6;
                                do
                                {
                                  BOOL v7 = v591-- < 1;
                                  if (v7) {
                                    break;
                                  }
                                  unint64_t v592 = *(void *)(*v588 + 8 * v591);
                                  v590 += __clz(v592);
                                }
                                while (!v592);
                                int v593 = v589 | 0xFFFFFFC0;
                                if ((v589 & 0x3F) == 0) {
                                  int v593 = 0;
                                }
                                if ((v589 - v590 - v593) <= 0x40)
                                {
LABEL_1078:
                                  if (v589 >= 0x41) {
                                    v588 = (void *)*v588;
                                  }
                                  if (*v588 <= (unint64_t)v686) {
                                    goto LABEL_1097;
                                  }
                                }
                              }
                              if (v710 >= 0x41 && *((void *)&v709 + 1)) {
                                MEMORY[0x1D25D9CB0](*((void *)&v709 + 1), 0x1000C8000313F17);
                              }
                              if (v709 >= 0x41 && v708) {
                                MEMORY[0x1D25D9CB0](v708, 0x1000C8000313F17);
                              }
                            }
                            int v594 = *((_DWORD *)v402 + 5);
                            if ((v594 & 0x40000000) != 0) {
                              v595 = (uint64_t **)*((void *)v402 - 1);
                            }
                            else {
                              v595 = (uint64_t **)((char *)v402 - 32 * (v594 & 0x7FFFFFF));
                            }
                            int8x8_t v596 = *v595;
                            unsigned int v597 = *((unsigned __int8 *)*v595 + 16);
                            if (v596) {
                              BOOL v598 = v597 > 0x14;
                            }
                            else {
                              BOOL v598 = 1;
                            }
                            if (v598)
                            {
LABEL_1157:
                              uint8x8_t v364 = 0;
                              goto LABEL_1158;
                            }
                            uint64_t v695 = (uint64_t)v378;
                            long long v696 = 0u;
                            long long v697 = 0u;
                            LOBYTE(v698) = 1;
                            sub_1CC16089C(v596, 0, (const llvm::DataLayout **)&v695, (uint64_t)&v708);
                            int v599 = v709;
                            if (v709 > 0x40)
                            {
                              unsigned int v600 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v708);
                            }
                            else if (v709)
                            {
                              unsigned int v600 = __clz(~(v708 << -(char)v709));
                            }
                            else
                            {
                              unsigned int v600 = 0;
                            }
                            if (v599 - v600 < 2) {
                              goto LABEL_1097;
                            }
                            if ((v524 & 1) == 0)
                            {
                              if (!SplatValue || *((unsigned char *)SplatValue + 16) != 16) {
                                SplatValue = (unsigned int *)llvm::Constant::getAggregateElement((llvm::Constant *)SplatValue, 0);
                              }
                              unsigned int v617 = SplatValue[8];
                              LODWORD(v713) = v617;
                              if (v617 > 0x40) {
                                operator new[]();
                              }
                              if (v617) {
                                unint64_t v623 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v617;
                              }
                              else {
                                unint64_t v623 = 0;
                              }
                              int v712 = (const char **)(v623 & ~*((void *)SplatValue + 3));
                              uint64_t v624 = llvm::APInt::operator++((uint64_t)&v712);
                              llvm::APInt::operator+=(v624, v510 - 1);
                              uint64_t v625 = v713;
                              LODWORD(v713) = 0;
                              if (v625 < 0x41)
                              {
                                if ((unint64_t)v712 > v600) {
                                  goto LABEL_1155;
                                }
LABEL_1097:
                                if (v710 >= 0x41)
                                {
LABEL_1214:
                                  if (*((void *)&v709 + 1)) {
                                    MEMORY[0x1D25D9CB0](*((void *)&v709 + 1), 0x1000C8000313F17);
                                  }
                                }
                                if (v709 >= 0x41 && v708) {
                                  MEMORY[0x1D25D9CB0](v708, 0x1000C8000313F17);
                                }
                                goto LABEL_1099;
                              }
                              int v626 = 0;
                              int64_t v627 = (unint64_t)(v625 + 63) >> 6;
                              do
                              {
                                BOOL v7 = v627-- < 1;
                                if (v7) {
                                  break;
                                }
                                unint64_t v628 = (unint64_t)v712[v627];
                                v626 += __clz(v628);
                              }
                              while (!v628);
                              int v629 = v625 | 0xFFFFFFC0;
                              if ((v625 & 0x3F) == 0) {
                                int v629 = 0;
                              }
                              if ((v625 - v626 - v629) > 0x40)
                              {
                                if (v712) {
                                  MEMORY[0x1D25D9CB0](v712, 0x1000C8000313F17);
                                }
                                goto LABEL_1155;
                              }
                              BOOL v630 = *v712;
                              MEMORY[0x1D25D9CB0]();
                              if ((unint64_t)v630 <= v600) {
                                goto LABEL_1097;
                              }
                            }
LABEL_1155:
                            if (v710 >= 0x41 && *((void *)&v709 + 1)) {
                              MEMORY[0x1D25D9CB0](*((void *)&v709 + 1), 0x1000C8000313F17);
                            }
                            if (v709 >= 0x41 && v708) {
                              MEMORY[0x1D25D9CB0](v708, 0x1000C8000313F17);
                            }
                            goto LABEL_1157;
                          }
                        }
                        int v515 = *((unsigned __int8 *)SplatValue + 16);
                        if (v515 == 16)
                        {
                          uint64_t v516 = SplatValue[8];
                          if (v516 >= 0x41)
                          {
                            int v632 = 0;
                            int64_t v633 = (unint64_t)(v516 + 63) >> 6;
                            do
                            {
                              BOOL v7 = v633-- < 1;
                              if (v7) {
                                break;
                              }
                              unint64_t v634 = *(void *)(*((void *)SplatValue + 3) + 8 * v633);
                              v632 += __clz(v634);
                            }
                            while (!v634);
                            int v635 = v516 | 0xFFFFFFC0;
                            if ((v516 & 0x3F) == 0) {
                              int v635 = 0;
                            }
                            unsigned int v517 = SplatValue;
                            if (v632 + v635 == v516) {
                              goto LABEL_1099;
                            }
                          }
                          else
                          {
                            unsigned int v517 = SplatValue;
                            if (!*((void *)SplatValue + 3)) {
                              goto LABEL_1099;
                            }
                          }
                          goto LABEL_938;
                        }
                        if (v515 == 17)
                        {
                          if (sub_1CB844168((uint64_t)SplatValue, 0.0)) {
                            goto LABEL_1099;
                          }
                          unsigned int v517 = SplatValue;
                          if (*((unsigned char *)SplatValue + 16) == 16) {
                            goto LABEL_938;
                          }
                        }
                        else if ((v515 - 18) < 3 || v515 == 13)
                        {
                          goto LABEL_1099;
                        }
                        unsigned int v517 = llvm::Constant::getAggregateElement((llvm::Constant *)SplatValue, 0);
LABEL_938:
                        char v518 = v517 + 3;
                        uint64_t v519 = *((unsigned int *)v517 + 8);
                        if (v519 >= 0x41)
                        {
                          int v520 = 0;
                          int64_t v521 = (unint64_t)(v519 + 63) >> 6;
                          do
                          {
                            BOOL v7 = v521-- < 1;
                            if (v7) {
                              break;
                            }
                            unint64_t v522 = *(void *)(*v518 + 8 * v521);
                            v520 += __clz(v522);
                          }
                          while (!v522);
                          int v523 = v519 | 0xFFFFFFC0;
                          if ((v519 & 0x3F) == 0) {
                            int v523 = 0;
                          }
                          if ((v519 - v520 - v523) > 0x40) {
                            goto LABEL_948;
                          }
                        }
                        if (v519 >= 0x41) {
                          char v518 = (void *)*v518;
                        }
                        if (*v518 != v510 - 1)
                        {
LABEL_948:
                          char v524 = 0;
                          goto LABEL_1054;
                        }
LABEL_1099:
                        uint8x8_t v601 = v705;
                        __int16 v711 = 257;
                        if (*(void *)v705 != v688)
                        {
                          if (v705[16] <= 0x14u)
                          {
                            uint8x8_t v601 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(v80 + 72) + 224))(*(void *)(v80 + 72), 39, v705, v688);
                            if (v601) {
                              BOOL v605 = v601[16] >= 0x1Cu;
                            }
                            else {
                              BOOL v605 = 0;
                            }
                            if (v605)
                            {
                              (*(void (**)(void, unsigned __int8 *, unint64_t *, void, void))(**(void **)(v80 + 80) + 16))(*(void *)(v80 + 80), v601, &v708, *(void *)(v80 + 48), *(void *)(v80 + 56));
                              uint64_t v665 = *(unsigned int *)(v80 + 8);
                              if (v665)
                              {
                                uint64_t v666 = *(void *)v80;
                                uint64_t v667 = *(void *)v80 + 16 * v665;
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v601, *(_DWORD *)v666, *(llvm::MDNode **)(v666 + 8));
                                  v666 += 16;
                                }
                                while (v666 != v667);
                              }
                            }
                          }
                          else
                          {
                            WORD4(v697) = 257;
                            uint8x8_t v601 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v705, v688, (const char **)&v695, 0);
                            (*(void (**)(void, unsigned __int8 *, unint64_t *, void, void))(**(void **)(v80 + 80) + 16))(*(void *)(v80 + 80), v601, &v708, *(void *)(v80 + 48), *(void *)(v80 + 56));
                            uint64_t v602 = *(unsigned int *)(v80 + 8);
                            if (v602)
                            {
                              uint64_t v603 = *(void *)v80;
                              uint64_t v604 = *(void *)v80 + 16 * v602;
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v601, *(_DWORD *)v603, *(llvm::MDNode **)(v603 + 8));
                                v603 += 16;
                              }
                              while (v603 != v604);
                            }
                          }
                        }
                        unint64_t v705 = v601;
                        uint64_t v606 = v703;
                        __int16 v711 = 257;
                        if (*(void *)v703 != v688)
                        {
                          if (v703[16] <= 0x14u)
                          {
                            uint64_t v606 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(v80 + 72) + 224))(*(void *)(v80 + 72), 39, v703, v688);
                            if (v606) {
                              BOOL v610 = v606[16] >= 0x1Cu;
                            }
                            else {
                              BOOL v610 = 0;
                            }
                            if (v610)
                            {
                              (*(void (**)(void, unsigned __int8 *, unint64_t *, void, void))(**(void **)(v80 + 80) + 16))(*(void *)(v80 + 80), v606, &v708, *(void *)(v80 + 48), *(void *)(v80 + 56));
                              uint64_t v668 = *(unsigned int *)(v80 + 8);
                              if (v668)
                              {
                                uint64_t v669 = *(void *)v80;
                                uint64_t v670 = *(void *)v80 + 16 * v668;
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v606, *(_DWORD *)v669, *(llvm::MDNode **)(v669 + 8));
                                  v669 += 16;
                                }
                                while (v669 != v670);
                              }
                            }
                          }
                          else
                          {
                            WORD4(v697) = 257;
                            uint64_t v606 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v703, v688, (const char **)&v695, 0);
                            (*(void (**)(void, unsigned __int8 *, unint64_t *, void, void))(**(void **)(v80 + 80) + 16))(*(void *)(v80 + 80), v606, &v708, *(void *)(v80 + 48), *(void *)(v80 + 56));
                            uint64_t v607 = *(unsigned int *)(v80 + 8);
                            if (v607)
                            {
                              uint64_t v608 = *(void *)v80;
                              uint64_t v609 = *(void *)v80 + 16 * v607;
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v606, *(_DWORD *)v608, *(llvm::MDNode **)(v608 + 8));
                                v608 += 16;
                              }
                              while (v608 != v609);
                            }
                          }
                        }
                        int v703 = v606;
                        WORD4(v697) = 257;
                        if (v11 == 54) {
                          unint64_t v611 = sub_1CC2429AC(v80, (uint64_t)v705, (uint64_t)ZExtOrBitCast, (uint64_t)&v695, 0);
                        }
                        else {
                          unint64_t v611 = sub_1CC242524(v80, (uint64_t)v705, (uint64_t)ZExtOrBitCast, (uint64_t)&v695, 0, 0);
                        }
                        WORD4(v697) = 257;
                        int v612 = sub_1CBF52474(v80, v611, (uint64_t)v703, (uint64_t)&v695);
                        __int16 v613 = *((_WORD *)v683 + 9) & 0x3F;
                        v616 = llvm::Constant::getNullValue((llvm::Constant *)v688, v614, v615);
                        WORD4(v697) = 257;
                        uint8x8_t v364 = sub_1CB845F20(v80, v613, v612, (uint64_t)v616, (uint64_t)&v695);
LABEL_1158:
                        if (v5 >= 0x41 && v168) {
                          MEMORY[0x1D25D9CB0](v168, 0x1000C8000313F17);
                        }
                        if (v364)
                        {
LABEL_699:
                          uint64_t v366 = v672;
                          uint64_t v367 = v683;
                          uint8x8_t v368 = v364;
                          return sub_1CC9D3C84(v366, v367, v368);
                        }
                        return 0;
                      }
                      uint64_t v525 = *((void *)v683 - 8);
                      int v526 = *(unsigned __int8 *)(v525 + 16);
                      if (v526 != 5)
                      {
                        if (v526 != 56) {
                          return 0;
                        }
                        uint64_t v527 = *(void *)(v525 - 64);
                        uint64_t v528 = *(void *)(v527 + 8);
                        if (!v528 || *(void *)(v528 + 8))
                        {
LABEL_953:
                          uint64_t v529 = *(void *)(v525 - 32);
                          uint64_t v530 = *(void *)(v529 + 8);
                          if (!v530 || *(void *)(v530 + 8)) {
                            return 0;
                          }
                          unsigned int v531 = *(unsigned __int8 *)(v529 + 16);
                          if (v531 >= 0x1C)
                          {
                            unsigned int v532 = v531 - 53;
LABEL_998:
                            if (v532 >= 2) {
                              return 0;
                            }
                            goto LABEL_1044;
                          }
LABEL_996:
                          if (v531 != 5) {
                            return 0;
                          }
                          unsigned int v532 = *(unsigned __int16 *)(v529 + 18) - 25;
                          goto LABEL_998;
                        }
                        unsigned int v562 = *(unsigned __int8 *)(v527 + 16);
                        if (v562 > 0x1B)
                        {
                          unsigned int v563 = v562 - 53;
                        }
                        else
                        {
                          if (v562 != 5) {
                            goto LABEL_953;
                          }
                          unsigned int v563 = *(unsigned __int16 *)(v527 + 18) - 25;
                        }
                        if (v563 >= 2) {
                          goto LABEL_953;
                        }
LABEL_1044:
                        if (v688 != v405)
                        {
                          int v577 = v707[1];
                          if (!v577 || v577[1])
                          {
                            int v578 = *((_DWORD *)v403 + 5);
                            unint64_t v579 = (v578 & 0x40000000) != 0
                                 ? (const llvm::APInt *)*((void *)v403 - 1)
                                 : (const llvm::APInt *)((char *)v403 - 32 * (v578 & 0x7FFFFFF));
                            uint64_t v580 = *(void *)(*((void *)v579 + 4) + 8);
                            if (!v580 || *(void *)(v580 + 8)) {
                              return 0;
                            }
                          }
                        }
                        goto LABEL_907;
                      }
                      if (*(_WORD *)(v525 + 18) != 28) {
                        return 0;
                      }
                      uint64_t v549 = (void *)(v525 - 32 * (*(_DWORD *)(v525 + 20) & 0x7FFFFFF));
                      uint64_t v550 = *v549;
                      uint64_t v551 = *(void *)(*v549 + 8);
                      if (!v551 || *(void *)(v551 + 8))
                      {
LABEL_993:
                        uint64_t v529 = v549[4];
                        uint64_t v552 = *(void *)(v529 + 8);
                        if (!v552 || *(void *)(v552 + 8)) {
                          return 0;
                        }
                        unsigned int v531 = *(unsigned __int8 *)(v529 + 16);
                        if (v531 <= 0x1B) {
                          goto LABEL_996;
                        }
                        if (v531 - 53 > 1) {
                          return 0;
                        }
                        goto LABEL_1044;
                      }
                      unsigned int v575 = *(unsigned __int8 *)(v550 + 16);
                      if (v575 > 0x1B)
                      {
                        unsigned int v576 = v575 - 53;
                      }
                      else
                      {
                        if (v575 != 5) {
                          goto LABEL_993;
                        }
                        unsigned int v576 = *(unsigned __int16 *)(v550 + 18) - 25;
                      }
                      if (v576 < 2) {
                        goto LABEL_1044;
                      }
                      goto LABEL_993;
                    }
                    int v564 = 0;
                    int64_t v565 = (unint64_t)(v381 + 63) >> 6;
                    do
                    {
                      BOOL v7 = v565-- < 1;
                      if (v7) {
                        break;
                      }
                      unint64_t v566 = *(void *)(*(void *)(v379 + 24) + 8 * v565);
                      v564 += __clz(v566);
                    }
                    while (!v566);
                    int v567 = v381 | 0xFFFFFFC0;
                    if ((v381 & 0x3F) == 0) {
                      int v567 = 0;
                    }
                    if (v564 + v567 == v381) {
                      goto LABEL_716;
                    }
                  }
                  else if (v380 == 17)
                  {
                    if (sub_1CB844168(*((void *)v683 - 4), 0.0)) {
                      goto LABEL_716;
                    }
                  }
                  else if (v380 - 18 < 3 || v380 == 13)
                  {
                    goto LABEL_716;
                  }
LABEL_715:
                  if ((sub_1CC03F414((uint64_t)&v695, (llvm::Constant *)v379) & 1) == 0) {
                    return 0;
                  }
                  goto LABEL_716;
                }
                uint64_t v349 = *(void *)(v672 + 24);
                *(void *)(v349 + 48) = *((void *)v706 + 5);
                *(void *)(v349 + 56) = (char *)v347 + 24;
                uint64_t v350 = (llvm::Constant *)*((void *)v347 + 6);
                int v712 = (const char **)v350;
                if (v350)
                {
                  llvm::MetadataTracking::track((uint64_t)&v712, (unsigned __int8 *)v350, 2);
                  uint64_t v351 = (llvm::Constant *)v712;
                }
                else
                {
                  uint64_t v351 = 0;
                }
                sub_1CB8461A4(v349, 0, (uint64_t)v351);
                if (v712)
                {
                  int v428 = *(unsigned __int8 *)v712;
                  if ((v428 - 4) > 0x1E)
                  {
                    if ((v428 - 3) >= 0xFFFFFFFE) {
                      v469 = v712;
                    }
                    else {
                      v469 = 0;
                    }
                    if ((v428 - 3) < 0xFFFFFFFE)
                    {
                      if (v428 == 3) {
                        v712[1] = 0;
                      }
                      goto LABEL_684;
                    }
                    unint64_t v430 = (unint64_t)(v469 + 1);
                  }
                  else
                  {
                    if ((*((unsigned char *)v712 + 1) & 0x7F) != 2 && !*((_DWORD *)v712 + 3)) {
                      goto LABEL_684;
                    }
                    unint64_t v429 = (unint64_t)v712[2];
                    if ((v429 & 4) == 0) {
                      goto LABEL_684;
                    }
                    unint64_t v430 = v429 & 0xFFFFFFFFFFFFFFF8;
                    if (!v430) {
                      goto LABEL_684;
                    }
                  }
                  uint64_t v695 = (uint64_t)&v712;
                  sub_1CC5FA668(v430 + 16, &v695);
                }
LABEL_684:
                int v352 = 1;
                goto LABEL_686;
              }
              if ((void)v709 != *(void *)(v333 - 64)
                || (sub_1CBF687D0((uint64_t)&v709 + 8, *(llvm::Constant **)(v333 - 32)) & 1) == 0)
              {
                goto LABEL_658;
              }
LABEL_645:
              int v336 = 1;
              goto LABEL_653;
            }
            uint64_t v4 = v5;
            if (v5 != v169)
            {
LABEL_630:
              switch((int)v688)
              {
                case ' ':
                  uint64_t v414 = *(uint64_t ***)v683;
                  BOOL v420 = **(uint64_t ***)v683;
                  uint64_t v421 = *v420;
                  uint8x8_t v364 = *(llvm::Value **)(*v420 + 1568);
                  if (!v364)
                  {
                    unint64_t v535 = *(llvm::ConstantInt **)(v421 + 1888);
                    unsigned int v536 = *(_DWORD *)(v421 + 1896);
                    LODWORD(v696) = v536 >> 8;
                    if (v536 >> 8 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v695 = 0;
                    uint8x8_t v364 = (llvm::Value *)llvm::ConstantInt::get(v535, (llvm::LLVMContext *)&v695, v17);
                    if (v696 >= 0x41 && v695) {
                      MEMORY[0x1D25D9CB0](v695, 0x1000C8000313F17);
                    }
                    *(void *)(v421 + 1568) = v364;
                  }
                  goto LABEL_771;
                case '!':
                  uint64_t v414 = *(uint64_t ***)v683;
                  uint64_t v415 = **(uint64_t ***)v683;
                  uint64_t v416 = *v415;
                  uint8x8_t v364 = *(llvm::Value **)(*v415 + 1560);
                  if (!v364)
                  {
                    uint64_t v417 = *(llvm::ConstantInt **)(v416 + 1888);
                    unsigned int v418 = *(_DWORD *)(v416 + 1896);
                    LODWORD(v696) = v418 >> 8;
                    if (v418 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v418 <= 0xFF) {
                      LOBYTE(v419) = 0;
                    }
                    else {
                      unint64_t v419 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v418) + 63);
                    }
                    uint64_t v695 = v419 & 1;
                    uint8x8_t v364 = (llvm::Value *)llvm::ConstantInt::get(v417, (llvm::LLVMContext *)&v695, v17);
                    if (v696 >= 0x41 && v695) {
                      MEMORY[0x1D25D9CB0](v695, 0x1000C8000313F17);
                    }
                    *(void *)(v416 + 1560) = v364;
                  }
LABEL_771:
                  if ((v414[1] & 0xFE) == 0x12) {
                    uint8x8_t v364 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v414 + 8) | ((unint64_t)(*((_DWORD *)v414 + 2) == 19) << 32)), (uint64_t)v364);
                  }
                  goto LABEL_699;
                case '&':
                case '\'':
                  goto LABEL_631;
                case '(':
                case ')':
                  goto LABEL_722;
                default:
                  goto LABEL_602;
              }
            }
LABEL_601:
            switch((int)v316)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 10:
              case 11:
              case 12:
              case 13:
              case 34:
              case 35:
              case 36:
              case 37:
                goto LABEL_602;
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
LABEL_1213:
                __break(1u);
                goto LABEL_1214;
              case 38:
              case 39:
LABEL_722:
                uint64_t v385 = (char *)operator new(0x80uLL);
                *((_DWORD *)v385 + 21) = *((_DWORD *)v385 + 21) & 0x38000000 | 2;
                unint64_t v3 = v385 + 64;
                *(void *)uint64_t v385 = 0;
                *((void *)v385 + 1) = 0;
                *((void *)v385 + 2) = 0;
                *((void *)v385 + 3) = v385 + 64;
                *((void *)v385 + 4) = 0;
                *((void *)v385 + 5) = 0;
                *((void *)v385 + 6) = 0;
                *((void *)v385 + 7) = v385 + 64;
                int v30 = *(unsigned __int8 **)(v4 - 32);
                AllOnesValue = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v386, v387);
                WORD4(v697) = 257;
                uint64_t v388 = *(void *)v30;
                uint64_t v52 = ***(void ***)v30 + 1888;
                if (*(void *)v30 && (*(_DWORD *)(v388 + 8) & 0xFE) == 0x12)
                {
                  uint64_t v540 = (uint64_t **)(***(void ***)v30 + 1888);
                  __int16 v541 = (llvm::Type *)*(unsigned int *)(v388 + 32);
                  if (*(_DWORD *)(v388 + 8) == 19) {
                    llvm::ScalableVectorType::get(v540, v541);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v540, v541);
                  }
                  uint64_t v52 = v542;
                }
                uint64_t v53 = (const char **)&v695;
                __int16 v54 = (llvm::Value *)v3;
                __int16 v55 = 40;
                goto LABEL_214;
              case 40:
              case 41:
LABEL_631:
                uint64_t v328 = (char *)operator new(0x80uLL);
                *((_DWORD *)v328 + 21) = *((_DWORD *)v328 + 21) & 0x38000000 | 2;
                unint64_t v3 = v328 + 64;
                *(void *)uint64_t v328 = 0;
                *((void *)v328 + 1) = 0;
                *((void *)v328 + 2) = 0;
                *((void *)v328 + 3) = v328 + 64;
                *((void *)v328 + 4) = 0;
                *((void *)v328 + 5) = 0;
                *((void *)v328 + 6) = 0;
                *((void *)v328 + 7) = v328 + 64;
                int v30 = *(unsigned __int8 **)(v4 - 32);
                AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v4, v329, v330);
                WORD4(v697) = 257;
                uint64_t v331 = *(void *)v30;
                uint64_t v52 = ***(void ***)v30 + 1888;
                if (*(void *)v30 && (*(_DWORD *)(v331 + 8) & 0xFE) == 0x12)
                {
                  unint64_t v537 = (uint64_t **)(***(void ***)v30 + 1888);
                  unint64_t v538 = (llvm::Type *)*(unsigned int *)(v331 + 32);
                  if (*(_DWORD *)(v331 + 8) == 19) {
                    llvm::ScalableVectorType::get(v537, v538);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v537, v538);
                  }
                  uint64_t v52 = v539;
                }
                uint64_t v53 = (const char **)&v695;
                __int16 v54 = (llvm::Value *)v3;
                __int16 v55 = 38;
                goto LABEL_214;
              default:
                goto LABEL_630;
            }
          }
LABEL_597:
          if (!v11) {
            goto LABEL_616;
          }
          goto LABEL_598;
        }
      }
      __int16 v389 = (char *)operator new(0x80uLL);
      unint64_t v3 = v389 + 64;
      *((_DWORD *)v389 + 21) = *((_DWORD *)v389 + 21) & 0x38000000 | 2;
      *(void *)__int16 v389 = 0;
      *((void *)v389 + 1) = 0;
      *((void *)v389 + 2) = 0;
      *((void *)v389 + 3) = v389 + 64;
      *((void *)v389 + 4) = 0;
      *((void *)v389 + 5) = 0;
      *((void *)v389 + 6) = 0;
      *((void *)v389 + 7) = v389 + 64;
      int v30 = (unsigned __int8 *)v712;
      AllOnesValue = v693;
      goto LABEL_199;
    }
LABEL_591:
    if (!v169) {
      goto LABEL_597;
    }
    goto LABEL_592;
  }
  unsigned int v222 = (char *)operator new(0x80uLL);
  unint64_t v3 = v222 + 64;
  *((_DWORD *)v222 + 21) = *((_DWORD *)v222 + 21) & 0x38000000 | 2;
  *(void *)unsigned int v222 = 0;
  *((void *)v222 + 1) = 0;
  *((void *)v222 + 2) = 0;
  *((void *)v222 + 3) = v222 + 64;
  *((void *)v222 + 4) = 0;
  *((void *)v222 + 5) = 0;
  *((void *)v222 + 6) = 0;
  *((void *)v222 + 7) = v222 + 64;
  WORD4(v697) = 257;
  uint64_t v223 = (void **)*v167;
  uint64_t v224 = **(void **)*v167 + 1888;
  if (*v167 && (v223[1] & 0xFE) == 0x12)
  {
    uint64_t v425 = (uint64_t **)(**(void **)*v167 + 1888);
    BOOL v426 = (llvm::Type *)*((unsigned int *)v223 + 8);
    if (*((_DWORD *)v223 + 2) == 19) {
      llvm::ScalableVectorType::get(v425, v426);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v425, v426);
    }
    uint64_t v224 = v427;
  }
  llvm::CmpInst::CmpInst((llvm::Value *)v3, v224, 53, v688, (uint64_t)v167, v189, (const char **)&v695, 0, 0);
  return (llvm::UndefValue **)v3;
}

int8x8_t *sub_1CCA64094(uint64_t a1, uint64_t ***a2, const llvm::APInt *a3)
{
  __int16 v3 = *((_WORD *)a2 + 9);
  if ((v3 & 0x3E) != 0x20) {
    return 0;
  }
  uint64_t v6 = (uint64_t)*(a2 - 8);
  uint64_t v7 = (uint64_t)*(a2 - 4);
  int v8 = v3 & 0x3F;
  uint64_t v372 = 0;
  int v9 = *(unsigned __int8 *)(v6 + 16);
  if (v9 != 5)
  {
    if (v9 != 58) {
      goto LABEL_34;
    }
    unsigned int v10 = *(llvm::Value **)(v6 - 64);
    if (!v10) {
      goto LABEL_34;
    }
    uint64_t v372 = *(llvm::Value **)(v6 - 64);
    uint64_t v11 = *(void *)(v6 - 32);
    if (!v11) {
      goto LABEL_34;
    }
LABEL_10:
    if (v10 == (llvm::Value *)v7 || v11 == v7)
    {
      unsigned int v14 = (int8x8_t *)operator new(0x80uLL);
      char v17 = v14 + 8;
      v14[10].i32[1] = v14[10].i32[1] & 0x38000000 | 2;
      *unsigned int v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = (int8x8_t)&v14[8];
      v14[4] = 0;
      uint64_t v14[5] = 0;
      v14[6] = 0;
      v14[7] = (int8x8_t)&v14[8];
      if (v10 == (llvm::Value *)v7) {
        unint64_t v18 = (llvm::Constant **)v11;
      }
      else {
        unint64_t v18 = (llvm::Constant **)v10;
      }
      goto LABEL_50;
    }
    int v19 = *(unsigned __int8 *)(v7 + 16);
    if (v19 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 30) {
        goto LABEL_34;
      }
      uint64_t v22 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      uint64_t v20 = *v22;
      if (!*v22) {
        goto LABEL_34;
      }
      uint64_t v21 = v22[4];
      if (!v21) {
        goto LABEL_34;
      }
    }
    else
    {
      if (v19 != 58) {
        goto LABEL_34;
      }
      uint64_t v20 = *(void *)(v7 - 64);
      if (!v20) {
        goto LABEL_34;
      }
      uint64_t v21 = *(void *)(v7 - 32);
      if (!v21) {
        goto LABEL_34;
      }
    }
    if (*(unsigned char *)(v11 + 16) == 16 && *(unsigned char *)(v21 + 16) == 16)
    {
      uint64_t v23 = *(void *)(v7 + 8);
      if (v23)
      {
        if (!*(void *)(v23 + 8))
        {
          uint64_t v231 = *(void *)(a1 + 24);
          if (*(_DWORD *)(v11 + 32) > 0x40u) {
            operator new[]();
          }
          unsigned int v232 = (llvm::Value **)(*(void *)(v21 + 24) ^ *(void *)(v11 + 24));
          LODWORD(v374) = *(_DWORD *)(v11 + 32);
          uint64_t v373 = v232;
          BOOL v240 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v231 + 64), (llvm::LLVMContext *)&v373, a3);
          if (v374 >= 0x41 && v373) {
            MEMORY[0x1D25D9CB0](v373, 0x1000C8000313F17);
          }
          uint64_t v241 = *(void *)(a1 + 24);
          __int16 v376 = 257;
          uint64_t v119 = sub_1CC2428C0(v241, v20, (uint64_t)v240, (uint64_t)&v373);
          uint64_t v242 = (int8x8_t *)operator new(0x80uLL);
          char v17 = v242 + 8;
          v242[10].i32[1] = v242[10].i32[1] & 0x38000000 | 2;
          *uint64_t v242 = 0;
          v242[1] = 0;
          v242[2] = 0;
          v242[3] = (int8x8_t)&v242[8];
          v242[4] = 0;
          v242[5] = 0;
          v242[6] = 0;
          v242[7] = (int8x8_t)&v242[8];
          __int16 v376 = 257;
          unsigned int v243 = *(llvm::Constant **)v372;
          uint64_t v64 = ***(void ***)v372 + 1888;
          if (*(void *)v372 && (*((_DWORD *)v243 + 2) & 0xFE) == 0x12)
          {
            __int16 v340 = (uint64_t **)(***(void ***)v372 + 1888);
            int v341 = (llvm::Type *)*((unsigned int *)v243 + 8);
            if (*((_DWORD *)v243 + 2) == 19) {
              llvm::ScalableVectorType::get(v340, v341);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v340, v341);
            }
            uint64_t v64 = v342;
          }
          p_src = (void **)&v373;
          uint64_t v66 = (llvm::Value *)v17;
          __int16 v67 = v8;
          int v73 = v372;
          goto LABEL_462;
        }
      }
    }
    if (v10 == (llvm::Value *)v20)
    {
      unsigned int v184 = (int8x8_t *)operator new(0x80uLL);
      char v17 = v184 + 8;
      v184[10].i32[1] = v184[10].i32[1] & 0x38000000 | 2;
      int8x8_t *v184 = 0;
      v184[1] = 0;
      v184[2] = 0;
      v184[3] = (int8x8_t)&v184[8];
      v184[4] = 0;
      v184[5] = 0;
      v184[6] = 0;
      v184[7] = (int8x8_t)&v184[8];
      __int16 v376 = 257;
      unsigned int v185 = *(llvm::Constant **)v11;
      uint64_t v64 = ***(void ***)v11 + 1888;
      if (*(void *)v11 && (*((_DWORD *)v185 + 2) & 0xFE) == 0x12)
      {
        int v322 = (uint64_t **)(***(void ***)v11 + 1888);
        uint64_t v323 = (llvm::Type *)*((unsigned int *)v185 + 8);
        if (*((_DWORD *)v185 + 2) == 19) {
          llvm::ScalableVectorType::get(v322, v323);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v322, v323);
        }
        uint64_t v64 = v324;
      }
      p_src = (void **)&v373;
      uint64_t v66 = (llvm::Value *)v17;
      __int16 v67 = v8;
      int v73 = (llvm::Value *)v11;
    }
    else
    {
      if (v10 == (llvm::Value *)v21)
      {
        unint64_t v193 = (int8x8_t *)operator new(0x80uLL);
        char v17 = v193 + 8;
        v193[10].i32[1] = v193[10].i32[1] & 0x38000000 | 2;
        *unint64_t v193 = 0;
        v193[1] = 0;
        v193[2] = 0;
        v193[3] = (int8x8_t)&v193[8];
        v193[4] = 0;
        v193[5] = 0;
        v193[6] = 0;
        v193[7] = (int8x8_t)&v193[8];
        __int16 v376 = 257;
        int v194 = *(llvm::Constant **)v11;
        uint64_t v64 = ***(void ***)v11 + 1888;
        if (*(void *)v11 && (*((_DWORD *)v194 + 2) & 0xFE) == 0x12)
        {
          uint64_t v325 = (uint64_t **)(***(void ***)v11 + 1888);
          uint64_t v326 = (llvm::Type *)*((unsigned int *)v194 + 8);
          if (*((_DWORD *)v194 + 2) == 19) {
            llvm::ScalableVectorType::get(v325, v326);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v325, v326);
          }
          uint64_t v64 = v327;
        }
        p_src = (void **)&v373;
        uint64_t v66 = (llvm::Value *)v17;
        __int16 v67 = v8;
        int v73 = (llvm::Value *)v11;
LABEL_410:
        uint64_t v74 = v20;
        goto LABEL_130;
      }
      if (v11 != v20)
      {
        if (v11 != v21) {
          goto LABEL_34;
        }
        int v218 = (int8x8_t *)operator new(0x80uLL);
        char v17 = v218 + 8;
        v218[10].i32[1] = v218[10].i32[1] & 0x38000000 | 2;
        int8x8_t *v218 = 0;
        v218[1] = 0;
        v218[2] = 0;
        v218[3] = (int8x8_t)&v218[8];
        v218[4] = 0;
        v218[5] = 0;
        v218[6] = 0;
        v218[7] = (int8x8_t)&v218[8];
        __int16 v376 = 257;
        int v219 = *(llvm::Constant **)v372;
        uint64_t v64 = ***(void ***)v372 + 1888;
        if (*(void *)v372 && (*((_DWORD *)v219 + 2) & 0xFE) == 0x12)
        {
          uint64_t v337 = (uint64_t **)(***(void ***)v372 + 1888);
          __int16 v338 = (llvm::Type *)*((unsigned int *)v219 + 8);
          if (*((_DWORD *)v219 + 2) == 19) {
            llvm::ScalableVectorType::get(v337, v338);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v337, v338);
          }
          uint64_t v64 = v339;
        }
        p_src = (void **)&v373;
        uint64_t v66 = (llvm::Value *)v17;
        __int16 v67 = v8;
        int v73 = v372;
        goto LABEL_410;
      }
      int v205 = (int8x8_t *)operator new(0x80uLL);
      char v17 = v205 + 8;
      v205[10].i32[1] = v205[10].i32[1] & 0x38000000 | 2;
      *int v205 = 0;
      v205[1] = 0;
      v205[2] = 0;
      v205[3] = (int8x8_t)&v205[8];
      v205[4] = 0;
      v205[5] = 0;
      v205[6] = 0;
      v205[7] = (int8x8_t)&v205[8];
      __int16 v376 = 257;
      unint64_t v206 = *(llvm::Constant **)v372;
      uint64_t v64 = ***(void ***)v372 + 1888;
      if (*(void *)v372 && (*((_DWORD *)v206 + 2) & 0xFE) == 0x12)
      {
        uint64_t v334 = (uint64_t **)(***(void ***)v372 + 1888);
        int v335 = (llvm::Type *)*((unsigned int *)v206 + 8);
        if (*((_DWORD *)v206 + 2) == 19) {
          llvm::ScalableVectorType::get(v334, v335);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v334, v335);
        }
        uint64_t v64 = v336;
      }
      p_src = (void **)&v373;
      uint64_t v66 = (llvm::Value *)v17;
      __int16 v67 = v8;
      int v73 = v372;
    }
    uint64_t v74 = v21;
LABEL_130:
    llvm::CmpInst::CmpInst(v66, v64, 53, v67, (uint64_t)v73, v74, (const char **)p_src, 0, 0);
    return v17;
  }
  if (*(_WORD *)(v6 + 18) == 30)
  {
    uint64_t v12 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    unsigned int v10 = *(llvm::Value **)v12;
    if (*(void *)v12)
    {
      uint64_t v372 = *(llvm::Value **)v12;
      uint64_t v11 = *(void *)(v12 + 32);
      if (v11) {
        goto LABEL_10;
      }
    }
  }
LABEL_34:
  int v24 = *(unsigned __int8 *)(v7 + 16);
  if (v24 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 30) {
      goto LABEL_55;
    }
    uint64_t v27 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
    int v25 = *(llvm::Value **)v27;
    if (!*(void *)v27) {
      goto LABEL_55;
    }
    uint64_t v372 = *(llvm::Value **)v27;
    int v26 = *(llvm::Constant ***)(v27 + 32);
    if (!v26) {
      goto LABEL_55;
    }
  }
  else
  {
    if (v24 != 58) {
      goto LABEL_55;
    }
    int v25 = *(llvm::Value **)(v7 - 64);
    if (!v25) {
      goto LABEL_55;
    }
    uint64_t v372 = *(llvm::Value **)(v7 - 64);
    int v26 = *(llvm::Constant ***)(v7 - 32);
    if (!v26) {
      goto LABEL_55;
    }
  }
  if (v25 == (llvm::Value *)v6 || v26 == (llvm::Constant **)v6)
  {
    int v29 = (int8x8_t *)operator new(0x80uLL);
    char v17 = v29 + 8;
    v29[10].i32[1] = v29[10].i32[1] & 0x38000000 | 2;
    int8x8_t *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = (int8x8_t)&v29[8];
    v29[4] = 0;
    v29[5] = 0;
    v29[6] = 0;
    v29[7] = (int8x8_t)&v29[8];
    if (v25 == (llvm::Value *)v6) {
      unint64_t v18 = v26;
    }
    else {
      unint64_t v18 = (llvm::Constant **)v25;
    }
LABEL_50:
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v372, v15, v16);
    __int16 v376 = 257;
    uint64_t v31 = *v18;
    int v32 = *((_DWORD *)*v18 + 2);
    uint64_t v33 = **(void **)*v18 + 1888;
    if (*v18) {
      BOOL v34 = (*((_DWORD *)*v18 + 2) & 0xFE) == 18;
    }
    else {
      BOOL v34 = 0;
    }
    if (!v34) {
      goto LABEL_54;
    }
    goto LABEL_479;
  }
LABEL_55:
  uint64_t v35 = *(void *)(v6 + 8);
  if (!v35 || *(void *)(v35 + 8)) {
    goto LABEL_88;
  }
  if (v9 == 5)
  {
    if (*(_WORD *)(v6 + 18) != 28) {
      goto LABEL_73;
    }
    uint64_t v40 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    BOOL v36 = *(llvm::Value **)v40;
    if (!*(void *)v40) {
      goto LABEL_73;
    }
    uint64_t v372 = *(llvm::Value **)v40;
    BOOL v37 = *(llvm::Value **)(v40 + 32);
    if (!v37) {
      goto LABEL_73;
    }
LABEL_70:
    uint64_t v41 = *(void *)(v7 + 8);
    if (!v41 || *(void *)(v41 + 8))
    {
LABEL_72:
      if (v9 != 5) {
        goto LABEL_78;
      }
LABEL_73:
      if (*(_WORD *)(v6 + 18) != 29) {
        goto LABEL_78;
      }
      int v42 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      uint64_t v38 = *v42;
      if (!*v42) {
        goto LABEL_78;
      }
      uint64_t v39 = v42[4];
      if (!v39) {
        goto LABEL_78;
      }
      goto LABEL_76;
    }
    if (v24 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 28) {
        goto LABEL_72;
      }
      int v207 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      uint64_t v186 = *v207;
      if (!*v207) {
        goto LABEL_72;
      }
      uint64_t v187 = (llvm::Value *)v207[4];
      if (!v187) {
        goto LABEL_72;
      }
    }
    else
    {
      if (v24 != 56) {
        goto LABEL_72;
      }
      uint64_t v186 = *(void *)(v7 - 64);
      if (!v186) {
        goto LABEL_72;
      }
      uint64_t v187 = *(llvm::Value **)(v7 - 32);
      if (!v187) {
        goto LABEL_72;
      }
    }
    if (v36 == (llvm::Value *)v186)
    {
      uint64_t v208 = v36;
      uint64_t v186 = (uint64_t)v187;
    }
    else
    {
      if (v36 != v187)
      {
        if (v37 == (llvm::Value *)v186)
        {
          uint64_t v208 = v37;
          uint64_t v186 = (uint64_t)v187;
        }
        else
        {
          uint64_t v208 = v37;
          if (v37 != v187) {
            goto LABEL_72;
          }
        }
LABEL_476:
        uint64_t v252 = *(void *)(a1 + 24);
        __int16 v376 = 257;
        uint8x8_t v217 = sub_1CC2428C0(v252, (uint64_t)v36, v186, (uint64_t)&v373);
        uint64_t v216 = *(void *)(a1 + 24);
        __int16 v376 = 257;
        Not = v208;
        goto LABEL_477;
      }
      uint64_t v208 = v36;
    }
    BOOL v36 = v37;
    goto LABEL_476;
  }
  if (v9 != 57)
  {
    if (v9 != 56) {
      goto LABEL_78;
    }
    BOOL v36 = *(llvm::Value **)(v6 - 64);
    if (!v36) {
      goto LABEL_78;
    }
    uint64_t v372 = *(llvm::Value **)(v6 - 64);
    BOOL v37 = *(llvm::Value **)(v6 - 32);
    if (!v37) {
      goto LABEL_78;
    }
    goto LABEL_70;
  }
  uint64_t v38 = *(void *)(v6 - 64);
  if (v38)
  {
    uint64_t v39 = *(void *)(v6 - 32);
    if (v39)
    {
      if (*(unsigned __int8 *)(v39 + 16) <= 0x14u)
      {
LABEL_76:
        uint64_t v43 = *(void *)(v7 + 8);
        if (!v43 || *(void *)(v43 + 8)) {
          goto LABEL_78;
        }
        if (v24 == 5)
        {
          if (*(_WORD *)(v7 + 18) != 29) {
            goto LABEL_78;
          }
          int v209 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
          uint64_t v188 = *v209;
          if (!*v209) {
            goto LABEL_78;
          }
          uint64_t v189 = v209[4];
        }
        else
        {
          if (v24 != 57) {
            goto LABEL_78;
          }
          uint64_t v188 = *(void *)(v7 - 64);
          if (!v188) {
            goto LABEL_78;
          }
          uint64_t v189 = *(void *)(v7 - 32);
        }
        if (v39 != v189) {
          goto LABEL_78;
        }
        uint64_t v210 = *(void *)(a1 + 24);
        __int16 v376 = 257;
        int v211 = sub_1CC2428C0(v210, v38, v188, (uint64_t)&v373);
        uint64_t v212 = *(void *)(a1 + 24);
        Not = llvm::ConstantExpr::getNot((llvm::Constant **)v39, v213, v214);
        __int16 v376 = 257;
        uint64_t v216 = v212;
        uint8x8_t v217 = v211;
LABEL_477:
        unint64_t v18 = (llvm::Constant **)sub_1CBF52474(v216, v217, (uint64_t)Not, (uint64_t)&v373);
        uint64_t v253 = (int8x8_t *)operator new(0x80uLL);
        char v17 = v253 + 8;
        v253[10].i32[1] = v253[10].i32[1] & 0x38000000 | 2;
        *uint64_t v253 = 0;
        v253[1] = 0;
        v253[2] = 0;
        v253[3] = (int8x8_t)&v253[8];
        v253[4] = 0;
        v253[5] = 0;
        v253[6] = 0;
        v253[7] = (int8x8_t)&v253[8];
        NullValue = llvm::Constant::getNullValue(*v18, v254, v255);
        __int16 v376 = 257;
        uint64_t v31 = *v18;
        uint64_t v33 = **(void **)*v18 + 1888;
        if (!*v18 || (int v32 = *((_DWORD *)v31 + 2), (v32 & 0xFE) != 0x12))
        {
LABEL_54:
          llvm::CmpInst::CmpInst((llvm::Value *)v17, v33, 53, v8, (uint64_t)v18, (uint64_t)NullValue, (const char **)&v373, 0, 0);
          return v17;
        }
LABEL_479:
        unsigned int v256 = (uint64_t **)v33;
        uint64_t v257 = (llvm::Type *)*((unsigned int *)v31 + 8);
        if (v32 == 19) {
          llvm::ScalableVectorType::get(v256, v257);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v256, v257);
        }
        uint64_t v33 = v258;
        goto LABEL_54;
      }
    }
  }
LABEL_78:
  uint64_t v373 = &v372;
  if (sub_1CBC5BE40(&v373, v6))
  {
    int v44 = *(unsigned __int8 *)(v7 + 16);
    if (v44 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 28) {
        goto LABEL_88;
      }
      uint64_t v46 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
      int v45 = *(unsigned __int8 **)v46;
      if (!*(void *)v46) {
        goto LABEL_88;
      }
      char v17 = *(int8x8_t **)(v46 + 32);
      if (!v17) {
        goto LABEL_88;
      }
    }
    else
    {
      if (v44 != 56) {
        goto LABEL_88;
      }
      int v45 = *(unsigned __int8 **)(v7 - 64);
      if (!v45) {
        goto LABEL_88;
      }
      char v17 = *(int8x8_t **)(v7 - 32);
      if (!v17) {
        goto LABEL_88;
      }
    }
    if (v17[2].i8[0] == 16) {
      goto LABEL_193;
    }
  }
LABEL_88:
  uint64_t v47 = *(void *)(v7 + 8);
  if (!v47 || *(void *)(v47 + 8)) {
    goto LABEL_90;
  }
  int v82 = *(unsigned __int8 *)(v6 + 16);
  if (v82 == 5)
  {
    if (*(_WORD *)(v6 + 18) != 28) {
      goto LABEL_90;
    }
    uint64_t v100 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    int v45 = *(unsigned __int8 **)v100;
    if (!*(void *)v100) {
      goto LABEL_90;
    }
    char v17 = *(int8x8_t **)(v100 + 32);
    if (!v17 || v17[2].i8[0] != 16) {
      goto LABEL_90;
    }
  }
  else
  {
    if (v82 != 56) {
      goto LABEL_90;
    }
    int v45 = *(unsigned __int8 **)(v6 - 64);
    if (!v45) {
      goto LABEL_90;
    }
    char v17 = *(int8x8_t **)(v6 - 32);
    if (!v17 || v17[2].i8[0] != 16) {
      goto LABEL_90;
    }
  }
  __src = &v372;
  if ((sub_1CBC5BE40((void **)&__src, v7) & 1) == 0) {
    goto LABEL_90;
  }
LABEL_193:
  unsigned int v371 = v17[4].u32[0];
  if (v371 > 0x40) {
    operator new[]();
  }
  int v370 = (int8x8_t *)v17[3];
  llvm::APInt::operator+=((uint64_t)&v370, 1uLL);
  uint64_t v157 = v371;
  int8x8_t v158 = (int8x8_t)v370;
  unsigned int v371 = 0;
  if (v157 <= 0x40)
  {
    uint8x8_t v159 = (uint8x8_t)vcnt_s8((int8x8_t)v370);
    v159.i16[0] = vaddlv_u8(v159);
    if (v159.u32[0] != 1) {
      goto LABEL_90;
    }
    unsigned int v160 = *(_DWORD *)(*(void *)v372 + 8);
    if (v160 != 13) {
      goto LABEL_90;
    }
    int v161 = v157 + __clz((unint64_t)v370) - 64;
LABEL_325:
    int v172 = v157 + ~v161;
    BOOL v173 = v172 != v160 >> 8;
    if (v172 != v160 >> 8) {
      goto LABEL_427;
    }
    uint64_t v174 = (int8x8_t *)operator new(0x80uLL);
    char v17 = v174 + 8;
    v174[10].i32[1] = v174[10].i32[1] & 0x38000000 | 2;
    *uint64_t v174 = 0;
    v174[1] = 0;
    v174[2] = 0;
    v174[3] = (int8x8_t)&v174[8];
    v174[4] = 0;
    v174[5] = 0;
    v174[6] = 0;
    v174[7] = (int8x8_t)&v174[8];
    uint64_t v175 = v372;
    uint64_t v176 = *(uint64_t **)(a1 + 24);
    BOOL v177 = *(llvm::Constant **)v372;
    __int16 v369 = 257;
    uint64_t v362 = v372;
    if (*(llvm::Constant **)v45 != v177)
    {
      if (v45[16] <= 0x14u)
      {
        uint8x8_t v358 = v176;
        int v45 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, llvm::Constant *))(*(void *)v176[9] + 224))(v176[9], 38, v45, v177);
        if (v45) {
          BOOL v223 = v45[16] >= 0x1Cu;
        }
        else {
          BOOL v223 = 0;
        }
        if (!v223)
        {
          uint64_t v175 = v362;
          goto LABEL_422;
        }
        BOOL v361 = v173;
        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v358[10] + 16))(v358[10], v45, &__src, v358[6], v358[7]);
        uint64_t v352 = *((unsigned int *)v358 + 2);
        if (v352)
        {
          uint64_t v353 = *v358;
          uint64_t v360 = *v358 + 16 * v352;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v353, *(llvm::MDNode **)(v353 + 8));
            v353 += 16;
          }
          while (v353 != v360);
        }
      }
      else
      {
        BOOL v361 = v173;
        __int16 v376 = 257;
        uint64_t v178 = v176;
        int v45 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v45, (uint64_t)v177, (const char **)&v373, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v178[10] + 16))(v178[10], v45, &__src, v178[6], v178[7]);
        uint64_t v179 = *((unsigned int *)v178 + 2);
        if (v179)
        {
          uint64_t v293 = *v178;
          uint64_t v359 = v293 + 16 * v179;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v293, *(llvm::MDNode **)(v293 + 8));
            v293 += 16;
          }
          while (v293 != v359);
        }
      }
      uint64_t v175 = v362;
      BOOL v173 = v361;
    }
LABEL_422:
    __int16 v376 = 257;
    uint64_t v224 = ***(void ***)v175;
    uint64_t v225 = v224 + 1888;
    if (*(void *)v175) {
      BOOL v226 = (*(_DWORD *)(*(void *)v175 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v226 = 0;
    }
    if (v226)
    {
      uint64_t v331 = (uint64_t **)(v224 + 1888);
      int v332 = (llvm::Type *)*(unsigned int *)(*(void *)v175 + 32);
      if (*(_DWORD *)(*(void *)v175 + 8) == 19) {
        llvm::ScalableVectorType::get(v331, v332);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v331, v332);
      }
      uint64_t v225 = v333;
      uint64_t v175 = v362;
    }
    llvm::CmpInst::CmpInst((llvm::Value *)v17, v225, 53, v8, (uint64_t)v175, (uint64_t)v45, (const char **)&v373, 0, 0);
LABEL_427:
    if (v157 < 0x41) {
      goto LABEL_430;
    }
    goto LABEL_428;
  }
  int v162 = 0;
  int64_t v163 = (unint64_t)(v157 + 63) >> 6;
  size_t v164 = v370;
  int64_t v165 = v163;
  do
  {
    int8x8_t v166 = *v164++;
    uint8x8_t v167 = (uint8x8_t)vcnt_s8(v166);
    v167.i16[0] = vaddlv_u8(v167);
    v162 += v167.i32[0];
    --v165;
  }
  while (v165);
  if (v162 == 1)
  {
    unsigned int v160 = *(_DWORD *)(*(void *)v372 + 8);
    if (v160 == 13)
    {
      int v168 = 0;
      do
      {
        BOOL v169 = v163-- < 1;
        if (v169) {
          break;
        }
        unint64_t v170 = (unint64_t)v370[v163];
        v168 += __clz(v170);
      }
      while (!v170);
      int v171 = v157 | 0xFFFFFFC0;
      if ((v157 & 0x3F) == 0) {
        int v171 = 0;
      }
      int v161 = v168 + v171;
      goto LABEL_325;
    }
  }
  BOOL v173 = 1;
LABEL_428:
  if (v158) {
    MEMORY[0x1D25D9CB0](*(void *)&v158, 0x1000C8000313F17);
  }
LABEL_430:
  if (!v173) {
    return v17;
  }
LABEL_90:
  uint64_t v48 = *(void *)(v6 + 8);
  if (!v48 || *(void *)(v48 + 8))
  {
    *(void *)uint64_t v365 = 0;
    goto LABEL_93;
  }
  unsigned int v75 = *(unsigned __int8 *)(v6 + 16);
  if (v75 > 0x35)
  {
    if (v75 == 55)
    {
      char v83 = *(llvm::Value **)(v6 - 64);
      if (!v83) {
        goto LABEL_233;
      }
      uint64_t v372 = *(llvm::Value **)(v6 - 64);
      uint64_t v84 = *(void *)(v6 - 32);
      if (!v84 || *(unsigned char *)(v84 + 16) != 16) {
        goto LABEL_233;
      }
LABEL_223:
      uint64_t v110 = *(void *)(v7 + 8);
      if (!v110 || *(void *)(v110 + 8))
      {
LABEL_225:
        if (v75 != 5) {
          goto LABEL_133;
        }
LABEL_226:
        unsigned int v111 = *(unsigned __int16 *)(v6 + 18);
        if (v111 != 25
          || (v112 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF), (uint64_t v76 = *(llvm::Value **)v112) == 0)
          || ((v372 = *(llvm::Value **)v112, (uint64_t v77 = *(void *)(v112 + 32)) != 0)
            ? (BOOL v113 = *(unsigned char *)(v77 + 16) == 16)
            : (BOOL v113 = 0),
              !v113))
        {
          *(void *)uint64_t v365 = 0;
          uint64_t v373 = &v372;
          unint64_t v374 = (unint64_t)v365;
          goto LABEL_254;
        }
        goto LABEL_248;
      }
      int v201 = *(unsigned __int8 *)(v7 + 16);
      if (v201 == 5)
      {
        if (*(_WORD *)(v7 + 18) != 27) {
          goto LABEL_225;
        }
        __int16 v228 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
        uint64_t v196 = *v228;
        if (!*v228) {
          goto LABEL_225;
        }
        uint64_t v202 = v228[4];
      }
      else
      {
        if (v201 != 55) {
          goto LABEL_225;
        }
        uint64_t v196 = *(void *)(v7 - 64);
        if (!v196) {
          goto LABEL_225;
        }
        uint64_t v202 = *(void *)(v7 - 32);
      }
      if (v84 != v202) {
        goto LABEL_225;
      }
LABEL_441:
      unint64_t v229 = *(unsigned int *)(v84 + 32);
      if (v229 >= 0x41)
      {
        int v244 = 0;
        int64_t v245 = (v229 + 63) >> 6;
        do
        {
          BOOL v169 = v245-- < 1;
          if (v169) {
            break;
          }
          unint64_t v246 = *(void *)(*(void *)(v84 + 24) + 8 * v245);
          v244 += __clz(v246);
        }
        while (!v246);
        int v247 = v229 | 0xFFFFFFC0;
        if ((v229 & 0x3F) == 0) {
          int v247 = 0;
        }
        if ((v229 - v244 - v247) > 0x40)
        {
          unsigned int v248 = *(_DWORD *)(v84 + 32);
          goto LABEL_493;
        }
        unint64_t v230 = **(void **)(v84 + 24);
      }
      else
      {
        unint64_t v230 = *(void *)(v84 + 24);
      }
      unsigned int v248 = v229;
      if (v230 <= v229) {
        unsigned int v248 = v230;
      }
LABEL_493:
      if (v229 <= v248 || !v248) {
        goto LABEL_225;
      }
      if (v8 == 33) {
        __int16 v264 = 35;
      }
      else {
        __int16 v264 = 36;
      }
      uint64_t v265 = *(void *)(a1 + 24);
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        uint64_t v285 = 0;
        uint64_t v284 = &byte_1CFBCE98E;
        goto LABEL_520;
      }
      uint64_t v266 = ***a2;
      uint64_t v267 = *(void *)(v266 + 152);
      uint64_t v268 = *(unsigned int *)(v266 + 168);
      if (v268)
      {
        LODWORD(v269) = (v268 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int64_t v270 = (uint64_t ****)(v267 + 16 * v269);
        uint64_t v271 = *v270;
        if (*v270 == a2)
        {
LABEL_519:
          uint64_t v283 = v270[1];
          uint64_t v286 = (unsigned int *)*v283;
          uint64_t v284 = (char *)(v283 + 2);
          uint64_t v285 = v286;
LABEL_520:
          __int16 v376 = 773;
          uint64_t v373 = (llvm::Value **)v284;
          unint64_t v374 = (unint64_t)v285;
          uint64_t v375 = ".unshifted";
          uint64_t v287 = sub_1CC2428C0(v265, (uint64_t)v83, v196, (uint64_t)&v373);
          LODWORD(v367) = v229;
          if (v229 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          __src = (void *)(1 << v248);
          uint64_t v288 = (int8x8_t *)operator new(0x80uLL);
          char v17 = v288 + 8;
          v288[10].i32[1] = v288[10].i32[1] & 0x38000000 | 2;
          *uint64_t v288 = 0;
          v288[1] = 0;
          v288[2] = 0;
          v288[3] = (int8x8_t)&v288[8];
          v288[4] = 0;
          v288[5] = 0;
          v288[6] = 0;
          v288[7] = (int8x8_t)&v288[8];
          uint64_t v290 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 64), (llvm::LLVMContext *)&__src, v289);
          __int16 v376 = 257;
          uint64_t v291 = *(void ***)v287;
          uint64_t v292 = ***(void ***)v287 + 1888;
          if (*(void *)v287 && (v291[1] & 0xFE) == 0x12)
          {
            int v343 = (uint64_t **)(***(void ***)v287 + 1888);
            uint64_t v344 = (llvm::Type *)*((unsigned int *)v291 + 8);
            if (*((_DWORD *)v291 + 2) == 19) {
              llvm::ScalableVectorType::get(v343, v344);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v343, v344);
            }
            uint64_t v292 = v345;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v17, v292, 53, v264, (uint64_t)v287, (uint64_t)v290, (const char **)&v373, 0, 0);
          goto LABEL_204;
        }
        int v272 = 1;
        while (v271 != (uint64_t ***)-4096)
        {
          int v273 = v269 + v272++;
          uint64_t v269 = v273 & (v268 - 1);
          uint64_t v271 = *(uint64_t ****)(v267 + 16 * v269);
          if (v271 == a2)
          {
            int64_t v270 = (uint64_t ****)(v267 + 16 * v269);
            goto LABEL_519;
          }
        }
      }
      int64_t v270 = (uint64_t ****)(v267 + 16 * v268);
      goto LABEL_519;
    }
    if (v75 != 54) {
      goto LABEL_250;
    }
    char v83 = *(llvm::Value **)(v6 - 64);
    if (!v83) {
      goto LABEL_233;
    }
    uint64_t v372 = *(llvm::Value **)(v6 - 64);
    uint64_t v84 = *(void *)(v6 - 32);
    if (!v84 || *(unsigned char *)(v84 + 16) != 16) {
      goto LABEL_233;
    }
    goto LABEL_211;
  }
  if (v75 == 5)
  {
    int v106 = *(unsigned __int16 *)(v6 + 18);
    if (v106 != 26) {
      goto LABEL_215;
    }
    uint64_t v107 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    char v83 = *(llvm::Value **)v107;
    if (!*(void *)v107) {
      goto LABEL_226;
    }
    uint64_t v372 = *(llvm::Value **)v107;
    uint64_t v84 = *(void *)(v107 + 32);
    if (!v84 || *(unsigned char *)(v84 + 16) != 16) {
      goto LABEL_226;
    }
LABEL_211:
    uint64_t v108 = *(void *)(v7 + 8);
    if (!v108 || *(void *)(v108 + 8)) {
      goto LABEL_213;
    }
    int v195 = *(unsigned __int8 *)(v7 + 16);
    if (v195 == 5)
    {
      if (*(_WORD *)(v7 + 18) == 26)
      {
        int v227 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
        uint64_t v196 = *v227;
        if (*v227)
        {
          uint64_t v197 = v227[4];
LABEL_435:
          if (v84 == v197) {
            goto LABEL_441;
          }
        }
      }
    }
    else if (v195 == 54)
    {
      uint64_t v196 = *(void *)(v7 - 64);
      if (v196)
      {
        uint64_t v197 = *(void *)(v7 - 32);
        goto LABEL_435;
      }
    }
LABEL_213:
    if (v75 != 5) {
      goto LABEL_250;
    }
    int v106 = *(unsigned __int16 *)(v6 + 18);
LABEL_215:
    if (v106 != 27) {
      goto LABEL_226;
    }
    uint64_t v109 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    char v83 = *(llvm::Value **)v109;
    if (!*(void *)v109) {
      goto LABEL_226;
    }
    uint64_t v372 = *(llvm::Value **)v109;
    uint64_t v84 = *(void *)(v109 + 32);
    if (!v84 || *(unsigned char *)(v84 + 16) != 16) {
      goto LABEL_226;
    }
    goto LABEL_223;
  }
LABEL_133:
  if (v75 != 53) {
    goto LABEL_250;
  }
  uint64_t v76 = *(llvm::Value **)(v6 - 64);
  if (!v76 || (v372 = *(llvm::Value **)(v6 - 64), (uint64_t v77 = *(void *)(v6 - 32)) == 0) || *(unsigned char *)(v77 + 16) != 16)
  {
LABEL_233:
    *(void *)uint64_t v365 = 0;
    uint64_t v373 = &v372;
    goto LABEL_93;
  }
LABEL_248:
  uint64_t v121 = *(void *)(v7 + 8);
  if (!v121 || *(void *)(v121 + 8)) {
    goto LABEL_250;
  }
  int v190 = *(unsigned __int8 *)(v7 + 16);
  if (v190 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 25) {
      goto LABEL_250;
    }
    int v220 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    uint64_t v191 = *v220;
    if (!*v220) {
      goto LABEL_250;
    }
    uint64_t v192 = v220[4];
  }
  else
  {
    if (v190 != 53) {
      goto LABEL_250;
    }
    uint64_t v191 = *(void *)(v7 - 64);
    if (!v191) {
      goto LABEL_250;
    }
    uint64_t v192 = *(void *)(v7 - 32);
  }
  if (v77 == v192)
  {
    unint64_t v221 = *(unsigned int *)(v77 + 32);
    if (v221 >= 0x41)
    {
      int v259 = 0;
      int64_t v260 = (v221 + 63) >> 6;
      do
      {
        BOOL v169 = v260-- < 1;
        if (v169) {
          break;
        }
        unint64_t v261 = *(void *)(*(void *)(v77 + 24) + 8 * v260);
        v259 += __clz(v261);
      }
      while (!v261);
      int v262 = v221 | 0xFFFFFFC0;
      if ((v221 & 0x3F) == 0) {
        int v262 = 0;
      }
      if ((v221 - v259 - v262) > 0x40)
      {
        unsigned int v263 = *(_DWORD *)(v77 + 32);
        goto LABEL_509;
      }
      unint64_t v222 = **(void **)(v77 + 24);
    }
    else
    {
      unint64_t v222 = *(void *)(v77 + 24);
    }
    unsigned int v263 = *(_DWORD *)(v77 + 32);
    if (v222 <= v221) {
      unsigned int v263 = v222;
    }
LABEL_509:
    if (v221 > v263 && v263)
    {
      uint64_t v274 = *(void *)(a1 + 24);
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        int v296 = 0;
        unint64_t v295 = &byte_1CFBCE98E;
LABEL_529:
        __int16 v376 = 773;
        uint64_t v373 = (llvm::Value **)v295;
        unint64_t v374 = (unint64_t)v296;
        uint64_t v375 = ".unshifted";
        char v299 = sub_1CC2428C0(v274, (uint64_t)v76, v191, (uint64_t)&v373);
        LODWORD(v367) = v221;
        if (v221 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src);
        }
        __src = 0;
        if (v221 != v263)
        {
          if (v221 - v263 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(&__src, 0, v221 - v263);
          }
          else
          {
            unint64_t v300 = 0xFFFFFFFFFFFFFFFFLL >> (v263 - v221);
            if (v367 > 0x40) {
              *(void *)__src |= v300;
            }
            else {
              __src = (void *)((unint64_t)__src | v300);
            }
          }
        }
        uint64_t v301 = *(void *)(a1 + 24);
        int v302 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v301 + 64), (llvm::LLVMContext *)&__src, v298);
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          int v313 = 0;
          int v312 = &byte_1CFBCE98E;
LABEL_543:
          __int16 v376 = 773;
          uint64_t v373 = (llvm::Value **)v312;
          unint64_t v374 = (unint64_t)v313;
          uint64_t v375 = ".mask";
          uint64_t v315 = sub_1CBF52474(v301, v299, (uint64_t)v302, (uint64_t)&v373);
          uint64_t v316 = (int8x8_t *)operator new(0x80uLL);
          char v17 = v316 + 8;
          v316[10].i32[1] = v316[10].i32[1] & 0x38000000 | 2;
          *uint64_t v316 = 0;
          v316[1] = 0;
          v316[2] = 0;
          v316[3] = (int8x8_t)&v316[8];
          v316[4] = 0;
          v316[5] = 0;
          v316[6] = 0;
          v316[7] = (int8x8_t)&v316[8];
          unsigned int v319 = llvm::Constant::getNullValue(*(llvm::Constant **)v77, v317, v318);
          __int16 v376 = 257;
          char v320 = *(void ***)v315;
          uint64_t v321 = ***(void ***)v315 + 1888;
          if (*(void *)v315 && (v320[1] & 0xFE) == 0x12)
          {
            int v346 = (uint64_t **)(***(void ***)v315 + 1888);
            uint64_t v347 = (llvm::Type *)*((unsigned int *)v320 + 8);
            if (*((_DWORD *)v320 + 2) == 19) {
              llvm::ScalableVectorType::get(v346, v347);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v346, v347);
            }
            uint64_t v321 = v348;
          }
          llvm::CmpInst::CmpInst((llvm::Value *)v17, v321, 53, v8, (uint64_t)v315, (uint64_t)v319, (const char **)&v373, 0, 0);
          goto LABEL_204;
        }
        uint64_t v303 = ***a2;
        uint64_t v304 = *(void *)(v303 + 152);
        uint64_t v305 = *(unsigned int *)(v303 + 168);
        if (v305)
        {
          LODWORD(v306) = (v305 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v307 = (uint64_t ****)(v304 + 16 * v306);
          uint64_t v308 = *v307;
          if (*v307 == a2)
          {
LABEL_542:
            unsigned int v311 = v307[1];
            unsigned int v314 = (unsigned int *)*v311;
            int v312 = (char *)(v311 + 2);
            int v313 = v314;
            goto LABEL_543;
          }
          int v309 = 1;
          while (v308 != (uint64_t ***)-4096)
          {
            int v310 = v306 + v309++;
            uint64_t v306 = v310 & (v305 - 1);
            uint64_t v308 = *(uint64_t ****)(v304 + 16 * v306);
            if (v308 == a2)
            {
              uint64_t v307 = (uint64_t ****)(v304 + 16 * v306);
              goto LABEL_542;
            }
          }
        }
        uint64_t v307 = (uint64_t ****)(v304 + 16 * v305);
        goto LABEL_542;
      }
      uint64_t v275 = ***a2;
      uint64_t v276 = *(void *)(v275 + 152);
      uint64_t v277 = *(unsigned int *)(v275 + 168);
      if (v277)
      {
        LODWORD(v278) = (v277 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v279 = (uint64_t ****)(v276 + 16 * v278);
        size_t v280 = *v279;
        if (*v279 == a2)
        {
LABEL_528:
          int64_t v294 = v279[1];
          int v297 = (unsigned int *)*v294;
          unint64_t v295 = (char *)(v294 + 2);
          int v296 = v297;
          goto LABEL_529;
        }
        int v281 = 1;
        while (v280 != (uint64_t ***)-4096)
        {
          int v282 = v278 + v281++;
          uint64_t v278 = v282 & (v277 - 1);
          size_t v280 = *(uint64_t ****)(v276 + 16 * v278);
          if (v280 == a2)
          {
            uint64_t v279 = (uint64_t ****)(v276 + 16 * v278);
            goto LABEL_528;
          }
        }
      }
      uint64_t v279 = (uint64_t ****)(v276 + 16 * v277);
      goto LABEL_528;
    }
  }
LABEL_250:
  *(void *)uint64_t v365 = 0;
  uint64_t v373 = &v372;
  unint64_t v374 = (unint64_t)v365;
  if (v75 <= 0x1B && v75 != 5) {
    goto LABEL_93;
  }
  if (v75 <= 0x1B) {
    unsigned int v111 = *(unsigned __int16 *)(v6 + 18);
  }
  else {
    unsigned int v111 = v75 - 28;
  }
LABEL_254:
  if (v111 != 38) {
    goto LABEL_93;
  }
  int v122 = *(_DWORD *)(v6 + 20);
  int v123 = (v122 & 0x40000000) != 0 ? *(uint64_t **)(v6 - 8) : (uint64_t *)(v6 - 32 * (v122 & 0x7FFFFFF));
  uint64_t v124 = *v123;
  uint64_t v125 = *(void *)(v124 + 8);
  if (!v125 || *(void *)(v125 + 8)) {
    goto LABEL_93;
  }
  int v126 = *(unsigned __int8 *)(v124 + 16);
  if (v126 == 5)
  {
    if (*(_WORD *)(v124 + 18) != 26) {
      goto LABEL_93;
    }
    uint64_t v233 = v124 - 32 * (*(_DWORD *)(v124 + 20) & 0x7FFFFFF);
    if (!*(void *)v233) {
      goto LABEL_93;
    }
    uint64_t v372 = *(llvm::Value **)v233;
    if (!sub_1CD497E24((void **)&v374, *(void *)(v233 + 32))) {
      goto LABEL_93;
    }
  }
  else
  {
    if (v126 != 54) {
      goto LABEL_93;
    }
    if (!*(void *)(v124 - 64)) {
      goto LABEL_93;
    }
    uint64_t v372 = *(llvm::Value **)(v124 - 64);
    uint64_t v127 = *(void *)(v124 - 32);
    if (!v127 || *(unsigned char *)(v127 + 16) != 16) {
      goto LABEL_93;
    }
    uint64_t v128 = (void *)(v127 + 24);
    uint64_t v129 = *(unsigned int *)(v127 + 32);
    if (v129 >= 0x41)
    {
      int v354 = 0;
      int64_t v355 = (unint64_t)(v129 + 63) >> 6;
      do
      {
        BOOL v169 = v355-- < 1;
        if (v169) {
          break;
        }
        unint64_t v356 = *(void *)(*v128 + 8 * v355);
        v354 += __clz(v356);
      }
      while (!v356);
      int v357 = v129 | 0xFFFFFFC0;
      if ((v129 & 0x3F) == 0) {
        int v357 = 0;
      }
      if ((v129 - v354 - v357) > 0x40)
      {
LABEL_93:
        uint64_t v49 = (uint64_t)*(a2 - 8);
        uint64_t v50 = (uint64_t)*(a2 - 4);
        if (*(unsigned char *)(v49 + 16) == 84
          && (uint64_t v51 = *(void *)(v49 - 32)) != 0
          && !*(unsigned char *)(v51 + 16)
          && *(void *)(v51 + 24) == *(void *)(v49 + 72))
        {
          if ((*(unsigned char *)(v51 + 33) & 0x20) != 0) {
            uint64_t v52 = (uint64_t)*(a2 - 8);
          }
          else {
            uint64_t v52 = 0;
          }
        }
        else
        {
          uint64_t v52 = 0;
        }
        if (*(unsigned char *)(v50 + 16) == 84)
        {
          uint64_t v53 = *(void *)(v50 - 32);
          if (v53)
          {
            if (!*(unsigned char *)(v53 + 16) && *(void *)(v53 + 24) == *(void *)(v50 + 72))
            {
              BOOL v114 = (*(unsigned char *)(v53 + 33) & 0x20) != 0 ? *(a2 - 4) : 0;
              if (v52)
              {
                if (v114)
                {
                  int v115 = *(_DWORD *)(*(void *)(v52 - 32) + 36);
                  if (v115 == *((_DWORD *)*(v114 - 4) + 9))
                  {
                    __int16 v116 = *((_WORD *)a2 + 9) & 0x3F;
                    if ((v115 - 148) < 2)
                    {
                      int v203 = (void *)(v52 - 32 * (*(_DWORD *)(v52 + 20) & 0x7FFFFFF));
                      if (*v203 == v203[4])
                      {
                        uint64_t v204 = &v114[-4 * (*((_DWORD *)v114 + 5) & 0x7FFFFFF)];
                        if (*v204 == v204[4] && (uint64_t *)v203[8] == v204[8]) {
                          goto LABEL_245;
                        }
                      }
                    }
                    else if ((v115 - 8) <= 1)
                    {
LABEL_245:
                      int v117 = (int8x8_t *)operator new(0x80uLL);
                      char v17 = v117 + 8;
                      v117[10].i32[1] = v117[10].i32[1] & 0x38000000 | 2;
                      *int v117 = 0;
                      v117[1] = 0;
                      v117[2] = 0;
                      v117[3] = (int8x8_t)&v117[8];
                      v117[4] = 0;
                      v117[5] = 0;
                      v117[6] = 0;
                      v117[7] = (int8x8_t)&v117[8];
                      int v118 = *(llvm::Value **)(v52 - 32 * (*(_DWORD *)(v52 + 20) & 0x7FFFFFF));
                      uint64_t v119 = (llvm::Instruction *)v114[-4 * (*((_DWORD *)v114 + 5) & 0x7FFFFFF)];
                      __int16 v376 = 257;
                      BOOL v120 = *(void ***)v118;
                      uint64_t v64 = ***(void ***)v118 + 1888;
                      if (*(void *)v118 && (v120[1] & 0xFE) == 0x12)
                      {
                        uint64_t v328 = (uint64_t **)(***(void ***)v118 + 1888);
                        int v329 = (llvm::Type *)*((unsigned int *)v120 + 8);
                        if (*((_DWORD *)v120 + 2) == 19) {
                          llvm::ScalableVectorType::get(v328, v329);
                        }
                        else {
                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v328, v329);
                        }
                        uint64_t v64 = v330;
                      }
                      p_src = (void **)&v373;
                      uint64_t v66 = (llvm::Value *)v17;
                      __int16 v67 = v116;
                      int v73 = v118;
LABEL_462:
                      uint64_t v74 = (uint64_t)v119;
                      goto LABEL_130;
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v373 = &v372;
        uint64_t v375 = (const char *)&v372;
        uint64_t v54 = *(void *)(v6 + 8);
        if (!v54 || *(void *)(v54 + 8)) {
          goto LABEL_104;
        }
        int v78 = *(unsigned __int8 *)(v6 + 16);
        if (v78 != 5)
        {
          if (v78 != 56) {
            goto LABEL_104;
          }
          uint64_t v80 = (void *)(v6 - 64);
          uint64_t v79 = *(void *)(v6 - 64);
          int v81 = *(unsigned __int8 *)(v79 + 16);
          if (v81 == 5)
          {
            if (*(_WORD *)(v79 + 18) != 13) {
              goto LABEL_301;
            }
            if (!*(void *)(v79 - 32 * (*(_DWORD *)(v79 + 20) & 0x7FFFFFF))) {
              goto LABEL_301;
            }
            uint64_t v372 = *(llvm::Value **)(v79 - 32 * (*(_DWORD *)(v79 + 20) & 0x7FFFFFF));
            if (!sub_1CBF68974((uint64_t)&v374, *(llvm::Constant **)(v79 - 32 * (*(_DWORD *)(v79 + 20) & 0x7FFFFFF) + 32)))goto LABEL_301; {
          }
            }
          else
          {
            if (v81 != 41) {
              goto LABEL_301;
            }
            if (!*(void *)(v79 - 64)) {
              goto LABEL_301;
            }
            uint64_t v372 = *(llvm::Value **)(v79 - 64);
            if ((sub_1CBF687D0((uint64_t)&v374, *(llvm::Constant **)(v79 - 32)) & 1) == 0) {
              goto LABEL_301;
            }
          }
          if (*(void *)v375 == *(void *)(v6 - 32)) {
            goto LABEL_345;
          }
LABEL_301:
          uint64_t v153 = *(void *)(v6 - 32);
          int v154 = *(unsigned __int8 *)(v153 + 16);
          if (v154 == 5)
          {
            if (*(_WORD *)(v153 + 18) != 13) {
              goto LABEL_104;
            }
            uint64_t v156 = *(llvm::Value **)(v153 - 32 * (*(_DWORD *)(v153 + 20) & 0x7FFFFFF));
            if (!v156) {
              goto LABEL_104;
            }
            uint64_t *v373 = v156;
            if ((sub_1CBF68974((uint64_t)&v374, *(llvm::Constant **)(v153 - 32 * (*(_DWORD *)(v153 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)goto LABEL_104; {
          }
            }
          else
          {
            if (v154 != 41) {
              goto LABEL_104;
            }
            int v155 = *(llvm::Value **)(v153 - 64);
            if (!v155) {
              goto LABEL_104;
            }
            uint64_t *v373 = v155;
            if ((sub_1CBF687D0((uint64_t)&v374, *(llvm::Constant **)(v153 - 32)) & 1) == 0) {
              goto LABEL_104;
            }
          }
          goto LABEL_344;
        }
        if (*(_WORD *)(v6 + 18) != 28) {
          goto LABEL_104;
        }
        uint64_t v98 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
        int v99 = *(unsigned __int8 *)(v98 + 16);
        if (v99 == 5)
        {
          if (*(_WORD *)(v98 + 18) != 13) {
            goto LABEL_335;
          }
          if (!*(void *)(v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF))) {
            goto LABEL_335;
          }
          uint64_t v372 = *(llvm::Value **)(v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF));
          if (!sub_1CBF68974((uint64_t)&v374, *(llvm::Constant **)(v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF) + 32)))goto LABEL_335; {
        }
          }
        else if (v99 != 41 {
               || !*(void *)(v98 - 64)
        }
               || (uint64_t v372 = *(llvm::Value **)(v98 - 64),
                   (sub_1CBF687D0((uint64_t)&v374, *(llvm::Constant **)(v98 - 32)) & 1) == 0))
        {
LABEL_335:
          uint64_t v180 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
          int v181 = *(unsigned __int8 *)(v180 + 16);
          if (v181 == 5)
          {
            if (*(_WORD *)(v180 + 18) != 13) {
              goto LABEL_104;
            }
            unsigned int v183 = *(llvm::Value **)(v180 - 32 * (*(_DWORD *)(v180 + 20) & 0x7FFFFFF));
            if (!v183) {
              goto LABEL_104;
            }
            uint64_t *v373 = v183;
            if (!sub_1CBF68974((uint64_t)&v374, *(llvm::Constant **)(v180 - 32 * (*(_DWORD *)(v180 + 20) & 0x7FFFFFF) + 32)))goto LABEL_104; {
          }
            }
          else
          {
            if (v181 != 41) {
              goto LABEL_104;
            }
            int v182 = *(llvm::Value **)(v180 - 64);
            if (!v182) {
              goto LABEL_104;
            }
            uint64_t *v373 = v182;
            if ((sub_1CBF687D0((uint64_t)&v374, *(llvm::Constant **)(v180 - 32)) & 1) == 0) {
              goto LABEL_104;
            }
          }
          uint64_t v80 = (void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
LABEL_344:
          if (*(void *)v375 == *v80)
          {
LABEL_345:
            if (sub_1CBF535C4((uint64_t)&__src, (llvm::Constant *)v7)) {
              goto LABEL_105;
            }
          }
LABEL_104:
          uint64_t v372 = 0;
LABEL_105:
          unint64_t v374 = v7;
          uint64_t v375 = (const char *)v7;
          uint64_t v55 = *(void *)(v6 + 8);
          if (v55 && !*(void *)(v55 + 8) && sub_1CCA79FAC((uint64_t)&v373, v6))
          {
            uint64_t v372 = (llvm::Value *)v7;
            uint64_t v56 = (llvm::Value *)v7;
            if (!v7)
            {
LABEL_119:
              uint64_t v68 = *(llvm::Type **)v6;
              if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12) {
                uint64_t v68 = (llvm::Type *)**((void **)v68 + 2);
              }
              unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v68);
              LODWORD(v375) = 64;
              uint64_t v373 = &v372;
              unint64_t v374 = PrimitiveSizeInBits - 1;
              int v71 = *(unsigned __int8 *)(v6 + 16);
              if (v71 == 5)
              {
                if (*(_WORD *)(v6 + 18) == 27
                  && sub_1CBC5BF18(&v373, *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))
                  && sub_1CBF531E4((llvm::APInt *)&v374, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32)))
                {
LABEL_370:
                  unsigned int v368 = 64;
                  __src = v372;
                  uint64_t v367 = PrimitiveSizeInBits;
                  if (!sub_1CD68C474(&__src, v7, (BOOL)v372)) {
                    goto LABEL_386;
                  }
                  int v198 = *(llvm::Constant **)v372;
                  if ((*(_DWORD *)(*(void *)v372 + 8) & 0xFE) == 0x12) {
                    int v198 = (llvm::Constant *)**((void **)v198 + 2);
                  }
                  if (llvm::Type::getPrimitiveSizeInBits(v198) != 2 * PrimitiveSizeInBits) {
                    goto LABEL_386;
                  }
                  uint64_t v199 = (*(a2 - 8))[1];
                  if (v199 && !v199[1])
                  {
                    BOOL v85 = 1;
                    goto LABEL_387;
                  }
                  int v200 = (*(a2 - 4))[1];
                  if (v200) {
                    BOOL v85 = v200[1] == 0;
                  }
                  else {
LABEL_386:
                  }
                    BOOL v85 = 0;
LABEL_387:
                  if (v368 >= 0x41 && v367) {
                    MEMORY[0x1D25D9CB0](v367, 0x1000C8000313F17);
                  }
                  goto LABEL_161;
                }
              }
              else
              {
                if (v71 != 55) {
                  return 0;
                }
                if (sub_1CBC5BF18(&v373, *(void *)(v6 - 64))
                  && sub_1CBF53154((llvm::APInt *)&v374, *(unsigned __int8 **)(v6 - 32)))
                {
                  goto LABEL_370;
                }
              }
              BOOL v85 = 0;
LABEL_161:
              if (v375 >= 0x41 && v374)
              {
                MEMORY[0x1D25D9CB0](v374, 0x1000C8000313F17);
                if (!v85) {
                  return 0;
                }
              }
              else if (!v85)
              {
                return 0;
              }
              LODWORD(v367) = 2 * PrimitiveSizeInBits;
              if (2 * PrimitiveSizeInBits > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src);
              }
              __src = (void *)(1 << (PrimitiveSizeInBits - 1));
              uint64_t v87 = *(void *)(a1 + 24);
              uint64_t v88 = v372;
              BOOL v89 = *(llvm::Constant **)v372;
              Splat = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v372, (llvm::LLVMContext *)&__src, v69);
              if ((*((_DWORD *)v89 + 2) & 0xFE) == 0x12) {
                Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v89 + 8) | ((unint64_t)(*((_DWORD *)v89 + 2) == 19) << 32)), (uint64_t)Splat);
              }
              __int16 v376 = 257;
              BOOL v91 = sub_1CB844A3C(v87, v88, (uint64_t)Splat, (uint64_t)&v373, 0, 0);
              int v92 = (int8x8_t *)operator new(0x80uLL);
              char v17 = v92 + 8;
              v92[10].i32[1] = v92[10].i32[1] & 0x38000000 | 2;
              *int v92 = 0;
              v92[1] = 0;
              v92[2] = 0;
              v92[3] = (int8x8_t)&v92[8];
              v92[4] = 0;
              v92[5] = 0;
              v92[6] = 0;
              v92[7] = (int8x8_t)&v92[8];
              if (v8 == 32) {
                __int16 v94 = 36;
              }
              else {
                __int16 v94 = 35;
              }
              int v95 = *(llvm::Constant **)v372;
              unsigned int v364 = v367;
              if (v367 > 0x40) {
                operator new[]();
              }
              if (v367 == 1)
              {
                uint64_t v96 = 0;
                unint64_t v97 = 1;
              }
              else
              {
                uint64_t v96 = 2 * (void)__src;
                if (v367) {
                  unint64_t v97 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v367;
                }
                else {
                  unint64_t v97 = 0;
                }
              }
              unint64_t v363 = v97 & v96;
              uint64_t v102 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v95, (llvm::LLVMContext *)&v363, v93);
              uint64_t v103 = v102;
              if ((*((_DWORD *)v95 + 2) & 0xFE) == 0x12) {
                uint64_t v103 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v95 + 8) | ((unint64_t)(*((_DWORD *)v95 + 2) == 19) << 32)), (uint64_t)v102);
              }
              __int16 v376 = 257;
              BOOL v104 = *(void ***)v91;
              uint64_t v105 = ***(void ***)v91 + 1888;
              if (*(void *)v91 && (v104[1] & 0xFE) == 0x12)
              {
                uint64_t v249 = (uint64_t **)(***(void ***)v91 + 1888);
                uint64_t v250 = (llvm::Type *)*((unsigned int *)v104 + 8);
                if (*((_DWORD *)v104 + 2) == 19) {
                  llvm::ScalableVectorType::get(v249, v250);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v249, v250);
                }
                uint64_t v105 = v251;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v17, v105, 53, v94, (uint64_t)v91, (uint64_t)v103, (const char **)&v373, 0, 0);
              goto LABEL_201;
            }
          }
          else
          {
            unint64_t v374 = v6;
            uint64_t v375 = (const char *)v6;
            uint64_t v57 = *(void *)(v7 + 8);
            if (v57 && !*(void *)(v57 + 8) && sub_1CCA79FAC((uint64_t)&v373, v7))
            {
              uint64_t v372 = (llvm::Value *)v6;
              uint64_t v56 = (llvm::Value *)v6;
            }
            else
            {
              uint64_t v56 = v372;
              if (!v372) {
                goto LABEL_119;
              }
            }
          }
          uint64_t v58 = *(llvm::ConstantInt **)v56;
          uint64_t v59 = *(llvm::IRBuilderBase **)(a1 + 24);
          __int16 v376 = 257;
          UnaryIntrinsic = (llvm::Value *)llvm::IRBuilderBase::CreateUnaryIntrinsic(v59, 53, v56, 0, (const llvm::Twine *)&v373);
          uint64_t v61 = (int8x8_t *)operator new(0x80uLL);
          v61[10].i32[1] = v61[10].i32[1] & 0x38000000 | 2;
          char v17 = v61 + 8;
          *uint64_t v61 = 0;
          v61[1] = 0;
          v61[2] = 0;
          v61[3] = (int8x8_t)&v61[8];
          v61[4] = 0;
          v61[5] = 0;
          v61[6] = 0;
          v61[7] = (int8x8_t)&v61[8];
          if (v8 == 32)
          {
            unsigned int v62 = llvm::ConstantInt::get(v58, 2uLL, 0);
            __int16 v376 = 257;
            __int16 v63 = *(void ***)UnaryIntrinsic;
            uint64_t v64 = ***(void ***)UnaryIntrinsic + 1888;
            if (*(void *)UnaryIntrinsic && (v63[1] & 0xFE) == 0x12)
            {
              unint64_t v234 = (uint64_t **)(***(void ***)UnaryIntrinsic + 1888);
              uint64_t v235 = (llvm::Type *)*((unsigned int *)v63 + 8);
              if (*((_DWORD *)v63 + 2) == 19) {
                llvm::ScalableVectorType::get(v234, v235);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v234, v235);
              }
              uint64_t v64 = v236;
            }
            p_src = (void **)&v373;
            uint64_t v66 = (llvm::Value *)v17;
            __int16 v67 = 36;
          }
          else
          {
            unsigned int v62 = llvm::ConstantInt::get(v58, 1uLL, 0);
            __int16 v369 = 257;
            uint64_t v72 = *(void *)UnaryIntrinsic;
            uint64_t v64 = ***(void ***)UnaryIntrinsic + 1888;
            if (*(void *)UnaryIntrinsic && (*(_DWORD *)(v72 + 8) & 0xFE) == 0x12)
            {
              BOOL v237 = (uint64_t **)(***(void ***)UnaryIntrinsic + 1888);
              uint64_t v238 = (llvm::Type *)*(unsigned int *)(v72 + 32);
              if (*(_DWORD *)(v72 + 8) == 19) {
                llvm::ScalableVectorType::get(v237, v238);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v237, v238);
              }
              uint64_t v64 = v239;
            }
            p_src = &__src;
            uint64_t v66 = (llvm::Value *)v17;
            __int16 v67 = 34;
          }
          int v73 = UnaryIntrinsic;
          uint64_t v74 = (uint64_t)v62;
          goto LABEL_130;
        }
        if (*(void *)v375 == *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32)) {
          goto LABEL_345;
        }
        goto LABEL_335;
      }
      uint64_t v128 = (void *)*v128;
    }
    *(void *)unint64_t v374 = *v128;
  }
  if (*(unsigned char *)(v7 + 16) != 16 || v7 == 0) {
    goto LABEL_93;
  }
  uint64_t v131 = *((void *)v372 + 1);
  if (v131)
  {
    if (!*(void *)(v131 + 8)) {
      goto LABEL_93;
    }
  }
  unsigned int v133 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v372);
  if (v132 == 1) {
  if (*(void *)v365 >= (unint64_t)v133)
  }
    goto LABEL_93;
  unsigned int v136 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v6);
  if (v134 == 1) {
  LODWORD(v367) = v133;
  }
  if (v133 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  __src = 0;
  if (v136)
  {
    if (v136 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&__src, 0, v136);
    }
    else
    {
      unint64_t v137 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v136;
      if (v367 > 0x40) {
        *(void *)__src |= v137;
      }
      else {
        __src = (void *)((unint64_t)__src | v137);
      }
    }
  }
  if (v367 > 0x40)
  {
    llvm::APInt::shlSlowCase((llvm::APInt *)&__src, v365[0]);
  }
  else
  {
    uint64_t v138 = (void)__src << SLOBYTE(v365[0]);
    if (v367 == v365[0]) {
      uint64_t v138 = 0;
    }
    if (v367) {
      unint64_t v139 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v367;
    }
    else {
      unint64_t v139 = 0;
    }
    __src = (void *)(v139 & v138);
  }
  uint64_t v140 = *(void *)(v7 + 24);
  unsigned int v364 = v133;
  if (v133) {
    unint64_t v141 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v133;
  }
  else {
    unint64_t v141 = 0;
  }
  unint64_t v363 = v141 & v140;
  unint64_t v142 = (v141 & v140) << SLOBYTE(v365[0]);
  if (v133 == v365[0]) {
    unint64_t v142 = 0;
  }
  if (v133) {
    unint64_t v143 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v133;
  }
  else {
    unint64_t v143 = 0;
  }
  unint64_t v363 = v143 & v142;
  uint64_t v144 = *(void *)(a1 + 24);
  int v145 = v372;
  uint64_t v146 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v144 + 64), (llvm::LLVMContext *)&__src, v135);
  __int16 v376 = 257;
  uint64_t v147 = sub_1CBF52474(v144, v145, (uint64_t)v146, (uint64_t)&v373);
  unsigned int v148 = (int8x8_t *)operator new(0x80uLL);
  char v17 = v148 + 8;
  v148[10].i32[1] = v148[10].i32[1] & 0x38000000 | 2;
  *unsigned int v148 = 0;
  v148[1] = 0;
  v148[2] = 0;
  v148[3] = (int8x8_t)&v148[8];
  v148[4] = 0;
  v148[5] = 0;
  v148[6] = 0;
  v148[7] = (int8x8_t)&v148[8];
  uint64_t v150 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 64), (llvm::LLVMContext *)&v363, v149);
  __int16 v376 = 257;
  char v151 = *(void ***)v147;
  uint64_t v152 = ***(void ***)v147 + 1888;
  if (*(void *)v147 && (v151[1] & 0xFE) == 0x12)
  {
    uint64_t v349 = (uint64_t **)(***(void ***)v147 + 1888);
    uint64_t v350 = (llvm::Type *)*((unsigned int *)v151 + 8);
    if (*((_DWORD *)v151 + 2) == 19) {
      llvm::ScalableVectorType::get(v349, v350);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v349, v350);
    }
    uint64_t v152 = v351;
  }
  llvm::CmpInst::CmpInst((llvm::Value *)v17, v152, 53, v8, (uint64_t)v147, (uint64_t)v150, (const char **)&v373, 0, 0);
LABEL_201:
  if (v364 >= 0x41 && v363) {
    MEMORY[0x1D25D9CB0](v363, 0x1000C8000313F17);
  }
LABEL_204:
  if (v367 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v17;
}

llvm::APInt *sub_1CCA66680(llvm::APInt *this, unsigned int a2)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  if (v3 > 0x40)
  {
    llvm::APInt::shlSlowCase(this, a2);
  }
  else
  {
    if (v3 == a2 || v3 == 0)
    {
      if (v3 == a2) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = *(void *)this << a2;
      }
      if (v3) {
        unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
      }
      else {
        unint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v5 = *(void *)this << a2;
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    }
    *(void *)this = v6 & v5;
  }
  return this;
}

uint64_t sub_1CCA66714(void *a1, int a2, int a3, llvm *this, llvm::Value *a5, llvm::AssumptionCache *a6, const llvm::DominatorTree *a7)
{
  if (a2 == 13)
  {
    int v8 = (const llvm::DataLayout *)a1[7];
    unsigned int v10 = (const llvm::Instruction *)a1[9];
    int v9 = (const llvm::DataLayout *)a1[10];
    if (a3) {
      return sub_1CC16A7F0((uint64_t)this, (uint64_t)a5, 0, v9, (uint64_t)v8, a6, (uint64_t)v10);
    }
    else {
      return llvm::computeOverflowForUnsignedAdd(this, a5, v9, v8, a6, v10, (const llvm::DominatorTree *)1);
    }
  }
  else if (a2 == 15)
  {
    uint64_t v12 = (const llvm::DataLayout *)a1[7];
    int v13 = (const llvm::Instruction *)a1[9];
    unsigned int v14 = (const llvm::Value *)a1[10];
    if (a3) {
      return llvm::computeOverflowForSignedSub(this, a5, v14, v12, a6, v13, a7);
    }
    else {
      return llvm::computeOverflowForUnsignedSub(this, a5, v14, v12, a6, v13, a7);
    }
  }
  else
  {
    int v15 = (const llvm::DataLayout *)a1[7];
    int v16 = (const llvm::Instruction *)a1[9];
    char v17 = (const llvm::Value *)a1[10];
    if (a3) {
      return llvm::computeOverflowForSignedMul(this, a5, v17, v15, a6, v16, (const llvm::DominatorTree *)1);
    }
    else {
      return llvm::computeOverflowForUnsignedMul(this, a5, v17, v15, a6, v16, (const llvm::DominatorTree *)1);
    }
  }
}

uint64_t sub_1CCA667D0(void *a1, uint64_t a2, int a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 **this, uint64_t *a7, void *a8)
{
  if (llvm::Instruction::isCommutative((llvm::Instruction *)this) && a4[16] <= 0x14u)
  {
    unsigned int v16 = *(unsigned __int8 *)(a5 + 16);
    BOOL v17 = v16 >= 0x15;
    if (v16 >= 0x15) {
      unint64_t v18 = (unsigned __int8 *)a5;
    }
    else {
      unint64_t v18 = a4;
    }
    if (v17) {
      a5 = (uint64_t)a4;
    }
    a4 = v18;
  }
  uint64_t v19 = a1[3];
  *(void *)(v19 + 48) = this[5];
  *(void *)(v19 + 56) = this + 3;
  uint64_t v20 = this[6];
  int v65 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track((uint64_t)&v65, v20, 2);
    uint64_t v21 = (uint64_t)v65;
  }
  else
  {
    uint64_t v21 = 0;
  }
  sub_1CB8461A4(v19, 0, v21);
  if (v65)
  {
    int v48 = *v65;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v51 = v65;
      }
      else {
        uint64_t v51 = 0;
      }
      if ((v48 - 3) < 0xFFFFFFFE)
      {
        if (v48 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_13;
      }
      unint64_t v50 = (unint64_t)(v51 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_13;
      }
      uint64_t v49 = *((void *)v65 + 2);
      if ((v49 & 4) == 0) {
        goto LABEL_13;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v50) {
        goto LABEL_13;
      }
    }
    unsigned int v62 = &v65;
    sub_1CC5FA668(v50 + 16, &v62);
  }
LABEL_13:
  int v24 = (uint64_t **)(***(void ***)a4 + 1888);
  if ((*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 0x12)
  {
    int v25 = (llvm::Type *)*(unsigned int *)(*(void *)a4 + 32);
    int v26 = (uint64_t **)(***(void ***)a4 + 1888);
    if (*(_DWORD *)(*(void *)a4 + 8) == 19) {
      llvm::ScalableVectorType::get(v26, v25);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v26, v25);
    }
    int v24 = v27;
  }
  if (a2 == 17)
  {
    if ((sub_1CBF5250C((uint64_t)&v62, (llvm::Constant *)a5) & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  if (a5)
  {
    unsigned int v28 = *(unsigned __int8 *)(a5 + 16);
    if (v28 < 0x15)
    {
      if (v28 == 16)
      {
        uint64_t v29 = *(unsigned int *)(a5 + 32);
        if (v29 >= 0x41)
        {
          int v57 = 0;
          int64_t v58 = (unint64_t)(v29 + 63) >> 6;
          do
          {
            if (v58-- < 1) {
              break;
            }
            unint64_t v60 = *(void *)(*(void *)(a5 + 24) + 8 * v58);
            v57 += __clz(v60);
          }
          while (!v60);
          int v61 = v29 | 0xFFFFFFC0;
          if ((v29 & 0x3F) == 0) {
            int v61 = 0;
          }
          if (v57 + v61 == v29) {
            goto LABEL_26;
          }
        }
        else if (!*(void *)(a5 + 24))
        {
          goto LABEL_26;
        }
      }
      else if (v28 == 17)
      {
        if (sub_1CB844168(a5, 0.0)) {
          goto LABEL_26;
        }
      }
      else if (v28 - 18 < 3 || v28 == 13)
      {
        goto LABEL_26;
      }
      if (!sub_1CC03F414((uint64_t)&v62, (llvm::Constant *)a5)) {
        goto LABEL_30;
      }
LABEL_26:
      *a7 = (uint64_t)a4;
      uint64_t v30 = **v24;
      Splat = *(void **)(v30 + 1568);
      if (!Splat)
      {
        int v32 = *(llvm::ConstantInt **)(v30 + 1888);
        unsigned int v33 = *(_DWORD *)(v30 + 1896);
        unsigned int v63 = v33 >> 8;
        if (v33 >> 8 > 0x40) {
          operator new[]();
        }
        unsigned int v62 = 0;
        Splat = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v62, v22);
        if (v63 >= 0x41 && v62) {
          MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
        }
        *(void *)(v30 + 1568) = Splat;
      }
      goto LABEL_32;
    }
  }
LABEL_30:
  unsigned int v34 = sub_1CCA66714(a1, a2, a3, (llvm *)a4, (llvm::Value *)a5, (llvm::AssumptionCache *)this, v23);
  if (v34 < 2)
  {
    uint64_t v35 = a1[3];
    __int16 v64 = 257;
    BOOL v36 = (int32x2_t ****)sub_1CB844E98(v35, a2, (uint64_t)a4, a5, (uint64_t)&v62, 0);
    *a7 = (uint64_t)v36;
    llvm::Value::takeName(v36, (llvm::Value *)this);
    uint64_t v38 = **v24;
    Splat = *(void **)(v38 + 1560);
    if (!Splat)
    {
      uint64_t v52 = *(llvm::ConstantInt **)(v38 + 1888);
      unsigned int v53 = *(_DWORD *)(v38 + 1896);
      unsigned int v63 = v53 >> 8;
      if (v53 >> 8 > 0x40) {
        operator new[]();
      }
      if (v53 <= 0xFF) {
        LOBYTE(v54) = 0;
      }
      else {
        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
      }
      unsigned int v62 = (unsigned __int8 **)(v54 & 1);
      Splat = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v62, v37);
      if (v63 >= 0x41 && v62) {
        MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
      }
      *(void *)(v38 + 1560) = Splat;
    }
LABEL_32:
    if ((v24[1] & 0xFE) == 0x12) {
      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v24 + 8) | ((unint64_t)(*((_DWORD *)v24 + 2) == 19) << 32)), (uint64_t)Splat);
    }
    *a8 = Splat;
    return 1;
  }
  if (v34 == 2) {
    return 0;
  }
  uint64_t v40 = a1[3];
  __int16 v64 = 257;
  uint64_t v41 = (int32x2_t ****)sub_1CB844E98(v40, a2, (uint64_t)a4, a5, (uint64_t)&v62, 0);
  *a7 = (uint64_t)v41;
  llvm::Value::takeName(v41, (llvm::Value *)this);
  uint64_t v43 = **v24;
  int v44 = *(void **)(v43 + 1568);
  if (!v44)
  {
    uint64_t v55 = *(llvm::ConstantInt **)(v43 + 1888);
    unsigned int v56 = *(_DWORD *)(v43 + 1896);
    unsigned int v63 = v56 >> 8;
    if (v56 >> 8 > 0x40) {
      operator new[]();
    }
    unsigned int v62 = 0;
    int v44 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v62, v42);
    if (v63 >= 0x41 && v62) {
      MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
    *(void *)(v43 + 1568) = v44;
  }
  if ((v24[1] & 0xFE) == 0x12) {
    int v44 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v24 + 8) | ((unint64_t)(*((_DWORD *)v24 + 2) == 19) << 32)), (uint64_t)v44);
  }
  *a8 = v44;
  uint64_t v45 = *a7;
  uint64_t result = 1;
  if (*a7 && *(unsigned __int8 *)(v45 + 16) >= 0x1Cu)
  {
    char v46 = *(unsigned char *)(v45 + 17);
    if (a3) {
      char v47 = v46 | 4;
    }
    else {
      char v47 = v46 | 2;
    }
    *(unsigned char *)(v45 + 17) = v47;
  }
  return result;
}

llvm::UndefValue **sub_1CCA66DFC(void *a1, uint64_t ***a2)
{
  uint64_t v324 = (unsigned __int8 *)*(a2 - 4);
  int v322 = (llvm::APInt *)*(a2 - 8);
  uint64_t v3 = *(void *)v322;
  __int16 v4 = *((_WORD *)a2 + 9);
  unsigned int v5 = *(_DWORD *)(*(void *)v322 + 8);
  if ((v5 & 0xFE) == 0x12)
  {
    uint64_t v6 = **(void **)(v3 + 16);
    unsigned int v5 = *(_DWORD *)(v6 + 8);
    if (v5 == 13) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)v322;
    if (*(_DWORD *)(*(void *)v322 + 8) == 13)
    {
LABEL_3:
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
      goto LABEL_4;
    }
    uint64_t v6 = *(void *)v322;
  }
  uint64_t v90 = a1[10];
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
  }
  uint64_t v91 = *(void *)(v90 + 232);
  if (v5 < 0x100) {
    goto LABEL_198;
  }
  unsigned int v92 = v5 >> 8;
  unint64_t v93 = *(unsigned int *)(v90 + 240);
  uint64_t v94 = v91;
  if (v93)
  {
    uint64_t v94 = v91;
    unint64_t v95 = v93;
    do
    {
      unint64_t v96 = v95 >> 1;
      uint64_t v97 = v94 + 16 * (v95 >> 1);
      unsigned int v98 = *(_DWORD *)(v97 + 8);
      uint64_t v99 = v97 + 16;
      v95 += ~(v95 >> 1);
      if (v98 < v92) {
        uint64_t v94 = v99;
      }
      else {
        unint64_t v95 = v96;
      }
    }
    while (v95);
  }
  if (v94 == v91 + 16 * v93 || *(_DWORD *)(v94 + 8) != v92) {
LABEL_198:
  }
    uint64_t v94 = v91;
  unsigned int PrimitiveSizeInBits = *(_DWORD *)(v94 + 4);
LABEL_4:
  if (!PrimitiveSizeInBits) {
    return 0;
  }
  unsigned int v359 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  unsigned int v361 = PrimitiveSizeInBits;
  uint64_t v358 = 0;
  unint64_t v360 = 0;
  unsigned int v355 = PrimitiveSizeInBits;
  uint64_t v354 = 0;
  unsigned int v357 = PrimitiveSizeInBits;
  unint64_t v356 = 0;
  uint64_t v352 = 0;
  uint64_t v347 = (uint64_t)&v352;
  v348[0] = 0;
  if ((sub_1CBF528D8((uint64_t)&v347, v324) & 1) == 0)
  {
    LODWORD(v348[0]) = PrimitiveSizeInBits;
    goto LABEL_11;
  }
  LOBYTE(v350) = 0;
  if (sub_1CC9EAA5C(*((_WORD *)a2 + 9) & 0x3F, (llvm::APInt *)v352, &v350))
  {
    LODWORD(v348[0]) = PrimitiveSizeInBits;
    uint64_t v347 = 1 << (PrimitiveSizeInBits - 1);
    goto LABEL_13;
  }
  int v8 = *((_WORD *)a2 + 9) & 0x3F;
  if (v8 == 34)
  {
    if (*((_DWORD *)v352 + 2) <= 0x40u)
    {
      unsigned int v61 = __clz(__rbit64(~(unint64_t)*v352));
LABEL_126:
      LODWORD(v348[0]) = PrimitiveSizeInBits;
      uint64_t v347 = 0;
      if (v61 == PrimitiveSizeInBits) {
        goto LABEL_13;
      }
      if (v61 > 0x3F)
      {
        llvm::APInt::setBitsSlowCase(&v347, v61, PrimitiveSizeInBits);
        goto LABEL_13;
      }
      int v9 = (int8x8_t **)(v347 | (0xFFFFFFFFFFFFFFFFLL >> (v61 - PrimitiveSizeInBits) << v61));
      goto LABEL_12;
    }
    unsigned int v297 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v352);
LABEL_572:
    unsigned int v61 = v297;
    goto LABEL_126;
  }
  if (v8 == 36)
  {
    unsigned int v62 = *((_DWORD *)v352 + 2);
    if (v62 <= 0x40)
    {
      unsigned int v63 = __clz(__rbit64((unint64_t)*v352));
      if (v62 >= v63) {
        unsigned int v61 = v63;
      }
      else {
        unsigned int v61 = *((_DWORD *)v352 + 2);
      }
      goto LABEL_126;
    }
    unsigned int v297 = llvm::APInt::countTrailingZerosSlowCase(v352);
    goto LABEL_572;
  }
  LODWORD(v348[0]) = PrimitiveSizeInBits;
LABEL_11:
  int v9 = (int8x8_t **)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
LABEL_12:
  uint64_t v347 = (uint64_t)v9;
LABEL_13:
  BOOL v10 = sub_1CCABCFBC(a1, (uint64_t)a2, 0, &v347);
  if (LODWORD(v348[0]) >= 0x41 && v347) {
    MEMORY[0x1D25D9CB0](v347, 0x1000C8000313F17);
  }
  if (!v10)
  {
    LODWORD(v348[0]) = PrimitiveSizeInBits;
    uint64_t v347 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    BOOL v13 = sub_1CCABCFBC(a1, (uint64_t)a2, 1u, &v347);
    if (LODWORD(v348[0]) >= 0x41 && v347) {
      MEMORY[0x1D25D9CB0](v347, 0x1000C8000313F17);
    }
    if (!v13)
    {
      unsigned int v351 = PrimitiveSizeInBits;
      uint64_t v350 = 0;
      size_t v321 = v4 & 0x3F;
      if ((*((_WORD *)a2 + 9) & 0x3Eu) - 38 <= 3)
      {
        unsigned int v14 = (llvm::UndefValue **)v361;
        if (v361 > 0x40) {
          operator new[]();
        }
        uint64_t v347 = v360;
        unsigned int v33 = v359 - 1;
        if (v359 >= 0x41) {
          unsigned int v34 = (uint64_t *)(v358 + 8 * (v33 >> 6));
        }
        else {
          unsigned int v34 = &v358;
        }
        if ((((unint64_t)*v34 >> v33) & 1) == 0) {
          uint64_t v347 = v360 | (1 << (v361 - 1));
        }
        unint64_t v15 = v347;
        uint64_t v352 = (unint64_t **)v347;
        unsigned int v353 = v361;
        unsigned int v16 = v359;
        LODWORD(v348[0]) = v359;
        if (v359 > 0x40) {
          operator new[]();
        }
        if (v359) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v359;
        }
        else {
          unint64_t v35 = 0;
        }
        unint64_t v36 = v35 & ~v358;
        int v343 = (llvm::APInt *)v36;
        unsigned int v37 = v361 - 1;
        uint64_t v38 = (int8x8_t ***)&v360;
        if (v361 >= 0x41) {
          uint64_t v38 = (int8x8_t ***)(v360 + 8 * (v37 >> 6));
        }
        if ((((unint64_t)*v38 >> v37) & 1) == 0) {
          int v343 = (llvm::APInt *)(v36 & ~(1 << (v359 - 1)));
        }
        unint64_t __s2 = (unint64_t)v343;
        unsigned int v18 = v357;
        if (v357 > 0x40) {
          operator new[]();
        }
        uint64_t v347 = v356;
        unsigned int v39 = v355 - 1;
        if (v355 >= 0x41) {
          uint64_t v40 = (uint64_t *)(v354 + 8 * (v39 >> 6));
        }
        else {
          uint64_t v40 = &v354;
        }
        if ((((unint64_t)*v40 >> v39) & 1) == 0) {
          uint64_t v347 = v356 | (1 << (v357 - 1));
        }
        unint64_t v19 = v347;
        uint64_t v350 = v347;
        unsigned int v351 = v357;
        unsigned int v20 = v355;
        LODWORD(v348[0]) = v355;
        if (v355 > 0x40) {
          operator new[]();
        }
        if (v355) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v355;
        }
        else {
          unint64_t v41 = 0;
        }
        int v343 = (llvm::APInt *)(v41 & ~v354);
        if (((v356 >> (v357 - 1)) & 1) == 0) {
          int v343 = (llvm::APInt *)(v41 & ~v354 & ~(1 << (v355 - 1)));
        }
        size_t __n = (size_t)v343;
      }
      else
      {
        unsigned int v14 = (llvm::UndefValue **)v361;
        if (v361 > 0x40) {
          operator new[]();
        }
        unint64_t v15 = v360;
        uint64_t v352 = (unint64_t **)v360;
        unsigned int v353 = v361;
        unsigned int v16 = v359;
        LODWORD(v348[0]) = v359;
        if (v359 > 0x40) {
          operator new[]();
        }
        if (v359) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v359;
        }
        else {
          unint64_t v17 = 0;
        }
        unint64_t __s2 = v17 & ~v358;
        unsigned int v18 = v357;
        if (v357 > 0x40) {
          operator new[]();
        }
        unint64_t v19 = v356;
        uint64_t v350 = v356;
        unsigned int v351 = v357;
        unsigned int v20 = v355;
        LODWORD(v348[0]) = v355;
        if (v355 > 0x40) {
          operator new[]();
        }
        if (v355) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v355;
        }
        else {
          unint64_t v21 = 0;
        }
        size_t __n = v21 & ~v354;
      }
      if (*((unsigned __int8 *)v322 + 16) >= 0x15u)
      {
        if (v14 <= 0x40)
        {
          if (v15 != __s2) {
            goto LABEL_30;
          }
LABEL_379:
          uint64_t v179 = (char *)operator new(0x80uLL);
          *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
          unsigned int v14 = (llvm::UndefValue **)(v179 + 64);
          *(void *)uint64_t v179 = 0;
          *((void *)v179 + 1) = 0;
          *((void *)v179 + 2) = 0;
          *((void *)v179 + 3) = v179 + 64;
          *((void *)v179 + 4) = 0;
          *((void *)v179 + 5) = 0;
          *((void *)v179 + 6) = 0;
          *((void *)v179 + 7) = v179 + 64;
          IntegerValue = llvm::Constant::getIntegerValue((llvm::Constant ***)v3, (llvm::Type *)&v352, v180);
          __int16 v349 = 257;
          sub_1CB90C994(*(_DWORD **)IntegerValue);
          uint64_t v77 = v182;
          int v78 = (llvm::Value *)v14;
          __int16 v79 = v321;
          goto LABEL_380;
        }
        if (!memcmp((const void *)v15, (const void *)__s2, (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8))goto LABEL_379; {
      }
        }
LABEL_30:
      if (v324[16] < 0x15u)
      {
LABEL_31:
        uint64_t v22 = a2[1];
        if (v22)
        {
          if (!v22[1])
          {
            uint64_t v347 = 0;
            int v343 = 0;
            int matched = llvm::matchSelectPattern((uint64_t)v22[3], (uint64_t)&v347, &v343, 0, 0);
            if (matched)
            {
              if ((matched - 7) >= 2)
              {
                v363[0] = 0;
                if (sub_1CCA79544((uint64_t)v363, (uint64_t)v322)
                  || (uint64_t v362 = 0, sub_1CCA79544((uint64_t)&v362, (uint64_t)v324)))
                {
                  if ((v321 - 32) >= 2)
                  {
                    switch((int)v321)
                    {
                      case '#':
                        goto LABEL_172;
                      case '$':
                        goto LABEL_56;
                      case '%':
                        goto LABEL_205;
                      case '&':
                        goto LABEL_162;
                      case '\'':
                        goto LABEL_200;
                      case '(':
                        goto LABEL_121;
                      case ')':
                        goto LABEL_308;
                      default:
                        goto LABEL_102;
                    }
                  }
LABEL_35:
                  if (v16 > 0x40)
                  {
                    unint64_t v106 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
                    while (v106)
                    {
                      unint64_t v107 = *(void *)(__s2 - 8 + v106);
                      unint64_t v108 = *(void *)(v19 - 8 + v106);
                      v106 -= 8;
                      if (v107 != v108)
                      {
                        if (v107 <= v108) {
                          goto LABEL_37;
                        }
                        break;
                      }
                    }
                  }
                  else if (__s2 < v19)
                  {
LABEL_37:
                    Bool = llvm::ConstantInt::getBool(*a2, (llvm::Type *)(v321 == 33), v12);
                    goto LABEL_38;
                  }
                  if (v14 > 0x40)
                  {
                    unint64_t v157 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                    while (v157)
                    {
                      unint64_t v158 = *(void *)(v15 - 8 + v157);
                      unint64_t v159 = *(void *)(__n - 8 + v157);
                      v157 -= 8;
                      BOOL v109 = v158 > v159;
                      if (v158 != v159) {
                        goto LABEL_229;
                      }
                    }
                  }
                  else
                  {
                    BOOL v109 = v15 > __n;
LABEL_229:
                    if (v109) {
                      goto LABEL_37;
                    }
                  }
                  unsigned int v110 = v359;
                  unsigned int v328 = v359;
                  if (v359 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v111 = ~v358;
                  unint64_t v112 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v359;
                  if (!v359) {
                    unint64_t v112 = 0;
                  }
                  BOOL v113 = (llvm::APInt *)(v112 & v111);
                  unint64_t v327 = v112 & v111;
                  unsigned int v328 = 0;
                  unsigned int v114 = v355;
                  if (v355)
                  {
                    if (v355 <= 0x40)
                    {
                      if (v354 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v355) {
                        goto LABEL_236;
                      }
LABEL_392:
                      char v125 = 1;
                      goto LABEL_266;
                    }
                    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v354) != v114) {
                      goto LABEL_392;
                    }
                  }
LABEL_236:
                  uint64_t v362 = 0;
                  uint64_t v347 = (uint64_t)v363;
                  v348[0] = &v362;
                  v348[1] = 0;
                  int v115 = *((unsigned __int8 *)v322 + 16);
                  if (v115 == 5)
                  {
                    if (*((_WORD *)v322 + 9) != 28) {
                      goto LABEL_246;
                    }
                    int v117 = (llvm::Constant **)((char *)v322 - 32 * (*((_DWORD *)v322 + 5) & 0x7FFFFFF));
                    if (!*v117) {
                      goto LABEL_246;
                    }
                    v363[0] = *v117;
                    if (!sub_1CBF5295C((uint64_t)v348, v117[4])) {
                      goto LABEL_246;
                    }
                  }
                  else
                  {
                    if (v115 != 56) {
                      goto LABEL_246;
                    }
                    if (!*((void *)v322 - 8)) {
                      goto LABEL_246;
                    }
                    v363[0] = *((llvm::APInt **)v322 - 8);
                    if ((sub_1CBF528D8((uint64_t)v348, *((unsigned __int8 **)v322 - 4)) & 1) == 0) {
                      goto LABEL_246;
                    }
                  }
                  uint64_t v116 = *(unsigned int *)(v362 + 8);
                  if (v116 > 0x40)
                  {
                    if (!memcmp(*(const void **)v362, v113, ((unint64_t)(v116 + 63) >> 3) & 0x3FFFFFF8))
                    {
LABEL_247:
                      *(void *)uint64_t v326 = 0;
                      int v118 = v363[0];
                      v348[0] = v326;
                      int v119 = *((unsigned __int8 *)v363[0] + 16);
                      if (v119 == 5)
                      {
                        if (*((_WORD *)v363[0] + 9) != 25) {
                          goto LABEL_263;
                        }
                        if (!sub_1CBF5270C((uint64_t)&v347, *((llvm::Constant **)v363[0] - 4 * (*((_DWORD *)v363[0] + 5) & 0x7FFFFFF))))goto LABEL_263; {
                        uint64_t v120 = ((void *)v118 - 4 * (*((_DWORD *)v118 + 5) & 0x7FFFFFF))[4];
                        }
                        if (!v120) {
                          goto LABEL_263;
                        }
                      }
                      else
                      {
                        if (v119 != 53) {
                          goto LABEL_263;
                        }
                        if (!sub_1CBF5250C((uint64_t)&v347, *((llvm::Constant **)v363[0] - 8))) {
                          goto LABEL_263;
                        }
                        uint64_t v120 = *((void *)v118 - 4);
                        if (!v120) {
                          goto LABEL_263;
                        }
                      }
                      *(void *)v348[0] = v120;
                      unsigned int v344 = v110;
                      if (v110 > 0x40) {
                        operator new[]();
                      }
                      int v343 = v113;
                      uint64_t v121 = **(llvm::ConstantInt ***)v326;
                      unsigned int v14 = (llvm::UndefValue **)v113;
                      uint8x8_t v122 = (uint8x8_t)vcnt_s8((int8x8_t)v113);
                      v122.i16[0] = vaddlv_u8(v122);
                      if (v122.u32[0] == 1)
                      {
                        unsigned int v133 = __clz(__rbit64((unint64_t)v113));
                        if (v110 >= v133) {
                          unsigned int v134 = v133;
                        }
                        else {
                          unsigned int v134 = v110;
                        }
                        uint64_t v135 = llvm::ConstantInt::get(v121, v134, 0);
                        int v136 = dword_1CFB278F0[v321];
                        unint64_t v137 = (char *)operator new(0x80uLL);
                        unsigned int v14 = (llvm::UndefValue **)(v137 + 64);
                        *((_DWORD *)v137 + 21) = *((_DWORD *)v137 + 21) & 0x38000000 | 2;
                        *(void *)unint64_t v137 = 0;
                        *((void *)v137 + 1) = 0;
                        *((void *)v137 + 2) = 0;
                        *((void *)v137 + 3) = v137 + 64;
                        *((void *)v137 + 4) = 0;
                        *((void *)v137 + 5) = 0;
                        *((void *)v137 + 6) = 0;
                        *((void *)v137 + 7) = v137 + 64;
                        uint64_t v138 = *(llvm::ConstantInt ***)v326;
                        __int16 v349 = 257;
                        uint64_t v139 = **(void **)v326;
                        uint64_t v140 = ****(void ****)v326 + 1888;
                        if (!**(void **)v326 || (*(_DWORD *)(v139 + 8) & 0xFE) != 0x12) {
                          goto LABEL_292;
                        }
                        uint64_t v266 = (uint64_t **)(****(void ****)v326 + 1888);
                        uint64_t v267 = (llvm::Type *)*(unsigned int *)(v139 + 32);
                        if (*(_DWORD *)(v139 + 8) == 19) {
                          llvm::ScalableVectorType::get(v266, v267);
                        }
                        else {
                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v266, v267);
                        }
                      }
                      else
                      {
                        llvm::APInt::operator++((uint64_t)&v343);
                        if (v344 > 0x40)
                        {
                          int v305 = 0;
                          unint64_t v306 = ((unint64_t)v344 + 63) >> 6;
                          uint64_t v307 = v343;
                          do
                          {
                            int8x8_t v308 = *(int8x8_t *)v307;
                            uint64_t v307 = (llvm::APInt *)((char *)v307 + 8);
                            uint8x8_t v309 = (uint8x8_t)vcnt_s8(v308);
                            v309.i16[0] = vaddlv_u8(v309);
                            v305 += v309.i32[0];
                            --v306;
                          }
                          while (v306);
                          if (v305 != 1) {
                            goto LABEL_259;
                          }
                          unsigned int v303 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v343);
                        }
                        else
                        {
                          uint8x8_t v123 = (uint8x8_t)vcnt_s8((int8x8_t)v343);
                          v123.i16[0] = vaddlv_u8(v123);
                          if (v123.u32[0] != 1)
                          {
LABEL_259:
                            char v124 = 1;
LABEL_260:
                            if (v344 >= 0x41 && v343) {
                              MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
                            }
                            if ((v124 & 1) == 0)
                            {
                              char v125 = 0;
                              goto LABEL_266;
                            }
LABEL_263:
                            int v343 = 0;
                            if (v110 > 0x40)
                            {
                              int v186 = 0;
                              int64_t v187 = ((unint64_t)v110 + 63) >> 6;
                              do
                              {
                                BOOL v52 = v187-- < 1;
                                if (v52) {
                                  break;
                                }
                                unint64_t v188 = *((void *)v113 + v187);
                                v186 += __clz(v188);
                              }
                              while (!v188);
                              unsigned int v189 = v110 | 0xFFFFFFC0;
                              if ((v110 & 0x3F) == 0) {
                                unsigned int v189 = 0;
                              }
                              if (v186 + v189 != v110 - 1) {
                                goto LABEL_265;
                              }
                            }
                            else if (v113 != (llvm::APInt *)1)
                            {
LABEL_265:
                              char v125 = 1;
                              goto LABEL_266;
                            }
                            int v190 = v363[0];
                            uint64_t v347 = (uint64_t)&v343;
                            v348[0] = v326;
                            int v191 = *((unsigned __int8 *)v363[0] + 16);
                            if (v191 == 5)
                            {
                              if (*((_WORD *)v363[0] + 9) != 26) {
                                goto LABEL_265;
                              }
                              if (!sub_1CD68A8DC((int8x8_t ***)&v347, *((llvm::Constant **)v363[0]- 4 * (*((_DWORD *)v363[0] + 5) & 0x7FFFFFF))))goto LABEL_265; {
                              uint64_t v198 = ((void *)v190 - 4 * (*((_DWORD *)v190 + 5) & 0x7FFFFFF))[4];
                              }
                              if (!v198) {
                                goto LABEL_265;
                              }
                              goto LABEL_413;
                            }
                            if (v191 != 54) {
                              goto LABEL_265;
                            }
                            uint64_t v192 = (llvm::Constant *)*((void *)v363[0] - 8);
                            unsigned int v193 = *((unsigned __int8 *)v192 + 16);
                            if (v192) {
                              BOOL v194 = v193 == 16;
                            }
                            else {
                              BOOL v194 = 0;
                            }
                            if (v194)
                            {
                              int v195 = (int8x8_t *)((char *)v192 + 24);
                              uint64_t v196 = *((unsigned int *)v192 + 8);
                              if (v196 <= 0x40)
                              {
                                uint8x8_t v197 = (uint8x8_t)vcnt_s8(*v195);
                                v197.i16[0] = vaddlv_u8(v197);
                                if (v197.u32[0] == 1) {
                                  goto LABEL_408;
                                }
                                if ((*(_DWORD *)(*(void *)v192 + 8) & 0xFE) != 0x12) {
                                  goto LABEL_265;
                                }
                                goto LABEL_496;
                              }
                              int v246 = 0;
                              unint64_t v247 = (unint64_t)(v196 + 63) >> 6;
                              unsigned int v248 = (int8x8_t *)*v195;
                              do
                              {
                                int8x8_t v249 = *v248++;
                                uint8x8_t v250 = (uint8x8_t)vcnt_s8(v249);
                                v250.i16[0] = vaddlv_u8(v250);
                                v246 += v250.i32[0];
                                --v247;
                              }
                              while (v247);
                              if (v246 == 1) {
                                goto LABEL_408;
                              }
                            }
                            if ((*(_DWORD *)(*(void *)v192 + 8) & 0xFE) != 0x12 || v193 > 0x14) {
                              goto LABEL_265;
                            }
LABEL_496:
                            SplatValue = (int8x8_t *)llvm::Constant::getSplatValue(v192, 0);
                            if (!SplatValue || SplatValue[2].i8[0] != 16) {
                              goto LABEL_265;
                            }
                            int v195 = SplatValue + 3;
                            uint64_t v253 = SplatValue[4].u32[0];
                            if (v253 > 0x40)
                            {
                              int v315 = 0;
                              unint64_t v316 = (unint64_t)(v253 + 63) >> 6;
                              uint64_t v317 = (int8x8_t *)*v195;
                              do
                              {
                                int8x8_t v318 = *v317++;
                                uint8x8_t v319 = (uint8x8_t)vcnt_s8(v318);
                                v319.i16[0] = vaddlv_u8(v319);
                                v315 += v319.i32[0];
                                --v316;
                              }
                              while (v316);
                              if (v315 != 1) {
                                goto LABEL_265;
                              }
                            }
                            else
                            {
                              uint8x8_t v254 = (uint8x8_t)vcnt_s8(*v195);
                              v254.i16[0] = vaddlv_u8(v254);
                              if (v254.u32[0] != 1) {
                                goto LABEL_265;
                              }
                            }
LABEL_408:
                            *(void *)uint64_t v347 = v195;
                            uint64_t v198 = *((void *)v190 - 4);
                            if (!v198) {
                              goto LABEL_265;
                            }
LABEL_413:
                            unsigned int v199 = v16;
                            *(void *)v348[0] = v198;
                            unsigned int v200 = *((_DWORD *)v343 + 2);
                            if (v200 > 0x40)
                            {
                              unsigned int v202 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v343);
                            }
                            else
                            {
                              unsigned int v201 = __clz(__rbit64(*(void *)v343));
                              if (v200 >= v201) {
                                unsigned int v202 = v201;
                              }
                              else {
                                unsigned int v202 = *((_DWORD *)v343 + 2);
                              }
                            }
                            int v203 = dword_1CFB278F0[v321];
                            uint64_t v204 = (char *)operator new(0x80uLL);
                            unsigned int v14 = (llvm::UndefValue **)(v204 + 64);
                            *((_DWORD *)v204 + 21) = *((_DWORD *)v204 + 21) & 0x38000000 | 2;
                            *(void *)uint64_t v204 = 0;
                            *((void *)v204 + 1) = 0;
                            *((void *)v204 + 2) = 0;
                            *((void *)v204 + 3) = v204 + 64;
                            *((void *)v204 + 4) = 0;
                            *((void *)v204 + 5) = 0;
                            *((void *)v204 + 6) = 0;
                            *((void *)v204 + 7) = v204 + 64;
                            int v205 = *(llvm::ConstantInt ***)v326;
                            unint64_t v206 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v326, v202, 0);
                            __int16 v349 = 257;
                            int v207 = *v205;
                            uint64_t v208 = **(void **)*v205 + 1888;
                            if (*v205 && (*((_DWORD *)v207 + 2) & 0xFE) == 0x12)
                            {
                              size_t v280 = (uint64_t **)(**(void **)*v205 + 1888);
                              int v281 = (llvm::Type *)*((unsigned int *)v207 + 8);
                              if (*((_DWORD *)v207 + 2) == 19) {
                                llvm::ScalableVectorType::get(v280, v281);
                              }
                              else {
                                llvm::FixedVectorType::get((llvm::FixedVectorType *)v280, v281);
                              }
                              uint64_t v208 = v282;
                            }
                            llvm::CmpInst::CmpInst((llvm::Value *)v14, v208, 53, v203, (uint64_t)v205, (uint64_t)v206, (const char **)&v347, 0, 0);
                            char v125 = 0;
                            unsigned int v16 = v199;
LABEL_266:
                            if (v110 >= 0x41 && v113) {
                              MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
                            }
                            if ((v125 & 1) == 0) {
                              goto LABEL_40;
                            }
                            goto LABEL_268;
                          }
                          unsigned int v302 = __clz(__rbit64((unint64_t)v343));
                          if (v344 >= v302) {
                            unsigned int v303 = v302;
                          }
                          else {
                            unsigned int v303 = v344;
                          }
                        }
                        uint64_t v135 = llvm::ConstantInt::get(v121, v303, 0);
                        uint64_t v304 = (char *)operator new(0x80uLL);
                        unsigned int v14 = (llvm::UndefValue **)(v304 + 64);
                        *((_DWORD *)v304 + 21) = *((_DWORD *)v304 + 21) & 0x38000000 | 2;
                        *(void *)uint64_t v304 = 0;
                        *((void *)v304 + 1) = 0;
                        *((void *)v304 + 2) = 0;
                        *((void *)v304 + 3) = v304 + 64;
                        *((void *)v304 + 4) = 0;
                        *((void *)v304 + 5) = 0;
                        *((void *)v304 + 6) = 0;
                        *((void *)v304 + 7) = v304 + 64;
                        if (v321 == 32) {
                          LOWORD(v136) = 35;
                        }
                        else {
                          LOWORD(v136) = 36;
                        }
                        uint64_t v138 = *(llvm::ConstantInt ***)v326;
                        __int16 v349 = 257;
                        sub_1CB90C994(**(_DWORD ***)v326);
                      }
                      uint64_t v140 = v268;
LABEL_292:
                      llvm::CmpInst::CmpInst((llvm::Value *)v14, v140, 53, v136, (uint64_t)v138, (uint64_t)v135, (const char **)&v347, 0, 0);
                      char v124 = 0;
                      goto LABEL_260;
                    }
                  }
                  else if (*(llvm::APInt **)v362 == v113)
                  {
                    goto LABEL_247;
                  }
LABEL_246:
                  v363[0] = v322;
                  goto LABEL_247;
                }
              }
            }
          }
        }
        switch((int)v321)
        {
          case '""':
            if (v20 > 0x40)
            {
              if (!memcmp((const void *)__n, (const void *)v15, (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8)) {
                goto LABEL_546;
              }
            }
            else if (__n == v15)
            {
              goto LABEL_546;
            }
            v363[0] = 0;
            uint64_t v347 = (uint64_t)v363;
            v348[0] = 0;
            if (!sub_1CBF528D8((uint64_t)&v347, v324)) {
              goto LABEL_102;
            }
            int v42 = v363[0];
            unsigned int v340 = v16;
            if (v16 > 0x40) {
              operator new[]();
            }
            unsigned int v43 = v16;
            uint64_t v339 = (void *)__s2;
            llvm::APInt::operator-=((uint64_t)&v339, 1uLL);
            unsigned int v44 = v340;
            uint64_t v45 = v339;
            unsigned int v340 = 0;
            uint64_t v46 = *((unsigned int *)v42 + 2);
            if (v46 > 0x40) {
              BOOL v47 = memcmp(*(const void **)v42, v339, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8) == 0;
            }
            else {
              BOOL v47 = *(void *)v42 == (void)v339;
            }
            int v48 = v47;
            if (v44 >= 0x41)
            {
              if (v45)
              {
                MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
                if (v340 >= 0x41)
                {
                  if (v339) {
                    MEMORY[0x1D25D9CB0](v339, 0x1000C8000313F17);
                  }
                }
              }
            }
            unsigned int v16 = v43;
            if (!v48)
            {
              if (v359 > 0x40) {
                unsigned int v49 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v358);
              }
              else {
                unsigned int v49 = __clz(__rbit64(~v358));
              }
              unsigned int v50 = *((_DWORD *)v363[0] + 2);
              if (v50 > 0x40) {
                int v51 = llvm::APInt::countLeadingZerosSlowCase(v363[0]);
              }
              else {
                int v51 = v50 + __clz(*(void *)v363[0]) - 64;
              }
              if (v49 >= v50 - v51)
              {
                uint64_t v212 = (char *)operator new(0x80uLL);
                unsigned int v14 = (llvm::UndefValue **)(v212 + 64);
                *((_DWORD *)v212 + 21) = *((_DWORD *)v212 + 21) & 0x38000000 | 2;
                *(void *)uint64_t v212 = 0;
                *((void *)v212 + 1) = 0;
                *((void *)v212 + 2) = 0;
                *((void *)v212 + 3) = v212 + 64;
                *((void *)v212 + 4) = 0;
                *((void *)v212 + 5) = 0;
                *((void *)v212 + 6) = 0;
                *((void *)v212 + 7) = v212 + 64;
                NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v324, v213, v214);
                __int16 v349 = 257;
                uint64_t v215 = *(void *)v322;
                uint64_t v77 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
                if (*(void *)v322 && (*(_DWORD *)(v215 + 8) & 0xFE) == 0x12)
                {
                  llvm::VectorType::get(v77, (llvm::Type *)(*(unsigned int *)(v215 + 32) | ((unint64_t)(*(_DWORD *)(v215 + 8) == 19) << 32)));
                  uint64_t v77 = v286;
                }
                int v78 = (llvm::Value *)v14;
                __int16 v79 = 33;
                goto LABEL_148;
              }
LABEL_102:
              if (v14 > 0x40)
              {
                unint64_t v170 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                while (v170)
                {
                  unint64_t v171 = *(void *)(v15 - 8 + v170);
                  unint64_t v172 = *(void *)(__n - 8 + v170);
                  v170 -= 8;
                  BOOL v52 = v171 > v172;
                  if (v171 != v172) {
                    goto LABEL_104;
                  }
                }
              }
              else
              {
                BOOL v52 = v15 > __n;
LABEL_104:
                if (v52) {
                  goto LABEL_123;
                }
              }
              if (v16 <= 0x40)
              {
                BOOL v53 = __s2 > v19;
                goto LABEL_107;
              }
              unint64_t v173 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v173) {
                  goto LABEL_108;
                }
                unint64_t v174 = *(void *)(__s2 - 8 + v173);
                unint64_t v175 = *(void *)(v19 - 8 + v173);
                v173 -= 8;
                BOOL v53 = v174 > v175;
              }
              while (v174 == v175);
              goto LABEL_107;
            }
            uint64_t v258 = (char *)operator new(0x80uLL);
            unsigned int v14 = (llvm::UndefValue **)(v258 + 64);
            *((_DWORD *)v258 + 21) = *((_DWORD *)v258 + 21) & 0x38000000 | 2;
            *(void *)uint64_t v258 = 0;
            *((void *)v258 + 1) = 0;
            *((void *)v258 + 2) = 0;
            *((void *)v258 + 3) = v258 + 64;
            *((void *)v258 + 4) = 0;
            *((void *)v258 + 5) = 0;
            *((void *)v258 + 6) = 0;
            *((void *)v258 + 7) = v258 + 64;
            int v259 = *(llvm::ConstantInt ***)v324;
            unsigned int v338 = *((_DWORD *)v363[0] + 2);
            if (v338 > 0x40) {
              operator new[]();
            }
            uint64_t v337 = *(llvm::APInt **)v363[0];
            llvm::APInt::operator+=((uint64_t)&v337, 1uLL);
            unsigned int v344 = v338;
            int v343 = v337;
            unsigned int v338 = 0;
            unint64_t v261 = llvm::ConstantInt::get(v259, (llvm::Type *)&v343, v260);
            __int16 v349 = 257;
            sub_1CB90C994(*(_DWORD **)v322);
            llvm::CmpInst::CmpInst((llvm::Value *)v14, v262, 53, 32, (uint64_t)v322, (uint64_t)v261, (const char **)&v347, 0, 0);
            if (v344 >= 0x41 && v343) {
              MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
            }
            if (v338 >= 0x41)
            {
              uint64_t v156 = v337;
              if (v337) {
                goto LABEL_330;
              }
            }
            goto LABEL_40;
          case '#':
LABEL_172:
            if (v14 > 0x40)
            {
              unsigned int v219 = v16;
              unint64_t v220 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                unsigned int v16 = v219;
                if (!v220) {
                  goto LABEL_123;
                }
                unint64_t v221 = *(void *)(v15 - 8 + v220);
                unint64_t v222 = *(void *)(__n - 8 + v220);
                v220 -= 8;
              }
              while (v221 == v222);
              unsigned int v16 = v219;
              if (v221 > v222) {
                goto LABEL_123;
              }
            }
            else if (v15 >= __n)
            {
              goto LABEL_123;
            }
            if (v16 <= 0x40)
            {
              if (__s2 < v19) {
                goto LABEL_108;
              }
              goto LABEL_176;
            }
            unsigned int v209 = v16;
            unint64_t v243 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              unsigned int v16 = v209;
              if (!v243) {
                goto LABEL_176;
              }
              unint64_t v244 = *(void *)(__s2 - 8 + v243);
              unint64_t v245 = *(void *)(v19 - 8 + v243);
              v243 -= 8;
              BOOL v242 = v244 > v245;
            }
            while (v244 == v245);
            goto LABEL_486;
          case '$':
            if (v18 > 0x40)
            {
              if (memcmp((const void *)v19, (const void *)__s2, (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8))
              {
LABEL_55:
                v363[0] = 0;
                uint64_t v347 = (uint64_t)v363;
                v348[0] = 0;
                if (sub_1CBF528D8((uint64_t)&v347, v324))
                {
                  __int16 v64 = v363[0];
                  unsigned int v346 = v14;
                  unsigned int v65 = v16;
                  if (v14 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v345 = (void *)v15;
                  llvm::APInt::operator+=((uint64_t)&v345, 1uLL);
                  unsigned int v66 = v346;
                  __int16 v67 = v345;
                  unsigned int v346 = 0;
                  uint64_t v68 = *((unsigned int *)v64 + 2);
                  if (v68 > 0x40) {
                    BOOL v69 = memcmp(*(const void **)v64, v345, ((unint64_t)(v68 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  }
                  else {
                    BOOL v69 = *(void *)v64 == (void)v345;
                  }
                  int v70 = v69;
                  if (v66 >= 0x41)
                  {
                    if (v67)
                    {
                      MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
                      if (v346 >= 0x41)
                      {
                        if (v345) {
                          MEMORY[0x1D25D9CB0](v345, 0x1000C8000313F17);
                        }
                      }
                    }
                  }
                  unsigned int v16 = v65;
                  if (v70)
                  {
                    uint64_t v150 = (char *)operator new(0x80uLL);
                    unsigned int v14 = (llvm::UndefValue **)(v150 + 64);
                    *((_DWORD *)v150 + 21) = *((_DWORD *)v150 + 21) & 0x38000000 | 2;
                    *(void *)uint64_t v150 = 0;
                    *((void *)v150 + 1) = 0;
                    *((void *)v150 + 2) = 0;
                    *((void *)v150 + 3) = v150 + 64;
                    *((void *)v150 + 4) = 0;
                    *((void *)v150 + 5) = 0;
                    *((void *)v150 + 6) = 0;
                    *((void *)v150 + 7) = v150 + 64;
                    char v151 = *(llvm::Constant **)v324;
                    unsigned int v342 = *((_DWORD *)v363[0] + 2);
                    if (v342 > 0x40) {
                      operator new[]();
                    }
                    int v341 = *(llvm::APInt **)v363[0];
                    llvm::APInt::operator-=((uint64_t)&v341, 1uLL);
                    unsigned int v344 = v342;
                    int v343 = v341;
                    unsigned int v342 = 0;
                    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v151, (llvm::LLVMContext *)&v343, v152);
                    if ((*((_DWORD *)v151 + 2) & 0xFE) == 0x12) {
                      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v151 + 8) | ((unint64_t)(*((_DWORD *)v151 + 2) == 19) << 32)), (uint64_t)Splat);
                    }
                    __int16 v349 = 257;
                    uint64_t v154 = *(void *)v322;
                    int v155 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
                    if (*(void *)v322 && (*(_DWORD *)(v154 + 8) & 0xFE) == 0x12)
                    {
                      llvm::VectorType::get(v155, (llvm::Type *)(*(unsigned int *)(v154 + 32) | ((unint64_t)(*(_DWORD *)(v154 + 8) == 19) << 32)));
                      int v155 = v283;
                    }
                    llvm::CmpInst::CmpInst((llvm::Value *)v14, (uint64_t)v155, 53, 32, (uint64_t)v322, (uint64_t)Splat, (const char **)&v347, 0, 0);
                    if (v344 >= 0x41 && v343) {
                      MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
                    }
                    if (v342 >= 0x41)
                    {
                      uint64_t v156 = v341;
                      if (v341) {
LABEL_330:
                      }
                        MEMORY[0x1D25D9CB0](v156, 0x1000C8000313F17);
                    }
                    goto LABEL_40;
                  }
                  unsigned int v71 = v359 > 0x40
                      ? llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v358)
                      : __clz(__rbit64(~v358));
                  if (v71 >= sub_1CC1755AC((uint64_t)v363[0]))
                  {
                    uint64_t v72 = (char *)operator new(0x80uLL);
                    unsigned int v14 = (llvm::UndefValue **)(v72 + 64);
                    *((_DWORD *)v72 + 21) = *((_DWORD *)v72 + 21) & 0x38000000 | 2;
                    *(void *)uint64_t v72 = 0;
                    *((void *)v72 + 1) = 0;
                    *((void *)v72 + 2) = 0;
                    *((void *)v72 + 3) = v72 + 64;
                    *((void *)v72 + 4) = 0;
                    *((void *)v72 + 5) = 0;
                    *((void *)v72 + 6) = 0;
                    *((void *)v72 + 7) = v72 + 64;
                    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v324, v73, v74);
                    __int16 v349 = 257;
                    uint64_t v76 = *(void *)v322;
                    uint64_t v77 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
                    if (*(void *)v322 && (*(_DWORD *)(v76 + 8) & 0xFE) == 0x12)
                    {
                      llvm::VectorType::get(v77, (llvm::Type *)(*(unsigned int *)(v76 + 32) | ((unint64_t)(*(_DWORD *)(v76 + 8) == 19) << 32)));
                      uint64_t v77 = v285;
                    }
                    int v78 = (llvm::Value *)v14;
                    __int16 v79 = 32;
LABEL_148:
                    uint64_t v80 = (uint64_t)v322;
                    goto LABEL_149;
                  }
                }
LABEL_56:
                if (v16 > 0x40)
                {
                  unint64_t v147 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v147) {
                      goto LABEL_318;
                    }
                    unint64_t v148 = *(void *)(__s2 - 8 + v147);
                    unint64_t v149 = *(void *)(v19 - 8 + v147);
                    v147 -= 8;
                  }
                  while (v148 == v149);
                  if (v148 <= v149)
                  {
LABEL_58:
                    uint64_t v29 = *a2;
                    uint64_t v30 = **a2;
                    uint64_t v31 = *v30;
                    int v32 = *(llvm::Value **)(*v30 + 1560);
                    if (!v32)
                    {
                      uint64_t v100 = *(llvm::ConstantInt **)(v31 + 1888);
                      unsigned int v101 = *(_DWORD *)(v31 + 1896);
                      LODWORD(v348[0]) = v101 >> 8;
                      if (v101 >> 8 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v347);
                      }
                      if (v101 <= 0xFF) {
                        char v102 = 0;
                      }
                      else {
                        char v102 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v101);
                      }
                      uint64_t v347 = v102 & 1;
                      int v32 = (llvm::Value *)llvm::ConstantInt::get(v100, (llvm::LLVMContext *)&v347, v12);
                      if (LODWORD(v348[0]) >= 0x41 && v347) {
                        MEMORY[0x1D25D9CB0](v347, 0x1000C8000313F17);
                      }
                      *(void *)(v31 + 1560) = v32;
                    }
                    if ((v29[1] & 0xFE) == 0x12) {
                      int v32 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v29 + 8) | ((unint64_t)(*((_DWORD *)v29 + 2) == 19) << 32)), (uint64_t)v32);
                    }
                    uint64_t v26 = (uint64_t)a1;
                    uint64_t v27 = (llvm::ValueAsMetadata *)a2;
                    int v25 = v32;
                    goto LABEL_39;
                  }
                }
                else if (__s2 < v19)
                {
                  goto LABEL_58;
                }
LABEL_318:
                if (v14 <= 0x40)
                {
                  if (v15 < __n) {
                    goto LABEL_268;
                  }
                  goto LABEL_108;
                }
                unint64_t v176 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v176) {
                    goto LABEL_108;
                  }
                  unint64_t v177 = *(void *)(v15 - 8 + v176);
                  unint64_t v178 = *(void *)(__n - 8 + v176);
                  v176 -= 8;
                  BOOL v169 = v177 > v178;
                }
                while (v177 == v178);
                goto LABEL_361;
              }
            }
            else if (v19 != __s2)
            {
              goto LABEL_55;
            }
LABEL_546:
            uint64_t v292 = (char *)operator new(0x80uLL);
            unsigned int v14 = (llvm::UndefValue **)(v292 + 64);
            *((_DWORD *)v292 + 21) = *((_DWORD *)v292 + 21) & 0x38000000 | 2;
            *(void *)uint64_t v292 = 0;
            *((void *)v292 + 1) = 0;
            *((void *)v292 + 2) = 0;
            *((void *)v292 + 3) = v292 + 64;
            *((void *)v292 + 4) = 0;
            *((void *)v292 + 5) = 0;
            *((void *)v292 + 6) = 0;
            *((void *)v292 + 7) = v292 + 64;
            __int16 v349 = 257;
            uint64_t v293 = *(void *)v322;
            uint64_t v77 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
            if (*(void *)v322 && (*(_DWORD *)(v293 + 8) & 0xFE) == 0x12)
            {
              llvm::VectorType::get(v77, (llvm::Type *)(*(unsigned int *)(v293 + 32) | ((unint64_t)(*(_DWORD *)(v293 + 8) == 19) << 32)));
              uint64_t v77 = v294;
            }
            int v78 = (llvm::Value *)v14;
            __int16 v79 = 33;
LABEL_550:
            uint64_t v80 = (uint64_t)v322;
            goto LABEL_551;
          case '%':
LABEL_205:
            if (v16 > 0x40)
            {
              unsigned int v269 = v16;
              unint64_t v270 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                unsigned int v16 = v269;
                if (!v270) {
                  goto LABEL_123;
                }
                unint64_t v271 = *(void *)(__s2 - 8 + v270);
                unint64_t v272 = *(void *)(v19 - 8 + v270);
                v270 -= 8;
              }
              while (v271 == v272);
              unsigned int v16 = v269;
              if (v271 <= v272) {
                goto LABEL_123;
              }
            }
            else if (__s2 <= v19)
            {
              goto LABEL_123;
            }
            if (v14 <= 0x40)
            {
              if (v15 > __n) {
                goto LABEL_108;
              }
              goto LABEL_209;
            }
            unsigned int v263 = v16;
            unint64_t v277 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              unsigned int v16 = v263;
              if (!v277) {
                goto LABEL_209;
              }
              unint64_t v278 = *(void *)(v15 - 8 + v277);
              unint64_t v279 = *(void *)(__n - 8 + v277);
              v277 -= 8;
              BOOL v276 = v278 > v279;
            }
            while (v278 == v279);
            goto LABEL_531;
          case '&':
            unsigned int v54 = v16;
            if (v20 > 0x40)
            {
              if (memcmp((const void *)__n, (const void *)v15, (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8))
              {
LABEL_152:
                v363[0] = 0;
                uint64_t v347 = (uint64_t)v363;
                v348[0] = 0;
                if (!sub_1CBF528D8((uint64_t)&v347, v324)) {
                  goto LABEL_161;
                }
                int v82 = v363[0];
                unsigned int v332 = v54;
                if (v54 > 0x40) {
                  operator new[]();
                }
                uint64_t v331 = (void *)__s2;
                llvm::APInt::operator-=((uint64_t)&v331, 1uLL);
                unsigned int v83 = v332;
                uint64_t v84 = v331;
                unsigned int v332 = 0;
                uint64_t v85 = *((unsigned int *)v82 + 2);
                if (v85 > 0x40) {
                  BOOL v86 = memcmp(*(const void **)v82, v331, ((unint64_t)(v85 + 63) >> 3) & 0x3FFFFFF8) == 0;
                }
                else {
                  BOOL v86 = *(void *)v82 == (void)v331;
                }
                int v87 = v86;
                if (v83 >= 0x41)
                {
                  if (v84)
                  {
                    MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
                    if (v332 >= 0x41)
                    {
                      if (v331) {
                        MEMORY[0x1D25D9CB0](v331, 0x1000C8000313F17);
                      }
                    }
                  }
                }
                if (!v87)
                {
LABEL_161:
                  unsigned int v16 = v54;
LABEL_162:
                  if (v14 > 0x40)
                  {
                    uint64_t v141 = *(void *)(v15 + 8 * ((v14 - 1) >> 6)) & (1 << (v14 - 1));
                    size_t v142 = __n;
                    if (v20 >= 0x41) {
                      size_t v142 = *(void *)(__n + 8 * ((v20 - 1) >> 6));
                    }
                    if ((v141 != 0) == ((v142 & (1 << (v20 - 1))) != 0))
                    {
                      unint64_t v160 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                      while (v160)
                      {
                        unint64_t v161 = *(void *)(v15 - 8 + v160);
                        unint64_t v162 = *(void *)(__n - 8 + v160);
                        v160 -= 8;
                        if (v161 != v162)
                        {
                          if (v161 > v162) {
                            goto LABEL_123;
                          }
                          break;
                        }
                      }
                    }
                    else if (!v141)
                    {
                      goto LABEL_123;
                    }
                  }
                  else if ((uint64_t)(v15 << -(char)v14) >> -(char)v14 > (uint64_t)(__n << -(char)v14) >> -(char)v14)
                  {
                    goto LABEL_123;
                  }
                  if (v16 > 0x40)
                  {
                    uint64_t v143 = *(void *)(__s2 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
                    uint64_t v144 = (uint64_t *)(v19 + 8 * ((v18 - 1) >> 6));
                    if (v18 < 0x41) {
                      uint64_t v144 = &v350;
                    }
                    if ((v143 != 0) == (((unint64_t)*v144 >> (v18 - 1)) & 1))
                    {
                      unint64_t v163 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v163) {
                          goto LABEL_108;
                        }
                        unint64_t v164 = *(void *)(__s2 - 8 + v163);
                        unint64_t v165 = *(void *)(v19 - 8 + v163);
                        v163 -= 8;
                        BOOL v53 = v164 > v165;
                      }
                      while (v164 == v165);
LABEL_107:
                      if (v53) {
                        goto LABEL_268;
                      }
                    }
                    else if (!v143)
                    {
                      goto LABEL_268;
                    }
                    goto LABEL_108;
                  }
                  if ((uint64_t)(__s2 << -(char)v16) >> -(char)v16 <= (uint64_t)(v19 << -(char)v16) >> -(char)v16) {
                    goto LABEL_108;
                  }
LABEL_268:
                  if ((*((_WORD *)a2 + 9) & 0x3Eu) - 38 > 3) {
                    goto LABEL_269;
                  }
                  int v126 = &v358;
                  if (v359 >= 0x41) {
                    int v126 = (uint64_t *)(v358 + 8 * ((v359 - 1) >> 6));
                  }
                  if ((((unint64_t)*v126 >> (v359 - 1)) & 1) == 0) {
                    goto LABEL_278;
                  }
                  uint64_t v129 = &v354;
                  if (v355 >= 0x41) {
                    uint64_t v129 = (uint64_t *)(v354 + 8 * ((v355 - 1) >> 6));
                  }
                  if ((((unint64_t)*v129 >> (v355 - 1)) & 1) == 0)
                  {
LABEL_278:
                    uint64_t v127 = (int8x8_t ***)&v360;
                    if (v361 >= 0x41) {
                      uint64_t v127 = (int8x8_t ***)(v360 + 8 * ((v361 - 1) >> 6));
                    }
                    if ((((unint64_t)*v127 >> (v361 - 1)) & 1) == 0) {
                      goto LABEL_269;
                    }
                    uint64_t v128 = (int8x8_t ***)&v356;
                    if (v357 >= 0x41) {
                      uint64_t v128 = (int8x8_t ***)(v356 + 8 * ((v357 - 1) >> 6));
                    }
                    if ((((unint64_t)*v128 >> (v357 - 1)) & 1) == 0)
                    {
LABEL_269:
                      unsigned int v14 = 0;
                      goto LABEL_40;
                    }
                  }
                  uint64_t v130 = (char *)operator new(0x80uLL);
                  unsigned int v14 = (llvm::UndefValue **)(v130 + 64);
                  *((_DWORD *)v130 + 21) = *((_DWORD *)v130 + 21) & 0x38000000 | 2;
                  *(void *)uint64_t v130 = 0;
                  *((void *)v130 + 1) = 0;
                  *((void *)v130 + 2) = 0;
                  *((void *)v130 + 3) = v130 + 64;
                  *((void *)v130 + 4) = 0;
                  *((void *)v130 + 5) = 0;
                  *((void *)v130 + 6) = 0;
                  *((void *)v130 + 7) = v130 + 64;
                  int v131 = dword_1CFB278C8[(*((_WORD *)a2 + 9) & 0x3F) - 32];
                  __int16 v349 = 257;
                  uint64_t v132 = *(void *)v322;
                  uint64_t v77 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
                  if (*(void *)v322 && (*(_DWORD *)(v132 + 8) & 0xFE) == 0x12)
                  {
                    llvm::VectorType::get(v77, (llvm::Type *)(*(unsigned int *)(v132 + 32) | ((unint64_t)(*(_DWORD *)(v132 + 8) == 19) << 32)));
                    uint64_t v77 = v284;
                  }
                  int v78 = (llvm::Value *)v14;
                  __int16 v79 = v131;
                  goto LABEL_550;
                }
                uint64_t v233 = (char *)operator new(0x80uLL);
                unsigned int v14 = (llvm::UndefValue **)(v233 + 64);
                *((_DWORD *)v233 + 21) = *((_DWORD *)v233 + 21) & 0x38000000 | 2;
                *(void *)uint64_t v233 = 0;
                *((void *)v233 + 1) = 0;
                *((void *)v233 + 2) = 0;
                *((void *)v233 + 3) = v233 + 64;
                *((void *)v233 + 4) = 0;
                *((void *)v233 + 5) = 0;
                *((void *)v233 + 6) = 0;
                *((void *)v233 + 7) = v233 + 64;
                unint64_t v234 = *(llvm::Constant **)v324;
                unsigned int v330 = *((_DWORD *)v363[0] + 2);
                if (v330 > 0x40) {
                  operator new[]();
                }
                int v329 = *(llvm::APInt **)v363[0];
                llvm::APInt::operator+=((uint64_t)&v329, 1uLL);
                unsigned int v344 = v330;
                int v343 = v329;
                unsigned int v330 = 0;
                uint64_t v236 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v234, (llvm::LLVMContext *)&v343, v235);
                if ((*((_DWORD *)v234 + 2) & 0xFE) == 0x12) {
                  uint64_t v236 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v234 + 8) | ((unint64_t)(*((_DWORD *)v234 + 2) == 19) << 32)), (uint64_t)v236);
                }
                __int16 v349 = 257;
                uint64_t v237 = *(void *)v322;
                uint64_t v238 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
                if (*(void *)v322 && (*(_DWORD *)(v237 + 8) & 0xFE) == 0x12)
                {
                  llvm::VectorType::get(v238, (llvm::Type *)(*(unsigned int *)(v237 + 32) | ((unint64_t)(*(_DWORD *)(v237 + 8) == 19) << 32)));
                  uint64_t v238 = v288;
                }
                llvm::CmpInst::CmpInst((llvm::Value *)v14, (uint64_t)v238, 53, 32, (uint64_t)v322, (uint64_t)v236, (const char **)&v347, 0, 0);
                if (v344 >= 0x41 && v343) {
                  MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
                }
                if (v330 < 0x41) {
                  goto LABEL_594;
                }
                unsigned int v232 = v329;
                if (!v329) {
                  goto LABEL_594;
                }
                goto LABEL_478;
              }
            }
            else if (__n != v15)
            {
              goto LABEL_152;
            }
            uint64_t v298 = (char *)operator new(0x80uLL);
            unsigned int v14 = (llvm::UndefValue **)(v298 + 64);
            *((_DWORD *)v298 + 21) = *((_DWORD *)v298 + 21) & 0x38000000 | 2;
            *(void *)uint64_t v298 = 0;
            *((void *)v298 + 1) = 0;
            *((void *)v298 + 2) = 0;
            *((void *)v298 + 3) = v298 + 64;
            *((void *)v298 + 4) = 0;
            *((void *)v298 + 5) = 0;
            *((void *)v298 + 6) = 0;
            *((void *)v298 + 7) = v298 + 64;
            __int16 v349 = 257;
            uint64_t v299 = *(void *)v322;
            unint64_t v300 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
            if (*(void *)v322 && (*(_DWORD *)(v299 + 8) & 0xFE) == 0x12)
            {
              llvm::VectorType::get(v300, (llvm::Type *)(*(unsigned int *)(v299 + 32) | ((unint64_t)(*(_DWORD *)(v299 + 8) == 19) << 32)));
              unint64_t v300 = v301;
            }
            llvm::CmpInst::CmpInst((llvm::Value *)v14, (uint64_t)v300, 53, 33, (uint64_t)v322, (uint64_t)v324, (const char **)&v347, 0, 0);
            goto LABEL_594;
          case '\'':
LABEL_200:
            if (v14 > 0x40)
            {
              unsigned int v183 = v16;
              uint64_t v184 = *(void *)(v15 + 8 * ((v14 - 1) >> 6)) & (1 << (v14 - 1));
              size_t v185 = __n;
              if (v20 >= 0x41) {
                size_t v185 = *(void *)(__n + 8 * ((v20 - 1) >> 6));
              }
              if ((v184 != 0) == ((v185 & (1 << (v20 - 1))) != 0))
              {
                unint64_t v216 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  unsigned int v16 = v183;
                  if (!v216) {
                    goto LABEL_123;
                  }
                  unint64_t v217 = *(void *)(v15 - 8 + v216);
                  unint64_t v218 = *(void *)(__n - 8 + v216);
                  v216 -= 8;
                }
                while (v217 == v218);
                unsigned int v16 = v183;
                if (v217 > v218) {
                  goto LABEL_123;
                }
              }
              else if (!v184)
              {
                goto LABEL_123;
              }
            }
            else if ((uint64_t)(v15 << -(char)v14) >> -(char)v14 >= (uint64_t)(__n << -(char)v14) >> -(char)v14)
            {
              goto LABEL_123;
            }
            if (v16 > 0x40)
            {
              unsigned int v209 = v16;
              uint64_t v210 = *(void *)(__s2 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
              int v211 = (uint64_t *)(v19 + 8 * ((v18 - 1) >> 6));
              if (v18 < 0x41) {
                int v211 = &v350;
              }
              if ((v210 != 0) == (((unint64_t)*v211 >> (v18 - 1)) & 1))
              {
                unint64_t v239 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  unsigned int v16 = v209;
                  if (!v239) {
                    goto LABEL_176;
                  }
                  unint64_t v240 = *(void *)(__s2 - 8 + v239);
                  unint64_t v241 = *(void *)(v19 - 8 + v239);
                  v239 -= 8;
                  BOOL v242 = v240 > v241;
                }
                while (v240 == v241);
LABEL_486:
                unsigned int v16 = v209;
                if (!v242) {
                  goto LABEL_108;
                }
              }
              else if (v210)
              {
                goto LABEL_108;
              }
            }
            else if ((uint64_t)(__s2 << -(char)v16) >> -(char)v16 < (uint64_t)(v19 << -(char)v16) >> -(char)v16)
            {
              goto LABEL_108;
            }
LABEL_176:
            if (v18 > 0x40)
            {
              size_t v310 = (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8;
              unsigned int v311 = (const void *)v19;
              int v312 = (const void *)__s2;
              goto LABEL_616;
            }
            if (v19 != __s2) {
              goto LABEL_268;
            }
            goto LABEL_617;
          case '(':
            unsigned int v54 = v16;
            if (v18 > 0x40)
            {
              if (memcmp((const void *)v19, (const void *)__s2, (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8)) {
                goto LABEL_111;
              }
            }
            else if (v19 != __s2)
            {
LABEL_111:
              v363[0] = 0;
              uint64_t v347 = (uint64_t)v363;
              v348[0] = 0;
              if (!sub_1CBF528D8((uint64_t)&v347, v324)) {
                goto LABEL_120;
              }
              uint64_t v55 = v363[0];
              unsigned int v336 = v14;
              if (v14 > 0x40) {
                operator new[]();
              }
              int v335 = (void *)v15;
              llvm::APInt::operator+=((uint64_t)&v335, 1uLL);
              unsigned int v56 = v336;
              int v57 = v335;
              unsigned int v336 = 0;
              uint64_t v58 = *((unsigned int *)v55 + 2);
              if (v58 > 0x40) {
                BOOL v59 = memcmp(*(const void **)v55, v335, ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else {
                BOOL v59 = *(void *)v55 == (void)v335;
              }
              int v60 = v59;
              if (v56 >= 0x41)
              {
                if (v57)
                {
                  MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
                  if (v336 >= 0x41)
                  {
                    if (v335) {
                      MEMORY[0x1D25D9CB0](v335, 0x1000C8000313F17);
                    }
                  }
                }
              }
              if (!v60)
              {
LABEL_120:
                unsigned int v16 = v54;
LABEL_121:
                if (v16 > 0x40)
                {
                  uint64_t v88 = *(void *)(__s2 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
                  BOOL v89 = (uint64_t *)(v19 + 8 * ((v18 - 1) >> 6));
                  if (v18 < 0x41) {
                    BOOL v89 = &v350;
                  }
                  if ((v88 != 0) == (((unint64_t)*v89 >> (v18 - 1)) & 1))
                  {
                    unint64_t v103 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
                    while (v103)
                    {
                      unint64_t v104 = *(void *)(__s2 - 8 + v103);
                      unint64_t v105 = *(void *)(v19 - 8 + v103);
                      v103 -= 8;
                      if (v104 != v105)
                      {
                        if (v104 <= v105) {
                          goto LABEL_123;
                        }
                        break;
                      }
                    }
                  }
                  else if (v88)
                  {
                    goto LABEL_123;
                  }
                }
                else if ((uint64_t)(__s2 << -(char)v16) >> -(char)v16 < (uint64_t)(v19 << -(char)v16) >> -(char)v16)
                {
                  goto LABEL_123;
                }
                if (v14 <= 0x40)
                {
                  if ((uint64_t)(v15 << -(char)v14) >> -(char)v14 < (uint64_t)(__n << -(char)v14) >> -(char)v14) {
                    goto LABEL_268;
                  }
                  goto LABEL_108;
                }
                uint64_t v145 = *(void *)(v15 + 8 * ((v14 - 1) >> 6)) & (1 << (v14
                                                                                                - 1));
                size_t v146 = __n;
                if (v20 >= 0x41) {
                  size_t v146 = *(void *)(__n + 8 * ((v20 - 1) >> 6));
                }
                if ((v145 != 0) != ((v146 & (1 << (v20 - 1))) != 0))
                {
                  if (!v145) {
                    goto LABEL_108;
                  }
                  goto LABEL_268;
                }
                unint64_t v166 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v166) {
                    goto LABEL_108;
                  }
                  unint64_t v167 = *(void *)(v15 - 8 + v166);
                  unint64_t v168 = *(void *)(__n - 8 + v166);
                  v166 -= 8;
                  BOOL v169 = v167 > v168;
                }
                while (v167 == v168);
LABEL_361:
                if (!v169) {
                  goto LABEL_268;
                }
LABEL_108:
                Bool = llvm::ConstantInt::getFalse(*a2, v11, v12);
LABEL_38:
                int v25 = Bool;
                uint64_t v26 = (uint64_t)a1;
                uint64_t v27 = (llvm::ValueAsMetadata *)a2;
LABEL_39:
                unsigned int v14 = sub_1CC9D3C84(v26, v27, v25);
                goto LABEL_40;
              }
              BOOL v226 = (char *)operator new(0x80uLL);
              unsigned int v14 = (llvm::UndefValue **)(v226 + 64);
              *((_DWORD *)v226 + 21) = *((_DWORD *)v226 + 21) & 0x38000000 | 2;
              *(void *)BOOL v226 = 0;
              *((void *)v226 + 1) = 0;
              *((void *)v226 + 2) = 0;
              *((void *)v226 + 3) = v226 + 64;
              *((void *)v226 + 4) = 0;
              *((void *)v226 + 5) = 0;
              *((void *)v226 + 6) = 0;
              *((void *)v226 + 7) = v226 + 64;
              int v227 = *(llvm::Constant **)v324;
              unsigned int v334 = *((_DWORD *)v363[0] + 2);
              if (v334 > 0x40) {
                operator new[]();
              }
              uint64_t v333 = *(llvm::APInt **)v363[0];
              llvm::APInt::operator-=((uint64_t)&v333, 1uLL);
              unsigned int v344 = v334;
              int v343 = v333;
              unsigned int v334 = 0;
              unint64_t v229 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v227, (llvm::LLVMContext *)&v343, v228);
              if ((*((_DWORD *)v227 + 2) & 0xFE) == 0x12) {
                unint64_t v229 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v227 + 8) | ((unint64_t)(*((_DWORD *)v227 + 2) == 19) << 32)), (uint64_t)v229);
              }
              __int16 v349 = 257;
              uint64_t v230 = *(void *)v322;
              uint64_t v231 = (llvm::FixedVectorType *)(***(void ***)v322 + 1888);
              if (*(void *)v322 && (*(_DWORD *)(v230 + 8) & 0xFE) == 0x12)
              {
                llvm::VectorType::get(v231, (llvm::Type *)(*(unsigned int *)(v230 + 32) | ((unint64_t)(*(_DWORD *)(v230 + 8) == 19) << 32)));
                uint64_t v231 = v287;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v14, (uint64_t)v231, 53, 32, (uint64_t)v322, (uint64_t)v229, (const char **)&v347, 0, 0);
              if (v344 >= 0x41 && v343) {
                MEMORY[0x1D25D9CB0](v343, 0x1000C8000313F17);
              }
              if (v334 < 0x41 || (unsigned int v232 = v333) == 0)
              {
LABEL_594:
                unsigned int v16 = v54;
LABEL_40:
                if (v20 >= 0x41 && __n) {
                  MEMORY[0x1D25D9CB0](__n, 0x1000C8000313F17);
                }
                if (v351 >= 0x41 && v350) {
                  MEMORY[0x1D25D9CB0](v350, 0x1000C8000313F17);
                }
                if (v16 >= 0x41 && __s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
                if (v353 >= 0x41 && v352) {
                  MEMORY[0x1D25D9CB0](v352, 0x1000C8000313F17);
                }
                goto LABEL_44;
              }
LABEL_478:
              MEMORY[0x1D25D9CB0](v232, 0x1000C8000313F17);
              goto LABEL_594;
            }
            unint64_t v295 = (char *)operator new(0x80uLL);
            unsigned int v14 = (llvm::UndefValue **)(v295 + 64);
            *((_DWORD *)v295 + 21) = *((_DWORD *)v295 + 21) & 0x38000000 | 2;
            *(void *)unint64_t v295 = 0;
            *((void *)v295 + 1) = 0;
            *((void *)v295 + 2) = 0;
            *((void *)v295 + 3) = v295 + 64;
            *((void *)v295 + 4) = 0;
            *((void *)v295 + 5) = 0;
            *((void *)v295 + 6) = 0;
            *((void *)v295 + 7) = v295 + 64;
            __int16 v349 = 257;
            sub_1CB90C994(*(_DWORD **)v322);
            llvm::CmpInst::CmpInst((llvm::Value *)v14, v296, 53, 33, (uint64_t)v322, (uint64_t)v324, (const char **)&v347, 0, 0);
            goto LABEL_594;
          case ')':
LABEL_308:
            if (v16 > 0x40)
            {
              unsigned int v223 = v16;
              uint64_t v224 = *(void *)(__s2 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
              uint64_t v225 = (uint64_t *)(v19 + 8 * ((v18 - 1) >> 6));
              if (v18 < 0x41) {
                uint64_t v225 = &v350;
              }
              if ((v224 != 0) == (((unint64_t)*v225 >> (v18 - 1)) & 1))
              {
                unint64_t v255 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  unsigned int v16 = v223;
                  if (!v255) {
                    goto LABEL_123;
                  }
                  unint64_t v256 = *(void *)(__s2 - 8 + v255);
                  unint64_t v257 = *(void *)(v19 - 8 + v255);
                  v255 -= 8;
                }
                while (v256 == v257);
                unsigned int v16 = v223;
                if (v256 > v257) {
                  goto LABEL_310;
                }
              }
              else if (!v224)
              {
                goto LABEL_310;
              }
            }
            else if ((uint64_t)(__s2 << -(char)v16) >> -(char)v16 > (uint64_t)(v19 << -(char)v16) >> -(char)v16)
            {
LABEL_310:
              if (v14 > 0x40)
              {
                unsigned int v263 = v16;
                uint64_t v264 = *(void *)(v15 + 8 * ((v14 - 1) >> 6)) & (1 << (v14
                                                                                                - 1));
                size_t v265 = __n;
                if (v20 >= 0x41) {
                  size_t v265 = *(void *)(__n + 8 * ((v20 - 1) >> 6));
                }
                if ((v264 != 0) == ((v265 & (1 << (v20 - 1))) != 0))
                {
                  unint64_t v273 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
                  while (1)
                  {
                    unsigned int v16 = v263;
                    if (!v273) {
                      break;
                    }
                    unint64_t v274 = *(void *)(v15 - 8 + v273);
                    unint64_t v275 = *(void *)(__n - 8 + v273);
                    v273 -= 8;
                    BOOL v276 = v274 > v275;
                    if (v274 != v275)
                    {
LABEL_531:
                      unsigned int v16 = v263;
                      if (v276) {
                        goto LABEL_108;
                      }
                      break;
                    }
                  }
                }
                else if (!v264)
                {
                  goto LABEL_108;
                }
              }
              else if ((uint64_t)(v15 << -(char)v14) >> -(char)v14 > (uint64_t)(__n << -(char)v14) >> -(char)v14)
              {
                goto LABEL_108;
              }
LABEL_209:
              if (v20 > 0x40)
              {
                size_t v310 = (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8;
                unsigned int v311 = (const void *)__n;
                int v312 = (const void *)v15;
LABEL_616:
                if (memcmp(v311, v312, v310)) {
                  goto LABEL_268;
                }
              }
              else if (__n != v15)
              {
                goto LABEL_268;
              }
LABEL_617:
              int v313 = (char *)operator new(0x80uLL);
              unsigned int v14 = (llvm::UndefValue **)(v313 + 64);
              *((_DWORD *)v313 + 21) = *((_DWORD *)v313 + 21) & 0x38000000 | 2;
              *(void *)int v313 = 0;
              *((void *)v313 + 1) = 0;
              *((void *)v313 + 2) = 0;
              *((void *)v313 + 3) = v313 + 64;
              *((void *)v313 + 4) = 0;
              *((void *)v313 + 5) = 0;
              *((void *)v313 + 6) = 0;
              *((void *)v313 + 7) = v313 + 64;
              __int16 v349 = 257;
              IntegerValue = v322;
              sub_1CB90C994(*(_DWORD **)v322);
              uint64_t v77 = v314;
              int v78 = (llvm::Value *)v14;
              __int16 v79 = 32;
LABEL_380:
              uint64_t v80 = (uint64_t)IntegerValue;
LABEL_551:
              uint64_t v81 = (uint64_t)v324;
              goto LABEL_552;
            }
LABEL_123:
            Bool = llvm::ConstantInt::getTrue(*a2, v11, v12);
            goto LABEL_38;
          default:
            goto LABEL_35;
        }
      }
      if (v18 > 0x40)
      {
        if (memcmp((const void *)v19, (const void *)__n, (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8)) {
          goto LABEL_31;
        }
      }
      else if (v19 != __n)
      {
        goto LABEL_31;
      }
      uint64_t v289 = (char *)operator new(0x80uLL);
      *((_DWORD *)v289 + 21) = *((_DWORD *)v289 + 21) & 0x38000000 | 2;
      unsigned int v14 = (llvm::UndefValue **)(v289 + 64);
      *(void *)uint64_t v289 = 0;
      *((void *)v289 + 1) = 0;
      *((void *)v289 + 2) = 0;
      *((void *)v289 + 3) = v289 + 64;
      *((void *)v289 + 4) = 0;
      *((void *)v289 + 5) = 0;
      *((void *)v289 + 6) = 0;
      *((void *)v289 + 7) = v289 + 64;
      NullValue = llvm::Constant::getIntegerValue((llvm::Constant ***)v3, (llvm::Type *)&v350, v290);
      __int16 v349 = 257;
      sub_1CB90C994(*(_DWORD **)v322);
      uint64_t v77 = v291;
      int v78 = (llvm::Value *)v14;
      __int16 v79 = v321;
      uint64_t v80 = (uint64_t)v322;
LABEL_149:
      uint64_t v81 = (uint64_t)NullValue;
LABEL_552:
      llvm::CmpInst::CmpInst(v78, (uint64_t)v77, 53, v79, v80, v81, (const char **)&v347, 0, 0);
      goto LABEL_40;
    }
  }
  unsigned int v14 = (llvm::UndefValue **)a2;
LABEL_44:
  if (v357 >= 0x41 && v356) {
    MEMORY[0x1D25D9CB0](v356, 0x1000C8000313F17);
  }
  if (v355 >= 0x41 && v354) {
    MEMORY[0x1D25D9CB0](v354, 0x1000C8000313F17);
  }
  if (v361 >= 0x41 && v360) {
    MEMORY[0x1D25D9CB0](v360, 0x1000C8000313F17);
  }
  if (v359 >= 0x41 && v358) {
    MEMORY[0x1D25D9CB0](v358, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t sub_1CCA6A5B4(char a1, char a2, uint64_t a3)
{
  if (a1)
  {
    int v3 = sub_1CC0F1DDC(a3, a2 != 0);
  }
  else
  {
    __int16 v4 = (unint64_t **)(a3 + 24);
    uint64_t v5 = *(unsigned int *)(a3 + 32);
    if (a2)
    {
      if (v5 > 0x40)
      {
        if ((((*v4)[(v5 - 1) >> 6] >> (v5 - 1)) & 1) == 0)
        {
          int v3 = 0;
          return v3 ^ 1u;
        }
        BOOL v6 = llvm::APInt::countTrailingZerosSlowCase(v4) == v5 - 1;
      }
      else
      {
        BOOL v6 = *v4 == (unint64_t *)(1 << (v5 - 1));
      }
    }
    else if (v5 > 0x40)
    {
      int v7 = 0;
      int64_t v8 = (unint64_t)(v5 + 63) >> 6;
      do
      {
        if (v8-- < 1) {
          break;
        }
        unint64_t v10 = (*v4)[v8];
        v7 += __clz(v10);
      }
      while (!v10);
      int v11 = v5 | 0xFFFFFFC0;
      if ((v5 & 0x3F) == 0) {
        int v11 = 0;
      }
      BOOL v6 = v7 + v11 == v5;
    }
    else
    {
      BOOL v6 = *v4 == 0;
    }
    int v3 = v6;
  }
  return v3 ^ 1u;
}

llvm::Value *sub_1CCA6A6A0(uint64_t a1, uint64_t ***a2)
{
  __int16 v4 = a2;
  uint64_t v1237 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a1 + 120);
  long long v7 = *(_OWORD *)(a1 + 104);
  v1208[0] = *(_OWORD *)(a1 + 88);
  v1208[1] = v7;
  uint64_t v1210 = *((void *)&v6 + 1);
  BOOL v1209 = a2;
  int v9 = (uint64_t *)(a2 - 8);
  int64_t v8 = (unsigned __int8 *)*(a2 - 8);
  int v11 = (uint64_t *)(a2 - 4);
  uint64_t v10 = (uint64_t)*(a2 - 4);
  unint64_t v12 = sub_1CC9D2700((uint64_t)v8);
  unsigned int v13 = sub_1CC9D2700(v10);
  if (v12 < v13) {
    goto LABEL_2;
  }
  if (v12 != v13 || *(unsigned char *)(*(void *)v8 + 8) == 15 || (uint64_t v17 = *((void *)v8 + 1)) == 0)
  {
LABEL_29:
    int v25 = 0;
    uint64_t v26 = v10;
    goto LABEL_51;
  }
  int v18 = 0;
  do
  {
    uint64_t v19 = *(void *)(v17 + 24);
    int v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 == 43)
    {
      unint64_t v21 = *(unsigned __int8 **)(v19 - 64);
      if ((unsigned __int8 *)v10 != v21 || (unsigned int v14 = *(unsigned __int8 **)(v19 - 32), v8 != v14))
      {
        int v22 = v8 == v21 && v10 == *(void *)(v19 - 32);
        goto LABEL_22;
      }
    }
    else
    {
      if (v20 != 5) {
        goto LABEL_21;
      }
      if (*(_WORD *)(v19 + 18) != 15) {
        goto LABEL_20;
      }
      uint64_t v23 = (unsigned __int8 **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
      unsigned int v14 = *v23;
      if ((unsigned __int8 *)v10 != *v23 || v8 != v23[4])
      {
        if (v8 == v14 && (unsigned __int8 *)v10 == v23[4]) {
          LOBYTE(v14) = 1;
        }
        else {
LABEL_20:
        }
          LOBYTE(v14) = 0;
LABEL_21:
        int v22 = (v20 == 5) & v14;
LABEL_22:
        int v24 = v22 << 31 >> 31;
        goto LABEL_23;
      }
    }
    int v24 = 1;
LABEL_23:
    v18 += v24;
    uint64_t v17 = *(void *)(v17 + 8);
  }
  while (v17);
  if (v18 <= 0) {
    goto LABEL_29;
  }
LABEL_2:
  __int16 v15 = *((_WORD *)v4 + 9);
  uint64_t v16 = v15 & 0x3F;
  switch(v15 & 0x3F)
  {
    case 2:
      LOWORD(v16) = 4;
      goto LABEL_45;
    case 3:
      LOWORD(v16) = 5;
      goto LABEL_45;
    case 4:
      LOWORD(v16) = 2;
      goto LABEL_45;
    case 5:
      LOWORD(v16) = 3;
      goto LABEL_45;
    case 0xA:
      LOWORD(v16) = 12;
      goto LABEL_45;
    case 0xB:
      LOWORD(v16) = 13;
      goto LABEL_45;
    case 0xC:
      LOWORD(v16) = 10;
      goto LABEL_45;
    case 0xD:
      LOWORD(v16) = 11;
      goto LABEL_45;
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
LABEL_2010:
      __break(1u);
      unint64_t v996 = v16 + 63;
      memcpy((void *)v2, (const void *)__src, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
      bzero((void *)(v2 + 8 * (v996 >> 6)), 8 * ((v12 >> 6) - (v996 >> 6)));
      goto LABEL_1280;
    case 0x22:
      LOWORD(v16) = 36;
      goto LABEL_45;
    case 0x23:
      LOWORD(v16) = 37;
      goto LABEL_45;
    case 0x24:
      LOWORD(v16) = 34;
      goto LABEL_45;
    case 0x25:
      LOWORD(v16) = 35;
      goto LABEL_45;
    case 0x26:
      LOWORD(v16) = 40;
      goto LABEL_45;
    case 0x27:
      LOWORD(v16) = 41;
      goto LABEL_45;
    case 0x28:
      LOWORD(v16) = 38;
      goto LABEL_45;
    case 0x29:
      LOWORD(v16) = 39;
      goto LABEL_45;
    default:
LABEL_45:
      *((_WORD *)v4 + 9) = v16 | v15 & 0xFFC0;
      uint64_t v27 = *(v4 - 8);
      unsigned int v28 = *(v4 - 4);
      if (v27 != v28)
      {
        uint64_t v29 = *(v4 - 3);
        *(v4 - 8) = v28;
        *(v4 - 4) = v27;
        long long v30 = *(_OWORD *)(v4 - 7);
        uint64_t v31 = *(v4 - 2);
        *(v4 - 7) = v29;
        *(v4 - 6) = v31;
        *(_OWORD *)(v4 - 3) = v30;
        llvm::Constant *v31 = v9;
        uint64_t v32 = (uint64_t)*(v4 - 7);
        if (v32) {
          *(void *)(v32 + 16) = v4 - 7;
        }
        **(v4 - 2) = v11;
        uint64_t v33 = (uint64_t)*(v4 - 3);
        if (v33) {
          *(void *)(v33 + 16) = v4 - 3;
        }
      }
      uint64_t v26 = (uint64_t)v8;
      int64_t v8 = (unsigned __int8 *)v10;
      int v25 = v4;
      break;
  }
LABEL_51:
  unsigned int v34 = sub_1CC02F0F0(*((_WORD *)v4 + 9) & 0x3F, v8, (unsigned __int8 *)v26, (uint64_t)v1208, (llvm::SmallPtrSetImplBase *)3);
  if (v34) {
    return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v4, v34);
  }
  int64_t v1205 = (llvm *)v26;
  int v1206 = v9;
  if ((*((_WORD *)v4 + 9) & 0x3F) != 0x21) {
    goto LABEL_65;
  }
  if (!v26) {
    goto LABEL_65;
  }
  unsigned int v40 = *(unsigned __int8 *)(v26 + 16);
  if (v40 > 0x14) {
    goto LABEL_65;
  }
  if (v40 != 16)
  {
    if (v40 == 17)
    {
      if (sub_1CB844168(v26, 0.0)) {
        goto LABEL_62;
      }
    }
    else if (v40 - 18 < 3 || v40 == 13)
    {
      goto LABEL_62;
    }
LABEL_61:
    if (sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v26)) {
      goto LABEL_62;
    }
    goto LABEL_65;
  }
  uint64_t v41 = *(unsigned int *)(v26 + 32);
  if (v41 >= 0x41)
  {
    int v228 = 0;
    int64_t v229 = (unint64_t)(v41 + 63) >> 6;
    do
    {
      BOOL v454 = v229-- < 1;
      if (v454) {
        break;
      }
      unint64_t v230 = *(void *)(*(void *)(v26 + 24) + 8 * v229);
      v228 += __clz(v230);
    }
    while (!v230);
    int v231 = v41 | 0xFFFFFFC0;
    if ((v41 & 0x3F) == 0) {
      int v231 = 0;
    }
    if (v228 + v231 == v41) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (*(void *)(v26 + 24)) {
    goto LABEL_61;
  }
LABEL_62:
  uint64_t v1232 = 0;
  v1224 = 0;
  uint64_t __src = 0;
  __p[0] = &v1232;
  __p[1] = &v1224;
  *(void *)&long long v1213 = &__src;
  if (!sub_1CC189B48((void **)__p, (uint64_t)v8)) {
    goto LABEL_65;
  }
  unsigned int v43 = sub_1CC9D3E08(a1, v1224, v42);
  if (!v43)
  {
    BOOL v59 = sub_1CC9D3E08(a1, (llvm::ConstantExpr *)__src, v44);
    if (v59)
    {
      uint64_t v45 = v59;
      if (v59 == v1224) {
        goto LABEL_89;
      }
    }
LABEL_65:
    uint64_t v1203 = v25;
    int v46 = *(_DWORD *)(*(void *)v8 + 8);
    if ((v46 & 0xFE) == 0x12) {
      int v46 = *(_DWORD *)(**(void **)(*(void *)v8 + 16) + 8);
    }
    if (v46 != 269) {
      goto LABEL_102;
    }
    uint64_t v47 = *(void *)(a1 + 24);
    uint64_t v48 = *v1206;
    uint64_t v49 = *v11;
    if (*v11)
    {
      unsigned int v50 = *(unsigned __int8 *)(v49 + 16);
      if (v50 <= 0x14)
      {
        if (v50 == 16)
        {
          uint64_t v51 = *(unsigned int *)(v49 + 32);
          if (v51 >= 0x41)
          {
            int v232 = 0;
            int64_t v233 = (unint64_t)(v51 + 63) >> 6;
            do
            {
              BOOL v454 = v233-- < 1;
              if (v454) {
                break;
              }
              unint64_t v234 = *(void *)(*(void *)(v49 + 24) + 8 * v233);
              v232 += __clz(v234);
            }
            while (!v234);
            int v235 = v51 | 0xFFFFFFC0;
            if ((v51 & 0x3F) == 0) {
              int v235 = 0;
            }
            if (v232 + v235 == v51) {
              goto LABEL_75;
            }
          }
          else if (!*(void *)(v49 + 24))
          {
            goto LABEL_75;
          }
        }
        else if (v50 == 17)
        {
          if (sub_1CB844168(*v11, 0.0)) {
            goto LABEL_75;
          }
        }
        else if (v50 - 18 < 3 || v50 == 13)
        {
          goto LABEL_75;
        }
        if (sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v49)) {
          goto LABEL_75;
        }
      }
    }
    if (!sub_1CBF5250C((uint64_t)__p, (llvm::Constant *)v49))
    {
      uint64_t v55 = v49;
      uint64_t v56 = v49;
      uint64_t v57 = v49;
      uint64_t v58 = (llvm::Instruction *)v49;
      switch(*((_WORD *)v4 + 9) & 0x3F)
      {
        case '!':
          LOWORD(v1214) = 257;
          unsigned int v62 = (int8x8_t *)__p;
          char v63 = 30;
          unsigned int v61 = (llvm::Instruction *)v48;
          uint64_t v64 = v49;
          goto LABEL_100;
        case '""':
          uint64_t v55 = v48;
          uint64_t v48 = v49;
          goto LABEL_93;
        case '#':
          uint64_t v57 = v48;
          uint64_t v48 = v49;
          goto LABEL_99;
        case '$':
LABEL_93:
          LOWORD(v1214) = 257;
          unsigned int v61 = sub_1CC2427E8(v47, v48, (uint64_t)__p, (llvm::Instruction *)v49);
          __int16 v1236 = 257;
          unsigned int v62 = (int8x8_t *)&v1232;
          char v63 = 28;
          uint64_t v64 = v55;
          goto LABEL_100;
        case '%':
LABEL_99:
          LOWORD(v1214) = 257;
          unsigned int v61 = sub_1CC2427E8(v47, v48, (uint64_t)__p, (llvm::Instruction *)v49);
          __int16 v1236 = 257;
          unsigned int v62 = (int8x8_t *)&v1232;
          char v63 = 29;
          uint64_t v64 = v57;
          goto LABEL_100;
        case '&':
          uint64_t v56 = v48;
          uint64_t v48 = v49;
          goto LABEL_95;
        case '\'':
          uint64_t v58 = (llvm::Instruction *)v48;
          uint64_t v48 = v49;
          goto LABEL_91;
        case '(':
LABEL_95:
          LOWORD(v1214) = 257;
          unsigned int v61 = sub_1CC2427E8(v47, v56, (uint64_t)__p, (llvm::Instruction *)v49);
          __int16 v1236 = 257;
          unsigned int v62 = (int8x8_t *)&v1232;
          char v63 = 28;
          break;
        case ')':
LABEL_91:
          LOWORD(v1214) = 257;
          unsigned int v61 = sub_1CC2427E8(v47, (uint64_t)v58, (uint64_t)__p, v58);
          __int16 v1236 = 257;
          unsigned int v62 = (int8x8_t *)&v1232;
          char v63 = 29;
          break;
        default:
          LOWORD(v1214) = 257;
          BOOL v53 = (llvm::Constant **)sub_1CC2428C0(v47, v48, v49, (uint64_t)__p);
          __int16 v1236 = 257;
          BOOL v52 = (int8x8_t *)&v1232;
          goto LABEL_76;
      }
      uint64_t v64 = v48;
LABEL_100:
      Not = llvm::BinaryOperator::Create(v63, v61, v64, (const char **)v62, 0);
LABEL_101:
      uint64_t v38 = Not;
      if (Not) {
        return v38;
      }
LABEL_102:
      unsigned int v65 = *((_WORD *)v4 + 9) & 0x3F;
      if ((*((_WORD *)v4 + 9) & 0x3E) != 0x20 && v65 - 32 <= 9 && v65 <= 0x29 && ((1 << v65) & 0x2AA00000000) != 0)
      {
        unsigned int v66 = (unsigned __int8 *)*v11;
        if (*v11)
        {
          if (v66[16] <= 0x14u)
          {
            __int16 v67 = (void *)*v1206;
            sub_1CCA50180((llvm::Constant *)v66, *((_WORD *)v4 + 9) & 0x3F, (uint64_t)&v1232);
            if ((_BYTE)v1234)
            {
              uint64_t v68 = operator new(0x80uLL);
              uint64_t v38 = (llvm::Value *)(v68 + 16);
              v68[21] = v68[21] & 0x38000000 | 2;
              *(void *)uint64_t v68 = 0;
              *((void *)v68 + 1) = 0;
              *((void *)v68 + 2) = 0;
              *((void *)v68 + 3) = v68 + 16;
              *((void *)v68 + 4) = 0;
              *((void *)v68 + 5) = 0;
              *((void *)v68 + 6) = 0;
              *((void *)v68 + 7) = v68 + 16;
              __int16 v69 = v1232;
              uint64_t Splat = v1233;
              LOWORD(v1214) = 257;
              unsigned int v71 = (void **)*v67;
              uint64_t v72 = **(void **)*v67 + 1888;
              if (*v67 && (v71[1] & 0xFE) == 0x12)
              {
                unsigned int v193 = (uint64_t **)(**(void **)*v67 + 1888);
                BOOL v194 = (llvm::Type *)*((unsigned int *)v71 + 8);
                if (*((_DWORD *)v71 + 2) == 19) {
                  llvm::ScalableVectorType::get(v193, v194);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v193, v194);
                }
                uint64_t v72 = v195;
              }
              int v73 = v38;
              __int16 v74 = v69;
              uint64_t v75 = (uint64_t)v67;
              goto LABEL_112;
            }
            unsigned int v65 = *((_WORD *)v4 + 9) & 0x3F;
          }
        }
      }
      if (v65 <= 0x29 && ((1 << v65) & 0x2AA00000068) != 0 && sub_1CCA0BAEC((uint64_t)v4, 0))
      {
        uint64_t v89 = v4[5][7][5] + 216;
        __int16 v1236 = 260;
        uint64_t v1232 = v89;
        llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v1232);
        if ((DWORD2(v1213) & 0xFFFFFFFE) != 0x30)
        {
          if (SBYTE7(v1213) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_138;
        }
        int v191 = v4[1];
        if (v191) {
          BOOL v192 = v191[1] == 0;
        }
        else {
          BOOL v192 = 0;
        }
        if (SBYTE7(v1213) < 0) {
          operator delete(__p[0]);
        }
        if (v192)
        {
LABEL_138:
          *((_WORD *)v4 + 9) = *((_WORD *)v4 + 9) & 0xFFC0 | *((_WORD *)&word_1CFB27878 + v65 - 3);
          if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
          {
            unint64_t v166 = 0;
            unint64_t v165 = &byte_1CFBCE98E;
LABEL_272:
            LOWORD(v1214) = 773;
            __p[0] = v165;
            __p[1] = v166;
            *(void *)&long long v1213 = ".not";
            llvm::Value::setNameImpl((llvm::Value *)v4, (const char **)__p);
            if (*((unsigned char *)v4 + 16))
            {
LABEL_273:
              sub_1CC9D3BA4(a1, (llvm::Value *)v4);
              return (llvm::Value *)v4;
            }
            if ((*((unsigned char *)v4 + 23) & 0x10) == 0) {
              goto LABEL_417;
            }
            uint64_t v203 = ***v4;
            uint64_t v204 = *(void *)(v203 + 152);
            uint64_t v205 = *(unsigned int *)(v203 + 168);
            if (v205)
            {
              LODWORD(v206) = (v205 - 1) & ((v4 >> 4) ^ (v4 >> 9));
              int v207 = (uint64_t ****)(v204 + 16 * v206);
              uint64_t v208 = *v207;
              if (*v207 == v4)
              {
LABEL_410:
                unint64_t v257 = v207[1];
                unint64_t v260 = (unint64_t)*v257;
                uint64_t v258 = v257 + 2;
                unint64_t v259 = v260;
                if (v260 >= 5 && *(_DWORD *)v258 == *(_DWORD *)"llvm." && v258[4] == aLlvm_1[4])
                {
                  *((_DWORD *)v4 + 8) |= 0x2000u;
                  int v262 = llvm::Function::lookupIntrinsicID(v258, v259);
LABEL_418:
                  *((_DWORD *)v4 + 9) = v262;
                  goto LABEL_273;
                }
LABEL_417:
                int v262 = 0;
                *((_DWORD *)v4 + 8) &= ~0x2000u;
                goto LABEL_418;
              }
              int v209 = 1;
              while (v208 != (uint64_t ***)-4096)
              {
                int v210 = v206 + v209++;
                uint64_t v206 = v210 & (v205 - 1);
                uint64_t v208 = *(uint64_t ****)(v204 + 16 * v206);
                if (v208 == v4)
                {
                  int v207 = (uint64_t ****)(v204 + 16 * v206);
                  goto LABEL_410;
                }
              }
            }
            int v207 = (uint64_t ****)(v204 + 16 * v205);
            goto LABEL_410;
          }
          uint64_t v90 = ***v4;
          uint64_t v91 = *(void *)(v90 + 152);
          uint64_t v92 = *(unsigned int *)(v90 + 168);
          if (v92)
          {
            LODWORD(v93) = (v92 - 1) & ((v4 >> 4) ^ (v4 >> 9));
            uint64_t v94 = (uint64_t ****)(v91 + 16 * v93);
            unint64_t v95 = *v94;
            if (*v94 == v4)
            {
LABEL_271:
              unint64_t v164 = v94[1];
              unint64_t v167 = *v164;
              unint64_t v165 = (char *)(v164 + 2);
              unint64_t v166 = v167;
              goto LABEL_272;
            }
            int v96 = 1;
            while (v95 != (uint64_t ***)-4096)
            {
              int v97 = v93 + v96++;
              uint64_t v93 = v97 & (v92 - 1);
              unint64_t v95 = *(uint64_t ****)(v91 + 16 * v93);
              if (v95 == v4)
              {
                uint64_t v94 = (uint64_t ****)(v91 + 16 * v93);
                goto LABEL_271;
              }
            }
          }
          uint64_t v94 = (uint64_t ****)(v91 + 16 * v92);
          goto LABEL_271;
        }
      }
      uint64_t v1204 = v11;
      uint64_t v77 = (llvm::ConstantExpr *)(*((_WORD *)v4 + 9) & 0x3F);
      uint64_t v78 = (uint64_t)*(v4 - 8);
      uint64_t v79 = (uint64_t)*(v4 - 4);
      if (v77 != 34) {
        goto LABEL_157;
      }
      BOOL v80 = *(unsigned char *)(v79 + 16) != 16 || v79 == 0;
      if (v80) {
        goto LABEL_157;
      }
      int v81 = *(unsigned __int8 *)(v78 + 16);
      if (v81 == 5)
      {
        if (*(_WORD *)(v78 + 18) != 13) {
          goto LABEL_157;
        }
        BOOL v86 = (void *)(v78 - 32 * (*(_DWORD *)(v78 + 20) & 0x7FFFFFF));
        uint64_t v87 = *v86;
        int v88 = *(unsigned __int8 *)(*v86 + 16);
        if (v88 == 5)
        {
          if (*(_WORD *)(v87 + 18) != 13) {
            goto LABEL_157;
          }
          uint64_t v100 = (unsigned __int8 **)(v87 - 32 * (*(_DWORD *)(v87 + 20) & 0x7FFFFFF));
          uint64_t v84 = *v100;
          if (!*v100) {
            goto LABEL_157;
          }
          uint64_t v85 = v100[4];
          if (!v85) {
            goto LABEL_157;
          }
        }
        else
        {
          if (v88 != 41) {
            goto LABEL_157;
          }
          uint64_t v84 = *(unsigned __int8 **)(v87 - 64);
          if (!v84) {
            goto LABEL_157;
          }
          uint64_t v85 = *(unsigned __int8 **)(v87 - 32);
          if (!v85) {
            goto LABEL_157;
          }
        }
        uint64_t v99 = v86[4];
        if (!v99) {
          goto LABEL_157;
        }
      }
      else
      {
        if (v81 != 41) {
          goto LABEL_157;
        }
        uint64_t v82 = *(void *)(v78 - 64);
        int v83 = *(unsigned __int8 *)(v82 + 16);
        if (v83 == 5)
        {
          if (*(_WORD *)(v82 + 18) != 13) {
            goto LABEL_157;
          }
          unsigned int v98 = (unsigned __int8 **)(v82 - 32 * (*(_DWORD *)(v82 + 20) & 0x7FFFFFF));
          uint64_t v84 = *v98;
          if (!*v98) {
            goto LABEL_157;
          }
          uint64_t v85 = v98[4];
          if (!v85) {
            goto LABEL_157;
          }
        }
        else
        {
          if (v83 != 41) {
            goto LABEL_157;
          }
          uint64_t v84 = *(unsigned __int8 **)(v82 - 64);
          if (!v84) {
            goto LABEL_157;
          }
          uint64_t v85 = *(unsigned __int8 **)(v82 - 32);
          if (!v85) {
            goto LABEL_157;
          }
        }
        uint64_t v99 = *(void *)(v78 - 32);
        if (!v99) {
          goto LABEL_157;
        }
      }
      if (*(unsigned char *)(v99 + 16) != 16) {
        goto LABEL_157;
      }
      uint64_t v101 = *(void *)(v78 + 8);
      if (!v101 || *(void *)(v101 + 8)) {
        goto LABEL_157;
      }
      unint64_t v159 = (unint64_t **)(v99 + 24);
      uint64_t v160 = *(unsigned int *)(v99 + 32);
      if (v160 > 0x40)
      {
        int v179 = 0;
        unint64_t v180 = (unint64_t)(v160 + 63) >> 6;
        int v181 = *v159;
        do
        {
          int8x8_t v182 = (int8x8_t)*v181++;
          uint8x8_t v183 = (uint8x8_t)vcnt_s8(v182);
          v183.i16[0] = vaddlv_u8(v183);
          v179 += v183.i32[0];
          --v180;
        }
        while (v180);
        if (v179 != 1) {
          goto LABEL_157;
        }
        unsigned int v163 = llvm::APInt::countTrailingZerosSlowCase(v159);
      }
      else
      {
        uint8x8_t v161 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v159);
        v161.i16[0] = vaddlv_u8(v161);
        if (v161.u32[0] != 1) {
          goto LABEL_157;
        }
        unsigned int v162 = __clz(__rbit64((unint64_t)*v159));
        if (v160 >= v162) {
          unsigned int v163 = v162;
        }
        else {
          unsigned int v163 = v160;
        }
      }
      if (v163 > 0x1F) {
        goto LABEL_157;
      }
      if (((1 << v163) & 0x80008080) == 0) {
        goto LABEL_157;
      }
      unsigned int v184 = *(_DWORD *)(v79 + 32);
      if (v184 == v163 + 1) {
        goto LABEL_157;
      }
      v1199 = (llvm::LLVMContext *)(v163 + 1);
      if (v184 >= 0x41) {
        operator new[]();
      }
      if (*(void *)(v79 + 24) != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v163
        || llvm::ComputeMaxSignificantBits((llvm *)v84, *(const llvm::Value **)(a1 + 80), 0, *(void *)(a1 + 56), (llvm::AssumptionCache *)v4, *(const llvm::Instruction **)(a1 + 72), v36) > v1199|| llvm::ComputeMaxSignificantBits((llvm *)v85, *(const llvm::Value **)(a1 + 80), 0, *(void *)(a1 + 56), (llvm::AssumptionCache *)v4, *(const llvm::Instruction **)(a1 + 72), v185) > v1199)
      {
LABEL_157:
        BOOL v102 = *(unsigned __int8 *)(v79 + 16) > 0x14u || v79 == 0;
        unint64_t v103 = v1204;
        if (v102) {
          goto LABEL_163;
        }
        __p[0] = &v1214;
        __p[1] = &v1214;
        *(void *)&long long v1213 = 4;
        DWORD2(v1213) = 0;
        BOOL v104 = sub_1CC565AD0(v79, (uint64_t)__p);
        if (__p[1] == __p[0])
        {
          if (v104) {
            goto LABEL_163;
          }
        }
        else
        {
          free(__p[1]);
          if (v104) {
            goto LABEL_163;
          }
        }
        if (*(unsigned char *)(v78 + 16) != 83 || !v78) {
          goto LABEL_163;
        }
        int v342 = *(_DWORD *)(v78 + 20);
        if ((v342 & 0x40000000) != 0)
        {
          uint64_t v344 = *(void *)(v78 - 8);
          uint64_t v343 = v342 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v343 = v342 & 0x7FFFFFF;
          uint64_t v344 = v78 - 32 * v343;
        }
        if (v343)
        {
          uint64_t v345 = 32 * v343;
          while (*(unsigned __int8 *)(*(void *)v344 + 16) < 0x15u)
          {
            v344 += 32;
            v345 -= 32;
            if (!v345) {
              goto LABEL_598;
            }
          }
          goto LABEL_163;
        }
LABEL_598:
        uint64_t v346 = (uint64_t)*v4;
        uint64_t v347 = *(void *)(a1 + 24);
        *(void *)(v347 + 48) = *(void *)(v78 + 40);
        *(void *)(v347 + 56) = v78 + 24;
        uint64_t v348 = *(unsigned __int8 **)(v78 + 48);
        uint64_t v1232 = (uint64_t)v348;
        if (v348)
        {
          llvm::MetadataTracking::track((uint64_t)&v1232, v348, 2);
          uint64_t v349 = v1232;
        }
        else
        {
          uint64_t v349 = 0;
        }
        sub_1CB8461A4(v347, 0, v349);
        if (!v1232)
        {
LABEL_601:
          uint64_t v350 = *(void *)(a1 + 24);
          int v351 = *(_DWORD *)(v78 + 20) & 0x7FFFFFF;
          LOWORD(v1214) = 257;
          uint64_t v352 = sub_1CB93113C(v350, v346, v351, (uint64_t)__p);
          uint64_t v353 = *(void *)(*(void *)(v78 + 40) + 8);
          if (v353)
          {
            while (1)
            {
              uint64_t v354 = *(void *)(v353 + 24);
              unsigned int v355 = *(unsigned __int8 *)(v354 + 16);
              BOOL v356 = v354 && v355 >= 0x1C;
              if (v356 && v355 - 29 < 0xB) {
                break;
              }
              uint64_t v353 = *(void *)(v353 + 8);
              if (!v353) {
                goto LABEL_611;
              }
            }
LABEL_613:
            uint64_t v358 = *(void *)(v354 + 40);
            unsigned int v359 = (uint64_t ***)sub_1CBF73380(v78, v358);
            v1200 = (llvm::LLVMContext *)v358;
            if (v77 <= 0xF) {
              uint64_t FCmp = llvm::ConstantExpr::getFCmp(v77, v359, (llvm::Constant *)v79, 0);
            }
            else {
              uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getICmp(v77, (llvm::Type *)v359, (llvm::Constant *)v79, 0, v360);
            }
            uint64_t v362 = FCmp;
            int v363 = *((_DWORD *)v352 + 5);
            uint64_t v364 = v363 & 0x7FFFFFF;
            if ((v363 & 0x7FFFFFF) == *((_DWORD *)v352 + 15))
            {
              LODWORD(v380) = v364 + (v364 >> 1);
              if (v380 <= 2) {
                uint64_t v380 = 2;
              }
              else {
                uint64_t v380 = v380;
              }
              size_t v1194 = v380;
              *((_DWORD *)v352 + 15) = v380;
              if ((v363 & 0x40000000) != 0) {
                uint64_t v381 = (uint64_t *)*((void *)v352 - 1);
              }
              else {
                uint64_t v381 = (uint64_t *)((char *)v352 - 32 * v364);
              }
              v1197 = v381;
              uint64_t v382 = operator new(40 * v380);
              *((void *)v352 - 1) = v382;
              uint64_t v383 = v382;
              do
              {
                *uint64_t v383 = 0;
                v383[1] = 0;
                v383[2] = 0;
                v383[3] = v352;
                v383 += 4;
              }
              while (v383 != &v382[4 * v1194]);
              int v384 = *((_DWORD *)v352 + 5);
              if ((v384 & 0x40000000) != 0) {
                uint64_t v385 = (uint64_t)v382;
              }
              else {
                uint64_t v385 = (uint64_t)v352 - 32 * (v384 & 0x7FFFFFF);
              }
              uint64_t v1193 = v385;
              sub_1CC5E4108((uint64_t)__p, v1197, &v1197[4 * v364], v385);
              if (v364)
              {
                memmove((void *)(v1193 + 32 * v1194), &v1197[4 * v364], 8 * v364);
                uint64_t v386 = 4 * v364;
                do
                {
                  uint64_t v387 = &v1197[v386];
                  if (v1197[v386 - 4])
                  {
                    *(void *)*(v387 - 2) = *(v387 - 3);
                    uint64_t v388 = *(v387 - 3);
                    if (v388) {
                      *(void *)(v388 + 16) = *(v387 - 2);
                    }
                  }
                  v386 -= 4;
                }
                while (v386 * 8);
              }
              operator delete(v1197);
              int v363 = *((_DWORD *)v352 + 5);
            }
            uint64_t v365 = (v363 + 1) & 0x7FFFFFF;
            *((_DWORD *)v352 + 5) = v363 & 0xF8000000 | (v363 + 1) & 0x7FFFFFF;
            if ((v363 & 0x40000000) != 0) {
              uint64_t v366 = (char *)*((void *)v352 - 1);
            }
            else {
              uint64_t v366 = (char *)v352 - 32 * v365;
            }
            uint64_t v367 = (v365 - 1);
            unsigned int v368 = &v366[32 * v367];
            if (*(void *)v368)
            {
              **((void **)v368 + 2) = *((void *)v368 + 1);
              uint64_t v379 = *((void *)v368 + 1);
              if (v379) {
                *(void *)(v379 + 16) = *((void *)v368 + 2);
              }
            }
            *(void *)unsigned int v368 = v362;
            if (v362)
            {
              uint64_t v371 = *(void *)(v362 + 8);
              int v370 = (char **)(v362 + 8);
              uint64_t v369 = v371;
              uint64_t v372 = &v366[32 * v367];
              *((void *)v372 + 1) = v371;
              if (v371) {
                *(void *)(v369 + 16) = v372 + 8;
              }
              *((void *)v372 + 2) = v370;
              int8x8_t *v370 = v368;
            }
            int v373 = *((_DWORD *)v352 + 5);
            uint64_t v374 = v373 & 0x7FFFFFF;
            if ((v373 & 0x40000000) != 0) {
              uint64_t v375 = (char *)*((void *)v352 - 1);
            }
            else {
              uint64_t v375 = (char *)v352 - 32 * v374;
            }
            unint64_t v103 = v1204;
            *(void *)&v375[32 * *((unsigned int *)v352 + 15) + 8 * (v374 - 1)] = v1200;
            while (1)
            {
              uint64_t v353 = *(void *)(v353 + 8);
              if (!v353) {
                break;
              }
              uint64_t v354 = *(void *)(v353 + 24);
              unsigned int v376 = *(unsigned __int8 *)(v354 + 16);
              if (v354) {
                BOOL v377 = v376 >= 0x1C;
              }
              else {
                BOOL v377 = 0;
              }
              if (v377 && v376 - 29 < 0xB) {
                goto LABEL_613;
              }
            }
          }
LABEL_611:
          llvm::Value::takeName((int32x2_t ****)v352, (llvm::Value *)v4);
          uint64_t v38 = (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v4, v352);
          if (v38) {
            return v38;
          }
LABEL_163:
          unint64_t v105 = (llvm::BasicBlock *)v4[5];
          uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v105);
          if (!SinglePredecessor) {
            goto LABEL_196;
          }
          uint64_t v107 = *(void *)(SinglePredecessor + 40);
          if (v107 == SinglePredecessor + 40) {
            goto LABEL_196;
          }
          uint64_t v108 = v107 - 24;
          if (!v107) {
            uint64_t v108 = 0;
          }
          unsigned int v109 = *(unsigned __int8 *)(v108 + 16) - 40;
          if (v109 < 0xFFFFFFF5) {
            uint64_t v108 = 0;
          }
          if (!v107) {
            goto LABEL_196;
          }
          if (*(unsigned char *)(v108 + 16) != 30 || v109 < 0xFFFFFFF5) {
            goto LABEL_196;
          }
          if ((*(_DWORD *)(v108 + 20) & 0x7FFFFFF) != 3) {
            goto LABEL_196;
          }
          uint64_t v111 = *(void *)(v108 - 96);
          if (!v111) {
            goto LABEL_196;
          }
          unint64_t v112 = *(llvm::BasicBlock **)(v108 - 32);
          if (!v112) {
            goto LABEL_196;
          }
          BOOL v113 = *(llvm::BasicBlock **)(v108 - 64);
          if (!v113 || v112 == v113) {
            goto LABEL_196;
          }
          BOOL v115 = v112 == v105;
          if ((uint64_t ***)v111 != v4)
          {
            __int16 v116 = *((_WORD *)v4 + 9);
            int v117 = *(v4 - 8);
            int v118 = (unsigned __int8 *)*(v4 - 4);
            if (*((unsigned char *)v4 + 16) != 81)
            {
LABEL_186:
              LODWORD(v1207) = 0;
              v1229 = 0;
              v1230 = 0;
              __p[0] = &v1207;
              __p[1] = v117;
              long long v1213 = (unint64_t)&v1229;
              if (*(unsigned char *)(v111 + 16) != 81
                || v117 != *(void **)(v111 - 64)
                || !sub_1CBF528D8((uint64_t)&v1213, *(unsigned __int8 **)(v111 - 32))
                || (*(_DWORD *)__p[0] = *(_WORD *)(v111 + 18) & 0x3F,
                    uint64_t v1232 = (uint64_t)&v1230,
                    uint64_t v1233 = 0,
                    !sub_1CBF528D8((uint64_t)&v1232, v118)))
              {
LABEL_188:
                uint64_t v38 = 0;
                goto LABEL_195;
              }
              llvm::ConstantRange::makeExactICmpRegion(v116 & 0x3F, (uint64_t)v1230, (uint64_t)&v1232);
              uint64_t v196 = (int)v1207;
              if (v112 != v105) {
                uint64_t v196 = dword_1CFB278F0[(int)v1207];
              }
              llvm::ConstantRange::makeExactICmpRegion(v196, (uint64_t)v1229, (uint64_t)&v1224);
              llvm::ConstantRange::intersectWith((uint64_t)&v1224, (llvm::ConstantRange *)&v1232, 0, (uint64_t)&__src);
              llvm::ConstantRange::difference((llvm::ConstantRange *)&v1224, (const llvm::ConstantRange *)&v1232, (uint64_t)&__s1);
              uint64_t v212 = v1221;
              if (v1221 >= 0x41)
              {
                uint64_t v312 = __src;
                if (memcmp((const void *)__src, (const void *)v1222, (((unint64_t)v1221 + 63) >> 3) & 0x3FFFFFF8))
                {
                  goto LABEL_339;
                }
                int v313 = 0;
                int64_t v314 = (unint64_t)(v212 + 63) >> 6;
                do
                {
                  BOOL v454 = v314-- < 1;
                  if (v454) {
                    break;
                  }
                  unint64_t v315 = *(void *)(v312 + 8 * v314);
                  v313 += __clz(v315);
                }
                while (!v315);
                int v316 = v212 | 0xFFFFFFC0;
                if ((v212 & 0x3F) == 0) {
                  int v316 = 0;
                }
                if (v313 + v316 != v212) {
                  goto LABEL_339;
                }
              }
              else if (v1222 | __src)
              {
LABEL_339:
                uint64_t v213 = v1217;
                if (v1217 >= 0x41)
                {
                  int v322 = __s1;
                  if (memcmp(__s1, __s2, (((unint64_t)v1217 + 63) >> 3) & 0x3FFFFFF8)) {
                    goto LABEL_341;
                  }
                  int v323 = 0;
                  int64_t v324 = (unint64_t)(v213 + 63) >> 6;
                  do
                  {
                    BOOL v454 = v324-- < 1;
                    if (v454) {
                      break;
                    }
                    unint64_t v325 = v322[v324];
                    v323 += __clz(v325);
                  }
                  while (!v325);
                  int v326 = v213 | 0xFFFFFFC0;
                  if ((v213 & 0x3F) == 0) {
                    int v326 = 0;
                  }
                  if (v323 + v326 != v213)
                  {
LABEL_341:
                    LOBYTE(v1231) = 0;
                    BOOL v214 = sub_1CC9EAA5C(v116 & 0x3F, v1230, &v1231);
                    if ((*((_WORD *)v4 + 9) & 0x3E) != 0x20)
                    {
                      uint64_t v215 = v4[1];
                      if (v215) {
                        BOOL v216 = v214;
                      }
                      else {
                        BOOL v216 = 0;
                      }
                      if (v216)
                      {
                        unint64_t v217 = v4[1];
                        while (*((unsigned char *)v217[3] + 16) != 30)
                        {
                          unint64_t v217 = (uint64_t **)v217[1];
                          if (!v217) {
                            goto LABEL_350;
                          }
                        }
                      }
                      else
                      {
LABEL_350:
                        if (!v215
                          || v215[1]
                          || (uint64_t v218 = (uint64_t)v215[3], __p[0] = 0, !sub_1CC003024((uint64_t)__p, v218))
                          && !sub_1CC0030E0((uint64_t)__p + 2, v218)
                          && !sub_1CC002F68((uint64_t)__p + 4, v218)
                          && !sub_1CC002EAC((uint64_t)__p + 6, v218))
                        {
                          LODWORD(__p[1]) = v1221;
                          if (v1221 > 0x40) {
                            operator new[]();
                          }
                          __p[0] = (void *)__src;
                          llvm::APInt::operator+=((uint64_t)__p, 1uLL);
                          unsigned int v219 = __p[1];
                          unint64_t v220 = __p[0];
                          LODWORD(__p[1]) = 0;
                          if (v1223 > 0x40) {
                            BOOL v221 = memcmp((const void *)v1222, __p[0], (((unint64_t)v1223 + 63) >> 3) & 0x3FFFFFF8) == 0;
                          }
                          else {
                            BOOL v221 = (void *)v1222 == __p[0];
                          }
                          int v222 = v221;
                          if (v219 >= 0x41)
                          {
                            if (v220)
                            {
                              MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
                              if (LODWORD(__p[1]) >= 0x41)
                              {
                                if (__p[0]) {
                                  MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                                }
                              }
                            }
                          }
                          if (v222)
                          {
                            unsigned int v223 = operator new(0x80uLL);
                            uint64_t v38 = (llvm::Value *)(v223 + 16);
                            v223[21] = v223[21] & 0x38000000 | 2;
                            *(void *)unsigned int v223 = 0;
                            *((void *)v223 + 1) = 0;
                            *((void *)v223 + 2) = 0;
                            *((void *)v223 + 3) = v223 + 16;
                            *((void *)v223 + 4) = 0;
                            *((void *)v223 + 5) = 0;
                            *((void *)v223 + 6) = 0;
                            *((void *)v223 + 7) = v223 + 16;
                            uint64_t v225 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 64), (llvm::LLVMContext *)&__src, v224);
                            LOWORD(v1214) = 257;
                            BOOL v226 = (void **)*v117;
                            uint64_t v227 = **(void **)*v117 + 1888;
                            if (*v117 && (v226[1] & 0xFE) == 0x12)
                            {
                              unsigned int v336 = (uint64_t **)(**(void **)*v117 + 1888);
                              uint64_t v337 = (llvm::Type *)*((unsigned int *)v226 + 8);
                              if (*((_DWORD *)v226 + 2) == 19) {
                                llvm::ScalableVectorType::get(v336, v337);
                              }
                              else {
                                llvm::FixedVectorType::get((llvm::FixedVectorType *)v336, v337);
                              }
                              uint64_t v227 = v338;
                            }
                            llvm::CmpInst::CmpInst(v38, v227, 53, 32, (uint64_t)v117, (uint64_t)v225, (const char **)__p, 0, 0);
                          }
                          else
                          {
                            LODWORD(__p[1]) = v1217;
                            if (v1217 > 0x40) {
                              operator new[]();
                            }
                            __p[0] = __s1;
                            llvm::APInt::operator+=((uint64_t)__p, 1uLL);
                            unsigned int v263 = __p[1];
                            uint64_t v38 = (llvm::Value *)__p[0];
                            LODWORD(__p[1]) = 0;
                            if (v1219 > 0x40) {
                              BOOL v264 = memcmp(__s2, __p[0], (((unint64_t)v1219 + 63) >> 3) & 0x3FFFFFF8) == 0;
                            }
                            else {
                              BOOL v264 = __s2 == __p[0];
                            }
                            int v265 = v264;
                            if (v263 >= 0x41)
                            {
                              if (v38)
                              {
                                MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
                                if (LODWORD(__p[1]) >= 0x41)
                                {
                                  if (__p[0]) {
                                    MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                                  }
                                }
                              }
                            }
                            if (!v265)
                            {
                              int v306 = 0;
LABEL_518:
                              if (v1219 >= 0x41 && __s2) {
                                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                              }
                              if (v1217 >= 0x41 && __s1) {
                                MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                              }
                              if (v1223 >= 0x41 && v1222) {
                                MEMORY[0x1D25D9CB0](v1222, 0x1000C8000313F17);
                              }
                              if (v1221 >= 0x41 && __src) {
                                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                              }
                              if (v1227 >= 0x41 && v1226) {
                                MEMORY[0x1D25D9CB0](v1226, 0x1000C8000313F17);
                              }
                              if (v1225 >= 0x41 && v1224) {
                                MEMORY[0x1D25D9CB0](v1224, 0x1000C8000313F17);
                              }
                              if (v1235 >= 0x41 && v1234) {
                                MEMORY[0x1D25D9CB0](v1234, 0x1000C8000313F17);
                              }
                              if (v1233 >= 0x41 && v1232) {
                                MEMORY[0x1D25D9CB0](v1232, 0x1000C8000313F17);
                              }
                              if (!v306) {
                                goto LABEL_188;
                              }
LABEL_195:
                              unint64_t v103 = v1204;
                              if (v38) {
                                return v38;
                              }
LABEL_196:
                              uint64_t v38 = (llvm::Value *)sub_1CCA66DFC((void *)a1, v4);
                              if (v38) {
                                return v38;
                              }
                              uint64_t v121 = v4[1];
                              if (v121)
                              {
                                if (!v121[1])
                                {
                                  uint64_t v132 = (uint64_t)v121[3];
                                  if (v132)
                                  {
                                    if (*(unsigned char *)(v132 + 16) == 85)
                                    {
                                      __p[0] = 0;
                                      uint64_t v1232 = 0;
                                      uint64_t v38 = 0;
                                      if (llvm::matchSelectPattern(v132, (uint64_t)__p, &v1232, 0, 0)) {
                                        return v38;
                                      }
                                    }
                                  }
                                }
                              }
                              uint64_t v122 = (uint64_t)*(v4 - 4);
                              if (!v122) {
                                goto LABEL_249;
                              }
                              unsigned int v123 = *(unsigned __int8 *)(v122 + 16);
                              if (v123 > 0x14) {
                                goto LABEL_249;
                              }
                              __int16 v124 = *((_WORD *)v4 + 9);
                              if (v123 == 16)
                              {
                                uint64_t v125 = *(unsigned int *)(v122 + 32);
                                if (v125 >= 0x41)
                                {
                                  int v253 = 0;
                                  int64_t v254 = (unint64_t)(v125 + 63) >> 6;
                                  do
                                  {
                                    BOOL v454 = v254-- < 1;
                                    if (v454) {
                                      break;
                                    }
                                    unint64_t v255 = *(void *)(*(void *)(v122 + 24) + 8 * v254);
                                    v253 += __clz(v255);
                                  }
                                  while (!v255);
                                  int v256 = v125 | 0xFFFFFFC0;
                                  if ((v125 & 0x3F) == 0) {
                                    int v256 = 0;
                                  }
                                  unint64_t v103 = v1204;
                                  if (v253 + v256 == v125) {
                                    goto LABEL_204;
                                  }
                                }
                                else if (!*(void *)(v122 + 24))
                                {
                                  goto LABEL_204;
                                }
                              }
                              else if (v123 == 17)
                              {
                                if (sub_1CB844168((uint64_t)*(v4 - 4), 0.0)) {
                                  goto LABEL_204;
                                }
                              }
                              else if (v123 - 18 < 3 || v123 == 13)
                              {
                                goto LABEL_204;
                              }
                              if ((sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v122) & 1) == 0) {
                                goto LABEL_249;
                              }
LABEL_204:
                              int v126 = v124 & 0x3F;
                              uint64_t v127 = v1206;
                              if (v126 == 38)
                              {
                                uint64_t v1232 = 0;
                                v1224 = 0;
                                uint64_t v188 = *v1206;
                                __p[0] = &v1232;
                                __p[1] = &v1224;
                                if (sub_1CC04A7E0((void **)__p, v188))
                                {
                                  if (llvm::isKnownPositive((llvm *)v1232, *(const llvm::Value **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)v4, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1))
                                  {
                                    v1117 = operator new(0x80uLL);
                                    uint64_t v38 = (llvm::Value *)(v1117 + 16);
                                    v1117[21] = v1117[21] & 0x38000000 | 2;
                                    *(void *)v1117 = 0;
                                    *((void *)v1117 + 1) = 0;
                                    *((void *)v1117 + 2) = 0;
                                    *((void *)v1117 + 3) = v1117 + 16;
                                    *((void *)v1117 + 4) = 0;
                                    *((void *)v1117 + 5) = 0;
                                    *((void *)v1117 + 6) = 0;
                                    *((void *)v1117 + 7) = v1117 + 16;
                                    int v190 = (unsigned __int8 *)v1224;
                                    uint64_t Splat = *v1204;
LABEL_871:
                                    LOWORD(v1214) = 257;
                                    unint64_t v505 = *(void ***)v190;
                                    uint64_t v72 = ***(void ***)v190 + 1888;
                                    if (*(void *)v190 && (v505[1] & 0xFE) == 0x12)
                                    {
                                      int v1018 = (uint64_t **)(***(void ***)v190 + 1888);
                                      int64_t v1019 = (llvm::Type *)*((unsigned int *)v505 + 8);
                                      if (*((_DWORD *)v505 + 2) == 19) {
                                        llvm::ScalableVectorType::get(v1018, v1019);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v1018, v1019);
                                      }
                                      uint64_t v72 = v1020;
                                    }
                                    int v73 = v38;
                                    __int16 v74 = 38;
LABEL_888:
                                    uint64_t v75 = (uint64_t)v190;
LABEL_112:
                                    uint64_t v76 = Splat;
LABEL_264:
                                    llvm::CmpInst::CmpInst(v73, v72, 53, v74, v75, v76, (const char **)__p, 0, 0);
                                    return v38;
                                  }
                                  unint64_t v103 = v1204;
                                  uint64_t v127 = v1206;
                                  if (llvm::isKnownPositive(v1224, *(const llvm::Value **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)v4, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1))
                                  {
                                    unsigned int v189 = operator new(0x80uLL);
                                    uint64_t v38 = (llvm::Value *)(v189 + 16);
                                    v189[21] = v189[21] & 0x38000000 | 2;
                                    *(void *)unsigned int v189 = 0;
                                    *((void *)v189 + 1) = 0;
                                    *((void *)v189 + 2) = 0;
                                    *((void *)v189 + 3) = v189 + 16;
                                    *((void *)v189 + 4) = 0;
                                    *((void *)v189 + 5) = 0;
                                    *((void *)v189 + 6) = 0;
                                    *((void *)v189 + 7) = v189 + 16;
                                    int v190 = (unsigned __int8 *)v1232;
                                    uint64_t Splat = *v1204;
                                    goto LABEL_871;
                                  }
                                }
                              }
                              if ((*((_WORD *)v4 + 9) & 0x3E) != 0x20) {
                                goto LABEL_229;
                              }
                              uint64_t v128 = *v127;
                              uint64_t v129 = *(void *)(*v127 + 8);
                              if (!v129 || *(void *)(v129 + 8)) {
                                goto LABEL_229;
                              }
                              unsigned int v130 = *(unsigned __int8 *)(v128 + 16);
                              if (v130 >= 0x1C)
                              {
                                if ((v130 & 0xFE) != 0x32) {
                                  goto LABEL_229;
                                }
                                int v131 = *(_DWORD *)(v128 + 20);
                                if ((v131 & 0x40000000) != 0)
                                {
                                  uint64_t v133 = *(void *)(v128 - 8);
                                  goto LABEL_227;
                                }
                              }
                              else
                              {
                                if (v130 != 5 || (*(_WORD *)(v128 + 18) & 0xFFFE) != 0x16) {
                                  goto LABEL_229;
                                }
                                int v131 = *(_DWORD *)(v128 + 20);
                              }
                              uint64_t v133 = v128 - 32 * (v131 & 0x7FFFFFF);
LABEL_227:
                              unsigned int v134 = *(void **)v133;
                              if (!*(void *)v133) {
                                goto LABEL_229;
                              }
                              uint64_t v135 = *(llvm::Constant ***)(v133 + 32);
                              if (!v135) {
                                goto LABEL_229;
                              }
                              uint64_t v168 = *v103;
                              if (!*v103) {
                                goto LABEL_229;
                              }
                              unsigned int v169 = *(unsigned __int8 *)(v168 + 16);
                              if (v169 > 0x14) {
                                goto LABEL_229;
                              }
                              if (v169 == 16)
                              {
                                uint64_t v170 = *(unsigned int *)(v168 + 32);
                                if (v170 < 0x41)
                                {
                                  if (*(void *)(v168 + 24)) {
                                    goto LABEL_279;
                                  }
LABEL_280:
                                  __int16 v171 = *((_WORD *)v4 + 9);
                                  if (llvm::isKnownToBeAPowerOfTwo((llvm *)v135, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0, *(void *)(a1 + 56), (llvm::AssumptionCache *)v4, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v1192))
                                  {
                                    uint64_t v174 = *(void *)(a1 + 24);
                                    AllOnesValue = llvm::Constant::getAllOnesValue(*v135, v172, v173);
                                    LOWORD(v1214) = 257;
                                    unint64_t v176 = sub_1CB844A3C(v174, v135, (uint64_t)AllOnesValue, (uint64_t)__p, 0, 0);
                                    uint64_t v177 = *(void *)(a1 + 24);
                                    LOWORD(v1214) = 257;
                                    unint64_t v178 = sub_1CBF52474(v177, v134, (uint64_t)v176, (uint64_t)__p);
                                    LOWORD(v1214) = 257;
                                    uint64_t v127 = v1206;
                                    unsigned int v37 = llvm::CmpInst::Create(53, v171 & 0x3F, v178, v168, (const char **)__p, 0);
                                    if (v37) {
                                      return (llvm::Value *)v37;
                                    }
                                  }
                                  goto LABEL_229;
                                }
                                int v332 = 0;
                                int64_t v333 = (unint64_t)(v170 + 63) >> 6;
                                do
                                {
                                  BOOL v454 = v333-- < 1;
                                  if (v454) {
                                    break;
                                  }
                                  unint64_t v334 = *(void *)(*(void *)(v168 + 24) + 8 * v333);
                                  v332 += __clz(v334);
                                }
                                while (!v334);
                                int v335 = v170 | 0xFFFFFFC0;
                                if ((v170 & 0x3F) == 0) {
                                  int v335 = 0;
                                }
                                uint64_t v127 = v1206;
                                if (v332 + v335 == v170) {
                                  goto LABEL_280;
                                }
                              }
                              else if (v169 == 17)
                              {
                                uint64_t v127 = v1206;
                                if (sub_1CB844168(*v103, 0.0)) {
                                  goto LABEL_280;
                                }
                              }
                              else
                              {
                                uint64_t v127 = v1206;
                                if (v169 - 18 < 3 || v169 == 13) {
                                  goto LABEL_280;
                                }
                              }
LABEL_279:
                              if (sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v168)) {
                                goto LABEL_280;
                              }
LABEL_229:
                              uint64_t v136 = *v127;
                              int v137 = *(unsigned __int8 *)(*v127 + 16);
                              if (v137 == 5)
                              {
                                if (*(_WORD *)(v136 + 18) != 22) {
                                  goto LABEL_249;
                                }
                                uint64_t v139 = (uint64_t *)(v136 - 32 * (*(_DWORD *)(v136 + 20) & 0x7FFFFFF));
                                uint64_t v138 = *v139;
                                if (!*v139) {
                                  goto LABEL_249;
                                }
                                uint64_t v38 = (llvm::Value *)v139[4];
                                if (!v38) {
                                  goto LABEL_249;
                                }
                              }
                              else
                              {
                                if (v137 != 50) {
                                  goto LABEL_249;
                                }
                                uint64_t v138 = *(void *)(v136 - 64);
                                if (!v138) {
                                  goto LABEL_249;
                                }
                                uint64_t v38 = *(llvm::Value **)(v136 - 32);
                                if (!v38) {
                                  goto LABEL_249;
                                }
                              }
                              if ((v126 & 0x3E) == 0x20)
                              {
                                uint64_t v140 = *(void **)(a1 + 56);
                                uint64_t v141 = *(void *)(a1 + 72);
                                size_t v142 = v4;
                                if (!v4[5])
                                {
                                  if (*(unsigned __int8 *)(v138 + 16) < 0x1Cu
                                    || (size_t v142 = (void ***)v138, !*(void *)(v138 + 40)))
                                  {
                                    size_t v142 = 0;
                                  }
                                }
                                __p[0] = *(void **)(a1 + 80);
                                __p[1] = v140;
                                *(void *)&long long v1213 = v142;
                                *((void *)&v1213 + 1) = v141;
                                *(void *)&long long v1214 = 0;
                                BYTE8(v1214) = 1;
                                sub_1CC16089C((uint64_t *)v138, 0, (const llvm::DataLayout **)__p, (uint64_t)&v1232);
                                uint64_t v143 = *(void **)(a1 + 56);
                                uint64_t v144 = *(void *)(a1 + 72);
                                uint64_t v145 = (llvm::Value *)v4;
                                if (!v4[5])
                                {
                                  if (*((unsigned __int8 *)v38 + 16) < 0x1Cu || (uint64_t v145 = v38, !*((void *)v38 + 5))) {
                                    uint64_t v145 = 0;
                                  }
                                }
                                __p[0] = *(void **)(a1 + 80);
                                __p[1] = v143;
                                *(void *)&long long v1213 = v145;
                                *((void *)&v1213 + 1) = v144;
                                *(void *)&long long v1214 = 0;
                                BYTE8(v1214) = 1;
                                sub_1CC16089C((uint64_t *)v38, 0, (const llvm::DataLayout **)__p, (uint64_t)&v1224);
                                if (v1233 > 0x40)
                                {
                                  __int32 v147 = 0;
                                  unint64_t v1087 = ((unint64_t)v1233 + 63) >> 6;
                                  uint8x8_t v1088 = (int8x8_t *)v1232;
                                  do
                                  {
                                    int8x8_t v1089 = *v1088++;
                                    uint8x8_t v1090 = (uint8x8_t)vcnt_s8(v1089);
                                    v1090.i16[0] = vaddlv_u8(v1090);
                                    v147 += v1090.i32[0];
                                    --v1087;
                                  }
                                  while (v1087);
                                }
                                else
                                {
                                  uint8x8_t v146 = (uint8x8_t)vcnt_s8((int8x8_t)v1232);
                                  v146.i16[0] = vaddlv_u8(v146);
                                  __int32 v147 = v146.i32[0];
                                }
                                if (v1233 - v147 != 1) {
                                  goto LABEL_243;
                                }
                                if (v1227 > 0x40)
                                {
                                  unsigned int v1092 = 0;
                                  unint64_t v1093 = ((unint64_t)v1227 + 63) >> 6;
                                  v1094 = v1226;
                                  do
                                  {
                                    int8x8_t v1095 = *v1094++;
                                    uint8x8_t v1096 = (uint8x8_t)vcnt_s8(v1095);
                                    v1096.i16[0] = vaddlv_u8(v1096);
                                    v1092 += v1096.i32[0];
                                    --v1093;
                                  }
                                  while (v1093);
                                }
                                else
                                {
                                  uint8x8_t v1091 = (uint8x8_t)vcnt_s8((int8x8_t)v1226);
                                  v1091.i16[0] = vaddlv_u8(v1091);
                                  unsigned int v1092 = v1091.i32[0];
                                }
                                if (v1092 >= 2)
                                {
                                  int v1097 = operator new(0x80uLL);
                                  uint64_t v38 = (llvm::Value *)(v1097 + 16);
                                  v1097[21] = v1097[21] & 0x38000000 | 2;
                                  *(void *)int v1097 = 0;
                                  *((void *)v1097 + 1) = 0;
                                  *((void *)v1097 + 2) = 0;
                                  *((void *)v1097 + 3) = v1097 + 16;
                                  *((void *)v1097 + 4) = 0;
                                  *((void *)v1097 + 5) = 0;
                                  *((void *)v1097 + 6) = 0;
                                  *((void *)v1097 + 7) = v1097 + 16;
                                  uint64_t v1098 = *v1204;
                                  LOWORD(v1214) = 257;
                                  uint64_t v1099 = *(void *)v138;
                                  uint64_t v1100 = ***(void ***)v138 + 1888;
                                  if (*(void *)v138 && (*(_DWORD *)(v1099 + 8) & 0xFE) == 0x12)
                                  {
                                    v1114 = (uint64_t **)(***(void ***)v138 + 1888);
                                    uint64_t v1115 = (llvm::Type *)*(unsigned int *)(v1099 + 32);
                                    if (*(_DWORD *)(v1099 + 8) == 19) {
                                      llvm::ScalableVectorType::get(v1114, v1115);
                                    }
                                    else {
                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v1114, v1115);
                                    }
                                    uint64_t v1100 = v1116;
                                  }
                                  llvm::CmpInst::CmpInst(v38, v1100, 53, v126, v138, v1098, (const char **)__p, 0, 0);
                                  char v148 = 0;
                                }
                                else
                                {
LABEL_243:
                                  char v148 = 1;
                                }
                                if (v1227 >= 0x41 && v1226) {
                                  MEMORY[0x1D25D9CB0](v1226, 0x1000C8000313F17);
                                }
                                if (v1225 >= 0x41 && v1224) {
                                  MEMORY[0x1D25D9CB0](v1224, 0x1000C8000313F17);
                                }
                                if (v1235 >= 0x41 && v1234) {
                                  MEMORY[0x1D25D9CB0](v1234, 0x1000C8000313F17);
                                }
                                if (v1233 >= 0x41 && v1232) {
                                  MEMORY[0x1D25D9CB0](v1232, 0x1000C8000313F17);
                                }
                                if ((v148 & 1) == 0 && v38) {
                                  return v38;
                                }
                              }
LABEL_249:
                              __int16 v149 = *((_WORD *)v4 + 9);
                              unint64_t v1207 = 0;
                              __p[0] = &v1207;
                              __p[1] = 0;
                              if (!sub_1CBF528D8((uint64_t)__p, (unsigned __int8 *)v1205)) {
                                goto LABEL_677;
                              }
                              if ((v149 & 0x3F) != 0x22)
                              {
                                if ((v149 & 0x3F) == 0x24)
                                {
                                  unsigned int v152 = *((_DWORD *)v1207 + 2);
                                  if (v152 > 0x40)
                                  {
                                    unsigned int v310 = v152 - 1;
                                    if (((*(void *)(*(void *)v1207 + 8 * (v310 >> 6)) >> v310) & 1) != 0
                                      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1207) == v310)
                                    {
                                      goto LABEL_254;
                                    }
                                  }
                                  else if (*(void *)v1207 == 1 << (v152 - 1))
                                  {
LABEL_254:
                                    uint64_t v153 = (uint64_t)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v8, v150, v151);
                                    uint64_t v154 = operator new(0x80uLL);
                                    uint64_t v38 = (llvm::Value *)(v154 + 16);
                                    v154[21] = v154[21] & 0x38000000 | 2;
                                    *(void *)uint64_t v154 = 0;
                                    *((void *)v154 + 1) = 0;
                                    *((void *)v154 + 2) = 0;
                                    *((void *)v154 + 3) = v154 + 16;
                                    *((void *)v154 + 4) = 0;
                                    *((void *)v154 + 5) = 0;
                                    *((void *)v154 + 6) = 0;
                                    *((void *)v154 + 7) = v154 + 16;
                                    LOWORD(v1214) = 257;
                                    int v155 = *(llvm::Constant **)v8;
                                    uint64_t v72 = ***(void ***)v8 + 1888;
                                    if (*(void *)v8 && (*((_DWORD *)v155 + 2) & 0xFE) == 0x12)
                                    {
                                      uint8x8_t v197 = (uint64_t **)(***(void ***)v8 + 1888);
                                      uint64_t v198 = (llvm::Type *)*((unsigned int *)v155 + 8);
                                      if (*((_DWORD *)v155 + 2) == 19) {
                                        llvm::ScalableVectorType::get(v197, v198);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v197, v198);
                                      }
                                      uint64_t v72 = v199;
                                    }
                                    int v73 = v38;
                                    __int16 v74 = 38;
LABEL_262:
                                    uint64_t v75 = (uint64_t)v8;
LABEL_263:
                                    uint64_t v76 = v153;
                                    goto LABEL_264;
                                  }
                                }
LABEL_677:
                                uint64_t v38 = (llvm::Value *)sub_1CCA5E9E0(a1, v4, (uint64_t)v1208);
                                if (v38) {
                                  return v38;
                                }
                                uint64_t v38 = (llvm::Value *)sub_1CCA503CC((void *)a1, v4);
                                if (v38) {
                                  return v38;
                                }
                                if ((*((_WORD *)v4 + 9) & 0x3E) != 0x20) {
                                  goto LABEL_680;
                                }
                                uint64_t v415 = *v1206;
                                if (!*v1206) {
                                  goto LABEL_680;
                                }
                                if (*(unsigned __int8 *)(v415 + 16) < 0x1Cu) {
                                  goto LABEL_680;
                                }
                                uint64_t v416 = *v1204;
                                if (!*v1204) {
                                  goto LABEL_680;
                                }
                                unsigned int v417 = *(unsigned __int8 *)(v416 + 16);
                                if (v417 > 0x14) {
                                  goto LABEL_680;
                                }
                                if (v417 == 16)
                                {
                                  uint64_t v418 = *(unsigned int *)(v416 + 32);
                                  if (v418 >= 0x41)
                                  {
                                    int v1003 = 0;
                                    int64_t v1004 = (unint64_t)(v418 + 63) >> 6;
                                    do
                                    {
                                      BOOL v454 = v1004-- < 1;
                                      if (v454) {
                                        break;
                                      }
                                      unint64_t v1005 = *(void *)(*(void *)(v416 + 24) + 8 * v1004);
                                      v1003 += __clz(v1005);
                                    }
                                    while (!v1005);
                                    int v1006 = v418 | 0xFFFFFFC0;
                                    if ((v418 & 0x3F) == 0) {
                                      int v1006 = 0;
                                    }
                                    if (v1003 + v1006 == v418) {
                                      goto LABEL_732;
                                    }
                                  }
                                  else if (!*(void *)(v416 + 24))
                                  {
                                    goto LABEL_732;
                                  }
                                }
                                else if (v417 == 17)
                                {
                                  if (sub_1CB844168(*v1204, 0.0)) {
                                    goto LABEL_732;
                                  }
                                }
                                else if (v417 - 18 < 3 || v417 == 13)
                                {
                                  goto LABEL_732;
                                }
                                if ((sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v416) & 1) == 0) {
                                  goto LABEL_680;
                                }
LABEL_732:
                                __int16 v419 = *((_WORD *)v4 + 9);
                                unsigned int v420 = *(unsigned __int8 *)(v415 + 16);
                                if (v420 > 0x1B) {
                                  unsigned int v421 = v420 - 28;
                                }
                                else {
                                  unsigned int v421 = *(unsigned __int16 *)(v415 + 18);
                                }
                                if (v421 == 38)
                                {
                                  int v460 = *(_DWORD *)(v415 + 20);
                                  if ((v460 & 0x40000000) != 0) {
                                    __int16 v461 = *(uint64_t **)(v415 - 8);
                                  }
                                  else {
                                    __int16 v461 = (uint64_t *)(v415 - 32 * (v460 & 0x7FFFFFF));
                                  }
                                  uint64_t v464 = *v461;
                                  unsigned int v465 = *(unsigned __int8 *)(v464 + 16);
                                  if (v464) {
                                    BOOL v466 = v465 >= 0x1C;
                                  }
                                  else {
                                    BOOL v466 = 0;
                                  }
                                  if (v466)
                                  {
                                    if ((v465 & 0xFE) == 0x36)
                                    {
                                      int v479 = *(_DWORD *)(v464 + 20);
                                      uint64_t v480 = (v479 & 0x40000000) != 0
                                           ? *(void *)(v464 - 8)
                                           : v464 - 32 * (v479 & 0x7FFFFFF);
                                      uint64_t v468 = *(llvm::Type ***)v480;
                                      if (*(void *)v480)
                                      {
                                        v469 = *(unsigned __int8 **)(v480 + 32);
                                        if (v469 && v469[16] <= 0x14u) {
                                          goto LABEL_800;
                                        }
                                      }
                                    }
                                  }
                                  else if (v465 == 5 && (*(_WORD *)(v464 + 18) & 0xFFFE) == 0x1A)
                                  {
                                    uint64_t v467 = v464 - 32 * (*(_DWORD *)(v464 + 20) & 0x7FFFFFF);
                                    uint64_t v468 = *(llvm::Type ***)v467;
                                    if (*(void *)v467)
                                    {
                                      v469 = *(unsigned __int8 **)(v467 + 32);
                                      if (v469) {
                                        goto LABEL_800;
                                      }
                                    }
                                  }
                                }
                                if ((v420 & 0xFE) != 0x36
                                  || ((int v529 = *(_DWORD *)(v415 + 20), (v529 & 0x40000000) != 0)
                                    ? (uint64_t v530 = *(void *)(v415 - 8))
                                    : (uint64_t v530 = v415 - 32 * (v529 & 0x7FFFFFF)),
                                      (uint64_t v468 = *(llvm::Type ***)v530) == 0
                                   || (v469 = *(unsigned __int8 **)(v530 + 32)) == 0
                                   || v469[16] > 0x14u))
                                {
                                  if (v420 - 41 > 0x11) {
                                    goto LABEL_680;
                                  }
                                  long long v531 = *(_OWORD *)(a1 + 120);
                                  long long v1213 = *(_OWORD *)(a1 + 104);
                                  long long v1214 = v531;
                                  *(_OWORD *)__p = *(_OWORD *)(a1 + 88);
                                  *(void *)&long long v1214 = v415;
                                  unsigned int v532 = sub_1CCAAABC0(a1, (unsigned char *)v415, (long long *)__p, 1);
                                  if (!v532) {
                                    goto LABEL_680;
                                  }
                                  uint64_t v468 = (llvm::Type **)v532;
                                  v470 = *(llvm::Constant **)v532;
LABEL_807:
                                  if ((v419 & 0x3F) == 0x20) {
                                    __int16 v477 = 39;
                                  }
                                  else {
                                    __int16 v477 = 40;
                                  }
                                  NullValue = llvm::Constant::getNullValue(v470, v474, v475);
                                  LOWORD(v1214) = 257;
                                  uint64_t v38 = (llvm::Value *)llvm::CmpInst::Create(53, v477, v468, (uint64_t)NullValue, (const char **)__p, 0);
                                  if (v38) {
                                    return v38;
                                  }
LABEL_680:
                                  if (*(unsigned __int8 *)(*v1204 + 16) >= 0x15u) {
                                    uint64_t v394 = 0;
                                  }
                                  else {
                                    uint64_t v394 = *v1204;
                                  }
                                  if (*(unsigned __int8 *)(*v1206 + 16) <= 0x1Bu) {
                                    uint64_t v395 = 0;
                                  }
                                  else {
                                    uint64_t v395 = *v1206;
                                  }
                                  if (v394) {
                                    BOOL v396 = v395 == 0;
                                  }
                                  else {
                                    BOOL v396 = 1;
                                  }
                                  if (v396) {
                                    goto LABEL_691;
                                  }
                                  unsigned int v412 = *(unsigned __int8 *)(v395 + 16);
                                  if (v412 <= 0x4B)
                                  {
                                    if (v412 == 60)
                                    {
                                      int v448 = *(_DWORD *)(v395 + 20);
                                      if ((v448 & 0x40000000) != 0) {
                                        int v449 = *(uint64_t **)(v395 - 8);
                                      }
                                      else {
                                        int v449 = (uint64_t *)(v395 - 32 * (v448 & 0x7FFFFFF));
                                      }
                                      uint64_t v450 = *v449;
                                      if (!*v449 || *(unsigned char *)(v450 + 16) != 62) {
                                        goto LABEL_691;
                                      }
                                      unint64_t v451 = *(llvm::GlobalValue **)(v450 - 32 * (*(_DWORD *)(v450 + 20) & 0x7FFFFFF));
                                      if (!v451 || *((unsigned char *)v451 + 16) != 3) {
                                        goto LABEL_691;
                                      }
                                      v447 = sub_1CCA490AC(a1, v395, (uint64_t *)v450, v451, v4, 0);
                                      goto LABEL_1048;
                                    }
                                    if (v412 != 62) {
                                      goto LABEL_691;
                                    }
                                    int v422 = *(unsigned __int8 *)(v394 + 16);
                                    if (v422 == 16)
                                    {
                                      uint64_t v423 = *(unsigned int *)(v394 + 32);
                                      if (v423 >= 0x41)
                                      {
                                        int v1014 = 0;
                                        int64_t v1015 = (unint64_t)(v423 + 63) >> 6;
                                        do
                                        {
                                          BOOL v454 = v1015-- < 1;
                                          if (v454) {
                                            break;
                                          }
                                          unint64_t v1016 = *(void *)(*(void *)(v394 + 24) + 8 * v1015);
                                          v1014 += __clz(v1016);
                                        }
                                        while (!v1016);
                                        int v1017 = v423 | 0xFFFFFFC0;
                                        if ((v423 & 0x3F) == 0) {
                                          int v1017 = 0;
                                        }
                                        if (v1014 + v1017 != v423) {
                                          goto LABEL_691;
                                        }
                                      }
                                      else if (*(void *)(v394 + 24))
                                      {
                                        goto LABEL_691;
                                      }
                                    }
                                    else if (v422 == 17)
                                    {
                                      if ((sub_1CB844168(v394, 0.0) & 1) == 0) {
                                        goto LABEL_691;
                                      }
                                    }
                                    else if ((v422 - 18) >= 3 && v422 != 13)
                                    {
                                      goto LABEL_691;
                                    }
                                    if (llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v395))
                                    {
                                      uint64_t v424 = operator new(0x80uLL);
                                      uint64_t v38 = (llvm::Value *)(v424 + 16);
                                      v424[21] = v424[21] & 0x38000000 | 2;
                                      *(void *)uint64_t v424 = 0;
                                      *((void *)v424 + 1) = 0;
                                      *((void *)v424 + 2) = 0;
                                      *((void *)v424 + 3) = v424 + 16;
                                      *((void *)v424 + 4) = 0;
                                      *((void *)v424 + 5) = 0;
                                      *((void *)v424 + 6) = 0;
                                      *((void *)v424 + 7) = v424 + 16;
                                      __int16 v427 = *((_WORD *)v4 + 9) & 0x3F;
                                      int v428 = *(_DWORD *)(v395 + 20);
                                      if ((v428 & 0x40000000) != 0) {
                                        unint64_t v429 = *(llvm::Constant ****)(v395 - 8);
                                      }
                                      else {
                                        unint64_t v429 = (llvm::Constant ***)(v395 - 32 * (v428 & 0x7FFFFFF));
                                      }
                                      uint64_t v494 = *v429;
                                      uint64_t v495 = llvm::Constant::getNullValue(**v429, v425, v426);
                                      LOWORD(v1214) = 257;
                                      uint64_t v496 = *v494;
                                      int v497 = *((_DWORD *)*v494 + 2);
                                      uint64_t v498 = **(void **)*v494 + 1888;
                                      if (*v494) {
                                        BOOL v499 = (*((_DWORD *)*v494 + 2) & 0xFE) == 18;
                                      }
                                      else {
                                        BOOL v499 = 0;
                                      }
                                      if (!v499) {
                                        goto LABEL_1553;
                                      }
                                      goto LABEL_1690;
                                    }
                                  }
                                  else
                                  {
                                    if (v412 != 76)
                                    {
                                      if (v412 == 83)
                                      {
                                        if (*(uint64_t ***)(v395 + 40) != v4[5]) {
                                          goto LABEL_691;
                                        }
                                        v447 = (llvm::Value *)sub_1CC9D50C0(a1, (llvm::Instruction *)v4, v395);
                                        goto LABEL_1048;
                                      }
                                      if (v412 != 85) {
                                        goto LABEL_691;
                                      }
                                      int v413 = *(_DWORD *)(v395 + 20);
                                      if ((v413 & 0x40000000) != 0) {
                                        uint64_t v414 = *(void *)(v395 - 8);
                                      }
                                      else {
                                        uint64_t v414 = v395 - 32 * (v413 & 0x7FFFFFF);
                                      }
                                      uint64_t v453 = *(unsigned __int8 **)(v414 + 32);
                                      if (v453) {
                                        BOOL v454 = v453[16] > 0x14u;
                                      }
                                      else {
                                        BOOL v454 = 1;
                                      }
                                      if (!v454)
                                      {
                                        ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(*((_WORD *)v4 + 9) & 0x3F), (llvm::Type *)v453, (llvm::Constant *)v394, 0, v393);
LABEL_944:
                                        BOOL v458 = ICmp;
                                        if (ICmp)
                                        {
                                          if (*((unsigned char *)ICmp + 16) == 16) {
                                            unint64_t v535 = (llvm::Instruction *)ICmp;
                                          }
                                          else {
                                            unint64_t v535 = 0;
                                          }
                                          int v457 = 1;
LABEL_951:
                                          int v536 = *(_DWORD *)(v395 + 20);
                                          if ((v536 & 0x40000000) != 0) {
                                            uint64_t v537 = *(void *)(v395 - 8);
                                          }
                                          else {
                                            uint64_t v537 = v395 - 32 * (v536 & 0x7FFFFFF);
                                          }
                                          unint64_t v538 = *(unsigned __int8 **)(v537 + 64);
                                          if (v538) {
                                            BOOL v539 = v538[16] > 0x14u;
                                          }
                                          else {
                                            BOOL v539 = 1;
                                          }
                                          if (v539)
                                          {
                                            int v540 = *(unsigned __int8 *)(v394 + 16);
                                            if (v540 == 16)
                                            {
                                              uint64_t v541 = *(unsigned int *)(v394 + 32);
                                              if (v541 >= 0x41)
                                              {
                                                int v1034 = 0;
                                                int64_t v1035 = (unint64_t)(v541 + 63) >> 6;
                                                do
                                                {
                                                  BOOL v454 = v1035-- < 1;
                                                  if (v454) {
                                                    break;
                                                  }
                                                  unint64_t v1036 = *(void *)(*(void *)(v394 + 24) + 8 * v1035);
                                                  v1034 += __clz(v1036);
                                                }
                                                while (!v1036);
                                                int v1037 = v541 | 0xFFFFFFC0;
                                                if ((v541 & 0x3F) == 0) {
                                                  int v1037 = 0;
                                                }
                                                if (v1034 + v1037 != v541) {
                                                  goto LABEL_972;
                                                }
                                              }
                                              else if (*(void *)(v394 + 24))
                                              {
                                                goto LABEL_972;
                                              }
                                            }
                                            else if (v540 == 17)
                                            {
                                              if ((sub_1CB844168(v394, 0.0) & 1) == 0) {
                                                goto LABEL_972;
                                              }
                                            }
                                            else if ((v540 - 18) >= 3 && v540 != 13)
                                            {
                                              goto LABEL_972;
                                            }
                                            uint64_t v542 = sub_1CC02F0F0(*((_WORD *)v4 + 9) & 0x3F, v538, (unsigned __int8 *)v394, a1 + 88, (llvm::SmallPtrSetImplBase *)3);
                                          }
                                          else
                                          {
                                            uint64_t v542 = (llvm::Instruction *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(*((_WORD *)v4 + 9) & 0x3F), (llvm::Type *)v538, (llvm::Constant *)v394, 0, v393);
                                          }
                                          unint64_t v543 = v542;
                                          if (v542)
                                          {
                                            if (*((unsigned char *)v542 + 16) == 16) {
                                              unint64_t v535 = v542;
                                            }
                                            else {
                                              unint64_t v535 = 0;
                                            }
                                            if (v457) {
                                              goto LABEL_1044;
                                            }
                                            char v544 = 1;
LABEL_974:
                                            uint64_t v545 = *(void *)(v395 + 8);
                                            if (!v545 || *(void *)(v545 + 8))
                                            {
                                              if (!v535) {
                                                goto LABEL_691;
                                              }
                                              uint64_t v546 = *((unsigned int *)v535 + 8);
                                              if (v546 > 0x40)
                                              {
                                                int v547 = 0;
                                                int64_t v548 = (unint64_t)(v546 + 63) >> 6;
                                                do
                                                {
                                                  BOOL v454 = v548-- < 1;
                                                  if (v454) {
                                                    break;
                                                  }
                                                  unint64_t v549 = *(void *)(*((void *)v535 + 3) + 8 * v548);
                                                  v547 += __clz(v549);
                                                }
                                                while (!v549);
                                                int v550 = v546 | 0xFFFFFFC0;
                                                if ((v546 & 0x3F) == 0) {
                                                  int v550 = 0;
                                                }
                                                if (v547 + v550 == v546) {
                                                  goto LABEL_691;
                                                }
                                              }
                                              else if (!*((void *)v535 + 3))
                                              {
                                                goto LABEL_691;
                                              }
                                              uint64_t v551 = *(void *)(v395 + 40);
                                              if (!v551) {
                                                goto LABEL_691;
                                              }
                                              uint64_t v552 = *(void *)(v551 + 40);
                                              if (v552 == v551 + 40) {
                                                goto LABEL_691;
                                              }
                                              uint64_t v553 = v552 ? v552 - 24 : 0;
                                              if (*(unsigned char *)(v553 + 16) != 30) {
                                                goto LABEL_691;
                                              }
                                              if ((*(_DWORD *)(v553 + 20) & 0x7FFFFFF) != 3) {
                                                goto LABEL_691;
                                              }
                                              uint64_t v554 = *(void *)(v553 - 96);
                                              if (!v554
                                                || *(unsigned char *)(v554 + 16) != 81
                                                || *(void *)(v554 - 64) != v395 && *(void *)(v554 - 32) != v395)
                                              {
                                                goto LABEL_691;
                                              }
                                              if ((*((_WORD *)v4 + 9) & 0x3F) != 0x20) {
                                                goto LABEL_691;
                                              }
                                              Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v553, 1u);
                                              if (!llvm::BasicBlock::getSinglePredecessor(Successor)) {
                                                goto LABEL_691;
                                              }
                                              unint64_t v555 = *(llvm::BasicBlock **)(v395 + 40);
                                              if (!v555 || v555 == Successor || v555 != (llvm::BasicBlock *)v4[5]) {
                                                goto LABEL_691;
                                              }
                                              uint64_t v556 = *(void *)(v395 + 8);
                                              if (v556)
                                              {
                                                do
                                                {
                                                  if (*(uint64_t ****)(v556 + 24) != v4) {
                                                    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                                                  }
                                                  uint64_t v556 = *(void *)(v556 + 8);
                                                }
                                                while (v556);
                                                unint64_t v555 = *(llvm::BasicBlock **)(v395 + 40);
                                              }
                                              uint64_t v557 = 32;
                                              if (v457) {
                                                uint64_t v557 = 64;
                                              }
                                              llvm::Value::replaceUsesOutsideBlock((uint64_t ***)v395, *(llvm::Value **)(v395 + v557 - 96), v555);
                                            }
                                            if (v457)
                                            {
LABEL_1030:
                                              if (v544)
                                              {
LABEL_1044:
                                                int v592 = *(_DWORD *)(v395 + 20);
                                                if ((v592 & 0x40000000) != 0) {
                                                  int v593 = *(uint64_t **)(v395 - 8);
                                                }
                                                else {
                                                  int v593 = (uint64_t *)(v395 - 32 * (v592 & 0x7FFFFFF));
                                                }
                                                uint64_t v594 = *v593;
                                                LOWORD(v1214) = 257;
                                                v447 = sub_1CC199EFC(v594, v458, (uint64_t)v543, (const char **)__p, 0, 0);
LABEL_1048:
                                                uint64_t v38 = v447;
                                                if (v447) {
                                                  return v38;
                                                }
                                                goto LABEL_691;
                                              }
                                              uint64_t v575 = *(void *)(a1 + 24);
                                              __int16 v576 = *((_WORD *)v4 + 9) & 0x3F;
                                              int v577 = *(_DWORD *)(v395 + 20);
                                              if ((v577 & 0x40000000) != 0) {
                                                uint64_t v578 = *(void *)(v395 - 8);
                                              }
                                              else {
                                                uint64_t v578 = v395 - 32 * (v577 & 0x7FFFFFF);
                                              }
                                              unint64_t v579 = *(void **)(v578 + 64);
                                              if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
                                              {
                                                int v590 = 0;
                                                uint64_t v589 = &byte_1CFBCE98E;
                                                goto LABEL_1043;
                                              }
                                              uint64_t v580 = ***v4;
                                              uint64_t v581 = *(void *)(v580 + 152);
                                              uint64_t v582 = *(unsigned int *)(v580 + 168);
                                              if (v582)
                                              {
                                                LODWORD(v583) = (v582 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                                                unsigned int v584 = (uint64_t ****)(v581 + 16 * v583);
                                                BOOL v585 = *v584;
                                                if (*v584 == v4)
                                                {
LABEL_1042:
                                                  v588 = v584[1];
                                                  int64_t v591 = *v588;
                                                  uint64_t v589 = (char *)(v588 + 2);
                                                  int v590 = v591;
LABEL_1043:
                                                  LOWORD(v1214) = 261;
                                                  __p[0] = v589;
                                                  __p[1] = v590;
                                                  unint64_t v543 = sub_1CB845F20(v575, v576, v579, v394, (uint64_t)__p);
                                                  goto LABEL_1044;
                                                }
                                                int v586 = 1;
                                                while (v585 != (uint64_t ***)-4096)
                                                {
                                                  int v587 = v583 + v586++;
                                                  uint64_t v583 = v587 & (v582 - 1);
                                                  BOOL v585 = *(uint64_t ****)(v581 + 16 * v583);
                                                  if (v585 == v4)
                                                  {
                                                    unsigned int v584 = (uint64_t ****)(v581 + 16 * v583);
                                                    goto LABEL_1042;
                                                  }
                                                }
                                              }
                                              unsigned int v584 = (uint64_t ****)(v581 + 16 * v582);
                                              goto LABEL_1042;
                                            }
                                            uint64_t v558 = *(void *)(a1 + 24);
                                            __int16 v559 = *((_WORD *)v4 + 9) & 0x3F;
                                            int v560 = *(_DWORD *)(v395 + 20);
                                            if ((v560 & 0x40000000) != 0) {
                                              uint64_t v561 = *(void *)(v395 - 8);
                                            }
                                            else {
                                              uint64_t v561 = v395 - 32 * (v560 & 0x7FFFFFF);
                                            }
                                            unsigned int v562 = *(void **)(v561 + 32);
                                            if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
                                            {
                                              unint64_t v573 = 0;
                                              uint64_t v572 = &byte_1CFBCE98E;
                                              goto LABEL_1029;
                                            }
                                            uint64_t v563 = ***v4;
                                            uint64_t v564 = *(void *)(v563 + 152);
                                            uint64_t v565 = *(unsigned int *)(v563 + 168);
                                            if (v565)
                                            {
                                              LODWORD(v566) = (v565 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                                              int v567 = (uint64_t ****)(v564 + 16 * v566);
                                              unint64_t v568 = *v567;
                                              if (*v567 == v4)
                                              {
LABEL_1028:
                                                v571 = v567[1];
                                                unint64_t v574 = *v571;
                                                uint64_t v572 = (char *)(v571 + 2);
                                                unint64_t v573 = v574;
LABEL_1029:
                                                LOWORD(v1214) = 261;
                                                __p[0] = v572;
                                                __p[1] = v573;
                                                BOOL v458 = (uint64_t *)sub_1CB845F20(v558, v559, v562, v394, (uint64_t)__p);
                                                goto LABEL_1030;
                                              }
                                              int v569 = 1;
                                              while (v568 != (uint64_t ***)-4096)
                                              {
                                                int v570 = v566 + v569++;
                                                uint64_t v566 = v570 & (v565 - 1);
                                                unint64_t v568 = *(uint64_t ****)(v564 + 16 * v566);
                                                if (v568 == v4)
                                                {
                                                  int v567 = (uint64_t ****)(v564 + 16 * v566);
                                                  goto LABEL_1028;
                                                }
                                              }
                                            }
                                            int v567 = (uint64_t ****)(v564 + 16 * v565);
                                            goto LABEL_1028;
                                          }
LABEL_972:
                                          if (!v457) {
                                            goto LABEL_691;
                                          }
                                          char v544 = 0;
                                          unint64_t v543 = 0;
                                          goto LABEL_974;
                                        }
                                        int v457 = 0;
LABEL_950:
                                        unint64_t v535 = 0;
                                        goto LABEL_951;
                                      }
                                      int v455 = *(unsigned __int8 *)(v394 + 16);
                                      if (v455 == 16)
                                      {
                                        uint64_t v456 = *(unsigned int *)(v394 + 32);
                                        if (v456 >= 0x41)
                                        {
                                          int v1030 = 0;
                                          int64_t v1031 = (unint64_t)(v456 + 63) >> 6;
                                          do
                                          {
                                            BOOL v454 = v1031-- < 1;
                                            if (v454) {
                                              break;
                                            }
                                            unint64_t v1032 = *(void *)(*(void *)(v394 + 24) + 8 * v1031);
                                            v1030 += __clz(v1032);
                                          }
                                          while (!v1032);
                                          int v1033 = v456 | 0xFFFFFFC0;
                                          if ((v456 & 0x3F) == 0) {
                                            int v1033 = 0;
                                          }
                                          if (v1030 + v1033 != v456) {
                                            goto LABEL_782;
                                          }
                                        }
                                        else if (*(void *)(v394 + 24))
                                        {
LABEL_782:
                                          int v457 = 0;
                                          BOOL v458 = 0;
                                          goto LABEL_950;
                                        }
                                      }
                                      else if (v455 == 17)
                                      {
                                        if ((sub_1CB844168(v394, 0.0) & 1) == 0) {
                                          goto LABEL_782;
                                        }
                                      }
                                      else if ((v455 - 18) >= 3 && v455 != 13)
                                      {
                                        goto LABEL_782;
                                      }
                                      ICmp = (uint64_t *)sub_1CC02F0F0(*((_WORD *)v4 + 9) & 0x3F, v453, (unsigned __int8 *)v394, a1 + 88, (llvm::SmallPtrSetImplBase *)3);
                                      goto LABEL_944;
                                    }
                                    int v430 = *(unsigned __int8 *)(v394 + 16);
                                    if (v430 == 16)
                                    {
                                      uint64_t v431 = *(unsigned int *)(v394 + 32);
                                      if (v431 >= 0x41)
                                      {
                                        int v1010 = 0;
                                        int64_t v1011 = (unint64_t)(v431 + 63) >> 6;
                                        do
                                        {
                                          BOOL v454 = v1011-- < 1;
                                          if (v454) {
                                            break;
                                          }
                                          unint64_t v1012 = *(void *)(*(void *)(v394 + 24) + 8 * v1011);
                                          v1010 += __clz(v1012);
                                        }
                                        while (!v1012);
                                        int v1013 = v431 | 0xFFFFFFC0;
                                        if ((v431 & 0x3F) == 0) {
                                          int v1013 = 0;
                                        }
                                        if (v1010 + v1013 != v431) {
                                          goto LABEL_691;
                                        }
                                      }
                                      else if (*(void *)(v394 + 24))
                                      {
                                        goto LABEL_691;
                                      }
                                    }
                                    else if (v430 == 17)
                                    {
                                      if ((sub_1CB844168(v394, 0.0) & 1) == 0) {
                                        goto LABEL_691;
                                      }
                                    }
                                    else if ((v430 - 18) >= 3 && v430 != 13)
                                    {
                                      goto LABEL_691;
                                    }
                                    uint64_t v432 = *(void *)(a1 + 80);
                                    uint64_t v433 = *(void *)v394;
                                    unsigned int v434 = *(_DWORD *)(v433 + 8);
                                    if ((v434 & 0xFE) == 0x12) {
                                      unsigned int v434 = *(_DWORD *)(**(void **)(v433 + 16) + 8);
                                    }
                                    uint64_t v435 = *(void *)(v432 + 232);
                                    if (v434 < 0x100) {
                                      goto LABEL_756;
                                    }
                                    unsigned int v436 = v434 >> 8;
                                    unint64_t v437 = *(unsigned int *)(v432 + 240);
                                    uint64_t v438 = *(void *)(v432 + 232);
                                    if (v437)
                                    {
                                      uint64_t v438 = v435;
                                      unint64_t v439 = v437;
                                      do
                                      {
                                        unint64_t v440 = v439 >> 1;
                                        uint64_t v441 = v438 + 16 * (v439 >> 1);
                                        unsigned int v442 = *(_DWORD *)(v441 + 8);
                                        uint64_t v443 = v441 + 16;
                                        v439 += ~(v439 >> 1);
                                        if (v442 < v436) {
                                          uint64_t v438 = v443;
                                        }
                                        else {
                                          unint64_t v439 = v440;
                                        }
                                      }
                                      while (v439);
                                    }
                                    if (v438 == v435 + 16 * v437 || *(_DWORD *)(v438 + 8) != v436) {
LABEL_756:
                                    }
                                      uint64_t v438 = v435;
                                    uint64_t v444 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v433, (llvm::LLVMContext *)*(unsigned int *)(v438 + 4));
                                    if ((*(_DWORD *)(v433 + 8) & 0xFE) == 0x12)
                                    {
                                      uint64_t v1101 = (llvm::Type *)*(unsigned int *)(v433 + 32);
                                      if (*(_DWORD *)(v433 + 8) == 19) {
                                        llvm::ScalableVectorType::get(v444, v1101);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v444, v1101);
                                      }
                                    }
                                    int v445 = *(_DWORD *)(v395 + 20);
                                    if ((v445 & 0x40000000) != 0) {
                                      uint64_t v446 = *(uint64_t *****)(v395 - 8);
                                    }
                                    else {
                                      uint64_t v446 = (uint64_t ****)(v395 - 32 * (v445 & 0x7FFFFFF));
                                    }
                                    if (v444 == **v446)
                                    {
                                      int v481 = operator new(0x80uLL);
                                      uint64_t v38 = (llvm::Value *)(v481 + 16);
                                      v481[21] = v481[21] & 0x38000000 | 2;
                                      *(void *)int v481 = 0;
                                      *((void *)v481 + 1) = 0;
                                      *((void *)v481 + 2) = 0;
                                      *((void *)v481 + 3) = v481 + 16;
                                      *((void *)v481 + 4) = 0;
                                      *((void *)v481 + 5) = 0;
                                      *((void *)v481 + 6) = 0;
                                      *((void *)v481 + 7) = v481 + 16;
                                      __int16 v427 = *((_WORD *)v4 + 9) & 0x3F;
                                      int v484 = *(_DWORD *)(v395 + 20);
                                      if ((v484 & 0x40000000) != 0) {
                                        uint64_t v485 = *(llvm::Constant ****)(v395 - 8);
                                      }
                                      else {
                                        uint64_t v485 = (llvm::Constant ***)(v395 - 32 * (v484 & 0x7FFFFFF));
                                      }
                                      uint64_t v494 = *v485;
                                      uint64_t v495 = llvm::Constant::getNullValue(**v485, v482, v483);
LABEL_1551:
                                      LOWORD(v1214) = 257;
                                      uint64_t v496 = *v494;
                                      uint64_t v498 = **(void **)*v494 + 1888;
                                      if (!*v494 || (int v497 = *((_DWORD *)v496 + 2), (v497 & 0xFE) != 0x12))
                                      {
LABEL_1553:
                                        llvm::CmpInst::CmpInst(v38, v498, 53, v427, (uint64_t)v494, (uint64_t)v495, (const char **)__p, 0, 0);
                                        return v38;
                                      }
LABEL_1690:
                                      v897 = (uint64_t **)v498;
                                      __int16 v898 = (llvm::Type *)*((unsigned int *)v496 + 8);
                                      if (v497 == 19) {
                                        llvm::ScalableVectorType::get(v897, v898);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v897, v898);
                                      }
                                      uint64_t v498 = v899;
                                      goto LABEL_1553;
                                    }
                                  }
LABEL_691:
                                  int v397 = v8[16];
                                  if (v397 == 62 || v397 == 5 && *((_WORD *)v8 + 9) == 34)
                                  {
                                    uint64_t v38 = (llvm::Value *)sub_1CCA4A35C(a1, (llvm::Value *)v8, v1205, *((_WORD *)v4 + 9) & 0x3F, (llvm::Instruction *)v4);
                                    if (v38) {
                                      return v38;
                                    }
                                  }
                                  int v398 = *((unsigned __int8 *)v1205 + 16);
                                  if (v398 == 62 || v398 == 5 && *((_WORD *)v1205 + 9) == 34)
                                  {
                                    uint64_t v38 = (llvm::Value *)sub_1CCA4A35C(a1, v1205, (llvm::Value *)v8, dword_1CFB279AC[*((_WORD *)v4 + 9) & 0x3F], (llvm::Instruction *)v4);
                                    if (v38) {
                                      return v38;
                                    }
                                  }
                                  if (*(unsigned char *)(*(void *)v8 + 8) == 15 && (*((_WORD *)v4 + 9) & 0x3E) == 0x20)
                                  {
                                    UnderlyingObject = llvm::getUnderlyingObject((llvm *)v8, (const llvm::Value *)6);
                                    if (UnderlyingObject)
                                    {
                                      if (*((unsigned char *)UnderlyingObject + 16) == 59)
                                      {
                                        uint64_t v38 = (llvm::Value *)sub_1CCA4D33C(a1, (llvm::ValueAsMetadata *)v4, *((void *)UnderlyingObject + 1));
                                        if (v38) {
                                          return v38;
                                        }
                                      }
                                    }
                                    unsigned int v400 = llvm::getUnderlyingObject(v1205, (const llvm::Value *)6);
                                    if (v400)
                                    {
                                      if (*((unsigned char *)v400 + 16) == 59)
                                      {
                                        uint64_t v38 = (llvm::Value *)sub_1CCA4D33C(a1, (llvm::ValueAsMetadata *)v4, *((void *)v400 + 1));
                                        if (v38) {
                                          return v38;
                                        }
                                      }
                                    }
                                  }
                                  uint64_t v401 = (unsigned char *)*v1206;
                                  uint64_t v402 = v1204;
                                  if (!*v1206 || v401[16] != 77) {
                                    goto LABEL_1119;
                                  }
                                  uint64_t v403 = (llvm::Value *)*(v4 - 4);
                                  uint64_t v404 = *((void *)v401 - 4);
                                  uint64_t v405 = *(llvm::Type **)v404;
                                  if ((*(_DWORD *)(*(void *)v404 + 8) & 0xFE) == 0x12) {
                                    uint64_t v405 = (llvm::Type *)**((void **)v405 + 2);
                                  }
                                  unsigned int v406 = *((_WORD *)v4 + 9) & 0x3F;
                                  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v405);
                                  unint64_t v408 = *(llvm::Type **)v401;
                                  int v409 = *(_DWORD *)(*(void *)v401 + 8);
                                  if ((*(_DWORD *)(*(void *)v401 + 8) & 0xFE) == 0x12) {
                                    unint64_t v408 = (llvm::Type *)**((void **)v408 + 2);
                                  }
                                  if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits(v408))
                                  {
LABEL_1059:
                                    if (v409 == 15)
                                    {
                                      unsigned int v597 = *((unsigned __int8 *)v403 + 16);
                                      if (v597 < 0x15 || v597 == 77)
                                      {
                                        if (v597 == 77) {
                                          uint64_t v403 = (llvm::Value *)*((void *)v403 - 4);
                                        }
                                        uint8x8_t v601 = *(uint64_t **)(a1 + 24);
                                        uint64_t v602 = *(void *)v404;
                                        __int16 v1236 = 257;
                                        if (*(void *)v403 != v602)
                                        {
                                          if (*((unsigned __int8 *)v403 + 16) <= 0x14u)
                                          {
                                            uint64_t v403 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v601[9] + 224))(v601[9], 49, v403, v602);
                                            if (v403) {
                                              BOOL v606 = *((unsigned __int8 *)v403 + 16) >= 0x1Cu;
                                            }
                                            else {
                                              BOOL v606 = 0;
                                            }
                                            if (v606)
                                            {
                                              (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(void *)v601[10] + 16))(v601[10], v403, &v1232, v601[6], v601[7]);
                                              uint64_t v1102 = *((unsigned int *)v601 + 2);
                                              if (v1102)
                                              {
                                                uint64_t v1103 = *v601;
                                                uint64_t v1104 = v1103 + 16 * v1102;
                                                do
                                                {
                                                  llvm::Instruction::setMetadata(v403, *(_DWORD *)v1103, *(llvm::MDNode **)(v1103 + 8));
                                                  v1103 += 16;
                                                }
                                                while (v1103 != v1104);
                                              }
                                            }
                                          }
                                          else
                                          {
                                            LOWORD(v1214) = 257;
                                            uint64_t v403 = llvm::CastInst::Create(49, (uint64_t)v403, v602, (const char **)__p, 0);
                                            (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(void *)v601[10] + 16))(v601[10], v403, &v1232, v601[6], v601[7]);
                                            uint64_t v603 = *((unsigned int *)v601 + 2);
                                            if (v603)
                                            {
                                              uint64_t v604 = *v601;
                                              uint64_t v605 = v604 + 16 * v603;
                                              do
                                              {
                                                llvm::Instruction::setMetadata(v403, *(_DWORD *)v604, *(llvm::MDNode **)(v604 + 8));
                                                v604 += 16;
                                              }
                                              while (v604 != v605);
                                            }
                                          }
                                        }
                                        uint64_t v607 = operator new(0x80uLL);
                                        uint64_t v38 = (llvm::Value *)(v607 + 16);
                                        v607[21] = v607[21] & 0x38000000 | 2;
                                        *(void *)uint64_t v607 = 0;
                                        *((void *)v607 + 1) = 0;
                                        *((void *)v607 + 2) = 0;
                                        *((void *)v607 + 3) = v607 + 16;
                                        *((void *)v607 + 4) = 0;
                                        *((void *)v607 + 5) = 0;
                                        *((void *)v607 + 6) = 0;
                                        *((void *)v607 + 7) = v607 + 16;
                                        LOWORD(v1214) = 257;
                                        uint64_t v608 = *(void *)v404;
                                        uint64_t v609 = ***(void ***)v404 + 1888;
                                        if (*(void *)v404 && (*(_DWORD *)(v608 + 8) & 0xFE) == 0x12)
                                        {
                                          uint64_t v732 = (uint64_t **)(***(void ***)v404 + 1888);
                                          v733 = (llvm::Type *)*(unsigned int *)(v608 + 32);
                                          if (*(_DWORD *)(v608 + 8) == 19) {
                                            llvm::ScalableVectorType::get(v732, v733);
                                          }
                                          else {
                                            llvm::FixedVectorType::get((llvm::FixedVectorType *)v732, v733);
                                          }
                                          uint64_t v609 = v734;
                                        }
                                        llvm::CmpInst::CmpInst(v38, v609, 53, v406, v404, (uint64_t)v403, (const char **)__p, 0, 0);
                                        return v38;
                                      }
                                    }
                                    uint64_t __src = 0;
                                    BOOL v598 = (unsigned __int8 *)*v402;
                                    __p[0] = &__src;
                                    __p[1] = 0;
                                    if (!sub_1CBF528D8((uint64_t)__p, v598)
                                      || *(unsigned char *)(*(void *)v401 + 8) != 13)
                                    {
                                      goto LABEL_1119;
                                    }
                                    uint64_t v599 = **((void **)v401 - 4);
                                    int v600 = (*(_DWORD *)(v599 + 8) & 0xFE) == 0x12
                                         ? *(unsigned __int8 *)(**(void **)(v599 + 16) + 8)
                                         : *(_DWORD *)(v599 + 8);
                                    if (v600 != 13) {
                                      goto LABEL_1119;
                                    }
                                    __int16 v610 = *((_WORD *)v4 + 9);
                                    if ((v610 & 0x3E) == 0x20)
                                    {
                                      unsigned int v611 = *(_DWORD *)(__src + 8);
                                      if (v611)
                                      {
                                        if (v611 > 0x40)
                                        {
                                          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__src) != v611) {
                                            goto LABEL_1102;
                                          }
                                        }
                                        else if (*(void *)__src != 0xFFFFFFFFFFFFFFFFLL >> -(char)v611)
                                        {
                                          goto LABEL_1102;
                                        }
                                      }
                                      uint64_t v612 = *((void *)v401 + 1);
                                      if (v612 && !*(void *)(v612 + 8))
                                      {
                                        uint64_t v613 = *(void *)(v404 + 8);
                                        if (v613) {
                                          BOOL v614 = *(void *)(v613 + 8) == 0;
                                        }
                                        else {
                                          BOOL v614 = 0;
                                        }
                                        if (sub_1CC9F4000(v404, v614))
                                        {
                                          v616 = *(llvm::Constant **)v401;
                                          uint64_t v617 = *(void *)(a1 + 24);
                                          __int16 v1236 = 257;
                                          uint64_t v618 = sub_1CC2427E8(v617, v404, (uint64_t)&v1232, v615);
                                          int v190 = (unsigned __int8 *)v618;
                                          __int16 v1228 = 257;
                                          if (*(llvm::Constant **)v618 != v616)
                                          {
                                            if (*((unsigned __int8 *)v618 + 16) <= 0x14u)
                                            {
                                              uint64_t v728 = (*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::Constant *))(**(void **)(v617 + 72) + 224))(*(void *)(v617 + 72), 49, v618, v616);
                                              int v190 = (unsigned __int8 *)v728;
                                              if (v728)
                                              {
                                                if (*(unsigned __int8 *)(v728 + 16) >= 0x1Cu)
                                                {
                                                  (*(void (**)(void, uint64_t, llvm::ConstantExpr **, void, void))(**(void **)(v617 + 80) + 16))(*(void *)(v617 + 80), v728, &v1224, *(void *)(v617 + 48), *(void *)(v617 + 56));
                                                  uint64_t v729 = *(unsigned int *)(v617 + 8);
                                                  if (v729)
                                                  {
                                                    uint64_t v730 = *(void *)v617;
                                                    uint64_t v731 = v730 + 16 * v729;
                                                    do
                                                    {
                                                      llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v730, *(llvm::MDNode **)(v730 + 8));
                                                      v730 += 16;
                                                    }
                                                    while (v730 != v731);
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            {
                                              LOWORD(v1214) = 257;
                                              int v190 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v618, (uint64_t)v616, (const char **)__p, 0);
                                              (*(void (**)(void, unsigned __int8 *, llvm::ConstantExpr **, void, void))(**(void **)(v617 + 80) + 16))(*(void *)(v617 + 80), v190, &v1224, *(void *)(v617 + 48), *(void *)(v617 + 56));
                                              uint64_t v619 = *(unsigned int *)(v617 + 8);
                                              if (v619)
                                              {
                                                uint64_t v620 = *(void *)v617;
                                                uint64_t v621 = v620 + 16 * v619;
                                                do
                                                {
                                                  llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v620, *(llvm::MDNode **)(v620 + 8));
                                                  v620 += 16;
                                                }
                                                while (v620 != v621);
                                              }
                                            }
                                          }
                                          goto LABEL_1516;
                                        }
                                        __int16 v610 = *((_WORD *)v4 + 9);
                                      }
                                    }
LABEL_1102:
                                    v1224 = 0;
                                    if ((v610 & 0x3E) == 0x20)
                                    {
                                      uint64_t v622 = *(unsigned int *)(__src + 8);
                                      if (v622 > 0x40)
                                      {
                                        int v623 = 0;
                                        int64_t v624 = (unint64_t)(v622 + 63) >> 6;
                                        do
                                        {
                                          BOOL v454 = v624-- < 1;
                                          if (v454) {
                                            break;
                                          }
                                          unint64_t v625 = *(void *)(*(void *)__src + 8 * v624);
                                          v623 += __clz(v625);
                                        }
                                        while (!v625);
                                        int v626 = v622 | 0xFFFFFFC0;
                                        if ((v622 & 0x3F) == 0) {
                                          int v626 = 0;
                                        }
                                        if (v623 + v626 == v622)
                                        {
LABEL_1112:
                                          uint64_t v627 = *((void *)v401 + 1);
                                          if (v627)
                                          {
                                            if (!*(void *)(v627 + 8))
                                            {
                                              __p[0] = &v1224;
                                              __p[1] = &v1224;
                                              if ((sub_1CBC5BE40((void **)__p, v404) & 1) != 0
                                                || (sub_1CBC5BEAC((void **)&__p[1], v404) & 1) != 0)
                                              {
                                                unsigned int v694 = *(llvm::Type **)v1224;
                                                if (*(void *)v1224)
                                                {
                                                  if (*((unsigned char *)v694 + 8) == 18)
                                                  {
                                                    uint64_t v695 = *(void *)(a1 + 24);
                                                    long long v697 = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v694);
                                                    if (v696 == 1) {
                                                    v616 = (llvm::Constant *)llvm::IntegerType::get(*(llvm::IntegerType **)(v695 + 64), v697);
                                                    }
                                                    long long v698 = *(uint64_t **)(a1 + 24);
                                                    int v190 = (unsigned __int8 *)v1224;
                                                    __int16 v1236 = 257;
                                                    if (*(llvm::Constant **)v1224 != v616)
                                                    {
                                                      if (*((unsigned __int8 *)v1224 + 16) <= 0x14u)
                                                      {
                                                        int v190 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::ConstantExpr *, llvm::Constant *))(*(void *)v698[9] + 224))(v698[9], 49, v1224, v616);
                                                        if (v190) {
                                                          BOOL v833 = v190[16] >= 0x1Cu;
                                                        }
                                                        else {
                                                          BOOL v833 = 0;
                                                        }
                                                        if (v833)
                                                        {
                                                          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v698[10] + 16))(v698[10], v190, &v1232, v698[6], v698[7]);
                                                          uint64_t v1121 = *((unsigned int *)v698 + 2);
                                                          if (v1121)
                                                          {
                                                            uint64_t v1122 = *v698;
                                                            uint64_t v1123 = v1122 + 16 * v1121;
                                                            do
                                                            {
                                                              llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v1122, *(llvm::MDNode **)(v1122 + 8));
                                                              v1122 += 16;
                                                            }
                                                            while (v1122 != v1123);
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        LOWORD(v1214) = 257;
                                                        int v190 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1224, (uint64_t)v616, (const char **)__p, 0);
                                                        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v698[10] + 16))(v698[10], v190, &v1232, v698[6], v698[7]);
                                                        uint64_t v699 = *((unsigned int *)v698 + 2);
                                                        if (v699)
                                                        {
                                                          uint64_t v700 = *v698;
                                                          uint64_t v701 = v700 + 16 * v699;
                                                          do
                                                          {
                                                            llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v700, *(llvm::MDNode **)(v700 + 8));
                                                            v700 += 16;
                                                          }
                                                          while (v700 != v701);
                                                        }
                                                      }
                                                    }
LABEL_1516:
                                                    unint64_t v834 = operator new(0x80uLL);
                                                    v834[21] = v834[21] & 0x38000000 | 2;
                                                    uint64_t v38 = (llvm::Value *)(v834 + 16);
                                                    *(void *)unint64_t v834 = 0;
                                                    *((void *)v834 + 1) = 0;
                                                    *((void *)v834 + 2) = 0;
                                                    *((void *)v834 + 3) = v834 + 16;
                                                    *((void *)v834 + 4) = 0;
                                                    *((void *)v834 + 5) = 0;
                                                    *((void *)v834 + 6) = 0;
                                                    *((void *)v834 + 7) = v834 + 16;
                                                    uint64_t Splat = (uint64_t)llvm::Constant::getNullValue(v616, v835, v836);
                                                    LOWORD(v1214) = 257;
LABEL_885:
                                                    uint64_t v511 = *(void *)v190;
                                                    uint64_t v72 = ***(void ***)v190 + 1888;
                                                    if (*(void *)v190 && (*(_DWORD *)(v511 + 8) & 0xFE) == 0x12)
                                                    {
                                                      unint64_t v982 = (uint64_t **)(***(void ***)v190 + 1888);
                                                      v983 = (llvm::Type *)*(unsigned int *)(v511 + 32);
                                                      if (*(_DWORD *)(v511 + 8) == 19) {
                                                        llvm::ScalableVectorType::get(v982, v983);
                                                      }
                                                      else {
                                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v982, v983);
                                                      }
                                                      uint64_t v72 = v984;
                                                    }
                                                    int v73 = v38;
                                                    __int16 v74 = v406;
                                                    goto LABEL_888;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else if (!*(void *)__src)
                                      {
                                        goto LABEL_1112;
                                      }
                                    }
                                    __s1 = 0;
                                    uint64_t v1232 = 0;
                                    uint64_t v1233 = 0;
                                    __p[0] = &__s1;
                                    *(void *)&long long v1213 = &v1232;
                                    if (sub_1CC9E8D20((uint64_t)__p, v404)
                                      && v1233
                                      && (v1233 == 1
                                       || !memcmp((const void *)(v1232 + 4), (const void *)v1232, 4 * v1233 - 4)))
                                    {
                                      uint64_t v705 = *(void *)(*(void *)v404 + 24);
                                      if (llvm::APInt::isSplat((llvm::APInt *)__src, *(_DWORD *)(v705 + 8) >> 8))
                                      {
                                        uint64_t v707 = *(unsigned int *)v1232;
                                        uint64_t v708 = **(void **)(*(void *)(a1 + 24) + 64);
                                        long long v709 = *(llvm::ConstantInt **)(v708 + 1960);
                                        unint64_t v710 = *(unsigned int *)(v708 + 1968);
                                        LODWORD(__p[1]) = v710 >> 8;
                                        if (v710 >> 8 > 0x40) {
                                          llvm::APInt::initSlowCase((llvm::APInt *)__p);
                                        }
                                        if (v710 <= 0xFF) {
                                          unint64_t v711 = 0;
                                        }
                                        else {
                                          unint64_t v711 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v710);
                                        }
                                        __p[0] = (void *)(v711 & v707);
                                        int v712 = (unsigned __int8 *)llvm::ConstantInt::get(v709, (llvm::LLVMContext *)__p, v706);
                                        if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                                          MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                                        }
                                        uint64_t v713 = *(void *)(a1 + 24);
                                        LOWORD(v1214) = 257;
                                        int v190 = (unsigned __int8 *)sub_1CB8445F4(v713, (unsigned __int8 *)__s1, v712, (uint64_t)__p);
                                        v715 = (uint64_t *)__src;
                                        unsigned int v716 = *(_DWORD *)(v705 + 8);
                                        unsigned int v717 = *(_DWORD *)(__src + 8);
                                        if (v716 >> 8 > 0x40)
                                        {
                                          if (v717 != *(_DWORD *)(v705 + 8) >> 8) {
                                            operator new[]();
                                          }
                                          sub_1CD0463BC((uint64_t)__p, __src);
                                        }
                                        else
                                        {
                                          if (v717 >= 0x41) {
                                            v715 = *(uint64_t **)__src;
                                          }
                                          uint64_t v718 = *v715;
                                          LODWORD(__p[1]) = *(_DWORD *)(v705 + 8) >> 8;
                                          unint64_t v719 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v716);
                                          if (v716 <= 0xFF) {
                                            unint64_t v719 = 0;
                                          }
                                          __p[0] = (void *)(v719 & v718);
                                        }
                                        uint64_t Splat = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)v705, (llvm::LLVMContext *)__p, v714);
                                        if ((*(_DWORD *)(v705 + 8) & 0xFE) == 0x12) {
                                          uint64_t Splat = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v705 + 32) | ((unint64_t)(*(_DWORD *)(v705 + 8) == 19) << 32)), Splat);
                                        }
                                        if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                                          MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                                        }
                                        uint64_t v720 = operator new(0x80uLL);
                                        uint64_t v38 = (llvm::Value *)(v720 + 16);
                                        v720[21] = v720[21] & 0x38000000 | 2;
                                        *(void *)uint64_t v720 = 0;
                                        *((void *)v720 + 1) = 0;
                                        *((void *)v720 + 2) = 0;
                                        *((void *)v720 + 3) = v720 + 16;
                                        *((void *)v720 + 4) = 0;
                                        *((void *)v720 + 5) = 0;
                                        *((void *)v720 + 6) = 0;
                                        *((void *)v720 + 7) = v720 + 16;
                                        goto LABEL_884;
                                      }
                                    }
                                    uint64_t v402 = v1204;
LABEL_1119:
                                    unint64_t v12 = (unint64_t)v1206;
                                    uint64_t v628 = (uint64_t)sub_1CC9D1AA8(a1, (unsigned char *)*v1206);
                                    int v629 = sub_1CC9D1AA8(a1, (unsigned char *)*v402);
                                    if (v628 | (unint64_t)v629)
                                    {
                                      BOOL v630 = (unsigned __int8 *)v629;
                                      unsigned int v631 = operator new(0x80uLL);
                                      v631[21] = v631[21] & 0x38000000 | 2;
                                      uint64_t v38 = (llvm::Value *)(v631 + 16);
                                      *(void *)unsigned int v631 = 0;
                                      *((void *)v631 + 1) = 0;
                                      *((void *)v631 + 2) = 0;
                                      *((void *)v631 + 3) = v631 + 16;
                                      *((void *)v631 + 4) = 0;
                                      *((void *)v631 + 5) = 0;
                                      *((void *)v631 + 6) = 0;
                                      *((void *)v631 + 7) = v631 + 16;
                                      if (!v628) {
                                        uint64_t v628 = *v1206;
                                      }
                                      __int16 v632 = *((_WORD *)v4 + 9) & 0x3F;
                                      if (!v630) {
                                        BOOL v630 = (unsigned __int8 *)*v402;
                                      }
                                      goto LABEL_1124;
                                    }
                                    uint64_t v635 = *v1206;
                                    if (!*v1206) {
                                      goto LABEL_1334;
                                    }
                                    unsigned int v636 = *(unsigned __int8 *)(v635 + 16);
                                    if (v636 < 0x1C || v636 - 79 < 0xFFFFFFF3) {
                                      goto LABEL_1334;
                                    }
                                    uint64_t v638 = *v1204;
                                    unsigned int v639 = *(unsigned __int8 *)(*v1204 + 16);
                                    if (v639 >= 0x15 && (v639 < 0x1C || v639 - 66 > 0xC)) {
                                      goto LABEL_1334;
                                    }
                                    if (v636 != 75) {
                                      goto LABEL_1170;
                                    }
                                    uint64_t v628 = *(void *)(v635 - 32);
                                    uint64_t v640 = *(void *)v628;
                                    uint64_t v641 = *(void *)v635;
                                    int v642 = *(_DWORD *)(*(void *)v628 + 8);
                                    if ((v642 & 0xFE) == 0x12)
                                    {
                                      uint64_t v643 = *(void *)(v640 + 24);
                                      uint64_t v641 = *(void *)(v641 + 24);
                                      unsigned int v644 = *(_DWORD *)(v643 + 8);
                                    }
                                    else
                                    {
                                      unsigned int v644 = *(_DWORD *)(*(void *)v628 + 8);
                                      uint64_t v643 = *(void *)v628;
                                    }
                                    uint64_t v645 = *(void *)(a1 + 80);
                                    if ((v644 & 0xFE) == 0x12) {
                                      unsigned int v644 = *(_DWORD *)(**(void **)(v643 + 16) + 8);
                                    }
                                    uint64_t v646 = *(void *)(v645 + 232);
                                    if (v644 < 0x100) {
                                      goto LABEL_1151;
                                    }
                                    unsigned int v647 = v644 >> 8;
                                    unint64_t v648 = *(unsigned int *)(v645 + 240);
                                    uint64_t v649 = v646;
                                    if (v648)
                                    {
                                      uint64_t v649 = v646;
                                      unint64_t v650 = v648;
                                      do
                                      {
                                        unint64_t v651 = v650 >> 1;
                                        uint64_t v652 = v649 + 16 * (v650 >> 1);
                                        unsigned int v653 = *(_DWORD *)(v652 + 8);
                                        uint64_t v654 = v652 + 16;
                                        v650 += ~(v650 >> 1);
                                        if (v653 < v647) {
                                          uint64_t v649 = v654;
                                        }
                                        else {
                                          unint64_t v650 = v651;
                                        }
                                      }
                                      while (v650);
                                    }
                                    if (v649 == v646 + 16 * v648 || *(_DWORD *)(v649 + 8) != v647) {
LABEL_1151:
                                    }
                                      uint64_t v649 = v646;
                                    if (*(_DWORD *)(v649 + 4) != *(_DWORD *)(v641 + 8) >> 8) {
                                      goto LABEL_1170;
                                    }
                                    if (v639 != 75)
                                    {
                                      if (v639 == 5)
                                      {
                                        if (*(_WORD *)(v638 + 18) == 47) {
                                          goto LABEL_1156;
                                        }
                                      }
                                      else if (v639 > 0x14)
                                      {
                                        goto LABEL_1170;
                                      }
                                      BOOL v630 = (unsigned __int8 *)sub_1CC56C0C0((llvm *)0x30, (llvm::detail::IEEEFloat *)*v1204, *(llvm::Constant **)v628, 0);
                                      goto LABEL_1160;
                                    }
LABEL_1156:
                                    int v655 = *(_DWORD *)(v638 + 20);
                                    if ((v655 & 0x40000000) != 0) {
                                      int v656 = *(uint64_t ***)(v638 - 8);
                                    }
                                    else {
                                      int v656 = (uint64_t **)(v638 - 32 * (v655 & 0x7FFFFFF));
                                    }
                                    uint64_t v657 = **v656;
                                    unsigned int v658 = *(_DWORD *)(v657 + 8);
                                    if ((v658 & 0xFE) == 0x12) {
                                      unsigned int v658 = *(_DWORD *)(**(void **)(v657 + 16) + 8);
                                    }
                                    if ((v642 & 0xFE) == 0x12) {
                                      int v642 = *(_DWORD *)(**(void **)(v640 + 16) + 8);
                                    }
                                    if ((v642 ^ v658) <= 0xFF)
                                    {
                                      if ((v655 & 0x40000000) != 0) {
                                        int v659 = *(unsigned __int8 ***)(v638 - 8);
                                      }
                                      else {
                                        int v659 = (unsigned __int8 **)(v638 - 32 * (v655 & 0x7FFFFFF));
                                      }
                                      BOOL v630 = *v659;
                                      if (v640 == *(void *)*v659) {
                                        goto LABEL_1187;
                                      }
                                      uint64_t v673 = *(void *)(a1 + 24);
                                      __int16 v1236 = 257;
                                      if (v630[16] <= 0x14u)
                                      {
                                        BOOL v630 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(v673 + 72) + 224))(*(void *)(v673 + 72), 49, v630, v640);
                                        if (v630) {
                                          BOOL v691 = v630[16] >= 0x1Cu;
                                        }
                                        else {
                                          BOOL v691 = 0;
                                        }
                                        if (v691)
                                        {
                                          (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v673 + 80) + 16))(*(void *)(v673 + 80), v630, &v1232, *(void *)(v673 + 48), *(void *)(v673 + 56));
                                          uint64_t v692 = *(unsigned int *)(v673 + 8);
                                          if (v692)
                                          {
                                            unint64_t v12 = *(void *)v673;
                                            uint64_t v693 = *(void *)v673 + 16 * v692;
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v630, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
                                              v12 += 16;
                                            }
                                            while (v12 != v693);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        LOWORD(v1214) = 257;
                                        BOOL v630 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v630, v640, (const char **)__p, 0);
                                        (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v673 + 80) + 16))(*(void *)(v673 + 80), v630, &v1232, *(void *)(v673 + 48), *(void *)(v673 + 56));
                                        uint64_t v674 = *(unsigned int *)(v673 + 8);
                                        if (v674)
                                        {
                                          unint64_t v12 = *(void *)v673;
                                          uint64_t v675 = *(void *)v673 + 16 * v674;
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v630, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
                                            v12 += 16;
                                          }
                                          while (v12 != v675);
                                        }
                                      }
LABEL_1160:
                                      if (!v630)
                                      {
                                        uint64_t v638 = *v1204;
                                        uint64_t v635 = *v1206;
                                        goto LABEL_1170;
                                      }
LABEL_1187:
                                      int v676 = operator new(0x80uLL);
                                      uint64_t v38 = (llvm::Value *)(v676 + 16);
                                      v676[21] = v676[21] & 0x38000000 | 2;
                                      *(void *)int v676 = 0;
                                      *((void *)v676 + 1) = 0;
                                      *((void *)v676 + 2) = 0;
                                      *((void *)v676 + 3) = v676 + 16;
                                      *((void *)v676 + 4) = 0;
                                      *((void *)v676 + 5) = 0;
                                      *((void *)v676 + 6) = 0;
                                      *((void *)v676 + 7) = v676 + 16;
                                      __int16 v632 = *((_WORD *)v4 + 9) & 0x3F;
LABEL_1124:
                                      LOWORD(v1214) = 257;
                                      int64_t v633 = *(llvm::Constant **)v628;
                                      uint64_t v634 = ***(void ***)v628 + 1888;
                                      if (*(void *)v628 && (*((_DWORD *)v633 + 2) & 0xFE) == 0x12)
                                      {
                                        unint64_t v702 = (uint64_t **)(***(void ***)v628 + 1888);
                                        int v703 = (llvm::Type *)*((unsigned int *)v633 + 8);
                                        if (*((_DWORD *)v633 + 2) == 19) {
                                          llvm::ScalableVectorType::get(v702, v703);
                                        }
                                        else {
                                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v702, v703);
                                        }
                                        uint64_t v634 = v704;
                                      }
                                      llvm::CmpInst::CmpInst(v38, v634, 53, v632, v628, (uint64_t)v630, (const char **)__p, 0, 0);
                                      return v38;
                                    }
LABEL_1170:
                                    uint64_t v10 = *(void *)(a1 + 24);
                                    int v1231 = *((_WORD *)v4 + 9) & 0x3F;
                                    v1229 = 0;
                                    v1230 = 0;
                                    uint64_t v1232 = (uint64_t)&v1230;
                                    uint64_t v660 = *(void *)(v635 + 8);
                                    if (!v660) {
                                      goto LABEL_1299;
                                    }
                                    if (*(void *)(v660 + 8)) {
                                      goto LABEL_1299;
                                    }
                                    if (!sub_1CBC5BF18((void **)&v1232, v635)) {
                                      goto LABEL_1299;
                                    }
                                    __p[0] = &v1229;
                                    __p[1] = 0;
                                    if ((sub_1CBF528D8((uint64_t)__p, (unsigned __int8 *)v638) & 1) == 0) {
                                      goto LABEL_1299;
                                    }
                                    LODWORD(v1233) = 1;
                                    uint64_t v1232 = 0;
                                    int v661 = llvm::decomposeBitTestICmp(v635, (unsigned __int8 *)v638, &v1231, (uint64_t *)&v1230, (int8x8_t ***)&v1232, 1);
                                    v663 = v1230;
                                    if (v661)
                                    {
                                      LOWORD(v1214) = 257;
                                      unint64_t v12 = *(void *)v1230;
                                      v664 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v1230, (llvm::LLVMContext *)&v1232, v662);
                                      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
                                        v664 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v12 + 32) | ((unint64_t)(*(_DWORD *)(v12 + 8) == 19) << 32)), (uint64_t)v664);
                                      }
                                      uint64_t v665 = sub_1CBF52474(v10, v663, (uint64_t)v664, (uint64_t)__p);
                                      uint64_t v668 = llvm::Constant::getNullValue(*(llvm::Constant **)v1230, v666, v667);
                                      uint64_t v669 = operator new(0x80uLL);
                                      uint64_t v38 = (llvm::Value *)(v669 + 16);
                                      v669[21] = v669[21] & 0x38000000 | 2;
                                      *(void *)uint64_t v669 = 0;
                                      *((void *)v669 + 1) = 0;
                                      *((void *)v669 + 2) = 0;
                                      *((void *)v669 + 3) = v669 + 16;
                                      *((void *)v669 + 4) = 0;
                                      *((void *)v669 + 5) = 0;
                                      *((void *)v669 + 6) = 0;
                                      *((void *)v669 + 7) = v669 + 16;
                                      __int16 v670 = v1231;
                                      LOWORD(v1214) = 257;
                                      uint64_t v671 = *(void ***)v665;
                                      uint64_t v672 = ***(void ***)v665 + 1888;
                                      if (*(void *)v665 && (v671[1] & 0xFE) == 0x12)
                                      {
                                        uint64_t v1021 = (uint64_t **)(***(void ***)v665 + 1888);
                                        unint64_t v1022 = (llvm::Type *)*((unsigned int *)v671 + 8);
                                        if (*((_DWORD *)v671 + 2) == 19) {
                                          llvm::ScalableVectorType::get(v1021, v1022);
                                        }
                                        else {
                                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v1021, v1022);
                                        }
                                        uint64_t v672 = v1023;
                                      }
                                      llvm::CmpInst::CmpInst(v38, v672, 53, v670, (uint64_t)v665, (uint64_t)v668, (const char **)__p, 0, 0);
LABEL_1295:
                                      if (v1233 >= 0x41 && v1232) {
                                        MEMORY[0x1D25D9CB0](v1232, 0x1000C8000313F17);
                                      }
                                      if (v38) {
                                        return v38;
                                      }
LABEL_1299:
                                      uint64_t v740 = *v1206;
                                      if (!*v1206) {
                                        goto LABEL_1334;
                                      }
                                      v741 = *(uint64_t **)(a1 + 24);
                                      unsigned int v742 = *(unsigned __int8 *)(v740 + 16);
                                      unsigned int v743 = v742 - 28;
                                      unsigned int v744 = v742 - 28;
                                      if (v742 <= 0x1B) {
                                        unsigned int v744 = *(unsigned __int16 *)(v740 + 18);
                                      }
                                      if (v744 != 39
                                        || ((int v745 = *(_DWORD *)(v740 + 20), (v745 & 0x40000000) != 0)
                                          ? (v746 = *(unint64_t **)(v740 - 8))
                                          : (v746 = (unint64_t *)(v740 - 32 * (v745 & 0x7FFFFFF))),
                                            (unint64_t v12 = *v746) == 0))
                                      {
                                        if (v742 <= 0x1B) {
                                          unsigned int v743 = *(unsigned __int16 *)(v740 + 18);
                                        }
                                        if (v743 != 40) {
                                          goto LABEL_1334;
                                        }
                                        int v747 = *(_DWORD *)(v740 + 20);
                                        uint64_t v748 = (v747 & 0x40000000) != 0
                                             ? *(unint64_t **)(v740 - 8)
                                             : (unint64_t *)(v740 - 32 * (v747 & 0x7FFFFFF));
                                        unint64_t v12 = *v748;
                                        if (!*v748) {
                                          goto LABEL_1334;
                                        }
                                      }
                                      unsigned int v1202 = (*((_WORD *)v4 + 9) & 0x3E) - 38;
                                      uint64_t v749 = (uint64_t)*(v4 - 4);
                                      unsigned int v750 = *(unsigned __int8 *)(v749 + 16);
                                      if (v749)
                                      {
                                        unsigned int v1198 = v750 - 28;
                                        if (v750 >= 0x1C && v750 - 79 >= 0xFFFFFFF3)
                                        {
                                          if (v742 == v750)
                                          {
                                            uint64_t v751 = *(void *)v12;
                                            v1195 = *(unsigned __int8 **)(v749 - 32);
                                            uint64_t v752 = *(void *)v1195;
                                            if (*(void *)v12 == *(void *)v1195) {
                                              goto LABEL_1519;
                                            }
                                            if ((uint64_t v753 = *(void *)(v740 + 8)) != 0 && !*(void *)(v753 + 8)
                                              || (uint64_t v754 = *(void *)(v749 + 8)) != 0 && !*(void *)(v754 + 8))
                                            {
                                              v755 = *(llvm::Type **)v12;
                                              if ((*(_DWORD *)(v751 + 8) & 0xFE) == 0x12) {
                                                v755 = **(llvm::Type ***)(v751 + 16);
                                              }
                                              unsigned int v756 = llvm::Type::getPrimitiveSizeInBits(v755);
                                              v757 = (llvm::Type *)v752;
                                              if ((*(_DWORD *)(v752 + 8) & 0xFE) == 0x12) {
                                                v757 = **(llvm::Type ***)(v752 + 16);
                                              }
                                              unsigned int v758 = llvm::Type::getPrimitiveSizeInBits(v757);
                                              if (v756 < v758)
                                              {
                                                __int16 v1236 = 257;
                                                if (*(unsigned __int8 *)(v12 + 16) <= 0x14u)
                                                {
                                                  uint64_t v829 = (*(uint64_t (**)(uint64_t, void, unint64_t, uint64_t))(*(void *)v741[9] + 224))(v741[9], v1198, v12, v752);
                                                  unint64_t v12 = v829;
                                                  if (v829)
                                                  {
                                                    if (*(unsigned __int8 *)(v829 + 16) >= 0x1Cu)
                                                    {
                                                      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v741[10] + 16))(v741[10], v829, &v1232, v741[6], v741[7]);
                                                      uint64_t v830 = *((unsigned int *)v741 + 2);
                                                      if (v830)
                                                      {
                                                        uint64_t v831 = *v741;
                                                        uint64_t v832 = *v741 + 16 * v830;
                                                        do
                                                        {
                                                          llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v831, *(llvm::MDNode **)(v831 + 8));
                                                          v831 += 16;
                                                        }
                                                        while (v831 != v832);
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  LOWORD(v1214) = 257;
                                                  unint64_t v12 = (unint64_t)llvm::CastInst::Create(v1198, v12, v752, (const char **)__p, 0);
                                                  (*(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v741[10] + 16))(v741[10], v12, &v1232, v741[6], v741[7]);
                                                  uint64_t v759 = *((unsigned int *)v741 + 2);
                                                  if (v759)
                                                  {
                                                    uint64_t v760 = *v741;
                                                    uint64_t v761 = *v741 + 16 * v759;
                                                    do
                                                    {
                                                      llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v760, *(llvm::MDNode **)(v760 + 8));
                                                      v760 += 16;
                                                    }
                                                    while (v760 != v761);
                                                  }
                                                }
                                                goto LABEL_1519;
                                              }
                                              if (v758 < v756)
                                              {
                                                __int16 v1236 = 257;
                                                if (v1195[16] <= 0x14u)
                                                {
                                                  v1195 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void, unsigned __int8 *, uint64_t))(*(void *)v741[9] + 224))(v741[9], v1198, v1195, v751);
                                                  if (v1195)
                                                  {
                                                    if (v1195[16] >= 0x1Cu)
                                                    {
                                                      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v741[10] + 16))(v741[10], v1195, &v1232, v741[6], v741[7]);
                                                      uint64_t v1124 = *((unsigned int *)v741 + 2);
                                                      if (v1124)
                                                      {
                                                        uint64_t v1125 = *v741;
                                                        uint64_t v1126 = *v741 + 16 * v1124;
                                                        do
                                                        {
                                                          llvm::Instruction::setMetadata((llvm::Instruction *)v1195, *(_DWORD *)v1125, *(llvm::MDNode **)(v1125 + 8));
                                                          v1125 += 16;
                                                        }
                                                        while (v1125 != v1126);
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  LOWORD(v1214) = 257;
                                                  v1195 = (unsigned __int8 *)llvm::CastInst::Create(v1198, (uint64_t)v1195, v751, (const char **)__p, 0);
                                                  (*(void (**)(uint64_t))(*(void *)v741[10] + 16))(v741[10]);
                                                  uint64_t v824 = *((unsigned int *)v741 + 2);
                                                  if (v824)
                                                  {
                                                    uint64_t v825 = *v741;
                                                    uint64_t v826 = *v741 + 16 * v824;
                                                    do
                                                    {
                                                      llvm::Instruction::setMetadata((llvm::Instruction *)v1195, *(_DWORD *)v825, *(llvm::MDNode **)(v825 + 8));
                                                      v825 += 16;
                                                    }
                                                    while (v825 != v826);
                                                  }
                                                }
LABEL_1519:
                                                if ((*((_WORD *)v4 + 9) & 0x3E) == 0x20)
                                                {
                                                  int64_t v837 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v837 + 16);
                                                  v837[21] = v837[21] & 0x38000000 | 2;
                                                  *(void *)int64_t v837 = 0;
                                                  *((void *)v837 + 1) = 0;
                                                  *((void *)v837 + 2) = 0;
                                                  *((void *)v837 + 3) = v837 + 16;
                                                  *((void *)v837 + 4) = 0;
                                                  *((void *)v837 + 5) = 0;
                                                  *((void *)v837 + 6) = 0;
                                                  *((void *)v837 + 7) = v837 + 16;
                                                  LOWORD(v4) = *((_WORD *)v4 + 9) & 0x3F;
                                                }
                                                else
                                                {
                                                  v838 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v838 + 16);
                                                  v838[21] = v838[21] & 0x38000000 | 2;
                                                  *(void *)v838 = 0;
                                                  *((void *)v838 + 1) = 0;
                                                  *((void *)v838 + 2) = 0;
                                                  *((void *)v838 + 3) = v838 + 16;
                                                  *((void *)v838 + 4) = 0;
                                                  *((void *)v838 + 5) = 0;
                                                  *((void *)v838 + 6) = 0;
                                                  *((void *)v838 + 7) = v838 + 16;
                                                  __int16 v4 = (uint64_t ***)(*((_WORD *)v4 + 9) & 0x3FLL);
                                                  if (v742 == 68 && v1202 <= 3)
                                                  {
                                                    LOWORD(v1214) = 257;
                                                    uint64_t v839 = *(void *)v12;
                                                    uint64_t v72 = ***(void ***)v12 + 1888;
                                                    if (*(void *)v12 && (*(_DWORD *)(v839 + 8) & 0xFE) == 0x12)
                                                    {
                                                      int v1050 = (uint64_t **)(***(void ***)v12 + 1888);
                                                      v1051 = (llvm::Type *)*(unsigned int *)(v839 + 32);
                                                      if (*(_DWORD *)(v839 + 8) == 19) {
                                                        llvm::ScalableVectorType::get(v1050, v1051);
                                                      }
                                                      else {
                                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v1050, v1051);
                                                      }
                                                      uint64_t v72 = v1052;
                                                    }
                                                    int v73 = v38;
                                                    __int16 v74 = (__int16)v4;
                                                    goto LABEL_1530;
                                                  }
                                                  LODWORD(v4) = dword_1CFB278C8[(void)v4 - 32];
                                                }
                                                LOWORD(v1214) = 257;
                                                uint64_t v840 = *(void *)v12;
                                                uint64_t v72 = ***(void ***)v12 + 1888;
                                                if (*(void *)v12 && (*(_DWORD *)(v840 + 8) & 0xFE) == 0x12)
                                                {
                                                  v1007 = (uint64_t **)(***(void ***)v12 + 1888);
                                                  v1008 = (llvm::Type *)*(unsigned int *)(v840 + 32);
                                                  if (*(_DWORD *)(v840 + 8) == 19) {
                                                    llvm::ScalableVectorType::get(v1007, v1008);
                                                  }
                                                  else {
                                                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v1007, v1008);
                                                  }
                                                  uint64_t v72 = v1009;
                                                }
                                                int v73 = v38;
                                                __int16 v74 = (__int16)v4;
LABEL_1530:
                                                uint64_t v75 = v12;
                                                uint64_t v76 = (uint64_t)v1195;
                                                goto LABEL_264;
                                              }
                                            }
                                          }
LABEL_1334:
                                          uint64_t v10 = *((_WORD *)v4 + 9) & 0x3F;
                                          uint64_t v16 = (uint64_t)*(v4 - 8);
                                          uint64_t v2 = (uint64_t)*(v4 - 4);
                                          int v762 = *(unsigned __int8 *)(v2 + 16);
                                          if (v762 != 85)
                                          {
                                            if (v762 != 84) {
                                              goto LABEL_1418;
                                            }
                                            uint64_t v763 = *(void *)(v2 - 32);
                                            if (!v763) {
                                              goto LABEL_1418;
                                            }
                                            if (*(unsigned char *)(v763 + 16)
                                              || *(void *)(v763 + 24) != *(void *)(v2 + 72)
                                              || (*(unsigned char *)(v763 + 33) & 0x20) == 0
                                              || *(_DWORD *)(v763 + 36) != 275
                                              || (uint64_t v764 = (void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)),
                                                  *v764 != v16)
                                              && v764[4] != v16)
                                            {
                                              if (*(unsigned char *)(v763 + 16)
                                                || *(void *)(v763 + 24) != *(void *)(v2 + 72)
                                                || (*(unsigned char *)(v763 + 33) & 0x20) == 0
                                                || *(_DWORD *)(v763 + 36) != 274
                                                || (v765 = (void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)),
                                                    *v765 != v16)
                                                && v765[4] != v16)
                                              {
                                                if (*(unsigned char *)(v763 + 16)
                                                  || *(void *)(v763 + 24) != *(void *)(v2 + 72)
                                                  || (*(unsigned char *)(v763 + 33) & 0x20) == 0
                                                  || *(_DWORD *)(v763 + 36) != 306
                                                  || (v766 = (void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)),
                                                      *v766 != v16)
                                                  && v766[4] != v16)
                                                {
                                                  int v3 = v1204;
                                                  uint64_t v767 = v1206;
                                                  if (*(unsigned char *)(v763 + 16)
                                                    || *(void *)(v763 + 24) != *(void *)(v2 + 72))
                                                  {
                                                    v768 = *(v4 - 4);
                                                    uint64_t v2 = (uint64_t)*(v4 - 8);
                                                    goto LABEL_1419;
                                                  }
                                                  if ((*(unsigned char *)(v763 + 33) & 0x20) == 0) {
                                                    goto LABEL_1418;
                                                  }
                                                  if (*(_DWORD *)(v763 + 36) != 305) {
                                                    goto LABEL_1418;
                                                  }
                                                  v800 = (void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
                                                  if (*v800 != v16 && v800[4] != v16) {
                                                    goto LABEL_1418;
                                                  }
                                                }
                                              }
                                            }
LABEL_1446:
                                            v768 = *(v4 - 8);
                                            int v3 = v1204;
                                            uint64_t v767 = v1206;
                                            switch(*((_WORD *)v4 + 9) & 0x3F)
                                            {
                                              case 2:
                                                LODWORD(v10) = 4;
                                                break;
                                              case 3:
                                                LODWORD(v10) = 5;
                                                break;
                                              case 4:
                                                LODWORD(v10) = 2;
                                                break;
                                              case 5:
                                                LODWORD(v10) = 3;
                                                break;
                                              case 0xA:
                                                LODWORD(v10) = 12;
                                                break;
                                              case 0xB:
                                                LODWORD(v10) = 13;
                                                break;
                                              case 0xC:
                                                LODWORD(v10) = 10;
                                                break;
                                              case 0xD:
                                                LODWORD(v10) = 11;
                                                break;
                                              case 0x10:
                                              case 0x11:
                                              case 0x12:
                                              case 0x13:
                                              case 0x14:
                                              case 0x15:
                                              case 0x16:
                                              case 0x17:
                                              case 0x18:
                                              case 0x19:
                                              case 0x1A:
                                              case 0x1B:
                                              case 0x1C:
                                              case 0x1D:
                                              case 0x1E:
                                              case 0x1F:
                                                goto LABEL_2010;
                                              case 0x22:
                                                LODWORD(v10) = 36;
                                                break;
                                              case 0x23:
                                                LODWORD(v10) = 37;
                                                break;
                                              case 0x24:
                                                LODWORD(v10) = 34;
                                                break;
                                              case 0x25:
                                                LODWORD(v10) = 35;
                                                break;
                                              case 0x26:
                                                LODWORD(v10) = 40;
                                                break;
                                              case 0x27:
                                                LODWORD(v10) = 41;
                                                break;
                                              case 0x28:
                                                LODWORD(v10) = 38;
                                                break;
                                              case 0x29:
                                                LODWORD(v10) = 39;
                                                break;
                                              default:
                                                goto LABEL_1419;
                                            }
                                            v768 = *(v4 - 8);
LABEL_1419:
                                            uint64_t v1232 = 0;
                                            __p[0] = v768;
                                            __p[1] = &v1232;
                                            if (sub_1CC9FAC1C((uint64_t)__p, v2))
                                            {
                                              switch((int)v10)
                                              {
                                                case ' ':
                                                case '\'':
                                                  v801 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v801 + 16);
                                                  v801[21] = v801[21] & 0x38000000 | 2;
                                                  *(void *)v801 = 0;
                                                  *((void *)v801 + 1) = 0;
                                                  *((void *)v801 + 2) = 0;
                                                  *((void *)v801 + 3) = v801 + 16;
                                                  *((void *)v801 + 4) = 0;
                                                  *((void *)v801 + 5) = 0;
                                                  *((void *)v801 + 6) = 0;
                                                  *((void *)v801 + 7) = v801 + 16;
                                                  uint64_t v153 = v1232;
                                                  LOWORD(v1214) = 257;
                                                  uint64_t v802 = (void **)*v768;
                                                  uint64_t v72 = **(void **)*v768 + 1888;
                                                  if (*v768 && (v802[1] & 0xFE) == 0x12)
                                                  {
                                                    int v841 = (uint64_t **)(**(void **)*v768 + 1888);
                                                    int64_t v842 = (llvm::Type *)*((unsigned int *)v802 + 8);
                                                    if (*((_DWORD *)v802 + 2) == 19) {
                                                      llvm::ScalableVectorType::get(v841, v842);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v841, v842);
                                                    }
                                                    uint64_t v72 = v843;
                                                  }
                                                  int v73 = v38;
                                                  __int16 v74 = 41;
                                                  goto LABEL_1451;
                                                case '!':
                                                case '(':
                                                  v807 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v807 + 16);
                                                  v807[21] = v807[21] & 0x38000000 | 2;
                                                  *(void *)v807 = 0;
                                                  *((void *)v807 + 1) = 0;
                                                  *((void *)v807 + 2) = 0;
                                                  *((void *)v807 + 3) = v807 + 16;
                                                  *((void *)v807 + 4) = 0;
                                                  *((void *)v807 + 5) = 0;
                                                  *((void *)v807 + 6) = 0;
                                                  *((void *)v807 + 7) = v807 + 16;
                                                  uint64_t v153 = v1232;
                                                  LOWORD(v1214) = 257;
                                                  uint64_t v808 = *v768;
                                                  uint64_t v72 = **(void **)*v768 + 1888;
                                                  if (*v768 && (*(_DWORD *)(v808 + 8) & 0xFE) == 0x12)
                                                  {
                                                    unint64_t v844 = (uint64_t **)(**(void **)*v768 + 1888);
                                                    int v845 = (llvm::Type *)*(unsigned int *)(v808 + 32);
                                                    if (*(_DWORD *)(v808 + 8) == 19) {
                                                      llvm::ScalableVectorType::get(v844, v845);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v844, v845);
                                                    }
                                                    uint64_t v72 = v846;
                                                  }
                                                  int v73 = v38;
                                                  __int16 v74 = 38;
                                                  goto LABEL_1451;
                                                default:
                                                  goto LABEL_1456;
                                              }
                                            }
                                            __p[0] = v768;
                                            __p[1] = &v1232;
                                            if (sub_1CC9FAAFC((uint64_t)__p, v2))
                                            {
                                              switch((int)v10)
                                              {
                                                case ' ':
                                                case ')':
                                                  v803 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v803 + 16);
                                                  v803[21] = v803[21] & 0x38000000 | 2;
                                                  *(void *)v803 = 0;
                                                  *((void *)v803 + 1) = 0;
                                                  *((void *)v803 + 2) = 0;
                                                  *((void *)v803 + 3) = v803 + 16;
                                                  *((void *)v803 + 4) = 0;
                                                  *((void *)v803 + 5) = 0;
                                                  *((void *)v803 + 6) = 0;
                                                  *((void *)v803 + 7) = v803 + 16;
                                                  uint64_t v153 = v1232;
                                                  LOWORD(v1214) = 257;
                                                  uint64_t v804 = *v768;
                                                  uint64_t v72 = **(void **)*v768 + 1888;
                                                  if (*v768 && (*(_DWORD *)(v804 + 8) & 0xFE) == 0x12)
                                                  {
                                                    __int16 v976 = (uint64_t **)(**(void **)*v768 + 1888);
                                                    v977 = (llvm::Type *)*(unsigned int *)(v804 + 32);
                                                    if (*(_DWORD *)(v804 + 8) == 19) {
                                                      llvm::ScalableVectorType::get(v976, v977);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v976, v977);
                                                    }
                                                    uint64_t v72 = v978;
                                                  }
                                                  int v73 = v38;
                                                  __int16 v74 = 39;
                                                  goto LABEL_1451;
                                                case '!':
                                                case '&':
                                                  uint64_t v811 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v811 + 16);
                                                  v811[21] = v811[21] & 0x38000000 | 2;
                                                  *(void *)uint64_t v811 = 0;
                                                  *((void *)v811 + 1) = 0;
                                                  *((void *)v811 + 2) = 0;
                                                  *((void *)v811 + 3) = v811 + 16;
                                                  *((void *)v811 + 4) = 0;
                                                  *((void *)v811 + 5) = 0;
                                                  *((void *)v811 + 6) = 0;
                                                  *((void *)v811 + 7) = v811 + 16;
                                                  uint64_t v153 = v1232;
                                                  LOWORD(v1214) = 257;
                                                  uint64_t v812 = *v768;
                                                  uint64_t v72 = **(void **)*v768 + 1888;
                                                  if (*v768 && (*(_DWORD *)(v812 + 8) & 0xFE) == 0x12)
                                                  {
                                                    int v979 = (uint64_t **)(**(void **)*v768 + 1888);
                                                    int v980 = (llvm::Type *)*(unsigned int *)(v812 + 32);
                                                    if (*(_DWORD *)(v812 + 8) == 19) {
                                                      llvm::ScalableVectorType::get(v979, v980);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v979, v980);
                                                    }
                                                    uint64_t v72 = v981;
                                                  }
                                                  int v73 = v38;
                                                  __int16 v74 = 40;
                                                  goto LABEL_1451;
                                                default:
                                                  goto LABEL_1456;
                                              }
                                            }
                                            __p[0] = v768;
                                            __p[1] = &v1232;
                                            if (sub_1CC9FAE5C((uint64_t)__p, v2))
                                            {
                                              switch((int)v10)
                                              {
                                                case ' ':
                                                case '#':
                                                  uint64_t v805 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v805 + 16);
                                                  v805[21] = v805[21] & 0x38000000 | 2;
                                                  *(void *)uint64_t v805 = 0;
                                                  *((void *)v805 + 1) = 0;
                                                  *((void *)v805 + 2) = 0;
                                                  *((void *)v805 + 3) = v805 + 16;
                                                  *((void *)v805 + 4) = 0;
                                                  *((void *)v805 + 5) = 0;
                                                  *((void *)v805 + 6) = 0;
                                                  *((void *)v805 + 7) = v805 + 16;
                                                  uint64_t v153 = v1232;
                                                  LOWORD(v1214) = 257;
                                                  uint64_t v806 = *v768;
                                                  uint64_t v72 = **(void **)*v768 + 1888;
                                                  if (*v768 && (*(_DWORD *)(v806 + 8) & 0xFE) == 0x12)
                                                  {
                                                    unint64_t v987 = (uint64_t **)(**(void **)*v768 + 1888);
                                                    v988 = (llvm::Type *)*(unsigned int *)(v806 + 32);
                                                    if (*(_DWORD *)(v806 + 8) == 19) {
                                                      llvm::ScalableVectorType::get(v987, v988);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v987, v988);
                                                    }
                                                    uint64_t v72 = v989;
                                                  }
                                                  int v73 = v38;
                                                  __int16 v74 = 37;
                                                  goto LABEL_1451;
                                                case '!':
                                                case '$':
                                                  v813 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v813 + 16);
                                                  v813[21] = v813[21] & 0x38000000 | 2;
                                                  *(void *)v813 = 0;
                                                  *((void *)v813 + 1) = 0;
                                                  *((void *)v813 + 2) = 0;
                                                  *((void *)v813 + 3) = v813 + 16;
                                                  *((void *)v813 + 4) = 0;
                                                  *((void *)v813 + 5) = 0;
                                                  *((void *)v813 + 6) = 0;
                                                  *((void *)v813 + 7) = v813 + 16;
                                                  uint64_t v153 = v1232;
                                                  LOWORD(v1214) = 257;
                                                  uint64_t v814 = *v768;
                                                  uint64_t v72 = **(void **)*v768 + 1888;
                                                  if (*v768 && (*(_DWORD *)(v814 + 8) & 0xFE) == 0x12)
                                                  {
                                                    v990 = (uint64_t **)(**(void **)*v768 + 1888);
                                                    uint64_t v991 = (llvm::Type *)*(unsigned int *)(v814 + 32);
                                                    if (*(_DWORD *)(v814 + 8) == 19) {
                                                      llvm::ScalableVectorType::get(v990, v991);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v990, v991);
                                                    }
                                                    uint64_t v72 = v992;
                                                  }
                                                  int v73 = v38;
                                                  __int16 v74 = 34;
                                                  goto LABEL_1451;
                                                default:
                                                  goto LABEL_1456;
                                              }
                                            }
                                            __p[0] = v768;
                                            __p[1] = &v1232;
                                            if (sub_1CC9FAD3C((uint64_t)__p, v2))
                                            {
                                              if (v10 == 37 || v10 == 32)
                                              {
                                                v809 = operator new(0x80uLL);
                                                uint64_t v38 = (llvm::Value *)(v809 + 16);
                                                v809[21] = v809[21] & 0x38000000 | 2;
                                                *(void *)v809 = 0;
                                                *((void *)v809 + 1) = 0;
                                                *((void *)v809 + 2) = 0;
                                                *((void *)v809 + 3) = v809 + 16;
                                                *((void *)v809 + 4) = 0;
                                                *((void *)v809 + 5) = 0;
                                                *((void *)v809 + 6) = 0;
                                                *((void *)v809 + 7) = v809 + 16;
                                                uint64_t v153 = v1232;
                                                LOWORD(v1214) = 257;
                                                uint64_t v810 = *v768;
                                                uint64_t v72 = **(void **)*v768 + 1888;
                                                if (*v768 && (*(_DWORD *)(v810 + 8) & 0xFE) == 0x12)
                                                {
                                                  v993 = (uint64_t **)(**(void **)*v768 + 1888);
                                                  int v994 = (llvm::Type *)*(unsigned int *)(v810 + 32);
                                                  if (*(_DWORD *)(v810 + 8) == 19) {
                                                    llvm::ScalableVectorType::get(v993, v994);
                                                  }
                                                  else {
                                                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v993, v994);
                                                  }
                                                  uint64_t v72 = v995;
                                                }
                                                int v73 = v38;
                                                __int16 v74 = 35;
LABEL_1451:
                                                uint64_t v75 = (uint64_t)v768;
                                                goto LABEL_263;
                                              }
                                              int v3 = v1204;
                                              uint64_t v767 = v1206;
                                              if ((v10 - 33) <= 1)
                                              {
                                                v815 = operator new(0x80uLL);
                                                uint64_t v38 = (llvm::Value *)(v815 + 16);
                                                v815[21] = v815[21] & 0x38000000 | 2;
                                                *(void *)v815 = 0;
                                                *((void *)v815 + 1) = 0;
                                                *((void *)v815 + 2) = 0;
                                                *((void *)v815 + 3) = v815 + 16;
                                                *((void *)v815 + 4) = 0;
                                                *((void *)v815 + 5) = 0;
                                                *((void *)v815 + 6) = 0;
                                                *((void *)v815 + 7) = v815 + 16;
                                                uint64_t v153 = v1232;
                                                LOWORD(v1214) = 257;
                                                uint64_t v816 = *v768;
                                                uint64_t v72 = **(void **)*v768 + 1888;
                                                if (*v768 && (*(_DWORD *)(v816 + 8) & 0xFE) == 0x12)
                                                {
                                                  v1024 = (uint64_t **)(**(void **)*v768 + 1888);
                                                  __int16 v1025 = (llvm::Type *)*(unsigned int *)(v816 + 32);
                                                  if (*(_DWORD *)(v816 + 8) == 19) {
                                                    llvm::ScalableVectorType::get(v1024, v1025);
                                                  }
                                                  else {
                                                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v1024, v1025);
                                                  }
                                                  uint64_t v72 = v1026;
                                                }
                                                int v73 = v38;
                                                __int16 v74 = 36;
                                                goto LABEL_1451;
                                              }
                                            }
LABEL_1456:
                                            v1224 = 0;
                                            uint64_t __src = 0;
                                            __p[0] = &v1224;
                                            __p[1] = &__src;
                                            int v817 = v8[16];
                                            if (v817 == 5)
                                            {
                                              if (*((_WORD *)v8 + 9) != 28) {
                                                goto LABEL_1548;
                                              }
                                              v818 = (llvm::ConstantExpr **)&v8[-32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                                              if (!*v818) {
                                                goto LABEL_1548;
                                              }
                                              v1224 = *v818;
                                              if (!sub_1CBF686A0((void **)&__p[1], 30, (uint64_t)v818[4]))goto LABEL_1548; {
                                            }
                                              }
                                            else
                                            {
                                              if (v817 != 56) {
                                                goto LABEL_1548;
                                              }
                                              if (!*((void *)v8 - 8)) {
                                                goto LABEL_1548;
                                              }
                                              v1224 = (llvm::ConstantExpr *)*((void *)v8 - 8);
                                              if ((sub_1CBF686A0((void **)&__p[1], 30, *((void *)v8 - 4)) & 1) == 0) {
                                                goto LABEL_1548;
                                              }
                                            }
                                            unsigned int v819 = *((unsigned __int8 *)v1205 + 16);
                                            if (v819 > 0x14)
                                            {
                                              int v3 = v1204;
                                              uint64_t v767 = v1206;
                                              goto LABEL_1548;
                                            }
                                            if (v819 == 16)
                                            {
                                              uint64_t v820 = *((unsigned int *)v1205 + 8);
                                              if (v820 < 0x41)
                                              {
                                                if (*((void *)v1205 + 3)) {
                                                  goto LABEL_1469;
                                                }
LABEL_1542:
                                                int v3 = v1204;
                                                uint64_t v767 = v1206;
LABEL_1543:
                                                if (llvm::isKnownToBeAPowerOfTwo(v1224, *(const llvm::Value **)(a1 + 80), 0, 0, *(void *)(a1 + 56), (llvm::AssumptionCache *)v4, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v1192)&& (*((_WORD *)v4 + 9) & 0x3E) == 0x20)
                                                {
                                                  int64_t v847 = operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v847 + 16);
                                                  v847[21] = v847[21] & 0x38000000 | 2;
                                                  *(void *)int64_t v847 = 0;
                                                  *((void *)v847 + 1) = 0;
                                                  *((void *)v847 + 2) = 0;
                                                  *((void *)v847 + 3) = v847 + 16;
                                                  *((void *)v847 + 4) = 0;
                                                  *((void *)v847 + 5) = 0;
                                                  int v848 = dword_1CFB278F0[*((_WORD *)v4 + 9) & 0x3F];
                                                  *((void *)v847 + 6) = 0;
                                                  *((void *)v847 + 7) = v847 + 16;
                                                  uint64_t v849 = *(void *)(a1 + 24);
                                                  LOWORD(v1214) = 257;
                                                  int v850 = sub_1CBF52474(v849, v1224, __src, (uint64_t)__p);
                                                  uint64_t v851 = (uint64_t)v850;
                                                  __int16 v1236 = 257;
                                                  int64_t v852 = *(void ***)v850;
                                                  uint64_t v853 = ***(void ***)v850 + 1888;
                                                  if (*(void *)v850 && (v852[1] & 0xFE) == 0x12)
                                                  {
                                                    v1053 = (uint64_t **)(***(void ***)v850 + 1888);
                                                    v1054 = (llvm::Type *)*((unsigned int *)v852 + 8);
                                                    if (*((_DWORD *)v852 + 2) == 19) {
                                                      llvm::ScalableVectorType::get(v1053, v1054);
                                                    }
                                                    else {
                                                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v1053, v1054);
                                                    }
                                                    uint64_t v853 = v1055;
                                                  }
                                                  llvm::CmpInst::CmpInst(v38, v853, 53, v848, v851, (uint64_t)v1205, (const char **)&v1232, 0, 0);
                                                  return v38;
                                                }
LABEL_1548:
                                                __p[0] = &v1224;
                                                if (sub_1CBF686A0((void **)__p, 30, (uint64_t)v8))
                                                {
                                                  __p[0] = &__src;
                                                  if (sub_1CBF686A0((void **)__p, 30, (uint64_t)v1205))
                                                  {
                                                    int v855 = operator new(0x80uLL);
                                                    uint64_t v38 = (llvm::Value *)(v855 + 16);
                                                    v855[21] = v855[21] & 0x38000000 | 2;
                                                    *(void *)int v855 = 0;
                                                    *((void *)v855 + 1) = 0;
                                                    *((void *)v855 + 2) = 0;
                                                    *((void *)v855 + 3) = v855 + 16;
                                                    *((void *)v855 + 4) = 0;
                                                    *((void *)v855 + 5) = 0;
                                                    *((void *)v855 + 6) = 0;
                                                    *((void *)v855 + 7) = v855 + 16;
                                                    __int16 v427 = *((_WORD *)v4 + 9) & 0x3F;
                                                    uint64_t v494 = (llvm::Constant **)__src;
                                                    uint64_t v495 = v1224;
                                                    goto LABEL_1551;
                                                  }
                                                  __s1 = 0;
                                                  __p[0] = &__s1;
                                                  __p[1] = 0;
                                                  if (sub_1CBF528D8((uint64_t)__p, (unsigned __int8 *)v1205))
                                                  {
                                                    v856 = operator new(0x80uLL);
                                                    uint64_t v38 = (llvm::Value *)(v856 + 16);
                                                    v856[21] = v856[21] & 0x38000000 | 2;
                                                    *(void *)v856 = 0;
                                                    *((void *)v856 + 1) = 0;
                                                    *((void *)v856 + 2) = 0;
                                                    *((void *)v856 + 3) = v856 + 16;
                                                    *((void *)v856 + 4) = 0;
                                                    *((void *)v856 + 5) = 0;
                                                    *((void *)v856 + 6) = 0;
                                                    *((void *)v856 + 7) = v856 + 16;
                                                    int v858 = dword_1CFB279AC[*((_WORD *)v4 + 9) & 0x3F];
                                                    v859 = v1224;
                                                    uint64_t v860 = *(void *)v1205;
                                                    unsigned int v861 = *((_DWORD *)__s1 + 2);
                                                    if (v861 > 0x40) {
                                                      operator new[]();
                                                    }
                                                    unint64_t v862 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v861;
                                                    if (!v861) {
                                                      unint64_t v862 = 0;
                                                    }
                                                    int8x8_t v863 = (int8x8_t)(v862 & ~*(void *)__s1);
                                                    LODWORD(v1233) = *((_DWORD *)__s1 + 2);
                                                    uint64_t v1232 = (uint64_t)v863;
                                                    uint64_t v871 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v860, (llvm::LLVMContext *)&v1232, v857);
                                                    unint64_t v872 = v871;
                                                    if ((*(_DWORD *)(v860 + 8) & 0xFE) == 0x12) {
                                                      unint64_t v872 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v860 + 32) | ((unint64_t)(*(_DWORD *)(v860 + 8) == 19) << 32)), (uint64_t)v871);
                                                    }
                                                    LOWORD(v1214) = 257;
                                                    unsigned int v873 = *(void ***)v859;
                                                    uint64_t v874 = ***(void ***)v859 + 1888;
                                                    if (*(void *)v859 && (v873[1] & 0xFE) == 0x12)
                                                    {
                                                      v997 = (uint64_t **)(***(void ***)v859 + 1888);
                                                      v998 = (llvm::Type *)*((unsigned int *)v873 + 8);
                                                      if (*((_DWORD *)v873 + 2) == 19) {
                                                        llvm::ScalableVectorType::get(v997, v998);
                                                      }
                                                      else {
                                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v997, v998);
                                                      }
                                                      uint64_t v874 = v999;
                                                    }
                                                    llvm::CmpInst::CmpInst(v38, v874, 53, v858, (uint64_t)v859, (uint64_t)v872, (const char **)__p, 0, 0);
                                                    if (v1233 >= 0x41 && v1232) {
                                                      MEMORY[0x1D25D9CB0](v1232, 0x1000C8000313F17);
                                                    }
                                                    return v38;
                                                  }
                                                  int v3 = v1204;
                                                  uint64_t v767 = v1206;
                                                }
                                                uint64_t v864 = *v767;
                                                if (!*v767 || (unsigned int v865 = (llvm::ConstantInt *)*v3) == 0)
                                                {
LABEL_1658:
                                                  __p[0] = &v1224;
                                                  __p[1] = &__src;
                                                  int v890 = v8[16];
                                                  if (v890 == 5)
                                                  {
                                                    if (*((_WORD *)v8 + 9) != 17
                                                      || !sub_1CBC5BE40((void **)__p, *(void *)&v8[-32* (*((_DWORD *)v8 + 5) & 0x7FFFFFF)])|| (sub_1CBC5BE40((void **)&__p[1], *(void *)&v8[-32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 32]) & 1) == 0)
                                                    {
                                                      goto LABEL_1668;
                                                    }
                                                  }
                                                  else if (v890 != 45 {
                                                         || !sub_1CBC5BE40((void **)__p, *((void *)v8 - 8))|| !sub_1CBC5BE40((void **)&__p[1], *((void *)v8 - 4)))
                                                  }
                                                  {
LABEL_1668:
                                                    int v891 = v1205;
                                                    goto LABEL_1669;
                                                  }
                                                  int v891 = v1205;
                                                  uint64_t v38 = sub_1CCA730CC((uint64_t)v4, (uint64_t)v8, (uint64_t)v1205, a1);
                                                  if (v38) {
                                                    return v38;
                                                  }
LABEL_1669:
                                                  __p[0] = &v1224;
                                                  __p[1] = &__src;
                                                  int v892 = *((unsigned __int8 *)v891 + 16);
                                                  if (v892 == 5)
                                                  {
                                                    if (*((_WORD *)v891 + 9) != 17
                                                      || !sub_1CBC5BE40((void **)__p, *((void *)v891- 4 * (*((_DWORD *)v891 + 5) & 0x7FFFFFF)))|| (sub_1CBC5BE40((void **)&__p[1], ((void *)v891 - 4 * (*((_DWORD *)v891 + 5) & 0x7FFFFFF))[4]) & 1) == 0)
                                                    {
                                                      goto LABEL_1678;
                                                    }
                                                  }
                                                  else if (v892 != 45 {
                                                         || !sub_1CBC5BE40((void **)__p, *((void *)v891 - 8))|| !sub_1CBC5BE40((void **)&__p[1], *((void *)v891 - 4)))
                                                  }
                                                  {
                                                    goto LABEL_1678;
                                                  }
                                                  uint64_t v38 = sub_1CCA730CC((uint64_t)v4, (uint64_t)v1205, (uint64_t)v8, a1);
                                                  if (v38) {
                                                    return v38;
                                                  }
LABEL_1678:
                                                  uint64_t v38 = (llvm::Value *)sub_1CCA64094(a1, v4, v854);
                                                  if (v38) {
                                                    return v38;
                                                  }
                                                  int v894 = *((_WORD *)v4 + 9) & 0x3F;
                                                  uint64_t v895 = (uint64_t)*(v4 - 8);
                                                  uint64_t v896 = (uint64_t)*(v4 - 4);
                                                  v1224 = 0;
                                                  uint64_t __src = 0;
                                                  LODWORD(__p[0]) = 301;
                                                  __p[1] = 0;
                                                  *(void *)&long long v1213 = &v1224;
                                                  *((void *)&v1213 + 1) = 1;
                                                  *(void *)&long long v1214 = &__src;
                                                  if (!v895
                                                    || *(unsigned char *)(v895 + 16) != 92
                                                    || *(_DWORD *)(v895 + 72) != 1
                                                    || **(_DWORD **)(v895 + 64)
                                                    || !sub_1CC9F99A8((uint64_t)__p, *(void *)(v895 - 32)))
                                                  {
                                                    goto LABEL_1700;
                                                  }
                                                  if (v894 == 32)
                                                  {
                                                    if (!sub_1CBF535C4((uint64_t)&v1232, (llvm::Constant *)v896)|| (sub_1CBF5250C((uint64_t)&__s1, v1224) & 1) == 0&& (sub_1CBF5250C((uint64_t)&v1230, (llvm::Constant *)__src) & 1) == 0)
                                                    {
                                                      goto LABEL_1700;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v894 != 33)
                                                    {
                                                      if (v894 == 36
                                                        && ((llvm::ConstantExpr *)v896 == v1224 || v896 == __src))
                                                      {
                                                        goto LABEL_1846;
                                                      }
LABEL_1700:
                                                      if (v896
                                                        && *(unsigned char *)(v896 + 16) == 92
                                                        && *(_DWORD *)(v896 + 72) == 1
                                                        && !**(_DWORD **)(v896 + 64)
                                                        && sub_1CC9F99A8((uint64_t)__p, *(void *)(v896 - 32))&& v894 == 34)
                                                      {
                                                        if ((llvm::ConstantExpr *)v895 == v1224)
                                                        {
                                                          uint64_t v895 = v896;
                                                          goto LABEL_1846;
                                                        }
                                                        BOOL v80 = v895 == __src;
                                                        uint64_t v895 = v896;
                                                        if (v80) {
                                                          goto LABEL_1846;
                                                        }
                                                      }
                                                      int v900 = v8[16];
                                                      if ((*((_WORD *)v4 + 9) & 0x3F) == 0x20 && v900 == 92)
                                                      {
                                                        v901 = (uint64_t *)*((void *)v8 - 4);
                                                        if (v901
                                                          && *((unsigned char *)v901 + 16) == 64
                                                          && !**((_DWORD **)v8 + 8)
                                                          && (llvm *)*(v901 - 8) == v1205
                                                          && (*((_WORD *)v901 + 9) & 2) == 0)
                                                        {
                                                          LODWORD(v1232) = 1;
                                                          LOWORD(v1214) = 257;
                                                          v902 = (char *)operator new(0x80uLL);
                                                          uint64_t v38 = (llvm::Value *)(v902 + 32);
                                                          *((_DWORD *)v902 + 13) = *((_DWORD *)v902 + 13) & 0x38000000 | 1;
                                                          *(void *)v902 = 0;
                                                          *((void *)v902 + 1) = 0;
                                                          *((void *)v902 + 2) = 0;
                                                          *((void *)v902 + 3) = v902 + 32;
                                                          uint64_t v903 = *v901;
                                                          int v904 = *(unsigned __int8 *)(*v901 + 8);
                                                          if (*v901 && v904 == 17)
                                                          {
                                                            if (*(void *)(v903 + 32) > (unint64_t)v1232)
                                                            {
                                                              v906 = (uint64_t *)(v903 + 24);
                                                              goto LABEL_1717;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            uint64_t v905 = 0;
                                                            if (!v903 || v904 != 16) {
                                                              goto LABEL_1718;
                                                            }
                                                            if (v1232 < *(_DWORD *)(v903 + 12))
                                                            {
                                                              v906 = (uint64_t *)(*(void *)(v903 + 16)
                                                                               + 8 * v1232);
LABEL_1717:
                                                              uint64_t v905 = *v906;
                                                              goto LABEL_1718;
                                                            }
                                                          }
                                                          uint64_t v905 = 0;
LABEL_1718:
                                                          *((void *)v902 + 4) = v905;
                                                          *((void *)v902 + 5) = 0;
                                                          *((void *)v902 + 6) = 0x10000005CLL;
                                                          *(_OWORD *)(v902 + 56) = 0u;
                                                          *(_OWORD *)(v902 + 72) = 0u;
                                                          *((_DWORD *)v902 + 22) = 0;
                                                          uint64_t v907 = v901 + 1;
                                                          uint64_t v908 = v901[1];
                                                          *(void *)v902 = v901;
                                                          *((void *)v902 + 1) = v908;
                                                          if (v908) {
                                                            *(void *)(v908 + 16) = v902 + 8;
                                                          }
                                                          *((void *)v902 + 2) = v907;
                                                          *uint64_t v907 = v902;
                                                          *((void *)v902 + 12) = v902 + 112;
                                                          *((void *)v902 + 13) = 0x400000000;
                                                          p_s1 = (int8x8_t *)&v1232;
                                                          int v305 = (int8x8_t *)__p;
                                                          goto LABEL_478;
                                                        }
                                                        int v910 = 0;
                                                        uint64_t v1232 = 0;
                                                        v1224 = 0;
                                                      }
                                                      else
                                                      {
                                                        uint64_t v1232 = 0;
                                                        v1224 = 0;
                                                        uint8x8_t v893 = __p;
                                                        __p[0] = &v1232;
                                                        __p[1] = &v1224;
                                                        *(void *)&long long v1213 = 0;
                                                        if (v900 == 5)
                                                        {
                                                          if (*((_WORD *)v8 + 9) == 13)
                                                          {
                                                            v911 = (int8x8_t *)&v8[-32
                                                                                 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                                                            if (*(void *)v911
                                                              && (uint64_t v1232 = (uint64_t)*v911,
                                                                  (sub_1CBF5295C((uint64_t)&__p[1], *(llvm::Constant **)&v911[4]) & 1) != 0))
                                                            {
                                                              int v910 = 1;
                                                              LODWORD(v893) = 1;
                                                            }
                                                            else
                                                            {
                                                              LODWORD(v893) = 0;
                                                              int v910 = 1;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            LODWORD(v893) = 0;
                                                            int v910 = 1;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (v900 == 41)
                                                          {
                                                            if (!*((void *)v8 - 8)) {
                                                              goto LABEL_1734;
                                                            }
                                                            uint64_t v1232 = *((void *)v8 - 8);
                                                            if ((sub_1CBF528D8((uint64_t)&__p[1], *((unsigned __int8 **)v8 - 4)) & 1) == 0)goto LABEL_1734; {
                                                            int v909 = 1;
                                                            }
LABEL_1731:
                                                            if (v909 && v1205 == (llvm *)v1232)
                                                            {
                                                              __int16 v912 = v1224;
                                                              int v913 = *((_WORD *)v4 + 9) & 0x3F;
                                                              uint64_t v914 = (llvm::ConstantInt ***)v1205;
                                                              return sub_1CD68B6C8(v914, (uint64_t)v912, v913);
                                                            }
LABEL_1734:
                                                            __p[0] = &v1232;
                                                            __p[1] = &v1224;
                                                            *(void *)&long long v1213 = 0;
                                                            BOOL v915 = (char)v1205;
                                                            int v916 = *((unsigned __int8 *)v1205 + 16);
                                                            if (v916 == 41)
                                                            {
                                                              if (!*((void *)v1205 - 8)) {
                                                                goto LABEL_1747;
                                                              }
                                                              uint64_t v1232 = *((void *)v1205 - 8);
                                                              if ((sub_1CBF528D8((uint64_t)&__p[1], *((unsigned __int8 **)v1205 - 4)) & 1) == 0)goto LABEL_1747; {
                                                              int v917 = 1;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if (v916 == 5)
                                                              {
                                                                BOOL v915 = 0;
                                                                if (*((_WORD *)v1205 + 9) == 13)
                                                                {
                                                                  v918 = (llvm::Constant **)((char *)v1205
                                                                                           - 32
                                                                                           * (*((_DWORD *)v1205 + 5) & 0x7FFFFFF));
                                                                  if (*v918)
                                                                  {
                                                                    uint64_t v1232 = (uint64_t)*v918;
                                                                    if (sub_1CBF5295C((uint64_t)&__p[1], v918[4])) {
                                                                      BOOL v915 = 1;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              int v917 = v916 == 5 && v915;
                                                            }
                                                            if (v917 && v8 == (unsigned __int8 *)v1232)
                                                            {
                                                              __int16 v912 = v1224;
                                                              int v913 = dword_1CFB279AC[*((_WORD *)v4 + 9) & 0x3F];
                                                              uint64_t v914 = (llvm::ConstantInt ***)v8;
                                                              return sub_1CD68B6C8(v914, (uint64_t)v912, v913);
                                                            }
LABEL_1747:
                                                            uint64_t v919 = *(void *)(a1 + 24);
                                                            LODWORD(__src) = 0;
                                                            uint64_t v1232 = 0;
                                                            v1224 = 0;
                                                            __p[0] = &__src;
                                                            *(void *)&long long v1213 = &v1224;
                                                            *((void *)&v1213 + 1) = &v1232;
                                                            uint64_t v920 = *v1206;
                                                            uint64_t v921 = *(void *)(*v1206 + 8);
                                                            if (!v921 || *(void *)(v921 + 8)) {
                                                              goto LABEL_1749;
                                                            }
                                                            int v939 = *(unsigned __int8 *)(v920 + 16);
                                                            if (v939 == 5)
                                                            {
                                                              if (*(_WORD *)(v920 + 18) != 25) {
                                                                goto LABEL_1749;
                                                              }
                                                              if (!sub_1CBF5270C((uint64_t)&__p[1], *(llvm::Constant **)(v920 - 32 * (*(_DWORD *)(v920 + 20) & 0x7FFFFFF))))goto LABEL_1749; {
                                                              uint64_t v940 = *(void *)(v920
                                                              }
                                                                               - 32
                                                                               * (*(_DWORD *)(v920 + 20) & 0x7FFFFFF)
                                                                               + 32);
                                                              if (!v940) {
                                                                goto LABEL_1749;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if (v939 != 53) {
                                                                goto LABEL_1749;
                                                              }
                                                              if (!sub_1CBF5250C((uint64_t)&__p[1], *(llvm::Constant **)(v920 - 64)))goto LABEL_1749; {
                                                              uint64_t v940 = *(void *)(v920 - 32);
                                                              }
                                                              if (!v940) {
                                                                goto LABEL_1749;
                                                              }
                                                            }
                                                            *(void *)long long v1213 = v940;
                                                            if (*v1204)
                                                            {
                                                              **((void **)&v1213 + 1) = *v1204;
                                                              int v950 = *((_WORD *)v4 + 9) & 0x3F;
                                                              goto LABEL_1827;
                                                            }
LABEL_1749:
                                                            uint64_t v922 = *v1204;
                                                            uint64_t v923 = *(void *)(*v1204 + 8);
                                                            if (!v923 || *(void *)(v923 + 8)) {
                                                              goto LABEL_1751;
                                                            }
                                                            int v941 = *(unsigned __int8 *)(v922 + 16);
                                                            if (v941 == 5)
                                                            {
                                                              if (*(_WORD *)(v922 + 18) != 25) {
                                                                goto LABEL_1751;
                                                              }
                                                              if (!sub_1CBF5270C((uint64_t)&__p[1], *(llvm::Constant **)(v922 - 32 * (*(_DWORD *)(v922 + 20) & 0x7FFFFFF))))goto LABEL_1751; {
                                                              uint64_t v942 = *(void *)(v922
                                                              }
                                                                               - 32
                                                                               * (*(_DWORD *)(v922 + 20) & 0x7FFFFFF)
                                                                               + 32);
                                                              if (!v942) {
                                                                goto LABEL_1751;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if (v941 != 53) {
                                                                goto LABEL_1751;
                                                              }
                                                              if (!sub_1CBF5250C((uint64_t)&__p[1], *(llvm::Constant **)(v922 - 64)))goto LABEL_1751; {
                                                              uint64_t v942 = *(void *)(v922 - 32);
                                                              }
                                                              if (!v942) {
                                                                goto LABEL_1751;
                                                              }
                                                            }
                                                            *(void *)long long v1213 = v942;
                                                            if (!*v1206)
                                                            {
LABEL_1751:
                                                              __p[0] = &__src;
                                                              *(void *)&long long v1213 = &v1224;
                                                              *((void *)&v1214 + 1) = &v1224;
                                                              int8x8_t v1215 = (int8x8_t *)&v1232;
                                                              uint64_t v924 = *v1206;
                                                              uint64_t v925 = *(void *)(*v1206 + 8);
                                                              if (v925
                                                                && !*(void *)(v925 + 8)
                                                                && ((sub_1CCA796F8((uint64_t)&__p[1], *v1206) & 1) != 0
                                                                 || sub_1CCA173D0((uint64_t)&v1214, 13, v924))
                                                                && *v1204)
                                                              {
                                                                *int8x8_t v1215 = (int8x8_t)*v1204;
                                                                int v943 = *((_WORD *)v4 + 9) & 0x3F;
                                                              }
                                                              else
                                                              {
                                                                uint64_t v926 = *v1204;
                                                                uint64_t v927 = *(void *)(*v1204 + 8);
                                                                if (!v927
                                                                  || *(void *)(v927 + 8)
                                                                  || (sub_1CCA796F8((uint64_t)&__p[1], *v1204) & 1) == 0
                                                                  && !sub_1CCA173D0((uint64_t)&v1214, 13, v926)
                                                                  || !*v1206)
                                                                {
                                                                  goto LABEL_1755;
                                                                }
                                                                *int8x8_t v1215 = (int8x8_t)*v1206;
                                                                int v943 = dword_1CFB279AC[*((_WORD *)v4 + 9) & 0x3F];
                                                              }
                                                              *(_DWORD *)__p[0] = v943;
                                                              if (__src != 36)
                                                              {
                                                                if (__src != 35) {
                                                                  goto LABEL_1755;
                                                                }
LABEL_1829:
                                                                __int16 v951 = 32;
                                                                goto LABEL_1832;
                                                              }
                                                              goto LABEL_1831;
                                                            }
                                                            **((void **)&v1213 + 1) = *v1206;
                                                            int v950 = dword_1CFB279AC[*((_WORD *)v4 + 9) & 0x3F];
LABEL_1827:
                                                            *(_DWORD *)__p[0] = v950;
                                                            if (__src != 37)
                                                            {
                                                              if (__src != 34) {
                                                                goto LABEL_1755;
                                                              }
                                                              goto LABEL_1829;
                                                            }
LABEL_1831:
                                                            __int16 v951 = 33;
LABEL_1832:
                                                            if ((*(unsigned char *)(v1232 + 23) & 0x10) == 0)
                                                            {
                                                              __int16 v962 = 0;
                                                              v961 = &byte_1CFBCE98E;
LABEL_1843:
                                                              LOWORD(v1214) = 773;
                                                              __p[0] = v961;
                                                              __p[1] = v962;
                                                              *(void *)&long long v1213 = ".highbits";
                                                              uint64_t v964 = (llvm::Constant **)sub_1CC2429AC(v919, v1232, (uint64_t)v1224, (uint64_t)__p, 0);
                                                              int v967 = llvm::Constant::getNullValue(*v964, v965, v966);
                                                              LOWORD(v1214) = 257;
                                                              uint64_t v38 = (llvm::Value *)llvm::CmpInst::Create(53, v951, v964, (uint64_t)v967, (const char **)__p, 0);
                                                              if (v38) {
                                                                return v38;
                                                              }
LABEL_1755:
                                                              if (((*v4)[1] & 0xFE) == 0x12)
                                                              {
                                                                uint64_t v38 = (llvm::Value *)sub_1CCA74480((uint64_t)v4, *(void *)(a1 + 24));
                                                                if (v38) {
                                                                  return v38;
                                                                }
                                                              }
                                                              uint64_t v928 = *v1206;
                                                              uint64_t v929 = *(void *)*v1206;
                                                              unsigned int v930 = *(_DWORD *)(v929 + 8);
                                                              if (v930 != 15) {
                                                                goto LABEL_1765;
                                                              }
                                                              v931 = v4[5][7];
                                                              if ((v930 & 0xFE) == 0x12) {
                                                                unsigned int v930 = *(_DWORD *)(**(void **)(v929 + 16) + 8);
                                                              }
                                                              if (v931)
                                                              {
                                                                uint64_t v932 = v931[14];
                                                                if (v932)
                                                                {
                                                                  if (*(unsigned char *)(v932 + 17)) {
                                                                    goto LABEL_1765;
                                                                  }
                                                                }
                                                              }
                                                              if (v930 > 0xFF) {
                                                                goto LABEL_1765;
                                                              }
                                                              if (*(unsigned __int8 *)(v928 + 16) < 0x1Cu) {
                                                                goto LABEL_1765;
                                                              }
                                                              uint64_t v944 = *v1204;
                                                              if (!*v1204) {
                                                                goto LABEL_1765;
                                                              }
                                                              unsigned int v945 = *(unsigned __int8 *)(v944 + 16);
                                                              if (v945 > 0x14) {
                                                                goto LABEL_1765;
                                                              }
                                                              if (v945 == 16)
                                                              {
                                                                uint64_t v946 = *(unsigned int *)(v944 + 32);
                                                                if (v946 < 0x41)
                                                                {
                                                                  if (*(void *)(v944 + 24)) {
                                                                    goto LABEL_1813;
                                                                  }
LABEL_1814:
                                                                  if (llvm::Instruction::isLaunderOrStripInvariantGroup((llvm::Instruction *)v928))
                                                                  {
                                                                    __int16 v947 = *((_WORD *)v4 + 9) & 0x3F;
                                                                    int v948 = *(_DWORD *)(v928 + 20);
                                                                    int v949 = (v948 & 0x40000000) != 0
                                                                         ? *(void ***)(v928 - 8)
                                                                         : (void **)(v928 - 32 * (v948 & 0x7FFFFFF));
                                                                    int v985 = *v949;
                                                                    uint64_t v986 = *v1204;
                                                                    LOWORD(v1214) = 257;
                                                                    uint64_t v38 = (llvm::Value *)llvm::CmpInst::Create(53, v947, v985, v986, (const char **)__p, 0);
                                                                    if (v38) {
                                                                      return v38;
                                                                    }
                                                                  }
LABEL_1765:
                                                                  if (((*v4)[1] & 0xFE) == 0x12) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  uint64_t v933 = *v1206;
                                                                  uint64_t v934 = *(void *)(*v1206 + 8);
                                                                  if (!v934 || *(void *)(v934 + 8)) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  unsigned int v935 = *(unsigned __int8 *)(v933 + 16);
                                                                  if (v935 <= 0x1B && v935 != 5) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  int v937 = v935 <= 0x1B
                                                                       ? *(unsigned __int16 *)(v933 + 18)
                                                                       : v935 - 28;
                                                                  if (v937 != 49) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  int v1038 = *(_DWORD *)(v933 + 20);
                                                                  int64_t v1039 = (v1038 & 0x40000000) != 0
                                                                        ? *(uint64_t **)(v933 - 8)
                                                                        : (uint64_t *)(v933 - 32 * (v1038 & 0x7FFFFFF));
                                                                  uint64_t v1040 = *v1039;
                                                                  uint64_t v1041 = *(void *)(v1040 + 8);
                                                                  if (!v1041) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  if (*(void *)(v1041 + 8)) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  if (*(unsigned char *)(v1040 + 16) != 81) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  unint64_t v1042 = *(unsigned __int8 **)(v1040 - 64);
                                                                  if (!v1042) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  int v1043 = *(unsigned __int8 **)(v1040 - 32);
                                                                  if (!v1043) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  uint64_t v1044 = *v1204;
                                                                  if (!*v1204) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  unsigned int v1045 = *(unsigned __int8 *)(v1044 + 16);
                                                                  if (v1045 > 0x14) {
                                                                    goto LABEL_1776;
                                                                  }
                                                                  unint64_t v1046 = *(uint64_t **)(a1 + 24);
                                                                  uint64_t v1047 = *(void *)(a1 + 80);
                                                                  __int16 v1048 = *(_WORD *)(v1040 + 18);
                                                                  if (v1045 == 16)
                                                                  {
                                                                    uint64_t v1049 = *(unsigned int *)(v1044 + 32);
                                                                    if (v1049 < 0x41)
                                                                    {
                                                                      if (!*(void *)(v1044 + 24)) {
                                                                        goto LABEL_2127;
                                                                      }
LABEL_2126:
                                                                      if ((sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v1044) & 1) == 0)goto LABEL_1776; {
                                                                      goto LABEL_2127;
                                                                      }
                                                                    }
                                                                    int v1127 = 0;
                                                                    int64_t v1128 = (unint64_t)(v1049 + 63) >> 6;
                                                                    do
                                                                    {
                                                                      BOOL v454 = v1128-- < 1;
                                                                      if (v454) {
                                                                        break;
                                                                      }
                                                                      unint64_t v1129 = *(void *)(*(void *)(v1044 + 24)
                                                                                        + 8 * v1128);
                                                                      v1127 += __clz(v1129);
                                                                    }
                                                                    while (!v1129);
                                                                    int v1130 = v1049 | 0xFFFFFFC0;
                                                                    if ((v1049 & 0x3F) == 0) {
                                                                      int v1130 = 0;
                                                                    }
                                                                    if (v1127 + v1130 != v1049) {
                                                                      goto LABEL_2126;
                                                                    }
                                                                  }
                                                                  else if (v1045 == 17)
                                                                  {
                                                                    if ((sub_1CB844168(*v1204, 0.0) & 1) == 0) {
                                                                      goto LABEL_2126;
                                                                    }
                                                                  }
                                                                  else if (v1045 - 18 >= 3 && v1045 != 13)
                                                                  {
                                                                    goto LABEL_2126;
                                                                  }
LABEL_2127:
                                                                  v938 = 0;
                                                                  v1131 = *(uint64_t ***)v1042;
                                                                  if (!*(void *)v1042 || *((unsigned char *)v1131 + 8) != 18) {
                                                                    goto LABEL_1777;
                                                                  }
                                                                  if (*((_DWORD *)v1131[3] + 2) == 13)
                                                                  {
                                                                    __int16 v1132 = *((_WORD *)v4 + 9);
                                                                    unsigned int v1133 = (llvm::LLVMContext *)(*((_DWORD *)v1131 + 8) * (*((_DWORD *)v1131[3] + 2) >> 8));
                                                                    unint64_t v1134 = *(char **)(v1047 + 32);
                                                                    size_t v1135 = *(void *)(v1047 + 40);
                                                                    unsigned int v1136 = &v1134[v1135];
                                                                    if (v1133 <= 0xFF)
                                                                    {
                                                                      unint64_t v1137 = (char *)memchr(v1134, (char)(*((unsigned char *)v1131 + 32)* BYTE1(*((_DWORD *)v1131[3] + 2))), v1135);
                                                                      if (v1137) {
                                                                        unsigned int v1136 = v1137;
                                                                      }
                                                                    }
                                                                    if (v1136 - v1134 != v1135)
                                                                    {
                                                                      v938 = 0;
                                                                      __int16 v1138 = v1132 & 0x3F;
                                                                      if ((v1132 & 0x3E) != 0x20
                                                                        || (v1048 & 0x3F) != 0x21)
                                                                      {
                                                                        goto LABEL_1777;
                                                                      }
                                                                      uint64_t v1139 = llvm::IntegerType::get((llvm::IntegerType *)v1046[8], v1133);
                                                                      uint64_t v1140 = v1139;
                                                                      if ((v1042[23] & 0x10) == 0)
                                                                      {
                                                                        uint64_t v1149 = 0;
                                                                        v1150 = &byte_1CFBCE98E;
                                                                        goto LABEL_2146;
                                                                      }
                                                                      uint64_t v1141 = ***(void ***)v1042;
                                                                      uint64_t v1142 = *(void *)(v1141 + 152);
                                                                      uint64_t v1143 = *(unsigned int *)(v1141 + 168);
                                                                      if (v1143)
                                                                      {
                                                                        LODWORD(v1144) = (v1143 - 1) & ((v1042 >> 4) ^ (v1042 >> 9));
                                                                        v1145 = (unsigned __int8 **)(v1142 + 16 * v1144);
                                                                        uint64_t v1146 = *v1145;
                                                                        if (*v1145 == v1042)
                                                                        {
LABEL_2145:
                                                                          v1151 = v1145[1];
                                                                          uint64_t v1152 = *(void *)v1151;
                                                                          v1150 = (char *)(v1151 + 16);
                                                                          uint64_t v1149 = v1152;
LABEL_2146:
                                                                          __int16 v1236 = 773;
                                                                          uint64_t v1232 = (uint64_t)v1150;
                                                                          uint64_t v1233 = v1149;
                                                                          unsigned int v1234 = ".scalar";
                                                                          if (*(void *)v1042 != v1139)
                                                                          {
                                                                            if (v1042[16] <= 0x14u)
                                                                            {
                                                                              unint64_t v1042 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v1046[9] + 224))(v1046[9], 49, v1042, v1139);
                                                                              if (v1042) {
                                                                                BOOL v1156 = v1042[16] >= 0x1Cu;
                                                                              }
                                                                              else {
                                                                                BOOL v1156 = 0;
                                                                              }
                                                                              if (v1156)
                                                                              {
                                                                                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v1046[10] + 16))(v1046[10], v1042, &v1232, v1046[6], v1046[7]);
                                                                                uint64_t v1157 = *((unsigned int *)v1046 + 2);
                                                                                if (v1157)
                                                                                {
                                                                                  uint64_t v1158 = *v1046;
                                                                                  uint64_t v1159 = *v1046 + 16 * v1157;
                                                                                  do
                                                                                  {
                                                                                    llvm::Instruction::setMetadata((llvm::Instruction *)v1042, *(_DWORD *)v1158, *(llvm::MDNode **)(v1158 + 8));
                                                                                    v1158 += 16;
                                                                                  }
                                                                                  while (v1158 != v1159);
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              LOWORD(v1214) = 257;
                                                                              unint64_t v1042 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1042, v1139, (const char **)__p, 0);
                                                                              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v1046[10] + 16))(v1046[10], v1042, &v1232, v1046[6], v1046[7]);
                                                                              uint64_t v1153 = *((unsigned int *)v1046 + 2);
                                                                              if (v1153)
                                                                              {
                                                                                uint64_t v1154 = *v1046;
                                                                                uint64_t v1155 = *v1046 + 16 * v1153;
                                                                                do
                                                                                {
                                                                                  llvm::Instruction::setMetadata((llvm::Instruction *)v1042, *(_DWORD *)v1154, *(llvm::MDNode **)(v1154 + 8));
                                                                                  v1154 += 16;
                                                                                }
                                                                                while (v1154 != v1155);
                                                                              }
                                                                            }
                                                                          }
                                                                          uint64_t v1160 = *(uint64_t ***)v1043;
                                                                          if ((v1043[23] & 0x10) == 0)
                                                                          {
                                                                            uint64_t v1169 = 0;
                                                                            int v1170 = &byte_1CFBCE98E;
                                                                            goto LABEL_2170;
                                                                          }
                                                                          uint64_t v1161 = **v1160;
                                                                          uint64_t v1162 = *(void *)(v1161 + 152);
                                                                          uint64_t v1163 = *(unsigned int *)(v1161 + 168);
                                                                          if (v1163)
                                                                          {
                                                                            LODWORD(v1164) = (v1163 - 1) & ((v1043 >> 4) ^ (v1043 >> 9));
                                                                            size_t v1165 = (unsigned __int8 **)(v1162 + 16 * v1164);
                                                                            v1166 = *v1165;
                                                                            if (*v1165 == v1043)
                                                                            {
LABEL_2169:
                                                                              v1171 = v1165[1];
                                                                              uint64_t v1172 = *(void *)v1171;
                                                                              int v1170 = (char *)(v1171 + 16);
                                                                              uint64_t v1169 = v1172;
LABEL_2170:
                                                                              __int16 v1236 = 773;
                                                                              uint64_t v1232 = (uint64_t)v1170;
                                                                              uint64_t v1233 = v1169;
                                                                              unsigned int v1234 = ".scalar";
                                                                              if (v1160 != (uint64_t **)v1140)
                                                                              {
                                                                                if (v1043[16] <= 0x14u)
                                                                                {
                                                                                  int v1043 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v1046[9] + 224))(v1046[9], 49, v1043, v1140);
                                                                                  if (v1043) {
                                                                                    BOOL v1176 = v1043[16] >= 0x1Cu;
                                                                                  }
                                                                                  else {
                                                                                    BOOL v1176 = 0;
                                                                                  }
                                                                                  if (v1176)
                                                                                  {
                                                                                    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v1046[10] + 16))(v1046[10], v1043, &v1232, v1046[6], v1046[7]);
                                                                                    uint64_t v1177 = *((unsigned int *)v1046 + 2);
                                                                                    if (v1177)
                                                                                    {
                                                                                      uint64_t v1178 = *v1046;
                                                                                      uint64_t v1179 = *v1046 + 16 * v1177;
                                                                                      do
                                                                                      {
                                                                                        llvm::Instruction::setMetadata((llvm::Instruction *)v1043, *(_DWORD *)v1178, *(llvm::MDNode **)(v1178 + 8));
                                                                                        v1178 += 16;
                                                                                      }
                                                                                      while (v1178 != v1179);
                                                                                    }
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  LOWORD(v1214) = 257;
                                                                                  int v1043 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1043, v1140, (const char **)__p, 0);
                                                                                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v1046[10] + 16))(v1046[10], v1043, &v1232, v1046[6], v1046[7]);
                                                                                  uint64_t v1173 = *((unsigned int *)v1046 + 2);
                                                                                  if (v1173)
                                                                                  {
                                                                                    uint64_t v1174 = *v1046;
                                                                                    uint64_t v1175 = *v1046 + 16 * v1173;
                                                                                    do
                                                                                    {
                                                                                      llvm::Instruction::setMetadata((llvm::Instruction *)v1043, *(_DWORD *)v1174, *(llvm::MDNode **)(v1174 + 8));
                                                                                      v1174 += 16;
                                                                                    }
                                                                                    while (v1174 != v1175);
                                                                                  }
                                                                                }
                                                                              }
                                                                              if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
                                                                              {
                                                                                uint8x8_t v1188 = 0;
                                                                                uint64_t v1189 = &byte_1CFBCE98E;
LABEL_2194:
                                                                                LOWORD(v1214) = 261;
                                                                                __p[0] = v1189;
                                                                                __p[1] = v1188;
                                                                                v938 = llvm::CmpInst::Create(53, v1138, v1042, (uint64_t)v1043, (const char **)__p, 0);
LABEL_1777:
                                                                                if (v938) {
                                                                                  return (llvm::Value *)v938;
                                                                                }
                                                                                else {
                                                                                  return (llvm::Value *)v1203;
                                                                                }
                                                                              }
                                                                              uint64_t v1180 = ***v4;
                                                                              uint64_t v1181 = *(void *)(v1180 + 152);
                                                                              uint64_t v1182 = *(unsigned int *)(v1180 + 168);
                                                                              if (v1182)
                                                                              {
                                                                                LODWORD(v1183) = (v1182 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                                                                                int v1184 = (uint64_t ****)(v1181 + 16 * v1183);
                                                                                unint64_t v1185 = *v1184;
                                                                                if (*v1184 == v4)
                                                                                {
LABEL_2193:
                                                                                  v1190 = v1184[1];
                                                                                  v1191 = *v1190;
                                                                                  uint64_t v1189 = (char *)(v1190 + 2);
                                                                                  uint8x8_t v1188 = v1191;
                                                                                  goto LABEL_2194;
                                                                                }
                                                                                int v1186 = 1;
                                                                                while (v1185 != (uint64_t ***)-4096)
                                                                                {
                                                                                  int v1187 = v1183 + v1186++;
                                                                                  uint64_t v1183 = v1187 & (v1182 - 1);
                                                                                  unint64_t v1185 = *(uint64_t ****)(v1181 + 16 * v1183);
                                                                                  if (v1185 == v4)
                                                                                  {
                                                                                    int v1184 = (uint64_t ****)(v1181 + 16 * v1183);
                                                                                    goto LABEL_2193;
                                                                                  }
                                                                                }
                                                                              }
                                                                              int v1184 = (uint64_t ****)(v1181 + 16 * v1182);
                                                                              goto LABEL_2193;
                                                                            }
                                                                            int v1167 = 1;
                                                                            while (v1166 != (unsigned __int8 *)-4096)
                                                                            {
                                                                              int v1168 = v1164 + v1167++;
                                                                              uint64_t v1164 = v1168 & (v1163 - 1);
                                                                              v1166 = *(unsigned __int8 **)(v1162 + 16 * v1164);
                                                                              if (v1166 == v1043)
                                                                              {
                                                                                size_t v1165 = (unsigned __int8 **)(v1162 + 16 * v1164);
                                                                                goto LABEL_2169;
                                                                              }
                                                                            }
                                                                          }
                                                                          size_t v1165 = (unsigned __int8 **)(v1162 + 16 * v1163);
                                                                          goto LABEL_2169;
                                                                        }
                                                                        int v1147 = 1;
                                                                        while (v1146 != (unsigned __int8 *)-4096)
                                                                        {
                                                                          int v1148 = v1144 + v1147++;
                                                                          uint64_t v1144 = v1148 & (v1143 - 1);
                                                                          uint64_t v1146 = *(unsigned __int8 **)(v1142 + 16 * v1144);
                                                                          if (v1146 == v1042)
                                                                          {
                                                                            v1145 = (unsigned __int8 **)(v1142 + 16 * v1144);
                                                                            goto LABEL_2145;
                                                                          }
                                                                        }
                                                                      }
                                                                      v1145 = (unsigned __int8 **)(v1142 + 16 * v1143);
                                                                      goto LABEL_2145;
                                                                    }
                                                                  }
LABEL_1776:
                                                                  v938 = 0;
                                                                  goto LABEL_1777;
                                                                }
                                                                int v1083 = 0;
                                                                int64_t v1084 = (unint64_t)(v946 + 63) >> 6;
                                                                do
                                                                {
                                                                  BOOL v454 = v1084-- < 1;
                                                                  if (v454) {
                                                                    break;
                                                                  }
                                                                  unint64_t v1085 = *(void *)(*(void *)(v944 + 24)
                                                                                    + 8 * v1084);
                                                                  v1083 += __clz(v1085);
                                                                }
                                                                while (!v1085);
                                                                int v1086 = v946 | 0xFFFFFFC0;
                                                                if ((v946 & 0x3F) == 0) {
                                                                  int v1086 = 0;
                                                                }
                                                                if (v1083 + v1086 == v946) {
                                                                  goto LABEL_1814;
                                                                }
                                                              }
                                                              else if (v945 == 17)
                                                              {
                                                                if (sub_1CB844168(*v1204, 0.0)) {
                                                                  goto LABEL_1814;
                                                                }
                                                              }
                                                              else if (v945 - 18 < 3 || v945 == 13)
                                                              {
                                                                goto LABEL_1814;
                                                              }
LABEL_1813:
                                                              if ((sub_1CC03F414((uint64_t)__p, (llvm::Constant *)v944) & 1) == 0) {
                                                                goto LABEL_1765;
                                                              }
                                                              goto LABEL_1814;
                                                            }
                                                            uint64_t v952 = ***(void ***)v1232;
                                                            uint64_t v953 = *(void *)(v952 + 152);
                                                            uint64_t v954 = *(unsigned int *)(v952 + 168);
                                                            if (v954)
                                                            {
                                                              LODWORD(v955) = (v954 - 1) & ((v1232 >> 4) ^ (v1232 >> 9));
                                                              BOOL v956 = (uint64_t *)(v953 + 16 * v955);
                                                              uint64_t v957 = *v956;
                                                              if (*v956 == v1232)
                                                              {
LABEL_1842:
                                                                v960 = (void *)v956[1];
                                                                uint64_t v963 = (void *)*v960;
                                                                v961 = (char *)(v960 + 2);
                                                                __int16 v962 = v963;
                                                                goto LABEL_1843;
                                                              }
                                                              int v958 = 1;
                                                              while (v957 != -4096)
                                                              {
                                                                int v959 = v955 + v958++;
                                                                uint64_t v955 = v959 & (v954 - 1);
                                                                uint64_t v957 = *(void *)(v953 + 16 * v955);
                                                                if (v957 == v1232)
                                                                {
                                                                  BOOL v956 = (uint64_t *)(v953 + 16 * v955);
                                                                  goto LABEL_1842;
                                                                }
                                                              }
                                                            }
                                                            BOOL v956 = (uint64_t *)(v953 + 16 * v954);
                                                            goto LABEL_1842;
                                                          }
                                                          int v910 = 0;
                                                        }
                                                      }
                                                      int v909 = v910 & v893;
                                                      goto LABEL_1731;
                                                    }
                                                    if (!sub_1CBF687D0((uint64_t)&v1229, (llvm::Constant *)v896)|| (sub_1CBF687D0((uint64_t)&v1231, v1224) & 1) == 0&& (sub_1CBF687D0((uint64_t)&v1211, (llvm::Constant *)__src) & 1) == 0)
                                                    {
                                                      goto LABEL_1700;
                                                    }
                                                  }
LABEL_1846:
                                                  v968 = *(void **)(v895 - 32);
                                                  LODWORD(__s1) = 1;
                                                  __int16 v1236 = 257;
                                                  unsigned int v969 = (char *)operator new(0x80uLL);
                                                  uint64_t v38 = (llvm::Value *)(v969 + 32);
                                                  *((_DWORD *)v969 + 13) = *((_DWORD *)v969 + 13) & 0x38000000 | 1;
                                                  *(void *)unsigned int v969 = 0;
                                                  *((void *)v969 + 1) = 0;
                                                  *((void *)v969 + 2) = 0;
                                                  *((void *)v969 + 3) = v969 + 32;
                                                  uint64_t v970 = *v968;
                                                  int v971 = *(unsigned __int8 *)(*v968 + 8);
                                                  if (*v968 && v971 == 17)
                                                  {
                                                    if (*(void *)(v970 + 32) > (unint64_t)__s1)
                                                    {
                                                      uint64_t v973 = (uint64_t *)(v970 + 24);
                                                      goto LABEL_1852;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    uint64_t v972 = 0;
                                                    if (!v970 || v971 != 16) {
                                                      goto LABEL_1853;
                                                    }
                                                    if (__s1 < *(_DWORD *)(v970 + 12))
                                                    {
                                                      uint64_t v973 = (uint64_t *)(*(void *)(v970 + 16)
                                                                       + 8 * __s1);
LABEL_1852:
                                                      uint64_t v972 = *v973;
LABEL_1853:
                                                      *((void *)v969 + 4) = v972;
                                                      *((void *)v969 + 5) = 0;
                                                      *((void *)v969 + 6) = 0x10000005CLL;
                                                      *(_OWORD *)(v969 + 56) = 0u;
                                                      *(_OWORD *)(v969 + 72) = 0u;
                                                      *((_DWORD *)v969 + 22) = 0;
                                                      v974 = v968 + 1;
                                                      uint64_t v975 = v968[1];
                                                      *(void *)unsigned int v969 = v968;
                                                      *((void *)v969 + 1) = v975;
                                                      if (v975) {
                                                        *(void *)(v975 + 16) = v969 + 8;
                                                      }
                                                      *((void *)v969 + 2) = v974;
                                                      void *v974 = v969;
                                                      *((void *)v969 + 12) = v969 + 112;
                                                      *((void *)v969 + 13) = 0x400000000;
                                                      p_s1 = (int8x8_t *)&__s1;
                                                      int v305 = (int8x8_t *)&v1232;
LABEL_478:
                                                      llvm::ExtractValueInst::init(v38, p_s1, 1, (const char **)v305);
                                                      return v38;
                                                    }
                                                  }
                                                  uint64_t v972 = 0;
                                                  goto LABEL_1853;
                                                }
                                                int v866 = *((_WORD *)v4 + 9) & 0x3F;
                                                if (v866 != 34)
                                                {
                                                  if (v866 != 36)
                                                  {
                                                    uint64_t v1232 = 0;
                                                    __p[0] = &v1232;
                                                    goto LABEL_1612;
                                                  }
                                                  int v867 = *(unsigned __int8 *)(v864 + 16);
                                                  if (v867 != 5)
                                                  {
                                                    if (v867 == 41)
                                                    {
                                                      unsigned int v868 = *(unsigned __int8 **)(v864 - 64);
                                                      if (v868)
                                                      {
                                                        unsigned int v869 = *(llvm::Constant **)(v864 - 32);
                                                        if (v869)
                                                        {
                                                          if (v865 == (llvm::ConstantInt *)v868 || v865 == v869)
                                                          {
                                                            v1224 = *(llvm::ConstantExpr **)(v864 - 64);
                                                            uint64_t __src = (uint64_t)v869;
LABEL_1639:
                                                            if (*(unsigned char *)(*(void *)v868 + 8) == 13)
                                                            {
                                                              __p[0] = 0;
                                                              uint64_t v1232 = 0;
                                                              if (*(unsigned char *)(v864 + 16) == 41
                                                                && (sub_1CCA667D0((void *)a1, 13, 0, v868, (uint64_t)v869, (unsigned __int8 **)v864, (uint64_t *)__p, &v1232) & 1) != 0)
                                                              {
                                                                sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v864, (llvm::Value *)__p[0]);
                                                                sub_1CC9D6844(a1, v864);
                                                              }
                                                            }
                                                            goto LABEL_1658;
                                                          }
                                                        }
                                                      }
                                                    }
LABEL_1594:
                                                    uint64_t v1232 = 0;
                                                    __p[0] = &v1232;
                                                    uint64_t v879 = *(void *)(v864 + 8);
                                                    if (v879 && !*(void *)(v879 + 8))
                                                    {
                                                      if (v867 == 5)
                                                      {
                                                        if (*(_WORD *)(v864 + 18) == 30)
                                                        {
                                                          uint64_t v888 = v864 - 32 * (*(_DWORD *)(v864 + 20) & 0x7FFFFFF);
                                                          if (*(void *)v888)
                                                          {
                                                            uint64_t v1232 = *(void *)v888;
                                                            if (sub_1CBF68974((uint64_t)&__p[1], *(llvm::Constant **)(v888 + 32)))goto LABEL_1651; {
                                                          }
                                                            }
                                                        }
                                                      }
                                                      else if (v867 == 58)
                                                      {
                                                        if (*(void *)(v864 - 64))
                                                        {
                                                          uint64_t v1232 = *(void *)(v864 - 64);
                                                          if (sub_1CBF687D0((uint64_t)&__p[1], *(llvm::Constant **)(v864 - 32)))
                                                          {
LABEL_1651:
                                                            unsigned int v868 = (unsigned __int8 *)v1232;
                                                            if (!v1232) {
                                                              goto LABEL_1658;
                                                            }
                                                            v1224 = (llvm::ConstantExpr *)v1232;
                                                            uint64_t __src = (uint64_t)v865;
                                                            unsigned int v885 = *(unsigned __int8 *)(v864 + 16);
                                                            unsigned int v869 = v865;
                                                            goto LABEL_1638;
                                                          }
                                                        }
                                                      }
                                                    }
                                                    goto LABEL_1612;
                                                  }
                                                  if (*(_WORD *)(v864 + 18) != 13) {
                                                    goto LABEL_1594;
                                                  }
                                                  uint64_t v875 = v864 - 32 * (*(_DWORD *)(v864 + 20) & 0x7FFFFFF);
                                                  v876 = *(llvm::ConstantInt **)v875;
                                                  if (!*(void *)v875) {
                                                    goto LABEL_1594;
                                                  }
                                                  v877 = *(llvm::Constant **)(v875 + 32);
                                                  if (!v877) {
                                                    goto LABEL_1594;
                                                  }
                                                  if (v865 != v876 && v865 != v877) {
                                                    goto LABEL_1594;
                                                  }
LABEL_1609:
                                                  v1224 = v876;
                                                  uint64_t __src = (uint64_t)v877;
                                                  goto LABEL_1658;
                                                }
                                                int v870 = *((unsigned __int8 *)v865 + 16);
                                                if (v870 == 5)
                                                {
                                                  if (*((_WORD *)v865 + 9) == 13)
                                                  {
                                                    unsigned int v880 = (char *)v865 - 32 * (*((_DWORD *)v865 + 5) & 0x7FFFFFF);
                                                    v876 = *(llvm::ConstantInt **)v880;
                                                    if (*(void *)v880)
                                                    {
                                                      v877 = (llvm::Constant *)*((void *)v880 + 4);
                                                      if (v877)
                                                      {
                                                        if ((llvm::ConstantInt *)v864 == v876 || v864 == (void)v877) {
                                                          goto LABEL_1609;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                else if (v870 == 41)
                                                {
                                                  unsigned int v868 = (unsigned __int8 *)*((void *)v865 - 8);
                                                  if (v868)
                                                  {
                                                    unsigned int v869 = (llvm::Constant *)*((void *)v865 - 4);
                                                    if (v869)
                                                    {
                                                      if ((unsigned __int8 *)v864 == v868
                                                        || (llvm::Constant *)v864 == v869)
                                                      {
                                                        v1224 = (llvm::ConstantExpr *)*((void *)v865 - 8);
                                                        uint64_t __src = (uint64_t)v869;
                                                        uint64_t v864 = (uint64_t)v865;
                                                        goto LABEL_1639;
                                                      }
                                                    }
                                                  }
                                                }
                                                uint64_t v1232 = 0;
                                                __p[0] = &v1232;
                                                uint64_t v882 = *((void *)v865 + 1);
                                                if (v882 && !*(void *)(v882 + 8))
                                                {
                                                  if (v870 == 5)
                                                  {
                                                    if (*((_WORD *)v865 + 9) != 30) {
                                                      goto LABEL_1612;
                                                    }
                                                    v889 = (llvm::Constant **)((char *)v865
                                                                             - 32 * (*((_DWORD *)v865 + 5) & 0x7FFFFFF));
                                                    if (!*v889) {
                                                      goto LABEL_1612;
                                                    }
                                                    uint64_t v1232 = (uint64_t)*v889;
                                                    if (!sub_1CBF68974((uint64_t)&__p[1], v889[4])) {
                                                      goto LABEL_1612;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v870 != 58) {
                                                      goto LABEL_1612;
                                                    }
                                                    if (!*((void *)v865 - 8)) {
                                                      goto LABEL_1612;
                                                    }
                                                    uint64_t v1232 = *((void *)v865 - 8);
                                                    if ((sub_1CBF687D0((uint64_t)&__p[1], *((llvm::Constant **)v865 - 4)) & 1) == 0)goto LABEL_1612; {
                                                  }
                                                    }
                                                  unsigned int v868 = (unsigned __int8 *)v1232;
                                                  if (!v1232) {
                                                    goto LABEL_1658;
                                                  }
                                                  v1224 = (llvm::ConstantExpr *)v1232;
                                                  uint64_t __src = v864;
                                                  unsigned int v885 = *((unsigned __int8 *)v865 + 16);
                                                  unsigned int v869 = (llvm::Constant *)v864;
LABEL_1637:
                                                  uint64_t v864 = (uint64_t)v865;
LABEL_1638:
                                                  if (v885 < 0x1C) {
                                                    goto LABEL_1658;
                                                  }
                                                  goto LABEL_1639;
                                                }
LABEL_1612:
                                                if (v866 != 32) {
                                                  goto LABEL_1658;
                                                }
                                                int v883 = *(unsigned __int8 *)(v864 + 16);
                                                if (v883 == 5)
                                                {
                                                  if (*(_WORD *)(v864 + 18) != 13) {
                                                    goto LABEL_1625;
                                                  }
                                                  uint64_t v884 = v864 - 32 * (*(_DWORD *)(v864 + 20) & 0x7FFFFFF);
                                                  unsigned int v868 = *(unsigned __int8 **)v884;
                                                  if (!*(void *)v884) {
                                                    goto LABEL_1625;
                                                  }
                                                  unsigned int v869 = *(llvm::Constant **)(v884 + 32);
                                                  if (!v869) {
                                                    goto LABEL_1625;
                                                  }
                                                }
                                                else if (v883 != 41 {
                                                       || (unsigned int v868 = *(unsigned __int8 **)(v864 - 64)) == 0
                                                }
                                                       || (unsigned int v869 = *(llvm::Constant **)(v864 - 32)) == 0)
                                                {
LABEL_1625:
                                                  if (!sub_1CBF535C4((uint64_t)&__s1, (llvm::Constant *)v864))goto LABEL_1658; {
                                                  int v886 = *((unsigned __int8 *)v865 + 16);
                                                  }
                                                  if (v886 == 5)
                                                  {
                                                    if (*((_WORD *)v865 + 9) != 13) {
                                                      goto LABEL_1658;
                                                    }
                                                    uint64_t v887 = (char *)v865 - 32 * (*((_DWORD *)v865 + 5) & 0x7FFFFFF);
                                                    unsigned int v868 = *(unsigned __int8 **)v887;
                                                    if (!*(void *)v887) {
                                                      goto LABEL_1658;
                                                    }
                                                    unsigned int v869 = (llvm::Constant *)*((void *)v887 + 4);
                                                    if (!v869) {
                                                      goto LABEL_1658;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v886 != 41) {
                                                      goto LABEL_1658;
                                                    }
                                                    unsigned int v868 = (unsigned __int8 *)*((void *)v865 - 8);
                                                    if (!v868) {
                                                      goto LABEL_1658;
                                                    }
                                                    unsigned int v869 = (llvm::Constant *)*((void *)v865 - 4);
                                                    if (!v869) {
                                                      goto LABEL_1658;
                                                    }
                                                  }
                                                  if ((sub_1CBF5250C((uint64_t)&v1230, (llvm::Constant *)v868) & 1) == 0
                                                    && (sub_1CBF5250C((uint64_t)&v1229, v869) & 1) == 0)
                                                  {
                                                    goto LABEL_1658;
                                                  }
                                                  v1224 = (llvm::ConstantExpr *)v868;
                                                  uint64_t __src = (uint64_t)v869;
                                                  unsigned int v885 = *((unsigned __int8 *)v865 + 16);
                                                  goto LABEL_1637;
                                                }
                                                if (sub_1CBF535C4((uint64_t)&__s1, v865)
                                                  && ((sub_1CBF5250C((uint64_t)&v1230, (llvm::Constant *)v868) & 1) != 0
                                                   || (sub_1CBF5250C((uint64_t)&v1229, v869) & 1) != 0))
                                                {
                                                  v1224 = (llvm::ConstantExpr *)v868;
                                                  uint64_t __src = (uint64_t)v869;
                                                  unsigned int v885 = *(unsigned __int8 *)(v864 + 16);
                                                  goto LABEL_1638;
                                                }
                                                goto LABEL_1625;
                                              }
                                              int v1079 = 0;
                                              int64_t v1080 = (unint64_t)(v820 + 63) >> 6;
                                              do
                                              {
                                                BOOL v454 = v1080-- < 1;
                                                if (v454) {
                                                  break;
                                                }
                                                unint64_t v1081 = *(void *)(*((void *)v1205 + 3) + 8 * v1080);
                                                v1079 += __clz(v1081);
                                              }
                                              while (!v1081);
                                              int v1082 = v820 | 0xFFFFFFC0;
                                              if ((v820 & 0x3F) == 0) {
                                                int v1082 = 0;
                                              }
                                              if (v1079 + v1082 == v820) {
                                                goto LABEL_1542;
                                              }
                                            }
                                            else if (v819 == 17)
                                            {
                                              if (sub_1CB844168((uint64_t)v1205, 0.0)) {
                                                goto LABEL_1542;
                                              }
                                            }
                                            else if (v819 - 18 < 3 || v819 == 13)
                                            {
                                              goto LABEL_1542;
                                            }
LABEL_1469:
                                            int v3 = v1204;
                                            uint64_t v767 = v1206;
                                            if ((sub_1CC03F414((uint64_t)&v1232, v1205) & 1) == 0) {
                                              goto LABEL_1548;
                                            }
                                            goto LABEL_1543;
                                          }
                                          uint64_t v769 = *(void *)(v2 - 96);
                                          if (!v769 || *(unsigned char *)(v769 + 16) != 81) {
                                            goto LABEL_1418;
                                          }
                                          uint64_t v770 = *(void *)(v2 - 64);
                                          uint64_t v771 = *(void *)(v2 - 32);
                                          uint64_t v772 = *(void *)(v769 - 64);
                                          uint64_t v773 = *(void *)(v769 - 32);
                                          BOOL v774 = v770 == v772 && v771 == v773;
                                          if (v774 || (v770 == v773 ? (BOOL v775 = v771 == v772) : (BOOL v775 = 0), v775))
                                          {
                                            int v776 = *(_WORD *)(v769 + 18) & 0x3E;
                                            if (v770 == v772)
                                            {
                                              if (v776 != 40) {
                                                goto LABEL_1375;
                                              }
                                            }
                                            else if (v776 != 38)
                                            {
                                              goto LABEL_1375;
                                            }
                                            if (v772 == v16 || v773 == v16) {
                                              goto LABEL_1446;
                                            }
                                          }
LABEL_1375:
                                          uint64_t v777 = *(void *)(v2 - 64);
                                          uint64_t v778 = *(void *)(v2 - 32);
                                          uint64_t v779 = *(void *)(v769 - 64);
                                          uint64_t v780 = *(void *)(v769 - 32);
                                          if (v777 == v779 && v778 == v780 || v777 == v780 && v778 == v779)
                                          {
                                            int v781 = *(_WORD *)(v769 + 18) & 0x3E;
                                            if (v777 == v779)
                                            {
                                              if (v781 != 38) {
                                                goto LABEL_1385;
                                              }
                                            }
                                            else if (v781 != 40)
                                            {
                                              goto LABEL_1385;
                                            }
                                            if (v779 == v16 || v780 == v16) {
                                              goto LABEL_1446;
                                            }
                                          }
LABEL_1385:
                                          uint64_t v782 = *(void *)(v2 - 64);
                                          uint64_t v783 = *(void *)(v2 - 32);
                                          uint64_t v784 = *(void *)(v769 - 64);
                                          uint64_t v785 = *(void *)(v769 - 32);
                                          if (v782 == v784 && v783 == v785 || v782 == v785 && v783 == v784)
                                          {
                                            int v786 = *(_WORD *)(v769 + 18) & 0x3E;
                                            if (v782 == v784)
                                            {
                                              if (v786 == 36)
                                              {
LABEL_1393:
                                                if (v784 == v16 || v785 == v16) {
                                                  goto LABEL_1446;
                                                }
                                              }
                                            }
                                            else if (v786 == 34)
                                            {
                                              goto LABEL_1393;
                                            }
                                          }
                                          uint64_t v787 = *(void *)(v2 - 64);
                                          uint64_t v788 = *(void *)(v2 - 32);
                                          uint64_t v789 = *(void *)(v769 - 64);
                                          uint64_t v790 = *(void *)(v769 - 32);
                                          if ((v787 != v789 || v788 != v790) && (v787 != v790 || v788 != v789)) {
                                            goto LABEL_1418;
                                          }
                                          int v791 = *(_WORD *)(v769 + 18) & 0x3E;
                                          if (v787 == v789)
                                          {
                                            if (v791 != 34) {
                                              goto LABEL_1418;
                                            }
                                          }
                                          else if (v791 != 36)
                                          {
                                            goto LABEL_1418;
                                          }
                                          if (v789 == v16 || v790 == v16) {
                                            goto LABEL_1446;
                                          }
LABEL_1418:
                                          v768 = *(v4 - 4);
                                          uint64_t v2 = (uint64_t)*(v4 - 8);
                                          int v3 = v1204;
                                          uint64_t v767 = v1206;
                                          goto LABEL_1419;
                                        }
                                      }
                                      if (v750 > 0x14) {
                                        goto LABEL_1334;
                                      }
                                      v792 = **(llvm::Constant ***)(v740 - 32);
                                      uint64_t v793 = *(llvm::Constant ****)v740;
                                      v794 = sub_1CC56C0C0((llvm *)0x26, (llvm::detail::IEEEFloat *)v749, v792, 0);
                                      if (llvm::ConstantExpr::getCast((llvm::ConstantExpr *)(*(unsigned __int8 *)(v740 + 16) - 28), v794, v793, 0) != (llvm::ConstantExpr *)v749)
                                      {
                                        if (v742 == 68 && v1202 >= 4 && *(unsigned char *)(v749 + 16) == 16)
                                        {
                                          int v795 = *((_WORD *)v4 + 9) & 0x3F;
                                          uint64_t v796 = operator new(0x80uLL);
                                          v796[21] = v796[21] & 0x38000000 | 2;
                                          uint64_t v38 = (llvm::Value *)(v796 + 16);
                                          *(void *)uint64_t v796 = 0;
                                          *((void *)v796 + 1) = 0;
                                          *((void *)v796 + 2) = 0;
                                          *((void *)v796 + 3) = v796 + 16;
                                          *((void *)v796 + 4) = 0;
                                          *((void *)v796 + 5) = 0;
                                          *((void *)v796 + 6) = 0;
                                          *((void *)v796 + 7) = v796 + 16;
                                          if (v795 == 36)
                                          {
                                            uint64_t v153 = (uint64_t)llvm::Constant::getAllOnesValue(v792, v797, v798);
                                            LOWORD(v1214) = 257;
                                            uint64_t v799 = *(void *)v12;
                                            uint64_t v72 = ***(void ***)v12 + 1888;
                                            if (*(void *)v12 && (*(_DWORD *)(v799 + 8) & 0xFE) == 0x12)
                                            {
                                              unint64_t v1062 = (uint64_t **)(***(void ***)v12 + 1888);
                                              int v1063 = (llvm::Type *)*(unsigned int *)(v799 + 32);
                                              if (*(_DWORD *)(v799 + 8) == 19) {
                                                llvm::ScalableVectorType::get(v1062, v1063);
                                              }
                                              else {
                                                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1062, v1063);
                                              }
                                              uint64_t v72 = v1064;
                                            }
                                            int v73 = v38;
                                            __int16 v74 = 38;
                                          }
                                          else
                                          {
                                            uint64_t v153 = (uint64_t)llvm::Constant::getNullValue(v792, v797, v798);
                                            LOWORD(v1214) = 257;
                                            uint64_t v828 = *(void *)v12;
                                            uint64_t v72 = ***(void ***)v12 + 1888;
                                            if (*(void *)v12 && (*(_DWORD *)(v828 + 8) & 0xFE) == 0x12)
                                            {
                                              unint64_t v1065 = (uint64_t **)(***(void ***)v12 + 1888);
                                              v1066 = (llvm::Type *)*(unsigned int *)(v828 + 32);
                                              if (*(_DWORD *)(v828 + 8) == 19) {
                                                llvm::ScalableVectorType::get(v1065, v1066);
                                              }
                                              else {
                                                llvm::FixedVectorType::get((llvm::FixedVectorType *)v1065, v1066);
                                              }
                                              uint64_t v72 = v1067;
                                            }
                                            int v73 = v38;
                                            __int16 v74 = 40;
                                          }
                                          uint64_t v75 = v12;
                                          goto LABEL_263;
                                        }
                                        goto LABEL_1334;
                                      }
                                      if ((*((_WORD *)v4 + 9) & 0x3E) == 0x20)
                                      {
                                        v821 = operator new(0x80uLL);
                                        uint64_t v38 = (llvm::Value *)(v821 + 16);
                                        v821[21] = v821[21] & 0x38000000 | 2;
                                        *(void *)v821 = 0;
                                        *((void *)v821 + 1) = 0;
                                        *((void *)v821 + 2) = 0;
                                        *((void *)v821 + 3) = v821 + 16;
                                        *((void *)v821 + 4) = 0;
                                        *((void *)v821 + 5) = 0;
                                        *((void *)v821 + 6) = 0;
                                        *((void *)v821 + 7) = v821 + 16;
                                        LOWORD(v4) = *((_WORD *)v4 + 9) & 0x3F;
                                      }
                                      else
                                      {
                                        v822 = operator new(0x80uLL);
                                        uint64_t v38 = (llvm::Value *)(v822 + 16);
                                        v822[21] = v822[21] & 0x38000000 | 2;
                                        *(void *)v822 = 0;
                                        *((void *)v822 + 1) = 0;
                                        *((void *)v822 + 2) = 0;
                                        *((void *)v822 + 3) = v822 + 16;
                                        *((void *)v822 + 4) = 0;
                                        *((void *)v822 + 5) = 0;
                                        *((void *)v822 + 6) = 0;
                                        *((void *)v822 + 7) = v822 + 16;
                                        __int16 v4 = (uint64_t ***)(*((_WORD *)v4 + 9) & 0x3FLL);
                                        if (v742 == 68 && v1202 <= 3)
                                        {
                                          LOWORD(v1214) = 257;
                                          uint64_t v823 = *(void *)v12;
                                          uint64_t v72 = ***(void ***)v12 + 1888;
                                          if (*(void *)v12 && (*(_DWORD *)(v823 + 8) & 0xFE) == 0x12)
                                          {
                                            uint64_t v1056 = (uint64_t **)(***(void ***)v12 + 1888);
                                            BOOL v1057 = (llvm::Type *)*(unsigned int *)(v823 + 32);
                                            if (*(_DWORD *)(v823 + 8) == 19) {
                                              llvm::ScalableVectorType::get(v1056, v1057);
                                            }
                                            else {
                                              llvm::FixedVectorType::get((llvm::FixedVectorType *)v1056, v1057);
                                            }
                                            uint64_t v72 = v1058;
                                          }
                                          int v73 = v38;
                                          __int16 v74 = (__int16)v4;
                                          goto LABEL_1496;
                                        }
                                        LODWORD(v4) = dword_1CFB278C8[(void)v4 - 32];
                                      }
                                      LOWORD(v1214) = 257;
                                      uint64_t v827 = *(void *)v12;
                                      uint64_t v72 = ***(void ***)v12 + 1888;
                                      if (*(void *)v12 && (*(_DWORD *)(v827 + 8) & 0xFE) == 0x12)
                                      {
                                        unint64_t v1027 = (uint64_t **)(***(void ***)v12 + 1888);
                                        int v1028 = (llvm::Type *)*(unsigned int *)(v827 + 32);
                                        if (*(_DWORD *)(v827 + 8) == 19) {
                                          llvm::ScalableVectorType::get(v1027, v1028);
                                        }
                                        else {
                                          llvm::FixedVectorType::get((llvm::FixedVectorType *)v1027, v1028);
                                        }
                                        uint64_t v72 = v1029;
                                      }
                                      int v73 = v38;
                                      __int16 v74 = (__int16)v4;
LABEL_1496:
                                      uint64_t v75 = v12;
                                      uint64_t v76 = (uint64_t)v794;
                                      goto LABEL_264;
                                    }
                                    uint64_t v677 = *(llvm::Type **)v1230;
                                    if ((*(_DWORD *)(*(void *)v1230 + 8) & 0xFE) == 0x12) {
                                      uint64_t v677 = (llvm::Type *)**((void **)v677 + 2);
                                    }
                                    unsigned int v678 = llvm::Type::getPrimitiveSizeInBits(v677);
                                    int v679 = v1231;
                                    if (v1231 == 36)
                                    {
                                      if (sub_1CCA4D700(v1229))
                                      {
                                        unint64_t v681 = *(void *)v1230;
                                        if (v678 > 0x40)
                                        {
                                          if (*((_DWORD *)v1229 + 2) != v678) {
                                            operator new[]();
                                          }
                                          sub_1CD0463BC((uint64_t)__p, (uint64_t)v1229);
                                        }
                                        else
                                        {
                                          uint64_t v682 = *(void *)v1229;
                                          LODWORD(__p[1]) = v678;
                                          unint64_t v683 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v678;
                                          if (!v678) {
                                            unint64_t v683 = 0;
                                          }
                                          __p[0] = (void *)(v683 & v682);
                                        }
                                        uint64_t v684 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v681, (llvm::LLVMContext *)__p, v680);
                                        if ((*(_DWORD *)(v681 + 8) & 0xFE) == 0x12) {
                                          uint64_t v684 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v681 + 32) | ((unint64_t)(*(_DWORD *)(v681 + 8) == 19) << 32)), (uint64_t)v684);
                                        }
                                        if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                                          MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                                        }
                                        unint64_t v12 = 257;
                                        LOWORD(v1214) = 257;
                                        v685 = sub_1CBF52474(v10, v1230, (uint64_t)v684, (uint64_t)__p);
                                        unsigned int v686 = operator new(0x80uLL);
                                        uint64_t v38 = (llvm::Value *)(v686 + 16);
                                        v686[21] = v686[21] & 0x38000000 | 2;
                                        *(void *)unsigned int v686 = 0;
                                        *((void *)v686 + 1) = 0;
                                        *((void *)v686 + 2) = 0;
                                        *((void *)v686 + 3) = v686 + 16;
                                        *((void *)v686 + 4) = 0;
                                        *((void *)v686 + 5) = 0;
                                        *((void *)v686 + 6) = 0;
                                        *((void *)v686 + 7) = v686 + 16;
                                        LOWORD(v1214) = 257;
                                        v687 = *(void ***)v685;
                                        uint64_t v688 = ***(void ***)v685 + 1888;
                                        if (*(void *)v685 && (v687[1] & 0xFE) == 0x12)
                                        {
                                          int64_t v1059 = (uint64_t **)(***(void ***)v685 + 1888);
                                          v1060 = (llvm::Type *)*((unsigned int *)v687 + 8);
                                          if (*((_DWORD *)v687 + 2) == 19) {
                                            llvm::ScalableVectorType::get(v1059, v1060);
                                          }
                                          else {
                                            llvm::FixedVectorType::get((llvm::FixedVectorType *)v1059, v1060);
                                          }
                                          uint64_t v688 = v1061;
                                        }
                                        __int16 v689 = v38;
                                        __int16 v690 = 33;
                                        goto LABEL_1294;
                                      }
                                      int v679 = v1231;
                                    }
                                    if (v679 != 34) {
                                      goto LABEL_1274;
                                    }
                                    unint64_t v12 = (unint64_t)v1229;
                                    unsigned int v721 = *((_DWORD *)v1229 + 2);
                                    unsigned int v1225 = v721;
                                    if (v721 > 0x40) {
                                      operator new[]();
                                    }
                                    uint64_t v722 = ~*(void *)v1229;
                                    unint64_t v723 = v721 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v721 : 0;
                                    v1224 = (llvm::ConstantExpr *)(v723 & v722);
                                    unsigned int v1225 = 0;
                                    uint8x8_t v724 = (uint8x8_t)vcnt_s8((int8x8_t)(v723 & v722));
                                    v724.i16[0] = vaddlv_u8(v724);
                                    if (v724.u32[0] != 1)
                                    {
LABEL_1274:
                                      uint64_t v38 = 0;
                                      goto LABEL_1295;
                                    }
                                    int v3 = *(uint64_t **)v1230;
                                    unsigned int v1217 = *((_DWORD *)v1229 + 2);
                                    if (v1217 > 0x40) {
                                      operator new[]();
                                    }
                                    __s1 = *(void **)v1229;
                                    llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
                                    unsigned int v736 = v1217;
                                    unsigned int v1221 = v1217;
                                    uint64_t __src = (uint64_t)__s1;
                                    unsigned int v1217 = 0;
                                    if (v678 > 0x40)
                                    {
                                      if (v736 != v678) {
                                        operator new[]();
                                      }
                                      sub_1CD0463BC((uint64_t)__p, (uint64_t)&__src);
                                    }
                                    else
                                    {
                                      LODWORD(__p[1]) = v678;
                                      unint64_t v737 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v678;
                                      if (!v678) {
                                        unint64_t v737 = 0;
                                      }
                                      __p[0] = (void *)(v737 & (unint64_t)__s1);
                                    }
LABEL_1280:
                                    uint64_t v684 = llvm::ConstantInt::get((llvm::ConstantInt *)*v3, (llvm::LLVMContext *)__p, v735);
                                    if ((v3[1] & 0xFE) == 0x12) {
                                      uint64_t v684 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v3 + 8) | ((unint64_t)(*((_DWORD *)v3 + 2) == 19) << 32)), (uint64_t)v684);
                                    }
                                    if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                                      MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                                    }
                                    if (v1221 >= 0x41 && __src) {
                                      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                                    }
                                    if (v1217 >= 0x41 && __s1) {
                                      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                                    }
                                    unint64_t v12 = 257;
                                    LOWORD(v1214) = 257;
                                    v685 = sub_1CBF52474(v10, v1230, (uint64_t)v684, (uint64_t)__p);
                                    v738 = operator new(0x80uLL);
                                    uint64_t v38 = (llvm::Value *)(v738 + 16);
                                    v738[21] = v738[21] & 0x38000000 | 2;
                                    *(void *)v738 = 0;
                                    *((void *)v738 + 1) = 0;
                                    *((void *)v738 + 2) = 0;
                                    *((void *)v738 + 3) = v738 + 16;
                                    *((void *)v738 + 4) = 0;
                                    *((void *)v738 + 5) = 0;
                                    *((void *)v738 + 6) = 0;
                                    *((void *)v738 + 7) = v738 + 16;
                                    LOWORD(v1214) = 257;
                                    uint64_t v739 = *(void *)v685;
                                    uint64_t v688 = ***(void ***)v685 + 1888;
                                    if (*(void *)v685 && (*(_DWORD *)(v739 + 8) & 0xFE) == 0x12)
                                    {
                                      int64_t v1068 = (uint64_t **)(***(void ***)v685 + 1888);
                                      v1069 = (llvm::Type *)*(unsigned int *)(v739 + 32);
                                      if (*(_DWORD *)(v739 + 8) == 19) {
                                        llvm::ScalableVectorType::get(v1068, v1069);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v1068, v1069);
                                      }
                                      uint64_t v688 = v1070;
                                    }
                                    __int16 v689 = v38;
                                    __int16 v690 = 32;
LABEL_1294:
                                    llvm::CmpInst::CmpInst(v689, v688, 53, v690, (uint64_t)v685, (uint64_t)v684, (const char **)__p, 0, 0);
                                    goto LABEL_1295;
                                  }
                                  v1224 = 0;
                                  unsigned int v410 = *(unsigned __int8 *)(v404 + 16);
                                  if (v410 > 0x1B || v410 == 5)
                                  {
                                    int v411 = v410 <= 0x1B ? *(unsigned __int16 *)(v404 + 18) : v410 - 28;
                                    if (v411 == 44)
                                    {
                                      int v462 = *(_DWORD *)(v404 + 20);
                                      uint64_t v463 = (v462 & 0x40000000) != 0
                                           ? *(llvm::ConstantExpr ***)(v404 - 8)
                                           : (llvm::ConstantExpr **)(v404 - 32 * (v462 & 0x7FFFFFF));
                                      uint64_t v488 = *v463;
                                      if (v488)
                                      {
                                        v1224 = v488;
                                        if (v406 <= 0x28 && ((1 << v406) & 0x14300000000) != 0)
                                        {
                                          if (v403)
                                          {
                                            unsigned int v489 = *((unsigned __int8 *)v403 + 16);
                                            if (v489 <= 0x14)
                                            {
                                              if (v489 == 16)
                                              {
                                                uint64_t v490 = *((unsigned int *)v403 + 8);
                                                if (v490 >= 0x41)
                                                {
                                                  int v1075 = 0;
                                                  int64_t v1076 = (unint64_t)(v490 + 63) >> 6;
                                                  do
                                                  {
                                                    BOOL v454 = v1076-- < 1;
                                                    if (v454) {
                                                      break;
                                                    }
                                                    unint64_t v1077 = *(void *)(*((void *)v403 + 3) + 8
                                                                                              * v1076);
                                                    v1075 += __clz(v1077);
                                                  }
                                                  while (!v1077);
                                                  int v1078 = v490 | 0xFFFFFFC0;
                                                  if ((v490 & 0x3F) == 0) {
                                                    int v1078 = 0;
                                                  }
                                                  if (v1075 + v1078 == v490) {
                                                    goto LABEL_883;
                                                  }
                                                }
                                                else if (!*((void *)v403 + 3))
                                                {
                                                  goto LABEL_883;
                                                }
                                              }
                                              else if (v489 == 17)
                                              {
                                                if (sub_1CB844168((uint64_t)v403, 0.0)) {
                                                  goto LABEL_883;
                                                }
                                              }
                                              else if (v489 - 18 < 3 || v489 == 13)
                                              {
                                                goto LABEL_883;
                                              }
                                              if (sub_1CC03F414((uint64_t)__p, v403)) {
                                                goto LABEL_883;
                                              }
                                            }
                                          }
                                        }
                                        if (v406 == 40)
                                        {
                                          if (sub_1CBF5250C((uint64_t)__p, v403))
                                          {
                                            int64_t v491 = operator new(0x80uLL);
                                            uint64_t v38 = (llvm::Value *)(v491 + 16);
                                            v491[21] = v491[21] & 0x38000000 | 2;
                                            *(void *)int64_t v491 = 0;
                                            *((void *)v491 + 1) = 0;
                                            *((void *)v491 + 2) = 0;
                                            *((void *)v491 + 3) = v491 + 16;
                                            *((void *)v491 + 4) = 0;
                                            *((void *)v491 + 5) = 0;
                                            *((void *)v491 + 6) = 0;
                                            *((void *)v491 + 7) = v491 + 16;
                                            int v190 = (unsigned __int8 *)v1224;
                                            unint64_t v492 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1224, 1uLL, 0);
                                            goto LABEL_850;
                                          }
                                          goto LABEL_874;
                                        }
                                        if (v406 != 38)
                                        {
LABEL_874:
                                          uint64_t v402 = v1204;
                                          goto LABEL_875;
                                        }
                                        uint64_t v402 = v1204;
                                        if (sub_1CBF687D0((uint64_t)__p, v403))
                                        {
                                          unint64_t v501 = operator new(0x80uLL);
                                          uint64_t v38 = (llvm::Value *)(v501 + 16);
                                          v501[21] = v501[21] & 0x38000000 | 2;
                                          *(void *)unint64_t v501 = 0;
                                          *((void *)v501 + 1) = 0;
                                          *((void *)v501 + 2) = 0;
                                          *((void *)v501 + 3) = v501 + 16;
                                          *((void *)v501 + 4) = 0;
                                          *((void *)v501 + 5) = 0;
                                          *((void *)v501 + 6) = 0;
                                          *((void *)v501 + 7) = v501 + 16;
                                          int v190 = (unsigned __int8 *)v1224;
                                          unsigned int v504 = *(llvm::Constant **)v1224;
LABEL_870:
                                          uint64_t Splat = (uint64_t)llvm::Constant::getAllOnesValue(v504, v502, v503);
                                          goto LABEL_871;
                                        }
                                      }
                                    }
                                  }
LABEL_875:
                                  __p[0] = &v1224;
                                  if (!sub_1CC0488B8((void **)__p, v404)) {
                                    goto LABEL_889;
                                  }
                                  if ((*((_WORD *)v4 + 9) & 0x3E) != 0x20) {
                                    goto LABEL_889;
                                  }
                                  if (!v403) {
                                    goto LABEL_889;
                                  }
                                  unsigned int v506 = *((unsigned __int8 *)v403 + 16);
                                  if (v506 > 0x14) {
                                    goto LABEL_889;
                                  }
                                  if (v506 == 16)
                                  {
                                    uint64_t v507 = *((unsigned int *)v403 + 8);
                                    if (v507 < 0x41)
                                    {
                                      if (*((void *)v403 + 3)) {
                                        goto LABEL_882;
                                      }
LABEL_883:
                                      uint64_t v508 = operator new(0x80uLL);
                                      uint64_t v38 = (llvm::Value *)(v508 + 16);
                                      v508[21] = v508[21] & 0x38000000 | 2;
                                      *(void *)uint64_t v508 = 0;
                                      *((void *)v508 + 1) = 0;
                                      *((void *)v508 + 2) = 0;
                                      *((void *)v508 + 3) = v508 + 16;
                                      *((void *)v508 + 4) = 0;
                                      *((void *)v508 + 5) = 0;
                                      *((void *)v508 + 6) = 0;
                                      *((void *)v508 + 7) = v508 + 16;
                                      int v190 = (unsigned __int8 *)v1224;
                                      uint64_t Splat = (uint64_t)llvm::Constant::getNullValue(*(llvm::Constant **)v1224, v509, v510);
LABEL_884:
                                      LOWORD(v1214) = 257;
                                      goto LABEL_885;
                                    }
                                    int v1071 = 0;
                                    int64_t v1072 = (unint64_t)(v507 + 63) >> 6;
                                    do
                                    {
                                      BOOL v454 = v1072-- < 1;
                                      if (v454) {
                                        break;
                                      }
                                      unint64_t v1073 = *(void *)(*((void *)v403 + 3) + 8 * v1072);
                                      v1071 += __clz(v1073);
                                    }
                                    while (!v1073);
                                    int v1074 = v507 | 0xFFFFFFC0;
                                    if ((v507 & 0x3F) == 0) {
                                      int v1074 = 0;
                                    }
                                    if (v1071 + v1074 == v507) {
                                      goto LABEL_883;
                                    }
                                  }
                                  else if (v506 == 17)
                                  {
                                    if (sub_1CB844168((uint64_t)v403, 0.0)) {
                                      goto LABEL_883;
                                    }
                                  }
                                  else if (v506 - 18 < 3 || v506 == 13)
                                  {
                                    goto LABEL_883;
                                  }
LABEL_882:
                                  uint64_t v402 = v1204;
                                  if (sub_1CC03F414((uint64_t)__p, v403)) {
                                    goto LABEL_883;
                                  }
LABEL_889:
                                  uint64_t __src = 0;
                                  LOBYTE(__s1) = 0;
                                  __p[0] = &__src;
                                  __p[1] = 0;
                                  if (sub_1CBF528D8((uint64_t)__p, (unsigned __int8 *)v403))
                                  {
                                    uint64_t v512 = *((void *)v401 + 1);
                                    if (v512)
                                    {
                                      if (!*(void *)(v512 + 8) && sub_1CC9EAA5C(v406, (llvm::APInt *)__src, &__s1))
                                      {
                                        __p[0] = &v1224;
                                        if (sub_1CCA38AD0((void **)__p, v404))
                                        {
                                          int v513 = v1224;
LABEL_895:
                                          uint64_t v514 = *(void *)v513;
                                          int v515 = *(unsigned __int8 *)(*(void *)v513 + 8);
                                          uint64_t v402 = v1204;
                                          if (v515 != 6 && *(unsigned char *)(*(void *)v404 + 8) != 6)
                                          {
                                            uint64_t v516 = *(void *)(a1 + 24);
                                            unsigned int v517 = (llvm::Type *)v514;
                                            if ((v515 & 0xFE) == 0x12) {
                                              unsigned int v517 = **(llvm::Type ***)(v514 + 16);
                                            }
                                            char v518 = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v517);
                                            uint64_t v519 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)(v516 + 64), v518);
                                            int64_t v521 = (llvm::Constant *)v519;
                                            if ((*(_DWORD *)(v514 + 8) & 0xFE) == 0x12)
                                            {
                                              unint64_t v522 = (llvm::Type *)*(unsigned int *)(v514 + 32);
                                              if (*(_DWORD *)(v514 + 8) == 19) {
                                                v520.n128_f64[0] = llvm::ScalableVectorType::get(v519, v522);
                                              }
                                              else {
                                                v520.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v519, v522);
                                              }
                                              int64_t v521 = v523;
                                            }
                                            char v524 = *(uint64_t **)(a1 + 24);
                                            int v190 = (unsigned __int8 *)v1224;
                                            __int16 v1236 = 257;
                                            if (*(llvm::Constant **)v1224 != v521)
                                            {
                                              if (*((unsigned __int8 *)v1224 + 16) <= 0x14u)
                                              {
                                                uint64_t v725 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::ConstantExpr *, llvm::Constant *, __n128))(*(void *)v524[9] + 224))(v524[9], 49, v1224, v521, v520);
                                                int v190 = (unsigned __int8 *)v725;
                                                if (v725)
                                                {
                                                  if (*(unsigned __int8 *)(v725 + 16) >= 0x1Cu)
                                                  {
                                                    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v524[10] + 16))(v524[10], v725, &v1232, v524[6], v524[7]);
                                                    uint64_t v1118 = *((unsigned int *)v524 + 2);
                                                    if (v1118)
                                                    {
                                                      uint64_t v1119 = *v524;
                                                      uint64_t v1120 = v1119 + 16 * v1118;
                                                      do
                                                      {
                                                        llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v1119, *(llvm::MDNode **)(v1119 + 8));
                                                        v1119 += 16;
                                                      }
                                                      while (v1119 != v1120);
                                                    }
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                LOWORD(v1214) = 257;
                                                int v190 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1224, (uint64_t)v521, (const char **)__p, 0);
                                                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)v524[10] + 16))(v524[10], v190, &v1232, v524[6], v524[7]);
                                                uint64_t v525 = *((unsigned int *)v524 + 2);
                                                if (v525)
                                                {
                                                  uint64_t v526 = *v524;
                                                  uint64_t v527 = v526 + 16 * v525;
                                                  do
                                                  {
                                                    llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v526, *(llvm::MDNode **)(v526 + 8));
                                                    v526 += 16;
                                                  }
                                                  while (v526 != v527);
                                                }
                                              }
                                            }
                                            int v726 = __s1;
                                            v727 = operator new(0x80uLL);
                                            v727[21] = v727[21] & 0x38000000 | 2;
                                            uint64_t v38 = (llvm::Value *)(v727 + 16);
                                            *(void *)v727 = 0;
                                            *((void *)v727 + 1) = 0;
                                            *((void *)v727 + 2) = 0;
                                            *((void *)v727 + 3) = v727 + 16;
                                            *((void *)v727 + 4) = 0;
                                            *((void *)v727 + 5) = 0;
                                            *((void *)v727 + 6) = 0;
                                            *((void *)v727 + 7) = v727 + 16;
                                            unsigned int v504 = v521;
                                            if (v726)
                                            {
                                              unint64_t v492 = llvm::Constant::getNullValue(v521, v502, v503);
LABEL_850:
                                              uint64_t Splat = (uint64_t)v492;
                                              LOWORD(v1214) = 257;
                                              uint64_t v493 = *(void *)v190;
                                              uint64_t v72 = ***(void ***)v190 + 1888;
                                              if (*(void *)v190 && (*(_DWORD *)(v493 + 8) & 0xFE) == 0x12)
                                              {
                                                v1000 = (uint64_t **)(***(void ***)v190 + 1888);
                                                uint64_t v1001 = (llvm::Type *)*(unsigned int *)(v493 + 32);
                                                if (*(_DWORD *)(v493 + 8) == 19) {
                                                  llvm::ScalableVectorType::get(v1000, v1001);
                                                }
                                                else {
                                                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v1000, v1001);
                                                }
                                                uint64_t v72 = v1002;
                                              }
                                              int v73 = v38;
                                              __int16 v74 = 40;
                                              goto LABEL_888;
                                            }
                                            goto LABEL_870;
                                          }
                                          goto LABEL_1058;
                                        }
                                        unsigned int v533 = *(unsigned __int8 *)(v404 + 16);
                                        if (v533 > 0x1B || v533 == 5)
                                        {
                                          int v534 = v533 <= 0x1B ? *(unsigned __int16 *)(v404 + 18) : v533 - 28;
                                          if (v534 == 45)
                                          {
                                            int v595 = *(_DWORD *)(v404 + 20);
                                            int8x8_t v596 = (v595 & 0x40000000) != 0
                                                 ? *(llvm::ConstantExpr ***)(v404 - 8)
                                                 : (llvm::ConstantExpr **)(v404 - 32 * (v595 & 0x7FFFFFF));
                                            int v513 = *v596;
                                            if (v513)
                                            {
                                              v1224 = v513;
                                              goto LABEL_895;
                                            }
                                          }
                                        }
                                        uint64_t v402 = v1204;
                                      }
                                    }
                                  }
LABEL_1058:
                                  int v409 = *(unsigned __int8 *)(*(void *)v401 + 8);
                                  goto LABEL_1059;
                                }
LABEL_800:
                                v470 = *v468;
                                uint64_t v471 = *v468;
                                if ((*((_DWORD *)*v468 + 2) & 0xFE) == 0x12) {
                                  uint64_t v471 = (llvm::Type *)**((void **)v470 + 2);
                                }
                                unsigned int v472 = llvm::Type::getPrimitiveSizeInBits(v471);
                                LODWORD(v1233) = v472;
                                if (v472 > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v1232);
                                }
                                unint64_t v473 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v472;
                                if (!v472) {
                                  LODWORD(v473) = 0;
                                }
                                uint64_t v1232 = v473 & (v472 - 1);
                                __p[0] = (void *)32;
                                __p[1] = &v1232;
                                char v476 = sub_1CC9F981C((uint64_t)__p, (llvm::Constant *)v469);
                                if (v1233 >= 0x41 && v1232) {
                                  MEMORY[0x1D25D9CB0](v1232, 0x1000C8000313F17);
                                }
                                if ((v476 & 1) == 0) {
                                  goto LABEL_680;
                                }
                                goto LABEL_807;
                              }
                              unsigned int v156 = *((_DWORD *)v1207 + 2);
                              if (v156 > 0x40)
                              {
                                if (((*(void *)(*(void *)v1207 + 8 * ((v156 - 1) >> 6)) >> (v156
                                                                                                 - 1)) & 1) != 0
                                  || llvm::APInt::countTrailingOnesSlowCase(v1207) != v156 - 1)
                                {
                                  goto LABEL_677;
                                }
                              }
                              else if (*(void *)v1207 != ~(-1 << (v156 - 1)))
                              {
                                goto LABEL_677;
                              }
                              uint64_t v153 = (uint64_t)llvm::Constant::getNullValue(*(llvm::Constant **)v8, v150, v151);
                              unint64_t v157 = operator new(0x80uLL);
                              uint64_t v38 = (llvm::Value *)(v157 + 16);
                              v157[21] = v157[21] & 0x38000000 | 2;
                              *(void *)unint64_t v157 = 0;
                              *((void *)v157 + 1) = 0;
                              *((void *)v157 + 2) = 0;
                              *((void *)v157 + 3) = v157 + 16;
                              *((void *)v157 + 4) = 0;
                              *((void *)v157 + 5) = 0;
                              *((void *)v157 + 6) = 0;
                              *((void *)v157 + 7) = v157 + 16;
                              LOWORD(v1214) = 257;
                              unint64_t v158 = *(llvm::Constant **)v8;
                              uint64_t v72 = ***(void ***)v8 + 1888;
                              if (*(void *)v8 && (*((_DWORD *)v158 + 2) & 0xFE) == 0x12)
                              {
                                unsigned int v200 = (uint64_t **)(***(void ***)v8 + 1888);
                                unsigned int v201 = (llvm::Type *)*((unsigned int *)v158 + 8);
                                if (*((_DWORD *)v158 + 2) == 19) {
                                  llvm::ScalableVectorType::get(v200, v201);
                                }
                                else {
                                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v200, v201);
                                }
                                uint64_t v72 = v202;
                              }
                              int v73 = v38;
                              __int16 v74 = 40;
                              goto LABEL_262;
                            }
                            uint64_t v266 = operator new(0x80uLL);
                            uint64_t v38 = (llvm::Value *)(v266 + 16);
                            v266[21] = v266[21] & 0x38000000 | 2;
                            *(void *)uint64_t v266 = 0;
                            *((void *)v266 + 1) = 0;
                            *((void *)v266 + 2) = 0;
                            *((void *)v266 + 3) = v266 + 16;
                            *((void *)v266 + 4) = 0;
                            *((void *)v266 + 5) = 0;
                            *((void *)v266 + 6) = 0;
                            *((void *)v266 + 7) = v266 + 16;
                            uint64_t v268 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(void *)(a1 + 24) + 64), (llvm::LLVMContext *)&__s1, v267);
                            LOWORD(v1214) = 257;
                            uint64_t v269 = *v117;
                            uint64_t v270 = **(void **)*v117 + 1888;
                            if (*v117 && (*(_DWORD *)(v269 + 8) & 0xFE) == 0x12)
                            {
                              uint64_t v339 = (uint64_t **)(**(void **)*v117 + 1888);
                              unsigned int v340 = (llvm::Type *)*(unsigned int *)(v269 + 32);
                              if (*(_DWORD *)(v269 + 8) == 19) {
                                llvm::ScalableVectorType::get(v339, v340);
                              }
                              else {
                                llvm::FixedVectorType::get((llvm::FixedVectorType *)v339, v340);
                              }
                              uint64_t v270 = v341;
                            }
                            llvm::CmpInst::CmpInst(v38, v270, 53, 33, (uint64_t)v117, (uint64_t)v268, (const char **)__p, 0, 0);
                          }
LABEL_517:
                          int v306 = 1;
                          goto LABEL_518;
                        }
                      }
                    }
                    uint64_t v38 = 0;
                    goto LABEL_517;
                  }
                }
                else if ((unint64_t)__s2 | (unint64_t)__s1)
                {
                  goto LABEL_341;
                }
                unint64_t v327 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
                uint64_t v328 = *v327;
                uint8x8_t v319 = *(llvm::Value **)(*v327 + 1560);
                if (!v319)
                {
                  int v329 = *(llvm::ConstantInt **)(v328 + 1888);
                  unsigned int v330 = *(_DWORD *)(v328 + 1896);
                  LODWORD(__p[1]) = v330 >> 8;
                  if (v330 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v330 <= 0xFF) {
                    char v331 = 0;
                  }
                  else {
                    char v331 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v330) + 63);
                  }
                  __p[0] = (void *)(v331 & 1);
                  uint8x8_t v319 = (llvm::Value *)llvm::ConstantInt::get(v329, (llvm::LLVMContext *)__p, v211);
                  if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                    MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                  }
                  *(void *)(v328 + 1560) = v319;
                }
LABEL_516:
                uint64_t v38 = (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v4, v319);
                goto LABEL_517;
              }
              uint64_t v317 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
              uint64_t v318 = *v317;
              uint8x8_t v319 = *(llvm::Value **)(*v317 + 1568);
              if (!v319)
              {
                char v320 = *(llvm::ConstantInt **)(v318 + 1888);
                unsigned int v321 = *(_DWORD *)(v318 + 1896);
                LODWORD(__p[1]) = v321 >> 8;
                if (v321 >> 8 > 0x40) {
                  operator new[]();
                }
                __p[0] = 0;
                uint8x8_t v319 = (llvm::Value *)llvm::ConstantInt::get(v320, (llvm::LLVMContext *)__p, v211);
                if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
                  MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
                }
                *(void *)(v318 + 1568) = v319;
              }
              goto LABEL_516;
            }
            unsigned __int16 isImpliedCondition = llvm::isImpliedCondition((uint64_t *)v111, v116 & 0x3F, (uint64_t)*(v4 - 8), (uint64_t)*(v4 - 4), *(const llvm::DataLayout **)(a1 + 80), v112 == v105, 0);
            if (isImpliedCondition <= 0xFFu)
            {
              __int16 v116 = *((_WORD *)v4 + 9);
              int v117 = *(v4 - 8);
              int v118 = (unsigned __int8 *)*(v4 - 4);
              goto LABEL_186;
            }
            BOOL v115 = isImpliedCondition;
          }
          uint64_t v120 = (llvm::Value *)llvm::ConstantInt::get((llvm::ConstantInt *)*v4, v115, 0);
          uint64_t v38 = (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v4, v120);
          goto LABEL_195;
        }
        int v389 = *(unsigned __int8 *)v1232;
        if ((v389 - 4) > 0x1E)
        {
          if ((v389 - 3) >= 0xFFFFFFFE) {
            int8x8_t v392 = (int8x8_t)v1232;
          }
          else {
            int8x8_t v392 = 0;
          }
          if ((v389 - 3) < 0xFFFFFFFE)
          {
            if (v389 == 3) {
              *(void *)(v1232 + 8) = 0;
            }
            goto LABEL_601;
          }
          unint64_t v391 = *(void *)&v392 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v1232 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1232 + 12)) {
            goto LABEL_601;
          }
          uint64_t v390 = *(void *)(v1232 + 16);
          if ((v390 & 4) == 0) {
            goto LABEL_601;
          }
          unint64_t v391 = v390 & 0xFFFFFFFFFFFFFFF8;
          if (!v391) {
            goto LABEL_601;
          }
        }
        __p[0] = &v1232;
        sub_1CC5FA668(v391 + 16, __p);
        goto LABEL_601;
      }
      int v186 = *(_DWORD *)(v78 + 20);
      if ((v186 & 0x40000000) != 0) {
        int64_t v187 = *(llvm::ValueAsMetadata ***)(v78 - 8);
      }
      else {
        int64_t v187 = (llvm::ValueAsMetadata **)(v78 - 32 * (v186 & 0x7FFFFFF));
      }
      v1196 = *v187;
      uint64_t v236 = *((void *)*v187 + 1);
      for (uint64_t i = (llvm::LLVMContext *)(v163 + 1); v236; v236 = *(void *)(v236 + 8))
      {
        uint64_t v238 = *(void *)(v236 + 24);
        if (v238 != v78)
        {
          if (!v238 || *(unsigned char *)(v238 + 16) != 66) {
            goto LABEL_157;
          }
          unint64_t v240 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v238);
          if (v239 == 1) {
          uint64_t i = v1199;
          }
          if (v240 > (unint64_t)v1199) {
            goto LABEL_157;
          }
        }
      }
      v1224 = 0;
      v1224 = (llvm::ConstantExpr *)llvm::IntegerType::get(**(llvm::IntegerType ***)v1196, i);
      uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)v4[5][7][5], 263, (uint64_t)&v1224, 1);
      uint64_t v242 = 0;
      uint64_t v243 = *(void *)(a1 + 24);
      *(void *)(v243 + 48) = *((void *)v1196 + 5);
      *(void *)(v243 + 56) = (char *)v1196 + 24;
      unint64_t v244 = (unsigned __int8 *)*((void *)v1196 + 6);
      uint64_t v1232 = (uint64_t)v244;
      if (v244)
      {
        llvm::MetadataTracking::track((uint64_t)&v1232, v244, 2);
        uint64_t v242 = v1232;
      }
      sub_1CB8461A4(v243, 0, v242);
      if (!v1232)
      {
LABEL_393:
        if ((v84[23] & 0x10) != 0)
        {
          uint64_t v245 = ***(void ***)v84;
          uint64_t v246 = *(void *)(v245 + 152);
          uint64_t v247 = *(unsigned int *)(v245 + 168);
          if (v247)
          {
            LODWORD(v248) = (v247 - 1) & ((v84 >> 4) ^ (v84 >> 9));
            int8x8_t v249 = (unsigned __int8 **)(v246 + 16 * v248);
            uint8x8_t v250 = *v249;
            if (*v249 != v84)
            {
              int v251 = 1;
              do
              {
                if (v250 == (unsigned __int8 *)-4096) {
                  goto LABEL_430;
                }
                int v252 = v248 + v251++;
                uint64_t v248 = v252 & (v247 - 1);
                uint8x8_t v250 = *(unsigned __int8 **)(v246 + 16 * v248);
              }
              while (v250 != v84);
              int8x8_t v249 = (unsigned __int8 **)(v246 + 16 * v248);
            }
          }
          else
          {
LABEL_430:
            int8x8_t v249 = (unsigned __int8 **)(v246 + 16 * v247);
          }
          unint64_t v271 = v249[1];
          uint64_t v274 = *(void *)v271;
          unint64_t v272 = (char *)(v271 + 16);
          uint64_t v273 = v274;
        }
        else
        {
          uint64_t v273 = 0;
          unint64_t v272 = &byte_1CFBCE98E;
        }
        __int16 v1236 = 773;
        uint64_t v1232 = (uint64_t)v272;
        uint64_t v1233 = v273;
        unsigned int v1234 = ".trunc";
        if (*(llvm::ConstantExpr **)v84 != v1224)
        {
          if (v84[16] <= 0x14u)
          {
            uint64_t v84 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::ConstantExpr *))(**(void **)(v243 + 72) + 224))(*(void *)(v243 + 72), 38, v84, v1224);
            if (v84) {
              BOOL v278 = v84[16] >= 0x1Cu;
            }
            else {
              BOOL v278 = 0;
            }
            if (v278)
            {
              (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v243 + 80)
                                                                                           + 16))(*(void *)(v243 + 80), v84, &v1232, *(void *)(v243 + 48), *(void *)(v243 + 56));
              uint64_t v1105 = *(unsigned int *)(v243 + 8);
              if (v1105)
              {
                uint64_t v1106 = *(void *)v243;
                uint64_t v1107 = *(void *)v243 + 16 * v1105;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v84, *(_DWORD *)v1106, *(llvm::MDNode **)(v1106 + 8));
                  v1106 += 16;
                }
                while (v1106 != v1107);
              }
            }
          }
          else
          {
            LOWORD(v1214) = 257;
            uint64_t v84 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v84, (uint64_t)v1224, (const char **)__p, 0);
            (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v243 + 80)
                                                                                         + 16))(*(void *)(v243 + 80), v84, &v1232, *(void *)(v243 + 48), *(void *)(v243 + 56));
            uint64_t v275 = *(unsigned int *)(v243 + 8);
            if (v275)
            {
              uint64_t v276 = *(void *)v243;
              uint64_t v277 = *(void *)v243 + 16 * v275;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v84, *(_DWORD *)v276, *(llvm::MDNode **)(v276 + 8));
                v276 += 16;
              }
              while (v276 != v277);
            }
          }
        }
        if ((v85[23] & 0x10) != 0)
        {
          uint64_t v279 = ***(void ***)v85;
          uint64_t v280 = *(void *)(v279 + 152);
          uint64_t v281 = *(unsigned int *)(v279 + 168);
          if (v281)
          {
            LODWORD(v282) = (v281 - 1) & ((v85 >> 4) ^ (v85 >> 9));
            uint64_t v283 = (unsigned __int8 **)(v280 + 16 * v282);
            uint64_t v284 = *v283;
            if (*v283 != v85)
            {
              int v285 = 1;
              do
              {
                if (v284 == (unsigned __int8 *)-4096) {
                  goto LABEL_449;
                }
                int v286 = v282 + v285++;
                uint64_t v282 = v286 & (v281 - 1);
                uint64_t v284 = *(unsigned __int8 **)(v280 + 16 * v282);
              }
              while (v284 != v85);
              uint64_t v283 = (unsigned __int8 **)(v280 + 16 * v282);
            }
          }
          else
          {
LABEL_449:
            uint64_t v283 = (unsigned __int8 **)(v280 + 16 * v281);
          }
          uint64_t v287 = v283[1];
          uint64_t v290 = *(void *)v287;
          uint64_t v288 = (char *)(v287 + 16);
          uint64_t v289 = v290;
        }
        else
        {
          uint64_t v289 = 0;
          uint64_t v288 = &byte_1CFBCE98E;
        }
        __int16 v1236 = 773;
        uint64_t v1232 = (uint64_t)v288;
        uint64_t v1233 = v289;
        unsigned int v1234 = ".trunc";
        if (*(llvm::ConstantExpr **)v85 != v1224)
        {
          if (v85[16] <= 0x14u)
          {
            uint64_t v85 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::ConstantExpr *))(**(void **)(v243 + 72) + 224))(*(void *)(v243 + 72), 38, v85, v1224);
            if (v85) {
              BOOL v294 = v85[16] >= 0x1Cu;
            }
            else {
              BOOL v294 = 0;
            }
            if (v294)
            {
              (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v243 + 80)
                                                                                           + 16))(*(void *)(v243 + 80), v85, &v1232, *(void *)(v243 + 48), *(void *)(v243 + 56));
              uint64_t v1108 = *(unsigned int *)(v243 + 8);
              if (v1108)
              {
                uint64_t v1109 = *(void *)v243;
                uint64_t v1110 = *(void *)v243 + 16 * v1108;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v85, *(_DWORD *)v1109, *(llvm::MDNode **)(v1109 + 8));
                  v1109 += 16;
                }
                while (v1109 != v1110);
              }
            }
          }
          else
          {
            LOWORD(v1214) = 257;
            uint64_t v85 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v85, (uint64_t)v1224, (const char **)__p, 0);
            (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v243 + 80)
                                                                                         + 16))(*(void *)(v243 + 80), v85, &v1232, *(void *)(v243 + 48), *(void *)(v243 + 56));
            uint64_t v291 = *(unsigned int *)(v243 + 8);
            if (v291)
            {
              uint64_t v292 = *(void *)v243;
              uint64_t v293 = *(void *)v243 + 16 * v291;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v85, *(_DWORD *)v292, *(llvm::MDNode **)(v292 + 8));
                v292 += 16;
              }
              while (v292 != v293);
            }
          }
        }
        if (Declaration) {
          unint64_t v295 = *(uint64_t ***)(Declaration + 24);
        }
        else {
          unint64_t v295 = 0;
        }
        uint64_t v1232 = (uint64_t)v84;
        uint64_t v1233 = (uint64_t)v85;
        __p[0] = "sadd";
        LOWORD(v1214) = 259;
        uint64_t v296 = (uint64_t *)sub_1CB845BAC((uint64_t *)v243, v295, (uint64_t **)Declaration, &v1232, 2, (uint64_t)__p, 0);
        LODWORD(v1232) = 0;
        __p[0] = "sadd.result";
        LOWORD(v1214) = 259;
        unsigned int v297 = sub_1CC2415A4(v243, v296, (unsigned int *)&v1232, 1, (uint64_t)__p);
        uint64_t v298 = (unsigned __int8 *)v297;
        uint64_t v299 = *(llvm::IntegerType ***)v1196;
        __int16 v1236 = 257;
        if (*(llvm::IntegerType ***)v297 != v299)
        {
          if (*((unsigned __int8 *)v297 + 16) <= 0x14u)
          {
            uint64_t v298 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::IntegerType **))(**(void **)(v243 + 72) + 224))(*(void *)(v243 + 72), 39, v297, v299);
            if (v298) {
              BOOL v303 = v298[16] >= 0x1Cu;
            }
            else {
              BOOL v303 = 0;
            }
            if (v303)
            {
              (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v243 + 80)
                                                                                           + 16))(*(void *)(v243 + 80), v298, &v1232, *(void *)(v243 + 48), *(void *)(v243 + 56));
              uint64_t v1111 = *(unsigned int *)(v243 + 8);
              if (v1111)
              {
                uint64_t v1112 = *(void *)v243;
                uint64_t v1113 = v1112 + 16 * v1111;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v298, *(_DWORD *)v1112, *(llvm::MDNode **)(v1112 + 8));
                  v1112 += 16;
                }
                while (v1112 != v1113);
              }
            }
          }
          else
          {
            LOWORD(v1214) = 257;
            uint64_t v298 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v297, (uint64_t)v299, (const char **)__p, 0);
            (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(v243 + 80)
                                                                                         + 16))(*(void *)(v243 + 80), v298, &v1232, *(void *)(v243 + 48), *(void *)(v243 + 56));
            uint64_t v300 = *(unsigned int *)(v243 + 8);
            if (v300)
            {
              uint64_t v301 = *(void *)v243;
              uint64_t v302 = v301 + 16 * v300;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v298, *(_DWORD *)v301, *(llvm::MDNode **)(v301 + 8));
                v301 += 16;
              }
              while (v301 != v302);
            }
          }
        }
        sub_1CC9D3C84(a1, v1196, (llvm::Value *)v298);
        sub_1CC9D6844(a1, (uint64_t)v1196);
      }
      int v307 = *(unsigned __int8 *)v1232;
      if ((v307 - 4) > 0x1E)
      {
        if ((v307 - 3) >= 0xFFFFFFFE) {
          int8x8_t v311 = (int8x8_t)v1232;
        }
        else {
          int8x8_t v311 = 0;
        }
        if ((v307 - 3) < 0xFFFFFFFE)
        {
          if (v307 == 3) {
            *(void *)(v1232 + 8) = 0;
          }
          goto LABEL_393;
        }
        unint64_t v309 = *(void *)&v311 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v1232 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1232 + 12)) {
          goto LABEL_393;
        }
        uint64_t v308 = *(void *)(v1232 + 16);
        if ((v308 & 4) == 0) {
          goto LABEL_393;
        }
        unint64_t v309 = v308 & 0xFFFFFFFFFFFFFFF8;
        if (!v309) {
          goto LABEL_393;
        }
      }
      __p[0] = &v1232;
      sub_1CC5FA668(v309 + 16, __p);
      goto LABEL_393;
    }
LABEL_75:
    LOWORD(v1214) = 257;
    BOOL v52 = (int8x8_t *)__p;
    BOOL v53 = (llvm::Constant **)v48;
LABEL_76:
    Not = llvm::BinaryOperator::CreateNot(v53, (llvm::Value *)v52, 0, v35);
    goto LABEL_101;
  }
  uint64_t v45 = v43;
  if (v43 != (llvm::Constant *)__src) {
    goto LABEL_65;
  }
LABEL_89:
  __int16 v60 = *((_WORD *)v4 + 9) & 0x3F;
  LOWORD(v1214) = 257;
  return (llvm::Value *)llvm::CmpInst::Create(53, v60, v45, v26, (const char **)__p, 0);
}

llvm::Value *sub_1CCA730CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a2 + 8) != 13 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return 0;
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    int v11 = *(uint64_t **)(a2 - 8);
  }
  else {
    int v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
  }
  uint64_t v12 = *v11;
  uint64_t v13 = v11[4];
  int v14 = *(_DWORD *)(v12 + 20);
  if ((v14 & 0x40000000) != 0) {
    __int16 v15 = *(llvm::Type ****)(v12 - 8);
  }
  else {
    __int16 v15 = (llvm::Type ***)(v12 - 32 * (v14 & 0x7FFFFFF));
  }
  uint64_t v16 = *v15;
  int v17 = *(_DWORD *)(v13 + 20);
  if ((v17 & 0x40000000) != 0) {
    int v18 = *(llvm::Type ****)(v13 - 8);
  }
  else {
    int v18 = (llvm::Type ***)(v13 - 32 * (v17 & 0x7FFFFFF));
  }
  int8x8_t v182 = (unsigned __int8 *)*v18;
  unsigned int v184 = (llvm::Value *)v16;
  uint64_t v19 = *v16;
  int v20 = **v18;
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v16);
  if (v21 == 1) {
  unsigned int v25 = llvm::Type::getPrimitiveSizeInBits(v20);
  }
  if (v23 == 1) {
  if (v25 <= PrimitiveSizeInBits)
  }
    uint64_t v26 = (uint64_t)v19;
  else {
    uint64_t v26 = (uint64_t)v20;
  }
  if (v25 <= PrimitiveSizeInBits) {
    uint64_t v27 = PrimitiveSizeInBits;
  }
  else {
    uint64_t v27 = v25;
  }
  uint64_t v192 = v26;
  uint64_t v28 = *(void *)(a2 + 8);
  if (v28)
  {
    LODWORD(v24) = -1;
    uint64_t v29 = *(void *)(a2 + 8);
    do
    {
      int v30 = (int)v24;
      if (!v24) {
        break;
      }
      uint64_t v29 = *(void *)(v29 + 8);
      LODWORD(v24) = v24 + 1;
    }
    while (v29);
    if (!v30)
    {
      do
      {
        uint64_t v39 = *(void *)(v28 + 24);
        if (v39 != a1)
        {
          int v40 = *(unsigned __int8 *)(v39 + 16);
          if (v39 && v40 == 66)
          {
            unsigned int v42 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v39);
            if (v41 == 1) {
            if (v27 < v42)
            }
              return 0;
          }
          else
          {
            uint64_t v5 = 0;
            if (!v39 || v40 != 56) {
              return (llvm::Value *)v5;
            }
            uint64_t v43 = *(void *)(v39 - 32);
            if (v43) {
              BOOL v44 = *(unsigned char *)(v43 + 16) == 16;
            }
            else {
              BOOL v44 = 0;
            }
            if (!v44) {
              return 0;
            }
            uint64_t v45 = *(unsigned int *)(v43 + 32);
            if (v45 > 0x40)
            {
              LODWORD(v24) = 0;
              int64_t v47 = (unint64_t)(v45 + 63) >> 6;
              do
              {
                BOOL v131 = v47-- < 1;
                if (v131) {
                  break;
                }
                unint64_t v48 = *(void *)(*(void *)(v43 + 24) + 8 * v47);
                LODWORD(v24) = v24 + __clz(v48);
              }
              while (!v48);
              int v49 = v45 | 0xFFFFFFC0;
              if ((v45 & 0x3F) == 0) {
                int v49 = 0;
              }
              int v46 = v24 + v49;
            }
            else
            {
              int v46 = v45 + __clz(*(void *)(v43 + 24)) - 64;
            }
            if ((int)v45 - v46 > v27) {
              return 0;
            }
          }
        }
        uint64_t v28 = *(void *)(v28 + 8);
      }
      while (v28);
    }
  }
  switch(*(_WORD *)(a1 + 18) & 0x3F)
  {
    case ' ':
    case '!':
      int v31 = *(unsigned __int8 *)(a3 + 16);
      if (v31 != 56)
      {
        if (v31 == 5)
        {
          if (*(_WORD *)(a3 + 18) == 28)
          {
            int v24 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
            uint64_t v32 = *v24;
            if (*v24)
            {
              unsigned int v50 = (int8x8_t *)v24[4];
              LOBYTE(v24) = v50 != 0 && v50[2].i8[0] == 16;
              if ((_BYTE)v24) {
                uint64_t v33 = v50;
              }
              else {
                uint64_t v33 = 0;
              }
              goto LABEL_94;
            }
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v33 = 0;
            uint64_t v32 = 0;
          }
          LOBYTE(v24) = 0;
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v32 = 0;
        }
LABEL_94:
        int v34 = (v31 == 5) & v24;
        goto LABEL_95;
      }
      uint64_t v32 = *(void *)(a3 - 64);
      if (!v32) {
        return 0;
      }
      uint64_t v5 = 0;
      uint64_t v33 = *(int8x8_t **)(a3 - 32);
      if (!v33 || v33[2].i8[0] != 16) {
        return (llvm::Value *)v5;
      }
      int v34 = 1;
LABEL_95:
      if (v34) {
        BOOL v52 = v32 == a2;
      }
      else {
        BOOL v52 = 0;
      }
      if (!v52) {
        return 0;
      }
      unsigned int v191 = v33[4].u32[0];
      if (v191 > 0x40) {
        operator new[]();
      }
      int v190 = (int8x8_t *)v33[3];
      llvm::APInt::operator+=((uint64_t)&v190, 1uLL);
      uint64_t v53 = v191;
      unsigned int v191 = 0;
      if (v53 > 0x40)
      {
        int v56 = 0;
        int64_t v57 = (unint64_t)(v53 + 63) >> 6;
        uint64_t v58 = v190;
        int64_t v59 = v57;
        do
        {
          int8x8_t v60 = *v58++;
          uint8x8_t v61 = (uint8x8_t)vcnt_s8(v60);
          v61.i16[0] = vaddlv_u8(v61);
          v56 += v61.i32[0];
          --v59;
        }
        while (v59);
        if (v56 != 1) {
          goto LABEL_117;
        }
        int v62 = 0;
        do
        {
          BOOL v131 = v57-- < 1;
          if (v131) {
            break;
          }
          unint64_t v63 = (unint64_t)v190[v57];
          v62 += __clz(v63);
        }
        while (!v63);
        int v64 = v53 | 0xFFFFFFC0;
        if ((v53 & 0x3F) == 0) {
          int v64 = 0;
        }
        int v55 = v62 + v64;
      }
      else
      {
        uint8x8_t v54 = (uint8x8_t)vcnt_s8((int8x8_t)v190);
        v54.i16[0] = vaddlv_u8(v54);
        if (v54.u32[0] != 1)
        {
LABEL_117:
          char v65 = 1;
          goto LABEL_118;
        }
        int v55 = v53 + __clz((unint64_t)v190) - 64;
      }
      if (v53 + ~v55 != v27) {
        goto LABEL_117;
      }
      char v65 = 0;
LABEL_118:
      if (v53 >= 0x41 && v190) {
        MEMORY[0x1D25D9CB0](v190, 0x1000C8000313F17);
      }
      if (v65) {
        return 0;
      }
LABEL_122:
      uint64_t v66 = *(void *)(a4 + 24);
      *(void *)(v66 + 48) = *(void *)(a2 + 40);
      *(void *)(v66 + 56) = a2 + 24;
      __int16 v67 = *(unsigned char **)(a2 + 48);
      uint64_t v196 = v67;
      if (v67)
      {
        llvm::MetadataTracking::track((uint64_t)&v196, v67, 2);
        uint64_t v68 = (uint64_t)v196;
      }
      else
      {
        uint64_t v68 = 0;
      }
      __int16 v69 = (unsigned __int8 *)v184;
      sub_1CB8461A4(v66, 0, v68);
      if (!v196) {
        goto LABEL_125;
      }
      int v166 = *v196;
      if ((v166 - 4) <= 0x1E)
      {
        if ((v196[1] & 0x7F) != 2 && !*((_DWORD *)v196 + 3)) {
          goto LABEL_125;
        }
        uint64_t v167 = *((void *)v196 + 2);
        if ((v167 & 4) == 0) {
          goto LABEL_125;
        }
        unint64_t v168 = v167 & 0xFFFFFFFFFFFFFFF8;
        if (!v168) {
          goto LABEL_125;
        }
LABEL_293:
        uint64_t __src = (const char *)&v196;
        sub_1CC5FA668(v168 + 16, &__src);
        goto LABEL_125;
      }
      if ((v166 - 3) >= 0xFFFFFFFE) {
        unsigned int v169 = v196;
      }
      else {
        unsigned int v169 = 0;
      }
      if ((v166 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v168 = (unint64_t)(v169 + 8);
        goto LABEL_293;
      }
      if (v166 == 3) {
        *((void *)v196 + 1) = 0;
      }
LABEL_125:
      if (v25 > PrimitiveSizeInBits)
      {
        __int16 v198 = 257;
        if (*(void *)v184 != v192)
        {
          if (*((unsigned __int8 *)v184 + 16) <= 0x14u)
          {
            __int16 v69 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(v66 + 72) + 224))(*(void *)(v66 + 72), 39, v184, v192);
            if (v69) {
              BOOL v72 = v69[16] >= 0x1Cu;
            }
            else {
              BOOL v72 = 0;
            }
            if (v72)
            {
              uint64_t v170 = (llvm::Instruction *)v69;
              (*(void (**)(void, unsigned __int8 *, unsigned char **, void, void))(**(void **)(v66 + 80)
                                                                                          + 16))(*(void *)(v66 + 80), v69, &v196, *(void *)(v66 + 48), *(void *)(v66 + 56));
              uint64_t v171 = *(unsigned int *)(v66 + 8);
              if (v171)
              {
                uint64_t v174 = *(void *)v66;
                int64_t v187 = (llvm::Value *)(*(void *)v66 + 16 * v171);
                do
                {
                  llvm::Instruction::setMetadata(v170, *(_DWORD *)v174, *(llvm::MDNode **)(v174 + 8));
                  v174 += 16;
                }
                while ((llvm::Value *)v174 != v187);
              }
              __int16 v69 = (unsigned __int8 *)v170;
            }
          }
          else
          {
            __int16 v195 = 257;
            __int16 v69 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v184, v192, &__src, 0);
            (*(void (**)(void))(**(void **)(v66 + 80) + 16))(*(void *)(v66 + 80));
            uint64_t v70 = *(unsigned int *)(v66 + 8);
            if (v70)
            {
              uint64_t v71 = *(void *)v66;
              size_t v185 = (llvm::Value *)(*(void *)v66 + 16 * v70);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v69, *(_DWORD *)v71, *(llvm::MDNode **)(v71 + 8));
                v71 += 16;
              }
              while ((llvm::Value *)v71 != v185);
            }
          }
        }
      }
      if (v25 >= PrimitiveSizeInBits)
      {
        int v73 = v182;
      }
      else
      {
        __int16 v198 = 257;
        int v73 = v182;
        if (*(void *)v182 != v192)
        {
          if (v182[16] <= 0x14u)
          {
            int v73 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(v66 + 72) + 224))(*(void *)(v66 + 72), 39, v182, v192);
            if (v73) {
              BOOL v77 = v73[16] >= 0x1Cu;
            }
            else {
              BOOL v77 = 0;
            }
            if (v77)
            {
              unint64_t v172 = (llvm::Instruction *)v73;
              (*(void (**)(void, unsigned __int8 *, unsigned char **, void, void))(**(void **)(v66 + 80)
                                                                                          + 16))(*(void *)(v66 + 80), v73, &v196, *(void *)(v66 + 48), *(void *)(v66 + 56));
              uint64_t v173 = *(unsigned int *)(v66 + 8);
              if (v173)
              {
                uint64_t v175 = *(void *)v66;
                uint64_t v176 = *(void *)v66 + 16 * v173;
                do
                {
                  llvm::Instruction::setMetadata(v172, *(_DWORD *)v175, *(llvm::MDNode **)(v175 + 8));
                  v175 += 16;
                }
                while (v175 != v176);
              }
              int v73 = (unsigned __int8 *)v172;
            }
          }
          else
          {
            __int16 v195 = 257;
            int v73 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v182, v192, &__src, 0);
            (*(void (**)(void, unsigned __int8 *, unsigned char **, void, void))(**(void **)(v66 + 80) + 16))(*(void *)(v66 + 80), v73, &v196, *(void *)(v66 + 48), *(void *)(v66 + 56));
            uint64_t v74 = *(unsigned int *)(v66 + 8);
            if (v74)
            {
              uint64_t v75 = *(void *)v66;
              uint64_t v76 = *(void *)v66 + 16 * v74;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v73, *(_DWORD *)v75, *(llvm::MDNode **)(v75 + 8));
                v75 += 16;
              }
              while (v75 != v76);
            }
          }
        }
      }
      uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40), 309, (uint64_t)&v192, 1);
      if (Declaration) {
        uint64_t v79 = *(uint64_t ***)(Declaration + 24);
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v196 = v69;
      uint8x8_t v197 = v73;
      uint64_t __src = "umul";
      __int16 v195 = 259;
      BOOL v80 = (uint64_t *)sub_1CB845BAC((uint64_t *)v66, v79, (uint64_t **)Declaration, (uint64_t *)&v196, 2, (uint64_t)&__src, 0);
      uint64_t v81 = *(void *)(a4 + 32);
      unsigned int v82 = *(_DWORD *)(v81 + 8);
      uint64_t __src = (const char *)a2;
      unsigned int v194 = v82;
      int v83 = *(_DWORD *)(v81 + 2080);
      if (v83)
      {
        uint64_t v84 = *(void *)(v81 + 2064);
        int v85 = v83 - 1;
        unsigned int v86 = v85 & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v87 = (void *)(v84 + 16 * v86);
        uint64_t v88 = *v87;
        if (*v87 == a2) {
          goto LABEL_167;
        }
        uint64_t v89 = 0;
        int v90 = 1;
        while (v88 != -4096)
        {
          if (v89) {
            BOOL v91 = 0;
          }
          else {
            BOOL v91 = v88 == -8192;
          }
          if (v91) {
            uint64_t v89 = v87;
          }
          unsigned int v92 = v86 + v90++;
          unsigned int v86 = v92 & v85;
          uint64_t v87 = (void *)(v84 + 16 * v86);
          uint64_t v88 = *v87;
          if (*v87 == a2) {
            goto LABEL_167;
          }
        }
        if (v89) {
          uint64_t v93 = v89;
        }
        else {
          uint64_t v93 = v87;
        }
      }
      else
      {
        uint64_t v93 = 0;
      }
      uint64_t v94 = sub_1CBF569E0((_DWORD *)(v81 + 2064), (uint64_t)&__src, (uint64_t *)&__src, v93);
      void *v94 = __src;
      *((_DWORD *)v94 + 2) = v194;
      unsigned int v95 = *(_DWORD *)(v81 + 8);
      if (v95 >= *(_DWORD *)(v81 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v81 + 8 * v95) = a2;
      ++*(_DWORD *)(v81 + 8);
LABEL_167:
      uint64_t v96 = *(void *)(a2 + 8);
      if (v96)
      {
        int v97 = -1;
        do
        {
          int v98 = v97;
          if (!v97) {
            break;
          }
          uint64_t v96 = *(void *)(v96 + 8);
          ++v97;
        }
        while (v96);
        if (!v98)
        {
          LODWORD(v196) = 0;
          uint64_t __src = "umul.value";
          __int16 v195 = 259;
          int v186 = sub_1CC2415A4(v66, v80, (unsigned int *)&v196, 1, (uint64_t)&__src);
          uint64_t v125 = *(void *)(a2 + 8);
          if (v125)
          {
            int v181 = (llvm::Instruction ***)((char *)v186 + 8);
            uint8x8_t v183 = v80;
            do
            {
              uint64_t v126 = *(void *)(v125 + 24);
              uint64_t v125 = *(void *)(v125 + 8);
              if (v126 != a1 && v126 != a3)
              {
                unsigned int v128 = *(unsigned __int8 *)(v126 + 16);
                if (v126 && v128 == 66)
                {
                  unint64_t v130 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v126);
                  if (v129 == 1) {
                  if (v130 == v27)
                  }
                  {
                    sub_1CC9D3C84(a4, (llvm::ValueAsMetadata *)v126, v186);
                  }
                  else
                  {
                    uint64_t v145 = (llvm::Instruction **)(v126 - 32);
                    if (*(void *)(v126 - 32))
                    {
                      **(void **)(v126 - 16) = *(void *)(v126 - 24);
                      uint64_t v146 = *(void *)(v126 - 24);
                      if (v146) {
                        *(void *)(v146 + 16) = *(void *)(v126 - 16);
                      }
                    }
                    *uint64_t v145 = v186;
                    if (v186)
                    {
                      __int32 v147 = *v181;
                      *(void *)(v126 - 24) = *v181;
                      if (v147) {
                        v147[2] = (llvm::Instruction *)(v126 - 24);
                      }
                      *(void *)(v126 - 16) = v181;
                      *int v181 = v145;
                    }
                  }
                }
                else
                {
                  BOOL v131 = v128 - 41 < 0x12 && v128 > 0x1B;
                  if (v131) {
                    uint64_t v132 = (llvm::ValueAsMetadata *)v126;
                  }
                  else {
                    uint64_t v132 = 0;
                  }
                  uint64_t v133 = *((void *)v132 - 4);
                  unsigned int v134 = (unint64_t *)(v133 + 24);
                  unsigned int v135 = *(_DWORD *)(v133 + 32);
                  if (v27 > 0x40)
                  {
                    if (v135 != v27) {
                      operator new[]();
                    }
                    sub_1CD0463BC((uint64_t)&v188, (uint64_t)v134);
                  }
                  else
                  {
                    if (v135 >= 0x41) {
                      unsigned int v134 = (unint64_t *)*v134;
                    }
                    unint64_t v136 = *v134;
                    unsigned int v189 = v27;
                    unint64_t v137 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
                    if (!v27) {
                      unint64_t v137 = 0;
                    }
                    unint64_t v188 = v137 & v136;
                  }
                  __int16 v195 = 257;
                  uint64_t v138 = *(llvm::ConstantInt ***)v186;
                  uint64_t Splat = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v186, (llvm::LLVMContext *)&v188, v124);
                  if ((v138[1] & 0xFE) == 0x12) {
                    uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v138 + 8) | ((unint64_t)(*((_DWORD *)v138 + 2) == 19) << 32)), (uint64_t)Splat);
                  }
                  uint64_t v140 = sub_1CBF52474(v66, v186, (uint64_t)Splat, (uint64_t)&__src);
                  uint64_t v141 = (unsigned __int8 *)v140;
                  uint64_t v142 = *(void *)v132;
                  __int16 v198 = 257;
                  if (*(void *)v140 != v142)
                  {
                    if (*((unsigned __int8 *)v140 + 16) <= 0x14u)
                    {
                      uint64_t v141 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(v66 + 72) + 224))(*(void *)(v66 + 72), 39, v140, v142);
                      if (v141) {
                        BOOL v148 = v141[16] >= 0x1Cu;
                      }
                      else {
                        BOOL v148 = 0;
                      }
                      if (v148)
                      {
                        (*(void (**)(void, unsigned __int8 *, unsigned char **, void, void))(**(void **)(v66 + 80) + 16))(*(void *)(v66 + 80), v141, &v196, *(void *)(v66 + 48), *(void *)(v66 + 56));
                        uint64_t v164 = *(unsigned int *)(v66 + 8);
                        if (v164)
                        {
                          uint64_t v165 = *(void *)v66;
                          uint64_t v178 = *(void *)v66 + 16 * v164;
                          do
                          {
                            uint64_t v180 = v165;
                            llvm::Instruction::setMetadata((llvm::Instruction *)v141, *(_DWORD *)v165, *(llvm::MDNode **)(v165 + 8));
                            uint64_t v165 = v180 + 16;
                          }
                          while (v180 + 16 != v178);
                        }
                      }
                    }
                    else
                    {
                      __int16 v195 = 257;
                      uint64_t v141 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v140, v142, &__src, 0);
                      (*(void (**)(void, unsigned __int8 *, unsigned char **, void, void))(**(void **)(v66 + 80)
                                                                                                  + 16))(*(void *)(v66 + 80), v141, &v196, *(void *)(v66 + 48), *(void *)(v66 + 56));
                      uint64_t v143 = *(unsigned int *)(v66 + 8);
                      if (v143)
                      {
                        uint64_t v144 = *(void *)v66;
                        uint64_t v177 = *(void *)v66 + 16 * v143;
                        do
                        {
                          uint64_t v179 = v144;
                          llvm::Instruction::setMetadata((llvm::Instruction *)v141, *(_DWORD *)v144, *(llvm::MDNode **)(v144 + 8));
                          uint64_t v144 = v179 + 16;
                        }
                        while (v179 + 16 != v177);
                      }
                    }
                  }
                  sub_1CC9D3C84(a4, v132, (llvm::Value *)v141);
                  if (v189 >= 0x41 && v188) {
                    MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
                  }
                  BOOL v80 = v183;
                }
                uint64_t v149 = *(void *)(a4 + 32);
                unsigned int v150 = *(_DWORD *)(v149 + 8);
                uint64_t __src = (const char *)v126;
                unsigned int v194 = v150;
                int v151 = *(_DWORD *)(v149 + 2080);
                if (!v151)
                {
                  uint8x8_t v161 = 0;
LABEL_264:
                  unsigned int v162 = sub_1CBF569E0((_DWORD *)(v149 + 2064), (uint64_t)&__src, (uint64_t *)&__src, v161);
                  *unsigned int v162 = __src;
                  *((_DWORD *)v162 + 2) = v194;
                  unint64_t v163 = *(unsigned int *)(v149 + 8);
                  if (v163 >= *(unsigned int *)(v149 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)v149 + 8 * v163) = v126;
                  ++*(_DWORD *)(v149 + 8);
                  continue;
                }
                uint64_t v152 = *(void *)(v149 + 2064);
                int v153 = v151 - 1;
                unsigned int v154 = v153 & ((v126 >> 4) ^ (v126 >> 9));
                int v155 = (void *)(v152 + 16 * v154);
                uint64_t v156 = *v155;
                if (*v155 != v126)
                {
                  unint64_t v157 = 0;
                  int v158 = 1;
                  while (v156 != -4096)
                  {
                    if (v157) {
                      BOOL v159 = 0;
                    }
                    else {
                      BOOL v159 = v156 == -8192;
                    }
                    if (v159) {
                      unint64_t v157 = v155;
                    }
                    unsigned int v160 = v154 + v158++;
                    unsigned int v154 = v160 & v153;
                    int v155 = (void *)(v152 + 16 * v154);
                    uint64_t v156 = *v155;
                    if (*v155 == v126) {
                      goto LABEL_266;
                    }
                  }
                  if (v157) {
                    uint8x8_t v161 = v157;
                  }
                  else {
                    uint8x8_t v161 = v155;
                  }
                  goto LABEL_264;
                }
              }
LABEL_266:
              ;
            }
            while (v125);
          }
        }
      }
      if (*(unsigned __int8 *)(a3 + 16) >= 0x1Cu)
      {
        uint64_t v99 = *(void *)(a4 + 32);
        unsigned int v100 = *(_DWORD *)(v99 + 8);
        uint64_t __src = (const char *)a3;
        unsigned int v194 = v100;
        int v101 = *(_DWORD *)(v99 + 2080);
        if (v101)
        {
          uint64_t v102 = *(void *)(v99 + 2064);
          int v103 = v101 - 1;
          unsigned int v104 = v103 & ((a3 >> 4) ^ (a3 >> 9));
          unint64_t v105 = (void *)(v102 + 16 * v104);
          uint64_t v106 = *v105;
          if (*v105 == a3) {
            goto LABEL_189;
          }
          uint64_t v107 = 0;
          int v108 = 1;
          while (v106 != -4096)
          {
            if (v107) {
              BOOL v109 = 0;
            }
            else {
              BOOL v109 = v106 == -8192;
            }
            if (v109) {
              uint64_t v107 = v105;
            }
            unsigned int v110 = v104 + v108++;
            unsigned int v104 = v110 & v103;
            unint64_t v105 = (void *)(v102 + 16 * v104);
            uint64_t v106 = *v105;
            if (*v105 == a3) {
              goto LABEL_189;
            }
          }
          if (v107) {
            uint64_t v111 = v107;
          }
          else {
            uint64_t v111 = v105;
          }
        }
        else
        {
          uint64_t v111 = 0;
        }
        unint64_t v112 = sub_1CBF569E0((_DWORD *)(v99 + 2064), (uint64_t)&__src, (uint64_t *)&__src, v111);
        *unint64_t v112 = __src;
        *((_DWORD *)v112 + 2) = v194;
        unsigned int v113 = *(_DWORD *)(v99 + 8);
        if (v113 >= *(_DWORD *)(v99 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v99 + 8 * v113) = a3;
        ++*(_DWORD *)(v99 + 8);
      }
LABEL_189:
      uint64_t v114 = -2;
      switch(*(_WORD *)(a1 + 18) & 0x3F)
      {
        case '!':
          goto LABEL_193;
        case '""':
        case '#':
          goto LABEL_191;
        case '$':
        case '%':
          uint64_t v114 = -1;
LABEL_191:
          if (*(void *)(a1 + 32 * v114) != a2) {
            goto LABEL_192;
          }
LABEL_193:
          LODWORD(v196) = 1;
          __int16 v195 = 257;
          int v117 = (char *)operator new(0x80uLL);
          uint64_t v5 = v117 + 32;
          *((_DWORD *)v117 + 13) = *((_DWORD *)v117 + 13) & 0x38000000 | 1;
          *(void *)int v117 = 0;
          *((void *)v117 + 1) = 0;
          *((void *)v117 + 2) = 0;
          *((void *)v117 + 3) = v117 + 32;
          uint64_t v118 = *v80;
          int v119 = *(unsigned __int8 *)(*v80 + 8);
          if (*v80 && v119 == 17)
          {
            if (*(void *)(v118 + 32) > (unint64_t)v196)
            {
              uint64_t v121 = (uint64_t *)(v118 + 24);
              goto LABEL_199;
            }
            goto LABEL_302;
          }
          uint64_t v120 = 0;
          if (v118 && v119 == 16)
          {
            if (v196 < *(_DWORD *)(v118 + 12))
            {
              uint64_t v121 = (uint64_t *)(*(void *)(v118 + 16) + 8 * v196);
LABEL_199:
              uint64_t v120 = *v121;
              goto LABEL_200;
            }
LABEL_302:
            uint64_t v120 = 0;
          }
LABEL_200:
          *((void *)v117 + 4) = v120;
          *((void *)v117 + 5) = 0;
          *((void *)v117 + 6) = 0x10000005CLL;
          *(_OWORD *)(v117 + 56) = 0u;
          *(_OWORD *)(v117 + 72) = 0u;
          *((_DWORD *)v117 + 22) = 0;
          uint64_t v122 = v80 + 1;
          uint64_t v123 = v80[1];
          *(void *)int v117 = v80;
          *((void *)v117 + 1) = v123;
          if (v123) {
            *(void *)(v123 + 16) = v117 + 8;
          }
          *((void *)v117 + 2) = v122;
          *uint64_t v122 = v117;
          *((void *)v117 + 12) = v117 + 112;
          *((void *)v117 + 13) = 0x400000000;
          llvm::ExtractValueInst::init((llvm::Value *)(v117 + 32), &v196, 1, &__src);
          break;
        default:
LABEL_192:
          LODWORD(v196) = 1;
          __int16 v195 = 257;
          BOOL v115 = (llvm::Constant **)sub_1CC2415A4(v66, v80, (unsigned int *)&v196, 1, (uint64_t)&__src);
          __int16 v195 = 257;
          return llvm::BinaryOperator::CreateNot(v115, (llvm::Value *)&__src, 0, v116);
      }
      return (llvm::Value *)v5;
    case '""':
    case '%':
      uint64_t v5 = 0;
      if (!a3 || *(unsigned char *)(a3 + 16) != 16) {
        return (llvm::Value *)v5;
      }
      unsigned int v194 = v27;
      if (v27 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      if (v27) {
        unint64_t v35 = (const char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v27);
      }
      else {
        unint64_t v35 = 0;
      }
      uint64_t __src = v35;
      unsigned int v36 = *(_DWORD *)(a3 + 32);
      if (v36 > 0x40)
      {
        if (v194 != v36) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v196, (uint64_t)&__src);
      }
      else
      {
        LODWORD(v197) = *(_DWORD *)(a3 + 32);
        unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
        if (!v36) {
          unint64_t v37 = 0;
        }
        uint64_t v196 = (unsigned char *)(v37 & (unint64_t)__src);
      }
      if (v194 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      uint64_t v38 = v196;
      uint64_t __src = v196;
      unsigned int v194 = v197;
      if (v197 > 0x40)
      {
        int v51 = memcmp(v196, *(const void **)(a3 + 24), (((unint64_t)v197 + 63) >> 3) & 0x3FFFFFF8);
        if (v38) {
          MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
        }
        if (v51) {
          return 0;
        }
        goto LABEL_122;
      }
      if (v196 == *(unsigned char **)(a3 + 24)) {
        goto LABEL_122;
      }
      return 0;
    case '#':
    case '$':
      uint64_t v5 = 0;
      if (!a3 || *(unsigned char *)(a3 + 16) != 16) {
        return (llvm::Value *)v5;
      }
      unsigned int v194 = *(_DWORD *)(a3 + 32);
      if (v194 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      if (1 << v27 == *(void *)(a3 + 24)) {
        goto LABEL_122;
      }
      return 0;
    default:
      return 0;
  }
}

uint64_t ***sub_1CCA74480(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  __int16 v3 = *(_WORD *)(a1 + 18);
  uint64_t v4 = *(void *)(a1 - 64);
  uint64_t v5 = *(void *)(a1 - 32);
  unsigned int v42 = 0;
  uint64_t v43 = 0;
  int v40 = 0;
  unint64_t v41 = 0;
  BOOL v44 = &v43;
  v47[0] = &v40;
  long long v6 = 0;
  if (!sub_1CC9E8D20((uint64_t)&v44, v4)) {
    return v6;
  }
  uint64_t v7 = v3 & 0x3F;
  uint64_t v8 = *v43;
  BOOL v44 = &v42;
  v47[0] = &v40;
  if (sub_1CC9E8EB8((uint64_t)&v44, v5) && v8 == *v42)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    if (v9 && !*(void *)(v9 + 8) || (uint64_t v19 = *(void *)(v5 + 8)) != 0 && !*(void *)(v19 + 8))
    {
      __int16 v48 = 257;
      if (v7 > 0xF) {
        FCmpHelper = sub_1CB845F20(a2, v7, v43, (uint64_t)v42, (uint64_t)&v44);
      }
      else {
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper(a2, v7, (uint64_t)v43, (uint64_t)v42, (uint64_t)&v44, 0, 0);
      }
      unint64_t v21 = (llvm::PoisonValue **)FCmpHelper;
      int v22 = (char *)operator new(0xA8uLL);
      *((_DWORD *)v22 + 21) = *((_DWORD *)v22 + 21) & 0x38000000 | 2;
      long long v6 = (uint64_t ***)(v22 + 64);
      *(void *)int v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = v22 + 64;
      *((void *)v22 + 4) = 0;
      *((void *)v22 + 5) = 0;
      *((void *)v22 + 6) = 0;
      *((void *)v22 + 7) = v22 + 64;
      uint64_t v23 = v40;
      int v24 = (llvm::Type *)v41;
      __int16 v48 = 257;
      uint64_t v26 = (uint64_t **)llvm::PoisonValue::get(*v21, v25);
      llvm::ShuffleVectorInst::ShuffleVectorInst(v6, (uint64_t **)v21, v26, v23, v24, (const char **)&v44, 0);
      return v6;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v4 + 8);
  }
  if (v9 && !*(void *)(v9 + 8) && *(unsigned __int8 *)(v5 + 16) <= 0x14u && v5 != 0)
  {
    SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v5, (llvm::Type *)1);
    if (SplatValue)
    {
      if (v41)
      {
        uint64_t v12 = v40;
        uint64_t v13 = 4 * v41;
        uint64_t v14 = 4 * v41;
        for (uint64_t i = (int *)v40; ; ++i)
        {
          int v16 = *i;
          if (*i != -1) {
            break;
          }
          long long v6 = 0;
          v14 -= 4;
          if (!v14) {
            return v6;
          }
        }
        while (v16 == *v12 || *v12 == -1)
        {
          ++v12;
          v13 -= 4;
          if (!v13)
          {
            uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v8 + 32) | ((unint64_t)(*(unsigned char *)(v8 + 8) == 19) << 32)), (uint64_t)SplatValue);
            unsigned int v28 = v41;
            BOOL v44 = v47;
            int v46 = 8;
            if (v41 >= 9)
            {
              unsigned int v45 = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v41)
            {
              uint64_t v29 = v47;
              unint64_t v30 = v41;
              do
              {
                *v29++ = v16;
                --v30;
              }
              while (v30);
            }
            unsigned int v45 = v28;
            __int16 v39 = 257;
            if (v7 > 0xF) {
              int v31 = sub_1CB845F20(a2, v7, v43, (uint64_t)Splat, (uint64_t)v38);
            }
            else {
              int v31 = llvm::IRBuilderBase::CreateFCmpHelper(a2, v7, (uint64_t)v43, (uint64_t)Splat, (uint64_t)v38, 0, 0);
            }
            uint64_t v32 = (llvm::PoisonValue **)v31;
            uint64_t v33 = (char *)operator new(0xA8uLL);
            *((_DWORD *)v33 + 21) = *((_DWORD *)v33 + 21) & 0x38000000 | 2;
            long long v6 = (uint64_t ***)(v33 + 64);
            *(void *)uint64_t v33 = 0;
            *((void *)v33 + 1) = 0;
            *((void *)v33 + 2) = 0;
            *((void *)v33 + 3) = v33 + 64;
            *((void *)v33 + 4) = 0;
            *((void *)v33 + 5) = 0;
            *((void *)v33 + 6) = 0;
            *((void *)v33 + 7) = v33 + 64;
            int v34 = v44;
            unint64_t v35 = (llvm::Type *)v45;
            __int16 v39 = 257;
            unint64_t v37 = (uint64_t **)llvm::PoisonValue::get(*v32, v36);
            llvm::ShuffleVectorInst::ShuffleVectorInst(v6, (uint64_t **)v32, v37, v34, v35, v38, 0);
            if (v44 != v47) {
              free(v44);
            }
            return v6;
          }
        }
      }
    }
  }
  return 0;
}

llvm::UndefValue **sub_1CCA747F4(uint64_t a1, uint64_t ***a2)
{
  long long v6 = a2;
  uint64_t v377 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (uint64_t *)(a2 - 8);
  LODWORD(v9) = sub_1CC9D2700((uint64_t)*(a2 - 8));
  int v10 = (llvm::Constant **)(v6 - 4);
  unsigned int v11 = sub_1CC9D2700((uint64_t)*(v6 - 4));
  __int16 v12 = *((_WORD *)v6 + 9);
  if (v9 >= v11)
  {
    uint64_t v5 = 0;
  }
  else
  {
    __int16 v13 = *((_WORD *)v6 + 9) & 0x3F;
    switch(v12 & 0x3F)
    {
      case 2:
        __int16 v13 = 4;
        break;
      case 3:
        __int16 v13 = 5;
        break;
      case 4:
        __int16 v13 = 2;
        break;
      case 5:
        __int16 v13 = 3;
        break;
      case 0xA:
        __int16 v13 = 12;
        break;
      case 0xB:
        __int16 v13 = 13;
        break;
      case 0xC:
        __int16 v13 = 10;
        break;
      case 0xD:
        __int16 v13 = 11;
        break;
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
LABEL_586:
        __break(1u);
LABEL_587:
        if (v362) {
          MEMORY[0x1D25D9CB0](v362, 0x1000C8000313F17);
        }
LABEL_253:
        *(void *)(v5 + 1568) = v4;
        goto LABEL_258;
      case 0x22:
        __int16 v13 = 36;
        break;
      case 0x23:
        __int16 v13 = 37;
        break;
      case 0x24:
        __int16 v13 = 34;
        break;
      case 0x25:
        __int16 v13 = 35;
        break;
      case 0x26:
        __int16 v13 = 40;
        break;
      case 0x27:
        __int16 v13 = 41;
        break;
      case 0x28:
        __int16 v13 = 38;
        break;
      case 0x29:
        __int16 v13 = 39;
        break;
      default:
        break;
    }
    __int16 v12 = v13 | v12 & 0xFFC0;
    *((_WORD *)v6 + 9) = v12;
    uint64_t v14 = *(v6 - 8);
    __int16 v15 = *(v6 - 4);
    if (v14 != v15)
    {
      int v16 = *(v6 - 3);
      *(v6 - 8) = v15;
      *(v6 - 4) = v14;
      long long v17 = *(_OWORD *)(v6 - 7);
      int v18 = *(v6 - 2);
      *(v6 - 7) = v16;
      *(v6 - 6) = v18;
      *(_OWORD *)(v6 - 3) = v17;
      *int v18 = v8;
      uint64_t v19 = (uint64_t)*(v6 - 7);
      if (v19) {
        *(void *)(v19 + 16) = v6 - 7;
      }
      **(v6 - 2) = (uint64_t *)v10;
      uint64_t v20 = (uint64_t)*(v6 - 3);
      if (v20) {
        *(void *)(v20 + 16) = v6 - 3;
      }
    }
    uint64_t v5 = (uint64_t)v6;
  }
  uint64_t v9 = v12 & 0x3F;
  uint64_t v2 = (uint64_t)*(v6 - 8);
  uint64_t v3 = (uint64_t)*(v6 - 4);
  unint64_t v21 = (unint64_t)*((unsigned __int8 *)v6 + 17) >> 1;
  *(_OWORD *)&v376[16] = *(_OWORD *)(a1 + 120);
  long long v22 = *(_OWORD *)(a1 + 104);
  long long v375 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)unsigned int v376 = v22;
  *(void *)&v376[16] = v6;
  if (v21 == 127) {
    char v23 = -1;
  }
  else {
    char v23 = v21;
  }
  int v24 = sub_1CC0347BC(v9, (llvm::ConstantExpr *)v2, (unsigned __int8 *)v3, v23, (uint64_t)&v375, 3);
  if (v24) {
    return sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, v24);
  }
  unsigned int v28 = *(llvm::Constant **)v2;
  if (v2 != v3 || v9 > 0xE) {
    goto LABEL_33;
  }
  if (((1 << v9) & 0xAA) == 0)
  {
    if (((1 << v9) & 0x5500) != 0)
    {
      __int16 v35 = *((_WORD *)v6 + 9) & 0xFFC0 | 8;
      goto LABEL_79;
    }
LABEL_33:
    if ((v9 - 7) <= 1)
    {
      if (!sub_1CC04C850((uint64_t)&v375, (llvm::Constant *)v2)
        && llvm::isKnownNeverNaN(v2, *(uint64_t **)(a1 + 64), 0))
      {
        NullValue = llvm::Constant::getNullValue(v28, v29, v30);
        uint64_t v32 = a1;
        uint64_t v33 = (uint64_t)v6;
        unsigned int v34 = 0;
        return (llvm::UndefValue **)sub_1CC9D28DC(v32, v33, v34, (uint64_t)NullValue);
      }
      if (!sub_1CC04C850((uint64_t)&v375, (llvm::Constant *)v3)
        && llvm::isKnownNeverNaN(v3, *(uint64_t **)(a1 + 64), 0))
      {
        NullValue = llvm::Constant::getNullValue(v28, v36, v37);
        uint64_t v32 = a1;
        uint64_t v33 = (uint64_t)v6;
        unsigned int v34 = 1;
        return (llvm::UndefValue **)sub_1CC9D28DC(v32, v33, v34, (uint64_t)NullValue);
      }
    }
    BOOL v360 = 0;
    *(void *)unsigned int v361 = 0;
    *(void *)&long long v375 = v361;
    if (sub_1CC04C34C((void **)&v375, v2))
    {
      uint64_t v364 = &v360;
      if (sub_1CC04C34C(&v364, v3))
      {
        uint64_t v38 = operator new(0x80uLL);
        uint64_t v39 = (uint64_t)(v38 + 16);
        v38[21] = v38[21] & 0x38000000 | 2;
        *(void *)uint64_t v38 = 0;
        *((void *)v38 + 1) = 0;
        *((void *)v38 + 2) = 0;
        *((void *)v38 + 3) = v38 + 16;
        *((void *)v38 + 4) = 0;
        *((void *)v38 + 5) = 0;
        *((void *)v38 + 6) = 0;
        *((void *)v38 + 7) = v38 + 16;
        int v40 = dword_1CFB279AC[*((_WORD *)v6 + 9) & 0x3F];
        unsigned int v42 = v360;
        unint64_t v41 = *(uint64_t **)v361;
        *(_WORD *)&v376[16] = 257;
        uint64_t v43 = **(void **)v361;
        uint64_t v44 = ****(void ****)v361 + 1888;
        if (**(void **)v361 && (*(_DWORD *)(v43 + 8) & 0xFE) == 0x12)
        {
          uint64_t v146 = (uint64_t **)(****(void ****)v361 + 1888);
          __int32 v147 = (llvm::Type *)*(unsigned int *)(v43 + 32);
          if (*(_DWORD *)(v43 + 8) == 19) {
            llvm::ScalableVectorType::get(v146, v147);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v146, v147);
          }
          uint64_t v44 = v148;
        }
        uint64_t v349 = (uint64_t)v6;
        unsigned int v45 = (llvm::Value *)v39;
        char v46 = 54;
        __int16 v47 = v40;
        uint64_t v48 = (uint64_t)v41;
LABEL_50:
        uint64_t v49 = (uint64_t)v42;
LABEL_63:
        llvm::CmpInst::CmpInst(v45, v44, v46, v47, v48, v49, (const char **)&v375, 0, v349);
        return (llvm::UndefValue **)v39;
      }
    }
    uint64_t v357 = v5;
    uint64_t v358 = v28;
    LOWORD(v5) = *((_WORD *)v6 + 9) & 0x3F;
    uint64_t v39 = (uint64_t)*(v6 - 8);
    uint64_t v4 = (uint64_t)*(v6 - 4);
    BOOL v50 = sub_1CB845E74(v39);
    if (!v39 || !v50) {
      goto LABEL_57;
    }
    unsigned int v51 = *(unsigned __int8 *)(v39 + 16);
    if (v51 <= 0x1B) {
      unsigned int v52 = *(unsigned __int16 *)(v39 + 18);
    }
    else {
      unsigned int v52 = v51 - 28;
    }
    if (v52 != 12)
    {
      if (v52 != 16)
      {
LABEL_57:
        uint64_t v53 = v4;
        uint64_t v4 = v39;
        goto LABEL_58;
      }
      if ((*(unsigned char *)(v39 + 17) & 0x10) != 0)
      {
        int v72 = *(_DWORD *)(v39 + 20);
        if ((v72 & 0x40000000) != 0) {
          int v73 = *(llvm::Constant ***)(v39 - 8);
        }
        else {
          int v73 = (llvm::Constant **)(v39 - 32 * (v72 & 0x7FFFFFF));
        }
        if (!sub_1CC0241FC((uint64_t)&v375, *v73)) {
          goto LABEL_57;
        }
      }
      else
      {
        int v123 = *(_DWORD *)(v39 + 20);
        if ((v123 & 0x40000000) != 0) {
          __int16 v124 = *(llvm::Constant ***)(v39 - 8);
        }
        else {
          __int16 v124 = (llvm::Constant **)(v39 - 32 * (v123 & 0x7FFFFFF));
        }
        if (!sub_1CC02435C((uint64_t)&v375, *v124)) {
          goto LABEL_57;
        }
      }
    }
    BOOL v74 = sub_1CB845E74(v4);
    if (v4 && v74)
    {
      unsigned int v75 = *(unsigned __int8 *)(v4 + 16);
      if (v75 <= 0x1B) {
        unsigned int v76 = *(unsigned __int16 *)(v4 + 18);
      }
      else {
        unsigned int v76 = v75 - 28;
      }
      if (v76 == 12) {
        goto LABEL_57;
      }
      if (v76 == 16)
      {
        if ((*(unsigned char *)(v4 + 17) & 0x10) != 0)
        {
          int v206 = *(_DWORD *)(v4 + 20);
          if ((v206 & 0x40000000) != 0) {
            int v207 = *(llvm::Constant ***)(v4 - 8);
          }
          else {
            int v207 = (llvm::Constant **)(v4 - 32 * (v206 & 0x7FFFFFF));
          }
          if (sub_1CC0241FC((uint64_t)&v375, *v207)) {
            goto LABEL_57;
          }
        }
        else
        {
          int v243 = *(_DWORD *)(v4 + 20);
          if ((v243 & 0x40000000) != 0) {
            unint64_t v244 = *(llvm::Constant ***)(v4 - 8);
          }
          else {
            unint64_t v244 = (llvm::Constant **)(v4 - 32 * (v243 & 0x7FFFFFF));
          }
          if (sub_1CC02435C((uint64_t)&v375, *v244)) {
            goto LABEL_57;
          }
        }
      }
    }
    __int16 v77 = *((_WORD *)v6 + 9);
    uint64_t v5 = v77 & 0x3F;
    uint64_t v53 = v39;
    switch(v77 & 0x3F)
    {
      case 2:
        LOWORD(v5) = 4;
        break;
      case 3:
        LOWORD(v5) = 5;
        break;
      case 4:
        LOWORD(v5) = 2;
        break;
      case 5:
        LOWORD(v5) = 3;
        break;
      case 0xA:
        LOWORD(v5) = 12;
        break;
      case 0xB:
        LOWORD(v5) = 13;
        break;
      case 0xC:
        LOWORD(v5) = 10;
        break;
      case 0xD:
        LOWORD(v5) = 11;
        break;
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        goto LABEL_586;
      case 0x22:
        LOWORD(v5) = 36;
        break;
      case 0x23:
        LOWORD(v5) = 37;
        break;
      case 0x24:
        LOWORD(v5) = 34;
        break;
      case 0x25:
        LOWORD(v5) = 35;
        break;
      case 0x26:
        LOWORD(v5) = 40;
        break;
      case 0x27:
        LOWORD(v5) = 41;
        break;
      case 0x28:
        LOWORD(v5) = 38;
        break;
      case 0x29:
        LOWORD(v5) = 39;
        break;
      default:
        goto LABEL_58;
    }
    uint64_t v53 = v39;
LABEL_58:
    *(void *)&long long v375 = v4;
    if (sub_1CC04CADC(&v375, v53))
    {
      uint64_t v56 = (uint64_t)llvm::Constant::getNullValue(*(llvm::Constant **)v4, v54, v55);
      int64_t v57 = operator new(0x80uLL);
      uint64_t v39 = (uint64_t)(v57 + 16);
      v57[21] = v57[21] & 0x38000000 | 2;
      *(void *)int64_t v57 = 0;
      *((void *)v57 + 1) = 0;
      *((void *)v57 + 2) = 0;
      *((void *)v57 + 3) = v57 + 16;
      *((void *)v57 + 4) = 0;
      *((void *)v57 + 5) = 0;
      *((void *)v57 + 6) = 0;
      *((void *)v57 + 7) = v57 + 16;
      *(_WORD *)&v376[16] = 257;
      uint64_t v58 = *(llvm::Constant **)v4;
      uint64_t v44 = ***(void ***)v4 + 1888;
      if (*(void *)v4 && (*((_DWORD *)v58 + 2) & 0xFE) == 0x12)
      {
        uint64_t v143 = (uint64_t **)(***(void ***)v4 + 1888);
        uint64_t v144 = (llvm::Type *)*((unsigned int *)v58 + 8);
        if (*((_DWORD *)v58 + 2) == 19) {
          llvm::ScalableVectorType::get(v143, v144);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v143, v144);
        }
        uint64_t v44 = v145;
      }
      uint64_t v349 = (uint64_t)v6;
      unsigned int v45 = (llvm::Value *)v39;
      char v46 = 54;
      __int16 v47 = v5;
      uint64_t v48 = v4;
LABEL_62:
      uint64_t v49 = v56;
      goto LABEL_63;
    }
    int64_t v59 = v6[1];
    if (v59)
    {
      if (!v59[1])
      {
        uint64_t v70 = (uint64_t)v59[3];
        if (v70)
        {
          if (*(unsigned char *)(v70 + 16) == 85)
          {
            *(void *)&long long v375 = 0;
            uint64_t v364 = 0;
            uint64_t v39 = 0;
            if (llvm::matchSelectPattern(v70, (uint64_t)&v375, &v364, 0, 0)) {
              return (llvm::UndefValue **)v39;
            }
          }
        }
      }
    }
    if (sub_1CC0241FC((uint64_t)&v375, (llvm::Constant *)v3) && !sub_1CC04C850((uint64_t)&v364, (llvm::Constant *)v3))
    {
      uint64_t v71 = llvm::Constant::getNullValue(v358, v60, v61);
      return (llvm::UndefValue **)sub_1CC9D28DC(a1, (uint64_t)v6, 1u, (uint64_t)v71);
    }
    uint64_t v5 = *(unsigned __int8 *)(v2 + 16);
    if (v5 < 0x1C || !v3 || (unsigned int v62 = *(unsigned __int8 *)(v3 + 16), v62 > 0x14))
    {
LABEL_266:
      uint64_t v364 = 0;
      uint64_t v154 = *v8;
      LODWORD(v375) = 139;
      *((void *)&v375 + 1) = 0;
      *(void *)unsigned int v376 = &v364;
      if (sub_1CC045310((uint64_t)&v375, v154) && sub_1CC04C850((uint64_t)&v370, *v10))
      {
        __int16 v155 = *((_WORD *)v6 + 9);
        switch(v155 & 0x3F)
        {
          case 1:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xE:
            uint64_t v156 = v364;
            goto LABEL_277;
          case 2:
            uint64_t v156 = v364;
            __int16 v157 = v155 & 0xFFC0 | 6;
            goto LABEL_276;
          case 3:
            uint64_t v156 = v364;
            __int16 v157 = v155 & 0xFFC0 | 7;
            goto LABEL_276;
          case 5:
            uint64_t v156 = v364;
            __int16 v157 = v155 & 0xFFC0 | 1;
            goto LABEL_276;
          case 0xA:
            uint64_t v156 = v364;
            __int16 v157 = v155 & 0xFFC0 | 0xE;
            goto LABEL_276;
          case 0xC:
            uint64_t v156 = v364;
            __int16 v157 = v155 & 0xFFC0 | 8;
            goto LABEL_276;
          case 0xD:
            uint64_t v156 = v364;
            __int16 v157 = v155 & 0xFFC0 | 9;
LABEL_276:
            *((_WORD *)v6 + 9) = v157;
LABEL_277:
            uint64_t v39 = sub_1CC9D28DC(a1, (uint64_t)v6, 0, (uint64_t)v156);
            if (!v39) {
              break;
            }
            return (llvm::UndefValue **)v39;
          default:
            break;
        }
      }
      *(void *)&long long v375 = v361;
      if (sub_1CC04C34C((void **)&v375, v2) && v3 && *(unsigned __int8 *)(v3 + 16) <= 0x14u)
      {
        uint64_t v56 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)v3, 0, 0, v158);
        BOOL v159 = operator new(0x80uLL);
        uint64_t v39 = (uint64_t)(v159 + 16);
        v159[21] = v159[21] & 0x38000000 | 2;
        *(void *)BOOL v159 = 0;
        *((void *)v159 + 1) = 0;
        *((void *)v159 + 2) = 0;
        *((void *)v159 + 3) = v159 + 16;
        *((void *)v159 + 4) = 0;
        *((void *)v159 + 5) = 0;
        *((void *)v159 + 6) = 0;
        *((void *)v159 + 7) = v159 + 16;
        int v160 = dword_1CFB279AC[*((_WORD *)v6 + 9) & 0x3F];
        uint8x8_t v161 = *(uint64_t **)v361;
        *(_WORD *)&v376[16] = 257;
        uint64_t v162 = **(void **)v361;
        uint64_t v44 = ****(void ****)v361 + 1888;
        if (**(void **)v361 && (*(_DWORD *)(v162 + 8) & 0xFE) == 0x12)
        {
          BOOL v216 = (uint64_t **)(****(void ****)v361 + 1888);
          unint64_t v217 = (llvm::Type *)*(unsigned int *)(v162 + 32);
          if (*(_DWORD *)(v162 + 8) == 19) {
            llvm::ScalableVectorType::get(v216, v217);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v216, v217);
          }
          uint64_t v44 = v218;
        }
        uint64_t v349 = (uint64_t)v6;
        unsigned int v45 = (llvm::Value *)v39;
        char v46 = 54;
        __int16 v47 = v160;
        uint64_t v48 = (uint64_t)v161;
        goto LABEL_62;
      }
      *(void *)&long long v375 = v361;
      uint64_t v8 = (uint64_t *)&v375;
      if (!sub_1CCA38AD0((void **)&v375, v2)) {
        goto LABEL_645;
      }
      *(void *)&long long v375 = &v360;
      if (sub_1CCA38AD0((void **)&v375, v3) && **(void **)v361 == *v360)
      {
        uint64_t v175 = operator new(0x80uLL);
        uint64_t v39 = (uint64_t)(v175 + 16);
        v175[21] = v175[21] & 0x38000000 | 2;
        *(void *)uint64_t v175 = 0;
        *((void *)v175 + 1) = 0;
        *((void *)v175 + 2) = 0;
        *((void *)v175 + 3) = v175 + 16;
        *((void *)v175 + 4) = 0;
        *((void *)v175 + 5) = 0;
        *((void *)v175 + 6) = 0;
        *((void *)v175 + 7) = v175 + 16;
        unsigned int v42 = v360;
        uint64_t v176 = *(uint64_t **)v361;
        *(_WORD *)&v376[16] = 257;
        uint64_t v177 = **(void **)v361;
        uint64_t v44 = ****(void ****)v361 + 1888;
        if (**(void **)v361 && (*(_DWORD *)(v177 + 8) & 0xFE) == 0x12)
        {
          uint64_t v237 = (uint64_t **)(****(void ****)v361 + 1888);
          uint64_t v238 = (llvm::Type *)*(unsigned int *)(v177 + 32);
          if (*(_DWORD *)(v177 + 8) == 19) {
            llvm::ScalableVectorType::get(v237, v238);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v237, v238);
          }
          uint64_t v44 = v239;
        }
        uint64_t v349 = (uint64_t)v6;
        unsigned int v45 = (llvm::Value *)v39;
        char v46 = 54;
        __int16 v47 = v9;
        uint64_t v48 = (uint64_t)v176;
        goto LABEL_50;
      }
      unint64_t v362 = 0;
      *(void *)&long long v375 = &v362;
      *((void *)&v375 + 1) = 0;
      unint64_t v163 = (llvm::APFloatBase *)sub_1CC04AFFC((uint64_t)&v375, (unsigned __int8 *)v3);
      if (!v163)
      {
LABEL_645:
        uint64_t v370 = 0;
        LODWORD(v375) = 19;
        DWORD2(v375) = 0;
        *(void *)unsigned int v376 = &v370;
        *(_OWORD *)&v376[8] = xmmword_1CD96D880;
        *(void *)&v376[24] = v361;
        uint64_t v303 = *(void *)(v2 + 8);
        if (!v303
          || *(void *)(v303 + 8)
          || !sub_1CC9FA678((uint64_t)&v375, v2)
          || !sub_1CC0241FC((uint64_t)&v364, (llvm::Constant *)v3))
        {
          goto LABEL_831;
        }
        uint64_t v304 = v370;
        if (*(_UNKNOWN **)(v370 + 8) == &unk_1CFB2E344) {
          uint64_t v304 = *(void *)(v370 + 16);
        }
        int v305 = *(unsigned char *)(v304 + 28) & 7;
        if (v305 == 3 || v305 == 1) {
          goto LABEL_831;
        }
        uint64_t v306 = *(void *)(a1 + 24);
        int v307 = **(llvm::Type ***)v361;
        if ((*(_DWORD *)(**(void **)v361 + 8) & 0xFE) == 0x12) {
          int v307 = (llvm::Type *)**((void **)v307 + 2);
        }
        unsigned int PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v307);
        unint64_t v309 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)(v306 + 64), PrimitiveSizeInBits);
        unsigned int v310 = (llvm::Constant *)v309;
        if ((*((_DWORD *)v358 + 2) & 0xFE) == 0x12 && v358)
        {
          int8x8_t v311 = (llvm::Type *)*((unsigned int *)v358 + 8);
          if (*((_DWORD *)v358 + 2) == 19) {
            llvm::ScalableVectorType::get(v309, v311);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v309, v311);
          }
          unsigned int v310 = v312;
        }
        if (v9 != 4)
        {
LABEL_831:
          if (((*v6)[1] & 0xFE) != 0x12) {
            return (llvm::UndefValue **)v357;
          }
          uint64_t v39 = (uint64_t)sub_1CCA74480((uint64_t)v6, *(void *)(a1 + 24));
          if (!v39) {
            return (llvm::UndefValue **)v357;
          }
          return (llvm::UndefValue **)v39;
        }
        int v313 = *(uint64_t **)(a1 + 24);
        int64_t v314 = *(llvm::Instruction **)v361;
        __int16 v369 = 257;
        if (**(llvm::Constant ***)v361 != v310)
        {
          if (*(unsigned __int8 *)(*(void *)v361 + 16) <= 0x14u)
          {
            uint64_t v318 = (*(uint64_t (**)(uint64_t, uint64_t, void, llvm::Constant *))(*(void *)v313[9] + 224))(v313[9], 49, *(void *)v361, v310);
            int64_t v314 = (llvm::Instruction *)v318;
            if (v318)
            {
              if (*(unsigned __int8 *)(v318 + 16) >= 0x1Cu)
              {
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)v313[10] + 16))(v313[10], v318, &v364, v313[6], v313[7]);
                uint64_t v336 = *((unsigned int *)v313 + 2);
                if (v336)
                {
                  uint64_t v337 = *v313;
                  uint64_t v338 = v337 + 16 * v336;
                  do
                  {
                    llvm::Instruction::setMetadata(v314, *(_DWORD *)v337, *(llvm::MDNode **)(v337 + 8));
                    v337 += 16;
                  }
                  while (v337 != v338);
                }
              }
            }
          }
          else
          {
            *(_WORD *)&v376[16] = 257;
            int64_t v314 = llvm::CastInst::Create(49, *(uint64_t *)v361, (uint64_t)v310, (const char **)&v375, 0);
            (*(void (**)(uint64_t, llvm::Instruction *, void **, uint64_t, uint64_t))(*(void *)v313[10]
                                                                                              + 16))(v313[10], v314, &v364, v313[6], v313[7]);
            uint64_t v315 = *((unsigned int *)v313 + 2);
            if (v315)
            {
              uint64_t v316 = *v313;
              uint64_t v317 = v316 + 16 * v315;
              do
              {
                llvm::Instruction::setMetadata(v314, *(_DWORD *)v316, *(llvm::MDNode **)(v316 + 8));
                v316 += 16;
              }
              while (v316 != v317);
            }
          }
        }
        uint8x8_t v319 = operator new(0x80uLL);
        v319[21] = v319[21] & 0x38000000 | 2;
        uint64_t v39 = (uint64_t)(v319 + 16);
        *(void *)uint8x8_t v319 = 0;
        *((void *)v319 + 1) = 0;
        *((void *)v319 + 2) = 0;
        *((void *)v319 + 3) = v319 + 16;
        *((void *)v319 + 4) = 0;
        *((void *)v319 + 5) = 0;
        *((void *)v319 + 6) = 0;
        *((void *)v319 + 7) = v319 + 16;
        uint64_t v56 = (uint64_t)llvm::Constant::getNullValue(v310, v320, v321);
        *(_WORD *)&v376[16] = 257;
        uint64_t v322 = *(void *)v314;
        uint64_t v44 = ***(void ***)v314 + 1888;
        if (*(void *)v314 && (*(_DWORD *)(v322 + 8) & 0xFE) == 0x12)
        {
          int v323 = (uint64_t **)(***(void ***)v314 + 1888);
          int64_t v324 = (llvm::Type *)*(unsigned int *)(v322 + 32);
          if (*(_DWORD *)(v322 + 8) == 19) {
            llvm::ScalableVectorType::get(v323, v324);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v323, v324);
          }
          uint64_t v44 = v325;
        }
        uint64_t v349 = 0;
        unsigned int v45 = (llvm::Value *)v39;
        char v46 = 53;
        __int16 v47 = 40;
        uint64_t v48 = (uint64_t)v314;
        goto LABEL_62;
      }
      int v164 = *(_DWORD *)(**(void **)v361 + 8);
      if ((v164 & 0xFE) == 0x12) {
        int v164 = *(_DWORD *)(**(void **)(**(void **)v361 + 16) + 8);
      }
      if (v164 == 2)
      {
        uint64_t v5 = (uint64_t)&unk_1CFB2E308;
      }
      else
      {
        uint64_t v5 = (uint64_t)&unk_1CFB2E2E0;
        switch((char)v164)
        {
          case 1:
            uint64_t v5 = (uint64_t)&unk_1CFB2E2F4;
            goto LABEL_292;
          case 2:
            goto LABEL_586;
          case 3:
            uint64_t v5 = (uint64_t)&unk_1CFB2E31C;
            goto LABEL_292;
          case 4:
            uint64_t v328 = llvm::APFloatBase::x87DoubleExtended(v163);
            break;
          case 5:
            uint64_t v328 = llvm::APFloatBase::IEEEquad(v163);
            break;
          case 6:
            uint64_t v5 = (uint64_t)&unk_1CFB2E344;
            goto LABEL_292;
          default:
            goto LABEL_292;
        }
        uint64_t v5 = (uint64_t)v328;
      }
LABEL_292:
      unsigned __int8 v359 = 0;
      uint64_t v165 = (const llvm::detail::DoubleAPFloat *)(v362 + 8);
      if (*(_UNKNOWN **)(v362 + 8) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v365, v165);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v365, v165);
      }
      llvm::APFloat::convert((uint64_t)&v364, (void *)v5, 1, &v359);
      int v167 = v359;
      if (!v359) {
        goto LABEL_312;
      }
      if ((int)v9 > 8)
      {
        if (v9 == 9)
        {
          unsigned int v191 = operator new(0x80uLL);
          v191[21] = v191[21] & 0x38000000 | 2;
          *(void *)unsigned int v191 = 0;
          *((void *)v191 + 1) = 0;
          *((void *)v191 + 2) = 0;
          *((void *)v191 + 3) = v191 + 16;
          *((void *)v191 + 4) = 0;
          *((void *)v191 + 5) = 0;
          *((void *)v191 + 6) = 0;
          *((void *)v191 + 7) = v191 + 16;
          unsigned int v355 = (llvm::Value *)(v191 + 16);
          uint64_t v192 = *(llvm::Instruction **)v361;
          __int16 v195 = llvm::Constant::getNullValue(**(llvm::Constant ***)v361, v193, v194);
          *(_WORD *)&v376[16] = 257;
          uint64_t v196 = *(void ***)v192;
          uint64_t v197 = ***(void ***)v192 + 1888;
          if (*(void *)v192 && (v196[1] & 0xFE) == 0x12)
          {
            int64_t v254 = (uint64_t **)(***(void ***)v192 + 1888);
            unint64_t v255 = (llvm::Type *)*((unsigned int *)v196 + 8);
            if (*((_DWORD *)v196 + 2) == 19) {
              llvm::ScalableVectorType::get(v254, v255);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v254, v255);
            }
            uint64_t v197 = v256;
          }
          llvm::CmpInst::CmpInst(v355, v197, 54, 8, (uint64_t)v192, (uint64_t)v195, (const char **)&v375, 0, 0);
          goto LABEL_333;
        }
        if (v9 != 14) {
          goto LABEL_312;
        }
        uint64_t v178 = *v6;
        uint64_t v179 = **v6;
        uint64_t v180 = *v179;
        uint64_t Splat = *(llvm::Value **)(*v179 + 1560);
        if (!Splat)
        {
          int8x8_t v182 = *(llvm::ConstantInt **)(v180 + 1888);
          unsigned int v183 = *(_DWORD *)(v180 + 1896);
          DWORD2(v375) = v183 >> 8;
          if (v183 >> 8 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v375);
          }
          if (v183 <= 0xFF) {
            LOBYTE(v184) = 0;
          }
          else {
            unint64_t v184 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v183);
          }
          *(void *)&long long v375 = v184 & 1;
          uint64_t Splat = (llvm::Value *)llvm::ConstantInt::get(v182, (llvm::LLVMContext *)&v375, v166);
          if (DWORD2(v375) >= 0x41 && (void)v375) {
            MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
          }
          *(void *)(v180 + 1560) = Splat;
        }
      }
      else
      {
        if (v9 != 1)
        {
          if (v9 == 6)
          {
            unint64_t v168 = operator new(0x80uLL);
            v168[21] = v168[21] & 0x38000000 | 2;
            *(void *)unint64_t v168 = 0;
            *((void *)v168 + 1) = 0;
            *((void *)v168 + 2) = 0;
            *((void *)v168 + 3) = v168 + 16;
            *((void *)v168 + 4) = 0;
            *((void *)v168 + 5) = 0;
            *((void *)v168 + 6) = 0;
            *((void *)v168 + 7) = v168 + 16;
            unsigned int v355 = (llvm::Value *)(v168 + 16);
            unsigned int v169 = *(llvm::Instruction **)v361;
            unint64_t v172 = llvm::Constant::getNullValue(**(llvm::Constant ***)v361, v170, v171);
            *(_WORD *)&v376[16] = 257;
            uint64_t v173 = *(void ***)v169;
            uint64_t v174 = ***(void ***)v169 + 1888;
            if (*(void *)v169 && (v173[1] & 0xFE) == 0x12)
            {
              int v251 = (uint64_t **)(***(void ***)v169 + 1888);
              int v252 = (llvm::Type *)*((unsigned int *)v173 + 8);
              if (*((_DWORD *)v173 + 2) == 19) {
                llvm::ScalableVectorType::get(v251, v252);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v251, v252);
              }
              uint64_t v174 = v253;
            }
            llvm::CmpInst::CmpInst(v355, v174, 54, 7, (uint64_t)v169, (uint64_t)v172, (const char **)&v375, 0, 0);
LABEL_333:
            int v198 = 1;
            goto LABEL_641;
          }
LABEL_312:
          if ((_UNKNOWN *)v365 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v371, (const llvm::detail::DoubleAPFloat *)&v365);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (const llvm::detail::IEEEFloat *)&v365);
          }
          if ((_UNKNOWN *)v371 == &unk_1CFB2E344) {
            size_t v185 = v372;
          }
          else {
            size_t v185 = &v370;
          }
          if ((*((unsigned char *)v185 + 28) & 8) != 0)
          {
            if ((_UNKNOWN *)v371 == &unk_1CFB2E344)
            {
              sub_1CBFC6FB8((uint64_t)v372);
              sub_1CBFC6FB8((uint64_t)(v372 + 4));
              if (v167) {
                goto LABEL_638;
              }
LABEL_321:
              if ((_UNKNOWN *)v5 == &unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (uint64_t)&unk_1CFB2E344);
              }
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v375 + 8, v5);
              sub_1CB87E670((uint64_t)&v375, 0);
              if ((_UNKNOWN *)v371 == &unk_1CFB2E344) {
                int v186 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v371, (const llvm::detail::DoubleAPFloat *)((char *)&v375 + 8));
              }
              else {
                int v186 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v371, (const llvm::detail::IEEEFloat *)((char *)&v375 + 8));
              }
              if (v186)
              {
                BOOL v188 = 1;
              }
              else
              {
                uint64_t v199 = &v370;
                if ((_UNKNOWN *)v371 == &unk_1CFB2E344) {
                  uint64_t v199 = v372;
                }
                BOOL v188 = (*((unsigned char *)v199 + 28) & 7) == 3;
              }
              if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v376);
              }
              else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
              {
                MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
              }
              if (v188)
              {
                unsigned int v200 = llvm::ConstantFP::get(**(llvm::ConstantFP ****)v361, (llvm::Type *)&v364, v187);
                unsigned int v201 = operator new(0x80uLL);
                uint64_t v202 = (llvm::Value *)(v201 + 16);
                v201[21] = v201[21] & 0x38000000 | 2;
                *(void *)unsigned int v201 = 0;
                *((void *)v201 + 1) = 0;
                *((void *)v201 + 2) = 0;
                *((void *)v201 + 3) = v201 + 16;
                *((void *)v201 + 4) = 0;
                *((void *)v201 + 5) = 0;
                *((void *)v201 + 6) = 0;
                *((void *)v201 + 7) = v201 + 16;
                uint64_t v203 = *(void *)v361;
                *(_WORD *)&v376[16] = 257;
                uint64_t v204 = **(void **)v361;
                uint64_t v205 = ****(void ****)v361 + 1888;
                if (**(void **)v361 && (*(_DWORD *)(v204 + 8) & 0xFE) == 0x12)
                {
                  unint64_t v260 = (llvm::Value *)(v201 + 16);
                  unint64_t v261 = (uint64_t **)(****(void ****)v361 + 1888);
                  int v262 = (llvm::Type *)*(unsigned int *)(v204 + 32);
                  if (*(_DWORD *)(v204 + 8) == 19) {
                    llvm::ScalableVectorType::get(v261, v262);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v261, v262);
                  }
                  uint64_t v205 = v263;
                  uint64_t v202 = v260;
                }
                unsigned int v355 = v202;
                llvm::CmpInst::CmpInst(v202, v205, 54, v9, v203, (uint64_t)v200, (const char **)&v375, 0, (uint64_t)v6);
                int v198 = 1;
                goto LABEL_639;
              }
LABEL_638:
              int v198 = 0;
LABEL_639:
              if ((_UNKNOWN *)v371 == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v372);
              }
              else if ((*(_DWORD *)(v371 + 8) - 64) <= 0xFFFFFF7F && v372)
              {
                MEMORY[0x1D25D9CB0](v372, 0x1000C8000313F17);
              }
LABEL_641:
              if ((_UNKNOWN *)v365 == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v366);
              }
              else if ((*(_DWORD *)(v365 + 8) - 64) <= 0xFFFFFF7F && v366)
              {
                MEMORY[0x1D25D9CB0](v366, 0x1000C8000313F17);
              }
              if (v198) {
                return (llvm::UndefValue **)v355;
              }
              goto LABEL_645;
            }
            v374 ^= 8u;
          }
          if (v167) {
            goto LABEL_638;
          }
          goto LABEL_321;
        }
        uint64_t v178 = *v6;
        unsigned int v189 = **v6;
        uint64_t v190 = *v189;
        uint64_t Splat = *(llvm::Value **)(*v189 + 1568);
        if (!Splat)
        {
          int64_t v229 = *(llvm::ConstantInt **)(v190 + 1888);
          DWORD2(v375) = *(_DWORD *)(v190 + 1896) >> 8;
          if (DWORD2(v375) > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v375);
          }
          *(void *)&long long v375 = 0;
          uint64_t Splat = (llvm::Value *)llvm::ConstantInt::get(v229, (llvm::LLVMContext *)&v375, v166);
          if (DWORD2(v375) >= 0x41 && (void)v375) {
            MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
          }
          *(void *)(v190 + 1568) = Splat;
        }
      }
      if ((v178[1] & 0xFE) == 0x12) {
        uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v178 + 8) | ((unint64_t)(*((_DWORD *)v178 + 2) == 19) << 32)), (uint64_t)Splat);
      }
      unsigned int v355 = (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, Splat);
      goto LABEL_333;
    }
    if (*(unsigned __int8 *)(v2 + 16) <= 0x46u)
    {
      if (v5 == 49)
      {
        int v84 = *((_WORD *)v6 + 9) & 0x3F;
        if ((v84 - 6) >= 0xFFFFFFFC
          && sub_1CC04C9B0((uint64_t)&v375, (llvm::Constant *)v3)
          && (*(unsigned char *)(v2 + 17) & 8) != 0
          && (*((unsigned char *)v6 + 17) & 8) != 0)
        {
          uint64_t v364 = 0;
          int v85 = *(_DWORD *)(v2 + 20);
          unsigned int v86 = (v85 & 0x40000000) != 0
              ? *(unsigned __int8 ***)(v2 - 8)
              : (unsigned __int8 **)(v2 - 32 * (v85 & 0x7FFFFFF));
          int v210 = *v86;
          *(void *)&long long v375 = &v364;
          *((void *)&v375 + 1) = 0;
          if (sub_1CC04AFFC((uint64_t)&v375, v210))
          {
            int v211 = v364;
            if ((_UNKNOWN *)v364[1] == &unk_1CFB2E344) {
              int v211 = (void *)v364[2];
            }
            char v212 = *((unsigned char *)v211 + 28);
            if ((v212 & 7) != 3)
            {
              if ((v212 & 8) != 0) {
                int v84 = dword_1CFB279AC[*((_WORD *)v6 + 9) & 0x3F];
              }
              uint64_t v213 = operator new(0x80uLL);
              uint64_t v39 = (uint64_t)(v213 + 16);
              v213[21] = v213[21] & 0x38000000 | 2;
              *(void *)uint64_t v213 = 0;
              *((void *)v213 + 1) = 0;
              *((void *)v213 + 2) = 0;
              *((void *)v213 + 3) = v213 + 16;
              *((void *)v213 + 4) = 0;
              *((void *)v213 + 5) = 0;
              *((void *)v213 + 6) = 0;
              *((void *)v213 + 7) = v213 + 16;
              int v214 = *(_DWORD *)(v2 + 20);
              if ((v214 & 0x40000000) != 0) {
                uint64_t v215 = *(void *)(v2 - 8);
              }
              else {
                uint64_t v215 = v2 - 32 * (v214 & 0x7FFFFFF);
              }
              BOOL v226 = *(void **)(v215 + 32);
              *(_WORD *)&v376[16] = 257;
              uint64_t v227 = (void **)*v226;
              uint64_t v228 = **(void **)*v226 + 1888;
              if (*v226 && (v227[1] & 0xFE) == 0x12)
              {
                uint64_t v281 = (uint64_t **)(**(void **)*v226 + 1888);
                uint64_t v282 = (llvm::Type *)*((unsigned int *)v227 + 8);
                if (*((_DWORD *)v227 + 2) == 19) {
                  llvm::ScalableVectorType::get(v281, v282);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v281, v282);
                }
                uint64_t v228 = v283;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v39, v228, 54, v84, (uint64_t)v226, v3, (const char **)&v375, 0, (uint64_t)v6);
              return (llvm::UndefValue **)v39;
            }
          }
        }
        goto LABEL_266;
      }
      if (v5 != 60) {
        goto LABEL_266;
      }
      int v78 = *(_DWORD *)(v2 + 20);
      uint64_t v79 = (v78 & 0x40000000) != 0 ? *(uint64_t **)(v2 - 8) : (uint64_t *)(v2 - 32 * (v78 & 0x7FFFFFF));
      uint64_t v125 = *v79;
      if (!*v79) {
        goto LABEL_266;
      }
      if (*(unsigned char *)(v125 + 16) != 62) {
        goto LABEL_266;
      }
      uint64_t v126 = *(llvm::GlobalValue **)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF));
      if (!v126 || *((unsigned char *)v126 + 16) != 3) {
        goto LABEL_266;
      }
      unint64_t v63 = sub_1CCA490AC(a1, v2, (uint64_t *)v125, v126, v6, 0);
      goto LABEL_191;
    }
    if ((v5 - 71) >= 2)
    {
      if (v5 == 84)
      {
        int v87 = llvm::getIntrinsicForCallSite(v2, *(uint64_t **)(a1 + 64));
        if (*(unsigned char *)(v3 + 16) == 17) {
          uint64_t v88 = v3;
        }
        else {
          uint64_t v88 = 0;
        }
        BOOL v90 = v87 == 1851 || v87 == 1830 || v87 == 2131;
        if (v90 && v88)
        {
          uint64_t v4 = (uint64_t)&v375 + 8;
          unsigned int v92 = *(void **)(v88 + 32);
          BOOL v91 = (const llvm::detail::DoubleAPFloat *)(v88 + 32);
          if (v92 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, v91);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v375 + 8, v91);
          }
          uint64_t v93 = *((void *)&v375 + 1);
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v365, (uint64_t)&unk_1CFB2E344);
          }
          uint64_t v365 = *((void *)&v375 + 1);
          if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v368 = v368 & 0xF0 | 2;
          int v94 = *(_DWORD *)(*((void *)&v375 + 1) + 8);
          if ((v94 - 64) < 0xFFFFFF80)
          {
            int v326 = v366;
            *uint64_t v366 = 0;
            bzero(v326 + 1, 8 * (((v94 + 64) >> 6) - 2) + 8);
            unsigned int v95 = v366;
          }
          else
          {
            unsigned int v95 = &v366;
            uint64_t v366 = 0;
          }
          int v367 = *(_DWORD *)(v93 + 8) - 1;
          *unsigned int v95 = 0;
          llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v365, 1, 0);
          uint64_t v96 = *((void *)&v375 + 1);
          uint64_t v39 = (uint64_t)&v371;
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v371, (uint64_t)&unk_1CFB2E344);
          }
          uint64_t v371 = *((void *)&v375 + 1);
          if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v374 = v374 & 0xF0 | 2;
          int v97 = *(_DWORD *)(*((void *)&v375 + 1) + 8);
          if ((v97 - 64) < 0xFFFFFF80)
          {
            unint64_t v327 = v372;
            *uint64_t v372 = 0;
            bzero(v327 + 1, 8 * (((v97 + 64) >> 6) - 2) + 8);
            int v98 = v372;
          }
          else
          {
            int v98 = &v372;
            uint64_t v372 = 0;
          }
          int v373 = *(_DWORD *)(v96 + 8) - 1;
          *int v98 = 1;
          llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v371, 1, 0);
          unsigned int v99 = *((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344
              ? llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v375 + 8), (const llvm::detail::DoubleAPFloat *)&v365): llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)((char *)&v375 + 8), (const llvm::detail::IEEEFloat *)&v365);
          unsigned int v100 = v99;
          unsigned int v101 = *((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344
               ? llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v375 + 8), (const llvm::detail::DoubleAPFloat *)&v371): llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)((char *)&v375 + 8), (const llvm::detail::IEEEFloat *)&v371);
          switch(*((_WORD *)v6 + 9) & 0x3F)
          {
            case 1:
              if (v101 <= 1 && v100 - 3 > 0xFFFFFFFD) {
                goto LABEL_256;
              }
              goto LABEL_250;
            case 2:
              if (!v100) {
                goto LABEL_257;
              }
              if (v101) {
                goto LABEL_250;
              }
              goto LABEL_256;
            case 3:
              if (v100 <= 1) {
                goto LABEL_257;
              }
              if (v101 < 2) {
                goto LABEL_256;
              }
LABEL_250:
              uint64_t v149 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
              uint64_t v5 = *v149;
              uint64_t v4 = *(void *)(*v149 + 1568);
              if (v4) {
                break;
              }
              unsigned int v150 = *(llvm::ConstantInt **)(v5 + 1888);
              unsigned int v363 = *(_DWORD *)(v5 + 1896) >> 8;
              if (v363 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v362);
              }
              unint64_t v362 = 0;
              uint64_t v4 = (uint64_t)llvm::ConstantInt::get(v150, (llvm::LLVMContext *)&v362, v102);
              if (v363 < 0x41) {
                goto LABEL_253;
              }
              goto LABEL_587;
            case 4:
              if (v100 != 2) {
                goto LABEL_250;
              }
              if (v101 == 2) {
                goto LABEL_257;
              }
              goto LABEL_256;
            case 5:
              if (v100 - 3 <= 0xFFFFFFFD) {
                goto LABEL_250;
              }
              if (v101 - 1 > 1)
              {
LABEL_256:
                int v151 = 1;
                goto LABEL_259;
              }
LABEL_257:
              uint64_t v152 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
              uint64_t v153 = *v152;
              uint64_t v4 = *(void *)(*v152 + 1560);
              if (!v4)
              {
                unint64_t v257 = *(llvm::ConstantInt **)(v153 + 1888);
                unsigned int v258 = *(_DWORD *)(v153 + 1896);
                unsigned int v363 = v258 >> 8;
                if (v258 >> 8 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v362);
                }
                if (v258 <= 0xFF) {
                  LOBYTE(v259) = 0;
                }
                else {
                  unint64_t v259 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v258);
                }
                unint64_t v362 = v259 & 1;
                uint64_t v4 = (uint64_t)llvm::ConstantInt::get(v257, (llvm::LLVMContext *)&v362, v102);
                if (v363 >= 0x41 && v362) {
                  MEMORY[0x1D25D9CB0](v362, 0x1000C8000313F17);
                }
                *(void *)(v153 + 1560) = v4;
              }
              break;
            case 6:
              if (v101 != 2 && v100) {
                goto LABEL_256;
              }
              goto LABEL_257;
            default:
              goto LABEL_256;
          }
LABEL_258:
          uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, (llvm::Value *)v4);
          int v151 = 0;
LABEL_259:
          if ((_UNKNOWN *)v371 == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v372);
          }
          else if ((*(_DWORD *)(v371 + 8) - 64) <= 0xFFFFFF7F && v372)
          {
            MEMORY[0x1D25D9CB0](v372, 0x1000C8000313F17);
          }
          if ((_UNKNOWN *)v365 == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v366);
          }
          else if ((*(_DWORD *)(v365 + 8) - 64) <= 0xFFFFFF7F && v366)
          {
            MEMORY[0x1D25D9CB0](v366, 0x1000C8000313F17);
          }
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)v376);
          }
          else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
          {
            MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
          }
          unsigned int v355 = (llvm::Value *)v39;
          if (!v151) {
            return (llvm::UndefValue **)v39;
          }
        }
        goto LABEL_266;
      }
      if (v5 != 83 || *(uint64_t ***)(v2 + 40) != v6[5]) {
        goto LABEL_266;
      }
      unint64_t v63 = sub_1CC9D50C0(a1, (llvm::Instruction *)v6, v2);
LABEL_191:
      uint64_t v39 = (uint64_t)v63;
      if (v63) {
        return (llvm::UndefValue **)v39;
      }
      goto LABEL_266;
    }
    if (v62 != 17) {
      goto LABEL_266;
    }
    BOOL v80 = *(llvm::Constant **)v2;
    int v81 = *(_DWORD *)(*(void *)v2 + 8);
    unsigned int v82 = v81;
    if (*(void *)v2 && (v81 & 0xFE) == 0x12)
    {
      do
      {
        BOOL v80 = (llvm::Constant *)*((void *)v80 + 3);
        unsigned int v82 = *((_DWORD *)v80 + 2);
        if (v80) {
          BOOL v302 = (*((_DWORD *)v80 + 2) & 0xFE) == 18;
        }
        else {
          BOOL v302 = 0;
        }
      }
      while (v302);
    }
    if (v82 >= 5)
    {
      if (v82 != 5) {
        goto LABEL_266;
      }
      int v83 = 113;
    }
    else
    {
      int v83 = dword_1CFB27998[(char)v82];
    }
    LODWORD(v355) = v83;
    uint64_t v354 = v3 + 24;
    int v103 = *(_DWORD *)(v2 + 20);
    if ((v103 & 0x40000000) != 0) {
      unsigned int v104 = *(llvm::Type ****)(v2 - 8);
    }
    else {
      unsigned int v104 = (llvm::Type ***)(v2 - 32 * (v103 & 0x7FFFFFF));
    }
    BOOL v356 = **v104;
    uint64_t v105 = *((unsigned __int16 *)v6 + 9);
    unsigned int v106 = v105 & 0x3F;
    if (v106 != 1 && (v106 > 0xE || ((1 << v106) & 0x4240) == 0)) {
      goto LABEL_158;
    }
    LOBYTE(v362) = 0;
    LODWORD(v371) = *((_DWORD *)v356 + 2) >> 8;
    uint64_t v39 = v105;
    if (v371 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v370);
    }
    uint64_t v370 = 0;
    BYTE4(v371) = v5 == 71;
    uint64_t v4 = 1;
    llvm::APFloat::convertToInteger(v354, (uint64_t)&v370, 1, &v362);
    if (!(_BYTE)v362)
    {
      uint64_t v264 = *(void *)(v3 + 32);
      if ((_UNKNOWN *)v264 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (const llvm::detail::DoubleAPFloat *)(v3 + 32));
      }
      else
      {
        *((void *)&v375 + 1) = *(void *)(v3 + 32);
        if ((*(_DWORD *)(v264 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v265 = *(unsigned char *)(v3 + 52);
        int v266 = v265 & 7;
        v376[12] = v376[12] & 0xF0 | v265 & 0xF;
        *(_DWORD *)&v376[8] = *(_DWORD *)(v3 + 48);
        BOOL v268 = (v265 & 6) != 0 && v266 != 3;
        if (v266 == 1 || v268)
        {
          uint64_t v269 = *(unsigned int *)(*((void *)&v375 + 1) + 8);
          if ((v269 - 64) <= 0xFFFFFF7F) {
            uint64_t v270 = *(void **)v376;
          }
          else {
            uint64_t v270 = v376;
          }
          unint64_t v271 = (uint64_t *)(v3 + 40);
          if ((*(_DWORD *)(*(void *)(v3 + 32) + 8) - 64) < 0xFFFFFF80) {
            unint64_t v271 = *(uint64_t **)(v3 + 40);
          }
          if (v269 <= 0xFFFFFFBF)
          {
            unint64_t v272 = (unint64_t)(v269 + 64) >> 6;
            do
            {
              uint64_t v273 = *v271++;
              *v270++ = v273;
              --v272;
            }
            while (v272);
          }
        }
      }
      sub_1CBFC6BD8((uint64_t)&v375, 1);
      if (sub_1CB88A72C(v354, (uint64_t)&v375) == 1)
      {
        if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)v376);
        }
        else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
        {
          MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
        }
        uint64_t v4 = 1;
      }
      else
      {
        uint64_t v353 = **(void **)(*(void *)(a1 + 24) + 64);
        if ((v39 & 0x37) == 1)
        {
          uint64_t v343 = *(llvm::Value **)(v353 + 1568);
          if (!v343)
          {
            uint64_t v344 = *(llvm::ConstantInt **)(v353 + 1888);
            LODWORD(v365) = *(_DWORD *)(v353 + 1896) >> 8;
            if (v365 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v364);
            }
            uint64_t v364 = 0;
            uint64_t v343 = (llvm::Value *)llvm::ConstantInt::get(v344, (llvm::LLVMContext *)&v364, v274);
            if (v365 >= 0x41 && v364) {
              MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
            }
            *(void *)(v353 + 1568) = v343;
          }
        }
        else
        {
          uint64_t v343 = *(llvm::Value **)(v353 + 1560);
          if (!v343)
          {
            uint64_t v346 = *(llvm::ConstantInt **)(v353 + 1888);
            unsigned int v347 = *(_DWORD *)(v353 + 1896);
            LODWORD(v365) = v347 >> 8;
            if (v347 >> 8 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v364);
            }
            if (v347 <= 0xFF) {
              char v348 = 0;
            }
            else {
              char v348 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v347);
            }
            uint64_t v364 = (void *)(v348 & 1);
            uint64_t v343 = (llvm::Value *)llvm::ConstantInt::get(v346, (llvm::LLVMContext *)&v364, v274);
            if (v365 >= 0x41 && v364) {
              MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
            }
            *(void *)(v353 + 1560) = v343;
          }
        }
        uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, v343);
        if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)v376);
        }
        else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
        {
          MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
        }
        uint64_t v4 = 0;
      }
    }
    if (v371 >= 0x41 && v370) {
      MEMORY[0x1D25D9CB0](v370, 0x1000C8000313F17);
    }
    if (v4)
    {
LABEL_158:
      uint64_t v107 = v356;
      if ((*((_DWORD *)v356 + 2) & 0xFE) == 0x12) {
        uint64_t v107 = (llvm::Type *)**((void **)v356 + 2);
      }
      int v350 = llvm::Type::getPrimitiveSizeInBits(v107);
      if ((int)v355 < v350)
      {
        uint64_t v4 = v3 + 32;
        if (*(_UNKNOWN **)(v3 + 32) == &unk_1CFB2E344) {
          unsigned int v110 = (llvm::detail *)(*(void *)(v3 + 40) + 8);
        }
        else {
          unsigned int v110 = (llvm::detail *)(v3 + 32);
        }
        int v111 = llvm::detail::ilogb(v110, v108);
        if (v111 == 0x7FFFFFFF)
        {
          uint64_t v284 = *(llvm::Constant **)v4;
          unsigned int v355 = (llvm::Value *)((char *)&v375 + 8);
          uint64_t v4 = (uint64_t)&unk_1CFB2E344;
          if (v284 == (llvm::Constant *)&unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (uint64_t)&unk_1CFB2E344);
          }
          *((void *)&v375 + 1) = v284;
          if ((*((_DWORD *)v284 + 2) + 64) >= 0x80) {
            operator new[]();
          }
          v376[12] = v376[12] & 0xF0 | 3;
          *(_DWORD *)&v376[8] = *((_DWORD *)v284 + 1) - 1;
          int v285 = *((_DWORD *)v284 + 2);
          if ((v285 - 64) < 0xFFFFFF80)
          {
            uint64_t v345 = *(void *)v376;
            **(void **)unsigned int v376 = 0;
            bzero((void *)(v345 + 8), 8 * (((v285 + 64) >> 6) - 2) + 8);
          }
          else
          {
            *(void *)unsigned int v376 = 0;
          }
          sub_1CB87E774((uint64_t)&v375, 0);
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344) {
            uint64_t v287 = (llvm::detail *)(*(void *)v376 + 8);
          }
          else {
            uint64_t v287 = (llvm::detail *)((char *)&v375 + 8);
          }
          LODWORD(v355) = llvm::detail::ilogb(v287, v286);
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)v376);
          }
          else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
          {
            MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
          }
          uint64_t v5 = v5;
          if ((int)v355 < v350 - (v5 != 71)) {
            goto LABEL_266;
          }
        }
        else
        {
          uint64_t v5 = v5;
          if ((int)v355 <= v111 && v111 <= v350 - (v5 != 71)) {
            goto LABEL_266;
          }
        }
      }
      int v112 = 32;
      if ((*((_WORD *)v6 + 9) & 0x3F) != 1)
      {
        switch(*((_WORD *)v6 + 9) & 0x3F)
        {
          case 3:
          case 0xB:
            BOOL v208 = v5 == 71;
            int v209 = 39;
            int v112 = 35;
            goto LABEL_384;
          case 4:
          case 0xC:
            BOOL v208 = v5 == 71;
            int v209 = 40;
            int v112 = 36;
            goto LABEL_384;
          case 5:
          case 0xD:
            BOOL v208 = v5 == 71;
            int v209 = 41;
            int v112 = 37;
            goto LABEL_384;
          case 6:
          case 0xE:
            int v112 = 33;
            goto LABEL_167;
          case 7:
            int v332 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
            uint64_t v333 = *v332;
            uint64_t v4 = *(void *)(*v332 + 1560);
            if (v4) {
              goto LABEL_731;
            }
            unsigned int v340 = *(llvm::ConstantInt **)(v333 + 1888);
            LODWORD(v342) = *(_DWORD *)(v333 + 1896);
            DWORD2(v375) = v342 >> 8;
            if (v342 >> 8 > 0x40) {
              goto LABEL_814;
            }
            if (v342 <= 0xFF) {
              LOBYTE(v342) = 0;
            }
            else {
              LOBYTE(v342) = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v342);
            }
            break;
          case 8:
            goto LABEL_726;
          case 9:
            goto LABEL_167;
          default:
            BOOL v208 = v5 == 71;
            int v209 = 38;
            int v112 = 34;
LABEL_384:
            if (!v208) {
              int v112 = v209;
            }
            goto LABEL_167;
        }
        goto LABEL_782;
      }
LABEL_167:
      int v351 = v112;
      unsigned int v113 = v356;
      if ((*((_DWORD *)v356 + 2) & 0xFE) == 0x12) {
        unsigned int v113 = (llvm::Type *)**((void **)v356 + 2);
      }
      unsigned int v114 = llvm::Type::getPrimitiveSizeInBits(v113);
      BOOL v115 = (uint64_t *)(v3 + 32);
      unsigned int v355 = (llvm::Value *)(v3 + 32);
      unsigned int v352 = v114;
      if (v5 == 71)
      {
        unsigned int v116 = v114;
        uint64_t v117 = *v115;
        if ((_UNKNOWN *)v117 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (uint64_t)&unk_1CFB2E344);
        }
        *((void *)&v375 + 1) = v117;
        if ((*(_DWORD *)(v117 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        v376[12] = v376[12] & 0xF0 | 3;
        *(_DWORD *)&v376[8] = *(_DWORD *)(v117 + 4) - 1;
        int v118 = *(_DWORD *)(v117 + 8);
        if ((v118 - 64) < 0xFFFFFF80)
        {
          uint64_t v300 = *(void *)v376;
          **(void **)unsigned int v376 = 0;
          bzero((void *)(v300 + 8), 8 * (((v118 + 64) >> 6) - 2) + 8);
        }
        else
        {
          *(void *)unsigned int v376 = 0;
        }
        LODWORD(v365) = v116;
        if (v116 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v364);
        }
        if (v116) {
          int v119 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v116);
        }
        else {
          int v119 = 0;
        }
        uint64_t v364 = v119;
        sub_1CBA62404((uint64_t)&v375, (uint64_t)&v364, 0, 1);
        if (v365 >= 0x41 && v364) {
          MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
        }
        if (*((_UNKNOWN **)&v375 + 1) != &unk_1CFB2E344)
        {
          unsigned int v121 = *(unsigned __int8 *)(v3 + 52);
          uint64_t v4 = 0;
          switch(4 * (v376[12] & 7) + (v121 & 7))
          {
            case 1u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 9u:
            case 0xDu:
            case 0xFu:
              goto LABEL_197;
            case 2u:
            case 3u:
            case 0xBu:
              int v122 = ~(v376[12] >> 2) & 2;
              goto LABEL_195;
            case 8u:
            case 0xCu:
            case 0xEu:
              int v122 = (v121 >> 2) & 2;
              goto LABEL_195;
            case 0xAu:
              int v127 = (v376[12] >> 3) & 1;
              if (v127 != ((v121 >> 3) & 1)) {
                goto LABEL_514;
              }
              int v122 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)((char *)&v375 + 8), v355);
              if ((v376[12] & 8) == 0) {
                goto LABEL_195;
              }
              if (v122 == 2) {
                goto LABEL_438;
              }
              goto LABEL_196;
            default:
              int v127 = (v376[12] >> 3) & 1;
              if (v127 == ((v121 >> 3) & 1)) {
                goto LABEL_196;
              }
LABEL_514:
              int v122 = (2 * v127) ^ 2;
              goto LABEL_195;
          }
        }
        int v122 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v375 + 8), v355);
LABEL_195:
        if (v122)
        {
LABEL_196:
          uint64_t v4 = 0;
        }
        else
        {
LABEL_438:
          uint64_t v245 = **(void **)(*(void *)(a1 + 24) + 64);
          if (v351 == 36 || (v351 & 0x2B) == 0x21)
          {
            uint64_t v246 = *(llvm::Value **)(v245 + 1560);
            if (!v246)
            {
              uint64_t v288 = *(llvm::ConstantInt **)(v245 + 1888);
              unsigned int v289 = *(_DWORD *)(v245 + 1896);
              LODWORD(v365) = v289 >> 8;
              if (v289 >> 8 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v364);
              }
              if (v289 <= 0xFF) {
                char v290 = 0;
              }
              else {
                char v290 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v289);
              }
              uint64_t v364 = (void *)(v290 & 1);
              uint64_t v246 = (llvm::Value *)llvm::ConstantInt::get(v288, (llvm::LLVMContext *)&v364, v120);
              if (v365 >= 0x41 && v364) {
                MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
              }
              *(void *)(v245 + 1560) = v246;
            }
          }
          else
          {
            uint64_t v246 = *(llvm::Value **)(v245 + 1568);
            if (!v246)
            {
              uint64_t v247 = *(llvm::ConstantInt **)(v245 + 1888);
              LODWORD(v365) = *(_DWORD *)(v245 + 1896) >> 8;
              if (v365 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v364);
              }
              uint64_t v364 = 0;
              uint64_t v246 = (llvm::Value *)llvm::ConstantInt::get(v247, (llvm::LLVMContext *)&v364, v120);
              if (v365 >= 0x41 && v364) {
                MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
              }
              *(void *)(v245 + 1568) = v246;
            }
          }
          uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, v246);
          uint64_t v4 = 1;
        }
LABEL_197:
        if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)v376);
        }
        else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
        {
          MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
        }
        if ((v4 & 1) == 0)
        {
          uint64_t v128 = *(void *)v355;
          if (*(_UNKNOWN **)v355 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (uint64_t)&unk_1CFB2E344);
          }
          *((void *)&v375 + 1) = *(void *)v355;
          if ((*(_DWORD *)(v128 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          v376[12] = v376[12] & 0xF0 | 3;
          *(_DWORD *)&v376[8] = *(_DWORD *)(v128 + 4) - 1;
          int v129 = *(_DWORD *)(v128 + 8);
          if ((v129 - 64) < 0xFFFFFF80)
          {
            uint64_t v301 = *(void *)v376;
            **(void **)unsigned int v376 = 0;
            bzero((void *)(v301 + 8), 8 * (((v129 + 64) >> 6) - 2) + 8);
          }
          else
          {
            *(void *)unsigned int v376 = 0;
          }
          LODWORD(v365) = v352;
          if (v352 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v364);
          }
          uint64_t v364 = 0;
          sub_1CBA62404((uint64_t)&v375, (uint64_t)&v364, 0, 1);
          if (v365 >= 0x41 && v364) {
            MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
          }
          if (*((_UNKNOWN **)&v375 + 1) != &unk_1CFB2E344)
          {
            unsigned int v131 = *(unsigned __int8 *)(v3 + 52);
            uint64_t v4 = 0;
            switch(4 * (v376[12] & 7) + (v131 & 7))
            {
              case 1u:
              case 4u:
              case 5u:
              case 6u:
              case 7u:
              case 9u:
              case 0xDu:
              case 0xFu:
                goto LABEL_213;
              case 2u:
              case 3u:
              case 0xBu:
                int v132 = ~(v376[12] >> 2) & 2;
                goto LABEL_211;
              case 8u:
              case 0xCu:
              case 0xEu:
                int v132 = (v131 >> 2) & 2;
                goto LABEL_211;
              case 0xAu:
                int v133 = (v376[12] >> 3) & 1;
                if (v133 != ((v131 >> 3) & 1)) {
                  goto LABEL_516;
                }
                int v132 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)((char *)&v375 + 8), v355);
                if ((v376[12] & 8) == 0) {
                  goto LABEL_211;
                }
                if (!v132) {
                  goto LABEL_445;
                }
                goto LABEL_212;
              default:
                int v133 = (v376[12] >> 3) & 1;
                if (v133 == ((v131 >> 3) & 1)) {
                  goto LABEL_212;
                }
LABEL_516:
                int v132 = (2 * v133) ^ 2;
                goto LABEL_211;
            }
          }
          int v132 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v375 + 8), v355);
LABEL_211:
          if (v132 == 2)
          {
LABEL_445:
            uint64_t v248 = **(void **)(*(void *)(a1 + 24) + 64);
            if ((v351 - 33) <= 2)
            {
              int8x8_t v249 = *(llvm::Value **)(v248 + 1560);
              if (!v249)
              {
                uint64_t v291 = *(llvm::ConstantInt **)(v248 + 1888);
                unsigned int v292 = *(_DWORD *)(v248 + 1896);
                LODWORD(v365) = v292 >> 8;
                if (v292 >> 8 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v364);
                }
                if (v292 <= 0xFF) {
                  LOBYTE(v293) = 0;
                }
                else {
                  unint64_t v293 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v292);
                }
                uint64_t v364 = (void *)(v293 & 1);
                int8x8_t v249 = (llvm::Value *)llvm::ConstantInt::get(v291, (llvm::LLVMContext *)&v364, v130);
                if (v365 >= 0x41 && v364) {
                  MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
                }
                *(void *)(v248 + 1560) = v249;
              }
            }
            else
            {
              int8x8_t v249 = *(llvm::Value **)(v248 + 1568);
              if (!v249)
              {
                uint8x8_t v250 = *(llvm::ConstantInt **)(v248 + 1888);
                LODWORD(v365) = *(_DWORD *)(v248 + 1896) >> 8;
                if (v365 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v364);
                }
                uint64_t v364 = 0;
                int8x8_t v249 = (llvm::Value *)llvm::ConstantInt::get(v250, (llvm::LLVMContext *)&v364, v130);
                if (v365 >= 0x41 && v364) {
                  MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
                }
                *(void *)(v248 + 1568) = v249;
              }
            }
            uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, v249);
            uint64_t v4 = 1;
          }
          else
          {
LABEL_212:
            uint64_t v4 = 0;
          }
LABEL_213:
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)v376);
          }
          else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
          {
            MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
          }
          if ((v4 & 1) == 0)
          {
            uint64_t v134 = 41;
LABEL_217:
            uint64_t v4 = (uint64_t)sub_1CC56C0C0((llvm *)v134, (llvm::detail::IEEEFloat *)v3, v356, 0);
            uint64_t v135 = v3 + 24;
            if (*(_UNKNOWN **)(v3 + 32) == &unk_1CFB2E344) {
              uint64_t v135 = *(void *)(v3 + 40);
            }
            if ((*(unsigned char *)(v135 + 28) & 7) == 3
              || (v5 == 71 ? (uint64_t v136 = 43) : (uint64_t v136 = 44),
                  sub_1CC56C0C0((llvm *)v136, (llvm::detail::IEEEFloat *)v4, *(llvm::Constant **)v3, 0) == (llvm::detail::IEEEFloat *)v3))
            {
LABEL_224:
              unint64_t v137 = operator new(0x80uLL);
              uint64_t v39 = (uint64_t)(v137 + 16);
              v137[21] = v137[21] & 0x38000000 | 2;
              *(void *)unint64_t v137 = 0;
              *((void *)v137 + 1) = 0;
              *((void *)v137 + 2) = 0;
              *((void *)v137 + 3) = v137 + 16;
              *((void *)v137 + 4) = 0;
              *((void *)v137 + 5) = 0;
              *((void *)v137 + 6) = 0;
              *((void *)v137 + 7) = v137 + 16;
              int v138 = *(_DWORD *)(v2 + 20);
              if ((v138 & 0x40000000) != 0) {
                uint64_t v139 = *(void ***)(v2 - 8);
              }
              else {
                uint64_t v139 = (void **)(v2 - 32 * (v138 & 0x7FFFFFF));
              }
              uint64_t v140 = *v139;
              *(_WORD *)&v376[16] = 257;
              uint64_t v141 = (void **)*v140;
              uint64_t v142 = **(void **)*v140 + 1888;
              if (*v140 && (v141[1] & 0xFE) == 0x12)
              {
                unint64_t v240 = (uint64_t **)(**(void **)*v140 + 1888);
                unint64_t v241 = (llvm::Type *)*((unsigned int *)v141 + 8);
                if (*((_DWORD *)v141 + 2) == 19) {
                  llvm::ScalableVectorType::get(v240, v241);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v240, v241);
                }
                uint64_t v142 = v242;
              }
              llvm::CmpInst::CmpInst((llvm::Value *)v39, v142, 53, v351, (uint64_t)v140, v4, (const char **)&v375, 0, 0);
              return (llvm::UndefValue **)v39;
            }
            if (v351 == 36)
            {
LABEL_388:
              if (*(_UNKNOWN **)v355 == &unk_1CFB2E344) {
                uint64_t v354 = *(void *)(v3 + 40);
              }
              if ((*(unsigned char *)(v354 + 28) & 8) == 0)
              {
                __int16 v225 = 37;
LABEL_392:
                LOWORD(v351) = v225;
                goto LABEL_224;
              }
LABEL_726:
              int v329 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
              uint64_t v330 = *v329;
              uint64_t v4 = *(void *)(*v329 + 1568);
              if (!v4)
              {
                char v331 = *(llvm::ConstantInt **)(v330 + 1888);
                DWORD2(v375) = *(_DWORD *)(v330 + 1896) >> 8;
                if (DWORD2(v375) > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v375);
                }
                *(void *)&long long v375 = 0;
                uint64_t v4 = (uint64_t)llvm::ConstantInt::get(v331, (llvm::LLVMContext *)&v375, v109);
                if (DWORD2(v375) >= 0x41 && (void)v375) {
                  MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
                }
                *(void *)(v330 + 1568) = v4;
              }
              goto LABEL_731;
            }
            switch(v351)
            {
              case '!':
                goto LABEL_774;
              case '""':
              case '#':
                if (*(_UNKNOWN **)v355 == &unk_1CFB2E344) {
                  uint64_t v354 = *(void *)(v3 + 40);
                }
                if ((*(unsigned char *)(v354 + 28) & 8) == 0)
                {
                  __int16 v225 = 34;
                  goto LABEL_392;
                }
LABEL_774:
                uint64_t v339 = *(uint64_t **)(*(void *)(a1 + 24) + 64);
                uint64_t v333 = *v339;
                uint64_t v4 = *(void *)(*v339 + 1560);
                if (v4) {
                  goto LABEL_731;
                }
                unsigned int v340 = *(llvm::ConstantInt **)(v333 + 1888);
                unsigned int v341 = *(_DWORD *)(v333 + 1896);
                DWORD2(v375) = v341 >> 8;
                if (v341 >> 8 > 0x40) {
LABEL_814:
                }
                  llvm::APInt::initSlowCase((llvm::APInt *)&v375);
                if (v341 <= 0xFF) {
                  LOBYTE(v342) = 0;
                }
                else {
                  unint64_t v342 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v341);
                }
                break;
              case '$':
                goto LABEL_586;
              case '%':
                goto LABEL_388;
              case '&':
              case '\'':
                if (*(_UNKNOWN **)v355 == &unk_1CFB2E344) {
                  uint64_t v354 = *(void *)(v3 + 40);
                }
                if ((*(unsigned char *)(v354 + 28) & 8) != 0) {
                  __int16 v225 = 39;
                }
                else {
                  __int16 v225 = 38;
                }
                goto LABEL_392;
              case '(':
              case ')':
                if (*(_UNKNOWN **)v355 == &unk_1CFB2E344) {
                  uint64_t v354 = *(void *)(v3 + 40);
                }
                if ((*(unsigned char *)(v354 + 28) & 8) != 0) {
                  __int16 v225 = 40;
                }
                else {
                  __int16 v225 = 41;
                }
                goto LABEL_392;
              default:
                goto LABEL_726;
            }
LABEL_782:
            *(void *)&long long v375 = v342 & 1;
            uint64_t v4 = (uint64_t)llvm::ConstantInt::get(v340, (llvm::LLVMContext *)&v375, v109);
            if (DWORD2(v375) >= 0x41 && (void)v375) {
              MEMORY[0x1D25D9CB0](v375, 0x1000C8000313F17);
            }
            *(void *)(v333 + 1560) = v4;
LABEL_731:
            uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, (llvm::Value *)v4);
          }
        }
      }
      else
      {
        uint64_t v219 = *v115;
        if ((_UNKNOWN *)v219 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (uint64_t)&unk_1CFB2E344);
        }
        *((void *)&v375 + 1) = v219;
        if ((*(_DWORD *)(v219 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        v376[12] = v376[12] & 0xF0 | 3;
        *(_DWORD *)&v376[8] = *(_DWORD *)(v219 + 4) - 1;
        int v220 = *(_DWORD *)(v219 + 8);
        if ((v220 - 64) < 0xFFFFFF80)
        {
          uint64_t v334 = *(void *)v376;
          **(void **)unsigned int v376 = 0;
          bzero((void *)(v334 + 8), 8 * (((v220 + 64) >> 6) - 2) + 8);
        }
        else
        {
          *(void *)unsigned int v376 = 0;
        }
        LODWORD(v365) = v352;
        if (v352 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v364);
        }
        if (v352) {
          unint64_t v221 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v352;
        }
        else {
          unint64_t v221 = 0;
        }
        uint64_t v364 = (void *)(v221 & ~(1 << (v352 - 1)));
        sub_1CBA62404((uint64_t)&v375, (uint64_t)&v364, 1, 1);
        if (v365 >= 0x41 && v364) {
          MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
        }
        if (*((_UNKNOWN **)&v375 + 1) != &unk_1CFB2E344)
        {
          unsigned int v223 = *(unsigned __int8 *)(v3 + 52);
          uint64_t v4 = 0;
          switch(4 * (v376[12] & 7) + (v223 & 7))
          {
            case 1u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 9u:
            case 0xDu:
            case 0xFu:
              goto LABEL_407;
            case 2u:
            case 3u:
            case 0xBu:
              int v224 = ~(v376[12] >> 2) & 2;
              goto LABEL_405;
            case 8u:
            case 0xCu:
            case 0xEu:
              int v224 = (v223 >> 2) & 2;
              goto LABEL_405;
            case 0xAu:
              int v230 = (v376[12] >> 3) & 1;
              if (v230 != ((v223 >> 3) & 1)) {
                goto LABEL_571;
              }
              int v224 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)((char *)&v375 + 8), v355);
              if ((v376[12] & 8) == 0) {
                goto LABEL_405;
              }
              if (v224 == 2) {
                goto LABEL_518;
              }
              goto LABEL_406;
            default:
              int v230 = (v376[12] >> 3) & 1;
              if (v230 == ((v223 >> 3) & 1)) {
                goto LABEL_406;
              }
LABEL_571:
              int v224 = (2 * v230) ^ 2;
              goto LABEL_405;
          }
        }
        int v224 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v375 + 8), v355);
LABEL_405:
        if (v224)
        {
LABEL_406:
          uint64_t v4 = 0;
        }
        else
        {
LABEL_518:
          uint64_t v275 = **(void **)(*(void *)(a1 + 24) + 64);
          if (v351 == 40 || (v351 & 0xFFFFFFE7) == 0x21)
          {
            uint64_t v276 = *(llvm::Value **)(v275 + 1560);
            if (!v276)
            {
              BOOL v294 = *(llvm::ConstantInt **)(v275 + 1888);
              unsigned int v295 = *(_DWORD *)(v275 + 1896);
              LODWORD(v365) = v295 >> 8;
              if (v295 >> 8 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v364);
              }
              if (v295 <= 0xFF) {
                LOBYTE(v296) = 0;
              }
              else {
                unint64_t v296 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v295);
              }
              uint64_t v364 = (void *)(v296 & 1);
              uint64_t v276 = (llvm::Value *)llvm::ConstantInt::get(v294, (llvm::LLVMContext *)&v364, v222);
              if (v365 >= 0x41 && v364) {
                MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
              }
              *(void *)(v275 + 1560) = v276;
            }
          }
          else
          {
            uint64_t v276 = *(llvm::Value **)(v275 + 1568);
            if (!v276)
            {
              uint64_t v277 = *(llvm::ConstantInt **)(v275 + 1888);
              LODWORD(v365) = *(_DWORD *)(v275 + 1896) >> 8;
              if (v365 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v364);
              }
              uint64_t v364 = 0;
              uint64_t v276 = (llvm::Value *)llvm::ConstantInt::get(v277, (llvm::LLVMContext *)&v364, v222);
              if (v365 >= 0x41 && v364) {
                MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
              }
              *(void *)(v275 + 1568) = v276;
            }
          }
          uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, v276);
          uint64_t v4 = 1;
        }
LABEL_407:
        if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)v376);
        }
        else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
        {
          MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
        }
        if ((v4 & 1) == 0)
        {
          uint64_t v231 = *(void *)v355;
          if (*(_UNKNOWN **)v355 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v375 + 1, (uint64_t)&unk_1CFB2E344);
          }
          *((void *)&v375 + 1) = *(void *)v355;
          if ((*(_DWORD *)(v231 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          v376[12] = v376[12] & 0xF0 | 3;
          *(_DWORD *)&v376[8] = *(_DWORD *)(v231 + 4) - 1;
          int v232 = *(_DWORD *)(v231 + 8);
          if ((v232 - 64) < 0xFFFFFF80)
          {
            uint64_t v335 = *(void *)v376;
            **(void **)unsigned int v376 = 0;
            bzero((void *)(v335 + 8), 8 * (((v232 + 64) >> 6) - 2) + 8);
          }
          else
          {
            *(void *)unsigned int v376 = 0;
          }
          LODWORD(v365) = v352;
          uint64_t v364 = (void *)(1 << (v352 - 1));
          sub_1CBA62404((uint64_t)&v375, (uint64_t)&v364, 1, 1);
          if (v365 >= 0x41 && v364) {
            MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
          }
          if (*((_UNKNOWN **)&v375 + 1) != &unk_1CFB2E344)
          {
            unsigned int v234 = *(unsigned __int8 *)(v3 + 52);
            uint64_t v4 = 0;
            switch(4 * (v376[12] & 7) + (v234 & 7))
            {
              case 1u:
              case 4u:
              case 5u:
              case 6u:
              case 7u:
              case 9u:
              case 0xDu:
              case 0xFu:
                goto LABEL_422;
              case 2u:
              case 3u:
              case 0xBu:
                int v235 = ~(v376[12] >> 2) & 2;
                goto LABEL_420;
              case 8u:
              case 0xCu:
              case 0xEu:
                int v235 = (v234 >> 2) & 2;
                goto LABEL_420;
              case 0xAu:
                int v236 = (v376[12] >> 3) & 1;
                if (v236 != ((v234 >> 3) & 1)) {
                  goto LABEL_573;
                }
                int v235 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)((char *)&v375 + 8), v355);
                if ((v376[12] & 8) == 0) {
                  goto LABEL_420;
                }
                if (!v235) {
                  goto LABEL_525;
                }
                goto LABEL_421;
              default:
                int v236 = (v376[12] >> 3) & 1;
                if (v236 == ((v234 >> 3) & 1)) {
                  goto LABEL_421;
                }
LABEL_573:
                int v235 = (2 * v236) ^ 2;
                goto LABEL_420;
            }
          }
          int v235 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v375 + 8), v355);
LABEL_420:
          if (v235 == 2)
          {
LABEL_525:
            uint64_t v278 = **(void **)(*(void *)(a1 + 24) + 64);
            if (v351 == 33 || (v351 & 0xEEEEEEEE) == 0x26)
            {
              uint64_t v279 = *(llvm::Value **)(v278 + 1560);
              if (!v279)
              {
                unsigned int v297 = *(llvm::ConstantInt **)(v278 + 1888);
                unsigned int v298 = *(_DWORD *)(v278 + 1896);
                LODWORD(v365) = v298 >> 8;
                if (v298 >> 8 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v364);
                }
                if (v298 <= 0xFF) {
                  LOBYTE(v299) = 0;
                }
                else {
                  unint64_t v299 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v298);
                }
                uint64_t v364 = (void *)(v299 & 1);
                uint64_t v279 = (llvm::Value *)llvm::ConstantInt::get(v297, (llvm::LLVMContext *)&v364, v233);
                if (v365 >= 0x41 && v364) {
                  MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
                }
                *(void *)(v278 + 1560) = v279;
              }
            }
            else
            {
              uint64_t v279 = *(llvm::Value **)(v278 + 1568);
              if (!v279)
              {
                uint64_t v280 = *(llvm::ConstantInt **)(v278 + 1888);
                LODWORD(v365) = *(_DWORD *)(v278 + 1896) >> 8;
                if (v365 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v364);
                }
                uint64_t v364 = 0;
                uint64_t v279 = (llvm::Value *)llvm::ConstantInt::get(v280, (llvm::LLVMContext *)&v364, v233);
                if (v365 >= 0x41 && v364) {
                  MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
                }
                *(void *)(v278 + 1568) = v279;
              }
            }
            uint64_t v39 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v6, v279);
            uint64_t v4 = 1;
          }
          else
          {
LABEL_421:
            uint64_t v4 = 0;
          }
LABEL_422:
          if (*((_UNKNOWN **)&v375 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)v376);
          }
          else if ((*(_DWORD *)(*((void *)&v375 + 1) + 8) - 64) <= 0xFFFFFF7F && *(void *)v376)
          {
            MEMORY[0x1D25D9CB0](*(void *)v376, 0x1000C8000313F17);
          }
          if ((v4 & 1) == 0)
          {
            uint64_t v134 = 42;
            goto LABEL_217;
          }
        }
      }
    }
    if (v39) {
      return (llvm::UndefValue **)v39;
    }
    goto LABEL_266;
  }
  __int16 v35 = *((_WORD *)v6 + 9) & 0xFFC0 | 7;
LABEL_79:
  *((_WORD *)v6 + 9) = v35;
  int v64 = llvm::Constant::getNullValue(v28, v25, v26);
  if (*(v6 - 4))
  {
    **(v6 - 2) = (uint64_t *)*(v6 - 3);
    uint64_t v65 = (uint64_t)*(v6 - 3);
    if (v65) {
      *(void *)(v65 + 16) = *(v6 - 2);
    }
  }
  *int v10 = v64;
  if (v64)
  {
    uint64_t v68 = (void *)*((void *)v64 + 1);
    uint64_t v66 = (llvm::Constant ***)((char *)v64 + 8);
    __int16 v67 = v68;
    *(v6 - 3) = (uint64_t **)v68;
    if (v68) {
      v67[2] = v6 - 3;
    }
    *(v6 - 2) = (uint64_t **)v66;
    unsigned __int8 *v66 = v10;
  }
  return (llvm::UndefValue **)v6;
}

uint64_t sub_1CCA7826C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v10 = 0;
  uint64_t result = sub_1CC93D528((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC93D5C4(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CCA782F4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 == 83)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = v5 + 40;
    for (uint64_t i = *(void *)(v5 + 48); i != v6; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v8 = i - 24;
      if (!i) {
        uint64_t v8 = 0;
      }
      if (*(unsigned char *)(v8 + 16) != 83) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    if (a2 && v4 >= 0x1C)
    {
      if ((a3 & 1) == 0)
      {
        uint64_t v9 = *(void *)(a2 + 32);
        if (v9) {
          a2 = v9 - 24;
        }
        else {
          a2 = 0;
        }
      }
      *(void *)(result + 48) = *(void *)(a2 + 40);
      *(void *)(result + 56) = a2 + 24;
      int v10 = *(unsigned __int8 **)(a2 + 48);
      int v24 = v10;
      if (!v10)
      {
        uint64_t v11 = 0;
        goto LABEL_37;
      }
      goto LABEL_45;
    }
    if (!a2 || v4 != 21) {
      return result;
    }
    uint64_t v12 = *(void *)(*(void *)(a2 + 24) + 80);
    uint64_t v13 = v12 - 24;
    if (!v12) {
      uint64_t v13 = 0;
    }
    uint64_t v6 = v13 + 40;
    for (uint64_t i = *(void *)(v13 + 48); i != v6; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v14 = i - 24;
      if (!i) {
        uint64_t v14 = 0;
      }
      if (*(unsigned char *)(v14 + 16) != 83)
      {
LABEL_27:
        unsigned int v15 = *(unsigned __int8 *)(i - 8) - 38;
        BOOL v16 = v15 > 0x38;
        uint64_t v17 = (1 << v15) & 0x100060000000001;
        if (v16 || v17 == 0) {
          uint64_t v6 = i;
        }
        else {
          uint64_t v6 = *(void *)(i + 8);
        }
        break;
      }
    }
  }
  uint64_t v11 = 0;
  if (v6) {
    uint64_t v19 = v6 - 24;
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)(result + 48) = *(void *)(v19 + 40);
  *(void *)(result + 56) = v19 + 24;
  int v10 = *(unsigned __int8 **)(v19 + 48);
  int v24 = v10;
  if (v10)
  {
LABEL_45:
    llvm::MetadataTracking::track((uint64_t)&v24, v10, 2);
    uint64_t v11 = (uint64_t)v24;
  }
LABEL_37:
  uint64_t result = sub_1CB8461A4(v3, 0, v11);
  if (!v24) {
    return result;
  }
  int v20 = *v24;
  if ((v20 - 4) > 0x1E)
  {
    if ((v20 - 3) >= 0xFFFFFFFE) {
      char v23 = v24;
    }
    else {
      char v23 = 0;
    }
    if ((v20 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v22 = (unint64_t)(v23 + 8);
LABEL_51:
      unsigned int v25 = &v24;
      return sub_1CC5FA668(v22 + 16, &v25);
    }
    if (v20 == 3) {
      *((void *)v24 + 1) = 0;
    }
  }
  else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
  {
    uint64_t v21 = *((void *)v24 + 2);
    if ((v21 & 4) != 0)
    {
      unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (v22) {
        goto LABEL_51;
      }
    }
  }
  return result;
}

unsigned int *sub_1CCA784F0(unsigned int *this, unsigned int a2)
{
  unsigned int v2 = this[2];
  if (v2 > 0x40) {
    return llvm::APInt::ashrSlowCase(this, a2);
  }
  uint64_t v3 = (uint64_t)(*(void *)this << -(char)v2) >> -(char)v2;
  if (v2 == a2) {
    char v4 = 63;
  }
  else {
    char v4 = a2;
  }
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if (!v2) {
    unint64_t v5 = 0;
  }
  unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if (v2) {
    BOOL v7 = v2 == a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    char v8 = v4;
  }
  else {
    char v8 = a2;
  }
  if (v7) {
    unint64_t v9 = v5;
  }
  else {
    unint64_t v9 = v6;
  }
  *(void *)this = v9 & (v3 >> v8);
  return this;
}

uint64_t sub_1CCA78558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 56)
  {
    if (v5 != 5) {
      return (v5 == 5) & a3;
    }
    if (*(_WORD *)(a2 + 18) != 28)
    {
LABEL_10:
      LOBYTE(a3) = 0;
      return (v5 == 5) & a3;
    }
    BOOL v16 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (sub_1CD68C1E0(a1, (uint64_t)v16))
    {
      if (!v16)
      {
LABEL_36:
        int v18 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        if (sub_1CD68C1E0(a1, (uint64_t)v18))
        {
          if (!v18) {
            goto LABEL_10;
          }
        }
        else
        {
          BOOL v19 = sub_1CCA78FE0(v18);
          LOBYTE(a3) = 0;
          if (!v18 || !v19) {
            return (v5 == 5) & a3;
          }
        }
        **(void **)(a1 + 48) = v18;
        a3 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (!a3) {
          return (v5 == 5) & a3;
        }
LABEL_35:
        **(void **)(a1 + 56) = a3;
        LOBYTE(a3) = 1;
        return (v5 == 5) & a3;
      }
    }
    else
    {
      BOOL v17 = sub_1CCA78FE0(v16);
      if (!v16 || !v17) {
        goto LABEL_36;
      }
    }
    **(void **)(a1 + 48) = v16;
    a3 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (a3) {
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  uint64_t v6 = *(void *)(a2 - 64);
  if ((sub_1CCA78A3C(a1, v6) & 1) != 0 || sub_1CCA78C74(a1 + 3, v6, v7))
  {
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v8 = a1 + 8;
  int v9 = *(unsigned __int8 *)(v6 + 16);
  if (v9 != 5)
  {
    if (v9 == 54 && (sub_1CBF687D0(v8, *(llvm::Constant **)(v6 - 64)) & 1) != 0) {
      goto LABEL_16;
    }
LABEL_14:
    if (!sub_1CCA78DC8(a1 + 16, 26, v6) && (sub_1CCA787D8((llvm::Constant *)v6) & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(_WORD *)(v6 + 18) != 26
    || (sub_1CBF68974(v8, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))) & 1) == 0)
  {
    goto LABEL_14;
  }
LABEL_16:
  **(void **)(a1 + 48) = v6;
  uint64_t v11 = *(void *)(a2 - 32);
  if (v11)
  {
LABEL_28:
    **(void **)(a1 + 56) = v11;
    return 1;
  }
LABEL_17:
  uint64_t v12 = *(void *)(a2 - 32);
  if ((sub_1CCA78A3C(a1, v12) & 1) != 0 || sub_1CCA78C74(a1 + 3, v12, v13))
  {
    if (!v12) {
      return 0;
    }
    goto LABEL_27;
  }
  uint64_t v14 = a1 + 8;
  int v15 = *(unsigned __int8 *)(v12 + 16);
  if (v15 != 5)
  {
    if (v15 == 54 && (sub_1CBF687D0(v14, *(llvm::Constant **)(v12 - 64)) & 1) != 0) {
      goto LABEL_27;
    }
LABEL_25:
    if (!sub_1CCA78DC8(a1 + 16, 26, v12) && (sub_1CCA787D8((llvm::Constant *)v12) & 1) == 0) {
      return 0;
    }
    goto LABEL_27;
  }
  if (*(_WORD *)(v12 + 18) != 26
    || (sub_1CBF68974(v14, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF))) & 1) == 0)
  {
    goto LABEL_25;
  }
LABEL_27:
  **(void **)(a1 + 48) = v12;
  uint64_t v11 = *(void *)(a2 - 64);
  if (v11) {
    goto LABEL_28;
  }
  return 0;
}

uint64_t sub_1CCA787D8(llvm::Constant *this)
{
  unsigned int v3 = *((unsigned __int8 *)this + 16);
  if (!this || v3 != 16)
  {
    uint64_t v8 = *(void *)this;
    if (*(void *)this) {
      BOOL v9 = (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18;
    }
    else {
      BOOL v9 = 0;
    }
    BOOL v10 = !v9 || v3 > 0x14;
    int v11 = v10;
    if (v10) {
      return (v11 ^ 1) & v1;
    }
    SplatValue = (char *)llvm::Constant::getSplatValue(this, 0);
    if (SplatValue && SplatValue[16] == 16)
    {
      char v13 = SplatValue + 24;
      uint64_t v14 = *((unsigned int *)SplatValue + 8);
      if (v14 <= 0x40)
      {
        BOOL v1 = ((*v13 + 1) & *v13) == 0 && *v13 != 0;
        return (v11 ^ 1) & v1;
      }
      int v31 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(SplatValue + 24));
      if (v31)
      {
        int v32 = 0;
        int64_t v33 = (unint64_t)(v14 + 63) >> 6;
        do
        {
          BOOL v10 = v33-- < 1;
          if (v10) {
            break;
          }
          unint64_t v34 = *(void *)(*v13 + 8 * v33);
          v32 += __clz(v34);
        }
        while (!v34);
        int v35 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0) {
          int v35 = 0;
        }
        BOOL v1 = v35 + v31 + v32 == v14;
        return (v11 ^ 1) & v1;
      }
    }
    else if (*(unsigned char *)(v8 + 8) == 18)
    {
      int v16 = *(_DWORD *)(v8 + 32);
      if (v16)
      {
        BOOL v17 = 0;
        BOOL v1 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(this, v17);
          if (!AggregateElement) {
            break;
          }
          int v19 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v19 - 11) >= 2)
          {
            if (v19 != 16) {
              break;
            }
            uint64_t v20 = *((unsigned int *)AggregateElement + 8);
            if (v20 > 0x40)
            {
              unsigned int v36 = AggregateElement + 3;
              int v22 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(AggregateElement + 3));
              if (!v22) {
                break;
              }
              int v23 = 0;
              int64_t v24 = (unint64_t)(v20 + 63) >> 6;
              do
              {
                BOOL v10 = v24-- < 1;
                if (v10) {
                  break;
                }
                unint64_t v25 = *(void *)(*v36 + 8 * v24);
                v23 += __clz(v25);
              }
              while (!v25);
              int v26 = v20 | 0xFFFFFFC0;
              if ((v20 & 0x3F) == 0) {
                int v26 = 0;
              }
              if (v26 + v22 + v23 != v20) {
                break;
              }
            }
            else
            {
              BOOL v1 = 0;
              uint64_t v21 = AggregateElement[3];
              if (!v21 || ((v21 + 1) & v21) != 0) {
                return (v11 ^ 1) & v1;
              }
            }
            BOOL v1 = 1;
          }
          BOOL v17 = (llvm::Type *)(v17 + 1);
          if (v17 == v16) {
            return (v11 ^ 1) & v1;
          }
        }
      }
    }
    BOOL v1 = 0;
    return (v11 ^ 1) & v1;
  }
  char v4 = (llvm::Constant *)((char *)this + 24);
  uint64_t v5 = *((unsigned int *)this + 8);
  if (v5 <= 0x40) {
    return ((*(void *)v4 + 1) & *(void *)v4) == 0 && *(void *)v4 != 0;
  }
  uint64_t result = llvm::APInt::countTrailingOnesSlowCase(v4);
  if (result)
  {
    int v27 = 0;
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      BOOL v10 = v28-- < 1;
      if (v10) {
        break;
      }
      unint64_t v29 = *(void *)(*(void *)v4 + 8 * v28);
      v27 += __clz(v29);
    }
    while (!v29);
    int v30 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v30 = 0;
    }
    return v30 + result + v27 == v5;
  }
  return result;
}

uint64_t sub_1CCA78A3C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 58) {
      return 0;
    }
    uint64_t v5 = *(void *)(a2 - 64);
    int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 == 5)
    {
      if (*(_WORD *)(v5 + 18) != 25
        || !sub_1CBF68974(a1, *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_15;
      }
    }
    else if (v6 != 53 || (sub_1CBF687D0(a1, *(llvm::Constant **)(v5 - 64)) & 1) == 0)
    {
      goto LABEL_15;
    }
    if ((sub_1CBF687D0(a1 + 2, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
    {
LABEL_15:
      uint64_t v9 = *(void *)(a2 - 32);
      int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 != 5)
      {
        if (v10 != 53 || (sub_1CBF687D0(a1, *(llvm::Constant **)(v9 - 64)) & 1) == 0) {
          return 0;
        }
        goto LABEL_21;
      }
      if (*(_WORD *)(v9 + 18) == 25)
      {
        uint64_t result = sub_1CBF68974(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)));
        if (!result) {
          return result;
        }
LABEL_21:
        uint64_t v12 = *(llvm::Constant **)(a2 - 64);
        return sub_1CBF687D0(a1 + 2, v12);
      }
      return 0;
    }
    return 1;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  int v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 25
      || !sub_1CBF68974(a1, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_28;
    }
  }
  else if (v8 != 53 || (sub_1CBF687D0(a1, *(llvm::Constant **)(v7 - 64)) & 1) == 0)
  {
    goto LABEL_28;
  }
  if (sub_1CBF68974(a1 + 2, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))) {
    return 1;
  }
LABEL_28:
  uint64_t v13 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  int v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 == 5)
  {
    if (*(_WORD *)(v13 + 18) != 25) {
      return 0;
    }
    uint64_t result = sub_1CBF68974(a1, *(llvm::Constant **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF)));
    if (!result) {
      return result;
    }
  }
  else if (v14 != 53 || (sub_1CBF687D0(a1, *(llvm::Constant **)(v13 - 64)) & 1) == 0)
  {
    return 0;
  }
  int v15 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));

  return sub_1CBF68974(a1 + 2, v15);
}

BOOL sub_1CCA78C74@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 41)
  {
    uint64_t v6 = *(void *)(a2 - 64);
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 25
        || !sub_1CBF5270C(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
      {
        return 0;
      }
    }
    else if (v7 != 53 || (sub_1CBF5250C(a1, *(llvm::Constant **)(v6 - 64)) & 1) == 0)
    {
      return 0;
    }
    return (sub_1CBF687D0(a1 + 2, *(llvm::Constant **)(a2 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 13) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 25
        || !sub_1CBF5270C(a1, *(llvm::Constant **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_21;
      }
    }
    else if (v9 != 53 || (sub_1CBF5250C(a1, *(llvm::Constant **)(v8 - 64)) & 1) == 0)
    {
      goto LABEL_21;
    }
    if ((sub_1CBF68974(a1 + 2, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_21:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

BOOL sub_1CCA78DC8(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  char v6 = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 != 5) {
      return (v5 == 5) & v6;
    }
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      uint64_t v10 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 5)
      {
        if (*(_WORD *)(v10 + 18) != 25) {
          goto LABEL_23;
        }
        if (!sub_1CBF68974(a1, *(llvm::Constant **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)))) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
        if (!v12) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v11 != 53) {
          goto LABEL_23;
        }
        if (!sub_1CBF687D0(a1, *(llvm::Constant **)(v10 - 64))) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(v10 - 32);
        if (!v12) {
          goto LABEL_23;
        }
      }
      **(void **)(a1 + 8) = v12;
      if (**(void **)(a1 + 16) == *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32))
      {
        char v6 = 1;
        return (v5 == 5) & v6;
      }
    }
LABEL_23:
    char v6 = 0;
    return (v5 == 5) & v6;
  }
  uint64_t v7 = *(void *)(a3 - 64);
  int v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 25) {
      return 0;
    }
    if (!sub_1CBF68974(a1, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)))) {
      return 0;
    }
    uint64_t v9 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
    if (!v9) {
      return 0;
    }
  }
  else
  {
    if (v8 != 53) {
      return 0;
    }
    if (!sub_1CBF687D0(a1, *(llvm::Constant **)(v7 - 64))) {
      return 0;
    }
    uint64_t v9 = *(void *)(v7 - 32);
    if (!v9) {
      return 0;
    }
  }
  **(void **)(a1 + 8) = v9;
  return **(void **)(a1 + 16) == *(void *)(a3 - 32);
}

uint64_t sub_1CCA78F70(llvm::APInt *this)
{
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 <= 0x40) {
    return ((*(void *)this + 1) & *(void *)this) == 0 && *(void *)this != 0;
  }
  uint64_t result = llvm::APInt::countTrailingOnesSlowCase(this);
  if (result) {
    return llvm::APInt::countLeadingZerosSlowCase(this) + result == v2;
  }
  return result;
}

BOOL sub_1CCA78FE0(llvm::Constant *this)
{
  if (!this || *((unsigned char *)this + 16) != 16)
  {
    uint64_t v7 = *(void *)this;
    if (*(void *)this) {
      BOOL v8 = (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      return 0;
    }
    SplatValue = (char *)llvm::Constant::getSplatValue(this, 0);
    if (!SplatValue || SplatValue[16] != 16)
    {
      if (*(unsigned char *)(v7 + 8) == 18)
      {
        int v12 = *(_DWORD *)(v7 + 32);
        if (v12)
        {
          uint64_t v13 = 0;
          BOOL v6 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(this, v13);
            if (!AggregateElement) {
              break;
            }
            int v15 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v15 - 11) >= 2)
            {
              if (v15 != 16) {
                return 0;
              }
              uint64_t v16 = *((unsigned int *)AggregateElement + 8);
              if (v16 > 0x40)
              {
                unsigned int v36 = AggregateElement + 3;
                int v18 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(AggregateElement + 3));
                if (!v18) {
                  return 0;
                }
                int v19 = 0;
                int64_t v20 = (unint64_t)(v16 + 63) >> 6;
                do
                {
                  BOOL v21 = v20-- < 1;
                  if (v21) {
                    break;
                  }
                  unint64_t v22 = *(void *)(*v36 + 8 * v20);
                  v19 += __clz(v22);
                }
                while (!v22);
                int v23 = v16 | 0xFFFFFFC0;
                if ((v16 & 0x3F) == 0) {
                  int v23 = 0;
                }
                if (v23 + v18 + v19 != v16) {
                  return 0;
                }
              }
              else
              {
                BOOL v6 = 0;
                uint64_t v17 = AggregateElement[3];
                if (!v17 || ((v17 + 1) & v17) != 0) {
                  return v6;
                }
              }
              BOOL v6 = 1;
            }
            uint64_t v13 = (llvm::Type *)(v13 + 1);
            if (v13 == v12) {
              return v6;
            }
          }
        }
      }
      return 0;
    }
    uint64_t v10 = (uint64_t *)(SplatValue + 24);
    uint64_t v11 = *((unsigned int *)SplatValue + 8);
    if (v11 <= 0x40)
    {
      uint64_t v4 = *v10;
      return ((v4 + 1) & v4) == 0 && v4 != 0;
    }
    int v26 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(SplatValue + 24));
    if (!v26) {
      return 0;
    }
    int v27 = 0;
    int64_t v28 = (unint64_t)(v11 + 63) >> 6;
    do
    {
      BOOL v21 = v28-- < 1;
      if (v21) {
        break;
      }
      unint64_t v29 = *(void *)(*v10 + 8 * v28);
      v27 += __clz(v29);
    }
    while (!v29);
    int v30 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0) {
      int v30 = 0;
    }
    return v30 + v26 + v27 == v11;
  }
  unsigned int v2 = (llvm::Constant *)((char *)this + 24);
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3 > 0x40)
  {
    int v24 = llvm::APInt::countTrailingOnesSlowCase(v2);
    if (!v24) {
      return 0;
    }
    int v32 = 0;
    int64_t v33 = (unint64_t)(v3 + 63) >> 6;
    do
    {
      BOOL v21 = v33-- < 1;
      if (v21) {
        break;
      }
      unint64_t v34 = *(void *)(*(void *)v2 + 8 * v33);
      v32 += __clz(v34);
    }
    while (!v34);
    int v35 = v3 | 0xFFFFFFC0;
    if ((v3 & 0x3F) == 0) {
      int v35 = 0;
    }
    return v35 + v24 + v32 == v3;
  }
  uint64_t v4 = *(void *)v2;
  return ((v4 + 1) & v4) == 0 && v4 != 0;
}

uint64_t sub_1CCA7921C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 5)
  {
    if (*(_WORD *)(a2 + 18) == 26) {
      return sub_1CBF68974(a1, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    }
  }
  else if (v2 == 54)
  {
    return sub_1CBF687D0(a1, *(llvm::Constant **)(a2 - 64));
  }
  return 0;
}

BOOL sub_1CCA79260(int a1, llvm::Constant *this)
{
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (this && v4 == 16)
  {
    unsigned int v5 = *((_DWORD *)this + 8);
    BOOL v6 = (void *)(*((void *)this + 3) + 8 * ((v5 - 1) >> 6));
    if (v5 < 0x41) {
      BOOL v6 = (void *)((char *)this + 24);
    }
    return ((*v6 >> (v5 - 1)) & 1) == 0;
  }
  else
  {
    uint64_t v8 = *(void *)this;
    if (*(void *)this) {
      BOOL v9 = (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18;
    }
    else {
      BOOL v9 = 0;
    }
    BOOL v10 = !v9 || v4 > 0x14;
    int v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(this, 0);
      if (SplatValue && *((unsigned char *)SplatValue + 16) == 16)
      {
        uint64_t v14 = SplatValue[3];
        uint64_t v13 = (char *)(SplatValue + 3);
        unsigned int v15 = *((_DWORD *)v13 + 2);
        uint64_t v16 = (void *)(v14 + 8 * ((v15 - 1) >> 6));
        if (v15 < 0x41) {
          uint64_t v16 = v13;
        }
        BOOL v2 = ((*v16 >> (v15 - 1)) & 1) == 0;
      }
      else
      {
        if (*(unsigned char *)(v8 + 8) == 18)
        {
          int v17 = *(_DWORD *)(v8 + 32);
          if (v17)
          {
            int v18 = 0;
            BOOL v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(this, v18);
              if (!AggregateElement) {
                break;
              }
              int v20 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v20 - 11) >= 2)
              {
                if (v20 != 16) {
                  break;
                }
                uint64_t v22 = AggregateElement[3];
                BOOL v21 = AggregateElement + 3;
                unsigned int v23 = *((_DWORD *)v21 + 2);
                int v24 = (void *)(v22 + 8 * ((v23 - 1) >> 6));
                if (v23 < 0x41) {
                  int v24 = v21;
                }
                if ((*v24 >> (v23 - 1))) {
                  break;
                }
                BOOL v2 = 1;
              }
              int v18 = (llvm::Type *)(v18 + 1);
              if (v17 == v18) {
                return (v11 ^ 1) & v2;
              }
            }
          }
        }
        BOOL v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

uint64_t sub_1CCA793C8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v3 = v2 - 28;
  BOOL v5 = v2 < 0x1C && v2 != 5;
  if (!a2 || v5) {
    goto LABEL_23;
  }
  if (v2 <= 0x1B) {
    unsigned int v3 = *(unsigned __int16 *)(a2 + 18);
  }
  if (v3 != 38
    || ((int v6 = *(_DWORD *)(a2 + 20), (v6 & 0x40000000) != 0)
      ? (uint64_t v7 = *(uint64_t **)(a2 - 8))
      : (uint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF))),
        (v8 = *v7, unsigned int v9 = *(unsigned __int8 *)(v8 + 16), v8) ? (v10 = v9 >= 0x1C) : (v10 = 0),
        v10 ? (BOOL v11 = v9 - 53 > 1) : (BOOL v11 = 1),
        v11))
  {
LABEL_23:
    if (v2 < 0x1C || v2 - 53 > 1) {
      return 0;
    }
    uint64_t v14 = (void **)(a1 + 24);
  }
  else
  {
    uint64_t v14 = (void **)(a1 + 8);
    a2 = v8;
  }
  **uint64_t v14 = a2;
  return 1;
}

uint64_t sub_1CCA79460(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 != 38
      || ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (unsigned int v9 = *(uint64_t **)(a2 - 8))
        : (unsigned int v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9, v11 = *(unsigned __int8 *)(v10 + 16), v10) ? (v12 = v11 >= 0x1C) : (v12 = 0),
          v12 ? (BOOL v13 = v11 - 53 > 1) : (BOOL v13 = 1),
          v13))
    {
      int v2 = 0;
    }
    else
    {
      **(void **)(a1 + 8) = v10;
      int v2 = 1;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CCA794E0(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 16) - 41 <= 0x11)
    {
      uint64_t v2 = *(void *)(a2 - 64);
      if (v2)
      {
        uint64_t v3 = result;
        **(void **)uint64_t result = v2;
        uint64_t v4 = *(void *)(a2 - 32);
        uint64_t result = sub_1CBC5BE40((void **)(result + 8), v4);
        if ((result & 1) == 0)
        {
          if (v4) {
            **(void **)(v3 + 16) = v4;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1CCA79544(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 85)
  {
    uint64_t v6 = *(void *)(a2 - 96);
    if (v6 && *(unsigned char *)(v6 + 16) == 81)
    {
      uint64_t v7 = *(void *)(a2 - 64);
      uint64_t v8 = *(void *)(a2 - 32);
      uint64_t v9 = *(void *)(v6 - 64);
      uint64_t v10 = *(void *)(v6 - 32);
      BOOL v11 = v7 == v9 && v8 == v10;
      if (v11 || (v7 == v10 ? (BOOL v12 = v8 == v9) : (BOOL v12 = 0), v12))
      {
        int v13 = *(_WORD *)(v6 + 18) & 0x3E;
        if (v7 == v9)
        {
          if (v13 == 38) {
            return 1;
          }
        }
        else if (v13 == 40)
        {
          return 1;
        }
      }
    }
  }
  else if (v4 == 84)
  {
    uint64_t v5 = *(void *)(a2 - 32);
    if (v5)
    {
      if (!*(unsigned char *)(v5 + 16)
        && *(void *)(v5 + 24) == *(void *)(a2 + 72)
        && (*(unsigned char *)(v5 + 33) & 0x20) != 0
        && *(_DWORD *)(v5 + 36) == 274)
      {
        return 1;
      }
    }
  }
  if (sub_1CC04AC20(a1 + 2, a2)) {
    return 1;
  }
  int v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 85)
  {
    uint64_t v16 = *(void *)(a2 - 96);
    if (!v16 || *(unsigned char *)(v16 + 16) != 81) {
      goto LABEL_43;
    }
    uint64_t v17 = *(void *)(a2 - 64);
    uint64_t v18 = *(void *)(a2 - 32);
    uint64_t v19 = *(void *)(v16 - 64);
    uint64_t v20 = *(void *)(v16 - 32);
    BOOL v21 = v17 == v19 && v18 == v20;
    if (!v21 && (v17 != v20 || v18 != v19)) {
      goto LABEL_43;
    }
    int v22 = *(_WORD *)(v16 + 18) & 0x3E;
    if (v17 == v19)
    {
      if (v22 != 34) {
        goto LABEL_43;
      }
    }
    else if (v22 != 36)
    {
      goto LABEL_43;
    }
    return 1;
  }
  if (v14 == 84)
  {
    uint64_t v15 = *(void *)(a2 - 32);
    if (v15)
    {
      if (!*(unsigned char *)(v15 + 16)
        && *(void *)(v15 + 24) == *(void *)(a2 + 72)
        && (*(unsigned char *)(v15 + 33) & 0x20) != 0
        && *(_DWORD *)(v15 + 36) == 305)
      {
        return 1;
      }
    }
  }
LABEL_43:

  return sub_1CC04AB64(a1 + 6, a2);
}

uint64_t sub_1CCA796F8(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30) {
      return 0;
    }
    uint64_t v8 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 25) {
        goto LABEL_34;
      }
      if (!sub_1CBF68974(a1, *(llvm::Constant **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)))) {
        goto LABEL_34;
      }
      uint64_t v10 = *(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      if (!v10) {
        goto LABEL_34;
      }
    }
    else
    {
      if (v9 != 53) {
        goto LABEL_34;
      }
      if (!sub_1CBF687D0(a1, *(llvm::Constant **)(v8 - 64))) {
        goto LABEL_34;
      }
      uint64_t v10 = *(void *)(v8 - 32);
      if (!v10) {
        goto LABEL_34;
      }
    }
    **(void **)(a1 + 8) = v10;
    if (sub_1CBF68974(a1 + 16, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))) {
      return 1;
    }
LABEL_34:
    uint64_t v16 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    int v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(v16 + 18) != 25) {
        return 0;
      }
      uint64_t result = sub_1CBF68974(a1, *(llvm::Constant **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
      if (!v18) {
        return 0;
      }
    }
    else
    {
      if (v17 != 53) {
        return 0;
      }
      uint64_t result = sub_1CBF687D0(a1, *(llvm::Constant **)(v16 - 64));
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)(v16 - 32);
      if (!v18) {
        return 0;
      }
    }
    **(void **)(a1 + 8) = v18;
    uint64_t v19 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return sub_1CBF68974(a1 + 16, v19);
  }
  if (v4 != 58) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 - 64);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(v5 + 18) != 25) {
      goto LABEL_18;
    }
    if (!sub_1CBF68974(a1, *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF)))) {
      goto LABEL_18;
    }
    uint64_t v7 = *(void *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32);
    if (!v7) {
      goto LABEL_18;
    }
  }
  else
  {
    if (v6 != 53) {
      goto LABEL_18;
    }
    if (!sub_1CBF687D0(a1, *(llvm::Constant **)(v5 - 64))) {
      goto LABEL_18;
    }
    uint64_t v7 = *(void *)(v5 - 32);
    if (!v7) {
      goto LABEL_18;
    }
  }
  **(void **)(a1 + 8) = v7;
  if (sub_1CBF687D0(a1 + 16, *(llvm::Constant **)(a2 - 32))) {
    return 1;
  }
LABEL_18:
  uint64_t v11 = *(void *)(a2 - 32);
  int v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 == 5)
  {
    if (*(_WORD *)(v11 + 18) != 25) {
      return 0;
    }
    uint64_t result = sub_1CBF68974(a1, *(llvm::Constant **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)));
    if (!result) {
      return result;
    }
    uint64_t v14 = *(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (v12 != 53) {
      return 0;
    }
    uint64_t result = sub_1CBF687D0(a1, *(llvm::Constant **)(v11 - 64));
    if (!result) {
      return result;
    }
    uint64_t v14 = *(void *)(v11 - 32);
    if (!v14) {
      return 0;
    }
  }
  **(void **)(a1 + 8) = v14;
  uint64_t v15 = *(llvm::Constant **)(a2 - 64);

  return sub_1CBF687D0(a1 + 16, v15);
}

BOOL sub_1CCA799D0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 54)
  {
    uint64_t v6 = *(void *)(a2 - 64);
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 15) {
        return 0;
      }
      if (!sub_1CC03F414(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))) {
        return 0;
      }
      uint64_t v8 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      if (!v8) {
        return 0;
      }
    }
    else
    {
      if (v7 != 43) {
        return 0;
      }
      if (!sub_1CBF535C4(a1, *(llvm::Constant **)(v6 - 64))) {
        return 0;
      }
      uint64_t v8 = *(void *)(v6 - 32);
      if (!v8) {
        return 0;
      }
    }
    **(void **)(a1 + 8) = v8;
    return sub_1CBF53154((llvm::APInt *)(a1 + 16), *(unsigned __int8 **)(a2 - 32));
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 26) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15) {
        goto LABEL_25;
      }
      if (!sub_1CC03F414(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))) {
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v11) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v10 != 43) {
        goto LABEL_25;
      }
      if (!sub_1CBF535C4(a1, *(llvm::Constant **)(v9 - 64))) {
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(v9 - 32);
      if (!v11) {
        goto LABEL_25;
      }
    }
    **(void **)(a1 + 8) = v11;
    if (!sub_1CBF531E4((llvm::APInt *)(a1 + 16), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

uint64_t sub_1CCA79B6C(void **a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v2 < 0x1C)
  {
    if (v2 == 5 && (*(_WORD *)(a2 + 18) & 0xFFFE) == 0x1A)
    {
      uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v5)
      {
        **a1 = v5;
        return sub_1CBF5295C((uint64_t)(a1 + 1), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
      }
    }
    return 0;
  }
  if ((v2 & 0xFE) != 0x36) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  int v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  uint64_t v7 = *v4;
  if (!v7) {
    return 0;
  }
  uint64_t v9 = *a1;
  uint64_t v8 = (uint64_t)(a1 + 1);
  *uint64_t v9 = v7;
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  }
  return sub_1CBF528D8(v8, *(unsigned __int8 **)(v11 + 32));
}

uint64_t sub_1CCA79C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2 || *(void *)(v2 + 8)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(a2 + 18) == 19)
    {
      uint64_t result = sub_1CBF68974(a1, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t v7 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (v7) {
        goto LABEL_13;
      }
    }
    return 0;
  }
  if (v6 != 47) {
    return 0;
  }
  uint64_t result = sub_1CBF687D0(a1, *(llvm::Constant **)(a2 - 64));
  if (result)
  {
    uint64_t v7 = *(void *)(a2 - 32);
    if (!v7) {
      return 0;
    }
LABEL_13:
    **(void **)(a1 + 8) = v7;
    if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
    {
      **(void **)(a1 + 16) = a2;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCA79CE8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    if (*(void *)(v2 + 8)) {
      return 0;
    }
    unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      if (v4 - 47 > 1) {
        return 0;
      }
      int v11 = *(_DWORD *)(a2 + 20);
      if ((v11 & 0x40000000) != 0) {
        int v12 = *(uint64_t **)(a2 - 8);
      }
      else {
        int v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
      }
      uint64_t v13 = *v12;
      int v14 = *(unsigned __int8 *)(v13 + 16);
      if (v14 != 5)
      {
        if (v14 != 45) {
          return 0;
        }
        uint64_t v15 = *(void *)(v13 - 64);
        uint64_t v16 = **a1;
        uint64_t v17 = *(void *)(v13 - 32);
        if (v16 != v15 || !v17)
        {
          BOOL v18 = v15 && v16 == v17;
          uint64_t v17 = *(void *)(v13 - 64);
          if (!v18) {
            return 0;
          }
        }
        *a1[1] = v17;
        *a1[2] = v13;
        int v22 = *(_DWORD *)(a2 + 20);
        uint64_t v23 = (v22 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v22 & 0x7FFFFFF);
        if (*a1[3] != *(void *)(v23 + 32)) {
          return 0;
        }
        int v10 = a1 + 4;
        uint64_t v2 = 1;
        goto LABEL_50;
      }
      if (*(_WORD *)(v13 + 18) != 17) {
        return 0;
      }
      uint64_t v19 = (uint64_t *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
    }
    else
    {
      if (v4 != 5 || *(unsigned __int16 *)(a2 + 18) - 19 > 1) {
        return 0;
      }
      a2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      int v5 = *(unsigned __int8 *)(a2 + 16);
      if (v5 != 5)
      {
        if (v5 != 45) {
          return 0;
        }
        uint64_t v6 = *(void *)(a2 - 64);
        uint64_t v7 = **a1;
        uint64_t v8 = *(void *)(a2 - 32);
        if (v7 != v6 || !v8)
        {
          BOOL v9 = v6 && v7 == v8;
          uint64_t v8 = *(void *)(a2 - 64);
          if (!v9) {
            return 0;
          }
        }
        uint64_t v2 = 0;
        *a1[1] = v8;
        int v10 = a1 + 2;
LABEL_50:
        **int v10 = a2;
        return v2;
      }
      if (*(_WORD *)(a2 + 18) != 17) {
        return 0;
      }
      uint64_t v19 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    }
    uint64_t v20 = **a1;
    a2 = v19[4];
    if (v20 != *v19 || !a2)
    {
      BOOL v21 = *v19 && v20 == a2;
      a2 = *v19;
      if (!v21) {
        return 0;
      }
    }
    uint64_t v2 = 0;
    int v10 = a1 + 1;
    goto LABEL_50;
  }
  return v2;
}

uint64_t sub_1CCA79EB8(void **a1, llvm::Constant *this)
{
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (!this || v4 != 16) {
    goto LABEL_12;
  }
  int v5 = (void *)((char *)this + 24);
  unsigned int v6 = *((_DWORD *)this + 8);
  if (v6 > 0x40)
  {
    int v9 = llvm::APInt::countTrailingOnesSlowCase((llvm::Constant *)((char *)this + 24));
    if (!v9 || llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) + v9 != v6) {
      goto LABEL_12;
    }
LABEL_9:
    **a1 = v5;
    return 1;
  }
  if (*v5) {
    BOOL v7 = ((*v5 + 1) & *v5) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    goto LABEL_9;
  }
LABEL_12:
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12 || v4 > 0x14) {
    return 0;
  }
  uint64_t result = (uint64_t)llvm::Constant::getSplatValue(this, 0);
  if (result)
  {
    if (*(unsigned char *)(result + 16) == 16)
    {
      int v5 = (void *)(result + 24);
      uint64_t result = sub_1CCA78F70((llvm::APInt *)(result + 24));
      if (!result) {
        return result;
      }
      goto LABEL_9;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCA79FAC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 28) {
      return 0;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15
        || !sub_1CC03F414(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_31;
      }
      uint64_t v11 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
    }
    else
    {
      if (v10 != 43 || !sub_1CBF535C4(a1, *(llvm::Constant **)(v9 - 64))) {
        goto LABEL_31;
      }
      uint64_t v11 = *(void *)(v9 - 32);
    }
    if (*(void *)(a1 + 8) == v11
      && *(void *)(a1 + 16) == *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))
    {
      return 1;
    }
LABEL_31:
    uint64_t v16 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    int v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(v16 + 18) != 15) {
        return 0;
      }
      uint64_t result = sub_1CC03F414(a1, *(llvm::Constant **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
    }
    else
    {
      if (v17 != 43) {
        return 0;
      }
      uint64_t result = sub_1CBF535C4(a1, *(llvm::Constant **)(v16 - 64));
      if (!result) {
        return result;
      }
      uint64_t v18 = *(void *)(v16 - 32);
    }
    if (*(void *)(a1 + 8) == v18)
    {
      int v5 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      return *(void *)(a1 + 16) == *v5;
    }
    return 0;
  }
  if (v4 != 56) {
    return 0;
  }
  int v5 = (void *)(a2 - 64);
  uint64_t v6 = *(void *)(a2 - 64);
  int v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v6 + 18) == 15
      && sub_1CC03F414(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
    {
      uint64_t v8 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      goto LABEL_15;
    }
  }
  else if (v7 == 43 && sub_1CBF535C4(a1, *(llvm::Constant **)(v6 - 64)))
  {
    uint64_t v8 = *(void *)(v6 - 32);
LABEL_15:
    if (*(void *)(a1 + 8) != v8 || *(void *)(a1 + 16) != *(void *)(a2 - 32)) {
      goto LABEL_17;
    }
    return 1;
  }
LABEL_17:
  uint64_t v12 = *(void *)(a2 - 32);
  int v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 == 5)
  {
    if (*(_WORD *)(v12 + 18) == 15)
    {
      uint64_t result = sub_1CC03F414(a1, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)));
      if (!result) {
        return result;
      }
      uint64_t v15 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
      goto LABEL_24;
    }
  }
  else if (v13 == 43)
  {
    uint64_t result = sub_1CBF535C4(a1, *(llvm::Constant **)(v12 - 64));
    if (!result) {
      return result;
    }
    uint64_t v15 = *(void *)(v12 - 32);
LABEL_24:
    if (*(void *)(a1 + 8) == v15) {
      return *(void *)(a1 + 16) == *v5;
    }
  }
  return 0;
}

BOOL sub_1CCA7A240@<W0>(void *a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 54) {
    return *a1 == *(void *)(a2 - 64) && sub_1CBF53154((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(a2 - 32));
  }
  if (v3 == 5)
  {
    a3 = 0;
    if (*(_WORD *)(a2 + 18) == 26)
    {
      uint64_t v5 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if (*a1 == *(void *)v5 && sub_1CBF531E4((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v5 + 32))) {
        a3 = 1;
      }
    }
  }
  return v3 == 5 && a3;
}

llvm::UndefValue **sub_1CCA7A2F0(void *a1, llvm::ArrayType **this)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  char isArrayAllocation = llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this);
  uint64_t v7 = (uint64_t)*(this - 4);
  if (isArrayAllocation)
  {
    int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      BOOL v9 = v8 == 16;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9)
    {
      if ((v8 - 11) <= 1)
      {
        NullValue = llvm::Constant::getNullValue(*this, v5, v6);
        uint64_t v11 = (uint64_t)a1;
        uint64_t v12 = (llvm::ValueAsMetadata *)this;
LABEL_8:
        uint64_t v13 = (uint64_t)sub_1CC9D3C84(v11, v12, NullValue);
        goto LABEL_39;
      }
      goto LABEL_23;
    }
    int v22 = (llvm::Type **)(v7 + 24);
    uint64_t v23 = *(unsigned int *)(v7 + 32);
    if (v23 >= 0x41)
    {
      int v24 = 0;
      int64_t v25 = (unint64_t)(v23 + 63) >> 6;
      do
      {
        BOOL v26 = v25-- < 1;
        if (v26) {
          break;
        }
        unint64_t v27 = *((void *)*v22 + v25);
        v24 += __clz(v27);
      }
      while (!v27);
      int v28 = v23 | 0xFFFFFFC0;
      if ((v23 & 0x3F) == 0) {
        int v28 = 0;
      }
      if ((v23 - v24 - v28) > 0x40)
      {
LABEL_23:
        uint64_t v29 = a1[10];
        int v30 = *this;
        unsigned int v31 = *((_DWORD *)*this + 2);
        if ((v31 & 0xFE) == 0x12) {
          unsigned int v31 = *(_DWORD *)(**((void **)v30 + 2) + 8);
        }
        uint64_t v32 = *(void *)(v29 + 232);
        if (v31 < 0x100) {
          goto LABEL_34;
        }
        unsigned int v33 = v31 >> 8;
        unint64_t v34 = *(unsigned int *)(v29 + 240);
        uint64_t v35 = *(void *)(v29 + 232);
        if (v34)
        {
          uint64_t v35 = v32;
          unint64_t v36 = v34;
          do
          {
            unint64_t v37 = v36 >> 1;
            uint64_t v38 = v35 + 16 * (v36 >> 1);
            unsigned int v39 = *(_DWORD *)(v38 + 8);
            uint64_t v40 = v38 + 16;
            v36 += ~(v36 >> 1);
            if (v39 < v33) {
              uint64_t v35 = v40;
            }
            else {
              unint64_t v36 = v37;
            }
          }
          while (v36);
        }
        if (v35 == v32 + 16 * v34 || *(_DWORD *)(v35 + 8) != v33) {
LABEL_34:
        }
          uint64_t v35 = v32;
        unint64_t v41 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v30, (llvm::LLVMContext *)*(unsigned int *)(v35 + 4));
        uint64_t v43 = (llvm::Type ***)v41;
        if ((*((_DWORD *)v30 + 2) & 0xFE) == 0x12)
        {
          uint64_t v273 = (llvm::Type *)*((unsigned int *)v30 + 8);
          if (*((_DWORD *)v30 + 2) == 19) {
            llvm::ScalableVectorType::get(v41, v273);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v41, v273);
          }
          uint64_t v43 = v274;
        }
        uint64_t v44 = *(this - 4);
        if (*(llvm::Type ****)v44 == v43) {
          goto LABEL_40;
        }
        uint64_t v45 = a1[3];
        v295.i16[4] = 257;
        BOOL v21 = sub_1CBF56614(v45, v44, v43, 0, (uint64_t)&v293, v42);
        uint64_t v19 = (uint64_t)a1;
        uint64_t v20 = (llvm::AllocaInst *)this;
        goto LABEL_38;
      }
      int v22 = (llvm::Type **)*v22;
    }
    int v122 = llvm::ArrayType::get(this[8], *v22);
    uint64_t v123 = a1[3];
    __int16 v124 = (llvm::Type *)(*((_DWORD *)*this + 2) >> 8);
    if ((*((unsigned char *)this + 23) & 0x10) == 0)
    {
      uint64_t v140 = 0;
      uint64_t v139 = &byte_1CFBCE98E;
LABEL_198:
      v295.i16[4] = 261;
      unint64_t v293 = v139;
      v294.i64[0] = v140;
      uint64_t v142 = sub_1CD63F438(v123, v122, v124, 0, (uint64_t)&v293);
      uint64_t v143 = (uint64_t *)v142;
      *((_WORD *)v142 + 9) = *((_WORD *)v142 + 9) & 0xFFC0 | __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
      if (v142) {
        uint64_t v144 = (char *)v142 + 24;
      }
      else {
        uint64_t v144 = 0;
      }
      while (1)
      {
        uint64_t v145 = v144 ? (uint64_t)(v144 - 24) : 0;
        if (*(unsigned char *)(v145 + 16) != 59 && !sub_1CBF63B28(v145)) {
          break;
        }
        uint64_t v144 = (char *)*((void *)v144 + 1);
      }
      uint64_t v146 = a1[10];
      __int32 v147 = *this;
      unsigned int v148 = *((_DWORD *)*this + 2);
      if ((v148 & 0xFE) == 0x12) {
        unsigned int v148 = *(_DWORD *)(**((void **)v147 + 2) + 8);
      }
      uint64_t v149 = *(void *)(v146 + 232);
      if (v148 < 0x100) {
        goto LABEL_218;
      }
      unsigned int v150 = v148 >> 8;
      unint64_t v151 = *(unsigned int *)(v146 + 240);
      uint64_t v152 = *(void *)(v146 + 232);
      if (v151)
      {
        uint64_t v152 = v149;
        unint64_t v153 = v151;
        do
        {
          unint64_t v154 = v153 >> 1;
          uint64_t v155 = v152 + 16 * (v153 >> 1);
          unsigned int v156 = *(_DWORD *)(v155 + 8);
          uint64_t v157 = v155 + 16;
          v153 += ~(v153 >> 1);
          if (v156 < v150) {
            uint64_t v152 = v157;
          }
          else {
            unint64_t v153 = v154;
          }
        }
        while (v153);
      }
      if (v152 == v149 + 16 * v151 || *(_DWORD *)(v152 + 8) != v150) {
LABEL_218:
      }
        uint64_t v152 = v149;
      int v158 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v147, (llvm::LLVMContext *)*(unsigned int *)(v152 + 4));
      if ((*((_DWORD *)v147 + 2) & 0xFE) == 0x12)
      {
        uint64_t v275 = (llvm::Type *)*((unsigned int *)v147 + 8);
        if (*((_DWORD *)v147 + 2) == 19) {
          llvm::ScalableVectorType::get(v158, v275);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v158, v275);
        }
      }
      v305.i64[0] = (uint64_t)llvm::Constant::getNullValue((llvm::Constant *)v158, v159, v160);
      v305.i64[1] = v305.i64[0];
      if ((*((unsigned char *)v143 + 23) & 0x10) == 0)
      {
        uint64_t v171 = 0;
        uint64_t v170 = &byte_1CFBCE98E;
        goto LABEL_229;
      }
      uint64_t v161 = **(void **)*v143;
      uint64_t v162 = *(void *)(v161 + 152);
      uint64_t v163 = *(unsigned int *)(v161 + 168);
      if (v163)
      {
        LODWORD(v164) = (v163 - 1) & ((v143 >> 4) ^ (v143 >> 9));
        uint64_t v165 = (uint64_t **)(v162 + 16 * v164);
        int v166 = *v165;
        if (*v165 == v143)
        {
LABEL_228:
          unsigned int v169 = v165[1];
          uint64_t v172 = *v169;
          uint64_t v170 = (char *)(v169 + 2);
          uint64_t v171 = v172;
LABEL_229:
          v295.i16[4] = 773;
          unint64_t v293 = v170;
          v294.i64[0] = v171;
          v294.i64[1] = (uint64_t)".sub";
          uint64_t v173 = (char *)operator new(0xB0uLL);
          uint64_t v174 = v173;
          uint64_t v175 = 0;
          uint64_t v176 = (uint64_t ***)(v173 + 96);
          *((_DWORD *)v173 + 29) = *((_DWORD *)v173 + 29) & 0x38000000 | 3;
          do
          {
            uint64_t v177 = &v173[v175];
            *(void *)uint64_t v177 = 0;
            *((void *)v177 + 1) = 0;
            *((void *)v177 + 2) = 0;
            *((void *)v177 + 3) = v176;
            v175 += 32;
          }
          while (v175 != 96);
          sub_1CB845A7C((uint64_t)v122, v143, (uint64_t)&v305, 2);
          *(_OWORD *)(v174 + 120) = 0u;
          uint64_t v178 = v174 + 120;
          *((void *)v174 + 12) = v179;
          *((void *)v174 + 13) = 0;
          unsigned int v180 = *((_DWORD *)v174 + 29) & 0xC0000000 | 3;
          *((_DWORD *)v174 + 28) = 62;
          *((_DWORD *)v174 + 29) = v180;
          *(_OWORD *)(v174 + 136) = 0u;
          *((_DWORD *)v174 + 38) = 0;
          *((void *)v174 + 20) = v122;
          *((void *)v174 + 21) = llvm::GetElementPtrInst::getIndexedType((uint64_t)v122, (uint64_t)&v305, 2);
          llvm::GetElementPtrInst::init(v176, (uint64_t **)v143, v305.i64, 2, (const char **)&v293);
          v174[113] |= 2u;
          uint64_t v181 = *(void *)(v145 + 40);
          int8x8_t v182 = (char **)(v145 + 24);
          *((void *)v174 + 17) = v181;
          *(_WORD *)(v181 + 18) &= ~0x8000u;
          if ((v174[119] & 0x10) != 0)
          {
            uint64_t v201 = *(void *)(v181 + 56);
            if (v201)
            {
              uint64_t v202 = *(llvm::ValueSymbolTable **)(v201 + 104);
              if (v202) {
                llvm::ValueSymbolTable::reinsertValue(v202, (llvm::Value *)v176);
              }
            }
          }
          unsigned int v183 = *v182;
          *((void *)v174 + 15) = *v182;
          *((void *)v174 + 16) = v182;
          *((void *)v183 + 1) = v178;
          *int8x8_t v182 = v178;
          uint64_t v184 = a1[4];
          unint64_t v293 = v176;
          if (*(unsigned char *)(v184 + 2088))
          {
            uint64_t v186 = v184 + 2096;
            int v185 = 16;
          }
          else
          {
            int v185 = *(_DWORD *)(v184 + 2104);
            if (!v185)
            {
              __int16 v195 = 0;
              goto LABEL_248;
            }
            uint64_t v186 = *(void *)(v184 + 2096);
          }
          int v187 = v185 - 1;
          unsigned int v188 = v187 & ((v176 >> 4) ^ (v176 >> 9));
          unsigned int v189 = (uint64_t ****)(v186 + 8 * v188);
          uint64_t v190 = *v189;
          if (v176 == *v189)
          {
LABEL_250:
            uint64_t v11 = (uint64_t)a1;
            uint64_t v12 = (llvm::ValueAsMetadata *)this;
            NullValue = (llvm::Value *)v176;
            goto LABEL_8;
          }
          unsigned int v191 = 0;
          int v192 = 1;
          while (v190 != (uint64_t ***)-4096)
          {
            if (v191) {
              BOOL v193 = 0;
            }
            else {
              BOOL v193 = v190 == (uint64_t ***)-8192;
            }
            if (v193) {
              unsigned int v191 = v189;
            }
            unsigned int v194 = v188 + v192++;
            unsigned int v188 = v194 & v187;
            unsigned int v189 = (uint64_t ****)(v186 + 8 * v188);
            uint64_t v190 = *v189;
            if (v176 == *v189) {
              goto LABEL_250;
            }
          }
          if (v191) {
            __int16 v195 = v191;
          }
          else {
            __int16 v195 = v189;
          }
LABEL_248:
          uint64_t v196 = sub_1CBFD5BBC(v184 + 2088, (uint64_t)&v293, &v293, v195);
          *uint64_t v196 = v293;
          unsigned int v197 = *(_DWORD *)(v184 + 2232);
          if (v197 >= *(_DWORD *)(v184 + 2236)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v184 + 2224) + 8 * v197) = v293;
          ++*(_DWORD *)(v184 + 2232);
          goto LABEL_250;
        }
        int v167 = 1;
        while (v166 != (uint64_t *)-4096)
        {
          int v168 = v164 + v167++;
          uint64_t v164 = v168 & (v163 - 1);
          int v166 = *(uint64_t **)(v162 + 16 * v164);
          if (v166 == v143)
          {
            uint64_t v165 = (uint64_t **)(v162 + 16 * v164);
            goto LABEL_228;
          }
        }
      }
      uint64_t v165 = (uint64_t **)(v162 + 16 * v163);
      goto LABEL_228;
    }
    uint64_t v125 = **(void **)*this;
    uint64_t v126 = *(void *)(v125 + 152);
    uint64_t v127 = *(unsigned int *)(v125 + 168);
    if (v127)
    {
      LODWORD(v128) = (v127 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v129 = v126 + 16 * v128;
      unint64_t v130 = *(llvm::AllocaInst **)v129;
      if (*(llvm::ArrayType ***)v129 == this)
      {
LABEL_197:
        int v138 = *(void **)(v129 + 8);
        uint64_t v141 = *v138;
        uint64_t v139 = (char *)(v138 + 2);
        uint64_t v140 = v141;
        goto LABEL_198;
      }
      int v131 = 1;
      while (v130 != (llvm::AllocaInst *)-4096)
      {
        int v132 = v128 + v131++;
        uint64_t v128 = v132 & (v127 - 1);
        unint64_t v130 = *(llvm::AllocaInst **)(v126 + 16 * v128);
        if (v130 == (llvm::AllocaInst *)this)
        {
          uint64_t v129 = v126 + 16 * v128;
          goto LABEL_197;
        }
      }
    }
    uint64_t v129 = v126 + 16 * v127;
    goto LABEL_197;
  }
  if (*(_DWORD *)(*(void *)v7 + 8) == 8205) {
    goto LABEL_40;
  }
  uint64_t v14 = **(void **)(a1[3] + 64);
  uint64_t v15 = *(llvm::ConstantInt **)(v14 + 1960);
  unint64_t v16 = *(unsigned int *)(v14 + 1968);
  v294.i32[0] = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  if (v16 <= 0xFF) {
    LOBYTE(v17) = 0;
  }
  else {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  }
  unint64_t v293 = (void *)(v17 & 1);
  uint64_t v18 = (llvm::Instruction *)llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v293, v6);
  if (v294.i32[0] >= 0x41u && v293) {
    MEMORY[0x1D25D9CB0](v293, 0x1000C8000313F17);
  }
  uint64_t v19 = (uint64_t)a1;
  uint64_t v20 = (llvm::AllocaInst *)this;
  BOOL v21 = v18;
LABEL_38:
  uint64_t v13 = sub_1CC9D28DC(v19, (uint64_t)v20, 0, (uint64_t)v21);
LABEL_39:
  uint64_t v46 = v13;
  if (v13) {
    return (llvm::UndefValue **)v46;
  }
LABEL_40:
  __int16 v47 = (unsigned __int8 *)this[8];
  unsigned int v48 = v47[8];
  if (v48 > 0x11) {
    goto LABEL_175;
  }
  if (((1 << v48) & 0xAC7F) == 0)
  {
    if (((1 << v48) & 0x30000) != 0)
    {
LABEL_163:
      if (!llvm::Type::isSizedDerivedType((uint64_t)this[8], 0)) {
        goto LABEL_43;
      }
      __int16 v47 = (unsigned __int8 *)this[8];
      goto LABEL_42;
    }
LABEL_175:
    if ((v48 & 0xFE) != 0x12 && v48 != 21) {
      goto LABEL_43;
    }
    goto LABEL_163;
  }
LABEL_42:
  uint64_t v49 = (llvm::DataLayout *)a1[10];
  unint64_t v50 = (unint64_t)(sub_1CB83544C((uint64_t)v49, (uint64_t)v47) + 7) >> 3;
  char Alignment = llvm::DataLayout::getAlignment(v49, (llvm::Type *)v47, 1);
  if ((v50 + ~(-1 << Alignment)) >> Alignment) {
    goto LABEL_43;
  }
  if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this))
  {
    unsigned int v110 = llvm::ConstantInt::get(*(llvm::ConstantInt **)*(this - 4), 1uLL, 0);
    return (llvm::UndefValue **)sub_1CC9D28DC((uint64_t)a1, (uint64_t)this, 0, (uint64_t)v110);
  }
  uint64_t v112 = *(void *)(*((void *)this[5] + 7) + 80);
  if (v112) {
    unsigned int v113 = (llvm::BasicBlock *)(v112 - 24);
  }
  else {
    unsigned int v113 = 0;
  }
  FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v113, 1);
  if (FirstNonPHIOrDbg != (char *)this)
  {
    BOOL v115 = FirstNonPHIOrDbg;
    if (!FirstNonPHIOrDbg || FirstNonPHIOrDbg[16] != 59) {
      goto LABEL_174;
    }
    unsigned int v116 = (unsigned __int8 *)*((void *)FirstNonPHIOrDbg + 8);
    unsigned int v117 = v116[8];
    if (v117 > 0x11) {
      goto LABEL_263;
    }
    if (((1 << v117) & 0xAC7F) != 0) {
      goto LABEL_173;
    }
    if (((1 << v117) & 0x30000) == 0)
    {
LABEL_263:
      if ((v117 & 0xFE) != 0x12 && v117 != 21) {
        goto LABEL_174;
      }
    }
    if (!llvm::Type::isSizedDerivedType(*((void *)FirstNonPHIOrDbg + 8), 0)) {
      goto LABEL_174;
    }
    unsigned int v116 = (unsigned __int8 *)*((void *)v115 + 8);
LABEL_173:
    int v118 = (llvm::DataLayout *)a1[10];
    unint64_t v119 = (unint64_t)(sub_1CB83544C((uint64_t)v118, (uint64_t)v116) + 7) >> 3;
    char v120 = llvm::DataLayout::getAlignment(v118, (llvm::Type *)v116, 1);
    if (!((v119 + ~(-1 << v120)) >> v120))
    {
      __int16 v133 = *((_WORD *)v115 + 9);
      unsigned int v134 = __clz(1 << v133) ^ 0x3F;
      unsigned int v135 = __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
      if (v134 > v135) {
        LOWORD(v135) = v134;
      }
      *((_WORD *)v115 + 9) = v133 & 0xFFC0 | v135;
      if (*this != *(llvm::ArrayType **)v115)
      {
        uint64_t v136 = operator new(0x60uLL);
        uint64_t v46 = (uint64_t)(v136 + 8);
        v136[13] = v136[13] & 0x38000000 | 1;
        *(void *)uint64_t v136 = 0;
        *((void *)v136 + 1) = 0;
        *((void *)v136 + 2) = 0;
        *((void *)v136 + 3) = v136 + 8;
        unint64_t v137 = *this;
        v295.i16[4] = 257;
        llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v136 + 8), (llvm::Value *)v115, v137, (const char **)&v293, 0);
        return (llvm::UndefValue **)v46;
      }
      return sub_1CC9D3C84((uint64_t)a1, (llvm::ValueAsMetadata *)this, (llvm::Value *)v115);
    }
LABEL_174:
    llvm::Instruction::moveBefore((llvm::Instruction *)this, (llvm::Instruction *)v115);
    return this;
  }
LABEL_43:
  uint64_t v52 = 0;
  char v290 = v292;
  uint64_t v291 = 0x400000000;
  uint64_t v285 = a1[6];
  uint64_t v287 = (uint64_t)a1;
  unint64_t v293 = &v294.u64[1];
  v294.i64[1] = (uint64_t)this;
  v295.i8[0] = 0;
  v294.i64[0] = 0x2300000001;
  unsigned int v53 = 1;
  while (1)
  {
    uint8x8_t v54 = (char *)v293 + 16 * v53;
    uint64_t v56 = *((void *)v54 - 2);
    uint64_t v55 = *((void *)v54 - 1);
    v294.i32[0] = --v53;
    unint64_t v57 = *(void *)(v56 + 8);
    if (v57) {
      break;
    }
LABEL_130:
    uint64_t v74 = v52;
    if (!v53) {
      goto LABEL_133;
    }
  }
  int v58 = v55 & 1;
  while (1)
  {
    uint64_t v59 = *(void *)(v57 + 24);
    int v60 = *(unsigned __int8 *)(v59 + 16);
    if (v59 && v60 == 60)
    {
      if ((*(_WORD *)(v59 + 18) & 0x381) != 0) {
        goto LABEL_132;
      }
      goto LABEL_55;
    }
    if ((v60 - 77) <= 1)
    {
      __int32 v61 = v294.i32[0];
      if (v294.i32[0] >= (unsigned __int32)v294.i32[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v62 = (char *)v293 + 16 * v294.u32[0];
      *(void *)unsigned int v62 = v59;
      v62[8] = v58;
LABEL_53:
      unint64_t v63 = &v294;
LABEL_54:
      v63->i32[0] = v61 + 1;
      goto LABEL_55;
    }
    if (*(unsigned __int8 *)(v59 + 16) <= 0x3Du)
    {
      if (v60 != 33 && v60 != 39) {
        goto LABEL_84;
      }
LABEL_65:
      if (v59 - 32 == v57) {
        goto LABEL_55;
      }
      int v65 = *(_DWORD *)(v59 + 20);
      unint64_t v66 = v59 - 32 * (v65 & 0x7FFFFFF);
      unint64_t v67 = (v57 - v66) >> 5;
      if (v57 < v66
        || (v60 != 84 ? (v60 != 39 ? (uint64_t v68 = 2) : (uint64_t v68 = (*(_DWORD *)(v59 + 80) + 1))) : (uint64_t v68 = 0),
            (v65 & 0x80000000) == 0 || (uint64_t v94 = *(void *)(v66 - 8), (v94 & 0xFFFFFFFF0) == 0)
          ? (uint64_t v69 = 0)
          : (uint64_t v69 = (*(_DWORD *)(v66 - 12) - *(_DWORD *)(v66 - v94))),
            v59 - 32 * v68 - 32 * v69 - 32 <= v57))
      {
        int v70 = 0;
      }
      else
      {
        if (llvm::CallBase::paramHasAttr(*(void *)(v57 + 24), v67, 71)) {
          goto LABEL_132;
        }
        int v70 = 1;
      }
      uint64_t v71 = *(void *)(v59 + 64);
      if (!v71 || (*(unsigned char *)(v71 + 17) & 0x30) == 0)
      {
        int v72 = *(_DWORD *)(v59 + 20);
        if (v72 < 0)
        {
          uint64_t v86 = v59 - 32 * (v72 & 0x7FFFFFF);
          uint64_t v89 = *(void *)(v86 - 8);
          uint64_t v87 = v86 - 8;
          uint64_t v88 = v89;
          if (v89)
          {
            uint64_t v90 = -v88;
            do
            {
              unsigned int v91 = *(_DWORD *)(*(void *)(v87 + v90) + 8);
              BOOL v26 = v91 > 7;
              int v92 = (1 << v91) & 0x83;
              if (v26 || v92 == 0) {
                goto LABEL_82;
              }
              v90 += 16;
            }
            while (v90);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v59, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v59, 44))
        {
          goto LABEL_82;
        }
      }
      if (!*(void *)(v59 + 8) || (sub_1CBF5BC2C(v59, v67, 22) & 1) != 0) {
        goto LABEL_55;
      }
LABEL_82:
      if (v70 && (llvm::CallBase::paramHasAttr(v59, v67, 69) & 1) != 0) {
        goto LABEL_55;
      }
      goto LABEL_84;
    }
    if (v60 == 84) {
      goto LABEL_65;
    }
    if (v60 == 62)
    {
      if (v58) {
        char v64 = 1;
      }
      else {
        char v64 = llvm::GetElementPtrInst::hasAllZeroIndices(*(llvm::GetElementPtrInst **)(v57 + 24)) ^ 1;
      }
      __int32 v61 = v294.i32[0];
      if (v294.i32[0] >= (unsigned __int32)v294.i32[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v80 = (char *)v293 + 16 * v294.u32[0];
      *(void *)BOOL v80 = v59;
      v80[8] = v64;
      goto LABEL_53;
    }
LABEL_84:
    if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v59))
    {
      if (v291 >= (unint64_t)HIDWORD(v291)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v290 + v291) = v59;
      __int32 v61 = v291;
      unint64_t v63 = (int64x2_t *)&v291;
      goto LABEL_54;
    }
    int v73 = sub_1CC92A430(v59);
    uint64_t v74 = 0;
    if (!v59 || !v73) {
      goto LABEL_133;
    }
    uint64_t v75 = *(void *)(v57 + 24);
    int v76 = *(_DWORD *)(v75 + 20);
    uint64_t v77 = (v76 & 0x40000000) != 0 ? *(void *)(v75 - 8) : v75 - 32 * (v76 & 0x7FFFFFF);
    if (((v57 - v77) & 0x1FFFFFFFE0) != 0x20) {
      break;
    }
    uint64_t v78 = *(void *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 96);
    uint64_t v79 = *(unsigned int *)(v78 + 32);
    if (v79 > 0x40)
    {
      int v82 = 0;
      int64_t v83 = (unint64_t)(v79 + 63) >> 6;
      do
      {
        BOOL v26 = v83-- < 1;
        if (v26) {
          break;
        }
        unint64_t v84 = *(void *)(*(void *)(v78 + 24) + 8 * v83);
        v82 += __clz(v84);
      }
      while (!v84);
      int v85 = v79 | 0xFFFFFFC0;
      if ((v79 & 0x3F) == 0) {
        int v85 = 0;
      }
      if (v82 + v85 != v79) {
        goto LABEL_132;
      }
    }
    else if (*(void *)(v78 + 24))
    {
      goto LABEL_132;
    }
LABEL_55:
    unint64_t v57 = *(void *)(v57 + 8);
    if (!v57)
    {
      unsigned int v53 = v294.i32[0];
      goto LABEL_130;
    }
  }
  uint64_t v74 = 0;
  if (v52 || v58) {
    goto LABEL_133;
  }
  if ((v76 & 0x40000000) != 0) {
    uint64_t v81 = *(void *)(v75 - 8);
  }
  else {
    uint64_t v81 = v75 - 32 * (v76 & 0x7FFFFFF);
  }
  if (((v57 - v81) & 0x1FFFFFFFE0) == 0)
  {
    v305.i64[0] = (uint64_t)llvm::Value::stripPointerCasts(*(llvm::Value **)(v59
                                                                          - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF)
                                                                          + 32));
    v305.i64[1] = -1;
    int64x2_t v306 = 0u;
    long long v307 = 0u;
    uint64_t v52 = v59;
    if (llvm::AAResults::pointsToConstantMemory(v285, (uint64_t)&v305, 0)) {
      goto LABEL_55;
    }
  }
LABEL_132:
  uint64_t v74 = 0;
LABEL_133:
  if (v293 != &v294.u64[1]) {
    free(v293);
  }
  unsigned int v95 = (uint64_t *)v287;
  if (!v74) {
    goto LABEL_259;
  }
  uint64_t v96 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v74
                                                                          - 32 * (*(_DWORD *)(v74 + 20) & 0x7FFFFFF)
                                                                          + 32));
  unsigned int v97 = __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
  if (v97 > llvm::getOrEnforceKnownAlignment((uint64_t)v96, v97 | 0x100, *(unsigned __int8 **)(v287 + 80), (const llvm::DataLayout *)this, *(const llvm::DataLayout **)(v287 + 56), *(const llvm::DataLayout **)(v287 + 72)))goto LABEL_259; {
  uint64_t v98 = *(void *)(v287 + 80);
  }
  if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this)) {
    goto LABEL_259;
  }
  unint64_t v100 = sub_1CB83544C(v98, (uint64_t)this[8]) + 7;
  if (v99 == 1) {
  if (v100 < 8)
  }
    goto LABEL_259;
  unsigned __int8 v101 = *((_WORD *)this + 9) & 0x3F;
  v305.i32[2] = 64;
  v305.i64[0] = v100 >> 3;
  unint64_t v293 = &v295.u64[1];
  v294.i64[0] = (uint64_t)&v295.i64[1];
  v294.i64[1] = 32;
  v295.i32[0] = 0;
  int v102 = sub_1CC06D628((uint64_t)v96, v101, (uint64_t)&v305, v98, 0, 0, 0, (uint64_t)&v293, 16);
  if ((void *)v294.i64[0] != v293) {
    free((void *)v294.i64[0]);
  }
  if (v305.i32[2] >= 0x41u && v305.i64[0]) {
    MEMORY[0x1D25D9CB0](v305.i64[0], 0x1000C8000313F17);
  }
  if (!v102 || v96[16] > 0x1Bu) {
    goto LABEL_259;
  }
  unsigned int v103 = *(_DWORD *)(*(void *)v96 + 8);
  if ((v103 & 0xFE) == 0x12) {
    unsigned int v103 = *(_DWORD *)(**(void **)(*(void *)v96 + 16) + 8);
  }
  unint64_t v104 = llvm::PointerType::get(this[8], (llvm::Type *)(v103 >> 8));
  int v105 = *((_DWORD *)*this + 2) >> 8;
  if (v105 == v103 >> 8)
  {
    if (v291) {
      sub_1CC9D6844(v287, *(void *)v290);
    }
    unsigned int v106 = *(uint64_t **)(v287 + 24);
    LOWORD(v307) = 257;
    if (*(void *)v96 != v104)
    {
      if (v96[16] <= 0x14u)
      {
        uint64_t v96 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v106[9] + 224))(v106[9], 49, v96, v104);
        if (v96) {
          BOOL v198 = v96[16] >= 0x1Cu;
        }
        else {
          BOOL v198 = 0;
        }
        if (v198)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, int64x2_t *, uint64_t, uint64_t))(*(void *)v106[10] + 16))(v106[10], v96, &v305, v106[6], v106[7]);
          uint64_t v276 = *((unsigned int *)v106 + 2);
          if (v276)
          {
            uint64_t v277 = *v106;
            uint64_t v278 = v277 + 16 * v276;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v277, *(llvm::MDNode **)(v277 + 8));
              v277 += 16;
            }
            while (v277 != v278);
          }
          unsigned int v95 = (uint64_t *)v287;
        }
      }
      else
      {
        v295.i16[4] = 257;
        uint64_t v96 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v96, v104, (const char **)&v293, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, int64x2_t *, uint64_t, uint64_t))(*(void *)v106[10] + 16))(v106[10], v96, &v305, v106[6], v106[7]);
        uint64_t v107 = *((unsigned int *)v106 + 2);
        if (v107)
        {
          uint64_t v108 = *v106;
          uint64_t v109 = v108 + 16 * v107;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v108, *(llvm::MDNode **)(v108 + 8));
            v108 += 16;
          }
          while (v108 != v109);
        }
      }
    }
    sub_1CC9D3C84((uint64_t)v95, (llvm::ValueAsMetadata *)this, (llvm::Value *)v96);
    sub_1CC9D6844((uint64_t)v95, v74);
  }
  unsigned int v286 = v103 >> 8;
  unint64_t v293 = (void *)1;
  int64x2_t v294 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v295 = v294;
  unint64_t v296 = v298;
  uint64_t v297 = 0x400000000;
  v299[0] = 0;
  v299[1] = 0;
  int v300 = 0;
  uint64_t v301 = 0;
  uint64_t v302 = 0;
  uint64_t v303 = 0;
  *(void *)uint64_t v304 = v287;
  if (sub_1CCA7BE2C((uint64_t)&v293, (uint64_t)this))
  {
    if (v291) {
      sub_1CC9D6844(v287, *(void *)v290);
    }
    uint64_t v203 = *(uint64_t **)(v287 + 24);
    __int16 v289 = 257;
    if (*(void *)v96 != v104)
    {
      if (v96[16] <= 0x14u)
      {
        uint64_t v96 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v203[9] + 224))(v203[9], 49, v96, v104);
        if (v96) {
          BOOL v207 = v96[16] >= 0x1Cu;
        }
        else {
          BOOL v207 = 0;
        }
        if (v207)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, const char **, uint64_t, uint64_t))(*(void *)v203[10]
                                                                                              + 16))(v203[10], v96, v288, v203[6], v203[7]);
          uint64_t v279 = *((unsigned int *)v203 + 2);
          if (v279)
          {
            uint64_t v280 = *v203;
            uint64_t v281 = v280 + 16 * v279;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v280, *(llvm::MDNode **)(v280 + 8));
              v280 += 16;
            }
            while (v280 != v281);
          }
          unsigned int v95 = (uint64_t *)v287;
        }
      }
      else
      {
        LOWORD(v307) = 257;
        uint64_t v96 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v96, v104, (const char **)&v305, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, const char **, uint64_t, uint64_t))(*(void *)v203[10] + 16))(v203[10], v96, v288, v203[6], v203[7]);
        uint64_t v204 = *((unsigned int *)v203 + 2);
        if (v204)
        {
          uint64_t v205 = *v203;
          uint64_t v206 = v205 + 16 * v204;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v205, *(llvm::MDNode **)(v205 + 8));
            v205 += 16;
          }
          while (v205 != v206);
        }
      }
    }
    v305.i64[0] = (uint64_t)this;
    *(void *)sub_1CD68C4F4((uint64_t)v299, v305.i64) = v96;
    if (v297)
    {
      BOOL v208 = (uint64_t *)v296;
      int v209 = (uint64_t *)((char *)v296 + 8 * v297);
      uint64_t v284 = v209;
      int v283 = v105;
      do
      {
        uint64_t v210 = *v208;
        if (!sub_1CD68C5B0((uint64_t)v299, *v208))
        {
          int v211 = *(unsigned __int8 *)(v210 + 16);
          if (v210 && v211 == 60)
          {
            uint64_t v212 = sub_1CD68C5B0((uint64_t)v299, *(void *)(v210 - 32));
            uint64_t v213 = operator new(0x60uLL);
            int v214 = (llvm *)(v213 + 8);
            v213[13] = v213[13] & 0x38000000 | 1;
            *(void *)uint64_t v213 = 0;
            *((void *)v213 + 1) = 0;
            *((void *)v213 + 2) = 0;
            *((void *)v213 + 3) = v213 + 8;
            uint64_t v215 = *(void *)v210;
            LOWORD(v307) = 257;
            Inst = (int32x2_t ****)llvm::LoadInst::LoadInst((llvm::Value *)(v213 + 8), v215, v212, (const char **)&v305, *(_WORD *)(v210 + 18) & 1, ((unint64_t)*(unsigned __int16 *)(v210 + 18) >> 1) & 0x3F, (*(_WORD *)(v210 + 18) >> 7) & 7, *(unsigned char *)(v210 + 60), 0);
            llvm::Value::takeName(Inst, (llvm::Value *)v210);
            llvm::copyMetadataForLoad(v214, (llvm::LoadInst *)v210, v217);
            sub_1CC9D2AB4(*(uint64_t *)v304, v214, v210);
            sub_1CC9D3C84(*(uint64_t *)v304, (llvm::ValueAsMetadata *)v210, v214);
            v305.i64[0] = v210;
            *(void *)sub_1CD68C4F4((uint64_t)v299, v305.i64) = v214;
          }
          else if (v210 && v211 == 62)
          {
            uint64_t v218 = (uint64_t *)sub_1CD68C5B0((uint64_t)v299, *(void *)(v210 - 32 * (*(_DWORD *)(v210 + 20) & 0x7FFFFFF)));
            uint64_t v219 = &v306;
            v305.i64[0] = (uint64_t)&v306;
            v305.i64[1] = 0x800000000;
            uint64_t v220 = *(_DWORD *)(v210 + 20) & 0x7FFFFFF;
            unint64_t v221 = -(-32 * v220 + 32);
            if (v221 >= 0x101) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v210 - 32 * v220 + 32 != v210)
            {
              int v222 = &v306;
              uint64_t v223 = 32 - 32 * v220;
              do
              {
                v222->i64[0] = *(void *)(v210 + v223);
                int v222 = (int64x2_t *)((char *)v222 + 8);
                v223 += 32;
              }
              while (v223);
              uint64_t v219 = (int64x2_t *)v305.i64[0];
            }
            uint64_t v224 = (v221 >> 5);
            v305.i32[2] = v224;
            uint64_t v225 = *(void *)(v210 + 64);
            uint64_t v226 = (v224 + 1);
            __int16 v289 = 257;
            uint64_t v227 = operator new(32 * v226 + 80);
            uint64_t v228 = &v227[4 * v226];
            *((_DWORD *)v228 + 5) = *((_DWORD *)v228 + 5) & 0x38000000 | v226 & 0x7FFFFFF;
            if (v224 != -1)
            {
              do
              {
                void *v227 = 0;
                v227[1] = 0;
                v227[2] = 0;
                v227[3] = v228;
                v227 += 4;
              }
              while (v227 != v228);
            }
            sub_1CB845A7C(v225, v218, (uint64_t)v219, v224);
            *uint64_t v228 = v229;
            v228[1] = 0;
            int v230 = *((_DWORD *)v228 + 5) & 0xC0000000 | v226 & 0x7FFFFFF;
            *((_DWORD *)v228 + 4) = 62;
            *((_DWORD *)v228 + 5) = v230;
            *(_OWORD *)(v228 + 3) = 0u;
            *(_OWORD *)(v228 + 5) = 0u;
            *((_DWORD *)v228 + 14) = 0;
            v228[8] = v225;
            v228[9] = llvm::GetElementPtrInst::getIndexedType(v225, (uint64_t)v219, v224);
            llvm::GetElementPtrInst::init((uint64_t ***)v228, (uint64_t **)v218, v219->i64, v224, v288);
            sub_1CC9D2AB4(*(uint64_t *)v304, (llvm::Value *)v228, v210);
            llvm::Value::takeName((int32x2_t ****)v228, (llvm::Value *)v210);
            v288[0] = (const char *)v210;
            *(void *)sub_1CD68C4F4((uint64_t)v299, (uint64_t *)v288) = v228;
            if ((int64x2_t *)v305.i64[0] != &v306) {
              free((void *)v305.i64[0]);
            }
            unsigned int v95 = (uint64_t *)v287;
            int v105 = v283;
            int v209 = v284;
          }
          else if (v210 && v211 == 77)
          {
            uint64_t v231 = sub_1CD68C5B0((uint64_t)v299, *(void *)(v210 - 32));
            int v232 = (llvm::Value *)v231;
            unsigned int v233 = *(_DWORD *)(*(void *)v231 + 8);
            if ((v233 & 0xFE) == 0x12) {
              unsigned int v233 = *(_DWORD *)(**(void **)(*(void *)v231 + 16) + 8);
            }
            unsigned int v234 = (llvm::Type *)(v233 >> 8);
            int v235 = *(llvm::PointerType **)(*(void *)v210 + 24);
            if (v235) {
              unint64_t v236 = llvm::PointerType::get(v235, v234);
            }
            else {
              unint64_t v236 = llvm::PointerType::get(**(uint64_t ****)v210, v234);
            }
            int v251 = (llvm::Type *)v236;
            int v252 = operator new(0x60uLL);
            v252[13] = v252[13] & 0x38000000 | 1;
            uint64_t v253 = (llvm::Value *)(v252 + 8);
            *(void *)int v252 = 0;
            *((void *)v252 + 1) = 0;
            *((void *)v252 + 2) = 0;
            *((void *)v252 + 3) = v252 + 8;
            LOWORD(v307) = 257;
            llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v252 + 8), v232, v251, (const char **)&v305, 0);
            sub_1CC9D2AB4(*(uint64_t *)v304, v253, v210);
            llvm::Value::takeName((int32x2_t ****)v253, (llvm::Value *)v210);
            v305.i64[0] = v210;
            *(void *)sub_1CD68C4F4((uint64_t)v299, v305.i64) = v253;
          }
          else
          {
            if (!sub_1CC92A430(v210)) {
              uint64_t v210 = 0;
            }
            uint64_t v237 = sub_1CD68C5B0((uint64_t)v299, *(void *)(v210 - 32 * (*(_DWORD *)(v210 + 20) & 0x7FFFFFF) + 32));
            if (v237)
            {
              uint64_t v282 = (llvm::Value *)v237;
              uint64_t v238 = *(void *)(*(void *)v304 + 24);
              *(void *)(v238 + 48) = *(void *)(v210 + 40);
              *(void *)(v238 + 56) = v210 + 24;
              uint64_t v239 = *(char **)(v210 + 48);
              v288[0] = v239;
              if (v239)
              {
                llvm::MetadataTracking::track((uint64_t)v288, (unsigned __int8 *)v239, 2);
                unint64_t v240 = v288[0];
              }
              else
              {
                unint64_t v240 = 0;
              }
              sub_1CB8461A4(v238, 0, (uint64_t)v240);
              if (!v288[0]) {
                goto LABEL_323;
              }
              int v269 = *v288[0];
              if ((v269 - 4) <= 0x1E)
              {
                if ((v288[0][1] & 0x7F) != 2 && !*((_DWORD *)v288[0] + 3)) {
                  goto LABEL_323;
                }
                uint64_t v270 = *((void *)v288[0] + 2);
                if ((v270 & 4) == 0) {
                  goto LABEL_323;
                }
                unint64_t v271 = v270 & 0xFFFFFFFFFFFFFFF8;
                if (!v271) {
                  goto LABEL_323;
                }
LABEL_380:
                v305.i64[0] = (uint64_t)v288;
                sub_1CC5FA668(v271 + 16, &v305);
                goto LABEL_323;
              }
              if ((v269 - 3) >= 0xFFFFFFFE) {
                unint64_t v272 = v288[0];
              }
              else {
                unint64_t v272 = 0;
              }
              if ((v269 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v271 = (unint64_t)(v272 + 8);
                goto LABEL_380;
              }
              if (v269 == 3) {
                *((void *)v288[0] + 1) = 0;
              }
LABEL_323:
              uint64_t v241 = *(void *)(*(void *)v304 + 24);
              int v242 = *(_DWORD *)(*(void *)(v210 - 32) + 36);
              uint64_t v243 = v210 - 32 * (*(_DWORD *)(v210 + 20) & 0x7FFFFFF);
              unint64_t v244 = *(llvm::Value **)v243;
              uint64_t v245 = *(void *)(v210 + 64);
              if (v245 && (unsigned int v246 = *(_DWORD *)(v245 + 8), v246 >= 3))
              {
                uint64_t v247 = *(llvm::AttributeSetNode **)(v245 + 56);
                if (v247)
                {
                  __int16 v248 = llvm::AttributeSetNode::getAlignment(v247);
                  __int16 v249 = v248;
                  __int16 v250 = HIBYTE(v248);
                }
                else
                {
                  __int16 v250 = 0;
                  __int16 v249 = 0;
                }
                __int16 v254 = v249 | (v250 << 8);
                if (v246 >= 4)
                {
                  unint64_t v257 = *(llvm::AttributeSetNode **)(v245 + 64);
                  if (v257)
                  {
                    __int16 v258 = llvm::AttributeSetNode::getAlignment(v257);
                    unsigned __int8 v256 = v258;
                    __int16 v255 = HIBYTE(v258);
LABEL_335:
                    uint64_t v259 = *(void *)(v243 + 96);
                    uint64_t v260 = *(unsigned int *)(v259 + 32);
                    if (v260 > 0x40)
                    {
                      int v262 = 0;
                      int64_t v263 = (unint64_t)(v260 + 63) >> 6;
                      do
                      {
                        BOOL v26 = v263-- < 1;
                        if (v26) {
                          break;
                        }
                        unint64_t v264 = *(void *)(*(void *)(v259 + 24) + 8 * v263);
                        v262 += __clz(v264);
                      }
                      while (!v264);
                      int v265 = v260 | 0xFFFFFFC0;
                      if ((v260 & 0x3F) == 0) {
                        int v265 = 0;
                      }
                      BOOL v261 = v262 + v265 == v260;
                    }
                    else
                    {
                      BOOL v261 = *(void *)(v259 + 24) == 0;
                    }
                    int v266 = v261;
                    MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst(v241, v242, v244, v254, v282, v256 | (unsigned __int16)(v255 << 8), *(uint64_t **)(v243 + 64), v266 ^ 1u, 0, 0, 0, 0);
                    llvm::Instruction::getAAMetadata((uint64_t ***)v210, &v305);
                    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v305), (int32x4_t)vceqzq_s64(v306))))))
                    {
                      if (v305.i64[0] || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0)
                      {
                        llvm::Value::setMetadata(MemTransferInst, 1, (llvm::MDNode *)v305.i64[0]);
                        BOOL v268 = (llvm::MDNode *)v305.i64[1];
                        if (v305.i64[1]) {
                          goto LABEL_351;
                        }
                      }
                      else
                      {
                        BOOL v268 = (llvm::MDNode *)v305.i64[1];
                        if (v305.i64[1]) {
                          goto LABEL_351;
                        }
                      }
                      if (MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
LABEL_351:
                      }
                        llvm::Value::setMetadata(MemTransferInst, 5, v268);
                      if (v306.i64[0] || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
                        llvm::Value::setMetadata(MemTransferInst, 7, (llvm::MDNode *)v306.i64[0]);
                      }
                      if (v306.i64[1] || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
                        llvm::Value::setMetadata(MemTransferInst, 8, (llvm::MDNode *)v306.i64[1]);
                      }
                    }
                    sub_1CC9D6844(*(uint64_t *)v304, v210);
                  }
                }
              }
              else
              {
                __int16 v254 = 0;
              }
              __int16 v255 = 0;
              unsigned __int8 v256 = 0;
              goto LABEL_335;
            }
          }
        }
        ++v208;
      }
      while (v208 != v209);
    }
  }
  sub_1CD456CB4(v299);
  if (v296 != v298) {
    free(v296);
  }
  if ((v293 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v294.i64[0], 8);
  }
  uint64_t v46 = 0;
  if (v105 != v286) {
LABEL_259:
  }
    uint64_t v46 = sub_1CC9DDA74(v95, (uint64_t)this);
  if (v290 != v292) {
    free(v290);
  }
  return (llvm::UndefValue **)v46;
}

uint64_t sub_1CCA7BE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 24);
      unint64_t v16 = (llvm::Instruction *)v4;
      int v5 = *(unsigned __int8 *)(v4 + 16);
      if (v4)
      {
        if (v5 == 60) {
          break;
        }
      }
      if (v5 == 77 || v5 == 62)
      {
        sub_1CD6433E0(a1, (uint64_t *)&v16);
        if ((sub_1CCA7BE2C(a1, v16) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (sub_1CC92A430(v4))
        {
          uint64_t v7 = *(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 96);
          uint64_t v8 = *(unsigned int *)(v7 + 32);
          if (v8 > 0x40)
          {
            int v9 = 0;
            int64_t v10 = (unint64_t)(v8 + 63) >> 6;
            do
            {
              if (v10-- < 1) {
                break;
              }
              unint64_t v12 = *(void *)(*(void *)(v7 + 24) + 8 * v10);
              v9 += __clz(v12);
            }
            while (!v12);
            int v13 = v8 | 0xFFFFFFC0;
            if ((v8 & 0x3F) == 0) {
              int v13 = 0;
            }
            if (v9 + v13 != v8) {
              return 0;
            }
          }
          else if (*(void *)(v7 + 24))
          {
            return 0;
          }
          uint64_t v6 = (uint64_t *)&v16;
          goto LABEL_21;
        }
        if (!llvm::Instruction::isLifetimeStartOrEnd(v16)) {
          return 0;
        }
      }
LABEL_22:
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return 1;
      }
    }
    if (*(_WORD *)(v4 + 18)) {
      return 0;
    }
    uint64_t v15 = v4;
    uint64_t v6 = &v15;
LABEL_21:
    sub_1CD6433E0(a1, v6);
    goto LABEL_22;
  }
  return 1;
}

_DWORD *sub_1CCA7BF64(uint64_t a1, llvm::LoadInst *a2, llvm::PointerType *this, uint64_t *a4)
{
  uint64_t v8 = (unsigned __int8 *)*((void *)a2 - 4);
  unsigned int v9 = *(_DWORD *)(*(void *)v8 + 8);
  if ((v9 & 0xFE) == 0x12) {
    unsigned int v9 = *(_DWORD *)(**(void **)(*(void *)v8 + 16) + 8);
  }
  unint64_t v10 = llvm::PointerType::get(this, (llvm::Type *)(v9 >> 8));
  uint64_t v49 = 0;
  v50[0] = &v49;
  if (sub_1CCA4756C(v50, (uint64_t)v8) && *(void *)v49 == v10)
  {
    uint64_t v8 = v49;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 24);
    __int16 v48 = 257;
    if (*(void *)v8 != v10)
    {
      if (v8[16] <= 0x14u)
      {
        uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(v11 + 72) + 224))(*(void *)(v11 + 72), 49, v8, v10);
        if (v8) {
          BOOL v29 = v8[16] >= 0x1Cu;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29) {
          uint64_t v8 = (unsigned __int8 *)sub_1CB844E0C((uint64_t *)v11, (llvm::Instruction *)v8, (uint64_t)&v44);
        }
      }
      else
      {
        __int16 v51 = 257;
        uint64_t v8 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v8, v10, (const char **)v50, 0);
        (*(void (**)(void, unsigned __int8 *, char **, void, void))(**(void **)(v11 + 80) + 16))(*(void *)(v11 + 80), v8, &v44, *(void *)(v11 + 48), *(void *)(v11 + 56));
        uint64_t v12 = *(unsigned int *)(v11 + 8);
        if (v12)
        {
          uint64_t v42 = *(void *)v11;
          uint64_t v43 = v42 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
            v42 += 16;
          }
          while (v42 != v43);
        }
      }
    }
    uint64_t v49 = v8;
  }
  int v13 = *(uint64_t **)(a1 + 24);
  unint64_t v14 = *((unsigned __int16 *)a2 + 9);
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v15 = ***(void ***)a2;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v19 = (llvm::LoadInst **)(v16 + 16 * v18);
      uint64_t v20 = *v19;
      if (*v19 == a2)
      {
LABEL_15:
        uint64_t v23 = v19[1];
        uint64_t v26 = *(void *)v23;
        int64_t v25 = (char *)v23 + 16;
        uint64_t v24 = v26;
        goto LABEL_16;
      }
      int v21 = 1;
      while (v20 != (llvm::LoadInst *)-4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        uint64_t v20 = *(llvm::LoadInst **)(v16 + 16 * v18);
        if (v20 == a2)
        {
          uint64_t v19 = (llvm::LoadInst **)(v16 + 16 * v18);
          goto LABEL_15;
        }
      }
    }
    uint64_t v19 = (llvm::LoadInst **)(v16 + 16 * v17);
    goto LABEL_15;
  }
  uint64_t v24 = 0;
  int64_t v25 = &byte_1CFBCE98E;
LABEL_16:
  int v27 = *((unsigned __int8 *)a4 + 32);
  if (v27 == 1)
  {
    uint64_t v44 = v25;
    uint64_t v45 = v24;
    __int16 v28 = 261;
  }
  else
  {
    if (*((unsigned char *)a4 + 32))
    {
      uint64_t v38 = a4[1];
      if (*((unsigned char *)a4 + 33) == 1)
      {
        unsigned int v39 = (uint64_t *)*a4;
      }
      else
      {
        LOBYTE(v27) = 2;
        unsigned int v39 = a4;
      }
      uint64_t v44 = v25;
      uint64_t v45 = v24;
      uint64_t v46 = v39;
      uint64_t v47 = v38;
      LOBYTE(v48) = 5;
      HIBYTE(v48) = v27;
      goto LABEL_29;
    }
    __int16 v28 = 256;
  }
  __int16 v48 = v28;
LABEL_29:
  __int16 v30 = v14 & 1;
  uint64_t v31 = (v14 >> 1) & 0x3F;
  uint64_t v32 = operator new(0x60uLL);
  v32[13] = v32[13] & 0x38000000 | 1;
  unsigned int v33 = (llvm::Instruction *)(v32 + 8);
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = 0;
  *((void *)v32 + 2) = 0;
  *((void *)v32 + 3) = v32 + 8;
  __int16 v51 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v32 + 8), (uint64_t)this, (uint64_t)v8, (const char **)v50, v30, v31, 0);
  (*(void (**)(uint64_t, _DWORD *, char **, uint64_t, uint64_t))(*(void *)v13[10] + 16))(v13[10], v32 + 8, &v44, v13[6], v13[7]);
  uint64_t v35 = *((unsigned int *)v13 + 2);
  if (v35)
  {
    uint64_t v40 = *v13;
    uint64_t v41 = *v13 + 16 * v35;
    do
    {
      llvm::Instruction::setMetadata(v33, *(_DWORD *)v40, *(llvm::MDNode **)(v40 + 8));
      v40 += 16;
    }
    while (v40 != v41);
  }
  char v36 = *((unsigned char *)a2 + 60);
  *((_WORD *)v32 + 25) = *((_WORD *)v32 + 25) & 0xFC7F | *((_WORD *)a2 + 9) & 0x380;
  *((unsigned char *)v32 + 92) = v36;
  llvm::copyMetadataForLoad(v33, a2, v34);
  return v32 + 8;
}

llvm::UndefValue **sub_1CCA7C2FC(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v301 = *MEMORY[0x1E4F143B8];
  int v5 = (uint64_t **)(a2 - 4);
  uint64_t v4 = *(a2 - 4);
  if ((*((_WORD *)a2 + 9) & 0x301) == 0)
  {
    uint64_t v48 = a2[1];
    if (v48)
    {
      int v49 = *(unsigned __int8 *)(v4 + 16);
      if (v4) {
        BOOL v50 = v49 == 21;
      }
      else {
        BOOL v50 = 0;
      }
      if (v50)
      {
        uint64_t v254 = *(void *)(*(void *)(v4 + 24) + 112);
        if (v254)
        {
          unsigned int v255 = *(_DWORD *)(v4 + 32) + 2;
          if (v255 < *(_DWORD *)(v254 + 8))
          {
            uint64_t v256 = *(void *)(v254 + 8 * v255 + 40);
            if (v256)
            {
              if (*(char *)(v256 + 19) < 0) {
                goto LABEL_2;
              }
            }
          }
        }
      }
      else if (v4 && v49 == 59 && (*(_WORD *)(v4 + 18) & 0x80) != 0)
      {
        goto LABEL_2;
      }
      if (!*(void *)(v48 + 8))
      {
        __int16 v51 = *(unsigned __int8 **)(v48 + 24);
        int v52 = v51[16];
        if (!v51 || v52 != 77 || *(unsigned char *)(*(void *)v51 + 8) != 11)
        {
          unsigned int v53 = v52 - 79;
          BOOL v54 = v51 && v53 >= 0xFFFFFFF3;
          if (v54 && llvm::CastInst::isNoopCast((llvm::CastInst *)v51, *(const llvm::DataLayout **)(a1 + 80)))
          {
            if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
              int v55 = *(unsigned __int8 *)(**(void **)(*a2 + 16) + 8);
            }
            else {
              int v55 = *(_DWORD *)(*a2 + 8);
            }
            __int16 v195 = *(llvm::PointerType **)v51;
            unsigned int v196 = *(_DWORD *)(*(void *)v51 + 8);
            unsigned int v197 = v196;
            if ((*(_DWORD *)(*(void *)v51 + 8) & 0xFE) == 0x12) {
              unsigned int v197 = *(unsigned __int8 *)(**((void **)v195 + 2) + 8);
            }
            if ((v55 == 15) == (v197 == 15))
            {
              int v198 = *((unsigned __int8 *)a2 + 16);
              if (v198 == 60 || v198 == 61)
              {
                if ((*((_WORD *)a2 + 9) & 0x380) == 0) {
                  goto LABEL_264;
                }
              }
              else if ((v198 - 63) >= 3)
              {
                goto LABEL_264;
              }
              if ((v196 & 0xFFFFFFFD) == 0xD || v196 <= 6)
              {
LABEL_264:
                LOWORD(v300) = 257;
                unsigned int v200 = (llvm::Value *)sub_1CCA7BF64(v3, (llvm::LoadInst *)a2, v195, (uint64_t *)&v298);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v51, v200, (llvm::Value *)1);
                sub_1CC9D6844(v3, (uint64_t)v51);
              }
            }
          }
        }
      }
    }
  }
LABEL_2:
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(v3 + 80), (llvm::Type *)*a2, 0);
  unsigned __int8 v7 = llvm::getOrEnforceKnownAlignment(v4, Alignment | 0x100u, *(unsigned __int8 **)(v3 + 80), (const llvm::DataLayout *)a2, *(const llvm::DataLayout **)(v3 + 56), *(const llvm::DataLayout **)(v3 + 72));
  unint64_t v8 = *((unsigned __int16 *)a2 + 9);
  if ((__clz(1 << (v8 >> 1)) ^ 0x3F) < v7) {
    *((_WORD *)a2 + 9) = v8 & 0xFF81 | (2 * v7);
  }
  if (v4)
  {
    if (*(unsigned char *)(v4 + 16) == 62)
    {
      LODWORD(v298) = 0;
      if (sub_1CCA80F5C((void *)v3, v4, (uint64_t)a2, (unsigned int *)&v298))
      {
        unsigned int v9 = llvm::Instruction::clone((llvm::Instruction *)v4);
        uint64_t v10 = v298;
        uint64_t v11 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v298), 0, 0);
        int v12 = *((_DWORD *)v9 + 5);
        if ((v12 & 0x40000000) != 0) {
          int v13 = (void *)*(v9 - 1);
        }
        else {
          int v13 = &v9[-4 * (v12 & 0x7FFFFFF)];
        }
        unint64_t v14 = &v13[4 * v10];
        if (*v14)
        {
          *(void *)v14[2] = v14[1];
          uint64_t v15 = v14[1];
          if (v15) {
            *(void *)(v15 + 16) = v14[2];
          }
        }
        *unint64_t v14 = v11;
        if (v11)
        {
          uint64_t v18 = v11[1];
          uint64_t v16 = v11 + 1;
          uint64_t v17 = v18;
          uint64_t v19 = &v13[4 * v10];
          v19[1] = v18;
          if (v18) {
            *(void *)(v17 + 16) = v19 + 1;
          }
          v19[2] = v16;
          *uint64_t v16 = v14;
        }
        uint64_t v20 = *(void *)(v4 + 40);
        v9[5] = v20;
        *(_WORD *)(v20 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
        {
          uint64_t v184 = *(void *)(v20 + 56);
          if (v184)
          {
            int v185 = *(llvm::ValueSymbolTable **)(v184 + 104);
            if (v185) {
              llvm::ValueSymbolTable::reinsertValue(v185, (llvm::Value *)v9);
            }
          }
        }
        uint64_t v22 = *(void *)(v4 + 24);
        int v21 = (void *)(v4 + 24);
        v9[3] = v22;
        v9[4] = v21;
        *(void *)(v22 + 8) = v9 + 3;
        *int v21 = v9 + 3;
        if (*v5)
        {
          *(void *)*(a2 - 2) = *(a2 - 3);
          uint64_t v23 = *(a2 - 3);
          if (v23) {
            *(void *)(v23 + 16) = *(a2 - 2);
          }
        }
        *(a2 - 4) = v9;
        uint64_t v24 = v9[1];
        *(a2 - 3) = v24;
        if (v24) {
          *(void *)(v24 + 16) = a2 - 3;
        }
        *(a2 - 2) = v9 + 1;
        v9[1] = v5;
        uint64_t v25 = *(void *)(v3 + 32);
        int v26 = *(_DWORD *)(v25 + 8);
        *(void *)&long long v298 = v9;
        DWORD2(v298) = v26;
        int v27 = *(_DWORD *)(v25 + 2080);
        if (v27)
        {
          uint64_t v28 = *(void *)(v25 + 2064);
          int v29 = v27 - 1;
          unsigned int v30 = v29 & ((v9 >> 4) ^ (v9 >> 9));
          uint64_t v31 = (void *)(v28 + 16 * v30);
          uint64_t v32 = (void *)*v31;
          if ((void *)*v31 == v9) {
            return (llvm::UndefValue **)a2;
          }
          unsigned int v33 = 0;
          int v34 = 1;
          while (v32 != (void *)-4096)
          {
            if (v33) {
              BOOL v35 = 0;
            }
            else {
              BOOL v35 = v32 == (void *)-8192;
            }
            if (v35) {
              unsigned int v33 = v31;
            }
            unsigned int v36 = v30 + v34++;
            unsigned int v30 = v36 & v29;
            uint64_t v31 = (void *)(v28 + 16 * v30);
            uint64_t v32 = (void *)*v31;
            if ((void *)*v31 == v9) {
              return (llvm::UndefValue **)a2;
            }
          }
          if (v33) {
            uint64_t v56 = v33;
          }
          else {
            uint64_t v56 = v31;
          }
        }
        else
        {
          uint64_t v56 = 0;
        }
        unint64_t v57 = sub_1CBF569E0((_DWORD *)(v25 + 2064), (uint64_t)&v298, (uint64_t *)&v298, v56);
        *unint64_t v57 = v298;
        *((_DWORD *)v57 + 2) = DWORD2(v298);
        unsigned int v58 = *(_DWORD *)(v25 + 8);
        if (v58 >= *(_DWORD *)(v25 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v25 + 8 * v58) = v9;
        ++*(_DWORD *)(v25 + 8);
        return (llvm::UndefValue **)a2;
      }
    }
  }
  int v37 = *((unsigned __int8 *)a2 + 16);
  if (v37 == 60 || v37 == 61)
  {
    __int16 v38 = *((_WORD *)a2 + 9);
    if ((v38 & 0x380) != 0) {
      goto LABEL_135;
    }
  }
  else
  {
    if ((v37 - 63) < 3) {
      goto LABEL_135;
    }
    __int16 v38 = *((_WORD *)a2 + 9);
  }
  if ((v38 & 1) == 0)
  {
    unsigned int v39 = (uint64_t **)*a2;
    if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x10)
    {
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        *(void *)&long long v289 = &byte_1CFBCE98E;
        *((void *)&v289 + 1) = 0;
LABEL_74:
        int v61 = *(_DWORD *)(*a2 + 8);
        uint64_t v283 = v4;
        uint64_t v284 = v5;
        uint64_t v288 = (llvm::UndefValue *)*a2;
        if (v61 != 17)
        {
          if (v61 != 16) {
            goto LABEL_135;
          }
          unsigned int v281 = *((_DWORD *)v39 + 3);
          if (v281 == 1)
          {
            unsigned int v62 = (llvm::PointerType *)*v39[2];
            *(void *)&long long v298 = ".unpack";
            LOWORD(v300) = 259;
            uint64_t v63 = v3;
            char v64 = (llvm::LoadInst *)a2;
            goto LABEL_80;
          }
          StructLayout = llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(v3 + 80), (llvm::StructType *)v39);
          if (*((unsigned char *)StructLayout + 9)) {
            goto LABEL_135;
          }
          int v76 = StructLayout;
          uint64_t v77 = v39;
          unint64_t v78 = *((unsigned __int16 *)a2 + 9);
          uint64_t v79 = **v77;
          BOOL v80 = *(llvm::ConstantInt **)(v79 + 1960);
          uint64_t v277 = v79;
          uint64_t v279 = (uint64_t *)*(a2 - 4);
          unsigned int v81 = *(_DWORD *)(v79 + 1968);
          DWORD2(v298) = v81 >> 8;
          if (v81 >> 8 >= 0x41) {
            operator new[]();
          }
          *(void *)&long long v298 = 0;
          uint64_t v275 = llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v298, v75);
          if (DWORD2(v298) >= 0x41 && (void)v298) {
            MEMORY[0x1D25D9CB0](v298, 0x1000C8000313F17);
          }
          unint64_t v84 = llvm::UndefValue::get(v288, v82);
          unsigned int v295 = 0;
          if (v281)
          {
            unsigned int v85 = 0;
            uint64_t v271 = 1 << (v78 >> 1);
            uint64_t v273 = (char *)v76 + 16;
            uint64_t v86 = (uint64_t)v288;
            do
            {
              uint64_t v285 = (uint64_t)v84;
              unint64_t v296 = v275;
              uint64_t v297 = 0;
              uint64_t v87 = v85;
              uint64_t v88 = *(llvm::ConstantInt **)(v277 + 1960);
              unsigned int v89 = *(_DWORD *)(v277 + 1968);
              DWORD2(v298) = v89 >> 8;
              if (v89 >> 8 > 0x40) {
                operator new[]();
              }
              if (v89 <= 0xFF) {
                unint64_t v90 = 0;
              }
              else {
                unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v89) + 63);
              }
              *(void *)&long long v298 = v90 & v87;
              unsigned int v91 = llvm::ConstantInt::get(v88, (llvm::LLVMContext *)&v298, v83);
              if (DWORD2(v298) >= 0x41 && (void)v298) {
                MEMORY[0x1D25D9CB0](v298, 0x1000C8000313F17);
              }
              int v92 = *(uint64_t **)(v3 + 24);
              LOWORD(v300) = 773;
              uint64_t v297 = v91;
              long long v298 = v289;
              *(void *)&long long v299 = ".elt";
              uint64_t v93 = sub_1CC57EEA0(v92, v86, v279, (uint64_t *)&v296, 2, (uint64_t)&v298);
              uint64_t v94 = *(void *)(*(void *)(v86 + 16) + 8 * v295);
              unsigned int v95 = *(uint64_t **)(v3 + 24);
              char v96 = __clz((*(void *)&v273[8 * v295] | v271) & -(*(void *)&v273[8 * v295] | v271));
              __int16 v294 = 773;
              long long v292 = v289;
              unint64_t v293 = ".unpack";
              char v97 = 63 - v96;
              uint64_t v98 = operator new(0x60uLL);
              v98[13] = v98[13] & 0x38000000 | 1;
              unsigned int v99 = (llvm::Instruction *)(v98 + 8);
              *(void *)uint64_t v98 = 0;
              *((void *)v98 + 1) = 0;
              *((void *)v98 + 2) = 0;
              *((void *)v98 + 3) = v98 + 8;
              LOWORD(v300) = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v98 + 8), v94, v93, (const char **)&v298, 0, v97, 0);
              (*(void (**)(uint64_t, _DWORD *, long long *, uint64_t, uint64_t))(*(void *)v95[10] + 16))(v95[10], v98 + 8, &v292, v95[6], v95[7]);
              uint64_t v100 = *((unsigned int *)v95 + 2);
              if (v100)
              {
                uint64_t v102 = *v95;
                uint64_t v103 = v102 + 16 * v100;
                do
                {
                  llvm::Instruction::setMetadata(v99, *(_DWORD *)v102, *(llvm::MDNode **)(v102 + 8));
                  v102 += 16;
                }
                while (v102 != v103);
              }
              llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v298);
              if ((void)v298 || *((void *)v98 + 10) || (*((unsigned char *)v98 + 55) & 0x20) != 0) {
                llvm::Value::setMetadata((uint64_t ***)v99, 1, (llvm::MDNode *)v298);
              }
              uint64_t v86 = (uint64_t)v288;
              if (*((void *)&v298 + 1) || *((void *)v98 + 10) || (*((unsigned char *)v98 + 55) & 0x20) != 0) {
                llvm::Value::setMetadata((uint64_t ***)v99, 5, *((llvm::MDNode **)&v298 + 1));
              }
              if ((void)v299 || *((void *)v98 + 10) || (*((unsigned char *)v98 + 55) & 0x20) != 0) {
                llvm::Value::setMetadata((uint64_t ***)v99, 7, (llvm::MDNode *)v299);
              }
              if (*((void *)&v299 + 1) || *((void *)v98 + 10) || (*((unsigned char *)v98 + 55) & 0x20) != 0) {
                llvm::Value::setMetadata((uint64_t ***)v99, 8, *((llvm::MDNode **)&v299 + 1));
              }
              uint64_t v101 = *(void *)(v3 + 24);
              LOWORD(v300) = 257;
              unint64_t v84 = sub_1CC2411F8(v101, v285, (uint64_t)v99, &v295, 1, (uint64_t)&v298);
              unsigned int v85 = v295 + 1;
              unsigned int v295 = v85;
              int v5 = v284;
            }
            while (v85 < v281);
          }
          LOWORD(v300) = 261;
          long long v298 = v289;
          llvm::Value::setNameImpl(v84, (const char **)&v298);
          if (!v84 || *((unsigned char *)v84 + 16))
          {
LABEL_190:
            uint64_t v72 = v3;
            int v73 = (llvm::ValueAsMetadata *)a2;
            uint64_t v71 = v84;
LABEL_95:
            uint64_t result = sub_1CC9D3C84(v72, v73, v71);
            goto LABEL_96;
          }
          if ((*((unsigned char *)v84 + 23) & 0x10) == 0) {
            goto LABEL_337;
          }
          uint64_t v238 = ***(void ***)v84;
          uint64_t v239 = *(void *)(v238 + 152);
          uint64_t v240 = *(unsigned int *)(v238 + 168);
          if (v240)
          {
            LODWORD(v241) = (v240 - 1) & ((v84 >> 4) ^ (v84 >> 9));
            int v242 = (llvm::UndefValue **)(v239 + 16 * v241);
            uint64_t v243 = *v242;
            if (*v242 == v84)
            {
LABEL_330:
              unint64_t v257 = v242[1];
              unint64_t v260 = *(void *)v257;
              __int16 v258 = (char *)v257 + 16;
              unint64_t v259 = v260;
              if (v260 >= 5 && *(_DWORD *)v258 == *(_DWORD *)"llvm." && v258[4] == aLlvm_1[4])
              {
                *((_DWORD *)v84 + 8) |= 0x2000u;
                int v262 = llvm::Function::lookupIntrinsicID(v258, v259);
LABEL_338:
                *((_DWORD *)v84 + 9) = v262;
                int v5 = v284;
                goto LABEL_190;
              }
LABEL_337:
              int v262 = 0;
              *((_DWORD *)v84 + 8) &= ~0x2000u;
              goto LABEL_338;
            }
            int v244 = 1;
            while (v243 != (llvm::UndefValue *)-4096)
            {
              int v245 = v241 + v244++;
              uint64_t v241 = v245 & (v240 - 1);
              uint64_t v243 = *(llvm::UndefValue **)(v239 + 16 * v241);
              if (v243 == v84)
              {
                int v242 = (llvm::UndefValue **)(v239 + 16 * v241);
                goto LABEL_330;
              }
            }
          }
          int v242 = (llvm::UndefValue **)(v239 + 16 * v240);
          goto LABEL_330;
        }
        unint64_t v66 = (llvm::Type *)v39[3];
        int v65 = v39[4];
        if (v65 == (uint64_t *)1)
        {
          *(void *)&long long v298 = ".unpack";
          LOWORD(v300) = 259;
          uint64_t v63 = v3;
          char v64 = (llvm::LoadInst *)a2;
          unsigned int v62 = v66;
LABEL_80:
          unint64_t v67 = (uint64_t ***)sub_1CCA7BF64(v63, v64, v62, (uint64_t *)&v298);
          llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v298);
          if ((void)v298 || v67[6] || (*((unsigned char *)v67 + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(v67, 1, (llvm::MDNode *)v298);
          }
          if (*((void *)&v298 + 1) || v67[6] || (*((unsigned char *)v67 + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(v67, 5, *((llvm::MDNode **)&v298 + 1));
          }
          if ((void)v299 || v67[6] || (*((unsigned char *)v67 + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(v67, 7, (llvm::MDNode *)v299);
          }
          if (*((void *)&v299 + 1) || v67[6] || (*((unsigned char *)v67 + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(v67, 8, *((llvm::MDNode **)&v299 + 1));
          }
          uint64_t v69 = *(void *)(v3 + 24);
          int v70 = llvm::UndefValue::get((llvm::UndefValue *)v39, v68);
          LODWORD(v292) = 0;
          LOWORD(v300) = 261;
          long long v298 = v289;
          uint64_t v71 = sub_1CC2411F8(v69, (uint64_t)v70, (uint64_t)v67, &v292, 1, (uint64_t)&v298);
          uint64_t v72 = v3;
          int v73 = (llvm::ValueAsMetadata *)a2;
          goto LABEL_95;
        }
        if ((unint64_t)v65 > *(void *)(v3 + 16)) {
          goto LABEL_135;
        }
        uint64_t v282 = v39[4];
        unint64_t v154 = *(llvm::DataLayout **)(v3 + 80);
        uint64_t v155 = sub_1CB83544C((uint64_t)v154, (uint64_t)v66);
        BOOL v286 = v156 == 1;
        char v158 = llvm::DataLayout::getAlignment(v154, v66, 1);
        unint64_t v159 = *((unsigned __int16 *)a2 + 9);
        uint64_t v160 = **v39;
        uint64_t v161 = *(llvm::ConstantInt **)(v160 + 1984);
        uint64_t v278 = v160;
        uint64_t v280 = (uint64_t *)*(a2 - 4);
        unsigned int v162 = *(_DWORD *)(v160 + 1992);
        DWORD2(v298) = v162 >> 8;
        if (v162 >> 8 >= 0x41) {
          operator new[]();
        }
        *(void *)&long long v298 = 0;
        uint64_t v276 = llvm::ConstantInt::get(v161, (llvm::LLVMContext *)&v298, v157);
        if (DWORD2(v298) >= 0x41 && (void)v298) {
          MEMORY[0x1D25D9CB0](v298, 0x1000C8000313F17);
        }
        uint64_t v165 = llvm::UndefValue::get((llvm::UndefValue *)v39, v163);
        if (v282)
        {
          unint64_t v166 = v159;
          unint64_t v167 = 0;
          uint64_t v168 = 0;
          unint64_t v272 = ((1 << v158) + ((unint64_t)(v155 + 7) >> 3) - 1) & -(1 << v158);
          BOOL v274 = v286;
          uint64_t v269 = v3;
          uint64_t v270 = 1 << (v166 >> 1);
          do
          {
            uint64_t v287 = (uint64_t)v165;
            unint64_t v296 = v276;
            uint64_t v297 = 0;
            unsigned int v169 = *(llvm::ConstantInt **)(v278 + 1984);
            unsigned int v170 = *(_DWORD *)(v278 + 1992);
            DWORD2(v298) = v170 >> 8;
            if (v170 >> 8 > 0x40) {
              operator new[]();
            }
            if (v170 <= 0xFF) {
              unint64_t v171 = 0;
            }
            else {
              unint64_t v171 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v170) + 63);
            }
            *(void *)&long long v298 = v171 & v167;
            uint64_t v172 = llvm::ConstantInt::get(v169, (llvm::LLVMContext *)&v298, v164);
            if (DWORD2(v298) >= 0x41 && (void)v298) {
              MEMORY[0x1D25D9CB0](v298, 0x1000C8000313F17);
            }
            uint64_t v173 = *(uint64_t **)(v3 + 24);
            LOWORD(v300) = 773;
            uint64_t v297 = v172;
            long long v298 = v289;
            *(void *)&long long v299 = ".elt";
            uint64_t v174 = sub_1CC57EEA0(v173, (uint64_t)v288, v280, (uint64_t *)&v296, 2, (uint64_t)&v298);
            uint64_t v175 = *(uint64_t **)(v3 + 24);
            uint64_t v176 = *((void *)v288 + 3);
            __int16 v294 = 773;
            long long v292 = v289;
            unint64_t v293 = ".unpack";
            uint64_t v177 = operator new(0x60uLL);
            v177[13] = v177[13] & 0x38000000 | 1;
            uint64_t v178 = (llvm::Instruction *)(v177 + 8);
            *(void *)uint64_t v177 = 0;
            *((void *)v177 + 1) = 0;
            *((void *)v177 + 2) = 0;
            *((void *)v177 + 3) = v177 + 8;
            LOWORD(v300) = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v177 + 8), v176, v174, (const char **)&v298, 0, 63 - __clz((v168 | v270) & -(v168 | v270)), 0);
            (*(void (**)(uint64_t, _DWORD *, long long *, uint64_t, uint64_t))(*(void *)v175[10] + 16))(v175[10], v177 + 8, &v292, v175[6], v175[7]);
            uint64_t v179 = *((unsigned int *)v175 + 2);
            if (v179)
            {
              uint64_t v182 = *v175;
              uint64_t v183 = v182 + 16 * v179;
              do
              {
                llvm::Instruction::setMetadata(v178, *(_DWORD *)v182, *(llvm::MDNode **)(v182 + 8));
                v182 += 16;
              }
              while (v182 != v183);
            }
            llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v298);
            if ((void)v298 || *((void *)v177 + 10) || (*((unsigned char *)v177 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v178, 1, (llvm::MDNode *)v298);
            }
            uint64_t v4 = v283;
            uint64_t v3 = v269;
            if (*((void *)&v298 + 1) || *((void *)v177 + 10) || (*((unsigned char *)v177 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v178, 5, *((llvm::MDNode **)&v298 + 1));
            }
            if ((void)v299 || *((void *)v177 + 10) || (*((unsigned char *)v177 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v178, 7, (llvm::MDNode *)v299);
            }
            if (*((void *)&v299 + 1) || *((void *)v177 + 10) || (*((unsigned char *)v177 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v178, 8, *((llvm::MDNode **)&v299 + 1));
            }
            uint64_t v180 = *(void *)(v269 + 24);
            LODWORD(v292) = v167;
            LOWORD(v300) = 257;
            uint64_t v165 = sub_1CC2411F8(v180, v287, (uint64_t)v178, &v292, 1, (uint64_t)&v298);
            if (v274) {
            v168 += v272;
            }
            ++v167;
          }
          while ((uint64_t *)v167 != v282);
        }
        LOWORD(v300) = 261;
        long long v298 = v289;
        llvm::Value::setNameImpl(v165, (const char **)&v298);
        if (!v165 || *((unsigned char *)v165 + 16))
        {
LABEL_230:
          uint64_t result = sub_1CC9D3C84(v3, (llvm::ValueAsMetadata *)a2, v165);
          int v5 = v284;
LABEL_96:
          if (result) {
            return result;
          }
          goto LABEL_135;
        }
        if ((*((unsigned char *)v165 + 23) & 0x10) == 0) {
          goto LABEL_347;
        }
        uint64_t v246 = ***(void ***)v165;
        uint64_t v247 = *(void *)(v246 + 152);
        uint64_t v248 = *(unsigned int *)(v246 + 168);
        if (v248)
        {
          LODWORD(v249) = (v248 - 1) & ((v165 >> 4) ^ (v165 >> 9));
          __int16 v250 = (llvm::UndefValue **)(v247 + 16 * v249);
          int v251 = *v250;
          if (*v250 == v165)
          {
LABEL_340:
            int64_t v263 = v250[1];
            unint64_t v266 = *(void *)v263;
            unint64_t v264 = (char *)v263 + 16;
            unint64_t v265 = v266;
            if (v266 >= 5 && *(_DWORD *)v264 == *(_DWORD *)"llvm." && v264[4] == aLlvm_1[4])
            {
              *((_DWORD *)v165 + 8) |= 0x2000u;
              int v268 = llvm::Function::lookupIntrinsicID(v264, v265);
LABEL_348:
              *((_DWORD *)v165 + 9) = v268;
              uint64_t v4 = v283;
              goto LABEL_230;
            }
LABEL_347:
            int v268 = 0;
            *((_DWORD *)v165 + 8) &= ~0x2000u;
            goto LABEL_348;
          }
          int v252 = 1;
          while (v251 != (llvm::UndefValue *)-4096)
          {
            int v253 = v249 + v252++;
            uint64_t v249 = v253 & (v248 - 1);
            int v251 = *(llvm::UndefValue **)(v247 + 16 * v249);
            if (v251 == v165)
            {
              __int16 v250 = (llvm::UndefValue **)(v247 + 16 * v249);
              goto LABEL_340;
            }
          }
        }
        __int16 v250 = (llvm::UndefValue **)(v247 + 16 * v248);
        goto LABEL_340;
      }
      uint64_t v40 = **v39;
      uint64_t v41 = *(void *)(v40 + 152);
      uint64_t v42 = *(unsigned int *)(v40 + 168);
      if (v42)
      {
        LODWORD(v43) = (v42 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v44 = (void *)(v41 + 16 * v43);
        uint64_t v45 = (void *)*v44;
        if ((void *)*v44 == a2)
        {
LABEL_73:
          int v60 = (void *)v44[1];
          *(void *)&long long v289 = v60 + 2;
          *((void *)&v289 + 1) = *v60;
          goto LABEL_74;
        }
        int v46 = 1;
        while (v45 != (void *)-4096)
        {
          int v47 = v43 + v46++;
          uint64_t v43 = v47 & (v42 - 1);
          uint64_t v45 = *(void **)(v41 + 16 * v43);
          if (v45 == a2)
          {
            uint64_t v44 = (void *)(v41 + 16 * v43);
            goto LABEL_73;
          }
        }
      }
      uint64_t v44 = (void *)(v41 + 16 * v42);
      goto LABEL_73;
    }
  }
LABEL_135:
  LOBYTE(v296) = 0;
  AvailableLoadedValue = llvm::FindAvailableLoadedValue((llvm *)a2, *(llvm::LoadInst **)(v3 + 48), (llvm::AAResults *)&v296, (BOOL *)dword_1EBD04060);
  if (AvailableLoadedValue)
  {
    uint64_t v105 = (uint64_t)AvailableLoadedValue;
    if ((_BYTE)v296)
    {
      long long v298 = xmmword_1CFB32AC0;
      long long v299 = unk_1CFB32AD0;
      long long v300 = xmmword_1CFB32AE0;
      llvm::combineMetadata(AvailableLoadedValue, a2, (unsigned int *)&v298, 12, 0);
    }
    uint64_t v106 = *(void *)(v3 + 24);
    uint64_t v107 = (uint64_t **)*a2;
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      uint64_t v125 = 0;
      __int16 v124 = &byte_1CFBCE98E;
      goto LABEL_158;
    }
    uint64_t v108 = **v107;
    uint64_t v109 = *(void *)(v108 + 152);
    uint64_t v110 = *(unsigned int *)(v108 + 168);
    if (v110)
    {
      LODWORD(v111) = (v110 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v112 = (void *)(v109 + 16 * v111);
      unsigned int v113 = (void *)*v112;
      if ((void *)*v112 == a2)
      {
LABEL_157:
        uint64_t v123 = (void *)v112[1];
        uint64_t v126 = *v123;
        __int16 v124 = (char *)(v123 + 2);
        uint64_t v125 = v126;
LABEL_158:
        LOWORD(v300) = 773;
        *(void *)&long long v298 = v124;
        *((void *)&v298 + 1) = v125;
        *(void *)&long long v299 = ".cast";
        uint64_t v127 = sub_1CC240E88(v106, v105, (uint64_t)v107, (uint64_t)&v298);
        return sub_1CC9D3C84(v3, (llvm::ValueAsMetadata *)a2, v127);
      }
      int v114 = 1;
      while (v113 != (void *)-4096)
      {
        int v115 = v111 + v114++;
        uint64_t v111 = v115 & (v110 - 1);
        unsigned int v113 = *(void **)(v109 + 16 * v111);
        if (v113 == a2)
        {
          uint64_t v112 = (void *)(v109 + 16 * v111);
          goto LABEL_157;
        }
      }
    }
    uint64_t v112 = (void *)(v109 + 16 * v110);
    goto LABEL_157;
  }
  unint64_t v116 = *((unsigned __int16 *)a2 + 9);
  if ((v116 & 0x301) != 0) {
    return 0;
  }
  int v117 = *(unsigned __int8 *)(v4 + 16);
  if (!v4 || v117 != 62)
  {
    if ((v117 - 11) < 2) {
      goto LABEL_169;
    }
    if (v117 != 19) {
      goto LABEL_175;
    }
    uint64_t v128 = *(void *)(a2[5] + 56);
    uint64_t v129 = *(void *)*(a2 - 4);
    unsigned int v121 = *(_DWORD *)(v129 + 8);
    if ((v121 & 0xFE) == 0x12) {
      unsigned int v121 = *(_DWORD *)(**(void **)(v129 + 16) + 8);
    }
    if (!v128 || (uint64_t v122 = *(void *)(v128 + 112)) == 0)
    {
LABEL_168:
      if (v121 > 0xFF) {
        goto LABEL_175;
      }
LABEL_169:
      unint64_t v130 = (char *)operator new(0x80uLL);
      *((_DWORD *)v130 + 21) = *((_DWORD *)v130 + 21) & 0x38000000 | 2;
      *(void *)unint64_t v130 = 0;
      *((void *)v130 + 1) = 0;
      *((void *)v130 + 2) = 0;
      *((void *)v130 + 3) = v130 + 64;
      *((void *)v130 + 4) = 0;
      *((void *)v130 + 5) = 0;
      *((void *)v130 + 6) = 0;
      *((void *)v130 + 7) = v130 + 64;
      int v132 = (llvm::Type **)llvm::PoisonValue::get((llvm::PoisonValue *)*a2, v131);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v133, v134);
      llvm::StoreInst::StoreInst((llvm::StoreInst *)(v130 + 64), v132, NullValue, 0, (llvm::Instruction *)a2);
      uint64_t v136 = (llvm::Type *)a2[6];
      uint64_t v291 = v136;
      if (v136) {
        llvm::MetadataTracking::track((uint64_t)&v291, (unsigned __int8 *)v136, 2);
      }
      uint64_t v139 = (unsigned __int8 *)*((void *)v130 + 14);
      int v138 = (llvm::Type **)(v130 + 112);
      unint64_t v137 = v139;
      if (!v139) {
        goto LABEL_172;
      }
      int v201 = *v137;
      if ((v201 - 4) > 0x1E)
      {
        if ((v201 - 3) >= 0xFFFFFFFE) {
          uint64_t v204 = v137;
        }
        else {
          uint64_t v204 = 0;
        }
        if ((v201 - 3) < 0xFFFFFFFE)
        {
          if (v201 == 3) {
            *((void *)v137 + 1) = 0;
          }
          goto LABEL_172;
        }
        unint64_t v203 = (unint64_t)(v204 + 8);
      }
      else
      {
        if ((v137[1] & 0x7F) != 2 && !*((_DWORD *)v137 + 3)) {
          goto LABEL_172;
        }
        uint64_t v202 = *((void *)v137 + 2);
        if ((v202 & 4) == 0) {
          goto LABEL_172;
        }
        unint64_t v203 = v202 & 0xFFFFFFFFFFFFFFF8;
        if (!v203) {
          goto LABEL_172;
        }
      }
      *(void *)&long long v298 = v138;
      sub_1CC5FA668(v203 + 16, &v298);
LABEL_172:
      uint64_t v140 = (unsigned __int8 *)v291;
      *int v138 = v291;
      if (v140)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v291, v140, (uint64_t)v138);
        uint64_t v291 = 0;
      }
      uint64_t v127 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*a2, (llvm::Type *)v140);
      return sub_1CC9D3C84(v3, (llvm::ValueAsMetadata *)a2, v127);
    }
LABEL_167:
    if (*(unsigned char *)(v122 + 17)) {
      goto LABEL_175;
    }
    goto LABEL_168;
  }
  int v118 = *(unsigned char **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  if (v118[16] != 19) {
    goto LABEL_175;
  }
  uint64_t v119 = *(void *)(a2[5] + 56);
  uint64_t v120 = *(void *)v118;
  unsigned int v121 = *(_DWORD *)(*(void *)v118 + 8);
  if ((v121 & 0xFE) == 0x12) {
    unsigned int v121 = *(_DWORD *)(**(void **)(v120 + 16) + 8);
  }
  if (v119)
  {
    uint64_t v122 = *(void *)(v119 + 112);
    if (v122) {
      goto LABEL_167;
    }
  }
  if (v121 < 0x100) {
    goto LABEL_169;
  }
LABEL_175:
  uint64_t v141 = *(void *)(v4 + 8);
  if (!v141) {
    return 0;
  }
  uint64_t result = 0;
  if (v4 && v117 == 85 && !*(void *)(v141 + 8))
  {
    uint64_t v142 = (v116 >> 1) & 0x3F;
    if (!llvm::isSafeToLoadUnconditionally(*(llvm::Value **)(v4 - 64), *a2, (v116 >> 1) & 0x3F, *(void *)(v3 + 80), (uint64_t *)v4, 0, 0)|| !llvm::isSafeToLoadUnconditionally(*(llvm::Value **)(v4 - 32), *a2, v142, *(void *)(v3 + 80), (uint64_t *)v4, 0, 0))
    {
      uint64_t v186 = *(void *)(v4 - 64);
      if (*(unsigned char *)(v186 + 16) != 19) {
        goto LABEL_246;
      }
      uint64_t v187 = *(void *)(*(void *)(v4 + 40) + 56);
      uint64_t v188 = **v5;
      unsigned int v189 = *(_DWORD *)(v188 + 8);
      if ((v189 & 0xFE) == 0x12) {
        unsigned int v189 = *(_DWORD *)(**(void **)(v188 + 16) + 8);
      }
      if (v187 && (uint64_t v190 = *(void *)(v187 + 112)) != 0 && (*(unsigned char *)(v190 + 17) & 1) != 0 || v189 > 0xFF)
      {
LABEL_246:
        if (*(unsigned char *)(*(void *)(v4 - 32) + 16) != 19) {
          return 0;
        }
        uint64_t v191 = *(void *)(*(void *)(v4 + 40) + 56);
        uint64_t v192 = **v5;
        unsigned int v193 = *(_DWORD *)(v192 + 8);
        if ((v193 & 0xFE) == 0x12) {
          unsigned int v193 = *(_DWORD *)(**(void **)(v192 + 16) + 8);
        }
        if (v191 && (uint64_t v194 = *(void *)(v191 + 112)) != 0)
        {
          uint64_t result = 0;
          if ((*(unsigned char *)(v194 + 17) & 1) != 0 || v193 > 0xFF) {
            return result;
          }
        }
        else if (v193 > 0xFF)
        {
          return 0;
        }
      }
      else
      {
        uint64_t v186 = *(void *)(v4 - 32);
      }
      return (llvm::UndefValue **)sub_1CC9D28DC(v3, (uint64_t)a2, 0, v186);
    }
    uint64_t v143 = *(uint64_t **)(v3 + 24);
    uint64_t v144 = (llvm::Type *)*a2;
    uint64_t v145 = *(void *)(v4 - 64);
    if ((*(unsigned char *)(v145 + 23) & 0x10) == 0)
    {
      uint64_t v207 = 0;
      uint64_t v206 = &byte_1CFBCE98E;
LABEL_285:
      __int16 v294 = 773;
      *(void *)&long long v292 = v206;
      *((void *)&v292 + 1) = v207;
      unint64_t v293 = ".val";
      char v209 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v143[6] + 56) + 40) + 272), v144, 1);
      uint64_t v210 = operator new(0x60uLL);
      v210[13] = v210[13] & 0x38000000 | 1;
      *(void *)uint64_t v210 = 0;
      *((void *)v210 + 1) = 0;
      *((void *)v210 + 2) = 0;
      *((void *)v210 + 3) = v210 + 8;
      LOWORD(v300) = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v210 + 8), (uint64_t)v144, v145, (const char **)&v298, 0, v209, 0);
      char v290 = (llvm::Instruction *)(v210 + 8);
      (*(void (**)(uint64_t, _DWORD *, long long *, uint64_t, uint64_t))(*(void *)v143[10] + 16))(v143[10], v210 + 8, &v292, v143[6], v143[7]);
      uint64_t v211 = *((unsigned int *)v143 + 2);
      if (v211)
      {
        uint64_t v234 = *v143;
        uint64_t v235 = v234 + 16 * v211;
        do
        {
          llvm::Instruction::setMetadata(v290, *(_DWORD *)v234, *(llvm::MDNode **)(v234 + 8));
          v234 += 16;
        }
        while (v234 != v235);
      }
      uint64_t v212 = *(uint64_t **)(v3 + 24);
      uint64_t v213 = (llvm::Type *)*a2;
      uint64_t v214 = *(void *)(v4 - 32);
      if ((*(unsigned char *)(v214 + 23) & 0x10) == 0)
      {
        uint64_t v225 = 0;
        uint64_t v224 = &byte_1CFBCE98E;
        goto LABEL_295;
      }
      uint64_t v215 = ***(void ***)v214;
      uint64_t v216 = *(void *)(v215 + 152);
      uint64_t v217 = *(unsigned int *)(v215 + 168);
      if (v217)
      {
        LODWORD(v218) = (v217 - 1) & ((v214 >> 4) ^ (v214 >> 9));
        uint64_t v219 = (uint64_t *)(v216 + 16 * v218);
        uint64_t v220 = *v219;
        if (*v219 == v214)
        {
LABEL_294:
          uint64_t v223 = (void *)v219[1];
          uint64_t v226 = *v223;
          uint64_t v224 = (char *)(v223 + 2);
          uint64_t v225 = v226;
LABEL_295:
          __int16 v294 = 773;
          *(void *)&long long v292 = v224;
          *((void *)&v292 + 1) = v225;
          unint64_t v293 = ".val";
          char v227 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v212[6] + 56) + 40) + 272), v213, 1);
          uint64_t v228 = operator new(0x60uLL);
          v228[13] = v228[13] & 0x38000000 | 1;
          uint64_t v229 = (llvm::Instruction *)(v228 + 8);
          *(void *)uint64_t v228 = 0;
          *((void *)v228 + 1) = 0;
          *((void *)v228 + 2) = 0;
          *((void *)v228 + 3) = v228 + 8;
          LOWORD(v300) = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v228 + 8), (uint64_t)v213, v214, (const char **)&v298, 0, v227, 0);
          (*(void (**)(uint64_t, _DWORD *, long long *, uint64_t, uint64_t))(*(void *)v212[10] + 16))(v212[10], v228 + 8, &v292, v212[6], v212[7]);
          uint64_t v230 = *((unsigned int *)v212 + 2);
          if (v230)
          {
            uint64_t v236 = *v212;
            uint64_t v237 = *v212 + 16 * v230;
            do
            {
              llvm::Instruction::setMetadata(v229, *(_DWORD *)v236, *(llvm::MDNode **)(v236 + 8));
              v236 += 16;
            }
            while (v236 != v237);
          }
          __int16 v231 = *((_WORD *)a2 + 9) & 0x380;
          char v232 = *((unsigned char *)a2 + 60);
          *((_WORD *)v210 + 25) = v231 | *((_WORD *)v210 + 25) & 0xFC01 | (2 * v142);
          *((unsigned char *)v210 + 92) = v232;
          *((_WORD *)v228 + 25) = *((_WORD *)v228 + 25) & 0xFC01 | (2 * v142) | v231;
          *((unsigned char *)v228 + 92) = v232;
          uint64_t v233 = *(void *)(v4 - 96);
          LOWORD(v300) = 257;
          return (llvm::UndefValue **)sub_1CC199EFC(v233, (uint64_t *)v290, (uint64_t)v229, (const char **)&v298, 0, 0);
        }
        int v221 = 1;
        while (v220 != -4096)
        {
          int v222 = v218 + v221++;
          uint64_t v218 = v222 & (v217 - 1);
          uint64_t v220 = *(void *)(v216 + 16 * v218);
          if (v220 == v214)
          {
            uint64_t v219 = (uint64_t *)(v216 + 16 * v218);
            goto LABEL_294;
          }
        }
      }
      uint64_t v219 = (uint64_t *)(v216 + 16 * v217);
      goto LABEL_294;
    }
    uint64_t v146 = ***(void ***)v145;
    uint64_t v147 = *(void *)(v146 + 152);
    uint64_t v148 = *(unsigned int *)(v146 + 168);
    if (v148)
    {
      LODWORD(v149) = (v148 - 1) & ((v145 >> 4) ^ (v145 >> 9));
      unsigned int v150 = (uint64_t *)(v147 + 16 * v149);
      uint64_t v151 = *v150;
      if (*v150 == v145)
      {
LABEL_284:
        uint64_t v205 = (void *)v150[1];
        uint64_t v208 = *v205;
        uint64_t v206 = (char *)(v205 + 2);
        uint64_t v207 = v208;
        goto LABEL_285;
      }
      int v152 = 1;
      while (v151 != -4096)
      {
        int v153 = v149 + v152++;
        uint64_t v149 = v153 & (v148 - 1);
        uint64_t v151 = *(void *)(v147 + 16 * v149);
        if (v151 == v145)
        {
          unsigned int v150 = (uint64_t *)(v147 + 16 * v149);
          goto LABEL_284;
        }
      }
    }
    unsigned int v150 = (uint64_t *)(v147 + 16 * v148);
    goto LABEL_284;
  }
  return result;
}

uint64_t sub_1CCA7DCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v324 = *MEMORY[0x1E4F143B8];
  int v5 = (unsigned __int8 **)(a2 - 32);
  uint64_t v4 = *(void *)(a2 - 32);
  uint64_t v6 = *(void *)(a2 - 64);
  if ((*(_WORD *)(a2 + 18) & 0x301) != 0) {
    goto LABEL_2;
  }
  int v22 = *(unsigned __int8 *)(v4 + 16);
  if (v4) {
    BOOL v23 = v22 == 21;
  }
  else {
    BOOL v23 = 0;
  }
  if (v23)
  {
    uint64_t v169 = *(void *)(*(void *)(v4 + 24) + 112);
    if (v169)
    {
      unsigned int v170 = *(_DWORD *)(v4 + 32) + 2;
      if (v170 < *(_DWORD *)(v169 + 8))
      {
        uint64_t v171 = *(void *)(v169 + 8 * v170 + 40);
        if (v171)
        {
          if (*(char *)(v171 + 19) < 0) {
            goto LABEL_2;
          }
        }
      }
    }
  }
  else if (v4 && v22 == 59 && (*(_WORD *)(v4 + 18) & 0x80) != 0)
  {
    goto LABEL_2;
  }
  int v24 = *(unsigned __int8 *)(v6 + 16);
  uint64_t v25 = *(void *)(a2 - 64);
  if (!v6 || v24 != 77) {
    goto LABEL_66;
  }
  uint64_t v25 = *(void *)(v6 - 32);
  unsigned int v26 = *(unsigned __int8 *)(*(void *)v25 + 8);
  if (v26 == 11) {
    goto LABEL_2;
  }
  int v27 = *(unsigned __int8 *)(a2 + 16);
  if (v27 != 60 && v27 != 61)
  {
    if ((v27 - 63) < 3) {
      goto LABEL_30;
    }
LABEL_34:
    int v29 = *(llvm::PointerType ***)(v6 - 32);
LABEL_40:
    sub_1CCA80BF0(a1, a2, v29);
    goto LABEL_461;
  }
  if ((*(_WORD *)(a2 + 18) & 0x380) == 0) {
    goto LABEL_34;
  }
LABEL_30:
  if ((v26 & 0xFFFFFFFD) == 0xD || v26 < 7) {
    goto LABEL_34;
  }
  int v24 = *(unsigned __int8 *)(v25 + 16);
LABEL_66:
  if (v24 == 93)
  {
    uint64_t v45 = 0;
    while (1)
    {
      uint64_t v46 = *(void *)(v25 - 32);
      if (!v46 || *(unsigned char *)(v46 + 16) != 89) {
        goto LABEL_2;
      }
      if (v45)
      {
        if (v45 != *(uint64_t **)(v46 - 64)) {
          goto LABEL_2;
        }
      }
      else
      {
        uint64_t v45 = *(uint64_t **)(v46 - 64);
      }
      uint64_t v47 = *(void *)(v46 - 32);
      BOOL v48 = v47 && *(unsigned char *)(v47 + 16) == 16;
      if (!v48 || *(_DWORD *)(v25 + 72) != 1) {
        goto LABEL_2;
      }
      int v49 = (void *)(v47 + 24);
      if (*(_DWORD *)(v47 + 32) >= 0x41u) {
        int v49 = (void *)*v49;
      }
      if (*v49 != **(_DWORD **)(v25 + 64)) {
        goto LABEL_2;
      }
      uint64_t v25 = *(void *)(v25 - 64);
      int v24 = *(unsigned __int8 *)(v25 + 16);
      if (!v25 || v24 != 93) {
        goto LABEL_87;
      }
    }
  }
  uint64_t v45 = 0;
LABEL_87:
  unsigned int v50 = (v24 - 11);
  if (v50 < 2)
  {
    BOOL v51 = 1;
  }
  else
  {
    if (v50 < 0xFD) {
      goto LABEL_2;
    }
    unsigned int v321 = (void **)v323;
    *(void *)uint64_t v322 = v323;
    *(void *)&v322[8] = 8;
    *(_DWORD *)&v322[16] = 0;
    uint64_t v318 = (char *)&v319 + 8;
    *(void *)&long long v319 = 0x800000000;
    uint64_t v308 = (llvm::MDNode *)&v321;
    unint64_t v309 = (llvm::MDNode *)&v318;
    BOOL v51 = 0;
    if (sub_1CC04C108(&v308, v25))
    {
      do
      {
        BOOL v51 = v319 == 0;
        if (!v319) {
          break;
        }
        uint64_t v294 = *((void *)v318 + v319 - 1);
        LODWORD(v319) = v319 - 1;
      }
      while ((sub_1CC04C108(&v308, v294) & 1) != 0);
    }
    if (v318 != (char *)&v319 + 8) {
      free(v318);
    }
    if (*(void ***)v322 != v321) {
      free(*(void **)v322);
    }
  }
  if (v51 && v45 != 0)
  {
    uint64_t v154 = *(void *)v25;
    uint64_t v155 = *(void *)(v3 + 80);
    int64x2_t v306 = (llvm::StructType *)*v45;
    uint64_t v156 = sub_1CB83544C(v155, *v45) + 7;
    BOOL v158 = v157 == 1;
    if (((sub_1CB83544C(v155, v154) + 7) ^ (unint64_t)v156) <= 7 && ((v158 ^ (v159 == 1)) & 1) == 0)
    {
      uint64_t v160 = *((unsigned int *)v306 + 8);
      if (*(unsigned char *)(v154 + 8) != 17 || v154 == 0)
      {
        if (*(_DWORD *)(v154 + 12) != v160) {
          goto LABEL_2;
        }
        if (v160)
        {
          unsigned int v162 = *(void **)(v154 + 16);
          uint64_t v163 = 8 * v160;
          while (*v162 == *((void *)v306 + 3))
          {
            ++v162;
            v163 -= 8;
            if (!v163) {
              goto LABEL_255;
            }
          }
          goto LABEL_2;
        }
      }
      else if (*(void *)(v154 + 32) != v160)
      {
        goto LABEL_2;
      }
LABEL_255:
      int v167 = *(unsigned __int8 *)(v2 + 16);
      if (v167 == 60 || v167 == 61)
      {
        if ((*(_WORD *)(v2 + 18) & 0x380) == 0) {
          goto LABEL_261;
        }
      }
      else if ((v167 - 63) >= 3)
      {
        goto LABEL_261;
      }
      BOOL v168 = (*(_DWORD *)(*v45 + 8) & 0xFD) != 0xD && *(_DWORD *)(*v45 + 8) > 6u;
      if (v168) {
        goto LABEL_2;
      }
LABEL_261:
      a1 = v3;
      a2 = v2;
      int v29 = (llvm::PointerType **)v45;
      goto LABEL_40;
    }
  }
LABEL_2:
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(v3 + 80), *(llvm::Type **)v6, 0);
  unsigned __int8 v8 = llvm::getOrEnforceKnownAlignment(v4, Alignment | 0x100u, *(unsigned __int8 **)(v3 + 80), (const llvm::DataLayout *)v2, *(const llvm::DataLayout **)(v3 + 56), *(const llvm::DataLayout **)(v3 + 72));
  unsigned __int16 v9 = *(_WORD *)(v2 + 18);
  if ((__clz(1 << ((unint64_t)v9 >> 1)) ^ 0x3F) < v8)
  {
    unsigned __int16 v9 = v9 & 0xFF81 | (2 * v8);
    *(_WORD *)(v2 + 18) = v9;
  }
  int v10 = *(unsigned __int8 *)(v2 + 16);
  if (v10 == 60 || v10 == 61)
  {
    if ((v9 & 0x380) != 0) {
      goto LABEL_42;
    }
  }
  else if ((v10 - 63) < 3)
  {
    goto LABEL_42;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v304 = *(llvm::StructType ***)(v2 - 64);
    int64x2_t v305 = *v304;
    if ((*((_DWORD *)*v304 + 2) & 0xFE) == 0x10)
    {
      int v11 = *((_DWORD *)*v304 + 2);
      if (v11 != 17)
      {
        if (v11 != 16) {
          goto LABEL_42;
        }
        unsigned int v303 = *((_DWORD *)v305 + 3);
        if (v303 != 1)
        {
          StructLayout = llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(v3 + 80), v305);
          if ((*((unsigned char *)StructLayout + 9) & 1) == 0)
          {
            int v13 = StructLayout;
            unint64_t v297 = *(unsigned __int16 *)(v2 + 18);
            if ((*((unsigned char *)v304 + 23) & 0x10) != 0)
            {
              uint64_t v14 = **(void **)*v304;
              uint64_t v15 = *(void *)(v14 + 152);
              uint64_t v16 = *(unsigned int *)(v14 + 168);
              if (v16)
              {
                LODWORD(v17) = (v16 - 1) & ((v304 >> 4) ^ (v304 >> 9));
                uint64_t v18 = (llvm::StructType ***)(v15 + 16 * v17);
                uint64_t v19 = *v18;
                if (*v18 != v304)
                {
                  int v20 = 1;
                  do
                  {
                    if (v19 == (llvm::StructType **)-4096) {
                      goto LABEL_108;
                    }
                    int v21 = v17 + v20++;
                    uint64_t v17 = v21 & (v16 - 1);
                    uint64_t v19 = *(llvm::StructType ***)(v15 + 16 * v17);
                  }
                  while (v19 != v304);
                  uint64_t v18 = (llvm::StructType ***)(v15 + 16 * v17);
                }
              }
              else
              {
LABEL_108:
                uint64_t v18 = (llvm::StructType ***)(v15 + 16 * v16);
              }
              unint64_t v66 = (unint64_t *)v18[1];
              unint64_t v69 = *v66;
              uint64_t v68 = v66 + 2;
              size_t v67 = v69;
              unsigned int v321 = (void **)&v322[16];
              *(_OWORD *)uint64_t v322 = xmmword_1CDB15990;
              if (v69 >= 0x11) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              uint64_t v70 = 0;
              if (v67)
              {
                memcpy(v321, v68, v67);
                uint64_t v70 = *(void *)v322;
              }
            }
            else
            {
              size_t v67 = 0;
              uint64_t v70 = 0;
              unsigned int v321 = (void **)&v322[16];
              *(_OWORD *)uint64_t v322 = xmmword_1CDB15990;
            }
            size_t v71 = v70 + v67;
            *(void *)uint64_t v322 = v71;
            if (*(void *)&v322[8] < v71 + 4) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(_DWORD *)((char *)v321 + v71) = 1953260846;
            *(void *)v322 += 4;
            uint64_t v72 = (uint64_t *)*v5;
            if (((*v5)[23] & 0x10) != 0)
            {
              uint64_t v73 = **(void **)*v72;
              uint64_t v74 = *(void *)(v73 + 152);
              uint64_t v75 = *(unsigned int *)(v73 + 168);
              if (v75)
              {
                LODWORD(v76) = (v75 - 1) & ((v72 >> 4) ^ (v72 >> 9));
                uint64_t v77 = (uint64_t **)(v74 + 16 * v76);
                unint64_t v78 = *v77;
                if (*v77 != v72)
                {
                  int v79 = 1;
                  do
                  {
                    if (v78 == (uint64_t *)-4096) {
                      goto LABEL_121;
                    }
                    int v80 = v76 + v79++;
                    uint64_t v76 = v80 & (v75 - 1);
                    unint64_t v78 = *(uint64_t **)(v74 + 16 * v76);
                  }
                  while (v78 != v72);
                  uint64_t v77 = (uint64_t **)(v74 + 16 * v76);
                }
              }
              else
              {
LABEL_121:
                uint64_t v77 = (uint64_t **)(v74 + 16 * v75);
              }
              unsigned int v81 = (unint64_t *)v77[1];
              unint64_t v84 = *v81;
              int64_t v83 = v81 + 2;
              size_t v82 = v84;
              uint64_t v318 = v320;
              long long v319 = xmmword_1CDB15990;
              if (v84 >= 0x11) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              uint64_t v85 = 0;
              if (v82)
              {
                memcpy(v318, v83, v82);
                uint64_t v85 = v319;
              }
            }
            else
            {
              size_t v82 = 0;
              uint64_t v85 = 0;
              uint64_t v318 = v320;
              long long v319 = xmmword_1CDB15990;
            }
            size_t v86 = v85 + v82;
            *(void *)&long long v319 = v86;
            uint64_t v87 = (const llvm::APInt *)(v86 + 7);
            if (*((void *)&v319 + 1) < v86 + 7) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            uint64_t v88 = (char *)v318 + v86;
            *(_DWORD *)((char *)v88 + 3) = 1801675120;
            *uint64_t v88 = 1885696558;
            *(void *)&long long v319 = v319 + 7;
            uint64_t v89 = **(void **)v305;
            unint64_t v90 = *(llvm::ConstantInt **)(v89 + 1960);
            unsigned int v91 = *(_DWORD *)(v89 + 1968);
            LODWORD(v309) = v91 >> 8;
            if (v91 >> 8 >= 0x41) {
              operator new[]();
            }
            uint64_t v308 = 0;
            uint64_t v301 = llvm::ConstantInt::get(v90, (llvm::LLVMContext *)&v308, v87);
            if (v309 >= 0x41 && v308) {
              MEMORY[0x1D25D9CB0](v308, 0x1000C8000313F17);
            }
            LODWORD(v314) = 0;
            if (v303)
            {
              unsigned int v93 = 0;
              uint64_t v94 = (char *)v13 + 16;
              do
              {
                uint64_t v316 = v301;
                uint64_t v317 = 0;
                uint64_t v95 = v93;
                char v96 = *(llvm::ConstantInt **)(v89 + 1960);
                unsigned int v97 = *(_DWORD *)(v89 + 1968);
                LODWORD(v309) = v97 >> 8;
                if (v97 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v97 <= 0xFF) {
                  unint64_t v98 = 0;
                }
                else {
                  unint64_t v98 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v97) + 63);
                }
                uint64_t v308 = (llvm::MDNode *)(v98 & v95);
                unsigned int v99 = llvm::ConstantInt::get(v96, (llvm::LLVMContext *)&v308, v92);
                if (v309 >= 0x41 && v308) {
                  MEMORY[0x1D25D9CB0](v308, 0x1000C8000313F17);
                }
                uint64_t v317 = v99;
                uint64_t v100 = *(uint64_t **)(v3 + 24);
                __int16 v312 = 261;
                uint64_t v308 = (llvm::MDNode *)v318;
                unint64_t v309 = (llvm::MDNode *)v319;
                uint64_t v101 = sub_1CC57EEA0(v100, (uint64_t)v305, v72, (uint64_t *)&v316, 2, (uint64_t)&v308);
                uint64_t v102 = *(void *)(v3 + 24);
                __int16 v312 = 261;
                uint64_t v308 = (llvm::MDNode *)v321;
                unint64_t v309 = *(llvm::MDNode **)v322;
                uint64_t v103 = sub_1CC2415A4(v102, (uint64_t *)v304, (unsigned int *)&v314, 1, (uint64_t)&v308);
                uint64_t v104 = *(void *)&v94[8 * v314] | (1 << (v297 >> 1));
                uint64_t v105 = sub_1CC27BF8C(*(uint64_t **)(v3 + 24), (uint64_t)v103, v101, (63 - __clz(v104 & -v104)) | 0x100u, 0);
                llvm::Instruction::getAAMetadata((uint64_t ***)v2, &v308);
                if (v308 || *((void *)v105 + 6) || (*((unsigned char *)v105 + 23) & 0x20) != 0) {
                  llvm::Value::setMetadata((uint64_t ***)v105, 1, v308);
                }
                if (v309 || *((void *)v105 + 6) || (*((unsigned char *)v105 + 23) & 0x20) != 0) {
                  llvm::Value::setMetadata((uint64_t ***)v105, 5, v309);
                }
                if (v310 || *((void *)v105 + 6) || (*((unsigned char *)v105 + 23) & 0x20) != 0) {
                  llvm::Value::setMetadata((uint64_t ***)v105, 7, v310);
                }
                int v92 = v311;
                if (v311 || *((void *)v105 + 6) || (*((unsigned char *)v105 + 23) & 0x20) != 0) {
                  llvm::Value::setMetadata((uint64_t ***)v105, 8, v311);
                }
                unsigned int v93 = v314 + 1;
                LODWORD(v314) = v93;
              }
              while (v93 < v303);
            }
            if (v318 != v320) {
              free(v318);
            }
            uint64_t v106 = v321;
            goto LABEL_216;
          }
          goto LABEL_42;
        }
        goto LABEL_39;
      }
      unint64_t v30 = *((void *)v305 + 4);
      if (v30 == 1)
      {
LABEL_39:
        uint64_t v31 = *(void *)(v3 + 24);
        LODWORD(v318) = 0;
        LOWORD(v323[0]) = 257;
        int v29 = (llvm::PointerType **)sub_1CC2415A4(v31, (uint64_t *)v304, (unsigned int *)&v318, 1, (uint64_t)&v321);
        a1 = v3;
        a2 = v2;
        goto LABEL_40;
      }
      if (v30 <= *(void *)(v3 + 16))
      {
        int v52 = *(llvm::DataLayout **)(v3 + 80);
        unsigned int v53 = (llvm::Type *)*((void *)v305 + 3);
        size_t v295 = sub_1CB83544C((uint64_t)v52, (uint64_t)v53);
        BOOL v298 = v54 == 1;
        char v55 = llvm::DataLayout::getAlignment(v52, v53, 1);
        unint64_t v296 = *(unsigned __int16 *)(v2 + 18);
        if ((*((unsigned char *)v304 + 23) & 0x10) != 0)
        {
          uint64_t v56 = **(void **)*v304;
          uint64_t v57 = *(void *)(v56 + 152);
          uint64_t v58 = *(unsigned int *)(v56 + 168);
          if (v58)
          {
            LODWORD(v59) = (v58 - 1) & ((v304 >> 4) ^ (v304 >> 9));
            int v60 = (llvm::StructType ***)(v57 + 16 * v59);
            int v61 = *v60;
            if (*v60 != v304)
            {
              int v62 = 1;
              do
              {
                if (v61 == (llvm::StructType **)-4096) {
                  goto LABEL_161;
                }
                int v63 = v59 + v62++;
                uint64_t v59 = v63 & (v58 - 1);
                int v61 = *(llvm::StructType ***)(v57 + 16 * v59);
              }
              while (v61 != v304);
              int v60 = (llvm::StructType ***)(v57 + 16 * v59);
            }
          }
          else
          {
LABEL_161:
            int v60 = (llvm::StructType ***)(v57 + 16 * v58);
          }
          uint64_t v107 = (unint64_t *)v60[1];
          unint64_t v110 = *v107;
          uint64_t v109 = v107 + 2;
          size_t v108 = v110;
          unsigned int v321 = (void **)&v322[16];
          *(_OWORD *)uint64_t v322 = xmmword_1CDB15990;
          if (v110 >= 0x11) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v111 = 0;
          if (v108)
          {
            memcpy(v321, v109, v108);
            uint64_t v111 = *(void *)v322;
          }
        }
        else
        {
          size_t v108 = 0;
          uint64_t v111 = 0;
          unsigned int v321 = (void **)&v322[16];
          *(_OWORD *)uint64_t v322 = xmmword_1CDB15990;
        }
        size_t v112 = v111 + v108;
        *(void *)uint64_t v322 = v112;
        if (*(void *)&v322[8] < v112 + 4) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_DWORD *)((char *)v321 + v112) = 1953260846;
        *(void *)v322 += 4;
        unsigned int v113 = (uint64_t *)*v5;
        if (((*v5)[23] & 0x10) != 0)
        {
          uint64_t v114 = **(void **)*v113;
          uint64_t v115 = *(void *)(v114 + 152);
          uint64_t v116 = *(unsigned int *)(v114 + 168);
          if (v116)
          {
            LODWORD(v117) = (v116 - 1) & ((v113 >> 4) ^ (v113 >> 9));
            int v118 = (uint64_t **)(v115 + 16 * v117);
            uint64_t v119 = *v118;
            if (*v118 != v113)
            {
              int v120 = 1;
              do
              {
                if (v119 == (uint64_t *)-4096) {
                  goto LABEL_174;
                }
                int v121 = v117 + v120++;
                uint64_t v117 = v121 & (v116 - 1);
                uint64_t v119 = *(uint64_t **)(v115 + 16 * v117);
              }
              while (v119 != v113);
              int v118 = (uint64_t **)(v115 + 16 * v117);
            }
          }
          else
          {
LABEL_174:
            int v118 = (uint64_t **)(v115 + 16 * v116);
          }
          uint64_t v122 = (unint64_t *)v118[1];
          unint64_t v125 = *v122;
          uint64_t v123 = v122 + 2;
          size_t v124 = v125;
          uint64_t v318 = v320;
          long long v319 = xmmword_1CDB15990;
          if (v125 >= 0x11) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          uint64_t v126 = 0;
          if (v124)
          {
            memcpy(v318, v123, v124);
            uint64_t v126 = v319;
          }
        }
        else
        {
          size_t v124 = 0;
          uint64_t v126 = 0;
          uint64_t v318 = v320;
          long long v319 = xmmword_1CDB15990;
        }
        size_t v127 = v126 + v124;
        *(void *)&long long v319 = v127;
        uint64_t v128 = (const llvm::APInt *)(v127 + 7);
        if (*((void *)&v319 + 1) < v127 + 7) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        uint64_t v129 = (char *)v318 + v127;
        *(_DWORD *)((char *)v129 + 3) = 1801675120;
        _DWORD *v129 = 1885696558;
        *(void *)&long long v319 = v319 + 7;
        uint64_t v130 = **(void **)v305;
        int v131 = *(llvm::ConstantInt **)(v130 + 1984);
        unsigned int v132 = *(_DWORD *)(v130 + 1992);
        LODWORD(v309) = v132 >> 8;
        if (v132 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v302 = v113;
        uint64_t v308 = 0;
        long long v300 = llvm::ConstantInt::get(v131, (llvm::LLVMContext *)&v308, v128);
        if (v309 >= 0x41 && v308) {
          MEMORY[0x1D25D9CB0](v308, 0x1000C8000313F17);
        }
        if (v30)
        {
          uint64_t v134 = 0;
          uint64_t v135 = 0;
          BOOL v299 = v298;
          unint64_t v136 = ((1 << v55) + ((v295 + 7) >> 3) - 1) & -(1 << v55);
          do
          {
            uint64_t v316 = v300;
            uint64_t v317 = 0;
            unint64_t v137 = *(llvm::ConstantInt **)(v130 + 1984);
            unsigned int v138 = *(_DWORD *)(v130 + 1992);
            LODWORD(v309) = v138 >> 8;
            if (v138 >> 8 > 0x40) {
              operator new[]();
            }
            if (v138 <= 0xFF) {
              unint64_t v139 = 0;
            }
            else {
              unint64_t v139 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v138) + 63);
            }
            uint64_t v308 = (llvm::MDNode *)(v139 & v134);
            uint64_t v140 = llvm::ConstantInt::get(v137, (llvm::LLVMContext *)&v308, v133);
            if (v309 >= 0x41 && v308) {
              MEMORY[0x1D25D9CB0](v308, 0x1000C8000313F17);
            }
            uint64_t v317 = v140;
            uint64_t v141 = *(uint64_t **)(v3 + 24);
            __int16 v312 = 261;
            uint64_t v308 = (llvm::MDNode *)v318;
            unint64_t v309 = (llvm::MDNode *)v319;
            uint64_t v142 = sub_1CC57EEA0(v141, (uint64_t)v305, v302, (uint64_t *)&v316, 2, (uint64_t)&v308);
            uint64_t v143 = *(void *)(v3 + 24);
            LODWORD(v314) = v134;
            __int16 v312 = 261;
            uint64_t v308 = (llvm::MDNode *)v321;
            unint64_t v309 = *(llvm::MDNode **)v322;
            uint64_t v144 = sub_1CC2415A4(v143, (uint64_t *)v304, (unsigned int *)&v314, 1, (uint64_t)&v308);
            uint64_t v145 = sub_1CC27BF8C(*(uint64_t **)(v3 + 24), (uint64_t)v144, v142, (63 - __clz((v135 | (1 << (v296 >> 1))) & -(v135 | (1 << (v296 >> 1))))) | 0x100u, 0);
            llvm::Instruction::getAAMetadata((uint64_t ***)v2, &v308);
            if (v308 || *((void *)v145 + 6) || (*((unsigned char *)v145 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v145, 1, v308);
            }
            if (v309 || *((void *)v145 + 6) || (*((unsigned char *)v145 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v145, 5, v309);
            }
            if (v310 || *((void *)v145 + 6) || (*((unsigned char *)v145 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v145, 7, v310);
            }
            __int16 v133 = v311;
            if (v311 || *((void *)v145 + 6) || (*((unsigned char *)v145 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v145, 8, v311);
            }
            if (v299) {
            v135 += v136;
            }
            ++v134;
          }
          while (v30 != v134);
        }
        if (v318 != v320) {
          free(v318);
        }
        uint64_t v106 = v321;
LABEL_216:
        if (v106 != (void **)&v322[16]) {
          free(v106);
        }
        goto LABEL_461;
      }
    }
  }
LABEL_42:
  uint64_t v32 = *v5;
  unsigned int v33 = (*v5)[16];
  unsigned int v34 = v33 - 28;
  BOOL v36 = v33 < 0x1C && v33 != 5;
  if (!v32 || v36) {
    goto LABEL_305;
  }
  if (v33 <= 0x1B) {
    unsigned int v34 = *((unsigned __int16 *)v32 + 9);
  }
  if (v34 != 49) {
    goto LABEL_305;
  }
  uint64_t v313 = 0;
  uint64_t v37 = *(void *)(v2 - 64);
  unsigned int v321 = (void **)&v313;
  if (*(unsigned char *)(v37 + 16) != 60) {
    goto LABEL_305;
  }
  int v38 = *(_DWORD *)(v37 + 20);
  unsigned int v39 = (v38 & 0x40000000) != 0 ? *(uint64_t **)(v37 - 8) : (uint64_t *)(v37 - 32 * (v38 & 0x7FFFFFF));
  if (!sub_1CCA4756C(&v321, *v39)) {
    goto LABEL_305;
  }
  uint64_t v40 = *(uint64_t **)(v2 - 64);
  if (*(unsigned char *)(*v40 + 8) != 13) {
    goto LABEL_305;
  }
  uint64_t v41 = v313;
  int v42 = *(unsigned __int8 *)(v313 + 16);
  if (v313 && v42 == 77)
  {
    uint64_t v41 = *(void *)(v313 - 32);
    int v42 = *(unsigned __int8 *)(v41 + 16);
  }
  int v315 = 0;
  uint64_t v318 = 0;
  uint64_t v308 = 0;
  uint64_t v316 = 0;
  uint64_t v314 = 0;
  unsigned int v321 = (void **)&v315;
  *(void *)uint64_t v322 = &v318;
  *(void *)&v322[8] = &v308;
  *(void *)&v322[16] = &v316;
  *(void *)&v323[0] = &v314;
  if (v42 != 85) {
    goto LABEL_305;
  }
  int v43 = *(_DWORD *)(v41 + 20);
  uint64_t v44 = (v43 & 0x40000000) != 0 ? *(uint64_t **)(v41 - 8) : (uint64_t *)(v41 - 32 * (v43 & 0x7FFFFFF));
  if (!sub_1CCA80EE0((uint64_t)&v321, *v44)) {
    goto LABEL_305;
  }
  int v64 = *(_DWORD *)(v41 + 20);
  uint64_t v65 = (v64 & 0x40000000) != 0 ? *(void *)(v41 - 8) : v41 - 32 * (v64 & 0x7FFFFFF);
  uint64_t v147 = *(void *)(v65 + 32);
  if (!v147) {
    goto LABEL_305;
  }
  **(void **)&v322[16] = v147;
  int v148 = *(_DWORD *)(v41 + 20);
  uint64_t v149 = (v148 & 0x40000000) != 0 ? *(void *)(v41 - 8) : v41 - 32 * (v148 & 0x7FFFFFF);
  uint64_t v150 = *(void *)(v149 + 64);
  if (!v150) {
    goto LABEL_305;
  }
  **(void **)&v323[0] = v150;
  if (*((unsigned char *)v318 + 16) != 60) {
    goto LABEL_305;
  }
  int v151 = *((_DWORD *)v318 + 5);
  int v152 = (v151 & 0x40000000) != 0 ? (char *)*((void *)v318 - 1) : (char *)v318 - 32 * (v151 & 0x7FFFFFF);
  if ((uint64_t v164 = *(llvm::PointerType **)v318, v316 != *(void **)v152)
    || *((unsigned char *)v308 + 16) != 60
    || ((int v165 = *((_DWORD *)v308 + 5), (v165 & 0x40000000) != 0)
      ? (unint64_t v166 = (void *)*((void *)v308 - 1))
      : (unint64_t v166 = (void *)((char *)v308 - 32 * (v165 & 0x7FFFFFF))),
        v314 != *v166))
  {
    uint64_t v172 = (v151 & 0x40000000) != 0 ? (char *)*((void *)v318 - 1) : (char *)v318 - 32 * (v151 & 0x7FFFFFF);
    if (v314 != *(void *)v172 || *((unsigned char *)v308 + 16) != 60) {
      goto LABEL_305;
    }
    int v173 = *((_DWORD *)v308 + 5);
    uint64_t v174 = (v173 & 0x40000000) != 0
         ? (llvm::MDNode *)*((void *)v308 - 1)
         : (llvm::MDNode *)((char *)v308 - 32 * (v173 & 0x7FFFFFF));
    if (v316 != *(void **)v174) {
      goto LABEL_305;
    }
  }
  if ((llvm::PointerType *)*v40 == v164) {
    goto LABEL_305;
  }
  uint64_t v175 = *(void *)(v3 + 80);
  uint64_t v176 = sub_1CB83544C(v175, *v40) + 7;
  BOOL v178 = v177 == 1;
  if ((sub_1CB83544C(v175, (uint64_t)v164) + 7) ^ (unint64_t)v176) > 7 || ((v178 ^ (v179 == 1))) {
    goto LABEL_305;
  }
  uint64_t v180 = v40[1];
  if (!v180)
  {
LABEL_477:
    uint64_t v274 = *(void *)(v3 + 24);
    *(void *)(v274 + 48) = v40[5];
    *(void *)(v274 + 56) = v40 + 3;
    uint64_t v275 = (void *)v40[6];
    uint64_t v318 = v275;
    if (v275)
    {
      llvm::MetadataTracking::track((uint64_t)&v318, (unsigned __int8 *)v275, 2);
      uint64_t v276 = v318;
    }
    else
    {
      uint64_t v276 = 0;
    }
    sub_1CB8461A4(v274, 0, (uint64_t)v276);
    if (!v318) {
      goto LABEL_480;
    }
    int v290 = *(unsigned __int8 *)v318;
    if ((v290 - 4) > 0x1E)
    {
      if ((v290 - 3) >= 0xFFFFFFFE) {
        unint64_t v293 = v318;
      }
      else {
        unint64_t v293 = 0;
      }
      if ((v290 - 3) < 0xFFFFFFFE)
      {
        if (v290 == 3) {
          *((void *)v318 + 1) = 0;
        }
        goto LABEL_480;
      }
      unint64_t v292 = (unint64_t)v293 + 8;
    }
    else
    {
      if ((*((unsigned char *)v318 + 1) & 0x7F) != 2 && !*((_DWORD *)v318 + 3)) {
        goto LABEL_480;
      }
      uint64_t v291 = *((void *)v318 + 2);
      if ((v291 & 4) == 0) {
        goto LABEL_480;
      }
      unint64_t v292 = v291 & 0xFFFFFFFFFFFFFFF8;
      if (!v292) {
        goto LABEL_480;
      }
    }
    unsigned int v321 = &v318;
    sub_1CC5FA668(v292 + 16, &v321);
LABEL_480:
    LOWORD(v323[0]) = 257;
    uint64_t v277 = (llvm::PointerType **)sub_1CCA7BF64(v3, (llvm::LoadInst *)v40, v164, (uint64_t *)&v321);
    uint64_t v279 = v40[1];
    if (!v279)
    {
LABEL_502:
      long long v289 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*v40, v278);
      sub_1CC9D3C84(v3, (llvm::ValueAsMetadata *)v40, v289);
      sub_1CC9D6844(v3, (uint64_t)v40);
    }
    uint64_t v280 = v277;
    while (1)
    {
      uint64_t v281 = *(void *)(v279 + 24);
      uint64_t v282 = *(void *)(v3 + 24);
      *(void *)(v282 + 48) = *(void *)(v281 + 40);
      *(void *)(v282 + 56) = v281 + 24;
      uint64_t v283 = *(void **)(v281 + 48);
      uint64_t v318 = v283;
      if (v283)
      {
        llvm::MetadataTracking::track((uint64_t)&v318, (unsigned __int8 *)v283, 2);
        uint64_t v284 = v318;
      }
      else
      {
        uint64_t v284 = 0;
      }
      sub_1CB8461A4(v282, 0, (uint64_t)v284);
      if (!v318) {
        goto LABEL_485;
      }
      int v285 = *(unsigned __int8 *)v318;
      if ((v285 - 4) > 0x1E)
      {
        if ((v285 - 3) >= 0xFFFFFFFE) {
          uint64_t v288 = v318;
        }
        else {
          uint64_t v288 = 0;
        }
        if ((v285 - 3) < 0xFFFFFFFE)
        {
          if (v285 == 3) {
            *((void *)v318 + 1) = 0;
          }
          goto LABEL_485;
        }
        unint64_t v287 = (unint64_t)v288 + 8;
      }
      else
      {
        if ((*((unsigned char *)v318 + 1) & 0x7F) != 2 && !*((_DWORD *)v318 + 3)) {
          goto LABEL_485;
        }
        uint64_t v286 = *((void *)v318 + 2);
        if ((v286 & 4) == 0) {
          goto LABEL_485;
        }
        unint64_t v287 = v286 & 0xFFFFFFFFFFFFFFF8;
        if (!v287) {
          goto LABEL_485;
        }
      }
      unsigned int v321 = &v318;
      sub_1CC5FA668(v287 + 16, &v321);
LABEL_485:
      sub_1CCA80BF0(v3, v281, v280);
      uint64_t v279 = *(void *)(v279 + 8);
      if (!v279) {
        goto LABEL_502;
      }
    }
  }
  while (1)
  {
    uint64_t v181 = *(void *)(v180 + 24);
    if (!v181) {
      break;
    }
    if (*(unsigned char *)(v181 + 16) != 61) {
      break;
    }
    uint64_t v182 = *(void *)(v181 - 32);
    if ((uint64_t *)v182 == v40) {
      break;
    }
    int v183 = *(unsigned __int8 *)(v182 + 16);
    uint64_t v184 = v182;
    if (v182)
    {
      uint64_t v184 = v182;
      if (v183 == 77) {
        uint64_t v184 = *(void *)(v182 - 32);
      }
    }
    if (v184 == v313) {
      break;
    }
    if (v182) {
      BOOL v185 = v183 == 21;
    }
    else {
      BOOL v185 = 0;
    }
    if (v185)
    {
      uint64_t v186 = *(void *)(*(void *)(v182 + 24) + 112);
      if (v186)
      {
        unsigned int v187 = *(_DWORD *)(v182 + 32) + 2;
        if (v187 < *(_DWORD *)(v186 + 8))
        {
          uint64_t v188 = *(void *)(v186 + 8 * v187 + 40);
          if (v188)
          {
            if (*(char *)(v188 + 19) < 0) {
              break;
            }
          }
        }
      }
    }
    else if (v182 && v183 == 59 && (*(_WORD *)(v182 + 18) & 0x80) != 0)
    {
      break;
    }
    uint64_t v180 = *(void *)(v180 + 8);
    if (!v180) {
      goto LABEL_477;
    }
  }
LABEL_305:
  if (!v4
    || *(unsigned char *)(v4 + 16) != 62
    || (LODWORD(v321) = 0, !sub_1CCA80F5C((void *)v3, v4, v2, (unsigned int *)&v321)))
  {
    if ((*(_WORD *)(v2 + 18) & 0x301) != 0) {
      return 0;
    }
    uint64_t v217 = *(void *)(v4 + 8);
    if (v217)
    {
      if (!*(void *)(v217 + 8))
      {
        int v244 = *(unsigned __int8 *)(v4 + 16);
        if (v244 == 59) {
          goto LABEL_461;
        }
        if (v4)
        {
          if (v244 == 62)
          {
            uint64_t v245 = *(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
            if (*(unsigned char *)(v245 + 16) == 59)
            {
              uint64_t v246 = *(void *)(v245 + 8);
              if (v246)
              {
                if (!*(void *)(v246 + 8)) {
                  goto LABEL_461;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v218 = *(void *)(v3 + 48);
    unsigned int v321 = (void **)v4;
    *(void *)uint64_t v322 = -1;
    *(_OWORD *)&v322[8] = 0u;
    v323[0] = 0u;
    if (llvm::AAResults::pointsToConstantMemory(v218, (uint64_t)&v321, 0)) {
      goto LABEL_461;
    }
    uint64_t v220 = (void *)(v2 + 24);
    if (v2 + 24 == *(void *)(*(void *)(v2 + 40) + 48)) {
      goto LABEL_443;
    }
    int v221 = 6;
    unsigned int v307 = (v2 >> 4) ^ (v2 >> 9);
    while (1)
    {
      uint64_t v220 = (void *)*v220;
      if (v220) {
        uint64_t v222 = (uint64_t)(v220 - 3);
      }
      else {
        uint64_t v222 = 0;
      }
      if (sub_1CBF63B28(v222) || sub_1CC27D470(v222))
      {
LABEL_346:
        ++v221;
        goto LABEL_347;
      }
      int v224 = *(unsigned __int8 *)(v222 + 16);
      if (v224 == 77)
      {
        if (*(unsigned char *)(*(void *)v222 + 8) == 15) {
          goto LABEL_346;
        }
      }
      else
      {
        if (v220 && v224 == 61)
        {
          if ((*(_WORD *)(v222 + 18) & 0x301) == 0
            && sub_1CC06EFB4(*(unsigned __int8 **)(v222 - 32), *v5)
            && **(void **)(v222 - 64) == **(void **)(v2 - 64))
          {
            uint64_t v249 = *(void *)(v3 + 32);
            int v250 = *(_DWORD *)(v249 + 8);
            unsigned int v321 = (void **)v2;
            *(_DWORD *)uint64_t v322 = v250;
            int v251 = *(_DWORD *)(v249 + 2080);
            if (v251)
            {
              uint64_t v252 = *(void *)(v249 + 2064);
              int v253 = v251 - 1;
              unsigned int v254 = v253 & v307;
              unsigned int v255 = (void *)(v252 + 16 * (v253 & v307));
              uint64_t v256 = *v255;
              if (*v255 != v2)
              {
                unint64_t v257 = 0;
                int v258 = 1;
                while (v256 != -4096)
                {
                  if (v257) {
                    BOOL v259 = 0;
                  }
                  else {
                    BOOL v259 = v256 == -8192;
                  }
                  if (v259) {
                    unint64_t v257 = v255;
                  }
                  unsigned int v260 = v254 + v258++;
                  unsigned int v254 = v260 & v253;
                  unsigned int v255 = (void *)(v252 + 16 * v254);
                  uint64_t v256 = *v255;
                  if (*v255 == v2) {
                    goto LABEL_468;
                  }
                }
                if (v257) {
                  uint64_t v271 = v257;
                }
                else {
                  uint64_t v271 = v255;
                }
LABEL_466:
                unint64_t v272 = sub_1CBF569E0((_DWORD *)(v249 + 2064), (uint64_t)&v321, (uint64_t *)&v321, v271);
                void *v272 = v321;
                *((_DWORD *)v272 + 2) = *(_DWORD *)v322;
                unsigned int v273 = *(_DWORD *)(v249 + 8);
                if (v273 >= *(_DWORD *)(v249 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)v249 + 8 * v273) = v2;
                ++*(_DWORD *)(v249 + 8);
              }
LABEL_468:
              sub_1CC9D6844(v3, v222);
            }
            uint64_t v271 = 0;
            goto LABEL_466;
          }
LABEL_443:
          uint64_t v261 = *(void *)(*(void *)(v2 + 40) + 56);
          int v262 = *(uint64_t **)(v2 - 32);
          uint64_t v263 = *v262;
          unsigned int v264 = *(_DWORD *)(*v262 + 8);
          unsigned int v265 = v264;
          if ((v264 & 0xFE) == 0x12) {
            unsigned int v265 = *(_DWORD *)(**(void **)(v263 + 16) + 8);
          }
          if ((!v261 || (uint64_t v266 = *(void *)(v261 + 112)) == 0 || (*(unsigned char *)(v266 + 17) & 1) == 0) && v265 <= 0xFF)
          {
            int v267 = *((unsigned __int8 *)v262 + 16);
            if (v267 == 62) {
              int v267 = *(unsigned __int8 *)(v262[-4 * (*((_DWORD *)v262 + 5) & 0x7FFFFFF)] + 16);
            }
            if (v267 == 19)
            {
              if ((v264 & 0xFE) == 0x12) {
                unsigned int v264 = *(_DWORD *)(**(void **)(v263 + 16) + 8);
              }
              if ((!v261 || (uint64_t v268 = *(void *)(v261 + 112)) == 0 || (*(unsigned char *)(v268 + 17) & 1) == 0) && v264 <= 0xFF)
              {
                if (*(unsigned char *)(v6 + 16) != 12)
                {
                  uint64_t v269 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v6, v219);
                  return sub_1CC9D28DC(v3, v2, 0, (uint64_t)v269);
                }
                return 0;
              }
            }
          }
          if (*(unsigned __int8 *)(v6 + 16) - 11 > 1) {
            return 0;
          }
LABEL_461:
          sub_1CC9D6844(v3, v2);
        }
        if (v220 && v224 == 60)
        {
          if (v222 != v6 || !sub_1CC06EFB4(*(unsigned __int8 **)(v6 - 32), (unsigned __int8 *)v4)) {
            goto LABEL_443;
          }
          goto LABEL_461;
        }
        uint64_t v225 = (v224 - 33);
        if (v225 <= 0x37)
        {
          if (((1 << v225) & 0x8000000000041) != 0)
          {
            uint64_t v226 = *(void *)(v222 + 64);
            if (!v226 || (*(unsigned char *)(v226 + 17) & 0x30) == 0)
            {
              int v227 = *(_DWORD *)(v222 + 20);
              if (v227 < 0)
              {
                uint64_t v232 = v222 - 32 * (v227 & 0x7FFFFFF);
                uint64_t v235 = *(void *)(v232 - 8);
                uint64_t v233 = v232 - 8;
                uint64_t v234 = v235;
                if (v235)
                {
                  uint64_t v236 = -v234;
                  do
                  {
                    unsigned int v237 = *(_DWORD *)(*(void *)(v233 + v236) + 8);
                    BOOL v168 = v237 > 7;
                    int v238 = (1 << v237) & 0x83;
                    if (v168 || v238 == 0) {
                      goto LABEL_443;
                    }
                    v236 += 16;
                  }
                  while (v236);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v222, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v222, 44))
              {
                goto LABEL_443;
              }
            }
          }
          else if (((1 << v225) & 0x808001D0000010) != 0 || v225 == 27 && (*(_WORD *)(v222 + 18) & 0x301) != 0)
          {
            goto LABEL_443;
          }
        }
      }
      int v228 = *(unsigned __int8 *)(v222 + 16);
      uint64_t v229 = (v228 - 33);
      if (v229 <= 0x37)
      {
        if (((1 << (v228 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v230 = *(void *)(v222 + 64);
          if (!v230 || (*(unsigned char *)(v230 + 20) & 4) == 0 && (*(unsigned char *)(v230 + 17) & 0x10) == 0)
          {
            LODWORD(v321) = 7;
            if (sub_1CC5CB59C(v222, (__int32 *)&v321, 1uLL))
            {
              uint64_t v240 = *(void *)(v222 - 32);
              if (!v240
                || *(unsigned char *)(v240 + 16)
                || *(void *)(v240 + 24) != *(void *)(v222 + 72)
                || *(_DWORD *)(v240 + 36) != 7)
              {
                goto LABEL_443;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v222, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v222, 44))
            {
              goto LABEL_443;
            }
          }
LABEL_389:
          int v228 = *(unsigned __int8 *)(v222 + 16);
          if (!v220)
          {
LABEL_377:
            if (v220 && v228 == 36 || v220 && v228 == 38)
            {
              if ((*(_WORD *)(v222 + 18) & 1) == 0) {
                goto LABEL_443;
              }
            }
            else if (v228 == 34)
            {
              goto LABEL_443;
            }
            goto LABEL_347;
          }
          goto LABEL_376;
        }
        if (((1 << (v228 - 33)) & 0x808001C8000010) != 0) {
          goto LABEL_443;
        }
        if (v229 == 28)
        {
          if ((*(_WORD *)(v222 + 18) & 0x301) != 0) {
            goto LABEL_443;
          }
          goto LABEL_389;
        }
      }
      if (!v220) {
        goto LABEL_377;
      }
LABEL_376:
      if (v228 != 84) {
        goto LABEL_377;
      }
      uint64_t v231 = *(void *)(v222 + 64);
      if ((!v231 || (*(unsigned char *)(v231 + 16) & 0x20) == 0)
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v222, 37))
      {
        goto LABEL_443;
      }
LABEL_347:
      --v221;
      if (v220 == *(void **)(*(void *)(v2 + 40) + 48) || v221 == 0) {
        goto LABEL_443;
      }
    }
  }
  unsigned int v189 = llvm::Instruction::clone((llvm::Instruction *)v4);
  uint64_t v190 = v321;
  uint64_t v191 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v321), 0, 0);
  int v192 = *((_DWORD *)v189 + 5);
  if ((v192 & 0x40000000) != 0) {
    unsigned int v193 = (void *)*(v189 - 1);
  }
  else {
    unsigned int v193 = &v189[-4 * (v192 & 0x7FFFFFF)];
  }
  uint64_t v194 = &v193[4 * v190];
  if (*v194)
  {
    *(void *)v194[2] = v194[1];
    uint64_t v195 = v194[1];
    if (v195) {
      *(void *)(v195 + 16) = v194[2];
    }
  }
  *uint64_t v194 = v191;
  if (v191)
  {
    uint64_t v198 = v191[1];
    unsigned int v196 = v191 + 1;
    uint64_t v197 = v198;
    uint64_t v199 = &v193[4 * v190];
    v199[1] = v198;
    if (v198) {
      *(void *)(v197 + 16) = v199 + 1;
    }
    v199[2] = v196;
    *unsigned int v196 = v194;
  }
  uint64_t v200 = *(void *)(v4 + 40);
  v189[5] = v200;
  *(_WORD *)(v200 + 18) &= ~0x8000u;
  if ((*((unsigned char *)v189 + 23) & 0x10) != 0)
  {
    uint64_t v247 = *(void *)(v200 + 56);
    if (v247)
    {
      uint64_t v248 = *(llvm::ValueSymbolTable **)(v247 + 104);
      if (v248) {
        llvm::ValueSymbolTable::reinsertValue(v248, (llvm::Value *)v189);
      }
    }
  }
  uint64_t v202 = *(void *)(v4 + 24);
  int v201 = (void *)(v4 + 24);
  v189[3] = v202;
  v189[4] = v201;
  *(void *)(v202 + 8) = v189 + 3;
  *int v201 = v189 + 3;
  if (*v5)
  {
    **(void **)(v2 - 16) = *(void *)(v2 - 24);
    uint64_t v203 = *(void *)(v2 - 24);
    if (v203) {
      *(void *)(v203 + 16) = *(void *)(v2 - 16);
    }
  }
  *(void *)(v2 - 32) = v189;
  uint64_t v204 = v189[1];
  *(void *)(v2 - 24) = v204;
  if (v204) {
    *(void *)(v204 + 16) = v2 - 24;
  }
  *(void *)(v2 - 16) = v189 + 1;
  v189[1] = v5;
  uint64_t v205 = *(void *)(v3 + 32);
  int v206 = *(_DWORD *)(v205 + 8);
  unsigned int v321 = (void **)v189;
  *(_DWORD *)uint64_t v322 = v206;
  int v207 = *(_DWORD *)(v205 + 2080);
  if (v207)
  {
    uint64_t v208 = *(void *)(v205 + 2064);
    int v209 = v207 - 1;
    unsigned int v210 = v209 & ((v189 >> 4) ^ (v189 >> 9));
    uint64_t v211 = (void *)(v208 + 16 * v210);
    uint64_t v212 = (void *)*v211;
    if ((void *)*v211 == v189) {
      return v2;
    }
    uint64_t v213 = 0;
    int v214 = 1;
    while (v212 != (void *)-4096)
    {
      if (v213) {
        BOOL v215 = 0;
      }
      else {
        BOOL v215 = v212 == (void *)-8192;
      }
      if (v215) {
        uint64_t v213 = v211;
      }
      unsigned int v216 = v210 + v214++;
      unsigned int v210 = v216 & v209;
      uint64_t v211 = (void *)(v208 + 16 * v210);
      uint64_t v212 = (void *)*v211;
      if ((void *)*v211 == v189) {
        return v2;
      }
    }
    if (v213) {
      uint64_t v241 = v213;
    }
    else {
      uint64_t v241 = v211;
    }
  }
  else
  {
    uint64_t v241 = 0;
  }
  int v242 = sub_1CBF569E0((_DWORD *)(v205 + 2064), (uint64_t)&v321, (uint64_t *)&v321, v241);
  *int v242 = v321;
  *((_DWORD *)v242 + 2) = *(_DWORD *)v322;
  unsigned int v243 = *(_DWORD *)(v205 + 8);
  if (v243 >= *(_DWORD *)(v205 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v205 + 8 * v243) = v189;
  ++*(_DWORD *)(v205 + 8);
  return v2;
}

uint64_t sub_1CCA7FB7C(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 18) & 0x301) != 0) {
    return 0;
  }
  int v5 = *(llvm::BasicBlock **)(a2 + 40);
  uint64_t v6 = (void *)*((void *)v5 + 5);
  if (v6 == (void *)((char *)v5 + 40))
  {
    unsigned __int8 v8 = 0;
  }
  else
  {
    if (v6) {
      unsigned __int8 v7 = (unsigned __int8 *)(v6 - 3);
    }
    else {
      unsigned __int8 v7 = 0;
    }
    if (v7[16] - 29 >= 0xB) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = (llvm::Instruction *)v7;
    }
  }
  Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v8, 0);
  BOOL hasNPredecessors = llvm::BasicBlock::hasNPredecessors(Successor, 2);
  uint64_t result = 0;
  if (!hasNPredecessors) {
    return result;
  }
  for (uint64_t i = *((void *)Successor + 1); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v12 = *(void *)(i + 24);
    unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
    if (v12) {
      BOOL v14 = v13 >= 0x1C;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14 && v13 - 29 < 0xB) {
      break;
    }
  }
  uint64_t v16 = *(void *)(*(void *)(i + 24) + 40);
  if ((llvm::BasicBlock *)v16 == v5)
  {
    do
    {
      uint64_t i = *(void *)(i + 8);
      uint64_t v17 = *(void *)(i + 24);
      unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
      if (v17) {
        BOOL v19 = v18 >= 0x1C;
      }
      else {
        BOOL v19 = 0;
      }
      BOOL v20 = !v19 || v18 - 29 > 0xA;
    }
    while (v20);
    uint64_t v16 = *(void *)(v17 + 40);
  }
  uint64_t result = 0;
  if (v5 == Successor || (llvm::BasicBlock *)v16 == Successor) {
    return result;
  }
  uint64_t v21 = *(void *)(v16 + 40);
  if (v21 == v16 + 40)
  {
    uint64_t v23 = 0;
  }
  else
  {
    if (v21) {
      uint64_t v22 = v21 - 24;
    }
    else {
      uint64_t v22 = 0;
    }
    if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v22;
    }
  }
  uint64_t result = 0;
  int v24 = (void *)(v23 + 24);
  if (v23) {
    uint64_t v25 = (void *)(v23 + 24);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = (uint64_t)(v25 - 3);
  if (v23) {
    int v27 = v25 - 3;
  }
  else {
    int v27 = 0;
  }
  int v28 = *((unsigned __int8 *)v27 + 16);
  if (v28 != 30) {
    int v27 = 0;
  }
  if (!v23 || v28 != 30) {
    return result;
  }
  if (v25 == *(void **)(v16 + 48)) {
    return 0;
  }
  if ((*((_DWORD *)v27 + 5) & 0x7FFFFFF) != 1)
  {
    if ((llvm::BasicBlock *)*(v27 - 4) != v5 && (llvm::BasicBlock *)*(v27 - 8) != v5) {
      return 0;
    }
    if (*((unsigned char *)v25 - 8) == 61)
    {
LABEL_65:
      if (*(void *)(v26 - 32) != *(void *)(a2 - 32)) {
        return 0;
      }
      char isSameOperationAs = llvm::Instruction::isSameOperationAs((llvm::Instruction *)a2, (const llvm::Instruction *)v26, 0);
      uint64_t result = 0;
      if ((isSameOperationAs & 1) == 0) {
        return result;
      }
      uint64_t v33 = *((void *)v5 + 6);
      if (v33) {
        uint64_t v34 = v33 - 24;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34 != a2)
      {
        while (1)
        {
          int v35 = *(unsigned __int8 *)(v34 + 16);
          uint64_t v36 = (v35 - 33);
          if (v36 > 0x37) {
            goto LABEL_84;
          }
          if (((1 << (v35 - 33)) & 0x8000000000041) != 0) {
            break;
          }
          if (((1 << (v35 - 33)) & 0x808001C8000010) != 0) {
            return 0;
          }
          if (v36 == 28)
          {
            if ((*(_WORD *)(v34 + 18) & 0x301) != 0) {
              return 0;
            }
LABEL_83:
            int v35 = *(unsigned __int8 *)(v34 + 16);
          }
LABEL_84:
          if (v35 > 35)
          {
            if (v35 == 84)
            {
              uint64_t v38 = *(void *)(v34 + 64);
              if (v38 && (*(unsigned char *)(v38 + 16) & 0x20) != 0) {
                goto LABEL_99;
              }
              uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v34, 37);
              if (!result) {
                return result;
              }
              int v35 = *(unsigned __int8 *)(v34 + 16);
            }
            else if (v35 == 36 || v35 == 38)
            {
              if ((*(_WORD *)(v34 + 18) & 1) == 0) {
                return 0;
              }
              goto LABEL_106;
            }
          }
          else if (v35 == 34)
          {
            return 0;
          }
          uint64_t v39 = (v35 - 33);
          if (v39 > 0x37) {
            goto LABEL_106;
          }
          if (((1 << v39) & 0x808001D0000010) != 0) {
            return 0;
          }
          if (((1 << v39) & 0x8000000000041) == 0)
          {
            if (v39 == 27 && (*(_WORD *)(v34 + 18) & 0x301) != 0) {
              return 0;
            }
            goto LABEL_106;
          }
LABEL_99:
          uint64_t v40 = *(void *)(v34 + 64);
          if (!v40 || (*(unsigned char *)(v40 + 17) & 0x30) == 0)
          {
            int v41 = *(_DWORD *)(v34 + 20);
            if (v41 < 0)
            {
              uint64_t v42 = v34 - 32 * (v41 & 0x7FFFFFF);
              uint64_t v45 = *(void *)(v42 - 8);
              uint64_t v43 = v42 - 8;
              uint64_t v44 = v45;
              if (v45)
              {
                uint64_t v46 = -v44;
                do
                {
                  unsigned int v47 = *(_DWORD *)(*(void *)(v43 + v46) + 8);
                  BOOL v20 = v47 > 7;
                  int v48 = (1 << v47) & 0x83;
                  if (v20 || v48 == 0) {
                    return 0;
                  }
                  v46 += 16;
                }
                while (v46);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v34, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v34, 44) & 1) == 0)
            {
              return 0;
            }
          }
LABEL_106:
          uint64_t v33 = *(void *)(v33 + 8);
          if (v33) {
            uint64_t v34 = v33 - 24;
          }
          else {
            uint64_t v34 = 0;
          }
          if (v34 == a2) {
            goto LABEL_190;
          }
        }
        uint64_t v37 = *(void *)(v34 + 64);
        if (!v37 || (*(unsigned char *)(v37 + 20) & 4) == 0 && (*(unsigned char *)(v37 + 17) & 0x10) == 0)
        {
          v180[0].i32[0] = 7;
          if (sub_1CC5CB59C(v34, v180[0].i32, 1uLL))
          {
            uint64_t v50 = *(void *)(v34 - 32);
            if (!v50
              || *(unsigned char *)(v50 + 16)
              || *(void *)(v50 + 24) != *(void *)(v34 + 72)
              || *(_DWORD *)(v50 + 36) != 7)
            {
              return 0;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v34, 66) & 1) == 0)
          {
            uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v34, 44);
            if (!result) {
              return result;
            }
          }
        }
        goto LABEL_83;
      }
LABEL_190:
      uint64_t v70 = *(llvm::Value **)(v26 - 64);
      MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(a2 + 48), *(const llvm::DILocation **)(v26 + 48), v31);
      uint64_t v182 = MergedLocation;
      if (MergedLocation) {
        llvm::MetadataTracking::track((uint64_t)&v182, MergedLocation, 2);
      }
      if (v70 == *(llvm::Value **)(a2 - 64))
      {
LABEL_225:
        unsigned int v113 = (void *)((char *)Successor + 40);
        for (uint64_t j = (void *)*((void *)Successor + 6); ; uint64_t j = (void *)j[1])
        {
          if (j == v113) {
            goto LABEL_237;
          }
          uint64_t v115 = j - 3;
          if (!j) {
            uint64_t v115 = 0;
          }
          if (*((unsigned char *)v115 + 16) != 83) {
            break;
          }
        }
        unsigned int v116 = *((unsigned __int8 *)j - 8) - 38;
        BOOL v20 = v116 > 0x38;
        uint64_t v117 = (1 << v116) & 0x100060000000001;
        if (v20 || v117 == 0) {
          unsigned int v113 = j;
        }
        else {
          unsigned int v113 = (void *)j[1];
        }
LABEL_237:
        uint64_t v119 = (char *)operator new(0x80uLL);
        *((_DWORD *)v119 + 21) = *((_DWORD *)v119 + 21) & 0x38000000 | 2;
        int v120 = (llvm::Value *)(v119 + 64);
        *(void *)uint64_t v119 = 0;
        *((void *)v119 + 1) = 0;
        *((void *)v119 + 2) = 0;
        *((void *)v119 + 3) = v119 + 64;
        *((void *)v119 + 4) = 0;
        *((void *)v119 + 5) = 0;
        *((void *)v119 + 6) = 0;
        *((void *)v119 + 7) = v119 + 64;
        llvm::StoreInst::StoreInst((llvm::Value *)(v119 + 64), (uint64_t)v70, *(void *)(a2 - 32), *(_WORD *)(a2 + 18) & 1, ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F, (*(_WORD *)(a2 + 18) >> 7) & 7, *(unsigned char *)(a2 + 60), 0);
        if (v113) {
          uint64_t v121 = (uint64_t)(v113 - 3);
        }
        else {
          uint64_t v121 = 0;
        }
        sub_1CCA331D4(a1, v120, v121);
        BOOL v178 = v182;
        if (v182) {
          llvm::MetadataTracking::track((uint64_t)&v178, v182, 2);
        }
        uint64_t v123 = (unsigned __int8 **)(v119 + 112);
        uint64_t v122 = (unsigned __int8 *)*((void *)v119 + 14);
        if (!v122)
        {
LABEL_243:
          size_t v124 = v178;
          const void *v123 = v178;
          if (v124)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v178, v124, (uint64_t)(v119 + 112));
            BOOL v178 = 0;
          }
          llvm::Instruction::getAAMetadata((uint64_t ***)a2, v180);
          if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v180[0]), (int32x4_t)vceqzq_s64(v180[1]))))))
          {
            llvm::Instruction::getAAMetadata((uint64_t ***)v26, v173);
            llvm::AAMDNodes::merge(v180[0].i64, v173, &v174);
            if (v174 || *v123 || (v119[87] & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v120, 1, v174);
            }
            if (v175 || *v123 || (v119[87] & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v120, 5, v175);
            }
            if (v176 || *v123 || (v119[87] & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v120, 7, v176);
            }
            if (v177 || *v123 || (v119[87] & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v120, 8, v177);
            }
          }
          sub_1CC9D6844(a1, a2);
        }
        int v125 = *v122;
        if ((v125 - 4) > 0x1E)
        {
          if ((v125 - 3) >= 0xFFFFFFFE) {
            uint64_t v152 = *((void *)v119 + 14);
          }
          else {
            uint64_t v152 = 0;
          }
          if ((v125 - 3) < 0xFFFFFFFE)
          {
            if (v125 == 3) {
              *((void *)v122 + 1) = 0;
            }
            goto LABEL_243;
          }
          unint64_t v127 = v152 + 8;
        }
        else
        {
          if ((v122[1] & 0x7F) != 2 && !*((_DWORD *)v122 + 3)) {
            goto LABEL_243;
          }
          uint64_t v126 = *((void *)v122 + 2);
          if ((v126 & 4) == 0) {
            goto LABEL_243;
          }
          unint64_t v127 = v126 & 0xFFFFFFFFFFFFFFF8;
          if (!v127) {
            goto LABEL_243;
          }
        }
        v180[0].i64[0] = (uint64_t)(v119 + 112);
        sub_1CC5FA668(v127 + 16, v180);
        goto LABEL_243;
      }
      uint64_t v72 = *(void *)v70;
      v180[0].i64[0] = (uint64_t)"storemerge";
      __int16 v181 = 259;
      uint64_t v73 = operator new(0x48uLL);
      v73[1] = v72;
      uint64_t v74 = (llvm::Value *)(v73 + 1);
      *uint64_t v73 = 0;
      v73[2] = 0;
      v73[3] = 0x4000000000000053;
      *((_OWORD *)v73 + 2) = 0u;
      *((_OWORD *)v73 + 3) = 0u;
      v73[8] = 0x200000000;
      llvm::Value::setNameImpl((llvm::Value *)(v73 + 1), (const char **)v180);
      if (!*((unsigned char *)v73 + 24))
      {
        if ((*((unsigned char *)v73 + 31) & 0x10) == 0) {
          goto LABEL_345;
        }
        uint64_t v154 = ***(void ***)v74;
        uint64_t v155 = *(void *)(v154 + 152);
        uint64_t v156 = *(unsigned int *)(v154 + 168);
        if (v156)
        {
          LODWORD(v157) = (v156 - 1) & ((v74 >> 4) ^ (v74 >> 9));
          BOOL v158 = (llvm::Value **)(v155 + 16 * v157);
          int v159 = *v158;
          if (*v158 != v74)
          {
            int v160 = 1;
            do
            {
              if (v159 == (llvm::Value *)-4096) {
                goto LABEL_337;
              }
              int v161 = v157 + v160++;
              uint64_t v157 = v161 & (v156 - 1);
              int v159 = *(llvm::Value **)(v155 + 16 * v157);
            }
            while (v159 != v74);
            BOOL v158 = (llvm::Value **)(v155 + 16 * v157);
          }
        }
        else
        {
LABEL_337:
          BOOL v158 = (llvm::Value **)(v155 + 16 * v156);
        }
        unsigned int v162 = v158[1];
        unint64_t v165 = *(void *)v162;
        uint64_t v163 = (char *)v162 + 16;
        unint64_t v164 = v165;
        if (v165 >= 5 && (*(_DWORD *)v163 == *(_DWORD *)"llvm." ? (BOOL v166 = v163[4] == aLlvm_1[4]) : (BOOL v166 = 0), v166))
        {
          *((_DWORD *)v73 + 10) |= 0x2000u;
          int v167 = llvm::Function::lookupIntrinsicID(v163, v164);
        }
        else
        {
LABEL_345:
          int v167 = 0;
          *((_DWORD *)v73 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v73 + 11) = v167;
      }
      uint64_t v75 = *((unsigned int *)v73 + 17);
      uint64_t v76 = operator new(40 * v75);
      *uint64_t v73 = v76;
      if (v75)
      {
        uint64_t v77 = v76;
        do
        {
          *uint64_t v77 = 0;
          v77[1] = 0;
          v77[2] = 0;
          v77[3] = v74;
          v77 += 4;
        }
        while (v77 != &v76[4 * v75]);
      }
      uint64_t v78 = *(void *)(a2 - 64);
      uint64_t v79 = *(void *)(a2 + 40);
      int v80 = *((_DWORD *)v73 + 7);
      uint64_t v81 = v80 & 0x7FFFFFF;
      if ((v80 & 0x7FFFFFF) == *((_DWORD *)v73 + 17))
      {
        unsigned int v130 = v81 + (v81 >> 1);
        if (v130 <= 2) {
          uint64_t v131 = 2;
        }
        else {
          uint64_t v131 = v130;
        }
        *((_DWORD *)v73 + 17) = v131;
        unsigned int v132 = (uint64_t *)((char *)v74 - 32 * v81);
        if ((v80 & 0x40000000) != 0) {
          unsigned int v132 = v76;
        }
        uint64_t v169 = v79;
        __p = v132;
        __int16 v133 = operator new(40 * v131);
        *uint64_t v73 = v133;
        uint64_t v134 = v133;
        do
        {
          *uint64_t v134 = 0;
          v134[1] = 0;
          v134[2] = 0;
          v134[3] = v74;
          v134 += 4;
        }
        while (v134 != &v133[4 * v131]);
        int v135 = *((_DWORD *)v73 + 7);
        if ((v135 & 0x40000000) != 0) {
          uint64_t v136 = (uint64_t)v133;
        }
        else {
          uint64_t v136 = (uint64_t)v74 - 32 * (v135 & 0x7FFFFFF);
        }
        uint64_t v168 = v136;
        sub_1CC5E4108((uint64_t)v180, __p, &__p[4 * v81], v136);
        if (v81)
        {
          memmove((void *)(v168 + 32 * v131), &__p[4 * v81], 8 * v81);
          uint64_t v137 = 4 * v81;
          do
          {
            unsigned int v138 = &__p[v137];
            if (__p[v137 - 4])
            {
              *(void *)*(v138 - 2) = *(v138 - 3);
              uint64_t v139 = *(v138 - 3);
              if (v139) {
                *(void *)(v139 + 16) = *(v138 - 2);
              }
            }
            v137 -= 4;
          }
          while (v137 * 8);
        }
        operator delete(__p);
        int v80 = *((_DWORD *)v73 + 7);
        uint64_t v79 = v169;
      }
      uint64_t v82 = (v80 + 1) & 0x7FFFFFF;
      *((_DWORD *)v73 + 7) = v80 & 0xF8000000 | (v80 + 1) & 0x7FFFFFF;
      uint64_t v83 = (v82 - 1);
      if ((v80 & 0x40000000) != 0) {
        unint64_t v84 = (char *)*v73;
      }
      else {
        unint64_t v84 = (char *)v74 - 32 * v82;
      }
      uint64_t v85 = &v84[32 * v83];
      if (*(void *)v85)
      {
        **((void **)v85 + 2) = *((void *)v85 + 1);
        uint64_t v128 = *((void *)v85 + 1);
        if (v128) {
          *(void *)(v128 + 16) = *((void *)v85 + 2);
        }
      }
      *(void *)uint64_t v85 = v78;
      if (v78)
      {
        uint64_t v88 = *(void *)(v78 + 8);
        uint64_t v87 = (char **)(v78 + 8);
        uint64_t v86 = v88;
        uint64_t v89 = &v84[32 * v83];
        *((void *)v89 + 1) = v88;
        if (v88) {
          *(void *)(v86 + 16) = v89 + 8;
        }
        *((void *)v89 + 2) = v87;
        *uint64_t v87 = v85;
      }
      int v90 = *((_DWORD *)v73 + 7);
      uint64_t v91 = v90 & 0x7FFFFFF;
      if ((v90 & 0x40000000) != 0) {
        int v92 = (char *)*v73;
      }
      else {
        int v92 = (char *)v74 - 32 * v91;
      }
      uint64_t v93 = *((unsigned int *)v73 + 17);
      *(void *)&v92[32 * v93 + 8 * (v91 - 1)] = v79;
      uint64_t v94 = *(void *)(v26 - 64);
      int v95 = *((_DWORD *)v73 + 7);
      if ((v95 & 0x7FFFFFF) == v93)
      {
        LODWORD(v140) = v93 + (v93 >> 1);
        if (v140 <= 2) {
          uint64_t v140 = 2;
        }
        else {
          uint64_t v140 = v140;
        }
        uint64_t v170 = v140;
        *((_DWORD *)v73 + 17) = v140;
        if ((v95 & 0x40000000) != 0) {
          uint64_t v141 = (uint64_t *)*v73;
        }
        else {
          uint64_t v141 = (uint64_t *)((char *)v74 - 32 * v93);
        }
        __pa = v141;
        uint64_t v142 = operator new(40 * v170);
        *uint64_t v73 = v142;
        uint64_t v143 = v142;
        do
        {
          *uint64_t v143 = 0;
          v143[1] = 0;
          v143[2] = 0;
          v143[3] = v74;
          v143 += 4;
        }
        while (v143 != &v142[4 * v170]);
        int v144 = *((_DWORD *)v73 + 7);
        if ((v144 & 0x40000000) != 0) {
          uint64_t v145 = (uint64_t)v142;
        }
        else {
          uint64_t v145 = (uint64_t)v74 - 32 * (v144 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)v180, __pa, &__pa[4 * v93], v145);
        if (v93)
        {
          memmove((void *)(v145 + 32 * v170), &__pa[4 * v93], 8 * v93);
          uint64_t v146 = 4 * v93;
          do
          {
            uint64_t v147 = &__pa[v146];
            if (__pa[v146 - 4])
            {
              *(void *)*(v147 - 2) = *(v147 - 3);
              uint64_t v148 = *(v147 - 3);
              if (v148) {
                *(void *)(v148 + 16) = *(v147 - 2);
              }
            }
            v146 -= 4;
          }
          while (v146 * 8);
        }
        operator delete(__pa);
        int v95 = *((_DWORD *)v73 + 7);
      }
      uint64_t v96 = (v95 + 1) & 0x7FFFFFF;
      *((_DWORD *)v73 + 7) = v95 & 0xF8000000 | (v95 + 1) & 0x7FFFFFF;
      uint64_t v97 = (v96 - 1);
      if ((v95 & 0x40000000) != 0) {
        unint64_t v98 = (char *)*v73;
      }
      else {
        unint64_t v98 = (char *)v74 - 32 * v96;
      }
      unsigned int v99 = &v98[32 * v97];
      if (*(void *)v99)
      {
        **((void **)v99 + 2) = *((void *)v99 + 1);
        uint64_t v129 = *((void *)v99 + 1);
        if (v129) {
          *(void *)(v129 + 16) = *((void *)v99 + 2);
        }
      }
      *(void *)unsigned int v99 = v94;
      if (v94)
      {
        uint64_t v102 = *(void *)(v94 + 8);
        uint64_t v101 = (char **)(v94 + 8);
        uint64_t v100 = v102;
        uint64_t v103 = &v98[32 * v97];
        *((void *)v103 + 1) = v102;
        if (v102) {
          *(void *)(v100 + 16) = v103 + 8;
        }
        *((void *)v103 + 2) = v101;
        *uint64_t v101 = v99;
      }
      int v104 = *((_DWORD *)v73 + 7);
      uint64_t v105 = v104 & 0x7FFFFFF;
      if ((v104 & 0x40000000) != 0) {
        uint64_t v106 = (char *)*v73;
      }
      else {
        uint64_t v106 = (char *)v74 - 32 * v105;
      }
      *(void *)&v106[32 * *((unsigned int *)v73 + 17) + 8 * (v105 - 1)] = v16;
      uint64_t v107 = *((void *)Successor + 6);
      if (v107) {
        uint64_t v108 = v107 - 24;
      }
      else {
        uint64_t v108 = 0;
      }
      uint64_t v70 = sub_1CCA331D4(a1, v74, v108);
      int v179 = v182;
      if (v182) {
        llvm::MetadataTracking::track((uint64_t)&v179, v182, 2);
      }
      uint64_t v111 = (unsigned __int8 *)v73[7];
      unint64_t v110 = (unsigned __int8 **)(v73 + 7);
      uint64_t v109 = v111;
      if (!v111)
      {
LABEL_223:
        size_t v112 = v179;
        *unint64_t v110 = v179;
        if (v112)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v179, v112, (uint64_t)v110);
          int v179 = 0;
        }
        goto LABEL_225;
      }
      int v149 = *v109;
      if ((v149 - 4) > 0x1E)
      {
        if ((v149 - 3) >= 0xFFFFFFFE) {
          int v153 = v109;
        }
        else {
          int v153 = 0;
        }
        if ((v149 - 3) < 0xFFFFFFFE)
        {
          if (v149 == 3) {
            *((void *)v109 + 1) = 0;
          }
          goto LABEL_223;
        }
        unint64_t v151 = (unint64_t)(v153 + 8);
      }
      else
      {
        if ((v109[1] & 0x7F) != 2 && !*((_DWORD *)v109 + 3)) {
          goto LABEL_223;
        }
        uint64_t v150 = *((void *)v109 + 2);
        if ((v150 & 4) == 0) {
          goto LABEL_223;
        }
        unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFF8;
        if (!v151) {
          goto LABEL_223;
        }
      }
      v180[0].i64[0] = (uint64_t)v110;
      sub_1CC5FA668(v151 + 16, v180);
      goto LABEL_223;
    }
    while (1)
    {
      int v51 = *(unsigned __int8 *)(v26 + 16);
      uint64_t v52 = (v51 - 33);
      if (v52 > 0x37) {
        goto LABEL_139;
      }
      if (((1 << (v51 - 33)) & 0x8000000000041) != 0) {
        break;
      }
      if (((1 << (v51 - 33)) & 0x808001C8000010) != 0) {
        return 0;
      }
      if (v52 == 28)
      {
        if ((*(_WORD *)(v26 + 18) & 0x301) != 0) {
          return 0;
        }
        goto LABEL_138;
      }
LABEL_139:
      if (v51 > 35)
      {
        if (v51 == 84)
        {
          uint64_t v54 = *(void *)(v26 + 64);
          if (v54 && (*(unsigned char *)(v54 + 16) & 0x20) != 0) {
            goto LABEL_154;
          }
          uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v26, 37);
          if (!result) {
            return result;
          }
          int v51 = *(unsigned __int8 *)(v26 + 16);
        }
        else if (v51 == 36 || v51 == 38)
        {
          if ((*(_WORD *)(v26 + 18) & 1) == 0) {
            return 0;
          }
          goto LABEL_161;
        }
      }
      else if (v51 == 34)
      {
        return 0;
      }
      uint64_t v55 = (v51 - 33);
      if (v55 <= 0x37)
      {
        if (((1 << v55) & 0x808001D0000010) != 0) {
          return 0;
        }
        if (((1 << v55) & 0x8000000000041) == 0)
        {
          if (v55 == 27 && (*(_WORD *)(v26 + 18) & 0x301) != 0) {
            return 0;
          }
          goto LABEL_161;
        }
LABEL_154:
        uint64_t v56 = *(void *)(v26 + 64);
        if (!v56 || (*(unsigned char *)(v56 + 17) & 0x30) == 0)
        {
          int v57 = *(_DWORD *)(v26 + 20);
          if (v57 < 0)
          {
            uint64_t v59 = v26 - 32 * (v57 & 0x7FFFFFF);
            uint64_t v62 = *(void *)(v59 - 8);
            uint64_t v60 = v59 - 8;
            uint64_t v61 = v62;
            if (v62)
            {
              uint64_t v63 = -v61;
              do
              {
                unsigned int v64 = *(_DWORD *)(*(void *)(v60 + v63) + 8);
                BOOL v20 = v64 > 7;
                int v65 = (1 << v64) & 0x83;
                if (v20 || v65 == 0) {
                  return 0;
                }
                v63 += 16;
              }
              while (v63);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v26, 45) & 1) == 0)
          {
            uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v26, 44);
            if (!result) {
              return result;
            }
          }
        }
      }
LABEL_161:
      if (v24 == *(void **)(v16 + 48)) {
        return 0;
      }
      int v24 = (void *)*v24;
      uint64_t v26 = (uint64_t)(v24 - 3);
      if (v24) {
        uint64_t v58 = v24 - 3;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v24 && *((unsigned char *)v58 + 16) == 61) {
        goto LABEL_65;
      }
    }
    uint64_t v53 = *(void *)(v26 + 64);
    if (!v53 || (*(unsigned char *)(v53 + 20) & 4) == 0 && (*(unsigned char *)(v53 + 17) & 0x10) == 0)
    {
      v180[0].i32[0] = 7;
      if (sub_1CC5CB59C(v26, v180[0].i32, 1uLL))
      {
        uint64_t v67 = *(void *)(v26 - 32);
        if (!v67
          || *(unsigned char *)(v67 + 16)
          || *(void *)(v67 + 24) != *(void *)(v26 + 72)
          || *(_DWORD *)(v67 + 36) != 7)
        {
          return 0;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v26, 66) & 1) == 0)
      {
        uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v26, 44);
        if (!result) {
          return result;
        }
      }
    }
LABEL_138:
    int v51 = *(unsigned __int8 *)(v26 + 16);
    goto LABEL_139;
  }
  while (1)
  {
    uint64_t v25 = (void *)*v25;
    uint64_t v26 = (uint64_t)(v25 - 3);
    int v29 = v25 ? (unsigned __int8 *)(v25 - 3) : 0;
    if (!sub_1CBF63B28((uint64_t)v29) && !sub_1CC27D470((uint64_t)v29)) {
      break;
    }
LABEL_60:
    uint64_t result = 0;
    if (v25 == *(void **)(v16 + 48)) {
      return result;
    }
  }
  int v30 = v29[16];
  if (v30 == 77)
  {
    if (*(unsigned char *)(*(void *)v29 + 8) != 15) {
      return 0;
    }
    goto LABEL_60;
  }
  uint64_t result = 0;
  if (v30 == 61) {
    uint64_t v68 = (const llvm::Instruction *)v29;
  }
  else {
    uint64_t v68 = 0;
  }
  if (!v25 || v30 != 61) {
    return result;
  }
  if (*((void *)v68 - 4) != *(void *)(a2 - 32)) {
    return 0;
  }
  char v69 = llvm::Instruction::isSameOperationAs((llvm::Instruction *)a2, v68, 0);
  uint64_t result = 0;
  if (v69) {
    goto LABEL_190;
  }
  return result;
}

void sub_1CCA80BF0(uint64_t a1, uint64_t a2, llvm::PointerType **a3)
{
  v33[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned __int8 **)(a2 - 32);
  unsigned int v7 = *(_DWORD *)(*(void *)v6 + 8);
  if ((v7 & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(**(void **)(*(void *)v6 + 16) + 8);
  }
  unsigned __int8 v8 = (llvm::Type *)(v7 >> 8);
  uint64_t v31 = v33;
  uint64_t v32 = 0x800000000;
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    v33[0] = 0;
    v33[1] = v9;
    int v10 = 1;
  }
  else
  {
    if ((*(unsigned char *)(a2 + 23) & 0x20) == 0) {
      goto LABEL_8;
    }
    int v10 = 0;
  }
  LODWORD(v32) = v10;
  llvm::Value::getAllMetadata((unsigned char *)a2, (uint64_t)&v31);
LABEL_8:
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v12 = llvm::PointerType::get(*a3, v8);
  __int16 v28 = 257;
  if (*(void *)v6 != v12)
  {
    if (v6[16] <= 0x14u)
    {
      uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(v11 + 72) + 224))(*(void *)(v11 + 72), 49, v6, v12);
      if (v6) {
        BOOL v16 = v6[16] >= 0x1Cu;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(v11 + 80) + 16))(*(void *)(v11 + 80), v6, v27, *(void *)(v11 + 48), *(void *)(v11 + 56));
        uint64_t v24 = *(unsigned int *)(v11 + 8);
        if (v24)
        {
          uint64_t v25 = *(void *)v11;
          uint64_t v26 = *(void *)v11 + 16 * v24;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
            v25 += 16;
          }
          while (v25 != v26);
        }
      }
    }
    else
    {
      __int16 v30 = 257;
      uint64_t v6 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v6, v12, &v29, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(v11 + 80) + 16))(*(void *)(v11 + 80), v6, v27, *(void *)(v11 + 48), *(void *)(v11 + 56));
      uint64_t v13 = *(unsigned int *)(v11 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)v11;
        uint64_t v15 = *(void *)v11 + 16 * v13;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
          v14 += 16;
        }
        while (v14 != v15);
      }
    }
  }
  uint64_t v17 = sub_1CC27BF8C((uint64_t *)v11, (uint64_t)a3, (uint64_t)v6, (*(_WORD *)(a2 + 18) >> 1) & 0x3F | 0x100u, *(_WORD *)(a2 + 18) & 1);
  char v18 = *(unsigned char *)(a2 + 60);
  *((_WORD *)v17 + 9) = *((_WORD *)v17 + 9) & 0xFC7F | *(_WORD *)(a2 + 18) & 0x380;
  *((unsigned char *)v17 + 60) = v18;
  BOOL v19 = v31;
  if (v32)
  {
    uint64_t v20 = 16 * v32;
    uint64_t v21 = (llvm::MDNode **)((char *)v31 + 8);
    do
    {
      unsigned int v22 = *((_DWORD *)v21 - 2);
      if (v22 <= 0x19 && ((1 << v22) & 0x20007AF) != 0) {
        llvm::Instruction::setMetadata(v17, v22, *v21);
      }
      v21 += 2;
      v20 -= 16;
    }
    while (v20);
    BOOL v19 = v31;
  }
  if (v19 != v33) {
    free(v19);
  }
}

uint64_t sub_1CCA80EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
    if (v3 >= 0x1C && v3 - 83 >= 0xFFFFFFFE)
    {
      uint64_t v5 = *(void *)(a2 - 64);
      if (v5) {
        BOOL v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      }
      else {
        BOOL v6 = 0;
      }
      if (v6)
      {
        uint64_t v2 = 0;
        **(void **)(a1 + 8) = v5;
        uint64_t v7 = *(void *)(a2 - 32);
        if (v7 && *(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
        {
          **(void **)(a1 + 16) = v7;
          **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

BOOL sub_1CCA80F5C(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x7FFFFFE) == 0) {
    return 0;
  }
  uint64_t v9 = v4 & 0x7FFFFFF;
  if (v9 == 1)
  {
    unsigned int v10 = 1;
  }
  else
  {
    unsigned int v10 = 1;
    while (1)
    {
      uint64_t v11 = *(void *)(a2 - 32 * v9 + 32 * v10);
      if (!v11 || *(unsigned char *)(v11 + 16) != 16) {
        break;
      }
      uint64_t v13 = *(unsigned int *)(v11 + 32);
      if (v13 > 0x40)
      {
        int v14 = 0;
        int64_t v15 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          if (v15-- < 1) {
            break;
          }
          unint64_t v17 = *(void *)(*(void *)(v11 + 24) + 8 * v15);
          v14 += __clz(v17);
        }
        while (!v17);
        int v18 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0) {
          int v18 = 0;
        }
        if (v14 + v18 != v13) {
          break;
        }
      }
      else if (*(void *)(v11 + 24))
      {
        break;
      }
      if (++v10 == v9)
      {
        unsigned int v10 = v9;
        break;
      }
    }
  }
  *a4 = v10;
  uint64_t v19 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v10 == v19) {
    return 0;
  }
  uint64_t v20 = a2 - 32 * v19;
  if (*(unsigned __int8 *)(*(void *)(v20 + 32 * v10) + 16) < 0x15u) {
    return 0;
  }
  int v95 = v97;
  uint64_t v96 = 0x400000000;
  if (v10 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v10)
  {
    uint64_t v23 = (uint64_t *)(v20 + 32);
    uint64_t v24 = 32 * v10;
    uint64_t v25 = v97;
    do
    {
      uint64_t v26 = *v23;
      v23 += 4;
      *v25++ = v26;
      v24 -= 32;
    }
    while (v24);
  }
  LODWORD(v96) = v10;
  uint64_t v27 = *(void *)(a2 + 64);
  if (*(unsigned char *)(v27 + 8) == 19) {
    goto LABEL_163;
  }
  uint64_t IndexedType = llvm::GetElementPtrInst::getIndexedType(v27, (uint64_t)v95, v10);
  if (!IndexedType) {
    goto LABEL_163;
  }
  int v29 = (llvm::Type *)IndexedType;
  unsigned int v30 = *(unsigned __int8 *)(IndexedType + 8);
  if (v30 > 0x11)
  {
LABEL_131:
    if ((v30 & 0xFE) != 0x12 && v30 != 21) {
      goto LABEL_163;
    }
LABEL_129:
    if (!llvm::Type::isSizedDerivedType(IndexedType, 0)) {
      goto LABEL_163;
    }
    goto LABEL_33;
  }
  if (((1 << v30) & 0xAC7F) == 0)
  {
    if (((1 << v30) & 0x30000) != 0) {
      goto LABEL_129;
    }
    goto LABEL_131;
  }
LABEL_33:
  uint64_t v31 = (llvm::DataLayout *)a1[10];
  uint64_t v32 = sub_1CB83544C((uint64_t)v31, (uint64_t)v29);
  char Alignment = llvm::DataLayout::getAlignment(v31, v29, 1);
  uint64_t v34 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (*a4 + 1 != v34 && (*(unsigned char *)(a2 + 17) & 2) == 0) {
    goto LABEL_163;
  }
  unint64_t v88 = ((1 << Alignment) + ((unint64_t)(v32 + 7) >> 3) - 1) & -(1 << Alignment);
  uint64_t v35 = *(void *)(a2 - 32 * v34);
  uint64_t v89 = (const llvm::DataLayout *)&v93;
  int v90 = (const llvm::DataLayout *)&v93;
  uint64_t v91 = 4;
  LODWORD(v92) = 0;
  unint64_t v98 = &v101;
  unsigned int v100 = 4;
  uint64_t v101 = v35;
  unsigned int v36 = 1;
  while (1)
  {
    uint64_t v37 = (llvm::Value *)v98[v36 - 1];
    unsigned int v99 = v36 - 1;
    uint64_t v38 = llvm::Value::stripPointerCasts(v37);
    uint64_t v39 = v38;
    uint64_t v40 = v90;
    uint64_t v41 = HIDWORD(v91);
    if (v90 == v89)
    {
      if (HIDWORD(v91))
      {
        uint64_t v42 = 0;
        uint64_t v43 = 8 * HIDWORD(v91);
        uint64_t v44 = v90;
        while (*(llvm::Value **)v44 != v38)
        {
          if (*(void *)v44 == -2) {
            uint64_t v42 = (llvm::Value **)v44;
          }
          uint64_t v44 = (const llvm::DataLayout *)((char *)v44 + 8);
          v43 -= 8;
          if (!v43)
          {
            if (!v42) {
              goto LABEL_44;
            }
            *uint64_t v42 = v38;
            LODWORD(v92) = v92 - 1;
            goto LABEL_68;
          }
        }
        goto LABEL_97;
      }
LABEL_44:
      unsigned int v45 = v91;
      if (HIDWORD(v91) < v91)
      {
        ++HIDWORD(v91);
        *((void *)v90 + v41) = v38;
        goto LABEL_68;
      }
    }
    else
    {
      unsigned int v45 = v91;
    }
    if (3 * v45 <= 4 * (HIDWORD(v91) - (int)v92))
    {
      if (v45 >= 0x40) {
        v45 *= 2;
      }
      else {
        unsigned int v45 = 128;
      }
LABEL_120:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v89, v45);
      unsigned int v45 = v91;
      uint64_t v40 = v90;
      goto LABEL_49;
    }
    if (v45 - HIDWORD(v91) < v45 >> 3) {
      goto LABEL_120;
    }
LABEL_49:
    unsigned int v46 = v45 - 1;
    unsigned int v47 = (v45 - 1) & ((v39 >> 4) ^ (v39 >> 9));
    int v48 = (llvm::Value **)((char *)v40 + 8 * v47);
    int v49 = *v48;
    if (*v48 != (llvm::Value *)-1)
    {
      uint64_t v50 = 0;
      int v51 = 1;
      while (v49 != v39)
      {
        if (v50) {
          BOOL v52 = 0;
        }
        else {
          BOOL v52 = v49 == (llvm::Value *)-2;
        }
        if (v52) {
          uint64_t v50 = v48;
        }
        unsigned int v53 = v47 + v51++;
        unsigned int v47 = v53 & v46;
        int v48 = (llvm::Value **)((char *)v40 + 8 * (v53 & v46));
        int v49 = *v48;
        if (*v48 == (llvm::Value *)-1) {
          goto LABEL_61;
        }
      }
      goto LABEL_97;
    }
    uint64_t v50 = 0;
LABEL_61:
    if (v50) {
      uint64_t v54 = v50;
    }
    else {
      uint64_t v54 = v48;
    }
    if (*v54 == v39) {
      goto LABEL_97;
    }
    if (*v54 == (llvm::Value *)-2) {
      LODWORD(v92) = v92 - 1;
    }
    else {
      ++HIDWORD(v91);
    }
    char *v54 = v39;
LABEL_68:
    int v55 = *((unsigned __int8 *)v39 + 16);
    if (!v39 || v55 != 85) {
      break;
    }
    if (v99 >= (unint64_t)v100) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v98[v99] = *((void *)v39 - 8);
    unsigned int v56 = v99 + 1;
    unsigned int v99 = v56;
    if (v56 >= v100) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v98[v56] = *((void *)v39 - 4);
LABEL_73:
    ++v99;
LABEL_97:
    int v68 = 3;
LABEL_98:
    BOOL v62 = v68 == 3;
    if (v68 == 3)
    {
      unsigned int v36 = v99;
      if (v99) {
        continue;
      }
    }
    goto LABEL_137;
  }
  if (v39 && v55 == 83)
  {
    int v57 = *((_DWORD *)v39 + 5);
    if ((v57 & 0x40000000) != 0)
    {
      uint64_t v59 = (char *)*((void *)v39 - 1);
      uint64_t v58 = v57 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v58 = v57 & 0x7FFFFFF;
      uint64_t v59 = (char *)v39 - 32 * v58;
    }
    sub_1CBF74A6C((uint64_t)&v98, (uint64_t)&v98[v99], v59, &v59[32 * v58]);
    goto LABEL_97;
  }
  if (v39 && v55 == 1)
  {
    if (llvm::GlobalValue::isInterposable(v39)) {
      goto LABEL_136;
    }
    if (v99 >= (unint64_t)v100) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v98[v99] = *((void *)v39 - 4);
    goto LABEL_73;
  }
  if (!v39 || v55 != 59)
  {
    unsigned int v69 = 0;
    if (v39 && v55 == 3)
    {
      if ((*((_DWORD *)v39 + 5) & 0x7FFFFFF) != 0
        && (llvm::GlobalValue::isInterposable(v39) & 1) == 0
        && (*((unsigned char *)v39 + 80) & 3) == 1)
      {
        uint64_t v70 = (llvm::Type *)*((void *)v39 + 3);
        uint64_t v71 = sub_1CB83544C((uint64_t)v31, (uint64_t)v70);
        BOOL v73 = v72 == 1;
        char v75 = llvm::DataLayout::getAlignment(v31, v70, 1);
        if (v73) {
        if ((((1 << v75) + ((unint64_t)(v71 + 7) >> 3) - 1) & -(1 << v75)) > v88)
        }
          unsigned int v69 = 1;
        else {
          unsigned int v69 = 3;
        }
      }
      else
      {
        unsigned int v69 = 1;
      }
    }
    if (v69 <= 1) {
      int v68 = 1;
    }
    else {
      int v68 = v69;
    }
    goto LABEL_98;
  }
  uint64_t v60 = *((void *)v39 + 8);
  unsigned int v61 = *(unsigned __int8 *)(v60 + 8);
  if (v61 > 0x11) {
    goto LABEL_122;
  }
  if (((1 << v61) & 0xAC7F) == 0)
  {
    if (((1 << v61) & 0x30000) != 0) {
      goto LABEL_88;
    }
LABEL_122:
    if ((v61 & 0xFE) != 0x12 && v61 != 21)
    {
LABEL_136:
      BOOL v62 = 0;
      goto LABEL_137;
    }
LABEL_88:
    if (!llvm::Type::isSizedDerivedType(v60, 0)) {
      goto LABEL_136;
    }
  }
  BOOL v62 = 0;
  uint64_t v63 = *((void *)v39 - 4);
  if (v63 && *(unsigned char *)(v63 + 16) == 16)
  {
    unsigned int v64 = (llvm::Type *)*((void *)v39 + 8);
    sub_1CB83544C((uint64_t)v31, (uint64_t)v64);
    BOOL v66 = v65 == 1;
    llvm::DataLayout::getAlignment(v31, v64, 1);
    if (v66) {
    if (*(_DWORD *)(v63 + 32) > 0x7Fu)
    }
      operator new[]();
    operator new[]();
  }
LABEL_137:
  if (v98 != &v101) {
    free(v98);
  }
  if (v90 != v89) {
    free(v90);
  }
  if (!v62)
  {
LABEL_163:
    BOOL v21 = 0;
    goto LABEL_164;
  }
  int v77 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  unsigned int v78 = *a4 + 1;
  do
  {
    BOOL v21 = v77 == v78;
    if (v77 == v78) {
      break;
    }
    uint64_t v79 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v78);
    if (a3)
    {
      uint64_t v80 = a3;
      if (*(void *)(a3 + 40)) {
        continue;
      }
    }
    BOOL v87 = v79 && *(unsigned __int8 *)(v79 + 16) >= 0x1Cu;
    if (!v87
      || (uint64_t v80 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v78), !*(void *)(v79 + 40)))
    {
      uint64_t v80 = 0;
    }
    uint64_t v81 = (const llvm::DataLayout *)a1[7];
    uint64_t v82 = a1[9];
    uint64_t v89 = (const llvm::DataLayout *)a1[10];
    int v90 = v81;
    uint64_t v91 = v80;
    uint64_t v92 = v82;
    uint64_t v93 = 0;
    char v94 = 1;
    sub_1CC16089C((uint64_t *)v79, 0, &v89, (uint64_t)&v98);
    unsigned int v83 = v99;
    char v84 = v99 - 1;
    uint64_t v85 = &v98[(v99 - 1) >> 6];
    if (v99 < 0x41) {
      uint64_t v85 = (uint64_t *)&v98;
    }
    uint64_t v86 = *v85;
    if (v102 >= 0x41 && v101)
    {
      MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
      unsigned int v83 = v99;
    }
    if (v83 >= 0x41 && v98) {
      MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
    }
    ++v78;
  }
  while (((1 << v84) & v86) != 0);
LABEL_164:
  if (v95 != v97) {
    free(v95);
  }
  return v21;
}

llvm::Value *sub_1CCA81A4C(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v8 = (llvm *)*((void *)a2 - 8);
  uint64_t v9 = (llvm::Constant *)*((void *)a2 - 4);
  long long v10 = *(_OWORD *)(a1 + 120);
  long long v11 = *(_OWORD *)(a1 + 104);
  long long v235 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)uint64_t v236 = v11;
  *(void *)&long long v237 = *((void *)&v10 + 1);
  *(void *)&v236[16] = a2;
  unint64_t v12 = sub_1CC02B6E8(v8, v9, (uint64_t)&v235, 3, a5, a6);
  if (v12) {
    goto LABEL_2;
  }
  if (sub_1CC9D1CF4(a1, a2)) {
    return a2;
  }
  unint64_t Neg = sub_1CC9D812C(a1, (unsigned __int8 *)a2);
  if (!Neg)
  {
    unint64_t Neg = sub_1CC9D6B70(a1, (uint64_t)a2);
    if (!Neg)
    {
      unint64_t v12 = (llvm::Value *)sub_1CC9D337C(a1, (unsigned __int8 *)a2);
      if (v12)
      {
LABEL_2:
        uint64_t v13 = v12;
        uint64_t v14 = a1;
        int64_t v15 = a2;
        return (llvm::Value *)sub_1CC9D3C84(v14, v15, v13);
      }
      uint64_t v19 = *((void *)a2 - 8);
      uint64_t BinaryIntrinsic = *((void *)a2 - 4);
      BOOL v21 = *(llvm::Type **)a2;
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        BOOL v21 = (llvm::Type *)**((void **)v21 + 2);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v21);
      if (sub_1CBF687D0((uint64_t)&v235, (llvm::Constant *)BinaryIntrinsic))
      {
        if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
        {
          uint64_t v45 = 0;
          uint64_t v44 = &byte_1CFBCE98E;
          goto LABEL_38;
        }
        uint64_t v27 = ***(void ***)a2;
        uint64_t v28 = *(void *)(v27 + 152);
        uint64_t v29 = *(unsigned int *)(v27 + 168);
        if (v29)
        {
          LODWORD(v30) = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v31 = (llvm::Instruction **)(v28 + 16 * v30);
          uint64_t v32 = *v31;
          if (*v31 == a2)
          {
LABEL_37:
            uint64_t v43 = v31[1];
            uint64_t v46 = *(void *)v43;
            uint64_t v44 = (char *)v43 + 16;
            uint64_t v45 = v46;
LABEL_38:
            *(_WORD *)&v236[16] = 261;
            *(void *)&long long v235 = v44;
            *((void *)&v235 + 1) = v45;
            unint64_t Neg = (unint64_t)llvm::BinaryOperator::CreateNeg((llvm::BinaryOperator *)v19, (llvm::Value *)&v235, 0, v25);
            char v47 = *((unsigned char *)a2 + 17);
LABEL_39:
            if ((v47 & 4) == 0) {
              return (llvm::Value *)Neg;
            }
            goto LABEL_40;
          }
          int v33 = 1;
          while (v32 != (llvm::Instruction *)-4096)
          {
            int v34 = v30 + v33++;
            uint64_t v30 = v34 & (v29 - 1);
            uint64_t v32 = *(llvm::Instruction **)(v28 + 16 * v30);
            if (v32 == a2)
            {
              uint64_t v31 = (llvm::Instruction **)(v28 + 16 * v30);
              goto LABEL_37;
            }
          }
        }
        uint64_t v31 = (llvm::Instruction **)(v28 + 16 * v29);
        goto LABEL_37;
      }
      uint64_t v239 = 0;
      int v35 = *((unsigned __int8 *)a2 + 16);
      if (v35 == 45)
      {
        uint64_t v36 = *((void *)a2 - 8);
        int v37 = *(unsigned __int8 *)(v36 + 16);
        if (v37 == 5)
        {
          if (*(_WORD *)(v36 + 18) != 25) {
            goto LABEL_60;
          }
          uint64_t v48 = v36 - 32 * (*(_DWORD *)(v36 + 20) & 0x7FFFFFF);
          uint64_t v38 = *(void **)v48;
          if (!*(void *)v48) {
            goto LABEL_60;
          }
          uint64_t v39 = *(unsigned __int8 **)(v48 + 32);
          if (!v39) {
            goto LABEL_60;
          }
        }
        else
        {
          if (v37 != 53) {
            goto LABEL_60;
          }
          uint64_t v38 = *(void **)(v36 - 64);
          if (!v38) {
            goto LABEL_60;
          }
          uint64_t v39 = *(unsigned __int8 **)(v36 - 32);
          if (!v39 || v39[16] > 0x14u) {
            goto LABEL_60;
          }
        }
        int v49 = (unsigned __int8 *)*((void *)a2 - 4);
        if (!v49 || v49[16] > 0x14u) {
          goto LABEL_60;
        }
      }
      else
      {
        if (v35 != 5 || *((_WORD *)a2 + 9) != 17) {
          goto LABEL_60;
        }
        uint64_t v40 = (void *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        uint64_t v41 = *v40;
        int v42 = *(unsigned __int8 *)(*v40 + 16);
        if (v42 == 5)
        {
          if (*(_WORD *)(v41 + 18) != 25) {
            goto LABEL_60;
          }
          uint64_t v50 = v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF);
          uint64_t v38 = *(void **)v50;
          if (!*(void *)v50) {
            goto LABEL_60;
          }
          uint64_t v39 = *(unsigned __int8 **)(v50 + 32);
          if (!v39) {
            goto LABEL_60;
          }
        }
        else
        {
          if (v42 != 53) {
            goto LABEL_60;
          }
          uint64_t v38 = *(void **)(v41 - 64);
          if (!v38) {
            goto LABEL_60;
          }
          uint64_t v39 = *(unsigned __int8 **)(v41 - 32);
          if (!v39 || v39[16] > 0x14u) {
            goto LABEL_60;
          }
        }
        int v49 = (unsigned __int8 *)v40[4];
        if (!v49) {
          goto LABEL_60;
        }
      }
      long long v235 = (unint64_t)&v239;
      if (sub_1CBF5295C((uint64_t)&v235, (llvm::Constant *)v49))
      {
        Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v49, (llvm::Constant *)v39, 0, 0);
        uint64_t v52 = *((void *)a2 - 8);
        *(_WORD *)&v236[16] = 257;
        unsigned int v53 = llvm::BinaryOperator::Create(17, v38, (uint64_t)Shl, (const char **)&v235, 0);
        unint64_t Neg = (unint64_t)v53;
        char v54 = *((unsigned char *)a2 + 17);
        if ((v54 & 2) != 0 && (*(unsigned char *)(v52 + 17) & 2) != 0)
        {
          *((unsigned char *)v53 + 17) |= 2u;
          char v54 = *((unsigned char *)a2 + 17);
        }
        if ((v54 & 4) == 0
          || (*(unsigned char *)(v52 + 17) & 4) == 0
          || !llvm::Constant::isNotMinSignedValue((unint64_t)Shl))
        {
          return (llvm::Value *)Neg;
        }
LABEL_40:
        *(unsigned char *)(Neg + 17) |= 4u;
        return (llvm::Value *)Neg;
      }
      int v35 = *((unsigned __int8 *)a2 + 16);
LABEL_60:
      if (v35 == 45)
      {
        int v55 = (void *)*((void *)a2 - 8);
        if (!v55) {
          goto LABEL_84;
        }
        unsigned int v56 = (unsigned __int8 *)*((void *)a2 - 4);
        if (!v56 || v56[16] > 0x14u) {
          goto LABEL_84;
        }
      }
      else
      {
        if (v35 != 5) {
          goto LABEL_84;
        }
        if (*((_WORD *)a2 + 9) != 17) {
          goto LABEL_84;
        }
        int v57 = (void ***)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        int v55 = *v57;
        if (!*v57) {
          goto LABEL_84;
        }
        unsigned int v56 = (unsigned __int8 *)v57[4];
        if (!v56) {
          goto LABEL_84;
        }
      }
      ExactLogBase2 = llvm::ConstantExpr::getExactLogBase2((llvm::ConstantExpr *)v56, v23);
      if (ExactLogBase2)
      {
        uint64_t v59 = ExactLogBase2;
        *(_WORD *)&v236[16] = 257;
        uint64_t v60 = llvm::BinaryOperator::Create(25, v55, (uint64_t)ExactLogBase2, (const char **)&v235, 0);
        unint64_t Neg = (unint64_t)v60;
        char v61 = *((unsigned char *)a2 + 17);
        if ((v61 & 2) != 0)
        {
          *((unsigned char *)v60 + 17) |= 2u;
          char v61 = *((unsigned char *)a2 + 17);
        }
        if ((v61 & 4) == 0) {
          return (llvm::Value *)Neg;
        }
        uint64_t v234 = 0;
        long long v235 = (unint64_t)&v234;
        if (!sub_1CBF5295C((uint64_t)&v235, v59)) {
          return (llvm::Value *)Neg;
        }
        BOOL v62 = v234;
        uint64_t v63 = *((unsigned int *)v234 + 2);
        if (v63 >= 0x41)
        {
          int v64 = 0;
          int64_t v65 = (unint64_t)(v63 + 63) >> 6;
          do
          {
            BOOL v66 = v65-- < 1;
            if (v66) {
              break;
            }
            unint64_t v67 = (unint64_t)(*v234)[v65];
            v64 += __clz(v67);
          }
          while (!v67);
          int v68 = v63 | 0xFFFFFFC0;
          if ((v63 & 0x3F) == 0) {
            int v68 = 0;
          }
          if ((v63 - v64 - v68) > 0x40) {
            goto LABEL_40;
          }
          BOOL v62 = (llvm::ConstantInt ***)*v234;
        }
        if (*v62 == (llvm::ConstantInt **)(v63 - 1)) {
          return (llvm::Value *)Neg;
        }
        goto LABEL_40;
      }
LABEL_84:
      uint64_t v69 = *(void *)(v19 + 8);
      if (v69)
      {
        if (!*(void *)(v69 + 8) && sub_1CCA8A344((llvm::Constant *)BinaryIntrinsic))
        {
          uint64_t v70 = llvm::Negator::Negate(1, (uint64_t **)v19, (void *)a1);
          if (v70)
          {
            int v72 = (llvm::Instruction *)v70;
            BOOL v73 = *(llvm::ConstantFP **)BinaryIntrinsic;
            if ((*(_DWORD *)(*(void *)BinaryIntrinsic + 8) & 0xFE) == 0x12) {
              unsigned int v74 = *(unsigned __int8 *)(**((void **)v73 + 2) + 8);
            }
            else {
              unsigned int v74 = *(_DWORD *)(*(void *)BinaryIntrinsic + 8);
            }
            if (v74 <= 6) {
              Zero = llvm::ConstantFP::getZero(v73, (llvm::Type *)1, v24);
            }
            else {
              Zero = llvm::Constant::getNullValue(v73, v71, v24);
            }
            int v77 = Zero;
            unsigned int v78 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)BinaryIntrinsic, v76);
            if (!v78)
            {
              uint64_t v226 = *(void ***)v77;
              if (*(void *)v77)
              {
                uint64_t v239 = v77;
                uint64_t v240 = (llvm::ConstantInt ****)BinaryIntrinsic;
                uint64_t v227 = **v226 + 1512;
                LODWORD(v235) = 15;
                *((void *)&v235 + 1) = &v239;
                *(void *)uint64_t v236 = 2;
                *(_OWORD *)&v236[8] = 0u;
                long long v237 = 0u;
                uint64_t v238 = 0;
                unsigned int v78 = (llvm::Instruction *)sub_1CC56C20C(v227, (uint64_t)v226, (unsigned __int8 *)&v235);
              }
              else
              {
                unsigned int v78 = 0;
              }
            }
            if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
            {
              uint64_t v104 = 0;
              uint64_t v103 = &byte_1CFBCE98E;
              goto LABEL_140;
            }
            uint64_t v79 = ***(void ***)a2;
            uint64_t v80 = *(void *)(v79 + 152);
            uint64_t v81 = *(unsigned int *)(v79 + 168);
            if (v81)
            {
              LODWORD(v82) = (v81 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              unsigned int v83 = (llvm::Instruction **)(v80 + 16 * v82);
              char v84 = *v83;
              if (*v83 == a2)
              {
LABEL_139:
                unsigned int v102 = v83[1];
                uint64_t v105 = *(void *)v102;
                uint64_t v103 = (char *)v102 + 16;
                uint64_t v104 = v105;
LABEL_140:
                *(_WORD *)&v236[16] = 261;
                *(void *)&long long v235 = v103;
                *((void *)&v235 + 1) = v104;
                uint64_t v93 = (const char **)&v235;
                char v94 = 17;
                uint64_t v92 = v72;
                return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
              }
              int v85 = 1;
              while (v84 != (llvm::Instruction *)-4096)
              {
                int v86 = v82 + v85++;
                uint64_t v82 = v86 & (v81 - 1);
                char v84 = *(llvm::Instruction **)(v80 + 16 * v82);
                if (v84 == a2)
                {
                  unsigned int v83 = (llvm::Instruction **)(v80 + 16 * v82);
                  goto LABEL_139;
                }
              }
            }
            unsigned int v83 = (llvm::Instruction **)(v80 + 16 * v81);
            goto LABEL_139;
          }
        }
      }
      unint64_t Neg = (unint64_t)sub_1CC9D74E0(a1, a2, (uint64_t)v24, (uint64_t)v25, v26);
      if (Neg) {
        return (llvm::Value *)Neg;
      }
      unint64_t v12 = sub_1CCA8330C((uint64_t)a2, *(void *)(a1 + 24));
      if (v12) {
        goto LABEL_2;
      }
      if (*(unsigned __int8 *)(BinaryIntrinsic + 16) <= 0x14u)
      {
        uint64_t v88 = *(void *)(v19 + 8);
        if (v88)
        {
          if (!*(void *)(v88 + 8))
          {
            int v99 = *(unsigned __int8 *)(v19 + 16);
            if (v99 == 5)
            {
              if (*(_WORD *)(v19 + 18) != 13) {
                goto LABEL_105;
              }
              size_t v112 = (uint64_t *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
              uint64_t v100 = *v112;
              if (!*v112) {
                goto LABEL_105;
              }
              uint64_t v101 = v112[4];
              if (!v101) {
                goto LABEL_105;
              }
            }
            else
            {
              if (v99 != 41) {
                goto LABEL_105;
              }
              uint64_t v100 = *(void *)(v19 - 64);
              if (!v100) {
                goto LABEL_105;
              }
              uint64_t v101 = *(void *)(v19 - 32);
              if (!v101 || *(unsigned __int8 *)(v101 + 16) > 0x14u) {
                goto LABEL_105;
              }
            }
            uint64_t v113 = *(void *)(a1 + 24);
            *(_WORD *)&v236[16] = 257;
            uint64_t v114 = sub_1CC09A1EC(v113, v101, BinaryIntrinsic, (uint64_t)&v235, 0, 0);
            int v115 = *((unsigned __int8 *)v114 + 16);
            if (v115 != 45)
            {
              unsigned int v116 = v114;
              if (v115 != 5 || *((_WORD *)v114 + 9) != 17)
              {
                uint64_t v117 = *(void *)(a1 + 24);
                *(_WORD *)&v236[16] = 257;
                uint64_t v92 = sub_1CC09A1EC(v117, v100, BinaryIntrinsic, (uint64_t)&v235, 0, 0);
                __int16 v241 = 257;
                uint64_t v93 = (const char **)&v239;
                char v94 = 13;
                unsigned int v78 = v116;
                return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
              }
            }
          }
        }
      }
LABEL_105:
      if (v19 == BinaryIntrinsic)
      {
        uint64_t v239 = 0;
        uint64_t v234 = 0;
        if (llvm::matchSelectPattern(v19, (uint64_t)&v239, &v234, 0, 0) - 7 <= 1
          || (LODWORD(v235) = 1,
              *((void *)&v235 + 1) = 0,
              *(void *)uint64_t v236 = &v239,
              sub_1CC045310((uint64_t)&v235, v19)))
        {
          uint64_t v92 = v239;
          *(_WORD *)&v236[16] = 257;
          uint64_t v93 = (const char **)&v235;
          char v94 = 17;
          unsigned int v78 = v239;
          return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
        }
      }
      uint64_t v233 = 0;
      uint64_t v234 = 0;
      *((void *)&v235 + 1) = &v234;
      int v89 = *(unsigned __int8 *)(v19 + 16);
      if (v89 == 5)
      {
        if (*(_WORD *)(v19 + 18) != 15) {
          goto LABEL_119;
        }
        if (!sub_1CC03F414((uint64_t)&v235, *(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF))))goto LABEL_119; {
        uint64_t v91 = *(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
        }
        if (!v91) {
          goto LABEL_119;
        }
      }
      else
      {
        if (v89 != 43) {
          goto LABEL_119;
        }
        if (!sub_1CBF535C4((uint64_t)&v235, *(llvm::Constant **)(v19 - 64))) {
          goto LABEL_119;
        }
        uint64_t v91 = *(void *)(v19 - 32);
        if (!v91) {
          goto LABEL_119;
        }
      }
      **((void **)&v235 + 1) = v91;
      if (*(unsigned __int8 *)(BinaryIntrinsic + 16) <= 0x14u)
      {
        uint64_t v106 = *(llvm::ConstantFP **)BinaryIntrinsic;
        if ((*(_DWORD *)(*(void *)BinaryIntrinsic + 8) & 0xFE) == 0x12) {
          unsigned int v107 = *(unsigned __int8 *)(**((void **)v106 + 2) + 8);
        }
        else {
          unsigned int v107 = *(_DWORD *)(*(void *)BinaryIntrinsic + 8);
        }
        uint64_t v108 = v234;
        if (v107 <= 6) {
          NullValue = llvm::ConstantFP::getZero(v106, (llvm::Type *)1, v87);
        }
        else {
          NullValue = llvm::Constant::getNullValue(v106, v90, v87);
        }
        uint64_t v111 = NullValue;
        unsigned int v78 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, (llvm::Constant *)BinaryIntrinsic, v110);
        if (!v78)
        {
          int v228 = *(void ***)v111;
          if (*(void *)v111)
          {
            uint64_t v239 = v111;
            uint64_t v240 = (llvm::ConstantInt ****)BinaryIntrinsic;
            uint64_t v229 = **v228 + 1512;
            LODWORD(v235) = 15;
            *((void *)&v235 + 1) = &v239;
            *(void *)uint64_t v236 = 2;
            *(_OWORD *)&v236[8] = 0u;
            long long v237 = 0u;
            uint64_t v238 = 0;
            unsigned int v78 = (llvm::Instruction *)sub_1CC56C20C(v229, (uint64_t)v228, (unsigned __int8 *)&v235);
          }
          else
          {
            unsigned int v78 = 0;
          }
        }
        *(_WORD *)&v236[16] = 257;
        uint64_t v93 = (const char **)&v235;
        char v94 = 17;
        uint64_t v92 = (llvm::Instruction *)v108;
        return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
      }
LABEL_119:
      *((void *)&v235 + 1) = &v234;
      int v95 = *(unsigned __int8 *)(v19 + 16);
      if (v95 == 5)
      {
        if (*(_WORD *)(v19 + 18) != 15
          || !sub_1CC03F414((uint64_t)&v235, *(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF)))|| (uint64_t v96 = *(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32)) == 0)
        {
LABEL_160:
          *((void *)&v235 + 1) = &v234;
          *(void *)uint64_t v236 = &v233;
          int v118 = *((unsigned __int8 *)a2 + 16);
          if (v118 == 45)
          {
            uint64_t v119 = *((void *)a2 - 8);
            uint64_t v120 = *(void *)(v119 + 8);
            if (!v120 || *(void *)(v120 + 8))
            {
LABEL_163:
              uint64_t v121 = *((void *)a2 - 4);
              uint64_t v122 = *(void *)(v121 + 8);
              if (!v122 || *(void *)(v122 + 8)) {
                goto LABEL_176;
              }
              int v123 = *(unsigned __int8 *)(v121 + 16);
              if (v123 == 5)
              {
                if (*(_WORD *)(v121 + 18) != 15) {
                  goto LABEL_176;
                }
                if (!sub_1CC03F414((uint64_t)&v235, *(llvm::Constant **)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF))))goto LABEL_176; {
                uint64_t v124 = *(void *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF) + 32);
                }
                if (!v124) {
                  goto LABEL_176;
                }
              }
              else
              {
                if (v123 != 43) {
                  goto LABEL_176;
                }
                if (!sub_1CBF535C4((uint64_t)&v235, *(llvm::Constant **)(v121 - 64))) {
                  goto LABEL_176;
                }
                uint64_t v124 = *(void *)(v121 - 32);
                if (!v124) {
                  goto LABEL_176;
                }
              }
              **((void **)&v235 + 1) = v124;
              int v207 = (void **)*((void *)a2 - 8);
              if (!v207)
              {
LABEL_176:
                unsigned int v129 = *(unsigned __int8 *)(v19 + 16);
                if ((v129 < 0x1C
                   || v129 - 41 > 0x11
                   || (unsigned int v130 = (llvm::ConstantExpr *)BinaryIntrinsic, v131 = v19, v129 - 47 >= 2))
                  && ((unsigned int v132 = *(unsigned __int8 *)(BinaryIntrinsic + 16), v132 < 0x1C)
                   || (unsigned int v130 = (llvm::ConstantExpr *)v19, v131 = BinaryIntrinsic, v132 - 41 >= 0x12)))
                {
                  sub_1CC9D3E08(a1, (llvm::ConstantExpr *)v19, v87);
                }
                else
                {
                  __int16 v133 = sub_1CC9D3E08(a1, v130, v87);
                  uint64_t v135 = *(void *)(v131 + 8);
                  if (v135)
                  {
                    if (!*(void *)(v135 + 8))
                    {
                      uint64_t v136 = *(void *)(v131 - 32);
                      if ((llvm::ConstantExpr *)v136 == v130 || (const llvm::detail::DoubleAPFloat *)v136 == v133)
                      {
                        int v137 = *(unsigned __int8 *)(v131 + 16);
                        if ((v137 - 47) <= 1)
                        {
                          uint64_t BinaryIntrinsic = *(void *)(v131 - 64);
                          if ((*(unsigned char *)(v131 + 17) & 2) == 0)
                          {
                            if (v137 == 47) {
                              uint64_t v138 = 22;
                            }
                            else {
                              uint64_t v138 = 23;
                            }
                            uint64_t v139 = *(void *)(a1 + 24);
                            *(_WORD *)&v236[16] = 257;
                            unsigned int v78 = sub_1CB844E98(v139, v138, BinaryIntrinsic, v136, (uint64_t)&v235, 0);
                            if ((llvm::ConstantExpr *)v136 == v130)
                            {
                              *(_WORD *)&v236[16] = 257;
                              uint64_t v93 = (const char **)&v235;
                              char v94 = 15;
                              uint64_t v92 = (llvm::Instruction *)BinaryIntrinsic;
                              return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
                            }
                            *(_WORD *)&v236[16] = 257;
                            uint64_t v93 = (const char **)&v235;
                            char v94 = 15;
                            uint64_t v92 = v78;
                            goto LABEL_197;
                          }
                          if ((llvm::ConstantExpr *)v136 != v130)
                          {
                            *(_WORD *)&v236[16] = 257;
                            uint64_t v223 = (llvm::Value *)&v235;
                            int v224 = (llvm::Instruction *)BinaryIntrinsic;
                            return llvm::BinaryOperator::CreateNeg(v224, v223, 0, v134);
                          }
LABEL_350:
                          uint64_t v14 = a1;
                          int64_t v15 = a2;
                          uint64_t v13 = (llvm::Value *)BinaryIntrinsic;
                          return (llvm::Value *)sub_1CC9D3C84(v14, v15, v13);
                        }
                      }
                    }
                  }
                }
                int v140 = *(_DWORD *)(*(void *)a2 + 8);
                if ((v140 & 0xFE) == 0x12) {
                  int v140 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
                }
                if (v140 == 269)
                {
                  *(_WORD *)&v236[16] = 257;
                  uint64_t v93 = (const char **)&v235;
                  char v94 = 28;
                  uint64_t v92 = (llvm::Instruction *)v19;
LABEL_197:
                  unsigned int v78 = (llvm::Instruction *)BinaryIntrinsic;
                  return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
                }
                uint64_t v239 = 0;
                *((void *)&v235 + 1) = &v239;
                int v141 = *(unsigned __int8 *)(v19 + 16);
                if (v141 == 5)
                {
                  if (*(_WORD *)(v19 + 18) != 25) {
                    goto LABEL_208;
                  }
                  if (!sub_1CBF5270C((uint64_t)&v235, *(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF))))goto LABEL_208; {
                  uint64_t v142 = *(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
                  }
                  if (!v142) {
                    goto LABEL_208;
                  }
                }
                else if (v141 != 53 {
                       || !sub_1CBF5250C((uint64_t)&v235, *(llvm::Constant **)(v19 - 64))
                }
                       || (uint64_t v142 = *(void *)(v19 - 32)) == 0)
                {
LABEL_208:
                  *((void *)&v235 + 1) = &v239;
                  int v144 = *(unsigned __int8 *)(BinaryIntrinsic + 16);
                  if (v144 == 5)
                  {
                    if (*(_WORD *)(BinaryIntrinsic + 18) != 25) {
                      goto LABEL_222;
                    }
                    if (!sub_1CBF5270C((uint64_t)&v235, *(llvm::Constant **)(BinaryIntrinsic- 32 * (*(_DWORD *)(BinaryIntrinsic + 20) & 0x7FFFFFF))))goto LABEL_222; {
                    uint64_t v145 = *(void *)(BinaryIntrinsic - 32 * (*(_DWORD *)(BinaryIntrinsic + 20) & 0x7FFFFFF) + 32);
                    }
                    if (!v145) {
                      goto LABEL_222;
                    }
                  }
                  else
                  {
                    if (v144 != 53) {
                      goto LABEL_222;
                    }
                    if (!sub_1CBF5250C((uint64_t)&v235, *(llvm::Constant **)(BinaryIntrinsic - 64))) {
                      goto LABEL_222;
                    }
                    uint64_t v145 = *(void *)(BinaryIntrinsic - 32);
                    if (!v145) {
                      goto LABEL_222;
                    }
                  }
                  **((void **)&v235 + 1) = v145;
                  *(_WORD *)&v236[16] = 257;
                  unint64_t Neg = (unint64_t)llvm::BinaryOperator::Create(25, (void *)v19, (uint64_t)v239, (const char **)&v235, 0);
                  uint64_t v143 = BinaryIntrinsic;
LABEL_217:
                  if (Neg)
                  {
                    char v47 = *(unsigned char *)(v143 + 17);
                    char v146 = *((unsigned char *)a2 + 17);
                    if ((v146 & 2) != 0)
                    {
                      *(unsigned char *)(Neg + 17) |= 2u;
                      char v146 = *((unsigned char *)a2 + 17);
                    }
                    if ((v146 & 4) == 0) {
                      return (llvm::Value *)Neg;
                    }
                    goto LABEL_39;
                  }
LABEL_222:
                  *(void *)&long long v235 = &v234;
                  if (sub_1CBC5BE40((void **)&v235, v19)
                    && (uint64_t v239 = (llvm::Instruction *)&v233, (sub_1CBC5BE40((void **)&v239, BinaryIntrinsic) & 1) != 0)
                    || (uint64_t v232 = (llvm::LLVMContext *)&v234, sub_1CBC5BEAC((void **)&v232, v19))
                    && (uint64_t v231 = &v233, sub_1CBC5BEAC(&v231, BinaryIntrinsic)))
                  {
                    uint64_t v147 = *v234;
                    int v148 = *((_DWORD *)*v234 + 2);
                    if ((v148 & 0xFE) == 0x12) {
                      int v148 = *(_DWORD *)(*(void *)v147[2] + 8);
                    }
                    if (v148 == 269
                      && v147 == *v233
                      && ((uint64_t v208 = *(void *)(v19 + 8)) != 0 && !*(void *)(v208 + 8)
                       || (uint64_t v209 = *(void *)(BinaryIntrinsic + 8)) != 0 && !*(void *)(v209 + 8)
                       || v234 == v233))
                    {
                      uint64_t v210 = *(void *)(a1 + 24);
                      *(void *)&long long v235 = "mulBOOL";
                      *(_WORD *)&v236[16] = 259;
                      uint64_t v211 = sub_1CBF52474(v210, v234, (uint64_t)v233, (uint64_t)&v235);
                      uint64_t v212 = *(void *)a2;
                      *(_WORD *)&v236[16] = 257;
                      int v213 = 39;
                      return llvm::CastInst::Create(v213, (uint64_t)v211, v212, (const char **)&v235, 0);
                    }
                  }
                  *(void *)&long long v235 = &v234;
                  if (sub_1CBC5BEAC((void **)&v235, v19)
                    && (uint64_t v239 = (llvm::Instruction *)&v233, (sub_1CBC5BE40((void **)&v239, BinaryIntrinsic) & 1) != 0)
                    || (uint64_t v232 = (llvm::LLVMContext *)&v234, sub_1CBC5BE40((void **)&v232, v19))
                    && (uint64_t v231 = &v233, sub_1CBC5BEAC(&v231, BinaryIntrinsic)))
                  {
                    int v149 = *v234;
                    int v150 = *((_DWORD *)*v234 + 2);
                    if ((v150 & 0xFE) == 0x12) {
                      int v150 = *(_DWORD *)(*(void *)v149[2] + 8);
                    }
                    if (v150 == 269
                      && v149 == *v233
                      && ((uint64_t v214 = *(void *)(v19 + 8)) != 0 && !*(void *)(v214 + 8)
                       || (uint64_t v215 = *(void *)(BinaryIntrinsic + 8)) != 0 && !*(void *)(v215 + 8)))
                    {
                      uint64_t v216 = *(void *)(a1 + 24);
                      *(void *)&long long v235 = "mulBOOL";
                      *(_WORD *)&v236[16] = 259;
                      uint64_t v211 = sub_1CBF52474(v216, v234, (uint64_t)v233, (uint64_t)&v235);
                      uint64_t v212 = *(void *)a2;
                      *(_WORD *)&v236[16] = 257;
                      int v213 = 40;
                      return llvm::CastInst::Create(v213, (uint64_t)v211, v212, (const char **)&v235, 0);
                    }
                  }
                  *(void *)&long long v235 = &v234;
                  if (sub_1CBC5BE40((void **)&v235, v19))
                  {
                    unint64_t v151 = v234;
                    int v152 = *((_DWORD *)*v234 + 2);
                    if ((v152 & 0xFE) == 0x12) {
                      int v152 = *(_DWORD *)(*(void *)(*v234)[2] + 8);
                    }
                    if (v152 == 269)
                    {
                      int v153 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 0, 0);
                      *(_WORD *)&v236[16] = 257;
                      uint64_t v154 = (uint64_t)v151;
                      uint64_t v155 = (uint64_t *)BinaryIntrinsic;
                      return sub_1CC199EFC(v154, v155, (uint64_t)v153, (const char **)&v235, 0, 0);
                    }
                  }
                  *(void *)&long long v235 = &v234;
                  if (sub_1CBC5BE40((void **)&v235, BinaryIntrinsic))
                  {
                    uint64_t v156 = v234;
                    int v157 = *((_DWORD *)*v234 + 2);
                    if ((v157 & 0xFE) == 0x12) {
                      int v157 = *(_DWORD *)(*(void *)(*v234)[2] + 8);
                    }
                    if (v157 == 269)
                    {
                      int v153 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 0, 0);
                      *(_WORD *)&v236[16] = 257;
                      uint64_t v154 = (uint64_t)v156;
LABEL_260:
                      uint64_t v155 = (uint64_t *)v19;
                      return sub_1CC199EFC(v154, v155, (uint64_t)v153, (const char **)&v235, 0, 0);
                    }
                  }
                  *(void *)&long long v235 = &v234;
                  if (sub_1CBC5BEAC((void **)&v235, v19))
                  {
                    int v160 = *((_DWORD *)*v234 + 2);
                    if ((v160 & 0xFE) == 0x12) {
                      int v160 = *(_DWORD *)(*(void *)(*v234)[2] + 8);
                    }
                    if (v160 == 269)
                    {
                      unsigned int v161 = *(unsigned __int8 *)(BinaryIntrinsic + 16);
                      if (v161 != 5 && v161 <= 0x14)
                      {
                        unsigned int v162 = *(llvm::ConstantFP **)BinaryIntrinsic;
                        if ((*(_DWORD *)(*(void *)BinaryIntrinsic + 8) & 0xFE) == 0x12) {
                          unsigned int v163 = *(unsigned __int8 *)(**((void **)v162 + 2) + 8);
                        }
                        else {
                          unsigned int v163 = *(_DWORD *)(*(void *)BinaryIntrinsic + 8);
                        }
                        if (v163 <= 6) {
                          unint64_t v164 = llvm::ConstantFP::getZero(v162, (llvm::Type *)1, v159);
                        }
                        else {
                          unint64_t v164 = llvm::Constant::getNullValue(v162, v158, v159);
                        }
                        BOOL v166 = (llvm::Type **)v164;
                        uint64_t v19 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v164, (llvm::Constant *)BinaryIntrinsic, v165);
                        if (!v19)
                        {
                          int v167 = *v166;
                          if (*v166)
                          {
                            uint64_t v239 = (llvm::Instruction *)v166;
                            uint64_t v240 = (llvm::ConstantInt ****)BinaryIntrinsic;
                            uint64_t v230 = **(void **)v167 + 1512;
                            LODWORD(v235) = 15;
                            *((void *)&v235 + 1) = &v239;
                            *(void *)uint64_t v236 = 2;
                            *(_OWORD *)&v236[8] = 0u;
                            long long v237 = 0u;
                            uint64_t v238 = 0;
                            uint64_t v19 = sub_1CC56C20C(v230, (uint64_t)v167, (unsigned __int8 *)&v235);
                          }
                          else
                          {
                            uint64_t v19 = 0;
                          }
                        }
                        uint64_t v169 = v234;
                        int v153 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v167, v168);
                        *(_WORD *)&v236[16] = 257;
                        uint64_t v154 = (uint64_t)v169;
                        goto LABEL_260;
                      }
                    }
                  }
                  uint64_t v232 = 0;
                  *(void *)&long long v235 = &v234;
                  *((void *)&v235 + 1) = &v232;
                  *(void *)uint64_t v236 = 0;
                  int v170 = *(unsigned __int8 *)(v19 + 16);
                  if (v170 == 5)
                  {
                    if (*(_WORD *)(v19 + 18) != 26) {
                      goto LABEL_297;
                    }
                    uint64_t v178 = v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF);
                    if (!*(void *)v178) {
                      goto LABEL_297;
                    }
                    uint64_t v234 = *(llvm::ConstantInt ****)v178;
                    if (!sub_1CBF5295C((uint64_t)&v235 + 8, *(llvm::Constant **)(v178 + 32))) {
                      goto LABEL_297;
                    }
                  }
                  else
                  {
                    if (v170 != 54) {
                      goto LABEL_297;
                    }
                    if (!*(void *)(v19 - 64)) {
                      goto LABEL_297;
                    }
                    uint64_t v234 = *(llvm::ConstantInt ****)(v19 - 64);
                    if ((sub_1CBF528D8((uint64_t)&v235 + 8, *(unsigned __int8 **)(v19 - 32)) & 1) == 0) {
                      goto LABEL_297;
                    }
                  }
                  uint64_t v179 = *((unsigned int *)v232 + 2);
                  uint64_t v180 = v232;
                  if (v179 >= 0x41)
                  {
                    int v181 = 0;
                    int64_t v182 = (unint64_t)(v179 + 63) >> 6;
                    do
                    {
                      BOOL v66 = v182-- < 1;
                      if (v66) {
                        break;
                      }
                      unint64_t v183 = *(void *)(*(void *)v232 + 8 * v182);
                      v181 += __clz(v183);
                    }
                    while (!v183);
                    int v184 = v179 | 0xFFFFFFC0;
                    if ((v179 & 0x3F) == 0) {
                      int v184 = 0;
                    }
                    if ((v179 - v181 - v184) > 0x40) {
                      goto LABEL_297;
                    }
                    uint64_t v180 = *(llvm::LLVMContext **)v232;
                  }
                  if (*(void *)v180 == v179 - 1)
                  {
                    uint64_t v185 = *(void *)(a1 + 24);
                    uint64_t v186 = v234;
                    *(_WORD *)&v236[16] = 257;
                    unsigned int v187 = *v234;
                    uint64_t Splat = llvm::ConstantInt::get(**v234, v232, v171);
                    if ((v187[1] & 0xFE) == 0x12) {
                      uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v187 + 8) | ((unint64_t)(*((_DWORD *)v187 + 2) == 19) << 32)), (uint64_t)Splat);
                    }
                    uint64_t v92 = sub_1CC5357E8(v185, (uint64_t)v186, (uint64_t)Splat, (uint64_t)&v235, 0);
                    __int16 v241 = 257;
                    uint64_t v93 = (const char **)&v239;
                    char v94 = 28;
                    goto LABEL_197;
                  }
LABEL_297:
                  *(void *)&long long v235 = &v234;
                  *((void *)&v235 + 1) = &v232;
                  *(void *)uint64_t v236 = 0;
                  int v189 = *(unsigned __int8 *)(BinaryIntrinsic + 16);
                  if (v189 == 5)
                  {
                    if (*(_WORD *)(BinaryIntrinsic + 18) != 26) {
                      goto LABEL_317;
                    }
                    uint64_t v191 = BinaryIntrinsic - 32 * (*(_DWORD *)(BinaryIntrinsic + 20) & 0x7FFFFFF);
                    if (!*(void *)v191) {
                      goto LABEL_317;
                    }
                    uint64_t v234 = *(llvm::ConstantInt ****)v191;
                    if (!sub_1CBF5295C((uint64_t)&v235 + 8, *(llvm::Constant **)(v191 + 32))) {
                      goto LABEL_317;
                    }
                  }
                  else if (v189 != 54 {
                         || !*(void *)(BinaryIntrinsic - 64)
                  }
                         || (uint64_t v234 = *(llvm::ConstantInt ****)(BinaryIntrinsic - 64),
                             (sub_1CBF528D8((uint64_t)&v235 + 8, *(unsigned __int8 **)(BinaryIntrinsic - 32)) & 1) == 0))
                  {
LABEL_317:
                    *(_DWORD *)uint64_t v236 = 64;
                    *(void *)&long long v235 = &v234;
                    *((void *)&v235 + 1) = (PrimitiveSizeInBits - 1);
                    *(void *)&v236[16] = &v234;
                    BOOL v202 = sub_1CCA8A448((void **)&v235, *((void *)a2 - 8), PrimitiveSizeInBits - 1);
                    uint64_t v205 = *((void *)a2 - 4);
                    if (v202 && (uint64_t v204 = **(void **)&v236[16], **(void **)&v236[16] == v205)) {
                      BOOL v206 = 1;
                    }
                    else {
                      BOOL v206 = sub_1CCA8A448((void **)&v235, v205, v204)
                    }
                          && **(void **)&v236[16] == *((void *)a2 - 8);
                    if (*(_DWORD *)v236 >= 0x41u && *((void *)&v235 + 1)) {
                      MEMORY[0x1D25D9CB0](*((void *)&v235 + 1), 0x1000C8000313F17);
                    }
                    if (!v206)
                    {
                      unint64_t Neg = (unint64_t)sub_1CC9D8DBC(a1, (uint64_t)a2);
                      if (Neg) {
                        return (llvm::Value *)Neg;
                      }
                      char v220 = *((unsigned char *)a2 + 17);
                      if ((v220 & 4) != 0
                        || (int v221 = llvm::computeOverflowForSignedMul((llvm *)v19, (const llvm::Value *)BinaryIntrinsic, *(const llvm::Value **)(a1 + 80), *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1), v220 = *((unsigned char *)a2 + 17), v221 != 3))
                      {
                        int v222 = 0;
                      }
                      else
                      {
                        v220 |= 4u;
                        *((unsigned char *)a2 + 17) = v220;
                        int v222 = 1;
                      }
                      if ((v220 & 2) != 0
                        || llvm::computeOverflowForUnsignedMul((llvm *)v19, (const llvm::Value *)BinaryIntrinsic, *(const llvm::Value **)(a1 + 80), *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1) != 3)
                      {
                        if (!v222) {
                          return 0;
                        }
                      }
                      else
                      {
                        *((unsigned char *)a2 + 17) |= 2u;
                      }
                      return a2;
                    }
                    uint64_t v217 = *(llvm::IRBuilderBase **)(a1 + 24);
                    uint64_t v218 = (llvm::Value *)v234;
                    Bool = (llvm::Value *)llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)a2, (llvm::LLVMContext *)((*((unsigned __int8 *)a2 + 17) >> 2) & 1), v203);
                    *(_WORD *)&v236[16] = 257;
                    uint64_t BinaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic(v217, 1, v218, Bool, 0, (const llvm::Twine *)&v235);
                    llvm::Value::takeName((int32x2_t ****)BinaryIntrinsic, a2);
                    goto LABEL_350;
                  }
                  uint64_t v192 = *((unsigned int *)v232 + 2);
                  unsigned int v193 = v232;
                  if (v192 >= 0x41)
                  {
                    int v194 = 0;
                    int64_t v195 = (unint64_t)(v192 + 63) >> 6;
                    do
                    {
                      BOOL v66 = v195-- < 1;
                      if (v66) {
                        break;
                      }
                      unint64_t v196 = *(void *)(*(void *)v232 + 8 * v195);
                      v194 += __clz(v196);
                    }
                    while (!v196);
                    int v197 = v192 | 0xFFFFFFC0;
                    if ((v192 & 0x3F) == 0) {
                      int v197 = 0;
                    }
                    if ((v192 - v194 - v197) > 0x40) {
                      goto LABEL_317;
                    }
                    unsigned int v193 = *(llvm::LLVMContext **)v232;
                  }
                  if (*(void *)v193 == v192 - 1)
                  {
                    uint64_t v198 = *(void *)(a1 + 24);
                    uint64_t v199 = v234;
                    *(_WORD *)&v236[16] = 257;
                    uint64_t v200 = *v234;
                    int v201 = llvm::ConstantInt::get(**v234, v232, v190);
                    if ((v200[1] & 0xFE) == 0x12) {
                      int v201 = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v200 + 8) | ((unint64_t)(*((_DWORD *)v200 + 2) == 19) << 32)), (uint64_t)v201);
                    }
                    uint64_t v92 = sub_1CC5357E8(v198, (uint64_t)v199, (uint64_t)v201, (uint64_t)&v235, 0);
                    __int16 v241 = 257;
                    uint64_t v93 = (const char **)&v239;
                    char v94 = 28;
                    unsigned int v78 = (llvm::Instruction *)v19;
                    return llvm::BinaryOperator::Create(v94, v92, (uint64_t)v78, v93, 0);
                  }
                  goto LABEL_317;
                }
                **((void **)&v235 + 1) = v142;
                *(_WORD *)&v236[16] = 257;
                unint64_t Neg = (unint64_t)llvm::BinaryOperator::Create(25, (void *)BinaryIntrinsic, (uint64_t)v239, (const char **)&v235, 0);
                uint64_t v143 = v19;
                goto LABEL_217;
              }
LABEL_373:
              **(void **)uint64_t v236 = v207;
              uint64_t v225 = *(void *)(a1 + 24);
              *(_WORD *)&v236[16] = 257;
              int v224 = sub_1CC09A1EC(v225, (uint64_t)v234, (uint64_t)v233, (uint64_t)&v235, 0, 0);
              __int16 v241 = 257;
              uint64_t v223 = (llvm::Value *)&v239;
              return llvm::BinaryOperator::CreateNeg(v224, v223, 0, v134);
            }
            int v172 = *(unsigned __int8 *)(v119 + 16);
            if (v172 == 5)
            {
              if (*(_WORD *)(v119 + 18) != 15) {
                goto LABEL_163;
              }
              if (!sub_1CC03F414((uint64_t)&v235, *(llvm::Constant **)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF))))goto LABEL_163; {
              uint64_t v173 = *(void *)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF) + 32);
              }
              if (!v173) {
                goto LABEL_163;
              }
            }
            else
            {
              if (v172 != 43) {
                goto LABEL_163;
              }
              if (!sub_1CBF535C4((uint64_t)&v235, *(llvm::Constant **)(v119 - 64))) {
                goto LABEL_163;
              }
              uint64_t v173 = *(void *)(v119 - 32);
              if (!v173) {
                goto LABEL_163;
              }
            }
            **((void **)&v235 + 1) = v173;
            int v207 = (void **)*((void *)a2 - 4);
            if (v207) {
              goto LABEL_373;
            }
            goto LABEL_163;
          }
          if (v118 != 5 || *((_WORD *)a2 + 9) != 17) {
            goto LABEL_176;
          }
          int v125 = (void **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          uint64_t v126 = v125[1];
          if (!v126 || v126[1])
          {
LABEL_174:
            unint64_t v127 = (void **)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
            uint64_t v128 = v127[1];
            if (!v128 || v128[1]) {
              goto LABEL_176;
            }
            int v176 = *((unsigned __int8 *)v127 + 16);
            if (v176 == 5)
            {
              if (*((_WORD *)v127 + 9) != 15) {
                goto LABEL_176;
              }
              if (!sub_1CC03F414((uint64_t)&v235, (llvm::Constant *)v127[-4 * (*((_DWORD *)v127 + 5) & 0x7FFFFFF)]))goto LABEL_176; {
              int v177 = v127[-4 * (*((_DWORD *)v127 + 5) & 0x7FFFFFF) + 4];
              }
              if (!v177) {
                goto LABEL_176;
              }
            }
            else
            {
              if (v176 != 43) {
                goto LABEL_176;
              }
              if (!sub_1CBF535C4((uint64_t)&v235, (llvm::Constant *)*(v127 - 8))) {
                goto LABEL_176;
              }
              int v177 = *(v127 - 4);
              if (!v177) {
                goto LABEL_176;
              }
            }
            **((void **)&v235 + 1) = v177;
            int v207 = (void **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            if (!v207) {
              goto LABEL_176;
            }
            goto LABEL_373;
          }
          int v174 = *((unsigned __int8 *)v125 + 16);
          if (v174 == 5)
          {
            if (*((_WORD *)v125 + 9) != 15) {
              goto LABEL_174;
            }
            if (!sub_1CC03F414((uint64_t)&v235, (llvm::Constant *)v125[-4 * (*((_DWORD *)v125 + 5) & 0x7FFFFFF)]))goto LABEL_174; {
            uint64_t v175 = v125[-4 * (*((_DWORD *)v125 + 5) & 0x7FFFFFF) + 4];
            }
            if (!v175) {
              goto LABEL_174;
            }
          }
          else
          {
            if (v174 != 43) {
              goto LABEL_174;
            }
            if (!sub_1CBF535C4((uint64_t)&v235, (llvm::Constant *)*(v125 - 8))) {
              goto LABEL_174;
            }
            uint64_t v175 = *(v125 - 4);
            if (!v175) {
              goto LABEL_174;
            }
          }
          **((void **)&v235 + 1) = v175;
          int v207 = (void **)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
          if (v207) {
            goto LABEL_373;
          }
          goto LABEL_174;
        }
      }
      else
      {
        if (v95 != 43) {
          goto LABEL_160;
        }
        if (!sub_1CBF535C4((uint64_t)&v235, *(llvm::Constant **)(v19 - 64))) {
          goto LABEL_160;
        }
        uint64_t v96 = *(void *)(v19 - 32);
        if (!v96) {
          goto LABEL_160;
        }
      }
      **((void **)&v235 + 1) = v96;
      uint64_t v240 = &v233;
      int v97 = *(unsigned __int8 *)(BinaryIntrinsic + 16);
      if (v97 == 5)
      {
        if (*(_WORD *)(BinaryIntrinsic + 18) != 15) {
          goto LABEL_160;
        }
        if (!sub_1CC03F414((uint64_t)&v239, *(llvm::Constant **)(BinaryIntrinsic- 32 * (*(_DWORD *)(BinaryIntrinsic + 20) & 0x7FFFFFF))))goto LABEL_160; {
        unint64_t v98 = *(llvm::ConstantInt ****)(BinaryIntrinsic - 32 * (*(_DWORD *)(BinaryIntrinsic + 20) & 0x7FFFFFF) + 32);
        }
        if (!v98) {
          goto LABEL_160;
        }
      }
      else
      {
        if (v97 != 43) {
          goto LABEL_160;
        }
        if (!sub_1CBF535C4((uint64_t)&v239, *(llvm::Constant **)(BinaryIntrinsic - 64))) {
          goto LABEL_160;
        }
        unint64_t v98 = *(llvm::ConstantInt ****)(BinaryIntrinsic - 32);
        if (!v98) {
          goto LABEL_160;
        }
      }
      *uint64_t v240 = v98;
      *(_WORD *)&v236[16] = 257;
      unint64_t Neg = (unint64_t)llvm::BinaryOperator::Create(17, v234, (uint64_t)v233, (const char **)&v235, 0);
      if ((*((unsigned char *)a2 + 17) & 4) == 0 || (*(unsigned char *)(v19 + 17) & 4) == 0) {
        return (llvm::Value *)Neg;
      }
      char v47 = *(unsigned char *)(BinaryIntrinsic + 17);
      goto LABEL_39;
    }
  }
  return (llvm::Value *)Neg;
}

llvm::Value *sub_1CCA8330C(uint64_t a1, uint64_t a2)
{
  char v61 = 0;
  uint64_t v60 = 0;
  unsigned int v56 = &v61;
  *((void *)&v57 + 1) = &v60;
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 45)
  {
    uint64_t v5 = *(void *)(a1 - 64);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6 && !*(void *)(v6 + 8) && sub_1CCA89F30(&v56, v5) && (uint64_t v7 = *(void *)(a1 - 32)) != 0
      || (v8 = *(void *)(a1 - 32), (uint64_t v9 = *(void *)(v8 + 8)) != 0)
      && !*(void *)(v9 + 8)
      && sub_1CCA89F30(&v56, v8)
      && (uint64_t v7 = *(void *)(a1 - 64)) != 0)
    {
      **((void **)&v57 + 1) = v7;
LABEL_54:
      BOOL v49 = (*(unsigned char *)(a1 + 17) & 6) != 0;
      __int16 v59 = 257;
      uint64_t v50 = sub_1CD5A6358(a2, v60, (uint64_t)&v56, 0, v49);
      int v51 = v61;
      uint64_t v52 = v60;
LABEL_57:
      __int16 v59 = 257;
      return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a2, v51, v52, v50, (const llvm::Twine *)&v56, 0);
    }
  }
  else if (v4 == 5 && *(_WORD *)(a1 + 18) == 17)
  {
    uint64_t v11 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    uint64_t v12 = -v11;
    uint64_t v13 = *(void *)(a1 - 32 * v11);
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14)
    {
      if (!*(void *)(v14 + 8))
      {
        int v15 = sub_1CCA89F30(&v56, v13);
        uint64_t v12 = -(uint64_t)(*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        if (v15)
        {
          uint64_t v16 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
          if (v16) {
            goto LABEL_53;
          }
        }
      }
    }
    uint64_t v17 = *(void *)(a1 + 32 * v12 + 32);
    uint64_t v18 = *(void *)(v17 + 8);
    if (v18)
    {
      if (!*(void *)(v18 + 8))
      {
        if (sub_1CCA89F30(&v56, v17))
        {
          uint64_t v16 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
          if (v16)
          {
LABEL_53:
            **((void **)&v57 + 1) = v16;
            goto LABEL_54;
          }
        }
      }
    }
  }
  unsigned int v56 = &v61;
  *((void *)&v57 + 1) = &v60;
  int v19 = *(unsigned __int8 *)(a1 + 16);
  if (v19 == 45)
  {
    uint64_t v20 = *(void *)(a1 - 64);
    uint64_t v21 = *(void *)(v20 + 8);
    if (v21 && !*(void *)(v21 + 8) && sub_1CCA89FF0(&v56, v20) && (uint64_t v22 = *(void *)(a1 - 32)) != 0
      || (uint64_t v23 = *(void *)(a1 - 32), (v24 = *(void *)(v23 + 8)) != 0)
      && !*(void *)(v24 + 8)
      && sub_1CCA89FF0(&v56, v23)
      && (uint64_t v22 = *(void *)(a1 - 64)) != 0)
    {
      **((void **)&v57 + 1) = v22;
LABEL_56:
      BOOL v53 = (*(unsigned char *)(a1 + 17) & 6) != 0;
      __int16 v59 = 257;
      uint64_t v52 = sub_1CD5A6358(a2, v60, (uint64_t)&v56, 0, v53);
      int v51 = v61;
      uint64_t v50 = v60;
      goto LABEL_57;
    }
  }
  else if (v19 == 5 && *(_WORD *)(a1 + 18) == 17)
  {
    uint64_t v25 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    uint64_t v26 = -v25;
    uint64_t v27 = *(void *)(a1 - 32 * v25);
    uint64_t v28 = *(void *)(v27 + 8);
    if (v28)
    {
      if (!*(void *)(v28 + 8))
      {
        int v29 = sub_1CCA89FF0(&v56, v27);
        uint64_t v26 = -(uint64_t)(*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        if (v29)
        {
          uint64_t v30 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
          if (v30) {
            goto LABEL_55;
          }
        }
      }
    }
    uint64_t v31 = *(void *)(a1 + 32 * v26 + 32);
    uint64_t v32 = *(void *)(v31 + 8);
    if (v32)
    {
      if (!*(void *)(v32 + 8))
      {
        if (sub_1CCA89FF0(&v56, v31))
        {
          uint64_t v30 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
          if (v30)
          {
LABEL_55:
            **((void **)&v57 + 1) = v30;
            goto LABEL_56;
          }
        }
      }
    }
  }
  unsigned int v56 = &v61;
  long long v57 = xmmword_1CFB27A60;
  uint64_t v58 = &v60;
  if (sub_1CCA8A0B0((uint64_t)&v56, a1, (uint64_t)&unk_1CFB27000))
  {
    int v33 = *(_DWORD *)(a2 + 96);
    uint64_t v34 = *(void *)(a2 + 88);
    __int16 v35 = *(_WORD *)(a2 + 100);
    char v36 = *(unsigned char *)(a2 + 102);
    int v37 = *(unsigned __int8 *)(a1 + 17) >> 1;
    if (v37 == 127) {
      int v37 = -1;
    }
    *(_DWORD *)(a2 + 96) = v37;
    uint64_t v38 = v61;
    uint64_t v39 = v60;
    __int16 v59 = 257;
    uint64_t v40 = sub_1CB843FF8(a2, (uint64_t)v60, (uint64_t)&v56, 0);
    __int16 v55 = 257;
    uint64_t result = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a2, v38, v39, v40, (const llvm::Twine *)v54, 0);
    *(_DWORD *)(a2 + 96) = v33;
    *(void *)(a2 + 88) = v34;
    *(_WORD *)(a2 + 100) = v35;
    *(unsigned char *)(a2 + 102) = v36;
  }
  else
  {
    unsigned int v56 = &v61;
    long long v57 = xmmword_1CFB27A70;
    uint64_t v58 = &v60;
    if (sub_1CCA8A0B0((uint64_t)&v56, a1, (uint64_t)&unk_1CFB27000))
    {
      int v42 = *(_DWORD *)(a2 + 96);
      uint64_t v43 = *(void *)(a2 + 88);
      __int16 v44 = *(_WORD *)(a2 + 100);
      char v45 = *(unsigned char *)(a2 + 102);
      int v46 = *(unsigned __int8 *)(a1 + 17) >> 1;
      if (v46 == 127) {
        int v46 = -1;
      }
      *(_DWORD *)(a2 + 96) = v46;
      char v47 = v61;
      __int16 v59 = 257;
      uint64_t v48 = sub_1CB843FF8(a2, (uint64_t)v60, (uint64_t)&v56, 0);
      __int16 v55 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a2, v47, v48, v60, (const llvm::Twine *)v54, 0);
      *(_DWORD *)(a2 + 96) = v42;
      *(void *)(a2 + 88) = v43;
      *(_WORD *)(a2 + 100) = v44;
      *(unsigned char *)(a2 + 102) = v45;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *sub_1CCA83748(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a2[16] - 28;
  uint64_t v5 = *((void *)a2 - 8);
  uint64_t v6 = *((void *)a2 - 4);
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v24 = (uint64_t *)&v29;
  if (sub_1CC04C34C(&v24, v5))
  {
    v23[0] = &v28;
    if (sub_1CC04C34C(v23, v6))
    {
      uint64_t v11 = v28;
      uint64_t v9 = v29;
      __int16 v27 = 257;
      char v10 = v4;
      goto LABEL_18;
    }
  }
  if (v5 == v6)
  {
    LODWORD(v24) = 139;
    uint64_t v25 = 0;
    uint64_t v26 = (uint64_t *)&v29;
    if (sub_1CC045310((uint64_t)&v24, v5))
    {
      uint64_t v9 = v29;
      __int16 v27 = 257;
      char v10 = v4;
      uint64_t v11 = (uint64_t)v29;
LABEL_18:
      uint64_t v7 = llvm::BinaryOperator::Create(v10, v9, v11, (const char **)&v24, 0);
      llvm::Instruction::copyIRFlags((uint64_t)v7, (uint64_t)a2, 1);
      return v7;
    }
  }
  LODWORD(v24) = 139;
  uint64_t v25 = 0;
  uint64_t v26 = (uint64_t *)&v29;
  if (!sub_1CC045310((uint64_t)&v24, v5)) {
    return 0;
  }
  LODWORD(v23[0]) = 139;
  v23[1] = 0;
  v23[2] = &v28;
  if (!sub_1CC045310((uint64_t)v23, v6)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v5 + 8);
  if (!v12 || *(void *)(v12 + 8))
  {
    uint64_t v13 = *(void *)(v6 + 8);
    if (!v13 || *(void *)(v13 + 8)) {
      return 0;
    }
  }
  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(_DWORD *)(v14 + 96);
  uint64_t v16 = *(void *)(v14 + 88);
  __int16 v17 = *(_WORD *)(v14 + 100);
  char v18 = *(unsigned char *)(v14 + 102);
  int v19 = a2[17] >> 1;
  if (v19 == 127) {
    int v19 = -1;
  }
  *(_DWORD *)(v14 + 96) = v19;
  __int16 v27 = 257;
  uint64_t v20 = sub_1CB844E98(v14, v4, (uint64_t)v29, v28, (uint64_t)&v24, 0);
  uint64_t v21 = *(llvm::IRBuilderBase **)(a1 + 24);
  __int16 v27 = 257;
  UnaryIntrinsic = (int32x2_t ****)llvm::IRBuilderBase::CreateUnaryIntrinsic(v21, 139, v20, 0, (const llvm::Twine *)&v24);
  llvm::Value::takeName(UnaryIntrinsic, (llvm::Value *)a2);
  uint64_t v7 = sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)UnaryIntrinsic);
  *(_DWORD *)(v14 + 96) = v15;
  *(void *)(v14 + 88) = v16;
  *(_WORD *)(v14 + 100) = v17;
  *(unsigned char *)(v14 + 102) = v18;
  return v7;
}

llvm::UndefValue **sub_1CCA83948(uint64_t a1, uint64_t a2)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(llvm **)(a2 - 64);
  uint64_t v5 = *(llvm::Constant **)(a2 - 32);
  unint64_t v6 = (unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1;
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v182 = *(_OWORD *)(a1 + 88);
  long long v183 = v8;
  uint64_t v185 = *((void *)&v7 + 1);
  int v184 = (void **)a2;
  if (v6 == 127) {
    int v9 = -1;
  }
  else {
    int v9 = v6;
  }
  char v10 = sub_1CC039C30(v4, v5, v9, (llvm::Constant **)&v182, 0, (llvm::DSOLocalEquivalent **)1);
  if (!v10)
  {
    if (sub_1CC9D1CF4(a1, (llvm::Instruction *)a2)) {
      return (llvm::UndefValue **)a2;
    }
    unint64_t v12 = sub_1CC9D812C(a1, (unsigned __int8 *)a2);
    if (v12) {
      return (llvm::UndefValue **)v12;
    }
    unint64_t v12 = sub_1CC9D6B70(a1, a2);
    if (v12) {
      return (llvm::UndefValue **)v12;
    }
    unint64_t v12 = (unint64_t)sub_1CC9D74E0(a1, (unsigned char *)a2, v13, v14, v15);
    if (v12) {
      return (llvm::UndefValue **)v12;
    }
    char v10 = sub_1CCA8330C(a2, *(void *)(a1 + 24));
    if (v10) {
      goto LABEL_5;
    }
    unint64_t v12 = (unint64_t)sub_1CCA83748(a1, (unsigned __int8 *)a2);
    if (v12) {
      return (llvm::UndefValue **)v12;
    }
    uint64_t v16 = *(void *)(a2 - 64);
    __int16 v17 = *(unsigned __int8 **)(a2 - 32);
    unsigned int v18 = v17[16];
    if (v17 && (SplatValue = *(unsigned char **)(a2 - 32), v18 == 17)
      || v18 <= 0x14
      && (*(_DWORD *)(*(void *)v17 + 8) & 0xFE) == 0x12
      && (SplatValue = llvm::Constant::getSplatValue(*(llvm::Constant **)(a2 - 32), 0)) != 0
      && SplatValue[16] == 17)
    {
      if (sub_1CB844168((uint64_t)SplatValue, -1.0))
      {
        LOWORD(v184) = 257;
        uint64_t v25 = llvm::UnaryOperator::Create(12, (uint64_t *)v16, (const char **)&v182, 0);
        goto LABEL_25;
      }
    }
    uint64_t v180 = 0;
    int v181 = 0;
    *(void *)&long long v182 = &v181;
    if (sub_1CC04C34C((void **)&v182, v16) && v17 && v17[16] <= 0x14u)
    {
      uint64_t v21 = v181;
      uint64_t v22 = (void *)llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, v17, 0, 0, v20);
      LOWORD(v184) = 257;
      char v23 = 18;
      uint64_t v24 = v21;
LABEL_24:
      uint64_t v25 = llvm::BinaryOperator::Create(v23, v24, (uint64_t)v22, (const char **)&v182, 0);
LABEL_25:
      unint64_t v12 = (unint64_t)v25;
      llvm::Instruction::copyIRFlags((uint64_t)v25, a2, 1);
      return (llvm::UndefValue **)v12;
    }
    uint64_t UnaryIntrinsic = (uint64_t)sub_1CC9D3890(a1, (unsigned __int8 *)a2, (llvm *)v16, (llvm *)v17);
    if (UnaryIntrinsic) {
      goto LABEL_27;
    }
    if ((*(unsigned char *)(a2 + 17) & 2) == 0) {
      goto LABEL_140;
    }
    if (!v17 || v17[16] > 0x14u || !llvm::Constant::isFiniteNonZeroFP((llvm::Constant *)v17))
    {
LABEL_60:
      uint64_t v179 = 0;
      int v46 = *(unsigned __int8 *)(a2 + 16);
      if (v46 == 46)
      {
        char v47 = *(llvm::Value **)(a2 - 64);
        uint64_t v48 = *((void *)v47 + 1);
        if (v48 && !*(void *)(v48 + 8))
        {
          int v97 = *((unsigned __int8 *)v47 + 16);
          if (v97 == 5)
          {
            if (*((_WORD *)v47 + 9) != 21) {
              goto LABEL_63;
            }
            uint64_t v113 = (char *)v47 - 32 * (*((_DWORD *)v47 + 5) & 0x7FFFFFF);
            uint64_t v52 = *(llvm::Value **)v113;
            if (!*(void *)v113) {
              goto LABEL_63;
            }
            int v181 = *(llvm::Value **)v113;
            unint64_t v98 = (void *)*((void *)v113 + 4);
            if (!v98) {
              goto LABEL_63;
            }
          }
          else
          {
            if (v97 != 49) {
              goto LABEL_63;
            }
            uint64_t v52 = (llvm::Value *)*((void *)v47 - 8);
            if (!v52) {
              goto LABEL_63;
            }
            int v181 = (llvm::Value *)*((void *)v47 - 8);
            unint64_t v98 = (void *)*((void *)v47 - 4);
            if (!v98) {
              goto LABEL_63;
            }
          }
          uint64_t v180 = v98;
          uint64_t v114 = *(llvm::Value **)(a2 - 32);
          if (v114)
          {
            uint64_t v179 = *(llvm::Value **)(a2 - 32);
            char v47 = v114;
LABEL_243:
            uint64_t v120 = *(void *)(a1 + 24);
            LOWORD(v184) = 257;
            goto LABEL_244;
          }
        }
LABEL_63:
        uint64_t v49 = *(void *)(a2 - 32);
        uint64_t v50 = *(void *)(v49 + 8);
        if (v50 && !*(void *)(v50 + 8))
        {
          int v51 = *(unsigned __int8 *)(v49 + 16);
          if (v51 != 5)
          {
            if (v51 != 49) {
              goto LABEL_76;
            }
            uint64_t v52 = *(llvm::Value **)(v49 - 64);
            if (!v52) {
              goto LABEL_76;
            }
            int v181 = *(llvm::Value **)(v49 - 64);
            BOOL v53 = *(void **)(v49 - 32);
            if (!v53) {
              goto LABEL_76;
            }
            goto LABEL_205;
          }
          if (*(_WORD *)(v49 + 18) == 21)
          {
            uint64_t v115 = v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF);
            uint64_t v52 = *(llvm::Value **)v115;
            if (*(void *)v115)
            {
              int v181 = *(llvm::Value **)v115;
              BOOL v53 = *(void **)(v115 + 32);
              if (v53)
              {
LABEL_205:
                uint64_t v180 = v53;
LABEL_242:
                uint64_t v179 = v47;
                goto LABEL_243;
              }
            }
          }
        }
        goto LABEL_76;
      }
      if (v46 != 5 || *(_WORD *)(a2 + 18) != 18) {
        goto LABEL_76;
      }
      char v54 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      uint64_t v55 = *v54;
      uint64_t v56 = *(void *)(*v54 + 8);
      if (v56 && !*(void *)(v56 + 8))
      {
        int v109 = *(unsigned __int8 *)(v55 + 16);
        if (v109 == 5)
        {
          if (*(_WORD *)(v55 + 18) != 21) {
            goto LABEL_74;
          }
          uint64_t v128 = v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF);
          uint64_t v52 = *(llvm::Value **)v128;
          if (!*(void *)v128) {
            goto LABEL_74;
          }
          int v181 = *(llvm::Value **)v128;
          unint64_t v110 = *(void **)(v128 + 32);
          if (!v110) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v109 != 49) {
            goto LABEL_74;
          }
          uint64_t v52 = *(llvm::Value **)(v55 - 64);
          if (!v52) {
            goto LABEL_74;
          }
          int v181 = *(llvm::Value **)(v55 - 64);
          unint64_t v110 = *(void **)(v55 - 32);
          if (!v110) {
            goto LABEL_74;
          }
        }
        uint64_t v180 = v110;
        char v47 = (llvm::Value *)v54[4];
        if (v47) {
          goto LABEL_242;
        }
      }
LABEL_74:
      uint64_t v57 = v54[4];
      uint64_t v58 = *(void *)(v57 + 8);
      if (v58 && !*(void *)(v58 + 8))
      {
        int v111 = *(unsigned __int8 *)(v57 + 16);
        if (v111 == 5)
        {
          if (*(_WORD *)(v57 + 18) != 21) {
            goto LABEL_76;
          }
          uint64_t v129 = v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF);
          uint64_t v52 = *(llvm::Value **)v129;
          if (!*(void *)v129) {
            goto LABEL_76;
          }
          int v181 = *(llvm::Value **)v129;
          size_t v112 = *(void **)(v129 + 32);
          if (!v112) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v111 != 49) {
            goto LABEL_76;
          }
          uint64_t v52 = *(llvm::Value **)(v57 - 64);
          if (!v52) {
            goto LABEL_76;
          }
          int v181 = *(llvm::Value **)(v57 - 64);
          size_t v112 = *(void **)(v57 - 32);
          if (!v112) {
            goto LABEL_76;
          }
        }
        uint64_t v180 = v112;
        char v47 = (llvm::Value *)v55;
        goto LABEL_242;
      }
LABEL_76:
      if ((*(unsigned char *)(a2 + 17) & 4) != 0)
      {
        LODWORD(v182) = 280;
        *((void *)&v182 + 1) = 0;
        *(void *)&long long v183 = &v181;
        uint64_t v59 = *(void *)(v16 + 8);
        if (v59)
        {
          if (!*(void *)(v59 + 8))
          {
            if (sub_1CC045310((uint64_t)&v182, v16))
            {
              LODWORD(v187) = 280;
              uint64_t v188 = 0;
              int v189 = (llvm::Value *)&v180;
              uint64_t v60 = *((void *)v17 + 1);
              if (v60)
              {
                if (!*(void *)(v60 + 8) && sub_1CC045310((uint64_t)&v187, (uint64_t)v17))
                {
                  uint64_t v61 = *(void *)(a1 + 24);
                  LOWORD(v184) = 257;
                  BOOL v62 = (llvm::Value *)sub_1CB93098C(v61, (uint64_t)v181, (uint64_t)v180, (llvm::Instruction *)a2, (uint64_t)&v182);
                  uint64_t v63 = *(llvm::IRBuilderBase **)(a1 + 24);
                  LOWORD(v184) = 257;
                  int v64 = 280;
LABEL_125:
                  uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic(v63, v64, v62, (llvm::Instruction *)a2, (const llvm::Twine *)&v182);
                  goto LABEL_27;
                }
              }
            }
          }
        }
      }
      if ((*(unsigned char *)(a2 + 17) & 0x10) != 0)
      {
        double v187 = 1.0;
        uint64_t v188 = &v180;
        int v65 = *(unsigned __int8 *)(v16 + 16);
        if (v65 == 5)
        {
          if (*(_WORD *)(v16 + 18) != 21) {
            goto LABEL_95;
          }
          if (!sub_1CD6404D8(&v187, *(llvm::Constant **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF))))goto LABEL_95; {
          uint64_t v130 = *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
          }
          if (!v130) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v65 != 49) {
            goto LABEL_95;
          }
          BOOL v66 = *(unsigned __int8 **)(v16 - 64);
          unsigned int v67 = v66[16];
          if (v66 && v67 == 17)
          {
            double v68 = 1.0;
          }
          else
          {
            if (v67 > 0x14) {
              goto LABEL_95;
            }
            if ((*(_DWORD *)(*(void *)v66 + 8) & 0xFE) != 0x12) {
              goto LABEL_95;
            }
            BOOL v66 = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)v66, 0);
            if (!v66 || v66[16] != 17) {
              goto LABEL_95;
            }
            double v68 = v187;
          }
          if (!sub_1CB844168((uint64_t)v66, v68)) {
            goto LABEL_95;
          }
          uint64_t v130 = *(void *)(v16 - 32);
          if (!v130) {
            goto LABEL_95;
          }
        }
        *uint64_t v188 = v130;
        LODWORD(v182) = 280;
        *((void *)&v182 + 1) = 0;
        *(void *)&long long v183 = &v181;
        if (sub_1CC045310((uint64_t)&v182, (uint64_t)v180) && v17 == (unsigned __int8 *)v181)
        {
          uint64_t v22 = v180;
          LOWORD(v184) = 257;
          char v23 = 21;
          uint64_t v24 = v17;
          goto LABEL_24;
        }
      }
LABEL_95:
      if ((*(unsigned char *)(a2 + 17) & 0x10) == 0) {
        goto LABEL_106;
      }
      double v187 = 1.0;
      uint64_t v188 = &v180;
      int v69 = v17[16];
      if (v69 == 5)
      {
        if (*((_WORD *)v17 + 9) != 21) {
          goto LABEL_106;
        }
        if (!sub_1CD6404D8(&v187, *(llvm::Constant **)&v17[-32 * (*((_DWORD *)v17 + 5) & 0x7FFFFFF)])) {
          goto LABEL_106;
        }
        uint64_t v131 = *(void *)&v17[-32 * (*((_DWORD *)v17 + 5) & 0x7FFFFFF) + 32];
        if (!v131) {
          goto LABEL_106;
        }
      }
      else
      {
        if (v69 != 49) {
          goto LABEL_106;
        }
        uint64_t v70 = (unsigned __int8 *)*((void *)v17 - 8);
        unsigned int v71 = v70[16];
        if (v70 && v71 == 17)
        {
          double v72 = 1.0;
        }
        else
        {
          if (v71 > 0x14) {
            goto LABEL_106;
          }
          if ((*(_DWORD *)(*(void *)v70 + 8) & 0xFE) != 0x12) {
            goto LABEL_106;
          }
          uint64_t v70 = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)v70, 0);
          if (!v70 || v70[16] != 17) {
            goto LABEL_106;
          }
          double v72 = v187;
        }
        if (!sub_1CB844168((uint64_t)v70, v72) || (uint64_t v131 = *((void *)v17 - 4)) == 0)
        {
LABEL_106:
          if ((*(unsigned char *)(a2 + 17) & 4) == 0
            || (*(unsigned char *)(a2 + 17) & 0x10) == 0
            || (unsigned __int8 *)v16 != v17
            || (uint64_t v73 = *(void *)(v16 + 8)) == 0
            || (uint64_t v74 = *(void *)(v73 + 8)) == 0
            || *(void *)(v74 + 8))
          {
LABEL_112:
            if (llvm::Instruction::isOnlyUserOfAnyOperand((llvm::Instruction *)a2))
            {
              LODWORD(v182) = 238;
              *((void *)&v182 + 1) = 0;
              *(void *)&long long v183 = &v181;
              *((void *)&v183 + 1) = 1;
              int v184 = &v180;
              if (sub_1CC9F99A8((uint64_t)&v182, v16))
              {
                LODWORD(v187) = 238;
                uint64_t v188 = 0;
                int v189 = v181;
                uint64_t v190 = 1;
                uint64_t v191 = &v179;
                if (sub_1CC9FAFFC((uint64_t)&v187, (uint64_t)v17))
                {
                  uint64_t v76 = *(void *)(a1 + 24);
                  LOWORD(v184) = 257;
                  int v77 = (llvm::Value *)sub_1CC9F56B4(v76, (uint64_t)v180, (uint64_t)v179, (llvm::Instruction *)a2, (uint64_t)&v182);
                  unsigned int v78 = *(llvm::IRBuilderBase **)(a1 + 24);
                  LOWORD(v184) = 257;
                  uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic(v78, 238, v181, v77, (llvm::Instruction *)a2, (const llvm::Twine *)&v182);
LABEL_27:
                  __int16 v27 = (llvm::Value *)UnaryIntrinsic;
                  uint64_t v28 = a1;
                  int v29 = (llvm::ValueAsMetadata *)a2;
                  return sub_1CC9D3C84(v28, v29, v27);
                }
              }
              LODWORD(v182) = 239;
              *((void *)&v182 + 1) = 0;
              *(void *)&long long v183 = &v181;
              *((void *)&v183 + 1) = 1;
              int v184 = &v180;
              if (sub_1CC9F99A8((uint64_t)&v182, v16))
              {
                LODWORD(v187) = 239;
                uint64_t v188 = 0;
                int v189 = v181;
                uint64_t v190 = 1;
                uint64_t v191 = &v179;
                if (sub_1CC9FAFFC((uint64_t)&v187, (uint64_t)v17) && *v180 == *(void *)v179)
                {
                  uint64_t v116 = *(void *)(a1 + 24);
                  LOWORD(v184) = 257;
                  uint64_t v117 = sub_1CB844A3C(v116, v180, (uint64_t)v179, (uint64_t)&v182, 0, 0);
                  int v118 = *(uint64_t **)(a1 + 24);
                  double v187 = *(double *)v181;
                  uint64_t v188 = *(void **)v117;
                  v186[0] = (uint64_t)v181;
                  v186[1] = (uint64_t)v117;
                  LOWORD(v184) = 257;
                  uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateIntrinsic(v118, 239, (uint64_t)&v187, 2, v186, 2, a2, (uint64_t)&v182);
                  goto LABEL_27;
                }
              }
              LODWORD(v182) = 75;
              *((void *)&v182 + 1) = 0;
              *(void *)&long long v183 = &v181;
              if (sub_1CC045310((uint64_t)&v182, v16))
              {
                LODWORD(v187) = 75;
                uint64_t v188 = 0;
                int v189 = (llvm::Value *)&v180;
                if (sub_1CC045310((uint64_t)&v187, (uint64_t)v17))
                {
                  uint64_t v79 = *(void *)(a1 + 24);
                  LOWORD(v184) = 257;
                  BOOL v62 = (llvm::Value *)sub_1CC9F56B4(v79, (uint64_t)v181, (uint64_t)v180, (llvm::Instruction *)a2, (uint64_t)&v182);
                  uint64_t v63 = *(llvm::IRBuilderBase **)(a1 + 24);
                  LOWORD(v184) = 257;
                  int v64 = 75;
                  goto LABEL_125;
                }
              }
              LODWORD(v182) = 76;
              *((void *)&v182 + 1) = 0;
              *(void *)&long long v183 = &v181;
              if (sub_1CC045310((uint64_t)&v182, v16))
              {
                LODWORD(v187) = 76;
                uint64_t v188 = 0;
                int v189 = (llvm::Value *)&v180;
                if (sub_1CC045310((uint64_t)&v187, (uint64_t)v17))
                {
                  uint64_t v80 = *(void *)(a1 + 24);
                  LOWORD(v184) = 257;
                  BOOL v62 = (llvm::Value *)sub_1CC9F56B4(v80, (uint64_t)v181, (uint64_t)v180, (llvm::Instruction *)a2, (uint64_t)&v182);
                  uint64_t v63 = *(llvm::IRBuilderBase **)(a1 + 24);
                  LOWORD(v184) = 257;
                  int v64 = 76;
                  goto LABEL_125;
                }
              }
            }
            uint64_t v81 = *(void *)(v16 + 8);
            if (!v81 || *(void *)(v81 + 8)) {
              goto LABEL_128;
            }
            int v90 = *(unsigned __int8 *)(v16 + 16);
            if (v90 == 46)
            {
              uint64_t v91 = *(unsigned __int8 **)(v16 - 64);
              uint64_t v92 = *(unsigned __int8 **)(v16 - 32);
              if (v17 == v91)
              {
                if (!v92) {
                  goto LABEL_128;
                }
                uint64_t v180 = *(void **)(v16 - 32);
                int v75 = 1;
              }
              else
              {
                if (!v91 || v17 != v92) {
                  goto LABEL_128;
                }
                uint64_t v180 = *(void **)(v16 - 64);
                int v75 = 1;
                uint64_t v92 = v91;
              }
              goto LABEL_304;
            }
            if (v90 != 5)
            {
LABEL_303:
              int v75 = (v90 == 5) & v75;
              uint64_t v92 = (unsigned __int8 *)v180;
LABEL_304:
              if (v75 && v17 != v92)
              {
                uint64_t v142 = *(void *)(a1 + 24);
                LOWORD(v184) = 257;
                uint64_t v143 = (uint64_t)v17;
                uint64_t v144 = (uint64_t)v17;
                goto LABEL_314;
              }
LABEL_128:
              uint64_t v82 = *((void *)v17 + 1);
              if (!v82 || *(void *)(v82 + 8))
              {
LABEL_130:
                if (*(unsigned __int8 *)(a2 + 17) >= 0xFEu)
                {
                  LODWORD(v182) = 177;
                  DWORD2(v182) = 0;
                  *(void *)&long long v183 = &v181;
                  *((void *)&v183 + 1) = 0x3FE0000000000000;
                  uint64_t v83 = *(void *)(v16 + 8);
                  if (v83
                    && !*(void *)(v83 + 8)
                    && *(unsigned char *)(v16 + 16) == 84
                    && (uint64_t v132 = *(void *)(v16 - 32)) != 0
                    && !*(unsigned char *)(v132 + 16)
                    && *(void *)(v132 + 24) == *(void *)(v16 + 72)
                    && *(_DWORD *)(v132 + 36) == 177
                    && (sub_1CCA8A5F4((unsigned int *)&v182 + 2, v16) & 1) != 0)
                  {
                    uint64_t v180 = v17;
                    uint64_t v84 = v16;
                  }
                  else
                  {
                    uint64_t v84 = 0;
                  }
                  LODWORD(v182) = 177;
                  DWORD2(v182) = 0;
                  *(void *)&long long v183 = &v181;
                  *((void *)&v183 + 1) = 0x3FE0000000000000;
                  uint64_t v85 = *((void *)v17 + 1);
                  if (v85)
                  {
                    if (!*(void *)(v85 + 8) && v17[16] == 84)
                    {
                      uint64_t v133 = *((void *)v17 - 4);
                      if (v133)
                      {
                        if (!*(unsigned char *)(v133 + 16)
                          && *(void *)(v133 + 24) == *((void *)v17 + 9)
                          && *(_DWORD *)(v133 + 36) == 177
                          && sub_1CCA8A5F4((unsigned int *)&v182 + 2, (uint64_t)v17))
                        {
                          uint64_t v180 = (void *)v16;
                          goto LABEL_139;
                        }
                      }
                    }
                  }
                  if (v84)
                  {
LABEL_139:
                    int v86 = *(llvm::IRBuilderBase **)(a1 + 24);
                    LOWORD(v184) = 257;
                    uint64_t v87 = llvm::IRBuilderBase::CreateUnaryIntrinsic(v86, 177, v181, (llvm::Instruction *)a2, (const llvm::Twine *)&v182);
                    uint64_t v88 = *(void *)(a1 + 24);
                    LOWORD(v184) = 257;
                    uint64_t v24 = (void *)sub_1CB93098C(v88, v87, (uint64_t)v180, (llvm::Instruction *)a2, (uint64_t)&v182);
                    uint64_t v22 = v180;
                    LOWORD(v184) = 257;
                    char v23 = 16;
                    goto LABEL_24;
                  }
                }
LABEL_140:
                double v187 = 0.0;
                *(void *)&long long v182 = 0;
                uint64_t v89 = *(void *)(a2 - 64);
                if ((v89 && *(unsigned char *)(v89 + 16) == 83
                   || (uint64_t v89 = *(void *)(a2 - 32)) != 0 && *(unsigned char *)(v89 + 16) == 83)
                  && (llvm::matchSimpleRecurrence(v89, &v182, &v187, v186) & 1) != 0
                  && (void)v182 == a2
                  && (~*(unsigned __int8 *)(a2 + 17) & 0x14) == 0)
                {
                  int v99 = *(llvm::Constant **)&v187;
                  if (v187 != 0.0)
                  {
                    unsigned int v100 = *(unsigned __int8 *)(*(void *)&v187 + 16);
                    if (v100 <= 0x14)
                    {
                      if (v100 == 16)
                      {
                        uint64_t v101 = *(unsigned int *)(*(void *)&v187 + 32);
                        if (v101 >= 0x41)
                        {
                          int v172 = 0;
                          int64_t v173 = (unint64_t)(v101 + 63) >> 6;
                          do
                          {
                            if (v173-- < 1) {
                              break;
                            }
                            unint64_t v175 = *(void *)(*(void *)(*(void *)&v187 + 24) + 8 * v173);
                            v172 += __clz(v175);
                          }
                          while (!v175);
                          int v176 = v101 | 0xFFFFFFC0;
                          if ((v101 & 0x3F) == 0) {
                            int v176 = 0;
                          }
                          if (v172 + v176 == v101) {
                            goto LABEL_169;
                          }
                        }
                        else if (!*(void *)(*(void *)&v187 + 24))
                        {
LABEL_169:
                          uint64_t v28 = a1;
                          int v29 = (llvm::ValueAsMetadata *)a2;
                          __int16 v27 = v99;
                          return sub_1CC9D3C84(v28, v29, v27);
                        }
                      }
                      else if (v100 == 17)
                      {
                        if (sub_1CB844168(*(uint64_t *)&v187, 0.0)) {
                          goto LABEL_169;
                        }
                      }
                      else if (v100 - 18 < 3 || v100 == 13)
                      {
                        goto LABEL_169;
                      }
                      if (sub_1CC03F414((uint64_t)&v182, v99)) {
                        goto LABEL_169;
                      }
                    }
                  }
                }
                return 0;
              }
              int v93 = v17[16];
              if (v93 == 46)
              {
                char v94 = (void *)*((void *)v17 - 8);
                int v95 = (void *)*((void *)v17 - 4);
                if ((void *)v16 == v94)
                {
                  if (!v95) {
                    goto LABEL_130;
                  }
                  uint64_t v180 = (void *)*((void *)v17 - 4);
                  int v96 = 1;
                }
                else
                {
                  if (!v94 || (void *)v16 != v95) {
                    goto LABEL_130;
                  }
                  uint64_t v180 = (void *)*((void *)v17 - 8);
                  int v96 = 1;
                  int v95 = v94;
                }
                goto LABEL_311;
              }
              if (v93 != 5)
              {
LABEL_310:
                int v96 = (v93 == 5) & v75;
                int v95 = v180;
LABEL_311:
                if (!v96 || (void *)v16 == v95) {
                  goto LABEL_130;
                }
                uint64_t v142 = *(void *)(a1 + 24);
                LOWORD(v184) = 257;
                uint64_t v143 = v16;
                uint64_t v144 = v16;
LABEL_314:
                uint64_t v24 = (void *)sub_1CB93098C(v142, v143, v144, (llvm::Instruction *)a2, (uint64_t)&v182);
                uint64_t v22 = v180;
                LOWORD(v184) = 257;
                char v23 = 18;
                goto LABEL_24;
              }
              if (*((_WORD *)v17 + 9) == 18)
              {
                uint64_t v106 = &v17[-32 * (*((_DWORD *)v17 + 5) & 0x7FFFFFF)];
                unsigned int v107 = *(void **)v106;
                uint64_t v108 = *((void *)v106 + 4);
                if (v16 != *(void *)v106)
                {
                  LOBYTE(v75) = 0;
                  if (!v107 || v16 != v108) {
                    goto LABEL_310;
                  }
                  goto LABEL_308;
                }
                unsigned int v107 = (void *)*((void *)v106 + 4);
                if (v108)
                {
LABEL_308:
                  uint64_t v180 = v107;
                  LOBYTE(v75) = 1;
                  goto LABEL_310;
                }
              }
              LOBYTE(v75) = 0;
              goto LABEL_310;
            }
            if (*(_WORD *)(v16 + 18) == 18)
            {
              uint64_t v103 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
              uint64_t v104 = *(unsigned __int8 **)v103;
              uint64_t v105 = *(unsigned __int8 **)(v103 + 32);
              if (v17 != *(unsigned __int8 **)v103)
              {
                LOBYTE(v75) = 0;
                if (!v104 || v17 != v105) {
                  goto LABEL_303;
                }
                goto LABEL_301;
              }
              uint64_t v104 = *(unsigned __int8 **)(v103 + 32);
              if (v105)
              {
LABEL_301:
                uint64_t v180 = v104;
                LOBYTE(v75) = 1;
                goto LABEL_303;
              }
            }
            LOBYTE(v75) = 0;
            goto LABEL_303;
          }
          *(void *)&long long v182 = &v181;
          DWORD2(v182) = 280;
          *(void *)&long long v183 = 0;
          *((void *)&v183 + 1) = &v180;
          int v102 = *(unsigned __int8 *)(v16 + 16);
          if (v102 == 5)
          {
            if (*(_WORD *)(v16 + 18) != 21) {
              goto LABEL_213;
            }
            uint64_t v119 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
            if (!*(void *)v119) {
              goto LABEL_213;
            }
            int v181 = *(llvm::Value **)v119;
            if (!sub_1CC13E39C((uint64_t)&v182 + 8, *(void *)(v119 + 32))) {
              goto LABEL_213;
            }
          }
          else if (v102 != 49 {
                 || !*(void *)(v16 - 64)
          }
                 || (int v181 = *(llvm::Value **)(v16 - 64),
                     !sub_1CC045310((uint64_t)&v182 + 8, *(void *)(v16 - 32))))
          {
LABEL_213:
            LODWORD(v182) = 280;
            *((void *)&v182 + 1) = 0;
            *(void *)&long long v183 = &v180;
            *((void *)&v183 + 1) = &v181;
            int v121 = *(unsigned __int8 *)(v16 + 16);
            if (v121 == 5)
            {
              if (*(_WORD *)(v16 + 18) != 21) {
                goto LABEL_112;
              }
              if (!sub_1CC13E39C((uint64_t)&v182, *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)))) {
                goto LABEL_112;
              }
              uint64_t v122 = *(void *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
              if (!v122) {
                goto LABEL_112;
              }
            }
            else
            {
              if (v121 != 49) {
                goto LABEL_112;
              }
              if (!sub_1CC045310((uint64_t)&v182, *(void *)(v16 - 64))) {
                goto LABEL_112;
              }
              uint64_t v122 = *(void *)(v16 - 32);
              if (!v122) {
                goto LABEL_112;
              }
            }
            **((void **)&v183 + 1) = v122;
            uint64_t v125 = *(void *)(a1 + 24);
            LOWORD(v184) = 257;
            uint64_t v22 = (void *)sub_1CB93098C(v125, (uint64_t)v181, (uint64_t)v181, (llvm::Instruction *)a2, (uint64_t)&v182);
            uint64_t v24 = v180;
LABEL_245:
            LOWORD(v184) = 257;
            char v23 = 21;
            goto LABEL_24;
          }
          uint64_t v120 = *(void *)(a1 + 24);
          uint64_t v52 = v181;
          LOWORD(v184) = 257;
          char v47 = v181;
LABEL_244:
          uint64_t v24 = (void *)sub_1CB93098C(v120, (uint64_t)v52, (uint64_t)v47, (llvm::Instruction *)a2, (uint64_t)&v182);
          uint64_t v22 = v180;
          goto LABEL_245;
        }
      }
      *uint64_t v188 = v131;
      LODWORD(v182) = 280;
      *((void *)&v182 + 1) = 0;
      *(void *)&long long v183 = &v181;
      if (sub_1CC045310((uint64_t)&v182, (uint64_t)v180) && (llvm::Value *)v16 == v181)
      {
        uint64_t v22 = v180;
        LOWORD(v184) = 257;
        char v23 = 21;
        uint64_t v24 = (void *)v16;
        goto LABEL_24;
      }
      goto LABEL_106;
    }
    uint64_t v32 = *(void *)(v16 + 8);
    if (v32 && !*(void *)(v32 + 8))
    {
      int v39 = *(unsigned __int8 *)(v16 + 16);
      if (v39 == 5)
      {
        if (*(_WORD *)(v16 + 18) != 21) {
          goto LABEL_35;
        }
        uint64_t v126 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
        uint64_t v40 = *(unsigned __int8 **)v126;
        if (!*(void *)v126) {
          goto LABEL_35;
        }
        uint64_t v41 = *(llvm::Value **)(v126 + 32);
        if (!v41) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v39 != 49) {
          goto LABEL_35;
        }
        uint64_t v40 = *(unsigned __int8 **)(v16 - 64);
        if (!v40) {
          goto LABEL_35;
        }
        if (v40[16] > 0x14u) {
          goto LABEL_35;
        }
        uint64_t v41 = *(llvm::Value **)(v16 - 32);
        if (!v41) {
          goto LABEL_35;
        }
      }
      int v181 = v41;
      FMul = llvm::ConstantExpr::getFMul((llvm::ConstantExpr *)v17, (llvm::Constant *)v40, v30, v31);
      if (llvm::Constant::isNormalFP(FMul))
      {
        uint64_t v22 = v181;
        LOWORD(v184) = 257;
        char v23 = 21;
        uint64_t v24 = FMul;
        goto LABEL_24;
      }
    }
LABEL_35:
    unsigned int v33 = *(unsigned __int8 *)(v16 + 16);
    if (v33 == 5)
    {
      if (*(_WORD *)(v16 + 18) != 21) {
        goto LABEL_56;
      }
      uint64_t v35 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
      if (!*(void *)v35) {
        goto LABEL_56;
      }
      int v181 = *(llvm::Value **)v35;
      uint64_t v34 = *(unsigned __int8 **)(v35 + 32);
      if (!v34) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v33 != 49) {
        goto LABEL_57;
      }
      if (!*(void *)(v16 - 64)
        || (int v181 = *(llvm::Value **)(v16 - 64), (v34 = *(unsigned __int8 **)(v16 - 32)) == 0)
        || v34[16] > 0x14u)
      {
LABEL_56:
        unsigned int v33 = *(unsigned __int8 *)(v16 + 16);
LABEL_57:
        if (v33 < 0x1C) {
          goto LABEL_60;
        }
        uint64_t v45 = *(void *)(v16 + 8);
        if (!v45 || *(void *)(v45 + 8) || v33 != 44 && v33 != 42) {
          goto LABEL_60;
        }
        int v123 = *(_DWORD *)(v16 + 20);
        uint64_t v124 = (v123 & 0x40000000) != 0 ? *(uint64_t **)(v16 - 8) : (uint64_t *)(v16 - 32 * (v123 & 0x7FFFFFF));
        uint64_t v134 = *v124;
        uint64_t v135 = v124[4];
        uint64_t v136 = *(unsigned __int8 *)(v134 + 16) >= 0x15u ? 0 : v134;
        uint64_t v137 = *(unsigned __int8 *)(v135 + 16) >= 0x15u ? 0 : v135;
        uint64_t v138 = (llvm::Constant *)(v136 ? v136 : v137);
        uint64_t v139 = v136 ? v135 : v134;
        if (!v138 || !llvm::Constant::isFiniteNonZeroFP(v138)) {
          goto LABEL_60;
        }
        int v140 = *(unsigned __int8 *)(v139 + 16);
        if (v140 == 5)
        {
          int v145 = *(unsigned __int16 *)(v139 + 18);
          if (v145 == 21)
          {
            char v146 = (unsigned __int8 **)(v139 - 32 * (*(_DWORD *)(v139 + 20) & 0x7FFFFFF));
            int v141 = v146[4];
            if (!v141)
            {
              int v141 = *v146;
              if (!*v146) {
                goto LABEL_60;
              }
            }
          }
          else
          {
            if (v145 != 18) {
              goto LABEL_60;
            }
            int v141 = *(unsigned __int8 **)(v139 - 32 * (*(_DWORD *)(v139 + 20) & 0x7FFFFFF) + 32);
            if (!v141) {
              goto LABEL_60;
            }
          }
        }
        else
        {
          if (v140 == 49)
          {
            int v141 = *(unsigned __int8 **)(v139 - 32);
            if (v141 && v141[16] <= 0x14u) {
              goto LABEL_326;
            }
            int v141 = *(unsigned __int8 **)(v139 - 64);
            if (!v141) {
              goto LABEL_60;
            }
          }
          else
          {
            if (v140 != 46) {
              goto LABEL_60;
            }
            int v141 = *(unsigned __int8 **)(v139 - 32);
            if (!v141) {
              goto LABEL_60;
            }
          }
          if (v141[16] > 0x14u) {
            goto LABEL_60;
          }
        }
LABEL_326:
        if (!llvm::Constant::isFiniteNonZeroFP((llvm::Constant *)v141)) {
          goto LABEL_60;
        }
        int v149 = llvm::ConstantExpr::getFMul(v138, (llvm::Constant *)v17, v147, v148);
        if (!llvm::Constant::isNormalFP(v149)) {
          goto LABEL_60;
        }
        int v152 = *(_DWORD *)(v139 + 20);
        if ((v152 & 0x40000000) != 0) {
          int v153 = *(llvm::ConstantExpr ***)(v139 - 8);
        }
        else {
          int v153 = (llvm::ConstantExpr **)(v139 - 32 * (v152 & 0x7FFFFFF));
        }
        uint64_t v154 = *v153;
        FDiv = (unsigned __int8 *)v153[4];
        if (*((unsigned __int8 *)*v153 + 16) >= 0x15u) {
          uint64_t v156 = 0;
        }
        else {
          uint64_t v156 = *v153;
        }
        if (FDiv[16] >= 0x15u) {
          int v157 = 0;
        }
        else {
          int v157 = v153[4];
        }
        if (*(unsigned char *)(v139 + 16) == 46)
        {
          if (v157) {
            uint64_t v156 = v157;
          }
          BOOL v158 = llvm::ConstantExpr::getFMul(v156, (llvm::Constant *)v17, v150, v151);
          if (!llvm::Constant::isNormalFP(v158)) {
            goto LABEL_60;
          }
          if (v157) {
            int v159 = (unsigned __int8 *)v154;
          }
          else {
            int v159 = FDiv;
          }
          LOWORD(v184) = 257;
          char v160 = 18;
          uint64_t v161 = (uint64_t)v158;
          goto LABEL_344;
        }
        if (v156)
        {
          uint64_t v170 = *(void *)(v139 + 8);
          if (!v170 || *(void *)(v170 + 8)) {
            goto LABEL_60;
          }
          uint64_t v171 = llvm::ConstantExpr::getFMul(v156, (llvm::Constant *)v17, v150, v151);
          uint64_t v154 = v171;
        }
        else
        {
          FDiv = (unsigned __int8 *)llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v17, v157, v150, v151);
          if (llvm::Constant::isNormalFP((llvm::Constant *)FDiv))
          {
            LOWORD(v184) = 257;
            char v160 = 18;
LABEL_366:
            int v159 = (unsigned __int8 *)v154;
            uint64_t v161 = (uint64_t)FDiv;
LABEL_344:
            unsigned int v162 = llvm::BinaryOperator::Create(v160, v159, v161, (const char **)&v182, 0);
            unsigned int v163 = v162;
            if (v162)
            {
              *((unsigned char *)v162 + 17) |= 0xFEu;
              sub_1CC9D2AB4(a1, v162, a2);
              if (v149)
              {
                int v164 = *(unsigned __int8 *)(v16 + 16);
                if (v164 == 44) {
                  unint64_t v165 = v149;
                }
                else {
                  unint64_t v165 = v163;
                }
                if (v164 == 44) {
                  BOOL v166 = v163;
                }
                else {
                  BOOL v166 = v149;
                }
                if (v136) {
                  int v167 = v165;
                }
                else {
                  int v167 = v163;
                }
                if (v136) {
                  uint64_t v168 = (uint64_t)v166;
                }
                else {
                  uint64_t v168 = (uint64_t)v149;
                }
                LOWORD(v184) = 257;
                if (v164 == 42) {
                  char v169 = 14;
                }
                else {
                  char v169 = 16;
                }
                unint64_t v12 = (unint64_t)llvm::BinaryOperator::Create(v169, v167, v168, (const char **)&v182, 0);
                *(unsigned char *)(v12 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(v12 + 17) & 1;
                return (llvm::UndefValue **)v12;
              }
            }
            goto LABEL_60;
          }
          uint64_t v171 = llvm::ConstantExpr::getFDiv(v157, (llvm::Constant *)v17, v177, v178);
          FDiv = (unsigned __int8 *)v171;
        }
        if (!llvm::Constant::isNormalFP(v171)) {
          goto LABEL_60;
        }
        LOWORD(v184) = 257;
        char v160 = 21;
        goto LABEL_366;
      }
    }
    char v36 = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v17, (llvm::Constant *)v34, v30, v31);
    if (llvm::Constant::isNormalFP(v36))
    {
      uint64_t v24 = v181;
      LOWORD(v184) = 257;
      char v23 = 18;
      uint64_t v22 = v36;
      goto LABEL_24;
    }
    int v42 = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v34, (llvm::Constant *)v17, v37, v38);
    uint64_t v43 = *(void *)(v16 + 8);
    if (v43)
    {
      if (!*(void *)(v43 + 8))
      {
        __int16 v44 = v42;
        if (llvm::Constant::isNormalFP(v42))
        {
          uint64_t v24 = v181;
          LOWORD(v184) = 257;
          char v23 = 21;
          uint64_t v22 = v44;
          goto LABEL_24;
        }
      }
    }
    goto LABEL_56;
  }
LABEL_5:

  return sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v10);
}

uint64_t sub_1CCA84DF0(void *a1, uint64_t a2)
{
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a2 - 32);
  if (v4 && *(unsigned char *)(v4 + 16) == 85)
  {
    uint64_t v6 = *(void *)(v4 - 64);
    unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v6) {
      BOOL v8 = v7 >= 0x15;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (v7 == 16)
      {
        uint64_t v9 = *(unsigned int *)(v6 + 32);
        if (v9 >= 0x41)
        {
          int v66 = 0;
          int64_t v67 = (unint64_t)(v9 + 63) >> 6;
          do
          {
            BOOL v68 = v67-- < 1;
            if (v68) {
              break;
            }
            unint64_t v69 = *(void *)(*(void *)(v6 + 24) + 8 * v67);
            v66 += __clz(v69);
          }
          while (!v69);
          int v70 = v9 | 0xFFFFFFC0;
          if ((v9 & 0x3F) == 0) {
            int v70 = 0;
          }
          if (v66 + v70 == v9) {
            goto LABEL_11;
          }
        }
        else if (!*(void *)(v6 + 24))
        {
LABEL_11:
          char v10 = 1;
          uint64_t v11 = 2;
LABEL_39:
          uint64_t v75 = v11;
          sub_1CC9D28DC((uint64_t)a1, a2, 1u, *(void *)(v4 - 96 + 32 * v11));
          uint64_t v18 = *(void *)(v4 - 96);
          if (!*(void *)(v4 + 8))
          {
            uint64_t v65 = *(void *)(v18 + 8);
            if (v65)
            {
              if (!*(void *)(v65 + 8)) {
                return 1;
              }
            }
          }
          char v78 = v10;
          int v19 = (void *)(a2 + 24);
          uint64_t v76 = *(void **)(*(void *)(a2 + 40) + 48);
          uint64_t v20 = *(uint64_t ***)v18;
          while (1)
          {
            if (v19 == v76) {
              return 1;
            }
            uint64_t v21 = (void *)*v19;
            if (v21) {
              uint64_t v22 = (uint64_t)(v21 - 3);
            }
            else {
              uint64_t v22 = 0;
            }
            int v23 = *(unsigned __int8 *)(v22 + 16);
            if (v23 != 84)
            {
              uint64_t result = 1;
              switch(*(unsigned char *)(v22 + 16))
              {
                case 0x1D:
                case 0x22:
                case 0x23:
                  return result;
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x25:
                  goto LABEL_50;
                case 0x24:
                case 0x26:
                  if (*(_WORD *)(v22 + 18)) {
                    goto LABEL_50;
                  }
                  return result;
                default:
                  if (v23 != 80) {
                    goto LABEL_50;
                  }
                  PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(void *)(v22 + 40) + 56));
                  if (llvm::classifyEHPersonality(PersonalityFn, v64) != 10) {
                    return 1;
                  }
                  goto LABEL_51;
              }
            }
            uint64_t v62 = *(void *)(v22 + 64);
            if ((!v62 || (*(unsigned char *)(v62 + 16) & 0x20) == 0)
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v22, 37))
            {
              return 1;
            }
LABEL_50:
            if (!llvm::Instruction::willReturn((llvm::Instruction *)v22)) {
              return 1;
            }
LABEL_51:
            int v77 = v21;
            int v25 = *(_DWORD *)(v22 + 20);
            if ((v25 & 0x40000000) == 0)
            {
              uint64_t v26 = v25 & 0x7FFFFFF;
              __int16 v27 = (uint64_t *)(v22 - 32 * v26);
              if (v26) {
                break;
              }
              goto LABEL_109;
            }
            __int16 v27 = *(uint64_t **)(v22 - 8);
            uint64_t v26 = v25 & 0x7FFFFFF;
            if (v26) {
              break;
            }
LABEL_109:
            if (v22 == v4) {
              uint64_t v4 = 0;
            }
            if (v22 == v18) {
              uint64_t v18 = 0;
            }
            int v19 = v77;
            if (!(v18 | v4)) {
              return 1;
            }
          }
          uint64_t v28 = &v27[4 * v26];
          unsigned int v29 = (v22 >> 4) ^ (v22 >> 9);
          while (1)
          {
            if (*v27 == v4)
            {
              sub_1CC9DFE20(a1, v27, *(void *)(v4 + 32 * v75 - 96));
              uint64_t v35 = a1[4];
              unsigned int v36 = *(_DWORD *)(v35 + 8);
              uint64_t v79 = v22;
              unsigned int v80 = v36;
              int v37 = *(_DWORD *)(v35 + 2080);
              if (!v37) {
                goto LABEL_107;
              }
              uint64_t v38 = *(void *)(v35 + 2064);
              int v39 = v37 - 1;
              unsigned int v40 = v39 & v29;
              uint64_t v41 = (void *)(v38 + 16 * (v39 & v29));
              uint64_t v42 = *v41;
              if (*v41 != v22)
              {
                uint64_t v43 = 0;
                int v44 = 1;
                while (v42 != -4096)
                {
                  if (v43) {
                    BOOL v45 = 0;
                  }
                  else {
                    BOOL v45 = v42 == -8192;
                  }
                  if (v45) {
                    uint64_t v43 = v41;
                  }
                  unsigned int v46 = v40 + v44++;
                  unsigned int v40 = v46 & v39;
                  uint64_t v41 = (void *)(v38 + 16 * v40);
                  uint64_t v42 = *v41;
                  if (*v41 == v22) {
                    goto LABEL_93;
                  }
                }
LABEL_88:
                if (v43) {
                  uint64_t v56 = v43;
                }
                else {
                  uint64_t v56 = v41;
                }
LABEL_91:
                uint64_t v57 = sub_1CBF569E0((_DWORD *)(v35 + 2064), (uint64_t)&v79, &v79, v56);
                *uint64_t v57 = v79;
                *((_DWORD *)v57 + 2) = v80;
                unint64_t v58 = *(unsigned int *)(v35 + 8);
                if (v58 >= *(unsigned int *)(v35 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)v35 + 8 * v58) = v22;
                ++*(_DWORD *)(v35 + 8);
              }
            }
            else if (*v27 == v18)
            {
              uint64_t v30 = v20;
              uint64_t v31 = **v20;
              if (v78)
              {
                uint64_t Splat = *(void **)(v31 + 1568);
                if (!Splat)
                {
                  unsigned int v33 = *(llvm::ConstantInt **)(v31 + 1888);
                  unsigned int v34 = *(_DWORD *)(v31 + 1896);
                  unsigned int v80 = v34 >> 8;
                  if (v34 >> 8 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v79 = 0;
                  uint64_t Splat = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v79, v24);
                  if (v80 >= 0x41 && v79) {
                    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
                  }
                  *(void *)(v31 + 1568) = Splat;
                }
              }
              else
              {
                uint64_t Splat = *(void **)(v31 + 1560);
                if (!Splat)
                {
                  uint64_t v59 = *(llvm::ConstantInt **)(v31 + 1888);
                  unsigned int v60 = *(_DWORD *)(v31 + 1896);
                  unsigned int v80 = v60 >> 8;
                  if (v60 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v60 <= 0xFF) {
                    char v61 = 0;
                  }
                  else {
                    char v61 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v60) + 63);
                  }
                  uint64_t v79 = v61 & 1;
                  uint64_t Splat = llvm::ConstantInt::get(v59, (llvm::LLVMContext *)&v79, v24);
                  if (v80 >= 0x41 && v79) {
                    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
                  }
                  *(void *)(v31 + 1560) = Splat;
                }
              }
              uint64_t v20 = v30;
              if ((v30[1] & 0xFE) == 0x12) {
                uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v30 + 8) | ((unint64_t)(*((_DWORD *)v30 + 2) == 19) << 32)), (uint64_t)Splat);
              }
              sub_1CC9DFE20(a1, v27, (uint64_t)Splat);
              uint64_t v35 = a1[4];
              unsigned int v47 = *(_DWORD *)(v35 + 8);
              uint64_t v79 = v22;
              unsigned int v80 = v47;
              int v48 = *(_DWORD *)(v35 + 2080);
              if (!v48)
              {
LABEL_107:
                uint64_t v56 = 0;
                goto LABEL_91;
              }
              uint64_t v49 = *(void *)(v35 + 2064);
              int v50 = v48 - 1;
              unsigned int v51 = v50 & v29;
              uint64_t v41 = (void *)(v49 + 16 * (v50 & v29));
              uint64_t v52 = *v41;
              if (*v41 != v22)
              {
                uint64_t v43 = 0;
                int v53 = 1;
                while (v52 != -4096)
                {
                  if (v43) {
                    BOOL v54 = 0;
                  }
                  else {
                    BOOL v54 = v52 == -8192;
                  }
                  if (v54) {
                    uint64_t v43 = v41;
                  }
                  unsigned int v55 = v51 + v53++;
                  unsigned int v51 = v55 & v50;
                  uint64_t v41 = (void *)(v49 + 16 * v51);
                  uint64_t v52 = *v41;
                  if (*v41 == v22) {
                    goto LABEL_93;
                  }
                }
                goto LABEL_88;
              }
            }
LABEL_93:
            v27 += 4;
            if (v27 == v28) {
              goto LABEL_109;
            }
          }
        }
      }
      else if (v7 == 17)
      {
        if (sub_1CB844168(*(void *)(v4 - 64), 0.0)) {
          goto LABEL_11;
        }
      }
      else if (v7 - 18 < 3 || v7 == 13)
      {
        goto LABEL_11;
      }
      if (sub_1CC03F414((uint64_t)&v79, (llvm::Constant *)v6)) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(void *)(v4 - 32);
    if (!v12) {
      return 0;
    }
    unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 > 0x14) {
      return 0;
    }
    if (v13 == 16)
    {
      uint64_t v14 = *(unsigned int *)(v12 + 32);
      if (v14 < 0x41)
      {
        if (*(void *)(v12 + 24)) {
          goto LABEL_17;
        }
LABEL_37:
        char v10 = 0;
LABEL_38:
        uint64_t v11 = 1;
        goto LABEL_39;
      }
      int v71 = 0;
      int64_t v72 = (unint64_t)(v14 + 63) >> 6;
      do
      {
        BOOL v68 = v72-- < 1;
        if (v68) {
          break;
        }
        unint64_t v73 = *(void *)(*(void *)(v12 + 24) + 8 * v72);
        v71 += __clz(v73);
      }
      while (!v73);
      int v74 = v14 | 0xFFFFFFC0;
      if ((v14 & 0x3F) == 0) {
        int v74 = 0;
      }
      if (v71 + v74 == v14) {
        goto LABEL_37;
      }
    }
    else if (v13 == 17)
    {
      if (sub_1CB844168(*(void *)(v4 - 32), 0.0)) {
        goto LABEL_37;
      }
    }
    else if (v13 - 18 < 3 || v13 == 13)
    {
      goto LABEL_37;
    }
LABEL_17:
    char v15 = sub_1CC03F414((uint64_t)&v79, (llvm::Constant *)v12);
    char v10 = 0;
    if ((v15 & 1) == 0) {
      return 0;
    }
    goto LABEL_38;
  }
  return result;
}

llvm::Value *sub_1CCA85560(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = (llvm::ZExtInst *)sub_1CC9D6B70((uint64_t)a1, (uint64_t)a2);
  if (v4) {
    return v4;
  }
  uint64_t v6 = *((void *)a2 - 8);
  uint64_t v7 = *((void *)a2 - 4);
  int v8 = a2[16];
  uint64_t v9 = *(void *)a2;
  char v10 = sub_1CCA865E4(v7, (uint64_t)a1, (llvm::AssumptionCache *)a2);
  if (!v10)
  {
    if (sub_1CCA84DF0(a1, (uint64_t)a2)) {
      return (llvm::Value *)a2;
    }
    unsigned int v11 = *(unsigned __int8 *)(v6 + 16);
    if (v11 <= 0x14 && v11 != 5 && sub_1CCA8A748(v7))
    {
      uint64_t v4 = (llvm::ZExtInst *)sub_1CC9D447C((uint64_t)a1, a2, (void *)v7, (llvm::Constant *)1, v13);
      if (v4) {
        return v4;
      }
    }
    uint64_t v139 = 0;
    uint64_t v133 = &v139;
    uint64_t v134 = 0;
    if (!sub_1CBF528D8((uint64_t)&v133, (unsigned __int8 *)v7)) {
      goto LABEL_139;
    }
    uint64_t v138 = 0;
    uint64_t v137 = 0;
    if (v8 == 48)
    {
      uint64_t v133 = (llvm::APInt **)&v138;
      uint64_t v134 = &v137;
      uint64_t v135 = 0;
      int v14 = *(unsigned __int8 *)(v6 + 16);
      if (v14 != 5)
      {
        if (v14 == 48)
        {
          if (*(void *)(v6 - 64))
          {
            uint64_t v138 = *(void **)(v6 - 64);
            if (sub_1CBF528D8((uint64_t)&v134, *(unsigned __int8 **)(v6 - 32))) {
              goto LABEL_45;
            }
          }
        }
LABEL_30:
        uint64_t v4 = 0;
        goto LABEL_31;
      }
      if (*(_WORD *)(v6 + 18) != 20) {
        goto LABEL_30;
      }
      uint64_t v16 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
      if (!*(void *)v16) {
        goto LABEL_30;
      }
      uint64_t v138 = *(void **)v16;
      if ((sub_1CBF5295C((uint64_t)&v134, *(llvm::Constant **)(v16 + 32)) & 1) == 0) {
        goto LABEL_30;
      }
LABEL_45:
      LODWORD(v128) = *((_DWORD *)v137 + 2);
      if (v128 > 0x40) {
        operator new[]();
      }
      unint64_t v127 = 0;
      v131[0] = 0;
      if (v8 == 48) {
        llvm::APInt::smul_ov((const void **)v137, v139, v131, (llvm::APInt *)&v133);
      }
      else {
        llvm::APInt::umul_ov(v137, v139, v131, (uint64_t)&v133);
      }
      unint64_t v127 = v133;
      unsigned int v39 = v134;
      LODWORD(v128) = v134;
      BOOL v40 = v131[0];
      if (v131[0])
      {
        uint64_t v4 = 0;
      }
      else
      {
        char v41 = a2[16] - 28;
        uint64_t v42 = v138;
        uint64_t Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&v127, v26);
        if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
          uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)Splat);
        }
        __int16 v136 = 257;
        uint64_t v4 = llvm::BinaryOperator::Create(v41, v42, (uint64_t)Splat, (const char **)&v133, 0);
        unsigned int v39 = v128;
      }
      if (v39 >= 0x41 && v127) {
        MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
      }
      if (!v40) {
        return v4;
      }
      if (v8 == 48)
      {
LABEL_31:
        uint64_t v133 = (llvm::APInt **)&v138;
        uint64_t v134 = &v137;
        uint64_t v135 = 0;
        unsigned int v17 = *(unsigned __int8 *)(v6 + 16);
        if (v17 < 0x1C)
        {
          if (v17 != 5) {
            goto LABEL_95;
          }
          unsigned int v20 = *(unsigned __int16 *)(v6 + 18);
          HIDWORD(v22) = v20 - 13;
          LODWORD(v22) = v20 - 13;
          unsigned int v21 = v22 >> 1;
          if (v21 > 6 || ((1 << v21) & 0x47) == 0) {
            goto LABEL_95;
          }
        }
        else
        {
          HIDWORD(v19) = v17 - 41;
          LODWORD(v19) = v17 - 41;
          unsigned int v18 = v19 >> 1;
          if (v18 > 6 || ((1 << v18) & 0x47) == 0) {
            goto LABEL_95;
          }
          unsigned int v20 = v17 - 28;
        }
        if (v20 != 17
          || (*(unsigned char *)(v6 + 17) & 4) == 0
          || ((int v23 = *(_DWORD *)(v6 + 20), (v23 & 0x40000000) != 0)
            ? (uint64_t v24 = *(void **)(v6 - 8))
            : (uint64_t v24 = (void *)(v6 - 32 * (v23 & 0x7FFFFFF))),
              (int v44 = (void *)*v24) == 0
           || ((v138 = v44, int v45 = *(_DWORD *)(v6 + 20), (v45 & 0x40000000) != 0)
             ? (uint64_t v46 = *(void *)(v6 - 8))
             : (uint64_t v46 = v6 - 32 * (v45 & 0x7FFFFFF)),
               (sub_1CBF528D8((uint64_t)&v134, *(unsigned __int8 **)(v46 + 32)) & 1) == 0)))
        {
LABEL_95:
          uint64_t v133 = (llvm::APInt **)&v138;
          uint64_t v134 = &v137;
          uint64_t v135 = 0;
          if (sub_1CCA8A868(&v133, v6))
          {
            unsigned int v51 = v137;
            uint64_t v59 = *((unsigned int *)v137 + 2);
            int v53 = v137;
            if (v59 < 0x41)
            {
LABEL_104:
              unint64_t v52 = (v59 - 1);
              goto LABEL_105;
            }
            int v60 = 0;
            int64_t v61 = (unint64_t)(v59 + 63) >> 6;
            do
            {
              BOOL v56 = v61-- < 1;
              if (v56) {
                break;
              }
              unint64_t v62 = *(void *)(*(void *)v137 + 8 * v61);
              v60 += __clz(v62);
            }
            while (!v62);
            int v63 = v59 | 0xFFFFFFC0;
            if ((v59 & 0x3F) == 0) {
              int v63 = 0;
            }
            if ((v59 - v60 - v63) <= 0x40)
            {
              int v53 = *(llvm::APInt **)v137;
              goto LABEL_104;
            }
          }
          goto LABEL_129;
        }
LABEL_50:
        LODWORD(v128) = *((_DWORD *)v137 + 2);
        if (v128 > 0x40) {
          operator new[]();
        }
        unint64_t v127 = 0;
        if (sub_1CCA8684C(v139, v137, (llvm::APInt *)&v127, v8 == 48, v27))
        {
          char v30 = a2[16] - 28;
          uint64_t v31 = v138;
          uint64_t v32 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&v127, v28);
          if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
            uint64_t v32 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v32);
          }
          __int16 v136 = 257;
          uint64_t v4 = llvm::BinaryOperator::Create(v30, v31, (uint64_t)v32, (const char **)&v133, 0);
          char v33 = 0;
          *((unsigned char *)v4 + 17) = *((unsigned char *)v4 + 17) & 0xFD | a2[17] & 2;
        }
        else if (sub_1CCA8684C(v137, v139, (llvm::APInt *)&v127, v8 == 48, v29))
        {
          uint64_t v35 = v138;
          unsigned int v36 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&v127, v34);
          if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
            unsigned int v36 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v36);
          }
          __int16 v136 = 257;
          int v37 = llvm::BinaryOperator::Create(17, v35, (uint64_t)v36, (const char **)&v133, 0);
          uint64_t v4 = v37;
          if (v8 == 48) {
            char v38 = 0;
          }
          else {
            char v38 = *(unsigned char *)(v6 + 17) & 2;
          }
          char v33 = 0;
          char v47 = *((unsigned char *)v37 + 17) & 0xFD | v38;
          *((unsigned char *)v37 + 17) = v47;
          *((unsigned char *)v37 + 17) = v47 & 0xFB | *(unsigned char *)(v6 + 17) & 4;
        }
        else
        {
          char v33 = 1;
        }
        if (v128 >= 0x41 && v127) {
          MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
        }
        if ((v33 & 1) == 0) {
          return v4;
        }
        if (v8 == 48) {
          goto LABEL_95;
        }
LABEL_84:
        unint64_t v127 = (llvm::APInt **)&v138;
        uint64_t v128 = &v137;
        uint64_t v129 = 0;
        if (sub_1CC042974(&v127, v6))
        {
          unsigned int v51 = v137;
          unint64_t v52 = *((unsigned int *)v137 + 2);
          int v53 = v137;
          if (v52 >= 0x41)
          {
            int v54 = 0;
            int64_t v55 = (v52 + 63) >> 6;
            do
            {
              BOOL v56 = v55-- < 1;
              if (v56) {
                break;
              }
              unint64_t v57 = *(void *)(*(void *)v137 + 8 * v55);
              v54 += __clz(v57);
            }
            while (!v57);
            int v58 = v52 | 0xFFFFFFC0;
            if ((v52 & 0x3F) == 0) {
              int v58 = 0;
            }
            if ((v52 - v54 - v58) > 0x40) {
              goto LABEL_129;
            }
            int v53 = *(llvm::APInt **)v137;
          }
LABEL_105:
          if (*(void *)v53 < v52)
          {
            LODWORD(v128) = *((_DWORD *)v51 + 2);
            if (v128 > 0x40) {
              operator new[]();
            }
            unint64_t v127 = 0;
            if (*((_DWORD *)v51 + 2) > 0x40u)
            {
              unsigned int v132 = *((_DWORD *)v51 + 2);
              operator new[]();
            }
            uint64_t v64 = *(void *)v51;
            unsigned int v132 = *((_DWORD *)v51 + 2);
            *(void *)uint64_t v131 = 1 << v64;
            if (sub_1CCA8684C(v139, (llvm::APInt *)v131, (llvm::APInt *)&v127, v8 == 48, v50))
            {
              char v68 = a2[16] - 28;
              unint64_t v69 = v138;
              int v70 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&v127, v66);
              if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
                int v70 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v70);
              }
              __int16 v136 = 257;
              uint64_t v4 = llvm::BinaryOperator::Create(v68, v69, (uint64_t)v70, (const char **)&v133, 0);
              char v71 = 0;
              *((unsigned char *)v4 + 17) = *((unsigned char *)v4 + 17) & 0xFD | a2[17] & 2;
            }
            else if (sub_1CCA8684C((llvm::APInt *)v131, v139, (llvm::APInt *)&v127, v8 == 48, v67))
            {
              int64_t v72 = v138;
              unint64_t v73 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, (llvm::LLVMContext *)&v127, v48);
              if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
                unint64_t v73 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)), (uint64_t)v73);
              }
              __int16 v136 = 257;
              int v74 = llvm::BinaryOperator::Create(17, v72, (uint64_t)v73, (const char **)&v133, 0);
              uint64_t v4 = v74;
              char v75 = v8 == 48 ? 0 : *(unsigned char *)(v6 + 17) & 2;
              char v71 = 0;
              char v76 = *((unsigned char *)v74 + 17) & 0xFD | v75;
              *((unsigned char *)v74 + 17) = v76;
              *((unsigned char *)v74 + 17) = v76 & 0xFB | *(unsigned char *)(v6 + 17) & 4;
            }
            else
            {
              char v71 = 1;
            }
            if (v132 >= 0x41 && *(void *)v131) {
              MEMORY[0x1D25D9CB0](*(void *)v131, 0x1000C8000313F17);
            }
            if (v128 >= 0x41 && v127) {
              MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
            }
            if ((v71 & 1) == 0) {
              return v4;
            }
          }
        }
LABEL_129:
        uint64_t v77 = *((unsigned int *)v139 + 2);
        if (v77 > 0x40)
        {
          int v78 = 0;
          int64_t v79 = (unint64_t)(v77 + 63) >> 6;
          do
          {
            BOOL v56 = v79-- < 1;
            if (v56) {
              break;
            }
            unint64_t v80 = *(void *)(*(void *)v139 + 8 * v79);
            v78 += __clz(v80);
          }
          while (!v80);
          int v81 = v77 | 0xFFFFFFC0;
          if ((v77 & 0x3F) == 0) {
            int v81 = 0;
          }
          if (v78 + v81 == v77) {
            goto LABEL_139;
          }
        }
        else if (!*(void *)v139)
        {
          goto LABEL_139;
        }
        uint64_t v4 = (llvm::ZExtInst *)sub_1CC9D74E0((uint64_t)a1, a2, (uint64_t)v48, v49, (BOOL)v50);
        if (v4) {
          return v4;
        }
LABEL_139:
        if (sub_1CBF5250C((uint64_t)&v133, (llvm::Constant *)v6))
        {
          if (v8 != 48)
          {
            uint64_t v92 = (char *)operator new(0x60uLL);
            uint64_t v4 = (llvm::ZExtInst *)(v92 + 32);
            *((_DWORD *)v92 + 13) = *((_DWORD *)v92 + 13) & 0x38000000 | 1;
            *(void *)uint64_t v92 = 0;
            *((void *)v92 + 1) = 0;
            *((void *)v92 + 2) = 0;
            *((void *)v92 + 3) = v92 + 32;
            uint64_t v93 = a1[3];
            __int16 v136 = 257;
            char v94 = sub_1CB845F20(v93, 32, (void *)v7, v6, (uint64_t)&v133);
            __int16 v130 = 257;
            llvm::ZExtInst::ZExtInst(v4, v94, (llvm::Type *)v9, (const char **)&v127, 0);
            return v4;
          }
          uint64_t v82 = a1[3];
          __int16 v136 = 257;
          uint64_t v83 = sub_1CB844A3C(v82, (void *)v7, v6, (uint64_t)&v133, 0, 0);
          uint64_t v84 = a1[3];
          uint64_t v85 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 3uLL, 0);
          __int16 v136 = 257;
          int v86 = sub_1CB845F20(v84, 36, v83, (uint64_t)v85, (uint64_t)&v133);
          uint64_t v87 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 0, 0);
          __int16 v136 = 257;
          return sub_1CC199EFC((uint64_t)v86, (uint64_t *)v7, (uint64_t)v87, (const char **)&v133, 0, 0);
        }
        if (sub_1CCAB350C((uint64_t)a1, (llvm::UndefValue *)a2)) {
          return (llvm::Value *)a2;
        }
        unsigned int v89 = *(unsigned __int8 *)(v6 + 16);
        if (v89 == 5)
        {
          if (*(_WORD *)(v6 + 18) != 15
            || (uint64_t v95 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF), (v90 = *(void **)v95) == 0)
            || (uint64_t v91 = *(void *)(v95 + 32)) == 0)
          {
LABEL_158:
            if (v8 == 48) {
              goto LABEL_159;
            }
            goto LABEL_187;
          }
        }
        else
        {
          if (v89 != 43) {
            goto LABEL_158;
          }
          int v90 = *(void **)(v6 - 64);
          if (!v90) {
            goto LABEL_158;
          }
          uint64_t v91 = *(void *)(v6 - 32);
          if (!v91) {
            goto LABEL_158;
          }
        }
        int v96 = *(unsigned __int8 *)(v91 + 16);
        if (v8 == 48)
        {
          if (v96 == 5)
          {
            if (*(_WORD *)(v91 + 18) != 23) {
              goto LABEL_159;
            }
            unint64_t v110 = (void *)(v91 - 32 * (*(_DWORD *)(v91 + 20) & 0x7FFFFFF));
            if (v90 != (void *)*v110) {
              goto LABEL_159;
            }
            uint64_t v97 = v110[4];
          }
          else
          {
            if (v96 != 51 || v90 != *(void **)(v91 - 64)) {
              goto LABEL_159;
            }
            uint64_t v97 = *(void *)(v91 - 32);
          }
          if (v7 != v97)
          {
LABEL_159:
            if (v89 < 0x1C)
            {
              if (v89 != 5) {
                goto LABEL_199;
              }
              unsigned int v100 = *(unsigned __int16 *)(v6 + 18);
              HIDWORD(v102) = v100 - 13;
              LODWORD(v102) = v100 - 13;
              unsigned int v101 = v102 >> 1;
              if (v101 > 6 || ((1 << v101) & 0x47) == 0) {
                goto LABEL_199;
              }
            }
            else
            {
              HIDWORD(v99) = v89 - 41;
              LODWORD(v99) = v89 - 41;
              unsigned int v98 = v99 >> 1;
              if (v98 > 6 || ((1 << v98) & 0x47) == 0) {
                goto LABEL_199;
              }
              unsigned int v100 = v89 - 28;
            }
            if (v100 == 25 && (*(unsigned char *)(v6 + 17) & 4) != 0)
            {
              int v103 = *(_DWORD *)(v6 + 20);
              uint64_t v104 = (v103 & 0x40000000) != 0 ? *(void **)(v6 - 8) : (void *)(v6 - 32 * (v103 & 0x7FFFFFF));
              if (*v104 == v7)
              {
                uint64_t v106 = v104[4];
                if (v106)
                {
                  unsigned int v107 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1uLL, 0);
                  __int16 v136 = 257;
                  uint64_t v108 = llvm::BinaryOperator::Create(25, v107, v106, (const char **)&v133, 0);
                  uint64_t v4 = v108;
                  char v109 = *((unsigned char *)v108 + 17) | 4;
LABEL_217:
                  *((unsigned char *)v108 + 17) = v109;
                  return v4;
                }
              }
            }
LABEL_199:
            int v118 = *(unsigned __int8 *)(v7 + 16);
            if (v118 == 5)
            {
              if (*(_WORD *)(v7 + 18) != 17) {
                return 0;
              }
              int v121 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
              uint64_t v119 = *v121;
              uint64_t v120 = v121[4];
            }
            else
            {
              if (v118 != 45) {
                return 0;
              }
              uint64_t v119 = *(void *)(v7 - 64);
              uint64_t v120 = *(void *)(v7 - 32);
            }
            if (v6 == v119)
            {
              uint64_t v119 = v120;
              if (!v120) {
                return 0;
              }
            }
            else
            {
              uint64_t v4 = 0;
              if (!v119 || v6 != v120) {
                return v4;
              }
            }
            if (v8 == 48) {
              char v122 = 4;
            }
            else {
              char v122 = 2;
            }
            if ((*(unsigned char *)(v7 + 17) & v122) != 0)
            {
              int v123 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1uLL, 0);
              sub_1CC9D28DC((uint64_t)a1, (uint64_t)a2, 0, (uint64_t)v123);
              sub_1CC9D28DC((uint64_t)a1, (uint64_t)a2, 1u, v119);
              return (llvm::Value *)a2;
            }
            return 0;
          }
        }
        else
        {
          if (v96 == 5)
          {
            if (*(_WORD *)(v91 + 18) != 22) {
              goto LABEL_187;
            }
            int v111 = (void *)(v91 - 32 * (*(_DWORD *)(v91 + 20) & 0x7FFFFFF));
            if (v90 != (void *)*v111) {
              goto LABEL_187;
            }
            uint64_t v105 = v111[4];
          }
          else
          {
            if (v96 != 50 || v90 != *(void **)(v91 - 64)) {
              goto LABEL_187;
            }
            uint64_t v105 = *(void *)(v91 - 32);
          }
          if (v7 != v105)
          {
LABEL_187:
            unsigned int v112 = v89 - 28;
            if (v89 < 0x1C)
            {
              if (v89 != 5) {
                goto LABEL_199;
              }
              unsigned int v112 = *(unsigned __int16 *)(v6 + 18);
              unsigned int v113 = v112 - 13;
            }
            else
            {
              unsigned int v113 = v89 - 41;
            }
            HIDWORD(v115) = v113;
            LODWORD(v115) = v113;
            unsigned int v114 = v115 >> 1;
            if (v114 <= 6 && ((1 << v114) & 0x47) != 0 && v112 == 25 && (*(unsigned char *)(v6 + 17) & 2) != 0)
            {
              int v116 = *(_DWORD *)(v6 + 20);
              uint64_t v117 = (v116 & 0x40000000) != 0 ? *(void **)(v6 - 8) : (void *)(v6 - 32 * (v116 & 0x7FFFFFF));
              if (*v117 == v7)
              {
                uint64_t v124 = v117[4];
                if (v124)
                {
                  uint64_t v125 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1uLL, 0);
                  __int16 v136 = 257;
                  uint64_t v108 = llvm::BinaryOperator::Create(25, v125, v124, (const char **)&v133, 0);
                  uint64_t v4 = v108;
                  char v109 = *((unsigned char *)v108 + 17) | 2;
                  goto LABEL_217;
                }
              }
            }
            goto LABEL_199;
          }
        }
        char v126 = a2[16] - 28;
        __int16 v136 = 257;
        return llvm::BinaryOperator::Create(v126, v90, v7, (const char **)&v133, 0);
      }
LABEL_49:
      unint64_t v127 = (llvm::APInt **)&v138;
      uint64_t v128 = &v137;
      uint64_t v129 = 0;
      if ((sub_1CCA8A7A0(&v127, v6) & 1) == 0) {
        goto LABEL_84;
      }
      goto LABEL_50;
    }
    unint64_t v127 = (llvm::APInt **)&v138;
    uint64_t v128 = &v137;
    uint64_t v129 = 0;
    int v15 = *(unsigned __int8 *)(v6 + 16);
    if (v15 == 5)
    {
      if (*(_WORD *)(v6 + 18) == 19)
      {
        uint64_t v25 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
        if (*(void *)v25)
        {
          uint64_t v138 = *(void **)v25;
          if (sub_1CBF5295C((uint64_t)&v128, *(llvm::Constant **)(v25 + 32))) {
            goto LABEL_45;
          }
        }
      }
    }
    else if (v15 == 47)
    {
      if (*(void *)(v6 - 64))
      {
        uint64_t v138 = *(void **)(v6 - 64);
        if (sub_1CBF528D8((uint64_t)&v128, *(unsigned __int8 **)(v6 - 32))) {
          goto LABEL_45;
        }
      }
    }
    uint64_t v4 = 0;
    goto LABEL_49;
  }

  return (llvm::Value *)sub_1CC9D28DC((uint64_t)a1, (uint64_t)a2, 1u, (uint64_t)v10);
}

llvm::Instruction *sub_1CCA865E4(uint64_t a1, uint64_t a2, llvm::AssumptionCache *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || *(void *)(v3 + 8)) {
    return 0;
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(a1 + 18) != 26) {
      goto LABEL_17;
    }
    int v14 = (void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    uint64_t v15 = *v14;
    uint64_t v16 = *(void *)(*v14 + 8);
    if (!v16 || *(void *)(v16 + 8)) {
      goto LABEL_17;
    }
    int v19 = *(unsigned __int8 *)(v15 + 16);
    if (v19 == 5)
    {
      if (*(_WORD *)(v15 + 18) != 25) {
        goto LABEL_17;
      }
      uint64_t v22 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
      uint64_t v12 = *(llvm::Constant **)v22;
      if (!*(void *)v22) {
        goto LABEL_17;
      }
      uint64_t v13 = *(void *)(v22 + 32);
      if (!v13) {
        goto LABEL_17;
      }
    }
    else
    {
      if (v19 != 53) {
        goto LABEL_17;
      }
      uint64_t v12 = *(llvm::Constant **)(v15 - 64);
      if (!v12) {
        goto LABEL_17;
      }
      uint64_t v13 = *(void *)(v15 - 32);
      if (!v13) {
        goto LABEL_17;
      }
    }
    uint64_t v21 = v14[4];
    if (!v21) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v8 != 54) {
      goto LABEL_17;
    }
    uint64_t v9 = *(void *)(a1 - 64);
    uint64_t v10 = *(void *)(v9 + 8);
    if (!v10 || *(void *)(v10 + 8)) {
      goto LABEL_17;
    }
    int v11 = *(unsigned __int8 *)(v9 + 16);
    if (v11 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 25) {
        goto LABEL_17;
      }
      uint64_t v20 = v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF);
      uint64_t v12 = *(llvm::Constant **)v20;
      if (!*(void *)v20) {
        goto LABEL_17;
      }
      uint64_t v13 = *(void *)(v20 + 32);
      if (!v13) {
        goto LABEL_17;
      }
    }
    else
    {
      if (v11 != 53) {
        goto LABEL_17;
      }
      uint64_t v12 = *(llvm::Constant **)(v9 - 64);
      if (!v12) {
        goto LABEL_17;
      }
      uint64_t v13 = *(void *)(v9 - 32);
      if (!v13) {
        goto LABEL_17;
      }
    }
    uint64_t v21 = *(void *)(a1 - 32);
    if (!v21) {
      goto LABEL_17;
    }
  }
  if (sub_1CBF5250C((uint64_t)v27, v12))
  {
    uint64_t v23 = *(void *)(a2 + 24);
    __int16 v28 = 257;
    uint64_t v24 = sub_1CB84494C(v23, v13, v21, (uint64_t)v27, 0, 0);
    uint64_t v25 = *(void *)(a2 + 24);
    __int16 v28 = 257;
    return sub_1CC242524(v25, (uint64_t)v12, (uint64_t)v24, (uint64_t)v27, 0, 0);
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
LABEL_17:
  uint64_t result = 0;
  if (v8 >= 0x1C && v8 - 59 >= 0xFFFFFFEE && v8 - 55 >= 0xFFFFFFFE)
  {
    if (llvm::isKnownToBeAPowerOfTwo(*(llvm **)(a1 - 64), *(const llvm::Value **)(a2 + 80), 0, 0, *(void *)(a2 + 56), a3, *(const llvm::Instruction **)(a2 + 72), (const llvm::DominatorTree *)1, v26))
    {
      uint64_t v17 = sub_1CCA865E4(*(void *)(a1 - 64), a2, a3);
      if (v17) {
        sub_1CC9D28DC(a2, a1, 0, v17);
      }
      int v18 = *(unsigned __int8 *)(a1 + 16);
      if ((v18 == 53 || v18 == 54) && (*(unsigned char *)(a1 + 17) & 2) == 0)
      {
        *(unsigned char *)(a1 + 17) |= 2u;
        return (llvm::Instruction *)a1;
      }
      if (v17) {
        return (llvm::Instruction *)a1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1CCA8684C(llvm::APInt *this, llvm::APInt *a2, llvm::APInt *a3, int a4, llvm::APInt *a5)
{
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8 <= 0x40)
  {
    uint64_t v9 = *(void *)a2;
    if (!*(void *)a2) {
      return 0;
    }
LABEL_10:
    if (!a4)
    {
      unsigned int v25 = *((_DWORD *)this + 2);
      if (v25 > 0x40) {
        operator new[]();
      }
      uint64_t v24 = 0;
      llvm::APInt::udivrem(this, a2, a3, (llvm::APInt *)&v24, a5);
      goto LABEL_23;
    }
    unsigned int v16 = *((_DWORD *)this + 2);
    if (v16 > 0x40)
    {
      if (((*(void *)(*(void *)this + 8 * ((v16 - 1) >> 6)) >> (v16 - 1)) & 1) == 0
        || (v23 = v9, v22 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this), uint64_t v9 = v23, v22 != v16 - 1))
      {
        unsigned int v25 = v16;
        goto LABEL_36;
      }
    }
    else if (*(void *)this != 1 << (v16 - 1))
    {
      unsigned int v25 = *((_DWORD *)this + 2);
LABEL_22:
      uint64_t v24 = 0;
      llvm::APInt::sdivrem(this, a2, a3, (llvm::APInt *)&v24, a5);
LABEL_23:
      if (v25 <= 0x40) {
        return v24 == 0;
      }
      int v17 = 0;
      int64_t v18 = ((unint64_t)v25 + 63) >> 6;
      do
      {
        BOOL v12 = v18-- < 1;
        if (v12) {
          break;
        }
        unint64_t v19 = *(void *)(v24 + 8 * v18);
        v17 += __clz(v19);
      }
      while (!v19);
      unsigned int v20 = v25 | 0xFFFFFFC0;
      if ((v25 & 0x3F) == 0) {
        unsigned int v20 = 0;
      }
      BOOL v14 = v17 + v20 == v25;
      if (v24) {
        MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
      return v14;
    }
    if (!v8) {
      return 0;
    }
    if (v8 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase(a2) == v8) {
        return 0;
      }
    }
    else if (v9 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v8)
    {
      return 0;
    }
    unsigned int v25 = v16;
    if (v16 <= 0x40) {
      goto LABEL_22;
    }
LABEL_36:
    operator new[]();
  }
  int v10 = 0;
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v9 = *(void *)a2;
  do
  {
    BOOL v12 = v11-- < 1;
    if (v12) {
      break;
    }
    unint64_t v13 = *(void *)(v9 + 8 * v11);
    v10 += __clz(v13);
  }
  while (!v13);
  BOOL v14 = 0;
  int v15 = v8 | 0xFFFFFFC0;
  if ((v8 & 0x3F) == 0) {
    int v15 = 0;
  }
  if (v10 + v15 != v8) {
    goto LABEL_10;
  }
  return v14;
}

llvm::Value *sub_1CCA86B18(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v8 = (unsigned __int8 *)*((void *)a2 - 8);
  uint64_t v9 = (llvm::Constant *)*((void *)a2 - 4);
  long long v10 = *(_OWORD *)(a1 + 120);
  long long v11 = *(_OWORD *)(a1 + 104);
  long long v70 = *(_OWORD *)(a1 + 88);
  long long v71 = v11;
  uint64_t v73 = *((void *)&v10 + 1);
  int64_t v72 = a2;
  BOOL v12 = sub_1CC040494((llvm *)0x13, v8, v9, (llvm::Constant **)&v70, (const llvm::DataLayout *)3, a6);
  if (v12) {
    return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v12);
  }
  unint64_t v14 = sub_1CC9D812C(a1, a2);
  if (!v14)
  {
    unint64_t v14 = (unint64_t)sub_1CCA85560((void *)a1, a2);
    if (!v14)
    {
      uint64_t v16 = *((void *)a2 - 8);
      int v17 = (unsigned __int8 *)*((void *)a2 - 4);
      char v68 = 0;
      unint64_t v69 = 0;
      int64_t v67 = 0;
      *(void *)&long long v70 = &v69;
      *((void *)&v70 + 1) = &v68;
      *(void *)&long long v71 = 0;
      int v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 5)
      {
        if (*(_WORD *)(v16 + 18) != 26) {
          goto LABEL_16;
        }
        uint64_t v19 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
        if (!*(void *)v19) {
          goto LABEL_16;
        }
        unint64_t v69 = *(llvm::ConstantInt ****)v19;
        if ((sub_1CBF5295C((uint64_t)&v70 + 8, *(llvm::Constant **)(v19 + 32)) & 1) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v18 != 54) {
          goto LABEL_16;
        }
        if (!*(void *)(v16 - 64)) {
          goto LABEL_16;
        }
        unint64_t v69 = *(llvm::ConstantInt ****)(v16 - 64);
        if (!sub_1CBF528D8((uint64_t)&v70 + 8, *(unsigned __int8 **)(v16 - 32))) {
          goto LABEL_16;
        }
      }
      uint64_t v65 = &v67;
      uint64_t v66 = 0;
      if (!sub_1CBF528D8((uint64_t)&v65, v17)) {
        goto LABEL_16;
      }
      BOOL v64 = 0;
      llvm::APInt::ushl_ov(v67, v68, &v64, (unsigned int *)&v65);
      BOOL v42 = v64;
      if (v64)
      {
LABEL_74:
        if (v66 >= 0x41 && v65) {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
        }
        if (!v42) {
          return (llvm::Value *)v14;
        }
LABEL_16:
        unsigned int v20 = *(llvm::Type ****)a2;
        if (sub_1CC0423A0((uint64_t)&v70, (llvm::Constant *)v17))
        {
          uint64_t v21 = *(void *)(a1 + 24);
          LOWORD(v72) = 257;
          int v22 = sub_1CB845F20(v21, 35, (void *)v16, (uint64_t)v17, (uint64_t)&v70);
          LOWORD(v72) = 257;
          return llvm::CastInst::CreateZExtOrBitCast(v22, v20, (const char **)&v70, 0, v23);
        }
        *(void *)&long long v70 = &v69;
        if (sub_1CBC5BEAC((void **)&v70, (uint64_t)v17))
        {
          int v26 = *((_DWORD *)*v69 + 2);
          if ((v26 & 0xFE) == 0x12) {
            int v26 = *(_DWORD *)(*(void *)(*v69)[2] + 8);
          }
          if (v26 == 269)
          {
            uint64_t v27 = *(void *)(a1 + 24);
            AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v20, v24, v25);
            LOWORD(v72) = 257;
            int v22 = sub_1CB845F20(v27, 32, (void *)v16, (uint64_t)AllOnesValue, (uint64_t)&v70);
            LOWORD(v72) = 257;
            return llvm::CastInst::CreateZExtOrBitCast(v22, v20, (const char **)&v70, 0, v23);
          }
        }
        unint64_t v14 = (unint64_t)sub_1CCA870B0((uint64_t)a2, *(void *)(a1 + 24));
        if (v14) {
          return (llvm::Value *)v14;
        }
        unsigned int v29 = *(unsigned __int8 *)(v16 + 16);
        if (v29 < 0x1C)
        {
          if (v29 != 5) {
            goto LABEL_52;
          }
          unsigned int v32 = *(unsigned __int16 *)(v16 + 18);
          HIDWORD(v34) = v32 - 13;
          LODWORD(v34) = v32 - 13;
          unsigned int v33 = v34 >> 1;
          if (v33 > 6 || ((1 << v33) & 0x47) == 0) {
            goto LABEL_52;
          }
        }
        else
        {
          HIDWORD(v31) = v29 - 41;
          LODWORD(v31) = v29 - 41;
          unsigned int v30 = v31 >> 1;
          if (v30 > 6 || ((1 << v30) & 0x47) == 0) {
            goto LABEL_52;
          }
          unsigned int v32 = v29 - 28;
        }
        if (v32 == 17 && (*(unsigned char *)(v16 + 17) & 2) != 0)
        {
          int v35 = *(_DWORD *)(v16 + 20);
          unsigned int v36 = (v35 & 0x40000000) != 0 ? *(uint64_t **)(v16 - 8) : (uint64_t *)(v16 - 32 * (v35 & 0x7FFFFFF));
          uint64_t v37 = *v36;
          if (*v36)
          {
            uint64_t v38 = v36[4];
            if (v38)
            {
              if ((sub_1CCA8A930(*v36, &v69, (uint64_t)v17) & 1) != 0
                || (*(void *)&long long v70 = &v69, *((void *)&v70 + 1) = v37, sub_1CCA8A9FC((uint64_t)&v70, (uint64_t)v17)))
              {
                uint64_t v39 = (uint64_t)v69;
                LOWORD(v72) = 257;
                BOOL v40 = (void *)v38;
                return llvm::BinaryOperator::Create(19, v40, v39, (const char **)&v70, 0);
              }
              if ((sub_1CCA8A930(v38, &v69, (uint64_t)v17) & 1) != 0
                || (*(void *)&long long v70 = &v69, *((void *)&v70 + 1) = v38, sub_1CCA8A9FC((uint64_t)&v70, (uint64_t)v17)))
              {
                uint64_t v39 = (uint64_t)v69;
                LOWORD(v72) = 257;
                BOOL v40 = (void *)v37;
                return llvm::BinaryOperator::Create(19, v40, v39, (const char **)&v70, 0);
              }
            }
          }
        }
LABEL_52:
        if (!sub_1CCA87300(*(void *)(a1 + 24), (uint64_t)v17, 0, 0)) {
          return 0;
        }
        uint64_t v45 = sub_1CCA87300(*(void *)(a1 + 24), (uint64_t)v17, 0, 1);
        uint64_t v46 = *(void *)(a1 + 24);
        if ((a2[23] & 0x10) == 0)
        {
          uint64_t v57 = 0;
          BOOL v56 = &byte_1CFBCE98E;
          goto LABEL_63;
        }
        uint64_t v47 = ***(void ***)a2;
        uint64_t v48 = *(void *)(v47 + 152);
        uint64_t v49 = *(unsigned int *)(v47 + 168);
        if (v49)
        {
          LODWORD(v50) = (v49 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          unsigned int v51 = (void *)(v48 + 16 * v50);
          unint64_t v52 = (unsigned char *)*v51;
          if ((unsigned char *)*v51 == a2)
          {
LABEL_62:
            int64_t v55 = (void *)v51[1];
            uint64_t v58 = *v55;
            BOOL v56 = (char *)(v55 + 2);
            uint64_t v57 = v58;
LABEL_63:
            LOWORD(v72) = 261;
            *(void *)&long long v70 = v56;
            *((void *)&v70 + 1) = v57;
            BOOL v12 = sub_1CC2429AC(v46, v16, v45, (uint64_t)&v70, (a2[17] & 2) != 0);
            return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v12);
          }
          int v53 = 1;
          while (v52 != (unsigned char *)-4096)
          {
            int v54 = v50 + v53++;
            uint64_t v50 = v54 & (v49 - 1);
            unint64_t v52 = *(unsigned char **)(v48 + 16 * v50);
            if (v52 == a2)
            {
              unsigned int v51 = (void *)(v48 + 16 * v50);
              goto LABEL_62;
            }
          }
        }
        unsigned int v51 = (void *)(v48 + 16 * v49);
        goto LABEL_62;
      }
      if ((a2[17] & 2) != 0)
      {
        unsigned int v43 = *(unsigned __int8 *)(v16 + 16);
        if (v43 >= 0x1C)
        {
          int v44 = 0;
          if (v43 > 0x37 || ((1 << v43) & 0xC1800000000000) == 0) {
            goto LABEL_70;
          }
          goto LABEL_68;
        }
        if (v43 == 5)
        {
          int v44 = 0;
          unsigned int v59 = *(unsigned __int16 *)(v16 + 18);
          if (v59 > 0x1B || ((1 << v59) & 0xC180000) == 0) {
            goto LABEL_70;
          }
LABEL_68:
          int v44 = (*(unsigned __int8 *)(v16 + 17) >> 1) & 1;
LABEL_70:
          int v60 = v69;
          int64_t v61 = *v69;
          uint64_t Splat = llvm::ConstantInt::get(**v69, (llvm::LLVMContext *)&v65, v41);
          if ((v61[1] & 0xFE) == 0x12) {
            uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v61 + 8) | ((unint64_t)(*((_DWORD *)v61 + 2) == 19) << 32)), (uint64_t)Splat);
          }
          LOWORD(v72) = 257;
          int v63 = llvm::BinaryOperator::Create(19, v60, (uint64_t)Splat, (const char **)&v70, 0);
          unint64_t v14 = (unint64_t)v63;
          if (v44) {
            *((unsigned char *)v63 + 17) |= 2u;
          }
          goto LABEL_74;
        }
      }
      int v44 = 0;
      goto LABEL_70;
    }
  }
  return (llvm::Value *)v14;
}

llvm::ZExtInst *sub_1CCA870B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16) - 28;
  uint64_t v4 = *(void *)(a1 - 64);
  uint64_t v5 = *(void *)(a1 - 32);
  uint64_t v6 = *(llvm::Type **)a1;
  uint64_t v24 = 0;
  unsigned int v25 = 0;
  v21[0] = &v25;
  if (sub_1CBC5BE40(v21, v4) && (uint64_t v23 = &v24, sub_1CBC5BE40(&v23, v5)) && *v25 == *v24)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if (v7 && !*(void *)(v7 + 8) || (uint64_t v10 = *(void *)(v5 + 8)) != 0 && !*(void *)(v10 + 8))
    {
      __int16 v22 = 257;
      long long v11 = sub_1CB844E98(a2, v3, (uint64_t)v25, (uint64_t)v24, (uint64_t)v21, 0);
      BOOL v12 = operator new(0x60uLL);
      v12[13] = v12[13] & 0x38000000 | 1;
      unint64_t v13 = (llvm::ZExtInst *)(v12 + 8);
      *(void *)BOOL v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = v12 + 8;
      __int16 v22 = 257;
      return llvm::ZExtInst::ZExtInst(v13, v11, v6, (const char **)v21, 0);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 8);
  }
  v21[0] = &v25;
  if (!v7
    || *(void *)(v7 + 8)
    || !sub_1CBC5BE40(v21, v4)
    || (*(unsigned __int8 *)(v5 + 16) <= 0x14u ? (BOOL v8 = v5 == 0) : (BOOL v8 = 1), v8))
  {
    uint64_t v23 = &v25;
    uint64_t v9 = *(void *)(v5 + 8);
    if (!v9 || *(void *)(v9 + 8) || !sub_1CBC5BE40(&v23, v5) || *(unsigned __int8 *)(v4 + 16) > 0x14u) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = v5;
  }
  unint64_t v14 = sub_1CC56C0C0((llvm *)0x26, (llvm::detail::IEEEFloat *)v4, *v25, 0);
  if (sub_1CC56C0C0((llvm *)0x27, v14, v6, 0) == (llvm::detail::IEEEFloat *)v4)
  {
    uint64_t v16 = v25;
    if (*(unsigned __int8 *)(v5 + 16) > 0x14u)
    {
      __int16 v22 = 257;
      uint64_t v17 = a2;
      uint64_t v18 = v3;
      uint64_t v19 = (llvm::Constant **)v14;
    }
    else
    {
      __int16 v22 = 257;
      uint64_t v17 = a2;
      uint64_t v18 = v3;
      uint64_t v19 = v25;
      uint64_t v16 = (llvm::Constant **)v14;
    }
    long long v11 = sub_1CB844E98(v17, v18, (uint64_t)v19, (uint64_t)v16, (uint64_t)v21, 0);
    unsigned int v20 = operator new(0x60uLL);
    v20[13] = v20[13] & 0x38000000 | 1;
    unint64_t v13 = (llvm::ZExtInst *)(v20 + 8);
    *(void *)unsigned int v20 = 0;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    *((void *)v20 + 3) = v20 + 8;
    __int16 v22 = 257;
    return llvm::ZExtInst::ZExtInst(v13, v11, v6, (const char **)v21, 0);
  }
  return 0;
}

uint64_t sub_1CCA87300(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (sub_1CC04A274((uint64_t)v39, (llvm::Constant *)a2))
  {
    if (a4) {
      return (uint64_t)llvm::ConstantExpr::getExactLogBase2((llvm::ConstantExpr *)a2, v8);
    }
    return -1;
  }
  if (a3 == 6) {
    return 0;
  }
  uint64_t v11 = (a3 + 1);
  uint64_t v36 = 0;
  v39[0] = &v36;
  if (!sub_1CBC5BE40(v39, a2) || (uint64_t v12 = sub_1CCA87300(a1, v36, (a3 + 1), a4)) == 0)
  {
    int v17 = *(unsigned __int8 *)(a2 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 25) {
        goto LABEL_42;
      }
      unsigned int v20 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      uint64_t v18 = *v20;
      if (!*v20) {
        goto LABEL_42;
      }
      uint64_t v36 = *v20;
      uint64_t v19 = v20[4];
      if (!v19) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v17 != 53)
      {
LABEL_36:
        if (v17 == 85)
        {
          uint64_t v26 = sub_1CCA87300(a1, *(void *)(a2 - 64), v11, a4);
          if (v26)
          {
            uint64_t v27 = (llvm::Value *)v26;
            __int16 v28 = (llvm::Value *)sub_1CCA87300(a1, *(void *)(a2 - 32), v11, a4);
            if (v28)
            {
              if (a4)
              {
                unsigned int v29 = *(llvm::Value **)(a2 - 96);
                __int16 v40 = 257;
                return (uint64_t)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, v29, v27, v28, (const llvm::Twine *)v39, 0);
              }
              return -1;
            }
          }
        }
LABEL_42:
        if (sub_1CC9FAA9C(a2))
        {
          uint64_t v30 = *(void *)(a2 + 8);
          if (v30)
          {
            if (!*(void *)(v30 + 8) && (*(_DWORD *)(*(void *)(a2 - 32) + 36) - 305) <= 1)
            {
              uint64_t v31 = sub_1CCA87300(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v11, a4);
              if (v31)
              {
                unsigned int v32 = (llvm::Value *)v31;
                unsigned int v33 = (llvm::Value *)sub_1CCA87300(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), v11, a4);
                if (v33) {
                  uint64_t v10 = -1;
                }
                else {
                  uint64_t v10 = 0;
                }
                if (v33 && a4)
                {
                  int v34 = *(_DWORD *)(*(void *)(a2 - 32) + 36);
                  __int16 v40 = 257;
                  return llvm::IRBuilderBase::CreateBinaryIntrinsic((llvm::IRBuilderBase *)a1, v34, v32, v33, 0, (const llvm::Twine *)v39);
                }
                return v10;
              }
            }
          }
        }
        return 0;
      }
      uint64_t v18 = *(void *)(a2 - 64);
      if (!v18) {
        goto LABEL_42;
      }
      uint64_t v36 = *(void *)(a2 - 64);
      uint64_t v19 = *(void *)(a2 - 32);
      if (!v19) {
        goto LABEL_42;
      }
    }
    uint64_t v21 = (void *)sub_1CCA87300(a1, v18, v11, a4);
    if (v21)
    {
      if (a4)
      {
        __int16 v40 = 257;
        return (uint64_t)sub_1CB844A3C(a1, v21, v19, (uint64_t)v39, 0, 0);
      }
      return -1;
    }
    int v17 = *(unsigned __int8 *)(a2 + 16);
    goto LABEL_36;
  }
  if (!a4) {
    return -1;
  }
  uint64_t v10 = v12;
  uint64_t v13 = *(void *)a2;
  __int16 v38 = 257;
  if (*(void *)v12 != v13)
  {
    if (*(unsigned __int8 *)(v12 + 16) <= 0x14u)
    {
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 39, v12, v13);
      if (v10) {
        BOOL v22 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22)
      {
        (*(void (**)(void, uint64_t, unsigned char *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v10, v37, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v23 = *(unsigned int *)(a1 + 8);
        if (v23)
        {
          uint64_t v24 = *(void *)a1;
          uint64_t v25 = v24 + 16 * v23;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v10, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
            v24 += 16;
          }
          while (v24 != v25);
        }
      }
    }
    else
    {
      __int16 v40 = 257;
      uint64_t v10 = (uint64_t)llvm::CastInst::Create(39, v12, v13, (const char **)v39, 0);
      (*(void (**)(void, uint64_t, unsigned char *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v10, v37, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14)
      {
        uint64_t v15 = *(void *)a1;
        uint64_t v16 = v15 + 16 * v14;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v10, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
          v15 += 16;
        }
        while (v15 != v16);
      }
    }
  }
  return v10;
}

llvm::Value *sub_1CCA876CC(uint64_t a1, uint64_t ***a2)
{
  uint64_t v4 = (unsigned __int8 *)*(a2 - 8);
  uint64_t v5 = (llvm::Constant *)*(a2 - 4);
  long long v6 = *(_OWORD *)(a1 + 120);
  long long v7 = *(_OWORD *)(a1 + 104);
  long long v95 = *(_OWORD *)(a1 + 88);
  long long v96 = v7;
  uint64_t v98 = *((void *)&v6 + 1);
  uint64_t v97 = a2;
  BOOL v8 = sub_1CC02BAA0(v4, v5, (llvm::Constant **)&v95, (const llvm::DataLayout *)3);
  if (v8) {
    return (llvm::Value *)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v8);
  }
  unint64_t v9 = sub_1CC9D812C(a1, (unsigned __int8 *)a2);
  if (v9) {
    return (llvm::Value *)v9;
  }
  unint64_t v9 = (unint64_t)sub_1CCA85560((void *)a1, (unsigned __int8 *)a2);
  if (v9) {
    return (llvm::Value *)v9;
  }
  uint64_t v10 = (llvm::Value *)*(a2 - 8);
  uint64_t v11 = (llvm::Constant *)*(a2 - 4);
  uint64_t v12 = *a2;
  char v94 = 0;
  if (sub_1CBF687D0((uint64_t)&v91, v11)) {
    goto LABEL_47;
  }
  *(void *)&long long v95 = &v94;
  if (sub_1CBC5BEAC((void **)&v95, (uint64_t)v11))
  {
    int v34 = *(_DWORD *)(*v94 + 8);
    if ((v34 & 0xFE) == 0x12) {
      int v34 = *(_DWORD *)(**(void **)(*v94 + 16) + 8);
    }
    if (v34 == 269)
    {
LABEL_47:
      LOWORD(v97) = 257;
      return llvm::BinaryOperator::CreateNeg(v10, (llvm::Value *)&v95, 0, v13);
    }
  }
  if (sub_1CC03F5D4((uint64_t)&v95, (unsigned __int8 *)v11))
  {
    int64_t v72 = operator new(0x60uLL);
    uint64_t v73 = (llvm::Value *)(v72 + 8);
    v72[13] = v72[13] & 0x38000000 | 1;
    *(void *)int64_t v72 = 0;
    *((void *)v72 + 1) = 0;
    *((void *)v72 + 2) = 0;
    *((void *)v72 + 3) = v72 + 8;
    uint64_t v74 = *(void *)(a1 + 24);
    LOWORD(v97) = 257;
    char v75 = v10;
    uint64_t v10 = v73;
    char v76 = sub_1CB845F20(v74, 32, v75, (uint64_t)v11, (uint64_t)&v95);
    __int16 v93 = 257;
    llvm::ZExtInst::ZExtInst(v10, v76, (llvm::Type *)v12, &v91, 0);
    return v10;
  }
  if ((*((unsigned char *)a2 + 17) & 2) == 0
    || (!sub_1CC04A274((uint64_t)&v95, v11) || !sub_1CCA79260((int)&v91, v11)) && !sub_1CCA8A344(v11))
  {
    int v90 = 0;
    long long v95 = (unint64_t)&v90;
    if (!sub_1CBF528D8((uint64_t)&v95, (unsigned __int8 *)v11)) {
      goto LABEL_9;
    }
    uint64_t v91 = 0;
    *(void *)&long long v95 = &v91;
    uint64_t v26 = *((void *)v10 + 1);
    if (v26 && !*(void *)(v26 + 8) && sub_1CBC5BEAC((void **)&v95, (uint64_t)v10))
    {
      uint64_t v65 = *(llvm::Type **)v91;
      if ((*(_DWORD *)(*(void *)v91 + 8) & 0xFE) == 0x12) {
        uint64_t v65 = (llvm::Type *)**((void **)v65 + 2);
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v65);
      int v67 = *((_DWORD *)v90 + 2);
      if (v67 - sub_1CBAB1CB8(v90) + 1 <= PrimitiveSizeInBits)
      {
        char v68 = sub_1CC56C0C0((llvm *)0x26, v11, *(llvm::Constant **)v91, 0);
        uint64_t v69 = *(void *)(a1 + 24);
        LOWORD(v97) = 257;
        long long v70 = sub_1CC57DBF8(v69, (uint64_t)v91, (uint64_t)v68, (uint64_t)&v95, 0);
        long long v71 = operator new(0x60uLL);
        v71[13] = v71[13] & 0x38000000 | 1;
        uint64_t v10 = (llvm::Value *)(v71 + 8);
        *(void *)long long v71 = 0;
        *((void *)v71 + 1) = 0;
        *((void *)v71 + 2) = 0;
        *((void *)v71 + 3) = v71 + 8;
        LOWORD(v97) = 257;
        llvm::SExtInst::SExtInst((llvm::SExtInst *)(v71 + 8), v70, (llvm::Type *)v12, (const char **)&v95, 0);
        return v10;
      }
    }
    unsigned int v27 = *((_DWORD *)v90 + 2);
    if (v27 > 0x40)
    {
      if (((*(void *)(*(void *)v90 + 8 * ((v27 - 1) >> 6)) >> (v27 - 1)) & 1) != 0
        && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v90) == v27 - 1)
      {
        goto LABEL_9;
      }
    }
    else if (*(void *)v90 == 1 << (v27 - 1))
    {
      goto LABEL_9;
    }
    *((void *)&v95 + 1) = &v94;
    if (sub_1CCA8AAD0((uint64_t)&v95, (uint64_t)v10))
    {
      unsigned int v89 = *((_DWORD *)v90 + 2);
      if (v89 > 0x40) {
        operator new[]();
      }
      uint64_t v88 = *(void *)v90;
      sub_1CBA14940((uint64_t)&v88);
      llvm::APInt::operator++((uint64_t)&v88);
      DWORD2(v95) = v89;
      *(void *)&long long v95 = v88;
      unsigned int v89 = 0;
      int v78 = llvm::ConstantInt::get((llvm::ConstantInt **)v12, (llvm::Type *)&v95, v77);
      if (DWORD2(v95) >= 0x41 && (void)v95) {
        MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
      }
      if (v89 >= 0x41 && v88) {
        MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
      }
      LOWORD(v97) = 257;
      uint64_t v10 = llvm::BinaryOperator::Create(20, v94, (uint64_t)v78, (const char **)&v95, 0);
      *((unsigned char *)v10 + 17) = *((unsigned char *)v10 + 17) & 0xFD | *((unsigned char *)a2 + 17) & 2;
      return v10;
    }
LABEL_9:
    *(void *)uint64_t v87 = 0;
    *((void *)&v95 + 1) = &v94;
    *(void *)&long long v96 = v87;
    int v14 = *((unsigned __int8 *)a2 + 16);
    if (v14 == 48)
    {
      uint64_t v15 = (uint64_t)*(a2 - 8);
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        if (!*(void *)(v16 + 8))
        {
          if (sub_1CCA8AAD0((uint64_t)&v95, v15))
          {
            uint64_t v17 = (uint64_t)*(a2 - 4);
            if (v17)
            {
LABEL_51:
              *(void *)uint64_t v87 = v17;
              uint64_t v35 = *(void *)(a1 + 24);
              uint64_t v36 = v94;
              Name = llvm::Value::getName((llvm::Value *)a2);
              LOWORD(v97) = 261;
              *(void *)&long long v95 = Name;
              *((void *)&v95 + 1) = v38;
              uint64_t v39 = (llvm::ConstantFP **)sub_1CC57DBF8(v35, (uint64_t)v36, v17, (uint64_t)&v95, (*((unsigned char *)a2 + 17) & 2) != 0);
              __int16 v93 = 257;
              return llvm::BinaryOperator::CreateNSWNeg(v39, (llvm::Value *)&v91, 0, v40);
            }
          }
        }
      }
    }
    else if (v14 == 5 && *((_WORD *)a2 + 9) == 20)
    {
      uint64_t v18 = (uint64_t)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      uint64_t v19 = *(void *)(v18 + 8);
      if (v19)
      {
        if (!*(void *)(v19 + 8))
        {
          if (sub_1CCA8AAD0((uint64_t)&v95, v18))
          {
            uint64_t v17 = (uint64_t)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
            if (v17) {
              goto LABEL_51;
            }
          }
        }
      }
    }
    LODWORD(v95) = 1;
    *((void *)&v95 + 1) = 0;
    *(void *)&long long v96 = &v94;
    *((void *)&v96 + 1) = 1;
    uint64_t v97 = (uint64_t ***)&v94;
    uint64_t v20 = (uint64_t)*(a2 - 8);
    uint64_t v21 = *(void *)(v20 + 8);
    if (v21 && !*(void *)(v21 + 8) && sub_1CCA8AC90((uint64_t)&v95, v20) && *v97 == *(a2 - 4)
      || (v22 = (uint64_t)*(a2 - 4), (uint64_t v23 = *(void *)(v22 + 8)) != 0)
      && !*(void *)(v23 + 8)
      && sub_1CCA8AC90((uint64_t)&v95, v22)
      && *v97 == *(a2 - 8))
    {
      AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v12, v28, v29);
      uint64_t v31 = *(void *)(a1 + 24);
      LOWORD(v97) = 257;
      unsigned int v32 = sub_1CB845F20(v31, 38, v94, (uint64_t)AllOnesValue, (uint64_t)&v95);
      unsigned int v33 = llvm::ConstantInt::get((llvm::ConstantInt *)v12, 1uLL, 0);
      LOWORD(v97) = 257;
      return sub_1CC199EFC((uint64_t)v32, v33, (uint64_t)AllOnesValue, (const char **)&v95, 0, 0);
    }
    if ((v12[1] & 0xFE) == 0x12) {
      uint64_t v12 = (uint64_t **)*v12[2];
    }
    unsigned int v24 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v12);
    unsigned int v92 = v24;
    if (v24 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v91);
    }
    uint64_t v91 = (const char *)(1 << (v24 - 1));
    if (!llvm::MaskedValueIsZero(v10, (const llvm::Value *)&v91, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v87[0]))
    {
LABEL_27:
      uint64_t v10 = 0;
LABEL_28:
      if (v92 >= 0x41 && v91) {
        MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
      }
      return v10;
    }
    if (!llvm::MaskedValueIsZero(v11, (const llvm::Value *)&v91, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v87[0]))
    {
      if (sub_1CCA8A344(v11))
      {
        unint64_t Neg = llvm::ConstantExpr::getNeg(v11, 0, 0);
        ExactLogBase2 = llvm::ConstantExpr::getExactLogBase2(Neg, v80);
        uint64_t v82 = *(void *)(a1 + 24);
        uint64_t v83 = llvm::Value::getName((llvm::Value *)a2);
        LOWORD(v97) = 261;
        *(void *)&long long v95 = v83;
        *((void *)&v95 + 1) = v84;
        uint64_t v85 = sub_1CC2429AC(v82, (uint64_t)v10, (uint64_t)ExactLogBase2, (uint64_t)&v95, (*((unsigned char *)a2 + 17) & 2) != 0);
        LOWORD(v97) = 257;
        uint64_t v10 = llvm::BinaryOperator::CreateNeg(v85, (llvm::Value *)&v95, 0, v86);
        goto LABEL_28;
      }
      if (!llvm::isKnownToBeAPowerOfTwo(v11, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0, *(void *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v87[0]))goto LABEL_27; {
      char v41 = llvm::Value::getName((llvm::Value *)a2);
      }
      LOWORD(v97) = 261;
      *(void *)&long long v95 = v41;
      *((void *)&v95 + 1) = v42;
LABEL_66:
      uint64_t v10 = llvm::BinaryOperator::Create(19, v10, (uint64_t)v11, (const char **)&v95, 0);
      *((unsigned char *)v10 + 17) = *((unsigned char *)v10 + 17) & 0xFD | *((unsigned char *)a2 + 17) & 2;
      goto LABEL_28;
    }
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      int v53 = 0;
      unint64_t v52 = &byte_1CFBCE98E;
      goto LABEL_65;
    }
    uint64_t v43 = ***a2;
    uint64_t v44 = *(void *)(v43 + 152);
    uint64_t v45 = *(unsigned int *)(v43 + 168);
    if (v45)
    {
      LODWORD(v46) = (v45 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v47 = (uint64_t ****)(v44 + 16 * v46);
      uint64_t v48 = *v47;
      if (*v47 == a2)
      {
LABEL_64:
        unsigned int v51 = v47[1];
        int v54 = *v51;
        unint64_t v52 = (char *)(v51 + 2);
        int v53 = v54;
LABEL_65:
        LOWORD(v97) = 261;
        *(void *)&long long v95 = v52;
        *((void *)&v95 + 1) = v53;
        goto LABEL_66;
      }
      int v49 = 1;
      while (v48 != (uint64_t ***)-4096)
      {
        int v50 = v46 + v49++;
        uint64_t v46 = v50 & (v45 - 1);
        uint64_t v48 = *(uint64_t ****)(v44 + 16 * v46);
        if (v48 == a2)
        {
          uint64_t v47 = (uint64_t ****)(v44 + 16 * v46);
          goto LABEL_64;
        }
      }
    }
    uint64_t v47 = (uint64_t ****)(v44 + 16 * v45);
    goto LABEL_64;
  }
  BOOL v56 = sub_1CCA8A344(v11);
  if (v56) {
    uint64_t v11 = llvm::ConstantExpr::getNeg(v11, 0, 0);
  }
  uint64_t v57 = llvm::ConstantExpr::getExactLogBase2(v11, v55);
  uint64_t v58 = llvm::Value::getName((llvm::Value *)a2);
  LOWORD(v97) = 261;
  *(void *)&long long v95 = v58;
  *((void *)&v95 + 1) = v59;
  uint64_t v10 = llvm::BinaryOperator::Create(27, v10, (uint64_t)v57, (const char **)&v95, 0);
  *((unsigned char *)v10 + 17) |= 2u;
  if (v56)
  {
    int v60 = *(uint64_t **)(a1 + 24);
    LOWORD(v97) = 257;
    sub_1CB844E0C(v60, v10, (uint64_t)&v95);
    int64_t v61 = llvm::Value::getName((llvm::Value *)a2);
    LOWORD(v97) = 773;
    *(void *)&long long v95 = v61;
    *((void *)&v95 + 1) = v62;
    *(void *)&long long v96 = ".neg";
    llvm::Value::setName(v10, (const char **)&v95);
    int v63 = llvm::Value::getName((llvm::Value *)a2);
    LOWORD(v97) = 261;
    *(void *)&long long v95 = v63;
    *((void *)&v95 + 1) = v64;
    return llvm::BinaryOperator::CreateNeg(v10, (llvm::Value *)&v95, 0, v13);
  }
  return v10;
}

llvm::UndefValue **sub_1CCA88060(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v155[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(llvm::PoisonValue ***)(a2 - 64);
  uint64_t v5 = *(llvm::Constant **)(a2 - 32);
  unint64_t v6 = (unint64_t)*(unsigned __int8 *)(v2 + 17) >> 1;
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 88);
  long long v139 = v8;
  uint64_t v141 = *((void *)&v7 + 1);
  uint64_t v140 = v2;
  if (v6 == 127) {
    int v9 = -1;
  }
  else {
    int v9 = v6;
  }
  uint64_t v10 = sub_1CC039F04(v4, v5, v9, (llvm::Constant **)v138, 0, (llvm::DSOLocalEquivalent **)1);
  if (!v10)
  {
    uint64_t v12 = sub_1CC9D812C(a1, (unsigned __int8 *)v2);
    if (v12) {
      return (llvm::UndefValue **)v12;
    }
    uint64_t v12 = sub_1CC9D6B70(a1, v2);
    if (v12) {
      return (llvm::UndefValue **)v12;
    }
    uint64_t v13 = *(unsigned __int8 **)(v2 - 32);
    if (v13 && v13[16] <= 0x14u)
    {
      uint64_t v133 = 0;
      uint64_t v14 = *(void *)(v2 - 64);
      v138[0] = &v133;
      if (sub_1CC04C34C((void **)v138, v14))
      {
        uint64_t v16 = v133;
        uint64_t v17 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, v13, 0, 0, v15);
        LOWORD(v140) = 257;
        char v18 = 21;
        uint64_t v19 = (char *)v16;
        goto LABEL_18;
      }
      if ((llvm::Constant::hasExactInverseFP((llvm::Constant *)v13) & 1) != 0
        || (*(unsigned char *)(v2 + 17) & 0x20) != 0 && llvm::Constant::isNormalFP((llvm::Constant *)v13))
      {
        uint64_t v21 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, v20, 1.0);
        FDiv = llvm::ConstantExpr::getFDiv(v21, (llvm::Constant *)v13, v22, v23);
        if (llvm::Constant::isNormalFP(FDiv))
        {
          uint64_t v19 = *(char **)(v2 - 64);
          LOWORD(v140) = 257;
          char v18 = 18;
          uint64_t v17 = (uint64_t)FDiv;
LABEL_18:
          uint64_t v12 = (uint64_t)llvm::BinaryOperator::Create(v18, v19, v17, (const char **)v138, 0);
          llvm::Instruction::copyIRFlags(v12, v2, 1);
          if (v12) {
            return (llvm::UndefValue **)v12;
          }
        }
      }
    }
    uint64_t v25 = *(unsigned __int8 **)(v2 - 64);
    if (!v25 || v25[16] > 0x14u) {
      goto LABEL_51;
    }
    uint64_t v133 = 0;
    uint64_t v26 = *(void *)(v2 - 32);
    v138[0] = &v133;
    if (sub_1CC04C34C((void **)v138, v26))
    {
      uint64_t v30 = (void *)llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, v25, 0, 0, v29);
      uint64_t v31 = v133;
      LOWORD(v140) = 257;
      goto LABEL_26;
    }
    if ((~*(unsigned __int8 *)(v2 + 17) & 0x22) != 0)
    {
LABEL_51:
      uint64_t v12 = (uint64_t)sub_1CCA83748(a1, (unsigned __int8 *)v2);
      if (!v12)
      {
        uint64_t v42 = *(void *)(v2 - 64);
        uint64_t v43 = *(void *)(v2 - 32);
        if (*(unsigned __int8 *)(v42 + 16) > 0x14u
          || *(unsigned char *)(v43 + 16) != 85
          || !v43
          || (uint64_t v12 = (uint64_t)sub_1CC9D447C(a1, (unsigned char *)v2, *(void **)(v2 - 32), 0, v41)) == 0)
        {
          char v44 = *(unsigned char *)(v2 + 17);
          uint64_t v132 = 0;
          uint64_t v45 = *(void *)(*(void *)(*(void *)(v2 + 40) + 56) + 40);
          if (*(char *)(v45 + 239) < 0) {
            sub_1CB8BDF7C((uint64_t)&v131, *(const void **)(v45 + 216), *(void *)(v45 + 224));
          }
          else {
            std::string v131 = *(std::string *)(v45 + 216);
          }
          if (!std::string::compare(&v131, 0, 4uLL, "agx1"))
          {
            int v48 = 27;
          }
          else if (!std::string::compare(&v131, 0, 4uLL, "agx2"))
          {
            int v48 = 28;
          }
          else if (!std::string::compare(&v131, 0, 4uLL, "agx3"))
          {
            int v48 = 29;
          }
          else
          {
            int v48 = 0;
          }
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__r_.__value_.__l.__data_);
          }
          if ((v44 & 0x20) != 0 && (v48 - 27) <= 2)
          {
            LODWORD(v138[0]) = 280;
            v138[1] = 0;
            *(void *)&long long v139 = &v132;
            if (sub_1CC045310((uint64_t)v138, v43))
            {
              int v49 = *(uint64_t ***)(*(void *)(*(void *)(v2 + 40) + 56) + 40);
              v138[0] = *(void **)v43;
              uint64_t Declaration = llvm::Intrinsic::getDeclaration(v49, 261, (uint64_t)v138, 1);
              unsigned int v51 = (uint64_t **)Declaration;
              if (Declaration) {
                unint64_t v52 = *(uint64_t ***)(Declaration + 24);
              }
              else {
                unint64_t v52 = 0;
              }
              v138[0] = "rsqrt";
              LOWORD(v140) = 259;
              uint64_t v62 = (char *)operator new(0x90uLL);
              int v63 = (llvm::Value *)(v62 + 64);
              *((_DWORD *)v62 + 21) = *((_DWORD *)v62 + 21) & 0x38000000 | 2;
              *(void *)uint64_t v62 = 0;
              *((void *)v62 + 1) = 0;
              *((void *)v62 + 2) = 0;
              *((void *)v62 + 3) = v62 + 64;
              *((void *)v62 + 4) = 0;
              *((void *)v62 + 5) = 0;
              *((void *)v62 + 6) = 0;
              *((void *)v62 + 7) = v62 + 64;
              *((void *)v62 + 8) = *v52[2];
              *((void *)v62 + 9) = 0;
              v62[80] = 84;
              v62[81] = 0;
              *((_WORD *)v62 + 41) = 0;
              *((_DWORD *)v62 + 21) = 2;
              *(_OWORD *)(v62 + 88) = 0u;
              uint64_t v64 = v62 + 88;
              *(_OWORD *)(v62 + 104) = 0u;
              *((_DWORD *)v62 + 30) = 0;
              uint64_t v65 = *(void *)(v2 + 40);
              *((void *)v62 + 13) = v65;
              *(_WORD *)(v65 + 18) &= ~0x8000u;
              if ((v62[87] & 0x10) != 0)
              {
                uint64_t v103 = *(void *)(v65 + 56);
                if (v103)
                {
                  uint64_t v104 = *(llvm::ValueSymbolTable **)(v103 + 104);
                  if (v104) {
                    llvm::ValueSymbolTable::reinsertValue(v104, v63);
                  }
                }
              }
              uint64_t v66 = *(void *)(v2 + 24);
              *((void *)v62 + 11) = v66;
              *((void *)v62 + 12) = v2 + 24;
              *(void *)(v66 + 8) = v64;
              *(void *)(v2 + 24) = v64;
              *((void *)v62 + 16) = 0;
              llvm::CallInst::init((uint64_t ***)v63, v52, v51, &v132, 1, 0, 0, (const char **)v138);
              *((void *)v62 + 16) = *(void *)(v43 + 64);
              v62[81] |= *(unsigned char *)(v2 + 17) & 0xFE;
              v138[0] = "mulsqrt";
              LOWORD(v140) = 259;
              uint64_t v12 = (uint64_t)llvm::BinaryOperator::Create(18, (void *)v42, (uint64_t)v63, (const char **)v138, 0);
              *(unsigned char *)(v12 + 17) |= *(unsigned char *)(v2 + 17) & 0xFE;
              return (llvm::UndefValue **)v12;
            }
          }
          if (*(unsigned __int8 *)(v43 + 16) > 0x14u
            || *(unsigned char *)(v42 + 16) != 85
            || (uint64_t v12 = (uint64_t)sub_1CC9D447C(a1, (unsigned char *)v2, (void *)v42, 0, v47)) == 0)
          {
            int v53 = *(unsigned __int8 *)(v2 + 17);
            if ((~v53 & 0x22) != 0)
            {
LABEL_118:
              if ((v53 & 2) == 0
                || (uint64_t v76 = *(void *)(v42 + 8)) == 0
                || *(void *)(v76 + 8)
                || (uint64_t v80 = *(void *)(v43 + 8)) == 0
                || *(void *)(v80 + 8))
              {
LABEL_121:
                __int16 v130 = 0;
                if ((v53 & 4) == 0) {
                  goto LABEL_139;
                }
                if ((v53 & 2) != 0)
                {
                  int v77 = *(unsigned __int8 *)(v43 + 16);
                  if (v77 == 5)
                  {
                    if (*(_WORD *)(v43 + 18) == 18)
                    {
                      uint64_t v82 = (uint64_t *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF));
                      uint64_t v78 = *v82;
                      uint64_t v79 = v82[4];
LABEL_133:
                      if (v42 == v78)
                      {
                        uint64_t v78 = v79;
                        if (v79)
                        {
LABEL_136:
                          uint64_t v83 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, (llvm::Type *)v46, 1.0);
                          sub_1CC9D28DC(a1, v2, 0, (uint64_t)v83);
                          sub_1CC9D28DC(a1, v2, 1u, v78);
                          return (llvm::UndefValue **)v2;
                        }
                      }
                      else if (v78 && v42 == v79)
                      {
                        goto LABEL_136;
                      }
                    }
                  }
                  else if (v77 == 46)
                  {
                    uint64_t v78 = *(void *)(v43 - 64);
                    uint64_t v79 = *(void *)(v43 - 32);
                    goto LABEL_133;
                  }
                }
                if ((v53 & 8) == 0) {
                  goto LABEL_139;
                }
                v138[0] = &v130;
                LODWORD(v138[1]) = 139;
                *(void *)&long long v139 = 0;
                *((void *)&v139 + 1) = &v130;
                int v93 = *(unsigned __int8 *)(v2 + 16);
                if (v93 == 49)
                {
                  uint64_t v94 = *(void *)(v2 - 64);
                  if (v94)
                  {
                    __int16 v130 = *(llvm::Value **)(v2 - 64);
                    uint64_t v95 = *(void *)(v2 - 32);
                    if (v95)
                    {
                      if (*(unsigned char *)(v95 + 16) == 84)
                      {
                        uint64_t v96 = *(void *)(v95 - 32);
                        if (v96)
                        {
                          if (!*(unsigned char *)(v96 + 16)
                            && *(void *)(v96 + 24) == *(void *)(v95 + 72)
                            && *(_DWORD *)(v96 + 36) == 139
                            && v94 == *(void *)(v95 - 32 * (*(_DWORD *)(v95 + 20) & 0x7FFFFFF)))
                          {
                            goto LABEL_174;
                          }
                        }
                      }
                    }
                  }
                }
                else if (v93 == 5 && *(_WORD *)(v2 + 18) == 21)
                {
                  uint64_t v97 = v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF);
                  if (*(void *)v97)
                  {
                    __int16 v130 = *(llvm::Value **)v97;
                    uint64_t v107 = *(void *)(v97 + 32);
                    if (sub_1CD497DD0(&v138[1], v107)
                      && v107
                      && *(unsigned char *)(v107 + 16) == 84
                      && **((void **)&v139 + 1) == *(void *)(v107
                                                               - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF)
                                                               + 32 * v139))
                    {
                      goto LABEL_174;
                    }
                  }
                }
                LODWORD(v133) = 139;
                uint64_t v134 = 0;
                uint64_t v135 = &v130;
                __int16 v136 = &v130;
                int v98 = *(unsigned __int8 *)(v2 + 16);
                if (v98 == 49)
                {
                  if (!sub_1CC045310((uint64_t)&v133, *(void *)(v2 - 64))) {
                    goto LABEL_139;
                  }
                  unint64_t v99 = *(llvm::Value **)(v2 - 32);
                  goto LABEL_173;
                }
                if (v98 == 5
                  && *(_WORD *)(v2 + 18) == 21
                  && sub_1CC13E39C((uint64_t)&v133, *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF))))
                {
                  unint64_t v99 = *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32);
LABEL_173:
                  if (*v136 != v99) {
                    goto LABEL_139;
                  }
LABEL_174:
                  unsigned int v100 = *(llvm::IRBuilderBase **)(a1 + 24);
                  unsigned int v101 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, (llvm::Type *)v46, 1.0);
                  LOWORD(v140) = 257;
                  uint64_t BinaryIntrinsic = (llvm::Value *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v100, 19, v101, v130, (llvm::Instruction *)v2, (const llvm::Twine *)v138);
                  return sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v2, BinaryIntrinsic);
                }
LABEL_139:
                uint64_t v84 = *(void *)(v2 - 32);
                if (*(unsigned char *)(v84 + 16) != 84) {
                  return 0;
                }
                uint64_t v85 = *(void *)(v84 - 32);
                if (!v85) {
                  return 0;
                }
                if (*(unsigned char *)(v85 + 16)) {
                  return 0;
                }
                if (*(void *)(v85 + 24) != *(void *)(v84 + 72)) {
                  return 0;
                }
                if ((*(unsigned char *)(v85 + 33) & 0x20) == 0) {
                  return 0;
                }
                uint64_t v86 = *(void *)(v84 + 8);
                if (!v86) {
                  return 0;
                }
                if (*(void *)(v86 + 8)) {
                  return 0;
                }
                int v87 = *(unsigned __int8 *)(v2 + 17);
                if ((~v87 & 0x22) != 0) {
                  return 0;
                }
                uint64_t v88 = *(uint64_t **)(a1 + 24);
                unsigned int v89 = *(void **)(v2 - 64);
                int v90 = *(_DWORD *)(v85 + 36);
                v138[0] = &v139;
                v138[1] = (void *)0x600000000;
                if ((v90 - 75) >= 2)
                {
                  if (v90 == 239)
                  {
                    if ((v87 & 8) != 0)
                    {
                      char v126 = (void *)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF));
                      *(void *)&long long v139 = *v126;
                      LODWORD(v138[1]) = 1;
                      unint64_t v127 = (llvm::BinaryOperator *)v126[4];
                      __int16 v137 = 257;
                      uint64_t v128 = sub_1CD5A6358((uint64_t)v88, v127, (uint64_t)&v133, 0, 0);
                      if (LODWORD(v138[1]) >= HIDWORD(v138[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v138[0] + LODWORD(v138[1])) = v128;
                      ++LODWORD(v138[1]);
                      v155[0] = *(void *)v2;
                      v155[1] = **(void **)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF) + 32);
                      __int16 v137 = 257;
                      uint64_t Intrinsic = llvm::IRBuilderBase::CreateIntrinsic(v88, 239, (uint64_t)v155, 2, (uint64_t *)v138[0], LODWORD(v138[1]), v2, (uint64_t)&v133);
                      __int16 v137 = 257;
                      goto LABEL_199;
                    }
                  }
                  else if (v90 == 238)
                  {
                    uint64_t v91 = (void *)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF));
                    *(void *)&long long v139 = *v91;
                    LODWORD(v138[1]) = 1;
                    uint64_t v92 = v91[4];
LABEL_197:
                    __int16 v137 = 257;
                    uint64_t v108 = sub_1CC9F496C((uint64_t)v88, v92, v2, (uint64_t)&v133);
                    if (LODWORD(v138[1]) >= HIDWORD(v138[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v138[0] + LODWORD(v138[1])) = v108;
                    ++LODWORD(v138[1]);
                    v155[0] = *(void *)v2;
                    __int16 v137 = 257;
                    uint64_t Intrinsic = llvm::IRBuilderBase::CreateIntrinsic(v88, v90, (uint64_t)v155, 1, (uint64_t *)v138[0], LODWORD(v138[1]), v2, (uint64_t)&v133);
                    __int16 v137 = 257;
LABEL_199:
                    unint64_t v110 = llvm::BinaryOperator::Create(18, v89, Intrinsic, (const char **)&v133, 0);
                    llvm::Instruction::copyIRFlags((uint64_t)v110, v2, 1);
                    uint64_t v2 = (uint64_t)v110;
                    goto LABEL_211;
                  }
                  uint64_t v2 = 0;
LABEL_211:
                  if (v138[0] != &v139) {
                    free(v138[0]);
                  }
                  return (llvm::UndefValue **)v2;
                }
                uint64_t v92 = *(void *)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF));
                goto LABEL_197;
              }
              __int16 v130 = 0;
              LODWORD(v138[0]) = 273;
              v138[1] = 0;
              *(void *)&long long v139 = &v130;
              if ((sub_1CC045310((uint64_t)v138, v42) & 1) != 0
                && (LODWORD(v133) = 51, uint64_t v134 = 0, v135 = v130, sub_1CC04B8F0((uint64_t)&v133, v43)))
              {
                int v81 = 0;
              }
              else
              {
                LODWORD(v138[0]) = 51;
                v138[1] = 0;
                *(void *)&long long v139 = &v130;
                if ((sub_1CC045310((uint64_t)v138, v42) & 1) == 0) {
                  goto LABEL_186;
                }
                LODWORD(v133) = 273;
                uint64_t v134 = 0;
                uint64_t v135 = v130;
                if (!sub_1CC04B8F0((uint64_t)&v133, v43)) {
                  goto LABEL_186;
                }
                int v81 = 1;
              }
              uint64_t v106 = *(llvm::ConstantFP ***)v2;
              if (!llvm::hasFloatFn(*(void **)(a1 + 64), *(void *)v2, 0x1B3u, 0x1B4u, 0x1B8u))
              {
LABEL_186:
                LOBYTE(v53) = *(unsigned char *)(v2 + 17);
                goto LABEL_121;
              }
              uint64_t v111 = 0;
              unsigned int v112 = *v106;
              v138[0] = &v139;
              v138[1] = (void *)0x200000000;
              uint64_t v144 = v112;
              int v145 = &v153;
              char v146 = &v154;
              uint64_t v147 = 0;
              int v148 = 0;
              __int16 v149 = 512;
              char v150 = 7;
              uint64_t v151 = 0;
              uint64_t v152 = 0;
              int v153 = &unk_1F2616E88;
              uint64_t v154 = &unk_1F2617008;
              unsigned int v113 = *(unsigned __int8 **)(v2 + 48);
              uint64_t v142 = *(void *)(v2 + 40);
              uint64_t v143 = v2 + 24;
              v155[0] = (uint64_t)v113;
              if (v113)
              {
                llvm::MetadataTracking::track((uint64_t)v155, v113, 2);
                uint64_t v111 = v155[0];
              }
              sub_1CB8461A4((uint64_t)v138, 0, v111);
              if (v155[0])
              {
                int v123 = *(unsigned __int8 *)v155[0];
                if ((v123 - 4) > 0x1E)
                {
                  if ((v123 - 3) >= 0xFFFFFFFE) {
                    uint64_t v129 = v155[0];
                  }
                  else {
                    uint64_t v129 = 0;
                  }
                  if ((v123 - 3) < 0xFFFFFFFE)
                  {
                    if (v123 == 3) {
                      *(void *)(v155[0] + 8) = 0;
                    }
                    goto LABEL_203;
                  }
                  unint64_t v125 = v129 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v155[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v155[0] + 12)) {
                    goto LABEL_203;
                  }
                  uint64_t v124 = *(void *)(v155[0] + 16);
                  if ((v124 & 4) == 0) {
                    goto LABEL_203;
                  }
                  unint64_t v125 = v124 & 0xFFFFFFFFFFFFFFF8;
                  if (!v125) {
                    goto LABEL_203;
                  }
                }
                uint64_t v133 = (char *)v155;
                sub_1CC5FA668(v125 + 16, &v133);
              }
LABEL_203:
              int v114 = v148;
              uint64_t v115 = v147;
              char v116 = v149;
              char v117 = HIBYTE(v149);
              char v118 = v150;
              int v119 = *(unsigned __int8 *)(v2 + 17) >> 1;
              if (v119 == 127) {
                int v119 = -1;
              }
              int v148 = v119;
              v155[0] = *(void *)(*(void *)(v42 - 32) + 112);
              int v121 = (llvm::Value *)llvm::emitUnaryFloatFnCall((uint64_t ***)v130, *(void **)(a1 + 64), 0x1B3u, 0x1B4u, 0x1B8u, (uint64_t)v138, v155);
              if (v81)
              {
                char v122 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, v120, 1.0);
                __int16 v137 = 257;
                int v121 = (llvm::Value *)sub_1CB843AD0((uint64_t)v138, (uint64_t)v122, (uint64_t)v121, (uint64_t)&v133, 0);
              }
              uint64_t v12 = (uint64_t)sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v2, v121);
              int v148 = v114;
              uint64_t v147 = v115;
              LOBYTE(v149) = v116;
              HIBYTE(v149) = v117;
              char v150 = v118;
              if (v138[0] != &v139) {
                free(v138[0]);
              }
              return (llvm::UndefValue **)v12;
            }
            uint64_t v133 = 0;
            uint64_t v54 = *(void *)(v42 + 8);
            if (v54 && !*(void *)(v54 + 8))
            {
              int v67 = *(unsigned __int8 *)(v42 + 16);
              if (v67 == 5)
              {
                if (*(_WORD *)(v42 + 18) != 21) {
                  goto LABEL_78;
                }
                uint64_t v69 = (char **)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF));
                char v68 = *v69;
                if (!*v69) {
                  goto LABEL_78;
                }
                uint64_t v46 = (unsigned __int8 *)v69[4];
                if (!v46) {
                  goto LABEL_78;
                }
              }
              else
              {
                if (v67 != 49) {
                  goto LABEL_78;
                }
                char v68 = *(char **)(v42 - 64);
                if (!v68) {
                  goto LABEL_78;
                }
                uint64_t v46 = *(unsigned __int8 **)(v42 - 32);
                if (!v46) {
                  goto LABEL_78;
                }
              }
              uint64_t v133 = (char *)v46;
              if (v46[16] > 0x14u || *(unsigned __int8 *)(v43 + 16) >= 0x15u)
              {
                uint64_t v70 = *(void *)(a1 + 24);
                LOWORD(v140) = 257;
                uint64_t v71 = sub_1CB93098C(v70, (uint64_t)v46, v43, (llvm::Instruction *)v2, (uint64_t)v138);
                LOWORD(v140) = 257;
                char v72 = 21;
                uint64_t v73 = v68;
LABEL_190:
                uint64_t v12 = (uint64_t)llvm::BinaryOperator::Create(v72, v73, v71, (const char **)v138, 0);
                llvm::Instruction::copyIRFlags(v12, v2, 1);
                return (llvm::UndefValue **)v12;
              }
            }
LABEL_78:
            uint64_t v55 = *(void *)(v43 + 8);
            if (v55)
            {
              uint64_t v56 = *(void *)(v55 + 8);
              int v57 = *(unsigned __int8 *)(v43 + 16);
              if (!v56)
              {
                if (v57 == 5)
                {
                  if (*(_WORD *)(v43 + 18) == 21)
                  {
                    uint64_t v74 = (uint64_t *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF));
                    uint64_t v58 = *v74;
                    if (*v74)
                    {
                      uint64_t v46 = (unsigned __int8 *)v74[4];
                      if (v46) {
                        goto LABEL_111;
                      }
                    }
                  }
                }
                else if (v57 == 49)
                {
                  uint64_t v58 = *(void *)(v43 - 64);
                  if (!v58 || (uint64_t v46 = *(unsigned __int8 **)(v43 - 32)) == 0)
                  {
                    v138[0] = (void *)0x3FF0000000000000;
                    v138[1] = &v133;
                    goto LABEL_87;
                  }
LABEL_111:
                  uint64_t v133 = (char *)v46;
                  if (v46[16] > 0x14u || *(unsigned __int8 *)(v42 + 16) >= 0x15u)
                  {
                    uint64_t v75 = *(void *)(a1 + 24);
                    LOWORD(v140) = 257;
                    uint64_t v73 = (char *)sub_1CB93098C(v75, (uint64_t)v46, v42, (llvm::Instruction *)v2, (uint64_t)v138);
                    LOWORD(v140) = 257;
                    char v72 = 21;
                    uint64_t v71 = v58;
                    goto LABEL_190;
                  }
                  goto LABEL_86;
                }
                v138[0] = (void *)0x3FF0000000000000;
                v138[1] = &v133;
                goto LABEL_115;
              }
            }
            else
            {
              int v57 = *(unsigned __int8 *)(v43 + 16);
            }
LABEL_86:
            v138[0] = (void *)0x3FF0000000000000;
            v138[1] = &v133;
            if (v57 == 49)
            {
LABEL_87:
              SplatValue = *(unsigned __int8 **)(v43 - 64);
              unsigned int v60 = SplatValue[16];
              if (SplatValue && v60 == 17)
              {
                double v61 = 1.0;
              }
              else
              {
                if (v60 > 0x14) {
                  goto LABEL_117;
                }
                if ((*(_DWORD *)(*(void *)SplatValue + 8) & 0xFE) != 0x12) {
                  goto LABEL_117;
                }
                SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
                if (!SplatValue || SplatValue[16] != 17) {
                  goto LABEL_117;
                }
                double v61 = *(double *)v138;
              }
              if (!sub_1CB844168((uint64_t)SplatValue, v61) || (uint64_t v105 = *(void *)(v43 - 32)) == 0)
              {
LABEL_117:
                LOBYTE(v53) = *(unsigned char *)(v2 + 17);
                goto LABEL_118;
              }
              goto LABEL_189;
            }
LABEL_115:
            if (v57 != 5) {
              goto LABEL_117;
            }
            if (*(_WORD *)(v43 + 18) != 21) {
              goto LABEL_117;
            }
            if (!sub_1CD6404D8((double *)v138, *(llvm::Constant **)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF))))goto LABEL_117; {
            uint64_t v105 = *(void *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF) + 32);
            }
            if (!v105) {
              goto LABEL_117;
            }
LABEL_189:
            *(void *)v138[1] = v105;
            uint64_t v73 = v133;
            LOWORD(v140) = 257;
            char v72 = 18;
            uint64_t v71 = v42;
            goto LABEL_190;
          }
        }
      }
      return (llvm::UndefValue **)v12;
    }
    uint64_t v32 = *(void *)(v2 - 32);
    int v33 = *(unsigned __int8 *)(v32 + 16);
    switch(v33)
    {
      case 5:
        int v36 = *(unsigned __int16 *)(v32 + 18);
        if (v36 != 21)
        {
          if (v36 != 18) {
            goto LABEL_51;
          }
          uint64_t v37 = (char **)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF));
          if (!*v37) {
            goto LABEL_51;
          }
          uint64_t v133 = *v37;
          int v34 = (unsigned __int8 *)v37[4];
          if (!v34) {
            goto LABEL_51;
          }
LABEL_44:
          FMul = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v25, (llvm::Constant *)v34, v27, v28);
LABEL_48:
          __int16 v40 = FMul;
          if (FMul && llvm::Constant::isNormalFP(FMul))
          {
            uint64_t v31 = v133;
            LOWORD(v140) = 257;
            uint64_t v30 = v40;
LABEL_26:
            uint64_t v12 = (uint64_t)llvm::BinaryOperator::Create(21, v30, (uint64_t)v31, (const char **)v138, 0);
            llvm::Instruction::copyIRFlags(v12, v2, 1);
            if (v12) {
              return (llvm::UndefValue **)v12;
            }
            goto LABEL_51;
          }
          goto LABEL_51;
        }
        uint64_t v39 = (char **)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF));
        if (!*v39) {
          goto LABEL_51;
        }
        uint64_t v133 = *v39;
        uint64_t v35 = (unsigned __int8 *)v39[4];
        if (!v35) {
          goto LABEL_51;
        }
        break;
      case 49:
        if (!*(void *)(v32 - 64)) {
          goto LABEL_51;
        }
        uint64_t v133 = *(char **)(v32 - 64);
        uint64_t v35 = *(unsigned __int8 **)(v32 - 32);
        if (!v35 || v35[16] > 0x14u) {
          goto LABEL_51;
        }
        break;
      case 46:
        if (!*(void *)(v32 - 64)) {
          goto LABEL_51;
        }
        uint64_t v133 = *(char **)(v32 - 64);
        int v34 = *(unsigned __int8 **)(v32 - 32);
        if (!v34 || v34[16] > 0x14u) {
          goto LABEL_51;
        }
        goto LABEL_44;
      default:
        goto LABEL_51;
    }
    FMul = llvm::ConstantExpr::getFMul((llvm::ConstantExpr *)v25, (llvm::Constant *)v35, v27, v28);
    goto LABEL_48;
  }

  return sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)v2, v10);
}

uint64_t sub_1CCA89170(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  uint64_t result = sub_1CC9D6B70((uint64_t)a1, a2);
  if (!result)
  {
    uint64_t v5 = *((void *)v2 - 8);
    unint64_t v6 = (unsigned __int8 *)*((void *)v2 - 4);
    long long v7 = sub_1CCA865E4((uint64_t)v6, (uint64_t)a1, (llvm::AssumptionCache *)v2);
    if (v7)
    {
      return sub_1CC9D28DC((uint64_t)a1, (uint64_t)v2, 1u, (uint64_t)v7);
    }
    else
    {
      if (sub_1CCA84DF0(a1, (uint64_t)v2)) {
        return (uint64_t)v2;
      }
      unsigned int v9 = *(unsigned __int8 *)(v5 + 16);
      BOOL v10 = v9 > 0x14 || v9 == 5;
      if (v10
        || (BOOL v15 = sub_1CCA8A748((uint64_t)v6),
            !v15 || (uint64_t result = (uint64_t)sub_1CC9D447C((uint64_t)a1, v2, v6, (llvm::Constant *)1, v8)) == 0))
      {
        if (v6[16] > 0x14u) {
          return 0;
        }
        unsigned int v11 = *(unsigned __int8 *)(v5 + 16);
        if (v11 < 0x1C) {
          return 0;
        }
        if (v11 == 83)
        {
          v18[1] = 0;
          uint64_t v19 = 0;
          v18[0] = &v19;
          if (!sub_1CBF528D8((uint64_t)v18, v6)) {
            goto LABEL_15;
          }
          uint64_t v12 = (unint64_t **)v19;
          unsigned int v13 = *((_DWORD *)v19 + 2);
          if (v13 > 0x40)
          {
            int v16 = *((_DWORD *)v19 + 2);
            if (llvm::APInt::countLeadingZerosSlowCase(v19) == v16) {
              goto LABEL_15;
            }
            if (v2[16] != 50)
            {
              unsigned int v17 = v16 - 1;
              if ((((*v12)[v17 >> 6] >> v17) & 1) != 0
                && llvm::APInt::countTrailingZerosSlowCase(v12) == v17)
              {
                goto LABEL_15;
              }
            }
          }
          else if (!*(void *)v19 || v2[16] != 50 && *(void *)v19 == 1 << (v13 - 1))
          {
            goto LABEL_15;
          }
          uint64_t v14 = sub_1CC9D50C0((uint64_t)a1, (llvm::Instruction *)v2, v5);
          if (v14) {
            return (uint64_t)v14;
          }
        }
        else if (v11 == 85)
        {
          uint64_t v14 = sub_1CC9D447C((uint64_t)a1, v2, (void *)v5, 0, v8);
          if (v14) {
            return (uint64_t)v14;
          }
        }
LABEL_15:
        if (sub_1CCAB350C((uint64_t)a1, (llvm::UndefValue *)v2)) {
          return (uint64_t)v2;
        }
        return 0;
      }
    }
  }
  return result;
}

llvm::Value *sub_1CCA89374(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  BOOL v8 = (unsigned __int8 *)*((void *)a2 - 8);
  unsigned int v9 = (llvm::Constant *)*((void *)a2 - 4);
  long long v10 = *(_OWORD *)(a1 + 120);
  long long v11 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v11;
  uint64_t v44 = *((void *)&v10 + 1);
  uint64_t v43 = a2;
  uint64_t v12 = sub_1CC0415F8((llvm *)0x16, v8, v9, (uint64_t)v42, (const llvm::DataLayout *)3, a6);
  if (v12) {
    return (llvm::Value *)sub_1CC9D3C84(a1, a2, v12);
  }
  uint64_t result = (llvm::Value *)sub_1CC9D812C(a1, (unsigned __int8 *)a2);
  if (!result)
  {
    uint64_t result = (llvm::Value *)sub_1CCA89170((void *)a1, (uint64_t)a2);
    if (!result)
    {
      uint64_t result = sub_1CCA870B0((uint64_t)a2, *(void *)(a1 + 24));
      if (!result)
      {
        uint64_t v14 = (llvm::Constant *)*((void *)a2 - 8);
        BOOL v15 = (llvm *)*((void *)a2 - 4);
        int v16 = *(llvm::Constant **)a2;
        if (llvm::isKnownToBeAPowerOfTwo(v15, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0, *(void *)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v40))
        {
          AllOnesValue = llvm::Constant::getAllOnesValue(v16, v17, v18);
          uint64_t v20 = *(void *)(a1 + 24);
          LOWORD(v43) = 257;
          uint64_t v21 = sub_1CB844A3C(v20, v15, (uint64_t)AllOnesValue, (uint64_t)v42, 0, 0);
          LOWORD(v43) = 257;
          return llvm::BinaryOperator::Create(28, v14, (uint64_t)v21, (const char **)v42, 0);
        }
        if (sub_1CBF5250C((uint64_t)v42, v14))
        {
          uint64_t v22 = *(void *)(a1 + 24);
          uint64_t v23 = llvm::ConstantInt::get(v16, 1uLL, 0);
          LOWORD(v43) = 257;
          unsigned int v24 = sub_1CB845F20(v22, 33, v15, (uint64_t)v23, (uint64_t)v42);
          LOWORD(v43) = 257;
          return llvm::CastInst::CreateZExtOrBitCast(v24, (llvm::Type ***)v16, (const char **)v42, 0, v25);
        }
        if (sub_1CC0423A0((uint64_t)v42, v15))
        {
          uint64_t v26 = *(void *)(a1 + 24);
          LOWORD(v43) = 257;
          unsigned int v27 = sub_1CB845F20(v26, 36, v14, (uint64_t)v15, (uint64_t)v42);
          uint64_t v28 = *(void *)(a1 + 24);
          LOWORD(v43) = 257;
          unsigned int v29 = sub_1CB84494C(v28, (uint64_t)v14, (uint64_t)v15, (uint64_t)v42, 0, 0);
          LOWORD(v43) = 257;
          uint64_t v30 = (uint64_t)v27;
          NullValue = (uint64_t *)v14;
          return sub_1CC199EFC(v30, NullValue, (uint64_t)v29, (const char **)v42, 0, 0);
        }
        uint64_t v41 = 0;
        *(void *)&v42[0] = &v41;
        if (sub_1CBC5BEAC((void **)v42, (uint64_t)v15))
        {
          int v34 = *(_DWORD *)(*(void *)v41 + 8);
          if ((v34 & 0xFE) == 0x12) {
            int v34 = *(_DWORD *)(**(void **)(*(void *)v41 + 16) + 8);
          }
          if (v34 == 269)
          {
            uint64_t v35 = *(void *)(a1 + 24);
            int v36 = llvm::Constant::getAllOnesValue(v16, v32, v33);
            LOWORD(v43) = 257;
            uint64_t v37 = sub_1CB845F20(v35, 32, v14, (uint64_t)v36, (uint64_t)v42);
            NullValue = (uint64_t *)llvm::Constant::getNullValue(v16, v38, v39);
            LOWORD(v43) = 257;
            uint64_t v30 = (uint64_t)v37;
            unsigned int v29 = v14;
            return sub_1CC199EFC(v30, NullValue, (uint64_t)v29, (const char **)v42, 0, 0);
          }
        }
        return 0;
      }
    }
  }
  return result;
}

llvm::UndefValue **sub_1CCA89610(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  v102[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::Constant **)*((void *)a2 - 8);
  uint64_t v5 = (llvm::Constant *)*((void *)a2 - 4);
  long long v6 = *(_OWORD *)(a1 + 120);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)int v98 = *(_OWORD *)(a1 + 88);
  long long v99 = v7;
  uint64_t v101 = *((void *)&v6 + 1);
  unsigned int v100 = a2;
  BOOL v8 = sub_1CC02BB48(v4, v5, (uint64_t)v98, (const llvm::DataLayout *)3);
  if (v8) {
    return sub_1CC9D3C84(a1, a2, v8);
  }
  unint64_t v10 = sub_1CC9D812C(a1, (unsigned __int8 *)a2);
  if (!v10)
  {
    unint64_t v10 = sub_1CCA89170((void *)a1, (uint64_t)a2);
    if (!v10)
    {
      long long v11 = (llvm *)*((void *)a2 - 8);
      uint64_t v12 = (llvm::Constant *)*((void *)a2 - 4);
      unsigned int v13 = *((unsigned __int8 *)v12 + 16);
      if (v12 && v13 == 16)
      {
        int v16 = (char *)v12 + 24;
        uint64_t v15 = *((void *)v12 + 3);
        unsigned int v17 = *((_DWORD *)v12 + 8);
        unsigned int v18 = v17 - 1;
        if (v17 >= 0x41) {
          uint64_t v19 = (void *)(v15 + 8 * (v18 >> 6));
        }
        else {
          uint64_t v19 = (void *)((char *)v12 + 24);
        }
        if ((*v19 >> v18))
        {
LABEL_100:
          unsigned int v79 = *((_DWORD *)v16 + 2);
          unsigned int v80 = v79 - 1;
          if (v79 > 0x40)
          {
            if (((*(void *)(v15 + 8 * (v80 >> 6)) >> v80) & 1) == 0
              || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v16) != v80)
            {
              unsigned int v91 = v79;
              operator new[]();
            }
          }
          else if (1 << v80 != v15)
          {
            int v81 = *(llvm::Type **)a2;
            unsigned int v91 = *((_DWORD *)v16 + 2);
            uint64_t v82 = ~v15;
            unint64_t v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
            if (!v79) {
              unint64_t v83 = 0;
            }
            int v90 = (void *)(v83 & v82);
            llvm::APInt::operator++((uint64_t)&v90);
            LODWORD(v98[1]) = v91;
            v98[0] = v90;
            unsigned int v91 = 0;
            uint64_t Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v81, (llvm::LLVMContext *)v98, v84);
            if ((*((_DWORD *)v81 + 2) & 0xFE) == 0x12) {
              uint64_t Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v81 + 8) | ((unint64_t)(*((_DWORD *)v81 + 2) == 19) << 32)), (uint64_t)Splat);
            }
            unint64_t v10 = sub_1CC9D28DC(a1, (uint64_t)a2, 1u, (uint64_t)Splat);
            if (LODWORD(v98[1]) >= 0x41 && v98[0]) {
              MEMORY[0x1D25D9CB0](v98[0], 0x1000C8000313F17);
            }
            if (v91 < 0x41) {
              return (llvm::UndefValue **)v10;
            }
            uint64_t v70 = v90;
            if (!v90) {
              return (llvm::UndefValue **)v10;
            }
LABEL_89:
            MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
            return (llvm::UndefValue **)v10;
          }
LABEL_18:
          uint64_t v88 = 0;
          unsigned int v89 = 0;
          v98[1] = &v89;
          *(void *)&long long v99 = &v88;
          int v20 = *((unsigned __int8 *)a2 + 16);
          if (v20 == 51)
          {
            uint64_t v21 = *((void *)a2 - 8);
            uint64_t v22 = *(void *)(v21 + 8);
            if (v22)
            {
              if (!*(void *)(v22 + 8))
              {
                if (sub_1CCA8AAD0((uint64_t)v98, v21))
                {
                  uint64_t v23 = *((void *)a2 - 4);
                  if (v23)
                  {
LABEL_92:
                    uint64_t v88 = v23;
                    char v72 = *(uint64_t **)(a1 + 24);
                    LOWORD(v100) = 257;
                    uint64_t v73 = (llvm::ConstantFP **)sub_1CD5AB298(v72, v89, v23, (uint64_t)v98);
                    WORD4(v95) = 257;
                    return (llvm::UndefValue **)llvm::BinaryOperator::CreateNSWNeg(v73, (llvm::Value *)v92, 0, v74);
                  }
                }
              }
            }
          }
          else if (v20 == 5 && *((_WORD *)a2 + 9) == 23)
          {
            uint64_t v24 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            uint64_t v25 = *(void *)(v24 + 8);
            if (v25)
            {
              if (!*(void *)(v25 + 8))
              {
                if (sub_1CCA8AAD0((uint64_t)v98, v24))
                {
                  uint64_t v23 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
                  if (v23) {
                    goto LABEL_92;
                  }
                }
              }
            }
          }
          uint64_t v26 = *(llvm::Type **)a2;
          if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
            uint64_t v26 = (llvm::Type *)**((void **)v26 + 2);
          }
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v26);
          unsigned int v87 = PrimitiveSizeInBits;
          if (PrimitiveSizeInBits > 0x40) {
            operator new[]();
          }
          if (!llvm::MaskedValueIsZero(v12, (const llvm::Value *)v86, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, 1 << (PrimitiveSizeInBits - 1))|| !llvm::MaskedValueIsZero(v11, (const llvm::Value *)v86, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v86[0]))
          {
            int v36 = *((unsigned __int8 *)v12 + 16);
            if (v36 == 15 || v36 == 10)
            {
              unint64_t v37 = *(unsigned int *)(*(void *)v12 + 32);
              if (v37)
              {
                uint64_t v38 = 0;
                char v39 = 0;
                while (1)
                {
                  AggregateElement = llvm::Constant::getAggregateElement(v12, v38);
                  if (!AggregateElement) {
                    break;
                  }
                  if (*((unsigned char *)AggregateElement + 16) == 16)
                  {
                    uint64_t v41 = AggregateElement + 3;
                    unsigned int v42 = *((_DWORD *)AggregateElement + 8);
                    unsigned int v43 = v42 - 1;
                    if (v42 >= 0x41) {
                      uint64_t v41 = (void *)(*v41 + 8 * (v43 >> 6));
                    }
                    v39 |= *v41 >> v43;
                  }
                  uint64_t v38 = (llvm::Type *)(v38 + 1);
                  if (v37 == v38)
                  {
                    if (v39)
                    {
                      v98[0] = &v99;
                      v98[1] = (void *)0x1000000000;
                      sub_1CBFC6B20((uint64_t)v98, v37, 0);
                      for (uint64_t i = 0; i != (llvm::Type *)v37; uint64_t i = (llvm::Type *)((char *)i + 1))
                      {
                        uint64_t v45 = llvm::Constant::getAggregateElement(v12, i);
                        *((void *)v98[0] + i) = v45;
                        int v48 = (llvm::Constant *)*((void *)v98[0] + i);
                        if (v48) {
                          BOOL v49 = *((unsigned char *)v48 + 16) == 16;
                        }
                        else {
                          BOOL v49 = 0;
                        }
                        if (v49)
                        {
                          int v50 = (void *)((char *)v48 + 24);
                          unsigned int v51 = *((_DWORD *)v48 + 8);
                          unsigned int v52 = v51 - 1;
                          if (v51 >= 0x41) {
                            int v50 = (void *)(*v50 + 8 * (v52 >> 6));
                          }
                          if ((*v50 >> v52))
                          {
                            int v53 = *(llvm::ConstantFP **)v48;
                            if ((*(_DWORD *)(*(void *)v48 + 8) & 0xFE) == 0x12) {
                              unsigned int v54 = *(unsigned __int8 *)(**((void **)v53 + 2) + 8);
                            }
                            else {
                              unsigned int v54 = *(_DWORD *)(*(void *)v48 + 8);
                            }
                            if (v54 <= 6) {
                              Zero = llvm::ConstantFP::getZero(v53, (llvm::Type *)1, v47);
                            }
                            else {
                              Zero = llvm::Constant::getNullValue(v53, v46, v47);
                            }
                            int v57 = Zero;
                            uint64_t v58 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v48, v56);
                            if (!v58)
                            {
                              uint64_t v59 = *(void ***)v57;
                              if (*(void *)v57)
                              {
                                v102[0] = v57;
                                v102[1] = v48;
                                uint64_t v60 = **v59 + 1512;
                                v92[0] = 15;
                                v92[1] = 0;
                                int v93 = v102;
                                uint64_t v94 = 2;
                                long long v95 = 0u;
                                long long v96 = 0u;
                                uint64_t v97 = 0;
                                uint64_t v58 = sub_1CC56C20C(v60, (uint64_t)v59, (unsigned __int8 *)v92);
                              }
                              else
                              {
                                uint64_t v58 = 0;
                              }
                            }
                            *((void *)v98[0] + i) = v58;
                          }
                        }
                      }
                      double v61 = (llvm::FixedVectorType ***)v98[0];
                      uint64_t v62 = LODWORD(v98[1]);
                      Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v98[0], (llvm::Type *)LODWORD(v98[1]));
                      uint64_t v64 = (uint64_t)Impl;
                      if (!Impl)
                      {
                        llvm::FixedVectorType::get(**v61, (llvm::Type *)v62);
                        uint64_t v64 = sub_1CC56A4DC(**v65 + 1288, (uint64_t)v65, v61, v62);
                      }
                      if ((llvm::Constant *)v64 == v12) {
                        unint64_t v10 = 0;
                      }
                      else {
                        unint64_t v10 = sub_1CC9D28DC(a1, (uint64_t)a2, 1u, v64);
                      }
                      if (v98[0] != &v99) {
                        free(v98[0]);
                      }
                      if ((llvm::Constant *)v64 != v12) {
                        goto LABEL_87;
                      }
                    }
                    break;
                  }
                }
              }
            }
            unint64_t v10 = 0;
LABEL_87:
            if (v87 < 0x41) {
              return (llvm::UndefValue **)v10;
            }
            uint64_t v70 = *(void **)v86;
            if (!*(void *)v86) {
              return (llvm::UndefValue **)v10;
            }
            goto LABEL_89;
          }
          if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
          {
            char v68 = 0;
            int v67 = &byte_1CFBCE98E;
            goto LABEL_81;
          }
          uint64_t v28 = ***(void ***)a2;
          uint64_t v29 = *(void *)(v28 + 152);
          uint64_t v30 = *(unsigned int *)(v28 + 168);
          if (v30)
          {
            LODWORD(v31) = (v30 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            uint64_t v32 = (llvm::ValueAsMetadata **)(v29 + 16 * v31);
            int v33 = *v32;
            if (*v32 == a2)
            {
LABEL_80:
              uint64_t v66 = v32[1];
              uint64_t v69 = *(void **)v66;
              int v67 = (char *)v66 + 16;
              char v68 = v69;
LABEL_81:
              LOWORD(v100) = 261;
              v98[0] = v67;
              v98[1] = v68;
              unint64_t v10 = (unint64_t)llvm::BinaryOperator::Create(22, v11, (uint64_t)v12, (const char **)v98, 0);
              goto LABEL_87;
            }
            int v34 = 1;
            while (v33 != (llvm::ValueAsMetadata *)-4096)
            {
              int v35 = v31 + v34++;
              uint64_t v31 = v35 & (v30 - 1);
              int v33 = *(llvm::ValueAsMetadata **)(v29 + 16 * v31);
              if (v33 == a2)
              {
                uint64_t v32 = (llvm::ValueAsMetadata **)(v29 + 16 * v31);
                goto LABEL_80;
              }
            }
          }
          uint64_t v32 = (llvm::ValueAsMetadata **)(v29 + 16 * v30);
          goto LABEL_80;
        }
        if ((*(_DWORD *)(*(void *)v12 + 8) & 0xFE) != 0x12) {
          goto LABEL_18;
        }
      }
      else if ((*(_DWORD *)(*(void *)v12 + 8) & 0xFE) != 0x12 || v13 > 0x14)
      {
        goto LABEL_18;
      }
      SplatValue = (char *)llvm::Constant::getSplatValue(*((llvm::Constant **)a2 - 4), 0);
      if (!SplatValue || SplatValue[16] != 16) {
        goto LABEL_18;
      }
      int v16 = SplatValue + 24;
      uint64_t v15 = *((void *)SplatValue + 3);
      unsigned int v76 = *((_DWORD *)SplatValue + 8);
      unsigned int v77 = v76 - 1;
      uint64_t v78 = v76 >= 0x41 ? (char *)(v15 + 8 * (v77 >> 6)) : SplatValue + 24;
      if (((*(void *)v78 >> v77) & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_100;
    }
  }
  return (llvm::UndefValue **)v10;
}

llvm::UndefValue **sub_1CCA89E58(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (llvm::PoisonValue **)*((void *)a2 - 8);
  uint64_t v5 = (llvm::PoisonValue **)*((void *)a2 - 4);
  unint64_t v6 = (unint64_t)a2[17] >> 1;
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 104);
  v12[0] = *(_OWORD *)(a1 + 88);
  v12[1] = v8;
  uint64_t v14 = *((void *)&v7 + 1);
  unsigned int v13 = a2;
  if (v6 == 127) {
    char v9 = -1;
  }
  else {
    char v9 = v6;
  }
  unint64_t v10 = sub_1CC03A200(v4, v5, v9, (llvm::Constant **)v12, 0, (llvm::DSOLocalEquivalent **)1);
  if (v10)
  {
    return sub_1CC9D3C84(a1, (llvm::ValueAsMetadata *)a2, v10);
  }
  else
  {
    uint64_t result = (llvm::UndefValue **)sub_1CC9D812C(a1, a2);
    if (!result)
    {
      return (llvm::UndefValue **)sub_1CC9D6B70(a1, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1CCA89F30(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (uint64_t)(a1 + 1);
  **a1 = v6;
  int v8 = *(_DWORD *)(a2 + 20);
  uint64_t v9 = (v8 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (!sub_1CBF5250C(v7, *(llvm::Constant **)(v9 + 32))) {
    return 0;
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  }
  unsigned int v13 = *(llvm::Constant **)(v11 + 64);

  return sub_1CBF687D0((uint64_t)a1 + 9, v13);
}

uint64_t sub_1CCA89FF0(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (uint64_t)(a1 + 1);
  **a1 = v6;
  int v8 = *(_DWORD *)(a2 + 20);
  uint64_t v9 = (v8 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (!sub_1CBF687D0(v7, *(llvm::Constant **)(v9 + 32))) {
    return 0;
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  }
  unsigned int v13 = *(llvm::Constant **)(v11 + 64);

  return sub_1CBF5250C((uint64_t)a1 + 9, v13);
}

uint64_t sub_1CCA8A0B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 46)
  {
    if (v5 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 18) {
        goto LABEL_20;
      }
      uint64_t v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      uint64_t v13 = -v12;
      uint64_t v14 = *(void *)(a2 - 32 * v12);
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        if (!*(void *)(v15 + 8))
        {
          int v16 = sub_1CCA8A204(a1, v14);
          uint64_t v13 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
          if (v16)
          {
            uint64_t v17 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
            if (v17) {
              goto LABEL_19;
            }
          }
        }
      }
      uint64_t v18 = *(void *)(a2 + 32 * v13 + 32);
      a3 = *(void *)(v18 + 8);
      if (a3)
      {
        if (!*(void *)(a3 + 8))
        {
          if (sub_1CCA8A204(a1, v18))
          {
            uint64_t v17 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            if (v17)
            {
LABEL_19:
              **(void **)(a1 + 24) = v17;
              LOBYTE(a3) = 1;
              return (v5 == 5) & a3;
            }
          }
        }
LABEL_20:
        LOBYTE(a3) = 0;
      }
    }
    return (v5 == 5) & a3;
  }
  uint64_t v6 = *(void *)(a2 - 64);
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7)
  {
    if (!*(void *)(v7 + 8))
    {
      if (sub_1CCA8A204(a1, v6))
      {
        uint64_t v8 = *(void *)(a2 - 32);
        if (v8)
        {
LABEL_25:
          **(void **)(a1 + 24) = v8;
          return 1;
        }
      }
    }
  }
  uint64_t v9 = *(void *)(a2 - 32);
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10 || *(void *)(v10 + 8)) {
    return 0;
  }
  uint64_t result = sub_1CCA8A204(a1, v9);
  if (result)
  {
    uint64_t v8 = *(void *)(a2 - 64);
    if (!v8) {
      return 0;
    }
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_1CCA8A204(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  **(void **)a1 = v6;
  int v7 = *(_DWORD *)(a2 + 20);
  uint64_t v8 = (v7 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v7 & 0x7FFFFFF);
  SplatValue = *(unsigned __int8 **)(v8 + 32);
  unsigned int v10 = SplatValue[16];
  if (!SplatValue || v10 != 17)
  {
    if (v10 > 0x14 || (*(_DWORD *)(*(void *)SplatValue + 8) & 0xFE) != 18) {
      return 0;
    }
    SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
    if (!SplatValue || SplatValue[16] != 17) {
      return 0;
    }
  }
  if (!sub_1CB844168((uint64_t)SplatValue, *(double *)(a1 + 8))) {
    return 0;
  }
  int v14 = *(_DWORD *)(a2 + 20);
  uint64_t v15 = (v14 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v14 & 0x7FFFFFF);
  int v16 = *(unsigned __int8 **)(v15 + 64);
  unsigned int v17 = v16[16];
  if (!v16 || v17 != 17)
  {
    if (v17 > 0x14 || (*(_DWORD *)(*(void *)v16 + 8) & 0xFE) != 18) {
      return 0;
    }
    int v16 = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)v16, 0);
    if (!v16 || v16[16] != 17) {
      return 0;
    }
  }
  double v19 = *(double *)(a1 + 16);

  return sub_1CB844168((uint64_t)v16, v19);
}

BOOL sub_1CCA8A344(llvm::Constant *this)
{
  BOOL v1 = this;
  unsigned int v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 16)
  {
LABEL_3:
    uint64_t v3 = (llvm::Constant *)((char *)this + 24);
    return sub_1CCA4D700(v3);
  }
  uint64_t v5 = *(void *)this;
  if (v2 <= 0x14 && v5 != 0 && (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18)
  {
    this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    if (this && *((unsigned char *)this + 16) == 16) {
      goto LABEL_3;
    }
    if (*(unsigned char *)(v5 + 8) == 18)
    {
      int v8 = *(_DWORD *)(v5 + 32);
      if (v8)
      {
        uint64_t v9 = 0;
        char v10 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(v1, v9);
          if (!AggregateElement) {
            break;
          }
          int v12 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v12 - 11) >= 2)
          {
            if (v12 != 16 || !sub_1CCA4D700((llvm::APInt *)(AggregateElement + 3))) {
              break;
            }
            char v10 = 1;
          }
          uint64_t v9 = (llvm::Type *)(v9 + 1);
          if (v8 == v9) {
            return v10 & 1;
          }
        }
      }
    }
  }
  char v10 = 0;
  return v10 & 1;
}

BOOL sub_1CCA8A448@<W0>(void **a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 57)
  {
    uint64_t v6 = *(void *)(a2 - 64);
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 27) {
        return 0;
      }
      uint64_t v12 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      if (!v12) {
        return 0;
      }
      **a1 = v12;
      if (!sub_1CCA15C64((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32)))return 0; {
    }
      }
    else
    {
      if (v7 != 55) {
        return 0;
      }
      uint64_t v8 = *(void *)(v6 - 64);
      if (!v8) {
        return 0;
      }
      **a1 = v8;
      if (!sub_1CCA4852C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v6 - 32))) {
        return 0;
      }
    }
    return (sub_1CBF5250C((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 27) {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
      if (!v14) {
        goto LABEL_25;
      }
      **a1 = v14;
      if (!sub_1CCA15C64((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32)))goto LABEL_25; {
    }
      }
    else
    {
      if (v10 != 55) {
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(v9 - 64);
      if (!v11) {
        goto LABEL_25;
      }
      **a1 = v11;
      if (!sub_1CCA4852C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v9 - 32))) {
        goto LABEL_25;
      }
    }
    if ((sub_1CBF5270C((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

uint64_t sub_1CCA8A5F4(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v3 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *a1);
    uint64_t v4 = *(void *)(v3 + 8);
    if (!v4) {
      return 0;
    }
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      return 0;
    }
    int v7 = *(unsigned __int8 *)(v3 + 16);
    if (v7 == 46)
    {
      uint64_t v8 = *(void *)(v3 - 64);
      if (v8)
      {
        **((void **)a1 + 1) = v8;
        SplatValue = *(unsigned __int8 **)(v3 - 32);
        unsigned int v10 = SplatValue[16];
        BOOL v11 = SplatValue && v10 == 17;
        if (v11
          || (v10 <= 0x14 ? (BOOL v12 = (*(_DWORD *)(*(void *)SplatValue + 8) & 0xFE) == 18) : (BOOL v12 = 0),
              v12
           && (uint64_t v13 = a1,
               (SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0)) != 0)
           && (a1 = v13, SplatValue[16] == 17)))
        {
          if (sub_1CB844168((uint64_t)SplatValue, *((double *)a1 + 2))) {
            return 1;
          }
        }
      }
      return 0;
    }
    if (v7 == 5) {
      LOBYTE(v5) = *(_WORD *)(v3 + 18) == 18
    }
                && (uint64_t v14 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))) != 0
                && (**((void **)a1 + 1) = v14,
                    (sub_1CD6404D8((double *)a1 + 2, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32)) & 1) != 0);
    return (v7 == 5) & v5;
  }
  return v2;
}

BOOL sub_1CCA8A748(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = (v2 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v2 & 0x7FFFFFF);
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(v3 + 32) + 16);
  if (v4 > 0x14 || v4 == 5) {
    return 0;
  }
  unsigned int v6 = *(unsigned __int8 *)(*(void *)(v3 + 64) + 16);
  return v6 < 0x15 && v6 != 5;
}

uint64_t sub_1CCA8A7A0(void **a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0) {
      return 0;
    }
    unsigned int v8 = v2 - 28;
  }
  if (v8 != 17 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  uint64_t v15 = *v14;
  if (!v15) {
    return 0;
  }
  unsigned int v17 = *a1;
  uint64_t v16 = (uint64_t)(a1 + 1);
  *unsigned int v17 = v15;
  int v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v19 = a2 - 32 * (v18 & 0x7FFFFFF);
  }
  return sub_1CBF528D8(v16, *(unsigned __int8 **)(v19 + 32));
}

uint64_t sub_1CCA8A868(void **a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0) {
      return 0;
    }
    unsigned int v8 = v2 - 28;
  }
  if (v8 != 25 || (*(unsigned char *)(a2 + 17) & 4) == 0) {
    return 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  uint64_t v15 = *v14;
  if (!v15) {
    return 0;
  }
  unsigned int v17 = *a1;
  uint64_t v16 = (uint64_t)(a1 + 1);
  *unsigned int v17 = v15;
  int v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v19 = a2 - 32 * (v18 & 0x7FFFFFF);
  }
  return sub_1CBF528D8(v16, *(unsigned __int8 **)(v19 + 32));
}

uint64_t sub_1CCA8A930(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v3) = *(unsigned __int8 *)(a3 + 16);
  if (v3 < 0x1C)
  {
    if (v3 == 5)
    {
      LODWORD(v3) = *(unsigned __int16 *)(a3 + 18);
      HIDWORD(v10) = v3 - 13;
      LODWORD(v10) = v3 - 13;
      unsigned int v9 = v10 >> 1;
      BOOL v6 = v9 > 6;
      int v11 = (1 << v9) & 0x47;
      if (!v6 && v11 != 0) {
        goto LABEL_12;
      }
    }
LABEL_16:
    int v15 = 0;
    return v15 & v3;
  }
  HIDWORD(v5) = v3 - 41;
  LODWORD(v5) = v3 - 41;
  unsigned int v4 = v5 >> 1;
  BOOL v6 = v4 > 6;
  int v7 = (1 << v4) & 0x47;
  if (v6 || v7 == 0) {
    goto LABEL_16;
  }
  LODWORD(v3) = v3 - 28;
LABEL_12:
  if (v3 == 17
    && (*(unsigned char *)(a3 + 17) & 2) != 0
    && ((int v13 = *(_DWORD *)(a3 + 20), (v13 & 0x40000000) != 0)
      ? (uint64_t v14 = *(void **)(a3 - 8))
      : (uint64_t v14 = (void *)(a3 - 32 * (v13 & 0x7FFFFFF))),
        *v14 == a1))
  {
    uint64_t v3 = v14[4];
    if (v3)
    {
      *a2 = v3;
      int v15 = 1;
      LODWORD(v3) = 1;
      return v15 & v3;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  int v15 = 1;
  return v15 & v3;
}

BOOL sub_1CCA8A9FC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0) {
      return 0;
    }
    unsigned int v8 = v2 - 28;
  }
  if (v8 != 17 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  uint64_t v15 = *v14;
  if (!v15) {
    return 0;
  }
  **(void **)a1 = v15;
  int v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v17 = a2 - 32 * (v16 & 0x7FFFFFF);
  }
  return *(void *)(a1 + 8) == *(void *)(v17 + 32);
}

uint64_t sub_1CCA8AAD0(uint64_t a1, uint64_t a2)
{
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if (v4 == 5)
    {
      LODWORD(v4) = *(unsigned __int16 *)(a2 + 18);
      HIDWORD(v11) = v4 - 13;
      LODWORD(v11) = v4 - 13;
      unsigned int v10 = v11 >> 1;
      BOOL v7 = v10 > 6;
      int v12 = (1 << v10) & 0x47;
      if (!v7 && v12 != 0)
      {
LABEL_12:
        if (v4 != 15 || (*(unsigned char *)(a2 + 17) & 4) == 0) {
          goto LABEL_26;
        }
        int v14 = *(_DWORD *)(a2 + 20);
        uint64_t v15 = (v14 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
        uint64_t v17 = *v15;
        if (!*v15) {
          goto LABEL_26;
        }
        unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
        if (v18 > 0x14) {
          goto LABEL_26;
        }
        if (v18 == 16)
        {
          uint64_t v19 = *(unsigned int *)(v17 + 32);
          if (v19 < 0x41)
          {
            if (!*(void *)(v17 + 24)) {
              goto LABEL_24;
            }
LABEL_23:
            if (sub_1CC03F414((uint64_t)&v28, (llvm::Constant *)v17)) {
              goto LABEL_24;
            }
LABEL_26:
            LODWORD(v4) = 0;
LABEL_27:
            int v16 = 1;
            return v16 & v4;
          }
          int v24 = 0;
          int64_t v25 = (unint64_t)(v19 + 63) >> 6;
          do
          {
            BOOL v7 = v25-- < 1;
            if (v7) {
              break;
            }
            unint64_t v26 = *(void *)(*(void *)(v17 + 24) + 8 * v25);
            v24 += __clz(v26);
          }
          while (!v26);
          int v27 = v19 | 0xFFFFFFC0;
          if ((v19 & 0x3F) == 0) {
            int v27 = 0;
          }
          if (v24 + v27 != v19) {
            goto LABEL_23;
          }
        }
        else if (v18 == 17)
        {
          if ((sub_1CB844168(v17, 0.0) & 1) == 0) {
            goto LABEL_23;
          }
        }
        else if (v18 - 18 >= 3 && v18 != 13)
        {
          goto LABEL_23;
        }
LABEL_24:
        int v20 = *(_DWORD *)(a2 + 20);
        if ((v20 & 0x40000000) != 0) {
          uint64_t v21 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v21 = a2 - 32 * (v20 & 0x7FFFFFF);
        }
        uint64_t v4 = *(void *)(v21 + 32);
        if (v4)
        {
          **(void **)(a1 + 8) = v4;
          int v16 = 1;
          LODWORD(v4) = 1;
          return v16 & v4;
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    HIDWORD(v6) = v4 - 41;
    LODWORD(v6) = v4 - 41;
    unsigned int v5 = v6 >> 1;
    BOOL v7 = v5 > 6;
    int v8 = (1 << v5) & 0x47;
    if (!v7 && v8 != 0)
    {
      LODWORD(v4) = v4 - 28;
      goto LABEL_12;
    }
  }
  int v16 = 0;
  return v16 & v4;
}

BOOL sub_1CCA8AC90(uint64_t a1, uint64_t a2)
{
  return sub_1CC045310(a1, a2)
      && a2
      && *(unsigned char *)(a2 + 16) == 84
      && (sub_1CBF5250C(a1 + 28, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24))) & 1) != 0;
}

uint64_t llvm::Negator::Negator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  v14[0] = &unk_1F262B650;
  v14[1] = a1;
  uint64_t v15 = v14;
  int v16 = &unk_1F2616B68;
  v17[3] = v17;
  v17[0] = &unk_1F262B650;
  v17[1] = a1;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 0x200000000;
  *(void *)(a1 + 208) = a2;
  *(void *)(a1 + 216) = a1 + 264;
  *(void *)(a1 + 224) = a1 + 280;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 244) = 512;
  *(unsigned char *)(a1 + 246) = 7;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = &unk_1F2602158;
  *(void *)(a1 + 272) = a3;
  *(void *)(a1 + 280) = &unk_1F2616B68;
  *(void *)(a1 + 312) = a1 + 288;
  *(void *)(a1 + 288) = &unk_1F262B650;
  *(void *)(a1 + 296) = a1;
  llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter((llvm::IRBuilderCallbackInserter *)&v16);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void *, uint64_t))(*v15 + 40))(v15, v11);
  }
  *(void *)(a1 + 320) = a3;
  *(void *)(a1 + 328) = a4;
  *(void *)(a1 + 336) = a5;
  *(unsigned char *)(a1 + 344) = a6;
  *(void *)(a1 + 352) = 1;
  for (uint64_t i = 360; i != 424; i += 16)
    *(void *)(a1 + i) = -4096;
  return a1;
}

uint64_t llvm::Negator::getSortedOperandsOfBinOp(llvm::Negator *this, llvm::Instruction *a2)
{
  int v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x40000000) != 0)
  {
    int v13 = (uint64_t *)*((void *)a2 - 1);
    uint64_t v5 = *v13;
    uint64_t v6 = v13[4];
    if (!llvm::Instruction::isCommutative(a2)) {
      return v5;
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)((char *)a2 - 32 * (v3 & 0x7FFFFFF));
    uint64_t v5 = *v4;
    uint64_t v6 = v4[4];
    if ((llvm::Instruction::isCommutative(a2) & 1) == 0) {
      return v5;
    }
  }
  unsigned int v7 = sub_1CC9D2700(v5);
  int v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0) {
    unsigned int v9 = (char *)*((void *)a2 - 1);
  }
  else {
    unsigned int v9 = (char *)a2 - 32 * (v8 & 0x7FFFFFF);
  }
  unsigned int v10 = sub_1CC9D2700(*((void *)v9 + 4));
  if (v7 >= v10) {
    return v5;
  }
  else {
    return v6;
  }
}

const llvm::detail::DoubleAPFloat *llvm::Negator::visitImpl(llvm::Negator *this, llvm::Value *a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t)a2;
  uint64_t v604 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (*((unsigned char *)a2 + 16) - 11);
  if (v4 >= 2)
  {
    if (v4 >= 0xFD)
    {
      BOOL v598 = (char *)&v601 + 8;
      uint64_t v599 = (void **)&v601 + 1;
      uint64_t v600 = 8;
      LODWORD(v601) = 0;
      uint64_t v594 = v596;
      uint64_t v595 = 0x800000000;
      int v587 = &v598;
      *(void *)&long long v588 = &v594;
      BOOL v152 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v587, (uint64_t)a2))
      {
        do
        {
          BOOL v152 = v595 == 0;
          if (!v595) {
            break;
          }
          uint64_t v583 = *((void *)v594 + v595 - 1);
          LODWORD(v595) = v595 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v587, v583) & 1) != 0);
      }
      if (v594 != v596) {
        free(v594);
      }
      if (v599 == v598)
      {
        if (v152) {
          return (const llvm::detail::DoubleAPFloat *)v3;
        }
      }
      else
      {
        free(v599);
        if (v152) {
          return (const llvm::detail::DoubleAPFloat *)v3;
        }
      }
    }
    int v7 = *(_DWORD *)(*(void *)v3 + 8);
    if ((v7 & 0xFE) == 0x12) {
      int v7 = *(_DWORD *)(**(void **)(*(void *)v3 + 16) + 8);
    }
    if (v7 != 269)
    {
      int v590 = 0;
      uint64_t v599 = (void **)&v590;
      int v8 = *(unsigned __int8 *)(v3 + 16);
      if (v8 == 5)
      {
        if (*(_WORD *)(v3 + 18) != 15
          || !sub_1CC03F414((uint64_t)&v598, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)))|| (unsigned int v9 = *(void **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32)) == 0)
        {
LABEL_15:
          if (sub_1CC9F89B4((int)&v598, (llvm::Constant *)v3))
          {
            int v13 = *(llvm::ConstantFP **)v3;
            if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
              unsigned int v14 = *(unsigned __int8 *)(**((void **)v13 + 2) + 8);
            }
            else {
              unsigned int v14 = *(_DWORD *)(*(void *)v3 + 8);
            }
            if (v14 <= 6) {
              Zero = llvm::ConstantFP::getZero(v13, (llvm::Type *)1, v12);
            }
            else {
              Zero = llvm::Constant::getNullValue(v13, v11, v12);
            }
            uint64_t v17 = Zero;
            unsigned int v10 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v3, v16);
            if (v10) {
              return v10;
            }
            unsigned int v18 = *(void ***)v17;
            if (*(void *)v17)
            {
              uint64_t v594 = v17;
              uint64_t v595 = v3;
              uint64_t v19 = **v18 + 1512;
              LODWORD(v598) = 15;
              uint64_t v599 = &v594;
              uint64_t v600 = 2;
              long long v601 = 0u;
              long long v602 = 0u;
              uint64_t v603 = 0;
              return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v19, (uint64_t)v18, (unsigned __int8 *)&v598);
            }
            return 0;
          }
          if (*(unsigned __int8 *)(v3 + 16) < 0x1Cu) {
            return 0;
          }
          uint64_t v20 = *(void *)(v3 + 8);
          if ((!v20 || *(void *)(v20 + 8)) && !*((unsigned char *)this + 344)) {
            return 0;
          }
          uint64_t v21 = *(llvm::Type **)v3;
          if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
            uint64_t v21 = (llvm::Type *)**((void **)v21 + 2);
          }
          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v21);
          int v24 = (llvm::Negator *)((char *)this + 144);
          uint64_t v23 = *((void *)this + 18);
          int v587 = (void **)((char *)this + 144);
          long long v588 = *((_OWORD *)this + 12);
          uint64_t v25 = *((unsigned int *)this + 38);
          if (v25)
          {
            uint64_t v210 = (unsigned __int8 **)(v23 + 8);
            uint64_t v211 = 16 * v25;
            while (*((_DWORD *)v210 - 2))
            {
              v210 += 2;
              v211 -= 16;
              if (!v211) {
                goto LABEL_30;
              }
            }
            uint64_t v212 = *v210;
            uint64_t v589 = v212;
            if (v212) {
              llvm::MetadataTracking::track((uint64_t)&v589, v212, 2);
            }
          }
          else
          {
LABEL_30:
            uint64_t v589 = 0;
          }
          *((void *)this + 24) = *(void *)(v3 + 40);
          *((void *)this + 25) = v3 + 24;
          unint64_t v26 = *(void **)(v3 + 48);
          uint64_t v594 = v26;
          if (v26)
          {
            llvm::MetadataTracking::track((uint64_t)&v594, (unsigned __int8 *)v26, 2);
            int v27 = v594;
          }
          else
          {
            int v27 = 0;
          }
          uint64_t isNotMinSignedValue = sub_1CB8461A4((uint64_t)this + 144, 0, (uint64_t)v27);
          if (!v594)
          {
LABEL_34:
            unsigned int v31 = *(unsigned __int8 *)(v3 + 16);
            if (v31 > 0x39)
            {
              if (v31 - 67 >= 2)
              {
                if (v31 != 58)
                {
                  if (v31 != 85) {
                    goto LABEL_106;
                  }
                  uint64_t v32 = *(unsigned __int8 **)(v3 - 64);
                  unsigned int v33 = v32[16];
                  if (v33 != 5)
                  {
                    if (v32)
                    {
                      if (v33 <= 0x14)
                      {
                        int v34 = *(unsigned __int8 **)(v3 - 32);
                        unsigned int v35 = v34[16];
                        if (v35 != 5 && v34 && v35 <= 0x14)
                        {
                          int v36 = *(llvm::ConstantFP **)v32;
                          if ((*(_DWORD *)(*(void *)v32 + 8) & 0xFE) == 0x12) {
                            unsigned int v37 = *(unsigned __int8 *)(**((void **)v36 + 2) + 8);
                          }
                          else {
                            unsigned int v37 = *(_DWORD *)(*(void *)v32 + 8);
                          }
                          if (v37 <= 6) {
                            NullValue = llvm::ConstantFP::getZero(v36, (llvm::Type *)1, v30);
                          }
                          else {
                            NullValue = llvm::Constant::getNullValue(v36, v29, v30);
                          }
                          BOOL v40 = (llvm::Type **)NullValue;
                          uint64_t v43 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, (llvm::Constant *)v32, v39);
                          if (!v43)
                          {
                            uint64_t v41 = *v40;
                            if (*v40)
                            {
                              uint64_t v594 = v40;
                              uint64_t v595 = (uint64_t)v32;
                              uint64_t v578 = **(void **)v41 + 1512;
                              LODWORD(v598) = 15;
                              uint64_t v599 = &v594;
                              uint64_t v600 = 2;
                              long long v601 = 0u;
                              long long v602 = 0u;
                              uint64_t v603 = 0;
                              uint64_t v43 = sub_1CC56C20C(v578, (uint64_t)v41, (unsigned __int8 *)&v598);
                            }
                            else
                            {
                              uint64_t v43 = 0;
                            }
                          }
                          uint64_t v44 = *(llvm::ConstantFP **)v34;
                          if ((*(_DWORD *)(*(void *)v34 + 8) & 0xFE) == 0x12) {
                            unsigned int v45 = *(unsigned __int8 *)(**((void **)v44 + 2) + 8);
                          }
                          else {
                            unsigned int v45 = *(_DWORD *)(*(void *)v34 + 8);
                          }
                          if (v45 <= 6) {
                            uint64_t v46 = llvm::ConstantFP::getZero(v44, (llvm::Type *)1, v42);
                          }
                          else {
                            uint64_t v46 = llvm::Constant::getNullValue(v44, v41, v42);
                          }
                          int v48 = v46;
                          BOOL v49 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v46, (llvm::Constant *)v34, v47);
                          if (!v49)
                          {
                            unint64_t v579 = *(void ***)v48;
                            if (*(void *)v48)
                            {
                              uint64_t v594 = v48;
                              uint64_t v595 = (uint64_t)v34;
                              uint64_t v580 = **v579 + 1512;
                              LODWORD(v598) = 15;
                              uint64_t v599 = &v594;
                              uint64_t v600 = 2;
                              long long v601 = 0u;
                              long long v602 = 0u;
                              uint64_t v603 = 0;
                              BOOL v49 = (llvm::Value *)sub_1CC56C20C(v580, (uint64_t)v579, (unsigned __int8 *)&v598);
                            }
                            else
                            {
                              BOOL v49 = 0;
                            }
                          }
                          int v50 = *(llvm::Value **)(v3 - 96);
                          if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                          {
                            uint64_t v219 = 0;
                            uint64_t v218 = &byte_1CFBCE98E;
LABEL_276:
                            WORD4(v601) = 773;
                            BOOL v598 = v218;
                            uint64_t v599 = v219;
                            uint64_t v600 = (uint64_t)".neg";
                            int v221 = v24;
                            int v222 = (llvm::Value *)v43;
LABEL_277:
                            Select = llvm::IRBuilderBase::CreateSelect(v221, v50, v222, v49, (const llvm::Twine *)&v598, (uint64_t ***)v3);
                            goto LABEL_363;
                          }
                          uint64_t v51 = ***(void ***)v3;
                          uint64_t v52 = *(void *)(v51 + 152);
                          uint64_t v53 = *(unsigned int *)(v51 + 168);
                          if (v53)
                          {
                            LODWORD(v54) = (v53 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                            uint64_t v55 = (unsigned __int8 **)(v52 + 16 * v54);
                            uint64_t v56 = *v55;
                            if (*v55 == (unsigned __int8 *)v3)
                            {
LABEL_275:
                              uint64_t v217 = v55[1];
                              char v220 = *(void ***)v217;
                              uint64_t v218 = (char *)(v217 + 16);
                              uint64_t v219 = v220;
                              goto LABEL_276;
                            }
                            int v57 = 1;
                            while (v56 != (unsigned __int8 *)-4096)
                            {
                              int v58 = v54 + v57++;
                              uint64_t v54 = v58 & (v53 - 1);
                              uint64_t v56 = *(unsigned __int8 **)(v52 + 16 * v54);
                              if (v56 == (unsigned __int8 *)v3)
                              {
                                uint64_t v55 = (unsigned __int8 **)(v52 + 16 * v54);
                                goto LABEL_275;
                              }
                            }
                          }
                          uint64_t v55 = (unsigned __int8 **)(v52 + 16 * v53);
                          goto LABEL_275;
                        }
                      }
                    }
                  }
                  goto LABEL_105;
                }
                BOOL v598 = &v590;
                uint64_t isNotMinSignedValue = sub_1CBF686A0((void **)&v598, 30, v3);
                if (isNotMinSignedValue)
                {
                  unsigned int v87 = (llvm::Instruction *)v590;
                  uint64_t v88 = llvm::ConstantInt::get(*v590, 1uLL, 0);
                  if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                  {
LABEL_410:
                    unsigned int v307 = 0;
                    int64x2_t v306 = &byte_1CFBCE98E;
                    goto LABEL_362;
                  }
                  uint64_t v89 = ***(void ***)v3;
                  uint64_t v90 = *(void *)(v89 + 152);
                  uint64_t v91 = *(unsigned int *)(v89 + 168);
                  if (v91)
                  {
                    LODWORD(v92) = (v91 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                    int v93 = (unsigned __int8 **)(v90 + 16 * v92);
                    uint64_t v94 = *v93;
                    if (*v93 == (unsigned __int8 *)v3)
                    {
LABEL_361:
                      int64x2_t v305 = v93[1];
                      uint64_t v308 = *(void ***)v305;
                      int64x2_t v306 = (char *)(v305 + 16);
                      unsigned int v307 = v308;
LABEL_362:
                      WORD4(v601) = 773;
                      BOOL v598 = v306;
                      uint64_t v599 = v307;
                      uint64_t v600 = (uint64_t)".neg";
                      Select = sub_1CB844A3C((uint64_t)v24, v87, (uint64_t)v88, (uint64_t)&v598, 0, 0);
                      goto LABEL_363;
                    }
                    int v95 = 1;
                    while (v94 != (unsigned __int8 *)-4096)
                    {
                      int v96 = v92 + v95++;
                      uint64_t v92 = v96 & (v91 - 1);
                      uint64_t v94 = *(unsigned __int8 **)(v90 + 16 * v92);
                      if (v94 == (unsigned __int8 *)v3)
                      {
LABEL_104:
                        int v93 = (unsigned __int8 **)(v90 + 16 * v92);
                        goto LABEL_361;
                      }
                    }
                  }
LABEL_360:
                  int v93 = (unsigned __int8 **)(v90 + 16 * v91);
                  goto LABEL_361;
                }
                goto LABEL_105;
              }
              int v61 = *(_DWORD *)(v3 + 20);
              if ((v61 & 0x40000000) != 0) {
                uint64_t v62 = *(unsigned __int8 **)(v3 - 8);
              }
              else {
                uint64_t v62 = (unsigned __int8 *)(v3 - 32 * (v61 & 0x7FFFFFF));
              }
              uint64_t v74 = **(void **)v62;
              int v75 = *(_DWORD *)(v74 + 8);
              if ((v75 & 0xFE) == 0x12) {
                int v75 = *(_DWORD *)(**(void **)(v74 + 16) + 8);
              }
              if (v75 != 269) {
                goto LABEL_105;
              }
              if (v31 == 68)
              {
                if ((v61 & 0x40000000) != 0) {
                  unsigned int v76 = *(const llvm::detail::DoubleAPFloat ***)(v3 - 8);
                }
                else {
                  unsigned int v76 = (const llvm::detail::DoubleAPFloat **)(v3 - 32 * (v61 & 0x7FFFFFF));
                }
                unsigned int v10 = *v76;
                uint64_t v134 = *(llvm::ConstantFP **)v3;
                if ((v61 & 0x10000000) == 0)
                {
                  uint64_t v190 = 0;
                  int v189 = &byte_1CFBCE98E;
LABEL_227:
                  __int16 v597 = 773;
                  uint64_t v594 = v189;
                  uint64_t v595 = v190;
                  v596[0] = ".neg";
                  if (*(llvm::ConstantFP **)v10 != v134)
                  {
                    if (*((unsigned __int8 *)v10 + 16) <= 0x14u)
                    {
                      unsigned int v10 = (const llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(void, uint64_t, const llvm::detail::DoubleAPFloat *, llvm::ConstantFP *))(**((void **)this + 27) + 224))(*((void *)this + 27), 39, v10, v134);
                      if (v10) {
                        BOOL v195 = *((unsigned __int8 *)v10 + 16) >= 0x1Cu;
                      }
                      else {
                        BOOL v195 = 0;
                      }
                      if (v195)
                      {
                        (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v594, *((void *)this + 24), *((void *)this + 25));
                        uint64_t v196 = *((unsigned int *)this + 38);
                        if (v196)
                        {
                          uint64_t v197 = *((void *)this + 18);
                          uint64_t v198 = v197 + 16 * v196;
                          do
                          {
                            llvm::Instruction::setMetadata(v10, *(_DWORD *)v197, *(llvm::MDNode **)(v197 + 8));
                            v197 += 16;
                          }
                          while (v197 != v198);
                        }
                      }
                    }
                    else
                    {
                      WORD4(v601) = 257;
                      unsigned int v10 = llvm::CastInst::Create(39, (uint64_t)v10, (uint64_t)v134, (const char **)&v598, 0);
                      (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v594, *((void *)this + 24), *((void *)this + 25));
                      uint64_t v192 = *((unsigned int *)this + 38);
                      if (v192)
                      {
                        uint64_t v193 = *((void *)this + 18);
                        uint64_t v194 = v193 + 16 * v192;
                        do
                        {
                          llvm::Instruction::setMetadata(v10, *(_DWORD *)v193, *(llvm::MDNode **)(v193 + 8));
                          v193 += 16;
                        }
                        while (v193 != v194);
                      }
                    }
                  }
                  goto LABEL_364;
                }
                uint64_t v135 = **(void **)v134;
                uint64_t v136 = *(void *)(v135 + 152);
                uint64_t v137 = *(unsigned int *)(v135 + 168);
                if (v137)
                {
                  LODWORD(v138) = (v137 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                  long long v139 = (unsigned __int8 **)(v136 + 16 * v138);
                  uint64_t v140 = *v139;
                  if (*v139 == (unsigned __int8 *)v3)
                  {
LABEL_226:
                    uint64_t v188 = v139[1];
                    uint64_t v191 = *(void *)v188;
                    int v189 = (char *)(v188 + 16);
                    uint64_t v190 = v191;
                    goto LABEL_227;
                  }
                  int v141 = 1;
                  while (v140 != (unsigned __int8 *)-4096)
                  {
                    int v142 = v138 + v141++;
                    uint64_t v138 = v142 & (v137 - 1);
                    uint64_t v140 = *(unsigned __int8 **)(v136 + 16 * v138);
                    if (v140 == (unsigned __int8 *)v3)
                    {
                      long long v139 = (unsigned __int8 **)(v136 + 16 * v138);
                      goto LABEL_226;
                    }
                  }
                }
                long long v139 = (unsigned __int8 **)(v136 + 16 * v137);
                goto LABEL_226;
              }
              if ((v61 & 0x40000000) != 0) {
                uint64_t v124 = *(const llvm::detail::DoubleAPFloat ***)(v3 - 8);
              }
              else {
                uint64_t v124 = (const llvm::detail::DoubleAPFloat **)(v3 - 32 * (v61 & 0x7FFFFFF));
              }
              unsigned int v10 = *v124;
              uint64_t v143 = *(llvm::ConstantFP **)v3;
              if ((v61 & 0x10000000) == 0)
              {
                uint64_t v201 = 0;
                uint64_t v200 = &byte_1CFBCE98E;
LABEL_244:
                __int16 v597 = 773;
                uint64_t v594 = v200;
                uint64_t v595 = v201;
                v596[0] = ".neg";
                if (*(llvm::ConstantFP **)v10 != v143)
                {
                  if (*((unsigned __int8 *)v10 + 16) <= 0x14u)
                  {
                    unsigned int v10 = (const llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(void, uint64_t, const llvm::detail::DoubleAPFloat *, llvm::ConstantFP *))(**((void **)this + 27) + 224))(*((void *)this + 27), 40, v10, v143);
                    if (v10) {
                      BOOL v206 = *((unsigned __int8 *)v10 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v206 = 0;
                    }
                    if (v206)
                    {
                      (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v594, *((void *)this + 24), *((void *)this + 25));
                      uint64_t v207 = *((unsigned int *)this + 38);
                      if (v207)
                      {
                        uint64_t v208 = *((void *)this + 18);
                        uint64_t v209 = v208 + 16 * v207;
                        do
                        {
                          llvm::Instruction::setMetadata(v10, *(_DWORD *)v208, *(llvm::MDNode **)(v208 + 8));
                          v208 += 16;
                        }
                        while (v208 != v209);
                      }
                    }
                  }
                  else
                  {
                    WORD4(v601) = 257;
                    unsigned int v10 = llvm::CastInst::Create(40, (uint64_t)v10, (uint64_t)v143, (const char **)&v598, 0);
                    (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v594, *((void *)this + 24), *((void *)this + 25));
                    uint64_t v203 = *((unsigned int *)this + 38);
                    if (v203)
                    {
                      uint64_t v204 = *((void *)this + 18);
                      uint64_t v205 = v204 + 16 * v203;
                      do
                      {
                        llvm::Instruction::setMetadata(v10, *(_DWORD *)v204, *(llvm::MDNode **)(v204 + 8));
                        v204 += 16;
                      }
                      while (v204 != v205);
                    }
                  }
                }
LABEL_364:
                unint64_t v309 = (llvm::SmallPtrSetImplBase *)v587;
                if ((void)v588)
                {
                  sub_1CBF5385C((uint64_t)v587, v588, *((uint64_t *)&v588 + 1));
                  unint64_t v309 = (llvm::SmallPtrSetImplBase *)v587;
                }
                else
                {
                  v587[6] = 0;
                  *((void *)v309 + 7) = 0;
                }
                uint64_t v594 = v589;
                if (v589)
                {
                  llvm::MetadataTracking::track((uint64_t)&v594, v589, 2);
                  unsigned int v310 = v594;
                }
                else
                {
                  unsigned int v310 = 0;
                }
                sub_1CB8461A4((uint64_t)v309, 0, (uint64_t)v310);
                if (!v594) {
                  goto LABEL_370;
                }
                int v312 = *(unsigned __int8 *)v594;
                if ((v312 - 4) > 0x1E)
                {
                  if ((v312 - 3) >= 0xFFFFFFFE) {
                    uint64_t v318 = v594;
                  }
                  else {
                    uint64_t v318 = 0;
                  }
                  if ((v312 - 3) < 0xFFFFFFFE)
                  {
                    if (v312 == 3) {
                      *((void *)v594 + 1) = 0;
                    }
LABEL_370:
                    if (v589)
                    {
                      int v315 = *v589;
                      if ((v315 - 4) > 0x1E)
                      {
                        if ((v315 - 3) >= 0xFFFFFFFE) {
                          long long v319 = v589;
                        }
                        else {
                          long long v319 = 0;
                        }
                        if ((v315 - 3) < 0xFFFFFFFE)
                        {
                          if (v315 == 3) {
                            *((void *)v589 + 1) = 0;
                          }
                          return v10;
                        }
                        unint64_t v317 = (unint64_t)(v319 + 8);
                      }
                      else
                      {
                        if ((v589[1] & 0x7F) != 2 && !*((_DWORD *)v589 + 3)) {
                          return v10;
                        }
                        uint64_t v316 = *((void *)v589 + 2);
                        if ((v316 & 4) == 0) {
                          return v10;
                        }
                        unint64_t v317 = v316 & 0xFFFFFFFFFFFFFFF8;
                        if (!v317) {
                          return v10;
                        }
                      }
                      BOOL v598 = &v589;
                      sub_1CC5FA668(v317 + 16, &v598);
                    }
                    return v10;
                  }
                  unint64_t v314 = (unint64_t)v318 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v594 + 1) & 0x7F) != 2 && !*((_DWORD *)v594 + 3)) {
                    goto LABEL_370;
                  }
                  uint64_t v313 = *((void *)v594 + 2);
                  if ((v313 & 4) == 0) {
                    goto LABEL_370;
                  }
                  unint64_t v314 = v313 & 0xFFFFFFFFFFFFFFF8;
                  if (!v314) {
                    goto LABEL_370;
                  }
                }
                BOOL v598 = &v594;
                sub_1CC5FA668(v314 + 16, &v598);
                goto LABEL_370;
              }
              uint64_t v144 = **(void **)v143;
              uint64_t v145 = *(void *)(v144 + 152);
              uint64_t v146 = *(unsigned int *)(v144 + 168);
              if (v146)
              {
                LODWORD(v147) = (v146 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                int v148 = (unsigned __int8 **)(v145 + 16 * v147);
                __int16 v149 = *v148;
                if (*v148 == (unsigned __int8 *)v3)
                {
LABEL_243:
                  uint64_t v199 = v148[1];
                  uint64_t v202 = *(void *)v199;
                  uint64_t v200 = (char *)(v199 + 16);
                  uint64_t v201 = v202;
                  goto LABEL_244;
                }
                int v150 = 1;
                while (v149 != (unsigned __int8 *)-4096)
                {
                  int v151 = v147 + v150++;
                  uint64_t v147 = v151 & (v146 - 1);
                  __int16 v149 = *(unsigned __int8 **)(v145 + 16 * v147);
                  if (v149 == (unsigned __int8 *)v3)
                  {
                    int v148 = (unsigned __int8 **)(v145 + 16 * v147);
                    goto LABEL_243;
                  }
                }
              }
              int v148 = (unsigned __int8 **)(v145 + 16 * v146);
              goto LABEL_243;
            }
            if (v31 - 54 >= 2)
            {
              if (v31 != 41) {
                goto LABEL_106;
              }
              uint64_t SortedOperandsOfBinOp = llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)isNotMinSignedValue, (llvm::Instruction *)v3);
              uint64_t isNotMinSignedValue = sub_1CBF5250C((uint64_t)&v598, v64);
              if (isNotMinSignedValue)
              {
                if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                {
                  uint64_t v66 = ***(void ***)v3;
                  uint64_t v67 = *(void *)(v66 + 152);
                  uint64_t v68 = *(unsigned int *)(v66 + 168);
                  if (v68)
                  {
                    LODWORD(v69) = (v68 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                    uint64_t v70 = (unsigned __int8 **)(v67 + 16 * v69);
                    uint64_t v71 = *v70;
                    if (*v70 != (unsigned __int8 *)v3)
                    {
                      int v72 = 1;
                      while (v71 != (unsigned __int8 *)-4096)
                      {
                        int v73 = v69 + v72++;
                        uint64_t v69 = v73 & (v68 - 1);
                        uint64_t v71 = *(unsigned __int8 **)(v67 + 16 * v69);
                        if (v71 == (unsigned __int8 *)v3)
                        {
LABEL_75:
                          uint64_t v70 = (unsigned __int8 **)(v67 + 16 * v69);
                          goto LABEL_322;
                        }
                      }
                      goto LABEL_321;
                    }
                    goto LABEL_322;
                  }
LABEL_321:
                  uint64_t v70 = (unsigned __int8 **)(v67 + 16 * v68);
                  goto LABEL_322;
                }
LABEL_409:
                uint64_t v270 = 0;
                uint64_t v269 = &byte_1CFBCE98E;
                goto LABEL_323;
              }
              goto LABEL_105;
            }
            uint64_t v594 = 0;
            int v59 = *(_DWORD *)(v3 + 20);
            if ((v59 & 0x40000000) != 0) {
              uint64_t v60 = *(unsigned __int8 **)(v3 - 8);
            }
            else {
              uint64_t v60 = (unsigned __int8 *)(v3 - 32 * (v59 & 0x7FFFFFF));
            }
            unsigned int v77 = (unsigned __int8 *)*((void *)v60 + 4);
            BOOL v598 = &v594;
            uint64_t v599 = 0;
            uint64_t isNotMinSignedValue = sub_1CBF528D8((uint64_t)&v598, v77);
            if (!isNotMinSignedValue) {
              goto LABEL_105;
            }
            uint64_t v78 = v594;
            uint64_t v79 = *((unsigned int *)v594 + 2);
            if (v79 >= 0x41)
            {
              int v80 = 0;
              int64_t v81 = (unint64_t)(v79 + 63) >> 6;
              do
              {
                if (v81-- < 1) {
                  break;
                }
                unint64_t v83 = *(void *)(*(void *)v594 + 8 * v81);
                v80 += __clz(v83);
              }
              while (!v83);
              int v84 = v79 | 0xFFFFFFC0;
              if ((v79 & 0x3F) == 0) {
                int v84 = 0;
              }
              if ((v79 - v80 - v84) > 0x40) {
                goto LABEL_105;
              }
              uint64_t v78 = *(void **)v594;
            }
            if (*v78 != PrimitiveSizeInBits - 1)
            {
LABEL_105:
              unsigned int v31 = *(unsigned __int8 *)(v3 + 16);
LABEL_106:
              uint64_t v97 = *(void *)(v3 + 8);
              if (v31 == 43)
              {
                if (v97 && !*(void *)(v97 + 8))
                {
                  int v98 = *(_DWORD *)(v3 + 20);
                  goto LABEL_129;
                }
                int v98 = *(_DWORD *)(v3 + 20);
                if ((v98 & 0x40000000) != 0) {
                  long long v99 = *(unsigned __int8 **)(v3 - 8);
                }
                else {
                  long long v99 = (unsigned __int8 *)(v3 - 32 * (v98 & 0x7FFFFFF));
                }
                unsigned int v100 = *(unsigned __int8 *)(*(void *)v99 + 16);
                if (v100 <= 0x14 && v100 != 5)
                {
LABEL_129:
                  if ((v98 & 0x40000000) != 0) {
                    unsigned int v113 = *(uint64_t **)(v3 - 8);
                  }
                  else {
                    unsigned int v113 = (uint64_t *)(v3 - 32 * (v98 & 0x7FFFFFF));
                  }
                  uint64_t v114 = v113[4];
                  uint64_t v115 = *v113;
                  if ((v98 & 0x10000000) == 0)
                  {
                    __int16 v130 = 0;
                    uint64_t v129 = &byte_1CFBCE98E;
                    goto LABEL_150;
                  }
                  uint64_t v116 = ***(void ***)v3;
                  uint64_t v117 = *(void *)(v116 + 152);
                  uint64_t v118 = *(unsigned int *)(v116 + 168);
                  if (v118)
                  {
                    LODWORD(v119) = (v118 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                    uint64_t v120 = (unsigned __int8 **)(v117 + 16 * v119);
                    int v121 = *v120;
                    if (*v120 == (unsigned __int8 *)v3)
                    {
LABEL_149:
                      uint64_t v128 = v120[1];
                      std::string v131 = *(void ***)v128;
                      uint64_t v129 = (char *)(v128 + 16);
                      __int16 v130 = v131;
LABEL_150:
                      WORD4(v601) = 773;
                      BOOL v598 = v129;
                      uint64_t v599 = v130;
                      uint64_t v600 = (uint64_t)".neg";
                      Select = sub_1CB84494C((uint64_t)this + 144, v114, v115, (uint64_t)&v598, 0, 0);
LABEL_363:
                      unsigned int v10 = Select;
                      goto LABEL_364;
                    }
                    int v122 = 1;
                    while (v121 != (unsigned __int8 *)-4096)
                    {
                      int v123 = v119 + v122++;
                      uint64_t v119 = v123 & (v118 - 1);
                      int v121 = *(unsigned __int8 **)(v117 + 16 * v119);
                      if (v121 == (unsigned __int8 *)v3)
                      {
                        uint64_t v120 = (unsigned __int8 **)(v117 + 16 * v119);
                        goto LABEL_149;
                      }
                    }
                  }
                  uint64_t v120 = (unsigned __int8 **)(v117 + 16 * v118);
                  goto LABEL_149;
                }
              }
              if (!v97 || *(void *)(v97 + 8)) {
                goto LABEL_186;
              }
              if (v31 != 48)
              {
                if (v31 == 56)
                {
                  int64_t v591 = 0;
                  BOOL v598 = &v590;
                  uint64_t v599 = &v591;
                  uint64_t v600 = 0;
                  *(void *)&long long v601 = &v590;
                  *((void *)&v601 + 1) = &v591;
                  *(void *)&long long v602 = 0;
                  if (sub_1CCA8E308((uint64_t)&v598, *(void *)(v3 - 64))
                    && (sub_1CBF5250C((uint64_t)&v602 + 8, *(llvm::Constant **)(v3 - 32)) & 1) != 0)
                  {
                    goto LABEL_125;
                  }
                  uint64_t isNotMinSignedValue = sub_1CCA8E308((uint64_t)&v598, *(void *)(v3 - 32));
                  if (isNotMinSignedValue)
                  {
                    uint64_t isNotMinSignedValue = sub_1CBF5250C((uint64_t)&v602 + 8, *(llvm::Constant **)(v3 - 64));
                    if (isNotMinSignedValue)
                    {
LABEL_125:
                      unint64_t v102 = *v590;
                      uint64_t v103 = *v590;
                      if ((*((_DWORD *)*v590 + 2) & 0xFE) == 0x12) {
                        uint64_t v103 = (llvm::Type *)**((void **)v102 + 2);
                      }
                      int v104 = llvm::Type::getPrimitiveSizeInBits(v103);
                      uint64_t v105 = llvm::ConstantInt::get(v102, (v104 - 1), 0);
                      uint64_t v106 = (uint64_t)v590;
                      WORD4(v601) = 257;
                      uint64_t v107 = sub_1CB84494C((uint64_t)v24, (uint64_t)v105, (uint64_t)v591, (uint64_t)&v598, 0, 0);
                      __int16 v597 = 257;
                      uint64_t v108 = sub_1CC242524((uint64_t)v24, v106, (uint64_t)v107, (uint64_t)&v594, 0, 0);
                      WORD4(v601) = 257;
                      char v109 = sub_1CC5357E8((uint64_t)v24, (uint64_t)v108, (uint64_t)v105, (uint64_t)&v598, 0);
                      unint64_t v110 = *(llvm::Type ****)v3;
                      WORD4(v601) = 257;
                      Select = sub_1CD5AB4EC((uint64_t)v24, v109, v110, (uint64_t)&v598, v111);
                      goto LABEL_363;
                    }
                  }
                }
LABEL_185:
                if (dword_1EBCE5D80 < a3) {
                  goto LABEL_186;
                }
                unsigned int v10 = 0;
                unsigned int v159 = *(unsigned __int8 *)(v3 + 16);
                if (v159 <= 0x39)
                {
                  if (*(unsigned __int8 *)(v3 + 16) <= 0x34u)
                  {
                    if (v159 != 41)
                    {
                      if (v159 != 45) {
                        goto LABEL_364;
                      }
                      char v160 = (llvm::Value *)llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)isNotMinSignedValue, (llvm::Instruction *)v3);
                      unsigned int v162 = v161;
                      unsigned int v163 = a3 + 1;
                      uint64_t v164 = llvm::Negator::negate(this, v161, v163);
                      if (v164)
                      {
                        uint64_t v165 = v164;
                      }
                      else
                      {
                        uint64_t v320 = llvm::Negator::negate(this, v160, v163);
                        if (!v320) {
                          goto LABEL_186;
                        }
                        uint64_t v165 = v320;
                        char v160 = v162;
                      }
                      if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                      {
                        uint64_t v444 = 0;
                        uint64_t v443 = &byte_1CFBCE98E;
                        goto LABEL_522;
                      }
                      uint64_t v321 = ***(void ***)v3;
                      uint64_t v322 = *(void *)(v321 + 152);
                      uint64_t v323 = *(unsigned int *)(v321 + 168);
                      if (v323)
                      {
                        LODWORD(v324) = (v323 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        uint64_t v325 = (unsigned __int8 **)(v322 + 16 * v324);
                        int v326 = *v325;
                        if (*v325 == (unsigned __int8 *)v3)
                        {
LABEL_521:
                          unsigned int v442 = v325[1];
                          int v445 = *(void ***)v442;
                          uint64_t v443 = (char *)(v442 + 16);
                          uint64_t v444 = v445;
LABEL_522:
                          WORD4(v601) = 773;
                          BOOL v598 = v443;
                          uint64_t v599 = v444;
                          uint64_t v600 = (uint64_t)".neg";
                          uint64_t v446 = (llvm::Negator *)((char *)this + 144);
                          Shl = v160;
LABEL_523:
                          Select = sub_1CC09A1EC((uint64_t)v446, v165, (uint64_t)Shl, (uint64_t)&v598, 0, 0);
                          goto LABEL_363;
                        }
                        int v327 = 1;
                        while (v326 != (unsigned __int8 *)-4096)
                        {
                          int v328 = v324 + v327++;
                          uint64_t v324 = v328 & (v323 - 1);
                          int v326 = *(unsigned __int8 **)(v322 + 16 * v324);
                          if (v326 == (unsigned __int8 *)v3)
                          {
                            uint64_t v325 = (unsigned __int8 **)(v322 + 16 * v324);
                            goto LABEL_521;
                          }
                        }
                      }
                      uint64_t v325 = (unsigned __int8 **)(v322 + 16 * v323);
                      goto LABEL_521;
                    }
LABEL_324:
                    uint64_t v594 = v596;
                    uint64_t v595 = 0x200000000;
                    int64_t v591 = v593;
                    uint64_t v592 = 0x200000000;
                    int v272 = *(_DWORD *)(v3 + 20);
                    if ((v272 & 0x40000000) != 0)
                    {
                      uint64_t v274 = *(llvm::Value ***)(v3 - 8);
                      uint64_t v273 = v272 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v273 = v272 & 0x7FFFFFF;
                      uint64_t v274 = (llvm::Value **)(v3 - 32 * v273);
                    }
                    if (v273)
                    {
                      unsigned int v275 = a3 + 1;
                      uint64_t v276 = 32 * v273;
                      do
                      {
                        uint64_t v277 = *v274;
                        uint64_t v278 = llvm::Negator::negate(this, *v274, v275);
                        if (v278)
                        {
                          int v279 = v595;
                          if (v595 >= HIDWORD(v595)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v594 + v595) = v278;
                          uint64_t v280 = &v595;
                        }
                        else
                        {
                          if (!*((unsigned char *)this + 344))
                          {
                            unsigned int v10 = 0;
                            goto LABEL_622;
                          }
                          int v279 = v592;
                          if (v592 >= HIDWORD(v592)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v591 + v592) = v277;
                          uint64_t v280 = &v592;
                        }
                        *(_DWORD *)uint64_t v280 = v279 + 1;
                        v274 += 4;
                        v276 -= 32;
                      }
                      while (v276);
                      if (v595 != 2)
                      {
                        if (v592 != 2) {
                          goto LABEL_423;
                        }
                        unsigned int v10 = 0;
                        goto LABEL_622;
                      }
                      uint64_t v281 = *(void **)v594;
                      uint64_t v282 = *((void *)v594 + 1);
                      if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                      {
                        int v529 = 0;
                        uint64_t v528 = &byte_1CFBCE98E;
                        goto LABEL_621;
                      }
                      uint64_t v283 = ***(void ***)v3;
                      uint64_t v284 = *(void *)(v283 + 152);
                      uint64_t v285 = *(unsigned int *)(v283 + 168);
                      if (v285)
                      {
                        LODWORD(v286) = (v285 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        unint64_t v287 = (unsigned __int8 **)(v284 + 16 * v286);
                        uint64_t v288 = *v287;
                        if (*v287 == (unsigned __int8 *)v3)
                        {
LABEL_620:
                          uint64_t v527 = v287[1];
                          uint64_t v530 = *(void ***)v527;
                          uint64_t v528 = (char *)(v527 + 16);
                          int v529 = v530;
LABEL_621:
                          WORD4(v601) = 773;
                          BOOL v598 = v528;
                          uint64_t v599 = v529;
                          uint64_t v600 = (uint64_t)".neg";
                          unsigned int v10 = sub_1CB844A3C((uint64_t)this + 144, v281, v282, (uint64_t)&v598, 0, 0);
LABEL_622:
                          if (v591 != v593) {
                            free(v591);
                          }
                          uint64_t v498 = v594;
                          if (v594 != v596) {
LABEL_625:
                          }
                            free(v498);
                          goto LABEL_364;
                        }
                        int v289 = 1;
                        while (v288 != (unsigned __int8 *)-4096)
                        {
                          int v290 = v286 + v289++;
                          uint64_t v286 = v290 & (v285 - 1);
                          uint64_t v288 = *(unsigned __int8 **)(v284 + 16 * v286);
                          if (v288 == (unsigned __int8 *)v3)
                          {
                            unint64_t v287 = (unsigned __int8 **)(v284 + 16 * v286);
                            goto LABEL_620;
                          }
                        }
                      }
                      unint64_t v287 = (unsigned __int8 **)(v284 + 16 * v285);
                      goto LABEL_620;
                    }
LABEL_423:
                    uint64_t v339 = *(void *)v594;
                    uint64_t v340 = *(void *)v591;
                    if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                    {
                      uint64_t v456 = 0;
                      int v455 = &byte_1CFBCE98E;
                      goto LABEL_536;
                    }
                    uint64_t v341 = ***(void ***)v3;
                    uint64_t v342 = *(void *)(v341 + 152);
                    uint64_t v343 = *(unsigned int *)(v341 + 168);
                    if (v343)
                    {
                      LODWORD(v344) = (v343 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                      uint64_t v345 = (unsigned __int8 **)(v342 + 16 * v344);
                      uint64_t v346 = *v345;
                      if (*v345 == (unsigned __int8 *)v3)
                      {
LABEL_535:
                        BOOL v454 = v345[1];
                        int v457 = *(void ***)v454;
                        int v455 = (char *)(v454 + 16);
                        uint64_t v456 = v457;
LABEL_536:
                        WORD4(v601) = 773;
                        BOOL v598 = v455;
                        uint64_t v599 = v456;
                        uint64_t v600 = (uint64_t)".neg";
                        unsigned int v10 = sub_1CB84494C((uint64_t)this + 144, v339, v340, (uint64_t)&v598, 0, 0);
                        goto LABEL_622;
                      }
                      int v347 = 1;
                      while (v346 != (unsigned __int8 *)-4096)
                      {
                        int v348 = v344 + v347++;
                        uint64_t v344 = v348 & (v343 - 1);
                        uint64_t v346 = *(unsigned __int8 **)(v342 + 16 * v344);
                        if (v346 == (unsigned __int8 *)v3)
                        {
                          uint64_t v345 = (unsigned __int8 **)(v342 + 16 * v344);
                          goto LABEL_535;
                        }
                      }
                    }
                    uint64_t v345 = (unsigned __int8 **)(v342 + 16 * v343);
                    goto LABEL_535;
                  }
                  if (v159 != 53)
                  {
                    if (v159 != 57) {
                      goto LABEL_364;
                    }
                    int v172 = *(_DWORD *)(v3 + 20);
                    if ((v172 & 0x40000000) != 0) {
                      int64_t v173 = *(llvm ***)(v3 - 8);
                    }
                    else {
                      int64_t v173 = (llvm **)(v3 - 32 * (v172 & 0x7FFFFFF));
                    }
                    BOOL haveNoCommonBitsSet = llvm::haveNoCommonBitsSet(*v173, v173[4], *((void ***)this + 40), *((const llvm::DataLayout **)this + 41), (llvm::AssumptionCache *)v3, *((const llvm::Instruction **)this + 42), (const llvm::DominatorTree *)1);
                    if (haveNoCommonBitsSet)
                    {
                      uint64_t SortedOperandsOfBinOp = llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)haveNoCommonBitsSet, (llvm::Instruction *)v3);
                      if (!sub_1CBF5250C((uint64_t)&v598, v263)) {
                        goto LABEL_324;
                      }
                      if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                      {
                        uint64_t v264 = ***(void ***)v3;
                        uint64_t v67 = *(void *)(v264 + 152);
                        uint64_t v68 = *(unsigned int *)(v264 + 168);
                        if (v68)
                        {
                          LODWORD(v69) = (v68 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                          uint64_t v70 = (unsigned __int8 **)(v67 + 16 * v69);
                          unsigned int v265 = *v70;
                          if (*v70 != (unsigned __int8 *)v3)
                          {
                            int v266 = 1;
                            while (v265 != (unsigned __int8 *)-4096)
                            {
                              int v267 = v69 + v266++;
                              uint64_t v69 = v267 & (v68 - 1);
                              unsigned int v265 = *(unsigned __int8 **)(v67 + 16 * v69);
                              if (v265 == (unsigned __int8 *)v3) {
                                goto LABEL_75;
                              }
                            }
                            goto LABEL_321;
                          }
LABEL_322:
                          uint64_t v268 = v70[1];
                          uint64_t v271 = *(void ***)v268;
                          uint64_t v269 = (char *)(v268 + 16);
                          uint64_t v270 = v271;
LABEL_323:
                          WORD4(v601) = 773;
                          BOOL v598 = v269;
                          uint64_t v599 = v270;
                          uint64_t v600 = (uint64_t)".neg";
                          Select = sub_1CC2427E8((uint64_t)this + 144, SortedOperandsOfBinOp, (uint64_t)&v598, v65);
                          goto LABEL_363;
                        }
                        goto LABEL_321;
                      }
                      goto LABEL_409;
                    }
LABEL_186:
                    unsigned int v10 = 0;
                    goto LABEL_364;
                  }
                  int v215 = *(_DWORD *)(v3 + 20);
                  if ((v215 & 0x40000000) != 0) {
                    uint64_t v216 = *(llvm::Value ***)(v3 - 8);
                  }
                  else {
                    uint64_t v216 = (llvm::Value **)(v3 - 32 * (v215 & 0x7FFFFFF));
                  }
                  uint64_t v291 = llvm::Negator::negate(this, *v216, a3 + 1);
                  int v294 = *(_DWORD *)(v3 + 20);
                  if (v291)
                  {
                    if ((v294 & 0x40000000) != 0) {
                      size_t v295 = *(unsigned __int8 **)(v3 - 8);
                    }
                    else {
                      size_t v295 = (unsigned __int8 *)(v3 - 32 * (v294 & 0x7FFFFFF));
                    }
                    uint64_t v330 = *((void *)v295 + 4);
                    if ((v294 & 0x10000000) == 0)
                    {
                      uint8x8_t v452 = 0;
                      unint64_t v451 = &byte_1CFBCE98E;
                      goto LABEL_533;
                    }
                    uint64_t v331 = ***(void ***)v3;
                    uint64_t v332 = *(void *)(v331 + 152);
                    uint64_t v333 = *(unsigned int *)(v331 + 168);
                    if (v333)
                    {
                      LODWORD(v334) = (v333 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                      uint64_t v335 = (unsigned __int8 **)(v332 + 16 * v334);
                      uint64_t v336 = *v335;
                      if (*v335 == (unsigned __int8 *)v3)
                      {
LABEL_532:
                        uint64_t v450 = v335[1];
                        uint64_t v453 = *(void ***)v450;
                        unint64_t v451 = (char *)(v450 + 16);
                        uint8x8_t v452 = v453;
LABEL_533:
                        WORD4(v601) = 773;
                        BOOL v598 = v451;
                        uint64_t v599 = v452;
                        uint64_t v600 = (uint64_t)".neg";
                        Select = sub_1CC242524((uint64_t)this + 144, v291, v330, (uint64_t)&v598, 0, 0);
                        goto LABEL_363;
                      }
                      int v337 = 1;
                      while (v336 != (unsigned __int8 *)-4096)
                      {
                        int v338 = v334 + v337++;
                        uint64_t v334 = v338 & (v333 - 1);
                        uint64_t v336 = *(unsigned __int8 **)(v332 + 16 * v334);
                        if (v336 == (unsigned __int8 *)v3)
                        {
                          uint64_t v335 = (unsigned __int8 **)(v332 + 16 * v334);
                          goto LABEL_532;
                        }
                      }
                    }
                    uint64_t v335 = (unsigned __int8 **)(v332 + 16 * v333);
                    goto LABEL_532;
                  }
                  unsigned int v10 = 0;
                  if ((v294 & 0x40000000) != 0) {
                    int v329 = *(uint64_t **)(v3 - 8);
                  }
                  else {
                    int v329 = (uint64_t *)(v3 - 32 * (v294 & 0x7FFFFFF));
                  }
                  uint64_t v419 = v329[4];
                  if (!v419 || *(unsigned __int8 *)(v419 + 16) > 0x14u) {
                    goto LABEL_364;
                  }
                  uint64_t v420 = *v329;
                  AllOnesValue = (llvm::ConstantExpr *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v419, v292, v293);
                  Shl = llvm::ConstantExpr::getShl(AllOnesValue, (llvm::Constant *)v419, 0, 0);
                  if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                  {
                    int64_t v548 = 0;
                    int v547 = &byte_1CFBCE98E;
                    goto LABEL_642;
                  }
                  uint64_t v423 = ***(void ***)v3;
                  uint64_t v424 = *(void *)(v423 + 152);
                  uint64_t v425 = *(unsigned int *)(v423 + 168);
                  if (v425)
                  {
                    LODWORD(v426) = (v425 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                    __int16 v427 = (unsigned __int8 **)(v424 + 16 * v426);
                    int v428 = *v427;
                    if (*v427 == (unsigned __int8 *)v3)
                    {
LABEL_641:
                      uint64_t v546 = v427[1];
                      unint64_t v549 = *(void ***)v546;
                      int v547 = (char *)(v546 + 16);
                      int64_t v548 = v549;
LABEL_642:
                      WORD4(v601) = 773;
                      BOOL v598 = v547;
                      uint64_t v599 = v548;
                      uint64_t v600 = (uint64_t)".neg";
                      uint64_t v446 = v24;
                      uint64_t v165 = v420;
                      goto LABEL_523;
                    }
                    int v429 = 1;
                    while (v428 != (unsigned __int8 *)-4096)
                    {
                      int v430 = v426 + v429++;
                      uint64_t v426 = v430 & (v425 - 1);
                      int v428 = *(unsigned __int8 **)(v424 + 16 * v426);
                      if (v428 == (unsigned __int8 *)v3)
                      {
                        __int16 v427 = (unsigned __int8 **)(v424 + 16 * v426);
                        goto LABEL_641;
                      }
                    }
                  }
                  __int16 v427 = (unsigned __int8 **)(v424 + 16 * v425);
                  goto LABEL_641;
                }
                switch(*(unsigned char *)(v3 + 16))
                {
                  case 'S':
                    int v166 = *(_DWORD *)(v3 + 20);
                    int v167 = v166 & 0x7FFFFFF;
                    BOOL v598 = &v600;
                    HIDWORD(v599) = 4;
                    uint64_t v168 = 8 * (v166 & 0x7FFFFFF);
                    if ((v166 & 0x7FFFFFFu) >= 5)
                    {
                      LODWORD(v599) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v167) {
                      bzero(&v600, 8 * (v166 & 0x7FFFFFF));
                    }
                    LODWORD(v599) = v166 & 0x7FFFFFF;
                    if ((v166 & 0x40000000) != 0)
                    {
                      uint64_t v170 = *(llvm::Value ***)(v3 - 8);
                      uint64_t v169 = v166 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v169 = v166 & 0x7FFFFFF;
                      uint64_t v170 = (llvm::Value **)(v3 - 32 * v169);
                    }
                    if (!v169 || !v167) {
                      goto LABEL_438;
                    }
                    uint64_t v349 = v598;
                    unsigned int v350 = a3 + 1;
                    uint64_t v351 = v168 - 8;
                    uint64_t v352 = 32 * v169 - 32;
                    do
                    {
                      uint64_t v353 = llvm::Negator::negate(this, *v170, v350);
                      void *v349 = v353;
                      if (!v353)
                      {
                        unsigned int v10 = 0;
                        goto LABEL_584;
                      }
                      if (!v352) {
                        break;
                      }
                      v170 += 4;
                      ++v349;
                      uint64_t v354 = v351;
                      v351 -= 8;
                      v352 -= 32;
                    }
                    while (v354);
                    int v166 = *(_DWORD *)(v3 + 20);
LABEL_438:
                    unsigned int v355 = *(llvm::ConstantFP **)v3;
                    if ((v166 & 0x10000000) != 0)
                    {
                      uint64_t v356 = **(void **)v355;
                      uint64_t v357 = *(void *)(v356 + 152);
                      uint64_t v358 = *(unsigned int *)(v356 + 168);
                      if (v358)
                      {
                        LODWORD(v359) = (v358 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        BOOL v360 = (unsigned __int8 **)(v357 + 16 * v359);
                        unsigned int v361 = *v360;
                        if (*v360 == (unsigned __int8 *)v3)
                        {
LABEL_542:
                          __int16 v461 = v360[1];
                          uint64_t v464 = *(void *)v461;
                          int v462 = (char *)(v461 + 16);
                          uint64_t v463 = v464;
                          goto LABEL_543;
                        }
                        int v362 = 1;
                        while (v361 != (unsigned __int8 *)-4096)
                        {
                          int v363 = v359 + v362++;
                          uint64_t v359 = v363 & (v358 - 1);
                          unsigned int v361 = *(unsigned __int8 **)(v357 + 16 * v359);
                          if (v361 == (unsigned __int8 *)v3)
                          {
                            BOOL v360 = (unsigned __int8 **)(v357 + 16 * v359);
                            goto LABEL_542;
                          }
                        }
                      }
                      BOOL v360 = (unsigned __int8 **)(v357 + 16 * v358);
                      goto LABEL_542;
                    }
                    uint64_t v463 = 0;
                    int v462 = &byte_1CFBCE98E;
LABEL_543:
                    __int16 v597 = 773;
                    uint64_t v594 = v462;
                    uint64_t v595 = v463;
                    v596[0] = ".neg";
                    unsigned int v465 = sub_1CB93113C((uint64_t)this + 144, (uint64_t)v355, v166 & 0x7FFFFFF, (uint64_t)&v594);
                    unsigned int v10 = v465;
                    int v466 = *(_DWORD *)(v3 + 20);
                    if ((v466 & 0x40000000) != 0)
                    {
                      uint64_t v468 = *(unsigned __int8 **)(v3 - 8);
                      uint64_t v467 = v466 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v467 = v466 & 0x7FFFFFF;
                      uint64_t v468 = (unsigned __int8 *)(v3 - 32 * v467);
                    }
                    if (v599 && v467)
                    {
                      v469 = &v468[32 * *(unsigned int *)(v3 + 60)];
                      v470 = &v469[8 * v467];
                      uint64_t v471 = (uint64_t *)v598;
                      unsigned int v472 = (char *)v598 + 8 * v599;
                      LODWORD(v3) = *((_DWORD *)v465 + 15);
                      BOOL v585 = v470;
                      unsigned int v584 = v472;
                      do
                      {
                        uint64_t v473 = *v471;
                        uint64_t v474 = *(void *)v469;
                        int v475 = *((_DWORD *)v10 + 5);
                        if ((v475 & 0x7FFFFFF) == v3)
                        {
                          unsigned int v488 = v3 + (v3 >> 1);
                          if (v488 <= 2) {
                            uint64_t v489 = 2;
                          }
                          else {
                            uint64_t v489 = v488;
                          }
                          *((_DWORD *)v10 + 15) = v489;
                          if ((v475 & 0x40000000) != 0) {
                            uint64_t v490 = (uint64_t *)*((void *)v10 - 1);
                          }
                          else {
                            uint64_t v490 = (uint64_t *)((char *)v10 - 32 * v3);
                          }
                          __p = v490;
                          int64_t v491 = operator new(40 * v489);
                          *((void *)v10 - 1) = v491;
                          unint64_t v492 = v491;
                          do
                          {
                            *unint64_t v492 = 0;
                            v492[1] = 0;
                            v492[2] = 0;
                            v492[3] = v10;
                            v492 += 4;
                          }
                          while (v492 != &v491[4 * v489]);
                          int v493 = *((_DWORD *)v10 + 5);
                          if ((v493 & 0x40000000) != 0) {
                            uint64_t v494 = (uint64_t)v491;
                          }
                          else {
                            uint64_t v494 = (uint64_t)v10 - 32 * (v493 & 0x7FFFFFF);
                          }
                          sub_1CC5E4108((uint64_t)&v594, __p, &__p[4 * v3], v494);
                          if (v3)
                          {
                            memmove((void *)(v494 + 32 * v489), &__p[4 * v3], 8 * v3);
                            uint64_t v495 = 4 * v3;
                            do
                            {
                              uint64_t v496 = &__p[v495];
                              if (__p[v495 - 4])
                              {
                                *(void *)*(v496 - 2) = *(v496 - 3);
                                uint64_t v497 = *(v496 - 3);
                                if (v497) {
                                  *(void *)(v497 + 16) = *(v496 - 2);
                                }
                              }
                              v495 -= 4;
                            }
                            while (v495 * 8);
                          }
                          operator delete(__p);
                          int v475 = *((_DWORD *)v10 + 5);
                          v470 = v585;
                          unsigned int v472 = v584;
                        }
                        uint64_t v476 = (v475 + 1) & 0x7FFFFFF;
                        *((_DWORD *)v10 + 5) = v475 & 0xF8000000 | (v475 + 1) & 0x7FFFFFF;
                        if ((v475 & 0x40000000) != 0) {
                          __int16 v477 = (char *)*((void *)v10 - 1);
                        }
                        else {
                          __int16 v477 = (char *)v10 - 32 * v476;
                        }
                        uint64_t v478 = (v476 - 1);
                        int v479 = &v477[32 * v478];
                        if (*(void *)v479)
                        {
                          **((void **)v479 + 2) = *((void *)v479 + 1);
                          uint64_t v487 = *((void *)v479 + 1);
                          if (v487) {
                            *(void *)(v487 + 16) = *((void *)v479 + 2);
                          }
                        }
                        *(void *)int v479 = v473;
                        if (v473)
                        {
                          uint64_t v482 = *(void *)(v473 + 8);
                          int v481 = (char **)(v473 + 8);
                          uint64_t v480 = v482;
                          uint64_t v483 = &v477[32 * v478];
                          *((void *)v483 + 1) = v482;
                          if (v482) {
                            *(void *)(v480 + 16) = v483 + 8;
                          }
                          *((void *)v483 + 2) = v481;
                          *int v481 = v479;
                        }
                        int v484 = *((_DWORD *)v10 + 5);
                        uint64_t v485 = v484 & 0x7FFFFFF;
                        if ((v484 & 0x40000000) != 0) {
                          uint64_t v486 = (char *)*((void *)v10 - 1);
                        }
                        else {
                          uint64_t v486 = (char *)v10 - 32 * v485;
                        }
                        uint64_t v3 = *((unsigned int *)v10 + 15);
                        *(void *)&v486[32 * v3 + 8 * (v485 - 1)] = v474;
                        if (++v471 == (uint64_t *)v472) {
                          break;
                        }
                        v469 += 8;
                      }
                      while (v469 != v470);
                    }
LABEL_584:
                    uint64_t v498 = v598;
                    if (v598 != &v600) {
                      goto LABEL_625;
                    }
                    goto LABEL_364;
                  case 'T':
                  case 'V':
                  case 'W':
                  case 'X':
                  case '\\':
                  case ']':
                  case '^':
                    goto LABEL_364;
                  case 'U':
                    int v237 = *(_DWORD *)(v3 + 20);
                    if ((v237 & 0x40000000) != 0) {
                      uint64_t v238 = *(unsigned __int8 **)(v3 - 8);
                    }
                    else {
                      uint64_t v238 = (unsigned __int8 *)(v3 - 32 * (v237 & 0x7FFFFFF));
                    }
                    if (!llvm::isKnownNegation(*((llvm **)v238 + 4), *((const llvm::Value **)v238 + 8), 0))
                    {
                      int v383 = *(_DWORD *)(v3 + 20);
                      if ((v383 & 0x40000000) != 0) {
                        int v384 = *(unsigned __int8 **)(v3 - 8);
                      }
                      else {
                        int v384 = (unsigned __int8 *)(v3 - 32 * (v383 & 0x7FFFFFF));
                      }
                      unsigned int v447 = a3 + 1;
                      unsigned int v10 = (const llvm::detail::DoubleAPFloat *)llvm::Negator::negate(this, *((llvm::Value **)v384 + 4), v447);
                      if (!v10) {
                        goto LABEL_364;
                      }
                      int v448 = *(_DWORD *)(v3 + 20);
                      if ((v448 & 0x40000000) != 0) {
                        int v449 = *(unsigned __int8 **)(v3 - 8);
                      }
                      else {
                        int v449 = (unsigned __int8 *)(v3 - 32 * (v448 & 0x7FFFFFF));
                      }
                      uint64_t v458 = llvm::Negator::negate(this, *((llvm::Value **)v449 + 8), v447);
                      if (v458)
                      {
                        BOOL v49 = (llvm::Value *)v458;
                        int v459 = *(_DWORD *)(v3 + 20);
                        if ((v459 & 0x40000000) != 0) {
                          int v460 = *(llvm::Value ***)(v3 - 8);
                        }
                        else {
                          int v460 = (llvm::Value **)(v3 - 32 * (v459 & 0x7FFFFFF));
                        }
                        int v50 = *v460;
                        if ((v459 & 0x10000000) != 0)
                        {
                          uint64_t v519 = ***(void ***)v3;
                          uint64_t v520 = *(void *)(v519 + 152);
                          uint64_t v521 = *(unsigned int *)(v519 + 168);
                          if (v521)
                          {
                            LODWORD(v522) = (v521 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                            int v523 = (unsigned __int8 **)(v520 + 16 * v522);
                            char v524 = *v523;
                            if (*v523 != (unsigned __int8 *)v3)
                            {
                              int v525 = 1;
                              do
                              {
                                if (v524 == (unsigned __int8 *)-4096) {
                                  goto LABEL_644;
                                }
                                int v526 = v522 + v525++;
                                uint64_t v522 = v526 & (v521 - 1);
                                char v524 = *(unsigned __int8 **)(v520 + 16 * v522);
                              }
                              while (v524 != (unsigned __int8 *)v3);
                              int v523 = (unsigned __int8 **)(v520 + 16 * v522);
                            }
                          }
                          else
                          {
LABEL_644:
                            int v523 = (unsigned __int8 **)(v520 + 16 * v521);
                          }
                          int v550 = v523[1];
                          uint64_t v553 = *(void ***)v550;
                          uint64_t v551 = (char *)(v550 + 16);
                          uint64_t v552 = v553;
                        }
                        else
                        {
                          uint64_t v552 = 0;
                          uint64_t v551 = &byte_1CFBCE98E;
                        }
                        WORD4(v601) = 773;
                        BOOL v598 = v551;
                        uint64_t v599 = v552;
                        uint64_t v600 = (uint64_t)".neg";
                        int v221 = (llvm::Negator *)((char *)this + 144);
                        int v222 = v10;
                        goto LABEL_277;
                      }
                      goto LABEL_186;
                    }
                    int v367 = (llvm::Value *)llvm::Instruction::clone((llvm::Instruction *)v3);
                    unsigned int v10 = v367;
                    uint64_t v368 = *((void *)v367 - 8);
                    uint64_t v369 = *((void *)v367 - 4);
                    if (v368 != v369)
                    {
                      uint64_t v370 = *((void *)v367 - 3);
                      *((void *)v367 - 8) = v369;
                      *((void *)v367 - 4) = v368;
                      long long v371 = *(_OWORD *)((char *)v367 - 56);
                      uint64_t v372 = (void *)*((void *)v367 - 2);
                      *((void *)v367 - 7) = v370;
                      *((void *)v367 - 6) = v372;
                      *(_OWORD *)((char *)v367 - 24) = v371;
                      *uint64_t v372 = (char *)v367 - 64;
                      uint64_t v373 = *((void *)v367 - 7);
                      if (v373) {
                        *(void *)(v373 + 16) = (char *)v367 - 56;
                      }
                      **((void **)v367 - 2) = (char *)v367 - 32;
                      uint64_t v374 = *((void *)v367 - 3);
                      if (v374) {
                        *(void *)(v374 + 16) = (char *)v367 - 24;
                      }
                    }
                    if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
                    {
                      unsigned int v533 = 0;
                      unsigned int v532 = &byte_1CFBCE98E;
                      goto LABEL_628;
                    }
                    uint64_t v375 = ***(void ***)v3;
                    uint64_t v376 = *(void *)(v375 + 152);
                    uint64_t v377 = *(unsigned int *)(v375 + 168);
                    if (!v377) {
                      goto LABEL_626;
                    }
                    LODWORD(v378) = (v377 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                    uint64_t v379 = (unsigned __int8 **)(v376 + 16 * v378);
                    uint64_t v380 = *v379;
                    if (*v379 != (unsigned __int8 *)v3)
                    {
                      int v381 = 1;
                      while (v380 != (unsigned __int8 *)-4096)
                      {
                        int v382 = v378 + v381++;
                        uint64_t v378 = v382 & (v377 - 1);
                        uint64_t v380 = *(unsigned __int8 **)(v376 + 16 * v378);
                        if (v380 == (unsigned __int8 *)v3)
                        {
                          uint64_t v379 = (unsigned __int8 **)(v376 + 16 * v378);
                          goto LABEL_627;
                        }
                      }
LABEL_626:
                      uint64_t v379 = (unsigned __int8 **)(v376 + 16 * v377);
                    }
LABEL_627:
                    long long v531 = v379[1];
                    int v534 = *(void ***)v531;
                    unsigned int v532 = (char *)(v531 + 16);
                    unsigned int v533 = v534;
LABEL_628:
                    WORD4(v601) = 773;
                    BOOL v598 = v532;
                    uint64_t v599 = v533;
                    uint64_t v600 = (uint64_t)".neg";
                    llvm::Value::setNameImpl(v367, (const char **)&v598);
                    if (!v10 || *((unsigned char *)v10 + 16))
                    {
LABEL_630:
                      WORD4(v601) = 257;
                      (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v598, *((void *)this + 24), *((void *)this + 25));
                      uint64_t v535 = *((unsigned int *)this + 38);
                      if (v535)
                      {
                        uint64_t v536 = *((void *)this + 18);
                        uint64_t v537 = v536 + 16 * v535;
                        do
                        {
                          llvm::Instruction::setMetadata(v10, *(_DWORD *)v536, *(llvm::MDNode **)(v536 + 8));
                          v536 += 16;
                        }
                        while (v536 != v537);
                      }
                      goto LABEL_364;
                    }
                    if ((*((unsigned char *)v10 + 23) & 0x10) == 0) {
                      goto LABEL_689;
                    }
                    uint64_t v564 = ***(void ***)v10;
                    uint64_t v565 = *(void *)(v564 + 152);
                    uint64_t v566 = *(unsigned int *)(v564 + 168);
                    if (v566)
                    {
                      LODWORD(v567) = (v566 - 1) & ((v10 >> 4) ^ (v10 >> 9));
                      unint64_t v568 = (const llvm::detail::DoubleAPFloat **)(v565 + 16 * v567);
                      int v569 = *v568;
                      if (*v568 == v10)
                      {
LABEL_682:
                        uint64_t v572 = v568[1];
                        unint64_t v575 = *(void *)v572;
                        unint64_t v573 = (char *)v572 + 16;
                        unint64_t v574 = v575;
                        if (v575 >= 5 && *(_DWORD *)v573 == *(_DWORD *)"llvm." && v573[4] == aLlvm_1[4])
                        {
                          *((_DWORD *)v10 + 8) |= 0x2000u;
                          int v577 = llvm::Function::lookupIntrinsicID(v573, v574);
LABEL_690:
                          *((_DWORD *)v10 + 9) = v577;
                          goto LABEL_630;
                        }
LABEL_689:
                        int v577 = 0;
                        *((_DWORD *)v10 + 8) &= ~0x2000u;
                        goto LABEL_690;
                      }
                      int v570 = 1;
                      while (v569 != (const llvm::detail::DoubleAPFloat *)-4096)
                      {
                        int v571 = v567 + v570++;
                        uint64_t v567 = v571 & (v566 - 1);
                        int v569 = *(const llvm::detail::DoubleAPFloat **)(v565 + 16 * v567);
                        if (v569 == v10)
                        {
                          unint64_t v568 = (const llvm::detail::DoubleAPFloat **)(v565 + 16 * v567);
                          goto LABEL_682;
                        }
                      }
                    }
                    unint64_t v568 = (const llvm::detail::DoubleAPFloat **)(v565 + 16 * v566);
                    goto LABEL_682;
                  case 'Y':
                    int v250 = (unsigned __int8 *)llvm::Negator::negate(this, *(llvm::Value **)(v3 - 64), a3 + 1);
                    if (!v250) {
                      goto LABEL_186;
                    }
                    int v251 = *(unsigned __int8 **)(v3 - 32);
                    if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                    {
                      uint64_t v252 = ***(void ***)v3;
                      uint64_t v253 = *(void *)(v252 + 152);
                      uint64_t v254 = *(unsigned int *)(v252 + 168);
                      if (v254)
                      {
                        LODWORD(v255) = (v254 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        uint64_t v256 = (unsigned __int8 **)(v253 + 16 * v255);
                        unint64_t v257 = *v256;
                        if (*v256 != (unsigned __int8 *)v3)
                        {
                          int v258 = 1;
                          do
                          {
                            if (v257 == (unsigned __int8 *)-4096) {
                              goto LABEL_591;
                            }
                            int v259 = v255 + v258++;
                            uint64_t v255 = v259 & (v254 - 1);
                            unint64_t v257 = *(unsigned __int8 **)(v253 + 16 * v255);
                          }
                          while (v257 != (unsigned __int8 *)v3);
                          uint64_t v256 = (unsigned __int8 **)(v253 + 16 * v255);
                        }
                      }
                      else
                      {
LABEL_591:
                        uint64_t v256 = (unsigned __int8 **)(v253 + 16 * v254);
                      }
                      unsigned int v504 = v256[1];
                      uint64_t v507 = *(void ***)v504;
                      unint64_t v505 = (char *)(v504 + 16);
                      unsigned int v506 = v507;
                      goto LABEL_593;
                    }
                    unsigned int v506 = 0;
                    unint64_t v505 = &byte_1CFBCE98E;
LABEL_593:
                    WORD4(v601) = 773;
                    BOOL v598 = v505;
                    uint64_t v599 = v506;
                    uint64_t v600 = (uint64_t)".neg";
                    Select = sub_1CB8445F4((uint64_t)this + 144, v250, v251, (uint64_t)&v598);
                    goto LABEL_363;
                  case 'Z':
                    unsigned int v239 = a3 + 1;
                    unsigned int v10 = (const llvm::detail::DoubleAPFloat *)llvm::Negator::negate(this, *(llvm::Value **)(v3 - 96), v239);
                    if (!v10) {
                      goto LABEL_364;
                    }
                    uint64_t v240 = (unsigned __int8 *)llvm::Negator::negate(this, *(llvm::Value **)(v3 - 64), v239);
                    if (!v240) {
                      goto LABEL_186;
                    }
                    __int16 v241 = *(unsigned __int8 **)(v3 - 32);
                    if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                    {
                      uint64_t v242 = ***(void ***)v3;
                      uint64_t v243 = *(void *)(v242 + 152);
                      uint64_t v244 = *(unsigned int *)(v242 + 168);
                      if (v244)
                      {
                        LODWORD(v245) = (v244 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        uint64_t v246 = (unsigned __int8 **)(v243 + 16 * v245);
                        uint64_t v247 = *v246;
                        if (*v246 != (unsigned __int8 *)v3)
                        {
                          int v248 = 1;
                          do
                          {
                            if (v247 == (unsigned __int8 *)-4096) {
                              goto LABEL_637;
                            }
                            int v249 = v245 + v248++;
                            uint64_t v245 = v249 & (v244 - 1);
                            uint64_t v247 = *(unsigned __int8 **)(v243 + 16 * v245);
                          }
                          while (v247 != (unsigned __int8 *)v3);
                          uint64_t v246 = (unsigned __int8 **)(v243 + 16 * v245);
                        }
                      }
                      else
                      {
LABEL_637:
                        uint64_t v246 = (unsigned __int8 **)(v243 + 16 * v244);
                      }
                      uint64_t v542 = v246[1];
                      uint64_t v545 = *(void ***)v542;
                      unint64_t v543 = (char *)(v542 + 16);
                      char v544 = v545;
                      goto LABEL_639;
                    }
                    char v544 = 0;
                    unint64_t v543 = &byte_1CFBCE98E;
LABEL_639:
                    WORD4(v601) = 773;
                    BOOL v598 = v543;
                    uint64_t v599 = v544;
                    uint64_t v600 = (uint64_t)".neg";
                    Select = sub_1CB84478C((uint64_t)this + 144, (unsigned __int8 *)v10, v240, v241, (uint64_t)&v598);
                    goto LABEL_363;
                  case '[':
                    int v235 = *(_DWORD *)(v3 + 20);
                    if ((v235 & 0x40000000) != 0) {
                      uint64_t v236 = *(llvm::Value ***)(v3 - 8);
                    }
                    else {
                      uint64_t v236 = (llvm::Value **)(v3 - 32 * (v235 & 0x7FFFFFF));
                    }
                    unsigned int v364 = a3 + 1;
                    unsigned int v10 = (const llvm::detail::DoubleAPFloat *)llvm::Negator::negate(this, *v236, v364);
                    if (!v10) {
                      goto LABEL_364;
                    }
                    int v365 = *(_DWORD *)(v3 + 20);
                    if ((v365 & 0x40000000) != 0) {
                      uint64_t v366 = *(unsigned __int8 **)(v3 - 8);
                    }
                    else {
                      uint64_t v366 = (unsigned __int8 *)(v3 - 32 * (v365 & 0x7FFFFFF));
                    }
                    uint64_t v431 = llvm::Negator::negate(this, *((llvm::Value **)v366 + 4), v364);
                    if (!v431) {
                      goto LABEL_186;
                    }
                    uint64_t v432 = *(void **)(v3 + 64);
                    uint64_t v433 = (llvm::Type *)*(unsigned int *)(v3 + 72);
                    if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                    {
                      uint64_t v434 = ***(void ***)v3;
                      uint64_t v435 = *(void *)(v434 + 152);
                      uint64_t v436 = *(unsigned int *)(v434 + 168);
                      if (v436)
                      {
                        LODWORD(v437) = (v436 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        uint64_t v438 = (unsigned __int8 **)(v435 + 16 * v437);
                        unint64_t v439 = *v438;
                        if (*v438 != (unsigned __int8 *)v3)
                        {
                          int v440 = 1;
                          do
                          {
                            if (v439 == (unsigned __int8 *)-4096) {
                              goto LABEL_634;
                            }
                            int v441 = v437 + v440++;
                            uint64_t v437 = v441 & (v436 - 1);
                            unint64_t v439 = *(unsigned __int8 **)(v435 + 16 * v437);
                          }
                          while (v439 != (unsigned __int8 *)v3);
                          uint64_t v438 = (unsigned __int8 **)(v435 + 16 * v437);
                        }
                      }
                      else
                      {
LABEL_634:
                        uint64_t v438 = (unsigned __int8 **)(v435 + 16 * v436);
                      }
                      unint64_t v538 = v438[1];
                      uint64_t v541 = *(void ***)v538;
                      BOOL v539 = (char *)(v538 + 16);
                      int v540 = v541;
                      goto LABEL_636;
                    }
                    int v540 = 0;
                    BOOL v539 = &byte_1CFBCE98E;
LABEL_636:
                    WORD4(v601) = 773;
                    BOOL v598 = v539;
                    uint64_t v599 = v540;
                    uint64_t v600 = (uint64_t)".neg";
                    Select = sub_1CB935A74((uint64_t)this + 144, (uint64_t)v10, v431, v432, v433, (uint64_t)&v598);
                    goto LABEL_363;
                  case '_':
                    int v260 = *(_DWORD *)(v3 + 20);
                    if ((v260 & 0x40000000) != 0) {
                      uint64_t v261 = *(llvm::Value ***)(v3 - 8);
                    }
                    else {
                      uint64_t v261 = (llvm::Value **)(v3 - 32 * (v260 & 0x7FFFFFF));
                    }
                    uint64_t v385 = (llvm::Value *)llvm::Negator::negate(this, *v261, a3 + 1);
                    if (!v385) {
                      goto LABEL_186;
                    }
                    if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                    {
                      uint64_t v386 = ***(void ***)v3;
                      uint64_t v387 = *(void *)(v386 + 152);
                      uint64_t v388 = *(unsigned int *)(v386 + 168);
                      if (v388)
                      {
                        LODWORD(v389) = (v388 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                        uint64_t v390 = (unsigned __int8 **)(v387 + 16 * v389);
                        unint64_t v391 = *v390;
                        if (*v390 != (unsigned __int8 *)v3)
                        {
                          int v392 = 1;
                          do
                          {
                            if (v391 == (unsigned __int8 *)-4096) {
                              goto LABEL_657;
                            }
                            int v393 = v389 + v392++;
                            uint64_t v389 = v393 & (v388 - 1);
                            unint64_t v391 = *(unsigned __int8 **)(v387 + 16 * v389);
                          }
                          while (v391 != (unsigned __int8 *)v3);
                          uint64_t v390 = (unsigned __int8 **)(v387 + 16 * v389);
                        }
                      }
                      else
                      {
LABEL_657:
                        uint64_t v390 = (unsigned __int8 **)(v387 + 16 * v388);
                      }
                      uint64_t v554 = v390[1];
                      uint64_t v557 = *(void ***)v554;
                      unint64_t v555 = (char *)(v554 + 16);
                      uint64_t v556 = v557;
                      goto LABEL_659;
                    }
                    uint64_t v556 = 0;
                    unint64_t v555 = &byte_1CFBCE98E;
LABEL_659:
                    WORD4(v601) = 773;
                    BOOL v598 = v555;
                    uint64_t v599 = v556;
                    uint64_t v600 = (uint64_t)".neg";
                    Select = sub_1CD68A854((uint64_t *)this + 18, v385, (uint64_t)&v598);
                    goto LABEL_363;
                  default:
                    if (v159 != 58)
                    {
                      if (v159 != 66) {
                        goto LABEL_364;
                      }
                      int v213 = *(_DWORD *)(v3 + 20);
                      uint64_t v214 = (v213 & 0x40000000) != 0
                           ? *(llvm::Value ***)(v3 - 8)
                           : (llvm::Value **)(v3 - 32 * (v213 & 0x7FFFFFF));
                      uint64_t v394 = llvm::Negator::negate(this, *v214, a3 + 1);
                      unsigned int v10 = (const llvm::detail::DoubleAPFloat *)v394;
                      if (!v394) {
                        goto LABEL_364;
                      }
                      uint64_t v395 = *(llvm::ConstantFP **)v3;
                      if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
                      {
                        uint64_t v396 = **(void **)v395;
                        uint64_t v397 = *(void *)(v396 + 152);
                        uint64_t v398 = *(unsigned int *)(v396 + 168);
                        if (v398)
                        {
                          LODWORD(v399) = (v398 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                          unsigned int v400 = (unsigned __int8 **)(v397 + 16 * v399);
                          uint64_t v401 = *v400;
                          if (*v400 != (unsigned __int8 *)v3)
                          {
                            int v402 = 1;
                            do
                            {
                              if (v401 == (unsigned __int8 *)-4096) {
                                goto LABEL_594;
                              }
                              int v403 = v399 + v402++;
                              uint64_t v399 = v403 & (v398 - 1);
                              uint64_t v401 = *(unsigned __int8 **)(v397 + 16 * v399);
                            }
                            while (v401 != (unsigned __int8 *)v3);
                            unsigned int v400 = (unsigned __int8 **)(v397 + 16 * v399);
                          }
                        }
                        else
                        {
LABEL_594:
                          unsigned int v400 = (unsigned __int8 **)(v397 + 16 * v398);
                        }
                        uint64_t v508 = v400[1];
                        uint64_t v511 = *(void *)v508;
                        unsigned int v509 = (char *)(v508 + 16);
                        uint64_t v510 = v511;
                      }
                      else
                      {
                        uint64_t v510 = 0;
                        unsigned int v509 = &byte_1CFBCE98E;
                      }
                      __int16 v597 = 773;
                      uint64_t v594 = v509;
                      uint64_t v595 = v510;
                      v596[0] = ".neg";
                      if (*(llvm::ConstantFP **)v394 != v395)
                      {
                        if (*(unsigned __int8 *)(v394 + 16) <= 0x14u)
                        {
                          unsigned int v10 = (const llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(void, uint64_t, uint64_t, llvm::ConstantFP *))(**((void **)this + 27) + 224))(*((void *)this + 27), 38, v394, v395);
                          if (v10) {
                            BOOL v515 = *((unsigned __int8 *)v10 + 16) >= 0x1Cu;
                          }
                          else {
                            BOOL v515 = 0;
                          }
                          if (v515)
                          {
                            (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v594, *((void *)this + 24), *((void *)this + 25));
                            uint64_t v516 = *((unsigned int *)this + 38);
                            if (v516)
                            {
                              uint64_t v517 = *((void *)this + 18);
                              uint64_t v518 = v517 + 16 * v516;
                              do
                              {
                                llvm::Instruction::setMetadata(v10, *(_DWORD *)v517, *(llvm::MDNode **)(v517 + 8));
                                v517 += 16;
                              }
                              while (v517 != v518);
                            }
                          }
                        }
                        else
                        {
                          WORD4(v601) = 257;
                          unsigned int v10 = llvm::CastInst::Create(38, v394, (uint64_t)v395, (const char **)&v598, 0);
                          (*(void (**)(void, const llvm::detail::DoubleAPFloat *, void **, void, void))(**((void **)this + 28) + 16))(*((void *)this + 28), v10, &v594, *((void *)this + 24), *((void *)this + 25));
                          uint64_t v512 = *((unsigned int *)this + 38);
                          if (v512)
                          {
                            uint64_t v513 = *((void *)this + 18);
                            uint64_t v514 = v513 + 16 * v512;
                            do
                            {
                              llvm::Instruction::setMetadata(v10, *(_DWORD *)v513, *(llvm::MDNode **)(v513 + 8));
                              v513 += 16;
                            }
                            while (v513 != v514);
                          }
                        }
                      }
                      goto LABEL_364;
                    }
                    uint64_t v296 = llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)isNotMinSignedValue, (llvm::Instruction *)v3);
                    unsigned int v10 = 0;
                    if (*(unsigned __int8 *)(v297 + 16) > 0x14u || !v297) {
                      goto LABEL_364;
                    }
                    uint64_t v299 = v296;
                    Not = llvm::ConstantExpr::getNot((llvm::Constant **)v297, (llvm::Constant *)v297, v298);
                    WORD4(v601) = 257;
                    unsigned int v87 = sub_1CC2428C0((uint64_t)v24, v299, (uint64_t)Not, (uint64_t)&v598);
                    uint64_t v88 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v87, 1uLL, 0);
                    if ((*(unsigned char *)(v3 + 23) & 0x10) == 0) {
                      goto LABEL_410;
                    }
                    uint64_t v301 = ***(void ***)v3;
                    uint64_t v90 = *(void *)(v301 + 152);
                    uint64_t v91 = *(unsigned int *)(v301 + 168);
                    if (!v91) {
                      goto LABEL_360;
                    }
                    LODWORD(v92) = (v91 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                    int v93 = (unsigned __int8 **)(v90 + 16 * v92);
                    uint64_t v302 = *v93;
                    if (*v93 == (unsigned __int8 *)v3) {
                      goto LABEL_361;
                    }
                    int v303 = 1;
                    do
                    {
                      if (v302 == (unsigned __int8 *)-4096) {
                        goto LABEL_360;
                      }
                      int v304 = v92 + v303++;
                      uint64_t v92 = v304 & (v91 - 1);
                      uint64_t v302 = *(unsigned __int8 **)(v90 + 16 * v92);
                    }
                    while (v302 != (unsigned __int8 *)v3);
                    goto LABEL_104;
                }
              }
              int v132 = *(_DWORD *)(v3 + 20);
              if ((v132 & 0x40000000) != 0) {
                uint64_t v133 = *(unsigned __int8 **)(v3 - 8);
              }
              else {
                uint64_t v133 = (unsigned __int8 *)(v3 - 32 * (v132 & 0x7FFFFFF));
              }
              uint64_t v154 = (unsigned __int8 *)*((void *)v133 + 4);
              if (!v154) {
                goto LABEL_185;
              }
              if (v154[16] > 0x14u) {
                goto LABEL_185;
              }
              uint64_t isNotMinSignedValue = llvm::Constant::containsUndefOrPoisonElement((llvm::Constant *)v154);
              if (isNotMinSignedValue) {
                goto LABEL_185;
              }
              uint64_t isNotMinSignedValue = llvm::Constant::isNotMinSignedValue((unint64_t)v154);
              if (!isNotMinSignedValue) {
                goto LABEL_185;
              }
              uint64_t isNotMinSignedValue = llvm::Constant::isNotOneValue((unint64_t)v154);
              if (!isNotMinSignedValue) {
                goto LABEL_185;
              }
              int v157 = *(_DWORD *)(v3 + 20);
              if ((v157 & 0x40000000) != 0) {
                BOOL v158 = *(uint64_t **)(v3 - 8);
              }
              else {
                BOOL v158 = (uint64_t *)(v3 - 32 * (v157 & 0x7FFFFFF));
              }
              uint64_t v404 = *(llvm::ConstantFP **)v154;
              if ((*(_DWORD *)(*(void *)v154 + 8) & 0xFE) == 0x12) {
                unsigned int v405 = *(unsigned __int8 *)(**((void **)v404 + 2) + 8);
              }
              else {
                unsigned int v405 = *(_DWORD *)(*(void *)v154 + 8);
              }
              uint64_t v406 = *v158;
              if (v405 <= 6) {
                uint64_t v407 = llvm::ConstantFP::getZero(v404, (llvm::Type *)1, v156);
              }
              else {
                uint64_t v407 = llvm::Constant::getNullValue(v404, v155, v156);
              }
              int v409 = v407;
              uint64_t v410 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v407, (llvm::Constant *)v154, v408);
              if (!v410)
              {
                uint64_t v581 = *(void ***)v409;
                if (*(void *)v409)
                {
                  uint64_t v594 = v409;
                  uint64_t v595 = (uint64_t)v154;
                  uint64_t v582 = **v581 + 1512;
                  LODWORD(v598) = 15;
                  uint64_t v599 = &v594;
                  uint64_t v600 = 2;
                  long long v601 = 0u;
                  long long v602 = 0u;
                  uint64_t v603 = 0;
                  uint64_t v410 = sub_1CC56C20C(v582, (uint64_t)v581, (unsigned __int8 *)&v598);
                }
                else
                {
                  uint64_t v410 = 0;
                }
              }
              if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
              {
                unint64_t v501 = 0;
                unsigned int v500 = &byte_1CFBCE98E;
                goto LABEL_588;
              }
              uint64_t v411 = ***(void ***)v3;
              uint64_t v412 = *(void *)(v411 + 152);
              uint64_t v413 = *(unsigned int *)(v411 + 168);
              if (v413)
              {
                LODWORD(v414) = (v413 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                uint64_t v415 = (unsigned __int8 **)(v412 + 16 * v414);
                uint64_t v416 = *v415;
                if (*v415 == (unsigned __int8 *)v3)
                {
LABEL_587:
                  BOOL v499 = v415[1];
                  int v502 = *(void ***)v499;
                  unsigned int v500 = (char *)(v499 + 16);
                  unint64_t v501 = v502;
LABEL_588:
                  WORD4(v601) = 773;
                  BOOL v598 = v500;
                  uint64_t v599 = v501;
                  uint64_t v600 = (uint64_t)".neg";
                  int v503 = sub_1CC57DBF8((uint64_t)v24, v406, v410, (uint64_t)&v598, 0);
                  unsigned int v10 = v503;
                  if (v503 && *((unsigned __int8 *)v503 + 16) >= 0x1Cu) {
                    *((unsigned char *)v503 + 17) = *((unsigned char *)v503 + 17) & 0xFD | *(unsigned char *)(v3 + 17) & 2;
                  }
                  goto LABEL_364;
                }
                int v417 = 1;
                while (v416 != (unsigned __int8 *)-4096)
                {
                  int v418 = v414 + v417++;
                  uint64_t v414 = v418 & (v413 - 1);
                  uint64_t v416 = *(unsigned __int8 **)(v412 + 16 * v414);
                  if (v416 == (unsigned __int8 *)v3)
                  {
                    uint64_t v415 = (unsigned __int8 **)(v412 + 16 * v414);
                    goto LABEL_587;
                  }
                }
              }
              uint64_t v415 = (unsigned __int8 **)(v412 + 16 * v413);
              goto LABEL_587;
            }
            int v85 = *(_DWORD *)(v3 + 20);
            if (*(unsigned char *)(v3 + 16) == 55)
            {
              if ((v85 & 0x40000000) != 0) {
                uint64_t v86 = *(uint64_t **)(v3 - 8);
              }
              else {
                uint64_t v86 = (uint64_t *)(v3 - 32 * (v85 & 0x7FFFFFF));
              }
              uint64_t v174 = *v86;
              uint64_t v175 = v86[4];
              WORD4(v601) = 257;
              int v176 = sub_1CC2429AC((uint64_t)this + 144, v174, v175, (uint64_t)&v598, 0);
            }
            else
            {
              if ((v85 & 0x40000000) != 0) {
                int v153 = *(uint64_t **)(v3 - 8);
              }
              else {
                int v153 = (uint64_t *)(v3 - 32 * (v85 & 0x7FFFFFF));
              }
              uint64_t v177 = *v153;
              uint64_t v178 = v153[4];
              WORD4(v601) = 257;
              int v176 = sub_1CC5357E8((uint64_t)this + 144, v177, v178, (uint64_t)&v598, 0);
            }
            unsigned int v10 = v176;
            if (v176) {
              BOOL v179 = *((unsigned __int8 *)v176 + 16) >= 0x1Cu;
            }
            else {
              BOOL v179 = 0;
            }
            if (!v179) {
              goto LABEL_364;
            }
            llvm::Instruction::copyIRFlags((uint64_t)v176, v3, 1);
            if ((*(unsigned char *)(v3 + 23) & 0x10) == 0)
            {
              uint64_t v225 = 0;
              int v224 = &byte_1CFBCE98E;
LABEL_280:
              WORD4(v601) = 773;
              BOOL v598 = v224;
              uint64_t v599 = v225;
              uint64_t v600 = (uint64_t)".neg";
              llvm::Value::setNameImpl(v10, (const char **)&v598);
              if (*((unsigned char *)v10 + 16)) {
                goto LABEL_364;
              }
              if ((*((unsigned char *)v10 + 23) & 0x10) == 0) {
                goto LABEL_668;
              }
              uint64_t v227 = ***(void ***)v10;
              uint64_t v228 = *(void *)(v227 + 152);
              uint64_t v229 = *(unsigned int *)(v227 + 168);
              if (v229)
              {
                LODWORD(v230) = (v229 - 1) & ((v10 >> 4) ^ (v10 >> 9));
                uint64_t v231 = (const llvm::detail::DoubleAPFloat **)(v228 + 16 * v230);
                uint64_t v232 = *v231;
                if (*v231 == v10)
                {
LABEL_661:
                  uint64_t v558 = v231[1];
                  unint64_t v561 = *(void *)v558;
                  __int16 v559 = (char *)v558 + 16;
                  unint64_t v560 = v561;
                  if (v561 >= 5 && *(_DWORD *)v559 == *(_DWORD *)"llvm." && v559[4] == aLlvm_1[4])
                  {
                    *((_DWORD *)v10 + 8) |= 0x2000u;
                    int v563 = llvm::Function::lookupIntrinsicID(v559, v560);
LABEL_669:
                    *((_DWORD *)v10 + 9) = v563;
                    goto LABEL_364;
                  }
LABEL_668:
                  int v563 = 0;
                  *((_DWORD *)v10 + 8) &= ~0x2000u;
                  goto LABEL_669;
                }
                int v233 = 1;
                while (v232 != (const llvm::detail::DoubleAPFloat *)-4096)
                {
                  int v234 = v230 + v233++;
                  uint64_t v230 = v234 & (v229 - 1);
                  uint64_t v232 = *(const llvm::detail::DoubleAPFloat **)(v228 + 16 * v230);
                  if (v232 == v10)
                  {
                    uint64_t v231 = (const llvm::detail::DoubleAPFloat **)(v228 + 16 * v230);
                    goto LABEL_661;
                  }
                }
              }
              uint64_t v231 = (const llvm::detail::DoubleAPFloat **)(v228 + 16 * v229);
              goto LABEL_661;
            }
            uint64_t v180 = ***(void ***)v3;
            uint64_t v181 = *(void *)(v180 + 152);
            uint64_t v182 = *(unsigned int *)(v180 + 168);
            if (v182)
            {
              LODWORD(v183) = (v182 - 1) & ((v3 >> 4) ^ (v3 >> 9));
              int v184 = (unsigned __int8 **)(v181 + 16 * v183);
              uint64_t v185 = *v184;
              if (*v184 == (unsigned __int8 *)v3)
              {
LABEL_279:
                uint64_t v223 = v184[1];
                uint64_t v226 = *(void ***)v223;
                int v224 = (char *)(v223 + 16);
                uint64_t v225 = v226;
                goto LABEL_280;
              }
              int v186 = 1;
              while (v185 != (unsigned __int8 *)-4096)
              {
                int v187 = v183 + v186++;
                uint64_t v183 = v187 & (v182 - 1);
                uint64_t v185 = *(unsigned __int8 **)(v181 + 16 * v183);
                if (v185 == (unsigned __int8 *)v3)
                {
                  int v184 = (unsigned __int8 **)(v181 + 16 * v183);
                  goto LABEL_279;
                }
              }
            }
            int v184 = (unsigned __int8 **)(v181 + 16 * v182);
            goto LABEL_279;
          }
          int v125 = *(unsigned __int8 *)v594;
          if ((v125 - 4) > 0x1E)
          {
            if ((v125 - 3) >= 0xFFFFFFFE) {
              uint64_t v171 = v594;
            }
            else {
              uint64_t v171 = 0;
            }
            if ((v125 - 3) < 0xFFFFFFFE)
            {
              if (v125 == 3) {
                *((void *)v594 + 1) = 0;
              }
              goto LABEL_34;
            }
            unint64_t v127 = (unint64_t)v171 + 8;
          }
          else
          {
            if ((*((unsigned char *)v594 + 1) & 0x7F) != 2 && !*((_DWORD *)v594 + 3)) {
              goto LABEL_34;
            }
            uint64_t v126 = *((void *)v594 + 2);
            if ((v126 & 4) == 0) {
              goto LABEL_34;
            }
            unint64_t v127 = v126 & 0xFFFFFFFFFFFFFFF8;
            if (!v127) {
              goto LABEL_34;
            }
          }
          BOOL v598 = &v594;
          uint64_t isNotMinSignedValue = sub_1CC5FA668(v127 + 16, &v598);
          goto LABEL_34;
        }
      }
      else
      {
        if (v8 != 43) {
          goto LABEL_15;
        }
        if (!sub_1CBF535C4((uint64_t)&v598, *(llvm::Constant **)(v3 - 64))) {
          goto LABEL_15;
        }
        unsigned int v9 = *(void **)(v3 - 32);
        if (!v9) {
          goto LABEL_15;
        }
      }
      *uint64_t v599 = v9;
      return (const llvm::detail::DoubleAPFloat *)v590;
    }
  }
  return (const llvm::detail::DoubleAPFloat *)v3;
}

const llvm::detail::DoubleAPFloat *llvm::Negator::negate(llvm::Negator *this, llvm::Value *a2, unsigned int a3)
{
  int v5 = *((_DWORD *)this + 88);
  uint64_t v6 = (char *)this + 360;
  unsigned int v7 = a2 >> 4;
  if (v5)
  {
    int v8 = 4;
    unsigned int v9 = (char *)this + 360;
  }
  else
  {
    unsigned int v9 = (char *)*((void *)this + 45);
    int v8 = *((_DWORD *)this + 92);
    if (!v8)
    {
      uint64_t v15 = 0;
      goto LABEL_8;
    }
  }
  int v10 = v8 - 1;
  LODWORD(v11) = (v8 - 1) & (v7 ^ (a2 >> 9));
  int v12 = &v9[16 * v11];
  int v13 = *(llvm::Value **)v12;
  if (*(llvm::Value **)v12 == a2) {
    goto LABEL_9;
  }
  int v14 = 1;
  while (v13 != (llvm::Value *)-4096)
  {
    int v40 = v11 + v14++;
    uint64_t v11 = v40 & v10;
    int v13 = *(llvm::Value **)&v9[16 * v11];
    if (v13 == a2)
    {
      int v12 = &v9[16 * v11];
      goto LABEL_9;
    }
  }
  if (v5)
  {
    uint64_t v15 = 4;
    unsigned int v9 = (char *)this + 360;
  }
  else
  {
    unsigned int v9 = (char *)*((void *)this + 45);
    uint64_t v15 = *((unsigned int *)this + 92);
  }
LABEL_8:
  int v12 = &v9[16 * v15];
LABEL_9:
  if (v5)
  {
    uint64_t v16 = 4;
    uint64_t v17 = (char *)this + 360;
  }
  else
  {
    uint64_t v17 = (char *)*((void *)this + 45);
    uint64_t v16 = *((unsigned int *)this + 92);
  }
  if (&v17[16 * v16] != v12) {
    return (const llvm::detail::DoubleAPFloat *)*((void *)v12 + 1);
  }
  unsigned int v18 = llvm::Negator::visitImpl(this, a2, a3);
  unsigned int v19 = *((_DWORD *)this + 88);
  int v20 = v19 & 1;
  if (v19)
  {
    int v21 = 4;
    uint64_t v22 = v6;
  }
  else
  {
    int v21 = *((_DWORD *)this + 92);
    if (!v21)
    {
      uint64_t v25 = 0;
      unsigned int v29 = 0;
      goto LABEL_21;
    }
    uint64_t v22 = (char *)*((void *)this + 45);
  }
  int v23 = v21 - 1;
  unsigned int v24 = (v21 - 1) & (v7 ^ (a2 >> 9));
  uint64_t v25 = &v22[16 * v24];
  unint64_t v26 = *(llvm::Value **)v25;
  if (*(llvm::Value **)v25 != a2)
  {
    int v27 = 0;
    int v28 = 1;
    while (v26 != (llvm::Value *)-4096)
    {
      if (v27) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = v26 == (llvm::Value *)-8192;
      }
      if (v38) {
        int v27 = v25;
      }
      unsigned int v39 = v24 + v28++;
      unsigned int v24 = v39 & v23;
      uint64_t v25 = &v22[16 * (v39 & v23)];
      unint64_t v26 = *(llvm::Value **)v25;
      if (*(llvm::Value **)v25 == a2) {
        goto LABEL_27;
      }
    }
    if (v27) {
      uint64_t v25 = v27;
    }
    if (v19) {
      unsigned int v29 = 4;
    }
    else {
      unsigned int v29 = *((_DWORD *)this + 92);
    }
LABEL_21:
    uint64_t v30 = (unsigned int *)((char *)this + 352);
    if (4 * (v19 >> 1) + 4 < 3 * v29)
    {
      if (v29 + ~(v19 >> 1) - *((_DWORD *)this + 89) <= v29 >> 3)
      {
        sub_1CCA8E55C((uint64_t)this + 352, v29);
        uint64_t v43 = 0;
        sub_1CCA8E4C4((uint64_t)this + 352, (uint64_t)a2, &v43);
        uint64_t v25 = v43;
        unsigned int v19 = *v30;
        int v20 = *v30 & 1;
      }
      goto LABEL_24;
    }
    sub_1CCA8E55C((uint64_t)this + 352, 2 * v29);
    unsigned int v19 = *v30;
    if (*v30)
    {
      int v32 = 4;
    }
    else
    {
      int v32 = *((_DWORD *)this + 92);
      if (!v32)
      {
        int v20 = 0;
        uint64_t v25 = 0;
LABEL_24:
        unsigned int *v30 = (v19 & 0xFFFFFFFE | v20) + 2;
        if (*(void *)v25 != -4096) {
          --*((_DWORD *)this + 89);
        }
        *(void *)uint64_t v25 = a2;
        *((void *)v25 + 1) = 0;
        goto LABEL_27;
      }
      uint64_t v6 = (char *)*((void *)this + 45);
    }
    int v20 = *v30 & 1;
    int v33 = v32 - 1;
    unsigned int v34 = (v32 - 1) & (v7 ^ (a2 >> 9));
    uint64_t v25 = &v6[16 * v34];
    unsigned int v35 = *(llvm::Value **)v25;
    if (*(llvm::Value **)v25 != a2)
    {
      int v36 = 0;
      int v37 = 1;
      while (v35 != (llvm::Value *)-4096)
      {
        if (v36) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v35 == (llvm::Value *)-8192;
        }
        if (v41) {
          int v36 = v25;
        }
        unsigned int v42 = v34 + v37++;
        unsigned int v34 = v42 & v33;
        uint64_t v25 = &v6[16 * (v42 & v33)];
        unsigned int v35 = *(llvm::Value **)v25;
        if (*(llvm::Value **)v25 == a2) {
          goto LABEL_24;
        }
      }
      if (v36) {
        uint64_t v25 = v36;
      }
    }
    goto LABEL_24;
  }
LABEL_27:
  *((void *)v25 + 1) = v18;
  return v18;
}

const llvm::detail::DoubleAPFloat *llvm::Negator::run@<X0>(llvm::Negator *this@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::Negator::negate(this, a2, 0);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((unsigned int *)this + 2);
  if (result)
  {
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v7;
    char v8 = 1;
    *(void *)(a3 + 16) = result;
  }
  else
  {
    if (v7) {
      llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v6 - 8 + 8 * v7));
    }
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

uint64_t llvm::Negator::Negate(char a1, uint64_t **a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCE5CC0) {
    return 0;
  }
  llvm::Negator::Negator((uint64_t)v52, **a2, a3[10], a3[7], a3[9], a1);
  llvm::Negator::run((llvm::Negator *)v52, (llvm::Value *)a2, (uint64_t)&v48);
  if (v51)
  {
    uint64_t v7 = a3[3];
    uint64_t v45 = v7;
    long long v46 = *(_OWORD *)(v7 + 48);
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    if (v8)
    {
      int v37 = (unsigned __int8 **)(*(void *)v7 + 8);
      uint64_t v38 = 16 * v8;
      while (*((_DWORD *)v37 - 2))
      {
        v37 += 2;
        v38 -= 16;
        if (!v38) {
          goto LABEL_12;
        }
      }
      unsigned int v39 = *v37;
      BOOL v47 = v39;
      if (v39)
      {
        llvm::MetadataTracking::track((uint64_t)&v47, v39, 2);
        uint64_t v7 = a3[3];
      }
    }
    else
    {
LABEL_12:
      BOOL v47 = 0;
    }
    *(void *)(v7 + 48) = 0;
    *(void *)(v7 + 56) = 0;
    unsigned int v9 = (uint64_t *)a3[3];
    uint64_t v10 = *v9;
    uint64_t v11 = *((unsigned int *)v9 + 2);
    if (v11)
    {
      uint64_t v34 = 0;
      uint64_t v12 = v10 + 16 * v11;
      uint64_t v35 = 16 * v11;
      uint64_t v36 = 16 * v11 - 16;
      while (*(_DWORD *)(v10 + v34))
      {
        v34 += 16;
        if (v35 == v34) {
          goto LABEL_15;
        }
      }
      uint64_t v12 = v10 + v34;
      if (v36 != v34)
      {
        int v40 = (void *)(v12 + 24);
        uint64_t v41 = v35 - v34 - 16;
        do
        {
          int v42 = *((_DWORD *)v40 - 2);
          if (v42)
          {
            *(_DWORD *)uint64_t v12 = v42;
            *(void *)(v12 + 8) = *v40;
            v12 += 16;
          }
          v40 += 2;
          v41 -= 16;
        }
        while (v41);
      }
    }
    else
    {
      uint64_t v12 = *v9;
    }
LABEL_15:
    *((_DWORD *)v9 + 2) = (unint64_t)(v12 - v10) >> 4;
    if (!v49)
    {
LABEL_29:
      uint64_t v5 = v50;
      uint64_t v30 = v45;
      if ((void)v46)
      {
        sub_1CBF5385C(v45, v46, *((uint64_t *)&v46 + 1));
        uint64_t v30 = v45;
      }
      else
      {
        *(void *)(v45 + 48) = 0;
        *(void *)(v30 + 56) = 0;
      }
      v43[0] = v47;
      if (v47)
      {
        llvm::MetadataTracking::track((uint64_t)v43, v47, 2);
        unsigned int v31 = v43[0];
      }
      else
      {
        unsigned int v31 = 0;
      }
      sub_1CB8461A4(v30, 0, (uint64_t)v31);
      if (v43[0]) {
        llvm::MetadataTracking::untrack((uint64_t)v43, v43[0]);
      }
      if (v47) {
        llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
      }
      goto LABEL_4;
    }
    int v13 = v48;
    int v14 = &v48[v49];
    while (1)
    {
      uint64_t v15 = *v13;
      if ((*((unsigned char *)*v13 + 23) & 0x10) == 0)
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unsigned __int8 *)&byte_1CFBCE98E;
        goto LABEL_25;
      }
      uint64_t v16 = ***(void ***)v15;
      uint64_t v17 = *(void *)(v16 + 152);
      uint64_t v18 = *(unsigned int *)(v16 + 168);
      if (!v18) {
        goto LABEL_28;
      }
      LODWORD(v19) = (v18 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      int v20 = (llvm::Instruction **)(v17 + 16 * v19);
      int v21 = *v20;
      if (*v20 != v15) {
        break;
      }
LABEL_24:
      unsigned int v24 = v20[1];
      int v27 = *(unsigned __int8 **)v24;
      unint64_t v26 = (unsigned __int8 *)v24 + 16;
      uint64_t v25 = v27;
LABEL_25:
      int v28 = (uint64_t *)a3[3];
      __int16 v44 = 261;
      v43[0] = v26;
      v43[1] = v25;
      (*(void (**)(uint64_t, llvm::Instruction *, unsigned __int8 **, uint64_t, uint64_t))(*(void *)v28[10]
                                                                                                 + 16))(v28[10], v15, v43, v28[6], v28[7]);
      uint64_t v29 = *((unsigned int *)v28 + 2);
      if (v29)
      {
        uint64_t v32 = *v28;
        uint64_t v33 = v32 + 16 * v29;
        do
        {
          llvm::Instruction::setMetadata(v15, *(_DWORD *)v32, *(llvm::MDNode **)(v32 + 8));
          v32 += 16;
        }
        while (v32 != v33);
      }
      if (++v13 == v14) {
        goto LABEL_29;
      }
    }
    int v22 = 1;
    while (v21 != (llvm::Instruction *)-4096)
    {
      int v23 = v19 + v22++;
      uint64_t v19 = v23 & (v18 - 1);
      int v21 = *(llvm::Instruction **)(v17 + 16 * v19);
      if (v21 == v15)
      {
        int v20 = (llvm::Instruction **)(v17 + 16 * v19);
        goto LABEL_24;
      }
    }
LABEL_28:
    int v20 = (llvm::Instruction **)(v17 + 16 * v18);
    goto LABEL_24;
  }
  uint64_t v5 = 0;
LABEL_4:
  if ((v56[72] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v57, 8);
  }
  llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter((llvm::IRBuilderCallbackInserter *)v56);
  if (v54 != &v55) {
    free(v54);
  }
  if (v52[0] != &v53) {
    free(v52[0]);
  }
  return v5;
}

void sub_1CCA8E220()
{
}

void *sub_1CCA8E234(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F262B650;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCA8E27C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262B650;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CCA8E2A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

BOOL sub_1CCA8E308(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3 || *(void *)(v3 + 8)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 <= 0x1B && v5 != 5)
  {
    uint64_t v17 = (unint64_t **)(a1 + 24);
    goto LABEL_33;
  }
  if (v5 <= 0x1B) {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 18);
  }
  else {
    unsigned int v7 = v5 - 28;
  }
  if (v7 == 38)
  {
    int v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) != 0) {
      unsigned int v9 = *(uint64_t **)(a2 - 8);
    }
    else {
      unsigned int v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
    }
    uint64_t v10 = *v9;
    LODWORD(v2) = *(unsigned __int8 *)(v10 + 16);
    if (v2 == 5)
    {
      LODWORD(v2) = *(unsigned __int16 *)(v10 + 18);
      if (v2 == 26)
      {
        unint64_t v2 = *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **(void **)a1 = v2;
          unint64_t v2 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
          uint64_t v13 = *(void *)(v10 - 32 * v2 + 32);
          if (v13)
          {
            unint64_t v2 = *(void *)(a1 + 8);
            *(void *)unint64_t v2 = v13;
            if (*(unsigned char *)(v13 + 16) != 5) {
              return 1;
            }
          }
        }
      }
    }
    else if (v2 == 54)
    {
      unint64_t v2 = *(void *)(v10 - 64);
      if (v2)
      {
        **(void **)a1 = v2;
        uint64_t v11 = *(void *)(v10 - 32);
        LODWORD(v2) = *(unsigned __int8 *)(v11 + 16);
        if (v11 && v2 <= 0x14)
        {
          **(void **)(a1 + 8) = v11;
          if (v2 != 5) {
            return 1;
          }
        }
      }
    }
  }
  uint64_t v17 = (unint64_t **)(a1 + 24);
  if (v5 == 54)
  {
    unint64_t v14 = *(void *)(a2 - 64);
    if (!v14) {
      return 0;
    }
    **uint64_t v17 = v14;
    uint64_t v15 = *(void *)(a2 - 32);
    if (!v15) {
      return 0;
    }
    unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
    if (v16 > 0x14) {
      return 0;
    }
    **(void **)(a1 + 32) = v15;
    return v16 != 5;
  }
LABEL_33:
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 26)
    {
LABEL_38:
      LOBYTE(v2) = 0;
      return (v5 == 5) & v2;
    }
    unint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v2)
    {
      **uint64_t v17 = v2;
      uint64_t v18 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (v18)
      {
        **(void **)(a1 + 32) = v18;
        if (*(unsigned char *)(v18 + 16) != 5)
        {
          LOBYTE(v2) = 1;
          return (v5 == 5) & v2;
        }
      }
      goto LABEL_38;
    }
  }
  return (v5 == 5) & v2;
}

uint64_t sub_1CCA8E4C4(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    unsigned int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        unsigned int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

int *sub_1CCA8E55C(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCA8E6E8((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CCA8E6E8((int *)a1, v14, v7);
}

int *sub_1CCA8E6E8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 18;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    void *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[4 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[4 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_14:
      *(void *)uint64_t v12 = v7;
      *((void *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CCA8E7F0()
{
  dword_1EBCE5C38 = sub_1CBF64200((llvm::DebugCounter *)"instcombine-negator", 0x13uLL, "Controls Negator transformations in InstCombine pass", 0x34uLL);
  char v1 = 1;
  int v3 = &v1;
  *(void *)&long long v2 = "Should we attempt to sink negations?";
  *((void *)&v2 + 1) = 36;
  sub_1CD68C62C(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCE5C40, &dword_1CB82C000);
  *(void *)&long long v2 = "What is the maximal lookup depth when trying to check for viability of negation sinking.";
  *((void *)&v2 + 1) = 88;
  int v3 = (char *)&unk_1CFB27A80;
  sub_1CD68C73C((int **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCE5D00, &dword_1CB82C000);
}

unsigned __int8 **sub_1CCA8E8DC(unsigned __int8 **this, uint64_t a2)
{
  int v3 = this;
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  }
  uint64_t v6 = *(unsigned __int8 **)(*(void *)v5 + 48);
  int v20 = v6;
  if (v6) {
    this = (unsigned __int8 **)llvm::MetadataTracking::track((uint64_t)&v20, v6, 2);
  }
  uint64_t v7 = v3 + 6;
  if (&v20 != v3 + 6)
  {
    int v8 = *v7;
    if (!*v7) {
      goto LABEL_7;
    }
    int v16 = *v8;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        uint64_t v19 = *v7;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v16 - 3) < 0xFFFFFFFE)
      {
        if (v16 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v18 = (unint64_t)(v19 + 8);
    }
    else if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3) {
           || (uint64_t v17 = *((void *)v8 + 2), (v17 & 4) == 0)
    }
           || (unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_7:
      uint64_t v9 = v20;
      *uint64_t v7 = v20;
      if (v9)
      {
        this = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)&v20, v9, (uint64_t)(v3 + 6));
        int v20 = 0;
      }
      goto LABEL_9;
    }
    int v21 = v3 + 6;
    this = (unsigned __int8 **)sub_1CC5FA668(v18 + 16, &v21);
    goto LABEL_7;
  }
  if (v20) {
    this = (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
  }
LABEL_9:
  int v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    uint64_t v11 = *(void *)(a2 - 8);
    uint64_t v12 = v10 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v12 = v10 & 0x7FFFFFF;
    uint64_t v11 = a2 - 32 * v12;
  }
  if (v12 != 1)
  {
    uint64_t v13 = (uint64_t *)(v11 + 32);
    uint64_t v14 = 32 * v12 - 32;
    do
    {
      uint64_t v15 = *v13;
      v13 += 4;
      this = (unsigned __int8 **)llvm::Instruction::applyMergedLocation((llvm::Instruction *)v3, (const llvm::DILocation *)v3[6], *(const llvm::DILocation **)(v15 + 48));
      v14 -= 32;
    }
    while (v14);
  }
  return this;
}

uint64_t sub_1CCA8EA54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40) + 40;
  while (v2 != v3)
  {
    if (v2) {
      uint64_t v4 = v2 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    int v5 = *(unsigned __int8 *)(v4 + 16);
    uint64_t v6 = (v5 - 33);
    if (v6 > 0x37) {
      goto LABEL_9;
    }
    if (((1 << (v5 - 33)) & 0x8000000000041) != 0)
    {
      uint64_t v7 = *(void *)(v4 + 64);
      if (v7 && (*(unsigned char *)(v7 + 17) & 0x30) != 0) {
        goto LABEL_9;
      }
      int v8 = *(_DWORD *)(v4 + 20);
      if (v8 < 0 && (uint64_t v12 = v4 - 32 * (v8 & 0x7FFFFFF), v15 = *(void *)(v12 - 8), v13 = v12 - 8, (v14 = v15) != 0))
      {
        uint64_t v16 = -v14;
        while (1)
        {
          unsigned int v17 = *(_DWORD *)(*(void *)(v13 + v16) + 8);
          BOOL v18 = v17 > 7;
          int v19 = (1 << v17) & 0x83;
          if (v18 || v19 == 0) {
            break;
          }
          v16 += 16;
          if (!v16) {
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v4, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v4, 44) & 1) != 0)
        {
          goto LABEL_9;
        }
        int v5 = *(unsigned __int8 *)(v4 + 16);
      }
    }
    else
    {
      if (v6 == 27)
      {
        if ((*(_WORD *)(v4 + 18) & 0x301) != 0) {
          return 0;
        }
        goto LABEL_9;
      }
      if (((1 << (v5 - 33)) & 0x808001D0000010) == 0) {
        goto LABEL_9;
      }
    }
    uint64_t result = 0;
    unsigned int v10 = v5 - 33;
    if (v10 > 0x33 || ((1 << v10) & 0x8000000000041) == 0) {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 64);
    if (!v11 || (*(unsigned char *)(v11 + 13) & 8) == 0)
    {
      __int32 v39 = 7;
      if (sub_1CC5CB59C(v4, &v39, 1uLL))
      {
        uint64_t v21 = *(void *)(v4 - 32);
        if (!v21 || *(unsigned char *)(v21 + 16) || *(void *)(v21 + 24) != *(void *)(v4 + 72) || *(_DWORD *)(v21 + 36) != 7) {
          return 0;
        }
      }
      uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v4, 11);
      if (!result) {
        return result;
      }
    }
LABEL_9:
    uint64_t v2 = *(void *)(v2 + 8);
  }
  uint64_t v22 = *(void *)(a1 - 32);
  int v23 = *(unsigned __int8 *)(v22 + 16);
  if (v22 && v23 == 59)
  {
    for (uint64_t i = *(void *)(v22 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v25 = *(void *)(i + 24);
      int v26 = *(unsigned __int8 *)(v25 + 16);
      if (v26 != 60 && (v26 != 61 || *(void *)(v25 - 32) != v22)) {
        return 1;
      }
    }
    if (*(unsigned char *)(*(void *)(v22 - 32) + 16) == 16)
    {
      uint64_t v27 = *(void *)(v22 + 40);
      uint64_t v28 = *(void *)(*(void *)(v27 + 56) + 80);
      uint64_t v29 = v28 ? v28 - 24 : 0;
      if (v27 == v29 && (*(_WORD *)(v22 + 18) & 0x40) == 0) {
        return 0;
      }
    }
  }
  if (v23 != 62) {
    return 1;
  }
  uint64_t v30 = *(_DWORD *)(v22 + 20) & 0x7FFFFFF;
  unsigned int v31 = (uint64_t *)(v22 - 32 * v30);
  uint64_t v32 = *v31;
  uint64_t result = 1;
  if (*v31 && *(unsigned char *)(v32 + 16) == 59 && *(unsigned char *)(*(void *)(v32 - 32) + 16) == 16)
  {
    uint64_t v33 = *(void *)(v32 + 40);
    uint64_t v34 = *(void *)(*(void *)(v33 + 56) + 80);
    uint64_t v35 = v34 ? v34 - 24 : 0;
    if (v33 == v35 && (*(_WORD *)(v32 + 18) & 0x40) == 0)
    {
      if (v30 == 1) {
        return 0;
      }
      int v36 = 2;
      do
      {
        int v37 = *(unsigned __int8 *)(v31[4 * (v36 - 1)] + 16);
        uint64_t result = v37 != 16;
      }
      while (v37 == 16 && v30 != v36++);
    }
  }
  return result;
}

char *sub_1CCA8ED58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v1104 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(v5 + 40);
  if (v6 != v5 + 40)
  {
    uint64_t v7 = v6 ? v6 - 24 : 0;
    int v8 = *(unsigned __int8 *)(v7 + 16);
    if ((v8 - 29) <= 0xA)
    {
      unsigned int v9 = v8 - 38;
      BOOL v26 = v9 > 0x38;
      uint64_t v10 = (1 << v9) & 0x100060000000001;
      if (!v26 && v10 != 0) {
        return 0;
      }
    }
  }
  int v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0) {
    uint64_t v13 = *(llvm::Value ***)(a2 - 8);
  }
  else {
    uint64_t v13 = (llvm::Value **)(a2 - 32 * (v12 & 0x7FFFFFF));
  }
  uint64_t v14 = *v13;
  int v15 = *((unsigned __int8 *)*v13 + 16);
  if (v15 > 91)
  {
    if (v15 != 92)
    {
      if (v15 != 93) {
        goto LABEL_23;
      }
      if ((v12 & 0x40000000) != 0)
      {
        BOOL v18 = *(uint64_t **)(a2 - 8);
        uint64_t v17 = v12 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v17 = v12 & 0x7FFFFFF;
        BOOL v18 = (uint64_t *)(a2 - 32 * v17);
      }
      uint64_t v36 = *v18;
      int v37 = &v18[4 * v17];
      while (1)
      {
        v18 += 4;
        if (v18 == v37) {
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = *v18;
        if (!*v18 || *(unsigned char *)(v39 + 16) != 93) {
          return v38;
        }
        uint64_t v40 = *(void *)(v39 + 8);
        if (!v40) {
          return 0;
        }
        uint64_t v41 = *(void *)(v40 + 8);
        if (v41)
        {
          while (*(void *)(v41 + 24) == *(void *)(v40 + 24))
          {
            uint64_t v40 = *(void *)(v40 + 8);
            uint64_t v41 = *(void *)(v41 + 8);
            if (!v41) {
              goto LABEL_53;
            }
          }
          return 0;
        }
LABEL_53:
        uint64_t v42 = *(unsigned int *)(v39 + 72);
        if (v42 != *(_DWORD *)(v36 + 72)) {
          return 0;
        }
        uint64_t v38 = 0;
        if (memcmp(*(const void **)(v39 + 64), *(const void **)(v36 + 64), 4 * v42)) {
          return v38;
        }
      }
      char v231 = 0;
      uint64_t v232 = 0;
      uint64_t v1022 = v36 - 64;
      uint64_t v1026 = v3;
      v1098[0] = (const char *)0x100000000;
      uint64_t v1020 = v36;
      uint64_t v1021 = (uint64_t *)(v3 + 24);
      *(void *)int64_t v1031 = v4;
      while (1)
      {
        unint64_t v233 = *((unsigned int *)v1098 + v232);
        char v234 = v231;
        uint64_t v235 = *(void *)(v1022 + 32 * v233);
        uint64_t v236 = *(uint64_t ***)v235;
        if ((*(unsigned char *)(v235 + 23) & 0x10) != 0)
        {
          uint64_t v237 = **v236;
          uint64_t v238 = *(void *)(v237 + 152);
          uint64_t v239 = *(unsigned int *)(v237 + 168);
          if (v239)
          {
            LODWORD(v240) = (v239 - 1) & ((v235 >> 4) ^ (v235 >> 9));
            __int16 v241 = (uint64_t *)(v238 + 16 * v240);
            uint64_t v242 = *v241;
            if (*v241 != v235)
            {
              int v243 = 1;
              do
              {
                if (v242 == -4096) {
                  goto LABEL_340;
                }
                int v244 = v240 + v243++;
                uint64_t v240 = v244 & (v239 - 1);
                uint64_t v242 = *(void *)(v238 + 16 * v240);
              }
              while (v242 != v235);
              __int16 v241 = (uint64_t *)(v238 + 16 * v240);
            }
          }
          else
          {
LABEL_340:
            __int16 v241 = (uint64_t *)(v238 + 16 * v239);
          }
          uint64_t v245 = (void *)v241[1];
          int v248 = (void *)*v245;
          uint64_t v247 = (char *)(v245 + 2);
          uint64_t v246 = v248;
        }
        else
        {
          uint64_t v246 = 0;
          uint64_t v247 = &byte_1CFBCE98E;
        }
        int v249 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
        LOWORD(v1103) = 773;
        v1101[0] = v247;
        v1101[1] = v246;
        *(void *)&long long v1102 = ".pn";
        int v250 = operator new(0x48uLL);
        v250[1] = v236;
        int v251 = (llvm::Value *)(v250 + 1);
        *int v250 = 0;
        v250[2] = 0;
        v250[3] = 0x4000000000000053;
        *((_OWORD *)v250 + 2) = 0u;
        uint64_t v1058 = v250 + 4;
        *((_OWORD *)v250 + 3) = 0u;
        *((_DWORD *)v250 + 16) = 0;
        *((_DWORD *)v250 + 17) = v249;
        llvm::Value::setNameImpl((llvm::Value *)(v250 + 1), (const char **)v1101);
        if (!*((unsigned char *)v250 + 24))
        {
          if ((*((unsigned char *)v250 + 31) & 0x10) == 0) {
            goto LABEL_429;
          }
          uint64_t v305 = ***(void ***)v251;
          uint64_t v306 = *(void *)(v305 + 152);
          uint64_t v307 = *(unsigned int *)(v305 + 168);
          if (v307)
          {
            LODWORD(v308) = (v307 - 1) & (((v250 + 8) >> 4) ^ (v251 >> 9));
            unint64_t v309 = (llvm::Value **)(v306 + 16 * v308);
            unsigned int v310 = *v309;
            if (*v309 != v251)
            {
              int v311 = 1;
              do
              {
                if (v310 == (llvm::Value *)-4096) {
                  goto LABEL_421;
                }
                int v312 = v308 + v311++;
                uint64_t v308 = v312 & (v307 - 1);
                unsigned int v310 = *(llvm::Value **)(v306 + 16 * v308);
              }
              while (v310 != v251);
              unint64_t v309 = (llvm::Value **)(v306 + 16 * v308);
            }
          }
          else
          {
LABEL_421:
            unint64_t v309 = (llvm::Value **)(v306 + 16 * v307);
          }
          uint64_t v313 = v309[1];
          unint64_t v316 = *(void *)v313;
          unint64_t v314 = (char *)v313 + 16;
          unint64_t v315 = v316;
          if (v316 >= 5 && (*(_DWORD *)v314 == *(_DWORD *)"llvm." ? (BOOL v317 = v314[4] == aLlvm_1[4]) : (BOOL v317 = 0), v317))
          {
            *((_DWORD *)v250 + 10) |= 0x2000u;
            int v318 = llvm::Function::lookupIntrinsicID(v314, v315);
          }
          else
          {
LABEL_429:
            int v318 = 0;
            *((_DWORD *)v250 + 10) &= ~0x2000u;
          }
          *((_DWORD *)v250 + 11) = v318;
        }
        unsigned int v1069 = v251 >> 4;
        uint64_t v252 = *((unsigned int *)v250 + 17);
        uint64_t v253 = operator new(40 * v252);
        *int v250 = v253;
        if (v252)
        {
          uint64_t v254 = &v253[4 * v252];
          do
          {
            *uint64_t v253 = 0;
            v253[1] = 0;
            v253[2] = 0;
            v253[3] = v251;
            v253 += 4;
          }
          while (v253 != v254);
        }
        v1100.__r_.__value_.__r.__words[(int)v233] = (std::string::size_type)v251;
        int v255 = *(_DWORD *)(v3 + 20);
        char v1076 = v234;
        if ((v255 & 0x40000000) != 0)
        {
          unint64_t v257 = *(void **)(v3 - 8);
          int v258 = &v257[4 * *(unsigned int *)(v3 + 60)];
          uint64_t v256 = v255 & 0x7FFFFFF;
          int v259 = &v258[v256];
          if (!v256) {
            goto LABEL_387;
          }
        }
        else
        {
          uint64_t v256 = v255 & 0x7FFFFFF;
          unint64_t v257 = (void *)(v3 - 32 * v256);
          int v258 = &v257[4 * *(unsigned int *)(v3 + 60)];
          int v259 = &v258[v256];
          if (!v256) {
            goto LABEL_387;
          }
        }
        if (v258 != v259)
        {
          int v260 = &v257[4 * v256];
          LODWORD(v261) = *((_DWORD *)v250 + 17);
          unsigned int __srca = (void *)v233;
          int v1034 = v260;
          int v1037 = v259;
          do
          {
            uint64_t v262 = *(void *)(*v257 + 32 * v233 - 64);
            uint64_t v263 = *v258;
            int v264 = *((_DWORD *)v250 + 7);
            if ((v264 & 0x7FFFFFF) == v261)
            {
              unsigned int v277 = v261 + (v261 >> 1);
              if (v277 <= 2) {
                uint64_t v278 = 2;
              }
              else {
                uint64_t v278 = v277;
              }
              *((_DWORD *)v250 + 17) = v278;
              if ((v264 & 0x40000000) != 0) {
                int v279 = (uint64_t *)*v250;
              }
              else {
                int v279 = (uint64_t *)((char *)v251 - 32 * v261);
              }
              __pa = v279;
              uint64_t v280 = operator new(40 * v278);
              *int v250 = v280;
              uint64_t v281 = v280;
              do
              {
                *uint64_t v281 = 0;
                v281[1] = 0;
                v281[2] = 0;
                v281[3] = v251;
                v281 += 4;
              }
              while (v281 != &v280[4 * v278]);
              int v282 = *((_DWORD *)v250 + 7);
              if ((v282 & 0x40000000) != 0) {
                uint64_t v283 = (uint64_t)v280;
              }
              else {
                uint64_t v283 = (uint64_t)v251 - 32 * (v282 & 0x7FFFFFF);
              }
              sub_1CC5E4108((uint64_t)v1101, __pa, &__pa[4 * v261], v283);
              if (v261)
              {
                memmove((void *)(v283 + 32 * v278), &__pa[4 * v261], 8 * v261);
                uint64_t v284 = 4 * v261;
                do
                {
                  uint64_t v285 = &__pa[v284];
                  if (__pa[v284 - 4])
                  {
                    *(void *)*(v285 - 2) = *(v285 - 3);
                    uint64_t v286 = *(v285 - 3);
                    if (v286) {
                      *(void *)(v286 + 16) = *(v285 - 2);
                    }
                  }
                  v284 -= 4;
                }
                while (v284 * 8);
              }
              operator delete(__pa);
              int v264 = *((_DWORD *)v250 + 7);
              uint64_t v4 = *(void *)v1031;
              int v260 = v1034;
              unint64_t v233 = (unint64_t)__srca;
              int v251 = (llvm::Value *)(v250 + 1);
              int v259 = v1037;
            }
            uint64_t v265 = (v264 + 1) & 0x7FFFFFF;
            *((_DWORD *)v250 + 7) = v264 & 0xF8000000 | (v264 + 1) & 0x7FFFFFF;
            if ((v264 & 0x40000000) != 0) {
              int v266 = (char *)*v250;
            }
            else {
              int v266 = (char *)v251 - 32 * v265;
            }
            uint64_t v267 = (v265 - 1);
            uint64_t v268 = &v266[32 * v267];
            if (*(void *)v268)
            {
              **((void **)v268 + 2) = *((void *)v268 + 1);
              uint64_t v276 = *((void *)v268 + 1);
              if (v276) {
                *(void *)(v276 + 16) = *((void *)v268 + 2);
              }
            }
            *(void *)uint64_t v268 = v262;
            if (v262)
            {
              uint64_t v271 = *(void *)(v262 + 8);
              uint64_t v270 = (char **)(v262 + 8);
              uint64_t v269 = v271;
              int v272 = &v266[32 * v267];
              *((void *)v272 + 1) = v271;
              if (v271) {
                *(void *)(v269 + 16) = v272 + 8;
              }
              *((void *)v272 + 2) = v270;
              *uint64_t v270 = v268;
            }
            int v273 = *((_DWORD *)v250 + 7);
            uint64_t v274 = v273 & 0x7FFFFFF;
            if ((v273 & 0x40000000) != 0) {
              unsigned int v275 = (char *)*v250;
            }
            else {
              unsigned int v275 = (char *)v251 - 32 * v274;
            }
            uint64_t v261 = *((unsigned int *)v250 + 17);
            *(void *)&v275[32 * v261 + 8 * (v274 - 1)] = v263;
            if (++v258 == v259) {
              break;
            }
            v257 += 4;
          }
          while (v257 != v260);
        }
LABEL_387:
        uint64_t v3 = v1026;
        uint64_t v287 = *(void *)(v1026 + 40);
        v250[6] = v287;
        *(_WORD *)(v287 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v250 + 31) & 0x10) != 0)
        {
          uint64_t v303 = *(void *)(v287 + 56);
          if (v303)
          {
            int v304 = *(llvm::ValueSymbolTable **)(v303 + 104);
            if (v304) {
              llvm::ValueSymbolTable::reinsertValue(v304, v251);
            }
          }
        }
        uint64_t v288 = *v1021;
        v250[4] = *v1021;
        v250[5] = v1021;
        *(void *)(v288 + 8) = v1058;
        *uint64_t v1021 = (uint64_t)v1058;
        uint64_t v289 = *(void *)(v4 + 32);
        v1101[0] = v251;
        if (*(unsigned char *)(v289 + 2088))
        {
          uint64_t v291 = v289 + 2096;
          int v290 = 16;
        }
        else
        {
          int v290 = *(_DWORD *)(v289 + 2104);
          if (!v290)
          {
            long long v300 = 0;
LABEL_404:
            uint64_t v301 = (void **)sub_1CBFD5BBC(v289 + 2088, (uint64_t)v1101, v1101, v300);
            *uint64_t v301 = v1101[0];
            unint64_t v302 = *(unsigned int *)(v289 + 2232);
            if (v302 >= *(unsigned int *)(v289 + 2236)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void **)(*(void *)(v289 + 2224) + 8 * v302) = v1101[0];
            ++*(_DWORD *)(v289 + 2232);
            goto LABEL_406;
          }
          uint64_t v291 = *(void *)(v289 + 2096);
        }
        int v292 = v290 - 1;
        unsigned int v293 = v292 & (v1069 ^ (v251 >> 9));
        int v294 = (llvm::Value **)(v291 + 8 * v293);
        size_t v295 = *v294;
        if (v251 != *v294)
        {
          uint64_t v296 = 0;
          int v297 = 1;
          while (v295 != (llvm::Value *)-4096)
          {
            if (v296) {
              BOOL v298 = 0;
            }
            else {
              BOOL v298 = v295 == (llvm::Value *)-8192;
            }
            if (v298) {
              uint64_t v296 = v294;
            }
            unsigned int v299 = v293 + v297++;
            unsigned int v293 = v299 & v292;
            int v294 = (llvm::Value **)(v291 + 8 * v293);
            size_t v295 = *v294;
            if (v251 == *v294) {
              goto LABEL_406;
            }
          }
          if (v296) {
            long long v300 = v296;
          }
          else {
            long long v300 = v294;
          }
          goto LABEL_404;
        }
LABEL_406:
        char v231 = 1;
        uint64_t v232 = 1;
        if (v1076)
        {
          long long v319 = *(_OWORD *)&v1100.__r_.__value_.__l.__data_;
          uint64_t v320 = *(void **)(v1020 + 64);
          uint64_t v321 = *(unsigned int *)(v1020 + 72);
          if ((*(unsigned char *)(v1026 + 23) & 0x10) != 0)
          {
            uint64_t v322 = ***(void ***)v1026;
            uint64_t v323 = *(void *)(v322 + 152);
            uint64_t v324 = *(unsigned int *)(v322 + 168);
            if (v324)
            {
              LODWORD(v325) = (v324 - 1) & ((v1026 >> 4) ^ (v1026 >> 9));
              int v326 = (uint64_t *)(v323 + 16 * v325);
              uint64_t v327 = *v326;
              if (*v326 != v1026)
              {
                int v328 = 1;
                do
                {
                  if (v327 == -4096) {
                    goto LABEL_492;
                  }
                  int v329 = v325 + v328++;
                  uint64_t v325 = v329 & (v324 - 1);
                  uint64_t v327 = *(void *)(v323 + 16 * v325);
                }
                while (v327 != v1026);
                int v326 = (uint64_t *)(v323 + 16 * v325);
              }
            }
            else
            {
LABEL_492:
              int v326 = (uint64_t *)(v323 + 16 * v324);
            }
            long long v371 = (void *)v326[1];
            uint64_t v374 = (void *)*v371;
            uint64_t v372 = (char *)(v371 + 2);
            uint64_t v373 = v374;
          }
          else
          {
            uint64_t v373 = 0;
            uint64_t v372 = &byte_1CFBCE98E;
          }
          LOWORD(v1103) = 261;
          v1101[0] = v372;
          v1101[1] = v373;
          uint64_t v375 = (char *)operator new(0xA0uLL);
          *((void *)v375 + 1) = 0;
          *((void *)v375 + 2) = 0;
          *(void *)uint64_t v375 = 0;
          *((void *)v375 + 5) = 0;
          *((void *)v375 + 6) = 0;
          *((void *)v375 + 4) = 0;
          *((void *)v375 + 8) = *(void *)v319;
          uint64_t v38 = v375 + 64;
          *((void *)v375 + 3) = v375 + 64;
          *((void *)v375 + 7) = v375 + 64;
          *((void *)v375 + 9) = 0;
          v375[80] = 93;
          v375[81] = 0;
          *((_WORD *)v375 + 41) = 0;
          *((_DWORD *)v375 + 21) = 2;
          *((_DWORD *)v375 + 30) = 0;
          *(_OWORD *)(v375 + 104) = 0u;
          *(_OWORD *)(v375 + 88) = 0u;
          *((void *)v375 + 16) = v375 + 144;
          *((void *)v375 + 17) = 0x400000000;
          llvm::InsertValueInst::init((llvm::Value *)(v375 + 64), v319, *((uint64_t *)&v319 + 1), v320, v321, (const char **)v1101);
LABEL_495:
          uint64_t v225 = (unsigned __int8 **)v38;
          goto LABEL_496;
        }
      }
    }
    if ((v12 & 0x40000000) != 0)
    {
      int v23 = *(uint64_t **)(a2 - 8);
      uint64_t v22 = v12 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v22 = v12 & 0x7FFFFFF;
      int v23 = (uint64_t *)(a2 - 32 * v22);
    }
    uint64_t v74 = *v23;
    int v75 = &v23[4 * v22];
    while (1)
    {
      v23 += 4;
      if (v23 == v75) {
        break;
      }
      uint64_t v38 = 0;
      uint64_t v76 = *v23;
      if (!*v23 || *(unsigned char *)(v76 + 16) != 92) {
        return v38;
      }
      uint64_t v77 = *(void *)(v76 + 8);
      if (!v77) {
        return 0;
      }
      for (uint64_t i = *(void *)(v77 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        if (*(void *)(i + 24) != *(void *)(v77 + 24)) {
          return 0;
        }
        uint64_t v77 = *(void *)(v77 + 8);
      }
      uint64_t v79 = *(unsigned int *)(v76 + 72);
      if (v79 != *(_DWORD *)(v74 + 72)
        || memcmp(*(const void **)(v76 + 64), *(const void **)(v74 + 64), 4 * v79))
      {
        return 0;
      }
      uint64_t v38 = 0;
      if (**(void **)(v76 - 32) != **(void **)(v74 - 32)) {
        return v38;
      }
    }
    uint64_t v330 = *(void *)(v74 - 32);
    uint64_t v331 = *(uint64_t ***)v330;
    if ((*(unsigned char *)(v330 + 23) & 0x10) != 0)
    {
      uint64_t v332 = **v331;
      uint64_t v333 = *(void *)(v332 + 152);
      uint64_t v334 = *(unsigned int *)(v332 + 168);
      if (v334)
      {
        LODWORD(v335) = (v334 - 1) & ((v330 >> 4) ^ (v330 >> 9));
        uint64_t v336 = (uint64_t *)(v333 + 16 * v335);
        uint64_t v337 = *v336;
        if (*v336 != v330)
        {
          int v338 = 1;
          do
          {
            if (v337 == -4096) {
              goto LABEL_498;
            }
            int v339 = v335 + v338++;
            uint64_t v335 = v339 & (v334 - 1);
            uint64_t v337 = *(void *)(v333 + 16 * v335);
          }
          while (v337 != v330);
          uint64_t v336 = (uint64_t *)(v333 + 16 * v335);
        }
      }
      else
      {
LABEL_498:
        uint64_t v336 = (uint64_t *)(v333 + 16 * v334);
      }
      uint64_t v376 = (void *)v336[1];
      uint64_t v379 = (void *)*v376;
      uint64_t v377 = (char *)(v376 + 2);
      uint64_t v378 = v379;
    }
    else
    {
      uint64_t v378 = 0;
      uint64_t v377 = &byte_1CFBCE98E;
    }
    LOWORD(v1103) = 773;
    v1101[0] = v377;
    v1101[1] = v378;
    *(void *)&long long v1102 = ".pn";
    uint64_t v380 = operator new(0x48uLL);
    v380[1] = v331;
    *uint64_t v380 = 0;
    v380[2] = 0;
    int64_t v1059 = v380 + 2;
    v380[3] = 0x4000000000000053;
    *((_OWORD *)v380 + 2) = 0u;
    v1051 = v380 + 4;
    *((_OWORD *)v380 + 3) = 0u;
    *((_DWORD *)v380 + 16) = 0;
    *((_DWORD *)v380 + 17) = v12 & 0x7FFFFFF;
    llvm::Value::setNameImpl((llvm::Value *)(v380 + 1), (const char **)v1101);
    unsigned int v1077 = (v380 + 8) >> 4;
    unint64_t v1085 = (llvm::Value *)(v380 + 1);
    uint64_t v1070 = (llvm::Value *)v74;
    if (!*((unsigned char *)v380 + 24))
    {
      if ((*((unsigned char *)v380 + 31) & 0x10) == 0) {
        goto LABEL_1053;
      }
      uint64_t v641 = ***(void ***)v1085;
      uint64_t v642 = *(void *)(v641 + 152);
      uint64_t v643 = *(unsigned int *)(v641 + 168);
      if (v643)
      {
        LODWORD(v644) = (v643 - 1) & (v1077 ^ (v1085 >> 9));
        uint64_t v645 = (llvm::Value **)(v642 + 16 * v644);
        uint64_t v646 = *v645;
        if (*v645 != v1085)
        {
          int v647 = 1;
          do
          {
            if (v646 == (llvm::Value *)-4096) {
              goto LABEL_1045;
            }
            int v648 = v644 + v647++;
            uint64_t v644 = v648 & (v643 - 1);
            uint64_t v646 = *(llvm::Value **)(v642 + 16 * v644);
          }
          while (v646 != v1085);
          uint64_t v645 = (llvm::Value **)(v642 + 16 * v644);
        }
      }
      else
      {
LABEL_1045:
        uint64_t v645 = (llvm::Value **)(v642 + 16 * v643);
      }
      uint64_t v793 = v645[1];
      unint64_t v796 = *(void *)v793;
      v794 = (char *)v793 + 16;
      unint64_t v795 = v796;
      if (v796 >= 5 && (*(_DWORD *)v794 == *(_DWORD *)"llvm." ? (BOOL v797 = v794[4] == aLlvm_1[4]) : (BOOL v797 = 0), v797))
      {
        *((_DWORD *)v380 + 10) |= 0x2000u;
        int v798 = llvm::Function::lookupIntrinsicID(v794, v795);
      }
      else
      {
LABEL_1053:
        int v798 = 0;
        *((_DWORD *)v380 + 10) &= ~0x2000u;
      }
      *((_DWORD *)v380 + 11) = v798;
    }
    uint64_t v381 = *((unsigned int *)v380 + 17);
    int v382 = operator new(40 * v381);
    *uint64_t v380 = v382;
    int v383 = (llvm::Value *)(v380 + 1);
    if (v381)
    {
      int v384 = &v382[4 * v381];
      do
      {
        void *v382 = 0;
        v382[1] = 0;
        v382[2] = 0;
        v382[3] = v1085;
        v382 += 4;
      }
      while (v382 != v384);
    }
    int v385 = *(_DWORD *)(v3 + 20);
    uint64_t v1027 = v3;
    if ((v385 & 0x40000000) != 0)
    {
      uint64_t v387 = *(void **)(v3 - 8);
      uint64_t v388 = &v387[4 * *(unsigned int *)(v3 + 60)];
      uint64_t v386 = v385 & 0x7FFFFFF;
      uint64_t v389 = &v388[v386];
    }
    else
    {
      uint64_t v386 = v385 & 0x7FFFFFF;
      uint64_t v387 = (void *)(v3 - 32 * v386);
      uint64_t v388 = &v387[4 * *(unsigned int *)(v3 + 60)];
      uint64_t v389 = &v388[v386];
    }
    if (v386) {
      BOOL v390 = v388 == v389;
    }
    else {
      BOOL v390 = 1;
    }
    if (!v390)
    {
      int v418 = &v387[4 * v386];
      LODWORD(v419) = *((_DWORD *)v380 + 17);
      *(void *)unint64_t v1032 = v4;
      int v1038 = v389;
      __srcb = v418;
      do
      {
        uint64_t v420 = *(void *)(*v387 - 32);
        uint64_t v421 = *v388;
        int v422 = *((_DWORD *)v380 + 7);
        if ((v422 & 0x7FFFFFF) == v419)
        {
          unsigned int v435 = v419 + (v419 >> 1);
          if (v435 <= 2) {
            uint64_t v436 = 2;
          }
          else {
            uint64_t v436 = v435;
          }
          *((_DWORD *)v380 + 17) = v436;
          if ((v422 & 0x40000000) != 0)
          {
            uint64_t v437 = v383;
            uint64_t v438 = v419;
            unint64_t v439 = (uint64_t *)*v380;
          }
          else
          {
            uint64_t v438 = v419;
            uint64_t v437 = v383;
            unint64_t v439 = (uint64_t *)((char *)v383 - 32 * v419);
          }
          __pb = v439;
          int v440 = operator new(40 * v436);
          *uint64_t v380 = v440;
          int v441 = v440;
          do
          {
            void *v441 = 0;
            v441[1] = 0;
            v441[2] = 0;
            v441[3] = v437;
            v441 += 4;
          }
          while (v441 != &v440[4 * v436]);
          int v442 = *((_DWORD *)v380 + 7);
          if ((v442 & 0x40000000) != 0) {
            uint64_t v443 = (uint64_t)v440;
          }
          else {
            uint64_t v443 = (uint64_t)v437 - 32 * (v442 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)v1101, __pb, &__pb[4 * v438], v443);
          if (v419)
          {
            memmove((void *)(v443 + 32 * v436), &__pb[4 * v438], 8 * v438);
            uint64_t v444 = 4 * v438;
            do
            {
              int v445 = &__pb[v444];
              if (__pb[v444 - 4])
              {
                *(void *)*(v445 - 2) = *(v445 - 3);
                uint64_t v446 = *(v445 - 3);
                if (v446) {
                  *(void *)(v446 + 16) = *(v445 - 2);
                }
              }
              v444 -= 4;
            }
            while (v444 * 8);
          }
          operator delete(__pb);
          int v422 = *((_DWORD *)v380 + 7);
          uint64_t v4 = *(void *)v1032;
          int v383 = (llvm::Value *)(v380 + 1);
          uint64_t v389 = v1038;
          int v418 = __srcb;
        }
        uint64_t v423 = (v422 + 1) & 0x7FFFFFF;
        *((_DWORD *)v380 + 7) = v422 & 0xF8000000 | (v422 + 1) & 0x7FFFFFF;
        if ((v422 & 0x40000000) != 0) {
          uint64_t v424 = (char *)*v380;
        }
        else {
          uint64_t v424 = (char *)v383 - 32 * v423;
        }
        uint64_t v425 = (v423 - 1);
        uint64_t v426 = &v424[32 * v425];
        if (*(void *)v426)
        {
          **((void **)v426 + 2) = *((void *)v426 + 1);
          uint64_t v434 = *((void *)v426 + 1);
          if (v434) {
            *(void *)(v434 + 16) = *((void *)v426 + 2);
          }
        }
        *(void *)uint64_t v426 = v420;
        if (v420)
        {
          uint64_t v429 = *(void *)(v420 + 8);
          int v428 = (char **)(v420 + 8);
          uint64_t v427 = v429;
          int v430 = &v424[32 * v425];
          *((void *)v430 + 1) = v429;
          if (v429) {
            *(void *)(v427 + 16) = v430 + 8;
          }
          *((void *)v430 + 2) = v428;
          unsigned __int8 *v428 = v426;
        }
        int v431 = *((_DWORD *)v380 + 7);
        uint64_t v432 = v431 & 0x7FFFFFF;
        if ((v431 & 0x40000000) != 0) {
          uint64_t v433 = (char *)*v380;
        }
        else {
          uint64_t v433 = (char *)v383 - 32 * v432;
        }
        uint64_t v419 = *((unsigned int *)v380 + 17);
        *(void *)&v433[32 * v419 + 8 * (v432 - 1)] = v421;
        if (++v388 == v389) {
          break;
        }
        v387 += 4;
      }
      while (v387 != v418);
    }
    uint64_t v391 = *(void *)(v1027 + 40);
    int v392 = (uint64_t *)(v1027 + 24);
    v380[6] = v391;
    *(_WORD *)(v391 + 18) &= ~0x8000u;
    int v393 = v383;
    if ((*((unsigned char *)v380 + 31) & 0x10) != 0)
    {
      uint64_t v551 = *(void *)(v391 + 56);
      if (v551)
      {
        uint64_t v552 = *(llvm::ValueSymbolTable **)(v551 + 104);
        if (v552)
        {
          llvm::ValueSymbolTable::reinsertValue(v552, v383);
          int v383 = v393;
        }
      }
    }
    uint64_t v394 = *v392;
    v380[4] = *v392;
    v380[5] = v392;
    *(void *)(v394 + 8) = v1051;
    *int v392 = (uint64_t)v1051;
    uint64_t v395 = *(void *)(v4 + 32);
    v1101[0] = v383;
    if (*(unsigned char *)(v395 + 2088))
    {
      uint64_t v397 = v395 + 2096;
      int v396 = 16;
    }
    else
    {
      int v396 = *(_DWORD *)(v395 + 2104);
      if (!v396)
      {
        uint64_t v406 = 0;
        goto LABEL_529;
      }
      uint64_t v397 = *(void *)(v395 + 2096);
    }
    int v398 = v396 - 1;
    unsigned int v399 = v398 & (v1077 ^ (v383 >> 9));
    unsigned int v400 = (llvm::Value **)(v397 + 8 * v399);
    uint64_t v401 = *v400;
    if (v383 == *v400) {
      goto LABEL_531;
    }
    int v402 = 0;
    int v403 = 1;
    while (v401 != (llvm::Value *)-4096)
    {
      if (v402) {
        BOOL v404 = 0;
      }
      else {
        BOOL v404 = v401 == (llvm::Value *)-8192;
      }
      if (v404) {
        int v402 = v400;
      }
      unsigned int v405 = v399 + v403++;
      unsigned int v399 = v405 & v398;
      unsigned int v400 = (llvm::Value **)(v397 + 8 * v399);
      uint64_t v401 = *v400;
      if (v383 == *v400) {
        goto LABEL_531;
      }
    }
    if (v402) {
      uint64_t v406 = v402;
    }
    else {
      uint64_t v406 = v400;
    }
LABEL_529:
    uint64_t v407 = (void **)sub_1CBFD5BBC(v395 + 2088, (uint64_t)v1101, v1101, v406);
    *uint64_t v407 = v1101[0];
    unsigned int v408 = *(_DWORD *)(v395 + 2232);
    if (v408 >= *(_DWORD *)(v395 + 2236)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void **)(*(void *)(v395 + 2224) + 8 * v408) = v1101[0];
    ++*(_DWORD *)(v395 + 2232);
LABEL_531:
    uint64_t v409 = *((unsigned int *)v1070 + 18);
    if ((*(unsigned char *)(v1027 + 23) & 0x10) != 0)
    {
      uint64_t v410 = ***(void ***)v1027;
      uint64_t v411 = *(void *)(v410 + 152);
      uint64_t v412 = *(unsigned int *)(v410 + 168);
      if (v412)
      {
        LODWORD(v413) = (v412 - 1) & ((v1027 >> 4) ^ (v1027 >> 9));
        uint64_t v414 = (uint64_t *)(v411 + 16 * v413);
        uint64_t v415 = *v414;
        if (*v414 != v1027)
        {
          int v416 = 1;
          do
          {
            if (v415 == -4096) {
              goto LABEL_573;
            }
            int v417 = v413 + v416++;
            uint64_t v413 = v417 & (v412 - 1);
            uint64_t v415 = *(void *)(v411 + 16 * v413);
          }
          while (v415 != v1027);
          uint64_t v414 = (uint64_t *)(v411 + 16 * v413);
        }
      }
      else
      {
LABEL_573:
        uint64_t v414 = (uint64_t *)(v411 + 16 * v412);
      }
      unsigned int v447 = (void *)v414[1];
      uint64_t v450 = (void *)*v447;
      int v448 = (char *)(v447 + 2);
      int v449 = v450;
    }
    else
    {
      int v449 = 0;
      int v448 = &byte_1CFBCE98E;
    }
    unint64_t v451 = (unsigned int *)*((void *)v1070 + 8);
    LOWORD(v1103) = 261;
    v1101[0] = v448;
    v1101[1] = v449;
    uint8x8_t v452 = (char *)operator new(0x80uLL);
    uint64_t v38 = v452 + 32;
    *((_DWORD *)v452 + 13) = *((_DWORD *)v452 + 13) & 0x38000000 | 1;
    *(void *)uint8x8_t v452 = 0;
    *((void *)v452 + 1) = 0;
    *((void *)v452 + 2) = 0;
    *((void *)v452 + 3) = v452 + 32;
    uint64_t v453 = *(void *)v393;
    if (v409)
    {
      uint64_t v454 = 4 * v409;
      int v455 = v451;
      uint64_t v456 = v1059;
      while (1)
      {
        unint64_t v457 = *v455;
        int v458 = *(unsigned __int8 *)(v453 + 8);
        if (v453 && v458 == 17)
        {
          if (*(void *)(v453 + 32) <= v457)
          {
LABEL_1328:
            uint64_t v459 = 0;
            goto LABEL_588;
          }
          int v460 = (uint64_t *)(v453 + 24);
        }
        else
        {
          uint64_t v459 = 0;
          if (!v453 || v458 != 16) {
            goto LABEL_588;
          }
          if (v457 >= *(_DWORD *)(v453 + 12)) {
            goto LABEL_1328;
          }
          int v460 = (uint64_t *)(*(void *)(v453 + 16) + 8 * v457);
        }
        uint64_t v453 = *v460;
        ++v455;
        uint64_t v459 = v453;
        v454 -= 4;
        if (!v454) {
          goto LABEL_588;
        }
      }
    }
    uint64_t v459 = *(void *)v393;
    uint64_t v456 = v1059;
LABEL_588:
    *((void *)v452 + 4) = v459;
    *((void *)v452 + 5) = 0;
    *((void *)v452 + 6) = 0x10000005CLL;
    *(_OWORD *)(v452 + 56) = 0u;
    *(_OWORD *)(v452 + 72) = 0u;
    *((_DWORD *)v452 + 22) = 0;
    uint64_t v461 = *v456;
    *(void *)uint8x8_t v452 = v393;
    *((void *)v452 + 1) = v461;
    if (v461) {
      *(void *)(v461 + 16) = v452 + 8;
    }
    *((void *)v452 + 2) = v456;
    *uint64_t v456 = (uint64_t)v452;
    *((void *)v452 + 12) = v452 + 112;
    *((void *)v452 + 13) = 0x400000000;
    llvm::ExtractValueInst::init((llvm::Value *)(v452 + 32), v451, v409, (const char **)v1101);
    uint64_t v225 = (unsigned __int8 **)v38;
    uint64_t v367 = v1027;
    goto LABEL_497;
  }
  if (v15 != 60)
  {
    if (v15 == 62)
    {
      if ((v12 & 0x40000000) != 0) {
        uint64_t v16 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v16 = a2 - 32 * (v12 & 0x7FFFFFF);
      }
      uint64_t v29 = *(void *)v16;
      uint64_t v30 = *(_DWORD *)(*(void *)v16 + 20) & 0x7FFFFFF;
      v1101[0] = &v1102;
      v1101[1] = (void *)0x1000000000;
      if (v30 >= 0x11) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v30)
      {
        unsigned int v31 = &v1102;
        uint64_t v32 = -32 * v30;
        do
        {
          *(void *)unsigned int v31 = *(void *)(v29 + v32);
          unsigned int v31 = (long long *)((char *)v31 + 8);
          v32 += 32;
        }
        while (v32);
        int v12 = *(_DWORD *)(a2 + 20);
      }
      unint64_t v33 = v30;
      LODWORD(v1101[1]) = v30;
      if ((v12 & 0x40000000) != 0)
      {
        uint64_t v35 = *(void *)(a2 - 8);
        uint64_t v34 = v12 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v34 = v12 & 0x7FFFFFF;
        uint64_t v35 = a2 - 32 * v34;
      }
      if (v34 != 1)
      {
        char v43 = 0;
        __int16 v44 = (uint64_t *)(v35 + 32);
        BOOL v45 = 1;
        LOBYTE(v46) = 1;
        BOOL v47 = (uint64_t *)(v35 + 32 * v34);
        while (1)
        {
          uint64_t v38 = 0;
          uint64_t v48 = *v44;
          if (!*v44 || *(unsigned char *)(v48 + 16) != 62) {
            goto LABEL_59;
          }
          uint64_t v49 = *(void *)(v48 + 8);
          if (!v49) {
            goto LABEL_58;
          }
          uint64_t v50 = *(void *)(v49 + 8);
          if (v50) {
            break;
          }
LABEL_68:
          if (*(void *)(v48 + 64) != *(void *)(v29 + 64)) {
            goto LABEL_58;
          }
          int v51 = *(_DWORD *)(v48 + 20);
          int v52 = *(_DWORD *)(v29 + 20);
          if (((v52 ^ v51) & 0x7FFFFFF) != 0) {
            goto LABEL_58;
          }
          if (v45 && (uint64_t v53 = v51 & 0x7FFFFFF, v54 = v48 - 32 * v53, *(unsigned char *)(*(void *)v54 + 16) == 59))
          {
            if (v53 == 1)
            {
              BOOL v45 = 1;
            }
            else
            {
              int v55 = 2;
              do
              {
                int v56 = *(unsigned __int8 *)(*(void *)(v54 + 32 * (v55 - 1)) + 16);
                BOOL v45 = v56 == 16;
                if (v53 == v55) {
                  break;
                }
                ++v55;
              }
              while (v56 == 16);
            }
          }
          else
          {
            BOOL v45 = 0;
          }
          char v57 = *(unsigned char *)(v48 + 17);
          uint64_t v58 = v52 & 0x7FFFFFF;
          if ((v52 & 0x7FFFFFF) != 0)
          {
            uint64_t v59 = 0;
            uint64_t v60 = 8 * v58;
            uint64_t v61 = v29;
            uint64_t v62 = *v44;
            do
            {
              uint64_t v63 = *(void *)(v61 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
              uint64_t v64 = *(void *)(v62 - 32 * (*(_DWORD *)(v48 + 20) & 0x7FFFFFF));
              if (v63 != v64)
              {
                if (*(unsigned char *)(v63 + 16) == 16
                  || *(unsigned char *)(v64 + 16) == 16
                  || (*(void *)v63 != *(void *)v64) | v43 & 1)
                {
                  goto LABEL_58;
                }
                *(void *)((char *)v1101[0] + v59) = 0;
                char v43 = 1;
              }
              v59 += 8;
              v62 += 32;
              v61 += 32;
            }
            while (v60 != v59);
          }
          v46 &= (v57 & 2) >> 1;
          v44 += 4;
          if (v44 == v47)
          {
            if (v45) {
              goto LABEL_58;
            }
            v1100.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1100.__r_.__value_.__r.__words[2];
            HIDWORD(v1100.__r_.__value_.__r.__words[1]) = 16;
            int v1023 = v46;
            if (!v33)
            {
              LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
              goto LABEL_827;
            }
            bzero(&v1100.__r_.__value_.__r.__words[2], 8 * v33);
            LODWORD(v1100.__r_.__value_.__r.__words[1]) = v33;
            uint64_t v467 = 0;
            char v468 = 0;
            int v1086 = (llvm::Value *)(v3 + 24);
            v469 = (char *)(v33 - 1);
            while (2)
            {
              uint64_t v470 = v29 + 32 * (void)v467;
              uint64_t v471 = v467;
              while (*((void *)v1101[0] + (void)v471))
              {
                ++v471;
                v470 += 32;
                if ((char *)v33 == v471)
                {
                  if ((v468 & 1) == 0) {
                    goto LABEL_827;
                  }
                  goto LABEL_719;
                }
              }
              int v1078 = v469;
              uint64_t v472 = *(void *)(v470 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
              uint64_t v473 = *(uint64_t ***)v472;
              *(void *)int v1033 = v4;
              if ((*(unsigned char *)(v472 + 23) & 0x10) != 0)
              {
                uint64_t v474 = **v473;
                uint64_t v475 = *(void *)(v474 + 152);
                uint64_t v476 = *(unsigned int *)(v474 + 168);
                if (!v476) {
                  goto LABEL_618;
                }
                LODWORD(v477) = (v476 - 1) & ((v472 >> 4) ^ (v472 >> 9));
                uint64_t v478 = (uint64_t *)(v475 + 16 * v477);
                uint64_t v479 = *v478;
                if (*v478 != v472)
                {
                  int v480 = 1;
                  while (v479 != -4096)
                  {
                    int v481 = v477 + v480++;
                    uint64_t v477 = v481 & (v476 - 1);
                    uint64_t v479 = *(void *)(v475 + 16 * v477);
                    if (v479 == v472)
                    {
                      uint64_t v478 = (uint64_t *)(v475 + 16 * v477);
                      goto LABEL_619;
                    }
                  }
LABEL_618:
                  uint64_t v478 = (uint64_t *)(v475 + 16 * v476);
                }
LABEL_619:
                uint64_t v482 = (void *)v478[1];
                uint64_t v485 = (const char *)*v482;
                int v484 = (const char *)(v482 + 2);
                uint64_t v483 = v485;
              }
              else
              {
                uint64_t v483 = 0;
                int v484 = &byte_1CFBCE98E;
              }
              uint64_t v1028 = v3;
              __int16 v1099 = 773;
              v1098[0] = v484;
              v1098[1] = v483;
              v1098[2] = ".pn";
              uint64_t v486 = operator new(0x48uLL);
              v486[1] = v473;
              uint64_t v487 = (llvm::Value *)(v486 + 1);
              *uint64_t v486 = 0;
              v486[2] = 0;
              v486[3] = 0x4000000000000053;
              *((_OWORD *)v486 + 2) = 0u;
              unsigned int v488 = (char *)(v486 + 4);
              *((_OWORD *)v486 + 3) = 0u;
              *((_DWORD *)v486 + 16) = 0;
              *((_DWORD *)v486 + 17) = v33;
              llvm::Value::setNameImpl((llvm::Value *)(v486 + 1), v1098);
              unsigned int v489 = (v486 + 8) >> 4;
              if (*((unsigned char *)v486 + 24))
              {
LABEL_621:
                uint64_t v490 = *((unsigned int *)v486 + 17);
                int64_t v491 = operator new(40 * v490);
                *uint64_t v486 = v491;
                if (v490)
                {
                  unint64_t v492 = &v491[4 * v490];
                  do
                  {
                    *int64_t v491 = 0;
                    v491[1] = 0;
                    v491[2] = 0;
                    v491[3] = v487;
                    v491 += 4;
                  }
                  while (v491 != v492);
                }
                uint64_t v3 = v1028;
                uint64_t v493 = *(void *)(v1028 + 40);
                v486[6] = v493;
                *(_WORD *)(v493 + 18) &= ~0x8000u;
                if ((*((unsigned char *)v486 + 31) & 0x10) != 0)
                {
                  uint64_t v534 = *(void *)(v493 + 56);
                  if (v534)
                  {
                    uint64_t v535 = *(llvm::ValueSymbolTable **)(v534 + 104);
                    if (v535) {
                      llvm::ValueSymbolTable::reinsertValue(v535, v487);
                    }
                  }
                }
                uint64_t v494 = *(void *)v1086;
                v486[4] = *(void *)v1086;
                v486[5] = v1086;
                *(void *)(v494 + 8) = v488;
                *(void *)int v1086 = v488;
                uint64_t v495 = *(void *)(*(void *)v1033 + 32);
                v1098[0] = (const char *)(v486 + 1);
                if (*(unsigned char *)(v495 + 2088))
                {
                  uint64_t v497 = v495 + 2096;
                  int v496 = 16;
LABEL_628:
                  int v498 = v496 - 1;
                  unsigned int v499 = v498 & (v489 ^ (v487 >> 9));
                  unsigned int v500 = (llvm::Value **)(v497 + 8 * v499);
                  unint64_t v501 = *v500;
                  if (v487 != *v500)
                  {
                    int v502 = 0;
                    int v503 = 1;
                    while (v501 != (llvm::Value *)-4096)
                    {
                      if (v502) {
                        BOOL v504 = 0;
                      }
                      else {
                        BOOL v504 = v501 == (llvm::Value *)-8192;
                      }
                      if (v504) {
                        int v502 = v500;
                      }
                      unsigned int v505 = v499 + v503++;
                      unsigned int v499 = v505 & v498;
                      unsigned int v500 = (llvm::Value **)(v497 + 8 * v499);
                      unint64_t v501 = *v500;
                      if (v487 == *v500) {
                        goto LABEL_643;
                      }
                    }
                    if (v502) {
                      unsigned int v506 = v502;
                    }
                    else {
                      unsigned int v506 = v500;
                    }
                    goto LABEL_641;
                  }
                }
                else
                {
                  int v496 = *(_DWORD *)(v495 + 2104);
                  if (v496)
                  {
                    uint64_t v497 = *(void *)(v495 + 2096);
                    goto LABEL_628;
                  }
                  unsigned int v506 = 0;
LABEL_641:
                  uint64_t v507 = (const char **)sub_1CBFD5BBC(v495 + 2088, (uint64_t)v1098, v1098, v506);
                  *uint64_t v507 = v1098[0];
                  unint64_t v508 = *(unsigned int *)(v495 + 2232);
                  if (v508 >= *(unsigned int *)(v495 + 2236)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(const char **)(*(void *)(v495 + 2224) + 8 * v508) = v1098[0];
                  ++*(_DWORD *)(v495 + 2232);
                }
LABEL_643:
                int v509 = *(_DWORD *)(v1028 + 20);
                if ((v509 & 0x40000000) != 0) {
                  uint64_t v510 = *(void *)(v1028 - 8);
                }
                else {
                  uint64_t v510 = v1028 - 32 * (v509 & 0x7FFFFFF);
                }
                uint64_t v511 = *(void *)(v510 + 32 * *(unsigned int *)(v1028 + 60));
                int v512 = *((_DWORD *)v486 + 7);
                uint64_t v513 = v512 & 0x7FFFFFF;
                if ((v512 & 0x7FFFFFF) == *((_DWORD *)v486 + 17))
                {
                  LODWORD(v525) = v513 + (v513 >> 1);
                  if (v525 <= 2) {
                    uint64_t v525 = 2;
                  }
                  else {
                    uint64_t v525 = v525;
                  }
                  uint64_t v1060 = v525;
                  *((_DWORD *)v486 + 17) = v525;
                  if ((v512 & 0x40000000) != 0) {
                    int v526 = (uint64_t *)*v486;
                  }
                  else {
                    int v526 = (uint64_t *)((char *)v487 - 32 * v513);
                  }
                  int v1071 = v526;
                  uint64_t v527 = operator new(40 * v525);
                  *uint64_t v486 = v527;
                  uint64_t v528 = v527;
                  do
                  {
                    *uint64_t v528 = 0;
                    v528[1] = 0;
                    v528[2] = 0;
                    v528[3] = v487;
                    v528 += 4;
                  }
                  while (v528 != &v527[4 * v1060]);
                  int v529 = *((_DWORD *)v486 + 7);
                  if ((v529 & 0x40000000) != 0) {
                    uint64_t v530 = (uint64_t)v527;
                  }
                  else {
                    uint64_t v530 = (uint64_t)v487 - 32 * (v529 & 0x7FFFFFF);
                  }
                  uint64_t v1052 = (char *)v530;
                  sub_1CC5E4108((uint64_t)v1098, v1071, &v1071[4 * v513], v530);
                  if (v513)
                  {
                    memmove(&v1052[32 * v1060], &v1071[4 * v513], 8 * v513);
                    uint64_t v531 = 4 * v513;
                    do
                    {
                      unsigned int v532 = &v1071[v531];
                      if (v1071[v531 - 4])
                      {
                        *(void *)*(v532 - 2) = *(v532 - 3);
                        uint64_t v533 = *(v532 - 3);
                        if (v533) {
                          *(void *)(v533 + 16) = *(v532 - 2);
                        }
                      }
                      v531 -= 4;
                    }
                    while (v531 * 8);
                  }
                  operator delete(v1071);
                  int v512 = *((_DWORD *)v486 + 7);
                  uint64_t v3 = v1028;
                }
                uint64_t v514 = (v512 + 1) & 0x7FFFFFF;
                *((_DWORD *)v486 + 7) = v512 & 0xF8000000 | (v512 + 1) & 0x7FFFFFF;
                if ((v512 & 0x40000000) != 0) {
                  BOOL v515 = (char *)*v486;
                }
                else {
                  BOOL v515 = (char *)v487 - 32 * v514;
                }
                uint64_t v516 = (v514 - 1);
                uint64_t v517 = &v515[32 * v516];
                if (*(void *)v517)
                {
                  **((void **)v517 + 2) = *((void *)v517 + 1);
                  uint64_t v524 = *((void *)v517 + 1);
                  if (v524) {
                    *(void *)(v524 + 16) = *((void *)v517 + 2);
                  }
                }
                *(void *)uint64_t v517 = v472;
                uint64_t v520 = *(void *)(v472 + 8);
                uint64_t v519 = (char **)(v472 + 8);
                uint64_t v518 = v520;
                *((void *)v517 + 1) = v520;
                if (v520) {
                  *(void *)(v518 + 16) = v517 + 8;
                }
                *(void *)&v515[32 * v516 + 16] = v519;
                *uint64_t v519 = v517;
                int v521 = *((_DWORD *)v486 + 7);
                uint64_t v522 = v521 & 0x7FFFFFF;
                if ((v521 & 0x40000000) != 0) {
                  int v523 = (char *)*v486;
                }
                else {
                  int v523 = (char *)v487 - 32 * v522;
                }
                v469 = v1078;
                *(void *)&v523[32 * *((unsigned int *)v486 + 17) + 8 * (v522 - 1)] = v511;
                *(void *)(v1100.__r_.__value_.__r.__words[0] + 8 * (void)v471) = v487;
                *((void *)v1101[0] + (void)v471) = v487;
                uint64_t v467 = v471 + 1;
                char v468 = 1;
                uint64_t v4 = *(void *)v1033;
                if (v1078 != v471) {
                  continue;
                }
LABEL_719:
                int v561 = *(_DWORD *)(v3 + 20);
                if ((v561 & 0x40000000) != 0)
                {
                  uint64_t v563 = *(void *)(v3 - 8);
                  uint64_t v564 = v563 + 32 * *(unsigned int *)(v3 + 60);
                  uint64_t v562 = v561 & 0x7FFFFFF;
                  uint64_t v565 = (void *)(v564 + 8 * v562);
                }
                else
                {
                  uint64_t v562 = v561 & 0x7FFFFFF;
                  uint64_t v563 = v3 - 32 * v562;
                  uint64_t v564 = v563 + 32 * *(unsigned int *)(v3 + 60);
                  uint64_t v565 = (void *)(v564 + 8 * v562);
                }
                int v587 = (void *)(v564 + 8);
                long long v588 = (void *)(v563 + 32 * v562);
                uint64_t v589 = (void *)(v563 + 32);
                int64_t v1039 = v588;
                if ((void *)(v564 + 8) != v565 && v589 != v588)
                {
                  int64_t v1035 = v565;
                  do
                  {
                    uint64_t v591 = LODWORD(v1100.__r_.__value_.__r.__words[1]);
                    if (LODWORD(v1100.__r_.__value_.__r.__words[1]))
                    {
                      uint64_t v592 = 0;
                      int v593 = (void *)*v587;
                      uint64_t v594 = *v589;
                      v1053 = v589;
                      uint64_t v1061 = v587;
                      __srcc = (void *)*v587;
                      do
                      {
                        uint64_t v595 = *(void *)(v1100.__r_.__value_.__r.__words[0] + 8 * v592);
                        if (v595)
                        {
                          uint64_t v596 = v3;
                          uint64_t v597 = *(void *)(v594 - 32 * (*(_DWORD *)(v594 + 20) & 0x7FFFFFF) + 32 * v592);
                          int v598 = *(_DWORD *)(v595 + 20);
                          uint64_t v599 = v598 & 0x7FFFFFF;
                          if ((v598 & 0x7FFFFFF) == *(_DWORD *)(v595 + 60))
                          {
                            unsigned int v612 = v599 + (v599 >> 1);
                            if (v612 <= 2) {
                              uint64_t v613 = 2;
                            }
                            else {
                              uint64_t v613 = v612;
                            }
                            *(_DWORD *)(v595 + 60) = v613;
                            if ((v598 & 0x40000000) != 0) {
                              BOOL v614 = *(uint64_t **)(v595 - 8);
                            }
                            else {
                              BOOL v614 = (uint64_t *)(v595 - 32 * v599);
                            }
                            __pc = v614;
                            uint64_t v615 = operator new(40 * v613);
                            *(void *)(v595 - 8) = v615;
                            v616 = v615;
                            do
                            {
                              void *v616 = 0;
                              v616[1] = 0;
                              v616[2] = 0;
                              v616[3] = v595;
                              v616 += 4;
                            }
                            while (v616 != &v615[4 * v613]);
                            int v617 = *(_DWORD *)(v595 + 20);
                            if ((v617 & 0x40000000) != 0) {
                              uint64_t v618 = (uint64_t)v615;
                            }
                            else {
                              uint64_t v618 = v595 - 32 * (v617 & 0x7FFFFFF);
                            }
                            int v1079 = (char *)v618;
                            sub_1CC5E4108((uint64_t)v1098, __pc, &__pc[4 * v599], v618);
                            if (v599)
                            {
                              memmove(&v1079[32 * v613], &__pc[4 * v599], 8 * v599);
                              uint64_t v619 = 4 * v599;
                              do
                              {
                                uint64_t v620 = &__pc[v619];
                                if (__pc[v619 - 4])
                                {
                                  *(void *)*(v620 - 2) = *(v620 - 3);
                                  uint64_t v621 = *(v620 - 3);
                                  if (v621) {
                                    *(void *)(v621 + 16) = *(v620 - 2);
                                  }
                                }
                                v619 -= 4;
                              }
                              while (v619 * 8);
                            }
                            operator delete(__pc);
                            int v598 = *(_DWORD *)(v595 + 20);
                            uint64_t v565 = v1035;
                            uint64_t v589 = v1053;
                            int v587 = v1061;
                            int v593 = __srcc;
                          }
                          uint64_t v600 = (v598 + 1) & 0x7FFFFFF;
                          *(_DWORD *)(v595 + 20) = v598 & 0xF8000000 | (v598 + 1) & 0x7FFFFFF;
                          uint64_t v3 = v596;
                          if ((v598 & 0x40000000) != 0) {
                            uint64_t v601 = *(void *)(v595 - 8);
                          }
                          else {
                            uint64_t v601 = v595 - 32 * v600;
                          }
                          uint64_t v602 = (v600 - 1);
                          uint64_t v603 = v601 + 32 * v602;
                          if (*(void *)v603)
                          {
                            **(void **)(v603 + 16) = *(void *)(v603 + 8);
                            uint64_t v611 = *(void *)(v603 + 8);
                            if (v611) {
                              *(void *)(v611 + 16) = *(void *)(v603 + 16);
                            }
                          }
                          *(void *)uint64_t v603 = v597;
                          if (v597)
                          {
                            uint64_t v606 = *(void *)(v597 + 8);
                            uint64_t v605 = (void *)(v597 + 8);
                            uint64_t v604 = v606;
                            uint64_t v607 = v601 + 32 * v602;
                            *(void *)(v607 + 8) = v606;
                            if (v606) {
                              *(void *)(v604 + 16) = v607 + 8;
                            }
                            *(void *)(v607 + 16) = v605;
                            void *v605 = v603;
                          }
                          int v608 = *(_DWORD *)(v595 + 20);
                          uint64_t v609 = v608 & 0x7FFFFFF;
                          if ((v608 & 0x40000000) != 0) {
                            uint64_t v610 = *(void *)(v595 - 8);
                          }
                          else {
                            uint64_t v610 = v595 - 32 * v609;
                          }
                          *(void *)(v610 + 32 * *(unsigned int *)(v595 + 60) + 8 * (v609 - 1)) = v593;
                        }
                        ++v592;
                      }
                      while (v592 != v591);
                    }
                    if (++v587 == v565) {
                      break;
                    }
                    v589 += 4;
                  }
                  while (v589 != v1039);
                }
LABEL_827:
                uint64_t v622 = v3;
                int v623 = (uint64_t *)((char *)v1101[0] + 8);
                int64_t v624 = *(uint64_t **)v1101[0];
                uint64_t v625 = *(void *)(v29 + 64);
                uint64_t v626 = LODWORD(v1101[1]) - 1;
                uint64_t v627 = LODWORD(v1101[1]);
                BOOL v628 = LODWORD(v1101[1]) == 0;
                __int16 v1099 = 257;
                int v629 = (char *)operator new(32 * LODWORD(v1101[1]) + 80);
                uint64_t v38 = &v629[32 * v627];
                *((_DWORD *)v38 + 5) = *((_DWORD *)v38 + 5) & 0x38000000 | v627 & 0x7FFFFFF;
                if (!v628)
                {
                  do
                  {
                    *(void *)int v629 = 0;
                    *((void *)v629 + 1) = 0;
                    *((void *)v629 + 2) = 0;
                    *((void *)v629 + 3) = v38;
                    v629 += 32;
                  }
                  while (v629 != v38);
                }
                sub_1CB845A7C(v625, v624, (uint64_t)v623, v626);
                *(void *)uint64_t v38 = v630;
                *((void *)v38 + 1) = 0;
                int v631 = *((_DWORD *)v38 + 5) & 0xC0000000 | v627 & 0x7FFFFFF;
                *((_DWORD *)v38 + 4) = 62;
                *((_DWORD *)v38 + 5) = v631;
                *(_OWORD *)(v38 + 24) = 0u;
                *(_OWORD *)(v38 + 40) = 0u;
                *((_DWORD *)v38 + 14) = 0;
                *((void *)v38 + 8) = v625;
                *((void *)v38 + 9) = llvm::GetElementPtrInst::getIndexedType(v625, (uint64_t)v623, v626);
                llvm::GetElementPtrInst::init((uint64_t ***)v38, (uint64_t **)v624, v623, v626, v1098);
                if (v1023) {
                  v38[17] |= 2u;
                }
                sub_1CCA8E8DC((unsigned __int8 **)v38, v622);
                if ((std::string::size_type *)v1100.__r_.__value_.__l.__data_ != &v1100.__r_.__value_.__r.__words[2]) {
                  free(v1100.__r_.__value_.__l.__data_);
                }
                goto LABEL_59;
              }
              break;
            }
            if ((*((unsigned char *)v486 + 31) & 0x10) == 0) {
              goto LABEL_696;
            }
            uint64_t v536 = ***(void ***)v487;
            uint64_t v537 = *(void *)(v536 + 152);
            uint64_t v538 = *(unsigned int *)(v536 + 168);
            if (!v538) {
              goto LABEL_688;
            }
            LODWORD(v539) = (v538 - 1) & (v489 ^ (v487 >> 9));
            int v540 = (llvm::Value **)(v537 + 16 * v539);
            uint64_t v541 = *v540;
            if (*v540 != v487)
            {
              int v542 = 1;
              while (v541 != (llvm::Value *)-4096)
              {
                int v543 = v539 + v542++;
                uint64_t v539 = v543 & (v538 - 1);
                uint64_t v541 = *(llvm::Value **)(v537 + 16 * v539);
                if (v541 == v487)
                {
                  int v540 = (llvm::Value **)(v537 + 16 * v539);
                  goto LABEL_689;
                }
              }
LABEL_688:
              int v540 = (llvm::Value **)(v537 + 16 * v538);
            }
LABEL_689:
            char v544 = v540[1];
            unint64_t v547 = *(void *)v544;
            uint64_t v545 = (char *)v544 + 16;
            unint64_t v546 = v547;
            if (v547 >= 5
              && (*(_DWORD *)v545 == *(_DWORD *)"llvm." ? (BOOL v548 = v545[4] == aLlvm_1[4]) : (BOOL v548 = 0), v548))
            {
              *((_DWORD *)v486 + 10) |= 0x2000u;
              int v549 = llvm::Function::lookupIntrinsicID(v545, v546);
            }
            else
            {
LABEL_696:
              int v549 = 0;
              *((_DWORD *)v486 + 10) &= ~0x2000u;
            }
            *((_DWORD *)v486 + 11) = v549;
            goto LABEL_621;
          }
        }
        while (*(void *)(v50 + 24) == *(void *)(v49 + 24))
        {
          uint64_t v49 = *(void *)(v49 + 8);
          uint64_t v50 = *(void *)(v50 + 8);
          if (!v50) {
            goto LABEL_68;
          }
        }
      }
LABEL_58:
      uint64_t v38 = 0;
LABEL_59:
      if (v1101[0] != &v1102) {
        free(v1101[0]);
      }
      return v38;
    }
LABEL_23:
    if ((v15 - 66) > 0xC)
    {
      unsigned int v24 = v15 - 41;
      unsigned int v25 = v15 - 81;
      BOOL v26 = v24 >= 0x12 && v25 > 1;
      if (v26) {
        return 0;
      }
      int v27 = *((_DWORD *)v14 + 5);
      if ((v27 & 0x40000000) != 0) {
        uint64_t v28 = (char *)*((void *)v14 - 1);
      }
      else {
        uint64_t v28 = (char *)v14 - 32 * (v27 & 0x7FFFFFF);
      }
      int v85 = (unsigned __int8 *)*((void *)v28 + 4);
      if (v85) {
        BOOL v89 = v85[16] >= 0x15u;
      }
      else {
        BOOL v89 = 1;
      }
      if (v89)
      {
        if ((v12 & 0x40000000) != 0) {
          uint64_t v92 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v92 = a2 - 32 * (v12 & 0x7FFFFFF);
        }
        uint64_t v122 = *(void *)v92;
        int v123 = *(_DWORD *)(*(void *)v92 + 20);
        if ((v123 & 0x40000000) != 0) {
          uint64_t v124 = *(void *)(v122 - 8);
        }
        else {
          uint64_t v124 = v122 - 32 * (v123 & 0x7FFFFFF);
        }
        int v125 = *(llvm::Value **)v124;
        uint64_t v126 = *(void *)(v124 + 32);
        if ((v12 & 0x40000000) != 0)
        {
          uint64_t v128 = *(void *)(a2 - 8);
          uint64_t v127 = v12 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v127 = v12 & 0x7FFFFFF;
          uint64_t v128 = a2 - 32 * v127;
        }
        if (v127 == 1)
        {
LABEL_206:
          int v129 = *(unsigned __int8 *)(v122 + 16);
          int v130 = v129 - 28;
          if (v122 && (v129 - 83) >= 0xFFFFFFFE)
          {
            __int16 v131 = *(_WORD *)(v122 + 18) & 0x3F;
            LOWORD(v1103) = 257;
            uint64_t v38 = llvm::CmpInst::Create(v130, v131, v125, v126, (const char **)v1101, 0);
          }
          else
          {
            LOWORD(v1103) = 257;
            uint64_t v346 = llvm::BinaryOperator::Create(v130, v125, v126, (const char **)v1101, 0);
            uint64_t v38 = (char *)v346;
            int v347 = *(_DWORD *)(a2 + 20);
            if ((v347 & 0x40000000) != 0) {
              int v348 = *(uint64_t **)(a2 - 8);
            }
            else {
              int v348 = (uint64_t *)(a2 - 32 * (v347 & 0x7FFFFFF));
            }
            llvm::Instruction::copyIRFlags((uint64_t)v346, *v348, 1);
            int v361 = *(_DWORD *)(a2 + 20);
            if ((v361 & 0x40000000) != 0)
            {
              uint64_t v363 = *(void *)(a2 - 8);
              uint64_t v362 = v361 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v362 = v361 & 0x7FFFFFF;
              uint64_t v363 = a2 - 32 * v362;
            }
            if (v362 != 1)
            {
              unsigned int v364 = (uint64_t *)(v363 + 32);
              uint64_t v365 = 32 * v362 - 32;
              do
              {
                uint64_t v366 = *v364;
                v364 += 4;
                llvm::Instruction::andIRFlags((uint64_t)v38, v366);
                v365 -= 32;
              }
              while (v365);
            }
          }
          uint64_t v225 = (unsigned __int8 **)v38;
          uint64_t v367 = a2;
          goto LABEL_497;
        }
        uint64_t v132 = *(void *)v125;
        uint64_t v133 = *(void *)v126;
        int v134 = *(unsigned __int8 *)(v122 + 16);
        uint64_t v135 = v128 + 32 * v127;
        uint64_t v136 = (uint64_t *)(v128 + 32);
        while (1)
        {
          uint64_t v137 = *v136;
          unsigned int v138 = *(unsigned __int8 *)(*v136 + 16);
          if (*v136) {
            BOOL v139 = v138 >= 0x1C;
          }
          else {
            BOOL v139 = 0;
          }
          if (!v139 || v138 != v134) {
            return 0;
          }
          uint64_t v141 = *(void *)(v137 + 8);
          if (!v141) {
            return 0;
          }
          int v142 = (char *)v126;
          uint64_t v143 = v125;
          uint64_t v144 = *(void *)(v141 + 8);
          if (v144) {
            break;
          }
LABEL_222:
          int v145 = *(_DWORD *)(v137 + 20);
          if ((v145 & 0x40000000) != 0) {
            uint64_t v146 = *(void ***)(v137 - 8);
          }
          else {
            uint64_t v146 = (void **)(v137 - 32 * (v145 & 0x7FFFFFF));
          }
          if (**v146 != v132
            || *v146[4] != v133
            || (v134 - 83) >= 0xFFFFFFFE && ((*(_WORD *)(v122 + 18) ^ *(_WORD *)(v137 + 18)) & 0x3F) != 0)
          {
            return 0;
          }
          if ((v145 & 0x40000000) != 0) {
            uint64_t v147 = *(llvm::Value ***)(v137 - 8);
          }
          else {
            uint64_t v147 = (llvm::Value **)(v137 - 32 * (v145 & 0x7FFFFFF));
          }
          if (*v147 != v125) {
            int v125 = 0;
          }
          if (v147[4] != (llvm::Value *)v126) {
            uint64_t v126 = 0;
          }
          v136 += 4;
          if (v136 == (uint64_t *)v135)
          {
            if (!((unint64_t)v125 | v126)) {
              return 0;
            }
            if ((v123 & 0x40000000) != 0) {
              int v148 = *(void **)(v122 - 8);
            }
            else {
              int v148 = (void *)(v122 - 32 * (v123 & 0x7FFFFFF));
            }
            int64_t v1080 = (void *)v148[4];
            if (v125)
            {
              if (!v126)
              {
                unint64_t v1087 = 0;
                goto LABEL_1096;
              }
LABEL_1153:
              uint64_t v126 = (uint64_t)v142;
              int v125 = v143;
              goto LABEL_206;
            }
            __pd = (void ***)*v148;
            int v649 = v12 & 0x7FFFFFF;
            if ((*(unsigned char *)(*v148 + 23) & 0x10) != 0)
            {
              uint64_t v650 = ***__pd;
              uint64_t v651 = *(void *)(v650 + 152);
              uint64_t v652 = *(unsigned int *)(v650 + 168);
              if (!v652) {
                goto LABEL_1055;
              }
              LODWORD(v653) = (v652 - 1) & ((__pd >> 4) ^ (__pd >> 9));
              uint64_t v654 = (void **)(v651 + 16 * v653);
              int v655 = (void ***)*v654;
              if (*v654 != __pd)
              {
                int v656 = 1;
                while (v655 != (void ***)-4096)
                {
                  int v657 = v653 + v656++;
                  uint64_t v653 = v657 & (v652 - 1);
                  int v655 = *(void ****)(v651 + 16 * v653);
                  if (v655 == __pd)
                  {
                    uint64_t v654 = (void **)(v651 + 16 * v653);
                    goto LABEL_1056;
                  }
                }
LABEL_1055:
                uint64_t v654 = (void **)(v651 + 16 * v652);
              }
LABEL_1056:
              uint64_t v799 = v654[1];
              uint64_t v802 = (void *)*v799;
              v800 = (char *)(v799 + 2);
              v801 = v802;
            }
            else
            {
              v801 = 0;
              v800 = &byte_1CFBCE98E;
            }
            LOWORD(v1103) = 773;
            v1101[0] = v800;
            v1101[1] = v801;
            *(void *)&long long v1102 = ".pn";
            v803 = operator new(0x48uLL);
            v803[1] = v132;
            uint64_t v143 = (llvm::Value *)(v803 + 1);
            void *v803 = 0;
            v803[2] = 0;
            v803[3] = 0x4000000000000053;
            *((_OWORD *)v803 + 2) = 0u;
            int64_t v1072 = (llvm::Value *)(v803 + 4);
            *((_OWORD *)v803 + 3) = 0u;
            *((_DWORD *)v803 + 16) = 0;
            *((_DWORD *)v803 + 17) = v649;
            llvm::Value::setNameImpl((llvm::Value *)(v803 + 1), (const char **)v1101);
            unsigned int v1088 = (v803 + 8) >> 4;
            if (*((unsigned char *)v803 + 24))
            {
LABEL_1058:
              uint64_t v804 = *((unsigned int *)v803 + 17);
              uint64_t v805 = operator new(40 * v804);
              void *v803 = v805;
              if (v804)
              {
                uint64_t v806 = v805;
                do
                {
                  *uint64_t v806 = 0;
                  v806[1] = 0;
                  v806[2] = 0;
                  v806[3] = v143;
                  v806 += 4;
                }
                while (v806 != &v805[4 * v804]);
              }
              int v807 = *(_DWORD *)(a2 + 20);
              if ((v807 & 0x40000000) != 0) {
                uint64_t v808 = *(void *)(a2 - 8);
              }
              else {
                uint64_t v808 = a2 - 32 * (v807 & 0x7FFFFFF);
              }
              int v1063 = *(void **)(v808 + 32 * *(unsigned int *)(a2 + 60));
              int v809 = *((_DWORD *)v803 + 7);
              uint64_t v810 = v809 & 0x7FFFFFF;
              if ((v809 & 0x7FFFFFF) == *((_DWORD *)v803 + 17))
              {
                unsigned int v964 = v810 + (v810 >> 1);
                if (v964 <= 2) {
                  uint64_t v965 = 2;
                }
                else {
                  uint64_t v965 = v964;
                }
                *((_DWORD *)v803 + 17) = v965;
                int v966 = (uint64_t *)((char *)v143 - 32 * v810);
                if ((v809 & 0x40000000) != 0) {
                  int v966 = v805;
                }
                uint64_t v1056 = v966;
                int v967 = operator new(40 * v965);
                void *v803 = v967;
                v968 = v967;
                do
                {
                  void *v968 = 0;
                  v968[1] = 0;
                  v968[2] = 0;
                  v968[3] = v143;
                  v968 += 4;
                }
                while (v968 != &v967[4 * v965]);
                int v969 = *((_DWORD *)v803 + 7);
                if ((v969 & 0x40000000) != 0) {
                  uint64_t v970 = (uint64_t)v967;
                }
                else {
                  uint64_t v970 = (uint64_t)v143 - 32 * (v969 & 0x7FFFFFF);
                }
                uint64_t v1042 = v970;
                sub_1CC5E4108((uint64_t)v1101, v1056, &v1056[4 * v810], v970);
                if (v810)
                {
                  memmove((void *)(v1042 + 32 * v965), &v1056[4 * v810], 8 * v810);
                  uint64_t v971 = 4 * v810;
                  do
                  {
                    uint64_t v972 = &v1056[v971];
                    if (v1056[v971 - 4])
                    {
                      *(void *)*(v972 - 2) = *(v972 - 3);
                      uint64_t v973 = *(v972 - 3);
                      if (v973) {
                        *(void *)(v973 + 16) = *(v972 - 2);
                      }
                    }
                    v971 -= 4;
                  }
                  while (v971 * 8);
                }
                operator delete(v1056);
                int v809 = *((_DWORD *)v803 + 7);
              }
              uint64_t v811 = (v809 + 1) & 0x7FFFFFF;
              *((_DWORD *)v803 + 7) = v809 & 0xF8000000 | (v809 + 1) & 0x7FFFFFF;
              uint64_t v812 = (v811 - 1);
              if ((v809 & 0x40000000) != 0) {
                v813 = (char *)*v803;
              }
              else {
                v813 = (char *)v143 - 32 * v811;
              }
              uint64_t v814 = &v813[32 * v812];
              if (*(void *)v814)
              {
                **((void **)v814 + 2) = *((void *)v814 + 1);
                uint64_t v962 = *((void *)v814 + 1);
                if (v962) {
                  *(void *)(v962 + 16) = *((void *)v814 + 2);
                }
              }
              *(void *)uint64_t v814 = __pd;
              if (__pd)
              {
                v815 = __pd[1];
                __pg = (char **)(__pd + 1);
                uint64_t v816 = &v813[32 * v812];
                *((void *)v816 + 1) = v815;
                if (v815) {
                  v815[2] = v816 + 8;
                }
                *((void *)v816 + 2) = __pg;
                *__pg = v814;
              }
              int v817 = *((_DWORD *)v803 + 7);
              uint64_t v818 = v817 & 0x7FFFFFF;
              if ((v817 & 0x40000000) != 0) {
                unsigned int v819 = (char *)*v803;
              }
              else {
                unsigned int v819 = (char *)v143 - 32 * v818;
              }
              *(void *)&v819[32 * *((unsigned int *)v803 + 17) + 8 * (v818 - 1)] = v1063;
              uint64_t v820 = *(void *)(a2 + 40);
              v821 = (llvm::Value **)(a2 + 24);
              v803[6] = v820;
              *(_WORD *)(v820 + 18) &= ~0x8000u;
              if ((*((unsigned char *)v803 + 31) & 0x10) != 0)
              {
                uint64_t v984 = *(void *)(v820 + 56);
                if (v984)
                {
                  int v985 = *(llvm::ValueSymbolTable **)(v984 + 104);
                  if (v985) {
                    llvm::ValueSymbolTable::reinsertValue(v985, v143);
                  }
                }
              }
              v822 = *v821;
              v803[4] = *v821;
              v803[5] = v821;
              *((void *)v822 + 1) = v1072;
              _DWORD *v821 = v1072;
              uint64_t v823 = *(void *)(a1 + 32);
              v1101[0] = v803 + 1;
              if (*(unsigned char *)(v823 + 2088))
              {
                uint64_t v825 = v823 + 2096;
                int v824 = 16;
LABEL_1078:
                int v826 = v824 - 1;
                unsigned int v827 = v826 & (v1088 ^ (v143 >> 9));
                uint64_t v828 = (llvm::Value **)(v825 + 8 * v827);
                uint64_t v829 = *v828;
                if (v143 != *v828)
                {
                  uint64_t v830 = 0;
                  int v831 = 1;
                  while (v829 != (llvm::Value *)-4096)
                  {
                    if (v830) {
                      BOOL v832 = 0;
                    }
                    else {
                      BOOL v832 = v829 == (llvm::Value *)-8192;
                    }
                    if (v832) {
                      uint64_t v830 = v828;
                    }
                    unsigned int v833 = v827 + v831++;
                    unsigned int v827 = v833 & v826;
                    uint64_t v828 = (llvm::Value **)(v825 + 8 * v827);
                    uint64_t v829 = *v828;
                    if (v143 == *v828) {
                      goto LABEL_1093;
                    }
                  }
                  if (v830) {
                    unint64_t v834 = v830;
                  }
                  else {
                    unint64_t v834 = v828;
                  }
                  goto LABEL_1091;
                }
              }
              else
              {
                int v824 = *(_DWORD *)(v823 + 2104);
                if (v824)
                {
                  uint64_t v825 = *(void *)(v823 + 2096);
                  goto LABEL_1078;
                }
                unint64_t v834 = 0;
LABEL_1091:
                int v835 = (void **)sub_1CBFD5BBC(v823 + 2088, (uint64_t)v1101, v1101, v834);
                *int v835 = v1101[0];
                unsigned int v836 = *(_DWORD *)(v823 + 2232);
                if (v836 >= *(_DWORD *)(v823 + 2236)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void **)(*(void *)(v823 + 2224) + 8 * v836) = v1101[0];
                ++*(_DWORD *)(v823 + 2232);
              }
LABEL_1093:
              if (v126)
              {
                unint64_t v1087 = (llvm::Value *)(v803 + 1);
                __ph = 0;
                goto LABEL_1145;
              }
              int v12 = *(_DWORD *)(a2 + 20);
              int v123 = *(_DWORD *)(v122 + 20);
              unint64_t v1087 = (llvm::Value *)(v803 + 1);
LABEL_1096:
              int v837 = v12 & 0x7FFFFFF;
              if ((v123 & 0x40000000) != 0) {
                uint64_t v838 = *(void *)(v122 - 8);
              }
              else {
                uint64_t v838 = v122 - 32 * (v123 & 0x7FFFFFF);
              }
              uint64_t v839 = *(uint64_t ****)(v838 + 32);
              if ((*((unsigned char *)v839 + 23) & 0x10) != 0)
              {
                uint64_t v840 = ***v839;
                uint64_t v841 = *(void *)(v840 + 152);
                uint64_t v842 = *(unsigned int *)(v840 + 168);
                if (!v842) {
                  goto LABEL_1106;
                }
                LODWORD(v843) = (v842 - 1) & ((v839 >> 4) ^ (v839 >> 9));
                unint64_t v844 = (uint64_t ****)(v841 + 16 * v843);
                int v845 = *v844;
                if (*v844 != v839)
                {
                  int v846 = 1;
                  while (v845 != (uint64_t ***)-4096)
                  {
                    int v847 = v843 + v846++;
                    uint64_t v843 = v847 & (v842 - 1);
                    int v845 = *(uint64_t ****)(v841 + 16 * v843);
                    if (v845 == v839)
                    {
                      unint64_t v844 = (uint64_t ****)(v841 + 16 * v843);
                      goto LABEL_1107;
                    }
                  }
LABEL_1106:
                  unint64_t v844 = (uint64_t ****)(v841 + 16 * v842);
                }
LABEL_1107:
                int v848 = v844[1];
                uint64_t v851 = *v848;
                uint64_t v849 = (char *)(v848 + 2);
                int v850 = v851;
              }
              else
              {
                int v850 = 0;
                uint64_t v849 = &byte_1CFBCE98E;
              }
              LOWORD(v1103) = 773;
              v1101[0] = v849;
              v1101[1] = v850;
              *(void *)&long long v1102 = ".pn";
              int64_t v852 = operator new(0x48uLL);
              v852[1] = v133;
              *int64_t v852 = 0;
              v852[2] = 0;
              v852[3] = 0x4000000000000053;
              *((_OWORD *)v852 + 2) = 0u;
              uint64_t v853 = (char *)(v852 + 4);
              *((_OWORD *)v852 + 3) = 0u;
              *((_DWORD *)v852 + 16) = 0;
              *((_DWORD *)v852 + 17) = v837;
              llvm::Value::setNameImpl((llvm::Value *)(v852 + 1), (const char **)v1101);
              __ph = (llvm::Value *)(v852 + 1);
              unsigned int v1073 = (v852 + 8) >> 4;
              if (*((unsigned char *)v852 + 24))
              {
LABEL_1109:
                uint64_t v854 = *((unsigned int *)v852 + 17);
                int v855 = operator new(40 * v854);
                *int64_t v852 = v855;
                if (v854)
                {
                  v856 = v855;
                  do
                  {
                    void *v856 = 0;
                    v856[1] = 0;
                    v856[2] = 0;
                    v856[3] = __ph;
                    v856 += 4;
                  }
                  while (v856 != &v855[4 * v854]);
                }
                int v857 = *(_DWORD *)(a2 + 20);
                if ((v857 & 0x40000000) != 0) {
                  uint64_t v858 = *(void *)(a2 - 8);
                }
                else {
                  uint64_t v858 = a2 - 32 * (v857 & 0x7FFFFFF);
                }
                uint64_t v859 = *(void *)(v858 + 32 * *(unsigned int *)(a2 + 60));
                int v860 = *((_DWORD *)v852 + 7);
                uint64_t v861 = v860 & 0x7FFFFFF;
                if ((v860 & 0x7FFFFFF) == *((_DWORD *)v852 + 17))
                {
                  unsigned int v974 = v861 + (v861 >> 1);
                  if (v974 <= 2) {
                    uint64_t v975 = 2;
                  }
                  else {
                    uint64_t v975 = v974;
                  }
                  *((_DWORD *)v852 + 17) = v975;
                  __int16 v976 = (uint64_t *)((char *)__ph - 32 * v861);
                  if ((v860 & 0x40000000) != 0) {
                    __int16 v976 = v855;
                  }
                  v1066 = v976;
                  v977 = operator new(40 * v975);
                  *int64_t v852 = v977;
                  uint64_t v978 = v977;
                  do
                  {
                    *uint64_t v978 = 0;
                    v978[1] = 0;
                    v978[2] = 0;
                    v978[3] = __ph;
                    v978 += 4;
                  }
                  while (v978 != &v977[4 * v975]);
                  int v979 = *((_DWORD *)v852 + 7);
                  if ((v979 & 0x40000000) != 0) {
                    uint64_t v980 = (uint64_t)v977;
                  }
                  else {
                    uint64_t v980 = (uint64_t)__ph - 32 * (v979 & 0x7FFFFFF);
                  }
                  BOOL v1057 = (char *)v980;
                  sub_1CC5E4108((uint64_t)v1101, v1066, &v1066[4 * v861], v980);
                  if (v861)
                  {
                    memmove(&v1057[32 * v975], &v1066[4 * v861], 8 * v861);
                    uint64_t v981 = 4 * v861;
                    do
                    {
                      unint64_t v982 = &v1066[v981];
                      if (v1066[v981 - 4])
                      {
                        *(void *)*(v982 - 2) = *(v982 - 3);
                        uint64_t v983 = *(v982 - 3);
                        if (v983) {
                          *(void *)(v983 + 16) = *(v982 - 2);
                        }
                      }
                      v981 -= 4;
                    }
                    while (v981 * 8);
                  }
                  operator delete(v1066);
                  int v860 = *((_DWORD *)v852 + 7);
                }
                uint64_t v862 = (v860 + 1) & 0x7FFFFFF;
                *((_DWORD *)v852 + 7) = v860 & 0xF8000000 | (v860 + 1) & 0x7FFFFFF;
                uint64_t v863 = (v862 - 1);
                if ((v860 & 0x40000000) != 0) {
                  uint64_t v864 = (_DWORD *)*v852;
                }
                else {
                  uint64_t v864 = (_DWORD *)((char *)__ph - 32 * v862);
                }
                unsigned int v865 = &v864[8 * v863];
                if (*(void *)v865)
                {
                  **((void **)v865 + 2) = *((void *)v865 + 1);
                  uint64_t v963 = *((void *)v865 + 1);
                  if (v963) {
                    *(void *)(v963 + 16) = *((void *)v865 + 2);
                  }
                }
                *(void *)unsigned int v865 = v1080;
                if (v1080)
                {
                  uint64_t v866 = v1080[1];
                  int v1082 = v1080 + 1;
                  int v867 = &v864[8 * v863];
                  *((void *)v867 + 1) = v866;
                  if (v866) {
                    *(void *)(v866 + 16) = v867 + 2;
                  }
                  *((void *)v867 + 2) = v1082;
                  void *v1082 = v865;
                }
                int v868 = *((_DWORD *)v852 + 7);
                uint64_t v869 = v868 & 0x7FFFFFF;
                if ((v868 & 0x40000000) != 0) {
                  int v870 = (_DWORD *)*v852;
                }
                else {
                  int v870 = (_DWORD *)((char *)__ph - 32 * v869);
                }
                *(void *)&v870[8 * *((unsigned int *)v852 + 17) + 2 * (v869 - 1)] = v859;
                uint64_t v871 = *(void *)(a2 + 40);
                unint64_t v872 = (uint64_t *)(a2 + 24);
                v852[6] = v871;
                *(_WORD *)(v871 + 18) &= ~0x8000u;
                if ((*((unsigned char *)v852 + 31) & 0x10) != 0)
                {
                  uint64_t v986 = *(void *)(v871 + 56);
                  if (v986)
                  {
                    unint64_t v987 = *(llvm::ValueSymbolTable **)(v986 + 104);
                    if (v987) {
                      llvm::ValueSymbolTable::reinsertValue(v987, __ph);
                    }
                  }
                }
                uint64_t v873 = *v872;
                v852[4] = *v872;
                v852[5] = v872;
                *(void *)(v873 + 8) = v853;
                *unint64_t v872 = (uint64_t)v853;
                uint64_t v874 = *(void *)(a1 + 32);
                v1101[0] = v852 + 1;
                if (*(unsigned char *)(v874 + 2088))
                {
                  uint64_t v876 = v874 + 2096;
                  int v875 = 16;
LABEL_1129:
                  int v877 = v875 - 1;
                  unsigned int v878 = v877 & (v1073 ^ (__ph >> 9));
                  uint64_t v879 = (void *)(v876 + 8 * v878);
                  unsigned int v880 = (_DWORD *)*v879;
                  if (__ph != (llvm::Value *)*v879)
                  {
                    v881 = 0;
                    int v882 = 1;
                    while (v880 != (_DWORD *)-4096)
                    {
                      if (v881) {
                        BOOL v883 = 0;
                      }
                      else {
                        BOOL v883 = v880 == (_DWORD *)-8192;
                      }
                      if (v883) {
                        v881 = v879;
                      }
                      unsigned int v884 = v878 + v882++;
                      unsigned int v878 = v884 & v877;
                      uint64_t v879 = (void *)(v876 + 8 * v878);
                      unsigned int v880 = (_DWORD *)*v879;
                      if (__ph == (llvm::Value *)*v879) {
                        goto LABEL_1144;
                      }
                    }
                    if (v881) {
                      unsigned int v885 = v881;
                    }
                    else {
                      unsigned int v885 = v879;
                    }
                    goto LABEL_1142;
                  }
                }
                else
                {
                  int v875 = *(_DWORD *)(v874 + 2104);
                  if (v875)
                  {
                    uint64_t v876 = *(void *)(v874 + 2096);
                    goto LABEL_1129;
                  }
                  unsigned int v885 = 0;
LABEL_1142:
                  int v886 = (void **)sub_1CBFD5BBC(v874 + 2088, (uint64_t)v1101, v1101, v885);
                  *int v886 = v1101[0];
                  unsigned int v887 = *(_DWORD *)(v874 + 2232);
                  if (v887 >= *(_DWORD *)(v874 + 2236)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void **)(*(void *)(v874 + 2224) + 8 * v887) = v1101[0];
                  ++*(_DWORD *)(v874 + 2232);
                }
LABEL_1144:
                int v142 = (char *)(v852 + 1);
LABEL_1145:
                int v888 = *(_DWORD *)(a2 + 20);
                if ((v888 & 0x40000000) != 0)
                {
                  uint64_t v890 = *(void *)(a2 - 8);
                  uint64_t v891 = v890 + 32 * *(unsigned int *)(a2 + 60);
                  uint64_t v889 = v888 & 0x7FFFFFF;
                  int v892 = (void **)(v891 + 8 * v889);
                }
                else
                {
                  uint64_t v889 = v888 & 0x7FFFFFF;
                  uint64_t v890 = a2 - 32 * v889;
                  uint64_t v891 = v890 + 32 * *(unsigned int *)(a2 + 60);
                  int v892 = (void **)(v891 + 8 * v889);
                }
                int v1083 = v892;
                uint8x8_t v893 = (void **)(v891 + 8);
                int v894 = (uint64_t *)(v890 + 32 * v889);
                uint64_t v895 = (uint64_t *)(v890 + 32);
                uint64_t v1055 = v894;
                if ((void **)(v891 + 8) != v892 && v895 != v894)
                {
                  __int16 v898 = v892;
                  v897 = v1087;
                  uint64_t v899 = v894;
                  int v900 = __ph;
                  do
                  {
                    v901 = *v893;
                    uint64_t v902 = *v895;
                    if (v897)
                    {
                      int v903 = *(_DWORD *)(v902 + 20);
                      if ((v903 & 0x40000000) != 0) {
                        int v904 = *(uint64_t **)(v902 - 8);
                      }
                      else {
                        int v904 = (uint64_t *)(v902 - 32 * (v903 & 0x7FFFFFF));
                      }
                      uint64_t v905 = *v904;
                      int v906 = *((_DWORD *)v897 + 5);
                      uint64_t v907 = v906 & 0x7FFFFFF;
                      if ((v906 & 0x7FFFFFF) == *((_DWORD *)v897 + 15))
                      {
                        uint64_t v1064 = *v893;
                        LODWORD(v937) = v907 + (v907 >> 1);
                        if (v937 <= 2) {
                          uint64_t v937 = 2;
                        }
                        else {
                          uint64_t v937 = v937;
                        }
                        uint64_t __srce = v937;
                        *((_DWORD *)v897 + 15) = v937;
                        if ((v906 & 0x40000000) != 0) {
                          v938 = (uint64_t *)*((void *)v1087 - 1);
                        }
                        else {
                          v938 = (uint64_t *)((char *)v1087 - 32 * v907);
                        }
                        int v1074 = v938;
                        int v939 = operator new(40 * v937);
                        *((void *)v1087 - 1) = v939;
                        uint64_t v940 = v939;
                        do
                        {
                          *uint64_t v940 = 0;
                          v940[1] = 0;
                          v940[2] = 0;
                          v940[3] = v1087;
                          v940 += 4;
                        }
                        while (v940 != &v939[4 * __srce]);
                        int v941 = *((_DWORD *)v1087 + 5);
                        if ((v941 & 0x40000000) != 0) {
                          uint64_t v942 = (uint64_t)v939;
                        }
                        else {
                          uint64_t v942 = (uint64_t)v1087 - 32 * (v941 & 0x7FFFFFF);
                        }
                        uint64_t v1041 = v942;
                        sub_1CC5E4108((uint64_t)v1101, v1074, &v1074[4 * v907], v942);
                        if (v907)
                        {
                          memmove((void *)(v1041 + 32 * __srce), &v1074[4 * v907], 8 * v907);
                          uint64_t v943 = 4 * v907;
                          do
                          {
                            uint64_t v944 = &v1074[v943];
                            if (v1074[v943 - 4])
                            {
                              *(void *)*(v944 - 2) = *(v944 - 3);
                              uint64_t v945 = *(v944 - 3);
                              if (v945) {
                                *(void *)(v945 + 16) = *(v944 - 2);
                              }
                            }
                            v943 -= 4;
                          }
                          while (v943 * 8);
                        }
                        operator delete(v1074);
                        __int16 v898 = v1083;
                        v897 = v1087;
                        int v906 = *((_DWORD *)v1087 + 5);
                        uint64_t v899 = v1055;
                        v901 = v1064;
                        int v900 = __ph;
                      }
                      uint64_t v908 = (v906 + 1) & 0x7FFFFFF;
                      *((_DWORD *)v897 + 5) = v906 & 0xF8000000 | (v906 + 1) & 0x7FFFFFF;
                      if ((v906 & 0x40000000) != 0) {
                        int v909 = (char *)*((void *)v897 - 1);
                      }
                      else {
                        int v909 = (char *)v897 - 32 * v908;
                      }
                      uint64_t v910 = (v908 - 1);
                      v911 = &v909[32 * v910];
                      if (*(void *)v911)
                      {
                        **((void **)v911 + 2) = *((void *)v911 + 1);
                        uint64_t v935 = *((void *)v911 + 1);
                        if (v935) {
                          *(void *)(v935 + 16) = *((void *)v911 + 2);
                        }
                      }
                      *(void *)v911 = v905;
                      if (v905)
                      {
                        uint64_t v914 = *(void *)(v905 + 8);
                        int v913 = (char **)(v905 + 8);
                        uint64_t v912 = v914;
                        BOOL v915 = &v909[32 * v910];
                        *((void *)v915 + 1) = v914;
                        if (v914) {
                          *(void *)(v912 + 16) = v915 + 8;
                        }
                        *((void *)v915 + 2) = v913;
                        *int v913 = v911;
                      }
                      int v916 = *((_DWORD *)v897 + 5);
                      uint64_t v917 = v916 & 0x7FFFFFF;
                      if ((v916 & 0x40000000) != 0) {
                        v918 = (char *)*((void *)v897 - 1);
                      }
                      else {
                        v918 = (char *)v897 - 32 * v917;
                      }
                      *(void *)&v918[32 * *((unsigned int *)v897 + 15) + 8 * (v917 - 1)] = v901;
                    }
                    if (v900)
                    {
                      int v919 = *(_DWORD *)(v902 + 20);
                      if ((v919 & 0x40000000) != 0) {
                        uint64_t v920 = *(void *)(v902 - 8);
                      }
                      else {
                        uint64_t v920 = v902 - 32 * (v919 & 0x7FFFFFF);
                      }
                      uint64_t v921 = *(void *)(v920 + 32);
                      int v922 = *((_DWORD *)v900 + 5);
                      uint64_t v923 = v922 & 0x7FFFFFF;
                      if ((v922 & 0x7FFFFFF) == *((_DWORD *)v900 + 15))
                      {
                        unint64_t v1065 = v901;
                        unsigned int v946 = v923 + (v923 >> 1);
                        if (v946 <= 2) {
                          uint64_t v947 = 2;
                        }
                        else {
                          uint64_t v947 = v946;
                        }
                        *((_DWORD *)v900 + 15) = v947;
                        if ((v922 & 0x40000000) != 0) {
                          int v948 = (uint64_t *)*((void *)__ph - 1);
                        }
                        else {
                          int v948 = (uint64_t *)((char *)__ph - 32 * v923);
                        }
                        int v1075 = v948;
                        int v949 = operator new(40 * v947);
                        *((void *)__ph - 1) = v949;
                        int v950 = v949;
                        do
                        {
                          void *v950 = 0;
                          v950[1] = 0;
                          v950[2] = 0;
                          v950[3] = __ph;
                          v950 += 4;
                        }
                        while (v950 != &v949[4 * v947]);
                        int v951 = *((_DWORD *)__ph + 5);
                        if ((v951 & 0x40000000) != 0) {
                          uint64_t v952 = (uint64_t)v949;
                        }
                        else {
                          uint64_t v952 = (uint64_t)__ph - 32 * (v951 & 0x7FFFFFF);
                        }
                        __srcf = (char *)v952;
                        sub_1CC5E4108((uint64_t)v1101, v1075, &v1075[4 * v923], v952);
                        if (v923)
                        {
                          memmove(&__srcf[32 * v947], &v1075[4 * v923], 8 * v923);
                          uint64_t v953 = 4 * v923;
                          do
                          {
                            uint64_t v954 = &v1075[v953];
                            if (v1075[v953 - 4])
                            {
                              *(void *)*(v954 - 2) = *(v954 - 3);
                              uint64_t v955 = *(v954 - 3);
                              if (v955) {
                                *(void *)(v955 + 16) = *(v954 - 2);
                              }
                            }
                            v953 -= 4;
                          }
                          while (v953 * 8);
                        }
                        operator delete(v1075);
                        v897 = v1087;
                        int v900 = __ph;
                        int v922 = *((_DWORD *)__ph + 5);
                        __int16 v898 = v1083;
                        uint64_t v899 = v1055;
                        v901 = v1065;
                      }
                      uint64_t v924 = (v922 + 1) & 0x7FFFFFF;
                      *((_DWORD *)v900 + 5) = v922 & 0xF8000000 | (v922 + 1) & 0x7FFFFFF;
                      if ((v922 & 0x40000000) != 0) {
                        uint64_t v925 = (char *)*((void *)v900 - 1);
                      }
                      else {
                        uint64_t v925 = (char *)v900 - 32 * v924;
                      }
                      uint64_t v926 = (v924 - 1);
                      uint64_t v927 = &v925[32 * v926];
                      if (*(void *)v927)
                      {
                        **((void **)v927 + 2) = *((void *)v927 + 1);
                        uint64_t v936 = *((void *)v927 + 1);
                        if (v936) {
                          *(void *)(v936 + 16) = *((void *)v927 + 2);
                        }
                      }
                      *(void *)uint64_t v927 = v921;
                      if (v921)
                      {
                        uint64_t v930 = *(void *)(v921 + 8);
                        uint64_t v929 = (char **)(v921 + 8);
                        uint64_t v928 = v930;
                        v931 = &v925[32 * v926];
                        *((void *)v931 + 1) = v930;
                        if (v930) {
                          *(void *)(v928 + 16) = v931 + 8;
                        }
                        *((void *)v931 + 2) = v929;
                        _DWORD *v929 = v927;
                      }
                      int v932 = *((_DWORD *)v900 + 5);
                      uint64_t v933 = v932 & 0x7FFFFFF;
                      if ((v932 & 0x40000000) != 0) {
                        uint64_t v934 = (char *)*((void *)v900 - 1);
                      }
                      else {
                        uint64_t v934 = (char *)v900 - 32 * v933;
                      }
                      *(void *)&v934[32 * *((unsigned int *)v900 + 15) + 8 * (v933 - 1)] = v901;
                    }
                    if (++v893 == v898) {
                      break;
                    }
                    v895 += 4;
                  }
                  while (v895 != v899);
                }
                goto LABEL_1153;
              }
              if ((*((unsigned char *)v852 + 31) & 0x10) == 0) {
                goto LABEL_1323;
              }
              uint64_t v998 = ***(void ***)__ph;
              uint64_t v999 = *(void *)(v998 + 152);
              uint64_t v1000 = *(unsigned int *)(v998 + 168);
              if (!v1000) {
                goto LABEL_1315;
              }
              LODWORD(v1001) = (v1000 - 1) & (v1073 ^ (__ph >> 9));
              uint64_t v1002 = (llvm::Value **)(v999 + 16 * v1001);
              int v1003 = *v1002;
              if (*v1002 != __ph)
              {
                int v1004 = 1;
                while (v1003 != (llvm::Value *)-4096)
                {
                  int v1005 = v1001 + v1004++;
                  uint64_t v1001 = v1005 & (v1000 - 1);
                  int v1003 = *(llvm::Value **)(v999 + 16 * v1001);
                  if (v1003 == __ph)
                  {
                    uint64_t v1002 = (llvm::Value **)(v999 + 16 * v1001);
                    goto LABEL_1316;
                  }
                }
LABEL_1315:
                uint64_t v1002 = (llvm::Value **)(v999 + 16 * v1000);
              }
LABEL_1316:
              unint64_t v1012 = v1002[1];
              unint64_t v1015 = *(void *)v1012;
              int v1013 = (char *)v1012 + 16;
              unint64_t v1014 = v1015;
              if (v1015 >= 5
                && (*(_DWORD *)v1013 == *(_DWORD *)"llvm." ? (BOOL v1016 = v1013[4] == aLlvm_1[4]) : (BOOL v1016 = 0), v1016))
              {
                *((_DWORD *)v852 + 10) |= 0x2000u;
                int v1017 = llvm::Function::lookupIntrinsicID(v1013, v1014);
              }
              else
              {
LABEL_1323:
                int v1017 = 0;
                *((_DWORD *)v852 + 10) &= ~0x2000u;
              }
              *((_DWORD *)v852 + 11) = v1017;
              goto LABEL_1109;
            }
            if ((*((unsigned char *)v803 + 31) & 0x10) == 0) {
              goto LABEL_1313;
            }
            uint64_t v990 = ***(void ***)v143;
            uint64_t v991 = *(void *)(v990 + 152);
            uint64_t v992 = *(unsigned int *)(v990 + 168);
            if (!v992) {
              goto LABEL_1305;
            }
            LODWORD(v993) = (v992 - 1) & (v1088 ^ (v143 >> 9));
            int v994 = (llvm::Value **)(v991 + 16 * v993);
            uint64_t v995 = *v994;
            if (*v994 != v143)
            {
              int v996 = 1;
              while (v995 != (llvm::Value *)-4096)
              {
                int v997 = v993 + v996++;
                uint64_t v993 = v997 & (v992 - 1);
                uint64_t v995 = *(llvm::Value **)(v991 + 16 * v993);
                if (v995 == v143)
                {
                  int v994 = (llvm::Value **)(v991 + 16 * v993);
                  goto LABEL_1306;
                }
              }
LABEL_1305:
              int v994 = (llvm::Value **)(v991 + 16 * v992);
            }
LABEL_1306:
            int v1006 = v994[1];
            unint64_t v1009 = *(void *)v1006;
            v1007 = (char *)v1006 + 16;
            unint64_t v1008 = v1009;
            if (v1009 >= 5
              && (*(_DWORD *)v1007 == *(_DWORD *)"llvm." ? (BOOL v1010 = v1007[4] == aLlvm_1[4]) : (BOOL v1010 = 0), v1010))
            {
              *((_DWORD *)v803 + 10) |= 0x2000u;
              int v1011 = llvm::Function::lookupIntrinsicID(v1007, v1008);
            }
            else
            {
LABEL_1313:
              int v1011 = 0;
              *((_DWORD *)v803 + 10) &= ~0x2000u;
            }
            *((_DWORD *)v803 + 11) = v1011;
            goto LABEL_1058;
          }
        }
        while (*(void *)(v144 + 24) == *(void *)(v141 + 24))
        {
          uint64_t v141 = *(void *)(v141 + 8);
          uint64_t v144 = *(void *)(v144 + 8);
          if (!v144) {
            goto LABEL_222;
          }
        }
        return 0;
      }
      int v80 = 0;
      if ((v12 & 0x40000000) != 0) {
        goto LABEL_145;
      }
    }
    else
    {
      int v19 = *((_DWORD *)v14 + 5);
      if ((v19 & 0x40000000) != 0) {
        int v20 = (llvm::Type ***)*((void *)v14 - 1);
      }
      else {
        int v20 = (llvm::Type ***)((char *)v14 - 32 * (v19 & 0x7FFFFFF));
      }
      int v80 = **v20;
      if (*(unsigned char *)(*(void *)a2 + 8) == 13 && *((unsigned char *)v80 + 8) == 13)
      {
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
        if (v81 == 1) {
        unsigned int v84 = llvm::Type::getPrimitiveSizeInBits(v80);
        }
        if (v83 == 1) {
        if (!sub_1CC9D18E0(v4, PrimitiveSizeInBits, v84))
        }
          return 0;
        int v85 = 0;
        int v12 = *(_DWORD *)(v3 + 20);
        if ((v12 & 0x40000000) != 0) {
          goto LABEL_145;
        }
      }
      else
      {
        int v85 = 0;
        if ((v12 & 0x40000000) != 0)
        {
LABEL_145:
          uint64_t v87 = *(void *)(v3 - 8);
          uint64_t v86 = v12 & 0x7FFFFFF;
LABEL_146:
          if (v86 != 1)
          {
            int v95 = (llvm::Instruction **)(v87 + 32 * v86);
            int v96 = (llvm::Instruction **)(v87 + 32);
            do
            {
              uint64_t v97 = *v96;
              if (!*v96 || *((unsigned __int8 *)*v96 + 16) < 0x1Cu) {
                return 0;
              }
              uint64_t v99 = *((void *)v97 + 1);
              if (!v99) {
                return 0;
              }
              uint64_t v100 = *(void *)(v99 + 8);
              if (v100)
              {
                while (*(void *)(v100 + 24) == *(void *)(v99 + 24))
                {
                  uint64_t v99 = *(void *)(v99 + 8);
                  uint64_t v100 = *(void *)(v100 + 8);
                  if (!v100) {
                    goto LABEL_159;
                  }
                }
                return 0;
              }
LABEL_159:
              if (!llvm::Instruction::isSameOperationAs(*v96, v14, 0)) {
                return 0;
              }
              int v101 = *((_DWORD *)v97 + 5);
              if (v80)
              {
                if ((v101 & 0x40000000) != 0) {
                  unint64_t v102 = (llvm::Type ***)*((void *)v97 - 1);
                }
                else {
                  unint64_t v102 = (llvm::Type ***)((char *)v97 - 32 * (v101 & 0x7FFFFFF));
                }
                if (**v102 != v80) {
                  return 0;
                }
              }
              else
              {
                if ((v101 & 0x40000000) != 0) {
                  uint64_t v103 = (unsigned __int8 **)*((void *)v97 - 1);
                }
                else {
                  uint64_t v103 = (unsigned __int8 **)((char *)v97 - 32 * (v101 & 0x7FFFFFF));
                }
                if (v103[4] != v85) {
                  return 0;
                }
              }
              v96 += 4;
            }
            while (v96 != v95);
          }
          int v93 = *((_DWORD *)v14 + 5);
          if ((v93 & 0x40000000) != 0) {
            uint64_t v94 = (uint64_t **)*((void *)v14 - 1);
          }
          else {
            uint64_t v94 = (uint64_t **)((char *)v14 - 32 * (v93 & 0x7FFFFFF));
          }
          uint64_t v104 = **v94;
          int v105 = *(_DWORD *)(v3 + 20);
          int v106 = v105 & 0x7FFFFFF;
          if ((v105 & 0x10000000) == 0)
          {
            int v151 = 0;
            int v150 = &byte_1CFBCE98E;
LABEL_242:
            LOWORD(v1103) = 773;
            v1101[0] = v150;
            v1101[1] = v151;
            *(void *)&long long v1102 = ".in";
            int v153 = operator new(0x48uLL);
            v153[1] = v104;
            uint64_t v154 = (llvm::Value *)(v153 + 1);
            *int v153 = 0;
            v153[2] = 0;
            v153[3] = 0x4000000000000053;
            *((_OWORD *)v153 + 2) = 0u;
            *((_OWORD *)v153 + 3) = 0u;
            *((_DWORD *)v153 + 16) = 0;
            *((_DWORD *)v153 + 17) = v106;
            llvm::Value::setNameImpl((llvm::Value *)(v153 + 1), (const char **)v1101);
            if (*((unsigned char *)v153 + 24)) {
              goto LABEL_243;
            }
            if ((*((unsigned char *)v153 + 31) & 0x10) == 0) {
              goto LABEL_846;
            }
            uint64_t v553 = ***(void ***)v154;
            uint64_t v554 = *(void *)(v553 + 152);
            uint64_t v555 = *(unsigned int *)(v553 + 168);
            if (v555)
            {
              LODWORD(v556) = (v555 - 1) & ((v154 >> 4) ^ (v154 >> 9));
              uint64_t v557 = (llvm::Value **)(v554 + 16 * v556);
              uint64_t v558 = *v557;
              if (*v557 == v154)
              {
LABEL_839:
                uint64_t v635 = v557[1];
                unint64_t v638 = *(void *)v635;
                unsigned int v636 = (char *)v635 + 16;
                unint64_t v637 = v638;
                if (v638 >= 5 && *(_DWORD *)v636 == *(_DWORD *)"llvm." && v636[4] == aLlvm_1[4])
                {
                  *((_DWORD *)v153 + 10) |= 0x2000u;
                  int v640 = llvm::Function::lookupIntrinsicID(v636, v637);
LABEL_847:
                  *((_DWORD *)v153 + 11) = v640;
LABEL_243:
                  uint64_t v155 = *((unsigned int *)v153 + 17);
                  uint64_t v156 = operator new(40 * v155);
                  *int v153 = v156;
                  if (v155)
                  {
                    BOOL v158 = v156;
                    do
                    {
                      *BOOL v158 = 0;
                      v158[1] = 0;
                      v158[2] = 0;
                      v158[3] = v154;
                      v158 += 4;
                    }
                    while (v158 != &v156[4 * v155]);
                  }
                  int v159 = *((_DWORD *)v14 + 5);
                  if ((v159 & 0x40000000) != 0) {
                    char v160 = (llvm::Value **)*((void *)v14 - 1);
                  }
                  else {
                    char v160 = (llvm::Value **)((char *)v14 - 32 * (v159 & 0x7FFFFFF));
                  }
                  int v161 = *(_DWORD *)(v3 + 20);
                  uint64_t v1030 = v4;
                  if ((v161 & 0x40000000) != 0) {
                    uint64_t v162 = *(void *)(v3 - 8);
                  }
                  else {
                    uint64_t v162 = v3 - 32 * (v161 & 0x7FFFFFF);
                  }
                  unsigned int v163 = *v160;
                  uint64_t v164 = *(void *)(v162 + 32 * *(unsigned int *)(v3 + 60));
                  int v165 = *((_DWORD *)v153 + 7);
                  uint64_t v166 = v165 & 0x7FFFFFF;
                  int64_t v1068 = v14;
                  int v1050 = v85;
                  if ((v165 & 0x7FFFFFF) == *((_DWORD *)v153 + 17))
                  {
                    uint64_t v350 = v3;
                    unsigned int v351 = v166 + (v166 >> 1);
                    if (v351 <= 2) {
                      uint64_t v352 = 2;
                    }
                    else {
                      uint64_t v352 = v351;
                    }
                    *((_DWORD *)v153 + 17) = v352;
                    if ((v165 & 0x40000000) != 0) {
                      uint64_t v353 = v156;
                    }
                    else {
                      uint64_t v353 = (uint64_t *)((char *)v154 - 32 * v166);
                    }
                    uint64_t v354 = operator new(40 * v352);
                    *int v153 = v354;
                    unsigned int v355 = v354;
                    do
                    {
                      *unsigned int v355 = 0;
                      v355[1] = 0;
                      v355[2] = 0;
                      v355[3] = v154;
                      v355 += 4;
                    }
                    while (v355 != &v354[4 * v352]);
                    int v356 = *((_DWORD *)v153 + 7);
                    if ((v356 & 0x40000000) != 0) {
                      uint64_t v357 = (uint64_t)v354;
                    }
                    else {
                      uint64_t v357 = (uint64_t)v154 - 32 * (v356 & 0x7FFFFFF);
                    }
                    sub_1CC5E4108((uint64_t)v1101, v353, &v353[4 * v166], v357);
                    if (v166)
                    {
                      memmove((void *)(v357 + 32 * v352), &v353[4 * v166], 8 * v166);
                      uint64_t v358 = 4 * v166;
                      do
                      {
                        uint64_t v359 = &v353[v358];
                        if (v353[v358 - 4])
                        {
                          *(void *)*(v359 - 2) = *(v359 - 3);
                          uint64_t v360 = *(v359 - 3);
                          if (v360) {
                            *(void *)(v360 + 16) = *(v359 - 2);
                          }
                        }
                        v358 -= 4;
                      }
                      while (v358 * 8);
                    }
                    operator delete(v353);
                    int v165 = *((_DWORD *)v153 + 7);
                    uint64_t v3 = v350;
                    uint64_t v14 = v1068;
                  }
                  uint64_t v167 = (v165 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v153 + 7) = v165 & 0xF8000000 | (v165 + 1) & 0x7FFFFFF;
                  uint64_t v168 = (v167 - 1);
                  if ((v165 & 0x40000000) != 0) {
                    uint64_t v169 = (char *)*v153;
                  }
                  else {
                    uint64_t v169 = (char *)v154 - 32 * v167;
                  }
                  uint64_t v170 = &v169[32 * v168];
                  if (*(void *)v170)
                  {
                    **((void **)v170 + 2) = *((void *)v170 + 1);
                    uint64_t v349 = *((void *)v170 + 1);
                    if (v349) {
                      *(void *)(v349 + 16) = *((void *)v170 + 2);
                    }
                  }
                  *(void *)uint64_t v170 = v163;
                  if (v163)
                  {
                    uint64_t v171 = (char **)((char *)v163 + 8);
                    uint64_t v172 = *((void *)v163 + 1);
                    int64_t v173 = &v169[32 * v168];
                    *((void *)v173 + 1) = v172;
                    if (v172) {
                      *(void *)(v172 + 16) = v173 + 8;
                    }
                    *((void *)v173 + 2) = v171;
                    *uint64_t v171 = v170;
                  }
                  int v174 = *((_DWORD *)v153 + 7);
                  uint64_t v175 = v174 & 0x7FFFFFF;
                  if ((v174 & 0x40000000) != 0) {
                    int v176 = (char *)*v153;
                  }
                  else {
                    int v176 = (char *)v154 - 32 * v175;
                  }
                  uint64_t v177 = *((unsigned int *)v153 + 17);
                  *(void *)&v176[32 * v177 + 8 * (v175 - 1)] = v164;
                  int v178 = *(_DWORD *)(v3 + 20);
                  if ((v178 & 0x40000000) != 0)
                  {
                    uint64_t v180 = *(void *)(v3 - 8);
                    uint64_t v181 = v180 + 32 * *(unsigned int *)(v3 + 60);
                    uint64_t v179 = v178 & 0x7FFFFFF;
                    uint64_t v182 = (uint64_t *)(v181 + 8 * v179);
                  }
                  else
                  {
                    uint64_t v179 = v178 & 0x7FFFFFF;
                    uint64_t v180 = v3 - 32 * v179;
                    uint64_t v181 = v180 + 32 * *(unsigned int *)(v3 + 60);
                    uint64_t v182 = (uint64_t *)(v181 + 8 * v179);
                  }
                  uint64_t v183 = (uint64_t *)(v181 + 8);
                  if ((uint64_t *)(v181 + 8) != v182)
                  {
                    uint64_t v184 = v180 + 32 * v179;
                    uint64_t v185 = v180 + 32;
                    if (v180 + 32 != v184)
                    {
                      uint64_t v1025 = v3;
                      uint64_t v1036 = v180 + 32 * v179;
                      uint64_t __src = v182;
                      do
                      {
                        uint64_t v186 = *(void *)v185;
                        int v187 = *(_DWORD *)(*(void *)v185 + 20);
                        if ((v187 & 0x40000000) != 0) {
                          uint64_t v188 = *(llvm::Value ***)(v186 - 8);
                        }
                        else {
                          uint64_t v188 = (llvm::Value **)(v186 - 32 * (v187 & 0x7FFFFFF));
                        }
                        uint64_t v189 = *v183;
                        uint64_t v190 = *v188;
                        if (*v188 != v163) {
                          unsigned int v163 = 0;
                        }
                        int v191 = *((_DWORD *)v153 + 7);
                        if ((v191 & 0x7FFFFFF) == v177)
                        {
                          unsigned int v204 = v177 + (v177 >> 1);
                          if (v204 <= 2) {
                            uint64_t v205 = 2;
                          }
                          else {
                            uint64_t v205 = v204;
                          }
                          *((_DWORD *)v153 + 17) = v205;
                          if ((v191 & 0x40000000) != 0) {
                            BOOL v206 = (uint64_t *)*v153;
                          }
                          else {
                            BOOL v206 = (uint64_t *)((char *)v154 - 32 * v177);
                          }
                          __p = v206;
                          uint64_t v207 = operator new(40 * v205);
                          *int v153 = v207;
                          uint64_t v208 = v207;
                          do
                          {
                            *uint64_t v208 = 0;
                            v208[1] = 0;
                            v208[2] = 0;
                            v208[3] = v154;
                            v208 += 4;
                          }
                          while (v208 != &v207[4 * v205]);
                          int v209 = *((_DWORD *)v153 + 7);
                          if ((v209 & 0x40000000) != 0) {
                            uint64_t v210 = (uint64_t)v207;
                          }
                          else {
                            uint64_t v210 = (uint64_t)v154 - 32 * (v209 & 0x7FFFFFF);
                          }
                          sub_1CC5E4108((uint64_t)v1101, __p, &__p[4 * v177], v210);
                          if (v177)
                          {
                            memmove((void *)(v210 + 32 * v205), &__p[4 * v177], 8 * v177);
                            uint64_t v211 = 4 * v177;
                            do
                            {
                              uint64_t v212 = &__p[v211];
                              if (__p[v211 - 4])
                              {
                                *(void *)*(v212 - 2) = *(v212 - 3);
                                uint64_t v213 = *(v212 - 3);
                                if (v213) {
                                  *(void *)(v213 + 16) = *(v212 - 2);
                                }
                              }
                              v211 -= 4;
                            }
                            while (v211 * 8);
                          }
                          operator delete(__p);
                          int v191 = *((_DWORD *)v153 + 7);
                          uint64_t v3 = v1025;
                          uint64_t v154 = (llvm::Value *)(v153 + 1);
                          uint64_t v14 = v1068;
                          uint64_t v184 = v1036;
                          uint64_t v182 = __src;
                        }
                        uint64_t v192 = (v191 + 1) & 0x7FFFFFF;
                        *((_DWORD *)v153 + 7) = v191 & 0xF8000000 | (v191 + 1) & 0x7FFFFFF;
                        if ((v191 & 0x40000000) != 0) {
                          uint64_t v193 = (char *)*v153;
                        }
                        else {
                          uint64_t v193 = (char *)v154 - 32 * v192;
                        }
                        uint64_t v194 = (v192 - 1);
                        BOOL v195 = &v193[32 * v194];
                        if (*(void *)v195)
                        {
                          **((void **)v195 + 2) = *((void *)v195 + 1);
                          uint64_t v203 = *((void *)v195 + 1);
                          if (v203) {
                            *(void *)(v203 + 16) = *((void *)v195 + 2);
                          }
                        }
                        *(void *)BOOL v195 = v190;
                        if (v190)
                        {
                          uint64_t v198 = *((void *)v190 + 1);
                          uint64_t v197 = (char **)((char *)v190 + 8);
                          uint64_t v196 = v198;
                          uint64_t v199 = &v193[32 * v194];
                          *((void *)v199 + 1) = v198;
                          if (v198) {
                            *(void *)(v196 + 16) = v199 + 8;
                          }
                          *((void *)v199 + 2) = v197;
                          *uint64_t v197 = v195;
                        }
                        int v200 = *((_DWORD *)v153 + 7);
                        uint64_t v201 = v200 & 0x7FFFFFF;
                        if ((v200 & 0x40000000) != 0) {
                          uint64_t v202 = (char *)*v153;
                        }
                        else {
                          uint64_t v202 = (char *)v154 - 32 * v201;
                        }
                        uint64_t v177 = *((unsigned int *)v153 + 17);
                        *(void *)&v202[32 * v177 + 8 * (v201 - 1)] = v189;
                        if (++v183 == v182) {
                          break;
                        }
                        v185 += 32;
                      }
                      while (v185 != v184);
                    }
                  }
                  if (!v163)
                  {
                    sub_1CCA331D4(v1030, v154, v3);
                    unsigned int v163 = v154;
                    uint64_t v214 = (uint64_t)v1050;
LABEL_323:
                    int v223 = *((unsigned __int8 *)v14 + 16);
                    if (v14 && (v223 - 79) >= 0xFFFFFFF3)
                    {
                      int v224 = *(uint64_t ***)v3;
                      LOWORD(v1103) = 257;
                      uint64_t v225 = (unsigned __int8 **)llvm::CastInst::Create(v223 - 28, (uint64_t)v163, (uint64_t)v224, (const char **)v1101, 0);
                    }
                    else
                    {
                      int v226 = v223 - 28;
                      if (v14 && (v223 - 59) >= 0xFFFFFFEE)
                      {
                        LOWORD(v1103) = 257;
                        uint64_t v227 = llvm::BinaryOperator::Create(v226, v163, v214, (const char **)v1101, 0);
                        uint64_t v38 = (char *)v227;
                        int v228 = *(_DWORD *)(v3 + 20);
                        if ((v228 & 0x40000000) != 0) {
                          uint64_t v229 = *(uint64_t **)(v3 - 8);
                        }
                        else {
                          uint64_t v229 = (uint64_t *)(v3 - 32 * (v228 & 0x7FFFFFF));
                        }
                        llvm::Instruction::copyIRFlags((uint64_t)v227, *v229, 1);
                        int v340 = *(_DWORD *)(v3 + 20);
                        if ((v340 & 0x40000000) != 0)
                        {
                          uint64_t v342 = *(void *)(v3 - 8);
                          uint64_t v341 = v340 & 0x7FFFFFF;
                        }
                        else
                        {
                          uint64_t v341 = v340 & 0x7FFFFFF;
                          uint64_t v342 = v3 - 32 * v341;
                        }
                        if (v341 != 1)
                        {
                          uint64_t v343 = (uint64_t *)(v342 + 32);
                          uint64_t v344 = 32 * v341 - 32;
                          do
                          {
                            uint64_t v345 = *v343;
                            v343 += 4;
                            llvm::Instruction::andIRFlags((uint64_t)v38, v345);
                            v344 -= 32;
                          }
                          while (v344);
                        }
                        goto LABEL_495;
                      }
                      __int16 v230 = *((_WORD *)v14 + 9) & 0x3F;
                      LOWORD(v1103) = 257;
                      uint64_t v225 = (unsigned __int8 **)llvm::CmpInst::Create(v226, v230, v163, v214, (const char **)v1101, 0);
                    }
                    uint64_t v38 = (char *)v225;
LABEL_496:
                    uint64_t v367 = v3;
                    goto LABEL_497;
                  }
                  uint64_t v214 = (uint64_t)v1050;
                  if ((*((unsigned char *)v153 + 31) & 8) != 0)
                  {
                    v988 = llvm::UndefValue::get(*(llvm::UndefValue **)v154, v157);
                    llvm::ValueAsMetadata::handleRAUW((uint64_t *)v154, v988, v989);
                  }
                  int v215 = (unsigned __int8 *)v153[7];
                  if (v215)
                  {
                    int v368 = *v215;
                    if ((v368 - 4) > 0x1E)
                    {
                      if ((v368 - 3) >= 0xFFFFFFFE) {
                        uint64_t v550 = v153[7];
                      }
                      else {
                        uint64_t v550 = 0;
                      }
                      if ((v368 - 3) < 0xFFFFFFFE)
                      {
                        if (v368 == 3) {
                          *((void *)v215 + 1) = 0;
                        }
                        goto LABEL_312;
                      }
                      unint64_t v370 = v550 + 8;
                    }
                    else
                    {
                      if ((v215[1] & 0x7F) != 2 && !*((_DWORD *)v215 + 3)) {
                        goto LABEL_312;
                      }
                      uint64_t v369 = *((void *)v215 + 2);
                      if ((v369 & 4) == 0) {
                        goto LABEL_312;
                      }
                      unint64_t v370 = v369 & 0xFFFFFFFFFFFFFFF8;
                      if (!v370) {
                        goto LABEL_312;
                      }
                    }
                    v1101[0] = v153 + 7;
                    sub_1CC5FA668(v370 + 16, v1101);
                  }
LABEL_312:
                  llvm::Value::~Value(v154, v157);
                  int v216 = *((_DWORD *)v153 + 7);
                  uint64_t v217 = v216 & 0x7FFFFFF;
                  if ((v216 & 0x40000000) != 0)
                  {
                    int v462 = (char *)*v153;
                    if (v217)
                    {
                      uint64_t v463 = 32 * v217;
                      do
                      {
                        uint64_t v464 = &v462[v463];
                        if (*(void *)&v462[v463 - 32])
                        {
                          **((void **)v464 - 2) = *((void *)v464 - 3);
                          uint64_t v465 = *((void *)v464 - 3);
                          if (v465) {
                            *(void *)(v465 + 16) = *((void *)v464 - 2);
                          }
                        }
                        v463 -= 32;
                      }
                      while (v463);
                    }
                    operator delete(v462);
                    uint64_t v219 = (char *)v153;
                  }
                  else
                  {
                    uint64_t v218 = v217;
                    uint64_t v219 = (char *)v154 - 32 * v217;
                    if (v217)
                    {
                      char v220 = (void **)(v153 - 1);
                      uint64_t v221 = -32 * v218;
                      do
                      {
                        if (*(v220 - 2))
                        {
                          *void *v220 = *(v220 - 1);
                          uint64_t v222 = (uint64_t)*(v220 - 1);
                          if (v222) {
                            *(void *)(v222 + 16) = *v220;
                          }
                        }
                        v220 -= 4;
                        v221 += 32;
                      }
                      while (v221);
                    }
                    if (v216 < 0) {
                      uint64_t v219 = &v219[-*((void *)v219 - 1) - 8];
                    }
                  }
                  operator delete(v219);
                  goto LABEL_323;
                }
LABEL_846:
                int v640 = 0;
                *((_DWORD *)v153 + 10) &= ~0x2000u;
                goto LABEL_847;
              }
              int v559 = 1;
              while (v558 != (llvm::Value *)-4096)
              {
                int v560 = v556 + v559++;
                uint64_t v556 = v560 & (v555 - 1);
                uint64_t v558 = *(llvm::Value **)(v554 + 16 * v556);
                if (v558 == v154)
                {
                  uint64_t v557 = (llvm::Value **)(v554 + 16 * v556);
                  goto LABEL_839;
                }
              }
            }
            uint64_t v557 = (llvm::Value **)(v554 + 16 * v555);
            goto LABEL_839;
          }
          uint64_t v107 = ***(void ***)v3;
          uint64_t v108 = *(void *)(v107 + 152);
          uint64_t v109 = *(unsigned int *)(v107 + 168);
          if (v109)
          {
            LODWORD(v110) = (v109 - 1) & ((v3 >> 4) ^ (v3 >> 9));
            uint64_t v111 = (uint64_t *)(v108 + 16 * v110);
            uint64_t v112 = *v111;
            if (*v111 == v3)
            {
LABEL_241:
              __int16 v149 = (void *)v111[1];
              BOOL v152 = (void *)*v149;
              int v150 = (char *)(v149 + 2);
              int v151 = v152;
              goto LABEL_242;
            }
            int v113 = 1;
            while (v112 != -4096)
            {
              int v114 = v110 + v113++;
              uint64_t v110 = v114 & (v109 - 1);
              uint64_t v112 = *(void *)(v108 + 16 * v110);
              if (v112 == v3)
              {
                uint64_t v111 = (uint64_t *)(v108 + 16 * v110);
                goto LABEL_241;
              }
            }
          }
          uint64_t v111 = (uint64_t *)(v108 + 16 * v109);
          goto LABEL_241;
        }
      }
    }
    uint64_t v86 = v12 & 0x7FFFFFF;
    uint64_t v87 = v3 - 32 * v86;
    goto LABEL_146;
  }
  if ((v12 & 0x40000000) != 0) {
    uint64_t v21 = *(const char ***)(a2 - 8);
  }
  else {
    uint64_t v21 = (const char **)(a2 - 32 * (v12 & 0x7FFFFFF));
  }
  uint64_t v65 = *v21;
  uint64_t v66 = (uint64_t *)*((void *)*v21 - 4);
  int v67 = *((unsigned __int8 *)v66 + 16);
  if (v66) {
    BOOL v68 = v67 == 21;
  }
  else {
    BOOL v68 = 0;
  }
  if (v68)
  {
    uint64_t v632 = *(void *)(v66[3] + 112);
    if (v632)
    {
      unsigned int v633 = *((_DWORD *)v66 + 8) + 2;
      if (v633 < *(_DWORD *)(v632 + 8))
      {
        uint64_t v634 = *(void *)(v632 + 8 * v633 + 40);
        if (v634)
        {
          if (*(char *)(v634 + 19) < 0) {
            return 0;
          }
        }
      }
    }
  }
  else if (v66 && v67 == 59 && (*((_WORD *)v66 + 9) & 0x80) != 0)
  {
    return 0;
  }
  int v69 = *((unsigned __int8 *)v65 + 16);
  if (v69 == 60 || v69 == 61)
  {
    uint64_t v70 = *((unsigned __int16 *)v65 + 9);
    if ((v70 & 0x380) != 0) {
      return 0;
    }
  }
  else
  {
    if ((v69 - 63) < 3) {
      return 0;
    }
    uint64_t v70 = *((unsigned __int16 *)v65 + 9);
  }
  uint64_t v71 = *v66;
  int v72 = (void *)*(unsigned int *)(v71 + 8);
  if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12) {
    int v72 = (void *)*(unsigned int *)(**(void **)(v71 + 16) + 8);
  }
  uint64_t v73 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
  if (*(char *)(v73 + 239) < 0) {
    sub_1CB8BDF7C((uint64_t)&v1100, *(const void **)(v73 + 216), *(void *)(v73 + 224));
  }
  else {
    std::string v1100 = *(std::string *)(v73 + 216);
  }
  if (!std::string::compare(&v1100, 0, 4uLL, "agx1"))
  {
    char v88 = 27;
  }
  else if (!std::string::compare(&v1100, 0, 4uLL, "agx2"))
  {
    char v88 = 28;
  }
  else if (!std::string::compare(&v1100, 0, 4uLL, "agx3"))
  {
    char v88 = 29;
  }
  else
  {
    char v88 = 0;
  }
  if (SHIBYTE(v1100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1100.__r_.__value_.__l.__data_);
  }
  unsigned int v115 = v72 >> 8;
  if ((v88 & 0x1E) == 0x1C && v115 == 64) {
    return 0;
  }
  int v116 = *(_DWORD *)(v3 + 20);
  uint64_t v117 = (v116 & 0x40000000) != 0 ? *(void *)(v3 - 8) : v3 - 32 * (v116 & 0x7FFFFFF);
  if (*((void *)v65 + 5) != *(void *)(v117 + 32 * *(unsigned int *)(v3 + 60))
    || !sub_1CCA8EA54((uint64_t)v65))
  {
    return 0;
  }
  uint64_t v1024 = v3;
  uint64_t v1029 = v4;
  if (v70)
  {
    uint64_t v119 = *((void *)v65 + 5);
    uint64_t v120 = *(void *)(v119 + 40);
    if (v120 == v119 + 40)
    {
      uint64_t v121 = 0;
    }
    else
    {
      if (v120) {
        uint64_t v121 = v120 - 24;
      }
      else {
        uint64_t v121 = 0;
      }
      if (*(unsigned __int8 *)(v121 + 16) - 29 >= 0xB) {
        uint64_t v121 = 0;
      }
    }
    if (*(unsigned char *)(v121 + 16) != 30)
    {
      uint64_t v38 = 0;
      switch(*(unsigned char *)(v121 + 16))
      {
        case 0x1E:
LABEL_1330:
          __break(1u);
          goto LABEL_1331;
        case 0x1F:
          int v566 = (*(_DWORD *)(v121 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_725;
        case 0x20:
        case 0x26:
          int v566 = (*(_DWORD *)(v121 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_725;
        case 0x24:
          int v566 = *(_WORD *)(v121 + 18) & 1;
          goto LABEL_725;
        case 0x25:
          goto LABEL_726;
        case 0x27:
          int v566 = *(_DWORD *)(v121 + 80) + 1;
LABEL_725:
          if (v566 == 1) {
            goto LABEL_726;
          }
          return 0;
        default:
          return v38;
      }
    }
    if ((*(_DWORD *)(v121 + 20) & 0x7FFFFFF) == 3) {
      return 0;
    }
  }
LABEL_726:
  LOBYTE(v3) = __clz(1 << (v70 >> 1)) ^ 0x3F;
  int v567 = *(_DWORD *)(v1024 + 20);
  if ((v567 & 0x40000000) != 0)
  {
    uint64_t v569 = *(void *)(v1024 - 8);
    uint64_t v570 = v569 + 32 * *(unsigned int *)(v1024 + 60);
    uint64_t v568 = v567 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v568 = v567 & 0x7FFFFFF;
    uint64_t v569 = v1024 - 32 * v568;
    uint64_t v570 = v569 + 32 * *(unsigned int *)(v1024 + 60);
  }
  int v72 = (void *)(v570 + 8 * v568);
  int v571 = (void *)(v570 + 8);
  if ((void *)(v570 + 8) != v72)
  {
    uint64_t v572 = (uint64_t *)(v569 + 32 * v568);
    unint64_t v573 = (uint64_t *)(v569 + 32);
    if ((uint64_t *)(v569 + 32) != v572)
    {
      while (1)
      {
        uint64_t v38 = 0;
        uint64_t v2 = (unsigned __int16 *)*v573;
        if (!*v573 || *((unsigned char *)v2 + 16) != 60) {
          return v38;
        }
        uint64_t v574 = *((void *)v2 + 1);
        if (!v574) {
          return 0;
        }
        uint64_t v575 = *(void *)(v574 + 8);
        if (v575) {
          break;
        }
LABEL_737:
        int v576 = v2[9];
        if (v576 & 0x380) != 0 || ((v70 ^ v576)) {
          return 0;
        }
        uint64_t v577 = *((void *)v2 - 4);
        unsigned int v578 = *(_DWORD *)(*(void *)v577 + 8);
        if ((v578 & 0xFE) == 0x12) {
          unsigned int v578 = *(_DWORD *)(**(void **)(*(void *)v577 + 16) + 8);
        }
        if (v115 != v578 >> 8) {
          return 0;
        }
        int v579 = *(unsigned __int8 *)(v577 + 16);
        if (v579 == 59)
        {
          if ((*(_WORD *)(v577 + 18) & 0x80) != 0) {
            return 0;
          }
        }
        else if (v579 == 21)
        {
          uint64_t v584 = *(void *)(*(void *)(v577 + 24) + 112);
          if (v584)
          {
            unsigned int v585 = *(_DWORD *)(v577 + 32) + 2;
            if (v585 < *(_DWORD *)(v584 + 8))
            {
              uint64_t v586 = *(void *)(v584 + 8 * v585 + 40);
              if (v586)
              {
                if (*(char *)(v586 + 19) < 0) {
                  return 0;
                }
              }
            }
          }
        }
        if (*((void *)v2 + 5) != *v571 || !sub_1CCA8EA54(*v573)) {
          return 0;
        }
        unsigned int v580 = __clz(1 << ((unint64_t)v2[9] >> 1)) ^ 0x3F;
        if (v580 < v3) {
          LOBYTE(v3) = v580;
        }
        if (v70)
        {
          uint64_t v581 = *((void *)v2 + 5);
          uint64_t v582 = *(void *)(v581 + 40);
          if (v582 == v581 + 40)
          {
            uint64_t v121 = 0;
          }
          else
          {
            if (v582) {
              uint64_t v121 = v582 - 24;
            }
            else {
              uint64_t v121 = 0;
            }
            if (*(unsigned __int8 *)(v121 + 16) - 29 >= 0xB) {
              uint64_t v121 = 0;
            }
          }
          if (*(unsigned char *)(v121 + 16) != 30)
          {
            uint64_t v118 = v70;
            uint64_t v38 = 0;
            switch(*(unsigned char *)(v121 + 16))
            {
              case 0x1E:
                goto LABEL_1330;
              case 0x1F:
                int v583 = (*(_DWORD *)(v121 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_764;
              case 0x20:
              case 0x26:
                int v583 = (*(_DWORD *)(v121 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_764;
              case 0x24:
                int v583 = *(_WORD *)(v121 + 18) & 1;
                goto LABEL_764;
              case 0x25:
                goto LABEL_759;
              case 0x27:
                int v583 = *(_DWORD *)(v121 + 80) + 1;
LABEL_764:
                if (v583 != 1) {
                  return 0;
                }
                goto LABEL_759;
              default:
                return v38;
            }
          }
          if ((*(_DWORD *)(v121 + 20) & 0x7FFFFFF) == 3) {
            return 0;
          }
        }
LABEL_759:
        if (++v571 != v72)
        {
          v573 += 4;
          if (v573 != v572) {
            continue;
          }
        }
        int v567 = *(_DWORD *)(v1024 + 20);
        goto LABEL_867;
      }
      while (*(void *)(v575 + 24) == *(void *)(v574 + 24))
      {
        uint64_t v574 = *(void *)(v574 + 8);
        uint64_t v575 = *(void *)(v575 + 8);
        if (!v575) {
          goto LABEL_737;
        }
      }
      return 0;
    }
  }
LABEL_867:
  uint64_t v658 = **((void **)v65 - 4);
  int v659 = v567 & 0x7FFFFFF;
  if ((v567 & 0x10000000) != 0)
  {
    uint64_t v660 = ***(void ***)v1024;
    uint64_t v661 = *(void *)(v660 + 152);
    uint64_t v662 = *(unsigned int *)(v660 + 168);
    if (v662)
    {
      LODWORD(v663) = (v662 - 1) & ((v1024 >> 4) ^ (v1024 >> 9));
      v664 = (uint64_t *)(v661 + 16 * v663);
      uint64_t v665 = *v664;
      if (*v664 == v1024)
      {
LABEL_875:
        uint64_t v668 = (void *)v664[1];
        uint64_t v671 = (void *)*v668;
        uint64_t v669 = (char *)(v668 + 2);
        __int16 v670 = v671;
        goto LABEL_876;
      }
      int v666 = 1;
      while (v665 != -4096)
      {
        int v667 = v663 + v666++;
        uint64_t v663 = v667 & (v662 - 1);
        uint64_t v665 = *(void *)(v661 + 16 * v663);
        if (v665 == v1024)
        {
          v664 = (uint64_t *)(v661 + 16 * v663);
          goto LABEL_875;
        }
      }
    }
    v664 = (uint64_t *)(v661 + 16 * v662);
    goto LABEL_875;
  }
  __int16 v670 = 0;
  uint64_t v669 = &byte_1CFBCE98E;
LABEL_876:
  LOWORD(v1103) = 773;
  v1101[0] = v669;
  v1101[1] = v670;
  *(void *)&long long v1102 = ".in";
  uint64_t v2 = (unsigned __int16 *)operator new(0x48uLL);
  *((void *)v2 + 1) = v658;
  uint64_t v38 = (char *)(v2 + 4);
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0x4000000000000053;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 0;
  *((_DWORD *)v2 + 17) = v659;
  llvm::Value::setNameImpl((llvm::Value *)(v2 + 4), (const char **)v1101);
  uint64_t v1067 = (llvm::Value *)(v2 + 4);
  if (!*((unsigned char *)v2 + 24))
  {
    if ((*((unsigned char *)v2 + 31) & 0x10) == 0) {
      goto LABEL_1241;
    }
    uint64_t v785 = ***(void ***)v1067;
    uint64_t v786 = *(void *)(v785 + 152);
    uint64_t v787 = *(unsigned int *)(v785 + 168);
    if (v787)
    {
      LODWORD(v788) = (v787 - 1) & ((v1067 >> 4) ^ (v1067 >> 9));
      uint64_t v789 = (llvm::Value **)(v786 + 16 * v788);
      uint64_t v790 = *v789;
      if (*v789 == v1067)
      {
LABEL_1234:
        BOOL v956 = v789[1];
        unint64_t v959 = *(void *)v956;
        uint64_t v957 = (char *)v956 + 16;
        unint64_t v958 = v959;
        if (v959 >= 5 && *(_DWORD *)v957 == *(_DWORD *)"llvm." && v957[4] == aLlvm_1[4])
        {
          *((_DWORD *)v2 + 10) |= 0x2000u;
          int v961 = llvm::Function::lookupIntrinsicID(v957, v958);
LABEL_1242:
          *((_DWORD *)v2 + 11) = v961;
          uint64_t v38 = (char *)(v2 + 4);
          goto LABEL_877;
        }
LABEL_1241:
        int v961 = 0;
        *((_DWORD *)v2 + 10) &= ~0x2000u;
        goto LABEL_1242;
      }
      int v791 = 1;
      while (v790 != (llvm::Value *)-4096)
      {
        int v792 = v788 + v791++;
        uint64_t v788 = v792 & (v787 - 1);
        uint64_t v790 = *(llvm::Value **)(v786 + 16 * v788);
        if (v790 == v1067)
        {
          uint64_t v789 = (llvm::Value **)(v786 + 16 * v788);
          goto LABEL_1234;
        }
      }
    }
    uint64_t v789 = (llvm::Value **)(v786 + 16 * v787);
    goto LABEL_1234;
  }
LABEL_877:
  uint64_t v672 = *((unsigned int *)v2 + 17);
  uint64_t v673 = operator new(40 * v672);
  *(void *)uint64_t v2 = v673;
  if (v672)
  {
    uint64_t v674 = v673;
    do
    {
      *uint64_t v674 = 0;
      v674[1] = 0;
      v674[2] = 0;
      v674[3] = v38;
      v674 += 4;
    }
    while (v674 != &v673[4 * v672]);
  }
  int v675 = *(_DWORD *)(v1024 + 20);
  if ((v675 & 0x40000000) != 0) {
    uint64_t v676 = *(void *)(v1024 - 8);
  }
  else {
    uint64_t v676 = v1024 - 32 * (v675 & 0x7FFFFFF);
  }
  int64_t v1084 = (llvm::Value *)*((void *)v65 - 4);
  int v72 = *(void **)(v676 + 32 * *(unsigned int *)(v1024 + 60));
  int v677 = *((_DWORD *)v2 + 7);
  uint64_t v678 = v677 & 0x7FFFFFF;
  if ((v677 & 0x7FFFFFF) == *((_DWORD *)v2 + 17))
  {
    unsigned int v767 = v678 + (v678 >> 1);
    if (v767 <= 2) {
      uint64_t v768 = 2;
    }
    else {
      uint64_t v768 = v767;
    }
    *((_DWORD *)v2 + 17) = v768;
    uint64_t v769 = (uint64_t *)&v38[-32 * v678];
    if ((v677 & 0x40000000) != 0) {
      uint64_t v769 = v673;
    }
    __pf = v769;
    uint64_t v770 = operator new(40 * v768);
    *(void *)uint64_t v2 = v770;
    uint64_t v771 = v770;
    do
    {
      *uint64_t v771 = 0;
      v771[1] = 0;
      v771[2] = 0;
      v771[3] = v38;
      v771 += 4;
    }
    while (v771 != &v770[4 * v768]);
    int v772 = *((_DWORD *)v2 + 7);
    if ((v772 & 0x40000000) != 0) {
      uint64_t v773 = (uint64_t)v770;
    }
    else {
      uint64_t v773 = (uint64_t)&v38[-32 * (v772 & 0x7FFFFFF)];
    }
    sub_1CC5E4108((uint64_t)v1101, __pf, &__pf[4 * v678], v773);
    if (v678)
    {
      memmove((void *)(v773 + 32 * v768), &__pf[4 * v678], 8 * v678);
      uint64_t v774 = 4 * v678;
      do
      {
        BOOL v775 = &__pf[v774];
        if (__pf[v774 - 4])
        {
          *(void *)*(v775 - 2) = *(v775 - 3);
          uint64_t v776 = *(v775 - 3);
          if (v776) {
            *(void *)(v776 + 16) = *(v775 - 2);
          }
        }
        v774 -= 4;
      }
      while (v774 * 8);
    }
    operator delete(__pf);
    int v677 = *((_DWORD *)v2 + 7);
    uint64_t v38 = (char *)(v2 + 4);
  }
  uint64_t v118 = (v677 + 1) & 0x7FFFFFF;
  *((_DWORD *)v2 + 7) = v677 & 0xF8000000 | (v677 + 1) & 0x7FFFFFF;
  uint64_t v121 = (v118 - 1);
  if ((v677 & 0x40000000) != 0) {
    int v679 = *(char **)v2;
  }
  else {
LABEL_1331:
  }
    int v679 = &v38[-32 * v118];
  unsigned int v680 = &v679[32 * v121];
  if (*(void *)v680)
  {
    **((void **)v680 + 2) = *((void *)v680 + 1);
    uint64_t v766 = *((void *)v680 + 1);
    if (v766) {
      *(void *)(v766 + 16) = *((void *)v680 + 2);
    }
  }
  *(void *)unsigned int v680 = v1084;
  if (v1084)
  {
    unint64_t v681 = (char **)((char *)v1084 + 8);
    uint64_t v682 = *((void *)v1084 + 1);
    unint64_t v683 = &v679[32 * v121];
    *((void *)v683 + 1) = v682;
    if (v682) {
      *(void *)(v682 + 16) = v683 + 8;
    }
    *((void *)v683 + 2) = v681;
    *unint64_t v681 = v680;
  }
  int v684 = *((_DWORD *)v2 + 7);
  uint64_t v685 = v684 & 0x7FFFFFF;
  if ((v684 & 0x40000000) != 0) {
    unsigned int v686 = *(char **)v2;
  }
  else {
    unsigned int v686 = &v38[-32 * v685];
  }
  *(void *)&v686[32 * *((unsigned int *)v2 + 17) + 8 * (v685 - 1)] = v72;
  v687 = (char *)operator new(0x60uLL);
  uint64_t v38 = v687 + 32;
  *((_DWORD *)v687 + 13) = *((_DWORD *)v687 + 13) & 0x38000000 | 1;
  *(void *)v687 = 0;
  *((void *)v687 + 1) = 0;
  *((void *)v687 + 2) = 0;
  *((void *)v687 + 3) = v687 + 32;
  uint64_t v1040 = v687;
  uint64_t v688 = *(uint64_t ***)v65;
  LOWORD(v1103) = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v687 + 32), (uint64_t)v688, (uint64_t)v1067, (const char **)v1101, v70 & 1, v3, 0);
  uint64_t v689 = 0;
  *(_OWORD *)uint64_t v1101 = xmmword_1CFB27A84;
  long long v1102 = unk_1CFB27A94;
  uint64_t v1103 = 0x190000000DLL;
  unsigned int v690 = (v65 >> 4) ^ (v65 >> 9);
  do
  {
    int v691 = *((_DWORD *)v1101 + v689);
    uint64_t v692 = (llvm::MDNode *)*((void *)v65 + 6);
    if (!v692 && (v65[23] & 0x20) == 0) {
      goto LABEL_913;
    }
    if (!v691) {
      goto LABEL_914;
    }
    if ((v65[23] & 0x20) == 0)
    {
LABEL_913:
      uint64_t v692 = 0;
      goto LABEL_914;
    }
    uint64_t v693 = ***(void ***)v65;
    v1098[0] = v65;
    int v694 = *(_DWORD *)(v693 + 2496);
    if (v694)
    {
      uint64_t v695 = *(void *)(v693 + 2480);
      int v696 = v694 - 1;
      unsigned int v697 = v696 & v690;
      long long v698 = (const char **)(v695 + 40 * (v696 & v690));
      uint64_t v699 = *v698;
      if (*v698 == v65) {
        goto LABEL_908;
      }
      uint64_t v700 = 0;
      int v701 = 1;
      while (v699 != (const char *)-4096)
      {
        if (v700) {
          BOOL v702 = 0;
        }
        else {
          BOOL v702 = v699 == (const char *)-8192;
        }
        if (v702) {
          uint64_t v700 = v698;
        }
        unsigned int v703 = v697 + v701++;
        unsigned int v697 = v703 & v696;
        long long v698 = (const char **)(v695 + 40 * v697);
        uint64_t v699 = *v698;
        if (*v698 == v65) {
          goto LABEL_908;
        }
      }
      if (v700) {
        uint64_t v708 = v700;
      }
      else {
        uint64_t v708 = v698;
      }
    }
    else
    {
      uint64_t v708 = 0;
    }
    long long v698 = (const char **)sub_1CC609054(v693 + 2480, (uint64_t)v1098, (uint64_t *)v1098, v708);
    long long v709 = v1098[0];
    v698[4] = 0;
    v698[3] = 0;
    *long long v698 = v709;
    v698[1] = (const char *)(v698 + 3);
    v698[2] = (const char *)0x100000000;
LABEL_908:
    uint64_t v704 = *((unsigned int *)v698 + 4);
    if (!v704) {
      goto LABEL_913;
    }
    uint64_t v705 = (llvm::MDNode **)(v698[1] + 8);
    uint64_t v706 = 16 * v704;
    while (*((_DWORD *)v705 - 2) != v691)
    {
      uint64_t v692 = 0;
      v705 += 2;
      v706 -= 16;
      if (!v706) {
        goto LABEL_914;
      }
    }
    uint64_t v692 = *v705;
LABEL_914:
    llvm::Instruction::setMetadata((llvm::Instruction *)v38, v691, v692);
    ++v689;
  }
  while (v689 != 10);
  char __srcd = v70;
  uint64_t v710 = v1024;
  int v711 = *(_DWORD *)(v1024 + 20);
  if ((v711 & 0x40000000) != 0)
  {
    uint64_t v713 = *(void *)(v1024 - 8);
    uint64_t v714 = v713 + 32 * *(unsigned int *)(v1024 + 60);
    uint64_t v712 = v711 & 0x7FFFFFF;
    v715 = (uint64_t *)(v714 + 8 * v712);
  }
  else
  {
    uint64_t v712 = v711 & 0x7FFFFFF;
    uint64_t v713 = v1024 - 32 * v712;
    uint64_t v714 = v713 + 32 * *(unsigned int *)(v1024 + 60);
    v715 = (uint64_t *)(v714 + 8 * v712);
  }
  unsigned int v716 = v1084;
  unsigned int v717 = (uint64_t *)(v714 + 8);
  uint64_t v718 = (unsigned char **)(v713 + 32 * v712);
  unint64_t v719 = (unsigned char **)(v713 + 32);
  __pe = v718;
  if ((uint64_t *)(v714 + 8) != v715 && v719 != v718)
  {
    do
    {
      uint64_t v735 = *v717;
      uint64_t v736 = (uint64_t)*v719;
      llvm::combineMetadata((llvm::Instruction *)v38, *v719, (unsigned int *)v1101, 10, 1);
      unint64_t v737 = *(llvm::Value **)(v736 - 32);
      if (v737 != v716) {
        unsigned int v716 = 0;
      }
      int v738 = *((_DWORD *)v2 + 7);
      uint64_t v739 = v738 & 0x7FFFFFF;
      if ((v738 & 0x7FFFFFF) == *((_DWORD *)v2 + 17))
      {
        LODWORD(v752) = v739 + (v739 >> 1);
        if (v752 <= 2) {
          uint64_t v752 = 2;
        }
        else {
          uint64_t v752 = v752;
        }
        uint64_t v1062 = v752;
        *((_DWORD *)v2 + 17) = v752;
        if ((v738 & 0x40000000) != 0)
        {
          unint64_t v1081 = *(uint64_t **)v2;
          uint64_t v753 = v1067;
        }
        else
        {
          uint64_t v753 = v1067;
          unint64_t v1081 = (uint64_t *)((char *)v1067 - 32 * v739);
        }
        uint64_t v754 = operator new(40 * v752);
        *(void *)uint64_t v2 = v754;
        v755 = v754;
        do
        {
          void *v755 = 0;
          v755[1] = 0;
          v755[2] = 0;
          v755[3] = v753;
          v755 += 4;
        }
        while (v755 != &v754[4 * v1062]);
        int v756 = *((_DWORD *)v2 + 7);
        if ((v756 & 0x40000000) != 0) {
          uint64_t v757 = (uint64_t)v754;
        }
        else {
          uint64_t v757 = (uint64_t)v753 - 32 * (v756 & 0x7FFFFFF);
        }
        v1054 = (char *)v757;
        sub_1CC5E4108((uint64_t)v1098, v1081, &v1081[4 * v739], v757);
        if (v739)
        {
          memmove(&v1054[32 * v1062], &v1081[4 * v739], 8 * v739);
          uint64_t v758 = 4 * v739;
          do
          {
            uint64_t v759 = &v1081[v758];
            if (v1081[v758 - 4])
            {
              *(void *)*(v759 - 2) = *(v759 - 3);
              uint64_t v760 = *(v759 - 3);
              if (v760) {
                *(void *)(v760 + 16) = *(v759 - 2);
              }
            }
            v758 -= 4;
          }
          while (v758 * 8);
        }
        operator delete(v1081);
        int v738 = *((_DWORD *)v2 + 7);
        uint64_t v710 = v1024;
      }
      uint64_t v740 = (v738 + 1) & 0x7FFFFFF;
      *((_DWORD *)v2 + 7) = v738 & 0xF8000000 | (v738 + 1) & 0x7FFFFFF;
      if ((v738 & 0x40000000) != 0) {
        v741 = *(char **)v2;
      }
      else {
        v741 = (char *)v1067 - 32 * v740;
      }
      uint64_t v742 = (v740 - 1);
      unsigned int v743 = &v741[32 * v742];
      if (*(void *)v743)
      {
        **((void **)v743 + 2) = *((void *)v743 + 1);
        uint64_t v751 = *((void *)v743 + 1);
        if (v751) {
          *(void *)(v751 + 16) = *((void *)v743 + 2);
        }
      }
      *(void *)unsigned int v743 = v737;
      if (v737)
      {
        uint64_t v746 = *((void *)v737 + 1);
        int v745 = (char **)((char *)v737 + 8);
        uint64_t v744 = v746;
        int v747 = &v741[32 * v742];
        *((void *)v747 + 1) = v746;
        if (v746) {
          *(void *)(v744 + 16) = v747 + 8;
        }
        *((void *)v747 + 2) = v745;
        *int v745 = v743;
      }
      int v748 = *((_DWORD *)v2 + 7);
      uint64_t v749 = v748 & 0x7FFFFFF;
      if ((v748 & 0x40000000) != 0) {
        unsigned int v750 = *(char **)v2;
      }
      else {
        unsigned int v750 = (char *)v1067 - 32 * v749;
      }
      *(void *)&v750[32 * *((unsigned int *)v2 + 17) + 8 * (v749 - 1)] = v735;
      if (++v717 == v715) {
        break;
      }
      v719 += 4;
    }
    while (v719 != __pe);
  }
  if (!v716)
  {
    sub_1CCA331D4(v1029, v1067, v710);
LABEL_987:
    char v721 = __srcd;
    goto LABEL_988;
  }
  char v721 = __srcd;
  if (*(void *)v1040)
  {
    **((void **)v1040 + 2) = *((void *)v1040 + 1);
    uint64_t v722 = *((void *)v1040 + 1);
    if (v722) {
      *(void *)(v722 + 16) = *((void *)v1040 + 2);
    }
  }
  *(void *)uint64_t v1040 = v716;
  uint64_t v725 = *((void *)v716 + 1);
  uint8x8_t v724 = (void *)((char *)v716 + 8);
  uint64_t v723 = v725;
  *((void *)v1040 + 1) = v725;
  if (v725) {
    *(void *)(v723 + 16) = v1040 + 8;
  }
  *((void *)v1040 + 2) = v724;
  *uint8x8_t v724 = v1040;
  if ((*((unsigned char *)v2 + 31) & 8) != 0)
  {
    int v1018 = llvm::UndefValue::get(*(llvm::UndefValue **)v1067, v707);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)v1067, v1018, v1019);
  }
  int v726 = (unsigned __int8 *)*((void *)v2 + 7);
  if (v726)
  {
    int v777 = *v726;
    if ((v777 - 4) > 0x1E)
    {
      if ((v777 - 3) >= 0xFFFFFFFE) {
        uint64_t v784 = *((void *)v2 + 7);
      }
      else {
        uint64_t v784 = 0;
      }
      if ((v777 - 3) < 0xFFFFFFFE)
      {
        uint64_t v710 = v1024;
        char v721 = __srcd;
        if (v777 == 3) {
          *((void *)v726 + 1) = 0;
        }
        goto LABEL_939;
      }
      unint64_t v779 = v784 + 8;
    }
    else
    {
      uint64_t v710 = v1024;
      char v721 = __srcd;
      if ((v726[1] & 0x7F) != 2 && !*((_DWORD *)v726 + 3)) {
        goto LABEL_939;
      }
      uint64_t v778 = *((void *)v726 + 2);
      if ((v778 & 4) == 0) {
        goto LABEL_939;
      }
      unint64_t v779 = v778 & 0xFFFFFFFFFFFFFFF8;
      if (!v779) {
        goto LABEL_939;
      }
    }
    v1098[0] = (const char *)(v2 + 28);
    sub_1CC5FA668(v779 + 16, v1098);
    uint64_t v710 = v1024;
    char v721 = __srcd;
  }
LABEL_939:
  llvm::Value::~Value(v1067, v707);
  int v728 = *((_DWORD *)v2 + 7);
  uint64_t v729 = v728 & 0x7FFFFFF;
  if ((v728 & 0x40000000) != 0)
  {
    uint64_t v780 = *(char **)v2;
    if (v729)
    {
      uint64_t v781 = 32 * v729;
      do
      {
        uint64_t v782 = &v780[v781];
        if (*(void *)&v780[v781 - 32])
        {
          **((void **)v782 - 2) = *((void *)v782 - 3);
          uint64_t v783 = *((void *)v782 - 3);
          if (v783) {
            *(void *)(v783 + 16) = *((void *)v782 - 2);
          }
        }
        v781 -= 32;
      }
      while (v781);
    }
    operator delete(v780);
    operator delete(v2);
    uint64_t v710 = v1024;
    goto LABEL_987;
  }
  uint64_t v730 = v729;
  uint64_t v731 = (char *)(v727 - 32 * v729);
  if (v729)
  {
    uint64_t v732 = v2 - 4;
    uint64_t v733 = -32 * v730;
    do
    {
      if (*((void *)v732 - 2))
      {
        **(void **)uint64_t v732 = *((void *)v732 - 1);
        uint64_t v734 = *((void *)v732 - 1);
        if (v734) {
          *(void *)(v734 + 16) = *(void *)v732;
        }
      }
      v732 -= 16;
      v733 += 32;
    }
    while (v733);
  }
  if (v728 < 0) {
    uint64_t v731 = &v731[-*((void *)v731 - 1) - 8];
  }
  operator delete(v731);
LABEL_988:
  if (v721)
  {
    int v761 = *(_DWORD *)(v710 + 20);
    if ((v761 & 0x40000000) != 0)
    {
      uint64_t v763 = *(uint64_t **)(v710 - 8);
      uint64_t v762 = v761 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v762 = v761 & 0x7FFFFFF;
      uint64_t v763 = (uint64_t *)(v710 - 32 * v762);
    }
    if (v762)
    {
      uint64_t v764 = 32 * v762;
      do
      {
        uint64_t v765 = *v763;
        v763 += 4;
        *(_WORD *)(v765 + 18) &= ~1u;
        v764 -= 32;
      }
      while (v764);
    }
  }
  uint64_t v225 = (unsigned __int8 **)v38;
  uint64_t v367 = v710;
LABEL_497:
  sub_1CCA8E8DC(v225, v367);
  return v38;
}

uint64_t sub_1CCA935C8(uint64_t a1, _OWORD *a2)
{
  uint64_t v24 = 0;
  char v4 = sub_1CCA98688(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v24);
  uint64_t v5 = v24;
  if (v4) {
    return v5 + 16;
  }
  uint64_t v25 = v24;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v8 = 2 * v7;
    goto LABEL_11;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_11:
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    int v15 = operator new(24 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      if (v16)
      {
        uint64_t v17 = 24 * v16;
        do
        {
          *int v15 = 0;
          v15[1] = 0;
          v15 += 3;
          v17 -= 24;
        }
        while (v17);
      }
      if (v7)
      {
        uint64_t v18 = 24 * v7;
        uint64_t v19 = v10;
        do
        {
          if (*(void *)v19 || *(_DWORD *)(v19 + 8) > 1u || *(_DWORD *)(v19 + 12))
          {
            BOOL v26 = 0;
            sub_1CCA98688(*(void *)a1, *(_DWORD *)(a1 + 16), v19, &v26);
            int v20 = v26;
            *BOOL v26 = *(_OWORD *)v19;
            *((void *)v20 + 2) = *(void *)(v19 + 16);
            ++*(_DWORD *)(a1 + 8);
          }
          v19 += 24;
          v18 -= 24;
        }
        while (v18);
      }
      MEMORY[0x1D25D9CD0](v10, 8);
      int v15 = *(void **)a1;
      LODWORD(v21) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v21 = *(unsigned int *)(a1 + 16);
      if (v21)
      {
        uint64_t v22 = 0;
        do
        {
          int v23 = &v15[v22];
          *int v23 = 0;
          v23[1] = 0;
          v22 += 3;
        }
        while (3 * v21 != v22);
      }
    }
    sub_1CCA98688((uint64_t)v15, v21, (uint64_t)a2, &v25);
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(void *)v5 || *(_DWORD *)(v5 + 8) || *(_DWORD *)(v5 + 12)) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_OWORD *)uint64_t v5 = *a2;
  *(void *)(v5 + 16) = 0;
  return v5 + 16;
}

_DWORD *sub_1CCA937E4(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CBA7B248(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          void *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

llvm::UndefValue **sub_1CCA93834(uint64_t a1, llvm *this, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  uint64_t v813 = *MEMORY[0x1E4F143B8];
  long long v9 = *(_OWORD *)(a1 + 120);
  long long v10 = *(_OWORD *)(a1 + 104);
  long long v800 = *(_OWORD *)(a1 + 88);
  long long v801 = v10;
  v802[1] = *((void *)&v9 + 1);
  v802[0] = this;
  int v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x40000000) != 0)
  {
    int v13 = (uint64_t *)*((void *)this - 1);
    unint64_t v12 = v11 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v12 = v11 & 0x7FFFFFF;
    int v13 = (uint64_t *)((char *)this - 32 * v12);
  }
  __base = &v809;
  size_t __nel = 0x800000000;
  if (v12 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v12)
  {
    uint64_t v14 = 32 * v12;
    int v15 = &v809;
    do
    {
      uint64_t v16 = *v13;
      v13 += 4;
      *v15++ = v16;
      v14 -= 32;
    }
    while (v14);
    uint64_t v17 = (uint64_t *)__base;
  }
  else
  {
    uint64_t v17 = &v809;
  }
  LODWORD(__nel) = v12;
  uint64_t v19 = llvm::SimplifyInstructionWithOperands(this, (uint64_t)v17, v12, (uint64_t)&v800, a5, a6, a7);
  if (__base == &v809)
  {
    if (v19)
    {
LABEL_11:
      uint64_t v20 = a1;
      uint64_t v21 = this;
      uint64_t v22 = v19;
      return sub_1CC9D3C84(v20, v21, v22);
    }
  }
  else
  {
    free(__base);
    if (v19) {
      goto LABEL_11;
    }
  }
  uint64_t v25 = *((void *)this + 5);
  uint64_t v26 = *(void *)(v25 + 40);
  if (v26 == v25 + 40
    || (v26 ? (uint64_t v27 = v26 - 24) : (uint64_t v27 = 0),
        (int v28 = *(unsigned __int8 *)(v27 + 16), (v28 - 29) > 0xA)
     || ((v29 = v28 - 38, BOOL v49 = v29 > 0x38, v30 = (1 << v29) & 0x100060000000001, !v49)
       ? (BOOL v31 = v30 == 0)
       : (BOOL v31 = 1),
         v31)))
  {
    int v32 = *((_DWORD *)this + 5);
    unsigned int v33 = v32 & 0x7FFFFFF;
    if ((v32 & 0x7FFFFFFu) >= 3)
    {
      if ((v32 & 0x40000000) != 0)
      {
        uint64_t v35 = (uint64_t *)*((void *)this - 1);
        uint64_t v34 = v32 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v34 = v33;
        uint64_t v35 = (uint64_t *)((char *)this - 32 * v33);
      }
      uint64_t v36 = 32 * v34;
      while (1)
      {
        uint64_t v37 = *v35;
        if (*v35)
        {
          if (*(unsigned char *)(v37 + 16) == 67) {
            break;
          }
        }
        v35 += 4;
        v36 -= 32;
        if (!v36) {
          goto LABEL_64;
        }
      }
      uint64_t v38 = **(llvm::Constant ***)(v37 - 32);
      if (v38)
      {
        __base = &v809;
        size_t __nel = 0x400000000;
        if ((v32 & 0x40000000) != 0) {
          uint64_t v39 = (llvm::detail::IEEEFloat **)*((void *)this - 1);
        }
        else {
          uint64_t v39 = (llvm::detail::IEEEFloat **)((char *)this - 32 * v34);
        }
        unsigned int v40 = 0;
        int v41 = 0;
        unsigned int v42 = 0;
        char v43 = &v39[4 * v34];
        do
        {
          __int16 v44 = *v39;
          unsigned int v45 = *((unsigned __int8 *)*v39 + 16);
          if (*v39 && v45 == 67)
          {
            int v46 = (llvm::Constant **)*((void *)v44 - 4);
            if (*v46 != v38) {
              goto LABEL_60;
            }
            uint64_t v47 = *((void *)v44 + 1);
            if (!v47) {
              goto LABEL_60;
            }
            uint64_t v48 = *(void *)(v47 + 8);
            if (v48)
            {
              while (*(void *)(v48 + 24) == *(void *)(v47 + 24))
              {
                uint64_t v47 = *(void *)(v47 + 8);
                uint64_t v48 = *(void *)(v48 + 8);
                if (!v48) {
                  goto LABEL_47;
                }
              }
LABEL_60:
              ZExtOrBitCast = 0;
              goto LABEL_61;
            }
LABEL_47:
            if (v40 >= HIDWORD(__nel)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__base + v40) = v46;
            unsigned int v40 = __nel + 1;
            LODWORD(__nel) = __nel + 1;
            ++v42;
          }
          else
          {
            if (v44) {
              BOOL v49 = v45 > 0x14;
            }
            else {
              BOOL v49 = 1;
            }
            if (v49) {
              goto LABEL_60;
            }
            uint64_t v50 = sub_1CC56C0C0((llvm *)0x26, *v39, v38, 0);
            if (sub_1CC56C0C0((llvm *)0x27, v50, *(llvm::Constant **)v44, 0) != v44) {
              goto LABEL_60;
            }
            if (__nel >= (unint64_t)HIDWORD(__nel)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__base + __nel) = v50;
            unsigned int v40 = __nel + 1;
            LODWORD(__nel) = __nel + 1;
            ++v41;
          }
          v39 += 4;
        }
        while (v39 != v43);
        ZExtOrBitCast = 0;
        if (!v41 || v42 < 2) {
          goto LABEL_61;
        }
        if ((*((unsigned char *)this + 23) & 0x10) == 0)
        {
          uint64_t v569 = 0;
          uint64_t v568 = &byte_1CFBCE98E;
LABEL_964:
          LOWORD(v802[0]) = 773;
          *(void *)&long long v800 = v568;
          *((void *)&v800 + 1) = v569;
          *(void *)&long long v801 = ".shrunk";
          int v571 = operator new(0x48uLL);
          v571[1] = v38;
          uint64_t v572 = (llvm::Value *)(v571 + 1);
          void *v571 = 0;
          v571[2] = 0;
          v571[3] = 0x4000000000000053;
          *((_OWORD *)v571 + 2) = 0u;
          uint64_t v770 = (llvm::Value *)(v571 + 4);
          *((_OWORD *)v571 + 3) = 0u;
          *((_DWORD *)v571 + 16) = 0;
          *((_DWORD *)v571 + 17) = v33;
          llvm::Value::setNameImpl((llvm::Value *)(v571 + 1), (const char **)&v800);
          unsigned int v771 = (v571 + 8) >> 4;
          uint64_t v773 = (llvm::DominatorTree *)(v571 + 1);
          if (*((unsigned char *)v571 + 24)) {
            goto LABEL_965;
          }
          if ((*((unsigned char *)v571 + 31) & 0x10) == 0) {
            goto LABEL_1177;
          }
          uint64_t v636 = ***(void ***)v773;
          uint64_t v637 = *(void *)(v636 + 152);
          uint64_t v638 = *(unsigned int *)(v636 + 168);
          if (v638)
          {
            LODWORD(v639) = (v638 - 1) & (v771 ^ (v773 >> 9));
            int v640 = (llvm::DominatorTree **)(v637 + 16 * v639);
            uint64_t v641 = *v640;
            if (*v640 == v773)
            {
LABEL_1170:
              uint64_t v733 = v640[1];
              unint64_t v736 = *(void *)v733;
              uint64_t v734 = (char *)v733 + 16;
              unint64_t v735 = v736;
              if (v736 >= 5 && *(_DWORD *)v734 == *(_DWORD *)"llvm." && v734[4] == aLlvm_1[4])
              {
                *((_DWORD *)v571 + 10) |= 0x2000u;
                int v738 = llvm::Function::lookupIntrinsicID(v734, v735);
LABEL_1178:
                *((_DWORD *)v571 + 11) = v738;
                uint64_t v572 = (llvm::Value *)(v571 + 1);
LABEL_965:
                uint64_t v573 = *((unsigned int *)v571 + 17);
                uint64_t v574 = operator new(40 * v573);
                void *v571 = v574;
                if (v573)
                {
                  int v576 = &v574[4 * v573];
                  do
                  {
                    *uint64_t v574 = 0;
                    v574[1] = 0;
                    v574[2] = 0;
                    v574[3] = v572;
                    v574 += 4;
                  }
                  while (v574 != v576);
                }
                uint64_t v577 = 0;
                do
                {
                  int v578 = *((_DWORD *)this + 5);
                  if ((v578 & 0x40000000) != 0) {
                    int v579 = (char *)*((void *)this - 1);
                  }
                  else {
                    int v579 = (char *)this - 32 * (v578 & 0x7FFFFFF);
                  }
                  uint64_t v580 = *((void *)__base + v577);
                  uint64_t v581 = *(void *)&v579[32 * *((unsigned int *)this + 15) + 8 * v577];
                  int v582 = *((_DWORD *)v571 + 7);
                  uint64_t v583 = v582 & 0x7FFFFFF;
                  if ((v582 & 0x7FFFFFF) == *((_DWORD *)v571 + 17))
                  {
                    unsigned int v596 = v583 + (v583 >> 1);
                    if (v596 <= 2) {
                      uint64_t v597 = 2;
                    }
                    else {
                      uint64_t v597 = v596;
                    }
                    *((_DWORD *)v571 + 17) = v597;
                    if ((v582 & 0x40000000) != 0) {
                      int v598 = (uint64_t *)*v571;
                    }
                    else {
                      int v598 = (uint64_t *)((char *)v572 - 32 * v583);
                    }
                    uint64_t v783 = v598;
                    uint64_t v599 = operator new(40 * v597);
                    void *v571 = v599;
                    uint64_t v600 = v599;
                    do
                    {
                      *uint64_t v600 = 0;
                      v600[1] = 0;
                      v600[2] = 0;
                      v600[3] = v572;
                      v600 += 4;
                    }
                    while (v600 != &v599[4 * v597]);
                    int v601 = *((_DWORD *)v571 + 7);
                    if ((v601 & 0x40000000) != 0) {
                      uint64_t v602 = (uint64_t)v599;
                    }
                    else {
                      uint64_t v602 = (uint64_t)v572 - 32 * (v601 & 0x7FFFFFF);
                    }
                    uint64_t v777 = v602;
                    sub_1CC5E4108((uint64_t)&v800, v783, &v783[4 * v583], v602);
                    if (v583)
                    {
                      memmove((void *)(v777 + 32 * v597), &v783[4 * v583], 8 * v583);
                      uint64_t v603 = 4 * v583;
                      do
                      {
                        uint64_t v604 = &v783[v603];
                        if (v783[v603 - 4])
                        {
                          *(void *)*(v604 - 2) = *(v604 - 3);
                          uint64_t v605 = *(v604 - 3);
                          if (v605) {
                            *(void *)(v605 + 16) = *(v604 - 2);
                          }
                        }
                        v603 -= 4;
                      }
                      while (v603 * 8);
                    }
                    operator delete(v783);
                    int v582 = *((_DWORD *)v571 + 7);
                    uint64_t v572 = (llvm::Value *)(v571 + 1);
                  }
                  uint64_t v584 = (v582 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v571 + 7) = v582 & 0xF8000000 | (v582 + 1) & 0x7FFFFFF;
                  if ((v582 & 0x40000000) != 0) {
                    unsigned int v585 = (char *)*v571;
                  }
                  else {
                    unsigned int v585 = (char *)v572 - 32 * v584;
                  }
                  uint64_t v586 = (v584 - 1);
                  int v587 = &v585[32 * v586];
                  if (*(void *)v587)
                  {
                    **((void **)v587 + 2) = *((void *)v587 + 1);
                    uint64_t v595 = *((void *)v587 + 1);
                    if (v595) {
                      *(void *)(v595 + 16) = *((void *)v587 + 2);
                    }
                  }
                  *(void *)int v587 = v580;
                  if (v580)
                  {
                    uint64_t v590 = *(void *)(v580 + 8);
                    uint64_t v589 = (char **)(v580 + 8);
                    uint64_t v588 = v590;
                    uint64_t v591 = &v585[32 * v586];
                    *((void *)v591 + 1) = v590;
                    if (v590) {
                      *(void *)(v588 + 16) = v591 + 8;
                    }
                    *((void *)v591 + 2) = v589;
                    void *v589 = v587;
                  }
                  int v592 = *((_DWORD *)v571 + 7);
                  uint64_t v593 = v592 & 0x7FFFFFF;
                  if ((v592 & 0x40000000) != 0) {
                    uint64_t v594 = (char *)*v571;
                  }
                  else {
                    uint64_t v594 = (char *)v572 - 32 * v593;
                  }
                  *(void *)&v594[32 * *((unsigned int *)v571 + 17) + 8 * (v593 - 1)] = v581;
                  ++v577;
                }
                while (v33 != v577);
                uint64_t v606 = *((void *)this + 5);
                uint64_t v607 = (llvm::Value **)((char *)this + 24);
                v571[6] = v606;
                *(_WORD *)(v606 + 18) &= ~0x8000u;
                if ((*((unsigned char *)v571 + 31) & 0x10) != 0)
                {
                  uint64_t v624 = *(void *)(v606 + 56);
                  if (v624)
                  {
                    uint64_t v625 = *(llvm::ValueSymbolTable **)(v624 + 104);
                    if (v625) {
                      llvm::ValueSymbolTable::reinsertValue(v625, v572);
                    }
                  }
                }
                int v608 = *v607;
                v571[4] = *v607;
                v571[5] = v607;
                *((void *)v608 + 1) = v770;
                *uint64_t v607 = v770;
                uint64_t v609 = *(void *)(a1 + 32);
                *(void *)&long long v800 = v572;
                if (*(unsigned char *)(v609 + 2088))
                {
                  uint64_t v611 = v609 + 2096;
                  int v610 = 16;
                }
                else
                {
                  int v610 = *(_DWORD *)(v609 + 2104);
                  if (!v610)
                  {
                    uint64_t v620 = 0;
                    goto LABEL_1023;
                  }
                  uint64_t v611 = *(void *)(v609 + 2096);
                }
                int v612 = v610 - 1;
                unsigned int v613 = v612 & (v771 ^ (v572 >> 9));
                BOOL v614 = (llvm::Value **)(v611 + 8 * v613);
                uint64_t v615 = *v614;
                if (v572 == *v614)
                {
LABEL_1025:
                  int v623 = *(llvm::Type ****)this;
                  LOWORD(v802[0]) = 257;
                  ZExtOrBitCast = llvm::CastInst::CreateZExtOrBitCast(v572, v623, (const char **)&v800, 0, v575);
LABEL_61:
                  if (__base != &v809) {
                    free(__base);
                  }
                  if (ZExtOrBitCast) {
                    return (llvm::UndefValue **)ZExtOrBitCast;
                  }
                  goto LABEL_64;
                }
                v616 = 0;
                int v617 = 1;
                while (v615 != (llvm::Value *)-4096)
                {
                  if (v616) {
                    BOOL v618 = 0;
                  }
                  else {
                    BOOL v618 = v615 == (llvm::Value *)-8192;
                  }
                  if (v618) {
                    v616 = v614;
                  }
                  unsigned int v619 = v613 + v617++;
                  unsigned int v613 = v619 & v612;
                  BOOL v614 = (llvm::Value **)(v611 + 8 * v613);
                  uint64_t v615 = *v614;
                  if (v572 == *v614) {
                    goto LABEL_1025;
                  }
                }
                if (v616) {
                  uint64_t v620 = v616;
                }
                else {
                  uint64_t v620 = v614;
                }
LABEL_1023:
                uint64_t v621 = sub_1CBFD5BBC(v609 + 2088, (uint64_t)&v800, &v800, v620);
                *uint64_t v621 = v800;
                unsigned int v622 = *(_DWORD *)(v609 + 2232);
                if (v622 >= *(_DWORD *)(v609 + 2236)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v609 + 2224) + 8 * v622) = v800;
                ++*(_DWORD *)(v609 + 2232);
                goto LABEL_1025;
              }
LABEL_1177:
              int v738 = 0;
              *((_DWORD *)v571 + 10) &= ~0x2000u;
              goto LABEL_1178;
            }
            int v642 = 1;
            while (v641 != (llvm::DominatorTree *)-4096)
            {
              int v643 = v639 + v642++;
              uint64_t v639 = v643 & (v638 - 1);
              uint64_t v641 = *(llvm::DominatorTree **)(v637 + 16 * v639);
              if (v641 == v773)
              {
                int v640 = (llvm::DominatorTree **)(v637 + 16 * v639);
                goto LABEL_1170;
              }
            }
          }
          int v640 = (llvm::DominatorTree **)(v637 + 16 * v638);
          goto LABEL_1170;
        }
        uint64_t v257 = ***(void ***)this;
        uint64_t v258 = *(void *)(v257 + 152);
        uint64_t v259 = *(unsigned int *)(v257 + 168);
        if (v259)
        {
          LODWORD(v260) = (v259 - 1) & ((this >> 4) ^ (this >> 9));
          uint64_t v261 = v258 + 16 * v260;
          uint64_t v262 = *(llvm **)v261;
          if (*(llvm **)v261 == this)
          {
LABEL_963:
            int v567 = *(void **)(v261 + 8);
            uint64_t v570 = *v567;
            uint64_t v568 = (char *)(v567 + 2);
            uint64_t v569 = v570;
            goto LABEL_964;
          }
          int v263 = 1;
          while (v262 != (llvm *)-4096)
          {
            int v264 = v260 + v263++;
            uint64_t v260 = v264 & (v259 - 1);
            uint64_t v262 = *(llvm **)(v258 + 16 * v260);
            if (v262 == this)
            {
              uint64_t v261 = v258 + 16 * v260;
              goto LABEL_963;
            }
          }
        }
        uint64_t v261 = v258 + 16 * v259;
        goto LABEL_963;
      }
    }
  }
LABEL_64:
  for (uint64_t i = *((void *)this + 1); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(unsigned char *)(*(void *)(i + 24) + 16) != 75)
    {
      int v52 = *((_DWORD *)this + 5);
      goto LABEL_88;
    }
  }
  int v52 = *((_DWORD *)this + 5);
  unsigned int v53 = v52 & 0x7FFFFFF;
  if ((v52 & 0x7FFFFFF) == 0) {
    goto LABEL_88;
  }
  int v54 = 0;
  char v55 = 0;
LABEL_69:
  ++v54;
  do
  {
    if ((v52 & 0x40000000) != 0) {
      int v56 = (char *)*((void *)this - 1);
    }
    else {
      int v56 = (char *)this - 32 * v53;
    }
    uint64_t v57 = (v54 - 1);
    uint64_t v58 = sub_1CC9D1AA8(a1, *(unsigned char **)&v56[32 * v57]);
    if (v58)
    {
      int v59 = *((_DWORD *)this + 5);
      if ((v59 & 0x40000000) != 0) {
        uint64_t v60 = (char *)*((void *)this - 1);
      }
      else {
        uint64_t v60 = (char *)this - 32 * (v59 & 0x7FFFFFF);
      }
      uint64_t v61 = &v60[32 * v57];
      if (*(void *)v61)
      {
        **((void **)v61 + 2) = *((void *)v61 + 1);
        uint64_t v65 = *((void *)v61 + 1);
        if (v65) {
          *(void *)(v65 + 16) = *((void *)v61 + 2);
        }
      }
      *(void *)uint64_t v61 = v58;
      uint64_t v64 = *((void *)v58 + 1);
      uint64_t v62 = (char **)((char *)v58 + 8);
      uint64_t v63 = v64;
      *((void *)v61 + 1) = v64;
      if (v64) {
        *(void *)(v63 + 16) = v61 + 8;
      }
      *(void *)&v60[32 * v57 + 16] = v62;
      *uint64_t v62 = v61;
      int v52 = *((_DWORD *)this + 5);
      unsigned int v53 = v52 & 0x7FFFFFF;
      char v55 = 1;
      if ((v52 & 0x7FFFFFF) == v54) {
        return (llvm::UndefValue **)this;
      }
      goto LABEL_69;
    }
    int v52 = *((_DWORD *)this + 5);
    unsigned int v53 = v52 & 0x7FFFFFF;
    BOOL v31 = v54++ == (v52 & 0x7FFFFFF);
  }
  while (!v31);
  if (v55) {
    return (llvm::UndefValue **)this;
  }
LABEL_88:
  if ((v52 & 0x40000000) != 0) {
    uint64_t v66 = (void *)*((void *)this - 1);
  }
  else {
    uint64_t v66 = (void *)((char *)this - 32 * (v52 & 0x7FFFFFF));
  }
  uint64_t v67 = *v66;
  unsigned int v68 = *(unsigned __int8 *)(*v66 + 16);
  if (v68 > 0x1B)
  {
    unsigned int v69 = *(unsigned __int8 *)(v66[4] + 16);
    if (v69 >= 0x1C && v68 == v69)
    {
      uint64_t v87 = *(void *)(v67 + 8);
      if (v87)
      {
        uint64_t v88 = *(void *)(v87 + 8);
        if (v88)
        {
          while (*(void *)(v88 + 24) == *(void *)(v87 + 24))
          {
            uint64_t v87 = *(void *)(v87 + 8);
            uint64_t v88 = *(void *)(v88 + 8);
            if (!v88) {
              goto LABEL_127;
            }
          }
        }
        else
        {
LABEL_127:
          ZExtOrBitCast = sub_1CCA8ED58(a1, (uint64_t)this);
          if (ZExtOrBitCast) {
            return (llvm::UndefValue **)ZExtOrBitCast;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    goto LABEL_111;
  }
  uint64_t v71 = *((void *)this + 5);
  uint64_t v72 = v71 + 40;
  for (uint64_t j = *(void *)(v71 + 48); ; uint64_t j = *(void *)(j + 8))
  {
    if (j == v72) {
      goto LABEL_111;
    }
    uint64_t v74 = j - 24;
    if (!j) {
      uint64_t v74 = 0;
    }
    if (*(unsigned char *)(v74 + 16) != 83) {
      break;
    }
  }
  unsigned int v75 = *(unsigned __int8 *)(j - 8) - 38;
  BOOL v49 = v75 > 0x38;
  uint64_t v76 = (1 << v75) & 0x100060000000001;
  if (!v49 && v76 != 0) {
    uint64_t j = *(void *)(j + 8);
  }
  if (v72 == j)
  {
LABEL_111:
    PointerCast = 0;
  }
  else
  {
    int v78 = *((_DWORD *)this + 5);
    if ((v78 & 0x40000000) != 0) {
      uint64_t v79 = (llvm::Value **)*((void *)this - 1);
    }
    else {
      uint64_t v79 = (llvm::Value **)((char *)this - 32 * (v78 & 0x7FFFFFF));
    }
    uint64_t v203 = *v79;
    unsigned int v204 = llvm::Value::stripPointerCasts(*v79);
    __base = &v811;
    size_t __nel = (size_t)&v811;
    LODWORD(v810) = 0;
    uint64_t v809 = 0x100000004;
    uint64_t v811 = v203;
    if (v203 != v204)
    {
      BOOL v206 = v204;
      int v207 = *((_DWORD *)this + 5);
      if ((v207 & 0x40000000) != 0)
      {
        int v209 = (llvm::Value **)*((void *)this - 1);
        uint64_t v208 = v207 & 0x7FFFFFF;
        if (!v208) {
          goto LABEL_392;
        }
      }
      else
      {
        uint64_t v208 = v207 & 0x7FFFFFF;
        int v209 = (llvm::Value **)((char *)this - 32 * v208);
        if (!v208)
        {
LABEL_392:
          uint64_t v232 = *(llvm::Value **)this;
          LOWORD(v802[0]) = 257;
          PointerCast = llvm::CastInst::CreatePointerCast(v206, v232, (const char **)&v800, 0, v205);
          int v231 = 0;
          goto LABEL_393;
        }
      }
      uint64_t v214 = &v209[4 * v208];
      while (2)
      {
        int v215 = *v209;
        size_t v216 = __nel;
        uint64_t v217 = HIDWORD(v809);
        if ((void *)__nel == __base)
        {
          if (HIDWORD(v809))
          {
            uint64_t v218 = 0;
            uint64_t v219 = 8 * HIDWORD(v809);
            char v220 = (llvm::Value **)__nel;
            while (*v220 != v215)
            {
              if (*v220 == (llvm::Value *)-2) {
                uint64_t v218 = v220;
              }
              ++v220;
              v219 -= 8;
              if (!v219)
              {
                if (!v218) {
                  goto LABEL_358;
                }
                char *v218 = v215;
                LODWORD(v810) = v810 - 1;
                goto LABEL_382;
              }
            }
            goto LABEL_383;
          }
LABEL_358:
          unsigned int v221 = v809;
          if (HIDWORD(v809) < v809)
          {
            ++HIDWORD(v809);
            *(void *)(__nel + 8 * v217) = v215;
LABEL_382:
            if (llvm::Value::stripPointerCasts(v215) != v206) {
              break;
            }
            goto LABEL_383;
          }
        }
        else
        {
          unsigned int v221 = v809;
        }
        if (3 * v221 <= 4 * (HIDWORD(v809) - (int)v810))
        {
          if (v221 >= 0x40) {
            v221 *= 2;
          }
          else {
            unsigned int v221 = 128;
          }
        }
        else if (v221 - HIDWORD(v809) >= v221 >> 3)
        {
          goto LABEL_363;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__base, v221);
        unsigned int v221 = v809;
        size_t v216 = __nel;
LABEL_363:
        unsigned int v222 = v221 - 1;
        unsigned int v223 = (v221 - 1) & ((v215 >> 4) ^ (v215 >> 9));
        int v224 = (llvm::Value **)(v216 + 8 * v223);
        uint64_t v225 = *v224;
        if (*v224 != (llvm::Value *)-1)
        {
          int v226 = 0;
          int v227 = 1;
          while (v225 != v215)
          {
            if (v226) {
              BOOL v228 = 0;
            }
            else {
              BOOL v228 = v225 == (llvm::Value *)-2;
            }
            if (v228) {
              int v226 = v224;
            }
            unsigned int v229 = v223 + v227++;
            unsigned int v223 = v229 & v222;
            int v224 = (llvm::Value **)(v216 + 8 * (v229 & v222));
            uint64_t v225 = *v224;
            if (*v224 == (llvm::Value *)-1) {
              goto LABEL_375;
            }
          }
          goto LABEL_383;
        }
        int v226 = 0;
LABEL_375:
        if (v226) {
          __int16 v230 = v226;
        }
        else {
          __int16 v230 = v224;
        }
        if (*v230 != v215)
        {
          if (*v230 == (llvm::Value *)-2) {
            LODWORD(v810) = v810 - 1;
          }
          else {
            ++HIDWORD(v809);
          }
          *__int16 v230 = v215;
          goto LABEL_382;
        }
LABEL_383:
        v209 += 4;
        if (v209 == v214) {
          goto LABEL_392;
        }
        continue;
      }
    }
    PointerCast = 0;
    int v231 = 1;
LABEL_393:
    if ((void *)__nel != __base) {
      free((void *)__nel);
    }
    ZExtOrBitCast = PointerCast;
    if (!v231) {
      return (llvm::UndefValue **)ZExtOrBitCast;
    }
  }
  uint64_t v81 = *((void *)this + 1);
  if (!v81 || *(void *)(v81 + 8))
  {
    ZExtOrBitCast = PointerCast;
    goto LABEL_115;
  }
  if (*(unsigned char *)(*(void *)this + 8) != 13) {
    goto LABEL_485;
  }
  BOOL v195 = *(llvm::Value ***)(v81 + 24);
  if (!v195) {
    goto LABEL_485;
  }
  if (*((unsigned char *)v195 + 16) != 76) {
    goto LABEL_485;
  }
  uint64_t v196 = v195[1];
  if (!v196) {
    goto LABEL_485;
  }
  while (2)
  {
    uint64_t v197 = *((void *)v196 + 3);
    int v198 = *(unsigned __int8 *)(v197 + 16);
    if (v197) {
      BOOL v199 = (v198 - 62) > 0xFFFFFFFD;
    }
    else {
      BOOL v199 = 0;
    }
    if (!v199)
    {
      if (v197 && v198 == 62)
      {
        uint64_t v200 = -(uint64_t)(*(_DWORD *)(v197 + 20) & 0x7FFFFFF);
        goto LABEL_321;
      }
      goto LABEL_325;
    }
    uint64_t v200 = -1;
LABEL_321:
    uint64_t v201 = *(llvm::Value ***)(v197 + 32 * v200);
    if (v201) {
      BOOL v202 = v201 == v195;
    }
    else {
      BOOL v202 = 0;
    }
    if (!v202)
    {
LABEL_325:
      uint64_t v196 = (llvm::Value *)*((void *)v196 + 1);
      if (!v196) {
        goto LABEL_485;
      }
      continue;
    }
    break;
  }
  uint64_t v233 = *(void *)(a1 + 80);
  unsigned int v234 = *((_DWORD *)*v195 + 2);
  if ((v234 & 0xFE) == 0x12) {
    unsigned int v234 = *(_DWORD *)(**((void **)*v195 + 2) + 8);
  }
  if (v234 < 0x100) {
    goto LABEL_409;
  }
  unsigned int v235 = v234 >> 8;
  uint64_t v236 = *(unsigned int *)(v233 + 240);
  uint64_t v237 = *(void *)(v233 + 232);
  if (v236)
  {
    uint64_t v237 = *(void *)(v233 + 232);
    unint64_t v238 = *(unsigned int *)(v233 + 240);
    do
    {
      unint64_t v239 = v238 >> 1;
      uint64_t v240 = v237 + 16 * (v238 >> 1);
      unsigned int v241 = *(_DWORD *)(v240 + 8);
      uint64_t v242 = v240 + 16;
      v238 += ~(v238 >> 1);
      if (v241 < v235) {
        uint64_t v237 = v242;
      }
      else {
        unint64_t v238 = v239;
      }
    }
    while (v238);
  }
  if (v237 == *(void *)(v233 + 232) + 16 * v236 || *(_DWORD *)(v237 + 8) != v235) {
LABEL_409:
  }
    uint64_t v237 = *(void *)(v233 + 232);
  uint64_t v243 = *(unsigned int *)(v237 + 4);
  uint64_t v245 = sub_1CB83544C(v233, *(void *)*(v195 - 4));
  if (v18 == 1) {
  if (v245 != v243)
  }
    goto LABEL_485;
  *(void *)&long long v800 = &v801;
  *((void *)&v800 + 1) = 0x400000000;
  int v246 = *((_DWORD *)this + 5);
  unsigned int v247 = 0;
  unsigned int v248 = v246 & 0x7FFFFFF;
  if ((v246 & 0x7FFFFFF) != 0)
  {
    int v249 = 0;
    do
    {
      if ((v246 & 0x40000000) != 0) {
        int v250 = (char *)*((void *)this - 1);
      }
      else {
        int v250 = (char *)this - 32 * v248;
      }
      uint64_t v251 = *(void *)&v250[32 * v249];
      int v252 = *(unsigned __int8 *)(v251 + 16);
      if (v251 && v252 == 75)
      {
        if (v247 >= HIDWORD(v800)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v800 + 8 * v247) = *(void *)(v251 - 32);
      }
      else
      {
        uint64_t v253 = *(void *)(v251 + 8);
        if (v253)
        {
          do
          {
            uint64_t v254 = *(void *)(v253 + 24);
            if (*(unsigned char *)(v254 + 16) == 76 && *(llvm::Value **)v254 == *v195)
            {
              if ((v246 & 0x40000000) != 0) {
                int v255 = (char *)*((void *)this - 1);
              }
              else {
                int v255 = (char *)this - 32 * (v246 & 0x7FFFFFF);
              }
              llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 72), *(const llvm::Instruction **)(v253 + 24), *(const llvm::BasicBlock **)&v255[32 * *((unsigned int *)this + 15) + 8 * v249]);
            }
            uint64_t v253 = *(void *)(v253 + 8);
          }
          while (v253);
          int v252 = *(unsigned __int8 *)(v251 + 16);
        }
        if (v252 != 83)
        {
          ZExtOrBitCast = 0;
          if (!v251 || v252 != 60) {
            goto LABEL_482;
          }
          uint64_t v256 = *(void *)(v251 + 8);
          if (!v256 || *(void *)(v256 + 8)) {
            goto LABEL_481;
          }
        }
        unsigned int v247 = DWORD2(v800);
        if (DWORD2(v800) >= HIDWORD(v800)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v800 + 8 * DWORD2(v800)) = v251;
      }
      DWORD2(v800) = ++v247;
      ++v249;
      int v246 = *((_DWORD *)this + 5);
      unsigned int v248 = v246 & 0x7FFFFFF;
    }
    while (v249 != (v246 & 0x7FFFFFF));
  }
  uint64_t v265 = *((void *)this + 5);
  int v266 = *(void **)(v265 + 48);
  uint64_t v784 = (void *)(v265 + 40);
  if (v266 == (void *)(v265 + 40))
  {
LABEL_476:
    if (!v247)
    {
LABEL_481:
      ZExtOrBitCast = 0;
      goto LABEL_482;
    }
    unsigned int v277 = (llvm::Value ***)v800;
    uint64_t v278 = v247;
    uint64_t v279 = v800 + 8 * v247;
    uint64_t v280 = *v195;
    uint64_t v281 = 8 * v278;
    uint64_t v282 = v800;
    while (**(llvm::Value ***)v282 != v280 || *(unsigned char *)(*(void *)v282 + 16) == 76)
    {
      v282 += 8;
      v281 -= 8;
      if (!v281) {
        goto LABEL_481;
      }
    }
    do
    {
      uint64_t v558 = *v277;
      if (**v277 != v280)
      {
        unsigned int v559 = *((unsigned __int8 *)v558 + 16);
        if (v559 >= 0x1C)
        {
          if (v559 - 29 < 0xB) {
            goto LABEL_481;
          }
          if (v559 == 83)
          {
            int v560 = v558[5];
            uint64_t v561 = (uint64_t)v560 + 40;
            for (uint64_t k = *((void *)v560 + 6); ; uint64_t k = *(void *)(k + 8))
            {
              if (k == v561) {
                goto LABEL_481;
              }
              uint64_t v563 = k - 24;
              if (!k) {
                uint64_t v563 = 0;
              }
              if (*(unsigned char *)(v563 + 16) != 83) {
                break;
              }
            }
            unsigned int v564 = *(unsigned __int8 *)(k - 8) - 38;
            BOOL v49 = v564 > 0x38;
            uint64_t v565 = (1 << v564) & 0x100060000000001;
            if (!v49 && v565 != 0) {
              uint64_t k = *(void *)(k + 8);
            }
            if (v561 == k) {
              goto LABEL_481;
            }
          }
        }
      }
      ++v277;
    }
    while (v277 != (llvm::Value ***)v279);
    int v626 = *((_DWORD *)this + 5);
    int v627 = v626 & 0x7FFFFFF;
    if ((v626 & 0x10000000) == 0)
    {
      size_t v646 = 0;
      uint64_t v645 = &byte_1CFBCE98E;
LABEL_1051:
      LOWORD(v811) = 773;
      __base = v645;
      size_t __nel = v646;
      uint64_t v809 = (uint64_t)".ptr";
      int v648 = operator new(0x48uLL);
      v648[1] = v280;
      *int v648 = 0;
      v648[2] = 0;
      v648[3] = 0x4000000000000053;
      *((_OWORD *)v648 + 2) = 0u;
      *((_OWORD *)v648 + 3) = 0u;
      *((_DWORD *)v648 + 16) = 0;
      *((_DWORD *)v648 + 17) = v627;
      int v772 = (llvm::Value *)(v648 + 1);
      llvm::Value::setNameImpl((llvm::Value *)(v648 + 1), (const char **)&__base);
      if (*((unsigned char *)v648 + 24))
      {
LABEL_1052:
        uint64_t v649 = *((unsigned int *)v648 + 17);
        uint64_t v650 = operator new(40 * v649);
        *int v648 = v650;
        if (v649)
        {
          uint64_t v651 = &v650[4 * v649];
          do
          {
            void *v650 = 0;
            v650[1] = 0;
            v650[2] = 0;
            v650[3] = v772;
            v650 += 4;
          }
          while (v650 != v651);
        }
        sub_1CCA331D4(a1, v772, (uint64_t)this);
        __base = (void *)1;
        for (uint64_t m = 8; m != 72; m += 16)
          *(void **)((char *)&__base + m) = (void *)-4096;
        int v654 = *((_DWORD *)this + 5);
        unsigned int v655 = v654 & 0x7FFFFFF;
        if ((v654 & 0x7FFFFFF) == 0)
        {
LABEL_1058:
          int v656 = *(llvm::Value **)*(v195 - 4);
          __int16 v806 = 257;
          ZExtOrBitCast = llvm::CastInst::CreateBitOrPointerCast(v772, v656, (const char **)&v803, 0, v652);
          if ((__base & 1) == 0) {
            MEMORY[0x1D25D9CD0](__nel, 8);
          }
          goto LABEL_482;
        }
        unsigned int v657 = 0;
        while (1)
        {
          uint64_t v658 = (v654 & 0x40000000) != 0 ? (llvm *)*((void *)this - 1) : (llvm *)((char *)this - 32 * v655);
          int v659 = (llvm::Type *)*((void *)v658 + 4 * *((unsigned int *)this + 15) + v657);
          uint64_t v660 = *(llvm::Value ***)(v800 + 8 * v657);
          *(void *)&long long v797 = v660;
          if (*v660 != *v195) {
            break;
          }
          int v661 = *((_DWORD *)v648 + 7);
          uint64_t v662 = v661 & 0x7FFFFFF;
          if ((v661 & 0x7FFFFFF) == *((_DWORD *)v648 + 17))
          {
            unsigned int v674 = v662 + (v662 >> 1);
            if (v674 <= 2) {
              uint64_t v675 = 2;
            }
            else {
              uint64_t v675 = v674;
            }
            *((_DWORD *)v648 + 17) = v675;
            uint64_t v780 = v659;
            if ((v661 & 0x40000000) != 0) {
              uint64_t v676 = (uint64_t *)*v648;
            }
            else {
              uint64_t v676 = (uint64_t *)((char *)v772 - 32 * v662);
            }
            uint64_t v786 = v676;
            int v677 = operator new(40 * v675);
            *int v648 = v677;
            uint64_t v678 = v677;
            do
            {
              *uint64_t v678 = 0;
              v678[1] = 0;
              v678[2] = 0;
              v678[3] = v772;
              v678 += 4;
            }
            while (v678 != &v677[4 * v675]);
            int v679 = *((_DWORD *)v648 + 7);
            if ((v679 & 0x40000000) != 0) {
              uint64_t v680 = (uint64_t)v677;
            }
            else {
              uint64_t v680 = (uint64_t)v772 - 32 * (v679 & 0x7FFFFFF);
            }
            uint64_t v774 = (llvm::DominatorTree *)v680;
            sub_1CC5E4108((uint64_t)&v803, v786, &v786[4 * v662], v680);
            if (v662)
            {
              memmove((char *)v774 + 32 * v675, &v786[4 * v662], 8 * v662);
              uint64_t v681 = 4 * v662;
              do
              {
                uint64_t v682 = &v786[v681];
                if (v786[v681 - 4])
                {
                  *(void *)*(v682 - 2) = *(v682 - 3);
                  uint64_t v683 = *(v682 - 3);
                  if (v683) {
                    *(void *)(v683 + 16) = *(v682 - 2);
                  }
                }
                v681 -= 4;
              }
              while (v681 * 8);
            }
            operator delete(v786);
            int v661 = *((_DWORD *)v648 + 7);
            int v659 = v780;
          }
          uint64_t v663 = (v661 + 1) & 0x7FFFFFF;
          *((_DWORD *)v648 + 7) = v661 & 0xF8000000 | (v661 + 1) & 0x7FFFFFF;
          if ((v661 & 0x40000000) != 0) {
            v664 = (char *)*v648;
          }
          else {
            v664 = (char *)v772 - 32 * v663;
          }
          uint64_t v665 = (v663 - 1);
          int v666 = &v664[32 * v665];
          if (*(void *)v666)
          {
            **((void **)v666 + 2) = *((void *)v666 + 1);
            uint64_t v673 = *((void *)v666 + 1);
            if (v673) {
              *(void *)(v673 + 16) = *((void *)v666 + 2);
            }
          }
          *(void *)int v666 = v660;
          uint64_t v669 = v660[1];
          uint64_t v668 = (char **)(v660 + 1);
          int v667 = v669;
          *((void *)v666 + 1) = v669;
          if (v669) {
            *((void *)v667 + 2) = v666 + 8;
          }
          *(void *)&v664[32 * v665 + 16] = v668;
          *uint64_t v668 = v666;
          int v670 = *((_DWORD *)v648 + 7);
          uint64_t v671 = v670 & 0x7FFFFFF;
          if ((v670 & 0x40000000) != 0) {
            uint64_t v672 = (char *)*v648;
          }
          else {
            uint64_t v672 = (char *)v772 - 32 * v671;
          }
LABEL_1073:
          *(void *)&v672[32 * *((unsigned int *)v648 + 17) + 8 * (v671 - 1)] = v659;
          ++v657;
          int v654 = *((_DWORD *)this + 5);
          unsigned int v655 = v654 & 0x7FFFFFF;
          if (v657 == (v654 & 0x7FFFFFF)) {
            goto LABEL_1058;
          }
        }
        uint64_t v781 = v659;
        int v684 = sub_1CD68C958(&__base, (uint64_t *)&v797);
        uint64_t v685 = v684[1];
        if (v685)
        {
LABEL_1095:
          int v686 = *((_DWORD *)v648 + 7);
          uint64_t v687 = v686 & 0x7FFFFFF;
          if ((v686 & 0x7FFFFFF) == *((_DWORD *)v648 + 17))
          {
            LODWORD(v698) = v687 + (v687 >> 1);
            if (v698 <= 2) {
              uint64_t v698 = 2;
            }
            else {
              uint64_t v698 = v698;
            }
            uint64_t v778 = v698;
            *((_DWORD *)v648 + 17) = v698;
            if ((v686 & 0x40000000) != 0) {
              uint64_t v699 = (uint64_t *)*v648;
            }
            else {
              uint64_t v699 = (uint64_t *)((char *)v772 - 32 * v687);
            }
            uint64_t v787 = v699;
            uint64_t v700 = operator new(40 * v698);
            *int v648 = v700;
            int v701 = v700;
            do
            {
              *int v701 = 0;
              v701[1] = 0;
              v701[2] = 0;
              v701[3] = v772;
              v701 += 4;
            }
            while (v701 != &v700[4 * v778]);
            int v702 = *((_DWORD *)v648 + 7);
            if ((v702 & 0x40000000) != 0) {
              uint64_t v703 = (uint64_t)v700;
            }
            else {
              uint64_t v703 = (uint64_t)v772 - 32 * (v702 & 0x7FFFFFF);
            }
            BOOL v775 = (llvm::DominatorTree *)v703;
            sub_1CC5E4108((uint64_t)&v803, v787, &v787[4 * v687], v703);
            if (v687)
            {
              memmove((char *)v775 + 32 * v778, &v787[4 * v687], 8 * v687);
              uint64_t v704 = 4 * v687;
              do
              {
                uint64_t v705 = &v787[v704];
                if (v787[v704 - 4])
                {
                  *(void *)*(v705 - 2) = *(v705 - 3);
                  uint64_t v706 = *(v705 - 3);
                  if (v706) {
                    *(void *)(v706 + 16) = *(v705 - 2);
                  }
                }
                v704 -= 4;
              }
              while (v704 * 8);
            }
            operator delete(v787);
            int v686 = *((_DWORD *)v648 + 7);
          }
          int v659 = v781;
          uint64_t v688 = (v686 + 1) & 0x7FFFFFF;
          *((_DWORD *)v648 + 7) = v686 & 0xF8000000 | (v686 + 1) & 0x7FFFFFF;
          if ((v686 & 0x40000000) != 0) {
            uint64_t v689 = (char *)*v648;
          }
          else {
            uint64_t v689 = (char *)v772 - 32 * v688;
          }
          uint64_t v690 = (v688 - 1);
          int v691 = &v689[32 * v690];
          if (*(void *)v691)
          {
            **((void **)v691 + 2) = *((void *)v691 + 1);
            uint64_t v697 = *((void *)v691 + 1);
            if (v697) {
              *(void *)(v697 + 16) = *((void *)v691 + 2);
            }
          }
          *(void *)int v691 = v685;
          if (v685)
          {
            uint64_t v694 = *(void *)(v685 + 8);
            uint64_t v693 = (char **)(v685 + 8);
            uint64_t v692 = v694;
            uint64_t v695 = &v689[32 * v690];
            *((void *)v695 + 1) = v694;
            if (v694) {
              *(void *)(v692 + 16) = v695 + 8;
            }
            *((void *)v695 + 2) = v693;
            *uint64_t v693 = v691;
          }
          int v696 = *((_DWORD *)v648 + 7);
          uint64_t v671 = v696 & 0x7FFFFFF;
          if ((v696 & 0x40000000) != 0) {
            uint64_t v672 = (char *)*v648;
          }
          else {
            uint64_t v672 = (char *)v772 - 32 * v671;
          }
          goto LABEL_1073;
        }
        uint64_t v707 = v684;
        if ((*((unsigned char *)v660 + 23) & 0x10) == 0)
        {
          uint64_t v717 = 0;
          uint64_t v718 = &byte_1CFBCE98E;
LABEL_1133:
          uint64_t v720 = *v195;
          __int16 v806 = 773;
          v803 = v718;
          uint64_t v804 = v717;
          v805[0] = ".ptr";
          v684[1] = llvm::CastInst::CreateBitOrPointerCast((llvm::CastInst *)v660, v720, (const char **)&v803, 0, v652);
          unsigned int v721 = *((unsigned __int8 *)v660 + 16);
          if (v721 >= 0x1C)
          {
            if (v721 != 83)
            {
              n = v660[4];
LABEL_1156:
              if (n) {
                uint64_t v732 = (uint64_t)n - 24;
              }
              else {
                uint64_t v732 = 0;
              }
              sub_1CCA331D4(a1, (llvm::Value *)v707[1], v732);
              uint64_t v685 = v707[1];
              goto LABEL_1095;
            }
            uint64_t v727 = v660[5];
            uint8x8_t v724 = (llvm::Value *)((char *)v727 + 40);
            for (n = (llvm::Value *)*((void *)v727 + 6); n != v724; n = (llvm::Value *)*((void *)n + 1))
            {
              int v728 = (void **)((char *)n - 24);
              if (!n) {
                int v728 = 0;
              }
              if (*((unsigned char *)v728 + 16) != 83)
              {
LABEL_1150:
                unsigned int v729 = *((unsigned __int8 *)n - 8) - 38;
                BOOL v49 = v729 > 0x38;
                uint64_t v730 = (1 << v729) & 0x100060000000001;
                if (!v49 && v730 != 0) {
                  n = (llvm::Value *)*((void *)n + 1);
                }
                goto LABEL_1156;
              }
            }
          }
          else
          {
            uint64_t v722 = *(void *)(*((void *)v781 + 7) + 80);
            if (v722) {
              uint64_t v723 = v722 - 24;
            }
            else {
              uint64_t v723 = 0;
            }
            uint8x8_t v724 = (llvm::Value *)(v723 + 40);
            for (n = *(llvm::Value **)(v723 + 48); n != v724; n = (llvm::Value *)*((void *)n + 1))
            {
              int v726 = (void **)((char *)n - 24);
              if (!n) {
                int v726 = 0;
              }
              if (*((unsigned char *)v726 + 16) != 83) {
                goto LABEL_1150;
              }
            }
          }
          n = v724;
          goto LABEL_1156;
        }
        uint64_t v708 = **(void **)*v660;
        uint64_t v709 = *(void *)(v708 + 152);
        uint64_t v710 = *(unsigned int *)(v708 + 168);
        if (v710)
        {
          LODWORD(v711) = (v710 - 1) & ((v660 >> 4) ^ (v660 >> 9));
          uint64_t v712 = (llvm::Value ***)(v709 + 16 * v711);
          uint64_t v713 = *v712;
          if (*v712 == v660)
          {
LABEL_1132:
            unsigned int v716 = v712[1];
            uint64_t v719 = (uint64_t)*v716;
            uint64_t v718 = (char *)(v716 + 2);
            uint64_t v717 = v719;
            goto LABEL_1133;
          }
          int v714 = 1;
          while (v713 != (llvm::Value **)-4096)
          {
            int v715 = v711 + v714++;
            uint64_t v711 = v715 & (v710 - 1);
            uint64_t v713 = *(llvm::Value ***)(v709 + 16 * v711);
            if (v713 == v660)
            {
              uint64_t v712 = (llvm::Value ***)(v709 + 16 * v711);
              goto LABEL_1132;
            }
          }
        }
        uint64_t v712 = (llvm::Value ***)(v709 + 16 * v710);
        goto LABEL_1132;
      }
      if ((*((unsigned char *)v648 + 31) & 0x10) == 0) {
        goto LABEL_1202;
      }
      uint64_t v743 = ***(void ***)v772;
      uint64_t v744 = *(void *)(v743 + 152);
      uint64_t v745 = *(unsigned int *)(v743 + 168);
      if (v745)
      {
        LODWORD(v746) = (v745 - 1) & ((v772 >> 4) ^ (v772 >> 9));
        int v747 = (llvm::Value **)(v744 + 16 * v746);
        int v748 = *v747;
        if (*v747 == v772)
        {
LABEL_1195:
          uint64_t v751 = v747[1];
          unint64_t v754 = *(void *)v751;
          uint64_t v752 = (char *)v751 + 16;
          unint64_t v753 = v754;
          if (v754 >= 5 && *(_DWORD *)v752 == *(_DWORD *)"llvm." && v752[4] == aLlvm_1[4])
          {
            *((_DWORD *)v648 + 10) |= 0x2000u;
            int v756 = llvm::Function::lookupIntrinsicID(v752, v753);
LABEL_1203:
            *((_DWORD *)v648 + 11) = v756;
            goto LABEL_1052;
          }
LABEL_1202:
          int v756 = 0;
          *((_DWORD *)v648 + 10) &= ~0x2000u;
          goto LABEL_1203;
        }
        int v749 = 1;
        while (v748 != (llvm::Value *)-4096)
        {
          int v750 = v746 + v749++;
          uint64_t v746 = v750 & (v745 - 1);
          int v748 = *(llvm::Value **)(v744 + 16 * v746);
          if (v748 == v772)
          {
            int v747 = (llvm::Value **)(v744 + 16 * v746);
            goto LABEL_1195;
          }
        }
      }
      int v747 = (llvm::Value **)(v744 + 16 * v745);
      goto LABEL_1195;
    }
    uint64_t v628 = ***(void ***)this;
    uint64_t v629 = *(void *)(v628 + 152);
    uint64_t v630 = *(unsigned int *)(v628 + 168);
    if (v630)
    {
      LODWORD(v631) = (v630 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v632 = v629 + 16 * v631;
      unsigned int v633 = *(llvm **)v632;
      if (*(llvm **)v632 == this)
      {
LABEL_1050:
        uint64_t v644 = *(void **)(v632 + 8);
        size_t v647 = *v644;
        uint64_t v645 = (char *)(v644 + 2);
        size_t v646 = v647;
        goto LABEL_1051;
      }
      int v634 = 1;
      while (v633 != (llvm *)-4096)
      {
        int v635 = v631 + v634++;
        uint64_t v631 = v635 & (v630 - 1);
        unsigned int v633 = *(llvm **)(v629 + 16 * v631);
        if (v633 == this)
        {
          uint64_t v632 = v629 + 16 * v631;
          goto LABEL_1050;
        }
      }
    }
    uint64_t v632 = v629 + 16 * v630;
    goto LABEL_1050;
  }
  unsigned int v267 = 0;
  while (1)
  {
    if (v266) {
      uint64_t v268 = (unsigned __int8 *)(v266 - 3);
    }
    else {
      uint64_t v268 = 0;
    }
    int v269 = v268[16];
    if (v269 == 83) {
      uint64_t v270 = v268;
    }
    else {
      uint64_t v270 = 0;
    }
    if (!v266 || v269 != 83)
    {
LABEL_475:
      unsigned int v247 = DWORD2(v800);
      goto LABEL_476;
    }
    if (v267 > dword_1EBCE5E40) {
      goto LABEL_481;
    }
    if (v270 == (unsigned __int8 *)this || *(llvm::Value **)v270 != *v195) {
      goto LABEL_465;
    }
    if ((*((_DWORD *)v270 + 5) & 0x7FFFFFF) == 0) {
      break;
    }
    unsigned int v271 = 0;
    while (1)
    {
      int v272 = *((_DWORD *)this + 5);
      int v273 = (v272 & 0x40000000) != 0 ? (llvm *)*((void *)this - 1) : (llvm *)((char *)this - 32 * (v272 & 0x7FFFFFF));
      unsigned int v274 = v271;
      uint64_t v275 = *(void *)(v800 + 8 * v271);
      if (v275 != sub_1CBF73380((uint64_t)v270, *((void *)v273 + 4 * *((unsigned int *)this + 15) + v271))) {
        break;
      }
      unsigned int v271 = v274 + 1;
      if (v274 + 1 == (*((_DWORD *)v270 + 5) & 0x7FFFFFF)) {
        goto LABEL_474;
      }
    }
LABEL_465:
    ++v267;
    int v266 = (void *)v266[1];
    if (v266 == v784) {
      goto LABEL_475;
    }
  }
LABEL_474:
  uint64_t v276 = *(llvm::Value **)*(v195 - 4);
  LOWORD(v811) = 257;
  ZExtOrBitCast = llvm::CastInst::CreateBitOrPointerCast((llvm::CastInst *)v268, v276, (const char **)&__base, 0, v244);
LABEL_482:
  if ((long long *)v800 != &v801) {
    free((void *)v800);
  }
  if (ZExtOrBitCast) {
    return (llvm::UndefValue **)ZExtOrBitCast;
  }
LABEL_485:
  uint64_t v283 = *(void *)(*((void *)this + 1) + 24);
  if (!v283 || *(unsigned char *)(v283 + 16) != 83)
  {
    ZExtOrBitCast = PointerCast;
    goto LABEL_537;
  }
  int v284 = 0;
  __base = &v811;
  size_t __nel = (size_t)&v811;
  LODWORD(v810) = 0;
  unsigned int v285 = 1;
  uint64_t v809 = 0x100000010;
  uint64_t v811 = this;
  uint64_t v18 = 16;
  uint64_t v286 = v283;
  while (2)
  {
    uint64_t v287 = *(void *)(v286 + 8);
    if (!v287) {
      goto LABEL_532;
    }
    if (*(void *)(v287 + 8)) {
      break;
    }
    size_t v288 = __nel;
    if ((void *)__nel == __base)
    {
      if (v285)
      {
        uint64_t v289 = 0;
        uint64_t v290 = 8 * v285;
        uint64_t v291 = (void *)__nel;
        while (*v291 != v286)
        {
          if (*v291 == -2) {
            uint64_t v289 = v291;
          }
          ++v291;
          v290 -= 8;
          if (!v290)
          {
            if (!v289) {
              goto LABEL_498;
            }
            *uint64_t v289 = v286;
            LODWORD(v810) = v284 - 1;
            goto LABEL_521;
          }
        }
        goto LABEL_532;
      }
LABEL_498:
      if (v285 < v18)
      {
        HIDWORD(v809) = v285 + 1;
        *(void *)(__nel + 8 * v285) = v286;
        goto LABEL_521;
      }
    }
    if (3 * (int)v18 <= 4 * (v285 - v284))
    {
      if (v18 >= 0x40) {
        LODWORD(v18) = 2 * v18;
      }
      else {
        LODWORD(v18) = 128;
      }
      goto LABEL_530;
    }
    if (v18 - v285 < v18 >> 3)
    {
LABEL_530:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__base, v18);
      uint64_t v18 = v809;
      size_t v288 = __nel;
    }
    int v292 = v18 - 1;
    unsigned int v293 = (v18 - 1) & ((v286 >> 4) ^ (v286 >> 9));
    int v294 = (void *)(v288 + 8 * v293);
    uint64_t v295 = *v294;
    if (*v294 != -1)
    {
      uint64_t v296 = 0;
      int v297 = 1;
      while (v295 != v286)
      {
        if (v296) {
          BOOL v298 = 0;
        }
        else {
          BOOL v298 = v295 == -2;
        }
        if (v298) {
          uint64_t v296 = v294;
        }
        unsigned int v299 = v293 + v297++;
        unsigned int v293 = v299 & v292;
        int v294 = (void *)(v288 + 8 * (v299 & v292));
        uint64_t v295 = *v294;
        if (*v294 == -1) {
          goto LABEL_514;
        }
      }
LABEL_532:
      uint64_t v301 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)this, (llvm::Type *)v18);
      ZExtOrBitCast = sub_1CC9D3C84(a1, this, v301);
      char v302 = 1;
      goto LABEL_534;
    }
    uint64_t v296 = 0;
LABEL_514:
    if (v296) {
      long long v300 = v296;
    }
    else {
      long long v300 = v294;
    }
    if (*v300 == v286) {
      goto LABEL_532;
    }
    if (*v300 == -2) {
      LODWORD(v810) = v810 - 1;
    }
    else {
      ++HIDWORD(v809);
    }
    void *v300 = v286;
LABEL_521:
    unsigned int v285 = HIDWORD(v809);
    int v284 = v810;
    if (HIDWORD(v809) - v810 != 16)
    {
      uint64_t v286 = *(void *)(*(void *)(v286 + 8) + 24);
      if (v286)
      {
        if (*(unsigned char *)(v286 + 16) == 83) {
          continue;
        }
      }
    }
    break;
  }
  char v302 = 0;
  ZExtOrBitCast = PointerCast;
LABEL_534:
  if ((void *)__nel != __base) {
    free((void *)__nel);
  }
  if (v302) {
    return (llvm::UndefValue **)ZExtOrBitCast;
  }
LABEL_537:
  uint64_t v303 = *(void *)(v283 + 8);
  if (v303)
  {
    int v304 = *(unsigned __int8 *)(v283 + 16);
    if (!*(void *)(v303 + 8) && (v304 == 62 || (v304 - 41) <= 0x11) && *(llvm **)(v303 + 24) == this)
    {
      uint64_t v22 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)this, (llvm::Type *)v18);
      uint64_t v20 = a1;
      uint64_t v21 = this;
      return sub_1CC9D3C84(v20, v21, v22);
    }
  }
  else
  {
    int v304 = *(unsigned __int8 *)(v283 + 16);
  }
  if (!v283) {
    goto LABEL_115;
  }
  if (v304 != 81) {
    goto LABEL_115;
  }
  if (*(unsigned char *)(*(void *)this + 8) != 13) {
    goto LABEL_115;
  }
  if ((*(_WORD *)(v283 + 18) & 0x3E) != 0x20) {
    goto LABEL_115;
  }
  uint64_t v305 = *(void *)(v283 - 32);
  if (!v305) {
    goto LABEL_115;
  }
  unsigned int v306 = *(unsigned __int8 *)(v305 + 16);
  if (v306 > 0x14) {
    goto LABEL_115;
  }
  if (v306 == 16)
  {
    uint64_t v307 = *(unsigned int *)(v305 + 32);
    if (v307 >= 0x41)
    {
      int v739 = 0;
      int64_t v740 = (unint64_t)(v307 + 63) >> 6;
      do
      {
        BOOL v49 = v740-- < 1;
        if (v49) {
          break;
        }
        unint64_t v741 = *(void *)(*(void *)(v305 + 24) + 8 * v740);
        v739 += __clz(v741);
      }
      while (!v741);
      int v742 = v307 | 0xFFFFFFC0;
      if ((v307 & 0x3F) == 0) {
        int v742 = 0;
      }
      if (v739 + v742 != v307) {
        goto LABEL_553;
      }
    }
    else if (*(void *)(v305 + 24))
    {
LABEL_553:
      if ((sub_1CC03F414((uint64_t)&__base, (llvm::Constant *)v305) & 1) == 0) {
        goto LABEL_115;
      }
    }
  }
  else if (v306 == 17)
  {
    if ((sub_1CB844168(*(void *)(v283 - 32), 0.0) & 1) == 0) {
      goto LABEL_553;
    }
  }
  else if (v306 - 18 >= 3 && v306 != 13)
  {
    goto LABEL_553;
  }
  int v308 = *((_DWORD *)this + 5);
  uint64_t v309 = v308 & 0x7FFFFFF;
  if ((v308 & 0x7FFFFFF) == 0) {
    goto LABEL_115;
  }
  uint64_t v310 = 0;
  char v311 = 0;
  int v312 = 0;
  while (2)
  {
    int v313 = *((_DWORD *)this + 5);
    if ((v313 & 0x40000000) != 0) {
      unint64_t v314 = (char *)*((void *)this - 1);
    }
    else {
      unint64_t v314 = (char *)this - 32 * (v313 & 0x7FFFFFF);
    }
    uint64_t v315 = *(void *)&v314[32 * *((unsigned int *)this + 15) + 8 * v310];
    uint64_t v316 = *(void *)(v315 + 40);
    if (v316 == v315 + 40)
    {
      uint64_t v317 = 0;
      if ((v313 & 0x40000000) == 0) {
        goto LABEL_566;
      }
    }
    else
    {
      if (v316) {
        uint64_t v317 = v316 - 24;
      }
      else {
        uint64_t v317 = 0;
      }
      if (*(unsigned __int8 *)(v317 + 16) - 29 >= 0xB) {
        uint64_t v317 = 0;
      }
      if ((v313 & 0x40000000) == 0)
      {
LABEL_566:
        int v318 = (char *)this - 32 * (v313 & 0x7FFFFFF);
        goto LABEL_569;
      }
    }
    int v318 = (char *)*((void *)this - 1);
LABEL_569:
    uint64_t v319 = *(void *)&v318[32 * v310];
    if (!v317 || !*(void *)(v317 + 40))
    {
      BOOL v346 = v319 && *(unsigned __int8 *)(v319 + 16) >= 0x1Cu;
      if (!v346 || (uint64_t v317 = *(void *)&v318[32 * v310], !*(void *)(v319 + 40))) {
        uint64_t v317 = 0;
      }
    }
    size_t v320 = *(void *)(a1 + 56);
    uint64_t v321 = *(void *)(a1 + 72);
    __base = *(void **)(a1 + 80);
    size_t __nel = v320;
    uint64_t v809 = v317;
    uint64_t v810 = v321;
    uint64_t v811 = 0;
    char v812 = 1;
    if (sub_1CC1620B8(v319, 0, (uint64_t)&__base))
    {
      if (!v312)
      {
        int v323 = *((_DWORD *)this + 5);
        if ((v323 & 0x40000000) != 0)
        {
          uint64_t v325 = (char *)*((void *)this - 1);
          uint64_t v324 = v323 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v324 = v323 & 0x7FFFFFF;
          uint64_t v325 = (char *)this - 32 * v324;
        }
        if (v324)
        {
          int v326 = &v325[32 * v324];
          do
          {
            int v312 = *(void **)v325;
            if (*(void *)v325) {
              BOOL v327 = *(unsigned char *)(*(void *)v325 + 16) == 16;
            }
            else {
              BOOL v327 = 0;
            }
            if (v327)
            {
              uint64_t v328 = *((unsigned int *)v312 + 8);
              if (v328 > 0x40)
              {
                int v329 = 0;
                int64_t v330 = (unint64_t)(v328 + 63) >> 6;
                do
                {
                  BOOL v49 = v330-- < 1;
                  if (v49) {
                    break;
                  }
                  unint64_t v331 = *(void *)(v312[3] + 8 * v330);
                  v329 += __clz(v331);
                }
                while (!v331);
                int v332 = v328 | 0xFFFFFFC0;
                if ((v328 & 0x3F) == 0) {
                  int v332 = 0;
                }
                if (v329 + v332 != v328) {
                  goto LABEL_598;
                }
              }
              else if (v312[3])
              {
                goto LABEL_598;
              }
            }
            v325 += 32;
          }
          while (v325 != v326);
        }
        uint64_t v333 = **(llvm::ConstantInt ***)this;
        unsigned int v334 = *(_DWORD *)(*(void *)this + 8);
        LODWORD(__nel) = v334 >> 8;
        if (v334 >> 8 > 0x40) {
          operator new[]();
        }
        if (v334 <= 0xFF) {
          LOBYTE(v335) = 0;
        }
        else {
          unint64_t v335 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v334) + 63);
        }
        __base = (void *)(v335 & 1);
        int v312 = llvm::ConstantInt::get(v333, (llvm::LLVMContext *)&__base, v322);
        if (__nel >= 0x41 && __base) {
          MEMORY[0x1D25D9CB0](__base, 0x1000C8000313F17);
        }
      }
LABEL_598:
      if (v312 != (void *)v319)
      {
        int v336 = *((_DWORD *)this + 5);
        if ((v336 & 0x40000000) != 0) {
          uint64_t v337 = (char *)*((void *)this - 1);
        }
        else {
          uint64_t v337 = (char *)this - 32 * (v336 & 0x7FFFFFF);
        }
        int v338 = *(unsigned __int8 **)&v337[32 * v310];
        if (v338) {
          BOOL v339 = v338[16] >= 0x1Cu;
        }
        else {
          BOOL v339 = 0;
        }
        if (!v339) {
          goto LABEL_605;
        }
        uint64_t v347 = *(void *)(a1 + 32);
        __base = v338;
        if (*(unsigned char *)(v347 + 2088))
        {
          uint64_t v349 = v347 + 2096;
          int v348 = 16;
LABEL_627:
          int v350 = v348 - 1;
          unsigned int v351 = v350 & ((v338 >> 4) ^ (v338 >> 9));
          uint64_t v352 = (unsigned __int8 **)(v349 + 8 * v351);
          uint64_t v353 = *v352;
          if (v338 == *v352) {
            goto LABEL_605;
          }
          uint64_t v354 = 0;
          int v355 = 1;
          while (v353 != (unsigned __int8 *)-4096)
          {
            if (v354) {
              BOOL v356 = 0;
            }
            else {
              BOOL v356 = v353 == (unsigned __int8 *)-8192;
            }
            if (v356) {
              uint64_t v354 = v352;
            }
            unsigned int v357 = v351 + v355++;
            unsigned int v351 = v357 & v350;
            uint64_t v352 = (unsigned __int8 **)(v349 + 8 * v351);
            uint64_t v353 = *v352;
            if (v338 == *v352) {
              goto LABEL_605;
            }
          }
          if (v354) {
            uint64_t v358 = v354;
          }
          else {
            uint64_t v358 = v352;
          }
        }
        else
        {
          int v348 = *(_DWORD *)(v347 + 2104);
          if (v348)
          {
            uint64_t v349 = *(void *)(v347 + 2096);
            goto LABEL_627;
          }
          uint64_t v358 = 0;
        }
        uint64_t v359 = sub_1CBFD5BBC(v347 + 2088, (uint64_t)&__base, &__base, v358);
        *uint64_t v359 = __base;
        unint64_t v360 = *(unsigned int *)(v347 + 2232);
        if (v360 >= *(unsigned int *)(v347 + 2236)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v347 + 2224) + 8 * v360) = __base;
        ++*(_DWORD *)(v347 + 2232);
        int v336 = *((_DWORD *)this + 5);
LABEL_605:
        if ((v336 & 0x40000000) != 0) {
          int v340 = (char *)*((void *)this - 1);
        }
        else {
          int v340 = (char *)this - 32 * (v336 & 0x7FFFFFF);
        }
        uint64_t v341 = &v340[32 * v310];
        if (*(void *)v341)
        {
          **((void **)v341 + 2) = *((void *)v341 + 1);
          uint64_t v342 = *((void *)v341 + 1);
          if (v342) {
            *(void *)(v342 + 16) = *((void *)v341 + 2);
          }
        }
        *(void *)uint64_t v341 = v312;
        if (v312)
        {
          uint64_t v343 = (char **)(v312 + 1);
          uint64_t v344 = v312[1];
          uint64_t v345 = &v340[32 * v310];
          *((void *)v345 + 1) = v344;
          if (v344) {
            *(void *)(v344 + 16) = v345 + 8;
          }
          *((void *)v345 + 2) = v343;
          *uint64_t v343 = v341;
          char v311 = 1;
          goto LABEL_614;
        }
        uint64_t v319 = 0;
        char v311 = 1;
      }
    }
    else
    {
LABEL_614:
      uint64_t v319 = (uint64_t)v312;
    }
    ++v310;
    int v312 = (void *)v319;
    if (v310 != v309) {
      continue;
    }
    break;
  }
  if (v311) {
    return (llvm::UndefValue **)this;
  }
LABEL_115:
  int v82 = *((_DWORD *)this + 5);
  uint64_t v83 = v82 & 0x7FFFFFF;
  if ((v82 & 0x7FFFFFF) == 0)
  {
LABEL_141:
    uint64_t v94 = *((void *)this + 5);
    uint64_t v95 = *(void *)(v94 + 48);
    if (v95) {
      int v96 = (llvm *)(v95 - 24);
    }
    else {
      int v96 = 0;
    }
    if (v96 != this)
    {
      uint64_t v97 = *((_DWORD *)v96 + 5) & 0x7FFFFFF;
      if (v97)
      {
        uint64_t v98 = 0;
        uint64_t v99 = *((unsigned int *)this + 15);
        uint64_t v100 = *((unsigned int *)v96 + 15);
        while (1)
        {
          int v101 = *((_DWORD *)this + 5);
          unint64_t v102 = (v101 & 0x40000000) != 0
               ? (llvm *)*((void *)this - 1)
               : (llvm *)((char *)this - 32 * (v101 & 0x7FFFFFF));
          int v103 = *((_DWORD *)v96 + 5);
          uint64_t v104 = (v103 & 0x40000000) != 0
               ? (llvm *)*((void *)v96 - 1)
               : (llvm *)((char *)v96 - 32 * (v103 & 0x7FFFFFF));
          uint64_t v105 = *((void *)v102 + 4 * v99 + v98);
          uint64_t v106 = *((void *)v104 + 4 * v100 + v98);
          if (v105 != v106) {
            break;
          }
LABEL_184:
          if (++v98 == v97)
          {
            uint64_t v94 = *((void *)this + 5);
            goto LABEL_192;
          }
        }
        if ((v101 & 0x40000000) != 0)
        {
          uint64_t v108 = (char *)*((void *)this - 1);
          uint64_t v107 = v101 & 0x7FFFFFF;
          if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
            goto LABEL_163;
          }
        }
        else
        {
          uint64_t v107 = v101 & 0x7FFFFFF;
          uint64_t v108 = (char *)this - 32 * v107;
          if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
          {
LABEL_163:
            uint64_t v109 = 0xFFFFFFFFLL;
            if ((v101 & 0x40000000) == 0)
            {
LABEL_164:
              uint64_t v111 = (char *)this - 32 * v107;
LABEL_167:
              uint64_t v112 = *(void *)&v108[32 * v98];
              uint64_t v113 = *(void *)&v111[32 * v109];
              *(void *)&v111[32 * v99 + 8 * v98] = v106;
              int v114 = *((_DWORD *)this + 5);
              if ((v114 & 0x40000000) != 0) {
                unsigned int v115 = (char *)*((void *)this - 1);
              }
              else {
                unsigned int v115 = (char *)this - 32 * (v114 & 0x7FFFFFF);
              }
              int v116 = &v115[32 * v98];
              if (*(void *)v116)
              {
                **((void **)v116 + 2) = *((void *)v116 + 1);
                uint64_t v130 = *((void *)v116 + 1);
                if (v130) {
                  *(void *)(v130 + 16) = *((void *)v116 + 2);
                }
              }
              *(void *)int v116 = v113;
              if (v113)
              {
                uint64_t v119 = *(void *)(v113 + 8);
                uint64_t v117 = (char **)(v113 + 8);
                uint64_t v118 = v119;
                uint64_t v120 = &v115[32 * v98];
                *((void *)v120 + 1) = v119;
                if (v119) {
                  *(void *)(v118 + 16) = v120 + 8;
                }
                *((void *)v120 + 2) = v117;
                *uint64_t v117 = v116;
              }
              int v121 = *((_DWORD *)this + 5);
              if ((v121 & 0x40000000) != 0) {
                uint64_t v122 = (char *)*((void *)this - 1);
              }
              else {
                uint64_t v122 = (char *)this - 32 * (v121 & 0x7FFFFFF);
              }
              *(void *)&v122[32 * v99 + 8 * v109] = v105;
              int v123 = *((_DWORD *)this + 5);
              if ((v123 & 0x40000000) != 0) {
                uint64_t v124 = (char *)*((void *)this - 1);
              }
              else {
                uint64_t v124 = (char *)this - 32 * (v123 & 0x7FFFFFF);
              }
              int v125 = &v124[32 * v109];
              if (*(void *)v125)
              {
                **((void **)v125 + 2) = *((void *)v125 + 1);
                uint64_t v131 = *((void *)v125 + 1);
                if (v131) {
                  *(void *)(v131 + 16) = *((void *)v125 + 2);
                }
              }
              *(void *)int v125 = v112;
              if (v112)
              {
                uint64_t v128 = *(void *)(v112 + 8);
                uint64_t v127 = (char **)(v112 + 8);
                uint64_t v126 = v128;
                int v129 = &v124[32 * v109];
                *((void *)v129 + 1) = v128;
                if (v128) {
                  *(void *)(v126 + 16) = v129 + 8;
                }
                *((void *)v129 + 2) = v127;
                llvm::BinaryOperator *v127 = v125;
              }
              goto LABEL_184;
            }
LABEL_166:
            uint64_t v111 = (char *)*((void *)this - 1);
            goto LABEL_167;
          }
        }
        uint64_t v109 = 0;
        while (1)
        {
          uint64_t v110 = (char *)this - 32 * v107;
          if ((v101 & 0x40000000) != 0) {
            uint64_t v110 = (char *)*((void *)this - 1);
          }
          if (*(void *)&v110[32 * v99 + 8 * v109] == v106) {
            break;
          }
          if (v107 == ++v109) {
            goto LABEL_163;
          }
        }
        uint64_t v109 = v109;
        if ((v101 & 0x40000000) == 0) {
          goto LABEL_164;
        }
        goto LABEL_166;
      }
    }
LABEL_192:
    if (*(void *)(v94 + 40) != v94 + 40)
    {
      for (iuint64_t i = *(void *)(v94 + 48); ; iuint64_t i = *((void *)v19 + 4))
      {
        uint64_t v19 = (llvm::UndefValue *)(ii - 24);
        uint64_t v133 = ii ? ii - 24 : 0;
        if (!ii || *(unsigned char *)(v133 + 16) != 83) {
          break;
        }
        if (v19 != this
          && (llvm::Instruction::isIdenticalToWhenDefined(this, (const llvm::Instruction *)(ii - 24)) & 1) != 0)
        {
          goto LABEL_11;
        }
      }
    }
    if (*(unsigned char *)(*(void *)this + 8) != 13) {
      goto LABEL_340;
    }
    uint64_t v134 = *(void *)(a1 + 80);
    unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)this);
    if (v135 == 1) {
    uint64_t v137 = *(char **)(v134 + 32);
    }
    size_t v138 = *(void *)(v134 + 40);
    BOOL v139 = &v137[v138];
    if (PrimitiveSizeInBits <= 0xFF)
    {
      uint64_t v140 = (char *)memchr(v137, (char)PrimitiveSizeInBits, v138);
      if (v140) {
        BOOL v139 = v140;
      }
    }
    if (v139 - v137 != v138)
    {
LABEL_340:
      int v210 = *((_DWORD *)this + 5);
      if ((v210 & 0x40000000) != 0)
      {
        uint64_t v212 = (char *)*((void *)this - 1);
        uint64_t v211 = v210 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v211 = v210 & 0x7FFFFFF;
        uint64_t v212 = (char *)this - 32 * v211;
      }
      if (!v211) {
LABEL_347:
      }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
      uint64_t v213 = 32 * v211;
      while (*(unsigned char *)(*(void *)v212 + 16) == 16)
      {
        v212 += 32;
        v213 -= 32;
        if (!v213) {
          goto LABEL_347;
        }
      }
      return 0;
    }
    uint64_t v141 = 0;
    int v142 = 0;
    __base = &v809;
    size_t __nel = 0x1000000000;
    v803 = v805;
    *(void *)&long long v800 = v802;
    *((void *)&v800 + 1) = v802;
    DWORD2(v801) = 0;
    v805[0] = this;
    uint64_t v804 = 0x800000001;
    *(void *)&long long v801 = 0x100000008;
    int v143 = 1;
    v802[0] = this;
    while (1)
    {
      uint64_t v144 = *((void *)v803 + v141);
      int v145 = *(_DWORD *)(v144 + 20);
      if ((v145 & 0x40000000) != 0)
      {
        uint64_t v147 = *(uint64_t **)(v144 - 8);
        int v148 = &v147[4 * *(unsigned int *)(v144 + 60)];
        uint64_t v146 = v145 & 0x7FFFFFF;
        __int16 v149 = &v148[v146];
      }
      else
      {
        uint64_t v146 = v145 & 0x7FFFFFF;
        uint64_t v147 = (uint64_t *)(v144 - 32 * v146);
        int v148 = &v147[4 * *(unsigned int *)(v144 + 60)];
        __int16 v149 = &v148[v146];
      }
      if (v146) {
        BOOL v150 = v148 == v149;
      }
      else {
        BOOL v150 = 1;
      }
      if (!v150)
      {
        uint64_t v151 = 32 * v146 - 32;
        BOOL v152 = v148 + 1;
        while (1)
        {
          uint64_t v153 = *v147;
          if (*v147)
          {
            if (*(unsigned char *)(v153 + 16) == 33 && *(void *)(v153 + 40) == *(v152 - 1)) {
              break;
            }
          }
          if (v152 != v149)
          {
            v147 += 4;
            uint64_t v154 = v151;
            v151 -= 32;
            ++v152;
            if (v154) {
              continue;
            }
          }
          goto LABEL_223;
        }
LABEL_332:
        ZExtOrBitCast = 0;
LABEL_333:
        if (*((void *)&v800 + 1) != (void)v800) {
          free(*((void **)&v800 + 1));
        }
        if (v803 != v805) {
          free(v803);
        }
        if (__base != &v809) {
          free(__base);
        }
        if (ZExtOrBitCast) {
          return (llvm::UndefValue **)ZExtOrBitCast;
        }
        goto LABEL_340;
      }
LABEL_223:
      uint64_t v155 = *(void *)(v144 + 8);
      if (!v155) {
        goto LABEL_305;
      }
      do
      {
        uint64_t v156 = *(void *)(v155 + 24);
        int v157 = *(unsigned __int8 *)(v156 + 16);
        if (!v156 || v157 != 83)
        {
          if (v157 == 54)
          {
            uint64_t v165 = *(void *)(v156 + 8);
            if (!v165) {
              goto LABEL_332;
            }
            if (*(void *)(v165 + 8)) {
              goto LABEL_332;
            }
            uint64_t v166 = *(void *)(v165 + 24);
            if (*(unsigned char *)(v166 + 16) != 66) {
              goto LABEL_332;
            }
            int v167 = *(_DWORD *)(v156 + 20);
            uint64_t v168 = (v167 & 0x40000000) != 0 ? *(void *)(v156 - 8) : v156 - 32 * (v167 & 0x7FFFFFF);
            if (*(unsigned char *)(*(void *)(v168 + 32) + 16) != 16) {
              goto LABEL_332;
            }
            uint64_t v177 = *(llvm::Type **)v156;
            if ((*(_DWORD *)(*(void *)v156 + 8) & 0xFE) == 0x12) {
              uint64_t v177 = (llvm::Type *)**((void **)v177 + 2);
            }
            unsigned int v178 = llvm::Type::getPrimitiveSizeInBits(v177);
            if ((v167 & 0x40000000) != 0) {
              uint64_t v179 = *(void *)(v156 - 8);
            }
            else {
              uint64_t v179 = v156 - 32 * (v167 & 0x7FFFFFF);
            }
            uint64_t v180 = *(void *)(v179 + 32);
            uint64_t v181 = (void *)(v180 + 24);
            uint64_t v182 = *(unsigned int *)(v180 + 32);
            if (v182 >= 0x41)
            {
              int v183 = 0;
              int64_t v184 = (unint64_t)(v182 + 63) >> 6;
              do
              {
                BOOL v49 = v184-- < 1;
                if (v49) {
                  break;
                }
                unint64_t v185 = *(void *)(*v181 + 8 * v184);
                v183 += __clz(v185);
              }
              while (!v185);
              int v186 = v182 | 0xFFFFFFC0;
              if ((v182 & 0x3F) == 0) {
                int v186 = 0;
              }
              if ((v182 - v183 - v186) > 0x40) {
                goto LABEL_332;
              }
              uint64_t v181 = (void *)*v181;
            }
            if (*v181 >= (unint64_t)v178) {
              goto LABEL_332;
            }
            if ((v167 & 0x40000000) != 0) {
              uint64_t v187 = *(void *)(v156 - 8);
            }
            else {
              uint64_t v187 = v156 - 32 * (v167 & 0x7FFFFFF);
            }
            uint64_t v188 = *(void *)(v187 + 32);
            uint64_t v189 = (void *)(v188 + 24);
            if (*(_DWORD *)(v188 + 32) >= 0x41u) {
              uint64_t v189 = (void *)*v189;
            }
            uint64_t v190 = (void *)*v189;
            if (__nel >= (unint64_t)HIDWORD(__nel)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v191 = (uint64_t *)((char *)__base + 16 * __nel);
            *int v191 = v141 | ((void)v190 << 32);
            v191[1] = v166;
          }
          else
          {
            if (v157 != 66) {
              goto LABEL_332;
            }
            if (__nel >= (unint64_t)HIDWORD(__nel)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v164 = (char *)__base + 16 * __nel;
            void *v164 = v141;
            v164[1] = v156;
          }
          p_nel = &__nel;
          goto LABEL_293;
        }
        uint64_t v158 = *((void *)&v800 + 1);
        uint64_t v159 = DWORD1(v801);
        if (*((void *)&v800 + 1) == (void)v800)
        {
          if (DWORD1(v801))
          {
            char v160 = 0;
            uint64_t v161 = 8 * DWORD1(v801);
            uint64_t v162 = (void *)*((void *)&v800 + 1);
            while (*v162 != v156)
            {
              if (*v162 == -2) {
                char v160 = v162;
              }
              ++v162;
              v161 -= 8;
              if (!v161)
              {
                if (!v160) {
                  goto LABEL_234;
                }
                *char v160 = v156;
                --DWORD2(v801);
                goto LABEL_291;
              }
            }
            goto LABEL_294;
          }
LABEL_234:
          unsigned int v163 = v801;
          if (DWORD1(v801) < v801)
          {
            ++DWORD1(v801);
            *(void *)(*((void *)&v800 + 1) + 8 * v159) = v156;
            goto LABEL_291;
          }
        }
        else
        {
          unsigned int v163 = v801;
        }
        if (3 * v163 <= 4 * (DWORD1(v801) - DWORD2(v801)))
        {
          if (v163 >= 0x40) {
            v163 *= 2;
          }
          else {
            unsigned int v163 = 128;
          }
        }
        else if (v163 - DWORD1(v801) >= v163 >> 3)
        {
          goto LABEL_248;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v800, v163);
        unsigned int v163 = v801;
        uint64_t v158 = *((void *)&v800 + 1);
LABEL_248:
        unsigned int v169 = v163 - 1;
        unsigned int v170 = (v163 - 1) & ((v156 >> 4) ^ (v156 >> 9));
        uint64_t v171 = (void *)(v158 + 8 * v170);
        uint64_t v172 = *v171;
        if (*v171 == -1)
        {
          int64_t v173 = 0;
LABEL_284:
          if (v173) {
            uint64_t v193 = v173;
          }
          else {
            uint64_t v193 = v171;
          }
          if (*v193 != v156)
          {
            if (*v193 == -2) {
              --DWORD2(v801);
            }
            else {
              ++DWORD1(v801);
            }
            *uint64_t v193 = v156;
LABEL_291:
            if (v804 >= (unint64_t)HIDWORD(v804)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v803 + v804) = v156;
            p_nel = (size_t *)&v804;
LABEL_293:
            ++*(_DWORD *)p_nel;
          }
        }
        else
        {
          int64_t v173 = 0;
          int v174 = 1;
          while (v172 != v156)
          {
            if (v173) {
              BOOL v175 = 0;
            }
            else {
              BOOL v175 = v172 == -2;
            }
            if (v175) {
              int64_t v173 = v171;
            }
            unsigned int v176 = v170 + v174++;
            unsigned int v170 = v176 & v169;
            uint64_t v171 = (void *)(v158 + 8 * (v176 & v169));
            uint64_t v172 = *v171;
            if (*v171 == -1) {
              goto LABEL_284;
            }
          }
        }
LABEL_294:
        uint64_t v155 = *(void *)(v155 + 8);
      }
      while (v155);
      int v143 = v804;
LABEL_305:
      uint64_t v141 = (v142 + 1);
      int v142 = v141;
      if (v143 == v141)
      {
        if (!__nel)
        {
          int v361 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)this, 0);
          ZExtOrBitCast = sub_1CC9D3C84(a1, this, v361);
          goto LABEL_333;
        }
        if (__nel == 1)
        {
          uint64_t v794 = 0;
          uint64_t v795 = 0;
          int v796 = 0;
          uint64_t v791 = 0;
          uint64_t v792 = 0;
          int v194 = 1;
          int v793 = 0;
          goto LABEL_655;
        }
        qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1CCA98598);
        int v194 = __nel;
        uint64_t v794 = 0;
        uint64_t v795 = 0;
        int v796 = 0;
        uint64_t v791 = 0;
        uint64_t v792 = 0;
        int v793 = 0;
        if (!__nel)
        {
LABEL_936:
          uint64_t v554 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)this, v362);
          if (v804 != 1)
          {
            uint64_t v555 = (llvm::ValueAsMetadata **)((char *)v803 + 8);
            uint64_t v556 = 8 * v804 - 8;
            do
            {
              uint64_t v557 = *v555++;
              sub_1CC9D3C84(a1, v557, v554);
              v556 -= 8;
            }
            while (v556);
          }
          ZExtOrBitCast = sub_1CC9D3C84(a1, this, v554);
          MEMORY[0x1D25D9CD0](v791, 8);
          MEMORY[0x1D25D9CD0](v794, 8);
          goto LABEL_333;
        }
LABEL_655:
        unsigned int v363 = 0;
        while (2)
        {
          unsigned int v364 = (unsigned int *)((char *)__base + 16 * v363);
          unint64_t v365 = v364[1];
          uint64_t v776 = (uint64_t ***)*((void *)v803 + *v364);
          unint64_t v779 = (llvm::Type *)**((void **)v364 + 1);
          *(void *)&long long v797 = v776;
          DWORD2(v797) = v365;
          int v367 = llvm::Type::getPrimitiveSizeInBits(v779);
          if (v366 == 1) {
          HIDWORD(v797) = v367;
          }
          int v368 = *(llvm::Value **)sub_1CCA935C8((uint64_t)&v791, &v797);
          if (v368) {
            goto LABEL_684;
          }
          int v369 = *((_DWORD *)v776 + 5);
          unint64_t v370 = v760;
          unsigned int v761 = v363;
          int v762 = v194;
          if ((v369 & 0x10000000) != 0)
          {
            uint64_t v371 = ***v776;
            uint64_t v372 = *(void *)(v371 + 152);
            uint64_t v373 = *(unsigned int *)(v371 + 168);
            if (!v373) {
              goto LABEL_666;
            }
            LODWORD(v374) = (v373 - 1) & ((v776 >> 4) ^ (v776 >> 9));
            uint64_t v375 = (uint64_t ****)(v372 + 16 * v374);
            uint64_t v376 = *v375;
            if (*v375 != v776)
            {
              int v377 = 1;
              while (v376 != (uint64_t ***)-4096)
              {
                int v378 = v374 + v377++;
                uint64_t v374 = v378 & (v373 - 1);
                uint64_t v376 = *(uint64_t ****)(v372 + 16 * v374);
                if (v376 == v776)
                {
                  uint64_t v375 = (uint64_t ****)(v372 + 16 * v374);
                  goto LABEL_667;
                }
              }
LABEL_666:
              uint64_t v375 = (uint64_t ****)(v372 + 16 * v373);
            }
LABEL_667:
            uint64_t v379 = v375[1];
            int v382 = *v379;
            uint64_t v381 = (char *)(v379 + 2);
            uint64_t v380 = v382;
          }
          else
          {
            uint64_t v380 = 0;
            uint64_t v381 = &byte_1CFBCE98E;
          }
          __int16 v790 = 773;
          v789[0] = v381;
          v789[1] = v380;
          v789[2] = ".off";
          unint64_t v768 = v365;
          *(void *)&long long v797 = v789;
          unint64_t v760 = v760 & 0xFFFFFFFF00000000 | v365;
          unint64_t v798 = v370 & 0xFFFFFFFF00000000 | v365;
          __int16 v799 = 2050;
          int v383 = operator new(0x48uLL);
          int v384 = v383;
          int v385 = v776;
          v383[1] = v779;
          uint64_t v386 = (llvm::Value *)(v383 + 1);
          *int v383 = 0;
          v383[2] = 0;
          unsigned int v767 = v383 + 2;
          v383[3] = 0x4000000000000053;
          *((_OWORD *)v383 + 2) = 0u;
          uint64_t v387 = (uint64_t **)(v383 + 4);
          *((_OWORD *)v383 + 3) = 0u;
          *((_DWORD *)v383 + 16) = 0;
          uint64_t v769 = (llvm::Value *)(v383 + 1);
          if (v776)
          {
            uint64_t v536 = v776[5];
            v383[6] = v536;
            *((_WORD *)v536 + 9) &= ~0x8000u;
            if ((*((unsigned char *)v383 + 31) & 0x10) != 0)
            {
              unint64_t v546 = v536[7];
              if (v546)
              {
                unint64_t v547 = (llvm::ValueSymbolTable *)v546[13];
                if (v547)
                {
                  llvm::ValueSymbolTable::reinsertValue(v547, v386);
                  uint64_t v386 = v769;
                }
              }
            }
            uint64_t v537 = v776[3];
            v384[4] = v537;
            v384[5] = v776 + 3;
            v537[1] = (uint64_t *)v387;
            v776[3] = v387;
          }
          *((_DWORD *)v384 + 17) = v369 & 0x7FFFFFF;
          llvm::Value::setNameImpl(v386, (const char **)&v797);
          if (*((unsigned char *)v384 + 24))
          {
LABEL_670:
            uint64_t v388 = *((unsigned int *)v384 + 17);
            uint64_t v389 = operator new(40 * v388);
            void *v384 = v389;
            if (v388)
            {
              BOOL v390 = &v389[4 * v388];
              do
              {
                *uint64_t v389 = 0;
                v389[1] = 0;
                v389[2] = 0;
                v389[3] = v769;
                v389 += 4;
              }
              while (v389 != v390);
            }
            int v391 = *((_DWORD *)v385 + 5);
            if ((v391 & 0x40000000) != 0)
            {
              int v393 = (uint64_t *)*(v385 - 1);
              uint64_t v394 = &v393[4 * *((unsigned int *)v385 + 15)];
              uint64_t v392 = v391 & 0x7FFFFFF;
              uint64_t v395 = &v394[v392];
            }
            else
            {
              uint64_t v392 = v391 & 0x7FFFFFF;
              int v393 = (uint64_t *)&v385[-4 * v392];
              uint64_t v394 = &v393[4 * *((unsigned int *)v385 + 15)];
              uint64_t v395 = &v394[v392];
            }
            if (v392) {
              BOOL v396 = v394 == v395;
            }
            else {
              BOOL v396 = 1;
            }
            if (!v396)
            {
              size_t v782 = (size_t)&v393[4 * v392];
              uint64_t v785 = v395;
              while (1)
              {
                uint64_t v788 = 0;
                uint64_t v400 = *v394;
                uint64_t v788 = *v394;
                uint64_t v401 = *v393;
                if (v796)
                {
                  unsigned int v402 = (v796 - 1) & ((v400 >> 4) ^ (v400 >> 9));
                  int v403 = (uint64_t *)(v794 + 16 * v402);
                  uint64_t v404 = *v403;
                  if (v400 == *v403) {
                    goto LABEL_701;
                  }
                  unsigned int v405 = 0;
                  int v406 = 1;
                  while (v404 != -4096)
                  {
                    if (v405) {
                      BOOL v407 = 0;
                    }
                    else {
                      BOOL v407 = v404 == -8192;
                    }
                    if (v407) {
                      unsigned int v405 = v403;
                    }
                    unsigned int v408 = v402 + v406++;
                    unsigned int v402 = v408 & (v796 - 1);
                    int v403 = (uint64_t *)(v794 + 16 * v402);
                    uint64_t v404 = *v403;
                    if (v400 == *v403) {
                      goto LABEL_701;
                    }
                  }
                  if (v405) {
                    uint64_t v409 = v405;
                  }
                  else {
                    uint64_t v409 = v403;
                  }
                }
                else
                {
                  uint64_t v409 = 0;
                }
                int v403 = sub_1CC0A3E2C((uint64_t)&v794, (uint64_t)&v788, &v788, v409);
                *int v403 = v788;
                v403[1] = 0;
LABEL_701:
                uint64_t v410 = v403[1];
                if (v410)
                {
                  uint64_t v411 = v788;
                  int v412 = *((_DWORD *)v384 + 7);
                  uint64_t v413 = v412 & 0x7FFFFFF;
                  if ((v412 & 0x7FFFFFF) == *((_DWORD *)v384 + 17))
                  {
                    unsigned int v457 = v413 + (v413 >> 1);
                    if (v457 <= 2) {
                      uint64_t v458 = 2;
                    }
                    else {
                      uint64_t v458 = v457;
                    }
                    *((_DWORD *)v384 + 17) = v458;
                    if ((v412 & 0x40000000) != 0) {
                      uint64_t v459 = (uint64_t *)*v384;
                    }
                    else {
                      uint64_t v459 = (uint64_t *)((char *)v769 - 32 * v413);
                    }
                    __p = v459;
                    int v460 = operator new(40 * v458);
                    void *v384 = v460;
                    uint64_t v461 = v460;
                    do
                    {
                      *uint64_t v461 = 0;
                      v461[1] = 0;
                      v461[2] = 0;
                      v461[3] = v769;
                      v461 += 4;
                    }
                    while (v461 != &v460[4 * v458]);
                    int v462 = *((_DWORD *)v384 + 7);
                    if ((v462 & 0x40000000) != 0) {
                      uint64_t v463 = (uint64_t)v460;
                    }
                    else {
                      uint64_t v463 = (uint64_t)v769 - 32 * (v462 & 0x7FFFFFF);
                    }
                    uint64_t v757 = v463;
                    sub_1CC5E4108((uint64_t)&v797, __p, &__p[4 * v413], v463);
                    if (v413)
                    {
                      memmove((void *)(v757 + 32 * v458), &__p[4 * v413], 8 * v413);
                      uint64_t v464 = 4 * v413;
                      do
                      {
                        uint64_t v465 = &__p[v464];
                        if (__p[v464 - 4])
                        {
                          *(void *)*(v465 - 2) = *(v465 - 3);
                          uint64_t v466 = *(v465 - 3);
                          if (v466) {
                            *(void *)(v466 + 16) = *(v465 - 2);
                          }
                        }
                        v464 -= 4;
                      }
                      while (v464 * 8);
                    }
                    operator delete(__p);
                    int v412 = *((_DWORD *)v384 + 7);
                    int v385 = v776;
                  }
                  uint64_t v414 = (v412 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v384 + 7) = v412 & 0xF8000000 | (v412 + 1) & 0x7FFFFFF;
                  if ((v412 & 0x40000000) != 0) {
                    uint64_t v415 = (char *)*v384;
                  }
                  else {
                    uint64_t v415 = (char *)v769 - 32 * v414;
                  }
                  uint64_t v416 = (v414 - 1);
                  int v417 = &v415[32 * v416];
                  if (*(void *)v417)
                  {
                    **((void **)v417 + 2) = *((void *)v417 + 1);
                    uint64_t v456 = *((void *)v417 + 1);
                    if (v456) {
                      *(void *)(v456 + 16) = *((void *)v417 + 2);
                    }
                  }
                  *(void *)int v417 = v410;
                  uint64_t v420 = *(void *)(v410 + 8);
                  uint64_t v419 = (char **)(v410 + 8);
                  uint64_t v418 = v420;
                  *((void *)v417 + 1) = v420;
                  if (v420) {
                    *(void *)(v418 + 16) = v417 + 8;
                  }
                  *(void *)&v415[32 * v416 + 16] = v419;
                  llvm::APInt *v419 = v417;
LABEL_709:
                  int v421 = *((_DWORD *)v384 + 7);
                  uint64_t v422 = v421 & 0x7FFFFFF;
                  if ((v421 & 0x40000000) != 0) {
                    uint64_t v423 = (char *)*v384;
                  }
                  else {
                    uint64_t v423 = (char *)v769 - 32 * v422;
                  }
                  goto LABEL_711;
                }
                if ((uint64_t ***)v401 == v385)
                {
                  v403[1] = (uint64_t)v769;
                  uint64_t v411 = v788;
                  int v437 = *((_DWORD *)v384 + 7);
                  uint64_t v438 = v437 & 0x7FFFFFF;
                  if ((v437 & 0x7FFFFFF) == *((_DWORD *)v384 + 17))
                  {
                    unsigned int v504 = v438 + (v438 >> 1);
                    if (v504 <= 2) {
                      uint64_t v505 = 2;
                    }
                    else {
                      uint64_t v505 = v504;
                    }
                    *((_DWORD *)v384 + 17) = v505;
                    if ((v437 & 0x40000000) != 0) {
                      unsigned int v506 = (uint64_t *)*v384;
                    }
                    else {
                      unsigned int v506 = (uint64_t *)((char *)v769 - 32 * v438);
                    }
                    __pb = v506;
                    uint64_t v507 = operator new(40 * v505);
                    void *v384 = v507;
                    unint64_t v508 = v507;
                    do
                    {
                      *unint64_t v508 = 0;
                      v508[1] = 0;
                      v508[2] = 0;
                      v508[3] = v769;
                      v508 += 4;
                    }
                    while (v508 != &v507[4 * v505]);
                    int v509 = *((_DWORD *)v384 + 7);
                    if ((v509 & 0x40000000) != 0) {
                      uint64_t v510 = (uint64_t)v507;
                    }
                    else {
                      uint64_t v510 = (uint64_t)v769 - 32 * (v509 & 0x7FFFFFF);
                    }
                    sub_1CC5E4108((uint64_t)&v797, __pb, &__pb[4 * v438], v510);
                    if (v438)
                    {
                      memmove((void *)(v510 + 32 * v505), &__pb[4 * v438], 8 * v438);
                      uint64_t v511 = 4 * v438;
                      do
                      {
                        int v512 = &__pb[v511];
                        if (__pb[v511 - 4])
                        {
                          *(void *)*(v512 - 2) = *(v512 - 3);
                          uint64_t v513 = *(v512 - 3);
                          if (v513) {
                            *(void *)(v513 + 16) = *(v512 - 2);
                          }
                        }
                        v511 -= 4;
                      }
                      while (v511 * 8);
                    }
                    operator delete(__pb);
                    int v437 = *((_DWORD *)v384 + 7);
                    int v385 = v776;
                  }
                  uint64_t v439 = (v437 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v384 + 7) = v437 & 0xF8000000 | (v437 + 1) & 0x7FFFFFF;
                  if ((v437 & 0x40000000) != 0) {
                    int v440 = (char *)*v384;
                  }
                  else {
                    int v440 = (char *)v769 - 32 * v439;
                  }
                  uint64_t v441 = (v439 - 1);
                  int v442 = &v440[32 * v441];
                  if (*(void *)v442)
                  {
                    **((void **)v442 + 2) = *((void *)v442 + 1);
                    uint64_t v493 = *((void *)v442 + 1);
                    if (v493) {
                      *(void *)(v493 + 16) = *((void *)v442 + 2);
                    }
                  }
                  *(void *)int v442 = v769;
                  uint64_t v443 = *v767;
                  *((void *)v442 + 1) = *v767;
                  if (v443) {
                    *(void *)(v443 + 16) = v442 + 8;
                  }
                  *(void *)&v440[32 * v441 + 16] = v767;
                  v384[2] = v442;
                  goto LABEL_709;
                }
                *(void *)&long long v797 = v385;
                DWORD2(v797) = v768;
                int v425 = llvm::Type::getPrimitiveSizeInBits(v779);
                if (v424 == 1) {
                HIDWORD(v797) = v425;
                }
                uint64_t v426 = *(void *)sub_1CCA935C8((uint64_t)&v791, &v797);
                uint64_t v411 = v788;
                if (!v426)
                {
                  uint64_t v444 = 0;
                  uint64_t v445 = *(void *)(a1 + 24);
                  uint64_t v446 = *(void *)(v788 + 40);
                  if (v446) {
                    uint64_t v447 = v446 - 24;
                  }
                  else {
                    uint64_t v447 = 0;
                  }
                  if (*(unsigned __int8 *)(v447 + 16) - 29 >= 0xB) {
                    uint64_t v447 = 0;
                  }
                  *(void *)(v445 + 48) = *(void *)(v447 + 40);
                  *(void *)(v445 + 56) = v447 + 24;
                  int v448 = *(unsigned __int8 **)(v447 + 48);
                  v789[0] = v448;
                  if (v448)
                  {
                    llvm::MetadataTracking::track((uint64_t)v789, v448, 2);
                    uint64_t v444 = v789[0];
                  }
                  sub_1CB8461A4(v445, 0, v444);
                  if (!v789[0]) {
                    goto LABEL_744;
                  }
                  int v529 = *(unsigned __int8 *)v789[0];
                  if ((v529 - 4) > 0x1E)
                  {
                    if ((v529 - 3) >= 0xFFFFFFFE) {
                      uint64_t v532 = v789[0];
                    }
                    else {
                      uint64_t v532 = 0;
                    }
                    if ((v529 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v531 = v532 + 8;
                      goto LABEL_894;
                    }
                    if (v529 == 3) {
                      *(void *)(v789[0] + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(v789[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v789[0] + 12))
                  {
                    uint64_t v530 = *(void *)(v789[0] + 16);
                    if ((v530 & 4) != 0)
                    {
                      unint64_t v531 = v530 & 0xFFFFFFFFFFFFFFF8;
                      if (v531)
                      {
LABEL_894:
                        *(void *)&long long v797 = v789;
                        sub_1CC5FA668(v531 + 16, &v797);
                      }
                    }
                  }
LABEL_744:
                  int v449 = (llvm::Instruction *)v401;
                  if (v768)
                  {
                    uint64_t v450 = *(void *)(a1 + 24);
                    unint64_t v451 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v401, v768, 0);
                    *(void *)&long long v797 = "extract";
                    __int16 v799 = 259;
                    int v449 = sub_1CC2429AC(v450, v401, (uint64_t)v451, (uint64_t)&v797, 0);
                  }
                  uint8x8_t v452 = *(uint64_t **)(a1 + 24);
                  v789[0] = "extract.t";
                  __int16 v790 = 259;
                  if (*(llvm::Type **)v449 != v779)
                  {
                    if (*((unsigned __int8 *)v449 + 16) <= 0x14u)
                    {
                      int v449 = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, llvm::Type *))(*(void *)v452[9] + 224))(v452[9], 38, v449, v779);
                      if (v449) {
                        BOOL v467 = *((unsigned __int8 *)v449 + 16) >= 0x1Cu;
                      }
                      else {
                        BOOL v467 = 0;
                      }
                      if (v467)
                      {
                        (*(void (**)(uint64_t, llvm::Instruction *, void *, uint64_t, uint64_t))(*(void *)v452[10] + 16))(v452[10], v449, v789, v452[6], v452[7]);
                        uint64_t v533 = *((unsigned int *)v452 + 2);
                        if (v533)
                        {
                          uint64_t v534 = *v452;
                          uint64_t v535 = v534 + 16 * v533;
                          do
                          {
                            llvm::Instruction::setMetadata(v449, *(_DWORD *)v534, *(llvm::MDNode **)(v534 + 8));
                            v534 += 16;
                          }
                          while (v534 != v535);
                        }
                      }
                    }
                    else
                    {
                      __int16 v799 = 257;
                      int v449 = llvm::CastInst::Create(38, (uint64_t)v449, (uint64_t)v779, (const char **)&v797, 0);
                      (*(void (**)(uint64_t, llvm::Instruction *, void *, uint64_t, uint64_t))(*(void *)v452[10] + 16))(v452[10], v449, v789, v452[6], v452[7]);
                      uint64_t v453 = *((unsigned int *)v452 + 2);
                      if (v453)
                      {
                        uint64_t v454 = *v452;
                        uint64_t v455 = v454 + 16 * v453;
                        do
                        {
                          llvm::Instruction::setMetadata(v449, *(_DWORD *)v454, *(llvm::MDNode **)(v454 + 8));
                          v454 += 16;
                        }
                        while (v454 != v455);
                      }
                    }
                  }
                  v403[1] = (uint64_t)v449;
                  uint64_t v468 = v788;
                  int v469 = *((_DWORD *)v384 + 7);
                  uint64_t v470 = v469 & 0x7FFFFFF;
                  if ((v469 & 0x7FFFFFF) == *((_DWORD *)v384 + 17))
                  {
                    unsigned int v519 = v470 + (v470 >> 1);
                    if (v519 <= 2) {
                      uint64_t v520 = 2;
                    }
                    else {
                      uint64_t v520 = v519;
                    }
                    *((_DWORD *)v384 + 17) = v520;
                    if ((v469 & 0x40000000) != 0) {
                      int v521 = (uint64_t *)*v384;
                    }
                    else {
                      int v521 = (uint64_t *)((char *)v769 - 32 * v470);
                    }
                    __pc = v521;
                    uint64_t v522 = operator new(40 * v520);
                    void *v384 = v522;
                    int v523 = v522;
                    do
                    {
                      void *v523 = 0;
                      v523[1] = 0;
                      v523[2] = 0;
                      v523[3] = v769;
                      v523 += 4;
                    }
                    while (v523 != &v522[4 * v520]);
                    int v524 = *((_DWORD *)v384 + 7);
                    if ((v524 & 0x40000000) != 0) {
                      uint64_t v525 = (uint64_t)v522;
                    }
                    else {
                      uint64_t v525 = (uint64_t)v769 - 32 * (v524 & 0x7FFFFFF);
                    }
                    uint64_t v759 = v525;
                    sub_1CC5E4108((uint64_t)&v797, __pc, &__pc[4 * v470], v525);
                    if (v470)
                    {
                      memmove((void *)(v759 + 32 * v520), &__pc[4 * v470], 8 * v470);
                      uint64_t v526 = 4 * v470;
                      do
                      {
                        uint64_t v527 = &__pc[v526];
                        if (__pc[v526 - 4])
                        {
                          *(void *)*(v527 - 2) = *(v527 - 3);
                          uint64_t v528 = *(v527 - 3);
                          if (v528) {
                            *(void *)(v528 + 16) = *(v527 - 2);
                          }
                        }
                        v526 -= 4;
                      }
                      while (v526 * 8);
                    }
                    operator delete(__pc);
                    int v469 = *((_DWORD *)v384 + 7);
                  }
                  uint64_t v471 = (v469 + 1) & 0x7FFFFFF;
                  *((_DWORD *)v384 + 7) = v469 & 0xF8000000 | (v469 + 1) & 0x7FFFFFF;
                  if ((v469 & 0x40000000) != 0) {
                    uint64_t v472 = (char *)*v384;
                  }
                  else {
                    uint64_t v472 = (char *)v769 - 32 * v471;
                  }
                  uint64_t v473 = (v471 - 1);
                  uint64_t v474 = &v472[32 * v473];
                  if (*(void *)v474)
                  {
                    **((void **)v474 + 2) = *((void *)v474 + 1);
                    uint64_t v514 = *((void *)v474 + 1);
                    if (v514) {
                      *(void *)(v514 + 16) = *((void *)v474 + 2);
                    }
                  }
                  *(void *)uint64_t v474 = v449;
                  if (v449)
                  {
                    uint64_t v475 = (char **)((char *)v449 + 8);
                    uint64_t v476 = *((void *)v449 + 1);
                    uint64_t v477 = &v472[32 * v473];
                    *((void *)v477 + 1) = v476;
                    if (v476) {
                      *(void *)(v476 + 16) = v477 + 8;
                    }
                    *((void *)v477 + 2) = v475;
                    *uint64_t v475 = v474;
                  }
                  int v478 = *((_DWORD *)v384 + 7);
                  uint64_t v479 = v478 & 0x7FFFFFF;
                  if ((v478 & 0x40000000) != 0) {
                    int v480 = (char *)*v384;
                  }
                  else {
                    int v480 = (char *)v769 - 32 * v479;
                  }
                  *(void *)&v480[32 * *((unsigned int *)v384 + 17) + 8 * (v479 - 1)] = v468;
                  if (*(unsigned char *)(v401 + 16) == 83 && v401)
                  {
                    uint64_t v481 = v800;
                    if (*((void *)&v800 + 1) == (void)v800)
                    {
                      unsigned int v482 = DWORD1(v801);
                      uint64_t v483 = (void *)(*((void *)&v800 + 1) + 8 * DWORD1(v801));
                      if (DWORD1(v801))
                      {
                        uint64_t v484 = 0;
                        while (*(void *)(*((void *)&v800 + 1) + v484) != v401)
                        {
                          v484 += 8;
                          if (8 * DWORD1(v801) == v484) {
                            goto LABEL_846;
                          }
                        }
                        uint64_t v483 = (void *)(*((void *)&v800 + 1) + v484);
                      }
LABEL_846:
                      uint64_t v481 = *((void *)&v800 + 1);
                    }
                    else
                    {
                      int v485 = v801 - 1;
                      unsigned int v486 = (v801 - 1) & ((v401 >> 4) ^ (v401 >> 9));
                      uint64_t v483 = (void *)(*((void *)&v800 + 1) + 8 * v486);
                      uint64_t v487 = *v483;
                      if (*v483 == -1)
                      {
                        unsigned int v488 = 0;
LABEL_884:
                        if (v488) {
                          uint64_t v483 = v488;
                        }
                        unsigned int v482 = DWORD1(v801);
                        if (*v483 != v401) {
                          uint64_t v483 = (void *)(*((void *)&v800 + 1) + 8 * v801);
                        }
                      }
                      else
                      {
                        unsigned int v488 = 0;
                        int v489 = 1;
                        while (v487 != v401)
                        {
                          if (v488) {
                            BOOL v490 = 0;
                          }
                          else {
                            BOOL v490 = v487 == -2;
                          }
                          if (v490) {
                            unsigned int v488 = v483;
                          }
                          unsigned int v491 = v486 + v489++;
                          unsigned int v486 = v491 & v485;
                          uint64_t v483 = (void *)(*((void *)&v800 + 1) + 8 * (v491 & v485));
                          uint64_t v487 = *v483;
                          if (*v483 == -1) {
                            goto LABEL_884;
                          }
                        }
                        unsigned int v482 = DWORD1(v801);
                      }
                    }
                    if (*((void *)&v800 + 1) == v481) {
                      unsigned int v515 = v482;
                    }
                    else {
                      unsigned int v515 = v801;
                    }
                    if (v483 != (void *)(*((void *)&v800 + 1) + 8 * v515))
                    {
                      if (v804)
                      {
                        uint64_t v516 = 8 * v804;
                        uint64_t v517 = (char *)v803;
                        while (*(void *)v517 != v401)
                        {
                          v517 += 8;
                          v516 -= 8;
                          if (!v516)
                          {
                            uint64_t v517 = (char *)v803 + 8 * v804;
                            break;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v517 = (char *)v803;
                      }
                      if (__nel >= (unint64_t)HIDWORD(__nel)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v518 = (unint64_t *)((char *)__base + 16 * __nel);
                      *uint64_t v518 = ((unint64_t)(v517 - (unsigned char *)v803) >> 3) | (v768 << 32);
                      v518[1] = (unint64_t)v449;
                      LODWORD(__nel) = __nel + 1;
                      ++v762;
                    }
                  }
                  int v385 = v776;
                  goto LABEL_712;
                }
                v403[1] = v426;
                int v427 = *((_DWORD *)v384 + 7);
                uint64_t v428 = v427 & 0x7FFFFFF;
                if ((v427 & 0x7FFFFFF) == *((_DWORD *)v384 + 17))
                {
                  unsigned int v494 = v428 + (v428 >> 1);
                  if (v494 <= 2) {
                    uint64_t v495 = 2;
                  }
                  else {
                    uint64_t v495 = v494;
                  }
                  *((_DWORD *)v384 + 17) = v495;
                  if ((v427 & 0x40000000) != 0) {
                    int v496 = (uint64_t *)*v384;
                  }
                  else {
                    int v496 = (uint64_t *)((char *)v769 - 32 * v428);
                  }
                  __pa = v496;
                  uint64_t v497 = operator new(40 * v495);
                  void *v384 = v497;
                  int v498 = v497;
                  do
                  {
                    *int v498 = 0;
                    v498[1] = 0;
                    v498[2] = 0;
                    v498[3] = v769;
                    v498 += 4;
                  }
                  while (v498 != &v497[4 * v495]);
                  int v499 = *((_DWORD *)v384 + 7);
                  if ((v499 & 0x40000000) != 0) {
                    uint64_t v500 = (uint64_t)v497;
                  }
                  else {
                    uint64_t v500 = (uint64_t)v769 - 32 * (v499 & 0x7FFFFFF);
                  }
                  uint64_t v758 = v500;
                  sub_1CC5E4108((uint64_t)&v797, __pa, &__pa[4 * v428], v500);
                  if (v428)
                  {
                    memmove((void *)(v758 + 32 * v495), &__pa[4 * v428], 8 * v428);
                    uint64_t v501 = 4 * v428;
                    do
                    {
                      int v502 = &__pa[v501];
                      if (__pa[v501 - 4])
                      {
                        *(void *)*(v502 - 2) = *(v502 - 3);
                        uint64_t v503 = *(v502 - 3);
                        if (v503) {
                          *(void *)(v503 + 16) = *(v502 - 2);
                        }
                      }
                      v501 -= 4;
                    }
                    while (v501 * 8);
                  }
                  operator delete(__pa);
                  int v427 = *((_DWORD *)v384 + 7);
                }
                uint64_t v429 = (v427 + 1) & 0x7FFFFFF;
                *((_DWORD *)v384 + 7) = v427 & 0xF8000000 | (v427 + 1) & 0x7FFFFFF;
                if ((v427 & 0x40000000) != 0) {
                  int v430 = (char *)*v384;
                }
                else {
                  int v430 = (char *)v769 - 32 * v429;
                }
                uint64_t v431 = (v429 - 1);
                uint64_t v432 = &v430[32 * v431];
                if (*(void *)v432)
                {
                  **((void **)v432 + 2) = *((void *)v432 + 1);
                  uint64_t v492 = *((void *)v432 + 1);
                  if (v492) {
                    *(void *)(v492 + 16) = *((void *)v432 + 2);
                  }
                }
                *(void *)uint64_t v432 = v426;
                uint64_t v435 = *(void *)(v426 + 8);
                uint64_t v434 = (char **)(v426 + 8);
                uint64_t v433 = v435;
                *((void *)v432 + 1) = v435;
                if (v435) {
                  *(void *)(v433 + 16) = v432 + 8;
                }
                *(void *)&v430[32 * v431 + 16] = v434;
                *uint64_t v434 = v432;
                int v436 = *((_DWORD *)v384 + 7);
                uint64_t v422 = v436 & 0x7FFFFFF;
                if ((v436 & 0x40000000) != 0) {
                  uint64_t v423 = (char *)*v384;
                }
                else {
                  uint64_t v423 = (char *)v769 - 32 * v422;
                }
                int v385 = v776;
LABEL_711:
                *(void *)&v423[32 * *((unsigned int *)v384 + 17) + 8 * (v422 - 1)] = v411;
LABEL_712:
                if (++v394 != v785)
                {
                  v393 += 4;
                  if (v393 != (uint64_t *)v782) {
                    continue;
                  }
                }
                break;
              }
            }
            sub_1CCA937E4(&v794);
            *(void *)&long long v797 = v385;
            DWORD2(v797) = v768;
            int v398 = llvm::Type::getPrimitiveSizeInBits(v779);
            if (v397 == 1) {
            HIDWORD(v797) = v398;
            }
            unsigned int v399 = (void *)sub_1CCA935C8((uint64_t)&v791, &v797);
            int v368 = v769;
            *unsigned int v399 = v769;
            unsigned int v363 = v761;
            int v194 = v762;
LABEL_684:
            sub_1CC9D3C84(a1, *((llvm::ValueAsMetadata **)__base + 2 * v363++ + 1), v368);
            if (v363 == v194) {
              goto LABEL_936;
            }
            continue;
          }
          break;
        }
        if ((*((unsigned char *)v384 + 31) & 0x10) == 0) {
          goto LABEL_934;
        }
        uint64_t v538 = ***(void ***)v769;
        uint64_t v539 = *(void *)(v538 + 152);
        uint64_t v540 = *(unsigned int *)(v538 + 168);
        if (!v540) {
          goto LABEL_926;
        }
        LODWORD(v541) = (v540 - 1) & ((v769 >> 4) ^ (v769 >> 9));
        int v542 = (llvm::Value **)(v539 + 16 * v541);
        int v543 = *v542;
        if (*v542 != v769)
        {
          int v544 = 1;
          while (v543 != (llvm::Value *)-4096)
          {
            int v545 = v541 + v544++;
            uint64_t v541 = v545 & (v540 - 1);
            int v543 = *(llvm::Value **)(v539 + 16 * v541);
            if (v543 == v769)
            {
              int v542 = (llvm::Value **)(v539 + 16 * v541);
              goto LABEL_927;
            }
          }
LABEL_926:
          int v542 = (llvm::Value **)(v539 + 16 * v540);
        }
LABEL_927:
        BOOL v548 = v542[1];
        unint64_t v551 = *(void *)v548;
        int v549 = (char *)v548 + 16;
        unint64_t v550 = v551;
        if (v551 >= 5 && (*(_DWORD *)v549 == *(_DWORD *)"llvm." ? (BOOL v552 = v549[4] == aLlvm_1[4]) : (BOOL v552 = 0), v552))
        {
          *((_DWORD *)v384 + 10) |= 0x2000u;
          int v553 = llvm::Function::lookupIntrinsicID(v549, v550);
        }
        else
        {
LABEL_934:
          int v553 = 0;
          *((_DWORD *)v384 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v384 + 11) = v553;
        int v385 = v776;
        goto LABEL_670;
      }
    }
  }
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  while (1)
  {
    uint64_t v86 = (v82 & 0x40000000) != 0
        ? *(llvm::Value **)(*((void *)this - 1) + v84)
        : *(llvm::Value **)((char *)this + v84 + -32 * v83);
    if (*((unsigned char *)v86 + 16) != 83) {
      break;
    }
    ++v85;
    v84 += 32;
    if (v83 == v85) {
      goto LABEL_141;
    }
  }
  if (v83 - 1 != v85)
  {
    int v89 = v85 + 1;
    do
    {
      uint64_t v90 = (char *)this - 32 * v83;
      if ((v82 & 0x40000000) != 0) {
        uint64_t v90 = (char *)*((void *)this - 1);
      }
      uint64_t v91 = *(llvm::Value **)&v90[32 * v89];
      if (v91 != v86 && *((unsigned char *)v91 + 16) != 83) {
        goto LABEL_141;
      }
    }
    while (v83 != ++v89);
  }
  __base = &v811;
  size_t __nel = (size_t)&v811;
  uint64_t v809 = 16;
  LODWORD(v810) = 0;
  int v92 = sub_1CCA97C60((uint64_t)this, (uint64_t)v86, (uint64_t)&__base);
  char v93 = v92;
  if (v92) {
    ZExtOrBitCast = sub_1CC9D3C84(a1, this, v86);
  }
  if ((void *)__nel != __base) {
    free((void *)__nel);
  }
  if ((v93 & 1) == 0) {
    goto LABEL_141;
  }
  return (llvm::UndefValue **)ZExtOrBitCast;
}